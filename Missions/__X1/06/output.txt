// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 58 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 22
// Difficulty := 4 ;
  14: LD_ADDR_OWVAR 67
  18: PUSH
  19: LD_INT 4
  21: ST_TO_ADDR
// CreateNature ( natureArea , swampArea ) ;
  22: LD_INT 1
  24: PPUSH
  25: LD_INT 3
  27: PPUSH
  28: CALL 10248 0 2
// PrepareArabian ;
  32: CALL 501 0 0
// PrepareRussian ;
  36: CALL 11039 0 0
// Action ;
  40: CALL 19230 0 0
// if debug then
  44: LD_EXP 1
  48: IFFALSE 57
// FogOff ( 2 ) ;
  50: LD_INT 2
  52: PPUSH
  53: CALL_OW 344
// end ;
  57: END
// export debug , prefix , bergkampfArrived , outpostDestroyed , ruLoseCounter , omarArrived , gaidarKilled , convoySaveCounter , rolfScriptBase , omarScriptBase , leninScriptBase , linkedWithRolf , rolfDied , leninSpotted , mortarConstructed , rolfHasVehicles , rolfWantVehicles , omarWantVehicles , rolfWaitingForVehiclesTimer , omarWaitingForVehiclesTimer , omarVehiclesCounter , omarHasVehicles , omarAttack , escapeAllowed , escapeTimer , heikeLoseCounter , disableAttackOnHeike , firstAttack , canRolfJoin , buildingsFromPrev , gameActive , rolfAttack , collectedOil ; function Init ; begin
  58: LD_INT 0
  60: PPUSH
// debug := false ;
  61: LD_ADDR_EXP 1
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// prefix := 05_ ;
  69: LD_ADDR_EXP 2
  73: PUSH
  74: LD_STRING 05_
  76: ST_TO_ADDR
// gaidarKilled := LoadVariable ( 04_2_GaidarKilled , true ) ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_STRING 04_2_GaidarKilled
  84: PPUSH
  85: LD_INT 1
  87: PPUSH
  88: CALL_OW 30
  92: ST_TO_ADDR
// convoySaveCounter := LoadVariable ( 05_ConvoySavedCounter , 0 ) ;
  93: LD_ADDR_EXP 8
  97: PUSH
  98: LD_STRING 05_ConvoySavedCounter
 100: PPUSH
 101: LD_INT 0
 103: PPUSH
 104: CALL_OW 30
 108: ST_TO_ADDR
// buildingsFromPrev := LoadVariable ( 05_Buildings , [ ] ) ;
 109: LD_ADDR_EXP 30
 113: PUSH
 114: LD_STRING 05_Buildings
 116: PPUSH
 117: EMPTY
 118: PPUSH
 119: CALL_OW 30
 123: ST_TO_ADDR
// bergkampfArrived := false ;
 124: LD_ADDR_EXP 3
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// omarArrived := false ;
 132: LD_ADDR_EXP 6
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// outpostDestroyed := false ;
 140: LD_ADDR_EXP 4
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// ruLoseCounter := 0 ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// rolfScriptBase := false ;
 156: LD_ADDR_EXP 9
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// omarScriptBase := false ;
 164: LD_ADDR_EXP 10
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// linkedWithRolf := 0 ;
 172: LD_ADDR_EXP 12
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// heikeLoseCounter := 0 ;
 180: LD_ADDR_EXP 26
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// rolfDied := false ;
 188: LD_ADDR_EXP 13
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// leninSpotted := false ;
 196: LD_ADDR_EXP 14
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// mortarConstructed := false ;
 204: LD_ADDR_EXP 15
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// rolfHasVehicles := false ;
 212: LD_ADDR_EXP 16
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// leninScriptBase := true ;
 220: LD_ADDR_EXP 11
 224: PUSH
 225: LD_INT 1
 227: ST_TO_ADDR
// rolfWantVehicles := false ;
 228: LD_ADDR_EXP 17
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// omarWantVehicles := false ;
 236: LD_ADDR_EXP 18
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// omarHasVehicles := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// escapeAllowed := false ;
 252: LD_ADDR_EXP 24
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 260: LD_ADDR_EXP 19
 264: PUSH
 265: LD_INT 31500
 267: PUSH
 268: LD_INT 28350
 270: PUSH
 271: LD_INT 25900
 273: PUSH
 274: LD_INT 24150
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: LIST
 281: LIST
 282: PUSH
 283: LD_OWVAR 67
 287: ARRAY
 288: ST_TO_ADDR
// omarWaitingForVehiclesTimer := [ 15 15$00 , 13 13$30 , 12 12$20 , 11 11$30 ] [ Difficulty ] ;
 289: LD_ADDR_EXP 20
 293: PUSH
 294: LD_INT 31500
 296: PUSH
 297: LD_INT 28350
 299: PUSH
 300: LD_INT 25900
 302: PUSH
 303: LD_INT 24150
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: LIST
 310: LIST
 311: PUSH
 312: LD_OWVAR 67
 316: ARRAY
 317: ST_TO_ADDR
// omarVehiclesCounter := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 318: LD_ADDR_EXP 21
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: LD_INT 5
 328: PUSH
 329: LD_INT 6
 331: PUSH
 332: LD_INT 6
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: LIST
 339: LIST
 340: PUSH
 341: LD_OWVAR 67
 345: ARRAY
 346: ST_TO_ADDR
// omarAttack := false ;
 347: LD_ADDR_EXP 23
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// disableAttackOnHeike := false ;
 355: LD_ADDR_EXP 27
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// escapeTimer := 8 8$30 ;
 363: LD_ADDR_EXP 25
 367: PUSH
 368: LD_INT 17850
 370: ST_TO_ADDR
// firstAttack := true ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_INT 1
 378: ST_TO_ADDR
// canRolfJoin := true ;
 379: LD_ADDR_EXP 29
 383: PUSH
 384: LD_INT 1
 386: ST_TO_ADDR
// gameActive := false ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 0
 394: ST_TO_ADDR
// rolfAttack := false ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 0
 402: ST_TO_ADDR
// collectedOil := 0 ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 0
 410: ST_TO_ADDR
// end ;
 411: LD_VAR 0 1
 415: RET
// every 0 0$2 trigger GetSide ( Rolf ) = 2 and IsOk ( Rolf ) and not omarArrived do
 416: LD_EXP 47
 420: PPUSH
 421: CALL_OW 255
 425: PUSH
 426: LD_INT 2
 428: EQUAL
 429: PUSH
 430: LD_EXP 47
 434: PPUSH
 435: CALL_OW 302
 439: AND
 440: PUSH
 441: LD_EXP 6
 445: NOT
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_ROLF ) ;
 452: LD_STRING ACH_ROLF
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$2 trigger collectedOil >= 300 do
 460: LD_EXP 33
 464: PUSH
 465: LD_INT 300
 467: GREATEREQUAL
 468: IFFALSE 480
 470: GO 472
 472: DISABLE
// SetAchievement ( ACH_OIL ) ;
 473: LD_STRING ACH_OIL
 475: PPUSH
 476: CALL_OW 543
 480: END
// every 0 0$2 trigger IsDead ( ruLenin ) do
 481: LD_INT 52
 483: PPUSH
 484: CALL_OW 301
 488: IFFALSE 500
 490: GO 492
 492: DISABLE
// SetAchievement ( ACH_LENIN ) ; end_of_file
 493: LD_STRING ACH_LENIN
 495: PPUSH
 496: CALL_OW 543
 500: END
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Olaf , Omar , Kurt , Aviradze , Rolf , arDepot , heikeSecondSquad , heikeApes ; export rolfSquad , omarSquad ; export function PrepareArabian ; var i , b , base , hasRadar , hasRemote , hasDrugs , factory , depot , lab , bunkers , veh , tmp , limiter ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
 506: PPUSH
 507: PPUSH
 508: PPUSH
 509: PPUSH
 510: PPUSH
 511: PPUSH
 512: PPUSH
 513: PPUSH
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_nation := 2 ;
 517: LD_ADDR_OWVAR 21
 521: PUSH
 522: LD_INT 2
 524: ST_TO_ADDR
// uc_side := 5 ;
 525: LD_ADDR_OWVAR 20
 529: PUSH
 530: LD_INT 5
 532: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
 533: LD_ADDR_EXP 42
 537: PUSH
 538: LD_STRING Abdul
 540: PPUSH
 541: LD_INT 0
 543: PPUSH
 544: LD_STRING 
 546: PPUSH
 547: CALL 29443 0 3
 551: ST_TO_ADDR
// Omar := PrepareUnit ( Omar , false ,  ) ;
 552: LD_ADDR_EXP 44
 556: PUSH
 557: LD_STRING Omar
 559: PPUSH
 560: LD_INT 0
 562: PPUSH
 563: LD_STRING 
 565: PPUSH
 566: CALL 29443 0 3
 570: ST_TO_ADDR
// uc_side := 2 ;
 571: LD_ADDR_OWVAR 20
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 579: LD_ADDR_EXP 34
 583: PUSH
 584: LD_STRING Heike
 586: PPUSH
 587: LD_EXP 1
 591: NOT
 592: PPUSH
 593: LD_EXP 2
 597: PPUSH
 598: CALL 29443 0 3
 602: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 603: LD_ADDR_EXP 37
 607: PUSH
 608: LD_STRING Ibrahim
 610: PPUSH
 611: LD_EXP 1
 615: NOT
 616: PPUSH
 617: LD_EXP 2
 621: PPUSH
 622: CALL 29443 0 3
 626: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 627: LD_ADDR_EXP 35
 631: PUSH
 632: LD_STRING Givi
 634: PPUSH
 635: LD_EXP 1
 639: NOT
 640: PPUSH
 641: LD_EXP 2
 645: PPUSH
 646: CALL 29443 0 3
 650: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 651: LD_ADDR_EXP 38
 655: PUSH
 656: LD_STRING Kamil
 658: PPUSH
 659: LD_EXP 1
 663: NOT
 664: PPUSH
 665: LD_EXP 2
 669: PPUSH
 670: CALL 29443 0 3
 674: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 675: LD_ADDR_EXP 39
 679: PUSH
 680: LD_STRING Kaia
 682: PPUSH
 683: LD_EXP 1
 687: NOT
 688: PPUSH
 689: LD_EXP 2
 693: PPUSH
 694: CALL 29443 0 3
 698: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 699: LD_ADDR_EXP 40
 703: PUSH
 704: LD_STRING Sophia
 706: PPUSH
 707: LD_EXP 1
 711: NOT
 712: PPUSH
 713: LD_EXP 2
 717: PPUSH
 718: CALL 29443 0 3
 722: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 723: LD_ADDR_EXP 41
 727: PUSH
 728: LD_STRING Markov
 730: PPUSH
 731: LD_EXP 1
 735: NOT
 736: PPUSH
 737: LD_EXP 2
 741: PPUSH
 742: CALL 29443 0 3
 746: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 747: LD_ADDR_EXP 46
 751: PUSH
 752: LD_STRING Aviradze
 754: PPUSH
 755: LD_EXP 1
 759: NOT
 760: PPUSH
 761: LD_EXP 2
 765: PPUSH
 766: CALL 29443 0 3
 770: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 771: LD_ADDR_EXP 45
 775: PUSH
 776: LD_STRING Kurt
 778: PPUSH
 779: LD_EXP 1
 783: NOT
 784: PPUSH
 785: LD_EXP 2
 789: PPUSH
 790: CALL 29443 0 3
 794: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 795: LD_ADDR_EXP 36
 799: PUSH
 800: LD_STRING Mike
 802: PPUSH
 803: LD_EXP 1
 807: NOT
 808: PPUSH
 809: LD_EXP 2
 813: PPUSH
 814: CALL 29443 0 3
 818: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 819: LD_ADDR_EXP 43
 823: PUSH
 824: LD_STRING Olaf
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_STRING 
 832: PPUSH
 833: CALL 29443 0 3
 837: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 05_others ) ;
 838: LD_ADDR_EXP 49
 842: PUSH
 843: LD_STRING 05_others
 845: PPUSH
 846: CALL_OW 31
 850: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 05_apes ) ;
 851: LD_ADDR_EXP 50
 855: PUSH
 856: LD_STRING 05_apes
 858: PPUSH
 859: CALL_OW 31
 863: ST_TO_ADDR
// hasRadar := LoadVariable ( 05_Radar , debug ) ;
 864: LD_ADDR_VAR 0 5
 868: PUSH
 869: LD_STRING 05_Radar
 871: PPUSH
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 30
 881: ST_TO_ADDR
// hasRemote := LoadVariable ( 05_RemoteControl , debug ) ;
 882: LD_ADDR_VAR 0 6
 886: PUSH
 887: LD_STRING 05_RemoteControl
 889: PPUSH
 890: LD_EXP 1
 894: PPUSH
 895: CALL_OW 30
 899: ST_TO_ADDR
// hasDrugs := LoadVariable ( 05_DrugsTested , debug ) ;
 900: LD_ADDR_VAR 0 7
 904: PUSH
 905: LD_STRING 05_DrugsTested
 907: PPUSH
 908: LD_EXP 1
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// if hasDrugs then
 918: LD_VAR 0 7
 922: IFFALSE 937
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
 924: LD_INT 5
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 2
 932: PPUSH
 933: CALL_OW 322
// if hasRadar then
 937: LD_VAR 0 5
 941: IFFALSE 956
// SetTech ( tech_radar , 2 , state_researched ) ;
 943: LD_INT 6
 945: PPUSH
 946: LD_INT 2
 948: PPUSH
 949: LD_INT 2
 951: PPUSH
 952: CALL_OW 322
// if hasRemote then
 956: LD_VAR 0 6
 960: IFFALSE 975
// SetTech ( tech_remCont , 2 , state_researched ) ;
 962: LD_INT 15
 964: PPUSH
 965: LD_INT 2
 967: PPUSH
 968: LD_INT 2
 970: PPUSH
 971: CALL_OW 322
// tmp := AreaToList ( camArea , 0 ) ;
 975: LD_ADDR_VAR 0 13
 979: PUSH
 980: LD_INT 5
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 517
 990: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
 991: LD_ADDR_VAR 0 2
 995: PUSH
 996: DOUBLE
 997: LD_INT 1
 999: DEC
1000: ST_TO_ADDR
1001: LD_VAR 0 13
1005: PUSH
1006: LD_INT 1
1008: ARRAY
1009: PUSH
1010: FOR_TO
1011: IFFALSE 1088
// if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
1013: LD_VAR 0 13
1017: PUSH
1018: LD_INT 1
1020: ARRAY
1021: PUSH
1022: LD_VAR 0 2
1026: ARRAY
1027: PPUSH
1028: LD_VAR 0 13
1032: PUSH
1033: LD_INT 2
1035: ARRAY
1036: PUSH
1037: LD_VAR 0 2
1041: ARRAY
1042: PPUSH
1043: CALL_OW 351
1047: IFFALSE 1086
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 2 ) ;
1049: LD_VAR 0 13
1053: PUSH
1054: LD_INT 1
1056: ARRAY
1057: PUSH
1058: LD_VAR 0 2
1062: ARRAY
1063: PPUSH
1064: LD_VAR 0 13
1068: PUSH
1069: LD_INT 2
1071: ARRAY
1072: PUSH
1073: LD_VAR 0 2
1077: ARRAY
1078: PPUSH
1079: LD_INT 2
1081: PPUSH
1082: CALL_OW 244
1086: GO 1010
1088: POP
1089: POP
// base := [ ] ;
1090: LD_ADDR_VAR 0 4
1094: PUSH
1095: EMPTY
1096: ST_TO_ADDR
// if debug then
1097: LD_EXP 1
1101: IFFALSE 1151
// begin base := [ [ b_warehouse , 51 , 77 , 1 , nation_russian , 3 , 0 , 0 , 0 ] , ] ;
1103: LD_ADDR_VAR 0 4
1107: PUSH
1108: LD_INT 1
1110: PUSH
1111: LD_INT 51
1113: PUSH
1114: LD_INT 77
1116: PUSH
1117: LD_INT 1
1119: PUSH
1120: LD_INT 3
1122: PUSH
1123: LD_INT 3
1125: PUSH
1126: LD_INT 0
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: LIST
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: ST_TO_ADDR
// end else
1149: GO 1167
// if buildingsFromPrev then
1151: LD_EXP 30
1155: IFFALSE 1167
// base := buildingsFromPrev ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: LD_EXP 30
1166: ST_TO_ADDR
// if base then
1167: LD_VAR 0 4
1171: IFFALSE 1369
// for i := 1 to base do
1173: LD_ADDR_VAR 0 2
1177: PUSH
1178: DOUBLE
1179: LD_INT 1
1181: DEC
1182: ST_TO_ADDR
1183: LD_VAR 0 4
1187: PUSH
1188: FOR_TO
1189: IFFALSE 1367
// base := Replace ( base , i , [ base [ i ] [ 1 ] , base [ i ] [ 2 ] + 155 , base [ i ] [ 3 ] + 3 , base [ i ] [ 4 ] , base [ i ] [ 5 ] , base [ i ] [ 6 ] , base [ i ] [ 7 ] , base [ i ] [ 8 ] , base [ i ] [ 9 ] ] ) ;
1191: LD_ADDR_VAR 0 4
1195: PUSH
1196: LD_VAR 0 4
1200: PPUSH
1201: LD_VAR 0 2
1205: PPUSH
1206: LD_VAR 0 4
1210: PUSH
1211: LD_VAR 0 2
1215: ARRAY
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_VAR 0 2
1230: ARRAY
1231: PUSH
1232: LD_INT 2
1234: ARRAY
1235: PUSH
1236: LD_INT 155
1238: PLUS
1239: PUSH
1240: LD_VAR 0 4
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 3
1253: ARRAY
1254: PUSH
1255: LD_INT 3
1257: PLUS
1258: PUSH
1259: LD_VAR 0 4
1263: PUSH
1264: LD_VAR 0 2
1268: ARRAY
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PUSH
1274: LD_VAR 0 4
1278: PUSH
1279: LD_VAR 0 2
1283: ARRAY
1284: PUSH
1285: LD_INT 5
1287: ARRAY
1288: PUSH
1289: LD_VAR 0 4
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 6
1302: ARRAY
1303: PUSH
1304: LD_VAR 0 4
1308: PUSH
1309: LD_VAR 0 2
1313: ARRAY
1314: PUSH
1315: LD_INT 7
1317: ARRAY
1318: PUSH
1319: LD_VAR 0 4
1323: PUSH
1324: LD_VAR 0 2
1328: ARRAY
1329: PUSH
1330: LD_INT 8
1332: ARRAY
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: LD_VAR 0 2
1343: ARRAY
1344: PUSH
1345: LD_INT 9
1347: ARRAY
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 1
1364: ST_TO_ADDR
1365: GO 1188
1367: POP
1368: POP
// base := base ^ [ [ b_depot , 206 , 80 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_bunker , 221 , 95 , 5 , nation_arabian , 3 , 0 , 0 , ar_light_gun ] , [ b_bunker , 223 , 88 , 5 , nation_arabian , 3 , 0 , 0 , ar_double_machine_gun ] , [ b_bunker , 202 , 64 , 2 , nation_arabian , 3 , 0 , 0 , ar_gatling_gun ] , [ b_factory , 203 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_lab_full , 217 , 78 , 4 , nation_arabian , 3 , b_lab_weapon , 0 , 0 ] , [ b_solar_power , 220 , 99 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 220 , 103 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_solar_power , 216 , 102 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_gun , 203 , 94 , 0 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_stitch , 200 , 88 , 2 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_ext_track , 199 , 91 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 81 , 1 , nation_arabian , 3 , 0 , 0 , 0 ] , [ b_oil_power , 197 , 78 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ] ;
1369: LD_ADDR_VAR 0 4
1373: PUSH
1374: LD_VAR 0 4
1378: PUSH
1379: LD_INT 0
1381: PUSH
1382: LD_INT 206
1384: PUSH
1385: LD_INT 80
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 3
1396: PUSH
1397: LD_INT 0
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: LD_INT 0
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: PUSH
1417: LD_INT 32
1419: PUSH
1420: LD_INT 221
1422: PUSH
1423: LD_INT 95
1425: PUSH
1426: LD_INT 5
1428: PUSH
1429: LD_INT 2
1431: PUSH
1432: LD_INT 3
1434: PUSH
1435: LD_INT 0
1437: PUSH
1438: LD_INT 0
1440: PUSH
1441: LD_INT 23
1443: PUSH
1444: EMPTY
1445: LIST
1446: LIST
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: LIST
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 32
1457: PUSH
1458: LD_INT 223
1460: PUSH
1461: LD_INT 88
1463: PUSH
1464: LD_INT 5
1466: PUSH
1467: LD_INT 2
1469: PUSH
1470: LD_INT 3
1472: PUSH
1473: LD_INT 0
1475: PUSH
1476: LD_INT 0
1478: PUSH
1479: LD_INT 24
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: LIST
1492: PUSH
1493: LD_INT 32
1495: PUSH
1496: LD_INT 202
1498: PUSH
1499: LD_INT 64
1501: PUSH
1502: LD_INT 2
1504: PUSH
1505: LD_INT 2
1507: PUSH
1508: LD_INT 3
1510: PUSH
1511: LD_INT 0
1513: PUSH
1514: LD_INT 0
1516: PUSH
1517: LD_INT 25
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: PUSH
1531: LD_INT 3
1533: PUSH
1534: LD_INT 203
1536: PUSH
1537: LD_INT 91
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 3
1548: PUSH
1549: LD_INT 0
1551: PUSH
1552: LD_INT 0
1554: PUSH
1555: LD_INT 0
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 8
1571: PUSH
1572: LD_INT 217
1574: PUSH
1575: LD_INT 78
1577: PUSH
1578: LD_INT 4
1580: PUSH
1581: LD_INT 2
1583: PUSH
1584: LD_INT 3
1586: PUSH
1587: LD_INT 10
1589: PUSH
1590: LD_INT 0
1592: PUSH
1593: LD_INT 0
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: LIST
1602: LIST
1603: LIST
1604: LIST
1605: LIST
1606: PUSH
1607: LD_INT 27
1609: PUSH
1610: LD_INT 220
1612: PUSH
1613: LD_INT 99
1615: PUSH
1616: LD_INT 1
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: LD_INT 3
1624: PUSH
1625: LD_INT 0
1627: PUSH
1628: LD_INT 0
1630: PUSH
1631: LD_INT 0
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 220
1650: PUSH
1651: LD_INT 103
1653: PUSH
1654: LD_INT 1
1656: PUSH
1657: LD_INT 2
1659: PUSH
1660: LD_INT 3
1662: PUSH
1663: LD_INT 0
1665: PUSH
1666: LD_INT 0
1668: PUSH
1669: LD_INT 0
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: LIST
1676: LIST
1677: LIST
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 216
1688: PUSH
1689: LD_INT 102
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: LD_INT 2
1697: PUSH
1698: LD_INT 3
1700: PUSH
1701: LD_INT 0
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 0
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: LIST
1718: LIST
1719: LIST
1720: PUSH
1721: LD_INT 17
1723: PUSH
1724: LD_INT 203
1726: PUSH
1727: LD_INT 94
1729: PUSH
1730: LD_INT 0
1732: PUSH
1733: LD_INT 2
1735: PUSH
1736: LD_INT 3
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: LD_INT 0
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: LD_INT 23
1761: PUSH
1762: LD_INT 200
1764: PUSH
1765: LD_INT 88
1767: PUSH
1768: LD_INT 2
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 3
1776: PUSH
1777: LD_INT 0
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: LD_INT 0
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_INT 16
1799: PUSH
1800: LD_INT 199
1802: PUSH
1803: LD_INT 91
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: LD_INT 2
1811: PUSH
1812: LD_INT 3
1814: PUSH
1815: LD_INT 0
1817: PUSH
1818: LD_INT 0
1820: PUSH
1821: LD_INT 0
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: PUSH
1835: LD_INT 26
1837: PUSH
1838: LD_INT 197
1840: PUSH
1841: LD_INT 81
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: LD_INT 2
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: LD_INT 0
1855: PUSH
1856: LD_INT 0
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: EMPTY
1863: LIST
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: LIST
1869: LIST
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 26
1875: PUSH
1876: LD_INT 197
1878: PUSH
1879: LD_INT 78
1881: PUSH
1882: LD_INT 3
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 3
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: LD_INT 0
1896: PUSH
1897: LD_INT 0
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: LIST
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: LIST
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: ADD
1927: ST_TO_ADDR
// if hasRadar then
1928: LD_VAR 0 5
1932: IFFALSE 1996
// base := Replace ( base , base + 1 , [ b_ext_radar , 203 , 87 , 3 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
1934: LD_ADDR_VAR 0 4
1938: PUSH
1939: LD_VAR 0 4
1943: PPUSH
1944: LD_VAR 0 4
1948: PUSH
1949: LD_INT 1
1951: PLUS
1952: PPUSH
1953: LD_INT 20
1955: PUSH
1956: LD_INT 203
1958: PUSH
1959: LD_INT 87
1961: PUSH
1962: LD_INT 3
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 3
1970: PUSH
1971: LD_INT 0
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: LD_INT 0
1979: PUSH
1980: EMPTY
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 1
1995: ST_TO_ADDR
// if hasRemote then
1996: LD_VAR 0 6
2000: IFFALSE 2064
// base := Replace ( base , base + 1 , [ b_ext_radio , 207 , 95 , 5 , nation_arabian , 3 , 0 , 0 , 0 ] ) ;
2002: LD_ADDR_VAR 0 4
2006: PUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_VAR 0 4
2016: PUSH
2017: LD_INT 1
2019: PLUS
2020: PPUSH
2021: LD_INT 22
2023: PUSH
2024: LD_INT 207
2026: PUSH
2027: LD_INT 95
2029: PUSH
2030: LD_INT 5
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: LD_INT 0
2041: PUSH
2042: LD_INT 0
2044: PUSH
2045: LD_INT 0
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 1
2063: ST_TO_ADDR
// for i in base do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_VAR 0 4
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2429
// begin if HexInfo ( i [ 2 ] , i [ 3 ] ) then
2077: LD_VAR 0 2
2081: PUSH
2082: LD_INT 2
2084: ARRAY
2085: PPUSH
2086: LD_VAR 0 2
2090: PUSH
2091: LD_INT 3
2093: ARRAY
2094: PPUSH
2095: CALL_OW 428
2099: IFFALSE 2103
// continue ;
2101: GO 2074
// uc_nation := i [ 5 ] ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: ARRAY
2116: ST_TO_ADDR
// InitBc ;
2117: CALL_OW 21
// bc_type := i [ 1 ] ;
2121: LD_ADDR_OWVAR 42
2125: PUSH
2126: LD_VAR 0 2
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: ST_TO_ADDR
// bc_level := i [ 6 ] ;
2135: LD_ADDR_OWVAR 43
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 6
2147: ARRAY
2148: ST_TO_ADDR
// bc_kind1 := b_lab_basic ;
2149: LD_ADDR_OWVAR 44
2153: PUSH
2154: LD_INT 9
2156: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
2157: LD_ADDR_OWVAR 45
2161: PUSH
2162: LD_INT 9
2164: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 5 ] = nation_arabian and not i [ 8 ] then
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_INT 8
2176: EQUAL
2177: PUSH
2178: LD_VAR 0 2
2182: PUSH
2183: LD_INT 5
2185: ARRAY
2186: PUSH
2187: LD_INT 2
2189: EQUAL
2190: AND
2191: PUSH
2192: LD_VAR 0 2
2196: PUSH
2197: LD_INT 8
2199: ARRAY
2200: NOT
2201: AND
2202: IFFALSE 2236
// begin bc_kind1 := b_lab_weapon ;
2204: LD_ADDR_OWVAR 44
2208: PUSH
2209: LD_INT 10
2211: ST_TO_ADDR
// if hasRadar then
2212: LD_VAR 0 5
2216: IFFALSE 2228
// bc_kind2 := b_lab_opto else
2218: LD_ADDR_OWVAR 45
2222: PUSH
2223: LD_INT 15
2225: ST_TO_ADDR
2226: GO 2236
// bc_kind2 := b_lab_basic ;
2228: LD_ADDR_OWVAR 45
2232: PUSH
2233: LD_INT 9
2235: ST_TO_ADDR
// end ; if i [ 1 ] in [ b_lab_half , b_lab_full ] and i [ 7 ] then
2236: LD_VAR 0 2
2240: PUSH
2241: LD_INT 1
2243: ARRAY
2244: PUSH
2245: LD_INT 7
2247: PUSH
2248: LD_INT 8
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: IN
2255: PUSH
2256: LD_VAR 0 2
2260: PUSH
2261: LD_INT 7
2263: ARRAY
2264: AND
2265: IFFALSE 2281
// bc_kind1 := i [ 7 ] ;
2267: LD_ADDR_OWVAR 44
2271: PUSH
2272: LD_VAR 0 2
2276: PUSH
2277: LD_INT 7
2279: ARRAY
2280: ST_TO_ADDR
// if i [ 1 ] = b_lab_full and i [ 8 ] then
2281: LD_VAR 0 2
2285: PUSH
2286: LD_INT 1
2288: ARRAY
2289: PUSH
2290: LD_INT 8
2292: EQUAL
2293: PUSH
2294: LD_VAR 0 2
2298: PUSH
2299: LD_INT 8
2301: ARRAY
2302: AND
2303: IFFALSE 2319
// bc_kind1 := i [ 8 ] ;
2305: LD_ADDR_OWVAR 44
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_INT 8
2317: ARRAY
2318: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2319: LD_ADDR_VAR 0 3
2323: PUSH
2324: LD_VAR 0 2
2328: PUSH
2329: LD_INT 2
2331: ARRAY
2332: PPUSH
2333: LD_VAR 0 2
2337: PUSH
2338: LD_INT 3
2340: ARRAY
2341: PPUSH
2342: LD_VAR 0 2
2346: PUSH
2347: LD_INT 4
2349: ARRAY
2350: PPUSH
2351: CALL_OW 47
2355: ST_TO_ADDR
// if i [ 9 ] then
2356: LD_VAR 0 2
2360: PUSH
2361: LD_INT 9
2363: ARRAY
2364: IFFALSE 2384
// PlaceWeaponTurret ( b , i [ 9 ] ) ;
2366: LD_VAR 0 3
2370: PPUSH
2371: LD_VAR 0 2
2375: PUSH
2376: LD_INT 9
2378: ARRAY
2379: PPUSH
2380: CALL_OW 431
// if i [ 1 ] = b_bunker then
2384: LD_VAR 0 2
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PUSH
2393: LD_INT 32
2395: EQUAL
2396: IFFALSE 2427
// bunkers := Replace ( bunkers , bunkers + 1 , b ) ;
2398: LD_ADDR_VAR 0 11
2402: PUSH
2403: LD_VAR 0 11
2407: PPUSH
2408: LD_VAR 0 11
2412: PUSH
2413: LD_INT 1
2415: PLUS
2416: PPUSH
2417: LD_VAR 0 3
2421: PPUSH
2422: CALL_OW 1
2426: ST_TO_ADDR
// end ;
2427: GO 2074
2429: POP
2430: POP
// depot := HexInfo ( 206 , 80 ) ;
2431: LD_ADDR_VAR 0 9
2435: PUSH
2436: LD_INT 206
2438: PPUSH
2439: LD_INT 80
2441: PPUSH
2442: CALL_OW 428
2446: ST_TO_ADDR
// factory := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) ;
2447: LD_ADDR_VAR 0 8
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 2
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: LD_INT 30
2464: PUSH
2465: LD_INT 3
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: PUSH
2472: EMPTY
2473: LIST
2474: LIST
2475: PPUSH
2476: CALL_OW 69
2480: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
2481: LD_ADDR_VAR 0 10
2485: PUSH
2486: LD_INT 22
2488: PUSH
2489: LD_INT 2
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: PUSH
2496: LD_INT 2
2498: PUSH
2499: LD_INT 30
2501: PUSH
2502: LD_INT 6
2504: PUSH
2505: EMPTY
2506: LIST
2507: LIST
2508: PUSH
2509: LD_INT 30
2511: PUSH
2512: LD_INT 7
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: PUSH
2519: LD_INT 30
2521: PUSH
2522: LD_INT 8
2524: PUSH
2525: EMPTY
2526: LIST
2527: LIST
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: LIST
2534: PUSH
2535: EMPTY
2536: LIST
2537: LIST
2538: PPUSH
2539: CALL_OW 69
2543: ST_TO_ADDR
// arDepot := depot ;
2544: LD_ADDR_EXP 48
2548: PUSH
2549: LD_VAR 0 9
2553: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , [ 360 , 260 , 190 , 150 ] [ Difficulty ] ) ;
2554: LD_VAR 0 9
2558: PPUSH
2559: CALL_OW 274
2563: PPUSH
2564: LD_INT 1
2566: PPUSH
2567: LD_INT 360
2569: PUSH
2570: LD_INT 260
2572: PUSH
2573: LD_INT 190
2575: PUSH
2576: LD_INT 150
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: LIST
2583: LIST
2584: PUSH
2585: LD_OWVAR 67
2589: ARRAY
2590: PPUSH
2591: CALL_OW 277
// SetResourceType ( GetBase ( depot ) , mat_oil , [ 200 , 170 , 150 , 120 ] [ Difficulty ] ) ;
2595: LD_VAR 0 9
2599: PPUSH
2600: CALL_OW 274
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 200
2610: PUSH
2611: LD_INT 170
2613: PUSH
2614: LD_INT 150
2616: PUSH
2617: LD_INT 120
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PPUSH
2632: CALL_OW 277
// uc_nation := 2 ;
2636: LD_ADDR_OWVAR 21
2640: PUSH
2641: LD_INT 2
2643: ST_TO_ADDR
// uc_side := 2 ;
2644: LD_ADDR_OWVAR 20
2648: PUSH
2649: LD_INT 2
2651: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 33 ) ;
2652: LD_INT 13
2654: PPUSH
2655: LD_INT 1
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 27
2663: PPUSH
2664: LD_INT 33
2666: PPUSH
2667: CALL 34304 0 5
// PlaceUnitXYD ( CreateVehicle , 190 , 64 , 5 , false ) ;
2671: CALL_OW 45
2675: PPUSH
2676: LD_INT 190
2678: PPUSH
2679: LD_INT 64
2681: PPUSH
2682: LD_INT 5
2684: PPUSH
2685: LD_INT 0
2687: PPUSH
2688: CALL 69315 0 5
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 22 ) ;
2692: LD_INT 13
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 1
2700: PPUSH
2701: LD_INT 25
2703: PPUSH
2704: LD_INT 22
2706: PPUSH
2707: CALL 34304 0 5
// PlaceUnitXYD ( CreateVehicle , 188 , 67 , 5 , false ) ;
2711: CALL_OW 45
2715: PPUSH
2716: LD_INT 188
2718: PPUSH
2719: LD_INT 67
2721: PPUSH
2722: LD_INT 5
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL 69315 0 5
// PlaceUnitXY ( Heike , 213 , 87 , false ) ;
2732: LD_EXP 34
2736: PPUSH
2737: LD_INT 213
2739: PPUSH
2740: LD_INT 87
2742: PPUSH
2743: LD_INT 0
2745: PPUSH
2746: CALL_OW 48
// ComTurnXY ( Heike , 214 , 87 ) ;
2750: LD_EXP 34
2754: PPUSH
2755: LD_INT 214
2757: PPUSH
2758: LD_INT 87
2760: PPUSH
2761: CALL_OW 118
// if Kaia then
2765: LD_EXP 39
2769: IFFALSE 2804
// begin PlaceUnitXY ( Kaia , 213 , 85 , false ) ;
2771: LD_EXP 39
2775: PPUSH
2776: LD_INT 213
2778: PPUSH
2779: LD_INT 85
2781: PPUSH
2782: LD_INT 0
2784: PPUSH
2785: CALL_OW 48
// ComTurnXY ( Kaia , 215 , 87 ) ;
2789: LD_EXP 39
2793: PPUSH
2794: LD_INT 215
2796: PPUSH
2797: LD_INT 87
2799: PPUSH
2800: CALL_OW 118
// end ; if Olaf and Kaia then
2804: LD_EXP 43
2808: PUSH
2809: LD_EXP 39
2813: AND
2814: IFFALSE 2851
// begin PlaceUnitXY ( Olaf , 215 , 87 , false ) ;
2816: LD_EXP 43
2820: PPUSH
2821: LD_INT 215
2823: PPUSH
2824: LD_INT 87
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: CALL_OW 48
// ComTurnXY ( Olaf , 213 , 85 ) ;
2834: LD_EXP 43
2838: PPUSH
2839: LD_INT 213
2841: PPUSH
2842: LD_INT 85
2844: PPUSH
2845: CALL_OW 118
// end else
2849: GO 2871
// if Olaf then
2851: LD_EXP 43
2855: IFFALSE 2871
// PlaceHumanInUnit ( Olaf , factory ) ;
2857: LD_EXP 43
2861: PPUSH
2862: LD_VAR 0 8
2866: PPUSH
2867: CALL_OW 52
// if Givi then
2871: LD_EXP 35
2875: IFFALSE 2956
// begin if Kaia and Olaf then
2877: LD_EXP 39
2881: PUSH
2882: LD_EXP 43
2886: AND
2887: IFFALSE 2924
// begin PlaceUnitXY ( Givi , 247 , 117 , false ) ;
2889: LD_EXP 35
2893: PPUSH
2894: LD_INT 247
2896: PPUSH
2897: LD_INT 117
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 48
// ComTurnXY ( Givi , 248 , 118 ) ;
2907: LD_EXP 35
2911: PPUSH
2912: LD_INT 248
2914: PPUSH
2915: LD_INT 118
2917: PPUSH
2918: CALL_OW 118
// end else
2922: GO 2956
// begin PlaceUnitXY ( Givi , 216 , 88 , false ) ;
2924: LD_EXP 35
2928: PPUSH
2929: LD_INT 216
2931: PPUSH
2932: LD_INT 88
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 48
// ComTurnUnit ( Givi , Heike ) ;
2942: LD_EXP 35
2946: PPUSH
2947: LD_EXP 34
2951: PPUSH
2952: CALL_OW 119
// end ; end ; if Kurt then
2956: LD_EXP 45
2960: IFFALSE 2980
// PlaceHumanInUnit ( Kurt , bunkers [ 2 ] ) ;
2962: LD_EXP 45
2966: PPUSH
2967: LD_VAR 0 11
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PPUSH
2976: CALL_OW 52
// if Mike then
2980: LD_EXP 36
2984: IFFALSE 3004
// PlaceHumanInUnit ( Mike , bunkers [ 3 ] ) ;
2986: LD_EXP 36
2990: PPUSH
2991: LD_VAR 0 11
2995: PUSH
2996: LD_INT 3
2998: ARRAY
2999: PPUSH
3000: CALL_OW 52
// if Kamil then
3004: LD_EXP 38
3008: IFFALSE 3070
// begin if Kaia and Olaf then
3010: LD_EXP 39
3014: PUSH
3015: LD_EXP 43
3019: AND
3020: IFFALSE 3038
// PlaceHumanInUnit ( Kamil , depot ) else
3022: LD_EXP 38
3026: PPUSH
3027: LD_VAR 0 9
3031: PPUSH
3032: CALL_OW 52
3036: GO 3070
// begin PlaceUnitXY ( Kamil , 213 , 87 , false ) ;
3038: LD_EXP 38
3042: PPUSH
3043: LD_INT 213
3045: PPUSH
3046: LD_INT 87
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 48
// ComTurnUnit ( Kamil , Heike ) ;
3056: LD_EXP 38
3060: PPUSH
3061: LD_EXP 34
3065: PPUSH
3066: CALL_OW 119
// end ; end ; if Sophia then
3070: LD_EXP 40
3074: IFFALSE 3090
// PlaceHumanInUnit ( Sophia , depot ) ;
3076: LD_EXP 40
3080: PPUSH
3081: LD_VAR 0 9
3085: PPUSH
3086: CALL_OW 52
// if Aviradze then
3090: LD_EXP 46
3094: IFFALSE 3143
// if lab then
3096: LD_VAR 0 10
3100: IFFALSE 3122
// PlaceHumanInUnit ( Aviradze , lab [ 1 ] ) else
3102: LD_EXP 46
3106: PPUSH
3107: LD_VAR 0 10
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: CALL_OW 52
3120: GO 3143
// PlaceUnitXYR ( Aviradze , 210 , 87 , 3 , false ) ;
3122: LD_EXP 46
3126: PPUSH
3127: LD_INT 210
3129: PPUSH
3130: LD_INT 87
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL_OW 50
// if Ibrahim then
3143: LD_EXP 37
3147: IFFALSE 3196
// if lab then
3149: LD_VAR 0 10
3153: IFFALSE 3175
// PlaceHumanInUnit ( Ibrahim , lab [ 1 ] ) else
3155: LD_EXP 37
3159: PPUSH
3160: LD_VAR 0 10
3164: PUSH
3165: LD_INT 1
3167: ARRAY
3168: PPUSH
3169: CALL_OW 52
3173: GO 3196
// PlaceUnitXYR ( Ibrahim , 210 , 87 , 3 , false ) ;
3175: LD_EXP 37
3179: PPUSH
3180: LD_INT 210
3182: PPUSH
3183: LD_INT 87
3185: PPUSH
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 50
// if Markov then
3196: LD_EXP 41
3200: IFFALSE 3249
// if factory then
3202: LD_VAR 0 8
3206: IFFALSE 3228
// PlaceHumanInUnit ( Markov , factory [ 1 ] ) else
3208: LD_EXP 41
3212: PPUSH
3213: LD_VAR 0 8
3217: PUSH
3218: LD_INT 1
3220: ARRAY
3221: PPUSH
3222: CALL_OW 52
3226: GO 3249
// PlaceUnitXYR ( Markov , 210 , 87 , 3 , false ) ;
3228: LD_EXP 41
3232: PPUSH
3233: LD_INT 210
3235: PPUSH
3236: LD_INT 87
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 0
3244: PPUSH
3245: CALL_OW 50
// if heikeSecondSquad then
3249: LD_EXP 49
3253: IFFALSE 3293
// for i in heikeSecondSquad do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: LD_EXP 49
3264: PUSH
3265: FOR_IN
3266: IFFALSE 3291
// PlaceUnitXYR ( i , 190 , 65 , 5 , false ) ;
3268: LD_VAR 0 2
3272: PPUSH
3273: LD_INT 190
3275: PPUSH
3276: LD_INT 65
3278: PPUSH
3279: LD_INT 5
3281: PPUSH
3282: LD_INT 0
3284: PPUSH
3285: CALL_OW 50
3289: GO 3265
3291: POP
3292: POP
// if heikeApes then
3293: LD_EXP 50
3297: IFFALSE 3337
// for i in heikeApes do
3299: LD_ADDR_VAR 0 2
3303: PUSH
3304: LD_EXP 50
3308: PUSH
3309: FOR_IN
3310: IFFALSE 3335
// PlaceUnitXYR ( i , 190 , 70 , 5 , false ) ;
3312: LD_VAR 0 2
3316: PPUSH
3317: LD_INT 190
3319: PPUSH
3320: LD_INT 70
3322: PPUSH
3323: LD_INT 5
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 50
3333: GO 3309
3335: POP
3336: POP
// tmp := LoadVariable ( 05_Vehicles , [ ] ) ;
3337: LD_ADDR_VAR 0 13
3341: PUSH
3342: LD_STRING 05_Vehicles
3344: PPUSH
3345: EMPTY
3346: PPUSH
3347: CALL_OW 30
3351: ST_TO_ADDR
// if tmp then
3352: LD_VAR 0 13
3356: IFFALSE 3526
// begin limiter := 10 ;
3358: LD_ADDR_VAR 0 14
3362: PUSH
3363: LD_INT 10
3365: ST_TO_ADDR
// for i in tmp do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: LD_VAR 0 13
3375: PUSH
3376: FOR_IN
3377: IFFALSE 3524
// begin limiter := Dec ( limiter ) ;
3379: LD_ADDR_VAR 0 14
3383: PUSH
3384: LD_VAR 0 14
3388: PPUSH
3389: CALL 68558 0 1
3393: ST_TO_ADDR
// if limiter = 0 then
3394: LD_VAR 0 14
3398: PUSH
3399: LD_INT 0
3401: EQUAL
3402: IFFALSE 3406
// break ;
3404: GO 3524
// uc_side := 2 ;
3406: LD_ADDR_OWVAR 20
3410: PUSH
3411: LD_INT 2
3413: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
3414: LD_ADDR_OWVAR 21
3418: PUSH
3419: LD_VAR 0 2
3423: PUSH
3424: LD_INT 5
3426: ARRAY
3427: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 20 ) ;
3428: LD_VAR 0 2
3432: PUSH
3433: LD_INT 1
3435: ARRAY
3436: PPUSH
3437: LD_VAR 0 2
3441: PUSH
3442: LD_INT 2
3444: ARRAY
3445: PPUSH
3446: LD_VAR 0 2
3450: PUSH
3451: LD_INT 3
3453: ARRAY
3454: PPUSH
3455: LD_VAR 0 2
3459: PUSH
3460: LD_INT 4
3462: ARRAY
3463: PPUSH
3464: LD_INT 20
3466: PPUSH
3467: CALL 34304 0 5
// veh := CreateVehicle ;
3471: LD_ADDR_VAR 0 12
3475: PUSH
3476: CALL_OW 45
3480: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
3481: LD_VAR 0 12
3485: PPUSH
3486: LD_INT 0
3488: PPUSH
3489: LD_INT 5
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: CALL_OW 233
// PlaceUnitXYR ( veh , 252 , 111 , 8 , false ) ;
3501: LD_VAR 0 12
3505: PPUSH
3506: LD_INT 252
3508: PPUSH
3509: LD_INT 111
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 50
// end ;
3522: GO 3376
3524: POP
3525: POP
// end ; end ;
3526: LD_VAR 0 1
3530: RET
// export function PrepareRolfSquad ; var i , j ; begin
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
3535: PPUSH
// uc_side := 8 ;
3536: LD_ADDR_OWVAR 20
3540: PUSH
3541: LD_INT 8
3543: ST_TO_ADDR
// uc_nation := 2 ;
3544: LD_ADDR_OWVAR 21
3548: PUSH
3549: LD_INT 2
3551: ST_TO_ADDR
// Rolf := NewCharacter ( Bergkamp ) ;
3552: LD_ADDR_EXP 47
3556: PUSH
3557: LD_STRING Bergkamp
3559: PPUSH
3560: CALL_OW 25
3564: ST_TO_ADDR
// rolfSquad := [ Rolf ] ;
3565: LD_ADDR_EXP 51
3569: PUSH
3570: LD_EXP 47
3574: PUSH
3575: EMPTY
3576: LIST
3577: ST_TO_ADDR
// for i := 1 to 4 do
3578: LD_ADDR_VAR 0 2
3582: PUSH
3583: DOUBLE
3584: LD_INT 1
3586: DEC
3587: ST_TO_ADDR
3588: LD_INT 4
3590: PUSH
3591: FOR_TO
3592: IFFALSE 3672
// begin for j := 1 to [ 5 , 2 , 3 , 1 ] [ i ] do
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 5
3606: PUSH
3607: LD_INT 2
3609: PUSH
3610: LD_INT 3
3612: PUSH
3613: LD_INT 1
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: ARRAY
3627: PUSH
3628: FOR_TO
3629: IFFALSE 3668
// begin PrepareHuman ( false , i , 5 ) ;
3631: LD_INT 0
3633: PPUSH
3634: LD_VAR 0 2
3638: PPUSH
3639: LD_INT 5
3641: PPUSH
3642: CALL_OW 380
// rolfSquad := Join ( rolfSquad , CreateHuman ) ;
3646: LD_ADDR_EXP 51
3650: PUSH
3651: LD_EXP 51
3655: PPUSH
3656: CALL_OW 44
3660: PPUSH
3661: CALL 67175 0 2
3665: ST_TO_ADDR
// end ;
3666: GO 3628
3668: POP
3669: POP
// end ;
3670: GO 3591
3672: POP
3673: POP
// if HexInfo ( 5 , 3 ) then
3674: LD_INT 5
3676: PPUSH
3677: LD_INT 3
3679: PPUSH
3680: CALL_OW 428
3684: IFFALSE 3701
// RemoveUnit ( HexInfo ( 5 , 3 ) ) ;
3686: LD_INT 5
3688: PPUSH
3689: LD_INT 3
3691: PPUSH
3692: CALL_OW 428
3696: PPUSH
3697: CALL_OW 64
// for i in rolfSquad do
3701: LD_ADDR_VAR 0 2
3705: PUSH
3706: LD_EXP 51
3710: PUSH
3711: FOR_IN
3712: IFFALSE 3848
// begin uc_direction := 2 ;
3714: LD_ADDR_OWVAR 24
3718: PUSH
3719: LD_INT 2
3721: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic then
3722: LD_VAR 0 2
3726: PPUSH
3727: CALL_OW 257
3731: PUSH
3732: LD_INT 3
3734: EQUAL
3735: IFFALSE 3809
// begin uc_side := 8 ;
3737: LD_ADDR_OWVAR 20
3741: PUSH
3742: LD_INT 8
3744: ST_TO_ADDR
// uc_nation := 2 ;
3745: LD_ADDR_OWVAR 21
3749: PUSH
3750: LD_INT 2
3752: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
3753: LD_INT 13
3755: PPUSH
3756: LD_INT 1
3758: PPUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 27
3764: PPUSH
3765: LD_INT 88
3767: PPUSH
3768: CALL 34304 0 5
// PlaceUnitArea ( CreateVehicle , northSpawn , false ) ;
3772: CALL_OW 45
3776: PPUSH
3777: LD_INT 11
3779: PPUSH
3780: LD_INT 0
3782: PPUSH
3783: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 5 , 3 ) ) ;
3787: LD_VAR 0 2
3791: PPUSH
3792: LD_INT 5
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 428
3802: PPUSH
3803: CALL_OW 52
// end else
3807: GO 3824
// PlaceUnitArea ( i , northSpawn , false ) ;
3809: LD_VAR 0 2
3813: PPUSH
3814: LD_INT 11
3816: PPUSH
3817: LD_INT 0
3819: PPUSH
3820: CALL_OW 49
// ComMoveXY ( i , 29 , 10 ) ;
3824: LD_VAR 0 2
3828: PPUSH
3829: LD_INT 29
3831: PPUSH
3832: LD_INT 10
3834: PPUSH
3835: CALL_OW 111
// wait ( 0 0$2 ) ;
3839: LD_INT 70
3841: PPUSH
3842: CALL_OW 67
// end ;
3846: GO 3711
3848: POP
3849: POP
// wait ( 0 0$5 ) ;
3850: LD_INT 175
3852: PPUSH
3853: CALL_OW 67
// end ;
3857: LD_VAR 0 1
3861: RET
// export function PrepareRolfBase ; var i , tmp ; begin
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
3866: PPUSH
// ComEnterUnit ( Rolf , HexInfo ( 94 , 63 ) ) ;
3867: LD_EXP 47
3871: PPUSH
3872: LD_INT 94
3874: PPUSH
3875: LD_INT 63
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 120
// tmp := [ [ b_armoury , 82 , 64 , 1 ] , [ b_breastwork , 73 , 58 , 0 ] ] ;
3887: LD_ADDR_VAR 0 3
3891: PUSH
3892: LD_INT 4
3894: PUSH
3895: LD_INT 82
3897: PUSH
3898: LD_INT 64
3900: PUSH
3901: LD_INT 1
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: LD_INT 73
3915: PUSH
3916: LD_INT 58
3918: PUSH
3919: LD_INT 0
3921: PUSH
3922: EMPTY
3923: LIST
3924: LIST
3925: LIST
3926: LIST
3927: PUSH
3928: EMPTY
3929: LIST
3930: LIST
3931: ST_TO_ADDR
// for i in tmp do
3932: LD_ADDR_VAR 0 2
3936: PUSH
3937: LD_VAR 0 3
3941: PUSH
3942: FOR_IN
3943: IFFALSE 4007
// AddComBuild ( UnitFilter ( rolfSquad , [ f_class , 2 ] ) , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
3945: LD_EXP 51
3949: PPUSH
3950: LD_INT 25
3952: PUSH
3953: LD_INT 2
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 72
3964: PPUSH
3965: LD_VAR 0 2
3969: PUSH
3970: LD_INT 1
3972: ARRAY
3973: PPUSH
3974: LD_VAR 0 2
3978: PUSH
3979: LD_INT 2
3981: ARRAY
3982: PPUSH
3983: LD_VAR 0 2
3987: PUSH
3988: LD_INT 3
3990: ARRAY
3991: PPUSH
3992: LD_VAR 0 2
3996: PUSH
3997: LD_INT 4
3999: ARRAY
4000: PPUSH
4001: CALL_OW 205
4005: GO 3942
4007: POP
4008: POP
// ComEnterUnit ( rolfSquad [ 2 ] , HexInfo ( 63 , 42 ) ) ;
4009: LD_EXP 51
4013: PUSH
4014: LD_INT 2
4016: ARRAY
4017: PPUSH
4018: LD_INT 63
4020: PPUSH
4021: LD_INT 42
4023: PPUSH
4024: CALL_OW 428
4028: PPUSH
4029: CALL_OW 120
// ComEnterUnit ( rolfSquad [ 3 ] , HexInfo ( 94 , 63 ) ) ;
4033: LD_EXP 51
4037: PUSH
4038: LD_INT 3
4040: ARRAY
4041: PPUSH
4042: LD_INT 94
4044: PPUSH
4045: LD_INT 63
4047: PPUSH
4048: CALL_OW 428
4052: PPUSH
4053: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
4057: LD_INT 35
4059: PPUSH
4060: CALL_OW 67
// until UnitFilter ( rolfSquad , [ [ f_class , 2 ] , [ f_not , [ f_hastask ] ] ] ) ;
4064: LD_EXP 51
4068: PPUSH
4069: LD_INT 25
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 3
4081: PUSH
4082: LD_INT 60
4084: PUSH
4085: EMPTY
4086: LIST
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 72
4100: IFFALSE 4057
// rolfScriptBase := true ;
4102: LD_ADDR_EXP 9
4106: PUSH
4107: LD_INT 1
4109: ST_TO_ADDR
// end ;
4110: LD_VAR 0 1
4114: RET
// every 0 0$1 trigger rolfScriptBase and GetSide ( Rolf ) = 8 do var i , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
4115: LD_EXP 9
4119: PUSH
4120: LD_EXP 47
4124: PPUSH
4125: CALL_OW 255
4129: PUSH
4130: LD_INT 8
4132: EQUAL
4133: AND
4134: IFFALSE 5141
4136: GO 4138
4138: DISABLE
4139: LD_INT 0
4141: PPUSH
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
4146: PPUSH
4147: PPUSH
4148: PPUSH
4149: PPUSH
4150: PPUSH
// begin enable ;
4151: ENABLE
// if not rolfSquad then
4152: LD_EXP 51
4156: NOT
4157: IFFALSE 4161
// exit ;
4159: GO 5141
// enemyInBase := FilterUnitsInArea ( ruRolfBase , [ f_enemy , 8 ] ) ;
4161: LD_ADDR_VAR 0 9
4165: PUSH
4166: LD_INT 12
4168: PPUSH
4169: LD_INT 81
4171: PUSH
4172: LD_INT 8
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 70
4183: ST_TO_ADDR
// sol := UnitFilter ( rolfSquad , [ f_class , 1 ] ) ;
4184: LD_ADDR_VAR 0 5
4188: PUSH
4189: LD_EXP 51
4193: PPUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 1
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PPUSH
4204: CALL_OW 72
4208: ST_TO_ADDR
// eng := UnitFilter ( rolfSquad , [ f_class , 2 ] ) ;
4209: LD_ADDR_VAR 0 6
4213: PUSH
4214: LD_EXP 51
4218: PPUSH
4219: LD_INT 25
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 72
4233: ST_TO_ADDR
// mech := UnitFilter ( rolfSquad , [ f_class , 3 ] ) ;
4234: LD_ADDR_VAR 0 8
4238: PUSH
4239: LD_EXP 51
4243: PPUSH
4244: LD_INT 25
4246: PUSH
4247: LD_INT 3
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 72
4258: ST_TO_ADDR
// sci := UnitFilter ( rolfSquad , [ f_class , 4 ] ) ;
4259: LD_ADDR_VAR 0 7
4263: PUSH
4264: LD_EXP 51
4268: PPUSH
4269: LD_INT 25
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 72
4283: ST_TO_ADDR
// if sol then
4284: LD_VAR 0 5
4288: IFFALSE 4586
// for i in sol union Rolf do
4290: LD_ADDR_VAR 0 1
4294: PUSH
4295: LD_VAR 0 5
4299: PUSH
4300: LD_EXP 47
4304: UNION
4305: PUSH
4306: FOR_IN
4307: IFFALSE 4584
// if not IsInUnit ( i ) and not HasTask ( i ) then
4309: LD_VAR 0 1
4313: PPUSH
4314: CALL_OW 310
4318: NOT
4319: PUSH
4320: LD_VAR 0 1
4324: PPUSH
4325: CALL_OW 314
4329: NOT
4330: AND
4331: IFFALSE 4582
// begin if GetLives ( i ) < 500 and GetDistUnitXY ( i , 80 , 49 ) > 6 then
4333: LD_VAR 0 1
4337: PPUSH
4338: CALL_OW 256
4342: PUSH
4343: LD_INT 500
4345: LESS
4346: PUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_INT 80
4354: PPUSH
4355: LD_INT 49
4357: PPUSH
4358: CALL_OW 297
4362: PUSH
4363: LD_INT 6
4365: GREATER
4366: AND
4367: IFFALSE 4386
// begin ComMoveXY ( i , 80 , 49 ) ;
4369: LD_VAR 0 1
4373: PPUSH
4374: LD_INT 80
4376: PPUSH
4377: LD_INT 49
4379: PPUSH
4380: CALL_OW 111
// continue ;
4384: GO 4306
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
4386: LD_ADDR_VAR 0 4
4390: PUSH
4391: LD_INT 22
4393: PUSH
4394: LD_INT 8
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: PUSH
4401: LD_INT 50
4403: PUSH
4404: EMPTY
4405: LIST
4406: PUSH
4407: LD_INT 2
4409: PUSH
4410: LD_INT 30
4412: PUSH
4413: LD_INT 4
4415: PUSH
4416: EMPTY
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 30
4422: PUSH
4423: LD_INT 5
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: PUSH
4430: LD_INT 30
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 30
4442: PUSH
4443: LD_INT 31
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: EMPTY
4458: LIST
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: ST_TO_ADDR
// if tmp then
4467: LD_VAR 0 4
4471: IFFALSE 4582
// begin for b in tmp do
4473: LD_ADDR_VAR 0 2
4477: PUSH
4478: LD_VAR 0 4
4482: PUSH
4483: FOR_IN
4484: IFFALSE 4580
// begin case GetBType ( b ) of b_armoury , b_barracks :
4486: LD_VAR 0 2
4490: PPUSH
4491: CALL_OW 266
4495: PUSH
4496: LD_INT 4
4498: DOUBLE
4499: EQUAL
4500: IFTRUE 4510
4502: LD_INT 5
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4521
4510: POP
// p := 6 ; b_breastwork , b_bunker :
4511: LD_ADDR_VAR 0 3
4515: PUSH
4516: LD_INT 6
4518: ST_TO_ADDR
4519: GO 4547
4521: LD_INT 31
4523: DOUBLE
4524: EQUAL
4525: IFTRUE 4535
4527: LD_INT 32
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4546
4535: POP
// p := 1 ; end ;
4536: LD_ADDR_VAR 0 3
4540: PUSH
4541: LD_INT 1
4543: ST_TO_ADDR
4544: GO 4547
4546: POP
// if UnitsInside ( b ) < p then
4547: LD_VAR 0 2
4551: PPUSH
4552: CALL_OW 313
4556: PUSH
4557: LD_VAR 0 3
4561: LESS
4562: IFFALSE 4578
// ComEnterUnit ( i , b ) ;
4564: LD_VAR 0 1
4568: PPUSH
4569: LD_VAR 0 2
4573: PPUSH
4574: CALL_OW 120
// end ;
4578: GO 4483
4580: POP
4581: POP
// end ; end ;
4582: GO 4306
4584: POP
4585: POP
// if sci then
4586: LD_VAR 0 7
4590: IFFALSE 4645
// for i in sci do
4592: LD_ADDR_VAR 0 1
4596: PUSH
4597: LD_VAR 0 7
4601: PUSH
4602: FOR_IN
4603: IFFALSE 4643
// begin if GetDistUnitXY ( i , 80 , 49 ) > 9 then
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_INT 80
4612: PPUSH
4613: LD_INT 49
4615: PPUSH
4616: CALL_OW 297
4620: PUSH
4621: LD_INT 9
4623: GREATER
4624: IFFALSE 4641
// ComMoveXY ( i , 80 , 49 ) ;
4626: LD_VAR 0 1
4630: PPUSH
4631: LD_INT 80
4633: PPUSH
4634: LD_INT 49
4636: PPUSH
4637: CALL_OW 111
// end ;
4641: GO 4602
4643: POP
4644: POP
// if mech then
4645: LD_VAR 0 8
4649: IFFALSE 4863
// for i in mech do
4651: LD_ADDR_VAR 0 1
4655: PUSH
4656: LD_VAR 0 8
4660: PUSH
4661: FOR_IN
4662: IFFALSE 4861
// begin hasVehicle := IsInUnit ( i ) ;
4664: LD_ADDR_VAR 0 10
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: CALL_OW 310
4678: ST_TO_ADDR
// if enemyInBase then
4679: LD_VAR 0 9
4683: IFFALSE 4779
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
4685: LD_VAR 0 10
4689: PUSH
4690: LD_VAR 0 10
4694: PPUSH
4695: CALL_OW 256
4699: PUSH
4700: LD_INT 500
4702: GREATER
4703: AND
4704: IFFALSE 4732
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
4706: LD_VAR 0 10
4710: PPUSH
4711: LD_VAR 0 9
4715: PPUSH
4716: LD_VAR 0 10
4720: PPUSH
4721: CALL_OW 74
4725: PPUSH
4726: CALL_OW 115
4730: GO 4777
// if GetDistUnitXY ( hasVehicle , 86 , 49 ) > 8 then
4732: LD_VAR 0 10
4736: PPUSH
4737: LD_INT 86
4739: PPUSH
4740: LD_INT 49
4742: PPUSH
4743: CALL_OW 297
4747: PUSH
4748: LD_INT 8
4750: GREATER
4751: IFFALSE 4777
// begin ComMoveXY ( hasVehicle , 86 , 49 ) ;
4753: LD_VAR 0 10
4757: PPUSH
4758: LD_INT 86
4760: PPUSH
4761: LD_INT 49
4763: PPUSH
4764: CALL_OW 111
// AddComRepairVehicleAndReturn ( i ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL 68995 0 1
// end end else
4777: GO 4859
// begin if GetDistUnitXY ( i , 86 , 49 ) > 8 then
4779: LD_VAR 0 1
4783: PPUSH
4784: LD_INT 86
4786: PPUSH
4787: LD_INT 49
4789: PPUSH
4790: CALL_OW 297
4794: PUSH
4795: LD_INT 8
4797: GREATER
4798: IFFALSE 4817
// ComMoveXY ( i , 86 , 49 ) else
4800: LD_VAR 0 1
4804: PPUSH
4805: LD_INT 86
4807: PPUSH
4808: LD_INT 49
4810: PPUSH
4811: CALL_OW 111
4815: GO 4859
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 10
4826: PPUSH
4827: CALL_OW 256
4831: PUSH
4832: LD_INT 1000
4834: LESS
4835: AND
4836: IFFALSE 4859
// begin SetFuel ( hasVehicle , 100 ) ;
4838: LD_VAR 0 10
4842: PPUSH
4843: LD_INT 100
4845: PPUSH
4846: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL 68875 0 1
// end ; end ; end ;
4859: GO 4661
4861: POP
4862: POP
// tmp := FilterUnitsInArea ( ruRolfBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
4863: LD_ADDR_VAR 0 4
4867: PUSH
4868: LD_INT 12
4870: PPUSH
4871: LD_INT 3
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: LD_INT 1000
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: EMPTY
4885: LIST
4886: LIST
4887: PUSH
4888: LD_INT 21
4890: PUSH
4891: LD_INT 3
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PPUSH
4902: CALL_OW 70
4906: ST_TO_ADDR
// if tmp and eng then
4907: LD_VAR 0 4
4911: PUSH
4912: LD_VAR 0 6
4916: AND
4917: IFFALSE 5023
// begin for i in eng do
4919: LD_ADDR_VAR 0 1
4923: PUSH
4924: LD_VAR 0 6
4928: PUSH
4929: FOR_IN
4930: IFFALSE 5021
// if IsInUnit ( i ) then
4932: LD_VAR 0 1
4936: PPUSH
4937: CALL_OW 310
4941: IFFALSE 4954
// ComExitBuilding ( i ) else
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 122
4952: GO 5019
// if GetLives ( i ) = 1000 then
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 256
4963: PUSH
4964: LD_INT 1000
4966: EQUAL
4967: IFFALSE 4989
// ComRepairBuilding ( i , tmp [ 1 ] ) else
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_VAR 0 4
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: CALL_OW 130
4987: GO 5019
// if GetLives ( i ) < 700 then
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 256
4998: PUSH
4999: LD_INT 700
5001: LESS
5002: IFFALSE 5019
// ComMoveXY ( i , 80 , 49 ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_INT 80
5011: PPUSH
5012: LD_INT 49
5014: PPUSH
5015: CALL_OW 111
5019: GO 4929
5021: POP
5022: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
5023: LD_VAR 0 4
5027: NOT
5028: PUSH
5029: LD_VAR 0 6
5033: PPUSH
5034: LD_INT 3
5036: PUSH
5037: LD_INT 54
5039: PUSH
5040: EMPTY
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 72
5051: AND
5052: IFFALSE 5141
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
5054: LD_ADDR_VAR 0 1
5058: PUSH
5059: LD_VAR 0 6
5063: PPUSH
5064: LD_INT 3
5066: PUSH
5067: LD_INT 54
5069: PUSH
5070: EMPTY
5071: LIST
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5139
// if GetLives ( i ) < 1000 then
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 256
5094: PUSH
5095: LD_INT 1000
5097: LESS
5098: IFFALSE 5117
// ComMoveXY ( i , 80 , 49 ) else
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 80
5107: PPUSH
5108: LD_INT 49
5110: PPUSH
5111: CALL_OW 111
5115: GO 5137
// ComEnterUnit ( i , HexInfo ( 86 , 54 ) ) ;
5117: LD_VAR 0 1
5121: PPUSH
5122: LD_INT 86
5124: PPUSH
5125: LD_INT 54
5127: PPUSH
5128: CALL_OW 428
5132: PPUSH
5133: CALL_OW 120
5137: GO 5082
5139: POP
5140: POP
// end ;
5141: PPOPN 10
5143: END
// export function PrepareOmarSquad ; var i , j , p ; begin
5144: LD_INT 0
5146: PPUSH
5147: PPUSH
5148: PPUSH
5149: PPUSH
// uc_side := 5 ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_INT 5
5157: ST_TO_ADDR
// uc_nation := 2 ;
5158: LD_ADDR_OWVAR 21
5162: PUSH
5163: LD_INT 2
5165: ST_TO_ADDR
// omarSquad := [ ] ;
5166: LD_ADDR_EXP 52
5170: PUSH
5171: EMPTY
5172: ST_TO_ADDR
// for i := 1 to 4 do
5173: LD_ADDR_VAR 0 2
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_INT 4
5185: PUSH
5186: FOR_TO
5187: IFFALSE 5310
// begin for j := 1 to [ 6 , 2 , 2 + omarVehiclesCounter , 2 ] [ i ] do
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: DOUBLE
5195: LD_INT 1
5197: DEC
5198: ST_TO_ADDR
5199: LD_INT 6
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 2
5207: PUSH
5208: LD_EXP 21
5212: PLUS
5213: PUSH
5214: LD_INT 2
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PUSH
5223: LD_VAR 0 2
5227: ARRAY
5228: PUSH
5229: FOR_TO
5230: IFFALSE 5306
// begin PrepareHuman ( false , i , 5 ) ;
5232: LD_INT 0
5234: PPUSH
5235: LD_VAR 0 2
5239: PPUSH
5240: LD_INT 5
5242: PPUSH
5243: CALL_OW 380
// omarSquad := Join ( omarSquad , CreateHuman ) ;
5247: LD_ADDR_EXP 52
5251: PUSH
5252: LD_EXP 52
5256: PPUSH
5257: CALL_OW 44
5261: PPUSH
5262: CALL 67175 0 2
5266: ST_TO_ADDR
// if i = 1 and Prob ( 50 ) then
5267: LD_VAR 0 2
5271: PUSH
5272: LD_INT 1
5274: EQUAL
5275: PUSH
5276: LD_INT 50
5278: PPUSH
5279: CALL_OW 13
5283: AND
5284: IFFALSE 5304
// SetClass ( omarSquad [ omarSquad ] , class_mortar ) ;
5286: LD_EXP 52
5290: PUSH
5291: LD_EXP 52
5295: ARRAY
5296: PPUSH
5297: LD_INT 8
5299: PPUSH
5300: CALL_OW 336
// end ;
5304: GO 5229
5306: POP
5307: POP
// end ;
5308: GO 5186
5310: POP
5311: POP
// if HexInfo ( 340 , 205 ) then
5312: LD_INT 340
5314: PPUSH
5315: LD_INT 205
5317: PPUSH
5318: CALL_OW 428
5322: IFFALSE 5339
// RemoveUnit ( HexInfo ( 340 , 205 ) ) ;
5324: LD_INT 340
5326: PPUSH
5327: LD_INT 205
5329: PPUSH
5330: CALL_OW 428
5334: PPUSH
5335: CALL_OW 64
// p := 0 ;
5339: LD_ADDR_VAR 0 4
5343: PUSH
5344: LD_INT 0
5346: ST_TO_ADDR
// for i in omarSquad do
5347: LD_ADDR_VAR 0 2
5351: PUSH
5352: LD_EXP 52
5356: PUSH
5357: FOR_IN
5358: IFFALSE 5559
// begin uc_direction := 4 ;
5360: LD_ADDR_OWVAR 24
5364: PUSH
5365: LD_INT 4
5367: ST_TO_ADDR
// if GetClass ( i ) = class_mechanic and p < 2 then
5368: LD_VAR 0 2
5372: PPUSH
5373: CALL_OW 257
5377: PUSH
5378: LD_INT 3
5380: EQUAL
5381: PUSH
5382: LD_VAR 0 4
5386: PUSH
5387: LD_INT 2
5389: LESS
5390: AND
5391: IFFALSE 5520
// begin p := p + 1 ;
5393: LD_ADDR_VAR 0 4
5397: PUSH
5398: LD_VAR 0 4
5402: PUSH
5403: LD_INT 1
5405: PLUS
5406: ST_TO_ADDR
// uc_side := 5 ;
5407: LD_ADDR_OWVAR 20
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// if rand ( 0 , 1 ) then
5415: LD_INT 0
5417: PPUSH
5418: LD_INT 1
5420: PPUSH
5421: CALL_OW 12
5425: IFFALSE 5456
// begin uc_nation := 2 ;
5427: LD_ADDR_OWVAR 21
5431: PUSH
5432: LD_INT 2
5434: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_combustion , control_manual , ar_gun , 88 ) ;
5435: LD_INT 13
5437: PPUSH
5438: LD_INT 1
5440: PPUSH
5441: LD_INT 1
5443: PPUSH
5444: LD_INT 27
5446: PPUSH
5447: LD_INT 88
5449: PPUSH
5450: CALL 34304 0 5
// end else
5454: GO 5483
// begin uc_nation := 3 ;
5456: LD_ADDR_OWVAR 21
5460: PUSH
5461: LD_INT 3
5463: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 88 ) ;
5464: LD_INT 22
5466: PPUSH
5467: LD_INT 1
5469: PPUSH
5470: LD_INT 1
5472: PPUSH
5473: LD_INT 45
5475: PPUSH
5476: LD_INT 88
5478: PPUSH
5479: CALL 34304 0 5
// end ; PlaceUnitArea ( CreateVehicle , southSpawn , false ) ;
5483: CALL_OW 45
5487: PPUSH
5488: LD_INT 13
5490: PPUSH
5491: LD_INT 0
5493: PPUSH
5494: CALL_OW 49
// PlaceHumanInUnit ( i , HexInfo ( 340 , 205 ) ) ;
5498: LD_VAR 0 2
5502: PPUSH
5503: LD_INT 340
5505: PPUSH
5506: LD_INT 205
5508: PPUSH
5509: CALL_OW 428
5513: PPUSH
5514: CALL_OW 52
// end else
5518: GO 5535
// PlaceUnitArea ( i , southSpawn , false ) ;
5520: LD_VAR 0 2
5524: PPUSH
5525: LD_INT 13
5527: PPUSH
5528: LD_INT 0
5530: PPUSH
5531: CALL_OW 49
// ComMoveXY ( i , 333 , 210 ) ;
5535: LD_VAR 0 2
5539: PPUSH
5540: LD_INT 333
5542: PPUSH
5543: LD_INT 210
5545: PPUSH
5546: CALL_OW 111
// wait ( 0 0$2 ) ;
5550: LD_INT 70
5552: PPUSH
5553: CALL_OW 67
// end ;
5557: GO 5357
5559: POP
5560: POP
// PlaceUnitXY ( Omar , 340 , 205 , false ) ;
5561: LD_EXP 44
5565: PPUSH
5566: LD_INT 340
5568: PPUSH
5569: LD_INT 205
5571: PPUSH
5572: LD_INT 0
5574: PPUSH
5575: CALL_OW 48
// ComMoveXY ( Omar , 333 , 206 ) ;
5579: LD_EXP 44
5583: PPUSH
5584: LD_INT 333
5586: PPUSH
5587: LD_INT 206
5589: PPUSH
5590: CALL_OW 111
// wait ( 0 0$2 ) ;
5594: LD_INT 70
5596: PPUSH
5597: CALL_OW 67
// ComHold ( omarSquad ) ;
5601: LD_EXP 52
5605: PPUSH
5606: CALL_OW 140
// ComAgressiveMove ( omar union UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) union FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] ] ) , 315 , 214 ) ;
5610: LD_EXP 44
5614: PUSH
5615: LD_EXP 52
5619: PPUSH
5620: LD_INT 2
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 8
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: PPUSH
5648: CALL_OW 72
5652: UNION
5653: PUSH
5654: LD_INT 22
5656: PUSH
5657: LD_INT 5
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 21
5666: PUSH
5667: LD_INT 2
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: PPUSH
5678: CALL_OW 69
5682: UNION
5683: PPUSH
5684: LD_INT 315
5686: PPUSH
5687: LD_INT 214
5689: PPUSH
5690: CALL_OW 114
// wait ( 0 0$22 ) ;
5694: LD_INT 770
5696: PPUSH
5697: CALL_OW 67
// ComAgressiveMove ( omarSquad union Omar , 329 , 231 ) ;
5701: LD_EXP 52
5705: PUSH
5706: LD_EXP 44
5710: UNION
5711: PPUSH
5712: LD_INT 329
5714: PPUSH
5715: LD_INT 231
5717: PPUSH
5718: CALL_OW 114
// end ;
5722: LD_VAR 0 1
5726: RET
// every 0 0$1 trigger omarScriptBase do var i , j , b , p , tmp , sol , eng , sci , mech , enemyInBase , hasVehicle ;
5727: LD_EXP 10
5731: IFFALSE 6814
5733: GO 5735
5735: DISABLE
5736: LD_INT 0
5738: PPUSH
5739: PPUSH
5740: PPUSH
5741: PPUSH
5742: PPUSH
5743: PPUSH
5744: PPUSH
5745: PPUSH
5746: PPUSH
5747: PPUSH
5748: PPUSH
// begin enable ;
5749: ENABLE
// if not omarSquad then
5750: LD_EXP 52
5754: NOT
5755: IFFALSE 5759
// exit ;
5757: GO 6814
// enemyInBase := FilterUnitsInArea ( ruOmarBase , [ f_enemy , 5 ] ) ;
5759: LD_ADDR_VAR 0 10
5763: PUSH
5764: LD_INT 14
5766: PPUSH
5767: LD_INT 81
5769: PUSH
5770: LD_INT 5
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PPUSH
5777: CALL_OW 70
5781: ST_TO_ADDR
// sol := UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ;
5782: LD_ADDR_VAR 0 6
5786: PUSH
5787: LD_EXP 52
5791: PPUSH
5792: LD_INT 2
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 1
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 8
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PPUSH
5820: CALL_OW 72
5824: ST_TO_ADDR
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
5825: LD_ADDR_VAR 0 7
5829: PUSH
5830: LD_EXP 52
5834: PPUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 2
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 72
5849: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ f_class , 3 ] ) ;
5850: LD_ADDR_VAR 0 9
5854: PUSH
5855: LD_EXP 52
5859: PPUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 3
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: ST_TO_ADDR
// sci := UnitFilter ( omarSquad , [ f_class , 4 ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_EXP 52
5884: PPUSH
5885: LD_INT 25
5887: PUSH
5888: LD_INT 4
5890: PUSH
5891: EMPTY
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 72
5899: ST_TO_ADDR
// if sol then
5900: LD_VAR 0 6
5904: IFFALSE 6268
// for i in sol do
5906: LD_ADDR_VAR 0 1
5910: PUSH
5911: LD_VAR 0 6
5915: PUSH
5916: FOR_IN
5917: IFFALSE 6266
// if not HasTask ( i ) then
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 314
5928: NOT
5929: IFFALSE 6264
// begin if not IsInUnit ( i ) and GetLives ( i ) < 500 and GetDistUnitXY ( i , 333 , 234 ) > 6 then
5931: LD_VAR 0 1
5935: PPUSH
5936: CALL_OW 310
5940: NOT
5941: PUSH
5942: LD_VAR 0 1
5946: PPUSH
5947: CALL_OW 256
5951: PUSH
5952: LD_INT 500
5954: LESS
5955: AND
5956: PUSH
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_INT 333
5964: PPUSH
5965: LD_INT 234
5967: PPUSH
5968: CALL_OW 297
5972: PUSH
5973: LD_INT 6
5975: GREATER
5976: AND
5977: IFFALSE 5996
// begin ComMoveXY ( i , 333 , 234 ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: LD_INT 333
5986: PPUSH
5987: LD_INT 234
5989: PPUSH
5990: CALL_OW 111
// continue ;
5994: GO 5916
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_empty ] , [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
5996: LD_ADDR_VAR 0 5
6000: PUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 5
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 58
6013: PUSH
6014: EMPTY
6015: LIST
6016: PUSH
6017: LD_INT 50
6019: PUSH
6020: EMPTY
6021: LIST
6022: PUSH
6023: LD_INT 2
6025: PUSH
6026: LD_INT 30
6028: PUSH
6029: LD_INT 32
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 30
6038: PUSH
6039: LD_INT 31
6041: PUSH
6042: EMPTY
6043: LIST
6044: LIST
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: PPUSH
6057: CALL_OW 69
6061: ST_TO_ADDR
// if tmp and GetBType ( IsInUnit ( i ) ) <> b_breastwork then
6062: LD_VAR 0 5
6066: PUSH
6067: LD_VAR 0 1
6071: PPUSH
6072: CALL_OW 310
6076: PPUSH
6077: CALL_OW 266
6081: PUSH
6082: LD_INT 31
6084: NONEQUAL
6085: AND
6086: IFFALSE 6168
// begin for j in tmp do
6088: LD_ADDR_VAR 0 2
6092: PUSH
6093: LD_VAR 0 5
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6164
// if GetTag ( j ) <> 1 then
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 110
6110: PUSH
6111: LD_INT 1
6113: NONEQUAL
6114: IFFALSE 6162
// begin SetTag ( j , 1 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 109
// if IsInUnit ( i ) then
6128: LD_VAR 0 1
6132: PPUSH
6133: CALL_OW 310
6137: IFFALSE 6148
// ComExit ( i ) ;
6139: LD_VAR 0 1
6143: PPUSH
6144: CALL 67573 0 1
// AddComEnterUnit ( i , j ) ;
6148: LD_VAR 0 1
6152: PPUSH
6153: LD_VAR 0 2
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 6098
6164: POP
6165: POP
// end else
6166: GO 6264
// if not IsInUnit ( i ) then
6168: LD_VAR 0 1
6172: PPUSH
6173: CALL_OW 310
6177: NOT
6178: IFFALSE 6264
// begin tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] , [ f_btype , b_armoury ] ] ) ;
6180: LD_ADDR_VAR 0 5
6184: PUSH
6185: LD_INT 22
6187: PUSH
6188: LD_INT 5
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PUSH
6195: LD_INT 50
6197: PUSH
6198: EMPTY
6199: LIST
6200: PUSH
6201: LD_INT 30
6203: PUSH
6204: LD_INT 4
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: ST_TO_ADDR
// if tmp then
6221: LD_VAR 0 5
6225: IFFALSE 6264
// if UnitsInside ( tmp [ 1 ] ) < 6 then
6227: LD_VAR 0 5
6231: PUSH
6232: LD_INT 1
6234: ARRAY
6235: PPUSH
6236: CALL_OW 313
6240: PUSH
6241: LD_INT 6
6243: LESS
6244: IFFALSE 6264
// ComEnterUnit ( i , tmp [ 1 ] ) ;
6246: LD_VAR 0 1
6250: PPUSH
6251: LD_VAR 0 5
6255: PUSH
6256: LD_INT 1
6258: ARRAY
6259: PPUSH
6260: CALL_OW 120
// end ; end ;
6264: GO 5916
6266: POP
6267: POP
// if sci then
6268: LD_VAR 0 8
6272: IFFALSE 6327
// for i in sci do
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_VAR 0 8
6283: PUSH
6284: FOR_IN
6285: IFFALSE 6325
// begin if GetDistUnitXY ( i , 333 , 234 ) > 9 then
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 333
6294: PPUSH
6295: LD_INT 234
6297: PPUSH
6298: CALL_OW 297
6302: PUSH
6303: LD_INT 9
6305: GREATER
6306: IFFALSE 6323
// ComMoveXY ( i , 333 , 234 ) ;
6308: LD_VAR 0 1
6312: PPUSH
6313: LD_INT 333
6315: PPUSH
6316: LD_INT 234
6318: PPUSH
6319: CALL_OW 111
// end ;
6323: GO 6284
6325: POP
6326: POP
// if mech then
6327: LD_VAR 0 9
6331: IFFALSE 6536
// for i in mech do
6333: LD_ADDR_VAR 0 1
6337: PUSH
6338: LD_VAR 0 9
6342: PUSH
6343: FOR_IN
6344: IFFALSE 6534
// begin hasVehicle := IsInUnit ( i ) ;
6346: LD_ADDR_VAR 0 11
6350: PUSH
6351: LD_VAR 0 1
6355: PPUSH
6356: CALL_OW 310
6360: ST_TO_ADDR
// if enemyInBase then
6361: LD_VAR 0 10
6365: IFFALSE 6452
// begin if hasVehicle and GetLives ( hasVehicle ) > 500 then
6367: LD_VAR 0 11
6371: PUSH
6372: LD_VAR 0 11
6376: PPUSH
6377: CALL_OW 256
6381: PUSH
6382: LD_INT 500
6384: GREATER
6385: AND
6386: IFFALSE 6414
// ComAttackUnit ( hasVehicle , NearestUnitToUnit ( enemyInBase , hasVehicle ) ) else
6388: LD_VAR 0 11
6392: PPUSH
6393: LD_VAR 0 10
6397: PPUSH
6398: LD_VAR 0 11
6402: PPUSH
6403: CALL_OW 74
6407: PPUSH
6408: CALL_OW 115
6412: GO 6450
// if GetDistUnitXY ( hasVehicle , 333 , 234 ) > 6 then
6414: LD_VAR 0 11
6418: PPUSH
6419: LD_INT 333
6421: PPUSH
6422: LD_INT 234
6424: PPUSH
6425: CALL_OW 297
6429: PUSH
6430: LD_INT 6
6432: GREATER
6433: IFFALSE 6450
// ComMoveXY ( hasVehicle , 333 , 234 ) ;
6435: LD_VAR 0 11
6439: PPUSH
6440: LD_INT 333
6442: PPUSH
6443: LD_INT 234
6445: PPUSH
6446: CALL_OW 111
// end else
6450: GO 6532
// begin if GetDistUnitXY ( i , 333 , 234 ) > 6 then
6452: LD_VAR 0 1
6456: PPUSH
6457: LD_INT 333
6459: PPUSH
6460: LD_INT 234
6462: PPUSH
6463: CALL_OW 297
6467: PUSH
6468: LD_INT 6
6470: GREATER
6471: IFFALSE 6490
// ComMoveXY ( i , 333 , 234 ) else
6473: LD_VAR 0 1
6477: PPUSH
6478: LD_INT 333
6480: PPUSH
6481: LD_INT 234
6483: PPUSH
6484: CALL_OW 111
6488: GO 6532
// if hasVehicle and GetLives ( hasVehicle ) < 1000 then
6490: LD_VAR 0 11
6494: PUSH
6495: LD_VAR 0 11
6499: PPUSH
6500: CALL_OW 256
6504: PUSH
6505: LD_INT 1000
6507: LESS
6508: AND
6509: IFFALSE 6532
// begin SetFuel ( hasVehicle , 100 ) ;
6511: LD_VAR 0 11
6515: PPUSH
6516: LD_INT 100
6518: PPUSH
6519: CALL_OW 240
// ComRepairVehicleAndReturn ( i ) ;
6523: LD_VAR 0 1
6527: PPUSH
6528: CALL 68875 0 1
// end ; end ; end ;
6532: GO 6343
6534: POP
6535: POP
// tmp := FilterUnitsInArea ( ruOmarBase , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6536: LD_ADDR_VAR 0 5
6540: PUSH
6541: LD_INT 14
6543: PPUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 24
6549: PUSH
6550: LD_INT 1000
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PPUSH
6575: CALL_OW 70
6579: ST_TO_ADDR
// if tmp and eng then
6580: LD_VAR 0 5
6584: PUSH
6585: LD_VAR 0 7
6589: AND
6590: IFFALSE 6696
// begin for i in eng do
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_VAR 0 7
6601: PUSH
6602: FOR_IN
6603: IFFALSE 6694
// if IsInUnit ( i ) then
6605: LD_VAR 0 1
6609: PPUSH
6610: CALL_OW 310
6614: IFFALSE 6627
// ComExitBuilding ( i ) else
6616: LD_VAR 0 1
6620: PPUSH
6621: CALL_OW 122
6625: GO 6692
// if GetLives ( i ) = 1000 then
6627: LD_VAR 0 1
6631: PPUSH
6632: CALL_OW 256
6636: PUSH
6637: LD_INT 1000
6639: EQUAL
6640: IFFALSE 6662
// ComRepairBuilding ( i , tmp [ 1 ] ) else
6642: LD_VAR 0 1
6646: PPUSH
6647: LD_VAR 0 5
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: CALL_OW 130
6660: GO 6692
// if GetLives ( i ) < 700 then
6662: LD_VAR 0 1
6666: PPUSH
6667: CALL_OW 256
6671: PUSH
6672: LD_INT 700
6674: LESS
6675: IFFALSE 6692
// ComMoveXY ( i , 333 , 234 ) ;
6677: LD_VAR 0 1
6681: PPUSH
6682: LD_INT 333
6684: PPUSH
6685: LD_INT 234
6687: PPUSH
6688: CALL_OW 111
6692: GO 6602
6694: POP
6695: POP
// end ; if not tmp and UnitFilter ( eng , [ f_not , [ f_inside ] ] ) then
6696: LD_VAR 0 5
6700: NOT
6701: PUSH
6702: LD_VAR 0 7
6706: PPUSH
6707: LD_INT 3
6709: PUSH
6710: LD_INT 54
6712: PUSH
6713: EMPTY
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PPUSH
6720: CALL_OW 72
6724: AND
6725: IFFALSE 6814
// for i in UnitFilter ( eng , [ f_not , [ f_inside ] ] ) do
6727: LD_ADDR_VAR 0 1
6731: PUSH
6732: LD_VAR 0 7
6736: PPUSH
6737: LD_INT 3
6739: PUSH
6740: LD_INT 54
6742: PUSH
6743: EMPTY
6744: LIST
6745: PUSH
6746: EMPTY
6747: LIST
6748: LIST
6749: PPUSH
6750: CALL_OW 72
6754: PUSH
6755: FOR_IN
6756: IFFALSE 6812
// if GetLives ( i ) < 1000 then
6758: LD_VAR 0 1
6762: PPUSH
6763: CALL_OW 256
6767: PUSH
6768: LD_INT 1000
6770: LESS
6771: IFFALSE 6790
// ComMoveXY ( i , 333 , 234 ) else
6773: LD_VAR 0 1
6777: PPUSH
6778: LD_INT 333
6780: PPUSH
6781: LD_INT 234
6783: PPUSH
6784: CALL_OW 111
6788: GO 6810
// ComEnterUnit ( i , HexInfo ( 341 , 232 ) ) ;
6790: LD_VAR 0 1
6794: PPUSH
6795: LD_INT 341
6797: PPUSH
6798: LD_INT 232
6800: PPUSH
6801: CALL_OW 428
6805: PPUSH
6806: CALL_OW 120
6810: GO 6755
6812: POP
6813: POP
// end ;
6814: PPOPN 11
6816: END
// every 0 0$1 trigger GetLives ( Omar ) < 1000 do
6817: LD_EXP 44
6821: PPUSH
6822: CALL_OW 256
6826: PUSH
6827: LD_INT 1000
6829: LESS
6830: IFFALSE 6848
6832: GO 6834
6834: DISABLE
// begin enable ;
6835: ENABLE
// SetLives ( Omar , 1000 ) ;
6836: LD_EXP 44
6840: PPUSH
6841: LD_INT 1000
6843: PPUSH
6844: CALL_OW 234
// end ;
6848: END
// every 0 0$1 trigger GetLives ( Rolf ) < 1000 and rolfAttack do
6849: LD_EXP 47
6853: PPUSH
6854: CALL_OW 256
6858: PUSH
6859: LD_INT 1000
6861: LESS
6862: PUSH
6863: LD_EXP 32
6867: AND
6868: IFFALSE 6886
6870: GO 6872
6872: DISABLE
// begin enable ;
6873: ENABLE
// SetLives ( Rolf , 1000 ) ;
6874: LD_EXP 47
6878: PPUSH
6879: LD_INT 1000
6881: PPUSH
6882: CALL_OW 234
// end ;
6886: END
// every 0 0$1 trigger rolfAttack do var i , tmp , mech , path , tag , rolfCoords ;
6887: LD_EXP 32
6891: IFFALSE 7571
6893: GO 6895
6895: DISABLE
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
// begin path := [ [ 215 , 162 ] , [ 195 , 163 ] , [ 174 , 162 ] , [ 145 , 163 ] , [ 127 , 163 ] ] ;
6904: LD_ADDR_VAR 0 4
6908: PUSH
6909: LD_INT 215
6911: PUSH
6912: LD_INT 162
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 195
6921: PUSH
6922: LD_INT 163
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 174
6931: PUSH
6932: LD_INT 162
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 145
6941: PUSH
6942: LD_INT 163
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 127
6951: PUSH
6952: LD_INT 163
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: ST_TO_ADDR
// rolfCoords := [ 221 , 161 ] ;
6966: LD_ADDR_VAR 0 6
6970: PUSH
6971: LD_INT 221
6973: PUSH
6974: LD_INT 161
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: ST_TO_ADDR
// tmp := Rolf union rolfSquad ;
6981: LD_ADDR_VAR 0 2
6985: PUSH
6986: LD_EXP 47
6990: PUSH
6991: LD_EXP 51
6995: UNION
6996: ST_TO_ADDR
// if not tmp then
6997: LD_VAR 0 2
7001: NOT
7002: IFFALSE 7006
// exit ;
7004: GO 7571
// ComMoveXY ( tmp , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7006: LD_VAR 0 2
7010: PPUSH
7011: LD_VAR 0 6
7015: PUSH
7016: LD_INT 1
7018: ARRAY
7019: PPUSH
7020: LD_VAR 0 6
7024: PUSH
7025: LD_INT 2
7027: ARRAY
7028: PPUSH
7029: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7033: LD_INT 35
7035: PPUSH
7036: CALL_OW 67
// tmp := UnitFilter ( rolfSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
7040: LD_ADDR_VAR 0 2
7044: PUSH
7045: LD_EXP 51
7049: PPUSH
7050: LD_INT 3
7052: PUSH
7053: LD_INT 55
7055: PUSH
7056: EMPTY
7057: LIST
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 1
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 8
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: LIST
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PPUSH
7095: CALL_OW 72
7099: ST_TO_ADDR
// if tmp then
7100: LD_VAR 0 2
7104: IFFALSE 7257
// begin for i in tmp do
7106: LD_ADDR_VAR 0 1
7110: PUSH
7111: LD_VAR 0 2
7115: PUSH
7116: FOR_IN
7117: IFFALSE 7255
// begin tag := GetTag ( i ) ;
7119: LD_ADDR_VAR 0 5
7123: PUSH
7124: LD_VAR 0 1
7128: PPUSH
7129: CALL_OW 110
7133: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
7134: LD_VAR 0 1
7138: PPUSH
7139: CALL_OW 256
7143: PUSH
7144: LD_INT 800
7146: LESS
7147: PUSH
7148: LD_VAR 0 5
7152: PUSH
7153: LD_INT 101
7155: LESS
7156: AND
7157: IFFALSE 7200
// begin SetTag ( i , 101 ) ;
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 101
7166: PPUSH
7167: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7171: LD_VAR 0 1
7175: PPUSH
7176: LD_VAR 0 6
7180: PUSH
7181: LD_INT 1
7183: ARRAY
7184: PPUSH
7185: LD_VAR 0 6
7189: PUSH
7190: LD_INT 2
7192: ARRAY
7193: PPUSH
7194: CALL_OW 111
// end else
7198: GO 7253
// if tag = 101 then
7200: LD_VAR 0 5
7204: PUSH
7205: LD_INT 101
7207: EQUAL
7208: IFFALSE 7239
// begin if GetLives ( i ) = 1000 then
7210: LD_VAR 0 1
7214: PPUSH
7215: CALL_OW 256
7219: PUSH
7220: LD_INT 1000
7222: EQUAL
7223: IFFALSE 7237
// SetTag ( i , 0 ) ;
7225: LD_VAR 0 1
7229: PPUSH
7230: LD_INT 0
7232: PPUSH
7233: CALL_OW 109
// end else
7237: GO 7253
// AgressiveMove ( i , path ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_VAR 0 4
7248: PPUSH
7249: CALL 69779 0 2
// end ;
7253: GO 7116
7255: POP
7256: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
7257: LD_ADDR_VAR 0 2
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 8
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 2
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 3
7284: PUSH
7285: LD_INT 34
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: PPUSH
7304: CALL_OW 69
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 2
7313: NOT
7314: IFFALSE 7318
// continue ;
7316: GO 7033
// for i in tmp do
7318: LD_ADDR_VAR 0 1
7322: PUSH
7323: LD_VAR 0 2
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7562
// begin mech := IsDrivenBy ( i ) ;
7331: LD_ADDR_VAR 0 3
7335: PUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 311
7345: ST_TO_ADDR
// if not mech then
7346: LD_VAR 0 3
7350: NOT
7351: IFFALSE 7355
// continue ;
7353: GO 7328
// tag := GetTag ( i ) ;
7355: LD_ADDR_VAR 0 5
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 110
7369: ST_TO_ADDR
// if GetLives ( i ) >= 600 and tag < 101 then
7370: LD_VAR 0 1
7374: PPUSH
7375: CALL_OW 256
7379: PUSH
7380: LD_INT 600
7382: GREATEREQUAL
7383: PUSH
7384: LD_VAR 0 5
7388: PUSH
7389: LD_INT 101
7391: LESS
7392: AND
7393: IFFALSE 7409
// AgressiveMove ( i , path ) ;
7395: LD_VAR 0 1
7399: PPUSH
7400: LD_VAR 0 4
7404: PPUSH
7405: CALL 69779 0 2
// if GetLives ( i ) < 600 and tag < 101 then
7409: LD_VAR 0 1
7413: PPUSH
7414: CALL_OW 256
7418: PUSH
7419: LD_INT 600
7421: LESS
7422: PUSH
7423: LD_VAR 0 5
7427: PUSH
7428: LD_INT 101
7430: LESS
7431: AND
7432: IFFALSE 7473
// begin SetTag ( i , 101 ) ;
7434: LD_VAR 0 1
7438: PPUSH
7439: LD_INT 101
7441: PPUSH
7442: CALL_OW 109
// ComMoveXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) ;
7446: LD_VAR 0 1
7450: PPUSH
7451: LD_VAR 0 6
7455: PUSH
7456: LD_INT 1
7458: ARRAY
7459: PPUSH
7460: LD_VAR 0 6
7464: PUSH
7465: LD_INT 2
7467: ARRAY
7468: PPUSH
7469: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , rolfCoords [ 1 ] , rolfCoords [ 2 ] ) < 9 and mech then
7473: LD_VAR 0 5
7477: PUSH
7478: LD_INT 101
7480: EQUAL
7481: PUSH
7482: LD_VAR 0 1
7486: PPUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_INT 1
7494: ARRAY
7495: PPUSH
7496: LD_VAR 0 6
7500: PUSH
7501: LD_INT 2
7503: ARRAY
7504: PPUSH
7505: CALL_OW 297
7509: PUSH
7510: LD_INT 9
7512: LESS
7513: AND
7514: PUSH
7515: LD_VAR 0 3
7519: AND
7520: IFFALSE 7560
// begin if GetLives ( i ) < 1000 then
7522: LD_VAR 0 1
7526: PPUSH
7527: CALL_OW 256
7531: PUSH
7532: LD_INT 1000
7534: LESS
7535: IFFALSE 7548
// AddComRepairVehicleAndReturn ( mech ) else
7537: LD_VAR 0 3
7541: PPUSH
7542: CALL 68995 0 1
7546: GO 7560
// SetTag ( i , 0 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 109
// end ; end ;
7560: GO 7328
7562: POP
7563: POP
// until not tmp ;
7564: LD_VAR 0 2
7568: NOT
7569: IFFALSE 7033
// end ;
7571: PPOPN 6
7573: END
// every 0 0$1 trigger omarAttack do var i , cargo , tmp , tag , mech , x , path , omarAttackCoords ;
7574: LD_EXP 23
7578: IFFALSE 8883
7580: GO 7582
7582: DISABLE
7583: LD_INT 0
7585: PPUSH
7586: PPUSH
7587: PPUSH
7588: PPUSH
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
// begin path := [ [ 209 , 221 ] , [ 190 , 220 ] , [ 177 , 220 ] , [ 168 , 223 ] , [ 150 , 206 ] ] ;
7593: LD_ADDR_VAR 0 7
7597: PUSH
7598: LD_INT 209
7600: PUSH
7601: LD_INT 221
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: PUSH
7608: LD_INT 190
7610: PUSH
7611: LD_INT 220
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: PUSH
7618: LD_INT 177
7620: PUSH
7621: LD_INT 220
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 168
7630: PUSH
7631: LD_INT 223
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 150
7640: PUSH
7641: LD_INT 206
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: ST_TO_ADDR
// omarAttackCoords := [ 219 , 225 , 0 ] ;
7655: LD_ADDR_VAR 0 8
7659: PUSH
7660: LD_INT 219
7662: PUSH
7663: LD_INT 225
7665: PUSH
7666: LD_INT 0
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: ST_TO_ADDR
// for i := 1 to 2 do
7674: LD_ADDR_VAR 0 1
7678: PUSH
7679: DOUBLE
7680: LD_INT 1
7682: DEC
7683: ST_TO_ADDR
7684: LD_INT 2
7686: PUSH
7687: FOR_TO
7688: IFFALSE 7837
// begin uc_side := 5 ;
7690: LD_ADDR_OWVAR 20
7694: PUSH
7695: LD_INT 5
7697: ST_TO_ADDR
// uc_nation := 2 ;
7698: LD_ADDR_OWVAR 21
7702: PUSH
7703: LD_INT 2
7705: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_cargo_bay , 80 ) ;
7706: LD_INT 14
7708: PPUSH
7709: LD_INT 1
7711: PPUSH
7712: LD_INT 1
7714: PPUSH
7715: LD_INT 32
7717: PPUSH
7718: LD_INT 80
7720: PPUSH
7721: CALL 34304 0 5
// cargo := Join ( cargo , CreateVehicle ) ;
7725: LD_ADDR_VAR 0 2
7729: PUSH
7730: LD_VAR 0 2
7734: PPUSH
7735: CALL_OW 45
7739: PPUSH
7740: CALL 67175 0 2
7744: ST_TO_ADDR
// SetDir ( cargo [ i ] , 4 ) ;
7745: LD_VAR 0 2
7749: PUSH
7750: LD_VAR 0 1
7754: ARRAY
7755: PPUSH
7756: LD_INT 4
7758: PPUSH
7759: CALL_OW 233
// PlaceUnitArea ( cargo [ i ] , omarVehiclesArea , false ) ;
7763: LD_VAR 0 2
7767: PUSH
7768: LD_VAR 0 1
7772: ARRAY
7773: PPUSH
7774: LD_INT 16
7776: PPUSH
7777: LD_INT 0
7779: PPUSH
7780: CALL_OW 49
// PrepareMechanic ( false , 4 ) ;
7784: LD_INT 0
7786: PPUSH
7787: LD_INT 4
7789: PPUSH
7790: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , cargo [ i ] ) ;
7794: CALL_OW 44
7798: PPUSH
7799: LD_VAR 0 2
7803: PUSH
7804: LD_VAR 0 1
7808: ARRAY
7809: PPUSH
7810: CALL_OW 52
// ComMoveXY ( cargo [ i ] , 337 , 232 ) ;
7814: LD_VAR 0 2
7818: PUSH
7819: LD_VAR 0 1
7823: ARRAY
7824: PPUSH
7825: LD_INT 337
7827: PPUSH
7828: LD_INT 232
7830: PPUSH
7831: CALL_OW 111
// end ;
7835: GO 7687
7837: POP
7838: POP
// wait ( 0 0$25 ) ;
7839: LD_INT 875
7841: PPUSH
7842: CALL_OW 67
// for i := 1 to 2 do
7846: LD_ADDR_VAR 0 1
7850: PUSH
7851: DOUBLE
7852: LD_INT 1
7854: DEC
7855: ST_TO_ADDR
7856: LD_INT 2
7858: PUSH
7859: FOR_TO
7860: IFFALSE 7885
// SetCargo ( cargo [ i ] , mat_oil , 100 ) ;
7862: LD_VAR 0 2
7866: PUSH
7867: LD_VAR 0 1
7871: ARRAY
7872: PPUSH
7873: LD_INT 2
7875: PPUSH
7876: LD_INT 100
7878: PPUSH
7879: CALL_OW 290
7883: GO 7859
7885: POP
7886: POP
// ComExitBuilding ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ) ) ;
7887: LD_EXP 52
7891: PPUSH
7892: LD_INT 2
7894: PUSH
7895: LD_INT 25
7897: PUSH
7898: LD_INT 1
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: PUSH
7905: LD_INT 25
7907: PUSH
7908: LD_INT 8
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: LIST
7919: PPUSH
7920: CALL_OW 72
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComAgressiveMove ( omarSquad union Omar , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
7936: LD_EXP 52
7940: PUSH
7941: LD_EXP 44
7945: UNION
7946: PPUSH
7947: LD_VAR 0 8
7951: PUSH
7952: LD_INT 1
7954: ARRAY
7955: PPUSH
7956: LD_VAR 0 8
7960: PUSH
7961: LD_INT 2
7963: ARRAY
7964: PPUSH
7965: CALL_OW 174
// wait ( 0 0$3 ) ;
7969: LD_INT 105
7971: PPUSH
7972: CALL_OW 67
// AddComMoveXY ( cargo , 218 , 217 ) ;
7976: LD_VAR 0 2
7980: PPUSH
7981: LD_INT 218
7983: PPUSH
7984: LD_INT 217
7986: PPUSH
7987: CALL_OW 171
// wait ( 1 1$00 ) ;
7991: LD_INT 2100
7993: PPUSH
7994: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// if omarAttackCoords [ 3 ] = 0 then
8005: LD_VAR 0 8
8009: PUSH
8010: LD_INT 3
8012: ARRAY
8013: PUSH
8014: LD_INT 0
8016: EQUAL
8017: IFFALSE 8122
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 168 , 229 , 12 ] ] ) = 0 then
8019: LD_INT 22
8021: PUSH
8022: LD_INT 3
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: LD_INT 92
8031: PUSH
8032: LD_INT 168
8034: PUSH
8035: LD_INT 229
8037: PUSH
8038: LD_INT 12
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: PUSH
8047: EMPTY
8048: LIST
8049: LIST
8050: PPUSH
8051: CALL_OW 69
8055: PUSH
8056: LD_INT 0
8058: EQUAL
8059: IFFALSE 8122
// begin omarAttackCoords := [ 167 , 222 , 1 ] ;
8061: LD_ADDR_VAR 0 8
8065: PUSH
8066: LD_INT 167
8068: PUSH
8069: LD_INT 222
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: ST_TO_ADDR
// AddComMoveXY ( Omar ^ cargo ^ UnitFilter ( omarSquad , [ f_class , 4 ] ) , 167 , 222 ) ;
8080: LD_EXP 44
8084: PUSH
8085: LD_VAR 0 2
8089: ADD
8090: PUSH
8091: LD_EXP 52
8095: PPUSH
8096: LD_INT 25
8098: PUSH
8099: LD_INT 4
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 72
8110: ADD
8111: PPUSH
8112: LD_INT 167
8114: PPUSH
8115: LD_INT 222
8117: PPUSH
8118: CALL_OW 171
// end ; tmp := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) ;
8122: LD_ADDR_VAR 0 3
8126: PUSH
8127: LD_EXP 52
8131: PPUSH
8132: LD_INT 3
8134: PUSH
8135: LD_INT 55
8137: PUSH
8138: EMPTY
8139: LIST
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PPUSH
8177: CALL_OW 72
8181: ST_TO_ADDR
// if tmp then
8182: LD_VAR 0 3
8186: IFFALSE 8399
// begin for i in tmp do
8188: LD_ADDR_VAR 0 1
8192: PUSH
8193: LD_VAR 0 3
8197: PUSH
8198: FOR_IN
8199: IFFALSE 8397
// begin tag := GetTag ( i ) ;
8201: LD_ADDR_VAR 0 4
8205: PUSH
8206: LD_VAR 0 1
8210: PPUSH
8211: CALL_OW 110
8215: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag < 101 then
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 256
8225: PUSH
8226: LD_INT 800
8228: LESS
8229: PUSH
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 101
8237: LESS
8238: AND
8239: IFFALSE 8282
// begin SetTag ( i , 101 ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_INT 101
8248: PPUSH
8249: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 8
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 8
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 111
// end else
8280: GO 8395
// if tag = 101 then
8282: LD_VAR 0 4
8286: PUSH
8287: LD_INT 101
8289: EQUAL
8290: IFFALSE 8381
// begin if GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) > 10 then
8292: LD_VAR 0 1
8296: PPUSH
8297: LD_VAR 0 8
8301: PUSH
8302: LD_INT 1
8304: ARRAY
8305: PPUSH
8306: LD_VAR 0 8
8310: PUSH
8311: LD_INT 2
8313: ARRAY
8314: PPUSH
8315: CALL_OW 297
8319: PUSH
8320: LD_INT 10
8322: GREATER
8323: IFFALSE 8352
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8325: LD_VAR 0 1
8329: PPUSH
8330: LD_VAR 0 8
8334: PUSH
8335: LD_INT 1
8337: ARRAY
8338: PPUSH
8339: LD_VAR 0 8
8343: PUSH
8344: LD_INT 2
8346: ARRAY
8347: PPUSH
8348: CALL_OW 111
// if GetLives ( i ) = 1000 then
8352: LD_VAR 0 1
8356: PPUSH
8357: CALL_OW 256
8361: PUSH
8362: LD_INT 1000
8364: EQUAL
8365: IFFALSE 8379
// SetTag ( i , 0 ) ;
8367: LD_VAR 0 1
8371: PPUSH
8372: LD_INT 0
8374: PPUSH
8375: CALL_OW 109
// end else
8379: GO 8395
// AgressiveMove ( i , path ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_VAR 0 7
8390: PPUSH
8391: CALL 69779 0 2
// end ;
8395: GO 8198
8397: POP
8398: POP
// end ; tmp := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ] ) ;
8399: LD_ADDR_VAR 0 3
8403: PUSH
8404: LD_INT 22
8406: PUSH
8407: LD_INT 5
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 2
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 3
8426: PUSH
8427: LD_INT 34
8429: PUSH
8430: LD_INT 32
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PUSH
8441: EMPTY
8442: LIST
8443: LIST
8444: LIST
8445: PPUSH
8446: CALL_OW 69
8450: ST_TO_ADDR
// if not tmp then
8451: LD_VAR 0 3
8455: NOT
8456: IFFALSE 8460
// continue ;
8458: GO 7998
// for i in tmp do
8460: LD_ADDR_VAR 0 1
8464: PUSH
8465: LD_VAR 0 3
8469: PUSH
8470: FOR_IN
8471: IFFALSE 8874
// begin mech := IsDrivenBy ( i ) ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PPUSH
8483: CALL_OW 311
8487: ST_TO_ADDR
// if not mech then
8488: LD_VAR 0 5
8492: NOT
8493: IFFALSE 8497
// continue ;
8495: GO 8470
// tag := GetTag ( i ) ;
8497: LD_ADDR_VAR 0 4
8501: PUSH
8502: LD_VAR 0 1
8506: PPUSH
8507: CALL_OW 110
8511: ST_TO_ADDR
// if GetFuel ( i ) > 90 and tag = 102 then
8512: LD_VAR 0 1
8516: PPUSH
8517: CALL_OW 261
8521: PUSH
8522: LD_INT 90
8524: GREATER
8525: PUSH
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: AND
8535: IFFALSE 8551
// SetTag ( i , 0 ) else
8537: LD_VAR 0 1
8541: PPUSH
8542: LD_INT 0
8544: PPUSH
8545: CALL_OW 109
8549: GO 8647
// if GetTag ( i ) = 102 then
8551: LD_VAR 0 1
8555: PPUSH
8556: CALL_OW 110
8560: PUSH
8561: LD_INT 102
8563: EQUAL
8564: IFFALSE 8647
// begin x := rand ( 1 , 2 ) ;
8566: LD_ADDR_VAR 0 6
8570: PUSH
8571: LD_INT 1
8573: PPUSH
8574: LD_INT 2
8576: PPUSH
8577: CALL_OW 12
8581: ST_TO_ADDR
// AddComMoveUnit ( i , cargo [ x ] ) ;
8582: LD_VAR 0 1
8586: PPUSH
8587: LD_VAR 0 2
8591: PUSH
8592: LD_VAR 0 6
8596: ARRAY
8597: PPUSH
8598: CALL_OW 172
// if GetCargo ( cargo [ x ] , mat_oil ) < 20 then
8602: LD_VAR 0 2
8606: PUSH
8607: LD_VAR 0 6
8611: ARRAY
8612: PPUSH
8613: LD_INT 2
8615: PPUSH
8616: CALL_OW 289
8620: PUSH
8621: LD_INT 20
8623: LESS
8624: IFFALSE 8647
// SetCargo ( cargo [ x ] , mat_oil , 100 ) ;
8626: LD_VAR 0 2
8630: PUSH
8631: LD_VAR 0 6
8635: ARRAY
8636: PPUSH
8637: LD_INT 2
8639: PPUSH
8640: LD_INT 100
8642: PPUSH
8643: CALL_OW 290
// end ; if GetLives ( i ) >= 600 and tag < 101 then
8647: LD_VAR 0 1
8651: PPUSH
8652: CALL_OW 256
8656: PUSH
8657: LD_INT 600
8659: GREATEREQUAL
8660: PUSH
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 101
8668: LESS
8669: AND
8670: IFFALSE 8686
// AgressiveMove ( i , path ) ;
8672: LD_VAR 0 1
8676: PPUSH
8677: LD_VAR 0 7
8681: PPUSH
8682: CALL 69779 0 2
// if GetLives ( i ) < 600 and tag < 101 then
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 256
8695: PUSH
8696: LD_INT 600
8698: LESS
8699: PUSH
8700: LD_VAR 0 4
8704: PUSH
8705: LD_INT 101
8707: LESS
8708: AND
8709: IFFALSE 8750
// begin SetTag ( i , 101 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 101
8718: PPUSH
8719: CALL_OW 109
// ComMoveXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_VAR 0 8
8732: PUSH
8733: LD_INT 1
8735: ARRAY
8736: PPUSH
8737: LD_VAR 0 8
8741: PUSH
8742: LD_INT 2
8744: ARRAY
8745: PPUSH
8746: CALL_OW 111
// end ; if tag = 101 and GetDistUnitXY ( i , omarAttackCoords [ 1 ] , omarAttackCoords [ 2 ] ) < 9 and mech then
8750: LD_VAR 0 4
8754: PUSH
8755: LD_INT 101
8757: EQUAL
8758: PUSH
8759: LD_VAR 0 1
8763: PPUSH
8764: LD_VAR 0 8
8768: PUSH
8769: LD_INT 1
8771: ARRAY
8772: PPUSH
8773: LD_VAR 0 8
8777: PUSH
8778: LD_INT 2
8780: ARRAY
8781: PPUSH
8782: CALL_OW 297
8786: PUSH
8787: LD_INT 9
8789: LESS
8790: AND
8791: PUSH
8792: LD_VAR 0 5
8796: AND
8797: IFFALSE 8872
// begin if GetLives ( i ) < 1000 then
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 256
8808: PUSH
8809: LD_INT 1000
8811: LESS
8812: IFFALSE 8825
// AddComRepairVehicleAndReturn ( mech ) else
8814: LD_VAR 0 5
8818: PPUSH
8819: CALL 68995 0 1
8823: GO 8872
// if GetFuel ( i ) <= 50 and cargo then
8825: LD_VAR 0 1
8829: PPUSH
8830: CALL_OW 261
8834: PUSH
8835: LD_INT 50
8837: LESSEQUAL
8838: PUSH
8839: LD_VAR 0 2
8843: AND
8844: IFFALSE 8860
// SetTag ( i , 102 ) else
8846: LD_VAR 0 1
8850: PPUSH
8851: LD_INT 102
8853: PPUSH
8854: CALL_OW 109
8858: GO 8872
// SetTag ( i , 0 ) ;
8860: LD_VAR 0 1
8864: PPUSH
8865: LD_INT 0
8867: PPUSH
8868: CALL_OW 109
// end ; end ;
8872: GO 8470
8874: POP
8875: POP
// until not tmp ;
8876: LD_VAR 0 3
8880: NOT
8881: IFFALSE 7998
// end ;
8883: PPOPN 8
8885: END
// export function GoForOil ; var i , tmp , data , chance , vehicle , needOil , heikeInConvoy , success ; begin
8886: LD_INT 0
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
8894: PPUSH
8895: PPUSH
8896: PPUSH
// SetAreaMapShow ( oilArea , 1 ) ;
8897: LD_INT 20
8899: PPUSH
8900: LD_INT 1
8902: PPUSH
8903: CALL_OW 424
// repeat wait ( 0 0$5 ) ;
8907: LD_INT 175
8909: PPUSH
8910: CALL_OW 67
// heikeInConvoy := false ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// needOil := false ;
8922: LD_ADDR_VAR 0 7
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// tmp := FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] ] ) ;
8930: LD_ADDR_VAR 0 3
8934: PUSH
8935: LD_INT 20
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_INT 34
8956: PUSH
8957: LD_INT 88
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PUSH
8964: LD_INT 34
8966: PUSH
8967: LD_INT 31
8969: PUSH
8970: EMPTY
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: LD_INT 33
8985: PUSH
8986: LD_INT 1
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: PUSH
8993: EMPTY
8994: LIST
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: ST_TO_ADDR
// for i in tmp do
9003: LD_ADDR_VAR 0 2
9007: PUSH
9008: LD_VAR 0 3
9012: PUSH
9013: FOR_IN
9014: IFFALSE 9099
// begin if IsDrivenBy ( i ) = Heike then
9016: LD_VAR 0 2
9020: PPUSH
9021: CALL_OW 311
9025: PUSH
9026: LD_EXP 34
9030: EQUAL
9031: IFFALSE 9050
// begin heikeInConvoy := true ;
9033: LD_ADDR_VAR 0 8
9037: PUSH
9038: LD_INT 1
9040: ST_TO_ADDR
// Query ( QHeikeConvoy ) ;
9041: LD_STRING QHeikeConvoy
9043: PPUSH
9044: CALL_OW 97
// break ;
9048: GO 9099
// end ; if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 10 then
9050: LD_VAR 0 2
9054: PPUSH
9055: CALL_OW 262
9059: PUSH
9060: LD_INT 1
9062: EQUAL
9063: PUSH
9064: LD_VAR 0 2
9068: PPUSH
9069: CALL_OW 261
9073: PUSH
9074: LD_INT 10
9076: LESS
9077: AND
9078: IFFALSE 9097
// begin needOil := true ;
9080: LD_ADDR_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ST_TO_ADDR
// Query ( QNeedOil ) ;
9088: LD_STRING QNeedOil
9090: PPUSH
9091: CALL_OW 97
// break ;
9095: GO 9099
// end ; end ;
9097: GO 9013
9099: POP
9100: POP
// if not needOil and not heikeInConvoy and UnitFilter ( tmp , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
9101: LD_VAR 0 7
9105: NOT
9106: PUSH
9107: LD_VAR 0 8
9111: NOT
9112: AND
9113: PUSH
9114: LD_VAR 0 3
9118: PPUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 32
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 34
9134: PUSH
9135: LD_INT 51
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: PPUSH
9147: CALL_OW 72
9151: AND
9152: IFFALSE 9169
// if Query ( QConvoy ) = 1 then
9154: LD_STRING QConvoy
9156: PPUSH
9157: CALL_OW 97
9161: PUSH
9162: LD_INT 1
9164: EQUAL
9165: IFFALSE 9169
// break ;
9167: GO 9173
// until false ;
9169: LD_INT 0
9171: IFFALSE 8907
// SetAreaMapShow ( oilArea , 0 ) ;
9173: LD_INT 20
9175: PPUSH
9176: LD_INT 0
9178: PPUSH
9179: CALL_OW 424
// data := [ ] ;
9183: LD_ADDR_VAR 0 4
9187: PUSH
9188: EMPTY
9189: ST_TO_ADDR
// chance := [ 60 , 50 , 40 , 30 ] [ Difficulty ] ;
9190: LD_ADDR_VAR 0 5
9194: PUSH
9195: LD_INT 60
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_OWVAR 67
9217: ARRAY
9218: ST_TO_ADDR
// for i in tmp do
9219: LD_ADDR_VAR 0 2
9223: PUSH
9224: LD_VAR 0 3
9228: PUSH
9229: FOR_IN
9230: IFFALSE 9327
// begin data := Join ( data , [ i , IsDrivenBy ( i ) , GetLives ( i ) , GetFuel ( i ) , ] ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 4
9241: PPUSH
9242: LD_VAR 0 2
9246: PUSH
9247: LD_VAR 0 2
9251: PPUSH
9252: CALL_OW 311
9256: PUSH
9257: LD_VAR 0 2
9261: PPUSH
9262: CALL_OW 256
9266: PUSH
9267: LD_VAR 0 2
9271: PPUSH
9272: CALL_OW 261
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PPUSH
9283: CALL 67175 0 2
9287: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
9288: LD_VAR 0 2
9292: PPUSH
9293: CALL_OW 311
9297: PPUSH
9298: CALL_OW 64
// RemoveUnit ( i ) ;
9302: LD_VAR 0 2
9306: PPUSH
9307: CALL_OW 64
// chance := chance + 20 ;
9311: LD_ADDR_VAR 0 5
9315: PUSH
9316: LD_VAR 0 5
9320: PUSH
9321: LD_INT 20
9323: PLUS
9324: ST_TO_ADDR
// end ;
9325: GO 9229
9327: POP
9328: POP
// wait ( rand ( 0 0$45 , 2 2$30 ) ) ;
9329: LD_INT 1575
9331: PPUSH
9332: LD_INT 5250
9334: PPUSH
9335: CALL_OW 12
9339: PPUSH
9340: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9344: LD_INT 35
9346: PPUSH
9347: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 261 , 71 , 12 ] ] ) and not HexInfo ( 277 , 80 ) ;
9351: LD_INT 22
9353: PUSH
9354: LD_INT 3
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: PUSH
9361: LD_INT 92
9363: PUSH
9364: LD_INT 261
9366: PUSH
9367: LD_INT 71
9369: PUSH
9370: LD_INT 12
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: NOT
9388: PUSH
9389: LD_INT 277
9391: PPUSH
9392: LD_INT 80
9394: PPUSH
9395: CALL_OW 428
9399: NOT
9400: AND
9401: IFFALSE 9344
// for i in data do
9403: LD_ADDR_VAR 0 2
9407: PUSH
9408: LD_VAR 0 4
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9815
// begin uc_nation := GetNation ( i [ 1 ] ) ;
9416: LD_ADDR_OWVAR 21
9420: PUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: CALL_OW 248
9434: ST_TO_ADDR
// uc_side := 2 ;
9435: LD_ADDR_OWVAR 20
9439: PUSH
9440: LD_INT 2
9442: ST_TO_ADDR
// PrepareVehicle ( GetChassis ( i [ 1 ] ) , GetEngine ( i [ 1 ] ) , GetControl ( i [ 1 ] ) , GetWeapon ( i [ 1 ] ) , 66 ) ;
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PPUSH
9452: CALL_OW 265
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_INT 1
9464: ARRAY
9465: PPUSH
9466: CALL_OW 262
9470: PPUSH
9471: LD_VAR 0 2
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 263
9484: PPUSH
9485: LD_VAR 0 2
9489: PUSH
9490: LD_INT 1
9492: ARRAY
9493: PPUSH
9494: CALL_OW 264
9498: PPUSH
9499: LD_INT 66
9501: PPUSH
9502: CALL 34304 0 5
// vehicle := CreateVehicle ;
9506: LD_ADDR_VAR 0 6
9510: PUSH
9511: CALL_OW 45
9515: ST_TO_ADDR
// PlaceUnitXYD ( vehicle , 277 , 80 , 4 , false ) ;
9516: LD_VAR 0 6
9520: PPUSH
9521: LD_INT 277
9523: PPUSH
9524: LD_INT 80
9526: PPUSH
9527: LD_INT 4
9529: PPUSH
9530: LD_INT 0
9532: PPUSH
9533: CALL 69315 0 5
// PlaceHumanInUnit ( i [ 2 ] , vehicle ) ;
9537: LD_VAR 0 2
9541: PUSH
9542: LD_INT 2
9544: ARRAY
9545: PPUSH
9546: LD_VAR 0 6
9550: PPUSH
9551: CALL_OW 52
// SetLives ( vehicle , i [ 3 ] ) ;
9555: LD_VAR 0 6
9559: PPUSH
9560: LD_VAR 0 2
9564: PUSH
9565: LD_INT 3
9567: ARRAY
9568: PPUSH
9569: CALL_OW 234
// success := Prob ( chance ) ;
9573: LD_ADDR_VAR 0 9
9577: PUSH
9578: LD_VAR 0 5
9582: PPUSH
9583: CALL_OW 13
9587: ST_TO_ADDR
// if success then
9588: LD_VAR 0 9
9592: IFFALSE 9674
// begin if GetEngine ( vehicle ) = engine_combustion then
9594: LD_VAR 0 6
9598: PPUSH
9599: CALL_OW 262
9603: PUSH
9604: LD_INT 1
9606: EQUAL
9607: IFFALSE 9621
// SetFuel ( vehicle , 90 ) ;
9609: LD_VAR 0 6
9613: PPUSH
9614: LD_INT 90
9616: PPUSH
9617: CALL_OW 240
// if GetWeapon ( vehicle ) in [ ar_cargo_bay , ru_cargo_bay ] then
9621: LD_VAR 0 6
9625: PPUSH
9626: CALL_OW 264
9630: PUSH
9631: LD_INT 32
9633: PUSH
9634: LD_INT 51
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: IFFALSE 9672
// begin collectedOil := collectedOil + 100 ;
9643: LD_ADDR_EXP 33
9647: PUSH
9648: LD_EXP 33
9652: PUSH
9653: LD_INT 100
9655: PLUS
9656: ST_TO_ADDR
// SetCargo ( vehicle , mat_oil , 100 ) ;
9657: LD_VAR 0 6
9661: PPUSH
9662: LD_INT 2
9664: PPUSH
9665: LD_INT 100
9667: PPUSH
9668: CALL_OW 290
// end ; end else
9672: GO 9746
// begin if i [ 3 ] > 333 then
9674: LD_VAR 0 2
9678: PUSH
9679: LD_INT 3
9681: ARRAY
9682: PUSH
9683: LD_INT 333
9685: GREATER
9686: IFFALSE 9700
// SetLives ( vehicle , 333 ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_INT 333
9695: PPUSH
9696: CALL_OW 234
// if i [ 4 ] > 20 then
9700: LD_VAR 0 2
9704: PUSH
9705: LD_INT 4
9707: ARRAY
9708: PUSH
9709: LD_INT 20
9711: GREATER
9712: IFFALSE 9728
// SetFuel ( vehicle , 20 ) else
9714: LD_VAR 0 6
9718: PPUSH
9719: LD_INT 20
9721: PPUSH
9722: CALL_OW 240
9726: GO 9746
// SetFuel ( vehicle , i [ 4 ] ) ;
9728: LD_VAR 0 6
9732: PPUSH
9733: LD_VAR 0 2
9737: PUSH
9738: LD_INT 4
9740: ARRAY
9741: PPUSH
9742: CALL_OW 240
// end ; ComMoveXY ( vehicle , 250 , 119 ) ;
9746: LD_VAR 0 6
9750: PPUSH
9751: LD_INT 250
9753: PPUSH
9754: LD_INT 119
9756: PPUSH
9757: CALL_OW 111
// AddComMoveXY ( vehicle , 211 , 80 ) ;
9761: LD_VAR 0 6
9765: PPUSH
9766: LD_INT 211
9768: PPUSH
9769: LD_INT 80
9771: PPUSH
9772: CALL_OW 171
// repeat wait ( 0 0$5 ) ;
9776: LD_INT 175
9778: PPUSH
9779: CALL_OW 67
// until not FilterUnitsInArea ( oilArea , [ [ f_side , 2 ] , [ f_placed ] ] ) ;
9783: LD_INT 20
9785: PPUSH
9786: LD_INT 22
9788: PUSH
9789: LD_INT 2
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 52
9798: PUSH
9799: EMPTY
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PPUSH
9806: CALL_OW 70
9810: NOT
9811: IFFALSE 9776
// end ;
9813: GO 9413
9815: POP
9816: POP
// wait ( 0 0$10 ) ;
9817: LD_INT 350
9819: PPUSH
9820: CALL_OW 67
// GoForOil ;
9824: CALL 8886 0 0
// end ;
9828: LD_VAR 0 1
9832: RET
// every 0 0$2 trigger FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do var i ;
9833: LD_INT 22
9835: PPUSH
9836: LD_INT 21
9838: PUSH
9839: LD_INT 2
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 5
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 58
9858: PUSH
9859: EMPTY
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: PPUSH
9867: CALL_OW 70
9871: IFFALSE 9940
9873: GO 9875
9875: DISABLE
9876: LD_INT 0
9878: PPUSH
// begin enable ;
9879: ENABLE
// for i in FilterUnitsInArea ( southPassageArea , [ [ f_type , unit_vehicle ] , [ f_side , 5 ] , [ f_empty ] ] ) do
9880: LD_ADDR_VAR 0 1
9884: PUSH
9885: LD_INT 22
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 2
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 22
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: EMPTY
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 58
9910: PUSH
9911: EMPTY
9912: LIST
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 70
9923: PUSH
9924: FOR_IN
9925: IFFALSE 9938
// KillUnit ( i ) ;
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 66
9936: GO 9924
9938: POP
9939: POP
// end ; end_of_file
9940: PPOPN 1
9942: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
9943: LD_INT 0
9945: PPUSH
// uc_side := side ;
9946: LD_ADDR_OWVAR 20
9950: PUSH
9951: LD_VAR 0 1
9955: ST_TO_ADDR
// uc_nation := nation ;
9956: LD_ADDR_OWVAR 21
9960: PUSH
9961: LD_VAR 0 2
9965: ST_TO_ADDR
// vc_chassis := chassis ;
9966: LD_ADDR_OWVAR 37
9970: PUSH
9971: LD_VAR 0 3
9975: ST_TO_ADDR
// vc_engine := engine ;
9976: LD_ADDR_OWVAR 39
9980: PUSH
9981: LD_VAR 0 4
9985: ST_TO_ADDR
// vc_control := control ;
9986: LD_ADDR_OWVAR 38
9990: PUSH
9991: LD_VAR 0 5
9995: ST_TO_ADDR
// vc_weapon := weapon ;
9996: LD_ADDR_OWVAR 40
10000: PUSH
10001: LD_VAR 0 6
10005: ST_TO_ADDR
// vc_fuel_battery := fuel ;
10006: LD_ADDR_OWVAR 41
10010: PUSH
10011: LD_VAR 0 7
10015: ST_TO_ADDR
// result := CreateVehicle ;
10016: LD_ADDR_VAR 0 8
10020: PUSH
10021: CALL_OW 45
10025: ST_TO_ADDR
// end ;
10026: LD_VAR 0 8
10030: RET
// export function SayX ( units , ident ) ; var i ; begin
10031: LD_INT 0
10033: PPUSH
10034: PPUSH
// result := false ;
10035: LD_ADDR_VAR 0 3
10039: PUSH
10040: LD_INT 0
10042: ST_TO_ADDR
// if not units then
10043: LD_VAR 0 1
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10106
// for i in units do
10052: LD_ADDR_VAR 0 4
10056: PUSH
10057: LD_VAR 0 1
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10104
// if IsOk ( i ) then
10065: LD_VAR 0 4
10069: PPUSH
10070: CALL_OW 302
10074: IFFALSE 10102
// begin Say ( i , ident ) ;
10076: LD_VAR 0 4
10080: PPUSH
10081: LD_VAR 0 2
10085: PPUSH
10086: CALL_OW 88
// result := i ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_VAR 0 4
10099: ST_TO_ADDR
// break ;
10100: GO 10104
// end ;
10102: GO 10062
10104: POP
10105: POP
// end ;
10106: LD_VAR 0 3
10110: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
10111: LD_INT 0
10113: PPUSH
10114: PPUSH
// InitUc ;
10115: CALL_OW 18
// InitHc ;
10119: CALL_OW 19
// uc_side := 0 ;
10123: LD_ADDR_OWVAR 20
10127: PUSH
10128: LD_INT 0
10130: ST_TO_ADDR
// uc_nation := 0 ;
10131: LD_ADDR_OWVAR 21
10135: PUSH
10136: LD_INT 0
10138: ST_TO_ADDR
// for i = 1 to amount do
10139: LD_ADDR_VAR 0 4
10143: PUSH
10144: DOUBLE
10145: LD_INT 1
10147: DEC
10148: ST_TO_ADDR
10149: LD_VAR 0 2
10153: PUSH
10154: FOR_TO
10155: IFFALSE 10237
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
10157: LD_ADDR_OWVAR 29
10161: PUSH
10162: LD_INT 9
10164: PPUSH
10165: LD_INT 12
10167: PPUSH
10168: CALL_OW 12
10172: PUSH
10173: LD_INT 9
10175: PPUSH
10176: LD_INT 12
10178: PPUSH
10179: CALL_OW 12
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
10188: LD_ADDR_OWVAR 35
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 12
10204: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
10205: LD_INT 0
10207: PPUSH
10208: LD_INT 12
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
10218: CALL_OW 44
10222: PPUSH
10223: LD_VAR 0 1
10227: PPUSH
10228: LD_INT 0
10230: PPUSH
10231: CALL_OW 49
// end ;
10235: GO 10154
10237: POP
10238: POP
// InitHc ;
10239: CALL_OW 19
// end ;
10243: LD_VAR 0 3
10247: RET
// export function CreateNature ( forest , swamp ) ; var i ; begin
10248: LD_INT 0
10250: PPUSH
10251: PPUSH
// uc_side := 0 ;
10252: LD_ADDR_OWVAR 20
10256: PUSH
10257: LD_INT 0
10259: ST_TO_ADDR
// uc_nation := 0 ;
10260: LD_ADDR_OWVAR 21
10264: PUSH
10265: LD_INT 0
10267: ST_TO_ADDR
// SpawnApeman ( northApeman , [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) ;
10268: LD_INT 7
10270: PPUSH
10271: LD_INT 6
10273: PUSH
10274: LD_INT 5
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 3
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_OWVAR 67
10293: ARRAY
10294: PPUSH
10295: CALL 10111 0 2
// for i = 1 to 2 do
10299: LD_ADDR_VAR 0 4
10303: PUSH
10304: DOUBLE
10305: LD_INT 1
10307: DEC
10308: ST_TO_ADDR
10309: LD_INT 2
10311: PUSH
10312: FOR_TO
10313: IFFALSE 10350
// begin vc_chassis := class_mastodont ;
10315: LD_ADDR_OWVAR 37
10319: PUSH
10320: LD_INT 31
10322: ST_TO_ADDR
// vc_control := control_rider ;
10323: LD_ADDR_OWVAR 38
10327: PUSH
10328: LD_INT 4
10330: ST_TO_ADDR
// PlaceUnitInArea ( CreateVehicle , forest , false ) ;
10331: CALL_OW 45
10335: PPUSH
10336: LD_VAR 0 1
10340: PPUSH
10341: LD_INT 0
10343: PPUSH
10344: CALL 66080 0 3
// end ;
10348: GO 10312
10350: POP
10351: POP
// InitHc ;
10352: CALL_OW 19
// for i := 1 to 3 do
10356: LD_ADDR_VAR 0 4
10360: PUSH
10361: DOUBLE
10362: LD_INT 1
10364: DEC
10365: ST_TO_ADDR
10366: LD_INT 3
10368: PUSH
10369: FOR_TO
10370: IFFALSE 10407
// begin hc_class := class_horse ;
10372: LD_ADDR_OWVAR 28
10376: PUSH
10377: LD_INT 21
10379: ST_TO_ADDR
// hc_gallery :=  ;
10380: LD_ADDR_OWVAR 33
10384: PUSH
10385: LD_STRING 
10387: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10388: CALL_OW 44
10392: PPUSH
10393: LD_VAR 0 1
10397: PPUSH
10398: LD_INT 0
10400: PPUSH
10401: CALL_OW 49
// end ;
10405: GO 10369
10407: POP
10408: POP
// InitHc ;
10409: CALL_OW 19
// for i = 1 to 3 do
10413: LD_ADDR_VAR 0 4
10417: PUSH
10418: DOUBLE
10419: LD_INT 1
10421: DEC
10422: ST_TO_ADDR
10423: LD_INT 3
10425: PUSH
10426: FOR_TO
10427: IFFALSE 10481
// begin hc_class = class_tiger ;
10429: LD_ADDR_OWVAR 28
10433: PUSH
10434: LD_INT 14
10436: ST_TO_ADDR
// hc_gallery =  ;
10437: LD_ADDR_OWVAR 33
10441: PUSH
10442: LD_STRING 
10444: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
10445: LD_ADDR_OWVAR 35
10449: PUSH
10450: LD_INT 7
10452: NEG
10453: PPUSH
10454: LD_INT 7
10456: PPUSH
10457: CALL_OW 12
10461: ST_TO_ADDR
// PlaceUnitInArea ( CreateHuman , forest , false ) ;
10462: CALL_OW 44
10466: PPUSH
10467: LD_VAR 0 1
10471: PPUSH
10472: LD_INT 0
10474: PPUSH
10475: CALL 66080 0 3
// end ;
10479: GO 10426
10481: POP
10482: POP
// InitHc ;
10483: CALL_OW 19
// for i := 1 to 4 do
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_INT 4
10499: PUSH
10500: FOR_TO
10501: IFFALSE 10538
// begin hc_class := class_phororhacos ;
10503: LD_ADDR_OWVAR 28
10507: PUSH
10508: LD_INT 18
10510: ST_TO_ADDR
// hc_gallery :=  ;
10511: LD_ADDR_OWVAR 33
10515: PUSH
10516: LD_STRING 
10518: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10519: CALL_OW 44
10523: PPUSH
10524: LD_VAR 0 1
10528: PPUSH
10529: LD_INT 0
10531: PPUSH
10532: CALL_OW 49
// end ;
10536: GO 10500
10538: POP
10539: POP
// InitHc ;
10540: CALL_OW 19
// for i := 1 to 4 do
10544: LD_ADDR_VAR 0 4
10548: PUSH
10549: DOUBLE
10550: LD_INT 1
10552: DEC
10553: ST_TO_ADDR
10554: LD_INT 4
10556: PUSH
10557: FOR_TO
10558: IFFALSE 10595
// begin hc_class := class_baggie ;
10560: LD_ADDR_OWVAR 28
10564: PUSH
10565: LD_INT 13
10567: ST_TO_ADDR
// hc_gallery :=  ;
10568: LD_ADDR_OWVAR 33
10572: PUSH
10573: LD_STRING 
10575: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
10576: CALL_OW 44
10580: PPUSH
10581: LD_VAR 0 1
10585: PPUSH
10586: LD_INT 0
10588: PPUSH
10589: CALL_OW 49
// end ;
10593: GO 10557
10595: POP
10596: POP
// InitHc ;
10597: CALL_OW 19
// for i := 1 to 7 do
10601: LD_ADDR_VAR 0 4
10605: PUSH
10606: DOUBLE
10607: LD_INT 1
10609: DEC
10610: ST_TO_ADDR
10611: LD_INT 7
10613: PUSH
10614: FOR_TO
10615: IFFALSE 10652
// begin hc_class := class_frog ;
10617: LD_ADDR_OWVAR 28
10621: PUSH
10622: LD_INT 19
10624: ST_TO_ADDR
// hc_gallery :=  ;
10625: LD_ADDR_OWVAR 33
10629: PUSH
10630: LD_STRING 
10632: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swamp , false ) ;
10633: CALL_OW 44
10637: PPUSH
10638: LD_VAR 0 2
10642: PPUSH
10643: LD_INT 0
10645: PPUSH
10646: CALL_OW 49
// end ;
10650: GO 10614
10652: POP
10653: POP
// end ;
10654: LD_VAR 0 3
10658: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
10659: LD_INT 0
10661: PPUSH
10662: PPUSH
10663: PPUSH
// if not observer or not unit then
10664: LD_VAR 0 1
10668: NOT
10669: PUSH
10670: LD_VAR 0 2
10674: NOT
10675: OR
10676: IFFALSE 10680
// exit ;
10678: GO 10728
// if not See ( GetSide ( observer ) , unit ) then
10680: LD_VAR 0 1
10684: PPUSH
10685: CALL_OW 255
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 292
10699: NOT
10700: IFFALSE 10704
// exit ;
10702: GO 10728
// result := GetDistUnits ( observer , unit ) < 12 ;
10704: LD_ADDR_VAR 0 3
10708: PUSH
10709: LD_VAR 0 1
10713: PPUSH
10714: LD_VAR 0 2
10718: PPUSH
10719: CALL_OW 296
10723: PUSH
10724: LD_INT 12
10726: LESS
10727: ST_TO_ADDR
// end ;
10728: LD_VAR 0 3
10732: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
10733: LD_INT 0
10735: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
10736: LD_VAR 0 2
10740: PUSH
10741: LD_INT 1
10743: ARRAY
10744: PPUSH
10745: LD_VAR 0 2
10749: PUSH
10750: LD_INT 2
10752: ARRAY
10753: PPUSH
10754: CALL_OW 488
10758: PUSH
10759: LD_VAR 0 2
10763: PUSH
10764: LD_INT 1
10766: ARRAY
10767: PPUSH
10768: LD_VAR 0 2
10772: PUSH
10773: LD_INT 2
10775: ARRAY
10776: PPUSH
10777: CALL_OW 428
10781: PUSH
10782: LD_INT 0
10784: EQUAL
10785: AND
10786: IFFALSE 10820
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
10788: LD_VAR 0 1
10792: PPUSH
10793: LD_VAR 0 2
10797: PUSH
10798: LD_INT 1
10800: ARRAY
10801: PPUSH
10802: LD_VAR 0 2
10806: PUSH
10807: LD_INT 2
10809: ARRAY
10810: PPUSH
10811: LD_VAR 0 3
10815: PPUSH
10816: CALL_OW 48
// end ;
10820: LD_VAR 0 4
10824: RET
// export function RevealFogOnXY ( x , y , side , range ) ; begin
10825: LD_INT 0
10827: PPUSH
// PlaceSeeing ( x , y , side , range ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_VAR 0 2
10837: PPUSH
10838: LD_VAR 0 3
10842: PPUSH
10843: LD_VAR 0 4
10847: PPUSH
10848: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
10852: LD_VAR 0 1
10856: PPUSH
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_VAR 0 3
10866: PPUSH
10867: CALL_OW 331
// end ;
10871: LD_VAR 0 5
10875: RET
// export function SayRandom ( units , menDialog , womenDialog ) ; begin
10876: LD_INT 0
10878: PPUSH
// if not units then
10879: LD_VAR 0 1
10883: NOT
10884: IFFALSE 10888
// exit ;
10886: GO 10971
// result := true ;
10888: LD_ADDR_VAR 0 4
10892: PUSH
10893: LD_INT 1
10895: ST_TO_ADDR
// if not Say ( UnitFilter ( units , [ f_sex , sex_male ] ) [ 1 ] , menDialog ) then
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 26
10903: PUSH
10904: LD_INT 1
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PPUSH
10911: CALL_OW 72
10915: PUSH
10916: LD_INT 1
10918: ARRAY
10919: PPUSH
10920: LD_VAR 0 2
10924: PPUSH
10925: CALL_OW 88
10929: NOT
10930: IFFALSE 10971
// result := Say ( UnitFilter ( units , [ f_sex , sex_female ] ) [ 1 ] , womenDialog ) ;
10932: LD_ADDR_VAR 0 4
10936: PUSH
10937: LD_VAR 0 1
10941: PPUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: PUSH
10957: LD_INT 1
10959: ARRAY
10960: PPUSH
10961: LD_VAR 0 3
10965: PPUSH
10966: CALL_OW 88
10970: ST_TO_ADDR
// end ;
10971: LD_VAR 0 4
10975: RET
// export function SeeGroup ( side , group ) ; var i ; begin
10976: LD_INT 0
10978: PPUSH
10979: PPUSH
// if not group then
10980: LD_VAR 0 2
10984: NOT
10985: IFFALSE 10989
// exit ;
10987: GO 11034
// for i in group do
10989: LD_ADDR_VAR 0 4
10993: PUSH
10994: LD_VAR 0 2
10998: PUSH
10999: FOR_IN
11000: IFFALSE 11032
// if See ( side , i ) then
11002: LD_VAR 0 1
11006: PPUSH
11007: LD_VAR 0 4
11011: PPUSH
11012: CALL_OW 292
11016: IFFALSE 11030
// begin result := true ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// exit ;
11026: POP
11027: POP
11028: GO 11034
// end ;
11030: GO 10999
11032: POP
11033: POP
// end ; end_of_file
11034: LD_VAR 0 3
11038: RET
// export Morozov , Gaidar ; export ruBlockadeTank , ruOutsiders , ruBlockadeSquad , ruHelperBaseSquad , ruMainBaseSquad , ruSpecialVehicleGroup , ruAttackers , waveStrength ; export function PrepareRussian ; var i , j , b , un , veh , tmp ; begin
11039: LD_INT 0
11041: PPUSH
11042: PPUSH
11043: PPUSH
11044: PPUSH
11045: PPUSH
11046: PPUSH
11047: PPUSH
// uc_side := 3 ;
11048: LD_ADDR_OWVAR 20
11052: PUSH
11053: LD_INT 3
11055: ST_TO_ADDR
// uc_nation := 3 ;
11056: LD_ADDR_OWVAR 21
11060: PUSH
11061: LD_INT 3
11063: ST_TO_ADDR
// Morozov := NewCharacter ( Morozov ) ;
11064: LD_ADDR_EXP 53
11068: PUSH
11069: LD_STRING Morozov
11071: PPUSH
11072: CALL_OW 25
11076: ST_TO_ADDR
// PlaceHumanInUnit ( Morozov , ruLenin ) ;
11077: LD_EXP 53
11081: PPUSH
11082: LD_INT 52
11084: PPUSH
11085: CALL_OW 52
// if not gaidarKilled then
11089: LD_EXP 7
11093: NOT
11094: IFFALSE 11127
// begin Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
11096: LD_ADDR_EXP 54
11100: PUSH
11101: LD_STRING Gaydar
11103: PPUSH
11104: LD_INT 0
11106: PPUSH
11107: LD_STRING 
11109: PPUSH
11110: CALL 29443 0 3
11114: ST_TO_ADDR
// PlaceHumanInUnit ( Gaidar , ruLenin ) ;
11115: LD_EXP 54
11119: PPUSH
11120: LD_INT 52
11122: PPUSH
11123: CALL_OW 52
// end ; SetBName ( ruLenin , lenin ) ;
11127: LD_INT 52
11129: PPUSH
11130: LD_STRING lenin
11132: PPUSH
11133: CALL_OW 500
// ruOutsiders := [ ] ;
11137: LD_ADDR_EXP 56
11141: PUSH
11142: EMPTY
11143: ST_TO_ADDR
// ruHelperBaseSquad := [ ] ;
11144: LD_ADDR_EXP 58
11148: PUSH
11149: EMPTY
11150: ST_TO_ADDR
// ruMainBaseSquad := [ ] ;
11151: LD_ADDR_EXP 59
11155: PUSH
11156: EMPTY
11157: ST_TO_ADDR
// ruSpecialVehicleGroup := [ ] ;
11158: LD_ADDR_EXP 60
11162: PUSH
11163: EMPTY
11164: ST_TO_ADDR
// ruAttackers := [ ] ;
11165: LD_ADDR_EXP 61
11169: PUSH
11170: EMPTY
11171: ST_TO_ADDR
// waveStrength := 0 ;
11172: LD_ADDR_EXP 62
11176: PUSH
11177: LD_INT 0
11179: ST_TO_ADDR
// if not gaidarKilled then
11180: LD_EXP 7
11184: NOT
11185: IFFALSE 11195
// waveStrength := 2 ;
11187: LD_ADDR_EXP 62
11191: PUSH
11192: LD_INT 2
11194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: LD_INT 22
11202: PUSH
11203: LD_INT 3
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: PUSH
11210: LD_INT 21
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PPUSH
11224: CALL_OW 69
11228: ST_TO_ADDR
// for i in tmp do
11229: LD_ADDR_VAR 0 2
11233: PUSH
11234: LD_VAR 0 7
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11277
// SetBLevel ( i , [ 5 , 6 , 7 , 8 ] [ Difficulty ] ) ;
11242: LD_VAR 0 2
11246: PPUSH
11247: LD_INT 5
11249: PUSH
11250: LD_INT 6
11252: PUSH
11253: LD_INT 7
11255: PUSH
11256: LD_INT 8
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: LD_OWVAR 67
11269: ARRAY
11270: PPUSH
11271: CALL_OW 241
11275: GO 11239
11277: POP
11278: POP
// for i := 1 to 3 do
11279: LD_ADDR_VAR 0 2
11283: PUSH
11284: DOUBLE
11285: LD_INT 1
11287: DEC
11288: ST_TO_ADDR
11289: LD_INT 3
11291: PUSH
11292: FOR_TO
11293: IFFALSE 11331
// begin PrepareHuman ( false , 1 , 0 ) ;
11295: LD_INT 0
11297: PPUSH
11298: LD_INT 1
11300: PPUSH
11301: LD_INT 0
11303: PPUSH
11304: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 75 , 49 , 3 , false ) ;
11308: CALL_OW 44
11312: PPUSH
11313: LD_INT 75
11315: PPUSH
11316: LD_INT 49
11318: PPUSH
11319: LD_INT 3
11321: PPUSH
11322: LD_INT 0
11324: PPUSH
11325: CALL_OW 50
// end ;
11329: GO 11292
11331: POP
11332: POP
// for i := 1 to 4 do
11333: LD_ADDR_VAR 0 2
11337: PUSH
11338: DOUBLE
11339: LD_INT 1
11341: DEC
11342: ST_TO_ADDR
11343: LD_INT 4
11345: PUSH
11346: FOR_TO
11347: IFFALSE 11393
// begin PrepareHuman ( false , rand ( 1 , 2 ) , 0 ) ;
11349: LD_INT 0
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: LD_INT 2
11357: PPUSH
11358: CALL_OW 12
11362: PPUSH
11363: LD_INT 0
11365: PPUSH
11366: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 330 , 231 , 5 , false ) ;
11370: CALL_OW 44
11374: PPUSH
11375: LD_INT 330
11377: PPUSH
11378: LD_INT 231
11380: PPUSH
11381: LD_INT 5
11383: PPUSH
11384: LD_INT 0
11386: PPUSH
11387: CALL_OW 50
// end ;
11391: GO 11346
11393: POP
11394: POP
// hc_class := 1 ;
11395: LD_ADDR_OWVAR 28
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 324 , 219 ) ) ;
11403: CALL_OW 44
11407: PPUSH
11408: LD_INT 324
11410: PPUSH
11411: LD_INT 219
11413: PPUSH
11414: CALL_OW 428
11418: PPUSH
11419: CALL_OW 52
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 316 , 223 ) ) ;
11423: CALL_OW 44
11427: PPUSH
11428: LD_INT 316
11430: PPUSH
11431: LD_INT 223
11433: PPUSH
11434: CALL_OW 428
11438: PPUSH
11439: CALL_OW 52
// tmp := [ GetBase ( HexInfo ( 172 , 198 ) ) , GetBase ( HexInfo ( 189 , 156 ) ) , GetBase ( HexInfo ( 341 , 232 ) ) ] ;
11443: LD_ADDR_VAR 0 7
11447: PUSH
11448: LD_INT 172
11450: PPUSH
11451: LD_INT 198
11453: PPUSH
11454: CALL_OW 428
11458: PPUSH
11459: CALL_OW 274
11463: PUSH
11464: LD_INT 189
11466: PPUSH
11467: LD_INT 156
11469: PPUSH
11470: CALL_OW 428
11474: PPUSH
11475: CALL_OW 274
11479: PUSH
11480: LD_INT 341
11482: PPUSH
11483: LD_INT 232
11485: PPUSH
11486: CALL_OW 428
11490: PPUSH
11491: CALL_OW 274
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: ST_TO_ADDR
// for i in tmp do
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 7
11510: PUSH
11511: FOR_IN
11512: IFFALSE 11546
// begin SetResourceType ( i , mat_cans , 200 ) ;
11514: LD_VAR 0 2
11518: PPUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_INT 200
11524: PPUSH
11525: CALL_OW 277
// SetResourceType ( i , mat_oil , 300 ) ;
11529: LD_VAR 0 2
11533: PPUSH
11534: LD_INT 2
11536: PPUSH
11537: LD_INT 300
11539: PPUSH
11540: CALL_OW 277
// end ;
11544: GO 11511
11546: POP
11547: POP
// tmp := [ [ 177 , 114 ] , [ 138 , 96 ] ] ;
11548: LD_ADDR_VAR 0 7
11552: PUSH
11553: LD_INT 177
11555: PUSH
11556: LD_INT 114
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 138
11565: PUSH
11566: LD_INT 96
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: ST_TO_ADDR
// for i := 1 to tmp do
11577: LD_ADDR_VAR 0 2
11581: PUSH
11582: DOUBLE
11583: LD_INT 1
11585: DEC
11586: ST_TO_ADDR
11587: LD_VAR 0 7
11591: PUSH
11592: FOR_TO
11593: IFFALSE 11676
// begin PrepareHuman ( false , class_bazooker , 6 ) ;
11595: LD_INT 0
11597: PPUSH
11598: LD_INT 9
11600: PPUSH
11601: LD_INT 6
11603: PPUSH
11604: CALL_OW 380
// un := CreateHuman ;
11608: LD_ADDR_VAR 0 5
11612: PUSH
11613: CALL_OW 44
11617: ST_TO_ADDR
// SetDir ( un , 2 ) ;
11618: LD_VAR 0 5
11622: PPUSH
11623: LD_INT 2
11625: PPUSH
11626: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
11630: LD_VAR 0 5
11634: PPUSH
11635: LD_VAR 0 7
11639: PUSH
11640: LD_VAR 0 2
11644: ARRAY
11645: PUSH
11646: LD_INT 1
11648: ARRAY
11649: PPUSH
11650: LD_VAR 0 7
11654: PUSH
11655: LD_VAR 0 2
11659: ARRAY
11660: PUSH
11661: LD_INT 2
11663: ARRAY
11664: PPUSH
11665: CALL_OW 428
11669: PPUSH
11670: CALL_OW 52
// end ;
11674: GO 11592
11676: POP
11677: POP
// tmp := [ [ 198 , 158 ] , [ 203 , 166 ] , [ 181 , 209 ] , [ 178 , 196 ] , [ 181 , 212 ] ] ;
11678: LD_ADDR_VAR 0 7
11682: PUSH
11683: LD_INT 198
11685: PUSH
11686: LD_INT 158
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 203
11695: PUSH
11696: LD_INT 166
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 181
11705: PUSH
11706: LD_INT 209
11708: PUSH
11709: EMPTY
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 178
11715: PUSH
11716: LD_INT 196
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 181
11725: PUSH
11726: LD_INT 212
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: ST_TO_ADDR
// for i := 1 to tmp do
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: DOUBLE
11746: LD_INT 1
11748: DEC
11749: ST_TO_ADDR
11750: LD_VAR 0 7
11754: PUSH
11755: FOR_TO
11756: IFFALSE 11877
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
11758: LD_INT 0
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: LD_INT 4
11766: PUSH
11767: LD_INT 5
11769: PUSH
11770: LD_INT 6
11772: PUSH
11773: LD_INT 7
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_OWVAR 67
11786: ARRAY
11787: PPUSH
11788: CALL_OW 380
// un := CreateHuman ;
11792: LD_ADDR_VAR 0 5
11796: PUSH
11797: CALL_OW 44
11801: ST_TO_ADDR
// b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
11802: LD_ADDR_VAR 0 4
11806: PUSH
11807: LD_VAR 0 7
11811: PUSH
11812: LD_VAR 0 2
11816: ARRAY
11817: PUSH
11818: LD_INT 1
11820: ARRAY
11821: PPUSH
11822: LD_VAR 0 7
11826: PUSH
11827: LD_VAR 0 2
11831: ARRAY
11832: PUSH
11833: LD_INT 2
11835: ARRAY
11836: PPUSH
11837: CALL_OW 428
11841: ST_TO_ADDR
// SetDir ( un , ReverseDir ( b ) ) ;
11842: LD_VAR 0 5
11846: PPUSH
11847: LD_VAR 0 4
11851: PPUSH
11852: CALL 62402 0 1
11856: PPUSH
11857: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
11861: LD_VAR 0 5
11865: PPUSH
11866: LD_VAR 0 4
11870: PPUSH
11871: CALL_OW 52
// end ;
11875: GO 11755
11877: POP
11878: POP
// for i := 1 to 3 do
11879: LD_ADDR_VAR 0 2
11883: PUSH
11884: DOUBLE
11885: LD_INT 1
11887: DEC
11888: ST_TO_ADDR
11889: LD_INT 3
11891: PUSH
11892: FOR_TO
11893: IFFALSE 11948
// begin InitHc ;
11895: CALL_OW 19
// uc_nation := 0 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 16
11914: ST_TO_ADDR
// un := CreateHuman ;
11915: LD_ADDR_VAR 0 5
11919: PUSH
11920: CALL_OW 44
11924: ST_TO_ADDR
// PlaceUnitXYR ( un , 194 , 164 , 6 , false ) ;
11925: LD_VAR 0 5
11929: PPUSH
11930: LD_INT 194
11932: PPUSH
11933: LD_INT 164
11935: PPUSH
11936: LD_INT 6
11938: PPUSH
11939: LD_INT 0
11941: PPUSH
11942: CALL_OW 50
// end ;
11946: GO 11892
11948: POP
11949: POP
// uc_nation := 3 ;
11950: LD_ADDR_OWVAR 21
11954: PUSH
11955: LD_INT 3
11957: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 10 ) ;
11958: LD_INT 24
11960: PPUSH
11961: LD_INT 1
11963: PPUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_INT 44
11969: PPUSH
11970: LD_INT 10
11972: PPUSH
11973: CALL 34304 0 5
// un := CreateVehicle ;
11977: LD_ADDR_VAR 0 5
11981: PUSH
11982: CALL_OW 45
11986: ST_TO_ADDR
// PlaceUnitXYD ( un , 199 , 166 , 1 , false ) ;
11987: LD_VAR 0 5
11991: PPUSH
11992: LD_INT 199
11994: PPUSH
11995: LD_INT 166
11997: PPUSH
11998: LD_INT 1
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL 69315 0 5
// ComHold ( un ) ;
12008: LD_VAR 0 5
12012: PPUSH
12013: CALL_OW 140
// PrepareHuman ( false , 3 , 4 ) ;
12017: LD_INT 0
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 4
12025: PPUSH
12026: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12030: CALL_OW 44
12034: PPUSH
12035: LD_VAR 0 5
12039: PPUSH
12040: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12044: LD_INT 24
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: LD_INT 45
12055: PPUSH
12056: LD_INT 10
12058: PPUSH
12059: CALL 34304 0 5
// un := CreateVehicle ;
12063: LD_ADDR_VAR 0 5
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// PlaceUnitXYD ( un , 129 , 93 , 1 , false ) ;
12073: LD_VAR 0 5
12077: PPUSH
12078: LD_INT 129
12080: PPUSH
12081: LD_INT 93
12083: PPUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 0
12089: PPUSH
12090: CALL 69315 0 5
// ComHold ( un ) ;
12094: LD_VAR 0 5
12098: PPUSH
12099: CALL_OW 140
// if Difficulty > 1 then
12103: LD_OWVAR 67
12107: PUSH
12108: LD_INT 1
12110: GREATER
12111: IFFALSE 12199
// begin PrepareHuman ( false , 3 , 4 ) ;
12113: LD_INT 0
12115: PPUSH
12116: LD_INT 3
12118: PPUSH
12119: LD_INT 4
12121: PPUSH
12122: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12126: CALL_OW 44
12130: PPUSH
12131: LD_VAR 0 5
12135: PPUSH
12136: CALL_OW 52
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_rocket_launcher , 10 ) ;
12140: LD_INT 24
12142: PPUSH
12143: LD_INT 1
12145: PPUSH
12146: LD_INT 1
12148: PPUSH
12149: LD_INT 45
12151: PPUSH
12152: LD_INT 10
12154: PPUSH
12155: CALL 34304 0 5
// un := CreateVehicle ;
12159: LD_ADDR_VAR 0 5
12163: PUSH
12164: CALL_OW 45
12168: ST_TO_ADDR
// PlaceUnitXYD ( un , 200 , 173 , 1 , false ) ;
12169: LD_VAR 0 5
12173: PPUSH
12174: LD_INT 200
12176: PPUSH
12177: LD_INT 173
12179: PPUSH
12180: LD_INT 1
12182: PPUSH
12183: LD_INT 0
12185: PPUSH
12186: CALL 69315 0 5
// ComHold ( un ) ;
12190: LD_VAR 0 5
12194: PPUSH
12195: CALL_OW 140
// end ; PrepareHuman ( false , 3 , 4 ) ;
12199: LD_INT 0
12201: PPUSH
12202: LD_INT 3
12204: PPUSH
12205: LD_INT 4
12207: PPUSH
12208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
12212: CALL_OW 44
12216: PPUSH
12217: LD_VAR 0 5
12221: PPUSH
12222: CALL_OW 52
// bc_type := b_armoury ;
12226: LD_ADDR_OWVAR 42
12230: PUSH
12231: LD_INT 4
12233: ST_TO_ADDR
// if Difficulty > 1 then
12234: LD_OWVAR 67
12238: PUSH
12239: LD_INT 1
12241: GREATER
12242: IFFALSE 12252
// bc_type := b_barracks ;
12244: LD_ADDR_OWVAR 42
12248: PUSH
12249: LD_INT 5
12251: ST_TO_ADDR
// bc_level := 6 ;
12252: LD_ADDR_OWVAR 43
12256: PUSH
12257: LD_INT 6
12259: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 120 , 100 , 5 ) ;
12260: LD_INT 120
12262: PPUSH
12263: LD_INT 100
12265: PPUSH
12266: LD_INT 5
12268: PPUSH
12269: CALL_OW 47
// for i := 1 to [ 3 , 3 , 4 , 4 ] [ Difficulty ] do
12273: LD_ADDR_VAR 0 2
12277: PUSH
12278: DOUBLE
12279: LD_INT 1
12281: DEC
12282: ST_TO_ADDR
12283: LD_INT 3
12285: PUSH
12286: LD_INT 3
12288: PUSH
12289: LD_INT 4
12291: PUSH
12292: LD_INT 4
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_OWVAR 67
12305: ARRAY
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12366
// begin PrepareHuman ( false , [ class_soldier , class_soldier , class_bazooker , class_bazooker ] [ Difficulty ] , 5 ) ;
12310: LD_INT 0
12312: PPUSH
12313: LD_INT 1
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 9
12321: PUSH
12322: LD_INT 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_OWVAR 67
12335: ARRAY
12336: PPUSH
12337: LD_INT 5
12339: PPUSH
12340: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , HexInfo ( 120 , 100 ) ) ;
12344: CALL_OW 44
12348: PPUSH
12349: LD_INT 120
12351: PPUSH
12352: LD_INT 100
12354: PPUSH
12355: CALL_OW 428
12359: PPUSH
12360: CALL_OW 52
// end ;
12364: GO 12307
12366: POP
12367: POP
// tmp := [ [ 135 , 100 ] , [ 137 , 92 ] ] ;
12368: LD_ADDR_VAR 0 7
12372: PUSH
12373: LD_INT 135
12375: PUSH
12376: LD_INT 100
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 137
12385: PUSH
12386: LD_INT 92
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: ST_TO_ADDR
// for i := 1 to tmp do
12397: LD_ADDR_VAR 0 2
12401: PUSH
12402: DOUBLE
12403: LD_INT 1
12405: DEC
12406: ST_TO_ADDR
12407: LD_VAR 0 7
12411: PUSH
12412: FOR_TO
12413: IFFALSE 12583
// begin PrepareVehicle ( [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty + rand ( 0 , 1 ) ] , engine_combustion , control_manual , ru_gun , 25 ) ;
12415: LD_INT 22
12417: PUSH
12418: LD_INT 22
12420: PUSH
12421: LD_INT 24
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: PUSH
12437: LD_OWVAR 67
12441: PUSH
12442: LD_INT 0
12444: PPUSH
12445: LD_INT 1
12447: PPUSH
12448: CALL_OW 12
12452: PLUS
12453: ARRAY
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_INT 1
12460: PPUSH
12461: LD_INT 44
12463: PPUSH
12464: LD_INT 25
12466: PPUSH
12467: CALL 34304 0 5
// veh := CreateVehicle ;
12471: LD_ADDR_VAR 0 6
12475: PUSH
12476: CALL_OW 45
12480: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
12481: LD_VAR 0 6
12485: PPUSH
12486: LD_INT 2
12488: PPUSH
12489: CALL_OW 233
// PlaceUnitXY ( veh , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
12493: LD_VAR 0 6
12497: PPUSH
12498: LD_VAR 0 7
12502: PUSH
12503: LD_VAR 0 2
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PPUSH
12513: LD_VAR 0 7
12517: PUSH
12518: LD_VAR 0 2
12522: ARRAY
12523: PUSH
12524: LD_INT 2
12526: ARRAY
12527: PPUSH
12528: LD_INT 0
12530: PPUSH
12531: CALL_OW 48
// PrepareHuman ( false , 3 , 6 ) ;
12535: LD_INT 0
12537: PPUSH
12538: LD_INT 3
12540: PPUSH
12541: LD_INT 6
12543: PPUSH
12544: CALL_OW 380
// un := CreateHuman ;
12548: LD_ADDR_VAR 0 5
12552: PUSH
12553: CALL_OW 44
12557: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_VAR 0 6
12567: PPUSH
12568: CALL_OW 52
// ComHold ( veh ) ;
12572: LD_VAR 0 6
12576: PPUSH
12577: CALL_OW 140
// end ;
12581: GO 12412
12583: POP
12584: POP
// tmp := [ 191 , 122 ] ;
12585: LD_ADDR_VAR 0 7
12589: PUSH
12590: LD_INT 191
12592: PUSH
12593: LD_INT 122
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_tracked , engine_combustion , control_manual , ru_gun , 30 ) ;
12600: LD_INT 24
12602: PPUSH
12603: LD_INT 1
12605: PPUSH
12606: LD_INT 1
12608: PPUSH
12609: LD_INT 44
12611: PPUSH
12612: LD_INT 30
12614: PPUSH
12615: CALL 34304 0 5
// ruBlockadeTank := CreateVehicle ;
12619: LD_ADDR_EXP 55
12623: PUSH
12624: CALL_OW 45
12628: ST_TO_ADDR
// SetDir ( ruBlockadeTank , 2 ) ;
12629: LD_EXP 55
12633: PPUSH
12634: LD_INT 2
12636: PPUSH
12637: CALL_OW 233
// PlaceUnitXY ( ruBlockadeTank , 191 , 122 , false ) ;
12641: LD_EXP 55
12645: PPUSH
12646: LD_INT 191
12648: PPUSH
12649: LD_INT 122
12651: PPUSH
12652: LD_INT 0
12654: PPUSH
12655: CALL_OW 48
// PrepareMechanic ( sex_male , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
12659: LD_INT 1
12661: PPUSH
12662: LD_INT 5
12664: PUSH
12665: LD_INT 6
12667: PUSH
12668: LD_INT 7
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_OWVAR 67
12680: PUSH
12681: LD_INT 1
12683: MINUS
12684: ARRAY
12685: PPUSH
12686: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruBlockadeTank ) ;
12690: CALL_OW 44
12694: PPUSH
12695: LD_EXP 55
12699: PPUSH
12700: CALL_OW 52
// ComHold ( ruBlockadeTank ) ;
12704: LD_EXP 55
12708: PPUSH
12709: CALL_OW 140
// ruBlockadeSquad := [ ] ;
12713: LD_ADDR_EXP 57
12717: PUSH
12718: EMPTY
12719: ST_TO_ADDR
// for i := 1 to [ 2 , 2 , 3 , 3 ] [ Difficulty ] do
12720: LD_ADDR_VAR 0 2
12724: PUSH
12725: DOUBLE
12726: LD_INT 1
12728: DEC
12729: ST_TO_ADDR
12730: LD_INT 2
12732: PUSH
12733: LD_INT 2
12735: PUSH
12736: LD_INT 3
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_OWVAR 67
12752: ARRAY
12753: PUSH
12754: FOR_TO
12755: IFFALSE 12871
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
12757: LD_INT 0
12759: PPUSH
12760: LD_INT 1
12762: PPUSH
12763: LD_INT 4
12765: PUSH
12766: LD_INT 5
12768: PUSH
12769: LD_INT 6
12771: PUSH
12772: LD_INT 7
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: PUSH
12781: LD_OWVAR 67
12785: ARRAY
12786: PPUSH
12787: CALL_OW 380
// un := CreateHuman ;
12791: LD_ADDR_VAR 0 5
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , ruRoadBlockade , false ) ;
12801: LD_VAR 0 5
12805: PPUSH
12806: LD_INT 9
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// ComTurnXY ( un , 198 , 129 ) ;
12816: LD_VAR 0 5
12820: PPUSH
12821: LD_INT 198
12823: PPUSH
12824: LD_INT 129
12826: PPUSH
12827: CALL_OW 118
// AddComCrawl ( un ) ;
12831: LD_VAR 0 5
12835: PPUSH
12836: CALL_OW 197
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12840: LD_ADDR_EXP 57
12844: PUSH
12845: LD_EXP 57
12849: PPUSH
12850: LD_EXP 57
12854: PUSH
12855: LD_INT 1
12857: PLUS
12858: PPUSH
12859: LD_VAR 0 5
12863: PPUSH
12864: CALL_OW 1
12868: ST_TO_ADDR
// end ;
12869: GO 12754
12871: POP
12872: POP
// PrepareHuman ( false , 4 , 5 ) ;
12873: LD_INT 0
12875: PPUSH
12876: LD_INT 4
12878: PPUSH
12879: LD_INT 5
12881: PPUSH
12882: CALL_OW 380
// un := CreateHuman ;
12886: LD_ADDR_VAR 0 5
12890: PUSH
12891: CALL_OW 44
12895: ST_TO_ADDR
// PlaceUnitXY ( un , 179 , 113 , false ) ;
12896: LD_VAR 0 5
12900: PPUSH
12901: LD_INT 179
12903: PPUSH
12904: LD_INT 113
12906: PPUSH
12907: LD_INT 0
12909: PPUSH
12910: CALL_OW 48
// ComHold ( un ) ;
12914: LD_VAR 0 5
12918: PPUSH
12919: CALL_OW 140
// ruBlockadeSquad := Replace ( ruBlockadeSquad , ruBlockadeSquad + 1 , un ) ;
12923: LD_ADDR_EXP 57
12927: PUSH
12928: LD_EXP 57
12932: PPUSH
12933: LD_EXP 57
12937: PUSH
12938: LD_INT 1
12940: PLUS
12941: PPUSH
12942: LD_VAR 0 5
12946: PPUSH
12947: CALL_OW 1
12951: ST_TO_ADDR
// tmp := GetBase ( HexInfo ( 167 , 243 ) ) ;
12952: LD_ADDR_VAR 0 7
12956: PUSH
12957: LD_INT 167
12959: PPUSH
12960: LD_INT 243
12962: PPUSH
12963: CALL_OW 428
12967: PPUSH
12968: CALL_OW 274
12972: ST_TO_ADDR
// SetResourceType ( tmp , mat_cans , 1000 ) ;
12973: LD_VAR 0 7
12977: PPUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 277
// SetResourceType ( tmp , mat_oil , 400 ) ;
12988: LD_VAR 0 7
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_INT 400
12998: PPUSH
12999: CALL_OW 277
// tmp := HexInfo ( 169 , 229 ) ;
13003: LD_ADDR_VAR 0 7
13007: PUSH
13008: LD_INT 169
13010: PPUSH
13011: LD_INT 229
13013: PPUSH
13014: CALL_OW 428
13018: ST_TO_ADDR
// for i := 1 to 3 do
13019: LD_ADDR_VAR 0 2
13023: PUSH
13024: DOUBLE
13025: LD_INT 1
13027: DEC
13028: ST_TO_ADDR
13029: LD_INT 3
13031: PUSH
13032: FOR_TO
13033: IFFALSE 13124
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: LD_INT 5
13049: PUSH
13050: LD_INT 6
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: PUSH
13059: LD_OWVAR 67
13063: ARRAY
13064: PPUSH
13065: CALL_OW 380
// un := CreateHuman ;
13069: LD_ADDR_VAR 0 5
13073: PUSH
13074: CALL_OW 44
13078: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp ) ;
13079: LD_VAR 0 5
13083: PPUSH
13084: LD_VAR 0 7
13088: PPUSH
13089: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13093: LD_ADDR_EXP 58
13097: PUSH
13098: LD_EXP 58
13102: PPUSH
13103: LD_EXP 58
13107: PUSH
13108: LD_INT 1
13110: PLUS
13111: PPUSH
13112: LD_VAR 0 5
13116: PPUSH
13117: CALL_OW 1
13121: ST_TO_ADDR
// end ;
13122: GO 13032
13124: POP
13125: POP
// tmp := [ [ 165 , 227 ] , [ 173 , 231 ] ] ;
13126: LD_ADDR_VAR 0 7
13130: PUSH
13131: LD_INT 165
13133: PUSH
13134: LD_INT 227
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 173
13143: PUSH
13144: LD_INT 231
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: ST_TO_ADDR
// for i := 1 to tmp do
13155: LD_ADDR_VAR 0 2
13159: PUSH
13160: DOUBLE
13161: LD_INT 1
13163: DEC
13164: ST_TO_ADDR
13165: LD_VAR 0 7
13169: PUSH
13170: FOR_TO
13171: IFFALSE 13292
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13173: LD_INT 0
13175: PPUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 4
13181: PUSH
13182: LD_INT 5
13184: PUSH
13185: LD_INT 5
13187: PUSH
13188: LD_INT 6
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: PUSH
13197: LD_OWVAR 67
13201: ARRAY
13202: PPUSH
13203: CALL_OW 380
// un := CreateHuman ;
13207: LD_ADDR_VAR 0 5
13211: PUSH
13212: CALL_OW 44
13216: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ) ;
13217: LD_VAR 0 5
13221: PPUSH
13222: LD_VAR 0 7
13226: PUSH
13227: LD_VAR 0 2
13231: ARRAY
13232: PUSH
13233: LD_INT 1
13235: ARRAY
13236: PPUSH
13237: LD_VAR 0 7
13241: PUSH
13242: LD_VAR 0 2
13246: ARRAY
13247: PUSH
13248: LD_INT 2
13250: ARRAY
13251: PPUSH
13252: CALL_OW 428
13256: PPUSH
13257: CALL_OW 52
// ruHelperBaseSquad := Replace ( ruHelperBaseSquad , ruHelperBaseSquad + 1 , un ) ;
13261: LD_ADDR_EXP 58
13265: PUSH
13266: LD_EXP 58
13270: PPUSH
13271: LD_EXP 58
13275: PUSH
13276: LD_INT 1
13278: PLUS
13279: PPUSH
13280: LD_VAR 0 5
13284: PPUSH
13285: CALL_OW 1
13289: ST_TO_ADDR
// end ;
13290: GO 13170
13292: POP
13293: POP
// for i := 1 to 2 do
13294: LD_ADDR_VAR 0 2
13298: PUSH
13299: DOUBLE
13300: LD_INT 1
13302: DEC
13303: ST_TO_ADDR
13304: LD_INT 2
13306: PUSH
13307: FOR_TO
13308: IFFALSE 13363
// begin InitHc ;
13310: CALL_OW 19
// uc_nation := 0 ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 16
13329: ST_TO_ADDR
// un := CreateHuman ;
13330: LD_ADDR_VAR 0 5
13334: PUSH
13335: CALL_OW 44
13339: ST_TO_ADDR
// PlaceUnitXYR ( un , 166 , 233 , 2 , false ) ;
13340: LD_VAR 0 5
13344: PPUSH
13345: LD_INT 166
13347: PPUSH
13348: LD_INT 233
13350: PPUSH
13351: LD_INT 2
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 50
// end ;
13361: GO 13307
13363: POP
13364: POP
// uc_nation := 3 ;
13365: LD_ADDR_OWVAR 21
13369: PUSH
13370: LD_INT 3
13372: ST_TO_ADDR
// tmp := [ ruDepMainN , ruLenin , ruDepMainS ] ;
13373: LD_ADDR_VAR 0 7
13377: PUSH
13378: LD_INT 71
13380: PUSH
13381: LD_INT 52
13383: PUSH
13384: LD_INT 11
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: LIST
13391: ST_TO_ADDR
// for i in tmp do
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_VAR 0 7
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13447
// begin SetResourceType ( GetBase ( i ) , mat_cans , 3000 ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 274
13414: PPUSH
13415: LD_INT 1
13417: PPUSH
13418: LD_INT 3000
13420: PPUSH
13421: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 600 ) ;
13425: LD_VAR 0 2
13429: PPUSH
13430: CALL_OW 274
13434: PPUSH
13435: LD_INT 2
13437: PPUSH
13438: LD_INT 600
13440: PPUSH
13441: CALL_OW 277
// end ;
13445: GO 13402
13447: POP
13448: POP
// tmp := [ [ 41 , 57 ] , [ 38 , 55 ] , [ 50 , 73 ] , [ 51 , 65 ] , [ 82 , 93 ] , [ 87 , 100 ] , [ 91 , 109 ] , [ 84 , 120 ] , [ 113 , 153 ] , [ 123 , 171 ] , [ 125 , 178 ] , [ 125 , 188 ] , [ 125 , 201 ] , [ 33 , 60 ] , [ 76 , 95 ] , [ 84 , 111 ] , [ 112 , 165 ] ] ;
13449: LD_ADDR_VAR 0 7
13453: PUSH
13454: LD_INT 41
13456: PUSH
13457: LD_INT 57
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 38
13466: PUSH
13467: LD_INT 55
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 50
13476: PUSH
13477: LD_INT 73
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 51
13486: PUSH
13487: LD_INT 65
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PUSH
13494: LD_INT 82
13496: PUSH
13497: LD_INT 93
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 87
13506: PUSH
13507: LD_INT 100
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: PUSH
13514: LD_INT 91
13516: PUSH
13517: LD_INT 109
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PUSH
13524: LD_INT 84
13526: PUSH
13527: LD_INT 120
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 113
13536: PUSH
13537: LD_INT 153
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 123
13546: PUSH
13547: LD_INT 171
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 125
13556: PUSH
13557: LD_INT 178
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: LD_INT 125
13566: PUSH
13567: LD_INT 188
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 125
13576: PUSH
13577: LD_INT 201
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 33
13586: PUSH
13587: LD_INT 60
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 76
13596: PUSH
13597: LD_INT 95
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 84
13606: PUSH
13607: LD_INT 111
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 112
13616: PUSH
13617: LD_INT 165
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// for i := 1 to tmp do
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: DOUBLE
13649: LD_INT 1
13651: DEC
13652: ST_TO_ADDR
13653: LD_VAR 0 7
13657: PUSH
13658: FOR_TO
13659: IFFALSE 13906
// begin b := HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) ;
13661: LD_ADDR_VAR 0 4
13665: PUSH
13666: LD_VAR 0 7
13670: PUSH
13671: LD_VAR 0 2
13675: ARRAY
13676: PUSH
13677: LD_INT 1
13679: ARRAY
13680: PPUSH
13681: LD_VAR 0 7
13685: PUSH
13686: LD_VAR 0 2
13690: ARRAY
13691: PUSH
13692: LD_INT 2
13694: ARRAY
13695: PPUSH
13696: CALL_OW 428
13700: ST_TO_ADDR
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
13701: LD_VAR 0 4
13705: PPUSH
13706: CALL_OW 266
13710: PUSH
13711: LD_INT 4
13713: PUSH
13714: LD_INT 5
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: IN
13721: IFFALSE 13817
// begin for j := 1 to Difficulty do
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: DOUBLE
13729: LD_INT 1
13731: DEC
13732: ST_TO_ADDR
13733: LD_OWVAR 67
13737: PUSH
13738: FOR_TO
13739: IFFALSE 13813
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13741: LD_INT 0
13743: PPUSH
13744: LD_INT 1
13746: PPUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: LD_INT 6
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_OWVAR 67
13769: ARRAY
13770: PPUSH
13771: CALL_OW 380
// un := CreateHuman ;
13775: LD_ADDR_VAR 0 5
13779: PUSH
13780: CALL_OW 44
13784: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13785: LD_VAR 0 5
13789: PPUSH
13790: LD_VAR 0 4
13794: PPUSH
13795: CALL_OW 52
// SetClass ( un , class_bazooker ) ;
13799: LD_VAR 0 5
13803: PPUSH
13804: LD_INT 9
13806: PPUSH
13807: CALL_OW 336
// end ;
13811: GO 13738
13813: POP
13814: POP
// end else
13815: GO 13875
// begin PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13817: LD_INT 0
13819: PPUSH
13820: LD_INT 1
13822: PPUSH
13823: LD_INT 4
13825: PUSH
13826: LD_INT 5
13828: PUSH
13829: LD_INT 5
13831: PUSH
13832: LD_INT 6
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: PUSH
13841: LD_OWVAR 67
13845: ARRAY
13846: PPUSH
13847: CALL_OW 380
// un := CreateHuman ;
13851: LD_ADDR_VAR 0 5
13855: PUSH
13856: CALL_OW 44
13860: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
13861: LD_VAR 0 5
13865: PPUSH
13866: LD_VAR 0 4
13870: PPUSH
13871: CALL_OW 52
// end ; ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
13875: LD_ADDR_EXP 59
13879: PUSH
13880: LD_EXP 59
13884: PPUSH
13885: LD_EXP 59
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: LD_VAR 0 5
13898: PPUSH
13899: CALL_OW 1
13903: ST_TO_ADDR
// end ;
13904: GO 13658
13906: POP
13907: POP
// for b in FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_btype , b_bunker ] , [ f_empty ] ] ) do
13908: LD_ADDR_VAR 0 4
13912: PUSH
13913: LD_INT 10
13915: PPUSH
13916: LD_INT 22
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 30
13928: PUSH
13929: LD_INT 32
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 58
13938: PUSH
13939: EMPTY
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 70
13951: PUSH
13952: FOR_IN
13953: IFFALSE 14087
// begin if not Prob ( [ 40 , 50 , 75 , 80 ] [ Difficulty ] - ( gaidarKilled * 10 ) ) then
13955: LD_INT 40
13957: PUSH
13958: LD_INT 50
13960: PUSH
13961: LD_INT 75
13963: PUSH
13964: LD_INT 80
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: PUSH
13973: LD_OWVAR 67
13977: ARRAY
13978: PUSH
13979: LD_EXP 7
13983: PUSH
13984: LD_INT 10
13986: MUL
13987: MINUS
13988: PPUSH
13989: CALL_OW 13
13993: NOT
13994: IFFALSE 13998
// continue ;
13996: GO 13952
// PrepareHuman ( false , 1 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
13998: LD_INT 0
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: LD_INT 4
14006: PUSH
14007: LD_INT 5
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: LD_INT 6
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: PUSH
14022: LD_OWVAR 67
14026: ARRAY
14027: PPUSH
14028: CALL_OW 380
// un := CreateHuman ;
14032: LD_ADDR_VAR 0 5
14036: PUSH
14037: CALL_OW 44
14041: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
14042: LD_VAR 0 5
14046: PPUSH
14047: LD_VAR 0 4
14051: PPUSH
14052: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14056: LD_ADDR_EXP 59
14060: PUSH
14061: LD_EXP 59
14065: PPUSH
14066: LD_EXP 59
14070: PUSH
14071: LD_INT 1
14073: PLUS
14074: PPUSH
14075: LD_VAR 0 5
14079: PPUSH
14080: CALL_OW 1
14084: ST_TO_ADDR
// end ;
14085: GO 13952
14087: POP
14088: POP
// for i := 1 to 5 do
14089: LD_ADDR_VAR 0 2
14093: PUSH
14094: DOUBLE
14095: LD_INT 1
14097: DEC
14098: ST_TO_ADDR
14099: LD_INT 5
14101: PUSH
14102: FOR_TO
14103: IFFALSE 14201
// begin PrepareHuman ( false , 2 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14105: LD_INT 0
14107: PPUSH
14108: LD_INT 2
14110: PPUSH
14111: LD_INT 4
14113: PUSH
14114: LD_INT 5
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: PUSH
14129: LD_OWVAR 67
14133: ARRAY
14134: PPUSH
14135: CALL_OW 380
// un := CreateHuman ;
14139: LD_ADDR_VAR 0 5
14143: PUSH
14144: CALL_OW 44
14148: ST_TO_ADDR
// PlaceUnitXYR ( un , 66 , 101 , 3 , false ) ;
14149: LD_VAR 0 5
14153: PPUSH
14154: LD_INT 66
14156: PPUSH
14157: LD_INT 101
14159: PPUSH
14160: LD_INT 3
14162: PPUSH
14163: LD_INT 0
14165: PPUSH
14166: CALL_OW 50
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14170: LD_ADDR_EXP 59
14174: PUSH
14175: LD_EXP 59
14179: PPUSH
14180: LD_EXP 59
14184: PUSH
14185: LD_INT 1
14187: PLUS
14188: PPUSH
14189: LD_VAR 0 5
14193: PPUSH
14194: CALL_OW 1
14198: ST_TO_ADDR
// end ;
14199: GO 14102
14201: POP
14202: POP
// tmp := [ ruFac1 , ruFac2 ] ;
14203: LD_ADDR_VAR 0 7
14207: PUSH
14208: LD_INT 72
14210: PUSH
14211: LD_INT 12
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: ST_TO_ADDR
// for i := 1 to tmp do
14218: LD_ADDR_VAR 0 2
14222: PUSH
14223: DOUBLE
14224: LD_INT 1
14226: DEC
14227: ST_TO_ADDR
14228: LD_VAR 0 7
14232: PUSH
14233: FOR_TO
14234: IFFALSE 14351
// for j := 1 to 6 do
14236: LD_ADDR_VAR 0 3
14240: PUSH
14241: DOUBLE
14242: LD_INT 1
14244: DEC
14245: ST_TO_ADDR
14246: LD_INT 6
14248: PUSH
14249: FOR_TO
14250: IFFALSE 14347
// begin PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14252: LD_INT 0
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 4
14260: PUSH
14261: LD_INT 5
14263: PUSH
14264: LD_INT 5
14266: PUSH
14267: LD_INT 6
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_OWVAR 67
14280: ARRAY
14281: PPUSH
14282: CALL_OW 380
// un := CreateHuman ;
14286: LD_ADDR_VAR 0 5
14290: PUSH
14291: CALL_OW 44
14295: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ i ] ) ;
14296: LD_VAR 0 5
14300: PPUSH
14301: LD_VAR 0 7
14305: PUSH
14306: LD_VAR 0 2
14310: ARRAY
14311: PPUSH
14312: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14316: LD_ADDR_EXP 59
14320: PUSH
14321: LD_EXP 59
14325: PPUSH
14326: LD_EXP 59
14330: PUSH
14331: LD_INT 1
14333: PLUS
14334: PPUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: CALL_OW 1
14344: ST_TO_ADDR
// end ;
14345: GO 14249
14347: POP
14348: POP
14349: GO 14233
14351: POP
14352: POP
// for i := 1 to 3 do
14353: LD_ADDR_VAR 0 2
14357: PUSH
14358: DOUBLE
14359: LD_INT 1
14361: DEC
14362: ST_TO_ADDR
14363: LD_INT 3
14365: PUSH
14366: FOR_TO
14367: IFFALSE 14456
// begin PrepareHuman ( false , 4 , [ 4 , 5 , 5 , 6 ] [ Difficulty ] ) ;
14369: LD_INT 0
14371: PPUSH
14372: LD_INT 4
14374: PPUSH
14375: LD_INT 4
14377: PUSH
14378: LD_INT 5
14380: PUSH
14381: LD_INT 5
14383: PUSH
14384: LD_INT 6
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: LD_OWVAR 67
14397: ARRAY
14398: PPUSH
14399: CALL_OW 380
// un := CreateHuman ;
14403: LD_ADDR_VAR 0 5
14407: PUSH
14408: CALL_OW 44
14412: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruLab1 ) ;
14413: LD_VAR 0 5
14417: PPUSH
14418: LD_INT 17
14420: PPUSH
14421: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14425: LD_ADDR_EXP 59
14429: PUSH
14430: LD_EXP 59
14434: PPUSH
14435: LD_EXP 59
14439: PUSH
14440: LD_INT 1
14442: PLUS
14443: PPUSH
14444: LD_VAR 0 5
14448: PPUSH
14449: CALL_OW 1
14453: ST_TO_ADDR
// end ;
14454: GO 14366
14456: POP
14457: POP
// for i := 1 to [ 2 , 3 , 3 , 3 ] [ Difficulty ] do
14458: LD_ADDR_VAR 0 2
14462: PUSH
14463: DOUBLE
14464: LD_INT 1
14466: DEC
14467: ST_TO_ADDR
14468: LD_INT 2
14470: PUSH
14471: LD_INT 3
14473: PUSH
14474: LD_INT 3
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PUSH
14486: LD_OWVAR 67
14490: ARRAY
14491: PUSH
14492: FOR_TO
14493: IFFALSE 14613
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_crane , 100 ) ;
14495: LD_INT 22
14497: PPUSH
14498: LD_INT 1
14500: PPUSH
14501: LD_INT 1
14503: PPUSH
14504: LD_INT 52
14506: PPUSH
14507: LD_INT 100
14509: PPUSH
14510: CALL 34304 0 5
// veh := CreateVehicle ;
14514: LD_ADDR_VAR 0 6
14518: PUSH
14519: CALL_OW 45
14523: ST_TO_ADDR
// PrepareHuman ( false , 3 , 4 ) ;
14524: LD_INT 0
14526: PPUSH
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 4
14532: PPUSH
14533: CALL_OW 380
// un := CreateHuman ;
14537: LD_ADDR_VAR 0 5
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// PlaceUnitXYR ( veh , 107 , 182 , 4 , false ) ;
14547: LD_VAR 0 6
14551: PPUSH
14552: LD_INT 107
14554: PPUSH
14555: LD_INT 182
14557: PPUSH
14558: LD_INT 4
14560: PPUSH
14561: LD_INT 0
14563: PPUSH
14564: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: CALL_OW 52
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
14582: LD_ADDR_EXP 59
14586: PUSH
14587: LD_EXP 59
14591: PPUSH
14592: LD_EXP 59
14596: PUSH
14597: LD_INT 1
14599: PLUS
14600: PPUSH
14601: LD_VAR 0 5
14605: PPUSH
14606: CALL_OW 1
14610: ST_TO_ADDR
// end ;
14611: GO 14492
14613: POP
14614: POP
// InitHc ;
14615: CALL_OW 19
// for i := 1 to [ 3 , 5 , 6 , 8 ] [ Difficulty ] do
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: DOUBLE
14625: LD_INT 1
14627: DEC
14628: ST_TO_ADDR
14629: LD_INT 3
14631: PUSH
14632: LD_INT 5
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 8
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: LD_OWVAR 67
14651: ARRAY
14652: PUSH
14653: FOR_TO
14654: IFFALSE 14749
// begin uc_nation := 0 ;
14656: LD_ADDR_OWVAR 21
14660: PUSH
14661: LD_INT 0
14663: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
14664: LD_ADDR_OWVAR 28
14668: PUSH
14669: LD_INT 15
14671: ST_TO_ADDR
// hc_skills := [ 3 , 0 , 0 , 0 ] ;
14672: LD_ADDR_OWVAR 31
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: LD_INT 0
14685: PUSH
14686: LD_INT 0
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: ST_TO_ADDR
// un := CreateHuman ;
14695: LD_ADDR_VAR 0 5
14699: PUSH
14700: CALL_OW 44
14704: ST_TO_ADDR
// PlaceUnitXYR ( un , [ 269 , 300 ] [ i mod 2 + 1 ] , 182 , 4 , false ) ;
14705: LD_VAR 0 5
14709: PPUSH
14710: LD_INT 269
14712: PUSH
14713: LD_INT 300
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_VAR 0 2
14724: PUSH
14725: LD_INT 2
14727: MOD
14728: PUSH
14729: LD_INT 1
14731: PLUS
14732: ARRAY
14733: PPUSH
14734: LD_INT 182
14736: PPUSH
14737: LD_INT 4
14739: PPUSH
14740: LD_INT 0
14742: PPUSH
14743: CALL_OW 50
// end ;
14747: GO 14653
14749: POP
14750: POP
// uc_nation := 3 ;
14751: LD_ADDR_OWVAR 21
14755: PUSH
14756: LD_INT 3
14758: ST_TO_ADDR
// if convoySaveCounter < [ 10 , 8 , 6 , 5 ] [ Difficulty ] then
14759: LD_EXP 8
14763: PUSH
14764: LD_INT 10
14766: PUSH
14767: LD_INT 8
14769: PUSH
14770: LD_INT 6
14772: PUSH
14773: LD_INT 5
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: LD_OWVAR 67
14786: ARRAY
14787: LESS
14788: IFFALSE 14867
// begin PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 12 ) ;
14790: LD_INT 21
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_INT 1
14798: PPUSH
14799: LD_INT 51
14801: PPUSH
14802: LD_INT 12
14804: PPUSH
14805: CALL 34304 0 5
// veh := CreateVehicle ;
14809: LD_ADDR_VAR 0 6
14813: PUSH
14814: CALL_OW 45
14818: ST_TO_ADDR
// PlaceUnitXYD ( veh , 269 , 66 , 4 , false ) ;
14819: LD_VAR 0 6
14823: PPUSH
14824: LD_INT 269
14826: PPUSH
14827: LD_INT 66
14829: PPUSH
14830: LD_INT 4
14832: PPUSH
14833: LD_INT 0
14835: PPUSH
14836: CALL 69315 0 5
// SetLives ( veh , 333 ) ;
14840: LD_VAR 0 6
14844: PPUSH
14845: LD_INT 333
14847: PPUSH
14848: CALL_OW 234
// SetCargo ( veh , mat_oil , 100 ) ;
14852: LD_VAR 0 6
14856: PPUSH
14857: LD_INT 2
14859: PPUSH
14860: LD_INT 100
14862: PPUSH
14863: CALL_OW 290
// end ; end ;
14867: LD_VAR 0 1
14871: RET
// every 0 0$1 trigger ruBlockadeTank and GetSide ( ruBlockadeTank ) = 3 do var driver ;
14872: LD_EXP 55
14876: PUSH
14877: LD_EXP 55
14881: PPUSH
14882: CALL_OW 255
14886: PUSH
14887: LD_INT 3
14889: EQUAL
14890: AND
14891: IFFALSE 15054
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
// begin enable ;
14899: ENABLE
// if FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_dist , ruBlockadeTank , 15 ] ] ) then
14900: LD_INT 81
14902: PUSH
14903: LD_INT 3
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 91
14912: PUSH
14913: LD_EXP 55
14917: PUSH
14918: LD_INT 15
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: IFFALSE 15014
// begin if not IsDrivenBy ( ruBlockadeTank ) then
14936: LD_EXP 55
14940: PPUSH
14941: CALL_OW 311
14945: NOT
14946: IFFALSE 15012
// begin driver := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , ruBlockadeTank ) ;
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 22
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 21
14965: PUSH
14966: LD_INT 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PPUSH
14982: LD_EXP 55
14986: PPUSH
14987: CALL_OW 74
14991: ST_TO_ADDR
// if driver then
14992: LD_VAR 0 1
14996: IFFALSE 15012
// ComEnterUnit ( driver , ruBlockadeTank ) ;
14998: LD_VAR 0 1
15002: PPUSH
15003: LD_EXP 55
15007: PPUSH
15008: CALL_OW 120
// end ; exit ;
15012: GO 15054
// end ; if GetLives ( ruBlockadeTank ) < 1000 and IsDrivenBy ( ruBlockadeTank ) then
15014: LD_EXP 55
15018: PPUSH
15019: CALL_OW 256
15023: PUSH
15024: LD_INT 1000
15026: LESS
15027: PUSH
15028: LD_EXP 55
15032: PPUSH
15033: CALL_OW 311
15037: AND
15038: IFFALSE 15054
// ComRepairVehicleAndReturn ( IsDrivenBy ( ruBlockadeTank ) ) ;
15040: LD_EXP 55
15044: PPUSH
15045: CALL_OW 311
15049: PPUSH
15050: CALL 68875 0 1
// end ;
15054: PPOPN 1
15056: END
// every 0 0$3 trigger UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) and UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) do var i , sci , needHeal ;
15057: LD_EXP 57
15061: PPUSH
15062: LD_INT 3
15064: PUSH
15065: LD_INT 24
15067: PUSH
15068: LD_INT 1000
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PPUSH
15079: CALL_OW 72
15083: PUSH
15084: LD_EXP 57
15088: PPUSH
15089: LD_INT 25
15091: PUSH
15092: LD_INT 4
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: PUSH
15099: LD_INT 50
15101: PUSH
15102: EMPTY
15103: LIST
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PPUSH
15109: CALL_OW 72
15113: AND
15114: IFFALSE 15302
15116: GO 15118
15118: DISABLE
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
// begin enable ;
15124: ENABLE
// needHeal := SortByHealth ( UnitFilter ( ruBlockadeSquad , [ f_not , [ f_lives , 1000 ] ] ) , true ) ;
15125: LD_ADDR_VAR 0 3
15129: PUSH
15130: LD_EXP 57
15134: PPUSH
15135: LD_INT 3
15137: PUSH
15138: LD_INT 24
15140: PUSH
15141: LD_INT 1000
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 72
15156: PPUSH
15157: LD_INT 1
15159: PPUSH
15160: CALL 69115 0 2
15164: ST_TO_ADDR
// sci := UnitFilter ( ruBlockadeSquad , [ [ f_class , 4 ] , [ f_ok ] ] ) [ 1 ] ;
15165: LD_ADDR_VAR 0 2
15169: PUSH
15170: LD_EXP 57
15174: PPUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 4
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 50
15187: PUSH
15188: EMPTY
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 72
15199: PUSH
15200: LD_INT 1
15202: ARRAY
15203: ST_TO_ADDR
// if not WantHeal ( sci , needHeal [ 1 ] ) then
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 1
15216: ARRAY
15217: PPUSH
15218: CALL 64456 0 2
15222: NOT
15223: IFFALSE 15302
// begin if not IsInArea ( needHeal [ 1 ] , ruRoadBlockade ) then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 1
15232: ARRAY
15233: PPUSH
15234: LD_INT 9
15236: PPUSH
15237: CALL_OW 308
15241: NOT
15242: IFFALSE 15260
// ComMoveToArea ( needHeal [ 1 ] , ruRoadBlockade ) ;
15244: LD_VAR 0 3
15248: PUSH
15249: LD_INT 1
15251: ARRAY
15252: PPUSH
15253: LD_INT 9
15255: PPUSH
15256: CALL_OW 113
// ComHeal ( sci , needHeal [ 1 ] ) ;
15260: LD_VAR 0 2
15264: PPUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: CALL_OW 128
// AddComMoveXY ( sci , 179 , 113 ) ;
15278: LD_VAR 0 2
15282: PPUSH
15283: LD_INT 179
15285: PPUSH
15286: LD_INT 113
15288: PPUSH
15289: CALL_OW 171
// AddComHold ( sci ) ;
15293: LD_VAR 0 2
15297: PPUSH
15298: CALL_OW 200
// end ; end ;
15302: PPOPN 3
15304: END
// every 0 0$1 trigger See ( 2 , ruLenin ) do var i , tmp ;
15305: LD_INT 2
15307: PPUSH
15308: LD_INT 52
15310: PPUSH
15311: CALL_OW 292
15315: IFFALSE 15420
15317: GO 15319
15319: DISABLE
15320: LD_INT 0
15322: PPUSH
15323: PPUSH
// begin tmp := UnitFilter ( ruMainBaseSquad , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
15324: LD_ADDR_VAR 0 2
15328: PUSH
15329: LD_EXP 59
15333: PPUSH
15334: LD_INT 25
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 50
15346: PUSH
15347: EMPTY
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PPUSH
15354: CALL_OW 72
15358: ST_TO_ADDR
// if not tmp then
15359: LD_VAR 0 2
15363: NOT
15364: IFFALSE 15368
// exit ;
15366: GO 15420
// for i in tmp do
15368: LD_ADDR_VAR 0 1
15372: PUSH
15373: LD_VAR 0 2
15377: PUSH
15378: FOR_IN
15379: IFFALSE 15418
// begin if IsInUnit ( i ) then
15381: LD_VAR 0 1
15385: PPUSH
15386: CALL_OW 310
15390: IFFALSE 15401
// ComExitBuilding ( i ) ;
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 122
// AddComAgressiveMove ( i , 84 , 133 ) ;
15401: LD_VAR 0 1
15405: PPUSH
15406: LD_INT 84
15408: PPUSH
15409: LD_INT 133
15411: PPUSH
15412: CALL_OW 174
// end ;
15416: GO 15378
15418: POP
15419: POP
// end ;
15420: PPOPN 2
15422: END
// every 0 0$10 trigger leninSpotted do var i , tmp , weapon ;
15423: LD_EXP 14
15427: IFFALSE 15608
15429: GO 15431
15431: DISABLE
15432: LD_INT 0
15434: PPUSH
15435: PPUSH
15436: PPUSH
// begin tmp := [ ruFac1 , ruFac2 ] ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_INT 72
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: ST_TO_ADDR
// weapon := [ [ ru_gun , ru_gatling_gun ] , [ ru_rocket_launcher , ru_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] , [ ru_rocket_launcher , ru_heavy_gun ] ] [ Difficulty ] ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 44
15459: PUSH
15460: LD_INT 43
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 45
15469: PUSH
15470: LD_INT 44
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: LD_INT 45
15479: PUSH
15480: LD_INT 46
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 45
15489: PUSH
15490: LD_INT 46
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: PUSH
15503: LD_OWVAR 67
15507: ARRAY
15508: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
15509: LD_ADDR_VAR 0 1
15513: PUSH
15514: DOUBLE
15515: LD_INT 1
15517: DEC
15518: ST_TO_ADDR
15519: LD_INT 1
15521: PUSH
15522: LD_INT 2
15524: PUSH
15525: LD_INT 2
15527: PUSH
15528: LD_INT 3
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: PUSH
15537: LD_OWVAR 67
15541: ARRAY
15542: PUSH
15543: FOR_TO
15544: IFFALSE 15606
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , weapon [ i mod 2 + 1 ] ) ;
15546: LD_VAR 0 2
15550: PPUSH
15551: LD_INT 22
15553: PUSH
15554: LD_INT 23
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 2
15568: MOD
15569: PUSH
15570: LD_INT 1
15572: PLUS
15573: ARRAY
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: LD_INT 1
15580: PPUSH
15581: LD_VAR 0 3
15585: PUSH
15586: LD_VAR 0 1
15590: PUSH
15591: LD_INT 2
15593: MOD
15594: PUSH
15595: LD_INT 1
15597: PLUS
15598: ARRAY
15599: PPUSH
15600: CALL_OW 185
15604: GO 15543
15606: POP
15607: POP
// end ;
15608: PPOPN 3
15610: END
// every 0 0$2 trigger leninScriptBase do var i , tmp , b , hurt , sci , enemyInBase ;
15611: LD_EXP 11
15615: IFFALSE 16764
15617: GO 15619
15619: DISABLE
15620: LD_INT 0
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
// begin enable ;
15628: ENABLE
// enemyInBase := FilterUnitsInArea ( ruMainBase , [ f_enemy , 3 ] ) ;
15629: LD_ADDR_VAR 0 6
15633: PUSH
15634: LD_INT 10
15636: PPUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PPUSH
15647: CALL_OW 70
15651: ST_TO_ADDR
// if ruSpecialVehicleGroup then
15652: LD_EXP 60
15656: IFFALSE 15922
// begin for i in ruSpecialVehicleGroup do
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_EXP 60
15667: PUSH
15668: FOR_IN
15669: IFFALSE 15920
// begin if enemyInBase then
15671: LD_VAR 0 6
15675: IFFALSE 15918
// begin if GetLives ( i ) > 500 and GetTag ( i ) = 0 then
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 256
15686: PUSH
15687: LD_INT 500
15689: GREATER
15690: PUSH
15691: LD_VAR 0 1
15695: PPUSH
15696: CALL_OW 110
15700: PUSH
15701: LD_INT 0
15703: EQUAL
15704: AND
15705: IFFALSE 15731
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 6
15716: PPUSH
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 74
15726: PPUSH
15727: CALL_OW 115
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
15731: LD_VAR 0 1
15735: PPUSH
15736: CALL_OW 256
15740: PUSH
15741: LD_INT 500
15743: LESSEQUAL
15744: PUSH
15745: LD_VAR 0 1
15749: PPUSH
15750: CALL_OW 110
15754: PUSH
15755: LD_INT 0
15757: EQUAL
15758: AND
15759: IFFALSE 15788
// begin SetTag ( i , 1 ) ;
15761: LD_VAR 0 1
15765: PPUSH
15766: LD_INT 1
15768: PPUSH
15769: CALL_OW 109
// ComMoveXY ( i , 83 , 134 ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_INT 83
15780: PPUSH
15781: LD_INT 134
15783: PPUSH
15784: CALL_OW 111
// end ; if GetLives ( i ) < 1000 and GetTag ( i ) = 1 and GetDistUnitXY ( i , 83 , 134 ) < 6 then
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 256
15797: PUSH
15798: LD_INT 1000
15800: LESS
15801: PUSH
15802: LD_VAR 0 1
15806: PPUSH
15807: CALL_OW 110
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: AND
15816: PUSH
15817: LD_VAR 0 1
15821: PPUSH
15822: LD_INT 83
15824: PPUSH
15825: LD_INT 134
15827: PPUSH
15828: CALL_OW 297
15832: PUSH
15833: LD_INT 6
15835: LESS
15836: AND
15837: IFFALSE 15865
// begin SetFuel ( i , 100 ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_INT 100
15846: PPUSH
15847: CALL_OW 240
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
15851: LD_VAR 0 1
15855: PPUSH
15856: CALL_OW 310
15860: PPUSH
15861: CALL 68995 0 1
// end ; if GetLives ( i ) = 1000 and GetTag ( i ) = 1 and IsDrivenBy ( i ) then
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 256
15874: PUSH
15875: LD_INT 1000
15877: EQUAL
15878: PUSH
15879: LD_VAR 0 1
15883: PPUSH
15884: CALL_OW 110
15888: PUSH
15889: LD_INT 1
15891: EQUAL
15892: AND
15893: PUSH
15894: LD_VAR 0 1
15898: PPUSH
15899: CALL_OW 311
15903: AND
15904: IFFALSE 15918
// SetTag ( i , 0 ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_INT 0
15913: PPUSH
15914: CALL_OW 109
// end ; end ;
15918: GO 15668
15920: POP
15921: POP
// end ; sci := UnitFilter ( ruMainBaseSquad , [ f_class , 4 ] ) ;
15922: LD_ADDR_VAR 0 5
15926: PUSH
15927: LD_EXP 59
15931: PPUSH
15932: LD_INT 25
15934: PUSH
15935: LD_INT 4
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 72
15946: ST_TO_ADDR
// hurt := UnitFilter ( ruMainBaseSquad , [ [ f_distxy , 92 , 155 , 12 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15947: LD_ADDR_VAR 0 4
15951: PUSH
15952: LD_EXP 59
15956: PPUSH
15957: LD_INT 92
15959: PUSH
15960: LD_INT 92
15962: PUSH
15963: LD_INT 155
15965: PUSH
15966: LD_INT 12
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 1000
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 72
16000: ST_TO_ADDR
// if sci then
16001: LD_VAR 0 5
16005: IFFALSE 16138
// begin if hurt then
16007: LD_VAR 0 4
16011: IFFALSE 16084
// begin if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16013: LD_VAR 0 5
16017: PPUSH
16018: LD_INT 3
16020: PUSH
16021: LD_INT 54
16023: PUSH
16024: EMPTY
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PPUSH
16031: CALL_OW 72
16035: IFFALSE 16064
// ComExitBuilding ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) ) ;
16037: LD_VAR 0 5
16041: PPUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 54
16047: PUSH
16048: EMPTY
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PPUSH
16055: CALL_OW 72
16059: PPUSH
16060: CALL_OW 122
// AddComHeal ( sci , hurt [ 1 ] ) ;
16064: LD_VAR 0 5
16068: PPUSH
16069: LD_VAR 0 4
16073: PUSH
16074: LD_INT 1
16076: ARRAY
16077: PPUSH
16078: CALL_OW 188
// end else
16082: GO 16138
// if UnitFilter ( sci , [ f_not , [ f_inside ] ] ) then
16084: LD_VAR 0 5
16088: PPUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 54
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PPUSH
16102: CALL_OW 72
16106: IFFALSE 16138
// ComEnterUnit ( UnitFilter ( sci , [ f_not , [ f_inside ] ] ) , ruLab1 ) ;
16108: LD_VAR 0 5
16112: PPUSH
16113: LD_INT 3
16115: PUSH
16116: LD_INT 54
16118: PUSH
16119: EMPTY
16120: LIST
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PPUSH
16126: CALL_OW 72
16130: PPUSH
16131: LD_INT 17
16133: PPUSH
16134: CALL_OW 120
// end ; b := FilterUnitsInArea ( ruMainBase , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16138: LD_ADDR_VAR 0 3
16142: PUSH
16143: LD_INT 10
16145: PPUSH
16146: LD_INT 21
16148: PUSH
16149: LD_INT 3
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 3
16158: PUSH
16159: LD_INT 24
16161: PUSH
16162: LD_INT 1000
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PPUSH
16177: CALL_OW 70
16181: ST_TO_ADDR
// tmp := UnitFilter ( ruMainBaseSquad , [ f_class , 2 ] ) union FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_crane ] ] ) ;
16182: LD_ADDR_VAR 0 2
16186: PUSH
16187: LD_EXP 59
16191: PPUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 2
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 72
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 3
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 34
16219: PUSH
16220: LD_INT 52
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PPUSH
16231: CALL_OW 69
16235: UNION
16236: ST_TO_ADDR
// if not tmp then
16237: LD_VAR 0 2
16241: NOT
16242: IFFALSE 16246
// exit ;
16244: GO 16764
// for i in tmp do
16246: LD_ADDR_VAR 0 1
16250: PUSH
16251: LD_VAR 0 2
16255: PUSH
16256: FOR_IN
16257: IFFALSE 16762
// begin if GetClass ( i ) = 2 then
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 257
16268: PUSH
16269: LD_INT 2
16271: EQUAL
16272: IFFALSE 16495
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 256
16283: PUSH
16284: LD_INT 1000
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 110
16297: PUSH
16298: LD_INT 1
16300: EQUAL
16301: AND
16302: IFFALSE 16316
// SetTag ( i , 0 ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_INT 0
16311: PPUSH
16312: CALL_OW 109
// if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 256
16325: PUSH
16326: LD_INT 500
16328: LESSEQUAL
16329: PUSH
16330: LD_VAR 0 1
16334: PPUSH
16335: CALL_OW 110
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: AND
16344: IFFALSE 16373
// begin SetTag ( i , 1 ) ;
16346: LD_VAR 0 1
16350: PPUSH
16351: LD_INT 1
16353: PPUSH
16354: CALL_OW 109
// ComMoveXY ( i , 92 , 155 ) ;
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 92
16365: PPUSH
16366: LD_INT 155
16368: PPUSH
16369: CALL_OW 111
// end ; if b and GetLives ( i ) > 500 and GetTag ( i ) = 0 and not HasTask ( i ) then
16373: LD_VAR 0 3
16377: PUSH
16378: LD_VAR 0 1
16382: PPUSH
16383: CALL_OW 256
16387: PUSH
16388: LD_INT 500
16390: GREATER
16391: AND
16392: PUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: CALL_OW 110
16402: PUSH
16403: LD_INT 0
16405: EQUAL
16406: AND
16407: PUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 314
16417: NOT
16418: AND
16419: IFFALSE 16493
// begin if b then
16421: LD_VAR 0 3
16425: IFFALSE 16457
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16427: LD_VAR 0 1
16431: PPUSH
16432: LD_VAR 0 3
16436: PUSH
16437: LD_INT 1
16439: PPUSH
16440: LD_VAR 0 3
16444: PPUSH
16445: CALL_OW 12
16449: ARRAY
16450: PPUSH
16451: CALL_OW 130
16455: GO 16493
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16457: LD_VAR 0 1
16461: PPUSH
16462: LD_INT 94
16464: PPUSH
16465: LD_INT 165
16467: PPUSH
16468: CALL_OW 297
16472: PUSH
16473: LD_INT 8
16475: GREATER
16476: IFFALSE 16493
// ComMoveXY ( i , 94 , 165 ) ;
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 94
16485: PPUSH
16486: LD_INT 165
16488: PPUSH
16489: CALL_OW 111
// end ; end else
16493: GO 16760
// if GetWeapon ( i ) = ru_crane then
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 264
16504: PUSH
16505: LD_INT 52
16507: EQUAL
16508: IFFALSE 16760
// begin if GetLives ( i ) = 1000 and GetTag ( i ) = 1 then
16510: LD_VAR 0 1
16514: PPUSH
16515: CALL_OW 256
16519: PUSH
16520: LD_INT 1000
16522: EQUAL
16523: PUSH
16524: LD_VAR 0 1
16528: PPUSH
16529: CALL_OW 110
16533: PUSH
16534: LD_INT 1
16536: EQUAL
16537: AND
16538: IFFALSE 16564
// begin SetTag ( i , 0 ) ;
16540: LD_VAR 0 1
16544: PPUSH
16545: LD_INT 0
16547: PPUSH
16548: CALL_OW 109
// SetFuel ( i , 100 ) ;
16552: LD_VAR 0 1
16556: PPUSH
16557: LD_INT 100
16559: PPUSH
16560: CALL_OW 240
// end ; if GetLives ( i ) <= 500 and GetTag ( i ) = 0 then
16564: LD_VAR 0 1
16568: PPUSH
16569: CALL_OW 256
16573: PUSH
16574: LD_INT 500
16576: LESSEQUAL
16577: PUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 110
16587: PUSH
16588: LD_INT 0
16590: EQUAL
16591: AND
16592: IFFALSE 16635
// begin SetTag ( i , 1 ) ;
16594: LD_VAR 0 1
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: CALL_OW 109
// ComMoveXY ( i , 83 , 135 ) ;
16606: LD_VAR 0 1
16610: PPUSH
16611: LD_INT 83
16613: PPUSH
16614: LD_INT 135
16616: PPUSH
16617: CALL_OW 111
// AddComRepairVehicleAndReturn ( IsInUnit ( i ) ) ;
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 310
16630: PPUSH
16631: CALL 68995 0 1
// end ; if GetLives ( i ) > 500 and GetTag ( i ) = 0 and IsDrivenBy ( i ) and not HasTask ( i ) then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 256
16644: PUSH
16645: LD_INT 500
16647: GREATER
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 110
16658: PUSH
16659: LD_INT 0
16661: EQUAL
16662: AND
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 311
16673: AND
16674: PUSH
16675: LD_VAR 0 1
16679: PPUSH
16680: CALL_OW 314
16684: NOT
16685: AND
16686: IFFALSE 16760
// begin if b then
16688: LD_VAR 0 3
16692: IFFALSE 16724
// ComRepairBuilding ( i , b [ rand ( 1 , b ) ] ) else
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_VAR 0 3
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 3
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: PPUSH
16718: CALL_OW 130
16722: GO 16760
// if GetDistUnitXY ( i , 94 , 165 ) > 8 then
16724: LD_VAR 0 1
16728: PPUSH
16729: LD_INT 94
16731: PPUSH
16732: LD_INT 165
16734: PPUSH
16735: CALL_OW 297
16739: PUSH
16740: LD_INT 8
16742: GREATER
16743: IFFALSE 16760
// ComMoveXY ( i , 94 , 165 ) ;
16745: LD_VAR 0 1
16749: PPUSH
16750: LD_INT 94
16752: PPUSH
16753: LD_INT 165
16755: PPUSH
16756: CALL_OW 111
// end ; end ; end ;
16760: GO 16256
16762: POP
16763: POP
// end ;
16764: PPOPN 6
16766: END
// every 10 10$00 + 2 2$00 trigger not omarAttack and not disableAttackOnHeike do var i , un , veh , tmp , tmp2 ;
16767: LD_EXP 23
16771: NOT
16772: PUSH
16773: LD_EXP 27
16777: NOT
16778: AND
16779: IFFALSE 17694
16781: GO 16783
16783: DISABLE
16784: LD_INT 0
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
// begin enable ;
16791: ENABLE
// if Prob ( [ 35 , 45 , 55 , 60 ] [ Difficulty ] ) then
16792: LD_INT 35
16794: PUSH
16795: LD_INT 45
16797: PUSH
16798: LD_INT 55
16800: PUSH
16801: LD_INT 60
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: LD_OWVAR 67
16814: ARRAY
16815: PPUSH
16816: CALL_OW 13
16820: IFFALSE 16836
// waveStrength := waveStrength + 1 ;
16822: LD_ADDR_EXP 62
16826: PUSH
16827: LD_EXP 62
16831: PUSH
16832: LD_INT 1
16834: PLUS
16835: ST_TO_ADDR
// if waveStrength > [ 2 , 3 , 4 , 4 ] [ Difficulty ] then
16836: LD_EXP 62
16840: PUSH
16841: LD_INT 2
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 4
16849: PUSH
16850: LD_INT 4
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: PUSH
16859: LD_OWVAR 67
16863: ARRAY
16864: GREATER
16865: IFFALSE 16897
// begin waveStrength := waveStrength + 2 ;
16867: LD_ADDR_EXP 62
16871: PUSH
16872: LD_EXP 62
16876: PUSH
16877: LD_INT 2
16879: PLUS
16880: ST_TO_ADDR
// disableAttackOnHeike := true ;
16881: LD_ADDR_EXP 27
16885: PUSH
16886: LD_INT 1
16888: ST_TO_ADDR
// disable ;
16889: DISABLE
// wait ( 3 3$00 ) ;
16890: LD_INT 6300
16892: PPUSH
16893: CALL_OW 67
// end ; for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: DOUBLE
16903: LD_INT 1
16905: DEC
16906: ST_TO_ADDR
16907: LD_INT 2
16909: PUSH
16910: LD_INT 2
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: LD_INT 4
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: LD_OWVAR 67
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17093
// begin InitHc ;
16934: CALL_OW 19
// InitVc ;
16938: CALL_OW 20
// uc_side := 3 ;
16942: LD_ADDR_OWVAR 20
16946: PUSH
16947: LD_INT 3
16949: ST_TO_ADDR
// uc_nation := 3 ;
16950: LD_ADDR_OWVAR 21
16954: PUSH
16955: LD_INT 3
16957: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty + 2 ) ;
16958: LD_INT 0
16960: PPUSH
16961: LD_INT 1
16963: PPUSH
16964: LD_OWVAR 67
16968: PUSH
16969: LD_INT 2
16971: PLUS
16972: PPUSH
16973: CALL_OW 380
// un := CreateHuman ;
16977: LD_ADDR_VAR 0 2
16981: PUSH
16982: CALL_OW 44
16986: ST_TO_ADDR
// PlaceUnitXYD ( un , 160 , 3 , 2 , false ) ;
16987: LD_VAR 0 2
16991: PPUSH
16992: LD_INT 160
16994: PPUSH
16995: LD_INT 3
16997: PPUSH
16998: LD_INT 2
17000: PPUSH
17001: LD_INT 0
17003: PPUSH
17004: CALL 69315 0 5
// SetClass ( un , class_bazooker ) ;
17008: LD_VAR 0 2
17012: PPUSH
17013: LD_INT 9
17015: PPUSH
17016: CALL_OW 336
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17020: LD_ADDR_EXP 61
17024: PUSH
17025: LD_EXP 61
17029: PPUSH
17030: LD_EXP 61
17034: PUSH
17035: LD_INT 1
17037: PLUS
17038: PPUSH
17039: LD_VAR 0 2
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17049: LD_VAR 0 2
17053: PPUSH
17054: LD_INT 177
17056: PPUSH
17057: LD_INT 17
17059: PPUSH
17060: CALL_OW 111
// wait ( 0 0$2 ) ;
17064: LD_INT 70
17066: PPUSH
17067: CALL_OW 67
// tmp2 := Join ( tmp2 , un ) ;
17071: LD_ADDR_VAR 0 5
17075: PUSH
17076: LD_VAR 0 5
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL 67175 0 2
17090: ST_TO_ADDR
// end ;
17091: GO 16931
17093: POP
17094: POP
// AddComAgressiveMove ( tmp2 , 196 , 53 ) ;
17095: LD_VAR 0 5
17099: PPUSH
17100: LD_INT 196
17102: PPUSH
17103: LD_INT 53
17105: PPUSH
17106: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 199 , 62 ) ;
17110: LD_VAR 0 5
17114: PPUSH
17115: LD_INT 199
17117: PPUSH
17118: LD_INT 62
17120: PPUSH
17121: CALL_OW 174
// AddComAgressiveMove ( tmp2 , 205 , 75 ) ;
17125: LD_VAR 0 5
17129: PPUSH
17130: LD_INT 205
17132: PPUSH
17133: LD_INT 75
17135: PPUSH
17136: CALL_OW 174
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] + waveStrength do
17140: LD_ADDR_VAR 0 1
17144: PUSH
17145: DOUBLE
17146: LD_INT 1
17148: DEC
17149: ST_TO_ADDR
17150: LD_INT 2
17152: PUSH
17153: LD_INT 3
17155: PUSH
17156: LD_INT 3
17158: PUSH
17159: LD_INT 4
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: PUSH
17168: LD_OWVAR 67
17172: ARRAY
17173: PUSH
17174: LD_EXP 62
17178: PLUS
17179: PUSH
17180: FOR_TO
17181: IFFALSE 17490
// begin InitHc ;
17183: CALL_OW 19
// InitVc ;
17187: CALL_OW 20
// uc_side := 3 ;
17191: LD_ADDR_OWVAR 20
17195: PUSH
17196: LD_INT 3
17198: ST_TO_ADDR
// uc_nation := 3 ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_INT 3
17206: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
17207: LD_INT 22
17209: PUSH
17210: LD_INT 23
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL_OW 12
17227: ARRAY
17228: PPUSH
17229: LD_INT 1
17231: PPUSH
17232: LD_INT 1
17234: PPUSH
17235: LD_INT 44
17237: PUSH
17238: LD_INT 45
17240: PUSH
17241: LD_INT 43
17243: PUSH
17244: LD_INT 42
17246: PUSH
17247: LD_INT 44
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: PUSH
17257: LD_INT 1
17259: PPUSH
17260: LD_INT 5
17262: PPUSH
17263: CALL_OW 12
17267: ARRAY
17268: PPUSH
17269: LD_INT 99
17271: PPUSH
17272: CALL 34304 0 5
// veh := CreateVehicle ;
17276: LD_ADDR_VAR 0 3
17280: PUSH
17281: CALL_OW 45
17285: ST_TO_ADDR
// PlaceUnitXYD ( veh , 160 , 3 , 2 , false ) ;
17286: LD_VAR 0 3
17290: PPUSH
17291: LD_INT 160
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: LD_INT 2
17299: PPUSH
17300: LD_INT 0
17302: PPUSH
17303: CALL 69315 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17307: LD_ADDR_EXP 61
17311: PUSH
17312: LD_EXP 61
17316: PPUSH
17317: LD_EXP 61
17321: PUSH
17322: LD_INT 1
17324: PLUS
17325: PPUSH
17326: LD_VAR 0 3
17330: PPUSH
17331: CALL_OW 1
17335: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
17336: LD_INT 0
17338: PPUSH
17339: LD_INT 3
17341: PPUSH
17342: LD_OWVAR 67
17346: PUSH
17347: LD_INT 2
17349: PLUS
17350: PPUSH
17351: CALL_OW 380
// un := CreateHuman ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: CALL_OW 44
17364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17379: LD_ADDR_EXP 61
17383: PUSH
17384: LD_EXP 61
17388: PPUSH
17389: LD_EXP 61
17393: PUSH
17394: LD_INT 1
17396: PLUS
17397: PPUSH
17398: LD_VAR 0 2
17402: PPUSH
17403: CALL_OW 1
17407: ST_TO_ADDR
// ComMoveXY ( un , 177 , 17 ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: LD_INT 177
17415: PPUSH
17416: LD_INT 17
17418: PPUSH
17419: CALL_OW 111
// wait ( 0 0$2 ) ;
17423: LD_INT 70
17425: PPUSH
17426: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_VAR 0 4
17439: PPUSH
17440: LD_VAR 0 4
17444: PUSH
17445: LD_INT 1
17447: PLUS
17448: PPUSH
17449: LD_VAR 0 3
17453: PPUSH
17454: CALL_OW 1
17458: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
17459: LD_ADDR_VAR 0 4
17463: PUSH
17464: LD_VAR 0 4
17468: PPUSH
17469: LD_VAR 0 4
17473: PUSH
17474: LD_INT 1
17476: PLUS
17477: PPUSH
17478: LD_VAR 0 2
17482: PPUSH
17483: CALL_OW 1
17487: ST_TO_ADDR
// end ;
17488: GO 17180
17490: POP
17491: POP
// for i in tmp do
17492: LD_ADDR_VAR 0 1
17496: PUSH
17497: LD_VAR 0 4
17501: PUSH
17502: FOR_IN
17503: IFFALSE 17584
// AgressiveMove ( i , [ [ 206 , 37 ] , [ 239 , 53 ] , [ 260 , 67 ] , [ 263 , 79 ] , [ 257 , 105 ] , [ 227 , 97 ] ] ) ;
17505: LD_VAR 0 1
17509: PPUSH
17510: LD_INT 206
17512: PUSH
17513: LD_INT 37
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: LD_INT 239
17522: PUSH
17523: LD_INT 53
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 260
17532: PUSH
17533: LD_INT 67
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 263
17542: PUSH
17543: LD_INT 79
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 257
17552: PUSH
17553: LD_INT 105
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 227
17562: PUSH
17563: LD_INT 97
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL 69779 0 2
17582: GO 17502
17584: POP
17585: POP
// repeat wait ( 0 0$2 ) ;
17586: LD_INT 70
17588: PPUSH
17589: CALL_OW 67
// for i in tmp do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_VAR 0 4
17602: PUSH
17603: FOR_IN
17604: IFFALSE 17671
// if IsDead ( i ) then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 301
17615: IFFALSE 17635
// tmp := tmp diff i else
17617: LD_ADDR_VAR 0 4
17621: PUSH
17622: LD_VAR 0 4
17626: PUSH
17627: LD_VAR 0 1
17631: DIFF
17632: ST_TO_ADDR
17633: GO 17669
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
17635: LD_VAR 0 1
17639: PPUSH
17640: LD_INT 81
17642: PUSH
17643: LD_INT 3
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PPUSH
17650: CALL_OW 69
17654: PPUSH
17655: LD_VAR 0 1
17659: PPUSH
17660: CALL_OW 74
17664: PPUSH
17665: CALL_OW 115
17669: GO 17603
17671: POP
17672: POP
// until not tmp ;
17673: LD_VAR 0 4
17677: NOT
17678: IFFALSE 17586
// if firstAttack then
17680: LD_EXP 28
17684: IFFALSE 17694
// firstAttack := false ;
17686: LD_ADDR_EXP 28
17690: PUSH
17691: LD_INT 0
17693: ST_TO_ADDR
// end ;
17694: PPOPN 5
17696: END
// every 12 12$00 + 3 3$00 trigger not omarAttack and not rolfAttack and bergkampfArrived and not disableAttackOnHeike do var i , un , veh , tmp ;
17697: LD_EXP 23
17701: NOT
17702: PUSH
17703: LD_EXP 32
17707: NOT
17708: AND
17709: PUSH
17710: LD_EXP 3
17714: AND
17715: PUSH
17716: LD_EXP 27
17720: NOT
17721: AND
17722: IFFALSE 18639
17724: GO 17726
17726: DISABLE
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
// begin enable ;
17733: ENABLE
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
17734: LD_ADDR_VAR 0 1
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_INT 1
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: LD_INT 3
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: LD_OWVAR 67
17766: ARRAY
17767: PUSH
17768: FOR_TO
17769: IFFALSE 18070
// begin InitHc ;
17771: CALL_OW 19
// InitVc ;
17775: CALL_OW 20
// uc_side := 3 ;
17779: LD_ADDR_OWVAR 20
17783: PUSH
17784: LD_INT 3
17786: ST_TO_ADDR
// uc_nation := 3 ;
17787: LD_ADDR_OWVAR 21
17791: PUSH
17792: LD_INT 3
17794: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
17795: LD_INT 22
17797: PUSH
17798: LD_INT 23
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 1
17807: PPUSH
17808: LD_INT 2
17810: PPUSH
17811: CALL_OW 12
17815: ARRAY
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: LD_INT 1
17822: PPUSH
17823: LD_INT 44
17825: PUSH
17826: LD_INT 43
17828: PUSH
17829: LD_INT 42
17831: PUSH
17832: LD_INT 44
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PPUSH
17844: LD_INT 4
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: PPUSH
17853: LD_INT 99
17855: PPUSH
17856: CALL 34304 0 5
// veh := CreateVehicle ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: CALL_OW 45
17869: ST_TO_ADDR
// PlaceUnitXYD ( veh , 5 , 3 , 2 , false ) ;
17870: LD_VAR 0 3
17874: PPUSH
17875: LD_INT 5
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 2
17883: PPUSH
17884: LD_INT 0
17886: PPUSH
17887: CALL 69315 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
17891: LD_ADDR_EXP 61
17895: PUSH
17896: LD_EXP 61
17900: PPUSH
17901: LD_EXP 61
17905: PUSH
17906: LD_INT 1
17908: PLUS
17909: PPUSH
17910: LD_VAR 0 3
17914: PPUSH
17915: CALL_OW 1
17919: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty ) ;
17920: LD_INT 0
17922: PPUSH
17923: LD_INT 3
17925: PPUSH
17926: LD_OWVAR 67
17930: PPUSH
17931: CALL_OW 380
// un := CreateHuman ;
17935: LD_ADDR_VAR 0 2
17939: PUSH
17940: CALL_OW 44
17944: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17945: LD_VAR 0 2
17949: PPUSH
17950: LD_VAR 0 3
17954: PPUSH
17955: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
17959: LD_ADDR_EXP 61
17963: PUSH
17964: LD_EXP 61
17968: PPUSH
17969: LD_EXP 61
17973: PUSH
17974: LD_INT 1
17976: PLUS
17977: PPUSH
17978: LD_VAR 0 2
17982: PPUSH
17983: CALL_OW 1
17987: ST_TO_ADDR
// ComMoveXY ( un , 23 , 7 ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: LD_INT 23
17995: PPUSH
17996: LD_INT 7
17998: PPUSH
17999: CALL_OW 111
// wait ( 0 0$2 ) ;
18003: LD_INT 70
18005: PPUSH
18006: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_VAR 0 4
18019: PPUSH
18020: LD_VAR 0 4
18024: PUSH
18025: LD_INT 1
18027: PLUS
18028: PPUSH
18029: LD_VAR 0 3
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18039: LD_ADDR_VAR 0 4
18043: PUSH
18044: LD_VAR 0 4
18048: PPUSH
18049: LD_VAR 0 4
18053: PUSH
18054: LD_INT 1
18056: PLUS
18057: PPUSH
18058: LD_VAR 0 2
18062: PPUSH
18063: CALL_OW 1
18067: ST_TO_ADDR
// end ;
18068: GO 17768
18070: POP
18071: POP
// for i := 1 to [ 2 , 3 , 3 , 4 ] [ Difficulty ] do
18072: LD_ADDR_VAR 0 1
18076: PUSH
18077: DOUBLE
18078: LD_INT 1
18080: DEC
18081: ST_TO_ADDR
18082: LD_INT 2
18084: PUSH
18085: LD_INT 3
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: LD_INT 4
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: PUSH
18100: LD_OWVAR 67
18104: ARRAY
18105: PUSH
18106: FOR_TO
18107: IFFALSE 18416
// begin InitHc ;
18109: CALL_OW 19
// InitVc ;
18113: CALL_OW 20
// uc_side := 3 ;
18117: LD_ADDR_OWVAR 20
18121: PUSH
18122: LD_INT 3
18124: ST_TO_ADDR
// uc_nation := 3 ;
18125: LD_ADDR_OWVAR 21
18129: PUSH
18130: LD_INT 3
18132: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_rocket_launcher , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 5 ) ] , 99 ) ;
18133: LD_INT 22
18135: PUSH
18136: LD_INT 23
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 1
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: CALL_OW 12
18153: ARRAY
18154: PPUSH
18155: LD_INT 1
18157: PPUSH
18158: LD_INT 1
18160: PPUSH
18161: LD_INT 44
18163: PUSH
18164: LD_INT 45
18166: PUSH
18167: LD_INT 43
18169: PUSH
18170: LD_INT 42
18172: PUSH
18173: LD_INT 44
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 1
18185: PPUSH
18186: LD_INT 5
18188: PPUSH
18189: CALL_OW 12
18193: ARRAY
18194: PPUSH
18195: LD_INT 99
18197: PPUSH
18198: CALL 34304 0 5
// veh := CreateVehicle ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: CALL_OW 45
18211: ST_TO_ADDR
// PlaceUnitXYD ( veh , 127 , 243 , 0 , false ) ;
18212: LD_VAR 0 3
18216: PPUSH
18217: LD_INT 127
18219: PPUSH
18220: LD_INT 243
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: LD_INT 0
18228: PPUSH
18229: CALL 69315 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18233: LD_ADDR_EXP 61
18237: PUSH
18238: LD_EXP 61
18242: PPUSH
18243: LD_EXP 61
18247: PUSH
18248: LD_INT 1
18250: PLUS
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: CALL_OW 1
18261: ST_TO_ADDR
// PrepareHuman ( false , 3 , Difficulty + 2 ) ;
18262: LD_INT 0
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: LD_OWVAR 67
18272: PUSH
18273: LD_INT 2
18275: PLUS
18276: PPUSH
18277: CALL_OW 380
// un := CreateHuman ;
18281: LD_ADDR_VAR 0 2
18285: PUSH
18286: CALL_OW 44
18290: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18291: LD_VAR 0 2
18295: PPUSH
18296: LD_VAR 0 3
18300: PPUSH
18301: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18305: LD_ADDR_EXP 61
18309: PUSH
18310: LD_EXP 61
18314: PPUSH
18315: LD_EXP 61
18319: PUSH
18320: LD_INT 1
18322: PLUS
18323: PPUSH
18324: LD_VAR 0 2
18328: PPUSH
18329: CALL_OW 1
18333: ST_TO_ADDR
// ComMoveXY ( un , 130 , 233 ) ;
18334: LD_VAR 0 2
18338: PPUSH
18339: LD_INT 130
18341: PPUSH
18342: LD_INT 233
18344: PPUSH
18345: CALL_OW 111
// wait ( 0 0$2 ) ;
18349: LD_INT 70
18351: PPUSH
18352: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18356: LD_ADDR_VAR 0 4
18360: PUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: LD_VAR 0 4
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: CALL_OW 1
18384: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18385: LD_ADDR_VAR 0 4
18389: PUSH
18390: LD_VAR 0 4
18394: PPUSH
18395: LD_VAR 0 4
18399: PUSH
18400: LD_INT 1
18402: PLUS
18403: PPUSH
18404: LD_VAR 0 2
18408: PPUSH
18409: CALL_OW 1
18413: ST_TO_ADDR
// end ;
18414: GO 18106
18416: POP
18417: POP
// for i in tmp do
18418: LD_ADDR_VAR 0 1
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: FOR_IN
18429: IFFALSE 18543
// AgressiveMove ( i , [ [ 130 , 229 ] , [ 137 , 216 ] , [ 142 , 194 ] , [ 140 , 169 ] , [ 146 , 162 ] , [ 174 , 161 ] , [ 158 , 134 ] , [ 136 , 107 ] , [ 115 , 89 ] ] ) ;
18431: LD_VAR 0 1
18435: PPUSH
18436: LD_INT 130
18438: PUSH
18439: LD_INT 229
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 137
18448: PUSH
18449: LD_INT 216
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: LD_INT 142
18458: PUSH
18459: LD_INT 194
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PUSH
18466: LD_INT 140
18468: PUSH
18469: LD_INT 169
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: PUSH
18476: LD_INT 146
18478: PUSH
18479: LD_INT 162
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 174
18488: PUSH
18489: LD_INT 161
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 158
18498: PUSH
18499: LD_INT 134
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 136
18508: PUSH
18509: LD_INT 107
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 115
18518: PUSH
18519: LD_INT 89
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: PPUSH
18537: CALL 69779 0 2
18541: GO 18428
18543: POP
18544: POP
// repeat wait ( 0 0$2 ) ;
18545: LD_INT 70
18547: PPUSH
18548: CALL_OW 67
// for i in tmp do
18552: LD_ADDR_VAR 0 1
18556: PUSH
18557: LD_VAR 0 4
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18630
// if IsDead ( i ) then
18565: LD_VAR 0 1
18569: PPUSH
18570: CALL_OW 301
18574: IFFALSE 18594
// tmp := tmp diff i else
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_VAR 0 4
18585: PUSH
18586: LD_VAR 0 1
18590: DIFF
18591: ST_TO_ADDR
18592: GO 18628
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_INT 81
18601: PUSH
18602: LD_INT 3
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 69
18613: PPUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 74
18623: PPUSH
18624: CALL_OW 115
18628: GO 18562
18630: POP
18631: POP
// until not tmp ;
18632: LD_VAR 0 4
18636: NOT
18637: IFFALSE 18545
// end ;
18639: PPOPN 4
18641: END
// every 0 0$1 trigger omarArrived do var i , un , veh , tmp ;
18642: LD_EXP 6
18646: IFFALSE 19105
18648: GO 18650
18650: DISABLE
18651: LD_INT 0
18653: PPUSH
18654: PPUSH
18655: PPUSH
18656: PPUSH
// begin wait ( 3 3$00 ) ;
18657: LD_INT 6300
18659: PPUSH
18660: CALL_OW 67
// for i := 1 to 3 do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: DOUBLE
18670: LD_INT 1
18672: DEC
18673: ST_TO_ADDR
18674: LD_INT 3
18676: PUSH
18677: FOR_TO
18678: IFFALSE 18977
// begin InitHc ;
18680: CALL_OW 19
// InitVc ;
18684: CALL_OW 20
// uc_side := 3 ;
18688: LD_ADDR_OWVAR 20
18692: PUSH
18693: LD_INT 3
18695: ST_TO_ADDR
// uc_nation := 3 ;
18696: LD_ADDR_OWVAR 21
18700: PUSH
18701: LD_INT 3
18703: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun , ru_gun ] [ rand ( 1 , 4 ) ] , 99 ) ;
18704: LD_INT 22
18706: PUSH
18707: LD_INT 23
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 1
18716: PPUSH
18717: LD_INT 2
18719: PPUSH
18720: CALL_OW 12
18724: ARRAY
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_INT 1
18731: PPUSH
18732: LD_INT 44
18734: PUSH
18735: LD_INT 43
18737: PUSH
18738: LD_INT 42
18740: PUSH
18741: LD_INT 44
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PPUSH
18753: LD_INT 4
18755: PPUSH
18756: CALL_OW 12
18760: ARRAY
18761: PPUSH
18762: LD_INT 99
18764: PPUSH
18765: CALL 34304 0 5
// veh := CreateVehicle ;
18769: LD_ADDR_VAR 0 3
18773: PUSH
18774: CALL_OW 45
18778: ST_TO_ADDR
// PlaceUnitXYD ( veh , 293 , 246 , 5 , false ) ;
18779: LD_VAR 0 3
18783: PPUSH
18784: LD_INT 293
18786: PPUSH
18787: LD_INT 246
18789: PPUSH
18790: LD_INT 5
18792: PPUSH
18793: LD_INT 0
18795: PPUSH
18796: CALL 69315 0 5
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , veh ) ;
18800: LD_ADDR_EXP 61
18804: PUSH
18805: LD_EXP 61
18809: PPUSH
18810: LD_EXP 61
18814: PUSH
18815: LD_INT 1
18817: PLUS
18818: PPUSH
18819: LD_VAR 0 3
18823: PPUSH
18824: CALL_OW 1
18828: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
18829: LD_INT 0
18831: PPUSH
18832: LD_INT 3
18834: PPUSH
18835: LD_INT 3
18837: PPUSH
18838: CALL_OW 380
// un := CreateHuman ;
18842: LD_ADDR_VAR 0 2
18846: PUSH
18847: CALL_OW 44
18851: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18852: LD_VAR 0 2
18856: PPUSH
18857: LD_VAR 0 3
18861: PPUSH
18862: CALL_OW 52
// ruAttackers := Replace ( ruAttackers , ruAttackers + 1 , un ) ;
18866: LD_ADDR_EXP 61
18870: PUSH
18871: LD_EXP 61
18875: PPUSH
18876: LD_EXP 61
18880: PUSH
18881: LD_INT 1
18883: PLUS
18884: PPUSH
18885: LD_VAR 0 2
18889: PPUSH
18890: CALL_OW 1
18894: ST_TO_ADDR
// ComMoveXY ( un , 273 , 227 ) ;
18895: LD_VAR 0 2
18899: PPUSH
18900: LD_INT 273
18902: PPUSH
18903: LD_INT 227
18905: PPUSH
18906: CALL_OW 111
// wait ( 0 0$2 ) ;
18910: LD_INT 70
18912: PPUSH
18913: CALL_OW 67
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
18917: LD_ADDR_VAR 0 4
18921: PUSH
18922: LD_VAR 0 4
18926: PPUSH
18927: LD_VAR 0 4
18931: PUSH
18932: LD_INT 1
18934: PLUS
18935: PPUSH
18936: LD_VAR 0 3
18940: PPUSH
18941: CALL_OW 1
18945: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
18946: LD_ADDR_VAR 0 4
18950: PUSH
18951: LD_VAR 0 4
18955: PPUSH
18956: LD_VAR 0 4
18960: PUSH
18961: LD_INT 1
18963: PLUS
18964: PPUSH
18965: LD_VAR 0 2
18969: PPUSH
18970: CALL_OW 1
18974: ST_TO_ADDR
// end ;
18975: GO 18677
18977: POP
18978: POP
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 4
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19009
// ComAgressiveMove ( i , 330 , 231 ) ;
18992: LD_VAR 0 1
18996: PPUSH
18997: LD_INT 330
18999: PPUSH
19000: LD_INT 231
19002: PPUSH
19003: CALL_OW 114
19007: GO 18989
19009: POP
19010: POP
// repeat wait ( 0 0$2 ) ;
19011: LD_INT 70
19013: PPUSH
19014: CALL_OW 67
// for i in tmp do
19018: LD_ADDR_VAR 0 1
19022: PUSH
19023: LD_VAR 0 4
19027: PUSH
19028: FOR_IN
19029: IFFALSE 19096
// if IsDead ( i ) then
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 301
19040: IFFALSE 19060
// tmp := tmp diff i else
19042: LD_ADDR_VAR 0 4
19046: PUSH
19047: LD_VAR 0 4
19051: PUSH
19052: LD_VAR 0 1
19056: DIFF
19057: ST_TO_ADDR
19058: GO 19094
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 81
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: CALL_OW 69
19079: PPUSH
19080: LD_VAR 0 1
19084: PPUSH
19085: CALL_OW 74
19089: PPUSH
19090: CALL_OW 115
19094: GO 19028
19096: POP
19097: POP
// until not tmp ;
19098: LD_VAR 0 4
19102: NOT
19103: IFFALSE 19011
// end ;
19105: PPOPN 4
19107: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do var i ;
19108: LD_INT 3
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 32
19127: PUSH
19128: LD_INT 1
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: IFFALSE 19227
19145: GO 19147
19147: DISABLE
19148: LD_INT 0
19150: PPUSH
// begin enable ;
19151: ENABLE
// for i in FilterAllUnits ( [ [ f_not , [ f_side , 2 ] ] , [ f_engine , engine_combustion ] ] ) do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_INT 3
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 2
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 32
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PPUSH
19188: CALL_OW 69
19192: PUSH
19193: FOR_IN
19194: IFFALSE 19225
// if GetFuel ( i ) < 3 then
19196: LD_VAR 0 1
19200: PPUSH
19201: CALL_OW 261
19205: PUSH
19206: LD_INT 3
19208: LESS
19209: IFFALSE 19223
// SetFuel ( i , 3 ) ;
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_INT 3
19218: PPUSH
19219: CALL_OW 240
19223: GO 19193
19225: POP
19226: POP
// end ; end_of_file
19227: PPOPN 1
19229: END
// export function Action ; begin
19230: LD_INT 0
19232: PPUSH
// RevealFogArea ( 2 , revealArea ) ;
19233: LD_INT 2
19235: PPUSH
19236: LD_INT 4
19238: PPUSH
19239: CALL_OW 332
// Video ( true ) ;
19243: LD_INT 1
19245: PPUSH
19246: CALL 67147 0 1
// music_nat := 3 ;
19250: LD_ADDR_OWVAR 71
19254: PUSH
19255: LD_INT 3
19257: ST_TO_ADDR
// music_class := music_recon ;
19258: LD_ADDR_OWVAR 72
19262: PUSH
19263: LD_INT 3
19265: ST_TO_ADDR
// CenterNowOnXY ( 213 , 89 ) ;
19266: LD_INT 213
19268: PPUSH
19269: LD_INT 89
19271: PPUSH
19272: CALL_OW 86
// if Kaia and Olaf then
19276: LD_EXP 39
19280: PUSH
19281: LD_EXP 43
19285: AND
19286: IFFALSE 19292
// SceneKaiaWithOlaf ;
19288: CALL 19370 0 0
// if Givi and Kamil then
19292: LD_EXP 35
19296: PUSH
19297: LD_EXP 38
19301: AND
19302: IFFALSE 19308
// SceneWithGiviAndKamil ;
19304: CALL 19941 0 0
// tick := 0 ;
19308: LD_ADDR_OWVAR 1
19312: PUSH
19313: LD_INT 0
19315: ST_TO_ADDR
// wait ( 3 ) ;
19316: LD_INT 3
19318: PPUSH
19319: CALL_OW 67
// Video ( false ) ;
19323: LD_INT 0
19325: PPUSH
19326: CALL 67147 0 1
// ChangeMissionObjectives ( M1 ) ;
19330: LD_STRING M1
19332: PPUSH
19333: CALL_OW 337
// music_nat := music_auto ;
19337: LD_ADDR_OWVAR 71
19341: PUSH
19342: LD_INT 0
19344: ST_TO_ADDR
// music_class := music_auto ;
19345: LD_ADDR_OWVAR 72
19349: PUSH
19350: LD_INT 0
19352: ST_TO_ADDR
// SaveForQuickRestart ;
19353: CALL_OW 22
// gameActive := true ;
19357: LD_ADDR_EXP 31
19361: PUSH
19362: LD_INT 1
19364: ST_TO_ADDR
// end ;
19365: LD_VAR 0 1
19369: RET
// export function SceneKaiaWithOlaf ; begin
19370: LD_INT 0
19372: PPUSH
// ComConstruct ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower ) ;
19373: LD_INT 22
19375: PUSH
19376: LD_INT 2
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 30
19385: PUSH
19386: LD_INT 3
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PPUSH
19397: CALL_OW 69
19401: PPUSH
19402: LD_INT 14
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 1
19410: PPUSH
19411: LD_INT 26
19413: PPUSH
19414: CALL_OW 125
// wait ( 0 0$1 ) ;
19418: LD_INT 35
19420: PPUSH
19421: CALL_OW 67
// Say ( Kaia , DK-Mem-1 ) ;
19425: LD_EXP 39
19429: PPUSH
19430: LD_STRING DK-Mem-1
19432: PPUSH
19433: CALL_OW 88
// Say ( Kaia , DK-Mem-2 ) ;
19437: LD_EXP 39
19441: PPUSH
19442: LD_STRING DK-Mem-2
19444: PPUSH
19445: CALL_OW 88
// Say ( Olaf , DO-Mem-3 ) ;
19449: LD_EXP 43
19453: PPUSH
19454: LD_STRING DO-Mem-3
19456: PPUSH
19457: CALL_OW 88
// Say ( Kaia , DK-Mem-4 ) ;
19461: LD_EXP 39
19465: PPUSH
19466: LD_STRING DK-Mem-4
19468: PPUSH
19469: CALL_OW 88
// Say ( Olaf , DO-Mem-5 ) ;
19473: LD_EXP 43
19477: PPUSH
19478: LD_STRING DO-Mem-5
19480: PPUSH
19481: CALL_OW 88
// wait ( 0 0$2 ) ;
19485: LD_INT 70
19487: PPUSH
19488: CALL_OW 67
// SetWorkingProgress ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_factory ] ] ) , 90 ) ;
19492: LD_INT 22
19494: PUSH
19495: LD_INT 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 30
19504: PUSH
19505: LD_INT 3
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: PPUSH
19521: LD_INT 90
19523: PPUSH
19524: CALL_OW 329
// Say ( Olaf , DO-Mem-6 ) ;
19528: LD_EXP 43
19532: PPUSH
19533: LD_STRING DO-Mem-6
19535: PPUSH
19536: CALL_OW 88
// Say ( Kaia , DK-Mem-7 ) ;
19540: LD_EXP 39
19544: PPUSH
19545: LD_STRING DK-Mem-7
19547: PPUSH
19548: CALL_OW 88
// ComTurnUnit ( Heike , Kaia ) ;
19552: LD_EXP 34
19556: PPUSH
19557: LD_EXP 39
19561: PPUSH
19562: CALL_OW 119
// Say ( Heike , DH-Mem-8 ) ;
19566: LD_EXP 34
19570: PPUSH
19571: LD_STRING DH-Mem-8
19573: PPUSH
19574: CALL_OW 88
// ComTurnUnit ( [ Kaia , Olaf ] , Heike ) ;
19578: LD_EXP 39
19582: PUSH
19583: LD_EXP 43
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: LD_EXP 34
19596: PPUSH
19597: CALL_OW 119
// Say ( Olaf , DO-Mem-9 ) ;
19601: LD_EXP 43
19605: PPUSH
19606: LD_STRING DO-Mem-9
19608: PPUSH
19609: CALL_OW 88
// Say ( Olaf , DO-Mem-10 ) ;
19613: LD_EXP 43
19617: PPUSH
19618: LD_STRING DO-Mem-10
19620: PPUSH
19621: CALL_OW 88
// Say ( Olaf , DO-Mem-11 ) ;
19625: LD_EXP 43
19629: PPUSH
19630: LD_STRING DO-Mem-11
19632: PPUSH
19633: CALL_OW 88
// Say ( Olaf , DO-Mem-12 ) ;
19637: LD_EXP 43
19641: PPUSH
19642: LD_STRING DO-Mem-12
19644: PPUSH
19645: CALL_OW 88
// Say ( Kaia , DK-Mem-13 ) ;
19649: LD_EXP 39
19653: PPUSH
19654: LD_STRING DK-Mem-13
19656: PPUSH
19657: CALL_OW 88
// Say ( Kaia , DK-Mem-14 ) ;
19661: LD_EXP 39
19665: PPUSH
19666: LD_STRING DK-Mem-14
19668: PPUSH
19669: CALL_OW 88
// Say ( Kaia , DK-Mem-15 ) ;
19673: LD_EXP 39
19677: PPUSH
19678: LD_STRING DK-Mem-15
19680: PPUSH
19681: CALL_OW 88
// Say ( Kaia , DK-Mem-16 ) ;
19685: LD_EXP 39
19689: PPUSH
19690: LD_STRING DK-Mem-16
19692: PPUSH
19693: CALL_OW 88
// Say ( Kaia , DK-Mem-17 ) ;
19697: LD_EXP 39
19701: PPUSH
19702: LD_STRING DK-Mem-17
19704: PPUSH
19705: CALL_OW 88
// ComTurnUnit ( Olaf , Kaia ) ;
19709: LD_EXP 43
19713: PPUSH
19714: LD_EXP 39
19718: PPUSH
19719: CALL_OW 119
// Say ( Olaf , DO-Mem-18 ) ;
19723: LD_EXP 43
19727: PPUSH
19728: LD_STRING DO-Mem-18
19730: PPUSH
19731: CALL_OW 88
// ComTurnUnit ( Kaia , Olaf ) ;
19735: LD_EXP 39
19739: PPUSH
19740: LD_EXP 43
19744: PPUSH
19745: CALL_OW 119
// Say ( Kaia , DK-Mem-19 ) ;
19749: LD_EXP 39
19753: PPUSH
19754: LD_STRING DK-Mem-19
19756: PPUSH
19757: CALL_OW 88
// ComMoveXY ( Olaf , 214 , 86 ) ;
19761: LD_EXP 43
19765: PPUSH
19766: LD_INT 214
19768: PPUSH
19769: LD_INT 86
19771: PPUSH
19772: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19776: LD_EXP 43
19780: PPUSH
19781: LD_EXP 39
19785: PPUSH
19786: CALL_OW 179
// if Givi then
19790: LD_EXP 35
19794: IFFALSE 19825
// begin ComMoveXY ( Givi , 217 , 86 ) ;
19796: LD_EXP 35
19800: PPUSH
19801: LD_INT 217
19803: PPUSH
19804: LD_INT 86
19806: PPUSH
19807: CALL_OW 111
// AddComTurnUnit ( Givi , Heike ) ;
19811: LD_EXP 35
19815: PPUSH
19816: LD_EXP 34
19820: PPUSH
19821: CALL_OW 179
// end ; if Kamil then
19825: LD_EXP 38
19829: IFFALSE 19869
// begin ComExit ( Kamil ) ;
19831: LD_EXP 38
19835: PPUSH
19836: CALL 67573 0 1
// AddComMoveXY ( Kamil , 212 , 86 ) ;
19840: LD_EXP 38
19844: PPUSH
19845: LD_INT 212
19847: PPUSH
19848: LD_INT 86
19850: PPUSH
19851: CALL_OW 171
// AddComTurnUnit ( Kamil , Heike ) ;
19855: LD_EXP 38
19859: PPUSH
19860: LD_EXP 34
19864: PPUSH
19865: CALL_OW 179
// end ; wait ( 0 0$2 ) ;
19869: LD_INT 70
19871: PPUSH
19872: CALL_OW 67
// Say ( Heike , DH-Mem-20 ) ;
19876: LD_EXP 34
19880: PPUSH
19881: LD_STRING DH-Mem-20
19883: PPUSH
19884: CALL_OW 88
// ComMoveXY ( Olaf , 215 , 87 ) ;
19888: LD_EXP 43
19892: PPUSH
19893: LD_INT 215
19895: PPUSH
19896: LD_INT 87
19898: PPUSH
19899: CALL_OW 111
// AddComTurnUnit ( Olaf , Kaia ) ;
19903: LD_EXP 43
19907: PPUSH
19908: LD_EXP 39
19912: PPUSH
19913: CALL_OW 179
// Say ( Kaia , DK-Mem-21 ) ;
19917: LD_EXP 39
19921: PPUSH
19922: LD_STRING DK-Mem-21
19924: PPUSH
19925: CALL_OW 88
// wait ( 0 0$2 ) ;
19929: LD_INT 70
19931: PPUSH
19932: CALL_OW 67
// end ;
19936: LD_VAR 0 1
19940: RET
// export function SceneWithGiviAndKamil ; var p ; begin
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// if Markov then
19945: LD_EXP 41
19949: IFFALSE 20067
// begin p := 0 ;
19951: LD_ADDR_VAR 0 2
19955: PUSH
19956: LD_INT 0
19958: ST_TO_ADDR
// if IsInUnit ( Markov ) then
19959: LD_EXP 41
19963: PPUSH
19964: CALL_OW 310
19968: IFFALSE 19979
// ComExit ( Markov ) ;
19970: LD_EXP 41
19974: PPUSH
19975: CALL 67573 0 1
// wait ( 0 0$1 ) ;
19979: LD_INT 35
19981: PPUSH
19982: CALL_OW 67
// ComMoveXY ( Markov , 212 , 88 ) ;
19986: LD_EXP 41
19990: PPUSH
19991: LD_INT 212
19993: PPUSH
19994: LD_INT 88
19996: PPUSH
19997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20001: LD_INT 35
20003: PPUSH
20004: CALL_OW 67
// p := Inc ( p ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: CALL 68536 0 1
20022: ST_TO_ADDR
// until GetDistUnits ( Markov , Heike ) < 6 or p > 12 ;
20023: LD_EXP 41
20027: PPUSH
20028: LD_EXP 34
20032: PPUSH
20033: CALL_OW 296
20037: PUSH
20038: LD_INT 6
20040: LESS
20041: PUSH
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 12
20049: GREATER
20050: OR
20051: IFFALSE 20001
// AddComTurnUnit ( Markov , Heike ) ;
20053: LD_EXP 41
20057: PPUSH
20058: LD_EXP 34
20062: PPUSH
20063: CALL_OW 179
// end ; Say ( Givi , DG-Obj-1 ) ;
20067: LD_EXP 35
20071: PPUSH
20072: LD_STRING DG-Obj-1
20074: PPUSH
20075: CALL_OW 88
// Say ( Kamil , DKam-Obj-2 ) ;
20079: LD_EXP 38
20083: PPUSH
20084: LD_STRING DKam-Obj-2
20086: PPUSH
20087: CALL_OW 88
// ComTurnUnit ( Heike , Kamil ) ;
20091: LD_EXP 34
20095: PPUSH
20096: LD_EXP 38
20100: PPUSH
20101: CALL_OW 119
// Say ( Kamil , DKam-Obj-3 ) ;
20105: LD_EXP 38
20109: PPUSH
20110: LD_STRING DKam-Obj-3
20112: PPUSH
20113: CALL_OW 88
// Say ( Markov , DMar-Obj-4 ) ;
20117: LD_EXP 41
20121: PPUSH
20122: LD_STRING DMar-Obj-4
20124: PPUSH
20125: CALL_OW 88
// Say ( Kamil , DKam-Obj-6 ) ;
20129: LD_EXP 38
20133: PPUSH
20134: LD_STRING DKam-Obj-6
20136: PPUSH
20137: CALL_OW 88
// Say ( Kamil , DKam-Obj-7 ) ;
20141: LD_EXP 38
20145: PPUSH
20146: LD_STRING DKam-Obj-7
20148: PPUSH
20149: CALL_OW 88
// Say ( Kamil , DKam-Obj-8 ) ;
20153: LD_EXP 38
20157: PPUSH
20158: LD_STRING DKam-Obj-8
20160: PPUSH
20161: CALL_OW 88
// Say ( Heike , DH-Obj-9 ) ;
20165: LD_EXP 34
20169: PPUSH
20170: LD_STRING DH-Obj-9
20172: PPUSH
20173: CALL_OW 88
// Say ( Kamil , DKam-Obj-10 ) ;
20177: LD_EXP 38
20181: PPUSH
20182: LD_STRING DKam-Obj-10
20184: PPUSH
20185: CALL_OW 88
// Say ( Kamil , DKam-Obj-11 ) ;
20189: LD_EXP 38
20193: PPUSH
20194: LD_STRING DKam-Obj-11
20196: PPUSH
20197: CALL_OW 88
// Say ( Markov , DMar-Obj-12 ) ;
20201: LD_EXP 41
20205: PPUSH
20206: LD_STRING DMar-Obj-12
20208: PPUSH
20209: CALL_OW 88
// Say ( Markov , DMar-Obj-13 ) ;
20213: LD_EXP 41
20217: PPUSH
20218: LD_STRING DMar-Obj-13
20220: PPUSH
20221: CALL_OW 88
// Say ( Markov , DMar-Obj-14 ) ;
20225: LD_EXP 41
20229: PPUSH
20230: LD_STRING DMar-Obj-14
20232: PPUSH
20233: CALL_OW 88
// Say ( Olaf , DO-Obj-15 ) ;
20237: LD_EXP 43
20241: PPUSH
20242: LD_STRING DO-Obj-15
20244: PPUSH
20245: CALL_OW 88
// Say ( Olaf , DO-Obj-16 ) ;
20249: LD_EXP 43
20253: PPUSH
20254: LD_STRING DO-Obj-16
20256: PPUSH
20257: CALL_OW 88
// Say ( Heike , DH-Obj-17 ) ;
20261: LD_EXP 34
20265: PPUSH
20266: LD_STRING DH-Obj-17
20268: PPUSH
20269: CALL_OW 88
// Say ( Olaf , DO-Obj-18 ) ;
20273: LD_EXP 43
20277: PPUSH
20278: LD_STRING DO-Obj-18
20280: PPUSH
20281: CALL_OW 88
// end ;
20285: LD_VAR 0 1
20289: RET
// every 0 0$2 trigger FilterAllUnits ( [ f_weapon , ar_mortar ] ) do var random ;
20290: LD_INT 34
20292: PUSH
20293: LD_INT 92
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: IFFALSE 20499
20306: GO 20308
20308: DISABLE
20309: LD_INT 0
20311: PPUSH
// begin wait ( 0 0$2 ) ;
20312: LD_INT 70
20314: PPUSH
20315: CALL_OW 67
// CenterNowOnUnits ( FilterAllUnits ( [ f_weapon , ar_mortar ] ) ) ;
20319: LD_INT 34
20321: PUSH
20322: LD_INT 92
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 69
20333: PPUSH
20334: CALL_OW 87
// DialogueOn ;
20338: CALL_OW 6
// if Markov then
20342: LD_EXP 41
20346: IFFALSE 20374
// begin Say ( Markov , DMar-Grn-1 ) ;
20348: LD_EXP 41
20352: PPUSH
20353: LD_STRING DMar-Grn-1
20355: PPUSH
20356: CALL_OW 88
// Say ( Heike , DH-Grn-2 ) ;
20360: LD_EXP 34
20364: PPUSH
20365: LD_STRING DH-Grn-2
20367: PPUSH
20368: CALL_OW 88
// end else
20372: GO 20473
// if heikeSecondSquad then
20374: LD_EXP 49
20378: IFFALSE 20473
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_EXP 49
20389: PUSH
20390: LD_INT 1
20392: PPUSH
20393: LD_EXP 49
20397: PPUSH
20398: CALL_OW 12
20402: ARRAY
20403: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20404: LD_VAR 0 1
20408: PPUSH
20409: CALL_OW 258
20413: PUSH
20414: LD_INT 1
20416: DOUBLE
20417: EQUAL
20418: IFTRUE 20422
20420: GO 20437
20422: POP
// Say ( random , DArm-Grn-1 ) ; 2 :
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_STRING DArm-Grn-1
20430: PPUSH
20431: CALL_OW 88
20435: GO 20461
20437: LD_INT 2
20439: DOUBLE
20440: EQUAL
20441: IFTRUE 20445
20443: GO 20460
20445: POP
// Say ( random , DArf-Grn-1 ) ; end ;
20446: LD_VAR 0 1
20450: PPUSH
20451: LD_STRING DArf-Grn-1
20453: PPUSH
20454: CALL_OW 88
20458: GO 20461
20460: POP
// Say ( Heike , DH-Grn-2 ) ;
20461: LD_EXP 34
20465: PPUSH
20466: LD_STRING DH-Grn-2
20468: PPUSH
20469: CALL_OW 88
// end ; DialogueOff ;
20473: CALL_OW 7
// ChangeMissionObjectives ( MortarConstructed ) ;
20477: LD_STRING MortarConstructed
20479: PPUSH
20480: CALL_OW 337
// Hint ( SelfPropelledMortar ) ;
20484: LD_STRING SelfPropelledMortar
20486: PPUSH
20487: CALL_OW 339
// mortarConstructed := true ;
20491: LD_ADDR_EXP 15
20495: PUSH
20496: LD_INT 1
20498: ST_TO_ADDR
// end ;
20499: PPOPN 1
20501: END
// every 0 0$1 trigger SeeArea ( 2 , ruOutpostNorth ) do
20502: LD_INT 2
20504: PPUSH
20505: LD_INT 8
20507: PPUSH
20508: CALL_OW 294
20512: IFFALSE 20655
20514: GO 20516
20516: DISABLE
// begin PlaceSeeing ( 200 , 162 , 2 , - 6 ) ;
20517: LD_INT 200
20519: PPUSH
20520: LD_INT 162
20522: PPUSH
20523: LD_INT 2
20525: PPUSH
20526: LD_INT 6
20528: NEG
20529: PPUSH
20530: CALL_OW 330
// RemoveSeeing ( 200 , 162 , 2 ) ;
20534: LD_INT 200
20536: PPUSH
20537: LD_INT 162
20539: PPUSH
20540: LD_INT 2
20542: PPUSH
20543: CALL_OW 331
// CenterOnXY ( 200 , 162 ) ;
20547: LD_INT 200
20549: PPUSH
20550: LD_INT 162
20552: PPUSH
20553: CALL_OW 84
// if not IsOk ( Kurt ) then
20557: LD_EXP 45
20561: PPUSH
20562: CALL_OW 302
20566: NOT
20567: IFFALSE 20571
// exit ;
20569: GO 20655
// Say ( Kurt , DKs-Otpst-2-1 ) ;
20571: LD_EXP 45
20575: PPUSH
20576: LD_STRING DKs-Otpst-2-1
20578: PPUSH
20579: CALL_OW 88
// Say ( Kaia , DK-Otpst-2-2 ) ;
20583: LD_EXP 39
20587: PPUSH
20588: LD_STRING DK-Otpst-2-2
20590: PPUSH
20591: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-3 ) ;
20595: LD_EXP 45
20599: PPUSH
20600: LD_STRING DKs-Otpst-2-3
20602: PPUSH
20603: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-4 ) ;
20607: LD_EXP 45
20611: PPUSH
20612: LD_STRING DKs-Otpst-2-4
20614: PPUSH
20615: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-5 ) ;
20619: LD_EXP 45
20623: PPUSH
20624: LD_STRING DKs-Otpst-2-5
20626: PPUSH
20627: CALL_OW 88
// Say ( Kamil , DKam-Otpst-2-6 ) ;
20631: LD_EXP 38
20635: PPUSH
20636: LD_STRING DKam-Otpst-2-6
20638: PPUSH
20639: CALL_OW 88
// Say ( Kurt , DKs-Otpst-2-7 ) ;
20643: LD_EXP 45
20647: PPUSH
20648: LD_STRING DKs-Otpst-2-7
20650: PPUSH
20651: CALL_OW 88
// end ;
20655: END
// every 0 0$1 trigger not FilterUnitsInArea ( ruOutpostNorth , [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) and not bergkampfArrived do var random ;
20656: LD_INT 8
20658: PPUSH
20659: LD_INT 22
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 3
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 70
20687: NOT
20688: PUSH
20689: LD_EXP 3
20693: NOT
20694: AND
20695: IFFALSE 20943
20697: GO 20699
20699: DISABLE
20700: LD_INT 0
20702: PPUSH
// begin outpostDestroyed := true ;
20703: LD_ADDR_EXP 4
20707: PUSH
20708: LD_INT 1
20710: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_mortar ] , [ f_distxy , 195 , 164 , 12 ] ] ) then
20711: LD_INT 22
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 34
20723: PUSH
20724: LD_INT 92
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 92
20733: PUSH
20734: LD_INT 195
20736: PUSH
20737: LD_INT 164
20739: PUSH
20740: LD_INT 12
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: NOT
20759: IFFALSE 20763
// exit ;
20761: GO 20943
// if not IsOk ( Givi ) or not IsOk ( Kaia ) then
20763: LD_EXP 35
20767: PPUSH
20768: CALL_OW 302
20772: NOT
20773: PUSH
20774: LD_EXP 39
20778: PPUSH
20779: CALL_OW 302
20783: NOT
20784: OR
20785: IFFALSE 20789
// exit ;
20787: GO 20943
// Say ( Givi , DG-Otpst-1-1 ) ;
20789: LD_EXP 35
20793: PPUSH
20794: LD_STRING DG-Otpst-1-1
20796: PPUSH
20797: CALL_OW 88
// Say ( Kaia , DK-Otpst-1-2 ) ;
20801: LD_EXP 39
20805: PPUSH
20806: LD_STRING DK-Otpst-1-2
20808: PPUSH
20809: CALL_OW 88
// if IsOk ( Markov ) then
20813: LD_EXP 41
20817: PPUSH
20818: CALL_OW 302
20822: IFFALSE 20850
// begin Say ( Markov , DMar-Otpst-1-3 ) ;
20824: LD_EXP 41
20828: PPUSH
20829: LD_STRING DMar-Otpst-1-3
20831: PPUSH
20832: CALL_OW 88
// Say ( Markov , DMar-Otpst-1-4 ) ;
20836: LD_EXP 41
20840: PPUSH
20841: LD_STRING DMar-Otpst-1-4
20843: PPUSH
20844: CALL_OW 88
// end else
20848: GO 20931
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_EXP 49
20859: PUSH
20860: LD_INT 1
20862: PPUSH
20863: LD_EXP 49
20867: PPUSH
20868: CALL_OW 12
20872: ARRAY
20873: ST_TO_ADDR
// case GetSex ( random ) of 1 :
20874: LD_VAR 0 1
20878: PPUSH
20879: CALL_OW 258
20883: PUSH
20884: LD_INT 1
20886: DOUBLE
20887: EQUAL
20888: IFTRUE 20892
20890: GO 20907
20892: POP
// Say ( random , DArm-Otpst-1-a-3 ) ; 2 :
20893: LD_VAR 0 1
20897: PPUSH
20898: LD_STRING DArm-Otpst-1-a-3
20900: PPUSH
20901: CALL_OW 88
20905: GO 20931
20907: LD_INT 2
20909: DOUBLE
20910: EQUAL
20911: IFTRUE 20915
20913: GO 20930
20915: POP
// Say ( random , DArf-Otpst-1-a-3 ) ; end ;
20916: LD_VAR 0 1
20920: PPUSH
20921: LD_STRING DArf-Otpst-1-a-3
20923: PPUSH
20924: CALL_OW 88
20928: GO 20931
20930: POP
// end ; Say ( Givi , DG-Otpst-1-5 ) ;
20931: LD_EXP 35
20935: PPUSH
20936: LD_STRING DG-Otpst-1-5
20938: PPUSH
20939: CALL_OW 88
// end ;
20943: PPOPN 1
20945: END
// every 0 0$1 trigger GetLives ( Kaia ) < 10 do
20946: LD_EXP 39
20950: PPUSH
20951: CALL_OW 256
20955: PUSH
20956: LD_INT 10
20958: LESS
20959: IFFALSE 21073
20961: GO 20963
20963: DISABLE
// begin DialogueOn ;
20964: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
20968: LD_EXP 39
20972: PPUSH
20973: CALL_OW 87
// ForceSay ( Kaia , DK-Dead-1 ) ;
20977: LD_EXP 39
20981: PPUSH
20982: LD_STRING DK-Dead-1
20984: PPUSH
20985: CALL_OW 91
// Say ( Heike , DH-Dead-2 ) ;
20989: LD_EXP 34
20993: PPUSH
20994: LD_STRING DH-Dead-2
20996: PPUSH
20997: CALL_OW 88
// ForceSay ( Kaia , DK-Dead-3 ) ;
21001: LD_EXP 39
21005: PPUSH
21006: LD_STRING DK-Dead-3
21008: PPUSH
21009: CALL_OW 91
// Say ( Heike , DH-Dead-4 ) ;
21013: LD_EXP 34
21017: PPUSH
21018: LD_STRING DH-Dead-4
21020: PPUSH
21021: CALL_OW 88
// if IsOk ( Mike ) then
21025: LD_EXP 36
21029: PPUSH
21030: CALL_OW 302
21034: IFFALSE 21060
// begin Say ( Mike , DM-Dead-5 ) ;
21036: LD_EXP 36
21040: PPUSH
21041: LD_STRING DM-Dead-5
21043: PPUSH
21044: CALL_OW 88
// Say ( Heike , DH-Dead-6 ) ;
21048: LD_EXP 34
21052: PPUSH
21053: LD_STRING DH-Dead-6
21055: PPUSH
21056: CALL_OW 88
// end ; DialogueOff ;
21060: CALL_OW 7
// KillUnit ( Kaia ) ;
21064: LD_EXP 39
21068: PPUSH
21069: CALL_OW 66
// end ;
21073: END
// every 0 0$1 trigger tick >= 15 15$00 or ruLoseCounter > 5 or FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 103 , 81 , 20 ] ] ) do var i , tmp , dep ;
21074: LD_OWVAR 1
21078: PUSH
21079: LD_INT 31500
21081: GREATEREQUAL
21082: PUSH
21083: LD_EXP 5
21087: PUSH
21088: LD_INT 5
21090: GREATER
21091: OR
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 92
21105: PUSH
21106: LD_INT 103
21108: PUSH
21109: LD_INT 81
21111: PUSH
21112: LD_INT 20
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PPUSH
21125: CALL_OW 69
21129: OR
21130: IFFALSE 21570
21132: GO 21134
21134: DISABLE
21135: LD_INT 0
21137: PPUSH
21138: PPUSH
21139: PPUSH
// begin PrepareRolfSquad ;
21140: CALL 3531 0 0
// dep := HexInfo ( 86 , 54 ) ;
21144: LD_ADDR_VAR 0 3
21148: PUSH
21149: LD_INT 86
21151: PPUSH
21152: LD_INT 54
21154: PPUSH
21155: CALL_OW 428
21159: ST_TO_ADDR
// SetResourceType ( GetBase ( dep ) , mat_cans , 300 ) ;
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL_OW 274
21169: PPUSH
21170: LD_INT 1
21172: PPUSH
21173: LD_INT 300
21175: PPUSH
21176: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_oil , 300 ) ;
21180: LD_VAR 0 3
21184: PPUSH
21185: CALL_OW 274
21189: PPUSH
21190: LD_INT 2
21192: PPUSH
21193: LD_INT 300
21195: PPUSH
21196: CALL_OW 277
// ComAgressiveMove ( rolfSquad , 79 , 52 ) ;
21200: LD_EXP 51
21204: PPUSH
21205: LD_INT 79
21207: PPUSH
21208: LD_INT 52
21210: PPUSH
21211: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
21215: LD_INT 35
21217: PPUSH
21218: CALL_OW 67
// ComAgressiveMove ( UnitFilter ( rolfSquad , [ f_not , [ f_hastask ] ] ) , 79 , 52 ) ;
21222: LD_EXP 51
21226: PPUSH
21227: LD_INT 3
21229: PUSH
21230: LD_INT 60
21232: PUSH
21233: EMPTY
21234: LIST
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PPUSH
21240: CALL_OW 72
21244: PPUSH
21245: LD_INT 79
21247: PPUSH
21248: LD_INT 52
21250: PPUSH
21251: CALL_OW 114
// until not FilterUnitsInArea ( ruRolfBase , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
21255: LD_INT 12
21257: PPUSH
21258: LD_INT 22
21260: PUSH
21261: LD_INT 3
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 21
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 70
21286: NOT
21287: IFFALSE 21215
// tmp := FilterUnitsInArea ( ruRolfBase , [ f_type , unit_building ] ) ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: LD_INT 12
21296: PPUSH
21297: LD_INT 21
21299: PUSH
21300: LD_INT 3
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PPUSH
21307: CALL_OW 70
21311: ST_TO_ADDR
// for i in tmp do
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_VAR 0 2
21321: PUSH
21322: FOR_IN
21323: IFFALSE 21339
// SetSide ( i , 8 ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: LD_INT 8
21332: PPUSH
21333: CALL_OW 235
21337: GO 21322
21339: POP
21340: POP
// SetLives ( HexInfo ( 63 , 42 ) , 320 ) ;
21341: LD_INT 63
21343: PPUSH
21344: LD_INT 42
21346: PPUSH
21347: CALL_OW 428
21351: PPUSH
21352: LD_INT 320
21354: PPUSH
21355: CALL_OW 234
// wait ( 0 0$10 ) ;
21359: LD_INT 350
21361: PPUSH
21362: CALL_OW 67
// DialogueOn ;
21366: CALL_OW 6
// ChangeSideFog ( 8 , 2 ) ;
21370: LD_INT 8
21372: PPUSH
21373: LD_INT 2
21375: PPUSH
21376: CALL_OW 343
// SetBName ( HexInfo ( 86 , 54 ) , antwerp ) ;
21380: LD_INT 86
21382: PPUSH
21383: LD_INT 54
21385: PPUSH
21386: CALL_OW 428
21390: PPUSH
21391: LD_STRING antwerp
21393: PPUSH
21394: CALL_OW 500
// CenterNowOnUnits ( Rolf ) ;
21398: LD_EXP 47
21402: PPUSH
21403: CALL_OW 87
// SayRadio ( Rolf , DRf-rast-1 ) ;
21407: LD_EXP 47
21411: PPUSH
21412: LD_STRING DRf-rast-1
21414: PPUSH
21415: CALL_OW 94
// Say ( Heike , DH-rast-2 ) ;
21419: LD_EXP 34
21423: PPUSH
21424: LD_STRING DH-rast-2
21426: PPUSH
21427: CALL_OW 88
// SayRadio ( Rolf , DRf-rast-3 ) ;
21431: LD_EXP 47
21435: PPUSH
21436: LD_STRING DRf-rast-3
21438: PPUSH
21439: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-4 ) ;
21443: LD_EXP 47
21447: PPUSH
21448: LD_STRING DRf-rast-4
21450: PPUSH
21451: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-5 ) ;
21455: LD_EXP 47
21459: PPUSH
21460: LD_STRING DRf-rast-5
21462: PPUSH
21463: CALL_OW 94
// if IsOk ( Aviradze ) then
21467: LD_EXP 46
21471: PPUSH
21472: CALL_OW 302
21476: IFFALSE 21535
// begin CenterNowOnUnits ( Aviradze ) ;
21478: LD_EXP 46
21482: PPUSH
21483: CALL_OW 87
// Say ( Aviradze , DA-rast-6 ) ;
21487: LD_EXP 46
21491: PPUSH
21492: LD_STRING DA-rast-6
21494: PPUSH
21495: CALL_OW 88
// Say ( Heike , DH-rast-7 ) ;
21499: LD_EXP 34
21503: PPUSH
21504: LD_STRING DH-rast-7
21506: PPUSH
21507: CALL_OW 88
// Say ( Givi , DG-rast-8 ) ;
21511: LD_EXP 35
21515: PPUSH
21516: LD_STRING DG-rast-8
21518: PPUSH
21519: CALL_OW 88
// Say ( Givi , DG-rast-9 ) ;
21523: LD_EXP 35
21527: PPUSH
21528: LD_STRING DG-rast-9
21530: PPUSH
21531: CALL_OW 88
// end ; Say ( Heike , DH-rast-10 ) ;
21535: LD_EXP 34
21539: PPUSH
21540: LD_STRING DH-rast-10
21542: PPUSH
21543: CALL_OW 88
// DialogueOff ;
21547: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
21551: LD_STRING M2
21553: PPUSH
21554: CALL_OW 337
// bergkampfArrived := true ;
21558: LD_ADDR_EXP 3
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// PrepareRolfBase ;
21566: CALL 3862 0 0
// end ;
21570: PPOPN 3
21572: END
// every 0 0$1 trigger FilterUnitsInArea ( ruRolfBase , [ f_side , 2 ] ) and IsOk ( Rolf ) and canRolfJoin do var i ;
21573: LD_INT 12
21575: PPUSH
21576: LD_INT 22
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: PPUSH
21586: CALL_OW 70
21590: PUSH
21591: LD_EXP 47
21595: PPUSH
21596: CALL_OW 302
21600: AND
21601: PUSH
21602: LD_EXP 29
21606: AND
21607: IFFALSE 22167
21609: GO 21611
21611: DISABLE
21612: LD_INT 0
21614: PPUSH
// begin rolfScriptBase := false ;
21615: LD_ADDR_EXP 9
21619: PUSH
21620: LD_INT 0
21622: ST_TO_ADDR
// DialogueOn ;
21623: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
21627: LD_EXP 47
21631: PPUSH
21632: CALL_OW 87
// if rolfSquad >= 10 then
21636: LD_EXP 51
21640: PUSH
21641: LD_INT 10
21643: GREATEREQUAL
21644: IFFALSE 21823
// begin linkedWithRolf := 2 ;
21646: LD_ADDR_EXP 12
21650: PUSH
21651: LD_INT 2
21653: ST_TO_ADDR
// Say ( Rolf , DRf-rast-11 ) ;
21654: LD_EXP 47
21658: PPUSH
21659: LD_STRING DRf-rast-11
21661: PPUSH
21662: CALL_OW 88
// Say ( Heike , DH-rast-12 ) ;
21666: LD_EXP 34
21670: PPUSH
21671: LD_STRING DH-rast-12
21673: PPUSH
21674: CALL_OW 88
// Say ( Rolf , DRf-rast-13 ) ;
21678: LD_EXP 47
21682: PPUSH
21683: LD_STRING DRf-rast-13
21685: PPUSH
21686: CALL_OW 88
// Say ( Heike , DH-rast-14 ) ;
21690: LD_EXP 34
21694: PPUSH
21695: LD_STRING DH-rast-14
21697: PPUSH
21698: CALL_OW 88
// Say ( Rolf , DRf-rast-15 ) ;
21702: LD_EXP 47
21706: PPUSH
21707: LD_STRING DRf-rast-15
21709: PPUSH
21710: CALL_OW 88
// Say ( Heike , DH-rast-16 ) ;
21714: LD_EXP 34
21718: PPUSH
21719: LD_STRING DH-rast-16
21721: PPUSH
21722: CALL_OW 88
// if IsOk ( Mike ) then
21726: LD_EXP 36
21730: PPUSH
21731: CALL_OW 302
21735: IFFALSE 21809
// begin Say ( Mike , DM-rast-17 ) ;
21737: LD_EXP 36
21741: PPUSH
21742: LD_STRING DM-rast-17
21744: PPUSH
21745: CALL_OW 88
// Say ( Heike , DH-rast-18 ) ;
21749: LD_EXP 34
21753: PPUSH
21754: LD_STRING DH-rast-18
21756: PPUSH
21757: CALL_OW 88
// Say ( Mike , DM-rast-19 ) ;
21761: LD_EXP 36
21765: PPUSH
21766: LD_STRING DM-rast-19
21768: PPUSH
21769: CALL_OW 88
// Say ( Heike , DH-rast-20 ) ;
21773: LD_EXP 34
21777: PPUSH
21778: LD_STRING DH-rast-20
21780: PPUSH
21781: CALL_OW 88
// Say ( Mike , DM-rast-21 ) ;
21785: LD_EXP 36
21789: PPUSH
21790: LD_STRING DM-rast-21
21792: PPUSH
21793: CALL_OW 88
// Say ( Heike , DH-rast-22 ) ;
21797: LD_EXP 34
21801: PPUSH
21802: LD_STRING DH-rast-22
21804: PPUSH
21805: CALL_OW 88
// end ; Say ( Heike , DH-rast-23 ) ;
21809: LD_EXP 34
21813: PPUSH
21814: LD_STRING DH-rast-23
21816: PPUSH
21817: CALL_OW 88
// end else
21821: GO 21973
// begin linkedWithRolf := 1 ;
21823: LD_ADDR_EXP 12
21827: PUSH
21828: LD_INT 1
21830: ST_TO_ADDR
// Say ( Rolf , DRf-rast-a-11 ) ;
21831: LD_EXP 47
21835: PPUSH
21836: LD_STRING DRf-rast-a-11
21838: PPUSH
21839: CALL_OW 88
// Say ( Heike , DH-rast-a-12 ) ;
21843: LD_EXP 34
21847: PPUSH
21848: LD_STRING DH-rast-a-12
21850: PPUSH
21851: CALL_OW 88
// if IsOk ( Kurt ) then
21855: LD_EXP 45
21859: PPUSH
21860: CALL_OW 302
21864: IFFALSE 21961
// begin Say ( Kurt , DKs-rast-a-13 ) ;
21866: LD_EXP 45
21870: PPUSH
21871: LD_STRING DKs-rast-a-13
21873: PPUSH
21874: CALL_OW 88
// Say ( Rolf , DRf-rast-a-14 ) ;
21878: LD_EXP 47
21882: PPUSH
21883: LD_STRING DRf-rast-a-14
21885: PPUSH
21886: CALL_OW 88
// Say ( Rolf , DRf-rast-a-15 ) ;
21890: LD_EXP 47
21894: PPUSH
21895: LD_STRING DRf-rast-a-15
21897: PPUSH
21898: CALL_OW 88
// Say ( Kurt , DKs-rast-a-16 ) ;
21902: LD_EXP 45
21906: PPUSH
21907: LD_STRING DKs-rast-a-16
21909: PPUSH
21910: CALL_OW 88
// if IsOk ( Givi ) then
21914: LD_EXP 35
21918: PPUSH
21919: CALL_OW 302
21923: IFFALSE 21961
// begin Say ( Givi , DG-rast-a-17 ) ;
21925: LD_EXP 35
21929: PPUSH
21930: LD_STRING DG-rast-a-17
21932: PPUSH
21933: CALL_OW 88
// Say ( Givi , DG-rast-a-18 ) ;
21937: LD_EXP 35
21941: PPUSH
21942: LD_STRING DG-rast-a-18
21944: PPUSH
21945: CALL_OW 88
// Say ( Kurt , DKs-rast-a-19 ) ;
21949: LD_EXP 45
21953: PPUSH
21954: LD_STRING DKs-rast-a-19
21956: PPUSH
21957: CALL_OW 88
// end ; end ; Say ( Heike , DH-rast-a-20 ) ;
21961: LD_EXP 34
21965: PPUSH
21966: LD_STRING DH-rast-a-20
21968: PPUSH
21969: CALL_OW 88
// end ; Say ( Rolf , DRf-rast-24 ) ;
21973: LD_EXP 47
21977: PPUSH
21978: LD_STRING DRf-rast-24
21980: PPUSH
21981: CALL_OW 88
// if IsOk ( Aviradze ) then
21985: LD_EXP 46
21989: PPUSH
21990: CALL_OW 302
21994: IFFALSE 22094
// begin Say ( Aviradze , DA-rast-25 ) ;
21996: LD_EXP 46
22000: PPUSH
22001: LD_STRING DA-rast-25
22003: PPUSH
22004: CALL_OW 88
// Say ( Heike , DH-rast-26 ) ;
22008: LD_EXP 34
22012: PPUSH
22013: LD_STRING DH-rast-26
22015: PPUSH
22016: CALL_OW 88
// Say ( Aviradze , DA-rast-27 ) ;
22020: LD_EXP 46
22024: PPUSH
22025: LD_STRING DA-rast-27
22027: PPUSH
22028: CALL_OW 88
// if IsOk ( Markov ) then
22032: LD_EXP 41
22036: PPUSH
22037: CALL_OW 302
22041: IFFALSE 22069
// begin Say ( Markov , DMar-rast-28 ) ;
22043: LD_EXP 41
22047: PPUSH
22048: LD_STRING DMar-rast-28
22050: PPUSH
22051: CALL_OW 88
// Say ( Markov , DMar-rast-29 ) ;
22055: LD_EXP 41
22059: PPUSH
22060: LD_STRING DMar-rast-29
22062: PPUSH
22063: CALL_OW 88
// end else
22067: GO 22092
// if IsOk ( Sophia ) then
22069: LD_EXP 40
22073: PPUSH
22074: CALL_OW 302
22078: IFFALSE 22092
// begin Say ( Sophia , DS-rast-28 ) ;
22080: LD_EXP 40
22084: PPUSH
22085: LD_STRING DS-rast-28
22087: PPUSH
22088: CALL_OW 88
// end ; end else
22092: GO 22117
// if IsOk ( Sophia ) then
22094: LD_EXP 40
22098: PPUSH
22099: CALL_OW 302
22103: IFFALSE 22117
// Say ( Sophia , DS-rast-29 ) ;
22105: LD_EXP 40
22109: PPUSH
22110: LD_STRING DS-rast-29
22112: PPUSH
22113: CALL_OW 88
// DialogueOff ;
22117: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
22121: LD_STRING M3
22123: PPUSH
22124: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
22128: LD_ADDR_VAR 0 1
22132: PUSH
22133: LD_INT 22
22135: PUSH
22136: LD_INT 8
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: PUSH
22148: FOR_IN
22149: IFFALSE 22165
// SetSide ( i , 2 ) ;
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_INT 2
22158: PPUSH
22159: CALL_OW 235
22163: GO 22148
22165: POP
22166: POP
// end ;
22167: PPOPN 1
22169: END
// every 0 0$1 trigger omarAttack and not linkedWithRolf and canRolfJoin do var i ;
22170: LD_EXP 23
22174: PUSH
22175: LD_EXP 12
22179: NOT
22180: AND
22181: PUSH
22182: LD_EXP 29
22186: AND
22187: IFFALSE 22278
22189: GO 22191
22191: DISABLE
22192: LD_INT 0
22194: PPUSH
// begin canRolfJoin := false ;
22195: LD_ADDR_EXP 29
22199: PUSH
22200: LD_INT 0
22202: ST_TO_ADDR
// ChangeMissionObjectives ( M3 ) ;
22203: LD_STRING M3
22205: PPUSH
22206: CALL_OW 337
// for i in rolfSquad do
22210: LD_ADDR_VAR 0 1
22214: PUSH
22215: LD_EXP 51
22219: PUSH
22220: FOR_IN
22221: IFFALSE 22276
// begin ComExit ( i ) ;
22223: LD_VAR 0 1
22227: PPUSH
22228: CALL 67573 0 1
// AddComAgressiveMove ( i , 147 , 162 ) ;
22232: LD_VAR 0 1
22236: PPUSH
22237: LD_INT 147
22239: PPUSH
22240: LD_INT 162
22242: PPUSH
22243: CALL_OW 174
// AddComWait ( i , 0 0$30 ) ;
22247: LD_VAR 0 1
22251: PPUSH
22252: LD_INT 1050
22254: PPUSH
22255: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 162 ) ;
22259: LD_VAR 0 1
22263: PPUSH
22264: LD_INT 103
22266: PPUSH
22267: LD_INT 162
22269: PPUSH
22270: CALL_OW 174
// end ;
22274: GO 22220
22276: POP
22277: POP
// end ;
22278: PPOPN 1
22280: END
// every 0 0$1 trigger bergkampfArrived and GetLives ( Rolf ) < 400 and not linkedWithRolf and canRolfJoin do var random ;
22281: LD_EXP 3
22285: PUSH
22286: LD_EXP 47
22290: PPUSH
22291: CALL_OW 256
22295: PUSH
22296: LD_INT 400
22298: LESS
22299: AND
22300: PUSH
22301: LD_EXP 12
22305: NOT
22306: AND
22307: PUSH
22308: LD_EXP 29
22312: AND
22313: IFFALSE 22587
22315: GO 22317
22317: DISABLE
22318: LD_INT 0
22320: PPUSH
// begin DialogueOn ;
22321: CALL_OW 6
// SayRadio ( Rolf , DRf-rast-f-11 ) ;
22325: LD_EXP 47
22329: PPUSH
22330: LD_STRING DRf-rast-f-11
22332: PPUSH
22333: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-12 ) ;
22337: LD_EXP 47
22341: PPUSH
22342: LD_STRING DRf-rast-f-12
22344: PPUSH
22345: CALL_OW 94
// SayRadio ( Rolf , DRf-rast-f-13 ) ;
22349: LD_EXP 47
22353: PPUSH
22354: LD_STRING DRf-rast-f-13
22356: PPUSH
22357: CALL_OW 94
// DialogueOff ;
22361: CALL_OW 7
// KillUnit ( Rolf ) ;
22365: LD_EXP 47
22369: PPUSH
22370: CALL_OW 66
// wait ( 0 0$1 ) ;
22374: LD_INT 35
22376: PPUSH
22377: CALL_OW 67
// if not IsOk ( Givi ) then
22381: LD_EXP 35
22385: PPUSH
22386: CALL_OW 302
22390: NOT
22391: IFFALSE 22395
// exit ;
22393: GO 22587
// DialogueOn ;
22395: CALL_OW 6
// Say ( Givi , DG-rast-f-14 ) ;
22399: LD_EXP 35
22403: PPUSH
22404: LD_STRING DG-rast-f-14
22406: PPUSH
22407: CALL_OW 88
// Say ( Givi , DG-rast-f-15 ) ;
22411: LD_EXP 35
22415: PPUSH
22416: LD_STRING DG-rast-f-15
22418: PPUSH
22419: CALL_OW 88
// if IsOk ( Kaia ) then
22423: LD_EXP 39
22427: PPUSH
22428: CALL_OW 302
22432: IFFALSE 22448
// Say ( Kaia , DK-rast-f-16 ) else
22434: LD_EXP 39
22438: PPUSH
22439: LD_STRING DK-rast-f-16
22441: PPUSH
22442: CALL_OW 88
22446: GO 22535
// if heikeSecondSquad then
22448: LD_EXP 49
22452: IFFALSE 22535
// begin random := heikeSecondSquad [ rand ( 1 , heikeSecondSquad ) ] ;
22454: LD_ADDR_VAR 0 1
22458: PUSH
22459: LD_EXP 49
22463: PUSH
22464: LD_INT 1
22466: PPUSH
22467: LD_EXP 49
22471: PPUSH
22472: CALL_OW 12
22476: ARRAY
22477: ST_TO_ADDR
// case GetSex ( random ) of 1 :
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 258
22487: PUSH
22488: LD_INT 1
22490: DOUBLE
22491: EQUAL
22492: IFTRUE 22496
22494: GO 22511
22496: POP
// Say ( random , DArm-rast-f-a-16 ) ; 2 :
22497: LD_VAR 0 1
22501: PPUSH
22502: LD_STRING DArm-rast-f-a-16
22504: PPUSH
22505: CALL_OW 88
22509: GO 22535
22511: LD_INT 2
22513: DOUBLE
22514: EQUAL
22515: IFTRUE 22519
22517: GO 22534
22519: POP
// Say ( random , DArf-rast-f-a-16 ) ; end ;
22520: LD_VAR 0 1
22524: PPUSH
22525: LD_STRING DArf-rast-f-a-16
22527: PPUSH
22528: CALL_OW 88
22532: GO 22535
22534: POP
// end ; Say ( Givi , DG-rast-f-17 ) ;
22535: LD_EXP 35
22539: PPUSH
22540: LD_STRING DG-rast-f-17
22542: PPUSH
22543: CALL_OW 88
// Say ( Givi , DG-rast-f-18 ) ;
22547: LD_EXP 35
22551: PPUSH
22552: LD_STRING DG-rast-f-18
22554: PPUSH
22555: CALL_OW 88
// Say ( Givi , DG-rast-f-19 ) ;
22559: LD_EXP 35
22563: PPUSH
22564: LD_STRING DG-rast-f-19
22566: PPUSH
22567: CALL_OW 88
// Say ( Givi , DG-rast-f-20 ) ;
22571: LD_EXP 35
22575: PPUSH
22576: LD_STRING DG-rast-f-20
22578: PPUSH
22579: CALL_OW 88
// DialogueOff ;
22583: CALL_OW 7
// end ;
22587: PPOPN 1
22589: END
// every 0 0$1 trigger gameActive and SeeArea ( 2 , ruMainBase ) do
22590: LD_EXP 31
22594: PUSH
22595: LD_INT 2
22597: PPUSH
22598: LD_INT 10
22600: PPUSH
22601: CALL_OW 294
22605: AND
22606: IFFALSE 22679
22608: GO 22610
22610: DISABLE
// begin Say ( Givi , DG-Len-1 ) ;
22611: LD_EXP 35
22615: PPUSH
22616: LD_STRING DG-Len-1
22618: PPUSH
22619: CALL_OW 88
// Say ( Kurt , DKs-Len-2 ) ;
22623: LD_EXP 45
22627: PPUSH
22628: LD_STRING DKs-Len-2
22630: PPUSH
22631: CALL_OW 88
// Say ( Kurt , DKs-Len-3 ) ;
22635: LD_EXP 45
22639: PPUSH
22640: LD_STRING DKs-Len-3
22642: PPUSH
22643: CALL_OW 88
// Say ( Heike , DH-Len-4 ) ;
22647: LD_EXP 34
22651: PPUSH
22652: LD_STRING DH-Len-4
22654: PPUSH
22655: CALL_OW 88
// Say ( Kaia , DK-Len-5 ) ;
22659: LD_EXP 39
22663: PPUSH
22664: LD_STRING DK-Len-5
22666: PPUSH
22667: CALL_OW 88
// leninSpotted := true ;
22671: LD_ADDR_EXP 14
22675: PUSH
22676: LD_INT 1
22678: ST_TO_ADDR
// end ;
22679: END
// every 0 0$1 trigger debug or ( bergkampfArrived and tick > [ 32 32$00 , 30 30$00 , 28 28$00 , 26 26$00 ] [ Difficulty ] ) do var i , tmp , inOmarBase , heikeNearbyOmar ;
22680: LD_EXP 1
22684: PUSH
22685: LD_EXP 3
22689: PUSH
22690: LD_OWVAR 1
22694: PUSH
22695: LD_INT 67200
22697: PUSH
22698: LD_INT 63000
22700: PUSH
22701: LD_INT 58800
22703: PUSH
22704: LD_INT 54600
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: LD_OWVAR 67
22717: ARRAY
22718: GREATER
22719: AND
22720: OR
22721: IFFALSE 23458
22723: GO 22725
22725: DISABLE
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
22731: PPUSH
// begin PrepareOmarSquad ;
22732: CALL 5144 0 0
// repeat wait ( 0 0$1 ) ;
22736: LD_INT 35
22738: PPUSH
22739: CALL_OW 67
// until not FilterUnitsInArea ( ruOmarBase , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
22743: LD_INT 14
22745: PPUSH
22746: LD_INT 22
22748: PUSH
22749: LD_INT 3
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 21
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 59
22771: PUSH
22772: EMPTY
22773: LIST
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: LIST
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PPUSH
22784: CALL_OW 70
22788: NOT
22789: IFFALSE 22736
// tmp := FilterUnitsInArea ( ruOmarBase , [ f_side , 2 ] ) ;
22791: LD_ADDR_VAR 0 2
22795: PUSH
22796: LD_INT 14
22798: PPUSH
22799: LD_INT 22
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PPUSH
22809: CALL_OW 70
22813: ST_TO_ADDR
// inOmarBase := tmp > 0 ;
22814: LD_ADDR_VAR 0 3
22818: PUSH
22819: LD_VAR 0 2
22823: PUSH
22824: LD_INT 0
22826: GREATER
22827: ST_TO_ADDR
// heikeNearbyOmar := IsInArea ( Heike , ruOmarBase ) ;
22828: LD_ADDR_VAR 0 4
22832: PUSH
22833: LD_EXP 34
22837: PPUSH
22838: LD_INT 14
22840: PPUSH
22841: CALL_OW 308
22845: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_type , unit_building ] ) then
22846: LD_VAR 0 2
22850: PPUSH
22851: LD_INT 21
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 72
22865: IFFALSE 22970
// begin if heikeNearbyOmar then
22867: LD_VAR 0 4
22871: IFFALSE 22887
// Say ( Omar , DOm-Base-1b ) else
22873: LD_EXP 44
22877: PPUSH
22878: LD_STRING DOm-Base-1b
22880: PPUSH
22881: CALL_OW 88
22885: GO 22899
// SayRadio ( Omar , DOm-Base-1br ) ;
22887: LD_EXP 44
22891: PPUSH
22892: LD_STRING DOm-Base-1br
22894: PPUSH
22895: CALL_OW 94
// for i in UnitFilter ( tmp , [ f_type , unit_building ] ) do
22899: LD_ADDR_VAR 0 1
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: LD_INT 21
22911: PUSH
22912: LD_INT 3
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PPUSH
22919: CALL_OW 72
22923: PUSH
22924: FOR_IN
22925: IFFALSE 22966
// begin if UnitsInside ( i ) then
22927: LD_VAR 0 1
22931: PPUSH
22932: CALL_OW 313
22936: IFFALSE 22952
// ComExitBuilding ( UnitsInside ( i ) ) ;
22938: LD_VAR 0 1
22942: PPUSH
22943: CALL_OW 313
22947: PPUSH
22948: CALL_OW 122
// SetSide ( i , 5 ) ;
22952: LD_VAR 0 1
22956: PPUSH
22957: LD_INT 5
22959: PPUSH
22960: CALL_OW 235
// end ;
22964: GO 22924
22966: POP
22967: POP
// end else
22968: GO 23063
// if UnitFilter ( tmp , [ f_type , unit_vehicle ] ) then
22970: LD_VAR 0 2
22974: PPUSH
22975: LD_INT 21
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 72
22989: IFFALSE 23025
// begin if heikeNearbyOmar then
22991: LD_VAR 0 4
22995: IFFALSE 23011
// Say ( Omar , DOm-Base-1v ) else
22997: LD_EXP 44
23001: PPUSH
23002: LD_STRING DOm-Base-1v
23004: PPUSH
23005: CALL_OW 88
23009: GO 23023
// SayRadio ( Omar , DOm-Base-1vr ) end else
23011: LD_EXP 44
23015: PPUSH
23016: LD_STRING DOm-Base-1vr
23018: PPUSH
23019: CALL_OW 94
23023: GO 23063
// if inOmarBase then
23025: LD_VAR 0 3
23029: IFFALSE 23063
// begin if heikeNearbyOmar then
23031: LD_VAR 0 4
23035: IFFALSE 23051
// Say ( Omar , DOm-Base-1h ) else
23037: LD_EXP 44
23041: PPUSH
23042: LD_STRING DOm-Base-1h
23044: PPUSH
23045: CALL_OW 88
23049: GO 23063
// SayRadio ( Omar , DOm-Base-1hr ) end ;
23051: LD_EXP 44
23055: PPUSH
23056: LD_STRING DOm-Base-1hr
23058: PPUSH
23059: CALL_OW 94
// for i in omarSquad do
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_EXP 52
23072: PUSH
23073: FOR_IN
23074: IFFALSE 23105
// if GetLives ( i ) < 750 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 256
23085: PUSH
23086: LD_INT 750
23088: LESS
23089: IFFALSE 23103
// SetLives ( i , 1000 ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_INT 1000
23098: PPUSH
23099: CALL_OW 234
23103: GO 23073
23105: POP
23106: POP
// for i in FilterUnitsInArea ( ruOmarBase , [ f_type , unit_building ] ) do
23107: LD_ADDR_VAR 0 1
23111: PUSH
23112: LD_INT 14
23114: PPUSH
23115: LD_INT 21
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 70
23129: PUSH
23130: FOR_IN
23131: IFFALSE 23147
// SetSide ( i , 5 ) ;
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_INT 5
23140: PPUSH
23141: CALL_OW 235
23145: GO 23130
23147: POP
23148: POP
// wait ( 0 0$3 ) ;
23149: LD_INT 105
23151: PPUSH
23152: CALL_OW 67
// ChangeSideFog ( 5 , 2 ) ;
23156: LD_INT 5
23158: PPUSH
23159: LD_INT 2
23161: PPUSH
23162: CALL_OW 343
// CenterNowOnUnits ( Omar ) ;
23166: LD_EXP 44
23170: PPUSH
23171: CALL_OW 87
// DialogueOn ;
23175: CALL_OW 6
// if heikeNearbyOmar then
23179: LD_VAR 0 4
23183: IFFALSE 23241
// begin Say ( Omar , DOm-Veh-1a ) ;
23185: LD_EXP 44
23189: PPUSH
23190: LD_STRING DOm-Veh-1a
23192: PPUSH
23193: CALL_OW 88
// Say ( Omar , DOm-Veh-2a ) ;
23197: LD_EXP 44
23201: PPUSH
23202: LD_STRING DOm-Veh-2a
23204: PPUSH
23205: CALL_OW 88
// Say ( Omar , DOm-Veh-3a ) ;
23209: LD_EXP 44
23213: PPUSH
23214: LD_STRING DOm-Veh-3a
23216: PPUSH
23217: CALL_OW 88
// if mortarConstructed then
23221: LD_EXP 15
23225: IFFALSE 23239
// Say ( Omar , DOm-Veh-4a ) ;
23227: LD_EXP 44
23231: PPUSH
23232: LD_STRING DOm-Veh-4a
23234: PPUSH
23235: CALL_OW 88
// end else
23239: GO 23295
// begin SayRadio ( Omar , DOm-Veh-1 ) ;
23241: LD_EXP 44
23245: PPUSH
23246: LD_STRING DOm-Veh-1
23248: PPUSH
23249: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-2 ) ;
23253: LD_EXP 44
23257: PPUSH
23258: LD_STRING DOm-Veh-2
23260: PPUSH
23261: CALL_OW 94
// SayRadio ( Omar , DOm-Veh-3 ) ;
23265: LD_EXP 44
23269: PPUSH
23270: LD_STRING DOm-Veh-3
23272: PPUSH
23273: CALL_OW 94
// if mortarConstructed then
23277: LD_EXP 15
23281: IFFALSE 23295
// SayRadio ( Omar , DOm-Veh-4 ) ;
23283: LD_EXP 44
23287: PPUSH
23288: LD_STRING DOm-Veh-4
23290: PPUSH
23291: CALL_OW 94
// end ; Say ( Heike , DH-Veh-5 ) ;
23295: LD_EXP 34
23299: PPUSH
23300: LD_STRING DH-Veh-5
23302: PPUSH
23303: CALL_OW 88
// if IsOk ( Kurt ) then
23307: LD_EXP 45
23311: PPUSH
23312: CALL_OW 302
23316: IFFALSE 23366
// begin Say ( Kurt , DKs-Veh-6 ) ;
23318: LD_EXP 45
23322: PPUSH
23323: LD_STRING DKs-Veh-6
23325: PPUSH
23326: CALL_OW 88
// Say ( Kurt , DKs-Veh-7 ) ;
23330: LD_EXP 45
23334: PPUSH
23335: LD_STRING DKs-Veh-7
23337: PPUSH
23338: CALL_OW 88
// Say ( Givi , DG-Veh-8 ) ;
23342: LD_EXP 35
23346: PPUSH
23347: LD_STRING DG-Veh-8
23349: PPUSH
23350: CALL_OW 88
// Say ( Mike , DM-Veh-9 ) ;
23354: LD_EXP 36
23358: PPUSH
23359: LD_STRING DM-Veh-9
23361: PPUSH
23362: CALL_OW 88
// end ; DialogueOff ;
23366: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
23370: LD_STRING M4
23372: PPUSH
23373: CALL_OW 337
// ComEnterUnit ( Omar , HexInfo ( 341 , 232 ) ) ;
23377: LD_EXP 44
23381: PPUSH
23382: LD_INT 341
23384: PPUSH
23385: LD_INT 232
23387: PPUSH
23388: CALL_OW 428
23392: PPUSH
23393: CALL_OW 120
// omarArrived := true ;
23397: LD_ADDR_EXP 6
23401: PUSH
23402: LD_INT 1
23404: ST_TO_ADDR
// omarScriptBase := true ;
23405: LD_ADDR_EXP 10
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// omarWantVehicles := true ;
23413: LD_ADDR_EXP 18
23417: PUSH
23418: LD_INT 1
23420: ST_TO_ADDR
// if debug then
23421: LD_EXP 1
23425: IFFALSE 23458
// begin wait ( 0 0$25 ) ;
23427: LD_INT 875
23429: PPUSH
23430: CALL_OW 67
// omarScriptBase := false ;
23434: LD_ADDR_EXP 10
23438: PUSH
23439: LD_INT 0
23441: ST_TO_ADDR
// omarWantVehicles := false ;
23442: LD_ADDR_EXP 18
23446: PUSH
23447: LD_INT 0
23449: ST_TO_ADDR
// omarAttack := true ;
23450: LD_ADDR_EXP 23
23454: PUSH
23455: LD_INT 1
23457: ST_TO_ADDR
// end ; end ;
23458: PPOPN 4
23460: END
// every 0 0$1 trigger FilterUnitsInArea ( ruMainBase , [ f_side , 2 ] ) and omarArrived and IsOk ( Omar ) and not omarAttack do
23461: LD_INT 10
23463: PPUSH
23464: LD_INT 22
23466: PUSH
23467: LD_INT 2
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 70
23478: PUSH
23479: LD_EXP 6
23483: AND
23484: PUSH
23485: LD_EXP 44
23489: PPUSH
23490: CALL_OW 302
23494: AND
23495: PUSH
23496: LD_EXP 23
23500: NOT
23501: AND
23502: IFFALSE 23519
23504: GO 23506
23506: DISABLE
// SayRadio ( Omar , DOm-Lenin ) ;
23507: LD_EXP 44
23511: PPUSH
23512: LD_STRING DOm-Lenin
23514: PPUSH
23515: CALL_OW 94
23519: END
// every 0 0$3 trigger IsOk ( Rolf ) and linkedWithRolf and omarArrived do
23520: LD_EXP 47
23524: PPUSH
23525: CALL_OW 302
23529: PUSH
23530: LD_EXP 12
23534: AND
23535: PUSH
23536: LD_EXP 6
23540: AND
23541: IFFALSE 23645
23543: GO 23545
23545: DISABLE
// begin wait ( 1 1$00 ) ;
23546: LD_INT 2100
23548: PPUSH
23549: CALL_OW 67
// CenterNowOnUnits ( Rolf ) ;
23553: LD_EXP 47
23557: PPUSH
23558: CALL_OW 87
// DialogueOn ;
23562: CALL_OW 6
// Say ( Rolf , DRf-Veh-10 ) ;
23566: LD_EXP 47
23570: PPUSH
23571: LD_STRING DRf-Veh-10
23573: PPUSH
23574: CALL_OW 88
// Say ( Rolf , DRf-Veh-11 ) ;
23578: LD_EXP 47
23582: PPUSH
23583: LD_STRING DRf-Veh-11
23585: PPUSH
23586: CALL_OW 88
// Say ( Heike , DH-Veh-12 ) ;
23590: LD_EXP 34
23594: PPUSH
23595: LD_STRING DH-Veh-12
23597: PPUSH
23598: CALL_OW 88
// Say ( Heike , DH-Veh-13 ) ;
23602: LD_EXP 34
23606: PPUSH
23607: LD_STRING DH-Veh-13
23609: PPUSH
23610: CALL_OW 88
// Say ( Rolf , DRf-Veh-14 ) ;
23614: LD_EXP 47
23618: PPUSH
23619: LD_STRING DRf-Veh-14
23621: PPUSH
23622: CALL_OW 88
// DialogueOff ;
23626: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
23630: LD_STRING M5
23632: PPUSH
23633: CALL_OW 337
// rolfWantVehicles := true ;
23637: LD_ADDR_EXP 17
23641: PUSH
23642: LD_INT 1
23644: ST_TO_ADDR
// end ;
23645: END
// every 0 0$1 trigger omarWantVehicles do var i , tmp , eng , mech , workshop , armoury ;
23646: LD_EXP 18
23650: IFFALSE 24413
23652: GO 23654
23654: DISABLE
23655: LD_INT 0
23657: PPUSH
23658: PPUSH
23659: PPUSH
23660: PPUSH
23661: PPUSH
23662: PPUSH
// begin wait ( 0 0$3 ) ;
23663: LD_INT 105
23665: PPUSH
23666: CALL_OW 67
// Hint ( OmarVehicles ) ;
23670: LD_STRING OmarVehicles
23672: PPUSH
23673: CALL_OW 339
// SetAreaMapShow ( omarVehiclesArea , 1 ) ;
23677: LD_INT 16
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
23687: LD_INT 35
23689: PPUSH
23690: CALL_OW 67
// omarWaitingForVehiclesTimer := omarWaitingForVehiclesTimer - 0 0$1 ;
23694: LD_ADDR_EXP 20
23698: PUSH
23699: LD_EXP 20
23703: PUSH
23704: LD_INT 35
23706: MINUS
23707: ST_TO_ADDR
// if omarWaitingForVehiclesTimer <= 0 0$00 then
23708: LD_EXP 20
23712: PUSH
23713: LD_INT 0
23715: LESSEQUAL
23716: IFFALSE 23816
// begin display_strings := [ ] ;
23718: LD_ADDR_OWVAR 47
23722: PUSH
23723: EMPTY
23724: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
23725: LD_STRING M4a
23727: PPUSH
23728: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23732: LD_INT 16
23734: PPUSH
23735: LD_INT 0
23737: PPUSH
23738: CALL_OW 424
// DialogueOn ;
23742: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-b-15 ) ;
23746: LD_EXP 44
23750: PPUSH
23751: LD_STRING DOm-Veh-b-15
23753: PPUSH
23754: CALL_OW 94
// Say ( Heike , DH-Veh-b-16 ) ;
23758: LD_EXP 34
23762: PPUSH
23763: LD_STRING DH-Veh-b-16
23765: PPUSH
23766: CALL_OW 88
// SayRadio ( Omar , DOm-Veh-b-17 ) ;
23770: LD_EXP 44
23774: PPUSH
23775: LD_STRING DOm-Veh-b-17
23777: PPUSH
23778: CALL_OW 94
// Say ( Kaia , DK-Veh-b-18 ) ;
23782: LD_EXP 39
23786: PPUSH
23787: LD_STRING DK-Veh-b-18
23789: PPUSH
23790: CALL_OW 88
// DialogueOff ;
23794: CALL_OW 7
// omarAttack := true ;
23798: LD_ADDR_EXP 23
23802: PUSH
23803: LD_INT 1
23805: ST_TO_ADDR
// omarScriptBase := false ;
23806: LD_ADDR_EXP 10
23810: PUSH
23811: LD_INT 0
23813: ST_TO_ADDR
// exit ;
23814: GO 24413
// end ; until omarVehiclesCounter <= FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_crane ] , [ f_weapon , ar_control_tower ] ] ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
23816: LD_EXP 21
23820: PUSH
23821: LD_INT 16
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 2
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 21
23836: PUSH
23837: LD_INT 2
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 3
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 34
23852: PUSH
23853: LD_INT 32
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 34
23862: PUSH
23863: LD_INT 88
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 34
23872: PUSH
23873: LD_INT 31
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 33
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 58
23902: PUSH
23903: EMPTY
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: PPUSH
23913: CALL_OW 70
23917: LESSEQUAL
23918: IFFALSE 23687
// omarWaitingForVehiclesTimer := 0 0$00 ;
23920: LD_ADDR_EXP 20
23924: PUSH
23925: LD_INT 0
23927: ST_TO_ADDR
// display_strings := [ ] ;
23928: LD_ADDR_OWVAR 47
23932: PUSH
23933: EMPTY
23934: ST_TO_ADDR
// DialogueOn ;
23935: CALL_OW 6
// SayRadio ( Omar , DOm-Veh-a-15 ) ;
23939: LD_EXP 44
23943: PPUSH
23944: LD_STRING DOm-Veh-a-15
23946: PPUSH
23947: CALL_OW 94
// Say ( Kaia , DK-Veh-a-16 ) ;
23951: LD_EXP 39
23955: PPUSH
23956: LD_STRING DK-Veh-a-16
23958: PPUSH
23959: CALL_OW 88
// DialogueOff ;
23963: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
23967: LD_STRING M4a
23969: PPUSH
23970: CALL_OW 337
// SetAreaMapShow ( omarVehiclesArea , 0 ) ;
23974: LD_INT 16
23976: PPUSH
23977: LD_INT 0
23979: PPUSH
23980: CALL_OW 424
// omarHasVehicles := true ;
23984: LD_ADDR_EXP 22
23988: PUSH
23989: LD_INT 1
23991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23992: LD_INT 35
23994: PPUSH
23995: CALL_OW 67
// until rolfWaitingForVehiclesTimer = 0 0$00 ;
23999: LD_EXP 19
24003: PUSH
24004: LD_INT 0
24006: EQUAL
24007: IFFALSE 23992
// wait ( 1 1$00 ) ;
24009: LD_INT 2100
24011: PPUSH
24012: CALL_OW 67
// omarAttack := true ;
24016: LD_ADDR_EXP 23
24020: PUSH
24021: LD_INT 1
24023: ST_TO_ADDR
// omarScriptBase := false ;
24024: LD_ADDR_EXP 10
24028: PUSH
24029: LD_INT 0
24031: ST_TO_ADDR
// tmp := FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ;
24032: LD_ADDR_VAR 0 2
24036: PUSH
24037: LD_INT 16
24039: PPUSH
24040: LD_INT 22
24042: PUSH
24043: LD_INT 2
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 21
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 33
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 58
24072: PUSH
24073: EMPTY
24074: LIST
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: PPUSH
24082: CALL_OW 70
24086: ST_TO_ADDR
// for i in tmp do
24087: LD_ADDR_VAR 0 1
24091: PUSH
24092: LD_VAR 0 2
24096: PUSH
24097: FOR_IN
24098: IFFALSE 24126
// begin SetFuel ( i , 100 ) ;
24100: LD_VAR 0 1
24104: PPUSH
24105: LD_INT 100
24107: PPUSH
24108: CALL_OW 240
// SetSide ( i , 5 ) ;
24112: LD_VAR 0 1
24116: PPUSH
24117: LD_INT 5
24119: PPUSH
24120: CALL_OW 235
// end ;
24124: GO 24097
24126: POP
24127: POP
// eng := UnitFilter ( omarSquad , [ f_class , 2 ] ) ;
24128: LD_ADDR_VAR 0 3
24132: PUSH
24133: LD_EXP 52
24137: PPUSH
24138: LD_INT 25
24140: PUSH
24141: LD_INT 2
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PPUSH
24148: CALL_OW 72
24152: ST_TO_ADDR
// mech := UnitFilter ( omarSquad , [ [ f_not , [ f_driving ] ] , [ f_class , 3 ] ] ) ;
24153: LD_ADDR_VAR 0 4
24157: PUSH
24158: LD_EXP 52
24162: PPUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 55
24168: PUSH
24169: EMPTY
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 25
24178: PUSH
24179: LD_INT 3
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PPUSH
24190: CALL_OW 72
24194: ST_TO_ADDR
// workshop := HexInfo ( 324 , 234 ) ;
24195: LD_ADDR_VAR 0 5
24199: PUSH
24200: LD_INT 324
24202: PPUSH
24203: LD_INT 234
24205: PPUSH
24206: CALL_OW 428
24210: ST_TO_ADDR
// armoury := HexInfo ( 334 , 241 ) ;
24211: LD_ADDR_VAR 0 6
24215: PUSH
24216: LD_INT 334
24218: PPUSH
24219: LD_INT 241
24221: PPUSH
24222: CALL_OW 428
24226: ST_TO_ADDR
// ComExitBuilding ( UnitsInside ( armoury ) ) ;
24227: LD_VAR 0 6
24231: PPUSH
24232: CALL_OW 313
24236: PPUSH
24237: CALL_OW 122
// if eng then
24241: LD_VAR 0 3
24245: IFFALSE 24353
// begin if eng + mech <= tmp then
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 4
24256: PLUS
24257: PUSH
24258: LD_VAR 0 2
24262: LESSEQUAL
24263: IFFALSE 24318
// begin ComEnterUnit ( eng , workshop ) ;
24265: LD_VAR 0 3
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL_OW 120
// AddComChangeProfession ( eng , class_mechanic ) ;
24279: LD_VAR 0 3
24283: PPUSH
24284: LD_INT 3
24286: PPUSH
24287: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24291: LD_VAR 0 3
24295: PPUSH
24296: CALL_OW 182
// mech := mech union eng ;
24300: LD_ADDR_VAR 0 4
24304: PUSH
24305: LD_VAR 0 4
24309: PUSH
24310: LD_VAR 0 3
24314: UNION
24315: ST_TO_ADDR
// end else
24316: GO 24353
// begin ComEnterUnit ( eng , armoury ) ;
24318: LD_VAR 0 3
24322: PPUSH
24323: LD_VAR 0 6
24327: PPUSH
24328: CALL_OW 120
// AddComChangeProfession ( eng , class_soldier ) ;
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_INT 1
24339: PPUSH
24340: CALL_OW 183
// AddComExitBuilding ( eng ) ;
24344: LD_VAR 0 3
24348: PPUSH
24349: CALL_OW 182
// end ; end ; for i := 1 to tmp do
24353: LD_ADDR_VAR 0 1
24357: PUSH
24358: DOUBLE
24359: LD_INT 1
24361: DEC
24362: ST_TO_ADDR
24363: LD_VAR 0 2
24367: PUSH
24368: FOR_TO
24369: IFFALSE 24411
// if i <= mech then
24371: LD_VAR 0 1
24375: PUSH
24376: LD_VAR 0 4
24380: LESSEQUAL
24381: IFFALSE 24409
// AddComEnterUnit ( mech [ i ] , tmp [ i ] ) ;
24383: LD_VAR 0 4
24387: PUSH
24388: LD_VAR 0 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 2
24398: PUSH
24399: LD_VAR 0 1
24403: ARRAY
24404: PPUSH
24405: CALL_OW 180
24409: GO 24368
24411: POP
24412: POP
// end ;
24413: PPOPN 6
24415: END
// every 0 0$1 trigger IsOk ( Rolf ) and rolfWantVehicles do var i , hasBadWeapons ;
24416: LD_EXP 47
24420: PPUSH
24421: CALL_OW 302
24425: PUSH
24426: LD_EXP 17
24430: AND
24431: IFFALSE 25055
24433: GO 24435
24435: DISABLE
24436: LD_INT 0
24438: PPUSH
24439: PPUSH
// begin repeat wait ( 0 0$1 ) ;
24440: LD_INT 35
24442: PPUSH
24443: CALL_OW 67
// hasBadWeapons := false ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// rolfWaitingForVehiclesTimer := rolfWaitingForVehiclesTimer - 0 0$1 ;
24455: LD_ADDR_EXP 19
24459: PUSH
24460: LD_EXP 19
24464: PUSH
24465: LD_INT 35
24467: MINUS
24468: ST_TO_ADDR
// if rolfWaitingForVehiclesTimer <= 0 0$00 then
24469: LD_EXP 19
24473: PUSH
24474: LD_INT 0
24476: LESSEQUAL
24477: IFFALSE 24739
// begin rolfWaitingForVehiclesTimer := 0 0$00 ;
24479: LD_ADDR_EXP 19
24483: PUSH
24484: LD_INT 0
24486: ST_TO_ADDR
// display_strings := [ ] ;
24487: LD_ADDR_OWVAR 47
24491: PUSH
24492: EMPTY
24493: ST_TO_ADDR
// DialogueOn ;
24494: CALL_OW 6
// Say ( Rolf , DRf-Veh-b-19 ) ;
24498: LD_EXP 47
24502: PPUSH
24503: LD_STRING DRf-Veh-b-19
24505: PPUSH
24506: CALL_OW 88
// Say ( Rolf , DRf-Veh-b-20 ) ;
24510: LD_EXP 47
24514: PPUSH
24515: LD_STRING DRf-Veh-b-20
24517: PPUSH
24518: CALL_OW 88
// Say ( Heike , DH-Veh-b-21 ) ;
24522: LD_EXP 34
24526: PPUSH
24527: LD_STRING DH-Veh-b-21
24529: PPUSH
24530: CALL_OW 88
// if IsOk ( Givi ) then
24534: LD_EXP 35
24538: PPUSH
24539: CALL_OW 302
24543: IFFALSE 24581
// begin Say ( Givi , DG-Veh-b-22 ) ;
24545: LD_EXP 35
24549: PPUSH
24550: LD_STRING DG-Veh-b-22
24552: PPUSH
24553: CALL_OW 88
// Say ( Heike , DH-Veh-b-23 ) ;
24557: LD_EXP 34
24561: PPUSH
24562: LD_STRING DH-Veh-b-23
24564: PPUSH
24565: CALL_OW 88
// Say ( Givi , DG-Veh-b-24 ) ;
24569: LD_EXP 35
24573: PPUSH
24574: LD_STRING DG-Veh-b-24
24576: PPUSH
24577: CALL_OW 88
// end ; DialogueOff ;
24581: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24585: LD_STRING M5a
24587: PPUSH
24588: CALL_OW 337
// for i in rolfSquad do
24592: LD_ADDR_VAR 0 1
24596: PUSH
24597: LD_EXP 51
24601: PUSH
24602: FOR_IN
24603: IFFALSE 24720
// begin SetSide ( i , 8 ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: LD_INT 8
24612: PPUSH
24613: CALL_OW 235
// if IsDriver ( i ) then
24617: LD_VAR 0 1
24621: PPUSH
24622: CALL 64779 0 1
24626: IFFALSE 24698
// begin if not GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 310
24637: PPUSH
24638: CALL_OW 264
24642: PUSH
24643: LD_INT 51
24645: PUSH
24646: LD_INT 52
24648: PUSH
24649: LD_INT 32
24651: PUSH
24652: LD_INT 88
24654: PUSH
24655: LD_INT 31
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: IN
24665: NOT
24666: IFFALSE 24687
// SetSide ( IsInUnit ( i ) , 8 ) else
24668: LD_VAR 0 1
24672: PPUSH
24673: CALL_OW 310
24677: PPUSH
24678: LD_INT 8
24680: PPUSH
24681: CALL_OW 235
24685: GO 24696
// ComExitVehicle ( i ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 121
// end else
24696: GO 24718
// if IsInUnit ( i ) then
24698: LD_VAR 0 1
24702: PPUSH
24703: CALL_OW 310
24707: IFFALSE 24718
// ComExitBuilding ( i ) ;
24709: LD_VAR 0 1
24713: PPUSH
24714: CALL_OW 122
// end ;
24718: GO 24602
24720: POP
24721: POP
// wait ( 0 0$10 ) ;
24722: LD_INT 350
24724: PPUSH
24725: CALL_OW 67
// rolfAttack := true ;
24729: LD_ADDR_EXP 32
24733: PUSH
24734: LD_INT 1
24736: ST_TO_ADDR
// exit ;
24737: GO 25055
// end ; if IsDead ( Rolf ) then
24739: LD_EXP 47
24743: PPUSH
24744: CALL_OW 301
24748: IFFALSE 24759
// begin ChangeMissionObjectives ( M5a ) ;
24750: LD_STRING M5a
24752: PPUSH
24753: CALL_OW 337
// exit ;
24757: GO 25055
// end ; if Count ( UnitFilter ( rolfSquad , [ f_driving ] ) ) = Count ( rolfSquad ) then
24759: LD_EXP 51
24763: PPUSH
24764: LD_INT 55
24766: PUSH
24767: EMPTY
24768: LIST
24769: PPUSH
24770: CALL_OW 72
24774: PPUSH
24775: CALL 31566 0 1
24779: PUSH
24780: LD_EXP 51
24784: PPUSH
24785: CALL 31566 0 1
24789: EQUAL
24790: IFFALSE 24907
// begin for i in UnitFilter ( rolfSquad , [ f_driving ] ) do
24792: LD_ADDR_VAR 0 1
24796: PUSH
24797: LD_EXP 51
24801: PPUSH
24802: LD_INT 55
24804: PUSH
24805: EMPTY
24806: LIST
24807: PPUSH
24808: CALL_OW 72
24812: PUSH
24813: FOR_IN
24814: IFFALSE 24874
// if GetWeapon ( IsInUnit ( i ) ) in [ ru_cargo_bay , ru_crane , ar_cargo_bay , ar_crane , ar_control_tower ] then
24816: LD_VAR 0 1
24820: PPUSH
24821: CALL_OW 310
24825: PPUSH
24826: CALL_OW 264
24830: PUSH
24831: LD_INT 51
24833: PUSH
24834: LD_INT 52
24836: PUSH
24837: LD_INT 32
24839: PUSH
24840: LD_INT 88
24842: PUSH
24843: LD_INT 31
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: IN
24853: IFFALSE 24872
// begin hasBadWeapons := true ;
24855: LD_ADDR_VAR 0 2
24859: PUSH
24860: LD_INT 1
24862: ST_TO_ADDR
// Query ( QBadWeapon ) ;
24863: LD_STRING QBadWeapon
24865: PPUSH
24866: CALL_OW 97
// break ;
24870: GO 24874
// end ;
24872: GO 24813
24874: POP
24875: POP
// if not hasBadWeapons then
24876: LD_VAR 0 2
24880: NOT
24881: IFFALSE 24907
// if Query ( QRolf ) = 1 then
24883: LD_STRING QRolf
24885: PPUSH
24886: CALL_OW 97
24890: PUSH
24891: LD_INT 1
24893: EQUAL
24894: IFFALSE 24900
// break else
24896: GO 24911
24898: GO 24907
// wait ( 0 0$15 ) ;
24900: LD_INT 525
24902: PPUSH
24903: CALL_OW 67
// end ; until false ;
24907: LD_INT 0
24909: IFFALSE 24440
// rolfWaitingForVehiclesTimer := 0 0$00 ;
24911: LD_ADDR_EXP 19
24915: PUSH
24916: LD_INT 0
24918: ST_TO_ADDR
// display_strings := [ ] ;
24919: LD_ADDR_OWVAR 47
24923: PUSH
24924: EMPTY
24925: ST_TO_ADDR
// DialogueOn ;
24926: CALL_OW 6
// CenterNowOnUnits ( Rolf ) ;
24930: LD_EXP 47
24934: PPUSH
24935: CALL_OW 87
// Say ( Rolf , DRf-Veh-a-17 ) ;
24939: LD_EXP 47
24943: PPUSH
24944: LD_STRING DRf-Veh-a-17
24946: PPUSH
24947: CALL_OW 88
// Say ( Heike , DH-08-Veh-a-18 ) ;
24951: LD_EXP 34
24955: PPUSH
24956: LD_STRING DH-08-Veh-a-18
24958: PPUSH
24959: CALL_OW 88
// Say ( Rolf , DRf-Veh-a-19 ) ;
24963: LD_EXP 47
24967: PPUSH
24968: LD_STRING DRf-Veh-a-19
24970: PPUSH
24971: CALL_OW 88
// DialogueOff ;
24975: CALL_OW 7
// ChangeMissionObjectives ( M5a ) ;
24979: LD_STRING M5a
24981: PPUSH
24982: CALL_OW 337
// rolfHasVehicles := true ;
24986: LD_ADDR_EXP 16
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// for i in rolfSquad do
24994: LD_ADDR_VAR 0 1
24998: PUSH
24999: LD_EXP 51
25003: PUSH
25004: FOR_IN
25005: IFFALSE 25038
// begin SetSide ( IsInUnit ( i ) , 8 ) ;
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL_OW 310
25016: PPUSH
25017: LD_INT 8
25019: PPUSH
25020: CALL_OW 235
// SetSide ( i , 8 ) ;
25024: LD_VAR 0 1
25028: PPUSH
25029: LD_INT 8
25031: PPUSH
25032: CALL_OW 235
// end ;
25036: GO 25004
25038: POP
25039: POP
// wait ( 0 0$10 ) ;
25040: LD_INT 350
25042: PPUSH
25043: CALL_OW 67
// rolfAttack := true ;
25047: LD_ADDR_EXP 32
25051: PUSH
25052: LD_INT 1
25054: ST_TO_ADDR
// end ;
25055: PPOPN 2
25057: END
// every 0 0$1 trigger rolfAttack and omarAttack do
25058: LD_EXP 32
25062: PUSH
25063: LD_EXP 23
25067: AND
25068: IFFALSE 25080
25070: GO 25072
25072: DISABLE
// ChangeMissionObjectives ( M6a ) ;
25073: LD_STRING M6a
25075: PPUSH
25076: CALL_OW 337
25080: END
// every 0 0$1 trigger leninSpotted do
25081: LD_EXP 14
25085: IFFALSE 25173
25087: GO 25089
25089: DISABLE
// begin wait ( 0 0$10 ) ;
25090: LD_INT 350
25092: PPUSH
25093: CALL_OW 67
// DialogueOn ;
25097: CALL_OW 6
// Say ( Aviradze , DA-Transmission-1 ) ;
25101: LD_EXP 46
25105: PPUSH
25106: LD_STRING DA-Transmission-1
25108: PPUSH
25109: CALL_OW 88
// SayRadio ( Morozov , DMzw-Transmission-2 ) ;
25113: LD_EXP 53
25117: PPUSH
25118: LD_STRING DMzw-Transmission-2
25120: PPUSH
25121: CALL_OW 94
// if gaidarKilled then
25125: LD_EXP 7
25129: IFFALSE 25145
// SayRadio ( Morozov , DMzw-Transmission-3 ) else
25131: LD_EXP 53
25135: PPUSH
25136: LD_STRING DMzw-Transmission-3
25138: PPUSH
25139: CALL_OW 94
25143: GO 25157
// SayRadio ( Morozov , DMzw-Transmission-a-3 ) ;
25145: LD_EXP 53
25149: PPUSH
25150: LD_STRING DMzw-Transmission-a-3
25152: PPUSH
25153: CALL_OW 94
// Say ( Heike , DH-Transmission-4 ) ;
25157: LD_EXP 34
25161: PPUSH
25162: LD_STRING DH-Transmission-4
25164: PPUSH
25165: CALL_OW 88
// DialogueOff ;
25169: CALL_OW 7
// end ;
25173: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) and IsOk ( Heike ) do
25174: LD_INT 22
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 25
25186: PUSH
25187: LD_INT 9
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 101
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PPUSH
25209: CALL_OW 69
25213: PUSH
25214: LD_EXP 34
25218: PPUSH
25219: CALL_OW 302
25223: AND
25224: IFFALSE 25304
25226: GO 25228
25228: DISABLE
// begin wait ( 0 0$3 ) ;
25229: LD_INT 105
25231: PPUSH
25232: CALL_OW 67
// DialogueOn ;
25236: CALL_OW 6
// CenterOnUnits ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_bazooker ] , [ f_see , 2 ] ] ) [ 1 ] ) ;
25240: LD_INT 22
25242: PUSH
25243: LD_INT 3
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 25
25252: PUSH
25253: LD_INT 9
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 101
25262: PUSH
25263: LD_INT 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: PPUSH
25275: CALL_OW 69
25279: PUSH
25280: LD_INT 1
25282: ARRAY
25283: PPUSH
25284: CALL_OW 85
// Say ( Heike , DH-Rubazooka-1 ) ;
25288: LD_EXP 34
25292: PPUSH
25293: LD_STRING DH-Rubazooka-1
25295: PPUSH
25296: CALL_OW 88
// DialogueOff ;
25300: CALL_OW 7
// end ;
25304: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and firstAttack do
25305: LD_INT 19
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 3
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PPUSH
25318: CALL_OW 70
25322: PUSH
25323: LD_EXP 28
25327: AND
25328: IFFALSE 25387
25330: GO 25332
25332: DISABLE
// begin DialogueOn ;
25333: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25337: LD_INT 19
25339: PPUSH
25340: LD_INT 22
25342: PUSH
25343: LD_INT 3
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 70
25354: PPUSH
25355: CALL_OW 85
// Say ( Heike , DH-Ruattfirst-1 ) ;
25359: LD_EXP 34
25363: PPUSH
25364: LD_STRING DH-Ruattfirst-1
25366: PPUSH
25367: CALL_OW 88
// Say ( Heike , DH-Ruattfirst-2 ) ;
25371: LD_EXP 34
25375: PPUSH
25376: LD_STRING DH-Ruattfirst-2
25378: PPUSH
25379: CALL_OW 88
// DialogueOff ;
25383: CALL_OW 7
// end ;
25387: END
// every 0 0$1 trigger FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) and not firstAttack do
25388: LD_INT 19
25390: PPUSH
25391: LD_INT 22
25393: PUSH
25394: LD_INT 3
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: CALL_OW 70
25405: PUSH
25406: LD_EXP 28
25410: NOT
25411: AND
25412: IFFALSE 25459
25414: GO 25416
25416: DISABLE
// begin DialogueOn ;
25417: CALL_OW 6
// CenterOnUnits ( FilterUnitsInArea ( attackIncoming , [ f_side , 3 ] ) ) ;
25421: LD_INT 19
25423: PPUSH
25424: LD_INT 22
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 70
25438: PPUSH
25439: CALL_OW 85
// Say ( Heike , DH-Ruattnext-1 ) ;
25443: LD_EXP 34
25447: PPUSH
25448: LD_STRING DH-Ruattnext-1
25450: PPUSH
25451: CALL_OW 88
// DialogueOff ;
25455: CALL_OW 7
// end ;
25459: END
// every 0 0$3 trigger IsDead ( Morozov ) and IsOk ( Omar ) do
25460: LD_EXP 53
25464: PPUSH
25465: CALL_OW 301
25469: PUSH
25470: LD_EXP 44
25474: PPUSH
25475: CALL_OW 302
25479: AND
25480: IFFALSE 25497
25482: GO 25484
25484: DISABLE
// SayRadio ( Omar , DOm-Morozov ) ;
25485: LD_EXP 44
25489: PPUSH
25490: LD_STRING DOm-Morozov
25492: PPUSH
25493: CALL_OW 94
25497: END
// every 0 0$1 trigger gameActive and GetResourceType ( GetBase ( arDepot ) , mat_oil ) <= 30 do
25498: LD_EXP 31
25502: PUSH
25503: LD_EXP 48
25507: PPUSH
25508: CALL_OW 274
25512: PPUSH
25513: LD_INT 2
25515: PPUSH
25516: CALL_OW 275
25520: PUSH
25521: LD_INT 30
25523: LESSEQUAL
25524: AND
25525: IFFALSE 25615
25527: GO 25529
25529: DISABLE
// begin wait ( 0 0$10 ) ;
25530: LD_INT 350
25532: PPUSH
25533: CALL_OW 67
// DialogueOn ;
25537: CALL_OW 6
// Say ( Heike , DH-Fuel-1 ) ;
25541: LD_EXP 34
25545: PPUSH
25546: LD_STRING DH-Fuel-1
25548: PPUSH
25549: CALL_OW 88
// if IsOk ( Givi ) then
25553: LD_EXP 35
25557: PPUSH
25558: CALL_OW 302
25562: IFFALSE 25600
// begin Say ( Givi , DG-Fuel-2 ) ;
25564: LD_EXP 35
25568: PPUSH
25569: LD_STRING DG-Fuel-2
25571: PPUSH
25572: CALL_OW 88
// Say ( Givi , DG-Fuel-3 ) ;
25576: LD_EXP 35
25580: PPUSH
25581: LD_STRING DG-Fuel-3
25583: PPUSH
25584: CALL_OW 88
// Say ( Givi , DG-Fuel-4 ) ;
25588: LD_EXP 35
25592: PPUSH
25593: LD_STRING DG-Fuel-4
25595: PPUSH
25596: CALL_OW 88
// end ; DialogueOff ;
25600: CALL_OW 7
// Query ( QOil ) ;
25604: LD_STRING QOil
25606: PPUSH
25607: CALL_OW 97
// GoForOil ( ) ;
25611: CALL 8886 0 0
// end ;
25615: END
// every 0 0$1 trigger leninSpotted and omarAttack and rolfAttack do
25616: LD_EXP 14
25620: PUSH
25621: LD_EXP 23
25625: AND
25626: PUSH
25627: LD_EXP 32
25631: AND
25632: IFFALSE 25973
25634: GO 25636
25636: DISABLE
// begin if IsDead ( Morozov ) then
25637: LD_EXP 53
25641: PPUSH
25642: CALL_OW 301
25646: IFFALSE 25657
// wait ( 1 1$45 ) else
25648: LD_INT 3675
25650: PPUSH
25651: CALL_OW 67
25655: GO 25685
// wait ( [ 9 9$30 , 8 8$00 , 7 7$40 , 6 6$30 ] [ Difficulty ] ) ;
25657: LD_INT 19950
25659: PUSH
25660: LD_INT 16800
25662: PUSH
25663: LD_INT 16100
25665: PUSH
25666: LD_INT 13650
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: PUSH
25675: LD_OWVAR 67
25679: ARRAY
25680: PPUSH
25681: CALL_OW 67
// DialogueOn ;
25685: CALL_OW 6
// SayRadio ( Shariff , DShar-End-1 ) ;
25689: LD_EXP 42
25693: PPUSH
25694: LD_STRING DShar-End-1
25696: PPUSH
25697: CALL_OW 94
// Say ( Heike , DH-End-2 ) ;
25701: LD_EXP 34
25705: PPUSH
25706: LD_STRING DH-End-2
25708: PPUSH
25709: CALL_OW 88
// SayRadio ( Shariff , DShar-End-3 ) ;
25713: LD_EXP 42
25717: PPUSH
25718: LD_STRING DShar-End-3
25720: PPUSH
25721: CALL_OW 94
// Say ( Heike , DH-End-4 ) ;
25725: LD_EXP 34
25729: PPUSH
25730: LD_STRING DH-End-4
25732: PPUSH
25733: CALL_OW 88
// SayRadio ( Shariff , DShar-End-5 ) ;
25737: LD_EXP 42
25741: PPUSH
25742: LD_STRING DShar-End-5
25744: PPUSH
25745: CALL_OW 94
// SayRadio ( Shariff , DShar-End-6 ) ;
25749: LD_EXP 42
25753: PPUSH
25754: LD_STRING DShar-End-6
25756: PPUSH
25757: CALL_OW 94
// dwait ( 0 0$2 ) ;
25761: LD_INT 70
25763: PPUSH
25764: CALL_OW 68
// Say ( Heike , DH-End-7 ) ;
25768: LD_EXP 34
25772: PPUSH
25773: LD_STRING DH-End-7
25775: PPUSH
25776: CALL_OW 88
// DialogueOff ;
25780: CALL_OW 7
// ChangeMissionObjectives ( M6 ) ;
25784: LD_STRING M6
25786: PPUSH
25787: CALL_OW 337
// SetAreaMapShow ( escapeArea , 1 ) ;
25791: LD_INT 17
25793: PPUSH
25794: LD_INT 1
25796: PPUSH
25797: CALL_OW 424
// escapeAllowed := true ;
25801: LD_ADDR_EXP 24
25805: PUSH
25806: LD_INT 1
25808: ST_TO_ADDR
// wait ( 0 0$2 ) ;
25809: LD_INT 70
25811: PPUSH
25812: CALL_OW 67
// Say ( Kurt , DKs-End-8 ) ;
25816: LD_EXP 45
25820: PPUSH
25821: LD_STRING DKs-End-8
25823: PPUSH
25824: CALL_OW 88
// Say ( Kaia , DK-End-10 ) ;
25828: LD_EXP 39
25832: PPUSH
25833: LD_STRING DK-End-10
25835: PPUSH
25836: CALL_OW 88
// Say ( Kurt , DKs-End-9 ) ;
25840: LD_EXP 45
25844: PPUSH
25845: LD_STRING DKs-End-9
25847: PPUSH
25848: CALL_OW 88
// Say ( Markov , DMar-End-11 ) ;
25852: LD_EXP 41
25856: PPUSH
25857: LD_STRING DMar-End-11
25859: PPUSH
25860: CALL_OW 88
// if LoadVariable ( 05_DrugsTested , debug ) then
25864: LD_STRING 05_DrugsTested
25866: PPUSH
25867: LD_EXP 1
25871: PPUSH
25872: CALL_OW 30
25876: IFFALSE 25890
// Say ( Mike , DM-End-12 ) ;
25878: LD_EXP 36
25882: PPUSH
25883: LD_STRING DM-End-12
25885: PPUSH
25886: CALL_OW 88
// Say ( Olaf , DO-End-13 ) ;
25890: LD_EXP 43
25894: PPUSH
25895: LD_STRING DO-End-13
25897: PPUSH
25898: CALL_OW 88
// if IsOk ( Sophia ) then
25902: LD_EXP 40
25906: PPUSH
25907: CALL_OW 302
25911: IFFALSE 25937
// begin Say ( Sophia , DS-End-15 ) ;
25913: LD_EXP 40
25917: PPUSH
25918: LD_STRING DS-End-15
25920: PPUSH
25921: CALL_OW 88
// Say ( Kaia , DK-End-16 ) ;
25925: LD_EXP 39
25929: PPUSH
25930: LD_STRING DK-End-16
25932: PPUSH
25933: CALL_OW 88
// end ; Say ( Givi , DG-End-17 ) ;
25937: LD_EXP 35
25941: PPUSH
25942: LD_STRING DG-End-17
25944: PPUSH
25945: CALL_OW 88
// Say ( Givi , DG-End-18 ) ;
25949: LD_EXP 35
25953: PPUSH
25954: LD_STRING DG-End-18
25956: PPUSH
25957: CALL_OW 88
// Say ( Givi , DG-End-19 ) ;
25961: LD_EXP 35
25965: PPUSH
25966: LD_STRING DG-End-19
25968: PPUSH
25969: CALL_OW 88
// end ;
25973: END
// every 0 0$1 trigger escapeAllowed do var tmp , outsiders ;
25974: LD_EXP 24
25978: IFFALSE 26117
25980: GO 25982
25982: DISABLE
25983: LD_INT 0
25985: PPUSH
25986: PPUSH
// begin repeat wait ( 0 0$1 ) ;
25987: LD_INT 35
25989: PPUSH
25990: CALL_OW 67
// display_strings := [ #X106-2 , escapeTimer ] ;
25994: LD_ADDR_OWVAR 47
25998: PUSH
25999: LD_STRING #X106-2
26001: PUSH
26002: LD_EXP 25
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: ST_TO_ADDR
// escapeTimer := escapeTimer - 0 0$1 ;
26011: LD_ADDR_EXP 25
26015: PUSH
26016: LD_EXP 25
26020: PUSH
26021: LD_INT 35
26023: MINUS
26024: ST_TO_ADDR
// outsiders := FilterUnitsExceptArea ( escapeArea , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) ;
26025: LD_ADDR_VAR 0 2
26029: PUSH
26030: LD_INT 17
26032: PPUSH
26033: LD_INT 22
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 21
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 23
26055: PUSH
26056: LD_INT 2
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: PPUSH
26068: CALL_OW 71
26072: ST_TO_ADDR
// if not outsiders then
26073: LD_VAR 0 2
26077: NOT
26078: IFFALSE 26094
// begin escapeAllowed := false ;
26080: LD_ADDR_EXP 24
26084: PUSH
26085: LD_INT 0
26087: ST_TO_ADDR
// MissionWin ;
26088: CALL 26120 0 0
// exit ;
26092: GO 26117
// end ; if escapeTimer <= 0 0$00 then
26094: LD_EXP 25
26098: PUSH
26099: LD_INT 0
26101: LESSEQUAL
26102: IFFALSE 26113
// begin YouLost ( TimeOut ) ;
26104: LD_STRING TimeOut
26106: PPUSH
26107: CALL_OW 104
// exit ;
26111: GO 26117
// end ; until false ;
26113: LD_INT 0
26115: IFFALSE 25987
// end ;
26117: PPOPN 2
26119: END
// function MissionWin ; var i , tmp , tmp2 , cargo ; begin
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
// if tick <= 55 55$00 then
26127: LD_OWVAR 1
26131: PUSH
26132: LD_INT 115500
26134: LESSEQUAL
26135: IFFALSE 26144
// SetAchievement ( ACH_HSPEED_6 ) ;
26137: LD_STRING ACH_HSPEED_6
26139: PPUSH
26140: CALL_OW 543
// Say ( Heike , DH-End-20 ) ;
26144: LD_EXP 34
26148: PPUSH
26149: LD_STRING DH-End-20
26151: PPUSH
26152: CALL_OW 88
// if rolfDied then
26156: LD_EXP 13
26160: IFFALSE 26175
// AddMedal ( med1 , - 1 ) else
26162: LD_STRING med1
26164: PPUSH
26165: LD_INT 1
26167: NEG
26168: PPUSH
26169: CALL_OW 101
26173: GO 26205
// if not canRolfJoin then
26175: LD_EXP 29
26179: NOT
26180: IFFALSE 26195
// AddMedal ( med1 , - 2 ) else
26182: LD_STRING med1
26184: PPUSH
26185: LD_INT 2
26187: NEG
26188: PPUSH
26189: CALL_OW 101
26193: GO 26205
// AddMedal ( med1 , 1 ) ;
26195: LD_STRING med1
26197: PPUSH
26198: LD_INT 1
26200: PPUSH
26201: CALL_OW 101
// if omarHasVehicles and rolfHasVehicles then
26205: LD_EXP 22
26209: PUSH
26210: LD_EXP 16
26214: AND
26215: IFFALSE 26229
// AddMedal ( med2 , 1 ) else
26217: LD_STRING med2
26219: PPUSH
26220: LD_INT 1
26222: PPUSH
26223: CALL_OW 101
26227: GO 26278
// if omarHasVehicles then
26229: LD_EXP 22
26233: IFFALSE 26248
// AddMedal ( med2 , - 1 ) else
26235: LD_STRING med2
26237: PPUSH
26238: LD_INT 1
26240: NEG
26241: PPUSH
26242: CALL_OW 101
26246: GO 26278
// if rolfHasVehicles then
26248: LD_EXP 16
26252: IFFALSE 26267
// AddMedal ( med2 , - 2 ) else
26254: LD_STRING med2
26256: PPUSH
26257: LD_INT 2
26259: NEG
26260: PPUSH
26261: CALL_OW 101
26265: GO 26278
// AddMedal ( med2 , - 3 ) ;
26267: LD_STRING med2
26269: PPUSH
26270: LD_INT 3
26272: NEG
26273: PPUSH
26274: CALL_OW 101
// if ruLoseCounter >= [ 20 , 30 , 40 , 50 ] [ Difficulty ] and heikeLoseCounter = 0 then
26278: LD_EXP 5
26282: PUSH
26283: LD_INT 20
26285: PUSH
26286: LD_INT 30
26288: PUSH
26289: LD_INT 40
26291: PUSH
26292: LD_INT 50
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: PUSH
26301: LD_OWVAR 67
26305: ARRAY
26306: GREATEREQUAL
26307: PUSH
26308: LD_EXP 26
26312: PUSH
26313: LD_INT 0
26315: EQUAL
26316: AND
26317: IFFALSE 26331
// AddMedal ( med3 , 1 ) else
26319: LD_STRING med3
26321: PPUSH
26322: LD_INT 1
26324: PPUSH
26325: CALL_OW 101
26329: GO 26361
// if heikeLoseCounter then
26331: LD_EXP 26
26335: IFFALSE 26350
// AddMedal ( med3 , - 2 ) else
26337: LD_STRING med3
26339: PPUSH
26340: LD_INT 2
26342: NEG
26343: PPUSH
26344: CALL_OW 101
26348: GO 26361
// AddMedal ( med3 , - 1 ) ;
26350: LD_STRING med3
26352: PPUSH
26353: LD_INT 1
26355: NEG
26356: PPUSH
26357: CALL_OW 101
// GiveMedals ( MAIN ) ;
26361: LD_STRING MAIN
26363: PPUSH
26364: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26368: LD_INT 22
26370: PUSH
26371: LD_INT 2
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 23
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 21
26390: PUSH
26391: LD_INT 1
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: LIST
26402: PPUSH
26403: CALL_OW 69
26407: PPUSH
26408: CALL_OW 43
// SaveCharacters ( Heike , 06_Heike ) ;
26412: LD_EXP 34
26416: PPUSH
26417: LD_STRING 06_Heike
26419: PPUSH
26420: CALL_OW 38
// if Aviradze then
26424: LD_EXP 46
26428: IFFALSE 26442
// SaveCharacters ( Aviradze , 06_Aviradze ) ;
26430: LD_EXP 46
26434: PPUSH
26435: LD_STRING 06_Aviradze
26437: PPUSH
26438: CALL_OW 38
// if Ibrahim then
26442: LD_EXP 37
26446: IFFALSE 26460
// SaveCharacters ( Ibrahim , 06_Ibrahim ) ;
26448: LD_EXP 37
26452: PPUSH
26453: LD_STRING 06_Ibrahim
26455: PPUSH
26456: CALL_OW 38
// if Kamil then
26460: LD_EXP 38
26464: IFFALSE 26478
// SaveCharacters ( Kamil , 06_Kamil ) ;
26466: LD_EXP 38
26470: PPUSH
26471: LD_STRING 06_Kamil
26473: PPUSH
26474: CALL_OW 38
// if Sophia then
26478: LD_EXP 40
26482: IFFALSE 26496
// SaveCharacters ( Sophia , 06_Sophia ) ;
26484: LD_EXP 40
26488: PPUSH
26489: LD_STRING 06_Sophia
26491: PPUSH
26492: CALL_OW 38
// if Kaia then
26496: LD_EXP 39
26500: IFFALSE 26514
// SaveCharacters ( Kaia , 06_Kaia ) ;
26502: LD_EXP 39
26506: PPUSH
26507: LD_STRING 06_Kaia
26509: PPUSH
26510: CALL_OW 38
// if Givi then
26514: LD_EXP 35
26518: IFFALSE 26532
// SaveCharacters ( Givi , 06_Givi ) ;
26520: LD_EXP 35
26524: PPUSH
26525: LD_STRING 06_Givi
26527: PPUSH
26528: CALL_OW 38
// if Olaf then
26532: LD_EXP 43
26536: IFFALSE 26550
// SaveCharacters ( Olaf , 06_Olaf ) ;
26538: LD_EXP 43
26542: PPUSH
26543: LD_STRING 06_Olaf
26545: PPUSH
26546: CALL_OW 38
// if Mike then
26550: LD_EXP 36
26554: IFFALSE 26568
// SaveCharacters ( Mike , 06_Mike ) ;
26556: LD_EXP 36
26560: PPUSH
26561: LD_STRING 06_Mike
26563: PPUSH
26564: CALL_OW 38
// if Markov then
26568: LD_EXP 41
26572: IFFALSE 26586
// SaveCharacters ( Markov , 06_Markov ) ;
26574: LD_EXP 41
26578: PPUSH
26579: LD_STRING 06_Markov
26581: PPUSH
26582: CALL_OW 38
// if Kurt then
26586: LD_EXP 45
26590: IFFALSE 26604
// SaveCharacters ( Kurt , 06_Kurt ) ;
26592: LD_EXP 45
26596: PPUSH
26597: LD_STRING 06_Kurt
26599: PPUSH
26600: CALL_OW 38
// if heikeSecondSquad then
26604: LD_EXP 49
26608: IFFALSE 26622
// SaveCharacters ( heikeSecondSquad , 06_others ) ;
26610: LD_EXP 49
26614: PPUSH
26615: LD_STRING 06_others
26617: PPUSH
26618: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
26622: LD_ADDR_VAR 0 3
26626: PUSH
26627: LD_INT 22
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 23
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PPUSH
26651: CALL_OW 69
26655: ST_TO_ADDR
// if tmp then
26656: LD_VAR 0 3
26660: IFFALSE 26674
// SaveCharacters ( tmp , 06_apes ) ;
26662: LD_VAR 0 3
26666: PPUSH
26667: LD_STRING 06_apes
26669: PPUSH
26670: CALL_OW 38
// if Rolf then
26674: LD_EXP 47
26678: IFFALSE 26729
// begin SaveCharacters ( Rolf , 06_Rolf ) ;
26680: LD_EXP 47
26684: PPUSH
26685: LD_STRING 06_Rolf
26687: PPUSH
26688: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_ROLF) ) ;
26692: LD_STRING enableBioCharacter(BIO_ROLF)
26694: PPUSH
26695: CALL_OW 559
// if rolfSquad diff Rolf then
26699: LD_EXP 51
26703: PUSH
26704: LD_EXP 47
26708: DIFF
26709: IFFALSE 26729
// SaveCharacters ( rolfSquad diff Rolf , 06_RolfSquad ) ;
26711: LD_EXP 51
26715: PUSH
26716: LD_EXP 47
26720: DIFF
26721: PPUSH
26722: LD_STRING 06_RolfSquad
26724: PPUSH
26725: CALL_OW 38
// end ; tmp := FilterUnitsInArea ( escapeArea , [ f_type , unit_vehicle ] ) ;
26729: LD_ADDR_VAR 0 3
26733: PUSH
26734: LD_INT 17
26736: PPUSH
26737: LD_INT 21
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: PPUSH
26747: CALL_OW 70
26751: ST_TO_ADDR
// if tmp then
26752: LD_VAR 0 3
26756: IFFALSE 27050
// begin tmp2 := [ ] ;
26758: LD_ADDR_VAR 0 4
26762: PUSH
26763: EMPTY
26764: ST_TO_ADDR
// for i in tmp do
26765: LD_ADDR_VAR 0 2
26769: PUSH
26770: LD_VAR 0 3
26774: PUSH
26775: FOR_IN
26776: IFFALSE 27036
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
26778: LD_VAR 0 2
26782: PPUSH
26783: CALL_OW 264
26787: PUSH
26788: LD_INT 32
26790: PUSH
26791: LD_INT 12
26793: PUSH
26794: LD_INT 51
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: IN
26802: IFFALSE 26939
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
26804: LD_ADDR_VAR 0 5
26808: PUSH
26809: LD_VAR 0 2
26813: PPUSH
26814: LD_INT 1
26816: PPUSH
26817: CALL_OW 289
26821: PUSH
26822: LD_VAR 0 2
26826: PPUSH
26827: LD_INT 2
26829: PPUSH
26830: CALL_OW 289
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
26839: LD_ADDR_VAR 0 4
26843: PUSH
26844: LD_VAR 0 4
26848: PPUSH
26849: LD_VAR 0 4
26853: PUSH
26854: LD_INT 1
26856: PLUS
26857: PPUSH
26858: LD_VAR 0 2
26862: PPUSH
26863: CALL_OW 265
26867: PUSH
26868: LD_VAR 0 2
26872: PPUSH
26873: CALL_OW 262
26877: PUSH
26878: LD_VAR 0 2
26882: PPUSH
26883: CALL_OW 263
26887: PUSH
26888: LD_VAR 0 2
26892: PPUSH
26893: CALL_OW 264
26897: PUSH
26898: LD_VAR 0 2
26902: PPUSH
26903: CALL_OW 248
26907: PUSH
26908: LD_VAR 0 2
26912: PPUSH
26913: CALL_OW 256
26917: PUSH
26918: LD_VAR 0 5
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: PPUSH
26932: CALL_OW 1
26936: ST_TO_ADDR
// end else
26937: GO 27034
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
26939: LD_ADDR_VAR 0 4
26943: PUSH
26944: LD_VAR 0 4
26948: PPUSH
26949: LD_VAR 0 4
26953: PUSH
26954: LD_INT 1
26956: PLUS
26957: PPUSH
26958: LD_VAR 0 2
26962: PPUSH
26963: CALL_OW 265
26967: PUSH
26968: LD_VAR 0 2
26972: PPUSH
26973: CALL_OW 262
26977: PUSH
26978: LD_VAR 0 2
26982: PPUSH
26983: CALL_OW 263
26987: PUSH
26988: LD_VAR 0 2
26992: PPUSH
26993: CALL_OW 264
26997: PUSH
26998: LD_VAR 0 2
27002: PPUSH
27003: CALL_OW 248
27007: PUSH
27008: LD_VAR 0 2
27012: PPUSH
27013: CALL_OW 256
27017: PUSH
27018: EMPTY
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 1
27033: ST_TO_ADDR
27034: GO 26775
27036: POP
27037: POP
// SaveVariable ( tmp2 , 06_Vehicles ) ;
27038: LD_VAR 0 4
27042: PPUSH
27043: LD_STRING 06_Vehicles
27045: PPUSH
27046: CALL_OW 39
// end ; YouWin ;
27050: CALL_OW 103
// end ; end_of_file
27054: LD_VAR 0 1
27058: RET
// on VehicleConstructed ( vehicle , factory ) do var driver ;
27059: LD_INT 0
27061: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
27062: LD_VAR 0 1
27066: PPUSH
27067: LD_VAR 0 2
27071: PPUSH
27072: CALL 88427 0 2
// if GetSide ( vehicle ) = 2 and ingame_video and GetControl ( vehicle ) = control_manual then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 255
27085: PUSH
27086: LD_INT 2
27088: EQUAL
27089: PUSH
27090: LD_OWVAR 52
27094: AND
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 263
27105: PUSH
27106: LD_INT 1
27108: EQUAL
27109: AND
27110: IFFALSE 27165
// begin driver := IsDrivenBy ( vehicle ) ;
27112: LD_ADDR_VAR 0 3
27116: PUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 311
27126: ST_TO_ADDR
// ComMoveXY ( vehicle , 211 , 101 ) ;
27127: LD_VAR 0 1
27131: PPUSH
27132: LD_INT 211
27134: PPUSH
27135: LD_INT 101
27137: PPUSH
27138: CALL_OW 111
// AddComExitVehicle ( driver ) ;
27142: LD_VAR 0 3
27146: PPUSH
27147: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
27151: LD_VAR 0 3
27155: PPUSH
27156: LD_VAR 0 2
27160: PPUSH
27161: CALL_OW 180
// end ; if GetSide ( vehicle ) = 3 then
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 255
27174: PUSH
27175: LD_INT 3
27177: EQUAL
27178: IFFALSE 27209
// ruSpecialVehicleGroup := Replace ( ruSpecialVehicleGroup , ruSpecialVehicleGroup + 1 , vehicle ) ;
27180: LD_ADDR_EXP 60
27184: PUSH
27185: LD_EXP 60
27189: PPUSH
27190: LD_EXP 60
27194: PUSH
27195: LD_INT 1
27197: PLUS
27198: PPUSH
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 1
27208: ST_TO_ADDR
// end ;
27209: PPOPN 3
27211: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 8 and GetBType ( b ) = b_armoury then
27212: LD_VAR 0 1
27216: PPUSH
27217: CALL_OW 255
27221: PUSH
27222: LD_INT 8
27224: EQUAL
27225: PUSH
27226: LD_VAR 0 1
27230: PPUSH
27231: CALL_OW 266
27235: PUSH
27236: LD_INT 4
27238: EQUAL
27239: AND
27240: IFFALSE 27251
// ComUpgrade ( b ) ;
27242: LD_VAR 0 1
27246: PPUSH
27247: CALL_OW 146
// end ;
27251: PPOPN 1
27253: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
27254: LD_VAR 0 1
27258: PPUSH
27259: CALL 88369 0 1
// if un = Heike then
27263: LD_VAR 0 1
27267: PUSH
27268: LD_EXP 34
27272: EQUAL
27273: IFFALSE 27282
// YouLost ( Heike ) ;
27275: LD_STRING Heike
27277: PPUSH
27278: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
27282: LD_VAR 0 1
27286: PUSH
27287: LD_INT 22
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 21
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 23
27309: PUSH
27310: LD_INT 2
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: PPUSH
27322: CALL_OW 69
27326: IN
27327: IFFALSE 27343
// heikeLoseCounter := heikeLoseCounter + 1 ;
27329: LD_ADDR_EXP 26
27333: PUSH
27334: LD_EXP 26
27338: PUSH
27339: LD_INT 1
27341: PLUS
27342: ST_TO_ADDR
// if un = arDepot then
27343: LD_VAR 0 1
27347: PUSH
27348: LD_EXP 48
27352: EQUAL
27353: IFFALSE 27362
// YouLost ( Base ) ;
27355: LD_STRING Base
27357: PPUSH
27358: CALL_OW 104
// if un = Rolf then
27362: LD_VAR 0 1
27366: PUSH
27367: LD_EXP 47
27371: EQUAL
27372: IFFALSE 27382
// rolfDied := true ;
27374: LD_ADDR_EXP 13
27378: PUSH
27379: LD_INT 1
27381: ST_TO_ADDR
// if un in rolfSquad then
27382: LD_VAR 0 1
27386: PUSH
27387: LD_EXP 51
27391: IN
27392: IFFALSE 27410
// rolfSquad := rolfSquad diff un ;
27394: LD_ADDR_EXP 51
27398: PUSH
27399: LD_EXP 51
27403: PUSH
27404: LD_VAR 0 1
27408: DIFF
27409: ST_TO_ADDR
// if un in omarSquad then
27410: LD_VAR 0 1
27414: PUSH
27415: LD_EXP 52
27419: IN
27420: IFFALSE 27438
// omarSquad := omarSquad diff un ;
27422: LD_ADDR_EXP 52
27426: PUSH
27427: LD_EXP 52
27431: PUSH
27432: LD_VAR 0 1
27436: DIFF
27437: ST_TO_ADDR
// if GetSide ( un ) = 3 then
27438: LD_VAR 0 1
27442: PPUSH
27443: CALL_OW 255
27447: PUSH
27448: LD_INT 3
27450: EQUAL
27451: IFFALSE 27467
// ruLoseCounter := ruLoseCounter + 1 ;
27453: LD_ADDR_EXP 5
27457: PUSH
27458: LD_EXP 5
27462: PUSH
27463: LD_INT 1
27465: PLUS
27466: ST_TO_ADDR
// if un in ruAttackers then
27467: LD_VAR 0 1
27471: PUSH
27472: LD_EXP 61
27476: IN
27477: IFFALSE 27495
// ruAttackers := ruAttackers diff un ;
27479: LD_ADDR_EXP 61
27483: PUSH
27484: LD_EXP 61
27488: PUSH
27489: LD_VAR 0 1
27493: DIFF
27494: ST_TO_ADDR
// end ;
27495: PPOPN 1
27497: END
// on EnterVehicle ( vehicle , unit ) do begin if GetSide ( unit ) in [ 5 , 8 ] and GetLives ( unit ) < 1000 then
27498: LD_VAR 0 2
27502: PPUSH
27503: CALL_OW 255
27507: PUSH
27508: LD_INT 5
27510: PUSH
27511: LD_INT 8
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: IN
27518: PUSH
27519: LD_VAR 0 2
27523: PPUSH
27524: CALL_OW 256
27528: PUSH
27529: LD_INT 1000
27531: LESS
27532: AND
27533: IFFALSE 27547
// SetLives ( unit , 1000 ) ;
27535: LD_VAR 0 2
27539: PPUSH
27540: LD_INT 1000
27542: PPUSH
27543: CALL_OW 234
// end ;
27547: PPOPN 2
27549: END
// on EvacuateVehicle ( un , vehicle , p1 , p2 ) do var i , b , p , tmp ;
27550: LD_INT 0
27552: PPUSH
27553: PPUSH
27554: PPUSH
27555: PPUSH
// begin if GetSide ( vehicle ) = 8 and rolfAttack then
27556: LD_VAR 0 2
27560: PPUSH
27561: CALL_OW 255
27565: PUSH
27566: LD_INT 8
27568: EQUAL
27569: PUSH
27570: LD_EXP 32
27574: AND
27575: IFFALSE 27592
// ComMoveXY ( un , 221 , 161 ) ;
27577: LD_VAR 0 1
27581: PPUSH
27582: LD_INT 221
27584: PPUSH
27585: LD_INT 161
27587: PPUSH
27588: CALL_OW 111
// if GetSide ( vehicle ) = 5 and omarAttack then
27592: LD_VAR 0 2
27596: PPUSH
27597: CALL_OW 255
27601: PUSH
27602: LD_INT 5
27604: EQUAL
27605: PUSH
27606: LD_EXP 23
27610: AND
27611: IFFALSE 27720
// begin ComMoveXY ( un , 333 , 233 ) ;
27613: LD_VAR 0 1
27617: PPUSH
27618: LD_INT 333
27620: PPUSH
27621: LD_INT 233
27623: PPUSH
27624: CALL_OW 111
// if not HexInfo ( 334 , 241 ) or not GetBType ( HexInfo ( 334 , 241 ) ) = b_armoury then
27628: LD_INT 334
27630: PPUSH
27631: LD_INT 241
27633: PPUSH
27634: CALL_OW 428
27638: NOT
27639: PUSH
27640: LD_INT 334
27642: PPUSH
27643: LD_INT 241
27645: PPUSH
27646: CALL_OW 428
27650: PPUSH
27651: CALL_OW 266
27655: PUSH
27656: LD_INT 4
27658: EQUAL
27659: NOT
27660: OR
27661: IFFALSE 27665
// exit ;
27663: GO 28245
// AddComEnterUnit ( un , HexInfo ( 334 , 241 ) ) ;
27665: LD_VAR 0 1
27669: PPUSH
27670: LD_INT 334
27672: PPUSH
27673: LD_INT 241
27675: PPUSH
27676: CALL_OW 428
27680: PPUSH
27681: CALL_OW 180
// AddComChangeProfession ( un , class_soldier ) ;
27685: LD_VAR 0 1
27689: PPUSH
27690: LD_INT 1
27692: PPUSH
27693: CALL_OW 183
// AddComExitBuilding ( un ) ;
27697: LD_VAR 0 1
27701: PPUSH
27702: CALL_OW 182
// AddComMoveUnit ( un , Omar ) ;
27706: LD_VAR 0 1
27710: PPUSH
27711: LD_EXP 44
27715: PPUSH
27716: CALL_OW 172
// end ; if GetSide ( un ) = 3 and not un in ruAttackers then
27720: LD_VAR 0 1
27724: PPUSH
27725: CALL_OW 255
27729: PUSH
27730: LD_INT 3
27732: EQUAL
27733: PUSH
27734: LD_VAR 0 1
27738: PUSH
27739: LD_EXP 61
27743: IN
27744: NOT
27745: AND
27746: IFFALSE 28245
// begin if not IsInArea ( un , ruMainBase ) then
27748: LD_VAR 0 1
27752: PPUSH
27753: LD_INT 10
27755: PPUSH
27756: CALL_OW 308
27760: NOT
27761: IFFALSE 27778
// ComMoveXY ( un , 62 , 98 ) ;
27763: LD_VAR 0 1
27767: PPUSH
27768: LD_INT 62
27770: PPUSH
27771: LD_INT 98
27773: PPUSH
27774: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27778: LD_INT 35
27780: PPUSH
27781: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
27785: LD_VAR 0 1
27789: PPUSH
27790: CALL_OW 302
27794: NOT
27795: PUSH
27796: LD_VAR 0 1
27800: PPUSH
27801: LD_INT 10
27803: PPUSH
27804: CALL_OW 308
27808: OR
27809: IFFALSE 27778
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
27811: LD_ADDR_EXP 59
27815: PUSH
27816: LD_EXP 59
27820: PPUSH
27821: LD_EXP 59
27825: PUSH
27826: LD_INT 1
27828: PLUS
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 1
27839: ST_TO_ADDR
// tmp := [ ruFac1 , ruFac2 ] ;
27840: LD_ADDR_VAR 0 8
27844: PUSH
27845: LD_INT 72
27847: PUSH
27848: LD_INT 12
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: ST_TO_ADDR
// if tmp then
27855: LD_VAR 0 8
27859: IFFALSE 27974
// for i in tmp do
27861: LD_ADDR_VAR 0 5
27865: PUSH
27866: LD_VAR 0 8
27870: PUSH
27871: FOR_IN
27872: IFFALSE 27972
// if UnitsInside ( i ) < 6 then
27874: LD_VAR 0 5
27878: PPUSH
27879: CALL_OW 313
27883: PUSH
27884: LD_INT 6
27886: LESS
27887: IFFALSE 27970
// begin AddComEnterUnit ( un , i ) ;
27889: LD_VAR 0 1
27893: PPUSH
27894: LD_VAR 0 5
27898: PPUSH
27899: CALL_OW 180
// AddComConstruct ( tmp , [ ru_medium_tracked , ru_heavy_wheeled ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_gun , ru_heavy_gun , ru_rocket ] [ rand ( 1 , 3 ) ] ) ;
27903: LD_VAR 0 8
27907: PPUSH
27908: LD_INT 22
27910: PUSH
27911: LD_INT 23
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 1
27920: PPUSH
27921: LD_INT 2
27923: PPUSH
27924: CALL_OW 12
27928: ARRAY
27929: PPUSH
27930: LD_INT 1
27932: PPUSH
27933: LD_INT 1
27935: PPUSH
27936: LD_INT 44
27938: PUSH
27939: LD_INT 46
27941: PUSH
27942: LD_INT 47
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 1
27952: PPUSH
27953: LD_INT 3
27955: PPUSH
27956: CALL_OW 12
27960: ARRAY
27961: PPUSH
27962: CALL_OW 185
// exit ;
27966: POP
27967: POP
27968: GO 28245
// end ;
27970: GO 27871
27972: POP
27973: POP
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
27974: LD_ADDR_VAR 0 8
27978: PUSH
27979: LD_INT 10
27981: PPUSH
27982: LD_INT 22
27984: PUSH
27985: LD_INT 3
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 50
27994: PUSH
27995: EMPTY
27996: LIST
27997: PUSH
27998: LD_INT 2
28000: PUSH
28001: LD_INT 30
28003: PUSH
28004: LD_INT 4
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 5
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 30
28023: PUSH
28024: LD_INT 32
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: PUSH
28031: LD_INT 30
28033: PUSH
28034: LD_INT 31
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: PPUSH
28053: CALL_OW 70
28057: ST_TO_ADDR
// if not tmp then
28058: LD_VAR 0 8
28062: NOT
28063: IFFALSE 28082
// begin ComMoveXY ( un , 83 , 133 ) ;
28065: LD_VAR 0 1
28069: PPUSH
28070: LD_INT 83
28072: PPUSH
28073: LD_INT 133
28075: PPUSH
28076: CALL_OW 111
// exit ;
28080: GO 28245
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28082: LD_ADDR_VAR 0 6
28086: PUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: LD_VAR 0 8
28096: PPUSH
28097: LD_INT 1
28099: PPUSH
28100: LD_INT 1
28102: PPUSH
28103: CALL 34861 0 4
28107: PUSH
28108: FOR_IN
28109: IFFALSE 28243
// begin case GetBType ( b ) of b_armoury , b_barracks :
28111: LD_VAR 0 6
28115: PPUSH
28116: CALL_OW 266
28120: PUSH
28121: LD_INT 4
28123: DOUBLE
28124: EQUAL
28125: IFTRUE 28135
28127: LD_INT 5
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28146
28135: POP
// p := 6 ; b_breastwork , b_bunker :
28136: LD_ADDR_VAR 0 7
28140: PUSH
28141: LD_INT 6
28143: ST_TO_ADDR
28144: GO 28172
28146: LD_INT 31
28148: DOUBLE
28149: EQUAL
28150: IFTRUE 28160
28152: LD_INT 32
28154: DOUBLE
28155: EQUAL
28156: IFTRUE 28160
28158: GO 28171
28160: POP
// p := 1 ; end ;
28161: LD_ADDR_VAR 0 7
28165: PUSH
28166: LD_INT 1
28168: ST_TO_ADDR
28169: GO 28172
28171: POP
// if UnitsInside ( b ) < p then
28172: LD_VAR 0 6
28176: PPUSH
28177: CALL_OW 313
28181: PUSH
28182: LD_VAR 0 7
28186: LESS
28187: IFFALSE 28241
// begin ComEnterUnit ( un , b ) ;
28189: LD_VAR 0 1
28193: PPUSH
28194: LD_VAR 0 6
28198: PPUSH
28199: CALL_OW 120
// if GetBType ( b ) in [ b_armoury , b_barracks ] then
28203: LD_VAR 0 6
28207: PPUSH
28208: CALL_OW 266
28212: PUSH
28213: LD_INT 4
28215: PUSH
28216: LD_INT 5
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: IN
28223: IFFALSE 28237
// AddComChangeProfession ( un , class_soldier ) ;
28225: LD_VAR 0 1
28229: PPUSH
28230: LD_INT 1
28232: PPUSH
28233: CALL_OW 183
// exit ;
28237: POP
28238: POP
28239: GO 28245
// end ; end ;
28241: GO 28108
28243: POP
28244: POP
// end ; end ;
28245: PPOPN 8
28247: END
// on EvacuateBuilding ( building , un ) do var p , tmp , b ;
28248: LD_INT 0
28250: PPUSH
28251: PPUSH
28252: PPUSH
// begin if GetSide ( un ) = 3 and GetClass ( un ) = 1 and not un in ruMainBaseSquad then
28253: LD_VAR 0 2
28257: PPUSH
28258: CALL_OW 255
28262: PUSH
28263: LD_INT 3
28265: EQUAL
28266: PUSH
28267: LD_VAR 0 2
28271: PPUSH
28272: CALL_OW 257
28276: PUSH
28277: LD_INT 1
28279: EQUAL
28280: AND
28281: PUSH
28282: LD_VAR 0 2
28286: PUSH
28287: LD_EXP 59
28291: IN
28292: NOT
28293: AND
28294: IFFALSE 28607
// begin ComMoveToArea ( un , ruMainBase ) ;
28296: LD_VAR 0 2
28300: PPUSH
28301: LD_INT 10
28303: PPUSH
28304: CALL_OW 113
// repeat wait ( 0 0$1 ) ;
28308: LD_INT 35
28310: PPUSH
28311: CALL_OW 67
// until not IsOk ( un ) or IsInArea ( un , ruMainBase ) ;
28315: LD_VAR 0 2
28319: PPUSH
28320: CALL_OW 302
28324: NOT
28325: PUSH
28326: LD_VAR 0 2
28330: PPUSH
28331: LD_INT 10
28333: PPUSH
28334: CALL_OW 308
28338: OR
28339: IFFALSE 28308
// ruMainBaseSquad := Replace ( ruMainBaseSquad , ruMainBaseSquad + 1 , un ) ;
28341: LD_ADDR_EXP 59
28345: PUSH
28346: LD_EXP 59
28350: PPUSH
28351: LD_EXP 59
28355: PUSH
28356: LD_INT 1
28358: PLUS
28359: PPUSH
28360: LD_VAR 0 2
28364: PPUSH
28365: CALL_OW 1
28369: ST_TO_ADDR
// tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28370: LD_ADDR_VAR 0 4
28374: PUSH
28375: LD_INT 10
28377: PPUSH
28378: LD_INT 22
28380: PUSH
28381: LD_INT 3
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 50
28390: PUSH
28391: EMPTY
28392: LIST
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: LD_INT 30
28399: PUSH
28400: LD_INT 4
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 30
28409: PUSH
28410: LD_INT 5
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 30
28419: PUSH
28420: LD_INT 32
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 30
28429: PUSH
28430: LD_INT 31
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 70
28453: ST_TO_ADDR
// if not tmp then
28454: LD_VAR 0 4
28458: NOT
28459: IFFALSE 28478
// begin ComMoveXY ( un , 83 , 133 ) ;
28461: LD_VAR 0 2
28465: PPUSH
28466: LD_INT 83
28468: PPUSH
28469: LD_INT 133
28471: PPUSH
28472: CALL_OW 111
// exit ;
28476: GO 28856
// end ; for b in SortByDistanceUnit ( un , tmp , true , true ) do
28478: LD_ADDR_VAR 0 5
28482: PUSH
28483: LD_VAR 0 2
28487: PPUSH
28488: LD_VAR 0 4
28492: PPUSH
28493: LD_INT 1
28495: PPUSH
28496: LD_INT 1
28498: PPUSH
28499: CALL 34861 0 4
28503: PUSH
28504: FOR_IN
28505: IFFALSE 28605
// begin case GetBType ( b ) of b_armoury , b_barracks :
28507: LD_VAR 0 5
28511: PPUSH
28512: CALL_OW 266
28516: PUSH
28517: LD_INT 4
28519: DOUBLE
28520: EQUAL
28521: IFTRUE 28531
28523: LD_INT 5
28525: DOUBLE
28526: EQUAL
28527: IFTRUE 28531
28529: GO 28542
28531: POP
// p := 6 ; b_breastwork , b_bunker :
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_INT 6
28539: ST_TO_ADDR
28540: GO 28568
28542: LD_INT 31
28544: DOUBLE
28545: EQUAL
28546: IFTRUE 28556
28548: LD_INT 32
28550: DOUBLE
28551: EQUAL
28552: IFTRUE 28556
28554: GO 28567
28556: POP
// p := 1 ; end ;
28557: LD_ADDR_VAR 0 3
28561: PUSH
28562: LD_INT 1
28564: ST_TO_ADDR
28565: GO 28568
28567: POP
// if UnitsInside ( b ) < p then
28568: LD_VAR 0 5
28572: PPUSH
28573: CALL_OW 313
28577: PUSH
28578: LD_VAR 0 3
28582: LESS
28583: IFFALSE 28603
// begin ComEnterUnit ( un , b ) ;
28585: LD_VAR 0 2
28589: PPUSH
28590: LD_VAR 0 5
28594: PPUSH
28595: CALL_OW 120
// exit ;
28599: POP
28600: POP
28601: GO 28856
// end ; end ;
28603: GO 28504
28605: POP
28606: POP
// end ; if un in ruMainBaseSquad and GetClass ( un ) = 1 then
28607: LD_VAR 0 2
28611: PUSH
28612: LD_EXP 59
28616: IN
28617: PUSH
28618: LD_VAR 0 2
28622: PPUSH
28623: CALL_OW 257
28627: PUSH
28628: LD_INT 1
28630: EQUAL
28631: AND
28632: IFFALSE 28856
// begin tmp := FilterUnitsInArea ( ruMainBase , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) ;
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: LD_INT 10
28641: PPUSH
28642: LD_INT 22
28644: PUSH
28645: LD_INT 3
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 50
28654: PUSH
28655: EMPTY
28656: LIST
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 30
28663: PUSH
28664: LD_INT 4
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 30
28673: PUSH
28674: LD_INT 5
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 30
28683: PUSH
28684: LD_INT 32
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 30
28693: PUSH
28694: LD_INT 31
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 70
28717: ST_TO_ADDR
// if not tmp then
28718: LD_VAR 0 4
28722: NOT
28723: IFFALSE 28727
// exit ;
28725: GO 28856
// for b in SortByDistanceUnit ( un , tmp , true , true ) do
28727: LD_ADDR_VAR 0 5
28731: PUSH
28732: LD_VAR 0 2
28736: PPUSH
28737: LD_VAR 0 4
28741: PPUSH
28742: LD_INT 1
28744: PPUSH
28745: LD_INT 1
28747: PPUSH
28748: CALL 34861 0 4
28752: PUSH
28753: FOR_IN
28754: IFFALSE 28854
// begin case GetBType ( b ) of b_armoury , b_barracks :
28756: LD_VAR 0 5
28760: PPUSH
28761: CALL_OW 266
28765: PUSH
28766: LD_INT 4
28768: DOUBLE
28769: EQUAL
28770: IFTRUE 28780
28772: LD_INT 5
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28791
28780: POP
// p := 6 ; b_breastwork , b_bunker :
28781: LD_ADDR_VAR 0 3
28785: PUSH
28786: LD_INT 6
28788: ST_TO_ADDR
28789: GO 28817
28791: LD_INT 31
28793: DOUBLE
28794: EQUAL
28795: IFTRUE 28805
28797: LD_INT 32
28799: DOUBLE
28800: EQUAL
28801: IFTRUE 28805
28803: GO 28816
28805: POP
// p := 1 ; end ;
28806: LD_ADDR_VAR 0 3
28810: PUSH
28811: LD_INT 1
28813: ST_TO_ADDR
28814: GO 28817
28816: POP
// if UnitsInside ( b ) < p then
28817: LD_VAR 0 5
28821: PPUSH
28822: CALL_OW 313
28826: PUSH
28827: LD_VAR 0 3
28831: LESS
28832: IFFALSE 28852
// begin ComEnterUnit ( un , b ) ;
28834: LD_VAR 0 2
28838: PPUSH
28839: LD_VAR 0 5
28843: PPUSH
28844: CALL_OW 120
// exit ;
28848: POP
28849: POP
28850: GO 28856
// end ; end ;
28852: GO 28753
28854: POP
28855: POP
// end ; end ;
28856: PPOPN 5
28858: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
28859: LD_VAR 0 1
28863: PUSH
28864: LD_INT 2
28866: EQUAL
28867: PUSH
28868: LD_VAR 0 2
28872: PUSH
28873: LD_INT 5
28875: PUSH
28876: LD_INT 8
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: IN
28883: AND
28884: IFFALSE 28893
// YouLost ( FriendlyFire ) ;
28886: LD_STRING FriendlyFire
28888: PPUSH
28889: CALL_OW 104
// end ;
28893: PPOPN 2
28895: END
// on EnterBuilding ( building , unit ) do begin if GetSide ( building ) = 8 and GetBType ( building ) = b_barracks then
28896: LD_VAR 0 1
28900: PPUSH
28901: CALL_OW 255
28905: PUSH
28906: LD_INT 8
28908: EQUAL
28909: PUSH
28910: LD_VAR 0 1
28914: PPUSH
28915: CALL_OW 266
28919: PUSH
28920: LD_INT 5
28922: EQUAL
28923: AND
28924: IFFALSE 28938
// SetClass ( unit , class_mortar ) ;
28926: LD_VAR 0 2
28930: PPUSH
28931: LD_INT 8
28933: PPUSH
28934: CALL_OW 336
// end ; end_of_file
28938: PPOPN 2
28940: END
// every 0 0$35 + 0 0$20 trigger GetResourceArea ( northCrates , mat_cans ) < [ 20 , 18 , 16 , 12 ] [ Difficulty ] do
28941: LD_INT 6
28943: PPUSH
28944: LD_INT 1
28946: PPUSH
28947: CALL_OW 287
28951: PUSH
28952: LD_INT 20
28954: PUSH
28955: LD_INT 18
28957: PUSH
28958: LD_INT 16
28960: PUSH
28961: LD_INT 12
28963: PUSH
28964: EMPTY
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: PUSH
28970: LD_OWVAR 67
28974: ARRAY
28975: LESS
28976: IFFALSE 29003
28978: GO 28980
28980: DISABLE
// begin enable ;
28981: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , northCrates , true ) ;
28982: LD_INT 1
28984: PPUSH
28985: LD_INT 5
28987: PPUSH
28988: CALL_OW 12
28992: PPUSH
28993: LD_INT 6
28995: PPUSH
28996: LD_INT 1
28998: PPUSH
28999: CALL_OW 55
// end ;
29003: END
// every 0 0$25 trigger Prob ( 50 ) and tick < [ 28 28$00 , 27 27$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] and GetResourceArea ( southCrates , mat_cans ) < 10 do
29004: LD_INT 50
29006: PPUSH
29007: CALL_OW 13
29011: PUSH
29012: LD_OWVAR 1
29016: PUSH
29017: LD_INT 58800
29019: PUSH
29020: LD_INT 56700
29022: PUSH
29023: LD_INT 54600
29025: PUSH
29026: LD_INT 52500
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: PUSH
29035: LD_OWVAR 67
29039: ARRAY
29040: LESS
29041: AND
29042: PUSH
29043: LD_INT 21
29045: PPUSH
29046: LD_INT 1
29048: PPUSH
29049: CALL_OW 287
29053: PUSH
29054: LD_INT 10
29056: LESS
29057: AND
29058: IFFALSE 29100
29060: GO 29062
29062: DISABLE
// begin enable ;
29063: ENABLE
// wait ( rand ( 0 0$1 , 0 0$10 ) ) ;
29064: LD_INT 35
29066: PPUSH
29067: LD_INT 350
29069: PPUSH
29070: CALL_OW 12
29074: PPUSH
29075: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , southCrates , true ) ;
29079: LD_INT 1
29081: PPUSH
29082: LD_INT 5
29084: PPUSH
29085: CALL_OW 12
29089: PPUSH
29090: LD_INT 21
29092: PPUSH
29093: LD_INT 1
29095: PPUSH
29096: CALL_OW 55
// end ; end_of_file
29100: END
// every 0 0$1 trigger ( omarWantVehicles and omarWaitingForVehiclesTimer ) or ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) do
29101: LD_EXP 18
29105: PUSH
29106: LD_EXP 20
29110: AND
29111: PUSH
29112: LD_EXP 17
29116: PUSH
29117: LD_EXP 19
29121: AND
29122: OR
29123: IFFALSE 29442
29125: GO 29127
29127: DISABLE
// begin enable ;
29128: ENABLE
// if ( omarWantVehicles and omarWaitingForVehiclesTimer ) and ( rolfWantVehicles and rolfWaitingForVehiclesTimer ) then
29129: LD_EXP 18
29133: PUSH
29134: LD_EXP 20
29138: AND
29139: PUSH
29140: LD_EXP 17
29144: PUSH
29145: LD_EXP 19
29149: AND
29150: AND
29151: IFFALSE 29288
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer , #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29153: LD_ADDR_OWVAR 47
29157: PUSH
29158: LD_STRING #X106-1a
29160: PUSH
29161: LD_EXP 21
29165: PUSH
29166: LD_INT 16
29168: PPUSH
29169: LD_INT 22
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 21
29181: PUSH
29182: LD_INT 2
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 33
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 58
29201: PUSH
29202: EMPTY
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: PPUSH
29211: CALL_OW 70
29215: MINUS
29216: PPUSH
29217: CALL 69361 0 1
29221: PUSH
29222: LD_STRING #X106-3a
29224: PUSH
29225: LD_EXP 20
29229: PUSH
29230: LD_STRING #X106-1
29232: PUSH
29233: LD_EXP 51
29237: PUSH
29238: LD_INT 0
29240: PLUS
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: LD_INT 55
29249: PUSH
29250: EMPTY
29251: LIST
29252: PPUSH
29253: CALL_OW 72
29257: PUSH
29258: LD_INT 0
29260: PLUS
29261: MINUS
29262: PPUSH
29263: CALL 69361 0 1
29267: PUSH
29268: LD_STRING #X106-3
29270: PUSH
29271: LD_EXP 19
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: ST_TO_ADDR
// end else
29286: GO 29442
// if omarWantVehicles and omarWaitingForVehiclesTimer then
29288: LD_EXP 18
29292: PUSH
29293: LD_EXP 20
29297: AND
29298: IFFALSE 29385
// begin display_strings := [ #X106-1a , toNaturalNumber ( omarVehiclesCounter - FilterUnitsInArea ( omarVehiclesArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_empty ] ] ) ) , #X106-3a , omarWaitingForVehiclesTimer ] ;
29300: LD_ADDR_OWVAR 47
29304: PUSH
29305: LD_STRING #X106-1a
29307: PUSH
29308: LD_EXP 21
29312: PUSH
29313: LD_INT 16
29315: PPUSH
29316: LD_INT 22
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 21
29328: PUSH
29329: LD_INT 2
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 33
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 58
29348: PUSH
29349: EMPTY
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: PPUSH
29358: CALL_OW 70
29362: MINUS
29363: PPUSH
29364: CALL 69361 0 1
29368: PUSH
29369: LD_STRING #X106-3a
29371: PUSH
29372: LD_EXP 20
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: ST_TO_ADDR
// end else
29383: GO 29442
// begin display_strings := [ #X106-1 , toNaturalNumber ( ( rolfSquad + 0 ) - ( UnitFilter ( rolfSquad , [ f_driving ] ) + 0 ) ) , #X106-3 , rolfWaitingForVehiclesTimer ] ;
29385: LD_ADDR_OWVAR 47
29389: PUSH
29390: LD_STRING #X106-1
29392: PUSH
29393: LD_EXP 51
29397: PUSH
29398: LD_INT 0
29400: PLUS
29401: PUSH
29402: LD_EXP 51
29406: PPUSH
29407: LD_INT 55
29409: PUSH
29410: EMPTY
29411: LIST
29412: PPUSH
29413: CALL_OW 72
29417: PUSH
29418: LD_INT 0
29420: PLUS
29421: MINUS
29422: PPUSH
29423: CALL 69361 0 1
29427: PUSH
29428: LD_STRING #X106-3
29430: PUSH
29431: LD_EXP 19
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
// end ; end ; end_of_file
29442: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29443: LD_INT 0
29445: PPUSH
29446: PPUSH
// if exist_mode then
29447: LD_VAR 0 2
29451: IFFALSE 29497
// begin unit := CreateCharacter ( prefix & ident ) ;
29453: LD_ADDR_VAR 0 5
29457: PUSH
29458: LD_VAR 0 3
29462: PUSH
29463: LD_VAR 0 1
29467: STR
29468: PPUSH
29469: CALL_OW 34
29473: ST_TO_ADDR
// if unit then
29474: LD_VAR 0 5
29478: IFFALSE 29495
// DeleteCharacters ( prefix & ident ) ;
29480: LD_VAR 0 3
29484: PUSH
29485: LD_VAR 0 1
29489: STR
29490: PPUSH
29491: CALL_OW 40
// end else
29495: GO 29512
// unit := NewCharacter ( ident ) ;
29497: LD_ADDR_VAR 0 5
29501: PUSH
29502: LD_VAR 0 1
29506: PPUSH
29507: CALL_OW 25
29511: ST_TO_ADDR
// result := unit ;
29512: LD_ADDR_VAR 0 4
29516: PUSH
29517: LD_VAR 0 5
29521: ST_TO_ADDR
// end ;
29522: LD_VAR 0 4
29526: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29527: LD_INT 0
29529: PPUSH
29530: PPUSH
// if not side or not nation then
29531: LD_VAR 0 1
29535: NOT
29536: PUSH
29537: LD_VAR 0 2
29541: NOT
29542: OR
29543: IFFALSE 29547
// exit ;
29545: GO 30315
// case nation of nation_american :
29547: LD_VAR 0 2
29551: PUSH
29552: LD_INT 1
29554: DOUBLE
29555: EQUAL
29556: IFTRUE 29560
29558: GO 29774
29560: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29561: LD_ADDR_VAR 0 4
29565: PUSH
29566: LD_INT 35
29568: PUSH
29569: LD_INT 45
29571: PUSH
29572: LD_INT 46
29574: PUSH
29575: LD_INT 47
29577: PUSH
29578: LD_INT 82
29580: PUSH
29581: LD_INT 83
29583: PUSH
29584: LD_INT 84
29586: PUSH
29587: LD_INT 85
29589: PUSH
29590: LD_INT 86
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: LD_INT 2
29598: PUSH
29599: LD_INT 6
29601: PUSH
29602: LD_INT 15
29604: PUSH
29605: LD_INT 16
29607: PUSH
29608: LD_INT 7
29610: PUSH
29611: LD_INT 12
29613: PUSH
29614: LD_INT 13
29616: PUSH
29617: LD_INT 10
29619: PUSH
29620: LD_INT 14
29622: PUSH
29623: LD_INT 20
29625: PUSH
29626: LD_INT 21
29628: PUSH
29629: LD_INT 22
29631: PUSH
29632: LD_INT 25
29634: PUSH
29635: LD_INT 32
29637: PUSH
29638: LD_INT 27
29640: PUSH
29641: LD_INT 36
29643: PUSH
29644: LD_INT 69
29646: PUSH
29647: LD_INT 39
29649: PUSH
29650: LD_INT 34
29652: PUSH
29653: LD_INT 40
29655: PUSH
29656: LD_INT 48
29658: PUSH
29659: LD_INT 49
29661: PUSH
29662: LD_INT 50
29664: PUSH
29665: LD_INT 51
29667: PUSH
29668: LD_INT 52
29670: PUSH
29671: LD_INT 53
29673: PUSH
29674: LD_INT 54
29676: PUSH
29677: LD_INT 55
29679: PUSH
29680: LD_INT 56
29682: PUSH
29683: LD_INT 57
29685: PUSH
29686: LD_INT 58
29688: PUSH
29689: LD_INT 59
29691: PUSH
29692: LD_INT 60
29694: PUSH
29695: LD_INT 61
29697: PUSH
29698: LD_INT 62
29700: PUSH
29701: LD_INT 80
29703: PUSH
29704: LD_INT 82
29706: PUSH
29707: LD_INT 83
29709: PUSH
29710: LD_INT 84
29712: PUSH
29713: LD_INT 85
29715: PUSH
29716: LD_INT 86
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: LIST
29750: LIST
29751: LIST
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: ST_TO_ADDR
29772: GO 30239
29774: LD_INT 2
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 30008
29782: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29783: LD_ADDR_VAR 0 4
29787: PUSH
29788: LD_INT 35
29790: PUSH
29791: LD_INT 45
29793: PUSH
29794: LD_INT 46
29796: PUSH
29797: LD_INT 47
29799: PUSH
29800: LD_INT 82
29802: PUSH
29803: LD_INT 83
29805: PUSH
29806: LD_INT 84
29808: PUSH
29809: LD_INT 85
29811: PUSH
29812: LD_INT 87
29814: PUSH
29815: LD_INT 70
29817: PUSH
29818: LD_INT 1
29820: PUSH
29821: LD_INT 11
29823: PUSH
29824: LD_INT 3
29826: PUSH
29827: LD_INT 4
29829: PUSH
29830: LD_INT 5
29832: PUSH
29833: LD_INT 6
29835: PUSH
29836: LD_INT 15
29838: PUSH
29839: LD_INT 18
29841: PUSH
29842: LD_INT 7
29844: PUSH
29845: LD_INT 17
29847: PUSH
29848: LD_INT 8
29850: PUSH
29851: LD_INT 20
29853: PUSH
29854: LD_INT 21
29856: PUSH
29857: LD_INT 22
29859: PUSH
29860: LD_INT 72
29862: PUSH
29863: LD_INT 26
29865: PUSH
29866: LD_INT 69
29868: PUSH
29869: LD_INT 39
29871: PUSH
29872: LD_INT 40
29874: PUSH
29875: LD_INT 41
29877: PUSH
29878: LD_INT 42
29880: PUSH
29881: LD_INT 43
29883: PUSH
29884: LD_INT 48
29886: PUSH
29887: LD_INT 49
29889: PUSH
29890: LD_INT 50
29892: PUSH
29893: LD_INT 51
29895: PUSH
29896: LD_INT 52
29898: PUSH
29899: LD_INT 53
29901: PUSH
29902: LD_INT 54
29904: PUSH
29905: LD_INT 55
29907: PUSH
29908: LD_INT 56
29910: PUSH
29911: LD_INT 60
29913: PUSH
29914: LD_INT 61
29916: PUSH
29917: LD_INT 62
29919: PUSH
29920: LD_INT 66
29922: PUSH
29923: LD_INT 67
29925: PUSH
29926: LD_INT 68
29928: PUSH
29929: LD_INT 81
29931: PUSH
29932: LD_INT 82
29934: PUSH
29935: LD_INT 83
29937: PUSH
29938: LD_INT 84
29940: PUSH
29941: LD_INT 85
29943: PUSH
29944: LD_INT 87
29946: PUSH
29947: LD_INT 88
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
30006: GO 30239
30008: LD_INT 3
30010: DOUBLE
30011: EQUAL
30012: IFTRUE 30016
30014: GO 30238
30016: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30017: LD_ADDR_VAR 0 4
30021: PUSH
30022: LD_INT 46
30024: PUSH
30025: LD_INT 47
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: LD_INT 82
30036: PUSH
30037: LD_INT 83
30039: PUSH
30040: LD_INT 84
30042: PUSH
30043: LD_INT 85
30045: PUSH
30046: LD_INT 86
30048: PUSH
30049: LD_INT 11
30051: PUSH
30052: LD_INT 9
30054: PUSH
30055: LD_INT 20
30057: PUSH
30058: LD_INT 19
30060: PUSH
30061: LD_INT 21
30063: PUSH
30064: LD_INT 24
30066: PUSH
30067: LD_INT 22
30069: PUSH
30070: LD_INT 25
30072: PUSH
30073: LD_INT 28
30075: PUSH
30076: LD_INT 29
30078: PUSH
30079: LD_INT 30
30081: PUSH
30082: LD_INT 31
30084: PUSH
30085: LD_INT 37
30087: PUSH
30088: LD_INT 38
30090: PUSH
30091: LD_INT 32
30093: PUSH
30094: LD_INT 27
30096: PUSH
30097: LD_INT 33
30099: PUSH
30100: LD_INT 69
30102: PUSH
30103: LD_INT 39
30105: PUSH
30106: LD_INT 34
30108: PUSH
30109: LD_INT 40
30111: PUSH
30112: LD_INT 71
30114: PUSH
30115: LD_INT 23
30117: PUSH
30118: LD_INT 44
30120: PUSH
30121: LD_INT 48
30123: PUSH
30124: LD_INT 49
30126: PUSH
30127: LD_INT 50
30129: PUSH
30130: LD_INT 51
30132: PUSH
30133: LD_INT 52
30135: PUSH
30136: LD_INT 53
30138: PUSH
30139: LD_INT 54
30141: PUSH
30142: LD_INT 55
30144: PUSH
30145: LD_INT 56
30147: PUSH
30148: LD_INT 57
30150: PUSH
30151: LD_INT 58
30153: PUSH
30154: LD_INT 59
30156: PUSH
30157: LD_INT 63
30159: PUSH
30160: LD_INT 64
30162: PUSH
30163: LD_INT 65
30165: PUSH
30166: LD_INT 82
30168: PUSH
30169: LD_INT 83
30171: PUSH
30172: LD_INT 84
30174: PUSH
30175: LD_INT 85
30177: PUSH
30178: LD_INT 86
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: ST_TO_ADDR
30236: GO 30239
30238: POP
// if state > - 1 and state < 3 then
30239: LD_VAR 0 3
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: GREATER
30248: PUSH
30249: LD_VAR 0 3
30253: PUSH
30254: LD_INT 3
30256: LESS
30257: AND
30258: IFFALSE 30315
// for i in result do
30260: LD_ADDR_VAR 0 5
30264: PUSH
30265: LD_VAR 0 4
30269: PUSH
30270: FOR_IN
30271: IFFALSE 30313
// if GetTech ( i , side ) <> state then
30273: LD_VAR 0 5
30277: PPUSH
30278: LD_VAR 0 1
30282: PPUSH
30283: CALL_OW 321
30287: PUSH
30288: LD_VAR 0 3
30292: NONEQUAL
30293: IFFALSE 30311
// result := result diff i ;
30295: LD_ADDR_VAR 0 4
30299: PUSH
30300: LD_VAR 0 4
30304: PUSH
30305: LD_VAR 0 5
30309: DIFF
30310: ST_TO_ADDR
30311: GO 30270
30313: POP
30314: POP
// end ;
30315: LD_VAR 0 4
30319: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30320: LD_INT 0
30322: PPUSH
30323: PPUSH
30324: PPUSH
// result := true ;
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 1
30332: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30333: LD_ADDR_VAR 0 5
30337: PUSH
30338: LD_VAR 0 2
30342: PPUSH
30343: CALL_OW 480
30347: ST_TO_ADDR
// if not tmp then
30348: LD_VAR 0 5
30352: NOT
30353: IFFALSE 30357
// exit ;
30355: GO 30406
// for i in tmp do
30357: LD_ADDR_VAR 0 4
30361: PUSH
30362: LD_VAR 0 5
30366: PUSH
30367: FOR_IN
30368: IFFALSE 30404
// if GetTech ( i , side ) <> state_researched then
30370: LD_VAR 0 4
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 321
30384: PUSH
30385: LD_INT 2
30387: NONEQUAL
30388: IFFALSE 30402
// begin result := false ;
30390: LD_ADDR_VAR 0 3
30394: PUSH
30395: LD_INT 0
30397: ST_TO_ADDR
// exit ;
30398: POP
30399: POP
30400: GO 30406
// end ;
30402: GO 30367
30404: POP
30405: POP
// end ;
30406: LD_VAR 0 3
30410: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30411: LD_INT 0
30413: PPUSH
30414: PPUSH
30415: PPUSH
30416: PPUSH
30417: PPUSH
30418: PPUSH
30419: PPUSH
30420: PPUSH
30421: PPUSH
30422: PPUSH
30423: PPUSH
30424: PPUSH
30425: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30426: LD_VAR 0 1
30430: NOT
30431: PUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL_OW 257
30441: PUSH
30442: LD_INT 9
30444: NONEQUAL
30445: OR
30446: IFFALSE 30450
// exit ;
30448: GO 31023
// side := GetSide ( unit ) ;
30450: LD_ADDR_VAR 0 9
30454: PUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: CALL_OW 255
30464: ST_TO_ADDR
// tech_space := tech_spacanom ;
30465: LD_ADDR_VAR 0 12
30469: PUSH
30470: LD_INT 29
30472: ST_TO_ADDR
// tech_time := tech_taurad ;
30473: LD_ADDR_VAR 0 13
30477: PUSH
30478: LD_INT 28
30480: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30481: LD_ADDR_VAR 0 11
30485: PUSH
30486: LD_VAR 0 1
30490: PPUSH
30491: CALL_OW 310
30495: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30496: LD_VAR 0 11
30500: PPUSH
30501: CALL_OW 247
30505: PUSH
30506: LD_INT 2
30508: EQUAL
30509: IFFALSE 30513
// exit ;
30511: GO 31023
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30513: LD_ADDR_VAR 0 8
30517: PUSH
30518: LD_INT 81
30520: PUSH
30521: LD_VAR 0 9
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 3
30532: PUSH
30533: LD_INT 21
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PPUSH
30551: CALL_OW 69
30555: ST_TO_ADDR
// if not tmp then
30556: LD_VAR 0 8
30560: NOT
30561: IFFALSE 30565
// exit ;
30563: GO 31023
// if in_unit then
30565: LD_VAR 0 11
30569: IFFALSE 30593
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30571: LD_ADDR_VAR 0 10
30575: PUSH
30576: LD_VAR 0 8
30580: PPUSH
30581: LD_VAR 0 11
30585: PPUSH
30586: CALL_OW 74
30590: ST_TO_ADDR
30591: GO 30613
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30593: LD_ADDR_VAR 0 10
30597: PUSH
30598: LD_VAR 0 8
30602: PPUSH
30603: LD_VAR 0 1
30607: PPUSH
30608: CALL_OW 74
30612: ST_TO_ADDR
// if not enemy then
30613: LD_VAR 0 10
30617: NOT
30618: IFFALSE 30622
// exit ;
30620: GO 31023
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30622: LD_VAR 0 11
30626: PUSH
30627: LD_VAR 0 11
30631: PPUSH
30632: LD_VAR 0 10
30636: PPUSH
30637: CALL_OW 296
30641: PUSH
30642: LD_INT 13
30644: GREATER
30645: AND
30646: PUSH
30647: LD_VAR 0 1
30651: PPUSH
30652: LD_VAR 0 10
30656: PPUSH
30657: CALL_OW 296
30661: PUSH
30662: LD_INT 12
30664: GREATER
30665: OR
30666: IFFALSE 30670
// exit ;
30668: GO 31023
// missile := [ 1 ] ;
30670: LD_ADDR_VAR 0 14
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30681: LD_VAR 0 9
30685: PPUSH
30686: LD_VAR 0 12
30690: PPUSH
30691: CALL_OW 325
30695: IFFALSE 30724
// missile := Replace ( missile , missile + 1 , 2 ) ;
30697: LD_ADDR_VAR 0 14
30701: PUSH
30702: LD_VAR 0 14
30706: PPUSH
30707: LD_VAR 0 14
30711: PUSH
30712: LD_INT 1
30714: PLUS
30715: PPUSH
30716: LD_INT 2
30718: PPUSH
30719: CALL_OW 1
30723: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30724: LD_VAR 0 9
30728: PPUSH
30729: LD_VAR 0 13
30733: PPUSH
30734: CALL_OW 325
30738: PUSH
30739: LD_VAR 0 10
30743: PPUSH
30744: CALL_OW 255
30748: PPUSH
30749: LD_VAR 0 13
30753: PPUSH
30754: CALL_OW 325
30758: NOT
30759: AND
30760: IFFALSE 30789
// missile := Replace ( missile , missile + 1 , 3 ) ;
30762: LD_ADDR_VAR 0 14
30766: PUSH
30767: LD_VAR 0 14
30771: PPUSH
30772: LD_VAR 0 14
30776: PUSH
30777: LD_INT 1
30779: PLUS
30780: PPUSH
30781: LD_INT 3
30783: PPUSH
30784: CALL_OW 1
30788: ST_TO_ADDR
// if missile < 2 then
30789: LD_VAR 0 14
30793: PUSH
30794: LD_INT 2
30796: LESS
30797: IFFALSE 30801
// exit ;
30799: GO 31023
// x := GetX ( enemy ) ;
30801: LD_ADDR_VAR 0 4
30805: PUSH
30806: LD_VAR 0 10
30810: PPUSH
30811: CALL_OW 250
30815: ST_TO_ADDR
// y := GetY ( enemy ) ;
30816: LD_ADDR_VAR 0 5
30820: PUSH
30821: LD_VAR 0 10
30825: PPUSH
30826: CALL_OW 251
30830: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30831: LD_ADDR_VAR 0 6
30835: PUSH
30836: LD_VAR 0 4
30840: PUSH
30841: LD_INT 1
30843: NEG
30844: PPUSH
30845: LD_INT 1
30847: PPUSH
30848: CALL_OW 12
30852: PLUS
30853: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30854: LD_ADDR_VAR 0 7
30858: PUSH
30859: LD_VAR 0 5
30863: PUSH
30864: LD_INT 1
30866: NEG
30867: PPUSH
30868: LD_INT 1
30870: PPUSH
30871: CALL_OW 12
30875: PLUS
30876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30877: LD_VAR 0 6
30881: PPUSH
30882: LD_VAR 0 7
30886: PPUSH
30887: CALL_OW 488
30891: NOT
30892: IFFALSE 30914
// begin _x := x ;
30894: LD_ADDR_VAR 0 6
30898: PUSH
30899: LD_VAR 0 4
30903: ST_TO_ADDR
// _y := y ;
30904: LD_ADDR_VAR 0 7
30908: PUSH
30909: LD_VAR 0 5
30913: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30914: LD_ADDR_VAR 0 3
30918: PUSH
30919: LD_INT 1
30921: PPUSH
30922: LD_VAR 0 14
30926: PPUSH
30927: CALL_OW 12
30931: ST_TO_ADDR
// case i of 1 :
30932: LD_VAR 0 3
30936: PUSH
30937: LD_INT 1
30939: DOUBLE
30940: EQUAL
30941: IFTRUE 30945
30943: GO 30962
30945: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30946: LD_VAR 0 1
30950: PPUSH
30951: LD_VAR 0 10
30955: PPUSH
30956: CALL_OW 115
30960: GO 31023
30962: LD_INT 2
30964: DOUBLE
30965: EQUAL
30966: IFTRUE 30970
30968: GO 30992
30970: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30971: LD_VAR 0 1
30975: PPUSH
30976: LD_VAR 0 6
30980: PPUSH
30981: LD_VAR 0 7
30985: PPUSH
30986: CALL_OW 153
30990: GO 31023
30992: LD_INT 3
30994: DOUBLE
30995: EQUAL
30996: IFTRUE 31000
30998: GO 31022
31000: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31001: LD_VAR 0 1
31005: PPUSH
31006: LD_VAR 0 6
31010: PPUSH
31011: LD_VAR 0 7
31015: PPUSH
31016: CALL_OW 154
31020: GO 31023
31022: POP
// end ;
31023: LD_VAR 0 2
31027: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31028: LD_INT 0
31030: PPUSH
31031: PPUSH
31032: PPUSH
31033: PPUSH
31034: PPUSH
31035: PPUSH
// if not unit or not building then
31036: LD_VAR 0 1
31040: NOT
31041: PUSH
31042: LD_VAR 0 2
31046: NOT
31047: OR
31048: IFFALSE 31052
// exit ;
31050: GO 31210
// x := GetX ( building ) ;
31052: LD_ADDR_VAR 0 5
31056: PUSH
31057: LD_VAR 0 2
31061: PPUSH
31062: CALL_OW 250
31066: ST_TO_ADDR
// y := GetY ( building ) ;
31067: LD_ADDR_VAR 0 6
31071: PUSH
31072: LD_VAR 0 2
31076: PPUSH
31077: CALL_OW 251
31081: ST_TO_ADDR
// for i = 0 to 5 do
31082: LD_ADDR_VAR 0 4
31086: PUSH
31087: DOUBLE
31088: LD_INT 0
31090: DEC
31091: ST_TO_ADDR
31092: LD_INT 5
31094: PUSH
31095: FOR_TO
31096: IFFALSE 31208
// begin _x := ShiftX ( x , i , 3 ) ;
31098: LD_ADDR_VAR 0 7
31102: PUSH
31103: LD_VAR 0 5
31107: PPUSH
31108: LD_VAR 0 4
31112: PPUSH
31113: LD_INT 3
31115: PPUSH
31116: CALL_OW 272
31120: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31121: LD_ADDR_VAR 0 8
31125: PUSH
31126: LD_VAR 0 6
31130: PPUSH
31131: LD_VAR 0 4
31135: PPUSH
31136: LD_INT 3
31138: PPUSH
31139: CALL_OW 273
31143: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31144: LD_VAR 0 7
31148: PPUSH
31149: LD_VAR 0 8
31153: PPUSH
31154: CALL_OW 488
31158: NOT
31159: IFFALSE 31163
// continue ;
31161: GO 31095
// if HexInfo ( _x , _y ) = 0 then
31163: LD_VAR 0 7
31167: PPUSH
31168: LD_VAR 0 8
31172: PPUSH
31173: CALL_OW 428
31177: PUSH
31178: LD_INT 0
31180: EQUAL
31181: IFFALSE 31206
// begin ComMoveXY ( unit , _x , _y ) ;
31183: LD_VAR 0 1
31187: PPUSH
31188: LD_VAR 0 7
31192: PPUSH
31193: LD_VAR 0 8
31197: PPUSH
31198: CALL_OW 111
// exit ;
31202: POP
31203: POP
31204: GO 31210
// end ; end ;
31206: GO 31095
31208: POP
31209: POP
// end ;
31210: LD_VAR 0 3
31214: RET
// export function ScanBase ( side , base_area ) ; begin
31215: LD_INT 0
31217: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31218: LD_ADDR_VAR 0 3
31222: PUSH
31223: LD_VAR 0 2
31227: PPUSH
31228: LD_INT 81
31230: PUSH
31231: LD_VAR 0 1
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PPUSH
31240: CALL_OW 70
31244: ST_TO_ADDR
// end ;
31245: LD_VAR 0 3
31249: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31250: LD_INT 0
31252: PPUSH
31253: PPUSH
31254: PPUSH
31255: PPUSH
// result := false ;
31256: LD_ADDR_VAR 0 2
31260: PUSH
31261: LD_INT 0
31263: ST_TO_ADDR
// side := GetSide ( unit ) ;
31264: LD_ADDR_VAR 0 3
31268: PUSH
31269: LD_VAR 0 1
31273: PPUSH
31274: CALL_OW 255
31278: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31279: LD_ADDR_VAR 0 4
31283: PUSH
31284: LD_VAR 0 1
31288: PPUSH
31289: CALL_OW 248
31293: ST_TO_ADDR
// case nat of 1 :
31294: LD_VAR 0 4
31298: PUSH
31299: LD_INT 1
31301: DOUBLE
31302: EQUAL
31303: IFTRUE 31307
31305: GO 31318
31307: POP
// tech := tech_lassight ; 2 :
31308: LD_ADDR_VAR 0 5
31312: PUSH
31313: LD_INT 12
31315: ST_TO_ADDR
31316: GO 31357
31318: LD_INT 2
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31337
31326: POP
// tech := tech_mortar ; 3 :
31327: LD_ADDR_VAR 0 5
31331: PUSH
31332: LD_INT 41
31334: ST_TO_ADDR
31335: GO 31357
31337: LD_INT 3
31339: DOUBLE
31340: EQUAL
31341: IFTRUE 31345
31343: GO 31356
31345: POP
// tech := tech_bazooka ; end ;
31346: LD_ADDR_VAR 0 5
31350: PUSH
31351: LD_INT 44
31353: ST_TO_ADDR
31354: GO 31357
31356: POP
// if Researched ( side , tech ) then
31357: LD_VAR 0 3
31361: PPUSH
31362: LD_VAR 0 5
31366: PPUSH
31367: CALL_OW 325
31371: IFFALSE 31398
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31373: LD_ADDR_VAR 0 2
31377: PUSH
31378: LD_INT 5
31380: PUSH
31381: LD_INT 8
31383: PUSH
31384: LD_INT 9
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: PUSH
31392: LD_VAR 0 4
31396: ARRAY
31397: ST_TO_ADDR
// end ;
31398: LD_VAR 0 2
31402: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31403: LD_INT 0
31405: PPUSH
31406: PPUSH
31407: PPUSH
// if not mines then
31408: LD_VAR 0 2
31412: NOT
31413: IFFALSE 31417
// exit ;
31415: GO 31561
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31417: LD_ADDR_VAR 0 5
31421: PUSH
31422: LD_INT 81
31424: PUSH
31425: LD_VAR 0 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: LD_INT 21
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PPUSH
31455: CALL_OW 69
31459: ST_TO_ADDR
// for i in mines do
31460: LD_ADDR_VAR 0 4
31464: PUSH
31465: LD_VAR 0 2
31469: PUSH
31470: FOR_IN
31471: IFFALSE 31559
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31473: LD_VAR 0 4
31477: PUSH
31478: LD_INT 1
31480: ARRAY
31481: PPUSH
31482: LD_VAR 0 4
31486: PUSH
31487: LD_INT 2
31489: ARRAY
31490: PPUSH
31491: CALL_OW 458
31495: NOT
31496: IFFALSE 31500
// continue ;
31498: GO 31470
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31500: LD_VAR 0 4
31504: PUSH
31505: LD_INT 1
31507: ARRAY
31508: PPUSH
31509: LD_VAR 0 4
31513: PUSH
31514: LD_INT 2
31516: ARRAY
31517: PPUSH
31518: CALL_OW 428
31522: PUSH
31523: LD_VAR 0 5
31527: IN
31528: IFFALSE 31557
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31530: LD_VAR 0 4
31534: PUSH
31535: LD_INT 1
31537: ARRAY
31538: PPUSH
31539: LD_VAR 0 4
31543: PUSH
31544: LD_INT 2
31546: ARRAY
31547: PPUSH
31548: LD_VAR 0 1
31552: PPUSH
31553: CALL_OW 456
// end ;
31557: GO 31470
31559: POP
31560: POP
// end ;
31561: LD_VAR 0 3
31565: RET
// export function Count ( array ) ; begin
31566: LD_INT 0
31568: PPUSH
// result := array + 0 ;
31569: LD_ADDR_VAR 0 2
31573: PUSH
31574: LD_VAR 0 1
31578: PUSH
31579: LD_INT 0
31581: PLUS
31582: ST_TO_ADDR
// end ;
31583: LD_VAR 0 2
31587: RET
// export function IsEmpty ( building ) ; begin
31588: LD_INT 0
31590: PPUSH
// if not building then
31591: LD_VAR 0 1
31595: NOT
31596: IFFALSE 31600
// exit ;
31598: GO 31643
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31600: LD_ADDR_VAR 0 2
31604: PUSH
31605: LD_VAR 0 1
31609: PUSH
31610: LD_INT 22
31612: PUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: CALL_OW 255
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 58
31629: PUSH
31630: EMPTY
31631: LIST
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PPUSH
31637: CALL_OW 69
31641: IN
31642: ST_TO_ADDR
// end ;
31643: LD_VAR 0 2
31647: RET
// export function IsNotFull ( building ) ; var places ; begin
31648: LD_INT 0
31650: PPUSH
31651: PPUSH
// if not building then
31652: LD_VAR 0 1
31656: NOT
31657: IFFALSE 31661
// exit ;
31659: GO 31689
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31661: LD_ADDR_VAR 0 2
31665: PUSH
31666: LD_VAR 0 1
31670: PPUSH
31671: LD_INT 3
31673: PUSH
31674: LD_INT 62
31676: PUSH
31677: EMPTY
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PPUSH
31684: CALL_OW 72
31688: ST_TO_ADDR
// end ;
31689: LD_VAR 0 2
31693: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31694: LD_INT 0
31696: PPUSH
31697: PPUSH
31698: PPUSH
31699: PPUSH
// tmp := [ ] ;
31700: LD_ADDR_VAR 0 3
31704: PUSH
31705: EMPTY
31706: ST_TO_ADDR
// list := [ ] ;
31707: LD_ADDR_VAR 0 5
31711: PUSH
31712: EMPTY
31713: ST_TO_ADDR
// for i = 16 to 25 do
31714: LD_ADDR_VAR 0 4
31718: PUSH
31719: DOUBLE
31720: LD_INT 16
31722: DEC
31723: ST_TO_ADDR
31724: LD_INT 25
31726: PUSH
31727: FOR_TO
31728: IFFALSE 31801
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31730: LD_ADDR_VAR 0 3
31734: PUSH
31735: LD_VAR 0 3
31739: PUSH
31740: LD_INT 22
31742: PUSH
31743: LD_VAR 0 1
31747: PPUSH
31748: CALL_OW 255
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 91
31759: PUSH
31760: LD_VAR 0 1
31764: PUSH
31765: LD_INT 6
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 30
31775: PUSH
31776: LD_VAR 0 4
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: PUSH
31790: EMPTY
31791: LIST
31792: PPUSH
31793: CALL_OW 69
31797: ADD
31798: ST_TO_ADDR
31799: GO 31727
31801: POP
31802: POP
// for i = 1 to tmp do
31803: LD_ADDR_VAR 0 4
31807: PUSH
31808: DOUBLE
31809: LD_INT 1
31811: DEC
31812: ST_TO_ADDR
31813: LD_VAR 0 3
31817: PUSH
31818: FOR_TO
31819: IFFALSE 31907
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31821: LD_ADDR_VAR 0 5
31825: PUSH
31826: LD_VAR 0 5
31830: PUSH
31831: LD_VAR 0 3
31835: PUSH
31836: LD_VAR 0 4
31840: ARRAY
31841: PPUSH
31842: CALL_OW 266
31846: PUSH
31847: LD_VAR 0 3
31851: PUSH
31852: LD_VAR 0 4
31856: ARRAY
31857: PPUSH
31858: CALL_OW 250
31862: PUSH
31863: LD_VAR 0 3
31867: PUSH
31868: LD_VAR 0 4
31872: ARRAY
31873: PPUSH
31874: CALL_OW 251
31878: PUSH
31879: LD_VAR 0 3
31883: PUSH
31884: LD_VAR 0 4
31888: ARRAY
31889: PPUSH
31890: CALL_OW 254
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: PUSH
31901: EMPTY
31902: LIST
31903: ADD
31904: ST_TO_ADDR
31905: GO 31818
31907: POP
31908: POP
// result := list ;
31909: LD_ADDR_VAR 0 2
31913: PUSH
31914: LD_VAR 0 5
31918: ST_TO_ADDR
// end ;
31919: LD_VAR 0 2
31923: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31924: LD_INT 0
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
31932: PPUSH
// if not factory then
31933: LD_VAR 0 1
31937: NOT
31938: IFFALSE 31942
// exit ;
31940: GO 32535
// if control = control_apeman then
31942: LD_VAR 0 4
31946: PUSH
31947: LD_INT 5
31949: EQUAL
31950: IFFALSE 32059
// begin tmp := UnitsInside ( factory ) ;
31952: LD_ADDR_VAR 0 8
31956: PUSH
31957: LD_VAR 0 1
31961: PPUSH
31962: CALL_OW 313
31966: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31967: LD_VAR 0 8
31971: PPUSH
31972: LD_INT 25
31974: PUSH
31975: LD_INT 12
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PPUSH
31982: CALL_OW 72
31986: NOT
31987: IFFALSE 31997
// control := control_manual ;
31989: LD_ADDR_VAR 0 4
31993: PUSH
31994: LD_INT 1
31996: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31997: LD_ADDR_VAR 0 8
32001: PUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL 31694 0 1
32011: ST_TO_ADDR
// if tmp then
32012: LD_VAR 0 8
32016: IFFALSE 32059
// begin for i in tmp do
32018: LD_ADDR_VAR 0 7
32022: PUSH
32023: LD_VAR 0 8
32027: PUSH
32028: FOR_IN
32029: IFFALSE 32057
// if i [ 1 ] = b_ext_radio then
32031: LD_VAR 0 7
32035: PUSH
32036: LD_INT 1
32038: ARRAY
32039: PUSH
32040: LD_INT 22
32042: EQUAL
32043: IFFALSE 32055
// begin control := control_remote ;
32045: LD_ADDR_VAR 0 4
32049: PUSH
32050: LD_INT 2
32052: ST_TO_ADDR
// break ;
32053: GO 32057
// end ;
32055: GO 32028
32057: POP
32058: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32059: LD_VAR 0 1
32063: PPUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_VAR 0 3
32073: PPUSH
32074: LD_VAR 0 4
32078: PPUSH
32079: LD_VAR 0 5
32083: PPUSH
32084: CALL_OW 448
32088: IFFALSE 32123
// begin result := [ chassis , engine , control , weapon ] ;
32090: LD_ADDR_VAR 0 6
32094: PUSH
32095: LD_VAR 0 2
32099: PUSH
32100: LD_VAR 0 3
32104: PUSH
32105: LD_VAR 0 4
32109: PUSH
32110: LD_VAR 0 5
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: ST_TO_ADDR
// exit ;
32121: GO 32535
// end ; _chassis := AvailableChassisList ( factory ) ;
32123: LD_ADDR_VAR 0 9
32127: PUSH
32128: LD_VAR 0 1
32132: PPUSH
32133: CALL_OW 475
32137: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32138: LD_ADDR_VAR 0 11
32142: PUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 476
32152: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32153: LD_ADDR_VAR 0 12
32157: PUSH
32158: LD_VAR 0 1
32162: PPUSH
32163: CALL_OW 477
32167: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32168: LD_ADDR_VAR 0 10
32172: PUSH
32173: LD_VAR 0 1
32177: PPUSH
32178: CALL_OW 478
32182: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32183: LD_VAR 0 9
32187: NOT
32188: PUSH
32189: LD_VAR 0 11
32193: NOT
32194: OR
32195: PUSH
32196: LD_VAR 0 12
32200: NOT
32201: OR
32202: PUSH
32203: LD_VAR 0 10
32207: NOT
32208: OR
32209: IFFALSE 32244
// begin result := [ chassis , engine , control , weapon ] ;
32211: LD_ADDR_VAR 0 6
32215: PUSH
32216: LD_VAR 0 2
32220: PUSH
32221: LD_VAR 0 3
32225: PUSH
32226: LD_VAR 0 4
32230: PUSH
32231: LD_VAR 0 5
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: ST_TO_ADDR
// exit ;
32242: GO 32535
// end ; if not chassis in _chassis then
32244: LD_VAR 0 2
32248: PUSH
32249: LD_VAR 0 9
32253: IN
32254: NOT
32255: IFFALSE 32281
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32257: LD_ADDR_VAR 0 2
32261: PUSH
32262: LD_VAR 0 9
32266: PUSH
32267: LD_INT 1
32269: PPUSH
32270: LD_VAR 0 9
32274: PPUSH
32275: CALL_OW 12
32279: ARRAY
32280: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32281: LD_VAR 0 2
32285: PPUSH
32286: LD_VAR 0 3
32290: PPUSH
32291: CALL 32540 0 2
32295: NOT
32296: IFFALSE 32355
// repeat engine := _engine [ 1 ] ;
32298: LD_ADDR_VAR 0 3
32302: PUSH
32303: LD_VAR 0 11
32307: PUSH
32308: LD_INT 1
32310: ARRAY
32311: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32312: LD_ADDR_VAR 0 11
32316: PUSH
32317: LD_VAR 0 11
32321: PPUSH
32322: LD_INT 1
32324: PPUSH
32325: CALL_OW 3
32329: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32330: LD_VAR 0 2
32334: PPUSH
32335: LD_VAR 0 3
32339: PPUSH
32340: CALL 32540 0 2
32344: PUSH
32345: LD_VAR 0 11
32349: PUSH
32350: EMPTY
32351: EQUAL
32352: OR
32353: IFFALSE 32298
// if not control in _control then
32355: LD_VAR 0 4
32359: PUSH
32360: LD_VAR 0 12
32364: IN
32365: NOT
32366: IFFALSE 32392
// control := _control [ rand ( 1 , _control ) ] ;
32368: LD_ADDR_VAR 0 4
32372: PUSH
32373: LD_VAR 0 12
32377: PUSH
32378: LD_INT 1
32380: PPUSH
32381: LD_VAR 0 12
32385: PPUSH
32386: CALL_OW 12
32390: ARRAY
32391: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32392: LD_VAR 0 2
32396: PPUSH
32397: LD_VAR 0 5
32401: PPUSH
32402: CALL 32760 0 2
32406: NOT
32407: IFFALSE 32466
// repeat weapon := _weapon [ 1 ] ;
32409: LD_ADDR_VAR 0 5
32413: PUSH
32414: LD_VAR 0 10
32418: PUSH
32419: LD_INT 1
32421: ARRAY
32422: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32423: LD_ADDR_VAR 0 10
32427: PUSH
32428: LD_VAR 0 10
32432: PPUSH
32433: LD_INT 1
32435: PPUSH
32436: CALL_OW 3
32440: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32441: LD_VAR 0 2
32445: PPUSH
32446: LD_VAR 0 5
32450: PPUSH
32451: CALL 32760 0 2
32455: PUSH
32456: LD_VAR 0 10
32460: PUSH
32461: EMPTY
32462: EQUAL
32463: OR
32464: IFFALSE 32409
// result := [ ] ;
32466: LD_ADDR_VAR 0 6
32470: PUSH
32471: EMPTY
32472: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32473: LD_VAR 0 1
32477: PPUSH
32478: LD_VAR 0 2
32482: PPUSH
32483: LD_VAR 0 3
32487: PPUSH
32488: LD_VAR 0 4
32492: PPUSH
32493: LD_VAR 0 5
32497: PPUSH
32498: CALL_OW 448
32502: IFFALSE 32535
// result := [ chassis , engine , control , weapon ] ;
32504: LD_ADDR_VAR 0 6
32508: PUSH
32509: LD_VAR 0 2
32513: PUSH
32514: LD_VAR 0 3
32518: PUSH
32519: LD_VAR 0 4
32523: PUSH
32524: LD_VAR 0 5
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: ST_TO_ADDR
// end ;
32535: LD_VAR 0 6
32539: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32540: LD_INT 0
32542: PPUSH
// if not chassis or not engine then
32543: LD_VAR 0 1
32547: NOT
32548: PUSH
32549: LD_VAR 0 2
32553: NOT
32554: OR
32555: IFFALSE 32559
// exit ;
32557: GO 32755
// case engine of engine_solar :
32559: LD_VAR 0 2
32563: PUSH
32564: LD_INT 2
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32572
32570: GO 32610
32572: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32573: LD_ADDR_VAR 0 3
32577: PUSH
32578: LD_INT 11
32580: PUSH
32581: LD_INT 12
32583: PUSH
32584: LD_INT 13
32586: PUSH
32587: LD_INT 14
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: ST_TO_ADDR
32608: GO 32739
32610: LD_INT 1
32612: DOUBLE
32613: EQUAL
32614: IFTRUE 32618
32616: GO 32680
32618: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: LD_INT 11
32626: PUSH
32627: LD_INT 12
32629: PUSH
32630: LD_INT 13
32632: PUSH
32633: LD_INT 14
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: LD_INT 2
32641: PUSH
32642: LD_INT 3
32644: PUSH
32645: LD_INT 4
32647: PUSH
32648: LD_INT 5
32650: PUSH
32651: LD_INT 21
32653: PUSH
32654: LD_INT 23
32656: PUSH
32657: LD_INT 22
32659: PUSH
32660: LD_INT 24
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: ST_TO_ADDR
32678: GO 32739
32680: LD_INT 3
32682: DOUBLE
32683: EQUAL
32684: IFTRUE 32688
32686: GO 32738
32688: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32689: LD_ADDR_VAR 0 3
32693: PUSH
32694: LD_INT 13
32696: PUSH
32697: LD_INT 14
32699: PUSH
32700: LD_INT 2
32702: PUSH
32703: LD_INT 3
32705: PUSH
32706: LD_INT 4
32708: PUSH
32709: LD_INT 5
32711: PUSH
32712: LD_INT 21
32714: PUSH
32715: LD_INT 22
32717: PUSH
32718: LD_INT 23
32720: PUSH
32721: LD_INT 24
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: ST_TO_ADDR
32736: GO 32739
32738: POP
// result := ( chassis in result ) ;
32739: LD_ADDR_VAR 0 3
32743: PUSH
32744: LD_VAR 0 1
32748: PUSH
32749: LD_VAR 0 3
32753: IN
32754: ST_TO_ADDR
// end ;
32755: LD_VAR 0 3
32759: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32760: LD_INT 0
32762: PPUSH
// if not chassis or not weapon then
32763: LD_VAR 0 1
32767: NOT
32768: PUSH
32769: LD_VAR 0 2
32773: NOT
32774: OR
32775: IFFALSE 32779
// exit ;
32777: GO 33839
// case weapon of us_machine_gun :
32779: LD_VAR 0 2
32783: PUSH
32784: LD_INT 2
32786: DOUBLE
32787: EQUAL
32788: IFTRUE 32792
32790: GO 32822
32792: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32793: LD_ADDR_VAR 0 3
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 2
32803: PUSH
32804: LD_INT 3
32806: PUSH
32807: LD_INT 4
32809: PUSH
32810: LD_INT 5
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
32820: GO 33823
32822: LD_INT 3
32824: DOUBLE
32825: EQUAL
32826: IFTRUE 32830
32828: GO 32860
32830: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32831: LD_ADDR_VAR 0 3
32835: PUSH
32836: LD_INT 1
32838: PUSH
32839: LD_INT 2
32841: PUSH
32842: LD_INT 3
32844: PUSH
32845: LD_INT 4
32847: PUSH
32848: LD_INT 5
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
32858: GO 33823
32860: LD_INT 11
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32898
32868: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 3
32882: PUSH
32883: LD_INT 4
32885: PUSH
32886: LD_INT 5
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: ST_TO_ADDR
32896: GO 33823
32898: LD_INT 4
32900: DOUBLE
32901: EQUAL
32902: IFTRUE 32906
32904: GO 32932
32906: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32907: LD_ADDR_VAR 0 3
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: LD_INT 3
32917: PUSH
32918: LD_INT 4
32920: PUSH
32921: LD_INT 5
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: ST_TO_ADDR
32930: GO 33823
32932: LD_INT 5
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32966
32940: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32941: LD_ADDR_VAR 0 3
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: LD_INT 3
32951: PUSH
32952: LD_INT 4
32954: PUSH
32955: LD_INT 5
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: ST_TO_ADDR
32964: GO 33823
32966: LD_INT 9
32968: DOUBLE
32969: EQUAL
32970: IFTRUE 32974
32972: GO 33000
32974: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32975: LD_ADDR_VAR 0 3
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 3
32985: PUSH
32986: LD_INT 4
32988: PUSH
32989: LD_INT 5
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: ST_TO_ADDR
32998: GO 33823
33000: LD_INT 7
33002: DOUBLE
33003: EQUAL
33004: IFTRUE 33008
33006: GO 33034
33008: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33009: LD_ADDR_VAR 0 3
33013: PUSH
33014: LD_INT 2
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: LD_INT 4
33022: PUSH
33023: LD_INT 5
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: ST_TO_ADDR
33032: GO 33823
33034: LD_INT 12
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33068
33042: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33043: LD_ADDR_VAR 0 3
33047: PUSH
33048: LD_INT 2
33050: PUSH
33051: LD_INT 3
33053: PUSH
33054: LD_INT 4
33056: PUSH
33057: LD_INT 5
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
33066: GO 33823
33068: LD_INT 13
33070: DOUBLE
33071: EQUAL
33072: IFTRUE 33076
33074: GO 33102
33076: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33077: LD_ADDR_VAR 0 3
33081: PUSH
33082: LD_INT 2
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: LD_INT 4
33090: PUSH
33091: LD_INT 5
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: ST_TO_ADDR
33100: GO 33823
33102: LD_INT 14
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33110
33108: GO 33128
33110: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33111: LD_ADDR_VAR 0 3
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 5
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: ST_TO_ADDR
33126: GO 33823
33128: LD_INT 6
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33154
33136: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33137: LD_ADDR_VAR 0 3
33141: PUSH
33142: LD_INT 4
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: ST_TO_ADDR
33152: GO 33823
33154: LD_INT 10
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33180
33162: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_INT 4
33170: PUSH
33171: LD_INT 5
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: ST_TO_ADDR
33178: GO 33823
33180: LD_INT 22
33182: DOUBLE
33183: EQUAL
33184: IFTRUE 33188
33186: GO 33214
33188: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33189: LD_ADDR_VAR 0 3
33193: PUSH
33194: LD_INT 11
33196: PUSH
33197: LD_INT 12
33199: PUSH
33200: LD_INT 13
33202: PUSH
33203: LD_INT 14
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
33212: GO 33823
33214: LD_INT 23
33216: DOUBLE
33217: EQUAL
33218: IFTRUE 33222
33220: GO 33248
33222: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33223: LD_ADDR_VAR 0 3
33227: PUSH
33228: LD_INT 11
33230: PUSH
33231: LD_INT 12
33233: PUSH
33234: LD_INT 13
33236: PUSH
33237: LD_INT 14
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: ST_TO_ADDR
33246: GO 33823
33248: LD_INT 24
33250: DOUBLE
33251: EQUAL
33252: IFTRUE 33256
33254: GO 33282
33256: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33257: LD_ADDR_VAR 0 3
33261: PUSH
33262: LD_INT 11
33264: PUSH
33265: LD_INT 12
33267: PUSH
33268: LD_INT 13
33270: PUSH
33271: LD_INT 14
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
33280: GO 33823
33282: LD_INT 30
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33290
33288: GO 33316
33290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33291: LD_ADDR_VAR 0 3
33295: PUSH
33296: LD_INT 11
33298: PUSH
33299: LD_INT 12
33301: PUSH
33302: LD_INT 13
33304: PUSH
33305: LD_INT 14
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
33314: GO 33823
33316: LD_INT 25
33318: DOUBLE
33319: EQUAL
33320: IFTRUE 33324
33322: GO 33342
33324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33325: LD_ADDR_VAR 0 3
33329: PUSH
33330: LD_INT 13
33332: PUSH
33333: LD_INT 14
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: ST_TO_ADDR
33340: GO 33823
33342: LD_INT 27
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33368
33350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33351: LD_ADDR_VAR 0 3
33355: PUSH
33356: LD_INT 13
33358: PUSH
33359: LD_INT 14
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: ST_TO_ADDR
33366: GO 33823
33368: LD_INT 92
33370: DOUBLE
33371: EQUAL
33372: IFTRUE 33376
33374: GO 33402
33376: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33377: LD_ADDR_VAR 0 3
33381: PUSH
33382: LD_INT 11
33384: PUSH
33385: LD_INT 12
33387: PUSH
33388: LD_INT 13
33390: PUSH
33391: LD_INT 14
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: ST_TO_ADDR
33400: GO 33823
33402: LD_INT 28
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33410
33408: GO 33428
33410: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33411: LD_ADDR_VAR 0 3
33415: PUSH
33416: LD_INT 13
33418: PUSH
33419: LD_INT 14
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: ST_TO_ADDR
33426: GO 33823
33428: LD_INT 29
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33436
33434: GO 33454
33436: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33437: LD_ADDR_VAR 0 3
33441: PUSH
33442: LD_INT 13
33444: PUSH
33445: LD_INT 14
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: ST_TO_ADDR
33452: GO 33823
33454: LD_INT 31
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33462
33460: GO 33480
33462: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33463: LD_ADDR_VAR 0 3
33467: PUSH
33468: LD_INT 13
33470: PUSH
33471: LD_INT 14
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: ST_TO_ADDR
33478: GO 33823
33480: LD_INT 26
33482: DOUBLE
33483: EQUAL
33484: IFTRUE 33488
33486: GO 33506
33488: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33489: LD_ADDR_VAR 0 3
33493: PUSH
33494: LD_INT 13
33496: PUSH
33497: LD_INT 14
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: ST_TO_ADDR
33504: GO 33823
33506: LD_INT 42
33508: DOUBLE
33509: EQUAL
33510: IFTRUE 33514
33512: GO 33540
33514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33515: LD_ADDR_VAR 0 3
33519: PUSH
33520: LD_INT 21
33522: PUSH
33523: LD_INT 22
33525: PUSH
33526: LD_INT 23
33528: PUSH
33529: LD_INT 24
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: ST_TO_ADDR
33538: GO 33823
33540: LD_INT 43
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33574
33548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33549: LD_ADDR_VAR 0 3
33553: PUSH
33554: LD_INT 21
33556: PUSH
33557: LD_INT 22
33559: PUSH
33560: LD_INT 23
33562: PUSH
33563: LD_INT 24
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
33572: GO 33823
33574: LD_INT 44
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33608
33582: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: LD_INT 21
33590: PUSH
33591: LD_INT 22
33593: PUSH
33594: LD_INT 23
33596: PUSH
33597: LD_INT 24
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
33606: GO 33823
33608: LD_INT 45
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33642
33616: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_INT 21
33624: PUSH
33625: LD_INT 22
33627: PUSH
33628: LD_INT 23
33630: PUSH
33631: LD_INT 24
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
33640: GO 33823
33642: LD_INT 49
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33676
33650: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 21
33658: PUSH
33659: LD_INT 22
33661: PUSH
33662: LD_INT 23
33664: PUSH
33665: LD_INT 24
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
33674: GO 33823
33676: LD_INT 51
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33710
33684: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 21
33692: PUSH
33693: LD_INT 22
33695: PUSH
33696: LD_INT 23
33698: PUSH
33699: LD_INT 24
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 33823
33710: LD_INT 52
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33744
33718: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 21
33726: PUSH
33727: LD_INT 22
33729: PUSH
33730: LD_INT 23
33732: PUSH
33733: LD_INT 24
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 33823
33744: LD_INT 53
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33770
33752: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33753: LD_ADDR_VAR 0 3
33757: PUSH
33758: LD_INT 23
33760: PUSH
33761: LD_INT 24
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: ST_TO_ADDR
33768: GO 33823
33770: LD_INT 46
33772: DOUBLE
33773: EQUAL
33774: IFTRUE 33778
33776: GO 33796
33778: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33779: LD_ADDR_VAR 0 3
33783: PUSH
33784: LD_INT 23
33786: PUSH
33787: LD_INT 24
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: ST_TO_ADDR
33794: GO 33823
33796: LD_INT 47
33798: DOUBLE
33799: EQUAL
33800: IFTRUE 33804
33802: GO 33822
33804: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33805: LD_ADDR_VAR 0 3
33809: PUSH
33810: LD_INT 23
33812: PUSH
33813: LD_INT 24
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: ST_TO_ADDR
33820: GO 33823
33822: POP
// result := ( chassis in result ) ;
33823: LD_ADDR_VAR 0 3
33827: PUSH
33828: LD_VAR 0 1
33832: PUSH
33833: LD_VAR 0 3
33837: IN
33838: ST_TO_ADDR
// end ;
33839: LD_VAR 0 3
33843: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33844: LD_INT 0
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
// result := array ;
33853: LD_ADDR_VAR 0 5
33857: PUSH
33858: LD_VAR 0 1
33862: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33863: LD_VAR 0 1
33867: NOT
33868: PUSH
33869: LD_VAR 0 2
33873: NOT
33874: OR
33875: PUSH
33876: LD_VAR 0 3
33880: NOT
33881: OR
33882: PUSH
33883: LD_VAR 0 2
33887: PUSH
33888: LD_VAR 0 1
33892: GREATER
33893: OR
33894: PUSH
33895: LD_VAR 0 3
33899: PUSH
33900: LD_VAR 0 1
33904: GREATER
33905: OR
33906: IFFALSE 33910
// exit ;
33908: GO 34206
// if direction then
33910: LD_VAR 0 4
33914: IFFALSE 33978
// begin d := 1 ;
33916: LD_ADDR_VAR 0 9
33920: PUSH
33921: LD_INT 1
33923: ST_TO_ADDR
// if i_from > i_to then
33924: LD_VAR 0 2
33928: PUSH
33929: LD_VAR 0 3
33933: GREATER
33934: IFFALSE 33960
// length := ( array - i_from ) + i_to else
33936: LD_ADDR_VAR 0 11
33940: PUSH
33941: LD_VAR 0 1
33945: PUSH
33946: LD_VAR 0 2
33950: MINUS
33951: PUSH
33952: LD_VAR 0 3
33956: PLUS
33957: ST_TO_ADDR
33958: GO 33976
// length := i_to - i_from ;
33960: LD_ADDR_VAR 0 11
33964: PUSH
33965: LD_VAR 0 3
33969: PUSH
33970: LD_VAR 0 2
33974: MINUS
33975: ST_TO_ADDR
// end else
33976: GO 34039
// begin d := - 1 ;
33978: LD_ADDR_VAR 0 9
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: ST_TO_ADDR
// if i_from > i_to then
33987: LD_VAR 0 2
33991: PUSH
33992: LD_VAR 0 3
33996: GREATER
33997: IFFALSE 34017
// length := i_from - i_to else
33999: LD_ADDR_VAR 0 11
34003: PUSH
34004: LD_VAR 0 2
34008: PUSH
34009: LD_VAR 0 3
34013: MINUS
34014: ST_TO_ADDR
34015: GO 34039
// length := ( array - i_to ) + i_from ;
34017: LD_ADDR_VAR 0 11
34021: PUSH
34022: LD_VAR 0 1
34026: PUSH
34027: LD_VAR 0 3
34031: MINUS
34032: PUSH
34033: LD_VAR 0 2
34037: PLUS
34038: ST_TO_ADDR
// end ; if not length then
34039: LD_VAR 0 11
34043: NOT
34044: IFFALSE 34048
// exit ;
34046: GO 34206
// tmp := array ;
34048: LD_ADDR_VAR 0 10
34052: PUSH
34053: LD_VAR 0 1
34057: ST_TO_ADDR
// for i = 1 to length do
34058: LD_ADDR_VAR 0 6
34062: PUSH
34063: DOUBLE
34064: LD_INT 1
34066: DEC
34067: ST_TO_ADDR
34068: LD_VAR 0 11
34072: PUSH
34073: FOR_TO
34074: IFFALSE 34194
// begin for j = 1 to array do
34076: LD_ADDR_VAR 0 7
34080: PUSH
34081: DOUBLE
34082: LD_INT 1
34084: DEC
34085: ST_TO_ADDR
34086: LD_VAR 0 1
34090: PUSH
34091: FOR_TO
34092: IFFALSE 34180
// begin k := j + d ;
34094: LD_ADDR_VAR 0 8
34098: PUSH
34099: LD_VAR 0 7
34103: PUSH
34104: LD_VAR 0 9
34108: PLUS
34109: ST_TO_ADDR
// if k > array then
34110: LD_VAR 0 8
34114: PUSH
34115: LD_VAR 0 1
34119: GREATER
34120: IFFALSE 34130
// k := 1 ;
34122: LD_ADDR_VAR 0 8
34126: PUSH
34127: LD_INT 1
34129: ST_TO_ADDR
// if not k then
34130: LD_VAR 0 8
34134: NOT
34135: IFFALSE 34147
// k := array ;
34137: LD_ADDR_VAR 0 8
34141: PUSH
34142: LD_VAR 0 1
34146: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34147: LD_ADDR_VAR 0 10
34151: PUSH
34152: LD_VAR 0 10
34156: PPUSH
34157: LD_VAR 0 8
34161: PPUSH
34162: LD_VAR 0 1
34166: PUSH
34167: LD_VAR 0 7
34171: ARRAY
34172: PPUSH
34173: CALL_OW 1
34177: ST_TO_ADDR
// end ;
34178: GO 34091
34180: POP
34181: POP
// array := tmp ;
34182: LD_ADDR_VAR 0 1
34186: PUSH
34187: LD_VAR 0 10
34191: ST_TO_ADDR
// end ;
34192: GO 34073
34194: POP
34195: POP
// result := array ;
34196: LD_ADDR_VAR 0 5
34200: PUSH
34201: LD_VAR 0 1
34205: ST_TO_ADDR
// end ;
34206: LD_VAR 0 5
34210: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34211: LD_INT 0
34213: PPUSH
34214: PPUSH
// result := 0 ;
34215: LD_ADDR_VAR 0 3
34219: PUSH
34220: LD_INT 0
34222: ST_TO_ADDR
// if not array or not value in array then
34223: LD_VAR 0 1
34227: NOT
34228: PUSH
34229: LD_VAR 0 2
34233: PUSH
34234: LD_VAR 0 1
34238: IN
34239: NOT
34240: OR
34241: IFFALSE 34245
// exit ;
34243: GO 34299
// for i = 1 to array do
34245: LD_ADDR_VAR 0 4
34249: PUSH
34250: DOUBLE
34251: LD_INT 1
34253: DEC
34254: ST_TO_ADDR
34255: LD_VAR 0 1
34259: PUSH
34260: FOR_TO
34261: IFFALSE 34297
// if value = array [ i ] then
34263: LD_VAR 0 2
34267: PUSH
34268: LD_VAR 0 1
34272: PUSH
34273: LD_VAR 0 4
34277: ARRAY
34278: EQUAL
34279: IFFALSE 34295
// begin result := i ;
34281: LD_ADDR_VAR 0 3
34285: PUSH
34286: LD_VAR 0 4
34290: ST_TO_ADDR
// exit ;
34291: POP
34292: POP
34293: GO 34299
// end ;
34295: GO 34260
34297: POP
34298: POP
// end ;
34299: LD_VAR 0 3
34303: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34304: LD_INT 0
34306: PPUSH
// vc_chassis := chassis ;
34307: LD_ADDR_OWVAR 37
34311: PUSH
34312: LD_VAR 0 1
34316: ST_TO_ADDR
// vc_engine := engine ;
34317: LD_ADDR_OWVAR 39
34321: PUSH
34322: LD_VAR 0 2
34326: ST_TO_ADDR
// vc_control := control ;
34327: LD_ADDR_OWVAR 38
34331: PUSH
34332: LD_VAR 0 3
34336: ST_TO_ADDR
// vc_weapon := weapon ;
34337: LD_ADDR_OWVAR 40
34341: PUSH
34342: LD_VAR 0 4
34346: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34347: LD_ADDR_OWVAR 41
34351: PUSH
34352: LD_VAR 0 5
34356: ST_TO_ADDR
// end ;
34357: LD_VAR 0 6
34361: RET
// export function WantPlant ( unit ) ; var task ; begin
34362: LD_INT 0
34364: PPUSH
34365: PPUSH
// result := false ;
34366: LD_ADDR_VAR 0 2
34370: PUSH
34371: LD_INT 0
34373: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34374: LD_ADDR_VAR 0 3
34378: PUSH
34379: LD_VAR 0 1
34383: PPUSH
34384: CALL_OW 437
34388: ST_TO_ADDR
// if task then
34389: LD_VAR 0 3
34393: IFFALSE 34421
// if task [ 1 ] [ 1 ] = p then
34395: LD_VAR 0 3
34399: PUSH
34400: LD_INT 1
34402: ARRAY
34403: PUSH
34404: LD_INT 1
34406: ARRAY
34407: PUSH
34408: LD_STRING p
34410: EQUAL
34411: IFFALSE 34421
// result := true ;
34413: LD_ADDR_VAR 0 2
34417: PUSH
34418: LD_INT 1
34420: ST_TO_ADDR
// end ;
34421: LD_VAR 0 2
34425: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34426: LD_INT 0
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
// if pos < 1 then
34432: LD_VAR 0 2
34436: PUSH
34437: LD_INT 1
34439: LESS
34440: IFFALSE 34444
// exit ;
34442: GO 34747
// if pos = 1 then
34444: LD_VAR 0 2
34448: PUSH
34449: LD_INT 1
34451: EQUAL
34452: IFFALSE 34485
// result := Replace ( arr , pos [ 1 ] , value ) else
34454: LD_ADDR_VAR 0 4
34458: PUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_VAR 0 2
34468: PUSH
34469: LD_INT 1
34471: ARRAY
34472: PPUSH
34473: LD_VAR 0 3
34477: PPUSH
34478: CALL_OW 1
34482: ST_TO_ADDR
34483: GO 34747
// begin tmp := arr ;
34485: LD_ADDR_VAR 0 6
34489: PUSH
34490: LD_VAR 0 1
34494: ST_TO_ADDR
// s_arr := [ tmp ] ;
34495: LD_ADDR_VAR 0 7
34499: PUSH
34500: LD_VAR 0 6
34504: PUSH
34505: EMPTY
34506: LIST
34507: ST_TO_ADDR
// for i = 1 to pos - 1 do
34508: LD_ADDR_VAR 0 5
34512: PUSH
34513: DOUBLE
34514: LD_INT 1
34516: DEC
34517: ST_TO_ADDR
34518: LD_VAR 0 2
34522: PUSH
34523: LD_INT 1
34525: MINUS
34526: PUSH
34527: FOR_TO
34528: IFFALSE 34573
// begin tmp := tmp [ pos [ i ] ] ;
34530: LD_ADDR_VAR 0 6
34534: PUSH
34535: LD_VAR 0 6
34539: PUSH
34540: LD_VAR 0 2
34544: PUSH
34545: LD_VAR 0 5
34549: ARRAY
34550: ARRAY
34551: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34552: LD_ADDR_VAR 0 7
34556: PUSH
34557: LD_VAR 0 7
34561: PUSH
34562: LD_VAR 0 6
34566: PUSH
34567: EMPTY
34568: LIST
34569: ADD
34570: ST_TO_ADDR
// end ;
34571: GO 34527
34573: POP
34574: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34575: LD_ADDR_VAR 0 6
34579: PUSH
34580: LD_VAR 0 6
34584: PPUSH
34585: LD_VAR 0 2
34589: PUSH
34590: LD_VAR 0 2
34594: ARRAY
34595: PPUSH
34596: LD_VAR 0 3
34600: PPUSH
34601: CALL_OW 1
34605: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34606: LD_ADDR_VAR 0 7
34610: PUSH
34611: LD_VAR 0 7
34615: PPUSH
34616: LD_VAR 0 7
34620: PPUSH
34621: LD_VAR 0 6
34625: PPUSH
34626: CALL_OW 1
34630: ST_TO_ADDR
// for i = s_arr downto 2 do
34631: LD_ADDR_VAR 0 5
34635: PUSH
34636: DOUBLE
34637: LD_VAR 0 7
34641: INC
34642: ST_TO_ADDR
34643: LD_INT 2
34645: PUSH
34646: FOR_DOWNTO
34647: IFFALSE 34731
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34649: LD_ADDR_VAR 0 6
34653: PUSH
34654: LD_VAR 0 7
34658: PUSH
34659: LD_VAR 0 5
34663: PUSH
34664: LD_INT 1
34666: MINUS
34667: ARRAY
34668: PPUSH
34669: LD_VAR 0 2
34673: PUSH
34674: LD_VAR 0 5
34678: PUSH
34679: LD_INT 1
34681: MINUS
34682: ARRAY
34683: PPUSH
34684: LD_VAR 0 7
34688: PUSH
34689: LD_VAR 0 5
34693: ARRAY
34694: PPUSH
34695: CALL_OW 1
34699: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34700: LD_ADDR_VAR 0 7
34704: PUSH
34705: LD_VAR 0 7
34709: PPUSH
34710: LD_VAR 0 5
34714: PUSH
34715: LD_INT 1
34717: MINUS
34718: PPUSH
34719: LD_VAR 0 6
34723: PPUSH
34724: CALL_OW 1
34728: ST_TO_ADDR
// end ;
34729: GO 34646
34731: POP
34732: POP
// result := s_arr [ 1 ] ;
34733: LD_ADDR_VAR 0 4
34737: PUSH
34738: LD_VAR 0 7
34742: PUSH
34743: LD_INT 1
34745: ARRAY
34746: ST_TO_ADDR
// end ; end ;
34747: LD_VAR 0 4
34751: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34752: LD_INT 0
34754: PPUSH
34755: PPUSH
// if not list then
34756: LD_VAR 0 1
34760: NOT
34761: IFFALSE 34765
// exit ;
34763: GO 34856
// i := list [ pos1 ] ;
34765: LD_ADDR_VAR 0 5
34769: PUSH
34770: LD_VAR 0 1
34774: PUSH
34775: LD_VAR 0 2
34779: ARRAY
34780: ST_TO_ADDR
// if not i then
34781: LD_VAR 0 5
34785: NOT
34786: IFFALSE 34790
// exit ;
34788: GO 34856
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34790: LD_ADDR_VAR 0 1
34794: PUSH
34795: LD_VAR 0 1
34799: PPUSH
34800: LD_VAR 0 2
34804: PPUSH
34805: LD_VAR 0 1
34809: PUSH
34810: LD_VAR 0 3
34814: ARRAY
34815: PPUSH
34816: CALL_OW 1
34820: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34821: LD_ADDR_VAR 0 1
34825: PUSH
34826: LD_VAR 0 1
34830: PPUSH
34831: LD_VAR 0 3
34835: PPUSH
34836: LD_VAR 0 5
34840: PPUSH
34841: CALL_OW 1
34845: ST_TO_ADDR
// result := list ;
34846: LD_ADDR_VAR 0 4
34850: PUSH
34851: LD_VAR 0 1
34855: ST_TO_ADDR
// end ;
34856: LD_VAR 0 4
34860: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34861: LD_INT 0
34863: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34864: LD_ADDR_VAR 0 5
34868: PUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 250
34878: PPUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 251
34888: PPUSH
34889: LD_VAR 0 2
34893: PPUSH
34894: LD_VAR 0 3
34898: PPUSH
34899: LD_VAR 0 4
34903: PPUSH
34904: CALL 35282 0 5
34908: ST_TO_ADDR
// end ;
34909: LD_VAR 0 5
34913: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34914: LD_INT 0
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
// if not list or not unit then
34920: LD_VAR 0 2
34924: NOT
34925: PUSH
34926: LD_VAR 0 1
34930: NOT
34931: OR
34932: IFFALSE 34936
// exit ;
34934: GO 35277
// result := [ ] ;
34936: LD_ADDR_VAR 0 5
34940: PUSH
34941: EMPTY
34942: ST_TO_ADDR
// for i in list do
34943: LD_ADDR_VAR 0 6
34947: PUSH
34948: LD_VAR 0 2
34952: PUSH
34953: FOR_IN
34954: IFFALSE 35172
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34956: LD_ADDR_VAR 0 8
34960: PUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: LD_VAR 0 6
34970: PUSH
34971: LD_INT 1
34973: ARRAY
34974: PPUSH
34975: LD_VAR 0 6
34979: PUSH
34980: LD_INT 2
34982: ARRAY
34983: PPUSH
34984: CALL_OW 297
34988: ST_TO_ADDR
// if not Count ( result ) then
34989: LD_VAR 0 5
34993: PPUSH
34994: CALL 31566 0 1
34998: NOT
34999: IFFALSE 35032
// begin result := Join ( result , [ i , tmp ] ) ;
35001: LD_ADDR_VAR 0 5
35005: PUSH
35006: LD_VAR 0 5
35010: PPUSH
35011: LD_VAR 0 6
35015: PUSH
35016: LD_VAR 0 8
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PPUSH
35025: CALL 67175 0 2
35029: ST_TO_ADDR
// continue ;
35030: GO 34953
// end ; if result [ result ] [ 2 ] <= tmp then
35032: LD_VAR 0 5
35036: PUSH
35037: LD_VAR 0 5
35041: ARRAY
35042: PUSH
35043: LD_INT 2
35045: ARRAY
35046: PUSH
35047: LD_VAR 0 8
35051: LESSEQUAL
35052: IFFALSE 35085
// result := Join ( result , [ i , tmp ] ) else
35054: LD_ADDR_VAR 0 5
35058: PUSH
35059: LD_VAR 0 5
35063: PPUSH
35064: LD_VAR 0 6
35068: PUSH
35069: LD_VAR 0 8
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PPUSH
35078: CALL 67175 0 2
35082: ST_TO_ADDR
35083: GO 35170
// begin for j := 1 to Count ( result ) do
35085: LD_ADDR_VAR 0 7
35089: PUSH
35090: DOUBLE
35091: LD_INT 1
35093: DEC
35094: ST_TO_ADDR
35095: LD_VAR 0 5
35099: PPUSH
35100: CALL 31566 0 1
35104: PUSH
35105: FOR_TO
35106: IFFALSE 35168
// begin if tmp < result [ j ] [ 2 ] then
35108: LD_VAR 0 8
35112: PUSH
35113: LD_VAR 0 5
35117: PUSH
35118: LD_VAR 0 7
35122: ARRAY
35123: PUSH
35124: LD_INT 2
35126: ARRAY
35127: LESS
35128: IFFALSE 35166
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35130: LD_ADDR_VAR 0 5
35134: PUSH
35135: LD_VAR 0 5
35139: PPUSH
35140: LD_VAR 0 7
35144: PPUSH
35145: LD_VAR 0 6
35149: PUSH
35150: LD_VAR 0 8
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PPUSH
35159: CALL_OW 2
35163: ST_TO_ADDR
// break ;
35164: GO 35168
// end ; end ;
35166: GO 35105
35168: POP
35169: POP
// end ; end ;
35170: GO 34953
35172: POP
35173: POP
// if result and not asc then
35174: LD_VAR 0 5
35178: PUSH
35179: LD_VAR 0 3
35183: NOT
35184: AND
35185: IFFALSE 35202
// result := ReverseArray ( result ) ;
35187: LD_ADDR_VAR 0 5
35191: PUSH
35192: LD_VAR 0 5
35196: PPUSH
35197: CALL 62442 0 1
35201: ST_TO_ADDR
// tmp := [ ] ;
35202: LD_ADDR_VAR 0 8
35206: PUSH
35207: EMPTY
35208: ST_TO_ADDR
// if mode then
35209: LD_VAR 0 4
35213: IFFALSE 35277
// begin for i := 1 to result do
35215: LD_ADDR_VAR 0 6
35219: PUSH
35220: DOUBLE
35221: LD_INT 1
35223: DEC
35224: ST_TO_ADDR
35225: LD_VAR 0 5
35229: PUSH
35230: FOR_TO
35231: IFFALSE 35265
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35233: LD_ADDR_VAR 0 8
35237: PUSH
35238: LD_VAR 0 8
35242: PPUSH
35243: LD_VAR 0 5
35247: PUSH
35248: LD_VAR 0 6
35252: ARRAY
35253: PUSH
35254: LD_INT 1
35256: ARRAY
35257: PPUSH
35258: CALL 67175 0 2
35262: ST_TO_ADDR
35263: GO 35230
35265: POP
35266: POP
// result := tmp ;
35267: LD_ADDR_VAR 0 5
35271: PUSH
35272: LD_VAR 0 8
35276: ST_TO_ADDR
// end ; end ;
35277: LD_VAR 0 5
35281: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35282: LD_INT 0
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
// if not list then
35288: LD_VAR 0 3
35292: NOT
35293: IFFALSE 35297
// exit ;
35295: GO 35685
// result := [ ] ;
35297: LD_ADDR_VAR 0 6
35301: PUSH
35302: EMPTY
35303: ST_TO_ADDR
// for i in list do
35304: LD_ADDR_VAR 0 7
35308: PUSH
35309: LD_VAR 0 3
35313: PUSH
35314: FOR_IN
35315: IFFALSE 35517
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35317: LD_ADDR_VAR 0 9
35321: PUSH
35322: LD_VAR 0 7
35326: PPUSH
35327: LD_VAR 0 1
35331: PPUSH
35332: LD_VAR 0 2
35336: PPUSH
35337: CALL_OW 297
35341: ST_TO_ADDR
// if not result then
35342: LD_VAR 0 6
35346: NOT
35347: IFFALSE 35373
// result := [ [ i , tmp ] ] else
35349: LD_ADDR_VAR 0 6
35353: PUSH
35354: LD_VAR 0 7
35358: PUSH
35359: LD_VAR 0 9
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: EMPTY
35369: LIST
35370: ST_TO_ADDR
35371: GO 35515
// begin if result [ result ] [ 2 ] <= tmp then
35373: LD_VAR 0 6
35377: PUSH
35378: LD_VAR 0 6
35382: ARRAY
35383: PUSH
35384: LD_INT 2
35386: ARRAY
35387: PUSH
35388: LD_VAR 0 9
35392: LESSEQUAL
35393: IFFALSE 35435
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35395: LD_ADDR_VAR 0 6
35399: PUSH
35400: LD_VAR 0 6
35404: PPUSH
35405: LD_VAR 0 6
35409: PUSH
35410: LD_INT 1
35412: PLUS
35413: PPUSH
35414: LD_VAR 0 7
35418: PUSH
35419: LD_VAR 0 9
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PPUSH
35428: CALL_OW 2
35432: ST_TO_ADDR
35433: GO 35515
// for j := 1 to result do
35435: LD_ADDR_VAR 0 8
35439: PUSH
35440: DOUBLE
35441: LD_INT 1
35443: DEC
35444: ST_TO_ADDR
35445: LD_VAR 0 6
35449: PUSH
35450: FOR_TO
35451: IFFALSE 35513
// begin if tmp < result [ j ] [ 2 ] then
35453: LD_VAR 0 9
35457: PUSH
35458: LD_VAR 0 6
35462: PUSH
35463: LD_VAR 0 8
35467: ARRAY
35468: PUSH
35469: LD_INT 2
35471: ARRAY
35472: LESS
35473: IFFALSE 35511
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35475: LD_ADDR_VAR 0 6
35479: PUSH
35480: LD_VAR 0 6
35484: PPUSH
35485: LD_VAR 0 8
35489: PPUSH
35490: LD_VAR 0 7
35494: PUSH
35495: LD_VAR 0 9
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PPUSH
35504: CALL_OW 2
35508: ST_TO_ADDR
// break ;
35509: GO 35513
// end ; end ;
35511: GO 35450
35513: POP
35514: POP
// end ; end ;
35515: GO 35314
35517: POP
35518: POP
// if result and not asc then
35519: LD_VAR 0 6
35523: PUSH
35524: LD_VAR 0 4
35528: NOT
35529: AND
35530: IFFALSE 35605
// begin tmp := result ;
35532: LD_ADDR_VAR 0 9
35536: PUSH
35537: LD_VAR 0 6
35541: ST_TO_ADDR
// for i = tmp downto 1 do
35542: LD_ADDR_VAR 0 7
35546: PUSH
35547: DOUBLE
35548: LD_VAR 0 9
35552: INC
35553: ST_TO_ADDR
35554: LD_INT 1
35556: PUSH
35557: FOR_DOWNTO
35558: IFFALSE 35603
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35560: LD_ADDR_VAR 0 6
35564: PUSH
35565: LD_VAR 0 6
35569: PPUSH
35570: LD_VAR 0 9
35574: PUSH
35575: LD_VAR 0 7
35579: MINUS
35580: PUSH
35581: LD_INT 1
35583: PLUS
35584: PPUSH
35585: LD_VAR 0 9
35589: PUSH
35590: LD_VAR 0 7
35594: ARRAY
35595: PPUSH
35596: CALL_OW 1
35600: ST_TO_ADDR
35601: GO 35557
35603: POP
35604: POP
// end ; tmp := [ ] ;
35605: LD_ADDR_VAR 0 9
35609: PUSH
35610: EMPTY
35611: ST_TO_ADDR
// if mode then
35612: LD_VAR 0 5
35616: IFFALSE 35685
// begin for i = 1 to result do
35618: LD_ADDR_VAR 0 7
35622: PUSH
35623: DOUBLE
35624: LD_INT 1
35626: DEC
35627: ST_TO_ADDR
35628: LD_VAR 0 6
35632: PUSH
35633: FOR_TO
35634: IFFALSE 35673
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35636: LD_ADDR_VAR 0 9
35640: PUSH
35641: LD_VAR 0 9
35645: PPUSH
35646: LD_VAR 0 7
35650: PPUSH
35651: LD_VAR 0 6
35655: PUSH
35656: LD_VAR 0 7
35660: ARRAY
35661: PUSH
35662: LD_INT 1
35664: ARRAY
35665: PPUSH
35666: CALL_OW 1
35670: ST_TO_ADDR
35671: GO 35633
35673: POP
35674: POP
// result := tmp ;
35675: LD_ADDR_VAR 0 6
35679: PUSH
35680: LD_VAR 0 9
35684: ST_TO_ADDR
// end ; end ;
35685: LD_VAR 0 6
35689: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35690: LD_INT 0
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35698: LD_ADDR_VAR 0 5
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: EMPTY
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: ST_TO_ADDR
// if not x or not y then
35720: LD_VAR 0 2
35724: NOT
35725: PUSH
35726: LD_VAR 0 3
35730: NOT
35731: OR
35732: IFFALSE 35736
// exit ;
35734: GO 37386
// if not range then
35736: LD_VAR 0 4
35740: NOT
35741: IFFALSE 35751
// range := 10 ;
35743: LD_ADDR_VAR 0 4
35747: PUSH
35748: LD_INT 10
35750: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35751: LD_ADDR_VAR 0 8
35755: PUSH
35756: LD_INT 81
35758: PUSH
35759: LD_VAR 0 1
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PUSH
35768: LD_INT 92
35770: PUSH
35771: LD_VAR 0 2
35775: PUSH
35776: LD_VAR 0 3
35780: PUSH
35781: LD_VAR 0 4
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 3
35794: PUSH
35795: LD_INT 21
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: PPUSH
35814: CALL_OW 69
35818: ST_TO_ADDR
// if not tmp then
35819: LD_VAR 0 8
35823: NOT
35824: IFFALSE 35828
// exit ;
35826: GO 37386
// for i in tmp do
35828: LD_ADDR_VAR 0 6
35832: PUSH
35833: LD_VAR 0 8
35837: PUSH
35838: FOR_IN
35839: IFFALSE 37361
// begin points := [ 0 , 0 , 0 ] ;
35841: LD_ADDR_VAR 0 9
35845: PUSH
35846: LD_INT 0
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: LIST
35859: ST_TO_ADDR
// bpoints := 1 ;
35860: LD_ADDR_VAR 0 10
35864: PUSH
35865: LD_INT 1
35867: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35868: LD_VAR 0 6
35872: PPUSH
35873: CALL_OW 247
35877: PUSH
35878: LD_INT 1
35880: DOUBLE
35881: EQUAL
35882: IFTRUE 35886
35884: GO 36464
35886: POP
// begin if GetClass ( i ) = 1 then
35887: LD_VAR 0 6
35891: PPUSH
35892: CALL_OW 257
35896: PUSH
35897: LD_INT 1
35899: EQUAL
35900: IFFALSE 35921
// points := [ 10 , 5 , 3 ] ;
35902: LD_ADDR_VAR 0 9
35906: PUSH
35907: LD_INT 10
35909: PUSH
35910: LD_INT 5
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35921: LD_VAR 0 6
35925: PPUSH
35926: CALL_OW 257
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 4
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: LIST
35944: IN
35945: IFFALSE 35966
// points := [ 3 , 2 , 1 ] ;
35947: LD_ADDR_VAR 0 9
35951: PUSH
35952: LD_INT 3
35954: PUSH
35955: LD_INT 2
35957: PUSH
35958: LD_INT 1
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35966: LD_VAR 0 6
35970: PPUSH
35971: CALL_OW 257
35975: PUSH
35976: LD_INT 5
35978: EQUAL
35979: IFFALSE 36000
// points := [ 130 , 5 , 2 ] ;
35981: LD_ADDR_VAR 0 9
35985: PUSH
35986: LD_INT 130
35988: PUSH
35989: LD_INT 5
35991: PUSH
35992: LD_INT 2
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36000: LD_VAR 0 6
36004: PPUSH
36005: CALL_OW 257
36009: PUSH
36010: LD_INT 8
36012: EQUAL
36013: IFFALSE 36034
// points := [ 35 , 35 , 30 ] ;
36015: LD_ADDR_VAR 0 9
36019: PUSH
36020: LD_INT 35
36022: PUSH
36023: LD_INT 35
36025: PUSH
36026: LD_INT 30
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: LIST
36033: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36034: LD_VAR 0 6
36038: PPUSH
36039: CALL_OW 257
36043: PUSH
36044: LD_INT 9
36046: EQUAL
36047: IFFALSE 36068
// points := [ 20 , 55 , 40 ] ;
36049: LD_ADDR_VAR 0 9
36053: PUSH
36054: LD_INT 20
36056: PUSH
36057: LD_INT 55
36059: PUSH
36060: LD_INT 40
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: LIST
36067: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36068: LD_VAR 0 6
36072: PPUSH
36073: CALL_OW 257
36077: PUSH
36078: LD_INT 12
36080: PUSH
36081: LD_INT 16
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: IN
36088: IFFALSE 36109
// points := [ 5 , 3 , 2 ] ;
36090: LD_ADDR_VAR 0 9
36094: PUSH
36095: LD_INT 5
36097: PUSH
36098: LD_INT 3
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: LIST
36108: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36109: LD_VAR 0 6
36113: PPUSH
36114: CALL_OW 257
36118: PUSH
36119: LD_INT 17
36121: EQUAL
36122: IFFALSE 36143
// points := [ 100 , 50 , 75 ] ;
36124: LD_ADDR_VAR 0 9
36128: PUSH
36129: LD_INT 100
36131: PUSH
36132: LD_INT 50
36134: PUSH
36135: LD_INT 75
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: LIST
36142: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36143: LD_VAR 0 6
36147: PPUSH
36148: CALL_OW 257
36152: PUSH
36153: LD_INT 15
36155: EQUAL
36156: IFFALSE 36177
// points := [ 10 , 5 , 3 ] ;
36158: LD_ADDR_VAR 0 9
36162: PUSH
36163: LD_INT 10
36165: PUSH
36166: LD_INT 5
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36177: LD_VAR 0 6
36181: PPUSH
36182: CALL_OW 257
36186: PUSH
36187: LD_INT 14
36189: EQUAL
36190: IFFALSE 36211
// points := [ 10 , 0 , 0 ] ;
36192: LD_ADDR_VAR 0 9
36196: PUSH
36197: LD_INT 10
36199: PUSH
36200: LD_INT 0
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36211: LD_VAR 0 6
36215: PPUSH
36216: CALL_OW 257
36220: PUSH
36221: LD_INT 11
36223: EQUAL
36224: IFFALSE 36245
// points := [ 30 , 10 , 5 ] ;
36226: LD_ADDR_VAR 0 9
36230: PUSH
36231: LD_INT 30
36233: PUSH
36234: LD_INT 10
36236: PUSH
36237: LD_INT 5
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36245: LD_VAR 0 1
36249: PPUSH
36250: LD_INT 5
36252: PPUSH
36253: CALL_OW 321
36257: PUSH
36258: LD_INT 2
36260: EQUAL
36261: IFFALSE 36278
// bpoints := bpoints * 1.8 ;
36263: LD_ADDR_VAR 0 10
36267: PUSH
36268: LD_VAR 0 10
36272: PUSH
36273: LD_REAL  1.80000000000000E+0000
36276: MUL
36277: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36278: LD_VAR 0 6
36282: PPUSH
36283: CALL_OW 257
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 3
36296: PUSH
36297: LD_INT 4
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: IN
36306: PUSH
36307: LD_VAR 0 1
36311: PPUSH
36312: LD_INT 51
36314: PPUSH
36315: CALL_OW 321
36319: PUSH
36320: LD_INT 2
36322: EQUAL
36323: AND
36324: IFFALSE 36341
// bpoints := bpoints * 1.2 ;
36326: LD_ADDR_VAR 0 10
36330: PUSH
36331: LD_VAR 0 10
36335: PUSH
36336: LD_REAL  1.20000000000000E+0000
36339: MUL
36340: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36341: LD_VAR 0 6
36345: PPUSH
36346: CALL_OW 257
36350: PUSH
36351: LD_INT 5
36353: PUSH
36354: LD_INT 7
36356: PUSH
36357: LD_INT 9
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: IN
36365: PUSH
36366: LD_VAR 0 1
36370: PPUSH
36371: LD_INT 52
36373: PPUSH
36374: CALL_OW 321
36378: PUSH
36379: LD_INT 2
36381: EQUAL
36382: AND
36383: IFFALSE 36400
// bpoints := bpoints * 1.5 ;
36385: LD_ADDR_VAR 0 10
36389: PUSH
36390: LD_VAR 0 10
36394: PUSH
36395: LD_REAL  1.50000000000000E+0000
36398: MUL
36399: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36400: LD_VAR 0 1
36404: PPUSH
36405: LD_INT 66
36407: PPUSH
36408: CALL_OW 321
36412: PUSH
36413: LD_INT 2
36415: EQUAL
36416: IFFALSE 36433
// bpoints := bpoints * 1.1 ;
36418: LD_ADDR_VAR 0 10
36422: PUSH
36423: LD_VAR 0 10
36427: PUSH
36428: LD_REAL  1.10000000000000E+0000
36431: MUL
36432: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36433: LD_ADDR_VAR 0 10
36437: PUSH
36438: LD_VAR 0 10
36442: PUSH
36443: LD_VAR 0 6
36447: PPUSH
36448: LD_INT 1
36450: PPUSH
36451: CALL_OW 259
36455: PUSH
36456: LD_REAL  1.15000000000000E+0000
36459: MUL
36460: MUL
36461: ST_TO_ADDR
// end ; unit_vehicle :
36462: GO 37290
36464: LD_INT 2
36466: DOUBLE
36467: EQUAL
36468: IFTRUE 36472
36470: GO 37278
36472: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36473: LD_VAR 0 6
36477: PPUSH
36478: CALL_OW 264
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: LD_INT 42
36488: PUSH
36489: LD_INT 24
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: IN
36497: IFFALSE 36518
// points := [ 25 , 5 , 3 ] ;
36499: LD_ADDR_VAR 0 9
36503: PUSH
36504: LD_INT 25
36506: PUSH
36507: LD_INT 5
36509: PUSH
36510: LD_INT 3
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: LIST
36517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36518: LD_VAR 0 6
36522: PPUSH
36523: CALL_OW 264
36527: PUSH
36528: LD_INT 4
36530: PUSH
36531: LD_INT 43
36533: PUSH
36534: LD_INT 25
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: IN
36542: IFFALSE 36563
// points := [ 40 , 15 , 5 ] ;
36544: LD_ADDR_VAR 0 9
36548: PUSH
36549: LD_INT 40
36551: PUSH
36552: LD_INT 15
36554: PUSH
36555: LD_INT 5
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36563: LD_VAR 0 6
36567: PPUSH
36568: CALL_OW 264
36572: PUSH
36573: LD_INT 3
36575: PUSH
36576: LD_INT 23
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: IN
36583: IFFALSE 36604
// points := [ 7 , 25 , 8 ] ;
36585: LD_ADDR_VAR 0 9
36589: PUSH
36590: LD_INT 7
36592: PUSH
36593: LD_INT 25
36595: PUSH
36596: LD_INT 8
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: LIST
36603: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36604: LD_VAR 0 6
36608: PPUSH
36609: CALL_OW 264
36613: PUSH
36614: LD_INT 5
36616: PUSH
36617: LD_INT 27
36619: PUSH
36620: LD_INT 44
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: LIST
36627: IN
36628: IFFALSE 36649
// points := [ 14 , 50 , 16 ] ;
36630: LD_ADDR_VAR 0 9
36634: PUSH
36635: LD_INT 14
36637: PUSH
36638: LD_INT 50
36640: PUSH
36641: LD_INT 16
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36649: LD_VAR 0 6
36653: PPUSH
36654: CALL_OW 264
36658: PUSH
36659: LD_INT 6
36661: PUSH
36662: LD_INT 46
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: IN
36669: IFFALSE 36690
// points := [ 32 , 120 , 70 ] ;
36671: LD_ADDR_VAR 0 9
36675: PUSH
36676: LD_INT 32
36678: PUSH
36679: LD_INT 120
36681: PUSH
36682: LD_INT 70
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36690: LD_VAR 0 6
36694: PPUSH
36695: CALL_OW 264
36699: PUSH
36700: LD_INT 7
36702: PUSH
36703: LD_INT 28
36705: PUSH
36706: LD_INT 45
36708: PUSH
36709: LD_INT 92
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: IN
36718: IFFALSE 36739
// points := [ 35 , 20 , 45 ] ;
36720: LD_ADDR_VAR 0 9
36724: PUSH
36725: LD_INT 35
36727: PUSH
36728: LD_INT 20
36730: PUSH
36731: LD_INT 45
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36739: LD_VAR 0 6
36743: PPUSH
36744: CALL_OW 264
36748: PUSH
36749: LD_INT 47
36751: PUSH
36752: EMPTY
36753: LIST
36754: IN
36755: IFFALSE 36776
// points := [ 67 , 45 , 75 ] ;
36757: LD_ADDR_VAR 0 9
36761: PUSH
36762: LD_INT 67
36764: PUSH
36765: LD_INT 45
36767: PUSH
36768: LD_INT 75
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36776: LD_VAR 0 6
36780: PPUSH
36781: CALL_OW 264
36785: PUSH
36786: LD_INT 26
36788: PUSH
36789: EMPTY
36790: LIST
36791: IN
36792: IFFALSE 36813
// points := [ 120 , 30 , 80 ] ;
36794: LD_ADDR_VAR 0 9
36798: PUSH
36799: LD_INT 120
36801: PUSH
36802: LD_INT 30
36804: PUSH
36805: LD_INT 80
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: LIST
36812: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36813: LD_VAR 0 6
36817: PPUSH
36818: CALL_OW 264
36822: PUSH
36823: LD_INT 22
36825: PUSH
36826: EMPTY
36827: LIST
36828: IN
36829: IFFALSE 36850
// points := [ 40 , 1 , 1 ] ;
36831: LD_ADDR_VAR 0 9
36835: PUSH
36836: LD_INT 40
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36850: LD_VAR 0 6
36854: PPUSH
36855: CALL_OW 264
36859: PUSH
36860: LD_INT 29
36862: PUSH
36863: EMPTY
36864: LIST
36865: IN
36866: IFFALSE 36887
// points := [ 70 , 200 , 400 ] ;
36868: LD_ADDR_VAR 0 9
36872: PUSH
36873: LD_INT 70
36875: PUSH
36876: LD_INT 200
36878: PUSH
36879: LD_INT 400
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: LIST
36886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36887: LD_VAR 0 6
36891: PPUSH
36892: CALL_OW 264
36896: PUSH
36897: LD_INT 14
36899: PUSH
36900: LD_INT 53
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: IN
36907: IFFALSE 36928
// points := [ 40 , 10 , 20 ] ;
36909: LD_ADDR_VAR 0 9
36913: PUSH
36914: LD_INT 40
36916: PUSH
36917: LD_INT 10
36919: PUSH
36920: LD_INT 20
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: LIST
36927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36928: LD_VAR 0 6
36932: PPUSH
36933: CALL_OW 264
36937: PUSH
36938: LD_INT 9
36940: PUSH
36941: EMPTY
36942: LIST
36943: IN
36944: IFFALSE 36965
// points := [ 5 , 70 , 20 ] ;
36946: LD_ADDR_VAR 0 9
36950: PUSH
36951: LD_INT 5
36953: PUSH
36954: LD_INT 70
36956: PUSH
36957: LD_INT 20
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: LIST
36964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36965: LD_VAR 0 6
36969: PPUSH
36970: CALL_OW 264
36974: PUSH
36975: LD_INT 10
36977: PUSH
36978: EMPTY
36979: LIST
36980: IN
36981: IFFALSE 37002
// points := [ 35 , 110 , 70 ] ;
36983: LD_ADDR_VAR 0 9
36987: PUSH
36988: LD_INT 35
36990: PUSH
36991: LD_INT 110
36993: PUSH
36994: LD_INT 70
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37002: LD_VAR 0 6
37006: PPUSH
37007: CALL_OW 265
37011: PUSH
37012: LD_INT 25
37014: EQUAL
37015: IFFALSE 37036
// points := [ 80 , 65 , 100 ] ;
37017: LD_ADDR_VAR 0 9
37021: PUSH
37022: LD_INT 80
37024: PUSH
37025: LD_INT 65
37027: PUSH
37028: LD_INT 100
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37036: LD_VAR 0 6
37040: PPUSH
37041: CALL_OW 263
37045: PUSH
37046: LD_INT 1
37048: EQUAL
37049: IFFALSE 37084
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37051: LD_ADDR_VAR 0 10
37055: PUSH
37056: LD_VAR 0 10
37060: PUSH
37061: LD_VAR 0 6
37065: PPUSH
37066: CALL_OW 311
37070: PPUSH
37071: LD_INT 3
37073: PPUSH
37074: CALL_OW 259
37078: PUSH
37079: LD_INT 4
37081: MUL
37082: MUL
37083: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37084: LD_VAR 0 6
37088: PPUSH
37089: CALL_OW 263
37093: PUSH
37094: LD_INT 2
37096: EQUAL
37097: IFFALSE 37148
// begin j := IsControledBy ( i ) ;
37099: LD_ADDR_VAR 0 7
37103: PUSH
37104: LD_VAR 0 6
37108: PPUSH
37109: CALL_OW 312
37113: ST_TO_ADDR
// if j then
37114: LD_VAR 0 7
37118: IFFALSE 37148
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37120: LD_ADDR_VAR 0 10
37124: PUSH
37125: LD_VAR 0 10
37129: PUSH
37130: LD_VAR 0 7
37134: PPUSH
37135: LD_INT 3
37137: PPUSH
37138: CALL_OW 259
37142: PUSH
37143: LD_INT 3
37145: MUL
37146: MUL
37147: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37148: LD_VAR 0 6
37152: PPUSH
37153: CALL_OW 264
37157: PUSH
37158: LD_INT 5
37160: PUSH
37161: LD_INT 6
37163: PUSH
37164: LD_INT 46
37166: PUSH
37167: LD_INT 44
37169: PUSH
37170: LD_INT 47
37172: PUSH
37173: LD_INT 45
37175: PUSH
37176: LD_INT 28
37178: PUSH
37179: LD_INT 7
37181: PUSH
37182: LD_INT 27
37184: PUSH
37185: LD_INT 29
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: LIST
37199: IN
37200: PUSH
37201: LD_VAR 0 1
37205: PPUSH
37206: LD_INT 52
37208: PPUSH
37209: CALL_OW 321
37213: PUSH
37214: LD_INT 2
37216: EQUAL
37217: AND
37218: IFFALSE 37235
// bpoints := bpoints * 1.2 ;
37220: LD_ADDR_VAR 0 10
37224: PUSH
37225: LD_VAR 0 10
37229: PUSH
37230: LD_REAL  1.20000000000000E+0000
37233: MUL
37234: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37235: LD_VAR 0 6
37239: PPUSH
37240: CALL_OW 264
37244: PUSH
37245: LD_INT 6
37247: PUSH
37248: LD_INT 46
37250: PUSH
37251: LD_INT 47
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: LIST
37258: IN
37259: IFFALSE 37276
// bpoints := bpoints * 1.2 ;
37261: LD_ADDR_VAR 0 10
37265: PUSH
37266: LD_VAR 0 10
37270: PUSH
37271: LD_REAL  1.20000000000000E+0000
37274: MUL
37275: ST_TO_ADDR
// end ; unit_building :
37276: GO 37290
37278: LD_INT 3
37280: DOUBLE
37281: EQUAL
37282: IFTRUE 37286
37284: GO 37289
37286: POP
// ; end ;
37287: GO 37290
37289: POP
// for j = 1 to 3 do
37290: LD_ADDR_VAR 0 7
37294: PUSH
37295: DOUBLE
37296: LD_INT 1
37298: DEC
37299: ST_TO_ADDR
37300: LD_INT 3
37302: PUSH
37303: FOR_TO
37304: IFFALSE 37357
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37306: LD_ADDR_VAR 0 5
37310: PUSH
37311: LD_VAR 0 5
37315: PPUSH
37316: LD_VAR 0 7
37320: PPUSH
37321: LD_VAR 0 5
37325: PUSH
37326: LD_VAR 0 7
37330: ARRAY
37331: PUSH
37332: LD_VAR 0 9
37336: PUSH
37337: LD_VAR 0 7
37341: ARRAY
37342: PUSH
37343: LD_VAR 0 10
37347: MUL
37348: PLUS
37349: PPUSH
37350: CALL_OW 1
37354: ST_TO_ADDR
37355: GO 37303
37357: POP
37358: POP
// end ;
37359: GO 35838
37361: POP
37362: POP
// result := Replace ( result , 4 , tmp ) ;
37363: LD_ADDR_VAR 0 5
37367: PUSH
37368: LD_VAR 0 5
37372: PPUSH
37373: LD_INT 4
37375: PPUSH
37376: LD_VAR 0 8
37380: PPUSH
37381: CALL_OW 1
37385: ST_TO_ADDR
// end ;
37386: LD_VAR 0 5
37390: RET
// export function DangerAtRange ( unit , range ) ; begin
37391: LD_INT 0
37393: PPUSH
// if not unit then
37394: LD_VAR 0 1
37398: NOT
37399: IFFALSE 37403
// exit ;
37401: GO 37448
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37403: LD_ADDR_VAR 0 3
37407: PUSH
37408: LD_VAR 0 1
37412: PPUSH
37413: CALL_OW 255
37417: PPUSH
37418: LD_VAR 0 1
37422: PPUSH
37423: CALL_OW 250
37427: PPUSH
37428: LD_VAR 0 1
37432: PPUSH
37433: CALL_OW 251
37437: PPUSH
37438: LD_VAR 0 2
37442: PPUSH
37443: CALL 35690 0 4
37447: ST_TO_ADDR
// end ;
37448: LD_VAR 0 3
37452: RET
// export function DangerInArea ( side , area ) ; begin
37453: LD_INT 0
37455: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37456: LD_ADDR_VAR 0 3
37460: PUSH
37461: LD_VAR 0 2
37465: PPUSH
37466: LD_INT 81
37468: PUSH
37469: LD_VAR 0 1
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PPUSH
37478: CALL_OW 70
37482: ST_TO_ADDR
// end ;
37483: LD_VAR 0 3
37487: RET
// export function IsExtension ( b ) ; begin
37488: LD_INT 0
37490: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37491: LD_ADDR_VAR 0 2
37495: PUSH
37496: LD_VAR 0 1
37500: PUSH
37501: LD_INT 23
37503: PUSH
37504: LD_INT 20
37506: PUSH
37507: LD_INT 22
37509: PUSH
37510: LD_INT 17
37512: PUSH
37513: LD_INT 24
37515: PUSH
37516: LD_INT 21
37518: PUSH
37519: LD_INT 19
37521: PUSH
37522: LD_INT 16
37524: PUSH
37525: LD_INT 25
37527: PUSH
37528: LD_INT 18
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: IN
37543: ST_TO_ADDR
// end ;
37544: LD_VAR 0 2
37548: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37549: LD_INT 0
37551: PPUSH
37552: PPUSH
37553: PPUSH
// result := [ ] ;
37554: LD_ADDR_VAR 0 4
37558: PUSH
37559: EMPTY
37560: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37561: LD_ADDR_VAR 0 5
37565: PUSH
37566: LD_VAR 0 2
37570: PPUSH
37571: LD_INT 21
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PPUSH
37581: CALL_OW 70
37585: ST_TO_ADDR
// if not tmp then
37586: LD_VAR 0 5
37590: NOT
37591: IFFALSE 37595
// exit ;
37593: GO 37659
// if checkLink then
37595: LD_VAR 0 3
37599: IFFALSE 37649
// begin for i in tmp do
37601: LD_ADDR_VAR 0 6
37605: PUSH
37606: LD_VAR 0 5
37610: PUSH
37611: FOR_IN
37612: IFFALSE 37647
// if GetBase ( i ) <> base then
37614: LD_VAR 0 6
37618: PPUSH
37619: CALL_OW 274
37623: PUSH
37624: LD_VAR 0 1
37628: NONEQUAL
37629: IFFALSE 37645
// ComLinkToBase ( base , i ) ;
37631: LD_VAR 0 1
37635: PPUSH
37636: LD_VAR 0 6
37640: PPUSH
37641: CALL_OW 169
37645: GO 37611
37647: POP
37648: POP
// end ; result := tmp ;
37649: LD_ADDR_VAR 0 4
37653: PUSH
37654: LD_VAR 0 5
37658: ST_TO_ADDR
// end ;
37659: LD_VAR 0 4
37663: RET
// export function ComComplete ( units , b ) ; var i ; begin
37664: LD_INT 0
37666: PPUSH
37667: PPUSH
// if not units then
37668: LD_VAR 0 1
37672: NOT
37673: IFFALSE 37677
// exit ;
37675: GO 37767
// for i in units do
37677: LD_ADDR_VAR 0 4
37681: PUSH
37682: LD_VAR 0 1
37686: PUSH
37687: FOR_IN
37688: IFFALSE 37765
// if BuildingStatus ( b ) = bs_build then
37690: LD_VAR 0 2
37694: PPUSH
37695: CALL_OW 461
37699: PUSH
37700: LD_INT 1
37702: EQUAL
37703: IFFALSE 37763
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37705: LD_VAR 0 4
37709: PPUSH
37710: LD_STRING h
37712: PUSH
37713: LD_VAR 0 2
37717: PPUSH
37718: CALL_OW 250
37722: PUSH
37723: LD_VAR 0 2
37727: PPUSH
37728: CALL_OW 251
37732: PUSH
37733: LD_VAR 0 2
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: PUSH
37756: EMPTY
37757: LIST
37758: PPUSH
37759: CALL_OW 446
37763: GO 37687
37765: POP
37766: POP
// end ;
37767: LD_VAR 0 3
37771: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37772: LD_INT 0
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37780: LD_VAR 0 1
37784: NOT
37785: PUSH
37786: LD_VAR 0 1
37790: PPUSH
37791: CALL_OW 263
37795: PUSH
37796: LD_INT 2
37798: NONEQUAL
37799: OR
37800: IFFALSE 37804
// exit ;
37802: GO 38120
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37804: LD_ADDR_VAR 0 6
37808: PUSH
37809: LD_INT 22
37811: PUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 255
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 30
37831: PUSH
37832: LD_INT 36
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 34
37841: PUSH
37842: LD_INT 31
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: LIST
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PPUSH
37858: CALL_OW 69
37862: ST_TO_ADDR
// if not tmp then
37863: LD_VAR 0 6
37867: NOT
37868: IFFALSE 37872
// exit ;
37870: GO 38120
// result := [ ] ;
37872: LD_ADDR_VAR 0 2
37876: PUSH
37877: EMPTY
37878: ST_TO_ADDR
// for i in tmp do
37879: LD_ADDR_VAR 0 3
37883: PUSH
37884: LD_VAR 0 6
37888: PUSH
37889: FOR_IN
37890: IFFALSE 37961
// begin t := UnitsInside ( i ) ;
37892: LD_ADDR_VAR 0 4
37896: PUSH
37897: LD_VAR 0 3
37901: PPUSH
37902: CALL_OW 313
37906: ST_TO_ADDR
// if t then
37907: LD_VAR 0 4
37911: IFFALSE 37959
// for j in t do
37913: LD_ADDR_VAR 0 7
37917: PUSH
37918: LD_VAR 0 4
37922: PUSH
37923: FOR_IN
37924: IFFALSE 37957
// result := Replace ( result , result + 1 , j ) ;
37926: LD_ADDR_VAR 0 2
37930: PUSH
37931: LD_VAR 0 2
37935: PPUSH
37936: LD_VAR 0 2
37940: PUSH
37941: LD_INT 1
37943: PLUS
37944: PPUSH
37945: LD_VAR 0 7
37949: PPUSH
37950: CALL_OW 1
37954: ST_TO_ADDR
37955: GO 37923
37957: POP
37958: POP
// end ;
37959: GO 37889
37961: POP
37962: POP
// if not result then
37963: LD_VAR 0 2
37967: NOT
37968: IFFALSE 37972
// exit ;
37970: GO 38120
// mech := result [ 1 ] ;
37972: LD_ADDR_VAR 0 5
37976: PUSH
37977: LD_VAR 0 2
37981: PUSH
37982: LD_INT 1
37984: ARRAY
37985: ST_TO_ADDR
// if result > 1 then
37986: LD_VAR 0 2
37990: PUSH
37991: LD_INT 1
37993: GREATER
37994: IFFALSE 38106
// begin for i = 2 to result do
37996: LD_ADDR_VAR 0 3
38000: PUSH
38001: DOUBLE
38002: LD_INT 2
38004: DEC
38005: ST_TO_ADDR
38006: LD_VAR 0 2
38010: PUSH
38011: FOR_TO
38012: IFFALSE 38104
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38014: LD_ADDR_VAR 0 4
38018: PUSH
38019: LD_VAR 0 2
38023: PUSH
38024: LD_VAR 0 3
38028: ARRAY
38029: PPUSH
38030: LD_INT 3
38032: PPUSH
38033: CALL_OW 259
38037: PUSH
38038: LD_VAR 0 2
38042: PUSH
38043: LD_VAR 0 3
38047: ARRAY
38048: PPUSH
38049: CALL_OW 432
38053: MINUS
38054: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38055: LD_VAR 0 4
38059: PUSH
38060: LD_VAR 0 5
38064: PPUSH
38065: LD_INT 3
38067: PPUSH
38068: CALL_OW 259
38072: PUSH
38073: LD_VAR 0 5
38077: PPUSH
38078: CALL_OW 432
38082: MINUS
38083: GREATEREQUAL
38084: IFFALSE 38102
// mech := result [ i ] ;
38086: LD_ADDR_VAR 0 5
38090: PUSH
38091: LD_VAR 0 2
38095: PUSH
38096: LD_VAR 0 3
38100: ARRAY
38101: ST_TO_ADDR
// end ;
38102: GO 38011
38104: POP
38105: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38106: LD_VAR 0 1
38110: PPUSH
38111: LD_VAR 0 5
38115: PPUSH
38116: CALL_OW 135
// end ;
38120: LD_VAR 0 2
38124: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38125: LD_INT 0
38127: PPUSH
38128: PPUSH
38129: PPUSH
38130: PPUSH
38131: PPUSH
38132: PPUSH
38133: PPUSH
38134: PPUSH
38135: PPUSH
38136: PPUSH
38137: PPUSH
38138: PPUSH
38139: PPUSH
// result := [ ] ;
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: EMPTY
38146: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 266
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: IN
38167: NOT
38168: IFFALSE 38172
// exit ;
38170: GO 39806
// if name then
38172: LD_VAR 0 3
38176: IFFALSE 38192
// SetBName ( base_dep , name ) ;
38178: LD_VAR 0 1
38182: PPUSH
38183: LD_VAR 0 3
38187: PPUSH
38188: CALL_OW 500
// base := GetBase ( base_dep ) ;
38192: LD_ADDR_VAR 0 15
38196: PUSH
38197: LD_VAR 0 1
38201: PPUSH
38202: CALL_OW 274
38206: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38207: LD_ADDR_VAR 0 16
38211: PUSH
38212: LD_VAR 0 1
38216: PPUSH
38217: CALL_OW 255
38221: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38222: LD_ADDR_VAR 0 17
38226: PUSH
38227: LD_VAR 0 1
38231: PPUSH
38232: CALL_OW 248
38236: ST_TO_ADDR
// if sources then
38237: LD_VAR 0 5
38241: IFFALSE 38288
// for i = 1 to 3 do
38243: LD_ADDR_VAR 0 8
38247: PUSH
38248: DOUBLE
38249: LD_INT 1
38251: DEC
38252: ST_TO_ADDR
38253: LD_INT 3
38255: PUSH
38256: FOR_TO
38257: IFFALSE 38286
// AddResourceType ( base , i , sources [ i ] ) ;
38259: LD_VAR 0 15
38263: PPUSH
38264: LD_VAR 0 8
38268: PPUSH
38269: LD_VAR 0 5
38273: PUSH
38274: LD_VAR 0 8
38278: ARRAY
38279: PPUSH
38280: CALL_OW 276
38284: GO 38256
38286: POP
38287: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38288: LD_ADDR_VAR 0 18
38292: PUSH
38293: LD_VAR 0 15
38297: PPUSH
38298: LD_VAR 0 2
38302: PPUSH
38303: LD_INT 1
38305: PPUSH
38306: CALL 37549 0 3
38310: ST_TO_ADDR
// InitHc ;
38311: CALL_OW 19
// InitUc ;
38315: CALL_OW 18
// uc_side := side ;
38319: LD_ADDR_OWVAR 20
38323: PUSH
38324: LD_VAR 0 16
38328: ST_TO_ADDR
// uc_nation := nation ;
38329: LD_ADDR_OWVAR 21
38333: PUSH
38334: LD_VAR 0 17
38338: ST_TO_ADDR
// if buildings then
38339: LD_VAR 0 18
38343: IFFALSE 39665
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38345: LD_ADDR_VAR 0 19
38349: PUSH
38350: LD_VAR 0 18
38354: PPUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 30
38360: PUSH
38361: LD_INT 29
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 30
38370: PUSH
38371: LD_INT 30
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: LIST
38382: PPUSH
38383: CALL_OW 72
38387: ST_TO_ADDR
// if tmp then
38388: LD_VAR 0 19
38392: IFFALSE 38440
// for i in tmp do
38394: LD_ADDR_VAR 0 8
38398: PUSH
38399: LD_VAR 0 19
38403: PUSH
38404: FOR_IN
38405: IFFALSE 38438
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38407: LD_VAR 0 8
38411: PPUSH
38412: CALL_OW 250
38416: PPUSH
38417: LD_VAR 0 8
38421: PPUSH
38422: CALL_OW 251
38426: PPUSH
38427: LD_VAR 0 16
38431: PPUSH
38432: CALL_OW 441
38436: GO 38404
38438: POP
38439: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38440: LD_VAR 0 18
38444: PPUSH
38445: LD_INT 2
38447: PUSH
38448: LD_INT 30
38450: PUSH
38451: LD_INT 32
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 30
38460: PUSH
38461: LD_INT 33
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: PPUSH
38473: CALL_OW 72
38477: IFFALSE 38565
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38479: LD_ADDR_VAR 0 8
38483: PUSH
38484: LD_VAR 0 18
38488: PPUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 30
38494: PUSH
38495: LD_INT 32
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 30
38504: PUSH
38505: LD_INT 33
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: PPUSH
38517: CALL_OW 72
38521: PUSH
38522: FOR_IN
38523: IFFALSE 38563
// begin if not GetBWeapon ( i ) then
38525: LD_VAR 0 8
38529: PPUSH
38530: CALL_OW 269
38534: NOT
38535: IFFALSE 38561
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38537: LD_VAR 0 8
38541: PPUSH
38542: LD_VAR 0 8
38546: PPUSH
38547: LD_VAR 0 2
38551: PPUSH
38552: CALL 39811 0 2
38556: PPUSH
38557: CALL_OW 431
// end ;
38561: GO 38522
38563: POP
38564: POP
// end ; for i = 1 to personel do
38565: LD_ADDR_VAR 0 8
38569: PUSH
38570: DOUBLE
38571: LD_INT 1
38573: DEC
38574: ST_TO_ADDR
38575: LD_VAR 0 6
38579: PUSH
38580: FOR_TO
38581: IFFALSE 39645
// begin if i > 4 then
38583: LD_VAR 0 8
38587: PUSH
38588: LD_INT 4
38590: GREATER
38591: IFFALSE 38595
// break ;
38593: GO 39645
// case i of 1 :
38595: LD_VAR 0 8
38599: PUSH
38600: LD_INT 1
38602: DOUBLE
38603: EQUAL
38604: IFTRUE 38608
38606: GO 38688
38608: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38609: LD_ADDR_VAR 0 12
38613: PUSH
38614: LD_VAR 0 18
38618: PPUSH
38619: LD_INT 22
38621: PUSH
38622: LD_VAR 0 16
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 58
38633: PUSH
38634: EMPTY
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: LD_INT 30
38642: PUSH
38643: LD_INT 32
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 30
38652: PUSH
38653: LD_INT 4
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 30
38662: PUSH
38663: LD_INT 5
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: PPUSH
38681: CALL_OW 72
38685: ST_TO_ADDR
38686: GO 38910
38688: LD_INT 2
38690: DOUBLE
38691: EQUAL
38692: IFTRUE 38696
38694: GO 38758
38696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38697: LD_ADDR_VAR 0 12
38701: PUSH
38702: LD_VAR 0 18
38706: PPUSH
38707: LD_INT 22
38709: PUSH
38710: LD_VAR 0 16
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 30
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 30
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: LIST
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PPUSH
38751: CALL_OW 72
38755: ST_TO_ADDR
38756: GO 38910
38758: LD_INT 3
38760: DOUBLE
38761: EQUAL
38762: IFTRUE 38766
38764: GO 38828
38766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38767: LD_ADDR_VAR 0 12
38771: PUSH
38772: LD_VAR 0 18
38776: PPUSH
38777: LD_INT 22
38779: PUSH
38780: LD_VAR 0 16
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 2
38791: PUSH
38792: LD_INT 30
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 30
38804: PUSH
38805: LD_INT 3
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PPUSH
38821: CALL_OW 72
38825: ST_TO_ADDR
38826: GO 38910
38828: LD_INT 4
38830: DOUBLE
38831: EQUAL
38832: IFTRUE 38836
38834: GO 38909
38836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38837: LD_ADDR_VAR 0 12
38841: PUSH
38842: LD_VAR 0 18
38846: PPUSH
38847: LD_INT 22
38849: PUSH
38850: LD_VAR 0 16
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: LD_INT 30
38864: PUSH
38865: LD_INT 6
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 30
38874: PUSH
38875: LD_INT 7
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 30
38884: PUSH
38885: LD_INT 8
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PPUSH
38902: CALL_OW 72
38906: ST_TO_ADDR
38907: GO 38910
38909: POP
// if i = 1 then
38910: LD_VAR 0 8
38914: PUSH
38915: LD_INT 1
38917: EQUAL
38918: IFFALSE 39029
// begin tmp := [ ] ;
38920: LD_ADDR_VAR 0 19
38924: PUSH
38925: EMPTY
38926: ST_TO_ADDR
// for j in f do
38927: LD_ADDR_VAR 0 9
38931: PUSH
38932: LD_VAR 0 12
38936: PUSH
38937: FOR_IN
38938: IFFALSE 39011
// if GetBType ( j ) = b_bunker then
38940: LD_VAR 0 9
38944: PPUSH
38945: CALL_OW 266
38949: PUSH
38950: LD_INT 32
38952: EQUAL
38953: IFFALSE 38980
// tmp := Insert ( tmp , 1 , j ) else
38955: LD_ADDR_VAR 0 19
38959: PUSH
38960: LD_VAR 0 19
38964: PPUSH
38965: LD_INT 1
38967: PPUSH
38968: LD_VAR 0 9
38972: PPUSH
38973: CALL_OW 2
38977: ST_TO_ADDR
38978: GO 39009
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38980: LD_ADDR_VAR 0 19
38984: PUSH
38985: LD_VAR 0 19
38989: PPUSH
38990: LD_VAR 0 19
38994: PUSH
38995: LD_INT 1
38997: PLUS
38998: PPUSH
38999: LD_VAR 0 9
39003: PPUSH
39004: CALL_OW 2
39008: ST_TO_ADDR
39009: GO 38937
39011: POP
39012: POP
// if tmp then
39013: LD_VAR 0 19
39017: IFFALSE 39029
// f := tmp ;
39019: LD_ADDR_VAR 0 12
39023: PUSH
39024: LD_VAR 0 19
39028: ST_TO_ADDR
// end ; x := personel [ i ] ;
39029: LD_ADDR_VAR 0 13
39033: PUSH
39034: LD_VAR 0 6
39038: PUSH
39039: LD_VAR 0 8
39043: ARRAY
39044: ST_TO_ADDR
// if x = - 1 then
39045: LD_VAR 0 13
39049: PUSH
39050: LD_INT 1
39052: NEG
39053: EQUAL
39054: IFFALSE 39263
// begin for j in f do
39056: LD_ADDR_VAR 0 9
39060: PUSH
39061: LD_VAR 0 12
39065: PUSH
39066: FOR_IN
39067: IFFALSE 39259
// repeat InitHc ;
39069: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39073: LD_VAR 0 9
39077: PPUSH
39078: CALL_OW 266
39082: PUSH
39083: LD_INT 5
39085: EQUAL
39086: IFFALSE 39156
// begin if UnitsInside ( j ) < 3 then
39088: LD_VAR 0 9
39092: PPUSH
39093: CALL_OW 313
39097: PUSH
39098: LD_INT 3
39100: LESS
39101: IFFALSE 39137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39103: LD_INT 0
39105: PPUSH
39106: LD_INT 5
39108: PUSH
39109: LD_INT 8
39111: PUSH
39112: LD_INT 9
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: PUSH
39120: LD_VAR 0 17
39124: ARRAY
39125: PPUSH
39126: LD_VAR 0 4
39130: PPUSH
39131: CALL_OW 380
39135: GO 39154
// PrepareHuman ( false , i , skill ) ;
39137: LD_INT 0
39139: PPUSH
39140: LD_VAR 0 8
39144: PPUSH
39145: LD_VAR 0 4
39149: PPUSH
39150: CALL_OW 380
// end else
39154: GO 39173
// PrepareHuman ( false , i , skill ) ;
39156: LD_INT 0
39158: PPUSH
39159: LD_VAR 0 8
39163: PPUSH
39164: LD_VAR 0 4
39168: PPUSH
39169: CALL_OW 380
// un := CreateHuman ;
39173: LD_ADDR_VAR 0 14
39177: PUSH
39178: CALL_OW 44
39182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39183: LD_ADDR_VAR 0 7
39187: PUSH
39188: LD_VAR 0 7
39192: PPUSH
39193: LD_INT 1
39195: PPUSH
39196: LD_VAR 0 14
39200: PPUSH
39201: CALL_OW 2
39205: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39206: LD_VAR 0 14
39210: PPUSH
39211: LD_VAR 0 9
39215: PPUSH
39216: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39220: LD_VAR 0 9
39224: PPUSH
39225: CALL_OW 313
39229: PUSH
39230: LD_INT 6
39232: EQUAL
39233: PUSH
39234: LD_VAR 0 9
39238: PPUSH
39239: CALL_OW 266
39243: PUSH
39244: LD_INT 32
39246: PUSH
39247: LD_INT 31
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: IN
39254: OR
39255: IFFALSE 39069
39257: GO 39066
39259: POP
39260: POP
// end else
39261: GO 39643
// for j = 1 to x do
39263: LD_ADDR_VAR 0 9
39267: PUSH
39268: DOUBLE
39269: LD_INT 1
39271: DEC
39272: ST_TO_ADDR
39273: LD_VAR 0 13
39277: PUSH
39278: FOR_TO
39279: IFFALSE 39641
// begin InitHc ;
39281: CALL_OW 19
// if not f then
39285: LD_VAR 0 12
39289: NOT
39290: IFFALSE 39379
// begin PrepareHuman ( false , i , skill ) ;
39292: LD_INT 0
39294: PPUSH
39295: LD_VAR 0 8
39299: PPUSH
39300: LD_VAR 0 4
39304: PPUSH
39305: CALL_OW 380
// un := CreateHuman ;
39309: LD_ADDR_VAR 0 14
39313: PUSH
39314: CALL_OW 44
39318: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39319: LD_ADDR_VAR 0 7
39323: PUSH
39324: LD_VAR 0 7
39328: PPUSH
39329: LD_INT 1
39331: PPUSH
39332: LD_VAR 0 14
39336: PPUSH
39337: CALL_OW 2
39341: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39342: LD_VAR 0 14
39346: PPUSH
39347: LD_VAR 0 1
39351: PPUSH
39352: CALL_OW 250
39356: PPUSH
39357: LD_VAR 0 1
39361: PPUSH
39362: CALL_OW 251
39366: PPUSH
39367: LD_INT 10
39369: PPUSH
39370: LD_INT 0
39372: PPUSH
39373: CALL_OW 50
// continue ;
39377: GO 39278
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39379: LD_VAR 0 12
39383: PUSH
39384: LD_INT 1
39386: ARRAY
39387: PPUSH
39388: CALL_OW 313
39392: PUSH
39393: LD_VAR 0 12
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: PPUSH
39402: CALL_OW 266
39406: PUSH
39407: LD_INT 32
39409: PUSH
39410: LD_INT 31
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: IN
39417: AND
39418: PUSH
39419: LD_VAR 0 12
39423: PUSH
39424: LD_INT 1
39426: ARRAY
39427: PPUSH
39428: CALL_OW 313
39432: PUSH
39433: LD_INT 6
39435: EQUAL
39436: OR
39437: IFFALSE 39457
// f := Delete ( f , 1 ) ;
39439: LD_ADDR_VAR 0 12
39443: PUSH
39444: LD_VAR 0 12
39448: PPUSH
39449: LD_INT 1
39451: PPUSH
39452: CALL_OW 3
39456: ST_TO_ADDR
// if not f then
39457: LD_VAR 0 12
39461: NOT
39462: IFFALSE 39480
// begin x := x + 2 ;
39464: LD_ADDR_VAR 0 13
39468: PUSH
39469: LD_VAR 0 13
39473: PUSH
39474: LD_INT 2
39476: PLUS
39477: ST_TO_ADDR
// continue ;
39478: GO 39278
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39480: LD_VAR 0 12
39484: PUSH
39485: LD_INT 1
39487: ARRAY
39488: PPUSH
39489: CALL_OW 266
39493: PUSH
39494: LD_INT 5
39496: EQUAL
39497: IFFALSE 39571
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39499: LD_VAR 0 12
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: CALL_OW 313
39512: PUSH
39513: LD_INT 3
39515: LESS
39516: IFFALSE 39552
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39518: LD_INT 0
39520: PPUSH
39521: LD_INT 5
39523: PUSH
39524: LD_INT 8
39526: PUSH
39527: LD_INT 9
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: PUSH
39535: LD_VAR 0 17
39539: ARRAY
39540: PPUSH
39541: LD_VAR 0 4
39545: PPUSH
39546: CALL_OW 380
39550: GO 39569
// PrepareHuman ( false , i , skill ) ;
39552: LD_INT 0
39554: PPUSH
39555: LD_VAR 0 8
39559: PPUSH
39560: LD_VAR 0 4
39564: PPUSH
39565: CALL_OW 380
// end else
39569: GO 39588
// PrepareHuman ( false , i , skill ) ;
39571: LD_INT 0
39573: PPUSH
39574: LD_VAR 0 8
39578: PPUSH
39579: LD_VAR 0 4
39583: PPUSH
39584: CALL_OW 380
// un := CreateHuman ;
39588: LD_ADDR_VAR 0 14
39592: PUSH
39593: CALL_OW 44
39597: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39598: LD_ADDR_VAR 0 7
39602: PUSH
39603: LD_VAR 0 7
39607: PPUSH
39608: LD_INT 1
39610: PPUSH
39611: LD_VAR 0 14
39615: PPUSH
39616: CALL_OW 2
39620: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39621: LD_VAR 0 14
39625: PPUSH
39626: LD_VAR 0 12
39630: PUSH
39631: LD_INT 1
39633: ARRAY
39634: PPUSH
39635: CALL_OW 52
// end ;
39639: GO 39278
39641: POP
39642: POP
// end ;
39643: GO 38580
39645: POP
39646: POP
// result := result ^ buildings ;
39647: LD_ADDR_VAR 0 7
39651: PUSH
39652: LD_VAR 0 7
39656: PUSH
39657: LD_VAR 0 18
39661: ADD
39662: ST_TO_ADDR
// end else
39663: GO 39806
// begin for i = 1 to personel do
39665: LD_ADDR_VAR 0 8
39669: PUSH
39670: DOUBLE
39671: LD_INT 1
39673: DEC
39674: ST_TO_ADDR
39675: LD_VAR 0 6
39679: PUSH
39680: FOR_TO
39681: IFFALSE 39804
// begin if i > 4 then
39683: LD_VAR 0 8
39687: PUSH
39688: LD_INT 4
39690: GREATER
39691: IFFALSE 39695
// break ;
39693: GO 39804
// x := personel [ i ] ;
39695: LD_ADDR_VAR 0 13
39699: PUSH
39700: LD_VAR 0 6
39704: PUSH
39705: LD_VAR 0 8
39709: ARRAY
39710: ST_TO_ADDR
// if x = - 1 then
39711: LD_VAR 0 13
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: EQUAL
39720: IFFALSE 39724
// continue ;
39722: GO 39680
// PrepareHuman ( false , i , skill ) ;
39724: LD_INT 0
39726: PPUSH
39727: LD_VAR 0 8
39731: PPUSH
39732: LD_VAR 0 4
39736: PPUSH
39737: CALL_OW 380
// un := CreateHuman ;
39741: LD_ADDR_VAR 0 14
39745: PUSH
39746: CALL_OW 44
39750: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39751: LD_VAR 0 14
39755: PPUSH
39756: LD_VAR 0 1
39760: PPUSH
39761: CALL_OW 250
39765: PPUSH
39766: LD_VAR 0 1
39770: PPUSH
39771: CALL_OW 251
39775: PPUSH
39776: LD_INT 10
39778: PPUSH
39779: LD_INT 0
39781: PPUSH
39782: CALL_OW 50
// result := result ^ un ;
39786: LD_ADDR_VAR 0 7
39790: PUSH
39791: LD_VAR 0 7
39795: PUSH
39796: LD_VAR 0 14
39800: ADD
39801: ST_TO_ADDR
// end ;
39802: GO 39680
39804: POP
39805: POP
// end ; end ;
39806: LD_VAR 0 7
39810: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39811: LD_INT 0
39813: PPUSH
39814: PPUSH
39815: PPUSH
39816: PPUSH
39817: PPUSH
39818: PPUSH
39819: PPUSH
39820: PPUSH
39821: PPUSH
39822: PPUSH
39823: PPUSH
39824: PPUSH
39825: PPUSH
39826: PPUSH
39827: PPUSH
39828: PPUSH
// result := false ;
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_INT 0
39836: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39837: LD_VAR 0 1
39841: NOT
39842: PUSH
39843: LD_VAR 0 1
39847: PPUSH
39848: CALL_OW 266
39852: PUSH
39853: LD_INT 32
39855: PUSH
39856: LD_INT 33
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: IN
39863: NOT
39864: OR
39865: IFFALSE 39869
// exit ;
39867: GO 40978
// nat := GetNation ( tower ) ;
39869: LD_ADDR_VAR 0 12
39873: PUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: CALL_OW 248
39883: ST_TO_ADDR
// side := GetSide ( tower ) ;
39884: LD_ADDR_VAR 0 16
39888: PUSH
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 255
39898: ST_TO_ADDR
// x := GetX ( tower ) ;
39899: LD_ADDR_VAR 0 10
39903: PUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 250
39913: ST_TO_ADDR
// y := GetY ( tower ) ;
39914: LD_ADDR_VAR 0 11
39918: PUSH
39919: LD_VAR 0 1
39923: PPUSH
39924: CALL_OW 251
39928: ST_TO_ADDR
// if not x or not y then
39929: LD_VAR 0 10
39933: NOT
39934: PUSH
39935: LD_VAR 0 11
39939: NOT
39940: OR
39941: IFFALSE 39945
// exit ;
39943: GO 40978
// weapon := 0 ;
39945: LD_ADDR_VAR 0 18
39949: PUSH
39950: LD_INT 0
39952: ST_TO_ADDR
// fac_list := [ ] ;
39953: LD_ADDR_VAR 0 17
39957: PUSH
39958: EMPTY
39959: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39960: LD_ADDR_VAR 0 6
39964: PUSH
39965: LD_VAR 0 1
39969: PPUSH
39970: CALL_OW 274
39974: PPUSH
39975: LD_VAR 0 2
39979: PPUSH
39980: LD_INT 0
39982: PPUSH
39983: CALL 37549 0 3
39987: PPUSH
39988: LD_INT 30
39990: PUSH
39991: LD_INT 3
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PPUSH
39998: CALL_OW 72
40002: ST_TO_ADDR
// if not factories then
40003: LD_VAR 0 6
40007: NOT
40008: IFFALSE 40012
// exit ;
40010: GO 40978
// for i in factories do
40012: LD_ADDR_VAR 0 8
40016: PUSH
40017: LD_VAR 0 6
40021: PUSH
40022: FOR_IN
40023: IFFALSE 40048
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40025: LD_ADDR_VAR 0 17
40029: PUSH
40030: LD_VAR 0 17
40034: PUSH
40035: LD_VAR 0 8
40039: PPUSH
40040: CALL_OW 478
40044: UNION
40045: ST_TO_ADDR
40046: GO 40022
40048: POP
40049: POP
// if not fac_list then
40050: LD_VAR 0 17
40054: NOT
40055: IFFALSE 40059
// exit ;
40057: GO 40978
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40059: LD_ADDR_VAR 0 5
40063: PUSH
40064: LD_INT 4
40066: PUSH
40067: LD_INT 5
40069: PUSH
40070: LD_INT 9
40072: PUSH
40073: LD_INT 10
40075: PUSH
40076: LD_INT 6
40078: PUSH
40079: LD_INT 7
40081: PUSH
40082: LD_INT 11
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 27
40096: PUSH
40097: LD_INT 28
40099: PUSH
40100: LD_INT 26
40102: PUSH
40103: LD_INT 30
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 43
40114: PUSH
40115: LD_INT 44
40117: PUSH
40118: LD_INT 46
40120: PUSH
40121: LD_INT 45
40123: PUSH
40124: LD_INT 47
40126: PUSH
40127: LD_INT 49
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: LIST
40142: PUSH
40143: LD_VAR 0 12
40147: ARRAY
40148: ST_TO_ADDR
// list := list isect fac_list ;
40149: LD_ADDR_VAR 0 5
40153: PUSH
40154: LD_VAR 0 5
40158: PUSH
40159: LD_VAR 0 17
40163: ISECT
40164: ST_TO_ADDR
// if not list then
40165: LD_VAR 0 5
40169: NOT
40170: IFFALSE 40174
// exit ;
40172: GO 40978
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40174: LD_VAR 0 12
40178: PUSH
40179: LD_INT 3
40181: EQUAL
40182: PUSH
40183: LD_INT 49
40185: PUSH
40186: LD_VAR 0 5
40190: IN
40191: AND
40192: PUSH
40193: LD_INT 31
40195: PPUSH
40196: LD_VAR 0 16
40200: PPUSH
40201: CALL_OW 321
40205: PUSH
40206: LD_INT 2
40208: EQUAL
40209: AND
40210: IFFALSE 40270
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40212: LD_INT 22
40214: PUSH
40215: LD_VAR 0 16
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 35
40226: PUSH
40227: LD_INT 49
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 91
40236: PUSH
40237: LD_VAR 0 1
40241: PUSH
40242: LD_INT 10
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: PPUSH
40255: CALL_OW 69
40259: NOT
40260: IFFALSE 40270
// weapon := ru_time_lapser ;
40262: LD_ADDR_VAR 0 18
40266: PUSH
40267: LD_INT 49
40269: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40270: LD_VAR 0 12
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: LD_INT 2
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: IN
40285: PUSH
40286: LD_INT 11
40288: PUSH
40289: LD_VAR 0 5
40293: IN
40294: PUSH
40295: LD_INT 30
40297: PUSH
40298: LD_VAR 0 5
40302: IN
40303: OR
40304: AND
40305: PUSH
40306: LD_INT 6
40308: PPUSH
40309: LD_VAR 0 16
40313: PPUSH
40314: CALL_OW 321
40318: PUSH
40319: LD_INT 2
40321: EQUAL
40322: AND
40323: IFFALSE 40488
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40325: LD_INT 22
40327: PUSH
40328: LD_VAR 0 16
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: LD_INT 35
40342: PUSH
40343: LD_INT 11
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 35
40352: PUSH
40353: LD_INT 30
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 91
40367: PUSH
40368: LD_VAR 0 1
40372: PUSH
40373: LD_INT 18
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: LIST
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: LIST
40385: PPUSH
40386: CALL_OW 69
40390: NOT
40391: PUSH
40392: LD_INT 22
40394: PUSH
40395: LD_VAR 0 16
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 30
40409: PUSH
40410: LD_INT 32
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 30
40419: PUSH
40420: LD_INT 33
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 91
40434: PUSH
40435: LD_VAR 0 1
40439: PUSH
40440: LD_INT 12
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: LIST
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: PPUSH
40456: CALL_OW 69
40460: PUSH
40461: LD_INT 2
40463: GREATER
40464: AND
40465: IFFALSE 40488
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40467: LD_ADDR_VAR 0 18
40471: PUSH
40472: LD_INT 11
40474: PUSH
40475: LD_INT 30
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_VAR 0 12
40486: ARRAY
40487: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40488: LD_VAR 0 18
40492: NOT
40493: PUSH
40494: LD_INT 40
40496: PPUSH
40497: LD_VAR 0 16
40501: PPUSH
40502: CALL_OW 321
40506: PUSH
40507: LD_INT 2
40509: EQUAL
40510: AND
40511: PUSH
40512: LD_INT 7
40514: PUSH
40515: LD_VAR 0 5
40519: IN
40520: PUSH
40521: LD_INT 28
40523: PUSH
40524: LD_VAR 0 5
40528: IN
40529: OR
40530: PUSH
40531: LD_INT 45
40533: PUSH
40534: LD_VAR 0 5
40538: IN
40539: OR
40540: AND
40541: IFFALSE 40795
// begin hex := GetHexInfo ( x , y ) ;
40543: LD_ADDR_VAR 0 4
40547: PUSH
40548: LD_VAR 0 10
40552: PPUSH
40553: LD_VAR 0 11
40557: PPUSH
40558: CALL_OW 546
40562: ST_TO_ADDR
// if hex [ 1 ] then
40563: LD_VAR 0 4
40567: PUSH
40568: LD_INT 1
40570: ARRAY
40571: IFFALSE 40575
// exit ;
40573: GO 40978
// height := hex [ 2 ] ;
40575: LD_ADDR_VAR 0 15
40579: PUSH
40580: LD_VAR 0 4
40584: PUSH
40585: LD_INT 2
40587: ARRAY
40588: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40589: LD_ADDR_VAR 0 14
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: LD_INT 3
40602: PUSH
40603: LD_INT 5
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: ST_TO_ADDR
// for i in tmp do
40612: LD_ADDR_VAR 0 8
40616: PUSH
40617: LD_VAR 0 14
40621: PUSH
40622: FOR_IN
40623: IFFALSE 40793
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40625: LD_ADDR_VAR 0 9
40629: PUSH
40630: LD_VAR 0 10
40634: PPUSH
40635: LD_VAR 0 8
40639: PPUSH
40640: LD_INT 5
40642: PPUSH
40643: CALL_OW 272
40647: PUSH
40648: LD_VAR 0 11
40652: PPUSH
40653: LD_VAR 0 8
40657: PPUSH
40658: LD_INT 5
40660: PPUSH
40661: CALL_OW 273
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40670: LD_VAR 0 9
40674: PUSH
40675: LD_INT 1
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 9
40683: PUSH
40684: LD_INT 2
40686: ARRAY
40687: PPUSH
40688: CALL_OW 488
40692: IFFALSE 40791
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40694: LD_ADDR_VAR 0 4
40698: PUSH
40699: LD_VAR 0 9
40703: PUSH
40704: LD_INT 1
40706: ARRAY
40707: PPUSH
40708: LD_VAR 0 9
40712: PUSH
40713: LD_INT 2
40715: ARRAY
40716: PPUSH
40717: CALL_OW 546
40721: ST_TO_ADDR
// if hex [ 1 ] then
40722: LD_VAR 0 4
40726: PUSH
40727: LD_INT 1
40729: ARRAY
40730: IFFALSE 40734
// continue ;
40732: GO 40622
// h := hex [ 2 ] ;
40734: LD_ADDR_VAR 0 13
40738: PUSH
40739: LD_VAR 0 4
40743: PUSH
40744: LD_INT 2
40746: ARRAY
40747: ST_TO_ADDR
// if h + 7 < height then
40748: LD_VAR 0 13
40752: PUSH
40753: LD_INT 7
40755: PLUS
40756: PUSH
40757: LD_VAR 0 15
40761: LESS
40762: IFFALSE 40791
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40764: LD_ADDR_VAR 0 18
40768: PUSH
40769: LD_INT 7
40771: PUSH
40772: LD_INT 28
40774: PUSH
40775: LD_INT 45
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: PUSH
40783: LD_VAR 0 12
40787: ARRAY
40788: ST_TO_ADDR
// break ;
40789: GO 40793
// end ; end ; end ;
40791: GO 40622
40793: POP
40794: POP
// end ; if not weapon then
40795: LD_VAR 0 18
40799: NOT
40800: IFFALSE 40860
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: LD_VAR 0 5
40811: PUSH
40812: LD_INT 11
40814: PUSH
40815: LD_INT 30
40817: PUSH
40818: LD_INT 49
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: LIST
40825: DIFF
40826: ST_TO_ADDR
// if not list then
40827: LD_VAR 0 5
40831: NOT
40832: IFFALSE 40836
// exit ;
40834: GO 40978
// weapon := list [ rand ( 1 , list ) ] ;
40836: LD_ADDR_VAR 0 18
40840: PUSH
40841: LD_VAR 0 5
40845: PUSH
40846: LD_INT 1
40848: PPUSH
40849: LD_VAR 0 5
40853: PPUSH
40854: CALL_OW 12
40858: ARRAY
40859: ST_TO_ADDR
// end ; if weapon then
40860: LD_VAR 0 18
40864: IFFALSE 40978
// begin tmp := CostOfWeapon ( weapon ) ;
40866: LD_ADDR_VAR 0 14
40870: PUSH
40871: LD_VAR 0 18
40875: PPUSH
40876: CALL_OW 451
40880: ST_TO_ADDR
// j := GetBase ( tower ) ;
40881: LD_ADDR_VAR 0 9
40885: PUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 274
40895: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40896: LD_VAR 0 9
40900: PPUSH
40901: LD_INT 1
40903: PPUSH
40904: CALL_OW 275
40908: PUSH
40909: LD_VAR 0 14
40913: PUSH
40914: LD_INT 1
40916: ARRAY
40917: GREATEREQUAL
40918: PUSH
40919: LD_VAR 0 9
40923: PPUSH
40924: LD_INT 2
40926: PPUSH
40927: CALL_OW 275
40931: PUSH
40932: LD_VAR 0 14
40936: PUSH
40937: LD_INT 2
40939: ARRAY
40940: GREATEREQUAL
40941: AND
40942: PUSH
40943: LD_VAR 0 9
40947: PPUSH
40948: LD_INT 3
40950: PPUSH
40951: CALL_OW 275
40955: PUSH
40956: LD_VAR 0 14
40960: PUSH
40961: LD_INT 3
40963: ARRAY
40964: GREATEREQUAL
40965: AND
40966: IFFALSE 40978
// result := weapon ;
40968: LD_ADDR_VAR 0 3
40972: PUSH
40973: LD_VAR 0 18
40977: ST_TO_ADDR
// end ; end ;
40978: LD_VAR 0 3
40982: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40983: LD_INT 0
40985: PPUSH
40986: PPUSH
// result := true ;
40987: LD_ADDR_VAR 0 3
40991: PUSH
40992: LD_INT 1
40994: ST_TO_ADDR
// if array1 = array2 then
40995: LD_VAR 0 1
40999: PUSH
41000: LD_VAR 0 2
41004: EQUAL
41005: IFFALSE 41065
// begin for i = 1 to array1 do
41007: LD_ADDR_VAR 0 4
41011: PUSH
41012: DOUBLE
41013: LD_INT 1
41015: DEC
41016: ST_TO_ADDR
41017: LD_VAR 0 1
41021: PUSH
41022: FOR_TO
41023: IFFALSE 41061
// if array1 [ i ] <> array2 [ i ] then
41025: LD_VAR 0 1
41029: PUSH
41030: LD_VAR 0 4
41034: ARRAY
41035: PUSH
41036: LD_VAR 0 2
41040: PUSH
41041: LD_VAR 0 4
41045: ARRAY
41046: NONEQUAL
41047: IFFALSE 41059
// begin result := false ;
41049: LD_ADDR_VAR 0 3
41053: PUSH
41054: LD_INT 0
41056: ST_TO_ADDR
// break ;
41057: GO 41061
// end ;
41059: GO 41022
41061: POP
41062: POP
// end else
41063: GO 41073
// result := false ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_INT 0
41072: ST_TO_ADDR
// end ;
41073: LD_VAR 0 3
41077: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41078: LD_INT 0
41080: PPUSH
41081: PPUSH
// if not array1 or not array2 then
41082: LD_VAR 0 1
41086: NOT
41087: PUSH
41088: LD_VAR 0 2
41092: NOT
41093: OR
41094: IFFALSE 41098
// exit ;
41096: GO 41162
// result := true ;
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_INT 1
41105: ST_TO_ADDR
// for i = 1 to array1 do
41106: LD_ADDR_VAR 0 4
41110: PUSH
41111: DOUBLE
41112: LD_INT 1
41114: DEC
41115: ST_TO_ADDR
41116: LD_VAR 0 1
41120: PUSH
41121: FOR_TO
41122: IFFALSE 41160
// if array1 [ i ] <> array2 [ i ] then
41124: LD_VAR 0 1
41128: PUSH
41129: LD_VAR 0 4
41133: ARRAY
41134: PUSH
41135: LD_VAR 0 2
41139: PUSH
41140: LD_VAR 0 4
41144: ARRAY
41145: NONEQUAL
41146: IFFALSE 41158
// begin result := false ;
41148: LD_ADDR_VAR 0 3
41152: PUSH
41153: LD_INT 0
41155: ST_TO_ADDR
// break ;
41156: GO 41160
// end ;
41158: GO 41121
41160: POP
41161: POP
// end ;
41162: LD_VAR 0 3
41166: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41167: LD_INT 0
41169: PPUSH
41170: PPUSH
41171: PPUSH
// pom := GetBase ( fac ) ;
41172: LD_ADDR_VAR 0 5
41176: PUSH
41177: LD_VAR 0 1
41181: PPUSH
41182: CALL_OW 274
41186: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41187: LD_ADDR_VAR 0 4
41191: PUSH
41192: LD_VAR 0 2
41196: PUSH
41197: LD_INT 1
41199: ARRAY
41200: PPUSH
41201: LD_VAR 0 2
41205: PUSH
41206: LD_INT 2
41208: ARRAY
41209: PPUSH
41210: LD_VAR 0 2
41214: PUSH
41215: LD_INT 3
41217: ARRAY
41218: PPUSH
41219: LD_VAR 0 2
41223: PUSH
41224: LD_INT 4
41226: ARRAY
41227: PPUSH
41228: CALL_OW 449
41232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41233: LD_ADDR_VAR 0 3
41237: PUSH
41238: LD_VAR 0 5
41242: PPUSH
41243: LD_INT 1
41245: PPUSH
41246: CALL_OW 275
41250: PUSH
41251: LD_VAR 0 4
41255: PUSH
41256: LD_INT 1
41258: ARRAY
41259: GREATEREQUAL
41260: PUSH
41261: LD_VAR 0 5
41265: PPUSH
41266: LD_INT 2
41268: PPUSH
41269: CALL_OW 275
41273: PUSH
41274: LD_VAR 0 4
41278: PUSH
41279: LD_INT 2
41281: ARRAY
41282: GREATEREQUAL
41283: AND
41284: PUSH
41285: LD_VAR 0 5
41289: PPUSH
41290: LD_INT 3
41292: PPUSH
41293: CALL_OW 275
41297: PUSH
41298: LD_VAR 0 4
41302: PUSH
41303: LD_INT 3
41305: ARRAY
41306: GREATEREQUAL
41307: AND
41308: ST_TO_ADDR
// end ;
41309: LD_VAR 0 3
41313: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41314: LD_INT 0
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
// pom := GetBase ( building ) ;
41320: LD_ADDR_VAR 0 3
41324: PUSH
41325: LD_VAR 0 1
41329: PPUSH
41330: CALL_OW 274
41334: ST_TO_ADDR
// if not pom then
41335: LD_VAR 0 3
41339: NOT
41340: IFFALSE 41344
// exit ;
41342: GO 41514
// btype := GetBType ( building ) ;
41344: LD_ADDR_VAR 0 5
41348: PUSH
41349: LD_VAR 0 1
41353: PPUSH
41354: CALL_OW 266
41358: ST_TO_ADDR
// if btype = b_armoury then
41359: LD_VAR 0 5
41363: PUSH
41364: LD_INT 4
41366: EQUAL
41367: IFFALSE 41377
// btype := b_barracks ;
41369: LD_ADDR_VAR 0 5
41373: PUSH
41374: LD_INT 5
41376: ST_TO_ADDR
// if btype = b_depot then
41377: LD_VAR 0 5
41381: PUSH
41382: LD_INT 0
41384: EQUAL
41385: IFFALSE 41395
// btype := b_warehouse ;
41387: LD_ADDR_VAR 0 5
41391: PUSH
41392: LD_INT 1
41394: ST_TO_ADDR
// if btype = b_workshop then
41395: LD_VAR 0 5
41399: PUSH
41400: LD_INT 2
41402: EQUAL
41403: IFFALSE 41413
// btype := b_factory ;
41405: LD_ADDR_VAR 0 5
41409: PUSH
41410: LD_INT 3
41412: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41413: LD_ADDR_VAR 0 4
41417: PUSH
41418: LD_VAR 0 5
41422: PPUSH
41423: LD_VAR 0 1
41427: PPUSH
41428: CALL_OW 248
41432: PPUSH
41433: CALL_OW 450
41437: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41438: LD_ADDR_VAR 0 2
41442: PUSH
41443: LD_VAR 0 3
41447: PPUSH
41448: LD_INT 1
41450: PPUSH
41451: CALL_OW 275
41455: PUSH
41456: LD_VAR 0 4
41460: PUSH
41461: LD_INT 1
41463: ARRAY
41464: GREATEREQUAL
41465: PUSH
41466: LD_VAR 0 3
41470: PPUSH
41471: LD_INT 2
41473: PPUSH
41474: CALL_OW 275
41478: PUSH
41479: LD_VAR 0 4
41483: PUSH
41484: LD_INT 2
41486: ARRAY
41487: GREATEREQUAL
41488: AND
41489: PUSH
41490: LD_VAR 0 3
41494: PPUSH
41495: LD_INT 3
41497: PPUSH
41498: CALL_OW 275
41502: PUSH
41503: LD_VAR 0 4
41507: PUSH
41508: LD_INT 3
41510: ARRAY
41511: GREATEREQUAL
41512: AND
41513: ST_TO_ADDR
// end ;
41514: LD_VAR 0 2
41518: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41519: LD_INT 0
41521: PPUSH
41522: PPUSH
41523: PPUSH
// pom := GetBase ( building ) ;
41524: LD_ADDR_VAR 0 4
41528: PUSH
41529: LD_VAR 0 1
41533: PPUSH
41534: CALL_OW 274
41538: ST_TO_ADDR
// if not pom then
41539: LD_VAR 0 4
41543: NOT
41544: IFFALSE 41548
// exit ;
41546: GO 41649
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41548: LD_ADDR_VAR 0 5
41552: PUSH
41553: LD_VAR 0 2
41557: PPUSH
41558: LD_VAR 0 1
41562: PPUSH
41563: CALL_OW 248
41567: PPUSH
41568: CALL_OW 450
41572: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41573: LD_ADDR_VAR 0 3
41577: PUSH
41578: LD_VAR 0 4
41582: PPUSH
41583: LD_INT 1
41585: PPUSH
41586: CALL_OW 275
41590: PUSH
41591: LD_VAR 0 5
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: GREATEREQUAL
41600: PUSH
41601: LD_VAR 0 4
41605: PPUSH
41606: LD_INT 2
41608: PPUSH
41609: CALL_OW 275
41613: PUSH
41614: LD_VAR 0 5
41618: PUSH
41619: LD_INT 2
41621: ARRAY
41622: GREATEREQUAL
41623: AND
41624: PUSH
41625: LD_VAR 0 4
41629: PPUSH
41630: LD_INT 3
41632: PPUSH
41633: CALL_OW 275
41637: PUSH
41638: LD_VAR 0 5
41642: PUSH
41643: LD_INT 3
41645: ARRAY
41646: GREATEREQUAL
41647: AND
41648: ST_TO_ADDR
// end ;
41649: LD_VAR 0 3
41653: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41654: LD_INT 0
41656: PPUSH
41657: PPUSH
41658: PPUSH
41659: PPUSH
41660: PPUSH
41661: PPUSH
41662: PPUSH
41663: PPUSH
41664: PPUSH
41665: PPUSH
41666: PPUSH
// result := false ;
41667: LD_ADDR_VAR 0 8
41671: PUSH
41672: LD_INT 0
41674: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41675: LD_VAR 0 5
41679: NOT
41680: PUSH
41681: LD_VAR 0 1
41685: NOT
41686: OR
41687: PUSH
41688: LD_VAR 0 2
41692: NOT
41693: OR
41694: PUSH
41695: LD_VAR 0 3
41699: NOT
41700: OR
41701: IFFALSE 41705
// exit ;
41703: GO 42519
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41705: LD_ADDR_VAR 0 14
41709: PUSH
41710: LD_VAR 0 1
41714: PPUSH
41715: LD_VAR 0 2
41719: PPUSH
41720: LD_VAR 0 3
41724: PPUSH
41725: LD_VAR 0 4
41729: PPUSH
41730: LD_VAR 0 5
41734: PUSH
41735: LD_INT 1
41737: ARRAY
41738: PPUSH
41739: CALL_OW 248
41743: PPUSH
41744: LD_INT 0
41746: PPUSH
41747: CALL 43772 0 6
41751: ST_TO_ADDR
// if not hexes then
41752: LD_VAR 0 14
41756: NOT
41757: IFFALSE 41761
// exit ;
41759: GO 42519
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41761: LD_ADDR_VAR 0 17
41765: PUSH
41766: LD_VAR 0 5
41770: PPUSH
41771: LD_INT 22
41773: PUSH
41774: LD_VAR 0 13
41778: PPUSH
41779: CALL_OW 255
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 30
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 30
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PPUSH
41820: CALL_OW 72
41824: ST_TO_ADDR
// for i = 1 to hexes do
41825: LD_ADDR_VAR 0 9
41829: PUSH
41830: DOUBLE
41831: LD_INT 1
41833: DEC
41834: ST_TO_ADDR
41835: LD_VAR 0 14
41839: PUSH
41840: FOR_TO
41841: IFFALSE 42517
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41843: LD_ADDR_VAR 0 13
41847: PUSH
41848: LD_VAR 0 14
41852: PUSH
41853: LD_VAR 0 9
41857: ARRAY
41858: PUSH
41859: LD_INT 1
41861: ARRAY
41862: PPUSH
41863: LD_VAR 0 14
41867: PUSH
41868: LD_VAR 0 9
41872: ARRAY
41873: PUSH
41874: LD_INT 2
41876: ARRAY
41877: PPUSH
41878: CALL_OW 428
41882: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41883: LD_VAR 0 14
41887: PUSH
41888: LD_VAR 0 9
41892: ARRAY
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PPUSH
41898: LD_VAR 0 14
41902: PUSH
41903: LD_VAR 0 9
41907: ARRAY
41908: PUSH
41909: LD_INT 2
41911: ARRAY
41912: PPUSH
41913: CALL_OW 351
41917: PUSH
41918: LD_VAR 0 14
41922: PUSH
41923: LD_VAR 0 9
41927: ARRAY
41928: PUSH
41929: LD_INT 1
41931: ARRAY
41932: PPUSH
41933: LD_VAR 0 14
41937: PUSH
41938: LD_VAR 0 9
41942: ARRAY
41943: PUSH
41944: LD_INT 2
41946: ARRAY
41947: PPUSH
41948: CALL_OW 488
41952: NOT
41953: OR
41954: PUSH
41955: LD_VAR 0 13
41959: PPUSH
41960: CALL_OW 247
41964: PUSH
41965: LD_INT 3
41967: EQUAL
41968: OR
41969: IFFALSE 41975
// exit ;
41971: POP
41972: POP
41973: GO 42519
// if not tmp then
41975: LD_VAR 0 13
41979: NOT
41980: IFFALSE 41984
// continue ;
41982: GO 41840
// result := true ;
41984: LD_ADDR_VAR 0 8
41988: PUSH
41989: LD_INT 1
41991: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41992: LD_VAR 0 6
41996: PUSH
41997: LD_VAR 0 13
42001: PPUSH
42002: CALL_OW 247
42006: PUSH
42007: LD_INT 2
42009: EQUAL
42010: AND
42011: PUSH
42012: LD_VAR 0 13
42016: PPUSH
42017: CALL_OW 263
42021: PUSH
42022: LD_INT 1
42024: EQUAL
42025: AND
42026: IFFALSE 42190
// begin if IsDrivenBy ( tmp ) then
42028: LD_VAR 0 13
42032: PPUSH
42033: CALL_OW 311
42037: IFFALSE 42041
// continue ;
42039: GO 41840
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42041: LD_VAR 0 6
42045: PPUSH
42046: LD_INT 3
42048: PUSH
42049: LD_INT 60
42051: PUSH
42052: EMPTY
42053: LIST
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: LD_INT 55
42064: PUSH
42065: EMPTY
42066: LIST
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PPUSH
42076: CALL_OW 72
42080: IFFALSE 42188
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42082: LD_ADDR_VAR 0 18
42086: PUSH
42087: LD_VAR 0 6
42091: PPUSH
42092: LD_INT 3
42094: PUSH
42095: LD_INT 60
42097: PUSH
42098: EMPTY
42099: LIST
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 55
42110: PUSH
42111: EMPTY
42112: LIST
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PPUSH
42122: CALL_OW 72
42126: PUSH
42127: LD_INT 1
42129: ARRAY
42130: ST_TO_ADDR
// if IsInUnit ( driver ) then
42131: LD_VAR 0 18
42135: PPUSH
42136: CALL_OW 310
42140: IFFALSE 42151
// ComExit ( driver ) ;
42142: LD_VAR 0 18
42146: PPUSH
42147: CALL 67573 0 1
// AddComEnterUnit ( driver , tmp ) ;
42151: LD_VAR 0 18
42155: PPUSH
42156: LD_VAR 0 13
42160: PPUSH
42161: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42165: LD_VAR 0 18
42169: PPUSH
42170: LD_VAR 0 7
42174: PPUSH
42175: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42179: LD_VAR 0 18
42183: PPUSH
42184: CALL_OW 181
// end ; continue ;
42188: GO 41840
// end ; if not cleaners or not tmp in cleaners then
42190: LD_VAR 0 6
42194: NOT
42195: PUSH
42196: LD_VAR 0 13
42200: PUSH
42201: LD_VAR 0 6
42205: IN
42206: NOT
42207: OR
42208: IFFALSE 42515
// begin if dep then
42210: LD_VAR 0 17
42214: IFFALSE 42350
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42216: LD_ADDR_VAR 0 16
42220: PUSH
42221: LD_VAR 0 17
42225: PUSH
42226: LD_INT 1
42228: ARRAY
42229: PPUSH
42230: CALL_OW 250
42234: PPUSH
42235: LD_VAR 0 17
42239: PUSH
42240: LD_INT 1
42242: ARRAY
42243: PPUSH
42244: CALL_OW 254
42248: PPUSH
42249: LD_INT 5
42251: PPUSH
42252: CALL_OW 272
42256: PUSH
42257: LD_VAR 0 17
42261: PUSH
42262: LD_INT 1
42264: ARRAY
42265: PPUSH
42266: CALL_OW 251
42270: PPUSH
42271: LD_VAR 0 17
42275: PUSH
42276: LD_INT 1
42278: ARRAY
42279: PPUSH
42280: CALL_OW 254
42284: PPUSH
42285: LD_INT 5
42287: PPUSH
42288: CALL_OW 273
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42297: LD_VAR 0 16
42301: PUSH
42302: LD_INT 1
42304: ARRAY
42305: PPUSH
42306: LD_VAR 0 16
42310: PUSH
42311: LD_INT 2
42313: ARRAY
42314: PPUSH
42315: CALL_OW 488
42319: IFFALSE 42350
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42321: LD_VAR 0 13
42325: PPUSH
42326: LD_VAR 0 16
42330: PUSH
42331: LD_INT 1
42333: ARRAY
42334: PPUSH
42335: LD_VAR 0 16
42339: PUSH
42340: LD_INT 2
42342: ARRAY
42343: PPUSH
42344: CALL_OW 111
// continue ;
42348: GO 41840
// end ; end ; r := GetDir ( tmp ) ;
42350: LD_ADDR_VAR 0 15
42354: PUSH
42355: LD_VAR 0 13
42359: PPUSH
42360: CALL_OW 254
42364: ST_TO_ADDR
// if r = 5 then
42365: LD_VAR 0 15
42369: PUSH
42370: LD_INT 5
42372: EQUAL
42373: IFFALSE 42383
// r := 0 ;
42375: LD_ADDR_VAR 0 15
42379: PUSH
42380: LD_INT 0
42382: ST_TO_ADDR
// for j = r to 5 do
42383: LD_ADDR_VAR 0 10
42387: PUSH
42388: DOUBLE
42389: LD_VAR 0 15
42393: DEC
42394: ST_TO_ADDR
42395: LD_INT 5
42397: PUSH
42398: FOR_TO
42399: IFFALSE 42513
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42401: LD_ADDR_VAR 0 11
42405: PUSH
42406: LD_VAR 0 13
42410: PPUSH
42411: CALL_OW 250
42415: PPUSH
42416: LD_VAR 0 10
42420: PPUSH
42421: LD_INT 2
42423: PPUSH
42424: CALL_OW 272
42428: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42429: LD_ADDR_VAR 0 12
42433: PUSH
42434: LD_VAR 0 13
42438: PPUSH
42439: CALL_OW 251
42443: PPUSH
42444: LD_VAR 0 10
42448: PPUSH
42449: LD_INT 2
42451: PPUSH
42452: CALL_OW 273
42456: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42457: LD_VAR 0 11
42461: PPUSH
42462: LD_VAR 0 12
42466: PPUSH
42467: CALL_OW 488
42471: PUSH
42472: LD_VAR 0 11
42476: PPUSH
42477: LD_VAR 0 12
42481: PPUSH
42482: CALL_OW 428
42486: NOT
42487: AND
42488: IFFALSE 42511
// begin ComMoveXY ( tmp , _x , _y ) ;
42490: LD_VAR 0 13
42494: PPUSH
42495: LD_VAR 0 11
42499: PPUSH
42500: LD_VAR 0 12
42504: PPUSH
42505: CALL_OW 111
// break ;
42509: GO 42513
// end ; end ;
42511: GO 42398
42513: POP
42514: POP
// end ; end ;
42515: GO 41840
42517: POP
42518: POP
// end ;
42519: LD_VAR 0 8
42523: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42524: LD_INT 0
42526: PPUSH
// result := true ;
42527: LD_ADDR_VAR 0 3
42531: PUSH
42532: LD_INT 1
42534: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42535: LD_VAR 0 2
42539: PUSH
42540: LD_INT 24
42542: DOUBLE
42543: EQUAL
42544: IFTRUE 42554
42546: LD_INT 33
42548: DOUBLE
42549: EQUAL
42550: IFTRUE 42554
42552: GO 42579
42554: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42555: LD_ADDR_VAR 0 3
42559: PUSH
42560: LD_INT 32
42562: PPUSH
42563: LD_VAR 0 1
42567: PPUSH
42568: CALL_OW 321
42572: PUSH
42573: LD_INT 2
42575: EQUAL
42576: ST_TO_ADDR
42577: GO 42895
42579: LD_INT 20
42581: DOUBLE
42582: EQUAL
42583: IFTRUE 42587
42585: GO 42612
42587: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42588: LD_ADDR_VAR 0 3
42592: PUSH
42593: LD_INT 6
42595: PPUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 321
42605: PUSH
42606: LD_INT 2
42608: EQUAL
42609: ST_TO_ADDR
42610: GO 42895
42612: LD_INT 22
42614: DOUBLE
42615: EQUAL
42616: IFTRUE 42626
42618: LD_INT 36
42620: DOUBLE
42621: EQUAL
42622: IFTRUE 42626
42624: GO 42651
42626: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42627: LD_ADDR_VAR 0 3
42631: PUSH
42632: LD_INT 15
42634: PPUSH
42635: LD_VAR 0 1
42639: PPUSH
42640: CALL_OW 321
42644: PUSH
42645: LD_INT 2
42647: EQUAL
42648: ST_TO_ADDR
42649: GO 42895
42651: LD_INT 30
42653: DOUBLE
42654: EQUAL
42655: IFTRUE 42659
42657: GO 42684
42659: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42660: LD_ADDR_VAR 0 3
42664: PUSH
42665: LD_INT 20
42667: PPUSH
42668: LD_VAR 0 1
42672: PPUSH
42673: CALL_OW 321
42677: PUSH
42678: LD_INT 2
42680: EQUAL
42681: ST_TO_ADDR
42682: GO 42895
42684: LD_INT 28
42686: DOUBLE
42687: EQUAL
42688: IFTRUE 42698
42690: LD_INT 21
42692: DOUBLE
42693: EQUAL
42694: IFTRUE 42698
42696: GO 42723
42698: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42699: LD_ADDR_VAR 0 3
42703: PUSH
42704: LD_INT 21
42706: PPUSH
42707: LD_VAR 0 1
42711: PPUSH
42712: CALL_OW 321
42716: PUSH
42717: LD_INT 2
42719: EQUAL
42720: ST_TO_ADDR
42721: GO 42895
42723: LD_INT 16
42725: DOUBLE
42726: EQUAL
42727: IFTRUE 42731
42729: GO 42756
42731: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42732: LD_ADDR_VAR 0 3
42736: PUSH
42737: LD_INT 84
42739: PPUSH
42740: LD_VAR 0 1
42744: PPUSH
42745: CALL_OW 321
42749: PUSH
42750: LD_INT 2
42752: EQUAL
42753: ST_TO_ADDR
42754: GO 42895
42756: LD_INT 19
42758: DOUBLE
42759: EQUAL
42760: IFTRUE 42770
42762: LD_INT 23
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42770
42768: GO 42795
42770: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42771: LD_ADDR_VAR 0 3
42775: PUSH
42776: LD_INT 83
42778: PPUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: CALL_OW 321
42788: PUSH
42789: LD_INT 2
42791: EQUAL
42792: ST_TO_ADDR
42793: GO 42895
42795: LD_INT 17
42797: DOUBLE
42798: EQUAL
42799: IFTRUE 42803
42801: GO 42828
42803: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42804: LD_ADDR_VAR 0 3
42808: PUSH
42809: LD_INT 39
42811: PPUSH
42812: LD_VAR 0 1
42816: PPUSH
42817: CALL_OW 321
42821: PUSH
42822: LD_INT 2
42824: EQUAL
42825: ST_TO_ADDR
42826: GO 42895
42828: LD_INT 18
42830: DOUBLE
42831: EQUAL
42832: IFTRUE 42836
42834: GO 42861
42836: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42837: LD_ADDR_VAR 0 3
42841: PUSH
42842: LD_INT 40
42844: PPUSH
42845: LD_VAR 0 1
42849: PPUSH
42850: CALL_OW 321
42854: PUSH
42855: LD_INT 2
42857: EQUAL
42858: ST_TO_ADDR
42859: GO 42895
42861: LD_INT 27
42863: DOUBLE
42864: EQUAL
42865: IFTRUE 42869
42867: GO 42894
42869: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42870: LD_ADDR_VAR 0 3
42874: PUSH
42875: LD_INT 35
42877: PPUSH
42878: LD_VAR 0 1
42882: PPUSH
42883: CALL_OW 321
42887: PUSH
42888: LD_INT 2
42890: EQUAL
42891: ST_TO_ADDR
42892: GO 42895
42894: POP
// end ;
42895: LD_VAR 0 3
42899: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42900: LD_INT 0
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
42907: PPUSH
42908: PPUSH
42909: PPUSH
42910: PPUSH
42911: PPUSH
42912: PPUSH
// result := false ;
42913: LD_ADDR_VAR 0 6
42917: PUSH
42918: LD_INT 0
42920: ST_TO_ADDR
// if btype = b_depot then
42921: LD_VAR 0 2
42925: PUSH
42926: LD_INT 0
42928: EQUAL
42929: IFFALSE 42941
// begin result := true ;
42931: LD_ADDR_VAR 0 6
42935: PUSH
42936: LD_INT 1
42938: ST_TO_ADDR
// exit ;
42939: GO 43767
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42941: LD_VAR 0 1
42945: NOT
42946: PUSH
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 266
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: IN
42967: NOT
42968: OR
42969: PUSH
42970: LD_VAR 0 2
42974: NOT
42975: OR
42976: PUSH
42977: LD_VAR 0 5
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 1
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: LD_INT 3
42993: PUSH
42994: LD_INT 4
42996: PUSH
42997: LD_INT 5
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: IN
43008: NOT
43009: OR
43010: PUSH
43011: LD_VAR 0 3
43015: PPUSH
43016: LD_VAR 0 4
43020: PPUSH
43021: CALL_OW 488
43025: NOT
43026: OR
43027: IFFALSE 43031
// exit ;
43029: GO 43767
// side := GetSide ( depot ) ;
43031: LD_ADDR_VAR 0 9
43035: PUSH
43036: LD_VAR 0 1
43040: PPUSH
43041: CALL_OW 255
43045: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43046: LD_VAR 0 9
43050: PPUSH
43051: LD_VAR 0 2
43055: PPUSH
43056: CALL 42524 0 2
43060: NOT
43061: IFFALSE 43065
// exit ;
43063: GO 43767
// pom := GetBase ( depot ) ;
43065: LD_ADDR_VAR 0 10
43069: PUSH
43070: LD_VAR 0 1
43074: PPUSH
43075: CALL_OW 274
43079: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43080: LD_ADDR_VAR 0 11
43084: PUSH
43085: LD_VAR 0 2
43089: PPUSH
43090: LD_VAR 0 1
43094: PPUSH
43095: CALL_OW 248
43099: PPUSH
43100: CALL_OW 450
43104: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43105: LD_VAR 0 10
43109: PPUSH
43110: LD_INT 1
43112: PPUSH
43113: CALL_OW 275
43117: PUSH
43118: LD_VAR 0 11
43122: PUSH
43123: LD_INT 1
43125: ARRAY
43126: GREATEREQUAL
43127: PUSH
43128: LD_VAR 0 10
43132: PPUSH
43133: LD_INT 2
43135: PPUSH
43136: CALL_OW 275
43140: PUSH
43141: LD_VAR 0 11
43145: PUSH
43146: LD_INT 2
43148: ARRAY
43149: GREATEREQUAL
43150: AND
43151: PUSH
43152: LD_VAR 0 10
43156: PPUSH
43157: LD_INT 3
43159: PPUSH
43160: CALL_OW 275
43164: PUSH
43165: LD_VAR 0 11
43169: PUSH
43170: LD_INT 3
43172: ARRAY
43173: GREATEREQUAL
43174: AND
43175: NOT
43176: IFFALSE 43180
// exit ;
43178: GO 43767
// if GetBType ( depot ) = b_depot then
43180: LD_VAR 0 1
43184: PPUSH
43185: CALL_OW 266
43189: PUSH
43190: LD_INT 0
43192: EQUAL
43193: IFFALSE 43205
// dist := 28 else
43195: LD_ADDR_VAR 0 14
43199: PUSH
43200: LD_INT 28
43202: ST_TO_ADDR
43203: GO 43213
// dist := 36 ;
43205: LD_ADDR_VAR 0 14
43209: PUSH
43210: LD_INT 36
43212: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43213: LD_VAR 0 1
43217: PPUSH
43218: LD_VAR 0 3
43222: PPUSH
43223: LD_VAR 0 4
43227: PPUSH
43228: CALL_OW 297
43232: PUSH
43233: LD_VAR 0 14
43237: GREATER
43238: IFFALSE 43242
// exit ;
43240: GO 43767
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43242: LD_ADDR_VAR 0 12
43246: PUSH
43247: LD_VAR 0 2
43251: PPUSH
43252: LD_VAR 0 3
43256: PPUSH
43257: LD_VAR 0 4
43261: PPUSH
43262: LD_VAR 0 5
43266: PPUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 248
43276: PPUSH
43277: LD_INT 0
43279: PPUSH
43280: CALL 43772 0 6
43284: ST_TO_ADDR
// if not hexes then
43285: LD_VAR 0 12
43289: NOT
43290: IFFALSE 43294
// exit ;
43292: GO 43767
// hex := GetHexInfo ( x , y ) ;
43294: LD_ADDR_VAR 0 15
43298: PUSH
43299: LD_VAR 0 3
43303: PPUSH
43304: LD_VAR 0 4
43308: PPUSH
43309: CALL_OW 546
43313: ST_TO_ADDR
// if hex [ 1 ] then
43314: LD_VAR 0 15
43318: PUSH
43319: LD_INT 1
43321: ARRAY
43322: IFFALSE 43326
// exit ;
43324: GO 43767
// height := hex [ 2 ] ;
43326: LD_ADDR_VAR 0 13
43330: PUSH
43331: LD_VAR 0 15
43335: PUSH
43336: LD_INT 2
43338: ARRAY
43339: ST_TO_ADDR
// for i = 1 to hexes do
43340: LD_ADDR_VAR 0 7
43344: PUSH
43345: DOUBLE
43346: LD_INT 1
43348: DEC
43349: ST_TO_ADDR
43350: LD_VAR 0 12
43354: PUSH
43355: FOR_TO
43356: IFFALSE 43686
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43358: LD_VAR 0 12
43362: PUSH
43363: LD_VAR 0 7
43367: ARRAY
43368: PUSH
43369: LD_INT 1
43371: ARRAY
43372: PPUSH
43373: LD_VAR 0 12
43377: PUSH
43378: LD_VAR 0 7
43382: ARRAY
43383: PUSH
43384: LD_INT 2
43386: ARRAY
43387: PPUSH
43388: CALL_OW 488
43392: NOT
43393: PUSH
43394: LD_VAR 0 12
43398: PUSH
43399: LD_VAR 0 7
43403: ARRAY
43404: PUSH
43405: LD_INT 1
43407: ARRAY
43408: PPUSH
43409: LD_VAR 0 12
43413: PUSH
43414: LD_VAR 0 7
43418: ARRAY
43419: PUSH
43420: LD_INT 2
43422: ARRAY
43423: PPUSH
43424: CALL_OW 428
43428: PUSH
43429: LD_INT 0
43431: GREATER
43432: OR
43433: PUSH
43434: LD_VAR 0 12
43438: PUSH
43439: LD_VAR 0 7
43443: ARRAY
43444: PUSH
43445: LD_INT 1
43447: ARRAY
43448: PPUSH
43449: LD_VAR 0 12
43453: PUSH
43454: LD_VAR 0 7
43458: ARRAY
43459: PUSH
43460: LD_INT 2
43462: ARRAY
43463: PPUSH
43464: CALL_OW 351
43468: OR
43469: IFFALSE 43475
// exit ;
43471: POP
43472: POP
43473: GO 43767
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43475: LD_ADDR_VAR 0 8
43479: PUSH
43480: LD_VAR 0 12
43484: PUSH
43485: LD_VAR 0 7
43489: ARRAY
43490: PUSH
43491: LD_INT 1
43493: ARRAY
43494: PPUSH
43495: LD_VAR 0 12
43499: PUSH
43500: LD_VAR 0 7
43504: ARRAY
43505: PUSH
43506: LD_INT 2
43508: ARRAY
43509: PPUSH
43510: CALL_OW 546
43514: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43515: LD_VAR 0 8
43519: PUSH
43520: LD_INT 1
43522: ARRAY
43523: PUSH
43524: LD_VAR 0 8
43528: PUSH
43529: LD_INT 2
43531: ARRAY
43532: PUSH
43533: LD_VAR 0 13
43537: PUSH
43538: LD_INT 2
43540: PLUS
43541: GREATER
43542: OR
43543: PUSH
43544: LD_VAR 0 8
43548: PUSH
43549: LD_INT 2
43551: ARRAY
43552: PUSH
43553: LD_VAR 0 13
43557: PUSH
43558: LD_INT 2
43560: MINUS
43561: LESS
43562: OR
43563: PUSH
43564: LD_VAR 0 8
43568: PUSH
43569: LD_INT 3
43571: ARRAY
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 8
43578: PUSH
43579: LD_INT 9
43581: PUSH
43582: LD_INT 10
43584: PUSH
43585: LD_INT 11
43587: PUSH
43588: LD_INT 12
43590: PUSH
43591: LD_INT 13
43593: PUSH
43594: LD_INT 16
43596: PUSH
43597: LD_INT 17
43599: PUSH
43600: LD_INT 18
43602: PUSH
43603: LD_INT 19
43605: PUSH
43606: LD_INT 20
43608: PUSH
43609: LD_INT 21
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: IN
43627: NOT
43628: OR
43629: PUSH
43630: LD_VAR 0 8
43634: PUSH
43635: LD_INT 5
43637: ARRAY
43638: NOT
43639: OR
43640: PUSH
43641: LD_VAR 0 8
43645: PUSH
43646: LD_INT 6
43648: ARRAY
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 2
43655: PUSH
43656: LD_INT 7
43658: PUSH
43659: LD_INT 9
43661: PUSH
43662: LD_INT 10
43664: PUSH
43665: LD_INT 11
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: IN
43676: NOT
43677: OR
43678: IFFALSE 43684
// exit ;
43680: POP
43681: POP
43682: GO 43767
// end ;
43684: GO 43355
43686: POP
43687: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43688: LD_VAR 0 9
43692: PPUSH
43693: LD_VAR 0 3
43697: PPUSH
43698: LD_VAR 0 4
43702: PPUSH
43703: LD_INT 20
43705: PPUSH
43706: CALL 35690 0 4
43710: PUSH
43711: LD_INT 4
43713: ARRAY
43714: IFFALSE 43718
// exit ;
43716: GO 43767
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43718: LD_VAR 0 2
43722: PUSH
43723: LD_INT 29
43725: PUSH
43726: LD_INT 30
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: IN
43733: PUSH
43734: LD_VAR 0 3
43738: PPUSH
43739: LD_VAR 0 4
43743: PPUSH
43744: LD_VAR 0 9
43748: PPUSH
43749: CALL_OW 440
43753: NOT
43754: AND
43755: IFFALSE 43759
// exit ;
43757: GO 43767
// result := true ;
43759: LD_ADDR_VAR 0 6
43763: PUSH
43764: LD_INT 1
43766: ST_TO_ADDR
// end ;
43767: LD_VAR 0 6
43771: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43772: LD_INT 0
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
43782: PPUSH
43783: PPUSH
43784: PPUSH
43785: PPUSH
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
43792: PPUSH
43793: PPUSH
43794: PPUSH
43795: PPUSH
43796: PPUSH
43797: PPUSH
43798: PPUSH
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
43810: PPUSH
43811: PPUSH
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
43816: PPUSH
43817: PPUSH
43818: PPUSH
43819: PPUSH
43820: PPUSH
43821: PPUSH
43822: PPUSH
43823: PPUSH
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
43831: PPUSH
// result = [ ] ;
43832: LD_ADDR_VAR 0 7
43836: PUSH
43837: EMPTY
43838: ST_TO_ADDR
// temp_list = [ ] ;
43839: LD_ADDR_VAR 0 9
43843: PUSH
43844: EMPTY
43845: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43846: LD_VAR 0 4
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: LD_INT 4
43865: PUSH
43866: LD_INT 5
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: IN
43877: NOT
43878: PUSH
43879: LD_VAR 0 1
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: IN
43894: PUSH
43895: LD_VAR 0 5
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: LIST
43913: IN
43914: NOT
43915: AND
43916: OR
43917: IFFALSE 43921
// exit ;
43919: GO 62312
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43921: LD_VAR 0 1
43925: PUSH
43926: LD_INT 6
43928: PUSH
43929: LD_INT 7
43931: PUSH
43932: LD_INT 8
43934: PUSH
43935: LD_INT 13
43937: PUSH
43938: LD_INT 12
43940: PUSH
43941: LD_INT 15
43943: PUSH
43944: LD_INT 11
43946: PUSH
43947: LD_INT 14
43949: PUSH
43950: LD_INT 10
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: IN
43964: IFFALSE 43974
// btype = b_lab ;
43966: LD_ADDR_VAR 0 1
43970: PUSH
43971: LD_INT 6
43973: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43974: LD_VAR 0 6
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: IN
43993: NOT
43994: PUSH
43995: LD_VAR 0 1
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 3
44011: PUSH
44012: LD_INT 6
44014: PUSH
44015: LD_INT 36
44017: PUSH
44018: LD_INT 4
44020: PUSH
44021: LD_INT 5
44023: PUSH
44024: LD_INT 31
44026: PUSH
44027: LD_INT 32
44029: PUSH
44030: LD_INT 33
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: IN
44046: NOT
44047: PUSH
44048: LD_VAR 0 6
44052: PUSH
44053: LD_INT 1
44055: EQUAL
44056: AND
44057: OR
44058: PUSH
44059: LD_VAR 0 1
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 3
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: IN
44074: NOT
44075: PUSH
44076: LD_VAR 0 6
44080: PUSH
44081: LD_INT 2
44083: EQUAL
44084: AND
44085: OR
44086: IFFALSE 44096
// mode = 0 ;
44088: LD_ADDR_VAR 0 6
44092: PUSH
44093: LD_INT 0
44095: ST_TO_ADDR
// case mode of 0 :
44096: LD_VAR 0 6
44100: PUSH
44101: LD_INT 0
44103: DOUBLE
44104: EQUAL
44105: IFTRUE 44109
44107: GO 55562
44109: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44110: LD_ADDR_VAR 0 11
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 2
44195: NEG
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: LD_INT 2
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 1
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: LD_INT 3
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 3
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: LD_INT 2
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: EMPTY
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44303: LD_ADDR_VAR 0 12
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 2
44437: NEG
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 3
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 3
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44499: LD_ADDR_VAR 0 13
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: LD_INT 0
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 1
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: LD_INT 0
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: LD_INT 2
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 2
44622: NEG
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: LD_INT 3
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 3
44658: NEG
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 3
44670: NEG
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44698: LD_ADDR_VAR 0 14
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 0
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 2
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 3
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 3
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: PUSH
44868: LD_INT 2
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44894: LD_ADDR_VAR 0 15
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: LD_INT 1
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 0
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: LD_INT 0
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 3
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45087: LD_ADDR_VAR 0 16
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 1
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 3
45234: PUSH
45235: LD_INT 2
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: LD_INT 3
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: LD_INT 3
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45280: LD_ADDR_VAR 0 17
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 1
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 2
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: PUSH
45406: LD_INT 1
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 2
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 2
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: NEG
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: NEG
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: LD_INT 2
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45510: LD_ADDR_VAR 0 18
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 1
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: NEG
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 2
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 2
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 2
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 2
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45740: LD_ADDR_VAR 0 19
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 1
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 0
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: NEG
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: NEG
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 2
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45970: LD_ADDR_VAR 0 20
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: LD_INT 2
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 2
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46200: LD_ADDR_VAR 0 21
46204: PUSH
46205: LD_INT 0
46207: PUSH
46208: LD_INT 0
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 1
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 2
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 2
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 2
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: NEG
46388: PUSH
46389: LD_INT 1
46391: NEG
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46430: LD_ADDR_VAR 0 22
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 1
46511: NEG
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 1
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: LD_INT 1
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: LD_INT 2
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46660: LD_ADDR_VAR 0 23
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 2
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 2
46795: PUSH
46796: LD_INT 2
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 2
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 2
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 2
46847: NEG
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: NEG
46872: PUSH
46873: LD_INT 3
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 3
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46940: LD_ADDR_VAR 0 24
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 1
46998: NEG
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: LD_INT 2
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: LD_INT 0
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 3
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47216: LD_ADDR_VAR 0 25
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 1
47285: NEG
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: LD_INT 2
47301: NEG
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: LD_INT 1
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 3
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 3
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 3
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47490: LD_ADDR_VAR 0 26
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 0
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: LD_INT 2
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 0
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: NEG
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 2
47701: PUSH
47702: LD_INT 3
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: LD_INT 3
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 2
47732: NEG
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47766: LD_ADDR_VAR 0 27
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 0
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 2
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: LD_INT 2
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: NEG
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: NEG
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 3
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48046: LD_ADDR_VAR 0 28
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 2
48131: NEG
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: LD_INT 2
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: NEG
48246: PUSH
48247: LD_INT 2
48249: NEG
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 3
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 3
48281: NEG
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 3
48293: NEG
48294: PUSH
48295: LD_INT 2
48297: NEG
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48328: LD_ADDR_VAR 0 29
48332: PUSH
48333: LD_INT 0
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 2
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 2
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: LD_INT 2
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: NEG
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 2
48518: NEG
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 3
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 1
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: NEG
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48607: LD_ADDR_VAR 0 30
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: PUSH
48733: LD_INT 1
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 2
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: NEG
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 3
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 1
48808: PUSH
48809: LD_INT 2
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 3
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: LD_INT 3
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 2
48839: NEG
48840: PUSH
48841: LD_INT 1
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 3
48850: NEG
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48885: LD_ADDR_VAR 0 31
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 3
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: PUSH
49108: LD_INT 3
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: NEG
49129: PUSH
49130: LD_INT 2
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49163: LD_ADDR_VAR 0 32
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: NEG
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: LD_INT 1
49270: NEG
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 3
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: LD_INT 3
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 2
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49441: LD_ADDR_VAR 0 33
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 3
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 3
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 3
49685: NEG
49686: PUSH
49687: LD_INT 2
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49720: LD_ADDR_VAR 0 34
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 1
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 2
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 3
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 1
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: NEG
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50000: LD_ADDR_VAR 0 35
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50112: LD_ADDR_VAR 0 36
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 2
50197: NEG
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50224: LD_ADDR_VAR 0 37
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: LD_INT 1
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50336: LD_ADDR_VAR 0 38
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: NEG
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50448: LD_ADDR_VAR 0 39
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50560: LD_ADDR_VAR 0 40
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50672: LD_ADDR_VAR 0 41
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 1
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: NEG
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: LD_INT 3
50866: NEG
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 3
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 3
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: PUSH
50916: LD_INT 3
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 3
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: LD_INT 1
50961: NEG
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 3
50985: NEG
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51022: LD_ADDR_VAR 0 42
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 0
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 0
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 2
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 2
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: LD_INT 1
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 1
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 3
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: LD_INT 3
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 3
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 3
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 3
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 0
51298: PUSH
51299: LD_INT 3
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 1
51308: NEG
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: LD_INT 3
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51372: LD_ADDR_VAR 0 43
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 3
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: LD_INT 3
51576: NEG
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 3
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 3
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 3
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 3
51668: NEG
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51720: LD_ADDR_VAR 0 44
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 2
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 2
51875: NEG
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: LD_INT 2
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 3
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 3
51963: PUSH
51964: LD_INT 3
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 3
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: NEG
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 3
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: LD_INT 3
52033: NEG
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52070: LD_ADDR_VAR 0 45
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 0
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 0
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 2
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 2
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 0
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 3
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: LD_INT 3
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 3
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: LD_INT 2
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 3
52379: NEG
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52420: LD_ADDR_VAR 0 46
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 1
52478: NEG
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 1
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 3
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 3
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 3
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 3
52716: NEG
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52768: LD_ADDR_VAR 0 47
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 1
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: LD_INT 2
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: LD_INT 1
52875: NEG
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 2
52883: NEG
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: LD_INT 2
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52919: LD_ADDR_VAR 0 48
52923: PUSH
52924: LD_INT 0
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 0
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 1
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: LD_INT 2
53004: NEG
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53066: LD_ADDR_VAR 0 49
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: LD_INT 1
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 1
53124: NEG
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 1
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53210: LD_ADDR_VAR 0 50
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: NEG
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 2
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 2
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53354: LD_ADDR_VAR 0 51
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 2
53477: NEG
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53501: LD_ADDR_VAR 0 52
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: LD_INT 0
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: NEG
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 1
53594: NEG
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 2
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53652: LD_ADDR_VAR 0 53
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: NEG
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 2
53839: NEG
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53882: LD_ADDR_VAR 0 54
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: LD_INT 1
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 0
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: PUSH
53987: LD_INT 1
53989: NEG
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 2
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 2
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 2
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54112: LD_ADDR_VAR 0 55
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54342: LD_ADDR_VAR 0 56
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: LD_INT 0
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 1
54533: NEG
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 2
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54572: LD_ADDR_VAR 0 57
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: LD_INT 1
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: LD_INT 0
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 2
54759: NEG
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: NEG
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54802: LD_ADDR_VAR 0 58
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 1
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 2
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 2
55001: NEG
55002: PUSH
55003: LD_INT 2
55005: NEG
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55032: LD_ADDR_VAR 0 59
55036: PUSH
55037: LD_INT 0
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55120: LD_ADDR_VAR 0 60
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 1
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: LD_INT 1
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 0
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 1
55193: NEG
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55208: LD_ADDR_VAR 0 61
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: NEG
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55296: LD_ADDR_VAR 0 62
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 1
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55384: LD_ADDR_VAR 0 63
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55472: LD_ADDR_VAR 0 64
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: LD_INT 1
55492: NEG
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: ST_TO_ADDR
// end ; 1 :
55560: GO 61457
55562: LD_INT 1
55564: DOUBLE
55565: EQUAL
55566: IFTRUE 55570
55568: GO 58193
55570: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55571: LD_ADDR_VAR 0 11
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 3
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 2
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: LIST
55614: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55615: LD_ADDR_VAR 0 12
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 1
55625: NEG
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 3
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55656: LD_ADDR_VAR 0 13
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: LD_INT 2
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55696: LD_ADDR_VAR 0 14
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55737: LD_ADDR_VAR 0 15
55741: PUSH
55742: LD_INT 2
55744: NEG
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 3
55755: NEG
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 3
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: LIST
55780: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55781: LD_ADDR_VAR 0 16
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 3
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55827: LD_ADDR_VAR 0 17
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 3
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: LIST
55870: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55871: LD_ADDR_VAR 0 18
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55912: LD_ADDR_VAR 0 19
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55952: LD_ADDR_VAR 0 20
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55993: LD_ADDR_VAR 0 21
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56037: LD_ADDR_VAR 0 22
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56083: LD_ADDR_VAR 0 23
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 3
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 4
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 3
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56127: LD_ADDR_VAR 0 24
56131: PUSH
56132: LD_INT 3
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 3
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 4
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56168: LD_ADDR_VAR 0 25
56172: PUSH
56173: LD_INT 3
56175: PUSH
56176: LD_INT 3
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 4
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 3
56195: PUSH
56196: LD_INT 4
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56208: LD_ADDR_VAR 0 26
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 4
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56249: LD_ADDR_VAR 0 27
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 4
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56293: LD_ADDR_VAR 0 28
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: LD_INT 3
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: LD_INT 4
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: LD_INT 3
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56339: LD_ADDR_VAR 0 29
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: LD_INT 3
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 3
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 4
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 4
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: LD_INT 5
56418: NEG
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 5
56429: NEG
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: LD_INT 4
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 6
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 6
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: LD_INT 5
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56494: LD_ADDR_VAR 0 30
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: LD_INT 1
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 4
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 4
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 4
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 5
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 5
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 5
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 6
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 6
56615: PUSH
56616: LD_INT 1
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56637: LD_ADDR_VAR 0 31
56641: PUSH
56642: LD_INT 3
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 3
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 4
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 4
56684: PUSH
56685: LD_INT 4
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: PUSH
56695: LD_INT 4
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 5
56704: PUSH
56705: LD_INT 4
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 5
56714: PUSH
56715: LD_INT 5
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 4
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 6
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 6
56744: PUSH
56745: LD_INT 6
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 5
56754: PUSH
56755: LD_INT 6
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56776: LD_ADDR_VAR 0 32
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 3
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 1
56803: NEG
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: LD_INT 4
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 4
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 5
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: LD_INT 5
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 4
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 6
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: LD_INT 6
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: NEG
56897: PUSH
56898: LD_INT 5
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56919: LD_ADDR_VAR 0 33
56923: PUSH
56924: LD_INT 2
56926: NEG
56927: PUSH
56928: LD_INT 1
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: LD_INT 0
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 4
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 4
56994: NEG
56995: PUSH
56996: LD_INT 1
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 5
57005: NEG
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 5
57016: NEG
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 5
57028: NEG
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 6
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 6
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57074: LD_ADDR_VAR 0 34
57078: PUSH
57079: LD_INT 2
57081: NEG
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: LD_INT 2
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: LD_INT 3
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: LD_INT 4
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 4
57129: NEG
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 4
57141: NEG
57142: PUSH
57143: LD_INT 4
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 4
57153: NEG
57154: PUSH
57155: LD_INT 5
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 5
57165: NEG
57166: PUSH
57167: LD_INT 4
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 5
57177: NEG
57178: PUSH
57179: LD_INT 5
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 5
57189: NEG
57190: PUSH
57191: LD_INT 6
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 6
57201: NEG
57202: PUSH
57203: LD_INT 5
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 6
57213: NEG
57214: PUSH
57215: LD_INT 6
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57237: LD_ADDR_VAR 0 41
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57281: LD_ADDR_VAR 0 42
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 2
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 3
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: LIST
57321: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57322: LD_ADDR_VAR 0 43
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: LD_INT 3
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57362: LD_ADDR_VAR 0 44
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 2
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 1
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57403: LD_ADDR_VAR 0 45
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 0
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57447: LD_ADDR_VAR 0 46
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: LD_INT 3
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57493: LD_ADDR_VAR 0 47
57497: PUSH
57498: LD_INT 2
57500: NEG
57501: PUSH
57502: LD_INT 3
57504: NEG
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57526: LD_ADDR_VAR 0 48
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 2
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: LD_INT 1
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57557: LD_ADDR_VAR 0 49
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57586: LD_ADDR_VAR 0 50
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: LD_INT 3
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57615: LD_ADDR_VAR 0 51
57619: PUSH
57620: LD_INT 1
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57646: LD_ADDR_VAR 0 52
57650: PUSH
57651: LD_INT 3
57653: NEG
57654: PUSH
57655: LD_INT 1
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: NEG
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57679: LD_ADDR_VAR 0 53
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57723: LD_ADDR_VAR 0 54
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57764: LD_ADDR_VAR 0 55
57768: PUSH
57769: LD_INT 3
57771: PUSH
57772: LD_INT 2
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: PUSH
57782: LD_INT 3
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: LIST
57803: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57804: LD_ADDR_VAR 0 56
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 3
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 3
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: LIST
57844: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57845: LD_ADDR_VAR 0 57
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 3
57863: NEG
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57889: LD_ADDR_VAR 0 58
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: NEG
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57935: LD_ADDR_VAR 0 59
57939: PUSH
57940: LD_INT 1
57942: NEG
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: LD_INT 2
57957: NEG
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 1
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: LIST
57978: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57979: LD_ADDR_VAR 0 60
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 0
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58020: LD_ADDR_VAR 0 61
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: LIST
58059: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58060: LD_ADDR_VAR 0 62
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58101: LD_ADDR_VAR 0 63
58105: PUSH
58106: LD_INT 1
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58145: LD_ADDR_VAR 0 64
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 1
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: NEG
58177: PUSH
58178: LD_INT 2
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: LIST
58190: ST_TO_ADDR
// end ; 2 :
58191: GO 61457
58193: LD_INT 2
58195: DOUBLE
58196: EQUAL
58197: IFTRUE 58201
58199: GO 61456
58201: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58202: LD_ADDR_VAR 0 29
58206: PUSH
58207: LD_INT 4
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 4
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 5
58230: PUSH
58231: LD_INT 0
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 5
58240: PUSH
58241: LD_INT 1
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 4
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: LD_INT 0
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 3
58270: PUSH
58271: LD_INT 1
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 5
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: LD_INT 3
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 3
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 4
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: LD_INT 4
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 4
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 2
58382: PUSH
58383: LD_INT 4
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 4
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: LD_INT 4
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: LD_INT 5
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 5
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: LD_INT 4
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: NEG
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 5
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: NEG
58475: PUSH
58476: LD_INT 3
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 3
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 2
58508: NEG
58509: PUSH
58510: LD_INT 0
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: NEG
58520: PUSH
58521: LD_INT 1
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: NEG
58531: PUSH
58532: LD_INT 1
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 4
58541: NEG
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 4
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: LD_INT 2
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 4
58587: NEG
58588: PUSH
58589: LD_INT 4
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 4
58599: NEG
58600: PUSH
58601: LD_INT 5
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 3
58611: NEG
58612: PUSH
58613: LD_INT 4
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: LD_INT 3
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 4
58635: NEG
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 5
58647: NEG
58648: PUSH
58649: LD_INT 4
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 5
58659: NEG
58660: PUSH
58661: LD_INT 5
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: NEG
58672: PUSH
58673: LD_INT 5
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 5
58683: NEG
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58740: LD_ADDR_VAR 0 30
58744: PUSH
58745: LD_INT 4
58747: PUSH
58748: LD_INT 4
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 4
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 5
58767: PUSH
58768: LD_INT 4
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 5
58777: PUSH
58778: LD_INT 5
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: LD_INT 5
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: PUSH
58798: LD_INT 4
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 5
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: LD_INT 5
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 2
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 4
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 4
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 3
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: LD_INT 4
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 4
58930: NEG
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 4
58941: NEG
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 3
58964: NEG
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 4
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 5
58986: NEG
58987: PUSH
58988: LD_INT 0
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 5
58997: NEG
58998: PUSH
58999: LD_INT 1
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 5
59009: NEG
59010: PUSH
59011: LD_INT 2
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 3
59021: NEG
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 3
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 3
59044: NEG
59045: PUSH
59046: LD_INT 4
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 2
59068: NEG
59069: PUSH
59070: LD_INT 2
59072: NEG
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: NEG
59081: PUSH
59082: LD_INT 2
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 4
59092: NEG
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 4
59104: NEG
59105: PUSH
59106: LD_INT 4
59108: NEG
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: LD_INT 4
59120: NEG
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 4
59128: NEG
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 4
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 5
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: LD_INT 4
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: LD_INT 3
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 0
59184: PUSH
59185: LD_INT 3
59187: NEG
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: PUSH
59193: LD_INT 1
59195: NEG
59196: PUSH
59197: LD_INT 4
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: NEG
59208: PUSH
59209: LD_INT 5
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 2
59219: PUSH
59220: LD_INT 3
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: NEG
59231: PUSH
59232: LD_INT 5
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59287: LD_ADDR_VAR 0 31
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: LD_INT 4
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 3
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 5
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: LD_INT 5
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: LD_INT 4
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 3
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: LD_INT 5
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 2
59376: NEG
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 3
59387: NEG
59388: PUSH
59389: LD_INT 0
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 3
59398: NEG
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 2
59421: NEG
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: NEG
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 4
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 4
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 4
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: NEG
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 4
59489: NEG
59490: PUSH
59491: LD_INT 4
59493: NEG
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 4
59501: NEG
59502: PUSH
59503: LD_INT 5
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 3
59513: NEG
59514: PUSH
59515: LD_INT 4
59517: NEG
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: LD_INT 3
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 4
59537: NEG
59538: PUSH
59539: LD_INT 3
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 5
59549: NEG
59550: PUSH
59551: LD_INT 4
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 5
59561: NEG
59562: PUSH
59563: LD_INT 5
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 3
59573: NEG
59574: PUSH
59575: LD_INT 5
59577: NEG
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 5
59585: NEG
59586: PUSH
59587: LD_INT 3
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: LD_INT 3
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 4
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 2
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 3
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 4
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 2
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 2
59687: NEG
59688: PUSH
59689: LD_INT 4
59691: NEG
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 4
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 5
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 3
59760: PUSH
59761: LD_INT 1
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: LD_INT 2
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 5
59782: PUSH
59783: LD_INT 2
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59837: LD_ADDR_VAR 0 32
59841: PUSH
59842: LD_INT 4
59844: NEG
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 4
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 3
59867: NEG
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: LD_INT 1
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 4
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 5
59900: NEG
59901: PUSH
59902: LD_INT 0
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 5
59911: NEG
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 5
59923: NEG
59924: PUSH
59925: LD_INT 2
59927: NEG
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 3
59935: NEG
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: LD_INT 3
59950: NEG
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 3
59958: NEG
59959: PUSH
59960: LD_INT 4
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: LD_INT 3
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: NEG
59983: PUSH
59984: LD_INT 2
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 4
60018: NEG
60019: PUSH
60020: LD_INT 4
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: LD_INT 4
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 4
60042: NEG
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: LD_INT 4
60057: NEG
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: LD_INT 5
60068: NEG
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 1
60076: PUSH
60077: LD_INT 4
60079: NEG
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 0
60098: PUSH
60099: LD_INT 3
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: LD_INT 4
60113: NEG
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 5
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: LD_INT 3
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 5
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 2
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: LD_INT 2
60231: NEG
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 4
60239: PUSH
60240: LD_INT 2
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 4
60249: PUSH
60250: LD_INT 4
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 4
60259: PUSH
60260: LD_INT 3
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 5
60279: PUSH
60280: LD_INT 5
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 4
60289: PUSH
60290: LD_INT 5
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: LD_INT 3
60299: PUSH
60300: LD_INT 4
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 5
60319: PUSH
60320: LD_INT 3
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: LD_INT 5
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60384: LD_ADDR_VAR 0 33
60388: PUSH
60389: LD_INT 4
60391: NEG
60392: PUSH
60393: LD_INT 4
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: LD_INT 5
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 3
60415: NEG
60416: PUSH
60417: LD_INT 4
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 4
60439: NEG
60440: PUSH
60441: LD_INT 3
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 5
60451: NEG
60452: PUSH
60453: LD_INT 4
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 5
60463: NEG
60464: PUSH
60465: LD_INT 5
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: LD_INT 5
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 5
60487: NEG
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 0
60510: PUSH
60511: LD_INT 4
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 3
60524: NEG
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: LD_INT 2
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 2
60546: NEG
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: LD_INT 3
60558: NEG
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 4
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 2
60578: PUSH
60579: LD_INT 2
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 4
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 4
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 4
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 5
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 5
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 4
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 3
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 3
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 3
60673: PUSH
60674: LD_INT 2
60676: NEG
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: LD_INT 5
60684: PUSH
60685: LD_INT 2
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: PUSH
60695: LD_INT 3
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: PUSH
60705: LD_INT 2
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 4
60714: PUSH
60715: LD_INT 3
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 4
60724: PUSH
60725: LD_INT 4
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 3
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: PUSH
60765: LD_INT 2
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: PUSH
60775: LD_INT 4
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 4
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 3
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: LD_INT 4
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 5
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 5
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 4
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: LD_INT 5
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 2
60866: NEG
60867: PUSH
60868: LD_INT 3
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60922: LD_ADDR_VAR 0 34
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: LD_INT 5
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 1
60951: PUSH
60952: LD_INT 4
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 3
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 4
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 5
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 3
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: LD_INT 5
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 4
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 4
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: PUSH
61104: LD_INT 2
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 4
61114: PUSH
61115: LD_INT 2
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 4
61124: PUSH
61125: LD_INT 4
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 4
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 5
61144: PUSH
61145: LD_INT 4
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 5
61154: PUSH
61155: LD_INT 5
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 4
61164: PUSH
61165: LD_INT 5
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: LD_INT 4
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: PUSH
61185: LD_INT 3
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 5
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: LD_INT 5
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 3
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 3
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: LD_INT 4
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: LD_INT 4
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 1
61275: NEG
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: LD_INT 4
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 2
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 4
61307: NEG
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 4
61318: NEG
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 4
61352: NEG
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 5
61363: NEG
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 5
61374: NEG
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 5
61386: NEG
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: LIST
61421: LIST
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// end ; end ;
61454: GO 61457
61456: POP
// case btype of b_depot , b_warehouse :
61457: LD_VAR 0 1
61461: PUSH
61462: LD_INT 0
61464: DOUBLE
61465: EQUAL
61466: IFTRUE 61476
61468: LD_INT 1
61470: DOUBLE
61471: EQUAL
61472: IFTRUE 61476
61474: GO 61677
61476: POP
// case nation of nation_american :
61477: LD_VAR 0 5
61481: PUSH
61482: LD_INT 1
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61490
61488: GO 61546
61490: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61491: LD_ADDR_VAR 0 9
61495: PUSH
61496: LD_VAR 0 11
61500: PUSH
61501: LD_VAR 0 12
61505: PUSH
61506: LD_VAR 0 13
61510: PUSH
61511: LD_VAR 0 14
61515: PUSH
61516: LD_VAR 0 15
61520: PUSH
61521: LD_VAR 0 16
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: PUSH
61534: LD_VAR 0 4
61538: PUSH
61539: LD_INT 1
61541: PLUS
61542: ARRAY
61543: ST_TO_ADDR
61544: GO 61675
61546: LD_INT 2
61548: DOUBLE
61549: EQUAL
61550: IFTRUE 61554
61552: GO 61610
61554: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61555: LD_ADDR_VAR 0 9
61559: PUSH
61560: LD_VAR 0 17
61564: PUSH
61565: LD_VAR 0 18
61569: PUSH
61570: LD_VAR 0 19
61574: PUSH
61575: LD_VAR 0 20
61579: PUSH
61580: LD_VAR 0 21
61584: PUSH
61585: LD_VAR 0 22
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: PUSH
61598: LD_VAR 0 4
61602: PUSH
61603: LD_INT 1
61605: PLUS
61606: ARRAY
61607: ST_TO_ADDR
61608: GO 61675
61610: LD_INT 3
61612: DOUBLE
61613: EQUAL
61614: IFTRUE 61618
61616: GO 61674
61618: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61619: LD_ADDR_VAR 0 9
61623: PUSH
61624: LD_VAR 0 23
61628: PUSH
61629: LD_VAR 0 24
61633: PUSH
61634: LD_VAR 0 25
61638: PUSH
61639: LD_VAR 0 26
61643: PUSH
61644: LD_VAR 0 27
61648: PUSH
61649: LD_VAR 0 28
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: PUSH
61662: LD_VAR 0 4
61666: PUSH
61667: LD_INT 1
61669: PLUS
61670: ARRAY
61671: ST_TO_ADDR
61672: GO 61675
61674: POP
61675: GO 62230
61677: LD_INT 2
61679: DOUBLE
61680: EQUAL
61681: IFTRUE 61691
61683: LD_INT 3
61685: DOUBLE
61686: EQUAL
61687: IFTRUE 61691
61689: GO 61747
61691: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61692: LD_ADDR_VAR 0 9
61696: PUSH
61697: LD_VAR 0 29
61701: PUSH
61702: LD_VAR 0 30
61706: PUSH
61707: LD_VAR 0 31
61711: PUSH
61712: LD_VAR 0 32
61716: PUSH
61717: LD_VAR 0 33
61721: PUSH
61722: LD_VAR 0 34
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: PUSH
61735: LD_VAR 0 4
61739: PUSH
61740: LD_INT 1
61742: PLUS
61743: ARRAY
61744: ST_TO_ADDR
61745: GO 62230
61747: LD_INT 16
61749: DOUBLE
61750: EQUAL
61751: IFTRUE 61809
61753: LD_INT 17
61755: DOUBLE
61756: EQUAL
61757: IFTRUE 61809
61759: LD_INT 18
61761: DOUBLE
61762: EQUAL
61763: IFTRUE 61809
61765: LD_INT 19
61767: DOUBLE
61768: EQUAL
61769: IFTRUE 61809
61771: LD_INT 22
61773: DOUBLE
61774: EQUAL
61775: IFTRUE 61809
61777: LD_INT 20
61779: DOUBLE
61780: EQUAL
61781: IFTRUE 61809
61783: LD_INT 21
61785: DOUBLE
61786: EQUAL
61787: IFTRUE 61809
61789: LD_INT 23
61791: DOUBLE
61792: EQUAL
61793: IFTRUE 61809
61795: LD_INT 24
61797: DOUBLE
61798: EQUAL
61799: IFTRUE 61809
61801: LD_INT 25
61803: DOUBLE
61804: EQUAL
61805: IFTRUE 61809
61807: GO 61865
61809: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61810: LD_ADDR_VAR 0 9
61814: PUSH
61815: LD_VAR 0 35
61819: PUSH
61820: LD_VAR 0 36
61824: PUSH
61825: LD_VAR 0 37
61829: PUSH
61830: LD_VAR 0 38
61834: PUSH
61835: LD_VAR 0 39
61839: PUSH
61840: LD_VAR 0 40
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: PUSH
61853: LD_VAR 0 4
61857: PUSH
61858: LD_INT 1
61860: PLUS
61861: ARRAY
61862: ST_TO_ADDR
61863: GO 62230
61865: LD_INT 6
61867: DOUBLE
61868: EQUAL
61869: IFTRUE 61921
61871: LD_INT 7
61873: DOUBLE
61874: EQUAL
61875: IFTRUE 61921
61877: LD_INT 8
61879: DOUBLE
61880: EQUAL
61881: IFTRUE 61921
61883: LD_INT 13
61885: DOUBLE
61886: EQUAL
61887: IFTRUE 61921
61889: LD_INT 12
61891: DOUBLE
61892: EQUAL
61893: IFTRUE 61921
61895: LD_INT 15
61897: DOUBLE
61898: EQUAL
61899: IFTRUE 61921
61901: LD_INT 11
61903: DOUBLE
61904: EQUAL
61905: IFTRUE 61921
61907: LD_INT 14
61909: DOUBLE
61910: EQUAL
61911: IFTRUE 61921
61913: LD_INT 10
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61921
61919: GO 61977
61921: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61922: LD_ADDR_VAR 0 9
61926: PUSH
61927: LD_VAR 0 41
61931: PUSH
61932: LD_VAR 0 42
61936: PUSH
61937: LD_VAR 0 43
61941: PUSH
61942: LD_VAR 0 44
61946: PUSH
61947: LD_VAR 0 45
61951: PUSH
61952: LD_VAR 0 46
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: PUSH
61965: LD_VAR 0 4
61969: PUSH
61970: LD_INT 1
61972: PLUS
61973: ARRAY
61974: ST_TO_ADDR
61975: GO 62230
61977: LD_INT 36
61979: DOUBLE
61980: EQUAL
61981: IFTRUE 61985
61983: GO 62041
61985: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61986: LD_ADDR_VAR 0 9
61990: PUSH
61991: LD_VAR 0 47
61995: PUSH
61996: LD_VAR 0 48
62000: PUSH
62001: LD_VAR 0 49
62005: PUSH
62006: LD_VAR 0 50
62010: PUSH
62011: LD_VAR 0 51
62015: PUSH
62016: LD_VAR 0 52
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: PUSH
62029: LD_VAR 0 4
62033: PUSH
62034: LD_INT 1
62036: PLUS
62037: ARRAY
62038: ST_TO_ADDR
62039: GO 62230
62041: LD_INT 4
62043: DOUBLE
62044: EQUAL
62045: IFTRUE 62067
62047: LD_INT 5
62049: DOUBLE
62050: EQUAL
62051: IFTRUE 62067
62053: LD_INT 34
62055: DOUBLE
62056: EQUAL
62057: IFTRUE 62067
62059: LD_INT 37
62061: DOUBLE
62062: EQUAL
62063: IFTRUE 62067
62065: GO 62123
62067: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62068: LD_ADDR_VAR 0 9
62072: PUSH
62073: LD_VAR 0 53
62077: PUSH
62078: LD_VAR 0 54
62082: PUSH
62083: LD_VAR 0 55
62087: PUSH
62088: LD_VAR 0 56
62092: PUSH
62093: LD_VAR 0 57
62097: PUSH
62098: LD_VAR 0 58
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: PUSH
62111: LD_VAR 0 4
62115: PUSH
62116: LD_INT 1
62118: PLUS
62119: ARRAY
62120: ST_TO_ADDR
62121: GO 62230
62123: LD_INT 31
62125: DOUBLE
62126: EQUAL
62127: IFTRUE 62173
62129: LD_INT 32
62131: DOUBLE
62132: EQUAL
62133: IFTRUE 62173
62135: LD_INT 33
62137: DOUBLE
62138: EQUAL
62139: IFTRUE 62173
62141: LD_INT 27
62143: DOUBLE
62144: EQUAL
62145: IFTRUE 62173
62147: LD_INT 26
62149: DOUBLE
62150: EQUAL
62151: IFTRUE 62173
62153: LD_INT 28
62155: DOUBLE
62156: EQUAL
62157: IFTRUE 62173
62159: LD_INT 29
62161: DOUBLE
62162: EQUAL
62163: IFTRUE 62173
62165: LD_INT 30
62167: DOUBLE
62168: EQUAL
62169: IFTRUE 62173
62171: GO 62229
62173: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62174: LD_ADDR_VAR 0 9
62178: PUSH
62179: LD_VAR 0 59
62183: PUSH
62184: LD_VAR 0 60
62188: PUSH
62189: LD_VAR 0 61
62193: PUSH
62194: LD_VAR 0 62
62198: PUSH
62199: LD_VAR 0 63
62203: PUSH
62204: LD_VAR 0 64
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: PUSH
62217: LD_VAR 0 4
62221: PUSH
62222: LD_INT 1
62224: PLUS
62225: ARRAY
62226: ST_TO_ADDR
62227: GO 62230
62229: POP
// temp_list2 = [ ] ;
62230: LD_ADDR_VAR 0 10
62234: PUSH
62235: EMPTY
62236: ST_TO_ADDR
// for i in temp_list do
62237: LD_ADDR_VAR 0 8
62241: PUSH
62242: LD_VAR 0 9
62246: PUSH
62247: FOR_IN
62248: IFFALSE 62300
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62250: LD_ADDR_VAR 0 10
62254: PUSH
62255: LD_VAR 0 10
62259: PUSH
62260: LD_VAR 0 8
62264: PUSH
62265: LD_INT 1
62267: ARRAY
62268: PUSH
62269: LD_VAR 0 2
62273: PLUS
62274: PUSH
62275: LD_VAR 0 8
62279: PUSH
62280: LD_INT 2
62282: ARRAY
62283: PUSH
62284: LD_VAR 0 3
62288: PLUS
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: EMPTY
62295: LIST
62296: ADD
62297: ST_TO_ADDR
62298: GO 62247
62300: POP
62301: POP
// result = temp_list2 ;
62302: LD_ADDR_VAR 0 7
62306: PUSH
62307: LD_VAR 0 10
62311: ST_TO_ADDR
// end ;
62312: LD_VAR 0 7
62316: RET
// export function EnemyInRange ( unit , dist ) ; begin
62317: LD_INT 0
62319: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62320: LD_ADDR_VAR 0 3
62324: PUSH
62325: LD_VAR 0 1
62329: PPUSH
62330: CALL_OW 255
62334: PPUSH
62335: LD_VAR 0 1
62339: PPUSH
62340: CALL_OW 250
62344: PPUSH
62345: LD_VAR 0 1
62349: PPUSH
62350: CALL_OW 251
62354: PPUSH
62355: LD_VAR 0 2
62359: PPUSH
62360: CALL 35690 0 4
62364: PUSH
62365: LD_INT 4
62367: ARRAY
62368: ST_TO_ADDR
// end ;
62369: LD_VAR 0 3
62373: RET
// export function PlayerSeeMe ( unit ) ; begin
62374: LD_INT 0
62376: PPUSH
// result := See ( your_side , unit ) ;
62377: LD_ADDR_VAR 0 2
62381: PUSH
62382: LD_OWVAR 2
62386: PPUSH
62387: LD_VAR 0 1
62391: PPUSH
62392: CALL_OW 292
62396: ST_TO_ADDR
// end ;
62397: LD_VAR 0 2
62401: RET
// export function ReverseDir ( unit ) ; begin
62402: LD_INT 0
62404: PPUSH
// if not unit then
62405: LD_VAR 0 1
62409: NOT
62410: IFFALSE 62414
// exit ;
62412: GO 62437
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62414: LD_ADDR_VAR 0 2
62418: PUSH
62419: LD_VAR 0 1
62423: PPUSH
62424: CALL_OW 254
62428: PUSH
62429: LD_INT 3
62431: PLUS
62432: PUSH
62433: LD_INT 6
62435: MOD
62436: ST_TO_ADDR
// end ;
62437: LD_VAR 0 2
62441: RET
// export function ReverseArray ( array ) ; var i ; begin
62442: LD_INT 0
62444: PPUSH
62445: PPUSH
// if not array then
62446: LD_VAR 0 1
62450: NOT
62451: IFFALSE 62455
// exit ;
62453: GO 62510
// result := [ ] ;
62455: LD_ADDR_VAR 0 2
62459: PUSH
62460: EMPTY
62461: ST_TO_ADDR
// for i := array downto 1 do
62462: LD_ADDR_VAR 0 3
62466: PUSH
62467: DOUBLE
62468: LD_VAR 0 1
62472: INC
62473: ST_TO_ADDR
62474: LD_INT 1
62476: PUSH
62477: FOR_DOWNTO
62478: IFFALSE 62508
// result := Join ( result , array [ i ] ) ;
62480: LD_ADDR_VAR 0 2
62484: PUSH
62485: LD_VAR 0 2
62489: PPUSH
62490: LD_VAR 0 1
62494: PUSH
62495: LD_VAR 0 3
62499: ARRAY
62500: PPUSH
62501: CALL 67175 0 2
62505: ST_TO_ADDR
62506: GO 62477
62508: POP
62509: POP
// end ;
62510: LD_VAR 0 2
62514: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62515: LD_INT 0
62517: PPUSH
62518: PPUSH
62519: PPUSH
62520: PPUSH
62521: PPUSH
62522: PPUSH
// if not unit or not hexes then
62523: LD_VAR 0 1
62527: NOT
62528: PUSH
62529: LD_VAR 0 2
62533: NOT
62534: OR
62535: IFFALSE 62539
// exit ;
62537: GO 62662
// dist := 9999 ;
62539: LD_ADDR_VAR 0 5
62543: PUSH
62544: LD_INT 9999
62546: ST_TO_ADDR
// for i = 1 to hexes do
62547: LD_ADDR_VAR 0 4
62551: PUSH
62552: DOUBLE
62553: LD_INT 1
62555: DEC
62556: ST_TO_ADDR
62557: LD_VAR 0 2
62561: PUSH
62562: FOR_TO
62563: IFFALSE 62650
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62565: LD_ADDR_VAR 0 6
62569: PUSH
62570: LD_VAR 0 1
62574: PPUSH
62575: LD_VAR 0 2
62579: PUSH
62580: LD_VAR 0 4
62584: ARRAY
62585: PUSH
62586: LD_INT 1
62588: ARRAY
62589: PPUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_VAR 0 4
62599: ARRAY
62600: PUSH
62601: LD_INT 2
62603: ARRAY
62604: PPUSH
62605: CALL_OW 297
62609: ST_TO_ADDR
// if tdist < dist then
62610: LD_VAR 0 6
62614: PUSH
62615: LD_VAR 0 5
62619: LESS
62620: IFFALSE 62648
// begin hex := hexes [ i ] ;
62622: LD_ADDR_VAR 0 8
62626: PUSH
62627: LD_VAR 0 2
62631: PUSH
62632: LD_VAR 0 4
62636: ARRAY
62637: ST_TO_ADDR
// dist := tdist ;
62638: LD_ADDR_VAR 0 5
62642: PUSH
62643: LD_VAR 0 6
62647: ST_TO_ADDR
// end ; end ;
62648: GO 62562
62650: POP
62651: POP
// result := hex ;
62652: LD_ADDR_VAR 0 3
62656: PUSH
62657: LD_VAR 0 8
62661: ST_TO_ADDR
// end ;
62662: LD_VAR 0 3
62666: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62667: LD_INT 0
62669: PPUSH
62670: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62671: LD_VAR 0 1
62675: NOT
62676: PUSH
62677: LD_VAR 0 1
62681: PUSH
62682: LD_INT 21
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 23
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PPUSH
62706: CALL_OW 69
62710: IN
62711: NOT
62712: OR
62713: IFFALSE 62717
// exit ;
62715: GO 62764
// for i = 1 to 3 do
62717: LD_ADDR_VAR 0 3
62721: PUSH
62722: DOUBLE
62723: LD_INT 1
62725: DEC
62726: ST_TO_ADDR
62727: LD_INT 3
62729: PUSH
62730: FOR_TO
62731: IFFALSE 62762
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62733: LD_VAR 0 1
62737: PPUSH
62738: CALL_OW 250
62742: PPUSH
62743: LD_VAR 0 1
62747: PPUSH
62748: CALL_OW 251
62752: PPUSH
62753: LD_INT 1
62755: PPUSH
62756: CALL_OW 453
62760: GO 62730
62762: POP
62763: POP
// end ;
62764: LD_VAR 0 2
62768: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62769: LD_INT 0
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
62775: PPUSH
62776: PPUSH
// if not unit or not enemy_unit then
62777: LD_VAR 0 1
62781: NOT
62782: PUSH
62783: LD_VAR 0 2
62787: NOT
62788: OR
62789: IFFALSE 62793
// exit ;
62791: GO 63260
// if GetLives ( i ) < 250 then
62793: LD_VAR 0 4
62797: PPUSH
62798: CALL_OW 256
62802: PUSH
62803: LD_INT 250
62805: LESS
62806: IFFALSE 62819
// begin ComAutodestruct ( i ) ;
62808: LD_VAR 0 4
62812: PPUSH
62813: CALL 62667 0 1
// exit ;
62817: GO 63260
// end ; x := GetX ( enemy_unit ) ;
62819: LD_ADDR_VAR 0 7
62823: PUSH
62824: LD_VAR 0 2
62828: PPUSH
62829: CALL_OW 250
62833: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62834: LD_ADDR_VAR 0 8
62838: PUSH
62839: LD_VAR 0 2
62843: PPUSH
62844: CALL_OW 251
62848: ST_TO_ADDR
// if not x or not y then
62849: LD_VAR 0 7
62853: NOT
62854: PUSH
62855: LD_VAR 0 8
62859: NOT
62860: OR
62861: IFFALSE 62865
// exit ;
62863: GO 63260
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62865: LD_ADDR_VAR 0 6
62869: PUSH
62870: LD_VAR 0 7
62874: PPUSH
62875: LD_INT 0
62877: PPUSH
62878: LD_INT 4
62880: PPUSH
62881: CALL_OW 272
62885: PUSH
62886: LD_VAR 0 8
62890: PPUSH
62891: LD_INT 0
62893: PPUSH
62894: LD_INT 4
62896: PPUSH
62897: CALL_OW 273
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_VAR 0 7
62910: PPUSH
62911: LD_INT 1
62913: PPUSH
62914: LD_INT 4
62916: PPUSH
62917: CALL_OW 272
62921: PUSH
62922: LD_VAR 0 8
62926: PPUSH
62927: LD_INT 1
62929: PPUSH
62930: LD_INT 4
62932: PPUSH
62933: CALL_OW 273
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_VAR 0 7
62946: PPUSH
62947: LD_INT 2
62949: PPUSH
62950: LD_INT 4
62952: PPUSH
62953: CALL_OW 272
62957: PUSH
62958: LD_VAR 0 8
62962: PPUSH
62963: LD_INT 2
62965: PPUSH
62966: LD_INT 4
62968: PPUSH
62969: CALL_OW 273
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_VAR 0 7
62982: PPUSH
62983: LD_INT 3
62985: PPUSH
62986: LD_INT 4
62988: PPUSH
62989: CALL_OW 272
62993: PUSH
62994: LD_VAR 0 8
62998: PPUSH
62999: LD_INT 3
63001: PPUSH
63002: LD_INT 4
63004: PPUSH
63005: CALL_OW 273
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_VAR 0 7
63018: PPUSH
63019: LD_INT 4
63021: PPUSH
63022: LD_INT 4
63024: PPUSH
63025: CALL_OW 272
63029: PUSH
63030: LD_VAR 0 8
63034: PPUSH
63035: LD_INT 4
63037: PPUSH
63038: LD_INT 4
63040: PPUSH
63041: CALL_OW 273
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 7
63054: PPUSH
63055: LD_INT 5
63057: PPUSH
63058: LD_INT 4
63060: PPUSH
63061: CALL_OW 272
63065: PUSH
63066: LD_VAR 0 8
63070: PPUSH
63071: LD_INT 5
63073: PPUSH
63074: LD_INT 4
63076: PPUSH
63077: CALL_OW 273
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: ST_TO_ADDR
// for i = tmp downto 1 do
63094: LD_ADDR_VAR 0 4
63098: PUSH
63099: DOUBLE
63100: LD_VAR 0 6
63104: INC
63105: ST_TO_ADDR
63106: LD_INT 1
63108: PUSH
63109: FOR_DOWNTO
63110: IFFALSE 63211
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63112: LD_VAR 0 6
63116: PUSH
63117: LD_VAR 0 4
63121: ARRAY
63122: PUSH
63123: LD_INT 1
63125: ARRAY
63126: PPUSH
63127: LD_VAR 0 6
63131: PUSH
63132: LD_VAR 0 4
63136: ARRAY
63137: PUSH
63138: LD_INT 2
63140: ARRAY
63141: PPUSH
63142: CALL_OW 488
63146: NOT
63147: PUSH
63148: LD_VAR 0 6
63152: PUSH
63153: LD_VAR 0 4
63157: ARRAY
63158: PUSH
63159: LD_INT 1
63161: ARRAY
63162: PPUSH
63163: LD_VAR 0 6
63167: PUSH
63168: LD_VAR 0 4
63172: ARRAY
63173: PUSH
63174: LD_INT 2
63176: ARRAY
63177: PPUSH
63178: CALL_OW 428
63182: PUSH
63183: LD_INT 0
63185: NONEQUAL
63186: OR
63187: IFFALSE 63209
// tmp := Delete ( tmp , i ) ;
63189: LD_ADDR_VAR 0 6
63193: PUSH
63194: LD_VAR 0 6
63198: PPUSH
63199: LD_VAR 0 4
63203: PPUSH
63204: CALL_OW 3
63208: ST_TO_ADDR
63209: GO 63109
63211: POP
63212: POP
// j := GetClosestHex ( unit , tmp ) ;
63213: LD_ADDR_VAR 0 5
63217: PUSH
63218: LD_VAR 0 1
63222: PPUSH
63223: LD_VAR 0 6
63227: PPUSH
63228: CALL 62515 0 2
63232: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63233: LD_VAR 0 1
63237: PPUSH
63238: LD_VAR 0 5
63242: PUSH
63243: LD_INT 1
63245: ARRAY
63246: PPUSH
63247: LD_VAR 0 5
63251: PUSH
63252: LD_INT 2
63254: ARRAY
63255: PPUSH
63256: CALL_OW 111
// end ;
63260: LD_VAR 0 3
63264: RET
// export function PrepareApemanSoldier ( ) ; begin
63265: LD_INT 0
63267: PPUSH
// uc_nation := 0 ;
63268: LD_ADDR_OWVAR 21
63272: PUSH
63273: LD_INT 0
63275: ST_TO_ADDR
// hc_sex := sex_male ;
63276: LD_ADDR_OWVAR 27
63280: PUSH
63281: LD_INT 1
63283: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63284: LD_ADDR_OWVAR 28
63288: PUSH
63289: LD_INT 15
63291: ST_TO_ADDR
// hc_gallery :=  ;
63292: LD_ADDR_OWVAR 33
63296: PUSH
63297: LD_STRING 
63299: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63300: LD_ADDR_OWVAR 31
63304: PUSH
63305: LD_INT 0
63307: PPUSH
63308: LD_INT 3
63310: PPUSH
63311: CALL_OW 12
63315: PUSH
63316: LD_INT 0
63318: PPUSH
63319: LD_INT 3
63321: PPUSH
63322: CALL_OW 12
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: ST_TO_ADDR
// end ;
63339: LD_VAR 0 1
63343: RET
// export function PrepareApemanEngineer ( ) ; begin
63344: LD_INT 0
63346: PPUSH
// uc_nation := 0 ;
63347: LD_ADDR_OWVAR 21
63351: PUSH
63352: LD_INT 0
63354: ST_TO_ADDR
// hc_sex := sex_male ;
63355: LD_ADDR_OWVAR 27
63359: PUSH
63360: LD_INT 1
63362: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63363: LD_ADDR_OWVAR 28
63367: PUSH
63368: LD_INT 16
63370: ST_TO_ADDR
// hc_gallery :=  ;
63371: LD_ADDR_OWVAR 33
63375: PUSH
63376: LD_STRING 
63378: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63379: LD_ADDR_OWVAR 31
63383: PUSH
63384: LD_INT 0
63386: PPUSH
63387: LD_INT 3
63389: PPUSH
63390: CALL_OW 12
63394: PUSH
63395: LD_INT 0
63397: PPUSH
63398: LD_INT 3
63400: PPUSH
63401: CALL_OW 12
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: ST_TO_ADDR
// end ;
63418: LD_VAR 0 1
63422: RET
// export function PrepareApeman ( agressivity ) ; begin
63423: LD_INT 0
63425: PPUSH
// uc_side := 0 ;
63426: LD_ADDR_OWVAR 20
63430: PUSH
63431: LD_INT 0
63433: ST_TO_ADDR
// uc_nation := 0 ;
63434: LD_ADDR_OWVAR 21
63438: PUSH
63439: LD_INT 0
63441: ST_TO_ADDR
// hc_sex := sex_male ;
63442: LD_ADDR_OWVAR 27
63446: PUSH
63447: LD_INT 1
63449: ST_TO_ADDR
// hc_class := class_apeman ;
63450: LD_ADDR_OWVAR 28
63454: PUSH
63455: LD_INT 12
63457: ST_TO_ADDR
// hc_gallery :=  ;
63458: LD_ADDR_OWVAR 33
63462: PUSH
63463: LD_STRING 
63465: ST_TO_ADDR
// if agressivity = 0 then
63466: LD_VAR 0 1
63470: PUSH
63471: LD_INT 0
63473: EQUAL
63474: IFFALSE 63486
// hc_agressivity := 0 else
63476: LD_ADDR_OWVAR 35
63480: PUSH
63481: LD_INT 0
63483: ST_TO_ADDR
63484: GO 63507
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63486: LD_ADDR_OWVAR 35
63490: PUSH
63491: LD_VAR 0 1
63495: NEG
63496: PPUSH
63497: LD_VAR 0 1
63501: PPUSH
63502: CALL_OW 12
63506: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63507: LD_ADDR_OWVAR 31
63511: PUSH
63512: LD_INT 0
63514: PPUSH
63515: LD_INT 3
63517: PPUSH
63518: CALL_OW 12
63522: PUSH
63523: LD_INT 0
63525: PPUSH
63526: LD_INT 3
63528: PPUSH
63529: CALL_OW 12
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: LD_INT 0
63539: PUSH
63540: EMPTY
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: ST_TO_ADDR
// end ;
63546: LD_VAR 0 2
63550: RET
// export function PrepareTiger ( agressivity ) ; begin
63551: LD_INT 0
63553: PPUSH
// uc_side := 0 ;
63554: LD_ADDR_OWVAR 20
63558: PUSH
63559: LD_INT 0
63561: ST_TO_ADDR
// uc_nation := 0 ;
63562: LD_ADDR_OWVAR 21
63566: PUSH
63567: LD_INT 0
63569: ST_TO_ADDR
// hc_class := class_tiger ;
63570: LD_ADDR_OWVAR 28
63574: PUSH
63575: LD_INT 14
63577: ST_TO_ADDR
// hc_gallery :=  ;
63578: LD_ADDR_OWVAR 33
63582: PUSH
63583: LD_STRING 
63585: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63586: LD_ADDR_OWVAR 35
63590: PUSH
63591: LD_VAR 0 1
63595: NEG
63596: PPUSH
63597: LD_VAR 0 1
63601: PPUSH
63602: CALL_OW 12
63606: ST_TO_ADDR
// end ;
63607: LD_VAR 0 2
63611: RET
// export function PrepareEnchidna ( ) ; begin
63612: LD_INT 0
63614: PPUSH
// uc_side := 0 ;
63615: LD_ADDR_OWVAR 20
63619: PUSH
63620: LD_INT 0
63622: ST_TO_ADDR
// uc_nation := 0 ;
63623: LD_ADDR_OWVAR 21
63627: PUSH
63628: LD_INT 0
63630: ST_TO_ADDR
// hc_class := class_baggie ;
63631: LD_ADDR_OWVAR 28
63635: PUSH
63636: LD_INT 13
63638: ST_TO_ADDR
// hc_gallery :=  ;
63639: LD_ADDR_OWVAR 33
63643: PUSH
63644: LD_STRING 
63646: ST_TO_ADDR
// end ;
63647: LD_VAR 0 1
63651: RET
// export function PrepareFrog ( ) ; begin
63652: LD_INT 0
63654: PPUSH
// uc_side := 0 ;
63655: LD_ADDR_OWVAR 20
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
// uc_nation := 0 ;
63663: LD_ADDR_OWVAR 21
63667: PUSH
63668: LD_INT 0
63670: ST_TO_ADDR
// hc_class := class_frog ;
63671: LD_ADDR_OWVAR 28
63675: PUSH
63676: LD_INT 19
63678: ST_TO_ADDR
// hc_gallery :=  ;
63679: LD_ADDR_OWVAR 33
63683: PUSH
63684: LD_STRING 
63686: ST_TO_ADDR
// end ;
63687: LD_VAR 0 1
63691: RET
// export function PrepareFish ( ) ; begin
63692: LD_INT 0
63694: PPUSH
// uc_side := 0 ;
63695: LD_ADDR_OWVAR 20
63699: PUSH
63700: LD_INT 0
63702: ST_TO_ADDR
// uc_nation := 0 ;
63703: LD_ADDR_OWVAR 21
63707: PUSH
63708: LD_INT 0
63710: ST_TO_ADDR
// hc_class := class_fish ;
63711: LD_ADDR_OWVAR 28
63715: PUSH
63716: LD_INT 20
63718: ST_TO_ADDR
// hc_gallery :=  ;
63719: LD_ADDR_OWVAR 33
63723: PUSH
63724: LD_STRING 
63726: ST_TO_ADDR
// end ;
63727: LD_VAR 0 1
63731: RET
// export function PrepareBird ( ) ; begin
63732: LD_INT 0
63734: PPUSH
// uc_side := 0 ;
63735: LD_ADDR_OWVAR 20
63739: PUSH
63740: LD_INT 0
63742: ST_TO_ADDR
// uc_nation := 0 ;
63743: LD_ADDR_OWVAR 21
63747: PUSH
63748: LD_INT 0
63750: ST_TO_ADDR
// hc_class := class_phororhacos ;
63751: LD_ADDR_OWVAR 28
63755: PUSH
63756: LD_INT 18
63758: ST_TO_ADDR
// hc_gallery :=  ;
63759: LD_ADDR_OWVAR 33
63763: PUSH
63764: LD_STRING 
63766: ST_TO_ADDR
// end ;
63767: LD_VAR 0 1
63771: RET
// export function PrepareHorse ( ) ; begin
63772: LD_INT 0
63774: PPUSH
// uc_side := 0 ;
63775: LD_ADDR_OWVAR 20
63779: PUSH
63780: LD_INT 0
63782: ST_TO_ADDR
// uc_nation := 0 ;
63783: LD_ADDR_OWVAR 21
63787: PUSH
63788: LD_INT 0
63790: ST_TO_ADDR
// hc_class := class_horse ;
63791: LD_ADDR_OWVAR 28
63795: PUSH
63796: LD_INT 21
63798: ST_TO_ADDR
// hc_gallery :=  ;
63799: LD_ADDR_OWVAR 33
63803: PUSH
63804: LD_STRING 
63806: ST_TO_ADDR
// end ;
63807: LD_VAR 0 1
63811: RET
// export function PrepareMastodont ( ) ; begin
63812: LD_INT 0
63814: PPUSH
// uc_side := 0 ;
63815: LD_ADDR_OWVAR 20
63819: PUSH
63820: LD_INT 0
63822: ST_TO_ADDR
// uc_nation := 0 ;
63823: LD_ADDR_OWVAR 21
63827: PUSH
63828: LD_INT 0
63830: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63831: LD_ADDR_OWVAR 37
63835: PUSH
63836: LD_INT 31
63838: ST_TO_ADDR
// vc_control := control_rider ;
63839: LD_ADDR_OWVAR 38
63843: PUSH
63844: LD_INT 4
63846: ST_TO_ADDR
// end ;
63847: LD_VAR 0 1
63851: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63852: LD_INT 0
63854: PPUSH
63855: PPUSH
63856: PPUSH
// uc_side = 0 ;
63857: LD_ADDR_OWVAR 20
63861: PUSH
63862: LD_INT 0
63864: ST_TO_ADDR
// uc_nation = 0 ;
63865: LD_ADDR_OWVAR 21
63869: PUSH
63870: LD_INT 0
63872: ST_TO_ADDR
// InitHc_All ( ) ;
63873: CALL_OW 584
// InitVc ;
63877: CALL_OW 20
// if mastodonts then
63881: LD_VAR 0 6
63885: IFFALSE 63952
// for i = 1 to mastodonts do
63887: LD_ADDR_VAR 0 11
63891: PUSH
63892: DOUBLE
63893: LD_INT 1
63895: DEC
63896: ST_TO_ADDR
63897: LD_VAR 0 6
63901: PUSH
63902: FOR_TO
63903: IFFALSE 63950
// begin vc_chassis := 31 ;
63905: LD_ADDR_OWVAR 37
63909: PUSH
63910: LD_INT 31
63912: ST_TO_ADDR
// vc_control := control_rider ;
63913: LD_ADDR_OWVAR 38
63917: PUSH
63918: LD_INT 4
63920: ST_TO_ADDR
// animal := CreateVehicle ;
63921: LD_ADDR_VAR 0 12
63925: PUSH
63926: CALL_OW 45
63930: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63931: LD_VAR 0 12
63935: PPUSH
63936: LD_VAR 0 8
63940: PPUSH
63941: LD_INT 0
63943: PPUSH
63944: CALL 66080 0 3
// end ;
63948: GO 63902
63950: POP
63951: POP
// if horses then
63952: LD_VAR 0 5
63956: IFFALSE 64023
// for i = 1 to horses do
63958: LD_ADDR_VAR 0 11
63962: PUSH
63963: DOUBLE
63964: LD_INT 1
63966: DEC
63967: ST_TO_ADDR
63968: LD_VAR 0 5
63972: PUSH
63973: FOR_TO
63974: IFFALSE 64021
// begin hc_class := 21 ;
63976: LD_ADDR_OWVAR 28
63980: PUSH
63981: LD_INT 21
63983: ST_TO_ADDR
// hc_gallery :=  ;
63984: LD_ADDR_OWVAR 33
63988: PUSH
63989: LD_STRING 
63991: ST_TO_ADDR
// animal := CreateHuman ;
63992: LD_ADDR_VAR 0 12
63996: PUSH
63997: CALL_OW 44
64001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64002: LD_VAR 0 12
64006: PPUSH
64007: LD_VAR 0 8
64011: PPUSH
64012: LD_INT 0
64014: PPUSH
64015: CALL 66080 0 3
// end ;
64019: GO 63973
64021: POP
64022: POP
// if birds then
64023: LD_VAR 0 1
64027: IFFALSE 64094
// for i = 1 to birds do
64029: LD_ADDR_VAR 0 11
64033: PUSH
64034: DOUBLE
64035: LD_INT 1
64037: DEC
64038: ST_TO_ADDR
64039: LD_VAR 0 1
64043: PUSH
64044: FOR_TO
64045: IFFALSE 64092
// begin hc_class := 18 ;
64047: LD_ADDR_OWVAR 28
64051: PUSH
64052: LD_INT 18
64054: ST_TO_ADDR
// hc_gallery =  ;
64055: LD_ADDR_OWVAR 33
64059: PUSH
64060: LD_STRING 
64062: ST_TO_ADDR
// animal := CreateHuman ;
64063: LD_ADDR_VAR 0 12
64067: PUSH
64068: CALL_OW 44
64072: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64073: LD_VAR 0 12
64077: PPUSH
64078: LD_VAR 0 8
64082: PPUSH
64083: LD_INT 0
64085: PPUSH
64086: CALL 66080 0 3
// end ;
64090: GO 64044
64092: POP
64093: POP
// if tigers then
64094: LD_VAR 0 2
64098: IFFALSE 64182
// for i = 1 to tigers do
64100: LD_ADDR_VAR 0 11
64104: PUSH
64105: DOUBLE
64106: LD_INT 1
64108: DEC
64109: ST_TO_ADDR
64110: LD_VAR 0 2
64114: PUSH
64115: FOR_TO
64116: IFFALSE 64180
// begin hc_class = class_tiger ;
64118: LD_ADDR_OWVAR 28
64122: PUSH
64123: LD_INT 14
64125: ST_TO_ADDR
// hc_gallery =  ;
64126: LD_ADDR_OWVAR 33
64130: PUSH
64131: LD_STRING 
64133: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64134: LD_ADDR_OWVAR 35
64138: PUSH
64139: LD_INT 7
64141: NEG
64142: PPUSH
64143: LD_INT 7
64145: PPUSH
64146: CALL_OW 12
64150: ST_TO_ADDR
// animal := CreateHuman ;
64151: LD_ADDR_VAR 0 12
64155: PUSH
64156: CALL_OW 44
64160: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64161: LD_VAR 0 12
64165: PPUSH
64166: LD_VAR 0 8
64170: PPUSH
64171: LD_INT 0
64173: PPUSH
64174: CALL 66080 0 3
// end ;
64178: GO 64115
64180: POP
64181: POP
// if apemans then
64182: LD_VAR 0 3
64186: IFFALSE 64309
// for i = 1 to apemans do
64188: LD_ADDR_VAR 0 11
64192: PUSH
64193: DOUBLE
64194: LD_INT 1
64196: DEC
64197: ST_TO_ADDR
64198: LD_VAR 0 3
64202: PUSH
64203: FOR_TO
64204: IFFALSE 64307
// begin hc_class = class_apeman ;
64206: LD_ADDR_OWVAR 28
64210: PUSH
64211: LD_INT 12
64213: ST_TO_ADDR
// hc_gallery =  ;
64214: LD_ADDR_OWVAR 33
64218: PUSH
64219: LD_STRING 
64221: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64222: LD_ADDR_OWVAR 35
64226: PUSH
64227: LD_INT 2
64229: NEG
64230: PPUSH
64231: LD_INT 2
64233: PPUSH
64234: CALL_OW 12
64238: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64239: LD_ADDR_OWVAR 31
64243: PUSH
64244: LD_INT 1
64246: PPUSH
64247: LD_INT 3
64249: PPUSH
64250: CALL_OW 12
64254: PUSH
64255: LD_INT 1
64257: PPUSH
64258: LD_INT 3
64260: PPUSH
64261: CALL_OW 12
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: ST_TO_ADDR
// animal := CreateHuman ;
64278: LD_ADDR_VAR 0 12
64282: PUSH
64283: CALL_OW 44
64287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64288: LD_VAR 0 12
64292: PPUSH
64293: LD_VAR 0 8
64297: PPUSH
64298: LD_INT 0
64300: PPUSH
64301: CALL 66080 0 3
// end ;
64305: GO 64203
64307: POP
64308: POP
// if enchidnas then
64309: LD_VAR 0 4
64313: IFFALSE 64380
// for i = 1 to enchidnas do
64315: LD_ADDR_VAR 0 11
64319: PUSH
64320: DOUBLE
64321: LD_INT 1
64323: DEC
64324: ST_TO_ADDR
64325: LD_VAR 0 4
64329: PUSH
64330: FOR_TO
64331: IFFALSE 64378
// begin hc_class = 13 ;
64333: LD_ADDR_OWVAR 28
64337: PUSH
64338: LD_INT 13
64340: ST_TO_ADDR
// hc_gallery =  ;
64341: LD_ADDR_OWVAR 33
64345: PUSH
64346: LD_STRING 
64348: ST_TO_ADDR
// animal := CreateHuman ;
64349: LD_ADDR_VAR 0 12
64353: PUSH
64354: CALL_OW 44
64358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64359: LD_VAR 0 12
64363: PPUSH
64364: LD_VAR 0 8
64368: PPUSH
64369: LD_INT 0
64371: PPUSH
64372: CALL 66080 0 3
// end ;
64376: GO 64330
64378: POP
64379: POP
// if fishes then
64380: LD_VAR 0 7
64384: IFFALSE 64451
// for i = 1 to fishes do
64386: LD_ADDR_VAR 0 11
64390: PUSH
64391: DOUBLE
64392: LD_INT 1
64394: DEC
64395: ST_TO_ADDR
64396: LD_VAR 0 7
64400: PUSH
64401: FOR_TO
64402: IFFALSE 64449
// begin hc_class = 20 ;
64404: LD_ADDR_OWVAR 28
64408: PUSH
64409: LD_INT 20
64411: ST_TO_ADDR
// hc_gallery =  ;
64412: LD_ADDR_OWVAR 33
64416: PUSH
64417: LD_STRING 
64419: ST_TO_ADDR
// animal := CreateHuman ;
64420: LD_ADDR_VAR 0 12
64424: PUSH
64425: CALL_OW 44
64429: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64430: LD_VAR 0 12
64434: PPUSH
64435: LD_VAR 0 9
64439: PPUSH
64440: LD_INT 0
64442: PPUSH
64443: CALL 66080 0 3
// end ;
64447: GO 64401
64449: POP
64450: POP
// end ;
64451: LD_VAR 0 10
64455: RET
// export function WantHeal ( sci , unit ) ; begin
64456: LD_INT 0
64458: PPUSH
// if GetTaskList ( sci ) > 0 then
64459: LD_VAR 0 1
64463: PPUSH
64464: CALL_OW 437
64468: PUSH
64469: LD_INT 0
64471: GREATER
64472: IFFALSE 64542
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64474: LD_VAR 0 1
64478: PPUSH
64479: CALL_OW 437
64483: PUSH
64484: LD_INT 1
64486: ARRAY
64487: PUSH
64488: LD_INT 1
64490: ARRAY
64491: PUSH
64492: LD_STRING l
64494: EQUAL
64495: PUSH
64496: LD_VAR 0 1
64500: PPUSH
64501: CALL_OW 437
64505: PUSH
64506: LD_INT 1
64508: ARRAY
64509: PUSH
64510: LD_INT 4
64512: ARRAY
64513: PUSH
64514: LD_VAR 0 2
64518: EQUAL
64519: AND
64520: IFFALSE 64532
// result := true else
64522: LD_ADDR_VAR 0 3
64526: PUSH
64527: LD_INT 1
64529: ST_TO_ADDR
64530: GO 64540
// result := false ;
64532: LD_ADDR_VAR 0 3
64536: PUSH
64537: LD_INT 0
64539: ST_TO_ADDR
// end else
64540: GO 64550
// result := false ;
64542: LD_ADDR_VAR 0 3
64546: PUSH
64547: LD_INT 0
64549: ST_TO_ADDR
// end ;
64550: LD_VAR 0 3
64554: RET
// export function HealTarget ( sci ) ; begin
64555: LD_INT 0
64557: PPUSH
// if not sci then
64558: LD_VAR 0 1
64562: NOT
64563: IFFALSE 64567
// exit ;
64565: GO 64632
// result := 0 ;
64567: LD_ADDR_VAR 0 2
64571: PUSH
64572: LD_INT 0
64574: ST_TO_ADDR
// if GetTaskList ( sci ) then
64575: LD_VAR 0 1
64579: PPUSH
64580: CALL_OW 437
64584: IFFALSE 64632
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64586: LD_VAR 0 1
64590: PPUSH
64591: CALL_OW 437
64595: PUSH
64596: LD_INT 1
64598: ARRAY
64599: PUSH
64600: LD_INT 1
64602: ARRAY
64603: PUSH
64604: LD_STRING l
64606: EQUAL
64607: IFFALSE 64632
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64609: LD_ADDR_VAR 0 2
64613: PUSH
64614: LD_VAR 0 1
64618: PPUSH
64619: CALL_OW 437
64623: PUSH
64624: LD_INT 1
64626: ARRAY
64627: PUSH
64628: LD_INT 4
64630: ARRAY
64631: ST_TO_ADDR
// end ;
64632: LD_VAR 0 2
64636: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64637: LD_INT 0
64639: PPUSH
64640: PPUSH
64641: PPUSH
64642: PPUSH
// if not base_units then
64643: LD_VAR 0 1
64647: NOT
64648: IFFALSE 64652
// exit ;
64650: GO 64739
// result := false ;
64652: LD_ADDR_VAR 0 2
64656: PUSH
64657: LD_INT 0
64659: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64660: LD_ADDR_VAR 0 5
64664: PUSH
64665: LD_VAR 0 1
64669: PPUSH
64670: LD_INT 21
64672: PUSH
64673: LD_INT 3
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PPUSH
64680: CALL_OW 72
64684: ST_TO_ADDR
// if not tmp then
64685: LD_VAR 0 5
64689: NOT
64690: IFFALSE 64694
// exit ;
64692: GO 64739
// for i in tmp do
64694: LD_ADDR_VAR 0 3
64698: PUSH
64699: LD_VAR 0 5
64703: PUSH
64704: FOR_IN
64705: IFFALSE 64737
// begin result := EnemyInRange ( i , 22 ) ;
64707: LD_ADDR_VAR 0 2
64711: PUSH
64712: LD_VAR 0 3
64716: PPUSH
64717: LD_INT 22
64719: PPUSH
64720: CALL 62317 0 2
64724: ST_TO_ADDR
// if result then
64725: LD_VAR 0 2
64729: IFFALSE 64735
// exit ;
64731: POP
64732: POP
64733: GO 64739
// end ;
64735: GO 64704
64737: POP
64738: POP
// end ;
64739: LD_VAR 0 2
64743: RET
// export function FilterByTag ( units , tag ) ; begin
64744: LD_INT 0
64746: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64747: LD_ADDR_VAR 0 3
64751: PUSH
64752: LD_VAR 0 1
64756: PPUSH
64757: LD_INT 120
64759: PUSH
64760: LD_VAR 0 2
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PPUSH
64769: CALL_OW 72
64773: ST_TO_ADDR
// end ;
64774: LD_VAR 0 3
64778: RET
// export function IsDriver ( un ) ; begin
64779: LD_INT 0
64781: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64782: LD_ADDR_VAR 0 2
64786: PUSH
64787: LD_VAR 0 1
64791: PUSH
64792: LD_INT 55
64794: PUSH
64795: EMPTY
64796: LIST
64797: PPUSH
64798: CALL_OW 69
64802: IN
64803: ST_TO_ADDR
// end ;
64804: LD_VAR 0 2
64808: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64809: LD_INT 0
64811: PPUSH
64812: PPUSH
// list := [ ] ;
64813: LD_ADDR_VAR 0 5
64817: PUSH
64818: EMPTY
64819: ST_TO_ADDR
// case d of 0 :
64820: LD_VAR 0 3
64824: PUSH
64825: LD_INT 0
64827: DOUBLE
64828: EQUAL
64829: IFTRUE 64833
64831: GO 64966
64833: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64834: LD_ADDR_VAR 0 5
64838: PUSH
64839: LD_VAR 0 1
64843: PUSH
64844: LD_INT 4
64846: MINUS
64847: PUSH
64848: LD_VAR 0 2
64852: PUSH
64853: LD_INT 4
64855: MINUS
64856: PUSH
64857: LD_INT 2
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: LIST
64864: PUSH
64865: LD_VAR 0 1
64869: PUSH
64870: LD_INT 3
64872: MINUS
64873: PUSH
64874: LD_VAR 0 2
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: LIST
64886: PUSH
64887: LD_VAR 0 1
64891: PUSH
64892: LD_INT 4
64894: PLUS
64895: PUSH
64896: LD_VAR 0 2
64900: PUSH
64901: LD_INT 4
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: LIST
64908: PUSH
64909: LD_VAR 0 1
64913: PUSH
64914: LD_INT 3
64916: PLUS
64917: PUSH
64918: LD_VAR 0 2
64922: PUSH
64923: LD_INT 3
64925: PLUS
64926: PUSH
64927: LD_INT 5
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: PUSH
64935: LD_VAR 0 1
64939: PUSH
64940: LD_VAR 0 2
64944: PUSH
64945: LD_INT 4
64947: PLUS
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: ST_TO_ADDR
// end ; 1 :
64964: GO 65664
64966: LD_INT 1
64968: DOUBLE
64969: EQUAL
64970: IFTRUE 64974
64972: GO 65107
64974: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64975: LD_ADDR_VAR 0 5
64979: PUSH
64980: LD_VAR 0 1
64984: PUSH
64985: LD_VAR 0 2
64989: PUSH
64990: LD_INT 4
64992: MINUS
64993: PUSH
64994: LD_INT 3
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: PUSH
65002: LD_VAR 0 1
65006: PUSH
65007: LD_INT 3
65009: MINUS
65010: PUSH
65011: LD_VAR 0 2
65015: PUSH
65016: LD_INT 3
65018: MINUS
65019: PUSH
65020: LD_INT 2
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: LIST
65027: PUSH
65028: LD_VAR 0 1
65032: PUSH
65033: LD_INT 4
65035: MINUS
65036: PUSH
65037: LD_VAR 0 2
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: LIST
65049: PUSH
65050: LD_VAR 0 1
65054: PUSH
65055: LD_VAR 0 2
65059: PUSH
65060: LD_INT 3
65062: PLUS
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: LIST
65071: PUSH
65072: LD_VAR 0 1
65076: PUSH
65077: LD_INT 4
65079: PLUS
65080: PUSH
65081: LD_VAR 0 2
65085: PUSH
65086: LD_INT 4
65088: PLUS
65089: PUSH
65090: LD_INT 5
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: LIST
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: ST_TO_ADDR
// end ; 2 :
65105: GO 65664
65107: LD_INT 2
65109: DOUBLE
65110: EQUAL
65111: IFTRUE 65115
65113: GO 65244
65115: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65116: LD_ADDR_VAR 0 5
65120: PUSH
65121: LD_VAR 0 1
65125: PUSH
65126: LD_VAR 0 2
65130: PUSH
65131: LD_INT 3
65133: MINUS
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: LIST
65142: PUSH
65143: LD_VAR 0 1
65147: PUSH
65148: LD_INT 4
65150: PLUS
65151: PUSH
65152: LD_VAR 0 2
65156: PUSH
65157: LD_INT 4
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: LIST
65164: PUSH
65165: LD_VAR 0 1
65169: PUSH
65170: LD_VAR 0 2
65174: PUSH
65175: LD_INT 4
65177: PLUS
65178: PUSH
65179: LD_INT 0
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: LIST
65186: PUSH
65187: LD_VAR 0 1
65191: PUSH
65192: LD_INT 3
65194: MINUS
65195: PUSH
65196: LD_VAR 0 2
65200: PUSH
65201: LD_INT 1
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: PUSH
65209: LD_VAR 0 1
65213: PUSH
65214: LD_INT 4
65216: MINUS
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: LD_INT 4
65225: MINUS
65226: PUSH
65227: LD_INT 2
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: LIST
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: ST_TO_ADDR
// end ; 3 :
65242: GO 65664
65244: LD_INT 3
65246: DOUBLE
65247: EQUAL
65248: IFTRUE 65252
65250: GO 65385
65252: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65253: LD_ADDR_VAR 0 5
65257: PUSH
65258: LD_VAR 0 1
65262: PUSH
65263: LD_INT 3
65265: PLUS
65266: PUSH
65267: LD_VAR 0 2
65271: PUSH
65272: LD_INT 4
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: LIST
65279: PUSH
65280: LD_VAR 0 1
65284: PUSH
65285: LD_INT 4
65287: PLUS
65288: PUSH
65289: LD_VAR 0 2
65293: PUSH
65294: LD_INT 4
65296: PLUS
65297: PUSH
65298: LD_INT 5
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: PUSH
65306: LD_VAR 0 1
65310: PUSH
65311: LD_INT 4
65313: MINUS
65314: PUSH
65315: LD_VAR 0 2
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: LIST
65327: PUSH
65328: LD_VAR 0 1
65332: PUSH
65333: LD_VAR 0 2
65337: PUSH
65338: LD_INT 4
65340: MINUS
65341: PUSH
65342: LD_INT 3
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: LIST
65349: PUSH
65350: LD_VAR 0 1
65354: PUSH
65355: LD_INT 3
65357: MINUS
65358: PUSH
65359: LD_VAR 0 2
65363: PUSH
65364: LD_INT 3
65366: MINUS
65367: PUSH
65368: LD_INT 2
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: LIST
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: ST_TO_ADDR
// end ; 4 :
65383: GO 65664
65385: LD_INT 4
65387: DOUBLE
65388: EQUAL
65389: IFTRUE 65393
65391: GO 65526
65393: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65394: LD_ADDR_VAR 0 5
65398: PUSH
65399: LD_VAR 0 1
65403: PUSH
65404: LD_VAR 0 2
65408: PUSH
65409: LD_INT 4
65411: PLUS
65412: PUSH
65413: LD_INT 0
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: PUSH
65421: LD_VAR 0 1
65425: PUSH
65426: LD_INT 3
65428: PLUS
65429: PUSH
65430: LD_VAR 0 2
65434: PUSH
65435: LD_INT 3
65437: PLUS
65438: PUSH
65439: LD_INT 5
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: LIST
65446: PUSH
65447: LD_VAR 0 1
65451: PUSH
65452: LD_INT 4
65454: PLUS
65455: PUSH
65456: LD_VAR 0 2
65460: PUSH
65461: LD_INT 4
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: LIST
65468: PUSH
65469: LD_VAR 0 1
65473: PUSH
65474: LD_VAR 0 2
65478: PUSH
65479: LD_INT 3
65481: MINUS
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: PUSH
65491: LD_VAR 0 1
65495: PUSH
65496: LD_INT 4
65498: MINUS
65499: PUSH
65500: LD_VAR 0 2
65504: PUSH
65505: LD_INT 4
65507: MINUS
65508: PUSH
65509: LD_INT 2
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: LIST
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: ST_TO_ADDR
// end ; 5 :
65524: GO 65664
65526: LD_INT 5
65528: DOUBLE
65529: EQUAL
65530: IFTRUE 65534
65532: GO 65663
65534: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65535: LD_ADDR_VAR 0 5
65539: PUSH
65540: LD_VAR 0 1
65544: PUSH
65545: LD_INT 4
65547: MINUS
65548: PUSH
65549: LD_VAR 0 2
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: LIST
65561: PUSH
65562: LD_VAR 0 1
65566: PUSH
65567: LD_VAR 0 2
65571: PUSH
65572: LD_INT 4
65574: MINUS
65575: PUSH
65576: LD_INT 3
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: LIST
65583: PUSH
65584: LD_VAR 0 1
65588: PUSH
65589: LD_INT 4
65591: PLUS
65592: PUSH
65593: LD_VAR 0 2
65597: PUSH
65598: LD_INT 4
65600: PLUS
65601: PUSH
65602: LD_INT 5
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: LIST
65609: PUSH
65610: LD_VAR 0 1
65614: PUSH
65615: LD_INT 3
65617: PLUS
65618: PUSH
65619: LD_VAR 0 2
65623: PUSH
65624: LD_INT 4
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: LIST
65631: PUSH
65632: LD_VAR 0 1
65636: PUSH
65637: LD_VAR 0 2
65641: PUSH
65642: LD_INT 3
65644: PLUS
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: LIST
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: ST_TO_ADDR
// end ; end ;
65661: GO 65664
65663: POP
// result := list ;
65664: LD_ADDR_VAR 0 4
65668: PUSH
65669: LD_VAR 0 5
65673: ST_TO_ADDR
// end ;
65674: LD_VAR 0 4
65678: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65679: LD_INT 0
65681: PPUSH
65682: PPUSH
65683: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65684: LD_VAR 0 1
65688: NOT
65689: PUSH
65690: LD_VAR 0 2
65694: PUSH
65695: LD_INT 1
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: LD_INT 4
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: IN
65713: NOT
65714: OR
65715: IFFALSE 65719
// exit ;
65717: GO 65802
// tmp := [ ] ;
65719: LD_ADDR_VAR 0 5
65723: PUSH
65724: EMPTY
65725: ST_TO_ADDR
// for i in units do
65726: LD_ADDR_VAR 0 4
65730: PUSH
65731: LD_VAR 0 1
65735: PUSH
65736: FOR_IN
65737: IFFALSE 65771
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65739: LD_ADDR_VAR 0 5
65743: PUSH
65744: LD_VAR 0 5
65748: PPUSH
65749: LD_VAR 0 4
65753: PPUSH
65754: LD_VAR 0 2
65758: PPUSH
65759: CALL_OW 259
65763: PPUSH
65764: CALL 67175 0 2
65768: ST_TO_ADDR
65769: GO 65736
65771: POP
65772: POP
// if not tmp then
65773: LD_VAR 0 5
65777: NOT
65778: IFFALSE 65782
// exit ;
65780: GO 65802
// result := SortListByListDesc ( units , tmp ) ;
65782: LD_ADDR_VAR 0 3
65786: PUSH
65787: LD_VAR 0 1
65791: PPUSH
65792: LD_VAR 0 5
65796: PPUSH
65797: CALL_OW 77
65801: ST_TO_ADDR
// end ;
65802: LD_VAR 0 3
65806: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65807: LD_INT 0
65809: PPUSH
65810: PPUSH
65811: PPUSH
// result := false ;
65812: LD_ADDR_VAR 0 3
65816: PUSH
65817: LD_INT 0
65819: ST_TO_ADDR
// if not building then
65820: LD_VAR 0 2
65824: NOT
65825: IFFALSE 65829
// exit ;
65827: GO 65967
// x := GetX ( building ) ;
65829: LD_ADDR_VAR 0 4
65833: PUSH
65834: LD_VAR 0 2
65838: PPUSH
65839: CALL_OW 250
65843: ST_TO_ADDR
// y := GetY ( building ) ;
65844: LD_ADDR_VAR 0 5
65848: PUSH
65849: LD_VAR 0 2
65853: PPUSH
65854: CALL_OW 251
65858: ST_TO_ADDR
// if not x or not y then
65859: LD_VAR 0 4
65863: NOT
65864: PUSH
65865: LD_VAR 0 5
65869: NOT
65870: OR
65871: IFFALSE 65875
// exit ;
65873: GO 65967
// if GetTaskList ( unit ) then
65875: LD_VAR 0 1
65879: PPUSH
65880: CALL_OW 437
65884: IFFALSE 65967
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65886: LD_STRING e
65888: PUSH
65889: LD_VAR 0 1
65893: PPUSH
65894: CALL_OW 437
65898: PUSH
65899: LD_INT 1
65901: ARRAY
65902: PUSH
65903: LD_INT 1
65905: ARRAY
65906: EQUAL
65907: PUSH
65908: LD_VAR 0 4
65912: PUSH
65913: LD_VAR 0 1
65917: PPUSH
65918: CALL_OW 437
65922: PUSH
65923: LD_INT 1
65925: ARRAY
65926: PUSH
65927: LD_INT 2
65929: ARRAY
65930: EQUAL
65931: AND
65932: PUSH
65933: LD_VAR 0 5
65937: PUSH
65938: LD_VAR 0 1
65942: PPUSH
65943: CALL_OW 437
65947: PUSH
65948: LD_INT 1
65950: ARRAY
65951: PUSH
65952: LD_INT 3
65954: ARRAY
65955: EQUAL
65956: AND
65957: IFFALSE 65967
// result := true end ;
65959: LD_ADDR_VAR 0 3
65963: PUSH
65964: LD_INT 1
65966: ST_TO_ADDR
// end ;
65967: LD_VAR 0 3
65971: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65972: LD_INT 0
65974: PPUSH
// result := false ;
65975: LD_ADDR_VAR 0 4
65979: PUSH
65980: LD_INT 0
65982: ST_TO_ADDR
// if GetTaskList ( unit ) then
65983: LD_VAR 0 1
65987: PPUSH
65988: CALL_OW 437
65992: IFFALSE 66075
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65994: LD_STRING M
65996: PUSH
65997: LD_VAR 0 1
66001: PPUSH
66002: CALL_OW 437
66006: PUSH
66007: LD_INT 1
66009: ARRAY
66010: PUSH
66011: LD_INT 1
66013: ARRAY
66014: EQUAL
66015: PUSH
66016: LD_VAR 0 2
66020: PUSH
66021: LD_VAR 0 1
66025: PPUSH
66026: CALL_OW 437
66030: PUSH
66031: LD_INT 1
66033: ARRAY
66034: PUSH
66035: LD_INT 2
66037: ARRAY
66038: EQUAL
66039: AND
66040: PUSH
66041: LD_VAR 0 3
66045: PUSH
66046: LD_VAR 0 1
66050: PPUSH
66051: CALL_OW 437
66055: PUSH
66056: LD_INT 1
66058: ARRAY
66059: PUSH
66060: LD_INT 3
66062: ARRAY
66063: EQUAL
66064: AND
66065: IFFALSE 66075
// result := true ;
66067: LD_ADDR_VAR 0 4
66071: PUSH
66072: LD_INT 1
66074: ST_TO_ADDR
// end ; end ;
66075: LD_VAR 0 4
66079: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66080: LD_INT 0
66082: PPUSH
66083: PPUSH
66084: PPUSH
66085: PPUSH
// if not unit or not area then
66086: LD_VAR 0 1
66090: NOT
66091: PUSH
66092: LD_VAR 0 2
66096: NOT
66097: OR
66098: IFFALSE 66102
// exit ;
66100: GO 66278
// tmp := AreaToList ( area , i ) ;
66102: LD_ADDR_VAR 0 6
66106: PUSH
66107: LD_VAR 0 2
66111: PPUSH
66112: LD_VAR 0 5
66116: PPUSH
66117: CALL_OW 517
66121: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66122: LD_ADDR_VAR 0 5
66126: PUSH
66127: DOUBLE
66128: LD_INT 1
66130: DEC
66131: ST_TO_ADDR
66132: LD_VAR 0 6
66136: PUSH
66137: LD_INT 1
66139: ARRAY
66140: PUSH
66141: FOR_TO
66142: IFFALSE 66276
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66144: LD_ADDR_VAR 0 7
66148: PUSH
66149: LD_VAR 0 6
66153: PUSH
66154: LD_INT 1
66156: ARRAY
66157: PUSH
66158: LD_VAR 0 5
66162: ARRAY
66163: PUSH
66164: LD_VAR 0 6
66168: PUSH
66169: LD_INT 2
66171: ARRAY
66172: PUSH
66173: LD_VAR 0 5
66177: ARRAY
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66183: LD_INT 92
66185: PUSH
66186: LD_VAR 0 7
66190: PUSH
66191: LD_INT 1
66193: ARRAY
66194: PUSH
66195: LD_VAR 0 7
66199: PUSH
66200: LD_INT 2
66202: ARRAY
66203: PUSH
66204: LD_INT 2
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: PPUSH
66213: CALL_OW 69
66217: PUSH
66218: LD_INT 0
66220: EQUAL
66221: IFFALSE 66274
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66223: LD_VAR 0 1
66227: PPUSH
66228: LD_VAR 0 7
66232: PUSH
66233: LD_INT 1
66235: ARRAY
66236: PPUSH
66237: LD_VAR 0 7
66241: PUSH
66242: LD_INT 2
66244: ARRAY
66245: PPUSH
66246: LD_VAR 0 3
66250: PPUSH
66251: CALL_OW 48
// result := IsPlaced ( unit ) ;
66255: LD_ADDR_VAR 0 4
66259: PUSH
66260: LD_VAR 0 1
66264: PPUSH
66265: CALL_OW 305
66269: ST_TO_ADDR
// exit ;
66270: POP
66271: POP
66272: GO 66278
// end ; end ;
66274: GO 66141
66276: POP
66277: POP
// end ;
66278: LD_VAR 0 4
66282: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66283: LD_INT 0
66285: PPUSH
66286: PPUSH
66287: PPUSH
// if not side or side > 8 then
66288: LD_VAR 0 1
66292: NOT
66293: PUSH
66294: LD_VAR 0 1
66298: PUSH
66299: LD_INT 8
66301: GREATER
66302: OR
66303: IFFALSE 66307
// exit ;
66305: GO 66494
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66307: LD_ADDR_VAR 0 4
66311: PUSH
66312: LD_INT 22
66314: PUSH
66315: LD_VAR 0 1
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 21
66326: PUSH
66327: LD_INT 3
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PPUSH
66338: CALL_OW 69
66342: ST_TO_ADDR
// if not tmp then
66343: LD_VAR 0 4
66347: NOT
66348: IFFALSE 66352
// exit ;
66350: GO 66494
// enable_addtolog := true ;
66352: LD_ADDR_OWVAR 81
66356: PUSH
66357: LD_INT 1
66359: ST_TO_ADDR
// AddToLog ( [ ) ;
66360: LD_STRING [
66362: PPUSH
66363: CALL_OW 561
// for i in tmp do
66367: LD_ADDR_VAR 0 3
66371: PUSH
66372: LD_VAR 0 4
66376: PUSH
66377: FOR_IN
66378: IFFALSE 66485
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66380: LD_STRING [
66382: PUSH
66383: LD_VAR 0 3
66387: PPUSH
66388: CALL_OW 266
66392: STR
66393: PUSH
66394: LD_STRING , 
66396: STR
66397: PUSH
66398: LD_VAR 0 3
66402: PPUSH
66403: CALL_OW 250
66407: STR
66408: PUSH
66409: LD_STRING , 
66411: STR
66412: PUSH
66413: LD_VAR 0 3
66417: PPUSH
66418: CALL_OW 251
66422: STR
66423: PUSH
66424: LD_STRING , 
66426: STR
66427: PUSH
66428: LD_VAR 0 3
66432: PPUSH
66433: CALL_OW 254
66437: STR
66438: PUSH
66439: LD_STRING , 
66441: STR
66442: PUSH
66443: LD_VAR 0 3
66447: PPUSH
66448: LD_INT 1
66450: PPUSH
66451: CALL_OW 268
66455: STR
66456: PUSH
66457: LD_STRING , 
66459: STR
66460: PUSH
66461: LD_VAR 0 3
66465: PPUSH
66466: LD_INT 2
66468: PPUSH
66469: CALL_OW 268
66473: STR
66474: PUSH
66475: LD_STRING ],
66477: STR
66478: PPUSH
66479: CALL_OW 561
// end ;
66483: GO 66377
66485: POP
66486: POP
// AddToLog ( ]; ) ;
66487: LD_STRING ];
66489: PPUSH
66490: CALL_OW 561
// end ;
66494: LD_VAR 0 2
66498: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66499: LD_INT 0
66501: PPUSH
66502: PPUSH
66503: PPUSH
66504: PPUSH
66505: PPUSH
// if not area or not rate or not max then
66506: LD_VAR 0 1
66510: NOT
66511: PUSH
66512: LD_VAR 0 2
66516: NOT
66517: OR
66518: PUSH
66519: LD_VAR 0 4
66523: NOT
66524: OR
66525: IFFALSE 66529
// exit ;
66527: GO 66718
// while 1 do
66529: LD_INT 1
66531: IFFALSE 66718
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66533: LD_ADDR_VAR 0 9
66537: PUSH
66538: LD_VAR 0 1
66542: PPUSH
66543: LD_INT 1
66545: PPUSH
66546: CALL_OW 287
66550: PUSH
66551: LD_INT 10
66553: MUL
66554: ST_TO_ADDR
// r := rate / 10 ;
66555: LD_ADDR_VAR 0 7
66559: PUSH
66560: LD_VAR 0 2
66564: PUSH
66565: LD_INT 10
66567: DIVREAL
66568: ST_TO_ADDR
// time := 1 1$00 ;
66569: LD_ADDR_VAR 0 8
66573: PUSH
66574: LD_INT 2100
66576: ST_TO_ADDR
// if amount < min then
66577: LD_VAR 0 9
66581: PUSH
66582: LD_VAR 0 3
66586: LESS
66587: IFFALSE 66605
// r := r * 2 else
66589: LD_ADDR_VAR 0 7
66593: PUSH
66594: LD_VAR 0 7
66598: PUSH
66599: LD_INT 2
66601: MUL
66602: ST_TO_ADDR
66603: GO 66631
// if amount > max then
66605: LD_VAR 0 9
66609: PUSH
66610: LD_VAR 0 4
66614: GREATER
66615: IFFALSE 66631
// r := r / 2 ;
66617: LD_ADDR_VAR 0 7
66621: PUSH
66622: LD_VAR 0 7
66626: PUSH
66627: LD_INT 2
66629: DIVREAL
66630: ST_TO_ADDR
// time := time / r ;
66631: LD_ADDR_VAR 0 8
66635: PUSH
66636: LD_VAR 0 8
66640: PUSH
66641: LD_VAR 0 7
66645: DIVREAL
66646: ST_TO_ADDR
// if time < 0 then
66647: LD_VAR 0 8
66651: PUSH
66652: LD_INT 0
66654: LESS
66655: IFFALSE 66672
// time := time * - 1 ;
66657: LD_ADDR_VAR 0 8
66661: PUSH
66662: LD_VAR 0 8
66666: PUSH
66667: LD_INT 1
66669: NEG
66670: MUL
66671: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66672: LD_VAR 0 8
66676: PUSH
66677: LD_INT 35
66679: PPUSH
66680: LD_INT 875
66682: PPUSH
66683: CALL_OW 12
66687: PLUS
66688: PPUSH
66689: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66693: LD_INT 1
66695: PPUSH
66696: LD_INT 5
66698: PPUSH
66699: CALL_OW 12
66703: PPUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: LD_INT 1
66711: PPUSH
66712: CALL_OW 55
// end ;
66716: GO 66529
// end ;
66718: LD_VAR 0 5
66722: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66723: LD_INT 0
66725: PPUSH
66726: PPUSH
66727: PPUSH
66728: PPUSH
66729: PPUSH
66730: PPUSH
66731: PPUSH
66732: PPUSH
// if not turrets or not factories then
66733: LD_VAR 0 1
66737: NOT
66738: PUSH
66739: LD_VAR 0 2
66743: NOT
66744: OR
66745: IFFALSE 66749
// exit ;
66747: GO 67056
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66749: LD_ADDR_VAR 0 10
66753: PUSH
66754: LD_INT 5
66756: PUSH
66757: LD_INT 6
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 2
66766: PUSH
66767: LD_INT 4
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 3
66776: PUSH
66777: LD_INT 5
66779: PUSH
66780: EMPTY
66781: LIST
66782: LIST
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: LIST
66788: PUSH
66789: LD_INT 24
66791: PUSH
66792: LD_INT 25
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 23
66801: PUSH
66802: LD_INT 27
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 42
66815: PUSH
66816: LD_INT 43
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: PUSH
66823: LD_INT 44
66825: PUSH
66826: LD_INT 46
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 45
66835: PUSH
66836: LD_INT 47
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: LIST
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: ST_TO_ADDR
// result := [ ] ;
66853: LD_ADDR_VAR 0 3
66857: PUSH
66858: EMPTY
66859: ST_TO_ADDR
// for i in turrets do
66860: LD_ADDR_VAR 0 4
66864: PUSH
66865: LD_VAR 0 1
66869: PUSH
66870: FOR_IN
66871: IFFALSE 67054
// begin nat := GetNation ( i ) ;
66873: LD_ADDR_VAR 0 7
66877: PUSH
66878: LD_VAR 0 4
66882: PPUSH
66883: CALL_OW 248
66887: ST_TO_ADDR
// weapon := 0 ;
66888: LD_ADDR_VAR 0 8
66892: PUSH
66893: LD_INT 0
66895: ST_TO_ADDR
// if not nat then
66896: LD_VAR 0 7
66900: NOT
66901: IFFALSE 66905
// continue ;
66903: GO 66870
// for j in list [ nat ] do
66905: LD_ADDR_VAR 0 5
66909: PUSH
66910: LD_VAR 0 10
66914: PUSH
66915: LD_VAR 0 7
66919: ARRAY
66920: PUSH
66921: FOR_IN
66922: IFFALSE 66963
// if GetBWeapon ( i ) = j [ 1 ] then
66924: LD_VAR 0 4
66928: PPUSH
66929: CALL_OW 269
66933: PUSH
66934: LD_VAR 0 5
66938: PUSH
66939: LD_INT 1
66941: ARRAY
66942: EQUAL
66943: IFFALSE 66961
// begin weapon := j [ 2 ] ;
66945: LD_ADDR_VAR 0 8
66949: PUSH
66950: LD_VAR 0 5
66954: PUSH
66955: LD_INT 2
66957: ARRAY
66958: ST_TO_ADDR
// break ;
66959: GO 66963
// end ;
66961: GO 66921
66963: POP
66964: POP
// if not weapon then
66965: LD_VAR 0 8
66969: NOT
66970: IFFALSE 66974
// continue ;
66972: GO 66870
// for k in factories do
66974: LD_ADDR_VAR 0 6
66978: PUSH
66979: LD_VAR 0 2
66983: PUSH
66984: FOR_IN
66985: IFFALSE 67050
// begin weapons := AvailableWeaponList ( k ) ;
66987: LD_ADDR_VAR 0 9
66991: PUSH
66992: LD_VAR 0 6
66996: PPUSH
66997: CALL_OW 478
67001: ST_TO_ADDR
// if not weapons then
67002: LD_VAR 0 9
67006: NOT
67007: IFFALSE 67011
// continue ;
67009: GO 66984
// if weapon in weapons then
67011: LD_VAR 0 8
67015: PUSH
67016: LD_VAR 0 9
67020: IN
67021: IFFALSE 67048
// begin result := [ i , weapon ] ;
67023: LD_ADDR_VAR 0 3
67027: PUSH
67028: LD_VAR 0 4
67032: PUSH
67033: LD_VAR 0 8
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: ST_TO_ADDR
// exit ;
67042: POP
67043: POP
67044: POP
67045: POP
67046: GO 67056
// end ; end ;
67048: GO 66984
67050: POP
67051: POP
// end ;
67052: GO 66870
67054: POP
67055: POP
// end ;
67056: LD_VAR 0 3
67060: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67061: LD_INT 0
67063: PPUSH
// if not side or side > 8 then
67064: LD_VAR 0 3
67068: NOT
67069: PUSH
67070: LD_VAR 0 3
67074: PUSH
67075: LD_INT 8
67077: GREATER
67078: OR
67079: IFFALSE 67083
// exit ;
67081: GO 67142
// if not range then
67083: LD_VAR 0 4
67087: NOT
67088: IFFALSE 67099
// range := - 12 ;
67090: LD_ADDR_VAR 0 4
67094: PUSH
67095: LD_INT 12
67097: NEG
67098: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67099: LD_VAR 0 1
67103: PPUSH
67104: LD_VAR 0 2
67108: PPUSH
67109: LD_VAR 0 3
67113: PPUSH
67114: LD_VAR 0 4
67118: PPUSH
67119: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67123: LD_VAR 0 1
67127: PPUSH
67128: LD_VAR 0 2
67132: PPUSH
67133: LD_VAR 0 3
67137: PPUSH
67138: CALL_OW 331
// end ;
67142: LD_VAR 0 5
67146: RET
// export function Video ( mode ) ; begin
67147: LD_INT 0
67149: PPUSH
// ingame_video = mode ;
67150: LD_ADDR_OWVAR 52
67154: PUSH
67155: LD_VAR 0 1
67159: ST_TO_ADDR
// interface_hidden = mode ;
67160: LD_ADDR_OWVAR 54
67164: PUSH
67165: LD_VAR 0 1
67169: ST_TO_ADDR
// end ;
67170: LD_VAR 0 2
67174: RET
// export function Join ( array , element ) ; begin
67175: LD_INT 0
67177: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67178: LD_ADDR_VAR 0 3
67182: PUSH
67183: LD_VAR 0 1
67187: PPUSH
67188: LD_VAR 0 1
67192: PUSH
67193: LD_INT 1
67195: PLUS
67196: PPUSH
67197: LD_VAR 0 2
67201: PPUSH
67202: CALL_OW 1
67206: ST_TO_ADDR
// end ;
67207: LD_VAR 0 3
67211: RET
// export function JoinUnion ( array , element ) ; begin
67212: LD_INT 0
67214: PPUSH
// result := array union element ;
67215: LD_ADDR_VAR 0 3
67219: PUSH
67220: LD_VAR 0 1
67224: PUSH
67225: LD_VAR 0 2
67229: UNION
67230: ST_TO_ADDR
// end ;
67231: LD_VAR 0 3
67235: RET
// export function GetBehemoths ( side ) ; begin
67236: LD_INT 0
67238: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67239: LD_ADDR_VAR 0 2
67243: PUSH
67244: LD_INT 22
67246: PUSH
67247: LD_VAR 0 1
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 31
67258: PUSH
67259: LD_INT 25
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PPUSH
67270: CALL_OW 69
67274: ST_TO_ADDR
// end ;
67275: LD_VAR 0 2
67279: RET
// export function Shuffle ( array ) ; var i , index ; begin
67280: LD_INT 0
67282: PPUSH
67283: PPUSH
67284: PPUSH
// result := [ ] ;
67285: LD_ADDR_VAR 0 2
67289: PUSH
67290: EMPTY
67291: ST_TO_ADDR
// if not array then
67292: LD_VAR 0 1
67296: NOT
67297: IFFALSE 67301
// exit ;
67299: GO 67400
// Randomize ;
67301: CALL_OW 10
// for i = array downto 1 do
67305: LD_ADDR_VAR 0 3
67309: PUSH
67310: DOUBLE
67311: LD_VAR 0 1
67315: INC
67316: ST_TO_ADDR
67317: LD_INT 1
67319: PUSH
67320: FOR_DOWNTO
67321: IFFALSE 67398
// begin index := rand ( 1 , array ) ;
67323: LD_ADDR_VAR 0 4
67327: PUSH
67328: LD_INT 1
67330: PPUSH
67331: LD_VAR 0 1
67335: PPUSH
67336: CALL_OW 12
67340: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67341: LD_ADDR_VAR 0 2
67345: PUSH
67346: LD_VAR 0 2
67350: PPUSH
67351: LD_VAR 0 2
67355: PUSH
67356: LD_INT 1
67358: PLUS
67359: PPUSH
67360: LD_VAR 0 1
67364: PUSH
67365: LD_VAR 0 4
67369: ARRAY
67370: PPUSH
67371: CALL_OW 2
67375: ST_TO_ADDR
// array := Delete ( array , index ) ;
67376: LD_ADDR_VAR 0 1
67380: PUSH
67381: LD_VAR 0 1
67385: PPUSH
67386: LD_VAR 0 4
67390: PPUSH
67391: CALL_OW 3
67395: ST_TO_ADDR
// end ;
67396: GO 67320
67398: POP
67399: POP
// end ;
67400: LD_VAR 0 2
67404: RET
// export function GetBaseMaterials ( base ) ; begin
67405: LD_INT 0
67407: PPUSH
// result := [ 0 , 0 , 0 ] ;
67408: LD_ADDR_VAR 0 2
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: EMPTY
67423: LIST
67424: LIST
67425: LIST
67426: ST_TO_ADDR
// if not base then
67427: LD_VAR 0 1
67431: NOT
67432: IFFALSE 67436
// exit ;
67434: GO 67485
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67436: LD_ADDR_VAR 0 2
67440: PUSH
67441: LD_VAR 0 1
67445: PPUSH
67446: LD_INT 1
67448: PPUSH
67449: CALL_OW 275
67453: PUSH
67454: LD_VAR 0 1
67458: PPUSH
67459: LD_INT 2
67461: PPUSH
67462: CALL_OW 275
67466: PUSH
67467: LD_VAR 0 1
67471: PPUSH
67472: LD_INT 3
67474: PPUSH
67475: CALL_OW 275
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: LIST
67484: ST_TO_ADDR
// end ;
67485: LD_VAR 0 2
67489: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67490: LD_INT 0
67492: PPUSH
67493: PPUSH
// result := array ;
67494: LD_ADDR_VAR 0 3
67498: PUSH
67499: LD_VAR 0 1
67503: ST_TO_ADDR
// if size >= result then
67504: LD_VAR 0 2
67508: PUSH
67509: LD_VAR 0 3
67513: GREATEREQUAL
67514: IFFALSE 67518
// exit ;
67516: GO 67568
// if size then
67518: LD_VAR 0 2
67522: IFFALSE 67568
// for i := array downto size do
67524: LD_ADDR_VAR 0 4
67528: PUSH
67529: DOUBLE
67530: LD_VAR 0 1
67534: INC
67535: ST_TO_ADDR
67536: LD_VAR 0 2
67540: PUSH
67541: FOR_DOWNTO
67542: IFFALSE 67566
// result := Delete ( result , result ) ;
67544: LD_ADDR_VAR 0 3
67548: PUSH
67549: LD_VAR 0 3
67553: PPUSH
67554: LD_VAR 0 3
67558: PPUSH
67559: CALL_OW 3
67563: ST_TO_ADDR
67564: GO 67541
67566: POP
67567: POP
// end ;
67568: LD_VAR 0 3
67572: RET
// export function ComExit ( unit ) ; var tmp ; begin
67573: LD_INT 0
67575: PPUSH
67576: PPUSH
// if not IsInUnit ( unit ) then
67577: LD_VAR 0 1
67581: PPUSH
67582: CALL_OW 310
67586: NOT
67587: IFFALSE 67591
// exit ;
67589: GO 67651
// tmp := IsInUnit ( unit ) ;
67591: LD_ADDR_VAR 0 3
67595: PUSH
67596: LD_VAR 0 1
67600: PPUSH
67601: CALL_OW 310
67605: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67606: LD_VAR 0 3
67610: PPUSH
67611: CALL_OW 247
67615: PUSH
67616: LD_INT 2
67618: EQUAL
67619: IFFALSE 67632
// ComExitVehicle ( unit ) else
67621: LD_VAR 0 1
67625: PPUSH
67626: CALL_OW 121
67630: GO 67641
// ComExitBuilding ( unit ) ;
67632: LD_VAR 0 1
67636: PPUSH
67637: CALL_OW 122
// result := tmp ;
67641: LD_ADDR_VAR 0 2
67645: PUSH
67646: LD_VAR 0 3
67650: ST_TO_ADDR
// end ;
67651: LD_VAR 0 2
67655: RET
// export function ComExitAll ( units ) ; var i ; begin
67656: LD_INT 0
67658: PPUSH
67659: PPUSH
// if not units then
67660: LD_VAR 0 1
67664: NOT
67665: IFFALSE 67669
// exit ;
67667: GO 67695
// for i in units do
67669: LD_ADDR_VAR 0 3
67673: PUSH
67674: LD_VAR 0 1
67678: PUSH
67679: FOR_IN
67680: IFFALSE 67693
// ComExit ( i ) ;
67682: LD_VAR 0 3
67686: PPUSH
67687: CALL 67573 0 1
67691: GO 67679
67693: POP
67694: POP
// end ;
67695: LD_VAR 0 2
67699: RET
// export function ResetHc ; begin
67700: LD_INT 0
67702: PPUSH
// InitHc ;
67703: CALL_OW 19
// hc_importance := 0 ;
67707: LD_ADDR_OWVAR 32
67711: PUSH
67712: LD_INT 0
67714: ST_TO_ADDR
// end ;
67715: LD_VAR 0 1
67719: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67720: LD_INT 0
67722: PPUSH
67723: PPUSH
67724: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67725: LD_ADDR_VAR 0 6
67729: PUSH
67730: LD_VAR 0 1
67734: PUSH
67735: LD_VAR 0 3
67739: PLUS
67740: PUSH
67741: LD_INT 2
67743: DIV
67744: ST_TO_ADDR
// if _x < 0 then
67745: LD_VAR 0 6
67749: PUSH
67750: LD_INT 0
67752: LESS
67753: IFFALSE 67770
// _x := _x * - 1 ;
67755: LD_ADDR_VAR 0 6
67759: PUSH
67760: LD_VAR 0 6
67764: PUSH
67765: LD_INT 1
67767: NEG
67768: MUL
67769: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67770: LD_ADDR_VAR 0 7
67774: PUSH
67775: LD_VAR 0 2
67779: PUSH
67780: LD_VAR 0 4
67784: PLUS
67785: PUSH
67786: LD_INT 2
67788: DIV
67789: ST_TO_ADDR
// if _y < 0 then
67790: LD_VAR 0 7
67794: PUSH
67795: LD_INT 0
67797: LESS
67798: IFFALSE 67815
// _y := _y * - 1 ;
67800: LD_ADDR_VAR 0 7
67804: PUSH
67805: LD_VAR 0 7
67809: PUSH
67810: LD_INT 1
67812: NEG
67813: MUL
67814: ST_TO_ADDR
// result := [ _x , _y ] ;
67815: LD_ADDR_VAR 0 5
67819: PUSH
67820: LD_VAR 0 6
67824: PUSH
67825: LD_VAR 0 7
67829: PUSH
67830: EMPTY
67831: LIST
67832: LIST
67833: ST_TO_ADDR
// end ;
67834: LD_VAR 0 5
67838: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67839: LD_INT 0
67841: PPUSH
67842: PPUSH
67843: PPUSH
67844: PPUSH
// task := GetTaskList ( unit ) ;
67845: LD_ADDR_VAR 0 7
67849: PUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: CALL_OW 437
67859: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67860: LD_VAR 0 7
67864: NOT
67865: PUSH
67866: LD_VAR 0 1
67870: PPUSH
67871: LD_VAR 0 2
67875: PPUSH
67876: CALL_OW 308
67880: NOT
67881: AND
67882: IFFALSE 67886
// exit ;
67884: GO 68004
// if IsInArea ( unit , area ) then
67886: LD_VAR 0 1
67890: PPUSH
67891: LD_VAR 0 2
67895: PPUSH
67896: CALL_OW 308
67900: IFFALSE 67918
// begin ComMoveToArea ( unit , goAway ) ;
67902: LD_VAR 0 1
67906: PPUSH
67907: LD_VAR 0 3
67911: PPUSH
67912: CALL_OW 113
// exit ;
67916: GO 68004
// end ; if task [ 1 ] [ 1 ] <> M then
67918: LD_VAR 0 7
67922: PUSH
67923: LD_INT 1
67925: ARRAY
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: PUSH
67931: LD_STRING M
67933: NONEQUAL
67934: IFFALSE 67938
// exit ;
67936: GO 68004
// x := task [ 1 ] [ 2 ] ;
67938: LD_ADDR_VAR 0 5
67942: PUSH
67943: LD_VAR 0 7
67947: PUSH
67948: LD_INT 1
67950: ARRAY
67951: PUSH
67952: LD_INT 2
67954: ARRAY
67955: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67956: LD_ADDR_VAR 0 6
67960: PUSH
67961: LD_VAR 0 7
67965: PUSH
67966: LD_INT 1
67968: ARRAY
67969: PUSH
67970: LD_INT 3
67972: ARRAY
67973: ST_TO_ADDR
// if InArea ( x , y , area ) then
67974: LD_VAR 0 5
67978: PPUSH
67979: LD_VAR 0 6
67983: PPUSH
67984: LD_VAR 0 2
67988: PPUSH
67989: CALL_OW 309
67993: IFFALSE 68004
// ComStop ( unit ) ;
67995: LD_VAR 0 1
67999: PPUSH
68000: CALL_OW 141
// end ;
68004: LD_VAR 0 4
68008: RET
// export function Abs ( value ) ; begin
68009: LD_INT 0
68011: PPUSH
// result := value ;
68012: LD_ADDR_VAR 0 2
68016: PUSH
68017: LD_VAR 0 1
68021: ST_TO_ADDR
// if value < 0 then
68022: LD_VAR 0 1
68026: PUSH
68027: LD_INT 0
68029: LESS
68030: IFFALSE 68047
// result := value * - 1 ;
68032: LD_ADDR_VAR 0 2
68036: PUSH
68037: LD_VAR 0 1
68041: PUSH
68042: LD_INT 1
68044: NEG
68045: MUL
68046: ST_TO_ADDR
// end ;
68047: LD_VAR 0 2
68051: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68052: LD_INT 0
68054: PPUSH
68055: PPUSH
68056: PPUSH
68057: PPUSH
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
// if not unit or not building then
68062: LD_VAR 0 1
68066: NOT
68067: PUSH
68068: LD_VAR 0 2
68072: NOT
68073: OR
68074: IFFALSE 68078
// exit ;
68076: GO 68304
// x := GetX ( building ) ;
68078: LD_ADDR_VAR 0 4
68082: PUSH
68083: LD_VAR 0 2
68087: PPUSH
68088: CALL_OW 250
68092: ST_TO_ADDR
// y := GetY ( building ) ;
68093: LD_ADDR_VAR 0 6
68097: PUSH
68098: LD_VAR 0 2
68102: PPUSH
68103: CALL_OW 251
68107: ST_TO_ADDR
// d := GetDir ( building ) ;
68108: LD_ADDR_VAR 0 8
68112: PUSH
68113: LD_VAR 0 2
68117: PPUSH
68118: CALL_OW 254
68122: ST_TO_ADDR
// r := 4 ;
68123: LD_ADDR_VAR 0 9
68127: PUSH
68128: LD_INT 4
68130: ST_TO_ADDR
// for i := 1 to 5 do
68131: LD_ADDR_VAR 0 10
68135: PUSH
68136: DOUBLE
68137: LD_INT 1
68139: DEC
68140: ST_TO_ADDR
68141: LD_INT 5
68143: PUSH
68144: FOR_TO
68145: IFFALSE 68302
// begin _x := ShiftX ( x , d , r + i ) ;
68147: LD_ADDR_VAR 0 5
68151: PUSH
68152: LD_VAR 0 4
68156: PPUSH
68157: LD_VAR 0 8
68161: PPUSH
68162: LD_VAR 0 9
68166: PUSH
68167: LD_VAR 0 10
68171: PLUS
68172: PPUSH
68173: CALL_OW 272
68177: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68178: LD_ADDR_VAR 0 7
68182: PUSH
68183: LD_VAR 0 6
68187: PPUSH
68188: LD_VAR 0 8
68192: PPUSH
68193: LD_VAR 0 9
68197: PUSH
68198: LD_VAR 0 10
68202: PLUS
68203: PPUSH
68204: CALL_OW 273
68208: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68209: LD_VAR 0 5
68213: PPUSH
68214: LD_VAR 0 7
68218: PPUSH
68219: CALL_OW 488
68223: PUSH
68224: LD_VAR 0 5
68228: PPUSH
68229: LD_VAR 0 7
68233: PPUSH
68234: CALL_OW 428
68238: PPUSH
68239: CALL_OW 247
68243: PUSH
68244: LD_INT 3
68246: PUSH
68247: LD_INT 2
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: IN
68254: NOT
68255: AND
68256: IFFALSE 68300
// begin ComMoveXY ( unit , _x , _y ) ;
68258: LD_VAR 0 1
68262: PPUSH
68263: LD_VAR 0 5
68267: PPUSH
68268: LD_VAR 0 7
68272: PPUSH
68273: CALL_OW 111
// result := [ _x , _y ] ;
68277: LD_ADDR_VAR 0 3
68281: PUSH
68282: LD_VAR 0 5
68286: PUSH
68287: LD_VAR 0 7
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: ST_TO_ADDR
// exit ;
68296: POP
68297: POP
68298: GO 68304
// end ; end ;
68300: GO 68144
68302: POP
68303: POP
// end ;
68304: LD_VAR 0 3
68308: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68309: LD_INT 0
68311: PPUSH
68312: PPUSH
68313: PPUSH
// result := 0 ;
68314: LD_ADDR_VAR 0 3
68318: PUSH
68319: LD_INT 0
68321: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68322: LD_VAR 0 1
68326: PUSH
68327: LD_INT 0
68329: LESS
68330: PUSH
68331: LD_VAR 0 1
68335: PUSH
68336: LD_INT 8
68338: GREATER
68339: OR
68340: PUSH
68341: LD_VAR 0 2
68345: PUSH
68346: LD_INT 0
68348: LESS
68349: OR
68350: PUSH
68351: LD_VAR 0 2
68355: PUSH
68356: LD_INT 8
68358: GREATER
68359: OR
68360: IFFALSE 68364
// exit ;
68362: GO 68439
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68364: LD_ADDR_VAR 0 4
68368: PUSH
68369: LD_INT 22
68371: PUSH
68372: LD_VAR 0 2
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PPUSH
68381: CALL_OW 69
68385: PUSH
68386: FOR_IN
68387: IFFALSE 68437
// begin un := UnitShoot ( i ) ;
68389: LD_ADDR_VAR 0 5
68393: PUSH
68394: LD_VAR 0 4
68398: PPUSH
68399: CALL_OW 504
68403: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68404: LD_VAR 0 5
68408: PPUSH
68409: CALL_OW 255
68413: PUSH
68414: LD_VAR 0 1
68418: EQUAL
68419: IFFALSE 68435
// begin result := un ;
68421: LD_ADDR_VAR 0 3
68425: PUSH
68426: LD_VAR 0 5
68430: ST_TO_ADDR
// exit ;
68431: POP
68432: POP
68433: GO 68439
// end ; end ;
68435: GO 68386
68437: POP
68438: POP
// end ;
68439: LD_VAR 0 3
68443: RET
// export function GetCargoBay ( units ) ; begin
68444: LD_INT 0
68446: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68447: LD_ADDR_VAR 0 2
68451: PUSH
68452: LD_VAR 0 1
68456: PPUSH
68457: LD_INT 2
68459: PUSH
68460: LD_INT 34
68462: PUSH
68463: LD_INT 12
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: PUSH
68470: LD_INT 34
68472: PUSH
68473: LD_INT 51
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 34
68482: PUSH
68483: LD_INT 32
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 34
68492: PUSH
68493: LD_INT 89
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: PPUSH
68507: CALL_OW 72
68511: ST_TO_ADDR
// end ;
68512: LD_VAR 0 2
68516: RET
// export function Negate ( value ) ; begin
68517: LD_INT 0
68519: PPUSH
// result := not value ;
68520: LD_ADDR_VAR 0 2
68524: PUSH
68525: LD_VAR 0 1
68529: NOT
68530: ST_TO_ADDR
// end ;
68531: LD_VAR 0 2
68535: RET
// export function Inc ( value ) ; begin
68536: LD_INT 0
68538: PPUSH
// result := value + 1 ;
68539: LD_ADDR_VAR 0 2
68543: PUSH
68544: LD_VAR 0 1
68548: PUSH
68549: LD_INT 1
68551: PLUS
68552: ST_TO_ADDR
// end ;
68553: LD_VAR 0 2
68557: RET
// export function Dec ( value ) ; begin
68558: LD_INT 0
68560: PPUSH
// result := value - 1 ;
68561: LD_ADDR_VAR 0 2
68565: PUSH
68566: LD_VAR 0 1
68570: PUSH
68571: LD_INT 1
68573: MINUS
68574: ST_TO_ADDR
// end ;
68575: LD_VAR 0 2
68579: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68580: LD_INT 0
68582: PPUSH
68583: PPUSH
68584: PPUSH
68585: PPUSH
68586: PPUSH
68587: PPUSH
68588: PPUSH
68589: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68590: LD_VAR 0 1
68594: PPUSH
68595: LD_VAR 0 2
68599: PPUSH
68600: CALL_OW 488
68604: NOT
68605: PUSH
68606: LD_VAR 0 3
68610: PPUSH
68611: LD_VAR 0 4
68615: PPUSH
68616: CALL_OW 488
68620: NOT
68621: OR
68622: IFFALSE 68635
// begin result := - 1 ;
68624: LD_ADDR_VAR 0 5
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: ST_TO_ADDR
// exit ;
68633: GO 68870
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68635: LD_ADDR_VAR 0 12
68639: PUSH
68640: LD_VAR 0 1
68644: PPUSH
68645: LD_VAR 0 2
68649: PPUSH
68650: LD_VAR 0 3
68654: PPUSH
68655: LD_VAR 0 4
68659: PPUSH
68660: CALL 67720 0 4
68664: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68665: LD_ADDR_VAR 0 11
68669: PUSH
68670: LD_VAR 0 1
68674: PPUSH
68675: LD_VAR 0 2
68679: PPUSH
68680: LD_VAR 0 12
68684: PUSH
68685: LD_INT 1
68687: ARRAY
68688: PPUSH
68689: LD_VAR 0 12
68693: PUSH
68694: LD_INT 2
68696: ARRAY
68697: PPUSH
68698: CALL_OW 298
68702: ST_TO_ADDR
// distance := 9999 ;
68703: LD_ADDR_VAR 0 10
68707: PUSH
68708: LD_INT 9999
68710: ST_TO_ADDR
// for i := 0 to 5 do
68711: LD_ADDR_VAR 0 6
68715: PUSH
68716: DOUBLE
68717: LD_INT 0
68719: DEC
68720: ST_TO_ADDR
68721: LD_INT 5
68723: PUSH
68724: FOR_TO
68725: IFFALSE 68868
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68727: LD_ADDR_VAR 0 7
68731: PUSH
68732: LD_VAR 0 1
68736: PPUSH
68737: LD_VAR 0 6
68741: PPUSH
68742: LD_VAR 0 11
68746: PPUSH
68747: CALL_OW 272
68751: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68752: LD_ADDR_VAR 0 8
68756: PUSH
68757: LD_VAR 0 2
68761: PPUSH
68762: LD_VAR 0 6
68766: PPUSH
68767: LD_VAR 0 11
68771: PPUSH
68772: CALL_OW 273
68776: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68777: LD_VAR 0 7
68781: PPUSH
68782: LD_VAR 0 8
68786: PPUSH
68787: CALL_OW 488
68791: NOT
68792: IFFALSE 68796
// continue ;
68794: GO 68724
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68796: LD_ADDR_VAR 0 9
68800: PUSH
68801: LD_VAR 0 12
68805: PUSH
68806: LD_INT 1
68808: ARRAY
68809: PPUSH
68810: LD_VAR 0 12
68814: PUSH
68815: LD_INT 2
68817: ARRAY
68818: PPUSH
68819: LD_VAR 0 7
68823: PPUSH
68824: LD_VAR 0 8
68828: PPUSH
68829: CALL_OW 298
68833: ST_TO_ADDR
// if tmp < distance then
68834: LD_VAR 0 9
68838: PUSH
68839: LD_VAR 0 10
68843: LESS
68844: IFFALSE 68866
// begin result := i ;
68846: LD_ADDR_VAR 0 5
68850: PUSH
68851: LD_VAR 0 6
68855: ST_TO_ADDR
// distance := tmp ;
68856: LD_ADDR_VAR 0 10
68860: PUSH
68861: LD_VAR 0 9
68865: ST_TO_ADDR
// end ; end ;
68866: GO 68724
68868: POP
68869: POP
// end ;
68870: LD_VAR 0 5
68874: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68875: LD_INT 0
68877: PPUSH
68878: PPUSH
// if not driver or not IsInUnit ( driver ) then
68879: LD_VAR 0 1
68883: NOT
68884: PUSH
68885: LD_VAR 0 1
68889: PPUSH
68890: CALL_OW 310
68894: NOT
68895: OR
68896: IFFALSE 68900
// exit ;
68898: GO 68990
// vehicle := IsInUnit ( driver ) ;
68900: LD_ADDR_VAR 0 3
68904: PUSH
68905: LD_VAR 0 1
68909: PPUSH
68910: CALL_OW 310
68914: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68915: LD_VAR 0 1
68919: PPUSH
68920: LD_STRING \
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: LD_INT 0
68928: PUSH
68929: LD_INT 0
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: LD_INT 0
68937: PUSH
68938: LD_INT 0
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: PUSH
68950: LD_STRING E
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: LD_INT 0
68958: PUSH
68959: LD_VAR 0 3
68963: PUSH
68964: LD_INT 0
68966: PUSH
68967: LD_INT 0
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PPUSH
68986: CALL_OW 446
// end ;
68990: LD_VAR 0 2
68994: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68995: LD_INT 0
68997: PPUSH
68998: PPUSH
// if not driver or not IsInUnit ( driver ) then
68999: LD_VAR 0 1
69003: NOT
69004: PUSH
69005: LD_VAR 0 1
69009: PPUSH
69010: CALL_OW 310
69014: NOT
69015: OR
69016: IFFALSE 69020
// exit ;
69018: GO 69110
// vehicle := IsInUnit ( driver ) ;
69020: LD_ADDR_VAR 0 3
69024: PUSH
69025: LD_VAR 0 1
69029: PPUSH
69030: CALL_OW 310
69034: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69035: LD_VAR 0 1
69039: PPUSH
69040: LD_STRING \
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: LD_INT 0
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: LD_INT 0
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: LIST
69065: LIST
69066: LIST
69067: LIST
69068: LIST
69069: PUSH
69070: LD_STRING E
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: LD_INT 0
69078: PUSH
69079: LD_VAR 0 3
69083: PUSH
69084: LD_INT 0
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PPUSH
69106: CALL_OW 447
// end ;
69110: LD_VAR 0 2
69114: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69115: LD_INT 0
69117: PPUSH
69118: PPUSH
69119: PPUSH
// tmp := [ ] ;
69120: LD_ADDR_VAR 0 5
69124: PUSH
69125: EMPTY
69126: ST_TO_ADDR
// for i in units do
69127: LD_ADDR_VAR 0 4
69131: PUSH
69132: LD_VAR 0 1
69136: PUSH
69137: FOR_IN
69138: IFFALSE 69176
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69140: LD_ADDR_VAR 0 5
69144: PUSH
69145: LD_VAR 0 5
69149: PPUSH
69150: LD_VAR 0 5
69154: PUSH
69155: LD_INT 1
69157: PLUS
69158: PPUSH
69159: LD_VAR 0 4
69163: PPUSH
69164: CALL_OW 256
69168: PPUSH
69169: CALL_OW 2
69173: ST_TO_ADDR
69174: GO 69137
69176: POP
69177: POP
// if not tmp then
69178: LD_VAR 0 5
69182: NOT
69183: IFFALSE 69187
// exit ;
69185: GO 69235
// if asc then
69187: LD_VAR 0 2
69191: IFFALSE 69215
// result := SortListByListAsc ( units , tmp ) else
69193: LD_ADDR_VAR 0 3
69197: PUSH
69198: LD_VAR 0 1
69202: PPUSH
69203: LD_VAR 0 5
69207: PPUSH
69208: CALL_OW 76
69212: ST_TO_ADDR
69213: GO 69235
// result := SortListByListDesc ( units , tmp ) ;
69215: LD_ADDR_VAR 0 3
69219: PUSH
69220: LD_VAR 0 1
69224: PPUSH
69225: LD_VAR 0 5
69229: PPUSH
69230: CALL_OW 77
69234: ST_TO_ADDR
// end ;
69235: LD_VAR 0 3
69239: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69240: LD_INT 0
69242: PPUSH
69243: PPUSH
// task := GetTaskList ( mech ) ;
69244: LD_ADDR_VAR 0 4
69248: PUSH
69249: LD_VAR 0 1
69253: PPUSH
69254: CALL_OW 437
69258: ST_TO_ADDR
// if not task then
69259: LD_VAR 0 4
69263: NOT
69264: IFFALSE 69268
// exit ;
69266: GO 69310
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69268: LD_ADDR_VAR 0 3
69272: PUSH
69273: LD_VAR 0 4
69277: PUSH
69278: LD_INT 1
69280: ARRAY
69281: PUSH
69282: LD_INT 1
69284: ARRAY
69285: PUSH
69286: LD_STRING r
69288: EQUAL
69289: PUSH
69290: LD_VAR 0 4
69294: PUSH
69295: LD_INT 1
69297: ARRAY
69298: PUSH
69299: LD_INT 4
69301: ARRAY
69302: PUSH
69303: LD_VAR 0 2
69307: EQUAL
69308: AND
69309: ST_TO_ADDR
// end ;
69310: LD_VAR 0 3
69314: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69315: LD_INT 0
69317: PPUSH
// SetDir ( unit , d ) ;
69318: LD_VAR 0 1
69322: PPUSH
69323: LD_VAR 0 4
69327: PPUSH
69328: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69332: LD_VAR 0 1
69336: PPUSH
69337: LD_VAR 0 2
69341: PPUSH
69342: LD_VAR 0 3
69346: PPUSH
69347: LD_VAR 0 5
69351: PPUSH
69352: CALL_OW 48
// end ;
69356: LD_VAR 0 6
69360: RET
// export function ToNaturalNumber ( number ) ; begin
69361: LD_INT 0
69363: PPUSH
// result := number div 1 ;
69364: LD_ADDR_VAR 0 2
69368: PUSH
69369: LD_VAR 0 1
69373: PUSH
69374: LD_INT 1
69376: DIV
69377: ST_TO_ADDR
// if number < 0 then
69378: LD_VAR 0 1
69382: PUSH
69383: LD_INT 0
69385: LESS
69386: IFFALSE 69396
// result := 0 ;
69388: LD_ADDR_VAR 0 2
69392: PUSH
69393: LD_INT 0
69395: ST_TO_ADDR
// end ;
69396: LD_VAR 0 2
69400: RET
// export function SortByClass ( units , class ) ; var un ; begin
69401: LD_INT 0
69403: PPUSH
69404: PPUSH
// if not units or not class then
69405: LD_VAR 0 1
69409: NOT
69410: PUSH
69411: LD_VAR 0 2
69415: NOT
69416: OR
69417: IFFALSE 69421
// exit ;
69419: GO 69516
// result := [ ] ;
69421: LD_ADDR_VAR 0 3
69425: PUSH
69426: EMPTY
69427: ST_TO_ADDR
// for un in units do
69428: LD_ADDR_VAR 0 4
69432: PUSH
69433: LD_VAR 0 1
69437: PUSH
69438: FOR_IN
69439: IFFALSE 69514
// if GetClass ( un ) = class then
69441: LD_VAR 0 4
69445: PPUSH
69446: CALL_OW 257
69450: PUSH
69451: LD_VAR 0 2
69455: EQUAL
69456: IFFALSE 69483
// result := Insert ( result , 1 , un ) else
69458: LD_ADDR_VAR 0 3
69462: PUSH
69463: LD_VAR 0 3
69467: PPUSH
69468: LD_INT 1
69470: PPUSH
69471: LD_VAR 0 4
69475: PPUSH
69476: CALL_OW 2
69480: ST_TO_ADDR
69481: GO 69512
// result := Replace ( result , result + 1 , un ) ;
69483: LD_ADDR_VAR 0 3
69487: PUSH
69488: LD_VAR 0 3
69492: PPUSH
69493: LD_VAR 0 3
69497: PUSH
69498: LD_INT 1
69500: PLUS
69501: PPUSH
69502: LD_VAR 0 4
69506: PPUSH
69507: CALL_OW 1
69511: ST_TO_ADDR
69512: GO 69438
69514: POP
69515: POP
// end ;
69516: LD_VAR 0 3
69520: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69521: LD_INT 0
69523: PPUSH
69524: PPUSH
69525: PPUSH
69526: PPUSH
69527: PPUSH
69528: PPUSH
69529: PPUSH
// result := [ ] ;
69530: LD_ADDR_VAR 0 4
69534: PUSH
69535: EMPTY
69536: ST_TO_ADDR
// if x - r < 0 then
69537: LD_VAR 0 1
69541: PUSH
69542: LD_VAR 0 3
69546: MINUS
69547: PUSH
69548: LD_INT 0
69550: LESS
69551: IFFALSE 69563
// min_x := 0 else
69553: LD_ADDR_VAR 0 8
69557: PUSH
69558: LD_INT 0
69560: ST_TO_ADDR
69561: GO 69579
// min_x := x - r ;
69563: LD_ADDR_VAR 0 8
69567: PUSH
69568: LD_VAR 0 1
69572: PUSH
69573: LD_VAR 0 3
69577: MINUS
69578: ST_TO_ADDR
// if y - r < 0 then
69579: LD_VAR 0 2
69583: PUSH
69584: LD_VAR 0 3
69588: MINUS
69589: PUSH
69590: LD_INT 0
69592: LESS
69593: IFFALSE 69605
// min_y := 0 else
69595: LD_ADDR_VAR 0 7
69599: PUSH
69600: LD_INT 0
69602: ST_TO_ADDR
69603: GO 69621
// min_y := y - r ;
69605: LD_ADDR_VAR 0 7
69609: PUSH
69610: LD_VAR 0 2
69614: PUSH
69615: LD_VAR 0 3
69619: MINUS
69620: ST_TO_ADDR
// max_x := x + r ;
69621: LD_ADDR_VAR 0 9
69625: PUSH
69626: LD_VAR 0 1
69630: PUSH
69631: LD_VAR 0 3
69635: PLUS
69636: ST_TO_ADDR
// max_y := y + r ;
69637: LD_ADDR_VAR 0 10
69641: PUSH
69642: LD_VAR 0 2
69646: PUSH
69647: LD_VAR 0 3
69651: PLUS
69652: ST_TO_ADDR
// for _x = min_x to max_x do
69653: LD_ADDR_VAR 0 5
69657: PUSH
69658: DOUBLE
69659: LD_VAR 0 8
69663: DEC
69664: ST_TO_ADDR
69665: LD_VAR 0 9
69669: PUSH
69670: FOR_TO
69671: IFFALSE 69772
// for _y = min_y to max_y do
69673: LD_ADDR_VAR 0 6
69677: PUSH
69678: DOUBLE
69679: LD_VAR 0 7
69683: DEC
69684: ST_TO_ADDR
69685: LD_VAR 0 10
69689: PUSH
69690: FOR_TO
69691: IFFALSE 69768
// begin if not ValidHex ( _x , _y ) then
69693: LD_VAR 0 5
69697: PPUSH
69698: LD_VAR 0 6
69702: PPUSH
69703: CALL_OW 488
69707: NOT
69708: IFFALSE 69712
// continue ;
69710: GO 69690
// if GetResourceTypeXY ( _x , _y ) then
69712: LD_VAR 0 5
69716: PPUSH
69717: LD_VAR 0 6
69721: PPUSH
69722: CALL_OW 283
69726: IFFALSE 69766
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69728: LD_ADDR_VAR 0 4
69732: PUSH
69733: LD_VAR 0 4
69737: PPUSH
69738: LD_VAR 0 4
69742: PUSH
69743: LD_INT 1
69745: PLUS
69746: PPUSH
69747: LD_VAR 0 5
69751: PUSH
69752: LD_VAR 0 6
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PPUSH
69761: CALL_OW 1
69765: ST_TO_ADDR
// end ;
69766: GO 69690
69768: POP
69769: POP
69770: GO 69670
69772: POP
69773: POP
// end ;
69774: LD_VAR 0 4
69778: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69779: LD_INT 0
69781: PPUSH
69782: PPUSH
69783: PPUSH
69784: PPUSH
69785: PPUSH
69786: PPUSH
69787: PPUSH
69788: PPUSH
// if not units then
69789: LD_VAR 0 1
69793: NOT
69794: IFFALSE 69798
// exit ;
69796: GO 70326
// result := UnitFilter ( units , [ f_ok ] ) ;
69798: LD_ADDR_VAR 0 3
69802: PUSH
69803: LD_VAR 0 1
69807: PPUSH
69808: LD_INT 50
69810: PUSH
69811: EMPTY
69812: LIST
69813: PPUSH
69814: CALL_OW 72
69818: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69819: LD_ADDR_VAR 0 8
69823: PUSH
69824: LD_VAR 0 1
69828: PUSH
69829: LD_INT 1
69831: ARRAY
69832: PPUSH
69833: CALL_OW 255
69837: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69838: LD_ADDR_VAR 0 10
69842: PUSH
69843: LD_INT 29
69845: PUSH
69846: LD_INT 91
69848: PUSH
69849: LD_INT 49
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: LIST
69856: ST_TO_ADDR
// if not result then
69857: LD_VAR 0 3
69861: NOT
69862: IFFALSE 69866
// exit ;
69864: GO 70326
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69866: LD_ADDR_VAR 0 5
69870: PUSH
69871: LD_INT 81
69873: PUSH
69874: LD_VAR 0 8
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PPUSH
69883: CALL_OW 69
69887: ST_TO_ADDR
// for i in result do
69888: LD_ADDR_VAR 0 4
69892: PUSH
69893: LD_VAR 0 3
69897: PUSH
69898: FOR_IN
69899: IFFALSE 70324
// begin tag := GetTag ( i ) + 1 ;
69901: LD_ADDR_VAR 0 9
69905: PUSH
69906: LD_VAR 0 4
69910: PPUSH
69911: CALL_OW 110
69915: PUSH
69916: LD_INT 1
69918: PLUS
69919: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69920: LD_ADDR_VAR 0 7
69924: PUSH
69925: LD_VAR 0 4
69929: PPUSH
69930: CALL_OW 250
69934: PPUSH
69935: LD_VAR 0 4
69939: PPUSH
69940: CALL_OW 251
69944: PPUSH
69945: LD_INT 4
69947: PPUSH
69948: CALL 69521 0 3
69952: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69953: LD_VAR 0 4
69957: PPUSH
69958: CALL_OW 247
69962: PUSH
69963: LD_INT 2
69965: EQUAL
69966: PUSH
69967: LD_VAR 0 7
69971: PUSH
69972: LD_INT 2
69974: GREATER
69975: AND
69976: PUSH
69977: LD_VAR 0 4
69981: PPUSH
69982: CALL_OW 264
69986: PUSH
69987: LD_VAR 0 10
69991: IN
69992: NOT
69993: AND
69994: IFFALSE 70033
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69996: LD_VAR 0 4
70000: PPUSH
70001: LD_VAR 0 7
70005: PUSH
70006: LD_INT 1
70008: ARRAY
70009: PUSH
70010: LD_INT 1
70012: ARRAY
70013: PPUSH
70014: LD_VAR 0 7
70018: PUSH
70019: LD_INT 1
70021: ARRAY
70022: PUSH
70023: LD_INT 2
70025: ARRAY
70026: PPUSH
70027: CALL_OW 116
70031: GO 70322
// if path > tag then
70033: LD_VAR 0 2
70037: PUSH
70038: LD_VAR 0 9
70042: GREATER
70043: IFFALSE 70251
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70045: LD_ADDR_VAR 0 6
70049: PUSH
70050: LD_VAR 0 5
70054: PPUSH
70055: LD_INT 91
70057: PUSH
70058: LD_VAR 0 4
70062: PUSH
70063: LD_INT 8
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: LIST
70070: PPUSH
70071: CALL_OW 72
70075: ST_TO_ADDR
// if nearEnemy then
70076: LD_VAR 0 6
70080: IFFALSE 70149
// begin if GetWeapon ( i ) = ru_time_lapser then
70082: LD_VAR 0 4
70086: PPUSH
70087: CALL_OW 264
70091: PUSH
70092: LD_INT 49
70094: EQUAL
70095: IFFALSE 70123
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70097: LD_VAR 0 4
70101: PPUSH
70102: LD_VAR 0 6
70106: PPUSH
70107: LD_VAR 0 4
70111: PPUSH
70112: CALL_OW 74
70116: PPUSH
70117: CALL_OW 112
70121: GO 70147
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70123: LD_VAR 0 4
70127: PPUSH
70128: LD_VAR 0 6
70132: PPUSH
70133: LD_VAR 0 4
70137: PPUSH
70138: CALL_OW 74
70142: PPUSH
70143: CALL 71397 0 2
// end else
70147: GO 70249
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70149: LD_VAR 0 4
70153: PPUSH
70154: LD_VAR 0 2
70158: PUSH
70159: LD_VAR 0 9
70163: ARRAY
70164: PUSH
70165: LD_INT 1
70167: ARRAY
70168: PPUSH
70169: LD_VAR 0 2
70173: PUSH
70174: LD_VAR 0 9
70178: ARRAY
70179: PUSH
70180: LD_INT 2
70182: ARRAY
70183: PPUSH
70184: CALL_OW 297
70188: PUSH
70189: LD_INT 6
70191: GREATER
70192: IFFALSE 70235
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70194: LD_VAR 0 4
70198: PPUSH
70199: LD_VAR 0 2
70203: PUSH
70204: LD_VAR 0 9
70208: ARRAY
70209: PUSH
70210: LD_INT 1
70212: ARRAY
70213: PPUSH
70214: LD_VAR 0 2
70218: PUSH
70219: LD_VAR 0 9
70223: ARRAY
70224: PUSH
70225: LD_INT 2
70227: ARRAY
70228: PPUSH
70229: CALL_OW 114
70233: GO 70249
// SetTag ( i , tag ) ;
70235: LD_VAR 0 4
70239: PPUSH
70240: LD_VAR 0 9
70244: PPUSH
70245: CALL_OW 109
// end else
70249: GO 70322
// if enemy then
70251: LD_VAR 0 5
70255: IFFALSE 70322
// begin if GetWeapon ( i ) = ru_time_lapser then
70257: LD_VAR 0 4
70261: PPUSH
70262: CALL_OW 264
70266: PUSH
70267: LD_INT 49
70269: EQUAL
70270: IFFALSE 70298
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70272: LD_VAR 0 4
70276: PPUSH
70277: LD_VAR 0 5
70281: PPUSH
70282: LD_VAR 0 4
70286: PPUSH
70287: CALL_OW 74
70291: PPUSH
70292: CALL_OW 112
70296: GO 70322
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70298: LD_VAR 0 4
70302: PPUSH
70303: LD_VAR 0 5
70307: PPUSH
70308: LD_VAR 0 4
70312: PPUSH
70313: CALL_OW 74
70317: PPUSH
70318: CALL 71397 0 2
// end ; end ;
70322: GO 69898
70324: POP
70325: POP
// end ;
70326: LD_VAR 0 3
70330: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70331: LD_INT 0
70333: PPUSH
70334: PPUSH
70335: PPUSH
// if not unit or IsInUnit ( unit ) then
70336: LD_VAR 0 1
70340: NOT
70341: PUSH
70342: LD_VAR 0 1
70346: PPUSH
70347: CALL_OW 310
70351: OR
70352: IFFALSE 70356
// exit ;
70354: GO 70447
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70356: LD_ADDR_VAR 0 4
70360: PUSH
70361: LD_VAR 0 1
70365: PPUSH
70366: CALL_OW 250
70370: PPUSH
70371: LD_VAR 0 2
70375: PPUSH
70376: LD_INT 1
70378: PPUSH
70379: CALL_OW 272
70383: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70384: LD_ADDR_VAR 0 5
70388: PUSH
70389: LD_VAR 0 1
70393: PPUSH
70394: CALL_OW 251
70398: PPUSH
70399: LD_VAR 0 2
70403: PPUSH
70404: LD_INT 1
70406: PPUSH
70407: CALL_OW 273
70411: ST_TO_ADDR
// if ValidHex ( x , y ) then
70412: LD_VAR 0 4
70416: PPUSH
70417: LD_VAR 0 5
70421: PPUSH
70422: CALL_OW 488
70426: IFFALSE 70447
// ComTurnXY ( unit , x , y ) ;
70428: LD_VAR 0 1
70432: PPUSH
70433: LD_VAR 0 4
70437: PPUSH
70438: LD_VAR 0 5
70442: PPUSH
70443: CALL_OW 118
// end ;
70447: LD_VAR 0 3
70451: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70452: LD_INT 0
70454: PPUSH
70455: PPUSH
// result := false ;
70456: LD_ADDR_VAR 0 3
70460: PUSH
70461: LD_INT 0
70463: ST_TO_ADDR
// if not units then
70464: LD_VAR 0 2
70468: NOT
70469: IFFALSE 70473
// exit ;
70471: GO 70518
// for i in units do
70473: LD_ADDR_VAR 0 4
70477: PUSH
70478: LD_VAR 0 2
70482: PUSH
70483: FOR_IN
70484: IFFALSE 70516
// if See ( side , i ) then
70486: LD_VAR 0 1
70490: PPUSH
70491: LD_VAR 0 4
70495: PPUSH
70496: CALL_OW 292
70500: IFFALSE 70514
// begin result := true ;
70502: LD_ADDR_VAR 0 3
70506: PUSH
70507: LD_INT 1
70509: ST_TO_ADDR
// exit ;
70510: POP
70511: POP
70512: GO 70518
// end ;
70514: GO 70483
70516: POP
70517: POP
// end ;
70518: LD_VAR 0 3
70522: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70523: LD_INT 0
70525: PPUSH
70526: PPUSH
70527: PPUSH
70528: PPUSH
// if not unit or not points then
70529: LD_VAR 0 1
70533: NOT
70534: PUSH
70535: LD_VAR 0 2
70539: NOT
70540: OR
70541: IFFALSE 70545
// exit ;
70543: GO 70635
// dist := 99999 ;
70545: LD_ADDR_VAR 0 5
70549: PUSH
70550: LD_INT 99999
70552: ST_TO_ADDR
// for i in points do
70553: LD_ADDR_VAR 0 4
70557: PUSH
70558: LD_VAR 0 2
70562: PUSH
70563: FOR_IN
70564: IFFALSE 70633
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70566: LD_ADDR_VAR 0 6
70570: PUSH
70571: LD_VAR 0 1
70575: PPUSH
70576: LD_VAR 0 4
70580: PUSH
70581: LD_INT 1
70583: ARRAY
70584: PPUSH
70585: LD_VAR 0 4
70589: PUSH
70590: LD_INT 2
70592: ARRAY
70593: PPUSH
70594: CALL_OW 297
70598: ST_TO_ADDR
// if tmpDist < dist then
70599: LD_VAR 0 6
70603: PUSH
70604: LD_VAR 0 5
70608: LESS
70609: IFFALSE 70631
// begin result := i ;
70611: LD_ADDR_VAR 0 3
70615: PUSH
70616: LD_VAR 0 4
70620: ST_TO_ADDR
// dist := tmpDist ;
70621: LD_ADDR_VAR 0 5
70625: PUSH
70626: LD_VAR 0 6
70630: ST_TO_ADDR
// end ; end ;
70631: GO 70563
70633: POP
70634: POP
// end ;
70635: LD_VAR 0 3
70639: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70640: LD_INT 0
70642: PPUSH
// uc_side := side ;
70643: LD_ADDR_OWVAR 20
70647: PUSH
70648: LD_VAR 0 1
70652: ST_TO_ADDR
// uc_nation := 3 ;
70653: LD_ADDR_OWVAR 21
70657: PUSH
70658: LD_INT 3
70660: ST_TO_ADDR
// vc_chassis := 25 ;
70661: LD_ADDR_OWVAR 37
70665: PUSH
70666: LD_INT 25
70668: ST_TO_ADDR
// vc_engine := engine_siberite ;
70669: LD_ADDR_OWVAR 39
70673: PUSH
70674: LD_INT 3
70676: ST_TO_ADDR
// vc_control := control_computer ;
70677: LD_ADDR_OWVAR 38
70681: PUSH
70682: LD_INT 3
70684: ST_TO_ADDR
// vc_weapon := 59 ;
70685: LD_ADDR_OWVAR 40
70689: PUSH
70690: LD_INT 59
70692: ST_TO_ADDR
// result := CreateVehicle ;
70693: LD_ADDR_VAR 0 5
70697: PUSH
70698: CALL_OW 45
70702: ST_TO_ADDR
// SetDir ( result , d ) ;
70703: LD_VAR 0 5
70707: PPUSH
70708: LD_VAR 0 4
70712: PPUSH
70713: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70717: LD_VAR 0 5
70721: PPUSH
70722: LD_VAR 0 2
70726: PPUSH
70727: LD_VAR 0 3
70731: PPUSH
70732: LD_INT 0
70734: PPUSH
70735: CALL_OW 48
// end ;
70739: LD_VAR 0 5
70743: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70744: LD_INT 0
70746: PPUSH
70747: PPUSH
70748: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70749: LD_ADDR_VAR 0 2
70753: PUSH
70754: LD_INT 0
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: LD_INT 0
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70772: LD_VAR 0 1
70776: NOT
70777: PUSH
70778: LD_VAR 0 1
70782: PPUSH
70783: CALL_OW 264
70787: PUSH
70788: LD_INT 12
70790: PUSH
70791: LD_INT 51
70793: PUSH
70794: LD_INT 32
70796: PUSH
70797: LD_INT 89
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: IN
70806: NOT
70807: OR
70808: IFFALSE 70812
// exit ;
70810: GO 70910
// for i := 1 to 3 do
70812: LD_ADDR_VAR 0 3
70816: PUSH
70817: DOUBLE
70818: LD_INT 1
70820: DEC
70821: ST_TO_ADDR
70822: LD_INT 3
70824: PUSH
70825: FOR_TO
70826: IFFALSE 70908
// begin tmp := GetCargo ( cargo , i ) ;
70828: LD_ADDR_VAR 0 4
70832: PUSH
70833: LD_VAR 0 1
70837: PPUSH
70838: LD_VAR 0 3
70842: PPUSH
70843: CALL_OW 289
70847: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70848: LD_ADDR_VAR 0 2
70852: PUSH
70853: LD_VAR 0 2
70857: PPUSH
70858: LD_VAR 0 3
70862: PPUSH
70863: LD_VAR 0 4
70867: PPUSH
70868: CALL_OW 1
70872: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70873: LD_ADDR_VAR 0 2
70877: PUSH
70878: LD_VAR 0 2
70882: PPUSH
70883: LD_INT 4
70885: PPUSH
70886: LD_VAR 0 2
70890: PUSH
70891: LD_INT 4
70893: ARRAY
70894: PUSH
70895: LD_VAR 0 4
70899: PLUS
70900: PPUSH
70901: CALL_OW 1
70905: ST_TO_ADDR
// end ;
70906: GO 70825
70908: POP
70909: POP
// end ;
70910: LD_VAR 0 2
70914: RET
// export function Length ( array ) ; begin
70915: LD_INT 0
70917: PPUSH
// result := array + 0 ;
70918: LD_ADDR_VAR 0 2
70922: PUSH
70923: LD_VAR 0 1
70927: PUSH
70928: LD_INT 0
70930: PLUS
70931: ST_TO_ADDR
// end ;
70932: LD_VAR 0 2
70936: RET
// export function PrepareArray ( array ) ; begin
70937: LD_INT 0
70939: PPUSH
// result := array diff 0 ;
70940: LD_ADDR_VAR 0 2
70944: PUSH
70945: LD_VAR 0 1
70949: PUSH
70950: LD_INT 0
70952: DIFF
70953: ST_TO_ADDR
// if not result [ 1 ] then
70954: LD_VAR 0 2
70958: PUSH
70959: LD_INT 1
70961: ARRAY
70962: NOT
70963: IFFALSE 70983
// result := Delete ( result , 1 ) ;
70965: LD_ADDR_VAR 0 2
70969: PUSH
70970: LD_VAR 0 2
70974: PPUSH
70975: LD_INT 1
70977: PPUSH
70978: CALL_OW 3
70982: ST_TO_ADDR
// end ;
70983: LD_VAR 0 2
70987: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70988: LD_INT 0
70990: PPUSH
70991: PPUSH
70992: PPUSH
70993: PPUSH
// sibRocketRange := 25 ;
70994: LD_ADDR_VAR 0 6
70998: PUSH
70999: LD_INT 25
71001: ST_TO_ADDR
// result := false ;
71002: LD_ADDR_VAR 0 4
71006: PUSH
71007: LD_INT 0
71009: ST_TO_ADDR
// for i := 0 to 5 do
71010: LD_ADDR_VAR 0 5
71014: PUSH
71015: DOUBLE
71016: LD_INT 0
71018: DEC
71019: ST_TO_ADDR
71020: LD_INT 5
71022: PUSH
71023: FOR_TO
71024: IFFALSE 71091
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71026: LD_VAR 0 1
71030: PPUSH
71031: LD_VAR 0 5
71035: PPUSH
71036: LD_VAR 0 6
71040: PPUSH
71041: CALL_OW 272
71045: PPUSH
71046: LD_VAR 0 2
71050: PPUSH
71051: LD_VAR 0 5
71055: PPUSH
71056: LD_VAR 0 6
71060: PPUSH
71061: CALL_OW 273
71065: PPUSH
71066: LD_VAR 0 3
71070: PPUSH
71071: CALL_OW 309
71075: IFFALSE 71089
// begin result := true ;
71077: LD_ADDR_VAR 0 4
71081: PUSH
71082: LD_INT 1
71084: ST_TO_ADDR
// exit ;
71085: POP
71086: POP
71087: GO 71093
// end ;
71089: GO 71023
71091: POP
71092: POP
// end ;
71093: LD_VAR 0 4
71097: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71098: LD_INT 0
71100: PPUSH
71101: PPUSH
71102: PPUSH
// if btype = b_depot then
71103: LD_VAR 0 2
71107: PUSH
71108: LD_INT 0
71110: EQUAL
71111: IFFALSE 71123
// begin result := true ;
71113: LD_ADDR_VAR 0 3
71117: PUSH
71118: LD_INT 1
71120: ST_TO_ADDR
// exit ;
71121: GO 71239
// end ; pom := GetBase ( depot ) ;
71123: LD_ADDR_VAR 0 4
71127: PUSH
71128: LD_VAR 0 1
71132: PPUSH
71133: CALL_OW 274
71137: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71138: LD_ADDR_VAR 0 5
71142: PUSH
71143: LD_VAR 0 2
71147: PPUSH
71148: LD_VAR 0 1
71152: PPUSH
71153: CALL_OW 248
71157: PPUSH
71158: CALL_OW 450
71162: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71163: LD_ADDR_VAR 0 3
71167: PUSH
71168: LD_VAR 0 4
71172: PPUSH
71173: LD_INT 1
71175: PPUSH
71176: CALL_OW 275
71180: PUSH
71181: LD_VAR 0 5
71185: PUSH
71186: LD_INT 1
71188: ARRAY
71189: GREATEREQUAL
71190: PUSH
71191: LD_VAR 0 4
71195: PPUSH
71196: LD_INT 2
71198: PPUSH
71199: CALL_OW 275
71203: PUSH
71204: LD_VAR 0 5
71208: PUSH
71209: LD_INT 2
71211: ARRAY
71212: GREATEREQUAL
71213: AND
71214: PUSH
71215: LD_VAR 0 4
71219: PPUSH
71220: LD_INT 3
71222: PPUSH
71223: CALL_OW 275
71227: PUSH
71228: LD_VAR 0 5
71232: PUSH
71233: LD_INT 3
71235: ARRAY
71236: GREATEREQUAL
71237: AND
71238: ST_TO_ADDR
// end ;
71239: LD_VAR 0 3
71243: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71244: LD_INT 0
71246: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71247: LD_VAR 0 1
71251: PPUSH
71252: LD_VAR 0 2
71256: PPUSH
71257: LD_INT 0
71259: PPUSH
71260: LD_INT 0
71262: PPUSH
71263: LD_INT 1
71265: PPUSH
71266: LD_INT 0
71268: PPUSH
71269: CALL_OW 587
// end ;
71273: LD_VAR 0 3
71277: RET
// export function CenterOnNow ( unit ) ; begin
71278: LD_INT 0
71280: PPUSH
// result := IsInUnit ( unit ) ;
71281: LD_ADDR_VAR 0 2
71285: PUSH
71286: LD_VAR 0 1
71290: PPUSH
71291: CALL_OW 310
71295: ST_TO_ADDR
// if not result then
71296: LD_VAR 0 2
71300: NOT
71301: IFFALSE 71313
// result := unit ;
71303: LD_ADDR_VAR 0 2
71307: PUSH
71308: LD_VAR 0 1
71312: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71313: LD_VAR 0 1
71317: PPUSH
71318: CALL_OW 87
// end ;
71322: LD_VAR 0 2
71326: RET
// export function ComMoveHex ( unit , hex ) ; begin
71327: LD_INT 0
71329: PPUSH
// if not hex then
71330: LD_VAR 0 2
71334: NOT
71335: IFFALSE 71339
// exit ;
71337: GO 71392
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71339: LD_VAR 0 2
71343: PUSH
71344: LD_INT 1
71346: ARRAY
71347: PPUSH
71348: LD_VAR 0 2
71352: PUSH
71353: LD_INT 2
71355: ARRAY
71356: PPUSH
71357: CALL_OW 428
71361: IFFALSE 71365
// exit ;
71363: GO 71392
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71365: LD_VAR 0 1
71369: PPUSH
71370: LD_VAR 0 2
71374: PUSH
71375: LD_INT 1
71377: ARRAY
71378: PPUSH
71379: LD_VAR 0 2
71383: PUSH
71384: LD_INT 2
71386: ARRAY
71387: PPUSH
71388: CALL_OW 111
// end ;
71392: LD_VAR 0 3
71396: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71397: LD_INT 0
71399: PPUSH
71400: PPUSH
71401: PPUSH
// if not unit or not enemy then
71402: LD_VAR 0 1
71406: NOT
71407: PUSH
71408: LD_VAR 0 2
71412: NOT
71413: OR
71414: IFFALSE 71418
// exit ;
71416: GO 71542
// x := GetX ( enemy ) ;
71418: LD_ADDR_VAR 0 4
71422: PUSH
71423: LD_VAR 0 2
71427: PPUSH
71428: CALL_OW 250
71432: ST_TO_ADDR
// y := GetY ( enemy ) ;
71433: LD_ADDR_VAR 0 5
71437: PUSH
71438: LD_VAR 0 2
71442: PPUSH
71443: CALL_OW 251
71447: ST_TO_ADDR
// if ValidHex ( x , y ) then
71448: LD_VAR 0 4
71452: PPUSH
71453: LD_VAR 0 5
71457: PPUSH
71458: CALL_OW 488
71462: IFFALSE 71542
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71464: LD_VAR 0 2
71468: PPUSH
71469: CALL_OW 247
71473: PUSH
71474: LD_INT 3
71476: PUSH
71477: LD_INT 2
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: IN
71484: PUSH
71485: LD_VAR 0 1
71489: PPUSH
71490: CALL_OW 255
71494: PPUSH
71495: LD_VAR 0 2
71499: PPUSH
71500: CALL_OW 292
71504: OR
71505: IFFALSE 71523
// ComAttackUnit ( unit , enemy ) else
71507: LD_VAR 0 1
71511: PPUSH
71512: LD_VAR 0 2
71516: PPUSH
71517: CALL_OW 115
71521: GO 71542
// ComAgressiveMove ( unit , x , y ) ;
71523: LD_VAR 0 1
71527: PPUSH
71528: LD_VAR 0 4
71532: PPUSH
71533: LD_VAR 0 5
71537: PPUSH
71538: CALL_OW 114
// end ;
71542: LD_VAR 0 3
71546: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71547: LD_INT 0
71549: PPUSH
71550: PPUSH
71551: PPUSH
// list := AreaToList ( area , 0 ) ;
71552: LD_ADDR_VAR 0 5
71556: PUSH
71557: LD_VAR 0 1
71561: PPUSH
71562: LD_INT 0
71564: PPUSH
71565: CALL_OW 517
71569: ST_TO_ADDR
// if not list then
71570: LD_VAR 0 5
71574: NOT
71575: IFFALSE 71579
// exit ;
71577: GO 71709
// if all then
71579: LD_VAR 0 2
71583: IFFALSE 71671
// begin for i := 1 to list [ 1 ] do
71585: LD_ADDR_VAR 0 4
71589: PUSH
71590: DOUBLE
71591: LD_INT 1
71593: DEC
71594: ST_TO_ADDR
71595: LD_VAR 0 5
71599: PUSH
71600: LD_INT 1
71602: ARRAY
71603: PUSH
71604: FOR_TO
71605: IFFALSE 71667
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71607: LD_ADDR_VAR 0 3
71611: PUSH
71612: LD_VAR 0 3
71616: PPUSH
71617: LD_VAR 0 3
71621: PUSH
71622: LD_INT 1
71624: PLUS
71625: PPUSH
71626: LD_VAR 0 5
71630: PUSH
71631: LD_INT 1
71633: ARRAY
71634: PUSH
71635: LD_VAR 0 4
71639: ARRAY
71640: PUSH
71641: LD_VAR 0 5
71645: PUSH
71646: LD_INT 2
71648: ARRAY
71649: PUSH
71650: LD_VAR 0 4
71654: ARRAY
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PPUSH
71660: CALL_OW 1
71664: ST_TO_ADDR
71665: GO 71604
71667: POP
71668: POP
// exit ;
71669: GO 71709
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71671: LD_ADDR_VAR 0 3
71675: PUSH
71676: LD_VAR 0 5
71680: PUSH
71681: LD_INT 1
71683: ARRAY
71684: PUSH
71685: LD_INT 1
71687: ARRAY
71688: PUSH
71689: LD_VAR 0 5
71693: PUSH
71694: LD_INT 2
71696: ARRAY
71697: PUSH
71698: LD_INT 1
71700: ARRAY
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: EMPTY
71707: LIST
71708: ST_TO_ADDR
// end ;
71709: LD_VAR 0 3
71713: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71714: LD_INT 0
71716: PPUSH
71717: PPUSH
// list := AreaToList ( area , 0 ) ;
71718: LD_ADDR_VAR 0 4
71722: PUSH
71723: LD_VAR 0 1
71727: PPUSH
71728: LD_INT 0
71730: PPUSH
71731: CALL_OW 517
71735: ST_TO_ADDR
// if not list then
71736: LD_VAR 0 4
71740: NOT
71741: IFFALSE 71745
// exit ;
71743: GO 71786
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71745: LD_ADDR_VAR 0 3
71749: PUSH
71750: LD_VAR 0 4
71754: PUSH
71755: LD_INT 1
71757: ARRAY
71758: PUSH
71759: LD_INT 1
71761: ARRAY
71762: PUSH
71763: LD_VAR 0 4
71767: PUSH
71768: LD_INT 2
71770: ARRAY
71771: PUSH
71772: LD_INT 1
71774: ARRAY
71775: PUSH
71776: LD_VAR 0 2
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: LIST
71785: ST_TO_ADDR
// end ;
71786: LD_VAR 0 3
71790: RET
// export function First ( array ) ; begin
71791: LD_INT 0
71793: PPUSH
// if not array then
71794: LD_VAR 0 1
71798: NOT
71799: IFFALSE 71803
// exit ;
71801: GO 71817
// result := array [ 1 ] ;
71803: LD_ADDR_VAR 0 2
71807: PUSH
71808: LD_VAR 0 1
71812: PUSH
71813: LD_INT 1
71815: ARRAY
71816: ST_TO_ADDR
// end ;
71817: LD_VAR 0 2
71821: RET
// export function Last ( array ) ; begin
71822: LD_INT 0
71824: PPUSH
// if not array then
71825: LD_VAR 0 1
71829: NOT
71830: IFFALSE 71834
// exit ;
71832: GO 71850
// result := array [ array ] ;
71834: LD_ADDR_VAR 0 2
71838: PUSH
71839: LD_VAR 0 1
71843: PUSH
71844: LD_VAR 0 1
71848: ARRAY
71849: ST_TO_ADDR
// end ;
71850: LD_VAR 0 2
71854: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71855: LD_INT 0
71857: PPUSH
71858: PPUSH
// result := [ ] ;
71859: LD_ADDR_VAR 0 5
71863: PUSH
71864: EMPTY
71865: ST_TO_ADDR
// if not array then
71866: LD_VAR 0 1
71870: NOT
71871: IFFALSE 71875
// exit ;
71873: GO 71987
// for i := 1 to array do
71875: LD_ADDR_VAR 0 6
71879: PUSH
71880: DOUBLE
71881: LD_INT 1
71883: DEC
71884: ST_TO_ADDR
71885: LD_VAR 0 1
71889: PUSH
71890: FOR_TO
71891: IFFALSE 71985
// if array [ i ] [ index ] = value then
71893: LD_VAR 0 1
71897: PUSH
71898: LD_VAR 0 6
71902: ARRAY
71903: PUSH
71904: LD_VAR 0 2
71908: ARRAY
71909: PUSH
71910: LD_VAR 0 3
71914: EQUAL
71915: IFFALSE 71983
// begin if indexColumn then
71917: LD_VAR 0 4
71921: IFFALSE 71957
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71923: LD_ADDR_VAR 0 5
71927: PUSH
71928: LD_VAR 0 5
71932: PPUSH
71933: LD_VAR 0 1
71937: PUSH
71938: LD_VAR 0 6
71942: ARRAY
71943: PUSH
71944: LD_VAR 0 4
71948: ARRAY
71949: PPUSH
71950: CALL 67175 0 2
71954: ST_TO_ADDR
71955: GO 71983
// result := Join ( result , array [ i ] ) ;
71957: LD_ADDR_VAR 0 5
71961: PUSH
71962: LD_VAR 0 5
71966: PPUSH
71967: LD_VAR 0 1
71971: PUSH
71972: LD_VAR 0 6
71976: ARRAY
71977: PPUSH
71978: CALL 67175 0 2
71982: ST_TO_ADDR
// end ;
71983: GO 71890
71985: POP
71986: POP
// end ;
71987: LD_VAR 0 5
71991: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71992: LD_INT 0
71994: PPUSH
// if not vehicles or not parkingPoint then
71995: LD_VAR 0 1
71999: NOT
72000: PUSH
72001: LD_VAR 0 2
72005: NOT
72006: OR
72007: IFFALSE 72011
// exit ;
72009: GO 72109
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72011: LD_ADDR_VAR 0 1
72015: PUSH
72016: LD_VAR 0 1
72020: PPUSH
72021: LD_INT 50
72023: PUSH
72024: EMPTY
72025: LIST
72026: PUSH
72027: LD_INT 3
72029: PUSH
72030: LD_INT 92
72032: PUSH
72033: LD_VAR 0 2
72037: PUSH
72038: LD_INT 1
72040: ARRAY
72041: PUSH
72042: LD_VAR 0 2
72046: PUSH
72047: LD_INT 2
72049: ARRAY
72050: PUSH
72051: LD_INT 8
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PPUSH
72068: CALL_OW 72
72072: ST_TO_ADDR
// if not vehicles then
72073: LD_VAR 0 1
72077: NOT
72078: IFFALSE 72082
// exit ;
72080: GO 72109
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72082: LD_VAR 0 1
72086: PPUSH
72087: LD_VAR 0 2
72091: PUSH
72092: LD_INT 1
72094: ARRAY
72095: PPUSH
72096: LD_VAR 0 2
72100: PUSH
72101: LD_INT 2
72103: ARRAY
72104: PPUSH
72105: CALL_OW 111
// end ;
72109: LD_VAR 0 3
72113: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72114: LD_INT 0
72116: PPUSH
72117: PPUSH
72118: PPUSH
// if not side or not area then
72119: LD_VAR 0 1
72123: NOT
72124: PUSH
72125: LD_VAR 0 2
72129: NOT
72130: OR
72131: IFFALSE 72135
// exit ;
72133: GO 72254
// tmp := AreaToList ( area , 0 ) ;
72135: LD_ADDR_VAR 0 5
72139: PUSH
72140: LD_VAR 0 2
72144: PPUSH
72145: LD_INT 0
72147: PPUSH
72148: CALL_OW 517
72152: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72153: LD_ADDR_VAR 0 4
72157: PUSH
72158: DOUBLE
72159: LD_INT 1
72161: DEC
72162: ST_TO_ADDR
72163: LD_VAR 0 5
72167: PUSH
72168: LD_INT 1
72170: ARRAY
72171: PUSH
72172: FOR_TO
72173: IFFALSE 72252
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72175: LD_VAR 0 5
72179: PUSH
72180: LD_INT 1
72182: ARRAY
72183: PUSH
72184: LD_VAR 0 4
72188: ARRAY
72189: PPUSH
72190: LD_VAR 0 5
72194: PUSH
72195: LD_INT 2
72197: ARRAY
72198: PUSH
72199: LD_VAR 0 4
72203: ARRAY
72204: PPUSH
72205: CALL_OW 351
72209: IFFALSE 72250
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72211: LD_VAR 0 5
72215: PUSH
72216: LD_INT 1
72218: ARRAY
72219: PUSH
72220: LD_VAR 0 4
72224: ARRAY
72225: PPUSH
72226: LD_VAR 0 5
72230: PUSH
72231: LD_INT 2
72233: ARRAY
72234: PUSH
72235: LD_VAR 0 4
72239: ARRAY
72240: PPUSH
72241: LD_VAR 0 1
72245: PPUSH
72246: CALL_OW 244
// end ;
72250: GO 72172
72252: POP
72253: POP
// end ; end_of_file end_of_file
72254: LD_VAR 0 3
72258: RET
// export globalGameSaveCounter ; every 0 0$1 do
72259: GO 72261
72261: DISABLE
// begin enable ;
72262: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72263: LD_STRING updateTimer(
72265: PUSH
72266: LD_OWVAR 1
72270: STR
72271: PUSH
72272: LD_STRING );
72274: STR
72275: PPUSH
72276: CALL_OW 559
// end ;
72280: END
// every 0 0$1 do
72281: GO 72283
72283: DISABLE
// begin globalGameSaveCounter := 0 ;
72284: LD_ADDR_EXP 63
72288: PUSH
72289: LD_INT 0
72291: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72292: LD_STRING setGameSaveCounter(0)
72294: PPUSH
72295: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72299: LD_STRING initStreamRollete();
72301: PPUSH
72302: CALL_OW 559
// InitStreamMode ;
72306: CALL 73649 0 0
// DefineStreamItems ( false ) ;
72310: LD_INT 0
72312: PPUSH
72313: CALL 74113 0 1
// end ;
72317: END
// export function SOS_MapStart ( ) ; begin
72318: LD_INT 0
72320: PPUSH
// if streamModeActive then
72321: LD_EXP 64
72325: IFFALSE 72334
// DefineStreamItems ( true ) ;
72327: LD_INT 1
72329: PPUSH
72330: CALL 74113 0 1
// UpdateLuaVariables ( ) ;
72334: CALL 72351 0 0
// UpdateFactoryWaypoints ( ) ;
72338: CALL 87115 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72342: CALL 87367 0 0
// end ;
72346: LD_VAR 0 1
72350: RET
// function UpdateLuaVariables ( ) ; begin
72351: LD_INT 0
72353: PPUSH
// if globalGameSaveCounter then
72354: LD_EXP 63
72358: IFFALSE 72392
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72360: LD_ADDR_EXP 63
72364: PUSH
72365: LD_EXP 63
72369: PPUSH
72370: CALL 68536 0 1
72374: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72375: LD_STRING setGameSaveCounter(
72377: PUSH
72378: LD_EXP 63
72382: STR
72383: PUSH
72384: LD_STRING )
72386: STR
72387: PPUSH
72388: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72392: LD_STRING setGameDifficulty(
72394: PUSH
72395: LD_OWVAR 67
72399: STR
72400: PUSH
72401: LD_STRING )
72403: STR
72404: PPUSH
72405: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72409: LD_STRING displayDifficulty(
72411: PUSH
72412: LD_OWVAR 67
72416: STR
72417: PUSH
72418: LD_STRING )
72420: STR
72421: PPUSH
72422: CALL_OW 559
// end ;
72426: LD_VAR 0 1
72430: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72431: LD_INT 0
72433: PPUSH
// if p2 = stream_mode then
72434: LD_VAR 0 2
72438: PUSH
72439: LD_INT 100
72441: EQUAL
72442: IFFALSE 73445
// begin if not StreamModeActive then
72444: LD_EXP 64
72448: NOT
72449: IFFALSE 72459
// StreamModeActive := true ;
72451: LD_ADDR_EXP 64
72455: PUSH
72456: LD_INT 1
72458: ST_TO_ADDR
// if p3 = 0 then
72459: LD_VAR 0 3
72463: PUSH
72464: LD_INT 0
72466: EQUAL
72467: IFFALSE 72473
// InitStreamMode ;
72469: CALL 73649 0 0
// if p3 = 1 then
72473: LD_VAR 0 3
72477: PUSH
72478: LD_INT 1
72480: EQUAL
72481: IFFALSE 72491
// sRocket := true ;
72483: LD_ADDR_EXP 69
72487: PUSH
72488: LD_INT 1
72490: ST_TO_ADDR
// if p3 = 2 then
72491: LD_VAR 0 3
72495: PUSH
72496: LD_INT 2
72498: EQUAL
72499: IFFALSE 72509
// sSpeed := true ;
72501: LD_ADDR_EXP 68
72505: PUSH
72506: LD_INT 1
72508: ST_TO_ADDR
// if p3 = 3 then
72509: LD_VAR 0 3
72513: PUSH
72514: LD_INT 3
72516: EQUAL
72517: IFFALSE 72527
// sEngine := true ;
72519: LD_ADDR_EXP 70
72523: PUSH
72524: LD_INT 1
72526: ST_TO_ADDR
// if p3 = 4 then
72527: LD_VAR 0 3
72531: PUSH
72532: LD_INT 4
72534: EQUAL
72535: IFFALSE 72545
// sSpec := true ;
72537: LD_ADDR_EXP 67
72541: PUSH
72542: LD_INT 1
72544: ST_TO_ADDR
// if p3 = 5 then
72545: LD_VAR 0 3
72549: PUSH
72550: LD_INT 5
72552: EQUAL
72553: IFFALSE 72563
// sLevel := true ;
72555: LD_ADDR_EXP 71
72559: PUSH
72560: LD_INT 1
72562: ST_TO_ADDR
// if p3 = 6 then
72563: LD_VAR 0 3
72567: PUSH
72568: LD_INT 6
72570: EQUAL
72571: IFFALSE 72581
// sArmoury := true ;
72573: LD_ADDR_EXP 72
72577: PUSH
72578: LD_INT 1
72580: ST_TO_ADDR
// if p3 = 7 then
72581: LD_VAR 0 3
72585: PUSH
72586: LD_INT 7
72588: EQUAL
72589: IFFALSE 72599
// sRadar := true ;
72591: LD_ADDR_EXP 73
72595: PUSH
72596: LD_INT 1
72598: ST_TO_ADDR
// if p3 = 8 then
72599: LD_VAR 0 3
72603: PUSH
72604: LD_INT 8
72606: EQUAL
72607: IFFALSE 72617
// sBunker := true ;
72609: LD_ADDR_EXP 74
72613: PUSH
72614: LD_INT 1
72616: ST_TO_ADDR
// if p3 = 9 then
72617: LD_VAR 0 3
72621: PUSH
72622: LD_INT 9
72624: EQUAL
72625: IFFALSE 72635
// sHack := true ;
72627: LD_ADDR_EXP 75
72631: PUSH
72632: LD_INT 1
72634: ST_TO_ADDR
// if p3 = 10 then
72635: LD_VAR 0 3
72639: PUSH
72640: LD_INT 10
72642: EQUAL
72643: IFFALSE 72653
// sFire := true ;
72645: LD_ADDR_EXP 76
72649: PUSH
72650: LD_INT 1
72652: ST_TO_ADDR
// if p3 = 11 then
72653: LD_VAR 0 3
72657: PUSH
72658: LD_INT 11
72660: EQUAL
72661: IFFALSE 72671
// sRefresh := true ;
72663: LD_ADDR_EXP 77
72667: PUSH
72668: LD_INT 1
72670: ST_TO_ADDR
// if p3 = 12 then
72671: LD_VAR 0 3
72675: PUSH
72676: LD_INT 12
72678: EQUAL
72679: IFFALSE 72689
// sExp := true ;
72681: LD_ADDR_EXP 78
72685: PUSH
72686: LD_INT 1
72688: ST_TO_ADDR
// if p3 = 13 then
72689: LD_VAR 0 3
72693: PUSH
72694: LD_INT 13
72696: EQUAL
72697: IFFALSE 72707
// sDepot := true ;
72699: LD_ADDR_EXP 79
72703: PUSH
72704: LD_INT 1
72706: ST_TO_ADDR
// if p3 = 14 then
72707: LD_VAR 0 3
72711: PUSH
72712: LD_INT 14
72714: EQUAL
72715: IFFALSE 72725
// sFlag := true ;
72717: LD_ADDR_EXP 80
72721: PUSH
72722: LD_INT 1
72724: ST_TO_ADDR
// if p3 = 15 then
72725: LD_VAR 0 3
72729: PUSH
72730: LD_INT 15
72732: EQUAL
72733: IFFALSE 72743
// sKamikadze := true ;
72735: LD_ADDR_EXP 88
72739: PUSH
72740: LD_INT 1
72742: ST_TO_ADDR
// if p3 = 16 then
72743: LD_VAR 0 3
72747: PUSH
72748: LD_INT 16
72750: EQUAL
72751: IFFALSE 72761
// sTroll := true ;
72753: LD_ADDR_EXP 89
72757: PUSH
72758: LD_INT 1
72760: ST_TO_ADDR
// if p3 = 17 then
72761: LD_VAR 0 3
72765: PUSH
72766: LD_INT 17
72768: EQUAL
72769: IFFALSE 72779
// sSlow := true ;
72771: LD_ADDR_EXP 90
72775: PUSH
72776: LD_INT 1
72778: ST_TO_ADDR
// if p3 = 18 then
72779: LD_VAR 0 3
72783: PUSH
72784: LD_INT 18
72786: EQUAL
72787: IFFALSE 72797
// sLack := true ;
72789: LD_ADDR_EXP 91
72793: PUSH
72794: LD_INT 1
72796: ST_TO_ADDR
// if p3 = 19 then
72797: LD_VAR 0 3
72801: PUSH
72802: LD_INT 19
72804: EQUAL
72805: IFFALSE 72815
// sTank := true ;
72807: LD_ADDR_EXP 93
72811: PUSH
72812: LD_INT 1
72814: ST_TO_ADDR
// if p3 = 20 then
72815: LD_VAR 0 3
72819: PUSH
72820: LD_INT 20
72822: EQUAL
72823: IFFALSE 72833
// sRemote := true ;
72825: LD_ADDR_EXP 94
72829: PUSH
72830: LD_INT 1
72832: ST_TO_ADDR
// if p3 = 21 then
72833: LD_VAR 0 3
72837: PUSH
72838: LD_INT 21
72840: EQUAL
72841: IFFALSE 72851
// sPowell := true ;
72843: LD_ADDR_EXP 95
72847: PUSH
72848: LD_INT 1
72850: ST_TO_ADDR
// if p3 = 22 then
72851: LD_VAR 0 3
72855: PUSH
72856: LD_INT 22
72858: EQUAL
72859: IFFALSE 72869
// sTeleport := true ;
72861: LD_ADDR_EXP 98
72865: PUSH
72866: LD_INT 1
72868: ST_TO_ADDR
// if p3 = 23 then
72869: LD_VAR 0 3
72873: PUSH
72874: LD_INT 23
72876: EQUAL
72877: IFFALSE 72887
// sOilTower := true ;
72879: LD_ADDR_EXP 100
72883: PUSH
72884: LD_INT 1
72886: ST_TO_ADDR
// if p3 = 24 then
72887: LD_VAR 0 3
72891: PUSH
72892: LD_INT 24
72894: EQUAL
72895: IFFALSE 72905
// sShovel := true ;
72897: LD_ADDR_EXP 101
72901: PUSH
72902: LD_INT 1
72904: ST_TO_ADDR
// if p3 = 25 then
72905: LD_VAR 0 3
72909: PUSH
72910: LD_INT 25
72912: EQUAL
72913: IFFALSE 72923
// sSheik := true ;
72915: LD_ADDR_EXP 102
72919: PUSH
72920: LD_INT 1
72922: ST_TO_ADDR
// if p3 = 26 then
72923: LD_VAR 0 3
72927: PUSH
72928: LD_INT 26
72930: EQUAL
72931: IFFALSE 72941
// sEarthquake := true ;
72933: LD_ADDR_EXP 104
72937: PUSH
72938: LD_INT 1
72940: ST_TO_ADDR
// if p3 = 27 then
72941: LD_VAR 0 3
72945: PUSH
72946: LD_INT 27
72948: EQUAL
72949: IFFALSE 72959
// sAI := true ;
72951: LD_ADDR_EXP 105
72955: PUSH
72956: LD_INT 1
72958: ST_TO_ADDR
// if p3 = 28 then
72959: LD_VAR 0 3
72963: PUSH
72964: LD_INT 28
72966: EQUAL
72967: IFFALSE 72977
// sCargo := true ;
72969: LD_ADDR_EXP 108
72973: PUSH
72974: LD_INT 1
72976: ST_TO_ADDR
// if p3 = 29 then
72977: LD_VAR 0 3
72981: PUSH
72982: LD_INT 29
72984: EQUAL
72985: IFFALSE 72995
// sDLaser := true ;
72987: LD_ADDR_EXP 109
72991: PUSH
72992: LD_INT 1
72994: ST_TO_ADDR
// if p3 = 30 then
72995: LD_VAR 0 3
72999: PUSH
73000: LD_INT 30
73002: EQUAL
73003: IFFALSE 73013
// sExchange := true ;
73005: LD_ADDR_EXP 110
73009: PUSH
73010: LD_INT 1
73012: ST_TO_ADDR
// if p3 = 31 then
73013: LD_VAR 0 3
73017: PUSH
73018: LD_INT 31
73020: EQUAL
73021: IFFALSE 73031
// sFac := true ;
73023: LD_ADDR_EXP 111
73027: PUSH
73028: LD_INT 1
73030: ST_TO_ADDR
// if p3 = 32 then
73031: LD_VAR 0 3
73035: PUSH
73036: LD_INT 32
73038: EQUAL
73039: IFFALSE 73049
// sPower := true ;
73041: LD_ADDR_EXP 112
73045: PUSH
73046: LD_INT 1
73048: ST_TO_ADDR
// if p3 = 33 then
73049: LD_VAR 0 3
73053: PUSH
73054: LD_INT 33
73056: EQUAL
73057: IFFALSE 73067
// sRandom := true ;
73059: LD_ADDR_EXP 113
73063: PUSH
73064: LD_INT 1
73066: ST_TO_ADDR
// if p3 = 34 then
73067: LD_VAR 0 3
73071: PUSH
73072: LD_INT 34
73074: EQUAL
73075: IFFALSE 73085
// sShield := true ;
73077: LD_ADDR_EXP 114
73081: PUSH
73082: LD_INT 1
73084: ST_TO_ADDR
// if p3 = 35 then
73085: LD_VAR 0 3
73089: PUSH
73090: LD_INT 35
73092: EQUAL
73093: IFFALSE 73103
// sTime := true ;
73095: LD_ADDR_EXP 115
73099: PUSH
73100: LD_INT 1
73102: ST_TO_ADDR
// if p3 = 36 then
73103: LD_VAR 0 3
73107: PUSH
73108: LD_INT 36
73110: EQUAL
73111: IFFALSE 73121
// sTools := true ;
73113: LD_ADDR_EXP 116
73117: PUSH
73118: LD_INT 1
73120: ST_TO_ADDR
// if p3 = 101 then
73121: LD_VAR 0 3
73125: PUSH
73126: LD_INT 101
73128: EQUAL
73129: IFFALSE 73139
// sSold := true ;
73131: LD_ADDR_EXP 81
73135: PUSH
73136: LD_INT 1
73138: ST_TO_ADDR
// if p3 = 102 then
73139: LD_VAR 0 3
73143: PUSH
73144: LD_INT 102
73146: EQUAL
73147: IFFALSE 73157
// sDiff := true ;
73149: LD_ADDR_EXP 82
73153: PUSH
73154: LD_INT 1
73156: ST_TO_ADDR
// if p3 = 103 then
73157: LD_VAR 0 3
73161: PUSH
73162: LD_INT 103
73164: EQUAL
73165: IFFALSE 73175
// sFog := true ;
73167: LD_ADDR_EXP 85
73171: PUSH
73172: LD_INT 1
73174: ST_TO_ADDR
// if p3 = 104 then
73175: LD_VAR 0 3
73179: PUSH
73180: LD_INT 104
73182: EQUAL
73183: IFFALSE 73193
// sReset := true ;
73185: LD_ADDR_EXP 86
73189: PUSH
73190: LD_INT 1
73192: ST_TO_ADDR
// if p3 = 105 then
73193: LD_VAR 0 3
73197: PUSH
73198: LD_INT 105
73200: EQUAL
73201: IFFALSE 73211
// sSun := true ;
73203: LD_ADDR_EXP 87
73207: PUSH
73208: LD_INT 1
73210: ST_TO_ADDR
// if p3 = 106 then
73211: LD_VAR 0 3
73215: PUSH
73216: LD_INT 106
73218: EQUAL
73219: IFFALSE 73229
// sTiger := true ;
73221: LD_ADDR_EXP 83
73225: PUSH
73226: LD_INT 1
73228: ST_TO_ADDR
// if p3 = 107 then
73229: LD_VAR 0 3
73233: PUSH
73234: LD_INT 107
73236: EQUAL
73237: IFFALSE 73247
// sBomb := true ;
73239: LD_ADDR_EXP 84
73243: PUSH
73244: LD_INT 1
73246: ST_TO_ADDR
// if p3 = 108 then
73247: LD_VAR 0 3
73251: PUSH
73252: LD_INT 108
73254: EQUAL
73255: IFFALSE 73265
// sWound := true ;
73257: LD_ADDR_EXP 92
73261: PUSH
73262: LD_INT 1
73264: ST_TO_ADDR
// if p3 = 109 then
73265: LD_VAR 0 3
73269: PUSH
73270: LD_INT 109
73272: EQUAL
73273: IFFALSE 73283
// sBetray := true ;
73275: LD_ADDR_EXP 96
73279: PUSH
73280: LD_INT 1
73282: ST_TO_ADDR
// if p3 = 110 then
73283: LD_VAR 0 3
73287: PUSH
73288: LD_INT 110
73290: EQUAL
73291: IFFALSE 73301
// sContamin := true ;
73293: LD_ADDR_EXP 97
73297: PUSH
73298: LD_INT 1
73300: ST_TO_ADDR
// if p3 = 111 then
73301: LD_VAR 0 3
73305: PUSH
73306: LD_INT 111
73308: EQUAL
73309: IFFALSE 73319
// sOil := true ;
73311: LD_ADDR_EXP 99
73315: PUSH
73316: LD_INT 1
73318: ST_TO_ADDR
// if p3 = 112 then
73319: LD_VAR 0 3
73323: PUSH
73324: LD_INT 112
73326: EQUAL
73327: IFFALSE 73337
// sStu := true ;
73329: LD_ADDR_EXP 103
73333: PUSH
73334: LD_INT 1
73336: ST_TO_ADDR
// if p3 = 113 then
73337: LD_VAR 0 3
73341: PUSH
73342: LD_INT 113
73344: EQUAL
73345: IFFALSE 73355
// sBazooka := true ;
73347: LD_ADDR_EXP 106
73351: PUSH
73352: LD_INT 1
73354: ST_TO_ADDR
// if p3 = 114 then
73355: LD_VAR 0 3
73359: PUSH
73360: LD_INT 114
73362: EQUAL
73363: IFFALSE 73373
// sMortar := true ;
73365: LD_ADDR_EXP 107
73369: PUSH
73370: LD_INT 1
73372: ST_TO_ADDR
// if p3 = 115 then
73373: LD_VAR 0 3
73377: PUSH
73378: LD_INT 115
73380: EQUAL
73381: IFFALSE 73391
// sRanger := true ;
73383: LD_ADDR_EXP 117
73387: PUSH
73388: LD_INT 1
73390: ST_TO_ADDR
// if p3 = 116 then
73391: LD_VAR 0 3
73395: PUSH
73396: LD_INT 116
73398: EQUAL
73399: IFFALSE 73409
// sComputer := true ;
73401: LD_ADDR_EXP 118
73405: PUSH
73406: LD_INT 1
73408: ST_TO_ADDR
// if p3 = 117 then
73409: LD_VAR 0 3
73413: PUSH
73414: LD_INT 117
73416: EQUAL
73417: IFFALSE 73427
// s30 := true ;
73419: LD_ADDR_EXP 119
73423: PUSH
73424: LD_INT 1
73426: ST_TO_ADDR
// if p3 = 118 then
73427: LD_VAR 0 3
73431: PUSH
73432: LD_INT 118
73434: EQUAL
73435: IFFALSE 73445
// s60 := true ;
73437: LD_ADDR_EXP 120
73441: PUSH
73442: LD_INT 1
73444: ST_TO_ADDR
// end ; if p2 = hack_mode then
73445: LD_VAR 0 2
73449: PUSH
73450: LD_INT 101
73452: EQUAL
73453: IFFALSE 73581
// begin case p3 of 1 :
73455: LD_VAR 0 3
73459: PUSH
73460: LD_INT 1
73462: DOUBLE
73463: EQUAL
73464: IFTRUE 73468
73466: GO 73475
73468: POP
// hHackUnlimitedResources ; 2 :
73469: CALL 85728 0 0
73473: GO 73581
73475: LD_INT 2
73477: DOUBLE
73478: EQUAL
73479: IFTRUE 73483
73481: GO 73490
73483: POP
// hHackSetLevel10 ; 3 :
73484: CALL 85861 0 0
73488: GO 73581
73490: LD_INT 3
73492: DOUBLE
73493: EQUAL
73494: IFTRUE 73498
73496: GO 73505
73498: POP
// hHackSetLevel10YourUnits ; 4 :
73499: CALL 85946 0 0
73503: GO 73581
73505: LD_INT 4
73507: DOUBLE
73508: EQUAL
73509: IFTRUE 73513
73511: GO 73520
73513: POP
// hHackInvincible ; 5 :
73514: CALL 86394 0 0
73518: GO 73581
73520: LD_INT 5
73522: DOUBLE
73523: EQUAL
73524: IFTRUE 73528
73526: GO 73535
73528: POP
// hHackInvisible ; 6 :
73529: CALL 86505 0 0
73533: GO 73581
73535: LD_INT 6
73537: DOUBLE
73538: EQUAL
73539: IFTRUE 73543
73541: GO 73550
73543: POP
// hHackChangeYourSide ; 7 :
73544: CALL 86562 0 0
73548: GO 73581
73550: LD_INT 7
73552: DOUBLE
73553: EQUAL
73554: IFTRUE 73558
73556: GO 73565
73558: POP
// hHackChangeUnitSide ; 8 :
73559: CALL 86604 0 0
73563: GO 73581
73565: LD_INT 8
73567: DOUBLE
73568: EQUAL
73569: IFTRUE 73573
73571: GO 73580
73573: POP
// hHackFog ; end ;
73574: CALL 86705 0 0
73578: GO 73581
73580: POP
// end ; if p2 = game_save_mode then
73581: LD_VAR 0 2
73585: PUSH
73586: LD_INT 102
73588: EQUAL
73589: IFFALSE 73644
// begin if p3 = 1 then
73591: LD_VAR 0 3
73595: PUSH
73596: LD_INT 1
73598: EQUAL
73599: IFFALSE 73611
// globalGameSaveCounter := p4 ;
73601: LD_ADDR_EXP 63
73605: PUSH
73606: LD_VAR 0 4
73610: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73611: LD_VAR 0 3
73615: PUSH
73616: LD_INT 2
73618: EQUAL
73619: PUSH
73620: LD_EXP 63
73624: AND
73625: IFFALSE 73644
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73627: LD_STRING setGameSaveCounter(
73629: PUSH
73630: LD_EXP 63
73634: STR
73635: PUSH
73636: LD_STRING )
73638: STR
73639: PPUSH
73640: CALL_OW 559
// end ; end ;
73644: LD_VAR 0 7
73648: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73649: LD_INT 0
73651: PPUSH
// streamModeActive := false ;
73652: LD_ADDR_EXP 64
73656: PUSH
73657: LD_INT 0
73659: ST_TO_ADDR
// normalCounter := 36 ;
73660: LD_ADDR_EXP 65
73664: PUSH
73665: LD_INT 36
73667: ST_TO_ADDR
// hardcoreCounter := 18 ;
73668: LD_ADDR_EXP 66
73672: PUSH
73673: LD_INT 18
73675: ST_TO_ADDR
// sRocket := false ;
73676: LD_ADDR_EXP 69
73680: PUSH
73681: LD_INT 0
73683: ST_TO_ADDR
// sSpeed := false ;
73684: LD_ADDR_EXP 68
73688: PUSH
73689: LD_INT 0
73691: ST_TO_ADDR
// sEngine := false ;
73692: LD_ADDR_EXP 70
73696: PUSH
73697: LD_INT 0
73699: ST_TO_ADDR
// sSpec := false ;
73700: LD_ADDR_EXP 67
73704: PUSH
73705: LD_INT 0
73707: ST_TO_ADDR
// sLevel := false ;
73708: LD_ADDR_EXP 71
73712: PUSH
73713: LD_INT 0
73715: ST_TO_ADDR
// sArmoury := false ;
73716: LD_ADDR_EXP 72
73720: PUSH
73721: LD_INT 0
73723: ST_TO_ADDR
// sRadar := false ;
73724: LD_ADDR_EXP 73
73728: PUSH
73729: LD_INT 0
73731: ST_TO_ADDR
// sBunker := false ;
73732: LD_ADDR_EXP 74
73736: PUSH
73737: LD_INT 0
73739: ST_TO_ADDR
// sHack := false ;
73740: LD_ADDR_EXP 75
73744: PUSH
73745: LD_INT 0
73747: ST_TO_ADDR
// sFire := false ;
73748: LD_ADDR_EXP 76
73752: PUSH
73753: LD_INT 0
73755: ST_TO_ADDR
// sRefresh := false ;
73756: LD_ADDR_EXP 77
73760: PUSH
73761: LD_INT 0
73763: ST_TO_ADDR
// sExp := false ;
73764: LD_ADDR_EXP 78
73768: PUSH
73769: LD_INT 0
73771: ST_TO_ADDR
// sDepot := false ;
73772: LD_ADDR_EXP 79
73776: PUSH
73777: LD_INT 0
73779: ST_TO_ADDR
// sFlag := false ;
73780: LD_ADDR_EXP 80
73784: PUSH
73785: LD_INT 0
73787: ST_TO_ADDR
// sKamikadze := false ;
73788: LD_ADDR_EXP 88
73792: PUSH
73793: LD_INT 0
73795: ST_TO_ADDR
// sTroll := false ;
73796: LD_ADDR_EXP 89
73800: PUSH
73801: LD_INT 0
73803: ST_TO_ADDR
// sSlow := false ;
73804: LD_ADDR_EXP 90
73808: PUSH
73809: LD_INT 0
73811: ST_TO_ADDR
// sLack := false ;
73812: LD_ADDR_EXP 91
73816: PUSH
73817: LD_INT 0
73819: ST_TO_ADDR
// sTank := false ;
73820: LD_ADDR_EXP 93
73824: PUSH
73825: LD_INT 0
73827: ST_TO_ADDR
// sRemote := false ;
73828: LD_ADDR_EXP 94
73832: PUSH
73833: LD_INT 0
73835: ST_TO_ADDR
// sPowell := false ;
73836: LD_ADDR_EXP 95
73840: PUSH
73841: LD_INT 0
73843: ST_TO_ADDR
// sTeleport := false ;
73844: LD_ADDR_EXP 98
73848: PUSH
73849: LD_INT 0
73851: ST_TO_ADDR
// sOilTower := false ;
73852: LD_ADDR_EXP 100
73856: PUSH
73857: LD_INT 0
73859: ST_TO_ADDR
// sShovel := false ;
73860: LD_ADDR_EXP 101
73864: PUSH
73865: LD_INT 0
73867: ST_TO_ADDR
// sSheik := false ;
73868: LD_ADDR_EXP 102
73872: PUSH
73873: LD_INT 0
73875: ST_TO_ADDR
// sEarthquake := false ;
73876: LD_ADDR_EXP 104
73880: PUSH
73881: LD_INT 0
73883: ST_TO_ADDR
// sAI := false ;
73884: LD_ADDR_EXP 105
73888: PUSH
73889: LD_INT 0
73891: ST_TO_ADDR
// sCargo := false ;
73892: LD_ADDR_EXP 108
73896: PUSH
73897: LD_INT 0
73899: ST_TO_ADDR
// sDLaser := false ;
73900: LD_ADDR_EXP 109
73904: PUSH
73905: LD_INT 0
73907: ST_TO_ADDR
// sExchange := false ;
73908: LD_ADDR_EXP 110
73912: PUSH
73913: LD_INT 0
73915: ST_TO_ADDR
// sFac := false ;
73916: LD_ADDR_EXP 111
73920: PUSH
73921: LD_INT 0
73923: ST_TO_ADDR
// sPower := false ;
73924: LD_ADDR_EXP 112
73928: PUSH
73929: LD_INT 0
73931: ST_TO_ADDR
// sRandom := false ;
73932: LD_ADDR_EXP 113
73936: PUSH
73937: LD_INT 0
73939: ST_TO_ADDR
// sShield := false ;
73940: LD_ADDR_EXP 114
73944: PUSH
73945: LD_INT 0
73947: ST_TO_ADDR
// sTime := false ;
73948: LD_ADDR_EXP 115
73952: PUSH
73953: LD_INT 0
73955: ST_TO_ADDR
// sTools := false ;
73956: LD_ADDR_EXP 116
73960: PUSH
73961: LD_INT 0
73963: ST_TO_ADDR
// sSold := false ;
73964: LD_ADDR_EXP 81
73968: PUSH
73969: LD_INT 0
73971: ST_TO_ADDR
// sDiff := false ;
73972: LD_ADDR_EXP 82
73976: PUSH
73977: LD_INT 0
73979: ST_TO_ADDR
// sFog := false ;
73980: LD_ADDR_EXP 85
73984: PUSH
73985: LD_INT 0
73987: ST_TO_ADDR
// sReset := false ;
73988: LD_ADDR_EXP 86
73992: PUSH
73993: LD_INT 0
73995: ST_TO_ADDR
// sSun := false ;
73996: LD_ADDR_EXP 87
74000: PUSH
74001: LD_INT 0
74003: ST_TO_ADDR
// sTiger := false ;
74004: LD_ADDR_EXP 83
74008: PUSH
74009: LD_INT 0
74011: ST_TO_ADDR
// sBomb := false ;
74012: LD_ADDR_EXP 84
74016: PUSH
74017: LD_INT 0
74019: ST_TO_ADDR
// sWound := false ;
74020: LD_ADDR_EXP 92
74024: PUSH
74025: LD_INT 0
74027: ST_TO_ADDR
// sBetray := false ;
74028: LD_ADDR_EXP 96
74032: PUSH
74033: LD_INT 0
74035: ST_TO_ADDR
// sContamin := false ;
74036: LD_ADDR_EXP 97
74040: PUSH
74041: LD_INT 0
74043: ST_TO_ADDR
// sOil := false ;
74044: LD_ADDR_EXP 99
74048: PUSH
74049: LD_INT 0
74051: ST_TO_ADDR
// sStu := false ;
74052: LD_ADDR_EXP 103
74056: PUSH
74057: LD_INT 0
74059: ST_TO_ADDR
// sBazooka := false ;
74060: LD_ADDR_EXP 106
74064: PUSH
74065: LD_INT 0
74067: ST_TO_ADDR
// sMortar := false ;
74068: LD_ADDR_EXP 107
74072: PUSH
74073: LD_INT 0
74075: ST_TO_ADDR
// sRanger := false ;
74076: LD_ADDR_EXP 117
74080: PUSH
74081: LD_INT 0
74083: ST_TO_ADDR
// sComputer := false ;
74084: LD_ADDR_EXP 118
74088: PUSH
74089: LD_INT 0
74091: ST_TO_ADDR
// s30 := false ;
74092: LD_ADDR_EXP 119
74096: PUSH
74097: LD_INT 0
74099: ST_TO_ADDR
// s60 := false ;
74100: LD_ADDR_EXP 120
74104: PUSH
74105: LD_INT 0
74107: ST_TO_ADDR
// end ;
74108: LD_VAR 0 1
74112: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
74113: LD_INT 0
74115: PPUSH
74116: PPUSH
74117: PPUSH
74118: PPUSH
74119: PPUSH
74120: PPUSH
74121: PPUSH
// result := [ ] ;
74122: LD_ADDR_VAR 0 2
74126: PUSH
74127: EMPTY
74128: ST_TO_ADDR
// if campaign_id = 1 then
74129: LD_OWVAR 69
74133: PUSH
74134: LD_INT 1
74136: EQUAL
74137: IFFALSE 77303
// begin case mission_number of 1 :
74139: LD_OWVAR 70
74143: PUSH
74144: LD_INT 1
74146: DOUBLE
74147: EQUAL
74148: IFTRUE 74152
74150: GO 74228
74152: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
74153: LD_ADDR_VAR 0 2
74157: PUSH
74158: LD_INT 2
74160: PUSH
74161: LD_INT 4
74163: PUSH
74164: LD_INT 11
74166: PUSH
74167: LD_INT 12
74169: PUSH
74170: LD_INT 15
74172: PUSH
74173: LD_INT 16
74175: PUSH
74176: LD_INT 22
74178: PUSH
74179: LD_INT 23
74181: PUSH
74182: LD_INT 26
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 101
74198: PUSH
74199: LD_INT 102
74201: PUSH
74202: LD_INT 106
74204: PUSH
74205: LD_INT 116
74207: PUSH
74208: LD_INT 117
74210: PUSH
74211: LD_INT 118
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: ST_TO_ADDR
74226: GO 77301
74228: LD_INT 2
74230: DOUBLE
74231: EQUAL
74232: IFTRUE 74236
74234: GO 74320
74236: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74237: LD_ADDR_VAR 0 2
74241: PUSH
74242: LD_INT 2
74244: PUSH
74245: LD_INT 4
74247: PUSH
74248: LD_INT 11
74250: PUSH
74251: LD_INT 12
74253: PUSH
74254: LD_INT 15
74256: PUSH
74257: LD_INT 16
74259: PUSH
74260: LD_INT 22
74262: PUSH
74263: LD_INT 23
74265: PUSH
74266: LD_INT 26
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: PUSH
74280: LD_INT 101
74282: PUSH
74283: LD_INT 102
74285: PUSH
74286: LD_INT 105
74288: PUSH
74289: LD_INT 106
74291: PUSH
74292: LD_INT 108
74294: PUSH
74295: LD_INT 116
74297: PUSH
74298: LD_INT 117
74300: PUSH
74301: LD_INT 118
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: ST_TO_ADDR
74318: GO 77301
74320: LD_INT 3
74322: DOUBLE
74323: EQUAL
74324: IFTRUE 74328
74326: GO 74416
74328: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74329: LD_ADDR_VAR 0 2
74333: PUSH
74334: LD_INT 2
74336: PUSH
74337: LD_INT 4
74339: PUSH
74340: LD_INT 5
74342: PUSH
74343: LD_INT 11
74345: PUSH
74346: LD_INT 12
74348: PUSH
74349: LD_INT 15
74351: PUSH
74352: LD_INT 16
74354: PUSH
74355: LD_INT 22
74357: PUSH
74358: LD_INT 26
74360: PUSH
74361: LD_INT 36
74363: PUSH
74364: EMPTY
74365: LIST
74366: LIST
74367: LIST
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: LIST
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 101
74378: PUSH
74379: LD_INT 102
74381: PUSH
74382: LD_INT 105
74384: PUSH
74385: LD_INT 106
74387: PUSH
74388: LD_INT 108
74390: PUSH
74391: LD_INT 116
74393: PUSH
74394: LD_INT 117
74396: PUSH
74397: LD_INT 118
74399: PUSH
74400: EMPTY
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: PUSH
74410: EMPTY
74411: LIST
74412: LIST
74413: ST_TO_ADDR
74414: GO 77301
74416: LD_INT 4
74418: DOUBLE
74419: EQUAL
74420: IFTRUE 74424
74422: GO 74520
74424: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74425: LD_ADDR_VAR 0 2
74429: PUSH
74430: LD_INT 2
74432: PUSH
74433: LD_INT 4
74435: PUSH
74436: LD_INT 5
74438: PUSH
74439: LD_INT 8
74441: PUSH
74442: LD_INT 11
74444: PUSH
74445: LD_INT 12
74447: PUSH
74448: LD_INT 15
74450: PUSH
74451: LD_INT 16
74453: PUSH
74454: LD_INT 22
74456: PUSH
74457: LD_INT 23
74459: PUSH
74460: LD_INT 26
74462: PUSH
74463: LD_INT 36
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 101
74482: PUSH
74483: LD_INT 102
74485: PUSH
74486: LD_INT 105
74488: PUSH
74489: LD_INT 106
74491: PUSH
74492: LD_INT 108
74494: PUSH
74495: LD_INT 116
74497: PUSH
74498: LD_INT 117
74500: PUSH
74501: LD_INT 118
74503: PUSH
74504: EMPTY
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: ST_TO_ADDR
74518: GO 77301
74520: LD_INT 5
74522: DOUBLE
74523: EQUAL
74524: IFTRUE 74528
74526: GO 74640
74528: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74529: LD_ADDR_VAR 0 2
74533: PUSH
74534: LD_INT 2
74536: PUSH
74537: LD_INT 4
74539: PUSH
74540: LD_INT 5
74542: PUSH
74543: LD_INT 6
74545: PUSH
74546: LD_INT 8
74548: PUSH
74549: LD_INT 11
74551: PUSH
74552: LD_INT 12
74554: PUSH
74555: LD_INT 15
74557: PUSH
74558: LD_INT 16
74560: PUSH
74561: LD_INT 22
74563: PUSH
74564: LD_INT 23
74566: PUSH
74567: LD_INT 25
74569: PUSH
74570: LD_INT 26
74572: PUSH
74573: LD_INT 36
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 101
74594: PUSH
74595: LD_INT 102
74597: PUSH
74598: LD_INT 105
74600: PUSH
74601: LD_INT 106
74603: PUSH
74604: LD_INT 108
74606: PUSH
74607: LD_INT 109
74609: PUSH
74610: LD_INT 112
74612: PUSH
74613: LD_INT 116
74615: PUSH
74616: LD_INT 117
74618: PUSH
74619: LD_INT 118
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: ST_TO_ADDR
74638: GO 77301
74640: LD_INT 6
74642: DOUBLE
74643: EQUAL
74644: IFTRUE 74648
74646: GO 74780
74648: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74649: LD_ADDR_VAR 0 2
74653: PUSH
74654: LD_INT 2
74656: PUSH
74657: LD_INT 4
74659: PUSH
74660: LD_INT 5
74662: PUSH
74663: LD_INT 6
74665: PUSH
74666: LD_INT 8
74668: PUSH
74669: LD_INT 11
74671: PUSH
74672: LD_INT 12
74674: PUSH
74675: LD_INT 15
74677: PUSH
74678: LD_INT 16
74680: PUSH
74681: LD_INT 20
74683: PUSH
74684: LD_INT 21
74686: PUSH
74687: LD_INT 22
74689: PUSH
74690: LD_INT 23
74692: PUSH
74693: LD_INT 25
74695: PUSH
74696: LD_INT 26
74698: PUSH
74699: LD_INT 30
74701: PUSH
74702: LD_INT 31
74704: PUSH
74705: LD_INT 32
74707: PUSH
74708: LD_INT 36
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: LIST
74724: LIST
74725: LIST
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 101
74734: PUSH
74735: LD_INT 102
74737: PUSH
74738: LD_INT 105
74740: PUSH
74741: LD_INT 106
74743: PUSH
74744: LD_INT 108
74746: PUSH
74747: LD_INT 109
74749: PUSH
74750: LD_INT 112
74752: PUSH
74753: LD_INT 116
74755: PUSH
74756: LD_INT 117
74758: PUSH
74759: LD_INT 118
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: ST_TO_ADDR
74778: GO 77301
74780: LD_INT 7
74782: DOUBLE
74783: EQUAL
74784: IFTRUE 74788
74786: GO 74900
74788: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74789: LD_ADDR_VAR 0 2
74793: PUSH
74794: LD_INT 2
74796: PUSH
74797: LD_INT 4
74799: PUSH
74800: LD_INT 5
74802: PUSH
74803: LD_INT 7
74805: PUSH
74806: LD_INT 11
74808: PUSH
74809: LD_INT 12
74811: PUSH
74812: LD_INT 15
74814: PUSH
74815: LD_INT 16
74817: PUSH
74818: LD_INT 20
74820: PUSH
74821: LD_INT 21
74823: PUSH
74824: LD_INT 22
74826: PUSH
74827: LD_INT 23
74829: PUSH
74830: LD_INT 25
74832: PUSH
74833: LD_INT 26
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: PUSH
74852: LD_INT 101
74854: PUSH
74855: LD_INT 102
74857: PUSH
74858: LD_INT 103
74860: PUSH
74861: LD_INT 105
74863: PUSH
74864: LD_INT 106
74866: PUSH
74867: LD_INT 108
74869: PUSH
74870: LD_INT 112
74872: PUSH
74873: LD_INT 116
74875: PUSH
74876: LD_INT 117
74878: PUSH
74879: LD_INT 118
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: LIST
74886: LIST
74887: LIST
74888: LIST
74889: LIST
74890: LIST
74891: LIST
74892: LIST
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: ST_TO_ADDR
74898: GO 77301
74900: LD_INT 8
74902: DOUBLE
74903: EQUAL
74904: IFTRUE 74908
74906: GO 75048
74908: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74909: LD_ADDR_VAR 0 2
74913: PUSH
74914: LD_INT 2
74916: PUSH
74917: LD_INT 4
74919: PUSH
74920: LD_INT 5
74922: PUSH
74923: LD_INT 6
74925: PUSH
74926: LD_INT 7
74928: PUSH
74929: LD_INT 8
74931: PUSH
74932: LD_INT 11
74934: PUSH
74935: LD_INT 12
74937: PUSH
74938: LD_INT 15
74940: PUSH
74941: LD_INT 16
74943: PUSH
74944: LD_INT 20
74946: PUSH
74947: LD_INT 21
74949: PUSH
74950: LD_INT 22
74952: PUSH
74953: LD_INT 23
74955: PUSH
74956: LD_INT 25
74958: PUSH
74959: LD_INT 26
74961: PUSH
74962: LD_INT 30
74964: PUSH
74965: LD_INT 31
74967: PUSH
74968: LD_INT 32
74970: PUSH
74971: LD_INT 36
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: PUSH
74996: LD_INT 101
74998: PUSH
74999: LD_INT 102
75001: PUSH
75002: LD_INT 103
75004: PUSH
75005: LD_INT 105
75007: PUSH
75008: LD_INT 106
75010: PUSH
75011: LD_INT 108
75013: PUSH
75014: LD_INT 109
75016: PUSH
75017: LD_INT 112
75019: PUSH
75020: LD_INT 116
75022: PUSH
75023: LD_INT 117
75025: PUSH
75026: LD_INT 118
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: PUSH
75042: EMPTY
75043: LIST
75044: LIST
75045: ST_TO_ADDR
75046: GO 77301
75048: LD_INT 9
75050: DOUBLE
75051: EQUAL
75052: IFTRUE 75056
75054: GO 75204
75056: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
75057: LD_ADDR_VAR 0 2
75061: PUSH
75062: LD_INT 2
75064: PUSH
75065: LD_INT 4
75067: PUSH
75068: LD_INT 5
75070: PUSH
75071: LD_INT 6
75073: PUSH
75074: LD_INT 7
75076: PUSH
75077: LD_INT 8
75079: PUSH
75080: LD_INT 11
75082: PUSH
75083: LD_INT 12
75085: PUSH
75086: LD_INT 15
75088: PUSH
75089: LD_INT 16
75091: PUSH
75092: LD_INT 20
75094: PUSH
75095: LD_INT 21
75097: PUSH
75098: LD_INT 22
75100: PUSH
75101: LD_INT 23
75103: PUSH
75104: LD_INT 25
75106: PUSH
75107: LD_INT 26
75109: PUSH
75110: LD_INT 28
75112: PUSH
75113: LD_INT 30
75115: PUSH
75116: LD_INT 31
75118: PUSH
75119: LD_INT 32
75121: PUSH
75122: LD_INT 36
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 101
75150: PUSH
75151: LD_INT 102
75153: PUSH
75154: LD_INT 103
75156: PUSH
75157: LD_INT 105
75159: PUSH
75160: LD_INT 106
75162: PUSH
75163: LD_INT 108
75165: PUSH
75166: LD_INT 109
75168: PUSH
75169: LD_INT 112
75171: PUSH
75172: LD_INT 114
75174: PUSH
75175: LD_INT 116
75177: PUSH
75178: LD_INT 117
75180: PUSH
75181: LD_INT 118
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: LIST
75196: LIST
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: ST_TO_ADDR
75202: GO 77301
75204: LD_INT 10
75206: DOUBLE
75207: EQUAL
75208: IFTRUE 75212
75210: GO 75408
75212: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
75213: LD_ADDR_VAR 0 2
75217: PUSH
75218: LD_INT 2
75220: PUSH
75221: LD_INT 4
75223: PUSH
75224: LD_INT 5
75226: PUSH
75227: LD_INT 6
75229: PUSH
75230: LD_INT 7
75232: PUSH
75233: LD_INT 8
75235: PUSH
75236: LD_INT 9
75238: PUSH
75239: LD_INT 10
75241: PUSH
75242: LD_INT 11
75244: PUSH
75245: LD_INT 12
75247: PUSH
75248: LD_INT 13
75250: PUSH
75251: LD_INT 14
75253: PUSH
75254: LD_INT 15
75256: PUSH
75257: LD_INT 16
75259: PUSH
75260: LD_INT 17
75262: PUSH
75263: LD_INT 18
75265: PUSH
75266: LD_INT 19
75268: PUSH
75269: LD_INT 20
75271: PUSH
75272: LD_INT 21
75274: PUSH
75275: LD_INT 22
75277: PUSH
75278: LD_INT 23
75280: PUSH
75281: LD_INT 24
75283: PUSH
75284: LD_INT 25
75286: PUSH
75287: LD_INT 26
75289: PUSH
75290: LD_INT 28
75292: PUSH
75293: LD_INT 30
75295: PUSH
75296: LD_INT 31
75298: PUSH
75299: LD_INT 32
75301: PUSH
75302: LD_INT 36
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: PUSH
75336: LD_INT 101
75338: PUSH
75339: LD_INT 102
75341: PUSH
75342: LD_INT 103
75344: PUSH
75345: LD_INT 104
75347: PUSH
75348: LD_INT 105
75350: PUSH
75351: LD_INT 106
75353: PUSH
75354: LD_INT 107
75356: PUSH
75357: LD_INT 108
75359: PUSH
75360: LD_INT 109
75362: PUSH
75363: LD_INT 110
75365: PUSH
75366: LD_INT 111
75368: PUSH
75369: LD_INT 112
75371: PUSH
75372: LD_INT 114
75374: PUSH
75375: LD_INT 116
75377: PUSH
75378: LD_INT 117
75380: PUSH
75381: LD_INT 118
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: PUSH
75402: EMPTY
75403: LIST
75404: LIST
75405: ST_TO_ADDR
75406: GO 77301
75408: LD_INT 11
75410: DOUBLE
75411: EQUAL
75412: IFTRUE 75416
75414: GO 75620
75416: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75417: LD_ADDR_VAR 0 2
75421: PUSH
75422: LD_INT 2
75424: PUSH
75425: LD_INT 3
75427: PUSH
75428: LD_INT 4
75430: PUSH
75431: LD_INT 5
75433: PUSH
75434: LD_INT 6
75436: PUSH
75437: LD_INT 7
75439: PUSH
75440: LD_INT 8
75442: PUSH
75443: LD_INT 9
75445: PUSH
75446: LD_INT 10
75448: PUSH
75449: LD_INT 11
75451: PUSH
75452: LD_INT 12
75454: PUSH
75455: LD_INT 13
75457: PUSH
75458: LD_INT 14
75460: PUSH
75461: LD_INT 15
75463: PUSH
75464: LD_INT 16
75466: PUSH
75467: LD_INT 17
75469: PUSH
75470: LD_INT 18
75472: PUSH
75473: LD_INT 19
75475: PUSH
75476: LD_INT 20
75478: PUSH
75479: LD_INT 21
75481: PUSH
75482: LD_INT 22
75484: PUSH
75485: LD_INT 23
75487: PUSH
75488: LD_INT 24
75490: PUSH
75491: LD_INT 25
75493: PUSH
75494: LD_INT 26
75496: PUSH
75497: LD_INT 28
75499: PUSH
75500: LD_INT 30
75502: PUSH
75503: LD_INT 31
75505: PUSH
75506: LD_INT 32
75508: PUSH
75509: LD_INT 34
75511: PUSH
75512: LD_INT 36
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: LIST
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: LIST
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: LIST
75547: PUSH
75548: LD_INT 101
75550: PUSH
75551: LD_INT 102
75553: PUSH
75554: LD_INT 103
75556: PUSH
75557: LD_INT 104
75559: PUSH
75560: LD_INT 105
75562: PUSH
75563: LD_INT 106
75565: PUSH
75566: LD_INT 107
75568: PUSH
75569: LD_INT 108
75571: PUSH
75572: LD_INT 109
75574: PUSH
75575: LD_INT 110
75577: PUSH
75578: LD_INT 111
75580: PUSH
75581: LD_INT 112
75583: PUSH
75584: LD_INT 114
75586: PUSH
75587: LD_INT 116
75589: PUSH
75590: LD_INT 117
75592: PUSH
75593: LD_INT 118
75595: PUSH
75596: EMPTY
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: ST_TO_ADDR
75618: GO 77301
75620: LD_INT 12
75622: DOUBLE
75623: EQUAL
75624: IFTRUE 75628
75626: GO 75848
75628: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75629: LD_ADDR_VAR 0 2
75633: PUSH
75634: LD_INT 1
75636: PUSH
75637: LD_INT 2
75639: PUSH
75640: LD_INT 3
75642: PUSH
75643: LD_INT 4
75645: PUSH
75646: LD_INT 5
75648: PUSH
75649: LD_INT 6
75651: PUSH
75652: LD_INT 7
75654: PUSH
75655: LD_INT 8
75657: PUSH
75658: LD_INT 9
75660: PUSH
75661: LD_INT 10
75663: PUSH
75664: LD_INT 11
75666: PUSH
75667: LD_INT 12
75669: PUSH
75670: LD_INT 13
75672: PUSH
75673: LD_INT 14
75675: PUSH
75676: LD_INT 15
75678: PUSH
75679: LD_INT 16
75681: PUSH
75682: LD_INT 17
75684: PUSH
75685: LD_INT 18
75687: PUSH
75688: LD_INT 19
75690: PUSH
75691: LD_INT 20
75693: PUSH
75694: LD_INT 21
75696: PUSH
75697: LD_INT 22
75699: PUSH
75700: LD_INT 23
75702: PUSH
75703: LD_INT 24
75705: PUSH
75706: LD_INT 25
75708: PUSH
75709: LD_INT 26
75711: PUSH
75712: LD_INT 27
75714: PUSH
75715: LD_INT 28
75717: PUSH
75718: LD_INT 30
75720: PUSH
75721: LD_INT 31
75723: PUSH
75724: LD_INT 32
75726: PUSH
75727: LD_INT 33
75729: PUSH
75730: LD_INT 34
75732: PUSH
75733: LD_INT 36
75735: PUSH
75736: EMPTY
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: LIST
75768: LIST
75769: LIST
75770: LIST
75771: PUSH
75772: LD_INT 101
75774: PUSH
75775: LD_INT 102
75777: PUSH
75778: LD_INT 103
75780: PUSH
75781: LD_INT 104
75783: PUSH
75784: LD_INT 105
75786: PUSH
75787: LD_INT 106
75789: PUSH
75790: LD_INT 107
75792: PUSH
75793: LD_INT 108
75795: PUSH
75796: LD_INT 109
75798: PUSH
75799: LD_INT 110
75801: PUSH
75802: LD_INT 111
75804: PUSH
75805: LD_INT 112
75807: PUSH
75808: LD_INT 113
75810: PUSH
75811: LD_INT 114
75813: PUSH
75814: LD_INT 116
75816: PUSH
75817: LD_INT 117
75819: PUSH
75820: LD_INT 118
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: ST_TO_ADDR
75846: GO 77301
75848: LD_INT 13
75850: DOUBLE
75851: EQUAL
75852: IFTRUE 75856
75854: GO 76064
75856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75857: LD_ADDR_VAR 0 2
75861: PUSH
75862: LD_INT 1
75864: PUSH
75865: LD_INT 2
75867: PUSH
75868: LD_INT 3
75870: PUSH
75871: LD_INT 4
75873: PUSH
75874: LD_INT 5
75876: PUSH
75877: LD_INT 8
75879: PUSH
75880: LD_INT 9
75882: PUSH
75883: LD_INT 10
75885: PUSH
75886: LD_INT 11
75888: PUSH
75889: LD_INT 12
75891: PUSH
75892: LD_INT 14
75894: PUSH
75895: LD_INT 15
75897: PUSH
75898: LD_INT 16
75900: PUSH
75901: LD_INT 17
75903: PUSH
75904: LD_INT 18
75906: PUSH
75907: LD_INT 19
75909: PUSH
75910: LD_INT 20
75912: PUSH
75913: LD_INT 21
75915: PUSH
75916: LD_INT 22
75918: PUSH
75919: LD_INT 23
75921: PUSH
75922: LD_INT 24
75924: PUSH
75925: LD_INT 25
75927: PUSH
75928: LD_INT 26
75930: PUSH
75931: LD_INT 27
75933: PUSH
75934: LD_INT 28
75936: PUSH
75937: LD_INT 30
75939: PUSH
75940: LD_INT 31
75942: PUSH
75943: LD_INT 32
75945: PUSH
75946: LD_INT 33
75948: PUSH
75949: LD_INT 34
75951: PUSH
75952: LD_INT 36
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 101
75990: PUSH
75991: LD_INT 102
75993: PUSH
75994: LD_INT 103
75996: PUSH
75997: LD_INT 104
75999: PUSH
76000: LD_INT 105
76002: PUSH
76003: LD_INT 106
76005: PUSH
76006: LD_INT 107
76008: PUSH
76009: LD_INT 108
76011: PUSH
76012: LD_INT 109
76014: PUSH
76015: LD_INT 110
76017: PUSH
76018: LD_INT 111
76020: PUSH
76021: LD_INT 112
76023: PUSH
76024: LD_INT 113
76026: PUSH
76027: LD_INT 114
76029: PUSH
76030: LD_INT 116
76032: PUSH
76033: LD_INT 117
76035: PUSH
76036: LD_INT 118
76038: PUSH
76039: EMPTY
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: ST_TO_ADDR
76062: GO 77301
76064: LD_INT 14
76066: DOUBLE
76067: EQUAL
76068: IFTRUE 76072
76070: GO 76296
76072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
76073: LD_ADDR_VAR 0 2
76077: PUSH
76078: LD_INT 1
76080: PUSH
76081: LD_INT 2
76083: PUSH
76084: LD_INT 3
76086: PUSH
76087: LD_INT 4
76089: PUSH
76090: LD_INT 5
76092: PUSH
76093: LD_INT 6
76095: PUSH
76096: LD_INT 7
76098: PUSH
76099: LD_INT 8
76101: PUSH
76102: LD_INT 9
76104: PUSH
76105: LD_INT 10
76107: PUSH
76108: LD_INT 11
76110: PUSH
76111: LD_INT 12
76113: PUSH
76114: LD_INT 13
76116: PUSH
76117: LD_INT 14
76119: PUSH
76120: LD_INT 15
76122: PUSH
76123: LD_INT 16
76125: PUSH
76126: LD_INT 17
76128: PUSH
76129: LD_INT 18
76131: PUSH
76132: LD_INT 19
76134: PUSH
76135: LD_INT 20
76137: PUSH
76138: LD_INT 21
76140: PUSH
76141: LD_INT 22
76143: PUSH
76144: LD_INT 23
76146: PUSH
76147: LD_INT 24
76149: PUSH
76150: LD_INT 25
76152: PUSH
76153: LD_INT 26
76155: PUSH
76156: LD_INT 27
76158: PUSH
76159: LD_INT 28
76161: PUSH
76162: LD_INT 29
76164: PUSH
76165: LD_INT 30
76167: PUSH
76168: LD_INT 31
76170: PUSH
76171: LD_INT 32
76173: PUSH
76174: LD_INT 33
76176: PUSH
76177: LD_INT 34
76179: PUSH
76180: LD_INT 36
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: PUSH
76220: LD_INT 101
76222: PUSH
76223: LD_INT 102
76225: PUSH
76226: LD_INT 103
76228: PUSH
76229: LD_INT 104
76231: PUSH
76232: LD_INT 105
76234: PUSH
76235: LD_INT 106
76237: PUSH
76238: LD_INT 107
76240: PUSH
76241: LD_INT 108
76243: PUSH
76244: LD_INT 109
76246: PUSH
76247: LD_INT 110
76249: PUSH
76250: LD_INT 111
76252: PUSH
76253: LD_INT 112
76255: PUSH
76256: LD_INT 113
76258: PUSH
76259: LD_INT 114
76261: PUSH
76262: LD_INT 116
76264: PUSH
76265: LD_INT 117
76267: PUSH
76268: LD_INT 118
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: LIST
76275: LIST
76276: LIST
76277: LIST
76278: LIST
76279: LIST
76280: LIST
76281: LIST
76282: LIST
76283: LIST
76284: LIST
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: ST_TO_ADDR
76294: GO 77301
76296: LD_INT 15
76298: DOUBLE
76299: EQUAL
76300: IFTRUE 76304
76302: GO 76528
76304: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76305: LD_ADDR_VAR 0 2
76309: PUSH
76310: LD_INT 1
76312: PUSH
76313: LD_INT 2
76315: PUSH
76316: LD_INT 3
76318: PUSH
76319: LD_INT 4
76321: PUSH
76322: LD_INT 5
76324: PUSH
76325: LD_INT 6
76327: PUSH
76328: LD_INT 7
76330: PUSH
76331: LD_INT 8
76333: PUSH
76334: LD_INT 9
76336: PUSH
76337: LD_INT 10
76339: PUSH
76340: LD_INT 11
76342: PUSH
76343: LD_INT 12
76345: PUSH
76346: LD_INT 13
76348: PUSH
76349: LD_INT 14
76351: PUSH
76352: LD_INT 15
76354: PUSH
76355: LD_INT 16
76357: PUSH
76358: LD_INT 17
76360: PUSH
76361: LD_INT 18
76363: PUSH
76364: LD_INT 19
76366: PUSH
76367: LD_INT 20
76369: PUSH
76370: LD_INT 21
76372: PUSH
76373: LD_INT 22
76375: PUSH
76376: LD_INT 23
76378: PUSH
76379: LD_INT 24
76381: PUSH
76382: LD_INT 25
76384: PUSH
76385: LD_INT 26
76387: PUSH
76388: LD_INT 27
76390: PUSH
76391: LD_INT 28
76393: PUSH
76394: LD_INT 29
76396: PUSH
76397: LD_INT 30
76399: PUSH
76400: LD_INT 31
76402: PUSH
76403: LD_INT 32
76405: PUSH
76406: LD_INT 33
76408: PUSH
76409: LD_INT 34
76411: PUSH
76412: LD_INT 36
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: PUSH
76452: LD_INT 101
76454: PUSH
76455: LD_INT 102
76457: PUSH
76458: LD_INT 103
76460: PUSH
76461: LD_INT 104
76463: PUSH
76464: LD_INT 105
76466: PUSH
76467: LD_INT 106
76469: PUSH
76470: LD_INT 107
76472: PUSH
76473: LD_INT 108
76475: PUSH
76476: LD_INT 109
76478: PUSH
76479: LD_INT 110
76481: PUSH
76482: LD_INT 111
76484: PUSH
76485: LD_INT 112
76487: PUSH
76488: LD_INT 113
76490: PUSH
76491: LD_INT 114
76493: PUSH
76494: LD_INT 116
76496: PUSH
76497: LD_INT 117
76499: PUSH
76500: LD_INT 118
76502: PUSH
76503: EMPTY
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: ST_TO_ADDR
76526: GO 77301
76528: LD_INT 16
76530: DOUBLE
76531: EQUAL
76532: IFTRUE 76536
76534: GO 76672
76536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76537: LD_ADDR_VAR 0 2
76541: PUSH
76542: LD_INT 2
76544: PUSH
76545: LD_INT 4
76547: PUSH
76548: LD_INT 5
76550: PUSH
76551: LD_INT 7
76553: PUSH
76554: LD_INT 11
76556: PUSH
76557: LD_INT 12
76559: PUSH
76560: LD_INT 15
76562: PUSH
76563: LD_INT 16
76565: PUSH
76566: LD_INT 20
76568: PUSH
76569: LD_INT 21
76571: PUSH
76572: LD_INT 22
76574: PUSH
76575: LD_INT 23
76577: PUSH
76578: LD_INT 25
76580: PUSH
76581: LD_INT 26
76583: PUSH
76584: LD_INT 30
76586: PUSH
76587: LD_INT 31
76589: PUSH
76590: LD_INT 32
76592: PUSH
76593: LD_INT 33
76595: PUSH
76596: LD_INT 34
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: LIST
76607: LIST
76608: LIST
76609: LIST
76610: LIST
76611: LIST
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: PUSH
76620: LD_INT 101
76622: PUSH
76623: LD_INT 102
76625: PUSH
76626: LD_INT 103
76628: PUSH
76629: LD_INT 106
76631: PUSH
76632: LD_INT 108
76634: PUSH
76635: LD_INT 112
76637: PUSH
76638: LD_INT 113
76640: PUSH
76641: LD_INT 114
76643: PUSH
76644: LD_INT 116
76646: PUSH
76647: LD_INT 117
76649: PUSH
76650: LD_INT 118
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: LIST
76661: LIST
76662: LIST
76663: LIST
76664: LIST
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: ST_TO_ADDR
76670: GO 77301
76672: LD_INT 17
76674: DOUBLE
76675: EQUAL
76676: IFTRUE 76680
76678: GO 76904
76680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76681: LD_ADDR_VAR 0 2
76685: PUSH
76686: LD_INT 1
76688: PUSH
76689: LD_INT 2
76691: PUSH
76692: LD_INT 3
76694: PUSH
76695: LD_INT 4
76697: PUSH
76698: LD_INT 5
76700: PUSH
76701: LD_INT 6
76703: PUSH
76704: LD_INT 7
76706: PUSH
76707: LD_INT 8
76709: PUSH
76710: LD_INT 9
76712: PUSH
76713: LD_INT 10
76715: PUSH
76716: LD_INT 11
76718: PUSH
76719: LD_INT 12
76721: PUSH
76722: LD_INT 13
76724: PUSH
76725: LD_INT 14
76727: PUSH
76728: LD_INT 15
76730: PUSH
76731: LD_INT 16
76733: PUSH
76734: LD_INT 17
76736: PUSH
76737: LD_INT 18
76739: PUSH
76740: LD_INT 19
76742: PUSH
76743: LD_INT 20
76745: PUSH
76746: LD_INT 21
76748: PUSH
76749: LD_INT 22
76751: PUSH
76752: LD_INT 23
76754: PUSH
76755: LD_INT 24
76757: PUSH
76758: LD_INT 25
76760: PUSH
76761: LD_INT 26
76763: PUSH
76764: LD_INT 27
76766: PUSH
76767: LD_INT 28
76769: PUSH
76770: LD_INT 29
76772: PUSH
76773: LD_INT 30
76775: PUSH
76776: LD_INT 31
76778: PUSH
76779: LD_INT 32
76781: PUSH
76782: LD_INT 33
76784: PUSH
76785: LD_INT 34
76787: PUSH
76788: LD_INT 36
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: LIST
76799: LIST
76800: LIST
76801: LIST
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: LIST
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 101
76830: PUSH
76831: LD_INT 102
76833: PUSH
76834: LD_INT 103
76836: PUSH
76837: LD_INT 104
76839: PUSH
76840: LD_INT 105
76842: PUSH
76843: LD_INT 106
76845: PUSH
76846: LD_INT 107
76848: PUSH
76849: LD_INT 108
76851: PUSH
76852: LD_INT 109
76854: PUSH
76855: LD_INT 110
76857: PUSH
76858: LD_INT 111
76860: PUSH
76861: LD_INT 112
76863: PUSH
76864: LD_INT 113
76866: PUSH
76867: LD_INT 114
76869: PUSH
76870: LD_INT 116
76872: PUSH
76873: LD_INT 117
76875: PUSH
76876: LD_INT 118
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: LIST
76886: LIST
76887: LIST
76888: LIST
76889: LIST
76890: LIST
76891: LIST
76892: LIST
76893: LIST
76894: LIST
76895: LIST
76896: LIST
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: ST_TO_ADDR
76902: GO 77301
76904: LD_INT 18
76906: DOUBLE
76907: EQUAL
76908: IFTRUE 76912
76910: GO 77060
76912: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76913: LD_ADDR_VAR 0 2
76917: PUSH
76918: LD_INT 2
76920: PUSH
76921: LD_INT 4
76923: PUSH
76924: LD_INT 5
76926: PUSH
76927: LD_INT 7
76929: PUSH
76930: LD_INT 11
76932: PUSH
76933: LD_INT 12
76935: PUSH
76936: LD_INT 15
76938: PUSH
76939: LD_INT 16
76941: PUSH
76942: LD_INT 20
76944: PUSH
76945: LD_INT 21
76947: PUSH
76948: LD_INT 22
76950: PUSH
76951: LD_INT 23
76953: PUSH
76954: LD_INT 25
76956: PUSH
76957: LD_INT 26
76959: PUSH
76960: LD_INT 30
76962: PUSH
76963: LD_INT 31
76965: PUSH
76966: LD_INT 32
76968: PUSH
76969: LD_INT 33
76971: PUSH
76972: LD_INT 34
76974: PUSH
76975: LD_INT 35
76977: PUSH
76978: LD_INT 36
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: PUSH
77004: LD_INT 101
77006: PUSH
77007: LD_INT 102
77009: PUSH
77010: LD_INT 103
77012: PUSH
77013: LD_INT 106
77015: PUSH
77016: LD_INT 108
77018: PUSH
77019: LD_INT 112
77021: PUSH
77022: LD_INT 113
77024: PUSH
77025: LD_INT 114
77027: PUSH
77028: LD_INT 115
77030: PUSH
77031: LD_INT 116
77033: PUSH
77034: LD_INT 117
77036: PUSH
77037: LD_INT 118
77039: PUSH
77040: EMPTY
77041: LIST
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: ST_TO_ADDR
77058: GO 77301
77060: LD_INT 19
77062: DOUBLE
77063: EQUAL
77064: IFTRUE 77068
77066: GO 77300
77068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
77069: LD_ADDR_VAR 0 2
77073: PUSH
77074: LD_INT 1
77076: PUSH
77077: LD_INT 2
77079: PUSH
77080: LD_INT 3
77082: PUSH
77083: LD_INT 4
77085: PUSH
77086: LD_INT 5
77088: PUSH
77089: LD_INT 6
77091: PUSH
77092: LD_INT 7
77094: PUSH
77095: LD_INT 8
77097: PUSH
77098: LD_INT 9
77100: PUSH
77101: LD_INT 10
77103: PUSH
77104: LD_INT 11
77106: PUSH
77107: LD_INT 12
77109: PUSH
77110: LD_INT 13
77112: PUSH
77113: LD_INT 14
77115: PUSH
77116: LD_INT 15
77118: PUSH
77119: LD_INT 16
77121: PUSH
77122: LD_INT 17
77124: PUSH
77125: LD_INT 18
77127: PUSH
77128: LD_INT 19
77130: PUSH
77131: LD_INT 20
77133: PUSH
77134: LD_INT 21
77136: PUSH
77137: LD_INT 22
77139: PUSH
77140: LD_INT 23
77142: PUSH
77143: LD_INT 24
77145: PUSH
77146: LD_INT 25
77148: PUSH
77149: LD_INT 26
77151: PUSH
77152: LD_INT 27
77154: PUSH
77155: LD_INT 28
77157: PUSH
77158: LD_INT 29
77160: PUSH
77161: LD_INT 30
77163: PUSH
77164: LD_INT 31
77166: PUSH
77167: LD_INT 32
77169: PUSH
77170: LD_INT 33
77172: PUSH
77173: LD_INT 34
77175: PUSH
77176: LD_INT 35
77178: PUSH
77179: LD_INT 36
77181: PUSH
77182: EMPTY
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: PUSH
77220: LD_INT 101
77222: PUSH
77223: LD_INT 102
77225: PUSH
77226: LD_INT 103
77228: PUSH
77229: LD_INT 104
77231: PUSH
77232: LD_INT 105
77234: PUSH
77235: LD_INT 106
77237: PUSH
77238: LD_INT 107
77240: PUSH
77241: LD_INT 108
77243: PUSH
77244: LD_INT 109
77246: PUSH
77247: LD_INT 110
77249: PUSH
77250: LD_INT 111
77252: PUSH
77253: LD_INT 112
77255: PUSH
77256: LD_INT 113
77258: PUSH
77259: LD_INT 114
77261: PUSH
77262: LD_INT 115
77264: PUSH
77265: LD_INT 116
77267: PUSH
77268: LD_INT 117
77270: PUSH
77271: LD_INT 118
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: LIST
77281: LIST
77282: LIST
77283: LIST
77284: LIST
77285: LIST
77286: LIST
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: LIST
77293: PUSH
77294: EMPTY
77295: LIST
77296: LIST
77297: ST_TO_ADDR
77298: GO 77301
77300: POP
// end else
77301: GO 77532
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77303: LD_ADDR_VAR 0 2
77307: PUSH
77308: LD_INT 1
77310: PUSH
77311: LD_INT 2
77313: PUSH
77314: LD_INT 3
77316: PUSH
77317: LD_INT 4
77319: PUSH
77320: LD_INT 5
77322: PUSH
77323: LD_INT 6
77325: PUSH
77326: LD_INT 7
77328: PUSH
77329: LD_INT 8
77331: PUSH
77332: LD_INT 9
77334: PUSH
77335: LD_INT 10
77337: PUSH
77338: LD_INT 11
77340: PUSH
77341: LD_INT 12
77343: PUSH
77344: LD_INT 13
77346: PUSH
77347: LD_INT 14
77349: PUSH
77350: LD_INT 15
77352: PUSH
77353: LD_INT 16
77355: PUSH
77356: LD_INT 17
77358: PUSH
77359: LD_INT 18
77361: PUSH
77362: LD_INT 19
77364: PUSH
77365: LD_INT 20
77367: PUSH
77368: LD_INT 21
77370: PUSH
77371: LD_INT 22
77373: PUSH
77374: LD_INT 23
77376: PUSH
77377: LD_INT 24
77379: PUSH
77380: LD_INT 25
77382: PUSH
77383: LD_INT 26
77385: PUSH
77386: LD_INT 27
77388: PUSH
77389: LD_INT 28
77391: PUSH
77392: LD_INT 29
77394: PUSH
77395: LD_INT 30
77397: PUSH
77398: LD_INT 31
77400: PUSH
77401: LD_INT 32
77403: PUSH
77404: LD_INT 33
77406: PUSH
77407: LD_INT 34
77409: PUSH
77410: LD_INT 35
77412: PUSH
77413: LD_INT 36
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: LIST
77420: LIST
77421: LIST
77422: LIST
77423: LIST
77424: LIST
77425: LIST
77426: LIST
77427: LIST
77428: LIST
77429: LIST
77430: LIST
77431: LIST
77432: LIST
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: PUSH
77454: LD_INT 101
77456: PUSH
77457: LD_INT 102
77459: PUSH
77460: LD_INT 103
77462: PUSH
77463: LD_INT 104
77465: PUSH
77466: LD_INT 105
77468: PUSH
77469: LD_INT 106
77471: PUSH
77472: LD_INT 107
77474: PUSH
77475: LD_INT 108
77477: PUSH
77478: LD_INT 109
77480: PUSH
77481: LD_INT 110
77483: PUSH
77484: LD_INT 111
77486: PUSH
77487: LD_INT 112
77489: PUSH
77490: LD_INT 113
77492: PUSH
77493: LD_INT 114
77495: PUSH
77496: LD_INT 115
77498: PUSH
77499: LD_INT 116
77501: PUSH
77502: LD_INT 117
77504: PUSH
77505: LD_INT 118
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: LIST
77512: LIST
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: ST_TO_ADDR
// if result then
77532: LD_VAR 0 2
77536: IFFALSE 78322
// begin normal :=  ;
77538: LD_ADDR_VAR 0 5
77542: PUSH
77543: LD_STRING 
77545: ST_TO_ADDR
// hardcore :=  ;
77546: LD_ADDR_VAR 0 6
77550: PUSH
77551: LD_STRING 
77553: ST_TO_ADDR
// active :=  ;
77554: LD_ADDR_VAR 0 7
77558: PUSH
77559: LD_STRING 
77561: ST_TO_ADDR
// for i = 1 to normalCounter do
77562: LD_ADDR_VAR 0 8
77566: PUSH
77567: DOUBLE
77568: LD_INT 1
77570: DEC
77571: ST_TO_ADDR
77572: LD_EXP 65
77576: PUSH
77577: FOR_TO
77578: IFFALSE 77679
// begin tmp := 0 ;
77580: LD_ADDR_VAR 0 3
77584: PUSH
77585: LD_STRING 0
77587: ST_TO_ADDR
// if result [ 1 ] then
77588: LD_VAR 0 2
77592: PUSH
77593: LD_INT 1
77595: ARRAY
77596: IFFALSE 77661
// if result [ 1 ] [ 1 ] = i then
77598: LD_VAR 0 2
77602: PUSH
77603: LD_INT 1
77605: ARRAY
77606: PUSH
77607: LD_INT 1
77609: ARRAY
77610: PUSH
77611: LD_VAR 0 8
77615: EQUAL
77616: IFFALSE 77661
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77618: LD_ADDR_VAR 0 2
77622: PUSH
77623: LD_VAR 0 2
77627: PPUSH
77628: LD_INT 1
77630: PPUSH
77631: LD_VAR 0 2
77635: PUSH
77636: LD_INT 1
77638: ARRAY
77639: PPUSH
77640: LD_INT 1
77642: PPUSH
77643: CALL_OW 3
77647: PPUSH
77648: CALL_OW 1
77652: ST_TO_ADDR
// tmp := 1 ;
77653: LD_ADDR_VAR 0 3
77657: PUSH
77658: LD_STRING 1
77660: ST_TO_ADDR
// end ; normal := normal & tmp ;
77661: LD_ADDR_VAR 0 5
77665: PUSH
77666: LD_VAR 0 5
77670: PUSH
77671: LD_VAR 0 3
77675: STR
77676: ST_TO_ADDR
// end ;
77677: GO 77577
77679: POP
77680: POP
// for i = 1 to hardcoreCounter do
77681: LD_ADDR_VAR 0 8
77685: PUSH
77686: DOUBLE
77687: LD_INT 1
77689: DEC
77690: ST_TO_ADDR
77691: LD_EXP 66
77695: PUSH
77696: FOR_TO
77697: IFFALSE 77802
// begin tmp := 0 ;
77699: LD_ADDR_VAR 0 3
77703: PUSH
77704: LD_STRING 0
77706: ST_TO_ADDR
// if result [ 2 ] then
77707: LD_VAR 0 2
77711: PUSH
77712: LD_INT 2
77714: ARRAY
77715: IFFALSE 77784
// if result [ 2 ] [ 1 ] = 100 + i then
77717: LD_VAR 0 2
77721: PUSH
77722: LD_INT 2
77724: ARRAY
77725: PUSH
77726: LD_INT 1
77728: ARRAY
77729: PUSH
77730: LD_INT 100
77732: PUSH
77733: LD_VAR 0 8
77737: PLUS
77738: EQUAL
77739: IFFALSE 77784
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77741: LD_ADDR_VAR 0 2
77745: PUSH
77746: LD_VAR 0 2
77750: PPUSH
77751: LD_INT 2
77753: PPUSH
77754: LD_VAR 0 2
77758: PUSH
77759: LD_INT 2
77761: ARRAY
77762: PPUSH
77763: LD_INT 1
77765: PPUSH
77766: CALL_OW 3
77770: PPUSH
77771: CALL_OW 1
77775: ST_TO_ADDR
// tmp := 1 ;
77776: LD_ADDR_VAR 0 3
77780: PUSH
77781: LD_STRING 1
77783: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77784: LD_ADDR_VAR 0 6
77788: PUSH
77789: LD_VAR 0 6
77793: PUSH
77794: LD_VAR 0 3
77798: STR
77799: ST_TO_ADDR
// end ;
77800: GO 77696
77802: POP
77803: POP
// if isGameLoad then
77804: LD_VAR 0 1
77808: IFFALSE 78283
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77810: LD_ADDR_VAR 0 4
77814: PUSH
77815: LD_EXP 69
77819: PUSH
77820: LD_EXP 68
77824: PUSH
77825: LD_EXP 70
77829: PUSH
77830: LD_EXP 67
77834: PUSH
77835: LD_EXP 71
77839: PUSH
77840: LD_EXP 72
77844: PUSH
77845: LD_EXP 73
77849: PUSH
77850: LD_EXP 74
77854: PUSH
77855: LD_EXP 75
77859: PUSH
77860: LD_EXP 76
77864: PUSH
77865: LD_EXP 77
77869: PUSH
77870: LD_EXP 78
77874: PUSH
77875: LD_EXP 79
77879: PUSH
77880: LD_EXP 80
77884: PUSH
77885: LD_EXP 88
77889: PUSH
77890: LD_EXP 89
77894: PUSH
77895: LD_EXP 90
77899: PUSH
77900: LD_EXP 91
77904: PUSH
77905: LD_EXP 93
77909: PUSH
77910: LD_EXP 94
77914: PUSH
77915: LD_EXP 95
77919: PUSH
77920: LD_EXP 98
77924: PUSH
77925: LD_EXP 100
77929: PUSH
77930: LD_EXP 101
77934: PUSH
77935: LD_EXP 102
77939: PUSH
77940: LD_EXP 104
77944: PUSH
77945: LD_EXP 105
77949: PUSH
77950: LD_EXP 108
77954: PUSH
77955: LD_EXP 109
77959: PUSH
77960: LD_EXP 110
77964: PUSH
77965: LD_EXP 111
77969: PUSH
77970: LD_EXP 112
77974: PUSH
77975: LD_EXP 113
77979: PUSH
77980: LD_EXP 114
77984: PUSH
77985: LD_EXP 115
77989: PUSH
77990: LD_EXP 116
77994: PUSH
77995: LD_EXP 81
77999: PUSH
78000: LD_EXP 82
78004: PUSH
78005: LD_EXP 85
78009: PUSH
78010: LD_EXP 86
78014: PUSH
78015: LD_EXP 87
78019: PUSH
78020: LD_EXP 83
78024: PUSH
78025: LD_EXP 84
78029: PUSH
78030: LD_EXP 92
78034: PUSH
78035: LD_EXP 96
78039: PUSH
78040: LD_EXP 97
78044: PUSH
78045: LD_EXP 99
78049: PUSH
78050: LD_EXP 103
78054: PUSH
78055: LD_EXP 106
78059: PUSH
78060: LD_EXP 107
78064: PUSH
78065: LD_EXP 117
78069: PUSH
78070: LD_EXP 118
78074: PUSH
78075: LD_EXP 119
78079: PUSH
78080: LD_EXP 120
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: LIST
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: LIST
78110: LIST
78111: LIST
78112: LIST
78113: LIST
78114: LIST
78115: LIST
78116: LIST
78117: LIST
78118: LIST
78119: LIST
78120: LIST
78121: LIST
78122: LIST
78123: LIST
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: ST_TO_ADDR
// tmp :=  ;
78141: LD_ADDR_VAR 0 3
78145: PUSH
78146: LD_STRING 
78148: ST_TO_ADDR
// for i = 1 to normalCounter do
78149: LD_ADDR_VAR 0 8
78153: PUSH
78154: DOUBLE
78155: LD_INT 1
78157: DEC
78158: ST_TO_ADDR
78159: LD_EXP 65
78163: PUSH
78164: FOR_TO
78165: IFFALSE 78201
// begin if flags [ i ] then
78167: LD_VAR 0 4
78171: PUSH
78172: LD_VAR 0 8
78176: ARRAY
78177: IFFALSE 78199
// tmp := tmp & i & ; ;
78179: LD_ADDR_VAR 0 3
78183: PUSH
78184: LD_VAR 0 3
78188: PUSH
78189: LD_VAR 0 8
78193: STR
78194: PUSH
78195: LD_STRING ;
78197: STR
78198: ST_TO_ADDR
// end ;
78199: GO 78164
78201: POP
78202: POP
// for i = 1 to hardcoreCounter do
78203: LD_ADDR_VAR 0 8
78207: PUSH
78208: DOUBLE
78209: LD_INT 1
78211: DEC
78212: ST_TO_ADDR
78213: LD_EXP 66
78217: PUSH
78218: FOR_TO
78219: IFFALSE 78265
// begin if flags [ normalCounter + i ] then
78221: LD_VAR 0 4
78225: PUSH
78226: LD_EXP 65
78230: PUSH
78231: LD_VAR 0 8
78235: PLUS
78236: ARRAY
78237: IFFALSE 78263
// tmp := tmp & ( 100 + i ) & ; ;
78239: LD_ADDR_VAR 0 3
78243: PUSH
78244: LD_VAR 0 3
78248: PUSH
78249: LD_INT 100
78251: PUSH
78252: LD_VAR 0 8
78256: PLUS
78257: STR
78258: PUSH
78259: LD_STRING ;
78261: STR
78262: ST_TO_ADDR
// end ;
78263: GO 78218
78265: POP
78266: POP
// if tmp then
78267: LD_VAR 0 3
78271: IFFALSE 78283
// active := tmp ;
78273: LD_ADDR_VAR 0 7
78277: PUSH
78278: LD_VAR 0 3
78282: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78283: LD_STRING getStreamItemsFromMission("
78285: PUSH
78286: LD_VAR 0 5
78290: STR
78291: PUSH
78292: LD_STRING ","
78294: STR
78295: PUSH
78296: LD_VAR 0 6
78300: STR
78301: PUSH
78302: LD_STRING ","
78304: STR
78305: PUSH
78306: LD_VAR 0 7
78310: STR
78311: PUSH
78312: LD_STRING ")
78314: STR
78315: PPUSH
78316: CALL_OW 559
// end else
78320: GO 78329
// ToLua ( getStreamItemsFromMission("","","") ) ;
78322: LD_STRING getStreamItemsFromMission("","","")
78324: PPUSH
78325: CALL_OW 559
// end ;
78329: LD_VAR 0 2
78333: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78334: LD_EXP 64
78338: PUSH
78339: LD_EXP 69
78343: AND
78344: IFFALSE 78468
78346: GO 78348
78348: DISABLE
78349: LD_INT 0
78351: PPUSH
78352: PPUSH
// begin enable ;
78353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78354: LD_ADDR_VAR 0 2
78358: PUSH
78359: LD_INT 22
78361: PUSH
78362: LD_OWVAR 2
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: PUSH
78371: LD_INT 2
78373: PUSH
78374: LD_INT 34
78376: PUSH
78377: LD_INT 7
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PUSH
78384: LD_INT 34
78386: PUSH
78387: LD_INT 45
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: PUSH
78394: LD_INT 34
78396: PUSH
78397: LD_INT 28
78399: PUSH
78400: EMPTY
78401: LIST
78402: LIST
78403: PUSH
78404: LD_INT 34
78406: PUSH
78407: LD_INT 47
78409: PUSH
78410: EMPTY
78411: LIST
78412: LIST
78413: PUSH
78414: EMPTY
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PPUSH
78425: CALL_OW 69
78429: ST_TO_ADDR
// if not tmp then
78430: LD_VAR 0 2
78434: NOT
78435: IFFALSE 78439
// exit ;
78437: GO 78468
// for i in tmp do
78439: LD_ADDR_VAR 0 1
78443: PUSH
78444: LD_VAR 0 2
78448: PUSH
78449: FOR_IN
78450: IFFALSE 78466
// begin SetLives ( i , 0 ) ;
78452: LD_VAR 0 1
78456: PPUSH
78457: LD_INT 0
78459: PPUSH
78460: CALL_OW 234
// end ;
78464: GO 78449
78466: POP
78467: POP
// end ;
78468: PPOPN 2
78470: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78471: LD_EXP 64
78475: PUSH
78476: LD_EXP 70
78480: AND
78481: IFFALSE 78565
78483: GO 78485
78485: DISABLE
78486: LD_INT 0
78488: PPUSH
78489: PPUSH
// begin enable ;
78490: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78491: LD_ADDR_VAR 0 2
78495: PUSH
78496: LD_INT 22
78498: PUSH
78499: LD_OWVAR 2
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: PUSH
78508: LD_INT 32
78510: PUSH
78511: LD_INT 3
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: EMPTY
78519: LIST
78520: LIST
78521: PPUSH
78522: CALL_OW 69
78526: ST_TO_ADDR
// if not tmp then
78527: LD_VAR 0 2
78531: NOT
78532: IFFALSE 78536
// exit ;
78534: GO 78565
// for i in tmp do
78536: LD_ADDR_VAR 0 1
78540: PUSH
78541: LD_VAR 0 2
78545: PUSH
78546: FOR_IN
78547: IFFALSE 78563
// begin SetLives ( i , 0 ) ;
78549: LD_VAR 0 1
78553: PPUSH
78554: LD_INT 0
78556: PPUSH
78557: CALL_OW 234
// end ;
78561: GO 78546
78563: POP
78564: POP
// end ;
78565: PPOPN 2
78567: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78568: LD_EXP 64
78572: PUSH
78573: LD_EXP 67
78577: AND
78578: IFFALSE 78671
78580: GO 78582
78582: DISABLE
78583: LD_INT 0
78585: PPUSH
// begin enable ;
78586: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78587: LD_ADDR_VAR 0 1
78591: PUSH
78592: LD_INT 22
78594: PUSH
78595: LD_OWVAR 2
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: PUSH
78604: LD_INT 2
78606: PUSH
78607: LD_INT 25
78609: PUSH
78610: LD_INT 5
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: LD_INT 25
78619: PUSH
78620: LD_INT 9
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: LD_INT 25
78629: PUSH
78630: LD_INT 8
78632: PUSH
78633: EMPTY
78634: LIST
78635: LIST
78636: PUSH
78637: EMPTY
78638: LIST
78639: LIST
78640: LIST
78641: LIST
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PPUSH
78647: CALL_OW 69
78651: PUSH
78652: FOR_IN
78653: IFFALSE 78669
// begin SetClass ( i , 1 ) ;
78655: LD_VAR 0 1
78659: PPUSH
78660: LD_INT 1
78662: PPUSH
78663: CALL_OW 336
// end ;
78667: GO 78652
78669: POP
78670: POP
// end ;
78671: PPOPN 1
78673: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78674: LD_EXP 64
78678: PUSH
78679: LD_EXP 68
78683: AND
78684: PUSH
78685: LD_OWVAR 65
78689: PUSH
78690: LD_INT 7
78692: LESS
78693: AND
78694: IFFALSE 78708
78696: GO 78698
78698: DISABLE
// begin enable ;
78699: ENABLE
// game_speed := 7 ;
78700: LD_ADDR_OWVAR 65
78704: PUSH
78705: LD_INT 7
78707: ST_TO_ADDR
// end ;
78708: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78709: LD_EXP 64
78713: PUSH
78714: LD_EXP 71
78718: AND
78719: IFFALSE 78921
78721: GO 78723
78723: DISABLE
78724: LD_INT 0
78726: PPUSH
78727: PPUSH
78728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78729: LD_ADDR_VAR 0 3
78733: PUSH
78734: LD_INT 81
78736: PUSH
78737: LD_OWVAR 2
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: PUSH
78746: LD_INT 21
78748: PUSH
78749: LD_INT 1
78751: PUSH
78752: EMPTY
78753: LIST
78754: LIST
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PPUSH
78760: CALL_OW 69
78764: ST_TO_ADDR
// if not tmp then
78765: LD_VAR 0 3
78769: NOT
78770: IFFALSE 78774
// exit ;
78772: GO 78921
// if tmp > 5 then
78774: LD_VAR 0 3
78778: PUSH
78779: LD_INT 5
78781: GREATER
78782: IFFALSE 78794
// k := 5 else
78784: LD_ADDR_VAR 0 2
78788: PUSH
78789: LD_INT 5
78791: ST_TO_ADDR
78792: GO 78804
// k := tmp ;
78794: LD_ADDR_VAR 0 2
78798: PUSH
78799: LD_VAR 0 3
78803: ST_TO_ADDR
// for i := 1 to k do
78804: LD_ADDR_VAR 0 1
78808: PUSH
78809: DOUBLE
78810: LD_INT 1
78812: DEC
78813: ST_TO_ADDR
78814: LD_VAR 0 2
78818: PUSH
78819: FOR_TO
78820: IFFALSE 78919
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78822: LD_VAR 0 3
78826: PUSH
78827: LD_VAR 0 1
78831: ARRAY
78832: PPUSH
78833: LD_VAR 0 1
78837: PUSH
78838: LD_INT 4
78840: MOD
78841: PUSH
78842: LD_INT 1
78844: PLUS
78845: PPUSH
78846: CALL_OW 259
78850: PUSH
78851: LD_INT 10
78853: LESS
78854: IFFALSE 78917
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78856: LD_VAR 0 3
78860: PUSH
78861: LD_VAR 0 1
78865: ARRAY
78866: PPUSH
78867: LD_VAR 0 1
78871: PUSH
78872: LD_INT 4
78874: MOD
78875: PUSH
78876: LD_INT 1
78878: PLUS
78879: PPUSH
78880: LD_VAR 0 3
78884: PUSH
78885: LD_VAR 0 1
78889: ARRAY
78890: PPUSH
78891: LD_VAR 0 1
78895: PUSH
78896: LD_INT 4
78898: MOD
78899: PUSH
78900: LD_INT 1
78902: PLUS
78903: PPUSH
78904: CALL_OW 259
78908: PUSH
78909: LD_INT 1
78911: PLUS
78912: PPUSH
78913: CALL_OW 237
78917: GO 78819
78919: POP
78920: POP
// end ;
78921: PPOPN 3
78923: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78924: LD_EXP 64
78928: PUSH
78929: LD_EXP 72
78933: AND
78934: IFFALSE 78954
78936: GO 78938
78938: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78939: LD_INT 4
78941: PPUSH
78942: LD_OWVAR 2
78946: PPUSH
78947: LD_INT 0
78949: PPUSH
78950: CALL_OW 324
78954: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78955: LD_EXP 64
78959: PUSH
78960: LD_EXP 101
78964: AND
78965: IFFALSE 78985
78967: GO 78969
78969: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78970: LD_INT 19
78972: PPUSH
78973: LD_OWVAR 2
78977: PPUSH
78978: LD_INT 0
78980: PPUSH
78981: CALL_OW 324
78985: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78986: LD_EXP 64
78990: PUSH
78991: LD_EXP 73
78995: AND
78996: IFFALSE 79098
78998: GO 79000
79000: DISABLE
79001: LD_INT 0
79003: PPUSH
79004: PPUSH
// begin enable ;
79005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
79006: LD_ADDR_VAR 0 2
79010: PUSH
79011: LD_INT 22
79013: PUSH
79014: LD_OWVAR 2
79018: PUSH
79019: EMPTY
79020: LIST
79021: LIST
79022: PUSH
79023: LD_INT 2
79025: PUSH
79026: LD_INT 34
79028: PUSH
79029: LD_INT 11
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PUSH
79036: LD_INT 34
79038: PUSH
79039: LD_INT 30
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: LIST
79050: PUSH
79051: EMPTY
79052: LIST
79053: LIST
79054: PPUSH
79055: CALL_OW 69
79059: ST_TO_ADDR
// if not tmp then
79060: LD_VAR 0 2
79064: NOT
79065: IFFALSE 79069
// exit ;
79067: GO 79098
// for i in tmp do
79069: LD_ADDR_VAR 0 1
79073: PUSH
79074: LD_VAR 0 2
79078: PUSH
79079: FOR_IN
79080: IFFALSE 79096
// begin SetLives ( i , 0 ) ;
79082: LD_VAR 0 1
79086: PPUSH
79087: LD_INT 0
79089: PPUSH
79090: CALL_OW 234
// end ;
79094: GO 79079
79096: POP
79097: POP
// end ;
79098: PPOPN 2
79100: END
// every 0 0$1 trigger StreamModeActive and sBunker do
79101: LD_EXP 64
79105: PUSH
79106: LD_EXP 74
79110: AND
79111: IFFALSE 79131
79113: GO 79115
79115: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
79116: LD_INT 32
79118: PPUSH
79119: LD_OWVAR 2
79123: PPUSH
79124: LD_INT 0
79126: PPUSH
79127: CALL_OW 324
79131: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
79132: LD_EXP 64
79136: PUSH
79137: LD_EXP 75
79141: AND
79142: IFFALSE 79323
79144: GO 79146
79146: DISABLE
79147: LD_INT 0
79149: PPUSH
79150: PPUSH
79151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
79152: LD_ADDR_VAR 0 2
79156: PUSH
79157: LD_INT 22
79159: PUSH
79160: LD_OWVAR 2
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: PUSH
79169: LD_INT 33
79171: PUSH
79172: LD_INT 3
79174: PUSH
79175: EMPTY
79176: LIST
79177: LIST
79178: PUSH
79179: EMPTY
79180: LIST
79181: LIST
79182: PPUSH
79183: CALL_OW 69
79187: ST_TO_ADDR
// if not tmp then
79188: LD_VAR 0 2
79192: NOT
79193: IFFALSE 79197
// exit ;
79195: GO 79323
// side := 0 ;
79197: LD_ADDR_VAR 0 3
79201: PUSH
79202: LD_INT 0
79204: ST_TO_ADDR
// for i := 1 to 8 do
79205: LD_ADDR_VAR 0 1
79209: PUSH
79210: DOUBLE
79211: LD_INT 1
79213: DEC
79214: ST_TO_ADDR
79215: LD_INT 8
79217: PUSH
79218: FOR_TO
79219: IFFALSE 79267
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79221: LD_OWVAR 2
79225: PUSH
79226: LD_VAR 0 1
79230: NONEQUAL
79231: PUSH
79232: LD_OWVAR 2
79236: PPUSH
79237: LD_VAR 0 1
79241: PPUSH
79242: CALL_OW 81
79246: PUSH
79247: LD_INT 2
79249: EQUAL
79250: AND
79251: IFFALSE 79265
// begin side := i ;
79253: LD_ADDR_VAR 0 3
79257: PUSH
79258: LD_VAR 0 1
79262: ST_TO_ADDR
// break ;
79263: GO 79267
// end ;
79265: GO 79218
79267: POP
79268: POP
// if not side then
79269: LD_VAR 0 3
79273: NOT
79274: IFFALSE 79278
// exit ;
79276: GO 79323
// for i := 1 to tmp do
79278: LD_ADDR_VAR 0 1
79282: PUSH
79283: DOUBLE
79284: LD_INT 1
79286: DEC
79287: ST_TO_ADDR
79288: LD_VAR 0 2
79292: PUSH
79293: FOR_TO
79294: IFFALSE 79321
// if Prob ( 60 ) then
79296: LD_INT 60
79298: PPUSH
79299: CALL_OW 13
79303: IFFALSE 79319
// SetSide ( i , side ) ;
79305: LD_VAR 0 1
79309: PPUSH
79310: LD_VAR 0 3
79314: PPUSH
79315: CALL_OW 235
79319: GO 79293
79321: POP
79322: POP
// end ;
79323: PPOPN 3
79325: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79326: LD_EXP 64
79330: PUSH
79331: LD_EXP 77
79335: AND
79336: IFFALSE 79455
79338: GO 79340
79340: DISABLE
79341: LD_INT 0
79343: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79344: LD_ADDR_VAR 0 1
79348: PUSH
79349: LD_INT 22
79351: PUSH
79352: LD_OWVAR 2
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: PUSH
79361: LD_INT 21
79363: PUSH
79364: LD_INT 1
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: LD_INT 3
79373: PUSH
79374: LD_INT 23
79376: PUSH
79377: LD_INT 0
79379: PUSH
79380: EMPTY
79381: LIST
79382: LIST
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: LIST
79392: PPUSH
79393: CALL_OW 69
79397: PUSH
79398: FOR_IN
79399: IFFALSE 79453
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79401: LD_VAR 0 1
79405: PPUSH
79406: CALL_OW 257
79410: PUSH
79411: LD_INT 1
79413: PUSH
79414: LD_INT 2
79416: PUSH
79417: LD_INT 3
79419: PUSH
79420: LD_INT 4
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: LIST
79427: LIST
79428: IN
79429: IFFALSE 79451
// SetClass ( un , rand ( 1 , 4 ) ) ;
79431: LD_VAR 0 1
79435: PPUSH
79436: LD_INT 1
79438: PPUSH
79439: LD_INT 4
79441: PPUSH
79442: CALL_OW 12
79446: PPUSH
79447: CALL_OW 336
79451: GO 79398
79453: POP
79454: POP
// end ;
79455: PPOPN 1
79457: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79458: LD_EXP 64
79462: PUSH
79463: LD_EXP 76
79467: AND
79468: IFFALSE 79547
79470: GO 79472
79472: DISABLE
79473: LD_INT 0
79475: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79476: LD_ADDR_VAR 0 1
79480: PUSH
79481: LD_INT 22
79483: PUSH
79484: LD_OWVAR 2
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: PUSH
79493: LD_INT 21
79495: PUSH
79496: LD_INT 3
79498: PUSH
79499: EMPTY
79500: LIST
79501: LIST
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PPUSH
79507: CALL_OW 69
79511: ST_TO_ADDR
// if not tmp then
79512: LD_VAR 0 1
79516: NOT
79517: IFFALSE 79521
// exit ;
79519: GO 79547
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79521: LD_VAR 0 1
79525: PUSH
79526: LD_INT 1
79528: PPUSH
79529: LD_VAR 0 1
79533: PPUSH
79534: CALL_OW 12
79538: ARRAY
79539: PPUSH
79540: LD_INT 100
79542: PPUSH
79543: CALL_OW 234
// end ;
79547: PPOPN 1
79549: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79550: LD_EXP 64
79554: PUSH
79555: LD_EXP 78
79559: AND
79560: IFFALSE 79658
79562: GO 79564
79564: DISABLE
79565: LD_INT 0
79567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79568: LD_ADDR_VAR 0 1
79572: PUSH
79573: LD_INT 22
79575: PUSH
79576: LD_OWVAR 2
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: PUSH
79585: LD_INT 21
79587: PUSH
79588: LD_INT 1
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PPUSH
79599: CALL_OW 69
79603: ST_TO_ADDR
// if not tmp then
79604: LD_VAR 0 1
79608: NOT
79609: IFFALSE 79613
// exit ;
79611: GO 79658
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79613: LD_VAR 0 1
79617: PUSH
79618: LD_INT 1
79620: PPUSH
79621: LD_VAR 0 1
79625: PPUSH
79626: CALL_OW 12
79630: ARRAY
79631: PPUSH
79632: LD_INT 1
79634: PPUSH
79635: LD_INT 4
79637: PPUSH
79638: CALL_OW 12
79642: PPUSH
79643: LD_INT 3000
79645: PPUSH
79646: LD_INT 9000
79648: PPUSH
79649: CALL_OW 12
79653: PPUSH
79654: CALL_OW 492
// end ;
79658: PPOPN 1
79660: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79661: LD_EXP 64
79665: PUSH
79666: LD_EXP 79
79670: AND
79671: IFFALSE 79691
79673: GO 79675
79675: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79676: LD_INT 1
79678: PPUSH
79679: LD_OWVAR 2
79683: PPUSH
79684: LD_INT 0
79686: PPUSH
79687: CALL_OW 324
79691: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79692: LD_EXP 64
79696: PUSH
79697: LD_EXP 80
79701: AND
79702: IFFALSE 79785
79704: GO 79706
79706: DISABLE
79707: LD_INT 0
79709: PPUSH
79710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79711: LD_ADDR_VAR 0 2
79715: PUSH
79716: LD_INT 22
79718: PUSH
79719: LD_OWVAR 2
79723: PUSH
79724: EMPTY
79725: LIST
79726: LIST
79727: PUSH
79728: LD_INT 21
79730: PUSH
79731: LD_INT 3
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: PPUSH
79742: CALL_OW 69
79746: ST_TO_ADDR
// if not tmp then
79747: LD_VAR 0 2
79751: NOT
79752: IFFALSE 79756
// exit ;
79754: GO 79785
// for i in tmp do
79756: LD_ADDR_VAR 0 1
79760: PUSH
79761: LD_VAR 0 2
79765: PUSH
79766: FOR_IN
79767: IFFALSE 79783
// SetBLevel ( i , 10 ) ;
79769: LD_VAR 0 1
79773: PPUSH
79774: LD_INT 10
79776: PPUSH
79777: CALL_OW 241
79781: GO 79766
79783: POP
79784: POP
// end ;
79785: PPOPN 2
79787: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79788: LD_EXP 64
79792: PUSH
79793: LD_EXP 81
79797: AND
79798: IFFALSE 79909
79800: GO 79802
79802: DISABLE
79803: LD_INT 0
79805: PPUSH
79806: PPUSH
79807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79808: LD_ADDR_VAR 0 3
79812: PUSH
79813: LD_INT 22
79815: PUSH
79816: LD_OWVAR 2
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 25
79827: PUSH
79828: LD_INT 1
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: EMPTY
79836: LIST
79837: LIST
79838: PPUSH
79839: CALL_OW 69
79843: ST_TO_ADDR
// if not tmp then
79844: LD_VAR 0 3
79848: NOT
79849: IFFALSE 79853
// exit ;
79851: GO 79909
// un := tmp [ rand ( 1 , tmp ) ] ;
79853: LD_ADDR_VAR 0 2
79857: PUSH
79858: LD_VAR 0 3
79862: PUSH
79863: LD_INT 1
79865: PPUSH
79866: LD_VAR 0 3
79870: PPUSH
79871: CALL_OW 12
79875: ARRAY
79876: ST_TO_ADDR
// if Crawls ( un ) then
79877: LD_VAR 0 2
79881: PPUSH
79882: CALL_OW 318
79886: IFFALSE 79897
// ComWalk ( un ) ;
79888: LD_VAR 0 2
79892: PPUSH
79893: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79897: LD_VAR 0 2
79901: PPUSH
79902: LD_INT 5
79904: PPUSH
79905: CALL_OW 336
// end ;
79909: PPOPN 3
79911: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79912: LD_EXP 64
79916: PUSH
79917: LD_EXP 82
79921: AND
79922: PUSH
79923: LD_OWVAR 67
79927: PUSH
79928: LD_INT 4
79930: LESS
79931: AND
79932: IFFALSE 79951
79934: GO 79936
79936: DISABLE
// begin Difficulty := Difficulty + 1 ;
79937: LD_ADDR_OWVAR 67
79941: PUSH
79942: LD_OWVAR 67
79946: PUSH
79947: LD_INT 1
79949: PLUS
79950: ST_TO_ADDR
// end ;
79951: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79952: LD_EXP 64
79956: PUSH
79957: LD_EXP 83
79961: AND
79962: IFFALSE 80065
79964: GO 79966
79966: DISABLE
79967: LD_INT 0
79969: PPUSH
// begin for i := 1 to 5 do
79970: LD_ADDR_VAR 0 1
79974: PUSH
79975: DOUBLE
79976: LD_INT 1
79978: DEC
79979: ST_TO_ADDR
79980: LD_INT 5
79982: PUSH
79983: FOR_TO
79984: IFFALSE 80063
// begin uc_nation := nation_nature ;
79986: LD_ADDR_OWVAR 21
79990: PUSH
79991: LD_INT 0
79993: ST_TO_ADDR
// uc_side := 0 ;
79994: LD_ADDR_OWVAR 20
79998: PUSH
79999: LD_INT 0
80001: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80002: LD_ADDR_OWVAR 29
80006: PUSH
80007: LD_INT 12
80009: PUSH
80010: LD_INT 12
80012: PUSH
80013: EMPTY
80014: LIST
80015: LIST
80016: ST_TO_ADDR
// hc_agressivity := 20 ;
80017: LD_ADDR_OWVAR 35
80021: PUSH
80022: LD_INT 20
80024: ST_TO_ADDR
// hc_class := class_tiger ;
80025: LD_ADDR_OWVAR 28
80029: PUSH
80030: LD_INT 14
80032: ST_TO_ADDR
// hc_gallery :=  ;
80033: LD_ADDR_OWVAR 33
80037: PUSH
80038: LD_STRING 
80040: ST_TO_ADDR
// hc_name :=  ;
80041: LD_ADDR_OWVAR 26
80045: PUSH
80046: LD_STRING 
80048: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
80049: CALL_OW 44
80053: PPUSH
80054: LD_INT 0
80056: PPUSH
80057: CALL_OW 51
// end ;
80061: GO 79983
80063: POP
80064: POP
// end ;
80065: PPOPN 1
80067: END
// every 0 0$1 trigger StreamModeActive and sBomb do
80068: LD_EXP 64
80072: PUSH
80073: LD_EXP 84
80077: AND
80078: IFFALSE 80087
80080: GO 80082
80082: DISABLE
// StreamSibBomb ;
80083: CALL 80088 0 0
80087: END
// export function StreamSibBomb ; var i , x , y ; begin
80088: LD_INT 0
80090: PPUSH
80091: PPUSH
80092: PPUSH
80093: PPUSH
// result := false ;
80094: LD_ADDR_VAR 0 1
80098: PUSH
80099: LD_INT 0
80101: ST_TO_ADDR
// for i := 1 to 16 do
80102: LD_ADDR_VAR 0 2
80106: PUSH
80107: DOUBLE
80108: LD_INT 1
80110: DEC
80111: ST_TO_ADDR
80112: LD_INT 16
80114: PUSH
80115: FOR_TO
80116: IFFALSE 80315
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80118: LD_ADDR_VAR 0 3
80122: PUSH
80123: LD_INT 10
80125: PUSH
80126: LD_INT 20
80128: PUSH
80129: LD_INT 30
80131: PUSH
80132: LD_INT 40
80134: PUSH
80135: LD_INT 50
80137: PUSH
80138: LD_INT 60
80140: PUSH
80141: LD_INT 70
80143: PUSH
80144: LD_INT 80
80146: PUSH
80147: LD_INT 90
80149: PUSH
80150: LD_INT 100
80152: PUSH
80153: LD_INT 110
80155: PUSH
80156: LD_INT 120
80158: PUSH
80159: LD_INT 130
80161: PUSH
80162: LD_INT 140
80164: PUSH
80165: LD_INT 150
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: PUSH
80185: LD_INT 1
80187: PPUSH
80188: LD_INT 15
80190: PPUSH
80191: CALL_OW 12
80195: ARRAY
80196: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80197: LD_ADDR_VAR 0 4
80201: PUSH
80202: LD_INT 10
80204: PUSH
80205: LD_INT 20
80207: PUSH
80208: LD_INT 30
80210: PUSH
80211: LD_INT 40
80213: PUSH
80214: LD_INT 50
80216: PUSH
80217: LD_INT 60
80219: PUSH
80220: LD_INT 70
80222: PUSH
80223: LD_INT 80
80225: PUSH
80226: LD_INT 90
80228: PUSH
80229: LD_INT 100
80231: PUSH
80232: LD_INT 110
80234: PUSH
80235: LD_INT 120
80237: PUSH
80238: LD_INT 130
80240: PUSH
80241: LD_INT 140
80243: PUSH
80244: LD_INT 150
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: LIST
80255: LIST
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: LIST
80262: LIST
80263: PUSH
80264: LD_INT 1
80266: PPUSH
80267: LD_INT 15
80269: PPUSH
80270: CALL_OW 12
80274: ARRAY
80275: ST_TO_ADDR
// if ValidHex ( x , y ) then
80276: LD_VAR 0 3
80280: PPUSH
80281: LD_VAR 0 4
80285: PPUSH
80286: CALL_OW 488
80290: IFFALSE 80313
// begin result := [ x , y ] ;
80292: LD_ADDR_VAR 0 1
80296: PUSH
80297: LD_VAR 0 3
80301: PUSH
80302: LD_VAR 0 4
80306: PUSH
80307: EMPTY
80308: LIST
80309: LIST
80310: ST_TO_ADDR
// break ;
80311: GO 80315
// end ; end ;
80313: GO 80115
80315: POP
80316: POP
// if result then
80317: LD_VAR 0 1
80321: IFFALSE 80381
// begin ToLua ( playSibBomb() ) ;
80323: LD_STRING playSibBomb()
80325: PPUSH
80326: CALL_OW 559
// wait ( 0 0$14 ) ;
80330: LD_INT 490
80332: PPUSH
80333: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80337: LD_VAR 0 1
80341: PUSH
80342: LD_INT 1
80344: ARRAY
80345: PPUSH
80346: LD_VAR 0 1
80350: PUSH
80351: LD_INT 2
80353: ARRAY
80354: PPUSH
80355: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80359: LD_VAR 0 1
80363: PUSH
80364: LD_INT 1
80366: ARRAY
80367: PPUSH
80368: LD_VAR 0 1
80372: PUSH
80373: LD_INT 2
80375: ARRAY
80376: PPUSH
80377: CALL_OW 429
// end ; end ;
80381: LD_VAR 0 1
80385: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80386: LD_EXP 64
80390: PUSH
80391: LD_EXP 86
80395: AND
80396: IFFALSE 80408
80398: GO 80400
80400: DISABLE
// YouLost (  ) ;
80401: LD_STRING 
80403: PPUSH
80404: CALL_OW 104
80408: END
// every 0 0$1 trigger StreamModeActive and sFog do
80409: LD_EXP 64
80413: PUSH
80414: LD_EXP 85
80418: AND
80419: IFFALSE 80433
80421: GO 80423
80423: DISABLE
// FogOff ( your_side ) ;
80424: LD_OWVAR 2
80428: PPUSH
80429: CALL_OW 344
80433: END
// every 0 0$1 trigger StreamModeActive and sSun do
80434: LD_EXP 64
80438: PUSH
80439: LD_EXP 87
80443: AND
80444: IFFALSE 80472
80446: GO 80448
80448: DISABLE
// begin solar_recharge_percent := 0 ;
80449: LD_ADDR_OWVAR 79
80453: PUSH
80454: LD_INT 0
80456: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80457: LD_INT 10500
80459: PPUSH
80460: CALL_OW 67
// solar_recharge_percent := 100 ;
80464: LD_ADDR_OWVAR 79
80468: PUSH
80469: LD_INT 100
80471: ST_TO_ADDR
// end ;
80472: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80473: LD_EXP 64
80477: PUSH
80478: LD_EXP 88
80482: AND
80483: IFFALSE 80722
80485: GO 80487
80487: DISABLE
80488: LD_INT 0
80490: PPUSH
80491: PPUSH
80492: PPUSH
// begin tmp := [ ] ;
80493: LD_ADDR_VAR 0 3
80497: PUSH
80498: EMPTY
80499: ST_TO_ADDR
// for i := 1 to 6 do
80500: LD_ADDR_VAR 0 1
80504: PUSH
80505: DOUBLE
80506: LD_INT 1
80508: DEC
80509: ST_TO_ADDR
80510: LD_INT 6
80512: PUSH
80513: FOR_TO
80514: IFFALSE 80619
// begin uc_nation := nation_nature ;
80516: LD_ADDR_OWVAR 21
80520: PUSH
80521: LD_INT 0
80523: ST_TO_ADDR
// uc_side := 0 ;
80524: LD_ADDR_OWVAR 20
80528: PUSH
80529: LD_INT 0
80531: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80532: LD_ADDR_OWVAR 29
80536: PUSH
80537: LD_INT 12
80539: PUSH
80540: LD_INT 12
80542: PUSH
80543: EMPTY
80544: LIST
80545: LIST
80546: ST_TO_ADDR
// hc_agressivity := 20 ;
80547: LD_ADDR_OWVAR 35
80551: PUSH
80552: LD_INT 20
80554: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80555: LD_ADDR_OWVAR 28
80559: PUSH
80560: LD_INT 17
80562: ST_TO_ADDR
// hc_gallery :=  ;
80563: LD_ADDR_OWVAR 33
80567: PUSH
80568: LD_STRING 
80570: ST_TO_ADDR
// hc_name :=  ;
80571: LD_ADDR_OWVAR 26
80575: PUSH
80576: LD_STRING 
80578: ST_TO_ADDR
// un := CreateHuman ;
80579: LD_ADDR_VAR 0 2
80583: PUSH
80584: CALL_OW 44
80588: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80589: LD_VAR 0 2
80593: PPUSH
80594: LD_INT 1
80596: PPUSH
80597: CALL_OW 51
// tmp := tmp ^ un ;
80601: LD_ADDR_VAR 0 3
80605: PUSH
80606: LD_VAR 0 3
80610: PUSH
80611: LD_VAR 0 2
80615: ADD
80616: ST_TO_ADDR
// end ;
80617: GO 80513
80619: POP
80620: POP
// repeat wait ( 0 0$1 ) ;
80621: LD_INT 35
80623: PPUSH
80624: CALL_OW 67
// for un in tmp do
80628: LD_ADDR_VAR 0 2
80632: PUSH
80633: LD_VAR 0 3
80637: PUSH
80638: FOR_IN
80639: IFFALSE 80713
// begin if IsDead ( un ) then
80641: LD_VAR 0 2
80645: PPUSH
80646: CALL_OW 301
80650: IFFALSE 80670
// begin tmp := tmp diff un ;
80652: LD_ADDR_VAR 0 3
80656: PUSH
80657: LD_VAR 0 3
80661: PUSH
80662: LD_VAR 0 2
80666: DIFF
80667: ST_TO_ADDR
// continue ;
80668: GO 80638
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80670: LD_VAR 0 2
80674: PPUSH
80675: LD_INT 3
80677: PUSH
80678: LD_INT 22
80680: PUSH
80681: LD_INT 0
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: PPUSH
80692: CALL_OW 69
80696: PPUSH
80697: LD_VAR 0 2
80701: PPUSH
80702: CALL_OW 74
80706: PPUSH
80707: CALL_OW 115
// end ;
80711: GO 80638
80713: POP
80714: POP
// until not tmp ;
80715: LD_VAR 0 3
80719: NOT
80720: IFFALSE 80621
// end ;
80722: PPOPN 3
80724: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80725: LD_EXP 64
80729: PUSH
80730: LD_EXP 89
80734: AND
80735: IFFALSE 80789
80737: GO 80739
80739: DISABLE
// begin ToLua ( displayTroll(); ) ;
80740: LD_STRING displayTroll();
80742: PPUSH
80743: CALL_OW 559
// wait ( 3 3$00 ) ;
80747: LD_INT 6300
80749: PPUSH
80750: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80754: LD_STRING hideTroll();
80756: PPUSH
80757: CALL_OW 559
// wait ( 1 1$00 ) ;
80761: LD_INT 2100
80763: PPUSH
80764: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80768: LD_STRING displayTroll();
80770: PPUSH
80771: CALL_OW 559
// wait ( 1 1$00 ) ;
80775: LD_INT 2100
80777: PPUSH
80778: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80782: LD_STRING hideTroll();
80784: PPUSH
80785: CALL_OW 559
// end ;
80789: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80790: LD_EXP 64
80794: PUSH
80795: LD_EXP 90
80799: AND
80800: IFFALSE 80863
80802: GO 80804
80804: DISABLE
80805: LD_INT 0
80807: PPUSH
// begin p := 0 ;
80808: LD_ADDR_VAR 0 1
80812: PUSH
80813: LD_INT 0
80815: ST_TO_ADDR
// repeat game_speed := 1 ;
80816: LD_ADDR_OWVAR 65
80820: PUSH
80821: LD_INT 1
80823: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80824: LD_INT 35
80826: PPUSH
80827: CALL_OW 67
// p := p + 1 ;
80831: LD_ADDR_VAR 0 1
80835: PUSH
80836: LD_VAR 0 1
80840: PUSH
80841: LD_INT 1
80843: PLUS
80844: ST_TO_ADDR
// until p >= 60 ;
80845: LD_VAR 0 1
80849: PUSH
80850: LD_INT 60
80852: GREATEREQUAL
80853: IFFALSE 80816
// game_speed := 4 ;
80855: LD_ADDR_OWVAR 65
80859: PUSH
80860: LD_INT 4
80862: ST_TO_ADDR
// end ;
80863: PPOPN 1
80865: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80866: LD_EXP 64
80870: PUSH
80871: LD_EXP 91
80875: AND
80876: IFFALSE 81022
80878: GO 80880
80880: DISABLE
80881: LD_INT 0
80883: PPUSH
80884: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80885: LD_ADDR_VAR 0 1
80889: PUSH
80890: LD_INT 22
80892: PUSH
80893: LD_OWVAR 2
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: PUSH
80902: LD_INT 2
80904: PUSH
80905: LD_INT 30
80907: PUSH
80908: LD_INT 0
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: LD_INT 30
80917: PUSH
80918: LD_INT 1
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: LIST
80929: PUSH
80930: EMPTY
80931: LIST
80932: LIST
80933: PPUSH
80934: CALL_OW 69
80938: ST_TO_ADDR
// if not depot then
80939: LD_VAR 0 1
80943: NOT
80944: IFFALSE 80948
// exit ;
80946: GO 81022
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80948: LD_ADDR_VAR 0 2
80952: PUSH
80953: LD_VAR 0 1
80957: PUSH
80958: LD_INT 1
80960: PPUSH
80961: LD_VAR 0 1
80965: PPUSH
80966: CALL_OW 12
80970: ARRAY
80971: PPUSH
80972: CALL_OW 274
80976: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80977: LD_VAR 0 2
80981: PPUSH
80982: LD_INT 1
80984: PPUSH
80985: LD_INT 0
80987: PPUSH
80988: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80992: LD_VAR 0 2
80996: PPUSH
80997: LD_INT 2
80999: PPUSH
81000: LD_INT 0
81002: PPUSH
81003: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
81007: LD_VAR 0 2
81011: PPUSH
81012: LD_INT 3
81014: PPUSH
81015: LD_INT 0
81017: PPUSH
81018: CALL_OW 277
// end ;
81022: PPOPN 2
81024: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
81025: LD_EXP 64
81029: PUSH
81030: LD_EXP 92
81034: AND
81035: IFFALSE 81132
81037: GO 81039
81039: DISABLE
81040: LD_INT 0
81042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
81043: LD_ADDR_VAR 0 1
81047: PUSH
81048: LD_INT 22
81050: PUSH
81051: LD_OWVAR 2
81055: PUSH
81056: EMPTY
81057: LIST
81058: LIST
81059: PUSH
81060: LD_INT 21
81062: PUSH
81063: LD_INT 1
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: PUSH
81070: LD_INT 3
81072: PUSH
81073: LD_INT 23
81075: PUSH
81076: LD_INT 0
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: LIST
81091: PPUSH
81092: CALL_OW 69
81096: ST_TO_ADDR
// if not tmp then
81097: LD_VAR 0 1
81101: NOT
81102: IFFALSE 81106
// exit ;
81104: GO 81132
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
81106: LD_VAR 0 1
81110: PUSH
81111: LD_INT 1
81113: PPUSH
81114: LD_VAR 0 1
81118: PPUSH
81119: CALL_OW 12
81123: ARRAY
81124: PPUSH
81125: LD_INT 200
81127: PPUSH
81128: CALL_OW 234
// end ;
81132: PPOPN 1
81134: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
81135: LD_EXP 64
81139: PUSH
81140: LD_EXP 93
81144: AND
81145: IFFALSE 81224
81147: GO 81149
81149: DISABLE
81150: LD_INT 0
81152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
81153: LD_ADDR_VAR 0 1
81157: PUSH
81158: LD_INT 22
81160: PUSH
81161: LD_OWVAR 2
81165: PUSH
81166: EMPTY
81167: LIST
81168: LIST
81169: PUSH
81170: LD_INT 21
81172: PUSH
81173: LD_INT 2
81175: PUSH
81176: EMPTY
81177: LIST
81178: LIST
81179: PUSH
81180: EMPTY
81181: LIST
81182: LIST
81183: PPUSH
81184: CALL_OW 69
81188: ST_TO_ADDR
// if not tmp then
81189: LD_VAR 0 1
81193: NOT
81194: IFFALSE 81198
// exit ;
81196: GO 81224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
81198: LD_VAR 0 1
81202: PUSH
81203: LD_INT 1
81205: PPUSH
81206: LD_VAR 0 1
81210: PPUSH
81211: CALL_OW 12
81215: ARRAY
81216: PPUSH
81217: LD_INT 60
81219: PPUSH
81220: CALL_OW 234
// end ;
81224: PPOPN 1
81226: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81227: LD_EXP 64
81231: PUSH
81232: LD_EXP 94
81236: AND
81237: IFFALSE 81336
81239: GO 81241
81241: DISABLE
81242: LD_INT 0
81244: PPUSH
81245: PPUSH
// begin enable ;
81246: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81247: LD_ADDR_VAR 0 1
81251: PUSH
81252: LD_INT 22
81254: PUSH
81255: LD_OWVAR 2
81259: PUSH
81260: EMPTY
81261: LIST
81262: LIST
81263: PUSH
81264: LD_INT 61
81266: PUSH
81267: EMPTY
81268: LIST
81269: PUSH
81270: LD_INT 33
81272: PUSH
81273: LD_INT 2
81275: PUSH
81276: EMPTY
81277: LIST
81278: LIST
81279: PUSH
81280: EMPTY
81281: LIST
81282: LIST
81283: LIST
81284: PPUSH
81285: CALL_OW 69
81289: ST_TO_ADDR
// if not tmp then
81290: LD_VAR 0 1
81294: NOT
81295: IFFALSE 81299
// exit ;
81297: GO 81336
// for i in tmp do
81299: LD_ADDR_VAR 0 2
81303: PUSH
81304: LD_VAR 0 1
81308: PUSH
81309: FOR_IN
81310: IFFALSE 81334
// if IsControledBy ( i ) then
81312: LD_VAR 0 2
81316: PPUSH
81317: CALL_OW 312
81321: IFFALSE 81332
// ComUnlink ( i ) ;
81323: LD_VAR 0 2
81327: PPUSH
81328: CALL_OW 136
81332: GO 81309
81334: POP
81335: POP
// end ;
81336: PPOPN 2
81338: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81339: LD_EXP 64
81343: PUSH
81344: LD_EXP 95
81348: AND
81349: IFFALSE 81489
81351: GO 81353
81353: DISABLE
81354: LD_INT 0
81356: PPUSH
81357: PPUSH
// begin ToLua ( displayPowell(); ) ;
81358: LD_STRING displayPowell();
81360: PPUSH
81361: CALL_OW 559
// uc_side := 0 ;
81365: LD_ADDR_OWVAR 20
81369: PUSH
81370: LD_INT 0
81372: ST_TO_ADDR
// uc_nation := 2 ;
81373: LD_ADDR_OWVAR 21
81377: PUSH
81378: LD_INT 2
81380: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81381: LD_ADDR_OWVAR 37
81385: PUSH
81386: LD_INT 14
81388: ST_TO_ADDR
// vc_engine := engine_siberite ;
81389: LD_ADDR_OWVAR 39
81393: PUSH
81394: LD_INT 3
81396: ST_TO_ADDR
// vc_control := control_apeman ;
81397: LD_ADDR_OWVAR 38
81401: PUSH
81402: LD_INT 5
81404: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81405: LD_ADDR_OWVAR 40
81409: PUSH
81410: LD_INT 29
81412: ST_TO_ADDR
// un := CreateVehicle ;
81413: LD_ADDR_VAR 0 2
81417: PUSH
81418: CALL_OW 45
81422: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81423: LD_VAR 0 2
81427: PPUSH
81428: LD_INT 1
81430: PPUSH
81431: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81435: LD_INT 35
81437: PPUSH
81438: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81442: LD_VAR 0 2
81446: PPUSH
81447: LD_INT 22
81449: PUSH
81450: LD_OWVAR 2
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: PPUSH
81459: CALL_OW 69
81463: PPUSH
81464: LD_VAR 0 2
81468: PPUSH
81469: CALL_OW 74
81473: PPUSH
81474: CALL_OW 115
// until IsDead ( un ) ;
81478: LD_VAR 0 2
81482: PPUSH
81483: CALL_OW 301
81487: IFFALSE 81435
// end ;
81489: PPOPN 2
81491: END
// every 0 0$1 trigger StreamModeActive and sStu do
81492: LD_EXP 64
81496: PUSH
81497: LD_EXP 103
81501: AND
81502: IFFALSE 81518
81504: GO 81506
81506: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81507: LD_STRING displayStucuk();
81509: PPUSH
81510: CALL_OW 559
// ResetFog ;
81514: CALL_OW 335
// end ;
81518: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81519: LD_EXP 64
81523: PUSH
81524: LD_EXP 96
81528: AND
81529: IFFALSE 81670
81531: GO 81533
81533: DISABLE
81534: LD_INT 0
81536: PPUSH
81537: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81538: LD_ADDR_VAR 0 2
81542: PUSH
81543: LD_INT 22
81545: PUSH
81546: LD_OWVAR 2
81550: PUSH
81551: EMPTY
81552: LIST
81553: LIST
81554: PUSH
81555: LD_INT 21
81557: PUSH
81558: LD_INT 1
81560: PUSH
81561: EMPTY
81562: LIST
81563: LIST
81564: PUSH
81565: EMPTY
81566: LIST
81567: LIST
81568: PPUSH
81569: CALL_OW 69
81573: ST_TO_ADDR
// if not tmp then
81574: LD_VAR 0 2
81578: NOT
81579: IFFALSE 81583
// exit ;
81581: GO 81670
// un := tmp [ rand ( 1 , tmp ) ] ;
81583: LD_ADDR_VAR 0 1
81587: PUSH
81588: LD_VAR 0 2
81592: PUSH
81593: LD_INT 1
81595: PPUSH
81596: LD_VAR 0 2
81600: PPUSH
81601: CALL_OW 12
81605: ARRAY
81606: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81607: LD_VAR 0 1
81611: PPUSH
81612: LD_INT 0
81614: PPUSH
81615: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81619: LD_VAR 0 1
81623: PPUSH
81624: LD_OWVAR 3
81628: PUSH
81629: LD_VAR 0 1
81633: DIFF
81634: PPUSH
81635: LD_VAR 0 1
81639: PPUSH
81640: CALL_OW 74
81644: PPUSH
81645: CALL_OW 115
// wait ( 0 0$20 ) ;
81649: LD_INT 700
81651: PPUSH
81652: CALL_OW 67
// SetSide ( un , your_side ) ;
81656: LD_VAR 0 1
81660: PPUSH
81661: LD_OWVAR 2
81665: PPUSH
81666: CALL_OW 235
// end ;
81670: PPOPN 2
81672: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81673: LD_EXP 64
81677: PUSH
81678: LD_EXP 97
81682: AND
81683: IFFALSE 81789
81685: GO 81687
81687: DISABLE
81688: LD_INT 0
81690: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81691: LD_ADDR_VAR 0 1
81695: PUSH
81696: LD_INT 22
81698: PUSH
81699: LD_OWVAR 2
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PUSH
81708: LD_INT 2
81710: PUSH
81711: LD_INT 30
81713: PUSH
81714: LD_INT 0
81716: PUSH
81717: EMPTY
81718: LIST
81719: LIST
81720: PUSH
81721: LD_INT 30
81723: PUSH
81724: LD_INT 1
81726: PUSH
81727: EMPTY
81728: LIST
81729: LIST
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: LIST
81735: PUSH
81736: EMPTY
81737: LIST
81738: LIST
81739: PPUSH
81740: CALL_OW 69
81744: ST_TO_ADDR
// if not depot then
81745: LD_VAR 0 1
81749: NOT
81750: IFFALSE 81754
// exit ;
81752: GO 81789
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81754: LD_VAR 0 1
81758: PUSH
81759: LD_INT 1
81761: ARRAY
81762: PPUSH
81763: CALL_OW 250
81767: PPUSH
81768: LD_VAR 0 1
81772: PUSH
81773: LD_INT 1
81775: ARRAY
81776: PPUSH
81777: CALL_OW 251
81781: PPUSH
81782: LD_INT 70
81784: PPUSH
81785: CALL_OW 495
// end ;
81789: PPOPN 1
81791: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81792: LD_EXP 64
81796: PUSH
81797: LD_EXP 98
81801: AND
81802: IFFALSE 82013
81804: GO 81806
81806: DISABLE
81807: LD_INT 0
81809: PPUSH
81810: PPUSH
81811: PPUSH
81812: PPUSH
81813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81814: LD_ADDR_VAR 0 5
81818: PUSH
81819: LD_INT 22
81821: PUSH
81822: LD_OWVAR 2
81826: PUSH
81827: EMPTY
81828: LIST
81829: LIST
81830: PUSH
81831: LD_INT 21
81833: PUSH
81834: LD_INT 1
81836: PUSH
81837: EMPTY
81838: LIST
81839: LIST
81840: PUSH
81841: EMPTY
81842: LIST
81843: LIST
81844: PPUSH
81845: CALL_OW 69
81849: ST_TO_ADDR
// if not tmp then
81850: LD_VAR 0 5
81854: NOT
81855: IFFALSE 81859
// exit ;
81857: GO 82013
// for i in tmp do
81859: LD_ADDR_VAR 0 1
81863: PUSH
81864: LD_VAR 0 5
81868: PUSH
81869: FOR_IN
81870: IFFALSE 82011
// begin d := rand ( 0 , 5 ) ;
81872: LD_ADDR_VAR 0 4
81876: PUSH
81877: LD_INT 0
81879: PPUSH
81880: LD_INT 5
81882: PPUSH
81883: CALL_OW 12
81887: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81888: LD_ADDR_VAR 0 2
81892: PUSH
81893: LD_VAR 0 1
81897: PPUSH
81898: CALL_OW 250
81902: PPUSH
81903: LD_VAR 0 4
81907: PPUSH
81908: LD_INT 3
81910: PPUSH
81911: LD_INT 12
81913: PPUSH
81914: CALL_OW 12
81918: PPUSH
81919: CALL_OW 272
81923: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81924: LD_ADDR_VAR 0 3
81928: PUSH
81929: LD_VAR 0 1
81933: PPUSH
81934: CALL_OW 251
81938: PPUSH
81939: LD_VAR 0 4
81943: PPUSH
81944: LD_INT 3
81946: PPUSH
81947: LD_INT 12
81949: PPUSH
81950: CALL_OW 12
81954: PPUSH
81955: CALL_OW 273
81959: ST_TO_ADDR
// if ValidHex ( x , y ) then
81960: LD_VAR 0 2
81964: PPUSH
81965: LD_VAR 0 3
81969: PPUSH
81970: CALL_OW 488
81974: IFFALSE 82009
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81976: LD_VAR 0 1
81980: PPUSH
81981: LD_VAR 0 2
81985: PPUSH
81986: LD_VAR 0 3
81990: PPUSH
81991: LD_INT 3
81993: PPUSH
81994: LD_INT 6
81996: PPUSH
81997: CALL_OW 12
82001: PPUSH
82002: LD_INT 1
82004: PPUSH
82005: CALL_OW 483
// end ;
82009: GO 81869
82011: POP
82012: POP
// end ;
82013: PPOPN 5
82015: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
82016: LD_EXP 64
82020: PUSH
82021: LD_EXP 99
82025: AND
82026: IFFALSE 82120
82028: GO 82030
82030: DISABLE
82031: LD_INT 0
82033: PPUSH
82034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
82035: LD_ADDR_VAR 0 2
82039: PUSH
82040: LD_INT 22
82042: PUSH
82043: LD_OWVAR 2
82047: PUSH
82048: EMPTY
82049: LIST
82050: LIST
82051: PUSH
82052: LD_INT 32
82054: PUSH
82055: LD_INT 1
82057: PUSH
82058: EMPTY
82059: LIST
82060: LIST
82061: PUSH
82062: LD_INT 21
82064: PUSH
82065: LD_INT 2
82067: PUSH
82068: EMPTY
82069: LIST
82070: LIST
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: LIST
82076: PPUSH
82077: CALL_OW 69
82081: ST_TO_ADDR
// if not tmp then
82082: LD_VAR 0 2
82086: NOT
82087: IFFALSE 82091
// exit ;
82089: GO 82120
// for i in tmp do
82091: LD_ADDR_VAR 0 1
82095: PUSH
82096: LD_VAR 0 2
82100: PUSH
82101: FOR_IN
82102: IFFALSE 82118
// SetFuel ( i , 0 ) ;
82104: LD_VAR 0 1
82108: PPUSH
82109: LD_INT 0
82111: PPUSH
82112: CALL_OW 240
82116: GO 82101
82118: POP
82119: POP
// end ;
82120: PPOPN 2
82122: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
82123: LD_EXP 64
82127: PUSH
82128: LD_EXP 100
82132: AND
82133: IFFALSE 82199
82135: GO 82137
82137: DISABLE
82138: LD_INT 0
82140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
82141: LD_ADDR_VAR 0 1
82145: PUSH
82146: LD_INT 22
82148: PUSH
82149: LD_OWVAR 2
82153: PUSH
82154: EMPTY
82155: LIST
82156: LIST
82157: PUSH
82158: LD_INT 30
82160: PUSH
82161: LD_INT 29
82163: PUSH
82164: EMPTY
82165: LIST
82166: LIST
82167: PUSH
82168: EMPTY
82169: LIST
82170: LIST
82171: PPUSH
82172: CALL_OW 69
82176: ST_TO_ADDR
// if not tmp then
82177: LD_VAR 0 1
82181: NOT
82182: IFFALSE 82186
// exit ;
82184: GO 82199
// DestroyUnit ( tmp [ 1 ] ) ;
82186: LD_VAR 0 1
82190: PUSH
82191: LD_INT 1
82193: ARRAY
82194: PPUSH
82195: CALL_OW 65
// end ;
82199: PPOPN 1
82201: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
82202: LD_EXP 64
82206: PUSH
82207: LD_EXP 102
82211: AND
82212: IFFALSE 82341
82214: GO 82216
82216: DISABLE
82217: LD_INT 0
82219: PPUSH
// begin uc_side := 0 ;
82220: LD_ADDR_OWVAR 20
82224: PUSH
82225: LD_INT 0
82227: ST_TO_ADDR
// uc_nation := nation_arabian ;
82228: LD_ADDR_OWVAR 21
82232: PUSH
82233: LD_INT 2
82235: ST_TO_ADDR
// hc_gallery :=  ;
82236: LD_ADDR_OWVAR 33
82240: PUSH
82241: LD_STRING 
82243: ST_TO_ADDR
// hc_name :=  ;
82244: LD_ADDR_OWVAR 26
82248: PUSH
82249: LD_STRING 
82251: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82252: LD_INT 1
82254: PPUSH
82255: LD_INT 11
82257: PPUSH
82258: LD_INT 10
82260: PPUSH
82261: CALL_OW 380
// un := CreateHuman ;
82265: LD_ADDR_VAR 0 1
82269: PUSH
82270: CALL_OW 44
82274: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82275: LD_VAR 0 1
82279: PPUSH
82280: LD_INT 1
82282: PPUSH
82283: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82287: LD_INT 35
82289: PPUSH
82290: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82294: LD_VAR 0 1
82298: PPUSH
82299: LD_INT 22
82301: PUSH
82302: LD_OWVAR 2
82306: PUSH
82307: EMPTY
82308: LIST
82309: LIST
82310: PPUSH
82311: CALL_OW 69
82315: PPUSH
82316: LD_VAR 0 1
82320: PPUSH
82321: CALL_OW 74
82325: PPUSH
82326: CALL_OW 115
// until IsDead ( un ) ;
82330: LD_VAR 0 1
82334: PPUSH
82335: CALL_OW 301
82339: IFFALSE 82287
// end ;
82341: PPOPN 1
82343: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82344: LD_EXP 64
82348: PUSH
82349: LD_EXP 104
82353: AND
82354: IFFALSE 82366
82356: GO 82358
82358: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82359: LD_STRING earthquake(getX(game), 0, 32)
82361: PPUSH
82362: CALL_OW 559
82366: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82367: LD_EXP 64
82371: PUSH
82372: LD_EXP 105
82376: AND
82377: IFFALSE 82468
82379: GO 82381
82381: DISABLE
82382: LD_INT 0
82384: PPUSH
// begin enable ;
82385: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82386: LD_ADDR_VAR 0 1
82390: PUSH
82391: LD_INT 22
82393: PUSH
82394: LD_OWVAR 2
82398: PUSH
82399: EMPTY
82400: LIST
82401: LIST
82402: PUSH
82403: LD_INT 21
82405: PUSH
82406: LD_INT 2
82408: PUSH
82409: EMPTY
82410: LIST
82411: LIST
82412: PUSH
82413: LD_INT 33
82415: PUSH
82416: LD_INT 3
82418: PUSH
82419: EMPTY
82420: LIST
82421: LIST
82422: PUSH
82423: EMPTY
82424: LIST
82425: LIST
82426: LIST
82427: PPUSH
82428: CALL_OW 69
82432: ST_TO_ADDR
// if not tmp then
82433: LD_VAR 0 1
82437: NOT
82438: IFFALSE 82442
// exit ;
82440: GO 82468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82442: LD_VAR 0 1
82446: PUSH
82447: LD_INT 1
82449: PPUSH
82450: LD_VAR 0 1
82454: PPUSH
82455: CALL_OW 12
82459: ARRAY
82460: PPUSH
82461: LD_INT 1
82463: PPUSH
82464: CALL_OW 234
// end ;
82468: PPOPN 1
82470: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82471: LD_EXP 64
82475: PUSH
82476: LD_EXP 106
82480: AND
82481: IFFALSE 82622
82483: GO 82485
82485: DISABLE
82486: LD_INT 0
82488: PPUSH
82489: PPUSH
82490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82491: LD_ADDR_VAR 0 3
82495: PUSH
82496: LD_INT 22
82498: PUSH
82499: LD_OWVAR 2
82503: PUSH
82504: EMPTY
82505: LIST
82506: LIST
82507: PUSH
82508: LD_INT 25
82510: PUSH
82511: LD_INT 1
82513: PUSH
82514: EMPTY
82515: LIST
82516: LIST
82517: PUSH
82518: EMPTY
82519: LIST
82520: LIST
82521: PPUSH
82522: CALL_OW 69
82526: ST_TO_ADDR
// if not tmp then
82527: LD_VAR 0 3
82531: NOT
82532: IFFALSE 82536
// exit ;
82534: GO 82622
// un := tmp [ rand ( 1 , tmp ) ] ;
82536: LD_ADDR_VAR 0 2
82540: PUSH
82541: LD_VAR 0 3
82545: PUSH
82546: LD_INT 1
82548: PPUSH
82549: LD_VAR 0 3
82553: PPUSH
82554: CALL_OW 12
82558: ARRAY
82559: ST_TO_ADDR
// if Crawls ( un ) then
82560: LD_VAR 0 2
82564: PPUSH
82565: CALL_OW 318
82569: IFFALSE 82580
// ComWalk ( un ) ;
82571: LD_VAR 0 2
82575: PPUSH
82576: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82580: LD_VAR 0 2
82584: PPUSH
82585: LD_INT 9
82587: PPUSH
82588: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82592: LD_INT 28
82594: PPUSH
82595: LD_OWVAR 2
82599: PPUSH
82600: LD_INT 2
82602: PPUSH
82603: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82607: LD_INT 29
82609: PPUSH
82610: LD_OWVAR 2
82614: PPUSH
82615: LD_INT 2
82617: PPUSH
82618: CALL_OW 322
// end ;
82622: PPOPN 3
82624: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82625: LD_EXP 64
82629: PUSH
82630: LD_EXP 107
82634: AND
82635: IFFALSE 82746
82637: GO 82639
82639: DISABLE
82640: LD_INT 0
82642: PPUSH
82643: PPUSH
82644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82645: LD_ADDR_VAR 0 3
82649: PUSH
82650: LD_INT 22
82652: PUSH
82653: LD_OWVAR 2
82657: PUSH
82658: EMPTY
82659: LIST
82660: LIST
82661: PUSH
82662: LD_INT 25
82664: PUSH
82665: LD_INT 1
82667: PUSH
82668: EMPTY
82669: LIST
82670: LIST
82671: PUSH
82672: EMPTY
82673: LIST
82674: LIST
82675: PPUSH
82676: CALL_OW 69
82680: ST_TO_ADDR
// if not tmp then
82681: LD_VAR 0 3
82685: NOT
82686: IFFALSE 82690
// exit ;
82688: GO 82746
// un := tmp [ rand ( 1 , tmp ) ] ;
82690: LD_ADDR_VAR 0 2
82694: PUSH
82695: LD_VAR 0 3
82699: PUSH
82700: LD_INT 1
82702: PPUSH
82703: LD_VAR 0 3
82707: PPUSH
82708: CALL_OW 12
82712: ARRAY
82713: ST_TO_ADDR
// if Crawls ( un ) then
82714: LD_VAR 0 2
82718: PPUSH
82719: CALL_OW 318
82723: IFFALSE 82734
// ComWalk ( un ) ;
82725: LD_VAR 0 2
82729: PPUSH
82730: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82734: LD_VAR 0 2
82738: PPUSH
82739: LD_INT 8
82741: PPUSH
82742: CALL_OW 336
// end ;
82746: PPOPN 3
82748: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82749: LD_EXP 64
82753: PUSH
82754: LD_EXP 108
82758: AND
82759: IFFALSE 82903
82761: GO 82763
82763: DISABLE
82764: LD_INT 0
82766: PPUSH
82767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82768: LD_ADDR_VAR 0 2
82772: PUSH
82773: LD_INT 22
82775: PUSH
82776: LD_OWVAR 2
82780: PUSH
82781: EMPTY
82782: LIST
82783: LIST
82784: PUSH
82785: LD_INT 21
82787: PUSH
82788: LD_INT 2
82790: PUSH
82791: EMPTY
82792: LIST
82793: LIST
82794: PUSH
82795: LD_INT 2
82797: PUSH
82798: LD_INT 34
82800: PUSH
82801: LD_INT 12
82803: PUSH
82804: EMPTY
82805: LIST
82806: LIST
82807: PUSH
82808: LD_INT 34
82810: PUSH
82811: LD_INT 51
82813: PUSH
82814: EMPTY
82815: LIST
82816: LIST
82817: PUSH
82818: LD_INT 34
82820: PUSH
82821: LD_INT 32
82823: PUSH
82824: EMPTY
82825: LIST
82826: LIST
82827: PUSH
82828: EMPTY
82829: LIST
82830: LIST
82831: LIST
82832: LIST
82833: PUSH
82834: EMPTY
82835: LIST
82836: LIST
82837: LIST
82838: PPUSH
82839: CALL_OW 69
82843: ST_TO_ADDR
// if not tmp then
82844: LD_VAR 0 2
82848: NOT
82849: IFFALSE 82853
// exit ;
82851: GO 82903
// for i in tmp do
82853: LD_ADDR_VAR 0 1
82857: PUSH
82858: LD_VAR 0 2
82862: PUSH
82863: FOR_IN
82864: IFFALSE 82901
// if GetCargo ( i , mat_artifact ) = 0 then
82866: LD_VAR 0 1
82870: PPUSH
82871: LD_INT 4
82873: PPUSH
82874: CALL_OW 289
82878: PUSH
82879: LD_INT 0
82881: EQUAL
82882: IFFALSE 82899
// SetCargo ( i , mat_siberit , 100 ) ;
82884: LD_VAR 0 1
82888: PPUSH
82889: LD_INT 3
82891: PPUSH
82892: LD_INT 100
82894: PPUSH
82895: CALL_OW 290
82899: GO 82863
82901: POP
82902: POP
// end ;
82903: PPOPN 2
82905: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82906: LD_EXP 64
82910: PUSH
82911: LD_EXP 109
82915: AND
82916: IFFALSE 83099
82918: GO 82920
82920: DISABLE
82921: LD_INT 0
82923: PPUSH
82924: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82925: LD_ADDR_VAR 0 2
82929: PUSH
82930: LD_INT 22
82932: PUSH
82933: LD_OWVAR 2
82937: PUSH
82938: EMPTY
82939: LIST
82940: LIST
82941: PPUSH
82942: CALL_OW 69
82946: ST_TO_ADDR
// if not tmp then
82947: LD_VAR 0 2
82951: NOT
82952: IFFALSE 82956
// exit ;
82954: GO 83099
// for i := 1 to 2 do
82956: LD_ADDR_VAR 0 1
82960: PUSH
82961: DOUBLE
82962: LD_INT 1
82964: DEC
82965: ST_TO_ADDR
82966: LD_INT 2
82968: PUSH
82969: FOR_TO
82970: IFFALSE 83097
// begin uc_side := your_side ;
82972: LD_ADDR_OWVAR 20
82976: PUSH
82977: LD_OWVAR 2
82981: ST_TO_ADDR
// uc_nation := nation_american ;
82982: LD_ADDR_OWVAR 21
82986: PUSH
82987: LD_INT 1
82989: ST_TO_ADDR
// vc_chassis := us_morphling ;
82990: LD_ADDR_OWVAR 37
82994: PUSH
82995: LD_INT 5
82997: ST_TO_ADDR
// vc_engine := engine_siberite ;
82998: LD_ADDR_OWVAR 39
83002: PUSH
83003: LD_INT 3
83005: ST_TO_ADDR
// vc_control := control_computer ;
83006: LD_ADDR_OWVAR 38
83010: PUSH
83011: LD_INT 3
83013: ST_TO_ADDR
// vc_weapon := us_double_laser ;
83014: LD_ADDR_OWVAR 40
83018: PUSH
83019: LD_INT 10
83021: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
83022: LD_VAR 0 2
83026: PUSH
83027: LD_INT 1
83029: ARRAY
83030: PPUSH
83031: CALL_OW 310
83035: NOT
83036: IFFALSE 83083
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
83038: CALL_OW 45
83042: PPUSH
83043: LD_VAR 0 2
83047: PUSH
83048: LD_INT 1
83050: ARRAY
83051: PPUSH
83052: CALL_OW 250
83056: PPUSH
83057: LD_VAR 0 2
83061: PUSH
83062: LD_INT 1
83064: ARRAY
83065: PPUSH
83066: CALL_OW 251
83070: PPUSH
83071: LD_INT 12
83073: PPUSH
83074: LD_INT 1
83076: PPUSH
83077: CALL_OW 50
83081: GO 83095
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
83083: CALL_OW 45
83087: PPUSH
83088: LD_INT 1
83090: PPUSH
83091: CALL_OW 51
// end ;
83095: GO 82969
83097: POP
83098: POP
// end ;
83099: PPOPN 2
83101: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
83102: LD_EXP 64
83106: PUSH
83107: LD_EXP 110
83111: AND
83112: IFFALSE 83334
83114: GO 83116
83116: DISABLE
83117: LD_INT 0
83119: PPUSH
83120: PPUSH
83121: PPUSH
83122: PPUSH
83123: PPUSH
83124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83125: LD_ADDR_VAR 0 6
83129: PUSH
83130: LD_INT 22
83132: PUSH
83133: LD_OWVAR 2
83137: PUSH
83138: EMPTY
83139: LIST
83140: LIST
83141: PUSH
83142: LD_INT 21
83144: PUSH
83145: LD_INT 1
83147: PUSH
83148: EMPTY
83149: LIST
83150: LIST
83151: PUSH
83152: LD_INT 3
83154: PUSH
83155: LD_INT 23
83157: PUSH
83158: LD_INT 0
83160: PUSH
83161: EMPTY
83162: LIST
83163: LIST
83164: PUSH
83165: EMPTY
83166: LIST
83167: LIST
83168: PUSH
83169: EMPTY
83170: LIST
83171: LIST
83172: LIST
83173: PPUSH
83174: CALL_OW 69
83178: ST_TO_ADDR
// if not tmp then
83179: LD_VAR 0 6
83183: NOT
83184: IFFALSE 83188
// exit ;
83186: GO 83334
// s1 := rand ( 1 , 4 ) ;
83188: LD_ADDR_VAR 0 2
83192: PUSH
83193: LD_INT 1
83195: PPUSH
83196: LD_INT 4
83198: PPUSH
83199: CALL_OW 12
83203: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
83204: LD_ADDR_VAR 0 4
83208: PUSH
83209: LD_VAR 0 6
83213: PUSH
83214: LD_INT 1
83216: ARRAY
83217: PPUSH
83218: LD_VAR 0 2
83222: PPUSH
83223: CALL_OW 259
83227: ST_TO_ADDR
// if s1 = 1 then
83228: LD_VAR 0 2
83232: PUSH
83233: LD_INT 1
83235: EQUAL
83236: IFFALSE 83256
// s2 := rand ( 2 , 4 ) else
83238: LD_ADDR_VAR 0 3
83242: PUSH
83243: LD_INT 2
83245: PPUSH
83246: LD_INT 4
83248: PPUSH
83249: CALL_OW 12
83253: ST_TO_ADDR
83254: GO 83264
// s2 := 1 ;
83256: LD_ADDR_VAR 0 3
83260: PUSH
83261: LD_INT 1
83263: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83264: LD_ADDR_VAR 0 5
83268: PUSH
83269: LD_VAR 0 6
83273: PUSH
83274: LD_INT 1
83276: ARRAY
83277: PPUSH
83278: LD_VAR 0 3
83282: PPUSH
83283: CALL_OW 259
83287: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83288: LD_VAR 0 6
83292: PUSH
83293: LD_INT 1
83295: ARRAY
83296: PPUSH
83297: LD_VAR 0 2
83301: PPUSH
83302: LD_VAR 0 5
83306: PPUSH
83307: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83311: LD_VAR 0 6
83315: PUSH
83316: LD_INT 1
83318: ARRAY
83319: PPUSH
83320: LD_VAR 0 3
83324: PPUSH
83325: LD_VAR 0 4
83329: PPUSH
83330: CALL_OW 237
// end ;
83334: PPOPN 6
83336: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83337: LD_EXP 64
83341: PUSH
83342: LD_EXP 111
83346: AND
83347: IFFALSE 83426
83349: GO 83351
83351: DISABLE
83352: LD_INT 0
83354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83355: LD_ADDR_VAR 0 1
83359: PUSH
83360: LD_INT 22
83362: PUSH
83363: LD_OWVAR 2
83367: PUSH
83368: EMPTY
83369: LIST
83370: LIST
83371: PUSH
83372: LD_INT 30
83374: PUSH
83375: LD_INT 3
83377: PUSH
83378: EMPTY
83379: LIST
83380: LIST
83381: PUSH
83382: EMPTY
83383: LIST
83384: LIST
83385: PPUSH
83386: CALL_OW 69
83390: ST_TO_ADDR
// if not tmp then
83391: LD_VAR 0 1
83395: NOT
83396: IFFALSE 83400
// exit ;
83398: GO 83426
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83400: LD_VAR 0 1
83404: PUSH
83405: LD_INT 1
83407: PPUSH
83408: LD_VAR 0 1
83412: PPUSH
83413: CALL_OW 12
83417: ARRAY
83418: PPUSH
83419: LD_INT 1
83421: PPUSH
83422: CALL_OW 234
// end ;
83426: PPOPN 1
83428: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83429: LD_EXP 64
83433: PUSH
83434: LD_EXP 112
83438: AND
83439: IFFALSE 83551
83441: GO 83443
83443: DISABLE
83444: LD_INT 0
83446: PPUSH
83447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83448: LD_ADDR_VAR 0 2
83452: PUSH
83453: LD_INT 22
83455: PUSH
83456: LD_OWVAR 2
83460: PUSH
83461: EMPTY
83462: LIST
83463: LIST
83464: PUSH
83465: LD_INT 2
83467: PUSH
83468: LD_INT 30
83470: PUSH
83471: LD_INT 27
83473: PUSH
83474: EMPTY
83475: LIST
83476: LIST
83477: PUSH
83478: LD_INT 30
83480: PUSH
83481: LD_INT 26
83483: PUSH
83484: EMPTY
83485: LIST
83486: LIST
83487: PUSH
83488: LD_INT 30
83490: PUSH
83491: LD_INT 28
83493: PUSH
83494: EMPTY
83495: LIST
83496: LIST
83497: PUSH
83498: EMPTY
83499: LIST
83500: LIST
83501: LIST
83502: LIST
83503: PUSH
83504: EMPTY
83505: LIST
83506: LIST
83507: PPUSH
83508: CALL_OW 69
83512: ST_TO_ADDR
// if not tmp then
83513: LD_VAR 0 2
83517: NOT
83518: IFFALSE 83522
// exit ;
83520: GO 83551
// for i in tmp do
83522: LD_ADDR_VAR 0 1
83526: PUSH
83527: LD_VAR 0 2
83531: PUSH
83532: FOR_IN
83533: IFFALSE 83549
// SetLives ( i , 1 ) ;
83535: LD_VAR 0 1
83539: PPUSH
83540: LD_INT 1
83542: PPUSH
83543: CALL_OW 234
83547: GO 83532
83549: POP
83550: POP
// end ;
83551: PPOPN 2
83553: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83554: LD_EXP 64
83558: PUSH
83559: LD_EXP 113
83563: AND
83564: IFFALSE 83851
83566: GO 83568
83568: DISABLE
83569: LD_INT 0
83571: PPUSH
83572: PPUSH
83573: PPUSH
// begin i := rand ( 1 , 7 ) ;
83574: LD_ADDR_VAR 0 1
83578: PUSH
83579: LD_INT 1
83581: PPUSH
83582: LD_INT 7
83584: PPUSH
83585: CALL_OW 12
83589: ST_TO_ADDR
// case i of 1 :
83590: LD_VAR 0 1
83594: PUSH
83595: LD_INT 1
83597: DOUBLE
83598: EQUAL
83599: IFTRUE 83603
83601: GO 83613
83603: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83604: LD_STRING earthquake(getX(game), 0, 32)
83606: PPUSH
83607: CALL_OW 559
83611: GO 83851
83613: LD_INT 2
83615: DOUBLE
83616: EQUAL
83617: IFTRUE 83621
83619: GO 83635
83621: POP
// begin ToLua ( displayStucuk(); ) ;
83622: LD_STRING displayStucuk();
83624: PPUSH
83625: CALL_OW 559
// ResetFog ;
83629: CALL_OW 335
// end ; 3 :
83633: GO 83851
83635: LD_INT 3
83637: DOUBLE
83638: EQUAL
83639: IFTRUE 83643
83641: GO 83747
83643: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83644: LD_ADDR_VAR 0 2
83648: PUSH
83649: LD_INT 22
83651: PUSH
83652: LD_OWVAR 2
83656: PUSH
83657: EMPTY
83658: LIST
83659: LIST
83660: PUSH
83661: LD_INT 25
83663: PUSH
83664: LD_INT 1
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PUSH
83671: EMPTY
83672: LIST
83673: LIST
83674: PPUSH
83675: CALL_OW 69
83679: ST_TO_ADDR
// if not tmp then
83680: LD_VAR 0 2
83684: NOT
83685: IFFALSE 83689
// exit ;
83687: GO 83851
// un := tmp [ rand ( 1 , tmp ) ] ;
83689: LD_ADDR_VAR 0 3
83693: PUSH
83694: LD_VAR 0 2
83698: PUSH
83699: LD_INT 1
83701: PPUSH
83702: LD_VAR 0 2
83706: PPUSH
83707: CALL_OW 12
83711: ARRAY
83712: ST_TO_ADDR
// if Crawls ( un ) then
83713: LD_VAR 0 3
83717: PPUSH
83718: CALL_OW 318
83722: IFFALSE 83733
// ComWalk ( un ) ;
83724: LD_VAR 0 3
83728: PPUSH
83729: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83733: LD_VAR 0 3
83737: PPUSH
83738: LD_INT 8
83740: PPUSH
83741: CALL_OW 336
// end ; 4 :
83745: GO 83851
83747: LD_INT 4
83749: DOUBLE
83750: EQUAL
83751: IFTRUE 83755
83753: GO 83829
83755: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83756: LD_ADDR_VAR 0 2
83760: PUSH
83761: LD_INT 22
83763: PUSH
83764: LD_OWVAR 2
83768: PUSH
83769: EMPTY
83770: LIST
83771: LIST
83772: PUSH
83773: LD_INT 30
83775: PUSH
83776: LD_INT 29
83778: PUSH
83779: EMPTY
83780: LIST
83781: LIST
83782: PUSH
83783: EMPTY
83784: LIST
83785: LIST
83786: PPUSH
83787: CALL_OW 69
83791: ST_TO_ADDR
// if not tmp then
83792: LD_VAR 0 2
83796: NOT
83797: IFFALSE 83801
// exit ;
83799: GO 83851
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83801: LD_VAR 0 2
83805: PUSH
83806: LD_INT 1
83808: ARRAY
83809: PPUSH
83810: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83814: LD_VAR 0 2
83818: PUSH
83819: LD_INT 1
83821: ARRAY
83822: PPUSH
83823: CALL_OW 65
// end ; 5 .. 7 :
83827: GO 83851
83829: LD_INT 5
83831: DOUBLE
83832: GREATEREQUAL
83833: IFFALSE 83841
83835: LD_INT 7
83837: DOUBLE
83838: LESSEQUAL
83839: IFTRUE 83843
83841: GO 83850
83843: POP
// StreamSibBomb ; end ;
83844: CALL 80088 0 0
83848: GO 83851
83850: POP
// end ;
83851: PPOPN 3
83853: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83854: LD_EXP 64
83858: PUSH
83859: LD_EXP 114
83863: AND
83864: IFFALSE 84020
83866: GO 83868
83868: DISABLE
83869: LD_INT 0
83871: PPUSH
83872: PPUSH
83873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83874: LD_ADDR_VAR 0 2
83878: PUSH
83879: LD_INT 81
83881: PUSH
83882: LD_OWVAR 2
83886: PUSH
83887: EMPTY
83888: LIST
83889: LIST
83890: PUSH
83891: LD_INT 2
83893: PUSH
83894: LD_INT 21
83896: PUSH
83897: LD_INT 1
83899: PUSH
83900: EMPTY
83901: LIST
83902: LIST
83903: PUSH
83904: LD_INT 21
83906: PUSH
83907: LD_INT 2
83909: PUSH
83910: EMPTY
83911: LIST
83912: LIST
83913: PUSH
83914: EMPTY
83915: LIST
83916: LIST
83917: LIST
83918: PUSH
83919: EMPTY
83920: LIST
83921: LIST
83922: PPUSH
83923: CALL_OW 69
83927: ST_TO_ADDR
// if not tmp then
83928: LD_VAR 0 2
83932: NOT
83933: IFFALSE 83937
// exit ;
83935: GO 84020
// p := 0 ;
83937: LD_ADDR_VAR 0 3
83941: PUSH
83942: LD_INT 0
83944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83945: LD_INT 35
83947: PPUSH
83948: CALL_OW 67
// p := p + 1 ;
83952: LD_ADDR_VAR 0 3
83956: PUSH
83957: LD_VAR 0 3
83961: PUSH
83962: LD_INT 1
83964: PLUS
83965: ST_TO_ADDR
// for i in tmp do
83966: LD_ADDR_VAR 0 1
83970: PUSH
83971: LD_VAR 0 2
83975: PUSH
83976: FOR_IN
83977: IFFALSE 84008
// if GetLives ( i ) < 1000 then
83979: LD_VAR 0 1
83983: PPUSH
83984: CALL_OW 256
83988: PUSH
83989: LD_INT 1000
83991: LESS
83992: IFFALSE 84006
// SetLives ( i , 1000 ) ;
83994: LD_VAR 0 1
83998: PPUSH
83999: LD_INT 1000
84001: PPUSH
84002: CALL_OW 234
84006: GO 83976
84008: POP
84009: POP
// until p > 20 ;
84010: LD_VAR 0 3
84014: PUSH
84015: LD_INT 20
84017: GREATER
84018: IFFALSE 83945
// end ;
84020: PPOPN 3
84022: END
// every 0 0$1 trigger StreamModeActive and sTime do
84023: LD_EXP 64
84027: PUSH
84028: LD_EXP 115
84032: AND
84033: IFFALSE 84068
84035: GO 84037
84037: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
84038: LD_INT 28
84040: PPUSH
84041: LD_OWVAR 2
84045: PPUSH
84046: LD_INT 2
84048: PPUSH
84049: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
84053: LD_INT 30
84055: PPUSH
84056: LD_OWVAR 2
84060: PPUSH
84061: LD_INT 2
84063: PPUSH
84064: CALL_OW 322
// end ;
84068: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
84069: LD_EXP 64
84073: PUSH
84074: LD_EXP 116
84078: AND
84079: IFFALSE 84200
84081: GO 84083
84083: DISABLE
84084: LD_INT 0
84086: PPUSH
84087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84088: LD_ADDR_VAR 0 2
84092: PUSH
84093: LD_INT 22
84095: PUSH
84096: LD_OWVAR 2
84100: PUSH
84101: EMPTY
84102: LIST
84103: LIST
84104: PUSH
84105: LD_INT 21
84107: PUSH
84108: LD_INT 1
84110: PUSH
84111: EMPTY
84112: LIST
84113: LIST
84114: PUSH
84115: LD_INT 3
84117: PUSH
84118: LD_INT 23
84120: PUSH
84121: LD_INT 0
84123: PUSH
84124: EMPTY
84125: LIST
84126: LIST
84127: PUSH
84128: EMPTY
84129: LIST
84130: LIST
84131: PUSH
84132: EMPTY
84133: LIST
84134: LIST
84135: LIST
84136: PPUSH
84137: CALL_OW 69
84141: ST_TO_ADDR
// if not tmp then
84142: LD_VAR 0 2
84146: NOT
84147: IFFALSE 84151
// exit ;
84149: GO 84200
// for i in tmp do
84151: LD_ADDR_VAR 0 1
84155: PUSH
84156: LD_VAR 0 2
84160: PUSH
84161: FOR_IN
84162: IFFALSE 84198
// begin if Crawls ( i ) then
84164: LD_VAR 0 1
84168: PPUSH
84169: CALL_OW 318
84173: IFFALSE 84184
// ComWalk ( i ) ;
84175: LD_VAR 0 1
84179: PPUSH
84180: CALL_OW 138
// SetClass ( i , 2 ) ;
84184: LD_VAR 0 1
84188: PPUSH
84189: LD_INT 2
84191: PPUSH
84192: CALL_OW 336
// end ;
84196: GO 84161
84198: POP
84199: POP
// end ;
84200: PPOPN 2
84202: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
84203: LD_EXP 64
84207: PUSH
84208: LD_EXP 117
84212: AND
84213: IFFALSE 84501
84215: GO 84217
84217: DISABLE
84218: LD_INT 0
84220: PPUSH
84221: PPUSH
84222: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84223: LD_OWVAR 2
84227: PPUSH
84228: LD_INT 9
84230: PPUSH
84231: LD_INT 1
84233: PPUSH
84234: LD_INT 1
84236: PPUSH
84237: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84241: LD_INT 9
84243: PPUSH
84244: LD_OWVAR 2
84248: PPUSH
84249: CALL_OW 343
// uc_side := 9 ;
84253: LD_ADDR_OWVAR 20
84257: PUSH
84258: LD_INT 9
84260: ST_TO_ADDR
// uc_nation := 2 ;
84261: LD_ADDR_OWVAR 21
84265: PUSH
84266: LD_INT 2
84268: ST_TO_ADDR
// hc_name := Dark Warrior ;
84269: LD_ADDR_OWVAR 26
84273: PUSH
84274: LD_STRING Dark Warrior
84276: ST_TO_ADDR
// hc_gallery :=  ;
84277: LD_ADDR_OWVAR 33
84281: PUSH
84282: LD_STRING 
84284: ST_TO_ADDR
// hc_noskilllimit := true ;
84285: LD_ADDR_OWVAR 76
84289: PUSH
84290: LD_INT 1
84292: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84293: LD_ADDR_OWVAR 31
84297: PUSH
84298: LD_INT 30
84300: PUSH
84301: LD_INT 30
84303: PUSH
84304: LD_INT 30
84306: PUSH
84307: LD_INT 30
84309: PUSH
84310: EMPTY
84311: LIST
84312: LIST
84313: LIST
84314: LIST
84315: ST_TO_ADDR
// un := CreateHuman ;
84316: LD_ADDR_VAR 0 3
84320: PUSH
84321: CALL_OW 44
84325: ST_TO_ADDR
// hc_noskilllimit := false ;
84326: LD_ADDR_OWVAR 76
84330: PUSH
84331: LD_INT 0
84333: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84334: LD_VAR 0 3
84338: PPUSH
84339: LD_INT 1
84341: PPUSH
84342: CALL_OW 51
// ToLua ( playRanger() ) ;
84346: LD_STRING playRanger()
84348: PPUSH
84349: CALL_OW 559
// p := 0 ;
84353: LD_ADDR_VAR 0 2
84357: PUSH
84358: LD_INT 0
84360: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84361: LD_INT 35
84363: PPUSH
84364: CALL_OW 67
// p := p + 1 ;
84368: LD_ADDR_VAR 0 2
84372: PUSH
84373: LD_VAR 0 2
84377: PUSH
84378: LD_INT 1
84380: PLUS
84381: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84382: LD_VAR 0 3
84386: PPUSH
84387: CALL_OW 256
84391: PUSH
84392: LD_INT 1000
84394: LESS
84395: IFFALSE 84409
// SetLives ( un , 1000 ) ;
84397: LD_VAR 0 3
84401: PPUSH
84402: LD_INT 1000
84404: PPUSH
84405: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84409: LD_VAR 0 3
84413: PPUSH
84414: LD_INT 81
84416: PUSH
84417: LD_OWVAR 2
84421: PUSH
84422: EMPTY
84423: LIST
84424: LIST
84425: PUSH
84426: LD_INT 91
84428: PUSH
84429: LD_VAR 0 3
84433: PUSH
84434: LD_INT 30
84436: PUSH
84437: EMPTY
84438: LIST
84439: LIST
84440: LIST
84441: PUSH
84442: EMPTY
84443: LIST
84444: LIST
84445: PPUSH
84446: CALL_OW 69
84450: PPUSH
84451: LD_VAR 0 3
84455: PPUSH
84456: CALL_OW 74
84460: PPUSH
84461: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84465: LD_VAR 0 2
84469: PUSH
84470: LD_INT 80
84472: GREATER
84473: PUSH
84474: LD_VAR 0 3
84478: PPUSH
84479: CALL_OW 301
84483: OR
84484: IFFALSE 84361
// if un then
84486: LD_VAR 0 3
84490: IFFALSE 84501
// RemoveUnit ( un ) ;
84492: LD_VAR 0 3
84496: PPUSH
84497: CALL_OW 64
// end ;
84501: PPOPN 3
84503: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84504: LD_EXP 118
84508: IFFALSE 84624
84510: GO 84512
84512: DISABLE
84513: LD_INT 0
84515: PPUSH
84516: PPUSH
84517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84518: LD_ADDR_VAR 0 2
84522: PUSH
84523: LD_INT 81
84525: PUSH
84526: LD_OWVAR 2
84530: PUSH
84531: EMPTY
84532: LIST
84533: LIST
84534: PUSH
84535: LD_INT 21
84537: PUSH
84538: LD_INT 1
84540: PUSH
84541: EMPTY
84542: LIST
84543: LIST
84544: PUSH
84545: EMPTY
84546: LIST
84547: LIST
84548: PPUSH
84549: CALL_OW 69
84553: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84554: LD_STRING playComputer()
84556: PPUSH
84557: CALL_OW 559
// if not tmp then
84561: LD_VAR 0 2
84565: NOT
84566: IFFALSE 84570
// exit ;
84568: GO 84624
// for i in tmp do
84570: LD_ADDR_VAR 0 1
84574: PUSH
84575: LD_VAR 0 2
84579: PUSH
84580: FOR_IN
84581: IFFALSE 84622
// for j := 1 to 4 do
84583: LD_ADDR_VAR 0 3
84587: PUSH
84588: DOUBLE
84589: LD_INT 1
84591: DEC
84592: ST_TO_ADDR
84593: LD_INT 4
84595: PUSH
84596: FOR_TO
84597: IFFALSE 84618
// SetSkill ( i , j , 10 ) ;
84599: LD_VAR 0 1
84603: PPUSH
84604: LD_VAR 0 3
84608: PPUSH
84609: LD_INT 10
84611: PPUSH
84612: CALL_OW 237
84616: GO 84596
84618: POP
84619: POP
84620: GO 84580
84622: POP
84623: POP
// end ;
84624: PPOPN 3
84626: END
// every 0 0$1 trigger s30 do var i , tmp ;
84627: LD_EXP 119
84631: IFFALSE 84700
84633: GO 84635
84635: DISABLE
84636: LD_INT 0
84638: PPUSH
84639: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84640: LD_ADDR_VAR 0 2
84644: PUSH
84645: LD_INT 22
84647: PUSH
84648: LD_OWVAR 2
84652: PUSH
84653: EMPTY
84654: LIST
84655: LIST
84656: PPUSH
84657: CALL_OW 69
84661: ST_TO_ADDR
// if not tmp then
84662: LD_VAR 0 2
84666: NOT
84667: IFFALSE 84671
// exit ;
84669: GO 84700
// for i in tmp do
84671: LD_ADDR_VAR 0 1
84675: PUSH
84676: LD_VAR 0 2
84680: PUSH
84681: FOR_IN
84682: IFFALSE 84698
// SetLives ( i , 300 ) ;
84684: LD_VAR 0 1
84688: PPUSH
84689: LD_INT 300
84691: PPUSH
84692: CALL_OW 234
84696: GO 84681
84698: POP
84699: POP
// end ;
84700: PPOPN 2
84702: END
// every 0 0$1 trigger s60 do var i , tmp ;
84703: LD_EXP 120
84707: IFFALSE 84776
84709: GO 84711
84711: DISABLE
84712: LD_INT 0
84714: PPUSH
84715: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84716: LD_ADDR_VAR 0 2
84720: PUSH
84721: LD_INT 22
84723: PUSH
84724: LD_OWVAR 2
84728: PUSH
84729: EMPTY
84730: LIST
84731: LIST
84732: PPUSH
84733: CALL_OW 69
84737: ST_TO_ADDR
// if not tmp then
84738: LD_VAR 0 2
84742: NOT
84743: IFFALSE 84747
// exit ;
84745: GO 84776
// for i in tmp do
84747: LD_ADDR_VAR 0 1
84751: PUSH
84752: LD_VAR 0 2
84756: PUSH
84757: FOR_IN
84758: IFFALSE 84774
// SetLives ( i , 600 ) ;
84760: LD_VAR 0 1
84764: PPUSH
84765: LD_INT 600
84767: PPUSH
84768: CALL_OW 234
84772: GO 84757
84774: POP
84775: POP
// end ;
84776: PPOPN 2
84778: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84779: LD_INT 0
84781: PPUSH
// case cmd of 301 :
84782: LD_VAR 0 1
84786: PUSH
84787: LD_INT 301
84789: DOUBLE
84790: EQUAL
84791: IFTRUE 84795
84793: GO 84827
84795: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84796: LD_VAR 0 6
84800: PPUSH
84801: LD_VAR 0 7
84805: PPUSH
84806: LD_VAR 0 8
84810: PPUSH
84811: LD_VAR 0 4
84815: PPUSH
84816: LD_VAR 0 5
84820: PPUSH
84821: CALL 86036 0 5
84825: GO 84948
84827: LD_INT 302
84829: DOUBLE
84830: EQUAL
84831: IFTRUE 84835
84833: GO 84872
84835: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84836: LD_VAR 0 6
84840: PPUSH
84841: LD_VAR 0 7
84845: PPUSH
84846: LD_VAR 0 8
84850: PPUSH
84851: LD_VAR 0 9
84855: PPUSH
84856: LD_VAR 0 4
84860: PPUSH
84861: LD_VAR 0 5
84865: PPUSH
84866: CALL 86127 0 6
84870: GO 84948
84872: LD_INT 303
84874: DOUBLE
84875: EQUAL
84876: IFTRUE 84880
84878: GO 84917
84880: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84881: LD_VAR 0 6
84885: PPUSH
84886: LD_VAR 0 7
84890: PPUSH
84891: LD_VAR 0 8
84895: PPUSH
84896: LD_VAR 0 9
84900: PPUSH
84901: LD_VAR 0 4
84905: PPUSH
84906: LD_VAR 0 5
84910: PPUSH
84911: CALL 84953 0 6
84915: GO 84948
84917: LD_INT 304
84919: DOUBLE
84920: EQUAL
84921: IFTRUE 84925
84923: GO 84947
84925: POP
// hHackTeleport ( unit , x , y ) ; end ;
84926: LD_VAR 0 2
84930: PPUSH
84931: LD_VAR 0 4
84935: PPUSH
84936: LD_VAR 0 5
84940: PPUSH
84941: CALL 86720 0 3
84945: GO 84948
84947: POP
// end ;
84948: LD_VAR 0 12
84952: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84953: LD_INT 0
84955: PPUSH
84956: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84957: LD_VAR 0 1
84961: PUSH
84962: LD_INT 1
84964: LESS
84965: PUSH
84966: LD_VAR 0 1
84970: PUSH
84971: LD_INT 3
84973: GREATER
84974: OR
84975: PUSH
84976: LD_VAR 0 5
84980: PPUSH
84981: LD_VAR 0 6
84985: PPUSH
84986: CALL_OW 428
84990: OR
84991: IFFALSE 84995
// exit ;
84993: GO 85723
// uc_side := your_side ;
84995: LD_ADDR_OWVAR 20
84999: PUSH
85000: LD_OWVAR 2
85004: ST_TO_ADDR
// uc_nation := nation ;
85005: LD_ADDR_OWVAR 21
85009: PUSH
85010: LD_VAR 0 1
85014: ST_TO_ADDR
// bc_level = 1 ;
85015: LD_ADDR_OWVAR 43
85019: PUSH
85020: LD_INT 1
85022: ST_TO_ADDR
// case btype of 1 :
85023: LD_VAR 0 2
85027: PUSH
85028: LD_INT 1
85030: DOUBLE
85031: EQUAL
85032: IFTRUE 85036
85034: GO 85047
85036: POP
// bc_type := b_depot ; 2 :
85037: LD_ADDR_OWVAR 42
85041: PUSH
85042: LD_INT 0
85044: ST_TO_ADDR
85045: GO 85667
85047: LD_INT 2
85049: DOUBLE
85050: EQUAL
85051: IFTRUE 85055
85053: GO 85066
85055: POP
// bc_type := b_warehouse ; 3 :
85056: LD_ADDR_OWVAR 42
85060: PUSH
85061: LD_INT 1
85063: ST_TO_ADDR
85064: GO 85667
85066: LD_INT 3
85068: DOUBLE
85069: EQUAL
85070: IFTRUE 85074
85072: GO 85085
85074: POP
// bc_type := b_lab ; 4 .. 9 :
85075: LD_ADDR_OWVAR 42
85079: PUSH
85080: LD_INT 6
85082: ST_TO_ADDR
85083: GO 85667
85085: LD_INT 4
85087: DOUBLE
85088: GREATEREQUAL
85089: IFFALSE 85097
85091: LD_INT 9
85093: DOUBLE
85094: LESSEQUAL
85095: IFTRUE 85099
85097: GO 85159
85099: POP
// begin bc_type := b_lab_half ;
85100: LD_ADDR_OWVAR 42
85104: PUSH
85105: LD_INT 7
85107: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
85108: LD_ADDR_OWVAR 44
85112: PUSH
85113: LD_INT 10
85115: PUSH
85116: LD_INT 11
85118: PUSH
85119: LD_INT 12
85121: PUSH
85122: LD_INT 15
85124: PUSH
85125: LD_INT 14
85127: PUSH
85128: LD_INT 13
85130: PUSH
85131: EMPTY
85132: LIST
85133: LIST
85134: LIST
85135: LIST
85136: LIST
85137: LIST
85138: PUSH
85139: LD_VAR 0 2
85143: PUSH
85144: LD_INT 3
85146: MINUS
85147: ARRAY
85148: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
85149: LD_ADDR_OWVAR 45
85153: PUSH
85154: LD_INT 9
85156: ST_TO_ADDR
// end ; 10 .. 13 :
85157: GO 85667
85159: LD_INT 10
85161: DOUBLE
85162: GREATEREQUAL
85163: IFFALSE 85171
85165: LD_INT 13
85167: DOUBLE
85168: LESSEQUAL
85169: IFTRUE 85173
85171: GO 85250
85173: POP
// begin bc_type := b_lab_full ;
85174: LD_ADDR_OWVAR 42
85178: PUSH
85179: LD_INT 8
85181: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
85182: LD_ADDR_OWVAR 44
85186: PUSH
85187: LD_INT 10
85189: PUSH
85190: LD_INT 12
85192: PUSH
85193: LD_INT 14
85195: PUSH
85196: LD_INT 13
85198: PUSH
85199: EMPTY
85200: LIST
85201: LIST
85202: LIST
85203: LIST
85204: PUSH
85205: LD_VAR 0 2
85209: PUSH
85210: LD_INT 9
85212: MINUS
85213: ARRAY
85214: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
85215: LD_ADDR_OWVAR 45
85219: PUSH
85220: LD_INT 11
85222: PUSH
85223: LD_INT 15
85225: PUSH
85226: LD_INT 12
85228: PUSH
85229: LD_INT 15
85231: PUSH
85232: EMPTY
85233: LIST
85234: LIST
85235: LIST
85236: LIST
85237: PUSH
85238: LD_VAR 0 2
85242: PUSH
85243: LD_INT 9
85245: MINUS
85246: ARRAY
85247: ST_TO_ADDR
// end ; 14 :
85248: GO 85667
85250: LD_INT 14
85252: DOUBLE
85253: EQUAL
85254: IFTRUE 85258
85256: GO 85269
85258: POP
// bc_type := b_workshop ; 15 :
85259: LD_ADDR_OWVAR 42
85263: PUSH
85264: LD_INT 2
85266: ST_TO_ADDR
85267: GO 85667
85269: LD_INT 15
85271: DOUBLE
85272: EQUAL
85273: IFTRUE 85277
85275: GO 85288
85277: POP
// bc_type := b_factory ; 16 :
85278: LD_ADDR_OWVAR 42
85282: PUSH
85283: LD_INT 3
85285: ST_TO_ADDR
85286: GO 85667
85288: LD_INT 16
85290: DOUBLE
85291: EQUAL
85292: IFTRUE 85296
85294: GO 85307
85296: POP
// bc_type := b_ext_gun ; 17 :
85297: LD_ADDR_OWVAR 42
85301: PUSH
85302: LD_INT 17
85304: ST_TO_ADDR
85305: GO 85667
85307: LD_INT 17
85309: DOUBLE
85310: EQUAL
85311: IFTRUE 85315
85313: GO 85343
85315: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85316: LD_ADDR_OWVAR 42
85320: PUSH
85321: LD_INT 19
85323: PUSH
85324: LD_INT 23
85326: PUSH
85327: LD_INT 19
85329: PUSH
85330: EMPTY
85331: LIST
85332: LIST
85333: LIST
85334: PUSH
85335: LD_VAR 0 1
85339: ARRAY
85340: ST_TO_ADDR
85341: GO 85667
85343: LD_INT 18
85345: DOUBLE
85346: EQUAL
85347: IFTRUE 85351
85349: GO 85362
85351: POP
// bc_type := b_ext_radar ; 19 :
85352: LD_ADDR_OWVAR 42
85356: PUSH
85357: LD_INT 20
85359: ST_TO_ADDR
85360: GO 85667
85362: LD_INT 19
85364: DOUBLE
85365: EQUAL
85366: IFTRUE 85370
85368: GO 85381
85370: POP
// bc_type := b_ext_radio ; 20 :
85371: LD_ADDR_OWVAR 42
85375: PUSH
85376: LD_INT 22
85378: ST_TO_ADDR
85379: GO 85667
85381: LD_INT 20
85383: DOUBLE
85384: EQUAL
85385: IFTRUE 85389
85387: GO 85400
85389: POP
// bc_type := b_ext_siberium ; 21 :
85390: LD_ADDR_OWVAR 42
85394: PUSH
85395: LD_INT 21
85397: ST_TO_ADDR
85398: GO 85667
85400: LD_INT 21
85402: DOUBLE
85403: EQUAL
85404: IFTRUE 85408
85406: GO 85419
85408: POP
// bc_type := b_ext_computer ; 22 :
85409: LD_ADDR_OWVAR 42
85413: PUSH
85414: LD_INT 24
85416: ST_TO_ADDR
85417: GO 85667
85419: LD_INT 22
85421: DOUBLE
85422: EQUAL
85423: IFTRUE 85427
85425: GO 85438
85427: POP
// bc_type := b_ext_track ; 23 :
85428: LD_ADDR_OWVAR 42
85432: PUSH
85433: LD_INT 16
85435: ST_TO_ADDR
85436: GO 85667
85438: LD_INT 23
85440: DOUBLE
85441: EQUAL
85442: IFTRUE 85446
85444: GO 85457
85446: POP
// bc_type := b_ext_laser ; 24 :
85447: LD_ADDR_OWVAR 42
85451: PUSH
85452: LD_INT 25
85454: ST_TO_ADDR
85455: GO 85667
85457: LD_INT 24
85459: DOUBLE
85460: EQUAL
85461: IFTRUE 85465
85463: GO 85476
85465: POP
// bc_type := b_control_tower ; 25 :
85466: LD_ADDR_OWVAR 42
85470: PUSH
85471: LD_INT 36
85473: ST_TO_ADDR
85474: GO 85667
85476: LD_INT 25
85478: DOUBLE
85479: EQUAL
85480: IFTRUE 85484
85482: GO 85495
85484: POP
// bc_type := b_breastwork ; 26 :
85485: LD_ADDR_OWVAR 42
85489: PUSH
85490: LD_INT 31
85492: ST_TO_ADDR
85493: GO 85667
85495: LD_INT 26
85497: DOUBLE
85498: EQUAL
85499: IFTRUE 85503
85501: GO 85514
85503: POP
// bc_type := b_bunker ; 27 :
85504: LD_ADDR_OWVAR 42
85508: PUSH
85509: LD_INT 32
85511: ST_TO_ADDR
85512: GO 85667
85514: LD_INT 27
85516: DOUBLE
85517: EQUAL
85518: IFTRUE 85522
85520: GO 85533
85522: POP
// bc_type := b_turret ; 28 :
85523: LD_ADDR_OWVAR 42
85527: PUSH
85528: LD_INT 33
85530: ST_TO_ADDR
85531: GO 85667
85533: LD_INT 28
85535: DOUBLE
85536: EQUAL
85537: IFTRUE 85541
85539: GO 85552
85541: POP
// bc_type := b_armoury ; 29 :
85542: LD_ADDR_OWVAR 42
85546: PUSH
85547: LD_INT 4
85549: ST_TO_ADDR
85550: GO 85667
85552: LD_INT 29
85554: DOUBLE
85555: EQUAL
85556: IFTRUE 85560
85558: GO 85571
85560: POP
// bc_type := b_barracks ; 30 :
85561: LD_ADDR_OWVAR 42
85565: PUSH
85566: LD_INT 5
85568: ST_TO_ADDR
85569: GO 85667
85571: LD_INT 30
85573: DOUBLE
85574: EQUAL
85575: IFTRUE 85579
85577: GO 85590
85579: POP
// bc_type := b_solar_power ; 31 :
85580: LD_ADDR_OWVAR 42
85584: PUSH
85585: LD_INT 27
85587: ST_TO_ADDR
85588: GO 85667
85590: LD_INT 31
85592: DOUBLE
85593: EQUAL
85594: IFTRUE 85598
85596: GO 85609
85598: POP
// bc_type := b_oil_power ; 32 :
85599: LD_ADDR_OWVAR 42
85603: PUSH
85604: LD_INT 26
85606: ST_TO_ADDR
85607: GO 85667
85609: LD_INT 32
85611: DOUBLE
85612: EQUAL
85613: IFTRUE 85617
85615: GO 85628
85617: POP
// bc_type := b_siberite_power ; 33 :
85618: LD_ADDR_OWVAR 42
85622: PUSH
85623: LD_INT 28
85625: ST_TO_ADDR
85626: GO 85667
85628: LD_INT 33
85630: DOUBLE
85631: EQUAL
85632: IFTRUE 85636
85634: GO 85647
85636: POP
// bc_type := b_oil_mine ; 34 :
85637: LD_ADDR_OWVAR 42
85641: PUSH
85642: LD_INT 29
85644: ST_TO_ADDR
85645: GO 85667
85647: LD_INT 34
85649: DOUBLE
85650: EQUAL
85651: IFTRUE 85655
85653: GO 85666
85655: POP
// bc_type := b_siberite_mine ; end ;
85656: LD_ADDR_OWVAR 42
85660: PUSH
85661: LD_INT 30
85663: ST_TO_ADDR
85664: GO 85667
85666: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85667: LD_ADDR_VAR 0 8
85671: PUSH
85672: LD_VAR 0 5
85676: PPUSH
85677: LD_VAR 0 6
85681: PPUSH
85682: LD_VAR 0 3
85686: PPUSH
85687: CALL_OW 47
85691: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85692: LD_OWVAR 42
85696: PUSH
85697: LD_INT 32
85699: PUSH
85700: LD_INT 33
85702: PUSH
85703: EMPTY
85704: LIST
85705: LIST
85706: IN
85707: IFFALSE 85723
// PlaceWeaponTurret ( b , weapon ) ;
85709: LD_VAR 0 8
85713: PPUSH
85714: LD_VAR 0 4
85718: PPUSH
85719: CALL_OW 431
// end ;
85723: LD_VAR 0 7
85727: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85728: LD_INT 0
85730: PPUSH
85731: PPUSH
85732: PPUSH
85733: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85734: LD_ADDR_VAR 0 4
85738: PUSH
85739: LD_INT 22
85741: PUSH
85742: LD_OWVAR 2
85746: PUSH
85747: EMPTY
85748: LIST
85749: LIST
85750: PUSH
85751: LD_INT 2
85753: PUSH
85754: LD_INT 30
85756: PUSH
85757: LD_INT 0
85759: PUSH
85760: EMPTY
85761: LIST
85762: LIST
85763: PUSH
85764: LD_INT 30
85766: PUSH
85767: LD_INT 1
85769: PUSH
85770: EMPTY
85771: LIST
85772: LIST
85773: PUSH
85774: EMPTY
85775: LIST
85776: LIST
85777: LIST
85778: PUSH
85779: EMPTY
85780: LIST
85781: LIST
85782: PPUSH
85783: CALL_OW 69
85787: ST_TO_ADDR
// if not tmp then
85788: LD_VAR 0 4
85792: NOT
85793: IFFALSE 85797
// exit ;
85795: GO 85856
// for i in tmp do
85797: LD_ADDR_VAR 0 2
85801: PUSH
85802: LD_VAR 0 4
85806: PUSH
85807: FOR_IN
85808: IFFALSE 85854
// for j = 1 to 3 do
85810: LD_ADDR_VAR 0 3
85814: PUSH
85815: DOUBLE
85816: LD_INT 1
85818: DEC
85819: ST_TO_ADDR
85820: LD_INT 3
85822: PUSH
85823: FOR_TO
85824: IFFALSE 85850
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85826: LD_VAR 0 2
85830: PPUSH
85831: CALL_OW 274
85835: PPUSH
85836: LD_VAR 0 3
85840: PPUSH
85841: LD_INT 99999
85843: PPUSH
85844: CALL_OW 277
85848: GO 85823
85850: POP
85851: POP
85852: GO 85807
85854: POP
85855: POP
// end ;
85856: LD_VAR 0 1
85860: RET
// export function hHackSetLevel10 ; var i , j ; begin
85861: LD_INT 0
85863: PPUSH
85864: PPUSH
85865: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85866: LD_ADDR_VAR 0 2
85870: PUSH
85871: LD_INT 21
85873: PUSH
85874: LD_INT 1
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: PPUSH
85881: CALL_OW 69
85885: PUSH
85886: FOR_IN
85887: IFFALSE 85939
// if IsSelected ( i ) then
85889: LD_VAR 0 2
85893: PPUSH
85894: CALL_OW 306
85898: IFFALSE 85937
// begin for j := 1 to 4 do
85900: LD_ADDR_VAR 0 3
85904: PUSH
85905: DOUBLE
85906: LD_INT 1
85908: DEC
85909: ST_TO_ADDR
85910: LD_INT 4
85912: PUSH
85913: FOR_TO
85914: IFFALSE 85935
// SetSkill ( i , j , 10 ) ;
85916: LD_VAR 0 2
85920: PPUSH
85921: LD_VAR 0 3
85925: PPUSH
85926: LD_INT 10
85928: PPUSH
85929: CALL_OW 237
85933: GO 85913
85935: POP
85936: POP
// end ;
85937: GO 85886
85939: POP
85940: POP
// end ;
85941: LD_VAR 0 1
85945: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85946: LD_INT 0
85948: PPUSH
85949: PPUSH
85950: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85951: LD_ADDR_VAR 0 2
85955: PUSH
85956: LD_INT 22
85958: PUSH
85959: LD_OWVAR 2
85963: PUSH
85964: EMPTY
85965: LIST
85966: LIST
85967: PUSH
85968: LD_INT 21
85970: PUSH
85971: LD_INT 1
85973: PUSH
85974: EMPTY
85975: LIST
85976: LIST
85977: PUSH
85978: EMPTY
85979: LIST
85980: LIST
85981: PPUSH
85982: CALL_OW 69
85986: PUSH
85987: FOR_IN
85988: IFFALSE 86029
// begin for j := 1 to 4 do
85990: LD_ADDR_VAR 0 3
85994: PUSH
85995: DOUBLE
85996: LD_INT 1
85998: DEC
85999: ST_TO_ADDR
86000: LD_INT 4
86002: PUSH
86003: FOR_TO
86004: IFFALSE 86025
// SetSkill ( i , j , 10 ) ;
86006: LD_VAR 0 2
86010: PPUSH
86011: LD_VAR 0 3
86015: PPUSH
86016: LD_INT 10
86018: PPUSH
86019: CALL_OW 237
86023: GO 86003
86025: POP
86026: POP
// end ;
86027: GO 85987
86029: POP
86030: POP
// end ;
86031: LD_VAR 0 1
86035: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
86036: LD_INT 0
86038: PPUSH
// uc_side := your_side ;
86039: LD_ADDR_OWVAR 20
86043: PUSH
86044: LD_OWVAR 2
86048: ST_TO_ADDR
// uc_nation := nation ;
86049: LD_ADDR_OWVAR 21
86053: PUSH
86054: LD_VAR 0 1
86058: ST_TO_ADDR
// InitHc ;
86059: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
86063: LD_INT 0
86065: PPUSH
86066: LD_VAR 0 2
86070: PPUSH
86071: LD_VAR 0 3
86075: PPUSH
86076: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
86080: LD_VAR 0 4
86084: PPUSH
86085: LD_VAR 0 5
86089: PPUSH
86090: CALL_OW 428
86094: PUSH
86095: LD_INT 0
86097: EQUAL
86098: IFFALSE 86122
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
86100: CALL_OW 44
86104: PPUSH
86105: LD_VAR 0 4
86109: PPUSH
86110: LD_VAR 0 5
86114: PPUSH
86115: LD_INT 1
86117: PPUSH
86118: CALL_OW 48
// end ;
86122: LD_VAR 0 6
86126: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
86127: LD_INT 0
86129: PPUSH
86130: PPUSH
// uc_side := your_side ;
86131: LD_ADDR_OWVAR 20
86135: PUSH
86136: LD_OWVAR 2
86140: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
86141: LD_VAR 0 1
86145: PUSH
86146: LD_INT 1
86148: PUSH
86149: LD_INT 2
86151: PUSH
86152: LD_INT 3
86154: PUSH
86155: LD_INT 4
86157: PUSH
86158: LD_INT 5
86160: PUSH
86161: EMPTY
86162: LIST
86163: LIST
86164: LIST
86165: LIST
86166: LIST
86167: IN
86168: IFFALSE 86180
// uc_nation := nation_american else
86170: LD_ADDR_OWVAR 21
86174: PUSH
86175: LD_INT 1
86177: ST_TO_ADDR
86178: GO 86223
// if chassis in [ 11 , 12 , 13 , 14 ] then
86180: LD_VAR 0 1
86184: PUSH
86185: LD_INT 11
86187: PUSH
86188: LD_INT 12
86190: PUSH
86191: LD_INT 13
86193: PUSH
86194: LD_INT 14
86196: PUSH
86197: EMPTY
86198: LIST
86199: LIST
86200: LIST
86201: LIST
86202: IN
86203: IFFALSE 86215
// uc_nation := nation_arabian else
86205: LD_ADDR_OWVAR 21
86209: PUSH
86210: LD_INT 2
86212: ST_TO_ADDR
86213: GO 86223
// uc_nation := nation_russian ;
86215: LD_ADDR_OWVAR 21
86219: PUSH
86220: LD_INT 3
86222: ST_TO_ADDR
// vc_chassis := chassis ;
86223: LD_ADDR_OWVAR 37
86227: PUSH
86228: LD_VAR 0 1
86232: ST_TO_ADDR
// vc_engine := engine ;
86233: LD_ADDR_OWVAR 39
86237: PUSH
86238: LD_VAR 0 2
86242: ST_TO_ADDR
// vc_control := control ;
86243: LD_ADDR_OWVAR 38
86247: PUSH
86248: LD_VAR 0 3
86252: ST_TO_ADDR
// vc_weapon := weapon ;
86253: LD_ADDR_OWVAR 40
86257: PUSH
86258: LD_VAR 0 4
86262: ST_TO_ADDR
// un := CreateVehicle ;
86263: LD_ADDR_VAR 0 8
86267: PUSH
86268: CALL_OW 45
86272: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86273: LD_VAR 0 8
86277: PPUSH
86278: LD_INT 0
86280: PPUSH
86281: LD_INT 5
86283: PPUSH
86284: CALL_OW 12
86288: PPUSH
86289: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86293: LD_VAR 0 8
86297: PPUSH
86298: LD_VAR 0 5
86302: PPUSH
86303: LD_VAR 0 6
86307: PPUSH
86308: LD_INT 1
86310: PPUSH
86311: CALL_OW 48
// end ;
86315: LD_VAR 0 7
86319: RET
// export hInvincible ; every 1 do
86320: GO 86322
86322: DISABLE
// hInvincible := [ ] ;
86323: LD_ADDR_EXP 121
86327: PUSH
86328: EMPTY
86329: ST_TO_ADDR
86330: END
// every 10 do var i ;
86331: GO 86333
86333: DISABLE
86334: LD_INT 0
86336: PPUSH
// begin enable ;
86337: ENABLE
// if not hInvincible then
86338: LD_EXP 121
86342: NOT
86343: IFFALSE 86347
// exit ;
86345: GO 86391
// for i in hInvincible do
86347: LD_ADDR_VAR 0 1
86351: PUSH
86352: LD_EXP 121
86356: PUSH
86357: FOR_IN
86358: IFFALSE 86389
// if GetLives ( i ) < 1000 then
86360: LD_VAR 0 1
86364: PPUSH
86365: CALL_OW 256
86369: PUSH
86370: LD_INT 1000
86372: LESS
86373: IFFALSE 86387
// SetLives ( i , 1000 ) ;
86375: LD_VAR 0 1
86379: PPUSH
86380: LD_INT 1000
86382: PPUSH
86383: CALL_OW 234
86387: GO 86357
86389: POP
86390: POP
// end ;
86391: PPOPN 1
86393: END
// export function hHackInvincible ; var i ; begin
86394: LD_INT 0
86396: PPUSH
86397: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86398: LD_ADDR_VAR 0 2
86402: PUSH
86403: LD_INT 2
86405: PUSH
86406: LD_INT 21
86408: PUSH
86409: LD_INT 1
86411: PUSH
86412: EMPTY
86413: LIST
86414: LIST
86415: PUSH
86416: LD_INT 21
86418: PUSH
86419: LD_INT 2
86421: PUSH
86422: EMPTY
86423: LIST
86424: LIST
86425: PUSH
86426: EMPTY
86427: LIST
86428: LIST
86429: LIST
86430: PPUSH
86431: CALL_OW 69
86435: PUSH
86436: FOR_IN
86437: IFFALSE 86498
// if IsSelected ( i ) then
86439: LD_VAR 0 2
86443: PPUSH
86444: CALL_OW 306
86448: IFFALSE 86496
// begin if i in hInvincible then
86450: LD_VAR 0 2
86454: PUSH
86455: LD_EXP 121
86459: IN
86460: IFFALSE 86480
// hInvincible := hInvincible diff i else
86462: LD_ADDR_EXP 121
86466: PUSH
86467: LD_EXP 121
86471: PUSH
86472: LD_VAR 0 2
86476: DIFF
86477: ST_TO_ADDR
86478: GO 86496
// hInvincible := hInvincible union i ;
86480: LD_ADDR_EXP 121
86484: PUSH
86485: LD_EXP 121
86489: PUSH
86490: LD_VAR 0 2
86494: UNION
86495: ST_TO_ADDR
// end ;
86496: GO 86436
86498: POP
86499: POP
// end ;
86500: LD_VAR 0 1
86504: RET
// export function hHackInvisible ; var i , j ; begin
86505: LD_INT 0
86507: PPUSH
86508: PPUSH
86509: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86510: LD_ADDR_VAR 0 2
86514: PUSH
86515: LD_INT 21
86517: PUSH
86518: LD_INT 1
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: PPUSH
86525: CALL_OW 69
86529: PUSH
86530: FOR_IN
86531: IFFALSE 86555
// if IsSelected ( i ) then
86533: LD_VAR 0 2
86537: PPUSH
86538: CALL_OW 306
86542: IFFALSE 86553
// ComForceInvisible ( i ) ;
86544: LD_VAR 0 2
86548: PPUSH
86549: CALL_OW 496
86553: GO 86530
86555: POP
86556: POP
// end ;
86557: LD_VAR 0 1
86561: RET
// export function hHackChangeYourSide ; begin
86562: LD_INT 0
86564: PPUSH
// if your_side = 8 then
86565: LD_OWVAR 2
86569: PUSH
86570: LD_INT 8
86572: EQUAL
86573: IFFALSE 86585
// your_side := 0 else
86575: LD_ADDR_OWVAR 2
86579: PUSH
86580: LD_INT 0
86582: ST_TO_ADDR
86583: GO 86599
// your_side := your_side + 1 ;
86585: LD_ADDR_OWVAR 2
86589: PUSH
86590: LD_OWVAR 2
86594: PUSH
86595: LD_INT 1
86597: PLUS
86598: ST_TO_ADDR
// end ;
86599: LD_VAR 0 1
86603: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86604: LD_INT 0
86606: PPUSH
86607: PPUSH
86608: PPUSH
// for i in all_units do
86609: LD_ADDR_VAR 0 2
86613: PUSH
86614: LD_OWVAR 3
86618: PUSH
86619: FOR_IN
86620: IFFALSE 86698
// if IsSelected ( i ) then
86622: LD_VAR 0 2
86626: PPUSH
86627: CALL_OW 306
86631: IFFALSE 86696
// begin j := GetSide ( i ) ;
86633: LD_ADDR_VAR 0 3
86637: PUSH
86638: LD_VAR 0 2
86642: PPUSH
86643: CALL_OW 255
86647: ST_TO_ADDR
// if j = 8 then
86648: LD_VAR 0 3
86652: PUSH
86653: LD_INT 8
86655: EQUAL
86656: IFFALSE 86668
// j := 0 else
86658: LD_ADDR_VAR 0 3
86662: PUSH
86663: LD_INT 0
86665: ST_TO_ADDR
86666: GO 86682
// j := j + 1 ;
86668: LD_ADDR_VAR 0 3
86672: PUSH
86673: LD_VAR 0 3
86677: PUSH
86678: LD_INT 1
86680: PLUS
86681: ST_TO_ADDR
// SetSide ( i , j ) ;
86682: LD_VAR 0 2
86686: PPUSH
86687: LD_VAR 0 3
86691: PPUSH
86692: CALL_OW 235
// end ;
86696: GO 86619
86698: POP
86699: POP
// end ;
86700: LD_VAR 0 1
86704: RET
// export function hHackFog ; begin
86705: LD_INT 0
86707: PPUSH
// FogOff ( true ) ;
86708: LD_INT 1
86710: PPUSH
86711: CALL_OW 344
// end ;
86715: LD_VAR 0 1
86719: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86720: LD_INT 0
86722: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86723: LD_VAR 0 1
86727: PPUSH
86728: LD_VAR 0 2
86732: PPUSH
86733: LD_VAR 0 3
86737: PPUSH
86738: LD_INT 1
86740: PPUSH
86741: LD_INT 1
86743: PPUSH
86744: CALL_OW 483
// CenterOnXY ( x , y ) ;
86748: LD_VAR 0 2
86752: PPUSH
86753: LD_VAR 0 3
86757: PPUSH
86758: CALL_OW 84
// end ;
86762: LD_VAR 0 4
86766: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86767: LD_INT 0
86769: PPUSH
86770: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86771: LD_VAR 0 1
86775: NOT
86776: PUSH
86777: LD_VAR 0 2
86781: PPUSH
86782: LD_VAR 0 3
86786: PPUSH
86787: CALL_OW 488
86791: NOT
86792: OR
86793: PUSH
86794: LD_VAR 0 1
86798: PPUSH
86799: CALL_OW 266
86803: PUSH
86804: LD_INT 3
86806: NONEQUAL
86807: PUSH
86808: LD_VAR 0 1
86812: PPUSH
86813: CALL_OW 247
86817: PUSH
86818: LD_INT 1
86820: EQUAL
86821: NOT
86822: AND
86823: OR
86824: IFFALSE 86828
// exit ;
86826: GO 87110
// if GetType ( factory ) = unit_human then
86828: LD_VAR 0 1
86832: PPUSH
86833: CALL_OW 247
86837: PUSH
86838: LD_INT 1
86840: EQUAL
86841: IFFALSE 86858
// factory := IsInUnit ( factory ) ;
86843: LD_ADDR_VAR 0 1
86847: PUSH
86848: LD_VAR 0 1
86852: PPUSH
86853: CALL_OW 310
86857: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86858: LD_VAR 0 1
86862: PPUSH
86863: CALL_OW 266
86867: PUSH
86868: LD_INT 3
86870: NONEQUAL
86871: IFFALSE 86875
// exit ;
86873: GO 87110
// for i := 1 to Count ( factoryWaypoints ) do
86875: LD_ADDR_VAR 0 5
86879: PUSH
86880: DOUBLE
86881: LD_INT 1
86883: DEC
86884: ST_TO_ADDR
86885: LD_EXP 122
86889: PPUSH
86890: CALL 31566 0 1
86894: PUSH
86895: FOR_TO
86896: IFFALSE 87058
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
86898: LD_VAR 0 2
86902: PPUSH
86903: LD_VAR 0 3
86907: PPUSH
86908: CALL_OW 428
86912: PUSH
86913: LD_EXP 122
86917: PUSH
86918: LD_VAR 0 5
86922: ARRAY
86923: PUSH
86924: LD_INT 2
86926: ARRAY
86927: EQUAL
86928: IFFALSE 86960
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
86930: LD_ADDR_EXP 122
86934: PUSH
86935: LD_EXP 122
86939: PPUSH
86940: LD_VAR 0 5
86944: PPUSH
86945: CALL_OW 3
86949: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86950: CALL 87115 0 0
// exit ;
86954: POP
86955: POP
86956: GO 87110
// end else
86958: GO 87056
// if factory = factoryWaypoints [ i ] [ 2 ] then
86960: LD_VAR 0 1
86964: PUSH
86965: LD_EXP 122
86969: PUSH
86970: LD_VAR 0 5
86974: ARRAY
86975: PUSH
86976: LD_INT 2
86978: ARRAY
86979: EQUAL
86980: IFFALSE 87056
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
86982: LD_ADDR_EXP 122
86986: PUSH
86987: LD_EXP 122
86991: PPUSH
86992: LD_VAR 0 5
86996: PPUSH
86997: CALL_OW 3
87001: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87002: LD_ADDR_EXP 122
87006: PUSH
87007: LD_EXP 122
87011: PPUSH
87012: LD_VAR 0 1
87016: PPUSH
87017: CALL_OW 255
87021: PUSH
87022: LD_VAR 0 1
87026: PUSH
87027: LD_VAR 0 2
87031: PUSH
87032: LD_VAR 0 3
87036: PUSH
87037: EMPTY
87038: LIST
87039: LIST
87040: LIST
87041: LIST
87042: PPUSH
87043: CALL 67175 0 2
87047: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87048: CALL 87115 0 0
// exit ;
87052: POP
87053: POP
87054: GO 87110
// end ; end ;
87056: GO 86895
87058: POP
87059: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
87060: LD_ADDR_EXP 122
87064: PUSH
87065: LD_EXP 122
87069: PPUSH
87070: LD_VAR 0 1
87074: PPUSH
87075: CALL_OW 255
87079: PUSH
87080: LD_VAR 0 1
87084: PUSH
87085: LD_VAR 0 2
87089: PUSH
87090: LD_VAR 0 3
87094: PUSH
87095: EMPTY
87096: LIST
87097: LIST
87098: LIST
87099: LIST
87100: PPUSH
87101: CALL 67175 0 2
87105: ST_TO_ADDR
// UpdateFactoryWaypoints ;
87106: CALL 87115 0 0
// end ;
87110: LD_VAR 0 4
87114: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
87115: LD_INT 0
87117: PPUSH
87118: PPUSH
87119: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
87120: LD_STRING resetFactoryWaypoint();
87122: PPUSH
87123: CALL_OW 559
// if factoryWaypoints then
87127: LD_EXP 122
87131: IFFALSE 87252
// begin list := factoryWaypoints ;
87133: LD_ADDR_VAR 0 3
87137: PUSH
87138: LD_EXP 122
87142: ST_TO_ADDR
// for i := 1 to list do
87143: LD_ADDR_VAR 0 2
87147: PUSH
87148: DOUBLE
87149: LD_INT 1
87151: DEC
87152: ST_TO_ADDR
87153: LD_VAR 0 3
87157: PUSH
87158: FOR_TO
87159: IFFALSE 87250
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87161: LD_STRING setFactoryWaypointXY(
87163: PUSH
87164: LD_VAR 0 3
87168: PUSH
87169: LD_VAR 0 2
87173: ARRAY
87174: PUSH
87175: LD_INT 1
87177: ARRAY
87178: STR
87179: PUSH
87180: LD_STRING ,
87182: STR
87183: PUSH
87184: LD_VAR 0 3
87188: PUSH
87189: LD_VAR 0 2
87193: ARRAY
87194: PUSH
87195: LD_INT 2
87197: ARRAY
87198: STR
87199: PUSH
87200: LD_STRING ,
87202: STR
87203: PUSH
87204: LD_VAR 0 3
87208: PUSH
87209: LD_VAR 0 2
87213: ARRAY
87214: PUSH
87215: LD_INT 3
87217: ARRAY
87218: STR
87219: PUSH
87220: LD_STRING ,
87222: STR
87223: PUSH
87224: LD_VAR 0 3
87228: PUSH
87229: LD_VAR 0 2
87233: ARRAY
87234: PUSH
87235: LD_INT 4
87237: ARRAY
87238: STR
87239: PUSH
87240: LD_STRING )
87242: STR
87243: PPUSH
87244: CALL_OW 559
87248: GO 87158
87250: POP
87251: POP
// end ; end ;
87252: LD_VAR 0 1
87256: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
87257: LD_INT 0
87259: PPUSH
// if HexInfo ( x , y ) = warehouse then
87260: LD_VAR 0 2
87264: PPUSH
87265: LD_VAR 0 3
87269: PPUSH
87270: CALL_OW 428
87274: PUSH
87275: LD_VAR 0 1
87279: EQUAL
87280: IFFALSE 87307
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
87282: LD_ADDR_EXP 123
87286: PUSH
87287: LD_EXP 123
87291: PPUSH
87292: LD_VAR 0 1
87296: PPUSH
87297: LD_INT 0
87299: PPUSH
87300: CALL_OW 1
87304: ST_TO_ADDR
87305: GO 87358
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
87307: LD_ADDR_EXP 123
87311: PUSH
87312: LD_EXP 123
87316: PPUSH
87317: LD_VAR 0 1
87321: PPUSH
87322: LD_VAR 0 1
87326: PPUSH
87327: CALL_OW 255
87331: PUSH
87332: LD_VAR 0 1
87336: PUSH
87337: LD_VAR 0 2
87341: PUSH
87342: LD_VAR 0 3
87346: PUSH
87347: EMPTY
87348: LIST
87349: LIST
87350: LIST
87351: LIST
87352: PPUSH
87353: CALL_OW 1
87357: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87358: CALL 87367 0 0
// end ;
87362: LD_VAR 0 4
87366: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87367: LD_INT 0
87369: PPUSH
87370: PPUSH
87371: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87372: LD_STRING resetWarehouseGatheringPoints();
87374: PPUSH
87375: CALL_OW 559
// if warehouseGatheringPoints then
87379: LD_EXP 123
87383: IFFALSE 87509
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87385: LD_ADDR_VAR 0 3
87389: PUSH
87390: LD_EXP 123
87394: PPUSH
87395: CALL 70937 0 1
87399: ST_TO_ADDR
// for i := 1 to list do
87400: LD_ADDR_VAR 0 2
87404: PUSH
87405: DOUBLE
87406: LD_INT 1
87408: DEC
87409: ST_TO_ADDR
87410: LD_VAR 0 3
87414: PUSH
87415: FOR_TO
87416: IFFALSE 87507
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87418: LD_STRING setWarehouseGatheringPointXY(
87420: PUSH
87421: LD_VAR 0 3
87425: PUSH
87426: LD_VAR 0 2
87430: ARRAY
87431: PUSH
87432: LD_INT 1
87434: ARRAY
87435: STR
87436: PUSH
87437: LD_STRING ,
87439: STR
87440: PUSH
87441: LD_VAR 0 3
87445: PUSH
87446: LD_VAR 0 2
87450: ARRAY
87451: PUSH
87452: LD_INT 2
87454: ARRAY
87455: STR
87456: PUSH
87457: LD_STRING ,
87459: STR
87460: PUSH
87461: LD_VAR 0 3
87465: PUSH
87466: LD_VAR 0 2
87470: ARRAY
87471: PUSH
87472: LD_INT 3
87474: ARRAY
87475: STR
87476: PUSH
87477: LD_STRING ,
87479: STR
87480: PUSH
87481: LD_VAR 0 3
87485: PUSH
87486: LD_VAR 0 2
87490: ARRAY
87491: PUSH
87492: LD_INT 4
87494: ARRAY
87495: STR
87496: PUSH
87497: LD_STRING )
87499: STR
87500: PPUSH
87501: CALL_OW 559
87505: GO 87415
87507: POP
87508: POP
// end ; end ;
87509: LD_VAR 0 1
87513: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87514: LD_EXP 123
87518: IFFALSE 88203
87520: GO 87522
87522: DISABLE
87523: LD_INT 0
87525: PPUSH
87526: PPUSH
87527: PPUSH
87528: PPUSH
87529: PPUSH
87530: PPUSH
87531: PPUSH
87532: PPUSH
87533: PPUSH
// begin enable ;
87534: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87535: LD_ADDR_VAR 0 3
87539: PUSH
87540: LD_EXP 123
87544: PPUSH
87545: CALL 70937 0 1
87549: ST_TO_ADDR
// if not list then
87550: LD_VAR 0 3
87554: NOT
87555: IFFALSE 87559
// exit ;
87557: GO 88203
// for i := 1 to list do
87559: LD_ADDR_VAR 0 1
87563: PUSH
87564: DOUBLE
87565: LD_INT 1
87567: DEC
87568: ST_TO_ADDR
87569: LD_VAR 0 3
87573: PUSH
87574: FOR_TO
87575: IFFALSE 88201
// begin depot := list [ i ] [ 2 ] ;
87577: LD_ADDR_VAR 0 8
87581: PUSH
87582: LD_VAR 0 3
87586: PUSH
87587: LD_VAR 0 1
87591: ARRAY
87592: PUSH
87593: LD_INT 2
87595: ARRAY
87596: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87597: LD_ADDR_VAR 0 5
87601: PUSH
87602: LD_VAR 0 3
87606: PUSH
87607: LD_VAR 0 1
87611: ARRAY
87612: PUSH
87613: LD_INT 1
87615: ARRAY
87616: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87617: LD_VAR 0 8
87621: PPUSH
87622: CALL_OW 301
87626: PUSH
87627: LD_VAR 0 5
87631: PUSH
87632: LD_VAR 0 8
87636: PPUSH
87637: CALL_OW 255
87641: NONEQUAL
87642: OR
87643: IFFALSE 87672
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87645: LD_ADDR_EXP 123
87649: PUSH
87650: LD_EXP 123
87654: PPUSH
87655: LD_VAR 0 8
87659: PPUSH
87660: LD_INT 0
87662: PPUSH
87663: CALL_OW 1
87667: ST_TO_ADDR
// exit ;
87668: POP
87669: POP
87670: GO 88203
// end ; x := list [ i ] [ 3 ] ;
87672: LD_ADDR_VAR 0 6
87676: PUSH
87677: LD_VAR 0 3
87681: PUSH
87682: LD_VAR 0 1
87686: ARRAY
87687: PUSH
87688: LD_INT 3
87690: ARRAY
87691: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87692: LD_ADDR_VAR 0 7
87696: PUSH
87697: LD_VAR 0 3
87701: PUSH
87702: LD_VAR 0 1
87706: ARRAY
87707: PUSH
87708: LD_INT 4
87710: ARRAY
87711: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87712: LD_ADDR_VAR 0 9
87716: PUSH
87717: LD_VAR 0 6
87721: PPUSH
87722: LD_VAR 0 7
87726: PPUSH
87727: LD_INT 16
87729: PPUSH
87730: CALL 69521 0 3
87734: ST_TO_ADDR
// if not cratesNearbyPoint then
87735: LD_VAR 0 9
87739: NOT
87740: IFFALSE 87746
// exit ;
87742: POP
87743: POP
87744: GO 88203
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87746: LD_ADDR_VAR 0 4
87750: PUSH
87751: LD_INT 22
87753: PUSH
87754: LD_VAR 0 5
87758: PUSH
87759: EMPTY
87760: LIST
87761: LIST
87762: PUSH
87763: LD_INT 3
87765: PUSH
87766: LD_INT 60
87768: PUSH
87769: EMPTY
87770: LIST
87771: PUSH
87772: EMPTY
87773: LIST
87774: LIST
87775: PUSH
87776: LD_INT 91
87778: PUSH
87779: LD_VAR 0 8
87783: PUSH
87784: LD_INT 6
87786: PUSH
87787: EMPTY
87788: LIST
87789: LIST
87790: LIST
87791: PUSH
87792: LD_INT 2
87794: PUSH
87795: LD_INT 25
87797: PUSH
87798: LD_INT 2
87800: PUSH
87801: EMPTY
87802: LIST
87803: LIST
87804: PUSH
87805: LD_INT 25
87807: PUSH
87808: LD_INT 16
87810: PUSH
87811: EMPTY
87812: LIST
87813: LIST
87814: PUSH
87815: EMPTY
87816: LIST
87817: LIST
87818: LIST
87819: PUSH
87820: EMPTY
87821: LIST
87822: LIST
87823: LIST
87824: LIST
87825: PPUSH
87826: CALL_OW 69
87830: PUSH
87831: LD_VAR 0 8
87835: PPUSH
87836: CALL_OW 313
87840: PPUSH
87841: LD_INT 3
87843: PUSH
87844: LD_INT 60
87846: PUSH
87847: EMPTY
87848: LIST
87849: PUSH
87850: EMPTY
87851: LIST
87852: LIST
87853: PUSH
87854: LD_INT 2
87856: PUSH
87857: LD_INT 25
87859: PUSH
87860: LD_INT 2
87862: PUSH
87863: EMPTY
87864: LIST
87865: LIST
87866: PUSH
87867: LD_INT 25
87869: PUSH
87870: LD_INT 16
87872: PUSH
87873: EMPTY
87874: LIST
87875: LIST
87876: PUSH
87877: EMPTY
87878: LIST
87879: LIST
87880: LIST
87881: PUSH
87882: EMPTY
87883: LIST
87884: LIST
87885: PPUSH
87886: CALL_OW 72
87890: UNION
87891: ST_TO_ADDR
// if tmp then
87892: LD_VAR 0 4
87896: IFFALSE 87976
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87898: LD_ADDR_VAR 0 4
87902: PUSH
87903: LD_VAR 0 4
87907: PPUSH
87908: LD_INT 3
87910: PPUSH
87911: CALL 67490 0 2
87915: ST_TO_ADDR
// for j in tmp do
87916: LD_ADDR_VAR 0 2
87920: PUSH
87921: LD_VAR 0 4
87925: PUSH
87926: FOR_IN
87927: IFFALSE 87970
// begin if IsInUnit ( j ) then
87929: LD_VAR 0 2
87933: PPUSH
87934: CALL_OW 310
87938: IFFALSE 87949
// ComExit ( j ) ;
87940: LD_VAR 0 2
87944: PPUSH
87945: CALL 67573 0 1
// AddComCollect ( j , x , y ) ;
87949: LD_VAR 0 2
87953: PPUSH
87954: LD_VAR 0 6
87958: PPUSH
87959: LD_VAR 0 7
87963: PPUSH
87964: CALL_OW 177
// end ;
87968: GO 87926
87970: POP
87971: POP
// exit ;
87972: POP
87973: POP
87974: GO 88203
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
87976: LD_ADDR_VAR 0 4
87980: PUSH
87981: LD_INT 22
87983: PUSH
87984: LD_VAR 0 5
87988: PUSH
87989: EMPTY
87990: LIST
87991: LIST
87992: PUSH
87993: LD_INT 91
87995: PUSH
87996: LD_VAR 0 8
88000: PUSH
88001: LD_INT 8
88003: PUSH
88004: EMPTY
88005: LIST
88006: LIST
88007: LIST
88008: PUSH
88009: LD_INT 2
88011: PUSH
88012: LD_INT 34
88014: PUSH
88015: LD_INT 12
88017: PUSH
88018: EMPTY
88019: LIST
88020: LIST
88021: PUSH
88022: LD_INT 34
88024: PUSH
88025: LD_INT 51
88027: PUSH
88028: EMPTY
88029: LIST
88030: LIST
88031: PUSH
88032: LD_INT 34
88034: PUSH
88035: LD_INT 32
88037: PUSH
88038: EMPTY
88039: LIST
88040: LIST
88041: PUSH
88042: LD_INT 34
88044: PUSH
88045: LD_INT 89
88047: PUSH
88048: EMPTY
88049: LIST
88050: LIST
88051: PUSH
88052: EMPTY
88053: LIST
88054: LIST
88055: LIST
88056: LIST
88057: LIST
88058: PUSH
88059: EMPTY
88060: LIST
88061: LIST
88062: LIST
88063: PPUSH
88064: CALL_OW 69
88068: ST_TO_ADDR
// if tmp then
88069: LD_VAR 0 4
88073: IFFALSE 88199
// begin for j in tmp do
88075: LD_ADDR_VAR 0 2
88079: PUSH
88080: LD_VAR 0 4
88084: PUSH
88085: FOR_IN
88086: IFFALSE 88197
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
88088: LD_VAR 0 2
88092: PPUSH
88093: CALL_OW 262
88097: PUSH
88098: LD_INT 3
88100: EQUAL
88101: PUSH
88102: LD_VAR 0 2
88106: PPUSH
88107: CALL_OW 261
88111: PUSH
88112: LD_INT 20
88114: GREATER
88115: OR
88116: PUSH
88117: LD_VAR 0 2
88121: PPUSH
88122: CALL_OW 314
88126: NOT
88127: AND
88128: PUSH
88129: LD_VAR 0 2
88133: PPUSH
88134: CALL_OW 263
88138: PUSH
88139: LD_INT 1
88141: NONEQUAL
88142: PUSH
88143: LD_VAR 0 2
88147: PPUSH
88148: CALL_OW 311
88152: OR
88153: AND
88154: IFFALSE 88195
// begin ComCollect ( j , x , y ) ;
88156: LD_VAR 0 2
88160: PPUSH
88161: LD_VAR 0 6
88165: PPUSH
88166: LD_VAR 0 7
88170: PPUSH
88171: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
88175: LD_VAR 0 2
88179: PPUSH
88180: LD_VAR 0 8
88184: PPUSH
88185: CALL_OW 172
// exit ;
88189: POP
88190: POP
88191: POP
88192: POP
88193: GO 88203
// end ;
88195: GO 88085
88197: POP
88198: POP
// end ; end ;
88199: GO 87574
88201: POP
88202: POP
// end ; end_of_file
88203: PPOPN 9
88205: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88206: LD_VAR 0 1
88210: PUSH
88211: LD_INT 200
88213: DOUBLE
88214: GREATEREQUAL
88215: IFFALSE 88223
88217: LD_INT 299
88219: DOUBLE
88220: LESSEQUAL
88221: IFTRUE 88225
88223: GO 88257
88225: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88226: LD_VAR 0 1
88230: PPUSH
88231: LD_VAR 0 2
88235: PPUSH
88236: LD_VAR 0 3
88240: PPUSH
88241: LD_VAR 0 4
88245: PPUSH
88246: LD_VAR 0 5
88250: PPUSH
88251: CALL 88954 0 5
88255: GO 88334
88257: LD_INT 300
88259: DOUBLE
88260: GREATEREQUAL
88261: IFFALSE 88269
88263: LD_INT 399
88265: DOUBLE
88266: LESSEQUAL
88267: IFTRUE 88271
88269: GO 88333
88271: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88272: LD_VAR 0 1
88276: PPUSH
88277: LD_VAR 0 2
88281: PPUSH
88282: LD_VAR 0 3
88286: PPUSH
88287: LD_VAR 0 4
88291: PPUSH
88292: LD_VAR 0 5
88296: PPUSH
88297: LD_VAR 0 6
88301: PPUSH
88302: LD_VAR 0 7
88306: PPUSH
88307: LD_VAR 0 8
88311: PPUSH
88312: LD_VAR 0 9
88316: PPUSH
88317: LD_VAR 0 10
88321: PPUSH
88322: LD_VAR 0 11
88326: PPUSH
88327: CALL 84779 0 11
88331: GO 88334
88333: POP
// end ;
88334: PPOPN 11
88336: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88337: LD_VAR 0 1
88341: PPUSH
88342: LD_VAR 0 2
88346: PPUSH
88347: LD_VAR 0 3
88351: PPUSH
88352: LD_VAR 0 4
88356: PPUSH
88357: LD_VAR 0 5
88361: PPUSH
88362: CALL 88419 0 5
// end ; end_of_file
88366: PPOPN 5
88368: END
// export function SOS_UnitDestroyed ( un ) ; begin
88369: LD_INT 0
88371: PPUSH
// ComRadiation ( un ) ;
88372: LD_VAR 0 1
88376: PPUSH
88377: CALL 89358 0 1
// end ;
88381: LD_VAR 0 2
88385: RET
// export function SOS_UnitKamikazed ( un ) ; begin
88386: LD_INT 0
88388: PPUSH
// ComRadiation ( un ) ;
88389: LD_VAR 0 1
88393: PPUSH
88394: CALL 89358 0 1
// end ;
88398: LD_VAR 0 2
88402: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88403: LD_INT 0
88405: PPUSH
// end ;
88406: LD_VAR 0 4
88410: RET
// export function SOS_Command ( cmd ) ; begin
88411: LD_INT 0
88413: PPUSH
// end ;
88414: LD_VAR 0 2
88418: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88419: LD_INT 0
88421: PPUSH
// end ;
88422: LD_VAR 0 6
88426: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
88427: LD_INT 0
88429: PPUSH
88430: PPUSH
88431: PPUSH
88432: PPUSH
88433: PPUSH
// if not vehicle or not factory then
88434: LD_VAR 0 1
88438: NOT
88439: PUSH
88440: LD_VAR 0 2
88444: NOT
88445: OR
88446: IFFALSE 88450
// exit ;
88448: GO 88949
// if not factoryWaypoints then
88450: LD_EXP 122
88454: NOT
88455: IFFALSE 88459
// exit ;
88457: GO 88949
// for i := 1 to Count ( factoryWaypoints ) do
88459: LD_ADDR_VAR 0 4
88463: PUSH
88464: DOUBLE
88465: LD_INT 1
88467: DEC
88468: ST_TO_ADDR
88469: LD_EXP 122
88473: PPUSH
88474: CALL 31566 0 1
88478: PUSH
88479: FOR_TO
88480: IFFALSE 88947
// if factoryWaypoints [ i ] [ 2 ] = factory then
88482: LD_EXP 122
88486: PUSH
88487: LD_VAR 0 4
88491: ARRAY
88492: PUSH
88493: LD_INT 2
88495: ARRAY
88496: PUSH
88497: LD_VAR 0 2
88501: EQUAL
88502: IFFALSE 88945
// begin if GetControl ( vehicle ) = control_manual then
88504: LD_VAR 0 1
88508: PPUSH
88509: CALL_OW 263
88513: PUSH
88514: LD_INT 1
88516: EQUAL
88517: IFFALSE 88828
// begin driver := IsDrivenBy ( vehicle ) ;
88519: LD_ADDR_VAR 0 6
88523: PUSH
88524: LD_VAR 0 1
88528: PPUSH
88529: CALL_OW 311
88533: ST_TO_ADDR
// tag := GetTag ( driver ) ;
88534: LD_ADDR_VAR 0 5
88538: PUSH
88539: LD_VAR 0 6
88543: PPUSH
88544: CALL_OW 110
88548: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
88549: LD_VAR 0 5
88553: PUSH
88554: LD_INT 501
88556: EQUAL
88557: PUSH
88558: LD_VAR 0 1
88562: PPUSH
88563: CALL_OW 110
88567: PUSH
88568: LD_INT 501
88570: EQUAL
88571: OR
88572: IFFALSE 88578
// exit ;
88574: POP
88575: POP
88576: GO 88949
// if not HasTask ( driver ) then
88578: LD_VAR 0 6
88582: PPUSH
88583: CALL_OW 314
88587: NOT
88588: IFFALSE 88826
// begin SetTag ( driver , tDriver ) ;
88590: LD_VAR 0 6
88594: PPUSH
88595: LD_INT 501
88597: PPUSH
88598: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
88602: LD_VAR 0 1
88606: PPUSH
88607: LD_INT 501
88609: PPUSH
88610: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88614: LD_ADDR_VAR 0 7
88618: PUSH
88619: LD_EXP 122
88623: PUSH
88624: LD_VAR 0 4
88628: ARRAY
88629: PUSH
88630: LD_INT 3
88632: ARRAY
88633: PPUSH
88634: LD_EXP 122
88638: PUSH
88639: LD_VAR 0 4
88643: ARRAY
88644: PUSH
88645: LD_INT 4
88647: ARRAY
88648: PPUSH
88649: CALL_OW 428
88653: ST_TO_ADDR
// if hex then
88654: LD_VAR 0 7
88658: IFFALSE 88676
// ComMoveUnit ( driver , hex ) else
88660: LD_VAR 0 6
88664: PPUSH
88665: LD_VAR 0 7
88669: PPUSH
88670: CALL_OW 112
88674: GO 88715
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88676: LD_VAR 0 6
88680: PPUSH
88681: LD_EXP 122
88685: PUSH
88686: LD_VAR 0 4
88690: ARRAY
88691: PUSH
88692: LD_INT 3
88694: ARRAY
88695: PPUSH
88696: LD_EXP 122
88700: PUSH
88701: LD_VAR 0 4
88705: ARRAY
88706: PUSH
88707: LD_INT 4
88709: ARRAY
88710: PPUSH
88711: CALL_OW 111
// AddComExitVehicle ( driver ) ;
88715: LD_VAR 0 6
88719: PPUSH
88720: CALL_OW 181
// if Multiplayer then
88724: LD_OWVAR 4
88728: IFFALSE 88777
// begin repeat wait ( 10 ) ;
88730: LD_INT 10
88732: PPUSH
88733: CALL_OW 67
// until not IsInUnit ( driver ) ;
88737: LD_VAR 0 6
88741: PPUSH
88742: CALL_OW 310
88746: NOT
88747: IFFALSE 88730
// if not HasTask ( driver ) then
88749: LD_VAR 0 6
88753: PPUSH
88754: CALL_OW 314
88758: NOT
88759: IFFALSE 88775
// ComEnterUnit ( driver , factory ) ;
88761: LD_VAR 0 6
88765: PPUSH
88766: LD_VAR 0 2
88770: PPUSH
88771: CALL_OW 120
// end else
88775: GO 88791
// AddComEnterUnit ( driver , factory ) ;
88777: LD_VAR 0 6
88781: PPUSH
88782: LD_VAR 0 2
88786: PPUSH
88787: CALL_OW 180
// wait ( 0 0$1 ) ;
88791: LD_INT 35
88793: PPUSH
88794: CALL_OW 67
// SetTag ( driver , tag ) ;
88798: LD_VAR 0 6
88802: PPUSH
88803: LD_VAR 0 5
88807: PPUSH
88808: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
88812: LD_VAR 0 1
88816: PPUSH
88817: LD_INT 0
88819: PPUSH
88820: CALL_OW 109
// break ;
88824: GO 88947
// end ; end else
88826: GO 88945
// if GetControl ( vehicle ) = control_remote then
88828: LD_VAR 0 1
88832: PPUSH
88833: CALL_OW 263
88837: PUSH
88838: LD_INT 2
88840: EQUAL
88841: IFFALSE 88904
// begin wait ( 0 0$2 ) ;
88843: LD_INT 70
88845: PPUSH
88846: CALL_OW 67
// if Connect ( vehicle ) then
88850: LD_VAR 0 1
88854: PPUSH
88855: CALL 37772 0 1
88859: IFFALSE 88900
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88861: LD_VAR 0 1
88865: PPUSH
88866: LD_EXP 122
88870: PUSH
88871: LD_VAR 0 4
88875: ARRAY
88876: PUSH
88877: LD_INT 3
88879: ARRAY
88880: PPUSH
88881: LD_EXP 122
88885: PUSH
88886: LD_VAR 0 4
88890: ARRAY
88891: PUSH
88892: LD_INT 4
88894: ARRAY
88895: PPUSH
88896: CALL_OW 171
// break ;
88900: GO 88947
// end else
88902: GO 88945
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
88904: LD_VAR 0 1
88908: PPUSH
88909: LD_EXP 122
88913: PUSH
88914: LD_VAR 0 4
88918: ARRAY
88919: PUSH
88920: LD_INT 3
88922: ARRAY
88923: PPUSH
88924: LD_EXP 122
88928: PUSH
88929: LD_VAR 0 4
88933: ARRAY
88934: PUSH
88935: LD_INT 4
88937: ARRAY
88938: PPUSH
88939: CALL_OW 171
// break ;
88943: GO 88947
// end ; end ;
88945: GO 88479
88947: POP
88948: POP
// end ;
88949: LD_VAR 0 3
88953: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
88954: LD_INT 0
88956: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
88957: LD_VAR 0 1
88961: PUSH
88962: LD_INT 250
88964: EQUAL
88965: PUSH
88966: LD_VAR 0 2
88970: PPUSH
88971: CALL_OW 264
88975: PUSH
88976: LD_INT 81
88978: EQUAL
88979: AND
88980: IFFALSE 89001
// MinerPlaceMine ( unit , x , y ) ;
88982: LD_VAR 0 2
88986: PPUSH
88987: LD_VAR 0 4
88991: PPUSH
88992: LD_VAR 0 5
88996: PPUSH
88997: CALL 92093 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
89001: LD_VAR 0 1
89005: PUSH
89006: LD_INT 251
89008: EQUAL
89009: PUSH
89010: LD_VAR 0 2
89014: PPUSH
89015: CALL_OW 264
89019: PUSH
89020: LD_INT 81
89022: EQUAL
89023: AND
89024: IFFALSE 89045
// MinerDetonateMine ( unit , x , y ) ;
89026: LD_VAR 0 2
89030: PPUSH
89031: LD_VAR 0 4
89035: PPUSH
89036: LD_VAR 0 5
89040: PPUSH
89041: CALL 92368 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
89045: LD_VAR 0 1
89049: PUSH
89050: LD_INT 252
89052: EQUAL
89053: PUSH
89054: LD_VAR 0 2
89058: PPUSH
89059: CALL_OW 264
89063: PUSH
89064: LD_INT 81
89066: EQUAL
89067: AND
89068: IFFALSE 89089
// MinerCreateMinefield ( unit , x , y ) ;
89070: LD_VAR 0 2
89074: PPUSH
89075: LD_VAR 0 4
89079: PPUSH
89080: LD_VAR 0 5
89084: PPUSH
89085: CALL 92785 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
89089: LD_VAR 0 1
89093: PUSH
89094: LD_INT 253
89096: EQUAL
89097: PUSH
89098: LD_VAR 0 2
89102: PPUSH
89103: CALL_OW 257
89107: PUSH
89108: LD_INT 5
89110: EQUAL
89111: AND
89112: IFFALSE 89133
// ComBinocular ( unit , x , y ) ;
89114: LD_VAR 0 2
89118: PPUSH
89119: LD_VAR 0 4
89123: PPUSH
89124: LD_VAR 0 5
89128: PPUSH
89129: CALL 93154 0 3
// if selectedUnit then
89133: LD_VAR 0 3
89137: IFFALSE 89193
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
89139: LD_VAR 0 1
89143: PUSH
89144: LD_INT 254
89146: EQUAL
89147: PUSH
89148: LD_VAR 0 2
89152: PPUSH
89153: CALL_OW 264
89157: PUSH
89158: LD_INT 99
89160: EQUAL
89161: AND
89162: PUSH
89163: LD_VAR 0 3
89167: PPUSH
89168: CALL_OW 263
89172: PUSH
89173: LD_INT 3
89175: EQUAL
89176: AND
89177: IFFALSE 89193
// HackDestroyVehicle ( unit , selectedUnit ) ;
89179: LD_VAR 0 2
89183: PPUSH
89184: LD_VAR 0 3
89188: PPUSH
89189: CALL 91457 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
89193: LD_VAR 0 1
89197: PUSH
89198: LD_INT 255
89200: EQUAL
89201: PUSH
89202: LD_VAR 0 2
89206: PPUSH
89207: CALL_OW 264
89211: PUSH
89212: LD_INT 14
89214: PUSH
89215: LD_INT 53
89217: PUSH
89218: EMPTY
89219: LIST
89220: LIST
89221: IN
89222: AND
89223: PUSH
89224: LD_VAR 0 4
89228: PPUSH
89229: LD_VAR 0 5
89233: PPUSH
89234: CALL_OW 488
89238: AND
89239: IFFALSE 89263
// CutTreeXYR ( unit , x , y , 12 ) ;
89241: LD_VAR 0 2
89245: PPUSH
89246: LD_VAR 0 4
89250: PPUSH
89251: LD_VAR 0 5
89255: PPUSH
89256: LD_INT 12
89258: PPUSH
89259: CALL 89454 0 4
// if cmd = 256 then
89263: LD_VAR 0 1
89267: PUSH
89268: LD_INT 256
89270: EQUAL
89271: IFFALSE 89292
// SetFactoryWaypoint ( unit , x , y ) ;
89273: LD_VAR 0 2
89277: PPUSH
89278: LD_VAR 0 4
89282: PPUSH
89283: LD_VAR 0 5
89287: PPUSH
89288: CALL 86767 0 3
// if cmd = 257 then
89292: LD_VAR 0 1
89296: PUSH
89297: LD_INT 257
89299: EQUAL
89300: IFFALSE 89321
// SetWarehouseGatheringPoint ( unit , x , y ) ;
89302: LD_VAR 0 2
89306: PPUSH
89307: LD_VAR 0 4
89311: PPUSH
89312: LD_VAR 0 5
89316: PPUSH
89317: CALL 87257 0 3
// if cmd = 258 then
89321: LD_VAR 0 1
89325: PUSH
89326: LD_INT 258
89328: EQUAL
89329: IFFALSE 89353
// BurnTreeXYR ( unit , x , y , 8 ) ;
89331: LD_VAR 0 2
89335: PPUSH
89336: LD_VAR 0 4
89340: PPUSH
89341: LD_VAR 0 5
89345: PPUSH
89346: LD_INT 8
89348: PPUSH
89349: CALL 89848 0 4
// end ;
89353: LD_VAR 0 6
89357: RET
// export function ComRadiation ( un ) ; var eff ; begin
89358: LD_INT 0
89360: PPUSH
89361: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
89362: LD_VAR 0 1
89366: PPUSH
89367: CALL_OW 264
89371: PUSH
89372: LD_INT 91
89374: NONEQUAL
89375: IFFALSE 89379
// exit ;
89377: GO 89449
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
89379: LD_INT 68
89381: PPUSH
89382: LD_VAR 0 1
89386: PPUSH
89387: CALL_OW 255
89391: PPUSH
89392: CALL_OW 321
89396: PUSH
89397: LD_INT 2
89399: EQUAL
89400: IFFALSE 89412
// eff := 70 else
89402: LD_ADDR_VAR 0 3
89406: PUSH
89407: LD_INT 70
89409: ST_TO_ADDR
89410: GO 89420
// eff := 30 ;
89412: LD_ADDR_VAR 0 3
89416: PUSH
89417: LD_INT 30
89419: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
89420: LD_VAR 0 1
89424: PPUSH
89425: CALL_OW 250
89429: PPUSH
89430: LD_VAR 0 1
89434: PPUSH
89435: CALL_OW 251
89439: PPUSH
89440: LD_VAR 0 3
89444: PPUSH
89445: CALL_OW 495
// end ;
89449: LD_VAR 0 2
89453: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
89454: LD_INT 0
89456: PPUSH
89457: PPUSH
89458: PPUSH
89459: PPUSH
89460: PPUSH
89461: PPUSH
89462: PPUSH
89463: PPUSH
89464: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
89465: LD_VAR 0 1
89469: PPUSH
89470: CALL_OW 302
89474: NOT
89475: PUSH
89476: LD_VAR 0 2
89480: PPUSH
89481: LD_VAR 0 3
89485: PPUSH
89486: CALL_OW 488
89490: NOT
89491: OR
89492: PUSH
89493: LD_VAR 0 4
89497: NOT
89498: OR
89499: IFFALSE 89503
// exit ;
89501: GO 89843
// list := [ ] ;
89503: LD_ADDR_VAR 0 13
89507: PUSH
89508: EMPTY
89509: ST_TO_ADDR
// if x - r < 0 then
89510: LD_VAR 0 2
89514: PUSH
89515: LD_VAR 0 4
89519: MINUS
89520: PUSH
89521: LD_INT 0
89523: LESS
89524: IFFALSE 89536
// min_x := 0 else
89526: LD_ADDR_VAR 0 7
89530: PUSH
89531: LD_INT 0
89533: ST_TO_ADDR
89534: GO 89552
// min_x := x - r ;
89536: LD_ADDR_VAR 0 7
89540: PUSH
89541: LD_VAR 0 2
89545: PUSH
89546: LD_VAR 0 4
89550: MINUS
89551: ST_TO_ADDR
// if y - r < 0 then
89552: LD_VAR 0 3
89556: PUSH
89557: LD_VAR 0 4
89561: MINUS
89562: PUSH
89563: LD_INT 0
89565: LESS
89566: IFFALSE 89578
// min_y := 0 else
89568: LD_ADDR_VAR 0 8
89572: PUSH
89573: LD_INT 0
89575: ST_TO_ADDR
89576: GO 89594
// min_y := y - r ;
89578: LD_ADDR_VAR 0 8
89582: PUSH
89583: LD_VAR 0 3
89587: PUSH
89588: LD_VAR 0 4
89592: MINUS
89593: ST_TO_ADDR
// max_x := x + r ;
89594: LD_ADDR_VAR 0 9
89598: PUSH
89599: LD_VAR 0 2
89603: PUSH
89604: LD_VAR 0 4
89608: PLUS
89609: ST_TO_ADDR
// max_y := y + r ;
89610: LD_ADDR_VAR 0 10
89614: PUSH
89615: LD_VAR 0 3
89619: PUSH
89620: LD_VAR 0 4
89624: PLUS
89625: ST_TO_ADDR
// for _x = min_x to max_x do
89626: LD_ADDR_VAR 0 11
89630: PUSH
89631: DOUBLE
89632: LD_VAR 0 7
89636: DEC
89637: ST_TO_ADDR
89638: LD_VAR 0 9
89642: PUSH
89643: FOR_TO
89644: IFFALSE 89761
// for _y = min_y to max_y do
89646: LD_ADDR_VAR 0 12
89650: PUSH
89651: DOUBLE
89652: LD_VAR 0 8
89656: DEC
89657: ST_TO_ADDR
89658: LD_VAR 0 10
89662: PUSH
89663: FOR_TO
89664: IFFALSE 89757
// begin if not ValidHex ( _x , _y ) then
89666: LD_VAR 0 11
89670: PPUSH
89671: LD_VAR 0 12
89675: PPUSH
89676: CALL_OW 488
89680: NOT
89681: IFFALSE 89685
// continue ;
89683: GO 89663
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89685: LD_VAR 0 11
89689: PPUSH
89690: LD_VAR 0 12
89694: PPUSH
89695: CALL_OW 351
89699: PUSH
89700: LD_VAR 0 11
89704: PPUSH
89705: LD_VAR 0 12
89709: PPUSH
89710: CALL_OW 554
89714: AND
89715: IFFALSE 89755
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89717: LD_ADDR_VAR 0 13
89721: PUSH
89722: LD_VAR 0 13
89726: PPUSH
89727: LD_VAR 0 13
89731: PUSH
89732: LD_INT 1
89734: PLUS
89735: PPUSH
89736: LD_VAR 0 11
89740: PUSH
89741: LD_VAR 0 12
89745: PUSH
89746: EMPTY
89747: LIST
89748: LIST
89749: PPUSH
89750: CALL_OW 2
89754: ST_TO_ADDR
// end ;
89755: GO 89663
89757: POP
89758: POP
89759: GO 89643
89761: POP
89762: POP
// if not list then
89763: LD_VAR 0 13
89767: NOT
89768: IFFALSE 89772
// exit ;
89770: GO 89843
// for i in list do
89772: LD_ADDR_VAR 0 6
89776: PUSH
89777: LD_VAR 0 13
89781: PUSH
89782: FOR_IN
89783: IFFALSE 89841
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89785: LD_VAR 0 1
89789: PPUSH
89790: LD_STRING M
89792: PUSH
89793: LD_VAR 0 6
89797: PUSH
89798: LD_INT 1
89800: ARRAY
89801: PUSH
89802: LD_VAR 0 6
89806: PUSH
89807: LD_INT 2
89809: ARRAY
89810: PUSH
89811: LD_INT 0
89813: PUSH
89814: LD_INT 0
89816: PUSH
89817: LD_INT 0
89819: PUSH
89820: LD_INT 0
89822: PUSH
89823: EMPTY
89824: LIST
89825: LIST
89826: LIST
89827: LIST
89828: LIST
89829: LIST
89830: LIST
89831: PUSH
89832: EMPTY
89833: LIST
89834: PPUSH
89835: CALL_OW 447
89839: GO 89782
89841: POP
89842: POP
// end ;
89843: LD_VAR 0 5
89847: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
89848: LD_INT 0
89850: PPUSH
89851: PPUSH
89852: PPUSH
89853: PPUSH
89854: PPUSH
89855: PPUSH
89856: PPUSH
89857: PPUSH
89858: PPUSH
89859: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
89860: LD_VAR 0 1
89864: PPUSH
89865: CALL_OW 302
89869: NOT
89870: PUSH
89871: LD_VAR 0 2
89875: PPUSH
89876: LD_VAR 0 3
89880: PPUSH
89881: CALL_OW 488
89885: NOT
89886: OR
89887: PUSH
89888: LD_VAR 0 4
89892: NOT
89893: OR
89894: IFFALSE 89898
// exit ;
89896: GO 90411
// list := [ ] ;
89898: LD_ADDR_VAR 0 13
89902: PUSH
89903: EMPTY
89904: ST_TO_ADDR
// if x - r < 0 then
89905: LD_VAR 0 2
89909: PUSH
89910: LD_VAR 0 4
89914: MINUS
89915: PUSH
89916: LD_INT 0
89918: LESS
89919: IFFALSE 89931
// min_x := 0 else
89921: LD_ADDR_VAR 0 7
89925: PUSH
89926: LD_INT 0
89928: ST_TO_ADDR
89929: GO 89947
// min_x := x - r ;
89931: LD_ADDR_VAR 0 7
89935: PUSH
89936: LD_VAR 0 2
89940: PUSH
89941: LD_VAR 0 4
89945: MINUS
89946: ST_TO_ADDR
// if y - r < 0 then
89947: LD_VAR 0 3
89951: PUSH
89952: LD_VAR 0 4
89956: MINUS
89957: PUSH
89958: LD_INT 0
89960: LESS
89961: IFFALSE 89973
// min_y := 0 else
89963: LD_ADDR_VAR 0 8
89967: PUSH
89968: LD_INT 0
89970: ST_TO_ADDR
89971: GO 89989
// min_y := y - r ;
89973: LD_ADDR_VAR 0 8
89977: PUSH
89978: LD_VAR 0 3
89982: PUSH
89983: LD_VAR 0 4
89987: MINUS
89988: ST_TO_ADDR
// max_x := x + r ;
89989: LD_ADDR_VAR 0 9
89993: PUSH
89994: LD_VAR 0 2
89998: PUSH
89999: LD_VAR 0 4
90003: PLUS
90004: ST_TO_ADDR
// max_y := y + r ;
90005: LD_ADDR_VAR 0 10
90009: PUSH
90010: LD_VAR 0 3
90014: PUSH
90015: LD_VAR 0 4
90019: PLUS
90020: ST_TO_ADDR
// for _x = min_x to max_x do
90021: LD_ADDR_VAR 0 11
90025: PUSH
90026: DOUBLE
90027: LD_VAR 0 7
90031: DEC
90032: ST_TO_ADDR
90033: LD_VAR 0 9
90037: PUSH
90038: FOR_TO
90039: IFFALSE 90156
// for _y = min_y to max_y do
90041: LD_ADDR_VAR 0 12
90045: PUSH
90046: DOUBLE
90047: LD_VAR 0 8
90051: DEC
90052: ST_TO_ADDR
90053: LD_VAR 0 10
90057: PUSH
90058: FOR_TO
90059: IFFALSE 90152
// begin if not ValidHex ( _x , _y ) then
90061: LD_VAR 0 11
90065: PPUSH
90066: LD_VAR 0 12
90070: PPUSH
90071: CALL_OW 488
90075: NOT
90076: IFFALSE 90080
// continue ;
90078: GO 90058
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
90080: LD_VAR 0 11
90084: PPUSH
90085: LD_VAR 0 12
90089: PPUSH
90090: CALL_OW 351
90094: PUSH
90095: LD_VAR 0 11
90099: PPUSH
90100: LD_VAR 0 12
90104: PPUSH
90105: CALL_OW 554
90109: AND
90110: IFFALSE 90150
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
90112: LD_ADDR_VAR 0 13
90116: PUSH
90117: LD_VAR 0 13
90121: PPUSH
90122: LD_VAR 0 13
90126: PUSH
90127: LD_INT 1
90129: PLUS
90130: PPUSH
90131: LD_VAR 0 11
90135: PUSH
90136: LD_VAR 0 12
90140: PUSH
90141: EMPTY
90142: LIST
90143: LIST
90144: PPUSH
90145: CALL_OW 2
90149: ST_TO_ADDR
// end ;
90150: GO 90058
90152: POP
90153: POP
90154: GO 90038
90156: POP
90157: POP
// if not list then
90158: LD_VAR 0 13
90162: NOT
90163: IFFALSE 90167
// exit ;
90165: GO 90411
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
90167: LD_ADDR_VAR 0 13
90171: PUSH
90172: LD_VAR 0 1
90176: PPUSH
90177: LD_VAR 0 13
90181: PPUSH
90182: LD_INT 1
90184: PPUSH
90185: LD_INT 1
90187: PPUSH
90188: CALL 34914 0 4
90192: ST_TO_ADDR
// ComStop ( flame ) ;
90193: LD_VAR 0 1
90197: PPUSH
90198: CALL_OW 141
// for i in list do
90202: LD_ADDR_VAR 0 6
90206: PUSH
90207: LD_VAR 0 13
90211: PUSH
90212: FOR_IN
90213: IFFALSE 90244
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
90215: LD_VAR 0 1
90219: PPUSH
90220: LD_VAR 0 6
90224: PUSH
90225: LD_INT 1
90227: ARRAY
90228: PPUSH
90229: LD_VAR 0 6
90233: PUSH
90234: LD_INT 2
90236: ARRAY
90237: PPUSH
90238: CALL_OW 176
90242: GO 90212
90244: POP
90245: POP
// repeat wait ( 0 0$1 ) ;
90246: LD_INT 35
90248: PPUSH
90249: CALL_OW 67
// task := GetTaskList ( flame ) ;
90253: LD_ADDR_VAR 0 14
90257: PUSH
90258: LD_VAR 0 1
90262: PPUSH
90263: CALL_OW 437
90267: ST_TO_ADDR
// if not task then
90268: LD_VAR 0 14
90272: NOT
90273: IFFALSE 90277
// exit ;
90275: GO 90411
// if task [ 1 ] [ 1 ] <> | then
90277: LD_VAR 0 14
90281: PUSH
90282: LD_INT 1
90284: ARRAY
90285: PUSH
90286: LD_INT 1
90288: ARRAY
90289: PUSH
90290: LD_STRING |
90292: NONEQUAL
90293: IFFALSE 90297
// exit ;
90295: GO 90411
// _x := task [ 1 ] [ 2 ] ;
90297: LD_ADDR_VAR 0 11
90301: PUSH
90302: LD_VAR 0 14
90306: PUSH
90307: LD_INT 1
90309: ARRAY
90310: PUSH
90311: LD_INT 2
90313: ARRAY
90314: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
90315: LD_ADDR_VAR 0 12
90319: PUSH
90320: LD_VAR 0 14
90324: PUSH
90325: LD_INT 1
90327: ARRAY
90328: PUSH
90329: LD_INT 3
90331: ARRAY
90332: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
90333: LD_VAR 0 11
90337: PPUSH
90338: LD_VAR 0 12
90342: PPUSH
90343: CALL_OW 351
90347: NOT
90348: PUSH
90349: LD_VAR 0 11
90353: PPUSH
90354: LD_VAR 0 12
90358: PPUSH
90359: CALL_OW 554
90363: NOT
90364: OR
90365: IFFALSE 90399
// begin task := Delete ( task , 1 ) ;
90367: LD_ADDR_VAR 0 14
90371: PUSH
90372: LD_VAR 0 14
90376: PPUSH
90377: LD_INT 1
90379: PPUSH
90380: CALL_OW 3
90384: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
90385: LD_VAR 0 1
90389: PPUSH
90390: LD_VAR 0 14
90394: PPUSH
90395: CALL_OW 446
// end ; until not HasTask ( flame ) ;
90399: LD_VAR 0 1
90403: PPUSH
90404: CALL_OW 314
90408: NOT
90409: IFFALSE 90246
// end ;
90411: LD_VAR 0 5
90415: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
90416: LD_EXP 125
90420: NOT
90421: IFFALSE 90471
90423: GO 90425
90425: DISABLE
// begin initHack := true ;
90426: LD_ADDR_EXP 125
90430: PUSH
90431: LD_INT 1
90433: ST_TO_ADDR
// hackTanks := [ ] ;
90434: LD_ADDR_EXP 126
90438: PUSH
90439: EMPTY
90440: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
90441: LD_ADDR_EXP 127
90445: PUSH
90446: EMPTY
90447: ST_TO_ADDR
// hackLimit := 3 ;
90448: LD_ADDR_EXP 128
90452: PUSH
90453: LD_INT 3
90455: ST_TO_ADDR
// hackDist := 12 ;
90456: LD_ADDR_EXP 129
90460: PUSH
90461: LD_INT 12
90463: ST_TO_ADDR
// hackCounter := [ ] ;
90464: LD_ADDR_EXP 130
90468: PUSH
90469: EMPTY
90470: ST_TO_ADDR
// end ;
90471: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
90472: LD_EXP 125
90476: PUSH
90477: LD_INT 34
90479: PUSH
90480: LD_INT 99
90482: PUSH
90483: EMPTY
90484: LIST
90485: LIST
90486: PPUSH
90487: CALL_OW 69
90491: AND
90492: IFFALSE 90745
90494: GO 90496
90496: DISABLE
90497: LD_INT 0
90499: PPUSH
90500: PPUSH
// begin enable ;
90501: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
90502: LD_ADDR_VAR 0 1
90506: PUSH
90507: LD_INT 34
90509: PUSH
90510: LD_INT 99
90512: PUSH
90513: EMPTY
90514: LIST
90515: LIST
90516: PPUSH
90517: CALL_OW 69
90521: PUSH
90522: FOR_IN
90523: IFFALSE 90743
// begin if not i in hackTanks then
90525: LD_VAR 0 1
90529: PUSH
90530: LD_EXP 126
90534: IN
90535: NOT
90536: IFFALSE 90619
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
90538: LD_ADDR_EXP 126
90542: PUSH
90543: LD_EXP 126
90547: PPUSH
90548: LD_EXP 126
90552: PUSH
90553: LD_INT 1
90555: PLUS
90556: PPUSH
90557: LD_VAR 0 1
90561: PPUSH
90562: CALL_OW 1
90566: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
90567: LD_ADDR_EXP 127
90571: PUSH
90572: LD_EXP 127
90576: PPUSH
90577: LD_EXP 127
90581: PUSH
90582: LD_INT 1
90584: PLUS
90585: PPUSH
90586: EMPTY
90587: PPUSH
90588: CALL_OW 1
90592: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
90593: LD_ADDR_EXP 130
90597: PUSH
90598: LD_EXP 130
90602: PPUSH
90603: LD_EXP 130
90607: PUSH
90608: LD_INT 1
90610: PLUS
90611: PPUSH
90612: EMPTY
90613: PPUSH
90614: CALL_OW 1
90618: ST_TO_ADDR
// end ; if not IsOk ( i ) then
90619: LD_VAR 0 1
90623: PPUSH
90624: CALL_OW 302
90628: NOT
90629: IFFALSE 90642
// begin HackUnlinkAll ( i ) ;
90631: LD_VAR 0 1
90635: PPUSH
90636: CALL 90748 0 1
// continue ;
90640: GO 90522
// end ; HackCheckCapturedStatus ( i ) ;
90642: LD_VAR 0 1
90646: PPUSH
90647: CALL 91191 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
90651: LD_ADDR_VAR 0 2
90655: PUSH
90656: LD_INT 81
90658: PUSH
90659: LD_VAR 0 1
90663: PPUSH
90664: CALL_OW 255
90668: PUSH
90669: EMPTY
90670: LIST
90671: LIST
90672: PUSH
90673: LD_INT 33
90675: PUSH
90676: LD_INT 3
90678: PUSH
90679: EMPTY
90680: LIST
90681: LIST
90682: PUSH
90683: LD_INT 91
90685: PUSH
90686: LD_VAR 0 1
90690: PUSH
90691: LD_EXP 129
90695: PUSH
90696: EMPTY
90697: LIST
90698: LIST
90699: LIST
90700: PUSH
90701: LD_INT 50
90703: PUSH
90704: EMPTY
90705: LIST
90706: PUSH
90707: EMPTY
90708: LIST
90709: LIST
90710: LIST
90711: LIST
90712: PPUSH
90713: CALL_OW 69
90717: ST_TO_ADDR
// if not tmp then
90718: LD_VAR 0 2
90722: NOT
90723: IFFALSE 90727
// continue ;
90725: GO 90522
// HackLink ( i , tmp ) ;
90727: LD_VAR 0 1
90731: PPUSH
90732: LD_VAR 0 2
90736: PPUSH
90737: CALL 90884 0 2
// end ;
90741: GO 90522
90743: POP
90744: POP
// end ;
90745: PPOPN 2
90747: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90748: LD_INT 0
90750: PPUSH
90751: PPUSH
90752: PPUSH
// if not hack in hackTanks then
90753: LD_VAR 0 1
90757: PUSH
90758: LD_EXP 126
90762: IN
90763: NOT
90764: IFFALSE 90768
// exit ;
90766: GO 90879
// index := GetElementIndex ( hackTanks , hack ) ;
90768: LD_ADDR_VAR 0 4
90772: PUSH
90773: LD_EXP 126
90777: PPUSH
90778: LD_VAR 0 1
90782: PPUSH
90783: CALL 34211 0 2
90787: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90788: LD_EXP 127
90792: PUSH
90793: LD_VAR 0 4
90797: ARRAY
90798: IFFALSE 90879
// begin for i in hackTanksCaptured [ index ] do
90800: LD_ADDR_VAR 0 3
90804: PUSH
90805: LD_EXP 127
90809: PUSH
90810: LD_VAR 0 4
90814: ARRAY
90815: PUSH
90816: FOR_IN
90817: IFFALSE 90843
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90819: LD_VAR 0 3
90823: PUSH
90824: LD_INT 1
90826: ARRAY
90827: PPUSH
90828: LD_VAR 0 3
90832: PUSH
90833: LD_INT 2
90835: ARRAY
90836: PPUSH
90837: CALL_OW 235
90841: GO 90816
90843: POP
90844: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
90845: LD_ADDR_EXP 127
90849: PUSH
90850: LD_EXP 127
90854: PPUSH
90855: LD_VAR 0 4
90859: PPUSH
90860: EMPTY
90861: PPUSH
90862: CALL_OW 1
90866: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
90867: LD_VAR 0 1
90871: PPUSH
90872: LD_INT 0
90874: PPUSH
90875: CALL_OW 505
// end ; end ;
90879: LD_VAR 0 2
90883: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
90884: LD_INT 0
90886: PPUSH
90887: PPUSH
90888: PPUSH
// if not hack in hackTanks or not vehicles then
90889: LD_VAR 0 1
90893: PUSH
90894: LD_EXP 126
90898: IN
90899: NOT
90900: PUSH
90901: LD_VAR 0 2
90905: NOT
90906: OR
90907: IFFALSE 90911
// exit ;
90909: GO 91186
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
90911: LD_ADDR_VAR 0 2
90915: PUSH
90916: LD_VAR 0 1
90920: PPUSH
90921: LD_VAR 0 2
90925: PPUSH
90926: LD_INT 1
90928: PPUSH
90929: LD_INT 1
90931: PPUSH
90932: CALL 34861 0 4
90936: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
90937: LD_ADDR_VAR 0 5
90941: PUSH
90942: LD_EXP 126
90946: PPUSH
90947: LD_VAR 0 1
90951: PPUSH
90952: CALL 34211 0 2
90956: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
90957: LD_EXP 127
90961: PUSH
90962: LD_VAR 0 5
90966: ARRAY
90967: PUSH
90968: LD_EXP 128
90972: LESS
90973: IFFALSE 91162
// begin for i := 1 to vehicles do
90975: LD_ADDR_VAR 0 4
90979: PUSH
90980: DOUBLE
90981: LD_INT 1
90983: DEC
90984: ST_TO_ADDR
90985: LD_VAR 0 2
90989: PUSH
90990: FOR_TO
90991: IFFALSE 91160
// begin if hackTanksCaptured [ index ] = hackLimit then
90993: LD_EXP 127
90997: PUSH
90998: LD_VAR 0 5
91002: ARRAY
91003: PUSH
91004: LD_EXP 128
91008: EQUAL
91009: IFFALSE 91013
// break ;
91011: GO 91160
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
91013: LD_ADDR_EXP 130
91017: PUSH
91018: LD_EXP 130
91022: PPUSH
91023: LD_VAR 0 5
91027: PPUSH
91028: LD_EXP 130
91032: PUSH
91033: LD_VAR 0 5
91037: ARRAY
91038: PUSH
91039: LD_INT 1
91041: PLUS
91042: PPUSH
91043: CALL_OW 1
91047: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
91048: LD_ADDR_EXP 127
91052: PUSH
91053: LD_EXP 127
91057: PPUSH
91058: LD_VAR 0 5
91062: PUSH
91063: LD_EXP 127
91067: PUSH
91068: LD_VAR 0 5
91072: ARRAY
91073: PUSH
91074: LD_INT 1
91076: PLUS
91077: PUSH
91078: EMPTY
91079: LIST
91080: LIST
91081: PPUSH
91082: LD_VAR 0 2
91086: PUSH
91087: LD_VAR 0 4
91091: ARRAY
91092: PUSH
91093: LD_VAR 0 2
91097: PUSH
91098: LD_VAR 0 4
91102: ARRAY
91103: PPUSH
91104: CALL_OW 255
91108: PUSH
91109: EMPTY
91110: LIST
91111: LIST
91112: PPUSH
91113: CALL 34426 0 3
91117: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
91118: LD_VAR 0 2
91122: PUSH
91123: LD_VAR 0 4
91127: ARRAY
91128: PPUSH
91129: LD_VAR 0 1
91133: PPUSH
91134: CALL_OW 255
91138: PPUSH
91139: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
91143: LD_VAR 0 2
91147: PUSH
91148: LD_VAR 0 4
91152: ARRAY
91153: PPUSH
91154: CALL_OW 141
// end ;
91158: GO 90990
91160: POP
91161: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91162: LD_VAR 0 1
91166: PPUSH
91167: LD_EXP 127
91171: PUSH
91172: LD_VAR 0 5
91176: ARRAY
91177: PUSH
91178: LD_INT 0
91180: PLUS
91181: PPUSH
91182: CALL_OW 505
// end ;
91186: LD_VAR 0 3
91190: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
91191: LD_INT 0
91193: PPUSH
91194: PPUSH
91195: PPUSH
91196: PPUSH
// if not hack in hackTanks then
91197: LD_VAR 0 1
91201: PUSH
91202: LD_EXP 126
91206: IN
91207: NOT
91208: IFFALSE 91212
// exit ;
91210: GO 91452
// index := GetElementIndex ( hackTanks , hack ) ;
91212: LD_ADDR_VAR 0 4
91216: PUSH
91217: LD_EXP 126
91221: PPUSH
91222: LD_VAR 0 1
91226: PPUSH
91227: CALL 34211 0 2
91231: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
91232: LD_ADDR_VAR 0 3
91236: PUSH
91237: DOUBLE
91238: LD_EXP 127
91242: PUSH
91243: LD_VAR 0 4
91247: ARRAY
91248: INC
91249: ST_TO_ADDR
91250: LD_INT 1
91252: PUSH
91253: FOR_DOWNTO
91254: IFFALSE 91426
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
91256: LD_ADDR_VAR 0 5
91260: PUSH
91261: LD_EXP 127
91265: PUSH
91266: LD_VAR 0 4
91270: ARRAY
91271: PUSH
91272: LD_VAR 0 3
91276: ARRAY
91277: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
91278: LD_VAR 0 5
91282: PUSH
91283: LD_INT 1
91285: ARRAY
91286: PPUSH
91287: CALL_OW 302
91291: NOT
91292: PUSH
91293: LD_VAR 0 5
91297: PUSH
91298: LD_INT 1
91300: ARRAY
91301: PPUSH
91302: CALL_OW 255
91306: PUSH
91307: LD_VAR 0 1
91311: PPUSH
91312: CALL_OW 255
91316: NONEQUAL
91317: OR
91318: IFFALSE 91424
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
91320: LD_VAR 0 5
91324: PUSH
91325: LD_INT 1
91327: ARRAY
91328: PPUSH
91329: CALL_OW 305
91333: PUSH
91334: LD_VAR 0 5
91338: PUSH
91339: LD_INT 1
91341: ARRAY
91342: PPUSH
91343: CALL_OW 255
91347: PUSH
91348: LD_VAR 0 1
91352: PPUSH
91353: CALL_OW 255
91357: EQUAL
91358: AND
91359: IFFALSE 91383
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
91361: LD_VAR 0 5
91365: PUSH
91366: LD_INT 1
91368: ARRAY
91369: PPUSH
91370: LD_VAR 0 5
91374: PUSH
91375: LD_INT 2
91377: ARRAY
91378: PPUSH
91379: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
91383: LD_ADDR_EXP 127
91387: PUSH
91388: LD_EXP 127
91392: PPUSH
91393: LD_VAR 0 4
91397: PPUSH
91398: LD_EXP 127
91402: PUSH
91403: LD_VAR 0 4
91407: ARRAY
91408: PPUSH
91409: LD_VAR 0 3
91413: PPUSH
91414: CALL_OW 3
91418: PPUSH
91419: CALL_OW 1
91423: ST_TO_ADDR
// end ; end ;
91424: GO 91253
91426: POP
91427: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
91428: LD_VAR 0 1
91432: PPUSH
91433: LD_EXP 127
91437: PUSH
91438: LD_VAR 0 4
91442: ARRAY
91443: PUSH
91444: LD_INT 0
91446: PLUS
91447: PPUSH
91448: CALL_OW 505
// end ;
91452: LD_VAR 0 2
91456: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
91457: LD_INT 0
91459: PPUSH
91460: PPUSH
91461: PPUSH
91462: PPUSH
// if not hack in hackTanks then
91463: LD_VAR 0 1
91467: PUSH
91468: LD_EXP 126
91472: IN
91473: NOT
91474: IFFALSE 91478
// exit ;
91476: GO 91563
// index := GetElementIndex ( hackTanks , hack ) ;
91478: LD_ADDR_VAR 0 5
91482: PUSH
91483: LD_EXP 126
91487: PPUSH
91488: LD_VAR 0 1
91492: PPUSH
91493: CALL 34211 0 2
91497: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
91498: LD_ADDR_VAR 0 4
91502: PUSH
91503: DOUBLE
91504: LD_INT 1
91506: DEC
91507: ST_TO_ADDR
91508: LD_EXP 127
91512: PUSH
91513: LD_VAR 0 5
91517: ARRAY
91518: PUSH
91519: FOR_TO
91520: IFFALSE 91561
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
91522: LD_EXP 127
91526: PUSH
91527: LD_VAR 0 5
91531: ARRAY
91532: PUSH
91533: LD_VAR 0 4
91537: ARRAY
91538: PUSH
91539: LD_INT 1
91541: ARRAY
91542: PUSH
91543: LD_VAR 0 2
91547: EQUAL
91548: IFFALSE 91559
// KillUnit ( vehicle ) ;
91550: LD_VAR 0 2
91554: PPUSH
91555: CALL_OW 66
91559: GO 91519
91561: POP
91562: POP
// end ;
91563: LD_VAR 0 3
91567: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
91568: LD_EXP 131
91572: NOT
91573: IFFALSE 91608
91575: GO 91577
91577: DISABLE
// begin initMiner := true ;
91578: LD_ADDR_EXP 131
91582: PUSH
91583: LD_INT 1
91585: ST_TO_ADDR
// minersList := [ ] ;
91586: LD_ADDR_EXP 132
91590: PUSH
91591: EMPTY
91592: ST_TO_ADDR
// minerMinesList := [ ] ;
91593: LD_ADDR_EXP 133
91597: PUSH
91598: EMPTY
91599: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
91600: LD_ADDR_EXP 134
91604: PUSH
91605: LD_INT 5
91607: ST_TO_ADDR
// end ;
91608: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
91609: LD_EXP 131
91613: PUSH
91614: LD_INT 34
91616: PUSH
91617: LD_INT 81
91619: PUSH
91620: EMPTY
91621: LIST
91622: LIST
91623: PPUSH
91624: CALL_OW 69
91628: AND
91629: IFFALSE 92090
91631: GO 91633
91633: DISABLE
91634: LD_INT 0
91636: PPUSH
91637: PPUSH
91638: PPUSH
91639: PPUSH
// begin enable ;
91640: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
91641: LD_ADDR_VAR 0 1
91645: PUSH
91646: LD_INT 34
91648: PUSH
91649: LD_INT 81
91651: PUSH
91652: EMPTY
91653: LIST
91654: LIST
91655: PPUSH
91656: CALL_OW 69
91660: PUSH
91661: FOR_IN
91662: IFFALSE 91734
// begin if not i in minersList then
91664: LD_VAR 0 1
91668: PUSH
91669: LD_EXP 132
91673: IN
91674: NOT
91675: IFFALSE 91732
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91677: LD_ADDR_EXP 132
91681: PUSH
91682: LD_EXP 132
91686: PPUSH
91687: LD_EXP 132
91691: PUSH
91692: LD_INT 1
91694: PLUS
91695: PPUSH
91696: LD_VAR 0 1
91700: PPUSH
91701: CALL_OW 1
91705: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91706: LD_ADDR_EXP 133
91710: PUSH
91711: LD_EXP 133
91715: PPUSH
91716: LD_EXP 133
91720: PUSH
91721: LD_INT 1
91723: PLUS
91724: PPUSH
91725: EMPTY
91726: PPUSH
91727: CALL_OW 1
91731: ST_TO_ADDR
// end end ;
91732: GO 91661
91734: POP
91735: POP
// for i := minerMinesList downto 1 do
91736: LD_ADDR_VAR 0 1
91740: PUSH
91741: DOUBLE
91742: LD_EXP 133
91746: INC
91747: ST_TO_ADDR
91748: LD_INT 1
91750: PUSH
91751: FOR_DOWNTO
91752: IFFALSE 92088
// begin if IsLive ( minersList [ i ] ) then
91754: LD_EXP 132
91758: PUSH
91759: LD_VAR 0 1
91763: ARRAY
91764: PPUSH
91765: CALL_OW 300
91769: IFFALSE 91797
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
91771: LD_EXP 132
91775: PUSH
91776: LD_VAR 0 1
91780: ARRAY
91781: PPUSH
91782: LD_EXP 133
91786: PUSH
91787: LD_VAR 0 1
91791: ARRAY
91792: PPUSH
91793: CALL_OW 505
// if not minerMinesList [ i ] then
91797: LD_EXP 133
91801: PUSH
91802: LD_VAR 0 1
91806: ARRAY
91807: NOT
91808: IFFALSE 91812
// continue ;
91810: GO 91751
// for j := minerMinesList [ i ] downto 1 do
91812: LD_ADDR_VAR 0 2
91816: PUSH
91817: DOUBLE
91818: LD_EXP 133
91822: PUSH
91823: LD_VAR 0 1
91827: ARRAY
91828: INC
91829: ST_TO_ADDR
91830: LD_INT 1
91832: PUSH
91833: FOR_DOWNTO
91834: IFFALSE 92084
// begin side := GetSide ( minersList [ i ] ) ;
91836: LD_ADDR_VAR 0 3
91840: PUSH
91841: LD_EXP 132
91845: PUSH
91846: LD_VAR 0 1
91850: ARRAY
91851: PPUSH
91852: CALL_OW 255
91856: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
91857: LD_ADDR_VAR 0 4
91861: PUSH
91862: LD_EXP 133
91866: PUSH
91867: LD_VAR 0 1
91871: ARRAY
91872: PUSH
91873: LD_VAR 0 2
91877: ARRAY
91878: PUSH
91879: LD_INT 1
91881: ARRAY
91882: PPUSH
91883: LD_EXP 133
91887: PUSH
91888: LD_VAR 0 1
91892: ARRAY
91893: PUSH
91894: LD_VAR 0 2
91898: ARRAY
91899: PUSH
91900: LD_INT 2
91902: ARRAY
91903: PPUSH
91904: CALL_OW 428
91908: ST_TO_ADDR
// if not tmp then
91909: LD_VAR 0 4
91913: NOT
91914: IFFALSE 91918
// continue ;
91916: GO 91833
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
91918: LD_VAR 0 4
91922: PUSH
91923: LD_INT 81
91925: PUSH
91926: LD_VAR 0 3
91930: PUSH
91931: EMPTY
91932: LIST
91933: LIST
91934: PPUSH
91935: CALL_OW 69
91939: IN
91940: PUSH
91941: LD_EXP 133
91945: PUSH
91946: LD_VAR 0 1
91950: ARRAY
91951: PUSH
91952: LD_VAR 0 2
91956: ARRAY
91957: PUSH
91958: LD_INT 1
91960: ARRAY
91961: PPUSH
91962: LD_EXP 133
91966: PUSH
91967: LD_VAR 0 1
91971: ARRAY
91972: PUSH
91973: LD_VAR 0 2
91977: ARRAY
91978: PUSH
91979: LD_INT 2
91981: ARRAY
91982: PPUSH
91983: CALL_OW 458
91987: AND
91988: IFFALSE 92082
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
91990: LD_EXP 133
91994: PUSH
91995: LD_VAR 0 1
91999: ARRAY
92000: PUSH
92001: LD_VAR 0 2
92005: ARRAY
92006: PUSH
92007: LD_INT 1
92009: ARRAY
92010: PPUSH
92011: LD_EXP 133
92015: PUSH
92016: LD_VAR 0 1
92020: ARRAY
92021: PUSH
92022: LD_VAR 0 2
92026: ARRAY
92027: PUSH
92028: LD_INT 2
92030: ARRAY
92031: PPUSH
92032: LD_VAR 0 3
92036: PPUSH
92037: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
92041: LD_ADDR_EXP 133
92045: PUSH
92046: LD_EXP 133
92050: PPUSH
92051: LD_VAR 0 1
92055: PPUSH
92056: LD_EXP 133
92060: PUSH
92061: LD_VAR 0 1
92065: ARRAY
92066: PPUSH
92067: LD_VAR 0 2
92071: PPUSH
92072: CALL_OW 3
92076: PPUSH
92077: CALL_OW 1
92081: ST_TO_ADDR
// end ; end ;
92082: GO 91833
92084: POP
92085: POP
// end ;
92086: GO 91751
92088: POP
92089: POP
// end ;
92090: PPOPN 4
92092: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
92093: LD_INT 0
92095: PPUSH
92096: PPUSH
// result := false ;
92097: LD_ADDR_VAR 0 4
92101: PUSH
92102: LD_INT 0
92104: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
92105: LD_VAR 0 1
92109: PPUSH
92110: CALL_OW 264
92114: PUSH
92115: LD_INT 81
92117: EQUAL
92118: NOT
92119: IFFALSE 92123
// exit ;
92121: GO 92363
// index := GetElementIndex ( minersList , unit ) ;
92123: LD_ADDR_VAR 0 5
92127: PUSH
92128: LD_EXP 132
92132: PPUSH
92133: LD_VAR 0 1
92137: PPUSH
92138: CALL 34211 0 2
92142: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
92143: LD_EXP 133
92147: PUSH
92148: LD_VAR 0 5
92152: ARRAY
92153: PUSH
92154: LD_EXP 134
92158: GREATEREQUAL
92159: IFFALSE 92163
// exit ;
92161: GO 92363
// ComMoveXY ( unit , x , y ) ;
92163: LD_VAR 0 1
92167: PPUSH
92168: LD_VAR 0 2
92172: PPUSH
92173: LD_VAR 0 3
92177: PPUSH
92178: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92182: LD_INT 35
92184: PPUSH
92185: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
92189: LD_VAR 0 1
92193: PPUSH
92194: LD_VAR 0 2
92198: PPUSH
92199: LD_VAR 0 3
92203: PPUSH
92204: CALL 65972 0 3
92208: NOT
92209: PUSH
92210: LD_VAR 0 1
92214: PPUSH
92215: CALL_OW 314
92219: AND
92220: IFFALSE 92224
// exit ;
92222: GO 92363
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
92224: LD_VAR 0 2
92228: PPUSH
92229: LD_VAR 0 3
92233: PPUSH
92234: CALL_OW 428
92238: PUSH
92239: LD_VAR 0 1
92243: EQUAL
92244: PUSH
92245: LD_VAR 0 1
92249: PPUSH
92250: CALL_OW 314
92254: NOT
92255: AND
92256: IFFALSE 92182
// PlaySoundXY ( x , y , PlantMine ) ;
92258: LD_VAR 0 2
92262: PPUSH
92263: LD_VAR 0 3
92267: PPUSH
92268: LD_STRING PlantMine
92270: PPUSH
92271: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
92275: LD_VAR 0 2
92279: PPUSH
92280: LD_VAR 0 3
92284: PPUSH
92285: LD_VAR 0 1
92289: PPUSH
92290: CALL_OW 255
92294: PPUSH
92295: LD_INT 0
92297: PPUSH
92298: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
92302: LD_ADDR_EXP 133
92306: PUSH
92307: LD_EXP 133
92311: PPUSH
92312: LD_VAR 0 5
92316: PUSH
92317: LD_EXP 133
92321: PUSH
92322: LD_VAR 0 5
92326: ARRAY
92327: PUSH
92328: LD_INT 1
92330: PLUS
92331: PUSH
92332: EMPTY
92333: LIST
92334: LIST
92335: PPUSH
92336: LD_VAR 0 2
92340: PUSH
92341: LD_VAR 0 3
92345: PUSH
92346: EMPTY
92347: LIST
92348: LIST
92349: PPUSH
92350: CALL 34426 0 3
92354: ST_TO_ADDR
// result := true ;
92355: LD_ADDR_VAR 0 4
92359: PUSH
92360: LD_INT 1
92362: ST_TO_ADDR
// end ;
92363: LD_VAR 0 4
92367: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
92368: LD_INT 0
92370: PPUSH
92371: PPUSH
92372: PPUSH
// if not unit in minersList then
92373: LD_VAR 0 1
92377: PUSH
92378: LD_EXP 132
92382: IN
92383: NOT
92384: IFFALSE 92388
// exit ;
92386: GO 92780
// index := GetElementIndex ( minersList , unit ) ;
92388: LD_ADDR_VAR 0 6
92392: PUSH
92393: LD_EXP 132
92397: PPUSH
92398: LD_VAR 0 1
92402: PPUSH
92403: CALL 34211 0 2
92407: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
92408: LD_ADDR_VAR 0 5
92412: PUSH
92413: DOUBLE
92414: LD_EXP 133
92418: PUSH
92419: LD_VAR 0 6
92423: ARRAY
92424: INC
92425: ST_TO_ADDR
92426: LD_INT 1
92428: PUSH
92429: FOR_DOWNTO
92430: IFFALSE 92591
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
92432: LD_EXP 133
92436: PUSH
92437: LD_VAR 0 6
92441: ARRAY
92442: PUSH
92443: LD_VAR 0 5
92447: ARRAY
92448: PUSH
92449: LD_INT 1
92451: ARRAY
92452: PUSH
92453: LD_VAR 0 2
92457: EQUAL
92458: PUSH
92459: LD_EXP 133
92463: PUSH
92464: LD_VAR 0 6
92468: ARRAY
92469: PUSH
92470: LD_VAR 0 5
92474: ARRAY
92475: PUSH
92476: LD_INT 2
92478: ARRAY
92479: PUSH
92480: LD_VAR 0 3
92484: EQUAL
92485: AND
92486: IFFALSE 92589
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92488: LD_EXP 133
92492: PUSH
92493: LD_VAR 0 6
92497: ARRAY
92498: PUSH
92499: LD_VAR 0 5
92503: ARRAY
92504: PUSH
92505: LD_INT 1
92507: ARRAY
92508: PPUSH
92509: LD_EXP 133
92513: PUSH
92514: LD_VAR 0 6
92518: ARRAY
92519: PUSH
92520: LD_VAR 0 5
92524: ARRAY
92525: PUSH
92526: LD_INT 2
92528: ARRAY
92529: PPUSH
92530: LD_VAR 0 1
92534: PPUSH
92535: CALL_OW 255
92539: PPUSH
92540: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92544: LD_ADDR_EXP 133
92548: PUSH
92549: LD_EXP 133
92553: PPUSH
92554: LD_VAR 0 6
92558: PPUSH
92559: LD_EXP 133
92563: PUSH
92564: LD_VAR 0 6
92568: ARRAY
92569: PPUSH
92570: LD_VAR 0 5
92574: PPUSH
92575: CALL_OW 3
92579: PPUSH
92580: CALL_OW 1
92584: ST_TO_ADDR
// exit ;
92585: POP
92586: POP
92587: GO 92780
// end ; end ;
92589: GO 92429
92591: POP
92592: POP
// for i := minerMinesList [ index ] downto 1 do
92593: LD_ADDR_VAR 0 5
92597: PUSH
92598: DOUBLE
92599: LD_EXP 133
92603: PUSH
92604: LD_VAR 0 6
92608: ARRAY
92609: INC
92610: ST_TO_ADDR
92611: LD_INT 1
92613: PUSH
92614: FOR_DOWNTO
92615: IFFALSE 92778
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
92617: LD_EXP 133
92621: PUSH
92622: LD_VAR 0 6
92626: ARRAY
92627: PUSH
92628: LD_VAR 0 5
92632: ARRAY
92633: PUSH
92634: LD_INT 1
92636: ARRAY
92637: PPUSH
92638: LD_EXP 133
92642: PUSH
92643: LD_VAR 0 6
92647: ARRAY
92648: PUSH
92649: LD_VAR 0 5
92653: ARRAY
92654: PUSH
92655: LD_INT 2
92657: ARRAY
92658: PPUSH
92659: LD_VAR 0 2
92663: PPUSH
92664: LD_VAR 0 3
92668: PPUSH
92669: CALL_OW 298
92673: PUSH
92674: LD_INT 6
92676: LESS
92677: IFFALSE 92776
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92679: LD_EXP 133
92683: PUSH
92684: LD_VAR 0 6
92688: ARRAY
92689: PUSH
92690: LD_VAR 0 5
92694: ARRAY
92695: PUSH
92696: LD_INT 1
92698: ARRAY
92699: PPUSH
92700: LD_EXP 133
92704: PUSH
92705: LD_VAR 0 6
92709: ARRAY
92710: PUSH
92711: LD_VAR 0 5
92715: ARRAY
92716: PUSH
92717: LD_INT 2
92719: ARRAY
92720: PPUSH
92721: LD_VAR 0 1
92725: PPUSH
92726: CALL_OW 255
92730: PPUSH
92731: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92735: LD_ADDR_EXP 133
92739: PUSH
92740: LD_EXP 133
92744: PPUSH
92745: LD_VAR 0 6
92749: PPUSH
92750: LD_EXP 133
92754: PUSH
92755: LD_VAR 0 6
92759: ARRAY
92760: PPUSH
92761: LD_VAR 0 5
92765: PPUSH
92766: CALL_OW 3
92770: PPUSH
92771: CALL_OW 1
92775: ST_TO_ADDR
// end ; end ;
92776: GO 92614
92778: POP
92779: POP
// end ;
92780: LD_VAR 0 4
92784: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
92785: LD_INT 0
92787: PPUSH
92788: PPUSH
92789: PPUSH
92790: PPUSH
92791: PPUSH
92792: PPUSH
92793: PPUSH
92794: PPUSH
92795: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
92796: LD_VAR 0 1
92800: PPUSH
92801: CALL_OW 264
92805: PUSH
92806: LD_INT 81
92808: EQUAL
92809: NOT
92810: PUSH
92811: LD_VAR 0 1
92815: PUSH
92816: LD_EXP 132
92820: IN
92821: NOT
92822: OR
92823: IFFALSE 92827
// exit ;
92825: GO 93149
// index := GetElementIndex ( minersList , unit ) ;
92827: LD_ADDR_VAR 0 6
92831: PUSH
92832: LD_EXP 132
92836: PPUSH
92837: LD_VAR 0 1
92841: PPUSH
92842: CALL 34211 0 2
92846: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
92847: LD_ADDR_VAR 0 8
92851: PUSH
92852: LD_EXP 134
92856: PUSH
92857: LD_EXP 133
92861: PUSH
92862: LD_VAR 0 6
92866: ARRAY
92867: MINUS
92868: ST_TO_ADDR
// if not minesFreeAmount then
92869: LD_VAR 0 8
92873: NOT
92874: IFFALSE 92878
// exit ;
92876: GO 93149
// tmp := [ ] ;
92878: LD_ADDR_VAR 0 7
92882: PUSH
92883: EMPTY
92884: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
92885: LD_ADDR_VAR 0 5
92889: PUSH
92890: DOUBLE
92891: LD_INT 1
92893: DEC
92894: ST_TO_ADDR
92895: LD_VAR 0 8
92899: PUSH
92900: FOR_TO
92901: IFFALSE 93096
// begin _d := rand ( 0 , 5 ) ;
92903: LD_ADDR_VAR 0 11
92907: PUSH
92908: LD_INT 0
92910: PPUSH
92911: LD_INT 5
92913: PPUSH
92914: CALL_OW 12
92918: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
92919: LD_ADDR_VAR 0 12
92923: PUSH
92924: LD_INT 2
92926: PPUSH
92927: LD_INT 6
92929: PPUSH
92930: CALL_OW 12
92934: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
92935: LD_ADDR_VAR 0 9
92939: PUSH
92940: LD_VAR 0 2
92944: PPUSH
92945: LD_VAR 0 11
92949: PPUSH
92950: LD_VAR 0 12
92954: PPUSH
92955: CALL_OW 272
92959: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
92960: LD_ADDR_VAR 0 10
92964: PUSH
92965: LD_VAR 0 3
92969: PPUSH
92970: LD_VAR 0 11
92974: PPUSH
92975: LD_VAR 0 12
92979: PPUSH
92980: CALL_OW 273
92984: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
92985: LD_VAR 0 9
92989: PPUSH
92990: LD_VAR 0 10
92994: PPUSH
92995: CALL_OW 488
92999: PUSH
93000: LD_VAR 0 9
93004: PUSH
93005: LD_VAR 0 10
93009: PUSH
93010: EMPTY
93011: LIST
93012: LIST
93013: PUSH
93014: LD_VAR 0 7
93018: IN
93019: NOT
93020: AND
93021: PUSH
93022: LD_VAR 0 9
93026: PPUSH
93027: LD_VAR 0 10
93031: PPUSH
93032: CALL_OW 458
93036: NOT
93037: AND
93038: IFFALSE 93080
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
93040: LD_ADDR_VAR 0 7
93044: PUSH
93045: LD_VAR 0 7
93049: PPUSH
93050: LD_VAR 0 7
93054: PUSH
93055: LD_INT 1
93057: PLUS
93058: PPUSH
93059: LD_VAR 0 9
93063: PUSH
93064: LD_VAR 0 10
93068: PUSH
93069: EMPTY
93070: LIST
93071: LIST
93072: PPUSH
93073: CALL_OW 1
93077: ST_TO_ADDR
93078: GO 93094
// i := i - 1 ;
93080: LD_ADDR_VAR 0 5
93084: PUSH
93085: LD_VAR 0 5
93089: PUSH
93090: LD_INT 1
93092: MINUS
93093: ST_TO_ADDR
// end ;
93094: GO 92900
93096: POP
93097: POP
// for i in tmp do
93098: LD_ADDR_VAR 0 5
93102: PUSH
93103: LD_VAR 0 7
93107: PUSH
93108: FOR_IN
93109: IFFALSE 93147
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
93111: LD_VAR 0 1
93115: PPUSH
93116: LD_VAR 0 5
93120: PUSH
93121: LD_INT 1
93123: ARRAY
93124: PPUSH
93125: LD_VAR 0 5
93129: PUSH
93130: LD_INT 2
93132: ARRAY
93133: PPUSH
93134: CALL 92093 0 3
93138: NOT
93139: IFFALSE 93145
// exit ;
93141: POP
93142: POP
93143: GO 93149
93145: GO 93108
93147: POP
93148: POP
// end ;
93149: LD_VAR 0 4
93153: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
93154: LD_INT 0
93156: PPUSH
93157: PPUSH
93158: PPUSH
93159: PPUSH
93160: PPUSH
93161: PPUSH
93162: PPUSH
93163: PPUSH
93164: PPUSH
// if GetClass ( unit ) <> class_sniper then
93165: LD_VAR 0 1
93169: PPUSH
93170: CALL_OW 257
93174: PUSH
93175: LD_INT 5
93177: NONEQUAL
93178: IFFALSE 93182
// exit ;
93180: GO 93648
// dist := 8 ;
93182: LD_ADDR_VAR 0 5
93186: PUSH
93187: LD_INT 8
93189: ST_TO_ADDR
// viewRange := 12 ;
93190: LD_ADDR_VAR 0 8
93194: PUSH
93195: LD_INT 12
93197: ST_TO_ADDR
// side := GetSide ( unit ) ;
93198: LD_ADDR_VAR 0 6
93202: PUSH
93203: LD_VAR 0 1
93207: PPUSH
93208: CALL_OW 255
93212: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
93213: LD_INT 61
93215: PPUSH
93216: LD_VAR 0 6
93220: PPUSH
93221: CALL_OW 321
93225: PUSH
93226: LD_INT 2
93228: EQUAL
93229: IFFALSE 93239
// viewRange := 16 ;
93231: LD_ADDR_VAR 0 8
93235: PUSH
93236: LD_INT 16
93238: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
93239: LD_VAR 0 1
93243: PPUSH
93244: LD_VAR 0 2
93248: PPUSH
93249: LD_VAR 0 3
93253: PPUSH
93254: CALL_OW 297
93258: PUSH
93259: LD_VAR 0 5
93263: GREATER
93264: IFFALSE 93343
// begin ComMoveXY ( unit , x , y ) ;
93266: LD_VAR 0 1
93270: PPUSH
93271: LD_VAR 0 2
93275: PPUSH
93276: LD_VAR 0 3
93280: PPUSH
93281: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93285: LD_INT 35
93287: PPUSH
93288: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
93292: LD_VAR 0 1
93296: PPUSH
93297: LD_VAR 0 2
93301: PPUSH
93302: LD_VAR 0 3
93306: PPUSH
93307: CALL 65972 0 3
93311: NOT
93312: IFFALSE 93316
// exit ;
93314: GO 93648
// until GetDistUnitXY ( unit , x , y ) < dist ;
93316: LD_VAR 0 1
93320: PPUSH
93321: LD_VAR 0 2
93325: PPUSH
93326: LD_VAR 0 3
93330: PPUSH
93331: CALL_OW 297
93335: PUSH
93336: LD_VAR 0 5
93340: LESS
93341: IFFALSE 93285
// end ; ComTurnXY ( unit , x , y ) ;
93343: LD_VAR 0 1
93347: PPUSH
93348: LD_VAR 0 2
93352: PPUSH
93353: LD_VAR 0 3
93357: PPUSH
93358: CALL_OW 118
// repeat if Multiplayer then
93362: LD_OWVAR 4
93366: IFFALSE 93377
// wait ( 35 ) else
93368: LD_INT 35
93370: PPUSH
93371: CALL_OW 67
93375: GO 93384
// wait ( 5 ) ;
93377: LD_INT 5
93379: PPUSH
93380: CALL_OW 67
// _d := GetDir ( unit ) ;
93384: LD_ADDR_VAR 0 11
93388: PUSH
93389: LD_VAR 0 1
93393: PPUSH
93394: CALL_OW 254
93398: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
93399: LD_ADDR_VAR 0 7
93403: PUSH
93404: LD_VAR 0 1
93408: PPUSH
93409: CALL_OW 250
93413: PPUSH
93414: LD_VAR 0 1
93418: PPUSH
93419: CALL_OW 251
93423: PPUSH
93424: LD_VAR 0 2
93428: PPUSH
93429: LD_VAR 0 3
93433: PPUSH
93434: CALL 68580 0 4
93438: ST_TO_ADDR
// until dir = _d ;
93439: LD_VAR 0 7
93443: PUSH
93444: LD_VAR 0 11
93448: EQUAL
93449: IFFALSE 93362
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
93451: LD_ADDR_VAR 0 9
93455: PUSH
93456: LD_VAR 0 1
93460: PPUSH
93461: CALL_OW 250
93465: PPUSH
93466: LD_VAR 0 7
93470: PPUSH
93471: LD_VAR 0 5
93475: PPUSH
93476: CALL_OW 272
93480: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
93481: LD_ADDR_VAR 0 10
93485: PUSH
93486: LD_VAR 0 1
93490: PPUSH
93491: CALL_OW 251
93495: PPUSH
93496: LD_VAR 0 7
93500: PPUSH
93501: LD_VAR 0 5
93505: PPUSH
93506: CALL_OW 273
93510: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93511: LD_VAR 0 9
93515: PPUSH
93516: LD_VAR 0 10
93520: PPUSH
93521: CALL_OW 488
93525: NOT
93526: IFFALSE 93530
// exit ;
93528: GO 93648
// ComAnimCustom ( unit , 1 ) ;
93530: LD_VAR 0 1
93534: PPUSH
93535: LD_INT 1
93537: PPUSH
93538: CALL_OW 592
// p := 0 ;
93542: LD_ADDR_VAR 0 12
93546: PUSH
93547: LD_INT 0
93549: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
93550: LD_VAR 0 9
93554: PPUSH
93555: LD_VAR 0 10
93559: PPUSH
93560: LD_VAR 0 6
93564: PPUSH
93565: LD_VAR 0 8
93569: PPUSH
93570: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
93574: LD_INT 35
93576: PPUSH
93577: CALL_OW 67
// p := Inc ( p ) ;
93581: LD_ADDR_VAR 0 12
93585: PUSH
93586: LD_VAR 0 12
93590: PPUSH
93591: CALL 68536 0 1
93595: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
93596: LD_VAR 0 12
93600: PUSH
93601: LD_INT 3
93603: EQUAL
93604: PUSH
93605: LD_VAR 0 1
93609: PPUSH
93610: CALL_OW 302
93614: NOT
93615: OR
93616: PUSH
93617: LD_VAR 0 1
93621: PPUSH
93622: CALL_OW 301
93626: OR
93627: IFFALSE 93574
// RemoveSeeing ( _x , _y , side ) ;
93629: LD_VAR 0 9
93633: PPUSH
93634: LD_VAR 0 10
93638: PPUSH
93639: LD_VAR 0 6
93643: PPUSH
93644: CALL_OW 331
// end ; end_of_file
93648: LD_VAR 0 4
93652: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
93653: LD_VAR 0 1
93657: PPUSH
93658: LD_VAR 0 2
93662: PPUSH
93663: LD_VAR 0 3
93667: PPUSH
93668: LD_VAR 0 4
93672: PPUSH
93673: LD_VAR 0 5
93677: PPUSH
93678: LD_VAR 0 6
93682: PPUSH
93683: CALL 72431 0 6
// end ;
93687: PPOPN 6
93689: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
93690: LD_INT 0
93692: PPUSH
// begin if not units then
93693: LD_VAR 0 1
93697: NOT
93698: IFFALSE 93702
// exit ;
93700: GO 93702
// end ;
93702: PPOPN 7
93704: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
93705: CALL 72318 0 0
// end ;
93709: PPOPN 1
93711: END
