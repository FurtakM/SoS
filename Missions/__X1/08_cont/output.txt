// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 21602 0 0
// PrepareRussian ;
  12: CALL 2056 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3854 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 68757 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 32781 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 30557 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: IFTRUE 733
 727: PUSH
 728: LD_EXP 1
 732: OR
 733: IFFALSE 760
// begin Harris := NewCharacter ( Harris ) ;
 735: LD_ADDR_EXP 59
 739: PUSH
 740: LD_STRING Harris
 742: PPUSH
 743: CALL_OW 25
 747: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 748: LD_EXP 59
 752: PPUSH
 753: LD_INT 33
 755: PPUSH
 756: CALL_OW 336
// end ; uc_side := 2 ;
 760: LD_ADDR_OWVAR 20
 764: PUSH
 765: LD_INT 2
 767: ST_TO_ADDR
// uc_nation := 2 ;
 768: LD_ADDR_OWVAR 21
 772: PUSH
 773: LD_INT 2
 775: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 776: LD_ADDR_EXP 46
 780: PUSH
 781: LD_STRING Heike
 783: PPUSH
 784: LD_EXP 1
 788: NOT
 789: PPUSH
 790: LD_EXP 2
 794: PPUSH
 795: CALL 30557 0 3
 799: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 800: LD_ADDR_EXP 49
 804: PUSH
 805: LD_STRING Ibrahim
 807: PPUSH
 808: LD_EXP 1
 812: NOT
 813: PPUSH
 814: LD_EXP 2
 818: PPUSH
 819: CALL 30557 0 3
 823: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 824: LD_ADDR_EXP 47
 828: PUSH
 829: LD_STRING Givi
 831: PPUSH
 832: LD_EXP 1
 836: NOT
 837: PPUSH
 838: LD_EXP 2
 842: PPUSH
 843: CALL 30557 0 3
 847: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 848: LD_ADDR_EXP 50
 852: PUSH
 853: LD_STRING Kamil
 855: PPUSH
 856: LD_EXP 1
 860: NOT
 861: PPUSH
 862: LD_EXP 2
 866: PPUSH
 867: CALL 30557 0 3
 871: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 872: LD_ADDR_EXP 51
 876: PUSH
 877: LD_STRING Kaia
 879: PPUSH
 880: LD_EXP 1
 884: NOT
 885: PPUSH
 886: LD_EXP 2
 890: PPUSH
 891: CALL 30557 0 3
 895: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 896: LD_ADDR_EXP 52
 900: PUSH
 901: LD_STRING Sophia
 903: PPUSH
 904: LD_EXP 1
 908: NOT
 909: PPUSH
 910: LD_EXP 2
 914: PPUSH
 915: CALL 30557 0 3
 919: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 920: LD_ADDR_EXP 53
 924: PUSH
 925: LD_STRING Markov
 927: PPUSH
 928: LD_EXP 1
 932: NOT
 933: PPUSH
 934: LD_EXP 2
 938: PPUSH
 939: CALL 30557 0 3
 943: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 944: LD_ADDR_EXP 56
 948: PUSH
 949: LD_STRING Aviradze
 951: PPUSH
 952: LD_EXP 1
 956: NOT
 957: PPUSH
 958: LD_EXP 2
 962: PPUSH
 963: CALL 30557 0 3
 967: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 968: LD_ADDR_EXP 55
 972: PUSH
 973: LD_STRING Kurt
 975: PPUSH
 976: LD_EXP 1
 980: NOT
 981: PPUSH
 982: LD_EXP 2
 986: PPUSH
 987: CALL 30557 0 3
 991: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 992: LD_ADDR_EXP 48
 996: PUSH
 997: LD_STRING Mike
 999: PPUSH
1000: LD_EXP 1
1004: NOT
1005: PPUSH
1006: LD_EXP 2
1010: PPUSH
1011: CALL 30557 0 3
1015: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1016: LD_ADDR_EXP 54
1020: PUSH
1021: LD_STRING Olaf
1023: PPUSH
1024: LD_EXP 1
1028: NOT
1029: PPUSH
1030: LD_EXP 2
1034: PPUSH
1035: CALL 30557 0 3
1039: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1040: LD_ADDR_EXP 57
1044: PUSH
1045: LD_STRING 07_others
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// end ;
1053: LD_VAR 0 1
1057: RET
// export function PrepareGame ; var i ; begin
1058: LD_INT 0
1060: PPUSH
1061: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1062: LD_EXP 46
1066: PPUSH
1067: LD_INT 23
1069: PPUSH
1070: CALL_OW 52
// if Givi then
1074: LD_EXP 47
1078: IFFALSE 1116
// begin SetSide ( Givi , 5 ) ;
1080: LD_EXP 47
1084: PPUSH
1085: LD_INT 5
1087: PPUSH
1088: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1092: LD_EXP 47
1096: PPUSH
1097: LD_INT 9
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 49
// ComHold ( Givi ) ;
1107: LD_EXP 47
1111: PPUSH
1112: CALL_OW 140
// end ; if Markov then
1116: LD_EXP 53
1120: IFFALSE 1158
// begin SetSide ( Markov , 5 ) ;
1122: LD_EXP 53
1126: PPUSH
1127: LD_INT 5
1129: PPUSH
1130: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1134: LD_EXP 53
1138: PPUSH
1139: LD_INT 3
1141: PPUSH
1142: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1146: LD_EXP 53
1150: PPUSH
1151: LD_INT 61
1153: PPUSH
1154: CALL_OW 52
// end ; if Mike then
1158: LD_EXP 48
1162: IFFALSE 1200
// begin SetSide ( Mike , 5 ) ;
1164: LD_EXP 48
1168: PPUSH
1169: LD_INT 5
1171: PPUSH
1172: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1176: LD_EXP 48
1180: PPUSH
1181: LD_INT 17
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// ComHold ( Mike ) ;
1191: LD_EXP 48
1195: PPUSH
1196: CALL_OW 140
// end ; if Olaf then
1200: LD_EXP 54
1204: IFFALSE 1245
// begin SetSide ( Olaf , 5 ) ;
1206: LD_EXP 54
1210: PPUSH
1211: LD_INT 5
1213: PPUSH
1214: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1218: LD_EXP 54
1222: PPUSH
1223: LD_INT 16
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1233: LD_EXP 54
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: CALL 72079 0 2
// end ; if Kamil then
1245: LD_EXP 50
1249: IFFALSE 1275
// begin SetSide ( Kamil , 5 ) ;
1251: LD_EXP 50
1255: PPUSH
1256: LD_INT 5
1258: PPUSH
1259: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1263: LD_EXP 50
1267: PPUSH
1268: LD_INT 109
1270: PPUSH
1271: CALL_OW 52
// end ; if Kurt then
1275: LD_EXP 55
1279: IFFALSE 1305
// begin SetSide ( Kurt , 5 ) ;
1281: LD_EXP 55
1285: PPUSH
1286: LD_INT 5
1288: PPUSH
1289: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1293: LD_EXP 55
1297: PPUSH
1298: LD_INT 169
1300: PPUSH
1301: CALL_OW 52
// end ; if Kaia then
1305: LD_EXP 51
1309: IFFALSE 1335
// begin SetSide ( Kaia , 5 ) ;
1311: LD_EXP 51
1315: PPUSH
1316: LD_INT 5
1318: PPUSH
1319: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1323: LD_EXP 51
1327: PPUSH
1328: LD_INT 147
1330: PPUSH
1331: CALL_OW 52
// end ; if Sophia then
1335: LD_EXP 52
1339: IFFALSE 1380
// begin SetSide ( Sophia , 5 ) ;
1341: LD_EXP 52
1345: PPUSH
1346: LD_INT 5
1348: PPUSH
1349: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1353: LD_EXP 52
1357: PPUSH
1358: LD_INT 142
1360: PPUSH
1361: LD_INT 96
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 48
// ComHold ( Sophia ) ;
1371: LD_EXP 52
1375: PPUSH
1376: CALL_OW 140
// end ; if Harris then
1380: LD_EXP 59
1384: IFFALSE 1422
// begin SetSide ( Harris , 4 ) ;
1386: LD_EXP 59
1390: PPUSH
1391: LD_INT 4
1393: PPUSH
1394: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1398: LD_EXP 59
1402: PPUSH
1403: LD_INT 20
1405: PPUSH
1406: LD_INT 0
1408: PPUSH
1409: CALL_OW 49
// ComHold ( i ) ;
1413: LD_VAR 0 2
1417: PPUSH
1418: CALL_OW 140
// end ; if Doug then
1422: LD_EXP 60
1426: IFFALSE 1452
// begin SetSide ( Doug , 4 ) ;
1428: LD_EXP 60
1432: PPUSH
1433: LD_INT 4
1435: PPUSH
1436: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1440: LD_EXP 60
1444: PPUSH
1445: LD_INT 106
1447: PPUSH
1448: CALL_OW 52
// end ; if Aviradze then
1452: LD_EXP 56
1456: IFFALSE 1482
// begin SetSide ( Aviradze , 5 ) ;
1458: LD_EXP 56
1462: PPUSH
1463: LD_INT 5
1465: PPUSH
1466: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1470: LD_EXP 56
1474: PPUSH
1475: LD_INT 119
1477: PPUSH
1478: CALL_OW 52
// end ; if Ibrahim then
1482: LD_EXP 49
1486: IFFALSE 1512
// begin SetSide ( Ibrahim , 5 ) ;
1488: LD_EXP 49
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1500: LD_EXP 49
1504: PPUSH
1505: LD_INT 119
1507: PPUSH
1508: CALL_OW 52
// end ; if Jerry then
1512: LD_EXP 61
1516: IFFALSE 1557
// begin SetSide ( Jerry , 4 ) ;
1518: LD_EXP 61
1522: PPUSH
1523: LD_INT 4
1525: PPUSH
1526: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1530: LD_EXP 61
1534: PPUSH
1535: LD_INT 119
1537: PPUSH
1538: LD_INT 59
1540: PPUSH
1541: LD_INT 0
1543: PPUSH
1544: CALL_OW 48
// ComHold ( Jerry ) ;
1548: LD_EXP 61
1552: PPUSH
1553: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1557: LD_EXP 65
1561: PPUSH
1562: LD_INT 119
1564: PPUSH
1565: CALL_OW 52
// for i in americanSquad do
1569: LD_ADDR_VAR 0 2
1573: PUSH
1574: LD_EXP 58
1578: PUSH
1579: FOR_IN
1580: IFFALSE 1608
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1582: LD_VAR 0 2
1586: PPUSH
1587: LD_INT 21
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 49
// ComHold ( i ) ;
1597: LD_VAR 0 2
1601: PPUSH
1602: CALL_OW 140
// end ;
1606: GO 1579
1608: POP
1609: POP
// for i in heikeSecondSquad do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: LD_EXP 57
1619: PUSH
1620: FOR_IN
1621: IFFALSE 1661
// begin SetSide ( i , 5 ) ;
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_INT 5
1630: PPUSH
1631: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1635: LD_VAR 0 2
1639: PPUSH
1640: LD_INT 22
1642: PPUSH
1643: LD_INT 0
1645: PPUSH
1646: CALL_OW 49
// ComHold ( i ) ;
1650: LD_VAR 0 2
1654: PPUSH
1655: CALL_OW 140
// end ;
1659: GO 1620
1661: POP
1662: POP
// if not hasVodka then
1663: LD_EXP 4
1667: NOT
1668: IFFALSE 1727
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 22
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: PPUSH
1703: CALL_OW 69
1707: PUSH
1708: FOR_IN
1709: IFFALSE 1725
// SetLives ( i , 500 ) ;
1711: LD_VAR 0 2
1715: PPUSH
1716: LD_INT 500
1718: PPUSH
1719: CALL_OW 234
1723: GO 1708
1725: POP
1726: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1727: LD_ADDR_VAR 0 2
1731: PUSH
1732: LD_INT 22
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: CALL_OW 69
1746: PUSH
1747: FOR_IN
1748: IFFALSE 1764
// SetLives ( i , 500 ) ;
1750: LD_VAR 0 2
1754: PPUSH
1755: LD_INT 500
1757: PPUSH
1758: CALL_OW 234
1762: GO 1747
1764: POP
1765: POP
// end ;
1766: LD_VAR 0 1
1770: RET
// export function SetClassKaiaRevolver ; begin
1771: LD_INT 0
1773: PPUSH
// if not IsOk ( Kaia ) then
1774: LD_EXP 51
1778: PPUSH
1779: CALL_OW 302
1783: NOT
1784: IFFALSE 1788
// exit ;
1786: GO 1835
// repeat wait ( 1 ) ;
1788: LD_INT 1
1790: PPUSH
1791: CALL_OW 67
// ComWalk ( Kaia ) ;
1795: LD_EXP 51
1799: PPUSH
1800: CALL_OW 138
// until not Crawls ( Kaia ) ;
1804: LD_EXP 51
1808: PPUSH
1809: CALL_OW 318
1813: NOT
1814: IFFALSE 1788
// SetClass ( Kaia , class_revolver ) ;
1816: LD_EXP 51
1820: PPUSH
1821: LD_INT 34
1823: PPUSH
1824: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1828: LD_STRING ACH_REVOLVER
1830: PPUSH
1831: CALL_OW 543
// end ;
1835: LD_VAR 0 1
1839: RET
// export function SpawnHeikeAsRussian ; begin
1840: LD_INT 0
1842: PPUSH
// RemoveUnit ( Heike ) ;
1843: LD_EXP 46
1847: PPUSH
1848: CALL_OW 64
// heikeTmp := Heike ;
1852: LD_ADDR_EXP 62
1856: PUSH
1857: LD_EXP 46
1861: ST_TO_ADDR
// uc_side := 2 ;
1862: LD_ADDR_OWVAR 20
1866: PUSH
1867: LD_INT 2
1869: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1870: LD_ADDR_EXP 46
1874: PUSH
1875: LD_STRING HeikeRu
1877: PPUSH
1878: CALL_OW 25
1882: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1883: LD_EXP 62
1887: PPUSH
1888: LD_EXP 46
1892: PPUSH
1893: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1897: LD_EXP 46
1901: PPUSH
1902: LD_INT 165
1904: PPUSH
1905: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1909: LD_EXP 46
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: CALL_OW 336
// heikeAsRussian := true ;
1921: LD_ADDR_EXP 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1929: LD_STRING M1-laundry-out
1931: PPUSH
1932: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1936: LD_STRING ACH_HEIKERU
1938: PPUSH
1939: CALL_OW 543
// end ;
1943: LD_VAR 0 1
1947: RET
// export function SpawnGiviAsRussian ; begin
1948: LD_INT 0
1950: PPUSH
// RemoveUnit ( Givi ) ;
1951: LD_EXP 47
1955: PPUSH
1956: CALL_OW 64
// giviTmp := Givi ;
1960: LD_ADDR_EXP 63
1964: PUSH
1965: LD_EXP 47
1969: ST_TO_ADDR
// uc_side := 2 ;
1970: LD_ADDR_OWVAR 20
1974: PUSH
1975: LD_INT 2
1977: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1978: LD_ADDR_EXP 47
1982: PUSH
1983: LD_STRING GiviRu
1985: PPUSH
1986: CALL_OW 25
1990: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1991: LD_EXP 63
1995: PPUSH
1996: LD_EXP 47
2000: PPUSH
2001: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
2005: LD_EXP 47
2009: PPUSH
2010: LD_INT 165
2012: PPUSH
2013: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
2017: LD_EXP 47
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL_OW 336
// giviAsRussian := true ;
2029: LD_ADDR_EXP 28
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2037: LD_STRING M1-laundry-out
2039: PPUSH
2040: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2044: LD_STRING ACH_GIVIRU
2046: PPUSH
2047: CALL_OW 543
// end ; end_of_file
2051: LD_VAR 0 1
2055: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2056: LD_INT 0
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
// uc_side := 3 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// uc_nation := 3 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// SetBName ( ruMainBase , yagoda ) ;
2079: LD_INT 2
2081: PPUSH
2082: LD_STRING yagoda
2084: PPUSH
2085: CALL_OW 500
// SetBName ( ruKitchen , kitchen ) ;
2089: LD_INT 192
2091: PPUSH
2092: LD_STRING kitchen
2094: PPUSH
2095: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2099: LD_INT 165
2101: PPUSH
2102: LD_STRING laundry
2104: PPUSH
2105: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2109: LD_INT 54
2111: PPUSH
2112: LD_STRING adminSection
2114: PPUSH
2115: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2119: LD_ADDR_VAR 0 2
2123: PUSH
2124: LD_INT 21
2126: PUSH
2127: LD_INT 3
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PPUSH
2134: CALL_OW 69
2138: PUSH
2139: FOR_IN
2140: IFFALSE 2156
// SetBLevel ( i , 7 ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_INT 7
2149: PPUSH
2150: CALL_OW 241
2154: GO 2139
2156: POP
2157: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: LD_INT 22
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 2
2175: PUSH
2176: LD_INT 30
2178: PUSH
2179: LD_INT 0
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 30
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: PUSH
2210: FOR_IN
2211: IFFALSE 2275
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2213: LD_VAR 0 2
2217: PPUSH
2218: CALL_OW 274
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: LD_INT 1000
2228: PPUSH
2229: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 274
2242: PPUSH
2243: LD_INT 2
2245: PPUSH
2246: LD_INT 1000
2248: PPUSH
2249: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2253: LD_VAR 0 2
2257: PPUSH
2258: CALL_OW 274
2262: PPUSH
2263: LD_INT 3
2265: PPUSH
2266: LD_INT 100
2268: PPUSH
2269: CALL_OW 277
// end ;
2273: GO 2210
2275: POP
2276: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 30
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PUSH
2311: FOR_IN
2312: IFFALSE 2346
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 5
2319: PUSH
2320: LD_OWVAR 67
2324: PLUS
2325: PPUSH
2326: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2330: CALL_OW 44
2334: PPUSH
2335: LD_VAR 0 2
2339: PPUSH
2340: CALL_OW 52
// end ;
2344: GO 2311
2346: POP
2347: POP
// for i := 1 to 2 do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 2
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2414
// begin PrepareMechanic ( false , 8 ) ;
2364: LD_INT 0
2366: PPUSH
2367: LD_INT 8
2369: PPUSH
2370: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2374: LD_ADDR_EXP 67
2378: PUSH
2379: LD_EXP 67
2383: PPUSH
2384: CALL_OW 44
2388: PPUSH
2389: CALL 68757 0 2
2393: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2394: LD_EXP 67
2398: PUSH
2399: LD_EXP 67
2403: ARRAY
2404: PPUSH
2405: LD_INT 61
2407: PPUSH
2408: CALL_OW 52
// end ;
2412: GO 2361
2414: POP
2415: POP
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2426: LD_ADDR_EXP 68
2430: PUSH
2431: LD_EXP 68
2435: PPUSH
2436: CALL_OW 44
2440: PPUSH
2441: CALL 68757 0 2
2445: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2446: LD_EXP 68
2450: PUSH
2451: LD_EXP 68
2455: ARRAY
2456: PPUSH
2457: LD_INT 196
2459: PPUSH
2460: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: CALL_OW 383
// hc_name := Stiepan Simonov ;
2474: LD_ADDR_OWVAR 26
2478: PUSH
2479: LD_STRING Stiepan Simonov
2481: ST_TO_ADDR
// Stiopa := CreateHuman ;
2482: LD_ADDR_EXP 69
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2492: LD_INT 2
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 383
// hc_name := Laura Dragunov ;
2502: LD_ADDR_OWVAR 26
2506: PUSH
2507: LD_STRING Laura Dragunov
2509: ST_TO_ADDR
// Laura := CreateHuman ;
2510: LD_ADDR_EXP 70
2514: PUSH
2515: CALL_OW 44
2519: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2520: LD_EXP 70
2524: PPUSH
2525: LD_INT 196
2527: PPUSH
2528: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 8
2537: PPUSH
2538: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2542: LD_ADDR_EXP 67
2546: PUSH
2547: LD_EXP 67
2551: PPUSH
2552: LD_INT 1
2554: PPUSH
2555: CALL_OW 44
2559: PPUSH
2560: CALL_OW 2
2564: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2565: LD_EXP 67
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_INT 61
2576: PPUSH
2577: CALL_OW 52
// hc_sex := sex_male ;
2581: LD_ADDR_OWVAR 27
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// hc_name := Muchin ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING Muchin
2596: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2597: LD_ADDR_OWVAR 33
2601: PUSH
2602: LD_STRING SecondCharsGal
2604: ST_TO_ADDR
// hc_face_number := 87 ;
2605: LD_ADDR_OWVAR 34
2609: PUSH
2610: LD_INT 87
2612: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 2 , 6 ] ;
2613: LD_ADDR_OWVAR 31
2617: PUSH
2618: LD_INT 8
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_INT 2
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2636: LD_ADDR_OWVAR 29
2640: PUSH
2641: LD_INT 13
2643: PUSH
2644: LD_INT 13
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: ST_TO_ADDR
// hc_class := class_soldier ;
2651: LD_ADDR_OWVAR 28
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2659: LD_ADDR_EXP 66
2663: PUSH
2664: CALL_OW 44
2668: ST_TO_ADDR
// InitHC_All ( ) ;
2669: CALL_OW 584
// if Difficulty > 1 then
2673: LD_OWVAR 67
2677: PUSH
2678: LD_INT 1
2680: GREATER
2681: IFFALSE 2801
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty - 1 ] do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 3
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: PUSH
2712: LD_INT 1
2714: MINUS
2715: ARRAY
2716: PUSH
2717: FOR_TO
2718: IFFALSE 2799
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty - 1 ] ) ;
2720: LD_INT 0
2722: PPUSH
2723: LD_INT 5
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PUSH
2737: LD_OWVAR 67
2741: PUSH
2742: LD_INT 1
2744: MINUS
2745: ARRAY
2746: PPUSH
2747: CALL_OW 381
// un := CreateHuman ;
2751: LD_ADDR_VAR 0 4
2755: PUSH
2756: CALL_OW 44
2760: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2761: LD_VAR 0 4
2765: PPUSH
2766: LD_INT 62
2768: PUSH
2769: LD_INT 63
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_VAR 0 2
2780: PUSH
2781: LD_INT 2
2783: MOD
2784: PUSH
2785: LD_INT 1
2787: PLUS
2788: ARRAY
2789: PPUSH
2790: LD_INT 0
2792: PPUSH
2793: CALL_OW 49
// end ;
2797: GO 2717
2799: POP
2800: POP
// end ; uc_side := 6 ;
2801: LD_ADDR_OWVAR 20
2805: PUSH
2806: LD_INT 6
2808: ST_TO_ADDR
// uc_nation := 3 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: LD_INT 15
2827: PUSH
2828: LD_INT 48
2830: PUSH
2831: LD_INT 24
2833: PUSH
2834: LD_INT 149
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// for i in tmp do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: LD_VAR 0 5
2853: PUSH
2854: FOR_IN
2855: IFFALSE 2903
// begin for j := 1 to 2 do
2857: LD_ADDR_VAR 0 3
2861: PUSH
2862: DOUBLE
2863: LD_INT 1
2865: DEC
2866: ST_TO_ADDR
2867: LD_INT 2
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2899
// begin PrepareSoldier ( false , 7 ) ;
2873: LD_INT 0
2875: PPUSH
2876: LD_INT 7
2878: PPUSH
2879: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2883: CALL_OW 44
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: CALL_OW 52
// end ;
2897: GO 2870
2899: POP
2900: POP
// end ;
2901: GO 2854
2903: POP
2904: POP
// end ;
2905: LD_VAR 0 1
2909: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2910: LD_INT 0
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
// uc_side := 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_INT 3
2934: PPUSH
2935: CALL_OW 12
2939: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2940: LD_ADDR_VAR 0 4
2944: PUSH
2945: LD_INT 5
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 517
2955: ST_TO_ADDR
// for i := 1 to 3 do
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: DOUBLE
2962: LD_INT 1
2964: DEC
2965: ST_TO_ADDR
2966: LD_INT 3
2968: PUSH
2969: FOR_TO
2970: IFFALSE 3039
// begin PrepareHuman ( false , class_prison , 0 ) ;
2972: LD_INT 0
2974: PPUSH
2975: LD_INT 33
2977: PPUSH
2978: LD_INT 0
2980: PPUSH
2981: CALL_OW 380
// un := CreateHuman ;
2985: LD_ADDR_VAR 0 3
2989: PUSH
2990: CALL_OW 44
2994: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_VAR 0 4
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PUSH
3009: LD_VAR 0 2
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PUSH
3024: LD_VAR 0 2
3028: ARRAY
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: CALL_OW 601
// end ;
3037: GO 2969
3039: POP
3040: POP
// end ;
3041: LD_VAR 0 1
3045: RET
// export function PrepareFirstScene ; var i , un ; begin
3046: LD_INT 0
3048: PPUSH
3049: PPUSH
3050: PPUSH
// uc_side := 4 ;
3051: LD_ADDR_OWVAR 20
3055: PUSH
3056: LD_INT 4
3058: ST_TO_ADDR
// uc_nation := 1 ;
3059: LD_ADDR_OWVAR 21
3063: PUSH
3064: LD_INT 1
3066: ST_TO_ADDR
// PrepareHuman ( false , class_prison , 0 ) ;
3067: LD_INT 0
3069: PPUSH
3070: LD_INT 33
3072: PPUSH
3073: LD_INT 0
3075: PPUSH
3076: CALL_OW 380
// for i := 1 to 2 do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: DOUBLE
3086: LD_INT 1
3088: DEC
3089: ST_TO_ADDR
3090: LD_INT 2
3092: PUSH
3093: FOR_TO
3094: IFFALSE 3159
// begin un := CreateHuman ;
3096: LD_ADDR_VAR 0 3
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3118: LD_VAR 0 3
3122: PPUSH
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3133: LD_VAR 0 3
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: CALL 72079 0 2
// SetLives ( un , 300 ) ;
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_INT 300
3152: PPUSH
3153: CALL_OW 234
// end ;
3157: GO 3093
3159: POP
3160: POP
// uc_side := 3 ;
3161: LD_ADDR_OWVAR 20
3165: PUSH
3166: LD_INT 3
3168: ST_TO_ADDR
// uc_nation := 3 ;
3169: LD_ADDR_OWVAR 21
3173: PUSH
3174: LD_INT 3
3176: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 5
3182: PPUSH
3183: CALL_OW 381
// for i := 1 to 3 do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: DOUBLE
3193: LD_INT 1
3195: DEC
3196: ST_TO_ADDR
3197: LD_INT 3
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3274
// begin un := CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3213: LD_ADDR_EXP 64
3217: PUSH
3218: LD_EXP 64
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: CALL 68757 0 2
3232: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3233: LD_VAR 0 3
3237: PPUSH
3238: LD_INT 4
3240: PPUSH
3241: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 7
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3260: LD_VAR 0 3
3264: PPUSH
3265: LD_INT 4
3267: PPUSH
3268: CALL 72079 0 2
// end ;
3272: GO 3200
3274: POP
3275: POP
// ruCommisar := CreateHuman ;
3276: LD_ADDR_EXP 65
3280: PUSH
3281: CALL_OW 44
3285: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3286: LD_EXP 65
3290: PPUSH
3291: LD_INT 124
3293: PPUSH
3294: LD_INT 37
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3304: LD_EXP 65
3308: PPUSH
3309: LD_INT 3
3311: PPUSH
3312: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3316: LD_EXP 65
3320: PPUSH
3321: LD_INT 3
3323: PPUSH
3324: CALL 72079 0 2
// end ;
3328: LD_VAR 0 1
3332: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
// uc_side := 6 ;
3339: LD_ADDR_OWVAR 20
3343: PUSH
3344: LD_INT 6
3346: ST_TO_ADDR
// uc_nation := 3 ;
3347: LD_ADDR_OWVAR 21
3351: PUSH
3352: LD_INT 3
3354: ST_TO_ADDR
// ruPatrol := [ ] ;
3355: LD_ADDR_EXP 71
3359: PUSH
3360: EMPTY
3361: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3362: LD_ADDR_VAR 0 4
3366: PUSH
3367: LD_INT 26
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 39
3375: PUSH
3376: LD_INT 43
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: ST_TO_ADDR
// for i := 1 to spawn do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_VAR 0 4
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3512
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 4
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 6
3414: PUSH
3415: LD_INT 7
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_OWVAR 67
3428: ARRAY
3429: PPUSH
3430: CALL_OW 381
// un := CreateHuman ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// SetTag ( un , i ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_VAR 0 2
3453: PPUSH
3454: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3458: LD_ADDR_EXP 71
3462: PUSH
3463: LD_EXP 71
3467: PPUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: CALL 68757 0 2
3477: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_VAR 0 4
3487: PUSH
3488: LD_VAR 0 2
3492: ARRAY
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: CALL_OW 49
// ComHold ( un ) ;
3501: LD_VAR 0 3
3505: PPUSH
3506: CALL_OW 140
// end ;
3510: GO 3400
3512: POP
3513: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_INT 48
3521: PUSH
3522: LD_INT 49
3524: PUSH
3525: LD_INT 50
3527: PUSH
3528: LD_INT 51
3530: PUSH
3531: LD_INT 52
3533: PUSH
3534: LD_INT 53
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: ST_TO_ADDR
// for i := 1 to spawn do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_VAR 0 4
3559: PUSH
3560: FOR_TO
3561: IFFALSE 3670
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 4
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: LD_INT 6
3574: PUSH
3575: LD_INT 7
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PUSH
3584: LD_OWVAR 67
3588: ARRAY
3589: PPUSH
3590: CALL_OW 381
// un := CreateHuman ;
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: CALL_OW 44
3603: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3604: LD_VAR 0 3
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3616: LD_ADDR_EXP 71
3620: PUSH
3621: LD_EXP 71
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: CALL 68757 0 2
3635: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_VAR 0 4
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
// ComHold ( un ) ;
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 140
// end ;
3668: GO 3560
3670: POP
3671: POP
// end ;
3672: LD_VAR 0 1
3676: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3677: LD_INT 0
3679: PPUSH
3680: PPUSH
3681: PPUSH
3682: PPUSH
// uc_side := 6 ;
3683: LD_ADDR_OWVAR 20
3687: PUSH
3688: LD_INT 6
3690: ST_TO_ADDR
// uc_nation := nation_russian ;
3691: LD_ADDR_OWVAR 21
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 54
3706: PUSH
3707: LD_INT 55
3709: PUSH
3710: LD_INT 56
3712: PUSH
3713: LD_INT 57
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: ST_TO_ADDR
// for i := 1 to spawn do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 3847
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3740: LD_INT 0
3742: PPUSH
3743: LD_INT 4
3745: PUSH
3746: LD_INT 5
3748: PUSH
3749: LD_INT 6
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: PUSH
3761: LD_OWVAR 67
3765: ARRAY
3766: PPUSH
3767: CALL_OW 381
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3793: LD_ADDR_EXP 71
3797: PUSH
3798: LD_EXP 71
3802: PPUSH
3803: LD_VAR 0 3
3807: PPUSH
3808: CALL 68757 0 2
3812: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_VAR 0 4
3822: PUSH
3823: LD_VAR 0 2
3827: ARRAY
3828: PPUSH
3829: LD_INT 0
3831: PPUSH
3832: CALL_OW 49
// ComHold ( un ) ;
3836: LD_VAR 0 3
3840: PPUSH
3841: CALL_OW 140
// end ;
3845: GO 3737
3847: POP
3848: POP
// end ; end_of_file
3849: LD_VAR 0 1
3853: RET
// export function Action ; var speaker , i , tmp ; begin
3854: LD_INT 0
3856: PPUSH
3857: PPUSH
3858: PPUSH
3859: PPUSH
// Video ( true ) ;
3860: LD_INT 1
3862: PPUSH
3863: CALL 68729 0 1
// hasNormalScene := Kaia or Givi ;
3867: LD_ADDR_EXP 5
3871: PUSH
3872: LD_EXP 51
3876: IFTRUE 3884
3878: PUSH
3879: LD_EXP 47
3883: OR
3884: ST_TO_ADDR
// if hasNormalScene then
3885: LD_EXP 5
3889: IFFALSE 4130
// begin for i in americanSquad do
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: LD_EXP 58
3900: PUSH
3901: FOR_IN
3902: IFFALSE 3948
// begin SetClass ( i , class_prison ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 33
3911: PPUSH
3912: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 78
3923: PPUSH
3924: LD_INT 16
3926: PPUSH
3927: LD_INT 5
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 50
// ComHold ( i ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 140
// end ;
3946: GO 3901
3948: POP
3949: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3950: LD_ADDR_VAR 0 4
3954: PUSH
3955: LD_EXP 48
3959: PUSH
3960: LD_EXP 49
3964: PUSH
3965: LD_EXP 50
3969: PUSH
3970: LD_EXP 51
3974: PUSH
3975: LD_EXP 52
3979: PUSH
3980: LD_EXP 53
3984: PUSH
3985: LD_EXP 54
3989: PUSH
3990: LD_EXP 55
3994: PUSH
3995: LD_EXP 47
3999: PUSH
4000: LD_EXP 56
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_EXP 57
4021: UNION
4022: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
4023: LD_EXP 46
4027: PPUSH
4028: LD_INT 33
4030: PPUSH
4031: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
4035: LD_EXP 46
4039: PPUSH
4040: LD_INT 117
4042: PPUSH
4043: LD_INT 24
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL 70917 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_INT 123
4063: PPUSH
4064: LD_INT 39
4066: PPUSH
4067: CALL_OW 118
// for i in tmp do
4071: LD_ADDR_VAR 0 3
4075: PUSH
4076: LD_VAR 0 4
4080: PUSH
4081: FOR_IN
4082: IFFALSE 4128
// begin SetClass ( i , class_prison ) ;
4084: LD_VAR 0 3
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_INT 3
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4111: LD_VAR 0 3
4115: PPUSH
4116: LD_INT 113
4118: PPUSH
4119: LD_INT 16
4121: PPUSH
4122: CALL_OW 118
// end ;
4126: GO 4081
4128: POP
4129: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4130: LD_INT 124
4132: PPUSH
4133: LD_INT 39
4135: PPUSH
4136: CALL_OW 86
// PrepareDeadBodies ;
4140: CALL 2910 0 0
// PrepareFirstScene ;
4144: CALL 3046 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4148: LD_INT 152
4150: PPUSH
4151: LD_INT 65
4153: PPUSH
4154: LD_INT 2
4156: PPUSH
4157: LD_INT 70
4159: NEG
4160: PPUSH
4161: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4165: LD_INT 152
4167: PPUSH
4168: LD_INT 65
4170: PPUSH
4171: LD_INT 2
4173: PPUSH
4174: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4178: LD_INT 122
4180: PPUSH
4181: LD_INT 40
4183: PPUSH
4184: LD_INT 2
4186: PPUSH
4187: LD_INT 8
4189: NEG
4190: PPUSH
4191: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4195: LD_INT 124
4197: PPUSH
4198: LD_INT 37
4200: PPUSH
4201: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4205: LD_EXP 65
4209: PPUSH
4210: LD_STRING DRum-Execution-1
4212: PPUSH
4213: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4217: LD_EXP 65
4221: PPUSH
4222: LD_STRING DRum-Execution-2
4224: PPUSH
4225: CALL_OW 88
// wait ( 0 0$01 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4236: LD_EXP 65
4240: PPUSH
4241: LD_STRING DRum-Execution-3
4243: PPUSH
4244: CALL_OW 88
// wait ( 0 0$1 ) ;
4248: LD_INT 35
4250: PPUSH
4251: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4255: LD_EXP 65
4259: PPUSH
4260: LD_STRING DRum-Execution-4
4262: PPUSH
4263: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4267: LD_EXP 64
4271: PUSH
4272: LD_INT 1
4274: ARRAY
4275: PPUSH
4276: LD_INT 122
4278: PPUSH
4279: LD_INT 39
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4291: LD_EXP 64
4295: PUSH
4296: LD_INT 2
4298: ARRAY
4299: PPUSH
4300: LD_INT 123
4302: PPUSH
4303: LD_INT 41
4305: PPUSH
4306: CALL_OW 428
4310: PPUSH
4311: CALL_OW 115
// AddComHold ( russianKillers ) ;
4315: LD_EXP 64
4319: PPUSH
4320: CALL_OW 200
// wait ( 0 0$1 ) ;
4324: LD_INT 35
4326: PPUSH
4327: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4331: LD_INT 122
4333: PPUSH
4334: LD_INT 40
4336: PPUSH
4337: LD_INT 2
4339: PPUSH
4340: CALL_OW 331
// for i in russianKillers union ruCommisar do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: LD_EXP 64
4353: PUSH
4354: LD_EXP 65
4358: UNION
4359: PUSH
4360: FOR_IN
4361: IFFALSE 4374
// RemoveUnit ( i ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: CALL_OW 64
4372: GO 4360
4374: POP
4375: POP
// if hasNormalScene then
4376: LD_EXP 5
4380: IFFALSE 4388
// ActionNormal else
4382: CALL 4397 0 0
4386: GO 4392
// ActionAdditional ;
4388: CALL 6223 0 0
// end ;
4392: LD_VAR 0 1
4396: RET
// function ActionNormal ; var i , tmp ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// CenterNowOnUnits ( Heike ) ;
4402: LD_EXP 46
4406: PPUSH
4407: CALL_OW 87
// wait ( 0 0$1 ) ;
4411: LD_INT 35
4413: PPUSH
4414: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4418: LD_EXP 46
4422: PPUSH
4423: LD_INT 115
4425: PPUSH
4426: LD_INT 19
4428: PPUSH
4429: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4433: LD_EXP 46
4437: PPUSH
4438: LD_INT 113
4440: PPUSH
4441: LD_INT 16
4443: PPUSH
4444: CALL_OW 178
// wait ( 0 0$2 ) ;
4448: LD_INT 70
4450: PPUSH
4451: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4455: LD_EXP 46
4459: PPUSH
4460: LD_STRING DH-Conspiracy-1
4462: PPUSH
4463: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4467: LD_EXP 51
4471: PPUSH
4472: LD_STRING DK-Conspiracy-2
4474: PPUSH
4475: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4479: LD_EXP 47
4483: PPUSH
4484: LD_STRING DG-Conspiracy-3
4486: PPUSH
4487: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4491: LD_EXP 47
4495: PPUSH
4496: LD_STRING DG-Conspiracy-4
4498: PPUSH
4499: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4503: LD_EXP 46
4507: PPUSH
4508: LD_STRING DH-Conspiracy-5
4510: PPUSH
4511: CALL_OW 88
// if IsOk ( Kamil ) then
4515: LD_EXP 50
4519: PPUSH
4520: CALL_OW 302
4524: IFFALSE 4582
// begin hasVodka := true ;
4526: LD_ADDR_EXP 4
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4534: LD_EXP 50
4538: PPUSH
4539: LD_STRING DKam-Conspiracy-6
4541: PPUSH
4542: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4546: LD_EXP 50
4550: PPUSH
4551: LD_STRING DKam-Conspiracy-7
4553: PPUSH
4554: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4558: LD_EXP 50
4562: PPUSH
4563: LD_STRING DKam-Conspiracy-8
4565: PPUSH
4566: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4570: LD_EXP 50
4574: PPUSH
4575: LD_STRING DKam-Conspiracy-9
4577: PPUSH
4578: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4582: LD_EXP 52
4586: PPUSH
4587: CALL_OW 302
4591: IFFALSE 4772
// begin americanContact := true ;
4593: LD_ADDR_EXP 10
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4601: LD_STRING M1-american
4603: PPUSH
4604: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4608: LD_EXP 52
4612: PPUSH
4613: LD_STRING DS-Conspiracy-10
4615: PPUSH
4616: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-11 ) ;
4620: LD_EXP 53
4624: PPUSH
4625: LD_STRING DMar-Conspiracy-11
4627: PPUSH
4628: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4632: LD_EXP 52
4636: PPUSH
4637: LD_STRING DS-Conspiracy-12
4639: PPUSH
4640: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4644: LD_INT 84
4646: PPUSH
4647: LD_INT 19
4649: PPUSH
4650: LD_INT 105
4652: PPUSH
4653: CALL 20959 0 3
// if johnnySaved then
4657: LD_EXP 3
4661: IFFALSE 4701
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4663: LD_EXP 52
4667: PPUSH
4668: LD_STRING DS-Conspiracy-13
4670: PPUSH
4671: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4675: LD_EXP 46
4679: PPUSH
4680: LD_STRING DH-Conspiracy-14
4682: PPUSH
4683: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4687: LD_EXP 46
4691: PPUSH
4692: LD_STRING DH-Conspiracy-15
4694: PPUSH
4695: CALL_OW 88
// end else
4699: GO 4737
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4701: LD_EXP 52
4705: PPUSH
4706: LD_STRING DS-Conspiracy-a-13
4708: PPUSH
4709: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4713: LD_EXP 46
4717: PPUSH
4718: LD_STRING DH-Conspiracy-a-14
4720: PPUSH
4721: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4725: LD_EXP 46
4729: PPUSH
4730: LD_STRING DH-Conspiracy-a-15
4732: PPUSH
4733: CALL_OW 88
// end ; if IsOk ( Givi ) then
4737: LD_EXP 47
4741: PPUSH
4742: CALL_OW 302
4746: IFFALSE 4772
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4748: LD_EXP 47
4752: PPUSH
4753: LD_STRING DG-Conspiracy-a-16
4755: PPUSH
4756: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DH-Conspiracy-a-17
4767: PPUSH
4768: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DH-Conspiracy-16
4779: PPUSH
4780: CALL_OW 88
// if IsOk ( Givi ) then
4784: LD_EXP 47
4788: PPUSH
4789: CALL_OW 302
4793: IFFALSE 5065
// begin hasStimDrugs := true ;
4795: LD_ADDR_EXP 9
4799: PUSH
4800: LD_INT 1
4802: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4803: LD_STRING M1-drugs
4805: PPUSH
4806: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4810: LD_EXP 47
4814: PPUSH
4815: LD_STRING DG-Conspiracy-17
4817: PPUSH
4818: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4822: LD_INT 162
4824: PPUSH
4825: LD_INT 2
4827: PPUSH
4828: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4832: LD_INT 194
4834: PPUSH
4835: LD_INT 98
4837: PPUSH
4838: LD_INT 105
4840: PPUSH
4841: CALL 20959 0 3
// SetSide ( drugsLab , 3 ) ;
4845: LD_INT 162
4847: PPUSH
4848: LD_INT 3
4850: PPUSH
4851: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4855: LD_EXP 47
4859: PPUSH
4860: LD_STRING DG-Conspiracy-18
4862: PPUSH
4863: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4867: LD_EXP 47
4871: PPUSH
4872: LD_STRING DG-Conspiracy-19
4874: PPUSH
4875: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4879: LD_EXP 47
4883: PPUSH
4884: LD_STRING DG-Conspiracy-20
4886: PPUSH
4887: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4891: LD_EXP 46
4895: PPUSH
4896: LD_STRING DH-Conspiracy-21
4898: PPUSH
4899: CALL_OW 88
// if IsOk ( Kaia ) then
4903: LD_EXP 51
4907: PPUSH
4908: CALL_OW 302
4912: IFFALSE 4986
// begin hasExplosions := true ;
4914: LD_ADDR_EXP 6
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4922: LD_STRING M1-explosive
4924: PPUSH
4925: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4929: LD_EXP 51
4933: PPUSH
4934: LD_STRING DK-Conspiracy-22
4936: PPUSH
4937: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4941: LD_INT 73
4943: PPUSH
4944: LD_INT 2
4946: PPUSH
4947: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4951: LD_INT 170
4953: PPUSH
4954: LD_INT 104
4956: PPUSH
4957: LD_INT 105
4959: PPUSH
4960: CALL 20959 0 3
// SetSide ( barExplosion , 3 ) ;
4964: LD_INT 73
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4974: LD_EXP 51
4978: PPUSH
4979: LD_STRING DK-Conspiracy-23
4981: PPUSH
4982: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4986: LD_EXP 54
4990: PPUSH
4991: CALL_OW 302
4995: IFFALSE 5065
// begin hasExplosionsInFactory := true ;
4997: LD_ADDR_EXP 7
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
5005: LD_EXP 54
5009: PPUSH
5010: LD_STRING DO-Conspiracy-24
5012: PPUSH
5013: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
5017: LD_INT 175
5019: PPUSH
5020: LD_INT 54
5022: PPUSH
5023: LD_INT 70
5025: PPUSH
5026: CALL 20959 0 3
// if IsOk ( Markov ) then
5030: LD_EXP 53
5034: PPUSH
5035: CALL_OW 302
5039: IFFALSE 5065
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
5041: LD_EXP 53
5045: PPUSH
5046: LD_STRING DMar-Conspiracy-25
5048: PPUSH
5049: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
5053: LD_EXP 53
5057: PPUSH
5058: LD_STRING DMar-Conspiracy-26
5060: PPUSH
5061: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
5065: LD_EXP 55
5069: PPUSH
5070: CALL_OW 302
5074: IFFALSE 5087
5076: PUSH
5077: LD_EXP 51
5081: PPUSH
5082: CALL_OW 302
5086: AND
5087: IFFALSE 5549
// begin hasWeapons := true ;
5089: LD_ADDR_EXP 19
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hasRevolver := true ;
5097: LD_ADDR_EXP 8
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5105: LD_STRING M1-weapons
5107: PPUSH
5108: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5112: LD_EXP 55
5116: PPUSH
5117: LD_STRING DKs-Conspiracy-27
5119: PPUSH
5120: CALL_OW 88
// if IsOk ( Givi ) then
5124: LD_EXP 47
5128: PPUSH
5129: CALL_OW 302
5133: IFFALSE 5149
// Say ( Givi , DG-Conspiracy-28 ) else
5135: LD_EXP 47
5139: PPUSH
5140: LD_STRING DG-Conspiracy-28
5142: PPUSH
5143: CALL_OW 88
5147: GO 5214
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5149: LD_EXP 57
5153: PPUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 72
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_STRING DArm-Conspiracy-a-28
5175: PPUSH
5176: CALL_OW 88
5180: NOT
5181: IFFALSE 5214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5183: LD_EXP 57
5187: PPUSH
5188: LD_INT 26
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 72
5202: PUSH
5203: LD_INT 1
5205: ARRAY
5206: PPUSH
5207: LD_STRING DArf-Conspiracy-a-28
5209: PPUSH
5210: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5214: LD_EXP 55
5218: PPUSH
5219: LD_STRING DKs-Conspiracy-29
5221: PPUSH
5222: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5226: LD_INT 192
5228: PPUSH
5229: LD_INT 122
5231: PPUSH
5232: LD_INT 105
5234: PPUSH
5235: CALL 20959 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5239: LD_EXP 55
5243: PPUSH
5244: LD_STRING DKs-Conspiracy-30
5246: PPUSH
5247: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5251: LD_EXP 51
5255: PPUSH
5256: LD_STRING DK-Conspiracy-31
5258: PPUSH
5259: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5263: LD_EXP 53
5267: PPUSH
5268: LD_STRING DMar-Conspiracy-33
5270: PPUSH
5271: CALL_OW 88
5275: NOT
5276: IFFALSE 5284
5278: PUSH
5279: LD_EXP 57
5283: AND
5284: IFFALSE 5351
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5286: LD_EXP 57
5290: PPUSH
5291: LD_INT 26
5293: PUSH
5294: LD_INT 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PPUSH
5301: CALL_OW 72
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: LD_STRING DArm-Conspiracy-a-34
5312: PPUSH
5313: CALL_OW 88
5317: NOT
5318: IFFALSE 5351
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5320: LD_EXP 57
5324: PPUSH
5325: LD_INT 26
5327: PUSH
5328: LD_INT 2
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 72
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PPUSH
5344: LD_STRING DArf-Conspiracy-a-34
5346: PPUSH
5347: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5351: LD_EXP 51
5355: PPUSH
5356: LD_STRING DK-Conspiracy-34
5358: PPUSH
5359: CALL_OW 88
// if IsOk ( Markov ) then
5363: LD_EXP 53
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5457
// begin hasSniperRifle := true ;
5374: LD_ADDR_EXP 11
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5382: LD_EXP 53
5386: PPUSH
5387: LD_STRING DMar-Conspiracy-35
5389: PPUSH
5390: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5394: LD_EXP 51
5398: PPUSH
5399: LD_STRING DK-Conspiracy-36
5401: PPUSH
5402: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5406: LD_EXP 53
5410: PPUSH
5411: LD_STRING DMar-Conspiracy-37
5413: PPUSH
5414: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5418: LD_EXP 53
5422: PPUSH
5423: LD_STRING DMar-Conspiracy-38
5425: PPUSH
5426: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5430: LD_INT 137
5432: PPUSH
5433: LD_INT 98
5435: PPUSH
5436: LD_INT 105
5438: PPUSH
5439: CALL 20959 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5443: LD_EXP 53
5447: PPUSH
5448: LD_STRING DMar-Conspiracy-39
5450: PPUSH
5451: CALL_OW 88
// end else
5455: GO 5549
// if heikeSecondSquad then
5457: LD_EXP 57
5461: IFFALSE 5549
// begin hasSniperRifle := true ;
5463: LD_ADDR_EXP 11
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5471: LD_INT 137
5473: PPUSH
5474: LD_INT 98
5476: PPUSH
5477: LD_INT 105
5479: PPUSH
5480: CALL 20959 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5484: LD_EXP 57
5488: PPUSH
5489: LD_INT 26
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 72
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: LD_STRING DArm-Conspiracy-a-35
5510: PPUSH
5511: CALL_OW 88
5515: NOT
5516: IFFALSE 5549
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5518: LD_EXP 57
5522: PPUSH
5523: LD_INT 26
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 72
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: LD_STRING DArf-Conspiracy-a-35
5544: PPUSH
5545: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5549: LD_EXP 46
5553: PPUSH
5554: LD_STRING DH-Conspiracy-40
5556: PPUSH
5557: CALL_OW 88
// if IsOk ( Mike ) then
5561: LD_EXP 48
5565: PPUSH
5566: CALL_OW 302
5570: IFFALSE 5629
// begin hasScout := true ;
5572: LD_ADDR_EXP 12
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5580: LD_EXP 48
5584: PPUSH
5585: LD_STRING DM-Conspiracy-41
5587: PPUSH
5588: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5592: LD_EXP 48
5596: PPUSH
5597: LD_STRING DM-Conspiracy-42
5599: PPUSH
5600: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5604: LD_INT 73
5606: PPUSH
5607: LD_INT 102
5609: PPUSH
5610: LD_INT 105
5612: PPUSH
5613: CALL 20959 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5617: LD_EXP 48
5621: PPUSH
5622: LD_STRING DM-Conspiracy-43
5624: PPUSH
5625: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5629: LD_EXP 4
5633: IFFALSE 5646
5635: PUSH
5636: LD_EXP 51
5640: PPUSH
5641: CALL_OW 302
5645: AND
5646: IFFALSE 5659
5648: PUSH
5649: LD_EXP 55
5653: PPUSH
5654: CALL_OW 302
5658: AND
5659: IFFALSE 5705
// begin hasMethanol := true ;
5661: LD_ADDR_EXP 13
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5669: LD_EXP 51
5673: PPUSH
5674: LD_STRING DK-Conspiracy-44
5676: PPUSH
5677: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5681: LD_EXP 51
5685: PPUSH
5686: LD_STRING DK-Conspiracy-45
5688: PPUSH
5689: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5693: LD_EXP 50
5697: PPUSH
5698: LD_STRING DKam-Conspiracy-46
5700: PPUSH
5701: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5705: LD_EXP 46
5709: PPUSH
5710: LD_STRING DH-Conspiracy-47
5712: PPUSH
5713: CALL_OW 88
// wait ( 0 0$1 ) ;
5717: LD_INT 35
5719: PPUSH
5720: CALL_OW 67
// your_side := 8 ;
5724: LD_ADDR_OWVAR 2
5728: PUSH
5729: LD_INT 8
5731: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5732: LD_INT 1
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5742: LD_ADDR_VAR 0 2
5746: PUSH
5747: LD_INT 2
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 22
5762: PUSH
5763: LD_INT 4
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 69
5793: PUSH
5794: FOR_IN
5795: IFFALSE 5808
// RemoveUnit ( i ) ;
5797: LD_VAR 0 2
5801: PPUSH
5802: CALL_OW 64
5806: GO 5794
5808: POP
5809: POP
// wait ( 0 0$0.3 ) ;
5810: LD_INT 10
5812: PPUSH
5813: CALL_OW 67
// Query ( StartInfo1 ) ;
5817: LD_STRING StartInfo1
5819: PPUSH
5820: CALL_OW 97
// wait ( 0 0$1 ) ;
5824: LD_INT 35
5826: PPUSH
5827: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5831: LD_STRING colors_night.txt
5833: PPUSH
5834: CALL_OW 544
// Query ( StartInfo2 ) ;
5838: LD_STRING StartInfo2
5840: PPUSH
5841: CALL_OW 97
// PrepareGame ;
5845: CALL 1058 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5849: LD_INT 152
5851: PPUSH
5852: LD_INT 65
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_INT 70
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5866: LD_INT 152
5868: PPUSH
5869: LD_INT 65
5871: PPUSH
5872: LD_INT 2
5874: PPUSH
5875: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 76
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 6
5890: NEG
5891: PPUSH
5892: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5896: LD_INT 152
5898: PPUSH
5899: LD_INT 65
5901: PPUSH
5902: LD_INT 8
5904: PPUSH
5905: LD_INT 70
5907: NEG
5908: PPUSH
5909: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5913: LD_INT 152
5915: PPUSH
5916: LD_INT 65
5918: PPUSH
5919: LD_INT 8
5921: PPUSH
5922: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5926: LD_INT 133
5928: PPUSH
5929: LD_INT 76
5931: PPUSH
5932: LD_INT 8
5934: PPUSH
5935: LD_INT 6
5937: NEG
5938: PPUSH
5939: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5943: LD_INT 23
5945: PPUSH
5946: CALL_OW 87
// dialogue_skipped := false ;
5950: LD_ADDR_OWVAR 59
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// InitRuPatrols ;
5958: CALL 3333 0 0
// Say ( Heike , DH-Escape-1 ) ;
5962: LD_EXP 46
5966: PPUSH
5967: LD_STRING DH-Escape-1
5969: PPUSH
5970: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5974: LD_EXP 46
5978: PPUSH
5979: LD_STRING DH-Escape-2
5981: PPUSH
5982: CALL_OW 88
// StartLockerMinigame ;
5986: CALL 21748 0 0
// wait ( 0 0$1 ) ;
5990: LD_INT 35
5992: PPUSH
5993: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5997: LD_EXP 46
6001: PPUSH
6002: LD_STRING DH-Escape-4
6004: PPUSH
6005: CALL_OW 88
// wait ( 0 0$3 ) ;
6009: LD_INT 105
6011: PPUSH
6012: CALL_OW 67
// your_side := 2 ;
6016: LD_ADDR_OWVAR 2
6020: PUSH
6021: LD_INT 2
6023: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
6024: LD_EXP 46
6028: PPUSH
6029: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
6033: LD_INT 152
6035: PPUSH
6036: LD_INT 65
6038: PPUSH
6039: LD_INT 2
6041: PPUSH
6042: LD_INT 70
6044: NEG
6045: PPUSH
6046: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
6050: LD_INT 152
6052: PPUSH
6053: LD_INT 65
6055: PPUSH
6056: LD_INT 2
6058: PPUSH
6059: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
6063: LD_INT 133
6065: PPUSH
6066: LD_INT 76
6068: PPUSH
6069: LD_INT 8
6071: PPUSH
6072: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
6076: LD_EXP 46
6080: PPUSH
6081: LD_INT 128
6083: PPUSH
6084: LD_INT 64
6086: PPUSH
6087: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6091: LD_INT 35
6093: PPUSH
6094: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6098: LD_EXP 46
6102: PPUSH
6103: LD_INT 128
6105: PPUSH
6106: LD_INT 64
6108: PPUSH
6109: CALL_OW 307
6113: IFFALSE 6091
// ComHold ( Heike ) ;
6115: LD_EXP 46
6119: PPUSH
6120: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6124: LD_EXP 46
6128: PPUSH
6129: LD_STRING DH-Start-1
6131: PPUSH
6132: CALL_OW 88
// if not americanContact then
6136: LD_EXP 10
6140: NOT
6141: IFFALSE 6157
// Say ( Heike , DH-Start-c-2 ) else
6143: LD_EXP 46
6147: PPUSH
6148: LD_STRING DH-Start-c-2
6150: PPUSH
6151: CALL_OW 88
6155: GO 6189
// if johnnySaved then
6157: LD_EXP 3
6161: IFFALSE 6177
// Say ( Heike , DH-Start-a-2 ) else
6163: LD_EXP 46
6167: PPUSH
6168: LD_STRING DH-Start-a-2
6170: PPUSH
6171: CALL_OW 88
6175: GO 6189
// Say ( Heike , DH-Start-b-2 ) ;
6177: LD_EXP 46
6181: PPUSH
6182: LD_STRING DH-Start-b-2
6184: PPUSH
6185: CALL_OW 88
// Video ( false ) ;
6189: LD_INT 0
6191: PPUSH
6192: CALL 68729 0 1
// tick := 0 ;
6196: LD_ADDR_OWVAR 1
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6204: LD_STRING M1
6206: PPUSH
6207: CALL_OW 337
// enable ( gameStartEvent ) ;
6211: LD_INT 2
6213: ENABLE_MARKED
// SaveForQuickRestart ;
6214: CALL_OW 22
// end ;
6218: LD_VAR 0 1
6222: RET
// function ActionAdditional ; var i , un , tmp ; begin
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6229: LD_INT 115
6231: PPUSH
6232: LD_INT 27
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: LD_INT 6
6240: NEG
6241: PPUSH
6242: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6246: LD_EXP 46
6250: PPUSH
6251: LD_INT 115
6253: PPUSH
6254: LD_INT 27
6256: PPUSH
6257: CALL_OW 428
6261: PPUSH
6262: CALL_OW 52
// SetClass ( Heike , class_prison ) ;
6266: LD_EXP 46
6270: PPUSH
6271: LD_INT 33
6273: PPUSH
6274: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6278: LD_INT 124
6280: PPUSH
6281: LD_INT 39
6283: PPUSH
6284: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6288: LD_EXP 46
6292: PPUSH
6293: LD_STRING DH-Fail-1
6295: PPUSH
6296: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6300: LD_INT 3
6302: PPUSH
6303: CALL_OW 427
// ComExit ( Heike ) ;
6307: LD_EXP 46
6311: PPUSH
6312: CALL 69155 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6316: LD_EXP 46
6320: PPUSH
6321: LD_INT 109
6323: PPUSH
6324: LD_INT 33
6326: PPUSH
6327: CALL_OW 171
// AddComHold ( Heike ) ;
6331: LD_EXP 46
6335: PPUSH
6336: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6340: LD_INT 115
6342: PPUSH
6343: LD_INT 27
6345: PPUSH
6346: LD_INT 2
6348: PPUSH
6349: CALL_OW 331
// wait ( 0 0$2 ) ;
6353: LD_INT 70
6355: PPUSH
6356: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6367: LD_EXP 46
6371: PPUSH
6372: LD_INT 109
6374: PPUSH
6375: LD_INT 33
6377: PPUSH
6378: CALL_OW 307
6382: IFFALSE 6360
// Say ( Heike , DH-Fail-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING DH-Fail-2
6391: PPUSH
6392: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6396: LD_EXP 46
6400: PPUSH
6401: LD_INT 111
6403: PPUSH
6404: LD_INT 48
6406: PPUSH
6407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6411: LD_INT 35
6413: PPUSH
6414: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6418: LD_EXP 46
6422: PPUSH
6423: LD_INT 111
6425: PPUSH
6426: LD_INT 48
6428: PPUSH
6429: CALL_OW 297
6433: PUSH
6434: LD_INT 4
6436: LESS
6437: IFFALSE 6411
// AddComMoveXY ( Heike , 106 , 72 ) ;
6439: LD_EXP 46
6443: PPUSH
6444: LD_INT 106
6446: PPUSH
6447: LD_INT 72
6449: PPUSH
6450: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6454: LD_EXP 46
6458: PPUSH
6459: LD_INT 103
6461: PPUSH
6462: LD_INT 80
6464: PPUSH
6465: CALL_OW 171
// uc_side := 3 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 3
6476: ST_TO_ADDR
// uc_nation := 3 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 3
6484: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6485: LD_INT 1
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: LD_INT 6
6493: PPUSH
6494: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6498: LD_ADDR_OWVAR 29
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 12
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: ST_TO_ADDR
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6523: LD_VAR 0 3
6527: PPUSH
6528: LD_INT 134
6530: PPUSH
6531: LD_INT 52
6533: PPUSH
6534: LD_INT 4
6536: PPUSH
6537: LD_INT 0
6539: PPUSH
6540: CALL 70917 0 5
// ComTurnUnit ( un , Heike ) ;
6544: LD_VAR 0 3
6548: PPUSH
6549: LD_EXP 46
6553: PPUSH
6554: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6558: LD_VAR 0 3
6562: PPUSH
6563: LD_EXP 46
6567: PPUSH
6568: CALL_OW 112
// if GetSex ( un ) = sex_male then
6572: LD_VAR 0 3
6576: PPUSH
6577: CALL_OW 258
6581: PUSH
6582: LD_INT 1
6584: EQUAL
6585: IFFALSE 6601
// Say ( un , DRum-Fail-3 ) else
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_STRING DRum-Fail-3
6594: PPUSH
6595: CALL_OW 88
6599: GO 6613
// Say ( un , DRuf-Fail-3 ) ;
6601: LD_VAR 0 3
6605: PPUSH
6606: LD_STRING DRuf-Fail-3
6608: PPUSH
6609: CALL_OW 88
// for i := 1 to 3 do
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_INT 3
6625: PUSH
6626: FOR_TO
6627: IFFALSE 6700
// begin PrepareSoldier ( false , 10 ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_INT 10
6634: PPUSH
6635: CALL_OW 381
// un := CreateHuman ;
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: CALL_OW 44
6648: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6649: LD_ADDR_VAR 0 4
6653: PUSH
6654: LD_VAR 0 4
6658: PPUSH
6659: LD_VAR 0 3
6663: PPUSH
6664: CALL 68757 0 2
6668: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 8
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6684: LD_VAR 0 3
6688: PPUSH
6689: LD_EXP 46
6693: PPUSH
6694: CALL_OW 119
// end ;
6698: GO 6626
6700: POP
6701: POP
// repeat wait ( 0 0$1 ) ;
6702: LD_INT 35
6704: PPUSH
6705: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6709: LD_VAR 0 4
6713: PPUSH
6714: LD_INT 101
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 72
6728: PUSH
6729: LD_INT 1
6731: GREATER
6732: IFFALSE 6702
// wait ( 0 0$1 ) ;
6734: LD_INT 35
6736: PPUSH
6737: CALL_OW 67
// DialogueOn ;
6741: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6745: LD_EXP 46
6749: PPUSH
6750: LD_STRING DH-Fail-4
6752: PPUSH
6753: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6757: LD_EXP 46
6761: PPUSH
6762: LD_STRING DH-Fail-5
6764: PPUSH
6765: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6769: LD_EXP 46
6773: PPUSH
6774: LD_STRING DH-Fail-6
6776: PPUSH
6777: CALL_OW 88
// DialogueOff ;
6781: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6785: LD_VAR 0 4
6789: PPUSH
6790: LD_EXP 46
6794: PPUSH
6795: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6799: LD_INT 35
6801: PPUSH
6802: CALL_OW 67
// until IsDying ( Heike ) ;
6806: LD_EXP 46
6810: PPUSH
6811: CALL_OW 303
6815: IFFALSE 6799
// KillUnit ( Heike ) ;
6817: LD_EXP 46
6821: PPUSH
6822: CALL_OW 66
// wait ( 0 0$4 ) ;
6826: LD_INT 140
6828: PPUSH
6829: CALL_OW 67
// ResetFog ;
6833: CALL_OW 335
// DialogueOn ;
6837: CALL_OW 6
// dwait ( 0 0$1 ) ;
6841: LD_INT 35
6843: PPUSH
6844: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6848: LD_ADDR_EXP 46
6852: PUSH
6853: LD_STRING Heike
6855: PPUSH
6856: LD_EXP 1
6860: NOT
6861: PPUSH
6862: LD_EXP 2
6866: PPUSH
6867: CALL 30557 0 3
6871: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6872: LD_EXP 46
6876: PPUSH
6877: LD_STRING DH-Fail-7
6879: PPUSH
6880: CALL_OW 89
// DialogueOff ;
6884: CALL_OW 7
// YouLost ( Fail ) ;
6888: LD_STRING Fail
6890: PPUSH
6891: CALL_OW 104
// end ;
6895: LD_VAR 0 1
6899: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6900: LD_INT 2
6902: PPUSH
6903: LD_INT 173
6905: PPUSH
6906: LD_INT 29
6908: PPUSH
6909: CALL_OW 293
6913: IFFALSE 6936
6915: PUSH
6916: LD_EXP 46
6920: PPUSH
6921: LD_INT 173
6923: PPUSH
6924: LD_INT 29
6926: PPUSH
6927: CALL_OW 297
6931: PUSH
6932: LD_INT 6
6934: LESS
6935: AND
6936: IFFALSE 6953
6938: GO 6940
6940: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6941: LD_EXP 46
6945: PPUSH
6946: LD_STRING DH-EastRoad
6948: PPUSH
6949: CALL_OW 88
6953: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6954: LD_INT 2
6956: PPUSH
6957: LD_INT 149
6959: PPUSH
6960: LD_INT 3
6962: PPUSH
6963: CALL_OW 293
6967: IFFALSE 6990
6969: PUSH
6970: LD_EXP 46
6974: PPUSH
6975: LD_INT 149
6977: PPUSH
6978: LD_INT 3
6980: PPUSH
6981: CALL_OW 297
6985: PUSH
6986: LD_INT 6
6988: LESS
6989: AND
6990: IFFALSE 7007
6992: GO 6994
6994: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6995: LD_EXP 46
6999: PPUSH
7000: LD_STRING DH-EastRoad
7002: PPUSH
7003: CALL_OW 88
7007: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
7008: LD_INT 2
7010: PPUSH
7011: LD_INT 217
7013: PPUSH
7014: LD_INT 120
7016: PPUSH
7017: CALL_OW 293
7021: IFFALSE 7044
7023: PUSH
7024: LD_EXP 46
7028: PPUSH
7029: LD_INT 217
7031: PPUSH
7032: LD_INT 120
7034: PPUSH
7035: CALL_OW 297
7039: PUSH
7040: LD_INT 6
7042: LESS
7043: AND
7044: IFFALSE 7061
7046: GO 7048
7048: DISABLE
// Say ( Heike , DH-EastEnd ) ;
7049: LD_EXP 46
7053: PPUSH
7054: LD_STRING DH-EastEnd
7056: PPUSH
7057: CALL_OW 88
7061: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
7062: LD_EXP 46
7066: PPUSH
7067: LD_INT 11
7069: PPUSH
7070: CALL_OW 308
7074: IFFALSE 7112
7076: GO 7078
7078: DISABLE
// begin if not heikeSquad then
7079: LD_EXP 14
7083: NOT
7084: IFFALSE 7100
// Say ( Heike , DH-Hill ) else
7086: LD_EXP 46
7090: PPUSH
7091: LD_STRING DH-Hill
7093: PPUSH
7094: CALL_OW 88
7098: GO 7112
// Say ( Heike , DH-Hill-a ) ;
7100: LD_EXP 46
7104: PPUSH
7105: LD_STRING DH-Hill-a
7107: PPUSH
7108: CALL_OW 88
// end ;
7112: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) and not isAlarm marked gameStartEvent do var x , y , v ;
7113: LD_EXP 46
7117: PPUSH
7118: LD_INT 12
7120: PPUSH
7121: CALL_OW 308
7125: IFFALSE 7134
7127: PUSH
7128: LD_EXP 17
7132: NOT
7133: AND
7134: IFFALSE 7321
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin DialogueOn ;
7144: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7148: LD_EXP 46
7152: PPUSH
7153: CALL_OW 87
// x := GetX ( Heike ) ;
7157: LD_ADDR_VAR 0 1
7161: PUSH
7162: LD_EXP 46
7166: PPUSH
7167: CALL_OW 250
7171: ST_TO_ADDR
// y := GetY ( Heike ) ;
7172: LD_ADDR_VAR 0 2
7176: PUSH
7177: LD_EXP 46
7181: PPUSH
7182: CALL_OW 251
7186: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7187: LD_VAR 0 1
7191: PPUSH
7192: LD_VAR 0 2
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: LD_INT 12
7202: NEG
7203: PPUSH
7204: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7208: LD_VAR 0 1
7212: PPUSH
7213: LD_VAR 0 2
7217: PPUSH
7218: LD_INT 2
7220: PPUSH
7221: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7225: LD_INT 101
7227: PUSH
7228: LD_INT 2
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 2
7237: PUSH
7238: LD_INT 30
7240: PUSH
7241: LD_INT 32
7243: PUSH
7244: EMPTY
7245: LIST
7246: LIST
7247: PUSH
7248: LD_INT 30
7250: PUSH
7251: LD_INT 33
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PPUSH
7267: CALL_OW 69
7271: IFFALSE 7283
// v := 3 else
7273: LD_ADDR_VAR 0 3
7277: PUSH
7278: LD_INT 3
7280: ST_TO_ADDR
7281: GO 7291
// v := 2 ;
7283: LD_ADDR_VAR 0 3
7287: PUSH
7288: LD_INT 2
7290: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7291: LD_EXP 46
7295: PPUSH
7296: LD_STRING DH-Outpost-
7298: PUSH
7299: LD_INT 1
7301: PPUSH
7302: LD_VAR 0 3
7306: PPUSH
7307: CALL_OW 12
7311: STR
7312: PPUSH
7313: CALL_OW 88
// DialogueOff ;
7317: CALL_OW 7
// end ;
7321: PPOPN 3
7323: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7324: LD_EXP 46
7328: PPUSH
7329: LD_INT 64
7331: PPUSH
7332: CALL_OW 308
7336: IFFALSE 7523
7338: GO 7340
7340: DISABLE
7341: LD_INT 0
7343: PPUSH
7344: PPUSH
7345: PPUSH
// begin DialogueOn ;
7346: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7350: LD_EXP 46
7354: PPUSH
7355: CALL_OW 87
// x := GetX ( Heike ) ;
7359: LD_ADDR_VAR 0 1
7363: PUSH
7364: LD_EXP 46
7368: PPUSH
7369: CALL_OW 250
7373: ST_TO_ADDR
// y := GetY ( Heike ) ;
7374: LD_ADDR_VAR 0 2
7378: PUSH
7379: LD_EXP 46
7383: PPUSH
7384: CALL_OW 251
7388: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7389: LD_VAR 0 1
7393: PPUSH
7394: LD_VAR 0 2
7398: PPUSH
7399: LD_INT 2
7401: PPUSH
7402: LD_INT 12
7404: NEG
7405: PPUSH
7406: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: LD_VAR 0 2
7419: PPUSH
7420: LD_INT 2
7422: PPUSH
7423: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7427: LD_INT 101
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 2
7439: PUSH
7440: LD_INT 30
7442: PUSH
7443: LD_INT 32
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 30
7452: PUSH
7453: LD_INT 33
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 69
7473: IFFALSE 7485
// v := 3 else
7475: LD_ADDR_VAR 0 3
7479: PUSH
7480: LD_INT 3
7482: ST_TO_ADDR
7483: GO 7493
// v := 2 ;
7485: LD_ADDR_VAR 0 3
7489: PUSH
7490: LD_INT 2
7492: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7493: LD_EXP 46
7497: PPUSH
7498: LD_STRING DH-Outpost-
7500: PUSH
7501: LD_INT 1
7503: PPUSH
7504: LD_VAR 0 3
7508: PPUSH
7509: CALL_OW 12
7513: STR
7514: PPUSH
7515: CALL_OW 88
// DialogueOff ;
7519: CALL_OW 7
// end ;
7523: PPOPN 3
7525: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not isAlarm and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7526: LD_EXP 46
7530: PPUSH
7531: LD_INT 19
7533: PPUSH
7534: CALL_OW 308
7538: IFFALSE 7547
7540: PUSH
7541: LD_EXP 17
7545: NOT
7546: AND
7547: IFFALSE 7556
7549: PUSH
7550: LD_EXP 22
7554: NOT
7555: AND
7556: IFFALSE 7565
7558: PUSH
7559: LD_EXP 30
7563: NOT
7564: AND
7565: IFFALSE 7638
7567: GO 7569
7569: DISABLE
// begin DialogueOn ;
7570: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7574: LD_INT 152
7576: PPUSH
7577: LD_INT 115
7579: PPUSH
7580: LD_INT 2
7582: PPUSH
7583: LD_INT 16
7585: NEG
7586: PPUSH
7587: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7591: LD_INT 152
7593: PPUSH
7594: LD_INT 115
7596: PPUSH
7597: LD_INT 2
7599: PPUSH
7600: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7604: LD_INT 152
7606: PPUSH
7607: LD_INT 115
7609: PPUSH
7610: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7614: LD_EXP 46
7618: PPUSH
7619: LD_STRING DH-Stealth-1
7621: PPUSH
7622: CALL_OW 88
// DialogueOff ;
7626: CALL_OW 7
// adminAreaDiscovered := true ;
7630: LD_ADDR_EXP 22
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// end ;
7638: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7639: LD_INT 2
7641: PPUSH
7642: LD_EXP 47
7646: PPUSH
7647: CALL_OW 292
7651: IFFALSE 7673
7653: PUSH
7654: LD_EXP 46
7658: PPUSH
7659: LD_EXP 47
7663: PPUSH
7664: CALL_OW 296
7668: PUSH
7669: LD_INT 6
7671: LESS
7672: AND
7673: IFFALSE 7682
7675: PUSH
7676: LD_EXP 17
7680: NOT
7681: AND
7682: IFFALSE 7691
7684: PUSH
7685: LD_EXP 30
7689: NOT
7690: AND
7691: IFFALSE 7797
7693: GO 7695
7695: DISABLE
// begin DialogueOn ;
7696: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7700: LD_EXP 47
7704: PPUSH
7705: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7709: LD_EXP 47
7713: PPUSH
7714: LD_EXP 46
7718: PPUSH
7719: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7723: LD_EXP 46
7727: PPUSH
7728: LD_EXP 47
7732: PPUSH
7733: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7737: LD_EXP 46
7741: PPUSH
7742: LD_STRING DH-Givi-1
7744: PPUSH
7745: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7749: LD_EXP 47
7753: PPUSH
7754: LD_STRING DG-Givi-2
7756: PPUSH
7757: CALL_OW 88
// DialogueOff ;
7761: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7765: LD_EXP 47
7769: PPUSH
7770: LD_INT 2
7772: PPUSH
7773: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7777: LD_ADDR_EXP 14
7781: PUSH
7782: LD_EXP 14
7786: PPUSH
7787: LD_EXP 47
7791: PPUSH
7792: CALL 68757 0 2
7796: ST_TO_ADDR
// end ;
7797: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7798: LD_INT 2
7800: PPUSH
7801: LD_EXP 52
7805: PPUSH
7806: CALL_OW 292
7810: IFFALSE 7832
7812: PUSH
7813: LD_EXP 46
7817: PPUSH
7818: LD_EXP 52
7822: PPUSH
7823: CALL_OW 296
7827: PUSH
7828: LD_INT 6
7830: LESS
7831: AND
7832: IFFALSE 7841
7834: PUSH
7835: LD_EXP 17
7839: NOT
7840: AND
7841: IFFALSE 7850
7843: PUSH
7844: LD_EXP 30
7848: NOT
7849: AND
7850: IFFALSE 7956
7852: GO 7854
7854: DISABLE
// begin DialogueOn ;
7855: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7859: LD_EXP 52
7863: PPUSH
7864: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7868: LD_EXP 52
7872: PPUSH
7873: LD_EXP 46
7877: PPUSH
7878: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7882: LD_EXP 46
7886: PPUSH
7887: LD_EXP 52
7891: PPUSH
7892: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7896: LD_EXP 46
7900: PPUSH
7901: LD_STRING DH-Sophia-1
7903: PPUSH
7904: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7908: LD_EXP 52
7912: PPUSH
7913: LD_STRING DS-Sophia-2
7915: PPUSH
7916: CALL_OW 88
// DialogueOff ;
7920: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7924: LD_EXP 52
7928: PPUSH
7929: LD_INT 2
7931: PPUSH
7932: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7936: LD_ADDR_EXP 14
7940: PUSH
7941: LD_EXP 14
7945: PPUSH
7946: LD_EXP 52
7950: PPUSH
7951: CALL 68757 0 2
7955: ST_TO_ADDR
// end ;
7956: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7957: LD_INT 2
7959: PPUSH
7960: LD_EXP 54
7964: PPUSH
7965: CALL_OW 292
7969: IFFALSE 7991
7971: PUSH
7972: LD_EXP 46
7976: PPUSH
7977: LD_EXP 54
7981: PPUSH
7982: CALL_OW 296
7986: PUSH
7987: LD_INT 6
7989: LESS
7990: AND
7991: IFFALSE 8000
7993: PUSH
7994: LD_EXP 17
7998: NOT
7999: AND
8000: IFFALSE 8009
8002: PUSH
8003: LD_EXP 30
8007: NOT
8008: AND
8009: IFFALSE 8105
8011: GO 8013
8013: DISABLE
// begin DialogueOn ;
8014: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
8018: LD_EXP 54
8022: PPUSH
8023: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
8027: LD_EXP 46
8031: PPUSH
8032: LD_STRING DH-Olaf-1
8034: PPUSH
8035: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
8039: LD_EXP 54
8043: PPUSH
8044: LD_STRING DO-Olaf-2
8046: PPUSH
8047: CALL_OW 88
// if explosionsTakenByRussians then
8051: LD_EXP 21
8055: IFFALSE 8069
// Say ( Olaf , DO-Olaf-a-3 ) ;
8057: LD_EXP 54
8061: PPUSH
8062: LD_STRING DO-Olaf-a-3
8064: PPUSH
8065: CALL_OW 88
// DialogueOff ;
8069: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
8073: LD_EXP 54
8077: PPUSH
8078: LD_INT 2
8080: PPUSH
8081: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
8085: LD_ADDR_EXP 14
8089: PUSH
8090: LD_EXP 14
8094: PPUSH
8095: LD_EXP 54
8099: PPUSH
8100: CALL 68757 0 2
8104: ST_TO_ADDR
// end ;
8105: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
8106: LD_INT 2
8108: PPUSH
8109: LD_EXP 48
8113: PPUSH
8114: CALL_OW 292
8118: IFFALSE 8140
8120: PUSH
8121: LD_EXP 46
8125: PPUSH
8126: LD_EXP 48
8130: PPUSH
8131: CALL_OW 296
8135: PUSH
8136: LD_INT 6
8138: LESS
8139: AND
8140: IFFALSE 8149
8142: PUSH
8143: LD_EXP 17
8147: NOT
8148: AND
8149: IFFALSE 8158
8151: PUSH
8152: LD_EXP 30
8156: NOT
8157: AND
8158: IFFALSE 8386
8160: GO 8162
8162: DISABLE
8163: LD_INT 0
8165: PPUSH
8166: PPUSH
// begin DialogueOn ;
8167: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8171: LD_EXP 48
8175: PPUSH
8176: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8180: LD_ADDR_VAR 0 2
8184: PUSH
8185: LD_INT 18
8187: PPUSH
8188: LD_INT 0
8190: PPUSH
8191: CALL_OW 517
8195: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8196: LD_ADDR_VAR 0 1
8200: PUSH
8201: DOUBLE
8202: LD_INT 1
8204: DEC
8205: ST_TO_ADDR
8206: LD_VAR 0 2
8210: PUSH
8211: LD_INT 1
8213: ARRAY
8214: PUSH
8215: FOR_TO
8216: IFFALSE 8298
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8218: LD_VAR 0 2
8222: PUSH
8223: LD_INT 1
8225: ARRAY
8226: PUSH
8227: LD_VAR 0 1
8231: ARRAY
8232: PPUSH
8233: LD_VAR 0 2
8237: PUSH
8238: LD_INT 2
8240: ARRAY
8241: PUSH
8242: LD_VAR 0 1
8246: ARRAY
8247: PPUSH
8248: LD_INT 2
8250: PPUSH
8251: LD_INT 3
8253: NEG
8254: PPUSH
8255: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8259: LD_VAR 0 2
8263: PUSH
8264: LD_INT 1
8266: ARRAY
8267: PUSH
8268: LD_VAR 0 1
8272: ARRAY
8273: PPUSH
8274: LD_VAR 0 2
8278: PUSH
8279: LD_INT 2
8281: ARRAY
8282: PUSH
8283: LD_VAR 0 1
8287: ARRAY
8288: PPUSH
8289: LD_INT 2
8291: PPUSH
8292: CALL_OW 331
// end ;
8296: GO 8215
8298: POP
8299: POP
// Say ( Mike , DM-Mike-1 ) ;
8300: LD_EXP 48
8304: PPUSH
8305: LD_STRING DM-Mike-1
8307: PPUSH
8308: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8312: LD_EXP 46
8316: PPUSH
8317: LD_STRING DH-Mike-2
8319: PPUSH
8320: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8324: LD_INT 78
8326: PPUSH
8327: LD_INT 104
8329: PPUSH
8330: CALL_OW 84
// dwait ( 0 0$1 ) ;
8334: LD_INT 35
8336: PPUSH
8337: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8341: LD_EXP 46
8345: PPUSH
8346: CALL_OW 87
// DialogueOff ;
8350: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8354: LD_EXP 48
8358: PPUSH
8359: LD_INT 2
8361: PPUSH
8362: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8366: LD_ADDR_EXP 14
8370: PUSH
8371: LD_EXP 14
8375: PPUSH
8376: LD_EXP 48
8380: PPUSH
8381: CALL 68757 0 2
8385: ST_TO_ADDR
// end ;
8386: PPOPN 2
8388: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = class_prison and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8389: LD_EXP 46
8393: PPUSH
8394: LD_EXP 51
8398: PPUSH
8399: CALL_OW 296
8403: PUSH
8404: LD_INT 6
8406: LESS
8407: IFFALSE 8424
8409: PUSH
8410: LD_EXP 51
8414: PPUSH
8415: CALL_OW 257
8419: PUSH
8420: LD_INT 33
8422: EQUAL
8423: AND
8424: IFFALSE 8433
8426: PUSH
8427: LD_EXP 17
8431: NOT
8432: AND
8433: IFFALSE 8442
8435: PUSH
8436: LD_EXP 30
8440: NOT
8441: AND
8442: IFFALSE 8455
8444: PUSH
8445: LD_EXP 51
8449: PPUSH
8450: CALL_OW 302
8454: AND
8455: IFFALSE 8463
8457: PUSH
8458: LD_EXP 20
8462: AND
8463: IFFALSE 8477
8465: PUSH
8466: LD_EXP 51
8470: PUSH
8471: LD_EXP 14
8475: IN
8476: AND
8477: IFFALSE 8494
8479: PUSH
8480: LD_EXP 51
8484: PPUSH
8485: CALL_OW 255
8489: PUSH
8490: LD_INT 2
8492: EQUAL
8493: AND
8494: IFFALSE 8523
8496: GO 8498
8498: DISABLE
// begin DialogueOn ;
8499: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8503: LD_EXP 46
8507: PPUSH
8508: LD_STRING DH-Kaia-Revolver-2
8510: PPUSH
8511: CALL_OW 88
// SetClassKaiaRevolver ;
8515: CALL 1771 0 0
// DialogueOff ;
8519: CALL_OW 7
// end ;
8523: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8524: LD_EXP 49
8528: IFFALSE 8536
8530: PUSH
8531: LD_EXP 56
8535: AND
8536: IFFALSE 8553
8538: PUSH
8539: LD_EXP 56
8543: PPUSH
8544: CALL_OW 255
8548: PUSH
8549: LD_INT 2
8551: NONEQUAL
8552: AND
8553: IFFALSE 8570
8555: PUSH
8556: LD_EXP 49
8560: PPUSH
8561: CALL_OW 255
8565: PUSH
8566: LD_INT 2
8568: NONEQUAL
8569: AND
8570: IFFALSE 8597
8572: PUSH
8573: LD_EXP 14
8577: PPUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 2
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PPUSH
8588: CALL_OW 72
8592: PUSH
8593: LD_INT 5
8595: GREATER
8596: AND
8597: IFFALSE 8606
8599: PUSH
8600: LD_EXP 17
8604: NOT
8605: AND
8606: IFFALSE 8615
8608: PUSH
8609: LD_EXP 30
8613: NOT
8614: AND
8615: IFFALSE 9352
8617: GO 8619
8619: DISABLE
8620: LD_INT 0
8622: PPUSH
8623: PPUSH
// begin DialogueOn ;
8624: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8628: LD_ADDR_VAR 0 2
8632: PUSH
8633: LD_EXP 47
8637: PPUSH
8638: CALL_OW 302
8642: IFFALSE 8656
8644: PUSH
8645: LD_EXP 47
8649: PUSH
8650: LD_EXP 14
8654: IN
8655: AND
8656: IFFALSE 8673
8658: PUSH
8659: LD_EXP 47
8663: PPUSH
8664: CALL_OW 255
8668: PUSH
8669: LD_INT 2
8671: EQUAL
8672: AND
8673: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8674: LD_EXP 46
8678: PPUSH
8679: LD_STRING DH-Med-1
8681: PPUSH
8682: CALL_OW 88
// if hasGivi then
8686: LD_VAR 0 2
8690: IFFALSE 8706
// Say ( Givi , DG-Med-2 ) else
8692: LD_EXP 47
8696: PPUSH
8697: LD_STRING DG-Med-2
8699: PPUSH
8700: CALL_OW 88
8704: GO 8811
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8706: LD_EXP 14
8710: PUSH
8711: LD_EXP 57
8715: ISECT
8716: PPUSH
8717: LD_INT 22
8719: PUSH
8720: LD_INT 2
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 26
8729: PUSH
8730: LD_INT 1
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PPUSH
8741: CALL_OW 72
8745: PUSH
8746: LD_INT 1
8748: ARRAY
8749: PPUSH
8750: LD_STRING DArm-Med-e-2
8752: PPUSH
8753: CALL_OW 88
8757: NOT
8758: IFFALSE 8811
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8760: LD_EXP 14
8764: PUSH
8765: LD_EXP 57
8769: ISECT
8770: PPUSH
8771: LD_INT 22
8773: PUSH
8774: LD_INT 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 26
8783: PUSH
8784: LD_INT 2
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PPUSH
8795: CALL_OW 72
8799: PUSH
8800: LD_INT 1
8802: ARRAY
8803: PPUSH
8804: LD_STRING DArf-Med-e-2
8806: PPUSH
8807: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8811: LD_INT 154
8813: PPUSH
8814: LD_INT 119
8816: PPUSH
8817: LD_INT 70
8819: PPUSH
8820: CALL 20959 0 3
// Say ( Heike , DH-Med-3 ) ;
8824: LD_EXP 46
8828: PPUSH
8829: LD_STRING DH-Med-3
8831: PPUSH
8832: CALL_OW 88
// if hasGivi then
8836: LD_VAR 0 2
8840: IFFALSE 8856
// Say ( Givi , DG-Med-4 ) else
8842: LD_EXP 47
8846: PPUSH
8847: LD_STRING DG-Med-4
8849: PPUSH
8850: CALL_OW 88
8854: GO 8961
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8856: LD_EXP 14
8860: PUSH
8861: LD_EXP 57
8865: ISECT
8866: PPUSH
8867: LD_INT 22
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: EMPTY
8874: LIST
8875: LIST
8876: PUSH
8877: LD_INT 26
8879: PUSH
8880: LD_INT 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PPUSH
8891: CALL_OW 72
8895: PUSH
8896: LD_INT 1
8898: ARRAY
8899: PPUSH
8900: LD_STRING DArm-Med-e-4
8902: PPUSH
8903: CALL_OW 88
8907: NOT
8908: IFFALSE 8961
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8910: LD_EXP 14
8914: PUSH
8915: LD_EXP 57
8919: ISECT
8920: PPUSH
8921: LD_INT 22
8923: PUSH
8924: LD_INT 2
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 26
8933: PUSH
8934: LD_INT 2
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PPUSH
8945: CALL_OW 72
8949: PUSH
8950: LD_INT 1
8952: ARRAY
8953: PPUSH
8954: LD_STRING DArf-Med-e-4
8956: PPUSH
8957: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8961: LD_ADDR_VAR 0 1
8965: PUSH
8966: LD_EXP 51
8970: PPUSH
8971: CALL_OW 302
8975: IFFALSE 8989
8977: PUSH
8978: LD_EXP 51
8982: PUSH
8983: LD_EXP 14
8987: IN
8988: AND
8989: IFFALSE 9006
8991: PUSH
8992: LD_EXP 51
8996: PPUSH
8997: CALL_OW 255
9001: PUSH
9002: LD_INT 2
9004: EQUAL
9005: AND
9006: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
9007: LD_EXP 48
9011: PPUSH
9012: CALL_OW 302
9016: IFFALSE 9030
9018: PUSH
9019: LD_EXP 48
9023: PUSH
9024: LD_EXP 14
9028: IN
9029: AND
9030: IFFALSE 9047
9032: PUSH
9033: LD_EXP 51
9037: PPUSH
9038: CALL_OW 255
9042: PUSH
9043: LD_INT 2
9045: EQUAL
9046: AND
9047: IFFALSE 9079
// begin Say ( Mike , DM-Med-5 ) ;
9049: LD_EXP 48
9053: PPUSH
9054: LD_STRING DM-Med-5
9056: PPUSH
9057: CALL_OW 88
// if hasKaia then
9061: LD_VAR 0 1
9065: IFFALSE 9079
// Say ( Kaia , DK-Med-6 ) ;
9067: LD_EXP 51
9071: PPUSH
9072: LD_STRING DK-Med-6
9074: PPUSH
9075: CALL_OW 88
// end ; if hasKaia then
9079: LD_VAR 0 1
9083: IFFALSE 9332
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9085: LD_INT 175
9087: PPUSH
9088: LD_INT 123
9090: PPUSH
9091: LD_INT 2
9093: PPUSH
9094: LD_INT 8
9096: NEG
9097: PPUSH
9098: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9102: LD_INT 175
9104: PPUSH
9105: LD_INT 123
9107: PPUSH
9108: LD_INT 2
9110: PPUSH
9111: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9115: LD_INT 175
9117: PPUSH
9118: LD_INT 123
9120: PPUSH
9121: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9125: LD_EXP 51
9129: PPUSH
9130: LD_STRING DK-Med-7
9132: PPUSH
9133: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9137: LD_EXP 51
9141: PPUSH
9142: LD_STRING DK-Med-8
9144: PPUSH
9145: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9149: LD_EXP 53
9153: PPUSH
9154: CALL_OW 302
9158: IFFALSE 9172
9160: PUSH
9161: LD_EXP 53
9165: PUSH
9166: LD_EXP 14
9170: IN
9171: AND
9172: IFFALSE 9189
9174: PUSH
9175: LD_EXP 53
9179: PPUSH
9180: CALL_OW 255
9184: PUSH
9185: LD_INT 2
9187: EQUAL
9188: AND
9189: IFFALSE 9247
// begin Say ( Markov , DMar-Med-9 ) ;
9191: LD_EXP 53
9195: PPUSH
9196: LD_STRING DMar-Med-9
9198: PPUSH
9199: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9203: LD_EXP 51
9207: PPUSH
9208: LD_STRING DK-Med-10
9210: PPUSH
9211: CALL_OW 88
// if hasGivi then
9215: LD_VAR 0 2
9219: IFFALSE 9235
// Say ( Kaia , DK-Med-11 ) else
9221: LD_EXP 51
9225: PPUSH
9226: LD_STRING DK-Med-11
9228: PPUSH
9229: CALL_OW 88
9233: GO 9247
// Say ( Kaia , DK-Med-a-11 ) ;
9235: LD_EXP 51
9239: PPUSH
9240: LD_STRING DK-Med-a-11
9242: PPUSH
9243: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9247: LD_EXP 50
9251: PPUSH
9252: CALL_OW 302
9256: IFFALSE 9270
9258: PUSH
9259: LD_EXP 50
9263: PUSH
9264: LD_EXP 14
9268: IN
9269: AND
9270: IFFALSE 9287
9272: PUSH
9273: LD_EXP 50
9277: PPUSH
9278: CALL_OW 255
9282: PUSH
9283: LD_INT 2
9285: EQUAL
9286: AND
9287: IFFALSE 9332
// begin Say ( Kamil , DKam-Med-12 ) ;
9289: LD_EXP 50
9293: PPUSH
9294: LD_STRING DKam-Med-12
9296: PPUSH
9297: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9301: LD_EXP 50
9305: PPUSH
9306: LD_STRING DKam-Med-13
9308: PPUSH
9309: CALL_OW 88
// if not hasExplosionCollected then
9313: LD_EXP 23
9317: NOT
9318: IFFALSE 9332
// Say ( Heike , DH-Med-d-14 ) ;
9320: LD_EXP 46
9324: PPUSH
9325: LD_STRING DH-Med-d-14
9327: PPUSH
9328: CALL_OW 88
// end ; end ; DialogueOff ;
9332: CALL_OW 7
// adminAreaDiscovered := true ;
9336: LD_ADDR_EXP 22
9340: PUSH
9341: LD_INT 1
9343: ST_TO_ADDR
// laundryAllowed := true ;
9344: LD_ADDR_EXP 26
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// end ;
9352: PPOPN 2
9354: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9355: LD_EXP 49
9359: NOT
9360: IFFALSE 9368
9362: PUSH
9363: LD_EXP 56
9367: AND
9368: IFFALSE 9383
9370: PUSH
9371: LD_EXP 56
9375: PUSH
9376: LD_EXP 14
9380: IN
9381: NOT
9382: AND
9383: IFFALSE 9410
9385: PUSH
9386: LD_EXP 14
9390: PPUSH
9391: LD_INT 22
9393: PUSH
9394: LD_INT 2
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PPUSH
9401: CALL_OW 72
9405: PUSH
9406: LD_INT 4
9408: GREATER
9409: AND
9410: IFFALSE 9419
9412: PUSH
9413: LD_EXP 17
9417: NOT
9418: AND
9419: IFFALSE 9428
9421: PUSH
9422: LD_EXP 30
9426: NOT
9427: AND
9428: IFFALSE 10165
9430: GO 9432
9432: DISABLE
9433: LD_INT 0
9435: PPUSH
9436: PPUSH
// begin DialogueOn ;
9437: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9441: LD_ADDR_VAR 0 1
9445: PUSH
9446: LD_EXP 47
9450: PPUSH
9451: CALL_OW 302
9455: IFFALSE 9469
9457: PUSH
9458: LD_EXP 47
9462: PUSH
9463: LD_EXP 14
9467: IN
9468: AND
9469: IFFALSE 9486
9471: PUSH
9472: LD_EXP 47
9476: PPUSH
9477: CALL_OW 255
9481: PUSH
9482: LD_INT 2
9484: EQUAL
9485: AND
9486: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9487: LD_EXP 46
9491: PPUSH
9492: LD_STRING DH-Med-a-1
9494: PPUSH
9495: CALL_OW 88
// if hasGivi then
9499: LD_VAR 0 1
9503: IFFALSE 9519
// Say ( Givi , DG-Med-a-2 ) else
9505: LD_EXP 47
9509: PPUSH
9510: LD_STRING DG-Med-a-2
9512: PPUSH
9513: CALL_OW 88
9517: GO 9624
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9519: LD_EXP 14
9523: PUSH
9524: LD_EXP 57
9528: ISECT
9529: PPUSH
9530: LD_INT 22
9532: PUSH
9533: LD_INT 2
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 26
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: PPUSH
9554: CALL_OW 72
9558: PUSH
9559: LD_INT 1
9561: ARRAY
9562: PPUSH
9563: LD_STRING DArm-Med-f-2
9565: PPUSH
9566: CALL_OW 88
9570: NOT
9571: IFFALSE 9624
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9573: LD_EXP 14
9577: PUSH
9578: LD_EXP 57
9582: ISECT
9583: PPUSH
9584: LD_INT 22
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 26
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PPUSH
9608: CALL_OW 72
9612: PUSH
9613: LD_INT 1
9615: ARRAY
9616: PPUSH
9617: LD_STRING DArf-Med-f-2
9619: PPUSH
9620: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9624: LD_INT 154
9626: PPUSH
9627: LD_INT 119
9629: PPUSH
9630: LD_INT 70
9632: PPUSH
9633: CALL 20959 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9637: LD_EXP 46
9641: PPUSH
9642: LD_STRING DH-Med-a-3
9644: PPUSH
9645: CALL_OW 88
// if hasGivi then
9649: LD_VAR 0 1
9653: IFFALSE 9669
// Say ( Givi , DG-Med-a-4 ) else
9655: LD_EXP 47
9659: PPUSH
9660: LD_STRING DG-Med-a-4
9662: PPUSH
9663: CALL_OW 88
9667: GO 9774
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9669: LD_EXP 14
9673: PUSH
9674: LD_EXP 57
9678: ISECT
9679: PPUSH
9680: LD_INT 22
9682: PUSH
9683: LD_INT 2
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PUSH
9690: LD_INT 26
9692: PUSH
9693: LD_INT 1
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: PPUSH
9704: CALL_OW 72
9708: PUSH
9709: LD_INT 1
9711: ARRAY
9712: PPUSH
9713: LD_STRING DArm-Med-f-4
9715: PPUSH
9716: CALL_OW 88
9720: NOT
9721: IFFALSE 9774
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9723: LD_EXP 14
9727: PUSH
9728: LD_EXP 57
9732: ISECT
9733: PPUSH
9734: LD_INT 22
9736: PUSH
9737: LD_INT 2
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 26
9746: PUSH
9747: LD_INT 2
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 72
9762: PUSH
9763: LD_INT 1
9765: ARRAY
9766: PPUSH
9767: LD_STRING DArf-Med-f-4
9769: PPUSH
9770: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9774: LD_ADDR_VAR 0 2
9778: PUSH
9779: LD_EXP 51
9783: PPUSH
9784: CALL_OW 302
9788: IFFALSE 9802
9790: PUSH
9791: LD_EXP 51
9795: PUSH
9796: LD_EXP 14
9800: IN
9801: AND
9802: IFFALSE 9819
9804: PUSH
9805: LD_EXP 51
9809: PPUSH
9810: CALL_OW 255
9814: PUSH
9815: LD_INT 2
9817: EQUAL
9818: AND
9819: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9820: LD_EXP 48
9824: PPUSH
9825: CALL_OW 302
9829: IFFALSE 9843
9831: PUSH
9832: LD_EXP 48
9836: PUSH
9837: LD_EXP 14
9841: IN
9842: AND
9843: IFFALSE 9860
9845: PUSH
9846: LD_EXP 48
9850: PPUSH
9851: CALL_OW 255
9855: PUSH
9856: LD_INT 2
9858: EQUAL
9859: AND
9860: IFFALSE 9892
// begin Say ( Mike , DM-Med-5 ) ;
9862: LD_EXP 48
9866: PPUSH
9867: LD_STRING DM-Med-5
9869: PPUSH
9870: CALL_OW 88
// if hasKaia then
9874: LD_VAR 0 2
9878: IFFALSE 9892
// Say ( Kaia , DK-Med-6 ) ;
9880: LD_EXP 51
9884: PPUSH
9885: LD_STRING DK-Med-6
9887: PPUSH
9888: CALL_OW 88
// end ; if hasKaia then
9892: LD_VAR 0 2
9896: IFFALSE 10145
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9898: LD_INT 175
9900: PPUSH
9901: LD_INT 123
9903: PPUSH
9904: LD_INT 2
9906: PPUSH
9907: LD_INT 8
9909: NEG
9910: PPUSH
9911: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9915: LD_INT 175
9917: PPUSH
9918: LD_INT 123
9920: PPUSH
9921: LD_INT 2
9923: PPUSH
9924: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9928: LD_INT 175
9930: PPUSH
9931: LD_INT 123
9933: PPUSH
9934: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9938: LD_EXP 51
9942: PPUSH
9943: LD_STRING DK-Med-7
9945: PPUSH
9946: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9950: LD_EXP 51
9954: PPUSH
9955: LD_STRING DK-Med-8
9957: PPUSH
9958: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9962: LD_EXP 53
9966: PPUSH
9967: CALL_OW 302
9971: IFFALSE 9985
9973: PUSH
9974: LD_EXP 53
9978: PUSH
9979: LD_EXP 14
9983: IN
9984: AND
9985: IFFALSE 10002
9987: PUSH
9988: LD_EXP 53
9992: PPUSH
9993: CALL_OW 255
9997: PUSH
9998: LD_INT 2
10000: EQUAL
10001: AND
10002: IFFALSE 10060
// begin Say ( Markov , DMar-Med-9 ) ;
10004: LD_EXP 53
10008: PPUSH
10009: LD_STRING DMar-Med-9
10011: PPUSH
10012: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DK-Med-10
10023: PPUSH
10024: CALL_OW 88
// if hasGivi then
10028: LD_VAR 0 1
10032: IFFALSE 10048
// Say ( Kaia , DK-Med-11 ) else
10034: LD_EXP 51
10038: PPUSH
10039: LD_STRING DK-Med-11
10041: PPUSH
10042: CALL_OW 88
10046: GO 10060
// Say ( Kaia , DK-Med-a-11 ) ;
10048: LD_EXP 51
10052: PPUSH
10053: LD_STRING DK-Med-a-11
10055: PPUSH
10056: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10060: LD_EXP 50
10064: PPUSH
10065: CALL_OW 302
10069: IFFALSE 10083
10071: PUSH
10072: LD_EXP 50
10076: PUSH
10077: LD_EXP 14
10081: IN
10082: AND
10083: IFFALSE 10100
10085: PUSH
10086: LD_EXP 50
10090: PPUSH
10091: CALL_OW 255
10095: PUSH
10096: LD_INT 2
10098: EQUAL
10099: AND
10100: IFFALSE 10145
// begin Say ( Kamil , DKam-Med-12 ) ;
10102: LD_EXP 50
10106: PPUSH
10107: LD_STRING DKam-Med-12
10109: PPUSH
10110: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10114: LD_EXP 50
10118: PPUSH
10119: LD_STRING DKam-Med-13
10121: PPUSH
10122: CALL_OW 88
// if not hasExplosionCollected then
10126: LD_EXP 23
10130: NOT
10131: IFFALSE 10145
// Say ( Heike , DH-Med-d-14 ) ;
10133: LD_EXP 46
10137: PPUSH
10138: LD_STRING DH-Med-d-14
10140: PPUSH
10141: CALL_OW 88
// end ; end ; DialogueOff ;
10145: CALL_OW 7
// adminAreaDiscovered := true ;
10149: LD_ADDR_EXP 22
10153: PUSH
10154: LD_INT 1
10156: ST_TO_ADDR
// laundryAllowed := true ;
10157: LD_ADDR_EXP 26
10161: PUSH
10162: LD_INT 1
10164: ST_TO_ADDR
// end ;
10165: PPOPN 2
10167: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
10168: LD_EXP 49
10172: IFFALSE 10181
10174: PUSH
10175: LD_EXP 56
10179: NOT
10180: AND
10181: IFFALSE 10196
10183: PUSH
10184: LD_EXP 49
10188: PUSH
10189: LD_EXP 14
10193: IN
10194: NOT
10195: AND
10196: IFFALSE 10223
10198: PUSH
10199: LD_EXP 14
10203: PPUSH
10204: LD_INT 22
10206: PUSH
10207: LD_INT 2
10209: PUSH
10210: EMPTY
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 72
10218: PUSH
10219: LD_INT 4
10221: GREATER
10222: AND
10223: IFFALSE 10232
10225: PUSH
10226: LD_EXP 17
10230: NOT
10231: AND
10232: IFFALSE 10241
10234: PUSH
10235: LD_EXP 30
10239: NOT
10240: AND
10241: IFFALSE 10978
10243: GO 10245
10245: DISABLE
10246: LD_INT 0
10248: PPUSH
10249: PPUSH
// begin DialogueOn ;
10250: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10254: LD_ADDR_VAR 0 1
10258: PUSH
10259: LD_EXP 47
10263: PPUSH
10264: CALL_OW 302
10268: IFFALSE 10282
10270: PUSH
10271: LD_EXP 47
10275: PUSH
10276: LD_EXP 14
10280: IN
10281: AND
10282: IFFALSE 10299
10284: PUSH
10285: LD_EXP 47
10289: PPUSH
10290: CALL_OW 255
10294: PUSH
10295: LD_INT 2
10297: EQUAL
10298: AND
10299: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10300: LD_EXP 46
10304: PPUSH
10305: LD_STRING DH-Med-b-1
10307: PPUSH
10308: CALL_OW 88
// if hasGivi then
10312: LD_VAR 0 1
10316: IFFALSE 10332
// Say ( Givi , DG-Med-a-2 ) else
10318: LD_EXP 47
10322: PPUSH
10323: LD_STRING DG-Med-a-2
10325: PPUSH
10326: CALL_OW 88
10330: GO 10437
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10332: LD_EXP 14
10336: PUSH
10337: LD_EXP 57
10341: ISECT
10342: PPUSH
10343: LD_INT 22
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 26
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 72
10371: PUSH
10372: LD_INT 1
10374: ARRAY
10375: PPUSH
10376: LD_STRING DArm-Med-f-2
10378: PPUSH
10379: CALL_OW 88
10383: NOT
10384: IFFALSE 10437
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10386: LD_EXP 14
10390: PUSH
10391: LD_EXP 57
10395: ISECT
10396: PPUSH
10397: LD_INT 22
10399: PUSH
10400: LD_INT 2
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 26
10409: PUSH
10410: LD_INT 2
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 72
10425: PUSH
10426: LD_INT 1
10428: ARRAY
10429: PPUSH
10430: LD_STRING DArf-Med-f-2
10432: PPUSH
10433: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10437: LD_INT 154
10439: PPUSH
10440: LD_INT 119
10442: PPUSH
10443: LD_INT 70
10445: PPUSH
10446: CALL 20959 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10450: LD_EXP 46
10454: PPUSH
10455: LD_STRING DH-Med-a-3
10457: PPUSH
10458: CALL_OW 88
// if hasGivi then
10462: LD_VAR 0 1
10466: IFFALSE 10482
// Say ( Givi , DG-Med-a-4 ) else
10468: LD_EXP 47
10472: PPUSH
10473: LD_STRING DG-Med-a-4
10475: PPUSH
10476: CALL_OW 88
10480: GO 10587
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10482: LD_EXP 14
10486: PUSH
10487: LD_EXP 57
10491: ISECT
10492: PPUSH
10493: LD_INT 22
10495: PUSH
10496: LD_INT 2
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: LD_INT 26
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PPUSH
10517: CALL_OW 72
10521: PUSH
10522: LD_INT 1
10524: ARRAY
10525: PPUSH
10526: LD_STRING DArm-Med-f-4
10528: PPUSH
10529: CALL_OW 88
10533: NOT
10534: IFFALSE 10587
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10536: LD_EXP 14
10540: PUSH
10541: LD_EXP 57
10545: ISECT
10546: PPUSH
10547: LD_INT 22
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 26
10559: PUSH
10560: LD_INT 2
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 72
10575: PUSH
10576: LD_INT 1
10578: ARRAY
10579: PPUSH
10580: LD_STRING DArf-Med-f-4
10582: PPUSH
10583: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: LD_EXP 51
10596: PPUSH
10597: CALL_OW 302
10601: IFFALSE 10615
10603: PUSH
10604: LD_EXP 51
10608: PUSH
10609: LD_EXP 14
10613: IN
10614: AND
10615: IFFALSE 10632
10617: PUSH
10618: LD_EXP 51
10622: PPUSH
10623: CALL_OW 255
10627: PUSH
10628: LD_INT 2
10630: EQUAL
10631: AND
10632: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10633: LD_EXP 48
10637: PPUSH
10638: CALL_OW 302
10642: IFFALSE 10656
10644: PUSH
10645: LD_EXP 48
10649: PUSH
10650: LD_EXP 14
10654: IN
10655: AND
10656: IFFALSE 10673
10658: PUSH
10659: LD_EXP 48
10663: PPUSH
10664: CALL_OW 255
10668: PUSH
10669: LD_INT 2
10671: EQUAL
10672: AND
10673: IFFALSE 10705
// begin Say ( Mike , DM-Med-5 ) ;
10675: LD_EXP 48
10679: PPUSH
10680: LD_STRING DM-Med-5
10682: PPUSH
10683: CALL_OW 88
// if hasKaia then
10687: LD_VAR 0 2
10691: IFFALSE 10705
// Say ( Kaia , DK-Med-6 ) ;
10693: LD_EXP 51
10697: PPUSH
10698: LD_STRING DK-Med-6
10700: PPUSH
10701: CALL_OW 88
// end ; if hasKaia then
10705: LD_VAR 0 2
10709: IFFALSE 10958
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10711: LD_INT 175
10713: PPUSH
10714: LD_INT 123
10716: PPUSH
10717: LD_INT 2
10719: PPUSH
10720: LD_INT 8
10722: NEG
10723: PPUSH
10724: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10728: LD_INT 175
10730: PPUSH
10731: LD_INT 123
10733: PPUSH
10734: LD_INT 2
10736: PPUSH
10737: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10741: LD_INT 175
10743: PPUSH
10744: LD_INT 123
10746: PPUSH
10747: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10751: LD_EXP 51
10755: PPUSH
10756: LD_STRING DK-Med-7
10758: PPUSH
10759: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10763: LD_EXP 51
10767: PPUSH
10768: LD_STRING DK-Med-8
10770: PPUSH
10771: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10775: LD_EXP 53
10779: PPUSH
10780: CALL_OW 302
10784: IFFALSE 10798
10786: PUSH
10787: LD_EXP 53
10791: PUSH
10792: LD_EXP 14
10796: IN
10797: AND
10798: IFFALSE 10815
10800: PUSH
10801: LD_EXP 53
10805: PPUSH
10806: CALL_OW 255
10810: PUSH
10811: LD_INT 2
10813: EQUAL
10814: AND
10815: IFFALSE 10873
// begin Say ( Markov , DMar-Med-9 ) ;
10817: LD_EXP 53
10821: PPUSH
10822: LD_STRING DMar-Med-9
10824: PPUSH
10825: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10829: LD_EXP 51
10833: PPUSH
10834: LD_STRING DK-Med-10
10836: PPUSH
10837: CALL_OW 88
// if hasGivi then
10841: LD_VAR 0 1
10845: IFFALSE 10861
// Say ( Kaia , DK-Med-11 ) else
10847: LD_EXP 51
10851: PPUSH
10852: LD_STRING DK-Med-11
10854: PPUSH
10855: CALL_OW 88
10859: GO 10873
// Say ( Kaia , DK-Med-a-11 ) ;
10861: LD_EXP 51
10865: PPUSH
10866: LD_STRING DK-Med-a-11
10868: PPUSH
10869: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10873: LD_EXP 50
10877: PPUSH
10878: CALL_OW 302
10882: IFFALSE 10896
10884: PUSH
10885: LD_EXP 50
10889: PUSH
10890: LD_EXP 14
10894: IN
10895: AND
10896: IFFALSE 10913
10898: PUSH
10899: LD_EXP 50
10903: PPUSH
10904: CALL_OW 255
10908: PUSH
10909: LD_INT 2
10911: EQUAL
10912: AND
10913: IFFALSE 10958
// begin Say ( Kamil , DKam-Med-12 ) ;
10915: LD_EXP 50
10919: PPUSH
10920: LD_STRING DKam-Med-12
10922: PPUSH
10923: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10927: LD_EXP 50
10931: PPUSH
10932: LD_STRING DKam-Med-13
10934: PPUSH
10935: CALL_OW 88
// if not hasExplosionCollected then
10939: LD_EXP 23
10943: NOT
10944: IFFALSE 10958
// Say ( Heike , DH-Med-d-14 ) ;
10946: LD_EXP 46
10950: PPUSH
10951: LD_STRING DH-Med-d-14
10953: PPUSH
10954: CALL_OW 88
// end ; end ; DialogueOff ;
10958: CALL_OW 7
// adminAreaDiscovered := true ;
10962: LD_ADDR_EXP 22
10966: PUSH
10967: LD_INT 1
10969: ST_TO_ADDR
// laundryAllowed := true ;
10970: LD_ADDR_EXP 26
10974: PUSH
10975: LD_INT 1
10977: ST_TO_ADDR
// end ;
10978: PPOPN 2
10980: END
// every 0 0$1 trigger laundryAllowed do
10981: LD_EXP 26
10985: IFFALSE 10997
10987: GO 10989
10989: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10990: LD_STRING M1-laundry
10992: PPUSH
10993: CALL_OW 337
10997: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10998: LD_EXP 49
11002: NOT
11003: IFFALSE 11012
11005: PUSH
11006: LD_EXP 56
11010: NOT
11011: AND
11012: IFFALSE 11025
11014: PUSH
11015: LD_EXP 54
11019: PPUSH
11020: CALL_OW 302
11024: AND
11025: IFFALSE 11039
11027: PUSH
11028: LD_EXP 54
11032: PUSH
11033: LD_EXP 14
11037: IN
11038: AND
11039: IFFALSE 11056
11041: PUSH
11042: LD_EXP 54
11046: PPUSH
11047: CALL_OW 255
11051: PUSH
11052: LD_INT 2
11054: EQUAL
11055: AND
11056: IFFALSE 11065
11058: PUSH
11059: LD_EXP 17
11063: NOT
11064: AND
11065: IFFALSE 11074
11067: PUSH
11068: LD_EXP 30
11072: NOT
11073: AND
11074: IFFALSE 11234
11076: GO 11078
11078: DISABLE
// begin DialogueOn ;
11079: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
11083: LD_INT 152
11085: PPUSH
11086: LD_INT 115
11088: PPUSH
11089: LD_INT 2
11091: PPUSH
11092: LD_INT 16
11094: NEG
11095: PPUSH
11096: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
11100: LD_INT 152
11102: PPUSH
11103: LD_INT 115
11105: PPUSH
11106: LD_INT 2
11108: PPUSH
11109: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
11113: LD_INT 152
11115: PPUSH
11116: LD_INT 115
11118: PPUSH
11119: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
11123: LD_EXP 54
11127: PPUSH
11128: LD_STRING DO-Med-c-1
11130: PPUSH
11131: CALL_OW 88
// if not hasExplosionCollected then
11135: LD_EXP 23
11139: NOT
11140: IFFALSE 11156
// Say ( Heike , DH-Med-d-14 ) else
11142: LD_EXP 46
11146: PPUSH
11147: LD_STRING DH-Med-d-14
11149: PPUSH
11150: CALL_OW 88
11154: GO 11222
// begin Say ( Heike , DH-Med-c-2 ) ;
11156: LD_EXP 46
11160: PPUSH
11161: LD_STRING DH-Med-c-2
11163: PPUSH
11164: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
11168: LD_EXP 51
11172: PPUSH
11173: CALL_OW 302
11177: IFFALSE 11191
11179: PUSH
11180: LD_EXP 51
11184: PUSH
11185: LD_EXP 14
11189: IN
11190: AND
11191: IFFALSE 11208
11193: PUSH
11194: LD_EXP 51
11198: PPUSH
11199: CALL_OW 255
11203: PUSH
11204: LD_INT 2
11206: EQUAL
11207: AND
11208: IFFALSE 11222
// Say ( Kaia , DK-Med-c-3 ) ;
11210: LD_EXP 51
11214: PPUSH
11215: LD_STRING DK-Med-c-3
11217: PPUSH
11218: CALL_OW 88
// end ; DialogueOff ;
11222: CALL_OW 7
// adminAreaDiscovered := true ;
11226: LD_ADDR_EXP 22
11230: PUSH
11231: LD_INT 1
11233: ST_TO_ADDR
// end ;
11234: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
11235: LD_EXP 51
11239: PPUSH
11240: CALL_OW 256
11244: PUSH
11245: LD_INT 250
11247: LESS
11248: IFFALSE 11262
11250: PUSH
11251: LD_EXP 51
11255: PUSH
11256: LD_EXP 14
11260: IN
11261: AND
11262: IFFALSE 11270
11264: PUSH
11265: LD_EXP 17
11269: AND
11270: IFFALSE 11278
11272: PUSH
11273: LD_EXP 24
11277: AND
11278: IFFALSE 11407
11280: GO 11282
11282: DISABLE
// begin DialogueOn ;
11283: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11287: LD_EXP 51
11291: PPUSH
11292: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11296: LD_EXP 51
11300: PPUSH
11301: LD_STRING DK-death-1
11303: PPUSH
11304: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11308: LD_EXP 46
11312: PPUSH
11313: LD_STRING DH-death-2
11315: PPUSH
11316: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11320: LD_EXP 51
11324: PPUSH
11325: LD_STRING DK-death-3
11327: PPUSH
11328: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11332: LD_EXP 51
11336: PPUSH
11337: LD_STRING DK-death-4
11339: PPUSH
11340: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11344: LD_EXP 51
11348: PPUSH
11349: LD_INT 8
11351: PPUSH
11352: CALL_OW 235
// ComStop ( Kaia ) ;
11356: LD_EXP 51
11360: PPUSH
11361: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11365: LD_INT 8
11367: PPUSH
11368: LD_INT 2
11370: PPUSH
11371: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11375: LD_ADDR_EXP 14
11379: PUSH
11380: LD_EXP 14
11384: PUSH
11385: LD_EXP 51
11389: DIFF
11390: ST_TO_ADDR
// DialogueOff ;
11391: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11395: LD_EXP 48
11399: PPUSH
11400: LD_STRING DM-death-5
11402: PPUSH
11403: CALL_OW 88
// end ;
11407: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11408: LD_EXP 25
11412: NOT
11413: IFFALSE 11422
11415: PUSH
11416: LD_EXP 30
11420: NOT
11421: AND
11422: IFFALSE 11437
11424: PUSH
11425: LD_EXP 59
11429: PUSH
11430: LD_EXP 14
11434: IN
11435: NOT
11436: AND
11437: IFFALSE 11453
11439: PUSH
11440: LD_INT 2
11442: PPUSH
11443: LD_EXP 59
11447: PPUSH
11448: CALL_OW 292
11452: AND
11453: IFFALSE 11475
11455: PUSH
11456: LD_EXP 46
11460: PPUSH
11461: LD_EXP 59
11465: PPUSH
11466: CALL_OW 296
11470: PUSH
11471: LD_INT 6
11473: LESS
11474: AND
11475: IFFALSE 11484
11477: PUSH
11478: LD_EXP 17
11482: NOT
11483: AND
11484: IFFALSE 11708
11486: GO 11488
11488: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11489: LD_EXP 59
11493: PPUSH
11494: LD_EXP 46
11498: PPUSH
11499: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11503: LD_EXP 46
11507: PPUSH
11508: LD_EXP 59
11512: PPUSH
11513: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11517: LD_INT 10
11519: PPUSH
11520: CALL_OW 67
// DialogueOn ;
11524: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11528: LD_EXP 59
11532: PPUSH
11533: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11537: LD_EXP 46
11541: PPUSH
11542: LD_STRING DH-Deal-1
11544: PPUSH
11545: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11549: LD_EXP 59
11553: PPUSH
11554: LD_STRING DJ-Deal-2
11556: PPUSH
11557: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11561: LD_EXP 46
11565: PPUSH
11566: LD_STRING DH-Deal-3
11568: PPUSH
11569: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11573: LD_EXP 59
11577: PPUSH
11578: LD_STRING DJ-Deal-4
11580: PPUSH
11581: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11585: LD_EXP 59
11589: PPUSH
11590: LD_STRING DJ-Deal-5
11592: PPUSH
11593: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11597: LD_EXP 59
11601: PPUSH
11602: LD_STRING DJ-Deal-6
11604: PPUSH
11605: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11609: LD_EXP 59
11613: PPUSH
11614: LD_STRING DJ-Deal-7
11616: PPUSH
11617: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11621: LD_EXP 46
11625: PPUSH
11626: LD_STRING DH-Deal-8
11628: PPUSH
11629: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11633: LD_EXP 46
11637: PPUSH
11638: LD_STRING DH-Deal-9
11640: PPUSH
11641: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11645: LD_EXP 59
11649: PPUSH
11650: LD_STRING DJ-Deal-10
11652: PPUSH
11653: CALL_OW 88
// DialogueOff ;
11657: CALL_OW 7
// contactWithAmerican := true ;
11661: LD_ADDR_EXP 25
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11669: LD_STRING M1-american-out
11671: PPUSH
11672: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11676: LD_EXP 59
11680: PPUSH
11681: LD_INT 2
11683: PPUSH
11684: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11688: LD_ADDR_EXP 14
11692: PUSH
11693: LD_EXP 14
11697: PPUSH
11698: LD_EXP 59
11702: PPUSH
11703: CALL 68757 0 2
11707: ST_TO_ADDR
// end ;
11708: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11709: LD_EXP 25
11713: IFFALSE 11722
11715: PUSH
11716: LD_EXP 30
11720: NOT
11721: AND
11722: IFFALSE 11737
11724: PUSH
11725: LD_EXP 59
11729: PUSH
11730: LD_EXP 14
11734: IN
11735: NOT
11736: AND
11737: IFFALSE 11753
11739: PUSH
11740: LD_INT 2
11742: PPUSH
11743: LD_EXP 59
11747: PPUSH
11748: CALL_OW 292
11752: AND
11753: IFFALSE 11775
11755: PUSH
11756: LD_EXP 46
11760: PPUSH
11761: LD_EXP 59
11765: PPUSH
11766: CALL_OW 296
11770: PUSH
11771: LD_INT 6
11773: LESS
11774: AND
11775: IFFALSE 11784
11777: PUSH
11778: LD_EXP 17
11782: NOT
11783: AND
11784: IFFALSE 11909
11786: GO 11788
11788: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11789: LD_EXP 59
11793: PPUSH
11794: LD_EXP 46
11798: PPUSH
11799: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11803: LD_EXP 46
11807: PPUSH
11808: LD_EXP 59
11812: PPUSH
11813: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11817: LD_INT 10
11819: PPUSH
11820: CALL_OW 67
// DialogueOn ;
11824: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11828: LD_EXP 59
11832: PPUSH
11833: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11837: LD_EXP 59
11841: PPUSH
11842: LD_STRING DJ-Escort-1
11844: PPUSH
11845: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11849: LD_EXP 46
11853: PPUSH
11854: LD_STRING DH-Escort-2
11856: PPUSH
11857: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11861: LD_EXP 59
11865: PPUSH
11866: LD_STRING DJ-Escort-3
11868: PPUSH
11869: CALL_OW 88
// DialogueOff ;
11873: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11877: LD_EXP 59
11881: PPUSH
11882: LD_INT 2
11884: PPUSH
11885: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11889: LD_ADDR_EXP 14
11893: PUSH
11894: LD_EXP 14
11898: PPUSH
11899: LD_EXP 59
11903: PPUSH
11904: CALL 68757 0 2
11908: ST_TO_ADDR
// end ;
11909: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11910: LD_EXP 25
11914: IFFALSE 11923
11916: PUSH
11917: LD_EXP 30
11921: NOT
11922: AND
11923: IFFALSE 11984
11925: PUSH
11926: LD_EXP 58
11930: PUSH
11931: LD_EXP 14
11935: DIFF
11936: PPUSH
11937: LD_INT 22
11939: PUSH
11940: LD_INT 4
11942: PUSH
11943: EMPTY
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 3
11949: PUSH
11950: LD_INT 120
11952: PUSH
11953: LD_INT 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 101
11966: PUSH
11967: LD_INT 2
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 72
11983: AND
11984: IFFALSE 11993
11986: PUSH
11987: LD_EXP 17
11991: NOT
11992: AND
11993: IFFALSE 12220
11995: GO 11997
11997: DISABLE
11998: LD_INT 0
12000: PPUSH
// begin enable ;
12001: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12002: LD_ADDR_VAR 0 1
12006: PUSH
12007: LD_EXP 58
12011: PUSH
12012: LD_EXP 14
12016: DIFF
12017: PPUSH
12018: LD_INT 22
12020: PUSH
12021: LD_INT 4
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 91
12030: PUSH
12031: LD_EXP 46
12035: PUSH
12036: LD_INT 6
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 101
12046: PUSH
12047: LD_INT 2
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 72
12063: PPUSH
12064: LD_EXP 46
12068: PPUSH
12069: CALL_OW 74
12073: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12074: LD_VAR 0 1
12078: PPUSH
12079: LD_EXP 46
12083: PPUSH
12084: CALL_OW 296
12088: PUSH
12089: LD_INT 6
12091: LESS
12092: IFFALSE 12220
// begin DialogueOn ;
12094: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12107: LD_EXP 46
12111: PPUSH
12112: LD_STRING DH-USsol-1
12114: PPUSH
12115: CALL_OW 88
// if un <> Jerry then
12119: LD_VAR 0 1
12123: PUSH
12124: LD_EXP 61
12128: NONEQUAL
12129: IFFALSE 12172
// if GetSex ( un ) = sex_male then
12131: LD_VAR 0 1
12135: PPUSH
12136: CALL_OW 258
12140: PUSH
12141: LD_INT 1
12143: EQUAL
12144: IFFALSE 12160
// Say ( un , DUSM-USsol-2 ) else
12146: LD_VAR 0 1
12150: PPUSH
12151: LD_STRING DUSM-USsol-2
12153: PPUSH
12154: CALL_OW 88
12158: GO 12172
// Say ( un , DUSF-USsol-2 ) ;
12160: LD_VAR 0 1
12164: PPUSH
12165: LD_STRING DUSF-USsol-2
12167: PPUSH
12168: CALL_OW 88
// DialogueOff ;
12172: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12176: LD_ADDR_EXP 14
12180: PUSH
12181: LD_EXP 14
12185: PPUSH
12186: LD_VAR 0 1
12190: PPUSH
12191: CALL 68757 0 2
12195: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12196: LD_VAR 0 1
12200: PPUSH
12201: LD_INT 1
12203: PPUSH
12204: CALL_OW 109
// SetSide ( un , 2 ) ;
12208: LD_VAR 0 1
12212: PPUSH
12213: LD_INT 2
12215: PPUSH
12216: CALL_OW 235
// end ; end ;
12220: PPOPN 1
12222: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
12223: LD_EXP 57
12227: IFFALSE 12236
12229: PUSH
12230: LD_EXP 30
12234: NOT
12235: AND
12236: IFFALSE 12303
12238: PUSH
12239: LD_EXP 57
12243: PUSH
12244: LD_EXP 14
12248: DIFF
12249: PPUSH
12250: LD_INT 3
12252: PUSH
12253: LD_INT 120
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 91
12269: PUSH
12270: LD_EXP 46
12274: PUSH
12275: LD_INT 6
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 101
12285: PUSH
12286: LD_INT 2
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: PPUSH
12298: CALL_OW 72
12302: AND
12303: IFFALSE 12312
12305: PUSH
12306: LD_EXP 17
12310: NOT
12311: AND
12312: IFFALSE 12527
12314: GO 12316
12316: DISABLE
12317: LD_INT 0
12319: PPUSH
// begin enable ;
12320: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_EXP 57
12330: PUSH
12331: LD_EXP 14
12335: DIFF
12336: PPUSH
12337: LD_INT 22
12339: PUSH
12340: LD_INT 5
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 91
12349: PUSH
12350: LD_EXP 46
12354: PUSH
12355: LD_INT 6
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 101
12365: PUSH
12366: LD_INT 2
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: PPUSH
12378: CALL_OW 72
12382: PPUSH
12383: LD_EXP 46
12387: PPUSH
12388: CALL_OW 74
12392: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12393: LD_VAR 0 1
12397: PPUSH
12398: LD_EXP 46
12402: PPUSH
12403: CALL_OW 296
12407: PUSH
12408: LD_INT 6
12410: LESS
12411: IFFALSE 12527
// begin DialogueOn ;
12413: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12417: LD_VAR 0 1
12421: PPUSH
12422: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12426: LD_EXP 46
12430: PPUSH
12431: LD_STRING DH-USsol-1
12433: PPUSH
12434: CALL_OW 88
// if GetSex ( un ) = sex_male then
12438: LD_VAR 0 1
12442: PPUSH
12443: CALL_OW 258
12447: PUSH
12448: LD_INT 1
12450: EQUAL
12451: IFFALSE 12467
// Say ( un , DArm-USsol-2 ) else
12453: LD_VAR 0 1
12457: PPUSH
12458: LD_STRING DArm-USsol-2
12460: PPUSH
12461: CALL_OW 88
12465: GO 12479
// Say ( un , DArf-USsol-3 ) ;
12467: LD_VAR 0 1
12471: PPUSH
12472: LD_STRING DArf-USsol-3
12474: PPUSH
12475: CALL_OW 88
// DialogueOff ;
12479: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12483: LD_ADDR_EXP 14
12487: PUSH
12488: LD_EXP 14
12492: PPUSH
12493: LD_VAR 0 1
12497: PPUSH
12498: CALL 68757 0 2
12502: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12503: LD_VAR 0 1
12507: PPUSH
12508: LD_INT 1
12510: PPUSH
12511: CALL_OW 109
// SetSide ( un , 2 ) ;
12515: LD_VAR 0 1
12519: PPUSH
12520: LD_INT 2
12522: PPUSH
12523: CALL_OW 235
// end ; end ;
12527: PPOPN 1
12529: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12530: LD_EXP 58
12534: PPUSH
12535: LD_INT 101
12537: PUSH
12538: LD_INT 2
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 72
12549: IFFALSE 12576
12551: PUSH
12552: LD_EXP 14
12556: PPUSH
12557: LD_INT 22
12559: PUSH
12560: LD_INT 2
12562: PUSH
12563: EMPTY
12564: LIST
12565: LIST
12566: PPUSH
12567: CALL_OW 72
12571: PUSH
12572: LD_INT 5
12574: GREATER
12575: AND
12576: IFFALSE 12585
12578: PUSH
12579: LD_EXP 10
12583: NOT
12584: AND
12585: IFFALSE 12594
12587: PUSH
12588: LD_EXP 30
12592: NOT
12593: AND
12594: IFFALSE 12603
12596: PUSH
12597: LD_EXP 25
12601: NOT
12602: AND
12603: IFFALSE 12612
12605: PUSH
12606: LD_EXP 17
12610: NOT
12611: AND
12612: IFFALSE 12727
12614: GO 12616
12616: DISABLE
12617: LD_INT 0
12619: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12620: LD_ADDR_VAR 0 1
12624: PUSH
12625: LD_EXP 58
12629: PPUSH
12630: LD_INT 22
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 101
12642: PUSH
12643: LD_INT 2
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: PPUSH
12654: CALL_OW 72
12658: PUSH
12659: LD_INT 1
12661: ARRAY
12662: ST_TO_ADDR
// DialogueOn ;
12663: CALL_OW 6
// if GetSex ( un ) = sex_male then
12667: LD_VAR 0 1
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12696
// Say ( un , DUSm-USsol-a-2 ) else
12682: LD_VAR 0 1
12686: PPUSH
12687: LD_STRING DUSm-USsol-a-2
12689: PPUSH
12690: CALL_OW 88
12694: GO 12708
// Say ( un , DUSf-USsol-a-2 ) ;
12696: LD_VAR 0 1
12700: PPUSH
12701: LD_STRING DUSf-USsol-a-2
12703: PPUSH
12704: CALL_OW 88
// DialogueOff ;
12708: CALL_OW 7
// wait ( 0 0$2 ) ;
12712: LD_INT 70
12714: PPUSH
12715: CALL_OW 67
// isAlarm := true ;
12719: LD_ADDR_EXP 17
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// end ;
12727: PPOPN 1
12729: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12730: LD_EXP 17
12734: NOT
12735: IFFALSE 12748
12737: PUSH
12738: LD_EXP 47
12742: PPUSH
12743: CALL_OW 302
12747: AND
12748: IFFALSE 12765
12750: PUSH
12751: LD_EXP 47
12755: PPUSH
12756: CALL_OW 255
12760: PUSH
12761: LD_INT 2
12763: EQUAL
12764: AND
12765: IFFALSE 12773
12767: PUSH
12768: LD_EXP 26
12772: AND
12773: IFFALSE 12782
12775: PUSH
12776: LD_EXP 28
12780: NOT
12781: AND
12782: IFFALSE 12791
12784: PUSH
12785: LD_EXP 27
12789: NOT
12790: AND
12791: IFFALSE 12800
12793: PUSH
12794: LD_EXP 30
12798: NOT
12799: AND
12800: IFFALSE 12816
12802: PUSH
12803: LD_EXP 47
12807: PPUSH
12808: LD_INT 165
12810: PPUSH
12811: CALL 21272 0 2
12815: AND
12816: IFFALSE 12948
12818: GO 12820
12820: DISABLE
// begin enable ;
12821: ENABLE
// InGameOn ;
12822: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12826: LD_EXP 47
12830: PPUSH
12831: LD_INT 5
12833: PPUSH
12834: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12838: LD_INT 165
12840: PPUSH
12841: LD_INT 5
12843: PPUSH
12844: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12848: LD_EXP 47
12852: PPUSH
12853: LD_INT 165
12855: PPUSH
12856: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12860: LD_INT 35
12862: PPUSH
12863: CALL_OW 67
// until IsInUnit ( Givi ) ;
12867: LD_EXP 47
12871: PPUSH
12872: CALL_OW 310
12876: IFFALSE 12860
// case Query ( GiviInLaundry ) of 1 :
12878: LD_STRING GiviInLaundry
12880: PPUSH
12881: CALL_OW 97
12885: PUSH
12886: LD_INT 1
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 12901
12894: POP
// SpawnGiviAsRussian ; 2 :
12895: CALL 1948 0 0
12899: GO 12913
12901: LD_INT 2
12903: DOUBLE
12904: EQUAL
12905: IFTRUE 12909
12907: GO 12912
12909: POP
// ; end ;
12910: GO 12913
12912: POP
// ComExitBuilding ( Givi ) ;
12913: LD_EXP 47
12917: PPUSH
12918: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12922: LD_EXP 47
12926: PPUSH
12927: LD_INT 2
12929: PPUSH
12930: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12934: LD_INT 165
12936: PPUSH
12937: LD_INT 3
12939: PPUSH
12940: CALL_OW 235
// InGameOff ;
12944: CALL_OW 9
// end ;
12948: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12949: LD_EXP 17
12953: NOT
12954: IFFALSE 12962
12956: PUSH
12957: LD_EXP 28
12961: AND
12962: IFFALSE 12979
12964: PUSH
12965: LD_EXP 47
12969: PPUSH
12970: CALL_OW 255
12974: PUSH
12975: LD_INT 2
12977: EQUAL
12978: AND
12979: IFFALSE 12996
12981: PUSH
12982: LD_EXP 47
12986: PPUSH
12987: CALL_OW 248
12991: PUSH
12992: LD_INT 3
12994: EQUAL
12995: AND
12996: IFFALSE 13012
12998: PUSH
12999: LD_EXP 47
13003: PPUSH
13004: LD_INT 119
13006: PPUSH
13007: CALL 21272 0 2
13011: AND
13012: IFFALSE 13021
13014: PUSH
13015: LD_EXP 30
13019: NOT
13020: AND
13021: IFFALSE 13275
13023: GO 13025
13025: DISABLE
// begin InGameOn ;
13026: CALL_OW 8
// SetSide ( Givi , 3 ) ;
13030: LD_EXP 47
13034: PPUSH
13035: LD_INT 3
13037: PPUSH
13038: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13042: LD_INT 10
13044: PPUSH
13045: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13049: LD_EXP 47
13053: PPUSH
13054: LD_INT 119
13056: PPUSH
13057: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13061: LD_INT 35
13063: PPUSH
13064: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13068: LD_EXP 47
13072: PPUSH
13073: LD_INT 119
13075: PPUSH
13076: CALL_OW 120
// until IsInUnit ( Givi ) ;
13080: LD_EXP 47
13084: PPUSH
13085: CALL_OW 310
13089: IFFALSE 13061
// DialogueOn ;
13091: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
13095: LD_EXP 47
13099: PPUSH
13100: LD_STRING DG-Captive-1
13102: PPUSH
13103: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
13107: LD_EXP 65
13111: PPUSH
13112: LD_STRING DCom-Captive-2
13114: PPUSH
13115: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
13119: LD_EXP 47
13123: PPUSH
13124: LD_STRING DG-Captive-3
13126: PPUSH
13127: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
13131: LD_EXP 65
13135: PPUSH
13136: LD_STRING DCom-Captive-4
13138: PPUSH
13139: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13143: LD_EXP 65
13147: PPUSH
13148: CALL_OW 64
// DialogueOff ;
13152: CALL_OW 7
// InGameOff ;
13156: CALL_OW 9
// SetSide ( Givi , 2 ) ;
13160: LD_EXP 47
13164: PPUSH
13165: LD_INT 2
13167: PPUSH
13168: CALL_OW 235
// ComExitBuilding ( Givi ) ;
13172: LD_EXP 47
13176: PPUSH
13177: CALL_OW 122
// if Aviradze then
13181: LD_EXP 56
13185: IFFALSE 13228
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13187: LD_ADDR_EXP 14
13191: PUSH
13192: LD_EXP 14
13196: PPUSH
13197: LD_EXP 56
13201: PPUSH
13202: CALL 68757 0 2
13206: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13207: LD_EXP 56
13211: PPUSH
13212: LD_INT 2
13214: PPUSH
13215: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13219: LD_EXP 56
13223: PPUSH
13224: CALL_OW 122
// end ; if Ibrahim then
13228: LD_EXP 49
13232: IFFALSE 13275
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13234: LD_ADDR_EXP 14
13238: PUSH
13239: LD_EXP 14
13243: PPUSH
13244: LD_EXP 49
13248: PPUSH
13249: CALL 68757 0 2
13253: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13254: LD_EXP 49
13258: PPUSH
13259: LD_INT 2
13261: PPUSH
13262: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13266: LD_EXP 49
13270: PPUSH
13271: CALL_OW 122
// end ; end ;
13275: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
13276: LD_EXP 17
13280: NOT
13281: IFFALSE 13289
13283: PUSH
13284: LD_EXP 27
13288: AND
13289: IFFALSE 13306
13291: PUSH
13292: LD_EXP 46
13296: PPUSH
13297: CALL_OW 248
13301: PUSH
13302: LD_INT 3
13304: EQUAL
13305: AND
13306: IFFALSE 13322
13308: PUSH
13309: LD_EXP 46
13313: PPUSH
13314: LD_INT 119
13316: PPUSH
13317: CALL 21272 0 2
13321: AND
13322: IFFALSE 13331
13324: PUSH
13325: LD_EXP 30
13329: NOT
13330: AND
13331: IFFALSE 13632
13333: GO 13335
13335: DISABLE
// begin InGameOn ;
13336: CALL_OW 8
// SetSide ( Heike , 3 ) ;
13340: LD_EXP 46
13344: PPUSH
13345: LD_INT 3
13347: PPUSH
13348: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13352: LD_INT 10
13354: PPUSH
13355: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13359: LD_EXP 46
13363: PPUSH
13364: LD_INT 119
13366: PPUSH
13367: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13371: LD_INT 35
13373: PPUSH
13374: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13378: LD_EXP 46
13382: PPUSH
13383: LD_INT 119
13385: PPUSH
13386: CALL_OW 120
// until IsInUnit ( Heike ) ;
13390: LD_EXP 46
13394: PPUSH
13395: CALL_OW 310
13399: IFFALSE 13371
// wait ( 0 0$1 ) ;
13401: LD_INT 35
13403: PPUSH
13404: CALL_OW 67
// DialogueOn ;
13408: CALL_OW 6
// if Aviradze and Ibrahim then
13412: LD_EXP 56
13416: IFFALSE 13424
13418: PUSH
13419: LD_EXP 49
13423: AND
13424: IFFALSE 13440
// Say ( Heike , DH-Captive-a-1 ) else
13426: LD_EXP 46
13430: PPUSH
13431: LD_STRING DH-Captive-a-1
13433: PPUSH
13434: CALL_OW 88
13438: GO 13452
// Say ( Heike , DH-Captive-a-b-1 ) ;
13440: LD_EXP 46
13444: PPUSH
13445: LD_STRING DH-Captive-a-b-1
13447: PPUSH
13448: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13452: LD_EXP 65
13456: PPUSH
13457: LD_STRING DCom-Captive-a-2
13459: PPUSH
13460: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13464: LD_EXP 46
13468: PPUSH
13469: LD_STRING DH-Captive-a-3
13471: PPUSH
13472: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13476: LD_EXP 65
13480: PPUSH
13481: LD_STRING DCom-Captive-a-4
13483: PPUSH
13484: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13488: LD_EXP 46
13492: PPUSH
13493: LD_STRING DH-Captive-a-5
13495: PPUSH
13496: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13500: LD_EXP 65
13504: PPUSH
13505: CALL_OW 64
// DialogueOff ;
13509: CALL_OW 7
// InGameOff ;
13513: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13517: LD_EXP 46
13521: PPUSH
13522: LD_INT 2
13524: PPUSH
13525: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13529: LD_EXP 46
13533: PPUSH
13534: CALL_OW 122
// if Aviradze then
13538: LD_EXP 56
13542: IFFALSE 13585
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13544: LD_ADDR_EXP 14
13548: PUSH
13549: LD_EXP 14
13553: PPUSH
13554: LD_EXP 56
13558: PPUSH
13559: CALL 68757 0 2
13563: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13564: LD_EXP 56
13568: PPUSH
13569: LD_INT 2
13571: PPUSH
13572: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13576: LD_EXP 56
13580: PPUSH
13581: CALL_OW 122
// end ; if Ibrahim then
13585: LD_EXP 49
13589: IFFALSE 13632
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13591: LD_ADDR_EXP 14
13595: PUSH
13596: LD_EXP 14
13600: PPUSH
13601: LD_EXP 49
13605: PPUSH
13606: CALL 68757 0 2
13610: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13611: LD_EXP 49
13615: PPUSH
13616: LD_INT 2
13618: PPUSH
13619: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13623: LD_EXP 49
13627: PPUSH
13628: CALL_OW 122
// end ; end ;
13632: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13633: LD_INT 2
13635: PUSH
13636: LD_INT 25
13638: PUSH
13639: LD_INT 32
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 25
13648: PUSH
13649: LD_INT 34
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: PPUSH
13661: CALL_OW 69
13665: IFFALSE 13677
13667: GO 13669
13669: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13670: LD_STRING M1-weapons-out
13672: PPUSH
13673: CALL_OW 604
13677: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13678: LD_INT 2
13680: PPUSH
13681: LD_EXP 61
13685: PPUSH
13686: CALL_OW 292
13690: IFFALSE 13708
13692: PUSH
13693: LD_EXP 46
13697: PPUSH
13698: LD_EXP 61
13702: PPUSH
13703: CALL_OW 296
13707: AND
13708: IFFALSE 13717
13710: PUSH
13711: LD_EXP 17
13715: NOT
13716: AND
13717: IFFALSE 13726
13719: PUSH
13720: LD_EXP 30
13724: NOT
13725: AND
13726: IFFALSE 14658
13728: GO 13730
13730: DISABLE
13731: LD_INT 0
13733: PPUSH
13734: PPUSH
// begin if contactWithAmerican then
13735: LD_EXP 25
13739: IFFALSE 13836
// begin DialogueOn ;
13741: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13745: LD_EXP 61
13749: PPUSH
13750: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13754: LD_EXP 46
13758: PPUSH
13759: LD_STRING DH-USsol-1
13761: PPUSH
13762: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13766: LD_EXP 61
13770: PPUSH
13771: LD_INT 2
13773: PPUSH
13774: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13778: LD_ADDR_EXP 58
13782: PUSH
13783: LD_EXP 58
13787: PPUSH
13788: LD_EXP 61
13792: PPUSH
13793: CALL 68757 0 2
13797: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13798: LD_ADDR_EXP 14
13802: PUSH
13803: LD_EXP 14
13807: PPUSH
13808: LD_EXP 48
13812: PPUSH
13813: CALL 68757 0 2
13817: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13818: LD_EXP 61
13822: PPUSH
13823: LD_INT 1
13825: PPUSH
13826: CALL_OW 109
// DialogueOff ;
13830: CALL_OW 7
// exit ;
13834: GO 14658
// end ; DialogueOn ;
13836: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13840: LD_EXP 61
13844: PPUSH
13845: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13849: LD_EXP 61
13853: PPUSH
13854: LD_STRING DJy-Food-1
13856: PPUSH
13857: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13861: LD_EXP 46
13865: PPUSH
13866: LD_STRING DH-Food-2
13868: PPUSH
13869: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13873: LD_EXP 61
13877: PPUSH
13878: LD_STRING DJy-Food-3
13880: PPUSH
13881: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13885: LD_EXP 61
13889: PPUSH
13890: LD_STRING DJy-Food-4
13892: PPUSH
13893: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13897: LD_EXP 46
13901: PPUSH
13902: LD_STRING DH-Food-5
13904: PPUSH
13905: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13909: LD_EXP 61
13913: PPUSH
13914: LD_STRING DJy-Food-6
13916: PPUSH
13917: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13921: LD_EXP 61
13925: PPUSH
13926: LD_STRING DJy-Food-7
13928: PPUSH
13929: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13933: LD_EXP 61
13937: PPUSH
13938: LD_STRING DJy-Food-8
13940: PPUSH
13941: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13945: LD_EXP 46
13949: PPUSH
13950: LD_STRING DH-Food-9
13952: PPUSH
13953: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13957: LD_EXP 61
13961: PPUSH
13962: LD_STRING DJy-Food-10
13964: PPUSH
13965: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13969: LD_EXP 46
13973: PPUSH
13974: LD_STRING DH-Food-11
13976: PPUSH
13977: CALL_OW 88
// DialogueOff ;
13981: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13985: LD_STRING M3
13987: PPUSH
13988: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13992: LD_INT 5
13994: PPUSH
13995: LD_INT 215
13997: PPUSH
13998: LD_INT 117
14000: PPUSH
14001: LD_INT 0
14003: PPUSH
14004: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
14008: LD_INT 215
14010: PPUSH
14011: LD_INT 118
14013: PPUSH
14014: LD_INT 2
14016: PPUSH
14017: LD_INT 6
14019: NEG
14020: PPUSH
14021: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
14025: LD_INT 215
14027: PPUSH
14028: LD_INT 118
14030: PPUSH
14031: LD_INT 2
14033: PPUSH
14034: CALL_OW 331
// foodDelivered := false ;
14038: LD_ADDR_VAR 0 2
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14046: LD_INT 35
14048: PPUSH
14049: CALL_OW 67
// if hasMuchin then
14053: LD_EXP 30
14057: IFFALSE 14061
// continue ;
14059: GO 14046
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
14061: LD_ADDR_VAR 0 1
14065: PUSH
14066: LD_EXP 14
14070: PUSH
14071: LD_EXP 46
14075: UNION
14076: PPUSH
14077: LD_INT 91
14079: PUSH
14080: LD_EXP 61
14084: PUSH
14085: LD_INT 6
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 25
14095: PUSH
14096: LD_INT 33
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PPUSH
14107: CALL_OW 72
14111: PUSH
14112: FOR_IN
14113: IFFALSE 14313
// if Carry ( i ) then
14115: LD_VAR 0 1
14119: PPUSH
14120: CALL_OW 281
14124: IFFALSE 14311
// begin DialogueOn ;
14126: CALL_OW 6
// foodDelivered := true ;
14130: LD_ADDR_VAR 0 2
14134: PUSH
14135: LD_INT 1
14137: ST_TO_ADDR
// case i of Heike :
14138: LD_VAR 0 1
14142: PUSH
14143: LD_EXP 46
14147: DOUBLE
14148: EQUAL
14149: IFTRUE 14153
14151: GO 14168
14153: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
14154: LD_EXP 46
14158: PPUSH
14159: LD_STRING DH-Food-12
14161: PPUSH
14162: CALL_OW 88
14166: GO 14294
14168: LD_EXP 51
14172: DOUBLE
14173: EQUAL
14174: IFTRUE 14178
14176: GO 14193
14178: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
14179: LD_EXP 51
14183: PPUSH
14184: LD_STRING DK-Food-a-12
14186: PPUSH
14187: CALL_OW 88
14191: GO 14294
14193: LD_EXP 53
14197: DOUBLE
14198: EQUAL
14199: IFTRUE 14203
14201: GO 14218
14203: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
14204: LD_EXP 53
14208: PPUSH
14209: LD_STRING DMar-Food-a-12
14211: PPUSH
14212: CALL_OW 88
14216: GO 14294
14218: LD_EXP 47
14222: DOUBLE
14223: EQUAL
14224: IFTRUE 14228
14226: GO 14243
14228: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
14229: LD_EXP 47
14233: PPUSH
14234: LD_STRING DG-Food-a-14
14236: PPUSH
14237: CALL_OW 88
14241: GO 14294
14243: LD_EXP 48
14247: DOUBLE
14248: EQUAL
14249: IFTRUE 14253
14251: GO 14268
14253: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
14254: LD_EXP 48
14258: PPUSH
14259: LD_STRING DM-Food-a-15
14261: PPUSH
14262: CALL_OW 88
14266: GO 14294
14268: LD_EXP 50
14272: DOUBLE
14273: EQUAL
14274: IFTRUE 14278
14276: GO 14293
14278: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
14279: LD_EXP 50
14283: PPUSH
14284: LD_STRING DKam-Food-a-16
14286: PPUSH
14287: CALL_OW 88
14291: GO 14294
14293: POP
// SetCargo ( i , mat_cans , 0 ) ;
14294: LD_VAR 0 1
14298: PPUSH
14299: LD_INT 1
14301: PPUSH
14302: LD_INT 0
14304: PPUSH
14305: CALL_OW 290
// break ;
14309: GO 14313
// end ;
14311: GO 14112
14313: POP
14314: POP
// until foodDelivered ;
14315: LD_VAR 0 2
14319: IFFALSE 14046
// givenFood := true ;
14321: LD_ADDR_EXP 33
14325: PUSH
14326: LD_INT 1
14328: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
14329: LD_EXP 61
14333: PPUSH
14334: LD_STRING DJy-Food-13
14336: PPUSH
14337: CALL_OW 88
// hasVirus := true ;
14341: LD_ADDR_EXP 31
14345: PUSH
14346: LD_INT 1
14348: ST_TO_ADDR
// if not americanContact then
14349: LD_EXP 10
14353: NOT
14354: IFFALSE 14404
// begin Say ( Heike , DH-Food-14 ) ;
14356: LD_EXP 46
14360: PPUSH
14361: LD_STRING DH-Food-14
14363: PPUSH
14364: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14368: LD_EXP 61
14372: PPUSH
14373: LD_STRING DJy-Food-15
14375: PPUSH
14376: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14380: LD_EXP 61
14384: PPUSH
14385: LD_STRING DJy-Food-16
14387: PPUSH
14388: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14392: LD_EXP 61
14396: PPUSH
14397: LD_STRING DJy-Food-17
14399: PPUSH
14400: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14404: LD_STRING M3-out
14406: PPUSH
14407: CALL_OW 337
// DialogueOff ;
14411: CALL_OW 7
// if not Markov or IsDead ( Markov ) then
14415: LD_EXP 53
14419: NOT
14420: IFTRUE 14433
14422: PUSH
14423: LD_EXP 53
14427: PPUSH
14428: CALL_OW 301
14432: OR
14433: IFFALSE 14444
// Query ( QMarkovMissing ) else
14435: LD_STRING QMarkovMissing
14437: PPUSH
14438: CALL_OW 97
14442: GO 14489
// if Markov in heikeSquad and GetSide ( Markov ) = 2 then
14444: LD_EXP 53
14448: PUSH
14449: LD_EXP 14
14453: IN
14454: IFFALSE 14471
14456: PUSH
14457: LD_EXP 53
14461: PPUSH
14462: CALL_OW 255
14466: PUSH
14467: LD_INT 2
14469: EQUAL
14470: AND
14471: IFFALSE 14482
// Query ( QMarkovFactory ) else
14473: LD_STRING QMarkovFactory
14475: PPUSH
14476: CALL_OW 97
14480: GO 14489
// Query ( QMarkov ) ;
14482: LD_STRING QMarkov
14484: PPUSH
14485: CALL_OW 97
// SetCargo ( Jerry , mat_cans , 10 ) ;
14489: LD_EXP 61
14493: PPUSH
14494: LD_INT 1
14496: PPUSH
14497: LD_INT 10
14499: PPUSH
14500: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14504: LD_EXP 61
14508: PPUSH
14509: LD_INT 95
14511: PPUSH
14512: LD_INT 17
14514: PPUSH
14515: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14519: LD_INT 35
14521: PPUSH
14522: CALL_OW 67
// if not HasTask ( Jerry ) then
14526: LD_EXP 61
14530: PPUSH
14531: CALL_OW 314
14535: NOT
14536: IFFALSE 14553
// ComMoveXY ( Jerry , 95 , 17 ) ;
14538: LD_EXP 61
14542: PPUSH
14543: LD_INT 95
14545: PPUSH
14546: LD_INT 17
14548: PPUSH
14549: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14553: LD_EXP 61
14557: PPUSH
14558: LD_INT 95
14560: PPUSH
14561: LD_INT 17
14563: PPUSH
14564: CALL_OW 307
14568: IFFALSE 14519
// SetCargo ( Jerry , mat_cans , 0 ) ;
14570: LD_EXP 61
14574: PPUSH
14575: LD_INT 1
14577: PPUSH
14578: LD_INT 0
14580: PPUSH
14581: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14585: LD_ADDR_EXP 58
14589: PUSH
14590: LD_EXP 58
14594: PPUSH
14595: LD_EXP 61
14599: PPUSH
14600: CALL 68757 0 2
14604: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14605: LD_ADDR_VAR 0 1
14609: PUSH
14610: LD_INT 22
14612: PUSH
14613: LD_INT 4
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 23
14622: PUSH
14623: LD_INT 1
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: PUSH
14639: FOR_IN
14640: IFFALSE 14656
// SetLives ( i , 1000 ) ;
14642: LD_VAR 0 1
14646: PPUSH
14647: LD_INT 1000
14649: PPUSH
14650: CALL_OW 234
14654: GO 14639
14656: POP
14657: POP
// end ;
14658: PPOPN 2
14660: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14661: LD_EXP 30
14665: NOT
14666: IFFALSE 14674
14668: PUSH
14669: LD_EXP 6
14673: AND
14674: IFFALSE 15102
14676: GO 14678
14678: DISABLE
14679: LD_INT 0
14681: PPUSH
14682: PPUSH
// begin tmp := [ ] ;
14683: LD_ADDR_VAR 0 2
14687: PUSH
14688: EMPTY
14689: ST_TO_ADDR
// uc_side := 3 ;
14690: LD_ADDR_OWVAR 20
14694: PUSH
14695: LD_INT 3
14697: ST_TO_ADDR
// uc_nation := 3 ;
14698: LD_ADDR_OWVAR 21
14702: PUSH
14703: LD_INT 3
14705: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14706: LD_INT 1
14708: PPUSH
14709: LD_INT 8
14711: PPUSH
14712: CALL_OW 381
// un := CreateHuman ;
14716: LD_ADDR_VAR 0 1
14720: PUSH
14721: CALL_OW 44
14725: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14726: LD_VAR 0 1
14730: PPUSH
14731: LD_INT 173
14733: PPUSH
14734: LD_INT 104
14736: PPUSH
14737: LD_INT 0
14739: PPUSH
14740: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14744: LD_ADDR_VAR 0 2
14748: PUSH
14749: LD_VAR 0 2
14753: PPUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL 68757 0 2
14763: ST_TO_ADDR
// un := CreateHuman ;
14764: LD_ADDR_VAR 0 1
14768: PUSH
14769: CALL_OW 44
14773: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14774: LD_VAR 0 1
14778: PPUSH
14779: LD_INT 73
14781: PPUSH
14782: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14786: LD_ADDR_VAR 0 2
14790: PUSH
14791: LD_VAR 0 2
14795: PPUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: CALL 68757 0 2
14805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14806: LD_INT 35
14808: PPUSH
14809: CALL_OW 67
// if isAlarm then
14813: LD_EXP 17
14817: IFFALSE 14821
// exit ;
14819: GO 15102
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14821: LD_EXP 51
14825: PPUSH
14826: CALL_OW 255
14830: PUSH
14831: LD_INT 2
14833: EQUAL
14834: IFFALSE 14854
14836: PUSH
14837: LD_EXP 51
14841: PPUSH
14842: LD_INT 73
14844: PPUSH
14845: CALL_OW 296
14849: PUSH
14850: LD_INT 12
14852: LESS
14853: AND
14854: IFFALSE 14806
// InGameOn ;
14856: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14860: LD_INT 73
14862: PPUSH
14863: CALL_OW 250
14867: PPUSH
14868: LD_INT 73
14870: PPUSH
14871: CALL_OW 251
14875: PPUSH
14876: LD_INT 2
14878: PPUSH
14879: LD_INT 9
14881: NEG
14882: PPUSH
14883: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14887: LD_INT 73
14889: PPUSH
14890: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14894: LD_EXP 51
14898: PPUSH
14899: LD_INT 73
14901: PPUSH
14902: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14906: LD_EXP 51
14910: PPUSH
14911: LD_STRING DK-Plastic-1
14913: PPUSH
14914: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14918: LD_EXP 51
14922: PPUSH
14923: LD_STRING DK-Plastic-2
14925: PPUSH
14926: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14930: LD_EXP 51
14934: PPUSH
14935: LD_INT 73
14937: PPUSH
14938: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14942: LD_INT 35
14944: PPUSH
14945: CALL_OW 67
// if isAlarm then
14949: LD_EXP 17
14953: IFFALSE 14957
// exit ;
14955: GO 15102
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14957: LD_EXP 51
14961: PPUSH
14962: LD_INT 73
14964: PPUSH
14965: CALL_OW 296
14969: PUSH
14970: LD_INT 8
14972: LESS
14973: IFFALSE 14942
// ComHold ( Kaia ) ;
14975: LD_EXP 51
14979: PPUSH
14980: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14984: LD_VAR 0 2
14988: PUSH
14989: LD_INT 1
14991: ARRAY
14992: PPUSH
14993: LD_STRING DRum-Plastic-3
14995: PPUSH
14996: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
15000: LD_VAR 0 2
15004: PUSH
15005: LD_INT 2
15007: ARRAY
15008: PPUSH
15009: LD_STRING DRum2-Plastic-4
15011: PPUSH
15012: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
15016: LD_VAR 0 2
15020: PUSH
15021: LD_INT 1
15023: ARRAY
15024: PPUSH
15025: LD_STRING DRum-Plastic-5
15027: PPUSH
15028: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
15032: LD_VAR 0 2
15036: PUSH
15037: LD_INT 2
15039: ARRAY
15040: PPUSH
15041: LD_STRING DRum2-Plastic-6
15043: PPUSH
15044: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
15048: LD_EXP 51
15052: PPUSH
15053: LD_STRING DK-Plastic-7
15055: PPUSH
15056: CALL_OW 88
// InGameOff ;
15060: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
15064: LD_INT 73
15066: PPUSH
15067: CALL_OW 250
15071: PPUSH
15072: LD_INT 73
15074: PPUSH
15075: CALL_OW 251
15079: PPUSH
15080: LD_INT 2
15082: PPUSH
15083: CALL_OW 331
// explosionsTakenByRussians := true ;
15087: LD_ADDR_EXP 21
15091: PUSH
15092: LD_INT 1
15094: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
15095: LD_STRING ExplosivesInfo
15097: PPUSH
15098: CALL_OW 97
// end ;
15102: PPOPN 2
15104: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
15105: LD_EXP 21
15109: IFFALSE 15126
15111: PUSH
15112: LD_EXP 51
15116: PPUSH
15117: CALL_OW 255
15121: PUSH
15122: LD_INT 2
15124: EQUAL
15125: AND
15126: IFFALSE 15142
15128: PUSH
15129: LD_EXP 51
15133: PPUSH
15134: LD_INT 61
15136: PPUSH
15137: CALL 21272 0 2
15141: AND
15142: IFFALSE 15151
15144: PUSH
15145: LD_EXP 17
15149: NOT
15150: AND
15151: IFFALSE 15160
15153: PUSH
15154: LD_EXP 30
15158: NOT
15159: AND
15160: IFFALSE 15471
15162: GO 15164
15164: DISABLE
15165: LD_INT 0
15167: PPUSH
// begin class := GetClass ( Kaia ) ;
15168: LD_ADDR_VAR 0 1
15172: PUSH
15173: LD_EXP 51
15177: PPUSH
15178: CALL_OW 257
15182: ST_TO_ADDR
// if class <> class_prison then
15183: LD_VAR 0 1
15187: PUSH
15188: LD_INT 33
15190: NONEQUAL
15191: IFFALSE 15312
// begin Query ( QKaiaWeapon ) ;
15193: LD_STRING QKaiaWeapon
15195: PPUSH
15196: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15200: LD_INT 67
15202: PPUSH
15203: LD_INT 1
15205: PPUSH
15206: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15210: LD_INT 192
15212: PPUSH
15213: LD_INT 71
15215: PPUSH
15216: CALL_OW 86
// kaiaWeaponHidden := class ;
15220: LD_ADDR_EXP 45
15224: PUSH
15225: LD_VAR 0 1
15229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15230: LD_INT 35
15232: PPUSH
15233: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15237: LD_EXP 51
15241: PPUSH
15242: LD_INT 67
15244: PPUSH
15245: CALL_OW 308
15249: IFFALSE 15230
// repeat wait ( 1 ) ;
15251: LD_INT 1
15253: PPUSH
15254: CALL_OW 67
// ComWalk ( Kaia ) ;
15258: LD_EXP 51
15262: PPUSH
15263: CALL_OW 138
// until not Crawls ( Kaia ) ;
15267: LD_EXP 51
15271: PPUSH
15272: CALL_OW 318
15276: NOT
15277: IFFALSE 15251
// SetClass ( Kaia , class_prison ) ;
15279: LD_EXP 51
15283: PPUSH
15284: LD_INT 33
15286: PPUSH
15287: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15291: LD_INT 35
15293: PPUSH
15294: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
15298: LD_EXP 51
15302: PPUSH
15303: LD_INT 61
15305: PPUSH
15306: CALL 21272 0 2
15310: IFFALSE 15291
// end ; if knowWhereExplosivesAre then
15312: LD_EXP 34
15316: IFFALSE 15320
// exit ;
15318: GO 15471
// InGameOn ;
15320: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
15324: LD_INT 61
15326: PPUSH
15327: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15331: LD_EXP 51
15335: PPUSH
15336: LD_INT 3
15338: PPUSH
15339: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
15343: LD_EXP 51
15347: PPUSH
15348: LD_INT 61
15350: PPUSH
15351: CALL_OW 120
// wait ( 0 0$2 ) ;
15355: LD_INT 70
15357: PPUSH
15358: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15362: LD_EXP 51
15366: PPUSH
15367: LD_STRING DK-Plastic-8
15369: PPUSH
15370: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
15374: LD_EXP 67
15378: PUSH
15379: LD_INT 1
15381: ARRAY
15382: PPUSH
15383: LD_STRING DRuMch-Plastic-9
15385: PPUSH
15386: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15390: LD_EXP 51
15394: PPUSH
15395: LD_STRING DK-Plastic-10
15397: PPUSH
15398: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
15402: LD_EXP 67
15406: PUSH
15407: LD_INT 1
15409: ARRAY
15410: PPUSH
15411: LD_STRING DRuMch-Plastic-a-11
15413: PPUSH
15414: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
15418: LD_EXP 51
15422: PPUSH
15423: LD_STRING DK-Plastic-a-12
15425: PPUSH
15426: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
15430: LD_EXP 67
15434: PUSH
15435: LD_INT 1
15437: ARRAY
15438: PPUSH
15439: LD_STRING DRuMch-Plastic-a-13
15441: PPUSH
15442: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
15446: LD_EXP 51
15450: PPUSH
15451: LD_INT 2
15453: PPUSH
15454: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15458: LD_EXP 51
15462: PPUSH
15463: CALL_OW 122
// InGameOff ;
15467: CALL_OW 9
// end ;
15471: PPOPN 1
15473: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15474: LD_EXP 21
15478: IFFALSE 15495
15480: PUSH
15481: LD_EXP 51
15485: PPUSH
15486: CALL_OW 255
15490: PUSH
15491: LD_INT 2
15493: EQUAL
15494: AND
15495: IFFALSE 15511
15497: PUSH
15498: LD_EXP 51
15502: PPUSH
15503: LD_INT 196
15505: PPUSH
15506: CALL 21272 0 2
15510: AND
15511: IFFALSE 15520
15513: PUSH
15514: LD_EXP 17
15518: NOT
15519: AND
15520: IFFALSE 15529
15522: PUSH
15523: LD_EXP 30
15527: NOT
15528: AND
15529: IFFALSE 16015
15531: GO 15533
15533: DISABLE
15534: LD_INT 0
15536: PPUSH
// begin class := GetClass ( Kaia ) ;
15537: LD_ADDR_VAR 0 1
15541: PUSH
15542: LD_EXP 51
15546: PPUSH
15547: CALL_OW 257
15551: ST_TO_ADDR
// if class <> class_prison then
15552: LD_VAR 0 1
15556: PUSH
15557: LD_INT 33
15559: NONEQUAL
15560: IFFALSE 15681
// begin Query ( QKaiaWeapon ) ;
15562: LD_STRING QKaiaWeapon
15564: PPUSH
15565: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15569: LD_INT 67
15571: PPUSH
15572: LD_INT 1
15574: PPUSH
15575: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15579: LD_INT 192
15581: PPUSH
15582: LD_INT 71
15584: PPUSH
15585: CALL_OW 86
// kaiaWeaponHidden := class ;
15589: LD_ADDR_EXP 45
15593: PUSH
15594: LD_VAR 0 1
15598: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15599: LD_INT 35
15601: PPUSH
15602: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15606: LD_EXP 51
15610: PPUSH
15611: LD_INT 67
15613: PPUSH
15614: CALL_OW 308
15618: IFFALSE 15599
// repeat wait ( 1 ) ;
15620: LD_INT 1
15622: PPUSH
15623: CALL_OW 67
// ComWalk ( Kaia ) ;
15627: LD_EXP 51
15631: PPUSH
15632: CALL_OW 138
// until not Crawls ( Kaia ) ;
15636: LD_EXP 51
15640: PPUSH
15641: CALL_OW 318
15645: NOT
15646: IFFALSE 15620
// SetClass ( Kaia , class_prison ) ;
15648: LD_EXP 51
15652: PPUSH
15653: LD_INT 33
15655: PPUSH
15656: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15660: LD_INT 35
15662: PPUSH
15663: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15667: LD_EXP 51
15671: PPUSH
15672: LD_INT 196
15674: PPUSH
15675: CALL 21272 0 2
15679: IFFALSE 15660
// end ; InGameOn ;
15681: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15685: LD_INT 196
15687: PPUSH
15688: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15692: LD_EXP 51
15696: PPUSH
15697: LD_INT 3
15699: PPUSH
15700: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15704: LD_EXP 51
15708: PPUSH
15709: LD_INT 196
15711: PPUSH
15712: CALL_OW 120
// wait ( 0 0$2 ) ;
15716: LD_INT 70
15718: PPUSH
15719: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15723: LD_EXP 51
15727: PPUSH
15728: LD_STRING DK-Plastic-8
15730: PPUSH
15731: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15735: LD_EXP 68
15739: PUSH
15740: LD_INT 1
15742: ARRAY
15743: PPUSH
15744: LD_STRING DRuMch-Plastic-9
15746: PPUSH
15747: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15751: LD_EXP 51
15755: PPUSH
15756: LD_STRING DK-Plastic-10
15758: PPUSH
15759: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15763: LD_EXP 68
15767: PUSH
15768: LD_INT 1
15770: ARRAY
15771: PPUSH
15772: LD_STRING DRuMch-Plastic-11
15774: PPUSH
15775: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15779: LD_EXP 51
15783: PPUSH
15784: LD_STRING DK-Plastic-12
15786: PPUSH
15787: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15791: LD_EXP 51
15795: PPUSH
15796: LD_STRING DK-Plastic-13
15798: PPUSH
15799: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15803: LD_EXP 68
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_STRING DRuMch-Plastic-14
15814: PPUSH
15815: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15819: LD_EXP 69
15823: PPUSH
15824: LD_INT 167
15826: PPUSH
15827: LD_INT 34
15829: PPUSH
15830: LD_INT 3
15832: PPUSH
15833: LD_INT 0
15835: PPUSH
15836: CALL 70917 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15840: LD_EXP 69
15844: PPUSH
15845: LD_INT 196
15847: PPUSH
15848: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15852: LD_INT 35
15854: PPUSH
15855: CALL_OW 67
// if not HasTask ( Stiopa ) then
15859: LD_EXP 69
15863: PPUSH
15864: CALL_OW 314
15868: NOT
15869: IFFALSE 15883
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15871: LD_EXP 69
15875: PPUSH
15876: LD_INT 196
15878: PPUSH
15879: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15883: LD_EXP 69
15887: PPUSH
15888: CALL_OW 310
15892: IFFALSE 15852
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15894: LD_EXP 69
15898: PPUSH
15899: LD_STRING DSpn-Plastic-15
15901: PPUSH
15902: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15906: LD_EXP 70
15910: PPUSH
15911: LD_STRING DLr-Plastic-16
15913: PPUSH
15914: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15918: LD_EXP 51
15922: PPUSH
15923: LD_STRING DK-Plastic-17
15925: PPUSH
15926: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15930: LD_INT 10
15932: PPUSH
15933: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15937: LD_INT 196
15939: PPUSH
15940: CALL 20998 0 1
// SetSide ( Kaia , 2 ) ;
15944: LD_EXP 51
15948: PPUSH
15949: LD_INT 2
15951: PPUSH
15952: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15956: LD_EXP 51
15960: PPUSH
15961: CALL_OW 122
// InGameOff ;
15965: CALL_OW 9
// explosionsTakenByRussians := false ;
15969: LD_ADDR_EXP 21
15973: PUSH
15974: LD_INT 0
15976: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15977: LD_INT 170
15979: PPUSH
15980: LD_INT 28
15982: PPUSH
15983: LD_INT 2
15985: PPUSH
15986: LD_INT 6
15988: NEG
15989: PPUSH
15990: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15994: LD_INT 170
15996: PPUSH
15997: LD_INT 28
15999: PPUSH
16000: LD_INT 2
16002: PPUSH
16003: CALL_OW 331
// knowWhereExplosivesAre := true ;
16007: LD_ADDR_EXP 34
16011: PUSH
16012: LD_INT 1
16014: ST_TO_ADDR
// end ;
16015: PPOPN 1
16017: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
16018: LD_EXP 34
16022: IFFALSE 16039
16024: PUSH
16025: LD_EXP 51
16029: PPUSH
16030: CALL_OW 255
16034: PUSH
16035: LD_INT 2
16037: EQUAL
16038: AND
16039: IFFALSE 16055
16041: PUSH
16042: LD_EXP 51
16046: PPUSH
16047: LD_INT 195
16049: PPUSH
16050: CALL 21272 0 2
16054: AND
16055: IFFALSE 16064
16057: PUSH
16058: LD_EXP 17
16062: NOT
16063: AND
16064: IFFALSE 16073
16066: PUSH
16067: LD_EXP 30
16071: NOT
16072: AND
16073: IFFALSE 16179
16075: GO 16077
16077: DISABLE
// begin InGameOn ;
16078: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
16082: LD_EXP 51
16086: PPUSH
16087: LD_INT 3
16089: PPUSH
16090: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
16094: LD_EXP 51
16098: PPUSH
16099: LD_INT 195
16101: PPUSH
16102: CALL_OW 120
// wait ( 0 0$1 ) ;
16106: LD_INT 35
16108: PPUSH
16109: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
16113: LD_EXP 51
16117: PPUSH
16118: LD_STRING DK-Plastic-18
16120: PPUSH
16121: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
16125: LD_STRING ExplosivesInfoUsage
16127: PPUSH
16128: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
16132: LD_INT 195
16134: PPUSH
16135: CALL 20998 0 1
// SetSide ( Kaia , 2 ) ;
16139: LD_EXP 51
16143: PPUSH
16144: LD_INT 2
16146: PPUSH
16147: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
16151: LD_EXP 51
16155: PPUSH
16156: CALL_OW 122
// InGameOff ;
16160: CALL_OW 9
// hasExplosionCollected := true ;
16164: LD_ADDR_EXP 23
16168: PUSH
16169: LD_INT 1
16171: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
16172: LD_STRING M1-explosive-out
16174: PPUSH
16175: CALL_OW 337
// end ;
16179: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
16180: LD_EXP 45
16184: IFFALSE 16249
16186: GO 16188
16188: DISABLE
// begin enable ;
16189: ENABLE
// if not kaiaWeaponHidden then
16190: LD_EXP 45
16194: NOT
16195: IFFALSE 16199
// exit ;
16197: GO 16249
// repeat wait ( 1 ) ;
16199: LD_INT 1
16201: PPUSH
16202: CALL_OW 67
// ComWalk ( Kaia ) ;
16206: LD_EXP 51
16210: PPUSH
16211: CALL_OW 138
// until not Crawls ( Kaia ) ;
16215: LD_EXP 51
16219: PPUSH
16220: CALL_OW 318
16224: NOT
16225: IFFALSE 16199
// SetClass ( Kaia , kaiaWeaponHidden ) ;
16227: LD_EXP 51
16231: PPUSH
16232: LD_EXP 45
16236: PPUSH
16237: CALL_OW 336
// kaiaWeaponHidden := 0 ;
16241: LD_ADDR_EXP 45
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
// end ;
16249: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
16250: LD_EXP 23
16254: IFFALSE 16263
16256: PUSH
16257: LD_EXP 17
16261: NOT
16262: AND
16263: IFFALSE 16272
16265: PUSH
16266: LD_EXP 30
16270: NOT
16271: AND
16272: IFFALSE 16447
16274: GO 16276
16276: DISABLE
16277: LD_INT 0
16279: PPUSH
16280: PPUSH
// begin for i in importantBuildingsList do
16281: LD_ADDR_VAR 0 1
16285: PUSH
16286: LD_EXP 35
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16308
// MarkBuilding ( i , true ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: LD_INT 1
16301: PPUSH
16302: CALL 21650 0 2
16306: GO 16291
16308: POP
16309: POP
// repeat wait ( 0 0$1 ) ;
16310: LD_INT 35
16312: PPUSH
16313: CALL_OW 67
// for i in importantBuildingsList do
16317: LD_ADDR_VAR 0 1
16321: PUSH
16322: LD_EXP 35
16326: PUSH
16327: FOR_IN
16328: IFFALSE 16438
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
16330: LD_EXP 46
16334: PUSH
16335: LD_EXP 14
16339: UNION
16340: PPUSH
16341: LD_INT 22
16343: PUSH
16344: LD_INT 2
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PUSH
16351: LD_INT 21
16353: PUSH
16354: LD_INT 1
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PUSH
16361: LD_INT 91
16363: PUSH
16364: LD_VAR 0 1
16368: PUSH
16369: LD_INT 6
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PUSH
16377: EMPTY
16378: LIST
16379: LIST
16380: LIST
16381: PPUSH
16382: CALL_OW 72
16386: IFFALSE 16436
// begin CenterNowOnUnits ( i ) ;
16388: LD_VAR 0 1
16392: PPUSH
16393: CALL_OW 87
// PlaceExplosives ( i ) ;
16397: LD_VAR 0 1
16401: PPUSH
16402: CALL 21547 0 1
// MarkBuilding ( i , false ) ;
16406: LD_VAR 0 1
16410: PPUSH
16411: LD_INT 0
16413: PPUSH
16414: CALL 21650 0 2
// importantBuildingsList := importantBuildingsList diff i ;
16418: LD_ADDR_EXP 35
16422: PUSH
16423: LD_EXP 35
16427: PUSH
16428: LD_VAR 0 1
16432: DIFF
16433: ST_TO_ADDR
// continue ;
16434: GO 16327
// end ; end ;
16436: GO 16327
16438: POP
16439: POP
// until not importantBuildingsList ;
16440: LD_EXP 35
16444: NOT
16445: IFFALSE 16310
// end ;
16447: PPOPN 2
16449: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
16450: LD_EXP 14
16454: PPUSH
16455: LD_INT 22
16457: PUSH
16458: LD_INT 2
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 95
16467: PUSH
16468: LD_INT 23
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 72
16483: IFFALSE 16496
16485: PUSH
16486: LD_EXP 46
16490: PPUSH
16491: CALL_OW 302
16495: AND
16496: IFFALSE 16505
16498: PUSH
16499: LD_EXP 30
16503: NOT
16504: AND
16505: IFFALSE 16533
16507: GO 16509
16509: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
16510: LD_EXP 46
16514: PPUSH
16515: LD_STRING DH-End-1
16517: PPUSH
16518: CALL_OW 88
// if not activeExplosives then
16522: LD_EXP 36
16526: NOT
16527: IFFALSE 16533
// Explode ;
16529: CALL 24434 0 0
// end ;
16533: END
// function SayHEmpty ( ) ; begin
16534: LD_INT 0
16536: PPUSH
// case rand ( 1 , 3 ) of 1 :
16537: LD_INT 1
16539: PPUSH
16540: LD_INT 3
16542: PPUSH
16543: CALL_OW 12
16547: PUSH
16548: LD_INT 1
16550: DOUBLE
16551: EQUAL
16552: IFTRUE 16556
16554: GO 16571
16556: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16557: LD_EXP 46
16561: PPUSH
16562: LD_STRING DH-Empty-1
16564: PPUSH
16565: CALL_OW 88
16569: GO 16618
16571: LD_INT 2
16573: DOUBLE
16574: EQUAL
16575: IFTRUE 16579
16577: GO 16594
16579: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16580: LD_EXP 46
16584: PPUSH
16585: LD_STRING DH-Empty-2
16587: PPUSH
16588: CALL_OW 88
16592: GO 16618
16594: LD_INT 3
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 16617
16602: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16603: LD_EXP 46
16607: PPUSH
16608: LD_STRING DH-Empty-3
16610: PPUSH
16611: CALL_OW 88
16615: GO 16618
16617: POP
// end ;
16618: LD_VAR 0 1
16622: RET
// function SayHVisited ( ) ; begin
16623: LD_INT 0
16625: PPUSH
// case rand ( 1 , 3 ) of 1 :
16626: LD_INT 1
16628: PPUSH
16629: LD_INT 3
16631: PPUSH
16632: CALL_OW 12
16636: PUSH
16637: LD_INT 1
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16660
16645: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16646: LD_EXP 46
16650: PPUSH
16651: LD_STRING DH-Visited-1
16653: PPUSH
16654: CALL_OW 88
16658: GO 16707
16660: LD_INT 2
16662: DOUBLE
16663: EQUAL
16664: IFTRUE 16668
16666: GO 16683
16668: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16669: LD_EXP 46
16673: PPUSH
16674: LD_STRING DH-Visited-2
16676: PPUSH
16677: CALL_OW 88
16681: GO 16707
16683: LD_INT 3
16685: DOUBLE
16686: EQUAL
16687: IFTRUE 16691
16689: GO 16706
16691: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16692: LD_EXP 46
16696: PPUSH
16697: LD_STRING DH-Visited-3
16699: PPUSH
16700: CALL_OW 88
16704: GO 16707
16706: POP
// end ;
16707: LD_VAR 0 1
16711: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16712: LD_EXP 17
16716: NOT
16717: IFFALSE 16725
16719: PUSH
16720: LD_EXP 15
16724: AND
16725: IFFALSE 16742
16727: PUSH
16728: LD_EXP 46
16732: PPUSH
16733: CALL_OW 255
16737: PUSH
16738: LD_INT 2
16740: EQUAL
16741: AND
16742: IFFALSE 16755
16744: PUSH
16745: LD_EXP 46
16749: PPUSH
16750: CALL_OW 302
16754: AND
16755: IFFALSE 16768
16757: PUSH
16758: LD_EXP 46
16762: PPUSH
16763: CALL_OW 316
16767: AND
16768: IFFALSE 16777
16770: PUSH
16771: LD_EXP 30
16775: NOT
16776: AND
16777: IFFALSE 16843
16779: GO 16781
16781: DISABLE
16782: LD_INT 0
16784: PPUSH
// begin enable ;
16785: ENABLE
// for i in entranceAllowedList do
16786: LD_ADDR_VAR 0 1
16790: PUSH
16791: LD_EXP 15
16795: PUSH
16796: FOR_IN
16797: IFFALSE 16841
// if InEntrance ( Heike , i ) then
16799: LD_EXP 46
16803: PPUSH
16804: LD_VAR 0 1
16808: PPUSH
16809: CALL 21272 0 2
16813: IFFALSE 16839
// begin disable ( entranceEvent ) ;
16815: LD_INT 1
16817: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16818: LD_VAR 0 1
16822: PPUSH
16823: CALL 16846 0 1
// wait ( 0 0$3 ) ;
16827: LD_INT 105
16829: PPUSH
16830: CALL_OW 67
// enable ( entranceEvent ) ;
16834: LD_INT 1
16836: ENABLE_MARKED
// break ;
16837: GO 16841
// end ;
16839: GO 16796
16841: POP
16842: POP
// end ;
16843: PPOPN 1
16845: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 , someoneTookWeapon ; begin
16846: LD_INT 0
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
16852: PPUSH
// if not building then
16853: LD_VAR 0 1
16857: NOT
16858: IFFALSE 16862
// exit ;
16860: GO 19625
// if building in entranceVisitedList then
16862: LD_VAR 0 1
16866: PUSH
16867: LD_EXP 16
16871: IN
16872: IFFALSE 16880
// begin SayHVisited ( ) ;
16874: CALL 16623 0 0
// exit ;
16878: GO 19625
// end ; case Query ( EnterBuilding ) of 1 :
16880: LD_STRING EnterBuilding
16882: PPUSH
16883: CALL_OW 97
16887: PUSH
16888: LD_INT 1
16890: DOUBLE
16891: EQUAL
16892: IFTRUE 16896
16894: GO 16899
16896: POP
// ; 2 :
16897: GO 16913
16899: LD_INT 2
16901: DOUBLE
16902: EQUAL
16903: IFTRUE 16907
16905: GO 16912
16907: POP
// exit ; end ;
16908: GO 19625
16910: GO 16913
16912: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16913: LD_ADDR_EXP 16
16917: PUSH
16918: LD_EXP 16
16922: PPUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL 68757 0 2
16932: ST_TO_ADDR
// InGameOn ;
16933: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16937: LD_EXP 46
16941: PPUSH
16942: LD_INT 5
16944: PPUSH
16945: CALL_OW 235
// SetSide ( building , 5 ) ;
16949: LD_VAR 0 1
16953: PPUSH
16954: LD_INT 5
16956: PPUSH
16957: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16961: LD_EXP 46
16965: PPUSH
16966: LD_VAR 0 1
16970: PPUSH
16971: CALL_OW 120
// wait ( 0 0$3 ) ;
16975: LD_INT 105
16977: PPUSH
16978: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16982: LD_ADDR_VAR 0 4
16986: PUSH
16987: LD_INT 165
16989: PUSH
16990: LD_INT 106
16992: PUSH
16993: LD_INT 135
16995: PUSH
16996: LD_INT 162
16998: PUSH
16999: LD_INT 61
17001: PUSH
17002: LD_INT 109
17004: PUSH
17005: LD_INT 169
17007: PUSH
17008: LD_INT 13
17010: PUSH
17011: LD_INT 147
17013: PUSH
17014: LD_INT 137
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: ST_TO_ADDR
// if not building in tmp then
17029: LD_VAR 0 1
17033: PUSH
17034: LD_VAR 0 4
17038: IN
17039: NOT
17040: IFFALSE 17048
// SayHEmpty ( ) else
17042: CALL 16534 0 0
17046: GO 19572
// case building of laundry :
17048: LD_VAR 0 1
17052: PUSH
17053: LD_INT 165
17055: DOUBLE
17056: EQUAL
17057: IFTRUE 17061
17059: GO 17169
17061: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
17062: LD_EXP 26
17066: IFFALSE 17075
17068: PUSH
17069: LD_EXP 27
17073: NOT
17074: AND
17075: IFFALSE 17084
17077: PUSH
17078: LD_EXP 28
17082: NOT
17083: AND
17084: IFFALSE 17139
// begin case Query ( HeikeInLaundry ) of 1 :
17086: LD_STRING HeikeInLaundry
17088: PPUSH
17089: CALL_OW 97
17093: PUSH
17094: LD_INT 1
17096: DOUBLE
17097: EQUAL
17098: IFTRUE 17102
17100: GO 17109
17102: POP
// SpawnHeikeAsRussian ; 2 :
17103: CALL 1840 0 0
17107: GO 17137
17109: LD_INT 2
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17136
17117: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
17118: LD_ADDR_EXP 16
17122: PUSH
17123: LD_EXP 16
17127: PUSH
17128: LD_VAR 0 1
17132: DIFF
17133: ST_TO_ADDR
17134: GO 17137
17136: POP
// end else
17137: GO 17167
// begin entranceVisitedList := entranceVisitedList diff building ;
17139: LD_ADDR_EXP 16
17143: PUSH
17144: LD_EXP 16
17148: PUSH
17149: LD_VAR 0 1
17153: DIFF
17154: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17155: LD_EXP 46
17159: PPUSH
17160: LD_STRING DH-Locked
17162: PPUSH
17163: CALL_OW 88
// end ; end ; dougBar :
17167: GO 19572
17169: LD_INT 106
17171: DOUBLE
17172: EQUAL
17173: IFTRUE 17177
17175: GO 17541
17177: POP
// begin if contactWithAmerican and americanContact then
17178: LD_EXP 25
17182: IFFALSE 17190
17184: PUSH
17185: LD_EXP 10
17189: AND
17190: IFFALSE 17254
// begin Say ( Heike , DH-Escort-a-1 ) ;
17192: LD_EXP 46
17196: PPUSH
17197: LD_STRING DH-Escort-a-1
17199: PPUSH
17200: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
17204: LD_EXP 60
17208: PPUSH
17209: LD_STRING DCa-Escort-a-2
17211: PPUSH
17212: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
17216: LD_EXP 60
17220: PPUSH
17221: LD_STRING DCa-Escort-a-3
17223: PPUSH
17224: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
17228: LD_EXP 46
17232: PPUSH
17233: LD_STRING DH-Escort-a-4
17235: PPUSH
17236: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
17240: LD_EXP 46
17244: PPUSH
17245: LD_STRING DH-Escort-a-5
17247: PPUSH
17248: CALL_OW 88
// end else
17252: GO 17498
// if contactWithAmerican then
17254: LD_EXP 25
17258: IFFALSE 17298
// begin Say ( Heike , DH-Escort-b-1 ) ;
17260: LD_EXP 46
17264: PPUSH
17265: LD_STRING DH-Escort-b-1
17267: PPUSH
17268: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
17272: LD_EXP 60
17276: PPUSH
17277: LD_STRING DCa-Escort-b-2
17279: PPUSH
17280: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
17284: LD_EXP 60
17288: PPUSH
17289: LD_STRING DCa-Escort-b-3
17291: PPUSH
17292: CALL_OW 88
// end else
17296: GO 17498
// begin Say ( Doug , DCa-Deal-a-1 ) ;
17298: LD_EXP 60
17302: PPUSH
17303: LD_STRING DCa-Deal-a-1
17305: PPUSH
17306: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
17310: LD_EXP 60
17314: PPUSH
17315: LD_STRING DCa-Deal-a-2
17317: PPUSH
17318: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
17322: LD_EXP 46
17326: PPUSH
17327: LD_STRING DH-Deal-a-3
17329: PPUSH
17330: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
17334: LD_EXP 60
17338: PPUSH
17339: LD_STRING DCa-Deal-a-4
17341: PPUSH
17342: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
17346: LD_EXP 46
17350: PPUSH
17351: LD_STRING DH-Deal-a-5
17353: PPUSH
17354: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
17358: LD_EXP 60
17362: PPUSH
17363: LD_STRING DCa-Deal-a-6
17365: PPUSH
17366: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
17370: LD_EXP 60
17374: PPUSH
17375: LD_STRING DCa-Deal-a-7
17377: PPUSH
17378: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
17382: LD_EXP 60
17386: PPUSH
17387: LD_STRING DCa-Deal-a-8
17389: PPUSH
17390: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
17394: LD_EXP 60
17398: PPUSH
17399: LD_STRING DCa-Deal-a-9
17401: PPUSH
17402: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
17406: LD_EXP 60
17410: PPUSH
17411: LD_STRING DCa-Deal-a-10
17413: PPUSH
17414: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
17418: LD_EXP 60
17422: PPUSH
17423: LD_STRING DCa-Deal-a-11
17425: PPUSH
17426: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17430: LD_INT 10
17432: PPUSH
17433: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
17437: LD_EXP 60
17441: PPUSH
17442: LD_STRING DCa-Deal-a-12
17444: PPUSH
17445: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
17449: LD_EXP 46
17453: PPUSH
17454: LD_STRING DH-Deal-a-13
17456: PPUSH
17457: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
17461: LD_EXP 46
17465: PPUSH
17466: LD_STRING DH-Deal-a-14
17468: PPUSH
17469: CALL_OW 88
// contactWithAmerican := true ;
17473: LD_ADDR_EXP 25
17477: PUSH
17478: LD_INT 1
17480: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
17481: LD_INT 1
17483: PPUSH
17484: LD_STRING 08_DealWithDoug
17486: PPUSH
17487: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
17491: LD_STRING M1-american-out
17493: PPUSH
17494: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
17498: LD_EXP 60
17502: PPUSH
17503: LD_INT 2
17505: PPUSH
17506: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
17510: LD_ADDR_EXP 14
17514: PUSH
17515: LD_EXP 14
17519: PPUSH
17520: LD_EXP 60
17524: PPUSH
17525: CALL 68757 0 2
17529: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
17530: LD_EXP 60
17534: PPUSH
17535: CALL_OW 122
// end ; usLab :
17539: GO 19572
17541: LD_INT 135
17543: DOUBLE
17544: EQUAL
17545: IFTRUE 17549
17547: GO 17912
17549: POP
// begin if hasSniperRifle then
17550: LD_EXP 11
17554: IFFALSE 17910
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
17556: LD_EXP 51
17560: PPUSH
17561: CALL_OW 302
17565: IFFALSE 17579
17567: PUSH
17568: LD_EXP 51
17572: PUSH
17573: LD_EXP 14
17577: IN
17578: AND
17579: IFFALSE 17596
17581: PUSH
17582: LD_EXP 51
17586: PPUSH
17587: CALL_OW 255
17591: PUSH
17592: LD_INT 2
17594: EQUAL
17595: AND
17596: IFFALSE 17884
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17598: LD_EXP 46
17602: PPUSH
17603: LD_EXP 51
17607: PPUSH
17608: CALL_OW 296
17612: PUSH
17613: LD_INT 10
17615: GREATER
17616: IFFALSE 17641
// begin Query ( KaiaDistance ) ;
17618: LD_STRING KaiaDistance
17620: PPUSH
17621: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17625: LD_ADDR_EXP 16
17629: PUSH
17630: LD_EXP 16
17634: PUSH
17635: LD_INT 135
17637: DIFF
17638: ST_TO_ADDR
// end else
17639: GO 17882
// begin SetSide ( Kaia , 5 ) ;
17641: LD_EXP 51
17645: PPUSH
17646: LD_INT 5
17648: PPUSH
17649: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17653: LD_EXP 51
17657: PPUSH
17658: LD_INT 135
17660: PPUSH
17661: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17665: LD_INT 35
17667: PPUSH
17668: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17672: LD_EXP 51
17676: PPUSH
17677: CALL_OW 310
17681: IFFALSE 17665
// Say ( Kaia , DK-Sniper-1 ) ;
17683: LD_EXP 51
17687: PPUSH
17688: LD_STRING DK-Sniper-1
17690: PPUSH
17691: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17695: LD_EXP 51
17699: PPUSH
17700: CALL_OW 257
17704: PUSH
17705: LD_INT 34
17707: EQUAL
17708: IFFALSE 17722
17710: PUSH
17711: LD_EXP 48
17715: PUSH
17716: LD_EXP 14
17720: IN
17721: AND
17722: IFFALSE 17735
17724: PUSH
17725: LD_EXP 48
17729: PPUSH
17730: CALL_OW 302
17734: AND
17735: IFFALSE 17766
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17737: LD_EXP 51
17741: PPUSH
17742: LD_STRING DK-Sniper-a-2
17744: PPUSH
17745: CALL_OW 88
// giveSniperRifleToMike := true ;
17749: LD_ADDR_EXP 42
17753: PUSH
17754: LD_INT 1
17756: ST_TO_ADDR
// Query ( QSniperMike ) ;
17757: LD_STRING QSniperMike
17759: PPUSH
17760: CALL_OW 97
// end else
17764: GO 17861
// begin if Markov then
17766: LD_EXP 53
17770: IFFALSE 17784
// Say ( Kaia , DK-Sniper-2 ) ;
17772: LD_EXP 51
17776: PPUSH
17777: LD_STRING DK-Sniper-2
17779: PPUSH
17780: CALL_OW 88
// repeat wait ( 1 ) ;
17784: LD_INT 1
17786: PPUSH
17787: CALL_OW 67
// ComWalk ( Kaia ) ;
17791: LD_EXP 51
17795: PPUSH
17796: CALL_OW 138
// until not Crawls ( Kaia ) ;
17800: LD_EXP 51
17804: PPUSH
17805: CALL_OW 318
17809: NOT
17810: IFFALSE 17784
// SetClass ( Kaia , class_hunter ) ;
17812: LD_EXP 51
17816: PPUSH
17817: LD_INT 32
17819: PPUSH
17820: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17824: LD_EXP 53
17828: PPUSH
17829: CALL_OW 302
17833: IFFALSE 17847
17835: PUSH
17836: LD_EXP 53
17840: PUSH
17841: LD_EXP 14
17845: IN
17846: AND
17847: IFFALSE 17861
// Say ( Markov , DMar-Sniper-3 ) ;
17849: LD_EXP 53
17853: PPUSH
17854: LD_STRING DMar-Sniper-3
17856: PPUSH
17857: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17861: LD_EXP 51
17865: PPUSH
17866: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17870: LD_EXP 51
17874: PPUSH
17875: LD_INT 2
17877: PPUSH
17878: CALL_OW 235
// end ; end else
17882: GO 17910
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17884: LD_ADDR_EXP 16
17888: PUSH
17889: LD_EXP 16
17893: PUSH
17894: LD_INT 135
17896: DIFF
17897: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17898: LD_EXP 46
17902: PPUSH
17903: LD_STRING DH-Locked
17905: PPUSH
17906: CALL_OW 88
// end ; end ; end ; drugsLab :
17910: GO 19572
17912: LD_INT 162
17914: DOUBLE
17915: EQUAL
17916: IFTRUE 17920
17918: GO 18053
17920: POP
// begin if hasStimDrugs then
17921: LD_EXP 9
17925: IFFALSE 18039
// begin wait ( 0 0$1 ) ;
17927: LD_INT 35
17929: PPUSH
17930: CALL_OW 67
// if not hasStimDrugsCollected then
17934: LD_EXP 24
17938: NOT
17939: IFFALSE 17981
// begin Say ( Heike , DH-Lab-1 ) ;
17941: LD_EXP 46
17945: PPUSH
17946: LD_STRING DH-Lab-1
17948: PPUSH
17949: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17953: LD_INT 5
17955: PPUSH
17956: LD_INT 2
17958: PPUSH
17959: LD_INT 2
17961: PPUSH
17962: CALL_OW 322
// hasStimDrugsCollected := true ;
17966: LD_ADDR_EXP 24
17970: PUSH
17971: LD_INT 1
17973: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17974: LD_STRING M1-drugs-out
17976: PPUSH
17977: CALL_OW 604
// end ; if not hasExplosionCollected then
17981: LD_EXP 23
17985: NOT
17986: IFFALSE 18004
// entranceVisitedList := entranceVisitedList diff drugsLab else
17988: LD_ADDR_EXP 16
17992: PUSH
17993: LD_EXP 16
17997: PUSH
17998: LD_INT 162
18000: DIFF
18001: ST_TO_ADDR
18002: GO 18037
// begin wait ( 0 0$3 ) ;
18004: LD_INT 105
18006: PPUSH
18007: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
18011: LD_EXP 46
18015: PPUSH
18016: LD_STRING DH-Lab-2
18018: PPUSH
18019: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
18023: LD_STRING M1-drugsLab-out
18025: PPUSH
18026: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
18030: LD_INT 162
18032: PPUSH
18033: CALL 21547 0 1
// end ; end else
18037: GO 18051
// Say ( Heike , DH-Locked ) ;
18039: LD_EXP 46
18043: PPUSH
18044: LD_STRING DH-Locked
18046: PPUSH
18047: CALL_OW 88
// end ; ruFac :
18051: GO 19572
18053: LD_INT 61
18055: DOUBLE
18056: EQUAL
18057: IFTRUE 18061
18059: GO 18173
18061: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
18062: LD_EXP 53
18066: PPUSH
18067: CALL_OW 302
18071: IFFALSE 18086
18073: PUSH
18074: LD_EXP 53
18078: PUSH
18079: LD_EXP 14
18083: IN
18084: NOT
18085: AND
18086: IFFALSE 18167
// begin Say ( Heike , DH-Krastyo-1 ) ;
18088: LD_EXP 46
18092: PPUSH
18093: LD_STRING DH-Krastyo-1
18095: PPUSH
18096: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
18100: LD_EXP 53
18104: PPUSH
18105: LD_STRING DMar-Krastyo-2
18107: PPUSH
18108: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
18112: LD_EXP 53
18116: PPUSH
18117: LD_STRING DMar-Krastyo-3
18119: PPUSH
18120: CALL_OW 88
// SetSide ( Markov , 2 ) ;
18124: LD_EXP 53
18128: PPUSH
18129: LD_INT 2
18131: PPUSH
18132: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
18136: LD_ADDR_EXP 14
18140: PUSH
18141: LD_EXP 14
18145: PPUSH
18146: LD_EXP 53
18150: PPUSH
18151: CALL 68757 0 2
18155: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
18156: LD_EXP 53
18160: PPUSH
18161: CALL_OW 122
// end else
18165: GO 18171
// SayHEmpty ( ) ;
18167: CALL 16534 0 0
// end ; ruBarKam :
18171: GO 19572
18173: LD_INT 109
18175: DOUBLE
18176: EQUAL
18177: IFTRUE 18181
18179: GO 18330
18181: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
18182: LD_EXP 50
18186: PPUSH
18187: CALL_OW 302
18191: IFFALSE 18206
18193: PUSH
18194: LD_EXP 50
18198: PUSH
18199: LD_EXP 14
18203: IN
18204: NOT
18205: AND
18206: IFFALSE 18324
// begin Say ( Heike , DH-Kamil-1 ) ;
18208: LD_EXP 46
18212: PPUSH
18213: LD_STRING DH-Kamil-1
18215: PPUSH
18216: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
18220: LD_EXP 50
18224: PPUSH
18225: LD_STRING DKam-Kamil-2
18227: PPUSH
18228: CALL_OW 88
// if IsOk ( Sophia ) then
18232: LD_EXP 52
18236: PPUSH
18237: CALL_OW 302
18241: IFFALSE 18281
// if Sophia in heikeSquad then
18243: LD_EXP 52
18247: PUSH
18248: LD_EXP 14
18252: IN
18253: IFFALSE 18269
// Say ( Kamil , DKam-Kamil-a-3 ) else
18255: LD_EXP 50
18259: PPUSH
18260: LD_STRING DKam-Kamil-a-3
18262: PPUSH
18263: CALL_OW 88
18267: GO 18281
// Say ( Kamil , DKam-Kamil-3 ) ;
18269: LD_EXP 50
18273: PPUSH
18274: LD_STRING DKam-Kamil-3
18276: PPUSH
18277: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
18281: LD_EXP 50
18285: PPUSH
18286: LD_INT 2
18288: PPUSH
18289: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
18293: LD_ADDR_EXP 14
18297: PUSH
18298: LD_EXP 14
18302: PPUSH
18303: LD_EXP 50
18307: PPUSH
18308: CALL 68757 0 2
18312: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
18313: LD_EXP 50
18317: PPUSH
18318: CALL_OW 122
// end else
18322: GO 18328
// SayHEmpty ( ) ;
18324: CALL 16534 0 0
// end ; ruOutpost1 :
18328: GO 19572
18330: LD_INT 169
18332: DOUBLE
18333: EQUAL
18334: IFTRUE 18338
18336: GO 18579
18338: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
18339: LD_EXP 55
18343: PPUSH
18344: CALL_OW 302
18348: IFFALSE 18363
18350: PUSH
18351: LD_EXP 55
18355: PUSH
18356: LD_EXP 14
18360: IN
18361: NOT
18362: AND
18363: IFFALSE 18573
// begin if hasMethanol then
18365: LD_EXP 13
18369: IFFALSE 18502
// begin Say ( Heike , DH-Kurt-1 ) ;
18371: LD_EXP 46
18375: PPUSH
18376: LD_STRING DH-Kurt-1
18378: PPUSH
18379: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18383: LD_EXP 55
18387: PPUSH
18388: LD_STRING DKs-Kurt-2
18390: PPUSH
18391: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
18395: LD_EXP 47
18399: PPUSH
18400: LD_INT 169
18402: PPUSH
18403: CALL_OW 296
18407: PUSH
18408: LD_INT 10
18410: LESS
18411: IFFALSE 18425
18413: PUSH
18414: LD_EXP 47
18418: PUSH
18419: LD_EXP 14
18423: IN
18424: AND
18425: IFFALSE 18500
// begin ComMoveXY ( Givi , 100 , 37 ) ;
18427: LD_EXP 47
18431: PPUSH
18432: LD_INT 100
18434: PPUSH
18435: LD_INT 37
18437: PPUSH
18438: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
18442: LD_EXP 47
18446: PPUSH
18447: LD_INT 169
18449: PPUSH
18450: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
18454: LD_INT 35
18456: PPUSH
18457: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
18461: LD_EXP 47
18465: PPUSH
18466: LD_INT 169
18468: PPUSH
18469: CALL_OW 296
18473: PUSH
18474: LD_INT 7
18476: LESS
18477: IFFALSE 18454
// Say ( Givi , DG-Kurt-3 ) ;
18479: LD_EXP 47
18483: PPUSH
18484: LD_STRING DG-Kurt-3
18486: PPUSH
18487: CALL_OW 88
// ComStop ( Givi ) ;
18491: LD_EXP 47
18495: PPUSH
18496: CALL_OW 141
// end ; end else
18500: GO 18530
// begin Say ( Heike , DH-Kurt-1 ) ;
18502: LD_EXP 46
18506: PPUSH
18507: LD_STRING DH-Kurt-1
18509: PPUSH
18510: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18514: LD_EXP 55
18518: PPUSH
18519: LD_STRING DKs-Kurt-2
18521: PPUSH
18522: CALL_OW 88
// SpawnAdditionalRuGuards ;
18526: CALL 3677 0 0
// end ; SetSide ( Kurt , 2 ) ;
18530: LD_EXP 55
18534: PPUSH
18535: LD_INT 2
18537: PPUSH
18538: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
18542: LD_ADDR_EXP 14
18546: PUSH
18547: LD_EXP 14
18551: PPUSH
18552: LD_EXP 55
18556: PPUSH
18557: CALL 68757 0 2
18561: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
18562: LD_EXP 55
18566: PPUSH
18567: CALL_OW 122
// end else
18571: GO 18577
// SayHEmpty ( ) ;
18573: CALL 16534 0 0
// end ; ruOutpostBar :
18577: GO 19572
18579: LD_INT 13
18581: DOUBLE
18582: EQUAL
18583: IFTRUE 18587
18585: GO 18633
18587: POP
// begin if not hasGuardPatrolPlan then
18588: LD_EXP 18
18592: NOT
18593: IFFALSE 18627
// begin Say ( Heike , DH-PatrolPlan ) ;
18595: LD_EXP 46
18599: PPUSH
18600: LD_STRING DH-PatrolPlan
18602: PPUSH
18603: CALL_OW 88
// hasGuardPatrolPlan := true ;
18607: LD_ADDR_EXP 18
18611: PUSH
18612: LD_INT 1
18614: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
18615: LD_INT 6
18617: PPUSH
18618: LD_INT 2
18620: PPUSH
18621: CALL_OW 343
// end else
18625: GO 18631
// SayHEmpty ( ) ;
18627: CALL 16534 0 0
// end ; ruKaiaBar :
18631: GO 19572
18633: LD_INT 147
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18797
18641: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18642: LD_EXP 51
18646: PPUSH
18647: CALL_OW 302
18651: IFFALSE 18666
18653: PUSH
18654: LD_EXP 51
18658: PUSH
18659: LD_EXP 14
18663: IN
18664: NOT
18665: AND
18666: IFFALSE 18795
// begin Say ( Heike , DH-Kaia-1 ) ;
18668: LD_EXP 46
18672: PPUSH
18673: LD_STRING DH-Kaia-1
18675: PPUSH
18676: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18680: LD_EXP 51
18684: PPUSH
18685: LD_STRING DK-Kaia-2
18687: PPUSH
18688: CALL_OW 88
// if hasSniperRifle then
18692: LD_EXP 11
18696: IFFALSE 18747
// begin if IsOk ( Markov ) then
18698: LD_EXP 53
18702: PPUSH
18703: CALL_OW 302
18707: IFFALSE 18723
// Say ( Kaia , DK-Kaia-3 ) else
18709: LD_EXP 51
18713: PPUSH
18714: LD_STRING DK-Kaia-3
18716: PPUSH
18717: CALL_OW 88
18721: GO 18735
// Say ( Kaia , DK-Kaia-a-3 ) ;
18723: LD_EXP 51
18727: PPUSH
18728: LD_STRING DK-Kaia-a-3
18730: PPUSH
18731: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18735: LD_EXP 46
18739: PPUSH
18740: LD_STRING DH-Kaia-4
18742: PPUSH
18743: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18747: LD_EXP 51
18751: PPUSH
18752: LD_INT 2
18754: PPUSH
18755: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18759: LD_ADDR_EXP 14
18763: PUSH
18764: LD_EXP 14
18768: PPUSH
18769: LD_EXP 51
18773: PPUSH
18774: CALL 68757 0 2
18778: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18779: LD_EXP 51
18783: PPUSH
18784: CALL_OW 122
// Query ( QKaia ) ;
18788: LD_STRING QKaia
18790: PPUSH
18791: CALL_OW 97
// end ; end ; ruWeaponsBar :
18795: GO 19572
18797: LD_INT 137
18799: DOUBLE
18800: EQUAL
18801: IFTRUE 18805
18803: GO 19571
18805: POP
// begin someoneTookWeapon := false ;
18806: LD_ADDR_VAR 0 6
18810: PUSH
18811: LD_INT 0
18813: ST_TO_ADDR
// if hasWeapons then
18814: LD_EXP 19
18818: IFFALSE 19557
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18820: LD_ADDR_EXP 16
18824: PUSH
18825: LD_EXP 16
18829: PUSH
18830: LD_INT 137
18832: DIFF
18833: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18834: LD_ADDR_VAR 0 4
18838: PUSH
18839: LD_EXP 14
18843: PPUSH
18844: LD_INT 91
18846: PUSH
18847: LD_EXP 46
18851: PUSH
18852: LD_INT 8
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 72
18864: ST_TO_ADDR
// if not heikeSquad or not tmp then
18865: LD_EXP 14
18869: NOT
18870: IFTRUE 18879
18872: PUSH
18873: LD_VAR 0 4
18877: NOT
18878: OR
18879: IFFALSE 18895
// Say ( Heike , DH-Weapons-Alone ) else
18881: LD_EXP 46
18885: PPUSH
18886: LD_STRING DH-Weapons-Alone
18888: PPUSH
18889: CALL_OW 88
18893: GO 19555
// begin if not firstArmouryDialog then
18895: LD_EXP 39
18899: NOT
18900: IFFALSE 18959
// begin Say ( Heike , DH-Weapons-1 ) ;
18902: LD_EXP 46
18906: PPUSH
18907: LD_STRING DH-Weapons-1
18909: PPUSH
18910: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18914: LD_EXP 46
18918: PPUSH
18919: LD_STRING DH-Weapons-2
18921: PPUSH
18922: CALL_OW 88
// Query ( Weapons ) ;
18926: LD_STRING Weapons
18928: PPUSH
18929: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18933: LD_INT 65
18935: PPUSH
18936: LD_INT 1
18938: PPUSH
18939: CALL_OW 424
// canEquipWeapons := true ;
18943: LD_ADDR_EXP 41
18947: PUSH
18948: LD_INT 1
18950: ST_TO_ADDR
// firstArmouryDialog := true ;
18951: LD_ADDR_EXP 39
18955: PUSH
18956: LD_INT 1
18958: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18959: LD_EXP 8
18963: IFFALSE 18977
18965: PUSH
18966: LD_EXP 51
18970: PUSH
18971: LD_VAR 0 4
18975: IN
18976: AND
18977: IFFALSE 18994
18979: PUSH
18980: LD_EXP 51
18984: PPUSH
18985: CALL_OW 257
18989: PUSH
18990: LD_INT 34
18992: NONEQUAL
18993: AND
18994: IFFALSE 19152
// begin SetSide ( Kaia , 5 ) ;
18996: LD_EXP 51
19000: PPUSH
19001: LD_INT 5
19003: PPUSH
19004: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
19008: LD_EXP 51
19012: PPUSH
19013: LD_INT 137
19015: PPUSH
19016: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19020: LD_INT 35
19022: PPUSH
19023: CALL_OW 67
// until IsInUnit ( Kaia ) ;
19027: LD_EXP 51
19031: PPUSH
19032: CALL_OW 310
19036: IFFALSE 19020
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
19038: LD_EXP 46
19042: PPUSH
19043: LD_STRING DH-Kaia-Revolver-2
19045: PPUSH
19046: CALL_OW 88
// someoneTookWeapon := true ;
19050: LD_ADDR_VAR 0 6
19054: PUSH
19055: LD_INT 1
19057: ST_TO_ADDR
// SetClassKaiaRevolver ;
19058: CALL 1771 0 0
// hasRevolver := false ;
19062: LD_ADDR_EXP 8
19066: PUSH
19067: LD_INT 0
19069: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
19070: LD_EXP 51
19074: PPUSH
19075: LD_INT 2
19077: PPUSH
19078: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
19082: LD_EXP 51
19086: PPUSH
19087: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
19091: LD_EXP 51
19095: PPUSH
19096: CALL_OW 257
19100: PUSH
19101: LD_INT 32
19103: EQUAL
19104: IFFALSE 19118
19106: PUSH
19107: LD_EXP 48
19111: PUSH
19112: LD_EXP 14
19116: IN
19117: AND
19118: IFFALSE 19135
19120: PUSH
19121: LD_EXP 48
19125: PPUSH
19126: CALL_OW 255
19130: PUSH
19131: LD_INT 2
19133: EQUAL
19134: AND
19135: IFFALSE 19152
// begin giveSniperRifleToMike := true ;
19137: LD_ADDR_EXP 42
19141: PUSH
19142: LD_INT 1
19144: ST_TO_ADDR
// Query ( QSniperMike ) ;
19145: LD_STRING QSniperMike
19147: PPUSH
19148: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
19152: LD_EXP 47
19156: PUSH
19157: LD_VAR 0 4
19161: IN
19162: IFFALSE 19179
19164: PUSH
19165: LD_EXP 47
19169: PPUSH
19170: CALL_OW 257
19174: PUSH
19175: LD_INT 33
19177: EQUAL
19178: AND
19179: IFFALSE 19337
// begin someoneTookWeapon := true ;
19181: LD_ADDR_VAR 0 6
19185: PUSH
19186: LD_INT 1
19188: ST_TO_ADDR
// SetSide ( Givi , 5 ) ;
19189: LD_EXP 47
19193: PPUSH
19194: LD_INT 5
19196: PPUSH
19197: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
19201: LD_EXP 47
19205: PPUSH
19206: LD_INT 137
19208: PPUSH
19209: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19213: LD_INT 35
19215: PPUSH
19216: CALL_OW 67
// until IsInUnit ( Givi ) ;
19220: LD_EXP 47
19224: PPUSH
19225: CALL_OW 310
19229: IFFALSE 19213
// Say ( Givi , DG-Weapons-3 ) ;
19231: LD_EXP 47
19235: PPUSH
19236: LD_STRING DG-Weapons-3
19238: PPUSH
19239: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
19243: LD_EXP 46
19247: PPUSH
19248: LD_STRING DH-Weapons-4
19250: PPUSH
19251: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
19255: LD_EXP 47
19259: PPUSH
19260: LD_STRING DG-Weapons-5
19262: PPUSH
19263: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
19267: LD_EXP 47
19271: PPUSH
19272: LD_INT 11
19274: PPUSH
19275: CALL_OW 336
// ComExitBuilding ( Givi ) ;
19279: LD_EXP 47
19283: PPUSH
19284: CALL_OW 122
// SetSide ( Givi , 2 ) ;
19288: LD_EXP 47
19292: PPUSH
19293: LD_INT 2
19295: PPUSH
19296: CALL_OW 235
// if hasRevolver and not heikeHasRevolver then
19300: LD_EXP 8
19304: IFFALSE 19313
19306: PUSH
19307: LD_EXP 20
19311: NOT
19312: AND
19313: IFFALSE 19335
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19315: LD_EXP 46
19319: PPUSH
19320: LD_STRING DH-Kaia-Revolver-1
19322: PPUSH
19323: CALL_OW 88
// heikeHasRevolver := true ;
19327: LD_ADDR_EXP 20
19331: PUSH
19332: LD_INT 1
19334: ST_TO_ADDR
// end ; end else
19335: GO 19555
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
19337: LD_EXP 50
19341: PUSH
19342: LD_VAR 0 4
19346: IN
19347: IFFALSE 19364
19349: PUSH
19350: LD_EXP 50
19354: PPUSH
19355: CALL_OW 257
19359: PUSH
19360: LD_INT 33
19362: EQUAL
19363: AND
19364: IFFALSE 19510
// begin someoneTookWeapon := true ;
19366: LD_ADDR_VAR 0 6
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// SetSide ( Kamil , 5 ) ;
19374: LD_EXP 50
19378: PPUSH
19379: LD_INT 5
19381: PPUSH
19382: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
19386: LD_EXP 50
19390: PPUSH
19391: LD_INT 137
19393: PPUSH
19394: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19398: LD_INT 35
19400: PPUSH
19401: CALL_OW 67
// until IsInUnit ( Kamil ) ;
19405: LD_EXP 50
19409: PPUSH
19410: CALL_OW 310
19414: IFFALSE 19398
// Say ( Kamil , DKam-Weapons-a-3 ) ;
19416: LD_EXP 50
19420: PPUSH
19421: LD_STRING DKam-Weapons-a-3
19423: PPUSH
19424: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
19428: LD_EXP 46
19432: PPUSH
19433: LD_STRING DH-Weapons-a-4
19435: PPUSH
19436: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
19440: LD_EXP 50
19444: PPUSH
19445: LD_INT 11
19447: PPUSH
19448: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
19452: LD_EXP 50
19456: PPUSH
19457: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
19461: LD_EXP 50
19465: PPUSH
19466: LD_INT 2
19468: PPUSH
19469: CALL_OW 235
// if hasRevolver and not heikeHasRevolver then
19473: LD_EXP 8
19477: IFFALSE 19486
19479: PUSH
19480: LD_EXP 20
19484: NOT
19485: AND
19486: IFFALSE 19508
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19488: LD_EXP 46
19492: PPUSH
19493: LD_STRING DH-Kaia-Revolver-1
19495: PPUSH
19496: CALL_OW 88
// heikeHasRevolver := true ;
19500: LD_ADDR_EXP 20
19504: PUSH
19505: LD_INT 1
19507: ST_TO_ADDR
// end ; end else
19508: GO 19555
// begin if not someoneTookWeapon then
19510: LD_VAR 0 6
19514: NOT
19515: IFFALSE 19529
// Say ( Heike , DH-Weapons-Alone-2 ) ;
19517: LD_EXP 46
19521: PPUSH
19522: LD_STRING DH-Weapons-Alone-2
19524: PPUSH
19525: CALL_OW 88
// if hasRevolver then
19529: LD_EXP 8
19533: IFFALSE 19555
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
19535: LD_EXP 46
19539: PPUSH
19540: LD_STRING DH-Kaia-Revolver-1a
19542: PPUSH
19543: CALL_OW 88
// heikeHasRevolver := true ;
19547: LD_ADDR_EXP 20
19551: PUSH
19552: LD_INT 1
19554: ST_TO_ADDR
// end ; end ; end ; end else
19555: GO 19569
// Say ( Heike , DH-Locked ) ;
19557: LD_EXP 46
19561: PPUSH
19562: LD_STRING DH-Locked
19564: PPUSH
19565: CALL_OW 88
// end ; end ;
19569: GO 19572
19571: POP
// SetSide ( building , 3 ) ;
19572: LD_VAR 0 1
19576: PPUSH
19577: LD_INT 3
19579: PPUSH
19580: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
19584: LD_VAR 0 1
19588: PPUSH
19589: CALL 20998 0 1
// wait ( 0 0$0.3 ) ;
19593: LD_INT 10
19595: PPUSH
19596: CALL_OW 67
// ComExitBuilding ( Heike ) ;
19600: LD_EXP 46
19604: PPUSH
19605: CALL_OW 122
// SetSide ( Heike , 2 ) ;
19609: LD_EXP 46
19613: PPUSH
19614: LD_INT 2
19616: PPUSH
19617: CALL_OW 235
// InGameOff ;
19621: CALL_OW 9
// end ;
19625: LD_VAR 0 2
19629: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
19630: LD_EXP 30
19634: NOT
19635: IFFALSE 19644
19637: PUSH
19638: LD_EXP 17
19642: NOT
19643: AND
19644: IFFALSE 19680
19646: PUSH
19647: LD_INT 22
19649: PUSH
19650: LD_INT 5
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 21
19659: PUSH
19660: LD_INT 1
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: PPUSH
19671: CALL_OW 69
19675: PUSH
19676: LD_INT 0
19678: EQUAL
19679: AND
19680: IFFALSE 19733
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_INT 4
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: PPUSH
19707: CALL_OW 69
19711: PUSH
19712: LD_INT 0
19714: EQUAL
19715: IFFALSE 19723
19717: PUSH
19718: LD_EXP 25
19722: AND
19723: IFTRUE 19732
19725: PUSH
19726: LD_EXP 25
19730: NOT
19731: OR
19732: AND
19733: IFFALSE 19765
19735: GO 19737
19737: DISABLE
// begin DialogueOn ;
19738: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19742: LD_EXP 46
19746: PPUSH
19747: LD_STRING DH-Alarm-2
19749: PPUSH
19750: CALL_OW 88
// DialogueOff ;
19754: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19758: LD_STRING M1-people-out
19760: PPUSH
19761: CALL_OW 337
// end ;
19765: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19766: LD_EXP 48
19770: PPUSH
19771: CALL_OW 255
19775: PUSH
19776: LD_INT 2
19778: EQUAL
19779: IFFALSE 19793
19781: PUSH
19782: LD_EXP 48
19786: PUSH
19787: LD_EXP 14
19791: IN
19792: AND
19793: IFFALSE 19815
19795: PUSH
19796: LD_EXP 46
19800: PPUSH
19801: LD_EXP 48
19805: PPUSH
19806: CALL_OW 296
19810: PUSH
19811: LD_INT 6
19813: LESS
19814: AND
19815: IFFALSE 19824
19817: PUSH
19818: LD_EXP 30
19822: NOT
19823: AND
19824: IFFALSE 19832
19826: PUSH
19827: LD_EXP 42
19831: AND
19832: IFFALSE 19877
19834: GO 19836
19836: DISABLE
// begin repeat wait ( 1 ) ;
19837: LD_INT 1
19839: PPUSH
19840: CALL_OW 67
// ComWalk ( Mike ) ;
19844: LD_EXP 48
19848: PPUSH
19849: CALL_OW 138
// until not Crawls ( Mike ) ;
19853: LD_EXP 48
19857: PPUSH
19858: CALL_OW 318
19862: NOT
19863: IFFALSE 19837
// SetClass ( Mike , class_hunter ) ;
19865: LD_EXP 48
19869: PPUSH
19870: LD_INT 32
19872: PPUSH
19873: CALL_OW 336
// end ;
19877: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp , p ;
19878: LD_EXP 41
19882: IFFALSE 19890
19884: PUSH
19885: LD_EXP 40
19889: AND
19890: IFFALSE 19905
19892: PUSH
19893: LD_INT 137
19895: PPUSH
19896: CALL_OW 255
19900: PUSH
19901: LD_INT 3
19903: EQUAL
19904: AND
19905: IFFALSE 19953
19907: PUSH
19908: LD_EXP 14
19912: PPUSH
19913: LD_INT 95
19915: PUSH
19916: LD_INT 65
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 22
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 25
19935: PUSH
19936: LD_INT 33
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: LIST
19947: PPUSH
19948: CALL_OW 72
19952: AND
19953: IFFALSE 19972
19955: PUSH
19956: LD_INT 2
19958: PPUSH
19959: LD_INT 3
19961: PPUSH
19962: CALL_OW 81
19966: PUSH
19967: LD_INT 2
19969: EQUAL
19970: NOT
19971: AND
19972: IFFALSE 19993
19974: PUSH
19975: LD_EXP 66
19979: PPUSH
19980: LD_INT 137
19982: PPUSH
19983: CALL_OW 296
19987: PUSH
19988: LD_INT 12
19990: LESS
19991: NOT
19992: AND
19993: IFFALSE 20312
19995: GO 19997
19997: DISABLE
19998: LD_INT 0
20000: PPUSH
20001: PPUSH
20002: PPUSH
// begin enable ;
20003: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: LD_EXP 14
20013: PPUSH
20014: LD_INT 95
20016: PUSH
20017: LD_INT 65
20019: PUSH
20020: EMPTY
20021: LIST
20022: LIST
20023: PUSH
20024: LD_INT 22
20026: PUSH
20027: LD_INT 2
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: LD_INT 25
20036: PUSH
20037: LD_INT 33
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: EMPTY
20045: LIST
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 72
20053: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
20054: LD_STRING QWeapons
20056: PPUSH
20057: CALL_OW 97
20061: PUSH
20062: LD_INT 1
20064: EQUAL
20065: IFFALSE 20312
// begin for i in tmp do
20067: LD_ADDR_VAR 0 1
20071: PUSH
20072: LD_VAR 0 2
20076: PUSH
20077: FOR_IN
20078: IFFALSE 20310
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
20080: LD_INT 137
20082: PPUSH
20083: CALL_OW 313
20087: PUSH
20088: LD_INT 6
20090: EQUAL
20091: IFFALSE 20095
// continue ;
20093: GO 20077
// SetSide ( i , 3 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 3
20102: PPUSH
20103: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
20107: LD_VAR 0 1
20111: PPUSH
20112: LD_INT 137
20114: PPUSH
20115: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
20119: LD_ADDR_EXP 40
20123: PUSH
20124: LD_EXP 40
20128: PPUSH
20129: CALL 70152 0 1
20133: ST_TO_ADDR
// p := 0 ;
20134: LD_ADDR_VAR 0 3
20138: PUSH
20139: LD_INT 0
20141: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
20142: LD_INT 10
20144: PPUSH
20145: CALL_OW 67
// p := Inc ( p ) ;
20149: LD_ADDR_VAR 0 3
20153: PUSH
20154: LD_VAR 0 3
20158: PPUSH
20159: CALL 70130 0 1
20163: ST_TO_ADDR
// if p > 5 then
20164: LD_VAR 0 3
20168: PUSH
20169: LD_INT 5
20171: GREATER
20172: IFFALSE 20198
// begin ComStop ( i ) ;
20174: LD_VAR 0 1
20178: PPUSH
20179: CALL_OW 141
// Query ( QBlocked ) ;
20183: LD_STRING QBlocked
20185: PPUSH
20186: CALL_OW 97
// InGameOff ;
20190: CALL_OW 9
// exit ;
20194: POP
20195: POP
20196: GO 20312
// end ; until IsInUnit ( i ) ;
20198: LD_VAR 0 1
20202: PPUSH
20203: CALL_OW 310
20207: IFFALSE 20142
// SetClass ( i , class_soldier ) ;
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_INT 1
20216: PPUSH
20217: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
20221: LD_VAR 0 1
20225: PPUSH
20226: CALL_OW 122
// wait ( 0 0$1 ) ;
20230: LD_INT 35
20232: PPUSH
20233: CALL_OW 67
// until not IsInUnit ( i ) ;
20237: LD_VAR 0 1
20241: PPUSH
20242: CALL_OW 310
20246: NOT
20247: IFFALSE 20221
// SetSide ( i , 2 ) ;
20249: LD_VAR 0 1
20253: PPUSH
20254: LD_INT 2
20256: PPUSH
20257: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
20261: LD_VAR 0 1
20265: PPUSH
20266: LD_INT 191
20268: PPUSH
20269: LD_INT 126
20271: PPUSH
20272: CALL_OW 171
// if weaponsAmount = 0 then
20276: LD_EXP 40
20280: PUSH
20281: LD_INT 0
20283: EQUAL
20284: IFFALSE 20308
// begin Query ( QWeaponsAmountZero ) ;
20286: LD_STRING QWeaponsAmountZero
20288: PPUSH
20289: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 0 ) ;
20293: LD_INT 65
20295: PPUSH
20296: LD_INT 0
20298: PPUSH
20299: CALL_OW 424
// disable ;
20303: DISABLE
// exit ;
20304: POP
20305: POP
20306: GO 20312
// end ; end ;
20308: GO 20077
20310: POP
20311: POP
// end ; end ; end_of_file
20312: PPOPN 3
20314: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
20315: LD_VAR 0 1
20319: PUSH
20320: LD_INT 3
20322: DOUBLE
20323: EQUAL
20324: IFTRUE 20328
20326: GO 20358
20328: POP
// begin repeat wait ( 0 0$1 ) ;
20329: LD_INT 35
20331: PPUSH
20332: CALL_OW 67
// CenterOnUnits ( Heike ) ;
20336: LD_EXP 46
20340: PPUSH
20341: CALL_OW 85
// until IsDying ( Heike ) ;
20345: LD_EXP 46
20349: PPUSH
20350: CALL_OW 303
20354: IFFALSE 20329
// end ; end ;
20356: GO 20359
20358: POP
// end ;
20359: PPOPN 1
20361: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
20362: LD_OWVAR 59
20366: IFFALSE 20370
// exit ;
20368: GO 20444
// if showPlaceEvent then
20370: LD_INT 4
20372: IFFALSE 20444
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
20374: LD_VAR 0 2
20378: PPUSH
20379: LD_VAR 0 3
20383: PPUSH
20384: LD_INT 2
20386: PPUSH
20387: LD_INT 6
20389: NEG
20390: PPUSH
20391: CALL_OW 330
// CenterOnXY ( x , y ) ;
20395: LD_VAR 0 2
20399: PPUSH
20400: LD_VAR 0 3
20404: PPUSH
20405: CALL_OW 84
// wait ( time ) ;
20409: LD_VAR 0 4
20413: PPUSH
20414: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
20418: LD_EXP 46
20422: PPUSH
20423: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
20427: LD_VAR 0 2
20431: PPUSH
20432: LD_VAR 0 3
20436: PPUSH
20437: LD_INT 2
20439: PPUSH
20440: CALL_OW 331
// end ; end ;
20444: PPOPN 7
20446: END
// on UnitDestroyed ( un ) do var x , y ;
20447: LD_INT 0
20449: PPUSH
20450: PPUSH
// begin if un = Heike and hasNormalScene then
20451: LD_VAR 0 1
20455: PUSH
20456: LD_EXP 46
20460: EQUAL
20461: IFFALSE 20469
20463: PUSH
20464: LD_EXP 5
20468: AND
20469: IFFALSE 20493
// if loseCounter then
20471: LD_EXP 32
20475: IFFALSE 20486
// YouLost ( HeikeNoSurrender ) else
20477: LD_STRING HeikeNoSurrender
20479: PPUSH
20480: CALL_OW 104
20484: GO 20493
// YouLost ( Heike ) ;
20486: LD_STRING Heike
20488: PPUSH
20489: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
20493: LD_VAR 0 1
20497: PPUSH
20498: CALL_OW 255
20502: PUSH
20503: LD_INT 2
20505: EQUAL
20506: IFFALSE 20523
20508: PUSH
20509: LD_VAR 0 1
20513: PPUSH
20514: CALL_OW 247
20518: PUSH
20519: LD_INT 1
20521: EQUAL
20522: AND
20523: IFFALSE 20540
// loseCounter := Inc ( loseCounter ) ;
20525: LD_ADDR_EXP 32
20529: PUSH
20530: LD_EXP 32
20534: PPUSH
20535: CALL 70130 0 1
20539: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
20540: LD_VAR 0 1
20544: PPUSH
20545: CALL_OW 255
20549: PUSH
20550: LD_INT 6
20552: EQUAL
20553: IFFALSE 20562
20555: PUSH
20556: LD_EXP 17
20560: NOT
20561: AND
20562: IFFALSE 20576
20564: PUSH
20565: LD_VAR 0 1
20569: PUSH
20570: LD_EXP 71
20574: IN
20575: AND
20576: IFFALSE 20680
// begin x := GetX ( un ) ;
20578: LD_ADDR_VAR 0 2
20582: PUSH
20583: LD_VAR 0 1
20587: PPUSH
20588: CALL_OW 250
20592: ST_TO_ADDR
// y := GetY ( un ) ;
20593: LD_ADDR_VAR 0 3
20597: PUSH
20598: LD_VAR 0 1
20602: PPUSH
20603: CALL_OW 251
20607: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
20608: LD_ADDR_EXP 43
20612: PUSH
20613: LD_EXP 43
20617: PPUSH
20618: LD_VAR 0 2
20622: PUSH
20623: LD_VAR 0 3
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PPUSH
20632: CALL 68757 0 2
20636: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
20637: LD_ADDR_EXP 71
20641: PUSH
20642: LD_EXP 71
20646: PUSH
20647: LD_VAR 0 1
20651: DIFF
20652: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
20653: LD_INT 3
20655: PPUSH
20656: LD_VAR 0 2
20660: PPUSH
20661: LD_VAR 0 3
20665: PPUSH
20666: CALL_OW 293
20670: IFFALSE 20680
// isAlarm := true ;
20672: LD_ADDR_EXP 17
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// end ; end ;
20680: PPOPN 3
20682: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
20683: LD_EXP 44
20687: IFFALSE 20691
// exit ;
20689: GO 20745
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
20691: LD_VAR 0 1
20695: PUSH
20696: LD_INT 2
20698: EQUAL
20699: IFFALSE 20711
20701: PUSH
20702: LD_VAR 0 2
20706: PUSH
20707: LD_INT 3
20709: EQUAL
20710: AND
20711: IFTRUE 20735
20713: PUSH
20714: LD_VAR 0 1
20718: PUSH
20719: LD_INT 3
20721: EQUAL
20722: IFFALSE 20734
20724: PUSH
20725: LD_VAR 0 2
20729: PUSH
20730: LD_INT 2
20732: EQUAL
20733: AND
20734: OR
20735: IFFALSE 20745
// isAlarm := true ;
20737: LD_ADDR_EXP 17
20741: PUSH
20742: LD_INT 1
20744: ST_TO_ADDR
// end ;
20745: PPOPN 2
20747: END
// on DestinationUnreachable ( un ) do var i , units ;
20748: LD_INT 0
20750: PPUSH
20751: PPUSH
// begin if un = ruDisturb and not isAlarm then
20752: LD_VAR 0 1
20756: PUSH
20757: LD_EXP 66
20761: EQUAL
20762: IFFALSE 20771
20764: PUSH
20765: LD_EXP 17
20769: NOT
20770: AND
20771: IFFALSE 20892
// begin units := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff Heike ;
20773: LD_ADDR_VAR 0 3
20777: PUSH
20778: LD_INT 22
20780: PUSH
20781: LD_INT 2
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 21
20790: PUSH
20791: LD_INT 1
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PPUSH
20802: CALL_OW 69
20806: PUSH
20807: LD_EXP 46
20811: DIFF
20812: ST_TO_ADDR
// if not units then
20813: LD_VAR 0 3
20817: NOT
20818: IFFALSE 20822
// exit ;
20820: GO 20892
// for i in units do
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: LD_VAR 0 3
20831: PUSH
20832: FOR_IN
20833: IFFALSE 20890
// begin if Carry ( i ) then
20835: LD_VAR 0 2
20839: PPUSH
20840: CALL_OW 281
20844: IFFALSE 20861
// SetCargo ( i , mat_cans , 0 ) ;
20846: LD_VAR 0 2
20850: PPUSH
20851: LD_INT 1
20853: PPUSH
20854: LD_INT 0
20856: PPUSH
20857: CALL_OW 290
// SetSide ( i , 5 ) ;
20861: LD_VAR 0 2
20865: PPUSH
20866: LD_INT 5
20868: PPUSH
20869: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20873: LD_VAR 0 2
20877: PPUSH
20878: LD_INT 113
20880: PPUSH
20881: LD_INT 17
20883: PPUSH
20884: CALL_OW 111
// end ;
20888: GO 20832
20890: POP
20891: POP
// end ; end ; end_of_file
20892: PPOPN 3
20894: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
20895: LD_INT 0
20897: PPUSH
20898: PPUSH
20899: PPUSH
// u1 := IsInUnit ( unit1 ) ;
20900: LD_ADDR_VAR 0 4
20904: PUSH
20905: LD_VAR 0 1
20909: PPUSH
20910: CALL_OW 310
20914: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
20915: LD_ADDR_VAR 0 5
20919: PUSH
20920: LD_VAR 0 2
20924: PPUSH
20925: CALL_OW 310
20929: ST_TO_ADDR
// result := u1 and u1 = u2 ;
20930: LD_ADDR_VAR 0 3
20934: PUSH
20935: LD_VAR 0 4
20939: IFFALSE 20953
20941: PUSH
20942: LD_VAR 0 4
20946: PUSH
20947: LD_VAR 0 5
20951: EQUAL
20952: AND
20953: ST_TO_ADDR
// end ;
20954: LD_VAR 0 3
20958: RET
// export function ShowPlace ( x , y , time ) ; begin
20959: LD_INT 0
20961: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
20962: LD_INT 4
20964: PPUSH
20965: LD_VAR 0 1
20969: PPUSH
20970: LD_VAR 0 2
20974: PPUSH
20975: LD_VAR 0 3
20979: PPUSH
20980: LD_INT 0
20982: PPUSH
20983: LD_INT 0
20985: PPUSH
20986: LD_INT 0
20988: PPUSH
20989: CALL_OW 595
// end ;
20993: LD_VAR 0 4
20997: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20998: LD_INT 0
21000: PPUSH
21001: PPUSH
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
// if not IsOk ( building ) then
21006: LD_VAR 0 1
21010: PPUSH
21011: CALL_OW 302
21015: NOT
21016: IFFALSE 21020
// exit ;
21018: GO 21267
// x := GetX ( building ) ;
21020: LD_ADDR_VAR 0 4
21024: PUSH
21025: LD_VAR 0 1
21029: PPUSH
21030: CALL_OW 250
21034: ST_TO_ADDR
// y := GetY ( building ) ;
21035: LD_ADDR_VAR 0 5
21039: PUSH
21040: LD_VAR 0 1
21044: PPUSH
21045: CALL_OW 251
21049: ST_TO_ADDR
// d := GetDir ( building ) ;
21050: LD_ADDR_VAR 0 6
21054: PUSH
21055: LD_VAR 0 1
21059: PPUSH
21060: CALL_OW 254
21064: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
21065: LD_ADDR_VAR 0 7
21069: PUSH
21070: LD_VAR 0 4
21074: PPUSH
21075: LD_VAR 0 6
21079: PPUSH
21080: LD_INT 3
21082: PPUSH
21083: CALL_OW 272
21087: PUSH
21088: LD_VAR 0 5
21092: PPUSH
21093: LD_VAR 0 6
21097: PPUSH
21098: LD_INT 3
21100: PPUSH
21101: CALL_OW 273
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
21110: LD_VAR 0 7
21114: PUSH
21115: LD_INT 1
21117: ARRAY
21118: PPUSH
21119: LD_VAR 0 7
21123: PUSH
21124: LD_INT 2
21126: ARRAY
21127: PPUSH
21128: CALL_OW 488
21132: NOT
21133: IFFALSE 21137
// exit ;
21135: GO 21267
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
21137: LD_ADDR_VAR 0 2
21141: PUSH
21142: LD_INT 92
21144: PUSH
21145: LD_VAR 0 4
21149: PUSH
21150: LD_VAR 0 5
21154: PUSH
21155: LD_INT 4
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 3
21166: PUSH
21167: LD_INT 54
21169: PUSH
21170: EMPTY
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PPUSH
21181: CALL_OW 69
21185: ST_TO_ADDR
// if not result then
21186: LD_VAR 0 2
21190: NOT
21191: IFFALSE 21195
// exit ;
21193: GO 21267
// for i in result do
21195: LD_ADDR_VAR 0 3
21199: PUSH
21200: LD_VAR 0 2
21204: PUSH
21205: FOR_IN
21206: IFFALSE 21265
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
21208: LD_VAR 0 3
21212: PPUSH
21213: LD_VAR 0 3
21217: PPUSH
21218: CALL_OW 250
21222: PPUSH
21223: LD_VAR 0 6
21227: PPUSH
21228: LD_INT 3
21230: PPUSH
21231: CALL_OW 272
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: CALL_OW 251
21245: PPUSH
21246: LD_VAR 0 6
21250: PPUSH
21251: LD_INT 3
21253: PPUSH
21254: CALL_OW 273
21258: PPUSH
21259: CALL_OW 111
21263: GO 21205
21265: POP
21266: POP
// end ;
21267: LD_VAR 0 2
21271: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
21272: LD_INT 0
21274: PPUSH
21275: PPUSH
21276: PPUSH
21277: PPUSH
21278: PPUSH
21279: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
21280: LD_VAR 0 1
21284: PPUSH
21285: CALL_OW 302
21289: NOT
21290: IFTRUE 21304
21292: PUSH
21293: LD_VAR 0 2
21297: PPUSH
21298: CALL_OW 302
21302: NOT
21303: OR
21304: IFTRUE 21321
21306: PUSH
21307: LD_VAR 0 2
21311: PPUSH
21312: CALL_OW 313
21316: PUSH
21317: LD_INT 6
21319: EQUAL
21320: OR
21321: IFFALSE 21325
// exit ;
21323: GO 21542
// btype := GetBType ( building ) ;
21325: LD_ADDR_VAR 0 8
21329: PUSH
21330: LD_VAR 0 2
21334: PPUSH
21335: CALL_OW 266
21339: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
21340: LD_VAR 0 8
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: LD_INT 1
21350: PUSH
21351: LD_INT 2
21353: PUSH
21354: LD_INT 4
21356: PUSH
21357: LD_INT 5
21359: PUSH
21360: LD_INT 3
21362: PUSH
21363: LD_INT 6
21365: PUSH
21366: LD_INT 7
21368: PUSH
21369: LD_INT 8
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: IN
21383: NOT
21384: IFFALSE 21388
// exit ;
21386: GO 21542
// x := GetX ( building ) ;
21388: LD_ADDR_VAR 0 4
21392: PUSH
21393: LD_VAR 0 2
21397: PPUSH
21398: CALL_OW 250
21402: ST_TO_ADDR
// y := GetY ( building ) ;
21403: LD_ADDR_VAR 0 5
21407: PUSH
21408: LD_VAR 0 2
21412: PPUSH
21413: CALL_OW 251
21417: ST_TO_ADDR
// d := GetDir ( building ) ;
21418: LD_ADDR_VAR 0 6
21422: PUSH
21423: LD_VAR 0 2
21427: PPUSH
21428: CALL_OW 254
21432: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
21433: LD_ADDR_VAR 0 7
21437: PUSH
21438: LD_VAR 0 4
21442: PPUSH
21443: LD_VAR 0 6
21447: PPUSH
21448: LD_INT 3
21450: PPUSH
21451: CALL_OW 272
21455: PUSH
21456: LD_VAR 0 5
21460: PPUSH
21461: LD_VAR 0 6
21465: PPUSH
21466: LD_INT 3
21468: PPUSH
21469: CALL_OW 273
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
21478: LD_VAR 0 7
21482: PUSH
21483: LD_INT 1
21485: ARRAY
21486: PPUSH
21487: LD_VAR 0 7
21491: PUSH
21492: LD_INT 2
21494: ARRAY
21495: PPUSH
21496: CALL_OW 488
21500: NOT
21501: IFFALSE 21505
// exit ;
21503: GO 21542
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
21505: LD_ADDR_VAR 0 3
21509: PUSH
21510: LD_VAR 0 1
21514: PPUSH
21515: LD_VAR 0 7
21519: PUSH
21520: LD_INT 1
21522: ARRAY
21523: PPUSH
21524: LD_VAR 0 7
21528: PUSH
21529: LD_INT 2
21531: ARRAY
21532: PPUSH
21533: CALL_OW 297
21537: PUSH
21538: LD_INT 4
21540: LESS
21541: ST_TO_ADDR
// end ;
21542: LD_VAR 0 3
21546: RET
// export function PlaceExplosives ( building ) ; begin
21547: LD_INT 0
21549: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
21550: LD_ADDR_EXP 29
21554: PUSH
21555: LD_EXP 29
21559: PPUSH
21560: LD_VAR 0 1
21564: PPUSH
21565: CALL 68757 0 2
21569: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
21570: LD_VAR 0 1
21574: PPUSH
21575: CALL_OW 250
21579: PPUSH
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL_OW 251
21589: PPUSH
21590: LD_STRING PlantBomb
21592: PPUSH
21593: CALL_OW 366
// end ;
21597: LD_VAR 0 2
21601: RET
// export function CreateNature ; var i ; begin
21602: LD_INT 0
21604: PPUSH
21605: PPUSH
// PrepareFrog ;
21606: CALL 65160 0 0
// for i := 1 to 3 do
21610: LD_ADDR_VAR 0 2
21614: PUSH
21615: DOUBLE
21616: LD_INT 1
21618: DEC
21619: ST_TO_ADDR
21620: LD_INT 3
21622: PUSH
21623: FOR_TO
21624: IFFALSE 21643
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
21626: CALL_OW 44
21630: PPUSH
21631: LD_INT 24
21633: PPUSH
21634: LD_INT 0
21636: PPUSH
21637: CALL_OW 49
21641: GO 21623
21643: POP
21644: POP
// end ;
21645: LD_VAR 0 1
21649: RET
// export function MarkBuilding ( building , marker ) ; begin
21650: LD_INT 0
21652: PPUSH
// if marker then
21653: LD_VAR 0 2
21657: IFFALSE 21704
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
21659: LD_VAR 0 1
21663: PPUSH
21664: CALL_OW 250
21668: PPUSH
21669: LD_VAR 0 1
21673: PPUSH
21674: CALL_OW 251
21678: PPUSH
21679: LD_INT 2
21681: PPUSH
21682: LD_INT 3
21684: NEG
21685: PPUSH
21686: CALL_OW 330
// SetBName ( building , target ) ;
21690: LD_VAR 0 1
21694: PPUSH
21695: LD_STRING target
21697: PPUSH
21698: CALL_OW 500
// end else
21702: GO 21743
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
21704: LD_VAR 0 1
21708: PPUSH
21709: CALL_OW 250
21713: PPUSH
21714: LD_VAR 0 1
21718: PPUSH
21719: CALL_OW 251
21723: PPUSH
21724: LD_INT 2
21726: PPUSH
21727: CALL_OW 331
// SetBName ( building ,  ) ;
21731: LD_VAR 0 1
21735: PPUSH
21736: LD_STRING 
21738: PPUSH
21739: CALL_OW 500
// end ; end ; end_of_file
21743: LD_VAR 0 3
21747: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
21748: LD_INT 0
21750: PPUSH
// lockerCodeValid := false ;
21751: LD_ADDR_EXP 72
21755: PUSH
21756: LD_INT 0
21758: ST_TO_ADDR
// if not step then
21759: LD_LOC 1
21763: NOT
21764: IFFALSE 21774
// step := 1 ;
21766: LD_ADDR_LOC 1
21770: PUSH
21771: LD_INT 1
21773: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
21774: LD_STRING HEscape
21776: PUSH
21777: LD_LOC 1
21781: STR
21782: PPUSH
21783: CALL_OW 97
21787: PUSH
21788: LD_INT 1
21790: DOUBLE
21791: EQUAL
21792: IFTRUE 21796
21794: GO 21803
21796: POP
// LockerMinigameSearch ; 2 :
21797: CALL 21836 0 0
21801: GO 21819
21803: LD_INT 2
21805: DOUBLE
21806: EQUAL
21807: IFTRUE 21811
21809: GO 21818
21811: POP
// LockerMinigameSetCode ; end ;
21812: CALL 21910 0 0
21816: GO 21819
21818: POP
// if lockerCodeValid then
21819: LD_EXP 72
21823: IFFALSE 21827
// exit ;
21825: GO 21831
// StartLockerMinigame ;
21827: CALL 21748 0 0
// end ;
21831: LD_VAR 0 1
21835: RET
// function LockerMinigameSearch ; begin
21836: LD_INT 0
21838: PPUSH
// if code then
21839: LD_LOC 2
21843: IFFALSE 21859
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
21845: LD_EXP 46
21849: PPUSH
21850: LD_STRING DH-Escape-3-Hint-0
21852: PPUSH
21853: CALL_OW 88
// exit ;
21857: GO 21905
// end ; Randomize ;
21859: CALL_OW 10
// code := rand ( 1 , 5 ) ;
21863: LD_ADDR_LOC 2
21867: PUSH
21868: LD_INT 1
21870: PPUSH
21871: LD_INT 5
21873: PPUSH
21874: CALL_OW 12
21878: ST_TO_ADDR
// step := 2 ;
21879: LD_ADDR_LOC 1
21883: PUSH
21884: LD_INT 2
21886: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
21887: LD_EXP 46
21891: PPUSH
21892: LD_STRING DH-Escape-3-Hint-
21894: PUSH
21895: LD_LOC 2
21899: STR
21900: PPUSH
21901: CALL_OW 88
// end ;
21905: LD_VAR 0 1
21909: RET
// function LockerMinigameSetCode ; begin
21910: LD_INT 0
21912: PPUSH
// if not code then
21913: LD_LOC 2
21917: NOT
21918: IFFALSE 21928
// code := 0 ;
21920: LD_ADDR_LOC 2
21924: PUSH
21925: LD_INT 0
21927: ST_TO_ADDR
// lockerBusy := true ;
21928: LD_ADDR_EXP 73
21932: PUSH
21933: LD_INT 1
21935: ST_TO_ADDR
// InGameOff ;
21936: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
21940: LD_STRING initLockerMinigame("
21942: PUSH
21943: LD_LOC 2
21947: STR
21948: PUSH
21949: LD_STRING ")
21951: STR
21952: PPUSH
21953: CALL_OW 559
// step := 3 ;
21957: LD_ADDR_LOC 1
21961: PUSH
21962: LD_INT 3
21964: ST_TO_ADDR
// repeat wait ( 1 ) ;
21965: LD_INT 1
21967: PPUSH
21968: CALL_OW 67
// until not lockerBusy ;
21972: LD_EXP 73
21976: NOT
21977: IFFALSE 21965
// InGameOn ;
21979: CALL_OW 8
// if not lockerCodeValid then
21983: LD_EXP 72
21987: NOT
21988: IFFALSE 22014
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21990: LD_EXP 46
21994: PPUSH
21995: LD_STRING DH-Escape-3-Fail-
21997: PUSH
21998: LD_INT 1
22000: PPUSH
22001: LD_INT 2
22003: PPUSH
22004: CALL_OW 12
22008: STR
22009: PPUSH
22010: CALL_OW 88
// end ; end_of_file
22014: LD_VAR 0 1
22018: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
22019: LD_VAR 0 2
22023: PUSH
22024: LD_INT 102
22026: EQUAL
22027: IFFALSE 22049
// begin lockerBusy := false ;
22029: LD_ADDR_EXP 73
22033: PUSH
22034: LD_INT 0
22036: ST_TO_ADDR
// lockerCodeValid := p3 ;
22037: LD_ADDR_EXP 72
22041: PUSH
22042: LD_VAR 0 3
22046: ST_TO_ADDR
// end else
22047: GO 22103
// if p2 = 103 then
22049: LD_VAR 0 2
22053: PUSH
22054: LD_INT 103
22056: EQUAL
22057: IFFALSE 22069
// begin weatherBusy := false ;
22059: LD_ADDR_EXP 37
22063: PUSH
22064: LD_INT 0
22066: ST_TO_ADDR
// end else
22067: GO 22103
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
22069: LD_VAR 0 1
22073: PPUSH
22074: LD_VAR 0 2
22078: PPUSH
22079: LD_VAR 0 3
22083: PPUSH
22084: LD_VAR 0 4
22088: PPUSH
22089: LD_VAR 0 5
22093: PPUSH
22094: LD_VAR 0 6
22098: PPUSH
22099: CALL 74290 0 6
// end ;
22103: PPOPN 6
22105: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
22106: LD_STRING killGameMusic();
22108: PPUSH
22109: CALL_OW 559
// PlayOriginalMusic ;
22113: CALL 96849 0 0
// SOS_MapStart ( ) ;
22117: CALL 74170 0 0
// end ; end_of_file
22121: PPOPN 1
22123: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
22124: LD_EXP 17
22128: NOT
22129: IFFALSE 22137
22131: PUSH
22132: LD_EXP 71
22136: AND
22137: IFFALSE 22723
22139: GO 22141
22141: DISABLE
22142: LD_INT 0
22144: PPUSH
22145: PPUSH
22146: PPUSH
22147: PPUSH
22148: PPUSH
// begin enable ;
22149: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
22150: LD_ADDR_VAR 0 3
22154: PUSH
22155: LD_INT 26
22157: PUSH
22158: LD_INT 27
22160: PUSH
22161: LD_INT 28
22163: PUSH
22164: LD_INT 29
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 30
22175: PUSH
22176: LD_INT 31
22178: PUSH
22179: LD_INT 32
22181: PUSH
22182: LD_INT 33
22184: PUSH
22185: LD_INT 34
22187: PUSH
22188: LD_INT 35
22190: PUSH
22191: LD_INT 36
22193: PUSH
22194: LD_INT 37
22196: PUSH
22197: LD_INT 38
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 39
22213: PUSH
22214: LD_INT 40
22216: PUSH
22217: LD_INT 41
22219: PUSH
22220: LD_INT 42
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 43
22231: PUSH
22232: LD_INT 44
22234: PUSH
22235: LD_INT 45
22237: PUSH
22238: LD_INT 46
22240: PUSH
22241: LD_INT 47
22243: PUSH
22244: LD_INT 46
22246: PUSH
22247: LD_INT 45
22249: PUSH
22250: LD_INT 44
22252: PUSH
22253: LD_INT 43
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: ST_TO_ADDR
// for i in ruPatrol do
22273: LD_ADDR_VAR 0 1
22277: PUSH
22278: LD_EXP 71
22282: PUSH
22283: FOR_IN
22284: IFFALSE 22721
// begin if not IsOk ( i ) then
22286: LD_VAR 0 1
22290: PPUSH
22291: CALL_OW 302
22295: NOT
22296: IFFALSE 22300
// continue ;
22298: GO 22283
// if Count ( ruKilledHex ) then
22300: LD_EXP 43
22304: PPUSH
22305: CALL 32781 0 1
22309: IFFALSE 22382
// for j in ruKilledHex do
22311: LD_ADDR_VAR 0 2
22315: PUSH
22316: LD_EXP 43
22320: PUSH
22321: FOR_IN
22322: IFFALSE 22380
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
22324: LD_VAR 0 1
22328: PPUSH
22329: LD_VAR 0 2
22333: PUSH
22334: LD_INT 1
22336: ARRAY
22337: PPUSH
22338: LD_VAR 0 2
22342: PUSH
22343: LD_INT 2
22345: ARRAY
22346: PPUSH
22347: CALL_OW 297
22351: PUSH
22352: LD_INT 6
22354: LESS
22355: IFFALSE 22378
// begin Query ( QBody ) ;
22357: LD_STRING QBody
22359: PPUSH
22360: CALL_OW 97
// isAlarm := true ;
22364: LD_ADDR_EXP 17
22368: PUSH
22369: LD_INT 1
22371: ST_TO_ADDR
// exit ;
22372: POP
22373: POP
22374: POP
22375: POP
22376: GO 22723
// end ;
22378: GO 22321
22380: POP
22381: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
22382: LD_ADDR_VAR 0 5
22386: PUSH
22387: LD_INT 22
22389: PUSH
22390: LD_INT 2
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 21
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 91
22409: PUSH
22410: LD_VAR 0 1
22414: PUSH
22415: LD_INT 7
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: PPUSH
22428: CALL_OW 69
22432: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
22433: LD_INT 2
22435: PPUSH
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 292
22445: IFFALSE 22453
22447: PUSH
22448: LD_VAR 0 5
22452: AND
22453: IFFALSE 22607
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
22455: LD_EXP 30
22459: IFFALSE 22481
22461: PUSH
22462: LD_VAR 0 1
22466: PPUSH
22467: LD_EXP 66
22471: PPUSH
22472: CALL_OW 296
22476: PUSH
22477: LD_INT 16
22479: LESS
22480: AND
22481: IFTRUE 22489
22483: PUSH
22484: LD_EXP 38
22488: OR
22489: IFFALSE 22493
// continue ;
22491: GO 22283
// for j in tmp do
22493: LD_ADDR_VAR 0 2
22497: PUSH
22498: LD_VAR 0 5
22502: PUSH
22503: FOR_IN
22504: IFFALSE 22565
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
22506: LD_ADDR_VAR 0 5
22510: PUSH
22511: LD_VAR 0 5
22515: PUSH
22516: LD_INT 22
22518: PUSH
22519: LD_INT 2
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 21
22528: PUSH
22529: LD_INT 1
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 91
22538: PUSH
22539: LD_VAR 0 2
22543: PUSH
22544: LD_INT 4
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: LIST
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: LIST
22556: PPUSH
22557: CALL_OW 69
22561: UNION
22562: ST_TO_ADDR
22563: GO 22503
22565: POP
22566: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
22567: LD_VAR 0 1
22571: PPUSH
22572: LD_VAR 0 5
22576: PPUSH
22577: LD_VAR 0 1
22581: PPUSH
22582: CALL_OW 74
22586: PPUSH
22587: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
22591: LD_VAR 0 1
22595: PPUSH
22596: LD_VAR 0 5
22600: PPUSH
22601: CALL 22726 0 2
// continue ;
22605: GO 22283
// end ; if HasTask ( i ) then
22607: LD_VAR 0 1
22611: PPUSH
22612: CALL_OW 314
22616: IFFALSE 22620
// continue ;
22618: GO 22283
// tag := GetTag ( i ) ;
22620: LD_ADDR_VAR 0 4
22624: PUSH
22625: LD_VAR 0 1
22629: PPUSH
22630: CALL_OW 110
22634: ST_TO_ADDR
// if not tag then
22635: LD_VAR 0 4
22639: NOT
22640: IFFALSE 22653
// begin ComHold ( i ) ;
22642: LD_VAR 0 1
22646: PPUSH
22647: CALL_OW 140
// continue ;
22651: GO 22283
// end ; for j := 1 to points [ tag ] do
22653: LD_ADDR_VAR 0 2
22657: PUSH
22658: DOUBLE
22659: LD_INT 1
22661: DEC
22662: ST_TO_ADDR
22663: LD_VAR 0 3
22667: PUSH
22668: LD_VAR 0 4
22672: ARRAY
22673: PUSH
22674: FOR_TO
22675: IFFALSE 22717
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
22677: LD_VAR 0 1
22681: PPUSH
22682: LD_VAR 0 3
22686: PUSH
22687: LD_VAR 0 4
22691: ARRAY
22692: PUSH
22693: LD_VAR 0 2
22697: ARRAY
22698: PPUSH
22699: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
22703: LD_VAR 0 1
22707: PPUSH
22708: LD_INT 70
22710: PPUSH
22711: CALL_OW 202
// end ;
22715: GO 22674
22717: POP
22718: POP
// end ;
22719: GO 22283
22721: POP
22722: POP
// end ;
22723: PPOPN 5
22725: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
22726: LD_INT 0
22728: PPUSH
22729: PPUSH
22730: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
22731: LD_VAR 0 2
22735: PPUSH
22736: LD_INT 23
22738: PUSH
22739: LD_INT 2
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 2
22748: PUSH
22749: LD_INT 25
22751: PUSH
22752: LD_INT 1
22754: PUSH
22755: EMPTY
22756: LIST
22757: LIST
22758: PUSH
22759: LD_INT 25
22761: PUSH
22762: LD_INT 11
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 25
22771: PUSH
22772: LD_INT 34
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 25
22781: PUSH
22782: LD_INT 32
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PPUSH
22800: CALL_OW 72
22804: IFFALSE 22917
// begin blockPatrolThread := true ;
22806: LD_ADDR_EXP 38
22810: PUSH
22811: LD_INT 1
22813: ST_TO_ADDR
// DialogueOn ;
22814: CALL_OW 6
// case GetSex ( guard ) of sex_male :
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 258
22827: PUSH
22828: LD_INT 1
22830: DOUBLE
22831: EQUAL
22832: IFTRUE 22836
22834: GO 22851
22836: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22837: LD_VAR 0 1
22841: PPUSH
22842: LD_STRING DRum-Fail-3
22844: PPUSH
22845: CALL_OW 88
22849: GO 22875
22851: LD_INT 2
22853: DOUBLE
22854: EQUAL
22855: IFTRUE 22859
22857: GO 22874
22859: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
22860: LD_VAR 0 1
22864: PPUSH
22865: LD_STRING DRuf-Fail-3
22867: PPUSH
22868: CALL_OW 88
22872: GO 22875
22874: POP
// DialogueOff ;
22875: CALL_OW 7
// wait ( 0 0$5 ) ;
22879: LD_INT 175
22881: PPUSH
22882: CALL_OW 67
// if IsOk ( guard ) then
22886: LD_VAR 0 1
22890: PPUSH
22891: CALL_OW 302
22895: IFFALSE 22907
// isAlarm := true else
22897: LD_ADDR_EXP 17
22901: PUSH
22902: LD_INT 1
22904: ST_TO_ADDR
22905: GO 22915
// blockPatrolThread := false ;
22907: LD_ADDR_EXP 38
22911: PUSH
22912: LD_INT 0
22914: ST_TO_ADDR
// exit ;
22915: GO 23920
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
22917: LD_VAR 0 2
22921: PPUSH
22922: LD_INT 23
22924: PUSH
22925: LD_INT 3
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PPUSH
22932: CALL_OW 72
22936: IFTRUE 22959
22938: PUSH
22939: LD_VAR 0 2
22943: PPUSH
22944: LD_INT 95
22946: PUSH
22947: LD_INT 61
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PPUSH
22954: CALL_OW 72
22958: OR
22959: IFFALSE 22963
// exit ;
22961: GO 23920
// DialogueOn ;
22963: CALL_OW 6
// blockPatrolThread := true ;
22967: LD_ADDR_EXP 38
22971: PUSH
22972: LD_INT 1
22974: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
22975: LD_VAR 0 1
22979: PPUSH
22980: CALL_OW 87
// if not Heike in units then
22984: LD_EXP 46
22988: PUSH
22989: LD_VAR 0 2
22993: IN
22994: NOT
22995: IFFALSE 23361
// begin case GetSex ( guard ) of sex_male :
22997: LD_VAR 0 1
23001: PPUSH
23002: CALL_OW 258
23006: PUSH
23007: LD_INT 1
23009: DOUBLE
23010: EQUAL
23011: IFTRUE 23015
23013: GO 23030
23015: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
23016: LD_VAR 0 1
23020: PPUSH
23021: LD_STRING DRum-Guard-1
23023: PPUSH
23024: CALL_OW 88
23028: GO 23054
23030: LD_INT 2
23032: DOUBLE
23033: EQUAL
23034: IFTRUE 23038
23036: GO 23053
23038: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
23039: LD_VAR 0 1
23043: PPUSH
23044: LD_STRING DRuf-Guard-1
23046: PPUSH
23047: CALL_OW 88
23051: GO 23054
23053: POP
// case Query ( SurrenderInfoPeople ) of 1 :
23054: LD_STRING SurrenderInfoPeople
23056: PPUSH
23057: CALL_OW 97
23061: PUSH
23062: LD_INT 1
23064: DOUBLE
23065: EQUAL
23066: IFTRUE 23070
23068: GO 23179
23070: POP
// begin Query ( CaughtSquadInfo ) ;
23071: LD_STRING CaughtSquadInfo
23073: PPUSH
23074: CALL_OW 97
// for i in units do
23078: LD_ADDR_VAR 0 4
23082: PUSH
23083: LD_VAR 0 2
23087: PUSH
23088: FOR_IN
23089: IFFALSE 23146
// begin if Carry ( i ) then
23091: LD_VAR 0 4
23095: PPUSH
23096: CALL_OW 281
23100: IFFALSE 23117
// SetCargo ( i , mat_cans , 0 ) ;
23102: LD_VAR 0 4
23106: PPUSH
23107: LD_INT 1
23109: PPUSH
23110: LD_INT 0
23112: PPUSH
23113: CALL_OW 290
// SetSide ( i , 5 ) ;
23117: LD_VAR 0 4
23121: PPUSH
23122: LD_INT 5
23124: PPUSH
23125: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
23129: LD_VAR 0 4
23133: PPUSH
23134: LD_INT 113
23136: PPUSH
23137: LD_INT 17
23139: PPUSH
23140: CALL_OW 111
// end ;
23144: GO 23088
23146: POP
23147: POP
// ComMoveXY ( guard , 117 , 25 ) ;
23148: LD_VAR 0 1
23152: PPUSH
23153: LD_INT 117
23155: PPUSH
23156: LD_INT 25
23158: PPUSH
23159: CALL_OW 111
// DialogueOff ;
23163: CALL_OW 7
// blockPatrolThread := false ;
23167: LD_ADDR_EXP 38
23171: PUSH
23172: LD_INT 0
23174: ST_TO_ADDR
// exit ;
23175: GO 23920
// end ; 2 :
23177: GO 23361
23179: LD_INT 2
23181: DOUBLE
23182: EQUAL
23183: IFTRUE 23187
23185: GO 23360
23187: POP
// begin DialogueOff ;
23188: CALL_OW 7
// wait ( 0 0$2 ) ;
23192: LD_INT 70
23194: PPUSH
23195: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23199: LD_INT 6
23201: PPUSH
23202: LD_INT 2
23204: PPUSH
23205: LD_INT 2
23207: PPUSH
23208: LD_INT 1
23210: PPUSH
23211: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
23215: LD_VAR 0 1
23219: PPUSH
23220: LD_VAR 0 2
23224: PUSH
23225: LD_INT 1
23227: ARRAY
23228: PPUSH
23229: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23233: LD_VAR 0 1
23237: PPUSH
23238: CALL_OW 258
23242: PUSH
23243: LD_INT 1
23245: DOUBLE
23246: EQUAL
23247: IFTRUE 23251
23249: GO 23266
23251: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23252: LD_VAR 0 1
23256: PPUSH
23257: LD_STRING DRum-Fail-3
23259: PPUSH
23260: CALL_OW 88
23264: GO 23290
23266: LD_INT 2
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23289
23274: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23275: LD_VAR 0 1
23279: PPUSH
23280: LD_STRING DRum-Fail-3
23282: PPUSH
23283: CALL_OW 88
23287: GO 23290
23289: POP
// wait ( 0 0$5 ) ;
23290: LD_INT 175
23292: PPUSH
23293: CALL_OW 67
// if IsOk ( guard ) then
23297: LD_VAR 0 1
23301: PPUSH
23302: CALL_OW 302
23306: IFFALSE 23318
// isAlarm := true else
23308: LD_ADDR_EXP 17
23312: PUSH
23313: LD_INT 1
23315: ST_TO_ADDR
23316: GO 23350
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23318: LD_INT 6
23320: PPUSH
23321: LD_INT 2
23323: PPUSH
23324: LD_INT 0
23326: PPUSH
23327: LD_INT 1
23329: PPUSH
23330: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23334: LD_INT 3
23336: PPUSH
23337: LD_INT 2
23339: PPUSH
23340: LD_INT 0
23342: PPUSH
23343: LD_INT 1
23345: PPUSH
23346: CALL_OW 80
// end ; blockPatrolThread := false ;
23350: LD_ADDR_EXP 38
23354: PUSH
23355: LD_INT 0
23357: ST_TO_ADDR
// end ; end ;
23358: GO 23361
23360: POP
// end ; if Carry ( Heike ) then
23361: LD_EXP 46
23365: PPUSH
23366: CALL_OW 281
23370: IFFALSE 23446
// begin case GetSex ( guard ) of sex_male :
23372: LD_VAR 0 1
23376: PPUSH
23377: CALL_OW 258
23381: PUSH
23382: LD_INT 1
23384: DOUBLE
23385: EQUAL
23386: IFTRUE 23390
23388: GO 23405
23390: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_STRING DRum-FoodFail-1
23398: PPUSH
23399: CALL_OW 88
23403: GO 23429
23405: LD_INT 2
23407: DOUBLE
23408: EQUAL
23409: IFTRUE 23413
23411: GO 23428
23413: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
23414: LD_VAR 0 1
23418: PPUSH
23419: LD_STRING DRuf-FoodFail-2
23421: PPUSH
23422: CALL_OW 88
23426: GO 23429
23428: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
23429: LD_EXP 46
23433: PPUSH
23434: LD_INT 1
23436: PPUSH
23437: LD_INT 0
23439: PPUSH
23440: CALL_OW 290
// end else
23444: GO 23503
// begin case GetSex ( guard ) of sex_male :
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 258
23455: PUSH
23456: LD_INT 1
23458: DOUBLE
23459: EQUAL
23460: IFTRUE 23464
23462: GO 23479
23464: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
23465: LD_VAR 0 1
23469: PPUSH
23470: LD_STRING DRum-Seen-1
23472: PPUSH
23473: CALL_OW 88
23477: GO 23503
23479: LD_INT 2
23481: DOUBLE
23482: EQUAL
23483: IFTRUE 23487
23485: GO 23502
23487: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
23488: LD_VAR 0 1
23492: PPUSH
23493: LD_STRING DRuf-Seen-1
23495: PPUSH
23496: CALL_OW 88
23500: GO 23503
23502: POP
// end ; alone := ( units = 1 ) ;
23503: LD_ADDR_VAR 0 5
23507: PUSH
23508: LD_VAR 0 2
23512: PUSH
23513: LD_INT 1
23515: EQUAL
23516: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
23517: LD_STRING SurrenderInfo
23519: PPUSH
23520: CALL_OW 97
23524: PUSH
23525: LD_INT 1
23527: DOUBLE
23528: EQUAL
23529: IFTRUE 23533
23531: GO 23722
23533: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
23534: LD_INT 23
23536: PPUSH
23537: CALL_OW 87
// RemoveUnit ( Heike ) ;
23541: LD_EXP 46
23545: PPUSH
23546: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
23550: LD_EXP 46
23554: PPUSH
23555: LD_INT 23
23557: PPUSH
23558: CALL_OW 52
// if not alone then
23562: LD_VAR 0 5
23566: NOT
23567: IFFALSE 23634
// for i in units diff Heike do
23569: LD_ADDR_VAR 0 4
23573: PUSH
23574: LD_VAR 0 2
23578: PUSH
23579: LD_EXP 46
23583: DIFF
23584: PUSH
23585: FOR_IN
23586: IFFALSE 23632
// begin RemoveUnit ( i ) ;
23588: LD_VAR 0 4
23592: PPUSH
23593: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
23597: LD_VAR 0 4
23601: PPUSH
23602: LD_INT 114
23604: PPUSH
23605: LD_INT 17
23607: PPUSH
23608: LD_INT 10
23610: PPUSH
23611: LD_INT 0
23613: PPUSH
23614: CALL_OW 50
// SetSide ( i , 5 ) ;
23618: LD_VAR 0 4
23622: PPUSH
23623: LD_INT 5
23625: PPUSH
23626: CALL_OW 235
// end ;
23630: GO 23585
23632: POP
23633: POP
// wait ( 0 0$0.3 ) ;
23634: LD_INT 10
23636: PPUSH
23637: CALL_OW 67
// if alone then
23641: LD_VAR 0 5
23645: IFFALSE 23656
// Query ( CaughtInfoAlone ) else
23647: LD_STRING CaughtInfoAlone
23649: PPUSH
23650: CALL_OW 97
23654: GO 23663
// Query ( CaughtInfo ) ;
23656: LD_STRING CaughtInfo
23658: PPUSH
23659: CALL_OW 97
// wait ( 0 0$2 ) ;
23663: LD_INT 70
23665: PPUSH
23666: CALL_OW 67
// StartLockerMinigame ;
23670: CALL 21748 0 0
// Say ( Heike , DH-Reset ) ;
23674: LD_EXP 46
23678: PPUSH
23679: LD_STRING DH-Reset
23681: PPUSH
23682: CALL_OW 88
// DialogueOff ;
23686: CALL_OW 7
// InGameOff ;
23690: CALL_OW 9
// blockPatrolThread := false ;
23694: LD_ADDR_EXP 38
23698: PUSH
23699: LD_INT 0
23701: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
23702: LD_EXP 46
23706: PPUSH
23707: CALL_OW 122
// ComFree ( guard ) ;
23711: LD_VAR 0 1
23715: PPUSH
23716: CALL_OW 139
// end ; 2 :
23720: GO 23912
23722: LD_INT 2
23724: DOUBLE
23725: EQUAL
23726: IFTRUE 23730
23728: GO 23911
23730: POP
// begin Say ( Heike , DH-Guard-2 ) ;
23731: LD_EXP 46
23735: PPUSH
23736: LD_STRING DH-Guard-2
23738: PPUSH
23739: CALL_OW 88
// DialogueOff ;
23743: CALL_OW 7
// wait ( 0 0$2 ) ;
23747: LD_INT 70
23749: PPUSH
23750: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23754: LD_INT 6
23756: PPUSH
23757: LD_INT 2
23759: PPUSH
23760: LD_INT 2
23762: PPUSH
23763: LD_INT 1
23765: PPUSH
23766: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
23770: LD_VAR 0 1
23774: PPUSH
23775: LD_EXP 46
23779: PPUSH
23780: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23784: LD_VAR 0 1
23788: PPUSH
23789: CALL_OW 258
23793: PUSH
23794: LD_INT 1
23796: DOUBLE
23797: EQUAL
23798: IFTRUE 23802
23800: GO 23817
23802: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23803: LD_VAR 0 1
23807: PPUSH
23808: LD_STRING DRum-Fail-3
23810: PPUSH
23811: CALL_OW 88
23815: GO 23841
23817: LD_INT 2
23819: DOUBLE
23820: EQUAL
23821: IFTRUE 23825
23823: GO 23840
23825: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23826: LD_VAR 0 1
23830: PPUSH
23831: LD_STRING DRum-Fail-3
23833: PPUSH
23834: CALL_OW 88
23838: GO 23841
23840: POP
// wait ( 0 0$5 ) ;
23841: LD_INT 175
23843: PPUSH
23844: CALL_OW 67
// if IsOk ( guard ) then
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 302
23857: IFFALSE 23869
// isAlarm := true else
23859: LD_ADDR_EXP 17
23863: PUSH
23864: LD_INT 1
23866: ST_TO_ADDR
23867: GO 23901
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23869: LD_INT 6
23871: PPUSH
23872: LD_INT 2
23874: PPUSH
23875: LD_INT 0
23877: PPUSH
23878: LD_INT 1
23880: PPUSH
23881: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23885: LD_INT 3
23887: PPUSH
23888: LD_INT 2
23890: PPUSH
23891: LD_INT 0
23893: PPUSH
23894: LD_INT 1
23896: PPUSH
23897: CALL_OW 80
// end ; blockPatrolThread := false ;
23901: LD_ADDR_EXP 38
23905: PUSH
23906: LD_INT 0
23908: ST_TO_ADDR
// end ; end ;
23909: GO 23912
23911: POP
// blockPatrolThread := false ;
23912: LD_ADDR_EXP 38
23916: PUSH
23917: LD_INT 0
23919: ST_TO_ADDR
// end ;
23920: LD_VAR 0 3
23924: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
23925: LD_EXP 14
23929: PPUSH
23930: LD_INT 22
23932: PUSH
23933: LD_INT 5
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 3
23942: PUSH
23943: LD_INT 101
23945: PUSH
23946: LD_INT 6
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 92
23959: PUSH
23960: LD_INT 113
23962: PUSH
23963: LD_INT 16
23965: PUSH
23966: LD_INT 12
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 91
23977: PUSH
23978: LD_EXP 46
23982: PUSH
23983: LD_INT 6
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL_OW 72
24001: IFFALSE 24010
24003: PUSH
24004: LD_EXP 30
24008: NOT
24009: AND
24010: IFFALSE 24115
24012: GO 24014
24014: DISABLE
24015: LD_INT 0
24017: PPUSH
// begin enable ;
24018: ENABLE
// DialogueOn ;
24019: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
24023: LD_EXP 46
24027: PPUSH
24028: LD_STRING DH-Join-
24030: PUSH
24031: LD_INT 1
24033: PPUSH
24034: LD_INT 3
24036: PPUSH
24037: CALL_OW 12
24041: STR
24042: PPUSH
24043: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
24047: LD_ADDR_VAR 0 1
24051: PUSH
24052: LD_EXP 14
24056: PPUSH
24057: LD_INT 22
24059: PUSH
24060: LD_INT 5
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 91
24069: PUSH
24070: LD_EXP 46
24074: PUSH
24075: LD_INT 10
24077: PUSH
24078: EMPTY
24079: LIST
24080: LIST
24081: LIST
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PPUSH
24087: CALL_OW 72
24091: PUSH
24092: FOR_IN
24093: IFFALSE 24109
// SetSide ( i , 2 ) ;
24095: LD_VAR 0 1
24099: PPUSH
24100: LD_INT 2
24102: PPUSH
24103: CALL_OW 235
24107: GO 24092
24109: POP
24110: POP
// DialogueOff ;
24111: CALL_OW 7
// end ; end_of_file
24115: PPOPN 1
24117: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
24118: LD_EXP 17
24122: IFFALSE 24130
24124: PUSH
24125: LD_EXP 5
24129: AND
24130: IFFALSE 24431
24132: GO 24134
24134: DISABLE
24135: LD_INT 0
24137: PPUSH
24138: PPUSH
24139: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
24140: LD_INT 1
24142: NEG
24143: PPUSH
24144: LD_INT 1
24146: NEG
24147: PPUSH
24148: LD_STRING alarm
24150: PPUSH
24151: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
24155: LD_INT 3
24157: PPUSH
24158: LD_INT 2
24160: PPUSH
24161: LD_INT 2
24163: PPUSH
24164: LD_INT 1
24166: PPUSH
24167: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
24171: LD_INT 6
24173: PPUSH
24174: LD_INT 2
24176: PPUSH
24177: LD_INT 2
24179: PPUSH
24180: LD_INT 1
24182: PPUSH
24183: CALL_OW 80
// DialogueOn ;
24187: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
24191: LD_EXP 46
24195: PPUSH
24196: LD_STRING DH-Alarm-1
24198: PPUSH
24199: CALL_OW 88
// DialogueOff ;
24203: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
24207: LD_ADDR_VAR 0 2
24211: PUSH
24212: LD_INT 107
24214: PUSH
24215: LD_INT 39
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 143
24224: PUSH
24225: LD_INT 33
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 180
24234: PUSH
24235: LD_INT 115
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 96
24244: PUSH
24245: LD_INT 90
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 59
24254: PUSH
24255: LD_INT 52
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 16
24264: PUSH
24265: LD_INT 15
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 90
24274: PUSH
24275: LD_INT 120
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
24291: LD_ADDR_VAR 0 3
24295: PUSH
24296: LD_INT 22
24298: PUSH
24299: LD_INT 6
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 25
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PPUSH
24320: CALL_OW 69
24324: ST_TO_ADDR
// for i in tmp do
24325: LD_ADDR_VAR 0 1
24329: PUSH
24330: LD_VAR 0 3
24334: PUSH
24335: FOR_IN
24336: IFFALSE 24404
// begin ComExit ( i ) ;
24338: LD_VAR 0 1
24342: PPUSH
24343: CALL 69155 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
24347: LD_VAR 0 1
24351: PPUSH
24352: LD_VAR 0 2
24356: PUSH
24357: LD_VAR 0 1
24361: PUSH
24362: LD_INT 7
24364: MOD
24365: PUSH
24366: LD_INT 1
24368: PLUS
24369: ARRAY
24370: PUSH
24371: LD_INT 1
24373: ARRAY
24374: PPUSH
24375: LD_VAR 0 2
24379: PUSH
24380: LD_VAR 0 1
24384: PUSH
24385: LD_INT 7
24387: MOD
24388: PUSH
24389: LD_INT 1
24391: PLUS
24392: ARRAY
24393: PUSH
24394: LD_INT 2
24396: ARRAY
24397: PPUSH
24398: CALL_OW 174
// end ;
24402: GO 24335
24404: POP
24405: POP
// Explode ;
24406: CALL 24434 0 0
// wait ( 0 0$45 ) ;
24410: LD_INT 1575
24412: PPUSH
24413: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
24417: LD_VAR 0 3
24421: PPUSH
24422: LD_EXP 46
24426: PPUSH
24427: CALL_OW 175
// end ;
24431: PPOPN 3
24433: END
// export function Explode ; var i , x , y , j ; begin
24434: LD_INT 0
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
// if hasExplosionsInFactory then
24441: LD_EXP 7
24445: IFFALSE 24465
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
24447: LD_ADDR_EXP 29
24451: PUSH
24452: LD_EXP 29
24456: PPUSH
24457: LD_INT 61
24459: PPUSH
24460: CALL 68757 0 2
24464: ST_TO_ADDR
// if explosivePlantedList then
24465: LD_EXP 29
24469: IFFALSE 24617
// begin for i in explosivePlantedList do
24471: LD_ADDR_VAR 0 2
24475: PUSH
24476: LD_EXP 29
24480: PUSH
24481: FOR_IN
24482: IFFALSE 24585
// begin x := GetX ( i ) ;
24484: LD_ADDR_VAR 0 3
24488: PUSH
24489: LD_VAR 0 2
24493: PPUSH
24494: CALL_OW 250
24498: ST_TO_ADDR
// y := GetY ( i ) ;
24499: LD_ADDR_VAR 0 4
24503: PUSH
24504: LD_VAR 0 2
24508: PPUSH
24509: CALL_OW 251
24513: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
24514: LD_ADDR_VAR 0 5
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 3
24524: PUSH
24525: LD_INT 5
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: FOR_IN
24534: IFFALSE 24581
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
24536: LD_VAR 0 3
24540: PPUSH
24541: LD_VAR 0 5
24545: PPUSH
24546: LD_INT 2
24548: PPUSH
24549: CALL_OW 272
24553: PPUSH
24554: LD_VAR 0 4
24558: PPUSH
24559: LD_VAR 0 5
24563: PPUSH
24564: LD_INT 2
24566: PPUSH
24567: CALL_OW 273
24571: PPUSH
24572: LD_INT 1
24574: PPUSH
24575: CALL_OW 453
24579: GO 24533
24581: POP
24582: POP
// end ;
24583: GO 24481
24585: POP
24586: POP
// Say ( Heike , DH-End-2 ) ;
24587: LD_EXP 46
24591: PPUSH
24592: LD_STRING DH-End-2
24594: PPUSH
24595: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
24599: LD_INT 175
24601: PUSH
24602: LD_EXP 29
24606: PPUSH
24607: CALL 32781 0 1
24611: MUL
24612: PPUSH
24613: CALL_OW 67
// end ; if not isAlarm then
24617: LD_EXP 17
24621: NOT
24622: IFFALSE 24632
// isAlarm := true ;
24624: LD_ADDR_EXP 17
24628: PUSH
24629: LD_INT 1
24631: ST_TO_ADDR
// end ;
24632: LD_VAR 0 1
24636: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
24637: LD_INT 22
24639: PUSH
24640: LD_INT 2
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 21
24649: PUSH
24650: LD_INT 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: LD_INT 101
24662: PUSH
24663: LD_INT 3
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 101
24672: PUSH
24673: LD_INT 6
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: PPUSH
24690: CALL_OW 69
24694: IFFALSE 24707
24696: GO 24698
24698: DISABLE
// isAlarm := true ; end_of_file
24699: LD_ADDR_EXP 17
24703: PUSH
24704: LD_INT 1
24706: ST_TO_ADDR
24707: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
24708: LD_EXP 14
24712: PPUSH
24713: LD_INT 22
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 72
24727: PUSH
24728: LD_INT 3
24730: GREATER
24731: IFFALSE 24740
24733: PUSH
24734: LD_EXP 17
24738: NOT
24739: AND
24740: IFFALSE 28904
24742: GO 24744
24744: DISABLE
24745: LD_INT 0
24747: PPUSH
24748: PPUSH
24749: PPUSH
24750: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
24751: LD_EXP 66
24755: PPUSH
24756: LD_INT 155
24758: PPUSH
24759: LD_INT 68
24761: PPUSH
24762: LD_INT 0
24764: PPUSH
24765: CALL_OW 48
// wait ( 0 0$1 ) ;
24769: LD_INT 35
24771: PPUSH
24772: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24776: LD_INT 35
24778: PPUSH
24779: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24783: LD_EXP 66
24787: PPUSH
24788: CALL_OW 314
24792: NOT
24793: IFFALSE 24809
// ComMoveUnit ( ruDisturb , Heike ) ;
24795: LD_EXP 66
24799: PPUSH
24800: LD_EXP 46
24804: PPUSH
24805: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24809: LD_EXP 46
24813: PPUSH
24814: LD_EXP 66
24818: PPUSH
24819: CALL_OW 296
24823: PUSH
24824: LD_INT 6
24826: LESS
24827: IFFALSE 24840
24829: PUSH
24830: LD_EXP 66
24834: PPUSH
24835: CALL_OW 302
24839: AND
24840: IFFALSE 24776
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24842: LD_EXP 46
24846: PPUSH
24847: CALL_OW 257
24851: PUSH
24852: LD_INT 33
24854: NONEQUAL
24855: IFTRUE 24949
24857: PUSH
24858: LD_EXP 14
24862: PPUSH
24863: LD_INT 22
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 91
24875: PUSH
24876: LD_EXP 66
24880: PUSH
24881: LD_INT 8
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: LD_INT 25
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 25
24904: PUSH
24905: LD_INT 11
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 25
24914: PUSH
24915: LD_INT 32
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 25
24924: PUSH
24925: LD_INT 34
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: PPUSH
24944: CALL_OW 72
24948: OR
24949: IFFALSE 24959
// isAlarm := true ;
24951: LD_ADDR_EXP 17
24955: PUSH
24956: LD_INT 1
24958: ST_TO_ADDR
// if isAlarm then
24959: LD_EXP 17
24963: IFFALSE 24967
// exit ;
24965: GO 28904
// DialogueOn ;
24967: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24971: LD_EXP 66
24975: PPUSH
24976: LD_STRING DMcn-Interrupt-1
24978: PPUSH
24979: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24983: LD_EXP 66
24987: PPUSH
24988: LD_STRING DMcn-Interrupt-2
24990: PPUSH
24991: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
24995: LD_EXP 66
24999: PPUSH
25000: LD_STRING DMcn-Interrupt-3
25002: PPUSH
25003: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
25007: LD_EXP 46
25011: PPUSH
25012: LD_STRING DH-Interrupt-a-4
25014: PPUSH
25015: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
25019: LD_EXP 66
25023: PPUSH
25024: LD_STRING DMcn-Interrupt-a-5
25026: PPUSH
25027: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
25031: LD_EXP 46
25035: PPUSH
25036: LD_STRING DH-Interrupt-a-6
25038: PPUSH
25039: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
25043: LD_EXP 66
25047: PPUSH
25048: LD_STRING DMcn-Interrupt-a-7
25050: PPUSH
25051: CALL_OW 88
// DialogueOff ;
25055: CALL_OW 7
// hasMuchin := true ;
25059: LD_ADDR_EXP 30
25063: PUSH
25064: LD_INT 1
25066: ST_TO_ADDR
// Query ( MuchinInfo ) ;
25067: LD_STRING MuchinInfo
25069: PPUSH
25070: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
25074: LD_STRING M2a
25076: PPUSH
25077: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
25081: LD_INT 105
25083: PPUSH
25084: LD_INT 55
25086: PPUSH
25087: CALL_OW 428
25091: PPUSH
25092: LD_INT 2
25094: PPUSH
25095: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
25099: LD_INT 115
25101: PPUSH
25102: LD_INT 65
25104: PPUSH
25105: CALL_OW 428
25109: PPUSH
25110: LD_INT 2
25112: PPUSH
25113: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
25117: LD_INT 109
25119: PPUSH
25120: LD_INT 59
25122: PPUSH
25123: LD_INT 2
25125: PPUSH
25126: LD_INT 10
25128: NEG
25129: PPUSH
25130: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
25134: LD_INT 109
25136: PPUSH
25137: LD_INT 59
25139: PPUSH
25140: CALL_OW 84
// wait ( 0 0$2 ) ;
25144: LD_INT 70
25146: PPUSH
25147: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
25151: LD_INT 109
25153: PPUSH
25154: LD_INT 59
25156: PPUSH
25157: LD_INT 2
25159: PPUSH
25160: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
25164: LD_INT 35
25166: PPUSH
25167: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25171: LD_EXP 66
25175: PPUSH
25176: LD_EXP 46
25180: PPUSH
25181: CALL_OW 296
25185: PUSH
25186: LD_INT 6
25188: GREATER
25189: IFFALSE 25205
// ComMoveUnit ( ruDisturb , Heike ) ;
25191: LD_EXP 66
25195: PPUSH
25196: LD_EXP 46
25200: PPUSH
25201: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25205: LD_EXP 46
25209: PPUSH
25210: CALL_OW 257
25214: PUSH
25215: LD_INT 33
25217: NONEQUAL
25218: IFTRUE 25312
25220: PUSH
25221: LD_EXP 14
25225: PPUSH
25226: LD_INT 22
25228: PUSH
25229: LD_INT 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 91
25238: PUSH
25239: LD_EXP 66
25243: PUSH
25244: LD_INT 8
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 2
25254: PUSH
25255: LD_INT 25
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 25
25267: PUSH
25268: LD_INT 11
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 25
25277: PUSH
25278: LD_INT 32
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 25
25287: PUSH
25288: LD_INT 34
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: LIST
25306: PPUSH
25307: CALL_OW 72
25311: OR
25312: IFFALSE 25324
// begin isAlarm := true ;
25314: LD_ADDR_EXP 17
25318: PUSH
25319: LD_INT 1
25321: ST_TO_ADDR
// exit ;
25322: GO 28904
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
25324: LD_INT 105
25326: PPUSH
25327: LD_INT 55
25329: PPUSH
25330: CALL_OW 428
25334: NOT
25335: IFTRUE 25350
25337: PUSH
25338: LD_INT 115
25340: PPUSH
25341: LD_INT 65
25343: PPUSH
25344: CALL_OW 428
25348: NOT
25349: OR
25350: IFFALSE 25362
// begin isAlarm := true ;
25352: LD_ADDR_EXP 17
25356: PUSH
25357: LD_INT 1
25359: ST_TO_ADDR
// exit ;
25360: GO 28904
// end ; until not BuildingsInProgress ( 2 ) ;
25362: LD_INT 2
25364: PPUSH
25365: CALL_OW 345
25369: NOT
25370: IFFALSE 25164
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
25372: LD_INT 105
25374: PPUSH
25375: LD_INT 55
25377: PPUSH
25378: CALL_OW 428
25382: PPUSH
25383: LD_INT 3
25385: PPUSH
25386: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
25390: LD_INT 115
25392: PPUSH
25393: LD_INT 65
25395: PPUSH
25396: CALL_OW 428
25400: PPUSH
25401: LD_INT 3
25403: PPUSH
25404: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
25408: LD_STRING M2a-out
25410: PPUSH
25411: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25415: LD_EXP 66
25419: PPUSH
25420: LD_INT 2
25422: PPUSH
25423: CALL_OW 120
// wait ( 0 0$3 ) ;
25427: LD_INT 105
25429: PPUSH
25430: CALL_OW 67
// hasMuchin := false ;
25434: LD_ADDR_EXP 30
25438: PUSH
25439: LD_INT 0
25441: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25442: LD_INT 4200
25444: PPUSH
25445: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25449: LD_INT 35
25451: PPUSH
25452: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25456: LD_EXP 66
25460: PPUSH
25461: CALL_OW 314
25465: NOT
25466: IFFALSE 25482
// ComMoveUnit ( ruDisturb , Heike ) ;
25468: LD_EXP 66
25472: PPUSH
25473: LD_EXP 46
25477: PPUSH
25478: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
25482: LD_EXP 46
25486: PPUSH
25487: LD_EXP 66
25491: PPUSH
25492: CALL_OW 296
25496: PUSH
25497: LD_INT 6
25499: LESS
25500: IFFALSE 25513
25502: PUSH
25503: LD_EXP 66
25507: PPUSH
25508: CALL_OW 302
25512: AND
25513: IFFALSE 25449
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25515: LD_EXP 46
25519: PPUSH
25520: CALL_OW 257
25524: PUSH
25525: LD_INT 33
25527: NONEQUAL
25528: IFTRUE 25622
25530: PUSH
25531: LD_EXP 14
25535: PPUSH
25536: LD_INT 22
25538: PUSH
25539: LD_INT 2
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 91
25548: PUSH
25549: LD_EXP 66
25553: PUSH
25554: LD_INT 8
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: LD_INT 25
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 25
25577: PUSH
25578: LD_INT 11
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 25
25587: PUSH
25588: LD_INT 32
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PUSH
25595: LD_INT 25
25597: PUSH
25598: LD_INT 34
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: PPUSH
25617: CALL_OW 72
25621: OR
25622: IFFALSE 25632
// isAlarm := true ;
25624: LD_ADDR_EXP 17
25628: PUSH
25629: LD_INT 1
25631: ST_TO_ADDR
// if isAlarm then
25632: LD_EXP 17
25636: IFFALSE 25640
// exit ;
25638: GO 28904
// DialogueOn ;
25640: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25644: LD_EXP 66
25648: PPUSH
25649: LD_STRING DMcn-Interrupt-1
25651: PPUSH
25652: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25656: LD_EXP 66
25660: PPUSH
25661: LD_STRING DMcn-Interrupt-2
25663: PPUSH
25664: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
25668: LD_INT 176
25670: PPUSH
25671: LD_INT 54
25673: PPUSH
25674: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
25678: LD_INT 176
25680: PPUSH
25681: LD_INT 54
25683: PPUSH
25684: LD_INT 2
25686: PPUSH
25687: LD_INT 6
25689: NEG
25690: PPUSH
25691: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
25695: LD_INT 10
25697: PPUSH
25698: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
25702: LD_EXP 66
25706: PPUSH
25707: LD_STRING DMcn-Interrupt-b-3
25709: PPUSH
25710: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
25714: LD_EXP 46
25718: PPUSH
25719: LD_STRING DH-Interrupt-b-4
25721: PPUSH
25722: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
25726: LD_EXP 66
25730: PPUSH
25731: LD_STRING DMcn-Interrupt-b-5
25733: PPUSH
25734: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
25738: LD_EXP 46
25742: PPUSH
25743: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
25747: LD_INT 176
25749: PPUSH
25750: LD_INT 54
25752: PPUSH
25753: LD_INT 2
25755: PPUSH
25756: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
25760: LD_EXP 66
25764: PPUSH
25765: LD_STRING DMcn-Interrupt-b-6
25767: PPUSH
25768: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
25772: LD_EXP 46
25776: PPUSH
25777: LD_STRING DH-Interrupt-b-7
25779: PPUSH
25780: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
25784: LD_EXP 66
25788: PPUSH
25789: LD_STRING DMcn-Interrupt-b-8
25791: PPUSH
25792: CALL_OW 88
// DialogueOff ;
25796: CALL_OW 7
// Query ( MuchinInfo ) ;
25800: LD_STRING MuchinInfo
25802: PPUSH
25803: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
25807: LD_STRING M2b
25809: PPUSH
25810: CALL_OW 337
// hasMuchin := true ;
25814: LD_ADDR_EXP 30
25818: PUSH
25819: LD_INT 1
25821: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25822: LD_INT 35
25824: PPUSH
25825: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25829: LD_EXP 66
25833: PPUSH
25834: LD_EXP 46
25838: PPUSH
25839: CALL_OW 296
25843: PUSH
25844: LD_INT 6
25846: GREATER
25847: IFFALSE 25863
// ComMoveUnit ( ruDisturb , Heike ) ;
25849: LD_EXP 66
25853: PPUSH
25854: LD_EXP 46
25858: PPUSH
25859: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25863: LD_EXP 46
25867: PPUSH
25868: CALL_OW 257
25872: PUSH
25873: LD_INT 33
25875: NONEQUAL
25876: IFTRUE 25970
25878: PUSH
25879: LD_EXP 14
25883: PPUSH
25884: LD_INT 22
25886: PUSH
25887: LD_INT 2
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 91
25896: PUSH
25897: LD_EXP 66
25901: PUSH
25902: LD_INT 8
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 2
25912: PUSH
25913: LD_INT 25
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 25
25925: PUSH
25926: LD_INT 11
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 25
25935: PUSH
25936: LD_INT 32
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 25
25945: PUSH
25946: LD_INT 34
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: LIST
25964: PPUSH
25965: CALL_OW 72
25969: OR
25970: IFFALSE 25982
// begin isAlarm := true ;
25972: LD_ADDR_EXP 17
25976: PUSH
25977: LD_INT 1
25979: ST_TO_ADDR
// exit ;
25980: GO 28904
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
25982: LD_EXP 46
25986: PPUSH
25987: LD_INT 61
25989: PPUSH
25990: CALL_OW 296
25994: PUSH
25995: LD_INT 4
25997: LESS
25998: IFFALSE 25822
// InGameOn ;
26000: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
26004: LD_INT 173
26006: PPUSH
26007: LD_INT 54
26009: PPUSH
26010: LD_INT 2
26012: PPUSH
26013: LD_INT 8
26015: NEG
26016: PPUSH
26017: CALL_OW 330
// SetSide ( Heike , 3 ) ;
26021: LD_EXP 46
26025: PPUSH
26026: LD_INT 3
26028: PPUSH
26029: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
26033: LD_EXP 46
26037: PPUSH
26038: LD_INT 61
26040: PPUSH
26041: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
26045: LD_EXP 66
26049: PPUSH
26050: LD_INT 61
26052: PPUSH
26053: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
26057: LD_EXP 53
26061: PUSH
26062: LD_EXP 14
26066: IN
26067: IFFALSE 26087
26069: PUSH
26070: LD_EXP 53
26074: PPUSH
26075: LD_INT 61
26077: PPUSH
26078: CALL_OW 296
26082: PUSH
26083: LD_INT 12
26085: LESS
26086: AND
26087: IFFALSE 26131
// begin SetSide ( Markov , 3 ) ;
26089: LD_EXP 53
26093: PPUSH
26094: LD_INT 3
26096: PPUSH
26097: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
26101: LD_EXP 53
26105: PPUSH
26106: LD_INT 61
26108: PPUSH
26109: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
26113: LD_INT 35
26115: PPUSH
26116: CALL_OW 67
// until IsInUnit ( Markov ) ;
26120: LD_EXP 53
26124: PPUSH
26125: CALL_OW 310
26129: IFFALSE 26113
// end ; repeat wait ( 0 0$1 ) ;
26131: LD_INT 35
26133: PPUSH
26134: CALL_OW 67
// until IsInUnit ( Heike ) ;
26138: LD_EXP 46
26142: PPUSH
26143: CALL_OW 310
26147: IFFALSE 26131
// SetClass ( Heike , class_mechanic ) ;
26149: LD_EXP 46
26153: PPUSH
26154: LD_INT 3
26156: PPUSH
26157: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
26161: LD_INT 61
26163: PPUSH
26164: LD_INT 21
26166: PPUSH
26167: LD_INT 3
26169: PPUSH
26170: LD_INT 3
26172: PPUSH
26173: LD_INT 43
26175: PPUSH
26176: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
26180: LD_EXP 31
26184: IFFALSE 26215
26186: PUSH
26187: LD_EXP 53
26191: PUSH
26192: LD_EXP 14
26196: IN
26197: IFTRUE 26214
26199: PUSH
26200: LD_EXP 53
26204: PPUSH
26205: CALL_OW 310
26209: PUSH
26210: LD_INT 61
26212: EQUAL
26213: OR
26214: AND
26215: IFFALSE 26705
// begin wait ( 0 0$5 ) ;
26217: LD_INT 175
26219: PPUSH
26220: CALL_OW 67
// SetSide ( Heike , 2 ) ;
26224: LD_EXP 46
26228: PPUSH
26229: LD_INT 2
26231: PPUSH
26232: CALL_OW 235
// SetSide ( Markov , 2 ) ;
26236: LD_EXP 53
26240: PPUSH
26241: LD_INT 2
26243: PPUSH
26244: CALL_OW 235
// if not Markov in heikeSquad then
26248: LD_EXP 53
26252: PUSH
26253: LD_EXP 14
26257: IN
26258: NOT
26259: IFFALSE 26281
// heikeSquad := Join ( heikeSquad , Markov ) ;
26261: LD_ADDR_EXP 14
26265: PUSH
26266: LD_EXP 14
26270: PPUSH
26271: LD_EXP 53
26275: PPUSH
26276: CALL 68757 0 2
26280: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
26281: LD_EXP 53
26285: PPUSH
26286: LD_STRING DMar-Factory-1
26288: PPUSH
26289: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
26293: LD_INT 61
26295: PPUSH
26296: LD_INT 99
26298: PPUSH
26299: CALL_OW 329
// game_speed := 4 ;
26303: LD_ADDR_OWVAR 65
26307: PUSH
26308: LD_INT 4
26310: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
26311: LD_EXP 66
26315: PPUSH
26316: CALL_OW 122
// ComExitBuilding ( Markov ) ;
26320: LD_EXP 53
26324: PPUSH
26325: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
26329: LD_EXP 66
26333: PPUSH
26334: LD_INT 171
26336: PPUSH
26337: LD_INT 51
26339: PPUSH
26340: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
26344: LD_EXP 53
26348: PPUSH
26349: LD_INT 167
26351: PPUSH
26352: LD_INT 50
26354: PPUSH
26355: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
26359: LD_EXP 53
26363: PPUSH
26364: LD_EXP 66
26368: PPUSH
26369: CALL_OW 179
// wait ( 0 0$5 ) ;
26373: LD_INT 175
26375: PPUSH
26376: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
26380: LD_EXP 53
26384: PPUSH
26385: LD_STRING DMar-Factory-2
26387: PPUSH
26388: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
26392: LD_ADDR_VAR 0 2
26396: PUSH
26397: LD_INT 22
26399: PUSH
26400: LD_INT 3
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 33
26409: PUSH
26410: LD_INT 3
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PPUSH
26421: CALL_OW 69
26425: PUSH
26426: LD_INT 1
26428: ARRAY
26429: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
26430: LD_EXP 66
26434: PPUSH
26435: LD_VAR 0 2
26439: PPUSH
26440: CALL_OW 119
// game_speed := 4 ;
26444: LD_ADDR_OWVAR 65
26448: PUSH
26449: LD_INT 4
26451: ST_TO_ADDR
// async ;
26452: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
26453: LD_EXP 66
26457: PPUSH
26458: LD_STRING DMcn-Factory-3
26460: PPUSH
26461: CALL_OW 88
// wait ( 0 0$0.9 ) ;
26465: LD_INT 32
26467: PPUSH
26468: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
26472: LD_VAR 0 2
26476: PPUSH
26477: LD_EXP 66
26481: PPUSH
26482: CALL_OW 115
// sync ;
26486: SYNC
// wait ( 0 0$1 ) ;
26487: LD_INT 35
26489: PPUSH
26490: CALL_OW 67
// KillUnit ( ruDisturb ) ;
26494: LD_EXP 66
26498: PPUSH
26499: CALL_OW 66
// SetSide ( veh , 7 ) ;
26503: LD_VAR 0 2
26507: PPUSH
26508: LD_INT 7
26510: PPUSH
26511: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
26515: LD_VAR 0 2
26519: PPUSH
26520: LD_INT 84
26522: PPUSH
26523: LD_INT 38
26525: PPUSH
26526: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
26530: LD_EXP 67
26534: PUSH
26535: LD_INT 1
26537: ARRAY
26538: PPUSH
26539: CALL_OW 258
26543: PUSH
26544: LD_INT 1
26546: EQUAL
26547: IFFALSE 26567
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
26549: LD_EXP 67
26553: PUSH
26554: LD_INT 1
26556: ARRAY
26557: PPUSH
26558: LD_STRING DRum-Factory-4
26560: PPUSH
26561: CALL_OW 88
26565: GO 26583
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
26567: LD_EXP 67
26571: PUSH
26572: LD_INT 1
26574: ARRAY
26575: PPUSH
26576: LD_STRING DRuf-Factory-4
26578: PPUSH
26579: CALL_OW 88
// wait ( 0 0$1 ) ;
26583: LD_INT 35
26585: PPUSH
26586: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
26590: LD_EXP 67
26594: PPUSH
26595: LD_INT 26
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PPUSH
26605: CALL_OW 72
26609: PUSH
26610: LD_INT 1
26612: ARRAY
26613: PPUSH
26614: LD_STRING DRum-Factory-6
26616: PPUSH
26617: CALL_OW 88
// wait ( 0 0$2 ) ;
26621: LD_INT 70
26623: PPUSH
26624: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
26628: LD_EXP 46
26632: PPUSH
26633: LD_INT 33
26635: PPUSH
26636: CALL_OW 336
// ComExitBuilding ( Heike ) ;
26640: LD_EXP 46
26644: PPUSH
26645: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26649: LD_EXP 46
26653: PPUSH
26654: LD_INT 168
26656: PPUSH
26657: LD_INT 54
26659: PPUSH
26660: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26664: LD_INT 173
26666: PPUSH
26667: LD_INT 54
26669: PPUSH
26670: LD_INT 2
26672: PPUSH
26673: CALL_OW 331
// InGameOff ;
26677: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
26681: LD_STRING M2b-out
26683: PPUSH
26684: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
26688: LD_STRING ACH_TOY
26690: PPUSH
26691: CALL_OW 543
// hasMuchin := false ;
26695: LD_ADDR_EXP 30
26699: PUSH
26700: LD_INT 0
26702: ST_TO_ADDR
// exit ;
26703: GO 28904
// end ; wait ( 0 0$5 ) ;
26705: LD_INT 175
26707: PPUSH
26708: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
26712: LD_INT 61
26714: PPUSH
26715: LD_INT 99
26717: PPUSH
26718: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
26722: LD_EXP 53
26726: PUSH
26727: LD_EXP 14
26731: IN
26732: IFFALSE 26749
26734: PUSH
26735: LD_EXP 53
26739: PPUSH
26740: CALL_OW 255
26744: PUSH
26745: LD_INT 3
26747: EQUAL
26748: AND
26749: IFFALSE 26772
// begin SetSide ( Markov , 2 ) ;
26751: LD_EXP 53
26755: PPUSH
26756: LD_INT 2
26758: PPUSH
26759: CALL_OW 235
// ComExitBuilding ( Markov ) ;
26763: LD_EXP 53
26767: PPUSH
26768: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
26772: LD_EXP 46
26776: PPUSH
26777: LD_INT 2
26779: PPUSH
26780: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
26784: LD_EXP 46
26788: PPUSH
26789: LD_INT 33
26791: PPUSH
26792: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
26796: LD_EXP 66
26800: PPUSH
26801: CALL_OW 122
// ComExitBuilding ( Heike ) ;
26805: LD_EXP 46
26809: PPUSH
26810: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26814: LD_EXP 46
26818: PPUSH
26819: LD_INT 168
26821: PPUSH
26822: LD_INT 54
26824: PPUSH
26825: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26829: LD_INT 173
26831: PPUSH
26832: LD_INT 54
26834: PPUSH
26835: LD_INT 2
26837: PPUSH
26838: CALL_OW 331
// InGameOff ;
26842: CALL_OW 9
// wait ( 3 ) ;
26846: LD_INT 3
26848: PPUSH
26849: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
26853: LD_EXP 66
26857: PPUSH
26858: LD_INT 2
26860: PPUSH
26861: CALL_OW 120
// wait ( 0 0$3 ) ;
26865: LD_INT 105
26867: PPUSH
26868: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
26872: LD_STRING M2b-out
26874: PPUSH
26875: CALL_OW 337
// hasMuchin := false ;
26879: LD_ADDR_EXP 30
26883: PUSH
26884: LD_INT 0
26886: ST_TO_ADDR
// wait ( 2 2$00 ) ;
26887: LD_INT 4200
26889: PPUSH
26890: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
26894: LD_INT 35
26896: PPUSH
26897: CALL_OW 67
// if not HasTask ( ruDisturb ) then
26901: LD_EXP 66
26905: PPUSH
26906: CALL_OW 314
26910: NOT
26911: IFFALSE 26927
// ComMoveUnit ( ruDisturb , Heike ) ;
26913: LD_EXP 66
26917: PPUSH
26918: LD_EXP 46
26922: PPUSH
26923: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
26927: LD_EXP 46
26931: PPUSH
26932: LD_EXP 66
26936: PPUSH
26937: CALL_OW 296
26941: PUSH
26942: LD_INT 2
26944: LESS
26945: IFFALSE 26958
26947: PUSH
26948: LD_EXP 66
26952: PPUSH
26953: CALL_OW 302
26957: AND
26958: IFFALSE 26894
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26960: LD_EXP 46
26964: PPUSH
26965: CALL_OW 257
26969: PUSH
26970: LD_INT 33
26972: NONEQUAL
26973: IFTRUE 27067
26975: PUSH
26976: LD_EXP 14
26980: PPUSH
26981: LD_INT 22
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 91
26993: PUSH
26994: LD_EXP 66
26998: PUSH
26999: LD_INT 8
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 25
27012: PUSH
27013: LD_INT 1
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 25
27022: PUSH
27023: LD_INT 11
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 25
27032: PUSH
27033: LD_INT 32
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 25
27042: PUSH
27043: LD_INT 34
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: PPUSH
27062: CALL_OW 72
27066: OR
27067: IFFALSE 27077
// isAlarm := true ;
27069: LD_ADDR_EXP 17
27073: PUSH
27074: LD_INT 1
27076: ST_TO_ADDR
// if isAlarm then
27077: LD_EXP 17
27081: IFFALSE 27085
// exit ;
27083: GO 28904
// ComTurnUnit ( Heike , ruDisturb ) ;
27085: LD_EXP 46
27089: PPUSH
27090: LD_EXP 66
27094: PPUSH
27095: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
27099: LD_EXP 66
27103: PPUSH
27104: LD_EXP 46
27108: PPUSH
27109: CALL_OW 119
// wait ( 3 ) ;
27113: LD_INT 3
27115: PPUSH
27116: CALL_OW 67
// for i := 1 to 3 do
27120: LD_ADDR_VAR 0 1
27124: PUSH
27125: DOUBLE
27126: LD_INT 1
27128: DEC
27129: ST_TO_ADDR
27130: LD_INT 3
27132: PUSH
27133: FOR_TO
27134: IFFALSE 27151
// CreateCratesArea ( 5 , cratesArea , false ) ;
27136: LD_INT 5
27138: PPUSH
27139: LD_INT 58
27141: PPUSH
27142: LD_INT 0
27144: PPUSH
27145: CALL_OW 55
27149: GO 27133
27151: POP
27152: POP
// uc_side := 3 ;
27153: LD_ADDR_OWVAR 20
27157: PUSH
27158: LD_INT 3
27160: ST_TO_ADDR
// uc_nation := nation_russian ;
27161: LD_ADDR_OWVAR 21
27165: PUSH
27166: LD_INT 3
27168: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
27169: LD_INT 21
27171: PPUSH
27172: LD_INT 3
27174: PPUSH
27175: LD_INT 1
27177: PPUSH
27178: LD_INT 51
27180: PPUSH
27181: LD_INT 100
27183: PPUSH
27184: CALL 35577 0 5
// veh := CreateVehicle ;
27188: LD_ADDR_VAR 0 2
27192: PUSH
27193: CALL_OW 45
27197: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
27198: LD_VAR 0 2
27202: PPUSH
27203: LD_INT 104
27205: PPUSH
27206: LD_INT 41
27208: PPUSH
27209: LD_INT 3
27211: PPUSH
27212: LD_INT 0
27214: PPUSH
27215: CALL 70917 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
27219: LD_VAR 0 2
27223: PPUSH
27224: LD_INT 1
27226: PPUSH
27227: LD_INT 100
27229: PPUSH
27230: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
27234: CALL_OW 44
27238: PPUSH
27239: LD_VAR 0 2
27243: PPUSH
27244: CALL_OW 52
// DialogueOn ;
27248: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
27252: LD_EXP 66
27256: PPUSH
27257: LD_STRING DMcn-Interrupt-1
27259: PPUSH
27260: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
27264: LD_EXP 66
27268: PPUSH
27269: LD_STRING DMcn-Interrupt-2
27271: PPUSH
27272: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
27276: LD_EXP 66
27280: PPUSH
27281: LD_STRING DMcn-Interrupt-c-3
27283: PPUSH
27284: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
27288: LD_INT 101
27290: PPUSH
27291: LD_INT 38
27293: PPUSH
27294: LD_INT 2
27296: PPUSH
27297: LD_INT 10
27299: NEG
27300: PPUSH
27301: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
27305: LD_INT 101
27307: PPUSH
27308: LD_INT 38
27310: PPUSH
27311: CALL_OW 84
// wait ( 0 0$2 ) ;
27315: LD_INT 70
27317: PPUSH
27318: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
27322: LD_INT 101
27324: PPUSH
27325: LD_INT 38
27327: PPUSH
27328: LD_INT 2
27330: PPUSH
27331: CALL_OW 331
// RemoveUnit ( veh ) ;
27335: LD_VAR 0 2
27339: PPUSH
27340: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
27344: LD_EXP 66
27348: PPUSH
27349: LD_STRING DMcn-Interrupt-c-4
27351: PPUSH
27352: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
27356: LD_EXP 46
27360: PPUSH
27361: LD_STRING DH-Interrupt-c-5
27363: PPUSH
27364: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
27368: LD_EXP 66
27372: PPUSH
27373: LD_STRING DMcn-Interrupt-c-6
27375: PPUSH
27376: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
27380: LD_EXP 46
27384: PPUSH
27385: LD_STRING DH-Interrupt-c-7
27387: PPUSH
27388: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
27392: LD_EXP 66
27396: PPUSH
27397: LD_STRING DMcn-Interrupt-c-8
27399: PPUSH
27400: CALL_OW 88
// DialogueOff ;
27404: CALL_OW 7
// hasMuchin := true ;
27408: LD_ADDR_EXP 30
27412: PUSH
27413: LD_INT 1
27415: ST_TO_ADDR
// Query ( MuchinInfo ) ;
27416: LD_STRING MuchinInfo
27418: PPUSH
27419: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
27423: LD_STRING M2c
27425: PPUSH
27426: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
27430: LD_INT 35
27432: PPUSH
27433: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
27437: LD_EXP 66
27441: PPUSH
27442: LD_EXP 46
27446: PPUSH
27447: CALL_OW 296
27451: PUSH
27452: LD_INT 6
27454: GREATER
27455: IFFALSE 27471
// ComMoveUnit ( ruDisturb , Heike ) ;
27457: LD_EXP 66
27461: PPUSH
27462: LD_EXP 46
27466: PPUSH
27467: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
27471: LD_EXP 46
27475: PPUSH
27476: CALL_OW 257
27480: PUSH
27481: LD_INT 33
27483: NONEQUAL
27484: IFTRUE 27578
27486: PUSH
27487: LD_EXP 14
27491: PPUSH
27492: LD_INT 22
27494: PUSH
27495: LD_INT 2
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 91
27504: PUSH
27505: LD_EXP 66
27509: PUSH
27510: LD_INT 8
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: PUSH
27521: LD_INT 25
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 25
27533: PUSH
27534: LD_INT 11
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 25
27543: PUSH
27544: LD_INT 32
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 25
27553: PUSH
27554: LD_INT 34
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: PPUSH
27573: CALL_OW 72
27577: OR
27578: IFFALSE 27590
// begin isAlarm := true ;
27580: LD_ADDR_EXP 17
27584: PUSH
27585: LD_INT 1
27587: ST_TO_ADDR
// exit ;
27588: GO 28904
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
27590: LD_EXP 14
27594: PUSH
27595: LD_EXP 46
27599: UNION
27600: PPUSH
27601: LD_INT 92
27603: PUSH
27604: LD_INT 100
27606: PUSH
27607: LD_INT 37
27609: PUSH
27610: LD_INT 6
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: PPUSH
27619: CALL_OW 72
27623: IFFALSE 27430
// PlaceSeeing ( 100 , 37 , 2 , - 10 ) ;
27625: LD_INT 100
27627: PPUSH
27628: LD_INT 37
27630: PPUSH
27631: LD_INT 2
27633: PPUSH
27634: LD_INT 10
27636: NEG
27637: PPUSH
27638: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
27642: LD_ADDR_VAR 0 3
27646: PUSH
27647: LD_EXP 14
27651: PUSH
27652: LD_EXP 46
27656: UNION
27657: PPUSH
27658: LD_INT 25
27660: PUSH
27661: LD_INT 33
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 91
27670: PUSH
27671: LD_INT 6
27673: PUSH
27674: LD_INT 12
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: LIST
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PPUSH
27686: CALL_OW 72
27690: ST_TO_ADDR
// for i in tmp do
27691: LD_ADDR_VAR 0 1
27695: PUSH
27696: LD_VAR 0 3
27700: PUSH
27701: FOR_IN
27702: IFFALSE 27733
// begin SetSide ( i , 3 ) ;
27704: LD_VAR 0 1
27708: PPUSH
27709: LD_INT 3
27711: PPUSH
27712: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
27716: LD_VAR 0 1
27720: PPUSH
27721: LD_INT 101
27723: PPUSH
27724: LD_INT 38
27726: PPUSH
27727: CALL_OW 111
// end ;
27731: GO 27701
27733: POP
27734: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
27735: LD_EXP 66
27739: PPUSH
27740: LD_INT 104
27742: PPUSH
27743: LD_INT 37
27745: PPUSH
27746: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27750: LD_EXP 66
27754: PPUSH
27755: LD_EXP 46
27759: PPUSH
27760: CALL_OW 179
// if Kaia in heikeSquad and IsOk ( Kaia ) and GetClass ( Kaia ) = class_prison and not Kaia in tmp then
27764: LD_EXP 51
27768: PUSH
27769: LD_EXP 14
27773: IN
27774: IFFALSE 27787
27776: PUSH
27777: LD_EXP 51
27781: PPUSH
27782: CALL_OW 302
27786: AND
27787: IFFALSE 27804
27789: PUSH
27790: LD_EXP 51
27794: PPUSH
27795: CALL_OW 257
27799: PUSH
27800: LD_INT 33
27802: EQUAL
27803: AND
27804: IFFALSE 27819
27806: PUSH
27807: LD_EXP 51
27811: PUSH
27812: LD_VAR 0 3
27816: IN
27817: NOT
27818: AND
27819: IFFALSE 27836
// ComMoveXY ( Kaia , 104 , 36 ) ;
27821: LD_EXP 51
27825: PPUSH
27826: LD_INT 104
27828: PPUSH
27829: LD_INT 36
27831: PPUSH
27832: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27836: LD_INT 35
27838: PPUSH
27839: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
27843: LD_ADDR_VAR 0 4
27847: PUSH
27848: LD_INT 58
27850: PPUSH
27851: CALL_OW 435
27855: ST_TO_ADDR
// for i in tmp do
27856: LD_ADDR_VAR 0 1
27860: PUSH
27861: LD_VAR 0 3
27865: PUSH
27866: FOR_IN
27867: IFFALSE 27910
// if not HasTask ( i ) then
27869: LD_VAR 0 1
27873: PPUSH
27874: CALL_OW 314
27878: NOT
27879: IFFALSE 27908
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
27881: LD_VAR 0 1
27885: PPUSH
27886: LD_VAR 0 4
27890: PUSH
27891: LD_INT 1
27893: ARRAY
27894: PPUSH
27895: LD_VAR 0 4
27899: PUSH
27900: LD_INT 2
27902: ARRAY
27903: PPUSH
27904: CALL_OW 117
27908: GO 27866
27910: POP
27911: POP
// until not cr ;
27912: LD_VAR 0 4
27916: NOT
27917: IFFALSE 27836
// wait ( 0 0$2 ) ;
27919: LD_INT 70
27921: PPUSH
27922: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 2 ) ;
27926: LD_INT 100
27928: PPUSH
27929: LD_INT 37
27931: PPUSH
27932: LD_INT 2
27934: PPUSH
27935: CALL_OW 331
// for i in tmp do
27939: LD_ADDR_VAR 0 1
27943: PUSH
27944: LD_VAR 0 3
27948: PUSH
27949: FOR_IN
27950: IFFALSE 27966
// SetSide ( i , 2 ) ;
27952: LD_VAR 0 1
27956: PPUSH
27957: LD_INT 2
27959: PPUSH
27960: CALL_OW 235
27964: GO 27949
27966: POP
27967: POP
// if Kaia in tmp or GetDistUnits ( Kaia , ruDisturb ) < 8 then
27968: LD_EXP 51
27972: PUSH
27973: LD_VAR 0 3
27977: IN
27978: IFTRUE 28000
27980: PUSH
27981: LD_EXP 51
27985: PPUSH
27986: LD_EXP 66
27990: PPUSH
27991: CALL_OW 296
27995: PUSH
27996: LD_INT 8
27998: LESS
27999: OR
28000: IFFALSE 28301
// begin InGameOn ;
28002: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
28006: LD_EXP 51
28010: PPUSH
28011: LD_EXP 66
28015: PPUSH
28016: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
28020: LD_EXP 66
28024: PPUSH
28025: LD_EXP 51
28029: PPUSH
28030: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
28034: LD_EXP 51
28038: PPUSH
28039: LD_EXP 66
28043: PPUSH
28044: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
28048: LD_EXP 51
28052: PPUSH
28053: LD_STRING DK-Assassin-1
28055: PPUSH
28056: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
28060: LD_EXP 66
28064: PPUSH
28065: LD_STRING DMcn-Assassin-2
28067: PPUSH
28068: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
28072: LD_EXP 51
28076: PPUSH
28077: LD_STRING DK-Assassin-3
28079: PPUSH
28080: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
28084: LD_EXP 66
28088: PPUSH
28089: LD_STRING DMcn-Assassin-4
28091: PPUSH
28092: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
28096: LD_EXP 51
28100: PPUSH
28101: LD_STRING DK-Assassin-5
28103: PPUSH
28104: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
28108: LD_EXP 66
28112: PPUSH
28113: LD_STRING DMcn-Assassin-6
28115: PPUSH
28116: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
28120: LD_EXP 51
28124: PPUSH
28125: LD_INT 3
28127: PPUSH
28128: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
28132: LD_EXP 51
28136: PUSH
28137: LD_EXP 66
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PPUSH
28146: LD_INT 6
28148: PPUSH
28149: CALL_OW 120
// wait ( 0 0$5 ) ;
28153: LD_INT 175
28155: PPUSH
28156: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
28160: LD_EXP 51
28164: PPUSH
28165: LD_STRING DK-Assassin-7
28167: PPUSH
28168: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
28172: LD_EXP 66
28176: PPUSH
28177: LD_STRING DMcn-Assassin-8
28179: PPUSH
28180: CALL_OW 88
// wait ( 0 0$0.3 ) ;
28184: LD_INT 10
28186: PPUSH
28187: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
28191: LD_EXP 51
28195: PPUSH
28196: LD_STRING DK-Assassin-9
28198: PPUSH
28199: CALL_OW 88
// wait ( 0 0$2 ) ;
28203: LD_INT 70
28205: PPUSH
28206: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
28210: LD_EXP 51
28214: PPUSH
28215: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
28219: LD_EXP 66
28223: PPUSH
28224: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
28228: LD_EXP 51
28232: PPUSH
28233: LD_INT 2
28235: PPUSH
28236: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
28240: LD_EXP 51
28244: PPUSH
28245: LD_EXP 46
28249: PPUSH
28250: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
28254: LD_EXP 51
28258: PPUSH
28259: LD_STRING DK-Assasin-10
28261: PPUSH
28262: CALL_OW 88
// InGameOff ;
28266: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
28270: LD_STRING ACH_POKER
28272: PPUSH
28273: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
28277: LD_STRING M2c-out
28279: PPUSH
28280: CALL_OW 337
// wait ( 0 0$3 ) ;
28284: LD_INT 105
28286: PPUSH
28287: CALL_OW 67
// hasMuchin := false ;
28291: LD_ADDR_EXP 30
28295: PUSH
28296: LD_INT 0
28298: ST_TO_ADDR
// exit ;
28299: GO 28904
// end ; ChangeMissionObjectives ( M2c-out ) ;
28301: LD_STRING M2c-out
28303: PPUSH
28304: CALL_OW 337
// meetWithMuchin := true ;
28308: LD_ADDR_EXP 44
28312: PUSH
28313: LD_INT 1
28315: ST_TO_ADDR
// InGameOn ;
28316: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
28320: LD_EXP 66
28324: PPUSH
28325: LD_STRING DMcn-Fail-1
28327: PPUSH
28328: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
28332: LD_VAR 0 3
28336: PPUSH
28337: LD_INT 114
28339: PPUSH
28340: LD_INT 17
28342: PPUSH
28343: CALL_OW 111
// wait ( 0 0$1 ) ;
28347: LD_INT 35
28349: PPUSH
28350: CALL_OW 67
// async ;
28354: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28355: LD_EXP 66
28359: PPUSH
28360: LD_EXP 46
28364: PPUSH
28365: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
28369: LD_EXP 66
28373: PPUSH
28374: LD_STRING DMcn-Fail-2
28376: PPUSH
28377: CALL_OW 88
// ComStop ( Heike ) ;
28381: LD_EXP 46
28385: PPUSH
28386: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
28390: LD_EXP 46
28394: PPUSH
28395: LD_EXP 66
28399: PPUSH
28400: CALL_OW 179
// sync ;
28404: SYNC
// Say ( Heike , DH-Fail-3 ) ;
28405: LD_EXP 46
28409: PPUSH
28410: LD_STRING DH-Fail-3
28412: PPUSH
28413: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
28417: LD_EXP 66
28421: PPUSH
28422: LD_STRING DMcn-Fail-4
28424: PPUSH
28425: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
28429: LD_EXP 46
28433: PUSH
28434: LD_EXP 66
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: PPUSH
28443: LD_INT 41
28445: PPUSH
28446: LD_INT 19
28448: PPUSH
28449: CALL_OW 111
// wait ( 0 0$2 ) ;
28453: LD_INT 70
28455: PPUSH
28456: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
28460: LD_EXP 66
28464: PPUSH
28465: LD_INT 40
28467: PPUSH
28468: LD_INT 19
28470: PPUSH
28471: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
28475: LD_EXP 46
28479: PPUSH
28480: LD_INT 43
28482: PPUSH
28483: LD_INT 21
28485: PPUSH
28486: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
28490: LD_EXP 66
28494: PPUSH
28495: LD_EXP 46
28499: PPUSH
28500: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
28504: LD_EXP 46
28508: PPUSH
28509: LD_EXP 66
28513: PPUSH
28514: CALL_OW 179
// CenterNowOnUnits ( Heike ) ;
28518: LD_EXP 46
28522: PPUSH
28523: CALL_OW 87
// wait ( 0 0$2 ) ;
28527: LD_INT 70
28529: PPUSH
28530: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
28534: LD_EXP 66
28538: PPUSH
28539: LD_STRING DMcn-Fail-5
28541: PPUSH
28542: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28546: LD_EXP 46
28550: PPUSH
28551: CALL_OW 87
// wait ( 0 0$2 ) ;
28555: LD_INT 70
28557: PPUSH
28558: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
28562: LD_EXP 66
28566: PPUSH
28567: LD_STRING DMcn-Fail-6
28569: PPUSH
28570: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28574: LD_EXP 46
28578: PPUSH
28579: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
28583: LD_INT 35
28585: PPUSH
28586: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
28590: LD_EXP 46
28594: PPUSH
28595: LD_INT 43
28597: PPUSH
28598: LD_INT 21
28600: PPUSH
28601: CALL_OW 307
28605: IFFALSE 28583
// CenterNowOnUnits ( Heike ) ;
28607: LD_EXP 46
28611: PPUSH
28612: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
28616: LD_STRING MuchinQuestion
28618: PPUSH
28619: CALL_OW 97
28623: PUSH
28624: LD_INT 1
28626: DOUBLE
28627: EQUAL
28628: IFTRUE 28632
28630: GO 28732
28632: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
28633: LD_EXP 66
28637: PPUSH
28638: LD_STRING DMcn-Fail-7
28640: PPUSH
28641: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
28645: LD_EXP 46
28649: PPUSH
28650: LD_STRING DH-Fail-8
28652: PPUSH
28653: CALL_OW 88
// wait ( 0 0$0.3 ) ;
28657: LD_INT 10
28659: PPUSH
28660: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
28664: LD_EXP 46
28668: PPUSH
28669: LD_STRING DH-Fail-9
28671: PPUSH
28672: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
28676: LD_EXP 46
28680: PPUSH
28681: LD_STRING DH-Fail-10
28683: PPUSH
28684: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
28688: LD_EXP 66
28692: PPUSH
28693: LD_STRING DMcn-Fail-11
28695: PPUSH
28696: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
28700: LD_EXP 66
28704: PPUSH
28705: LD_EXP 46
28709: PPUSH
28710: CALL_OW 115
// wait ( 0 0$2 ) ;
28714: LD_INT 70
28716: PPUSH
28717: CALL_OW 67
// KillUnit ( Heike ) ;
28721: LD_EXP 46
28725: PPUSH
28726: CALL_OW 66
// end ; 2 :
28730: GO 28900
28732: LD_INT 2
28734: DOUBLE
28735: EQUAL
28736: IFTRUE 28740
28738: GO 28899
28740: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
28741: LD_EXP 46
28745: PPUSH
28746: LD_STRING DH-Fail-a-8
28748: PPUSH
28749: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
28753: LD_EXP 46
28757: PPUSH
28758: LD_STRING DH-Fail-a-9
28760: PPUSH
28761: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
28765: LD_EXP 46
28769: PPUSH
28770: LD_STRING DH-Fail-a-11
28772: PPUSH
28773: CALL_OW 88
// async ;
28777: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28778: LD_EXP 66
28782: PPUSH
28783: LD_EXP 46
28787: PPUSH
28788: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
28792: LD_EXP 66
28796: PPUSH
28797: LD_EXP 46
28801: PPUSH
28802: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
28806: LD_EXP 66
28810: PPUSH
28811: LD_STRING DH-Fail-12
28813: PPUSH
28814: CALL_OW 88
// sync ;
28818: SYNC
// wait ( 0 0$1 ) ;
28819: LD_INT 35
28821: PPUSH
28822: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
28826: LD_EXP 46
28830: PPUSH
28831: LD_STRING DH-Fail-a-13
28833: PPUSH
28834: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
28838: LD_EXP 66
28842: PPUSH
28843: LD_INT 100
28845: PPUSH
28846: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
28850: LD_EXP 66
28854: PPUSH
28855: LD_STRING DMcn-Fail-a-14
28857: PPUSH
28858: CALL_OW 91
// KillUnit ( ruDisturb ) ;
28862: LD_EXP 66
28866: PPUSH
28867: CALL_OW 66
// wait ( 0 0$1 ) ;
28871: LD_INT 35
28873: PPUSH
28874: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
28878: LD_EXP 46
28882: PPUSH
28883: LD_STRING DH-Fail-a-15
28885: PPUSH
28886: CALL_OW 88
// YouLost ( FailMuchin ) ;
28890: LD_STRING FailMuchin
28892: PPUSH
28893: CALL_OW 104
// end ; end ;
28897: GO 28900
28899: POP
// InGameOff ;
28900: CALL_OW 9
// end ;
28904: PPOPN 4
28906: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
28907: LD_INT 23
28909: PPUSH
28910: LD_INT 22
28912: PUSH
28913: LD_INT 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PPUSH
28920: CALL_OW 70
28924: IFFALSE 28933
28926: PUSH
28927: LD_EXP 44
28931: NOT
28932: AND
28933: IFFALSE 28941
28935: PUSH
28936: LD_EXP 30
28940: AND
28941: IFFALSE 28954
28943: GO 28945
28945: DISABLE
// isAlarm := true ; end_of_file
28946: LD_ADDR_EXP 17
28950: PUSH
28951: LD_INT 1
28953: ST_TO_ADDR
28954: END
// every 0 0$1 marked gameStartEvent do
28955: GO 28957
28957: DISABLE
// begin enable ;
28958: ENABLE
// if not contactWithAmerican then
28959: LD_EXP 25
28963: NOT
28964: IFFALSE 29009
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
28966: LD_ADDR_OWVAR 47
28970: PUSH
28971: LD_STRING #X108-1
28973: PUSH
28974: LD_INT 22
28976: PUSH
28977: LD_INT 5
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 21
28986: PUSH
28987: LD_INT 1
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PPUSH
28998: CALL_OW 69
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: ST_TO_ADDR
29007: GO 29098
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
29009: LD_ADDR_OWVAR 47
29013: PUSH
29014: LD_STRING #X108-1
29016: PUSH
29017: LD_INT 22
29019: PUSH
29020: LD_INT 5
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 21
29029: PUSH
29030: LD_INT 1
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 50
29039: PUSH
29040: EMPTY
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 69
29052: PUSH
29053: LD_STRING #X108-2
29055: PUSH
29056: LD_INT 22
29058: PUSH
29059: LD_INT 4
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 21
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 50
29078: PUSH
29079: EMPTY
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: PPUSH
29087: CALL_OW 69
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// end ; end_of_file
29098: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
29099: LD_EXP 46
29103: PPUSH
29104: LD_INT 59
29106: PPUSH
29107: CALL_OW 308
29111: IFFALSE 29233
29113: GO 29115
29115: DISABLE
// begin Query ( FinalInfo ) ;
29116: LD_STRING FinalInfo
29118: PPUSH
29119: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
29123: LD_INT 59
29125: PPUSH
29126: LD_INT 1
29128: PPUSH
29129: CALL_OW 424
// end_the_mission_allowed := true ;
29133: LD_ADDR_OWVAR 57
29137: PUSH
29138: LD_INT 1
29140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
29141: LD_INT 35
29143: PPUSH
29144: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
29148: LD_INT 22
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 21
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 95
29170: PUSH
29171: LD_INT 59
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: PPUSH
29183: CALL_OW 69
29187: PPUSH
29188: CALL 32781 0 1
29192: PUSH
29193: LD_INT 22
29195: PUSH
29196: LD_INT 2
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 21
29205: PUSH
29206: LD_INT 1
29208: PUSH
29209: EMPTY
29210: LIST
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PPUSH
29217: CALL_OW 69
29221: PPUSH
29222: CALL 32781 0 1
29226: EQUAL
29227: IFFALSE 29141
// EndMission ;
29229: CALL 29241 0 0
// end ;
29233: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
29234: CALL 29241 0 0
// end ;
29238: PPOPN 1
29240: END
// function EndMission ; var tmp , m1 , m2 , m3 ; begin
29241: LD_INT 0
29243: PPUSH
29244: PPUSH
29245: PPUSH
29246: PPUSH
29247: PPUSH
// m1 := false ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_INT 0
29255: ST_TO_ADDR
// m2 := false ;
29256: LD_ADDR_VAR 0 4
29260: PUSH
29261: LD_INT 0
29263: ST_TO_ADDR
// m3 := false ;
29264: LD_ADDR_VAR 0 5
29268: PUSH
29269: LD_INT 0
29271: ST_TO_ADDR
// PlayOriginalMusic ;
29272: CALL 96849 0 0
// if not IsInArea ( Heike , finalArea ) then
29276: LD_EXP 46
29280: PPUSH
29281: LD_INT 59
29283: PPUSH
29284: CALL_OW 308
29288: NOT
29289: IFFALSE 29300
// begin Query ( HeikeOutOfArea ) ;
29291: LD_STRING HeikeOutOfArea
29293: PPUSH
29294: CALL_OW 97
// exit ;
29298: GO 30317
// end ; if not IsOk ( Heike ) then
29300: LD_EXP 46
29304: PPUSH
29305: CALL_OW 302
29309: NOT
29310: IFFALSE 29321
// begin Query ( HeikeIsHurt ) ;
29312: LD_STRING HeikeIsHurt
29314: PPUSH
29315: CALL_OW 97
// exit ;
29319: GO 30317
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_placed ] , [ f_inarea , finalArea ] ] ) ) < 6 then
29321: LD_INT 22
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 21
29333: PUSH
29334: LD_INT 1
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 52
29343: PUSH
29344: EMPTY
29345: LIST
29346: PUSH
29347: LD_INT 95
29349: PUSH
29350: LD_INT 59
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: PPUSH
29363: CALL_OW 69
29367: PPUSH
29368: CALL 32781 0 1
29372: PUSH
29373: LD_INT 6
29375: LESS
29376: IFFALSE 29385
// YouLost ( NeedMorePep ) ;
29378: LD_STRING NeedMorePep
29380: PPUSH
29381: CALL_OW 104
// if tick < 20 20$00 then
29385: LD_OWVAR 1
29389: PUSH
29390: LD_INT 42000
29392: LESS
29393: IFFALSE 29402
// SetAchievement ( ACH_HSPEED_8 ) ;
29395: LD_STRING ACH_HSPEED_8
29397: PPUSH
29398: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
29402: LD_INT 22
29404: PUSH
29405: LD_INT 5
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 21
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: EMPTY
29419: LIST
29420: LIST
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PPUSH
29426: CALL_OW 69
29430: PUSH
29431: LD_INT 0
29433: EQUAL
29434: IFFALSE 29446
29436: PUSH
29437: LD_EXP 32
29441: PUSH
29442: LD_INT 0
29444: EQUAL
29445: AND
29446: IFFALSE 29468
// begin m1 := true ;
29448: LD_ADDR_VAR 0 3
29452: PUSH
29453: LD_INT 1
29455: ST_TO_ADDR
// AddMedal ( med1 , 1 ) ;
29456: LD_STRING med1
29458: PPUSH
29459: LD_INT 1
29461: PPUSH
29462: CALL_OW 101
// end else
29466: GO 29479
// AddMedal ( med1 , - 1 ) ;
29468: LD_STRING med1
29470: PPUSH
29471: LD_INT 1
29473: NEG
29474: PPUSH
29475: CALL_OW 101
// if explosivePlantedList >= 3 then
29479: LD_EXP 29
29483: PUSH
29484: LD_INT 3
29486: GREATEREQUAL
29487: IFFALSE 29509
// begin m2 := true ;
29489: LD_ADDR_VAR 0 4
29493: PUSH
29494: LD_INT 1
29496: ST_TO_ADDR
// AddMedal ( med2 , 1 ) ;
29497: LD_STRING med2
29499: PPUSH
29500: LD_INT 1
29502: PPUSH
29503: CALL_OW 101
// end else
29507: GO 29543
// if explosivePlantedList < 3 then
29509: LD_EXP 29
29513: PUSH
29514: LD_INT 3
29516: LESS
29517: IFFALSE 29532
// AddMedal ( med2 , - 2 ) else
29519: LD_STRING med2
29521: PPUSH
29522: LD_INT 2
29524: NEG
29525: PPUSH
29526: CALL_OW 101
29530: GO 29543
// AddMedal ( med2 , - 1 ) ;
29532: LD_STRING med2
29534: PPUSH
29535: LD_INT 1
29537: NEG
29538: PPUSH
29539: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
29543: LD_INT 5
29545: PPUSH
29546: LD_INT 2
29548: PPUSH
29549: CALL_OW 321
29553: PUSH
29554: LD_INT 2
29556: EQUAL
29557: IFFALSE 29579
// begin m3 := true ;
29559: LD_ADDR_VAR 0 5
29563: PUSH
29564: LD_INT 1
29566: ST_TO_ADDR
// AddMedal ( med3 , 1 ) ;
29567: LD_STRING med3
29569: PPUSH
29570: LD_INT 1
29572: PPUSH
29573: CALL_OW 101
// end else
29577: GO 29590
// AddMedal ( med3 , - 1 ) ;
29579: LD_STRING med3
29581: PPUSH
29582: LD_INT 1
29584: NEG
29585: PPUSH
29586: CALL_OW 101
// if m1 and m2 and m3 and Difficulty >= 3 then
29590: LD_VAR 0 3
29594: IFFALSE 29602
29596: PUSH
29597: LD_VAR 0 4
29601: AND
29602: IFFALSE 29610
29604: PUSH
29605: LD_VAR 0 5
29609: AND
29610: IFFALSE 29622
29612: PUSH
29613: LD_OWVAR 67
29617: PUSH
29618: LD_INT 3
29620: GREATEREQUAL
29621: AND
29622: IFFALSE 29634
// SetAchievementEX ( ACH_ARES , 8 ) ;
29624: LD_STRING ACH_ARES
29626: PPUSH
29627: LD_INT 8
29629: PPUSH
29630: CALL_OW 564
// GiveMedals ( MAIN ) ;
29634: LD_STRING MAIN
29636: PPUSH
29637: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_placed ] , [ f_inarea , finalArea ] ] ) ;
29641: LD_ADDR_VAR 0 2
29645: PUSH
29646: LD_INT 22
29648: PUSH
29649: LD_INT 2
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: LD_INT 21
29658: PUSH
29659: LD_INT 1
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 52
29668: PUSH
29669: EMPTY
29670: LIST
29671: PUSH
29672: LD_INT 95
29674: PUSH
29675: LD_INT 59
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: PPUSH
29688: CALL_OW 69
29692: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
29693: LD_VAR 0 2
29697: PPUSH
29698: LD_INT 23
29700: PUSH
29701: LD_INT 2
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: PPUSH
29708: CALL_OW 72
29712: PPUSH
29713: CALL_OW 43
// if Doug and Doug in tmp then
29717: LD_EXP 60
29721: IFFALSE 29735
29723: PUSH
29724: LD_EXP 60
29728: PUSH
29729: LD_VAR 0 2
29733: IN
29734: AND
29735: IFFALSE 29749
// SaveCharacters ( Doug , 08_UsCommander ) ;
29737: LD_EXP 60
29741: PPUSH
29742: LD_STRING 08_UsCommander
29744: PPUSH
29745: CALL_OW 38
// if Harris and Harris in tmp then
29749: LD_EXP 59
29753: IFFALSE 29767
29755: PUSH
29756: LD_EXP 59
29760: PUSH
29761: LD_VAR 0 2
29765: IN
29766: AND
29767: IFFALSE 29781
// SaveCharacters ( Harris , 08_Harris ) ;
29769: LD_EXP 59
29773: PPUSH
29774: LD_STRING 08_Harris
29776: PPUSH
29777: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
29781: LD_VAR 0 2
29785: PPUSH
29786: LD_INT 23
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PPUSH
29796: CALL_OW 72
29800: PUSH
29801: LD_EXP 60
29805: PUSH
29806: LD_EXP 59
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: DIFF
29815: PPUSH
29816: LD_STRING 08_Americans
29818: PPUSH
29819: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
29823: LD_EXP 46
29827: PPUSH
29828: CALL_OW 248
29832: PUSH
29833: LD_INT 3
29835: EQUAL
29836: IFFALSE 29866
// begin CopySkills ( Heike , HeikeTmp ) ;
29838: LD_EXP 46
29842: PPUSH
29843: LD_EXP 62
29847: PPUSH
29848: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
29852: LD_EXP 62
29856: PPUSH
29857: LD_STRING 08_Heike
29859: PPUSH
29860: CALL_OW 38
// end else
29864: GO 29878
// SaveCharacters ( Heike , 08_Heike ) ;
29866: LD_EXP 46
29870: PPUSH
29871: LD_STRING 08_Heike
29873: PPUSH
29874: CALL_OW 38
// if Aviradze and Aviradze in tmp then
29878: LD_EXP 56
29882: IFFALSE 29896
29884: PUSH
29885: LD_EXP 56
29889: PUSH
29890: LD_VAR 0 2
29894: IN
29895: AND
29896: IFFALSE 29910
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
29898: LD_EXP 56
29902: PPUSH
29903: LD_STRING 08_Aviradze
29905: PPUSH
29906: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
29910: LD_EXP 49
29914: IFFALSE 29928
29916: PUSH
29917: LD_EXP 49
29921: PUSH
29922: LD_VAR 0 2
29926: IN
29927: AND
29928: IFFALSE 29942
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
29930: LD_EXP 49
29934: PPUSH
29935: LD_STRING 08_Ibrahim
29937: PPUSH
29938: CALL_OW 38
// if Kamil and Kamil in tmp then
29942: LD_EXP 50
29946: IFFALSE 29960
29948: PUSH
29949: LD_EXP 50
29953: PUSH
29954: LD_VAR 0 2
29958: IN
29959: AND
29960: IFFALSE 29974
// SaveCharacters ( Kamil , 08_Kamil ) ;
29962: LD_EXP 50
29966: PPUSH
29967: LD_STRING 08_Kamil
29969: PPUSH
29970: CALL_OW 38
// if Sophia and Sophia in tmp then
29974: LD_EXP 52
29978: IFFALSE 29992
29980: PUSH
29981: LD_EXP 52
29985: PUSH
29986: LD_VAR 0 2
29990: IN
29991: AND
29992: IFFALSE 30006
// SaveCharacters ( Sophia , 08_Sophia ) ;
29994: LD_EXP 52
29998: PPUSH
29999: LD_STRING 08_Sophia
30001: PPUSH
30002: CALL_OW 38
// if Kaia and Kaia in tmp then
30006: LD_EXP 51
30010: IFFALSE 30024
30012: PUSH
30013: LD_EXP 51
30017: PUSH
30018: LD_VAR 0 2
30022: IN
30023: AND
30024: IFFALSE 30038
// SaveCharacters ( Kaia , 08_Kaia ) ;
30026: LD_EXP 51
30030: PPUSH
30031: LD_STRING 08_Kaia
30033: PPUSH
30034: CALL_OW 38
// if Givi and Givi in tmp then
30038: LD_EXP 47
30042: IFFALSE 30056
30044: PUSH
30045: LD_EXP 47
30049: PUSH
30050: LD_VAR 0 2
30054: IN
30055: AND
30056: IFFALSE 30113
// if GetNation ( Givi ) = nation_russian then
30058: LD_EXP 47
30062: PPUSH
30063: CALL_OW 248
30067: PUSH
30068: LD_INT 3
30070: EQUAL
30071: IFFALSE 30101
// begin CopySkills ( Givi , GiviTmp ) ;
30073: LD_EXP 47
30077: PPUSH
30078: LD_EXP 63
30082: PPUSH
30083: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
30087: LD_EXP 63
30091: PPUSH
30092: LD_STRING 08_Givi
30094: PPUSH
30095: CALL_OW 38
// end else
30099: GO 30113
// SaveCharacters ( Givi , 08_Givi ) ;
30101: LD_EXP 47
30105: PPUSH
30106: LD_STRING 08_Givi
30108: PPUSH
30109: CALL_OW 38
// if Mike and Mike in tmp then
30113: LD_EXP 48
30117: IFFALSE 30131
30119: PUSH
30120: LD_EXP 48
30124: PUSH
30125: LD_VAR 0 2
30129: IN
30130: AND
30131: IFFALSE 30145
// SaveCharacters ( Mike , 08_Mike ) ;
30133: LD_EXP 48
30137: PPUSH
30138: LD_STRING 08_Mike
30140: PPUSH
30141: CALL_OW 38
// if Markov and Markov in tmp then
30145: LD_EXP 53
30149: IFFALSE 30163
30151: PUSH
30152: LD_EXP 53
30156: PUSH
30157: LD_VAR 0 2
30161: IN
30162: AND
30163: IFFALSE 30177
// SaveCharacters ( Markov , 08_Markov ) ;
30165: LD_EXP 53
30169: PPUSH
30170: LD_STRING 08_Markov
30172: PPUSH
30173: CALL_OW 38
// if Kurt and Kurt in tmp then
30177: LD_EXP 55
30181: IFFALSE 30195
30183: PUSH
30184: LD_EXP 55
30188: PUSH
30189: LD_VAR 0 2
30193: IN
30194: AND
30195: IFFALSE 30209
// SaveCharacters ( Kurt , 08_Kurt ) ;
30197: LD_EXP 55
30201: PPUSH
30202: LD_STRING 08_Kurt
30204: PPUSH
30205: CALL_OW 38
// if Olaf and Olaf in tmp then
30209: LD_EXP 54
30213: IFFALSE 30227
30215: PUSH
30216: LD_EXP 54
30220: PUSH
30221: LD_VAR 0 2
30225: IN
30226: AND
30227: IFFALSE 30241
// SaveCharacters ( Olaf , 08_Olaf ) ;
30229: LD_EXP 54
30233: PPUSH
30234: LD_STRING 08_Olaf
30236: PPUSH
30237: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_placed ] ] ) then
30241: LD_EXP 57
30245: PPUSH
30246: LD_INT 95
30248: PUSH
30249: LD_INT 59
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 52
30258: PUSH
30259: EMPTY
30260: LIST
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 72
30270: IFFALSE 30309
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_placed ] ] ) , 08_others ) ;
30272: LD_EXP 57
30276: PPUSH
30277: LD_INT 95
30279: PUSH
30280: LD_INT 59
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 52
30289: PUSH
30290: EMPTY
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PPUSH
30297: CALL_OW 72
30301: PPUSH
30302: LD_STRING 08_others
30304: PPUSH
30305: CALL_OW 38
// YouWin ;
30309: CALL_OW 103
// DialogueOff ;
30313: CALL_OW 7
// end ; end_of_file
30317: LD_VAR 0 1
30321: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
30322: LD_EXP 5
30326: IFFALSE 30554
30328: GO 30330
30330: DISABLE
30331: LD_INT 0
30333: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
30334: LD_INT 35
30336: PPUSH
30337: LD_INT 2100
30339: PPUSH
30340: CALL_OW 12
30344: PPUSH
30345: CALL_OW 67
// StopOriginalMusic ;
30349: CALL 96834 0 0
// weatherBusy := true ;
30353: LD_ADDR_EXP 37
30357: PUSH
30358: LD_INT 1
30360: ST_TO_ADDR
// for i := 1 to 3 do
30361: LD_ADDR_VAR 0 1
30365: PUSH
30366: DOUBLE
30367: LD_INT 1
30369: DEC
30370: ST_TO_ADDR
30371: LD_INT 3
30373: PUSH
30374: FOR_TO
30375: IFFALSE 30409
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
30377: LD_INT 1
30379: PPUSH
30380: LD_INT 100
30382: PUSH
30383: LD_INT 100
30385: PUSH
30386: LD_VAR 0 1
30390: MUL
30391: PLUS
30392: PPUSH
30393: LD_INT 60
30395: PPUSH
30396: CALL_OW 550
// wait ( 0 0$2 ) ;
30400: LD_INT 70
30402: PPUSH
30403: CALL_OW 67
// end ;
30407: GO 30374
30409: POP
30410: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
30411: LD_STRING ArStormRain.wav
30413: PPUSH
30414: LD_STRING OW_CUSTOM_COMMAND(103);
30416: PPUSH
30417: CALL 96864 0 2
// wait ( 0 0$3 ) ;
30421: LD_INT 105
30423: PPUSH
30424: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
30428: LD_INT 1
30430: PPUSH
30431: LD_INT 900
30433: PPUSH
30434: LD_INT 120
30436: PPUSH
30437: CALL_OW 550
// wait ( 0 0$10 ) ;
30441: LD_INT 350
30443: PPUSH
30444: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
30448: LD_INT 1
30450: PPUSH
30451: LD_INT 1500
30453: PPUSH
30454: LD_INT 300
30456: PPUSH
30457: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
30461: LD_INT 35
30463: PPUSH
30464: CALL_OW 67
// until not weatherBusy ;
30468: LD_EXP 37
30472: NOT
30473: IFFALSE 30461
// SetWeather ( 0 , 0 , 0 ) ;
30475: LD_INT 0
30477: PPUSH
30478: LD_INT 0
30480: PPUSH
30481: LD_INT 0
30483: PPUSH
30484: CALL_OW 550
// wait ( 0 0$2 ) ;
30488: LD_INT 70
30490: PPUSH
30491: CALL_OW 67
// PlayOriginalMusic ;
30495: CALL 96849 0 0
// wait ( 8 8$30 ) ;
30499: LD_INT 17850
30501: PPUSH
30502: CALL_OW 67
// if isAlarm then
30506: LD_EXP 17
30510: IFFALSE 30514
// exit ;
30512: GO 30554
// StopOriginalMusic ;
30514: CALL 96834 0 0
// weatherBusy := true ;
30518: LD_ADDR_EXP 37
30522: PUSH
30523: LD_INT 1
30525: ST_TO_ADDR
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
30526: LD_STRING ArStormNormal.wav
30528: PPUSH
30529: LD_STRING OW_CUSTOM_COMMAND(103);
30531: PPUSH
30532: CALL 96864 0 2
// repeat wait ( 0 0$1 ) ;
30536: LD_INT 35
30538: PPUSH
30539: CALL_OW 67
// until not weatherBusy ;
30543: LD_EXP 37
30547: NOT
30548: IFFALSE 30536
// PlayOriginalMusic ;
30550: CALL 96849 0 0
// end ; end_of_file
30554: PPOPN 1
30556: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30557: LD_INT 0
30559: PPUSH
30560: PPUSH
// if exist_mode then
30561: LD_VAR 0 2
30565: IFFALSE 30611
// begin unit := CreateCharacter ( prefix & ident ) ;
30567: LD_ADDR_VAR 0 5
30571: PUSH
30572: LD_VAR 0 3
30576: PUSH
30577: LD_VAR 0 1
30581: STR
30582: PPUSH
30583: CALL_OW 34
30587: ST_TO_ADDR
// if unit then
30588: LD_VAR 0 5
30592: IFFALSE 30609
// DeleteCharacters ( prefix & ident ) ;
30594: LD_VAR 0 3
30598: PUSH
30599: LD_VAR 0 1
30603: STR
30604: PPUSH
30605: CALL_OW 40
// end else
30609: GO 30626
// unit := NewCharacter ( ident ) ;
30611: LD_ADDR_VAR 0 5
30615: PUSH
30616: LD_VAR 0 1
30620: PPUSH
30621: CALL_OW 25
30625: ST_TO_ADDR
// result := unit ;
30626: LD_ADDR_VAR 0 4
30630: PUSH
30631: LD_VAR 0 5
30635: ST_TO_ADDR
// end ;
30636: LD_VAR 0 4
30640: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30641: LD_INT 0
30643: PPUSH
30644: PPUSH
// if exist_mode then
30645: LD_VAR 0 2
30649: IFFALSE 30674
// unit := CreateCharacter ( prefix & ident ) else
30651: LD_ADDR_VAR 0 5
30655: PUSH
30656: LD_VAR 0 3
30660: PUSH
30661: LD_VAR 0 1
30665: STR
30666: PPUSH
30667: CALL_OW 34
30671: ST_TO_ADDR
30672: GO 30689
// unit := NewCharacter ( ident ) ;
30674: LD_ADDR_VAR 0 5
30678: PUSH
30679: LD_VAR 0 1
30683: PPUSH
30684: CALL_OW 25
30688: ST_TO_ADDR
// result := unit ;
30689: LD_ADDR_VAR 0 4
30693: PUSH
30694: LD_VAR 0 5
30698: ST_TO_ADDR
// end ;
30699: LD_VAR 0 4
30703: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30704: LD_INT 0
30706: PPUSH
30707: PPUSH
// if not side or not nation then
30708: LD_VAR 0 1
30712: NOT
30713: IFTRUE 30722
30715: PUSH
30716: LD_VAR 0 2
30720: NOT
30721: OR
30722: IFFALSE 30726
// exit ;
30724: GO 31520
// case nation of nation_american :
30726: LD_VAR 0 2
30730: PUSH
30731: LD_INT 1
30733: DOUBLE
30734: EQUAL
30735: IFTRUE 30739
30737: GO 30961
30739: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30740: LD_ADDR_VAR 0 4
30744: PUSH
30745: LD_INT 35
30747: PUSH
30748: LD_INT 45
30750: PUSH
30751: LD_INT 46
30753: PUSH
30754: LD_INT 47
30756: PUSH
30757: LD_INT 82
30759: PUSH
30760: LD_INT 83
30762: PUSH
30763: LD_INT 84
30765: PUSH
30766: LD_INT 85
30768: PUSH
30769: LD_INT 86
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: LD_INT 2
30777: PUSH
30778: LD_INT 6
30780: PUSH
30781: LD_INT 15
30783: PUSH
30784: LD_INT 16
30786: PUSH
30787: LD_INT 7
30789: PUSH
30790: LD_INT 12
30792: PUSH
30793: LD_INT 13
30795: PUSH
30796: LD_INT 10
30798: PUSH
30799: LD_INT 14
30801: PUSH
30802: LD_INT 20
30804: PUSH
30805: LD_INT 21
30807: PUSH
30808: LD_INT 22
30810: PUSH
30811: LD_INT 25
30813: PUSH
30814: LD_INT 32
30816: PUSH
30817: LD_INT 27
30819: PUSH
30820: LD_INT 36
30822: PUSH
30823: LD_INT 69
30825: PUSH
30826: LD_INT 39
30828: PUSH
30829: LD_INT 34
30831: PUSH
30832: LD_INT 40
30834: PUSH
30835: LD_INT 48
30837: PUSH
30838: LD_INT 49
30840: PUSH
30841: LD_INT 50
30843: PUSH
30844: LD_INT 51
30846: PUSH
30847: LD_INT 52
30849: PUSH
30850: LD_INT 53
30852: PUSH
30853: LD_INT 54
30855: PUSH
30856: LD_INT 55
30858: PUSH
30859: LD_INT 56
30861: PUSH
30862: LD_INT 57
30864: PUSH
30865: LD_INT 58
30867: PUSH
30868: LD_INT 59
30870: PUSH
30871: LD_INT 60
30873: PUSH
30874: LD_INT 61
30876: PUSH
30877: LD_INT 62
30879: PUSH
30880: LD_INT 80
30882: PUSH
30883: LD_INT 82
30885: PUSH
30886: LD_INT 83
30888: PUSH
30889: LD_INT 84
30891: PUSH
30892: LD_INT 85
30894: PUSH
30895: LD_INT 86
30897: PUSH
30898: LD_INT 90
30900: PUSH
30901: LD_INT 93
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: ST_TO_ADDR
30959: GO 31442
30961: LD_INT 2
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 30969
30967: GO 31203
30969: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30970: LD_ADDR_VAR 0 4
30974: PUSH
30975: LD_INT 35
30977: PUSH
30978: LD_INT 45
30980: PUSH
30981: LD_INT 46
30983: PUSH
30984: LD_INT 47
30986: PUSH
30987: LD_INT 82
30989: PUSH
30990: LD_INT 83
30992: PUSH
30993: LD_INT 84
30995: PUSH
30996: LD_INT 85
30998: PUSH
30999: LD_INT 87
31001: PUSH
31002: LD_INT 70
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: LD_INT 11
31010: PUSH
31011: LD_INT 3
31013: PUSH
31014: LD_INT 4
31016: PUSH
31017: LD_INT 5
31019: PUSH
31020: LD_INT 6
31022: PUSH
31023: LD_INT 15
31025: PUSH
31026: LD_INT 18
31028: PUSH
31029: LD_INT 7
31031: PUSH
31032: LD_INT 17
31034: PUSH
31035: LD_INT 8
31037: PUSH
31038: LD_INT 20
31040: PUSH
31041: LD_INT 21
31043: PUSH
31044: LD_INT 22
31046: PUSH
31047: LD_INT 72
31049: PUSH
31050: LD_INT 26
31052: PUSH
31053: LD_INT 69
31055: PUSH
31056: LD_INT 39
31058: PUSH
31059: LD_INT 40
31061: PUSH
31062: LD_INT 41
31064: PUSH
31065: LD_INT 42
31067: PUSH
31068: LD_INT 43
31070: PUSH
31071: LD_INT 48
31073: PUSH
31074: LD_INT 49
31076: PUSH
31077: LD_INT 50
31079: PUSH
31080: LD_INT 51
31082: PUSH
31083: LD_INT 52
31085: PUSH
31086: LD_INT 53
31088: PUSH
31089: LD_INT 54
31091: PUSH
31092: LD_INT 55
31094: PUSH
31095: LD_INT 56
31097: PUSH
31098: LD_INT 60
31100: PUSH
31101: LD_INT 61
31103: PUSH
31104: LD_INT 62
31106: PUSH
31107: LD_INT 66
31109: PUSH
31110: LD_INT 67
31112: PUSH
31113: LD_INT 68
31115: PUSH
31116: LD_INT 81
31118: PUSH
31119: LD_INT 82
31121: PUSH
31122: LD_INT 83
31124: PUSH
31125: LD_INT 84
31127: PUSH
31128: LD_INT 85
31130: PUSH
31131: LD_INT 87
31133: PUSH
31134: LD_INT 88
31136: PUSH
31137: LD_INT 92
31139: PUSH
31140: LD_INT 94
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: ST_TO_ADDR
31201: GO 31442
31203: LD_INT 3
31205: DOUBLE
31206: EQUAL
31207: IFTRUE 31211
31209: GO 31441
31211: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
31212: LD_ADDR_VAR 0 4
31216: PUSH
31217: LD_INT 46
31219: PUSH
31220: LD_INT 47
31222: PUSH
31223: LD_INT 1
31225: PUSH
31226: LD_INT 2
31228: PUSH
31229: LD_INT 82
31231: PUSH
31232: LD_INT 83
31234: PUSH
31235: LD_INT 84
31237: PUSH
31238: LD_INT 85
31240: PUSH
31241: LD_INT 86
31243: PUSH
31244: LD_INT 11
31246: PUSH
31247: LD_INT 9
31249: PUSH
31250: LD_INT 20
31252: PUSH
31253: LD_INT 19
31255: PUSH
31256: LD_INT 21
31258: PUSH
31259: LD_INT 24
31261: PUSH
31262: LD_INT 22
31264: PUSH
31265: LD_INT 25
31267: PUSH
31268: LD_INT 28
31270: PUSH
31271: LD_INT 29
31273: PUSH
31274: LD_INT 30
31276: PUSH
31277: LD_INT 31
31279: PUSH
31280: LD_INT 37
31282: PUSH
31283: LD_INT 38
31285: PUSH
31286: LD_INT 32
31288: PUSH
31289: LD_INT 27
31291: PUSH
31292: LD_INT 33
31294: PUSH
31295: LD_INT 69
31297: PUSH
31298: LD_INT 39
31300: PUSH
31301: LD_INT 34
31303: PUSH
31304: LD_INT 40
31306: PUSH
31307: LD_INT 71
31309: PUSH
31310: LD_INT 23
31312: PUSH
31313: LD_INT 44
31315: PUSH
31316: LD_INT 48
31318: PUSH
31319: LD_INT 49
31321: PUSH
31322: LD_INT 50
31324: PUSH
31325: LD_INT 51
31327: PUSH
31328: LD_INT 52
31330: PUSH
31331: LD_INT 53
31333: PUSH
31334: LD_INT 54
31336: PUSH
31337: LD_INT 55
31339: PUSH
31340: LD_INT 56
31342: PUSH
31343: LD_INT 57
31345: PUSH
31346: LD_INT 58
31348: PUSH
31349: LD_INT 59
31351: PUSH
31352: LD_INT 63
31354: PUSH
31355: LD_INT 64
31357: PUSH
31358: LD_INT 65
31360: PUSH
31361: LD_INT 82
31363: PUSH
31364: LD_INT 83
31366: PUSH
31367: LD_INT 84
31369: PUSH
31370: LD_INT 85
31372: PUSH
31373: LD_INT 86
31375: PUSH
31376: LD_INT 89
31378: PUSH
31379: LD_INT 91
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: ST_TO_ADDR
31439: GO 31442
31441: POP
// if state > - 1 and state < 3 then
31442: LD_VAR 0 3
31446: PUSH
31447: LD_INT 1
31449: NEG
31450: GREATER
31451: IFFALSE 31463
31453: PUSH
31454: LD_VAR 0 3
31458: PUSH
31459: LD_INT 3
31461: LESS
31462: AND
31463: IFFALSE 31520
// for i in result do
31465: LD_ADDR_VAR 0 5
31469: PUSH
31470: LD_VAR 0 4
31474: PUSH
31475: FOR_IN
31476: IFFALSE 31518
// if GetTech ( i , side ) <> state then
31478: LD_VAR 0 5
31482: PPUSH
31483: LD_VAR 0 1
31487: PPUSH
31488: CALL_OW 321
31492: PUSH
31493: LD_VAR 0 3
31497: NONEQUAL
31498: IFFALSE 31516
// result := result diff i ;
31500: LD_ADDR_VAR 0 4
31504: PUSH
31505: LD_VAR 0 4
31509: PUSH
31510: LD_VAR 0 5
31514: DIFF
31515: ST_TO_ADDR
31516: GO 31475
31518: POP
31519: POP
// end ;
31520: LD_VAR 0 4
31524: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31525: LD_INT 0
31527: PPUSH
31528: PPUSH
31529: PPUSH
// result := true ;
31530: LD_ADDR_VAR 0 3
31534: PUSH
31535: LD_INT 1
31537: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31538: LD_ADDR_VAR 0 5
31542: PUSH
31543: LD_VAR 0 2
31547: PPUSH
31548: CALL_OW 480
31552: ST_TO_ADDR
// if not tmp then
31553: LD_VAR 0 5
31557: NOT
31558: IFFALSE 31562
// exit ;
31560: GO 31611
// for i in tmp do
31562: LD_ADDR_VAR 0 4
31566: PUSH
31567: LD_VAR 0 5
31571: PUSH
31572: FOR_IN
31573: IFFALSE 31609
// if GetTech ( i , side ) <> state_researched then
31575: LD_VAR 0 4
31579: PPUSH
31580: LD_VAR 0 1
31584: PPUSH
31585: CALL_OW 321
31589: PUSH
31590: LD_INT 2
31592: NONEQUAL
31593: IFFALSE 31607
// begin result := false ;
31595: LD_ADDR_VAR 0 3
31599: PUSH
31600: LD_INT 0
31602: ST_TO_ADDR
// exit ;
31603: POP
31604: POP
31605: GO 31611
// end ;
31607: GO 31572
31609: POP
31610: POP
// end ;
31611: LD_VAR 0 3
31615: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31616: LD_INT 0
31618: PPUSH
31619: PPUSH
31620: PPUSH
31621: PPUSH
31622: PPUSH
31623: PPUSH
31624: PPUSH
31625: PPUSH
31626: PPUSH
31627: PPUSH
31628: PPUSH
31629: PPUSH
31630: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31631: LD_VAR 0 1
31635: NOT
31636: IFTRUE 31653
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 257
31648: PUSH
31649: LD_INT 9
31651: NONEQUAL
31652: OR
31653: IFFALSE 31657
// exit ;
31655: GO 32236
// side := GetSide ( unit ) ;
31657: LD_ADDR_VAR 0 9
31661: PUSH
31662: LD_VAR 0 1
31666: PPUSH
31667: CALL_OW 255
31671: ST_TO_ADDR
// tech_space := tech_spacanom ;
31672: LD_ADDR_VAR 0 12
31676: PUSH
31677: LD_INT 29
31679: ST_TO_ADDR
// tech_time := tech_taurad ;
31680: LD_ADDR_VAR 0 13
31684: PUSH
31685: LD_INT 28
31687: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31688: LD_ADDR_VAR 0 11
31692: PUSH
31693: LD_VAR 0 1
31697: PPUSH
31698: CALL_OW 310
31702: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31703: LD_VAR 0 11
31707: PPUSH
31708: CALL_OW 247
31712: PUSH
31713: LD_INT 2
31715: EQUAL
31716: IFFALSE 31720
// exit ;
31718: GO 32236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31720: LD_ADDR_VAR 0 8
31724: PUSH
31725: LD_INT 81
31727: PUSH
31728: LD_VAR 0 9
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 3
31739: PUSH
31740: LD_INT 21
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PPUSH
31758: CALL_OW 69
31762: ST_TO_ADDR
// if not tmp then
31763: LD_VAR 0 8
31767: NOT
31768: IFFALSE 31772
// exit ;
31770: GO 32236
// if in_unit then
31772: LD_VAR 0 11
31776: IFFALSE 31800
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31778: LD_ADDR_VAR 0 10
31782: PUSH
31783: LD_VAR 0 8
31787: PPUSH
31788: LD_VAR 0 11
31792: PPUSH
31793: CALL_OW 74
31797: ST_TO_ADDR
31798: GO 31820
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31800: LD_ADDR_VAR 0 10
31804: PUSH
31805: LD_VAR 0 8
31809: PPUSH
31810: LD_VAR 0 1
31814: PPUSH
31815: CALL_OW 74
31819: ST_TO_ADDR
// if not enemy then
31820: LD_VAR 0 10
31824: NOT
31825: IFFALSE 31829
// exit ;
31827: GO 32236
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31829: LD_VAR 0 11
31833: IFFALSE 31855
31835: PUSH
31836: LD_VAR 0 11
31840: PPUSH
31841: LD_VAR 0 10
31845: PPUSH
31846: CALL_OW 296
31850: PUSH
31851: LD_INT 13
31853: GREATER
31854: AND
31855: IFTRUE 31877
31857: PUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: LD_VAR 0 10
31867: PPUSH
31868: CALL_OW 296
31872: PUSH
31873: LD_INT 12
31875: GREATER
31876: OR
31877: IFFALSE 31881
// exit ;
31879: GO 32236
// missile := [ 1 ] ;
31881: LD_ADDR_VAR 0 14
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: EMPTY
31890: LIST
31891: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31892: LD_VAR 0 9
31896: PPUSH
31897: LD_VAR 0 12
31901: PPUSH
31902: CALL_OW 325
31906: IFFALSE 31935
// missile := Replace ( missile , missile + 1 , 2 ) ;
31908: LD_ADDR_VAR 0 14
31912: PUSH
31913: LD_VAR 0 14
31917: PPUSH
31918: LD_VAR 0 14
31922: PUSH
31923: LD_INT 1
31925: PLUS
31926: PPUSH
31927: LD_INT 2
31929: PPUSH
31930: CALL_OW 1
31934: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31935: LD_VAR 0 9
31939: PPUSH
31940: LD_VAR 0 13
31944: PPUSH
31945: CALL_OW 325
31949: IFFALSE 31973
31951: PUSH
31952: LD_VAR 0 10
31956: PPUSH
31957: CALL_OW 255
31961: PPUSH
31962: LD_VAR 0 13
31966: PPUSH
31967: CALL_OW 325
31971: NOT
31972: AND
31973: IFFALSE 32002
// missile := Replace ( missile , missile + 1 , 3 ) ;
31975: LD_ADDR_VAR 0 14
31979: PUSH
31980: LD_VAR 0 14
31984: PPUSH
31985: LD_VAR 0 14
31989: PUSH
31990: LD_INT 1
31992: PLUS
31993: PPUSH
31994: LD_INT 3
31996: PPUSH
31997: CALL_OW 1
32001: ST_TO_ADDR
// if missile < 2 then
32002: LD_VAR 0 14
32006: PUSH
32007: LD_INT 2
32009: LESS
32010: IFFALSE 32014
// exit ;
32012: GO 32236
// x := GetX ( enemy ) ;
32014: LD_ADDR_VAR 0 4
32018: PUSH
32019: LD_VAR 0 10
32023: PPUSH
32024: CALL_OW 250
32028: ST_TO_ADDR
// y := GetY ( enemy ) ;
32029: LD_ADDR_VAR 0 5
32033: PUSH
32034: LD_VAR 0 10
32038: PPUSH
32039: CALL_OW 251
32043: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32044: LD_ADDR_VAR 0 6
32048: PUSH
32049: LD_VAR 0 4
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PPUSH
32058: LD_INT 1
32060: PPUSH
32061: CALL_OW 12
32065: PLUS
32066: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32067: LD_ADDR_VAR 0 7
32071: PUSH
32072: LD_VAR 0 5
32076: PUSH
32077: LD_INT 1
32079: NEG
32080: PPUSH
32081: LD_INT 1
32083: PPUSH
32084: CALL_OW 12
32088: PLUS
32089: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32090: LD_VAR 0 6
32094: PPUSH
32095: LD_VAR 0 7
32099: PPUSH
32100: CALL_OW 488
32104: NOT
32105: IFFALSE 32127
// begin _x := x ;
32107: LD_ADDR_VAR 0 6
32111: PUSH
32112: LD_VAR 0 4
32116: ST_TO_ADDR
// _y := y ;
32117: LD_ADDR_VAR 0 7
32121: PUSH
32122: LD_VAR 0 5
32126: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32127: LD_ADDR_VAR 0 3
32131: PUSH
32132: LD_INT 1
32134: PPUSH
32135: LD_VAR 0 14
32139: PPUSH
32140: CALL_OW 12
32144: ST_TO_ADDR
// case i of 1 :
32145: LD_VAR 0 3
32149: PUSH
32150: LD_INT 1
32152: DOUBLE
32153: EQUAL
32154: IFTRUE 32158
32156: GO 32175
32158: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32159: LD_VAR 0 1
32163: PPUSH
32164: LD_VAR 0 10
32168: PPUSH
32169: CALL_OW 115
32173: GO 32236
32175: LD_INT 2
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32205
32183: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32184: LD_VAR 0 1
32188: PPUSH
32189: LD_VAR 0 6
32193: PPUSH
32194: LD_VAR 0 7
32198: PPUSH
32199: CALL_OW 153
32203: GO 32236
32205: LD_INT 3
32207: DOUBLE
32208: EQUAL
32209: IFTRUE 32213
32211: GO 32235
32213: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32214: LD_VAR 0 1
32218: PPUSH
32219: LD_VAR 0 6
32223: PPUSH
32224: LD_VAR 0 7
32228: PPUSH
32229: CALL_OW 154
32233: GO 32236
32235: POP
// end ;
32236: LD_VAR 0 2
32240: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32241: LD_INT 0
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
32248: PPUSH
// if not unit or not building then
32249: LD_VAR 0 1
32253: NOT
32254: IFTRUE 32263
32256: PUSH
32257: LD_VAR 0 2
32261: NOT
32262: OR
32263: IFFALSE 32267
// exit ;
32265: GO 32425
// x := GetX ( building ) ;
32267: LD_ADDR_VAR 0 5
32271: PUSH
32272: LD_VAR 0 2
32276: PPUSH
32277: CALL_OW 250
32281: ST_TO_ADDR
// y := GetY ( building ) ;
32282: LD_ADDR_VAR 0 6
32286: PUSH
32287: LD_VAR 0 2
32291: PPUSH
32292: CALL_OW 251
32296: ST_TO_ADDR
// for i := 0 to 5 do
32297: LD_ADDR_VAR 0 4
32301: PUSH
32302: DOUBLE
32303: LD_INT 0
32305: DEC
32306: ST_TO_ADDR
32307: LD_INT 5
32309: PUSH
32310: FOR_TO
32311: IFFALSE 32423
// begin _x := ShiftX ( x , i , 3 ) ;
32313: LD_ADDR_VAR 0 7
32317: PUSH
32318: LD_VAR 0 5
32322: PPUSH
32323: LD_VAR 0 4
32327: PPUSH
32328: LD_INT 3
32330: PPUSH
32331: CALL_OW 272
32335: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32336: LD_ADDR_VAR 0 8
32340: PUSH
32341: LD_VAR 0 6
32345: PPUSH
32346: LD_VAR 0 4
32350: PPUSH
32351: LD_INT 3
32353: PPUSH
32354: CALL_OW 273
32358: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32359: LD_VAR 0 7
32363: PPUSH
32364: LD_VAR 0 8
32368: PPUSH
32369: CALL_OW 488
32373: NOT
32374: IFFALSE 32378
// continue ;
32376: GO 32310
// if HexInfo ( _x , _y ) = 0 then
32378: LD_VAR 0 7
32382: PPUSH
32383: LD_VAR 0 8
32387: PPUSH
32388: CALL_OW 428
32392: PUSH
32393: LD_INT 0
32395: EQUAL
32396: IFFALSE 32421
// begin ComMoveXY ( unit , _x , _y ) ;
32398: LD_VAR 0 1
32402: PPUSH
32403: LD_VAR 0 7
32407: PPUSH
32408: LD_VAR 0 8
32412: PPUSH
32413: CALL_OW 111
// exit ;
32417: POP
32418: POP
32419: GO 32425
// end ; end ;
32421: GO 32310
32423: POP
32424: POP
// end ;
32425: LD_VAR 0 3
32429: RET
// export function ScanBase ( side , base_area ) ; begin
32430: LD_INT 0
32432: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_VAR 0 2
32442: PPUSH
32443: LD_INT 81
32445: PUSH
32446: LD_VAR 0 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PPUSH
32455: CALL_OW 70
32459: ST_TO_ADDR
// end ;
32460: LD_VAR 0 3
32464: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32465: LD_INT 0
32467: PPUSH
32468: PPUSH
32469: PPUSH
32470: PPUSH
// result := false ;
32471: LD_ADDR_VAR 0 2
32475: PUSH
32476: LD_INT 0
32478: ST_TO_ADDR
// side := GetSide ( unit ) ;
32479: LD_ADDR_VAR 0 3
32483: PUSH
32484: LD_VAR 0 1
32488: PPUSH
32489: CALL_OW 255
32493: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32494: LD_ADDR_VAR 0 4
32498: PUSH
32499: LD_VAR 0 1
32503: PPUSH
32504: CALL_OW 248
32508: ST_TO_ADDR
// case nat of 1 :
32509: LD_VAR 0 4
32513: PUSH
32514: LD_INT 1
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32533
32522: POP
// tech := tech_lassight ; 2 :
32523: LD_ADDR_VAR 0 5
32527: PUSH
32528: LD_INT 12
32530: ST_TO_ADDR
32531: GO 32572
32533: LD_INT 2
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32552
32541: POP
// tech := tech_mortar ; 3 :
32542: LD_ADDR_VAR 0 5
32546: PUSH
32547: LD_INT 41
32549: ST_TO_ADDR
32550: GO 32572
32552: LD_INT 3
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// tech := tech_bazooka ; end ;
32561: LD_ADDR_VAR 0 5
32565: PUSH
32566: LD_INT 44
32568: ST_TO_ADDR
32569: GO 32572
32571: POP
// if Researched ( side , tech ) then
32572: LD_VAR 0 3
32576: PPUSH
32577: LD_VAR 0 5
32581: PPUSH
32582: CALL_OW 325
32586: IFFALSE 32613
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32588: LD_ADDR_VAR 0 2
32592: PUSH
32593: LD_INT 5
32595: PUSH
32596: LD_INT 8
32598: PUSH
32599: LD_INT 9
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: PUSH
32607: LD_VAR 0 4
32611: ARRAY
32612: ST_TO_ADDR
// end ;
32613: LD_VAR 0 2
32617: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32618: LD_INT 0
32620: PPUSH
32621: PPUSH
32622: PPUSH
// if not mines then
32623: LD_VAR 0 2
32627: NOT
32628: IFFALSE 32632
// exit ;
32630: GO 32776
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32632: LD_ADDR_VAR 0 5
32636: PUSH
32637: LD_INT 81
32639: PUSH
32640: LD_VAR 0 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: LD_INT 21
32654: PUSH
32655: LD_INT 3
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PPUSH
32670: CALL_OW 69
32674: ST_TO_ADDR
// for i in mines do
32675: LD_ADDR_VAR 0 4
32679: PUSH
32680: LD_VAR 0 2
32684: PUSH
32685: FOR_IN
32686: IFFALSE 32774
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32688: LD_VAR 0 4
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PPUSH
32697: LD_VAR 0 4
32701: PUSH
32702: LD_INT 2
32704: ARRAY
32705: PPUSH
32706: CALL_OW 458
32710: NOT
32711: IFFALSE 32715
// continue ;
32713: GO 32685
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32715: LD_VAR 0 4
32719: PUSH
32720: LD_INT 1
32722: ARRAY
32723: PPUSH
32724: LD_VAR 0 4
32728: PUSH
32729: LD_INT 2
32731: ARRAY
32732: PPUSH
32733: CALL_OW 428
32737: PUSH
32738: LD_VAR 0 5
32742: IN
32743: IFFALSE 32772
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32745: LD_VAR 0 4
32749: PUSH
32750: LD_INT 1
32752: ARRAY
32753: PPUSH
32754: LD_VAR 0 4
32758: PUSH
32759: LD_INT 2
32761: ARRAY
32762: PPUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 456
// end ;
32772: GO 32685
32774: POP
32775: POP
// end ;
32776: LD_VAR 0 3
32780: RET
// export function Count ( array ) ; begin
32781: LD_INT 0
32783: PPUSH
// result := array + 0 ;
32784: LD_ADDR_VAR 0 2
32788: PUSH
32789: LD_VAR 0 1
32793: PUSH
32794: LD_INT 0
32796: PLUS
32797: ST_TO_ADDR
// end ;
32798: LD_VAR 0 2
32802: RET
// export function IsEmpty ( building ) ; begin
32803: LD_INT 0
32805: PPUSH
// if not building then
32806: LD_VAR 0 1
32810: NOT
32811: IFFALSE 32815
// exit ;
32813: GO 32858
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32815: LD_ADDR_VAR 0 2
32819: PUSH
32820: LD_VAR 0 1
32824: PUSH
32825: LD_INT 22
32827: PUSH
32828: LD_VAR 0 1
32832: PPUSH
32833: CALL_OW 255
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 58
32844: PUSH
32845: EMPTY
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PPUSH
32852: CALL_OW 69
32856: IN
32857: ST_TO_ADDR
// end ;
32858: LD_VAR 0 2
32862: RET
// export function IsNotFull ( building ) ; var places ; begin
32863: LD_INT 0
32865: PPUSH
32866: PPUSH
// if not building then
32867: LD_VAR 0 1
32871: NOT
32872: IFFALSE 32876
// exit ;
32874: GO 32904
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32876: LD_ADDR_VAR 0 2
32880: PUSH
32881: LD_VAR 0 1
32885: PPUSH
32886: LD_INT 3
32888: PUSH
32889: LD_INT 62
32891: PUSH
32892: EMPTY
32893: LIST
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PPUSH
32899: CALL_OW 72
32903: ST_TO_ADDR
// end ;
32904: LD_VAR 0 2
32908: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32909: LD_INT 0
32911: PPUSH
32912: PPUSH
32913: PPUSH
32914: PPUSH
// tmp := [ ] ;
32915: LD_ADDR_VAR 0 3
32919: PUSH
32920: EMPTY
32921: ST_TO_ADDR
// list := [ ] ;
32922: LD_ADDR_VAR 0 5
32926: PUSH
32927: EMPTY
32928: ST_TO_ADDR
// for i = 16 to 25 do
32929: LD_ADDR_VAR 0 4
32933: PUSH
32934: DOUBLE
32935: LD_INT 16
32937: DEC
32938: ST_TO_ADDR
32939: LD_INT 25
32941: PUSH
32942: FOR_TO
32943: IFFALSE 33016
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32945: LD_ADDR_VAR 0 3
32949: PUSH
32950: LD_VAR 0 3
32954: PUSH
32955: LD_INT 22
32957: PUSH
32958: LD_VAR 0 1
32962: PPUSH
32963: CALL_OW 255
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 91
32974: PUSH
32975: LD_VAR 0 1
32979: PUSH
32980: LD_INT 6
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 30
32990: PUSH
32991: LD_VAR 0 4
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: LIST
33004: PUSH
33005: EMPTY
33006: LIST
33007: PPUSH
33008: CALL_OW 69
33012: ADD
33013: ST_TO_ADDR
33014: GO 32942
33016: POP
33017: POP
// for i = 1 to tmp do
33018: LD_ADDR_VAR 0 4
33022: PUSH
33023: DOUBLE
33024: LD_INT 1
33026: DEC
33027: ST_TO_ADDR
33028: LD_VAR 0 3
33032: PUSH
33033: FOR_TO
33034: IFFALSE 33122
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33036: LD_ADDR_VAR 0 5
33040: PUSH
33041: LD_VAR 0 5
33045: PUSH
33046: LD_VAR 0 3
33050: PUSH
33051: LD_VAR 0 4
33055: ARRAY
33056: PPUSH
33057: CALL_OW 266
33061: PUSH
33062: LD_VAR 0 3
33066: PUSH
33067: LD_VAR 0 4
33071: ARRAY
33072: PPUSH
33073: CALL_OW 250
33077: PUSH
33078: LD_VAR 0 3
33082: PUSH
33083: LD_VAR 0 4
33087: ARRAY
33088: PPUSH
33089: CALL_OW 251
33093: PUSH
33094: LD_VAR 0 3
33098: PUSH
33099: LD_VAR 0 4
33103: ARRAY
33104: PPUSH
33105: CALL_OW 254
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: EMPTY
33117: LIST
33118: ADD
33119: ST_TO_ADDR
33120: GO 33033
33122: POP
33123: POP
// result := list ;
33124: LD_ADDR_VAR 0 2
33128: PUSH
33129: LD_VAR 0 5
33133: ST_TO_ADDR
// end ;
33134: LD_VAR 0 2
33138: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33139: LD_INT 0
33141: PPUSH
33142: PPUSH
33143: PPUSH
33144: PPUSH
33145: PPUSH
33146: PPUSH
33147: PPUSH
// if not factory then
33148: LD_VAR 0 1
33152: NOT
33153: IFFALSE 33157
// exit ;
33155: GO 33760
// if control = control_apeman then
33157: LD_VAR 0 4
33161: PUSH
33162: LD_INT 5
33164: EQUAL
33165: IFFALSE 33274
// begin tmp := UnitsInside ( factory ) ;
33167: LD_ADDR_VAR 0 8
33171: PUSH
33172: LD_VAR 0 1
33176: PPUSH
33177: CALL_OW 313
33181: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33182: LD_VAR 0 8
33186: PPUSH
33187: LD_INT 25
33189: PUSH
33190: LD_INT 12
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PPUSH
33197: CALL_OW 72
33201: NOT
33202: IFFALSE 33212
// control := control_manual ;
33204: LD_ADDR_VAR 0 4
33208: PUSH
33209: LD_INT 1
33211: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33212: LD_ADDR_VAR 0 8
33216: PUSH
33217: LD_VAR 0 1
33221: PPUSH
33222: CALL 32909 0 1
33226: ST_TO_ADDR
// if tmp then
33227: LD_VAR 0 8
33231: IFFALSE 33274
// begin for i in tmp do
33233: LD_ADDR_VAR 0 7
33237: PUSH
33238: LD_VAR 0 8
33242: PUSH
33243: FOR_IN
33244: IFFALSE 33272
// if i [ 1 ] = b_ext_radio then
33246: LD_VAR 0 7
33250: PUSH
33251: LD_INT 1
33253: ARRAY
33254: PUSH
33255: LD_INT 22
33257: EQUAL
33258: IFFALSE 33270
// begin control := control_remote ;
33260: LD_ADDR_VAR 0 4
33264: PUSH
33265: LD_INT 2
33267: ST_TO_ADDR
// break ;
33268: GO 33272
// end ;
33270: GO 33243
33272: POP
33273: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33274: LD_VAR 0 1
33278: PPUSH
33279: LD_VAR 0 2
33283: PPUSH
33284: LD_VAR 0 3
33288: PPUSH
33289: LD_VAR 0 4
33293: PPUSH
33294: LD_VAR 0 5
33298: PPUSH
33299: CALL_OW 448
33303: IFFALSE 33338
// begin result := [ chassis , engine , control , weapon ] ;
33305: LD_ADDR_VAR 0 6
33309: PUSH
33310: LD_VAR 0 2
33314: PUSH
33315: LD_VAR 0 3
33319: PUSH
33320: LD_VAR 0 4
33324: PUSH
33325: LD_VAR 0 5
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// exit ;
33336: GO 33760
// end ; _chassis := AvailableChassisList ( factory ) ;
33338: LD_ADDR_VAR 0 9
33342: PUSH
33343: LD_VAR 0 1
33347: PPUSH
33348: CALL_OW 475
33352: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33353: LD_ADDR_VAR 0 11
33357: PUSH
33358: LD_VAR 0 1
33362: PPUSH
33363: CALL_OW 476
33367: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33368: LD_ADDR_VAR 0 12
33372: PUSH
33373: LD_VAR 0 1
33377: PPUSH
33378: CALL_OW 477
33382: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33383: LD_ADDR_VAR 0 10
33387: PUSH
33388: LD_VAR 0 1
33392: PPUSH
33393: CALL_OW 478
33397: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33398: LD_VAR 0 9
33402: NOT
33403: IFTRUE 33412
33405: PUSH
33406: LD_VAR 0 11
33410: NOT
33411: OR
33412: IFTRUE 33421
33414: PUSH
33415: LD_VAR 0 12
33419: NOT
33420: OR
33421: IFTRUE 33430
33423: PUSH
33424: LD_VAR 0 10
33428: NOT
33429: OR
33430: IFFALSE 33465
// begin result := [ chassis , engine , control , weapon ] ;
33432: LD_ADDR_VAR 0 6
33436: PUSH
33437: LD_VAR 0 2
33441: PUSH
33442: LD_VAR 0 3
33446: PUSH
33447: LD_VAR 0 4
33451: PUSH
33452: LD_VAR 0 5
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: ST_TO_ADDR
// exit ;
33463: GO 33760
// end ; if not chassis in _chassis then
33465: LD_VAR 0 2
33469: PUSH
33470: LD_VAR 0 9
33474: IN
33475: NOT
33476: IFFALSE 33502
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33478: LD_ADDR_VAR 0 2
33482: PUSH
33483: LD_VAR 0 9
33487: PUSH
33488: LD_INT 1
33490: PPUSH
33491: LD_VAR 0 9
33495: PPUSH
33496: CALL_OW 12
33500: ARRAY
33501: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33502: LD_VAR 0 2
33506: PPUSH
33507: LD_VAR 0 3
33511: PPUSH
33512: CALL 33765 0 2
33516: NOT
33517: IFFALSE 33578
// repeat engine := _engine [ 1 ] ;
33519: LD_ADDR_VAR 0 3
33523: PUSH
33524: LD_VAR 0 11
33528: PUSH
33529: LD_INT 1
33531: ARRAY
33532: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33533: LD_ADDR_VAR 0 11
33537: PUSH
33538: LD_VAR 0 11
33542: PPUSH
33543: LD_INT 1
33545: PPUSH
33546: CALL_OW 3
33550: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33551: LD_VAR 0 2
33555: PPUSH
33556: LD_VAR 0 3
33560: PPUSH
33561: CALL 33765 0 2
33565: IFTRUE 33576
33567: PUSH
33568: LD_VAR 0 11
33572: PUSH
33573: EMPTY
33574: EQUAL
33575: OR
33576: IFFALSE 33519
// if not control in _control then
33578: LD_VAR 0 4
33582: PUSH
33583: LD_VAR 0 12
33587: IN
33588: NOT
33589: IFFALSE 33615
// control := _control [ rand ( 1 , _control ) ] ;
33591: LD_ADDR_VAR 0 4
33595: PUSH
33596: LD_VAR 0 12
33600: PUSH
33601: LD_INT 1
33603: PPUSH
33604: LD_VAR 0 12
33608: PPUSH
33609: CALL_OW 12
33613: ARRAY
33614: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33615: LD_VAR 0 2
33619: PPUSH
33620: LD_VAR 0 5
33624: PPUSH
33625: CALL 33987 0 2
33629: NOT
33630: IFFALSE 33691
// repeat weapon := _weapon [ 1 ] ;
33632: LD_ADDR_VAR 0 5
33636: PUSH
33637: LD_VAR 0 10
33641: PUSH
33642: LD_INT 1
33644: ARRAY
33645: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33646: LD_ADDR_VAR 0 10
33650: PUSH
33651: LD_VAR 0 10
33655: PPUSH
33656: LD_INT 1
33658: PPUSH
33659: CALL_OW 3
33663: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33664: LD_VAR 0 2
33668: PPUSH
33669: LD_VAR 0 5
33673: PPUSH
33674: CALL 33987 0 2
33678: IFTRUE 33689
33680: PUSH
33681: LD_VAR 0 10
33685: PUSH
33686: EMPTY
33687: EQUAL
33688: OR
33689: IFFALSE 33632
// result := [ ] ;
33691: LD_ADDR_VAR 0 6
33695: PUSH
33696: EMPTY
33697: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33698: LD_VAR 0 1
33702: PPUSH
33703: LD_VAR 0 2
33707: PPUSH
33708: LD_VAR 0 3
33712: PPUSH
33713: LD_VAR 0 4
33717: PPUSH
33718: LD_VAR 0 5
33722: PPUSH
33723: CALL_OW 448
33727: IFFALSE 33760
// result := [ chassis , engine , control , weapon ] ;
33729: LD_ADDR_VAR 0 6
33733: PUSH
33734: LD_VAR 0 2
33738: PUSH
33739: LD_VAR 0 3
33743: PUSH
33744: LD_VAR 0 4
33748: PUSH
33749: LD_VAR 0 5
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: ST_TO_ADDR
// end ;
33760: LD_VAR 0 6
33764: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33765: LD_INT 0
33767: PPUSH
// if not chassis or not engine then
33768: LD_VAR 0 1
33772: NOT
33773: IFTRUE 33782
33775: PUSH
33776: LD_VAR 0 2
33780: NOT
33781: OR
33782: IFFALSE 33786
// exit ;
33784: GO 33982
// case engine of engine_solar :
33786: LD_VAR 0 2
33790: PUSH
33791: LD_INT 2
33793: DOUBLE
33794: EQUAL
33795: IFTRUE 33799
33797: GO 33837
33799: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_INT 11
33807: PUSH
33808: LD_INT 12
33810: PUSH
33811: LD_INT 13
33813: PUSH
33814: LD_INT 14
33816: PUSH
33817: LD_INT 1
33819: PUSH
33820: LD_INT 2
33822: PUSH
33823: LD_INT 3
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: ST_TO_ADDR
33835: GO 33966
33837: LD_INT 1
33839: DOUBLE
33840: EQUAL
33841: IFTRUE 33845
33843: GO 33907
33845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33846: LD_ADDR_VAR 0 3
33850: PUSH
33851: LD_INT 11
33853: PUSH
33854: LD_INT 12
33856: PUSH
33857: LD_INT 13
33859: PUSH
33860: LD_INT 14
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 2
33868: PUSH
33869: LD_INT 3
33871: PUSH
33872: LD_INT 4
33874: PUSH
33875: LD_INT 5
33877: PUSH
33878: LD_INT 21
33880: PUSH
33881: LD_INT 23
33883: PUSH
33884: LD_INT 22
33886: PUSH
33887: LD_INT 24
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: ST_TO_ADDR
33905: GO 33966
33907: LD_INT 3
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 33965
33915: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33916: LD_ADDR_VAR 0 3
33920: PUSH
33921: LD_INT 13
33923: PUSH
33924: LD_INT 14
33926: PUSH
33927: LD_INT 2
33929: PUSH
33930: LD_INT 3
33932: PUSH
33933: LD_INT 4
33935: PUSH
33936: LD_INT 5
33938: PUSH
33939: LD_INT 21
33941: PUSH
33942: LD_INT 22
33944: PUSH
33945: LD_INT 23
33947: PUSH
33948: LD_INT 24
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: ST_TO_ADDR
33963: GO 33966
33965: POP
// result := ( chassis in result ) ;
33966: LD_ADDR_VAR 0 3
33970: PUSH
33971: LD_VAR 0 1
33975: PUSH
33976: LD_VAR 0 3
33980: IN
33981: ST_TO_ADDR
// end ;
33982: LD_VAR 0 3
33986: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33987: LD_INT 0
33989: PPUSH
// if not chassis or not weapon then
33990: LD_VAR 0 1
33994: NOT
33995: IFTRUE 34004
33997: PUSH
33998: LD_VAR 0 2
34002: NOT
34003: OR
34004: IFFALSE 34008
// exit ;
34006: GO 35102
// case weapon of us_machine_gun :
34008: LD_VAR 0 2
34012: PUSH
34013: LD_INT 2
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34021
34019: GO 34051
34021: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: LD_INT 5
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: ST_TO_ADDR
34049: GO 35086
34051: LD_INT 3
34053: DOUBLE
34054: EQUAL
34055: IFTRUE 34059
34057: GO 34089
34059: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34060: LD_ADDR_VAR 0 3
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: LD_INT 5
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: ST_TO_ADDR
34087: GO 35086
34089: LD_INT 11
34091: DOUBLE
34092: EQUAL
34093: IFTRUE 34097
34095: GO 34127
34097: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34098: LD_ADDR_VAR 0 3
34102: PUSH
34103: LD_INT 1
34105: PUSH
34106: LD_INT 2
34108: PUSH
34109: LD_INT 3
34111: PUSH
34112: LD_INT 4
34114: PUSH
34115: LD_INT 5
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: ST_TO_ADDR
34125: GO 35086
34127: LD_INT 4
34129: DOUBLE
34130: EQUAL
34131: IFTRUE 34135
34133: GO 34161
34135: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34136: LD_ADDR_VAR 0 3
34140: PUSH
34141: LD_INT 2
34143: PUSH
34144: LD_INT 3
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: LD_INT 5
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: ST_TO_ADDR
34159: GO 35086
34161: LD_INT 5
34163: DOUBLE
34164: EQUAL
34165: IFTRUE 34169
34167: GO 34195
34169: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: LD_INT 3
34180: PUSH
34181: LD_INT 4
34183: PUSH
34184: LD_INT 5
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: ST_TO_ADDR
34193: GO 35086
34195: LD_INT 9
34197: DOUBLE
34198: EQUAL
34199: IFTRUE 34203
34201: GO 34229
34203: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34204: LD_ADDR_VAR 0 3
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: LD_INT 3
34214: PUSH
34215: LD_INT 4
34217: PUSH
34218: LD_INT 5
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: ST_TO_ADDR
34227: GO 35086
34229: LD_INT 7
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34237
34235: GO 34263
34237: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34238: LD_ADDR_VAR 0 3
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: LD_INT 4
34251: PUSH
34252: LD_INT 5
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: ST_TO_ADDR
34261: GO 35086
34263: LD_INT 12
34265: DOUBLE
34266: EQUAL
34267: IFTRUE 34271
34269: GO 34297
34271: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34272: LD_ADDR_VAR 0 3
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: LD_INT 3
34282: PUSH
34283: LD_INT 4
34285: PUSH
34286: LD_INT 5
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: ST_TO_ADDR
34295: GO 35086
34297: LD_INT 13
34299: DOUBLE
34300: EQUAL
34301: IFTRUE 34305
34303: GO 34331
34305: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34306: LD_ADDR_VAR 0 3
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 4
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
34329: GO 35086
34331: LD_INT 14
34333: DOUBLE
34334: EQUAL
34335: IFTRUE 34339
34337: GO 34357
34339: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34340: LD_ADDR_VAR 0 3
34344: PUSH
34345: LD_INT 4
34347: PUSH
34348: LD_INT 5
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: ST_TO_ADDR
34355: GO 35086
34357: LD_INT 6
34359: DOUBLE
34360: EQUAL
34361: IFTRUE 34365
34363: GO 34383
34365: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34366: LD_ADDR_VAR 0 3
34370: PUSH
34371: LD_INT 4
34373: PUSH
34374: LD_INT 5
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: ST_TO_ADDR
34381: GO 35086
34383: LD_INT 10
34385: DOUBLE
34386: EQUAL
34387: IFTRUE 34391
34389: GO 34409
34391: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34392: LD_ADDR_VAR 0 3
34396: PUSH
34397: LD_INT 4
34399: PUSH
34400: LD_INT 5
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: ST_TO_ADDR
34407: GO 35086
34409: LD_INT 22
34411: DOUBLE
34412: EQUAL
34413: IFTRUE 34417
34415: GO 34443
34417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34418: LD_ADDR_VAR 0 3
34422: PUSH
34423: LD_INT 11
34425: PUSH
34426: LD_INT 12
34428: PUSH
34429: LD_INT 13
34431: PUSH
34432: LD_INT 14
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: ST_TO_ADDR
34441: GO 35086
34443: LD_INT 23
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34477
34451: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 11
34459: PUSH
34460: LD_INT 12
34462: PUSH
34463: LD_INT 13
34465: PUSH
34466: LD_INT 14
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: ST_TO_ADDR
34475: GO 35086
34477: LD_INT 24
34479: DOUBLE
34480: EQUAL
34481: IFTRUE 34485
34483: GO 34511
34485: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34486: LD_ADDR_VAR 0 3
34490: PUSH
34491: LD_INT 11
34493: PUSH
34494: LD_INT 12
34496: PUSH
34497: LD_INT 13
34499: PUSH
34500: LD_INT 14
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
34509: GO 35086
34511: LD_INT 30
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34545
34519: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34520: LD_ADDR_VAR 0 3
34524: PUSH
34525: LD_INT 11
34527: PUSH
34528: LD_INT 12
34530: PUSH
34531: LD_INT 13
34533: PUSH
34534: LD_INT 14
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: ST_TO_ADDR
34543: GO 35086
34545: LD_INT 25
34547: DOUBLE
34548: EQUAL
34549: IFTRUE 34553
34551: GO 34571
34553: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34554: LD_ADDR_VAR 0 3
34558: PUSH
34559: LD_INT 13
34561: PUSH
34562: LD_INT 14
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: ST_TO_ADDR
34569: GO 35086
34571: LD_INT 27
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34597
34579: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34580: LD_ADDR_VAR 0 3
34584: PUSH
34585: LD_INT 13
34587: PUSH
34588: LD_INT 14
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: ST_TO_ADDR
34595: GO 35086
34597: LD_INT 92
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34605
34603: GO 34631
34605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34606: LD_ADDR_VAR 0 3
34610: PUSH
34611: LD_INT 11
34613: PUSH
34614: LD_INT 12
34616: PUSH
34617: LD_INT 13
34619: PUSH
34620: LD_INT 14
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: ST_TO_ADDR
34629: GO 35086
34631: LD_INT 28
34633: DOUBLE
34634: EQUAL
34635: IFTRUE 34639
34637: GO 34657
34639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34640: LD_ADDR_VAR 0 3
34644: PUSH
34645: LD_INT 13
34647: PUSH
34648: LD_INT 14
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: ST_TO_ADDR
34655: GO 35086
34657: LD_INT 29
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34683
34665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34666: LD_ADDR_VAR 0 3
34670: PUSH
34671: LD_INT 13
34673: PUSH
34674: LD_INT 14
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: ST_TO_ADDR
34681: GO 35086
34683: LD_INT 31
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34709
34691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34692: LD_ADDR_VAR 0 3
34696: PUSH
34697: LD_INT 13
34699: PUSH
34700: LD_INT 14
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: ST_TO_ADDR
34707: GO 35086
34709: LD_INT 26
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34717
34715: GO 34735
34717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34718: LD_ADDR_VAR 0 3
34722: PUSH
34723: LD_INT 13
34725: PUSH
34726: LD_INT 14
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: ST_TO_ADDR
34733: GO 35086
34735: LD_INT 42
34737: DOUBLE
34738: EQUAL
34739: IFTRUE 34743
34741: GO 34769
34743: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34744: LD_ADDR_VAR 0 3
34748: PUSH
34749: LD_INT 21
34751: PUSH
34752: LD_INT 22
34754: PUSH
34755: LD_INT 23
34757: PUSH
34758: LD_INT 24
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: ST_TO_ADDR
34767: GO 35086
34769: LD_INT 43
34771: DOUBLE
34772: EQUAL
34773: IFTRUE 34777
34775: GO 34803
34777: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34778: LD_ADDR_VAR 0 3
34782: PUSH
34783: LD_INT 21
34785: PUSH
34786: LD_INT 22
34788: PUSH
34789: LD_INT 23
34791: PUSH
34792: LD_INT 24
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: ST_TO_ADDR
34801: GO 35086
34803: LD_INT 44
34805: DOUBLE
34806: EQUAL
34807: IFTRUE 34811
34809: GO 34837
34811: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34812: LD_ADDR_VAR 0 3
34816: PUSH
34817: LD_INT 21
34819: PUSH
34820: LD_INT 22
34822: PUSH
34823: LD_INT 23
34825: PUSH
34826: LD_INT 24
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: ST_TO_ADDR
34835: GO 35086
34837: LD_INT 45
34839: DOUBLE
34840: EQUAL
34841: IFTRUE 34845
34843: GO 34871
34845: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34846: LD_ADDR_VAR 0 3
34850: PUSH
34851: LD_INT 21
34853: PUSH
34854: LD_INT 22
34856: PUSH
34857: LD_INT 23
34859: PUSH
34860: LD_INT 24
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: ST_TO_ADDR
34869: GO 35086
34871: LD_INT 49
34873: DOUBLE
34874: EQUAL
34875: IFTRUE 34879
34877: GO 34905
34879: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34880: LD_ADDR_VAR 0 3
34884: PUSH
34885: LD_INT 21
34887: PUSH
34888: LD_INT 22
34890: PUSH
34891: LD_INT 23
34893: PUSH
34894: LD_INT 24
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: ST_TO_ADDR
34903: GO 35086
34905: LD_INT 51
34907: DOUBLE
34908: EQUAL
34909: IFTRUE 34913
34911: GO 34939
34913: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34914: LD_ADDR_VAR 0 3
34918: PUSH
34919: LD_INT 21
34921: PUSH
34922: LD_INT 22
34924: PUSH
34925: LD_INT 23
34927: PUSH
34928: LD_INT 24
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: ST_TO_ADDR
34937: GO 35086
34939: LD_INT 52
34941: DOUBLE
34942: EQUAL
34943: IFTRUE 34947
34945: GO 34973
34947: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34948: LD_ADDR_VAR 0 3
34952: PUSH
34953: LD_INT 21
34955: PUSH
34956: LD_INT 22
34958: PUSH
34959: LD_INT 23
34961: PUSH
34962: LD_INT 24
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: ST_TO_ADDR
34971: GO 35086
34973: LD_INT 53
34975: DOUBLE
34976: EQUAL
34977: IFTRUE 34981
34979: GO 34999
34981: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34982: LD_ADDR_VAR 0 3
34986: PUSH
34987: LD_INT 23
34989: PUSH
34990: LD_INT 24
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: ST_TO_ADDR
34997: GO 35086
34999: LD_INT 46
35001: DOUBLE
35002: EQUAL
35003: IFTRUE 35007
35005: GO 35025
35007: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35008: LD_ADDR_VAR 0 3
35012: PUSH
35013: LD_INT 23
35015: PUSH
35016: LD_INT 24
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: ST_TO_ADDR
35023: GO 35086
35025: LD_INT 47
35027: DOUBLE
35028: EQUAL
35029: IFTRUE 35033
35031: GO 35051
35033: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
35034: LD_ADDR_VAR 0 3
35038: PUSH
35039: LD_INT 23
35041: PUSH
35042: LD_INT 24
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: ST_TO_ADDR
35049: GO 35086
35051: LD_INT 98
35053: DOUBLE
35054: EQUAL
35055: IFTRUE 35059
35057: GO 35085
35059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35060: LD_ADDR_VAR 0 3
35064: PUSH
35065: LD_INT 21
35067: PUSH
35068: LD_INT 22
35070: PUSH
35071: LD_INT 23
35073: PUSH
35074: LD_INT 24
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: ST_TO_ADDR
35083: GO 35086
35085: POP
// result := ( chassis in result ) ;
35086: LD_ADDR_VAR 0 3
35090: PUSH
35091: LD_VAR 0 1
35095: PUSH
35096: LD_VAR 0 3
35100: IN
35101: ST_TO_ADDR
// end ;
35102: LD_VAR 0 3
35106: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35107: LD_INT 0
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
// result := array ;
35116: LD_ADDR_VAR 0 5
35120: PUSH
35121: LD_VAR 0 1
35125: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35126: LD_VAR 0 1
35130: NOT
35131: IFTRUE 35140
35133: PUSH
35134: LD_VAR 0 2
35138: NOT
35139: OR
35140: IFTRUE 35149
35142: PUSH
35143: LD_VAR 0 3
35147: NOT
35148: OR
35149: IFTRUE 35163
35151: PUSH
35152: LD_VAR 0 2
35156: PUSH
35157: LD_VAR 0 1
35161: GREATER
35162: OR
35163: IFTRUE 35177
35165: PUSH
35166: LD_VAR 0 3
35170: PUSH
35171: LD_VAR 0 1
35175: GREATER
35176: OR
35177: IFFALSE 35181
// exit ;
35179: GO 35477
// if direction then
35181: LD_VAR 0 4
35185: IFFALSE 35249
// begin d := 1 ;
35187: LD_ADDR_VAR 0 9
35191: PUSH
35192: LD_INT 1
35194: ST_TO_ADDR
// if i_from > i_to then
35195: LD_VAR 0 2
35199: PUSH
35200: LD_VAR 0 3
35204: GREATER
35205: IFFALSE 35231
// length := ( array - i_from ) + i_to else
35207: LD_ADDR_VAR 0 11
35211: PUSH
35212: LD_VAR 0 1
35216: PUSH
35217: LD_VAR 0 2
35221: MINUS
35222: PUSH
35223: LD_VAR 0 3
35227: PLUS
35228: ST_TO_ADDR
35229: GO 35247
// length := i_to - i_from ;
35231: LD_ADDR_VAR 0 11
35235: PUSH
35236: LD_VAR 0 3
35240: PUSH
35241: LD_VAR 0 2
35245: MINUS
35246: ST_TO_ADDR
// end else
35247: GO 35310
// begin d := - 1 ;
35249: LD_ADDR_VAR 0 9
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: ST_TO_ADDR
// if i_from > i_to then
35258: LD_VAR 0 2
35262: PUSH
35263: LD_VAR 0 3
35267: GREATER
35268: IFFALSE 35288
// length := i_from - i_to else
35270: LD_ADDR_VAR 0 11
35274: PUSH
35275: LD_VAR 0 2
35279: PUSH
35280: LD_VAR 0 3
35284: MINUS
35285: ST_TO_ADDR
35286: GO 35310
// length := ( array - i_to ) + i_from ;
35288: LD_ADDR_VAR 0 11
35292: PUSH
35293: LD_VAR 0 1
35297: PUSH
35298: LD_VAR 0 3
35302: MINUS
35303: PUSH
35304: LD_VAR 0 2
35308: PLUS
35309: ST_TO_ADDR
// end ; if not length then
35310: LD_VAR 0 11
35314: NOT
35315: IFFALSE 35319
// exit ;
35317: GO 35477
// tmp := array ;
35319: LD_ADDR_VAR 0 10
35323: PUSH
35324: LD_VAR 0 1
35328: ST_TO_ADDR
// for i = 1 to length do
35329: LD_ADDR_VAR 0 6
35333: PUSH
35334: DOUBLE
35335: LD_INT 1
35337: DEC
35338: ST_TO_ADDR
35339: LD_VAR 0 11
35343: PUSH
35344: FOR_TO
35345: IFFALSE 35465
// begin for j = 1 to array do
35347: LD_ADDR_VAR 0 7
35351: PUSH
35352: DOUBLE
35353: LD_INT 1
35355: DEC
35356: ST_TO_ADDR
35357: LD_VAR 0 1
35361: PUSH
35362: FOR_TO
35363: IFFALSE 35451
// begin k := j + d ;
35365: LD_ADDR_VAR 0 8
35369: PUSH
35370: LD_VAR 0 7
35374: PUSH
35375: LD_VAR 0 9
35379: PLUS
35380: ST_TO_ADDR
// if k > array then
35381: LD_VAR 0 8
35385: PUSH
35386: LD_VAR 0 1
35390: GREATER
35391: IFFALSE 35401
// k := 1 ;
35393: LD_ADDR_VAR 0 8
35397: PUSH
35398: LD_INT 1
35400: ST_TO_ADDR
// if not k then
35401: LD_VAR 0 8
35405: NOT
35406: IFFALSE 35418
// k := array ;
35408: LD_ADDR_VAR 0 8
35412: PUSH
35413: LD_VAR 0 1
35417: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35418: LD_ADDR_VAR 0 10
35422: PUSH
35423: LD_VAR 0 10
35427: PPUSH
35428: LD_VAR 0 8
35432: PPUSH
35433: LD_VAR 0 1
35437: PUSH
35438: LD_VAR 0 7
35442: ARRAY
35443: PPUSH
35444: CALL_OW 1
35448: ST_TO_ADDR
// end ;
35449: GO 35362
35451: POP
35452: POP
// array := tmp ;
35453: LD_ADDR_VAR 0 1
35457: PUSH
35458: LD_VAR 0 10
35462: ST_TO_ADDR
// end ;
35463: GO 35344
35465: POP
35466: POP
// result := array ;
35467: LD_ADDR_VAR 0 5
35471: PUSH
35472: LD_VAR 0 1
35476: ST_TO_ADDR
// end ;
35477: LD_VAR 0 5
35481: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35482: LD_INT 0
35484: PPUSH
35485: PPUSH
// result := 0 ;
35486: LD_ADDR_VAR 0 3
35490: PUSH
35491: LD_INT 0
35493: ST_TO_ADDR
// if not array or not value in array then
35494: LD_VAR 0 1
35498: NOT
35499: IFTRUE 35514
35501: PUSH
35502: LD_VAR 0 2
35506: PUSH
35507: LD_VAR 0 1
35511: IN
35512: NOT
35513: OR
35514: IFFALSE 35518
// exit ;
35516: GO 35572
// for i = 1 to array do
35518: LD_ADDR_VAR 0 4
35522: PUSH
35523: DOUBLE
35524: LD_INT 1
35526: DEC
35527: ST_TO_ADDR
35528: LD_VAR 0 1
35532: PUSH
35533: FOR_TO
35534: IFFALSE 35570
// if value = array [ i ] then
35536: LD_VAR 0 2
35540: PUSH
35541: LD_VAR 0 1
35545: PUSH
35546: LD_VAR 0 4
35550: ARRAY
35551: EQUAL
35552: IFFALSE 35568
// begin result := i ;
35554: LD_ADDR_VAR 0 3
35558: PUSH
35559: LD_VAR 0 4
35563: ST_TO_ADDR
// exit ;
35564: POP
35565: POP
35566: GO 35572
// end ;
35568: GO 35533
35570: POP
35571: POP
// end ;
35572: LD_VAR 0 3
35576: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35577: LD_INT 0
35579: PPUSH
// vc_chassis := chassis ;
35580: LD_ADDR_OWVAR 37
35584: PUSH
35585: LD_VAR 0 1
35589: ST_TO_ADDR
// vc_engine := engine ;
35590: LD_ADDR_OWVAR 39
35594: PUSH
35595: LD_VAR 0 2
35599: ST_TO_ADDR
// vc_control := control ;
35600: LD_ADDR_OWVAR 38
35604: PUSH
35605: LD_VAR 0 3
35609: ST_TO_ADDR
// vc_weapon := weapon ;
35610: LD_ADDR_OWVAR 40
35614: PUSH
35615: LD_VAR 0 4
35619: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35620: LD_ADDR_OWVAR 41
35624: PUSH
35625: LD_VAR 0 5
35629: ST_TO_ADDR
// end ;
35630: LD_VAR 0 6
35634: RET
// export function WantPlant ( unit ) ; var task ; begin
35635: LD_INT 0
35637: PPUSH
35638: PPUSH
// result := false ;
35639: LD_ADDR_VAR 0 2
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL_OW 437
35661: ST_TO_ADDR
// if task then
35662: LD_VAR 0 3
35666: IFFALSE 35694
// if task [ 1 ] [ 1 ] = p then
35668: LD_VAR 0 3
35672: PUSH
35673: LD_INT 1
35675: ARRAY
35676: PUSH
35677: LD_INT 1
35679: ARRAY
35680: PUSH
35681: LD_STRING p
35683: EQUAL
35684: IFFALSE 35694
// result := true ;
35686: LD_ADDR_VAR 0 2
35690: PUSH
35691: LD_INT 1
35693: ST_TO_ADDR
// end ;
35694: LD_VAR 0 2
35698: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35699: LD_INT 0
35701: PPUSH
35702: PPUSH
35703: PPUSH
35704: PPUSH
// if pos < 1 then
35705: LD_VAR 0 2
35709: PUSH
35710: LD_INT 1
35712: LESS
35713: IFFALSE 35717
// exit ;
35715: GO 36020
// if pos = 1 then
35717: LD_VAR 0 2
35721: PUSH
35722: LD_INT 1
35724: EQUAL
35725: IFFALSE 35758
// result := Replace ( arr , pos [ 1 ] , value ) else
35727: LD_ADDR_VAR 0 4
35731: PUSH
35732: LD_VAR 0 1
35736: PPUSH
35737: LD_VAR 0 2
35741: PUSH
35742: LD_INT 1
35744: ARRAY
35745: PPUSH
35746: LD_VAR 0 3
35750: PPUSH
35751: CALL_OW 1
35755: ST_TO_ADDR
35756: GO 36020
// begin tmp := arr ;
35758: LD_ADDR_VAR 0 6
35762: PUSH
35763: LD_VAR 0 1
35767: ST_TO_ADDR
// s_arr := [ tmp ] ;
35768: LD_ADDR_VAR 0 7
35772: PUSH
35773: LD_VAR 0 6
35777: PUSH
35778: EMPTY
35779: LIST
35780: ST_TO_ADDR
// for i = 1 to pos - 1 do
35781: LD_ADDR_VAR 0 5
35785: PUSH
35786: DOUBLE
35787: LD_INT 1
35789: DEC
35790: ST_TO_ADDR
35791: LD_VAR 0 2
35795: PUSH
35796: LD_INT 1
35798: MINUS
35799: PUSH
35800: FOR_TO
35801: IFFALSE 35846
// begin tmp := tmp [ pos [ i ] ] ;
35803: LD_ADDR_VAR 0 6
35807: PUSH
35808: LD_VAR 0 6
35812: PUSH
35813: LD_VAR 0 2
35817: PUSH
35818: LD_VAR 0 5
35822: ARRAY
35823: ARRAY
35824: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35825: LD_ADDR_VAR 0 7
35829: PUSH
35830: LD_VAR 0 7
35834: PUSH
35835: LD_VAR 0 6
35839: PUSH
35840: EMPTY
35841: LIST
35842: ADD
35843: ST_TO_ADDR
// end ;
35844: GO 35800
35846: POP
35847: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35848: LD_ADDR_VAR 0 6
35852: PUSH
35853: LD_VAR 0 6
35857: PPUSH
35858: LD_VAR 0 2
35862: PUSH
35863: LD_VAR 0 2
35867: ARRAY
35868: PPUSH
35869: LD_VAR 0 3
35873: PPUSH
35874: CALL_OW 1
35878: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35879: LD_ADDR_VAR 0 7
35883: PUSH
35884: LD_VAR 0 7
35888: PPUSH
35889: LD_VAR 0 7
35893: PPUSH
35894: LD_VAR 0 6
35898: PPUSH
35899: CALL_OW 1
35903: ST_TO_ADDR
// for i = s_arr downto 2 do
35904: LD_ADDR_VAR 0 5
35908: PUSH
35909: DOUBLE
35910: LD_VAR 0 7
35914: INC
35915: ST_TO_ADDR
35916: LD_INT 2
35918: PUSH
35919: FOR_DOWNTO
35920: IFFALSE 36004
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35922: LD_ADDR_VAR 0 6
35926: PUSH
35927: LD_VAR 0 7
35931: PUSH
35932: LD_VAR 0 5
35936: PUSH
35937: LD_INT 1
35939: MINUS
35940: ARRAY
35941: PPUSH
35942: LD_VAR 0 2
35946: PUSH
35947: LD_VAR 0 5
35951: PUSH
35952: LD_INT 1
35954: MINUS
35955: ARRAY
35956: PPUSH
35957: LD_VAR 0 7
35961: PUSH
35962: LD_VAR 0 5
35966: ARRAY
35967: PPUSH
35968: CALL_OW 1
35972: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35973: LD_ADDR_VAR 0 7
35977: PUSH
35978: LD_VAR 0 7
35982: PPUSH
35983: LD_VAR 0 5
35987: PUSH
35988: LD_INT 1
35990: MINUS
35991: PPUSH
35992: LD_VAR 0 6
35996: PPUSH
35997: CALL_OW 1
36001: ST_TO_ADDR
// end ;
36002: GO 35919
36004: POP
36005: POP
// result := s_arr [ 1 ] ;
36006: LD_ADDR_VAR 0 4
36010: PUSH
36011: LD_VAR 0 7
36015: PUSH
36016: LD_INT 1
36018: ARRAY
36019: ST_TO_ADDR
// end ; end ;
36020: LD_VAR 0 4
36024: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36025: LD_INT 0
36027: PPUSH
36028: PPUSH
// if not list then
36029: LD_VAR 0 1
36033: NOT
36034: IFFALSE 36038
// exit ;
36036: GO 36129
// i := list [ pos1 ] ;
36038: LD_ADDR_VAR 0 5
36042: PUSH
36043: LD_VAR 0 1
36047: PUSH
36048: LD_VAR 0 2
36052: ARRAY
36053: ST_TO_ADDR
// if not i then
36054: LD_VAR 0 5
36058: NOT
36059: IFFALSE 36063
// exit ;
36061: GO 36129
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36063: LD_ADDR_VAR 0 1
36067: PUSH
36068: LD_VAR 0 1
36072: PPUSH
36073: LD_VAR 0 2
36077: PPUSH
36078: LD_VAR 0 1
36082: PUSH
36083: LD_VAR 0 3
36087: ARRAY
36088: PPUSH
36089: CALL_OW 1
36093: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36094: LD_ADDR_VAR 0 1
36098: PUSH
36099: LD_VAR 0 1
36103: PPUSH
36104: LD_VAR 0 3
36108: PPUSH
36109: LD_VAR 0 5
36113: PPUSH
36114: CALL_OW 1
36118: ST_TO_ADDR
// result := list ;
36119: LD_ADDR_VAR 0 4
36123: PUSH
36124: LD_VAR 0 1
36128: ST_TO_ADDR
// end ;
36129: LD_VAR 0 4
36133: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36134: LD_INT 0
36136: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36137: LD_ADDR_VAR 0 5
36141: PUSH
36142: LD_VAR 0 1
36146: PPUSH
36147: CALL_OW 250
36151: PPUSH
36152: LD_VAR 0 1
36156: PPUSH
36157: CALL_OW 251
36161: PPUSH
36162: LD_VAR 0 2
36166: PPUSH
36167: LD_VAR 0 3
36171: PPUSH
36172: LD_VAR 0 4
36176: PPUSH
36177: CALL 36559 0 5
36181: ST_TO_ADDR
// end ;
36182: LD_VAR 0 5
36186: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36187: LD_INT 0
36189: PPUSH
36190: PPUSH
36191: PPUSH
36192: PPUSH
// if not list or not unit then
36193: LD_VAR 0 2
36197: NOT
36198: IFTRUE 36207
36200: PUSH
36201: LD_VAR 0 1
36205: NOT
36206: OR
36207: IFFALSE 36211
// exit ;
36209: GO 36554
// result := [ ] ;
36211: LD_ADDR_VAR 0 5
36215: PUSH
36216: EMPTY
36217: ST_TO_ADDR
// for i in list do
36218: LD_ADDR_VAR 0 6
36222: PUSH
36223: LD_VAR 0 2
36227: PUSH
36228: FOR_IN
36229: IFFALSE 36447
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36231: LD_ADDR_VAR 0 8
36235: PUSH
36236: LD_VAR 0 1
36240: PPUSH
36241: LD_VAR 0 6
36245: PUSH
36246: LD_INT 1
36248: ARRAY
36249: PPUSH
36250: LD_VAR 0 6
36254: PUSH
36255: LD_INT 2
36257: ARRAY
36258: PPUSH
36259: CALL_OW 297
36263: ST_TO_ADDR
// if not Count ( result ) then
36264: LD_VAR 0 5
36268: PPUSH
36269: CALL 32781 0 1
36273: NOT
36274: IFFALSE 36307
// begin result := Join ( result , [ i , tmp ] ) ;
36276: LD_ADDR_VAR 0 5
36280: PUSH
36281: LD_VAR 0 5
36285: PPUSH
36286: LD_VAR 0 6
36290: PUSH
36291: LD_VAR 0 8
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PPUSH
36300: CALL 68757 0 2
36304: ST_TO_ADDR
// continue ;
36305: GO 36228
// end ; if result [ result ] [ 2 ] <= tmp then
36307: LD_VAR 0 5
36311: PUSH
36312: LD_VAR 0 5
36316: ARRAY
36317: PUSH
36318: LD_INT 2
36320: ARRAY
36321: PUSH
36322: LD_VAR 0 8
36326: LESSEQUAL
36327: IFFALSE 36360
// result := Join ( result , [ i , tmp ] ) else
36329: LD_ADDR_VAR 0 5
36333: PUSH
36334: LD_VAR 0 5
36338: PPUSH
36339: LD_VAR 0 6
36343: PUSH
36344: LD_VAR 0 8
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PPUSH
36353: CALL 68757 0 2
36357: ST_TO_ADDR
36358: GO 36445
// begin for j := 1 to Count ( result ) do
36360: LD_ADDR_VAR 0 7
36364: PUSH
36365: DOUBLE
36366: LD_INT 1
36368: DEC
36369: ST_TO_ADDR
36370: LD_VAR 0 5
36374: PPUSH
36375: CALL 32781 0 1
36379: PUSH
36380: FOR_TO
36381: IFFALSE 36443
// begin if tmp < result [ j ] [ 2 ] then
36383: LD_VAR 0 8
36387: PUSH
36388: LD_VAR 0 5
36392: PUSH
36393: LD_VAR 0 7
36397: ARRAY
36398: PUSH
36399: LD_INT 2
36401: ARRAY
36402: LESS
36403: IFFALSE 36441
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36405: LD_ADDR_VAR 0 5
36409: PUSH
36410: LD_VAR 0 5
36414: PPUSH
36415: LD_VAR 0 7
36419: PPUSH
36420: LD_VAR 0 6
36424: PUSH
36425: LD_VAR 0 8
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PPUSH
36434: CALL_OW 2
36438: ST_TO_ADDR
// break ;
36439: GO 36443
// end ; end ;
36441: GO 36380
36443: POP
36444: POP
// end ; end ;
36445: GO 36228
36447: POP
36448: POP
// if result and not asc then
36449: LD_VAR 0 5
36453: IFFALSE 36462
36455: PUSH
36456: LD_VAR 0 3
36460: NOT
36461: AND
36462: IFFALSE 36479
// result := ReverseArray ( result ) ;
36464: LD_ADDR_VAR 0 5
36468: PUSH
36469: LD_VAR 0 5
36473: PPUSH
36474: CALL 63837 0 1
36478: ST_TO_ADDR
// tmp := [ ] ;
36479: LD_ADDR_VAR 0 8
36483: PUSH
36484: EMPTY
36485: ST_TO_ADDR
// if mode then
36486: LD_VAR 0 4
36490: IFFALSE 36554
// begin for i := 1 to result do
36492: LD_ADDR_VAR 0 6
36496: PUSH
36497: DOUBLE
36498: LD_INT 1
36500: DEC
36501: ST_TO_ADDR
36502: LD_VAR 0 5
36506: PUSH
36507: FOR_TO
36508: IFFALSE 36542
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36510: LD_ADDR_VAR 0 8
36514: PUSH
36515: LD_VAR 0 8
36519: PPUSH
36520: LD_VAR 0 5
36524: PUSH
36525: LD_VAR 0 6
36529: ARRAY
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: PPUSH
36535: CALL 68757 0 2
36539: ST_TO_ADDR
36540: GO 36507
36542: POP
36543: POP
// result := tmp ;
36544: LD_ADDR_VAR 0 5
36548: PUSH
36549: LD_VAR 0 8
36553: ST_TO_ADDR
// end ; end ;
36554: LD_VAR 0 5
36558: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36559: LD_INT 0
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
// if not list then
36565: LD_VAR 0 3
36569: NOT
36570: IFFALSE 36574
// exit ;
36572: GO 36964
// result := [ ] ;
36574: LD_ADDR_VAR 0 6
36578: PUSH
36579: EMPTY
36580: ST_TO_ADDR
// for i in list do
36581: LD_ADDR_VAR 0 7
36585: PUSH
36586: LD_VAR 0 3
36590: PUSH
36591: FOR_IN
36592: IFFALSE 36794
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36594: LD_ADDR_VAR 0 9
36598: PUSH
36599: LD_VAR 0 7
36603: PPUSH
36604: LD_VAR 0 1
36608: PPUSH
36609: LD_VAR 0 2
36613: PPUSH
36614: CALL_OW 297
36618: ST_TO_ADDR
// if not result then
36619: LD_VAR 0 6
36623: NOT
36624: IFFALSE 36650
// result := [ [ i , tmp ] ] else
36626: LD_ADDR_VAR 0 6
36630: PUSH
36631: LD_VAR 0 7
36635: PUSH
36636: LD_VAR 0 9
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: EMPTY
36646: LIST
36647: ST_TO_ADDR
36648: GO 36792
// begin if result [ result ] [ 2 ] <= tmp then
36650: LD_VAR 0 6
36654: PUSH
36655: LD_VAR 0 6
36659: ARRAY
36660: PUSH
36661: LD_INT 2
36663: ARRAY
36664: PUSH
36665: LD_VAR 0 9
36669: LESSEQUAL
36670: IFFALSE 36712
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36672: LD_ADDR_VAR 0 6
36676: PUSH
36677: LD_VAR 0 6
36681: PPUSH
36682: LD_VAR 0 6
36686: PUSH
36687: LD_INT 1
36689: PLUS
36690: PPUSH
36691: LD_VAR 0 7
36695: PUSH
36696: LD_VAR 0 9
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PPUSH
36705: CALL_OW 2
36709: ST_TO_ADDR
36710: GO 36792
// for j := 1 to result do
36712: LD_ADDR_VAR 0 8
36716: PUSH
36717: DOUBLE
36718: LD_INT 1
36720: DEC
36721: ST_TO_ADDR
36722: LD_VAR 0 6
36726: PUSH
36727: FOR_TO
36728: IFFALSE 36790
// begin if tmp < result [ j ] [ 2 ] then
36730: LD_VAR 0 9
36734: PUSH
36735: LD_VAR 0 6
36739: PUSH
36740: LD_VAR 0 8
36744: ARRAY
36745: PUSH
36746: LD_INT 2
36748: ARRAY
36749: LESS
36750: IFFALSE 36788
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36752: LD_ADDR_VAR 0 6
36756: PUSH
36757: LD_VAR 0 6
36761: PPUSH
36762: LD_VAR 0 8
36766: PPUSH
36767: LD_VAR 0 7
36771: PUSH
36772: LD_VAR 0 9
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PPUSH
36781: CALL_OW 2
36785: ST_TO_ADDR
// break ;
36786: GO 36790
// end ; end ;
36788: GO 36727
36790: POP
36791: POP
// end ; end ;
36792: GO 36591
36794: POP
36795: POP
// if result and not asc then
36796: LD_VAR 0 6
36800: IFFALSE 36809
36802: PUSH
36803: LD_VAR 0 4
36807: NOT
36808: AND
36809: IFFALSE 36884
// begin tmp := result ;
36811: LD_ADDR_VAR 0 9
36815: PUSH
36816: LD_VAR 0 6
36820: ST_TO_ADDR
// for i = tmp downto 1 do
36821: LD_ADDR_VAR 0 7
36825: PUSH
36826: DOUBLE
36827: LD_VAR 0 9
36831: INC
36832: ST_TO_ADDR
36833: LD_INT 1
36835: PUSH
36836: FOR_DOWNTO
36837: IFFALSE 36882
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36839: LD_ADDR_VAR 0 6
36843: PUSH
36844: LD_VAR 0 6
36848: PPUSH
36849: LD_VAR 0 9
36853: PUSH
36854: LD_VAR 0 7
36858: MINUS
36859: PUSH
36860: LD_INT 1
36862: PLUS
36863: PPUSH
36864: LD_VAR 0 9
36868: PUSH
36869: LD_VAR 0 7
36873: ARRAY
36874: PPUSH
36875: CALL_OW 1
36879: ST_TO_ADDR
36880: GO 36836
36882: POP
36883: POP
// end ; tmp := [ ] ;
36884: LD_ADDR_VAR 0 9
36888: PUSH
36889: EMPTY
36890: ST_TO_ADDR
// if mode then
36891: LD_VAR 0 5
36895: IFFALSE 36964
// begin for i = 1 to result do
36897: LD_ADDR_VAR 0 7
36901: PUSH
36902: DOUBLE
36903: LD_INT 1
36905: DEC
36906: ST_TO_ADDR
36907: LD_VAR 0 6
36911: PUSH
36912: FOR_TO
36913: IFFALSE 36952
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36915: LD_ADDR_VAR 0 9
36919: PUSH
36920: LD_VAR 0 9
36924: PPUSH
36925: LD_VAR 0 7
36929: PPUSH
36930: LD_VAR 0 6
36934: PUSH
36935: LD_VAR 0 7
36939: ARRAY
36940: PUSH
36941: LD_INT 1
36943: ARRAY
36944: PPUSH
36945: CALL_OW 1
36949: ST_TO_ADDR
36950: GO 36912
36952: POP
36953: POP
// result := tmp ;
36954: LD_ADDR_VAR 0 6
36958: PUSH
36959: LD_VAR 0 9
36963: ST_TO_ADDR
// end ; end ;
36964: LD_VAR 0 6
36968: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36969: LD_INT 0
36971: PPUSH
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
36976: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36977: LD_ADDR_VAR 0 5
36981: PUSH
36982: LD_INT 0
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: EMPTY
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: ST_TO_ADDR
// if not x or not y then
36999: LD_VAR 0 2
37003: NOT
37004: IFTRUE 37013
37006: PUSH
37007: LD_VAR 0 3
37011: NOT
37012: OR
37013: IFFALSE 37017
// exit ;
37015: GO 38673
// if not range then
37017: LD_VAR 0 4
37021: NOT
37022: IFFALSE 37032
// range := 10 ;
37024: LD_ADDR_VAR 0 4
37028: PUSH
37029: LD_INT 10
37031: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37032: LD_ADDR_VAR 0 8
37036: PUSH
37037: LD_INT 81
37039: PUSH
37040: LD_VAR 0 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 92
37051: PUSH
37052: LD_VAR 0 2
37056: PUSH
37057: LD_VAR 0 3
37061: PUSH
37062: LD_VAR 0 4
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 3
37075: PUSH
37076: LD_INT 21
37078: PUSH
37079: LD_INT 3
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: PPUSH
37095: CALL_OW 69
37099: ST_TO_ADDR
// if not tmp then
37100: LD_VAR 0 8
37104: NOT
37105: IFFALSE 37109
// exit ;
37107: GO 38673
// for i in tmp do
37109: LD_ADDR_VAR 0 6
37113: PUSH
37114: LD_VAR 0 8
37118: PUSH
37119: FOR_IN
37120: IFFALSE 38648
// begin points := [ 0 , 0 , 0 ] ;
37122: LD_ADDR_VAR 0 9
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: LIST
37140: ST_TO_ADDR
// bpoints := 1 ;
37141: LD_ADDR_VAR 0 10
37145: PUSH
37146: LD_INT 1
37148: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37149: LD_VAR 0 6
37153: PPUSH
37154: CALL_OW 247
37158: PUSH
37159: LD_INT 1
37161: DOUBLE
37162: EQUAL
37163: IFTRUE 37167
37165: GO 37749
37167: POP
// begin if GetClass ( i ) = 1 then
37168: LD_VAR 0 6
37172: PPUSH
37173: CALL_OW 257
37177: PUSH
37178: LD_INT 1
37180: EQUAL
37181: IFFALSE 37202
// points := [ 10 , 5 , 3 ] ;
37183: LD_ADDR_VAR 0 9
37187: PUSH
37188: LD_INT 10
37190: PUSH
37191: LD_INT 5
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37202: LD_VAR 0 6
37206: PPUSH
37207: CALL_OW 257
37211: PUSH
37212: LD_INT 2
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: LD_INT 4
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: LIST
37225: IN
37226: IFFALSE 37247
// points := [ 3 , 2 , 1 ] ;
37228: LD_ADDR_VAR 0 9
37232: PUSH
37233: LD_INT 3
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37247: LD_VAR 0 6
37251: PPUSH
37252: CALL_OW 257
37256: PUSH
37257: LD_INT 5
37259: EQUAL
37260: IFFALSE 37281
// points := [ 130 , 5 , 2 ] ;
37262: LD_ADDR_VAR 0 9
37266: PUSH
37267: LD_INT 130
37269: PUSH
37270: LD_INT 5
37272: PUSH
37273: LD_INT 2
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: LIST
37280: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37281: LD_VAR 0 6
37285: PPUSH
37286: CALL_OW 257
37290: PUSH
37291: LD_INT 8
37293: EQUAL
37294: IFFALSE 37315
// points := [ 35 , 35 , 30 ] ;
37296: LD_ADDR_VAR 0 9
37300: PUSH
37301: LD_INT 35
37303: PUSH
37304: LD_INT 35
37306: PUSH
37307: LD_INT 30
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37315: LD_VAR 0 6
37319: PPUSH
37320: CALL_OW 257
37324: PUSH
37325: LD_INT 9
37327: EQUAL
37328: IFFALSE 37349
// points := [ 20 , 55 , 40 ] ;
37330: LD_ADDR_VAR 0 9
37334: PUSH
37335: LD_INT 20
37337: PUSH
37338: LD_INT 55
37340: PUSH
37341: LD_INT 40
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37349: LD_VAR 0 6
37353: PPUSH
37354: CALL_OW 257
37358: PUSH
37359: LD_INT 12
37361: PUSH
37362: LD_INT 16
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: IN
37369: IFFALSE 37390
// points := [ 5 , 3 , 2 ] ;
37371: LD_ADDR_VAR 0 9
37375: PUSH
37376: LD_INT 5
37378: PUSH
37379: LD_INT 3
37381: PUSH
37382: LD_INT 2
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: LIST
37389: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37390: LD_VAR 0 6
37394: PPUSH
37395: CALL_OW 257
37399: PUSH
37400: LD_INT 17
37402: EQUAL
37403: IFFALSE 37424
// points := [ 100 , 50 , 75 ] ;
37405: LD_ADDR_VAR 0 9
37409: PUSH
37410: LD_INT 100
37412: PUSH
37413: LD_INT 50
37415: PUSH
37416: LD_INT 75
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37424: LD_VAR 0 6
37428: PPUSH
37429: CALL_OW 257
37433: PUSH
37434: LD_INT 15
37436: EQUAL
37437: IFFALSE 37458
// points := [ 10 , 5 , 3 ] ;
37439: LD_ADDR_VAR 0 9
37443: PUSH
37444: LD_INT 10
37446: PUSH
37447: LD_INT 5
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37458: LD_VAR 0 6
37462: PPUSH
37463: CALL_OW 257
37467: PUSH
37468: LD_INT 14
37470: EQUAL
37471: IFFALSE 37492
// points := [ 10 , 0 , 0 ] ;
37473: LD_ADDR_VAR 0 9
37477: PUSH
37478: LD_INT 10
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37492: LD_VAR 0 6
37496: PPUSH
37497: CALL_OW 257
37501: PUSH
37502: LD_INT 11
37504: EQUAL
37505: IFFALSE 37526
// points := [ 30 , 10 , 5 ] ;
37507: LD_ADDR_VAR 0 9
37511: PUSH
37512: LD_INT 30
37514: PUSH
37515: LD_INT 10
37517: PUSH
37518: LD_INT 5
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37526: LD_VAR 0 1
37530: PPUSH
37531: LD_INT 5
37533: PPUSH
37534: CALL_OW 321
37538: PUSH
37539: LD_INT 2
37541: EQUAL
37542: IFFALSE 37559
// bpoints := bpoints * 1.8 ;
37544: LD_ADDR_VAR 0 10
37548: PUSH
37549: LD_VAR 0 10
37553: PUSH
37554: LD_REAL  1.80000000000000E+0000
37557: MUL
37558: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37559: LD_VAR 0 6
37563: PPUSH
37564: CALL_OW 257
37568: PUSH
37569: LD_INT 1
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 3
37577: PUSH
37578: LD_INT 4
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: IN
37587: IFFALSE 37607
37589: PUSH
37590: LD_VAR 0 1
37594: PPUSH
37595: LD_INT 51
37597: PPUSH
37598: CALL_OW 321
37602: PUSH
37603: LD_INT 2
37605: EQUAL
37606: AND
37607: IFFALSE 37624
// bpoints := bpoints * 1.2 ;
37609: LD_ADDR_VAR 0 10
37613: PUSH
37614: LD_VAR 0 10
37618: PUSH
37619: LD_REAL  1.20000000000000E+0000
37622: MUL
37623: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37624: LD_VAR 0 6
37628: PPUSH
37629: CALL_OW 257
37633: PUSH
37634: LD_INT 5
37636: PUSH
37637: LD_INT 7
37639: PUSH
37640: LD_INT 9
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: LIST
37647: IN
37648: IFFALSE 37668
37650: PUSH
37651: LD_VAR 0 1
37655: PPUSH
37656: LD_INT 52
37658: PPUSH
37659: CALL_OW 321
37663: PUSH
37664: LD_INT 2
37666: EQUAL
37667: AND
37668: IFFALSE 37685
// bpoints := bpoints * 1.5 ;
37670: LD_ADDR_VAR 0 10
37674: PUSH
37675: LD_VAR 0 10
37679: PUSH
37680: LD_REAL  1.50000000000000E+0000
37683: MUL
37684: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37685: LD_VAR 0 1
37689: PPUSH
37690: LD_INT 66
37692: PPUSH
37693: CALL_OW 321
37697: PUSH
37698: LD_INT 2
37700: EQUAL
37701: IFFALSE 37718
// bpoints := bpoints * 1.1 ;
37703: LD_ADDR_VAR 0 10
37707: PUSH
37708: LD_VAR 0 10
37712: PUSH
37713: LD_REAL  1.10000000000000E+0000
37716: MUL
37717: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37718: LD_ADDR_VAR 0 10
37722: PUSH
37723: LD_VAR 0 10
37727: PUSH
37728: LD_VAR 0 6
37732: PPUSH
37733: LD_INT 1
37735: PPUSH
37736: CALL_OW 259
37740: PUSH
37741: LD_REAL  1.15000000000000E+0000
37744: MUL
37745: MUL
37746: ST_TO_ADDR
// end ; unit_vehicle :
37747: GO 38577
37749: LD_INT 2
37751: DOUBLE
37752: EQUAL
37753: IFTRUE 37757
37755: GO 38565
37757: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37758: LD_VAR 0 6
37762: PPUSH
37763: CALL_OW 264
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: LD_INT 42
37773: PUSH
37774: LD_INT 24
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: LIST
37781: IN
37782: IFFALSE 37803
// points := [ 25 , 5 , 3 ] ;
37784: LD_ADDR_VAR 0 9
37788: PUSH
37789: LD_INT 25
37791: PUSH
37792: LD_INT 5
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37803: LD_VAR 0 6
37807: PPUSH
37808: CALL_OW 264
37812: PUSH
37813: LD_INT 4
37815: PUSH
37816: LD_INT 43
37818: PUSH
37819: LD_INT 25
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: LIST
37826: IN
37827: IFFALSE 37848
// points := [ 40 , 15 , 5 ] ;
37829: LD_ADDR_VAR 0 9
37833: PUSH
37834: LD_INT 40
37836: PUSH
37837: LD_INT 15
37839: PUSH
37840: LD_INT 5
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37848: LD_VAR 0 6
37852: PPUSH
37853: CALL_OW 264
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: LD_INT 23
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: IN
37868: IFFALSE 37889
// points := [ 7 , 25 , 8 ] ;
37870: LD_ADDR_VAR 0 9
37874: PUSH
37875: LD_INT 7
37877: PUSH
37878: LD_INT 25
37880: PUSH
37881: LD_INT 8
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37889: LD_VAR 0 6
37893: PPUSH
37894: CALL_OW 264
37898: PUSH
37899: LD_INT 5
37901: PUSH
37902: LD_INT 27
37904: PUSH
37905: LD_INT 44
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: LIST
37912: IN
37913: IFFALSE 37934
// points := [ 14 , 50 , 16 ] ;
37915: LD_ADDR_VAR 0 9
37919: PUSH
37920: LD_INT 14
37922: PUSH
37923: LD_INT 50
37925: PUSH
37926: LD_INT 16
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37934: LD_VAR 0 6
37938: PPUSH
37939: CALL_OW 264
37943: PUSH
37944: LD_INT 6
37946: PUSH
37947: LD_INT 46
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: IN
37954: IFFALSE 37975
// points := [ 32 , 120 , 70 ] ;
37956: LD_ADDR_VAR 0 9
37960: PUSH
37961: LD_INT 32
37963: PUSH
37964: LD_INT 120
37966: PUSH
37967: LD_INT 70
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37975: LD_VAR 0 6
37979: PPUSH
37980: CALL_OW 264
37984: PUSH
37985: LD_INT 7
37987: PUSH
37988: LD_INT 28
37990: PUSH
37991: LD_INT 45
37993: PUSH
37994: LD_INT 92
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: IN
38003: IFFALSE 38024
// points := [ 35 , 20 , 45 ] ;
38005: LD_ADDR_VAR 0 9
38009: PUSH
38010: LD_INT 35
38012: PUSH
38013: LD_INT 20
38015: PUSH
38016: LD_INT 45
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38024: LD_VAR 0 6
38028: PPUSH
38029: CALL_OW 264
38033: PUSH
38034: LD_INT 47
38036: PUSH
38037: EMPTY
38038: LIST
38039: IN
38040: IFFALSE 38061
// points := [ 67 , 45 , 75 ] ;
38042: LD_ADDR_VAR 0 9
38046: PUSH
38047: LD_INT 67
38049: PUSH
38050: LD_INT 45
38052: PUSH
38053: LD_INT 75
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38061: LD_VAR 0 6
38065: PPUSH
38066: CALL_OW 264
38070: PUSH
38071: LD_INT 26
38073: PUSH
38074: EMPTY
38075: LIST
38076: IN
38077: IFFALSE 38098
// points := [ 120 , 30 , 80 ] ;
38079: LD_ADDR_VAR 0 9
38083: PUSH
38084: LD_INT 120
38086: PUSH
38087: LD_INT 30
38089: PUSH
38090: LD_INT 80
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: LIST
38097: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38098: LD_VAR 0 6
38102: PPUSH
38103: CALL_OW 264
38107: PUSH
38108: LD_INT 22
38110: PUSH
38111: EMPTY
38112: LIST
38113: IN
38114: IFFALSE 38135
// points := [ 40 , 1 , 1 ] ;
38116: LD_ADDR_VAR 0 9
38120: PUSH
38121: LD_INT 40
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38135: LD_VAR 0 6
38139: PPUSH
38140: CALL_OW 264
38144: PUSH
38145: LD_INT 29
38147: PUSH
38148: EMPTY
38149: LIST
38150: IN
38151: IFFALSE 38172
// points := [ 70 , 200 , 400 ] ;
38153: LD_ADDR_VAR 0 9
38157: PUSH
38158: LD_INT 70
38160: PUSH
38161: LD_INT 200
38163: PUSH
38164: LD_INT 400
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38172: LD_VAR 0 6
38176: PPUSH
38177: CALL_OW 264
38181: PUSH
38182: LD_INT 14
38184: PUSH
38185: LD_INT 53
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: IN
38192: IFFALSE 38213
// points := [ 40 , 10 , 20 ] ;
38194: LD_ADDR_VAR 0 9
38198: PUSH
38199: LD_INT 40
38201: PUSH
38202: LD_INT 10
38204: PUSH
38205: LD_INT 20
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: LIST
38212: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38213: LD_VAR 0 6
38217: PPUSH
38218: CALL_OW 264
38222: PUSH
38223: LD_INT 9
38225: PUSH
38226: EMPTY
38227: LIST
38228: IN
38229: IFFALSE 38250
// points := [ 5 , 70 , 20 ] ;
38231: LD_ADDR_VAR 0 9
38235: PUSH
38236: LD_INT 5
38238: PUSH
38239: LD_INT 70
38241: PUSH
38242: LD_INT 20
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38250: LD_VAR 0 6
38254: PPUSH
38255: CALL_OW 264
38259: PUSH
38260: LD_INT 10
38262: PUSH
38263: EMPTY
38264: LIST
38265: IN
38266: IFFALSE 38287
// points := [ 35 , 110 , 70 ] ;
38268: LD_ADDR_VAR 0 9
38272: PUSH
38273: LD_INT 35
38275: PUSH
38276: LD_INT 110
38278: PUSH
38279: LD_INT 70
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: LIST
38286: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38287: LD_VAR 0 6
38291: PPUSH
38292: CALL_OW 265
38296: PUSH
38297: LD_INT 25
38299: EQUAL
38300: IFFALSE 38321
// points := [ 80 , 65 , 100 ] ;
38302: LD_ADDR_VAR 0 9
38306: PUSH
38307: LD_INT 80
38309: PUSH
38310: LD_INT 65
38312: PUSH
38313: LD_INT 100
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: LIST
38320: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38321: LD_VAR 0 6
38325: PPUSH
38326: CALL_OW 263
38330: PUSH
38331: LD_INT 1
38333: EQUAL
38334: IFFALSE 38369
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38336: LD_ADDR_VAR 0 10
38340: PUSH
38341: LD_VAR 0 10
38345: PUSH
38346: LD_VAR 0 6
38350: PPUSH
38351: CALL_OW 311
38355: PPUSH
38356: LD_INT 3
38358: PPUSH
38359: CALL_OW 259
38363: PUSH
38364: LD_INT 4
38366: MUL
38367: MUL
38368: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38369: LD_VAR 0 6
38373: PPUSH
38374: CALL_OW 263
38378: PUSH
38379: LD_INT 2
38381: EQUAL
38382: IFFALSE 38433
// begin j := IsControledBy ( i ) ;
38384: LD_ADDR_VAR 0 7
38388: PUSH
38389: LD_VAR 0 6
38393: PPUSH
38394: CALL_OW 312
38398: ST_TO_ADDR
// if j then
38399: LD_VAR 0 7
38403: IFFALSE 38433
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38405: LD_ADDR_VAR 0 10
38409: PUSH
38410: LD_VAR 0 10
38414: PUSH
38415: LD_VAR 0 7
38419: PPUSH
38420: LD_INT 3
38422: PPUSH
38423: CALL_OW 259
38427: PUSH
38428: LD_INT 3
38430: MUL
38431: MUL
38432: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38433: LD_VAR 0 6
38437: PPUSH
38438: CALL_OW 264
38442: PUSH
38443: LD_INT 5
38445: PUSH
38446: LD_INT 6
38448: PUSH
38449: LD_INT 46
38451: PUSH
38452: LD_INT 44
38454: PUSH
38455: LD_INT 47
38457: PUSH
38458: LD_INT 45
38460: PUSH
38461: LD_INT 28
38463: PUSH
38464: LD_INT 7
38466: PUSH
38467: LD_INT 27
38469: PUSH
38470: LD_INT 29
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: IN
38485: IFFALSE 38505
38487: PUSH
38488: LD_VAR 0 1
38492: PPUSH
38493: LD_INT 52
38495: PPUSH
38496: CALL_OW 321
38500: PUSH
38501: LD_INT 2
38503: EQUAL
38504: AND
38505: IFFALSE 38522
// bpoints := bpoints * 1.2 ;
38507: LD_ADDR_VAR 0 10
38511: PUSH
38512: LD_VAR 0 10
38516: PUSH
38517: LD_REAL  1.20000000000000E+0000
38520: MUL
38521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38522: LD_VAR 0 6
38526: PPUSH
38527: CALL_OW 264
38531: PUSH
38532: LD_INT 6
38534: PUSH
38535: LD_INT 46
38537: PUSH
38538: LD_INT 47
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: LIST
38545: IN
38546: IFFALSE 38563
// bpoints := bpoints * 1.2 ;
38548: LD_ADDR_VAR 0 10
38552: PUSH
38553: LD_VAR 0 10
38557: PUSH
38558: LD_REAL  1.20000000000000E+0000
38561: MUL
38562: ST_TO_ADDR
// end ; unit_building :
38563: GO 38577
38565: LD_INT 3
38567: DOUBLE
38568: EQUAL
38569: IFTRUE 38573
38571: GO 38576
38573: POP
// ; end ;
38574: GO 38577
38576: POP
// for j = 1 to 3 do
38577: LD_ADDR_VAR 0 7
38581: PUSH
38582: DOUBLE
38583: LD_INT 1
38585: DEC
38586: ST_TO_ADDR
38587: LD_INT 3
38589: PUSH
38590: FOR_TO
38591: IFFALSE 38644
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38593: LD_ADDR_VAR 0 5
38597: PUSH
38598: LD_VAR 0 5
38602: PPUSH
38603: LD_VAR 0 7
38607: PPUSH
38608: LD_VAR 0 5
38612: PUSH
38613: LD_VAR 0 7
38617: ARRAY
38618: PUSH
38619: LD_VAR 0 9
38623: PUSH
38624: LD_VAR 0 7
38628: ARRAY
38629: PUSH
38630: LD_VAR 0 10
38634: MUL
38635: PLUS
38636: PPUSH
38637: CALL_OW 1
38641: ST_TO_ADDR
38642: GO 38590
38644: POP
38645: POP
// end ;
38646: GO 37119
38648: POP
38649: POP
// result := Replace ( result , 4 , tmp ) ;
38650: LD_ADDR_VAR 0 5
38654: PUSH
38655: LD_VAR 0 5
38659: PPUSH
38660: LD_INT 4
38662: PPUSH
38663: LD_VAR 0 8
38667: PPUSH
38668: CALL_OW 1
38672: ST_TO_ADDR
// end ;
38673: LD_VAR 0 5
38677: RET
// export function DangerAtRange ( unit , range ) ; begin
38678: LD_INT 0
38680: PPUSH
// if not unit then
38681: LD_VAR 0 1
38685: NOT
38686: IFFALSE 38690
// exit ;
38688: GO 38735
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38690: LD_ADDR_VAR 0 3
38694: PUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: CALL_OW 255
38704: PPUSH
38705: LD_VAR 0 1
38709: PPUSH
38710: CALL_OW 250
38714: PPUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 251
38724: PPUSH
38725: LD_VAR 0 2
38729: PPUSH
38730: CALL 36969 0 4
38734: ST_TO_ADDR
// end ;
38735: LD_VAR 0 3
38739: RET
// export function DangerInArea ( side , area ) ; begin
38740: LD_INT 0
38742: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38743: LD_ADDR_VAR 0 3
38747: PUSH
38748: LD_VAR 0 2
38752: PPUSH
38753: LD_INT 81
38755: PUSH
38756: LD_VAR 0 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PPUSH
38765: CALL_OW 70
38769: ST_TO_ADDR
// end ;
38770: LD_VAR 0 3
38774: RET
// export function IsExtension ( b ) ; begin
38775: LD_INT 0
38777: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38778: LD_ADDR_VAR 0 2
38782: PUSH
38783: LD_VAR 0 1
38787: PUSH
38788: LD_INT 23
38790: PUSH
38791: LD_INT 20
38793: PUSH
38794: LD_INT 22
38796: PUSH
38797: LD_INT 17
38799: PUSH
38800: LD_INT 24
38802: PUSH
38803: LD_INT 21
38805: PUSH
38806: LD_INT 19
38808: PUSH
38809: LD_INT 16
38811: PUSH
38812: LD_INT 25
38814: PUSH
38815: LD_INT 18
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: IN
38830: ST_TO_ADDR
// end ;
38831: LD_VAR 0 2
38835: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38836: LD_INT 0
38838: PPUSH
38839: PPUSH
38840: PPUSH
// result := [ ] ;
38841: LD_ADDR_VAR 0 4
38845: PUSH
38846: EMPTY
38847: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38848: LD_ADDR_VAR 0 5
38852: PUSH
38853: LD_VAR 0 2
38857: PPUSH
38858: LD_INT 21
38860: PUSH
38861: LD_INT 3
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PPUSH
38868: CALL_OW 70
38872: ST_TO_ADDR
// if not tmp then
38873: LD_VAR 0 5
38877: NOT
38878: IFFALSE 38882
// exit ;
38880: GO 38946
// if checkLink then
38882: LD_VAR 0 3
38886: IFFALSE 38936
// begin for i in tmp do
38888: LD_ADDR_VAR 0 6
38892: PUSH
38893: LD_VAR 0 5
38897: PUSH
38898: FOR_IN
38899: IFFALSE 38934
// if GetBase ( i ) <> base then
38901: LD_VAR 0 6
38905: PPUSH
38906: CALL_OW 274
38910: PUSH
38911: LD_VAR 0 1
38915: NONEQUAL
38916: IFFALSE 38932
// ComLinkToBase ( base , i ) ;
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_VAR 0 6
38927: PPUSH
38928: CALL_OW 169
38932: GO 38898
38934: POP
38935: POP
// end ; result := tmp ;
38936: LD_ADDR_VAR 0 4
38940: PUSH
38941: LD_VAR 0 5
38945: ST_TO_ADDR
// end ;
38946: LD_VAR 0 4
38950: RET
// export function ComComplete ( units , b ) ; var i ; begin
38951: LD_INT 0
38953: PPUSH
38954: PPUSH
// if not units then
38955: LD_VAR 0 1
38959: NOT
38960: IFFALSE 38964
// exit ;
38962: GO 39054
// for i in units do
38964: LD_ADDR_VAR 0 4
38968: PUSH
38969: LD_VAR 0 1
38973: PUSH
38974: FOR_IN
38975: IFFALSE 39052
// if BuildingStatus ( b ) = bs_build then
38977: LD_VAR 0 2
38981: PPUSH
38982: CALL_OW 461
38986: PUSH
38987: LD_INT 1
38989: EQUAL
38990: IFFALSE 39050
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38992: LD_VAR 0 4
38996: PPUSH
38997: LD_STRING h
38999: PUSH
39000: LD_VAR 0 2
39004: PPUSH
39005: CALL_OW 250
39009: PUSH
39010: LD_VAR 0 2
39014: PPUSH
39015: CALL_OW 251
39019: PUSH
39020: LD_VAR 0 2
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: PPUSH
39046: CALL_OW 446
39050: GO 38974
39052: POP
39053: POP
// end ;
39054: LD_VAR 0 3
39058: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39059: LD_INT 0
39061: PPUSH
39062: PPUSH
39063: PPUSH
39064: PPUSH
39065: PPUSH
39066: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39067: LD_VAR 0 1
39071: NOT
39072: IFTRUE 39089
39074: PUSH
39075: LD_VAR 0 1
39079: PPUSH
39080: CALL_OW 263
39084: PUSH
39085: LD_INT 2
39087: NONEQUAL
39088: OR
39089: IFFALSE 39093
// exit ;
39091: GO 39409
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39093: LD_ADDR_VAR 0 6
39097: PUSH
39098: LD_INT 22
39100: PUSH
39101: LD_VAR 0 1
39105: PPUSH
39106: CALL_OW 255
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 30
39120: PUSH
39121: LD_INT 36
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 34
39130: PUSH
39131: LD_INT 31
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PPUSH
39147: CALL_OW 69
39151: ST_TO_ADDR
// if not tmp then
39152: LD_VAR 0 6
39156: NOT
39157: IFFALSE 39161
// exit ;
39159: GO 39409
// result := [ ] ;
39161: LD_ADDR_VAR 0 2
39165: PUSH
39166: EMPTY
39167: ST_TO_ADDR
// for i in tmp do
39168: LD_ADDR_VAR 0 3
39172: PUSH
39173: LD_VAR 0 6
39177: PUSH
39178: FOR_IN
39179: IFFALSE 39250
// begin t := UnitsInside ( i ) ;
39181: LD_ADDR_VAR 0 4
39185: PUSH
39186: LD_VAR 0 3
39190: PPUSH
39191: CALL_OW 313
39195: ST_TO_ADDR
// if t then
39196: LD_VAR 0 4
39200: IFFALSE 39248
// for j in t do
39202: LD_ADDR_VAR 0 7
39206: PUSH
39207: LD_VAR 0 4
39211: PUSH
39212: FOR_IN
39213: IFFALSE 39246
// result := Replace ( result , result + 1 , j ) ;
39215: LD_ADDR_VAR 0 2
39219: PUSH
39220: LD_VAR 0 2
39224: PPUSH
39225: LD_VAR 0 2
39229: PUSH
39230: LD_INT 1
39232: PLUS
39233: PPUSH
39234: LD_VAR 0 7
39238: PPUSH
39239: CALL_OW 1
39243: ST_TO_ADDR
39244: GO 39212
39246: POP
39247: POP
// end ;
39248: GO 39178
39250: POP
39251: POP
// if not result then
39252: LD_VAR 0 2
39256: NOT
39257: IFFALSE 39261
// exit ;
39259: GO 39409
// mech := result [ 1 ] ;
39261: LD_ADDR_VAR 0 5
39265: PUSH
39266: LD_VAR 0 2
39270: PUSH
39271: LD_INT 1
39273: ARRAY
39274: ST_TO_ADDR
// if result > 1 then
39275: LD_VAR 0 2
39279: PUSH
39280: LD_INT 1
39282: GREATER
39283: IFFALSE 39395
// begin for i = 2 to result do
39285: LD_ADDR_VAR 0 3
39289: PUSH
39290: DOUBLE
39291: LD_INT 2
39293: DEC
39294: ST_TO_ADDR
39295: LD_VAR 0 2
39299: PUSH
39300: FOR_TO
39301: IFFALSE 39393
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39303: LD_ADDR_VAR 0 4
39307: PUSH
39308: LD_VAR 0 2
39312: PUSH
39313: LD_VAR 0 3
39317: ARRAY
39318: PPUSH
39319: LD_INT 3
39321: PPUSH
39322: CALL_OW 259
39326: PUSH
39327: LD_VAR 0 2
39331: PUSH
39332: LD_VAR 0 3
39336: ARRAY
39337: PPUSH
39338: CALL_OW 432
39342: MINUS
39343: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39344: LD_VAR 0 4
39348: PUSH
39349: LD_VAR 0 5
39353: PPUSH
39354: LD_INT 3
39356: PPUSH
39357: CALL_OW 259
39361: PUSH
39362: LD_VAR 0 5
39366: PPUSH
39367: CALL_OW 432
39371: MINUS
39372: GREATEREQUAL
39373: IFFALSE 39391
// mech := result [ i ] ;
39375: LD_ADDR_VAR 0 5
39379: PUSH
39380: LD_VAR 0 2
39384: PUSH
39385: LD_VAR 0 3
39389: ARRAY
39390: ST_TO_ADDR
// end ;
39391: GO 39300
39393: POP
39394: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39395: LD_VAR 0 1
39399: PPUSH
39400: LD_VAR 0 5
39404: PPUSH
39405: CALL_OW 135
// end ;
39409: LD_VAR 0 2
39413: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39414: LD_INT 0
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
39422: PPUSH
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
39428: PPUSH
// result := [ ] ;
39429: LD_ADDR_VAR 0 7
39433: PUSH
39434: EMPTY
39435: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39436: LD_VAR 0 1
39440: PPUSH
39441: CALL_OW 266
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: IN
39456: NOT
39457: IFFALSE 39461
// exit ;
39459: GO 41101
// if name then
39461: LD_VAR 0 3
39465: IFFALSE 39481
// SetBName ( base_dep , name ) ;
39467: LD_VAR 0 1
39471: PPUSH
39472: LD_VAR 0 3
39476: PPUSH
39477: CALL_OW 500
// base := GetBase ( base_dep ) ;
39481: LD_ADDR_VAR 0 15
39485: PUSH
39486: LD_VAR 0 1
39490: PPUSH
39491: CALL_OW 274
39495: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39496: LD_ADDR_VAR 0 16
39500: PUSH
39501: LD_VAR 0 1
39505: PPUSH
39506: CALL_OW 255
39510: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39511: LD_ADDR_VAR 0 17
39515: PUSH
39516: LD_VAR 0 1
39520: PPUSH
39521: CALL_OW 248
39525: ST_TO_ADDR
// if sources then
39526: LD_VAR 0 5
39530: IFFALSE 39577
// for i = 1 to 3 do
39532: LD_ADDR_VAR 0 8
39536: PUSH
39537: DOUBLE
39538: LD_INT 1
39540: DEC
39541: ST_TO_ADDR
39542: LD_INT 3
39544: PUSH
39545: FOR_TO
39546: IFFALSE 39575
// AddResourceType ( base , i , sources [ i ] ) ;
39548: LD_VAR 0 15
39552: PPUSH
39553: LD_VAR 0 8
39557: PPUSH
39558: LD_VAR 0 5
39562: PUSH
39563: LD_VAR 0 8
39567: ARRAY
39568: PPUSH
39569: CALL_OW 276
39573: GO 39545
39575: POP
39576: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39577: LD_ADDR_VAR 0 18
39581: PUSH
39582: LD_VAR 0 15
39586: PPUSH
39587: LD_VAR 0 2
39591: PPUSH
39592: LD_INT 1
39594: PPUSH
39595: CALL 38836 0 3
39599: ST_TO_ADDR
// InitHc ;
39600: CALL_OW 19
// InitUc ;
39604: CALL_OW 18
// uc_side := side ;
39608: LD_ADDR_OWVAR 20
39612: PUSH
39613: LD_VAR 0 16
39617: ST_TO_ADDR
// uc_nation := nation ;
39618: LD_ADDR_OWVAR 21
39622: PUSH
39623: LD_VAR 0 17
39627: ST_TO_ADDR
// if buildings then
39628: LD_VAR 0 18
39632: IFFALSE 40960
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39634: LD_ADDR_VAR 0 19
39638: PUSH
39639: LD_VAR 0 18
39643: PPUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 30
39649: PUSH
39650: LD_INT 29
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 30
39659: PUSH
39660: LD_INT 30
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: LIST
39671: PPUSH
39672: CALL_OW 72
39676: ST_TO_ADDR
// if tmp then
39677: LD_VAR 0 19
39681: IFFALSE 39729
// for i in tmp do
39683: LD_ADDR_VAR 0 8
39687: PUSH
39688: LD_VAR 0 19
39692: PUSH
39693: FOR_IN
39694: IFFALSE 39727
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39696: LD_VAR 0 8
39700: PPUSH
39701: CALL_OW 250
39705: PPUSH
39706: LD_VAR 0 8
39710: PPUSH
39711: CALL_OW 251
39715: PPUSH
39716: LD_VAR 0 16
39720: PPUSH
39721: CALL_OW 441
39725: GO 39693
39727: POP
39728: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39729: LD_VAR 0 18
39733: PPUSH
39734: LD_INT 2
39736: PUSH
39737: LD_INT 30
39739: PUSH
39740: LD_INT 32
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 30
39749: PUSH
39750: LD_INT 33
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: LIST
39761: PPUSH
39762: CALL_OW 72
39766: IFFALSE 39854
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39768: LD_ADDR_VAR 0 8
39772: PUSH
39773: LD_VAR 0 18
39777: PPUSH
39778: LD_INT 2
39780: PUSH
39781: LD_INT 30
39783: PUSH
39784: LD_INT 32
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 30
39793: PUSH
39794: LD_INT 33
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: LIST
39805: PPUSH
39806: CALL_OW 72
39810: PUSH
39811: FOR_IN
39812: IFFALSE 39852
// begin if not GetBWeapon ( i ) then
39814: LD_VAR 0 8
39818: PPUSH
39819: CALL_OW 269
39823: NOT
39824: IFFALSE 39850
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39826: LD_VAR 0 8
39830: PPUSH
39831: LD_VAR 0 8
39835: PPUSH
39836: LD_VAR 0 2
39840: PPUSH
39841: CALL 41106 0 2
39845: PPUSH
39846: CALL_OW 431
// end ;
39850: GO 39811
39852: POP
39853: POP
// end ; for i = 1 to personel do
39854: LD_ADDR_VAR 0 8
39858: PUSH
39859: DOUBLE
39860: LD_INT 1
39862: DEC
39863: ST_TO_ADDR
39864: LD_VAR 0 6
39868: PUSH
39869: FOR_TO
39870: IFFALSE 40940
// begin if i > 4 then
39872: LD_VAR 0 8
39876: PUSH
39877: LD_INT 4
39879: GREATER
39880: IFFALSE 39884
// break ;
39882: GO 40940
// case i of 1 :
39884: LD_VAR 0 8
39888: PUSH
39889: LD_INT 1
39891: DOUBLE
39892: EQUAL
39893: IFTRUE 39897
39895: GO 39977
39897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39898: LD_ADDR_VAR 0 12
39902: PUSH
39903: LD_VAR 0 18
39907: PPUSH
39908: LD_INT 22
39910: PUSH
39911: LD_VAR 0 16
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 58
39922: PUSH
39923: EMPTY
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 30
39931: PUSH
39932: LD_INT 32
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 30
39941: PUSH
39942: LD_INT 4
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 30
39951: PUSH
39952: LD_INT 5
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: PPUSH
39970: CALL_OW 72
39974: ST_TO_ADDR
39975: GO 40199
39977: LD_INT 2
39979: DOUBLE
39980: EQUAL
39981: IFTRUE 39985
39983: GO 40047
39985: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39986: LD_ADDR_VAR 0 12
39990: PUSH
39991: LD_VAR 0 18
39995: PPUSH
39996: LD_INT 22
39998: PUSH
39999: LD_VAR 0 16
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 30
40013: PUSH
40014: LD_INT 0
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 30
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PPUSH
40040: CALL_OW 72
40044: ST_TO_ADDR
40045: GO 40199
40047: LD_INT 3
40049: DOUBLE
40050: EQUAL
40051: IFTRUE 40055
40053: GO 40117
40055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40056: LD_ADDR_VAR 0 12
40060: PUSH
40061: LD_VAR 0 18
40065: PPUSH
40066: LD_INT 22
40068: PUSH
40069: LD_VAR 0 16
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 30
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 30
40093: PUSH
40094: LD_INT 3
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: LIST
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PPUSH
40110: CALL_OW 72
40114: ST_TO_ADDR
40115: GO 40199
40117: LD_INT 4
40119: DOUBLE
40120: EQUAL
40121: IFTRUE 40125
40123: GO 40198
40125: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40126: LD_ADDR_VAR 0 12
40130: PUSH
40131: LD_VAR 0 18
40135: PPUSH
40136: LD_INT 22
40138: PUSH
40139: LD_VAR 0 16
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: LD_INT 30
40153: PUSH
40154: LD_INT 6
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 30
40163: PUSH
40164: LD_INT 7
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 30
40173: PUSH
40174: LD_INT 8
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PPUSH
40191: CALL_OW 72
40195: ST_TO_ADDR
40196: GO 40199
40198: POP
// if i = 1 then
40199: LD_VAR 0 8
40203: PUSH
40204: LD_INT 1
40206: EQUAL
40207: IFFALSE 40318
// begin tmp := [ ] ;
40209: LD_ADDR_VAR 0 19
40213: PUSH
40214: EMPTY
40215: ST_TO_ADDR
// for j in f do
40216: LD_ADDR_VAR 0 9
40220: PUSH
40221: LD_VAR 0 12
40225: PUSH
40226: FOR_IN
40227: IFFALSE 40300
// if GetBType ( j ) = b_bunker then
40229: LD_VAR 0 9
40233: PPUSH
40234: CALL_OW 266
40238: PUSH
40239: LD_INT 32
40241: EQUAL
40242: IFFALSE 40269
// tmp := Insert ( tmp , 1 , j ) else
40244: LD_ADDR_VAR 0 19
40248: PUSH
40249: LD_VAR 0 19
40253: PPUSH
40254: LD_INT 1
40256: PPUSH
40257: LD_VAR 0 9
40261: PPUSH
40262: CALL_OW 2
40266: ST_TO_ADDR
40267: GO 40298
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40269: LD_ADDR_VAR 0 19
40273: PUSH
40274: LD_VAR 0 19
40278: PPUSH
40279: LD_VAR 0 19
40283: PUSH
40284: LD_INT 1
40286: PLUS
40287: PPUSH
40288: LD_VAR 0 9
40292: PPUSH
40293: CALL_OW 2
40297: ST_TO_ADDR
40298: GO 40226
40300: POP
40301: POP
// if tmp then
40302: LD_VAR 0 19
40306: IFFALSE 40318
// f := tmp ;
40308: LD_ADDR_VAR 0 12
40312: PUSH
40313: LD_VAR 0 19
40317: ST_TO_ADDR
// end ; x := personel [ i ] ;
40318: LD_ADDR_VAR 0 13
40322: PUSH
40323: LD_VAR 0 6
40327: PUSH
40328: LD_VAR 0 8
40332: ARRAY
40333: ST_TO_ADDR
// if x = - 1 then
40334: LD_VAR 0 13
40338: PUSH
40339: LD_INT 1
40341: NEG
40342: EQUAL
40343: IFFALSE 40554
// begin for j in f do
40345: LD_ADDR_VAR 0 9
40349: PUSH
40350: LD_VAR 0 12
40354: PUSH
40355: FOR_IN
40356: IFFALSE 40550
// repeat InitHc ;
40358: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40362: LD_VAR 0 9
40366: PPUSH
40367: CALL_OW 266
40371: PUSH
40372: LD_INT 5
40374: EQUAL
40375: IFFALSE 40445
// begin if UnitsInside ( j ) < 3 then
40377: LD_VAR 0 9
40381: PPUSH
40382: CALL_OW 313
40386: PUSH
40387: LD_INT 3
40389: LESS
40390: IFFALSE 40426
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40392: LD_INT 0
40394: PPUSH
40395: LD_INT 5
40397: PUSH
40398: LD_INT 8
40400: PUSH
40401: LD_INT 9
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: LIST
40408: PUSH
40409: LD_VAR 0 17
40413: ARRAY
40414: PPUSH
40415: LD_VAR 0 4
40419: PPUSH
40420: CALL_OW 380
40424: GO 40443
// PrepareHuman ( false , i , skill ) ;
40426: LD_INT 0
40428: PPUSH
40429: LD_VAR 0 8
40433: PPUSH
40434: LD_VAR 0 4
40438: PPUSH
40439: CALL_OW 380
// end else
40443: GO 40462
// PrepareHuman ( false , i , skill ) ;
40445: LD_INT 0
40447: PPUSH
40448: LD_VAR 0 8
40452: PPUSH
40453: LD_VAR 0 4
40457: PPUSH
40458: CALL_OW 380
// un := CreateHuman ;
40462: LD_ADDR_VAR 0 14
40466: PUSH
40467: CALL_OW 44
40471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40472: LD_ADDR_VAR 0 7
40476: PUSH
40477: LD_VAR 0 7
40481: PPUSH
40482: LD_INT 1
40484: PPUSH
40485: LD_VAR 0 14
40489: PPUSH
40490: CALL_OW 2
40494: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40495: LD_VAR 0 14
40499: PPUSH
40500: LD_VAR 0 9
40504: PPUSH
40505: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40509: LD_VAR 0 9
40513: PPUSH
40514: CALL_OW 313
40518: PUSH
40519: LD_INT 6
40521: EQUAL
40522: IFTRUE 40546
40524: PUSH
40525: LD_VAR 0 9
40529: PPUSH
40530: CALL_OW 266
40534: PUSH
40535: LD_INT 32
40537: PUSH
40538: LD_INT 31
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: IN
40545: OR
40546: IFFALSE 40358
40548: GO 40355
40550: POP
40551: POP
// end else
40552: GO 40938
// for j = 1 to x do
40554: LD_ADDR_VAR 0 9
40558: PUSH
40559: DOUBLE
40560: LD_INT 1
40562: DEC
40563: ST_TO_ADDR
40564: LD_VAR 0 13
40568: PUSH
40569: FOR_TO
40570: IFFALSE 40936
// begin InitHc ;
40572: CALL_OW 19
// if not f then
40576: LD_VAR 0 12
40580: NOT
40581: IFFALSE 40670
// begin PrepareHuman ( false , i , skill ) ;
40583: LD_INT 0
40585: PPUSH
40586: LD_VAR 0 8
40590: PPUSH
40591: LD_VAR 0 4
40595: PPUSH
40596: CALL_OW 380
// un := CreateHuman ;
40600: LD_ADDR_VAR 0 14
40604: PUSH
40605: CALL_OW 44
40609: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40610: LD_ADDR_VAR 0 7
40614: PUSH
40615: LD_VAR 0 7
40619: PPUSH
40620: LD_INT 1
40622: PPUSH
40623: LD_VAR 0 14
40627: PPUSH
40628: CALL_OW 2
40632: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40633: LD_VAR 0 14
40637: PPUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: CALL_OW 250
40647: PPUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: CALL_OW 251
40657: PPUSH
40658: LD_INT 10
40660: PPUSH
40661: LD_INT 0
40663: PPUSH
40664: CALL_OW 50
// continue ;
40668: GO 40569
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40670: LD_VAR 0 12
40674: PUSH
40675: LD_INT 1
40677: ARRAY
40678: PPUSH
40679: CALL_OW 313
40683: IFFALSE 40711
40685: PUSH
40686: LD_VAR 0 12
40690: PUSH
40691: LD_INT 1
40693: ARRAY
40694: PPUSH
40695: CALL_OW 266
40699: PUSH
40700: LD_INT 32
40702: PUSH
40703: LD_INT 31
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: IN
40710: AND
40711: IFTRUE 40732
40713: PUSH
40714: LD_VAR 0 12
40718: PUSH
40719: LD_INT 1
40721: ARRAY
40722: PPUSH
40723: CALL_OW 313
40727: PUSH
40728: LD_INT 6
40730: EQUAL
40731: OR
40732: IFFALSE 40752
// f := Delete ( f , 1 ) ;
40734: LD_ADDR_VAR 0 12
40738: PUSH
40739: LD_VAR 0 12
40743: PPUSH
40744: LD_INT 1
40746: PPUSH
40747: CALL_OW 3
40751: ST_TO_ADDR
// if not f then
40752: LD_VAR 0 12
40756: NOT
40757: IFFALSE 40775
// begin x := x + 2 ;
40759: LD_ADDR_VAR 0 13
40763: PUSH
40764: LD_VAR 0 13
40768: PUSH
40769: LD_INT 2
40771: PLUS
40772: ST_TO_ADDR
// continue ;
40773: GO 40569
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40775: LD_VAR 0 12
40779: PUSH
40780: LD_INT 1
40782: ARRAY
40783: PPUSH
40784: CALL_OW 266
40788: PUSH
40789: LD_INT 5
40791: EQUAL
40792: IFFALSE 40866
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40794: LD_VAR 0 12
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PPUSH
40803: CALL_OW 313
40807: PUSH
40808: LD_INT 3
40810: LESS
40811: IFFALSE 40847
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40813: LD_INT 0
40815: PPUSH
40816: LD_INT 5
40818: PUSH
40819: LD_INT 8
40821: PUSH
40822: LD_INT 9
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: LIST
40829: PUSH
40830: LD_VAR 0 17
40834: ARRAY
40835: PPUSH
40836: LD_VAR 0 4
40840: PPUSH
40841: CALL_OW 380
40845: GO 40864
// PrepareHuman ( false , i , skill ) ;
40847: LD_INT 0
40849: PPUSH
40850: LD_VAR 0 8
40854: PPUSH
40855: LD_VAR 0 4
40859: PPUSH
40860: CALL_OW 380
// end else
40864: GO 40883
// PrepareHuman ( false , i , skill ) ;
40866: LD_INT 0
40868: PPUSH
40869: LD_VAR 0 8
40873: PPUSH
40874: LD_VAR 0 4
40878: PPUSH
40879: CALL_OW 380
// un := CreateHuman ;
40883: LD_ADDR_VAR 0 14
40887: PUSH
40888: CALL_OW 44
40892: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40893: LD_ADDR_VAR 0 7
40897: PUSH
40898: LD_VAR 0 7
40902: PPUSH
40903: LD_INT 1
40905: PPUSH
40906: LD_VAR 0 14
40910: PPUSH
40911: CALL_OW 2
40915: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40916: LD_VAR 0 14
40920: PPUSH
40921: LD_VAR 0 12
40925: PUSH
40926: LD_INT 1
40928: ARRAY
40929: PPUSH
40930: CALL_OW 52
// end ;
40934: GO 40569
40936: POP
40937: POP
// end ;
40938: GO 39869
40940: POP
40941: POP
// result := result ^ buildings ;
40942: LD_ADDR_VAR 0 7
40946: PUSH
40947: LD_VAR 0 7
40951: PUSH
40952: LD_VAR 0 18
40956: ADD
40957: ST_TO_ADDR
// end else
40958: GO 41101
// begin for i = 1 to personel do
40960: LD_ADDR_VAR 0 8
40964: PUSH
40965: DOUBLE
40966: LD_INT 1
40968: DEC
40969: ST_TO_ADDR
40970: LD_VAR 0 6
40974: PUSH
40975: FOR_TO
40976: IFFALSE 41099
// begin if i > 4 then
40978: LD_VAR 0 8
40982: PUSH
40983: LD_INT 4
40985: GREATER
40986: IFFALSE 40990
// break ;
40988: GO 41099
// x := personel [ i ] ;
40990: LD_ADDR_VAR 0 13
40994: PUSH
40995: LD_VAR 0 6
40999: PUSH
41000: LD_VAR 0 8
41004: ARRAY
41005: ST_TO_ADDR
// if x = - 1 then
41006: LD_VAR 0 13
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: EQUAL
41015: IFFALSE 41019
// continue ;
41017: GO 40975
// PrepareHuman ( false , i , skill ) ;
41019: LD_INT 0
41021: PPUSH
41022: LD_VAR 0 8
41026: PPUSH
41027: LD_VAR 0 4
41031: PPUSH
41032: CALL_OW 380
// un := CreateHuman ;
41036: LD_ADDR_VAR 0 14
41040: PUSH
41041: CALL_OW 44
41045: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41046: LD_VAR 0 14
41050: PPUSH
41051: LD_VAR 0 1
41055: PPUSH
41056: CALL_OW 250
41060: PPUSH
41061: LD_VAR 0 1
41065: PPUSH
41066: CALL_OW 251
41070: PPUSH
41071: LD_INT 10
41073: PPUSH
41074: LD_INT 0
41076: PPUSH
41077: CALL_OW 50
// result := result ^ un ;
41081: LD_ADDR_VAR 0 7
41085: PUSH
41086: LD_VAR 0 7
41090: PUSH
41091: LD_VAR 0 14
41095: ADD
41096: ST_TO_ADDR
// end ;
41097: GO 40975
41099: POP
41100: POP
// end ; end ;
41101: LD_VAR 0 7
41105: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41106: LD_INT 0
41108: PPUSH
41109: PPUSH
41110: PPUSH
41111: PPUSH
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
// result := false ;
41124: LD_ADDR_VAR 0 3
41128: PUSH
41129: LD_INT 0
41131: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41132: LD_VAR 0 1
41136: NOT
41137: IFTRUE 41162
41139: PUSH
41140: LD_VAR 0 1
41144: PPUSH
41145: CALL_OW 266
41149: PUSH
41150: LD_INT 32
41152: PUSH
41153: LD_INT 33
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: IN
41160: NOT
41161: OR
41162: IFFALSE 41166
// exit ;
41164: GO 42301
// nat := GetNation ( tower ) ;
41166: LD_ADDR_VAR 0 12
41170: PUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: CALL_OW 248
41180: ST_TO_ADDR
// side := GetSide ( tower ) ;
41181: LD_ADDR_VAR 0 16
41185: PUSH
41186: LD_VAR 0 1
41190: PPUSH
41191: CALL_OW 255
41195: ST_TO_ADDR
// x := GetX ( tower ) ;
41196: LD_ADDR_VAR 0 10
41200: PUSH
41201: LD_VAR 0 1
41205: PPUSH
41206: CALL_OW 250
41210: ST_TO_ADDR
// y := GetY ( tower ) ;
41211: LD_ADDR_VAR 0 11
41215: PUSH
41216: LD_VAR 0 1
41220: PPUSH
41221: CALL_OW 251
41225: ST_TO_ADDR
// if not x or not y then
41226: LD_VAR 0 10
41230: NOT
41231: IFTRUE 41240
41233: PUSH
41234: LD_VAR 0 11
41238: NOT
41239: OR
41240: IFFALSE 41244
// exit ;
41242: GO 42301
// weapon := 0 ;
41244: LD_ADDR_VAR 0 18
41248: PUSH
41249: LD_INT 0
41251: ST_TO_ADDR
// fac_list := [ ] ;
41252: LD_ADDR_VAR 0 17
41256: PUSH
41257: EMPTY
41258: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41259: LD_ADDR_VAR 0 6
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 274
41273: PPUSH
41274: LD_VAR 0 2
41278: PPUSH
41279: LD_INT 0
41281: PPUSH
41282: CALL 38836 0 3
41286: PPUSH
41287: LD_INT 30
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PPUSH
41297: CALL_OW 72
41301: ST_TO_ADDR
// if not factories then
41302: LD_VAR 0 6
41306: NOT
41307: IFFALSE 41311
// exit ;
41309: GO 42301
// for i in factories do
41311: LD_ADDR_VAR 0 8
41315: PUSH
41316: LD_VAR 0 6
41320: PUSH
41321: FOR_IN
41322: IFFALSE 41347
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41324: LD_ADDR_VAR 0 17
41328: PUSH
41329: LD_VAR 0 17
41333: PUSH
41334: LD_VAR 0 8
41338: PPUSH
41339: CALL_OW 478
41343: UNION
41344: ST_TO_ADDR
41345: GO 41321
41347: POP
41348: POP
// if not fac_list then
41349: LD_VAR 0 17
41353: NOT
41354: IFFALSE 41358
// exit ;
41356: GO 42301
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41358: LD_ADDR_VAR 0 5
41362: PUSH
41363: LD_INT 4
41365: PUSH
41366: LD_INT 5
41368: PUSH
41369: LD_INT 9
41371: PUSH
41372: LD_INT 10
41374: PUSH
41375: LD_INT 6
41377: PUSH
41378: LD_INT 7
41380: PUSH
41381: LD_INT 11
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 27
41395: PUSH
41396: LD_INT 28
41398: PUSH
41399: LD_INT 26
41401: PUSH
41402: LD_INT 30
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 43
41413: PUSH
41414: LD_INT 44
41416: PUSH
41417: LD_INT 46
41419: PUSH
41420: LD_INT 45
41422: PUSH
41423: LD_INT 47
41425: PUSH
41426: LD_INT 49
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: PUSH
41442: LD_VAR 0 12
41446: ARRAY
41447: ST_TO_ADDR
// list := list isect fac_list ;
41448: LD_ADDR_VAR 0 5
41452: PUSH
41453: LD_VAR 0 5
41457: PUSH
41458: LD_VAR 0 17
41462: ISECT
41463: ST_TO_ADDR
// if not list then
41464: LD_VAR 0 5
41468: NOT
41469: IFFALSE 41473
// exit ;
41471: GO 42301
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41473: LD_VAR 0 12
41477: PUSH
41478: LD_INT 3
41480: EQUAL
41481: IFFALSE 41493
41483: PUSH
41484: LD_INT 49
41486: PUSH
41487: LD_VAR 0 5
41491: IN
41492: AND
41493: IFFALSE 41513
41495: PUSH
41496: LD_INT 31
41498: PPUSH
41499: LD_VAR 0 16
41503: PPUSH
41504: CALL_OW 321
41508: PUSH
41509: LD_INT 2
41511: EQUAL
41512: AND
41513: IFFALSE 41573
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41515: LD_INT 22
41517: PUSH
41518: LD_VAR 0 16
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 35
41529: PUSH
41530: LD_INT 49
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 91
41539: PUSH
41540: LD_VAR 0 1
41544: PUSH
41545: LD_INT 10
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: PPUSH
41558: CALL_OW 69
41562: NOT
41563: IFFALSE 41573
// weapon := ru_time_lapser ;
41565: LD_ADDR_VAR 0 18
41569: PUSH
41570: LD_INT 49
41572: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41573: LD_VAR 0 12
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: IN
41588: IFFALSE 41612
41590: PUSH
41591: LD_INT 11
41593: PUSH
41594: LD_VAR 0 5
41598: IN
41599: IFTRUE 41611
41601: PUSH
41602: LD_INT 30
41604: PUSH
41605: LD_VAR 0 5
41609: IN
41610: OR
41611: AND
41612: IFFALSE 41632
41614: PUSH
41615: LD_INT 6
41617: PPUSH
41618: LD_VAR 0 16
41622: PPUSH
41623: CALL_OW 321
41627: PUSH
41628: LD_INT 2
41630: EQUAL
41631: AND
41632: IFFALSE 41799
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41634: LD_INT 22
41636: PUSH
41637: LD_VAR 0 16
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 35
41651: PUSH
41652: LD_INT 11
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 35
41661: PUSH
41662: LD_INT 30
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 91
41676: PUSH
41677: LD_VAR 0 1
41681: PUSH
41682: LD_INT 18
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: LIST
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: PPUSH
41695: CALL_OW 69
41699: NOT
41700: IFFALSE 41776
41702: PUSH
41703: LD_INT 22
41705: PUSH
41706: LD_VAR 0 16
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 2
41717: PUSH
41718: LD_INT 30
41720: PUSH
41721: LD_INT 32
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 30
41730: PUSH
41731: LD_INT 33
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 91
41745: PUSH
41746: LD_VAR 0 1
41750: PUSH
41751: LD_INT 12
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: LIST
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: PUSH
41764: EMPTY
41765: LIST
41766: PPUSH
41767: CALL_OW 69
41771: PUSH
41772: LD_INT 2
41774: GREATER
41775: AND
41776: IFFALSE 41799
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41778: LD_ADDR_VAR 0 18
41782: PUSH
41783: LD_INT 11
41785: PUSH
41786: LD_INT 30
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_VAR 0 12
41797: ARRAY
41798: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41799: LD_VAR 0 18
41803: NOT
41804: IFFALSE 41824
41806: PUSH
41807: LD_INT 40
41809: PPUSH
41810: LD_VAR 0 16
41814: PPUSH
41815: CALL_OW 321
41819: PUSH
41820: LD_INT 2
41822: EQUAL
41823: AND
41824: IFFALSE 41860
41826: PUSH
41827: LD_INT 7
41829: PUSH
41830: LD_VAR 0 5
41834: IN
41835: IFTRUE 41847
41837: PUSH
41838: LD_INT 28
41840: PUSH
41841: LD_VAR 0 5
41845: IN
41846: OR
41847: IFTRUE 41859
41849: PUSH
41850: LD_INT 45
41852: PUSH
41853: LD_VAR 0 5
41857: IN
41858: OR
41859: AND
41860: IFFALSE 42114
// begin hex := GetHexInfo ( x , y ) ;
41862: LD_ADDR_VAR 0 4
41866: PUSH
41867: LD_VAR 0 10
41871: PPUSH
41872: LD_VAR 0 11
41876: PPUSH
41877: CALL_OW 546
41881: ST_TO_ADDR
// if hex [ 1 ] then
41882: LD_VAR 0 4
41886: PUSH
41887: LD_INT 1
41889: ARRAY
41890: IFFALSE 41894
// exit ;
41892: GO 42301
// height := hex [ 2 ] ;
41894: LD_ADDR_VAR 0 15
41898: PUSH
41899: LD_VAR 0 4
41903: PUSH
41904: LD_INT 2
41906: ARRAY
41907: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41908: LD_ADDR_VAR 0 14
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: LD_INT 3
41921: PUSH
41922: LD_INT 5
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: ST_TO_ADDR
// for i in tmp do
41931: LD_ADDR_VAR 0 8
41935: PUSH
41936: LD_VAR 0 14
41940: PUSH
41941: FOR_IN
41942: IFFALSE 42112
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41944: LD_ADDR_VAR 0 9
41948: PUSH
41949: LD_VAR 0 10
41953: PPUSH
41954: LD_VAR 0 8
41958: PPUSH
41959: LD_INT 5
41961: PPUSH
41962: CALL_OW 272
41966: PUSH
41967: LD_VAR 0 11
41971: PPUSH
41972: LD_VAR 0 8
41976: PPUSH
41977: LD_INT 5
41979: PPUSH
41980: CALL_OW 273
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41989: LD_VAR 0 9
41993: PUSH
41994: LD_INT 1
41996: ARRAY
41997: PPUSH
41998: LD_VAR 0 9
42002: PUSH
42003: LD_INT 2
42005: ARRAY
42006: PPUSH
42007: CALL_OW 488
42011: IFFALSE 42110
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42013: LD_ADDR_VAR 0 4
42017: PUSH
42018: LD_VAR 0 9
42022: PUSH
42023: LD_INT 1
42025: ARRAY
42026: PPUSH
42027: LD_VAR 0 9
42031: PUSH
42032: LD_INT 2
42034: ARRAY
42035: PPUSH
42036: CALL_OW 546
42040: ST_TO_ADDR
// if hex [ 1 ] then
42041: LD_VAR 0 4
42045: PUSH
42046: LD_INT 1
42048: ARRAY
42049: IFFALSE 42053
// continue ;
42051: GO 41941
// h := hex [ 2 ] ;
42053: LD_ADDR_VAR 0 13
42057: PUSH
42058: LD_VAR 0 4
42062: PUSH
42063: LD_INT 2
42065: ARRAY
42066: ST_TO_ADDR
// if h + 7 < height then
42067: LD_VAR 0 13
42071: PUSH
42072: LD_INT 7
42074: PLUS
42075: PUSH
42076: LD_VAR 0 15
42080: LESS
42081: IFFALSE 42110
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42083: LD_ADDR_VAR 0 18
42087: PUSH
42088: LD_INT 7
42090: PUSH
42091: LD_INT 28
42093: PUSH
42094: LD_INT 45
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: PUSH
42102: LD_VAR 0 12
42106: ARRAY
42107: ST_TO_ADDR
// break ;
42108: GO 42112
// end ; end ; end ;
42110: GO 41941
42112: POP
42113: POP
// end ; if not weapon then
42114: LD_VAR 0 18
42118: NOT
42119: IFFALSE 42179
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42121: LD_ADDR_VAR 0 5
42125: PUSH
42126: LD_VAR 0 5
42130: PUSH
42131: LD_INT 11
42133: PUSH
42134: LD_INT 30
42136: PUSH
42137: LD_INT 49
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: DIFF
42145: ST_TO_ADDR
// if not list then
42146: LD_VAR 0 5
42150: NOT
42151: IFFALSE 42155
// exit ;
42153: GO 42301
// weapon := list [ rand ( 1 , list ) ] ;
42155: LD_ADDR_VAR 0 18
42159: PUSH
42160: LD_VAR 0 5
42164: PUSH
42165: LD_INT 1
42167: PPUSH
42168: LD_VAR 0 5
42172: PPUSH
42173: CALL_OW 12
42177: ARRAY
42178: ST_TO_ADDR
// end ; if weapon then
42179: LD_VAR 0 18
42183: IFFALSE 42301
// begin tmp := CostOfWeapon ( weapon ) ;
42185: LD_ADDR_VAR 0 14
42189: PUSH
42190: LD_VAR 0 18
42194: PPUSH
42195: CALL_OW 451
42199: ST_TO_ADDR
// j := GetBase ( tower ) ;
42200: LD_ADDR_VAR 0 9
42204: PUSH
42205: LD_VAR 0 1
42209: PPUSH
42210: CALL_OW 274
42214: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42215: LD_VAR 0 9
42219: PPUSH
42220: LD_INT 1
42222: PPUSH
42223: CALL_OW 275
42227: PUSH
42228: LD_VAR 0 14
42232: PUSH
42233: LD_INT 1
42235: ARRAY
42236: GREATEREQUAL
42237: IFFALSE 42263
42239: PUSH
42240: LD_VAR 0 9
42244: PPUSH
42245: LD_INT 2
42247: PPUSH
42248: CALL_OW 275
42252: PUSH
42253: LD_VAR 0 14
42257: PUSH
42258: LD_INT 2
42260: ARRAY
42261: GREATEREQUAL
42262: AND
42263: IFFALSE 42289
42265: PUSH
42266: LD_VAR 0 9
42270: PPUSH
42271: LD_INT 3
42273: PPUSH
42274: CALL_OW 275
42278: PUSH
42279: LD_VAR 0 14
42283: PUSH
42284: LD_INT 3
42286: ARRAY
42287: GREATEREQUAL
42288: AND
42289: IFFALSE 42301
// result := weapon ;
42291: LD_ADDR_VAR 0 3
42295: PUSH
42296: LD_VAR 0 18
42300: ST_TO_ADDR
// end ; end ;
42301: LD_VAR 0 3
42305: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42306: LD_INT 0
42308: PPUSH
42309: PPUSH
// result := true ;
42310: LD_ADDR_VAR 0 3
42314: PUSH
42315: LD_INT 1
42317: ST_TO_ADDR
// if array1 = array2 then
42318: LD_VAR 0 1
42322: PUSH
42323: LD_VAR 0 2
42327: EQUAL
42328: IFFALSE 42388
// begin for i = 1 to array1 do
42330: LD_ADDR_VAR 0 4
42334: PUSH
42335: DOUBLE
42336: LD_INT 1
42338: DEC
42339: ST_TO_ADDR
42340: LD_VAR 0 1
42344: PUSH
42345: FOR_TO
42346: IFFALSE 42384
// if array1 [ i ] <> array2 [ i ] then
42348: LD_VAR 0 1
42352: PUSH
42353: LD_VAR 0 4
42357: ARRAY
42358: PUSH
42359: LD_VAR 0 2
42363: PUSH
42364: LD_VAR 0 4
42368: ARRAY
42369: NONEQUAL
42370: IFFALSE 42382
// begin result := false ;
42372: LD_ADDR_VAR 0 3
42376: PUSH
42377: LD_INT 0
42379: ST_TO_ADDR
// break ;
42380: GO 42384
// end ;
42382: GO 42345
42384: POP
42385: POP
// end else
42386: GO 42396
// result := false ;
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_INT 0
42395: ST_TO_ADDR
// end ;
42396: LD_VAR 0 3
42400: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42401: LD_INT 0
42403: PPUSH
42404: PPUSH
// if not array1 or not array2 then
42405: LD_VAR 0 1
42409: NOT
42410: IFTRUE 42419
42412: PUSH
42413: LD_VAR 0 2
42417: NOT
42418: OR
42419: IFFALSE 42423
// exit ;
42421: GO 42487
// result := true ;
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 1
42430: ST_TO_ADDR
// for i = 1 to array1 do
42431: LD_ADDR_VAR 0 4
42435: PUSH
42436: DOUBLE
42437: LD_INT 1
42439: DEC
42440: ST_TO_ADDR
42441: LD_VAR 0 1
42445: PUSH
42446: FOR_TO
42447: IFFALSE 42485
// if array1 [ i ] <> array2 [ i ] then
42449: LD_VAR 0 1
42453: PUSH
42454: LD_VAR 0 4
42458: ARRAY
42459: PUSH
42460: LD_VAR 0 2
42464: PUSH
42465: LD_VAR 0 4
42469: ARRAY
42470: NONEQUAL
42471: IFFALSE 42483
// begin result := false ;
42473: LD_ADDR_VAR 0 3
42477: PUSH
42478: LD_INT 0
42480: ST_TO_ADDR
// break ;
42481: GO 42485
// end ;
42483: GO 42446
42485: POP
42486: POP
// end ;
42487: LD_VAR 0 3
42491: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42492: LD_INT 0
42494: PPUSH
42495: PPUSH
42496: PPUSH
// pom := GetBase ( fac ) ;
42497: LD_ADDR_VAR 0 5
42501: PUSH
42502: LD_VAR 0 1
42506: PPUSH
42507: CALL_OW 274
42511: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42512: LD_ADDR_VAR 0 4
42516: PUSH
42517: LD_VAR 0 2
42521: PUSH
42522: LD_INT 1
42524: ARRAY
42525: PPUSH
42526: LD_VAR 0 2
42530: PUSH
42531: LD_INT 2
42533: ARRAY
42534: PPUSH
42535: LD_VAR 0 2
42539: PUSH
42540: LD_INT 3
42542: ARRAY
42543: PPUSH
42544: LD_VAR 0 2
42548: PUSH
42549: LD_INT 4
42551: ARRAY
42552: PPUSH
42553: CALL_OW 449
42557: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42558: LD_ADDR_VAR 0 3
42562: PUSH
42563: LD_VAR 0 5
42567: PPUSH
42568: LD_INT 1
42570: PPUSH
42571: CALL_OW 275
42575: PUSH
42576: LD_VAR 0 4
42580: PUSH
42581: LD_INT 1
42583: ARRAY
42584: GREATEREQUAL
42585: IFFALSE 42611
42587: PUSH
42588: LD_VAR 0 5
42592: PPUSH
42593: LD_INT 2
42595: PPUSH
42596: CALL_OW 275
42600: PUSH
42601: LD_VAR 0 4
42605: PUSH
42606: LD_INT 2
42608: ARRAY
42609: GREATEREQUAL
42610: AND
42611: IFFALSE 42637
42613: PUSH
42614: LD_VAR 0 5
42618: PPUSH
42619: LD_INT 3
42621: PPUSH
42622: CALL_OW 275
42626: PUSH
42627: LD_VAR 0 4
42631: PUSH
42632: LD_INT 3
42634: ARRAY
42635: GREATEREQUAL
42636: AND
42637: ST_TO_ADDR
// end ;
42638: LD_VAR 0 3
42642: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42643: LD_INT 0
42645: PPUSH
42646: PPUSH
42647: PPUSH
42648: PPUSH
// pom := GetBase ( building ) ;
42649: LD_ADDR_VAR 0 3
42653: PUSH
42654: LD_VAR 0 1
42658: PPUSH
42659: CALL_OW 274
42663: ST_TO_ADDR
// if not pom then
42664: LD_VAR 0 3
42668: NOT
42669: IFFALSE 42673
// exit ;
42671: GO 42847
// btype := GetBType ( building ) ;
42673: LD_ADDR_VAR 0 5
42677: PUSH
42678: LD_VAR 0 1
42682: PPUSH
42683: CALL_OW 266
42687: ST_TO_ADDR
// if btype = b_armoury then
42688: LD_VAR 0 5
42692: PUSH
42693: LD_INT 4
42695: EQUAL
42696: IFFALSE 42706
// btype := b_barracks ;
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: LD_INT 5
42705: ST_TO_ADDR
// if btype = b_depot then
42706: LD_VAR 0 5
42710: PUSH
42711: LD_INT 0
42713: EQUAL
42714: IFFALSE 42724
// btype := b_warehouse ;
42716: LD_ADDR_VAR 0 5
42720: PUSH
42721: LD_INT 1
42723: ST_TO_ADDR
// if btype = b_workshop then
42724: LD_VAR 0 5
42728: PUSH
42729: LD_INT 2
42731: EQUAL
42732: IFFALSE 42742
// btype := b_factory ;
42734: LD_ADDR_VAR 0 5
42738: PUSH
42739: LD_INT 3
42741: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42742: LD_ADDR_VAR 0 4
42746: PUSH
42747: LD_VAR 0 5
42751: PPUSH
42752: LD_VAR 0 1
42756: PPUSH
42757: CALL_OW 248
42761: PPUSH
42762: CALL_OW 450
42766: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42767: LD_ADDR_VAR 0 2
42771: PUSH
42772: LD_VAR 0 3
42776: PPUSH
42777: LD_INT 1
42779: PPUSH
42780: CALL_OW 275
42784: PUSH
42785: LD_VAR 0 4
42789: PUSH
42790: LD_INT 1
42792: ARRAY
42793: GREATEREQUAL
42794: IFFALSE 42820
42796: PUSH
42797: LD_VAR 0 3
42801: PPUSH
42802: LD_INT 2
42804: PPUSH
42805: CALL_OW 275
42809: PUSH
42810: LD_VAR 0 4
42814: PUSH
42815: LD_INT 2
42817: ARRAY
42818: GREATEREQUAL
42819: AND
42820: IFFALSE 42846
42822: PUSH
42823: LD_VAR 0 3
42827: PPUSH
42828: LD_INT 3
42830: PPUSH
42831: CALL_OW 275
42835: PUSH
42836: LD_VAR 0 4
42840: PUSH
42841: LD_INT 3
42843: ARRAY
42844: GREATEREQUAL
42845: AND
42846: ST_TO_ADDR
// end ;
42847: LD_VAR 0 2
42851: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42852: LD_INT 0
42854: PPUSH
42855: PPUSH
42856: PPUSH
// pom := GetBase ( building ) ;
42857: LD_ADDR_VAR 0 4
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 274
42871: ST_TO_ADDR
// if not pom then
42872: LD_VAR 0 4
42876: NOT
42877: IFFALSE 42881
// exit ;
42879: GO 42986
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42881: LD_ADDR_VAR 0 5
42885: PUSH
42886: LD_VAR 0 2
42890: PPUSH
42891: LD_VAR 0 1
42895: PPUSH
42896: CALL_OW 248
42900: PPUSH
42901: CALL_OW 450
42905: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42906: LD_ADDR_VAR 0 3
42910: PUSH
42911: LD_VAR 0 4
42915: PPUSH
42916: LD_INT 1
42918: PPUSH
42919: CALL_OW 275
42923: PUSH
42924: LD_VAR 0 5
42928: PUSH
42929: LD_INT 1
42931: ARRAY
42932: GREATEREQUAL
42933: IFFALSE 42959
42935: PUSH
42936: LD_VAR 0 4
42940: PPUSH
42941: LD_INT 2
42943: PPUSH
42944: CALL_OW 275
42948: PUSH
42949: LD_VAR 0 5
42953: PUSH
42954: LD_INT 2
42956: ARRAY
42957: GREATEREQUAL
42958: AND
42959: IFFALSE 42985
42961: PUSH
42962: LD_VAR 0 4
42966: PPUSH
42967: LD_INT 3
42969: PPUSH
42970: CALL_OW 275
42974: PUSH
42975: LD_VAR 0 5
42979: PUSH
42980: LD_INT 3
42982: ARRAY
42983: GREATEREQUAL
42984: AND
42985: ST_TO_ADDR
// end ;
42986: LD_VAR 0 3
42990: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42991: LD_INT 0
42993: PPUSH
42994: PPUSH
42995: PPUSH
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
43000: PPUSH
43001: PPUSH
43002: PPUSH
43003: PPUSH
// result := false ;
43004: LD_ADDR_VAR 0 8
43008: PUSH
43009: LD_INT 0
43011: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43012: LD_VAR 0 5
43016: NOT
43017: IFTRUE 43026
43019: PUSH
43020: LD_VAR 0 1
43024: NOT
43025: OR
43026: IFTRUE 43035
43028: PUSH
43029: LD_VAR 0 2
43033: NOT
43034: OR
43035: IFTRUE 43044
43037: PUSH
43038: LD_VAR 0 3
43042: NOT
43043: OR
43044: IFFALSE 43048
// exit ;
43046: GO 43874
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43048: LD_ADDR_VAR 0 14
43052: PUSH
43053: LD_VAR 0 1
43057: PPUSH
43058: LD_VAR 0 2
43062: PPUSH
43063: LD_VAR 0 3
43067: PPUSH
43068: LD_VAR 0 4
43072: PPUSH
43073: LD_VAR 0 5
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: PPUSH
43082: CALL_OW 248
43086: PPUSH
43087: LD_INT 0
43089: PPUSH
43090: CALL 45155 0 6
43094: ST_TO_ADDR
// if not hexes then
43095: LD_VAR 0 14
43099: NOT
43100: IFFALSE 43104
// exit ;
43102: GO 43874
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43104: LD_ADDR_VAR 0 17
43108: PUSH
43109: LD_VAR 0 5
43113: PPUSH
43114: LD_INT 22
43116: PUSH
43117: LD_VAR 0 13
43121: PPUSH
43122: CALL_OW 255
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: LD_INT 30
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 30
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: LIST
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PPUSH
43163: CALL_OW 72
43167: ST_TO_ADDR
// for i = 1 to hexes do
43168: LD_ADDR_VAR 0 9
43172: PUSH
43173: DOUBLE
43174: LD_INT 1
43176: DEC
43177: ST_TO_ADDR
43178: LD_VAR 0 14
43182: PUSH
43183: FOR_TO
43184: IFFALSE 43872
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43186: LD_ADDR_VAR 0 13
43190: PUSH
43191: LD_VAR 0 14
43195: PUSH
43196: LD_VAR 0 9
43200: ARRAY
43201: PUSH
43202: LD_INT 1
43204: ARRAY
43205: PPUSH
43206: LD_VAR 0 14
43210: PUSH
43211: LD_VAR 0 9
43215: ARRAY
43216: PUSH
43217: LD_INT 2
43219: ARRAY
43220: PPUSH
43221: CALL_OW 428
43225: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43226: LD_VAR 0 14
43230: PUSH
43231: LD_VAR 0 9
43235: ARRAY
43236: PUSH
43237: LD_INT 1
43239: ARRAY
43240: PPUSH
43241: LD_VAR 0 14
43245: PUSH
43246: LD_VAR 0 9
43250: ARRAY
43251: PUSH
43252: LD_INT 2
43254: ARRAY
43255: PPUSH
43256: CALL_OW 351
43260: IFTRUE 43299
43262: PUSH
43263: LD_VAR 0 14
43267: PUSH
43268: LD_VAR 0 9
43272: ARRAY
43273: PUSH
43274: LD_INT 1
43276: ARRAY
43277: PPUSH
43278: LD_VAR 0 14
43282: PUSH
43283: LD_VAR 0 9
43287: ARRAY
43288: PUSH
43289: LD_INT 2
43291: ARRAY
43292: PPUSH
43293: CALL_OW 488
43297: NOT
43298: OR
43299: IFTRUE 43316
43301: PUSH
43302: LD_VAR 0 13
43306: PPUSH
43307: CALL_OW 247
43311: PUSH
43312: LD_INT 3
43314: EQUAL
43315: OR
43316: IFFALSE 43322
// exit ;
43318: POP
43319: POP
43320: GO 43874
// if not tmp then
43322: LD_VAR 0 13
43326: NOT
43327: IFFALSE 43331
// continue ;
43329: GO 43183
// result := true ;
43331: LD_ADDR_VAR 0 8
43335: PUSH
43336: LD_INT 1
43338: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43339: LD_VAR 0 6
43343: IFFALSE 43360
43345: PUSH
43346: LD_VAR 0 13
43350: PPUSH
43351: CALL_OW 247
43355: PUSH
43356: LD_INT 2
43358: EQUAL
43359: AND
43360: IFFALSE 43377
43362: PUSH
43363: LD_VAR 0 13
43367: PPUSH
43368: CALL_OW 263
43372: PUSH
43373: LD_INT 1
43375: EQUAL
43376: AND
43377: IFFALSE 43541
// begin if IsDrivenBy ( tmp ) then
43379: LD_VAR 0 13
43383: PPUSH
43384: CALL_OW 311
43388: IFFALSE 43392
// continue ;
43390: GO 43183
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43392: LD_VAR 0 6
43396: PPUSH
43397: LD_INT 3
43399: PUSH
43400: LD_INT 60
43402: PUSH
43403: EMPTY
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 3
43412: PUSH
43413: LD_INT 55
43415: PUSH
43416: EMPTY
43417: LIST
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PPUSH
43427: CALL_OW 72
43431: IFFALSE 43539
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43433: LD_ADDR_VAR 0 18
43437: PUSH
43438: LD_VAR 0 6
43442: PPUSH
43443: LD_INT 3
43445: PUSH
43446: LD_INT 60
43448: PUSH
43449: EMPTY
43450: LIST
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 55
43461: PUSH
43462: EMPTY
43463: LIST
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PPUSH
43473: CALL_OW 72
43477: PUSH
43478: LD_INT 1
43480: ARRAY
43481: ST_TO_ADDR
// if IsInUnit ( driver ) then
43482: LD_VAR 0 18
43486: PPUSH
43487: CALL_OW 310
43491: IFFALSE 43502
// ComExit ( driver ) ;
43493: LD_VAR 0 18
43497: PPUSH
43498: CALL 69155 0 1
// AddComEnterUnit ( driver , tmp ) ;
43502: LD_VAR 0 18
43506: PPUSH
43507: LD_VAR 0 13
43511: PPUSH
43512: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43516: LD_VAR 0 18
43520: PPUSH
43521: LD_VAR 0 7
43525: PPUSH
43526: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43530: LD_VAR 0 18
43534: PPUSH
43535: CALL_OW 181
// end ; continue ;
43539: GO 43183
// end ; if not cleaners or not tmp in cleaners then
43541: LD_VAR 0 6
43545: NOT
43546: IFTRUE 43561
43548: PUSH
43549: LD_VAR 0 13
43553: PUSH
43554: LD_VAR 0 6
43558: IN
43559: NOT
43560: OR
43561: IFFALSE 43870
// begin if dep then
43563: LD_VAR 0 17
43567: IFFALSE 43703
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43569: LD_ADDR_VAR 0 16
43573: PUSH
43574: LD_VAR 0 17
43578: PUSH
43579: LD_INT 1
43581: ARRAY
43582: PPUSH
43583: CALL_OW 250
43587: PPUSH
43588: LD_VAR 0 17
43592: PUSH
43593: LD_INT 1
43595: ARRAY
43596: PPUSH
43597: CALL_OW 254
43601: PPUSH
43602: LD_INT 5
43604: PPUSH
43605: CALL_OW 272
43609: PUSH
43610: LD_VAR 0 17
43614: PUSH
43615: LD_INT 1
43617: ARRAY
43618: PPUSH
43619: CALL_OW 251
43623: PPUSH
43624: LD_VAR 0 17
43628: PUSH
43629: LD_INT 1
43631: ARRAY
43632: PPUSH
43633: CALL_OW 254
43637: PPUSH
43638: LD_INT 5
43640: PPUSH
43641: CALL_OW 273
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43650: LD_VAR 0 16
43654: PUSH
43655: LD_INT 1
43657: ARRAY
43658: PPUSH
43659: LD_VAR 0 16
43663: PUSH
43664: LD_INT 2
43666: ARRAY
43667: PPUSH
43668: CALL_OW 488
43672: IFFALSE 43703
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43674: LD_VAR 0 13
43678: PPUSH
43679: LD_VAR 0 16
43683: PUSH
43684: LD_INT 1
43686: ARRAY
43687: PPUSH
43688: LD_VAR 0 16
43692: PUSH
43693: LD_INT 2
43695: ARRAY
43696: PPUSH
43697: CALL_OW 111
// continue ;
43701: GO 43183
// end ; end ; r := GetDir ( tmp ) ;
43703: LD_ADDR_VAR 0 15
43707: PUSH
43708: LD_VAR 0 13
43712: PPUSH
43713: CALL_OW 254
43717: ST_TO_ADDR
// if r = 5 then
43718: LD_VAR 0 15
43722: PUSH
43723: LD_INT 5
43725: EQUAL
43726: IFFALSE 43736
// r := 0 ;
43728: LD_ADDR_VAR 0 15
43732: PUSH
43733: LD_INT 0
43735: ST_TO_ADDR
// for j = r to 5 do
43736: LD_ADDR_VAR 0 10
43740: PUSH
43741: DOUBLE
43742: LD_VAR 0 15
43746: DEC
43747: ST_TO_ADDR
43748: LD_INT 5
43750: PUSH
43751: FOR_TO
43752: IFFALSE 43868
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43754: LD_ADDR_VAR 0 11
43758: PUSH
43759: LD_VAR 0 13
43763: PPUSH
43764: CALL_OW 250
43768: PPUSH
43769: LD_VAR 0 10
43773: PPUSH
43774: LD_INT 2
43776: PPUSH
43777: CALL_OW 272
43781: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43782: LD_ADDR_VAR 0 12
43786: PUSH
43787: LD_VAR 0 13
43791: PPUSH
43792: CALL_OW 251
43796: PPUSH
43797: LD_VAR 0 10
43801: PPUSH
43802: LD_INT 2
43804: PPUSH
43805: CALL_OW 273
43809: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43810: LD_VAR 0 11
43814: PPUSH
43815: LD_VAR 0 12
43819: PPUSH
43820: CALL_OW 488
43824: IFFALSE 43843
43826: PUSH
43827: LD_VAR 0 11
43831: PPUSH
43832: LD_VAR 0 12
43836: PPUSH
43837: CALL_OW 428
43841: NOT
43842: AND
43843: IFFALSE 43866
// begin ComMoveXY ( tmp , _x , _y ) ;
43845: LD_VAR 0 13
43849: PPUSH
43850: LD_VAR 0 11
43854: PPUSH
43855: LD_VAR 0 12
43859: PPUSH
43860: CALL_OW 111
// break ;
43864: GO 43868
// end ; end ;
43866: GO 43751
43868: POP
43869: POP
// end ; end ;
43870: GO 43183
43872: POP
43873: POP
// end ;
43874: LD_VAR 0 8
43878: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43879: LD_INT 0
43881: PPUSH
// result := true ;
43882: LD_ADDR_VAR 0 3
43886: PUSH
43887: LD_INT 1
43889: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43890: LD_VAR 0 2
43894: PUSH
43895: LD_INT 24
43897: DOUBLE
43898: EQUAL
43899: IFTRUE 43909
43901: LD_INT 33
43903: DOUBLE
43904: EQUAL
43905: IFTRUE 43909
43907: GO 43934
43909: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43910: LD_ADDR_VAR 0 3
43914: PUSH
43915: LD_INT 32
43917: PPUSH
43918: LD_VAR 0 1
43922: PPUSH
43923: CALL_OW 321
43927: PUSH
43928: LD_INT 2
43930: EQUAL
43931: ST_TO_ADDR
43932: GO 44250
43934: LD_INT 20
43936: DOUBLE
43937: EQUAL
43938: IFTRUE 43942
43940: GO 43967
43942: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43943: LD_ADDR_VAR 0 3
43947: PUSH
43948: LD_INT 6
43950: PPUSH
43951: LD_VAR 0 1
43955: PPUSH
43956: CALL_OW 321
43960: PUSH
43961: LD_INT 2
43963: EQUAL
43964: ST_TO_ADDR
43965: GO 44250
43967: LD_INT 22
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43981
43973: LD_INT 36
43975: DOUBLE
43976: EQUAL
43977: IFTRUE 43981
43979: GO 44006
43981: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43982: LD_ADDR_VAR 0 3
43986: PUSH
43987: LD_INT 15
43989: PPUSH
43990: LD_VAR 0 1
43994: PPUSH
43995: CALL_OW 321
43999: PUSH
44000: LD_INT 2
44002: EQUAL
44003: ST_TO_ADDR
44004: GO 44250
44006: LD_INT 30
44008: DOUBLE
44009: EQUAL
44010: IFTRUE 44014
44012: GO 44039
44014: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44015: LD_ADDR_VAR 0 3
44019: PUSH
44020: LD_INT 20
44022: PPUSH
44023: LD_VAR 0 1
44027: PPUSH
44028: CALL_OW 321
44032: PUSH
44033: LD_INT 2
44035: EQUAL
44036: ST_TO_ADDR
44037: GO 44250
44039: LD_INT 28
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44053
44045: LD_INT 21
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 44078
44053: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44054: LD_ADDR_VAR 0 3
44058: PUSH
44059: LD_INT 21
44061: PPUSH
44062: LD_VAR 0 1
44066: PPUSH
44067: CALL_OW 321
44071: PUSH
44072: LD_INT 2
44074: EQUAL
44075: ST_TO_ADDR
44076: GO 44250
44078: LD_INT 16
44080: DOUBLE
44081: EQUAL
44082: IFTRUE 44086
44084: GO 44111
44086: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44087: LD_ADDR_VAR 0 3
44091: PUSH
44092: LD_INT 84
44094: PPUSH
44095: LD_VAR 0 1
44099: PPUSH
44100: CALL_OW 321
44104: PUSH
44105: LD_INT 2
44107: EQUAL
44108: ST_TO_ADDR
44109: GO 44250
44111: LD_INT 19
44113: DOUBLE
44114: EQUAL
44115: IFTRUE 44125
44117: LD_INT 23
44119: DOUBLE
44120: EQUAL
44121: IFTRUE 44125
44123: GO 44150
44125: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44126: LD_ADDR_VAR 0 3
44130: PUSH
44131: LD_INT 83
44133: PPUSH
44134: LD_VAR 0 1
44138: PPUSH
44139: CALL_OW 321
44143: PUSH
44144: LD_INT 2
44146: EQUAL
44147: ST_TO_ADDR
44148: GO 44250
44150: LD_INT 17
44152: DOUBLE
44153: EQUAL
44154: IFTRUE 44158
44156: GO 44183
44158: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44159: LD_ADDR_VAR 0 3
44163: PUSH
44164: LD_INT 39
44166: PPUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: CALL_OW 321
44176: PUSH
44177: LD_INT 2
44179: EQUAL
44180: ST_TO_ADDR
44181: GO 44250
44183: LD_INT 18
44185: DOUBLE
44186: EQUAL
44187: IFTRUE 44191
44189: GO 44216
44191: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44192: LD_ADDR_VAR 0 3
44196: PUSH
44197: LD_INT 40
44199: PPUSH
44200: LD_VAR 0 1
44204: PPUSH
44205: CALL_OW 321
44209: PUSH
44210: LD_INT 2
44212: EQUAL
44213: ST_TO_ADDR
44214: GO 44250
44216: LD_INT 27
44218: DOUBLE
44219: EQUAL
44220: IFTRUE 44224
44222: GO 44249
44224: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44225: LD_ADDR_VAR 0 3
44229: PUSH
44230: LD_INT 35
44232: PPUSH
44233: LD_VAR 0 1
44237: PPUSH
44238: CALL_OW 321
44242: PUSH
44243: LD_INT 2
44245: EQUAL
44246: ST_TO_ADDR
44247: GO 44250
44249: POP
// end ;
44250: LD_VAR 0 3
44254: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44255: LD_INT 0
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
44263: PPUSH
44264: PPUSH
44265: PPUSH
44266: PPUSH
44267: PPUSH
// result := false ;
44268: LD_ADDR_VAR 0 6
44272: PUSH
44273: LD_INT 0
44275: ST_TO_ADDR
// if btype = b_depot then
44276: LD_VAR 0 2
44280: PUSH
44281: LD_INT 0
44283: EQUAL
44284: IFFALSE 44296
// begin result := true ;
44286: LD_ADDR_VAR 0 6
44290: PUSH
44291: LD_INT 1
44293: ST_TO_ADDR
// exit ;
44294: GO 45150
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44296: LD_VAR 0 1
44300: NOT
44301: IFTRUE 44326
44303: PUSH
44304: LD_VAR 0 1
44308: PPUSH
44309: CALL_OW 266
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: IN
44324: NOT
44325: OR
44326: IFTRUE 44335
44328: PUSH
44329: LD_VAR 0 2
44333: NOT
44334: OR
44335: IFTRUE 44371
44337: PUSH
44338: LD_VAR 0 5
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: LD_INT 1
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: LD_INT 3
44354: PUSH
44355: LD_INT 4
44357: PUSH
44358: LD_INT 5
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: IN
44369: NOT
44370: OR
44371: IFTRUE 44390
44373: PUSH
44374: LD_VAR 0 3
44378: PPUSH
44379: LD_VAR 0 4
44383: PPUSH
44384: CALL_OW 488
44388: NOT
44389: OR
44390: IFFALSE 44394
// exit ;
44392: GO 45150
// side := GetSide ( depot ) ;
44394: LD_ADDR_VAR 0 9
44398: PUSH
44399: LD_VAR 0 1
44403: PPUSH
44404: CALL_OW 255
44408: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44409: LD_VAR 0 9
44413: PPUSH
44414: LD_VAR 0 2
44418: PPUSH
44419: CALL 43879 0 2
44423: NOT
44424: IFFALSE 44428
// exit ;
44426: GO 45150
// pom := GetBase ( depot ) ;
44428: LD_ADDR_VAR 0 10
44432: PUSH
44433: LD_VAR 0 1
44437: PPUSH
44438: CALL_OW 274
44442: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44443: LD_ADDR_VAR 0 11
44447: PUSH
44448: LD_VAR 0 2
44452: PPUSH
44453: LD_VAR 0 1
44457: PPUSH
44458: CALL_OW 248
44462: PPUSH
44463: CALL_OW 450
44467: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44468: LD_VAR 0 10
44472: PPUSH
44473: LD_INT 1
44475: PPUSH
44476: CALL_OW 275
44480: PUSH
44481: LD_VAR 0 11
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: GREATEREQUAL
44490: IFFALSE 44516
44492: PUSH
44493: LD_VAR 0 10
44497: PPUSH
44498: LD_INT 2
44500: PPUSH
44501: CALL_OW 275
44505: PUSH
44506: LD_VAR 0 11
44510: PUSH
44511: LD_INT 2
44513: ARRAY
44514: GREATEREQUAL
44515: AND
44516: IFFALSE 44542
44518: PUSH
44519: LD_VAR 0 10
44523: PPUSH
44524: LD_INT 3
44526: PPUSH
44527: CALL_OW 275
44531: PUSH
44532: LD_VAR 0 11
44536: PUSH
44537: LD_INT 3
44539: ARRAY
44540: GREATEREQUAL
44541: AND
44542: NOT
44543: IFFALSE 44547
// exit ;
44545: GO 45150
// if GetBType ( depot ) = b_depot then
44547: LD_VAR 0 1
44551: PPUSH
44552: CALL_OW 266
44556: PUSH
44557: LD_INT 0
44559: EQUAL
44560: IFFALSE 44572
// dist := 28 else
44562: LD_ADDR_VAR 0 14
44566: PUSH
44567: LD_INT 28
44569: ST_TO_ADDR
44570: GO 44580
// dist := 36 ;
44572: LD_ADDR_VAR 0 14
44576: PUSH
44577: LD_INT 36
44579: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44580: LD_VAR 0 1
44584: PPUSH
44585: LD_VAR 0 3
44589: PPUSH
44590: LD_VAR 0 4
44594: PPUSH
44595: CALL_OW 297
44599: PUSH
44600: LD_VAR 0 14
44604: GREATER
44605: IFFALSE 44609
// exit ;
44607: GO 45150
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44609: LD_ADDR_VAR 0 12
44613: PUSH
44614: LD_VAR 0 2
44618: PPUSH
44619: LD_VAR 0 3
44623: PPUSH
44624: LD_VAR 0 4
44628: PPUSH
44629: LD_VAR 0 5
44633: PPUSH
44634: LD_VAR 0 1
44638: PPUSH
44639: CALL_OW 248
44643: PPUSH
44644: LD_INT 0
44646: PPUSH
44647: CALL 45155 0 6
44651: ST_TO_ADDR
// if not hexes then
44652: LD_VAR 0 12
44656: NOT
44657: IFFALSE 44661
// exit ;
44659: GO 45150
// hex := GetHexInfo ( x , y ) ;
44661: LD_ADDR_VAR 0 15
44665: PUSH
44666: LD_VAR 0 3
44670: PPUSH
44671: LD_VAR 0 4
44675: PPUSH
44676: CALL_OW 546
44680: ST_TO_ADDR
// if hex [ 1 ] then
44681: LD_VAR 0 15
44685: PUSH
44686: LD_INT 1
44688: ARRAY
44689: IFFALSE 44693
// exit ;
44691: GO 45150
// height := hex [ 2 ] ;
44693: LD_ADDR_VAR 0 13
44697: PUSH
44698: LD_VAR 0 15
44702: PUSH
44703: LD_INT 2
44705: ARRAY
44706: ST_TO_ADDR
// for i = 1 to hexes do
44707: LD_ADDR_VAR 0 7
44711: PUSH
44712: DOUBLE
44713: LD_INT 1
44715: DEC
44716: ST_TO_ADDR
44717: LD_VAR 0 12
44721: PUSH
44722: FOR_TO
44723: IFFALSE 45067
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44725: LD_VAR 0 12
44729: PUSH
44730: LD_VAR 0 7
44734: ARRAY
44735: PUSH
44736: LD_INT 1
44738: ARRAY
44739: PPUSH
44740: LD_VAR 0 12
44744: PUSH
44745: LD_VAR 0 7
44749: ARRAY
44750: PUSH
44751: LD_INT 2
44753: ARRAY
44754: PPUSH
44755: CALL_OW 488
44759: NOT
44760: IFTRUE 44802
44762: PUSH
44763: LD_VAR 0 12
44767: PUSH
44768: LD_VAR 0 7
44772: ARRAY
44773: PUSH
44774: LD_INT 1
44776: ARRAY
44777: PPUSH
44778: LD_VAR 0 12
44782: PUSH
44783: LD_VAR 0 7
44787: ARRAY
44788: PUSH
44789: LD_INT 2
44791: ARRAY
44792: PPUSH
44793: CALL_OW 428
44797: PUSH
44798: LD_INT 0
44800: GREATER
44801: OR
44802: IFTRUE 44840
44804: PUSH
44805: LD_VAR 0 12
44809: PUSH
44810: LD_VAR 0 7
44814: ARRAY
44815: PUSH
44816: LD_INT 1
44818: ARRAY
44819: PPUSH
44820: LD_VAR 0 12
44824: PUSH
44825: LD_VAR 0 7
44829: ARRAY
44830: PUSH
44831: LD_INT 2
44833: ARRAY
44834: PPUSH
44835: CALL_OW 351
44839: OR
44840: IFFALSE 44846
// exit ;
44842: POP
44843: POP
44844: GO 45150
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44846: LD_ADDR_VAR 0 8
44850: PUSH
44851: LD_VAR 0 12
44855: PUSH
44856: LD_VAR 0 7
44860: ARRAY
44861: PUSH
44862: LD_INT 1
44864: ARRAY
44865: PPUSH
44866: LD_VAR 0 12
44870: PUSH
44871: LD_VAR 0 7
44875: ARRAY
44876: PUSH
44877: LD_INT 2
44879: ARRAY
44880: PPUSH
44881: CALL_OW 546
44885: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44886: LD_VAR 0 8
44890: PUSH
44891: LD_INT 1
44893: ARRAY
44894: IFTRUE 44916
44896: PUSH
44897: LD_VAR 0 8
44901: PUSH
44902: LD_INT 2
44904: ARRAY
44905: PUSH
44906: LD_VAR 0 13
44910: PUSH
44911: LD_INT 2
44913: PLUS
44914: GREATER
44915: OR
44916: IFTRUE 44938
44918: PUSH
44919: LD_VAR 0 8
44923: PUSH
44924: LD_INT 2
44926: ARRAY
44927: PUSH
44928: LD_VAR 0 13
44932: PUSH
44933: LD_INT 2
44935: MINUS
44936: LESS
44937: OR
44938: IFTRUE 45006
44940: PUSH
44941: LD_VAR 0 8
44945: PUSH
44946: LD_INT 3
44948: ARRAY
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 8
44955: PUSH
44956: LD_INT 9
44958: PUSH
44959: LD_INT 10
44961: PUSH
44962: LD_INT 11
44964: PUSH
44965: LD_INT 12
44967: PUSH
44968: LD_INT 13
44970: PUSH
44971: LD_INT 16
44973: PUSH
44974: LD_INT 17
44976: PUSH
44977: LD_INT 18
44979: PUSH
44980: LD_INT 19
44982: PUSH
44983: LD_INT 20
44985: PUSH
44986: LD_INT 21
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: IN
45004: NOT
45005: OR
45006: IFTRUE 45019
45008: PUSH
45009: LD_VAR 0 8
45013: PUSH
45014: LD_INT 5
45016: ARRAY
45017: NOT
45018: OR
45019: IFTRUE 45059
45021: PUSH
45022: LD_VAR 0 8
45026: PUSH
45027: LD_INT 6
45029: ARRAY
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 7
45039: PUSH
45040: LD_INT 9
45042: PUSH
45043: LD_INT 10
45045: PUSH
45046: LD_INT 11
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: IN
45057: NOT
45058: OR
45059: IFFALSE 45065
// exit ;
45061: POP
45062: POP
45063: GO 45150
// end ;
45065: GO 44722
45067: POP
45068: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45069: LD_VAR 0 9
45073: PPUSH
45074: LD_VAR 0 3
45078: PPUSH
45079: LD_VAR 0 4
45083: PPUSH
45084: LD_INT 20
45086: PPUSH
45087: CALL 36969 0 4
45091: PUSH
45092: LD_INT 4
45094: ARRAY
45095: IFFALSE 45099
// exit ;
45097: GO 45150
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45099: LD_VAR 0 2
45103: PUSH
45104: LD_INT 29
45106: PUSH
45107: LD_INT 30
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: IN
45114: IFFALSE 45138
45116: PUSH
45117: LD_VAR 0 3
45121: PPUSH
45122: LD_VAR 0 4
45126: PPUSH
45127: LD_VAR 0 9
45131: PPUSH
45132: CALL_OW 440
45136: NOT
45137: AND
45138: IFFALSE 45142
// exit ;
45140: GO 45150
// result := true ;
45142: LD_ADDR_VAR 0 6
45146: PUSH
45147: LD_INT 1
45149: ST_TO_ADDR
// end ;
45150: LD_VAR 0 6
45154: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45155: LD_INT 0
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
45162: PPUSH
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
45173: PPUSH
45174: PPUSH
45175: PPUSH
45176: PPUSH
45177: PPUSH
45178: PPUSH
45179: PPUSH
45180: PPUSH
45181: PPUSH
45182: PPUSH
45183: PPUSH
45184: PPUSH
45185: PPUSH
45186: PPUSH
45187: PPUSH
45188: PPUSH
45189: PPUSH
45190: PPUSH
45191: PPUSH
45192: PPUSH
45193: PPUSH
45194: PPUSH
45195: PPUSH
45196: PPUSH
45197: PPUSH
45198: PPUSH
45199: PPUSH
45200: PPUSH
45201: PPUSH
45202: PPUSH
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
// result = [ ] ;
45215: LD_ADDR_VAR 0 7
45219: PUSH
45220: EMPTY
45221: ST_TO_ADDR
// temp_list = [ ] ;
45222: LD_ADDR_VAR 0 9
45226: PUSH
45227: EMPTY
45228: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45229: LD_VAR 0 4
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 5
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: IN
45260: NOT
45261: IFTRUE 45304
45263: PUSH
45264: LD_VAR 0 1
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: IN
45279: IFFALSE 45303
45281: PUSH
45282: LD_VAR 0 5
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: LD_INT 3
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: IN
45301: NOT
45302: AND
45303: OR
45304: IFFALSE 45308
// exit ;
45306: GO 63707
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45308: LD_VAR 0 1
45312: PUSH
45313: LD_INT 6
45315: PUSH
45316: LD_INT 7
45318: PUSH
45319: LD_INT 8
45321: PUSH
45322: LD_INT 13
45324: PUSH
45325: LD_INT 12
45327: PUSH
45328: LD_INT 15
45330: PUSH
45331: LD_INT 11
45333: PUSH
45334: LD_INT 14
45336: PUSH
45337: LD_INT 10
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: IN
45351: IFFALSE 45361
// btype = b_lab ;
45353: LD_ADDR_VAR 0 1
45357: PUSH
45358: LD_INT 6
45360: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45361: LD_VAR 0 6
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: LIST
45379: IN
45380: NOT
45381: IFTRUE 45449
45383: PUSH
45384: LD_VAR 0 1
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: LD_INT 2
45397: PUSH
45398: LD_INT 3
45400: PUSH
45401: LD_INT 6
45403: PUSH
45404: LD_INT 36
45406: PUSH
45407: LD_INT 4
45409: PUSH
45410: LD_INT 5
45412: PUSH
45413: LD_INT 31
45415: PUSH
45416: LD_INT 32
45418: PUSH
45419: LD_INT 33
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: IN
45435: NOT
45436: IFFALSE 45448
45438: PUSH
45439: LD_VAR 0 6
45443: PUSH
45444: LD_INT 1
45446: EQUAL
45447: AND
45448: OR
45449: IFTRUE 45481
45451: PUSH
45452: LD_VAR 0 1
45456: PUSH
45457: LD_INT 2
45459: PUSH
45460: LD_INT 3
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: IN
45467: NOT
45468: IFFALSE 45480
45470: PUSH
45471: LD_VAR 0 6
45475: PUSH
45476: LD_INT 2
45478: EQUAL
45479: AND
45480: OR
45481: IFFALSE 45491
// mode = 0 ;
45483: LD_ADDR_VAR 0 6
45487: PUSH
45488: LD_INT 0
45490: ST_TO_ADDR
// case mode of 0 :
45491: LD_VAR 0 6
45495: PUSH
45496: LD_INT 0
45498: DOUBLE
45499: EQUAL
45500: IFTRUE 45504
45502: GO 56957
45504: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45505: LD_ADDR_VAR 0 11
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 1
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: LD_INT 1
45578: NEG
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 3
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45698: LD_ADDR_VAR 0 12
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: LD_INT 1
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: NEG
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45894: LD_ADDR_VAR 0 13
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 0
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: PUSH
45933: LD_INT 1
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 0
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 0
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: NEG
46030: PUSH
46031: LD_INT 2
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: LD_INT 3
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 3
46053: NEG
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 3
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46093: LD_ADDR_VAR 0 14
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 0
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: LD_INT 3
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 2
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46289: LD_ADDR_VAR 0 15
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 2
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 0
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 2
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 3
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 3
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46482: LD_ADDR_VAR 0 16
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: LD_INT 2
46567: NEG
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: LD_INT 1
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: LD_INT 2
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: NEG
46618: PUSH
46619: LD_INT 2
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46675: LD_ADDR_VAR 0 17
46679: PUSH
46680: LD_INT 0
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: PUSH
46714: LD_INT 1
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: LD_INT 2
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 2
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 2
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 2
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: LD_INT 2
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46905: LD_ADDR_VAR 0 18
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47135: LD_ADDR_VAR 0 19
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 0
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 0
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: EMPTY
47199: LIST
47200: LIST
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 2
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 2
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 2
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47365: LD_ADDR_VAR 0 20
47369: PUSH
47370: LD_INT 0
47372: PUSH
47373: LD_INT 0
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: LD_INT 2
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47595: LD_ADDR_VAR 0 21
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: LD_INT 2
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 2
47720: PUSH
47721: LD_INT 1
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47825: LD_ADDR_VAR 0 22
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: NEG
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 1
47894: NEG
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 2
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48055: LD_ADDR_VAR 0 23
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 0
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: LD_INT 1
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 1
48136: NEG
48137: PUSH
48138: LD_INT 2
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: EMPTY
48154: LIST
48155: LIST
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 2
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 2
48254: NEG
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: LD_INT 3
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 3
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: LD_INT 2
48293: NEG
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48335: LD_ADDR_VAR 0 24
48339: PUSH
48340: LD_INT 0
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 2
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 2
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: NEG
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: NEG
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: NEG
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 2
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: LD_INT 1
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 3
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48611: LD_ADDR_VAR 0 25
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48885: LD_ADDR_VAR 0 26
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: PUSH
49021: LD_INT 2
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 2
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 2
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 2
49061: NEG
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: LD_INT 2
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 3
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 3
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49161: LD_ADDR_VAR 0 27
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 2
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: LD_INT 2
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: NEG
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 2
49337: NEG
49338: PUSH
49339: LD_INT 0
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 2
49383: NEG
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: NEG
49407: PUSH
49408: LD_INT 2
49410: NEG
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49441: LD_ADDR_VAR 0 28
49445: PUSH
49446: LD_INT 0
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 0
49458: PUSH
49459: LD_INT 1
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: LD_INT 2
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 3
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 3
49688: NEG
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49723: LD_ADDR_VAR 0 29
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 2
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 2
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 2
49901: NEG
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: LD_INT 3
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: NEG
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50002: LD_ADDR_VAR 0 30
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 2
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 3
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50280: LD_ADDR_VAR 0 31
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 1
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 0
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: NEG
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: NEG
50470: PUSH
50471: LD_INT 3
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 3
50523: NEG
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50558: LD_ADDR_VAR 0 32
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 1
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 1
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 2
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 1
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 2
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: LD_INT 3
50751: NEG
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50836: LD_ADDR_VAR 0 33
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: NEG
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 3
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51115: LD_ADDR_VAR 0 34
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 0
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: LD_INT 0
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: LD_INT 0
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: NEG
51295: PUSH
51296: LD_INT 2
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 3
51310: NEG
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: PUSH
51319: LD_INT 2
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: LD_INT 3
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 3
51360: NEG
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51395: LD_ADDR_VAR 0 35
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51507: LD_ADDR_VAR 0 36
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: NEG
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51619: LD_ADDR_VAR 0 37
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51731: LD_ADDR_VAR 0 38
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51843: LD_ADDR_VAR 0 39
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51955: LD_ADDR_VAR 0 40
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52067: LD_ADDR_VAR 0 41
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 1
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 1
52148: NEG
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: NEG
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: LD_INT 3
52261: NEG
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 2
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 3
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: LD_INT 1
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 3
52300: PUSH
52301: LD_INT 2
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 3
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 2
52320: PUSH
52321: LD_INT 3
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 2
52330: NEG
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 3
52352: NEG
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: NEG
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52417: LD_ADDR_VAR 0 42
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: PUSH
52446: LD_INT 0
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 1
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 0
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: NEG
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 0
52562: PUSH
52563: LD_INT 2
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: NEG
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 2
52595: NEG
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: LD_INT 3
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: LD_INT 3
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: LD_INT 2
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: LD_INT 3
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: LD_INT 3
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52767: LD_ADDR_VAR 0 43
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 0
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: LD_INT 1
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 2
52933: NEG
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: LD_INT 3
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 3
52971: NEG
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 3
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 3
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: LD_INT 2
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53115: LD_ADDR_VAR 0 44
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: LD_INT 1
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: LD_INT 2
53297: NEG
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: LD_INT 3
53309: NEG
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 1
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: LD_INT 1
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 3
53389: NEG
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 3
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 3
53412: NEG
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: NEG
53425: PUSH
53426: LD_INT 3
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53465: LD_ADDR_VAR 0 45
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 2
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: LD_INT 3
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: LD_INT 3
53671: NEG
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: LD_INT 3
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 0
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: NEG
53775: PUSH
53776: LD_INT 3
53778: NEG
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53815: LD_ADDR_VAR 0 46
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: LD_INT 1
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 2
53992: NEG
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 3
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 0
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: LD_INT 2
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: PUSH
54039: LD_INT 1
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 3
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: LD_INT 1
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54163: LD_ADDR_VAR 0 47
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 2
54248: NEG
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: NEG
54291: PUSH
54292: LD_INT 2
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54314: LD_ADDR_VAR 0 48
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54461: LD_ADDR_VAR 0 49
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: LD_INT 1
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 1
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: LD_INT 1
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54605: LD_ADDR_VAR 0 50
54609: PUSH
54610: LD_INT 0
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 1
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54749: LD_ADDR_VAR 0 51
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 2
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: NEG
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 2
54861: NEG
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54896: LD_ADDR_VAR 0 52
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 2
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55047: LD_ADDR_VAR 0 53
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: LD_INT 2
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 2
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 2
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55277: LD_ADDR_VAR 0 54
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: LD_INT 0
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 2
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 0
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 2
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55507: LD_ADDR_VAR 0 55
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 0
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: NEG
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 2
55592: NEG
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: LD_INT 2
55603: NEG
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 2
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 2
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55737: LD_ADDR_VAR 0 56
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 1
55795: NEG
55796: PUSH
55797: LD_INT 0
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: NEG
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 0
55830: PUSH
55831: LD_INT 2
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 2
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 2
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55967: LD_ADDR_VAR 0 57
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 1
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: NEG
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 1
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56197: LD_ADDR_VAR 0 58
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: LD_INT 1
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 1
56225: PUSH
56226: LD_INT 0
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: LD_INT 2
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 2
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 2
56322: PUSH
56323: LD_INT 1
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 2
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: NEG
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56427: LD_ADDR_VAR 0 59
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 0
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: PUSH
56456: LD_INT 0
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 1
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56515: LD_ADDR_VAR 0 60
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: LD_INT 1
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 1
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56603: LD_ADDR_VAR 0 61
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 1
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 1
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56691: LD_ADDR_VAR 0 62
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: LD_INT 1
56764: NEG
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56779: LD_ADDR_VAR 0 63
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: LD_INT 0
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 1
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56867: LD_ADDR_VAR 0 64
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: ST_TO_ADDR
// end ; 1 :
56955: GO 62852
56957: LD_INT 1
56959: DOUBLE
56960: EQUAL
56961: IFTRUE 56965
56963: GO 59588
56965: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56966: LD_ADDR_VAR 0 11
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 1
56996: PUSH
56997: LD_INT 2
56999: NEG
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57010: LD_ADDR_VAR 0 12
57014: PUSH
57015: LD_INT 2
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 3
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57051: LD_ADDR_VAR 0 13
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 2
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 3
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57091: LD_ADDR_VAR 0 14
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: LD_INT 3
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 1
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: LIST
57131: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57132: LD_ADDR_VAR 0 15
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: LD_INT 0
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: NEG
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57176: LD_ADDR_VAR 0 16
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: LD_INT 3
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: LD_INT 2
57199: NEG
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: LD_INT 3
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57222: LD_ADDR_VAR 0 17
57226: PUSH
57227: LD_INT 1
57229: NEG
57230: PUSH
57231: LD_INT 3
57233: NEG
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: LIST
57265: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57266: LD_ADDR_VAR 0 18
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 3
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57307: LD_ADDR_VAR 0 19
57311: PUSH
57312: LD_INT 3
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: PUSH
57325: LD_INT 3
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: LD_INT 3
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: LIST
57346: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57347: LD_ADDR_VAR 0 20
57351: PUSH
57352: LD_INT 1
57354: PUSH
57355: LD_INT 3
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 3
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57388: LD_ADDR_VAR 0 21
57392: PUSH
57393: LD_INT 2
57395: NEG
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 3
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 3
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57432: LD_ADDR_VAR 0 22
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 3
57443: NEG
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: NEG
57452: PUSH
57453: LD_INT 2
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 3
57463: NEG
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: LIST
57477: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57478: LD_ADDR_VAR 0 23
57482: PUSH
57483: LD_INT 0
57485: PUSH
57486: LD_INT 3
57488: NEG
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 4
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 3
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57522: LD_ADDR_VAR 0 24
57526: PUSH
57527: LD_INT 3
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: PUSH
57540: LD_INT 1
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: LIST
57562: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57563: LD_ADDR_VAR 0 25
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: LD_INT 3
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 4
57580: PUSH
57581: LD_INT 3
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57603: LD_ADDR_VAR 0 26
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 4
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57644: LD_ADDR_VAR 0 27
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 4
57673: NEG
57674: PUSH
57675: LD_INT 1
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: LIST
57687: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57688: LD_ADDR_VAR 0 28
57692: PUSH
57693: LD_INT 3
57695: NEG
57696: PUSH
57697: LD_INT 3
57699: NEG
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: LD_INT 4
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 4
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57734: LD_ADDR_VAR 0 29
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: LD_INT 3
57745: NEG
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 3
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 2
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 4
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: LD_INT 3
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 5
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 5
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: PUSH
57833: LD_INT 4
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: LD_INT 6
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 6
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: LD_INT 5
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57889: LD_ADDR_VAR 0 30
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 3
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 4
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 4
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 4
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 5
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 5
57979: PUSH
57980: LD_INT 1
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 5
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 6
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 6
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58032: LD_ADDR_VAR 0 31
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 3
58049: PUSH
58050: LD_INT 3
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 4
58069: PUSH
58070: LD_INT 3
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: PUSH
58080: LD_INT 4
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 4
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: LD_INT 4
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 5
58109: PUSH
58110: LD_INT 5
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 4
58119: PUSH
58120: LD_INT 5
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 6
58129: PUSH
58130: LD_INT 5
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 6
58139: PUSH
58140: LD_INT 6
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 5
58149: PUSH
58150: LD_INT 6
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58171: LD_ADDR_VAR 0 32
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 3
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 0
58188: PUSH
58189: LD_INT 3
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: NEG
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 4
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 5
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 0
58250: PUSH
58251: LD_INT 5
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 4
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 6
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 6
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: LD_INT 5
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58314: LD_ADDR_VAR 0 33
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 3
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 4
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 4
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 4
58389: NEG
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 5
58400: NEG
58401: PUSH
58402: LD_INT 0
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 5
58411: NEG
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 5
58423: NEG
58424: PUSH
58425: LD_INT 1
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 6
58434: NEG
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 6
58445: NEG
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58469: LD_ADDR_VAR 0 34
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 3
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 3
58488: NEG
58489: PUSH
58490: LD_INT 2
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 3
58500: NEG
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 3
58512: NEG
58513: PUSH
58514: LD_INT 4
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 4
58524: NEG
58525: PUSH
58526: LD_INT 3
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 4
58536: NEG
58537: PUSH
58538: LD_INT 4
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 4
58548: NEG
58549: PUSH
58550: LD_INT 5
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 5
58560: NEG
58561: PUSH
58562: LD_INT 4
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 5
58572: NEG
58573: PUSH
58574: LD_INT 5
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 5
58584: NEG
58585: PUSH
58586: LD_INT 6
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 6
58596: NEG
58597: PUSH
58598: LD_INT 5
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 6
58608: NEG
58609: PUSH
58610: LD_INT 6
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58632: LD_ADDR_VAR 0 41
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 3
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 2
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58676: LD_ADDR_VAR 0 42
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58717: LD_ADDR_VAR 0 43
58721: PUSH
58722: LD_INT 2
58724: PUSH
58725: LD_INT 2
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: PUSH
58732: LD_INT 3
58734: PUSH
58735: LD_INT 2
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: LD_INT 3
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: LIST
58756: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58757: LD_ADDR_VAR 0 44
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 1
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58798: LD_ADDR_VAR 0 45
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58842: LD_ADDR_VAR 0 46
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: LD_INT 3
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58888: LD_ADDR_VAR 0 47
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58921: LD_ADDR_VAR 0 48
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 2
58939: PUSH
58940: LD_INT 1
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58952: LD_ADDR_VAR 0 49
58956: PUSH
58957: LD_INT 3
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58981: LD_ADDR_VAR 0 50
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 1
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59010: LD_ADDR_VAR 0 51
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59041: LD_ADDR_VAR 0 52
59045: PUSH
59046: LD_INT 3
59048: NEG
59049: PUSH
59050: LD_INT 1
59052: NEG
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59074: LD_ADDR_VAR 0 53
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: LD_INT 3
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59118: LD_ADDR_VAR 0 54
59122: PUSH
59123: LD_INT 2
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: LIST
59158: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59159: LD_ADDR_VAR 0 55
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 2
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 2
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59199: LD_ADDR_VAR 0 56
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: LIST
59239: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59240: LD_ADDR_VAR 0 57
59244: PUSH
59245: LD_INT 2
59247: NEG
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 3
59258: NEG
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: NEG
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59284: LD_ADDR_VAR 0 58
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: LD_INT 3
59295: NEG
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: LD_INT 2
59307: NEG
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: LD_INT 3
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59330: LD_ADDR_VAR 0 59
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: LD_INT 2
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59374: LD_ADDR_VAR 0 60
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59415: LD_ADDR_VAR 0 61
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59455: LD_ADDR_VAR 0 62
59459: PUSH
59460: LD_INT 1
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: LD_INT 2
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 1
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: LIST
59495: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59496: LD_ADDR_VAR 0 63
59500: PUSH
59501: LD_INT 1
59503: NEG
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59540: LD_ADDR_VAR 0 64
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 2
59559: NEG
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: NEG
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: LIST
59585: ST_TO_ADDR
// end ; 2 :
59586: GO 62852
59588: LD_INT 2
59590: DOUBLE
59591: EQUAL
59592: IFTRUE 59596
59594: GO 62851
59596: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59597: LD_ADDR_VAR 0 29
59601: PUSH
59602: LD_INT 4
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 4
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 5
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 5
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 4
59645: PUSH
59646: LD_INT 1
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: LD_INT 0
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: LD_INT 1
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 5
59687: PUSH
59688: LD_INT 2
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 3
59697: PUSH
59698: LD_INT 3
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 3
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 4
59717: PUSH
59718: LD_INT 3
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 4
59727: PUSH
59728: LD_INT 4
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: PUSH
59738: LD_INT 4
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 4
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: LD_INT 4
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 4
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: LD_INT 4
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 5
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 5
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 1
59837: NEG
59838: PUSH
59839: LD_INT 4
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: PUSH
59860: LD_INT 5
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 3
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: LD_INT 0
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 3
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 4
59936: NEG
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 4
59947: NEG
59948: PUSH
59949: LD_INT 1
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: LD_INT 2
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: LD_INT 2
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 4
59982: NEG
59983: PUSH
59984: LD_INT 4
59986: NEG
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: NEG
59995: PUSH
59996: LD_INT 5
59998: NEG
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: NEG
60007: PUSH
60008: LD_INT 4
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: NEG
60019: PUSH
60020: LD_INT 3
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 4
60030: NEG
60031: PUSH
60032: LD_INT 3
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 5
60042: NEG
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 5
60054: NEG
60055: PUSH
60056: LD_INT 5
60058: NEG
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: NEG
60067: PUSH
60068: LD_INT 5
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 5
60078: NEG
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60135: LD_ADDR_VAR 0 30
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: LD_INT 4
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 4
60152: PUSH
60153: LD_INT 3
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 5
60162: PUSH
60163: LD_INT 4
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 5
60172: PUSH
60173: LD_INT 5
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 4
60182: PUSH
60183: LD_INT 5
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: LD_INT 4
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 5
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: LD_INT 5
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 0
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 3
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: LD_INT 4
60265: PUSH
60266: EMPTY
60267: LIST
60268: LIST
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: LD_INT 4
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 1
60282: NEG
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 4
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 4
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 3
60348: NEG
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 3
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 4
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 5
60381: NEG
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 5
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 5
60404: NEG
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: NEG
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 3
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: LD_INT 4
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 2
60451: NEG
60452: PUSH
60453: LD_INT 3
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: NEG
60464: PUSH
60465: LD_INT 2
60467: NEG
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 3
60475: NEG
60476: PUSH
60477: LD_INT 2
60479: NEG
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 4
60487: NEG
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 4
60499: NEG
60500: PUSH
60501: LD_INT 4
60503: NEG
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: NEG
60512: PUSH
60513: LD_INT 4
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 4
60523: NEG
60524: PUSH
60525: LD_INT 2
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 0
60535: PUSH
60536: LD_INT 4
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 0
60546: PUSH
60547: LD_INT 5
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: LD_INT 4
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 1
60568: PUSH
60569: LD_INT 3
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 0
60579: PUSH
60580: LD_INT 3
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 4
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 1
60602: NEG
60603: PUSH
60604: LD_INT 5
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: LD_INT 5
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60682: LD_ADDR_VAR 0 31
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 4
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: LD_INT 5
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 5
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: LD_INT 4
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 3
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: PUSH
60762: LD_INT 5
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 3
60782: NEG
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 2
60805: NEG
60806: PUSH
60807: LD_INT 0
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: LD_INT 1
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: NEG
60828: PUSH
60829: LD_INT 1
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 4
60838: NEG
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 4
60849: NEG
60850: PUSH
60851: LD_INT 1
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: NEG
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 4
60884: NEG
60885: PUSH
60886: LD_INT 4
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: NEG
60897: PUSH
60898: LD_INT 5
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: LD_INT 4
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 3
60920: NEG
60921: PUSH
60922: LD_INT 3
60924: NEG
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 4
60932: NEG
60933: PUSH
60934: LD_INT 3
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 5
60944: NEG
60945: PUSH
60946: LD_INT 4
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 5
60956: NEG
60957: PUSH
60958: LD_INT 5
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: NEG
60969: PUSH
60970: LD_INT 5
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 5
60980: NEG
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: LD_INT 3
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 4
61006: NEG
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: LD_INT 3
61017: NEG
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 1
61059: NEG
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: NEG
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 4
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 4
61104: PUSH
61105: LD_INT 1
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 5
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 5
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 4
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 3
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 5
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61232: LD_ADDR_VAR 0 32
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: LD_INT 0
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 4
61250: NEG
61251: PUSH
61252: LD_INT 1
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 3
61262: NEG
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: NEG
61274: PUSH
61275: LD_INT 1
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 4
61284: NEG
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 5
61295: NEG
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 5
61306: NEG
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 5
61318: NEG
61319: PUSH
61320: LD_INT 2
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: LD_INT 2
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 3
61341: NEG
61342: PUSH
61343: LD_INT 3
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 3
61353: NEG
61354: PUSH
61355: LD_INT 4
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 2
61365: NEG
61366: PUSH
61367: LD_INT 3
61369: NEG
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 2
61377: NEG
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 3
61389: NEG
61390: PUSH
61391: LD_INT 2
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 4
61401: NEG
61402: PUSH
61403: LD_INT 3
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 4
61413: NEG
61414: PUSH
61415: LD_INT 4
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: NEG
61438: PUSH
61439: LD_INT 2
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: LD_INT 4
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 5
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: LD_INT 4
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 3
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 3
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: NEG
61505: PUSH
61506: LD_INT 4
61508: NEG
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: NEG
61517: PUSH
61518: LD_INT 5
61520: NEG
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 3
61531: NEG
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 2
61539: NEG
61540: PUSH
61541: LD_INT 5
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 4
61582: PUSH
61583: LD_INT 1
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: LD_INT 1
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 2
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 4
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 4
61644: PUSH
61645: LD_INT 4
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 4
61654: PUSH
61655: LD_INT 3
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: LD_INT 4
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 5
61674: PUSH
61675: LD_INT 5
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 4
61684: PUSH
61685: LD_INT 5
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 3
61694: PUSH
61695: LD_INT 4
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 3
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 5
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: PUSH
61725: LD_INT 5
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61779: LD_ADDR_VAR 0 33
61783: PUSH
61784: LD_INT 4
61786: NEG
61787: PUSH
61788: LD_INT 4
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 4
61798: NEG
61799: PUSH
61800: LD_INT 5
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: LD_INT 4
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 4
61834: NEG
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 5
61846: NEG
61847: PUSH
61848: LD_INT 4
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 5
61858: NEG
61859: PUSH
61860: LD_INT 5
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: NEG
61871: PUSH
61872: LD_INT 5
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 5
61882: NEG
61883: PUSH
61884: LD_INT 3
61886: NEG
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 0
61894: PUSH
61895: LD_INT 3
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 0
61905: PUSH
61906: LD_INT 4
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: LD_INT 3
61919: NEG
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: LD_INT 2
61930: NEG
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 1
61949: NEG
61950: PUSH
61951: LD_INT 3
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: LD_INT 2
61976: NEG
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: PUSH
61982: LD_INT 2
61984: NEG
61985: PUSH
61986: LD_INT 4
61988: NEG
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 4
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 4
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 5
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 5
62027: PUSH
62028: LD_INT 1
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 4
62037: PUSH
62038: LD_INT 1
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 3
62068: PUSH
62069: LD_INT 2
62071: NEG
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 5
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 4
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: PUSH
62120: LD_INT 4
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 3
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 3
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 4
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: LD_INT 4
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 4
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 0
62189: PUSH
62190: LD_INT 3
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 4
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 5
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 5
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 1
62229: NEG
62230: PUSH
62231: LD_INT 4
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: NEG
62241: PUSH
62242: LD_INT 3
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: LD_INT 5
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: NEG
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62317: LD_ADDR_VAR 0 34
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 4
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 5
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: LD_INT 4
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 4
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: LD_INT 5
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: LD_INT 3
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: LD_INT 5
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 3
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 3
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 4
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 4
62457: PUSH
62458: LD_INT 1
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: LD_INT 1
62490: NEG
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 2
62501: NEG
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 4
62509: PUSH
62510: LD_INT 2
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 4
62519: PUSH
62520: LD_INT 4
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 4
62529: PUSH
62530: LD_INT 3
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 5
62539: PUSH
62540: LD_INT 4
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 5
62549: PUSH
62550: LD_INT 5
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 4
62559: PUSH
62560: LD_INT 5
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: PUSH
62570: LD_INT 4
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: PUSH
62580: LD_INT 3
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 5
62589: PUSH
62590: LD_INT 3
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 5
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 0
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 1
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 4
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 4
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: LD_INT 3
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 1
62670: NEG
62671: PUSH
62672: LD_INT 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 2
62681: PUSH
62682: LD_INT 4
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 2
62691: NEG
62692: PUSH
62693: LD_INT 2
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 4
62702: NEG
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 4
62713: NEG
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 3
62725: NEG
62726: PUSH
62727: LD_INT 0
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 3
62736: NEG
62737: PUSH
62738: LD_INT 1
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 4
62747: NEG
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 5
62758: NEG
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 5
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 5
62781: NEG
62782: PUSH
62783: LD_INT 2
62785: NEG
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// end ; end ;
62849: GO 62852
62851: POP
// case btype of b_depot , b_warehouse :
62852: LD_VAR 0 1
62856: PUSH
62857: LD_INT 0
62859: DOUBLE
62860: EQUAL
62861: IFTRUE 62871
62863: LD_INT 1
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62871
62869: GO 63072
62871: POP
// case nation of nation_american :
62872: LD_VAR 0 5
62876: PUSH
62877: LD_INT 1
62879: DOUBLE
62880: EQUAL
62881: IFTRUE 62885
62883: GO 62941
62885: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62886: LD_ADDR_VAR 0 9
62890: PUSH
62891: LD_VAR 0 11
62895: PUSH
62896: LD_VAR 0 12
62900: PUSH
62901: LD_VAR 0 13
62905: PUSH
62906: LD_VAR 0 14
62910: PUSH
62911: LD_VAR 0 15
62915: PUSH
62916: LD_VAR 0 16
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: PUSH
62929: LD_VAR 0 4
62933: PUSH
62934: LD_INT 1
62936: PLUS
62937: ARRAY
62938: ST_TO_ADDR
62939: GO 63070
62941: LD_INT 2
62943: DOUBLE
62944: EQUAL
62945: IFTRUE 62949
62947: GO 63005
62949: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62950: LD_ADDR_VAR 0 9
62954: PUSH
62955: LD_VAR 0 17
62959: PUSH
62960: LD_VAR 0 18
62964: PUSH
62965: LD_VAR 0 19
62969: PUSH
62970: LD_VAR 0 20
62974: PUSH
62975: LD_VAR 0 21
62979: PUSH
62980: LD_VAR 0 22
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: LD_VAR 0 4
62997: PUSH
62998: LD_INT 1
63000: PLUS
63001: ARRAY
63002: ST_TO_ADDR
63003: GO 63070
63005: LD_INT 3
63007: DOUBLE
63008: EQUAL
63009: IFTRUE 63013
63011: GO 63069
63013: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63014: LD_ADDR_VAR 0 9
63018: PUSH
63019: LD_VAR 0 23
63023: PUSH
63024: LD_VAR 0 24
63028: PUSH
63029: LD_VAR 0 25
63033: PUSH
63034: LD_VAR 0 26
63038: PUSH
63039: LD_VAR 0 27
63043: PUSH
63044: LD_VAR 0 28
63048: PUSH
63049: EMPTY
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: PUSH
63057: LD_VAR 0 4
63061: PUSH
63062: LD_INT 1
63064: PLUS
63065: ARRAY
63066: ST_TO_ADDR
63067: GO 63070
63069: POP
63070: GO 63625
63072: LD_INT 2
63074: DOUBLE
63075: EQUAL
63076: IFTRUE 63086
63078: LD_INT 3
63080: DOUBLE
63081: EQUAL
63082: IFTRUE 63086
63084: GO 63142
63086: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63087: LD_ADDR_VAR 0 9
63091: PUSH
63092: LD_VAR 0 29
63096: PUSH
63097: LD_VAR 0 30
63101: PUSH
63102: LD_VAR 0 31
63106: PUSH
63107: LD_VAR 0 32
63111: PUSH
63112: LD_VAR 0 33
63116: PUSH
63117: LD_VAR 0 34
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: PUSH
63130: LD_VAR 0 4
63134: PUSH
63135: LD_INT 1
63137: PLUS
63138: ARRAY
63139: ST_TO_ADDR
63140: GO 63625
63142: LD_INT 16
63144: DOUBLE
63145: EQUAL
63146: IFTRUE 63204
63148: LD_INT 17
63150: DOUBLE
63151: EQUAL
63152: IFTRUE 63204
63154: LD_INT 18
63156: DOUBLE
63157: EQUAL
63158: IFTRUE 63204
63160: LD_INT 19
63162: DOUBLE
63163: EQUAL
63164: IFTRUE 63204
63166: LD_INT 22
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63204
63172: LD_INT 20
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63204
63178: LD_INT 21
63180: DOUBLE
63181: EQUAL
63182: IFTRUE 63204
63184: LD_INT 23
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63204
63190: LD_INT 24
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63204
63196: LD_INT 25
63198: DOUBLE
63199: EQUAL
63200: IFTRUE 63204
63202: GO 63260
63204: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63205: LD_ADDR_VAR 0 9
63209: PUSH
63210: LD_VAR 0 35
63214: PUSH
63215: LD_VAR 0 36
63219: PUSH
63220: LD_VAR 0 37
63224: PUSH
63225: LD_VAR 0 38
63229: PUSH
63230: LD_VAR 0 39
63234: PUSH
63235: LD_VAR 0 40
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: PUSH
63248: LD_VAR 0 4
63252: PUSH
63253: LD_INT 1
63255: PLUS
63256: ARRAY
63257: ST_TO_ADDR
63258: GO 63625
63260: LD_INT 6
63262: DOUBLE
63263: EQUAL
63264: IFTRUE 63316
63266: LD_INT 7
63268: DOUBLE
63269: EQUAL
63270: IFTRUE 63316
63272: LD_INT 8
63274: DOUBLE
63275: EQUAL
63276: IFTRUE 63316
63278: LD_INT 13
63280: DOUBLE
63281: EQUAL
63282: IFTRUE 63316
63284: LD_INT 12
63286: DOUBLE
63287: EQUAL
63288: IFTRUE 63316
63290: LD_INT 15
63292: DOUBLE
63293: EQUAL
63294: IFTRUE 63316
63296: LD_INT 11
63298: DOUBLE
63299: EQUAL
63300: IFTRUE 63316
63302: LD_INT 14
63304: DOUBLE
63305: EQUAL
63306: IFTRUE 63316
63308: LD_INT 10
63310: DOUBLE
63311: EQUAL
63312: IFTRUE 63316
63314: GO 63372
63316: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63317: LD_ADDR_VAR 0 9
63321: PUSH
63322: LD_VAR 0 41
63326: PUSH
63327: LD_VAR 0 42
63331: PUSH
63332: LD_VAR 0 43
63336: PUSH
63337: LD_VAR 0 44
63341: PUSH
63342: LD_VAR 0 45
63346: PUSH
63347: LD_VAR 0 46
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: PUSH
63360: LD_VAR 0 4
63364: PUSH
63365: LD_INT 1
63367: PLUS
63368: ARRAY
63369: ST_TO_ADDR
63370: GO 63625
63372: LD_INT 36
63374: DOUBLE
63375: EQUAL
63376: IFTRUE 63380
63378: GO 63436
63380: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63381: LD_ADDR_VAR 0 9
63385: PUSH
63386: LD_VAR 0 47
63390: PUSH
63391: LD_VAR 0 48
63395: PUSH
63396: LD_VAR 0 49
63400: PUSH
63401: LD_VAR 0 50
63405: PUSH
63406: LD_VAR 0 51
63410: PUSH
63411: LD_VAR 0 52
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: PUSH
63424: LD_VAR 0 4
63428: PUSH
63429: LD_INT 1
63431: PLUS
63432: ARRAY
63433: ST_TO_ADDR
63434: GO 63625
63436: LD_INT 4
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63462
63442: LD_INT 5
63444: DOUBLE
63445: EQUAL
63446: IFTRUE 63462
63448: LD_INT 34
63450: DOUBLE
63451: EQUAL
63452: IFTRUE 63462
63454: LD_INT 37
63456: DOUBLE
63457: EQUAL
63458: IFTRUE 63462
63460: GO 63518
63462: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63463: LD_ADDR_VAR 0 9
63467: PUSH
63468: LD_VAR 0 53
63472: PUSH
63473: LD_VAR 0 54
63477: PUSH
63478: LD_VAR 0 55
63482: PUSH
63483: LD_VAR 0 56
63487: PUSH
63488: LD_VAR 0 57
63492: PUSH
63493: LD_VAR 0 58
63497: PUSH
63498: EMPTY
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: PUSH
63506: LD_VAR 0 4
63510: PUSH
63511: LD_INT 1
63513: PLUS
63514: ARRAY
63515: ST_TO_ADDR
63516: GO 63625
63518: LD_INT 31
63520: DOUBLE
63521: EQUAL
63522: IFTRUE 63568
63524: LD_INT 32
63526: DOUBLE
63527: EQUAL
63528: IFTRUE 63568
63530: LD_INT 33
63532: DOUBLE
63533: EQUAL
63534: IFTRUE 63568
63536: LD_INT 27
63538: DOUBLE
63539: EQUAL
63540: IFTRUE 63568
63542: LD_INT 26
63544: DOUBLE
63545: EQUAL
63546: IFTRUE 63568
63548: LD_INT 28
63550: DOUBLE
63551: EQUAL
63552: IFTRUE 63568
63554: LD_INT 29
63556: DOUBLE
63557: EQUAL
63558: IFTRUE 63568
63560: LD_INT 30
63562: DOUBLE
63563: EQUAL
63564: IFTRUE 63568
63566: GO 63624
63568: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63569: LD_ADDR_VAR 0 9
63573: PUSH
63574: LD_VAR 0 59
63578: PUSH
63579: LD_VAR 0 60
63583: PUSH
63584: LD_VAR 0 61
63588: PUSH
63589: LD_VAR 0 62
63593: PUSH
63594: LD_VAR 0 63
63598: PUSH
63599: LD_VAR 0 64
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: PUSH
63612: LD_VAR 0 4
63616: PUSH
63617: LD_INT 1
63619: PLUS
63620: ARRAY
63621: ST_TO_ADDR
63622: GO 63625
63624: POP
// temp_list2 = [ ] ;
63625: LD_ADDR_VAR 0 10
63629: PUSH
63630: EMPTY
63631: ST_TO_ADDR
// for i in temp_list do
63632: LD_ADDR_VAR 0 8
63636: PUSH
63637: LD_VAR 0 9
63641: PUSH
63642: FOR_IN
63643: IFFALSE 63695
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63645: LD_ADDR_VAR 0 10
63649: PUSH
63650: LD_VAR 0 10
63654: PUSH
63655: LD_VAR 0 8
63659: PUSH
63660: LD_INT 1
63662: ARRAY
63663: PUSH
63664: LD_VAR 0 2
63668: PLUS
63669: PUSH
63670: LD_VAR 0 8
63674: PUSH
63675: LD_INT 2
63677: ARRAY
63678: PUSH
63679: LD_VAR 0 3
63683: PLUS
63684: PUSH
63685: EMPTY
63686: LIST
63687: LIST
63688: PUSH
63689: EMPTY
63690: LIST
63691: ADD
63692: ST_TO_ADDR
63693: GO 63642
63695: POP
63696: POP
// result = temp_list2 ;
63697: LD_ADDR_VAR 0 7
63701: PUSH
63702: LD_VAR 0 10
63706: ST_TO_ADDR
// end ;
63707: LD_VAR 0 7
63711: RET
// export function EnemyInRange ( unit , dist ) ; begin
63712: LD_INT 0
63714: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63715: LD_ADDR_VAR 0 3
63719: PUSH
63720: LD_VAR 0 1
63724: PPUSH
63725: CALL_OW 255
63729: PPUSH
63730: LD_VAR 0 1
63734: PPUSH
63735: CALL_OW 250
63739: PPUSH
63740: LD_VAR 0 1
63744: PPUSH
63745: CALL_OW 251
63749: PPUSH
63750: LD_VAR 0 2
63754: PPUSH
63755: CALL 36969 0 4
63759: PUSH
63760: LD_INT 4
63762: ARRAY
63763: ST_TO_ADDR
// end ;
63764: LD_VAR 0 3
63768: RET
// export function PlayerSeeMe ( unit ) ; begin
63769: LD_INT 0
63771: PPUSH
// result := See ( your_side , unit ) ;
63772: LD_ADDR_VAR 0 2
63776: PUSH
63777: LD_OWVAR 2
63781: PPUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: CALL_OW 292
63791: ST_TO_ADDR
// end ;
63792: LD_VAR 0 2
63796: RET
// export function ReverseDir ( unit ) ; begin
63797: LD_INT 0
63799: PPUSH
// if not unit then
63800: LD_VAR 0 1
63804: NOT
63805: IFFALSE 63809
// exit ;
63807: GO 63832
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63809: LD_ADDR_VAR 0 2
63813: PUSH
63814: LD_VAR 0 1
63818: PPUSH
63819: CALL_OW 254
63823: PUSH
63824: LD_INT 3
63826: PLUS
63827: PUSH
63828: LD_INT 6
63830: MOD
63831: ST_TO_ADDR
// end ;
63832: LD_VAR 0 2
63836: RET
// export function ReverseArray ( array ) ; var i ; begin
63837: LD_INT 0
63839: PPUSH
63840: PPUSH
// if not array then
63841: LD_VAR 0 1
63845: NOT
63846: IFFALSE 63850
// exit ;
63848: GO 63905
// result := [ ] ;
63850: LD_ADDR_VAR 0 2
63854: PUSH
63855: EMPTY
63856: ST_TO_ADDR
// for i := array downto 1 do
63857: LD_ADDR_VAR 0 3
63861: PUSH
63862: DOUBLE
63863: LD_VAR 0 1
63867: INC
63868: ST_TO_ADDR
63869: LD_INT 1
63871: PUSH
63872: FOR_DOWNTO
63873: IFFALSE 63903
// result := Join ( result , array [ i ] ) ;
63875: LD_ADDR_VAR 0 2
63879: PUSH
63880: LD_VAR 0 2
63884: PPUSH
63885: LD_VAR 0 1
63889: PUSH
63890: LD_VAR 0 3
63894: ARRAY
63895: PPUSH
63896: CALL 68757 0 2
63900: ST_TO_ADDR
63901: GO 63872
63903: POP
63904: POP
// end ;
63905: LD_VAR 0 2
63909: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63910: LD_INT 0
63912: PPUSH
63913: PPUSH
63914: PPUSH
63915: PPUSH
63916: PPUSH
63917: PPUSH
// if not unit or not hexes then
63918: LD_VAR 0 1
63922: NOT
63923: IFTRUE 63932
63925: PUSH
63926: LD_VAR 0 2
63930: NOT
63931: OR
63932: IFFALSE 63936
// exit ;
63934: GO 64059
// dist := 9999 ;
63936: LD_ADDR_VAR 0 5
63940: PUSH
63941: LD_INT 9999
63943: ST_TO_ADDR
// for i = 1 to hexes do
63944: LD_ADDR_VAR 0 4
63948: PUSH
63949: DOUBLE
63950: LD_INT 1
63952: DEC
63953: ST_TO_ADDR
63954: LD_VAR 0 2
63958: PUSH
63959: FOR_TO
63960: IFFALSE 64047
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63962: LD_ADDR_VAR 0 6
63966: PUSH
63967: LD_VAR 0 1
63971: PPUSH
63972: LD_VAR 0 2
63976: PUSH
63977: LD_VAR 0 4
63981: ARRAY
63982: PUSH
63983: LD_INT 1
63985: ARRAY
63986: PPUSH
63987: LD_VAR 0 2
63991: PUSH
63992: LD_VAR 0 4
63996: ARRAY
63997: PUSH
63998: LD_INT 2
64000: ARRAY
64001: PPUSH
64002: CALL_OW 297
64006: ST_TO_ADDR
// if tdist < dist then
64007: LD_VAR 0 6
64011: PUSH
64012: LD_VAR 0 5
64016: LESS
64017: IFFALSE 64045
// begin hex := hexes [ i ] ;
64019: LD_ADDR_VAR 0 8
64023: PUSH
64024: LD_VAR 0 2
64028: PUSH
64029: LD_VAR 0 4
64033: ARRAY
64034: ST_TO_ADDR
// dist := tdist ;
64035: LD_ADDR_VAR 0 5
64039: PUSH
64040: LD_VAR 0 6
64044: ST_TO_ADDR
// end ; end ;
64045: GO 63959
64047: POP
64048: POP
// result := hex ;
64049: LD_ADDR_VAR 0 3
64053: PUSH
64054: LD_VAR 0 8
64058: ST_TO_ADDR
// end ;
64059: LD_VAR 0 3
64063: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64064: LD_INT 0
64066: PPUSH
64067: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64068: LD_VAR 0 1
64072: NOT
64073: IFTRUE 64112
64075: PUSH
64076: LD_VAR 0 1
64080: PUSH
64081: LD_INT 21
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 23
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PPUSH
64105: CALL_OW 69
64109: IN
64110: NOT
64111: OR
64112: IFFALSE 64116
// exit ;
64114: GO 64163
// for i = 1 to 3 do
64116: LD_ADDR_VAR 0 3
64120: PUSH
64121: DOUBLE
64122: LD_INT 1
64124: DEC
64125: ST_TO_ADDR
64126: LD_INT 3
64128: PUSH
64129: FOR_TO
64130: IFFALSE 64161
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64132: LD_VAR 0 1
64136: PPUSH
64137: CALL_OW 250
64141: PPUSH
64142: LD_VAR 0 1
64146: PPUSH
64147: CALL_OW 251
64151: PPUSH
64152: LD_INT 1
64154: PPUSH
64155: CALL_OW 453
64159: GO 64129
64161: POP
64162: POP
// end ;
64163: LD_VAR 0 2
64167: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64168: LD_INT 0
64170: PPUSH
64171: PPUSH
64172: PPUSH
64173: PPUSH
64174: PPUSH
64175: PPUSH
// if not unit or not enemy_unit then
64176: LD_VAR 0 1
64180: NOT
64181: IFTRUE 64190
64183: PUSH
64184: LD_VAR 0 2
64188: NOT
64189: OR
64190: IFFALSE 64194
// exit ;
64192: GO 64675
// if GetLives ( i ) < 250 then
64194: LD_VAR 0 4
64198: PPUSH
64199: CALL_OW 256
64203: PUSH
64204: LD_INT 250
64206: LESS
64207: IFFALSE 64220
// begin ComAutodestruct ( i ) ;
64209: LD_VAR 0 4
64213: PPUSH
64214: CALL 64064 0 1
// exit ;
64218: GO 64675
// end ; x := GetX ( enemy_unit ) ;
64220: LD_ADDR_VAR 0 7
64224: PUSH
64225: LD_VAR 0 2
64229: PPUSH
64230: CALL_OW 250
64234: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64235: LD_ADDR_VAR 0 8
64239: PUSH
64240: LD_VAR 0 2
64244: PPUSH
64245: CALL_OW 251
64249: ST_TO_ADDR
// if not x or not y then
64250: LD_VAR 0 7
64254: NOT
64255: IFTRUE 64264
64257: PUSH
64258: LD_VAR 0 8
64262: NOT
64263: OR
64264: IFFALSE 64268
// exit ;
64266: GO 64675
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64268: LD_ADDR_VAR 0 6
64272: PUSH
64273: LD_VAR 0 7
64277: PPUSH
64278: LD_INT 0
64280: PPUSH
64281: LD_INT 4
64283: PPUSH
64284: CALL_OW 272
64288: PUSH
64289: LD_VAR 0 8
64293: PPUSH
64294: LD_INT 0
64296: PPUSH
64297: LD_INT 4
64299: PPUSH
64300: CALL_OW 273
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_VAR 0 7
64313: PPUSH
64314: LD_INT 1
64316: PPUSH
64317: LD_INT 4
64319: PPUSH
64320: CALL_OW 272
64324: PUSH
64325: LD_VAR 0 8
64329: PPUSH
64330: LD_INT 1
64332: PPUSH
64333: LD_INT 4
64335: PPUSH
64336: CALL_OW 273
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_VAR 0 7
64349: PPUSH
64350: LD_INT 2
64352: PPUSH
64353: LD_INT 4
64355: PPUSH
64356: CALL_OW 272
64360: PUSH
64361: LD_VAR 0 8
64365: PPUSH
64366: LD_INT 2
64368: PPUSH
64369: LD_INT 4
64371: PPUSH
64372: CALL_OW 273
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_VAR 0 7
64385: PPUSH
64386: LD_INT 3
64388: PPUSH
64389: LD_INT 4
64391: PPUSH
64392: CALL_OW 272
64396: PUSH
64397: LD_VAR 0 8
64401: PPUSH
64402: LD_INT 3
64404: PPUSH
64405: LD_INT 4
64407: PPUSH
64408: CALL_OW 273
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_VAR 0 7
64421: PPUSH
64422: LD_INT 4
64424: PPUSH
64425: LD_INT 4
64427: PPUSH
64428: CALL_OW 272
64432: PUSH
64433: LD_VAR 0 8
64437: PPUSH
64438: LD_INT 4
64440: PPUSH
64441: LD_INT 4
64443: PPUSH
64444: CALL_OW 273
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_VAR 0 7
64457: PPUSH
64458: LD_INT 5
64460: PPUSH
64461: LD_INT 4
64463: PPUSH
64464: CALL_OW 272
64468: PUSH
64469: LD_VAR 0 8
64473: PPUSH
64474: LD_INT 5
64476: PPUSH
64477: LD_INT 4
64479: PPUSH
64480: CALL_OW 273
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: ST_TO_ADDR
// for i = tmp downto 1 do
64497: LD_ADDR_VAR 0 4
64501: PUSH
64502: DOUBLE
64503: LD_VAR 0 6
64507: INC
64508: ST_TO_ADDR
64509: LD_INT 1
64511: PUSH
64512: FOR_DOWNTO
64513: IFFALSE 64616
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64515: LD_VAR 0 6
64519: PUSH
64520: LD_VAR 0 4
64524: ARRAY
64525: PUSH
64526: LD_INT 1
64528: ARRAY
64529: PPUSH
64530: LD_VAR 0 6
64534: PUSH
64535: LD_VAR 0 4
64539: ARRAY
64540: PUSH
64541: LD_INT 2
64543: ARRAY
64544: PPUSH
64545: CALL_OW 488
64549: NOT
64550: IFTRUE 64592
64552: PUSH
64553: LD_VAR 0 6
64557: PUSH
64558: LD_VAR 0 4
64562: ARRAY
64563: PUSH
64564: LD_INT 1
64566: ARRAY
64567: PPUSH
64568: LD_VAR 0 6
64572: PUSH
64573: LD_VAR 0 4
64577: ARRAY
64578: PUSH
64579: LD_INT 2
64581: ARRAY
64582: PPUSH
64583: CALL_OW 428
64587: PUSH
64588: LD_INT 0
64590: NONEQUAL
64591: OR
64592: IFFALSE 64614
// tmp := Delete ( tmp , i ) ;
64594: LD_ADDR_VAR 0 6
64598: PUSH
64599: LD_VAR 0 6
64603: PPUSH
64604: LD_VAR 0 4
64608: PPUSH
64609: CALL_OW 3
64613: ST_TO_ADDR
64614: GO 64512
64616: POP
64617: POP
// j := GetClosestHex ( unit , tmp ) ;
64618: LD_ADDR_VAR 0 5
64622: PUSH
64623: LD_VAR 0 1
64627: PPUSH
64628: LD_VAR 0 6
64632: PPUSH
64633: CALL 63910 0 2
64637: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64638: LD_VAR 0 1
64642: PPUSH
64643: LD_VAR 0 5
64647: PUSH
64648: LD_INT 1
64650: ARRAY
64651: PPUSH
64652: LD_VAR 0 5
64656: PUSH
64657: LD_INT 2
64659: ARRAY
64660: PPUSH
64661: CALL_OW 111
// result := j ;
64665: LD_ADDR_VAR 0 3
64669: PUSH
64670: LD_VAR 0 5
64674: ST_TO_ADDR
// end ;
64675: LD_VAR 0 3
64679: RET
// export function PrepareApemanSoldier ( ) ; begin
64680: LD_INT 0
64682: PPUSH
// uc_nation := 0 ;
64683: LD_ADDR_OWVAR 21
64687: PUSH
64688: LD_INT 0
64690: ST_TO_ADDR
// hc_sex := sex_male ;
64691: LD_ADDR_OWVAR 27
64695: PUSH
64696: LD_INT 1
64698: ST_TO_ADDR
// hc_name :=  ;
64699: LD_ADDR_OWVAR 26
64703: PUSH
64704: LD_STRING 
64706: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64707: LD_ADDR_OWVAR 28
64711: PUSH
64712: LD_INT 15
64714: ST_TO_ADDR
// hc_gallery :=  ;
64715: LD_ADDR_OWVAR 33
64719: PUSH
64720: LD_STRING 
64722: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64723: LD_ADDR_OWVAR 31
64727: PUSH
64728: LD_INT 0
64730: PPUSH
64731: LD_INT 3
64733: PPUSH
64734: CALL_OW 12
64738: PUSH
64739: LD_INT 0
64741: PPUSH
64742: LD_INT 3
64744: PPUSH
64745: CALL_OW 12
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64762: LD_ADDR_OWVAR 29
64766: PUSH
64767: LD_INT 10
64769: PUSH
64770: LD_INT 12
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: ST_TO_ADDR
// end ;
64777: LD_VAR 0 1
64781: RET
// export function PrepareApemanEngineer ( ) ; begin
64782: LD_INT 0
64784: PPUSH
// uc_nation := 0 ;
64785: LD_ADDR_OWVAR 21
64789: PUSH
64790: LD_INT 0
64792: ST_TO_ADDR
// hc_sex := sex_male ;
64793: LD_ADDR_OWVAR 27
64797: PUSH
64798: LD_INT 1
64800: ST_TO_ADDR
// hc_name :=  ;
64801: LD_ADDR_OWVAR 26
64805: PUSH
64806: LD_STRING 
64808: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64809: LD_ADDR_OWVAR 28
64813: PUSH
64814: LD_INT 16
64816: ST_TO_ADDR
// hc_gallery :=  ;
64817: LD_ADDR_OWVAR 33
64821: PUSH
64822: LD_STRING 
64824: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64825: LD_ADDR_OWVAR 31
64829: PUSH
64830: LD_INT 0
64832: PPUSH
64833: LD_INT 3
64835: PPUSH
64836: CALL_OW 12
64840: PUSH
64841: LD_INT 0
64843: PPUSH
64844: LD_INT 3
64846: PPUSH
64847: CALL_OW 12
64851: PUSH
64852: LD_INT 0
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64864: LD_ADDR_OWVAR 29
64868: PUSH
64869: LD_INT 10
64871: PUSH
64872: LD_INT 12
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: ST_TO_ADDR
// end ;
64879: LD_VAR 0 1
64883: RET
// export function PrepareApeman ( agressivity ) ; begin
64884: LD_INT 0
64886: PPUSH
// uc_side := 0 ;
64887: LD_ADDR_OWVAR 20
64891: PUSH
64892: LD_INT 0
64894: ST_TO_ADDR
// uc_nation := 0 ;
64895: LD_ADDR_OWVAR 21
64899: PUSH
64900: LD_INT 0
64902: ST_TO_ADDR
// hc_sex := sex_male ;
64903: LD_ADDR_OWVAR 27
64907: PUSH
64908: LD_INT 1
64910: ST_TO_ADDR
// hc_class := class_apeman ;
64911: LD_ADDR_OWVAR 28
64915: PUSH
64916: LD_INT 12
64918: ST_TO_ADDR
// hc_gallery :=  ;
64919: LD_ADDR_OWVAR 33
64923: PUSH
64924: LD_STRING 
64926: ST_TO_ADDR
// hc_name :=  ;
64927: LD_ADDR_OWVAR 26
64931: PUSH
64932: LD_STRING 
64934: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
64935: LD_ADDR_OWVAR 29
64939: PUSH
64940: LD_INT 10
64942: PUSH
64943: LD_INT 12
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// if agressivity = 0 then
64950: LD_VAR 0 1
64954: PUSH
64955: LD_INT 0
64957: EQUAL
64958: IFFALSE 64970
// hc_agressivity := 0 else
64960: LD_ADDR_OWVAR 35
64964: PUSH
64965: LD_INT 0
64967: ST_TO_ADDR
64968: GO 64991
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64970: LD_ADDR_OWVAR 35
64974: PUSH
64975: LD_VAR 0 1
64979: NEG
64980: PPUSH
64981: LD_VAR 0 1
64985: PPUSH
64986: CALL_OW 12
64990: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64991: LD_ADDR_OWVAR 31
64995: PUSH
64996: LD_INT 0
64998: PPUSH
64999: LD_INT 3
65001: PPUSH
65002: CALL_OW 12
65006: PUSH
65007: LD_INT 0
65009: PPUSH
65010: LD_INT 3
65012: PPUSH
65013: CALL_OW 12
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: ST_TO_ADDR
// end ;
65030: LD_VAR 0 2
65034: RET
// export function PrepareTiger ( agressivity ) ; begin
65035: LD_INT 0
65037: PPUSH
// uc_side := 0 ;
65038: LD_ADDR_OWVAR 20
65042: PUSH
65043: LD_INT 0
65045: ST_TO_ADDR
// uc_nation := 0 ;
65046: LD_ADDR_OWVAR 21
65050: PUSH
65051: LD_INT 0
65053: ST_TO_ADDR
// InitHc ;
65054: CALL_OW 19
// hc_class := class_tiger ;
65058: LD_ADDR_OWVAR 28
65062: PUSH
65063: LD_INT 14
65065: ST_TO_ADDR
// hc_gallery :=  ;
65066: LD_ADDR_OWVAR 33
65070: PUSH
65071: LD_STRING 
65073: ST_TO_ADDR
// hc_name :=  ;
65074: LD_ADDR_OWVAR 26
65078: PUSH
65079: LD_STRING 
65081: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65082: LD_ADDR_OWVAR 35
65086: PUSH
65087: LD_VAR 0 1
65091: NEG
65092: PPUSH
65093: LD_VAR 0 1
65097: PPUSH
65098: CALL_OW 12
65102: ST_TO_ADDR
// end ;
65103: LD_VAR 0 2
65107: RET
// export function PrepareEnchidna ( ) ; begin
65108: LD_INT 0
65110: PPUSH
// uc_side := 0 ;
65111: LD_ADDR_OWVAR 20
65115: PUSH
65116: LD_INT 0
65118: ST_TO_ADDR
// uc_nation := 0 ;
65119: LD_ADDR_OWVAR 21
65123: PUSH
65124: LD_INT 0
65126: ST_TO_ADDR
// InitHc ;
65127: CALL_OW 19
// hc_class := class_baggie ;
65131: LD_ADDR_OWVAR 28
65135: PUSH
65136: LD_INT 13
65138: ST_TO_ADDR
// hc_gallery :=  ;
65139: LD_ADDR_OWVAR 33
65143: PUSH
65144: LD_STRING 
65146: ST_TO_ADDR
// hc_name :=  ;
65147: LD_ADDR_OWVAR 26
65151: PUSH
65152: LD_STRING 
65154: ST_TO_ADDR
// end ;
65155: LD_VAR 0 1
65159: RET
// export function PrepareFrog ( ) ; begin
65160: LD_INT 0
65162: PPUSH
// uc_side := 0 ;
65163: LD_ADDR_OWVAR 20
65167: PUSH
65168: LD_INT 0
65170: ST_TO_ADDR
// uc_nation := 0 ;
65171: LD_ADDR_OWVAR 21
65175: PUSH
65176: LD_INT 0
65178: ST_TO_ADDR
// InitHc ;
65179: CALL_OW 19
// hc_class := class_frog ;
65183: LD_ADDR_OWVAR 28
65187: PUSH
65188: LD_INT 19
65190: ST_TO_ADDR
// hc_gallery :=  ;
65191: LD_ADDR_OWVAR 33
65195: PUSH
65196: LD_STRING 
65198: ST_TO_ADDR
// hc_name :=  ;
65199: LD_ADDR_OWVAR 26
65203: PUSH
65204: LD_STRING 
65206: ST_TO_ADDR
// end ;
65207: LD_VAR 0 1
65211: RET
// export function PrepareFish ( ) ; begin
65212: LD_INT 0
65214: PPUSH
// uc_side := 0 ;
65215: LD_ADDR_OWVAR 20
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
// uc_nation := 0 ;
65223: LD_ADDR_OWVAR 21
65227: PUSH
65228: LD_INT 0
65230: ST_TO_ADDR
// InitHc ;
65231: CALL_OW 19
// hc_class := class_fish ;
65235: LD_ADDR_OWVAR 28
65239: PUSH
65240: LD_INT 20
65242: ST_TO_ADDR
// hc_gallery :=  ;
65243: LD_ADDR_OWVAR 33
65247: PUSH
65248: LD_STRING 
65250: ST_TO_ADDR
// hc_name :=  ;
65251: LD_ADDR_OWVAR 26
65255: PUSH
65256: LD_STRING 
65258: ST_TO_ADDR
// end ;
65259: LD_VAR 0 1
65263: RET
// export function PrepareBird ( ) ; begin
65264: LD_INT 0
65266: PPUSH
// uc_side := 0 ;
65267: LD_ADDR_OWVAR 20
65271: PUSH
65272: LD_INT 0
65274: ST_TO_ADDR
// uc_nation := 0 ;
65275: LD_ADDR_OWVAR 21
65279: PUSH
65280: LD_INT 0
65282: ST_TO_ADDR
// InitHc ;
65283: CALL_OW 19
// hc_class := class_phororhacos ;
65287: LD_ADDR_OWVAR 28
65291: PUSH
65292: LD_INT 18
65294: ST_TO_ADDR
// hc_gallery :=  ;
65295: LD_ADDR_OWVAR 33
65299: PUSH
65300: LD_STRING 
65302: ST_TO_ADDR
// hc_name :=  ;
65303: LD_ADDR_OWVAR 26
65307: PUSH
65308: LD_STRING 
65310: ST_TO_ADDR
// end ;
65311: LD_VAR 0 1
65315: RET
// export function PrepareHorse ( ) ; begin
65316: LD_INT 0
65318: PPUSH
// uc_side := 0 ;
65319: LD_ADDR_OWVAR 20
65323: PUSH
65324: LD_INT 0
65326: ST_TO_ADDR
// uc_nation := 0 ;
65327: LD_ADDR_OWVAR 21
65331: PUSH
65332: LD_INT 0
65334: ST_TO_ADDR
// InitHc ;
65335: CALL_OW 19
// hc_class := class_horse ;
65339: LD_ADDR_OWVAR 28
65343: PUSH
65344: LD_INT 21
65346: ST_TO_ADDR
// hc_gallery :=  ;
65347: LD_ADDR_OWVAR 33
65351: PUSH
65352: LD_STRING 
65354: ST_TO_ADDR
// hc_name :=  ;
65355: LD_ADDR_OWVAR 26
65359: PUSH
65360: LD_STRING 
65362: ST_TO_ADDR
// end ;
65363: LD_VAR 0 1
65367: RET
// export function PrepareMastodont ( ) ; begin
65368: LD_INT 0
65370: PPUSH
// uc_side := 0 ;
65371: LD_ADDR_OWVAR 20
65375: PUSH
65376: LD_INT 0
65378: ST_TO_ADDR
// uc_nation := 0 ;
65379: LD_ADDR_OWVAR 21
65383: PUSH
65384: LD_INT 0
65386: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65387: LD_ADDR_OWVAR 37
65391: PUSH
65392: LD_INT 31
65394: ST_TO_ADDR
// vc_control := control_rider ;
65395: LD_ADDR_OWVAR 38
65399: PUSH
65400: LD_INT 4
65402: ST_TO_ADDR
// end ;
65403: LD_VAR 0 1
65407: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65408: LD_INT 0
65410: PPUSH
65411: PPUSH
65412: PPUSH
// uc_side = 0 ;
65413: LD_ADDR_OWVAR 20
65417: PUSH
65418: LD_INT 0
65420: ST_TO_ADDR
// uc_nation = 0 ;
65421: LD_ADDR_OWVAR 21
65425: PUSH
65426: LD_INT 0
65428: ST_TO_ADDR
// InitHc_All ( ) ;
65429: CALL_OW 584
// InitVc ;
65433: CALL_OW 20
// if mastodonts then
65437: LD_VAR 0 6
65441: IFFALSE 65508
// for i = 1 to mastodonts do
65443: LD_ADDR_VAR 0 11
65447: PUSH
65448: DOUBLE
65449: LD_INT 1
65451: DEC
65452: ST_TO_ADDR
65453: LD_VAR 0 6
65457: PUSH
65458: FOR_TO
65459: IFFALSE 65506
// begin vc_chassis := 31 ;
65461: LD_ADDR_OWVAR 37
65465: PUSH
65466: LD_INT 31
65468: ST_TO_ADDR
// vc_control := control_rider ;
65469: LD_ADDR_OWVAR 38
65473: PUSH
65474: LD_INT 4
65476: ST_TO_ADDR
// animal := CreateVehicle ;
65477: LD_ADDR_VAR 0 12
65481: PUSH
65482: CALL_OW 45
65486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65487: LD_VAR 0 12
65491: PPUSH
65492: LD_VAR 0 8
65496: PPUSH
65497: LD_INT 0
65499: PPUSH
65500: CALL 67650 0 3
// end ;
65504: GO 65458
65506: POP
65507: POP
// if horses then
65508: LD_VAR 0 5
65512: IFFALSE 65579
// for i = 1 to horses do
65514: LD_ADDR_VAR 0 11
65518: PUSH
65519: DOUBLE
65520: LD_INT 1
65522: DEC
65523: ST_TO_ADDR
65524: LD_VAR 0 5
65528: PUSH
65529: FOR_TO
65530: IFFALSE 65577
// begin hc_class := 21 ;
65532: LD_ADDR_OWVAR 28
65536: PUSH
65537: LD_INT 21
65539: ST_TO_ADDR
// hc_gallery :=  ;
65540: LD_ADDR_OWVAR 33
65544: PUSH
65545: LD_STRING 
65547: ST_TO_ADDR
// animal := CreateHuman ;
65548: LD_ADDR_VAR 0 12
65552: PUSH
65553: CALL_OW 44
65557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65558: LD_VAR 0 12
65562: PPUSH
65563: LD_VAR 0 8
65567: PPUSH
65568: LD_INT 0
65570: PPUSH
65571: CALL 67650 0 3
// end ;
65575: GO 65529
65577: POP
65578: POP
// if birds then
65579: LD_VAR 0 1
65583: IFFALSE 65650
// for i = 1 to birds do
65585: LD_ADDR_VAR 0 11
65589: PUSH
65590: DOUBLE
65591: LD_INT 1
65593: DEC
65594: ST_TO_ADDR
65595: LD_VAR 0 1
65599: PUSH
65600: FOR_TO
65601: IFFALSE 65648
// begin hc_class := 18 ;
65603: LD_ADDR_OWVAR 28
65607: PUSH
65608: LD_INT 18
65610: ST_TO_ADDR
// hc_gallery =  ;
65611: LD_ADDR_OWVAR 33
65615: PUSH
65616: LD_STRING 
65618: ST_TO_ADDR
// animal := CreateHuman ;
65619: LD_ADDR_VAR 0 12
65623: PUSH
65624: CALL_OW 44
65628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65629: LD_VAR 0 12
65633: PPUSH
65634: LD_VAR 0 8
65638: PPUSH
65639: LD_INT 0
65641: PPUSH
65642: CALL 67650 0 3
// end ;
65646: GO 65600
65648: POP
65649: POP
// if tigers then
65650: LD_VAR 0 2
65654: IFFALSE 65738
// for i = 1 to tigers do
65656: LD_ADDR_VAR 0 11
65660: PUSH
65661: DOUBLE
65662: LD_INT 1
65664: DEC
65665: ST_TO_ADDR
65666: LD_VAR 0 2
65670: PUSH
65671: FOR_TO
65672: IFFALSE 65736
// begin hc_class = class_tiger ;
65674: LD_ADDR_OWVAR 28
65678: PUSH
65679: LD_INT 14
65681: ST_TO_ADDR
// hc_gallery =  ;
65682: LD_ADDR_OWVAR 33
65686: PUSH
65687: LD_STRING 
65689: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65690: LD_ADDR_OWVAR 35
65694: PUSH
65695: LD_INT 7
65697: NEG
65698: PPUSH
65699: LD_INT 7
65701: PPUSH
65702: CALL_OW 12
65706: ST_TO_ADDR
// animal := CreateHuman ;
65707: LD_ADDR_VAR 0 12
65711: PUSH
65712: CALL_OW 44
65716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65717: LD_VAR 0 12
65721: PPUSH
65722: LD_VAR 0 8
65726: PPUSH
65727: LD_INT 0
65729: PPUSH
65730: CALL 67650 0 3
// end ;
65734: GO 65671
65736: POP
65737: POP
// if apemans then
65738: LD_VAR 0 3
65742: IFFALSE 65865
// for i = 1 to apemans do
65744: LD_ADDR_VAR 0 11
65748: PUSH
65749: DOUBLE
65750: LD_INT 1
65752: DEC
65753: ST_TO_ADDR
65754: LD_VAR 0 3
65758: PUSH
65759: FOR_TO
65760: IFFALSE 65863
// begin hc_class = class_apeman ;
65762: LD_ADDR_OWVAR 28
65766: PUSH
65767: LD_INT 12
65769: ST_TO_ADDR
// hc_gallery =  ;
65770: LD_ADDR_OWVAR 33
65774: PUSH
65775: LD_STRING 
65777: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65778: LD_ADDR_OWVAR 35
65782: PUSH
65783: LD_INT 2
65785: NEG
65786: PPUSH
65787: LD_INT 2
65789: PPUSH
65790: CALL_OW 12
65794: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65795: LD_ADDR_OWVAR 31
65799: PUSH
65800: LD_INT 1
65802: PPUSH
65803: LD_INT 3
65805: PPUSH
65806: CALL_OW 12
65810: PUSH
65811: LD_INT 1
65813: PPUSH
65814: LD_INT 3
65816: PPUSH
65817: CALL_OW 12
65821: PUSH
65822: LD_INT 0
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: ST_TO_ADDR
// animal := CreateHuman ;
65834: LD_ADDR_VAR 0 12
65838: PUSH
65839: CALL_OW 44
65843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65844: LD_VAR 0 12
65848: PPUSH
65849: LD_VAR 0 8
65853: PPUSH
65854: LD_INT 0
65856: PPUSH
65857: CALL 67650 0 3
// end ;
65861: GO 65759
65863: POP
65864: POP
// if enchidnas then
65865: LD_VAR 0 4
65869: IFFALSE 65936
// for i = 1 to enchidnas do
65871: LD_ADDR_VAR 0 11
65875: PUSH
65876: DOUBLE
65877: LD_INT 1
65879: DEC
65880: ST_TO_ADDR
65881: LD_VAR 0 4
65885: PUSH
65886: FOR_TO
65887: IFFALSE 65934
// begin hc_class = 13 ;
65889: LD_ADDR_OWVAR 28
65893: PUSH
65894: LD_INT 13
65896: ST_TO_ADDR
// hc_gallery =  ;
65897: LD_ADDR_OWVAR 33
65901: PUSH
65902: LD_STRING 
65904: ST_TO_ADDR
// animal := CreateHuman ;
65905: LD_ADDR_VAR 0 12
65909: PUSH
65910: CALL_OW 44
65914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65915: LD_VAR 0 12
65919: PPUSH
65920: LD_VAR 0 8
65924: PPUSH
65925: LD_INT 0
65927: PPUSH
65928: CALL 67650 0 3
// end ;
65932: GO 65886
65934: POP
65935: POP
// if fishes then
65936: LD_VAR 0 7
65940: IFFALSE 66007
// for i = 1 to fishes do
65942: LD_ADDR_VAR 0 11
65946: PUSH
65947: DOUBLE
65948: LD_INT 1
65950: DEC
65951: ST_TO_ADDR
65952: LD_VAR 0 7
65956: PUSH
65957: FOR_TO
65958: IFFALSE 66005
// begin hc_class = 20 ;
65960: LD_ADDR_OWVAR 28
65964: PUSH
65965: LD_INT 20
65967: ST_TO_ADDR
// hc_gallery =  ;
65968: LD_ADDR_OWVAR 33
65972: PUSH
65973: LD_STRING 
65975: ST_TO_ADDR
// animal := CreateHuman ;
65976: LD_ADDR_VAR 0 12
65980: PUSH
65981: CALL_OW 44
65985: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65986: LD_VAR 0 12
65990: PPUSH
65991: LD_VAR 0 9
65995: PPUSH
65996: LD_INT 0
65998: PPUSH
65999: CALL 67650 0 3
// end ;
66003: GO 65957
66005: POP
66006: POP
// end ;
66007: LD_VAR 0 10
66011: RET
// export function WantHeal ( sci , unit ) ; begin
66012: LD_INT 0
66014: PPUSH
// if GetTaskList ( sci ) > 0 then
66015: LD_VAR 0 1
66019: PPUSH
66020: CALL_OW 437
66024: PUSH
66025: LD_INT 0
66027: GREATER
66028: IFFALSE 66100
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66030: LD_VAR 0 1
66034: PPUSH
66035: CALL_OW 437
66039: PUSH
66040: LD_INT 1
66042: ARRAY
66043: PUSH
66044: LD_INT 1
66046: ARRAY
66047: PUSH
66048: LD_STRING l
66050: EQUAL
66051: IFFALSE 66078
66053: PUSH
66054: LD_VAR 0 1
66058: PPUSH
66059: CALL_OW 437
66063: PUSH
66064: LD_INT 1
66066: ARRAY
66067: PUSH
66068: LD_INT 4
66070: ARRAY
66071: PUSH
66072: LD_VAR 0 2
66076: EQUAL
66077: AND
66078: IFFALSE 66090
// result := true else
66080: LD_ADDR_VAR 0 3
66084: PUSH
66085: LD_INT 1
66087: ST_TO_ADDR
66088: GO 66098
// result := false ;
66090: LD_ADDR_VAR 0 3
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// end else
66098: GO 66108
// result := false ;
66100: LD_ADDR_VAR 0 3
66104: PUSH
66105: LD_INT 0
66107: ST_TO_ADDR
// end ;
66108: LD_VAR 0 3
66112: RET
// export function HealTarget ( sci ) ; begin
66113: LD_INT 0
66115: PPUSH
// if not sci then
66116: LD_VAR 0 1
66120: NOT
66121: IFFALSE 66125
// exit ;
66123: GO 66190
// result := 0 ;
66125: LD_ADDR_VAR 0 2
66129: PUSH
66130: LD_INT 0
66132: ST_TO_ADDR
// if GetTaskList ( sci ) then
66133: LD_VAR 0 1
66137: PPUSH
66138: CALL_OW 437
66142: IFFALSE 66190
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66144: LD_VAR 0 1
66148: PPUSH
66149: CALL_OW 437
66153: PUSH
66154: LD_INT 1
66156: ARRAY
66157: PUSH
66158: LD_INT 1
66160: ARRAY
66161: PUSH
66162: LD_STRING l
66164: EQUAL
66165: IFFALSE 66190
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66167: LD_ADDR_VAR 0 2
66171: PUSH
66172: LD_VAR 0 1
66176: PPUSH
66177: CALL_OW 437
66181: PUSH
66182: LD_INT 1
66184: ARRAY
66185: PUSH
66186: LD_INT 4
66188: ARRAY
66189: ST_TO_ADDR
// end ;
66190: LD_VAR 0 2
66194: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66195: LD_INT 0
66197: PPUSH
66198: PPUSH
66199: PPUSH
66200: PPUSH
// if not base_units then
66201: LD_VAR 0 1
66205: NOT
66206: IFFALSE 66210
// exit ;
66208: GO 66297
// result := false ;
66210: LD_ADDR_VAR 0 2
66214: PUSH
66215: LD_INT 0
66217: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66218: LD_ADDR_VAR 0 5
66222: PUSH
66223: LD_VAR 0 1
66227: PPUSH
66228: LD_INT 21
66230: PUSH
66231: LD_INT 3
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PPUSH
66238: CALL_OW 72
66242: ST_TO_ADDR
// if not tmp then
66243: LD_VAR 0 5
66247: NOT
66248: IFFALSE 66252
// exit ;
66250: GO 66297
// for i in tmp do
66252: LD_ADDR_VAR 0 3
66256: PUSH
66257: LD_VAR 0 5
66261: PUSH
66262: FOR_IN
66263: IFFALSE 66295
// begin result := EnemyInRange ( i , 22 ) ;
66265: LD_ADDR_VAR 0 2
66269: PUSH
66270: LD_VAR 0 3
66274: PPUSH
66275: LD_INT 22
66277: PPUSH
66278: CALL 63712 0 2
66282: ST_TO_ADDR
// if result then
66283: LD_VAR 0 2
66287: IFFALSE 66293
// exit ;
66289: POP
66290: POP
66291: GO 66297
// end ;
66293: GO 66262
66295: POP
66296: POP
// end ;
66297: LD_VAR 0 2
66301: RET
// export function FilterByTag ( units , tag ) ; begin
66302: LD_INT 0
66304: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66305: LD_ADDR_VAR 0 3
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: LD_INT 120
66317: PUSH
66318: LD_VAR 0 2
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PPUSH
66327: CALL_OW 72
66331: ST_TO_ADDR
// end ;
66332: LD_VAR 0 3
66336: RET
// export function IsDriver ( un ) ; begin
66337: LD_INT 0
66339: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66340: LD_ADDR_VAR 0 2
66344: PUSH
66345: LD_VAR 0 1
66349: PUSH
66350: LD_INT 55
66352: PUSH
66353: EMPTY
66354: LIST
66355: PPUSH
66356: CALL_OW 69
66360: IN
66361: ST_TO_ADDR
// end ;
66362: LD_VAR 0 2
66366: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66367: LD_INT 0
66369: PPUSH
66370: PPUSH
// list := [ ] ;
66371: LD_ADDR_VAR 0 5
66375: PUSH
66376: EMPTY
66377: ST_TO_ADDR
// case d of 0 :
66378: LD_VAR 0 3
66382: PUSH
66383: LD_INT 0
66385: DOUBLE
66386: EQUAL
66387: IFTRUE 66391
66389: GO 66524
66391: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66392: LD_ADDR_VAR 0 5
66396: PUSH
66397: LD_VAR 0 1
66401: PUSH
66402: LD_INT 4
66404: MINUS
66405: PUSH
66406: LD_VAR 0 2
66410: PUSH
66411: LD_INT 4
66413: MINUS
66414: PUSH
66415: LD_INT 2
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: LIST
66422: PUSH
66423: LD_VAR 0 1
66427: PUSH
66428: LD_INT 3
66430: MINUS
66431: PUSH
66432: LD_VAR 0 2
66436: PUSH
66437: LD_INT 1
66439: PUSH
66440: EMPTY
66441: LIST
66442: LIST
66443: LIST
66444: PUSH
66445: LD_VAR 0 1
66449: PUSH
66450: LD_INT 4
66452: PLUS
66453: PUSH
66454: LD_VAR 0 2
66458: PUSH
66459: LD_INT 4
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: PUSH
66467: LD_VAR 0 1
66471: PUSH
66472: LD_INT 3
66474: PLUS
66475: PUSH
66476: LD_VAR 0 2
66480: PUSH
66481: LD_INT 3
66483: PLUS
66484: PUSH
66485: LD_INT 5
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: PUSH
66493: LD_VAR 0 1
66497: PUSH
66498: LD_VAR 0 2
66502: PUSH
66503: LD_INT 4
66505: PLUS
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: LIST
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: LIST
66519: LIST
66520: LIST
66521: ST_TO_ADDR
// end ; 1 :
66522: GO 67222
66524: LD_INT 1
66526: DOUBLE
66527: EQUAL
66528: IFTRUE 66532
66530: GO 66665
66532: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66533: LD_ADDR_VAR 0 5
66537: PUSH
66538: LD_VAR 0 1
66542: PUSH
66543: LD_VAR 0 2
66547: PUSH
66548: LD_INT 4
66550: MINUS
66551: PUSH
66552: LD_INT 3
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: LIST
66559: PUSH
66560: LD_VAR 0 1
66564: PUSH
66565: LD_INT 3
66567: MINUS
66568: PUSH
66569: LD_VAR 0 2
66573: PUSH
66574: LD_INT 3
66576: MINUS
66577: PUSH
66578: LD_INT 2
66580: PUSH
66581: EMPTY
66582: LIST
66583: LIST
66584: LIST
66585: PUSH
66586: LD_VAR 0 1
66590: PUSH
66591: LD_INT 4
66593: MINUS
66594: PUSH
66595: LD_VAR 0 2
66599: PUSH
66600: LD_INT 1
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: LIST
66607: PUSH
66608: LD_VAR 0 1
66612: PUSH
66613: LD_VAR 0 2
66617: PUSH
66618: LD_INT 3
66620: PLUS
66621: PUSH
66622: LD_INT 0
66624: PUSH
66625: EMPTY
66626: LIST
66627: LIST
66628: LIST
66629: PUSH
66630: LD_VAR 0 1
66634: PUSH
66635: LD_INT 4
66637: PLUS
66638: PUSH
66639: LD_VAR 0 2
66643: PUSH
66644: LD_INT 4
66646: PLUS
66647: PUSH
66648: LD_INT 5
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: LIST
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: ST_TO_ADDR
// end ; 2 :
66663: GO 67222
66665: LD_INT 2
66667: DOUBLE
66668: EQUAL
66669: IFTRUE 66673
66671: GO 66802
66673: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66674: LD_ADDR_VAR 0 5
66678: PUSH
66679: LD_VAR 0 1
66683: PUSH
66684: LD_VAR 0 2
66688: PUSH
66689: LD_INT 3
66691: MINUS
66692: PUSH
66693: LD_INT 3
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: LIST
66700: PUSH
66701: LD_VAR 0 1
66705: PUSH
66706: LD_INT 4
66708: PLUS
66709: PUSH
66710: LD_VAR 0 2
66714: PUSH
66715: LD_INT 4
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: PUSH
66723: LD_VAR 0 1
66727: PUSH
66728: LD_VAR 0 2
66732: PUSH
66733: LD_INT 4
66735: PLUS
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: LIST
66744: PUSH
66745: LD_VAR 0 1
66749: PUSH
66750: LD_INT 3
66752: MINUS
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: LIST
66766: PUSH
66767: LD_VAR 0 1
66771: PUSH
66772: LD_INT 4
66774: MINUS
66775: PUSH
66776: LD_VAR 0 2
66780: PUSH
66781: LD_INT 4
66783: MINUS
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: LIST
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: ST_TO_ADDR
// end ; 3 :
66800: GO 67222
66802: LD_INT 3
66804: DOUBLE
66805: EQUAL
66806: IFTRUE 66810
66808: GO 66943
66810: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66811: LD_ADDR_VAR 0 5
66815: PUSH
66816: LD_VAR 0 1
66820: PUSH
66821: LD_INT 3
66823: PLUS
66824: PUSH
66825: LD_VAR 0 2
66829: PUSH
66830: LD_INT 4
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: PUSH
66838: LD_VAR 0 1
66842: PUSH
66843: LD_INT 4
66845: PLUS
66846: PUSH
66847: LD_VAR 0 2
66851: PUSH
66852: LD_INT 4
66854: PLUS
66855: PUSH
66856: LD_INT 5
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: LIST
66863: PUSH
66864: LD_VAR 0 1
66868: PUSH
66869: LD_INT 4
66871: MINUS
66872: PUSH
66873: LD_VAR 0 2
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: LIST
66885: PUSH
66886: LD_VAR 0 1
66890: PUSH
66891: LD_VAR 0 2
66895: PUSH
66896: LD_INT 4
66898: MINUS
66899: PUSH
66900: LD_INT 3
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: LIST
66907: PUSH
66908: LD_VAR 0 1
66912: PUSH
66913: LD_INT 3
66915: MINUS
66916: PUSH
66917: LD_VAR 0 2
66921: PUSH
66922: LD_INT 3
66924: MINUS
66925: PUSH
66926: LD_INT 2
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// end ; 4 :
66941: GO 67222
66943: LD_INT 4
66945: DOUBLE
66946: EQUAL
66947: IFTRUE 66951
66949: GO 67084
66951: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66952: LD_ADDR_VAR 0 5
66956: PUSH
66957: LD_VAR 0 1
66961: PUSH
66962: LD_VAR 0 2
66966: PUSH
66967: LD_INT 4
66969: PLUS
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: LIST
66978: PUSH
66979: LD_VAR 0 1
66983: PUSH
66984: LD_INT 3
66986: PLUS
66987: PUSH
66988: LD_VAR 0 2
66992: PUSH
66993: LD_INT 3
66995: PLUS
66996: PUSH
66997: LD_INT 5
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: LIST
67004: PUSH
67005: LD_VAR 0 1
67009: PUSH
67010: LD_INT 4
67012: PLUS
67013: PUSH
67014: LD_VAR 0 2
67018: PUSH
67019: LD_INT 4
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: LD_VAR 0 2
67036: PUSH
67037: LD_INT 3
67039: MINUS
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: LIST
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: LD_INT 4
67056: MINUS
67057: PUSH
67058: LD_VAR 0 2
67062: PUSH
67063: LD_INT 4
67065: MINUS
67066: PUSH
67067: LD_INT 2
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: ST_TO_ADDR
// end ; 5 :
67082: GO 67222
67084: LD_INT 5
67086: DOUBLE
67087: EQUAL
67088: IFTRUE 67092
67090: GO 67221
67092: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67093: LD_ADDR_VAR 0 5
67097: PUSH
67098: LD_VAR 0 1
67102: PUSH
67103: LD_INT 4
67105: MINUS
67106: PUSH
67107: LD_VAR 0 2
67111: PUSH
67112: LD_INT 1
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: LIST
67119: PUSH
67120: LD_VAR 0 1
67124: PUSH
67125: LD_VAR 0 2
67129: PUSH
67130: LD_INT 4
67132: MINUS
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: PUSH
67142: LD_VAR 0 1
67146: PUSH
67147: LD_INT 4
67149: PLUS
67150: PUSH
67151: LD_VAR 0 2
67155: PUSH
67156: LD_INT 4
67158: PLUS
67159: PUSH
67160: LD_INT 5
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: LIST
67167: PUSH
67168: LD_VAR 0 1
67172: PUSH
67173: LD_INT 3
67175: PLUS
67176: PUSH
67177: LD_VAR 0 2
67181: PUSH
67182: LD_INT 4
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: LIST
67189: PUSH
67190: LD_VAR 0 1
67194: PUSH
67195: LD_VAR 0 2
67199: PUSH
67200: LD_INT 3
67202: PLUS
67203: PUSH
67204: LD_INT 0
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: LIST
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: ST_TO_ADDR
// end ; end ;
67219: GO 67222
67221: POP
// result := list ;
67222: LD_ADDR_VAR 0 4
67226: PUSH
67227: LD_VAR 0 5
67231: ST_TO_ADDR
// end ;
67232: LD_VAR 0 4
67236: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67237: LD_INT 0
67239: PPUSH
67240: PPUSH
67241: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67242: LD_VAR 0 1
67246: NOT
67247: IFTRUE 67275
67249: PUSH
67250: LD_VAR 0 2
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: LD_INT 2
67260: PUSH
67261: LD_INT 3
67263: PUSH
67264: LD_INT 4
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: LIST
67272: IN
67273: NOT
67274: OR
67275: IFFALSE 67279
// exit ;
67277: GO 67362
// tmp := [ ] ;
67279: LD_ADDR_VAR 0 5
67283: PUSH
67284: EMPTY
67285: ST_TO_ADDR
// for i in units do
67286: LD_ADDR_VAR 0 4
67290: PUSH
67291: LD_VAR 0 1
67295: PUSH
67296: FOR_IN
67297: IFFALSE 67331
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67299: LD_ADDR_VAR 0 5
67303: PUSH
67304: LD_VAR 0 5
67308: PPUSH
67309: LD_VAR 0 4
67313: PPUSH
67314: LD_VAR 0 2
67318: PPUSH
67319: CALL_OW 259
67323: PPUSH
67324: CALL 68757 0 2
67328: ST_TO_ADDR
67329: GO 67296
67331: POP
67332: POP
// if not tmp then
67333: LD_VAR 0 5
67337: NOT
67338: IFFALSE 67342
// exit ;
67340: GO 67362
// result := SortListByListDesc ( units , tmp ) ;
67342: LD_ADDR_VAR 0 3
67346: PUSH
67347: LD_VAR 0 1
67351: PPUSH
67352: LD_VAR 0 5
67356: PPUSH
67357: CALL_OW 77
67361: ST_TO_ADDR
// end ;
67362: LD_VAR 0 3
67366: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67367: LD_INT 0
67369: PPUSH
67370: PPUSH
67371: PPUSH
// result := false ;
67372: LD_ADDR_VAR 0 3
67376: PUSH
67377: LD_INT 0
67379: ST_TO_ADDR
// if not building then
67380: LD_VAR 0 2
67384: NOT
67385: IFFALSE 67389
// exit ;
67387: GO 67533
// x := GetX ( building ) ;
67389: LD_ADDR_VAR 0 4
67393: PUSH
67394: LD_VAR 0 2
67398: PPUSH
67399: CALL_OW 250
67403: ST_TO_ADDR
// y := GetY ( building ) ;
67404: LD_ADDR_VAR 0 5
67408: PUSH
67409: LD_VAR 0 2
67413: PPUSH
67414: CALL_OW 251
67418: ST_TO_ADDR
// if not x or not y then
67419: LD_VAR 0 4
67423: NOT
67424: IFTRUE 67433
67426: PUSH
67427: LD_VAR 0 5
67431: NOT
67432: OR
67433: IFFALSE 67437
// exit ;
67435: GO 67533
// if GetTaskList ( unit ) then
67437: LD_VAR 0 1
67441: PPUSH
67442: CALL_OW 437
67446: IFFALSE 67533
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67448: LD_STRING e
67450: PUSH
67451: LD_VAR 0 1
67455: PPUSH
67456: CALL_OW 437
67460: PUSH
67461: LD_INT 1
67463: ARRAY
67464: PUSH
67465: LD_INT 1
67467: ARRAY
67468: EQUAL
67469: IFFALSE 67496
67471: PUSH
67472: LD_VAR 0 4
67476: PUSH
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL_OW 437
67486: PUSH
67487: LD_INT 1
67489: ARRAY
67490: PUSH
67491: LD_INT 2
67493: ARRAY
67494: EQUAL
67495: AND
67496: IFFALSE 67523
67498: PUSH
67499: LD_VAR 0 5
67503: PUSH
67504: LD_VAR 0 1
67508: PPUSH
67509: CALL_OW 437
67513: PUSH
67514: LD_INT 1
67516: ARRAY
67517: PUSH
67518: LD_INT 3
67520: ARRAY
67521: EQUAL
67522: AND
67523: IFFALSE 67533
// result := true end ;
67525: LD_ADDR_VAR 0 3
67529: PUSH
67530: LD_INT 1
67532: ST_TO_ADDR
// end ;
67533: LD_VAR 0 3
67537: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67538: LD_INT 0
67540: PPUSH
// result := false ;
67541: LD_ADDR_VAR 0 4
67545: PUSH
67546: LD_INT 0
67548: ST_TO_ADDR
// if GetTaskList ( unit ) then
67549: LD_VAR 0 1
67553: PPUSH
67554: CALL_OW 437
67558: IFFALSE 67645
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67560: LD_STRING M
67562: PUSH
67563: LD_VAR 0 1
67567: PPUSH
67568: CALL_OW 437
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PUSH
67577: LD_INT 1
67579: ARRAY
67580: EQUAL
67581: IFFALSE 67608
67583: PUSH
67584: LD_VAR 0 2
67588: PUSH
67589: LD_VAR 0 1
67593: PPUSH
67594: CALL_OW 437
67598: PUSH
67599: LD_INT 1
67601: ARRAY
67602: PUSH
67603: LD_INT 2
67605: ARRAY
67606: EQUAL
67607: AND
67608: IFFALSE 67635
67610: PUSH
67611: LD_VAR 0 3
67615: PUSH
67616: LD_VAR 0 1
67620: PPUSH
67621: CALL_OW 437
67625: PUSH
67626: LD_INT 1
67628: ARRAY
67629: PUSH
67630: LD_INT 3
67632: ARRAY
67633: EQUAL
67634: AND
67635: IFFALSE 67645
// result := true ;
67637: LD_ADDR_VAR 0 4
67641: PUSH
67642: LD_INT 1
67644: ST_TO_ADDR
// end ; end ;
67645: LD_VAR 0 4
67649: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67650: LD_INT 0
67652: PPUSH
67653: PPUSH
67654: PPUSH
67655: PPUSH
// if not unit or not area then
67656: LD_VAR 0 1
67660: NOT
67661: IFTRUE 67670
67663: PUSH
67664: LD_VAR 0 2
67668: NOT
67669: OR
67670: IFFALSE 67674
// exit ;
67672: GO 67850
// tmp := AreaToList ( area , i ) ;
67674: LD_ADDR_VAR 0 6
67678: PUSH
67679: LD_VAR 0 2
67683: PPUSH
67684: LD_VAR 0 5
67688: PPUSH
67689: CALL_OW 517
67693: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67694: LD_ADDR_VAR 0 5
67698: PUSH
67699: DOUBLE
67700: LD_INT 1
67702: DEC
67703: ST_TO_ADDR
67704: LD_VAR 0 6
67708: PUSH
67709: LD_INT 1
67711: ARRAY
67712: PUSH
67713: FOR_TO
67714: IFFALSE 67848
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67716: LD_ADDR_VAR 0 7
67720: PUSH
67721: LD_VAR 0 6
67725: PUSH
67726: LD_INT 1
67728: ARRAY
67729: PUSH
67730: LD_VAR 0 5
67734: ARRAY
67735: PUSH
67736: LD_VAR 0 6
67740: PUSH
67741: LD_INT 2
67743: ARRAY
67744: PUSH
67745: LD_VAR 0 5
67749: ARRAY
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67755: LD_INT 92
67757: PUSH
67758: LD_VAR 0 7
67762: PUSH
67763: LD_INT 1
67765: ARRAY
67766: PUSH
67767: LD_VAR 0 7
67771: PUSH
67772: LD_INT 2
67774: ARRAY
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: PPUSH
67785: CALL_OW 69
67789: PUSH
67790: LD_INT 0
67792: EQUAL
67793: IFFALSE 67846
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67795: LD_VAR 0 1
67799: PPUSH
67800: LD_VAR 0 7
67804: PUSH
67805: LD_INT 1
67807: ARRAY
67808: PPUSH
67809: LD_VAR 0 7
67813: PUSH
67814: LD_INT 2
67816: ARRAY
67817: PPUSH
67818: LD_VAR 0 3
67822: PPUSH
67823: CALL_OW 48
// result := IsPlaced ( unit ) ;
67827: LD_ADDR_VAR 0 4
67831: PUSH
67832: LD_VAR 0 1
67836: PPUSH
67837: CALL_OW 305
67841: ST_TO_ADDR
// exit ;
67842: POP
67843: POP
67844: GO 67850
// end ; end ;
67846: GO 67713
67848: POP
67849: POP
// end ;
67850: LD_VAR 0 4
67854: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67855: LD_INT 0
67857: PPUSH
67858: PPUSH
67859: PPUSH
// if not side or side > 8 then
67860: LD_VAR 0 1
67864: NOT
67865: IFTRUE 67877
67867: PUSH
67868: LD_VAR 0 1
67872: PUSH
67873: LD_INT 8
67875: GREATER
67876: OR
67877: IFFALSE 67881
// exit ;
67879: GO 68068
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67881: LD_ADDR_VAR 0 4
67885: PUSH
67886: LD_INT 22
67888: PUSH
67889: LD_VAR 0 1
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 21
67900: PUSH
67901: LD_INT 3
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PPUSH
67912: CALL_OW 69
67916: ST_TO_ADDR
// if not tmp then
67917: LD_VAR 0 4
67921: NOT
67922: IFFALSE 67926
// exit ;
67924: GO 68068
// enable_addtolog := true ;
67926: LD_ADDR_OWVAR 81
67930: PUSH
67931: LD_INT 1
67933: ST_TO_ADDR
// AddToLog ( [ ) ;
67934: LD_STRING [
67936: PPUSH
67937: CALL_OW 561
// for i in tmp do
67941: LD_ADDR_VAR 0 3
67945: PUSH
67946: LD_VAR 0 4
67950: PUSH
67951: FOR_IN
67952: IFFALSE 68059
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67954: LD_STRING [
67956: PUSH
67957: LD_VAR 0 3
67961: PPUSH
67962: CALL_OW 266
67966: STR
67967: PUSH
67968: LD_STRING , 
67970: STR
67971: PUSH
67972: LD_VAR 0 3
67976: PPUSH
67977: CALL_OW 250
67981: STR
67982: PUSH
67983: LD_STRING , 
67985: STR
67986: PUSH
67987: LD_VAR 0 3
67991: PPUSH
67992: CALL_OW 251
67996: STR
67997: PUSH
67998: LD_STRING , 
68000: STR
68001: PUSH
68002: LD_VAR 0 3
68006: PPUSH
68007: CALL_OW 254
68011: STR
68012: PUSH
68013: LD_STRING , 
68015: STR
68016: PUSH
68017: LD_VAR 0 3
68021: PPUSH
68022: LD_INT 1
68024: PPUSH
68025: CALL_OW 268
68029: STR
68030: PUSH
68031: LD_STRING , 
68033: STR
68034: PUSH
68035: LD_VAR 0 3
68039: PPUSH
68040: LD_INT 2
68042: PPUSH
68043: CALL_OW 268
68047: STR
68048: PUSH
68049: LD_STRING ],
68051: STR
68052: PPUSH
68053: CALL_OW 561
// end ;
68057: GO 67951
68059: POP
68060: POP
// AddToLog ( ]; ) ;
68061: LD_STRING ];
68063: PPUSH
68064: CALL_OW 561
// end ;
68068: LD_VAR 0 2
68072: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68073: LD_INT 0
68075: PPUSH
68076: PPUSH
68077: PPUSH
68078: PPUSH
68079: PPUSH
// if not area or not rate or not max then
68080: LD_VAR 0 1
68084: NOT
68085: IFTRUE 68094
68087: PUSH
68088: LD_VAR 0 2
68092: NOT
68093: OR
68094: IFTRUE 68103
68096: PUSH
68097: LD_VAR 0 4
68101: NOT
68102: OR
68103: IFFALSE 68107
// exit ;
68105: GO 68296
// while 1 do
68107: LD_INT 1
68109: IFFALSE 68296
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68111: LD_ADDR_VAR 0 9
68115: PUSH
68116: LD_VAR 0 1
68120: PPUSH
68121: LD_INT 1
68123: PPUSH
68124: CALL_OW 287
68128: PUSH
68129: LD_INT 10
68131: MUL
68132: ST_TO_ADDR
// r := rate / 10 ;
68133: LD_ADDR_VAR 0 7
68137: PUSH
68138: LD_VAR 0 2
68142: PUSH
68143: LD_INT 10
68145: DIVREAL
68146: ST_TO_ADDR
// time := 1 1$00 ;
68147: LD_ADDR_VAR 0 8
68151: PUSH
68152: LD_INT 2100
68154: ST_TO_ADDR
// if amount < min then
68155: LD_VAR 0 9
68159: PUSH
68160: LD_VAR 0 3
68164: LESS
68165: IFFALSE 68183
// r := r * 2 else
68167: LD_ADDR_VAR 0 7
68171: PUSH
68172: LD_VAR 0 7
68176: PUSH
68177: LD_INT 2
68179: MUL
68180: ST_TO_ADDR
68181: GO 68209
// if amount > max then
68183: LD_VAR 0 9
68187: PUSH
68188: LD_VAR 0 4
68192: GREATER
68193: IFFALSE 68209
// r := r / 2 ;
68195: LD_ADDR_VAR 0 7
68199: PUSH
68200: LD_VAR 0 7
68204: PUSH
68205: LD_INT 2
68207: DIVREAL
68208: ST_TO_ADDR
// time := time / r ;
68209: LD_ADDR_VAR 0 8
68213: PUSH
68214: LD_VAR 0 8
68218: PUSH
68219: LD_VAR 0 7
68223: DIVREAL
68224: ST_TO_ADDR
// if time < 0 then
68225: LD_VAR 0 8
68229: PUSH
68230: LD_INT 0
68232: LESS
68233: IFFALSE 68250
// time := time * - 1 ;
68235: LD_ADDR_VAR 0 8
68239: PUSH
68240: LD_VAR 0 8
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: MUL
68249: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68250: LD_VAR 0 8
68254: PUSH
68255: LD_INT 35
68257: PPUSH
68258: LD_INT 875
68260: PPUSH
68261: CALL_OW 12
68265: PLUS
68266: PPUSH
68267: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68271: LD_INT 1
68273: PPUSH
68274: LD_INT 5
68276: PPUSH
68277: CALL_OW 12
68281: PPUSH
68282: LD_VAR 0 1
68286: PPUSH
68287: LD_INT 1
68289: PPUSH
68290: CALL_OW 55
// end ;
68294: GO 68107
// end ;
68296: LD_VAR 0 5
68300: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68301: LD_INT 0
68303: PPUSH
68304: PPUSH
68305: PPUSH
68306: PPUSH
68307: PPUSH
68308: PPUSH
68309: PPUSH
68310: PPUSH
// if not turrets or not factories then
68311: LD_VAR 0 1
68315: NOT
68316: IFTRUE 68325
68318: PUSH
68319: LD_VAR 0 2
68323: NOT
68324: OR
68325: IFFALSE 68329
// exit ;
68327: GO 68636
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68329: LD_ADDR_VAR 0 10
68333: PUSH
68334: LD_INT 5
68336: PUSH
68337: LD_INT 6
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 2
68346: PUSH
68347: LD_INT 4
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 3
68356: PUSH
68357: LD_INT 5
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: LIST
68368: PUSH
68369: LD_INT 24
68371: PUSH
68372: LD_INT 25
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 23
68381: PUSH
68382: LD_INT 27
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 42
68395: PUSH
68396: LD_INT 43
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 44
68405: PUSH
68406: LD_INT 46
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 45
68415: PUSH
68416: LD_INT 47
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: LIST
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: ST_TO_ADDR
// result := [ ] ;
68433: LD_ADDR_VAR 0 3
68437: PUSH
68438: EMPTY
68439: ST_TO_ADDR
// for i in turrets do
68440: LD_ADDR_VAR 0 4
68444: PUSH
68445: LD_VAR 0 1
68449: PUSH
68450: FOR_IN
68451: IFFALSE 68634
// begin nat := GetNation ( i ) ;
68453: LD_ADDR_VAR 0 7
68457: PUSH
68458: LD_VAR 0 4
68462: PPUSH
68463: CALL_OW 248
68467: ST_TO_ADDR
// weapon := 0 ;
68468: LD_ADDR_VAR 0 8
68472: PUSH
68473: LD_INT 0
68475: ST_TO_ADDR
// if not nat then
68476: LD_VAR 0 7
68480: NOT
68481: IFFALSE 68485
// continue ;
68483: GO 68450
// for j in list [ nat ] do
68485: LD_ADDR_VAR 0 5
68489: PUSH
68490: LD_VAR 0 10
68494: PUSH
68495: LD_VAR 0 7
68499: ARRAY
68500: PUSH
68501: FOR_IN
68502: IFFALSE 68543
// if GetBWeapon ( i ) = j [ 1 ] then
68504: LD_VAR 0 4
68508: PPUSH
68509: CALL_OW 269
68513: PUSH
68514: LD_VAR 0 5
68518: PUSH
68519: LD_INT 1
68521: ARRAY
68522: EQUAL
68523: IFFALSE 68541
// begin weapon := j [ 2 ] ;
68525: LD_ADDR_VAR 0 8
68529: PUSH
68530: LD_VAR 0 5
68534: PUSH
68535: LD_INT 2
68537: ARRAY
68538: ST_TO_ADDR
// break ;
68539: GO 68543
// end ;
68541: GO 68501
68543: POP
68544: POP
// if not weapon then
68545: LD_VAR 0 8
68549: NOT
68550: IFFALSE 68554
// continue ;
68552: GO 68450
// for k in factories do
68554: LD_ADDR_VAR 0 6
68558: PUSH
68559: LD_VAR 0 2
68563: PUSH
68564: FOR_IN
68565: IFFALSE 68630
// begin weapons := AvailableWeaponList ( k ) ;
68567: LD_ADDR_VAR 0 9
68571: PUSH
68572: LD_VAR 0 6
68576: PPUSH
68577: CALL_OW 478
68581: ST_TO_ADDR
// if not weapons then
68582: LD_VAR 0 9
68586: NOT
68587: IFFALSE 68591
// continue ;
68589: GO 68564
// if weapon in weapons then
68591: LD_VAR 0 8
68595: PUSH
68596: LD_VAR 0 9
68600: IN
68601: IFFALSE 68628
// begin result := [ i , weapon ] ;
68603: LD_ADDR_VAR 0 3
68607: PUSH
68608: LD_VAR 0 4
68612: PUSH
68613: LD_VAR 0 8
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: ST_TO_ADDR
// exit ;
68622: POP
68623: POP
68624: POP
68625: POP
68626: GO 68636
// end ; end ;
68628: GO 68564
68630: POP
68631: POP
// end ;
68632: GO 68450
68634: POP
68635: POP
// end ;
68636: LD_VAR 0 3
68640: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68641: LD_INT 0
68643: PPUSH
// if not side or side > 8 then
68644: LD_VAR 0 3
68648: NOT
68649: IFTRUE 68661
68651: PUSH
68652: LD_VAR 0 3
68656: PUSH
68657: LD_INT 8
68659: GREATER
68660: OR
68661: IFFALSE 68665
// exit ;
68663: GO 68724
// if not range then
68665: LD_VAR 0 4
68669: NOT
68670: IFFALSE 68681
// range := - 12 ;
68672: LD_ADDR_VAR 0 4
68676: PUSH
68677: LD_INT 12
68679: NEG
68680: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68681: LD_VAR 0 1
68685: PPUSH
68686: LD_VAR 0 2
68690: PPUSH
68691: LD_VAR 0 3
68695: PPUSH
68696: LD_VAR 0 4
68700: PPUSH
68701: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68705: LD_VAR 0 1
68709: PPUSH
68710: LD_VAR 0 2
68714: PPUSH
68715: LD_VAR 0 3
68719: PPUSH
68720: CALL_OW 331
// end ;
68724: LD_VAR 0 5
68728: RET
// export function Video ( mode ) ; begin
68729: LD_INT 0
68731: PPUSH
// ingame_video = mode ;
68732: LD_ADDR_OWVAR 52
68736: PUSH
68737: LD_VAR 0 1
68741: ST_TO_ADDR
// interface_hidden = mode ;
68742: LD_ADDR_OWVAR 54
68746: PUSH
68747: LD_VAR 0 1
68751: ST_TO_ADDR
// end ;
68752: LD_VAR 0 2
68756: RET
// export function Join ( array , element ) ; begin
68757: LD_INT 0
68759: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68760: LD_ADDR_VAR 0 3
68764: PUSH
68765: LD_VAR 0 1
68769: PPUSH
68770: LD_VAR 0 1
68774: PUSH
68775: LD_INT 1
68777: PLUS
68778: PPUSH
68779: LD_VAR 0 2
68783: PPUSH
68784: CALL_OW 1
68788: ST_TO_ADDR
// end ;
68789: LD_VAR 0 3
68793: RET
// export function JoinUnion ( array , element ) ; begin
68794: LD_INT 0
68796: PPUSH
// result := array union element ;
68797: LD_ADDR_VAR 0 3
68801: PUSH
68802: LD_VAR 0 1
68806: PUSH
68807: LD_VAR 0 2
68811: UNION
68812: ST_TO_ADDR
// end ;
68813: LD_VAR 0 3
68817: RET
// export function GetBehemoths ( side ) ; begin
68818: LD_INT 0
68820: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68821: LD_ADDR_VAR 0 2
68825: PUSH
68826: LD_INT 22
68828: PUSH
68829: LD_VAR 0 1
68833: PUSH
68834: EMPTY
68835: LIST
68836: LIST
68837: PUSH
68838: LD_INT 31
68840: PUSH
68841: LD_INT 25
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PPUSH
68852: CALL_OW 69
68856: ST_TO_ADDR
// end ;
68857: LD_VAR 0 2
68861: RET
// export function Shuffle ( array ) ; var i , index ; begin
68862: LD_INT 0
68864: PPUSH
68865: PPUSH
68866: PPUSH
// result := [ ] ;
68867: LD_ADDR_VAR 0 2
68871: PUSH
68872: EMPTY
68873: ST_TO_ADDR
// if not array then
68874: LD_VAR 0 1
68878: NOT
68879: IFFALSE 68883
// exit ;
68881: GO 68982
// Randomize ;
68883: CALL_OW 10
// for i = array downto 1 do
68887: LD_ADDR_VAR 0 3
68891: PUSH
68892: DOUBLE
68893: LD_VAR 0 1
68897: INC
68898: ST_TO_ADDR
68899: LD_INT 1
68901: PUSH
68902: FOR_DOWNTO
68903: IFFALSE 68980
// begin index := rand ( 1 , array ) ;
68905: LD_ADDR_VAR 0 4
68909: PUSH
68910: LD_INT 1
68912: PPUSH
68913: LD_VAR 0 1
68917: PPUSH
68918: CALL_OW 12
68922: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68923: LD_ADDR_VAR 0 2
68927: PUSH
68928: LD_VAR 0 2
68932: PPUSH
68933: LD_VAR 0 2
68937: PUSH
68938: LD_INT 1
68940: PLUS
68941: PPUSH
68942: LD_VAR 0 1
68946: PUSH
68947: LD_VAR 0 4
68951: ARRAY
68952: PPUSH
68953: CALL_OW 2
68957: ST_TO_ADDR
// array := Delete ( array , index ) ;
68958: LD_ADDR_VAR 0 1
68962: PUSH
68963: LD_VAR 0 1
68967: PPUSH
68968: LD_VAR 0 4
68972: PPUSH
68973: CALL_OW 3
68977: ST_TO_ADDR
// end ;
68978: GO 68902
68980: POP
68981: POP
// end ;
68982: LD_VAR 0 2
68986: RET
// export function GetBaseMaterials ( base ) ; begin
68987: LD_INT 0
68989: PPUSH
// result := [ 0 , 0 , 0 ] ;
68990: LD_ADDR_VAR 0 2
68994: PUSH
68995: LD_INT 0
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: LD_INT 0
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: ST_TO_ADDR
// if not base then
69009: LD_VAR 0 1
69013: NOT
69014: IFFALSE 69018
// exit ;
69016: GO 69067
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69018: LD_ADDR_VAR 0 2
69022: PUSH
69023: LD_VAR 0 1
69027: PPUSH
69028: LD_INT 1
69030: PPUSH
69031: CALL_OW 275
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: LD_INT 2
69043: PPUSH
69044: CALL_OW 275
69048: PUSH
69049: LD_VAR 0 1
69053: PPUSH
69054: LD_INT 3
69056: PPUSH
69057: CALL_OW 275
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: LIST
69066: ST_TO_ADDR
// end ;
69067: LD_VAR 0 2
69071: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69072: LD_INT 0
69074: PPUSH
69075: PPUSH
// result := array ;
69076: LD_ADDR_VAR 0 3
69080: PUSH
69081: LD_VAR 0 1
69085: ST_TO_ADDR
// if size >= result then
69086: LD_VAR 0 2
69090: PUSH
69091: LD_VAR 0 3
69095: GREATEREQUAL
69096: IFFALSE 69100
// exit ;
69098: GO 69150
// if size then
69100: LD_VAR 0 2
69104: IFFALSE 69150
// for i := array downto size do
69106: LD_ADDR_VAR 0 4
69110: PUSH
69111: DOUBLE
69112: LD_VAR 0 1
69116: INC
69117: ST_TO_ADDR
69118: LD_VAR 0 2
69122: PUSH
69123: FOR_DOWNTO
69124: IFFALSE 69148
// result := Delete ( result , result ) ;
69126: LD_ADDR_VAR 0 3
69130: PUSH
69131: LD_VAR 0 3
69135: PPUSH
69136: LD_VAR 0 3
69140: PPUSH
69141: CALL_OW 3
69145: ST_TO_ADDR
69146: GO 69123
69148: POP
69149: POP
// end ;
69150: LD_VAR 0 3
69154: RET
// export function ComExit ( unit ) ; var tmp ; begin
69155: LD_INT 0
69157: PPUSH
69158: PPUSH
// if not IsInUnit ( unit ) then
69159: LD_VAR 0 1
69163: PPUSH
69164: CALL_OW 310
69168: NOT
69169: IFFALSE 69173
// exit ;
69171: GO 69233
// tmp := IsInUnit ( unit ) ;
69173: LD_ADDR_VAR 0 3
69177: PUSH
69178: LD_VAR 0 1
69182: PPUSH
69183: CALL_OW 310
69187: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69188: LD_VAR 0 3
69192: PPUSH
69193: CALL_OW 247
69197: PUSH
69198: LD_INT 2
69200: EQUAL
69201: IFFALSE 69214
// ComExitVehicle ( unit ) else
69203: LD_VAR 0 1
69207: PPUSH
69208: CALL_OW 121
69212: GO 69223
// ComExitBuilding ( unit ) ;
69214: LD_VAR 0 1
69218: PPUSH
69219: CALL_OW 122
// result := tmp ;
69223: LD_ADDR_VAR 0 2
69227: PUSH
69228: LD_VAR 0 3
69232: ST_TO_ADDR
// end ;
69233: LD_VAR 0 2
69237: RET
// export function ComExitAll ( units ) ; var i ; begin
69238: LD_INT 0
69240: PPUSH
69241: PPUSH
// if not units then
69242: LD_VAR 0 1
69246: NOT
69247: IFFALSE 69251
// exit ;
69249: GO 69277
// for i in units do
69251: LD_ADDR_VAR 0 3
69255: PUSH
69256: LD_VAR 0 1
69260: PUSH
69261: FOR_IN
69262: IFFALSE 69275
// ComExit ( i ) ;
69264: LD_VAR 0 3
69268: PPUSH
69269: CALL 69155 0 1
69273: GO 69261
69275: POP
69276: POP
// end ;
69277: LD_VAR 0 2
69281: RET
// export function ResetHc ; begin
69282: LD_INT 0
69284: PPUSH
// InitHc ;
69285: CALL_OW 19
// hc_importance := 0 ;
69289: LD_ADDR_OWVAR 32
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
// end ;
69297: LD_VAR 0 1
69301: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69302: LD_INT 0
69304: PPUSH
69305: PPUSH
69306: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69307: LD_ADDR_VAR 0 6
69311: PUSH
69312: LD_VAR 0 1
69316: PUSH
69317: LD_VAR 0 3
69321: PLUS
69322: PUSH
69323: LD_INT 2
69325: DIV
69326: ST_TO_ADDR
// if _x < 0 then
69327: LD_VAR 0 6
69331: PUSH
69332: LD_INT 0
69334: LESS
69335: IFFALSE 69352
// _x := _x * - 1 ;
69337: LD_ADDR_VAR 0 6
69341: PUSH
69342: LD_VAR 0 6
69346: PUSH
69347: LD_INT 1
69349: NEG
69350: MUL
69351: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69352: LD_ADDR_VAR 0 7
69356: PUSH
69357: LD_VAR 0 2
69361: PUSH
69362: LD_VAR 0 4
69366: PLUS
69367: PUSH
69368: LD_INT 2
69370: DIV
69371: ST_TO_ADDR
// if _y < 0 then
69372: LD_VAR 0 7
69376: PUSH
69377: LD_INT 0
69379: LESS
69380: IFFALSE 69397
// _y := _y * - 1 ;
69382: LD_ADDR_VAR 0 7
69386: PUSH
69387: LD_VAR 0 7
69391: PUSH
69392: LD_INT 1
69394: NEG
69395: MUL
69396: ST_TO_ADDR
// result := [ _x , _y ] ;
69397: LD_ADDR_VAR 0 5
69401: PUSH
69402: LD_VAR 0 6
69406: PUSH
69407: LD_VAR 0 7
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: ST_TO_ADDR
// end ;
69416: LD_VAR 0 5
69420: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69421: LD_INT 0
69423: PPUSH
69424: PPUSH
69425: PPUSH
69426: PPUSH
// task := GetTaskList ( unit ) ;
69427: LD_ADDR_VAR 0 7
69431: PUSH
69432: LD_VAR 0 1
69436: PPUSH
69437: CALL_OW 437
69441: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69442: LD_VAR 0 7
69446: NOT
69447: IFFALSE 69466
69449: PUSH
69450: LD_VAR 0 1
69454: PPUSH
69455: LD_VAR 0 2
69459: PPUSH
69460: CALL_OW 308
69464: NOT
69465: AND
69466: IFFALSE 69470
// exit ;
69468: GO 69588
// if IsInArea ( unit , area ) then
69470: LD_VAR 0 1
69474: PPUSH
69475: LD_VAR 0 2
69479: PPUSH
69480: CALL_OW 308
69484: IFFALSE 69502
// begin ComMoveToArea ( unit , goAway ) ;
69486: LD_VAR 0 1
69490: PPUSH
69491: LD_VAR 0 3
69495: PPUSH
69496: CALL_OW 113
// exit ;
69500: GO 69588
// end ; if task [ 1 ] [ 1 ] <> M then
69502: LD_VAR 0 7
69506: PUSH
69507: LD_INT 1
69509: ARRAY
69510: PUSH
69511: LD_INT 1
69513: ARRAY
69514: PUSH
69515: LD_STRING M
69517: NONEQUAL
69518: IFFALSE 69522
// exit ;
69520: GO 69588
// x := task [ 1 ] [ 2 ] ;
69522: LD_ADDR_VAR 0 5
69526: PUSH
69527: LD_VAR 0 7
69531: PUSH
69532: LD_INT 1
69534: ARRAY
69535: PUSH
69536: LD_INT 2
69538: ARRAY
69539: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69540: LD_ADDR_VAR 0 6
69544: PUSH
69545: LD_VAR 0 7
69549: PUSH
69550: LD_INT 1
69552: ARRAY
69553: PUSH
69554: LD_INT 3
69556: ARRAY
69557: ST_TO_ADDR
// if InArea ( x , y , area ) then
69558: LD_VAR 0 5
69562: PPUSH
69563: LD_VAR 0 6
69567: PPUSH
69568: LD_VAR 0 2
69572: PPUSH
69573: CALL_OW 309
69577: IFFALSE 69588
// ComStop ( unit ) ;
69579: LD_VAR 0 1
69583: PPUSH
69584: CALL_OW 141
// end ;
69588: LD_VAR 0 4
69592: RET
// export function Abs ( value ) ; begin
69593: LD_INT 0
69595: PPUSH
// result := value ;
69596: LD_ADDR_VAR 0 2
69600: PUSH
69601: LD_VAR 0 1
69605: ST_TO_ADDR
// if value < 0 then
69606: LD_VAR 0 1
69610: PUSH
69611: LD_INT 0
69613: LESS
69614: IFFALSE 69631
// result := value * - 1 ;
69616: LD_ADDR_VAR 0 2
69620: PUSH
69621: LD_VAR 0 1
69625: PUSH
69626: LD_INT 1
69628: NEG
69629: MUL
69630: ST_TO_ADDR
// end ;
69631: LD_VAR 0 2
69635: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69636: LD_INT 0
69638: PPUSH
69639: PPUSH
69640: PPUSH
69641: PPUSH
69642: PPUSH
69643: PPUSH
69644: PPUSH
69645: PPUSH
// if not unit or not building then
69646: LD_VAR 0 1
69650: NOT
69651: IFTRUE 69660
69653: PUSH
69654: LD_VAR 0 2
69658: NOT
69659: OR
69660: IFFALSE 69664
// exit ;
69662: GO 69892
// x := GetX ( building ) ;
69664: LD_ADDR_VAR 0 4
69668: PUSH
69669: LD_VAR 0 2
69673: PPUSH
69674: CALL_OW 250
69678: ST_TO_ADDR
// y := GetY ( building ) ;
69679: LD_ADDR_VAR 0 6
69683: PUSH
69684: LD_VAR 0 2
69688: PPUSH
69689: CALL_OW 251
69693: ST_TO_ADDR
// d := GetDir ( building ) ;
69694: LD_ADDR_VAR 0 8
69698: PUSH
69699: LD_VAR 0 2
69703: PPUSH
69704: CALL_OW 254
69708: ST_TO_ADDR
// r := 4 ;
69709: LD_ADDR_VAR 0 9
69713: PUSH
69714: LD_INT 4
69716: ST_TO_ADDR
// for i := 1 to 5 do
69717: LD_ADDR_VAR 0 10
69721: PUSH
69722: DOUBLE
69723: LD_INT 1
69725: DEC
69726: ST_TO_ADDR
69727: LD_INT 5
69729: PUSH
69730: FOR_TO
69731: IFFALSE 69890
// begin _x := ShiftX ( x , d , r + i ) ;
69733: LD_ADDR_VAR 0 5
69737: PUSH
69738: LD_VAR 0 4
69742: PPUSH
69743: LD_VAR 0 8
69747: PPUSH
69748: LD_VAR 0 9
69752: PUSH
69753: LD_VAR 0 10
69757: PLUS
69758: PPUSH
69759: CALL_OW 272
69763: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69764: LD_ADDR_VAR 0 7
69768: PUSH
69769: LD_VAR 0 6
69773: PPUSH
69774: LD_VAR 0 8
69778: PPUSH
69779: LD_VAR 0 9
69783: PUSH
69784: LD_VAR 0 10
69788: PLUS
69789: PPUSH
69790: CALL_OW 273
69794: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69795: LD_VAR 0 5
69799: PPUSH
69800: LD_VAR 0 7
69804: PPUSH
69805: CALL_OW 488
69809: IFFALSE 69844
69811: PUSH
69812: LD_VAR 0 5
69816: PPUSH
69817: LD_VAR 0 7
69821: PPUSH
69822: CALL_OW 428
69826: PPUSH
69827: CALL_OW 247
69831: PUSH
69832: LD_INT 3
69834: PUSH
69835: LD_INT 2
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: IN
69842: NOT
69843: AND
69844: IFFALSE 69888
// begin ComMoveXY ( unit , _x , _y ) ;
69846: LD_VAR 0 1
69850: PPUSH
69851: LD_VAR 0 5
69855: PPUSH
69856: LD_VAR 0 7
69860: PPUSH
69861: CALL_OW 111
// result := [ _x , _y ] ;
69865: LD_ADDR_VAR 0 3
69869: PUSH
69870: LD_VAR 0 5
69874: PUSH
69875: LD_VAR 0 7
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: ST_TO_ADDR
// exit ;
69884: POP
69885: POP
69886: GO 69892
// end ; end ;
69888: GO 69730
69890: POP
69891: POP
// end ;
69892: LD_VAR 0 3
69896: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69897: LD_INT 0
69899: PPUSH
69900: PPUSH
69901: PPUSH
// result := 0 ;
69902: LD_ADDR_VAR 0 3
69906: PUSH
69907: LD_INT 0
69909: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69910: LD_VAR 0 1
69914: PUSH
69915: LD_INT 0
69917: LESS
69918: IFTRUE 69930
69920: PUSH
69921: LD_VAR 0 1
69925: PUSH
69926: LD_INT 8
69928: GREATER
69929: OR
69930: IFTRUE 69942
69932: PUSH
69933: LD_VAR 0 2
69937: PUSH
69938: LD_INT 0
69940: LESS
69941: OR
69942: IFTRUE 69954
69944: PUSH
69945: LD_VAR 0 2
69949: PUSH
69950: LD_INT 8
69952: GREATER
69953: OR
69954: IFFALSE 69958
// exit ;
69956: GO 70033
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69958: LD_ADDR_VAR 0 4
69962: PUSH
69963: LD_INT 22
69965: PUSH
69966: LD_VAR 0 2
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PPUSH
69975: CALL_OW 69
69979: PUSH
69980: FOR_IN
69981: IFFALSE 70031
// begin un := UnitShoot ( i ) ;
69983: LD_ADDR_VAR 0 5
69987: PUSH
69988: LD_VAR 0 4
69992: PPUSH
69993: CALL_OW 504
69997: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69998: LD_VAR 0 5
70002: PPUSH
70003: CALL_OW 255
70007: PUSH
70008: LD_VAR 0 1
70012: EQUAL
70013: IFFALSE 70029
// begin result := un ;
70015: LD_ADDR_VAR 0 3
70019: PUSH
70020: LD_VAR 0 5
70024: ST_TO_ADDR
// exit ;
70025: POP
70026: POP
70027: GO 70033
// end ; end ;
70029: GO 69980
70031: POP
70032: POP
// end ;
70033: LD_VAR 0 3
70037: RET
// export function GetCargoBay ( units ) ; begin
70038: LD_INT 0
70040: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70041: LD_ADDR_VAR 0 2
70045: PUSH
70046: LD_VAR 0 1
70050: PPUSH
70051: LD_INT 2
70053: PUSH
70054: LD_INT 34
70056: PUSH
70057: LD_INT 12
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 34
70066: PUSH
70067: LD_INT 51
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 34
70076: PUSH
70077: LD_INT 32
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 34
70086: PUSH
70087: LD_INT 89
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: PPUSH
70101: CALL_OW 72
70105: ST_TO_ADDR
// end ;
70106: LD_VAR 0 2
70110: RET
// export function Negate ( value ) ; begin
70111: LD_INT 0
70113: PPUSH
// result := not value ;
70114: LD_ADDR_VAR 0 2
70118: PUSH
70119: LD_VAR 0 1
70123: NOT
70124: ST_TO_ADDR
// end ;
70125: LD_VAR 0 2
70129: RET
// export function Inc ( value ) ; begin
70130: LD_INT 0
70132: PPUSH
// result := value + 1 ;
70133: LD_ADDR_VAR 0 2
70137: PUSH
70138: LD_VAR 0 1
70142: PUSH
70143: LD_INT 1
70145: PLUS
70146: ST_TO_ADDR
// end ;
70147: LD_VAR 0 2
70151: RET
// export function Dec ( value ) ; begin
70152: LD_INT 0
70154: PPUSH
// result := value - 1 ;
70155: LD_ADDR_VAR 0 2
70159: PUSH
70160: LD_VAR 0 1
70164: PUSH
70165: LD_INT 1
70167: MINUS
70168: ST_TO_ADDR
// end ;
70169: LD_VAR 0 2
70173: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70174: LD_INT 0
70176: PPUSH
70177: PPUSH
70178: PPUSH
70179: PPUSH
70180: PPUSH
70181: PPUSH
70182: PPUSH
70183: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70184: LD_VAR 0 1
70188: PPUSH
70189: LD_VAR 0 2
70193: PPUSH
70194: CALL_OW 488
70198: NOT
70199: IFTRUE 70218
70201: PUSH
70202: LD_VAR 0 3
70206: PPUSH
70207: LD_VAR 0 4
70211: PPUSH
70212: CALL_OW 488
70216: NOT
70217: OR
70218: IFFALSE 70231
// begin result := - 1 ;
70220: LD_ADDR_VAR 0 5
70224: PUSH
70225: LD_INT 1
70227: NEG
70228: ST_TO_ADDR
// exit ;
70229: GO 70466
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70231: LD_ADDR_VAR 0 12
70235: PUSH
70236: LD_VAR 0 1
70240: PPUSH
70241: LD_VAR 0 2
70245: PPUSH
70246: LD_VAR 0 3
70250: PPUSH
70251: LD_VAR 0 4
70255: PPUSH
70256: CALL 69302 0 4
70260: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70261: LD_ADDR_VAR 0 11
70265: PUSH
70266: LD_VAR 0 1
70270: PPUSH
70271: LD_VAR 0 2
70275: PPUSH
70276: LD_VAR 0 12
70280: PUSH
70281: LD_INT 1
70283: ARRAY
70284: PPUSH
70285: LD_VAR 0 12
70289: PUSH
70290: LD_INT 2
70292: ARRAY
70293: PPUSH
70294: CALL_OW 298
70298: ST_TO_ADDR
// distance := 9999 ;
70299: LD_ADDR_VAR 0 10
70303: PUSH
70304: LD_INT 9999
70306: ST_TO_ADDR
// for i := 0 to 5 do
70307: LD_ADDR_VAR 0 6
70311: PUSH
70312: DOUBLE
70313: LD_INT 0
70315: DEC
70316: ST_TO_ADDR
70317: LD_INT 5
70319: PUSH
70320: FOR_TO
70321: IFFALSE 70464
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70323: LD_ADDR_VAR 0 7
70327: PUSH
70328: LD_VAR 0 1
70332: PPUSH
70333: LD_VAR 0 6
70337: PPUSH
70338: LD_VAR 0 11
70342: PPUSH
70343: CALL_OW 272
70347: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70348: LD_ADDR_VAR 0 8
70352: PUSH
70353: LD_VAR 0 2
70357: PPUSH
70358: LD_VAR 0 6
70362: PPUSH
70363: LD_VAR 0 11
70367: PPUSH
70368: CALL_OW 273
70372: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70373: LD_VAR 0 7
70377: PPUSH
70378: LD_VAR 0 8
70382: PPUSH
70383: CALL_OW 488
70387: NOT
70388: IFFALSE 70392
// continue ;
70390: GO 70320
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70392: LD_ADDR_VAR 0 9
70396: PUSH
70397: LD_VAR 0 12
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PPUSH
70406: LD_VAR 0 12
70410: PUSH
70411: LD_INT 2
70413: ARRAY
70414: PPUSH
70415: LD_VAR 0 7
70419: PPUSH
70420: LD_VAR 0 8
70424: PPUSH
70425: CALL_OW 298
70429: ST_TO_ADDR
// if tmp < distance then
70430: LD_VAR 0 9
70434: PUSH
70435: LD_VAR 0 10
70439: LESS
70440: IFFALSE 70462
// begin result := i ;
70442: LD_ADDR_VAR 0 5
70446: PUSH
70447: LD_VAR 0 6
70451: ST_TO_ADDR
// distance := tmp ;
70452: LD_ADDR_VAR 0 10
70456: PUSH
70457: LD_VAR 0 9
70461: ST_TO_ADDR
// end ; end ;
70462: GO 70320
70464: POP
70465: POP
// end ;
70466: LD_VAR 0 5
70470: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70471: LD_INT 0
70473: PPUSH
70474: PPUSH
// if not driver or not IsInUnit ( driver ) then
70475: LD_VAR 0 1
70479: NOT
70480: IFTRUE 70494
70482: PUSH
70483: LD_VAR 0 1
70487: PPUSH
70488: CALL_OW 310
70492: NOT
70493: OR
70494: IFFALSE 70498
// exit ;
70496: GO 70588
// vehicle := IsInUnit ( driver ) ;
70498: LD_ADDR_VAR 0 3
70502: PUSH
70503: LD_VAR 0 1
70507: PPUSH
70508: CALL_OW 310
70512: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70513: LD_VAR 0 1
70517: PPUSH
70518: LD_STRING \
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 0
70529: PUSH
70530: LD_INT 0
70532: PUSH
70533: LD_INT 0
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: PUSH
70548: LD_STRING E
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_VAR 0 3
70561: PUSH
70562: LD_INT 0
70564: PUSH
70565: LD_INT 0
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PPUSH
70584: CALL_OW 446
// end ;
70588: LD_VAR 0 2
70592: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70593: LD_INT 0
70595: PPUSH
70596: PPUSH
// if not driver or not IsInUnit ( driver ) then
70597: LD_VAR 0 1
70601: NOT
70602: IFTRUE 70616
70604: PUSH
70605: LD_VAR 0 1
70609: PPUSH
70610: CALL_OW 310
70614: NOT
70615: OR
70616: IFFALSE 70620
// exit ;
70618: GO 70710
// vehicle := IsInUnit ( driver ) ;
70620: LD_ADDR_VAR 0 3
70624: PUSH
70625: LD_VAR 0 1
70629: PPUSH
70630: CALL_OW 310
70634: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70635: LD_VAR 0 1
70639: PPUSH
70640: LD_STRING \
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: LD_INT 0
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: PUSH
70670: LD_STRING E
70672: PUSH
70673: LD_INT 0
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_VAR 0 3
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: LD_INT 0
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PPUSH
70706: CALL_OW 447
// end ;
70710: LD_VAR 0 2
70714: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70715: LD_INT 0
70717: PPUSH
70718: PPUSH
70719: PPUSH
// tmp := [ ] ;
70720: LD_ADDR_VAR 0 5
70724: PUSH
70725: EMPTY
70726: ST_TO_ADDR
// for i in units do
70727: LD_ADDR_VAR 0 4
70731: PUSH
70732: LD_VAR 0 1
70736: PUSH
70737: FOR_IN
70738: IFFALSE 70776
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70740: LD_ADDR_VAR 0 5
70744: PUSH
70745: LD_VAR 0 5
70749: PPUSH
70750: LD_VAR 0 5
70754: PUSH
70755: LD_INT 1
70757: PLUS
70758: PPUSH
70759: LD_VAR 0 4
70763: PPUSH
70764: CALL_OW 256
70768: PPUSH
70769: CALL_OW 2
70773: ST_TO_ADDR
70774: GO 70737
70776: POP
70777: POP
// if not tmp then
70778: LD_VAR 0 5
70782: NOT
70783: IFFALSE 70787
// exit ;
70785: GO 70835
// if asc then
70787: LD_VAR 0 2
70791: IFFALSE 70815
// result := SortListByListAsc ( units , tmp ) else
70793: LD_ADDR_VAR 0 3
70797: PUSH
70798: LD_VAR 0 1
70802: PPUSH
70803: LD_VAR 0 5
70807: PPUSH
70808: CALL_OW 76
70812: ST_TO_ADDR
70813: GO 70835
// result := SortListByListDesc ( units , tmp ) ;
70815: LD_ADDR_VAR 0 3
70819: PUSH
70820: LD_VAR 0 1
70824: PPUSH
70825: LD_VAR 0 5
70829: PPUSH
70830: CALL_OW 77
70834: ST_TO_ADDR
// end ;
70835: LD_VAR 0 3
70839: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70840: LD_INT 0
70842: PPUSH
70843: PPUSH
// task := GetTaskList ( mech ) ;
70844: LD_ADDR_VAR 0 4
70848: PUSH
70849: LD_VAR 0 1
70853: PPUSH
70854: CALL_OW 437
70858: ST_TO_ADDR
// if not task then
70859: LD_VAR 0 4
70863: NOT
70864: IFFALSE 70868
// exit ;
70866: GO 70912
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70868: LD_ADDR_VAR 0 3
70872: PUSH
70873: LD_VAR 0 4
70877: PUSH
70878: LD_INT 1
70880: ARRAY
70881: PUSH
70882: LD_INT 1
70884: ARRAY
70885: PUSH
70886: LD_STRING r
70888: EQUAL
70889: IFFALSE 70911
70891: PUSH
70892: LD_VAR 0 4
70896: PUSH
70897: LD_INT 1
70899: ARRAY
70900: PUSH
70901: LD_INT 4
70903: ARRAY
70904: PUSH
70905: LD_VAR 0 2
70909: EQUAL
70910: AND
70911: ST_TO_ADDR
// end ;
70912: LD_VAR 0 3
70916: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70917: LD_INT 0
70919: PPUSH
// SetDir ( unit , d ) ;
70920: LD_VAR 0 1
70924: PPUSH
70925: LD_VAR 0 4
70929: PPUSH
70930: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70934: LD_ADDR_VAR 0 6
70938: PUSH
70939: LD_VAR 0 1
70943: PPUSH
70944: LD_VAR 0 2
70948: PPUSH
70949: LD_VAR 0 3
70953: PPUSH
70954: LD_VAR 0 5
70958: PPUSH
70959: CALL_OW 48
70963: ST_TO_ADDR
// end ;
70964: LD_VAR 0 6
70968: RET
// export function ToNaturalNumber ( number ) ; begin
70969: LD_INT 0
70971: PPUSH
// result := number div 1 ;
70972: LD_ADDR_VAR 0 2
70976: PUSH
70977: LD_VAR 0 1
70981: PUSH
70982: LD_INT 1
70984: DIV
70985: ST_TO_ADDR
// if number < 0 then
70986: LD_VAR 0 1
70990: PUSH
70991: LD_INT 0
70993: LESS
70994: IFFALSE 71004
// result := 0 ;
70996: LD_ADDR_VAR 0 2
71000: PUSH
71001: LD_INT 0
71003: ST_TO_ADDR
// end ;
71004: LD_VAR 0 2
71008: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
71009: LD_INT 0
71011: PPUSH
71012: PPUSH
71013: PPUSH
// if not buildings then
71014: LD_VAR 0 1
71018: NOT
71019: IFFALSE 71023
// exit ;
71021: GO 71138
// tmp := [ ] ;
71023: LD_ADDR_VAR 0 5
71027: PUSH
71028: EMPTY
71029: ST_TO_ADDR
// for b in buildings do
71030: LD_ADDR_VAR 0 4
71034: PUSH
71035: LD_VAR 0 1
71039: PUSH
71040: FOR_IN
71041: IFFALSE 71079
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
71043: LD_ADDR_VAR 0 5
71047: PUSH
71048: LD_VAR 0 5
71052: PPUSH
71053: LD_VAR 0 5
71057: PUSH
71058: LD_INT 1
71060: PLUS
71061: PPUSH
71062: LD_VAR 0 4
71066: PPUSH
71067: CALL_OW 266
71071: PPUSH
71072: CALL_OW 1
71076: ST_TO_ADDR
71077: GO 71040
71079: POP
71080: POP
// if not tmp then
71081: LD_VAR 0 5
71085: NOT
71086: IFFALSE 71090
// exit ;
71088: GO 71138
// if asc then
71090: LD_VAR 0 2
71094: IFFALSE 71118
// result := SortListByListAsc ( buildings , tmp ) else
71096: LD_ADDR_VAR 0 3
71100: PUSH
71101: LD_VAR 0 1
71105: PPUSH
71106: LD_VAR 0 5
71110: PPUSH
71111: CALL_OW 76
71115: ST_TO_ADDR
71116: GO 71138
// result := SortListByListDesc ( buildings , tmp ) ;
71118: LD_ADDR_VAR 0 3
71122: PUSH
71123: LD_VAR 0 1
71127: PPUSH
71128: LD_VAR 0 5
71132: PPUSH
71133: CALL_OW 77
71137: ST_TO_ADDR
// end ;
71138: LD_VAR 0 3
71142: RET
// export function SortByClass ( units , class ) ; var un ; begin
71143: LD_INT 0
71145: PPUSH
71146: PPUSH
// if not units or not class then
71147: LD_VAR 0 1
71151: NOT
71152: IFTRUE 71161
71154: PUSH
71155: LD_VAR 0 2
71159: NOT
71160: OR
71161: IFFALSE 71165
// exit ;
71163: GO 71260
// result := [ ] ;
71165: LD_ADDR_VAR 0 3
71169: PUSH
71170: EMPTY
71171: ST_TO_ADDR
// for un in units do
71172: LD_ADDR_VAR 0 4
71176: PUSH
71177: LD_VAR 0 1
71181: PUSH
71182: FOR_IN
71183: IFFALSE 71258
// if GetClass ( un ) = class then
71185: LD_VAR 0 4
71189: PPUSH
71190: CALL_OW 257
71194: PUSH
71195: LD_VAR 0 2
71199: EQUAL
71200: IFFALSE 71227
// result := Insert ( result , 1 , un ) else
71202: LD_ADDR_VAR 0 3
71206: PUSH
71207: LD_VAR 0 3
71211: PPUSH
71212: LD_INT 1
71214: PPUSH
71215: LD_VAR 0 4
71219: PPUSH
71220: CALL_OW 2
71224: ST_TO_ADDR
71225: GO 71256
// result := Replace ( result , result + 1 , un ) ;
71227: LD_ADDR_VAR 0 3
71231: PUSH
71232: LD_VAR 0 3
71236: PPUSH
71237: LD_VAR 0 3
71241: PUSH
71242: LD_INT 1
71244: PLUS
71245: PPUSH
71246: LD_VAR 0 4
71250: PPUSH
71251: CALL_OW 1
71255: ST_TO_ADDR
71256: GO 71182
71258: POP
71259: POP
// end ;
71260: LD_VAR 0 3
71264: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71265: LD_INT 0
71267: PPUSH
71268: PPUSH
71269: PPUSH
71270: PPUSH
71271: PPUSH
71272: PPUSH
71273: PPUSH
// result := [ ] ;
71274: LD_ADDR_VAR 0 4
71278: PUSH
71279: EMPTY
71280: ST_TO_ADDR
// if x - r < 0 then
71281: LD_VAR 0 1
71285: PUSH
71286: LD_VAR 0 3
71290: MINUS
71291: PUSH
71292: LD_INT 0
71294: LESS
71295: IFFALSE 71307
// min_x := 0 else
71297: LD_ADDR_VAR 0 8
71301: PUSH
71302: LD_INT 0
71304: ST_TO_ADDR
71305: GO 71323
// min_x := x - r ;
71307: LD_ADDR_VAR 0 8
71311: PUSH
71312: LD_VAR 0 1
71316: PUSH
71317: LD_VAR 0 3
71321: MINUS
71322: ST_TO_ADDR
// if y - r < 0 then
71323: LD_VAR 0 2
71327: PUSH
71328: LD_VAR 0 3
71332: MINUS
71333: PUSH
71334: LD_INT 0
71336: LESS
71337: IFFALSE 71349
// min_y := 0 else
71339: LD_ADDR_VAR 0 7
71343: PUSH
71344: LD_INT 0
71346: ST_TO_ADDR
71347: GO 71365
// min_y := y - r ;
71349: LD_ADDR_VAR 0 7
71353: PUSH
71354: LD_VAR 0 2
71358: PUSH
71359: LD_VAR 0 3
71363: MINUS
71364: ST_TO_ADDR
// max_x := x + r ;
71365: LD_ADDR_VAR 0 9
71369: PUSH
71370: LD_VAR 0 1
71374: PUSH
71375: LD_VAR 0 3
71379: PLUS
71380: ST_TO_ADDR
// max_y := y + r ;
71381: LD_ADDR_VAR 0 10
71385: PUSH
71386: LD_VAR 0 2
71390: PUSH
71391: LD_VAR 0 3
71395: PLUS
71396: ST_TO_ADDR
// for _x = min_x to max_x do
71397: LD_ADDR_VAR 0 5
71401: PUSH
71402: DOUBLE
71403: LD_VAR 0 8
71407: DEC
71408: ST_TO_ADDR
71409: LD_VAR 0 9
71413: PUSH
71414: FOR_TO
71415: IFFALSE 71516
// for _y = min_y to max_y do
71417: LD_ADDR_VAR 0 6
71421: PUSH
71422: DOUBLE
71423: LD_VAR 0 7
71427: DEC
71428: ST_TO_ADDR
71429: LD_VAR 0 10
71433: PUSH
71434: FOR_TO
71435: IFFALSE 71512
// begin if not ValidHex ( _x , _y ) then
71437: LD_VAR 0 5
71441: PPUSH
71442: LD_VAR 0 6
71446: PPUSH
71447: CALL_OW 488
71451: NOT
71452: IFFALSE 71456
// continue ;
71454: GO 71434
// if GetResourceTypeXY ( _x , _y ) then
71456: LD_VAR 0 5
71460: PPUSH
71461: LD_VAR 0 6
71465: PPUSH
71466: CALL_OW 283
71470: IFFALSE 71510
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71472: LD_ADDR_VAR 0 4
71476: PUSH
71477: LD_VAR 0 4
71481: PPUSH
71482: LD_VAR 0 4
71486: PUSH
71487: LD_INT 1
71489: PLUS
71490: PPUSH
71491: LD_VAR 0 5
71495: PUSH
71496: LD_VAR 0 6
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PPUSH
71505: CALL_OW 1
71509: ST_TO_ADDR
// end ;
71510: GO 71434
71512: POP
71513: POP
71514: GO 71414
71516: POP
71517: POP
// end ;
71518: LD_VAR 0 4
71522: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71523: LD_INT 0
71525: PPUSH
71526: PPUSH
71527: PPUSH
71528: PPUSH
71529: PPUSH
71530: PPUSH
71531: PPUSH
71532: PPUSH
// if not units then
71533: LD_VAR 0 1
71537: NOT
71538: IFFALSE 71542
// exit ;
71540: GO 72074
// result := UnitFilter ( units , [ f_ok ] ) ;
71542: LD_ADDR_VAR 0 3
71546: PUSH
71547: LD_VAR 0 1
71551: PPUSH
71552: LD_INT 50
71554: PUSH
71555: EMPTY
71556: LIST
71557: PPUSH
71558: CALL_OW 72
71562: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71563: LD_ADDR_VAR 0 8
71567: PUSH
71568: LD_VAR 0 1
71572: PUSH
71573: LD_INT 1
71575: ARRAY
71576: PPUSH
71577: CALL_OW 255
71581: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71582: LD_ADDR_VAR 0 10
71586: PUSH
71587: LD_INT 29
71589: PUSH
71590: LD_INT 91
71592: PUSH
71593: LD_INT 49
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: ST_TO_ADDR
// if not result then
71601: LD_VAR 0 3
71605: NOT
71606: IFFALSE 71610
// exit ;
71608: GO 72074
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71610: LD_ADDR_VAR 0 5
71614: PUSH
71615: LD_INT 81
71617: PUSH
71618: LD_VAR 0 8
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PPUSH
71627: CALL_OW 69
71631: ST_TO_ADDR
// for i in result do
71632: LD_ADDR_VAR 0 4
71636: PUSH
71637: LD_VAR 0 3
71641: PUSH
71642: FOR_IN
71643: IFFALSE 72072
// begin tag := GetTag ( i ) + 1 ;
71645: LD_ADDR_VAR 0 9
71649: PUSH
71650: LD_VAR 0 4
71654: PPUSH
71655: CALL_OW 110
71659: PUSH
71660: LD_INT 1
71662: PLUS
71663: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71664: LD_ADDR_VAR 0 7
71668: PUSH
71669: LD_VAR 0 4
71673: PPUSH
71674: CALL_OW 250
71678: PPUSH
71679: LD_VAR 0 4
71683: PPUSH
71684: CALL_OW 251
71688: PPUSH
71689: LD_INT 4
71691: PPUSH
71692: CALL 71265 0 3
71696: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71697: LD_VAR 0 4
71701: PPUSH
71702: CALL_OW 247
71706: PUSH
71707: LD_INT 2
71709: EQUAL
71710: IFFALSE 71722
71712: PUSH
71713: LD_VAR 0 7
71717: PUSH
71718: LD_INT 2
71720: GREATER
71721: AND
71722: IFFALSE 71742
71724: PUSH
71725: LD_VAR 0 4
71729: PPUSH
71730: CALL_OW 264
71734: PUSH
71735: LD_VAR 0 10
71739: IN
71740: NOT
71741: AND
71742: IFFALSE 71781
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71744: LD_VAR 0 4
71748: PPUSH
71749: LD_VAR 0 7
71753: PUSH
71754: LD_INT 1
71756: ARRAY
71757: PUSH
71758: LD_INT 1
71760: ARRAY
71761: PPUSH
71762: LD_VAR 0 7
71766: PUSH
71767: LD_INT 1
71769: ARRAY
71770: PUSH
71771: LD_INT 2
71773: ARRAY
71774: PPUSH
71775: CALL_OW 116
71779: GO 72070
// if path > tag then
71781: LD_VAR 0 2
71785: PUSH
71786: LD_VAR 0 9
71790: GREATER
71791: IFFALSE 71999
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71793: LD_ADDR_VAR 0 6
71797: PUSH
71798: LD_VAR 0 5
71802: PPUSH
71803: LD_INT 91
71805: PUSH
71806: LD_VAR 0 4
71810: PUSH
71811: LD_INT 8
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: LIST
71818: PPUSH
71819: CALL_OW 72
71823: ST_TO_ADDR
// if nearEnemy then
71824: LD_VAR 0 6
71828: IFFALSE 71897
// begin if GetWeapon ( i ) = ru_time_lapser then
71830: LD_VAR 0 4
71834: PPUSH
71835: CALL_OW 264
71839: PUSH
71840: LD_INT 49
71842: EQUAL
71843: IFFALSE 71871
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71845: LD_VAR 0 4
71849: PPUSH
71850: LD_VAR 0 6
71854: PPUSH
71855: LD_VAR 0 4
71859: PPUSH
71860: CALL_OW 74
71864: PPUSH
71865: CALL_OW 112
71869: GO 71895
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71871: LD_VAR 0 4
71875: PPUSH
71876: LD_VAR 0 6
71880: PPUSH
71881: LD_VAR 0 4
71885: PPUSH
71886: CALL_OW 74
71890: PPUSH
71891: CALL 73155 0 2
// end else
71895: GO 71997
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71897: LD_VAR 0 4
71901: PPUSH
71902: LD_VAR 0 2
71906: PUSH
71907: LD_VAR 0 9
71911: ARRAY
71912: PUSH
71913: LD_INT 1
71915: ARRAY
71916: PPUSH
71917: LD_VAR 0 2
71921: PUSH
71922: LD_VAR 0 9
71926: ARRAY
71927: PUSH
71928: LD_INT 2
71930: ARRAY
71931: PPUSH
71932: CALL_OW 297
71936: PUSH
71937: LD_INT 6
71939: GREATER
71940: IFFALSE 71983
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71942: LD_VAR 0 4
71946: PPUSH
71947: LD_VAR 0 2
71951: PUSH
71952: LD_VAR 0 9
71956: ARRAY
71957: PUSH
71958: LD_INT 1
71960: ARRAY
71961: PPUSH
71962: LD_VAR 0 2
71966: PUSH
71967: LD_VAR 0 9
71971: ARRAY
71972: PUSH
71973: LD_INT 2
71975: ARRAY
71976: PPUSH
71977: CALL_OW 114
71981: GO 71997
// SetTag ( i , tag ) ;
71983: LD_VAR 0 4
71987: PPUSH
71988: LD_VAR 0 9
71992: PPUSH
71993: CALL_OW 109
// end else
71997: GO 72070
// if enemy then
71999: LD_VAR 0 5
72003: IFFALSE 72070
// begin if GetWeapon ( i ) = ru_time_lapser then
72005: LD_VAR 0 4
72009: PPUSH
72010: CALL_OW 264
72014: PUSH
72015: LD_INT 49
72017: EQUAL
72018: IFFALSE 72046
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72020: LD_VAR 0 4
72024: PPUSH
72025: LD_VAR 0 5
72029: PPUSH
72030: LD_VAR 0 4
72034: PPUSH
72035: CALL_OW 74
72039: PPUSH
72040: CALL_OW 112
72044: GO 72070
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72046: LD_VAR 0 4
72050: PPUSH
72051: LD_VAR 0 5
72055: PPUSH
72056: LD_VAR 0 4
72060: PPUSH
72061: CALL_OW 74
72065: PPUSH
72066: CALL 73155 0 2
// end ; end ;
72070: GO 71642
72072: POP
72073: POP
// end ;
72074: LD_VAR 0 3
72078: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72079: LD_INT 0
72081: PPUSH
72082: PPUSH
72083: PPUSH
// if not unit or IsInUnit ( unit ) then
72084: LD_VAR 0 1
72088: NOT
72089: IFTRUE 72102
72091: PUSH
72092: LD_VAR 0 1
72096: PPUSH
72097: CALL_OW 310
72101: OR
72102: IFFALSE 72106
// exit ;
72104: GO 72197
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72106: LD_ADDR_VAR 0 4
72110: PUSH
72111: LD_VAR 0 1
72115: PPUSH
72116: CALL_OW 250
72120: PPUSH
72121: LD_VAR 0 2
72125: PPUSH
72126: LD_INT 1
72128: PPUSH
72129: CALL_OW 272
72133: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72134: LD_ADDR_VAR 0 5
72138: PUSH
72139: LD_VAR 0 1
72143: PPUSH
72144: CALL_OW 251
72148: PPUSH
72149: LD_VAR 0 2
72153: PPUSH
72154: LD_INT 1
72156: PPUSH
72157: CALL_OW 273
72161: ST_TO_ADDR
// if ValidHex ( x , y ) then
72162: LD_VAR 0 4
72166: PPUSH
72167: LD_VAR 0 5
72171: PPUSH
72172: CALL_OW 488
72176: IFFALSE 72197
// ComTurnXY ( unit , x , y ) ;
72178: LD_VAR 0 1
72182: PPUSH
72183: LD_VAR 0 4
72187: PPUSH
72188: LD_VAR 0 5
72192: PPUSH
72193: CALL_OW 118
// end ;
72197: LD_VAR 0 3
72201: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72202: LD_INT 0
72204: PPUSH
72205: PPUSH
// result := false ;
72206: LD_ADDR_VAR 0 3
72210: PUSH
72211: LD_INT 0
72213: ST_TO_ADDR
// if not units then
72214: LD_VAR 0 2
72218: NOT
72219: IFFALSE 72223
// exit ;
72221: GO 72268
// for i in units do
72223: LD_ADDR_VAR 0 4
72227: PUSH
72228: LD_VAR 0 2
72232: PUSH
72233: FOR_IN
72234: IFFALSE 72266
// if See ( side , i ) then
72236: LD_VAR 0 1
72240: PPUSH
72241: LD_VAR 0 4
72245: PPUSH
72246: CALL_OW 292
72250: IFFALSE 72264
// begin result := true ;
72252: LD_ADDR_VAR 0 3
72256: PUSH
72257: LD_INT 1
72259: ST_TO_ADDR
// exit ;
72260: POP
72261: POP
72262: GO 72268
// end ;
72264: GO 72233
72266: POP
72267: POP
// end ;
72268: LD_VAR 0 3
72272: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72273: LD_INT 0
72275: PPUSH
72276: PPUSH
72277: PPUSH
72278: PPUSH
// if not unit or not points then
72279: LD_VAR 0 1
72283: NOT
72284: IFTRUE 72293
72286: PUSH
72287: LD_VAR 0 2
72291: NOT
72292: OR
72293: IFFALSE 72297
// exit ;
72295: GO 72387
// dist := 99999 ;
72297: LD_ADDR_VAR 0 5
72301: PUSH
72302: LD_INT 99999
72304: ST_TO_ADDR
// for i in points do
72305: LD_ADDR_VAR 0 4
72309: PUSH
72310: LD_VAR 0 2
72314: PUSH
72315: FOR_IN
72316: IFFALSE 72385
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72318: LD_ADDR_VAR 0 6
72322: PUSH
72323: LD_VAR 0 1
72327: PPUSH
72328: LD_VAR 0 4
72332: PUSH
72333: LD_INT 1
72335: ARRAY
72336: PPUSH
72337: LD_VAR 0 4
72341: PUSH
72342: LD_INT 2
72344: ARRAY
72345: PPUSH
72346: CALL_OW 297
72350: ST_TO_ADDR
// if tmpDist < dist then
72351: LD_VAR 0 6
72355: PUSH
72356: LD_VAR 0 5
72360: LESS
72361: IFFALSE 72383
// begin result := i ;
72363: LD_ADDR_VAR 0 3
72367: PUSH
72368: LD_VAR 0 4
72372: ST_TO_ADDR
// dist := tmpDist ;
72373: LD_ADDR_VAR 0 5
72377: PUSH
72378: LD_VAR 0 6
72382: ST_TO_ADDR
// end ; end ;
72383: GO 72315
72385: POP
72386: POP
// end ;
72387: LD_VAR 0 3
72391: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72392: LD_INT 0
72394: PPUSH
// uc_side := side ;
72395: LD_ADDR_OWVAR 20
72399: PUSH
72400: LD_VAR 0 1
72404: ST_TO_ADDR
// uc_nation := 3 ;
72405: LD_ADDR_OWVAR 21
72409: PUSH
72410: LD_INT 3
72412: ST_TO_ADDR
// vc_chassis := 25 ;
72413: LD_ADDR_OWVAR 37
72417: PUSH
72418: LD_INT 25
72420: ST_TO_ADDR
// vc_engine := engine_siberite ;
72421: LD_ADDR_OWVAR 39
72425: PUSH
72426: LD_INT 3
72428: ST_TO_ADDR
// vc_control := control_computer ;
72429: LD_ADDR_OWVAR 38
72433: PUSH
72434: LD_INT 3
72436: ST_TO_ADDR
// vc_weapon := 59 ;
72437: LD_ADDR_OWVAR 40
72441: PUSH
72442: LD_INT 59
72444: ST_TO_ADDR
// result := CreateVehicle ;
72445: LD_ADDR_VAR 0 5
72449: PUSH
72450: CALL_OW 45
72454: ST_TO_ADDR
// SetDir ( result , d ) ;
72455: LD_VAR 0 5
72459: PPUSH
72460: LD_VAR 0 4
72464: PPUSH
72465: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72469: LD_VAR 0 5
72473: PPUSH
72474: LD_VAR 0 2
72478: PPUSH
72479: LD_VAR 0 3
72483: PPUSH
72484: LD_INT 0
72486: PPUSH
72487: CALL_OW 48
// end ;
72491: LD_VAR 0 5
72495: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72496: LD_INT 0
72498: PPUSH
72499: PPUSH
72500: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72501: LD_ADDR_VAR 0 2
72505: PUSH
72506: LD_INT 0
72508: PUSH
72509: LD_INT 0
72511: PUSH
72512: LD_INT 0
72514: PUSH
72515: LD_INT 0
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72524: LD_VAR 0 1
72528: NOT
72529: IFTRUE 72562
72531: PUSH
72532: LD_VAR 0 1
72536: PPUSH
72537: CALL_OW 264
72541: PUSH
72542: LD_INT 12
72544: PUSH
72545: LD_INT 51
72547: PUSH
72548: LD_INT 32
72550: PUSH
72551: LD_INT 89
72553: PUSH
72554: EMPTY
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: IN
72560: NOT
72561: OR
72562: IFFALSE 72566
// exit ;
72564: GO 72664
// for i := 1 to 3 do
72566: LD_ADDR_VAR 0 3
72570: PUSH
72571: DOUBLE
72572: LD_INT 1
72574: DEC
72575: ST_TO_ADDR
72576: LD_INT 3
72578: PUSH
72579: FOR_TO
72580: IFFALSE 72662
// begin tmp := GetCargo ( cargo , i ) ;
72582: LD_ADDR_VAR 0 4
72586: PUSH
72587: LD_VAR 0 1
72591: PPUSH
72592: LD_VAR 0 3
72596: PPUSH
72597: CALL_OW 289
72601: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72602: LD_ADDR_VAR 0 2
72606: PUSH
72607: LD_VAR 0 2
72611: PPUSH
72612: LD_VAR 0 3
72616: PPUSH
72617: LD_VAR 0 4
72621: PPUSH
72622: CALL_OW 1
72626: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72627: LD_ADDR_VAR 0 2
72631: PUSH
72632: LD_VAR 0 2
72636: PPUSH
72637: LD_INT 4
72639: PPUSH
72640: LD_VAR 0 2
72644: PUSH
72645: LD_INT 4
72647: ARRAY
72648: PUSH
72649: LD_VAR 0 4
72653: PLUS
72654: PPUSH
72655: CALL_OW 1
72659: ST_TO_ADDR
// end ;
72660: GO 72579
72662: POP
72663: POP
// end ;
72664: LD_VAR 0 2
72668: RET
// export function Length ( array ) ; begin
72669: LD_INT 0
72671: PPUSH
// result := array + 0 ;
72672: LD_ADDR_VAR 0 2
72676: PUSH
72677: LD_VAR 0 1
72681: PUSH
72682: LD_INT 0
72684: PLUS
72685: ST_TO_ADDR
// end ;
72686: LD_VAR 0 2
72690: RET
// export function PrepareArray ( array ) ; begin
72691: LD_INT 0
72693: PPUSH
// result := array diff 0 ;
72694: LD_ADDR_VAR 0 2
72698: PUSH
72699: LD_VAR 0 1
72703: PUSH
72704: LD_INT 0
72706: DIFF
72707: ST_TO_ADDR
// if not result [ 1 ] then
72708: LD_VAR 0 2
72712: PUSH
72713: LD_INT 1
72715: ARRAY
72716: NOT
72717: IFFALSE 72737
// result := Delete ( result , 1 ) ;
72719: LD_ADDR_VAR 0 2
72723: PUSH
72724: LD_VAR 0 2
72728: PPUSH
72729: LD_INT 1
72731: PPUSH
72732: CALL_OW 3
72736: ST_TO_ADDR
// end ;
72737: LD_VAR 0 2
72741: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72742: LD_INT 0
72744: PPUSH
72745: PPUSH
72746: PPUSH
72747: PPUSH
// sibRocketRange := 25 ;
72748: LD_ADDR_VAR 0 6
72752: PUSH
72753: LD_INT 25
72755: ST_TO_ADDR
// result := false ;
72756: LD_ADDR_VAR 0 4
72760: PUSH
72761: LD_INT 0
72763: ST_TO_ADDR
// for i := 0 to 5 do
72764: LD_ADDR_VAR 0 5
72768: PUSH
72769: DOUBLE
72770: LD_INT 0
72772: DEC
72773: ST_TO_ADDR
72774: LD_INT 5
72776: PUSH
72777: FOR_TO
72778: IFFALSE 72845
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72780: LD_VAR 0 1
72784: PPUSH
72785: LD_VAR 0 5
72789: PPUSH
72790: LD_VAR 0 6
72794: PPUSH
72795: CALL_OW 272
72799: PPUSH
72800: LD_VAR 0 2
72804: PPUSH
72805: LD_VAR 0 5
72809: PPUSH
72810: LD_VAR 0 6
72814: PPUSH
72815: CALL_OW 273
72819: PPUSH
72820: LD_VAR 0 3
72824: PPUSH
72825: CALL_OW 309
72829: IFFALSE 72843
// begin result := true ;
72831: LD_ADDR_VAR 0 4
72835: PUSH
72836: LD_INT 1
72838: ST_TO_ADDR
// exit ;
72839: POP
72840: POP
72841: GO 72847
// end ;
72843: GO 72777
72845: POP
72846: POP
// end ;
72847: LD_VAR 0 4
72851: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72852: LD_INT 0
72854: PPUSH
72855: PPUSH
72856: PPUSH
// if btype = b_depot then
72857: LD_VAR 0 2
72861: PUSH
72862: LD_INT 0
72864: EQUAL
72865: IFFALSE 72877
// begin result := true ;
72867: LD_ADDR_VAR 0 3
72871: PUSH
72872: LD_INT 1
72874: ST_TO_ADDR
// exit ;
72875: GO 72997
// end ; pom := GetBase ( depot ) ;
72877: LD_ADDR_VAR 0 4
72881: PUSH
72882: LD_VAR 0 1
72886: PPUSH
72887: CALL_OW 274
72891: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72892: LD_ADDR_VAR 0 5
72896: PUSH
72897: LD_VAR 0 2
72901: PPUSH
72902: LD_VAR 0 1
72906: PPUSH
72907: CALL_OW 248
72911: PPUSH
72912: CALL_OW 450
72916: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72917: LD_ADDR_VAR 0 3
72921: PUSH
72922: LD_VAR 0 4
72926: PPUSH
72927: LD_INT 1
72929: PPUSH
72930: CALL_OW 275
72934: PUSH
72935: LD_VAR 0 5
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: GREATEREQUAL
72944: IFFALSE 72970
72946: PUSH
72947: LD_VAR 0 4
72951: PPUSH
72952: LD_INT 2
72954: PPUSH
72955: CALL_OW 275
72959: PUSH
72960: LD_VAR 0 5
72964: PUSH
72965: LD_INT 2
72967: ARRAY
72968: GREATEREQUAL
72969: AND
72970: IFFALSE 72996
72972: PUSH
72973: LD_VAR 0 4
72977: PPUSH
72978: LD_INT 3
72980: PPUSH
72981: CALL_OW 275
72985: PUSH
72986: LD_VAR 0 5
72990: PUSH
72991: LD_INT 3
72993: ARRAY
72994: GREATEREQUAL
72995: AND
72996: ST_TO_ADDR
// end ;
72997: LD_VAR 0 3
73001: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73002: LD_INT 0
73004: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73005: LD_VAR 0 1
73009: PPUSH
73010: LD_VAR 0 2
73014: PPUSH
73015: LD_INT 0
73017: PPUSH
73018: LD_INT 0
73020: PPUSH
73021: LD_INT 1
73023: PPUSH
73024: LD_INT 0
73026: PPUSH
73027: CALL_OW 587
// end ;
73031: LD_VAR 0 3
73035: RET
// export function CenterOnNow ( unit ) ; begin
73036: LD_INT 0
73038: PPUSH
// result := IsInUnit ( unit ) ;
73039: LD_ADDR_VAR 0 2
73043: PUSH
73044: LD_VAR 0 1
73048: PPUSH
73049: CALL_OW 310
73053: ST_TO_ADDR
// if not result then
73054: LD_VAR 0 2
73058: NOT
73059: IFFALSE 73071
// result := unit ;
73061: LD_ADDR_VAR 0 2
73065: PUSH
73066: LD_VAR 0 1
73070: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73071: LD_VAR 0 1
73075: PPUSH
73076: CALL_OW 87
// end ;
73080: LD_VAR 0 2
73084: RET
// export function ComMoveHex ( unit , hex ) ; begin
73085: LD_INT 0
73087: PPUSH
// if not hex then
73088: LD_VAR 0 2
73092: NOT
73093: IFFALSE 73097
// exit ;
73095: GO 73150
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73097: LD_VAR 0 2
73101: PUSH
73102: LD_INT 1
73104: ARRAY
73105: PPUSH
73106: LD_VAR 0 2
73110: PUSH
73111: LD_INT 2
73113: ARRAY
73114: PPUSH
73115: CALL_OW 428
73119: IFFALSE 73123
// exit ;
73121: GO 73150
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73123: LD_VAR 0 1
73127: PPUSH
73128: LD_VAR 0 2
73132: PUSH
73133: LD_INT 1
73135: ARRAY
73136: PPUSH
73137: LD_VAR 0 2
73141: PUSH
73142: LD_INT 2
73144: ARRAY
73145: PPUSH
73146: CALL_OW 111
// end ;
73150: LD_VAR 0 3
73154: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73155: LD_INT 0
73157: PPUSH
73158: PPUSH
73159: PPUSH
// if not unit or not enemy then
73160: LD_VAR 0 1
73164: NOT
73165: IFTRUE 73174
73167: PUSH
73168: LD_VAR 0 2
73172: NOT
73173: OR
73174: IFFALSE 73178
// exit ;
73176: GO 73304
// x := GetX ( enemy ) ;
73178: LD_ADDR_VAR 0 4
73182: PUSH
73183: LD_VAR 0 2
73187: PPUSH
73188: CALL_OW 250
73192: ST_TO_ADDR
// y := GetY ( enemy ) ;
73193: LD_ADDR_VAR 0 5
73197: PUSH
73198: LD_VAR 0 2
73202: PPUSH
73203: CALL_OW 251
73207: ST_TO_ADDR
// if ValidHex ( x , y ) then
73208: LD_VAR 0 4
73212: PPUSH
73213: LD_VAR 0 5
73217: PPUSH
73218: CALL_OW 488
73222: IFFALSE 73304
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
73224: LD_VAR 0 2
73228: PPUSH
73229: CALL_OW 247
73233: PUSH
73234: LD_INT 3
73236: PUSH
73237: LD_INT 2
73239: PUSH
73240: EMPTY
73241: LIST
73242: LIST
73243: IN
73244: IFTRUE 73267
73246: PUSH
73247: LD_VAR 0 1
73251: PPUSH
73252: CALL_OW 255
73256: PPUSH
73257: LD_VAR 0 2
73261: PPUSH
73262: CALL_OW 292
73266: OR
73267: IFFALSE 73285
// ComAttackUnit ( unit , enemy ) else
73269: LD_VAR 0 1
73273: PPUSH
73274: LD_VAR 0 2
73278: PPUSH
73279: CALL_OW 115
73283: GO 73304
// ComAgressiveMove ( unit , x , y ) ;
73285: LD_VAR 0 1
73289: PPUSH
73290: LD_VAR 0 4
73294: PPUSH
73295: LD_VAR 0 5
73299: PPUSH
73300: CALL_OW 114
// end ;
73304: LD_VAR 0 3
73308: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73309: LD_INT 0
73311: PPUSH
73312: PPUSH
73313: PPUSH
// list := AreaToList ( area , 0 ) ;
73314: LD_ADDR_VAR 0 5
73318: PUSH
73319: LD_VAR 0 1
73323: PPUSH
73324: LD_INT 0
73326: PPUSH
73327: CALL_OW 517
73331: ST_TO_ADDR
// if not list then
73332: LD_VAR 0 5
73336: NOT
73337: IFFALSE 73341
// exit ;
73339: GO 73471
// if all then
73341: LD_VAR 0 2
73345: IFFALSE 73433
// begin for i := 1 to list [ 1 ] do
73347: LD_ADDR_VAR 0 4
73351: PUSH
73352: DOUBLE
73353: LD_INT 1
73355: DEC
73356: ST_TO_ADDR
73357: LD_VAR 0 5
73361: PUSH
73362: LD_INT 1
73364: ARRAY
73365: PUSH
73366: FOR_TO
73367: IFFALSE 73429
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73369: LD_ADDR_VAR 0 3
73373: PUSH
73374: LD_VAR 0 3
73378: PPUSH
73379: LD_VAR 0 3
73383: PUSH
73384: LD_INT 1
73386: PLUS
73387: PPUSH
73388: LD_VAR 0 5
73392: PUSH
73393: LD_INT 1
73395: ARRAY
73396: PUSH
73397: LD_VAR 0 4
73401: ARRAY
73402: PUSH
73403: LD_VAR 0 5
73407: PUSH
73408: LD_INT 2
73410: ARRAY
73411: PUSH
73412: LD_VAR 0 4
73416: ARRAY
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PPUSH
73422: CALL_OW 1
73426: ST_TO_ADDR
73427: GO 73366
73429: POP
73430: POP
// exit ;
73431: GO 73471
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73433: LD_ADDR_VAR 0 3
73437: PUSH
73438: LD_VAR 0 5
73442: PUSH
73443: LD_INT 1
73445: ARRAY
73446: PUSH
73447: LD_INT 1
73449: ARRAY
73450: PUSH
73451: LD_VAR 0 5
73455: PUSH
73456: LD_INT 2
73458: ARRAY
73459: PUSH
73460: LD_INT 1
73462: ARRAY
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: PUSH
73468: EMPTY
73469: LIST
73470: ST_TO_ADDR
// end ;
73471: LD_VAR 0 3
73475: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73476: LD_INT 0
73478: PPUSH
73479: PPUSH
// list := AreaToList ( area , 0 ) ;
73480: LD_ADDR_VAR 0 4
73484: PUSH
73485: LD_VAR 0 1
73489: PPUSH
73490: LD_INT 0
73492: PPUSH
73493: CALL_OW 517
73497: ST_TO_ADDR
// if not list then
73498: LD_VAR 0 4
73502: NOT
73503: IFFALSE 73507
// exit ;
73505: GO 73548
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73507: LD_ADDR_VAR 0 3
73511: PUSH
73512: LD_VAR 0 4
73516: PUSH
73517: LD_INT 1
73519: ARRAY
73520: PUSH
73521: LD_INT 1
73523: ARRAY
73524: PUSH
73525: LD_VAR 0 4
73529: PUSH
73530: LD_INT 2
73532: ARRAY
73533: PUSH
73534: LD_INT 1
73536: ARRAY
73537: PUSH
73538: LD_VAR 0 2
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: LIST
73547: ST_TO_ADDR
// end ;
73548: LD_VAR 0 3
73552: RET
// export function First ( array ) ; begin
73553: LD_INT 0
73555: PPUSH
// if not array then
73556: LD_VAR 0 1
73560: NOT
73561: IFFALSE 73565
// exit ;
73563: GO 73579
// result := array [ 1 ] ;
73565: LD_ADDR_VAR 0 2
73569: PUSH
73570: LD_VAR 0 1
73574: PUSH
73575: LD_INT 1
73577: ARRAY
73578: ST_TO_ADDR
// end ;
73579: LD_VAR 0 2
73583: RET
// export function Last ( array ) ; begin
73584: LD_INT 0
73586: PPUSH
// if not array then
73587: LD_VAR 0 1
73591: NOT
73592: IFFALSE 73596
// exit ;
73594: GO 73612
// result := array [ array ] ;
73596: LD_ADDR_VAR 0 2
73600: PUSH
73601: LD_VAR 0 1
73605: PUSH
73606: LD_VAR 0 1
73610: ARRAY
73611: ST_TO_ADDR
// end ;
73612: LD_VAR 0 2
73616: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73617: LD_INT 0
73619: PPUSH
73620: PPUSH
// result := [ ] ;
73621: LD_ADDR_VAR 0 5
73625: PUSH
73626: EMPTY
73627: ST_TO_ADDR
// if not array then
73628: LD_VAR 0 1
73632: NOT
73633: IFFALSE 73637
// exit ;
73635: GO 73749
// for i := 1 to array do
73637: LD_ADDR_VAR 0 6
73641: PUSH
73642: DOUBLE
73643: LD_INT 1
73645: DEC
73646: ST_TO_ADDR
73647: LD_VAR 0 1
73651: PUSH
73652: FOR_TO
73653: IFFALSE 73747
// if array [ i ] [ index ] = value then
73655: LD_VAR 0 1
73659: PUSH
73660: LD_VAR 0 6
73664: ARRAY
73665: PUSH
73666: LD_VAR 0 2
73670: ARRAY
73671: PUSH
73672: LD_VAR 0 3
73676: EQUAL
73677: IFFALSE 73745
// begin if indexColumn then
73679: LD_VAR 0 4
73683: IFFALSE 73719
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73685: LD_ADDR_VAR 0 5
73689: PUSH
73690: LD_VAR 0 5
73694: PPUSH
73695: LD_VAR 0 1
73699: PUSH
73700: LD_VAR 0 6
73704: ARRAY
73705: PUSH
73706: LD_VAR 0 4
73710: ARRAY
73711: PPUSH
73712: CALL 68757 0 2
73716: ST_TO_ADDR
73717: GO 73745
// result := Join ( result , array [ i ] ) ;
73719: LD_ADDR_VAR 0 5
73723: PUSH
73724: LD_VAR 0 5
73728: PPUSH
73729: LD_VAR 0 1
73733: PUSH
73734: LD_VAR 0 6
73738: ARRAY
73739: PPUSH
73740: CALL 68757 0 2
73744: ST_TO_ADDR
// end ;
73745: GO 73652
73747: POP
73748: POP
// end ;
73749: LD_VAR 0 5
73753: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73754: LD_INT 0
73756: PPUSH
// if not vehicles or not parkingPoint then
73757: LD_VAR 0 1
73761: NOT
73762: IFTRUE 73771
73764: PUSH
73765: LD_VAR 0 2
73769: NOT
73770: OR
73771: IFFALSE 73775
// exit ;
73773: GO 73873
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73775: LD_ADDR_VAR 0 1
73779: PUSH
73780: LD_VAR 0 1
73784: PPUSH
73785: LD_INT 50
73787: PUSH
73788: EMPTY
73789: LIST
73790: PUSH
73791: LD_INT 3
73793: PUSH
73794: LD_INT 92
73796: PUSH
73797: LD_VAR 0 2
73801: PUSH
73802: LD_INT 1
73804: ARRAY
73805: PUSH
73806: LD_VAR 0 2
73810: PUSH
73811: LD_INT 2
73813: ARRAY
73814: PUSH
73815: LD_INT 8
73817: PUSH
73818: EMPTY
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: PUSH
73824: EMPTY
73825: LIST
73826: LIST
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PPUSH
73832: CALL_OW 72
73836: ST_TO_ADDR
// if not vehicles then
73837: LD_VAR 0 1
73841: NOT
73842: IFFALSE 73846
// exit ;
73844: GO 73873
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73846: LD_VAR 0 1
73850: PPUSH
73851: LD_VAR 0 2
73855: PUSH
73856: LD_INT 1
73858: ARRAY
73859: PPUSH
73860: LD_VAR 0 2
73864: PUSH
73865: LD_INT 2
73867: ARRAY
73868: PPUSH
73869: CALL_OW 111
// end ;
73873: LD_VAR 0 3
73877: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73878: LD_INT 0
73880: PPUSH
73881: PPUSH
73882: PPUSH
// if not side or not area then
73883: LD_VAR 0 1
73887: NOT
73888: IFTRUE 73897
73890: PUSH
73891: LD_VAR 0 2
73895: NOT
73896: OR
73897: IFFALSE 73901
// exit ;
73899: GO 74020
// tmp := AreaToList ( area , 0 ) ;
73901: LD_ADDR_VAR 0 5
73905: PUSH
73906: LD_VAR 0 2
73910: PPUSH
73911: LD_INT 0
73913: PPUSH
73914: CALL_OW 517
73918: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73919: LD_ADDR_VAR 0 4
73923: PUSH
73924: DOUBLE
73925: LD_INT 1
73927: DEC
73928: ST_TO_ADDR
73929: LD_VAR 0 5
73933: PUSH
73934: LD_INT 1
73936: ARRAY
73937: PUSH
73938: FOR_TO
73939: IFFALSE 74018
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73941: LD_VAR 0 5
73945: PUSH
73946: LD_INT 1
73948: ARRAY
73949: PUSH
73950: LD_VAR 0 4
73954: ARRAY
73955: PPUSH
73956: LD_VAR 0 5
73960: PUSH
73961: LD_INT 2
73963: ARRAY
73964: PUSH
73965: LD_VAR 0 4
73969: ARRAY
73970: PPUSH
73971: CALL_OW 351
73975: IFFALSE 74016
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73977: LD_VAR 0 5
73981: PUSH
73982: LD_INT 1
73984: ARRAY
73985: PUSH
73986: LD_VAR 0 4
73990: ARRAY
73991: PPUSH
73992: LD_VAR 0 5
73996: PUSH
73997: LD_INT 2
73999: ARRAY
74000: PUSH
74001: LD_VAR 0 4
74005: ARRAY
74006: PPUSH
74007: LD_VAR 0 1
74011: PPUSH
74012: CALL_OW 244
// end ;
74016: GO 73938
74018: POP
74019: POP
// end ;
74020: LD_VAR 0 3
74024: RET
// export function UniqueArray ( array ) ; var i ; begin
74025: LD_INT 0
74027: PPUSH
74028: PPUSH
// result := [ ] ;
74029: LD_ADDR_VAR 0 2
74033: PUSH
74034: EMPTY
74035: ST_TO_ADDR
// if not array then
74036: LD_VAR 0 1
74040: NOT
74041: IFFALSE 74045
// exit ;
74043: GO 74106
// for i := 1 to array do
74045: LD_ADDR_VAR 0 3
74049: PUSH
74050: DOUBLE
74051: LD_INT 1
74053: DEC
74054: ST_TO_ADDR
74055: LD_VAR 0 1
74059: PUSH
74060: FOR_TO
74061: IFFALSE 74104
// if not array [ i ] in result then
74063: LD_VAR 0 1
74067: PUSH
74068: LD_VAR 0 3
74072: ARRAY
74073: PUSH
74074: LD_VAR 0 2
74078: IN
74079: NOT
74080: IFFALSE 74102
// result := Join ( result , i ) ;
74082: LD_ADDR_VAR 0 2
74086: PUSH
74087: LD_VAR 0 2
74091: PPUSH
74092: LD_VAR 0 3
74096: PPUSH
74097: CALL 68757 0 2
74101: ST_TO_ADDR
74102: GO 74060
74104: POP
74105: POP
// end ; end_of_file
74106: LD_VAR 0 2
74110: RET
// export globalGameSaveCounter ; every 0 0$1 do
74111: GO 74113
74113: DISABLE
// begin enable ;
74114: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
74115: LD_STRING updateTimer(
74117: PUSH
74118: LD_OWVAR 1
74122: STR
74123: PUSH
74124: LD_STRING );
74126: STR
74127: PPUSH
74128: CALL_OW 559
// end ;
74132: END
// every 0 0$1 do
74133: GO 74135
74135: DISABLE
// begin globalGameSaveCounter := 0 ;
74136: LD_ADDR_EXP 74
74140: PUSH
74141: LD_INT 0
74143: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
74144: LD_STRING setGameSaveCounter(0)
74146: PPUSH
74147: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
74151: LD_STRING initStreamRollete();
74153: PPUSH
74154: CALL_OW 559
// InitStreamMode ;
74158: CALL 75510 0 0
// DefineStreamItems ( false ) ;
74162: LD_INT 0
74164: PPUSH
74165: CALL 75974 0 1
// end ;
74169: END
// export function SOS_MapStart ( ) ; begin
74170: LD_INT 0
74172: PPUSH
// if streamModeActive then
74173: LD_EXP 75
74177: IFFALSE 74186
// DefineStreamItems ( true ) ;
74179: LD_INT 1
74181: PPUSH
74182: CALL 75974 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
74186: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
74188: PPUSH
74189: CALL_OW 559
// UpdateLuaVariables ( ) ;
74193: CALL 74210 0 0
// UpdateFactoryWaypoints ( ) ;
74197: CALL 89096 0 0
// UpdateWarehouseGatheringPoints ( ) ;
74201: CALL 89348 0 0
// end ;
74205: LD_VAR 0 1
74209: RET
// function UpdateLuaVariables ( ) ; begin
74210: LD_INT 0
74212: PPUSH
// if globalGameSaveCounter then
74213: LD_EXP 74
74217: IFFALSE 74251
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
74219: LD_ADDR_EXP 74
74223: PUSH
74224: LD_EXP 74
74228: PPUSH
74229: CALL 70130 0 1
74233: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
74234: LD_STRING setGameSaveCounter(
74236: PUSH
74237: LD_EXP 74
74241: STR
74242: PUSH
74243: LD_STRING )
74245: STR
74246: PPUSH
74247: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
74251: LD_STRING setGameDifficulty(
74253: PUSH
74254: LD_OWVAR 67
74258: STR
74259: PUSH
74260: LD_STRING )
74262: STR
74263: PPUSH
74264: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
74268: LD_STRING displayDifficulty(
74270: PUSH
74271: LD_OWVAR 67
74275: STR
74276: PUSH
74277: LD_STRING )
74279: STR
74280: PPUSH
74281: CALL_OW 559
// end ;
74285: LD_VAR 0 1
74289: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
74290: LD_INT 0
74292: PPUSH
// if p2 = stream_mode then
74293: LD_VAR 0 2
74297: PUSH
74298: LD_INT 100
74300: EQUAL
74301: IFFALSE 75304
// begin if not StreamModeActive then
74303: LD_EXP 75
74307: NOT
74308: IFFALSE 74318
// StreamModeActive := true ;
74310: LD_ADDR_EXP 75
74314: PUSH
74315: LD_INT 1
74317: ST_TO_ADDR
// if p3 = 0 then
74318: LD_VAR 0 3
74322: PUSH
74323: LD_INT 0
74325: EQUAL
74326: IFFALSE 74332
// InitStreamMode ;
74328: CALL 75510 0 0
// if p3 = 1 then
74332: LD_VAR 0 3
74336: PUSH
74337: LD_INT 1
74339: EQUAL
74340: IFFALSE 74350
// sRocket := true ;
74342: LD_ADDR_EXP 80
74346: PUSH
74347: LD_INT 1
74349: ST_TO_ADDR
// if p3 = 2 then
74350: LD_VAR 0 3
74354: PUSH
74355: LD_INT 2
74357: EQUAL
74358: IFFALSE 74368
// sSpeed := true ;
74360: LD_ADDR_EXP 79
74364: PUSH
74365: LD_INT 1
74367: ST_TO_ADDR
// if p3 = 3 then
74368: LD_VAR 0 3
74372: PUSH
74373: LD_INT 3
74375: EQUAL
74376: IFFALSE 74386
// sEngine := true ;
74378: LD_ADDR_EXP 81
74382: PUSH
74383: LD_INT 1
74385: ST_TO_ADDR
// if p3 = 4 then
74386: LD_VAR 0 3
74390: PUSH
74391: LD_INT 4
74393: EQUAL
74394: IFFALSE 74404
// sSpec := true ;
74396: LD_ADDR_EXP 78
74400: PUSH
74401: LD_INT 1
74403: ST_TO_ADDR
// if p3 = 5 then
74404: LD_VAR 0 3
74408: PUSH
74409: LD_INT 5
74411: EQUAL
74412: IFFALSE 74422
// sLevel := true ;
74414: LD_ADDR_EXP 82
74418: PUSH
74419: LD_INT 1
74421: ST_TO_ADDR
// if p3 = 6 then
74422: LD_VAR 0 3
74426: PUSH
74427: LD_INT 6
74429: EQUAL
74430: IFFALSE 74440
// sArmoury := true ;
74432: LD_ADDR_EXP 83
74436: PUSH
74437: LD_INT 1
74439: ST_TO_ADDR
// if p3 = 7 then
74440: LD_VAR 0 3
74444: PUSH
74445: LD_INT 7
74447: EQUAL
74448: IFFALSE 74458
// sRadar := true ;
74450: LD_ADDR_EXP 84
74454: PUSH
74455: LD_INT 1
74457: ST_TO_ADDR
// if p3 = 8 then
74458: LD_VAR 0 3
74462: PUSH
74463: LD_INT 8
74465: EQUAL
74466: IFFALSE 74476
// sBunker := true ;
74468: LD_ADDR_EXP 85
74472: PUSH
74473: LD_INT 1
74475: ST_TO_ADDR
// if p3 = 9 then
74476: LD_VAR 0 3
74480: PUSH
74481: LD_INT 9
74483: EQUAL
74484: IFFALSE 74494
// sHack := true ;
74486: LD_ADDR_EXP 86
74490: PUSH
74491: LD_INT 1
74493: ST_TO_ADDR
// if p3 = 10 then
74494: LD_VAR 0 3
74498: PUSH
74499: LD_INT 10
74501: EQUAL
74502: IFFALSE 74512
// sFire := true ;
74504: LD_ADDR_EXP 87
74508: PUSH
74509: LD_INT 1
74511: ST_TO_ADDR
// if p3 = 11 then
74512: LD_VAR 0 3
74516: PUSH
74517: LD_INT 11
74519: EQUAL
74520: IFFALSE 74530
// sRefresh := true ;
74522: LD_ADDR_EXP 88
74526: PUSH
74527: LD_INT 1
74529: ST_TO_ADDR
// if p3 = 12 then
74530: LD_VAR 0 3
74534: PUSH
74535: LD_INT 12
74537: EQUAL
74538: IFFALSE 74548
// sExp := true ;
74540: LD_ADDR_EXP 89
74544: PUSH
74545: LD_INT 1
74547: ST_TO_ADDR
// if p3 = 13 then
74548: LD_VAR 0 3
74552: PUSH
74553: LD_INT 13
74555: EQUAL
74556: IFFALSE 74566
// sDepot := true ;
74558: LD_ADDR_EXP 90
74562: PUSH
74563: LD_INT 1
74565: ST_TO_ADDR
// if p3 = 14 then
74566: LD_VAR 0 3
74570: PUSH
74571: LD_INT 14
74573: EQUAL
74574: IFFALSE 74584
// sFlag := true ;
74576: LD_ADDR_EXP 91
74580: PUSH
74581: LD_INT 1
74583: ST_TO_ADDR
// if p3 = 15 then
74584: LD_VAR 0 3
74588: PUSH
74589: LD_INT 15
74591: EQUAL
74592: IFFALSE 74602
// sKamikadze := true ;
74594: LD_ADDR_EXP 99
74598: PUSH
74599: LD_INT 1
74601: ST_TO_ADDR
// if p3 = 16 then
74602: LD_VAR 0 3
74606: PUSH
74607: LD_INT 16
74609: EQUAL
74610: IFFALSE 74620
// sTroll := true ;
74612: LD_ADDR_EXP 100
74616: PUSH
74617: LD_INT 1
74619: ST_TO_ADDR
// if p3 = 17 then
74620: LD_VAR 0 3
74624: PUSH
74625: LD_INT 17
74627: EQUAL
74628: IFFALSE 74638
// sSlow := true ;
74630: LD_ADDR_EXP 101
74634: PUSH
74635: LD_INT 1
74637: ST_TO_ADDR
// if p3 = 18 then
74638: LD_VAR 0 3
74642: PUSH
74643: LD_INT 18
74645: EQUAL
74646: IFFALSE 74656
// sLack := true ;
74648: LD_ADDR_EXP 102
74652: PUSH
74653: LD_INT 1
74655: ST_TO_ADDR
// if p3 = 19 then
74656: LD_VAR 0 3
74660: PUSH
74661: LD_INT 19
74663: EQUAL
74664: IFFALSE 74674
// sTank := true ;
74666: LD_ADDR_EXP 104
74670: PUSH
74671: LD_INT 1
74673: ST_TO_ADDR
// if p3 = 20 then
74674: LD_VAR 0 3
74678: PUSH
74679: LD_INT 20
74681: EQUAL
74682: IFFALSE 74692
// sRemote := true ;
74684: LD_ADDR_EXP 105
74688: PUSH
74689: LD_INT 1
74691: ST_TO_ADDR
// if p3 = 21 then
74692: LD_VAR 0 3
74696: PUSH
74697: LD_INT 21
74699: EQUAL
74700: IFFALSE 74710
// sPowell := true ;
74702: LD_ADDR_EXP 106
74706: PUSH
74707: LD_INT 1
74709: ST_TO_ADDR
// if p3 = 22 then
74710: LD_VAR 0 3
74714: PUSH
74715: LD_INT 22
74717: EQUAL
74718: IFFALSE 74728
// sTeleport := true ;
74720: LD_ADDR_EXP 109
74724: PUSH
74725: LD_INT 1
74727: ST_TO_ADDR
// if p3 = 23 then
74728: LD_VAR 0 3
74732: PUSH
74733: LD_INT 23
74735: EQUAL
74736: IFFALSE 74746
// sOilTower := true ;
74738: LD_ADDR_EXP 111
74742: PUSH
74743: LD_INT 1
74745: ST_TO_ADDR
// if p3 = 24 then
74746: LD_VAR 0 3
74750: PUSH
74751: LD_INT 24
74753: EQUAL
74754: IFFALSE 74764
// sShovel := true ;
74756: LD_ADDR_EXP 112
74760: PUSH
74761: LD_INT 1
74763: ST_TO_ADDR
// if p3 = 25 then
74764: LD_VAR 0 3
74768: PUSH
74769: LD_INT 25
74771: EQUAL
74772: IFFALSE 74782
// sSheik := true ;
74774: LD_ADDR_EXP 113
74778: PUSH
74779: LD_INT 1
74781: ST_TO_ADDR
// if p3 = 26 then
74782: LD_VAR 0 3
74786: PUSH
74787: LD_INT 26
74789: EQUAL
74790: IFFALSE 74800
// sEarthquake := true ;
74792: LD_ADDR_EXP 115
74796: PUSH
74797: LD_INT 1
74799: ST_TO_ADDR
// if p3 = 27 then
74800: LD_VAR 0 3
74804: PUSH
74805: LD_INT 27
74807: EQUAL
74808: IFFALSE 74818
// sAI := true ;
74810: LD_ADDR_EXP 116
74814: PUSH
74815: LD_INT 1
74817: ST_TO_ADDR
// if p3 = 28 then
74818: LD_VAR 0 3
74822: PUSH
74823: LD_INT 28
74825: EQUAL
74826: IFFALSE 74836
// sCargo := true ;
74828: LD_ADDR_EXP 119
74832: PUSH
74833: LD_INT 1
74835: ST_TO_ADDR
// if p3 = 29 then
74836: LD_VAR 0 3
74840: PUSH
74841: LD_INT 29
74843: EQUAL
74844: IFFALSE 74854
// sDLaser := true ;
74846: LD_ADDR_EXP 120
74850: PUSH
74851: LD_INT 1
74853: ST_TO_ADDR
// if p3 = 30 then
74854: LD_VAR 0 3
74858: PUSH
74859: LD_INT 30
74861: EQUAL
74862: IFFALSE 74872
// sExchange := true ;
74864: LD_ADDR_EXP 121
74868: PUSH
74869: LD_INT 1
74871: ST_TO_ADDR
// if p3 = 31 then
74872: LD_VAR 0 3
74876: PUSH
74877: LD_INT 31
74879: EQUAL
74880: IFFALSE 74890
// sFac := true ;
74882: LD_ADDR_EXP 122
74886: PUSH
74887: LD_INT 1
74889: ST_TO_ADDR
// if p3 = 32 then
74890: LD_VAR 0 3
74894: PUSH
74895: LD_INT 32
74897: EQUAL
74898: IFFALSE 74908
// sPower := true ;
74900: LD_ADDR_EXP 123
74904: PUSH
74905: LD_INT 1
74907: ST_TO_ADDR
// if p3 = 33 then
74908: LD_VAR 0 3
74912: PUSH
74913: LD_INT 33
74915: EQUAL
74916: IFFALSE 74926
// sRandom := true ;
74918: LD_ADDR_EXP 124
74922: PUSH
74923: LD_INT 1
74925: ST_TO_ADDR
// if p3 = 34 then
74926: LD_VAR 0 3
74930: PUSH
74931: LD_INT 34
74933: EQUAL
74934: IFFALSE 74944
// sShield := true ;
74936: LD_ADDR_EXP 125
74940: PUSH
74941: LD_INT 1
74943: ST_TO_ADDR
// if p3 = 35 then
74944: LD_VAR 0 3
74948: PUSH
74949: LD_INT 35
74951: EQUAL
74952: IFFALSE 74962
// sTime := true ;
74954: LD_ADDR_EXP 126
74958: PUSH
74959: LD_INT 1
74961: ST_TO_ADDR
// if p3 = 36 then
74962: LD_VAR 0 3
74966: PUSH
74967: LD_INT 36
74969: EQUAL
74970: IFFALSE 74980
// sTools := true ;
74972: LD_ADDR_EXP 127
74976: PUSH
74977: LD_INT 1
74979: ST_TO_ADDR
// if p3 = 101 then
74980: LD_VAR 0 3
74984: PUSH
74985: LD_INT 101
74987: EQUAL
74988: IFFALSE 74998
// sSold := true ;
74990: LD_ADDR_EXP 92
74994: PUSH
74995: LD_INT 1
74997: ST_TO_ADDR
// if p3 = 102 then
74998: LD_VAR 0 3
75002: PUSH
75003: LD_INT 102
75005: EQUAL
75006: IFFALSE 75016
// sDiff := true ;
75008: LD_ADDR_EXP 93
75012: PUSH
75013: LD_INT 1
75015: ST_TO_ADDR
// if p3 = 103 then
75016: LD_VAR 0 3
75020: PUSH
75021: LD_INT 103
75023: EQUAL
75024: IFFALSE 75034
// sFog := true ;
75026: LD_ADDR_EXP 96
75030: PUSH
75031: LD_INT 1
75033: ST_TO_ADDR
// if p3 = 104 then
75034: LD_VAR 0 3
75038: PUSH
75039: LD_INT 104
75041: EQUAL
75042: IFFALSE 75052
// sReset := true ;
75044: LD_ADDR_EXP 97
75048: PUSH
75049: LD_INT 1
75051: ST_TO_ADDR
// if p3 = 105 then
75052: LD_VAR 0 3
75056: PUSH
75057: LD_INT 105
75059: EQUAL
75060: IFFALSE 75070
// sSun := true ;
75062: LD_ADDR_EXP 98
75066: PUSH
75067: LD_INT 1
75069: ST_TO_ADDR
// if p3 = 106 then
75070: LD_VAR 0 3
75074: PUSH
75075: LD_INT 106
75077: EQUAL
75078: IFFALSE 75088
// sTiger := true ;
75080: LD_ADDR_EXP 94
75084: PUSH
75085: LD_INT 1
75087: ST_TO_ADDR
// if p3 = 107 then
75088: LD_VAR 0 3
75092: PUSH
75093: LD_INT 107
75095: EQUAL
75096: IFFALSE 75106
// sBomb := true ;
75098: LD_ADDR_EXP 95
75102: PUSH
75103: LD_INT 1
75105: ST_TO_ADDR
// if p3 = 108 then
75106: LD_VAR 0 3
75110: PUSH
75111: LD_INT 108
75113: EQUAL
75114: IFFALSE 75124
// sWound := true ;
75116: LD_ADDR_EXP 103
75120: PUSH
75121: LD_INT 1
75123: ST_TO_ADDR
// if p3 = 109 then
75124: LD_VAR 0 3
75128: PUSH
75129: LD_INT 109
75131: EQUAL
75132: IFFALSE 75142
// sBetray := true ;
75134: LD_ADDR_EXP 107
75138: PUSH
75139: LD_INT 1
75141: ST_TO_ADDR
// if p3 = 110 then
75142: LD_VAR 0 3
75146: PUSH
75147: LD_INT 110
75149: EQUAL
75150: IFFALSE 75160
// sContamin := true ;
75152: LD_ADDR_EXP 108
75156: PUSH
75157: LD_INT 1
75159: ST_TO_ADDR
// if p3 = 111 then
75160: LD_VAR 0 3
75164: PUSH
75165: LD_INT 111
75167: EQUAL
75168: IFFALSE 75178
// sOil := true ;
75170: LD_ADDR_EXP 110
75174: PUSH
75175: LD_INT 1
75177: ST_TO_ADDR
// if p3 = 112 then
75178: LD_VAR 0 3
75182: PUSH
75183: LD_INT 112
75185: EQUAL
75186: IFFALSE 75196
// sStu := true ;
75188: LD_ADDR_EXP 114
75192: PUSH
75193: LD_INT 1
75195: ST_TO_ADDR
// if p3 = 113 then
75196: LD_VAR 0 3
75200: PUSH
75201: LD_INT 113
75203: EQUAL
75204: IFFALSE 75214
// sBazooka := true ;
75206: LD_ADDR_EXP 117
75210: PUSH
75211: LD_INT 1
75213: ST_TO_ADDR
// if p3 = 114 then
75214: LD_VAR 0 3
75218: PUSH
75219: LD_INT 114
75221: EQUAL
75222: IFFALSE 75232
// sMortar := true ;
75224: LD_ADDR_EXP 118
75228: PUSH
75229: LD_INT 1
75231: ST_TO_ADDR
// if p3 = 115 then
75232: LD_VAR 0 3
75236: PUSH
75237: LD_INT 115
75239: EQUAL
75240: IFFALSE 75250
// sRanger := true ;
75242: LD_ADDR_EXP 128
75246: PUSH
75247: LD_INT 1
75249: ST_TO_ADDR
// if p3 = 116 then
75250: LD_VAR 0 3
75254: PUSH
75255: LD_INT 116
75257: EQUAL
75258: IFFALSE 75268
// sComputer := true ;
75260: LD_ADDR_EXP 129
75264: PUSH
75265: LD_INT 1
75267: ST_TO_ADDR
// if p3 = 117 then
75268: LD_VAR 0 3
75272: PUSH
75273: LD_INT 117
75275: EQUAL
75276: IFFALSE 75286
// s30 := true ;
75278: LD_ADDR_EXP 130
75282: PUSH
75283: LD_INT 1
75285: ST_TO_ADDR
// if p3 = 118 then
75286: LD_VAR 0 3
75290: PUSH
75291: LD_INT 118
75293: EQUAL
75294: IFFALSE 75304
// s60 := true ;
75296: LD_ADDR_EXP 131
75300: PUSH
75301: LD_INT 1
75303: ST_TO_ADDR
// end ; if p2 = hack_mode then
75304: LD_VAR 0 2
75308: PUSH
75309: LD_INT 101
75311: EQUAL
75312: IFFALSE 75440
// begin case p3 of 1 :
75314: LD_VAR 0 3
75318: PUSH
75319: LD_INT 1
75321: DOUBLE
75322: EQUAL
75323: IFTRUE 75327
75325: GO 75334
75327: POP
// hHackUnlimitedResources ; 2 :
75328: CALL 87703 0 0
75332: GO 75440
75334: LD_INT 2
75336: DOUBLE
75337: EQUAL
75338: IFTRUE 75342
75340: GO 75349
75342: POP
// hHackSetLevel10 ; 3 :
75343: CALL 87836 0 0
75347: GO 75440
75349: LD_INT 3
75351: DOUBLE
75352: EQUAL
75353: IFTRUE 75357
75355: GO 75364
75357: POP
// hHackSetLevel10YourUnits ; 4 :
75358: CALL 87921 0 0
75362: GO 75440
75364: LD_INT 4
75366: DOUBLE
75367: EQUAL
75368: IFTRUE 75372
75370: GO 75379
75372: POP
// hHackInvincible ; 5 :
75373: CALL 88369 0 0
75377: GO 75440
75379: LD_INT 5
75381: DOUBLE
75382: EQUAL
75383: IFTRUE 75387
75385: GO 75394
75387: POP
// hHackInvisible ; 6 :
75388: CALL 88480 0 0
75392: GO 75440
75394: LD_INT 6
75396: DOUBLE
75397: EQUAL
75398: IFTRUE 75402
75400: GO 75409
75402: POP
// hHackChangeYourSide ; 7 :
75403: CALL 88537 0 0
75407: GO 75440
75409: LD_INT 7
75411: DOUBLE
75412: EQUAL
75413: IFTRUE 75417
75415: GO 75424
75417: POP
// hHackChangeUnitSide ; 8 :
75418: CALL 88579 0 0
75422: GO 75440
75424: LD_INT 8
75426: DOUBLE
75427: EQUAL
75428: IFTRUE 75432
75430: GO 75439
75432: POP
// hHackFog ; end ;
75433: CALL 88680 0 0
75437: GO 75440
75439: POP
// end ; if p2 = game_save_mode then
75440: LD_VAR 0 2
75444: PUSH
75445: LD_INT 102
75447: EQUAL
75448: IFFALSE 75505
// begin if p3 = 1 then
75450: LD_VAR 0 3
75454: PUSH
75455: LD_INT 1
75457: EQUAL
75458: IFFALSE 75470
// globalGameSaveCounter := p4 ;
75460: LD_ADDR_EXP 74
75464: PUSH
75465: LD_VAR 0 4
75469: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
75470: LD_VAR 0 3
75474: PUSH
75475: LD_INT 2
75477: EQUAL
75478: IFFALSE 75486
75480: PUSH
75481: LD_EXP 74
75485: AND
75486: IFFALSE 75505
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
75488: LD_STRING setGameSaveCounter(
75490: PUSH
75491: LD_EXP 74
75495: STR
75496: PUSH
75497: LD_STRING )
75499: STR
75500: PPUSH
75501: CALL_OW 559
// end ; end ;
75505: LD_VAR 0 7
75509: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
75510: LD_INT 0
75512: PPUSH
// streamModeActive := false ;
75513: LD_ADDR_EXP 75
75517: PUSH
75518: LD_INT 0
75520: ST_TO_ADDR
// normalCounter := 36 ;
75521: LD_ADDR_EXP 76
75525: PUSH
75526: LD_INT 36
75528: ST_TO_ADDR
// hardcoreCounter := 18 ;
75529: LD_ADDR_EXP 77
75533: PUSH
75534: LD_INT 18
75536: ST_TO_ADDR
// sRocket := false ;
75537: LD_ADDR_EXP 80
75541: PUSH
75542: LD_INT 0
75544: ST_TO_ADDR
// sSpeed := false ;
75545: LD_ADDR_EXP 79
75549: PUSH
75550: LD_INT 0
75552: ST_TO_ADDR
// sEngine := false ;
75553: LD_ADDR_EXP 81
75557: PUSH
75558: LD_INT 0
75560: ST_TO_ADDR
// sSpec := false ;
75561: LD_ADDR_EXP 78
75565: PUSH
75566: LD_INT 0
75568: ST_TO_ADDR
// sLevel := false ;
75569: LD_ADDR_EXP 82
75573: PUSH
75574: LD_INT 0
75576: ST_TO_ADDR
// sArmoury := false ;
75577: LD_ADDR_EXP 83
75581: PUSH
75582: LD_INT 0
75584: ST_TO_ADDR
// sRadar := false ;
75585: LD_ADDR_EXP 84
75589: PUSH
75590: LD_INT 0
75592: ST_TO_ADDR
// sBunker := false ;
75593: LD_ADDR_EXP 85
75597: PUSH
75598: LD_INT 0
75600: ST_TO_ADDR
// sHack := false ;
75601: LD_ADDR_EXP 86
75605: PUSH
75606: LD_INT 0
75608: ST_TO_ADDR
// sFire := false ;
75609: LD_ADDR_EXP 87
75613: PUSH
75614: LD_INT 0
75616: ST_TO_ADDR
// sRefresh := false ;
75617: LD_ADDR_EXP 88
75621: PUSH
75622: LD_INT 0
75624: ST_TO_ADDR
// sExp := false ;
75625: LD_ADDR_EXP 89
75629: PUSH
75630: LD_INT 0
75632: ST_TO_ADDR
// sDepot := false ;
75633: LD_ADDR_EXP 90
75637: PUSH
75638: LD_INT 0
75640: ST_TO_ADDR
// sFlag := false ;
75641: LD_ADDR_EXP 91
75645: PUSH
75646: LD_INT 0
75648: ST_TO_ADDR
// sKamikadze := false ;
75649: LD_ADDR_EXP 99
75653: PUSH
75654: LD_INT 0
75656: ST_TO_ADDR
// sTroll := false ;
75657: LD_ADDR_EXP 100
75661: PUSH
75662: LD_INT 0
75664: ST_TO_ADDR
// sSlow := false ;
75665: LD_ADDR_EXP 101
75669: PUSH
75670: LD_INT 0
75672: ST_TO_ADDR
// sLack := false ;
75673: LD_ADDR_EXP 102
75677: PUSH
75678: LD_INT 0
75680: ST_TO_ADDR
// sTank := false ;
75681: LD_ADDR_EXP 104
75685: PUSH
75686: LD_INT 0
75688: ST_TO_ADDR
// sRemote := false ;
75689: LD_ADDR_EXP 105
75693: PUSH
75694: LD_INT 0
75696: ST_TO_ADDR
// sPowell := false ;
75697: LD_ADDR_EXP 106
75701: PUSH
75702: LD_INT 0
75704: ST_TO_ADDR
// sTeleport := false ;
75705: LD_ADDR_EXP 109
75709: PUSH
75710: LD_INT 0
75712: ST_TO_ADDR
// sOilTower := false ;
75713: LD_ADDR_EXP 111
75717: PUSH
75718: LD_INT 0
75720: ST_TO_ADDR
// sShovel := false ;
75721: LD_ADDR_EXP 112
75725: PUSH
75726: LD_INT 0
75728: ST_TO_ADDR
// sSheik := false ;
75729: LD_ADDR_EXP 113
75733: PUSH
75734: LD_INT 0
75736: ST_TO_ADDR
// sEarthquake := false ;
75737: LD_ADDR_EXP 115
75741: PUSH
75742: LD_INT 0
75744: ST_TO_ADDR
// sAI := false ;
75745: LD_ADDR_EXP 116
75749: PUSH
75750: LD_INT 0
75752: ST_TO_ADDR
// sCargo := false ;
75753: LD_ADDR_EXP 119
75757: PUSH
75758: LD_INT 0
75760: ST_TO_ADDR
// sDLaser := false ;
75761: LD_ADDR_EXP 120
75765: PUSH
75766: LD_INT 0
75768: ST_TO_ADDR
// sExchange := false ;
75769: LD_ADDR_EXP 121
75773: PUSH
75774: LD_INT 0
75776: ST_TO_ADDR
// sFac := false ;
75777: LD_ADDR_EXP 122
75781: PUSH
75782: LD_INT 0
75784: ST_TO_ADDR
// sPower := false ;
75785: LD_ADDR_EXP 123
75789: PUSH
75790: LD_INT 0
75792: ST_TO_ADDR
// sRandom := false ;
75793: LD_ADDR_EXP 124
75797: PUSH
75798: LD_INT 0
75800: ST_TO_ADDR
// sShield := false ;
75801: LD_ADDR_EXP 125
75805: PUSH
75806: LD_INT 0
75808: ST_TO_ADDR
// sTime := false ;
75809: LD_ADDR_EXP 126
75813: PUSH
75814: LD_INT 0
75816: ST_TO_ADDR
// sTools := false ;
75817: LD_ADDR_EXP 127
75821: PUSH
75822: LD_INT 0
75824: ST_TO_ADDR
// sSold := false ;
75825: LD_ADDR_EXP 92
75829: PUSH
75830: LD_INT 0
75832: ST_TO_ADDR
// sDiff := false ;
75833: LD_ADDR_EXP 93
75837: PUSH
75838: LD_INT 0
75840: ST_TO_ADDR
// sFog := false ;
75841: LD_ADDR_EXP 96
75845: PUSH
75846: LD_INT 0
75848: ST_TO_ADDR
// sReset := false ;
75849: LD_ADDR_EXP 97
75853: PUSH
75854: LD_INT 0
75856: ST_TO_ADDR
// sSun := false ;
75857: LD_ADDR_EXP 98
75861: PUSH
75862: LD_INT 0
75864: ST_TO_ADDR
// sTiger := false ;
75865: LD_ADDR_EXP 94
75869: PUSH
75870: LD_INT 0
75872: ST_TO_ADDR
// sBomb := false ;
75873: LD_ADDR_EXP 95
75877: PUSH
75878: LD_INT 0
75880: ST_TO_ADDR
// sWound := false ;
75881: LD_ADDR_EXP 103
75885: PUSH
75886: LD_INT 0
75888: ST_TO_ADDR
// sBetray := false ;
75889: LD_ADDR_EXP 107
75893: PUSH
75894: LD_INT 0
75896: ST_TO_ADDR
// sContamin := false ;
75897: LD_ADDR_EXP 108
75901: PUSH
75902: LD_INT 0
75904: ST_TO_ADDR
// sOil := false ;
75905: LD_ADDR_EXP 110
75909: PUSH
75910: LD_INT 0
75912: ST_TO_ADDR
// sStu := false ;
75913: LD_ADDR_EXP 114
75917: PUSH
75918: LD_INT 0
75920: ST_TO_ADDR
// sBazooka := false ;
75921: LD_ADDR_EXP 117
75925: PUSH
75926: LD_INT 0
75928: ST_TO_ADDR
// sMortar := false ;
75929: LD_ADDR_EXP 118
75933: PUSH
75934: LD_INT 0
75936: ST_TO_ADDR
// sRanger := false ;
75937: LD_ADDR_EXP 128
75941: PUSH
75942: LD_INT 0
75944: ST_TO_ADDR
// sComputer := false ;
75945: LD_ADDR_EXP 129
75949: PUSH
75950: LD_INT 0
75952: ST_TO_ADDR
// s30 := false ;
75953: LD_ADDR_EXP 130
75957: PUSH
75958: LD_INT 0
75960: ST_TO_ADDR
// s60 := false ;
75961: LD_ADDR_EXP 131
75965: PUSH
75966: LD_INT 0
75968: ST_TO_ADDR
// end ;
75969: LD_VAR 0 1
75973: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
75974: LD_INT 0
75976: PPUSH
75977: PPUSH
75978: PPUSH
75979: PPUSH
75980: PPUSH
75981: PPUSH
75982: PPUSH
// result := [ ] ;
75983: LD_ADDR_VAR 0 2
75987: PUSH
75988: EMPTY
75989: ST_TO_ADDR
// if campaign_id = 1 then
75990: LD_OWVAR 69
75994: PUSH
75995: LD_INT 1
75997: EQUAL
75998: IFFALSE 79164
// begin case mission_number of 1 :
76000: LD_OWVAR 70
76004: PUSH
76005: LD_INT 1
76007: DOUBLE
76008: EQUAL
76009: IFTRUE 76013
76011: GO 76089
76013: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
76014: LD_ADDR_VAR 0 2
76018: PUSH
76019: LD_INT 2
76021: PUSH
76022: LD_INT 4
76024: PUSH
76025: LD_INT 11
76027: PUSH
76028: LD_INT 12
76030: PUSH
76031: LD_INT 15
76033: PUSH
76034: LD_INT 16
76036: PUSH
76037: LD_INT 22
76039: PUSH
76040: LD_INT 23
76042: PUSH
76043: LD_INT 26
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: PUSH
76057: LD_INT 101
76059: PUSH
76060: LD_INT 102
76062: PUSH
76063: LD_INT 106
76065: PUSH
76066: LD_INT 116
76068: PUSH
76069: LD_INT 117
76071: PUSH
76072: LD_INT 118
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: ST_TO_ADDR
76087: GO 79162
76089: LD_INT 2
76091: DOUBLE
76092: EQUAL
76093: IFTRUE 76097
76095: GO 76181
76097: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
76098: LD_ADDR_VAR 0 2
76102: PUSH
76103: LD_INT 2
76105: PUSH
76106: LD_INT 4
76108: PUSH
76109: LD_INT 11
76111: PUSH
76112: LD_INT 12
76114: PUSH
76115: LD_INT 15
76117: PUSH
76118: LD_INT 16
76120: PUSH
76121: LD_INT 22
76123: PUSH
76124: LD_INT 23
76126: PUSH
76127: LD_INT 26
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: LIST
76138: LIST
76139: LIST
76140: PUSH
76141: LD_INT 101
76143: PUSH
76144: LD_INT 102
76146: PUSH
76147: LD_INT 105
76149: PUSH
76150: LD_INT 106
76152: PUSH
76153: LD_INT 108
76155: PUSH
76156: LD_INT 116
76158: PUSH
76159: LD_INT 117
76161: PUSH
76162: LD_INT 118
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: LIST
76172: LIST
76173: LIST
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: ST_TO_ADDR
76179: GO 79162
76181: LD_INT 3
76183: DOUBLE
76184: EQUAL
76185: IFTRUE 76189
76187: GO 76277
76189: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
76190: LD_ADDR_VAR 0 2
76194: PUSH
76195: LD_INT 2
76197: PUSH
76198: LD_INT 4
76200: PUSH
76201: LD_INT 5
76203: PUSH
76204: LD_INT 11
76206: PUSH
76207: LD_INT 12
76209: PUSH
76210: LD_INT 15
76212: PUSH
76213: LD_INT 16
76215: PUSH
76216: LD_INT 22
76218: PUSH
76219: LD_INT 26
76221: PUSH
76222: LD_INT 36
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: PUSH
76237: LD_INT 101
76239: PUSH
76240: LD_INT 102
76242: PUSH
76243: LD_INT 105
76245: PUSH
76246: LD_INT 106
76248: PUSH
76249: LD_INT 108
76251: PUSH
76252: LD_INT 116
76254: PUSH
76255: LD_INT 117
76257: PUSH
76258: LD_INT 118
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: ST_TO_ADDR
76275: GO 79162
76277: LD_INT 4
76279: DOUBLE
76280: EQUAL
76281: IFTRUE 76285
76283: GO 76381
76285: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
76286: LD_ADDR_VAR 0 2
76290: PUSH
76291: LD_INT 2
76293: PUSH
76294: LD_INT 4
76296: PUSH
76297: LD_INT 5
76299: PUSH
76300: LD_INT 8
76302: PUSH
76303: LD_INT 11
76305: PUSH
76306: LD_INT 12
76308: PUSH
76309: LD_INT 15
76311: PUSH
76312: LD_INT 16
76314: PUSH
76315: LD_INT 22
76317: PUSH
76318: LD_INT 23
76320: PUSH
76321: LD_INT 26
76323: PUSH
76324: LD_INT 36
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: LIST
76331: LIST
76332: LIST
76333: LIST
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 101
76343: PUSH
76344: LD_INT 102
76346: PUSH
76347: LD_INT 105
76349: PUSH
76350: LD_INT 106
76352: PUSH
76353: LD_INT 108
76355: PUSH
76356: LD_INT 116
76358: PUSH
76359: LD_INT 117
76361: PUSH
76362: LD_INT 118
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: LIST
76369: LIST
76370: LIST
76371: LIST
76372: LIST
76373: LIST
76374: PUSH
76375: EMPTY
76376: LIST
76377: LIST
76378: ST_TO_ADDR
76379: GO 79162
76381: LD_INT 5
76383: DOUBLE
76384: EQUAL
76385: IFTRUE 76389
76387: GO 76501
76389: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
76390: LD_ADDR_VAR 0 2
76394: PUSH
76395: LD_INT 2
76397: PUSH
76398: LD_INT 4
76400: PUSH
76401: LD_INT 5
76403: PUSH
76404: LD_INT 6
76406: PUSH
76407: LD_INT 8
76409: PUSH
76410: LD_INT 11
76412: PUSH
76413: LD_INT 12
76415: PUSH
76416: LD_INT 15
76418: PUSH
76419: LD_INT 16
76421: PUSH
76422: LD_INT 22
76424: PUSH
76425: LD_INT 23
76427: PUSH
76428: LD_INT 25
76430: PUSH
76431: LD_INT 26
76433: PUSH
76434: LD_INT 36
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: PUSH
76453: LD_INT 101
76455: PUSH
76456: LD_INT 102
76458: PUSH
76459: LD_INT 105
76461: PUSH
76462: LD_INT 106
76464: PUSH
76465: LD_INT 108
76467: PUSH
76468: LD_INT 109
76470: PUSH
76471: LD_INT 112
76473: PUSH
76474: LD_INT 116
76476: PUSH
76477: LD_INT 117
76479: PUSH
76480: LD_INT 118
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: ST_TO_ADDR
76499: GO 79162
76501: LD_INT 6
76503: DOUBLE
76504: EQUAL
76505: IFTRUE 76509
76507: GO 76641
76509: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
76510: LD_ADDR_VAR 0 2
76514: PUSH
76515: LD_INT 2
76517: PUSH
76518: LD_INT 4
76520: PUSH
76521: LD_INT 5
76523: PUSH
76524: LD_INT 6
76526: PUSH
76527: LD_INT 8
76529: PUSH
76530: LD_INT 11
76532: PUSH
76533: LD_INT 12
76535: PUSH
76536: LD_INT 15
76538: PUSH
76539: LD_INT 16
76541: PUSH
76542: LD_INT 20
76544: PUSH
76545: LD_INT 21
76547: PUSH
76548: LD_INT 22
76550: PUSH
76551: LD_INT 23
76553: PUSH
76554: LD_INT 25
76556: PUSH
76557: LD_INT 26
76559: PUSH
76560: LD_INT 30
76562: PUSH
76563: LD_INT 31
76565: PUSH
76566: LD_INT 32
76568: PUSH
76569: LD_INT 36
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: LIST
76576: LIST
76577: LIST
76578: LIST
76579: LIST
76580: LIST
76581: LIST
76582: LIST
76583: LIST
76584: LIST
76585: LIST
76586: LIST
76587: LIST
76588: LIST
76589: LIST
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 101
76595: PUSH
76596: LD_INT 102
76598: PUSH
76599: LD_INT 105
76601: PUSH
76602: LD_INT 106
76604: PUSH
76605: LD_INT 108
76607: PUSH
76608: LD_INT 109
76610: PUSH
76611: LD_INT 112
76613: PUSH
76614: LD_INT 116
76616: PUSH
76617: LD_INT 117
76619: PUSH
76620: LD_INT 118
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: ST_TO_ADDR
76639: GO 79162
76641: LD_INT 7
76643: DOUBLE
76644: EQUAL
76645: IFTRUE 76649
76647: GO 76761
76649: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
76650: LD_ADDR_VAR 0 2
76654: PUSH
76655: LD_INT 2
76657: PUSH
76658: LD_INT 4
76660: PUSH
76661: LD_INT 5
76663: PUSH
76664: LD_INT 7
76666: PUSH
76667: LD_INT 11
76669: PUSH
76670: LD_INT 12
76672: PUSH
76673: LD_INT 15
76675: PUSH
76676: LD_INT 16
76678: PUSH
76679: LD_INT 20
76681: PUSH
76682: LD_INT 21
76684: PUSH
76685: LD_INT 22
76687: PUSH
76688: LD_INT 23
76690: PUSH
76691: LD_INT 25
76693: PUSH
76694: LD_INT 26
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: PUSH
76713: LD_INT 101
76715: PUSH
76716: LD_INT 102
76718: PUSH
76719: LD_INT 103
76721: PUSH
76722: LD_INT 105
76724: PUSH
76725: LD_INT 106
76727: PUSH
76728: LD_INT 108
76730: PUSH
76731: LD_INT 112
76733: PUSH
76734: LD_INT 116
76736: PUSH
76737: LD_INT 117
76739: PUSH
76740: LD_INT 118
76742: PUSH
76743: EMPTY
76744: LIST
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: ST_TO_ADDR
76759: GO 79162
76761: LD_INT 8
76763: DOUBLE
76764: EQUAL
76765: IFTRUE 76769
76767: GO 76909
76769: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
76770: LD_ADDR_VAR 0 2
76774: PUSH
76775: LD_INT 2
76777: PUSH
76778: LD_INT 4
76780: PUSH
76781: LD_INT 5
76783: PUSH
76784: LD_INT 6
76786: PUSH
76787: LD_INT 7
76789: PUSH
76790: LD_INT 8
76792: PUSH
76793: LD_INT 11
76795: PUSH
76796: LD_INT 12
76798: PUSH
76799: LD_INT 15
76801: PUSH
76802: LD_INT 16
76804: PUSH
76805: LD_INT 20
76807: PUSH
76808: LD_INT 21
76810: PUSH
76811: LD_INT 22
76813: PUSH
76814: LD_INT 23
76816: PUSH
76817: LD_INT 25
76819: PUSH
76820: LD_INT 26
76822: PUSH
76823: LD_INT 30
76825: PUSH
76826: LD_INT 31
76828: PUSH
76829: LD_INT 32
76831: PUSH
76832: LD_INT 36
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: LIST
76839: LIST
76840: LIST
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 101
76859: PUSH
76860: LD_INT 102
76862: PUSH
76863: LD_INT 103
76865: PUSH
76866: LD_INT 105
76868: PUSH
76869: LD_INT 106
76871: PUSH
76872: LD_INT 108
76874: PUSH
76875: LD_INT 109
76877: PUSH
76878: LD_INT 112
76880: PUSH
76881: LD_INT 116
76883: PUSH
76884: LD_INT 117
76886: PUSH
76887: LD_INT 118
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: LIST
76894: LIST
76895: LIST
76896: LIST
76897: LIST
76898: LIST
76899: LIST
76900: LIST
76901: LIST
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: ST_TO_ADDR
76907: GO 79162
76909: LD_INT 9
76911: DOUBLE
76912: EQUAL
76913: IFTRUE 76917
76915: GO 77065
76917: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
76918: LD_ADDR_VAR 0 2
76922: PUSH
76923: LD_INT 2
76925: PUSH
76926: LD_INT 4
76928: PUSH
76929: LD_INT 5
76931: PUSH
76932: LD_INT 6
76934: PUSH
76935: LD_INT 7
76937: PUSH
76938: LD_INT 8
76940: PUSH
76941: LD_INT 11
76943: PUSH
76944: LD_INT 12
76946: PUSH
76947: LD_INT 15
76949: PUSH
76950: LD_INT 16
76952: PUSH
76953: LD_INT 20
76955: PUSH
76956: LD_INT 21
76958: PUSH
76959: LD_INT 22
76961: PUSH
76962: LD_INT 23
76964: PUSH
76965: LD_INT 25
76967: PUSH
76968: LD_INT 26
76970: PUSH
76971: LD_INT 28
76973: PUSH
76974: LD_INT 30
76976: PUSH
76977: LD_INT 31
76979: PUSH
76980: LD_INT 32
76982: PUSH
76983: LD_INT 36
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: PUSH
77009: LD_INT 101
77011: PUSH
77012: LD_INT 102
77014: PUSH
77015: LD_INT 103
77017: PUSH
77018: LD_INT 105
77020: PUSH
77021: LD_INT 106
77023: PUSH
77024: LD_INT 108
77026: PUSH
77027: LD_INT 109
77029: PUSH
77030: LD_INT 112
77032: PUSH
77033: LD_INT 114
77035: PUSH
77036: LD_INT 116
77038: PUSH
77039: LD_INT 117
77041: PUSH
77042: LD_INT 118
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: PUSH
77059: EMPTY
77060: LIST
77061: LIST
77062: ST_TO_ADDR
77063: GO 79162
77065: LD_INT 10
77067: DOUBLE
77068: EQUAL
77069: IFTRUE 77073
77071: GO 77269
77073: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
77074: LD_ADDR_VAR 0 2
77078: PUSH
77079: LD_INT 2
77081: PUSH
77082: LD_INT 4
77084: PUSH
77085: LD_INT 5
77087: PUSH
77088: LD_INT 6
77090: PUSH
77091: LD_INT 7
77093: PUSH
77094: LD_INT 8
77096: PUSH
77097: LD_INT 9
77099: PUSH
77100: LD_INT 10
77102: PUSH
77103: LD_INT 11
77105: PUSH
77106: LD_INT 12
77108: PUSH
77109: LD_INT 13
77111: PUSH
77112: LD_INT 14
77114: PUSH
77115: LD_INT 15
77117: PUSH
77118: LD_INT 16
77120: PUSH
77121: LD_INT 17
77123: PUSH
77124: LD_INT 18
77126: PUSH
77127: LD_INT 19
77129: PUSH
77130: LD_INT 20
77132: PUSH
77133: LD_INT 21
77135: PUSH
77136: LD_INT 22
77138: PUSH
77139: LD_INT 23
77141: PUSH
77142: LD_INT 24
77144: PUSH
77145: LD_INT 25
77147: PUSH
77148: LD_INT 26
77150: PUSH
77151: LD_INT 28
77153: PUSH
77154: LD_INT 30
77156: PUSH
77157: LD_INT 31
77159: PUSH
77160: LD_INT 32
77162: PUSH
77163: LD_INT 36
77165: PUSH
77166: EMPTY
77167: LIST
77168: LIST
77169: LIST
77170: LIST
77171: LIST
77172: LIST
77173: LIST
77174: LIST
77175: LIST
77176: LIST
77177: LIST
77178: LIST
77179: LIST
77180: LIST
77181: LIST
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: PUSH
77197: LD_INT 101
77199: PUSH
77200: LD_INT 102
77202: PUSH
77203: LD_INT 103
77205: PUSH
77206: LD_INT 104
77208: PUSH
77209: LD_INT 105
77211: PUSH
77212: LD_INT 106
77214: PUSH
77215: LD_INT 107
77217: PUSH
77218: LD_INT 108
77220: PUSH
77221: LD_INT 109
77223: PUSH
77224: LD_INT 110
77226: PUSH
77227: LD_INT 111
77229: PUSH
77230: LD_INT 112
77232: PUSH
77233: LD_INT 114
77235: PUSH
77236: LD_INT 116
77238: PUSH
77239: LD_INT 117
77241: PUSH
77242: LD_INT 118
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: LIST
77249: LIST
77250: LIST
77251: LIST
77252: LIST
77253: LIST
77254: LIST
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: ST_TO_ADDR
77267: GO 79162
77269: LD_INT 11
77271: DOUBLE
77272: EQUAL
77273: IFTRUE 77277
77275: GO 77481
77277: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
77278: LD_ADDR_VAR 0 2
77282: PUSH
77283: LD_INT 2
77285: PUSH
77286: LD_INT 3
77288: PUSH
77289: LD_INT 4
77291: PUSH
77292: LD_INT 5
77294: PUSH
77295: LD_INT 6
77297: PUSH
77298: LD_INT 7
77300: PUSH
77301: LD_INT 8
77303: PUSH
77304: LD_INT 9
77306: PUSH
77307: LD_INT 10
77309: PUSH
77310: LD_INT 11
77312: PUSH
77313: LD_INT 12
77315: PUSH
77316: LD_INT 13
77318: PUSH
77319: LD_INT 14
77321: PUSH
77322: LD_INT 15
77324: PUSH
77325: LD_INT 16
77327: PUSH
77328: LD_INT 17
77330: PUSH
77331: LD_INT 18
77333: PUSH
77334: LD_INT 19
77336: PUSH
77337: LD_INT 20
77339: PUSH
77340: LD_INT 21
77342: PUSH
77343: LD_INT 22
77345: PUSH
77346: LD_INT 23
77348: PUSH
77349: LD_INT 24
77351: PUSH
77352: LD_INT 25
77354: PUSH
77355: LD_INT 26
77357: PUSH
77358: LD_INT 28
77360: PUSH
77361: LD_INT 30
77363: PUSH
77364: LD_INT 31
77366: PUSH
77367: LD_INT 32
77369: PUSH
77370: LD_INT 34
77372: PUSH
77373: LD_INT 36
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: PUSH
77409: LD_INT 101
77411: PUSH
77412: LD_INT 102
77414: PUSH
77415: LD_INT 103
77417: PUSH
77418: LD_INT 104
77420: PUSH
77421: LD_INT 105
77423: PUSH
77424: LD_INT 106
77426: PUSH
77427: LD_INT 107
77429: PUSH
77430: LD_INT 108
77432: PUSH
77433: LD_INT 109
77435: PUSH
77436: LD_INT 110
77438: PUSH
77439: LD_INT 111
77441: PUSH
77442: LD_INT 112
77444: PUSH
77445: LD_INT 114
77447: PUSH
77448: LD_INT 116
77450: PUSH
77451: LD_INT 117
77453: PUSH
77454: LD_INT 118
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: LIST
77473: LIST
77474: PUSH
77475: EMPTY
77476: LIST
77477: LIST
77478: ST_TO_ADDR
77479: GO 79162
77481: LD_INT 12
77483: DOUBLE
77484: EQUAL
77485: IFTRUE 77489
77487: GO 77709
77489: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
77490: LD_ADDR_VAR 0 2
77494: PUSH
77495: LD_INT 1
77497: PUSH
77498: LD_INT 2
77500: PUSH
77501: LD_INT 3
77503: PUSH
77504: LD_INT 4
77506: PUSH
77507: LD_INT 5
77509: PUSH
77510: LD_INT 6
77512: PUSH
77513: LD_INT 7
77515: PUSH
77516: LD_INT 8
77518: PUSH
77519: LD_INT 9
77521: PUSH
77522: LD_INT 10
77524: PUSH
77525: LD_INT 11
77527: PUSH
77528: LD_INT 12
77530: PUSH
77531: LD_INT 13
77533: PUSH
77534: LD_INT 14
77536: PUSH
77537: LD_INT 15
77539: PUSH
77540: LD_INT 16
77542: PUSH
77543: LD_INT 17
77545: PUSH
77546: LD_INT 18
77548: PUSH
77549: LD_INT 19
77551: PUSH
77552: LD_INT 20
77554: PUSH
77555: LD_INT 21
77557: PUSH
77558: LD_INT 22
77560: PUSH
77561: LD_INT 23
77563: PUSH
77564: LD_INT 24
77566: PUSH
77567: LD_INT 25
77569: PUSH
77570: LD_INT 26
77572: PUSH
77573: LD_INT 27
77575: PUSH
77576: LD_INT 28
77578: PUSH
77579: LD_INT 30
77581: PUSH
77582: LD_INT 31
77584: PUSH
77585: LD_INT 32
77587: PUSH
77588: LD_INT 33
77590: PUSH
77591: LD_INT 34
77593: PUSH
77594: LD_INT 36
77596: PUSH
77597: EMPTY
77598: LIST
77599: LIST
77600: LIST
77601: LIST
77602: LIST
77603: LIST
77604: LIST
77605: LIST
77606: LIST
77607: LIST
77608: LIST
77609: LIST
77610: LIST
77611: LIST
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: LIST
77622: LIST
77623: LIST
77624: LIST
77625: LIST
77626: LIST
77627: LIST
77628: LIST
77629: LIST
77630: LIST
77631: LIST
77632: PUSH
77633: LD_INT 101
77635: PUSH
77636: LD_INT 102
77638: PUSH
77639: LD_INT 103
77641: PUSH
77642: LD_INT 104
77644: PUSH
77645: LD_INT 105
77647: PUSH
77648: LD_INT 106
77650: PUSH
77651: LD_INT 107
77653: PUSH
77654: LD_INT 108
77656: PUSH
77657: LD_INT 109
77659: PUSH
77660: LD_INT 110
77662: PUSH
77663: LD_INT 111
77665: PUSH
77666: LD_INT 112
77668: PUSH
77669: LD_INT 113
77671: PUSH
77672: LD_INT 114
77674: PUSH
77675: LD_INT 116
77677: PUSH
77678: LD_INT 117
77680: PUSH
77681: LD_INT 118
77683: PUSH
77684: EMPTY
77685: LIST
77686: LIST
77687: LIST
77688: LIST
77689: LIST
77690: LIST
77691: LIST
77692: LIST
77693: LIST
77694: LIST
77695: LIST
77696: LIST
77697: LIST
77698: LIST
77699: LIST
77700: LIST
77701: LIST
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: ST_TO_ADDR
77707: GO 79162
77709: LD_INT 13
77711: DOUBLE
77712: EQUAL
77713: IFTRUE 77717
77715: GO 77925
77717: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
77718: LD_ADDR_VAR 0 2
77722: PUSH
77723: LD_INT 1
77725: PUSH
77726: LD_INT 2
77728: PUSH
77729: LD_INT 3
77731: PUSH
77732: LD_INT 4
77734: PUSH
77735: LD_INT 5
77737: PUSH
77738: LD_INT 8
77740: PUSH
77741: LD_INT 9
77743: PUSH
77744: LD_INT 10
77746: PUSH
77747: LD_INT 11
77749: PUSH
77750: LD_INT 12
77752: PUSH
77753: LD_INT 14
77755: PUSH
77756: LD_INT 15
77758: PUSH
77759: LD_INT 16
77761: PUSH
77762: LD_INT 17
77764: PUSH
77765: LD_INT 18
77767: PUSH
77768: LD_INT 19
77770: PUSH
77771: LD_INT 20
77773: PUSH
77774: LD_INT 21
77776: PUSH
77777: LD_INT 22
77779: PUSH
77780: LD_INT 23
77782: PUSH
77783: LD_INT 24
77785: PUSH
77786: LD_INT 25
77788: PUSH
77789: LD_INT 26
77791: PUSH
77792: LD_INT 27
77794: PUSH
77795: LD_INT 28
77797: PUSH
77798: LD_INT 30
77800: PUSH
77801: LD_INT 31
77803: PUSH
77804: LD_INT 32
77806: PUSH
77807: LD_INT 33
77809: PUSH
77810: LD_INT 34
77812: PUSH
77813: LD_INT 36
77815: PUSH
77816: EMPTY
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: LIST
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: PUSH
77849: LD_INT 101
77851: PUSH
77852: LD_INT 102
77854: PUSH
77855: LD_INT 103
77857: PUSH
77858: LD_INT 104
77860: PUSH
77861: LD_INT 105
77863: PUSH
77864: LD_INT 106
77866: PUSH
77867: LD_INT 107
77869: PUSH
77870: LD_INT 108
77872: PUSH
77873: LD_INT 109
77875: PUSH
77876: LD_INT 110
77878: PUSH
77879: LD_INT 111
77881: PUSH
77882: LD_INT 112
77884: PUSH
77885: LD_INT 113
77887: PUSH
77888: LD_INT 114
77890: PUSH
77891: LD_INT 116
77893: PUSH
77894: LD_INT 117
77896: PUSH
77897: LD_INT 118
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: LIST
77904: LIST
77905: LIST
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: LIST
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: LIST
77918: PUSH
77919: EMPTY
77920: LIST
77921: LIST
77922: ST_TO_ADDR
77923: GO 79162
77925: LD_INT 14
77927: DOUBLE
77928: EQUAL
77929: IFTRUE 77933
77931: GO 78157
77933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
77934: LD_ADDR_VAR 0 2
77938: PUSH
77939: LD_INT 1
77941: PUSH
77942: LD_INT 2
77944: PUSH
77945: LD_INT 3
77947: PUSH
77948: LD_INT 4
77950: PUSH
77951: LD_INT 5
77953: PUSH
77954: LD_INT 6
77956: PUSH
77957: LD_INT 7
77959: PUSH
77960: LD_INT 8
77962: PUSH
77963: LD_INT 9
77965: PUSH
77966: LD_INT 10
77968: PUSH
77969: LD_INT 11
77971: PUSH
77972: LD_INT 12
77974: PUSH
77975: LD_INT 13
77977: PUSH
77978: LD_INT 14
77980: PUSH
77981: LD_INT 15
77983: PUSH
77984: LD_INT 16
77986: PUSH
77987: LD_INT 17
77989: PUSH
77990: LD_INT 18
77992: PUSH
77993: LD_INT 19
77995: PUSH
77996: LD_INT 20
77998: PUSH
77999: LD_INT 21
78001: PUSH
78002: LD_INT 22
78004: PUSH
78005: LD_INT 23
78007: PUSH
78008: LD_INT 24
78010: PUSH
78011: LD_INT 25
78013: PUSH
78014: LD_INT 26
78016: PUSH
78017: LD_INT 27
78019: PUSH
78020: LD_INT 28
78022: PUSH
78023: LD_INT 29
78025: PUSH
78026: LD_INT 30
78028: PUSH
78029: LD_INT 31
78031: PUSH
78032: LD_INT 32
78034: PUSH
78035: LD_INT 33
78037: PUSH
78038: LD_INT 34
78040: PUSH
78041: LD_INT 36
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: LIST
78048: LIST
78049: LIST
78050: LIST
78051: LIST
78052: LIST
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: LIST
78077: LIST
78078: LIST
78079: LIST
78080: PUSH
78081: LD_INT 101
78083: PUSH
78084: LD_INT 102
78086: PUSH
78087: LD_INT 103
78089: PUSH
78090: LD_INT 104
78092: PUSH
78093: LD_INT 105
78095: PUSH
78096: LD_INT 106
78098: PUSH
78099: LD_INT 107
78101: PUSH
78102: LD_INT 108
78104: PUSH
78105: LD_INT 109
78107: PUSH
78108: LD_INT 110
78110: PUSH
78111: LD_INT 111
78113: PUSH
78114: LD_INT 112
78116: PUSH
78117: LD_INT 113
78119: PUSH
78120: LD_INT 114
78122: PUSH
78123: LD_INT 116
78125: PUSH
78126: LD_INT 117
78128: PUSH
78129: LD_INT 118
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: ST_TO_ADDR
78155: GO 79162
78157: LD_INT 15
78159: DOUBLE
78160: EQUAL
78161: IFTRUE 78165
78163: GO 78389
78165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
78166: LD_ADDR_VAR 0 2
78170: PUSH
78171: LD_INT 1
78173: PUSH
78174: LD_INT 2
78176: PUSH
78177: LD_INT 3
78179: PUSH
78180: LD_INT 4
78182: PUSH
78183: LD_INT 5
78185: PUSH
78186: LD_INT 6
78188: PUSH
78189: LD_INT 7
78191: PUSH
78192: LD_INT 8
78194: PUSH
78195: LD_INT 9
78197: PUSH
78198: LD_INT 10
78200: PUSH
78201: LD_INT 11
78203: PUSH
78204: LD_INT 12
78206: PUSH
78207: LD_INT 13
78209: PUSH
78210: LD_INT 14
78212: PUSH
78213: LD_INT 15
78215: PUSH
78216: LD_INT 16
78218: PUSH
78219: LD_INT 17
78221: PUSH
78222: LD_INT 18
78224: PUSH
78225: LD_INT 19
78227: PUSH
78228: LD_INT 20
78230: PUSH
78231: LD_INT 21
78233: PUSH
78234: LD_INT 22
78236: PUSH
78237: LD_INT 23
78239: PUSH
78240: LD_INT 24
78242: PUSH
78243: LD_INT 25
78245: PUSH
78246: LD_INT 26
78248: PUSH
78249: LD_INT 27
78251: PUSH
78252: LD_INT 28
78254: PUSH
78255: LD_INT 29
78257: PUSH
78258: LD_INT 30
78260: PUSH
78261: LD_INT 31
78263: PUSH
78264: LD_INT 32
78266: PUSH
78267: LD_INT 33
78269: PUSH
78270: LD_INT 34
78272: PUSH
78273: LD_INT 36
78275: PUSH
78276: EMPTY
78277: LIST
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: LIST
78286: LIST
78287: LIST
78288: LIST
78289: LIST
78290: LIST
78291: LIST
78292: LIST
78293: LIST
78294: LIST
78295: LIST
78296: LIST
78297: LIST
78298: LIST
78299: LIST
78300: LIST
78301: LIST
78302: LIST
78303: LIST
78304: LIST
78305: LIST
78306: LIST
78307: LIST
78308: LIST
78309: LIST
78310: LIST
78311: LIST
78312: PUSH
78313: LD_INT 101
78315: PUSH
78316: LD_INT 102
78318: PUSH
78319: LD_INT 103
78321: PUSH
78322: LD_INT 104
78324: PUSH
78325: LD_INT 105
78327: PUSH
78328: LD_INT 106
78330: PUSH
78331: LD_INT 107
78333: PUSH
78334: LD_INT 108
78336: PUSH
78337: LD_INT 109
78339: PUSH
78340: LD_INT 110
78342: PUSH
78343: LD_INT 111
78345: PUSH
78346: LD_INT 112
78348: PUSH
78349: LD_INT 113
78351: PUSH
78352: LD_INT 114
78354: PUSH
78355: LD_INT 116
78357: PUSH
78358: LD_INT 117
78360: PUSH
78361: LD_INT 118
78363: PUSH
78364: EMPTY
78365: LIST
78366: LIST
78367: LIST
78368: LIST
78369: LIST
78370: LIST
78371: LIST
78372: LIST
78373: LIST
78374: LIST
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: LIST
78380: LIST
78381: LIST
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: ST_TO_ADDR
78387: GO 79162
78389: LD_INT 16
78391: DOUBLE
78392: EQUAL
78393: IFTRUE 78397
78395: GO 78533
78397: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
78398: LD_ADDR_VAR 0 2
78402: PUSH
78403: LD_INT 2
78405: PUSH
78406: LD_INT 4
78408: PUSH
78409: LD_INT 5
78411: PUSH
78412: LD_INT 7
78414: PUSH
78415: LD_INT 11
78417: PUSH
78418: LD_INT 12
78420: PUSH
78421: LD_INT 15
78423: PUSH
78424: LD_INT 16
78426: PUSH
78427: LD_INT 20
78429: PUSH
78430: LD_INT 21
78432: PUSH
78433: LD_INT 22
78435: PUSH
78436: LD_INT 23
78438: PUSH
78439: LD_INT 25
78441: PUSH
78442: LD_INT 26
78444: PUSH
78445: LD_INT 30
78447: PUSH
78448: LD_INT 31
78450: PUSH
78451: LD_INT 32
78453: PUSH
78454: LD_INT 33
78456: PUSH
78457: LD_INT 34
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: LIST
78464: LIST
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: LIST
78470: LIST
78471: LIST
78472: LIST
78473: LIST
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: LIST
78480: PUSH
78481: LD_INT 101
78483: PUSH
78484: LD_INT 102
78486: PUSH
78487: LD_INT 103
78489: PUSH
78490: LD_INT 106
78492: PUSH
78493: LD_INT 108
78495: PUSH
78496: LD_INT 112
78498: PUSH
78499: LD_INT 113
78501: PUSH
78502: LD_INT 114
78504: PUSH
78505: LD_INT 116
78507: PUSH
78508: LD_INT 117
78510: PUSH
78511: LD_INT 118
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: LIST
78518: LIST
78519: LIST
78520: LIST
78521: LIST
78522: LIST
78523: LIST
78524: LIST
78525: LIST
78526: PUSH
78527: EMPTY
78528: LIST
78529: LIST
78530: ST_TO_ADDR
78531: GO 79162
78533: LD_INT 17
78535: DOUBLE
78536: EQUAL
78537: IFTRUE 78541
78539: GO 78765
78541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
78542: LD_ADDR_VAR 0 2
78546: PUSH
78547: LD_INT 1
78549: PUSH
78550: LD_INT 2
78552: PUSH
78553: LD_INT 3
78555: PUSH
78556: LD_INT 4
78558: PUSH
78559: LD_INT 5
78561: PUSH
78562: LD_INT 6
78564: PUSH
78565: LD_INT 7
78567: PUSH
78568: LD_INT 8
78570: PUSH
78571: LD_INT 9
78573: PUSH
78574: LD_INT 10
78576: PUSH
78577: LD_INT 11
78579: PUSH
78580: LD_INT 12
78582: PUSH
78583: LD_INT 13
78585: PUSH
78586: LD_INT 14
78588: PUSH
78589: LD_INT 15
78591: PUSH
78592: LD_INT 16
78594: PUSH
78595: LD_INT 17
78597: PUSH
78598: LD_INT 18
78600: PUSH
78601: LD_INT 19
78603: PUSH
78604: LD_INT 20
78606: PUSH
78607: LD_INT 21
78609: PUSH
78610: LD_INT 22
78612: PUSH
78613: LD_INT 23
78615: PUSH
78616: LD_INT 24
78618: PUSH
78619: LD_INT 25
78621: PUSH
78622: LD_INT 26
78624: PUSH
78625: LD_INT 27
78627: PUSH
78628: LD_INT 28
78630: PUSH
78631: LD_INT 29
78633: PUSH
78634: LD_INT 30
78636: PUSH
78637: LD_INT 31
78639: PUSH
78640: LD_INT 32
78642: PUSH
78643: LD_INT 33
78645: PUSH
78646: LD_INT 34
78648: PUSH
78649: LD_INT 36
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: LIST
78656: LIST
78657: LIST
78658: LIST
78659: LIST
78660: LIST
78661: LIST
78662: LIST
78663: LIST
78664: LIST
78665: LIST
78666: LIST
78667: LIST
78668: LIST
78669: LIST
78670: LIST
78671: LIST
78672: LIST
78673: LIST
78674: LIST
78675: LIST
78676: LIST
78677: LIST
78678: LIST
78679: LIST
78680: LIST
78681: LIST
78682: LIST
78683: LIST
78684: LIST
78685: LIST
78686: LIST
78687: LIST
78688: PUSH
78689: LD_INT 101
78691: PUSH
78692: LD_INT 102
78694: PUSH
78695: LD_INT 103
78697: PUSH
78698: LD_INT 104
78700: PUSH
78701: LD_INT 105
78703: PUSH
78704: LD_INT 106
78706: PUSH
78707: LD_INT 107
78709: PUSH
78710: LD_INT 108
78712: PUSH
78713: LD_INT 109
78715: PUSH
78716: LD_INT 110
78718: PUSH
78719: LD_INT 111
78721: PUSH
78722: LD_INT 112
78724: PUSH
78725: LD_INT 113
78727: PUSH
78728: LD_INT 114
78730: PUSH
78731: LD_INT 116
78733: PUSH
78734: LD_INT 117
78736: PUSH
78737: LD_INT 118
78739: PUSH
78740: EMPTY
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: LIST
78756: LIST
78757: LIST
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: ST_TO_ADDR
78763: GO 79162
78765: LD_INT 18
78767: DOUBLE
78768: EQUAL
78769: IFTRUE 78773
78771: GO 78921
78773: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
78774: LD_ADDR_VAR 0 2
78778: PUSH
78779: LD_INT 2
78781: PUSH
78782: LD_INT 4
78784: PUSH
78785: LD_INT 5
78787: PUSH
78788: LD_INT 7
78790: PUSH
78791: LD_INT 11
78793: PUSH
78794: LD_INT 12
78796: PUSH
78797: LD_INT 15
78799: PUSH
78800: LD_INT 16
78802: PUSH
78803: LD_INT 20
78805: PUSH
78806: LD_INT 21
78808: PUSH
78809: LD_INT 22
78811: PUSH
78812: LD_INT 23
78814: PUSH
78815: LD_INT 25
78817: PUSH
78818: LD_INT 26
78820: PUSH
78821: LD_INT 30
78823: PUSH
78824: LD_INT 31
78826: PUSH
78827: LD_INT 32
78829: PUSH
78830: LD_INT 33
78832: PUSH
78833: LD_INT 34
78835: PUSH
78836: LD_INT 35
78838: PUSH
78839: LD_INT 36
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: LIST
78849: LIST
78850: LIST
78851: LIST
78852: LIST
78853: LIST
78854: LIST
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: LIST
78860: LIST
78861: LIST
78862: LIST
78863: LIST
78864: PUSH
78865: LD_INT 101
78867: PUSH
78868: LD_INT 102
78870: PUSH
78871: LD_INT 103
78873: PUSH
78874: LD_INT 106
78876: PUSH
78877: LD_INT 108
78879: PUSH
78880: LD_INT 112
78882: PUSH
78883: LD_INT 113
78885: PUSH
78886: LD_INT 114
78888: PUSH
78889: LD_INT 115
78891: PUSH
78892: LD_INT 116
78894: PUSH
78895: LD_INT 117
78897: PUSH
78898: LD_INT 118
78900: PUSH
78901: EMPTY
78902: LIST
78903: LIST
78904: LIST
78905: LIST
78906: LIST
78907: LIST
78908: LIST
78909: LIST
78910: LIST
78911: LIST
78912: LIST
78913: LIST
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: ST_TO_ADDR
78919: GO 79162
78921: LD_INT 19
78923: DOUBLE
78924: EQUAL
78925: IFTRUE 78929
78927: GO 79161
78929: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
78930: LD_ADDR_VAR 0 2
78934: PUSH
78935: LD_INT 1
78937: PUSH
78938: LD_INT 2
78940: PUSH
78941: LD_INT 3
78943: PUSH
78944: LD_INT 4
78946: PUSH
78947: LD_INT 5
78949: PUSH
78950: LD_INT 6
78952: PUSH
78953: LD_INT 7
78955: PUSH
78956: LD_INT 8
78958: PUSH
78959: LD_INT 9
78961: PUSH
78962: LD_INT 10
78964: PUSH
78965: LD_INT 11
78967: PUSH
78968: LD_INT 12
78970: PUSH
78971: LD_INT 13
78973: PUSH
78974: LD_INT 14
78976: PUSH
78977: LD_INT 15
78979: PUSH
78980: LD_INT 16
78982: PUSH
78983: LD_INT 17
78985: PUSH
78986: LD_INT 18
78988: PUSH
78989: LD_INT 19
78991: PUSH
78992: LD_INT 20
78994: PUSH
78995: LD_INT 21
78997: PUSH
78998: LD_INT 22
79000: PUSH
79001: LD_INT 23
79003: PUSH
79004: LD_INT 24
79006: PUSH
79007: LD_INT 25
79009: PUSH
79010: LD_INT 26
79012: PUSH
79013: LD_INT 27
79015: PUSH
79016: LD_INT 28
79018: PUSH
79019: LD_INT 29
79021: PUSH
79022: LD_INT 30
79024: PUSH
79025: LD_INT 31
79027: PUSH
79028: LD_INT 32
79030: PUSH
79031: LD_INT 33
79033: PUSH
79034: LD_INT 34
79036: PUSH
79037: LD_INT 35
79039: PUSH
79040: LD_INT 36
79042: PUSH
79043: EMPTY
79044: LIST
79045: LIST
79046: LIST
79047: LIST
79048: LIST
79049: LIST
79050: LIST
79051: LIST
79052: LIST
79053: LIST
79054: LIST
79055: LIST
79056: LIST
79057: LIST
79058: LIST
79059: LIST
79060: LIST
79061: LIST
79062: LIST
79063: LIST
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: PUSH
79081: LD_INT 101
79083: PUSH
79084: LD_INT 102
79086: PUSH
79087: LD_INT 103
79089: PUSH
79090: LD_INT 104
79092: PUSH
79093: LD_INT 105
79095: PUSH
79096: LD_INT 106
79098: PUSH
79099: LD_INT 107
79101: PUSH
79102: LD_INT 108
79104: PUSH
79105: LD_INT 109
79107: PUSH
79108: LD_INT 110
79110: PUSH
79111: LD_INT 111
79113: PUSH
79114: LD_INT 112
79116: PUSH
79117: LD_INT 113
79119: PUSH
79120: LD_INT 114
79122: PUSH
79123: LD_INT 115
79125: PUSH
79126: LD_INT 116
79128: PUSH
79129: LD_INT 117
79131: PUSH
79132: LD_INT 118
79134: PUSH
79135: EMPTY
79136: LIST
79137: LIST
79138: LIST
79139: LIST
79140: LIST
79141: LIST
79142: LIST
79143: LIST
79144: LIST
79145: LIST
79146: LIST
79147: LIST
79148: LIST
79149: LIST
79150: LIST
79151: LIST
79152: LIST
79153: LIST
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: ST_TO_ADDR
79159: GO 79162
79161: POP
// end else
79162: GO 79393
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
79164: LD_ADDR_VAR 0 2
79168: PUSH
79169: LD_INT 1
79171: PUSH
79172: LD_INT 2
79174: PUSH
79175: LD_INT 3
79177: PUSH
79178: LD_INT 4
79180: PUSH
79181: LD_INT 5
79183: PUSH
79184: LD_INT 6
79186: PUSH
79187: LD_INT 7
79189: PUSH
79190: LD_INT 8
79192: PUSH
79193: LD_INT 9
79195: PUSH
79196: LD_INT 10
79198: PUSH
79199: LD_INT 11
79201: PUSH
79202: LD_INT 12
79204: PUSH
79205: LD_INT 13
79207: PUSH
79208: LD_INT 14
79210: PUSH
79211: LD_INT 15
79213: PUSH
79214: LD_INT 16
79216: PUSH
79217: LD_INT 17
79219: PUSH
79220: LD_INT 18
79222: PUSH
79223: LD_INT 19
79225: PUSH
79226: LD_INT 20
79228: PUSH
79229: LD_INT 21
79231: PUSH
79232: LD_INT 22
79234: PUSH
79235: LD_INT 23
79237: PUSH
79238: LD_INT 24
79240: PUSH
79241: LD_INT 25
79243: PUSH
79244: LD_INT 26
79246: PUSH
79247: LD_INT 27
79249: PUSH
79250: LD_INT 28
79252: PUSH
79253: LD_INT 29
79255: PUSH
79256: LD_INT 30
79258: PUSH
79259: LD_INT 31
79261: PUSH
79262: LD_INT 32
79264: PUSH
79265: LD_INT 33
79267: PUSH
79268: LD_INT 34
79270: PUSH
79271: LD_INT 35
79273: PUSH
79274: LD_INT 36
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: LIST
79281: LIST
79282: LIST
79283: LIST
79284: LIST
79285: LIST
79286: LIST
79287: LIST
79288: LIST
79289: LIST
79290: LIST
79291: LIST
79292: LIST
79293: LIST
79294: LIST
79295: LIST
79296: LIST
79297: LIST
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: PUSH
79315: LD_INT 101
79317: PUSH
79318: LD_INT 102
79320: PUSH
79321: LD_INT 103
79323: PUSH
79324: LD_INT 104
79326: PUSH
79327: LD_INT 105
79329: PUSH
79330: LD_INT 106
79332: PUSH
79333: LD_INT 107
79335: PUSH
79336: LD_INT 108
79338: PUSH
79339: LD_INT 109
79341: PUSH
79342: LD_INT 110
79344: PUSH
79345: LD_INT 111
79347: PUSH
79348: LD_INT 112
79350: PUSH
79351: LD_INT 113
79353: PUSH
79354: LD_INT 114
79356: PUSH
79357: LD_INT 115
79359: PUSH
79360: LD_INT 116
79362: PUSH
79363: LD_INT 117
79365: PUSH
79366: LD_INT 118
79368: PUSH
79369: EMPTY
79370: LIST
79371: LIST
79372: LIST
79373: LIST
79374: LIST
79375: LIST
79376: LIST
79377: LIST
79378: LIST
79379: LIST
79380: LIST
79381: LIST
79382: LIST
79383: LIST
79384: LIST
79385: LIST
79386: LIST
79387: LIST
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: ST_TO_ADDR
// if result then
79393: LD_VAR 0 2
79397: IFFALSE 80183
// begin normal :=  ;
79399: LD_ADDR_VAR 0 5
79403: PUSH
79404: LD_STRING 
79406: ST_TO_ADDR
// hardcore :=  ;
79407: LD_ADDR_VAR 0 6
79411: PUSH
79412: LD_STRING 
79414: ST_TO_ADDR
// active :=  ;
79415: LD_ADDR_VAR 0 7
79419: PUSH
79420: LD_STRING 
79422: ST_TO_ADDR
// for i = 1 to normalCounter do
79423: LD_ADDR_VAR 0 8
79427: PUSH
79428: DOUBLE
79429: LD_INT 1
79431: DEC
79432: ST_TO_ADDR
79433: LD_EXP 76
79437: PUSH
79438: FOR_TO
79439: IFFALSE 79540
// begin tmp := 0 ;
79441: LD_ADDR_VAR 0 3
79445: PUSH
79446: LD_STRING 0
79448: ST_TO_ADDR
// if result [ 1 ] then
79449: LD_VAR 0 2
79453: PUSH
79454: LD_INT 1
79456: ARRAY
79457: IFFALSE 79522
// if result [ 1 ] [ 1 ] = i then
79459: LD_VAR 0 2
79463: PUSH
79464: LD_INT 1
79466: ARRAY
79467: PUSH
79468: LD_INT 1
79470: ARRAY
79471: PUSH
79472: LD_VAR 0 8
79476: EQUAL
79477: IFFALSE 79522
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
79479: LD_ADDR_VAR 0 2
79483: PUSH
79484: LD_VAR 0 2
79488: PPUSH
79489: LD_INT 1
79491: PPUSH
79492: LD_VAR 0 2
79496: PUSH
79497: LD_INT 1
79499: ARRAY
79500: PPUSH
79501: LD_INT 1
79503: PPUSH
79504: CALL_OW 3
79508: PPUSH
79509: CALL_OW 1
79513: ST_TO_ADDR
// tmp := 1 ;
79514: LD_ADDR_VAR 0 3
79518: PUSH
79519: LD_STRING 1
79521: ST_TO_ADDR
// end ; normal := normal & tmp ;
79522: LD_ADDR_VAR 0 5
79526: PUSH
79527: LD_VAR 0 5
79531: PUSH
79532: LD_VAR 0 3
79536: STR
79537: ST_TO_ADDR
// end ;
79538: GO 79438
79540: POP
79541: POP
// for i = 1 to hardcoreCounter do
79542: LD_ADDR_VAR 0 8
79546: PUSH
79547: DOUBLE
79548: LD_INT 1
79550: DEC
79551: ST_TO_ADDR
79552: LD_EXP 77
79556: PUSH
79557: FOR_TO
79558: IFFALSE 79663
// begin tmp := 0 ;
79560: LD_ADDR_VAR 0 3
79564: PUSH
79565: LD_STRING 0
79567: ST_TO_ADDR
// if result [ 2 ] then
79568: LD_VAR 0 2
79572: PUSH
79573: LD_INT 2
79575: ARRAY
79576: IFFALSE 79645
// if result [ 2 ] [ 1 ] = 100 + i then
79578: LD_VAR 0 2
79582: PUSH
79583: LD_INT 2
79585: ARRAY
79586: PUSH
79587: LD_INT 1
79589: ARRAY
79590: PUSH
79591: LD_INT 100
79593: PUSH
79594: LD_VAR 0 8
79598: PLUS
79599: EQUAL
79600: IFFALSE 79645
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
79602: LD_ADDR_VAR 0 2
79606: PUSH
79607: LD_VAR 0 2
79611: PPUSH
79612: LD_INT 2
79614: PPUSH
79615: LD_VAR 0 2
79619: PUSH
79620: LD_INT 2
79622: ARRAY
79623: PPUSH
79624: LD_INT 1
79626: PPUSH
79627: CALL_OW 3
79631: PPUSH
79632: CALL_OW 1
79636: ST_TO_ADDR
// tmp := 1 ;
79637: LD_ADDR_VAR 0 3
79641: PUSH
79642: LD_STRING 1
79644: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
79645: LD_ADDR_VAR 0 6
79649: PUSH
79650: LD_VAR 0 6
79654: PUSH
79655: LD_VAR 0 3
79659: STR
79660: ST_TO_ADDR
// end ;
79661: GO 79557
79663: POP
79664: POP
// if isGameLoad then
79665: LD_VAR 0 1
79669: IFFALSE 80144
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
79671: LD_ADDR_VAR 0 4
79675: PUSH
79676: LD_EXP 80
79680: PUSH
79681: LD_EXP 79
79685: PUSH
79686: LD_EXP 81
79690: PUSH
79691: LD_EXP 78
79695: PUSH
79696: LD_EXP 82
79700: PUSH
79701: LD_EXP 83
79705: PUSH
79706: LD_EXP 84
79710: PUSH
79711: LD_EXP 85
79715: PUSH
79716: LD_EXP 86
79720: PUSH
79721: LD_EXP 87
79725: PUSH
79726: LD_EXP 88
79730: PUSH
79731: LD_EXP 89
79735: PUSH
79736: LD_EXP 90
79740: PUSH
79741: LD_EXP 91
79745: PUSH
79746: LD_EXP 99
79750: PUSH
79751: LD_EXP 100
79755: PUSH
79756: LD_EXP 101
79760: PUSH
79761: LD_EXP 102
79765: PUSH
79766: LD_EXP 104
79770: PUSH
79771: LD_EXP 105
79775: PUSH
79776: LD_EXP 106
79780: PUSH
79781: LD_EXP 109
79785: PUSH
79786: LD_EXP 111
79790: PUSH
79791: LD_EXP 112
79795: PUSH
79796: LD_EXP 113
79800: PUSH
79801: LD_EXP 115
79805: PUSH
79806: LD_EXP 116
79810: PUSH
79811: LD_EXP 119
79815: PUSH
79816: LD_EXP 120
79820: PUSH
79821: LD_EXP 121
79825: PUSH
79826: LD_EXP 122
79830: PUSH
79831: LD_EXP 123
79835: PUSH
79836: LD_EXP 124
79840: PUSH
79841: LD_EXP 125
79845: PUSH
79846: LD_EXP 126
79850: PUSH
79851: LD_EXP 127
79855: PUSH
79856: LD_EXP 92
79860: PUSH
79861: LD_EXP 93
79865: PUSH
79866: LD_EXP 96
79870: PUSH
79871: LD_EXP 97
79875: PUSH
79876: LD_EXP 98
79880: PUSH
79881: LD_EXP 94
79885: PUSH
79886: LD_EXP 95
79890: PUSH
79891: LD_EXP 103
79895: PUSH
79896: LD_EXP 107
79900: PUSH
79901: LD_EXP 108
79905: PUSH
79906: LD_EXP 110
79910: PUSH
79911: LD_EXP 114
79915: PUSH
79916: LD_EXP 117
79920: PUSH
79921: LD_EXP 118
79925: PUSH
79926: LD_EXP 128
79930: PUSH
79931: LD_EXP 129
79935: PUSH
79936: LD_EXP 130
79940: PUSH
79941: LD_EXP 131
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: LIST
79952: LIST
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: LIST
79958: LIST
79959: LIST
79960: LIST
79961: LIST
79962: LIST
79963: LIST
79964: LIST
79965: LIST
79966: LIST
79967: LIST
79968: LIST
79969: LIST
79970: LIST
79971: LIST
79972: LIST
79973: LIST
79974: LIST
79975: LIST
79976: LIST
79977: LIST
79978: LIST
79979: LIST
79980: LIST
79981: LIST
79982: LIST
79983: LIST
79984: LIST
79985: LIST
79986: LIST
79987: LIST
79988: LIST
79989: LIST
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: LIST
79995: LIST
79996: LIST
79997: LIST
79998: LIST
79999: LIST
80000: LIST
80001: ST_TO_ADDR
// tmp :=  ;
80002: LD_ADDR_VAR 0 3
80006: PUSH
80007: LD_STRING 
80009: ST_TO_ADDR
// for i = 1 to normalCounter do
80010: LD_ADDR_VAR 0 8
80014: PUSH
80015: DOUBLE
80016: LD_INT 1
80018: DEC
80019: ST_TO_ADDR
80020: LD_EXP 76
80024: PUSH
80025: FOR_TO
80026: IFFALSE 80062
// begin if flags [ i ] then
80028: LD_VAR 0 4
80032: PUSH
80033: LD_VAR 0 8
80037: ARRAY
80038: IFFALSE 80060
// tmp := tmp & i & ; ;
80040: LD_ADDR_VAR 0 3
80044: PUSH
80045: LD_VAR 0 3
80049: PUSH
80050: LD_VAR 0 8
80054: STR
80055: PUSH
80056: LD_STRING ;
80058: STR
80059: ST_TO_ADDR
// end ;
80060: GO 80025
80062: POP
80063: POP
// for i = 1 to hardcoreCounter do
80064: LD_ADDR_VAR 0 8
80068: PUSH
80069: DOUBLE
80070: LD_INT 1
80072: DEC
80073: ST_TO_ADDR
80074: LD_EXP 77
80078: PUSH
80079: FOR_TO
80080: IFFALSE 80126
// begin if flags [ normalCounter + i ] then
80082: LD_VAR 0 4
80086: PUSH
80087: LD_EXP 76
80091: PUSH
80092: LD_VAR 0 8
80096: PLUS
80097: ARRAY
80098: IFFALSE 80124
// tmp := tmp & ( 100 + i ) & ; ;
80100: LD_ADDR_VAR 0 3
80104: PUSH
80105: LD_VAR 0 3
80109: PUSH
80110: LD_INT 100
80112: PUSH
80113: LD_VAR 0 8
80117: PLUS
80118: STR
80119: PUSH
80120: LD_STRING ;
80122: STR
80123: ST_TO_ADDR
// end ;
80124: GO 80079
80126: POP
80127: POP
// if tmp then
80128: LD_VAR 0 3
80132: IFFALSE 80144
// active := tmp ;
80134: LD_ADDR_VAR 0 7
80138: PUSH
80139: LD_VAR 0 3
80143: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
80144: LD_STRING getStreamItemsFromMission("
80146: PUSH
80147: LD_VAR 0 5
80151: STR
80152: PUSH
80153: LD_STRING ","
80155: STR
80156: PUSH
80157: LD_VAR 0 6
80161: STR
80162: PUSH
80163: LD_STRING ","
80165: STR
80166: PUSH
80167: LD_VAR 0 7
80171: STR
80172: PUSH
80173: LD_STRING ")
80175: STR
80176: PPUSH
80177: CALL_OW 559
// end else
80181: GO 80190
// ToLua ( getStreamItemsFromMission("","","") ) ;
80183: LD_STRING getStreamItemsFromMission("","","")
80185: PPUSH
80186: CALL_OW 559
// end ;
80190: LD_VAR 0 2
80194: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
80195: LD_EXP 75
80199: IFFALSE 80207
80201: PUSH
80202: LD_EXP 80
80206: AND
80207: IFFALSE 80331
80209: GO 80211
80211: DISABLE
80212: LD_INT 0
80214: PPUSH
80215: PPUSH
// begin enable ;
80216: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
80217: LD_ADDR_VAR 0 2
80221: PUSH
80222: LD_INT 22
80224: PUSH
80225: LD_OWVAR 2
80229: PUSH
80230: EMPTY
80231: LIST
80232: LIST
80233: PUSH
80234: LD_INT 2
80236: PUSH
80237: LD_INT 34
80239: PUSH
80240: LD_INT 7
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: PUSH
80247: LD_INT 34
80249: PUSH
80250: LD_INT 45
80252: PUSH
80253: EMPTY
80254: LIST
80255: LIST
80256: PUSH
80257: LD_INT 34
80259: PUSH
80260: LD_INT 28
80262: PUSH
80263: EMPTY
80264: LIST
80265: LIST
80266: PUSH
80267: LD_INT 34
80269: PUSH
80270: LD_INT 47
80272: PUSH
80273: EMPTY
80274: LIST
80275: LIST
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: LIST
80281: LIST
80282: LIST
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: PPUSH
80288: CALL_OW 69
80292: ST_TO_ADDR
// if not tmp then
80293: LD_VAR 0 2
80297: NOT
80298: IFFALSE 80302
// exit ;
80300: GO 80331
// for i in tmp do
80302: LD_ADDR_VAR 0 1
80306: PUSH
80307: LD_VAR 0 2
80311: PUSH
80312: FOR_IN
80313: IFFALSE 80329
// begin SetLives ( i , 0 ) ;
80315: LD_VAR 0 1
80319: PPUSH
80320: LD_INT 0
80322: PPUSH
80323: CALL_OW 234
// end ;
80327: GO 80312
80329: POP
80330: POP
// end ;
80331: PPOPN 2
80333: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
80334: LD_EXP 75
80338: IFFALSE 80346
80340: PUSH
80341: LD_EXP 81
80345: AND
80346: IFFALSE 80430
80348: GO 80350
80350: DISABLE
80351: LD_INT 0
80353: PPUSH
80354: PPUSH
// begin enable ;
80355: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
80356: LD_ADDR_VAR 0 2
80360: PUSH
80361: LD_INT 22
80363: PUSH
80364: LD_OWVAR 2
80368: PUSH
80369: EMPTY
80370: LIST
80371: LIST
80372: PUSH
80373: LD_INT 32
80375: PUSH
80376: LD_INT 3
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: EMPTY
80384: LIST
80385: LIST
80386: PPUSH
80387: CALL_OW 69
80391: ST_TO_ADDR
// if not tmp then
80392: LD_VAR 0 2
80396: NOT
80397: IFFALSE 80401
// exit ;
80399: GO 80430
// for i in tmp do
80401: LD_ADDR_VAR 0 1
80405: PUSH
80406: LD_VAR 0 2
80410: PUSH
80411: FOR_IN
80412: IFFALSE 80428
// begin SetLives ( i , 0 ) ;
80414: LD_VAR 0 1
80418: PPUSH
80419: LD_INT 0
80421: PPUSH
80422: CALL_OW 234
// end ;
80426: GO 80411
80428: POP
80429: POP
// end ;
80430: PPOPN 2
80432: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
80433: LD_EXP 75
80437: IFFALSE 80445
80439: PUSH
80440: LD_EXP 78
80444: AND
80445: IFFALSE 80538
80447: GO 80449
80449: DISABLE
80450: LD_INT 0
80452: PPUSH
// begin enable ;
80453: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
80454: LD_ADDR_VAR 0 1
80458: PUSH
80459: LD_INT 22
80461: PUSH
80462: LD_OWVAR 2
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: LD_INT 2
80473: PUSH
80474: LD_INT 25
80476: PUSH
80477: LD_INT 5
80479: PUSH
80480: EMPTY
80481: LIST
80482: LIST
80483: PUSH
80484: LD_INT 25
80486: PUSH
80487: LD_INT 9
80489: PUSH
80490: EMPTY
80491: LIST
80492: LIST
80493: PUSH
80494: LD_INT 25
80496: PUSH
80497: LD_INT 8
80499: PUSH
80500: EMPTY
80501: LIST
80502: LIST
80503: PUSH
80504: EMPTY
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: PUSH
80510: EMPTY
80511: LIST
80512: LIST
80513: PPUSH
80514: CALL_OW 69
80518: PUSH
80519: FOR_IN
80520: IFFALSE 80536
// begin SetClass ( i , 1 ) ;
80522: LD_VAR 0 1
80526: PPUSH
80527: LD_INT 1
80529: PPUSH
80530: CALL_OW 336
// end ;
80534: GO 80519
80536: POP
80537: POP
// end ;
80538: PPOPN 1
80540: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
80541: LD_EXP 75
80545: IFFALSE 80553
80547: PUSH
80548: LD_EXP 79
80552: AND
80553: IFFALSE 80565
80555: PUSH
80556: LD_OWVAR 65
80560: PUSH
80561: LD_INT 7
80563: LESS
80564: AND
80565: IFFALSE 80579
80567: GO 80569
80569: DISABLE
// begin enable ;
80570: ENABLE
// game_speed := 7 ;
80571: LD_ADDR_OWVAR 65
80575: PUSH
80576: LD_INT 7
80578: ST_TO_ADDR
// end ;
80579: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
80580: LD_EXP 75
80584: IFFALSE 80592
80586: PUSH
80587: LD_EXP 82
80591: AND
80592: IFFALSE 80794
80594: GO 80596
80596: DISABLE
80597: LD_INT 0
80599: PPUSH
80600: PPUSH
80601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80602: LD_ADDR_VAR 0 3
80606: PUSH
80607: LD_INT 81
80609: PUSH
80610: LD_OWVAR 2
80614: PUSH
80615: EMPTY
80616: LIST
80617: LIST
80618: PUSH
80619: LD_INT 21
80621: PUSH
80622: LD_INT 1
80624: PUSH
80625: EMPTY
80626: LIST
80627: LIST
80628: PUSH
80629: EMPTY
80630: LIST
80631: LIST
80632: PPUSH
80633: CALL_OW 69
80637: ST_TO_ADDR
// if not tmp then
80638: LD_VAR 0 3
80642: NOT
80643: IFFALSE 80647
// exit ;
80645: GO 80794
// if tmp > 5 then
80647: LD_VAR 0 3
80651: PUSH
80652: LD_INT 5
80654: GREATER
80655: IFFALSE 80667
// k := 5 else
80657: LD_ADDR_VAR 0 2
80661: PUSH
80662: LD_INT 5
80664: ST_TO_ADDR
80665: GO 80677
// k := tmp ;
80667: LD_ADDR_VAR 0 2
80671: PUSH
80672: LD_VAR 0 3
80676: ST_TO_ADDR
// for i := 1 to k do
80677: LD_ADDR_VAR 0 1
80681: PUSH
80682: DOUBLE
80683: LD_INT 1
80685: DEC
80686: ST_TO_ADDR
80687: LD_VAR 0 2
80691: PUSH
80692: FOR_TO
80693: IFFALSE 80792
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
80695: LD_VAR 0 3
80699: PUSH
80700: LD_VAR 0 1
80704: ARRAY
80705: PPUSH
80706: LD_VAR 0 1
80710: PUSH
80711: LD_INT 4
80713: MOD
80714: PUSH
80715: LD_INT 1
80717: PLUS
80718: PPUSH
80719: CALL_OW 259
80723: PUSH
80724: LD_INT 10
80726: LESS
80727: IFFALSE 80790
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
80729: LD_VAR 0 3
80733: PUSH
80734: LD_VAR 0 1
80738: ARRAY
80739: PPUSH
80740: LD_VAR 0 1
80744: PUSH
80745: LD_INT 4
80747: MOD
80748: PUSH
80749: LD_INT 1
80751: PLUS
80752: PPUSH
80753: LD_VAR 0 3
80757: PUSH
80758: LD_VAR 0 1
80762: ARRAY
80763: PPUSH
80764: LD_VAR 0 1
80768: PUSH
80769: LD_INT 4
80771: MOD
80772: PUSH
80773: LD_INT 1
80775: PLUS
80776: PPUSH
80777: CALL_OW 259
80781: PUSH
80782: LD_INT 1
80784: PLUS
80785: PPUSH
80786: CALL_OW 237
80790: GO 80692
80792: POP
80793: POP
// end ;
80794: PPOPN 3
80796: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
80797: LD_EXP 75
80801: IFFALSE 80809
80803: PUSH
80804: LD_EXP 83
80808: AND
80809: IFFALSE 80829
80811: GO 80813
80813: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
80814: LD_INT 4
80816: PPUSH
80817: LD_OWVAR 2
80821: PPUSH
80822: LD_INT 0
80824: PPUSH
80825: CALL_OW 324
80829: END
// every 0 0$1 trigger StreamModeActive and sShovel do
80830: LD_EXP 75
80834: IFFALSE 80842
80836: PUSH
80837: LD_EXP 112
80841: AND
80842: IFFALSE 80862
80844: GO 80846
80846: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
80847: LD_INT 19
80849: PPUSH
80850: LD_OWVAR 2
80854: PPUSH
80855: LD_INT 0
80857: PPUSH
80858: CALL_OW 324
80862: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
80863: LD_EXP 75
80867: IFFALSE 80875
80869: PUSH
80870: LD_EXP 84
80874: AND
80875: IFFALSE 80977
80877: GO 80879
80879: DISABLE
80880: LD_INT 0
80882: PPUSH
80883: PPUSH
// begin enable ;
80884: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
80885: LD_ADDR_VAR 0 2
80889: PUSH
80890: LD_INT 22
80892: PUSH
80893: LD_OWVAR 2
80897: PUSH
80898: EMPTY
80899: LIST
80900: LIST
80901: PUSH
80902: LD_INT 2
80904: PUSH
80905: LD_INT 34
80907: PUSH
80908: LD_INT 11
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: LD_INT 34
80917: PUSH
80918: LD_INT 30
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: LIST
80929: PUSH
80930: EMPTY
80931: LIST
80932: LIST
80933: PPUSH
80934: CALL_OW 69
80938: ST_TO_ADDR
// if not tmp then
80939: LD_VAR 0 2
80943: NOT
80944: IFFALSE 80948
// exit ;
80946: GO 80977
// for i in tmp do
80948: LD_ADDR_VAR 0 1
80952: PUSH
80953: LD_VAR 0 2
80957: PUSH
80958: FOR_IN
80959: IFFALSE 80975
// begin SetLives ( i , 0 ) ;
80961: LD_VAR 0 1
80965: PPUSH
80966: LD_INT 0
80968: PPUSH
80969: CALL_OW 234
// end ;
80973: GO 80958
80975: POP
80976: POP
// end ;
80977: PPOPN 2
80979: END
// every 0 0$1 trigger StreamModeActive and sBunker do
80980: LD_EXP 75
80984: IFFALSE 80992
80986: PUSH
80987: LD_EXP 85
80991: AND
80992: IFFALSE 81012
80994: GO 80996
80996: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
80997: LD_INT 32
80999: PPUSH
81000: LD_OWVAR 2
81004: PPUSH
81005: LD_INT 0
81007: PPUSH
81008: CALL_OW 324
81012: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
81013: LD_EXP 75
81017: IFFALSE 81025
81019: PUSH
81020: LD_EXP 86
81024: AND
81025: IFFALSE 81208
81027: GO 81029
81029: DISABLE
81030: LD_INT 0
81032: PPUSH
81033: PPUSH
81034: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
81035: LD_ADDR_VAR 0 2
81039: PUSH
81040: LD_INT 22
81042: PUSH
81043: LD_OWVAR 2
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: PUSH
81052: LD_INT 33
81054: PUSH
81055: LD_INT 3
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: PUSH
81062: EMPTY
81063: LIST
81064: LIST
81065: PPUSH
81066: CALL_OW 69
81070: ST_TO_ADDR
// if not tmp then
81071: LD_VAR 0 2
81075: NOT
81076: IFFALSE 81080
// exit ;
81078: GO 81208
// side := 0 ;
81080: LD_ADDR_VAR 0 3
81084: PUSH
81085: LD_INT 0
81087: ST_TO_ADDR
// for i := 1 to 8 do
81088: LD_ADDR_VAR 0 1
81092: PUSH
81093: DOUBLE
81094: LD_INT 1
81096: DEC
81097: ST_TO_ADDR
81098: LD_INT 8
81100: PUSH
81101: FOR_TO
81102: IFFALSE 81152
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
81104: LD_OWVAR 2
81108: PUSH
81109: LD_VAR 0 1
81113: NONEQUAL
81114: IFFALSE 81136
81116: PUSH
81117: LD_OWVAR 2
81121: PPUSH
81122: LD_VAR 0 1
81126: PPUSH
81127: CALL_OW 81
81131: PUSH
81132: LD_INT 2
81134: EQUAL
81135: AND
81136: IFFALSE 81150
// begin side := i ;
81138: LD_ADDR_VAR 0 3
81142: PUSH
81143: LD_VAR 0 1
81147: ST_TO_ADDR
// break ;
81148: GO 81152
// end ;
81150: GO 81101
81152: POP
81153: POP
// if not side then
81154: LD_VAR 0 3
81158: NOT
81159: IFFALSE 81163
// exit ;
81161: GO 81208
// for i := 1 to tmp do
81163: LD_ADDR_VAR 0 1
81167: PUSH
81168: DOUBLE
81169: LD_INT 1
81171: DEC
81172: ST_TO_ADDR
81173: LD_VAR 0 2
81177: PUSH
81178: FOR_TO
81179: IFFALSE 81206
// if Prob ( 60 ) then
81181: LD_INT 60
81183: PPUSH
81184: CALL_OW 13
81188: IFFALSE 81204
// SetSide ( i , side ) ;
81190: LD_VAR 0 1
81194: PPUSH
81195: LD_VAR 0 3
81199: PPUSH
81200: CALL_OW 235
81204: GO 81178
81206: POP
81207: POP
// end ;
81208: PPOPN 3
81210: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
81211: LD_EXP 75
81215: IFFALSE 81223
81217: PUSH
81218: LD_EXP 88
81222: AND
81223: IFFALSE 81342
81225: GO 81227
81227: DISABLE
81228: LD_INT 0
81230: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
81231: LD_ADDR_VAR 0 1
81235: PUSH
81236: LD_INT 22
81238: PUSH
81239: LD_OWVAR 2
81243: PUSH
81244: EMPTY
81245: LIST
81246: LIST
81247: PUSH
81248: LD_INT 21
81250: PUSH
81251: LD_INT 1
81253: PUSH
81254: EMPTY
81255: LIST
81256: LIST
81257: PUSH
81258: LD_INT 3
81260: PUSH
81261: LD_INT 23
81263: PUSH
81264: LD_INT 0
81266: PUSH
81267: EMPTY
81268: LIST
81269: LIST
81270: PUSH
81271: EMPTY
81272: LIST
81273: LIST
81274: PUSH
81275: EMPTY
81276: LIST
81277: LIST
81278: LIST
81279: PPUSH
81280: CALL_OW 69
81284: PUSH
81285: FOR_IN
81286: IFFALSE 81340
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
81288: LD_VAR 0 1
81292: PPUSH
81293: CALL_OW 257
81297: PUSH
81298: LD_INT 1
81300: PUSH
81301: LD_INT 2
81303: PUSH
81304: LD_INT 3
81306: PUSH
81307: LD_INT 4
81309: PUSH
81310: EMPTY
81311: LIST
81312: LIST
81313: LIST
81314: LIST
81315: IN
81316: IFFALSE 81338
// SetClass ( un , rand ( 1 , 4 ) ) ;
81318: LD_VAR 0 1
81322: PPUSH
81323: LD_INT 1
81325: PPUSH
81326: LD_INT 4
81328: PPUSH
81329: CALL_OW 12
81333: PPUSH
81334: CALL_OW 336
81338: GO 81285
81340: POP
81341: POP
// end ;
81342: PPOPN 1
81344: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
81345: LD_EXP 75
81349: IFFALSE 81357
81351: PUSH
81352: LD_EXP 87
81356: AND
81357: IFFALSE 81436
81359: GO 81361
81361: DISABLE
81362: LD_INT 0
81364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81365: LD_ADDR_VAR 0 1
81369: PUSH
81370: LD_INT 22
81372: PUSH
81373: LD_OWVAR 2
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: PUSH
81382: LD_INT 21
81384: PUSH
81385: LD_INT 3
81387: PUSH
81388: EMPTY
81389: LIST
81390: LIST
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: PPUSH
81396: CALL_OW 69
81400: ST_TO_ADDR
// if not tmp then
81401: LD_VAR 0 1
81405: NOT
81406: IFFALSE 81410
// exit ;
81408: GO 81436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
81410: LD_VAR 0 1
81414: PUSH
81415: LD_INT 1
81417: PPUSH
81418: LD_VAR 0 1
81422: PPUSH
81423: CALL_OW 12
81427: ARRAY
81428: PPUSH
81429: LD_INT 100
81431: PPUSH
81432: CALL_OW 234
// end ;
81436: PPOPN 1
81438: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
81439: LD_EXP 75
81443: IFFALSE 81451
81445: PUSH
81446: LD_EXP 89
81450: AND
81451: IFFALSE 81549
81453: GO 81455
81455: DISABLE
81456: LD_INT 0
81458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81459: LD_ADDR_VAR 0 1
81463: PUSH
81464: LD_INT 22
81466: PUSH
81467: LD_OWVAR 2
81471: PUSH
81472: EMPTY
81473: LIST
81474: LIST
81475: PUSH
81476: LD_INT 21
81478: PUSH
81479: LD_INT 1
81481: PUSH
81482: EMPTY
81483: LIST
81484: LIST
81485: PUSH
81486: EMPTY
81487: LIST
81488: LIST
81489: PPUSH
81490: CALL_OW 69
81494: ST_TO_ADDR
// if not tmp then
81495: LD_VAR 0 1
81499: NOT
81500: IFFALSE 81504
// exit ;
81502: GO 81549
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
81504: LD_VAR 0 1
81508: PUSH
81509: LD_INT 1
81511: PPUSH
81512: LD_VAR 0 1
81516: PPUSH
81517: CALL_OW 12
81521: ARRAY
81522: PPUSH
81523: LD_INT 1
81525: PPUSH
81526: LD_INT 4
81528: PPUSH
81529: CALL_OW 12
81533: PPUSH
81534: LD_INT 3000
81536: PPUSH
81537: LD_INT 9000
81539: PPUSH
81540: CALL_OW 12
81544: PPUSH
81545: CALL_OW 492
// end ;
81549: PPOPN 1
81551: END
// every 0 0$1 trigger StreamModeActive and sDepot do
81552: LD_EXP 75
81556: IFFALSE 81564
81558: PUSH
81559: LD_EXP 90
81563: AND
81564: IFFALSE 81584
81566: GO 81568
81568: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
81569: LD_INT 1
81571: PPUSH
81572: LD_OWVAR 2
81576: PPUSH
81577: LD_INT 0
81579: PPUSH
81580: CALL_OW 324
81584: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
81585: LD_EXP 75
81589: IFFALSE 81597
81591: PUSH
81592: LD_EXP 91
81596: AND
81597: IFFALSE 81680
81599: GO 81601
81601: DISABLE
81602: LD_INT 0
81604: PPUSH
81605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81606: LD_ADDR_VAR 0 2
81610: PUSH
81611: LD_INT 22
81613: PUSH
81614: LD_OWVAR 2
81618: PUSH
81619: EMPTY
81620: LIST
81621: LIST
81622: PUSH
81623: LD_INT 21
81625: PUSH
81626: LD_INT 3
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: PUSH
81633: EMPTY
81634: LIST
81635: LIST
81636: PPUSH
81637: CALL_OW 69
81641: ST_TO_ADDR
// if not tmp then
81642: LD_VAR 0 2
81646: NOT
81647: IFFALSE 81651
// exit ;
81649: GO 81680
// for i in tmp do
81651: LD_ADDR_VAR 0 1
81655: PUSH
81656: LD_VAR 0 2
81660: PUSH
81661: FOR_IN
81662: IFFALSE 81678
// SetBLevel ( i , 10 ) ;
81664: LD_VAR 0 1
81668: PPUSH
81669: LD_INT 10
81671: PPUSH
81672: CALL_OW 241
81676: GO 81661
81678: POP
81679: POP
// end ;
81680: PPOPN 2
81682: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
81683: LD_EXP 75
81687: IFFALSE 81695
81689: PUSH
81690: LD_EXP 92
81694: AND
81695: IFFALSE 81806
81697: GO 81699
81699: DISABLE
81700: LD_INT 0
81702: PPUSH
81703: PPUSH
81704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81705: LD_ADDR_VAR 0 3
81709: PUSH
81710: LD_INT 22
81712: PUSH
81713: LD_OWVAR 2
81717: PUSH
81718: EMPTY
81719: LIST
81720: LIST
81721: PUSH
81722: LD_INT 25
81724: PUSH
81725: LD_INT 1
81727: PUSH
81728: EMPTY
81729: LIST
81730: LIST
81731: PUSH
81732: EMPTY
81733: LIST
81734: LIST
81735: PPUSH
81736: CALL_OW 69
81740: ST_TO_ADDR
// if not tmp then
81741: LD_VAR 0 3
81745: NOT
81746: IFFALSE 81750
// exit ;
81748: GO 81806
// un := tmp [ rand ( 1 , tmp ) ] ;
81750: LD_ADDR_VAR 0 2
81754: PUSH
81755: LD_VAR 0 3
81759: PUSH
81760: LD_INT 1
81762: PPUSH
81763: LD_VAR 0 3
81767: PPUSH
81768: CALL_OW 12
81772: ARRAY
81773: ST_TO_ADDR
// if Crawls ( un ) then
81774: LD_VAR 0 2
81778: PPUSH
81779: CALL_OW 318
81783: IFFALSE 81794
// ComWalk ( un ) ;
81785: LD_VAR 0 2
81789: PPUSH
81790: CALL_OW 138
// SetClass ( un , class_sniper ) ;
81794: LD_VAR 0 2
81798: PPUSH
81799: LD_INT 5
81801: PPUSH
81802: CALL_OW 336
// end ;
81806: PPOPN 3
81808: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
81809: LD_EXP 75
81813: IFFALSE 81821
81815: PUSH
81816: LD_EXP 93
81820: AND
81821: IFFALSE 81833
81823: PUSH
81824: LD_OWVAR 67
81828: PUSH
81829: LD_INT 4
81831: LESS
81832: AND
81833: IFFALSE 81852
81835: GO 81837
81837: DISABLE
// begin Difficulty := Difficulty + 1 ;
81838: LD_ADDR_OWVAR 67
81842: PUSH
81843: LD_OWVAR 67
81847: PUSH
81848: LD_INT 1
81850: PLUS
81851: ST_TO_ADDR
// end ;
81852: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
81853: LD_EXP 75
81857: IFFALSE 81865
81859: PUSH
81860: LD_EXP 94
81864: AND
81865: IFFALSE 81968
81867: GO 81869
81869: DISABLE
81870: LD_INT 0
81872: PPUSH
// begin for i := 1 to 5 do
81873: LD_ADDR_VAR 0 1
81877: PUSH
81878: DOUBLE
81879: LD_INT 1
81881: DEC
81882: ST_TO_ADDR
81883: LD_INT 5
81885: PUSH
81886: FOR_TO
81887: IFFALSE 81966
// begin uc_nation := nation_nature ;
81889: LD_ADDR_OWVAR 21
81893: PUSH
81894: LD_INT 0
81896: ST_TO_ADDR
// uc_side := 0 ;
81897: LD_ADDR_OWVAR 20
81901: PUSH
81902: LD_INT 0
81904: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81905: LD_ADDR_OWVAR 29
81909: PUSH
81910: LD_INT 12
81912: PUSH
81913: LD_INT 12
81915: PUSH
81916: EMPTY
81917: LIST
81918: LIST
81919: ST_TO_ADDR
// hc_agressivity := 20 ;
81920: LD_ADDR_OWVAR 35
81924: PUSH
81925: LD_INT 20
81927: ST_TO_ADDR
// hc_class := class_tiger ;
81928: LD_ADDR_OWVAR 28
81932: PUSH
81933: LD_INT 14
81935: ST_TO_ADDR
// hc_gallery :=  ;
81936: LD_ADDR_OWVAR 33
81940: PUSH
81941: LD_STRING 
81943: ST_TO_ADDR
// hc_name :=  ;
81944: LD_ADDR_OWVAR 26
81948: PUSH
81949: LD_STRING 
81951: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
81952: CALL_OW 44
81956: PPUSH
81957: LD_INT 0
81959: PPUSH
81960: CALL_OW 51
// end ;
81964: GO 81886
81966: POP
81967: POP
// end ;
81968: PPOPN 1
81970: END
// every 0 0$1 trigger StreamModeActive and sBomb do
81971: LD_EXP 75
81975: IFFALSE 81983
81977: PUSH
81978: LD_EXP 95
81982: AND
81983: IFFALSE 81992
81985: GO 81987
81987: DISABLE
// StreamSibBomb ;
81988: CALL 81993 0 0
81992: END
// export function StreamSibBomb ; var i , x , y ; begin
81993: LD_INT 0
81995: PPUSH
81996: PPUSH
81997: PPUSH
81998: PPUSH
// result := false ;
81999: LD_ADDR_VAR 0 1
82003: PUSH
82004: LD_INT 0
82006: ST_TO_ADDR
// for i := 1 to 16 do
82007: LD_ADDR_VAR 0 2
82011: PUSH
82012: DOUBLE
82013: LD_INT 1
82015: DEC
82016: ST_TO_ADDR
82017: LD_INT 16
82019: PUSH
82020: FOR_TO
82021: IFFALSE 82220
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
82023: LD_ADDR_VAR 0 3
82027: PUSH
82028: LD_INT 10
82030: PUSH
82031: LD_INT 20
82033: PUSH
82034: LD_INT 30
82036: PUSH
82037: LD_INT 40
82039: PUSH
82040: LD_INT 50
82042: PUSH
82043: LD_INT 60
82045: PUSH
82046: LD_INT 70
82048: PUSH
82049: LD_INT 80
82051: PUSH
82052: LD_INT 90
82054: PUSH
82055: LD_INT 100
82057: PUSH
82058: LD_INT 110
82060: PUSH
82061: LD_INT 120
82063: PUSH
82064: LD_INT 130
82066: PUSH
82067: LD_INT 140
82069: PUSH
82070: LD_INT 150
82072: PUSH
82073: EMPTY
82074: LIST
82075: LIST
82076: LIST
82077: LIST
82078: LIST
82079: LIST
82080: LIST
82081: LIST
82082: LIST
82083: LIST
82084: LIST
82085: LIST
82086: LIST
82087: LIST
82088: LIST
82089: PUSH
82090: LD_INT 1
82092: PPUSH
82093: LD_INT 15
82095: PPUSH
82096: CALL_OW 12
82100: ARRAY
82101: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
82102: LD_ADDR_VAR 0 4
82106: PUSH
82107: LD_INT 10
82109: PUSH
82110: LD_INT 20
82112: PUSH
82113: LD_INT 30
82115: PUSH
82116: LD_INT 40
82118: PUSH
82119: LD_INT 50
82121: PUSH
82122: LD_INT 60
82124: PUSH
82125: LD_INT 70
82127: PUSH
82128: LD_INT 80
82130: PUSH
82131: LD_INT 90
82133: PUSH
82134: LD_INT 100
82136: PUSH
82137: LD_INT 110
82139: PUSH
82140: LD_INT 120
82142: PUSH
82143: LD_INT 130
82145: PUSH
82146: LD_INT 140
82148: PUSH
82149: LD_INT 150
82151: PUSH
82152: EMPTY
82153: LIST
82154: LIST
82155: LIST
82156: LIST
82157: LIST
82158: LIST
82159: LIST
82160: LIST
82161: LIST
82162: LIST
82163: LIST
82164: LIST
82165: LIST
82166: LIST
82167: LIST
82168: PUSH
82169: LD_INT 1
82171: PPUSH
82172: LD_INT 15
82174: PPUSH
82175: CALL_OW 12
82179: ARRAY
82180: ST_TO_ADDR
// if ValidHex ( x , y ) then
82181: LD_VAR 0 3
82185: PPUSH
82186: LD_VAR 0 4
82190: PPUSH
82191: CALL_OW 488
82195: IFFALSE 82218
// begin result := [ x , y ] ;
82197: LD_ADDR_VAR 0 1
82201: PUSH
82202: LD_VAR 0 3
82206: PUSH
82207: LD_VAR 0 4
82211: PUSH
82212: EMPTY
82213: LIST
82214: LIST
82215: ST_TO_ADDR
// break ;
82216: GO 82220
// end ; end ;
82218: GO 82020
82220: POP
82221: POP
// if result then
82222: LD_VAR 0 1
82226: IFFALSE 82286
// begin ToLua ( playSibBomb() ) ;
82228: LD_STRING playSibBomb()
82230: PPUSH
82231: CALL_OW 559
// wait ( 0 0$14 ) ;
82235: LD_INT 490
82237: PPUSH
82238: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
82242: LD_VAR 0 1
82246: PUSH
82247: LD_INT 1
82249: ARRAY
82250: PPUSH
82251: LD_VAR 0 1
82255: PUSH
82256: LD_INT 2
82258: ARRAY
82259: PPUSH
82260: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
82264: LD_VAR 0 1
82268: PUSH
82269: LD_INT 1
82271: ARRAY
82272: PPUSH
82273: LD_VAR 0 1
82277: PUSH
82278: LD_INT 2
82280: ARRAY
82281: PPUSH
82282: CALL_OW 429
// end ; end ;
82286: LD_VAR 0 1
82290: RET
// every 0 0$1 trigger StreamModeActive and sReset do
82291: LD_EXP 75
82295: IFFALSE 82303
82297: PUSH
82298: LD_EXP 97
82302: AND
82303: IFFALSE 82315
82305: GO 82307
82307: DISABLE
// YouLost (  ) ;
82308: LD_STRING 
82310: PPUSH
82311: CALL_OW 104
82315: END
// every 0 0$1 trigger StreamModeActive and sFog do
82316: LD_EXP 75
82320: IFFALSE 82328
82322: PUSH
82323: LD_EXP 96
82327: AND
82328: IFFALSE 82342
82330: GO 82332
82332: DISABLE
// FogOff ( your_side ) ;
82333: LD_OWVAR 2
82337: PPUSH
82338: CALL_OW 344
82342: END
// every 0 0$1 trigger StreamModeActive and sSun do
82343: LD_EXP 75
82347: IFFALSE 82355
82349: PUSH
82350: LD_EXP 98
82354: AND
82355: IFFALSE 82383
82357: GO 82359
82359: DISABLE
// begin solar_recharge_percent := 0 ;
82360: LD_ADDR_OWVAR 79
82364: PUSH
82365: LD_INT 0
82367: ST_TO_ADDR
// wait ( 5 5$00 ) ;
82368: LD_INT 10500
82370: PPUSH
82371: CALL_OW 67
// solar_recharge_percent := 100 ;
82375: LD_ADDR_OWVAR 79
82379: PUSH
82380: LD_INT 100
82382: ST_TO_ADDR
// end ;
82383: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
82384: LD_EXP 75
82388: IFFALSE 82396
82390: PUSH
82391: LD_EXP 99
82395: AND
82396: IFFALSE 82635
82398: GO 82400
82400: DISABLE
82401: LD_INT 0
82403: PPUSH
82404: PPUSH
82405: PPUSH
// begin tmp := [ ] ;
82406: LD_ADDR_VAR 0 3
82410: PUSH
82411: EMPTY
82412: ST_TO_ADDR
// for i := 1 to 6 do
82413: LD_ADDR_VAR 0 1
82417: PUSH
82418: DOUBLE
82419: LD_INT 1
82421: DEC
82422: ST_TO_ADDR
82423: LD_INT 6
82425: PUSH
82426: FOR_TO
82427: IFFALSE 82532
// begin uc_nation := nation_nature ;
82429: LD_ADDR_OWVAR 21
82433: PUSH
82434: LD_INT 0
82436: ST_TO_ADDR
// uc_side := 0 ;
82437: LD_ADDR_OWVAR 20
82441: PUSH
82442: LD_INT 0
82444: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
82445: LD_ADDR_OWVAR 29
82449: PUSH
82450: LD_INT 12
82452: PUSH
82453: LD_INT 12
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: ST_TO_ADDR
// hc_agressivity := 20 ;
82460: LD_ADDR_OWVAR 35
82464: PUSH
82465: LD_INT 20
82467: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
82468: LD_ADDR_OWVAR 28
82472: PUSH
82473: LD_INT 17
82475: ST_TO_ADDR
// hc_gallery :=  ;
82476: LD_ADDR_OWVAR 33
82480: PUSH
82481: LD_STRING 
82483: ST_TO_ADDR
// hc_name :=  ;
82484: LD_ADDR_OWVAR 26
82488: PUSH
82489: LD_STRING 
82491: ST_TO_ADDR
// un := CreateHuman ;
82492: LD_ADDR_VAR 0 2
82496: PUSH
82497: CALL_OW 44
82501: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
82502: LD_VAR 0 2
82506: PPUSH
82507: LD_INT 1
82509: PPUSH
82510: CALL_OW 51
// tmp := tmp ^ un ;
82514: LD_ADDR_VAR 0 3
82518: PUSH
82519: LD_VAR 0 3
82523: PUSH
82524: LD_VAR 0 2
82528: ADD
82529: ST_TO_ADDR
// end ;
82530: GO 82426
82532: POP
82533: POP
// repeat wait ( 0 0$1 ) ;
82534: LD_INT 35
82536: PPUSH
82537: CALL_OW 67
// for un in tmp do
82541: LD_ADDR_VAR 0 2
82545: PUSH
82546: LD_VAR 0 3
82550: PUSH
82551: FOR_IN
82552: IFFALSE 82626
// begin if IsDead ( un ) then
82554: LD_VAR 0 2
82558: PPUSH
82559: CALL_OW 301
82563: IFFALSE 82583
// begin tmp := tmp diff un ;
82565: LD_ADDR_VAR 0 3
82569: PUSH
82570: LD_VAR 0 3
82574: PUSH
82575: LD_VAR 0 2
82579: DIFF
82580: ST_TO_ADDR
// continue ;
82581: GO 82551
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
82583: LD_VAR 0 2
82587: PPUSH
82588: LD_INT 3
82590: PUSH
82591: LD_INT 22
82593: PUSH
82594: LD_INT 0
82596: PUSH
82597: EMPTY
82598: LIST
82599: LIST
82600: PUSH
82601: EMPTY
82602: LIST
82603: LIST
82604: PPUSH
82605: CALL_OW 69
82609: PPUSH
82610: LD_VAR 0 2
82614: PPUSH
82615: CALL_OW 74
82619: PPUSH
82620: CALL_OW 115
// end ;
82624: GO 82551
82626: POP
82627: POP
// until not tmp ;
82628: LD_VAR 0 3
82632: NOT
82633: IFFALSE 82534
// end ;
82635: PPOPN 3
82637: END
// every 0 0$1 trigger StreamModeActive and sTroll do
82638: LD_EXP 75
82642: IFFALSE 82650
82644: PUSH
82645: LD_EXP 100
82649: AND
82650: IFFALSE 82704
82652: GO 82654
82654: DISABLE
// begin ToLua ( displayTroll(); ) ;
82655: LD_STRING displayTroll();
82657: PPUSH
82658: CALL_OW 559
// wait ( 3 3$00 ) ;
82662: LD_INT 6300
82664: PPUSH
82665: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82669: LD_STRING hideTroll();
82671: PPUSH
82672: CALL_OW 559
// wait ( 1 1$00 ) ;
82676: LD_INT 2100
82678: PPUSH
82679: CALL_OW 67
// ToLua ( displayTroll(); ) ;
82683: LD_STRING displayTroll();
82685: PPUSH
82686: CALL_OW 559
// wait ( 1 1$00 ) ;
82690: LD_INT 2100
82692: PPUSH
82693: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82697: LD_STRING hideTroll();
82699: PPUSH
82700: CALL_OW 559
// end ;
82704: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
82705: LD_EXP 75
82709: IFFALSE 82717
82711: PUSH
82712: LD_EXP 101
82716: AND
82717: IFFALSE 82780
82719: GO 82721
82721: DISABLE
82722: LD_INT 0
82724: PPUSH
// begin p := 0 ;
82725: LD_ADDR_VAR 0 1
82729: PUSH
82730: LD_INT 0
82732: ST_TO_ADDR
// repeat game_speed := 1 ;
82733: LD_ADDR_OWVAR 65
82737: PUSH
82738: LD_INT 1
82740: ST_TO_ADDR
// wait ( 0 0$1 ) ;
82741: LD_INT 35
82743: PPUSH
82744: CALL_OW 67
// p := p + 1 ;
82748: LD_ADDR_VAR 0 1
82752: PUSH
82753: LD_VAR 0 1
82757: PUSH
82758: LD_INT 1
82760: PLUS
82761: ST_TO_ADDR
// until p >= 60 ;
82762: LD_VAR 0 1
82766: PUSH
82767: LD_INT 60
82769: GREATEREQUAL
82770: IFFALSE 82733
// game_speed := 4 ;
82772: LD_ADDR_OWVAR 65
82776: PUSH
82777: LD_INT 4
82779: ST_TO_ADDR
// end ;
82780: PPOPN 1
82782: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
82783: LD_EXP 75
82787: IFFALSE 82795
82789: PUSH
82790: LD_EXP 102
82794: AND
82795: IFFALSE 82941
82797: GO 82799
82799: DISABLE
82800: LD_INT 0
82802: PPUSH
82803: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82804: LD_ADDR_VAR 0 1
82808: PUSH
82809: LD_INT 22
82811: PUSH
82812: LD_OWVAR 2
82816: PUSH
82817: EMPTY
82818: LIST
82819: LIST
82820: PUSH
82821: LD_INT 2
82823: PUSH
82824: LD_INT 30
82826: PUSH
82827: LD_INT 0
82829: PUSH
82830: EMPTY
82831: LIST
82832: LIST
82833: PUSH
82834: LD_INT 30
82836: PUSH
82837: LD_INT 1
82839: PUSH
82840: EMPTY
82841: LIST
82842: LIST
82843: PUSH
82844: EMPTY
82845: LIST
82846: LIST
82847: LIST
82848: PUSH
82849: EMPTY
82850: LIST
82851: LIST
82852: PPUSH
82853: CALL_OW 69
82857: ST_TO_ADDR
// if not depot then
82858: LD_VAR 0 1
82862: NOT
82863: IFFALSE 82867
// exit ;
82865: GO 82941
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
82867: LD_ADDR_VAR 0 2
82871: PUSH
82872: LD_VAR 0 1
82876: PUSH
82877: LD_INT 1
82879: PPUSH
82880: LD_VAR 0 1
82884: PPUSH
82885: CALL_OW 12
82889: ARRAY
82890: PPUSH
82891: CALL_OW 274
82895: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
82896: LD_VAR 0 2
82900: PPUSH
82901: LD_INT 1
82903: PPUSH
82904: LD_INT 0
82906: PPUSH
82907: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
82911: LD_VAR 0 2
82915: PPUSH
82916: LD_INT 2
82918: PPUSH
82919: LD_INT 0
82921: PPUSH
82922: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
82926: LD_VAR 0 2
82930: PPUSH
82931: LD_INT 3
82933: PPUSH
82934: LD_INT 0
82936: PPUSH
82937: CALL_OW 277
// end ;
82941: PPOPN 2
82943: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
82944: LD_EXP 75
82948: IFFALSE 82956
82950: PUSH
82951: LD_EXP 103
82955: AND
82956: IFFALSE 83053
82958: GO 82960
82960: DISABLE
82961: LD_INT 0
82963: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82964: LD_ADDR_VAR 0 1
82968: PUSH
82969: LD_INT 22
82971: PUSH
82972: LD_OWVAR 2
82976: PUSH
82977: EMPTY
82978: LIST
82979: LIST
82980: PUSH
82981: LD_INT 21
82983: PUSH
82984: LD_INT 1
82986: PUSH
82987: EMPTY
82988: LIST
82989: LIST
82990: PUSH
82991: LD_INT 3
82993: PUSH
82994: LD_INT 23
82996: PUSH
82997: LD_INT 0
82999: PUSH
83000: EMPTY
83001: LIST
83002: LIST
83003: PUSH
83004: EMPTY
83005: LIST
83006: LIST
83007: PUSH
83008: EMPTY
83009: LIST
83010: LIST
83011: LIST
83012: PPUSH
83013: CALL_OW 69
83017: ST_TO_ADDR
// if not tmp then
83018: LD_VAR 0 1
83022: NOT
83023: IFFALSE 83027
// exit ;
83025: GO 83053
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
83027: LD_VAR 0 1
83031: PUSH
83032: LD_INT 1
83034: PPUSH
83035: LD_VAR 0 1
83039: PPUSH
83040: CALL_OW 12
83044: ARRAY
83045: PPUSH
83046: LD_INT 200
83048: PPUSH
83049: CALL_OW 234
// end ;
83053: PPOPN 1
83055: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
83056: LD_EXP 75
83060: IFFALSE 83068
83062: PUSH
83063: LD_EXP 104
83067: AND
83068: IFFALSE 83147
83070: GO 83072
83072: DISABLE
83073: LD_INT 0
83075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
83076: LD_ADDR_VAR 0 1
83080: PUSH
83081: LD_INT 22
83083: PUSH
83084: LD_OWVAR 2
83088: PUSH
83089: EMPTY
83090: LIST
83091: LIST
83092: PUSH
83093: LD_INT 21
83095: PUSH
83096: LD_INT 2
83098: PUSH
83099: EMPTY
83100: LIST
83101: LIST
83102: PUSH
83103: EMPTY
83104: LIST
83105: LIST
83106: PPUSH
83107: CALL_OW 69
83111: ST_TO_ADDR
// if not tmp then
83112: LD_VAR 0 1
83116: NOT
83117: IFFALSE 83121
// exit ;
83119: GO 83147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
83121: LD_VAR 0 1
83125: PUSH
83126: LD_INT 1
83128: PPUSH
83129: LD_VAR 0 1
83133: PPUSH
83134: CALL_OW 12
83138: ARRAY
83139: PPUSH
83140: LD_INT 60
83142: PPUSH
83143: CALL_OW 234
// end ;
83147: PPOPN 1
83149: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
83150: LD_EXP 75
83154: IFFALSE 83162
83156: PUSH
83157: LD_EXP 105
83161: AND
83162: IFFALSE 83261
83164: GO 83166
83166: DISABLE
83167: LD_INT 0
83169: PPUSH
83170: PPUSH
// begin enable ;
83171: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
83172: LD_ADDR_VAR 0 1
83176: PUSH
83177: LD_INT 22
83179: PUSH
83180: LD_OWVAR 2
83184: PUSH
83185: EMPTY
83186: LIST
83187: LIST
83188: PUSH
83189: LD_INT 61
83191: PUSH
83192: EMPTY
83193: LIST
83194: PUSH
83195: LD_INT 33
83197: PUSH
83198: LD_INT 2
83200: PUSH
83201: EMPTY
83202: LIST
83203: LIST
83204: PUSH
83205: EMPTY
83206: LIST
83207: LIST
83208: LIST
83209: PPUSH
83210: CALL_OW 69
83214: ST_TO_ADDR
// if not tmp then
83215: LD_VAR 0 1
83219: NOT
83220: IFFALSE 83224
// exit ;
83222: GO 83261
// for i in tmp do
83224: LD_ADDR_VAR 0 2
83228: PUSH
83229: LD_VAR 0 1
83233: PUSH
83234: FOR_IN
83235: IFFALSE 83259
// if IsControledBy ( i ) then
83237: LD_VAR 0 2
83241: PPUSH
83242: CALL_OW 312
83246: IFFALSE 83257
// ComUnlink ( i ) ;
83248: LD_VAR 0 2
83252: PPUSH
83253: CALL_OW 136
83257: GO 83234
83259: POP
83260: POP
// end ;
83261: PPOPN 2
83263: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
83264: LD_EXP 75
83268: IFFALSE 83276
83270: PUSH
83271: LD_EXP 106
83275: AND
83276: IFFALSE 83416
83278: GO 83280
83280: DISABLE
83281: LD_INT 0
83283: PPUSH
83284: PPUSH
// begin ToLua ( displayPowell(); ) ;
83285: LD_STRING displayPowell();
83287: PPUSH
83288: CALL_OW 559
// uc_side := 0 ;
83292: LD_ADDR_OWVAR 20
83296: PUSH
83297: LD_INT 0
83299: ST_TO_ADDR
// uc_nation := 2 ;
83300: LD_ADDR_OWVAR 21
83304: PUSH
83305: LD_INT 2
83307: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
83308: LD_ADDR_OWVAR 37
83312: PUSH
83313: LD_INT 14
83315: ST_TO_ADDR
// vc_engine := engine_siberite ;
83316: LD_ADDR_OWVAR 39
83320: PUSH
83321: LD_INT 3
83323: ST_TO_ADDR
// vc_control := control_apeman ;
83324: LD_ADDR_OWVAR 38
83328: PUSH
83329: LD_INT 5
83331: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
83332: LD_ADDR_OWVAR 40
83336: PUSH
83337: LD_INT 29
83339: ST_TO_ADDR
// un := CreateVehicle ;
83340: LD_ADDR_VAR 0 2
83344: PUSH
83345: CALL_OW 45
83349: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83350: LD_VAR 0 2
83354: PPUSH
83355: LD_INT 1
83357: PPUSH
83358: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83362: LD_INT 35
83364: PPUSH
83365: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83369: LD_VAR 0 2
83373: PPUSH
83374: LD_INT 22
83376: PUSH
83377: LD_OWVAR 2
83381: PUSH
83382: EMPTY
83383: LIST
83384: LIST
83385: PPUSH
83386: CALL_OW 69
83390: PPUSH
83391: LD_VAR 0 2
83395: PPUSH
83396: CALL_OW 74
83400: PPUSH
83401: CALL_OW 115
// until IsDead ( un ) ;
83405: LD_VAR 0 2
83409: PPUSH
83410: CALL_OW 301
83414: IFFALSE 83362
// end ;
83416: PPOPN 2
83418: END
// every 0 0$1 trigger StreamModeActive and sStu do
83419: LD_EXP 75
83423: IFFALSE 83431
83425: PUSH
83426: LD_EXP 114
83430: AND
83431: IFFALSE 83447
83433: GO 83435
83435: DISABLE
// begin ToLua ( displayStucuk(); ) ;
83436: LD_STRING displayStucuk();
83438: PPUSH
83439: CALL_OW 559
// ResetFog ;
83443: CALL_OW 335
// end ;
83447: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
83448: LD_EXP 75
83452: IFFALSE 83460
83454: PUSH
83455: LD_EXP 107
83459: AND
83460: IFFALSE 83601
83462: GO 83464
83464: DISABLE
83465: LD_INT 0
83467: PPUSH
83468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83469: LD_ADDR_VAR 0 2
83473: PUSH
83474: LD_INT 22
83476: PUSH
83477: LD_OWVAR 2
83481: PUSH
83482: EMPTY
83483: LIST
83484: LIST
83485: PUSH
83486: LD_INT 21
83488: PUSH
83489: LD_INT 1
83491: PUSH
83492: EMPTY
83493: LIST
83494: LIST
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: PPUSH
83500: CALL_OW 69
83504: ST_TO_ADDR
// if not tmp then
83505: LD_VAR 0 2
83509: NOT
83510: IFFALSE 83514
// exit ;
83512: GO 83601
// un := tmp [ rand ( 1 , tmp ) ] ;
83514: LD_ADDR_VAR 0 1
83518: PUSH
83519: LD_VAR 0 2
83523: PUSH
83524: LD_INT 1
83526: PPUSH
83527: LD_VAR 0 2
83531: PPUSH
83532: CALL_OW 12
83536: ARRAY
83537: ST_TO_ADDR
// SetSide ( un , 0 ) ;
83538: LD_VAR 0 1
83542: PPUSH
83543: LD_INT 0
83545: PPUSH
83546: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
83550: LD_VAR 0 1
83554: PPUSH
83555: LD_OWVAR 3
83559: PUSH
83560: LD_VAR 0 1
83564: DIFF
83565: PPUSH
83566: LD_VAR 0 1
83570: PPUSH
83571: CALL_OW 74
83575: PPUSH
83576: CALL_OW 115
// wait ( 0 0$20 ) ;
83580: LD_INT 700
83582: PPUSH
83583: CALL_OW 67
// SetSide ( un , your_side ) ;
83587: LD_VAR 0 1
83591: PPUSH
83592: LD_OWVAR 2
83596: PPUSH
83597: CALL_OW 235
// end ;
83601: PPOPN 2
83603: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
83604: LD_EXP 75
83608: IFFALSE 83616
83610: PUSH
83611: LD_EXP 108
83615: AND
83616: IFFALSE 83722
83618: GO 83620
83620: DISABLE
83621: LD_INT 0
83623: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83624: LD_ADDR_VAR 0 1
83628: PUSH
83629: LD_INT 22
83631: PUSH
83632: LD_OWVAR 2
83636: PUSH
83637: EMPTY
83638: LIST
83639: LIST
83640: PUSH
83641: LD_INT 2
83643: PUSH
83644: LD_INT 30
83646: PUSH
83647: LD_INT 0
83649: PUSH
83650: EMPTY
83651: LIST
83652: LIST
83653: PUSH
83654: LD_INT 30
83656: PUSH
83657: LD_INT 1
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: LIST
83668: PUSH
83669: EMPTY
83670: LIST
83671: LIST
83672: PPUSH
83673: CALL_OW 69
83677: ST_TO_ADDR
// if not depot then
83678: LD_VAR 0 1
83682: NOT
83683: IFFALSE 83687
// exit ;
83685: GO 83722
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
83687: LD_VAR 0 1
83691: PUSH
83692: LD_INT 1
83694: ARRAY
83695: PPUSH
83696: CALL_OW 250
83700: PPUSH
83701: LD_VAR 0 1
83705: PUSH
83706: LD_INT 1
83708: ARRAY
83709: PPUSH
83710: CALL_OW 251
83714: PPUSH
83715: LD_INT 70
83717: PPUSH
83718: CALL_OW 495
// end ;
83722: PPOPN 1
83724: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
83725: LD_EXP 75
83729: IFFALSE 83737
83731: PUSH
83732: LD_EXP 109
83736: AND
83737: IFFALSE 83948
83739: GO 83741
83741: DISABLE
83742: LD_INT 0
83744: PPUSH
83745: PPUSH
83746: PPUSH
83747: PPUSH
83748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83749: LD_ADDR_VAR 0 5
83753: PUSH
83754: LD_INT 22
83756: PUSH
83757: LD_OWVAR 2
83761: PUSH
83762: EMPTY
83763: LIST
83764: LIST
83765: PUSH
83766: LD_INT 21
83768: PUSH
83769: LD_INT 1
83771: PUSH
83772: EMPTY
83773: LIST
83774: LIST
83775: PUSH
83776: EMPTY
83777: LIST
83778: LIST
83779: PPUSH
83780: CALL_OW 69
83784: ST_TO_ADDR
// if not tmp then
83785: LD_VAR 0 5
83789: NOT
83790: IFFALSE 83794
// exit ;
83792: GO 83948
// for i in tmp do
83794: LD_ADDR_VAR 0 1
83798: PUSH
83799: LD_VAR 0 5
83803: PUSH
83804: FOR_IN
83805: IFFALSE 83946
// begin d := rand ( 0 , 5 ) ;
83807: LD_ADDR_VAR 0 4
83811: PUSH
83812: LD_INT 0
83814: PPUSH
83815: LD_INT 5
83817: PPUSH
83818: CALL_OW 12
83822: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
83823: LD_ADDR_VAR 0 2
83827: PUSH
83828: LD_VAR 0 1
83832: PPUSH
83833: CALL_OW 250
83837: PPUSH
83838: LD_VAR 0 4
83842: PPUSH
83843: LD_INT 3
83845: PPUSH
83846: LD_INT 12
83848: PPUSH
83849: CALL_OW 12
83853: PPUSH
83854: CALL_OW 272
83858: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
83859: LD_ADDR_VAR 0 3
83863: PUSH
83864: LD_VAR 0 1
83868: PPUSH
83869: CALL_OW 251
83873: PPUSH
83874: LD_VAR 0 4
83878: PPUSH
83879: LD_INT 3
83881: PPUSH
83882: LD_INT 12
83884: PPUSH
83885: CALL_OW 12
83889: PPUSH
83890: CALL_OW 273
83894: ST_TO_ADDR
// if ValidHex ( x , y ) then
83895: LD_VAR 0 2
83899: PPUSH
83900: LD_VAR 0 3
83904: PPUSH
83905: CALL_OW 488
83909: IFFALSE 83944
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
83911: LD_VAR 0 1
83915: PPUSH
83916: LD_VAR 0 2
83920: PPUSH
83921: LD_VAR 0 3
83925: PPUSH
83926: LD_INT 3
83928: PPUSH
83929: LD_INT 6
83931: PPUSH
83932: CALL_OW 12
83936: PPUSH
83937: LD_INT 1
83939: PPUSH
83940: CALL_OW 483
// end ;
83944: GO 83804
83946: POP
83947: POP
// end ;
83948: PPOPN 5
83950: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
83951: LD_EXP 75
83955: IFFALSE 83963
83957: PUSH
83958: LD_EXP 110
83962: AND
83963: IFFALSE 84057
83965: GO 83967
83967: DISABLE
83968: LD_INT 0
83970: PPUSH
83971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
83972: LD_ADDR_VAR 0 2
83976: PUSH
83977: LD_INT 22
83979: PUSH
83980: LD_OWVAR 2
83984: PUSH
83985: EMPTY
83986: LIST
83987: LIST
83988: PUSH
83989: LD_INT 32
83991: PUSH
83992: LD_INT 1
83994: PUSH
83995: EMPTY
83996: LIST
83997: LIST
83998: PUSH
83999: LD_INT 21
84001: PUSH
84002: LD_INT 2
84004: PUSH
84005: EMPTY
84006: LIST
84007: LIST
84008: PUSH
84009: EMPTY
84010: LIST
84011: LIST
84012: LIST
84013: PPUSH
84014: CALL_OW 69
84018: ST_TO_ADDR
// if not tmp then
84019: LD_VAR 0 2
84023: NOT
84024: IFFALSE 84028
// exit ;
84026: GO 84057
// for i in tmp do
84028: LD_ADDR_VAR 0 1
84032: PUSH
84033: LD_VAR 0 2
84037: PUSH
84038: FOR_IN
84039: IFFALSE 84055
// SetFuel ( i , 0 ) ;
84041: LD_VAR 0 1
84045: PPUSH
84046: LD_INT 0
84048: PPUSH
84049: CALL_OW 240
84053: GO 84038
84055: POP
84056: POP
// end ;
84057: PPOPN 2
84059: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
84060: LD_EXP 75
84064: IFFALSE 84072
84066: PUSH
84067: LD_EXP 111
84071: AND
84072: IFFALSE 84138
84074: GO 84076
84076: DISABLE
84077: LD_INT 0
84079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
84080: LD_ADDR_VAR 0 1
84084: PUSH
84085: LD_INT 22
84087: PUSH
84088: LD_OWVAR 2
84092: PUSH
84093: EMPTY
84094: LIST
84095: LIST
84096: PUSH
84097: LD_INT 30
84099: PUSH
84100: LD_INT 29
84102: PUSH
84103: EMPTY
84104: LIST
84105: LIST
84106: PUSH
84107: EMPTY
84108: LIST
84109: LIST
84110: PPUSH
84111: CALL_OW 69
84115: ST_TO_ADDR
// if not tmp then
84116: LD_VAR 0 1
84120: NOT
84121: IFFALSE 84125
// exit ;
84123: GO 84138
// DestroyUnit ( tmp [ 1 ] ) ;
84125: LD_VAR 0 1
84129: PUSH
84130: LD_INT 1
84132: ARRAY
84133: PPUSH
84134: CALL_OW 65
// end ;
84138: PPOPN 1
84140: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
84141: LD_EXP 75
84145: IFFALSE 84153
84147: PUSH
84148: LD_EXP 113
84152: AND
84153: IFFALSE 84282
84155: GO 84157
84157: DISABLE
84158: LD_INT 0
84160: PPUSH
// begin uc_side := 0 ;
84161: LD_ADDR_OWVAR 20
84165: PUSH
84166: LD_INT 0
84168: ST_TO_ADDR
// uc_nation := nation_arabian ;
84169: LD_ADDR_OWVAR 21
84173: PUSH
84174: LD_INT 2
84176: ST_TO_ADDR
// hc_gallery :=  ;
84177: LD_ADDR_OWVAR 33
84181: PUSH
84182: LD_STRING 
84184: ST_TO_ADDR
// hc_name :=  ;
84185: LD_ADDR_OWVAR 26
84189: PUSH
84190: LD_STRING 
84192: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
84193: LD_INT 1
84195: PPUSH
84196: LD_INT 11
84198: PPUSH
84199: LD_INT 10
84201: PPUSH
84202: CALL_OW 380
// un := CreateHuman ;
84206: LD_ADDR_VAR 0 1
84210: PUSH
84211: CALL_OW 44
84215: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84216: LD_VAR 0 1
84220: PPUSH
84221: LD_INT 1
84223: PPUSH
84224: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
84228: LD_INT 35
84230: PPUSH
84231: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
84235: LD_VAR 0 1
84239: PPUSH
84240: LD_INT 22
84242: PUSH
84243: LD_OWVAR 2
84247: PUSH
84248: EMPTY
84249: LIST
84250: LIST
84251: PPUSH
84252: CALL_OW 69
84256: PPUSH
84257: LD_VAR 0 1
84261: PPUSH
84262: CALL_OW 74
84266: PPUSH
84267: CALL_OW 115
// until IsDead ( un ) ;
84271: LD_VAR 0 1
84275: PPUSH
84276: CALL_OW 301
84280: IFFALSE 84228
// end ;
84282: PPOPN 1
84284: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
84285: LD_EXP 75
84289: IFFALSE 84297
84291: PUSH
84292: LD_EXP 115
84296: AND
84297: IFFALSE 84309
84299: GO 84301
84301: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
84302: LD_STRING earthquake(getX(game), 0, 32)
84304: PPUSH
84305: CALL_OW 559
84309: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
84310: LD_EXP 75
84314: IFFALSE 84322
84316: PUSH
84317: LD_EXP 116
84321: AND
84322: IFFALSE 84413
84324: GO 84326
84326: DISABLE
84327: LD_INT 0
84329: PPUSH
// begin enable ;
84330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
84331: LD_ADDR_VAR 0 1
84335: PUSH
84336: LD_INT 22
84338: PUSH
84339: LD_OWVAR 2
84343: PUSH
84344: EMPTY
84345: LIST
84346: LIST
84347: PUSH
84348: LD_INT 21
84350: PUSH
84351: LD_INT 2
84353: PUSH
84354: EMPTY
84355: LIST
84356: LIST
84357: PUSH
84358: LD_INT 33
84360: PUSH
84361: LD_INT 3
84363: PUSH
84364: EMPTY
84365: LIST
84366: LIST
84367: PUSH
84368: EMPTY
84369: LIST
84370: LIST
84371: LIST
84372: PPUSH
84373: CALL_OW 69
84377: ST_TO_ADDR
// if not tmp then
84378: LD_VAR 0 1
84382: NOT
84383: IFFALSE 84387
// exit ;
84385: GO 84413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
84387: LD_VAR 0 1
84391: PUSH
84392: LD_INT 1
84394: PPUSH
84395: LD_VAR 0 1
84399: PPUSH
84400: CALL_OW 12
84404: ARRAY
84405: PPUSH
84406: LD_INT 1
84408: PPUSH
84409: CALL_OW 234
// end ;
84413: PPOPN 1
84415: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
84416: LD_EXP 75
84420: IFFALSE 84428
84422: PUSH
84423: LD_EXP 117
84427: AND
84428: IFFALSE 84569
84430: GO 84432
84432: DISABLE
84433: LD_INT 0
84435: PPUSH
84436: PPUSH
84437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84438: LD_ADDR_VAR 0 3
84442: PUSH
84443: LD_INT 22
84445: PUSH
84446: LD_OWVAR 2
84450: PUSH
84451: EMPTY
84452: LIST
84453: LIST
84454: PUSH
84455: LD_INT 25
84457: PUSH
84458: LD_INT 1
84460: PUSH
84461: EMPTY
84462: LIST
84463: LIST
84464: PUSH
84465: EMPTY
84466: LIST
84467: LIST
84468: PPUSH
84469: CALL_OW 69
84473: ST_TO_ADDR
// if not tmp then
84474: LD_VAR 0 3
84478: NOT
84479: IFFALSE 84483
// exit ;
84481: GO 84569
// un := tmp [ rand ( 1 , tmp ) ] ;
84483: LD_ADDR_VAR 0 2
84487: PUSH
84488: LD_VAR 0 3
84492: PUSH
84493: LD_INT 1
84495: PPUSH
84496: LD_VAR 0 3
84500: PPUSH
84501: CALL_OW 12
84505: ARRAY
84506: ST_TO_ADDR
// if Crawls ( un ) then
84507: LD_VAR 0 2
84511: PPUSH
84512: CALL_OW 318
84516: IFFALSE 84527
// ComWalk ( un ) ;
84518: LD_VAR 0 2
84522: PPUSH
84523: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
84527: LD_VAR 0 2
84531: PPUSH
84532: LD_INT 9
84534: PPUSH
84535: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
84539: LD_INT 28
84541: PPUSH
84542: LD_OWVAR 2
84546: PPUSH
84547: LD_INT 2
84549: PPUSH
84550: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
84554: LD_INT 29
84556: PPUSH
84557: LD_OWVAR 2
84561: PPUSH
84562: LD_INT 2
84564: PPUSH
84565: CALL_OW 322
// end ;
84569: PPOPN 3
84571: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
84572: LD_EXP 75
84576: IFFALSE 84584
84578: PUSH
84579: LD_EXP 118
84583: AND
84584: IFFALSE 84695
84586: GO 84588
84588: DISABLE
84589: LD_INT 0
84591: PPUSH
84592: PPUSH
84593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84594: LD_ADDR_VAR 0 3
84598: PUSH
84599: LD_INT 22
84601: PUSH
84602: LD_OWVAR 2
84606: PUSH
84607: EMPTY
84608: LIST
84609: LIST
84610: PUSH
84611: LD_INT 25
84613: PUSH
84614: LD_INT 1
84616: PUSH
84617: EMPTY
84618: LIST
84619: LIST
84620: PUSH
84621: EMPTY
84622: LIST
84623: LIST
84624: PPUSH
84625: CALL_OW 69
84629: ST_TO_ADDR
// if not tmp then
84630: LD_VAR 0 3
84634: NOT
84635: IFFALSE 84639
// exit ;
84637: GO 84695
// un := tmp [ rand ( 1 , tmp ) ] ;
84639: LD_ADDR_VAR 0 2
84643: PUSH
84644: LD_VAR 0 3
84648: PUSH
84649: LD_INT 1
84651: PPUSH
84652: LD_VAR 0 3
84656: PPUSH
84657: CALL_OW 12
84661: ARRAY
84662: ST_TO_ADDR
// if Crawls ( un ) then
84663: LD_VAR 0 2
84667: PPUSH
84668: CALL_OW 318
84672: IFFALSE 84683
// ComWalk ( un ) ;
84674: LD_VAR 0 2
84678: PPUSH
84679: CALL_OW 138
// SetClass ( un , class_mortar ) ;
84683: LD_VAR 0 2
84687: PPUSH
84688: LD_INT 8
84690: PPUSH
84691: CALL_OW 336
// end ;
84695: PPOPN 3
84697: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
84698: LD_EXP 75
84702: IFFALSE 84710
84704: PUSH
84705: LD_EXP 119
84709: AND
84710: IFFALSE 84854
84712: GO 84714
84714: DISABLE
84715: LD_INT 0
84717: PPUSH
84718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
84719: LD_ADDR_VAR 0 2
84723: PUSH
84724: LD_INT 22
84726: PUSH
84727: LD_OWVAR 2
84731: PUSH
84732: EMPTY
84733: LIST
84734: LIST
84735: PUSH
84736: LD_INT 21
84738: PUSH
84739: LD_INT 2
84741: PUSH
84742: EMPTY
84743: LIST
84744: LIST
84745: PUSH
84746: LD_INT 2
84748: PUSH
84749: LD_INT 34
84751: PUSH
84752: LD_INT 12
84754: PUSH
84755: EMPTY
84756: LIST
84757: LIST
84758: PUSH
84759: LD_INT 34
84761: PUSH
84762: LD_INT 51
84764: PUSH
84765: EMPTY
84766: LIST
84767: LIST
84768: PUSH
84769: LD_INT 34
84771: PUSH
84772: LD_INT 32
84774: PUSH
84775: EMPTY
84776: LIST
84777: LIST
84778: PUSH
84779: EMPTY
84780: LIST
84781: LIST
84782: LIST
84783: LIST
84784: PUSH
84785: EMPTY
84786: LIST
84787: LIST
84788: LIST
84789: PPUSH
84790: CALL_OW 69
84794: ST_TO_ADDR
// if not tmp then
84795: LD_VAR 0 2
84799: NOT
84800: IFFALSE 84804
// exit ;
84802: GO 84854
// for i in tmp do
84804: LD_ADDR_VAR 0 1
84808: PUSH
84809: LD_VAR 0 2
84813: PUSH
84814: FOR_IN
84815: IFFALSE 84852
// if GetCargo ( i , mat_artifact ) = 0 then
84817: LD_VAR 0 1
84821: PPUSH
84822: LD_INT 4
84824: PPUSH
84825: CALL_OW 289
84829: PUSH
84830: LD_INT 0
84832: EQUAL
84833: IFFALSE 84850
// SetCargo ( i , mat_siberit , 100 ) ;
84835: LD_VAR 0 1
84839: PPUSH
84840: LD_INT 3
84842: PPUSH
84843: LD_INT 100
84845: PPUSH
84846: CALL_OW 290
84850: GO 84814
84852: POP
84853: POP
// end ;
84854: PPOPN 2
84856: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
84857: LD_EXP 75
84861: IFFALSE 84869
84863: PUSH
84864: LD_EXP 120
84868: AND
84869: IFFALSE 85052
84871: GO 84873
84873: DISABLE
84874: LD_INT 0
84876: PPUSH
84877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84878: LD_ADDR_VAR 0 2
84882: PUSH
84883: LD_INT 22
84885: PUSH
84886: LD_OWVAR 2
84890: PUSH
84891: EMPTY
84892: LIST
84893: LIST
84894: PPUSH
84895: CALL_OW 69
84899: ST_TO_ADDR
// if not tmp then
84900: LD_VAR 0 2
84904: NOT
84905: IFFALSE 84909
// exit ;
84907: GO 85052
// for i := 1 to 2 do
84909: LD_ADDR_VAR 0 1
84913: PUSH
84914: DOUBLE
84915: LD_INT 1
84917: DEC
84918: ST_TO_ADDR
84919: LD_INT 2
84921: PUSH
84922: FOR_TO
84923: IFFALSE 85050
// begin uc_side := your_side ;
84925: LD_ADDR_OWVAR 20
84929: PUSH
84930: LD_OWVAR 2
84934: ST_TO_ADDR
// uc_nation := nation_american ;
84935: LD_ADDR_OWVAR 21
84939: PUSH
84940: LD_INT 1
84942: ST_TO_ADDR
// vc_chassis := us_morphling ;
84943: LD_ADDR_OWVAR 37
84947: PUSH
84948: LD_INT 5
84950: ST_TO_ADDR
// vc_engine := engine_siberite ;
84951: LD_ADDR_OWVAR 39
84955: PUSH
84956: LD_INT 3
84958: ST_TO_ADDR
// vc_control := control_computer ;
84959: LD_ADDR_OWVAR 38
84963: PUSH
84964: LD_INT 3
84966: ST_TO_ADDR
// vc_weapon := us_double_laser ;
84967: LD_ADDR_OWVAR 40
84971: PUSH
84972: LD_INT 10
84974: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
84975: LD_VAR 0 2
84979: PUSH
84980: LD_INT 1
84982: ARRAY
84983: PPUSH
84984: CALL_OW 310
84988: NOT
84989: IFFALSE 85036
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
84991: CALL_OW 45
84995: PPUSH
84996: LD_VAR 0 2
85000: PUSH
85001: LD_INT 1
85003: ARRAY
85004: PPUSH
85005: CALL_OW 250
85009: PPUSH
85010: LD_VAR 0 2
85014: PUSH
85015: LD_INT 1
85017: ARRAY
85018: PPUSH
85019: CALL_OW 251
85023: PPUSH
85024: LD_INT 12
85026: PPUSH
85027: LD_INT 1
85029: PPUSH
85030: CALL_OW 50
85034: GO 85048
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
85036: CALL_OW 45
85040: PPUSH
85041: LD_INT 1
85043: PPUSH
85044: CALL_OW 51
// end ;
85048: GO 84922
85050: POP
85051: POP
// end ;
85052: PPOPN 2
85054: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
85055: LD_EXP 75
85059: IFFALSE 85067
85061: PUSH
85062: LD_EXP 121
85066: AND
85067: IFFALSE 85289
85069: GO 85071
85071: DISABLE
85072: LD_INT 0
85074: PPUSH
85075: PPUSH
85076: PPUSH
85077: PPUSH
85078: PPUSH
85079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85080: LD_ADDR_VAR 0 6
85084: PUSH
85085: LD_INT 22
85087: PUSH
85088: LD_OWVAR 2
85092: PUSH
85093: EMPTY
85094: LIST
85095: LIST
85096: PUSH
85097: LD_INT 21
85099: PUSH
85100: LD_INT 1
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: PUSH
85107: LD_INT 3
85109: PUSH
85110: LD_INT 23
85112: PUSH
85113: LD_INT 0
85115: PUSH
85116: EMPTY
85117: LIST
85118: LIST
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: LIST
85128: PPUSH
85129: CALL_OW 69
85133: ST_TO_ADDR
// if not tmp then
85134: LD_VAR 0 6
85138: NOT
85139: IFFALSE 85143
// exit ;
85141: GO 85289
// s1 := rand ( 1 , 4 ) ;
85143: LD_ADDR_VAR 0 2
85147: PUSH
85148: LD_INT 1
85150: PPUSH
85151: LD_INT 4
85153: PPUSH
85154: CALL_OW 12
85158: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
85159: LD_ADDR_VAR 0 4
85163: PUSH
85164: LD_VAR 0 6
85168: PUSH
85169: LD_INT 1
85171: ARRAY
85172: PPUSH
85173: LD_VAR 0 2
85177: PPUSH
85178: CALL_OW 259
85182: ST_TO_ADDR
// if s1 = 1 then
85183: LD_VAR 0 2
85187: PUSH
85188: LD_INT 1
85190: EQUAL
85191: IFFALSE 85211
// s2 := rand ( 2 , 4 ) else
85193: LD_ADDR_VAR 0 3
85197: PUSH
85198: LD_INT 2
85200: PPUSH
85201: LD_INT 4
85203: PPUSH
85204: CALL_OW 12
85208: ST_TO_ADDR
85209: GO 85219
// s2 := 1 ;
85211: LD_ADDR_VAR 0 3
85215: PUSH
85216: LD_INT 1
85218: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
85219: LD_ADDR_VAR 0 5
85223: PUSH
85224: LD_VAR 0 6
85228: PUSH
85229: LD_INT 1
85231: ARRAY
85232: PPUSH
85233: LD_VAR 0 3
85237: PPUSH
85238: CALL_OW 259
85242: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
85243: LD_VAR 0 6
85247: PUSH
85248: LD_INT 1
85250: ARRAY
85251: PPUSH
85252: LD_VAR 0 2
85256: PPUSH
85257: LD_VAR 0 5
85261: PPUSH
85262: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
85266: LD_VAR 0 6
85270: PUSH
85271: LD_INT 1
85273: ARRAY
85274: PPUSH
85275: LD_VAR 0 3
85279: PPUSH
85280: LD_VAR 0 4
85284: PPUSH
85285: CALL_OW 237
// end ;
85289: PPOPN 6
85291: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
85292: LD_EXP 75
85296: IFFALSE 85304
85298: PUSH
85299: LD_EXP 122
85303: AND
85304: IFFALSE 85383
85306: GO 85308
85308: DISABLE
85309: LD_INT 0
85311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
85312: LD_ADDR_VAR 0 1
85316: PUSH
85317: LD_INT 22
85319: PUSH
85320: LD_OWVAR 2
85324: PUSH
85325: EMPTY
85326: LIST
85327: LIST
85328: PUSH
85329: LD_INT 30
85331: PUSH
85332: LD_INT 3
85334: PUSH
85335: EMPTY
85336: LIST
85337: LIST
85338: PUSH
85339: EMPTY
85340: LIST
85341: LIST
85342: PPUSH
85343: CALL_OW 69
85347: ST_TO_ADDR
// if not tmp then
85348: LD_VAR 0 1
85352: NOT
85353: IFFALSE 85357
// exit ;
85355: GO 85383
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
85357: LD_VAR 0 1
85361: PUSH
85362: LD_INT 1
85364: PPUSH
85365: LD_VAR 0 1
85369: PPUSH
85370: CALL_OW 12
85374: ARRAY
85375: PPUSH
85376: LD_INT 1
85378: PPUSH
85379: CALL_OW 234
// end ;
85383: PPOPN 1
85385: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
85386: LD_EXP 75
85390: IFFALSE 85398
85392: PUSH
85393: LD_EXP 123
85397: AND
85398: IFFALSE 85510
85400: GO 85402
85402: DISABLE
85403: LD_INT 0
85405: PPUSH
85406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
85407: LD_ADDR_VAR 0 2
85411: PUSH
85412: LD_INT 22
85414: PUSH
85415: LD_OWVAR 2
85419: PUSH
85420: EMPTY
85421: LIST
85422: LIST
85423: PUSH
85424: LD_INT 2
85426: PUSH
85427: LD_INT 30
85429: PUSH
85430: LD_INT 27
85432: PUSH
85433: EMPTY
85434: LIST
85435: LIST
85436: PUSH
85437: LD_INT 30
85439: PUSH
85440: LD_INT 26
85442: PUSH
85443: EMPTY
85444: LIST
85445: LIST
85446: PUSH
85447: LD_INT 30
85449: PUSH
85450: LD_INT 28
85452: PUSH
85453: EMPTY
85454: LIST
85455: LIST
85456: PUSH
85457: EMPTY
85458: LIST
85459: LIST
85460: LIST
85461: LIST
85462: PUSH
85463: EMPTY
85464: LIST
85465: LIST
85466: PPUSH
85467: CALL_OW 69
85471: ST_TO_ADDR
// if not tmp then
85472: LD_VAR 0 2
85476: NOT
85477: IFFALSE 85481
// exit ;
85479: GO 85510
// for i in tmp do
85481: LD_ADDR_VAR 0 1
85485: PUSH
85486: LD_VAR 0 2
85490: PUSH
85491: FOR_IN
85492: IFFALSE 85508
// SetLives ( i , 1 ) ;
85494: LD_VAR 0 1
85498: PPUSH
85499: LD_INT 1
85501: PPUSH
85502: CALL_OW 234
85506: GO 85491
85508: POP
85509: POP
// end ;
85510: PPOPN 2
85512: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
85513: LD_EXP 75
85517: IFFALSE 85525
85519: PUSH
85520: LD_EXP 124
85524: AND
85525: IFFALSE 85812
85527: GO 85529
85529: DISABLE
85530: LD_INT 0
85532: PPUSH
85533: PPUSH
85534: PPUSH
// begin i := rand ( 1 , 7 ) ;
85535: LD_ADDR_VAR 0 1
85539: PUSH
85540: LD_INT 1
85542: PPUSH
85543: LD_INT 7
85545: PPUSH
85546: CALL_OW 12
85550: ST_TO_ADDR
// case i of 1 :
85551: LD_VAR 0 1
85555: PUSH
85556: LD_INT 1
85558: DOUBLE
85559: EQUAL
85560: IFTRUE 85564
85562: GO 85574
85564: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
85565: LD_STRING earthquake(getX(game), 0, 32)
85567: PPUSH
85568: CALL_OW 559
85572: GO 85812
85574: LD_INT 2
85576: DOUBLE
85577: EQUAL
85578: IFTRUE 85582
85580: GO 85596
85582: POP
// begin ToLua ( displayStucuk(); ) ;
85583: LD_STRING displayStucuk();
85585: PPUSH
85586: CALL_OW 559
// ResetFog ;
85590: CALL_OW 335
// end ; 3 :
85594: GO 85812
85596: LD_INT 3
85598: DOUBLE
85599: EQUAL
85600: IFTRUE 85604
85602: GO 85708
85604: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
85605: LD_ADDR_VAR 0 2
85609: PUSH
85610: LD_INT 22
85612: PUSH
85613: LD_OWVAR 2
85617: PUSH
85618: EMPTY
85619: LIST
85620: LIST
85621: PUSH
85622: LD_INT 25
85624: PUSH
85625: LD_INT 1
85627: PUSH
85628: EMPTY
85629: LIST
85630: LIST
85631: PUSH
85632: EMPTY
85633: LIST
85634: LIST
85635: PPUSH
85636: CALL_OW 69
85640: ST_TO_ADDR
// if not tmp then
85641: LD_VAR 0 2
85645: NOT
85646: IFFALSE 85650
// exit ;
85648: GO 85812
// un := tmp [ rand ( 1 , tmp ) ] ;
85650: LD_ADDR_VAR 0 3
85654: PUSH
85655: LD_VAR 0 2
85659: PUSH
85660: LD_INT 1
85662: PPUSH
85663: LD_VAR 0 2
85667: PPUSH
85668: CALL_OW 12
85672: ARRAY
85673: ST_TO_ADDR
// if Crawls ( un ) then
85674: LD_VAR 0 3
85678: PPUSH
85679: CALL_OW 318
85683: IFFALSE 85694
// ComWalk ( un ) ;
85685: LD_VAR 0 3
85689: PPUSH
85690: CALL_OW 138
// SetClass ( un , class_mortar ) ;
85694: LD_VAR 0 3
85698: PPUSH
85699: LD_INT 8
85701: PPUSH
85702: CALL_OW 336
// end ; 4 :
85706: GO 85812
85708: LD_INT 4
85710: DOUBLE
85711: EQUAL
85712: IFTRUE 85716
85714: GO 85790
85716: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
85717: LD_ADDR_VAR 0 2
85721: PUSH
85722: LD_INT 22
85724: PUSH
85725: LD_OWVAR 2
85729: PUSH
85730: EMPTY
85731: LIST
85732: LIST
85733: PUSH
85734: LD_INT 30
85736: PUSH
85737: LD_INT 29
85739: PUSH
85740: EMPTY
85741: LIST
85742: LIST
85743: PUSH
85744: EMPTY
85745: LIST
85746: LIST
85747: PPUSH
85748: CALL_OW 69
85752: ST_TO_ADDR
// if not tmp then
85753: LD_VAR 0 2
85757: NOT
85758: IFFALSE 85762
// exit ;
85760: GO 85812
// CenterNowOnUnits ( tmp [ 1 ] ) ;
85762: LD_VAR 0 2
85766: PUSH
85767: LD_INT 1
85769: ARRAY
85770: PPUSH
85771: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
85775: LD_VAR 0 2
85779: PUSH
85780: LD_INT 1
85782: ARRAY
85783: PPUSH
85784: CALL_OW 65
// end ; 5 .. 7 :
85788: GO 85812
85790: LD_INT 5
85792: DOUBLE
85793: GREATEREQUAL
85794: IFFALSE 85802
85796: LD_INT 7
85798: DOUBLE
85799: LESSEQUAL
85800: IFTRUE 85804
85802: GO 85811
85804: POP
// StreamSibBomb ; end ;
85805: CALL 81993 0 0
85809: GO 85812
85811: POP
// end ;
85812: PPOPN 3
85814: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
85815: LD_EXP 75
85819: IFFALSE 85827
85821: PUSH
85822: LD_EXP 125
85826: AND
85827: IFFALSE 85983
85829: GO 85831
85831: DISABLE
85832: LD_INT 0
85834: PPUSH
85835: PPUSH
85836: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
85837: LD_ADDR_VAR 0 2
85841: PUSH
85842: LD_INT 81
85844: PUSH
85845: LD_OWVAR 2
85849: PUSH
85850: EMPTY
85851: LIST
85852: LIST
85853: PUSH
85854: LD_INT 2
85856: PUSH
85857: LD_INT 21
85859: PUSH
85860: LD_INT 1
85862: PUSH
85863: EMPTY
85864: LIST
85865: LIST
85866: PUSH
85867: LD_INT 21
85869: PUSH
85870: LD_INT 2
85872: PUSH
85873: EMPTY
85874: LIST
85875: LIST
85876: PUSH
85877: EMPTY
85878: LIST
85879: LIST
85880: LIST
85881: PUSH
85882: EMPTY
85883: LIST
85884: LIST
85885: PPUSH
85886: CALL_OW 69
85890: ST_TO_ADDR
// if not tmp then
85891: LD_VAR 0 2
85895: NOT
85896: IFFALSE 85900
// exit ;
85898: GO 85983
// p := 0 ;
85900: LD_ADDR_VAR 0 3
85904: PUSH
85905: LD_INT 0
85907: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85908: LD_INT 35
85910: PPUSH
85911: CALL_OW 67
// p := p + 1 ;
85915: LD_ADDR_VAR 0 3
85919: PUSH
85920: LD_VAR 0 3
85924: PUSH
85925: LD_INT 1
85927: PLUS
85928: ST_TO_ADDR
// for i in tmp do
85929: LD_ADDR_VAR 0 1
85933: PUSH
85934: LD_VAR 0 2
85938: PUSH
85939: FOR_IN
85940: IFFALSE 85971
// if GetLives ( i ) < 1000 then
85942: LD_VAR 0 1
85946: PPUSH
85947: CALL_OW 256
85951: PUSH
85952: LD_INT 1000
85954: LESS
85955: IFFALSE 85969
// SetLives ( i , 1000 ) ;
85957: LD_VAR 0 1
85961: PPUSH
85962: LD_INT 1000
85964: PPUSH
85965: CALL_OW 234
85969: GO 85939
85971: POP
85972: POP
// until p > 20 ;
85973: LD_VAR 0 3
85977: PUSH
85978: LD_INT 20
85980: GREATER
85981: IFFALSE 85908
// end ;
85983: PPOPN 3
85985: END
// every 0 0$1 trigger StreamModeActive and sTime do
85986: LD_EXP 75
85990: IFFALSE 85998
85992: PUSH
85993: LD_EXP 126
85997: AND
85998: IFFALSE 86033
86000: GO 86002
86002: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
86003: LD_INT 28
86005: PPUSH
86006: LD_OWVAR 2
86010: PPUSH
86011: LD_INT 2
86013: PPUSH
86014: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
86018: LD_INT 30
86020: PPUSH
86021: LD_OWVAR 2
86025: PPUSH
86026: LD_INT 2
86028: PPUSH
86029: CALL_OW 322
// end ;
86033: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
86034: LD_EXP 75
86038: IFFALSE 86046
86040: PUSH
86041: LD_EXP 127
86045: AND
86046: IFFALSE 86167
86048: GO 86050
86050: DISABLE
86051: LD_INT 0
86053: PPUSH
86054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
86055: LD_ADDR_VAR 0 2
86059: PUSH
86060: LD_INT 22
86062: PUSH
86063: LD_OWVAR 2
86067: PUSH
86068: EMPTY
86069: LIST
86070: LIST
86071: PUSH
86072: LD_INT 21
86074: PUSH
86075: LD_INT 1
86077: PUSH
86078: EMPTY
86079: LIST
86080: LIST
86081: PUSH
86082: LD_INT 3
86084: PUSH
86085: LD_INT 23
86087: PUSH
86088: LD_INT 0
86090: PUSH
86091: EMPTY
86092: LIST
86093: LIST
86094: PUSH
86095: EMPTY
86096: LIST
86097: LIST
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: LIST
86103: PPUSH
86104: CALL_OW 69
86108: ST_TO_ADDR
// if not tmp then
86109: LD_VAR 0 2
86113: NOT
86114: IFFALSE 86118
// exit ;
86116: GO 86167
// for i in tmp do
86118: LD_ADDR_VAR 0 1
86122: PUSH
86123: LD_VAR 0 2
86127: PUSH
86128: FOR_IN
86129: IFFALSE 86165
// begin if Crawls ( i ) then
86131: LD_VAR 0 1
86135: PPUSH
86136: CALL_OW 318
86140: IFFALSE 86151
// ComWalk ( i ) ;
86142: LD_VAR 0 1
86146: PPUSH
86147: CALL_OW 138
// SetClass ( i , 2 ) ;
86151: LD_VAR 0 1
86155: PPUSH
86156: LD_INT 2
86158: PPUSH
86159: CALL_OW 336
// end ;
86163: GO 86128
86165: POP
86166: POP
// end ;
86167: PPOPN 2
86169: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
86170: LD_EXP 75
86174: IFFALSE 86182
86176: PUSH
86177: LD_EXP 128
86181: AND
86182: IFFALSE 86472
86184: GO 86186
86186: DISABLE
86187: LD_INT 0
86189: PPUSH
86190: PPUSH
86191: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
86192: LD_OWVAR 2
86196: PPUSH
86197: LD_INT 9
86199: PPUSH
86200: LD_INT 1
86202: PPUSH
86203: LD_INT 1
86205: PPUSH
86206: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
86210: LD_INT 9
86212: PPUSH
86213: LD_OWVAR 2
86217: PPUSH
86218: CALL_OW 343
// uc_side := 9 ;
86222: LD_ADDR_OWVAR 20
86226: PUSH
86227: LD_INT 9
86229: ST_TO_ADDR
// uc_nation := 2 ;
86230: LD_ADDR_OWVAR 21
86234: PUSH
86235: LD_INT 2
86237: ST_TO_ADDR
// hc_name := Dark Warrior ;
86238: LD_ADDR_OWVAR 26
86242: PUSH
86243: LD_STRING Dark Warrior
86245: ST_TO_ADDR
// hc_gallery :=  ;
86246: LD_ADDR_OWVAR 33
86250: PUSH
86251: LD_STRING 
86253: ST_TO_ADDR
// hc_noskilllimit := true ;
86254: LD_ADDR_OWVAR 76
86258: PUSH
86259: LD_INT 1
86261: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
86262: LD_ADDR_OWVAR 31
86266: PUSH
86267: LD_INT 30
86269: PUSH
86270: LD_INT 30
86272: PUSH
86273: LD_INT 30
86275: PUSH
86276: LD_INT 30
86278: PUSH
86279: EMPTY
86280: LIST
86281: LIST
86282: LIST
86283: LIST
86284: ST_TO_ADDR
// un := CreateHuman ;
86285: LD_ADDR_VAR 0 3
86289: PUSH
86290: CALL_OW 44
86294: ST_TO_ADDR
// hc_noskilllimit := false ;
86295: LD_ADDR_OWVAR 76
86299: PUSH
86300: LD_INT 0
86302: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
86303: LD_VAR 0 3
86307: PPUSH
86308: LD_INT 1
86310: PPUSH
86311: CALL_OW 51
// ToLua ( playRanger() ) ;
86315: LD_STRING playRanger()
86317: PPUSH
86318: CALL_OW 559
// p := 0 ;
86322: LD_ADDR_VAR 0 2
86326: PUSH
86327: LD_INT 0
86329: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
86330: LD_INT 35
86332: PPUSH
86333: CALL_OW 67
// p := p + 1 ;
86337: LD_ADDR_VAR 0 2
86341: PUSH
86342: LD_VAR 0 2
86346: PUSH
86347: LD_INT 1
86349: PLUS
86350: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
86351: LD_VAR 0 3
86355: PPUSH
86356: CALL_OW 256
86360: PUSH
86361: LD_INT 1000
86363: LESS
86364: IFFALSE 86378
// SetLives ( un , 1000 ) ;
86366: LD_VAR 0 3
86370: PPUSH
86371: LD_INT 1000
86373: PPUSH
86374: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
86378: LD_VAR 0 3
86382: PPUSH
86383: LD_INT 81
86385: PUSH
86386: LD_OWVAR 2
86390: PUSH
86391: EMPTY
86392: LIST
86393: LIST
86394: PUSH
86395: LD_INT 91
86397: PUSH
86398: LD_VAR 0 3
86402: PUSH
86403: LD_INT 30
86405: PUSH
86406: EMPTY
86407: LIST
86408: LIST
86409: LIST
86410: PUSH
86411: EMPTY
86412: LIST
86413: LIST
86414: PPUSH
86415: CALL_OW 69
86419: PPUSH
86420: LD_VAR 0 3
86424: PPUSH
86425: CALL_OW 74
86429: PPUSH
86430: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
86434: LD_VAR 0 2
86438: PUSH
86439: LD_INT 80
86441: GREATER
86442: IFTRUE 86455
86444: PUSH
86445: LD_VAR 0 3
86449: PPUSH
86450: CALL_OW 301
86454: OR
86455: IFFALSE 86330
// if un then
86457: LD_VAR 0 3
86461: IFFALSE 86472
// RemoveUnit ( un ) ;
86463: LD_VAR 0 3
86467: PPUSH
86468: CALL_OW 64
// end ;
86472: PPOPN 3
86474: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
86475: LD_EXP 129
86479: IFFALSE 86595
86481: GO 86483
86483: DISABLE
86484: LD_INT 0
86486: PPUSH
86487: PPUSH
86488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
86489: LD_ADDR_VAR 0 2
86493: PUSH
86494: LD_INT 81
86496: PUSH
86497: LD_OWVAR 2
86501: PUSH
86502: EMPTY
86503: LIST
86504: LIST
86505: PUSH
86506: LD_INT 21
86508: PUSH
86509: LD_INT 1
86511: PUSH
86512: EMPTY
86513: LIST
86514: LIST
86515: PUSH
86516: EMPTY
86517: LIST
86518: LIST
86519: PPUSH
86520: CALL_OW 69
86524: ST_TO_ADDR
// ToLua ( playComputer() ) ;
86525: LD_STRING playComputer()
86527: PPUSH
86528: CALL_OW 559
// if not tmp then
86532: LD_VAR 0 2
86536: NOT
86537: IFFALSE 86541
// exit ;
86539: GO 86595
// for i in tmp do
86541: LD_ADDR_VAR 0 1
86545: PUSH
86546: LD_VAR 0 2
86550: PUSH
86551: FOR_IN
86552: IFFALSE 86593
// for j := 1 to 4 do
86554: LD_ADDR_VAR 0 3
86558: PUSH
86559: DOUBLE
86560: LD_INT 1
86562: DEC
86563: ST_TO_ADDR
86564: LD_INT 4
86566: PUSH
86567: FOR_TO
86568: IFFALSE 86589
// SetSkill ( i , j , 10 ) ;
86570: LD_VAR 0 1
86574: PPUSH
86575: LD_VAR 0 3
86579: PPUSH
86580: LD_INT 10
86582: PPUSH
86583: CALL_OW 237
86587: GO 86567
86589: POP
86590: POP
86591: GO 86551
86593: POP
86594: POP
// end ;
86595: PPOPN 3
86597: END
// every 0 0$1 trigger s30 do var i , tmp ;
86598: LD_EXP 130
86602: IFFALSE 86671
86604: GO 86606
86606: DISABLE
86607: LD_INT 0
86609: PPUSH
86610: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86611: LD_ADDR_VAR 0 2
86615: PUSH
86616: LD_INT 22
86618: PUSH
86619: LD_OWVAR 2
86623: PUSH
86624: EMPTY
86625: LIST
86626: LIST
86627: PPUSH
86628: CALL_OW 69
86632: ST_TO_ADDR
// if not tmp then
86633: LD_VAR 0 2
86637: NOT
86638: IFFALSE 86642
// exit ;
86640: GO 86671
// for i in tmp do
86642: LD_ADDR_VAR 0 1
86646: PUSH
86647: LD_VAR 0 2
86651: PUSH
86652: FOR_IN
86653: IFFALSE 86669
// SetLives ( i , 300 ) ;
86655: LD_VAR 0 1
86659: PPUSH
86660: LD_INT 300
86662: PPUSH
86663: CALL_OW 234
86667: GO 86652
86669: POP
86670: POP
// end ;
86671: PPOPN 2
86673: END
// every 0 0$1 trigger s60 do var i , tmp ;
86674: LD_EXP 131
86678: IFFALSE 86747
86680: GO 86682
86682: DISABLE
86683: LD_INT 0
86685: PPUSH
86686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86687: LD_ADDR_VAR 0 2
86691: PUSH
86692: LD_INT 22
86694: PUSH
86695: LD_OWVAR 2
86699: PUSH
86700: EMPTY
86701: LIST
86702: LIST
86703: PPUSH
86704: CALL_OW 69
86708: ST_TO_ADDR
// if not tmp then
86709: LD_VAR 0 2
86713: NOT
86714: IFFALSE 86718
// exit ;
86716: GO 86747
// for i in tmp do
86718: LD_ADDR_VAR 0 1
86722: PUSH
86723: LD_VAR 0 2
86727: PUSH
86728: FOR_IN
86729: IFFALSE 86745
// SetLives ( i , 600 ) ;
86731: LD_VAR 0 1
86735: PPUSH
86736: LD_INT 600
86738: PPUSH
86739: CALL_OW 234
86743: GO 86728
86745: POP
86746: POP
// end ;
86747: PPOPN 2
86749: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
86750: LD_INT 0
86752: PPUSH
// case cmd of 301 :
86753: LD_VAR 0 1
86757: PUSH
86758: LD_INT 301
86760: DOUBLE
86761: EQUAL
86762: IFTRUE 86766
86764: GO 86798
86766: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
86767: LD_VAR 0 6
86771: PPUSH
86772: LD_VAR 0 7
86776: PPUSH
86777: LD_VAR 0 8
86781: PPUSH
86782: LD_VAR 0 4
86786: PPUSH
86787: LD_VAR 0 5
86791: PPUSH
86792: CALL 88011 0 5
86796: GO 86919
86798: LD_INT 302
86800: DOUBLE
86801: EQUAL
86802: IFTRUE 86806
86804: GO 86843
86806: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
86807: LD_VAR 0 6
86811: PPUSH
86812: LD_VAR 0 7
86816: PPUSH
86817: LD_VAR 0 8
86821: PPUSH
86822: LD_VAR 0 9
86826: PPUSH
86827: LD_VAR 0 4
86831: PPUSH
86832: LD_VAR 0 5
86836: PPUSH
86837: CALL 88102 0 6
86841: GO 86919
86843: LD_INT 303
86845: DOUBLE
86846: EQUAL
86847: IFTRUE 86851
86849: GO 86888
86851: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
86852: LD_VAR 0 6
86856: PPUSH
86857: LD_VAR 0 7
86861: PPUSH
86862: LD_VAR 0 8
86866: PPUSH
86867: LD_VAR 0 9
86871: PPUSH
86872: LD_VAR 0 4
86876: PPUSH
86877: LD_VAR 0 5
86881: PPUSH
86882: CALL 86924 0 6
86886: GO 86919
86888: LD_INT 304
86890: DOUBLE
86891: EQUAL
86892: IFTRUE 86896
86894: GO 86918
86896: POP
// hHackTeleport ( unit , x , y ) ; end ;
86897: LD_VAR 0 2
86901: PPUSH
86902: LD_VAR 0 4
86906: PPUSH
86907: LD_VAR 0 5
86911: PPUSH
86912: CALL 88695 0 3
86916: GO 86919
86918: POP
// end ;
86919: LD_VAR 0 12
86923: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
86924: LD_INT 0
86926: PPUSH
86927: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
86928: LD_VAR 0 1
86932: PUSH
86933: LD_INT 1
86935: LESS
86936: IFTRUE 86948
86938: PUSH
86939: LD_VAR 0 1
86943: PUSH
86944: LD_INT 3
86946: GREATER
86947: OR
86948: IFTRUE 86966
86950: PUSH
86951: LD_VAR 0 5
86955: PPUSH
86956: LD_VAR 0 6
86960: PPUSH
86961: CALL_OW 428
86965: OR
86966: IFFALSE 86970
// exit ;
86968: GO 87698
// uc_side := your_side ;
86970: LD_ADDR_OWVAR 20
86974: PUSH
86975: LD_OWVAR 2
86979: ST_TO_ADDR
// uc_nation := nation ;
86980: LD_ADDR_OWVAR 21
86984: PUSH
86985: LD_VAR 0 1
86989: ST_TO_ADDR
// bc_level = 1 ;
86990: LD_ADDR_OWVAR 43
86994: PUSH
86995: LD_INT 1
86997: ST_TO_ADDR
// case btype of 1 :
86998: LD_VAR 0 2
87002: PUSH
87003: LD_INT 1
87005: DOUBLE
87006: EQUAL
87007: IFTRUE 87011
87009: GO 87022
87011: POP
// bc_type := b_depot ; 2 :
87012: LD_ADDR_OWVAR 42
87016: PUSH
87017: LD_INT 0
87019: ST_TO_ADDR
87020: GO 87642
87022: LD_INT 2
87024: DOUBLE
87025: EQUAL
87026: IFTRUE 87030
87028: GO 87041
87030: POP
// bc_type := b_warehouse ; 3 :
87031: LD_ADDR_OWVAR 42
87035: PUSH
87036: LD_INT 1
87038: ST_TO_ADDR
87039: GO 87642
87041: LD_INT 3
87043: DOUBLE
87044: EQUAL
87045: IFTRUE 87049
87047: GO 87060
87049: POP
// bc_type := b_lab ; 4 .. 9 :
87050: LD_ADDR_OWVAR 42
87054: PUSH
87055: LD_INT 6
87057: ST_TO_ADDR
87058: GO 87642
87060: LD_INT 4
87062: DOUBLE
87063: GREATEREQUAL
87064: IFFALSE 87072
87066: LD_INT 9
87068: DOUBLE
87069: LESSEQUAL
87070: IFTRUE 87074
87072: GO 87134
87074: POP
// begin bc_type := b_lab_half ;
87075: LD_ADDR_OWVAR 42
87079: PUSH
87080: LD_INT 7
87082: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
87083: LD_ADDR_OWVAR 44
87087: PUSH
87088: LD_INT 10
87090: PUSH
87091: LD_INT 11
87093: PUSH
87094: LD_INT 12
87096: PUSH
87097: LD_INT 15
87099: PUSH
87100: LD_INT 14
87102: PUSH
87103: LD_INT 13
87105: PUSH
87106: EMPTY
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: PUSH
87114: LD_VAR 0 2
87118: PUSH
87119: LD_INT 3
87121: MINUS
87122: ARRAY
87123: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
87124: LD_ADDR_OWVAR 45
87128: PUSH
87129: LD_INT 9
87131: ST_TO_ADDR
// end ; 10 .. 13 :
87132: GO 87642
87134: LD_INT 10
87136: DOUBLE
87137: GREATEREQUAL
87138: IFFALSE 87146
87140: LD_INT 13
87142: DOUBLE
87143: LESSEQUAL
87144: IFTRUE 87148
87146: GO 87225
87148: POP
// begin bc_type := b_lab_full ;
87149: LD_ADDR_OWVAR 42
87153: PUSH
87154: LD_INT 8
87156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
87157: LD_ADDR_OWVAR 44
87161: PUSH
87162: LD_INT 10
87164: PUSH
87165: LD_INT 12
87167: PUSH
87168: LD_INT 14
87170: PUSH
87171: LD_INT 13
87173: PUSH
87174: EMPTY
87175: LIST
87176: LIST
87177: LIST
87178: LIST
87179: PUSH
87180: LD_VAR 0 2
87184: PUSH
87185: LD_INT 9
87187: MINUS
87188: ARRAY
87189: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
87190: LD_ADDR_OWVAR 45
87194: PUSH
87195: LD_INT 11
87197: PUSH
87198: LD_INT 15
87200: PUSH
87201: LD_INT 12
87203: PUSH
87204: LD_INT 15
87206: PUSH
87207: EMPTY
87208: LIST
87209: LIST
87210: LIST
87211: LIST
87212: PUSH
87213: LD_VAR 0 2
87217: PUSH
87218: LD_INT 9
87220: MINUS
87221: ARRAY
87222: ST_TO_ADDR
// end ; 14 :
87223: GO 87642
87225: LD_INT 14
87227: DOUBLE
87228: EQUAL
87229: IFTRUE 87233
87231: GO 87244
87233: POP
// bc_type := b_workshop ; 15 :
87234: LD_ADDR_OWVAR 42
87238: PUSH
87239: LD_INT 2
87241: ST_TO_ADDR
87242: GO 87642
87244: LD_INT 15
87246: DOUBLE
87247: EQUAL
87248: IFTRUE 87252
87250: GO 87263
87252: POP
// bc_type := b_factory ; 16 :
87253: LD_ADDR_OWVAR 42
87257: PUSH
87258: LD_INT 3
87260: ST_TO_ADDR
87261: GO 87642
87263: LD_INT 16
87265: DOUBLE
87266: EQUAL
87267: IFTRUE 87271
87269: GO 87282
87271: POP
// bc_type := b_ext_gun ; 17 :
87272: LD_ADDR_OWVAR 42
87276: PUSH
87277: LD_INT 17
87279: ST_TO_ADDR
87280: GO 87642
87282: LD_INT 17
87284: DOUBLE
87285: EQUAL
87286: IFTRUE 87290
87288: GO 87318
87290: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
87291: LD_ADDR_OWVAR 42
87295: PUSH
87296: LD_INT 19
87298: PUSH
87299: LD_INT 23
87301: PUSH
87302: LD_INT 19
87304: PUSH
87305: EMPTY
87306: LIST
87307: LIST
87308: LIST
87309: PUSH
87310: LD_VAR 0 1
87314: ARRAY
87315: ST_TO_ADDR
87316: GO 87642
87318: LD_INT 18
87320: DOUBLE
87321: EQUAL
87322: IFTRUE 87326
87324: GO 87337
87326: POP
// bc_type := b_ext_radar ; 19 :
87327: LD_ADDR_OWVAR 42
87331: PUSH
87332: LD_INT 20
87334: ST_TO_ADDR
87335: GO 87642
87337: LD_INT 19
87339: DOUBLE
87340: EQUAL
87341: IFTRUE 87345
87343: GO 87356
87345: POP
// bc_type := b_ext_radio ; 20 :
87346: LD_ADDR_OWVAR 42
87350: PUSH
87351: LD_INT 22
87353: ST_TO_ADDR
87354: GO 87642
87356: LD_INT 20
87358: DOUBLE
87359: EQUAL
87360: IFTRUE 87364
87362: GO 87375
87364: POP
// bc_type := b_ext_siberium ; 21 :
87365: LD_ADDR_OWVAR 42
87369: PUSH
87370: LD_INT 21
87372: ST_TO_ADDR
87373: GO 87642
87375: LD_INT 21
87377: DOUBLE
87378: EQUAL
87379: IFTRUE 87383
87381: GO 87394
87383: POP
// bc_type := b_ext_computer ; 22 :
87384: LD_ADDR_OWVAR 42
87388: PUSH
87389: LD_INT 24
87391: ST_TO_ADDR
87392: GO 87642
87394: LD_INT 22
87396: DOUBLE
87397: EQUAL
87398: IFTRUE 87402
87400: GO 87413
87402: POP
// bc_type := b_ext_track ; 23 :
87403: LD_ADDR_OWVAR 42
87407: PUSH
87408: LD_INT 16
87410: ST_TO_ADDR
87411: GO 87642
87413: LD_INT 23
87415: DOUBLE
87416: EQUAL
87417: IFTRUE 87421
87419: GO 87432
87421: POP
// bc_type := b_ext_laser ; 24 :
87422: LD_ADDR_OWVAR 42
87426: PUSH
87427: LD_INT 25
87429: ST_TO_ADDR
87430: GO 87642
87432: LD_INT 24
87434: DOUBLE
87435: EQUAL
87436: IFTRUE 87440
87438: GO 87451
87440: POP
// bc_type := b_control_tower ; 25 :
87441: LD_ADDR_OWVAR 42
87445: PUSH
87446: LD_INT 36
87448: ST_TO_ADDR
87449: GO 87642
87451: LD_INT 25
87453: DOUBLE
87454: EQUAL
87455: IFTRUE 87459
87457: GO 87470
87459: POP
// bc_type := b_breastwork ; 26 :
87460: LD_ADDR_OWVAR 42
87464: PUSH
87465: LD_INT 31
87467: ST_TO_ADDR
87468: GO 87642
87470: LD_INT 26
87472: DOUBLE
87473: EQUAL
87474: IFTRUE 87478
87476: GO 87489
87478: POP
// bc_type := b_bunker ; 27 :
87479: LD_ADDR_OWVAR 42
87483: PUSH
87484: LD_INT 32
87486: ST_TO_ADDR
87487: GO 87642
87489: LD_INT 27
87491: DOUBLE
87492: EQUAL
87493: IFTRUE 87497
87495: GO 87508
87497: POP
// bc_type := b_turret ; 28 :
87498: LD_ADDR_OWVAR 42
87502: PUSH
87503: LD_INT 33
87505: ST_TO_ADDR
87506: GO 87642
87508: LD_INT 28
87510: DOUBLE
87511: EQUAL
87512: IFTRUE 87516
87514: GO 87527
87516: POP
// bc_type := b_armoury ; 29 :
87517: LD_ADDR_OWVAR 42
87521: PUSH
87522: LD_INT 4
87524: ST_TO_ADDR
87525: GO 87642
87527: LD_INT 29
87529: DOUBLE
87530: EQUAL
87531: IFTRUE 87535
87533: GO 87546
87535: POP
// bc_type := b_barracks ; 30 :
87536: LD_ADDR_OWVAR 42
87540: PUSH
87541: LD_INT 5
87543: ST_TO_ADDR
87544: GO 87642
87546: LD_INT 30
87548: DOUBLE
87549: EQUAL
87550: IFTRUE 87554
87552: GO 87565
87554: POP
// bc_type := b_solar_power ; 31 :
87555: LD_ADDR_OWVAR 42
87559: PUSH
87560: LD_INT 27
87562: ST_TO_ADDR
87563: GO 87642
87565: LD_INT 31
87567: DOUBLE
87568: EQUAL
87569: IFTRUE 87573
87571: GO 87584
87573: POP
// bc_type := b_oil_power ; 32 :
87574: LD_ADDR_OWVAR 42
87578: PUSH
87579: LD_INT 26
87581: ST_TO_ADDR
87582: GO 87642
87584: LD_INT 32
87586: DOUBLE
87587: EQUAL
87588: IFTRUE 87592
87590: GO 87603
87592: POP
// bc_type := b_siberite_power ; 33 :
87593: LD_ADDR_OWVAR 42
87597: PUSH
87598: LD_INT 28
87600: ST_TO_ADDR
87601: GO 87642
87603: LD_INT 33
87605: DOUBLE
87606: EQUAL
87607: IFTRUE 87611
87609: GO 87622
87611: POP
// bc_type := b_oil_mine ; 34 :
87612: LD_ADDR_OWVAR 42
87616: PUSH
87617: LD_INT 29
87619: ST_TO_ADDR
87620: GO 87642
87622: LD_INT 34
87624: DOUBLE
87625: EQUAL
87626: IFTRUE 87630
87628: GO 87641
87630: POP
// bc_type := b_siberite_mine ; end ;
87631: LD_ADDR_OWVAR 42
87635: PUSH
87636: LD_INT 30
87638: ST_TO_ADDR
87639: GO 87642
87641: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
87642: LD_ADDR_VAR 0 8
87646: PUSH
87647: LD_VAR 0 5
87651: PPUSH
87652: LD_VAR 0 6
87656: PPUSH
87657: LD_VAR 0 3
87661: PPUSH
87662: CALL_OW 47
87666: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
87667: LD_OWVAR 42
87671: PUSH
87672: LD_INT 32
87674: PUSH
87675: LD_INT 33
87677: PUSH
87678: EMPTY
87679: LIST
87680: LIST
87681: IN
87682: IFFALSE 87698
// PlaceWeaponTurret ( b , weapon ) ;
87684: LD_VAR 0 8
87688: PPUSH
87689: LD_VAR 0 4
87693: PPUSH
87694: CALL_OW 431
// end ;
87698: LD_VAR 0 7
87702: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
87703: LD_INT 0
87705: PPUSH
87706: PPUSH
87707: PPUSH
87708: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87709: LD_ADDR_VAR 0 4
87713: PUSH
87714: LD_INT 22
87716: PUSH
87717: LD_OWVAR 2
87721: PUSH
87722: EMPTY
87723: LIST
87724: LIST
87725: PUSH
87726: LD_INT 2
87728: PUSH
87729: LD_INT 30
87731: PUSH
87732: LD_INT 0
87734: PUSH
87735: EMPTY
87736: LIST
87737: LIST
87738: PUSH
87739: LD_INT 30
87741: PUSH
87742: LD_INT 1
87744: PUSH
87745: EMPTY
87746: LIST
87747: LIST
87748: PUSH
87749: EMPTY
87750: LIST
87751: LIST
87752: LIST
87753: PUSH
87754: EMPTY
87755: LIST
87756: LIST
87757: PPUSH
87758: CALL_OW 69
87762: ST_TO_ADDR
// if not tmp then
87763: LD_VAR 0 4
87767: NOT
87768: IFFALSE 87772
// exit ;
87770: GO 87831
// for i in tmp do
87772: LD_ADDR_VAR 0 2
87776: PUSH
87777: LD_VAR 0 4
87781: PUSH
87782: FOR_IN
87783: IFFALSE 87829
// for j = 1 to 3 do
87785: LD_ADDR_VAR 0 3
87789: PUSH
87790: DOUBLE
87791: LD_INT 1
87793: DEC
87794: ST_TO_ADDR
87795: LD_INT 3
87797: PUSH
87798: FOR_TO
87799: IFFALSE 87825
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
87801: LD_VAR 0 2
87805: PPUSH
87806: CALL_OW 274
87810: PPUSH
87811: LD_VAR 0 3
87815: PPUSH
87816: LD_INT 99999
87818: PPUSH
87819: CALL_OW 277
87823: GO 87798
87825: POP
87826: POP
87827: GO 87782
87829: POP
87830: POP
// end ;
87831: LD_VAR 0 1
87835: RET
// export function hHackSetLevel10 ; var i , j ; begin
87836: LD_INT 0
87838: PPUSH
87839: PPUSH
87840: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87841: LD_ADDR_VAR 0 2
87845: PUSH
87846: LD_INT 21
87848: PUSH
87849: LD_INT 1
87851: PUSH
87852: EMPTY
87853: LIST
87854: LIST
87855: PPUSH
87856: CALL_OW 69
87860: PUSH
87861: FOR_IN
87862: IFFALSE 87914
// if IsSelected ( i ) then
87864: LD_VAR 0 2
87868: PPUSH
87869: CALL_OW 306
87873: IFFALSE 87912
// begin for j := 1 to 4 do
87875: LD_ADDR_VAR 0 3
87879: PUSH
87880: DOUBLE
87881: LD_INT 1
87883: DEC
87884: ST_TO_ADDR
87885: LD_INT 4
87887: PUSH
87888: FOR_TO
87889: IFFALSE 87910
// SetSkill ( i , j , 10 ) ;
87891: LD_VAR 0 2
87895: PPUSH
87896: LD_VAR 0 3
87900: PPUSH
87901: LD_INT 10
87903: PPUSH
87904: CALL_OW 237
87908: GO 87888
87910: POP
87911: POP
// end ;
87912: GO 87861
87914: POP
87915: POP
// end ;
87916: LD_VAR 0 1
87920: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
87921: LD_INT 0
87923: PPUSH
87924: PPUSH
87925: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
87926: LD_ADDR_VAR 0 2
87930: PUSH
87931: LD_INT 22
87933: PUSH
87934: LD_OWVAR 2
87938: PUSH
87939: EMPTY
87940: LIST
87941: LIST
87942: PUSH
87943: LD_INT 21
87945: PUSH
87946: LD_INT 1
87948: PUSH
87949: EMPTY
87950: LIST
87951: LIST
87952: PUSH
87953: EMPTY
87954: LIST
87955: LIST
87956: PPUSH
87957: CALL_OW 69
87961: PUSH
87962: FOR_IN
87963: IFFALSE 88004
// begin for j := 1 to 4 do
87965: LD_ADDR_VAR 0 3
87969: PUSH
87970: DOUBLE
87971: LD_INT 1
87973: DEC
87974: ST_TO_ADDR
87975: LD_INT 4
87977: PUSH
87978: FOR_TO
87979: IFFALSE 88000
// SetSkill ( i , j , 10 ) ;
87981: LD_VAR 0 2
87985: PPUSH
87986: LD_VAR 0 3
87990: PPUSH
87991: LD_INT 10
87993: PPUSH
87994: CALL_OW 237
87998: GO 87978
88000: POP
88001: POP
// end ;
88002: GO 87962
88004: POP
88005: POP
// end ;
88006: LD_VAR 0 1
88010: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
88011: LD_INT 0
88013: PPUSH
// uc_side := your_side ;
88014: LD_ADDR_OWVAR 20
88018: PUSH
88019: LD_OWVAR 2
88023: ST_TO_ADDR
// uc_nation := nation ;
88024: LD_ADDR_OWVAR 21
88028: PUSH
88029: LD_VAR 0 1
88033: ST_TO_ADDR
// InitHc ;
88034: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
88038: LD_INT 0
88040: PPUSH
88041: LD_VAR 0 2
88045: PPUSH
88046: LD_VAR 0 3
88050: PPUSH
88051: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
88055: LD_VAR 0 4
88059: PPUSH
88060: LD_VAR 0 5
88064: PPUSH
88065: CALL_OW 428
88069: PUSH
88070: LD_INT 0
88072: EQUAL
88073: IFFALSE 88097
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
88075: CALL_OW 44
88079: PPUSH
88080: LD_VAR 0 4
88084: PPUSH
88085: LD_VAR 0 5
88089: PPUSH
88090: LD_INT 1
88092: PPUSH
88093: CALL_OW 48
// end ;
88097: LD_VAR 0 6
88101: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
88102: LD_INT 0
88104: PPUSH
88105: PPUSH
// uc_side := your_side ;
88106: LD_ADDR_OWVAR 20
88110: PUSH
88111: LD_OWVAR 2
88115: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
88116: LD_VAR 0 1
88120: PUSH
88121: LD_INT 1
88123: PUSH
88124: LD_INT 2
88126: PUSH
88127: LD_INT 3
88129: PUSH
88130: LD_INT 4
88132: PUSH
88133: LD_INT 5
88135: PUSH
88136: EMPTY
88137: LIST
88138: LIST
88139: LIST
88140: LIST
88141: LIST
88142: IN
88143: IFFALSE 88155
// uc_nation := nation_american else
88145: LD_ADDR_OWVAR 21
88149: PUSH
88150: LD_INT 1
88152: ST_TO_ADDR
88153: GO 88198
// if chassis in [ 11 , 12 , 13 , 14 ] then
88155: LD_VAR 0 1
88159: PUSH
88160: LD_INT 11
88162: PUSH
88163: LD_INT 12
88165: PUSH
88166: LD_INT 13
88168: PUSH
88169: LD_INT 14
88171: PUSH
88172: EMPTY
88173: LIST
88174: LIST
88175: LIST
88176: LIST
88177: IN
88178: IFFALSE 88190
// uc_nation := nation_arabian else
88180: LD_ADDR_OWVAR 21
88184: PUSH
88185: LD_INT 2
88187: ST_TO_ADDR
88188: GO 88198
// uc_nation := nation_russian ;
88190: LD_ADDR_OWVAR 21
88194: PUSH
88195: LD_INT 3
88197: ST_TO_ADDR
// vc_chassis := chassis ;
88198: LD_ADDR_OWVAR 37
88202: PUSH
88203: LD_VAR 0 1
88207: ST_TO_ADDR
// vc_engine := engine ;
88208: LD_ADDR_OWVAR 39
88212: PUSH
88213: LD_VAR 0 2
88217: ST_TO_ADDR
// vc_control := control ;
88218: LD_ADDR_OWVAR 38
88222: PUSH
88223: LD_VAR 0 3
88227: ST_TO_ADDR
// vc_weapon := weapon ;
88228: LD_ADDR_OWVAR 40
88232: PUSH
88233: LD_VAR 0 4
88237: ST_TO_ADDR
// un := CreateVehicle ;
88238: LD_ADDR_VAR 0 8
88242: PUSH
88243: CALL_OW 45
88247: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
88248: LD_VAR 0 8
88252: PPUSH
88253: LD_INT 0
88255: PPUSH
88256: LD_INT 5
88258: PPUSH
88259: CALL_OW 12
88263: PPUSH
88264: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
88268: LD_VAR 0 8
88272: PPUSH
88273: LD_VAR 0 5
88277: PPUSH
88278: LD_VAR 0 6
88282: PPUSH
88283: LD_INT 1
88285: PPUSH
88286: CALL_OW 48
// end ;
88290: LD_VAR 0 7
88294: RET
// export hInvincible ; every 1 do
88295: GO 88297
88297: DISABLE
// hInvincible := [ ] ;
88298: LD_ADDR_EXP 132
88302: PUSH
88303: EMPTY
88304: ST_TO_ADDR
88305: END
// every 10 do var i ;
88306: GO 88308
88308: DISABLE
88309: LD_INT 0
88311: PPUSH
// begin enable ;
88312: ENABLE
// if not hInvincible then
88313: LD_EXP 132
88317: NOT
88318: IFFALSE 88322
// exit ;
88320: GO 88366
// for i in hInvincible do
88322: LD_ADDR_VAR 0 1
88326: PUSH
88327: LD_EXP 132
88331: PUSH
88332: FOR_IN
88333: IFFALSE 88364
// if GetLives ( i ) < 1000 then
88335: LD_VAR 0 1
88339: PPUSH
88340: CALL_OW 256
88344: PUSH
88345: LD_INT 1000
88347: LESS
88348: IFFALSE 88362
// SetLives ( i , 1000 ) ;
88350: LD_VAR 0 1
88354: PPUSH
88355: LD_INT 1000
88357: PPUSH
88358: CALL_OW 234
88362: GO 88332
88364: POP
88365: POP
// end ;
88366: PPOPN 1
88368: END
// export function hHackInvincible ; var i ; begin
88369: LD_INT 0
88371: PPUSH
88372: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
88373: LD_ADDR_VAR 0 2
88377: PUSH
88378: LD_INT 2
88380: PUSH
88381: LD_INT 21
88383: PUSH
88384: LD_INT 1
88386: PUSH
88387: EMPTY
88388: LIST
88389: LIST
88390: PUSH
88391: LD_INT 21
88393: PUSH
88394: LD_INT 2
88396: PUSH
88397: EMPTY
88398: LIST
88399: LIST
88400: PUSH
88401: EMPTY
88402: LIST
88403: LIST
88404: LIST
88405: PPUSH
88406: CALL_OW 69
88410: PUSH
88411: FOR_IN
88412: IFFALSE 88473
// if IsSelected ( i ) then
88414: LD_VAR 0 2
88418: PPUSH
88419: CALL_OW 306
88423: IFFALSE 88471
// begin if i in hInvincible then
88425: LD_VAR 0 2
88429: PUSH
88430: LD_EXP 132
88434: IN
88435: IFFALSE 88455
// hInvincible := hInvincible diff i else
88437: LD_ADDR_EXP 132
88441: PUSH
88442: LD_EXP 132
88446: PUSH
88447: LD_VAR 0 2
88451: DIFF
88452: ST_TO_ADDR
88453: GO 88471
// hInvincible := hInvincible union i ;
88455: LD_ADDR_EXP 132
88459: PUSH
88460: LD_EXP 132
88464: PUSH
88465: LD_VAR 0 2
88469: UNION
88470: ST_TO_ADDR
// end ;
88471: GO 88411
88473: POP
88474: POP
// end ;
88475: LD_VAR 0 1
88479: RET
// export function hHackInvisible ; var i , j ; begin
88480: LD_INT 0
88482: PPUSH
88483: PPUSH
88484: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
88485: LD_ADDR_VAR 0 2
88489: PUSH
88490: LD_INT 21
88492: PUSH
88493: LD_INT 1
88495: PUSH
88496: EMPTY
88497: LIST
88498: LIST
88499: PPUSH
88500: CALL_OW 69
88504: PUSH
88505: FOR_IN
88506: IFFALSE 88530
// if IsSelected ( i ) then
88508: LD_VAR 0 2
88512: PPUSH
88513: CALL_OW 306
88517: IFFALSE 88528
// ComForceInvisible ( i ) ;
88519: LD_VAR 0 2
88523: PPUSH
88524: CALL_OW 496
88528: GO 88505
88530: POP
88531: POP
// end ;
88532: LD_VAR 0 1
88536: RET
// export function hHackChangeYourSide ; begin
88537: LD_INT 0
88539: PPUSH
// if your_side = 8 then
88540: LD_OWVAR 2
88544: PUSH
88545: LD_INT 8
88547: EQUAL
88548: IFFALSE 88560
// your_side := 0 else
88550: LD_ADDR_OWVAR 2
88554: PUSH
88555: LD_INT 0
88557: ST_TO_ADDR
88558: GO 88574
// your_side := your_side + 1 ;
88560: LD_ADDR_OWVAR 2
88564: PUSH
88565: LD_OWVAR 2
88569: PUSH
88570: LD_INT 1
88572: PLUS
88573: ST_TO_ADDR
// end ;
88574: LD_VAR 0 1
88578: RET
// export function hHackChangeUnitSide ; var i , j ; begin
88579: LD_INT 0
88581: PPUSH
88582: PPUSH
88583: PPUSH
// for i in all_units do
88584: LD_ADDR_VAR 0 2
88588: PUSH
88589: LD_OWVAR 3
88593: PUSH
88594: FOR_IN
88595: IFFALSE 88673
// if IsSelected ( i ) then
88597: LD_VAR 0 2
88601: PPUSH
88602: CALL_OW 306
88606: IFFALSE 88671
// begin j := GetSide ( i ) ;
88608: LD_ADDR_VAR 0 3
88612: PUSH
88613: LD_VAR 0 2
88617: PPUSH
88618: CALL_OW 255
88622: ST_TO_ADDR
// if j = 8 then
88623: LD_VAR 0 3
88627: PUSH
88628: LD_INT 8
88630: EQUAL
88631: IFFALSE 88643
// j := 0 else
88633: LD_ADDR_VAR 0 3
88637: PUSH
88638: LD_INT 0
88640: ST_TO_ADDR
88641: GO 88657
// j := j + 1 ;
88643: LD_ADDR_VAR 0 3
88647: PUSH
88648: LD_VAR 0 3
88652: PUSH
88653: LD_INT 1
88655: PLUS
88656: ST_TO_ADDR
// SetSide ( i , j ) ;
88657: LD_VAR 0 2
88661: PPUSH
88662: LD_VAR 0 3
88666: PPUSH
88667: CALL_OW 235
// end ;
88671: GO 88594
88673: POP
88674: POP
// end ;
88675: LD_VAR 0 1
88679: RET
// export function hHackFog ; begin
88680: LD_INT 0
88682: PPUSH
// FogOff ( true ) ;
88683: LD_INT 1
88685: PPUSH
88686: CALL_OW 344
// end ;
88690: LD_VAR 0 1
88694: RET
// export function hHackTeleport ( unit , x , y ) ; begin
88695: LD_INT 0
88697: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
88698: LD_VAR 0 1
88702: PPUSH
88703: LD_VAR 0 2
88707: PPUSH
88708: LD_VAR 0 3
88712: PPUSH
88713: LD_INT 1
88715: PPUSH
88716: LD_INT 1
88718: PPUSH
88719: CALL_OW 483
// CenterOnXY ( x , y ) ;
88723: LD_VAR 0 2
88727: PPUSH
88728: LD_VAR 0 3
88732: PPUSH
88733: CALL_OW 84
// end ;
88737: LD_VAR 0 4
88741: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
88742: LD_INT 0
88744: PPUSH
88745: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
88746: LD_VAR 0 1
88750: NOT
88751: IFTRUE 88770
88753: PUSH
88754: LD_VAR 0 2
88758: PPUSH
88759: LD_VAR 0 3
88763: PPUSH
88764: CALL_OW 488
88768: NOT
88769: OR
88770: IFTRUE 88805
88772: PUSH
88773: LD_VAR 0 1
88777: PPUSH
88778: CALL_OW 266
88782: PUSH
88783: LD_INT 3
88785: NONEQUAL
88786: IFFALSE 88804
88788: PUSH
88789: LD_VAR 0 1
88793: PPUSH
88794: CALL_OW 247
88798: PUSH
88799: LD_INT 1
88801: EQUAL
88802: NOT
88803: AND
88804: OR
88805: IFFALSE 88809
// exit ;
88807: GO 89091
// if GetType ( factory ) = unit_human then
88809: LD_VAR 0 1
88813: PPUSH
88814: CALL_OW 247
88818: PUSH
88819: LD_INT 1
88821: EQUAL
88822: IFFALSE 88839
// factory := IsInUnit ( factory ) ;
88824: LD_ADDR_VAR 0 1
88828: PUSH
88829: LD_VAR 0 1
88833: PPUSH
88834: CALL_OW 310
88838: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
88839: LD_VAR 0 1
88843: PPUSH
88844: CALL_OW 266
88848: PUSH
88849: LD_INT 3
88851: NONEQUAL
88852: IFFALSE 88856
// exit ;
88854: GO 89091
// for i := 1 to Count ( factoryWaypoints ) do
88856: LD_ADDR_VAR 0 5
88860: PUSH
88861: DOUBLE
88862: LD_INT 1
88864: DEC
88865: ST_TO_ADDR
88866: LD_EXP 133
88870: PPUSH
88871: CALL 32781 0 1
88875: PUSH
88876: FOR_TO
88877: IFFALSE 89039
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
88879: LD_VAR 0 2
88883: PPUSH
88884: LD_VAR 0 3
88888: PPUSH
88889: CALL_OW 428
88893: PUSH
88894: LD_EXP 133
88898: PUSH
88899: LD_VAR 0 5
88903: ARRAY
88904: PUSH
88905: LD_INT 2
88907: ARRAY
88908: EQUAL
88909: IFFALSE 88941
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88911: LD_ADDR_EXP 133
88915: PUSH
88916: LD_EXP 133
88920: PPUSH
88921: LD_VAR 0 5
88925: PPUSH
88926: CALL_OW 3
88930: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88931: CALL 89096 0 0
// exit ;
88935: POP
88936: POP
88937: GO 89091
// end else
88939: GO 89037
// if factory = factoryWaypoints [ i ] [ 2 ] then
88941: LD_VAR 0 1
88945: PUSH
88946: LD_EXP 133
88950: PUSH
88951: LD_VAR 0 5
88955: ARRAY
88956: PUSH
88957: LD_INT 2
88959: ARRAY
88960: EQUAL
88961: IFFALSE 89037
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88963: LD_ADDR_EXP 133
88967: PUSH
88968: LD_EXP 133
88972: PPUSH
88973: LD_VAR 0 5
88977: PPUSH
88978: CALL_OW 3
88982: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88983: LD_ADDR_EXP 133
88987: PUSH
88988: LD_EXP 133
88992: PPUSH
88993: LD_VAR 0 1
88997: PPUSH
88998: CALL_OW 255
89002: PUSH
89003: LD_VAR 0 1
89007: PUSH
89008: LD_VAR 0 2
89012: PUSH
89013: LD_VAR 0 3
89017: PUSH
89018: EMPTY
89019: LIST
89020: LIST
89021: LIST
89022: LIST
89023: PPUSH
89024: CALL 68757 0 2
89028: ST_TO_ADDR
// UpdateFactoryWaypoints ;
89029: CALL 89096 0 0
// exit ;
89033: POP
89034: POP
89035: GO 89091
// end ; end ;
89037: GO 88876
89039: POP
89040: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
89041: LD_ADDR_EXP 133
89045: PUSH
89046: LD_EXP 133
89050: PPUSH
89051: LD_VAR 0 1
89055: PPUSH
89056: CALL_OW 255
89060: PUSH
89061: LD_VAR 0 1
89065: PUSH
89066: LD_VAR 0 2
89070: PUSH
89071: LD_VAR 0 3
89075: PUSH
89076: EMPTY
89077: LIST
89078: LIST
89079: LIST
89080: LIST
89081: PPUSH
89082: CALL 68757 0 2
89086: ST_TO_ADDR
// UpdateFactoryWaypoints ;
89087: CALL 89096 0 0
// end ;
89091: LD_VAR 0 4
89095: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
89096: LD_INT 0
89098: PPUSH
89099: PPUSH
89100: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
89101: LD_STRING resetFactoryWaypoint();
89103: PPUSH
89104: CALL_OW 559
// if factoryWaypoints then
89108: LD_EXP 133
89112: IFFALSE 89233
// begin list := factoryWaypoints ;
89114: LD_ADDR_VAR 0 3
89118: PUSH
89119: LD_EXP 133
89123: ST_TO_ADDR
// for i := 1 to list do
89124: LD_ADDR_VAR 0 2
89128: PUSH
89129: DOUBLE
89130: LD_INT 1
89132: DEC
89133: ST_TO_ADDR
89134: LD_VAR 0 3
89138: PUSH
89139: FOR_TO
89140: IFFALSE 89231
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
89142: LD_STRING setFactoryWaypointXY(
89144: PUSH
89145: LD_VAR 0 3
89149: PUSH
89150: LD_VAR 0 2
89154: ARRAY
89155: PUSH
89156: LD_INT 1
89158: ARRAY
89159: STR
89160: PUSH
89161: LD_STRING ,
89163: STR
89164: PUSH
89165: LD_VAR 0 3
89169: PUSH
89170: LD_VAR 0 2
89174: ARRAY
89175: PUSH
89176: LD_INT 2
89178: ARRAY
89179: STR
89180: PUSH
89181: LD_STRING ,
89183: STR
89184: PUSH
89185: LD_VAR 0 3
89189: PUSH
89190: LD_VAR 0 2
89194: ARRAY
89195: PUSH
89196: LD_INT 3
89198: ARRAY
89199: STR
89200: PUSH
89201: LD_STRING ,
89203: STR
89204: PUSH
89205: LD_VAR 0 3
89209: PUSH
89210: LD_VAR 0 2
89214: ARRAY
89215: PUSH
89216: LD_INT 4
89218: ARRAY
89219: STR
89220: PUSH
89221: LD_STRING )
89223: STR
89224: PPUSH
89225: CALL_OW 559
89229: GO 89139
89231: POP
89232: POP
// end ; end ;
89233: LD_VAR 0 1
89237: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
89238: LD_INT 0
89240: PPUSH
// if HexInfo ( x , y ) = warehouse then
89241: LD_VAR 0 2
89245: PPUSH
89246: LD_VAR 0 3
89250: PPUSH
89251: CALL_OW 428
89255: PUSH
89256: LD_VAR 0 1
89260: EQUAL
89261: IFFALSE 89288
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
89263: LD_ADDR_EXP 135
89267: PUSH
89268: LD_EXP 135
89272: PPUSH
89273: LD_VAR 0 1
89277: PPUSH
89278: LD_INT 0
89280: PPUSH
89281: CALL_OW 1
89285: ST_TO_ADDR
89286: GO 89339
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
89288: LD_ADDR_EXP 135
89292: PUSH
89293: LD_EXP 135
89297: PPUSH
89298: LD_VAR 0 1
89302: PPUSH
89303: LD_VAR 0 1
89307: PPUSH
89308: CALL_OW 255
89312: PUSH
89313: LD_VAR 0 1
89317: PUSH
89318: LD_VAR 0 2
89322: PUSH
89323: LD_VAR 0 3
89327: PUSH
89328: EMPTY
89329: LIST
89330: LIST
89331: LIST
89332: LIST
89333: PPUSH
89334: CALL_OW 1
89338: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
89339: CALL 89348 0 0
// end ;
89343: LD_VAR 0 4
89347: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
89348: LD_INT 0
89350: PPUSH
89351: PPUSH
89352: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
89353: LD_STRING resetWarehouseGatheringPoints();
89355: PPUSH
89356: CALL_OW 559
// if warehouseGatheringPoints then
89360: LD_EXP 135
89364: IFFALSE 89490
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
89366: LD_ADDR_VAR 0 3
89370: PUSH
89371: LD_EXP 135
89375: PPUSH
89376: CALL 72691 0 1
89380: ST_TO_ADDR
// for i := 1 to list do
89381: LD_ADDR_VAR 0 2
89385: PUSH
89386: DOUBLE
89387: LD_INT 1
89389: DEC
89390: ST_TO_ADDR
89391: LD_VAR 0 3
89395: PUSH
89396: FOR_TO
89397: IFFALSE 89488
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
89399: LD_STRING setWarehouseGatheringPointXY(
89401: PUSH
89402: LD_VAR 0 3
89406: PUSH
89407: LD_VAR 0 2
89411: ARRAY
89412: PUSH
89413: LD_INT 1
89415: ARRAY
89416: STR
89417: PUSH
89418: LD_STRING ,
89420: STR
89421: PUSH
89422: LD_VAR 0 3
89426: PUSH
89427: LD_VAR 0 2
89431: ARRAY
89432: PUSH
89433: LD_INT 2
89435: ARRAY
89436: STR
89437: PUSH
89438: LD_STRING ,
89440: STR
89441: PUSH
89442: LD_VAR 0 3
89446: PUSH
89447: LD_VAR 0 2
89451: ARRAY
89452: PUSH
89453: LD_INT 3
89455: ARRAY
89456: STR
89457: PUSH
89458: LD_STRING ,
89460: STR
89461: PUSH
89462: LD_VAR 0 3
89466: PUSH
89467: LD_VAR 0 2
89471: ARRAY
89472: PUSH
89473: LD_INT 4
89475: ARRAY
89476: STR
89477: PUSH
89478: LD_STRING )
89480: STR
89481: PPUSH
89482: CALL_OW 559
89486: GO 89396
89488: POP
89489: POP
// end ; end ;
89490: LD_VAR 0 1
89494: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
89495: LD_EXP 135
89499: IFFALSE 90194
89501: GO 89503
89503: DISABLE
89504: LD_INT 0
89506: PPUSH
89507: PPUSH
89508: PPUSH
89509: PPUSH
89510: PPUSH
89511: PPUSH
89512: PPUSH
89513: PPUSH
89514: PPUSH
// begin enable ;
89515: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
89516: LD_ADDR_VAR 0 3
89520: PUSH
89521: LD_EXP 135
89525: PPUSH
89526: CALL 72691 0 1
89530: ST_TO_ADDR
// if not list then
89531: LD_VAR 0 3
89535: NOT
89536: IFFALSE 89540
// exit ;
89538: GO 90194
// for i := 1 to list do
89540: LD_ADDR_VAR 0 1
89544: PUSH
89545: DOUBLE
89546: LD_INT 1
89548: DEC
89549: ST_TO_ADDR
89550: LD_VAR 0 3
89554: PUSH
89555: FOR_TO
89556: IFFALSE 90192
// begin depot := list [ i ] [ 2 ] ;
89558: LD_ADDR_VAR 0 8
89562: PUSH
89563: LD_VAR 0 3
89567: PUSH
89568: LD_VAR 0 1
89572: ARRAY
89573: PUSH
89574: LD_INT 2
89576: ARRAY
89577: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
89578: LD_ADDR_VAR 0 5
89582: PUSH
89583: LD_VAR 0 3
89587: PUSH
89588: LD_VAR 0 1
89592: ARRAY
89593: PUSH
89594: LD_INT 1
89596: ARRAY
89597: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
89598: LD_VAR 0 8
89602: PPUSH
89603: CALL_OW 301
89607: IFTRUE 89626
89609: PUSH
89610: LD_VAR 0 5
89614: PUSH
89615: LD_VAR 0 8
89619: PPUSH
89620: CALL_OW 255
89624: NONEQUAL
89625: OR
89626: IFFALSE 89655
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
89628: LD_ADDR_EXP 135
89632: PUSH
89633: LD_EXP 135
89637: PPUSH
89638: LD_VAR 0 8
89642: PPUSH
89643: LD_INT 0
89645: PPUSH
89646: CALL_OW 1
89650: ST_TO_ADDR
// exit ;
89651: POP
89652: POP
89653: GO 90194
// end ; x := list [ i ] [ 3 ] ;
89655: LD_ADDR_VAR 0 6
89659: PUSH
89660: LD_VAR 0 3
89664: PUSH
89665: LD_VAR 0 1
89669: ARRAY
89670: PUSH
89671: LD_INT 3
89673: ARRAY
89674: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
89675: LD_ADDR_VAR 0 7
89679: PUSH
89680: LD_VAR 0 3
89684: PUSH
89685: LD_VAR 0 1
89689: ARRAY
89690: PUSH
89691: LD_INT 4
89693: ARRAY
89694: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
89695: LD_ADDR_VAR 0 9
89699: PUSH
89700: LD_VAR 0 6
89704: PPUSH
89705: LD_VAR 0 7
89709: PPUSH
89710: LD_INT 16
89712: PPUSH
89713: CALL 71265 0 3
89717: ST_TO_ADDR
// if not cratesNearbyPoint then
89718: LD_VAR 0 9
89722: NOT
89723: IFFALSE 89729
// exit ;
89725: POP
89726: POP
89727: GO 90194
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
89729: LD_ADDR_VAR 0 4
89733: PUSH
89734: LD_INT 22
89736: PUSH
89737: LD_VAR 0 5
89741: PUSH
89742: EMPTY
89743: LIST
89744: LIST
89745: PUSH
89746: LD_INT 3
89748: PUSH
89749: LD_INT 60
89751: PUSH
89752: EMPTY
89753: LIST
89754: PUSH
89755: EMPTY
89756: LIST
89757: LIST
89758: PUSH
89759: LD_INT 91
89761: PUSH
89762: LD_VAR 0 8
89766: PUSH
89767: LD_INT 6
89769: PUSH
89770: EMPTY
89771: LIST
89772: LIST
89773: LIST
89774: PUSH
89775: LD_INT 2
89777: PUSH
89778: LD_INT 25
89780: PUSH
89781: LD_INT 2
89783: PUSH
89784: EMPTY
89785: LIST
89786: LIST
89787: PUSH
89788: LD_INT 25
89790: PUSH
89791: LD_INT 16
89793: PUSH
89794: EMPTY
89795: LIST
89796: LIST
89797: PUSH
89798: EMPTY
89799: LIST
89800: LIST
89801: LIST
89802: PUSH
89803: EMPTY
89804: LIST
89805: LIST
89806: LIST
89807: LIST
89808: PPUSH
89809: CALL_OW 69
89813: PUSH
89814: LD_VAR 0 8
89818: PPUSH
89819: CALL_OW 313
89823: PPUSH
89824: LD_INT 3
89826: PUSH
89827: LD_INT 60
89829: PUSH
89830: EMPTY
89831: LIST
89832: PUSH
89833: EMPTY
89834: LIST
89835: LIST
89836: PUSH
89837: LD_INT 2
89839: PUSH
89840: LD_INT 25
89842: PUSH
89843: LD_INT 2
89845: PUSH
89846: EMPTY
89847: LIST
89848: LIST
89849: PUSH
89850: LD_INT 25
89852: PUSH
89853: LD_INT 16
89855: PUSH
89856: EMPTY
89857: LIST
89858: LIST
89859: PUSH
89860: EMPTY
89861: LIST
89862: LIST
89863: LIST
89864: PUSH
89865: EMPTY
89866: LIST
89867: LIST
89868: PPUSH
89869: CALL_OW 72
89873: UNION
89874: ST_TO_ADDR
// if tmp then
89875: LD_VAR 0 4
89879: IFFALSE 89959
// begin tmp := ShrinkArray ( tmp , 3 ) ;
89881: LD_ADDR_VAR 0 4
89885: PUSH
89886: LD_VAR 0 4
89890: PPUSH
89891: LD_INT 3
89893: PPUSH
89894: CALL 69072 0 2
89898: ST_TO_ADDR
// for j in tmp do
89899: LD_ADDR_VAR 0 2
89903: PUSH
89904: LD_VAR 0 4
89908: PUSH
89909: FOR_IN
89910: IFFALSE 89953
// begin if IsInUnit ( j ) then
89912: LD_VAR 0 2
89916: PPUSH
89917: CALL_OW 310
89921: IFFALSE 89932
// ComExit ( j ) ;
89923: LD_VAR 0 2
89927: PPUSH
89928: CALL 69155 0 1
// AddComCollect ( j , x , y ) ;
89932: LD_VAR 0 2
89936: PPUSH
89937: LD_VAR 0 6
89941: PPUSH
89942: LD_VAR 0 7
89946: PPUSH
89947: CALL_OW 177
// end ;
89951: GO 89909
89953: POP
89954: POP
// exit ;
89955: POP
89956: POP
89957: GO 90194
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
89959: LD_ADDR_VAR 0 4
89963: PUSH
89964: LD_INT 22
89966: PUSH
89967: LD_VAR 0 5
89971: PUSH
89972: EMPTY
89973: LIST
89974: LIST
89975: PUSH
89976: LD_INT 91
89978: PUSH
89979: LD_VAR 0 8
89983: PUSH
89984: LD_INT 8
89986: PUSH
89987: EMPTY
89988: LIST
89989: LIST
89990: LIST
89991: PUSH
89992: LD_INT 2
89994: PUSH
89995: LD_INT 34
89997: PUSH
89998: LD_INT 12
90000: PUSH
90001: EMPTY
90002: LIST
90003: LIST
90004: PUSH
90005: LD_INT 34
90007: PUSH
90008: LD_INT 51
90010: PUSH
90011: EMPTY
90012: LIST
90013: LIST
90014: PUSH
90015: LD_INT 34
90017: PUSH
90018: LD_INT 32
90020: PUSH
90021: EMPTY
90022: LIST
90023: LIST
90024: PUSH
90025: LD_INT 34
90027: PUSH
90028: LD_INT 89
90030: PUSH
90031: EMPTY
90032: LIST
90033: LIST
90034: PUSH
90035: EMPTY
90036: LIST
90037: LIST
90038: LIST
90039: LIST
90040: LIST
90041: PUSH
90042: EMPTY
90043: LIST
90044: LIST
90045: LIST
90046: PPUSH
90047: CALL_OW 69
90051: ST_TO_ADDR
// if tmp then
90052: LD_VAR 0 4
90056: IFFALSE 90190
// begin for j in tmp do
90058: LD_ADDR_VAR 0 2
90062: PUSH
90063: LD_VAR 0 4
90067: PUSH
90068: FOR_IN
90069: IFFALSE 90188
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
90071: LD_VAR 0 2
90075: PPUSH
90076: CALL_OW 262
90080: PUSH
90081: LD_INT 3
90083: EQUAL
90084: IFTRUE 90101
90086: PUSH
90087: LD_VAR 0 2
90091: PPUSH
90092: CALL_OW 261
90096: PUSH
90097: LD_INT 20
90099: GREATER
90100: OR
90101: IFFALSE 90115
90103: PUSH
90104: LD_VAR 0 2
90108: PPUSH
90109: CALL_OW 314
90113: NOT
90114: AND
90115: IFFALSE 90145
90117: PUSH
90118: LD_VAR 0 2
90122: PPUSH
90123: CALL_OW 263
90127: PUSH
90128: LD_INT 1
90130: NONEQUAL
90131: IFTRUE 90144
90133: PUSH
90134: LD_VAR 0 2
90138: PPUSH
90139: CALL_OW 311
90143: OR
90144: AND
90145: IFFALSE 90186
// begin ComCollect ( j , x , y ) ;
90147: LD_VAR 0 2
90151: PPUSH
90152: LD_VAR 0 6
90156: PPUSH
90157: LD_VAR 0 7
90161: PPUSH
90162: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
90166: LD_VAR 0 2
90170: PPUSH
90171: LD_VAR 0 8
90175: PPUSH
90176: CALL_OW 172
// exit ;
90180: POP
90181: POP
90182: POP
90183: POP
90184: GO 90194
// end ;
90186: GO 90068
90188: POP
90189: POP
// end ; end ;
90190: GO 89555
90192: POP
90193: POP
// end ; end_of_file
90194: PPOPN 9
90196: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
90197: LD_VAR 0 1
90201: PUSH
90202: LD_INT 200
90204: DOUBLE
90205: GREATEREQUAL
90206: IFFALSE 90214
90208: LD_INT 299
90210: DOUBLE
90211: LESSEQUAL
90212: IFTRUE 90216
90214: GO 90248
90216: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
90217: LD_VAR 0 1
90221: PPUSH
90222: LD_VAR 0 2
90226: PPUSH
90227: LD_VAR 0 3
90231: PPUSH
90232: LD_VAR 0 4
90236: PPUSH
90237: LD_VAR 0 5
90241: PPUSH
90242: CALL 91110 0 5
90246: GO 90325
90248: LD_INT 300
90250: DOUBLE
90251: GREATEREQUAL
90252: IFFALSE 90260
90254: LD_INT 399
90256: DOUBLE
90257: LESSEQUAL
90258: IFTRUE 90262
90260: GO 90324
90262: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
90263: LD_VAR 0 1
90267: PPUSH
90268: LD_VAR 0 2
90272: PPUSH
90273: LD_VAR 0 3
90277: PPUSH
90278: LD_VAR 0 4
90282: PPUSH
90283: LD_VAR 0 5
90287: PPUSH
90288: LD_VAR 0 6
90292: PPUSH
90293: LD_VAR 0 7
90297: PPUSH
90298: LD_VAR 0 8
90302: PPUSH
90303: LD_VAR 0 9
90307: PPUSH
90308: LD_VAR 0 10
90312: PPUSH
90313: LD_VAR 0 11
90317: PPUSH
90318: CALL 86750 0 11
90322: GO 90325
90324: POP
// end ;
90325: PPOPN 11
90327: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
90328: LD_VAR 0 1
90332: PPUSH
90333: LD_VAR 0 2
90337: PPUSH
90338: LD_VAR 0 3
90342: PPUSH
90343: LD_VAR 0 4
90347: PPUSH
90348: LD_VAR 0 5
90352: PPUSH
90353: CALL 90410 0 5
// end ; end_of_file
90357: PPOPN 5
90359: END
// export function SOS_UnitDestroyed ( un ) ; begin
90360: LD_INT 0
90362: PPUSH
// ComRadiation ( un ) ;
90363: LD_VAR 0 1
90367: PPUSH
90368: CALL 91530 0 1
// end ;
90372: LD_VAR 0 2
90376: RET
// export function SOS_UnitKamikazed ( un ) ; begin
90377: LD_INT 0
90379: PPUSH
// ComRadiation ( un ) ;
90380: LD_VAR 0 1
90384: PPUSH
90385: CALL 91530 0 1
// end ;
90389: LD_VAR 0 2
90393: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
90394: LD_INT 0
90396: PPUSH
// end ;
90397: LD_VAR 0 4
90401: RET
// export function SOS_Command ( cmd ) ; begin
90402: LD_INT 0
90404: PPUSH
// end ;
90405: LD_VAR 0 2
90409: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
90410: LD_INT 0
90412: PPUSH
// end ;
90413: LD_VAR 0 6
90417: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
90418: LD_INT 0
90420: PPUSH
90421: PPUSH
90422: PPUSH
90423: PPUSH
90424: PPUSH
// if not vehicle or not factory then
90425: LD_VAR 0 1
90429: NOT
90430: IFTRUE 90439
90432: PUSH
90433: LD_VAR 0 2
90437: NOT
90438: OR
90439: IFFALSE 90443
// exit ;
90441: GO 91105
// weapon := GetWeapon ( vehicle ) ;
90443: LD_ADDR_VAR 0 7
90447: PUSH
90448: LD_VAR 0 1
90452: PPUSH
90453: CALL_OW 264
90457: ST_TO_ADDR
// if weapon = ar_miner then
90458: LD_VAR 0 7
90462: PUSH
90463: LD_INT 81
90465: EQUAL
90466: IFFALSE 90523
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
90468: LD_ADDR_EXP 144
90472: PUSH
90473: LD_EXP 144
90477: PPUSH
90478: LD_EXP 144
90482: PUSH
90483: LD_INT 1
90485: PLUS
90486: PPUSH
90487: LD_VAR 0 1
90491: PPUSH
90492: CALL_OW 1
90496: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
90497: LD_ADDR_EXP 145
90501: PUSH
90502: LD_EXP 145
90506: PPUSH
90507: LD_EXP 145
90511: PUSH
90512: LD_INT 1
90514: PLUS
90515: PPUSH
90516: EMPTY
90517: PPUSH
90518: CALL_OW 1
90522: ST_TO_ADDR
// end ; if not factoryWaypoints then
90523: LD_EXP 133
90527: NOT
90528: IFFALSE 90532
// exit ;
90530: GO 91105
// for i := 1 to Count ( factoryWaypoints ) do
90532: LD_ADDR_VAR 0 4
90536: PUSH
90537: DOUBLE
90538: LD_INT 1
90540: DEC
90541: ST_TO_ADDR
90542: LD_EXP 133
90546: PPUSH
90547: CALL 32781 0 1
90551: PUSH
90552: FOR_TO
90553: IFFALSE 91103
// if factoryWaypoints [ i ] [ 2 ] = factory then
90555: LD_EXP 133
90559: PUSH
90560: LD_VAR 0 4
90564: ARRAY
90565: PUSH
90566: LD_INT 2
90568: ARRAY
90569: PUSH
90570: LD_VAR 0 2
90574: EQUAL
90575: IFFALSE 91101
// begin if GetControl ( vehicle ) = control_manual then
90577: LD_VAR 0 1
90581: PPUSH
90582: CALL_OW 263
90586: PUSH
90587: LD_INT 1
90589: EQUAL
90590: IFFALSE 90954
// begin driver := IsDrivenBy ( vehicle ) ;
90592: LD_ADDR_VAR 0 5
90596: PUSH
90597: LD_VAR 0 1
90601: PPUSH
90602: CALL_OW 311
90606: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
90607: LD_VAR 0 5
90611: PUSH
90612: LD_EXP 134
90616: IN
90617: IFTRUE 90631
90619: PUSH
90620: LD_VAR 0 1
90624: PUSH
90625: LD_EXP 134
90629: IN
90630: OR
90631: IFFALSE 90637
// exit ;
90633: POP
90634: POP
90635: GO 91105
// if not HasTask ( driver ) then
90637: LD_VAR 0 5
90641: PPUSH
90642: CALL_OW 314
90646: NOT
90647: IFFALSE 90952
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
90649: LD_ADDR_EXP 134
90653: PUSH
90654: LD_EXP 134
90658: PPUSH
90659: LD_VAR 0 5
90663: PPUSH
90664: CALL 68757 0 2
90668: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
90669: LD_ADDR_EXP 134
90673: PUSH
90674: LD_EXP 134
90678: PPUSH
90679: LD_VAR 0 1
90683: PPUSH
90684: CALL 68757 0 2
90688: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90689: LD_ADDR_VAR 0 6
90693: PUSH
90694: LD_EXP 133
90698: PUSH
90699: LD_VAR 0 4
90703: ARRAY
90704: PUSH
90705: LD_INT 3
90707: ARRAY
90708: PPUSH
90709: LD_EXP 133
90713: PUSH
90714: LD_VAR 0 4
90718: ARRAY
90719: PUSH
90720: LD_INT 4
90722: ARRAY
90723: PPUSH
90724: CALL_OW 428
90728: ST_TO_ADDR
// if hex then
90729: LD_VAR 0 6
90733: IFFALSE 90751
// ComMoveUnit ( driver , hex ) else
90735: LD_VAR 0 5
90739: PPUSH
90740: LD_VAR 0 6
90744: PPUSH
90745: CALL_OW 112
90749: GO 90835
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
90751: LD_VAR 0 1
90755: PPUSH
90756: LD_EXP 133
90760: PUSH
90761: LD_VAR 0 4
90765: ARRAY
90766: PUSH
90767: LD_INT 3
90769: ARRAY
90770: PPUSH
90771: LD_EXP 133
90775: PUSH
90776: LD_VAR 0 4
90780: ARRAY
90781: PUSH
90782: LD_INT 4
90784: ARRAY
90785: PPUSH
90786: CALL_OW 297
90790: PUSH
90791: LD_INT 0
90793: GREATER
90794: IFFALSE 90835
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90796: LD_VAR 0 5
90800: PPUSH
90801: LD_EXP 133
90805: PUSH
90806: LD_VAR 0 4
90810: ARRAY
90811: PUSH
90812: LD_INT 3
90814: ARRAY
90815: PPUSH
90816: LD_EXP 133
90820: PUSH
90821: LD_VAR 0 4
90825: ARRAY
90826: PUSH
90827: LD_INT 4
90829: ARRAY
90830: PPUSH
90831: CALL_OW 111
// AddComExitVehicle ( driver ) ;
90835: LD_VAR 0 5
90839: PPUSH
90840: CALL_OW 181
// if Multiplayer then
90844: LD_OWVAR 4
90848: IFFALSE 90897
// begin repeat wait ( 10 ) ;
90850: LD_INT 10
90852: PPUSH
90853: CALL_OW 67
// until not IsInUnit ( driver ) ;
90857: LD_VAR 0 5
90861: PPUSH
90862: CALL_OW 310
90866: NOT
90867: IFFALSE 90850
// if not HasTask ( driver ) then
90869: LD_VAR 0 5
90873: PPUSH
90874: CALL_OW 314
90878: NOT
90879: IFFALSE 90895
// ComEnterUnit ( driver , factory ) ;
90881: LD_VAR 0 5
90885: PPUSH
90886: LD_VAR 0 2
90890: PPUSH
90891: CALL_OW 120
// end else
90895: GO 90911
// AddComEnterUnit ( driver , factory ) ;
90897: LD_VAR 0 5
90901: PPUSH
90902: LD_VAR 0 2
90906: PPUSH
90907: CALL_OW 180
// wait ( 0 0$1 ) ;
90911: LD_INT 35
90913: PPUSH
90914: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
90918: LD_ADDR_EXP 134
90922: PUSH
90923: LD_EXP 134
90927: PUSH
90928: LD_VAR 0 5
90932: DIFF
90933: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
90934: LD_ADDR_EXP 134
90938: PUSH
90939: LD_EXP 134
90943: PUSH
90944: LD_VAR 0 1
90948: DIFF
90949: ST_TO_ADDR
// break ;
90950: GO 91103
// end ; end else
90952: GO 91101
// if GetControl ( vehicle ) = control_remote then
90954: LD_VAR 0 1
90958: PPUSH
90959: CALL_OW 263
90963: PUSH
90964: LD_INT 2
90966: EQUAL
90967: IFFALSE 91053
// begin wait ( 0 0$2 ) ;
90969: LD_INT 70
90971: PPUSH
90972: CALL_OW 67
// repeat wait ( 10 ) ;
90976: LD_INT 10
90978: PPUSH
90979: CALL_OW 67
// Connect ( vehicle ) ;
90983: LD_VAR 0 1
90987: PPUSH
90988: CALL 39059 0 1
// until IsControledBy ( vehicle ) ;
90992: LD_VAR 0 1
90996: PPUSH
90997: CALL_OW 312
91001: IFFALSE 90976
// wait ( 10 ) ;
91003: LD_INT 10
91005: PPUSH
91006: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
91010: LD_VAR 0 1
91014: PPUSH
91015: LD_EXP 133
91019: PUSH
91020: LD_VAR 0 4
91024: ARRAY
91025: PUSH
91026: LD_INT 3
91028: ARRAY
91029: PPUSH
91030: LD_EXP 133
91034: PUSH
91035: LD_VAR 0 4
91039: ARRAY
91040: PUSH
91041: LD_INT 4
91043: ARRAY
91044: PPUSH
91045: CALL_OW 111
// break ;
91049: GO 91103
// end else
91051: GO 91101
// begin wait ( 0 0$3 ) ;
91053: LD_INT 105
91055: PPUSH
91056: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
91060: LD_VAR 0 1
91064: PPUSH
91065: LD_EXP 133
91069: PUSH
91070: LD_VAR 0 4
91074: ARRAY
91075: PUSH
91076: LD_INT 3
91078: ARRAY
91079: PPUSH
91080: LD_EXP 133
91084: PUSH
91085: LD_VAR 0 4
91089: ARRAY
91090: PUSH
91091: LD_INT 4
91093: ARRAY
91094: PPUSH
91095: CALL_OW 111
// break ;
91099: GO 91103
// end ; end ;
91101: GO 90552
91103: POP
91104: POP
// end ;
91105: LD_VAR 0 3
91109: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
91110: LD_INT 0
91112: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
91113: LD_VAR 0 1
91117: PUSH
91118: LD_INT 250
91120: EQUAL
91121: IFFALSE 91138
91123: PUSH
91124: LD_VAR 0 2
91128: PPUSH
91129: CALL_OW 264
91133: PUSH
91134: LD_INT 81
91136: EQUAL
91137: AND
91138: IFFALSE 91159
// MinerPlaceMine ( unit , x , y ) ;
91140: LD_VAR 0 2
91144: PPUSH
91145: LD_VAR 0 4
91149: PPUSH
91150: LD_VAR 0 5
91154: PPUSH
91155: CALL 94505 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
91159: LD_VAR 0 1
91163: PUSH
91164: LD_INT 251
91166: EQUAL
91167: IFFALSE 91184
91169: PUSH
91170: LD_VAR 0 2
91174: PPUSH
91175: CALL_OW 264
91179: PUSH
91180: LD_INT 81
91182: EQUAL
91183: AND
91184: IFFALSE 91205
// MinerDetonateMine ( unit , x , y ) ;
91186: LD_VAR 0 2
91190: PPUSH
91191: LD_VAR 0 4
91195: PPUSH
91196: LD_VAR 0 5
91200: PPUSH
91201: CALL 94912 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
91205: LD_VAR 0 1
91209: PUSH
91210: LD_INT 252
91212: EQUAL
91213: IFFALSE 91230
91215: PUSH
91216: LD_VAR 0 2
91220: PPUSH
91221: CALL_OW 264
91225: PUSH
91226: LD_INT 81
91228: EQUAL
91229: AND
91230: IFFALSE 91251
// MinerCreateMinefield ( unit , x , y ) ;
91232: LD_VAR 0 2
91236: PPUSH
91237: LD_VAR 0 4
91241: PPUSH
91242: LD_VAR 0 5
91246: PPUSH
91247: CALL 95144 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
91251: LD_VAR 0 1
91255: PUSH
91256: LD_INT 253
91258: EQUAL
91259: IFFALSE 91276
91261: PUSH
91262: LD_VAR 0 2
91266: PPUSH
91267: CALL_OW 257
91271: PUSH
91272: LD_INT 5
91274: EQUAL
91275: AND
91276: IFFALSE 91297
// ComBinocular ( unit , x , y ) ;
91278: LD_VAR 0 2
91282: PPUSH
91283: LD_VAR 0 4
91287: PPUSH
91288: LD_VAR 0 5
91292: PPUSH
91293: CALL 95519 0 3
// if selectedUnit then
91297: LD_VAR 0 3
91301: IFFALSE 91361
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
91303: LD_VAR 0 1
91307: PUSH
91308: LD_INT 254
91310: EQUAL
91311: IFFALSE 91328
91313: PUSH
91314: LD_VAR 0 2
91318: PPUSH
91319: CALL_OW 264
91323: PUSH
91324: LD_INT 99
91326: EQUAL
91327: AND
91328: IFFALSE 91345
91330: PUSH
91331: LD_VAR 0 3
91335: PPUSH
91336: CALL_OW 263
91340: PUSH
91341: LD_INT 3
91343: EQUAL
91344: AND
91345: IFFALSE 91361
// HackDestroyVehicle ( unit , selectedUnit ) ;
91347: LD_VAR 0 2
91351: PPUSH
91352: LD_VAR 0 3
91356: PPUSH
91357: CALL 93695 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
91361: LD_VAR 0 1
91365: PUSH
91366: LD_INT 255
91368: EQUAL
91369: IFFALSE 91393
91371: PUSH
91372: LD_VAR 0 2
91376: PPUSH
91377: CALL_OW 264
91381: PUSH
91382: LD_INT 14
91384: PUSH
91385: LD_INT 53
91387: PUSH
91388: EMPTY
91389: LIST
91390: LIST
91391: IN
91392: AND
91393: IFFALSE 91411
91395: PUSH
91396: LD_VAR 0 4
91400: PPUSH
91401: LD_VAR 0 5
91405: PPUSH
91406: CALL_OW 488
91410: AND
91411: IFFALSE 91435
// CutTreeXYR ( unit , x , y , 12 ) ;
91413: LD_VAR 0 2
91417: PPUSH
91418: LD_VAR 0 4
91422: PPUSH
91423: LD_VAR 0 5
91427: PPUSH
91428: LD_INT 12
91430: PPUSH
91431: CALL 91626 0 4
// if cmd = 256 then
91435: LD_VAR 0 1
91439: PUSH
91440: LD_INT 256
91442: EQUAL
91443: IFFALSE 91464
// SetFactoryWaypoint ( unit , x , y ) ;
91445: LD_VAR 0 2
91449: PPUSH
91450: LD_VAR 0 4
91454: PPUSH
91455: LD_VAR 0 5
91459: PPUSH
91460: CALL 88742 0 3
// if cmd = 257 then
91464: LD_VAR 0 1
91468: PUSH
91469: LD_INT 257
91471: EQUAL
91472: IFFALSE 91493
// SetWarehouseGatheringPoint ( unit , x , y ) ;
91474: LD_VAR 0 2
91478: PPUSH
91479: LD_VAR 0 4
91483: PPUSH
91484: LD_VAR 0 5
91488: PPUSH
91489: CALL 89238 0 3
// if cmd = 258 then
91493: LD_VAR 0 1
91497: PUSH
91498: LD_INT 258
91500: EQUAL
91501: IFFALSE 91525
// BurnTreeXYR ( unit , x , y , 8 ) ;
91503: LD_VAR 0 2
91507: PPUSH
91508: LD_VAR 0 4
91512: PPUSH
91513: LD_VAR 0 5
91517: PPUSH
91518: LD_INT 8
91520: PPUSH
91521: CALL 92048 0 4
// end ;
91525: LD_VAR 0 6
91529: RET
// export function ComRadiation ( un ) ; var eff ; begin
91530: LD_INT 0
91532: PPUSH
91533: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
91534: LD_VAR 0 1
91538: PPUSH
91539: CALL_OW 264
91543: PUSH
91544: LD_INT 91
91546: NONEQUAL
91547: IFFALSE 91551
// exit ;
91549: GO 91621
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
91551: LD_INT 68
91553: PPUSH
91554: LD_VAR 0 1
91558: PPUSH
91559: CALL_OW 255
91563: PPUSH
91564: CALL_OW 321
91568: PUSH
91569: LD_INT 2
91571: EQUAL
91572: IFFALSE 91584
// eff := 50 else
91574: LD_ADDR_VAR 0 3
91578: PUSH
91579: LD_INT 50
91581: ST_TO_ADDR
91582: GO 91592
// eff := 25 ;
91584: LD_ADDR_VAR 0 3
91588: PUSH
91589: LD_INT 25
91591: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91592: LD_VAR 0 1
91596: PPUSH
91597: CALL_OW 250
91601: PPUSH
91602: LD_VAR 0 1
91606: PPUSH
91607: CALL_OW 251
91611: PPUSH
91612: LD_VAR 0 3
91616: PPUSH
91617: CALL_OW 495
// end ;
91621: LD_VAR 0 2
91625: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91626: LD_INT 0
91628: PPUSH
91629: PPUSH
91630: PPUSH
91631: PPUSH
91632: PPUSH
91633: PPUSH
91634: PPUSH
91635: PPUSH
91636: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
91637: LD_VAR 0 1
91641: PPUSH
91642: CALL_OW 302
91646: NOT
91647: IFTRUE 91666
91649: PUSH
91650: LD_VAR 0 2
91654: PPUSH
91655: LD_VAR 0 3
91659: PPUSH
91660: CALL_OW 488
91664: NOT
91665: OR
91666: IFTRUE 91675
91668: PUSH
91669: LD_VAR 0 4
91673: NOT
91674: OR
91675: IFFALSE 91679
// exit ;
91677: GO 92043
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
91679: LD_VAR 0 1
91683: PPUSH
91684: CALL_OW 437
91688: PPUSH
91689: CALL 32781 0 1
91693: PUSH
91694: LD_INT 10
91696: GREATER
91697: IFFALSE 91701
// exit ;
91699: GO 92043
// list := [ ] ;
91701: LD_ADDR_VAR 0 13
91705: PUSH
91706: EMPTY
91707: ST_TO_ADDR
// if x - r < 0 then
91708: LD_VAR 0 2
91712: PUSH
91713: LD_VAR 0 4
91717: MINUS
91718: PUSH
91719: LD_INT 0
91721: LESS
91722: IFFALSE 91734
// min_x := 0 else
91724: LD_ADDR_VAR 0 7
91728: PUSH
91729: LD_INT 0
91731: ST_TO_ADDR
91732: GO 91750
// min_x := x - r ;
91734: LD_ADDR_VAR 0 7
91738: PUSH
91739: LD_VAR 0 2
91743: PUSH
91744: LD_VAR 0 4
91748: MINUS
91749: ST_TO_ADDR
// if y - r < 0 then
91750: LD_VAR 0 3
91754: PUSH
91755: LD_VAR 0 4
91759: MINUS
91760: PUSH
91761: LD_INT 0
91763: LESS
91764: IFFALSE 91776
// min_y := 0 else
91766: LD_ADDR_VAR 0 8
91770: PUSH
91771: LD_INT 0
91773: ST_TO_ADDR
91774: GO 91792
// min_y := y - r ;
91776: LD_ADDR_VAR 0 8
91780: PUSH
91781: LD_VAR 0 3
91785: PUSH
91786: LD_VAR 0 4
91790: MINUS
91791: ST_TO_ADDR
// max_x := x + r ;
91792: LD_ADDR_VAR 0 9
91796: PUSH
91797: LD_VAR 0 2
91801: PUSH
91802: LD_VAR 0 4
91806: PLUS
91807: ST_TO_ADDR
// max_y := y + r ;
91808: LD_ADDR_VAR 0 10
91812: PUSH
91813: LD_VAR 0 3
91817: PUSH
91818: LD_VAR 0 4
91822: PLUS
91823: ST_TO_ADDR
// for _x = min_x to max_x do
91824: LD_ADDR_VAR 0 11
91828: PUSH
91829: DOUBLE
91830: LD_VAR 0 7
91834: DEC
91835: ST_TO_ADDR
91836: LD_VAR 0 9
91840: PUSH
91841: FOR_TO
91842: IFFALSE 91961
// for _y = min_y to max_y do
91844: LD_ADDR_VAR 0 12
91848: PUSH
91849: DOUBLE
91850: LD_VAR 0 8
91854: DEC
91855: ST_TO_ADDR
91856: LD_VAR 0 10
91860: PUSH
91861: FOR_TO
91862: IFFALSE 91957
// begin if not ValidHex ( _x , _y ) then
91864: LD_VAR 0 11
91868: PPUSH
91869: LD_VAR 0 12
91873: PPUSH
91874: CALL_OW 488
91878: NOT
91879: IFFALSE 91883
// continue ;
91881: GO 91861
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91883: LD_VAR 0 11
91887: PPUSH
91888: LD_VAR 0 12
91892: PPUSH
91893: CALL_OW 351
91897: IFFALSE 91915
91899: PUSH
91900: LD_VAR 0 11
91904: PPUSH
91905: LD_VAR 0 12
91909: PPUSH
91910: CALL_OW 554
91914: AND
91915: IFFALSE 91955
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91917: LD_ADDR_VAR 0 13
91921: PUSH
91922: LD_VAR 0 13
91926: PPUSH
91927: LD_VAR 0 13
91931: PUSH
91932: LD_INT 1
91934: PLUS
91935: PPUSH
91936: LD_VAR 0 11
91940: PUSH
91941: LD_VAR 0 12
91945: PUSH
91946: EMPTY
91947: LIST
91948: LIST
91949: PPUSH
91950: CALL_OW 2
91954: ST_TO_ADDR
// end ;
91955: GO 91861
91957: POP
91958: POP
91959: GO 91841
91961: POP
91962: POP
// if not list then
91963: LD_VAR 0 13
91967: NOT
91968: IFFALSE 91972
// exit ;
91970: GO 92043
// for i in list do
91972: LD_ADDR_VAR 0 6
91976: PUSH
91977: LD_VAR 0 13
91981: PUSH
91982: FOR_IN
91983: IFFALSE 92041
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91985: LD_VAR 0 1
91989: PPUSH
91990: LD_STRING M
91992: PUSH
91993: LD_VAR 0 6
91997: PUSH
91998: LD_INT 1
92000: ARRAY
92001: PUSH
92002: LD_VAR 0 6
92006: PUSH
92007: LD_INT 2
92009: ARRAY
92010: PUSH
92011: LD_INT 0
92013: PUSH
92014: LD_INT 0
92016: PUSH
92017: LD_INT 0
92019: PUSH
92020: LD_INT 0
92022: PUSH
92023: EMPTY
92024: LIST
92025: LIST
92026: LIST
92027: LIST
92028: LIST
92029: LIST
92030: LIST
92031: PUSH
92032: EMPTY
92033: LIST
92034: PPUSH
92035: CALL_OW 447
92039: GO 91982
92041: POP
92042: POP
// end ;
92043: LD_VAR 0 5
92047: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
92048: LD_INT 0
92050: PPUSH
92051: PPUSH
92052: PPUSH
92053: PPUSH
92054: PPUSH
92055: PPUSH
92056: PPUSH
92057: PPUSH
92058: PPUSH
92059: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
92060: LD_VAR 0 1
92064: PPUSH
92065: CALL_OW 302
92069: NOT
92070: IFTRUE 92089
92072: PUSH
92073: LD_VAR 0 2
92077: PPUSH
92078: LD_VAR 0 3
92082: PPUSH
92083: CALL_OW 488
92087: NOT
92088: OR
92089: IFTRUE 92098
92091: PUSH
92092: LD_VAR 0 4
92096: NOT
92097: OR
92098: IFFALSE 92102
// exit ;
92100: GO 92641
// if Count ( GetTaskList ( flame ) ) > 10 then
92102: LD_VAR 0 1
92106: PPUSH
92107: CALL_OW 437
92111: PPUSH
92112: CALL 32781 0 1
92116: PUSH
92117: LD_INT 10
92119: GREATER
92120: IFFALSE 92124
// exit ;
92122: GO 92641
// list := [ ] ;
92124: LD_ADDR_VAR 0 13
92128: PUSH
92129: EMPTY
92130: ST_TO_ADDR
// if x - r < 0 then
92131: LD_VAR 0 2
92135: PUSH
92136: LD_VAR 0 4
92140: MINUS
92141: PUSH
92142: LD_INT 0
92144: LESS
92145: IFFALSE 92157
// min_x := 0 else
92147: LD_ADDR_VAR 0 7
92151: PUSH
92152: LD_INT 0
92154: ST_TO_ADDR
92155: GO 92173
// min_x := x - r ;
92157: LD_ADDR_VAR 0 7
92161: PUSH
92162: LD_VAR 0 2
92166: PUSH
92167: LD_VAR 0 4
92171: MINUS
92172: ST_TO_ADDR
// if y - r < 0 then
92173: LD_VAR 0 3
92177: PUSH
92178: LD_VAR 0 4
92182: MINUS
92183: PUSH
92184: LD_INT 0
92186: LESS
92187: IFFALSE 92199
// min_y := 0 else
92189: LD_ADDR_VAR 0 8
92193: PUSH
92194: LD_INT 0
92196: ST_TO_ADDR
92197: GO 92215
// min_y := y - r ;
92199: LD_ADDR_VAR 0 8
92203: PUSH
92204: LD_VAR 0 3
92208: PUSH
92209: LD_VAR 0 4
92213: MINUS
92214: ST_TO_ADDR
// max_x := x + r ;
92215: LD_ADDR_VAR 0 9
92219: PUSH
92220: LD_VAR 0 2
92224: PUSH
92225: LD_VAR 0 4
92229: PLUS
92230: ST_TO_ADDR
// max_y := y + r ;
92231: LD_ADDR_VAR 0 10
92235: PUSH
92236: LD_VAR 0 3
92240: PUSH
92241: LD_VAR 0 4
92245: PLUS
92246: ST_TO_ADDR
// for _x = min_x to max_x do
92247: LD_ADDR_VAR 0 11
92251: PUSH
92252: DOUBLE
92253: LD_VAR 0 7
92257: DEC
92258: ST_TO_ADDR
92259: LD_VAR 0 9
92263: PUSH
92264: FOR_TO
92265: IFFALSE 92384
// for _y = min_y to max_y do
92267: LD_ADDR_VAR 0 12
92271: PUSH
92272: DOUBLE
92273: LD_VAR 0 8
92277: DEC
92278: ST_TO_ADDR
92279: LD_VAR 0 10
92283: PUSH
92284: FOR_TO
92285: IFFALSE 92380
// begin if not ValidHex ( _x , _y ) then
92287: LD_VAR 0 11
92291: PPUSH
92292: LD_VAR 0 12
92296: PPUSH
92297: CALL_OW 488
92301: NOT
92302: IFFALSE 92306
// continue ;
92304: GO 92284
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
92306: LD_VAR 0 11
92310: PPUSH
92311: LD_VAR 0 12
92315: PPUSH
92316: CALL_OW 351
92320: IFFALSE 92338
92322: PUSH
92323: LD_VAR 0 11
92327: PPUSH
92328: LD_VAR 0 12
92332: PPUSH
92333: CALL_OW 554
92337: AND
92338: IFFALSE 92378
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
92340: LD_ADDR_VAR 0 13
92344: PUSH
92345: LD_VAR 0 13
92349: PPUSH
92350: LD_VAR 0 13
92354: PUSH
92355: LD_INT 1
92357: PLUS
92358: PPUSH
92359: LD_VAR 0 11
92363: PUSH
92364: LD_VAR 0 12
92368: PUSH
92369: EMPTY
92370: LIST
92371: LIST
92372: PPUSH
92373: CALL_OW 2
92377: ST_TO_ADDR
// end ;
92378: GO 92284
92380: POP
92381: POP
92382: GO 92264
92384: POP
92385: POP
// if not list then
92386: LD_VAR 0 13
92390: NOT
92391: IFFALSE 92395
// exit ;
92393: GO 92641
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
92395: LD_ADDR_VAR 0 13
92399: PUSH
92400: LD_VAR 0 1
92404: PPUSH
92405: LD_VAR 0 13
92409: PPUSH
92410: LD_INT 1
92412: PPUSH
92413: LD_INT 1
92415: PPUSH
92416: CALL 36187 0 4
92420: ST_TO_ADDR
// ComStop ( flame ) ;
92421: LD_VAR 0 1
92425: PPUSH
92426: CALL_OW 141
// for i in list do
92430: LD_ADDR_VAR 0 6
92434: PUSH
92435: LD_VAR 0 13
92439: PUSH
92440: FOR_IN
92441: IFFALSE 92472
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
92443: LD_VAR 0 1
92447: PPUSH
92448: LD_VAR 0 6
92452: PUSH
92453: LD_INT 1
92455: ARRAY
92456: PPUSH
92457: LD_VAR 0 6
92461: PUSH
92462: LD_INT 2
92464: ARRAY
92465: PPUSH
92466: CALL_OW 176
92470: GO 92440
92472: POP
92473: POP
// repeat wait ( 0 0$1 ) ;
92474: LD_INT 35
92476: PPUSH
92477: CALL_OW 67
// task := GetTaskList ( flame ) ;
92481: LD_ADDR_VAR 0 14
92485: PUSH
92486: LD_VAR 0 1
92490: PPUSH
92491: CALL_OW 437
92495: ST_TO_ADDR
// if not task then
92496: LD_VAR 0 14
92500: NOT
92501: IFFALSE 92505
// exit ;
92503: GO 92641
// if task [ 1 ] [ 1 ] <> | then
92505: LD_VAR 0 14
92509: PUSH
92510: LD_INT 1
92512: ARRAY
92513: PUSH
92514: LD_INT 1
92516: ARRAY
92517: PUSH
92518: LD_STRING |
92520: NONEQUAL
92521: IFFALSE 92525
// exit ;
92523: GO 92641
// _x := task [ 1 ] [ 2 ] ;
92525: LD_ADDR_VAR 0 11
92529: PUSH
92530: LD_VAR 0 14
92534: PUSH
92535: LD_INT 1
92537: ARRAY
92538: PUSH
92539: LD_INT 2
92541: ARRAY
92542: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
92543: LD_ADDR_VAR 0 12
92547: PUSH
92548: LD_VAR 0 14
92552: PUSH
92553: LD_INT 1
92555: ARRAY
92556: PUSH
92557: LD_INT 3
92559: ARRAY
92560: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
92561: LD_VAR 0 11
92565: PPUSH
92566: LD_VAR 0 12
92570: PPUSH
92571: CALL_OW 351
92575: NOT
92576: IFTRUE 92595
92578: PUSH
92579: LD_VAR 0 11
92583: PPUSH
92584: LD_VAR 0 12
92588: PPUSH
92589: CALL_OW 554
92593: NOT
92594: OR
92595: IFFALSE 92629
// begin task := Delete ( task , 1 ) ;
92597: LD_ADDR_VAR 0 14
92601: PUSH
92602: LD_VAR 0 14
92606: PPUSH
92607: LD_INT 1
92609: PPUSH
92610: CALL_OW 3
92614: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
92615: LD_VAR 0 1
92619: PPUSH
92620: LD_VAR 0 14
92624: PPUSH
92625: CALL_OW 446
// end ; until not HasTask ( flame ) ;
92629: LD_VAR 0 1
92633: PPUSH
92634: CALL_OW 314
92638: NOT
92639: IFFALSE 92474
// end ;
92641: LD_VAR 0 5
92645: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
92646: LD_EXP 137
92650: NOT
92651: IFFALSE 92701
92653: GO 92655
92655: DISABLE
// begin initHack := true ;
92656: LD_ADDR_EXP 137
92660: PUSH
92661: LD_INT 1
92663: ST_TO_ADDR
// hackTanks := [ ] ;
92664: LD_ADDR_EXP 138
92668: PUSH
92669: EMPTY
92670: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
92671: LD_ADDR_EXP 139
92675: PUSH
92676: EMPTY
92677: ST_TO_ADDR
// hackLimit := 3 ;
92678: LD_ADDR_EXP 140
92682: PUSH
92683: LD_INT 3
92685: ST_TO_ADDR
// hackDist := 12 ;
92686: LD_ADDR_EXP 141
92690: PUSH
92691: LD_INT 12
92693: ST_TO_ADDR
// hackCounter := [ ] ;
92694: LD_ADDR_EXP 142
92698: PUSH
92699: EMPTY
92700: ST_TO_ADDR
// end ;
92701: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
92702: LD_EXP 137
92706: IFFALSE 92724
92708: PUSH
92709: LD_INT 34
92711: PUSH
92712: LD_INT 99
92714: PUSH
92715: EMPTY
92716: LIST
92717: LIST
92718: PPUSH
92719: CALL_OW 69
92723: AND
92724: IFFALSE 92977
92726: GO 92728
92728: DISABLE
92729: LD_INT 0
92731: PPUSH
92732: PPUSH
// begin enable ;
92733: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
92734: LD_ADDR_VAR 0 1
92738: PUSH
92739: LD_INT 34
92741: PUSH
92742: LD_INT 99
92744: PUSH
92745: EMPTY
92746: LIST
92747: LIST
92748: PPUSH
92749: CALL_OW 69
92753: PUSH
92754: FOR_IN
92755: IFFALSE 92975
// begin if not i in hackTanks then
92757: LD_VAR 0 1
92761: PUSH
92762: LD_EXP 138
92766: IN
92767: NOT
92768: IFFALSE 92851
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
92770: LD_ADDR_EXP 138
92774: PUSH
92775: LD_EXP 138
92779: PPUSH
92780: LD_EXP 138
92784: PUSH
92785: LD_INT 1
92787: PLUS
92788: PPUSH
92789: LD_VAR 0 1
92793: PPUSH
92794: CALL_OW 1
92798: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
92799: LD_ADDR_EXP 139
92803: PUSH
92804: LD_EXP 139
92808: PPUSH
92809: LD_EXP 139
92813: PUSH
92814: LD_INT 1
92816: PLUS
92817: PPUSH
92818: EMPTY
92819: PPUSH
92820: CALL_OW 1
92824: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
92825: LD_ADDR_EXP 142
92829: PUSH
92830: LD_EXP 142
92834: PPUSH
92835: LD_EXP 142
92839: PUSH
92840: LD_INT 1
92842: PLUS
92843: PPUSH
92844: EMPTY
92845: PPUSH
92846: CALL_OW 1
92850: ST_TO_ADDR
// end ; if not IsOk ( i ) then
92851: LD_VAR 0 1
92855: PPUSH
92856: CALL_OW 302
92860: NOT
92861: IFFALSE 92874
// begin HackUnlinkAll ( i ) ;
92863: LD_VAR 0 1
92867: PPUSH
92868: CALL 92980 0 1
// continue ;
92872: GO 92754
// end ; HackCheckCapturedStatus ( i ) ;
92874: LD_VAR 0 1
92878: PPUSH
92879: CALL 93425 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
92883: LD_ADDR_VAR 0 2
92887: PUSH
92888: LD_INT 81
92890: PUSH
92891: LD_VAR 0 1
92895: PPUSH
92896: CALL_OW 255
92900: PUSH
92901: EMPTY
92902: LIST
92903: LIST
92904: PUSH
92905: LD_INT 33
92907: PUSH
92908: LD_INT 3
92910: PUSH
92911: EMPTY
92912: LIST
92913: LIST
92914: PUSH
92915: LD_INT 91
92917: PUSH
92918: LD_VAR 0 1
92922: PUSH
92923: LD_EXP 141
92927: PUSH
92928: EMPTY
92929: LIST
92930: LIST
92931: LIST
92932: PUSH
92933: LD_INT 50
92935: PUSH
92936: EMPTY
92937: LIST
92938: PUSH
92939: EMPTY
92940: LIST
92941: LIST
92942: LIST
92943: LIST
92944: PPUSH
92945: CALL_OW 69
92949: ST_TO_ADDR
// if not tmp then
92950: LD_VAR 0 2
92954: NOT
92955: IFFALSE 92959
// continue ;
92957: GO 92754
// HackLink ( i , tmp ) ;
92959: LD_VAR 0 1
92963: PPUSH
92964: LD_VAR 0 2
92968: PPUSH
92969: CALL 93116 0 2
// end ;
92973: GO 92754
92975: POP
92976: POP
// end ;
92977: PPOPN 2
92979: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
92980: LD_INT 0
92982: PPUSH
92983: PPUSH
92984: PPUSH
// if not hack in hackTanks then
92985: LD_VAR 0 1
92989: PUSH
92990: LD_EXP 138
92994: IN
92995: NOT
92996: IFFALSE 93000
// exit ;
92998: GO 93111
// index := GetElementIndex ( hackTanks , hack ) ;
93000: LD_ADDR_VAR 0 4
93004: PUSH
93005: LD_EXP 138
93009: PPUSH
93010: LD_VAR 0 1
93014: PPUSH
93015: CALL 35482 0 2
93019: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
93020: LD_EXP 139
93024: PUSH
93025: LD_VAR 0 4
93029: ARRAY
93030: IFFALSE 93111
// begin for i in hackTanksCaptured [ index ] do
93032: LD_ADDR_VAR 0 3
93036: PUSH
93037: LD_EXP 139
93041: PUSH
93042: LD_VAR 0 4
93046: ARRAY
93047: PUSH
93048: FOR_IN
93049: IFFALSE 93075
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
93051: LD_VAR 0 3
93055: PUSH
93056: LD_INT 1
93058: ARRAY
93059: PPUSH
93060: LD_VAR 0 3
93064: PUSH
93065: LD_INT 2
93067: ARRAY
93068: PPUSH
93069: CALL_OW 235
93073: GO 93048
93075: POP
93076: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
93077: LD_ADDR_EXP 139
93081: PUSH
93082: LD_EXP 139
93086: PPUSH
93087: LD_VAR 0 4
93091: PPUSH
93092: EMPTY
93093: PPUSH
93094: CALL_OW 1
93098: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
93099: LD_VAR 0 1
93103: PPUSH
93104: LD_INT 0
93106: PPUSH
93107: CALL_OW 505
// end ; end ;
93111: LD_VAR 0 2
93115: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
93116: LD_INT 0
93118: PPUSH
93119: PPUSH
93120: PPUSH
// if not hack in hackTanks or not vehicles then
93121: LD_VAR 0 1
93125: PUSH
93126: LD_EXP 138
93130: IN
93131: NOT
93132: IFTRUE 93141
93134: PUSH
93135: LD_VAR 0 2
93139: NOT
93140: OR
93141: IFFALSE 93145
// exit ;
93143: GO 93420
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
93145: LD_ADDR_VAR 0 2
93149: PUSH
93150: LD_VAR 0 1
93154: PPUSH
93155: LD_VAR 0 2
93159: PPUSH
93160: LD_INT 1
93162: PPUSH
93163: LD_INT 1
93165: PPUSH
93166: CALL 36134 0 4
93170: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
93171: LD_ADDR_VAR 0 5
93175: PUSH
93176: LD_EXP 138
93180: PPUSH
93181: LD_VAR 0 1
93185: PPUSH
93186: CALL 35482 0 2
93190: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
93191: LD_EXP 139
93195: PUSH
93196: LD_VAR 0 5
93200: ARRAY
93201: PUSH
93202: LD_EXP 140
93206: LESS
93207: IFFALSE 93396
// begin for i := 1 to vehicles do
93209: LD_ADDR_VAR 0 4
93213: PUSH
93214: DOUBLE
93215: LD_INT 1
93217: DEC
93218: ST_TO_ADDR
93219: LD_VAR 0 2
93223: PUSH
93224: FOR_TO
93225: IFFALSE 93394
// begin if hackTanksCaptured [ index ] = hackLimit then
93227: LD_EXP 139
93231: PUSH
93232: LD_VAR 0 5
93236: ARRAY
93237: PUSH
93238: LD_EXP 140
93242: EQUAL
93243: IFFALSE 93247
// break ;
93245: GO 93394
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
93247: LD_ADDR_EXP 142
93251: PUSH
93252: LD_EXP 142
93256: PPUSH
93257: LD_VAR 0 5
93261: PPUSH
93262: LD_EXP 142
93266: PUSH
93267: LD_VAR 0 5
93271: ARRAY
93272: PUSH
93273: LD_INT 1
93275: PLUS
93276: PPUSH
93277: CALL_OW 1
93281: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
93282: LD_ADDR_EXP 139
93286: PUSH
93287: LD_EXP 139
93291: PPUSH
93292: LD_VAR 0 5
93296: PUSH
93297: LD_EXP 139
93301: PUSH
93302: LD_VAR 0 5
93306: ARRAY
93307: PUSH
93308: LD_INT 1
93310: PLUS
93311: PUSH
93312: EMPTY
93313: LIST
93314: LIST
93315: PPUSH
93316: LD_VAR 0 2
93320: PUSH
93321: LD_VAR 0 4
93325: ARRAY
93326: PUSH
93327: LD_VAR 0 2
93331: PUSH
93332: LD_VAR 0 4
93336: ARRAY
93337: PPUSH
93338: CALL_OW 255
93342: PUSH
93343: EMPTY
93344: LIST
93345: LIST
93346: PPUSH
93347: CALL 35699 0 3
93351: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
93352: LD_VAR 0 2
93356: PUSH
93357: LD_VAR 0 4
93361: ARRAY
93362: PPUSH
93363: LD_VAR 0 1
93367: PPUSH
93368: CALL_OW 255
93372: PPUSH
93373: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
93377: LD_VAR 0 2
93381: PUSH
93382: LD_VAR 0 4
93386: ARRAY
93387: PPUSH
93388: CALL_OW 141
// end ;
93392: GO 93224
93394: POP
93395: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93396: LD_VAR 0 1
93400: PPUSH
93401: LD_EXP 139
93405: PUSH
93406: LD_VAR 0 5
93410: ARRAY
93411: PUSH
93412: LD_INT 0
93414: PLUS
93415: PPUSH
93416: CALL_OW 505
// end ;
93420: LD_VAR 0 3
93424: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
93425: LD_INT 0
93427: PPUSH
93428: PPUSH
93429: PPUSH
93430: PPUSH
// if not hack in hackTanks then
93431: LD_VAR 0 1
93435: PUSH
93436: LD_EXP 138
93440: IN
93441: NOT
93442: IFFALSE 93446
// exit ;
93444: GO 93690
// index := GetElementIndex ( hackTanks , hack ) ;
93446: LD_ADDR_VAR 0 4
93450: PUSH
93451: LD_EXP 138
93455: PPUSH
93456: LD_VAR 0 1
93460: PPUSH
93461: CALL 35482 0 2
93465: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
93466: LD_ADDR_VAR 0 3
93470: PUSH
93471: DOUBLE
93472: LD_EXP 139
93476: PUSH
93477: LD_VAR 0 4
93481: ARRAY
93482: INC
93483: ST_TO_ADDR
93484: LD_INT 1
93486: PUSH
93487: FOR_DOWNTO
93488: IFFALSE 93664
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
93490: LD_ADDR_VAR 0 5
93494: PUSH
93495: LD_EXP 139
93499: PUSH
93500: LD_VAR 0 4
93504: ARRAY
93505: PUSH
93506: LD_VAR 0 3
93510: ARRAY
93511: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
93512: LD_VAR 0 5
93516: PUSH
93517: LD_INT 1
93519: ARRAY
93520: PPUSH
93521: CALL_OW 302
93525: NOT
93526: IFTRUE 93554
93528: PUSH
93529: LD_VAR 0 5
93533: PUSH
93534: LD_INT 1
93536: ARRAY
93537: PPUSH
93538: CALL_OW 255
93542: PUSH
93543: LD_VAR 0 1
93547: PPUSH
93548: CALL_OW 255
93552: NONEQUAL
93553: OR
93554: IFFALSE 93662
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
93556: LD_VAR 0 5
93560: PUSH
93561: LD_INT 1
93563: ARRAY
93564: PPUSH
93565: CALL_OW 305
93569: IFFALSE 93597
93571: PUSH
93572: LD_VAR 0 5
93576: PUSH
93577: LD_INT 1
93579: ARRAY
93580: PPUSH
93581: CALL_OW 255
93585: PUSH
93586: LD_VAR 0 1
93590: PPUSH
93591: CALL_OW 255
93595: EQUAL
93596: AND
93597: IFFALSE 93621
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
93599: LD_VAR 0 5
93603: PUSH
93604: LD_INT 1
93606: ARRAY
93607: PPUSH
93608: LD_VAR 0 5
93612: PUSH
93613: LD_INT 2
93615: ARRAY
93616: PPUSH
93617: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
93621: LD_ADDR_EXP 139
93625: PUSH
93626: LD_EXP 139
93630: PPUSH
93631: LD_VAR 0 4
93635: PPUSH
93636: LD_EXP 139
93640: PUSH
93641: LD_VAR 0 4
93645: ARRAY
93646: PPUSH
93647: LD_VAR 0 3
93651: PPUSH
93652: CALL_OW 3
93656: PPUSH
93657: CALL_OW 1
93661: ST_TO_ADDR
// end ; end ;
93662: GO 93487
93664: POP
93665: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93666: LD_VAR 0 1
93670: PPUSH
93671: LD_EXP 139
93675: PUSH
93676: LD_VAR 0 4
93680: ARRAY
93681: PUSH
93682: LD_INT 0
93684: PLUS
93685: PPUSH
93686: CALL_OW 505
// end ;
93690: LD_VAR 0 2
93694: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
93695: LD_INT 0
93697: PPUSH
93698: PPUSH
93699: PPUSH
93700: PPUSH
// if not hack in hackTanks then
93701: LD_VAR 0 1
93705: PUSH
93706: LD_EXP 138
93710: IN
93711: NOT
93712: IFFALSE 93716
// exit ;
93714: GO 93801
// index := GetElementIndex ( hackTanks , hack ) ;
93716: LD_ADDR_VAR 0 5
93720: PUSH
93721: LD_EXP 138
93725: PPUSH
93726: LD_VAR 0 1
93730: PPUSH
93731: CALL 35482 0 2
93735: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
93736: LD_ADDR_VAR 0 4
93740: PUSH
93741: DOUBLE
93742: LD_INT 1
93744: DEC
93745: ST_TO_ADDR
93746: LD_EXP 139
93750: PUSH
93751: LD_VAR 0 5
93755: ARRAY
93756: PUSH
93757: FOR_TO
93758: IFFALSE 93799
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
93760: LD_EXP 139
93764: PUSH
93765: LD_VAR 0 5
93769: ARRAY
93770: PUSH
93771: LD_VAR 0 4
93775: ARRAY
93776: PUSH
93777: LD_INT 1
93779: ARRAY
93780: PUSH
93781: LD_VAR 0 2
93785: EQUAL
93786: IFFALSE 93797
// KillUnit ( vehicle ) ;
93788: LD_VAR 0 2
93792: PPUSH
93793: CALL_OW 66
93797: GO 93757
93799: POP
93800: POP
// end ;
93801: LD_VAR 0 3
93805: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
93806: LD_EXP 143
93810: NOT
93811: IFFALSE 93944
93813: GO 93815
93815: DISABLE
93816: LD_INT 0
93818: PPUSH
// begin initMiner := true ;
93819: LD_ADDR_EXP 143
93823: PUSH
93824: LD_INT 1
93826: ST_TO_ADDR
// minersList := [ ] ;
93827: LD_ADDR_EXP 144
93831: PUSH
93832: EMPTY
93833: ST_TO_ADDR
// minerMinesList := [ ] ;
93834: LD_ADDR_EXP 145
93838: PUSH
93839: EMPTY
93840: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
93841: LD_ADDR_EXP 146
93845: PUSH
93846: LD_INT 10
93848: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
93849: LD_ADDR_VAR 0 1
93853: PUSH
93854: LD_INT 34
93856: PUSH
93857: LD_INT 81
93859: PUSH
93860: EMPTY
93861: LIST
93862: LIST
93863: PPUSH
93864: CALL_OW 69
93868: PUSH
93869: FOR_IN
93870: IFFALSE 93942
// begin if not i in minersList then
93872: LD_VAR 0 1
93876: PUSH
93877: LD_EXP 144
93881: IN
93882: NOT
93883: IFFALSE 93940
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
93885: LD_ADDR_EXP 144
93889: PUSH
93890: LD_EXP 144
93894: PPUSH
93895: LD_EXP 144
93899: PUSH
93900: LD_INT 1
93902: PLUS
93903: PPUSH
93904: LD_VAR 0 1
93908: PPUSH
93909: CALL_OW 1
93913: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
93914: LD_ADDR_EXP 145
93918: PUSH
93919: LD_EXP 145
93923: PPUSH
93924: LD_EXP 145
93928: PUSH
93929: LD_INT 1
93931: PLUS
93932: PPUSH
93933: EMPTY
93934: PPUSH
93935: CALL_OW 1
93939: ST_TO_ADDR
// end end ;
93940: GO 93869
93942: POP
93943: POP
// end ;
93944: PPOPN 1
93946: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
93947: LD_EXP 143
93951: IFFALSE 93982
93953: PUSH
93954: LD_EXP 145
93958: PPUSH
93959: CALL 32781 0 1
93963: IFTRUE 93981
93965: PUSH
93966: LD_INT 34
93968: PUSH
93969: LD_INT 81
93971: PUSH
93972: EMPTY
93973: LIST
93974: LIST
93975: PPUSH
93976: CALL_OW 69
93980: OR
93981: AND
93982: IFFALSE 94502
93984: GO 93986
93986: DISABLE
93987: LD_INT 0
93989: PPUSH
93990: PPUSH
93991: PPUSH
93992: PPUSH
// begin enable ;
93993: ENABLE
// for i := minerMinesList downto 1 do
93994: LD_ADDR_VAR 0 1
93998: PUSH
93999: DOUBLE
94000: LD_EXP 145
94004: INC
94005: ST_TO_ADDR
94006: LD_INT 1
94008: PUSH
94009: FOR_DOWNTO
94010: IFFALSE 94500
// begin side := GetSide ( minersList [ i ] ) ;
94012: LD_ADDR_VAR 0 3
94016: PUSH
94017: LD_EXP 144
94021: PUSH
94022: LD_VAR 0 1
94026: ARRAY
94027: PPUSH
94028: CALL_OW 255
94032: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
94033: LD_EXP 144
94037: PUSH
94038: LD_VAR 0 1
94042: ARRAY
94043: PPUSH
94044: CALL_OW 300
94048: IFFALSE 94069
94050: PUSH
94051: LD_VAR 0 3
94055: PUSH
94056: LD_OWVAR 2
94060: PUSH
94061: LD_INT 9
94063: PUSH
94064: EMPTY
94065: LIST
94066: LIST
94067: IN
94068: AND
94069: IFFALSE 94102
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
94071: LD_EXP 144
94075: PUSH
94076: LD_VAR 0 1
94080: ARRAY
94081: PPUSH
94082: LD_EXP 145
94086: PUSH
94087: LD_VAR 0 1
94091: ARRAY
94092: PPUSH
94093: CALL 32781 0 1
94097: PPUSH
94098: CALL_OW 505
// if not minerMinesList [ i ] then
94102: LD_EXP 145
94106: PUSH
94107: LD_VAR 0 1
94111: ARRAY
94112: NOT
94113: IFFALSE 94117
// continue ;
94115: GO 94009
// for j := minerMinesList [ i ] downto 1 do
94117: LD_ADDR_VAR 0 2
94121: PUSH
94122: DOUBLE
94123: LD_EXP 145
94127: PUSH
94128: LD_VAR 0 1
94132: ARRAY
94133: INC
94134: ST_TO_ADDR
94135: LD_INT 1
94137: PUSH
94138: FOR_DOWNTO
94139: IFFALSE 94496
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
94141: LD_EXP 144
94145: PUSH
94146: LD_VAR 0 1
94150: ARRAY
94151: PPUSH
94152: CALL_OW 301
94156: IFTRUE 94176
94158: PUSH
94159: LD_EXP 144
94163: PUSH
94164: LD_VAR 0 1
94168: ARRAY
94169: PPUSH
94170: CALL_OW 305
94174: NOT
94175: OR
94176: IFFALSE 94267
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
94178: LD_EXP 145
94182: PUSH
94183: LD_VAR 0 1
94187: ARRAY
94188: PUSH
94189: LD_VAR 0 2
94193: ARRAY
94194: PUSH
94195: LD_INT 1
94197: ARRAY
94198: PPUSH
94199: LD_EXP 145
94203: PUSH
94204: LD_VAR 0 1
94208: ARRAY
94209: PUSH
94210: LD_VAR 0 2
94214: ARRAY
94215: PUSH
94216: LD_INT 2
94218: ARRAY
94219: PPUSH
94220: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
94224: LD_ADDR_EXP 145
94228: PUSH
94229: LD_EXP 145
94233: PPUSH
94234: LD_VAR 0 1
94238: PPUSH
94239: LD_EXP 145
94243: PUSH
94244: LD_VAR 0 1
94248: ARRAY
94249: PPUSH
94250: LD_VAR 0 2
94254: PPUSH
94255: CALL_OW 3
94259: PPUSH
94260: CALL_OW 1
94264: ST_TO_ADDR
// continue ;
94265: GO 94138
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
94267: LD_ADDR_VAR 0 4
94271: PUSH
94272: LD_EXP 145
94276: PUSH
94277: LD_VAR 0 1
94281: ARRAY
94282: PUSH
94283: LD_VAR 0 2
94287: ARRAY
94288: PUSH
94289: LD_INT 1
94291: ARRAY
94292: PPUSH
94293: LD_EXP 145
94297: PUSH
94298: LD_VAR 0 1
94302: ARRAY
94303: PUSH
94304: LD_VAR 0 2
94308: ARRAY
94309: PUSH
94310: LD_INT 2
94312: ARRAY
94313: PPUSH
94314: CALL_OW 428
94318: ST_TO_ADDR
// if not tmp then
94319: LD_VAR 0 4
94323: NOT
94324: IFFALSE 94328
// continue ;
94326: GO 94138
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
94328: LD_VAR 0 4
94332: PUSH
94333: LD_INT 81
94335: PUSH
94336: LD_VAR 0 3
94340: PUSH
94341: EMPTY
94342: LIST
94343: LIST
94344: PPUSH
94345: CALL_OW 69
94349: IN
94350: IFFALSE 94400
94352: PUSH
94353: LD_EXP 145
94357: PUSH
94358: LD_VAR 0 1
94362: ARRAY
94363: PUSH
94364: LD_VAR 0 2
94368: ARRAY
94369: PUSH
94370: LD_INT 1
94372: ARRAY
94373: PPUSH
94374: LD_EXP 145
94378: PUSH
94379: LD_VAR 0 1
94383: ARRAY
94384: PUSH
94385: LD_VAR 0 2
94389: ARRAY
94390: PUSH
94391: LD_INT 2
94393: ARRAY
94394: PPUSH
94395: CALL_OW 458
94399: AND
94400: IFFALSE 94494
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
94402: LD_EXP 145
94406: PUSH
94407: LD_VAR 0 1
94411: ARRAY
94412: PUSH
94413: LD_VAR 0 2
94417: ARRAY
94418: PUSH
94419: LD_INT 1
94421: ARRAY
94422: PPUSH
94423: LD_EXP 145
94427: PUSH
94428: LD_VAR 0 1
94432: ARRAY
94433: PUSH
94434: LD_VAR 0 2
94438: ARRAY
94439: PUSH
94440: LD_INT 2
94442: ARRAY
94443: PPUSH
94444: LD_VAR 0 3
94448: PPUSH
94449: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
94453: LD_ADDR_EXP 145
94457: PUSH
94458: LD_EXP 145
94462: PPUSH
94463: LD_VAR 0 1
94467: PPUSH
94468: LD_EXP 145
94472: PUSH
94473: LD_VAR 0 1
94477: ARRAY
94478: PPUSH
94479: LD_VAR 0 2
94483: PPUSH
94484: CALL_OW 3
94488: PPUSH
94489: CALL_OW 1
94493: ST_TO_ADDR
// end ; end ;
94494: GO 94138
94496: POP
94497: POP
// end ;
94498: GO 94009
94500: POP
94501: POP
// end ;
94502: PPOPN 4
94504: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
94505: LD_INT 0
94507: PPUSH
94508: PPUSH
94509: PPUSH
94510: PPUSH
// result := false ;
94511: LD_ADDR_VAR 0 4
94515: PUSH
94516: LD_INT 0
94518: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
94519: LD_VAR 0 1
94523: PPUSH
94524: CALL_OW 264
94528: PUSH
94529: LD_INT 81
94531: EQUAL
94532: NOT
94533: IFFALSE 94537
// exit ;
94535: GO 94907
// side := GetSide ( unit ) ;
94537: LD_ADDR_VAR 0 6
94541: PUSH
94542: LD_VAR 0 1
94546: PPUSH
94547: CALL_OW 255
94551: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
94552: LD_ADDR_VAR 0 5
94556: PUSH
94557: LD_EXP 144
94561: PPUSH
94562: LD_VAR 0 1
94566: PPUSH
94567: CALL 35482 0 2
94571: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
94572: LD_EXP 145
94576: PUSH
94577: LD_VAR 0 5
94581: ARRAY
94582: PUSH
94583: LD_EXP 146
94587: GREATEREQUAL
94588: IFFALSE 94592
// exit ;
94590: GO 94907
// ComMoveXY ( unit , x , y ) ;
94592: LD_VAR 0 1
94596: PPUSH
94597: LD_VAR 0 2
94601: PPUSH
94602: LD_VAR 0 3
94606: PPUSH
94607: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
94611: LD_INT 35
94613: PPUSH
94614: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
94618: LD_VAR 0 1
94622: PPUSH
94623: LD_VAR 0 2
94627: PPUSH
94628: LD_VAR 0 3
94632: PPUSH
94633: CALL 67538 0 3
94637: NOT
94638: IFFALSE 94651
94640: PUSH
94641: LD_VAR 0 1
94645: PPUSH
94646: CALL_OW 314
94650: AND
94651: IFFALSE 94655
// exit ;
94653: GO 94907
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
94655: LD_VAR 0 2
94659: PPUSH
94660: LD_VAR 0 3
94664: PPUSH
94665: CALL_OW 428
94669: PUSH
94670: LD_VAR 0 1
94674: EQUAL
94675: IFFALSE 94689
94677: PUSH
94678: LD_VAR 0 1
94682: PPUSH
94683: CALL_OW 314
94687: NOT
94688: AND
94689: IFFALSE 94611
// if MineAtPos ( x , y ) then
94691: LD_VAR 0 2
94695: PPUSH
94696: LD_VAR 0 3
94700: PPUSH
94701: CALL_OW 458
94705: IFFALSE 94709
// exit ;
94707: GO 94907
// if your_side = side then
94709: LD_OWVAR 2
94713: PUSH
94714: LD_VAR 0 6
94718: EQUAL
94719: IFFALSE 94738
// PlaySoundXY ( x , y , PlantMine ) ;
94721: LD_VAR 0 2
94725: PPUSH
94726: LD_VAR 0 3
94730: PPUSH
94731: LD_STRING PlantMine
94733: PPUSH
94734: CALL_OW 366
// repeat wait ( 1 ) ;
94738: LD_INT 1
94740: PPUSH
94741: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
94745: LD_VAR 0 2
94749: PPUSH
94750: LD_VAR 0 3
94754: PPUSH
94755: LD_VAR 0 6
94759: PPUSH
94760: LD_INT 0
94762: PPUSH
94763: CALL_OW 454
94767: IFFALSE 94738
// if MineAtPos ( x , y ) then
94769: LD_VAR 0 2
94773: PPUSH
94774: LD_VAR 0 3
94778: PPUSH
94779: CALL_OW 458
94783: IFFALSE 94899
// begin for i in minerMinesList [ index ] do
94785: LD_ADDR_VAR 0 7
94789: PUSH
94790: LD_EXP 145
94794: PUSH
94795: LD_VAR 0 5
94799: ARRAY
94800: PUSH
94801: FOR_IN
94802: IFFALSE 94844
// if i [ 1 ] = x and i [ 2 ] = y then
94804: LD_VAR 0 7
94808: PUSH
94809: LD_INT 1
94811: ARRAY
94812: PUSH
94813: LD_VAR 0 2
94817: EQUAL
94818: IFFALSE 94836
94820: PUSH
94821: LD_VAR 0 7
94825: PUSH
94826: LD_INT 2
94828: ARRAY
94829: PUSH
94830: LD_VAR 0 3
94834: EQUAL
94835: AND
94836: IFFALSE 94842
// exit ;
94838: POP
94839: POP
94840: GO 94907
94842: GO 94801
94844: POP
94845: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
94846: LD_ADDR_EXP 145
94850: PUSH
94851: LD_EXP 145
94855: PPUSH
94856: LD_VAR 0 5
94860: PUSH
94861: LD_EXP 145
94865: PUSH
94866: LD_VAR 0 5
94870: ARRAY
94871: PUSH
94872: LD_INT 1
94874: PLUS
94875: PUSH
94876: EMPTY
94877: LIST
94878: LIST
94879: PPUSH
94880: LD_VAR 0 2
94884: PUSH
94885: LD_VAR 0 3
94889: PUSH
94890: EMPTY
94891: LIST
94892: LIST
94893: PPUSH
94894: CALL 35699 0 3
94898: ST_TO_ADDR
// end ; result := true ;
94899: LD_ADDR_VAR 0 4
94903: PUSH
94904: LD_INT 1
94906: ST_TO_ADDR
// end ;
94907: LD_VAR 0 4
94911: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
94912: LD_INT 0
94914: PPUSH
94915: PPUSH
94916: PPUSH
// if not unit in minersList then
94917: LD_VAR 0 1
94921: PUSH
94922: LD_EXP 144
94926: IN
94927: NOT
94928: IFFALSE 94932
// exit ;
94930: GO 95139
// index := GetElementIndex ( minersList , unit ) ;
94932: LD_ADDR_VAR 0 6
94936: PUSH
94937: LD_EXP 144
94941: PPUSH
94942: LD_VAR 0 1
94946: PPUSH
94947: CALL 35482 0 2
94951: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
94952: LD_ADDR_VAR 0 5
94956: PUSH
94957: DOUBLE
94958: LD_EXP 145
94962: PUSH
94963: LD_VAR 0 6
94967: ARRAY
94968: INC
94969: ST_TO_ADDR
94970: LD_INT 1
94972: PUSH
94973: FOR_DOWNTO
94974: IFFALSE 95137
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
94976: LD_EXP 145
94980: PUSH
94981: LD_VAR 0 6
94985: ARRAY
94986: PUSH
94987: LD_VAR 0 5
94991: ARRAY
94992: PUSH
94993: LD_INT 1
94995: ARRAY
94996: PPUSH
94997: LD_EXP 145
95001: PUSH
95002: LD_VAR 0 6
95006: ARRAY
95007: PUSH
95008: LD_VAR 0 5
95012: ARRAY
95013: PUSH
95014: LD_INT 2
95016: ARRAY
95017: PPUSH
95018: LD_VAR 0 2
95022: PPUSH
95023: LD_VAR 0 3
95027: PPUSH
95028: CALL_OW 298
95032: PUSH
95033: LD_INT 6
95035: LESS
95036: IFFALSE 95135
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
95038: LD_EXP 145
95042: PUSH
95043: LD_VAR 0 6
95047: ARRAY
95048: PUSH
95049: LD_VAR 0 5
95053: ARRAY
95054: PUSH
95055: LD_INT 1
95057: ARRAY
95058: PPUSH
95059: LD_EXP 145
95063: PUSH
95064: LD_VAR 0 6
95068: ARRAY
95069: PUSH
95070: LD_VAR 0 5
95074: ARRAY
95075: PUSH
95076: LD_INT 2
95078: ARRAY
95079: PPUSH
95080: LD_VAR 0 1
95084: PPUSH
95085: CALL_OW 255
95089: PPUSH
95090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
95094: LD_ADDR_EXP 145
95098: PUSH
95099: LD_EXP 145
95103: PPUSH
95104: LD_VAR 0 6
95108: PPUSH
95109: LD_EXP 145
95113: PUSH
95114: LD_VAR 0 6
95118: ARRAY
95119: PPUSH
95120: LD_VAR 0 5
95124: PPUSH
95125: CALL_OW 3
95129: PPUSH
95130: CALL_OW 1
95134: ST_TO_ADDR
// end ; end ;
95135: GO 94973
95137: POP
95138: POP
// end ;
95139: LD_VAR 0 4
95143: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
95144: LD_INT 0
95146: PPUSH
95147: PPUSH
95148: PPUSH
95149: PPUSH
95150: PPUSH
95151: PPUSH
95152: PPUSH
95153: PPUSH
95154: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
95155: LD_VAR 0 1
95159: PPUSH
95160: CALL_OW 264
95164: PUSH
95165: LD_INT 81
95167: EQUAL
95168: NOT
95169: IFTRUE 95184
95171: PUSH
95172: LD_VAR 0 1
95176: PUSH
95177: LD_EXP 144
95181: IN
95182: NOT
95183: OR
95184: IFFALSE 95188
// exit ;
95186: GO 95514
// index := GetElementIndex ( minersList , unit ) ;
95188: LD_ADDR_VAR 0 6
95192: PUSH
95193: LD_EXP 144
95197: PPUSH
95198: LD_VAR 0 1
95202: PPUSH
95203: CALL 35482 0 2
95207: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
95208: LD_ADDR_VAR 0 8
95212: PUSH
95213: LD_EXP 146
95217: PUSH
95218: LD_EXP 145
95222: PUSH
95223: LD_VAR 0 6
95227: ARRAY
95228: MINUS
95229: ST_TO_ADDR
// if not minesFreeAmount then
95230: LD_VAR 0 8
95234: NOT
95235: IFFALSE 95239
// exit ;
95237: GO 95514
// tmp := [ ] ;
95239: LD_ADDR_VAR 0 7
95243: PUSH
95244: EMPTY
95245: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
95246: LD_ADDR_VAR 0 5
95250: PUSH
95251: DOUBLE
95252: LD_INT 1
95254: DEC
95255: ST_TO_ADDR
95256: LD_VAR 0 8
95260: PUSH
95261: FOR_TO
95262: IFFALSE 95461
// begin _d := rand ( 0 , 5 ) ;
95264: LD_ADDR_VAR 0 11
95268: PUSH
95269: LD_INT 0
95271: PPUSH
95272: LD_INT 5
95274: PPUSH
95275: CALL_OW 12
95279: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
95280: LD_ADDR_VAR 0 12
95284: PUSH
95285: LD_INT 2
95287: PPUSH
95288: LD_INT 6
95290: PPUSH
95291: CALL_OW 12
95295: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
95296: LD_ADDR_VAR 0 9
95300: PUSH
95301: LD_VAR 0 2
95305: PPUSH
95306: LD_VAR 0 11
95310: PPUSH
95311: LD_VAR 0 12
95315: PPUSH
95316: CALL_OW 272
95320: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
95321: LD_ADDR_VAR 0 10
95325: PUSH
95326: LD_VAR 0 3
95330: PPUSH
95331: LD_VAR 0 11
95335: PPUSH
95336: LD_VAR 0 12
95340: PPUSH
95341: CALL_OW 273
95345: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
95346: LD_VAR 0 9
95350: PPUSH
95351: LD_VAR 0 10
95355: PPUSH
95356: CALL_OW 488
95360: IFFALSE 95384
95362: PUSH
95363: LD_VAR 0 9
95367: PUSH
95368: LD_VAR 0 10
95372: PUSH
95373: EMPTY
95374: LIST
95375: LIST
95376: PUSH
95377: LD_VAR 0 7
95381: IN
95382: NOT
95383: AND
95384: IFFALSE 95403
95386: PUSH
95387: LD_VAR 0 9
95391: PPUSH
95392: LD_VAR 0 10
95396: PPUSH
95397: CALL_OW 458
95401: NOT
95402: AND
95403: IFFALSE 95445
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
95405: LD_ADDR_VAR 0 7
95409: PUSH
95410: LD_VAR 0 7
95414: PPUSH
95415: LD_VAR 0 7
95419: PUSH
95420: LD_INT 1
95422: PLUS
95423: PPUSH
95424: LD_VAR 0 9
95428: PUSH
95429: LD_VAR 0 10
95433: PUSH
95434: EMPTY
95435: LIST
95436: LIST
95437: PPUSH
95438: CALL_OW 1
95442: ST_TO_ADDR
95443: GO 95459
// i := i - 1 ;
95445: LD_ADDR_VAR 0 5
95449: PUSH
95450: LD_VAR 0 5
95454: PUSH
95455: LD_INT 1
95457: MINUS
95458: ST_TO_ADDR
// end ;
95459: GO 95261
95461: POP
95462: POP
// for i in tmp do
95463: LD_ADDR_VAR 0 5
95467: PUSH
95468: LD_VAR 0 7
95472: PUSH
95473: FOR_IN
95474: IFFALSE 95512
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
95476: LD_VAR 0 1
95480: PPUSH
95481: LD_VAR 0 5
95485: PUSH
95486: LD_INT 1
95488: ARRAY
95489: PPUSH
95490: LD_VAR 0 5
95494: PUSH
95495: LD_INT 2
95497: ARRAY
95498: PPUSH
95499: CALL 94505 0 3
95503: NOT
95504: IFFALSE 95510
// exit ;
95506: POP
95507: POP
95508: GO 95514
95510: GO 95473
95512: POP
95513: POP
// end ;
95514: LD_VAR 0 4
95518: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
95519: LD_INT 0
95521: PPUSH
95522: PPUSH
95523: PPUSH
95524: PPUSH
95525: PPUSH
95526: PPUSH
95527: PPUSH
95528: PPUSH
95529: PPUSH
// if GetClass ( unit ) <> class_sniper then
95530: LD_VAR 0 1
95534: PPUSH
95535: CALL_OW 257
95539: PUSH
95540: LD_INT 5
95542: NONEQUAL
95543: IFFALSE 95547
// exit ;
95545: GO 96017
// dist := 8 ;
95547: LD_ADDR_VAR 0 5
95551: PUSH
95552: LD_INT 8
95554: ST_TO_ADDR
// viewRange := 12 ;
95555: LD_ADDR_VAR 0 8
95559: PUSH
95560: LD_INT 12
95562: ST_TO_ADDR
// side := GetSide ( unit ) ;
95563: LD_ADDR_VAR 0 6
95567: PUSH
95568: LD_VAR 0 1
95572: PPUSH
95573: CALL_OW 255
95577: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
95578: LD_INT 61
95580: PPUSH
95581: LD_VAR 0 6
95585: PPUSH
95586: CALL_OW 321
95590: PUSH
95591: LD_INT 2
95593: EQUAL
95594: IFFALSE 95604
// viewRange := 16 ;
95596: LD_ADDR_VAR 0 8
95600: PUSH
95601: LD_INT 16
95603: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
95604: LD_VAR 0 1
95608: PPUSH
95609: LD_VAR 0 2
95613: PPUSH
95614: LD_VAR 0 3
95618: PPUSH
95619: CALL_OW 297
95623: PUSH
95624: LD_VAR 0 5
95628: GREATER
95629: IFFALSE 95708
// begin ComMoveXY ( unit , x , y ) ;
95631: LD_VAR 0 1
95635: PPUSH
95636: LD_VAR 0 2
95640: PPUSH
95641: LD_VAR 0 3
95645: PPUSH
95646: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
95650: LD_INT 35
95652: PPUSH
95653: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
95657: LD_VAR 0 1
95661: PPUSH
95662: LD_VAR 0 2
95666: PPUSH
95667: LD_VAR 0 3
95671: PPUSH
95672: CALL 67538 0 3
95676: NOT
95677: IFFALSE 95681
// exit ;
95679: GO 96017
// until GetDistUnitXY ( unit , x , y ) < dist ;
95681: LD_VAR 0 1
95685: PPUSH
95686: LD_VAR 0 2
95690: PPUSH
95691: LD_VAR 0 3
95695: PPUSH
95696: CALL_OW 297
95700: PUSH
95701: LD_VAR 0 5
95705: LESS
95706: IFFALSE 95650
// end ; ComTurnXY ( unit , x , y ) ;
95708: LD_VAR 0 1
95712: PPUSH
95713: LD_VAR 0 2
95717: PPUSH
95718: LD_VAR 0 3
95722: PPUSH
95723: CALL_OW 118
// repeat if Multiplayer then
95727: LD_OWVAR 4
95731: IFFALSE 95742
// wait ( 35 ) else
95733: LD_INT 35
95735: PPUSH
95736: CALL_OW 67
95740: GO 95749
// wait ( 5 ) ;
95742: LD_INT 5
95744: PPUSH
95745: CALL_OW 67
// _d := GetDir ( unit ) ;
95749: LD_ADDR_VAR 0 11
95753: PUSH
95754: LD_VAR 0 1
95758: PPUSH
95759: CALL_OW 254
95763: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
95764: LD_ADDR_VAR 0 7
95768: PUSH
95769: LD_VAR 0 1
95773: PPUSH
95774: CALL_OW 250
95778: PPUSH
95779: LD_VAR 0 1
95783: PPUSH
95784: CALL_OW 251
95788: PPUSH
95789: LD_VAR 0 2
95793: PPUSH
95794: LD_VAR 0 3
95798: PPUSH
95799: CALL 70174 0 4
95803: ST_TO_ADDR
// until dir = _d ;
95804: LD_VAR 0 7
95808: PUSH
95809: LD_VAR 0 11
95813: EQUAL
95814: IFFALSE 95727
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
95816: LD_ADDR_VAR 0 9
95820: PUSH
95821: LD_VAR 0 1
95825: PPUSH
95826: CALL_OW 250
95830: PPUSH
95831: LD_VAR 0 7
95835: PPUSH
95836: LD_VAR 0 5
95840: PPUSH
95841: CALL_OW 272
95845: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
95846: LD_ADDR_VAR 0 10
95850: PUSH
95851: LD_VAR 0 1
95855: PPUSH
95856: CALL_OW 251
95860: PPUSH
95861: LD_VAR 0 7
95865: PPUSH
95866: LD_VAR 0 5
95870: PPUSH
95871: CALL_OW 273
95875: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
95876: LD_VAR 0 9
95880: PPUSH
95881: LD_VAR 0 10
95885: PPUSH
95886: CALL_OW 488
95890: NOT
95891: IFFALSE 95895
// exit ;
95893: GO 96017
// ComAnimCustom ( unit , 1 ) ;
95895: LD_VAR 0 1
95899: PPUSH
95900: LD_INT 1
95902: PPUSH
95903: CALL_OW 592
// p := 0 ;
95907: LD_ADDR_VAR 0 12
95911: PUSH
95912: LD_INT 0
95914: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
95915: LD_VAR 0 9
95919: PPUSH
95920: LD_VAR 0 10
95924: PPUSH
95925: LD_VAR 0 6
95929: PPUSH
95930: LD_VAR 0 8
95934: PPUSH
95935: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
95939: LD_INT 35
95941: PPUSH
95942: CALL_OW 67
// p := Inc ( p ) ;
95946: LD_ADDR_VAR 0 12
95950: PUSH
95951: LD_VAR 0 12
95955: PPUSH
95956: CALL 70130 0 1
95960: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
95961: LD_VAR 0 12
95965: PUSH
95966: LD_INT 3
95968: EQUAL
95969: IFTRUE 95983
95971: PUSH
95972: LD_VAR 0 1
95976: PPUSH
95977: CALL_OW 302
95981: NOT
95982: OR
95983: IFTRUE 95996
95985: PUSH
95986: LD_VAR 0 1
95990: PPUSH
95991: CALL_OW 301
95995: OR
95996: IFFALSE 95939
// RemoveSeeing ( _x , _y , side ) ;
95998: LD_VAR 0 9
96002: PPUSH
96003: LD_VAR 0 10
96007: PPUSH
96008: LD_VAR 0 6
96012: PPUSH
96013: CALL_OW 331
// end ;
96017: LD_VAR 0 4
96021: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
96022: LD_INT 0
96024: PPUSH
96025: PPUSH
96026: PPUSH
96027: PPUSH
96028: PPUSH
96029: PPUSH
96030: PPUSH
96031: PPUSH
96032: PPUSH
96033: PPUSH
96034: PPUSH
// if not unit then
96035: LD_VAR 0 1
96039: NOT
96040: IFFALSE 96044
// exit ;
96042: GO 96315
// side := GetSide ( unit ) ;
96044: LD_ADDR_VAR 0 3
96048: PUSH
96049: LD_VAR 0 1
96053: PPUSH
96054: CALL_OW 255
96058: ST_TO_ADDR
// x := GetX ( unit ) ;
96059: LD_ADDR_VAR 0 5
96063: PUSH
96064: LD_VAR 0 1
96068: PPUSH
96069: CALL_OW 250
96073: ST_TO_ADDR
// y := GetY ( unit ) ;
96074: LD_ADDR_VAR 0 6
96078: PUSH
96079: LD_VAR 0 1
96083: PPUSH
96084: CALL_OW 251
96088: ST_TO_ADDR
// r := 8 ;
96089: LD_ADDR_VAR 0 4
96093: PUSH
96094: LD_INT 8
96096: ST_TO_ADDR
// if x - r < 0 then
96097: LD_VAR 0 5
96101: PUSH
96102: LD_VAR 0 4
96106: MINUS
96107: PUSH
96108: LD_INT 0
96110: LESS
96111: IFFALSE 96123
// min_x := 0 else
96113: LD_ADDR_VAR 0 7
96117: PUSH
96118: LD_INT 0
96120: ST_TO_ADDR
96121: GO 96139
// min_x := x - r ;
96123: LD_ADDR_VAR 0 7
96127: PUSH
96128: LD_VAR 0 5
96132: PUSH
96133: LD_VAR 0 4
96137: MINUS
96138: ST_TO_ADDR
// if y - r < 0 then
96139: LD_VAR 0 6
96143: PUSH
96144: LD_VAR 0 4
96148: MINUS
96149: PUSH
96150: LD_INT 0
96152: LESS
96153: IFFALSE 96165
// min_y := 0 else
96155: LD_ADDR_VAR 0 8
96159: PUSH
96160: LD_INT 0
96162: ST_TO_ADDR
96163: GO 96181
// min_y := y - r ;
96165: LD_ADDR_VAR 0 8
96169: PUSH
96170: LD_VAR 0 6
96174: PUSH
96175: LD_VAR 0 4
96179: MINUS
96180: ST_TO_ADDR
// max_x := x + r ;
96181: LD_ADDR_VAR 0 9
96185: PUSH
96186: LD_VAR 0 5
96190: PUSH
96191: LD_VAR 0 4
96195: PLUS
96196: ST_TO_ADDR
// max_y := y + r ;
96197: LD_ADDR_VAR 0 10
96201: PUSH
96202: LD_VAR 0 6
96206: PUSH
96207: LD_VAR 0 4
96211: PLUS
96212: ST_TO_ADDR
// for _x = min_x to max_x do
96213: LD_ADDR_VAR 0 11
96217: PUSH
96218: DOUBLE
96219: LD_VAR 0 7
96223: DEC
96224: ST_TO_ADDR
96225: LD_VAR 0 9
96229: PUSH
96230: FOR_TO
96231: IFFALSE 96313
// for _y = min_y to max_y do
96233: LD_ADDR_VAR 0 12
96237: PUSH
96238: DOUBLE
96239: LD_VAR 0 8
96243: DEC
96244: ST_TO_ADDR
96245: LD_VAR 0 10
96249: PUSH
96250: FOR_TO
96251: IFFALSE 96309
// begin if not ValidHex ( _x , _y ) then
96253: LD_VAR 0 11
96257: PPUSH
96258: LD_VAR 0 12
96262: PPUSH
96263: CALL_OW 488
96267: NOT
96268: IFFALSE 96272
// continue ;
96270: GO 96250
// if MineAtPos ( _x , _y ) then
96272: LD_VAR 0 11
96276: PPUSH
96277: LD_VAR 0 12
96281: PPUSH
96282: CALL_OW 458
96286: IFFALSE 96307
// ViewMineAtPos ( _x , _y , side ) ;
96288: LD_VAR 0 11
96292: PPUSH
96293: LD_VAR 0 12
96297: PPUSH
96298: LD_VAR 0 3
96302: PPUSH
96303: CALL_OW 457
// end ;
96307: GO 96250
96309: POP
96310: POP
96311: GO 96230
96313: POP
96314: POP
// end ;
96315: LD_VAR 0 2
96319: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
96320: LD_INT 0
96322: PPUSH
96323: PPUSH
96324: PPUSH
96325: PPUSH
96326: PPUSH
96327: PPUSH
96328: PPUSH
// if not units then
96329: LD_VAR 0 1
96333: NOT
96334: IFFALSE 96338
// exit ;
96336: GO 96802
// scaners := [ ] ;
96338: LD_ADDR_VAR 0 6
96342: PUSH
96343: EMPTY
96344: ST_TO_ADDR
// for i in units do
96345: LD_ADDR_VAR 0 3
96349: PUSH
96350: LD_VAR 0 1
96354: PUSH
96355: FOR_IN
96356: IFFALSE 96513
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
96358: LD_VAR 0 3
96362: PPUSH
96363: CALL_OW 264
96367: PUSH
96368: LD_INT 11
96370: NONEQUAL
96371: IFTRUE 96385
96373: PUSH
96374: LD_VAR 0 3
96378: PPUSH
96379: CALL_OW 302
96383: NOT
96384: OR
96385: IFTRUE 96402
96387: PUSH
96388: LD_VAR 0 3
96392: PPUSH
96393: CALL_OW 110
96397: PUSH
96398: LD_INT 502
96400: EQUAL
96401: OR
96402: IFFALSE 96406
// continue ;
96404: GO 96355
// ComStop ( i ) ;
96406: LD_VAR 0 3
96410: PPUSH
96411: CALL_OW 141
// x := GetX ( i ) ;
96415: LD_ADDR_VAR 0 4
96419: PUSH
96420: LD_VAR 0 3
96424: PPUSH
96425: CALL_OW 250
96429: ST_TO_ADDR
// y := GetY ( i ) ;
96430: LD_ADDR_VAR 0 5
96434: PUSH
96435: LD_VAR 0 3
96439: PPUSH
96440: CALL_OW 251
96444: ST_TO_ADDR
// if GetSide ( i ) = your_side then
96445: LD_VAR 0 3
96449: PPUSH
96450: CALL_OW 255
96454: PUSH
96455: LD_OWVAR 2
96459: EQUAL
96460: IFFALSE 96479
// PlaySoundXY ( x , y , mineDetector ) ;
96462: LD_VAR 0 4
96466: PPUSH
96467: LD_VAR 0 5
96471: PPUSH
96472: LD_STRING mineDetector
96474: PPUSH
96475: CALL_OW 366
// scaners := Join ( scaners , i ) ;
96479: LD_ADDR_VAR 0 6
96483: PUSH
96484: LD_VAR 0 6
96488: PPUSH
96489: LD_VAR 0 3
96493: PPUSH
96494: CALL 68757 0 2
96498: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
96499: LD_VAR 0 3
96503: PPUSH
96504: LD_INT 502
96506: PPUSH
96507: CALL_OW 109
// end ;
96511: GO 96355
96513: POP
96514: POP
// if not scaners then
96515: LD_VAR 0 6
96519: NOT
96520: IFFALSE 96524
// exit ;
96522: GO 96802
// wait ( 3 ) ;
96524: LD_INT 3
96526: PPUSH
96527: CALL_OW 67
// timer := 6 ;
96531: LD_ADDR_VAR 0 7
96535: PUSH
96536: LD_INT 6
96538: ST_TO_ADDR
// repeat for i in scaners do
96539: LD_ADDR_VAR 0 3
96543: PUSH
96544: LD_VAR 0 6
96548: PUSH
96549: FOR_IN
96550: IFFALSE 96700
// begin side := GetSide ( i ) ;
96552: LD_ADDR_VAR 0 8
96556: PUSH
96557: LD_VAR 0 3
96561: PPUSH
96562: CALL_OW 255
96566: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
96567: LD_VAR 0 3
96571: PPUSH
96572: CALL_OW 302
96576: NOT
96577: IFTRUE 96590
96579: PUSH
96580: LD_VAR 0 3
96584: PPUSH
96585: CALL_OW 314
96589: OR
96590: IFTRUE 96621
96592: PUSH
96593: LD_VAR 0 3
96597: PPUSH
96598: CALL_OW 263
96602: PUSH
96603: LD_INT 1
96605: EQUAL
96606: IFFALSE 96620
96608: PUSH
96609: LD_VAR 0 3
96613: PPUSH
96614: CALL_OW 311
96618: NOT
96619: AND
96620: OR
96621: IFFALSE 96665
// begin SetUnitDisplayNumber ( i , 0 ) ;
96623: LD_VAR 0 3
96627: PPUSH
96628: LD_INT 0
96630: PPUSH
96631: CALL_OW 505
// SetTag ( i , 0 ) ;
96635: LD_VAR 0 3
96639: PPUSH
96640: LD_INT 0
96642: PPUSH
96643: CALL_OW 109
// scaners := scaners diff i ;
96647: LD_ADDR_VAR 0 6
96651: PUSH
96652: LD_VAR 0 6
96656: PUSH
96657: LD_VAR 0 3
96661: DIFF
96662: ST_TO_ADDR
// continue ;
96663: GO 96549
// end ; if side in [ your_side , 9 ] then
96665: LD_VAR 0 8
96669: PUSH
96670: LD_OWVAR 2
96674: PUSH
96675: LD_INT 9
96677: PUSH
96678: EMPTY
96679: LIST
96680: LIST
96681: IN
96682: IFFALSE 96698
// SetUnitDisplayNumber ( i , timer ) ;
96684: LD_VAR 0 3
96688: PPUSH
96689: LD_VAR 0 7
96693: PPUSH
96694: CALL_OW 505
// end ;
96698: GO 96549
96700: POP
96701: POP
// if not scaners then
96702: LD_VAR 0 6
96706: NOT
96707: IFFALSE 96711
// exit ;
96709: GO 96802
// timer := Dec ( timer ) ;
96711: LD_ADDR_VAR 0 7
96715: PUSH
96716: LD_VAR 0 7
96720: PPUSH
96721: CALL 70152 0 1
96725: ST_TO_ADDR
// wait ( 0 0$1 ) ;
96726: LD_INT 35
96728: PPUSH
96729: CALL_OW 67
// until timer = 0 ;
96733: LD_VAR 0 7
96737: PUSH
96738: LD_INT 0
96740: EQUAL
96741: IFFALSE 96539
// if not scaners then
96743: LD_VAR 0 6
96747: NOT
96748: IFFALSE 96752
// exit ;
96750: GO 96802
// for i in scaners do
96752: LD_ADDR_VAR 0 3
96756: PUSH
96757: LD_VAR 0 6
96761: PUSH
96762: FOR_IN
96763: IFFALSE 96800
// begin SetUnitDisplayNumber ( i , 0 ) ;
96765: LD_VAR 0 3
96769: PPUSH
96770: LD_INT 0
96772: PPUSH
96773: CALL_OW 505
// SetTag ( i , 0 ) ;
96777: LD_VAR 0 3
96781: PPUSH
96782: LD_INT 0
96784: PPUSH
96785: CALL_OW 109
// RevealDetectorMine ( i ) ;
96789: LD_VAR 0 3
96793: PPUSH
96794: CALL 96022 0 1
// end ;
96798: GO 96762
96800: POP
96801: POP
// end ;
96802: LD_VAR 0 2
96806: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
96807: LD_INT 0
96809: PPUSH
// if p1 = mine_detector_mode then
96810: LD_VAR 0 2
96814: PUSH
96815: LD_INT 103
96817: EQUAL
96818: IFFALSE 96829
// DetectMine ( units ) ;
96820: LD_VAR 0 1
96824: PPUSH
96825: CALL 96320 0 1
// end ; end_of_file
96829: LD_VAR 0 7
96833: RET
// export function StopOriginalMusic ; begin
96834: LD_INT 0
96836: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
96837: LD_STRING OW_FORCEMUSICDISABLE(true);
96839: PPUSH
96840: CALL_OW 559
// end ;
96844: LD_VAR 0 1
96848: RET
// export function PlayOriginalMusic ; begin
96849: LD_INT 0
96851: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
96852: LD_STRING OW_FORCEMUSICDISABLE(false);
96854: PPUSH
96855: CALL_OW 559
// end ;
96859: LD_VAR 0 1
96863: RET
// export function PlayCustomMusic ( track , callback ) ; begin
96864: LD_INT 0
96866: PPUSH
// StopOriginalMusic ;
96867: CALL 96834 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
96871: LD_STRING playMusic("
96873: PUSH
96874: LD_VAR 0 1
96878: STR
96879: PUSH
96880: LD_STRING ", "
96882: STR
96883: PUSH
96884: LD_VAR 0 2
96888: STR
96889: PUSH
96890: LD_STRING ")
96892: STR
96893: PPUSH
96894: CALL_OW 559
// end ;
96898: LD_VAR 0 3
96902: RET
