// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareArabian ;
   8: CALL 41 0 0
// Action ;
  12: CALL 982 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 07_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 07_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareArabian ; var i , tmp , un , veh ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 4 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// uc_nation := 1 ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
  64: LD_ADDR_EXP 15
  68: PUSH
  69: LD_STRING 07_Americans
  71: PPUSH
  72: CALL_OW 31
  76: ST_TO_ADDR
// if americanSquad < 5 then
  77: LD_EXP 15
  81: PUSH
  82: LD_INT 5
  84: LESS
  85: IFFALSE 142
// begin for i := americanSquad to 5 do
  87: LD_ADDR_VAR 0 2
  91: PUSH
  92: DOUBLE
  93: LD_EXP 15
  97: DEC
  98: ST_TO_ADDR
  99: LD_INT 5
 101: PUSH
 102: FOR_TO
 103: IFFALSE 140
// begin PrepareHuman ( false , 2 , 6 ) ;
 105: LD_INT 0
 107: PPUSH
 108: LD_INT 2
 110: PPUSH
 111: LD_INT 6
 113: PPUSH
 114: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 118: LD_ADDR_EXP 15
 122: PUSH
 123: LD_EXP 15
 127: PPUSH
 128: CALL_OW 44
 132: PPUSH
 133: CALL 38454 0 2
 137: ST_TO_ADDR
// end ;
 138: GO 102
 140: POP
 141: POP
// end ; for i in americanSquad do
 142: LD_ADDR_VAR 0 2
 146: PUSH
 147: LD_EXP 15
 151: PUSH
 152: FOR_IN
 153: IFFALSE 220
// begin SetClass ( i , 2 ) ;
 155: LD_VAR 0 2
 159: PPUSH
 160: LD_INT 2
 162: PPUSH
 163: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
 167: LD_VAR 0 2
 171: PPUSH
 172: LD_INT 78
 174: PPUSH
 175: LD_INT 16
 177: PPUSH
 178: LD_INT 5
 180: PPUSH
 181: LD_INT 0
 183: PPUSH
 184: CALL_OW 50
// ComHold ( i ) ;
 188: LD_VAR 0 2
 192: PPUSH
 193: CALL_OW 140
// if Prob ( 60 ) then
 197: LD_INT 60
 199: PPUSH
 200: CALL_OW 13
 204: IFFALSE 218
// ForceSleep ( i , true ) ;
 206: LD_VAR 0 2
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 585
// end ;
 218: GO 152
 220: POP
 221: POP
// uc_side := 2 ;
 222: LD_ADDR_OWVAR 20
 226: PUSH
 227: LD_INT 2
 229: ST_TO_ADDR
// uc_nation := 2 ;
 230: LD_ADDR_OWVAR 21
 234: PUSH
 235: LD_INT 2
 237: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 238: LD_ADDR_EXP 3
 242: PUSH
 243: LD_STRING Heike
 245: PPUSH
 246: LD_EXP 1
 250: NOT
 251: PPUSH
 252: LD_EXP 2
 256: PPUSH
 257: CALL 1053 0 3
 261: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 262: LD_ADDR_EXP 6
 266: PUSH
 267: LD_STRING Ibrahim
 269: PPUSH
 270: LD_EXP 1
 274: NOT
 275: PPUSH
 276: LD_EXP 2
 280: PPUSH
 281: CALL 1053 0 3
 285: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 286: LD_ADDR_EXP 4
 290: PUSH
 291: LD_STRING Givi
 293: PPUSH
 294: LD_EXP 1
 298: NOT
 299: PPUSH
 300: LD_EXP 2
 304: PPUSH
 305: CALL 1053 0 3
 309: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 310: LD_ADDR_EXP 7
 314: PUSH
 315: LD_STRING Kamil
 317: PPUSH
 318: LD_EXP 1
 322: NOT
 323: PPUSH
 324: LD_EXP 2
 328: PPUSH
 329: CALL 1053 0 3
 333: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 334: LD_ADDR_EXP 8
 338: PUSH
 339: LD_STRING Kaia
 341: PPUSH
 342: LD_EXP 1
 346: NOT
 347: PPUSH
 348: LD_EXP 2
 352: PPUSH
 353: CALL 1053 0 3
 357: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 358: LD_ADDR_EXP 9
 362: PUSH
 363: LD_STRING Sophia
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: LD_EXP 2
 376: PPUSH
 377: CALL 1053 0 3
 381: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 382: LD_ADDR_EXP 10
 386: PUSH
 387: LD_STRING Markov
 389: PPUSH
 390: LD_EXP 1
 394: NOT
 395: PPUSH
 396: LD_EXP 2
 400: PPUSH
 401: CALL 1053 0 3
 405: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 406: LD_ADDR_EXP 13
 410: PUSH
 411: LD_STRING Aviradze
 413: PPUSH
 414: LD_EXP 1
 418: NOT
 419: PPUSH
 420: LD_EXP 2
 424: PPUSH
 425: CALL 1053 0 3
 429: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 430: LD_ADDR_EXP 12
 434: PUSH
 435: LD_STRING Kurt
 437: PPUSH
 438: LD_EXP 1
 442: NOT
 443: PPUSH
 444: LD_EXP 2
 448: PPUSH
 449: CALL 1053 0 3
 453: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 454: LD_ADDR_EXP 5
 458: PUSH
 459: LD_STRING Mike
 461: PPUSH
 462: LD_EXP 1
 466: NOT
 467: PPUSH
 468: LD_EXP 2
 472: PPUSH
 473: CALL 1053 0 3
 477: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 478: LD_ADDR_EXP 11
 482: PUSH
 483: LD_STRING Olaf
 485: PPUSH
 486: LD_INT 0
 488: PPUSH
 489: LD_STRING 
 491: PPUSH
 492: CALL 1053 0 3
 496: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 497: LD_ADDR_EXP 14
 501: PUSH
 502: LD_STRING 07_others
 504: PPUSH
 505: CALL_OW 31
 509: ST_TO_ADDR
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_EXP 5
 519: PUSH
 520: LD_EXP 6
 524: PUSH
 525: LD_EXP 7
 529: PUSH
 530: LD_EXP 8
 534: PUSH
 535: LD_EXP 9
 539: PUSH
 540: LD_EXP 10
 544: PUSH
 545: LD_EXP 11
 549: PUSH
 550: LD_EXP 12
 554: PUSH
 555: LD_EXP 13
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 14
 575: UNION
 576: ST_TO_ADDR
// end ; end_of_file
 577: LD_VAR 0 1
 581: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
 582: LD_INT 0
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side := 3 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 3
 606: PPUSH
 607: CALL_OW 12
 611: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: LD_INT 5
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL_OW 517
 627: ST_TO_ADDR
// for i := 1 to 3 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 3
 640: PUSH
 641: FOR_TO
 642: IFFALSE 711
// begin PrepareHuman ( false , 2 , 0 ) ;
 644: LD_INT 0
 646: PPUSH
 647: LD_INT 2
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 380
// un := CreateHuman ;
 657: LD_ADDR_VAR 0 3
 661: PUSH
 662: CALL_OW 44
 666: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
 667: LD_VAR 0 3
 671: PPUSH
 672: LD_VAR 0 4
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PUSH
 681: LD_VAR 0 2
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_INT 2
 694: ARRAY
 695: PUSH
 696: LD_VAR 0 2
 700: ARRAY
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: CALL_OW 601
// end ;
 709: GO 641
 711: POP
 712: POP
// end ;
 713: LD_VAR 0 1
 717: RET
// export function PrepareFirstScene ; var i , un ; begin
 718: LD_INT 0
 720: PPUSH
 721: PPUSH
 722: PPUSH
// uc_side := 4 ;
 723: LD_ADDR_OWVAR 20
 727: PUSH
 728: LD_INT 4
 730: ST_TO_ADDR
// uc_nation := 1 ;
 731: LD_ADDR_OWVAR 21
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
// PrepareEngineer ( false , 2 ) ;
 739: LD_INT 0
 741: PPUSH
 742: LD_INT 2
 744: PPUSH
 745: CALL_OW 382
// for i := 1 to 2 do
 749: LD_ADDR_VAR 0 2
 753: PUSH
 754: DOUBLE
 755: LD_INT 1
 757: DEC
 758: ST_TO_ADDR
 759: LD_INT 2
 761: PUSH
 762: FOR_TO
 763: IFFALSE 828
// begin un := CreateHuman ;
 765: LD_ADDR_VAR 0 3
 769: PUSH
 770: CALL_OW 44
 774: ST_TO_ADDR
// SetDir ( un , 1 ) ;
 775: LD_VAR 0 3
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
 787: LD_VAR 0 3
 791: PPUSH
 792: LD_INT 6
 794: PPUSH
 795: LD_INT 0
 797: PPUSH
 798: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
 802: LD_VAR 0 3
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: CALL 41610 0 2
// SetLives ( un , 251 ) ;
 814: LD_VAR 0 3
 818: PPUSH
 819: LD_INT 251
 821: PPUSH
 822: CALL_OW 234
// end ;
 826: GO 762
 828: POP
 829: POP
// uc_side := 3 ;
 830: LD_ADDR_OWVAR 20
 834: PUSH
 835: LD_INT 3
 837: ST_TO_ADDR
// uc_nation := 3 ;
 838: LD_ADDR_OWVAR 21
 842: PUSH
 843: LD_INT 3
 845: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
 846: LD_INT 1
 848: PPUSH
 849: LD_INT 5
 851: PPUSH
 852: CALL_OW 381
// for i := 1 to 3 do
 856: LD_ADDR_VAR 0 2
 860: PUSH
 861: DOUBLE
 862: LD_INT 1
 864: DEC
 865: ST_TO_ADDR
 866: LD_INT 3
 868: PUSH
 869: FOR_TO
 870: IFFALSE 923
// begin un := CreateHuman ;
 872: LD_ADDR_VAR 0 3
 876: PUSH
 877: CALL_OW 44
 881: ST_TO_ADDR
// SetDir ( un , 4 ) ;
 882: LD_VAR 0 3
 886: PPUSH
 887: LD_INT 4
 889: PPUSH
 890: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
 894: LD_VAR 0 3
 898: PPUSH
 899: LD_INT 7
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
 909: LD_VAR 0 3
 913: PPUSH
 914: LD_INT 4
 916: PPUSH
 917: CALL 41610 0 2
// end ;
 921: GO 869
 923: POP
 924: POP
// un := CreateHuman ;
 925: LD_ADDR_VAR 0 3
 929: PUSH
 930: CALL_OW 44
 934: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
 935: LD_VAR 0 3
 939: PPUSH
 940: LD_INT 124
 942: PPUSH
 943: LD_INT 37
 945: PPUSH
 946: LD_INT 0
 948: PPUSH
 949: CALL_OW 48
// SetDir ( un , 3 ) ;
 953: LD_VAR 0 3
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
 965: LD_VAR 0 3
 969: PPUSH
 970: LD_INT 3
 972: PPUSH
 973: CALL 41610 0 2
// end ; end_of_file
 977: LD_VAR 0 1
 981: RET
// export function Action ; begin
 982: LD_INT 0
 984: PPUSH
// InGameOn ;
 985: CALL_OW 8
// PrepareDeadBodies ;
 989: CALL 582 0 0
// PrepareFirstScene ;
 993: CALL 718 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 90 ) ;
 997: LD_INT 152
 999: PPUSH
1000: LD_INT 65
1002: PPUSH
1003: LD_INT 2
1005: PPUSH
1006: LD_INT 90
1008: NEG
1009: PPUSH
1010: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1014: LD_INT 152
1016: PPUSH
1017: LD_INT 65
1019: PPUSH
1020: LD_INT 2
1022: PPUSH
1023: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1027: LD_INT 122
1029: PPUSH
1030: LD_INT 40
1032: PPUSH
1033: LD_INT 2
1035: PPUSH
1036: LD_INT 8
1038: NEG
1039: PPUSH
1040: CALL_OW 330
// InGameOff ;
1044: CALL_OW 9
// end ; end_of_file
1048: LD_VAR 0 1
1052: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
// if exist_mode then
1057: LD_VAR 0 2
1061: IFFALSE 1086
// unit := CreateCharacter ( prefix & ident ) else
1063: LD_ADDR_VAR 0 5
1067: PUSH
1068: LD_VAR 0 3
1072: PUSH
1073: LD_VAR 0 1
1077: STR
1078: PPUSH
1079: CALL_OW 34
1083: ST_TO_ADDR
1084: GO 1101
// unit := NewCharacter ( ident ) ;
1086: LD_ADDR_VAR 0 5
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: CALL_OW 25
1100: ST_TO_ADDR
// result := unit ;
1101: LD_ADDR_VAR 0 4
1105: PUSH
1106: LD_VAR 0 5
1110: ST_TO_ADDR
// end ;
1111: LD_VAR 0 4
1115: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
1116: LD_INT 0
1118: PPUSH
1119: PPUSH
// if not side or not nation then
1120: LD_VAR 0 1
1124: NOT
1125: PUSH
1126: LD_VAR 0 2
1130: NOT
1131: OR
1132: IFFALSE 1136
// exit ;
1134: GO 1904
// case nation of nation_american :
1136: LD_VAR 0 2
1140: PUSH
1141: LD_INT 1
1143: DOUBLE
1144: EQUAL
1145: IFTRUE 1149
1147: GO 1363
1149: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
1150: LD_ADDR_VAR 0 4
1154: PUSH
1155: LD_INT 35
1157: PUSH
1158: LD_INT 45
1160: PUSH
1161: LD_INT 46
1163: PUSH
1164: LD_INT 47
1166: PUSH
1167: LD_INT 82
1169: PUSH
1170: LD_INT 83
1172: PUSH
1173: LD_INT 84
1175: PUSH
1176: LD_INT 85
1178: PUSH
1179: LD_INT 86
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: LD_INT 2
1187: PUSH
1188: LD_INT 6
1190: PUSH
1191: LD_INT 15
1193: PUSH
1194: LD_INT 16
1196: PUSH
1197: LD_INT 7
1199: PUSH
1200: LD_INT 12
1202: PUSH
1203: LD_INT 13
1205: PUSH
1206: LD_INT 10
1208: PUSH
1209: LD_INT 14
1211: PUSH
1212: LD_INT 20
1214: PUSH
1215: LD_INT 21
1217: PUSH
1218: LD_INT 22
1220: PUSH
1221: LD_INT 25
1223: PUSH
1224: LD_INT 32
1226: PUSH
1227: LD_INT 27
1229: PUSH
1230: LD_INT 36
1232: PUSH
1233: LD_INT 69
1235: PUSH
1236: LD_INT 39
1238: PUSH
1239: LD_INT 34
1241: PUSH
1242: LD_INT 40
1244: PUSH
1245: LD_INT 48
1247: PUSH
1248: LD_INT 49
1250: PUSH
1251: LD_INT 50
1253: PUSH
1254: LD_INT 51
1256: PUSH
1257: LD_INT 52
1259: PUSH
1260: LD_INT 53
1262: PUSH
1263: LD_INT 54
1265: PUSH
1266: LD_INT 55
1268: PUSH
1269: LD_INT 56
1271: PUSH
1272: LD_INT 57
1274: PUSH
1275: LD_INT 58
1277: PUSH
1278: LD_INT 59
1280: PUSH
1281: LD_INT 60
1283: PUSH
1284: LD_INT 61
1286: PUSH
1287: LD_INT 62
1289: PUSH
1290: LD_INT 80
1292: PUSH
1293: LD_INT 82
1295: PUSH
1296: LD_INT 83
1298: PUSH
1299: LD_INT 84
1301: PUSH
1302: LD_INT 85
1304: PUSH
1305: LD_INT 86
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: LIST
1329: LIST
1330: LIST
1331: LIST
1332: LIST
1333: LIST
1334: LIST
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: LIST
1347: LIST
1348: LIST
1349: LIST
1350: LIST
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: LIST
1356: LIST
1357: LIST
1358: LIST
1359: LIST
1360: ST_TO_ADDR
1361: GO 1828
1363: LD_INT 2
1365: DOUBLE
1366: EQUAL
1367: IFTRUE 1371
1369: GO 1597
1371: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1372: LD_ADDR_VAR 0 4
1376: PUSH
1377: LD_INT 35
1379: PUSH
1380: LD_INT 45
1382: PUSH
1383: LD_INT 46
1385: PUSH
1386: LD_INT 47
1388: PUSH
1389: LD_INT 82
1391: PUSH
1392: LD_INT 83
1394: PUSH
1395: LD_INT 84
1397: PUSH
1398: LD_INT 85
1400: PUSH
1401: LD_INT 87
1403: PUSH
1404: LD_INT 70
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: LD_INT 11
1412: PUSH
1413: LD_INT 3
1415: PUSH
1416: LD_INT 4
1418: PUSH
1419: LD_INT 5
1421: PUSH
1422: LD_INT 6
1424: PUSH
1425: LD_INT 15
1427: PUSH
1428: LD_INT 18
1430: PUSH
1431: LD_INT 7
1433: PUSH
1434: LD_INT 17
1436: PUSH
1437: LD_INT 8
1439: PUSH
1440: LD_INT 20
1442: PUSH
1443: LD_INT 21
1445: PUSH
1446: LD_INT 22
1448: PUSH
1449: LD_INT 72
1451: PUSH
1452: LD_INT 26
1454: PUSH
1455: LD_INT 69
1457: PUSH
1458: LD_INT 39
1460: PUSH
1461: LD_INT 40
1463: PUSH
1464: LD_INT 41
1466: PUSH
1467: LD_INT 42
1469: PUSH
1470: LD_INT 43
1472: PUSH
1473: LD_INT 48
1475: PUSH
1476: LD_INT 49
1478: PUSH
1479: LD_INT 50
1481: PUSH
1482: LD_INT 51
1484: PUSH
1485: LD_INT 52
1487: PUSH
1488: LD_INT 53
1490: PUSH
1491: LD_INT 54
1493: PUSH
1494: LD_INT 55
1496: PUSH
1497: LD_INT 56
1499: PUSH
1500: LD_INT 60
1502: PUSH
1503: LD_INT 61
1505: PUSH
1506: LD_INT 62
1508: PUSH
1509: LD_INT 66
1511: PUSH
1512: LD_INT 67
1514: PUSH
1515: LD_INT 68
1517: PUSH
1518: LD_INT 81
1520: PUSH
1521: LD_INT 82
1523: PUSH
1524: LD_INT 83
1526: PUSH
1527: LD_INT 84
1529: PUSH
1530: LD_INT 85
1532: PUSH
1533: LD_INT 87
1535: PUSH
1536: LD_INT 88
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: LIST
1560: LIST
1561: LIST
1562: LIST
1563: LIST
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: LIST
1577: LIST
1578: LIST
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: ST_TO_ADDR
1595: GO 1828
1597: LD_INT 3
1599: DOUBLE
1600: EQUAL
1601: IFTRUE 1605
1603: GO 1827
1605: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1606: LD_ADDR_VAR 0 4
1610: PUSH
1611: LD_INT 46
1613: PUSH
1614: LD_INT 47
1616: PUSH
1617: LD_INT 1
1619: PUSH
1620: LD_INT 2
1622: PUSH
1623: LD_INT 82
1625: PUSH
1626: LD_INT 83
1628: PUSH
1629: LD_INT 84
1631: PUSH
1632: LD_INT 85
1634: PUSH
1635: LD_INT 86
1637: PUSH
1638: LD_INT 11
1640: PUSH
1641: LD_INT 9
1643: PUSH
1644: LD_INT 20
1646: PUSH
1647: LD_INT 19
1649: PUSH
1650: LD_INT 21
1652: PUSH
1653: LD_INT 24
1655: PUSH
1656: LD_INT 22
1658: PUSH
1659: LD_INT 25
1661: PUSH
1662: LD_INT 28
1664: PUSH
1665: LD_INT 29
1667: PUSH
1668: LD_INT 30
1670: PUSH
1671: LD_INT 31
1673: PUSH
1674: LD_INT 37
1676: PUSH
1677: LD_INT 38
1679: PUSH
1680: LD_INT 32
1682: PUSH
1683: LD_INT 27
1685: PUSH
1686: LD_INT 33
1688: PUSH
1689: LD_INT 69
1691: PUSH
1692: LD_INT 39
1694: PUSH
1695: LD_INT 34
1697: PUSH
1698: LD_INT 40
1700: PUSH
1701: LD_INT 71
1703: PUSH
1704: LD_INT 23
1706: PUSH
1707: LD_INT 44
1709: PUSH
1710: LD_INT 48
1712: PUSH
1713: LD_INT 49
1715: PUSH
1716: LD_INT 50
1718: PUSH
1719: LD_INT 51
1721: PUSH
1722: LD_INT 52
1724: PUSH
1725: LD_INT 53
1727: PUSH
1728: LD_INT 54
1730: PUSH
1731: LD_INT 55
1733: PUSH
1734: LD_INT 56
1736: PUSH
1737: LD_INT 57
1739: PUSH
1740: LD_INT 58
1742: PUSH
1743: LD_INT 59
1745: PUSH
1746: LD_INT 63
1748: PUSH
1749: LD_INT 64
1751: PUSH
1752: LD_INT 65
1754: PUSH
1755: LD_INT 82
1757: PUSH
1758: LD_INT 83
1760: PUSH
1761: LD_INT 84
1763: PUSH
1764: LD_INT 85
1766: PUSH
1767: LD_INT 86
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: LIST
1781: LIST
1782: LIST
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: LIST
1797: LIST
1798: LIST
1799: LIST
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: LIST
1823: LIST
1824: ST_TO_ADDR
1825: GO 1828
1827: POP
// if state > - 1 and state < 3 then
1828: LD_VAR 0 3
1832: PUSH
1833: LD_INT 1
1835: NEG
1836: GREATER
1837: PUSH
1838: LD_VAR 0 3
1842: PUSH
1843: LD_INT 3
1845: LESS
1846: AND
1847: IFFALSE 1904
// for i in result do
1849: LD_ADDR_VAR 0 5
1853: PUSH
1854: LD_VAR 0 4
1858: PUSH
1859: FOR_IN
1860: IFFALSE 1902
// if GetTech ( i , side ) <> state then
1862: LD_VAR 0 5
1866: PPUSH
1867: LD_VAR 0 1
1871: PPUSH
1872: CALL_OW 321
1876: PUSH
1877: LD_VAR 0 3
1881: NONEQUAL
1882: IFFALSE 1900
// result := result diff i ;
1884: LD_ADDR_VAR 0 4
1888: PUSH
1889: LD_VAR 0 4
1893: PUSH
1894: LD_VAR 0 5
1898: DIFF
1899: ST_TO_ADDR
1900: GO 1859
1902: POP
1903: POP
// end ;
1904: LD_VAR 0 4
1908: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1909: LD_INT 0
1911: PPUSH
1912: PPUSH
1913: PPUSH
// result := true ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: LD_INT 1
1921: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1922: LD_ADDR_VAR 0 5
1926: PUSH
1927: LD_VAR 0 2
1931: PPUSH
1932: CALL_OW 480
1936: ST_TO_ADDR
// if not tmp then
1937: LD_VAR 0 5
1941: NOT
1942: IFFALSE 1946
// exit ;
1944: GO 1995
// for i in tmp do
1946: LD_ADDR_VAR 0 4
1950: PUSH
1951: LD_VAR 0 5
1955: PUSH
1956: FOR_IN
1957: IFFALSE 1993
// if GetTech ( i , side ) <> state_researched then
1959: LD_VAR 0 4
1963: PPUSH
1964: LD_VAR 0 1
1968: PPUSH
1969: CALL_OW 321
1973: PUSH
1974: LD_INT 2
1976: NONEQUAL
1977: IFFALSE 1991
// begin result := false ;
1979: LD_ADDR_VAR 0 3
1983: PUSH
1984: LD_INT 0
1986: ST_TO_ADDR
// exit ;
1987: POP
1988: POP
1989: GO 1995
// end ;
1991: GO 1956
1993: POP
1994: POP
// end ;
1995: LD_VAR 0 3
1999: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
2000: LD_INT 0
2002: PPUSH
2003: PPUSH
2004: PPUSH
2005: PPUSH
2006: PPUSH
2007: PPUSH
2008: PPUSH
2009: PPUSH
2010: PPUSH
2011: PPUSH
2012: PPUSH
2013: PPUSH
2014: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
2015: LD_VAR 0 1
2019: NOT
2020: PUSH
2021: LD_VAR 0 1
2025: PPUSH
2026: CALL_OW 257
2030: PUSH
2031: LD_INT 9
2033: NONEQUAL
2034: OR
2035: IFFALSE 2039
// exit ;
2037: GO 2612
// side := GetSide ( unit ) ;
2039: LD_ADDR_VAR 0 9
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: CALL_OW 255
2053: ST_TO_ADDR
// tech_space := tech_spacanom ;
2054: LD_ADDR_VAR 0 12
2058: PUSH
2059: LD_INT 29
2061: ST_TO_ADDR
// tech_time := tech_taurad ;
2062: LD_ADDR_VAR 0 13
2066: PUSH
2067: LD_INT 28
2069: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
2070: LD_ADDR_VAR 0 11
2074: PUSH
2075: LD_VAR 0 1
2079: PPUSH
2080: CALL_OW 310
2084: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
2085: LD_VAR 0 11
2089: PPUSH
2090: CALL_OW 247
2094: PUSH
2095: LD_INT 2
2097: EQUAL
2098: IFFALSE 2102
// exit ;
2100: GO 2612
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2102: LD_ADDR_VAR 0 8
2106: PUSH
2107: LD_INT 81
2109: PUSH
2110: LD_VAR 0 9
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: PUSH
2119: LD_INT 3
2121: PUSH
2122: LD_INT 21
2124: PUSH
2125: LD_INT 3
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: PPUSH
2140: CALL_OW 69
2144: ST_TO_ADDR
// if not tmp then
2145: LD_VAR 0 8
2149: NOT
2150: IFFALSE 2154
// exit ;
2152: GO 2612
// if in_unit then
2154: LD_VAR 0 11
2158: IFFALSE 2182
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
2160: LD_ADDR_VAR 0 10
2164: PUSH
2165: LD_VAR 0 8
2169: PPUSH
2170: LD_VAR 0 11
2174: PPUSH
2175: CALL_OW 74
2179: ST_TO_ADDR
2180: GO 2202
// enemy := NearestUnitToUnit ( tmp , unit ) ;
2182: LD_ADDR_VAR 0 10
2186: PUSH
2187: LD_VAR 0 8
2191: PPUSH
2192: LD_VAR 0 1
2196: PPUSH
2197: CALL_OW 74
2201: ST_TO_ADDR
// if not enemy then
2202: LD_VAR 0 10
2206: NOT
2207: IFFALSE 2211
// exit ;
2209: GO 2612
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
2211: LD_VAR 0 11
2215: PUSH
2216: LD_VAR 0 11
2220: PPUSH
2221: LD_VAR 0 10
2225: PPUSH
2226: CALL_OW 296
2230: PUSH
2231: LD_INT 13
2233: GREATER
2234: AND
2235: PUSH
2236: LD_VAR 0 1
2240: PPUSH
2241: LD_VAR 0 10
2245: PPUSH
2246: CALL_OW 296
2250: PUSH
2251: LD_INT 12
2253: GREATER
2254: OR
2255: IFFALSE 2259
// exit ;
2257: GO 2612
// missile := [ 1 ] ;
2259: LD_ADDR_VAR 0 14
2263: PUSH
2264: LD_INT 1
2266: PUSH
2267: EMPTY
2268: LIST
2269: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2270: LD_VAR 0 9
2274: PPUSH
2275: LD_VAR 0 12
2279: PPUSH
2280: CALL_OW 325
2284: IFFALSE 2313
// missile := Replace ( missile , missile + 1 , 2 ) ;
2286: LD_ADDR_VAR 0 14
2290: PUSH
2291: LD_VAR 0 14
2295: PPUSH
2296: LD_VAR 0 14
2300: PUSH
2301: LD_INT 1
2303: PLUS
2304: PPUSH
2305: LD_INT 2
2307: PPUSH
2308: CALL_OW 1
2312: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2313: LD_VAR 0 9
2317: PPUSH
2318: LD_VAR 0 13
2322: PPUSH
2323: CALL_OW 325
2327: PUSH
2328: LD_VAR 0 10
2332: PPUSH
2333: CALL_OW 255
2337: PPUSH
2338: LD_VAR 0 13
2342: PPUSH
2343: CALL_OW 325
2347: NOT
2348: AND
2349: IFFALSE 2378
// missile := Replace ( missile , missile + 1 , 3 ) ;
2351: LD_ADDR_VAR 0 14
2355: PUSH
2356: LD_VAR 0 14
2360: PPUSH
2361: LD_VAR 0 14
2365: PUSH
2366: LD_INT 1
2368: PLUS
2369: PPUSH
2370: LD_INT 3
2372: PPUSH
2373: CALL_OW 1
2377: ST_TO_ADDR
// if missile < 2 then
2378: LD_VAR 0 14
2382: PUSH
2383: LD_INT 2
2385: LESS
2386: IFFALSE 2390
// exit ;
2388: GO 2612
// x := GetX ( enemy ) ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_VAR 0 10
2399: PPUSH
2400: CALL_OW 250
2404: ST_TO_ADDR
// y := GetY ( enemy ) ;
2405: LD_ADDR_VAR 0 5
2409: PUSH
2410: LD_VAR 0 10
2414: PPUSH
2415: CALL_OW 251
2419: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2420: LD_ADDR_VAR 0 6
2424: PUSH
2425: LD_VAR 0 4
2429: PUSH
2430: LD_INT 1
2432: NEG
2433: PPUSH
2434: LD_INT 1
2436: PPUSH
2437: CALL_OW 12
2441: PLUS
2442: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2443: LD_ADDR_VAR 0 7
2447: PUSH
2448: LD_VAR 0 5
2452: PUSH
2453: LD_INT 1
2455: NEG
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 12
2464: PLUS
2465: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2466: LD_VAR 0 6
2470: PPUSH
2471: LD_VAR 0 7
2475: PPUSH
2476: CALL_OW 488
2480: NOT
2481: IFFALSE 2503
// begin _x := x ;
2483: LD_ADDR_VAR 0 6
2487: PUSH
2488: LD_VAR 0 4
2492: ST_TO_ADDR
// _y := y ;
2493: LD_ADDR_VAR 0 7
2497: PUSH
2498: LD_VAR 0 5
2502: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_INT 1
2510: PPUSH
2511: LD_VAR 0 14
2515: PPUSH
2516: CALL_OW 12
2520: ST_TO_ADDR
// case i of 1 :
2521: LD_VAR 0 3
2525: PUSH
2526: LD_INT 1
2528: DOUBLE
2529: EQUAL
2530: IFTRUE 2534
2532: GO 2551
2534: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2535: LD_VAR 0 1
2539: PPUSH
2540: LD_VAR 0 10
2544: PPUSH
2545: CALL_OW 115
2549: GO 2612
2551: LD_INT 2
2553: DOUBLE
2554: EQUAL
2555: IFTRUE 2559
2557: GO 2581
2559: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2560: LD_VAR 0 1
2564: PPUSH
2565: LD_VAR 0 6
2569: PPUSH
2570: LD_VAR 0 7
2574: PPUSH
2575: CALL_OW 153
2579: GO 2612
2581: LD_INT 3
2583: DOUBLE
2584: EQUAL
2585: IFTRUE 2589
2587: GO 2611
2589: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2590: LD_VAR 0 1
2594: PPUSH
2595: LD_VAR 0 6
2599: PPUSH
2600: LD_VAR 0 7
2604: PPUSH
2605: CALL_OW 154
2609: GO 2612
2611: POP
// end ;
2612: LD_VAR 0 2
2616: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2617: LD_INT 0
2619: PPUSH
2620: PPUSH
2621: PPUSH
2622: PPUSH
2623: PPUSH
2624: PPUSH
// if not unit or not building then
2625: LD_VAR 0 1
2629: NOT
2630: PUSH
2631: LD_VAR 0 2
2635: NOT
2636: OR
2637: IFFALSE 2641
// exit ;
2639: GO 2799
// x := GetX ( building ) ;
2641: LD_ADDR_VAR 0 5
2645: PUSH
2646: LD_VAR 0 2
2650: PPUSH
2651: CALL_OW 250
2655: ST_TO_ADDR
// y := GetY ( building ) ;
2656: LD_ADDR_VAR 0 6
2660: PUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL_OW 251
2670: ST_TO_ADDR
// for i = 0 to 5 do
2671: LD_ADDR_VAR 0 4
2675: PUSH
2676: DOUBLE
2677: LD_INT 0
2679: DEC
2680: ST_TO_ADDR
2681: LD_INT 5
2683: PUSH
2684: FOR_TO
2685: IFFALSE 2797
// begin _x := ShiftX ( x , i , 3 ) ;
2687: LD_ADDR_VAR 0 7
2691: PUSH
2692: LD_VAR 0 5
2696: PPUSH
2697: LD_VAR 0 4
2701: PPUSH
2702: LD_INT 3
2704: PPUSH
2705: CALL_OW 272
2709: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2710: LD_ADDR_VAR 0 8
2714: PUSH
2715: LD_VAR 0 6
2719: PPUSH
2720: LD_VAR 0 4
2724: PPUSH
2725: LD_INT 3
2727: PPUSH
2728: CALL_OW 273
2732: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2733: LD_VAR 0 7
2737: PPUSH
2738: LD_VAR 0 8
2742: PPUSH
2743: CALL_OW 488
2747: NOT
2748: IFFALSE 2752
// continue ;
2750: GO 2684
// if HexInfo ( _x , _y ) = 0 then
2752: LD_VAR 0 7
2756: PPUSH
2757: LD_VAR 0 8
2761: PPUSH
2762: CALL_OW 428
2766: PUSH
2767: LD_INT 0
2769: EQUAL
2770: IFFALSE 2795
// begin ComMoveXY ( unit , _x , _y ) ;
2772: LD_VAR 0 1
2776: PPUSH
2777: LD_VAR 0 7
2781: PPUSH
2782: LD_VAR 0 8
2786: PPUSH
2787: CALL_OW 111
// exit ;
2791: POP
2792: POP
2793: GO 2799
// end ; end ;
2795: GO 2684
2797: POP
2798: POP
// end ;
2799: LD_VAR 0 3
2803: RET
// export function ScanBase ( side , base_area ) ; begin
2804: LD_INT 0
2806: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: LD_VAR 0 2
2816: PPUSH
2817: LD_INT 81
2819: PUSH
2820: LD_VAR 0 1
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PPUSH
2829: CALL_OW 70
2833: ST_TO_ADDR
// end ;
2834: LD_VAR 0 3
2838: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2839: LD_INT 0
2841: PPUSH
2842: PPUSH
2843: PPUSH
2844: PPUSH
// result := false ;
2845: LD_ADDR_VAR 0 2
2849: PUSH
2850: LD_INT 0
2852: ST_TO_ADDR
// side := GetSide ( unit ) ;
2853: LD_ADDR_VAR 0 3
2857: PUSH
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL_OW 255
2867: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: LD_VAR 0 1
2877: PPUSH
2878: CALL_OW 248
2882: ST_TO_ADDR
// case nat of 1 :
2883: LD_VAR 0 4
2887: PUSH
2888: LD_INT 1
2890: DOUBLE
2891: EQUAL
2892: IFTRUE 2896
2894: GO 2907
2896: POP
// tech := tech_lassight ; 2 :
2897: LD_ADDR_VAR 0 5
2901: PUSH
2902: LD_INT 12
2904: ST_TO_ADDR
2905: GO 2946
2907: LD_INT 2
2909: DOUBLE
2910: EQUAL
2911: IFTRUE 2915
2913: GO 2926
2915: POP
// tech := tech_mortar ; 3 :
2916: LD_ADDR_VAR 0 5
2920: PUSH
2921: LD_INT 41
2923: ST_TO_ADDR
2924: GO 2946
2926: LD_INT 3
2928: DOUBLE
2929: EQUAL
2930: IFTRUE 2934
2932: GO 2945
2934: POP
// tech := tech_bazooka ; end ;
2935: LD_ADDR_VAR 0 5
2939: PUSH
2940: LD_INT 44
2942: ST_TO_ADDR
2943: GO 2946
2945: POP
// if Researched ( side , tech ) then
2946: LD_VAR 0 3
2950: PPUSH
2951: LD_VAR 0 5
2955: PPUSH
2956: CALL_OW 325
2960: IFFALSE 2987
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2962: LD_ADDR_VAR 0 2
2966: PUSH
2967: LD_INT 5
2969: PUSH
2970: LD_INT 8
2972: PUSH
2973: LD_INT 9
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: PUSH
2981: LD_VAR 0 4
2985: ARRAY
2986: ST_TO_ADDR
// end ;
2987: LD_VAR 0 2
2991: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2992: LD_INT 0
2994: PPUSH
2995: PPUSH
2996: PPUSH
// if not mines then
2997: LD_VAR 0 2
3001: NOT
3002: IFFALSE 3006
// exit ;
3004: GO 3150
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3006: LD_ADDR_VAR 0 5
3010: PUSH
3011: LD_INT 81
3013: PUSH
3014: LD_VAR 0 1
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 3
3025: PUSH
3026: LD_INT 21
3028: PUSH
3029: LD_INT 3
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PPUSH
3044: CALL_OW 69
3048: ST_TO_ADDR
// for i in mines do
3049: LD_ADDR_VAR 0 4
3053: PUSH
3054: LD_VAR 0 2
3058: PUSH
3059: FOR_IN
3060: IFFALSE 3148
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
3062: LD_VAR 0 4
3066: PUSH
3067: LD_INT 1
3069: ARRAY
3070: PPUSH
3071: LD_VAR 0 4
3075: PUSH
3076: LD_INT 2
3078: ARRAY
3079: PPUSH
3080: CALL_OW 458
3084: NOT
3085: IFFALSE 3089
// continue ;
3087: GO 3059
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
3089: LD_VAR 0 4
3093: PUSH
3094: LD_INT 1
3096: ARRAY
3097: PPUSH
3098: LD_VAR 0 4
3102: PUSH
3103: LD_INT 2
3105: ARRAY
3106: PPUSH
3107: CALL_OW 428
3111: PUSH
3112: LD_VAR 0 5
3116: IN
3117: IFFALSE 3146
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
3119: LD_VAR 0 4
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_VAR 0 4
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: LD_VAR 0 1
3141: PPUSH
3142: CALL_OW 456
// end ;
3146: GO 3059
3148: POP
3149: POP
// end ;
3150: LD_VAR 0 3
3154: RET
// export function Count ( array ) ; var i ; begin
3155: LD_INT 0
3157: PPUSH
3158: PPUSH
// result := 0 ;
3159: LD_ADDR_VAR 0 2
3163: PUSH
3164: LD_INT 0
3166: ST_TO_ADDR
// for i in array do
3167: LD_ADDR_VAR 0 3
3171: PUSH
3172: LD_VAR 0 1
3176: PUSH
3177: FOR_IN
3178: IFFALSE 3202
// if i then
3180: LD_VAR 0 3
3184: IFFALSE 3200
// result := result + 1 ;
3186: LD_ADDR_VAR 0 2
3190: PUSH
3191: LD_VAR 0 2
3195: PUSH
3196: LD_INT 1
3198: PLUS
3199: ST_TO_ADDR
3200: GO 3177
3202: POP
3203: POP
// end ;
3204: LD_VAR 0 2
3208: RET
// export function IsEmpty ( building ) ; begin
3209: LD_INT 0
3211: PPUSH
// if not building then
3212: LD_VAR 0 1
3216: NOT
3217: IFFALSE 3221
// exit ;
3219: GO 3264
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
3221: LD_ADDR_VAR 0 2
3225: PUSH
3226: LD_VAR 0 1
3230: PUSH
3231: LD_INT 22
3233: PUSH
3234: LD_VAR 0 1
3238: PPUSH
3239: CALL_OW 255
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: LD_INT 58
3250: PUSH
3251: EMPTY
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PPUSH
3258: CALL_OW 69
3262: IN
3263: ST_TO_ADDR
// end ;
3264: LD_VAR 0 2
3268: RET
// export function IsNotFull ( building ) ; var places ; begin
3269: LD_INT 0
3271: PPUSH
3272: PPUSH
// if not building then
3273: LD_VAR 0 1
3277: NOT
3278: IFFALSE 3282
// exit ;
3280: GO 3453
// result := false ;
3282: LD_ADDR_VAR 0 2
3286: PUSH
3287: LD_INT 0
3289: ST_TO_ADDR
// places := 0 ;
3290: LD_ADDR_VAR 0 3
3294: PUSH
3295: LD_INT 0
3297: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
3298: LD_VAR 0 1
3302: PPUSH
3303: CALL_OW 266
3307: PUSH
3308: LD_INT 0
3310: DOUBLE
3311: EQUAL
3312: IFTRUE 3370
3314: LD_INT 1
3316: DOUBLE
3317: EQUAL
3318: IFTRUE 3370
3320: LD_INT 6
3322: DOUBLE
3323: EQUAL
3324: IFTRUE 3370
3326: LD_INT 7
3328: DOUBLE
3329: EQUAL
3330: IFTRUE 3370
3332: LD_INT 8
3334: DOUBLE
3335: EQUAL
3336: IFTRUE 3370
3338: LD_INT 4
3340: DOUBLE
3341: EQUAL
3342: IFTRUE 3370
3344: LD_INT 5
3346: DOUBLE
3347: EQUAL
3348: IFTRUE 3370
3350: LD_INT 2
3352: DOUBLE
3353: EQUAL
3354: IFTRUE 3370
3356: LD_INT 3
3358: DOUBLE
3359: EQUAL
3360: IFTRUE 3370
3362: LD_INT 35
3364: DOUBLE
3365: EQUAL
3366: IFTRUE 3370
3368: GO 3381
3370: POP
// places := 6 ; b_bunker , b_breastwork :
3371: LD_ADDR_VAR 0 3
3375: PUSH
3376: LD_INT 6
3378: ST_TO_ADDR
3379: GO 3426
3381: LD_INT 32
3383: DOUBLE
3384: EQUAL
3385: IFTRUE 3395
3387: LD_INT 31
3389: DOUBLE
3390: EQUAL
3391: IFTRUE 3395
3393: GO 3406
3395: POP
// places := 1 ; b_control_tower :
3396: LD_ADDR_VAR 0 3
3400: PUSH
3401: LD_INT 1
3403: ST_TO_ADDR
3404: GO 3426
3406: LD_INT 36
3408: DOUBLE
3409: EQUAL
3410: IFTRUE 3414
3412: GO 3425
3414: POP
// places := 3 ; end ;
3415: LD_ADDR_VAR 0 3
3419: PUSH
3420: LD_INT 3
3422: ST_TO_ADDR
3423: GO 3426
3425: POP
// if places then
3426: LD_VAR 0 3
3430: IFFALSE 3453
// result := UnitsInside ( building ) < places ;
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 313
3446: PUSH
3447: LD_VAR 0 3
3451: LESS
3452: ST_TO_ADDR
// end ;
3453: LD_VAR 0 2
3457: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3458: LD_INT 0
3460: PPUSH
3461: PPUSH
3462: PPUSH
3463: PPUSH
// tmp := [ ] ;
3464: LD_ADDR_VAR 0 3
3468: PUSH
3469: EMPTY
3470: ST_TO_ADDR
// list := [ ] ;
3471: LD_ADDR_VAR 0 5
3475: PUSH
3476: EMPTY
3477: ST_TO_ADDR
// for i = 16 to 25 do
3478: LD_ADDR_VAR 0 4
3482: PUSH
3483: DOUBLE
3484: LD_INT 16
3486: DEC
3487: ST_TO_ADDR
3488: LD_INT 25
3490: PUSH
3491: FOR_TO
3492: IFFALSE 3565
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3494: LD_ADDR_VAR 0 3
3498: PUSH
3499: LD_VAR 0 3
3503: PUSH
3504: LD_INT 22
3506: PUSH
3507: LD_VAR 0 1
3511: PPUSH
3512: CALL_OW 255
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 91
3523: PUSH
3524: LD_VAR 0 1
3528: PUSH
3529: LD_INT 6
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 30
3539: PUSH
3540: LD_VAR 0 4
3544: PUSH
3545: EMPTY
3546: LIST
3547: LIST
3548: PUSH
3549: EMPTY
3550: LIST
3551: LIST
3552: LIST
3553: PUSH
3554: EMPTY
3555: LIST
3556: PPUSH
3557: CALL_OW 69
3561: ADD
3562: ST_TO_ADDR
3563: GO 3491
3565: POP
3566: POP
// for i = 1 to tmp do
3567: LD_ADDR_VAR 0 4
3571: PUSH
3572: DOUBLE
3573: LD_INT 1
3575: DEC
3576: ST_TO_ADDR
3577: LD_VAR 0 3
3581: PUSH
3582: FOR_TO
3583: IFFALSE 3671
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3585: LD_ADDR_VAR 0 5
3589: PUSH
3590: LD_VAR 0 5
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 4
3604: ARRAY
3605: PPUSH
3606: CALL_OW 266
3610: PUSH
3611: LD_VAR 0 3
3615: PUSH
3616: LD_VAR 0 4
3620: ARRAY
3621: PPUSH
3622: CALL_OW 250
3626: PUSH
3627: LD_VAR 0 3
3631: PUSH
3632: LD_VAR 0 4
3636: ARRAY
3637: PPUSH
3638: CALL_OW 251
3642: PUSH
3643: LD_VAR 0 3
3647: PUSH
3648: LD_VAR 0 4
3652: ARRAY
3653: PPUSH
3654: CALL_OW 254
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: LIST
3663: LIST
3664: PUSH
3665: EMPTY
3666: LIST
3667: ADD
3668: ST_TO_ADDR
3669: GO 3582
3671: POP
3672: POP
// result := list ;
3673: LD_ADDR_VAR 0 2
3677: PUSH
3678: LD_VAR 0 5
3682: ST_TO_ADDR
// end ;
3683: LD_VAR 0 2
3687: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3688: LD_INT 0
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
3695: PPUSH
3696: PPUSH
// if not factory then
3697: LD_VAR 0 1
3701: NOT
3702: IFFALSE 3706
// exit ;
3704: GO 4299
// if control = control_apeman then
3706: LD_VAR 0 4
3710: PUSH
3711: LD_INT 5
3713: EQUAL
3714: IFFALSE 3823
// begin tmp := UnitsInside ( factory ) ;
3716: LD_ADDR_VAR 0 8
3720: PUSH
3721: LD_VAR 0 1
3725: PPUSH
3726: CALL_OW 313
3730: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3731: LD_VAR 0 8
3735: PPUSH
3736: LD_INT 25
3738: PUSH
3739: LD_INT 12
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PPUSH
3746: CALL_OW 72
3750: NOT
3751: IFFALSE 3761
// control := control_manual ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_INT 1
3760: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3761: LD_ADDR_VAR 0 8
3765: PUSH
3766: LD_VAR 0 1
3770: PPUSH
3771: CALL 3458 0 1
3775: ST_TO_ADDR
// if tmp then
3776: LD_VAR 0 8
3780: IFFALSE 3823
// begin for i in tmp do
3782: LD_ADDR_VAR 0 7
3786: PUSH
3787: LD_VAR 0 8
3791: PUSH
3792: FOR_IN
3793: IFFALSE 3821
// if i [ 1 ] = b_ext_radio then
3795: LD_VAR 0 7
3799: PUSH
3800: LD_INT 1
3802: ARRAY
3803: PUSH
3804: LD_INT 22
3806: EQUAL
3807: IFFALSE 3819
// begin control := control_remote ;
3809: LD_ADDR_VAR 0 4
3813: PUSH
3814: LD_INT 2
3816: ST_TO_ADDR
// break ;
3817: GO 3821
// end ;
3819: GO 3792
3821: POP
3822: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3823: LD_VAR 0 1
3827: PPUSH
3828: LD_VAR 0 2
3832: PPUSH
3833: LD_VAR 0 3
3837: PPUSH
3838: LD_VAR 0 4
3842: PPUSH
3843: LD_VAR 0 5
3847: PPUSH
3848: CALL_OW 448
3852: IFFALSE 3887
// begin result := [ chassis , engine , control , weapon ] ;
3854: LD_ADDR_VAR 0 6
3858: PUSH
3859: LD_VAR 0 2
3863: PUSH
3864: LD_VAR 0 3
3868: PUSH
3869: LD_VAR 0 4
3873: PUSH
3874: LD_VAR 0 5
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: ST_TO_ADDR
// exit ;
3885: GO 4299
// end ; _chassis := AvailableChassisList ( factory ) ;
3887: LD_ADDR_VAR 0 9
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 475
3901: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3902: LD_ADDR_VAR 0 11
3906: PUSH
3907: LD_VAR 0 1
3911: PPUSH
3912: CALL_OW 476
3916: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3917: LD_ADDR_VAR 0 12
3921: PUSH
3922: LD_VAR 0 1
3926: PPUSH
3927: CALL_OW 477
3931: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3932: LD_ADDR_VAR 0 10
3936: PUSH
3937: LD_VAR 0 1
3941: PPUSH
3942: CALL_OW 478
3946: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3947: LD_VAR 0 9
3951: NOT
3952: PUSH
3953: LD_VAR 0 11
3957: NOT
3958: OR
3959: PUSH
3960: LD_VAR 0 12
3964: NOT
3965: OR
3966: PUSH
3967: LD_VAR 0 10
3971: NOT
3972: OR
3973: IFFALSE 4008
// begin result := [ chassis , engine , control , weapon ] ;
3975: LD_ADDR_VAR 0 6
3979: PUSH
3980: LD_VAR 0 2
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_VAR 0 4
3994: PUSH
3995: LD_VAR 0 5
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: LIST
4004: LIST
4005: ST_TO_ADDR
// exit ;
4006: GO 4299
// end ; if not chassis in _chassis then
4008: LD_VAR 0 2
4012: PUSH
4013: LD_VAR 0 9
4017: IN
4018: NOT
4019: IFFALSE 4045
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
4021: LD_ADDR_VAR 0 2
4025: PUSH
4026: LD_VAR 0 9
4030: PUSH
4031: LD_INT 1
4033: PPUSH
4034: LD_VAR 0 9
4038: PPUSH
4039: CALL_OW 12
4043: ARRAY
4044: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
4045: LD_VAR 0 2
4049: PPUSH
4050: LD_VAR 0 3
4054: PPUSH
4055: CALL 4304 0 2
4059: NOT
4060: IFFALSE 4119
// repeat engine := _engine [ 1 ] ;
4062: LD_ADDR_VAR 0 3
4066: PUSH
4067: LD_VAR 0 11
4071: PUSH
4072: LD_INT 1
4074: ARRAY
4075: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
4076: LD_ADDR_VAR 0 11
4080: PUSH
4081: LD_VAR 0 11
4085: PPUSH
4086: LD_INT 1
4088: PPUSH
4089: CALL_OW 3
4093: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
4094: LD_VAR 0 2
4098: PPUSH
4099: LD_VAR 0 3
4103: PPUSH
4104: CALL 4304 0 2
4108: PUSH
4109: LD_VAR 0 11
4113: PUSH
4114: EMPTY
4115: EQUAL
4116: OR
4117: IFFALSE 4062
// if not control in _control then
4119: LD_VAR 0 4
4123: PUSH
4124: LD_VAR 0 12
4128: IN
4129: NOT
4130: IFFALSE 4156
// control := _control [ rand ( 1 , _control ) ] ;
4132: LD_ADDR_VAR 0 4
4136: PUSH
4137: LD_VAR 0 12
4141: PUSH
4142: LD_INT 1
4144: PPUSH
4145: LD_VAR 0 12
4149: PPUSH
4150: CALL_OW 12
4154: ARRAY
4155: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
4156: LD_VAR 0 2
4160: PPUSH
4161: LD_VAR 0 5
4165: PPUSH
4166: CALL 4524 0 2
4170: NOT
4171: IFFALSE 4230
// repeat weapon := _weapon [ 1 ] ;
4173: LD_ADDR_VAR 0 5
4177: PUSH
4178: LD_VAR 0 10
4182: PUSH
4183: LD_INT 1
4185: ARRAY
4186: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
4187: LD_ADDR_VAR 0 10
4191: PUSH
4192: LD_VAR 0 10
4196: PPUSH
4197: LD_INT 1
4199: PPUSH
4200: CALL_OW 3
4204: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
4205: LD_VAR 0 2
4209: PPUSH
4210: LD_VAR 0 5
4214: PPUSH
4215: CALL 4524 0 2
4219: PUSH
4220: LD_VAR 0 10
4224: PUSH
4225: EMPTY
4226: EQUAL
4227: OR
4228: IFFALSE 4173
// result := [ ] ;
4230: LD_ADDR_VAR 0 6
4234: PUSH
4235: EMPTY
4236: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
4237: LD_VAR 0 1
4241: PPUSH
4242: LD_VAR 0 2
4246: PPUSH
4247: LD_VAR 0 3
4251: PPUSH
4252: LD_VAR 0 4
4256: PPUSH
4257: LD_VAR 0 5
4261: PPUSH
4262: CALL_OW 448
4266: IFFALSE 4299
// result := [ chassis , engine , control , weapon ] ;
4268: LD_ADDR_VAR 0 6
4272: PUSH
4273: LD_VAR 0 2
4277: PUSH
4278: LD_VAR 0 3
4282: PUSH
4283: LD_VAR 0 4
4287: PUSH
4288: LD_VAR 0 5
4292: PUSH
4293: EMPTY
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: ST_TO_ADDR
// end ;
4299: LD_VAR 0 6
4303: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
4304: LD_INT 0
4306: PPUSH
// if not chassis or not engine then
4307: LD_VAR 0 1
4311: NOT
4312: PUSH
4313: LD_VAR 0 2
4317: NOT
4318: OR
4319: IFFALSE 4323
// exit ;
4321: GO 4519
// case engine of engine_solar :
4323: LD_VAR 0 2
4327: PUSH
4328: LD_INT 2
4330: DOUBLE
4331: EQUAL
4332: IFTRUE 4336
4334: GO 4374
4336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
4337: LD_ADDR_VAR 0 3
4341: PUSH
4342: LD_INT 11
4344: PUSH
4345: LD_INT 12
4347: PUSH
4348: LD_INT 13
4350: PUSH
4351: LD_INT 14
4353: PUSH
4354: LD_INT 1
4356: PUSH
4357: LD_INT 2
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: ST_TO_ADDR
4372: GO 4503
4374: LD_INT 1
4376: DOUBLE
4377: EQUAL
4378: IFTRUE 4382
4380: GO 4444
4382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
4383: LD_ADDR_VAR 0 3
4387: PUSH
4388: LD_INT 11
4390: PUSH
4391: LD_INT 12
4393: PUSH
4394: LD_INT 13
4396: PUSH
4397: LD_INT 14
4399: PUSH
4400: LD_INT 1
4402: PUSH
4403: LD_INT 2
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: LD_INT 4
4411: PUSH
4412: LD_INT 5
4414: PUSH
4415: LD_INT 21
4417: PUSH
4418: LD_INT 23
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 24
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: LIST
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: ST_TO_ADDR
4442: GO 4503
4444: LD_INT 3
4446: DOUBLE
4447: EQUAL
4448: IFTRUE 4452
4450: GO 4502
4452: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4453: LD_ADDR_VAR 0 3
4457: PUSH
4458: LD_INT 13
4460: PUSH
4461: LD_INT 14
4463: PUSH
4464: LD_INT 2
4466: PUSH
4467: LD_INT 3
4469: PUSH
4470: LD_INT 4
4472: PUSH
4473: LD_INT 5
4475: PUSH
4476: LD_INT 21
4478: PUSH
4479: LD_INT 22
4481: PUSH
4482: LD_INT 23
4484: PUSH
4485: LD_INT 24
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: ST_TO_ADDR
4500: GO 4503
4502: POP
// result := ( chassis in result ) ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: LD_VAR 0 1
4512: PUSH
4513: LD_VAR 0 3
4517: IN
4518: ST_TO_ADDR
// end ;
4519: LD_VAR 0 3
4523: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4524: LD_INT 0
4526: PPUSH
// if not chassis or not weapon then
4527: LD_VAR 0 1
4531: NOT
4532: PUSH
4533: LD_VAR 0 2
4537: NOT
4538: OR
4539: IFFALSE 4543
// exit ;
4541: GO 5605
// case weapon of us_machine_gun :
4543: LD_VAR 0 2
4547: PUSH
4548: LD_INT 2
4550: DOUBLE
4551: EQUAL
4552: IFTRUE 4556
4554: GO 4586
4556: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4557: LD_ADDR_VAR 0 3
4561: PUSH
4562: LD_INT 1
4564: PUSH
4565: LD_INT 2
4567: PUSH
4568: LD_INT 3
4570: PUSH
4571: LD_INT 4
4573: PUSH
4574: LD_INT 5
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: ST_TO_ADDR
4584: GO 5589
4586: LD_INT 3
4588: DOUBLE
4589: EQUAL
4590: IFTRUE 4594
4592: GO 4624
4594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: LD_INT 1
4602: PUSH
4603: LD_INT 2
4605: PUSH
4606: LD_INT 3
4608: PUSH
4609: LD_INT 4
4611: PUSH
4612: LD_INT 5
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: ST_TO_ADDR
4622: GO 5589
4624: LD_INT 11
4626: DOUBLE
4627: EQUAL
4628: IFTRUE 4632
4630: GO 4662
4632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4633: LD_ADDR_VAR 0 3
4637: PUSH
4638: LD_INT 1
4640: PUSH
4641: LD_INT 2
4643: PUSH
4644: LD_INT 3
4646: PUSH
4647: LD_INT 4
4649: PUSH
4650: LD_INT 5
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: ST_TO_ADDR
4660: GO 5589
4662: LD_INT 4
4664: DOUBLE
4665: EQUAL
4666: IFTRUE 4670
4668: GO 4696
4670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4671: LD_ADDR_VAR 0 3
4675: PUSH
4676: LD_INT 2
4678: PUSH
4679: LD_INT 3
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: ST_TO_ADDR
4694: GO 5589
4696: LD_INT 5
4698: DOUBLE
4699: EQUAL
4700: IFTRUE 4704
4702: GO 4730
4704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4705: LD_ADDR_VAR 0 3
4709: PUSH
4710: LD_INT 2
4712: PUSH
4713: LD_INT 3
4715: PUSH
4716: LD_INT 4
4718: PUSH
4719: LD_INT 5
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: ST_TO_ADDR
4728: GO 5589
4730: LD_INT 9
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4764
4738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4739: LD_ADDR_VAR 0 3
4743: PUSH
4744: LD_INT 2
4746: PUSH
4747: LD_INT 3
4749: PUSH
4750: LD_INT 4
4752: PUSH
4753: LD_INT 5
4755: PUSH
4756: EMPTY
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: ST_TO_ADDR
4762: GO 5589
4764: LD_INT 7
4766: DOUBLE
4767: EQUAL
4768: IFTRUE 4772
4770: GO 4798
4772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 3
4783: PUSH
4784: LD_INT 4
4786: PUSH
4787: LD_INT 5
4789: PUSH
4790: EMPTY
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: ST_TO_ADDR
4796: GO 5589
4798: LD_INT 12
4800: DOUBLE
4801: EQUAL
4802: IFTRUE 4806
4804: GO 4832
4806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4807: LD_ADDR_VAR 0 3
4811: PUSH
4812: LD_INT 2
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: LD_INT 4
4820: PUSH
4821: LD_INT 5
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: ST_TO_ADDR
4830: GO 5589
4832: LD_INT 13
4834: DOUBLE
4835: EQUAL
4836: IFTRUE 4840
4838: GO 4866
4840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4841: LD_ADDR_VAR 0 3
4845: PUSH
4846: LD_INT 2
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: LD_INT 4
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: ST_TO_ADDR
4864: GO 5589
4866: LD_INT 14
4868: DOUBLE
4869: EQUAL
4870: IFTRUE 4874
4872: GO 4892
4874: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4875: LD_ADDR_VAR 0 3
4879: PUSH
4880: LD_INT 4
4882: PUSH
4883: LD_INT 5
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: ST_TO_ADDR
4890: GO 5589
4892: LD_INT 6
4894: DOUBLE
4895: EQUAL
4896: IFTRUE 4900
4898: GO 4918
4900: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4901: LD_ADDR_VAR 0 3
4905: PUSH
4906: LD_INT 4
4908: PUSH
4909: LD_INT 5
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: ST_TO_ADDR
4916: GO 5589
4918: LD_INT 10
4920: DOUBLE
4921: EQUAL
4922: IFTRUE 4926
4924: GO 4944
4926: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4927: LD_ADDR_VAR 0 3
4931: PUSH
4932: LD_INT 4
4934: PUSH
4935: LD_INT 5
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: ST_TO_ADDR
4942: GO 5589
4944: LD_INT 22
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4952
4950: GO 4978
4952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4953: LD_ADDR_VAR 0 3
4957: PUSH
4958: LD_INT 11
4960: PUSH
4961: LD_INT 12
4963: PUSH
4964: LD_INT 13
4966: PUSH
4967: LD_INT 14
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: ST_TO_ADDR
4976: GO 5589
4978: LD_INT 23
4980: DOUBLE
4981: EQUAL
4982: IFTRUE 4986
4984: GO 5012
4986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4987: LD_ADDR_VAR 0 3
4991: PUSH
4992: LD_INT 11
4994: PUSH
4995: LD_INT 12
4997: PUSH
4998: LD_INT 13
5000: PUSH
5001: LD_INT 14
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: ST_TO_ADDR
5010: GO 5589
5012: LD_INT 24
5014: DOUBLE
5015: EQUAL
5016: IFTRUE 5020
5018: GO 5046
5020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
5021: LD_ADDR_VAR 0 3
5025: PUSH
5026: LD_INT 11
5028: PUSH
5029: LD_INT 12
5031: PUSH
5032: LD_INT 13
5034: PUSH
5035: LD_INT 14
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: ST_TO_ADDR
5044: GO 5589
5046: LD_INT 30
5048: DOUBLE
5049: EQUAL
5050: IFTRUE 5054
5052: GO 5080
5054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: LD_INT 11
5062: PUSH
5063: LD_INT 12
5065: PUSH
5066: LD_INT 13
5068: PUSH
5069: LD_INT 14
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: ST_TO_ADDR
5078: GO 5589
5080: LD_INT 25
5082: DOUBLE
5083: EQUAL
5084: IFTRUE 5088
5086: GO 5106
5088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
5089: LD_ADDR_VAR 0 3
5093: PUSH
5094: LD_INT 13
5096: PUSH
5097: LD_INT 14
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: ST_TO_ADDR
5104: GO 5589
5106: LD_INT 27
5108: DOUBLE
5109: EQUAL
5110: IFTRUE 5114
5112: GO 5132
5114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
5115: LD_ADDR_VAR 0 3
5119: PUSH
5120: LD_INT 13
5122: PUSH
5123: LD_INT 14
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: ST_TO_ADDR
5130: GO 5589
5132: LD_EXP 21
5136: DOUBLE
5137: EQUAL
5138: IFTRUE 5142
5140: GO 5168
5142: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
5143: LD_ADDR_VAR 0 3
5147: PUSH
5148: LD_INT 11
5150: PUSH
5151: LD_INT 12
5153: PUSH
5154: LD_INT 13
5156: PUSH
5157: LD_INT 14
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: ST_TO_ADDR
5166: GO 5589
5168: LD_INT 28
5170: DOUBLE
5171: EQUAL
5172: IFTRUE 5176
5174: GO 5194
5176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
5177: LD_ADDR_VAR 0 3
5181: PUSH
5182: LD_INT 13
5184: PUSH
5185: LD_INT 14
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: ST_TO_ADDR
5192: GO 5589
5194: LD_INT 29
5196: DOUBLE
5197: EQUAL
5198: IFTRUE 5202
5200: GO 5220
5202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
5203: LD_ADDR_VAR 0 3
5207: PUSH
5208: LD_INT 13
5210: PUSH
5211: LD_INT 14
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: ST_TO_ADDR
5218: GO 5589
5220: LD_INT 31
5222: DOUBLE
5223: EQUAL
5224: IFTRUE 5228
5226: GO 5246
5228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
5229: LD_ADDR_VAR 0 3
5233: PUSH
5234: LD_INT 13
5236: PUSH
5237: LD_INT 14
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: ST_TO_ADDR
5244: GO 5589
5246: LD_INT 26
5248: DOUBLE
5249: EQUAL
5250: IFTRUE 5254
5252: GO 5272
5254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
5255: LD_ADDR_VAR 0 3
5259: PUSH
5260: LD_INT 13
5262: PUSH
5263: LD_INT 14
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: ST_TO_ADDR
5270: GO 5589
5272: LD_INT 42
5274: DOUBLE
5275: EQUAL
5276: IFTRUE 5280
5278: GO 5306
5280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
5281: LD_ADDR_VAR 0 3
5285: PUSH
5286: LD_INT 21
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_INT 23
5294: PUSH
5295: LD_INT 24
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: ST_TO_ADDR
5304: GO 5589
5306: LD_INT 43
5308: DOUBLE
5309: EQUAL
5310: IFTRUE 5314
5312: GO 5340
5314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
5315: LD_ADDR_VAR 0 3
5319: PUSH
5320: LD_INT 21
5322: PUSH
5323: LD_INT 22
5325: PUSH
5326: LD_INT 23
5328: PUSH
5329: LD_INT 24
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: LIST
5336: LIST
5337: ST_TO_ADDR
5338: GO 5589
5340: LD_INT 44
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5374
5348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
5349: LD_ADDR_VAR 0 3
5353: PUSH
5354: LD_INT 21
5356: PUSH
5357: LD_INT 22
5359: PUSH
5360: LD_INT 23
5362: PUSH
5363: LD_INT 24
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: ST_TO_ADDR
5372: GO 5589
5374: LD_INT 45
5376: DOUBLE
5377: EQUAL
5378: IFTRUE 5382
5380: GO 5408
5382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: LD_INT 21
5390: PUSH
5391: LD_INT 22
5393: PUSH
5394: LD_INT 23
5396: PUSH
5397: LD_INT 24
5399: PUSH
5400: EMPTY
5401: LIST
5402: LIST
5403: LIST
5404: LIST
5405: ST_TO_ADDR
5406: GO 5589
5408: LD_INT 49
5410: DOUBLE
5411: EQUAL
5412: IFTRUE 5416
5414: GO 5442
5416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
5417: LD_ADDR_VAR 0 3
5421: PUSH
5422: LD_INT 21
5424: PUSH
5425: LD_INT 22
5427: PUSH
5428: LD_INT 23
5430: PUSH
5431: LD_INT 24
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: ST_TO_ADDR
5440: GO 5589
5442: LD_INT 51
5444: DOUBLE
5445: EQUAL
5446: IFTRUE 5450
5448: GO 5476
5450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5451: LD_ADDR_VAR 0 3
5455: PUSH
5456: LD_INT 21
5458: PUSH
5459: LD_INT 22
5461: PUSH
5462: LD_INT 23
5464: PUSH
5465: LD_INT 24
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: ST_TO_ADDR
5474: GO 5589
5476: LD_INT 52
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5484
5482: GO 5510
5484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5485: LD_ADDR_VAR 0 3
5489: PUSH
5490: LD_INT 21
5492: PUSH
5493: LD_INT 22
5495: PUSH
5496: LD_INT 23
5498: PUSH
5499: LD_INT 24
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: ST_TO_ADDR
5508: GO 5589
5510: LD_INT 53
5512: DOUBLE
5513: EQUAL
5514: IFTRUE 5518
5516: GO 5536
5518: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5519: LD_ADDR_VAR 0 3
5523: PUSH
5524: LD_INT 23
5526: PUSH
5527: LD_INT 24
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: ST_TO_ADDR
5534: GO 5589
5536: LD_INT 46
5538: DOUBLE
5539: EQUAL
5540: IFTRUE 5544
5542: GO 5562
5544: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5545: LD_ADDR_VAR 0 3
5549: PUSH
5550: LD_INT 23
5552: PUSH
5553: LD_INT 24
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: ST_TO_ADDR
5560: GO 5589
5562: LD_INT 47
5564: DOUBLE
5565: EQUAL
5566: IFTRUE 5570
5568: GO 5588
5570: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: LD_INT 23
5578: PUSH
5579: LD_INT 24
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: ST_TO_ADDR
5586: GO 5589
5588: POP
// result := ( chassis in result ) ;
5589: LD_ADDR_VAR 0 3
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: LD_VAR 0 3
5603: IN
5604: ST_TO_ADDR
// end ;
5605: LD_VAR 0 3
5609: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5610: LD_INT 0
5612: PPUSH
5613: PPUSH
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
5618: PPUSH
// result := array ;
5619: LD_ADDR_VAR 0 5
5623: PUSH
5624: LD_VAR 0 1
5628: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5629: LD_VAR 0 1
5633: NOT
5634: PUSH
5635: LD_VAR 0 2
5639: NOT
5640: OR
5641: PUSH
5642: LD_VAR 0 3
5646: NOT
5647: OR
5648: PUSH
5649: LD_VAR 0 2
5653: PUSH
5654: LD_VAR 0 1
5658: GREATER
5659: OR
5660: PUSH
5661: LD_VAR 0 3
5665: PUSH
5666: LD_VAR 0 1
5670: GREATER
5671: OR
5672: IFFALSE 5676
// exit ;
5674: GO 5972
// if direction then
5676: LD_VAR 0 4
5680: IFFALSE 5744
// begin d := 1 ;
5682: LD_ADDR_VAR 0 9
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if i_from > i_to then
5690: LD_VAR 0 2
5694: PUSH
5695: LD_VAR 0 3
5699: GREATER
5700: IFFALSE 5726
// length := ( array - i_from ) + i_to else
5702: LD_ADDR_VAR 0 11
5706: PUSH
5707: LD_VAR 0 1
5711: PUSH
5712: LD_VAR 0 2
5716: MINUS
5717: PUSH
5718: LD_VAR 0 3
5722: PLUS
5723: ST_TO_ADDR
5724: GO 5742
// length := i_to - i_from ;
5726: LD_ADDR_VAR 0 11
5730: PUSH
5731: LD_VAR 0 3
5735: PUSH
5736: LD_VAR 0 2
5740: MINUS
5741: ST_TO_ADDR
// end else
5742: GO 5805
// begin d := - 1 ;
5744: LD_ADDR_VAR 0 9
5748: PUSH
5749: LD_INT 1
5751: NEG
5752: ST_TO_ADDR
// if i_from > i_to then
5753: LD_VAR 0 2
5757: PUSH
5758: LD_VAR 0 3
5762: GREATER
5763: IFFALSE 5783
// length := i_from - i_to else
5765: LD_ADDR_VAR 0 11
5769: PUSH
5770: LD_VAR 0 2
5774: PUSH
5775: LD_VAR 0 3
5779: MINUS
5780: ST_TO_ADDR
5781: GO 5805
// length := ( array - i_to ) + i_from ;
5783: LD_ADDR_VAR 0 11
5787: PUSH
5788: LD_VAR 0 1
5792: PUSH
5793: LD_VAR 0 3
5797: MINUS
5798: PUSH
5799: LD_VAR 0 2
5803: PLUS
5804: ST_TO_ADDR
// end ; if not length then
5805: LD_VAR 0 11
5809: NOT
5810: IFFALSE 5814
// exit ;
5812: GO 5972
// tmp := array ;
5814: LD_ADDR_VAR 0 10
5818: PUSH
5819: LD_VAR 0 1
5823: ST_TO_ADDR
// for i = 1 to length do
5824: LD_ADDR_VAR 0 6
5828: PUSH
5829: DOUBLE
5830: LD_INT 1
5832: DEC
5833: ST_TO_ADDR
5834: LD_VAR 0 11
5838: PUSH
5839: FOR_TO
5840: IFFALSE 5960
// begin for j = 1 to array do
5842: LD_ADDR_VAR 0 7
5846: PUSH
5847: DOUBLE
5848: LD_INT 1
5850: DEC
5851: ST_TO_ADDR
5852: LD_VAR 0 1
5856: PUSH
5857: FOR_TO
5858: IFFALSE 5946
// begin k := j + d ;
5860: LD_ADDR_VAR 0 8
5864: PUSH
5865: LD_VAR 0 7
5869: PUSH
5870: LD_VAR 0 9
5874: PLUS
5875: ST_TO_ADDR
// if k > array then
5876: LD_VAR 0 8
5880: PUSH
5881: LD_VAR 0 1
5885: GREATER
5886: IFFALSE 5896
// k := 1 ;
5888: LD_ADDR_VAR 0 8
5892: PUSH
5893: LD_INT 1
5895: ST_TO_ADDR
// if not k then
5896: LD_VAR 0 8
5900: NOT
5901: IFFALSE 5913
// k := array ;
5903: LD_ADDR_VAR 0 8
5907: PUSH
5908: LD_VAR 0 1
5912: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5913: LD_ADDR_VAR 0 10
5917: PUSH
5918: LD_VAR 0 10
5922: PPUSH
5923: LD_VAR 0 8
5927: PPUSH
5928: LD_VAR 0 1
5932: PUSH
5933: LD_VAR 0 7
5937: ARRAY
5938: PPUSH
5939: CALL_OW 1
5943: ST_TO_ADDR
// end ;
5944: GO 5857
5946: POP
5947: POP
// array := tmp ;
5948: LD_ADDR_VAR 0 1
5952: PUSH
5953: LD_VAR 0 10
5957: ST_TO_ADDR
// end ;
5958: GO 5839
5960: POP
5961: POP
// result := array ;
5962: LD_ADDR_VAR 0 5
5966: PUSH
5967: LD_VAR 0 1
5971: ST_TO_ADDR
// end ;
5972: LD_VAR 0 5
5976: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
// result := 0 ;
5981: LD_ADDR_VAR 0 3
5985: PUSH
5986: LD_INT 0
5988: ST_TO_ADDR
// if not array or not value in array then
5989: LD_VAR 0 1
5993: NOT
5994: PUSH
5995: LD_VAR 0 2
5999: PUSH
6000: LD_VAR 0 1
6004: IN
6005: NOT
6006: OR
6007: IFFALSE 6011
// exit ;
6009: GO 6065
// for i = 1 to array do
6011: LD_ADDR_VAR 0 4
6015: PUSH
6016: DOUBLE
6017: LD_INT 1
6019: DEC
6020: ST_TO_ADDR
6021: LD_VAR 0 1
6025: PUSH
6026: FOR_TO
6027: IFFALSE 6063
// if value = array [ i ] then
6029: LD_VAR 0 2
6033: PUSH
6034: LD_VAR 0 1
6038: PUSH
6039: LD_VAR 0 4
6043: ARRAY
6044: EQUAL
6045: IFFALSE 6061
// begin result := i ;
6047: LD_ADDR_VAR 0 3
6051: PUSH
6052: LD_VAR 0 4
6056: ST_TO_ADDR
// exit ;
6057: POP
6058: POP
6059: GO 6065
// end ;
6061: GO 6026
6063: POP
6064: POP
// end ;
6065: LD_VAR 0 3
6069: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6070: LD_INT 0
6072: PPUSH
// vc_chassis := chassis ;
6073: LD_ADDR_OWVAR 37
6077: PUSH
6078: LD_VAR 0 1
6082: ST_TO_ADDR
// vc_engine := engine ;
6083: LD_ADDR_OWVAR 39
6087: PUSH
6088: LD_VAR 0 2
6092: ST_TO_ADDR
// vc_control := control ;
6093: LD_ADDR_OWVAR 38
6097: PUSH
6098: LD_VAR 0 3
6102: ST_TO_ADDR
// vc_weapon := weapon ;
6103: LD_ADDR_OWVAR 40
6107: PUSH
6108: LD_VAR 0 4
6112: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6113: LD_ADDR_OWVAR 41
6117: PUSH
6118: LD_VAR 0 5
6122: ST_TO_ADDR
// end ;
6123: LD_VAR 0 6
6127: RET
// export function WantPlant ( unit ) ; var task ; begin
6128: LD_INT 0
6130: PPUSH
6131: PPUSH
// result := false ;
6132: LD_ADDR_VAR 0 2
6136: PUSH
6137: LD_INT 0
6139: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
6140: LD_ADDR_VAR 0 3
6144: PUSH
6145: LD_VAR 0 1
6149: PPUSH
6150: CALL_OW 437
6154: ST_TO_ADDR
// if task then
6155: LD_VAR 0 3
6159: IFFALSE 6187
// if task [ 1 ] [ 1 ] = p then
6161: LD_VAR 0 3
6165: PUSH
6166: LD_INT 1
6168: ARRAY
6169: PUSH
6170: LD_INT 1
6172: ARRAY
6173: PUSH
6174: LD_STRING p
6176: EQUAL
6177: IFFALSE 6187
// result := true ;
6179: LD_ADDR_VAR 0 2
6183: PUSH
6184: LD_INT 1
6186: ST_TO_ADDR
// end ;
6187: LD_VAR 0 2
6191: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
// if pos < 1 then
6198: LD_VAR 0 2
6202: PUSH
6203: LD_INT 1
6205: LESS
6206: IFFALSE 6210
// exit ;
6208: GO 6513
// if pos = 1 then
6210: LD_VAR 0 2
6214: PUSH
6215: LD_INT 1
6217: EQUAL
6218: IFFALSE 6251
// result := Replace ( arr , pos [ 1 ] , value ) else
6220: LD_ADDR_VAR 0 4
6224: PUSH
6225: LD_VAR 0 1
6229: PPUSH
6230: LD_VAR 0 2
6234: PUSH
6235: LD_INT 1
6237: ARRAY
6238: PPUSH
6239: LD_VAR 0 3
6243: PPUSH
6244: CALL_OW 1
6248: ST_TO_ADDR
6249: GO 6513
// begin tmp := arr ;
6251: LD_ADDR_VAR 0 6
6255: PUSH
6256: LD_VAR 0 1
6260: ST_TO_ADDR
// s_arr := [ tmp ] ;
6261: LD_ADDR_VAR 0 7
6265: PUSH
6266: LD_VAR 0 6
6270: PUSH
6271: EMPTY
6272: LIST
6273: ST_TO_ADDR
// for i = 1 to pos - 1 do
6274: LD_ADDR_VAR 0 5
6278: PUSH
6279: DOUBLE
6280: LD_INT 1
6282: DEC
6283: ST_TO_ADDR
6284: LD_VAR 0 2
6288: PUSH
6289: LD_INT 1
6291: MINUS
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6339
// begin tmp := tmp [ pos [ i ] ] ;
6296: LD_ADDR_VAR 0 6
6300: PUSH
6301: LD_VAR 0 6
6305: PUSH
6306: LD_VAR 0 2
6310: PUSH
6311: LD_VAR 0 5
6315: ARRAY
6316: ARRAY
6317: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
6318: LD_ADDR_VAR 0 7
6322: PUSH
6323: LD_VAR 0 7
6327: PUSH
6328: LD_VAR 0 6
6332: PUSH
6333: EMPTY
6334: LIST
6335: ADD
6336: ST_TO_ADDR
// end ;
6337: GO 6293
6339: POP
6340: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
6341: LD_ADDR_VAR 0 6
6345: PUSH
6346: LD_VAR 0 6
6350: PPUSH
6351: LD_VAR 0 2
6355: PUSH
6356: LD_VAR 0 2
6360: ARRAY
6361: PPUSH
6362: LD_VAR 0 3
6366: PPUSH
6367: CALL_OW 1
6371: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
6372: LD_ADDR_VAR 0 7
6376: PUSH
6377: LD_VAR 0 7
6381: PPUSH
6382: LD_VAR 0 7
6386: PPUSH
6387: LD_VAR 0 6
6391: PPUSH
6392: CALL_OW 1
6396: ST_TO_ADDR
// for i = s_arr downto 2 do
6397: LD_ADDR_VAR 0 5
6401: PUSH
6402: DOUBLE
6403: LD_VAR 0 7
6407: INC
6408: ST_TO_ADDR
6409: LD_INT 2
6411: PUSH
6412: FOR_DOWNTO
6413: IFFALSE 6497
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: LD_VAR 0 7
6424: PUSH
6425: LD_VAR 0 5
6429: PUSH
6430: LD_INT 1
6432: MINUS
6433: ARRAY
6434: PPUSH
6435: LD_VAR 0 2
6439: PUSH
6440: LD_VAR 0 5
6444: PUSH
6445: LD_INT 1
6447: MINUS
6448: ARRAY
6449: PPUSH
6450: LD_VAR 0 7
6454: PUSH
6455: LD_VAR 0 5
6459: ARRAY
6460: PPUSH
6461: CALL_OW 1
6465: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6466: LD_ADDR_VAR 0 7
6470: PUSH
6471: LD_VAR 0 7
6475: PPUSH
6476: LD_VAR 0 5
6480: PUSH
6481: LD_INT 1
6483: MINUS
6484: PPUSH
6485: LD_VAR 0 6
6489: PPUSH
6490: CALL_OW 1
6494: ST_TO_ADDR
// end ;
6495: GO 6412
6497: POP
6498: POP
// result := s_arr [ 1 ] ;
6499: LD_ADDR_VAR 0 4
6503: PUSH
6504: LD_VAR 0 7
6508: PUSH
6509: LD_INT 1
6511: ARRAY
6512: ST_TO_ADDR
// end ; end ;
6513: LD_VAR 0 4
6517: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6518: LD_INT 0
6520: PPUSH
6521: PPUSH
// if not list then
6522: LD_VAR 0 1
6526: NOT
6527: IFFALSE 6531
// exit ;
6529: GO 6622
// i := list [ pos1 ] ;
6531: LD_ADDR_VAR 0 5
6535: PUSH
6536: LD_VAR 0 1
6540: PUSH
6541: LD_VAR 0 2
6545: ARRAY
6546: ST_TO_ADDR
// if not i then
6547: LD_VAR 0 5
6551: NOT
6552: IFFALSE 6556
// exit ;
6554: GO 6622
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6556: LD_ADDR_VAR 0 1
6560: PUSH
6561: LD_VAR 0 1
6565: PPUSH
6566: LD_VAR 0 2
6570: PPUSH
6571: LD_VAR 0 1
6575: PUSH
6576: LD_VAR 0 3
6580: ARRAY
6581: PPUSH
6582: CALL_OW 1
6586: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6587: LD_ADDR_VAR 0 1
6591: PUSH
6592: LD_VAR 0 1
6596: PPUSH
6597: LD_VAR 0 3
6601: PPUSH
6602: LD_VAR 0 5
6606: PPUSH
6607: CALL_OW 1
6611: ST_TO_ADDR
// result := list ;
6612: LD_ADDR_VAR 0 4
6616: PUSH
6617: LD_VAR 0 1
6621: ST_TO_ADDR
// end ;
6622: LD_VAR 0 4
6626: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6627: LD_INT 0
6629: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6630: LD_ADDR_VAR 0 5
6634: PUSH
6635: LD_VAR 0 1
6639: PPUSH
6640: CALL_OW 250
6644: PPUSH
6645: LD_VAR 0 1
6649: PPUSH
6650: CALL_OW 251
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: LD_VAR 0 3
6664: PPUSH
6665: LD_VAR 0 4
6669: PPUSH
6670: CALL 6680 0 5
6674: ST_TO_ADDR
// end ;
6675: LD_VAR 0 5
6679: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6680: LD_INT 0
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not list then
6686: LD_VAR 0 3
6690: NOT
6691: IFFALSE 6695
// exit ;
6693: GO 7083
// result := [ ] ;
6695: LD_ADDR_VAR 0 6
6699: PUSH
6700: EMPTY
6701: ST_TO_ADDR
// for i in list do
6702: LD_ADDR_VAR 0 7
6706: PUSH
6707: LD_VAR 0 3
6711: PUSH
6712: FOR_IN
6713: IFFALSE 6915
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6715: LD_ADDR_VAR 0 9
6719: PUSH
6720: LD_VAR 0 7
6724: PPUSH
6725: LD_VAR 0 1
6729: PPUSH
6730: LD_VAR 0 2
6734: PPUSH
6735: CALL_OW 297
6739: ST_TO_ADDR
// if not result then
6740: LD_VAR 0 6
6744: NOT
6745: IFFALSE 6771
// result := [ [ i , tmp ] ] else
6747: LD_ADDR_VAR 0 6
6751: PUSH
6752: LD_VAR 0 7
6756: PUSH
6757: LD_VAR 0 9
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: ST_TO_ADDR
6769: GO 6913
// begin if result [ result ] [ 2 ] < tmp then
6771: LD_VAR 0 6
6775: PUSH
6776: LD_VAR 0 6
6780: ARRAY
6781: PUSH
6782: LD_INT 2
6784: ARRAY
6785: PUSH
6786: LD_VAR 0 9
6790: LESS
6791: IFFALSE 6833
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6793: LD_ADDR_VAR 0 6
6797: PUSH
6798: LD_VAR 0 6
6802: PPUSH
6803: LD_VAR 0 6
6807: PUSH
6808: LD_INT 1
6810: PLUS
6811: PPUSH
6812: LD_VAR 0 7
6816: PUSH
6817: LD_VAR 0 9
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PPUSH
6826: CALL_OW 2
6830: ST_TO_ADDR
6831: GO 6913
// for j = 1 to result do
6833: LD_ADDR_VAR 0 8
6837: PUSH
6838: DOUBLE
6839: LD_INT 1
6841: DEC
6842: ST_TO_ADDR
6843: LD_VAR 0 6
6847: PUSH
6848: FOR_TO
6849: IFFALSE 6911
// begin if tmp < result [ j ] [ 2 ] then
6851: LD_VAR 0 9
6855: PUSH
6856: LD_VAR 0 6
6860: PUSH
6861: LD_VAR 0 8
6865: ARRAY
6866: PUSH
6867: LD_INT 2
6869: ARRAY
6870: LESS
6871: IFFALSE 6909
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6873: LD_ADDR_VAR 0 6
6877: PUSH
6878: LD_VAR 0 6
6882: PPUSH
6883: LD_VAR 0 8
6887: PPUSH
6888: LD_VAR 0 7
6892: PUSH
6893: LD_VAR 0 9
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 2
6906: ST_TO_ADDR
// break ;
6907: GO 6911
// end ; end ;
6909: GO 6848
6911: POP
6912: POP
// end ; end ;
6913: GO 6712
6915: POP
6916: POP
// if result and not asc then
6917: LD_VAR 0 6
6921: PUSH
6922: LD_VAR 0 4
6926: NOT
6927: AND
6928: IFFALSE 7003
// begin tmp := result ;
6930: LD_ADDR_VAR 0 9
6934: PUSH
6935: LD_VAR 0 6
6939: ST_TO_ADDR
// for i = tmp downto 1 do
6940: LD_ADDR_VAR 0 7
6944: PUSH
6945: DOUBLE
6946: LD_VAR 0 9
6950: INC
6951: ST_TO_ADDR
6952: LD_INT 1
6954: PUSH
6955: FOR_DOWNTO
6956: IFFALSE 7001
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6958: LD_ADDR_VAR 0 6
6962: PUSH
6963: LD_VAR 0 6
6967: PPUSH
6968: LD_VAR 0 9
6972: PUSH
6973: LD_VAR 0 7
6977: MINUS
6978: PUSH
6979: LD_INT 1
6981: PLUS
6982: PPUSH
6983: LD_VAR 0 9
6987: PUSH
6988: LD_VAR 0 7
6992: ARRAY
6993: PPUSH
6994: CALL_OW 1
6998: ST_TO_ADDR
6999: GO 6955
7001: POP
7002: POP
// end ; tmp := [ ] ;
7003: LD_ADDR_VAR 0 9
7007: PUSH
7008: EMPTY
7009: ST_TO_ADDR
// if mode then
7010: LD_VAR 0 5
7014: IFFALSE 7083
// begin for i = 1 to result do
7016: LD_ADDR_VAR 0 7
7020: PUSH
7021: DOUBLE
7022: LD_INT 1
7024: DEC
7025: ST_TO_ADDR
7026: LD_VAR 0 6
7030: PUSH
7031: FOR_TO
7032: IFFALSE 7071
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
7034: LD_ADDR_VAR 0 9
7038: PUSH
7039: LD_VAR 0 9
7043: PPUSH
7044: LD_VAR 0 7
7048: PPUSH
7049: LD_VAR 0 6
7053: PUSH
7054: LD_VAR 0 7
7058: ARRAY
7059: PUSH
7060: LD_INT 1
7062: ARRAY
7063: PPUSH
7064: CALL_OW 1
7068: ST_TO_ADDR
7069: GO 7031
7071: POP
7072: POP
// result := tmp ;
7073: LD_ADDR_VAR 0 6
7077: PUSH
7078: LD_VAR 0 9
7082: ST_TO_ADDR
// end ; end ;
7083: LD_VAR 0 6
7087: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
7088: LD_INT 0
7090: PPUSH
7091: PPUSH
7092: PPUSH
7093: PPUSH
7094: PPUSH
7095: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
7096: LD_ADDR_VAR 0 5
7100: PUSH
7101: LD_INT 0
7103: PUSH
7104: LD_INT 0
7106: PUSH
7107: LD_INT 0
7109: PUSH
7110: EMPTY
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: ST_TO_ADDR
// if not x or not y then
7118: LD_VAR 0 2
7122: NOT
7123: PUSH
7124: LD_VAR 0 3
7128: NOT
7129: OR
7130: IFFALSE 7134
// exit ;
7132: GO 8786
// if not range then
7134: LD_VAR 0 4
7138: NOT
7139: IFFALSE 7149
// range := 10 ;
7141: LD_ADDR_VAR 0 4
7145: PUSH
7146: LD_INT 10
7148: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7149: LD_ADDR_VAR 0 8
7153: PUSH
7154: LD_INT 81
7156: PUSH
7157: LD_VAR 0 1
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: LD_INT 92
7168: PUSH
7169: LD_VAR 0 2
7173: PUSH
7174: LD_VAR 0 3
7178: PUSH
7179: LD_VAR 0 4
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: LD_INT 21
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: ST_TO_ADDR
// if not tmp then
7217: LD_VAR 0 8
7221: NOT
7222: IFFALSE 7226
// exit ;
7224: GO 8786
// for i in tmp do
7226: LD_ADDR_VAR 0 6
7230: PUSH
7231: LD_VAR 0 8
7235: PUSH
7236: FOR_IN
7237: IFFALSE 8761
// begin points := [ 0 , 0 , 0 ] ;
7239: LD_ADDR_VAR 0 9
7243: PUSH
7244: LD_INT 0
7246: PUSH
7247: LD_INT 0
7249: PUSH
7250: LD_INT 0
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: ST_TO_ADDR
// bpoints := 1 ;
7258: LD_ADDR_VAR 0 10
7262: PUSH
7263: LD_INT 1
7265: ST_TO_ADDR
// case GetType ( i ) of unit_human :
7266: LD_VAR 0 6
7270: PPUSH
7271: CALL_OW 247
7275: PUSH
7276: LD_INT 1
7278: DOUBLE
7279: EQUAL
7280: IFTRUE 7284
7282: GO 7862
7284: POP
// begin if GetClass ( i ) = 1 then
7285: LD_VAR 0 6
7289: PPUSH
7290: CALL_OW 257
7294: PUSH
7295: LD_INT 1
7297: EQUAL
7298: IFFALSE 7319
// points := [ 10 , 5 , 3 ] ;
7300: LD_ADDR_VAR 0 9
7304: PUSH
7305: LD_INT 10
7307: PUSH
7308: LD_INT 5
7310: PUSH
7311: LD_INT 3
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: LIST
7318: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
7319: LD_VAR 0 6
7323: PPUSH
7324: CALL_OW 257
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: LD_INT 4
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: IN
7343: IFFALSE 7364
// points := [ 3 , 2 , 1 ] ;
7345: LD_ADDR_VAR 0 9
7349: PUSH
7350: LD_INT 3
7352: PUSH
7353: LD_INT 2
7355: PUSH
7356: LD_INT 1
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: ST_TO_ADDR
// if GetClass ( i ) = 5 then
7364: LD_VAR 0 6
7368: PPUSH
7369: CALL_OW 257
7373: PUSH
7374: LD_INT 5
7376: EQUAL
7377: IFFALSE 7398
// points := [ 130 , 5 , 2 ] ;
7379: LD_ADDR_VAR 0 9
7383: PUSH
7384: LD_INT 130
7386: PUSH
7387: LD_INT 5
7389: PUSH
7390: LD_INT 2
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: ST_TO_ADDR
// if GetClass ( i ) = 8 then
7398: LD_VAR 0 6
7402: PPUSH
7403: CALL_OW 257
7407: PUSH
7408: LD_INT 8
7410: EQUAL
7411: IFFALSE 7432
// points := [ 35 , 35 , 30 ] ;
7413: LD_ADDR_VAR 0 9
7417: PUSH
7418: LD_INT 35
7420: PUSH
7421: LD_INT 35
7423: PUSH
7424: LD_INT 30
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7432: LD_VAR 0 6
7436: PPUSH
7437: CALL_OW 257
7441: PUSH
7442: LD_INT 9
7444: EQUAL
7445: IFFALSE 7466
// points := [ 20 , 55 , 40 ] ;
7447: LD_ADDR_VAR 0 9
7451: PUSH
7452: LD_INT 20
7454: PUSH
7455: LD_INT 55
7457: PUSH
7458: LD_INT 40
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: LIST
7465: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7466: LD_VAR 0 6
7470: PPUSH
7471: CALL_OW 257
7475: PUSH
7476: LD_INT 12
7478: PUSH
7479: LD_INT 16
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: IN
7486: IFFALSE 7507
// points := [ 5 , 3 , 2 ] ;
7488: LD_ADDR_VAR 0 9
7492: PUSH
7493: LD_INT 5
7495: PUSH
7496: LD_INT 3
7498: PUSH
7499: LD_INT 2
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7507: LD_VAR 0 6
7511: PPUSH
7512: CALL_OW 257
7516: PUSH
7517: LD_INT 17
7519: EQUAL
7520: IFFALSE 7541
// points := [ 100 , 50 , 75 ] ;
7522: LD_ADDR_VAR 0 9
7526: PUSH
7527: LD_INT 100
7529: PUSH
7530: LD_INT 50
7532: PUSH
7533: LD_INT 75
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: LIST
7540: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7541: LD_VAR 0 6
7545: PPUSH
7546: CALL_OW 257
7550: PUSH
7551: LD_INT 15
7553: EQUAL
7554: IFFALSE 7575
// points := [ 10 , 5 , 3 ] ;
7556: LD_ADDR_VAR 0 9
7560: PUSH
7561: LD_INT 10
7563: PUSH
7564: LD_INT 5
7566: PUSH
7567: LD_INT 3
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7575: LD_VAR 0 6
7579: PPUSH
7580: CALL_OW 257
7584: PUSH
7585: LD_INT 14
7587: EQUAL
7588: IFFALSE 7609
// points := [ 10 , 0 , 0 ] ;
7590: LD_ADDR_VAR 0 9
7594: PUSH
7595: LD_INT 10
7597: PUSH
7598: LD_INT 0
7600: PUSH
7601: LD_INT 0
7603: PUSH
7604: EMPTY
7605: LIST
7606: LIST
7607: LIST
7608: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7609: LD_VAR 0 6
7613: PPUSH
7614: CALL_OW 257
7618: PUSH
7619: LD_INT 11
7621: EQUAL
7622: IFFALSE 7643
// points := [ 30 , 10 , 5 ] ;
7624: LD_ADDR_VAR 0 9
7628: PUSH
7629: LD_INT 30
7631: PUSH
7632: LD_INT 10
7634: PUSH
7635: LD_INT 5
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: LIST
7642: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7643: LD_VAR 0 1
7647: PPUSH
7648: LD_INT 5
7650: PPUSH
7651: CALL_OW 321
7655: PUSH
7656: LD_INT 2
7658: EQUAL
7659: IFFALSE 7676
// bpoints := bpoints * 1.8 ;
7661: LD_ADDR_VAR 0 10
7665: PUSH
7666: LD_VAR 0 10
7670: PUSH
7671: LD_REAL  1.80000000000000E+0000
7674: MUL
7675: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7676: LD_VAR 0 6
7680: PPUSH
7681: CALL_OW 257
7685: PUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 2
7691: PUSH
7692: LD_INT 3
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: IN
7704: PUSH
7705: LD_VAR 0 1
7709: PPUSH
7710: LD_INT 51
7712: PPUSH
7713: CALL_OW 321
7717: PUSH
7718: LD_INT 2
7720: EQUAL
7721: AND
7722: IFFALSE 7739
// bpoints := bpoints * 1.2 ;
7724: LD_ADDR_VAR 0 10
7728: PUSH
7729: LD_VAR 0 10
7733: PUSH
7734: LD_REAL  1.20000000000000E+0000
7737: MUL
7738: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7739: LD_VAR 0 6
7743: PPUSH
7744: CALL_OW 257
7748: PUSH
7749: LD_INT 5
7751: PUSH
7752: LD_INT 7
7754: PUSH
7755: LD_INT 9
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: IN
7763: PUSH
7764: LD_VAR 0 1
7768: PPUSH
7769: LD_INT 52
7771: PPUSH
7772: CALL_OW 321
7776: PUSH
7777: LD_INT 2
7779: EQUAL
7780: AND
7781: IFFALSE 7798
// bpoints := bpoints * 1.5 ;
7783: LD_ADDR_VAR 0 10
7787: PUSH
7788: LD_VAR 0 10
7792: PUSH
7793: LD_REAL  1.50000000000000E+0000
7796: MUL
7797: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7798: LD_VAR 0 1
7802: PPUSH
7803: LD_INT 66
7805: PPUSH
7806: CALL_OW 321
7810: PUSH
7811: LD_INT 2
7813: EQUAL
7814: IFFALSE 7831
// bpoints := bpoints * 1.1 ;
7816: LD_ADDR_VAR 0 10
7820: PUSH
7821: LD_VAR 0 10
7825: PUSH
7826: LD_REAL  1.10000000000000E+0000
7829: MUL
7830: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7831: LD_ADDR_VAR 0 10
7835: PUSH
7836: LD_VAR 0 10
7840: PUSH
7841: LD_VAR 0 6
7845: PPUSH
7846: LD_INT 1
7848: PPUSH
7849: CALL_OW 259
7853: PUSH
7854: LD_REAL  1.15000000000000E+0000
7857: MUL
7858: MUL
7859: ST_TO_ADDR
// end ; unit_vehicle :
7860: GO 8690
7862: LD_INT 2
7864: DOUBLE
7865: EQUAL
7866: IFTRUE 7870
7868: GO 8678
7870: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7871: LD_VAR 0 6
7875: PPUSH
7876: CALL_OW 264
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 42
7886: PUSH
7887: LD_INT 24
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: LIST
7894: IN
7895: IFFALSE 7916
// points := [ 25 , 5 , 3 ] ;
7897: LD_ADDR_VAR 0 9
7901: PUSH
7902: LD_INT 25
7904: PUSH
7905: LD_INT 5
7907: PUSH
7908: LD_INT 3
7910: PUSH
7911: EMPTY
7912: LIST
7913: LIST
7914: LIST
7915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7916: LD_VAR 0 6
7920: PPUSH
7921: CALL_OW 264
7925: PUSH
7926: LD_INT 4
7928: PUSH
7929: LD_INT 43
7931: PUSH
7932: LD_INT 25
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: LIST
7939: IN
7940: IFFALSE 7961
// points := [ 40 , 15 , 5 ] ;
7942: LD_ADDR_VAR 0 9
7946: PUSH
7947: LD_INT 40
7949: PUSH
7950: LD_INT 15
7952: PUSH
7953: LD_INT 5
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7961: LD_VAR 0 6
7965: PPUSH
7966: CALL_OW 264
7970: PUSH
7971: LD_INT 3
7973: PUSH
7974: LD_INT 23
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: IN
7981: IFFALSE 8002
// points := [ 7 , 25 , 8 ] ;
7983: LD_ADDR_VAR 0 9
7987: PUSH
7988: LD_INT 7
7990: PUSH
7991: LD_INT 25
7993: PUSH
7994: LD_INT 8
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
8002: LD_VAR 0 6
8006: PPUSH
8007: CALL_OW 264
8011: PUSH
8012: LD_INT 5
8014: PUSH
8015: LD_INT 27
8017: PUSH
8018: LD_INT 44
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: IN
8026: IFFALSE 8047
// points := [ 14 , 50 , 16 ] ;
8028: LD_ADDR_VAR 0 9
8032: PUSH
8033: LD_INT 14
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: LD_INT 16
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
8047: LD_VAR 0 6
8051: PPUSH
8052: CALL_OW 264
8056: PUSH
8057: LD_INT 6
8059: PUSH
8060: LD_INT 46
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: IN
8067: IFFALSE 8088
// points := [ 32 , 120 , 70 ] ;
8069: LD_ADDR_VAR 0 9
8073: PUSH
8074: LD_INT 32
8076: PUSH
8077: LD_INT 120
8079: PUSH
8080: LD_INT 70
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
8088: LD_VAR 0 6
8092: PPUSH
8093: CALL_OW 264
8097: PUSH
8098: LD_INT 7
8100: PUSH
8101: LD_INT 28
8103: PUSH
8104: LD_INT 45
8106: PUSH
8107: LD_EXP 21
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: IN
8118: IFFALSE 8139
// points := [ 35 , 20 , 45 ] ;
8120: LD_ADDR_VAR 0 9
8124: PUSH
8125: LD_INT 35
8127: PUSH
8128: LD_INT 20
8130: PUSH
8131: LD_INT 45
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
8139: LD_VAR 0 6
8143: PPUSH
8144: CALL_OW 264
8148: PUSH
8149: LD_INT 47
8151: PUSH
8152: EMPTY
8153: LIST
8154: IN
8155: IFFALSE 8176
// points := [ 67 , 45 , 75 ] ;
8157: LD_ADDR_VAR 0 9
8161: PUSH
8162: LD_INT 67
8164: PUSH
8165: LD_INT 45
8167: PUSH
8168: LD_INT 75
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
8176: LD_VAR 0 6
8180: PPUSH
8181: CALL_OW 264
8185: PUSH
8186: LD_INT 26
8188: PUSH
8189: EMPTY
8190: LIST
8191: IN
8192: IFFALSE 8213
// points := [ 120 , 30 , 80 ] ;
8194: LD_ADDR_VAR 0 9
8198: PUSH
8199: LD_INT 120
8201: PUSH
8202: LD_INT 30
8204: PUSH
8205: LD_INT 80
8207: PUSH
8208: EMPTY
8209: LIST
8210: LIST
8211: LIST
8212: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
8213: LD_VAR 0 6
8217: PPUSH
8218: CALL_OW 264
8222: PUSH
8223: LD_INT 22
8225: PUSH
8226: EMPTY
8227: LIST
8228: IN
8229: IFFALSE 8250
// points := [ 40 , 1 , 1 ] ;
8231: LD_ADDR_VAR 0 9
8235: PUSH
8236: LD_INT 40
8238: PUSH
8239: LD_INT 1
8241: PUSH
8242: LD_INT 1
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: LIST
8249: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
8250: LD_VAR 0 6
8254: PPUSH
8255: CALL_OW 264
8259: PUSH
8260: LD_INT 29
8262: PUSH
8263: EMPTY
8264: LIST
8265: IN
8266: IFFALSE 8287
// points := [ 70 , 200 , 400 ] ;
8268: LD_ADDR_VAR 0 9
8272: PUSH
8273: LD_INT 70
8275: PUSH
8276: LD_INT 200
8278: PUSH
8279: LD_INT 400
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
8287: LD_VAR 0 6
8291: PPUSH
8292: CALL_OW 264
8296: PUSH
8297: LD_INT 14
8299: PUSH
8300: LD_INT 53
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: IN
8307: IFFALSE 8328
// points := [ 40 , 10 , 20 ] ;
8309: LD_ADDR_VAR 0 9
8313: PUSH
8314: LD_INT 40
8316: PUSH
8317: LD_INT 10
8319: PUSH
8320: LD_INT 20
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
8328: LD_VAR 0 6
8332: PPUSH
8333: CALL_OW 264
8337: PUSH
8338: LD_INT 9
8340: PUSH
8341: EMPTY
8342: LIST
8343: IN
8344: IFFALSE 8365
// points := [ 5 , 70 , 20 ] ;
8346: LD_ADDR_VAR 0 9
8350: PUSH
8351: LD_INT 5
8353: PUSH
8354: LD_INT 70
8356: PUSH
8357: LD_INT 20
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
8365: LD_VAR 0 6
8369: PPUSH
8370: CALL_OW 264
8374: PUSH
8375: LD_INT 10
8377: PUSH
8378: EMPTY
8379: LIST
8380: IN
8381: IFFALSE 8402
// points := [ 35 , 110 , 70 ] ;
8383: LD_ADDR_VAR 0 9
8387: PUSH
8388: LD_INT 35
8390: PUSH
8391: LD_INT 110
8393: PUSH
8394: LD_INT 70
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: LIST
8401: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
8402: LD_VAR 0 6
8406: PPUSH
8407: CALL_OW 265
8411: PUSH
8412: LD_INT 25
8414: EQUAL
8415: IFFALSE 8436
// points := [ 80 , 65 , 100 ] ;
8417: LD_ADDR_VAR 0 9
8421: PUSH
8422: LD_INT 80
8424: PUSH
8425: LD_INT 65
8427: PUSH
8428: LD_INT 100
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8436: LD_VAR 0 6
8440: PPUSH
8441: CALL_OW 263
8445: PUSH
8446: LD_INT 1
8448: EQUAL
8449: IFFALSE 8484
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8451: LD_ADDR_VAR 0 10
8455: PUSH
8456: LD_VAR 0 10
8460: PUSH
8461: LD_VAR 0 6
8465: PPUSH
8466: CALL_OW 311
8470: PPUSH
8471: LD_INT 3
8473: PPUSH
8474: CALL_OW 259
8478: PUSH
8479: LD_INT 4
8481: MUL
8482: MUL
8483: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8484: LD_VAR 0 6
8488: PPUSH
8489: CALL_OW 263
8493: PUSH
8494: LD_INT 2
8496: EQUAL
8497: IFFALSE 8548
// begin j := IsControledBy ( i ) ;
8499: LD_ADDR_VAR 0 7
8503: PUSH
8504: LD_VAR 0 6
8508: PPUSH
8509: CALL_OW 312
8513: ST_TO_ADDR
// if j then
8514: LD_VAR 0 7
8518: IFFALSE 8548
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8520: LD_ADDR_VAR 0 10
8524: PUSH
8525: LD_VAR 0 10
8529: PUSH
8530: LD_VAR 0 7
8534: PPUSH
8535: LD_INT 3
8537: PPUSH
8538: CALL_OW 259
8542: PUSH
8543: LD_INT 3
8545: MUL
8546: MUL
8547: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8548: LD_VAR 0 6
8552: PPUSH
8553: CALL_OW 264
8557: PUSH
8558: LD_INT 5
8560: PUSH
8561: LD_INT 6
8563: PUSH
8564: LD_INT 46
8566: PUSH
8567: LD_INT 44
8569: PUSH
8570: LD_INT 47
8572: PUSH
8573: LD_INT 45
8575: PUSH
8576: LD_INT 28
8578: PUSH
8579: LD_INT 7
8581: PUSH
8582: LD_INT 27
8584: PUSH
8585: LD_INT 29
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: IN
8600: PUSH
8601: LD_VAR 0 1
8605: PPUSH
8606: LD_INT 52
8608: PPUSH
8609: CALL_OW 321
8613: PUSH
8614: LD_INT 2
8616: EQUAL
8617: AND
8618: IFFALSE 8635
// bpoints := bpoints * 1.2 ;
8620: LD_ADDR_VAR 0 10
8624: PUSH
8625: LD_VAR 0 10
8629: PUSH
8630: LD_REAL  1.20000000000000E+0000
8633: MUL
8634: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8635: LD_VAR 0 6
8639: PPUSH
8640: CALL_OW 264
8644: PUSH
8645: LD_INT 6
8647: PUSH
8648: LD_INT 46
8650: PUSH
8651: LD_INT 47
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: IN
8659: IFFALSE 8676
// bpoints := bpoints * 1.2 ;
8661: LD_ADDR_VAR 0 10
8665: PUSH
8666: LD_VAR 0 10
8670: PUSH
8671: LD_REAL  1.20000000000000E+0000
8674: MUL
8675: ST_TO_ADDR
// end ; unit_building :
8676: GO 8690
8678: LD_INT 3
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8689
8686: POP
// ; end ;
8687: GO 8690
8689: POP
// for j = 1 to 3 do
8690: LD_ADDR_VAR 0 7
8694: PUSH
8695: DOUBLE
8696: LD_INT 1
8698: DEC
8699: ST_TO_ADDR
8700: LD_INT 3
8702: PUSH
8703: FOR_TO
8704: IFFALSE 8757
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8706: LD_ADDR_VAR 0 5
8710: PUSH
8711: LD_VAR 0 5
8715: PPUSH
8716: LD_VAR 0 7
8720: PPUSH
8721: LD_VAR 0 5
8725: PUSH
8726: LD_VAR 0 7
8730: ARRAY
8731: PUSH
8732: LD_VAR 0 9
8736: PUSH
8737: LD_VAR 0 7
8741: ARRAY
8742: PUSH
8743: LD_VAR 0 10
8747: MUL
8748: PLUS
8749: PPUSH
8750: CALL_OW 1
8754: ST_TO_ADDR
8755: GO 8703
8757: POP
8758: POP
// end ;
8759: GO 7236
8761: POP
8762: POP
// result := Replace ( result , 4 , tmp ) ;
8763: LD_ADDR_VAR 0 5
8767: PUSH
8768: LD_VAR 0 5
8772: PPUSH
8773: LD_INT 4
8775: PPUSH
8776: LD_VAR 0 8
8780: PPUSH
8781: CALL_OW 1
8785: ST_TO_ADDR
// end ;
8786: LD_VAR 0 5
8790: RET
// export function DangerAtRange ( unit , range ) ; begin
8791: LD_INT 0
8793: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8794: LD_ADDR_VAR 0 3
8798: PUSH
8799: LD_VAR 0 1
8803: PPUSH
8804: CALL_OW 255
8808: PPUSH
8809: LD_VAR 0 1
8813: PPUSH
8814: CALL_OW 250
8818: PPUSH
8819: LD_VAR 0 1
8823: PPUSH
8824: CALL_OW 251
8828: PPUSH
8829: LD_VAR 0 2
8833: PPUSH
8834: CALL 7088 0 4
8838: ST_TO_ADDR
// end ;
8839: LD_VAR 0 3
8843: RET
// export function DangerInArea ( side , area ) ; begin
8844: LD_INT 0
8846: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8847: LD_ADDR_VAR 0 3
8851: PUSH
8852: LD_VAR 0 2
8856: PPUSH
8857: LD_INT 81
8859: PUSH
8860: LD_VAR 0 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 70
8873: ST_TO_ADDR
// end ;
8874: LD_VAR 0 3
8878: RET
// export function IsExtension ( b ) ; begin
8879: LD_INT 0
8881: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: LD_VAR 0 1
8891: PUSH
8892: LD_INT 23
8894: PUSH
8895: LD_INT 20
8897: PUSH
8898: LD_INT 22
8900: PUSH
8901: LD_INT 17
8903: PUSH
8904: LD_INT 24
8906: PUSH
8907: LD_INT 21
8909: PUSH
8910: LD_INT 19
8912: PUSH
8913: LD_INT 16
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 18
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: IN
8934: ST_TO_ADDR
// end ;
8935: LD_VAR 0 2
8939: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8940: LD_INT 0
8942: PPUSH
8943: PPUSH
8944: PPUSH
// result := [ ] ;
8945: LD_ADDR_VAR 0 4
8949: PUSH
8950: EMPTY
8951: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8952: LD_ADDR_VAR 0 5
8956: PUSH
8957: LD_VAR 0 2
8961: PPUSH
8962: LD_INT 21
8964: PUSH
8965: LD_INT 3
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: PPUSH
8972: CALL_OW 70
8976: ST_TO_ADDR
// if not tmp then
8977: LD_VAR 0 5
8981: NOT
8982: IFFALSE 8986
// exit ;
8984: GO 9050
// if checkLink then
8986: LD_VAR 0 3
8990: IFFALSE 9040
// begin for i in tmp do
8992: LD_ADDR_VAR 0 6
8996: PUSH
8997: LD_VAR 0 5
9001: PUSH
9002: FOR_IN
9003: IFFALSE 9038
// if GetBase ( i ) <> base then
9005: LD_VAR 0 6
9009: PPUSH
9010: CALL_OW 274
9014: PUSH
9015: LD_VAR 0 1
9019: NONEQUAL
9020: IFFALSE 9036
// ComLinkToBase ( base , i ) ;
9022: LD_VAR 0 1
9026: PPUSH
9027: LD_VAR 0 6
9031: PPUSH
9032: CALL_OW 169
9036: GO 9002
9038: POP
9039: POP
// end ; result := tmp ;
9040: LD_ADDR_VAR 0 4
9044: PUSH
9045: LD_VAR 0 5
9049: ST_TO_ADDR
// end ;
9050: LD_VAR 0 4
9054: RET
// export function ComComplete ( units , b ) ; var i ; begin
9055: LD_INT 0
9057: PPUSH
9058: PPUSH
// if not units then
9059: LD_VAR 0 1
9063: NOT
9064: IFFALSE 9068
// exit ;
9066: GO 9158
// for i in units do
9068: LD_ADDR_VAR 0 4
9072: PUSH
9073: LD_VAR 0 1
9077: PUSH
9078: FOR_IN
9079: IFFALSE 9156
// if BuildingStatus ( b ) = bs_build then
9081: LD_VAR 0 2
9085: PPUSH
9086: CALL_OW 461
9090: PUSH
9091: LD_INT 1
9093: EQUAL
9094: IFFALSE 9154
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
9096: LD_VAR 0 4
9100: PPUSH
9101: LD_STRING h
9103: PUSH
9104: LD_VAR 0 2
9108: PPUSH
9109: CALL_OW 250
9113: PUSH
9114: LD_VAR 0 2
9118: PPUSH
9119: CALL_OW 251
9123: PUSH
9124: LD_VAR 0 2
9128: PUSH
9129: LD_INT 0
9131: PUSH
9132: LD_INT 0
9134: PUSH
9135: LD_INT 0
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: PUSH
9147: EMPTY
9148: LIST
9149: PPUSH
9150: CALL_OW 446
9154: GO 9078
9156: POP
9157: POP
// end ;
9158: LD_VAR 0 3
9162: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
9163: LD_INT 0
9165: PPUSH
9166: PPUSH
9167: PPUSH
9168: PPUSH
9169: PPUSH
9170: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
9171: LD_VAR 0 1
9175: NOT
9176: PUSH
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 263
9186: PUSH
9187: LD_INT 2
9189: NONEQUAL
9190: OR
9191: IFFALSE 9195
// exit ;
9193: GO 9511
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
9195: LD_ADDR_VAR 0 6
9199: PUSH
9200: LD_INT 22
9202: PUSH
9203: LD_VAR 0 1
9207: PPUSH
9208: CALL_OW 255
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 2
9219: PUSH
9220: LD_INT 30
9222: PUSH
9223: LD_INT 36
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 34
9232: PUSH
9233: LD_INT 31
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 69
9253: ST_TO_ADDR
// if not tmp then
9254: LD_VAR 0 6
9258: NOT
9259: IFFALSE 9263
// exit ;
9261: GO 9511
// result := [ ] ;
9263: LD_ADDR_VAR 0 2
9267: PUSH
9268: EMPTY
9269: ST_TO_ADDR
// for i in tmp do
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: LD_VAR 0 6
9279: PUSH
9280: FOR_IN
9281: IFFALSE 9352
// begin t := UnitsInside ( i ) ;
9283: LD_ADDR_VAR 0 4
9287: PUSH
9288: LD_VAR 0 3
9292: PPUSH
9293: CALL_OW 313
9297: ST_TO_ADDR
// if t then
9298: LD_VAR 0 4
9302: IFFALSE 9350
// for j in t do
9304: LD_ADDR_VAR 0 7
9308: PUSH
9309: LD_VAR 0 4
9313: PUSH
9314: FOR_IN
9315: IFFALSE 9348
// result := Replace ( result , result + 1 , j ) ;
9317: LD_ADDR_VAR 0 2
9321: PUSH
9322: LD_VAR 0 2
9326: PPUSH
9327: LD_VAR 0 2
9331: PUSH
9332: LD_INT 1
9334: PLUS
9335: PPUSH
9336: LD_VAR 0 7
9340: PPUSH
9341: CALL_OW 1
9345: ST_TO_ADDR
9346: GO 9314
9348: POP
9349: POP
// end ;
9350: GO 9280
9352: POP
9353: POP
// if not result then
9354: LD_VAR 0 2
9358: NOT
9359: IFFALSE 9363
// exit ;
9361: GO 9511
// mech := result [ 1 ] ;
9363: LD_ADDR_VAR 0 5
9367: PUSH
9368: LD_VAR 0 2
9372: PUSH
9373: LD_INT 1
9375: ARRAY
9376: ST_TO_ADDR
// if result > 1 then
9377: LD_VAR 0 2
9381: PUSH
9382: LD_INT 1
9384: GREATER
9385: IFFALSE 9497
// begin for i = 2 to result do
9387: LD_ADDR_VAR 0 3
9391: PUSH
9392: DOUBLE
9393: LD_INT 2
9395: DEC
9396: ST_TO_ADDR
9397: LD_VAR 0 2
9401: PUSH
9402: FOR_TO
9403: IFFALSE 9495
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
9405: LD_ADDR_VAR 0 4
9409: PUSH
9410: LD_VAR 0 2
9414: PUSH
9415: LD_VAR 0 3
9419: ARRAY
9420: PPUSH
9421: LD_INT 3
9423: PPUSH
9424: CALL_OW 259
9428: PUSH
9429: LD_VAR 0 2
9433: PUSH
9434: LD_VAR 0 3
9438: ARRAY
9439: PPUSH
9440: CALL_OW 432
9444: MINUS
9445: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9446: LD_VAR 0 4
9450: PUSH
9451: LD_VAR 0 5
9455: PPUSH
9456: LD_INT 3
9458: PPUSH
9459: CALL_OW 259
9463: PUSH
9464: LD_VAR 0 5
9468: PPUSH
9469: CALL_OW 432
9473: MINUS
9474: GREATEREQUAL
9475: IFFALSE 9493
// mech := result [ i ] ;
9477: LD_ADDR_VAR 0 5
9481: PUSH
9482: LD_VAR 0 2
9486: PUSH
9487: LD_VAR 0 3
9491: ARRAY
9492: ST_TO_ADDR
// end ;
9493: GO 9402
9495: POP
9496: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_VAR 0 5
9506: PPUSH
9507: CALL_OW 135
// end ;
9511: LD_VAR 0 2
9515: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9516: LD_INT 0
9518: PPUSH
9519: PPUSH
9520: PPUSH
9521: PPUSH
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
// result := [ ] ;
9531: LD_ADDR_VAR 0 7
9535: PUSH
9536: EMPTY
9537: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9538: LD_VAR 0 1
9542: PPUSH
9543: CALL_OW 266
9547: PUSH
9548: LD_INT 0
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: IN
9558: NOT
9559: IFFALSE 9563
// exit ;
9561: GO 11197
// if name then
9563: LD_VAR 0 3
9567: IFFALSE 9583
// SetBName ( base_dep , name ) ;
9569: LD_VAR 0 1
9573: PPUSH
9574: LD_VAR 0 3
9578: PPUSH
9579: CALL_OW 500
// base := GetBase ( base_dep ) ;
9583: LD_ADDR_VAR 0 15
9587: PUSH
9588: LD_VAR 0 1
9592: PPUSH
9593: CALL_OW 274
9597: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9598: LD_ADDR_VAR 0 16
9602: PUSH
9603: LD_VAR 0 1
9607: PPUSH
9608: CALL_OW 255
9612: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9613: LD_ADDR_VAR 0 17
9617: PUSH
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 248
9627: ST_TO_ADDR
// if sources then
9628: LD_VAR 0 5
9632: IFFALSE 9679
// for i = 1 to 3 do
9634: LD_ADDR_VAR 0 8
9638: PUSH
9639: DOUBLE
9640: LD_INT 1
9642: DEC
9643: ST_TO_ADDR
9644: LD_INT 3
9646: PUSH
9647: FOR_TO
9648: IFFALSE 9677
// AddResourceType ( base , i , sources [ i ] ) ;
9650: LD_VAR 0 15
9654: PPUSH
9655: LD_VAR 0 8
9659: PPUSH
9660: LD_VAR 0 5
9664: PUSH
9665: LD_VAR 0 8
9669: ARRAY
9670: PPUSH
9671: CALL_OW 276
9675: GO 9647
9677: POP
9678: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9679: LD_ADDR_VAR 0 18
9683: PUSH
9684: LD_VAR 0 15
9688: PPUSH
9689: LD_VAR 0 2
9693: PPUSH
9694: LD_INT 1
9696: PPUSH
9697: CALL 8940 0 3
9701: ST_TO_ADDR
// InitHc ;
9702: CALL_OW 19
// InitUc ;
9706: CALL_OW 18
// uc_side := side ;
9710: LD_ADDR_OWVAR 20
9714: PUSH
9715: LD_VAR 0 16
9719: ST_TO_ADDR
// uc_nation := nation ;
9720: LD_ADDR_OWVAR 21
9724: PUSH
9725: LD_VAR 0 17
9729: ST_TO_ADDR
// if buildings then
9730: LD_VAR 0 18
9734: IFFALSE 11056
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9736: LD_ADDR_VAR 0 19
9740: PUSH
9741: LD_VAR 0 18
9745: PPUSH
9746: LD_INT 2
9748: PUSH
9749: LD_INT 30
9751: PUSH
9752: LD_INT 29
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 30
9761: PUSH
9762: LD_INT 30
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: PPUSH
9774: CALL_OW 72
9778: ST_TO_ADDR
// if tmp then
9779: LD_VAR 0 19
9783: IFFALSE 9831
// for i in tmp do
9785: LD_ADDR_VAR 0 8
9789: PUSH
9790: LD_VAR 0 19
9794: PUSH
9795: FOR_IN
9796: IFFALSE 9829
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9798: LD_VAR 0 8
9802: PPUSH
9803: CALL_OW 250
9807: PPUSH
9808: LD_VAR 0 8
9812: PPUSH
9813: CALL_OW 251
9817: PPUSH
9818: LD_VAR 0 16
9822: PPUSH
9823: CALL_OW 441
9827: GO 9795
9829: POP
9830: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9831: LD_VAR 0 18
9835: PPUSH
9836: LD_INT 2
9838: PUSH
9839: LD_INT 30
9841: PUSH
9842: LD_INT 32
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: PUSH
9849: LD_INT 30
9851: PUSH
9852: LD_INT 33
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: LIST
9863: PPUSH
9864: CALL_OW 72
9868: IFFALSE 9956
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9870: LD_ADDR_VAR 0 8
9874: PUSH
9875: LD_VAR 0 18
9879: PPUSH
9880: LD_INT 2
9882: PUSH
9883: LD_INT 30
9885: PUSH
9886: LD_INT 32
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 30
9895: PUSH
9896: LD_INT 33
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: LIST
9907: PPUSH
9908: CALL_OW 72
9912: PUSH
9913: FOR_IN
9914: IFFALSE 9954
// begin if not GetBWeapon ( i ) then
9916: LD_VAR 0 8
9920: PPUSH
9921: CALL_OW 269
9925: NOT
9926: IFFALSE 9952
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9928: LD_VAR 0 8
9932: PPUSH
9933: LD_VAR 0 8
9937: PPUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL 11202 0 2
9947: PPUSH
9948: CALL_OW 431
// end ;
9952: GO 9913
9954: POP
9955: POP
// end ; for i = 1 to personel do
9956: LD_ADDR_VAR 0 8
9960: PUSH
9961: DOUBLE
9962: LD_INT 1
9964: DEC
9965: ST_TO_ADDR
9966: LD_VAR 0 6
9970: PUSH
9971: FOR_TO
9972: IFFALSE 11036
// begin if i > 4 then
9974: LD_VAR 0 8
9978: PUSH
9979: LD_INT 4
9981: GREATER
9982: IFFALSE 9986
// break ;
9984: GO 11036
// case i of 1 :
9986: LD_VAR 0 8
9990: PUSH
9991: LD_INT 1
9993: DOUBLE
9994: EQUAL
9995: IFTRUE 9999
9997: GO 10079
9999: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
10000: LD_ADDR_VAR 0 12
10004: PUSH
10005: LD_VAR 0 18
10009: PPUSH
10010: LD_INT 22
10012: PUSH
10013: LD_VAR 0 16
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 58
10024: PUSH
10025: EMPTY
10026: LIST
10027: PUSH
10028: LD_INT 2
10030: PUSH
10031: LD_INT 30
10033: PUSH
10034: LD_INT 32
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 30
10043: PUSH
10044: LD_INT 4
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 30
10053: PUSH
10054: LD_INT 5
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 72
10076: ST_TO_ADDR
10077: GO 10301
10079: LD_INT 2
10081: DOUBLE
10082: EQUAL
10083: IFTRUE 10087
10085: GO 10149
10087: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
10088: LD_ADDR_VAR 0 12
10092: PUSH
10093: LD_VAR 0 18
10097: PPUSH
10098: LD_INT 22
10100: PUSH
10101: LD_VAR 0 16
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 2
10112: PUSH
10113: LD_INT 30
10115: PUSH
10116: LD_INT 0
10118: PUSH
10119: EMPTY
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 30
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: EMPTY
10130: LIST
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: EMPTY
10139: LIST
10140: LIST
10141: PPUSH
10142: CALL_OW 72
10146: ST_TO_ADDR
10147: GO 10301
10149: LD_INT 3
10151: DOUBLE
10152: EQUAL
10153: IFTRUE 10157
10155: GO 10219
10157: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
10158: LD_ADDR_VAR 0 12
10162: PUSH
10163: LD_VAR 0 18
10167: PPUSH
10168: LD_INT 22
10170: PUSH
10171: LD_VAR 0 16
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: LD_INT 30
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: LD_INT 30
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: EMPTY
10200: LIST
10201: LIST
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: LIST
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PPUSH
10212: CALL_OW 72
10216: ST_TO_ADDR
10217: GO 10301
10219: LD_INT 4
10221: DOUBLE
10222: EQUAL
10223: IFTRUE 10227
10225: GO 10300
10227: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
10228: LD_ADDR_VAR 0 12
10232: PUSH
10233: LD_VAR 0 18
10237: PPUSH
10238: LD_INT 22
10240: PUSH
10241: LD_VAR 0 16
10245: PUSH
10246: EMPTY
10247: LIST
10248: LIST
10249: PUSH
10250: LD_INT 2
10252: PUSH
10253: LD_INT 30
10255: PUSH
10256: LD_INT 6
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 30
10265: PUSH
10266: LD_INT 7
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: LD_INT 30
10275: PUSH
10276: LD_INT 8
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PPUSH
10293: CALL_OW 72
10297: ST_TO_ADDR
10298: GO 10301
10300: POP
// if i = 1 then
10301: LD_VAR 0 8
10305: PUSH
10306: LD_INT 1
10308: EQUAL
10309: IFFALSE 10420
// begin tmp := [ ] ;
10311: LD_ADDR_VAR 0 19
10315: PUSH
10316: EMPTY
10317: ST_TO_ADDR
// for j in f do
10318: LD_ADDR_VAR 0 9
10322: PUSH
10323: LD_VAR 0 12
10327: PUSH
10328: FOR_IN
10329: IFFALSE 10402
// if GetBType ( j ) = b_bunker then
10331: LD_VAR 0 9
10335: PPUSH
10336: CALL_OW 266
10340: PUSH
10341: LD_INT 32
10343: EQUAL
10344: IFFALSE 10371
// tmp := Insert ( tmp , 1 , j ) else
10346: LD_ADDR_VAR 0 19
10350: PUSH
10351: LD_VAR 0 19
10355: PPUSH
10356: LD_INT 1
10358: PPUSH
10359: LD_VAR 0 9
10363: PPUSH
10364: CALL_OW 2
10368: ST_TO_ADDR
10369: GO 10400
// tmp := Insert ( tmp , tmp + 1 , j ) ;
10371: LD_ADDR_VAR 0 19
10375: PUSH
10376: LD_VAR 0 19
10380: PPUSH
10381: LD_VAR 0 19
10385: PUSH
10386: LD_INT 1
10388: PLUS
10389: PPUSH
10390: LD_VAR 0 9
10394: PPUSH
10395: CALL_OW 2
10399: ST_TO_ADDR
10400: GO 10328
10402: POP
10403: POP
// if tmp then
10404: LD_VAR 0 19
10408: IFFALSE 10420
// f := tmp ;
10410: LD_ADDR_VAR 0 12
10414: PUSH
10415: LD_VAR 0 19
10419: ST_TO_ADDR
// end ; x := personel [ i ] ;
10420: LD_ADDR_VAR 0 13
10424: PUSH
10425: LD_VAR 0 6
10429: PUSH
10430: LD_VAR 0 8
10434: ARRAY
10435: ST_TO_ADDR
// if x = - 1 then
10436: LD_VAR 0 13
10440: PUSH
10441: LD_INT 1
10443: NEG
10444: EQUAL
10445: IFFALSE 10654
// begin for j in f do
10447: LD_ADDR_VAR 0 9
10451: PUSH
10452: LD_VAR 0 12
10456: PUSH
10457: FOR_IN
10458: IFFALSE 10650
// repeat InitHc ;
10460: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10464: LD_VAR 0 9
10468: PPUSH
10469: CALL_OW 266
10473: PUSH
10474: LD_INT 5
10476: EQUAL
10477: IFFALSE 10547
// begin if UnitsInside ( j ) < 3 then
10479: LD_VAR 0 9
10483: PPUSH
10484: CALL_OW 313
10488: PUSH
10489: LD_INT 3
10491: LESS
10492: IFFALSE 10528
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10494: LD_INT 0
10496: PPUSH
10497: LD_INT 5
10499: PUSH
10500: LD_INT 8
10502: PUSH
10503: LD_INT 9
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: LD_VAR 0 17
10515: ARRAY
10516: PPUSH
10517: LD_VAR 0 4
10521: PPUSH
10522: CALL_OW 380
10526: GO 10545
// PrepareHuman ( false , i , skill ) ;
10528: LD_INT 0
10530: PPUSH
10531: LD_VAR 0 8
10535: PPUSH
10536: LD_VAR 0 4
10540: PPUSH
10541: CALL_OW 380
// end else
10545: GO 10564
// PrepareHuman ( false , i , skill ) ;
10547: LD_INT 0
10549: PPUSH
10550: LD_VAR 0 8
10554: PPUSH
10555: LD_VAR 0 4
10559: PPUSH
10560: CALL_OW 380
// un := CreateHuman ;
10564: LD_ADDR_VAR 0 14
10568: PUSH
10569: CALL_OW 44
10573: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10574: LD_ADDR_VAR 0 7
10578: PUSH
10579: LD_VAR 0 7
10583: PPUSH
10584: LD_INT 1
10586: PPUSH
10587: LD_VAR 0 14
10591: PPUSH
10592: CALL_OW 2
10596: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10597: LD_VAR 0 14
10601: PPUSH
10602: LD_VAR 0 9
10606: PPUSH
10607: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10611: LD_VAR 0 9
10615: PPUSH
10616: CALL_OW 313
10620: PUSH
10621: LD_INT 6
10623: EQUAL
10624: PUSH
10625: LD_VAR 0 9
10629: PPUSH
10630: CALL_OW 266
10634: PUSH
10635: LD_INT 32
10637: PUSH
10638: LD_INT 31
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: IN
10645: OR
10646: IFFALSE 10460
10648: GO 10457
10650: POP
10651: POP
// end else
10652: GO 11034
// for j = 1 to x do
10654: LD_ADDR_VAR 0 9
10658: PUSH
10659: DOUBLE
10660: LD_INT 1
10662: DEC
10663: ST_TO_ADDR
10664: LD_VAR 0 13
10668: PUSH
10669: FOR_TO
10670: IFFALSE 11032
// begin InitHc ;
10672: CALL_OW 19
// if not f then
10676: LD_VAR 0 12
10680: NOT
10681: IFFALSE 10770
// begin PrepareHuman ( false , i , skill ) ;
10683: LD_INT 0
10685: PPUSH
10686: LD_VAR 0 8
10690: PPUSH
10691: LD_VAR 0 4
10695: PPUSH
10696: CALL_OW 380
// un := CreateHuman ;
10700: LD_ADDR_VAR 0 14
10704: PUSH
10705: CALL_OW 44
10709: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10710: LD_ADDR_VAR 0 7
10714: PUSH
10715: LD_VAR 0 7
10719: PPUSH
10720: LD_INT 1
10722: PPUSH
10723: LD_VAR 0 14
10727: PPUSH
10728: CALL_OW 2
10732: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10733: LD_VAR 0 14
10737: PPUSH
10738: LD_VAR 0 1
10742: PPUSH
10743: CALL_OW 250
10747: PPUSH
10748: LD_VAR 0 1
10752: PPUSH
10753: CALL_OW 251
10757: PPUSH
10758: LD_INT 10
10760: PPUSH
10761: LD_INT 0
10763: PPUSH
10764: CALL_OW 50
// continue ;
10768: GO 10669
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10770: LD_VAR 0 12
10774: PUSH
10775: LD_INT 1
10777: ARRAY
10778: PPUSH
10779: CALL_OW 313
10783: PUSH
10784: LD_VAR 0 12
10788: PUSH
10789: LD_INT 1
10791: ARRAY
10792: PPUSH
10793: CALL_OW 266
10797: PUSH
10798: LD_INT 32
10800: PUSH
10801: LD_INT 31
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: IN
10808: AND
10809: PUSH
10810: LD_VAR 0 12
10814: PUSH
10815: LD_INT 1
10817: ARRAY
10818: PPUSH
10819: CALL_OW 313
10823: PUSH
10824: LD_INT 6
10826: EQUAL
10827: OR
10828: IFFALSE 10848
// f := Delete ( f , 1 ) ;
10830: LD_ADDR_VAR 0 12
10834: PUSH
10835: LD_VAR 0 12
10839: PPUSH
10840: LD_INT 1
10842: PPUSH
10843: CALL_OW 3
10847: ST_TO_ADDR
// if not f then
10848: LD_VAR 0 12
10852: NOT
10853: IFFALSE 10871
// begin x := x + 2 ;
10855: LD_ADDR_VAR 0 13
10859: PUSH
10860: LD_VAR 0 13
10864: PUSH
10865: LD_INT 2
10867: PLUS
10868: ST_TO_ADDR
// continue ;
10869: GO 10669
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10871: LD_VAR 0 12
10875: PUSH
10876: LD_INT 1
10878: ARRAY
10879: PPUSH
10880: CALL_OW 266
10884: PUSH
10885: LD_INT 5
10887: EQUAL
10888: IFFALSE 10962
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10890: LD_VAR 0 12
10894: PUSH
10895: LD_INT 1
10897: ARRAY
10898: PPUSH
10899: CALL_OW 313
10903: PUSH
10904: LD_INT 3
10906: LESS
10907: IFFALSE 10943
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10909: LD_INT 0
10911: PPUSH
10912: LD_INT 5
10914: PUSH
10915: LD_INT 8
10917: PUSH
10918: LD_INT 9
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: PUSH
10926: LD_VAR 0 17
10930: ARRAY
10931: PPUSH
10932: LD_VAR 0 4
10936: PPUSH
10937: CALL_OW 380
10941: GO 10960
// PrepareHuman ( false , i , skill ) ;
10943: LD_INT 0
10945: PPUSH
10946: LD_VAR 0 8
10950: PPUSH
10951: LD_VAR 0 4
10955: PPUSH
10956: CALL_OW 380
// end else
10960: GO 10979
// PrepareHuman ( false , i , skill ) ;
10962: LD_INT 0
10964: PPUSH
10965: LD_VAR 0 8
10969: PPUSH
10970: LD_VAR 0 4
10974: PPUSH
10975: CALL_OW 380
// un := CreateHuman ;
10979: LD_ADDR_VAR 0 14
10983: PUSH
10984: CALL_OW 44
10988: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10989: LD_ADDR_VAR 0 7
10993: PUSH
10994: LD_VAR 0 7
10998: PPUSH
10999: LD_INT 1
11001: PPUSH
11002: LD_VAR 0 14
11006: PPUSH
11007: CALL_OW 2
11011: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
11012: LD_VAR 0 14
11016: PPUSH
11017: LD_VAR 0 12
11021: PUSH
11022: LD_INT 1
11024: ARRAY
11025: PPUSH
11026: CALL_OW 52
// end ;
11030: GO 10669
11032: POP
11033: POP
// end ;
11034: GO 9971
11036: POP
11037: POP
// result := result ^ buildings ;
11038: LD_ADDR_VAR 0 7
11042: PUSH
11043: LD_VAR 0 7
11047: PUSH
11048: LD_VAR 0 18
11052: ADD
11053: ST_TO_ADDR
// end else
11054: GO 11197
// begin for i = 1 to personel do
11056: LD_ADDR_VAR 0 8
11060: PUSH
11061: DOUBLE
11062: LD_INT 1
11064: DEC
11065: ST_TO_ADDR
11066: LD_VAR 0 6
11070: PUSH
11071: FOR_TO
11072: IFFALSE 11195
// begin if i > 4 then
11074: LD_VAR 0 8
11078: PUSH
11079: LD_INT 4
11081: GREATER
11082: IFFALSE 11086
// break ;
11084: GO 11195
// x := personel [ i ] ;
11086: LD_ADDR_VAR 0 13
11090: PUSH
11091: LD_VAR 0 6
11095: PUSH
11096: LD_VAR 0 8
11100: ARRAY
11101: ST_TO_ADDR
// if x = - 1 then
11102: LD_VAR 0 13
11106: PUSH
11107: LD_INT 1
11109: NEG
11110: EQUAL
11111: IFFALSE 11115
// continue ;
11113: GO 11071
// PrepareHuman ( false , i , skill ) ;
11115: LD_INT 0
11117: PPUSH
11118: LD_VAR 0 8
11122: PPUSH
11123: LD_VAR 0 4
11127: PPUSH
11128: CALL_OW 380
// un := CreateHuman ;
11132: LD_ADDR_VAR 0 14
11136: PUSH
11137: CALL_OW 44
11141: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
11142: LD_VAR 0 14
11146: PPUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 250
11156: PPUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 251
11166: PPUSH
11167: LD_INT 10
11169: PPUSH
11170: LD_INT 0
11172: PPUSH
11173: CALL_OW 50
// result := result ^ un ;
11177: LD_ADDR_VAR 0 7
11181: PUSH
11182: LD_VAR 0 7
11186: PUSH
11187: LD_VAR 0 14
11191: ADD
11192: ST_TO_ADDR
// end ;
11193: GO 11071
11195: POP
11196: POP
// end ; end ;
11197: LD_VAR 0 7
11201: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
11202: LD_INT 0
11204: PPUSH
11205: PPUSH
11206: PPUSH
11207: PPUSH
11208: PPUSH
11209: PPUSH
11210: PPUSH
11211: PPUSH
11212: PPUSH
11213: PPUSH
11214: PPUSH
11215: PPUSH
11216: PPUSH
11217: PPUSH
11218: PPUSH
11219: PPUSH
// result := false ;
11220: LD_ADDR_VAR 0 3
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
11228: LD_VAR 0 1
11232: NOT
11233: PUSH
11234: LD_VAR 0 1
11238: PPUSH
11239: CALL_OW 266
11243: PUSH
11244: LD_INT 32
11246: PUSH
11247: LD_INT 33
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: IN
11254: NOT
11255: OR
11256: IFFALSE 11260
// exit ;
11258: GO 12369
// nat := GetNation ( tower ) ;
11260: LD_ADDR_VAR 0 12
11264: PUSH
11265: LD_VAR 0 1
11269: PPUSH
11270: CALL_OW 248
11274: ST_TO_ADDR
// side := GetSide ( tower ) ;
11275: LD_ADDR_VAR 0 16
11279: PUSH
11280: LD_VAR 0 1
11284: PPUSH
11285: CALL_OW 255
11289: ST_TO_ADDR
// x := GetX ( tower ) ;
11290: LD_ADDR_VAR 0 10
11294: PUSH
11295: LD_VAR 0 1
11299: PPUSH
11300: CALL_OW 250
11304: ST_TO_ADDR
// y := GetY ( tower ) ;
11305: LD_ADDR_VAR 0 11
11309: PUSH
11310: LD_VAR 0 1
11314: PPUSH
11315: CALL_OW 251
11319: ST_TO_ADDR
// if not x or not y then
11320: LD_VAR 0 10
11324: NOT
11325: PUSH
11326: LD_VAR 0 11
11330: NOT
11331: OR
11332: IFFALSE 11336
// exit ;
11334: GO 12369
// weapon := 0 ;
11336: LD_ADDR_VAR 0 18
11340: PUSH
11341: LD_INT 0
11343: ST_TO_ADDR
// fac_list := [ ] ;
11344: LD_ADDR_VAR 0 17
11348: PUSH
11349: EMPTY
11350: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
11351: LD_ADDR_VAR 0 6
11355: PUSH
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 274
11365: PPUSH
11366: LD_VAR 0 2
11370: PPUSH
11371: LD_INT 0
11373: PPUSH
11374: CALL 8940 0 3
11378: PPUSH
11379: LD_INT 30
11381: PUSH
11382: LD_INT 3
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 72
11393: ST_TO_ADDR
// if not factories then
11394: LD_VAR 0 6
11398: NOT
11399: IFFALSE 11403
// exit ;
11401: GO 12369
// for i in factories do
11403: LD_ADDR_VAR 0 8
11407: PUSH
11408: LD_VAR 0 6
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11439
// fac_list := fac_list union AvailableWeaponList ( i ) ;
11416: LD_ADDR_VAR 0 17
11420: PUSH
11421: LD_VAR 0 17
11425: PUSH
11426: LD_VAR 0 8
11430: PPUSH
11431: CALL_OW 478
11435: UNION
11436: ST_TO_ADDR
11437: GO 11413
11439: POP
11440: POP
// if not fac_list then
11441: LD_VAR 0 17
11445: NOT
11446: IFFALSE 11450
// exit ;
11448: GO 12369
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11450: LD_ADDR_VAR 0 5
11454: PUSH
11455: LD_INT 4
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: LD_INT 9
11463: PUSH
11464: LD_INT 10
11466: PUSH
11467: LD_INT 6
11469: PUSH
11470: LD_INT 7
11472: PUSH
11473: LD_INT 11
11475: PUSH
11476: EMPTY
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 27
11487: PUSH
11488: LD_INT 28
11490: PUSH
11491: LD_INT 26
11493: PUSH
11494: LD_INT 30
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 43
11505: PUSH
11506: LD_INT 44
11508: PUSH
11509: LD_INT 46
11511: PUSH
11512: LD_INT 45
11514: PUSH
11515: LD_INT 47
11517: PUSH
11518: LD_INT 49
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: LD_VAR 0 12
11538: ARRAY
11539: ST_TO_ADDR
// list := list isect fac_list ;
11540: LD_ADDR_VAR 0 5
11544: PUSH
11545: LD_VAR 0 5
11549: PUSH
11550: LD_VAR 0 17
11554: ISECT
11555: ST_TO_ADDR
// if not list then
11556: LD_VAR 0 5
11560: NOT
11561: IFFALSE 11565
// exit ;
11563: GO 12369
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11565: LD_VAR 0 12
11569: PUSH
11570: LD_INT 3
11572: EQUAL
11573: PUSH
11574: LD_INT 49
11576: PUSH
11577: LD_VAR 0 5
11581: IN
11582: AND
11583: PUSH
11584: LD_INT 31
11586: PPUSH
11587: LD_VAR 0 16
11591: PPUSH
11592: CALL_OW 321
11596: PUSH
11597: LD_INT 2
11599: EQUAL
11600: AND
11601: IFFALSE 11661
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11603: LD_INT 22
11605: PUSH
11606: LD_VAR 0 16
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 35
11617: PUSH
11618: LD_INT 49
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PUSH
11625: LD_INT 91
11627: PUSH
11628: LD_VAR 0 1
11632: PUSH
11633: LD_INT 10
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: LIST
11645: PPUSH
11646: CALL_OW 69
11650: NOT
11651: IFFALSE 11661
// weapon := ru_time_lapser ;
11653: LD_ADDR_VAR 0 18
11657: PUSH
11658: LD_INT 49
11660: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11661: LD_VAR 0 12
11665: PUSH
11666: LD_INT 1
11668: PUSH
11669: LD_INT 2
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: IN
11676: PUSH
11677: LD_INT 11
11679: PUSH
11680: LD_VAR 0 5
11684: IN
11685: PUSH
11686: LD_INT 30
11688: PUSH
11689: LD_VAR 0 5
11693: IN
11694: OR
11695: AND
11696: PUSH
11697: LD_INT 6
11699: PPUSH
11700: LD_VAR 0 16
11704: PPUSH
11705: CALL_OW 321
11709: PUSH
11710: LD_INT 2
11712: EQUAL
11713: AND
11714: IFFALSE 11879
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11716: LD_INT 22
11718: PUSH
11719: LD_VAR 0 16
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 2
11730: PUSH
11731: LD_INT 35
11733: PUSH
11734: LD_INT 11
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 35
11743: PUSH
11744: LD_INT 30
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 91
11758: PUSH
11759: LD_VAR 0 1
11763: PUSH
11764: LD_INT 18
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: PPUSH
11777: CALL_OW 69
11781: NOT
11782: PUSH
11783: LD_INT 22
11785: PUSH
11786: LD_VAR 0 16
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 2
11797: PUSH
11798: LD_INT 30
11800: PUSH
11801: LD_INT 32
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 30
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: LIST
11822: PUSH
11823: LD_INT 91
11825: PUSH
11826: LD_VAR 0 1
11830: PUSH
11831: LD_INT 12
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: EMPTY
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: PPUSH
11847: CALL_OW 69
11851: PUSH
11852: LD_INT 2
11854: GREATER
11855: AND
11856: IFFALSE 11879
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11858: LD_ADDR_VAR 0 18
11862: PUSH
11863: LD_INT 11
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_VAR 0 12
11877: ARRAY
11878: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11879: LD_VAR 0 18
11883: NOT
11884: PUSH
11885: LD_INT 40
11887: PPUSH
11888: LD_VAR 0 16
11892: PPUSH
11893: CALL_OW 321
11897: PUSH
11898: LD_INT 2
11900: EQUAL
11901: AND
11902: PUSH
11903: LD_INT 7
11905: PUSH
11906: LD_VAR 0 5
11910: IN
11911: PUSH
11912: LD_INT 28
11914: PUSH
11915: LD_VAR 0 5
11919: IN
11920: OR
11921: PUSH
11922: LD_INT 45
11924: PUSH
11925: LD_VAR 0 5
11929: IN
11930: OR
11931: AND
11932: IFFALSE 12186
// begin hex := GetHexInfo ( x , y ) ;
11934: LD_ADDR_VAR 0 4
11938: PUSH
11939: LD_VAR 0 10
11943: PPUSH
11944: LD_VAR 0 11
11948: PPUSH
11949: CALL_OW 546
11953: ST_TO_ADDR
// if hex [ 1 ] then
11954: LD_VAR 0 4
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: IFFALSE 11966
// exit ;
11964: GO 12369
// height := hex [ 2 ] ;
11966: LD_ADDR_VAR 0 15
11970: PUSH
11971: LD_VAR 0 4
11975: PUSH
11976: LD_INT 2
11978: ARRAY
11979: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11980: LD_ADDR_VAR 0 14
11984: PUSH
11985: LD_INT 0
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 3
11993: PUSH
11994: LD_INT 5
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: ST_TO_ADDR
// for i in tmp do
12003: LD_ADDR_VAR 0 8
12007: PUSH
12008: LD_VAR 0 14
12012: PUSH
12013: FOR_IN
12014: IFFALSE 12184
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
12016: LD_ADDR_VAR 0 9
12020: PUSH
12021: LD_VAR 0 10
12025: PPUSH
12026: LD_VAR 0 8
12030: PPUSH
12031: LD_INT 5
12033: PPUSH
12034: CALL_OW 272
12038: PUSH
12039: LD_VAR 0 11
12043: PPUSH
12044: LD_VAR 0 8
12048: PPUSH
12049: LD_INT 5
12051: PPUSH
12052: CALL_OW 273
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
12061: LD_VAR 0 9
12065: PUSH
12066: LD_INT 1
12068: ARRAY
12069: PPUSH
12070: LD_VAR 0 9
12074: PUSH
12075: LD_INT 2
12077: ARRAY
12078: PPUSH
12079: CALL_OW 488
12083: IFFALSE 12182
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
12085: LD_ADDR_VAR 0 4
12089: PUSH
12090: LD_VAR 0 9
12094: PUSH
12095: LD_INT 1
12097: ARRAY
12098: PPUSH
12099: LD_VAR 0 9
12103: PUSH
12104: LD_INT 2
12106: ARRAY
12107: PPUSH
12108: CALL_OW 546
12112: ST_TO_ADDR
// if hex [ 1 ] then
12113: LD_VAR 0 4
12117: PUSH
12118: LD_INT 1
12120: ARRAY
12121: IFFALSE 12125
// continue ;
12123: GO 12013
// h := hex [ 2 ] ;
12125: LD_ADDR_VAR 0 13
12129: PUSH
12130: LD_VAR 0 4
12134: PUSH
12135: LD_INT 2
12137: ARRAY
12138: ST_TO_ADDR
// if h + 7 < height then
12139: LD_VAR 0 13
12143: PUSH
12144: LD_INT 7
12146: PLUS
12147: PUSH
12148: LD_VAR 0 15
12152: LESS
12153: IFFALSE 12182
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
12155: LD_ADDR_VAR 0 18
12159: PUSH
12160: LD_INT 7
12162: PUSH
12163: LD_INT 28
12165: PUSH
12166: LD_INT 45
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: LD_VAR 0 12
12178: ARRAY
12179: ST_TO_ADDR
// break ;
12180: GO 12184
// end ; end ; end ;
12182: GO 12013
12184: POP
12185: POP
// end ; if not weapon then
12186: LD_VAR 0 18
12190: NOT
12191: IFFALSE 12251
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
12193: LD_ADDR_VAR 0 5
12197: PUSH
12198: LD_VAR 0 5
12202: PUSH
12203: LD_INT 11
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 49
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: LIST
12216: DIFF
12217: ST_TO_ADDR
// if not list then
12218: LD_VAR 0 5
12222: NOT
12223: IFFALSE 12227
// exit ;
12225: GO 12369
// weapon := list [ rand ( 1 , list ) ] ;
12227: LD_ADDR_VAR 0 18
12231: PUSH
12232: LD_VAR 0 5
12236: PUSH
12237: LD_INT 1
12239: PPUSH
12240: LD_VAR 0 5
12244: PPUSH
12245: CALL_OW 12
12249: ARRAY
12250: ST_TO_ADDR
// end ; if weapon then
12251: LD_VAR 0 18
12255: IFFALSE 12369
// begin tmp := CostOfWeapon ( weapon ) ;
12257: LD_ADDR_VAR 0 14
12261: PUSH
12262: LD_VAR 0 18
12266: PPUSH
12267: CALL_OW 451
12271: ST_TO_ADDR
// j := GetBase ( tower ) ;
12272: LD_ADDR_VAR 0 9
12276: PUSH
12277: LD_VAR 0 1
12281: PPUSH
12282: CALL_OW 274
12286: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
12287: LD_VAR 0 9
12291: PPUSH
12292: LD_INT 1
12294: PPUSH
12295: CALL_OW 275
12299: PUSH
12300: LD_VAR 0 14
12304: PUSH
12305: LD_INT 1
12307: ARRAY
12308: GREATEREQUAL
12309: PUSH
12310: LD_VAR 0 9
12314: PPUSH
12315: LD_INT 2
12317: PPUSH
12318: CALL_OW 275
12322: PUSH
12323: LD_VAR 0 14
12327: PUSH
12328: LD_INT 2
12330: ARRAY
12331: GREATEREQUAL
12332: AND
12333: PUSH
12334: LD_VAR 0 9
12338: PPUSH
12339: LD_INT 3
12341: PPUSH
12342: CALL_OW 275
12346: PUSH
12347: LD_VAR 0 14
12351: PUSH
12352: LD_INT 3
12354: ARRAY
12355: GREATEREQUAL
12356: AND
12357: IFFALSE 12369
// result := weapon ;
12359: LD_ADDR_VAR 0 3
12363: PUSH
12364: LD_VAR 0 18
12368: ST_TO_ADDR
// end ; end ;
12369: LD_VAR 0 3
12373: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
12374: LD_INT 0
12376: PPUSH
12377: PPUSH
// result := true ;
12378: LD_ADDR_VAR 0 3
12382: PUSH
12383: LD_INT 1
12385: ST_TO_ADDR
// if array1 = array2 then
12386: LD_VAR 0 1
12390: PUSH
12391: LD_VAR 0 2
12395: EQUAL
12396: IFFALSE 12456
// begin for i = 1 to array1 do
12398: LD_ADDR_VAR 0 4
12402: PUSH
12403: DOUBLE
12404: LD_INT 1
12406: DEC
12407: ST_TO_ADDR
12408: LD_VAR 0 1
12412: PUSH
12413: FOR_TO
12414: IFFALSE 12452
// if array1 [ i ] <> array2 [ i ] then
12416: LD_VAR 0 1
12420: PUSH
12421: LD_VAR 0 4
12425: ARRAY
12426: PUSH
12427: LD_VAR 0 2
12431: PUSH
12432: LD_VAR 0 4
12436: ARRAY
12437: NONEQUAL
12438: IFFALSE 12450
// begin result := false ;
12440: LD_ADDR_VAR 0 3
12444: PUSH
12445: LD_INT 0
12447: ST_TO_ADDR
// break ;
12448: GO 12452
// end ;
12450: GO 12413
12452: POP
12453: POP
// end else
12454: GO 12464
// result := false ;
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 0
12463: ST_TO_ADDR
// end ;
12464: LD_VAR 0 3
12468: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12469: LD_INT 0
12471: PPUSH
12472: PPUSH
// if not array1 or not array2 then
12473: LD_VAR 0 1
12477: NOT
12478: PUSH
12479: LD_VAR 0 2
12483: NOT
12484: OR
12485: IFFALSE 12489
// exit ;
12487: GO 12553
// result := true ;
12489: LD_ADDR_VAR 0 3
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// for i = 1 to array1 do
12497: LD_ADDR_VAR 0 4
12501: PUSH
12502: DOUBLE
12503: LD_INT 1
12505: DEC
12506: ST_TO_ADDR
12507: LD_VAR 0 1
12511: PUSH
12512: FOR_TO
12513: IFFALSE 12551
// if array1 [ i ] <> array2 [ i ] then
12515: LD_VAR 0 1
12519: PUSH
12520: LD_VAR 0 4
12524: ARRAY
12525: PUSH
12526: LD_VAR 0 2
12530: PUSH
12531: LD_VAR 0 4
12535: ARRAY
12536: NONEQUAL
12537: IFFALSE 12549
// begin result := false ;
12539: LD_ADDR_VAR 0 3
12543: PUSH
12544: LD_INT 0
12546: ST_TO_ADDR
// break ;
12547: GO 12551
// end ;
12549: GO 12512
12551: POP
12552: POP
// end ;
12553: LD_VAR 0 3
12557: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12558: LD_INT 0
12560: PPUSH
12561: PPUSH
12562: PPUSH
// pom := GetBase ( fac ) ;
12563: LD_ADDR_VAR 0 5
12567: PUSH
12568: LD_VAR 0 1
12572: PPUSH
12573: CALL_OW 274
12577: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12578: LD_ADDR_VAR 0 4
12582: PUSH
12583: LD_VAR 0 2
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PPUSH
12592: LD_VAR 0 2
12596: PUSH
12597: LD_INT 2
12599: ARRAY
12600: PPUSH
12601: LD_VAR 0 2
12605: PUSH
12606: LD_INT 3
12608: ARRAY
12609: PPUSH
12610: LD_VAR 0 2
12614: PUSH
12615: LD_INT 4
12617: ARRAY
12618: PPUSH
12619: CALL_OW 449
12623: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12624: LD_ADDR_VAR 0 3
12628: PUSH
12629: LD_VAR 0 5
12633: PPUSH
12634: LD_INT 1
12636: PPUSH
12637: CALL_OW 275
12641: PUSH
12642: LD_VAR 0 4
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: GREATEREQUAL
12651: PUSH
12652: LD_VAR 0 5
12656: PPUSH
12657: LD_INT 2
12659: PPUSH
12660: CALL_OW 275
12664: PUSH
12665: LD_VAR 0 4
12669: PUSH
12670: LD_INT 2
12672: ARRAY
12673: GREATEREQUAL
12674: AND
12675: PUSH
12676: LD_VAR 0 5
12680: PPUSH
12681: LD_INT 3
12683: PPUSH
12684: CALL_OW 275
12688: PUSH
12689: LD_VAR 0 4
12693: PUSH
12694: LD_INT 3
12696: ARRAY
12697: GREATEREQUAL
12698: AND
12699: ST_TO_ADDR
// end ;
12700: LD_VAR 0 3
12704: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12705: LD_INT 0
12707: PPUSH
12708: PPUSH
12709: PPUSH
12710: PPUSH
// pom := GetBase ( building ) ;
12711: LD_ADDR_VAR 0 3
12715: PUSH
12716: LD_VAR 0 1
12720: PPUSH
12721: CALL_OW 274
12725: ST_TO_ADDR
// if not pom then
12726: LD_VAR 0 3
12730: NOT
12731: IFFALSE 12735
// exit ;
12733: GO 12905
// btype := GetBType ( building ) ;
12735: LD_ADDR_VAR 0 5
12739: PUSH
12740: LD_VAR 0 1
12744: PPUSH
12745: CALL_OW 266
12749: ST_TO_ADDR
// if btype = b_armoury then
12750: LD_VAR 0 5
12754: PUSH
12755: LD_INT 4
12757: EQUAL
12758: IFFALSE 12768
// btype := b_barracks ;
12760: LD_ADDR_VAR 0 5
12764: PUSH
12765: LD_INT 5
12767: ST_TO_ADDR
// if btype = b_depot then
12768: LD_VAR 0 5
12772: PUSH
12773: LD_INT 0
12775: EQUAL
12776: IFFALSE 12786
// btype := b_warehouse ;
12778: LD_ADDR_VAR 0 5
12782: PUSH
12783: LD_INT 1
12785: ST_TO_ADDR
// if btype = b_workshop then
12786: LD_VAR 0 5
12790: PUSH
12791: LD_INT 2
12793: EQUAL
12794: IFFALSE 12804
// btype := b_factory ;
12796: LD_ADDR_VAR 0 5
12800: PUSH
12801: LD_INT 3
12803: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12804: LD_ADDR_VAR 0 4
12808: PUSH
12809: LD_VAR 0 5
12813: PPUSH
12814: LD_VAR 0 1
12818: PPUSH
12819: CALL_OW 248
12823: PPUSH
12824: CALL_OW 450
12828: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12829: LD_ADDR_VAR 0 2
12833: PUSH
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 1
12841: PPUSH
12842: CALL_OW 275
12846: PUSH
12847: LD_VAR 0 4
12851: PUSH
12852: LD_INT 1
12854: ARRAY
12855: GREATEREQUAL
12856: PUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: LD_INT 2
12864: PPUSH
12865: CALL_OW 275
12869: PUSH
12870: LD_VAR 0 4
12874: PUSH
12875: LD_INT 2
12877: ARRAY
12878: GREATEREQUAL
12879: AND
12880: PUSH
12881: LD_VAR 0 3
12885: PPUSH
12886: LD_INT 3
12888: PPUSH
12889: CALL_OW 275
12893: PUSH
12894: LD_VAR 0 4
12898: PUSH
12899: LD_INT 3
12901: ARRAY
12902: GREATEREQUAL
12903: AND
12904: ST_TO_ADDR
// end ;
12905: LD_VAR 0 2
12909: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12910: LD_INT 0
12912: PPUSH
12913: PPUSH
12914: PPUSH
// pom := GetBase ( building ) ;
12915: LD_ADDR_VAR 0 4
12919: PUSH
12920: LD_VAR 0 1
12924: PPUSH
12925: CALL_OW 274
12929: ST_TO_ADDR
// if not pom then
12930: LD_VAR 0 4
12934: NOT
12935: IFFALSE 12939
// exit ;
12937: GO 13040
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12939: LD_ADDR_VAR 0 5
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: LD_VAR 0 1
12953: PPUSH
12954: CALL_OW 248
12958: PPUSH
12959: CALL_OW 450
12963: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12964: LD_ADDR_VAR 0 3
12968: PUSH
12969: LD_VAR 0 4
12973: PPUSH
12974: LD_INT 1
12976: PPUSH
12977: CALL_OW 275
12981: PUSH
12982: LD_VAR 0 5
12986: PUSH
12987: LD_INT 1
12989: ARRAY
12990: GREATEREQUAL
12991: PUSH
12992: LD_VAR 0 4
12996: PPUSH
12997: LD_INT 2
12999: PPUSH
13000: CALL_OW 275
13004: PUSH
13005: LD_VAR 0 5
13009: PUSH
13010: LD_INT 2
13012: ARRAY
13013: GREATEREQUAL
13014: AND
13015: PUSH
13016: LD_VAR 0 4
13020: PPUSH
13021: LD_INT 3
13023: PPUSH
13024: CALL_OW 275
13028: PUSH
13029: LD_VAR 0 5
13033: PUSH
13034: LD_INT 3
13036: ARRAY
13037: GREATEREQUAL
13038: AND
13039: ST_TO_ADDR
// end ;
13040: LD_VAR 0 3
13044: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
13045: LD_INT 0
13047: PPUSH
13048: PPUSH
13049: PPUSH
13050: PPUSH
13051: PPUSH
13052: PPUSH
13053: PPUSH
13054: PPUSH
13055: PPUSH
13056: PPUSH
13057: PPUSH
// result := false ;
13058: LD_ADDR_VAR 0 8
13062: PUSH
13063: LD_INT 0
13065: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
13066: LD_VAR 0 5
13070: NOT
13071: PUSH
13072: LD_VAR 0 1
13076: NOT
13077: OR
13078: PUSH
13079: LD_VAR 0 2
13083: NOT
13084: OR
13085: PUSH
13086: LD_VAR 0 3
13090: NOT
13091: OR
13092: IFFALSE 13096
// exit ;
13094: GO 13910
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
13096: LD_ADDR_VAR 0 14
13100: PUSH
13101: LD_VAR 0 1
13105: PPUSH
13106: LD_VAR 0 2
13110: PPUSH
13111: LD_VAR 0 3
13115: PPUSH
13116: LD_VAR 0 4
13120: PPUSH
13121: LD_VAR 0 5
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 248
13134: PPUSH
13135: LD_INT 0
13137: PPUSH
13138: CALL 15147 0 6
13142: ST_TO_ADDR
// if not hexes then
13143: LD_VAR 0 14
13147: NOT
13148: IFFALSE 13152
// exit ;
13150: GO 13910
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13152: LD_ADDR_VAR 0 17
13156: PUSH
13157: LD_VAR 0 5
13161: PPUSH
13162: LD_INT 22
13164: PUSH
13165: LD_VAR 0 13
13169: PPUSH
13170: CALL_OW 255
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 2
13181: PUSH
13182: LD_INT 30
13184: PUSH
13185: LD_INT 0
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 30
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PPUSH
13211: CALL_OW 72
13215: ST_TO_ADDR
// for i = 1 to hexes do
13216: LD_ADDR_VAR 0 9
13220: PUSH
13221: DOUBLE
13222: LD_INT 1
13224: DEC
13225: ST_TO_ADDR
13226: LD_VAR 0 14
13230: PUSH
13231: FOR_TO
13232: IFFALSE 13908
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
13234: LD_ADDR_VAR 0 13
13238: PUSH
13239: LD_VAR 0 14
13243: PUSH
13244: LD_VAR 0 9
13248: ARRAY
13249: PUSH
13250: LD_INT 1
13252: ARRAY
13253: PPUSH
13254: LD_VAR 0 14
13258: PUSH
13259: LD_VAR 0 9
13263: ARRAY
13264: PUSH
13265: LD_INT 2
13267: ARRAY
13268: PPUSH
13269: CALL_OW 428
13273: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
13274: LD_VAR 0 14
13278: PUSH
13279: LD_VAR 0 9
13283: ARRAY
13284: PUSH
13285: LD_INT 1
13287: ARRAY
13288: PPUSH
13289: LD_VAR 0 14
13293: PUSH
13294: LD_VAR 0 9
13298: ARRAY
13299: PUSH
13300: LD_INT 2
13302: ARRAY
13303: PPUSH
13304: CALL_OW 351
13308: PUSH
13309: LD_VAR 0 14
13313: PUSH
13314: LD_VAR 0 9
13318: ARRAY
13319: PUSH
13320: LD_INT 1
13322: ARRAY
13323: PPUSH
13324: LD_VAR 0 14
13328: PUSH
13329: LD_VAR 0 9
13333: ARRAY
13334: PUSH
13335: LD_INT 2
13337: ARRAY
13338: PPUSH
13339: CALL_OW 488
13343: NOT
13344: OR
13345: PUSH
13346: LD_VAR 0 13
13350: PPUSH
13351: CALL_OW 247
13355: PUSH
13356: LD_INT 3
13358: EQUAL
13359: OR
13360: IFFALSE 13366
// exit ;
13362: POP
13363: POP
13364: GO 13910
// if not tmp then
13366: LD_VAR 0 13
13370: NOT
13371: IFFALSE 13375
// continue ;
13373: GO 13231
// result := true ;
13375: LD_ADDR_VAR 0 8
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
13383: LD_VAR 0 6
13387: PUSH
13388: LD_VAR 0 13
13392: PPUSH
13393: CALL_OW 247
13397: PUSH
13398: LD_INT 2
13400: EQUAL
13401: AND
13402: PUSH
13403: LD_VAR 0 13
13407: PPUSH
13408: CALL_OW 263
13412: PUSH
13413: LD_INT 1
13415: EQUAL
13416: AND
13417: IFFALSE 13581
// begin if IsDrivenBy ( tmp ) then
13419: LD_VAR 0 13
13423: PPUSH
13424: CALL_OW 311
13428: IFFALSE 13432
// continue ;
13430: GO 13231
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13432: LD_VAR 0 6
13436: PPUSH
13437: LD_INT 3
13439: PUSH
13440: LD_INT 60
13442: PUSH
13443: EMPTY
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 3
13452: PUSH
13453: LD_INT 55
13455: PUSH
13456: EMPTY
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PPUSH
13467: CALL_OW 72
13471: IFFALSE 13579
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13473: LD_ADDR_VAR 0 18
13477: PUSH
13478: LD_VAR 0 6
13482: PPUSH
13483: LD_INT 3
13485: PUSH
13486: LD_INT 60
13488: PUSH
13489: EMPTY
13490: LIST
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 3
13498: PUSH
13499: LD_INT 55
13501: PUSH
13502: EMPTY
13503: LIST
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PPUSH
13513: CALL_OW 72
13517: PUSH
13518: LD_INT 1
13520: ARRAY
13521: ST_TO_ADDR
// if IsInUnit ( driver ) then
13522: LD_VAR 0 18
13526: PPUSH
13527: CALL_OW 310
13531: IFFALSE 13542
// ComExit ( driver ) ;
13533: LD_VAR 0 18
13537: PPUSH
13538: CALL 38852 0 1
// AddComEnterUnit ( driver , tmp ) ;
13542: LD_VAR 0 18
13546: PPUSH
13547: LD_VAR 0 13
13551: PPUSH
13552: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13556: LD_VAR 0 18
13560: PPUSH
13561: LD_VAR 0 7
13565: PPUSH
13566: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13570: LD_VAR 0 18
13574: PPUSH
13575: CALL_OW 181
// end ; continue ;
13579: GO 13231
// end ; if not cleaners or not tmp in cleaners then
13581: LD_VAR 0 6
13585: NOT
13586: PUSH
13587: LD_VAR 0 13
13591: PUSH
13592: LD_VAR 0 6
13596: IN
13597: NOT
13598: OR
13599: IFFALSE 13906
// begin if dep then
13601: LD_VAR 0 17
13605: IFFALSE 13741
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13607: LD_ADDR_VAR 0 16
13611: PUSH
13612: LD_VAR 0 17
13616: PUSH
13617: LD_INT 1
13619: ARRAY
13620: PPUSH
13621: CALL_OW 250
13625: PPUSH
13626: LD_VAR 0 17
13630: PUSH
13631: LD_INT 1
13633: ARRAY
13634: PPUSH
13635: CALL_OW 254
13639: PPUSH
13640: LD_INT 5
13642: PPUSH
13643: CALL_OW 272
13647: PUSH
13648: LD_VAR 0 17
13652: PUSH
13653: LD_INT 1
13655: ARRAY
13656: PPUSH
13657: CALL_OW 251
13661: PPUSH
13662: LD_VAR 0 17
13666: PUSH
13667: LD_INT 1
13669: ARRAY
13670: PPUSH
13671: CALL_OW 254
13675: PPUSH
13676: LD_INT 5
13678: PPUSH
13679: CALL_OW 273
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13688: LD_VAR 0 16
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: PPUSH
13697: LD_VAR 0 16
13701: PUSH
13702: LD_INT 2
13704: ARRAY
13705: PPUSH
13706: CALL_OW 488
13710: IFFALSE 13741
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13712: LD_VAR 0 13
13716: PPUSH
13717: LD_VAR 0 16
13721: PUSH
13722: LD_INT 1
13724: ARRAY
13725: PPUSH
13726: LD_VAR 0 16
13730: PUSH
13731: LD_INT 2
13733: ARRAY
13734: PPUSH
13735: CALL_OW 111
// continue ;
13739: GO 13231
// end ; end ; r := GetDir ( tmp ) ;
13741: LD_ADDR_VAR 0 15
13745: PUSH
13746: LD_VAR 0 13
13750: PPUSH
13751: CALL_OW 254
13755: ST_TO_ADDR
// if r = 5 then
13756: LD_VAR 0 15
13760: PUSH
13761: LD_INT 5
13763: EQUAL
13764: IFFALSE 13774
// r := 0 ;
13766: LD_ADDR_VAR 0 15
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// for j = r to 5 do
13774: LD_ADDR_VAR 0 10
13778: PUSH
13779: DOUBLE
13780: LD_VAR 0 15
13784: DEC
13785: ST_TO_ADDR
13786: LD_INT 5
13788: PUSH
13789: FOR_TO
13790: IFFALSE 13904
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13792: LD_ADDR_VAR 0 11
13796: PUSH
13797: LD_VAR 0 13
13801: PPUSH
13802: CALL_OW 250
13806: PPUSH
13807: LD_VAR 0 10
13811: PPUSH
13812: LD_INT 2
13814: PPUSH
13815: CALL_OW 272
13819: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13820: LD_ADDR_VAR 0 12
13824: PUSH
13825: LD_VAR 0 13
13829: PPUSH
13830: CALL_OW 251
13834: PPUSH
13835: LD_VAR 0 10
13839: PPUSH
13840: LD_INT 2
13842: PPUSH
13843: CALL_OW 273
13847: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13848: LD_VAR 0 11
13852: PPUSH
13853: LD_VAR 0 12
13857: PPUSH
13858: CALL_OW 488
13862: PUSH
13863: LD_VAR 0 11
13867: PPUSH
13868: LD_VAR 0 12
13872: PPUSH
13873: CALL_OW 428
13877: NOT
13878: AND
13879: IFFALSE 13902
// begin ComMoveXY ( tmp , _x , _y ) ;
13881: LD_VAR 0 13
13885: PPUSH
13886: LD_VAR 0 11
13890: PPUSH
13891: LD_VAR 0 12
13895: PPUSH
13896: CALL_OW 111
// break ;
13900: GO 13904
// end ; end ;
13902: GO 13789
13904: POP
13905: POP
// end ; end ;
13906: GO 13231
13908: POP
13909: POP
// end ;
13910: LD_VAR 0 8
13914: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13915: LD_INT 0
13917: PPUSH
// result := true ;
13918: LD_ADDR_VAR 0 3
13922: PUSH
13923: LD_INT 1
13925: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13926: LD_VAR 0 2
13930: PUSH
13931: LD_INT 24
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13945
13937: LD_INT 33
13939: DOUBLE
13940: EQUAL
13941: IFTRUE 13945
13943: GO 13970
13945: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13946: LD_ADDR_VAR 0 3
13950: PUSH
13951: LD_INT 32
13953: PPUSH
13954: LD_VAR 0 1
13958: PPUSH
13959: CALL_OW 321
13963: PUSH
13964: LD_INT 2
13966: EQUAL
13967: ST_TO_ADDR
13968: GO 14290
13970: LD_INT 20
13972: DOUBLE
13973: EQUAL
13974: IFTRUE 13978
13976: GO 14003
13978: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13979: LD_ADDR_VAR 0 3
13983: PUSH
13984: LD_INT 6
13986: PPUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 321
13996: PUSH
13997: LD_INT 2
13999: EQUAL
14000: ST_TO_ADDR
14001: GO 14290
14003: LD_INT 22
14005: DOUBLE
14006: EQUAL
14007: IFTRUE 14017
14009: LD_INT 36
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 14042
14017: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
14018: LD_ADDR_VAR 0 3
14022: PUSH
14023: LD_INT 15
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 321
14035: PUSH
14036: LD_INT 2
14038: EQUAL
14039: ST_TO_ADDR
14040: GO 14290
14042: LD_INT 30
14044: DOUBLE
14045: EQUAL
14046: IFTRUE 14050
14048: GO 14075
14050: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: LD_INT 20
14058: PPUSH
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 321
14068: PUSH
14069: LD_INT 2
14071: EQUAL
14072: ST_TO_ADDR
14073: GO 14290
14075: LD_INT 28
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14089
14081: LD_INT 21
14083: DOUBLE
14084: EQUAL
14085: IFTRUE 14089
14087: GO 14114
14089: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
14090: LD_ADDR_VAR 0 3
14094: PUSH
14095: LD_INT 21
14097: PPUSH
14098: LD_VAR 0 1
14102: PPUSH
14103: CALL_OW 321
14107: PUSH
14108: LD_INT 2
14110: EQUAL
14111: ST_TO_ADDR
14112: GO 14290
14114: LD_INT 16
14116: DOUBLE
14117: EQUAL
14118: IFTRUE 14122
14120: GO 14149
14122: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
14123: LD_ADDR_VAR 0 3
14127: PUSH
14128: LD_EXP 29
14132: PPUSH
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 321
14142: PUSH
14143: LD_INT 2
14145: EQUAL
14146: ST_TO_ADDR
14147: GO 14290
14149: LD_INT 19
14151: DOUBLE
14152: EQUAL
14153: IFTRUE 14163
14155: LD_INT 23
14157: DOUBLE
14158: EQUAL
14159: IFTRUE 14163
14161: GO 14190
14163: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_EXP 28
14173: PPUSH
14174: LD_VAR 0 1
14178: PPUSH
14179: CALL_OW 321
14183: PUSH
14184: LD_INT 2
14186: EQUAL
14187: ST_TO_ADDR
14188: GO 14290
14190: LD_INT 17
14192: DOUBLE
14193: EQUAL
14194: IFTRUE 14198
14196: GO 14223
14198: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
14199: LD_ADDR_VAR 0 3
14203: PUSH
14204: LD_INT 39
14206: PPUSH
14207: LD_VAR 0 1
14211: PPUSH
14212: CALL_OW 321
14216: PUSH
14217: LD_INT 2
14219: EQUAL
14220: ST_TO_ADDR
14221: GO 14290
14223: LD_INT 18
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14256
14231: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_INT 40
14239: PPUSH
14240: LD_VAR 0 1
14244: PPUSH
14245: CALL_OW 321
14249: PUSH
14250: LD_INT 2
14252: EQUAL
14253: ST_TO_ADDR
14254: GO 14290
14256: LD_INT 27
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14289
14264: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
14265: LD_ADDR_VAR 0 3
14269: PUSH
14270: LD_INT 35
14272: PPUSH
14273: LD_VAR 0 1
14277: PPUSH
14278: CALL_OW 321
14282: PUSH
14283: LD_INT 2
14285: EQUAL
14286: ST_TO_ADDR
14287: GO 14290
14289: POP
// end ;
14290: LD_VAR 0 3
14294: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
14295: LD_INT 0
14297: PPUSH
14298: PPUSH
14299: PPUSH
14300: PPUSH
14301: PPUSH
14302: PPUSH
14303: PPUSH
14304: PPUSH
14305: PPUSH
14306: PPUSH
14307: PPUSH
// result := false ;
14308: LD_ADDR_VAR 0 6
14312: PUSH
14313: LD_INT 0
14315: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
14316: LD_VAR 0 1
14320: NOT
14321: PUSH
14322: LD_VAR 0 1
14326: PPUSH
14327: CALL_OW 266
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: LD_INT 1
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: IN
14342: NOT
14343: OR
14344: PUSH
14345: LD_VAR 0 2
14349: NOT
14350: OR
14351: PUSH
14352: LD_VAR 0 5
14356: PUSH
14357: LD_INT 0
14359: PUSH
14360: LD_INT 1
14362: PUSH
14363: LD_INT 2
14365: PUSH
14366: LD_INT 3
14368: PUSH
14369: LD_INT 4
14371: PUSH
14372: LD_INT 5
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: IN
14383: NOT
14384: OR
14385: PUSH
14386: LD_VAR 0 3
14390: PPUSH
14391: LD_VAR 0 4
14395: PPUSH
14396: CALL_OW 488
14400: NOT
14401: OR
14402: IFFALSE 14406
// exit ;
14404: GO 15142
// side := GetSide ( depot ) ;
14406: LD_ADDR_VAR 0 9
14410: PUSH
14411: LD_VAR 0 1
14415: PPUSH
14416: CALL_OW 255
14420: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14421: LD_VAR 0 9
14425: PPUSH
14426: LD_VAR 0 2
14430: PPUSH
14431: CALL 13915 0 2
14435: NOT
14436: IFFALSE 14440
// exit ;
14438: GO 15142
// pom := GetBase ( depot ) ;
14440: LD_ADDR_VAR 0 10
14444: PUSH
14445: LD_VAR 0 1
14449: PPUSH
14450: CALL_OW 274
14454: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14455: LD_ADDR_VAR 0 11
14459: PUSH
14460: LD_VAR 0 2
14464: PPUSH
14465: LD_VAR 0 1
14469: PPUSH
14470: CALL_OW 248
14474: PPUSH
14475: CALL_OW 450
14479: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14480: LD_VAR 0 10
14484: PPUSH
14485: LD_INT 1
14487: PPUSH
14488: CALL_OW 275
14492: PUSH
14493: LD_VAR 0 11
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: GREATEREQUAL
14502: PUSH
14503: LD_VAR 0 10
14507: PPUSH
14508: LD_INT 2
14510: PPUSH
14511: CALL_OW 275
14515: PUSH
14516: LD_VAR 0 11
14520: PUSH
14521: LD_INT 2
14523: ARRAY
14524: GREATEREQUAL
14525: AND
14526: PUSH
14527: LD_VAR 0 10
14531: PPUSH
14532: LD_INT 3
14534: PPUSH
14535: CALL_OW 275
14539: PUSH
14540: LD_VAR 0 11
14544: PUSH
14545: LD_INT 3
14547: ARRAY
14548: GREATEREQUAL
14549: AND
14550: NOT
14551: IFFALSE 14555
// exit ;
14553: GO 15142
// if GetBType ( depot ) = b_depot then
14555: LD_VAR 0 1
14559: PPUSH
14560: CALL_OW 266
14564: PUSH
14565: LD_INT 0
14567: EQUAL
14568: IFFALSE 14580
// dist := 28 else
14570: LD_ADDR_VAR 0 14
14574: PUSH
14575: LD_INT 28
14577: ST_TO_ADDR
14578: GO 14588
// dist := 36 ;
14580: LD_ADDR_VAR 0 14
14584: PUSH
14585: LD_INT 36
14587: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14588: LD_VAR 0 1
14592: PPUSH
14593: LD_VAR 0 3
14597: PPUSH
14598: LD_VAR 0 4
14602: PPUSH
14603: CALL_OW 297
14607: PUSH
14608: LD_VAR 0 14
14612: GREATER
14613: IFFALSE 14617
// exit ;
14615: GO 15142
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14617: LD_ADDR_VAR 0 12
14621: PUSH
14622: LD_VAR 0 2
14626: PPUSH
14627: LD_VAR 0 3
14631: PPUSH
14632: LD_VAR 0 4
14636: PPUSH
14637: LD_VAR 0 5
14641: PPUSH
14642: LD_VAR 0 1
14646: PPUSH
14647: CALL_OW 248
14651: PPUSH
14652: LD_INT 0
14654: PPUSH
14655: CALL 15147 0 6
14659: ST_TO_ADDR
// if not hexes then
14660: LD_VAR 0 12
14664: NOT
14665: IFFALSE 14669
// exit ;
14667: GO 15142
// hex := GetHexInfo ( x , y ) ;
14669: LD_ADDR_VAR 0 15
14673: PUSH
14674: LD_VAR 0 3
14678: PPUSH
14679: LD_VAR 0 4
14683: PPUSH
14684: CALL_OW 546
14688: ST_TO_ADDR
// if hex [ 1 ] then
14689: LD_VAR 0 15
14693: PUSH
14694: LD_INT 1
14696: ARRAY
14697: IFFALSE 14701
// exit ;
14699: GO 15142
// height := hex [ 2 ] ;
14701: LD_ADDR_VAR 0 13
14705: PUSH
14706: LD_VAR 0 15
14710: PUSH
14711: LD_INT 2
14713: ARRAY
14714: ST_TO_ADDR
// for i = 1 to hexes do
14715: LD_ADDR_VAR 0 7
14719: PUSH
14720: DOUBLE
14721: LD_INT 1
14723: DEC
14724: ST_TO_ADDR
14725: LD_VAR 0 12
14729: PUSH
14730: FOR_TO
14731: IFFALSE 15061
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14733: LD_VAR 0 12
14737: PUSH
14738: LD_VAR 0 7
14742: ARRAY
14743: PUSH
14744: LD_INT 1
14746: ARRAY
14747: PPUSH
14748: LD_VAR 0 12
14752: PUSH
14753: LD_VAR 0 7
14757: ARRAY
14758: PUSH
14759: LD_INT 2
14761: ARRAY
14762: PPUSH
14763: CALL_OW 488
14767: NOT
14768: PUSH
14769: LD_VAR 0 12
14773: PUSH
14774: LD_VAR 0 7
14778: ARRAY
14779: PUSH
14780: LD_INT 1
14782: ARRAY
14783: PPUSH
14784: LD_VAR 0 12
14788: PUSH
14789: LD_VAR 0 7
14793: ARRAY
14794: PUSH
14795: LD_INT 2
14797: ARRAY
14798: PPUSH
14799: CALL_OW 428
14803: PUSH
14804: LD_INT 0
14806: GREATER
14807: OR
14808: PUSH
14809: LD_VAR 0 12
14813: PUSH
14814: LD_VAR 0 7
14818: ARRAY
14819: PUSH
14820: LD_INT 1
14822: ARRAY
14823: PPUSH
14824: LD_VAR 0 12
14828: PUSH
14829: LD_VAR 0 7
14833: ARRAY
14834: PUSH
14835: LD_INT 2
14837: ARRAY
14838: PPUSH
14839: CALL_OW 351
14843: OR
14844: IFFALSE 14850
// exit ;
14846: POP
14847: POP
14848: GO 15142
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14850: LD_ADDR_VAR 0 8
14854: PUSH
14855: LD_VAR 0 12
14859: PUSH
14860: LD_VAR 0 7
14864: ARRAY
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PPUSH
14870: LD_VAR 0 12
14874: PUSH
14875: LD_VAR 0 7
14879: ARRAY
14880: PUSH
14881: LD_INT 2
14883: ARRAY
14884: PPUSH
14885: CALL_OW 546
14889: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14890: LD_VAR 0 8
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: PUSH
14899: LD_VAR 0 8
14903: PUSH
14904: LD_INT 2
14906: ARRAY
14907: PUSH
14908: LD_VAR 0 13
14912: PUSH
14913: LD_INT 2
14915: PLUS
14916: GREATER
14917: OR
14918: PUSH
14919: LD_VAR 0 8
14923: PUSH
14924: LD_INT 2
14926: ARRAY
14927: PUSH
14928: LD_VAR 0 13
14932: PUSH
14933: LD_INT 2
14935: MINUS
14936: LESS
14937: OR
14938: PUSH
14939: LD_VAR 0 8
14943: PUSH
14944: LD_INT 3
14946: ARRAY
14947: PUSH
14948: LD_INT 0
14950: PUSH
14951: LD_INT 8
14953: PUSH
14954: LD_INT 9
14956: PUSH
14957: LD_INT 10
14959: PUSH
14960: LD_INT 11
14962: PUSH
14963: LD_INT 12
14965: PUSH
14966: LD_INT 13
14968: PUSH
14969: LD_INT 16
14971: PUSH
14972: LD_INT 17
14974: PUSH
14975: LD_INT 18
14977: PUSH
14978: LD_INT 19
14980: PUSH
14981: LD_INT 20
14983: PUSH
14984: LD_INT 21
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: IN
15002: NOT
15003: OR
15004: PUSH
15005: LD_VAR 0 8
15009: PUSH
15010: LD_INT 5
15012: ARRAY
15013: NOT
15014: OR
15015: PUSH
15016: LD_VAR 0 8
15020: PUSH
15021: LD_INT 6
15023: ARRAY
15024: PUSH
15025: LD_INT 1
15027: PUSH
15028: LD_INT 2
15030: PUSH
15031: LD_INT 7
15033: PUSH
15034: LD_INT 9
15036: PUSH
15037: LD_INT 10
15039: PUSH
15040: LD_INT 11
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: IN
15051: NOT
15052: OR
15053: IFFALSE 15059
// exit ;
15055: POP
15056: POP
15057: GO 15142
// end ;
15059: GO 14730
15061: POP
15062: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
15063: LD_VAR 0 9
15067: PPUSH
15068: LD_VAR 0 3
15072: PPUSH
15073: LD_VAR 0 4
15077: PPUSH
15078: LD_INT 20
15080: PPUSH
15081: CALL 7088 0 4
15085: PUSH
15086: LD_INT 4
15088: ARRAY
15089: IFFALSE 15093
// exit ;
15091: GO 15142
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
15093: LD_VAR 0 2
15097: PUSH
15098: LD_INT 29
15100: PUSH
15101: LD_INT 30
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: IN
15108: PUSH
15109: LD_VAR 0 3
15113: PPUSH
15114: LD_VAR 0 4
15118: PPUSH
15119: LD_VAR 0 9
15123: PPUSH
15124: CALL_OW 440
15128: NOT
15129: AND
15130: IFFALSE 15134
// exit ;
15132: GO 15142
// result := true ;
15134: LD_ADDR_VAR 0 6
15138: PUSH
15139: LD_INT 1
15141: ST_TO_ADDR
// end ;
15142: LD_VAR 0 6
15146: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
15147: LD_INT 0
15149: PPUSH
15150: PPUSH
15151: PPUSH
15152: PPUSH
15153: PPUSH
15154: PPUSH
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
15166: PPUSH
15167: PPUSH
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
15178: PPUSH
15179: PPUSH
15180: PPUSH
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
15186: PPUSH
15187: PPUSH
15188: PPUSH
15189: PPUSH
15190: PPUSH
15191: PPUSH
15192: PPUSH
15193: PPUSH
15194: PPUSH
15195: PPUSH
15196: PPUSH
15197: PPUSH
15198: PPUSH
15199: PPUSH
15200: PPUSH
15201: PPUSH
15202: PPUSH
15203: PPUSH
15204: PPUSH
15205: PPUSH
15206: PPUSH
// result = [ ] ;
15207: LD_ADDR_VAR 0 7
15211: PUSH
15212: EMPTY
15213: ST_TO_ADDR
// temp_list = [ ] ;
15214: LD_ADDR_VAR 0 9
15218: PUSH
15219: EMPTY
15220: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
15221: LD_VAR 0 4
15225: PUSH
15226: LD_INT 0
15228: PUSH
15229: LD_INT 1
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: LD_INT 4
15240: PUSH
15241: LD_INT 5
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: IN
15252: NOT
15253: PUSH
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 0
15261: PUSH
15262: LD_INT 1
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: IN
15269: PUSH
15270: LD_VAR 0 5
15274: PUSH
15275: LD_INT 1
15277: PUSH
15278: LD_INT 2
15280: PUSH
15281: LD_INT 3
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: LIST
15288: IN
15289: NOT
15290: AND
15291: OR
15292: IFFALSE 15296
// exit ;
15294: GO 33687
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
15296: LD_VAR 0 1
15300: PUSH
15301: LD_INT 6
15303: PUSH
15304: LD_INT 7
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: LD_INT 13
15312: PUSH
15313: LD_INT 12
15315: PUSH
15316: LD_INT 15
15318: PUSH
15319: LD_INT 11
15321: PUSH
15322: LD_INT 14
15324: PUSH
15325: LD_INT 10
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: IN
15339: IFFALSE 15349
// btype = b_lab ;
15341: LD_ADDR_VAR 0 1
15345: PUSH
15346: LD_INT 6
15348: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
15349: LD_VAR 0 6
15353: PUSH
15354: LD_INT 0
15356: PUSH
15357: LD_INT 1
15359: PUSH
15360: LD_INT 2
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: LIST
15367: IN
15368: NOT
15369: PUSH
15370: LD_VAR 0 1
15374: PUSH
15375: LD_INT 0
15377: PUSH
15378: LD_INT 1
15380: PUSH
15381: LD_INT 2
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: LD_INT 6
15389: PUSH
15390: LD_INT 36
15392: PUSH
15393: LD_INT 4
15395: PUSH
15396: LD_INT 5
15398: PUSH
15399: LD_INT 31
15401: PUSH
15402: LD_INT 32
15404: PUSH
15405: LD_INT 33
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: IN
15421: NOT
15422: PUSH
15423: LD_VAR 0 6
15427: PUSH
15428: LD_INT 1
15430: EQUAL
15431: AND
15432: OR
15433: PUSH
15434: LD_VAR 0 1
15438: PUSH
15439: LD_INT 2
15441: PUSH
15442: LD_INT 3
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: IN
15449: NOT
15450: PUSH
15451: LD_VAR 0 6
15455: PUSH
15456: LD_INT 2
15458: EQUAL
15459: AND
15460: OR
15461: IFFALSE 15471
// mode = 0 ;
15463: LD_ADDR_VAR 0 6
15467: PUSH
15468: LD_INT 0
15470: ST_TO_ADDR
// case mode of 0 :
15471: LD_VAR 0 6
15475: PUSH
15476: LD_INT 0
15478: DOUBLE
15479: EQUAL
15480: IFTRUE 15484
15482: GO 26937
15484: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15485: LD_ADDR_VAR 0 11
15489: PUSH
15490: LD_INT 0
15492: PUSH
15493: LD_INT 0
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PUSH
15500: LD_INT 0
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: LD_INT 0
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 1
15523: PUSH
15524: LD_INT 1
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 0
15533: PUSH
15534: LD_INT 1
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PUSH
15545: LD_INT 0
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: LD_INT 1
15554: NEG
15555: PUSH
15556: LD_INT 1
15558: NEG
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PUSH
15568: LD_INT 2
15570: NEG
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 0
15578: PUSH
15579: LD_INT 2
15581: NEG
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: LD_INT 1
15592: NEG
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 1
15600: PUSH
15601: LD_INT 2
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 0
15610: PUSH
15611: LD_INT 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 1
15620: NEG
15621: PUSH
15622: LD_INT 1
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 1
15631: PUSH
15632: LD_INT 3
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 0
15641: PUSH
15642: LD_INT 3
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: LD_INT 1
15651: NEG
15652: PUSH
15653: LD_INT 2
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15678: LD_ADDR_VAR 0 12
15682: PUSH
15683: LD_INT 0
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 0
15695: PUSH
15696: LD_INT 1
15698: NEG
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: PUSH
15704: LD_INT 1
15706: PUSH
15707: LD_INT 0
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 1
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 0
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 1
15736: NEG
15737: PUSH
15738: LD_INT 0
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PUSH
15745: LD_INT 1
15747: NEG
15748: PUSH
15749: LD_INT 1
15751: NEG
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 1
15759: PUSH
15760: LD_INT 1
15762: NEG
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: EMPTY
15785: LIST
15786: LIST
15787: PUSH
15788: LD_INT 1
15790: NEG
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 2
15801: NEG
15802: PUSH
15803: LD_INT 0
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: LD_INT 2
15812: NEG
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 2
15824: NEG
15825: PUSH
15826: LD_INT 1
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 3
15835: NEG
15836: PUSH
15837: LD_INT 0
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 3
15846: NEG
15847: PUSH
15848: LD_INT 1
15850: NEG
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15874: LD_ADDR_VAR 0 13
15878: PUSH
15879: LD_INT 0
15881: PUSH
15882: LD_INT 0
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: LD_INT 1
15894: NEG
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 1
15902: PUSH
15903: LD_INT 0
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: LD_INT 1
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: PUSH
15920: LD_INT 0
15922: PUSH
15923: LD_INT 1
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 1
15932: NEG
15933: PUSH
15934: LD_INT 0
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: PUSH
15941: LD_INT 1
15943: NEG
15944: PUSH
15945: LD_INT 1
15947: NEG
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 1
15955: NEG
15956: PUSH
15957: LD_INT 2
15959: NEG
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: LD_INT 1
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 2
15977: PUSH
15978: LD_INT 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: LD_INT 2
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: LD_INT 2
15997: NEG
15998: PUSH
15999: LD_INT 1
16001: NEG
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 2
16009: NEG
16010: PUSH
16011: LD_INT 2
16013: NEG
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 2
16021: NEG
16022: PUSH
16023: LD_INT 3
16025: NEG
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: LD_INT 3
16033: NEG
16034: PUSH
16035: LD_INT 2
16037: NEG
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 3
16045: NEG
16046: PUSH
16047: LD_INT 3
16049: NEG
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
16073: LD_ADDR_VAR 0 14
16077: PUSH
16078: LD_INT 0
16080: PUSH
16081: LD_INT 0
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: LD_INT 0
16090: PUSH
16091: LD_INT 1
16093: NEG
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: PUSH
16099: LD_INT 1
16101: PUSH
16102: LD_INT 0
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: LD_INT 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 0
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 1
16131: NEG
16132: PUSH
16133: LD_INT 0
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 1
16142: NEG
16143: PUSH
16144: LD_INT 1
16146: NEG
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 1
16154: NEG
16155: PUSH
16156: LD_INT 2
16158: NEG
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: LD_INT 0
16166: PUSH
16167: LD_INT 2
16169: NEG
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 1
16177: PUSH
16178: LD_INT 1
16180: NEG
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 1
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 0
16198: PUSH
16199: LD_INT 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 1
16208: NEG
16209: PUSH
16210: LD_INT 1
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 1
16219: NEG
16220: PUSH
16221: LD_INT 3
16223: NEG
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: LD_INT 3
16234: NEG
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 2
16245: NEG
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
16269: LD_ADDR_VAR 0 15
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: LD_INT 0
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: PUSH
16284: LD_INT 0
16286: PUSH
16287: LD_INT 1
16289: NEG
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 1
16297: PUSH
16298: LD_INT 0
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: LD_INT 1
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: LD_INT 0
16317: PUSH
16318: LD_INT 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 1
16327: NEG
16328: PUSH
16329: LD_INT 0
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 1
16338: NEG
16339: PUSH
16340: LD_INT 1
16342: NEG
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 1
16350: PUSH
16351: LD_INT 1
16353: NEG
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 2
16361: PUSH
16362: LD_INT 0
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: LD_INT 2
16371: PUSH
16372: LD_INT 1
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PUSH
16379: LD_INT 1
16381: NEG
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 2
16392: NEG
16393: PUSH
16394: LD_INT 0
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 2
16403: NEG
16404: PUSH
16405: LD_INT 1
16407: NEG
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PUSH
16413: LD_INT 2
16415: PUSH
16416: LD_INT 1
16418: NEG
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 3
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 3
16436: PUSH
16437: LD_INT 1
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16462: LD_ADDR_VAR 0 16
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: LD_INT 0
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 0
16479: PUSH
16480: LD_INT 1
16482: NEG
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: LD_INT 1
16490: PUSH
16491: LD_INT 0
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 1
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 0
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 1
16520: NEG
16521: PUSH
16522: LD_INT 0
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 1
16531: NEG
16532: PUSH
16533: LD_INT 1
16535: NEG
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 1
16543: NEG
16544: PUSH
16545: LD_INT 2
16547: NEG
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 2
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 2
16565: PUSH
16566: LD_INT 2
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 1
16575: PUSH
16576: LD_INT 2
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: NEG
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: NEG
16598: PUSH
16599: LD_INT 2
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 3
16609: PUSH
16610: LD_INT 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 3
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 2
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16655: LD_ADDR_VAR 0 17
16659: PUSH
16660: LD_INT 0
16662: PUSH
16663: LD_INT 0
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 0
16672: PUSH
16673: LD_INT 1
16675: NEG
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PUSH
16681: LD_INT 1
16683: PUSH
16684: LD_INT 0
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 1
16693: PUSH
16694: LD_INT 1
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 0
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: LD_INT 1
16713: NEG
16714: PUSH
16715: LD_INT 0
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: PUSH
16722: LD_INT 1
16724: NEG
16725: PUSH
16726: LD_INT 1
16728: NEG
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PUSH
16734: LD_INT 1
16736: NEG
16737: PUSH
16738: LD_INT 2
16740: NEG
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 0
16748: PUSH
16749: LD_INT 2
16751: NEG
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: LD_INT 1
16762: NEG
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 2
16770: PUSH
16771: LD_INT 0
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: LD_INT 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 0
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 1
16820: NEG
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 2
16831: NEG
16832: PUSH
16833: LD_INT 0
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 2
16842: NEG
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 2
16854: NEG
16855: PUSH
16856: LD_INT 2
16858: NEG
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16885: LD_ADDR_VAR 0 18
16889: PUSH
16890: LD_INT 0
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 0
16902: PUSH
16903: LD_INT 1
16905: NEG
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 1
16913: PUSH
16914: LD_INT 0
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 1
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: LD_INT 0
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 1
16954: NEG
16955: PUSH
16956: LD_INT 1
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 1
16966: NEG
16967: PUSH
16968: LD_INT 2
16970: NEG
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 0
16978: PUSH
16979: LD_INT 2
16981: NEG
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: LD_INT 1
16992: NEG
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 2
17000: PUSH
17001: LD_INT 0
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 2
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 1
17030: PUSH
17031: LD_INT 2
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 0
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 1
17050: NEG
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: PUSH
17059: LD_INT 2
17061: NEG
17062: PUSH
17063: LD_INT 0
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: LD_INT 2
17072: NEG
17073: PUSH
17074: LD_INT 1
17076: NEG
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: LD_INT 2
17084: NEG
17085: PUSH
17086: LD_INT 2
17088: NEG
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17115: LD_ADDR_VAR 0 19
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: LD_INT 0
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 0
17132: PUSH
17133: LD_INT 1
17135: NEG
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 1
17143: PUSH
17144: LD_INT 0
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 0
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 1
17173: NEG
17174: PUSH
17175: LD_INT 0
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 1
17184: NEG
17185: PUSH
17186: LD_INT 1
17188: NEG
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 1
17196: NEG
17197: PUSH
17198: LD_INT 2
17200: NEG
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 0
17208: PUSH
17209: LD_INT 2
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: PUSH
17220: LD_INT 1
17222: NEG
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 2
17240: PUSH
17241: LD_INT 1
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 2
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: LD_INT 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PUSH
17278: LD_INT 1
17280: NEG
17281: PUSH
17282: LD_INT 1
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 2
17291: NEG
17292: PUSH
17293: LD_INT 0
17295: PUSH
17296: EMPTY
17297: LIST
17298: LIST
17299: PUSH
17300: LD_INT 2
17302: NEG
17303: PUSH
17304: LD_INT 1
17306: NEG
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 2
17314: NEG
17315: PUSH
17316: LD_INT 2
17318: NEG
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17345: LD_ADDR_VAR 0 20
17349: PUSH
17350: LD_INT 0
17352: PUSH
17353: LD_INT 0
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 0
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: LD_INT 0
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 0
17393: PUSH
17394: LD_INT 1
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PUSH
17401: LD_INT 1
17403: NEG
17404: PUSH
17405: LD_INT 0
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: PUSH
17412: LD_INT 1
17414: NEG
17415: PUSH
17416: LD_INT 1
17418: NEG
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 1
17426: NEG
17427: PUSH
17428: LD_INT 2
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: LD_INT 2
17441: NEG
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: LD_INT 1
17452: NEG
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: LD_INT 2
17460: PUSH
17461: LD_INT 0
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 2
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 2
17480: PUSH
17481: LD_INT 2
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 0
17500: PUSH
17501: LD_INT 2
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 1
17510: NEG
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: EMPTY
17516: LIST
17517: LIST
17518: PUSH
17519: LD_INT 2
17521: NEG
17522: PUSH
17523: LD_INT 0
17525: PUSH
17526: EMPTY
17527: LIST
17528: LIST
17529: PUSH
17530: LD_INT 2
17532: NEG
17533: PUSH
17534: LD_INT 1
17536: NEG
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: NEG
17545: PUSH
17546: LD_INT 2
17548: NEG
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17575: LD_ADDR_VAR 0 21
17579: PUSH
17580: LD_INT 0
17582: PUSH
17583: LD_INT 0
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 0
17592: PUSH
17593: LD_INT 1
17595: NEG
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: LD_INT 0
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: LD_INT 1
17613: PUSH
17614: LD_INT 1
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: LD_INT 1
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 1
17633: NEG
17634: PUSH
17635: LD_INT 0
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 1
17644: NEG
17645: PUSH
17646: LD_INT 1
17648: NEG
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: LD_INT 2
17660: NEG
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PUSH
17666: LD_INT 0
17668: PUSH
17669: LD_INT 2
17671: NEG
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: LD_INT 1
17682: NEG
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 0
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 2
17700: PUSH
17701: LD_INT 1
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 2
17710: PUSH
17711: LD_INT 2
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 1
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 0
17730: PUSH
17731: LD_INT 2
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 1
17740: NEG
17741: PUSH
17742: LD_INT 1
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 2
17751: NEG
17752: PUSH
17753: LD_INT 0
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 2
17762: NEG
17763: PUSH
17764: LD_INT 1
17766: NEG
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 2
17774: NEG
17775: PUSH
17776: LD_INT 2
17778: NEG
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17805: LD_ADDR_VAR 0 22
17809: PUSH
17810: LD_INT 0
17812: PUSH
17813: LD_INT 0
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 0
17822: PUSH
17823: LD_INT 1
17825: NEG
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 1
17833: PUSH
17834: LD_INT 0
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 1
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: NEG
17875: PUSH
17876: LD_INT 1
17878: NEG
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 2
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: LD_INT 2
17901: NEG
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: LD_INT 1
17912: NEG
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 2
17920: PUSH
17921: LD_INT 0
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 2
17930: PUSH
17931: LD_INT 1
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 2
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 1
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 0
17960: PUSH
17961: LD_INT 2
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 1
17970: NEG
17971: PUSH
17972: LD_INT 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 2
17981: NEG
17982: PUSH
17983: LD_INT 0
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 2
17992: NEG
17993: PUSH
17994: LD_INT 1
17996: NEG
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 2
18004: NEG
18005: PUSH
18006: LD_INT 2
18008: NEG
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
18035: LD_ADDR_VAR 0 23
18039: PUSH
18040: LD_INT 0
18042: PUSH
18043: LD_INT 0
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 0
18052: PUSH
18053: LD_INT 1
18055: NEG
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: LD_INT 0
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 1
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 0
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 1
18093: NEG
18094: PUSH
18095: LD_INT 0
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 1
18104: NEG
18105: PUSH
18106: LD_INT 1
18108: NEG
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 1
18116: NEG
18117: PUSH
18118: LD_INT 2
18120: NEG
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 0
18128: PUSH
18129: LD_INT 2
18131: NEG
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: LD_INT 1
18142: NEG
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 2
18150: PUSH
18151: LD_INT 0
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 2
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: LD_INT 2
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 0
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 1
18200: NEG
18201: PUSH
18202: LD_INT 1
18204: PUSH
18205: EMPTY
18206: LIST
18207: LIST
18208: PUSH
18209: LD_INT 2
18211: NEG
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 2
18222: NEG
18223: PUSH
18224: LD_INT 1
18226: NEG
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 2
18234: NEG
18235: PUSH
18236: LD_INT 2
18238: NEG
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 2
18246: NEG
18247: PUSH
18248: LD_INT 3
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: NEG
18259: PUSH
18260: LD_INT 3
18262: NEG
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 2
18281: PUSH
18282: LD_INT 1
18284: NEG
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
18315: LD_ADDR_VAR 0 24
18319: PUSH
18320: LD_INT 0
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PUSH
18330: LD_INT 0
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 1
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: LD_INT 1
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 1
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: PUSH
18371: LD_INT 1
18373: NEG
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: NEG
18385: PUSH
18386: LD_INT 1
18388: NEG
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 1
18396: NEG
18397: PUSH
18398: LD_INT 2
18400: NEG
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: LD_INT 2
18411: NEG
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: LD_INT 1
18422: NEG
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 2
18440: PUSH
18441: LD_INT 1
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 2
18450: PUSH
18451: LD_INT 2
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: PUSH
18461: LD_INT 2
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 2
18491: NEG
18492: PUSH
18493: LD_INT 0
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 2
18502: NEG
18503: PUSH
18504: LD_INT 1
18506: NEG
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PUSH
18512: LD_INT 2
18514: NEG
18515: PUSH
18516: LD_INT 2
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: LD_INT 1
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 1
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: LD_INT 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18591: LD_ADDR_VAR 0 25
18595: PUSH
18596: LD_INT 0
18598: PUSH
18599: LD_INT 0
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: LD_INT 1
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: LD_INT 0
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PUSH
18637: LD_INT 0
18639: PUSH
18640: LD_INT 1
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: NEG
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: NEG
18661: PUSH
18662: LD_INT 1
18664: NEG
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 1
18672: NEG
18673: PUSH
18674: LD_INT 2
18676: NEG
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 0
18684: PUSH
18685: LD_INT 2
18687: NEG
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 1
18695: PUSH
18696: LD_INT 1
18698: NEG
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: LD_INT 2
18706: PUSH
18707: LD_INT 0
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 1
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: LD_INT 2
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: LD_INT 2
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: LD_INT 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 2
18767: NEG
18768: PUSH
18769: LD_INT 0
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 2
18778: NEG
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 2
18790: NEG
18791: PUSH
18792: LD_INT 2
18794: NEG
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 3
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: LD_INT 3
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 2
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: LD_INT 1
18832: PUSH
18833: LD_INT 3
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18865: LD_ADDR_VAR 0 26
18869: PUSH
18870: LD_INT 0
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 0
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PUSH
18894: LD_INT 0
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 1
18903: PUSH
18904: LD_INT 1
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 0
18913: PUSH
18914: LD_INT 1
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 1
18923: NEG
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 1
18934: NEG
18935: PUSH
18936: LD_INT 1
18938: NEG
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 1
18946: NEG
18947: PUSH
18948: LD_INT 2
18950: NEG
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 0
18958: PUSH
18959: LD_INT 2
18961: NEG
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: LD_INT 1
18972: NEG
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 2
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: LD_INT 2
18990: PUSH
18991: LD_INT 1
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PUSH
18998: LD_INT 2
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 1
19010: PUSH
19011: LD_INT 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 0
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 2
19041: NEG
19042: PUSH
19043: LD_INT 0
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: LD_INT 1
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 2
19064: NEG
19065: PUSH
19066: LD_INT 2
19068: NEG
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 3
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 1
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 1
19096: NEG
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19141: LD_ADDR_VAR 0 27
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 1
19161: NEG
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 1
19199: NEG
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 1
19210: NEG
19211: PUSH
19212: LD_INT 1
19214: NEG
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 1
19222: NEG
19223: PUSH
19224: LD_INT 2
19226: NEG
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PUSH
19232: LD_INT 0
19234: PUSH
19235: LD_INT 2
19237: NEG
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 1
19245: PUSH
19246: LD_INT 1
19248: NEG
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 2
19256: PUSH
19257: LD_INT 0
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 2
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: LD_INT 2
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: NEG
19318: PUSH
19319: LD_INT 0
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 2
19328: NEG
19329: PUSH
19330: LD_INT 1
19332: NEG
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: NEG
19341: PUSH
19342: LD_INT 2
19344: NEG
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 1
19352: NEG
19353: PUSH
19354: LD_INT 2
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: LD_INT 1
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 3
19374: NEG
19375: PUSH
19376: LD_INT 1
19378: NEG
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 3
19386: NEG
19387: PUSH
19388: LD_INT 2
19390: NEG
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19421: LD_ADDR_VAR 0 28
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 0
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 0
19438: PUSH
19439: LD_INT 1
19441: NEG
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: PUSH
19450: LD_INT 0
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 0
19469: PUSH
19470: LD_INT 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 1
19479: NEG
19480: PUSH
19481: LD_INT 0
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: NEG
19491: PUSH
19492: LD_INT 1
19494: NEG
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: NEG
19503: PUSH
19504: LD_INT 2
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 0
19514: PUSH
19515: LD_INT 2
19517: NEG
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 1
19528: NEG
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 2
19536: PUSH
19537: LD_INT 0
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 2
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: LD_INT 2
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PUSH
19564: LD_INT 1
19566: PUSH
19567: LD_INT 2
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: PUSH
19574: LD_INT 0
19576: PUSH
19577: LD_INT 2
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 1
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 2
19597: NEG
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 2
19608: NEG
19609: PUSH
19610: LD_INT 1
19612: NEG
19613: PUSH
19614: EMPTY
19615: LIST
19616: LIST
19617: PUSH
19618: LD_INT 2
19620: NEG
19621: PUSH
19622: LD_INT 2
19624: NEG
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: LD_INT 2
19632: NEG
19633: PUSH
19634: LD_INT 3
19636: NEG
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: LD_INT 3
19648: NEG
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 3
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 3
19668: NEG
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19703: LD_ADDR_VAR 0 29
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: LD_INT 0
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 0
19720: PUSH
19721: LD_INT 1
19723: NEG
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: LD_INT 0
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: LD_INT 1
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 0
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 1
19772: NEG
19773: PUSH
19774: LD_INT 1
19776: NEG
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 1
19784: NEG
19785: PUSH
19786: LD_INT 2
19788: NEG
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 0
19796: PUSH
19797: LD_INT 2
19799: NEG
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 1
19807: PUSH
19808: LD_INT 1
19810: NEG
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 0
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 2
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 2
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 2
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 2
19893: NEG
19894: PUSH
19895: LD_INT 3
19897: NEG
19898: PUSH
19899: EMPTY
19900: LIST
19901: LIST
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 1
19926: PUSH
19927: LD_INT 3
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 3
19947: NEG
19948: PUSH
19949: LD_INT 2
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19982: LD_ADDR_VAR 0 30
19986: PUSH
19987: LD_INT 0
19989: PUSH
19990: LD_INT 0
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 0
19999: PUSH
20000: LD_INT 1
20002: NEG
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 1
20010: PUSH
20011: LD_INT 0
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 0
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 1
20040: NEG
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 1
20051: NEG
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 1
20063: NEG
20064: PUSH
20065: LD_INT 2
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 0
20075: PUSH
20076: LD_INT 2
20078: NEG
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: PUSH
20087: LD_INT 1
20089: NEG
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 2
20097: PUSH
20098: LD_INT 0
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 2
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: NEG
20149: PUSH
20150: LD_INT 0
20152: PUSH
20153: EMPTY
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: NEG
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: NEG
20172: PUSH
20173: LD_INT 3
20175: NEG
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 1
20183: PUSH
20184: LD_INT 2
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 3
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: LD_INT 3
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: NEG
20215: PUSH
20216: LD_INT 1
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 3
20225: NEG
20226: PUSH
20227: LD_INT 1
20229: NEG
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20260: LD_ADDR_VAR 0 31
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 1
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 0
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: LD_INT 1
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: LD_INT 2
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: PUSH
20392: LD_INT 1
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: LD_INT 2
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 1
20414: NEG
20415: PUSH
20416: LD_INT 1
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: NEG
20426: PUSH
20427: LD_INT 1
20429: NEG
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 2
20437: NEG
20438: PUSH
20439: LD_INT 2
20441: NEG
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 2
20449: NEG
20450: PUSH
20451: LD_INT 3
20453: NEG
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: LD_INT 2
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: PUSH
20470: LD_INT 3
20472: PUSH
20473: LD_INT 1
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: LD_INT 3
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PUSH
20490: LD_INT 1
20492: NEG
20493: PUSH
20494: LD_INT 2
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 3
20503: NEG
20504: PUSH
20505: LD_INT 2
20507: NEG
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20538: LD_ADDR_VAR 0 32
20542: PUSH
20543: LD_INT 0
20545: PUSH
20546: LD_INT 0
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: NEG
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 1
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: PUSH
20577: LD_INT 1
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PUSH
20584: LD_INT 0
20586: PUSH
20587: LD_INT 1
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 1
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 1
20619: NEG
20620: PUSH
20621: LD_INT 2
20623: NEG
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 0
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: LD_INT 1
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 2
20653: PUSH
20654: LD_INT 1
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 2
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 1
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 1
20693: NEG
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 2
20704: NEG
20705: PUSH
20706: LD_INT 0
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: LD_INT 2
20715: NEG
20716: PUSH
20717: LD_INT 1
20719: NEG
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 1
20727: NEG
20728: PUSH
20729: LD_INT 3
20731: NEG
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 1
20739: PUSH
20740: LD_INT 2
20742: NEG
20743: PUSH
20744: EMPTY
20745: LIST
20746: LIST
20747: PUSH
20748: LD_INT 3
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 2
20760: PUSH
20761: LD_INT 3
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: LD_INT 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 3
20781: NEG
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: LIST
20805: LIST
20806: LIST
20807: LIST
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20816: LD_ADDR_VAR 0 33
20820: PUSH
20821: LD_INT 0
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: LD_INT 1
20836: NEG
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 0
20864: PUSH
20865: LD_INT 1
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: NEG
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: NEG
20886: PUSH
20887: LD_INT 1
20889: NEG
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 2
20901: NEG
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: LD_INT 1
20912: NEG
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: PUSH
20918: LD_INT 2
20920: PUSH
20921: LD_INT 0
20923: PUSH
20924: EMPTY
20925: LIST
20926: LIST
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: LD_INT 1
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 1
20940: PUSH
20941: LD_INT 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 1
20960: NEG
20961: PUSH
20962: LD_INT 1
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 2
20971: NEG
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 2
20982: NEG
20983: PUSH
20984: LD_INT 1
20986: NEG
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: NEG
20995: PUSH
20996: LD_INT 2
20998: NEG
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: NEG
21007: PUSH
21008: LD_INT 3
21010: NEG
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: LD_INT 1
21021: NEG
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 3
21029: PUSH
21030: LD_INT 1
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: LD_INT 3
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: LD_INT 2
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 3
21060: NEG
21061: PUSH
21062: LD_INT 2
21064: NEG
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: LIST
21093: LIST
21094: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21095: LD_ADDR_VAR 0 34
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 1
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: LD_INT 1
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 1
21164: NEG
21165: PUSH
21166: LD_INT 1
21168: NEG
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: LD_INT 1
21176: NEG
21177: PUSH
21178: LD_INT 2
21180: NEG
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: LD_INT 2
21191: NEG
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 1
21199: PUSH
21200: LD_INT 1
21202: NEG
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: LD_INT 1
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 1
21230: PUSH
21231: LD_INT 2
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 1
21240: NEG
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 2
21251: NEG
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: LD_INT 2
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 1
21286: NEG
21287: PUSH
21288: LD_INT 3
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 1
21298: PUSH
21299: LD_INT 2
21301: NEG
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: PUSH
21307: LD_INT 3
21309: PUSH
21310: LD_INT 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 2
21319: PUSH
21320: LD_INT 3
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: NEG
21330: PUSH
21331: LD_INT 1
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: LD_INT 3
21340: NEG
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21375: LD_ADDR_VAR 0 35
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 0
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 1
21403: PUSH
21404: LD_INT 0
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 1
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 0
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: LD_INT 1
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 2
21466: NEG
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21487: LD_ADDR_VAR 0 36
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PUSH
21502: LD_INT 0
21504: PUSH
21505: LD_INT 1
21507: NEG
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: PUSH
21513: LD_INT 1
21515: PUSH
21516: LD_INT 0
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: LD_INT 1
21525: PUSH
21526: LD_INT 1
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 0
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 1
21545: NEG
21546: PUSH
21547: LD_INT 0
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: LD_INT 1
21556: NEG
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: LD_INT 2
21572: NEG
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 1
21580: PUSH
21581: LD_INT 2
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21599: LD_ADDR_VAR 0 37
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: LD_INT 0
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: LD_INT 1
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 0
21647: PUSH
21648: LD_INT 1
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PUSH
21655: LD_INT 1
21657: NEG
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: PUSH
21666: LD_INT 1
21668: NEG
21669: PUSH
21670: LD_INT 1
21672: NEG
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 1
21683: NEG
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 1
21691: NEG
21692: PUSH
21693: LD_INT 1
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21711: LD_ADDR_VAR 0 38
21715: PUSH
21716: LD_INT 0
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: LD_INT 1
21731: NEG
21732: PUSH
21733: EMPTY
21734: LIST
21735: LIST
21736: PUSH
21737: LD_INT 1
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: LD_INT 1
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 1
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 1
21769: NEG
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: NEG
21781: PUSH
21782: LD_INT 1
21784: NEG
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 2
21802: NEG
21803: PUSH
21804: LD_INT 1
21806: NEG
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21823: LD_ADDR_VAR 0 39
21827: PUSH
21828: LD_INT 0
21830: PUSH
21831: LD_INT 0
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 0
21840: PUSH
21841: LD_INT 1
21843: NEG
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: LD_INT 1
21851: PUSH
21852: LD_INT 0
21854: PUSH
21855: EMPTY
21856: LIST
21857: LIST
21858: PUSH
21859: LD_INT 1
21861: PUSH
21862: LD_INT 1
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: LD_INT 0
21871: PUSH
21872: LD_INT 1
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PUSH
21879: LD_INT 1
21881: NEG
21882: PUSH
21883: LD_INT 0
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: LD_INT 1
21892: NEG
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 2
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21935: LD_ADDR_VAR 0 40
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: LD_INT 0
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 0
21952: PUSH
21953: LD_INT 1
21955: NEG
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 1
21963: PUSH
21964: LD_INT 0
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: LD_INT 1
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: LD_INT 1
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: LD_INT 1
22008: NEG
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: LD_INT 1
22019: NEG
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: NEG
22028: PUSH
22029: LD_INT 1
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22047: LD_ADDR_VAR 0 41
22051: PUSH
22052: LD_INT 0
22054: PUSH
22055: LD_INT 0
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 0
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: LD_INT 0
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: PUSH
22083: LD_INT 1
22085: PUSH
22086: LD_INT 1
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PUSH
22093: LD_INT 0
22095: PUSH
22096: LD_INT 1
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 1
22105: NEG
22106: PUSH
22107: LD_INT 0
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 1
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 1
22128: NEG
22129: PUSH
22130: LD_INT 2
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 1
22140: PUSH
22141: LD_INT 1
22143: NEG
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 2
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: LD_INT 2
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: LD_INT 1
22191: NEG
22192: PUSH
22193: LD_INT 1
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 2
22202: NEG
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 2
22213: NEG
22214: PUSH
22215: LD_INT 1
22217: NEG
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 2
22225: NEG
22226: PUSH
22227: LD_INT 2
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 2
22237: NEG
22238: PUSH
22239: LD_INT 3
22241: NEG
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: LD_INT 1
22252: NEG
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 3
22260: PUSH
22261: LD_INT 0
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 3
22270: PUSH
22271: LD_INT 1
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: LD_INT 3
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 3
22290: PUSH
22291: LD_INT 3
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 2
22310: NEG
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 3
22321: NEG
22322: PUSH
22323: LD_INT 0
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 3
22332: NEG
22333: PUSH
22334: LD_INT 1
22336: NEG
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 3
22344: NEG
22345: PUSH
22346: LD_INT 2
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 3
22356: NEG
22357: PUSH
22358: LD_INT 3
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22397: LD_ADDR_VAR 0 42
22401: PUSH
22402: LD_INT 0
22404: PUSH
22405: LD_INT 0
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: LD_INT 0
22414: PUSH
22415: LD_INT 1
22417: NEG
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: LD_INT 1
22425: PUSH
22426: LD_INT 0
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 1
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 0
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 1
22455: NEG
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 1
22466: NEG
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 1
22478: NEG
22479: PUSH
22480: LD_INT 2
22482: NEG
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: LD_INT 2
22493: NEG
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 1
22501: PUSH
22502: LD_INT 1
22504: NEG
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: EMPTY
22517: LIST
22518: LIST
22519: PUSH
22520: LD_INT 2
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 1
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 2
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: NEG
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 2
22575: NEG
22576: PUSH
22577: LD_INT 2
22579: NEG
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 2
22587: NEG
22588: PUSH
22589: LD_INT 3
22591: NEG
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: LD_INT 3
22603: NEG
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 0
22611: PUSH
22612: LD_INT 3
22614: NEG
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 1
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: PUSH
22634: LD_INT 2
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 3
22643: PUSH
22644: LD_INT 3
22646: PUSH
22647: EMPTY
22648: LIST
22649: LIST
22650: PUSH
22651: LD_INT 2
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: LD_INT 3
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: LD_INT 3
22694: NEG
22695: PUSH
22696: LD_INT 2
22698: NEG
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 3
22706: NEG
22707: PUSH
22708: LD_INT 3
22710: NEG
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22747: LD_ADDR_VAR 0 43
22751: PUSH
22752: LD_INT 0
22754: PUSH
22755: LD_INT 0
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PUSH
22776: LD_INT 0
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 1
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 1
22816: NEG
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: LD_INT 2
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: LD_INT 2
22843: NEG
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 1
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: LD_INT 0
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 2
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 1
22882: PUSH
22883: LD_INT 2
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 0
22892: PUSH
22893: LD_INT 2
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 1
22902: NEG
22903: PUSH
22904: LD_INT 1
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 2
22924: NEG
22925: PUSH
22926: LD_INT 1
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: LD_INT 3
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 3
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 2
22970: PUSH
22971: LD_INT 1
22973: NEG
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: LD_INT 0
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 3
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: LD_INT 3
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 0
23011: PUSH
23012: LD_INT 3
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 2
23032: NEG
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 3
23043: NEG
23044: PUSH
23045: LD_INT 0
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 3
23054: NEG
23055: PUSH
23056: LD_INT 1
23058: NEG
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23095: LD_ADDR_VAR 0 44
23099: PUSH
23100: LD_INT 0
23102: PUSH
23103: LD_INT 0
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 0
23112: PUSH
23113: LD_INT 1
23115: NEG
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: LD_INT 0
23126: PUSH
23127: EMPTY
23128: LIST
23129: LIST
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 0
23143: PUSH
23144: LD_INT 1
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 1
23153: NEG
23154: PUSH
23155: LD_INT 0
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 1
23164: NEG
23165: PUSH
23166: LD_INT 1
23168: NEG
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 1
23176: NEG
23177: PUSH
23178: LD_INT 2
23180: NEG
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 1
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 2
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 2
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 2
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 1
23239: NEG
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: NEG
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 2
23261: NEG
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 2
23273: NEG
23274: PUSH
23275: LD_INT 2
23277: NEG
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: LD_INT 3
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: LD_INT 1
23300: NEG
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: LD_INT 3
23308: PUSH
23309: LD_INT 0
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 3
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 3
23338: PUSH
23339: LD_INT 3
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 3
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: LD_INT 1
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 3
23369: NEG
23370: PUSH
23371: LD_INT 0
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 3
23380: NEG
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 3
23392: NEG
23393: PUSH
23394: LD_INT 2
23396: NEG
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 3
23404: NEG
23405: PUSH
23406: LD_INT 3
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23445: LD_ADDR_VAR 0 45
23449: PUSH
23450: LD_INT 0
23452: PUSH
23453: LD_INT 0
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 1
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 0
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 1
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 0
23493: PUSH
23494: LD_INT 1
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: LD_INT 0
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 1
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 1
23526: NEG
23527: PUSH
23528: LD_INT 2
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 0
23538: PUSH
23539: LD_INT 2
23541: NEG
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: LD_INT 1
23549: PUSH
23550: LD_INT 1
23552: NEG
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: LD_INT 2
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 0
23590: PUSH
23591: LD_INT 2
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: NEG
23612: PUSH
23613: LD_INT 1
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: LD_INT 2
23623: NEG
23624: PUSH
23625: LD_INT 2
23627: NEG
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: LD_INT 3
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 1
23647: NEG
23648: PUSH
23649: LD_INT 3
23651: NEG
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 3
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 2
23673: NEG
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 3
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 3
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: PUSH
23702: LD_INT 3
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 2
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 3
23742: NEG
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 3
23754: NEG
23755: PUSH
23756: LD_INT 3
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23795: LD_ADDR_VAR 0 46
23799: PUSH
23800: LD_INT 0
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: PUSH
23824: LD_INT 0
23826: PUSH
23827: EMPTY
23828: LIST
23829: LIST
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 1
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: LD_INT 1
23868: NEG
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 1
23876: NEG
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 0
23888: PUSH
23889: LD_INT 2
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: PUSH
23900: LD_INT 1
23902: NEG
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 2
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: EMPTY
23935: LIST
23936: LIST
23937: PUSH
23938: LD_INT 0
23940: PUSH
23941: LD_INT 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: NEG
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 2
23961: NEG
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 2
23972: NEG
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 3
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 3
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 3
24029: PUSH
24030: LD_INT 0
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 3
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 1
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: LD_INT 3
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 2
24080: NEG
24081: PUSH
24082: LD_INT 1
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PUSH
24089: LD_INT 3
24091: NEG
24092: PUSH
24093: LD_INT 0
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: NEG
24103: PUSH
24104: LD_INT 1
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24143: LD_ADDR_VAR 0 47
24147: PUSH
24148: LD_INT 0
24150: PUSH
24151: LD_INT 0
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 0
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: EMPTY
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 1
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 1
24181: PUSH
24182: LD_INT 1
24184: PUSH
24185: EMPTY
24186: LIST
24187: LIST
24188: PUSH
24189: LD_INT 0
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: EMPTY
24196: LIST
24197: LIST
24198: PUSH
24199: LD_INT 1
24201: NEG
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 1
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 2
24228: NEG
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: LD_INT 2
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 1
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 2
24258: NEG
24259: PUSH
24260: LD_INT 1
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 2
24270: NEG
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
24294: LD_ADDR_VAR 0 48
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: LD_INT 1
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 1
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 0
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 1
24352: NEG
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: NEG
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 1
24375: NEG
24376: PUSH
24377: LD_INT 2
24379: NEG
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: PUSH
24385: LD_INT 0
24387: PUSH
24388: LD_INT 2
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 1
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 2
24409: PUSH
24410: LD_INT 0
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 2
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24441: LD_ADDR_VAR 0 49
24445: PUSH
24446: LD_INT 0
24448: PUSH
24449: LD_INT 0
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 1
24461: NEG
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: NEG
24511: PUSH
24512: LD_INT 1
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24585: LD_ADDR_VAR 0 50
24589: PUSH
24590: LD_INT 0
24592: PUSH
24593: LD_INT 0
24595: PUSH
24596: EMPTY
24597: LIST
24598: LIST
24599: PUSH
24600: LD_INT 0
24602: PUSH
24603: LD_INT 1
24605: NEG
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 1
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 0
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 1
24643: NEG
24644: PUSH
24645: LD_INT 0
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 1
24654: NEG
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 2
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 0
24696: PUSH
24697: LD_INT 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: LD_INT 1
24706: NEG
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24729: LD_ADDR_VAR 0 51
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: LD_INT 0
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: LD_INT 1
24749: NEG
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 1
24798: NEG
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 1
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 1
24830: NEG
24831: PUSH
24832: LD_INT 1
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 2
24841: NEG
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: NEG
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24876: LD_ADDR_VAR 0 52
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 1
24896: NEG
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: PUSH
24902: LD_INT 1
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 1
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: LD_INT 1
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 1
24934: NEG
24935: PUSH
24936: LD_INT 0
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 1
24945: NEG
24946: PUSH
24947: LD_INT 1
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 1
24957: NEG
24958: PUSH
24959: LD_INT 2
24961: NEG
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: NEG
24981: PUSH
24982: LD_INT 0
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: NEG
24992: PUSH
24993: LD_INT 1
24995: NEG
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: NEG
25004: PUSH
25005: LD_INT 2
25007: NEG
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25027: LD_ADDR_VAR 0 53
25031: PUSH
25032: LD_INT 0
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 1
25047: NEG
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 1
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 1
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 0
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 1
25085: NEG
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: LD_INT 1
25096: NEG
25097: PUSH
25098: LD_INT 1
25100: NEG
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 2
25112: NEG
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 0
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 1
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: LD_INT 0
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 2
25214: NEG
25215: PUSH
25216: LD_INT 1
25218: NEG
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: NEG
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25257: LD_ADDR_VAR 0 54
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 0
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 1
25285: PUSH
25286: LD_INT 0
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 1
25295: PUSH
25296: LD_INT 1
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 0
25305: PUSH
25306: LD_INT 1
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 1
25315: NEG
25316: PUSH
25317: LD_INT 0
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: NEG
25339: PUSH
25340: LD_INT 2
25342: NEG
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: PUSH
25348: LD_INT 0
25350: PUSH
25351: LD_INT 2
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 2
25372: PUSH
25373: LD_INT 0
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 2
25392: PUSH
25393: LD_INT 2
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: LD_INT 2
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: LD_INT 0
25412: PUSH
25413: LD_INT 2
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 1
25422: NEG
25423: PUSH
25424: LD_INT 1
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: PUSH
25431: LD_INT 2
25433: NEG
25434: PUSH
25435: LD_INT 0
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 2
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 2
25456: NEG
25457: PUSH
25458: LD_INT 2
25460: NEG
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25487: LD_ADDR_VAR 0 55
25491: PUSH
25492: LD_INT 0
25494: PUSH
25495: LD_INT 0
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 0
25504: PUSH
25505: LD_INT 1
25507: NEG
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 1
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: PUSH
25526: LD_INT 1
25528: PUSH
25529: EMPTY
25530: LIST
25531: LIST
25532: PUSH
25533: LD_INT 0
25535: PUSH
25536: LD_INT 1
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: LD_INT 1
25545: NEG
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PUSH
25554: LD_INT 1
25556: NEG
25557: PUSH
25558: LD_INT 1
25560: NEG
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 1
25568: NEG
25569: PUSH
25570: LD_INT 2
25572: NEG
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 0
25580: PUSH
25581: LD_INT 2
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: LD_INT 1
25594: NEG
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 2
25602: PUSH
25603: LD_INT 0
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 2
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: LD_INT 2
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: NEG
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 2
25674: NEG
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: NEG
25687: PUSH
25688: LD_INT 2
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25717: LD_ADDR_VAR 0 56
25721: PUSH
25722: LD_INT 0
25724: PUSH
25725: LD_INT 0
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 0
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 1
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: LD_INT 1
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 1
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 1
25790: NEG
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: LD_INT 2
25802: NEG
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 1
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 2
25832: PUSH
25833: LD_INT 0
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 2
25852: PUSH
25853: LD_INT 2
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 1
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 0
25872: PUSH
25873: LD_INT 2
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 1
25882: NEG
25883: PUSH
25884: LD_INT 1
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 2
25893: NEG
25894: PUSH
25895: LD_INT 0
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 2
25904: NEG
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 2
25916: NEG
25917: PUSH
25918: LD_INT 2
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25947: LD_ADDR_VAR 0 57
25951: PUSH
25952: LD_INT 0
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: PUSH
25976: LD_INT 0
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: LD_INT 1
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 0
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: NEG
26017: PUSH
26018: LD_INT 1
26020: NEG
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: PUSH
26026: LD_INT 1
26028: NEG
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: PUSH
26038: LD_INT 0
26040: PUSH
26041: LD_INT 2
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 2
26062: PUSH
26063: LD_INT 0
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: LD_INT 2
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 0
26102: PUSH
26103: LD_INT 2
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: NEG
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: NEG
26124: PUSH
26125: LD_INT 0
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 2
26134: NEG
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: NEG
26147: PUSH
26148: LD_INT 2
26150: NEG
26151: PUSH
26152: EMPTY
26153: LIST
26154: LIST
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: LIST
26173: LIST
26174: LIST
26175: LIST
26176: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26177: LD_ADDR_VAR 0 58
26181: PUSH
26182: LD_INT 0
26184: PUSH
26185: LD_INT 0
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 1
26215: PUSH
26216: LD_INT 1
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: LD_INT 0
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: LD_INT 1
26250: NEG
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: LD_INT 2
26262: NEG
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 0
26270: PUSH
26271: LD_INT 2
26273: NEG
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: LD_INT 2
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 2
26312: PUSH
26313: LD_INT 2
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 2
26353: NEG
26354: PUSH
26355: LD_INT 0
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 2
26376: NEG
26377: PUSH
26378: LD_INT 2
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26407: LD_ADDR_VAR 0 59
26411: PUSH
26412: LD_INT 0
26414: PUSH
26415: LD_INT 0
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 1
26427: NEG
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 0
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 1
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 0
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 1
26465: NEG
26466: PUSH
26467: LD_INT 0
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: LIST
26493: LIST
26494: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26495: LD_ADDR_VAR 0 60
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: LD_INT 0
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: EMPTY
26518: LIST
26519: LIST
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 1
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: LD_INT 1
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: NEG
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: NEG
26565: PUSH
26566: LD_INT 1
26568: NEG
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26583: LD_ADDR_VAR 0 61
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 0
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: PUSH
26612: LD_INT 0
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: LD_INT 1
26624: PUSH
26625: EMPTY
26626: LIST
26627: LIST
26628: PUSH
26629: LD_INT 0
26631: PUSH
26632: LD_INT 1
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 0
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26671: LD_ADDR_VAR 0 62
26675: PUSH
26676: LD_INT 0
26678: PUSH
26679: LD_INT 0
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 1
26691: NEG
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: LD_INT 0
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26759: LD_ADDR_VAR 0 63
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: LD_INT 1
26779: NEG
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 0
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: NEG
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26847: LD_ADDR_VAR 0 64
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 0
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 1
26875: PUSH
26876: LD_INT 0
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: LD_INT 1
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 1
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: LD_INT 0
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: LD_INT 1
26920: NEG
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: ST_TO_ADDR
// end ; 1 :
26935: GO 32832
26937: LD_INT 1
26939: DOUBLE
26940: EQUAL
26941: IFTRUE 26945
26943: GO 29568
26945: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26946: LD_ADDR_VAR 0 11
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: LD_INT 3
26957: NEG
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 0
26965: PUSH
26966: LD_INT 3
26968: NEG
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: LD_INT 2
26979: NEG
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: LIST
26989: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26990: LD_ADDR_VAR 0 12
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 3
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 3
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27031: LD_ADDR_VAR 0 13
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 3
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: PUSH
27059: LD_INT 3
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: LIST
27070: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27071: LD_ADDR_VAR 0 14
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 3
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 3
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: LD_INT 2
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27112: LD_ADDR_VAR 0 15
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 3
27130: NEG
27131: PUSH
27132: LD_INT 0
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 3
27141: NEG
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27156: LD_ADDR_VAR 0 16
27160: PUSH
27161: LD_INT 2
27163: NEG
27164: PUSH
27165: LD_INT 3
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 3
27175: NEG
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 3
27187: NEG
27188: PUSH
27189: LD_INT 3
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
27202: LD_ADDR_VAR 0 17
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: LD_INT 3
27213: NEG
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: LD_INT 3
27224: NEG
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: LD_INT 2
27235: NEG
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
27246: LD_ADDR_VAR 0 18
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: LD_INT 1
27256: NEG
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 3
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 3
27274: PUSH
27275: LD_INT 1
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: LIST
27286: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
27287: LD_ADDR_VAR 0 19
27291: PUSH
27292: LD_INT 3
27294: PUSH
27295: LD_INT 2
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 3
27304: PUSH
27305: LD_INT 3
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 2
27314: PUSH
27315: LD_INT 3
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: LIST
27326: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
27327: LD_ADDR_VAR 0 20
27331: PUSH
27332: LD_INT 1
27334: PUSH
27335: LD_INT 3
27337: PUSH
27338: EMPTY
27339: LIST
27340: LIST
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: LD_INT 3
27347: PUSH
27348: EMPTY
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: NEG
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27368: LD_ADDR_VAR 0 21
27372: PUSH
27373: LD_INT 2
27375: NEG
27376: PUSH
27377: LD_INT 1
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 3
27386: NEG
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 3
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27412: LD_ADDR_VAR 0 22
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: LD_INT 3
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 3
27443: NEG
27444: PUSH
27445: LD_INT 3
27447: NEG
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: LIST
27457: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27458: LD_ADDR_VAR 0 23
27462: PUSH
27463: LD_INT 0
27465: PUSH
27466: LD_INT 3
27468: NEG
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 1
27476: NEG
27477: PUSH
27478: LD_INT 4
27480: NEG
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: PUSH
27489: LD_INT 3
27491: NEG
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27502: LD_ADDR_VAR 0 24
27506: PUSH
27507: LD_INT 3
27509: PUSH
27510: LD_INT 0
27512: PUSH
27513: EMPTY
27514: LIST
27515: LIST
27516: PUSH
27517: LD_INT 3
27519: PUSH
27520: LD_INT 1
27522: NEG
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 4
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27543: LD_ADDR_VAR 0 25
27547: PUSH
27548: LD_INT 3
27550: PUSH
27551: LD_INT 3
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 4
27560: PUSH
27561: LD_INT 3
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: LD_INT 4
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27583: LD_ADDR_VAR 0 26
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 3
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 4
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: NEG
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27624: LD_ADDR_VAR 0 27
27628: PUSH
27629: LD_INT 3
27631: NEG
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 3
27642: NEG
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 4
27653: NEG
27654: PUSH
27655: LD_INT 1
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: LIST
27667: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27668: LD_ADDR_VAR 0 28
27672: PUSH
27673: LD_INT 3
27675: NEG
27676: PUSH
27677: LD_INT 3
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 3
27687: NEG
27688: PUSH
27689: LD_INT 4
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 4
27699: NEG
27700: PUSH
27701: LD_INT 3
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27714: LD_ADDR_VAR 0 29
27718: PUSH
27719: LD_INT 1
27721: NEG
27722: PUSH
27723: LD_INT 3
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: LD_INT 0
27733: PUSH
27734: LD_INT 3
27736: NEG
27737: PUSH
27738: EMPTY
27739: LIST
27740: LIST
27741: PUSH
27742: LD_INT 1
27744: PUSH
27745: LD_INT 2
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 4
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 4
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 3
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 5
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 5
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 4
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: LD_INT 6
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: LD_INT 6
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 1
27846: PUSH
27847: LD_INT 5
27849: NEG
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27869: LD_ADDR_VAR 0 30
27873: PUSH
27874: LD_INT 2
27876: PUSH
27877: LD_INT 1
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 0
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 4
27918: PUSH
27919: LD_INT 0
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 4
27928: PUSH
27929: LD_INT 1
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 4
27938: PUSH
27939: LD_INT 1
27941: NEG
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 5
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 5
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 5
27969: PUSH
27970: LD_INT 1
27972: NEG
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 6
27980: PUSH
27981: LD_INT 0
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 6
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
28012: LD_ADDR_VAR 0 31
28016: PUSH
28017: LD_INT 3
28019: PUSH
28020: LD_INT 2
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 3
28029: PUSH
28030: LD_INT 3
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 3
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 4
28049: PUSH
28050: LD_INT 3
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 4
28059: PUSH
28060: LD_INT 4
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PUSH
28067: LD_INT 3
28069: PUSH
28070: LD_INT 4
28072: PUSH
28073: EMPTY
28074: LIST
28075: LIST
28076: PUSH
28077: LD_INT 5
28079: PUSH
28080: LD_INT 4
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: PUSH
28087: LD_INT 5
28089: PUSH
28090: LD_INT 5
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 4
28099: PUSH
28100: LD_INT 5
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 6
28109: PUSH
28110: LD_INT 5
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 6
28119: PUSH
28120: LD_INT 6
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 5
28129: PUSH
28130: LD_INT 6
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
28151: LD_ADDR_VAR 0 32
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: LD_INT 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: LD_INT 4
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: LD_INT 4
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 3
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: PUSH
28221: LD_INT 5
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 5
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 1
28240: NEG
28241: PUSH
28242: LD_INT 4
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: LD_INT 6
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: LD_INT 6
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 1
28271: NEG
28272: PUSH
28273: LD_INT 5
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: EMPTY
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
28294: LD_ADDR_VAR 0 33
28298: PUSH
28299: LD_INT 2
28301: NEG
28302: PUSH
28303: LD_INT 1
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: PUSH
28310: LD_INT 3
28312: NEG
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 3
28323: NEG
28324: PUSH
28325: LD_INT 1
28327: NEG
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 3
28335: NEG
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 4
28346: NEG
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 4
28357: NEG
28358: PUSH
28359: LD_INT 1
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 4
28369: NEG
28370: PUSH
28371: LD_INT 1
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 5
28380: NEG
28381: PUSH
28382: LD_INT 0
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 5
28391: NEG
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 5
28403: NEG
28404: PUSH
28405: LD_INT 1
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 6
28414: NEG
28415: PUSH
28416: LD_INT 0
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 6
28425: NEG
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28449: LD_ADDR_VAR 0 34
28453: PUSH
28454: LD_INT 2
28456: NEG
28457: PUSH
28458: LD_INT 3
28460: NEG
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 3
28468: NEG
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 3
28480: NEG
28481: PUSH
28482: LD_INT 3
28484: NEG
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: NEG
28493: PUSH
28494: LD_INT 4
28496: NEG
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PUSH
28502: LD_INT 4
28504: NEG
28505: PUSH
28506: LD_INT 3
28508: NEG
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 4
28516: NEG
28517: PUSH
28518: LD_INT 4
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 4
28528: NEG
28529: PUSH
28530: LD_INT 5
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 5
28540: NEG
28541: PUSH
28542: LD_INT 4
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 5
28552: NEG
28553: PUSH
28554: LD_INT 5
28556: NEG
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 5
28564: NEG
28565: PUSH
28566: LD_INT 6
28568: NEG
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 6
28576: NEG
28577: PUSH
28578: LD_INT 5
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 6
28588: NEG
28589: PUSH
28590: LD_INT 6
28592: NEG
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28612: LD_ADDR_VAR 0 41
28616: PUSH
28617: LD_INT 0
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 1
28630: NEG
28631: PUSH
28632: LD_INT 3
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: LD_INT 2
28645: NEG
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28656: LD_ADDR_VAR 0 42
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: LD_INT 1
28676: NEG
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 3
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28697: LD_ADDR_VAR 0 43
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 3
28714: PUSH
28715: LD_INT 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: PUSH
28725: LD_INT 3
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28737: LD_ADDR_VAR 0 44
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 1
28754: PUSH
28755: LD_INT 3
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: NEG
28765: PUSH
28766: LD_INT 2
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28778: LD_ADDR_VAR 0 45
28782: PUSH
28783: LD_INT 2
28785: NEG
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 2
28796: NEG
28797: PUSH
28798: LD_INT 1
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 3
28807: NEG
28808: PUSH
28809: LD_INT 1
28811: NEG
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: LIST
28821: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28822: LD_ADDR_VAR 0 46
28826: PUSH
28827: LD_INT 2
28829: NEG
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 2
28841: NEG
28842: PUSH
28843: LD_INT 3
28845: NEG
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 3
28853: NEG
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: LIST
28867: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28868: LD_ADDR_VAR 0 47
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: LD_INT 3
28879: NEG
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 1
28887: NEG
28888: PUSH
28889: LD_INT 3
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28901: LD_ADDR_VAR 0 48
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: LD_INT 2
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 2
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28932: LD_ADDR_VAR 0 49
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: LD_INT 1
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: LD_INT 2
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28961: LD_ADDR_VAR 0 50
28965: PUSH
28966: LD_INT 2
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: EMPTY
28987: LIST
28988: LIST
28989: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28990: LD_ADDR_VAR 0 51
28994: PUSH
28995: LD_INT 1
28997: NEG
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 2
29008: NEG
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29021: LD_ADDR_VAR 0 52
29025: PUSH
29026: LD_INT 3
29028: NEG
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: PUSH
29038: LD_INT 3
29040: NEG
29041: PUSH
29042: LD_INT 2
29044: NEG
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29054: LD_ADDR_VAR 0 53
29058: PUSH
29059: LD_INT 1
29061: NEG
29062: PUSH
29063: LD_INT 3
29065: NEG
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 3
29076: NEG
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 2
29087: NEG
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29098: LD_ADDR_VAR 0 54
29102: PUSH
29103: LD_INT 2
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 3
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 3
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29139: LD_ADDR_VAR 0 55
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 3
29156: PUSH
29157: LD_INT 3
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 2
29166: PUSH
29167: LD_INT 3
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29179: LD_ADDR_VAR 0 56
29183: PUSH
29184: LD_INT 1
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: LD_INT 3
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: LIST
29219: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29220: LD_ADDR_VAR 0 57
29224: PUSH
29225: LD_INT 2
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 3
29249: NEG
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: LIST
29263: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29264: LD_ADDR_VAR 0 58
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: LD_INT 3
29275: NEG
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 3
29283: NEG
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: LD_INT 3
29299: NEG
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
29310: LD_ADDR_VAR 0 59
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 1
29343: NEG
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: LIST
29353: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29354: LD_ADDR_VAR 0 60
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: PUSH
29370: LD_INT 2
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 2
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29395: LD_ADDR_VAR 0 61
29399: PUSH
29400: LD_INT 2
29402: PUSH
29403: LD_INT 1
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: PUSH
29410: LD_INT 2
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29435: LD_ADDR_VAR 0 62
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: LD_INT 2
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 2
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 1
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: LIST
29475: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29476: LD_ADDR_VAR 0 63
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 2
29494: NEG
29495: PUSH
29496: LD_INT 0
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29520: LD_ADDR_VAR 0 64
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 2
29539: NEG
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: EMPTY
29562: LIST
29563: LIST
29564: LIST
29565: ST_TO_ADDR
// end ; 2 :
29566: GO 32832
29568: LD_INT 2
29570: DOUBLE
29571: EQUAL
29572: IFTRUE 29576
29574: GO 32831
29576: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29577: LD_ADDR_VAR 0 29
29581: PUSH
29582: LD_INT 4
29584: PUSH
29585: LD_INT 0
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 4
29594: PUSH
29595: LD_INT 1
29597: NEG
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 5
29605: PUSH
29606: LD_INT 0
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 5
29615: PUSH
29616: LD_INT 1
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 4
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 3
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 3
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 5
29667: PUSH
29668: LD_INT 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 3
29677: PUSH
29678: LD_INT 3
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 3
29687: PUSH
29688: LD_INT 2
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 4
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 4
29707: PUSH
29708: LD_INT 4
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 3
29717: PUSH
29718: LD_INT 4
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 2
29727: PUSH
29728: LD_INT 3
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PUSH
29735: LD_INT 2
29737: PUSH
29738: LD_INT 2
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: LD_INT 2
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 4
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 4
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 3
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 4
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: LD_INT 5
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 0
29807: PUSH
29808: LD_INT 5
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: LD_INT 4
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PUSH
29826: LD_INT 1
29828: NEG
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 5
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 2
29849: NEG
29850: PUSH
29851: LD_INT 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 3
29860: NEG
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 3
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: NEG
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 2
29894: NEG
29895: PUSH
29896: LD_INT 1
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: LD_INT 3
29905: NEG
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 4
29916: NEG
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 4
29927: NEG
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 4
29939: NEG
29940: PUSH
29941: LD_INT 2
29943: NEG
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 2
29951: NEG
29952: PUSH
29953: LD_INT 2
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 4
29962: NEG
29963: PUSH
29964: LD_INT 4
29966: NEG
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 4
29974: NEG
29975: PUSH
29976: LD_INT 5
29978: NEG
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 4
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: LD_INT 3
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 4
30010: NEG
30011: PUSH
30012: LD_INT 3
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 5
30022: NEG
30023: PUSH
30024: LD_INT 4
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 5
30034: NEG
30035: PUSH
30036: LD_INT 5
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 3
30046: NEG
30047: PUSH
30048: LD_INT 5
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 5
30058: NEG
30059: PUSH
30060: LD_INT 3
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: LIST
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
30115: LD_ADDR_VAR 0 30
30119: PUSH
30120: LD_INT 4
30122: PUSH
30123: LD_INT 4
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 4
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 5
30142: PUSH
30143: LD_INT 4
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: PUSH
30150: LD_INT 5
30152: PUSH
30153: LD_INT 5
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 4
30162: PUSH
30163: LD_INT 5
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: LD_INT 4
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 3
30182: PUSH
30183: LD_INT 3
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 5
30192: PUSH
30193: LD_INT 3
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 3
30202: PUSH
30203: LD_INT 5
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 3
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 2
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: PUSH
30230: LD_INT 1
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: LD_INT 4
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 4
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 1
30262: NEG
30263: PUSH
30264: LD_INT 3
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: NEG
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 4
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 2
30294: NEG
30295: PUSH
30296: LD_INT 2
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 4
30305: NEG
30306: PUSH
30307: LD_INT 0
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 4
30316: NEG
30317: PUSH
30318: LD_INT 1
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: NEG
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 4
30350: NEG
30351: PUSH
30352: LD_INT 1
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 5
30361: NEG
30362: PUSH
30363: LD_INT 0
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 5
30372: NEG
30373: PUSH
30374: LD_INT 1
30376: NEG
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 5
30384: NEG
30385: PUSH
30386: LD_INT 2
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 3
30396: NEG
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: LD_INT 3
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 3
30419: NEG
30420: PUSH
30421: LD_INT 4
30423: NEG
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: NEG
30432: PUSH
30433: LD_INT 3
30435: NEG
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 2
30443: NEG
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 3
30455: NEG
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 4
30467: NEG
30468: PUSH
30469: LD_INT 3
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 4
30479: NEG
30480: PUSH
30481: LD_INT 4
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 4
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 4
30503: NEG
30504: PUSH
30505: LD_INT 2
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 4
30518: NEG
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 0
30526: PUSH
30527: LD_INT 5
30529: NEG
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: LD_INT 4
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 3
30551: NEG
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 0
30559: PUSH
30560: LD_INT 3
30562: NEG
30563: PUSH
30564: EMPTY
30565: LIST
30566: LIST
30567: PUSH
30568: LD_INT 1
30570: NEG
30571: PUSH
30572: LD_INT 4
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: LD_INT 5
30586: NEG
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 2
30594: PUSH
30595: LD_INT 3
30597: NEG
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: LD_INT 5
30609: NEG
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30662: LD_ADDR_VAR 0 31
30666: PUSH
30667: LD_INT 0
30669: PUSH
30670: LD_INT 4
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: LD_INT 3
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 5
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: LD_INT 5
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: LD_INT 4
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: PUSH
30728: LD_INT 1
30730: NEG
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 5
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 2
30751: NEG
30752: PUSH
30753: LD_INT 3
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 3
30762: NEG
30763: PUSH
30764: LD_INT 0
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 3
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 2
30796: NEG
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 4
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 4
30864: NEG
30865: PUSH
30866: LD_INT 4
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 4
30876: NEG
30877: PUSH
30878: LD_INT 5
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: LD_INT 3
30888: NEG
30889: PUSH
30890: LD_INT 4
30892: NEG
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 4
30912: NEG
30913: PUSH
30914: LD_INT 3
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 5
30924: NEG
30925: PUSH
30926: LD_INT 4
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 5
30936: NEG
30937: PUSH
30938: LD_INT 5
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: LD_INT 5
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 5
30960: NEG
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 3
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 4
30986: NEG
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 1
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: PUSH
31003: LD_INT 1
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: LD_INT 0
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 1
31039: NEG
31040: PUSH
31041: LD_INT 4
31043: NEG
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: NEG
31063: PUSH
31064: LD_INT 4
31066: NEG
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 4
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 4
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 5
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 5
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 1
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 3
31125: PUSH
31126: LD_INT 0
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 3
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 3
31146: PUSH
31147: LD_INT 2
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 5
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
31212: LD_ADDR_VAR 0 32
31216: PUSH
31217: LD_INT 4
31219: NEG
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 4
31230: NEG
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 3
31242: NEG
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: NEG
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 4
31264: NEG
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 5
31275: NEG
31276: PUSH
31277: LD_INT 0
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: LD_INT 5
31286: NEG
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 5
31298: NEG
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 3
31310: NEG
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 3
31321: NEG
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: NEG
31334: PUSH
31335: LD_INT 4
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 2
31345: NEG
31346: PUSH
31347: LD_INT 3
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 2
31357: NEG
31358: PUSH
31359: LD_INT 2
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: LD_INT 2
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 4
31381: NEG
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 4
31393: NEG
31394: PUSH
31395: LD_INT 4
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: NEG
31406: PUSH
31407: LD_INT 4
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 4
31417: NEG
31418: PUSH
31419: LD_INT 2
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: LD_INT 4
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 0
31440: PUSH
31441: LD_INT 5
31443: NEG
31444: PUSH
31445: EMPTY
31446: LIST
31447: LIST
31448: PUSH
31449: LD_INT 1
31451: PUSH
31452: LD_INT 4
31454: NEG
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: LD_INT 3
31465: NEG
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 3
31476: NEG
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: LD_INT 4
31488: NEG
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 5
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 2
31508: PUSH
31509: LD_INT 3
31511: NEG
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PUSH
31517: LD_INT 2
31519: NEG
31520: PUSH
31521: LD_INT 5
31523: NEG
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 3
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 4
31552: PUSH
31553: LD_INT 0
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 4
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 3
31572: PUSH
31573: LD_INT 1
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: LD_INT 1
31595: NEG
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 2
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 4
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 4
31624: PUSH
31625: LD_INT 4
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 4
31634: PUSH
31635: LD_INT 3
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 5
31644: PUSH
31645: LD_INT 4
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 5
31654: PUSH
31655: LD_INT 5
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: LD_INT 5
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: PUSH
31675: LD_INT 4
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 3
31684: PUSH
31685: LD_INT 3
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 5
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: PUSH
31705: LD_INT 5
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31759: LD_ADDR_VAR 0 33
31763: PUSH
31764: LD_INT 4
31766: NEG
31767: PUSH
31768: LD_INT 4
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 4
31778: NEG
31779: PUSH
31780: LD_INT 5
31782: NEG
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 3
31790: NEG
31791: PUSH
31792: LD_INT 4
31794: NEG
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: NEG
31803: PUSH
31804: LD_INT 3
31806: NEG
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: PUSH
31812: LD_INT 4
31814: NEG
31815: PUSH
31816: LD_INT 3
31818: NEG
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 5
31826: NEG
31827: PUSH
31828: LD_INT 4
31830: NEG
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PUSH
31836: LD_INT 5
31838: NEG
31839: PUSH
31840: LD_INT 5
31842: NEG
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 3
31850: NEG
31851: PUSH
31852: LD_INT 5
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 5
31862: NEG
31863: PUSH
31864: LD_INT 3
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 0
31874: PUSH
31875: LD_INT 3
31877: NEG
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: LD_INT 4
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: PUSH
31897: LD_INT 3
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 2
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 3
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: LD_INT 4
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 2
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: LD_INT 4
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 4
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 4
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 5
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 4
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 3
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 5
32059: PUSH
32060: LD_INT 2
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 3
32069: PUSH
32070: LD_INT 3
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: PUSH
32077: LD_INT 3
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: EMPTY
32084: LIST
32085: LIST
32086: PUSH
32087: LD_INT 4
32089: PUSH
32090: LD_INT 3
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: LD_INT 4
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 3
32109: PUSH
32110: LD_INT 4
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: LD_INT 3
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: LD_INT 2
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 4
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 2
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 1
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 0
32199: PUSH
32200: LD_INT 5
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: LD_INT 4
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: LD_INT 5
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: LD_INT 3
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
32297: LD_ADDR_VAR 0 34
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: LD_INT 4
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 5
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 4
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 3
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 0
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 1
32359: NEG
32360: PUSH
32361: LD_INT 4
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: LD_INT 5
32375: NEG
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 3
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: LD_INT 5
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: LD_INT 4
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 4
32437: PUSH
32438: LD_INT 1
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 3
32447: PUSH
32448: LD_INT 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 2
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 2
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 2
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 4
32489: PUSH
32490: LD_INT 2
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 4
32499: PUSH
32500: LD_INT 4
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 4
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: EMPTY
32514: LIST
32515: LIST
32516: PUSH
32517: LD_INT 5
32519: PUSH
32520: LD_INT 4
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 5
32529: PUSH
32530: LD_INT 5
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: LD_INT 4
32539: PUSH
32540: LD_INT 5
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 4
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: LD_INT 3
32559: PUSH
32560: LD_INT 3
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 5
32569: PUSH
32570: LD_INT 3
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 3
32579: PUSH
32580: LD_INT 5
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: LD_INT 3
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 2
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: PUSH
32610: LD_INT 3
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: LD_INT 1
32619: PUSH
32620: LD_INT 4
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 4
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: PUSH
32641: LD_INT 3
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: PUSH
32662: LD_INT 4
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: PUSH
32680: LD_INT 4
32682: NEG
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 4
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: NEG
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 3
32705: NEG
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 4
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: PUSH
32736: LD_INT 5
32738: NEG
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 5
32749: NEG
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 5
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: ST_TO_ADDR
// end ; end ;
32829: GO 32832
32831: POP
// case btype of b_depot , b_warehouse :
32832: LD_VAR 0 1
32836: PUSH
32837: LD_INT 0
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32851
32843: LD_INT 1
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32851
32849: GO 33052
32851: POP
// case nation of nation_american :
32852: LD_VAR 0 5
32856: PUSH
32857: LD_INT 1
32859: DOUBLE
32860: EQUAL
32861: IFTRUE 32865
32863: GO 32921
32865: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32866: LD_ADDR_VAR 0 9
32870: PUSH
32871: LD_VAR 0 11
32875: PUSH
32876: LD_VAR 0 12
32880: PUSH
32881: LD_VAR 0 13
32885: PUSH
32886: LD_VAR 0 14
32890: PUSH
32891: LD_VAR 0 15
32895: PUSH
32896: LD_VAR 0 16
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: PUSH
32909: LD_VAR 0 4
32913: PUSH
32914: LD_INT 1
32916: PLUS
32917: ARRAY
32918: ST_TO_ADDR
32919: GO 33050
32921: LD_INT 2
32923: DOUBLE
32924: EQUAL
32925: IFTRUE 32929
32927: GO 32985
32929: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32930: LD_ADDR_VAR 0 9
32934: PUSH
32935: LD_VAR 0 17
32939: PUSH
32940: LD_VAR 0 18
32944: PUSH
32945: LD_VAR 0 19
32949: PUSH
32950: LD_VAR 0 20
32954: PUSH
32955: LD_VAR 0 21
32959: PUSH
32960: LD_VAR 0 22
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: PUSH
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 1
32980: PLUS
32981: ARRAY
32982: ST_TO_ADDR
32983: GO 33050
32985: LD_INT 3
32987: DOUBLE
32988: EQUAL
32989: IFTRUE 32993
32991: GO 33049
32993: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32994: LD_ADDR_VAR 0 9
32998: PUSH
32999: LD_VAR 0 23
33003: PUSH
33004: LD_VAR 0 24
33008: PUSH
33009: LD_VAR 0 25
33013: PUSH
33014: LD_VAR 0 26
33018: PUSH
33019: LD_VAR 0 27
33023: PUSH
33024: LD_VAR 0 28
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: PUSH
33037: LD_VAR 0 4
33041: PUSH
33042: LD_INT 1
33044: PLUS
33045: ARRAY
33046: ST_TO_ADDR
33047: GO 33050
33049: POP
33050: GO 33605
33052: LD_INT 2
33054: DOUBLE
33055: EQUAL
33056: IFTRUE 33066
33058: LD_INT 3
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33122
33066: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
33067: LD_ADDR_VAR 0 9
33071: PUSH
33072: LD_VAR 0 29
33076: PUSH
33077: LD_VAR 0 30
33081: PUSH
33082: LD_VAR 0 31
33086: PUSH
33087: LD_VAR 0 32
33091: PUSH
33092: LD_VAR 0 33
33096: PUSH
33097: LD_VAR 0 34
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: PUSH
33110: LD_VAR 0 4
33114: PUSH
33115: LD_INT 1
33117: PLUS
33118: ARRAY
33119: ST_TO_ADDR
33120: GO 33605
33122: LD_INT 16
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33184
33128: LD_INT 17
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33184
33134: LD_INT 18
33136: DOUBLE
33137: EQUAL
33138: IFTRUE 33184
33140: LD_INT 19
33142: DOUBLE
33143: EQUAL
33144: IFTRUE 33184
33146: LD_INT 22
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33184
33152: LD_INT 20
33154: DOUBLE
33155: EQUAL
33156: IFTRUE 33184
33158: LD_INT 21
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33184
33164: LD_INT 23
33166: DOUBLE
33167: EQUAL
33168: IFTRUE 33184
33170: LD_INT 24
33172: DOUBLE
33173: EQUAL
33174: IFTRUE 33184
33176: LD_INT 25
33178: DOUBLE
33179: EQUAL
33180: IFTRUE 33184
33182: GO 33240
33184: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
33185: LD_ADDR_VAR 0 9
33189: PUSH
33190: LD_VAR 0 35
33194: PUSH
33195: LD_VAR 0 36
33199: PUSH
33200: LD_VAR 0 37
33204: PUSH
33205: LD_VAR 0 38
33209: PUSH
33210: LD_VAR 0 39
33214: PUSH
33215: LD_VAR 0 40
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: PUSH
33228: LD_VAR 0 4
33232: PUSH
33233: LD_INT 1
33235: PLUS
33236: ARRAY
33237: ST_TO_ADDR
33238: GO 33605
33240: LD_INT 6
33242: DOUBLE
33243: EQUAL
33244: IFTRUE 33296
33246: LD_INT 7
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33296
33252: LD_INT 8
33254: DOUBLE
33255: EQUAL
33256: IFTRUE 33296
33258: LD_INT 13
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33296
33264: LD_INT 12
33266: DOUBLE
33267: EQUAL
33268: IFTRUE 33296
33270: LD_INT 15
33272: DOUBLE
33273: EQUAL
33274: IFTRUE 33296
33276: LD_INT 11
33278: DOUBLE
33279: EQUAL
33280: IFTRUE 33296
33282: LD_INT 14
33284: DOUBLE
33285: EQUAL
33286: IFTRUE 33296
33288: LD_INT 10
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33352
33296: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
33297: LD_ADDR_VAR 0 9
33301: PUSH
33302: LD_VAR 0 41
33306: PUSH
33307: LD_VAR 0 42
33311: PUSH
33312: LD_VAR 0 43
33316: PUSH
33317: LD_VAR 0 44
33321: PUSH
33322: LD_VAR 0 45
33326: PUSH
33327: LD_VAR 0 46
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: PUSH
33340: LD_VAR 0 4
33344: PUSH
33345: LD_INT 1
33347: PLUS
33348: ARRAY
33349: ST_TO_ADDR
33350: GO 33605
33352: LD_INT 36
33354: DOUBLE
33355: EQUAL
33356: IFTRUE 33360
33358: GO 33416
33360: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
33361: LD_ADDR_VAR 0 9
33365: PUSH
33366: LD_VAR 0 47
33370: PUSH
33371: LD_VAR 0 48
33375: PUSH
33376: LD_VAR 0 49
33380: PUSH
33381: LD_VAR 0 50
33385: PUSH
33386: LD_VAR 0 51
33390: PUSH
33391: LD_VAR 0 52
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: PUSH
33404: LD_VAR 0 4
33408: PUSH
33409: LD_INT 1
33411: PLUS
33412: ARRAY
33413: ST_TO_ADDR
33414: GO 33605
33416: LD_INT 4
33418: DOUBLE
33419: EQUAL
33420: IFTRUE 33442
33422: LD_INT 5
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33442
33428: LD_INT 34
33430: DOUBLE
33431: EQUAL
33432: IFTRUE 33442
33434: LD_INT 37
33436: DOUBLE
33437: EQUAL
33438: IFTRUE 33442
33440: GO 33498
33442: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33443: LD_ADDR_VAR 0 9
33447: PUSH
33448: LD_VAR 0 53
33452: PUSH
33453: LD_VAR 0 54
33457: PUSH
33458: LD_VAR 0 55
33462: PUSH
33463: LD_VAR 0 56
33467: PUSH
33468: LD_VAR 0 57
33472: PUSH
33473: LD_VAR 0 58
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: PUSH
33486: LD_VAR 0 4
33490: PUSH
33491: LD_INT 1
33493: PLUS
33494: ARRAY
33495: ST_TO_ADDR
33496: GO 33605
33498: LD_INT 31
33500: DOUBLE
33501: EQUAL
33502: IFTRUE 33548
33504: LD_INT 32
33506: DOUBLE
33507: EQUAL
33508: IFTRUE 33548
33510: LD_INT 33
33512: DOUBLE
33513: EQUAL
33514: IFTRUE 33548
33516: LD_INT 27
33518: DOUBLE
33519: EQUAL
33520: IFTRUE 33548
33522: LD_INT 26
33524: DOUBLE
33525: EQUAL
33526: IFTRUE 33548
33528: LD_INT 28
33530: DOUBLE
33531: EQUAL
33532: IFTRUE 33548
33534: LD_INT 29
33536: DOUBLE
33537: EQUAL
33538: IFTRUE 33548
33540: LD_INT 30
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33604
33548: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33549: LD_ADDR_VAR 0 9
33553: PUSH
33554: LD_VAR 0 59
33558: PUSH
33559: LD_VAR 0 60
33563: PUSH
33564: LD_VAR 0 61
33568: PUSH
33569: LD_VAR 0 62
33573: PUSH
33574: LD_VAR 0 63
33578: PUSH
33579: LD_VAR 0 64
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: LD_VAR 0 4
33596: PUSH
33597: LD_INT 1
33599: PLUS
33600: ARRAY
33601: ST_TO_ADDR
33602: GO 33605
33604: POP
// temp_list2 = [ ] ;
33605: LD_ADDR_VAR 0 10
33609: PUSH
33610: EMPTY
33611: ST_TO_ADDR
// for i in temp_list do
33612: LD_ADDR_VAR 0 8
33616: PUSH
33617: LD_VAR 0 9
33621: PUSH
33622: FOR_IN
33623: IFFALSE 33675
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33625: LD_ADDR_VAR 0 10
33629: PUSH
33630: LD_VAR 0 10
33634: PUSH
33635: LD_VAR 0 8
33639: PUSH
33640: LD_INT 1
33642: ARRAY
33643: PUSH
33644: LD_VAR 0 2
33648: PLUS
33649: PUSH
33650: LD_VAR 0 8
33654: PUSH
33655: LD_INT 2
33657: ARRAY
33658: PUSH
33659: LD_VAR 0 3
33663: PLUS
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: EMPTY
33670: LIST
33671: ADD
33672: ST_TO_ADDR
33673: GO 33622
33675: POP
33676: POP
// result = temp_list2 ;
33677: LD_ADDR_VAR 0 7
33681: PUSH
33682: LD_VAR 0 10
33686: ST_TO_ADDR
// end ;
33687: LD_VAR 0 7
33691: RET
// export function EnemyInRange ( unit , dist ) ; begin
33692: LD_INT 0
33694: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 255
33709: PPUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 250
33719: PPUSH
33720: LD_VAR 0 1
33724: PPUSH
33725: CALL_OW 251
33729: PPUSH
33730: LD_VAR 0 2
33734: PPUSH
33735: CALL 7088 0 4
33739: PUSH
33740: LD_INT 4
33742: ARRAY
33743: ST_TO_ADDR
// end ;
33744: LD_VAR 0 3
33748: RET
// export function PlayerSeeMe ( unit ) ; begin
33749: LD_INT 0
33751: PPUSH
// result := See ( your_side , unit ) ;
33752: LD_ADDR_VAR 0 2
33756: PUSH
33757: LD_OWVAR 2
33761: PPUSH
33762: LD_VAR 0 1
33766: PPUSH
33767: CALL_OW 292
33771: ST_TO_ADDR
// end ;
33772: LD_VAR 0 2
33776: RET
// export function ReverseDir ( unit ) ; begin
33777: LD_INT 0
33779: PPUSH
// if not unit then
33780: LD_VAR 0 1
33784: NOT
33785: IFFALSE 33789
// exit ;
33787: GO 33812
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33789: LD_ADDR_VAR 0 2
33793: PUSH
33794: LD_VAR 0 1
33798: PPUSH
33799: CALL_OW 254
33803: PUSH
33804: LD_INT 3
33806: PLUS
33807: PUSH
33808: LD_INT 6
33810: MOD
33811: ST_TO_ADDR
// end ;
33812: LD_VAR 0 2
33816: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33817: LD_INT 0
33819: PPUSH
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
// if not hexes then
33824: LD_VAR 0 2
33828: NOT
33829: IFFALSE 33833
// exit ;
33831: GO 33981
// dist := 9999 ;
33833: LD_ADDR_VAR 0 5
33837: PUSH
33838: LD_INT 9999
33840: ST_TO_ADDR
// for i = 1 to hexes do
33841: LD_ADDR_VAR 0 4
33845: PUSH
33846: DOUBLE
33847: LD_INT 1
33849: DEC
33850: ST_TO_ADDR
33851: LD_VAR 0 2
33855: PUSH
33856: FOR_TO
33857: IFFALSE 33969
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33859: LD_VAR 0 1
33863: PPUSH
33864: LD_VAR 0 2
33868: PUSH
33869: LD_VAR 0 4
33873: ARRAY
33874: PUSH
33875: LD_INT 1
33877: ARRAY
33878: PPUSH
33879: LD_VAR 0 2
33883: PUSH
33884: LD_VAR 0 4
33888: ARRAY
33889: PUSH
33890: LD_INT 2
33892: ARRAY
33893: PPUSH
33894: CALL_OW 297
33898: PUSH
33899: LD_VAR 0 5
33903: LESS
33904: IFFALSE 33967
// begin hex := hexes [ i ] ;
33906: LD_ADDR_VAR 0 7
33910: PUSH
33911: LD_VAR 0 2
33915: PUSH
33916: LD_VAR 0 4
33920: ARRAY
33921: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33922: LD_ADDR_VAR 0 5
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: LD_VAR 0 2
33936: PUSH
33937: LD_VAR 0 4
33941: ARRAY
33942: PUSH
33943: LD_INT 1
33945: ARRAY
33946: PPUSH
33947: LD_VAR 0 2
33951: PUSH
33952: LD_VAR 0 4
33956: ARRAY
33957: PUSH
33958: LD_INT 2
33960: ARRAY
33961: PPUSH
33962: CALL_OW 297
33966: ST_TO_ADDR
// end ; end ;
33967: GO 33856
33969: POP
33970: POP
// result := hex ;
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_VAR 0 7
33980: ST_TO_ADDR
// end ;
33981: LD_VAR 0 3
33985: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33986: LD_INT 0
33988: PPUSH
33989: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33990: LD_VAR 0 1
33994: NOT
33995: PUSH
33996: LD_VAR 0 1
34000: PUSH
34001: LD_INT 21
34003: PUSH
34004: LD_INT 2
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 23
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PPUSH
34025: CALL_OW 69
34029: IN
34030: NOT
34031: OR
34032: IFFALSE 34036
// exit ;
34034: GO 34083
// for i = 1 to 3 do
34036: LD_ADDR_VAR 0 3
34040: PUSH
34041: DOUBLE
34042: LD_INT 1
34044: DEC
34045: ST_TO_ADDR
34046: LD_INT 3
34048: PUSH
34049: FOR_TO
34050: IFFALSE 34081
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
34052: LD_VAR 0 1
34056: PPUSH
34057: CALL_OW 250
34061: PPUSH
34062: LD_VAR 0 1
34066: PPUSH
34067: CALL_OW 251
34071: PPUSH
34072: LD_INT 1
34074: PPUSH
34075: CALL_OW 453
34079: GO 34049
34081: POP
34082: POP
// end ;
34083: LD_VAR 0 2
34087: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
34088: LD_INT 0
34090: PPUSH
34091: PPUSH
34092: PPUSH
34093: PPUSH
34094: PPUSH
34095: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
34096: LD_VAR 0 1
34100: NOT
34101: PUSH
34102: LD_VAR 0 2
34106: NOT
34107: OR
34108: PUSH
34109: LD_VAR 0 1
34113: PPUSH
34114: CALL_OW 314
34118: OR
34119: IFFALSE 34123
// exit ;
34121: GO 34564
// x := GetX ( enemy_unit ) ;
34123: LD_ADDR_VAR 0 7
34127: PUSH
34128: LD_VAR 0 2
34132: PPUSH
34133: CALL_OW 250
34137: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
34138: LD_ADDR_VAR 0 8
34142: PUSH
34143: LD_VAR 0 2
34147: PPUSH
34148: CALL_OW 251
34152: ST_TO_ADDR
// if not x or not y then
34153: LD_VAR 0 7
34157: NOT
34158: PUSH
34159: LD_VAR 0 8
34163: NOT
34164: OR
34165: IFFALSE 34169
// exit ;
34167: GO 34564
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
34169: LD_ADDR_VAR 0 6
34173: PUSH
34174: LD_VAR 0 7
34178: PPUSH
34179: LD_INT 0
34181: PPUSH
34182: LD_INT 4
34184: PPUSH
34185: CALL_OW 272
34189: PUSH
34190: LD_VAR 0 8
34194: PPUSH
34195: LD_INT 0
34197: PPUSH
34198: LD_INT 4
34200: PPUSH
34201: CALL_OW 273
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_VAR 0 7
34214: PPUSH
34215: LD_INT 1
34217: PPUSH
34218: LD_INT 4
34220: PPUSH
34221: CALL_OW 272
34225: PUSH
34226: LD_VAR 0 8
34230: PPUSH
34231: LD_INT 1
34233: PPUSH
34234: LD_INT 4
34236: PPUSH
34237: CALL_OW 273
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_VAR 0 7
34250: PPUSH
34251: LD_INT 2
34253: PPUSH
34254: LD_INT 4
34256: PPUSH
34257: CALL_OW 272
34261: PUSH
34262: LD_VAR 0 8
34266: PPUSH
34267: LD_INT 2
34269: PPUSH
34270: LD_INT 4
34272: PPUSH
34273: CALL_OW 273
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PUSH
34282: LD_VAR 0 7
34286: PPUSH
34287: LD_INT 3
34289: PPUSH
34290: LD_INT 4
34292: PPUSH
34293: CALL_OW 272
34297: PUSH
34298: LD_VAR 0 8
34302: PPUSH
34303: LD_INT 3
34305: PPUSH
34306: LD_INT 4
34308: PPUSH
34309: CALL_OW 273
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_VAR 0 7
34322: PPUSH
34323: LD_INT 4
34325: PPUSH
34326: LD_INT 4
34328: PPUSH
34329: CALL_OW 272
34333: PUSH
34334: LD_VAR 0 8
34338: PPUSH
34339: LD_INT 4
34341: PPUSH
34342: LD_INT 4
34344: PPUSH
34345: CALL_OW 273
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_VAR 0 7
34358: PPUSH
34359: LD_INT 5
34361: PPUSH
34362: LD_INT 4
34364: PPUSH
34365: CALL_OW 272
34369: PUSH
34370: LD_VAR 0 8
34374: PPUSH
34375: LD_INT 5
34377: PPUSH
34378: LD_INT 4
34380: PPUSH
34381: CALL_OW 273
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// for i = tmp downto 1 do
34398: LD_ADDR_VAR 0 4
34402: PUSH
34403: DOUBLE
34404: LD_VAR 0 6
34408: INC
34409: ST_TO_ADDR
34410: LD_INT 1
34412: PUSH
34413: FOR_DOWNTO
34414: IFFALSE 34515
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
34416: LD_VAR 0 6
34420: PUSH
34421: LD_VAR 0 4
34425: ARRAY
34426: PUSH
34427: LD_INT 1
34429: ARRAY
34430: PPUSH
34431: LD_VAR 0 6
34435: PUSH
34436: LD_VAR 0 4
34440: ARRAY
34441: PUSH
34442: LD_INT 2
34444: ARRAY
34445: PPUSH
34446: CALL_OW 488
34450: NOT
34451: PUSH
34452: LD_VAR 0 6
34456: PUSH
34457: LD_VAR 0 4
34461: ARRAY
34462: PUSH
34463: LD_INT 1
34465: ARRAY
34466: PPUSH
34467: LD_VAR 0 6
34471: PUSH
34472: LD_VAR 0 4
34476: ARRAY
34477: PUSH
34478: LD_INT 2
34480: ARRAY
34481: PPUSH
34482: CALL_OW 428
34486: PUSH
34487: LD_INT 0
34489: NONEQUAL
34490: OR
34491: IFFALSE 34513
// tmp := Delete ( tmp , i ) ;
34493: LD_ADDR_VAR 0 6
34497: PUSH
34498: LD_VAR 0 6
34502: PPUSH
34503: LD_VAR 0 4
34507: PPUSH
34508: CALL_OW 3
34512: ST_TO_ADDR
34513: GO 34413
34515: POP
34516: POP
// j := GetClosestHex ( unit , tmp ) ;
34517: LD_ADDR_VAR 0 5
34521: PUSH
34522: LD_VAR 0 1
34526: PPUSH
34527: LD_VAR 0 6
34531: PPUSH
34532: CALL 33817 0 2
34536: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34537: LD_VAR 0 1
34541: PPUSH
34542: LD_VAR 0 5
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: PPUSH
34551: LD_VAR 0 5
34555: PUSH
34556: LD_INT 2
34558: ARRAY
34559: PPUSH
34560: CALL_OW 111
// end ;
34564: LD_VAR 0 3
34568: RET
// export function PrepareApemanSoldier ( ) ; begin
34569: LD_INT 0
34571: PPUSH
// uc_nation := 0 ;
34572: LD_ADDR_OWVAR 21
34576: PUSH
34577: LD_INT 0
34579: ST_TO_ADDR
// hc_sex := sex_male ;
34580: LD_ADDR_OWVAR 27
34584: PUSH
34585: LD_INT 1
34587: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
34588: LD_ADDR_OWVAR 28
34592: PUSH
34593: LD_INT 15
34595: ST_TO_ADDR
// hc_gallery :=  ;
34596: LD_ADDR_OWVAR 33
34600: PUSH
34601: LD_STRING 
34603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34604: LD_ADDR_OWVAR 31
34608: PUSH
34609: LD_INT 0
34611: PPUSH
34612: LD_INT 3
34614: PPUSH
34615: CALL_OW 12
34619: PUSH
34620: LD_INT 0
34622: PPUSH
34623: LD_INT 3
34625: PPUSH
34626: CALL_OW 12
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: LD_INT 0
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
// end ;
34643: LD_VAR 0 1
34647: RET
// export function PrepareApemanEngineer ( ) ; begin
34648: LD_INT 0
34650: PPUSH
// uc_nation := 0 ;
34651: LD_ADDR_OWVAR 21
34655: PUSH
34656: LD_INT 0
34658: ST_TO_ADDR
// hc_sex := sex_male ;
34659: LD_ADDR_OWVAR 27
34663: PUSH
34664: LD_INT 1
34666: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
34667: LD_ADDR_OWVAR 28
34671: PUSH
34672: LD_INT 16
34674: ST_TO_ADDR
// hc_gallery :=  ;
34675: LD_ADDR_OWVAR 33
34679: PUSH
34680: LD_STRING 
34682: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34683: LD_ADDR_OWVAR 31
34687: PUSH
34688: LD_INT 0
34690: PPUSH
34691: LD_INT 3
34693: PPUSH
34694: CALL_OW 12
34698: PUSH
34699: LD_INT 0
34701: PPUSH
34702: LD_INT 3
34704: PPUSH
34705: CALL_OW 12
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 0
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: ST_TO_ADDR
// end ;
34722: LD_VAR 0 1
34726: RET
// export function PrepareApeman ( agressivity ) ; begin
34727: LD_INT 0
34729: PPUSH
// uc_side := 0 ;
34730: LD_ADDR_OWVAR 20
34734: PUSH
34735: LD_INT 0
34737: ST_TO_ADDR
// uc_nation := 0 ;
34738: LD_ADDR_OWVAR 21
34742: PUSH
34743: LD_INT 0
34745: ST_TO_ADDR
// hc_sex := sex_male ;
34746: LD_ADDR_OWVAR 27
34750: PUSH
34751: LD_INT 1
34753: ST_TO_ADDR
// hc_class := class_apeman ;
34754: LD_ADDR_OWVAR 28
34758: PUSH
34759: LD_INT 12
34761: ST_TO_ADDR
// hc_gallery :=  ;
34762: LD_ADDR_OWVAR 33
34766: PUSH
34767: LD_STRING 
34769: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34770: LD_ADDR_OWVAR 35
34774: PUSH
34775: LD_VAR 0 1
34779: NEG
34780: PPUSH
34781: LD_VAR 0 1
34785: PPUSH
34786: CALL_OW 12
34790: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
34791: LD_ADDR_OWVAR 31
34795: PUSH
34796: LD_INT 0
34798: PPUSH
34799: LD_INT 3
34801: PPUSH
34802: CALL_OW 12
34806: PUSH
34807: LD_INT 0
34809: PPUSH
34810: LD_INT 3
34812: PPUSH
34813: CALL_OW 12
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 0
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: ST_TO_ADDR
// end ;
34830: LD_VAR 0 2
34834: RET
// export function PrepareTiger ( agressivity ) ; begin
34835: LD_INT 0
34837: PPUSH
// uc_side := 0 ;
34838: LD_ADDR_OWVAR 20
34842: PUSH
34843: LD_INT 0
34845: ST_TO_ADDR
// uc_nation := 0 ;
34846: LD_ADDR_OWVAR 21
34850: PUSH
34851: LD_INT 0
34853: ST_TO_ADDR
// hc_class := class_tiger ;
34854: LD_ADDR_OWVAR 28
34858: PUSH
34859: LD_INT 14
34861: ST_TO_ADDR
// hc_gallery :=  ;
34862: LD_ADDR_OWVAR 33
34866: PUSH
34867: LD_STRING 
34869: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
34870: LD_ADDR_OWVAR 35
34874: PUSH
34875: LD_VAR 0 1
34879: NEG
34880: PPUSH
34881: LD_VAR 0 1
34885: PPUSH
34886: CALL_OW 12
34890: ST_TO_ADDR
// end ;
34891: LD_VAR 0 2
34895: RET
// export function PrepareEnchidna ( ) ; begin
34896: LD_INT 0
34898: PPUSH
// uc_side := 0 ;
34899: LD_ADDR_OWVAR 20
34903: PUSH
34904: LD_INT 0
34906: ST_TO_ADDR
// uc_nation := 0 ;
34907: LD_ADDR_OWVAR 21
34911: PUSH
34912: LD_INT 0
34914: ST_TO_ADDR
// hc_class := class_baggie ;
34915: LD_ADDR_OWVAR 28
34919: PUSH
34920: LD_INT 13
34922: ST_TO_ADDR
// hc_gallery :=  ;
34923: LD_ADDR_OWVAR 33
34927: PUSH
34928: LD_STRING 
34930: ST_TO_ADDR
// end ;
34931: LD_VAR 0 1
34935: RET
// export function PrepareFrog ( ) ; begin
34936: LD_INT 0
34938: PPUSH
// uc_side := 0 ;
34939: LD_ADDR_OWVAR 20
34943: PUSH
34944: LD_INT 0
34946: ST_TO_ADDR
// uc_nation := 0 ;
34947: LD_ADDR_OWVAR 21
34951: PUSH
34952: LD_INT 0
34954: ST_TO_ADDR
// hc_class := class_frog ;
34955: LD_ADDR_OWVAR 28
34959: PUSH
34960: LD_INT 19
34962: ST_TO_ADDR
// hc_gallery :=  ;
34963: LD_ADDR_OWVAR 33
34967: PUSH
34968: LD_STRING 
34970: ST_TO_ADDR
// end ;
34971: LD_VAR 0 1
34975: RET
// export function PrepareFish ( ) ; begin
34976: LD_INT 0
34978: PPUSH
// uc_side := 0 ;
34979: LD_ADDR_OWVAR 20
34983: PUSH
34984: LD_INT 0
34986: ST_TO_ADDR
// uc_nation := 0 ;
34987: LD_ADDR_OWVAR 21
34991: PUSH
34992: LD_INT 0
34994: ST_TO_ADDR
// hc_class := class_fish ;
34995: LD_ADDR_OWVAR 28
34999: PUSH
35000: LD_INT 20
35002: ST_TO_ADDR
// hc_gallery :=  ;
35003: LD_ADDR_OWVAR 33
35007: PUSH
35008: LD_STRING 
35010: ST_TO_ADDR
// end ;
35011: LD_VAR 0 1
35015: RET
// export function PrepareBird ( ) ; begin
35016: LD_INT 0
35018: PPUSH
// uc_side := 0 ;
35019: LD_ADDR_OWVAR 20
35023: PUSH
35024: LD_INT 0
35026: ST_TO_ADDR
// uc_nation := 0 ;
35027: LD_ADDR_OWVAR 21
35031: PUSH
35032: LD_INT 0
35034: ST_TO_ADDR
// hc_class := class_phororhacos ;
35035: LD_ADDR_OWVAR 28
35039: PUSH
35040: LD_INT 18
35042: ST_TO_ADDR
// hc_gallery :=  ;
35043: LD_ADDR_OWVAR 33
35047: PUSH
35048: LD_STRING 
35050: ST_TO_ADDR
// end ;
35051: LD_VAR 0 1
35055: RET
// export function PrepareHorse ( ) ; begin
35056: LD_INT 0
35058: PPUSH
// uc_side := 0 ;
35059: LD_ADDR_OWVAR 20
35063: PUSH
35064: LD_INT 0
35066: ST_TO_ADDR
// uc_nation := 0 ;
35067: LD_ADDR_OWVAR 21
35071: PUSH
35072: LD_INT 0
35074: ST_TO_ADDR
// hc_class := class_horse ;
35075: LD_ADDR_OWVAR 28
35079: PUSH
35080: LD_INT 21
35082: ST_TO_ADDR
// hc_gallery :=  ;
35083: LD_ADDR_OWVAR 33
35087: PUSH
35088: LD_STRING 
35090: ST_TO_ADDR
// end ;
35091: LD_VAR 0 1
35095: RET
// export function PrepareMastodont ( ) ; begin
35096: LD_INT 0
35098: PPUSH
// uc_side := 0 ;
35099: LD_ADDR_OWVAR 20
35103: PUSH
35104: LD_INT 0
35106: ST_TO_ADDR
// uc_nation := 0 ;
35107: LD_ADDR_OWVAR 21
35111: PUSH
35112: LD_INT 0
35114: ST_TO_ADDR
// vc_chassis := class_mastodont ;
35115: LD_ADDR_OWVAR 37
35119: PUSH
35120: LD_INT 31
35122: ST_TO_ADDR
// vc_control := control_rider ;
35123: LD_ADDR_OWVAR 38
35127: PUSH
35128: LD_INT 4
35130: ST_TO_ADDR
// end ;
35131: LD_VAR 0 1
35135: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
35136: LD_INT 0
35138: PPUSH
35139: PPUSH
35140: PPUSH
// uc_side = 0 ;
35141: LD_ADDR_OWVAR 20
35145: PUSH
35146: LD_INT 0
35148: ST_TO_ADDR
// uc_nation = 0 ;
35149: LD_ADDR_OWVAR 21
35153: PUSH
35154: LD_INT 0
35156: ST_TO_ADDR
// InitHc_All ( ) ;
35157: CALL_OW 584
// InitVc ;
35161: CALL_OW 20
// if mastodonts then
35165: LD_VAR 0 6
35169: IFFALSE 35236
// for i = 1 to mastodonts do
35171: LD_ADDR_VAR 0 11
35175: PUSH
35176: DOUBLE
35177: LD_INT 1
35179: DEC
35180: ST_TO_ADDR
35181: LD_VAR 0 6
35185: PUSH
35186: FOR_TO
35187: IFFALSE 35234
// begin vc_chassis := 31 ;
35189: LD_ADDR_OWVAR 37
35193: PUSH
35194: LD_INT 31
35196: ST_TO_ADDR
// vc_control := control_rider ;
35197: LD_ADDR_OWVAR 38
35201: PUSH
35202: LD_INT 4
35204: ST_TO_ADDR
// animal := CreateVehicle ;
35205: LD_ADDR_VAR 0 12
35209: PUSH
35210: CALL_OW 45
35214: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35215: LD_VAR 0 12
35219: PPUSH
35220: LD_VAR 0 8
35224: PPUSH
35225: LD_INT 0
35227: PPUSH
35228: CALL 37371 0 3
// end ;
35232: GO 35186
35234: POP
35235: POP
// if horses then
35236: LD_VAR 0 5
35240: IFFALSE 35307
// for i = 1 to horses do
35242: LD_ADDR_VAR 0 11
35246: PUSH
35247: DOUBLE
35248: LD_INT 1
35250: DEC
35251: ST_TO_ADDR
35252: LD_VAR 0 5
35256: PUSH
35257: FOR_TO
35258: IFFALSE 35305
// begin hc_class := 21 ;
35260: LD_ADDR_OWVAR 28
35264: PUSH
35265: LD_INT 21
35267: ST_TO_ADDR
// hc_gallery :=  ;
35268: LD_ADDR_OWVAR 33
35272: PUSH
35273: LD_STRING 
35275: ST_TO_ADDR
// animal := CreateHuman ;
35276: LD_ADDR_VAR 0 12
35280: PUSH
35281: CALL_OW 44
35285: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35286: LD_VAR 0 12
35290: PPUSH
35291: LD_VAR 0 8
35295: PPUSH
35296: LD_INT 0
35298: PPUSH
35299: CALL 37371 0 3
// end ;
35303: GO 35257
35305: POP
35306: POP
// if birds then
35307: LD_VAR 0 1
35311: IFFALSE 35378
// for i = 1 to birds do
35313: LD_ADDR_VAR 0 11
35317: PUSH
35318: DOUBLE
35319: LD_INT 1
35321: DEC
35322: ST_TO_ADDR
35323: LD_VAR 0 1
35327: PUSH
35328: FOR_TO
35329: IFFALSE 35376
// begin hc_class = 18 ;
35331: LD_ADDR_OWVAR 28
35335: PUSH
35336: LD_INT 18
35338: ST_TO_ADDR
// hc_gallery =  ;
35339: LD_ADDR_OWVAR 33
35343: PUSH
35344: LD_STRING 
35346: ST_TO_ADDR
// animal := CreateHuman ;
35347: LD_ADDR_VAR 0 12
35351: PUSH
35352: CALL_OW 44
35356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35357: LD_VAR 0 12
35361: PPUSH
35362: LD_VAR 0 8
35366: PPUSH
35367: LD_INT 0
35369: PPUSH
35370: CALL 37371 0 3
// end ;
35374: GO 35328
35376: POP
35377: POP
// if tigers then
35378: LD_VAR 0 2
35382: IFFALSE 35466
// for i = 1 to tigers do
35384: LD_ADDR_VAR 0 11
35388: PUSH
35389: DOUBLE
35390: LD_INT 1
35392: DEC
35393: ST_TO_ADDR
35394: LD_VAR 0 2
35398: PUSH
35399: FOR_TO
35400: IFFALSE 35464
// begin hc_class = class_tiger ;
35402: LD_ADDR_OWVAR 28
35406: PUSH
35407: LD_INT 14
35409: ST_TO_ADDR
// hc_gallery =  ;
35410: LD_ADDR_OWVAR 33
35414: PUSH
35415: LD_STRING 
35417: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
35418: LD_ADDR_OWVAR 35
35422: PUSH
35423: LD_INT 7
35425: NEG
35426: PPUSH
35427: LD_INT 7
35429: PPUSH
35430: CALL_OW 12
35434: ST_TO_ADDR
// animal := CreateHuman ;
35435: LD_ADDR_VAR 0 12
35439: PUSH
35440: CALL_OW 44
35444: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35445: LD_VAR 0 12
35449: PPUSH
35450: LD_VAR 0 8
35454: PPUSH
35455: LD_INT 0
35457: PPUSH
35458: CALL 37371 0 3
// end ;
35462: GO 35399
35464: POP
35465: POP
// if apemans then
35466: LD_VAR 0 3
35470: IFFALSE 35593
// for i = 1 to apemans do
35472: LD_ADDR_VAR 0 11
35476: PUSH
35477: DOUBLE
35478: LD_INT 1
35480: DEC
35481: ST_TO_ADDR
35482: LD_VAR 0 3
35486: PUSH
35487: FOR_TO
35488: IFFALSE 35591
// begin hc_class = class_apeman ;
35490: LD_ADDR_OWVAR 28
35494: PUSH
35495: LD_INT 12
35497: ST_TO_ADDR
// hc_gallery =  ;
35498: LD_ADDR_OWVAR 33
35502: PUSH
35503: LD_STRING 
35505: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
35506: LD_ADDR_OWVAR 35
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PPUSH
35515: LD_INT 2
35517: PPUSH
35518: CALL_OW 12
35522: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
35523: LD_ADDR_OWVAR 31
35527: PUSH
35528: LD_INT 1
35530: PPUSH
35531: LD_INT 3
35533: PPUSH
35534: CALL_OW 12
35538: PUSH
35539: LD_INT 1
35541: PPUSH
35542: LD_INT 3
35544: PPUSH
35545: CALL_OW 12
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// animal := CreateHuman ;
35562: LD_ADDR_VAR 0 12
35566: PUSH
35567: CALL_OW 44
35571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35572: LD_VAR 0 12
35576: PPUSH
35577: LD_VAR 0 8
35581: PPUSH
35582: LD_INT 0
35584: PPUSH
35585: CALL 37371 0 3
// end ;
35589: GO 35487
35591: POP
35592: POP
// if enchidnas then
35593: LD_VAR 0 4
35597: IFFALSE 35664
// for i = 1 to enchidnas do
35599: LD_ADDR_VAR 0 11
35603: PUSH
35604: DOUBLE
35605: LD_INT 1
35607: DEC
35608: ST_TO_ADDR
35609: LD_VAR 0 4
35613: PUSH
35614: FOR_TO
35615: IFFALSE 35662
// begin hc_class = 13 ;
35617: LD_ADDR_OWVAR 28
35621: PUSH
35622: LD_INT 13
35624: ST_TO_ADDR
// hc_gallery =  ;
35625: LD_ADDR_OWVAR 33
35629: PUSH
35630: LD_STRING 
35632: ST_TO_ADDR
// animal := CreateHuman ;
35633: LD_ADDR_VAR 0 12
35637: PUSH
35638: CALL_OW 44
35642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
35643: LD_VAR 0 12
35647: PPUSH
35648: LD_VAR 0 8
35652: PPUSH
35653: LD_INT 0
35655: PPUSH
35656: CALL 37371 0 3
// end ;
35660: GO 35614
35662: POP
35663: POP
// if fishes then
35664: LD_VAR 0 7
35668: IFFALSE 35735
// for i = 1 to fishes do
35670: LD_ADDR_VAR 0 11
35674: PUSH
35675: DOUBLE
35676: LD_INT 1
35678: DEC
35679: ST_TO_ADDR
35680: LD_VAR 0 7
35684: PUSH
35685: FOR_TO
35686: IFFALSE 35733
// begin hc_class = 20 ;
35688: LD_ADDR_OWVAR 28
35692: PUSH
35693: LD_INT 20
35695: ST_TO_ADDR
// hc_gallery =  ;
35696: LD_ADDR_OWVAR 33
35700: PUSH
35701: LD_STRING 
35703: ST_TO_ADDR
// animal := CreateHuman ;
35704: LD_ADDR_VAR 0 12
35708: PUSH
35709: CALL_OW 44
35713: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
35714: LD_VAR 0 12
35718: PPUSH
35719: LD_VAR 0 9
35723: PPUSH
35724: LD_INT 0
35726: PPUSH
35727: CALL 37371 0 3
// end ;
35731: GO 35685
35733: POP
35734: POP
// end ;
35735: LD_VAR 0 10
35739: RET
// export function WantHeal ( sci , unit ) ; begin
35740: LD_INT 0
35742: PPUSH
// if GetTaskList ( sci ) > 0 then
35743: LD_VAR 0 1
35747: PPUSH
35748: CALL_OW 437
35752: PUSH
35753: LD_INT 0
35755: GREATER
35756: IFFALSE 35826
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
35758: LD_VAR 0 1
35762: PPUSH
35763: CALL_OW 437
35767: PUSH
35768: LD_INT 1
35770: ARRAY
35771: PUSH
35772: LD_INT 1
35774: ARRAY
35775: PUSH
35776: LD_STRING l
35778: EQUAL
35779: PUSH
35780: LD_VAR 0 1
35784: PPUSH
35785: CALL_OW 437
35789: PUSH
35790: LD_INT 1
35792: ARRAY
35793: PUSH
35794: LD_INT 4
35796: ARRAY
35797: PUSH
35798: LD_VAR 0 2
35802: EQUAL
35803: AND
35804: IFFALSE 35816
// result := true else
35806: LD_ADDR_VAR 0 3
35810: PUSH
35811: LD_INT 1
35813: ST_TO_ADDR
35814: GO 35824
// result := false ;
35816: LD_ADDR_VAR 0 3
35820: PUSH
35821: LD_INT 0
35823: ST_TO_ADDR
// end else
35824: GO 35834
// result := false ;
35826: LD_ADDR_VAR 0 3
35830: PUSH
35831: LD_INT 0
35833: ST_TO_ADDR
// end ;
35834: LD_VAR 0 3
35838: RET
// export function HealTarget ( sci ) ; begin
35839: LD_INT 0
35841: PPUSH
// if not sci then
35842: LD_VAR 0 1
35846: NOT
35847: IFFALSE 35851
// exit ;
35849: GO 35916
// result := 0 ;
35851: LD_ADDR_VAR 0 2
35855: PUSH
35856: LD_INT 0
35858: ST_TO_ADDR
// if GetTaskList ( sci ) then
35859: LD_VAR 0 1
35863: PPUSH
35864: CALL_OW 437
35868: IFFALSE 35916
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
35870: LD_VAR 0 1
35874: PPUSH
35875: CALL_OW 437
35879: PUSH
35880: LD_INT 1
35882: ARRAY
35883: PUSH
35884: LD_INT 1
35886: ARRAY
35887: PUSH
35888: LD_STRING l
35890: EQUAL
35891: IFFALSE 35916
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
35893: LD_ADDR_VAR 0 2
35897: PUSH
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL_OW 437
35907: PUSH
35908: LD_INT 1
35910: ARRAY
35911: PUSH
35912: LD_INT 4
35914: ARRAY
35915: ST_TO_ADDR
// end ;
35916: LD_VAR 0 2
35920: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
35921: LD_INT 0
35923: PPUSH
35924: PPUSH
35925: PPUSH
35926: PPUSH
// if not base_units then
35927: LD_VAR 0 1
35931: NOT
35932: IFFALSE 35936
// exit ;
35934: GO 36023
// result := false ;
35936: LD_ADDR_VAR 0 2
35940: PUSH
35941: LD_INT 0
35943: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
35944: LD_ADDR_VAR 0 5
35948: PUSH
35949: LD_VAR 0 1
35953: PPUSH
35954: LD_INT 21
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PPUSH
35964: CALL_OW 72
35968: ST_TO_ADDR
// if not tmp then
35969: LD_VAR 0 5
35973: NOT
35974: IFFALSE 35978
// exit ;
35976: GO 36023
// for i in tmp do
35978: LD_ADDR_VAR 0 3
35982: PUSH
35983: LD_VAR 0 5
35987: PUSH
35988: FOR_IN
35989: IFFALSE 36021
// begin result := EnemyInRange ( i , 22 ) ;
35991: LD_ADDR_VAR 0 2
35995: PUSH
35996: LD_VAR 0 3
36000: PPUSH
36001: LD_INT 22
36003: PPUSH
36004: CALL 33692 0 2
36008: ST_TO_ADDR
// if result then
36009: LD_VAR 0 2
36013: IFFALSE 36019
// exit ;
36015: POP
36016: POP
36017: GO 36023
// end ;
36019: GO 35988
36021: POP
36022: POP
// end ;
36023: LD_VAR 0 2
36027: RET
// export function FilterByTag ( units , tag ) ; begin
36028: LD_INT 0
36030: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
36031: LD_ADDR_VAR 0 3
36035: PUSH
36036: LD_VAR 0 1
36040: PPUSH
36041: LD_INT 120
36043: PUSH
36044: LD_VAR 0 2
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PPUSH
36053: CALL_OW 72
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 3
36062: RET
// export function IsDriver ( un ) ; begin
36063: LD_INT 0
36065: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
36066: LD_ADDR_VAR 0 2
36070: PUSH
36071: LD_VAR 0 1
36075: PUSH
36076: LD_INT 55
36078: PUSH
36079: EMPTY
36080: LIST
36081: PPUSH
36082: CALL_OW 69
36086: IN
36087: ST_TO_ADDR
// end ;
36088: LD_VAR 0 2
36092: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
36093: LD_INT 0
36095: PPUSH
36096: PPUSH
// list := [ ] ;
36097: LD_ADDR_VAR 0 5
36101: PUSH
36102: EMPTY
36103: ST_TO_ADDR
// case d of 0 :
36104: LD_VAR 0 3
36108: PUSH
36109: LD_INT 0
36111: DOUBLE
36112: EQUAL
36113: IFTRUE 36117
36115: GO 36250
36117: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
36118: LD_ADDR_VAR 0 5
36122: PUSH
36123: LD_VAR 0 1
36127: PUSH
36128: LD_INT 4
36130: MINUS
36131: PUSH
36132: LD_VAR 0 2
36136: PUSH
36137: LD_INT 4
36139: MINUS
36140: PUSH
36141: LD_INT 2
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: PUSH
36149: LD_VAR 0 1
36153: PUSH
36154: LD_INT 3
36156: MINUS
36157: PUSH
36158: LD_VAR 0 2
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: LIST
36170: PUSH
36171: LD_VAR 0 1
36175: PUSH
36176: LD_INT 4
36178: PLUS
36179: PUSH
36180: LD_VAR 0 2
36184: PUSH
36185: LD_INT 4
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: LIST
36192: PUSH
36193: LD_VAR 0 1
36197: PUSH
36198: LD_INT 3
36200: PLUS
36201: PUSH
36202: LD_VAR 0 2
36206: PUSH
36207: LD_INT 3
36209: PLUS
36210: PUSH
36211: LD_INT 5
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: LD_VAR 0 1
36223: PUSH
36224: LD_VAR 0 2
36228: PUSH
36229: LD_INT 4
36231: PLUS
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: LIST
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// end ; 1 :
36248: GO 36948
36250: LD_INT 1
36252: DOUBLE
36253: EQUAL
36254: IFTRUE 36258
36256: GO 36391
36258: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
36259: LD_ADDR_VAR 0 5
36263: PUSH
36264: LD_VAR 0 1
36268: PUSH
36269: LD_VAR 0 2
36273: PUSH
36274: LD_INT 4
36276: MINUS
36277: PUSH
36278: LD_INT 3
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: PUSH
36286: LD_VAR 0 1
36290: PUSH
36291: LD_INT 3
36293: MINUS
36294: PUSH
36295: LD_VAR 0 2
36299: PUSH
36300: LD_INT 3
36302: MINUS
36303: PUSH
36304: LD_INT 2
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: PUSH
36312: LD_VAR 0 1
36316: PUSH
36317: LD_INT 4
36319: MINUS
36320: PUSH
36321: LD_VAR 0 2
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: LIST
36333: PUSH
36334: LD_VAR 0 1
36338: PUSH
36339: LD_VAR 0 2
36343: PUSH
36344: LD_INT 3
36346: PLUS
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: LIST
36355: PUSH
36356: LD_VAR 0 1
36360: PUSH
36361: LD_INT 4
36363: PLUS
36364: PUSH
36365: LD_VAR 0 2
36369: PUSH
36370: LD_INT 4
36372: PLUS
36373: PUSH
36374: LD_INT 5
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// end ; 2 :
36389: GO 36948
36391: LD_INT 2
36393: DOUBLE
36394: EQUAL
36395: IFTRUE 36399
36397: GO 36528
36399: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
36400: LD_ADDR_VAR 0 5
36404: PUSH
36405: LD_VAR 0 1
36409: PUSH
36410: LD_VAR 0 2
36414: PUSH
36415: LD_INT 3
36417: MINUS
36418: PUSH
36419: LD_INT 3
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: PUSH
36427: LD_VAR 0 1
36431: PUSH
36432: LD_INT 4
36434: PLUS
36435: PUSH
36436: LD_VAR 0 2
36440: PUSH
36441: LD_INT 4
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: PUSH
36449: LD_VAR 0 1
36453: PUSH
36454: LD_VAR 0 2
36458: PUSH
36459: LD_INT 4
36461: PLUS
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: PUSH
36471: LD_VAR 0 1
36475: PUSH
36476: LD_INT 3
36478: MINUS
36479: PUSH
36480: LD_VAR 0 2
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: PUSH
36493: LD_VAR 0 1
36497: PUSH
36498: LD_INT 4
36500: MINUS
36501: PUSH
36502: LD_VAR 0 2
36506: PUSH
36507: LD_INT 4
36509: MINUS
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: LIST
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// end ; 3 :
36526: GO 36948
36528: LD_INT 3
36530: DOUBLE
36531: EQUAL
36532: IFTRUE 36536
36534: GO 36669
36536: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
36537: LD_ADDR_VAR 0 5
36541: PUSH
36542: LD_VAR 0 1
36546: PUSH
36547: LD_INT 3
36549: PLUS
36550: PUSH
36551: LD_VAR 0 2
36555: PUSH
36556: LD_INT 4
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: PUSH
36564: LD_VAR 0 1
36568: PUSH
36569: LD_INT 4
36571: PLUS
36572: PUSH
36573: LD_VAR 0 2
36577: PUSH
36578: LD_INT 4
36580: PLUS
36581: PUSH
36582: LD_INT 5
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: PUSH
36590: LD_VAR 0 1
36594: PUSH
36595: LD_INT 4
36597: MINUS
36598: PUSH
36599: LD_VAR 0 2
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: PUSH
36612: LD_VAR 0 1
36616: PUSH
36617: LD_VAR 0 2
36621: PUSH
36622: LD_INT 4
36624: MINUS
36625: PUSH
36626: LD_INT 3
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: LIST
36633: PUSH
36634: LD_VAR 0 1
36638: PUSH
36639: LD_INT 3
36641: MINUS
36642: PUSH
36643: LD_VAR 0 2
36647: PUSH
36648: LD_INT 3
36650: MINUS
36651: PUSH
36652: LD_INT 2
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: ST_TO_ADDR
// end ; 4 :
36667: GO 36948
36669: LD_INT 4
36671: DOUBLE
36672: EQUAL
36673: IFTRUE 36677
36675: GO 36810
36677: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
36678: LD_ADDR_VAR 0 5
36682: PUSH
36683: LD_VAR 0 1
36687: PUSH
36688: LD_VAR 0 2
36692: PUSH
36693: LD_INT 4
36695: PLUS
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: LIST
36704: PUSH
36705: LD_VAR 0 1
36709: PUSH
36710: LD_INT 3
36712: PLUS
36713: PUSH
36714: LD_VAR 0 2
36718: PUSH
36719: LD_INT 3
36721: PLUS
36722: PUSH
36723: LD_INT 5
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: PUSH
36731: LD_VAR 0 1
36735: PUSH
36736: LD_INT 4
36738: PLUS
36739: PUSH
36740: LD_VAR 0 2
36744: PUSH
36745: LD_INT 4
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: LIST
36752: PUSH
36753: LD_VAR 0 1
36757: PUSH
36758: LD_VAR 0 2
36762: PUSH
36763: LD_INT 3
36765: MINUS
36766: PUSH
36767: LD_INT 3
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: LIST
36774: PUSH
36775: LD_VAR 0 1
36779: PUSH
36780: LD_INT 4
36782: MINUS
36783: PUSH
36784: LD_VAR 0 2
36788: PUSH
36789: LD_INT 4
36791: MINUS
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: ST_TO_ADDR
// end ; 5 :
36808: GO 36948
36810: LD_INT 5
36812: DOUBLE
36813: EQUAL
36814: IFTRUE 36818
36816: GO 36947
36818: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
36819: LD_ADDR_VAR 0 5
36823: PUSH
36824: LD_VAR 0 1
36828: PUSH
36829: LD_INT 4
36831: MINUS
36832: PUSH
36833: LD_VAR 0 2
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: PUSH
36846: LD_VAR 0 1
36850: PUSH
36851: LD_VAR 0 2
36855: PUSH
36856: LD_INT 4
36858: MINUS
36859: PUSH
36860: LD_INT 3
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: PUSH
36868: LD_VAR 0 1
36872: PUSH
36873: LD_INT 4
36875: PLUS
36876: PUSH
36877: LD_VAR 0 2
36881: PUSH
36882: LD_INT 4
36884: PLUS
36885: PUSH
36886: LD_INT 5
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: LIST
36893: PUSH
36894: LD_VAR 0 1
36898: PUSH
36899: LD_INT 3
36901: PLUS
36902: PUSH
36903: LD_VAR 0 2
36907: PUSH
36908: LD_INT 4
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: LIST
36915: PUSH
36916: LD_VAR 0 1
36920: PUSH
36921: LD_VAR 0 2
36925: PUSH
36926: LD_INT 3
36928: PLUS
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: ST_TO_ADDR
// end ; end ;
36945: GO 36948
36947: POP
// result := list ;
36948: LD_ADDR_VAR 0 4
36952: PUSH
36953: LD_VAR 0 5
36957: ST_TO_ADDR
// end ;
36958: LD_VAR 0 4
36962: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
36963: LD_INT 0
36965: PPUSH
36966: PPUSH
36967: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
36968: LD_VAR 0 1
36972: NOT
36973: PUSH
36974: LD_VAR 0 2
36978: PUSH
36979: LD_INT 1
36981: PUSH
36982: LD_INT 2
36984: PUSH
36985: LD_INT 3
36987: PUSH
36988: LD_INT 4
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: IN
36997: NOT
36998: OR
36999: IFFALSE 37003
// exit ;
37001: GO 37095
// tmp := [ ] ;
37003: LD_ADDR_VAR 0 5
37007: PUSH
37008: EMPTY
37009: ST_TO_ADDR
// for i in units do
37010: LD_ADDR_VAR 0 4
37014: PUSH
37015: LD_VAR 0 1
37019: PUSH
37020: FOR_IN
37021: IFFALSE 37064
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
37023: LD_ADDR_VAR 0 5
37027: PUSH
37028: LD_VAR 0 5
37032: PPUSH
37033: LD_VAR 0 5
37037: PUSH
37038: LD_INT 1
37040: PLUS
37041: PPUSH
37042: LD_VAR 0 4
37046: PPUSH
37047: LD_VAR 0 2
37051: PPUSH
37052: CALL_OW 259
37056: PPUSH
37057: CALL_OW 2
37061: ST_TO_ADDR
37062: GO 37020
37064: POP
37065: POP
// if not tmp then
37066: LD_VAR 0 5
37070: NOT
37071: IFFALSE 37075
// exit ;
37073: GO 37095
// result := SortListByListDesc ( units , tmp ) ;
37075: LD_ADDR_VAR 0 3
37079: PUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: LD_VAR 0 5
37089: PPUSH
37090: CALL_OW 77
37094: ST_TO_ADDR
// end ;
37095: LD_VAR 0 3
37099: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
37100: LD_INT 0
37102: PPUSH
37103: PPUSH
37104: PPUSH
// result := false ;
37105: LD_ADDR_VAR 0 3
37109: PUSH
37110: LD_INT 0
37112: ST_TO_ADDR
// x := GetX ( building ) ;
37113: LD_ADDR_VAR 0 4
37117: PUSH
37118: LD_VAR 0 2
37122: PPUSH
37123: CALL_OW 250
37127: ST_TO_ADDR
// y := GetY ( building ) ;
37128: LD_ADDR_VAR 0 5
37132: PUSH
37133: LD_VAR 0 2
37137: PPUSH
37138: CALL_OW 251
37142: ST_TO_ADDR
// if not building or not x or not y then
37143: LD_VAR 0 2
37147: NOT
37148: PUSH
37149: LD_VAR 0 4
37153: NOT
37154: OR
37155: PUSH
37156: LD_VAR 0 5
37160: NOT
37161: OR
37162: IFFALSE 37166
// exit ;
37164: GO 37258
// if GetTaskList ( unit ) then
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 437
37175: IFFALSE 37258
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37177: LD_STRING e
37179: PUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 437
37189: PUSH
37190: LD_INT 1
37192: ARRAY
37193: PUSH
37194: LD_INT 1
37196: ARRAY
37197: EQUAL
37198: PUSH
37199: LD_VAR 0 4
37203: PUSH
37204: LD_VAR 0 1
37208: PPUSH
37209: CALL_OW 437
37213: PUSH
37214: LD_INT 1
37216: ARRAY
37217: PUSH
37218: LD_INT 2
37220: ARRAY
37221: EQUAL
37222: AND
37223: PUSH
37224: LD_VAR 0 5
37228: PUSH
37229: LD_VAR 0 1
37233: PPUSH
37234: CALL_OW 437
37238: PUSH
37239: LD_INT 1
37241: ARRAY
37242: PUSH
37243: LD_INT 3
37245: ARRAY
37246: EQUAL
37247: AND
37248: IFFALSE 37258
// result := true end ;
37250: LD_ADDR_VAR 0 3
37254: PUSH
37255: LD_INT 1
37257: ST_TO_ADDR
// end ;
37258: LD_VAR 0 3
37262: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
37263: LD_INT 0
37265: PPUSH
// result := false ;
37266: LD_ADDR_VAR 0 4
37270: PUSH
37271: LD_INT 0
37273: ST_TO_ADDR
// if GetTaskList ( unit ) then
37274: LD_VAR 0 1
37278: PPUSH
37279: CALL_OW 437
37283: IFFALSE 37366
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
37285: LD_STRING M
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 437
37297: PUSH
37298: LD_INT 1
37300: ARRAY
37301: PUSH
37302: LD_INT 1
37304: ARRAY
37305: EQUAL
37306: PUSH
37307: LD_VAR 0 2
37311: PUSH
37312: LD_VAR 0 1
37316: PPUSH
37317: CALL_OW 437
37321: PUSH
37322: LD_INT 1
37324: ARRAY
37325: PUSH
37326: LD_INT 2
37328: ARRAY
37329: EQUAL
37330: AND
37331: PUSH
37332: LD_VAR 0 3
37336: PUSH
37337: LD_VAR 0 1
37341: PPUSH
37342: CALL_OW 437
37346: PUSH
37347: LD_INT 1
37349: ARRAY
37350: PUSH
37351: LD_INT 3
37353: ARRAY
37354: EQUAL
37355: AND
37356: IFFALSE 37366
// result := true ;
37358: LD_ADDR_VAR 0 4
37362: PUSH
37363: LD_INT 1
37365: ST_TO_ADDR
// end ; end ;
37366: LD_VAR 0 4
37370: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
37371: LD_INT 0
37373: PPUSH
37374: PPUSH
37375: PPUSH
37376: PPUSH
// if not unit or not area then
37377: LD_VAR 0 1
37381: NOT
37382: PUSH
37383: LD_VAR 0 2
37387: NOT
37388: OR
37389: IFFALSE 37393
// exit ;
37391: GO 37557
// tmp := AreaToList ( area , i ) ;
37393: LD_ADDR_VAR 0 6
37397: PUSH
37398: LD_VAR 0 2
37402: PPUSH
37403: LD_VAR 0 5
37407: PPUSH
37408: CALL_OW 517
37412: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
37413: LD_ADDR_VAR 0 5
37417: PUSH
37418: DOUBLE
37419: LD_INT 1
37421: DEC
37422: ST_TO_ADDR
37423: LD_VAR 0 6
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PUSH
37432: FOR_TO
37433: IFFALSE 37555
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
37435: LD_ADDR_VAR 0 7
37439: PUSH
37440: LD_VAR 0 6
37444: PUSH
37445: LD_INT 1
37447: ARRAY
37448: PUSH
37449: LD_VAR 0 5
37453: ARRAY
37454: PUSH
37455: LD_VAR 0 6
37459: PUSH
37460: LD_INT 2
37462: ARRAY
37463: PUSH
37464: LD_VAR 0 5
37468: ARRAY
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
37474: LD_VAR 0 7
37478: PUSH
37479: LD_INT 1
37481: ARRAY
37482: PPUSH
37483: LD_VAR 0 7
37487: PUSH
37488: LD_INT 2
37490: ARRAY
37491: PPUSH
37492: CALL_OW 428
37496: PUSH
37497: LD_INT 0
37499: EQUAL
37500: IFFALSE 37553
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
37502: LD_VAR 0 1
37506: PPUSH
37507: LD_VAR 0 7
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PPUSH
37516: LD_VAR 0 7
37520: PUSH
37521: LD_INT 2
37523: ARRAY
37524: PPUSH
37525: LD_VAR 0 3
37529: PPUSH
37530: CALL_OW 48
// result := IsPlaced ( unit ) ;
37534: LD_ADDR_VAR 0 4
37538: PUSH
37539: LD_VAR 0 1
37543: PPUSH
37544: CALL_OW 305
37548: ST_TO_ADDR
// exit ;
37549: POP
37550: POP
37551: GO 37557
// end ; end ;
37553: GO 37432
37555: POP
37556: POP
// end ;
37557: LD_VAR 0 4
37561: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
37562: LD_INT 0
37564: PPUSH
37565: PPUSH
37566: PPUSH
// if not side or side > 8 then
37567: LD_VAR 0 1
37571: NOT
37572: PUSH
37573: LD_VAR 0 1
37577: PUSH
37578: LD_INT 8
37580: GREATER
37581: OR
37582: IFFALSE 37586
// exit ;
37584: GO 37773
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
37586: LD_ADDR_VAR 0 4
37590: PUSH
37591: LD_INT 22
37593: PUSH
37594: LD_VAR 0 1
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 21
37605: PUSH
37606: LD_INT 3
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PPUSH
37617: CALL_OW 69
37621: ST_TO_ADDR
// if not tmp then
37622: LD_VAR 0 4
37626: NOT
37627: IFFALSE 37631
// exit ;
37629: GO 37773
// enable_addtolog := true ;
37631: LD_ADDR_OWVAR 81
37635: PUSH
37636: LD_INT 1
37638: ST_TO_ADDR
// AddToLog ( [ ) ;
37639: LD_STRING [
37641: PPUSH
37642: CALL_OW 561
// for i in tmp do
37646: LD_ADDR_VAR 0 3
37650: PUSH
37651: LD_VAR 0 4
37655: PUSH
37656: FOR_IN
37657: IFFALSE 37764
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
37659: LD_STRING [
37661: PUSH
37662: LD_VAR 0 3
37666: PPUSH
37667: CALL_OW 266
37671: STR
37672: PUSH
37673: LD_STRING , 
37675: STR
37676: PUSH
37677: LD_VAR 0 3
37681: PPUSH
37682: CALL_OW 250
37686: STR
37687: PUSH
37688: LD_STRING , 
37690: STR
37691: PUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: CALL_OW 251
37701: STR
37702: PUSH
37703: LD_STRING , 
37705: STR
37706: PUSH
37707: LD_VAR 0 3
37711: PPUSH
37712: CALL_OW 254
37716: STR
37717: PUSH
37718: LD_STRING , 
37720: STR
37721: PUSH
37722: LD_VAR 0 3
37726: PPUSH
37727: LD_INT 1
37729: PPUSH
37730: CALL_OW 268
37734: STR
37735: PUSH
37736: LD_STRING , 
37738: STR
37739: PUSH
37740: LD_VAR 0 3
37744: PPUSH
37745: LD_INT 2
37747: PPUSH
37748: CALL_OW 268
37752: STR
37753: PUSH
37754: LD_STRING ],
37756: STR
37757: PPUSH
37758: CALL_OW 561
// end ;
37762: GO 37656
37764: POP
37765: POP
// AddToLog ( ]; ) ;
37766: LD_STRING ];
37768: PPUSH
37769: CALL_OW 561
// end ;
37773: LD_VAR 0 2
37777: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
37778: LD_INT 0
37780: PPUSH
37781: PPUSH
37782: PPUSH
37783: PPUSH
37784: PPUSH
// if not area or not rate or not max then
37785: LD_VAR 0 1
37789: NOT
37790: PUSH
37791: LD_VAR 0 2
37795: NOT
37796: OR
37797: PUSH
37798: LD_VAR 0 4
37802: NOT
37803: OR
37804: IFFALSE 37808
// exit ;
37806: GO 37997
// while 1 do
37808: LD_INT 1
37810: IFFALSE 37997
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
37812: LD_ADDR_VAR 0 9
37816: PUSH
37817: LD_VAR 0 1
37821: PPUSH
37822: LD_INT 1
37824: PPUSH
37825: CALL_OW 287
37829: PUSH
37830: LD_INT 10
37832: MUL
37833: ST_TO_ADDR
// r := rate / 10 ;
37834: LD_ADDR_VAR 0 7
37838: PUSH
37839: LD_VAR 0 2
37843: PUSH
37844: LD_INT 10
37846: DIVREAL
37847: ST_TO_ADDR
// time := 1 1$00 ;
37848: LD_ADDR_VAR 0 8
37852: PUSH
37853: LD_INT 2100
37855: ST_TO_ADDR
// if amount < min then
37856: LD_VAR 0 9
37860: PUSH
37861: LD_VAR 0 3
37865: LESS
37866: IFFALSE 37884
// r := r * 2 else
37868: LD_ADDR_VAR 0 7
37872: PUSH
37873: LD_VAR 0 7
37877: PUSH
37878: LD_INT 2
37880: MUL
37881: ST_TO_ADDR
37882: GO 37910
// if amount > max then
37884: LD_VAR 0 9
37888: PUSH
37889: LD_VAR 0 4
37893: GREATER
37894: IFFALSE 37910
// r := r / 2 ;
37896: LD_ADDR_VAR 0 7
37900: PUSH
37901: LD_VAR 0 7
37905: PUSH
37906: LD_INT 2
37908: DIVREAL
37909: ST_TO_ADDR
// time := time / r ;
37910: LD_ADDR_VAR 0 8
37914: PUSH
37915: LD_VAR 0 8
37919: PUSH
37920: LD_VAR 0 7
37924: DIVREAL
37925: ST_TO_ADDR
// if time < 0 then
37926: LD_VAR 0 8
37930: PUSH
37931: LD_INT 0
37933: LESS
37934: IFFALSE 37951
// time := time * - 1 ;
37936: LD_ADDR_VAR 0 8
37940: PUSH
37941: LD_VAR 0 8
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: MUL
37950: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
37951: LD_VAR 0 8
37955: PUSH
37956: LD_INT 35
37958: PPUSH
37959: LD_INT 875
37961: PPUSH
37962: CALL_OW 12
37966: PLUS
37967: PPUSH
37968: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
37972: LD_INT 1
37974: PPUSH
37975: LD_INT 5
37977: PPUSH
37978: CALL_OW 12
37982: PPUSH
37983: LD_VAR 0 1
37987: PPUSH
37988: LD_INT 1
37990: PPUSH
37991: CALL_OW 55
// end ;
37995: GO 37808
// end ;
37997: LD_VAR 0 5
38001: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
38002: LD_INT 0
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
38009: PPUSH
38010: PPUSH
38011: PPUSH
// if not turrets or not factories then
38012: LD_VAR 0 1
38016: NOT
38017: PUSH
38018: LD_VAR 0 2
38022: NOT
38023: OR
38024: IFFALSE 38028
// exit ;
38026: GO 38335
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
38028: LD_ADDR_VAR 0 10
38032: PUSH
38033: LD_INT 5
38035: PUSH
38036: LD_INT 6
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 4
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 3
38055: PUSH
38056: LD_INT 5
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 24
38070: PUSH
38071: LD_INT 25
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 23
38080: PUSH
38081: LD_INT 27
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 42
38094: PUSH
38095: LD_INT 43
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 44
38104: PUSH
38105: LD_INT 46
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 45
38114: PUSH
38115: LD_INT 47
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: LIST
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: LIST
38131: ST_TO_ADDR
// result := [ ] ;
38132: LD_ADDR_VAR 0 3
38136: PUSH
38137: EMPTY
38138: ST_TO_ADDR
// for i in turrets do
38139: LD_ADDR_VAR 0 4
38143: PUSH
38144: LD_VAR 0 1
38148: PUSH
38149: FOR_IN
38150: IFFALSE 38333
// begin nat := GetNation ( i ) ;
38152: LD_ADDR_VAR 0 7
38156: PUSH
38157: LD_VAR 0 4
38161: PPUSH
38162: CALL_OW 248
38166: ST_TO_ADDR
// weapon := 0 ;
38167: LD_ADDR_VAR 0 8
38171: PUSH
38172: LD_INT 0
38174: ST_TO_ADDR
// if not nat then
38175: LD_VAR 0 7
38179: NOT
38180: IFFALSE 38184
// continue ;
38182: GO 38149
// for j in list [ nat ] do
38184: LD_ADDR_VAR 0 5
38188: PUSH
38189: LD_VAR 0 10
38193: PUSH
38194: LD_VAR 0 7
38198: ARRAY
38199: PUSH
38200: FOR_IN
38201: IFFALSE 38242
// if GetBWeapon ( i ) = j [ 1 ] then
38203: LD_VAR 0 4
38207: PPUSH
38208: CALL_OW 269
38212: PUSH
38213: LD_VAR 0 5
38217: PUSH
38218: LD_INT 1
38220: ARRAY
38221: EQUAL
38222: IFFALSE 38240
// begin weapon := j [ 2 ] ;
38224: LD_ADDR_VAR 0 8
38228: PUSH
38229: LD_VAR 0 5
38233: PUSH
38234: LD_INT 2
38236: ARRAY
38237: ST_TO_ADDR
// break ;
38238: GO 38242
// end ;
38240: GO 38200
38242: POP
38243: POP
// if not weapon then
38244: LD_VAR 0 8
38248: NOT
38249: IFFALSE 38253
// continue ;
38251: GO 38149
// for k in factories do
38253: LD_ADDR_VAR 0 6
38257: PUSH
38258: LD_VAR 0 2
38262: PUSH
38263: FOR_IN
38264: IFFALSE 38329
// begin weapons := AvailableWeaponList ( k ) ;
38266: LD_ADDR_VAR 0 9
38270: PUSH
38271: LD_VAR 0 6
38275: PPUSH
38276: CALL_OW 478
38280: ST_TO_ADDR
// if not weapons then
38281: LD_VAR 0 9
38285: NOT
38286: IFFALSE 38290
// continue ;
38288: GO 38263
// if weapon in weapons then
38290: LD_VAR 0 8
38294: PUSH
38295: LD_VAR 0 9
38299: IN
38300: IFFALSE 38327
// begin result := [ i , weapon ] ;
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_VAR 0 4
38311: PUSH
38312: LD_VAR 0 8
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: ST_TO_ADDR
// exit ;
38321: POP
38322: POP
38323: POP
38324: POP
38325: GO 38335
// end ; end ;
38327: GO 38263
38329: POP
38330: POP
// end ;
38331: GO 38149
38333: POP
38334: POP
// end ;
38335: LD_VAR 0 3
38339: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
38340: LD_INT 0
38342: PPUSH
// if not side or side > 8 then
38343: LD_VAR 0 3
38347: NOT
38348: PUSH
38349: LD_VAR 0 3
38353: PUSH
38354: LD_INT 8
38356: GREATER
38357: OR
38358: IFFALSE 38362
// exit ;
38360: GO 38421
// if not range then
38362: LD_VAR 0 4
38366: NOT
38367: IFFALSE 38378
// range := - 12 ;
38369: LD_ADDR_VAR 0 4
38373: PUSH
38374: LD_INT 12
38376: NEG
38377: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
38378: LD_VAR 0 1
38382: PPUSH
38383: LD_VAR 0 2
38387: PPUSH
38388: LD_VAR 0 3
38392: PPUSH
38393: LD_VAR 0 4
38397: PPUSH
38398: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
38402: LD_VAR 0 1
38406: PPUSH
38407: LD_VAR 0 2
38411: PPUSH
38412: LD_VAR 0 3
38416: PPUSH
38417: CALL_OW 331
// end ;
38421: LD_VAR 0 5
38425: RET
// export function Video ( mode ) ; begin
38426: LD_INT 0
38428: PPUSH
// ingame_video = mode ;
38429: LD_ADDR_OWVAR 52
38433: PUSH
38434: LD_VAR 0 1
38438: ST_TO_ADDR
// interface_hidden = mode ;
38439: LD_ADDR_OWVAR 54
38443: PUSH
38444: LD_VAR 0 1
38448: ST_TO_ADDR
// end ;
38449: LD_VAR 0 2
38453: RET
// export function Join ( array , element ) ; begin
38454: LD_INT 0
38456: PPUSH
// result := Replace ( array , array + 1 , element ) ;
38457: LD_ADDR_VAR 0 3
38461: PUSH
38462: LD_VAR 0 1
38466: PPUSH
38467: LD_VAR 0 1
38471: PUSH
38472: LD_INT 1
38474: PLUS
38475: PPUSH
38476: LD_VAR 0 2
38480: PPUSH
38481: CALL_OW 1
38485: ST_TO_ADDR
// end ;
38486: LD_VAR 0 3
38490: RET
// export function JoinUnion ( array , element ) ; begin
38491: LD_INT 0
38493: PPUSH
// result := array union element ;
38494: LD_ADDR_VAR 0 3
38498: PUSH
38499: LD_VAR 0 1
38503: PUSH
38504: LD_VAR 0 2
38508: UNION
38509: ST_TO_ADDR
// end ;
38510: LD_VAR 0 3
38514: RET
// export function GetBehemoths ( side ) ; begin
38515: LD_INT 0
38517: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
38518: LD_ADDR_VAR 0 2
38522: PUSH
38523: LD_INT 22
38525: PUSH
38526: LD_VAR 0 1
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 31
38537: PUSH
38538: LD_INT 25
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PPUSH
38549: CALL_OW 69
38553: ST_TO_ADDR
// end ;
38554: LD_VAR 0 2
38558: RET
// export function Shuffle ( array ) ; var i , index ; begin
38559: LD_INT 0
38561: PPUSH
38562: PPUSH
38563: PPUSH
// result := [ ] ;
38564: LD_ADDR_VAR 0 2
38568: PUSH
38569: EMPTY
38570: ST_TO_ADDR
// if not array then
38571: LD_VAR 0 1
38575: NOT
38576: IFFALSE 38580
// exit ;
38578: GO 38679
// Randomize ;
38580: CALL_OW 10
// for i = array downto 1 do
38584: LD_ADDR_VAR 0 3
38588: PUSH
38589: DOUBLE
38590: LD_VAR 0 1
38594: INC
38595: ST_TO_ADDR
38596: LD_INT 1
38598: PUSH
38599: FOR_DOWNTO
38600: IFFALSE 38677
// begin index := rand ( 1 , array ) ;
38602: LD_ADDR_VAR 0 4
38606: PUSH
38607: LD_INT 1
38609: PPUSH
38610: LD_VAR 0 1
38614: PPUSH
38615: CALL_OW 12
38619: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
38620: LD_ADDR_VAR 0 2
38624: PUSH
38625: LD_VAR 0 2
38629: PPUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_INT 1
38637: PLUS
38638: PPUSH
38639: LD_VAR 0 1
38643: PUSH
38644: LD_VAR 0 4
38648: ARRAY
38649: PPUSH
38650: CALL_OW 2
38654: ST_TO_ADDR
// array := Delete ( array , index ) ;
38655: LD_ADDR_VAR 0 1
38659: PUSH
38660: LD_VAR 0 1
38664: PPUSH
38665: LD_VAR 0 4
38669: PPUSH
38670: CALL_OW 3
38674: ST_TO_ADDR
// end ;
38675: GO 38599
38677: POP
38678: POP
// end ;
38679: LD_VAR 0 2
38683: RET
// export function GetBaseMaterials ( base ) ; begin
38684: LD_INT 0
38686: PPUSH
// result := [ 0 , 0 , 0 ] ;
38687: LD_ADDR_VAR 0 2
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 0
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: LIST
38705: ST_TO_ADDR
// if not base then
38706: LD_VAR 0 1
38710: NOT
38711: IFFALSE 38715
// exit ;
38713: GO 38764
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
38715: LD_ADDR_VAR 0 2
38719: PUSH
38720: LD_VAR 0 1
38724: PPUSH
38725: LD_INT 1
38727: PPUSH
38728: CALL_OW 275
38732: PUSH
38733: LD_VAR 0 1
38737: PPUSH
38738: LD_INT 2
38740: PPUSH
38741: CALL_OW 275
38745: PUSH
38746: LD_VAR 0 1
38750: PPUSH
38751: LD_INT 3
38753: PPUSH
38754: CALL_OW 275
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: LIST
38763: ST_TO_ADDR
// end ;
38764: LD_VAR 0 2
38768: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
38769: LD_INT 0
38771: PPUSH
38772: PPUSH
// result := array ;
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_VAR 0 1
38782: ST_TO_ADDR
// if size >= result then
38783: LD_VAR 0 2
38787: PUSH
38788: LD_VAR 0 3
38792: GREATEREQUAL
38793: IFFALSE 38797
// exit ;
38795: GO 38847
// if size then
38797: LD_VAR 0 2
38801: IFFALSE 38847
// for i := array downto size do
38803: LD_ADDR_VAR 0 4
38807: PUSH
38808: DOUBLE
38809: LD_VAR 0 1
38813: INC
38814: ST_TO_ADDR
38815: LD_VAR 0 2
38819: PUSH
38820: FOR_DOWNTO
38821: IFFALSE 38845
// result := Delete ( result , result ) ;
38823: LD_ADDR_VAR 0 3
38827: PUSH
38828: LD_VAR 0 3
38832: PPUSH
38833: LD_VAR 0 3
38837: PPUSH
38838: CALL_OW 3
38842: ST_TO_ADDR
38843: GO 38820
38845: POP
38846: POP
// end ;
38847: LD_VAR 0 3
38851: RET
// export function ComExit ( unit ) ; var tmp ; begin
38852: LD_INT 0
38854: PPUSH
38855: PPUSH
// if not IsInUnit ( unit ) then
38856: LD_VAR 0 1
38860: PPUSH
38861: CALL_OW 310
38865: NOT
38866: IFFALSE 38870
// exit ;
38868: GO 38930
// tmp := IsInUnit ( unit ) ;
38870: LD_ADDR_VAR 0 3
38874: PUSH
38875: LD_VAR 0 1
38879: PPUSH
38880: CALL_OW 310
38884: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
38885: LD_VAR 0 3
38889: PPUSH
38890: CALL_OW 247
38894: PUSH
38895: LD_INT 2
38897: EQUAL
38898: IFFALSE 38911
// ComExitVehicle ( unit ) else
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 121
38909: GO 38920
// ComExitBuilding ( unit ) ;
38911: LD_VAR 0 1
38915: PPUSH
38916: CALL_OW 122
// result := tmp ;
38920: LD_ADDR_VAR 0 2
38924: PUSH
38925: LD_VAR 0 3
38929: ST_TO_ADDR
// end ;
38930: LD_VAR 0 2
38934: RET
// export function ComExitAll ( units ) ; var i ; begin
38935: LD_INT 0
38937: PPUSH
38938: PPUSH
// if not units then
38939: LD_VAR 0 1
38943: NOT
38944: IFFALSE 38948
// exit ;
38946: GO 38974
// for i in units do
38948: LD_ADDR_VAR 0 3
38952: PUSH
38953: LD_VAR 0 1
38957: PUSH
38958: FOR_IN
38959: IFFALSE 38972
// ComExit ( i ) ;
38961: LD_VAR 0 3
38965: PPUSH
38966: CALL 38852 0 1
38970: GO 38958
38972: POP
38973: POP
// end ;
38974: LD_VAR 0 2
38978: RET
// export function ResetHc ; begin
38979: LD_INT 0
38981: PPUSH
// InitHc ;
38982: CALL_OW 19
// hc_importance := 0 ;
38986: LD_ADDR_OWVAR 32
38990: PUSH
38991: LD_INT 0
38993: ST_TO_ADDR
// end ;
38994: LD_VAR 0 1
38998: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38999: LD_INT 0
39001: PPUSH
39002: PPUSH
39003: PPUSH
// _x := ( x1 + x2 ) div 2 ;
39004: LD_ADDR_VAR 0 6
39008: PUSH
39009: LD_VAR 0 1
39013: PUSH
39014: LD_VAR 0 3
39018: PLUS
39019: PUSH
39020: LD_INT 2
39022: DIV
39023: ST_TO_ADDR
// if _x < 0 then
39024: LD_VAR 0 6
39028: PUSH
39029: LD_INT 0
39031: LESS
39032: IFFALSE 39049
// _x := _x * - 1 ;
39034: LD_ADDR_VAR 0 6
39038: PUSH
39039: LD_VAR 0 6
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: MUL
39048: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
39049: LD_ADDR_VAR 0 7
39053: PUSH
39054: LD_VAR 0 2
39058: PUSH
39059: LD_VAR 0 4
39063: PLUS
39064: PUSH
39065: LD_INT 2
39067: DIV
39068: ST_TO_ADDR
// if _y < 0 then
39069: LD_VAR 0 7
39073: PUSH
39074: LD_INT 0
39076: LESS
39077: IFFALSE 39094
// _y := _y * - 1 ;
39079: LD_ADDR_VAR 0 7
39083: PUSH
39084: LD_VAR 0 7
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: MUL
39093: ST_TO_ADDR
// result := [ _x , _y ] ;
39094: LD_ADDR_VAR 0 5
39098: PUSH
39099: LD_VAR 0 6
39103: PUSH
39104: LD_VAR 0 7
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: ST_TO_ADDR
// end ;
39113: LD_VAR 0 5
39117: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
// task := GetTaskList ( unit ) ;
39124: LD_ADDR_VAR 0 7
39128: PUSH
39129: LD_VAR 0 1
39133: PPUSH
39134: CALL_OW 437
39138: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
39139: LD_VAR 0 7
39143: NOT
39144: PUSH
39145: LD_VAR 0 1
39149: PPUSH
39150: LD_VAR 0 2
39154: PPUSH
39155: CALL_OW 308
39159: NOT
39160: AND
39161: IFFALSE 39165
// exit ;
39163: GO 39283
// if IsInArea ( unit , area ) then
39165: LD_VAR 0 1
39169: PPUSH
39170: LD_VAR 0 2
39174: PPUSH
39175: CALL_OW 308
39179: IFFALSE 39197
// begin ComMoveToArea ( unit , goAway ) ;
39181: LD_VAR 0 1
39185: PPUSH
39186: LD_VAR 0 3
39190: PPUSH
39191: CALL_OW 113
// exit ;
39195: GO 39283
// end ; if task [ 1 ] [ 1 ] <> M then
39197: LD_VAR 0 7
39201: PUSH
39202: LD_INT 1
39204: ARRAY
39205: PUSH
39206: LD_INT 1
39208: ARRAY
39209: PUSH
39210: LD_STRING M
39212: NONEQUAL
39213: IFFALSE 39217
// exit ;
39215: GO 39283
// x := task [ 1 ] [ 2 ] ;
39217: LD_ADDR_VAR 0 5
39221: PUSH
39222: LD_VAR 0 7
39226: PUSH
39227: LD_INT 1
39229: ARRAY
39230: PUSH
39231: LD_INT 2
39233: ARRAY
39234: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
39235: LD_ADDR_VAR 0 6
39239: PUSH
39240: LD_VAR 0 7
39244: PUSH
39245: LD_INT 1
39247: ARRAY
39248: PUSH
39249: LD_INT 3
39251: ARRAY
39252: ST_TO_ADDR
// if InArea ( x , y , area ) then
39253: LD_VAR 0 5
39257: PPUSH
39258: LD_VAR 0 6
39262: PPUSH
39263: LD_VAR 0 2
39267: PPUSH
39268: CALL_OW 309
39272: IFFALSE 39283
// ComStop ( unit ) ;
39274: LD_VAR 0 1
39278: PPUSH
39279: CALL_OW 141
// end ;
39283: LD_VAR 0 4
39287: RET
// export function Abs ( value ) ; begin
39288: LD_INT 0
39290: PPUSH
// result := value ;
39291: LD_ADDR_VAR 0 2
39295: PUSH
39296: LD_VAR 0 1
39300: ST_TO_ADDR
// if value < 0 then
39301: LD_VAR 0 1
39305: PUSH
39306: LD_INT 0
39308: LESS
39309: IFFALSE 39326
// result := value * - 1 ;
39311: LD_ADDR_VAR 0 2
39315: PUSH
39316: LD_VAR 0 1
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: MUL
39325: ST_TO_ADDR
// end ;
39326: LD_VAR 0 2
39330: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
39331: LD_INT 0
39333: PPUSH
39334: PPUSH
39335: PPUSH
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
// if not unit or not building then
39341: LD_VAR 0 1
39345: NOT
39346: PUSH
39347: LD_VAR 0 2
39351: NOT
39352: OR
39353: IFFALSE 39357
// exit ;
39355: GO 39583
// x := GetX ( building ) ;
39357: LD_ADDR_VAR 0 4
39361: PUSH
39362: LD_VAR 0 2
39366: PPUSH
39367: CALL_OW 250
39371: ST_TO_ADDR
// y := GetY ( building ) ;
39372: LD_ADDR_VAR 0 6
39376: PUSH
39377: LD_VAR 0 2
39381: PPUSH
39382: CALL_OW 251
39386: ST_TO_ADDR
// d := GetDir ( building ) ;
39387: LD_ADDR_VAR 0 8
39391: PUSH
39392: LD_VAR 0 2
39396: PPUSH
39397: CALL_OW 254
39401: ST_TO_ADDR
// r := 4 ;
39402: LD_ADDR_VAR 0 9
39406: PUSH
39407: LD_INT 4
39409: ST_TO_ADDR
// for i := 1 to 5 do
39410: LD_ADDR_VAR 0 10
39414: PUSH
39415: DOUBLE
39416: LD_INT 1
39418: DEC
39419: ST_TO_ADDR
39420: LD_INT 5
39422: PUSH
39423: FOR_TO
39424: IFFALSE 39581
// begin _x := ShiftX ( x , d , r + i ) ;
39426: LD_ADDR_VAR 0 5
39430: PUSH
39431: LD_VAR 0 4
39435: PPUSH
39436: LD_VAR 0 8
39440: PPUSH
39441: LD_VAR 0 9
39445: PUSH
39446: LD_VAR 0 10
39450: PLUS
39451: PPUSH
39452: CALL_OW 272
39456: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
39457: LD_ADDR_VAR 0 7
39461: PUSH
39462: LD_VAR 0 6
39466: PPUSH
39467: LD_VAR 0 8
39471: PPUSH
39472: LD_VAR 0 9
39476: PUSH
39477: LD_VAR 0 10
39481: PLUS
39482: PPUSH
39483: CALL_OW 273
39487: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
39488: LD_VAR 0 5
39492: PPUSH
39493: LD_VAR 0 7
39497: PPUSH
39498: CALL_OW 488
39502: PUSH
39503: LD_VAR 0 5
39507: PPUSH
39508: LD_VAR 0 7
39512: PPUSH
39513: CALL_OW 428
39517: PPUSH
39518: CALL_OW 247
39522: PUSH
39523: LD_INT 3
39525: PUSH
39526: LD_INT 2
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: IN
39533: NOT
39534: AND
39535: IFFALSE 39579
// begin ComMoveXY ( unit , _x , _y ) ;
39537: LD_VAR 0 1
39541: PPUSH
39542: LD_VAR 0 5
39546: PPUSH
39547: LD_VAR 0 7
39551: PPUSH
39552: CALL_OW 111
// result := [ _x , _y ] ;
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: LD_VAR 0 5
39565: PUSH
39566: LD_VAR 0 7
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: ST_TO_ADDR
// exit ;
39575: POP
39576: POP
39577: GO 39583
// end ; end ;
39579: GO 39423
39581: POP
39582: POP
// end ;
39583: LD_VAR 0 3
39587: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
39588: LD_INT 0
39590: PPUSH
39591: PPUSH
39592: PPUSH
// result := 0 ;
39593: LD_ADDR_VAR 0 3
39597: PUSH
39598: LD_INT 0
39600: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
39601: LD_VAR 0 1
39605: PUSH
39606: LD_INT 0
39608: LESS
39609: PUSH
39610: LD_VAR 0 1
39614: PUSH
39615: LD_INT 8
39617: GREATER
39618: OR
39619: PUSH
39620: LD_VAR 0 2
39624: PUSH
39625: LD_INT 0
39627: LESS
39628: OR
39629: PUSH
39630: LD_VAR 0 2
39634: PUSH
39635: LD_INT 8
39637: GREATER
39638: OR
39639: IFFALSE 39643
// exit ;
39641: GO 39718
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
39643: LD_ADDR_VAR 0 4
39647: PUSH
39648: LD_INT 22
39650: PUSH
39651: LD_VAR 0 2
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PPUSH
39660: CALL_OW 69
39664: PUSH
39665: FOR_IN
39666: IFFALSE 39716
// begin un := UnitShoot ( i ) ;
39668: LD_ADDR_VAR 0 5
39672: PUSH
39673: LD_VAR 0 4
39677: PPUSH
39678: CALL_OW 504
39682: ST_TO_ADDR
// if GetSide ( un ) = side1 then
39683: LD_VAR 0 5
39687: PPUSH
39688: CALL_OW 255
39692: PUSH
39693: LD_VAR 0 1
39697: EQUAL
39698: IFFALSE 39714
// begin result := un ;
39700: LD_ADDR_VAR 0 3
39704: PUSH
39705: LD_VAR 0 5
39709: ST_TO_ADDR
// exit ;
39710: POP
39711: POP
39712: GO 39718
// end ; end ;
39714: GO 39665
39716: POP
39717: POP
// end ;
39718: LD_VAR 0 3
39722: RET
// export function GetCargoBay ( units ) ; begin
39723: LD_INT 0
39725: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
39726: LD_ADDR_VAR 0 2
39730: PUSH
39731: LD_VAR 0 1
39735: PPUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 34
39741: PUSH
39742: LD_INT 12
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 34
39751: PUSH
39752: LD_INT 51
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 34
39761: PUSH
39762: LD_INT 32
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 34
39771: PUSH
39772: LD_EXP 17
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: PPUSH
39788: CALL_OW 72
39792: ST_TO_ADDR
// end ;
39793: LD_VAR 0 2
39797: RET
// export function Negate ( value ) ; begin
39798: LD_INT 0
39800: PPUSH
// result := not value ;
39801: LD_ADDR_VAR 0 2
39805: PUSH
39806: LD_VAR 0 1
39810: NOT
39811: ST_TO_ADDR
// end ;
39812: LD_VAR 0 2
39816: RET
// export function Inc ( value ) ; begin
39817: LD_INT 0
39819: PPUSH
// result := value + 1 ;
39820: LD_ADDR_VAR 0 2
39824: PUSH
39825: LD_VAR 0 1
39829: PUSH
39830: LD_INT 1
39832: PLUS
39833: ST_TO_ADDR
// end ;
39834: LD_VAR 0 2
39838: RET
// export function Dec ( value ) ; begin
39839: LD_INT 0
39841: PPUSH
// result := value - 1 ;
39842: LD_ADDR_VAR 0 2
39846: PUSH
39847: LD_VAR 0 1
39851: PUSH
39852: LD_INT 1
39854: MINUS
39855: ST_TO_ADDR
// end ;
39856: LD_VAR 0 2
39860: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
39861: LD_INT 0
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
39871: LD_VAR 0 1
39875: PPUSH
39876: LD_VAR 0 2
39880: PPUSH
39881: CALL_OW 488
39885: NOT
39886: PUSH
39887: LD_VAR 0 3
39891: PPUSH
39892: LD_VAR 0 4
39896: PPUSH
39897: CALL_OW 488
39901: NOT
39902: OR
39903: IFFALSE 39916
// begin result := - 1 ;
39905: LD_ADDR_VAR 0 5
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: ST_TO_ADDR
// exit ;
39914: GO 40151
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
39916: LD_ADDR_VAR 0 12
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: LD_VAR 0 2
39930: PPUSH
39931: LD_VAR 0 3
39935: PPUSH
39936: LD_VAR 0 4
39940: PPUSH
39941: CALL 38999 0 4
39945: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
39946: LD_ADDR_VAR 0 11
39950: PUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: LD_VAR 0 2
39960: PPUSH
39961: LD_VAR 0 12
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PPUSH
39970: LD_VAR 0 12
39974: PUSH
39975: LD_INT 2
39977: ARRAY
39978: PPUSH
39979: CALL_OW 298
39983: ST_TO_ADDR
// distance := 9999 ;
39984: LD_ADDR_VAR 0 10
39988: PUSH
39989: LD_INT 9999
39991: ST_TO_ADDR
// for i := 0 to 5 do
39992: LD_ADDR_VAR 0 6
39996: PUSH
39997: DOUBLE
39998: LD_INT 0
40000: DEC
40001: ST_TO_ADDR
40002: LD_INT 5
40004: PUSH
40005: FOR_TO
40006: IFFALSE 40149
// begin _x := ShiftX ( x1 , i , centerDist ) ;
40008: LD_ADDR_VAR 0 7
40012: PUSH
40013: LD_VAR 0 1
40017: PPUSH
40018: LD_VAR 0 6
40022: PPUSH
40023: LD_VAR 0 11
40027: PPUSH
40028: CALL_OW 272
40032: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
40033: LD_ADDR_VAR 0 8
40037: PUSH
40038: LD_VAR 0 2
40042: PPUSH
40043: LD_VAR 0 6
40047: PPUSH
40048: LD_VAR 0 11
40052: PPUSH
40053: CALL_OW 273
40057: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40058: LD_VAR 0 7
40062: PPUSH
40063: LD_VAR 0 8
40067: PPUSH
40068: CALL_OW 488
40072: NOT
40073: IFFALSE 40077
// continue ;
40075: GO 40005
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
40077: LD_ADDR_VAR 0 9
40081: PUSH
40082: LD_VAR 0 12
40086: PUSH
40087: LD_INT 1
40089: ARRAY
40090: PPUSH
40091: LD_VAR 0 12
40095: PUSH
40096: LD_INT 2
40098: ARRAY
40099: PPUSH
40100: LD_VAR 0 7
40104: PPUSH
40105: LD_VAR 0 8
40109: PPUSH
40110: CALL_OW 298
40114: ST_TO_ADDR
// if tmp < distance then
40115: LD_VAR 0 9
40119: PUSH
40120: LD_VAR 0 10
40124: LESS
40125: IFFALSE 40147
// begin result := i ;
40127: LD_ADDR_VAR 0 5
40131: PUSH
40132: LD_VAR 0 6
40136: ST_TO_ADDR
// distance := tmp ;
40137: LD_ADDR_VAR 0 10
40141: PUSH
40142: LD_VAR 0 9
40146: ST_TO_ADDR
// end ; end ;
40147: GO 40005
40149: POP
40150: POP
// end ;
40151: LD_VAR 0 5
40155: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40156: LD_INT 0
40158: PPUSH
40159: PPUSH
// if not driver or not IsInUnit ( driver ) then
40160: LD_VAR 0 1
40164: NOT
40165: PUSH
40166: LD_VAR 0 1
40170: PPUSH
40171: CALL_OW 310
40175: NOT
40176: OR
40177: IFFALSE 40181
// exit ;
40179: GO 40271
// vehicle := IsInUnit ( driver ) ;
40181: LD_ADDR_VAR 0 3
40185: PUSH
40186: LD_VAR 0 1
40190: PPUSH
40191: CALL_OW 310
40195: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40196: LD_VAR 0 1
40200: PPUSH
40201: LD_STRING \
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 0
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: PUSH
40231: LD_STRING E
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_VAR 0 3
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PPUSH
40267: CALL_OW 446
// end ;
40271: LD_VAR 0 2
40275: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
40276: LD_INT 0
40278: PPUSH
40279: PPUSH
// if not driver or not IsInUnit ( driver ) then
40280: LD_VAR 0 1
40284: NOT
40285: PUSH
40286: LD_VAR 0 1
40290: PPUSH
40291: CALL_OW 310
40295: NOT
40296: OR
40297: IFFALSE 40301
// exit ;
40299: GO 40391
// vehicle := IsInUnit ( driver ) ;
40301: LD_ADDR_VAR 0 3
40305: PUSH
40306: LD_VAR 0 1
40310: PPUSH
40311: CALL_OW 310
40315: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
40316: LD_VAR 0 1
40320: PPUSH
40321: LD_STRING \
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: PUSH
40351: LD_STRING E
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 0
40359: PUSH
40360: LD_VAR 0 3
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PPUSH
40387: CALL_OW 447
// end ;
40391: LD_VAR 0 2
40395: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
40396: LD_INT 0
40398: PPUSH
40399: PPUSH
40400: PPUSH
// tmp := [ ] ;
40401: LD_ADDR_VAR 0 5
40405: PUSH
40406: EMPTY
40407: ST_TO_ADDR
// for i in units do
40408: LD_ADDR_VAR 0 4
40412: PUSH
40413: LD_VAR 0 1
40417: PUSH
40418: FOR_IN
40419: IFFALSE 40457
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
40421: LD_ADDR_VAR 0 5
40425: PUSH
40426: LD_VAR 0 5
40430: PPUSH
40431: LD_VAR 0 5
40435: PUSH
40436: LD_INT 1
40438: PLUS
40439: PPUSH
40440: LD_VAR 0 4
40444: PPUSH
40445: CALL_OW 256
40449: PPUSH
40450: CALL_OW 2
40454: ST_TO_ADDR
40455: GO 40418
40457: POP
40458: POP
// if not tmp then
40459: LD_VAR 0 5
40463: NOT
40464: IFFALSE 40468
// exit ;
40466: GO 40516
// if asc then
40468: LD_VAR 0 2
40472: IFFALSE 40496
// result := SortListByListAsc ( units , tmp ) else
40474: LD_ADDR_VAR 0 3
40478: PUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: LD_VAR 0 5
40488: PPUSH
40489: CALL_OW 76
40493: ST_TO_ADDR
40494: GO 40516
// result := SortListByListDesc ( units , tmp ) ;
40496: LD_ADDR_VAR 0 3
40500: PUSH
40501: LD_VAR 0 1
40505: PPUSH
40506: LD_VAR 0 5
40510: PPUSH
40511: CALL_OW 77
40515: ST_TO_ADDR
// end ;
40516: LD_VAR 0 3
40520: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
40521: LD_INT 0
40523: PPUSH
40524: PPUSH
// task := GetTaskList ( mech ) ;
40525: LD_ADDR_VAR 0 4
40529: PUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 437
40539: ST_TO_ADDR
// if not task then
40540: LD_VAR 0 4
40544: NOT
40545: IFFALSE 40549
// exit ;
40547: GO 40591
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
40549: LD_ADDR_VAR 0 3
40553: PUSH
40554: LD_VAR 0 4
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: PUSH
40563: LD_INT 1
40565: ARRAY
40566: PUSH
40567: LD_STRING r
40569: EQUAL
40570: PUSH
40571: LD_VAR 0 4
40575: PUSH
40576: LD_INT 1
40578: ARRAY
40579: PUSH
40580: LD_INT 4
40582: ARRAY
40583: PUSH
40584: LD_VAR 0 2
40588: EQUAL
40589: AND
40590: ST_TO_ADDR
// end ;
40591: LD_VAR 0 3
40595: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
40596: LD_INT 0
40598: PPUSH
// SetDir ( unit , d ) ;
40599: LD_VAR 0 1
40603: PPUSH
40604: LD_VAR 0 4
40608: PPUSH
40609: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
40613: LD_VAR 0 1
40617: PPUSH
40618: LD_VAR 0 2
40622: PPUSH
40623: LD_VAR 0 3
40627: PPUSH
40628: LD_VAR 0 5
40632: PPUSH
40633: CALL_OW 48
// end ;
40637: LD_VAR 0 6
40641: RET
// export function ToNaturalNumber ( number ) ; begin
40642: LD_INT 0
40644: PPUSH
// result := number div 1 ;
40645: LD_ADDR_VAR 0 2
40649: PUSH
40650: LD_VAR 0 1
40654: PUSH
40655: LD_INT 1
40657: DIV
40658: ST_TO_ADDR
// if number < 0 then
40659: LD_VAR 0 1
40663: PUSH
40664: LD_INT 0
40666: LESS
40667: IFFALSE 40677
// result := 0 ;
40669: LD_ADDR_VAR 0 2
40673: PUSH
40674: LD_INT 0
40676: ST_TO_ADDR
// end ;
40677: LD_VAR 0 2
40681: RET
// export function SortByClass ( units , class ) ; var un ; begin
40682: LD_INT 0
40684: PPUSH
40685: PPUSH
// if not units or not class then
40686: LD_VAR 0 1
40690: NOT
40691: PUSH
40692: LD_VAR 0 2
40696: NOT
40697: OR
40698: IFFALSE 40702
// exit ;
40700: GO 40797
// result := [ ] ;
40702: LD_ADDR_VAR 0 3
40706: PUSH
40707: EMPTY
40708: ST_TO_ADDR
// for un in units do
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: LD_VAR 0 1
40718: PUSH
40719: FOR_IN
40720: IFFALSE 40795
// if GetClass ( un ) = class then
40722: LD_VAR 0 4
40726: PPUSH
40727: CALL_OW 257
40731: PUSH
40732: LD_VAR 0 2
40736: EQUAL
40737: IFFALSE 40764
// result := Insert ( result , 1 , un ) else
40739: LD_ADDR_VAR 0 3
40743: PUSH
40744: LD_VAR 0 3
40748: PPUSH
40749: LD_INT 1
40751: PPUSH
40752: LD_VAR 0 4
40756: PPUSH
40757: CALL_OW 2
40761: ST_TO_ADDR
40762: GO 40793
// result := Replace ( result , result + 1 , un ) ;
40764: LD_ADDR_VAR 0 3
40768: PUSH
40769: LD_VAR 0 3
40773: PPUSH
40774: LD_VAR 0 3
40778: PUSH
40779: LD_INT 1
40781: PLUS
40782: PPUSH
40783: LD_VAR 0 4
40787: PPUSH
40788: CALL_OW 1
40792: ST_TO_ADDR
40793: GO 40719
40795: POP
40796: POP
// end ;
40797: LD_VAR 0 3
40801: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
40802: LD_INT 0
40804: PPUSH
40805: PPUSH
40806: PPUSH
40807: PPUSH
40808: PPUSH
40809: PPUSH
40810: PPUSH
// result := [ ] ;
40811: LD_ADDR_VAR 0 4
40815: PUSH
40816: EMPTY
40817: ST_TO_ADDR
// if x - r < 0 then
40818: LD_VAR 0 1
40822: PUSH
40823: LD_VAR 0 3
40827: MINUS
40828: PUSH
40829: LD_INT 0
40831: LESS
40832: IFFALSE 40844
// min_x := 0 else
40834: LD_ADDR_VAR 0 8
40838: PUSH
40839: LD_INT 0
40841: ST_TO_ADDR
40842: GO 40860
// min_x := x - r ;
40844: LD_ADDR_VAR 0 8
40848: PUSH
40849: LD_VAR 0 1
40853: PUSH
40854: LD_VAR 0 3
40858: MINUS
40859: ST_TO_ADDR
// if y - r < 0 then
40860: LD_VAR 0 2
40864: PUSH
40865: LD_VAR 0 3
40869: MINUS
40870: PUSH
40871: LD_INT 0
40873: LESS
40874: IFFALSE 40886
// min_y := 0 else
40876: LD_ADDR_VAR 0 7
40880: PUSH
40881: LD_INT 0
40883: ST_TO_ADDR
40884: GO 40902
// min_y := y - r ;
40886: LD_ADDR_VAR 0 7
40890: PUSH
40891: LD_VAR 0 2
40895: PUSH
40896: LD_VAR 0 3
40900: MINUS
40901: ST_TO_ADDR
// max_x := x + r ;
40902: LD_ADDR_VAR 0 9
40906: PUSH
40907: LD_VAR 0 1
40911: PUSH
40912: LD_VAR 0 3
40916: PLUS
40917: ST_TO_ADDR
// max_y := y + r ;
40918: LD_ADDR_VAR 0 10
40922: PUSH
40923: LD_VAR 0 2
40927: PUSH
40928: LD_VAR 0 3
40932: PLUS
40933: ST_TO_ADDR
// for _x = min_x to max_x do
40934: LD_ADDR_VAR 0 5
40938: PUSH
40939: DOUBLE
40940: LD_VAR 0 8
40944: DEC
40945: ST_TO_ADDR
40946: LD_VAR 0 9
40950: PUSH
40951: FOR_TO
40952: IFFALSE 41053
// for _y = min_y to max_y do
40954: LD_ADDR_VAR 0 6
40958: PUSH
40959: DOUBLE
40960: LD_VAR 0 7
40964: DEC
40965: ST_TO_ADDR
40966: LD_VAR 0 10
40970: PUSH
40971: FOR_TO
40972: IFFALSE 41049
// begin if not ValidHex ( _x , _y ) then
40974: LD_VAR 0 5
40978: PPUSH
40979: LD_VAR 0 6
40983: PPUSH
40984: CALL_OW 488
40988: NOT
40989: IFFALSE 40993
// continue ;
40991: GO 40971
// if GetResourceTypeXY ( _x , _y ) then
40993: LD_VAR 0 5
40997: PPUSH
40998: LD_VAR 0 6
41002: PPUSH
41003: CALL_OW 283
41007: IFFALSE 41047
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
41009: LD_ADDR_VAR 0 4
41013: PUSH
41014: LD_VAR 0 4
41018: PPUSH
41019: LD_VAR 0 4
41023: PUSH
41024: LD_INT 1
41026: PLUS
41027: PPUSH
41028: LD_VAR 0 5
41032: PUSH
41033: LD_VAR 0 6
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PPUSH
41042: CALL_OW 1
41046: ST_TO_ADDR
// end ;
41047: GO 40971
41049: POP
41050: POP
41051: GO 40951
41053: POP
41054: POP
// end ;
41055: LD_VAR 0 4
41059: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
41060: LD_INT 0
41062: PPUSH
41063: PPUSH
41064: PPUSH
41065: PPUSH
41066: PPUSH
41067: PPUSH
41068: PPUSH
41069: PPUSH
// if not units then
41070: LD_VAR 0 1
41074: NOT
41075: IFFALSE 41079
// exit ;
41077: GO 41605
// result := UnitFilter ( units , [ f_ok ] ) ;
41079: LD_ADDR_VAR 0 3
41083: PUSH
41084: LD_VAR 0 1
41088: PPUSH
41089: LD_INT 50
41091: PUSH
41092: EMPTY
41093: LIST
41094: PPUSH
41095: CALL_OW 72
41099: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
41100: LD_ADDR_VAR 0 8
41104: PUSH
41105: LD_VAR 0 1
41109: PUSH
41110: LD_INT 1
41112: ARRAY
41113: PPUSH
41114: CALL_OW 255
41118: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
41119: LD_ADDR_VAR 0 10
41123: PUSH
41124: LD_INT 29
41126: PUSH
41127: LD_EXP 20
41131: PUSH
41132: LD_INT 49
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: LIST
41139: ST_TO_ADDR
// if not result then
41140: LD_VAR 0 3
41144: NOT
41145: IFFALSE 41149
// exit ;
41147: GO 41605
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
41149: LD_ADDR_VAR 0 5
41153: PUSH
41154: LD_INT 81
41156: PUSH
41157: LD_VAR 0 8
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PPUSH
41166: CALL_OW 69
41170: ST_TO_ADDR
// for i in result do
41171: LD_ADDR_VAR 0 4
41175: PUSH
41176: LD_VAR 0 3
41180: PUSH
41181: FOR_IN
41182: IFFALSE 41603
// begin tag := GetTag ( i ) + 1 ;
41184: LD_ADDR_VAR 0 9
41188: PUSH
41189: LD_VAR 0 4
41193: PPUSH
41194: CALL_OW 110
41198: PUSH
41199: LD_INT 1
41201: PLUS
41202: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
41203: LD_ADDR_VAR 0 7
41207: PUSH
41208: LD_VAR 0 4
41212: PPUSH
41213: CALL_OW 250
41217: PPUSH
41218: LD_VAR 0 4
41222: PPUSH
41223: CALL_OW 251
41227: PPUSH
41228: LD_INT 6
41230: PPUSH
41231: CALL 40802 0 3
41235: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
41236: LD_VAR 0 4
41240: PPUSH
41241: CALL_OW 247
41245: PUSH
41246: LD_INT 2
41248: EQUAL
41249: PUSH
41250: LD_VAR 0 7
41254: AND
41255: PUSH
41256: LD_VAR 0 4
41260: PPUSH
41261: CALL_OW 264
41265: PUSH
41266: LD_VAR 0 10
41270: IN
41271: NOT
41272: AND
41273: IFFALSE 41312
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
41275: LD_VAR 0 4
41279: PPUSH
41280: LD_VAR 0 7
41284: PUSH
41285: LD_INT 1
41287: ARRAY
41288: PUSH
41289: LD_INT 1
41291: ARRAY
41292: PPUSH
41293: LD_VAR 0 7
41297: PUSH
41298: LD_INT 1
41300: ARRAY
41301: PUSH
41302: LD_INT 2
41304: ARRAY
41305: PPUSH
41306: CALL_OW 116
41310: GO 41601
// if path > tag then
41312: LD_VAR 0 2
41316: PUSH
41317: LD_VAR 0 9
41321: GREATER
41322: IFFALSE 41530
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
41324: LD_ADDR_VAR 0 6
41328: PUSH
41329: LD_VAR 0 5
41333: PPUSH
41334: LD_INT 91
41336: PUSH
41337: LD_VAR 0 4
41341: PUSH
41342: LD_INT 8
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: PPUSH
41350: CALL_OW 72
41354: ST_TO_ADDR
// if nearEnemy then
41355: LD_VAR 0 6
41359: IFFALSE 41428
// begin if GetWeapon ( i ) = ru_time_lapser then
41361: LD_VAR 0 4
41365: PPUSH
41366: CALL_OW 264
41370: PUSH
41371: LD_INT 49
41373: EQUAL
41374: IFFALSE 41402
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
41376: LD_VAR 0 4
41380: PPUSH
41381: LD_VAR 0 6
41385: PPUSH
41386: LD_VAR 0 4
41390: PPUSH
41391: CALL_OW 74
41395: PPUSH
41396: CALL_OW 112
41400: GO 41426
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
41402: LD_VAR 0 4
41406: PPUSH
41407: LD_VAR 0 6
41411: PPUSH
41412: LD_VAR 0 4
41416: PPUSH
41417: CALL_OW 74
41421: PPUSH
41422: CALL_OW 115
// end else
41426: GO 41528
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
41428: LD_VAR 0 4
41432: PPUSH
41433: LD_VAR 0 2
41437: PUSH
41438: LD_VAR 0 9
41442: ARRAY
41443: PUSH
41444: LD_INT 1
41446: ARRAY
41447: PPUSH
41448: LD_VAR 0 2
41452: PUSH
41453: LD_VAR 0 9
41457: ARRAY
41458: PUSH
41459: LD_INT 2
41461: ARRAY
41462: PPUSH
41463: CALL_OW 297
41467: PUSH
41468: LD_INT 6
41470: GREATER
41471: IFFALSE 41514
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
41473: LD_VAR 0 4
41477: PPUSH
41478: LD_VAR 0 2
41482: PUSH
41483: LD_VAR 0 9
41487: ARRAY
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 2
41497: PUSH
41498: LD_VAR 0 9
41502: ARRAY
41503: PUSH
41504: LD_INT 2
41506: ARRAY
41507: PPUSH
41508: CALL_OW 114
41512: GO 41528
// SetTag ( i , tag ) ;
41514: LD_VAR 0 4
41518: PPUSH
41519: LD_VAR 0 9
41523: PPUSH
41524: CALL_OW 109
// end else
41528: GO 41601
// if enemy then
41530: LD_VAR 0 5
41534: IFFALSE 41601
// begin if GetWeapon ( i ) = ru_time_lapser then
41536: LD_VAR 0 4
41540: PPUSH
41541: CALL_OW 264
41545: PUSH
41546: LD_INT 49
41548: EQUAL
41549: IFFALSE 41577
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
41551: LD_VAR 0 4
41555: PPUSH
41556: LD_VAR 0 5
41560: PPUSH
41561: LD_VAR 0 4
41565: PPUSH
41566: CALL_OW 74
41570: PPUSH
41571: CALL_OW 112
41575: GO 41601
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
41577: LD_VAR 0 4
41581: PPUSH
41582: LD_VAR 0 5
41586: PPUSH
41587: LD_VAR 0 4
41591: PPUSH
41592: CALL_OW 74
41596: PPUSH
41597: CALL_OW 115
// end ; end ;
41601: GO 41181
41603: POP
41604: POP
// end ;
41605: LD_VAR 0 3
41609: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
41610: LD_INT 0
41612: PPUSH
41613: PPUSH
41614: PPUSH
// if not unit or IsInUnit ( unit ) then
41615: LD_VAR 0 1
41619: NOT
41620: PUSH
41621: LD_VAR 0 1
41625: PPUSH
41626: CALL_OW 310
41630: OR
41631: IFFALSE 41635
// exit ;
41633: GO 41726
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
41635: LD_ADDR_VAR 0 4
41639: PUSH
41640: LD_VAR 0 1
41644: PPUSH
41645: CALL_OW 250
41649: PPUSH
41650: LD_VAR 0 2
41654: PPUSH
41655: LD_INT 1
41657: PPUSH
41658: CALL_OW 272
41662: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
41663: LD_ADDR_VAR 0 5
41667: PUSH
41668: LD_VAR 0 1
41672: PPUSH
41673: CALL_OW 251
41677: PPUSH
41678: LD_VAR 0 2
41682: PPUSH
41683: LD_INT 1
41685: PPUSH
41686: CALL_OW 273
41690: ST_TO_ADDR
// if ValidHex ( x , y ) then
41691: LD_VAR 0 4
41695: PPUSH
41696: LD_VAR 0 5
41700: PPUSH
41701: CALL_OW 488
41705: IFFALSE 41726
// ComTurnXY ( unit , x , y ) ;
41707: LD_VAR 0 1
41711: PPUSH
41712: LD_VAR 0 4
41716: PPUSH
41717: LD_VAR 0 5
41721: PPUSH
41722: CALL_OW 118
// end ;
41726: LD_VAR 0 3
41730: RET
// export function SeeUnits ( side , units ) ; var i ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
// result := false ;
41735: LD_ADDR_VAR 0 3
41739: PUSH
41740: LD_INT 0
41742: ST_TO_ADDR
// if not units then
41743: LD_VAR 0 2
41747: NOT
41748: IFFALSE 41752
// exit ;
41750: GO 41797
// for i in units do
41752: LD_ADDR_VAR 0 4
41756: PUSH
41757: LD_VAR 0 2
41761: PUSH
41762: FOR_IN
41763: IFFALSE 41795
// if See ( side , i ) then
41765: LD_VAR 0 1
41769: PPUSH
41770: LD_VAR 0 4
41774: PPUSH
41775: CALL_OW 292
41779: IFFALSE 41793
// begin result := true ;
41781: LD_ADDR_VAR 0 3
41785: PUSH
41786: LD_INT 1
41788: ST_TO_ADDR
// exit ;
41789: POP
41790: POP
41791: GO 41797
// end ;
41793: GO 41762
41795: POP
41796: POP
// end ;
41797: LD_VAR 0 3
41801: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
41802: LD_INT 0
41804: PPUSH
41805: PPUSH
41806: PPUSH
41807: PPUSH
// if not unit or not points then
41808: LD_VAR 0 1
41812: NOT
41813: PUSH
41814: LD_VAR 0 2
41818: NOT
41819: OR
41820: IFFALSE 41824
// exit ;
41822: GO 41914
// dist := 99999 ;
41824: LD_ADDR_VAR 0 5
41828: PUSH
41829: LD_INT 99999
41831: ST_TO_ADDR
// for i in points do
41832: LD_ADDR_VAR 0 4
41836: PUSH
41837: LD_VAR 0 2
41841: PUSH
41842: FOR_IN
41843: IFFALSE 41912
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41845: LD_ADDR_VAR 0 6
41849: PUSH
41850: LD_VAR 0 1
41854: PPUSH
41855: LD_VAR 0 4
41859: PUSH
41860: LD_INT 1
41862: ARRAY
41863: PPUSH
41864: LD_VAR 0 4
41868: PUSH
41869: LD_INT 2
41871: ARRAY
41872: PPUSH
41873: CALL_OW 297
41877: ST_TO_ADDR
// if tmpDist < dist then
41878: LD_VAR 0 6
41882: PUSH
41883: LD_VAR 0 5
41887: LESS
41888: IFFALSE 41910
// begin result := i ;
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: LD_VAR 0 4
41899: ST_TO_ADDR
// dist := tmpDist ;
41900: LD_ADDR_VAR 0 5
41904: PUSH
41905: LD_VAR 0 6
41909: ST_TO_ADDR
// end ; end ;
41910: GO 41842
41912: POP
41913: POP
// end ;
41914: LD_VAR 0 3
41918: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
41919: LD_INT 0
41921: PPUSH
// uc_side := side ;
41922: LD_ADDR_OWVAR 20
41926: PUSH
41927: LD_VAR 0 1
41931: ST_TO_ADDR
// uc_nation := 3 ;
41932: LD_ADDR_OWVAR 21
41936: PUSH
41937: LD_INT 3
41939: ST_TO_ADDR
// vc_chassis := 25 ;
41940: LD_ADDR_OWVAR 37
41944: PUSH
41945: LD_INT 25
41947: ST_TO_ADDR
// vc_engine := engine_siberite ;
41948: LD_ADDR_OWVAR 39
41952: PUSH
41953: LD_INT 3
41955: ST_TO_ADDR
// vc_control := control_computer ;
41956: LD_ADDR_OWVAR 38
41960: PUSH
41961: LD_INT 3
41963: ST_TO_ADDR
// vc_weapon := 59 ;
41964: LD_ADDR_OWVAR 40
41968: PUSH
41969: LD_INT 59
41971: ST_TO_ADDR
// result := CreateVehicle ;
41972: LD_ADDR_VAR 0 5
41976: PUSH
41977: CALL_OW 45
41981: ST_TO_ADDR
// SetDir ( result , d ) ;
41982: LD_VAR 0 5
41986: PPUSH
41987: LD_VAR 0 4
41991: PPUSH
41992: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
41996: LD_VAR 0 5
42000: PPUSH
42001: LD_VAR 0 2
42005: PPUSH
42006: LD_VAR 0 3
42010: PPUSH
42011: LD_INT 0
42013: PPUSH
42014: CALL_OW 48
// end ;
42018: LD_VAR 0 5
42022: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
42023: LD_INT 0
42025: PPUSH
42026: PPUSH
42027: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
42028: LD_ADDR_VAR 0 2
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
42051: LD_VAR 0 1
42055: NOT
42056: PUSH
42057: LD_VAR 0 1
42061: PPUSH
42062: CALL_OW 264
42066: PUSH
42067: LD_INT 12
42069: PUSH
42070: LD_INT 51
42072: PUSH
42073: LD_INT 32
42075: PUSH
42076: LD_EXP 17
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: IN
42087: NOT
42088: OR
42089: IFFALSE 42093
// exit ;
42091: GO 42191
// for i := 1 to 3 do
42093: LD_ADDR_VAR 0 3
42097: PUSH
42098: DOUBLE
42099: LD_INT 1
42101: DEC
42102: ST_TO_ADDR
42103: LD_INT 3
42105: PUSH
42106: FOR_TO
42107: IFFALSE 42189
// begin tmp := GetCargo ( cargo , i ) ;
42109: LD_ADDR_VAR 0 4
42113: PUSH
42114: LD_VAR 0 1
42118: PPUSH
42119: LD_VAR 0 3
42123: PPUSH
42124: CALL_OW 289
42128: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
42129: LD_ADDR_VAR 0 2
42133: PUSH
42134: LD_VAR 0 2
42138: PPUSH
42139: LD_VAR 0 3
42143: PPUSH
42144: LD_VAR 0 4
42148: PPUSH
42149: CALL_OW 1
42153: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
42154: LD_ADDR_VAR 0 2
42158: PUSH
42159: LD_VAR 0 2
42163: PPUSH
42164: LD_INT 4
42166: PPUSH
42167: LD_VAR 0 2
42171: PUSH
42172: LD_INT 4
42174: ARRAY
42175: PUSH
42176: LD_VAR 0 4
42180: PLUS
42181: PPUSH
42182: CALL_OW 1
42186: ST_TO_ADDR
// end ;
42187: GO 42106
42189: POP
42190: POP
// end ;
42191: LD_VAR 0 2
42195: RET
// export function Length ( array ) ; begin
42196: LD_INT 0
42198: PPUSH
// result := array + 0 ;
42199: LD_ADDR_VAR 0 2
42203: PUSH
42204: LD_VAR 0 1
42208: PUSH
42209: LD_INT 0
42211: PLUS
42212: ST_TO_ADDR
// end ;
42213: LD_VAR 0 2
42217: RET
// export function PrepareArray ( array ) ; begin
42218: LD_INT 0
42220: PPUSH
// result := array diff 0 ;
42221: LD_ADDR_VAR 0 2
42225: PUSH
42226: LD_VAR 0 1
42230: PUSH
42231: LD_INT 0
42233: DIFF
42234: ST_TO_ADDR
// if not result [ 1 ] then
42235: LD_VAR 0 2
42239: PUSH
42240: LD_INT 1
42242: ARRAY
42243: NOT
42244: IFFALSE 42264
// result := Delete ( result , 1 ) ;
42246: LD_ADDR_VAR 0 2
42250: PUSH
42251: LD_VAR 0 2
42255: PPUSH
42256: LD_INT 1
42258: PPUSH
42259: CALL_OW 3
42263: ST_TO_ADDR
// end ; end_of_file
42264: LD_VAR 0 2
42268: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
42269: LD_INT 0
42271: PPUSH
// ar_miner := 81 ;
42272: LD_ADDR_EXP 23
42276: PUSH
42277: LD_INT 81
42279: ST_TO_ADDR
// ar_crane := 88 ;
42280: LD_ADDR_EXP 22
42284: PUSH
42285: LD_INT 88
42287: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
42288: LD_ADDR_EXP 17
42292: PUSH
42293: LD_INT 89
42295: ST_TO_ADDR
// us_hack := 99 ;
42296: LD_ADDR_EXP 18
42300: PUSH
42301: LD_INT 99
42303: ST_TO_ADDR
// us_artillery := 97 ;
42304: LD_ADDR_EXP 19
42308: PUSH
42309: LD_INT 97
42311: ST_TO_ADDR
// ar_bio_bomb := 91 ;
42312: LD_ADDR_EXP 20
42316: PUSH
42317: LD_INT 91
42319: ST_TO_ADDR
// ar_mortar := 92 ;
42320: LD_ADDR_EXP 21
42324: PUSH
42325: LD_INT 92
42327: ST_TO_ADDR
// ru_flamethrower := 93 ;
42328: LD_ADDR_EXP 24
42332: PUSH
42333: LD_INT 93
42335: ST_TO_ADDR
// ru_radar := 98 ;
42336: LD_ADDR_EXP 16
42340: PUSH
42341: LD_INT 98
42343: ST_TO_ADDR
// tech_Artillery := 80 ;
42344: LD_ADDR_EXP 25
42348: PUSH
42349: LD_INT 80
42351: ST_TO_ADDR
// tech_RadMat := 81 ;
42352: LD_ADDR_EXP 26
42356: PUSH
42357: LD_INT 81
42359: ST_TO_ADDR
// tech_BasicTools := 82 ;
42360: LD_ADDR_EXP 27
42364: PUSH
42365: LD_INT 82
42367: ST_TO_ADDR
// tech_Cargo := 83 ;
42368: LD_ADDR_EXP 28
42372: PUSH
42373: LD_INT 83
42375: ST_TO_ADDR
// tech_Track := 84 ;
42376: LD_ADDR_EXP 29
42380: PUSH
42381: LD_INT 84
42383: ST_TO_ADDR
// tech_Crane := 85 ;
42384: LD_ADDR_EXP 30
42388: PUSH
42389: LD_INT 85
42391: ST_TO_ADDR
// tech_Bulldozer := 86 ;
42392: LD_ADDR_EXP 31
42396: PUSH
42397: LD_INT 86
42399: ST_TO_ADDR
// tech_Hovercraft := 87 ;
42400: LD_ADDR_EXP 32
42404: PUSH
42405: LD_INT 87
42407: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
42408: LD_ADDR_EXP 33
42412: PUSH
42413: LD_INT 88
42415: ST_TO_ADDR
// end ;
42416: LD_VAR 0 1
42420: RET
// every 1 do
42421: GO 42423
42423: DISABLE
// InitGlobalVariables ; end_of_file
42424: CALL 42269 0 0
42428: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
42429: LD_VAR 0 1
42433: PPUSH
42434: LD_VAR 0 2
42438: PPUSH
42439: LD_VAR 0 3
42443: PPUSH
42444: LD_VAR 0 4
42448: PPUSH
42449: LD_VAR 0 5
42453: PPUSH
42454: LD_VAR 0 6
42458: PPUSH
42459: CALL 42539 0 6
// end ;
42463: PPOPN 6
42465: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
42466: LD_INT 0
42468: PPUSH
// begin if not units then
42469: LD_VAR 0 1
42473: NOT
42474: IFFALSE 42478
// exit ;
42476: GO 42478
// end ;
42478: PPOPN 7
42480: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
42481: CALL 42510 0 0
// end ; end_of_file
42485: PPOPN 1
42487: END
// every 0 0$1 do
42488: GO 42490
42490: DISABLE
// begin enable ;
42491: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
42492: LD_STRING updateTimer(
42494: PUSH
42495: LD_OWVAR 1
42499: STR
42500: PUSH
42501: LD_STRING );
42503: STR
42504: PPUSH
42505: CALL_OW 559
// end ;
42509: END
// export function SOS_MapStart ( ) ; begin
42510: LD_INT 0
42512: PPUSH
// if streamModeActive then
42513: LD_EXP 34
42517: IFFALSE 42526
// DefineStreamItems ( true ) ;
42519: LD_INT 1
42521: PPUSH
42522: CALL 44180 0 1
// UpdateFactoryWaypoints ( ) ;
42526: CALL 57041 0 0
// UpdateWarehouseGatheringPoints ( ) ;
42530: CALL 57298 0 0
// end ;
42534: LD_VAR 0 1
42538: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42539: LD_INT 0
42541: PPUSH
// if p2 = 100 then
42542: LD_VAR 0 2
42546: PUSH
42547: LD_INT 100
42549: EQUAL
42550: IFFALSE 43553
// begin if not StreamModeActive then
42552: LD_EXP 34
42556: NOT
42557: IFFALSE 42567
// StreamModeActive := true ;
42559: LD_ADDR_EXP 34
42563: PUSH
42564: LD_INT 1
42566: ST_TO_ADDR
// if p3 = 0 then
42567: LD_VAR 0 3
42571: PUSH
42572: LD_INT 0
42574: EQUAL
42575: IFFALSE 42581
// InitStreamMode ;
42577: CALL 43716 0 0
// if p3 = 1 then
42581: LD_VAR 0 3
42585: PUSH
42586: LD_INT 1
42588: EQUAL
42589: IFFALSE 42599
// sRocket := true ;
42591: LD_ADDR_EXP 39
42595: PUSH
42596: LD_INT 1
42598: ST_TO_ADDR
// if p3 = 2 then
42599: LD_VAR 0 3
42603: PUSH
42604: LD_INT 2
42606: EQUAL
42607: IFFALSE 42617
// sSpeed := true ;
42609: LD_ADDR_EXP 38
42613: PUSH
42614: LD_INT 1
42616: ST_TO_ADDR
// if p3 = 3 then
42617: LD_VAR 0 3
42621: PUSH
42622: LD_INT 3
42624: EQUAL
42625: IFFALSE 42635
// sEngine := true ;
42627: LD_ADDR_EXP 40
42631: PUSH
42632: LD_INT 1
42634: ST_TO_ADDR
// if p3 = 4 then
42635: LD_VAR 0 3
42639: PUSH
42640: LD_INT 4
42642: EQUAL
42643: IFFALSE 42653
// sSpec := true ;
42645: LD_ADDR_EXP 37
42649: PUSH
42650: LD_INT 1
42652: ST_TO_ADDR
// if p3 = 5 then
42653: LD_VAR 0 3
42657: PUSH
42658: LD_INT 5
42660: EQUAL
42661: IFFALSE 42671
// sLevel := true ;
42663: LD_ADDR_EXP 41
42667: PUSH
42668: LD_INT 1
42670: ST_TO_ADDR
// if p3 = 6 then
42671: LD_VAR 0 3
42675: PUSH
42676: LD_INT 6
42678: EQUAL
42679: IFFALSE 42689
// sArmoury := true ;
42681: LD_ADDR_EXP 42
42685: PUSH
42686: LD_INT 1
42688: ST_TO_ADDR
// if p3 = 7 then
42689: LD_VAR 0 3
42693: PUSH
42694: LD_INT 7
42696: EQUAL
42697: IFFALSE 42707
// sRadar := true ;
42699: LD_ADDR_EXP 43
42703: PUSH
42704: LD_INT 1
42706: ST_TO_ADDR
// if p3 = 8 then
42707: LD_VAR 0 3
42711: PUSH
42712: LD_INT 8
42714: EQUAL
42715: IFFALSE 42725
// sBunker := true ;
42717: LD_ADDR_EXP 44
42721: PUSH
42722: LD_INT 1
42724: ST_TO_ADDR
// if p3 = 9 then
42725: LD_VAR 0 3
42729: PUSH
42730: LD_INT 9
42732: EQUAL
42733: IFFALSE 42743
// sHack := true ;
42735: LD_ADDR_EXP 45
42739: PUSH
42740: LD_INT 1
42742: ST_TO_ADDR
// if p3 = 10 then
42743: LD_VAR 0 3
42747: PUSH
42748: LD_INT 10
42750: EQUAL
42751: IFFALSE 42761
// sFire := true ;
42753: LD_ADDR_EXP 46
42757: PUSH
42758: LD_INT 1
42760: ST_TO_ADDR
// if p3 = 11 then
42761: LD_VAR 0 3
42765: PUSH
42766: LD_INT 11
42768: EQUAL
42769: IFFALSE 42779
// sRefresh := true ;
42771: LD_ADDR_EXP 47
42775: PUSH
42776: LD_INT 1
42778: ST_TO_ADDR
// if p3 = 12 then
42779: LD_VAR 0 3
42783: PUSH
42784: LD_INT 12
42786: EQUAL
42787: IFFALSE 42797
// sExp := true ;
42789: LD_ADDR_EXP 48
42793: PUSH
42794: LD_INT 1
42796: ST_TO_ADDR
// if p3 = 13 then
42797: LD_VAR 0 3
42801: PUSH
42802: LD_INT 13
42804: EQUAL
42805: IFFALSE 42815
// sDepot := true ;
42807: LD_ADDR_EXP 49
42811: PUSH
42812: LD_INT 1
42814: ST_TO_ADDR
// if p3 = 14 then
42815: LD_VAR 0 3
42819: PUSH
42820: LD_INT 14
42822: EQUAL
42823: IFFALSE 42833
// sFlag := true ;
42825: LD_ADDR_EXP 50
42829: PUSH
42830: LD_INT 1
42832: ST_TO_ADDR
// if p3 = 15 then
42833: LD_VAR 0 3
42837: PUSH
42838: LD_INT 15
42840: EQUAL
42841: IFFALSE 42851
// sKamikadze := true ;
42843: LD_ADDR_EXP 58
42847: PUSH
42848: LD_INT 1
42850: ST_TO_ADDR
// if p3 = 16 then
42851: LD_VAR 0 3
42855: PUSH
42856: LD_INT 16
42858: EQUAL
42859: IFFALSE 42869
// sTroll := true ;
42861: LD_ADDR_EXP 59
42865: PUSH
42866: LD_INT 1
42868: ST_TO_ADDR
// if p3 = 17 then
42869: LD_VAR 0 3
42873: PUSH
42874: LD_INT 17
42876: EQUAL
42877: IFFALSE 42887
// sSlow := true ;
42879: LD_ADDR_EXP 60
42883: PUSH
42884: LD_INT 1
42886: ST_TO_ADDR
// if p3 = 18 then
42887: LD_VAR 0 3
42891: PUSH
42892: LD_INT 18
42894: EQUAL
42895: IFFALSE 42905
// sLack := true ;
42897: LD_ADDR_EXP 61
42901: PUSH
42902: LD_INT 1
42904: ST_TO_ADDR
// if p3 = 19 then
42905: LD_VAR 0 3
42909: PUSH
42910: LD_INT 19
42912: EQUAL
42913: IFFALSE 42923
// sTank := true ;
42915: LD_ADDR_EXP 63
42919: PUSH
42920: LD_INT 1
42922: ST_TO_ADDR
// if p3 = 20 then
42923: LD_VAR 0 3
42927: PUSH
42928: LD_INT 20
42930: EQUAL
42931: IFFALSE 42941
// sRemote := true ;
42933: LD_ADDR_EXP 64
42937: PUSH
42938: LD_INT 1
42940: ST_TO_ADDR
// if p3 = 21 then
42941: LD_VAR 0 3
42945: PUSH
42946: LD_INT 21
42948: EQUAL
42949: IFFALSE 42959
// sPowell := true ;
42951: LD_ADDR_EXP 65
42955: PUSH
42956: LD_INT 1
42958: ST_TO_ADDR
// if p3 = 22 then
42959: LD_VAR 0 3
42963: PUSH
42964: LD_INT 22
42966: EQUAL
42967: IFFALSE 42977
// sTeleport := true ;
42969: LD_ADDR_EXP 68
42973: PUSH
42974: LD_INT 1
42976: ST_TO_ADDR
// if p3 = 23 then
42977: LD_VAR 0 3
42981: PUSH
42982: LD_INT 23
42984: EQUAL
42985: IFFALSE 42995
// sOilTower := true ;
42987: LD_ADDR_EXP 70
42991: PUSH
42992: LD_INT 1
42994: ST_TO_ADDR
// if p3 = 24 then
42995: LD_VAR 0 3
42999: PUSH
43000: LD_INT 24
43002: EQUAL
43003: IFFALSE 43013
// sShovel := true ;
43005: LD_ADDR_EXP 71
43009: PUSH
43010: LD_INT 1
43012: ST_TO_ADDR
// if p3 = 25 then
43013: LD_VAR 0 3
43017: PUSH
43018: LD_INT 25
43020: EQUAL
43021: IFFALSE 43031
// sSheik := true ;
43023: LD_ADDR_EXP 72
43027: PUSH
43028: LD_INT 1
43030: ST_TO_ADDR
// if p3 = 26 then
43031: LD_VAR 0 3
43035: PUSH
43036: LD_INT 26
43038: EQUAL
43039: IFFALSE 43049
// sEarthquake := true ;
43041: LD_ADDR_EXP 74
43045: PUSH
43046: LD_INT 1
43048: ST_TO_ADDR
// if p3 = 27 then
43049: LD_VAR 0 3
43053: PUSH
43054: LD_INT 27
43056: EQUAL
43057: IFFALSE 43067
// sAI := true ;
43059: LD_ADDR_EXP 75
43063: PUSH
43064: LD_INT 1
43066: ST_TO_ADDR
// if p3 = 28 then
43067: LD_VAR 0 3
43071: PUSH
43072: LD_INT 28
43074: EQUAL
43075: IFFALSE 43085
// sCargo := true ;
43077: LD_ADDR_EXP 78
43081: PUSH
43082: LD_INT 1
43084: ST_TO_ADDR
// if p3 = 29 then
43085: LD_VAR 0 3
43089: PUSH
43090: LD_INT 29
43092: EQUAL
43093: IFFALSE 43103
// sDLaser := true ;
43095: LD_ADDR_EXP 79
43099: PUSH
43100: LD_INT 1
43102: ST_TO_ADDR
// if p3 = 30 then
43103: LD_VAR 0 3
43107: PUSH
43108: LD_INT 30
43110: EQUAL
43111: IFFALSE 43121
// sExchange := true ;
43113: LD_ADDR_EXP 80
43117: PUSH
43118: LD_INT 1
43120: ST_TO_ADDR
// if p3 = 31 then
43121: LD_VAR 0 3
43125: PUSH
43126: LD_INT 31
43128: EQUAL
43129: IFFALSE 43139
// sFac := true ;
43131: LD_ADDR_EXP 81
43135: PUSH
43136: LD_INT 1
43138: ST_TO_ADDR
// if p3 = 32 then
43139: LD_VAR 0 3
43143: PUSH
43144: LD_INT 32
43146: EQUAL
43147: IFFALSE 43157
// sPower := true ;
43149: LD_ADDR_EXP 82
43153: PUSH
43154: LD_INT 1
43156: ST_TO_ADDR
// if p3 = 33 then
43157: LD_VAR 0 3
43161: PUSH
43162: LD_INT 33
43164: EQUAL
43165: IFFALSE 43175
// sRandom := true ;
43167: LD_ADDR_EXP 83
43171: PUSH
43172: LD_INT 1
43174: ST_TO_ADDR
// if p3 = 34 then
43175: LD_VAR 0 3
43179: PUSH
43180: LD_INT 34
43182: EQUAL
43183: IFFALSE 43193
// sShield := true ;
43185: LD_ADDR_EXP 84
43189: PUSH
43190: LD_INT 1
43192: ST_TO_ADDR
// if p3 = 35 then
43193: LD_VAR 0 3
43197: PUSH
43198: LD_INT 35
43200: EQUAL
43201: IFFALSE 43211
// sTime := true ;
43203: LD_ADDR_EXP 85
43207: PUSH
43208: LD_INT 1
43210: ST_TO_ADDR
// if p3 = 36 then
43211: LD_VAR 0 3
43215: PUSH
43216: LD_INT 36
43218: EQUAL
43219: IFFALSE 43229
// sTools := true ;
43221: LD_ADDR_EXP 86
43225: PUSH
43226: LD_INT 1
43228: ST_TO_ADDR
// if p3 = 101 then
43229: LD_VAR 0 3
43233: PUSH
43234: LD_INT 101
43236: EQUAL
43237: IFFALSE 43247
// sSold := true ;
43239: LD_ADDR_EXP 51
43243: PUSH
43244: LD_INT 1
43246: ST_TO_ADDR
// if p3 = 102 then
43247: LD_VAR 0 3
43251: PUSH
43252: LD_INT 102
43254: EQUAL
43255: IFFALSE 43265
// sDiff := true ;
43257: LD_ADDR_EXP 52
43261: PUSH
43262: LD_INT 1
43264: ST_TO_ADDR
// if p3 = 103 then
43265: LD_VAR 0 3
43269: PUSH
43270: LD_INT 103
43272: EQUAL
43273: IFFALSE 43283
// sFog := true ;
43275: LD_ADDR_EXP 55
43279: PUSH
43280: LD_INT 1
43282: ST_TO_ADDR
// if p3 = 104 then
43283: LD_VAR 0 3
43287: PUSH
43288: LD_INT 104
43290: EQUAL
43291: IFFALSE 43301
// sReset := true ;
43293: LD_ADDR_EXP 56
43297: PUSH
43298: LD_INT 1
43300: ST_TO_ADDR
// if p3 = 105 then
43301: LD_VAR 0 3
43305: PUSH
43306: LD_INT 105
43308: EQUAL
43309: IFFALSE 43319
// sSun := true ;
43311: LD_ADDR_EXP 57
43315: PUSH
43316: LD_INT 1
43318: ST_TO_ADDR
// if p3 = 106 then
43319: LD_VAR 0 3
43323: PUSH
43324: LD_INT 106
43326: EQUAL
43327: IFFALSE 43337
// sTiger := true ;
43329: LD_ADDR_EXP 53
43333: PUSH
43334: LD_INT 1
43336: ST_TO_ADDR
// if p3 = 107 then
43337: LD_VAR 0 3
43341: PUSH
43342: LD_INT 107
43344: EQUAL
43345: IFFALSE 43355
// sBomb := true ;
43347: LD_ADDR_EXP 54
43351: PUSH
43352: LD_INT 1
43354: ST_TO_ADDR
// if p3 = 108 then
43355: LD_VAR 0 3
43359: PUSH
43360: LD_INT 108
43362: EQUAL
43363: IFFALSE 43373
// sWound := true ;
43365: LD_ADDR_EXP 62
43369: PUSH
43370: LD_INT 1
43372: ST_TO_ADDR
// if p3 = 109 then
43373: LD_VAR 0 3
43377: PUSH
43378: LD_INT 109
43380: EQUAL
43381: IFFALSE 43391
// sBetray := true ;
43383: LD_ADDR_EXP 66
43387: PUSH
43388: LD_INT 1
43390: ST_TO_ADDR
// if p3 = 110 then
43391: LD_VAR 0 3
43395: PUSH
43396: LD_INT 110
43398: EQUAL
43399: IFFALSE 43409
// sContamin := true ;
43401: LD_ADDR_EXP 67
43405: PUSH
43406: LD_INT 1
43408: ST_TO_ADDR
// if p3 = 111 then
43409: LD_VAR 0 3
43413: PUSH
43414: LD_INT 111
43416: EQUAL
43417: IFFALSE 43427
// sOil := true ;
43419: LD_ADDR_EXP 69
43423: PUSH
43424: LD_INT 1
43426: ST_TO_ADDR
// if p3 = 112 then
43427: LD_VAR 0 3
43431: PUSH
43432: LD_INT 112
43434: EQUAL
43435: IFFALSE 43445
// sStu := true ;
43437: LD_ADDR_EXP 73
43441: PUSH
43442: LD_INT 1
43444: ST_TO_ADDR
// if p3 = 113 then
43445: LD_VAR 0 3
43449: PUSH
43450: LD_INT 113
43452: EQUAL
43453: IFFALSE 43463
// sBazooka := true ;
43455: LD_ADDR_EXP 76
43459: PUSH
43460: LD_INT 1
43462: ST_TO_ADDR
// if p3 = 114 then
43463: LD_VAR 0 3
43467: PUSH
43468: LD_INT 114
43470: EQUAL
43471: IFFALSE 43481
// sMortar := true ;
43473: LD_ADDR_EXP 77
43477: PUSH
43478: LD_INT 1
43480: ST_TO_ADDR
// if p3 = 115 then
43481: LD_VAR 0 3
43485: PUSH
43486: LD_INT 115
43488: EQUAL
43489: IFFALSE 43499
// sRanger := true ;
43491: LD_ADDR_EXP 87
43495: PUSH
43496: LD_INT 1
43498: ST_TO_ADDR
// if p3 = 116 then
43499: LD_VAR 0 3
43503: PUSH
43504: LD_INT 116
43506: EQUAL
43507: IFFALSE 43517
// sComputer := true ;
43509: LD_ADDR_EXP 88
43513: PUSH
43514: LD_INT 1
43516: ST_TO_ADDR
// if p3 = 117 then
43517: LD_VAR 0 3
43521: PUSH
43522: LD_INT 117
43524: EQUAL
43525: IFFALSE 43535
// s30 := true ;
43527: LD_ADDR_EXP 89
43531: PUSH
43532: LD_INT 1
43534: ST_TO_ADDR
// if p3 = 118 then
43535: LD_VAR 0 3
43539: PUSH
43540: LD_INT 118
43542: EQUAL
43543: IFFALSE 43553
// s60 := true ;
43545: LD_ADDR_EXP 90
43549: PUSH
43550: LD_INT 1
43552: ST_TO_ADDR
// end ; if p2 = 101 then
43553: LD_VAR 0 2
43557: PUSH
43558: LD_INT 101
43560: EQUAL
43561: IFFALSE 43689
// begin case p3 of 1 :
43563: LD_VAR 0 3
43567: PUSH
43568: LD_INT 1
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 43583
43576: POP
// hHackUnlimitedResources ; 2 :
43577: CALL 55787 0 0
43581: GO 43689
43583: LD_INT 2
43585: DOUBLE
43586: EQUAL
43587: IFTRUE 43591
43589: GO 43598
43591: POP
// hHackSetLevel10 ; 3 :
43592: CALL 55920 0 0
43596: GO 43689
43598: LD_INT 3
43600: DOUBLE
43601: EQUAL
43602: IFTRUE 43606
43604: GO 43613
43606: POP
// hHackSetLevel10YourUnits ; 4 :
43607: CALL 56005 0 0
43611: GO 43689
43613: LD_INT 4
43615: DOUBLE
43616: EQUAL
43617: IFTRUE 43621
43619: GO 43628
43621: POP
// hHackInvincible ; 5 :
43622: CALL 56453 0 0
43626: GO 43689
43628: LD_INT 5
43630: DOUBLE
43631: EQUAL
43632: IFTRUE 43636
43634: GO 43643
43636: POP
// hHackInvisible ; 6 :
43637: CALL 56564 0 0
43641: GO 43689
43643: LD_INT 6
43645: DOUBLE
43646: EQUAL
43647: IFTRUE 43651
43649: GO 43658
43651: POP
// hHackChangeYourSide ; 7 :
43652: CALL 56621 0 0
43656: GO 43689
43658: LD_INT 7
43660: DOUBLE
43661: EQUAL
43662: IFTRUE 43666
43664: GO 43673
43666: POP
// hHackChangeUnitSide ; 8 :
43667: CALL 56663 0 0
43671: GO 43689
43673: LD_INT 8
43675: DOUBLE
43676: EQUAL
43677: IFTRUE 43681
43679: GO 43688
43681: POP
// hHackFog ; end ;
43682: CALL 56764 0 0
43686: GO 43689
43688: POP
// end ; end ;
43689: LD_VAR 0 7
43693: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
43694: GO 43696
43696: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
43697: LD_STRING initStreamRollete();
43699: PPUSH
43700: CALL_OW 559
// InitStreamMode ;
43704: CALL 43716 0 0
// DefineStreamItems ( false ) ;
43708: LD_INT 0
43710: PPUSH
43711: CALL 44180 0 1
// end ;
43715: END
// function InitStreamMode ; begin
43716: LD_INT 0
43718: PPUSH
// streamModeActive := false ;
43719: LD_ADDR_EXP 34
43723: PUSH
43724: LD_INT 0
43726: ST_TO_ADDR
// normalCounter := 36 ;
43727: LD_ADDR_EXP 35
43731: PUSH
43732: LD_INT 36
43734: ST_TO_ADDR
// hardcoreCounter := 18 ;
43735: LD_ADDR_EXP 36
43739: PUSH
43740: LD_INT 18
43742: ST_TO_ADDR
// sRocket := false ;
43743: LD_ADDR_EXP 39
43747: PUSH
43748: LD_INT 0
43750: ST_TO_ADDR
// sSpeed := false ;
43751: LD_ADDR_EXP 38
43755: PUSH
43756: LD_INT 0
43758: ST_TO_ADDR
// sEngine := false ;
43759: LD_ADDR_EXP 40
43763: PUSH
43764: LD_INT 0
43766: ST_TO_ADDR
// sSpec := false ;
43767: LD_ADDR_EXP 37
43771: PUSH
43772: LD_INT 0
43774: ST_TO_ADDR
// sLevel := false ;
43775: LD_ADDR_EXP 41
43779: PUSH
43780: LD_INT 0
43782: ST_TO_ADDR
// sArmoury := false ;
43783: LD_ADDR_EXP 42
43787: PUSH
43788: LD_INT 0
43790: ST_TO_ADDR
// sRadar := false ;
43791: LD_ADDR_EXP 43
43795: PUSH
43796: LD_INT 0
43798: ST_TO_ADDR
// sBunker := false ;
43799: LD_ADDR_EXP 44
43803: PUSH
43804: LD_INT 0
43806: ST_TO_ADDR
// sHack := false ;
43807: LD_ADDR_EXP 45
43811: PUSH
43812: LD_INT 0
43814: ST_TO_ADDR
// sFire := false ;
43815: LD_ADDR_EXP 46
43819: PUSH
43820: LD_INT 0
43822: ST_TO_ADDR
// sRefresh := false ;
43823: LD_ADDR_EXP 47
43827: PUSH
43828: LD_INT 0
43830: ST_TO_ADDR
// sExp := false ;
43831: LD_ADDR_EXP 48
43835: PUSH
43836: LD_INT 0
43838: ST_TO_ADDR
// sDepot := false ;
43839: LD_ADDR_EXP 49
43843: PUSH
43844: LD_INT 0
43846: ST_TO_ADDR
// sFlag := false ;
43847: LD_ADDR_EXP 50
43851: PUSH
43852: LD_INT 0
43854: ST_TO_ADDR
// sKamikadze := false ;
43855: LD_ADDR_EXP 58
43859: PUSH
43860: LD_INT 0
43862: ST_TO_ADDR
// sTroll := false ;
43863: LD_ADDR_EXP 59
43867: PUSH
43868: LD_INT 0
43870: ST_TO_ADDR
// sSlow := false ;
43871: LD_ADDR_EXP 60
43875: PUSH
43876: LD_INT 0
43878: ST_TO_ADDR
// sLack := false ;
43879: LD_ADDR_EXP 61
43883: PUSH
43884: LD_INT 0
43886: ST_TO_ADDR
// sTank := false ;
43887: LD_ADDR_EXP 63
43891: PUSH
43892: LD_INT 0
43894: ST_TO_ADDR
// sRemote := false ;
43895: LD_ADDR_EXP 64
43899: PUSH
43900: LD_INT 0
43902: ST_TO_ADDR
// sPowell := false ;
43903: LD_ADDR_EXP 65
43907: PUSH
43908: LD_INT 0
43910: ST_TO_ADDR
// sTeleport := false ;
43911: LD_ADDR_EXP 68
43915: PUSH
43916: LD_INT 0
43918: ST_TO_ADDR
// sOilTower := false ;
43919: LD_ADDR_EXP 70
43923: PUSH
43924: LD_INT 0
43926: ST_TO_ADDR
// sShovel := false ;
43927: LD_ADDR_EXP 71
43931: PUSH
43932: LD_INT 0
43934: ST_TO_ADDR
// sSheik := false ;
43935: LD_ADDR_EXP 72
43939: PUSH
43940: LD_INT 0
43942: ST_TO_ADDR
// sEarthquake := false ;
43943: LD_ADDR_EXP 74
43947: PUSH
43948: LD_INT 0
43950: ST_TO_ADDR
// sAI := false ;
43951: LD_ADDR_EXP 75
43955: PUSH
43956: LD_INT 0
43958: ST_TO_ADDR
// sCargo := false ;
43959: LD_ADDR_EXP 78
43963: PUSH
43964: LD_INT 0
43966: ST_TO_ADDR
// sDLaser := false ;
43967: LD_ADDR_EXP 79
43971: PUSH
43972: LD_INT 0
43974: ST_TO_ADDR
// sExchange := false ;
43975: LD_ADDR_EXP 80
43979: PUSH
43980: LD_INT 0
43982: ST_TO_ADDR
// sFac := false ;
43983: LD_ADDR_EXP 81
43987: PUSH
43988: LD_INT 0
43990: ST_TO_ADDR
// sPower := false ;
43991: LD_ADDR_EXP 82
43995: PUSH
43996: LD_INT 0
43998: ST_TO_ADDR
// sRandom := false ;
43999: LD_ADDR_EXP 83
44003: PUSH
44004: LD_INT 0
44006: ST_TO_ADDR
// sShield := false ;
44007: LD_ADDR_EXP 84
44011: PUSH
44012: LD_INT 0
44014: ST_TO_ADDR
// sTime := false ;
44015: LD_ADDR_EXP 85
44019: PUSH
44020: LD_INT 0
44022: ST_TO_ADDR
// sTools := false ;
44023: LD_ADDR_EXP 86
44027: PUSH
44028: LD_INT 0
44030: ST_TO_ADDR
// sSold := false ;
44031: LD_ADDR_EXP 51
44035: PUSH
44036: LD_INT 0
44038: ST_TO_ADDR
// sDiff := false ;
44039: LD_ADDR_EXP 52
44043: PUSH
44044: LD_INT 0
44046: ST_TO_ADDR
// sFog := false ;
44047: LD_ADDR_EXP 55
44051: PUSH
44052: LD_INT 0
44054: ST_TO_ADDR
// sReset := false ;
44055: LD_ADDR_EXP 56
44059: PUSH
44060: LD_INT 0
44062: ST_TO_ADDR
// sSun := false ;
44063: LD_ADDR_EXP 57
44067: PUSH
44068: LD_INT 0
44070: ST_TO_ADDR
// sTiger := false ;
44071: LD_ADDR_EXP 53
44075: PUSH
44076: LD_INT 0
44078: ST_TO_ADDR
// sBomb := false ;
44079: LD_ADDR_EXP 54
44083: PUSH
44084: LD_INT 0
44086: ST_TO_ADDR
// sWound := false ;
44087: LD_ADDR_EXP 62
44091: PUSH
44092: LD_INT 0
44094: ST_TO_ADDR
// sBetray := false ;
44095: LD_ADDR_EXP 66
44099: PUSH
44100: LD_INT 0
44102: ST_TO_ADDR
// sContamin := false ;
44103: LD_ADDR_EXP 67
44107: PUSH
44108: LD_INT 0
44110: ST_TO_ADDR
// sOil := false ;
44111: LD_ADDR_EXP 69
44115: PUSH
44116: LD_INT 0
44118: ST_TO_ADDR
// sStu := false ;
44119: LD_ADDR_EXP 73
44123: PUSH
44124: LD_INT 0
44126: ST_TO_ADDR
// sBazooka := false ;
44127: LD_ADDR_EXP 76
44131: PUSH
44132: LD_INT 0
44134: ST_TO_ADDR
// sMortar := false ;
44135: LD_ADDR_EXP 77
44139: PUSH
44140: LD_INT 0
44142: ST_TO_ADDR
// sRanger := false ;
44143: LD_ADDR_EXP 87
44147: PUSH
44148: LD_INT 0
44150: ST_TO_ADDR
// sComputer := false ;
44151: LD_ADDR_EXP 88
44155: PUSH
44156: LD_INT 0
44158: ST_TO_ADDR
// s30 := false ;
44159: LD_ADDR_EXP 89
44163: PUSH
44164: LD_INT 0
44166: ST_TO_ADDR
// s60 := false ;
44167: LD_ADDR_EXP 90
44171: PUSH
44172: LD_INT 0
44174: ST_TO_ADDR
// end ;
44175: LD_VAR 0 1
44179: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
44180: LD_INT 0
44182: PPUSH
44183: PPUSH
44184: PPUSH
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
// result := [ ] ;
44189: LD_ADDR_VAR 0 2
44193: PUSH
44194: EMPTY
44195: ST_TO_ADDR
// if campaign_id = 1 then
44196: LD_OWVAR 69
44200: PUSH
44201: LD_INT 1
44203: EQUAL
44204: IFFALSE 47370
// begin case mission_number of 1 :
44206: LD_OWVAR 70
44210: PUSH
44211: LD_INT 1
44213: DOUBLE
44214: EQUAL
44215: IFTRUE 44219
44217: GO 44295
44219: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
44220: LD_ADDR_VAR 0 2
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 4
44230: PUSH
44231: LD_INT 11
44233: PUSH
44234: LD_INT 12
44236: PUSH
44237: LD_INT 15
44239: PUSH
44240: LD_INT 16
44242: PUSH
44243: LD_INT 22
44245: PUSH
44246: LD_INT 23
44248: PUSH
44249: LD_INT 26
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 101
44265: PUSH
44266: LD_INT 102
44268: PUSH
44269: LD_INT 106
44271: PUSH
44272: LD_INT 116
44274: PUSH
44275: LD_INT 117
44277: PUSH
44278: LD_INT 118
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: ST_TO_ADDR
44293: GO 47368
44295: LD_INT 2
44297: DOUBLE
44298: EQUAL
44299: IFTRUE 44303
44301: GO 44387
44303: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
44304: LD_ADDR_VAR 0 2
44308: PUSH
44309: LD_INT 2
44311: PUSH
44312: LD_INT 4
44314: PUSH
44315: LD_INT 11
44317: PUSH
44318: LD_INT 12
44320: PUSH
44321: LD_INT 15
44323: PUSH
44324: LD_INT 16
44326: PUSH
44327: LD_INT 22
44329: PUSH
44330: LD_INT 23
44332: PUSH
44333: LD_INT 26
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 101
44349: PUSH
44350: LD_INT 102
44352: PUSH
44353: LD_INT 105
44355: PUSH
44356: LD_INT 106
44358: PUSH
44359: LD_INT 108
44361: PUSH
44362: LD_INT 116
44364: PUSH
44365: LD_INT 117
44367: PUSH
44368: LD_INT 118
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: ST_TO_ADDR
44385: GO 47368
44387: LD_INT 3
44389: DOUBLE
44390: EQUAL
44391: IFTRUE 44395
44393: GO 44483
44395: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
44396: LD_ADDR_VAR 0 2
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 4
44406: PUSH
44407: LD_INT 5
44409: PUSH
44410: LD_INT 11
44412: PUSH
44413: LD_INT 12
44415: PUSH
44416: LD_INT 15
44418: PUSH
44419: LD_INT 16
44421: PUSH
44422: LD_INT 22
44424: PUSH
44425: LD_INT 26
44427: PUSH
44428: LD_INT 36
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 101
44445: PUSH
44446: LD_INT 102
44448: PUSH
44449: LD_INT 105
44451: PUSH
44452: LD_INT 106
44454: PUSH
44455: LD_INT 108
44457: PUSH
44458: LD_INT 116
44460: PUSH
44461: LD_INT 117
44463: PUSH
44464: LD_INT 118
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: ST_TO_ADDR
44481: GO 47368
44483: LD_INT 4
44485: DOUBLE
44486: EQUAL
44487: IFTRUE 44491
44489: GO 44587
44491: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
44492: LD_ADDR_VAR 0 2
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 4
44502: PUSH
44503: LD_INT 5
44505: PUSH
44506: LD_INT 8
44508: PUSH
44509: LD_INT 11
44511: PUSH
44512: LD_INT 12
44514: PUSH
44515: LD_INT 15
44517: PUSH
44518: LD_INT 16
44520: PUSH
44521: LD_INT 22
44523: PUSH
44524: LD_INT 23
44526: PUSH
44527: LD_INT 26
44529: PUSH
44530: LD_INT 36
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 101
44549: PUSH
44550: LD_INT 102
44552: PUSH
44553: LD_INT 105
44555: PUSH
44556: LD_INT 106
44558: PUSH
44559: LD_INT 108
44561: PUSH
44562: LD_INT 116
44564: PUSH
44565: LD_INT 117
44567: PUSH
44568: LD_INT 118
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: ST_TO_ADDR
44585: GO 47368
44587: LD_INT 5
44589: DOUBLE
44590: EQUAL
44591: IFTRUE 44595
44593: GO 44707
44595: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
44596: LD_ADDR_VAR 0 2
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: LD_INT 4
44606: PUSH
44607: LD_INT 5
44609: PUSH
44610: LD_INT 6
44612: PUSH
44613: LD_INT 8
44615: PUSH
44616: LD_INT 11
44618: PUSH
44619: LD_INT 12
44621: PUSH
44622: LD_INT 15
44624: PUSH
44625: LD_INT 16
44627: PUSH
44628: LD_INT 22
44630: PUSH
44631: LD_INT 23
44633: PUSH
44634: LD_INT 25
44636: PUSH
44637: LD_INT 26
44639: PUSH
44640: LD_INT 36
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 101
44661: PUSH
44662: LD_INT 102
44664: PUSH
44665: LD_INT 105
44667: PUSH
44668: LD_INT 106
44670: PUSH
44671: LD_INT 108
44673: PUSH
44674: LD_INT 109
44676: PUSH
44677: LD_INT 112
44679: PUSH
44680: LD_INT 116
44682: PUSH
44683: LD_INT 117
44685: PUSH
44686: LD_INT 118
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: ST_TO_ADDR
44705: GO 47368
44707: LD_INT 6
44709: DOUBLE
44710: EQUAL
44711: IFTRUE 44715
44713: GO 44847
44715: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
44716: LD_ADDR_VAR 0 2
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: LD_INT 4
44726: PUSH
44727: LD_INT 5
44729: PUSH
44730: LD_INT 6
44732: PUSH
44733: LD_INT 8
44735: PUSH
44736: LD_INT 11
44738: PUSH
44739: LD_INT 12
44741: PUSH
44742: LD_INT 15
44744: PUSH
44745: LD_INT 16
44747: PUSH
44748: LD_INT 20
44750: PUSH
44751: LD_INT 21
44753: PUSH
44754: LD_INT 22
44756: PUSH
44757: LD_INT 23
44759: PUSH
44760: LD_INT 25
44762: PUSH
44763: LD_INT 26
44765: PUSH
44766: LD_INT 30
44768: PUSH
44769: LD_INT 31
44771: PUSH
44772: LD_INT 32
44774: PUSH
44775: LD_INT 36
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 101
44801: PUSH
44802: LD_INT 102
44804: PUSH
44805: LD_INT 105
44807: PUSH
44808: LD_INT 106
44810: PUSH
44811: LD_INT 108
44813: PUSH
44814: LD_INT 109
44816: PUSH
44817: LD_INT 112
44819: PUSH
44820: LD_INT 116
44822: PUSH
44823: LD_INT 117
44825: PUSH
44826: LD_INT 118
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: ST_TO_ADDR
44845: GO 47368
44847: LD_INT 7
44849: DOUBLE
44850: EQUAL
44851: IFTRUE 44855
44853: GO 44967
44855: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
44856: LD_ADDR_VAR 0 2
44860: PUSH
44861: LD_INT 2
44863: PUSH
44864: LD_INT 4
44866: PUSH
44867: LD_INT 5
44869: PUSH
44870: LD_INT 7
44872: PUSH
44873: LD_INT 11
44875: PUSH
44876: LD_INT 12
44878: PUSH
44879: LD_INT 15
44881: PUSH
44882: LD_INT 16
44884: PUSH
44885: LD_INT 20
44887: PUSH
44888: LD_INT 21
44890: PUSH
44891: LD_INT 22
44893: PUSH
44894: LD_INT 23
44896: PUSH
44897: LD_INT 25
44899: PUSH
44900: LD_INT 26
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 101
44921: PUSH
44922: LD_INT 102
44924: PUSH
44925: LD_INT 103
44927: PUSH
44928: LD_INT 105
44930: PUSH
44931: LD_INT 106
44933: PUSH
44934: LD_INT 108
44936: PUSH
44937: LD_INT 112
44939: PUSH
44940: LD_INT 116
44942: PUSH
44943: LD_INT 117
44945: PUSH
44946: LD_INT 118
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: ST_TO_ADDR
44965: GO 47368
44967: LD_INT 8
44969: DOUBLE
44970: EQUAL
44971: IFTRUE 44975
44973: GO 45115
44975: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
44976: LD_ADDR_VAR 0 2
44980: PUSH
44981: LD_INT 2
44983: PUSH
44984: LD_INT 4
44986: PUSH
44987: LD_INT 5
44989: PUSH
44990: LD_INT 6
44992: PUSH
44993: LD_INT 7
44995: PUSH
44996: LD_INT 8
44998: PUSH
44999: LD_INT 11
45001: PUSH
45002: LD_INT 12
45004: PUSH
45005: LD_INT 15
45007: PUSH
45008: LD_INT 16
45010: PUSH
45011: LD_INT 20
45013: PUSH
45014: LD_INT 21
45016: PUSH
45017: LD_INT 22
45019: PUSH
45020: LD_INT 23
45022: PUSH
45023: LD_INT 25
45025: PUSH
45026: LD_INT 26
45028: PUSH
45029: LD_INT 30
45031: PUSH
45032: LD_INT 31
45034: PUSH
45035: LD_INT 32
45037: PUSH
45038: LD_INT 36
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: PUSH
45063: LD_INT 101
45065: PUSH
45066: LD_INT 102
45068: PUSH
45069: LD_INT 103
45071: PUSH
45072: LD_INT 105
45074: PUSH
45075: LD_INT 106
45077: PUSH
45078: LD_INT 108
45080: PUSH
45081: LD_INT 109
45083: PUSH
45084: LD_INT 112
45086: PUSH
45087: LD_INT 116
45089: PUSH
45090: LD_INT 117
45092: PUSH
45093: LD_INT 118
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: ST_TO_ADDR
45113: GO 47368
45115: LD_INT 9
45117: DOUBLE
45118: EQUAL
45119: IFTRUE 45123
45121: GO 45271
45123: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
45124: LD_ADDR_VAR 0 2
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 4
45134: PUSH
45135: LD_INT 5
45137: PUSH
45138: LD_INT 6
45140: PUSH
45141: LD_INT 7
45143: PUSH
45144: LD_INT 8
45146: PUSH
45147: LD_INT 11
45149: PUSH
45150: LD_INT 12
45152: PUSH
45153: LD_INT 15
45155: PUSH
45156: LD_INT 16
45158: PUSH
45159: LD_INT 20
45161: PUSH
45162: LD_INT 21
45164: PUSH
45165: LD_INT 22
45167: PUSH
45168: LD_INT 23
45170: PUSH
45171: LD_INT 25
45173: PUSH
45174: LD_INT 26
45176: PUSH
45177: LD_INT 28
45179: PUSH
45180: LD_INT 30
45182: PUSH
45183: LD_INT 31
45185: PUSH
45186: LD_INT 32
45188: PUSH
45189: LD_INT 36
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 101
45217: PUSH
45218: LD_INT 102
45220: PUSH
45221: LD_INT 103
45223: PUSH
45224: LD_INT 105
45226: PUSH
45227: LD_INT 106
45229: PUSH
45230: LD_INT 108
45232: PUSH
45233: LD_INT 109
45235: PUSH
45236: LD_INT 112
45238: PUSH
45239: LD_INT 114
45241: PUSH
45242: LD_INT 116
45244: PUSH
45245: LD_INT 117
45247: PUSH
45248: LD_INT 118
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: ST_TO_ADDR
45269: GO 47368
45271: LD_INT 10
45273: DOUBLE
45274: EQUAL
45275: IFTRUE 45279
45277: GO 45475
45279: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
45280: LD_ADDR_VAR 0 2
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 4
45290: PUSH
45291: LD_INT 5
45293: PUSH
45294: LD_INT 6
45296: PUSH
45297: LD_INT 7
45299: PUSH
45300: LD_INT 8
45302: PUSH
45303: LD_INT 9
45305: PUSH
45306: LD_INT 10
45308: PUSH
45309: LD_INT 11
45311: PUSH
45312: LD_INT 12
45314: PUSH
45315: LD_INT 13
45317: PUSH
45318: LD_INT 14
45320: PUSH
45321: LD_INT 15
45323: PUSH
45324: LD_INT 16
45326: PUSH
45327: LD_INT 17
45329: PUSH
45330: LD_INT 18
45332: PUSH
45333: LD_INT 19
45335: PUSH
45336: LD_INT 20
45338: PUSH
45339: LD_INT 21
45341: PUSH
45342: LD_INT 22
45344: PUSH
45345: LD_INT 23
45347: PUSH
45348: LD_INT 24
45350: PUSH
45351: LD_INT 25
45353: PUSH
45354: LD_INT 26
45356: PUSH
45357: LD_INT 28
45359: PUSH
45360: LD_INT 30
45362: PUSH
45363: LD_INT 31
45365: PUSH
45366: LD_INT 32
45368: PUSH
45369: LD_INT 36
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 101
45405: PUSH
45406: LD_INT 102
45408: PUSH
45409: LD_INT 103
45411: PUSH
45412: LD_INT 104
45414: PUSH
45415: LD_INT 105
45417: PUSH
45418: LD_INT 106
45420: PUSH
45421: LD_INT 107
45423: PUSH
45424: LD_INT 108
45426: PUSH
45427: LD_INT 109
45429: PUSH
45430: LD_INT 110
45432: PUSH
45433: LD_INT 111
45435: PUSH
45436: LD_INT 112
45438: PUSH
45439: LD_INT 114
45441: PUSH
45442: LD_INT 116
45444: PUSH
45445: LD_INT 117
45447: PUSH
45448: LD_INT 118
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: ST_TO_ADDR
45473: GO 47368
45475: LD_INT 11
45477: DOUBLE
45478: EQUAL
45479: IFTRUE 45483
45481: GO 45687
45483: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
45484: LD_ADDR_VAR 0 2
45488: PUSH
45489: LD_INT 2
45491: PUSH
45492: LD_INT 3
45494: PUSH
45495: LD_INT 4
45497: PUSH
45498: LD_INT 5
45500: PUSH
45501: LD_INT 6
45503: PUSH
45504: LD_INT 7
45506: PUSH
45507: LD_INT 8
45509: PUSH
45510: LD_INT 9
45512: PUSH
45513: LD_INT 10
45515: PUSH
45516: LD_INT 11
45518: PUSH
45519: LD_INT 12
45521: PUSH
45522: LD_INT 13
45524: PUSH
45525: LD_INT 14
45527: PUSH
45528: LD_INT 15
45530: PUSH
45531: LD_INT 16
45533: PUSH
45534: LD_INT 17
45536: PUSH
45537: LD_INT 18
45539: PUSH
45540: LD_INT 19
45542: PUSH
45543: LD_INT 20
45545: PUSH
45546: LD_INT 21
45548: PUSH
45549: LD_INT 22
45551: PUSH
45552: LD_INT 23
45554: PUSH
45555: LD_INT 24
45557: PUSH
45558: LD_INT 25
45560: PUSH
45561: LD_INT 26
45563: PUSH
45564: LD_INT 28
45566: PUSH
45567: LD_INT 30
45569: PUSH
45570: LD_INT 31
45572: PUSH
45573: LD_INT 32
45575: PUSH
45576: LD_INT 34
45578: PUSH
45579: LD_INT 36
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 101
45617: PUSH
45618: LD_INT 102
45620: PUSH
45621: LD_INT 103
45623: PUSH
45624: LD_INT 104
45626: PUSH
45627: LD_INT 105
45629: PUSH
45630: LD_INT 106
45632: PUSH
45633: LD_INT 107
45635: PUSH
45636: LD_INT 108
45638: PUSH
45639: LD_INT 109
45641: PUSH
45642: LD_INT 110
45644: PUSH
45645: LD_INT 111
45647: PUSH
45648: LD_INT 112
45650: PUSH
45651: LD_INT 114
45653: PUSH
45654: LD_INT 116
45656: PUSH
45657: LD_INT 117
45659: PUSH
45660: LD_INT 118
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: ST_TO_ADDR
45685: GO 47368
45687: LD_INT 12
45689: DOUBLE
45690: EQUAL
45691: IFTRUE 45695
45693: GO 45915
45695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
45696: LD_ADDR_VAR 0 2
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 2
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 4
45712: PUSH
45713: LD_INT 5
45715: PUSH
45716: LD_INT 6
45718: PUSH
45719: LD_INT 7
45721: PUSH
45722: LD_INT 8
45724: PUSH
45725: LD_INT 9
45727: PUSH
45728: LD_INT 10
45730: PUSH
45731: LD_INT 11
45733: PUSH
45734: LD_INT 12
45736: PUSH
45737: LD_INT 13
45739: PUSH
45740: LD_INT 14
45742: PUSH
45743: LD_INT 15
45745: PUSH
45746: LD_INT 16
45748: PUSH
45749: LD_INT 17
45751: PUSH
45752: LD_INT 18
45754: PUSH
45755: LD_INT 19
45757: PUSH
45758: LD_INT 20
45760: PUSH
45761: LD_INT 21
45763: PUSH
45764: LD_INT 22
45766: PUSH
45767: LD_INT 23
45769: PUSH
45770: LD_INT 24
45772: PUSH
45773: LD_INT 25
45775: PUSH
45776: LD_INT 26
45778: PUSH
45779: LD_INT 27
45781: PUSH
45782: LD_INT 28
45784: PUSH
45785: LD_INT 30
45787: PUSH
45788: LD_INT 31
45790: PUSH
45791: LD_INT 32
45793: PUSH
45794: LD_INT 33
45796: PUSH
45797: LD_INT 34
45799: PUSH
45800: LD_INT 36
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 101
45841: PUSH
45842: LD_INT 102
45844: PUSH
45845: LD_INT 103
45847: PUSH
45848: LD_INT 104
45850: PUSH
45851: LD_INT 105
45853: PUSH
45854: LD_INT 106
45856: PUSH
45857: LD_INT 107
45859: PUSH
45860: LD_INT 108
45862: PUSH
45863: LD_INT 109
45865: PUSH
45866: LD_INT 110
45868: PUSH
45869: LD_INT 111
45871: PUSH
45872: LD_INT 112
45874: PUSH
45875: LD_INT 113
45877: PUSH
45878: LD_INT 114
45880: PUSH
45881: LD_INT 116
45883: PUSH
45884: LD_INT 117
45886: PUSH
45887: LD_INT 118
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: ST_TO_ADDR
45913: GO 47368
45915: LD_INT 13
45917: DOUBLE
45918: EQUAL
45919: IFTRUE 45923
45921: GO 46131
45923: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
45924: LD_ADDR_VAR 0 2
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: LD_INT 4
45940: PUSH
45941: LD_INT 5
45943: PUSH
45944: LD_INT 8
45946: PUSH
45947: LD_INT 9
45949: PUSH
45950: LD_INT 10
45952: PUSH
45953: LD_INT 11
45955: PUSH
45956: LD_INT 12
45958: PUSH
45959: LD_INT 14
45961: PUSH
45962: LD_INT 15
45964: PUSH
45965: LD_INT 16
45967: PUSH
45968: LD_INT 17
45970: PUSH
45971: LD_INT 18
45973: PUSH
45974: LD_INT 19
45976: PUSH
45977: LD_INT 20
45979: PUSH
45980: LD_INT 21
45982: PUSH
45983: LD_INT 22
45985: PUSH
45986: LD_INT 23
45988: PUSH
45989: LD_INT 24
45991: PUSH
45992: LD_INT 25
45994: PUSH
45995: LD_INT 26
45997: PUSH
45998: LD_INT 27
46000: PUSH
46001: LD_INT 28
46003: PUSH
46004: LD_INT 30
46006: PUSH
46007: LD_INT 31
46009: PUSH
46010: LD_INT 32
46012: PUSH
46013: LD_INT 33
46015: PUSH
46016: LD_INT 34
46018: PUSH
46019: LD_INT 36
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 101
46057: PUSH
46058: LD_INT 102
46060: PUSH
46061: LD_INT 103
46063: PUSH
46064: LD_INT 104
46066: PUSH
46067: LD_INT 105
46069: PUSH
46070: LD_INT 106
46072: PUSH
46073: LD_INT 107
46075: PUSH
46076: LD_INT 108
46078: PUSH
46079: LD_INT 109
46081: PUSH
46082: LD_INT 110
46084: PUSH
46085: LD_INT 111
46087: PUSH
46088: LD_INT 112
46090: PUSH
46091: LD_INT 113
46093: PUSH
46094: LD_INT 114
46096: PUSH
46097: LD_INT 116
46099: PUSH
46100: LD_INT 117
46102: PUSH
46103: LD_INT 118
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: ST_TO_ADDR
46129: GO 47368
46131: LD_INT 14
46133: DOUBLE
46134: EQUAL
46135: IFTRUE 46139
46137: GO 46363
46139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
46140: LD_ADDR_VAR 0 2
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: LD_INT 4
46156: PUSH
46157: LD_INT 5
46159: PUSH
46160: LD_INT 6
46162: PUSH
46163: LD_INT 7
46165: PUSH
46166: LD_INT 8
46168: PUSH
46169: LD_INT 9
46171: PUSH
46172: LD_INT 10
46174: PUSH
46175: LD_INT 11
46177: PUSH
46178: LD_INT 12
46180: PUSH
46181: LD_INT 13
46183: PUSH
46184: LD_INT 14
46186: PUSH
46187: LD_INT 15
46189: PUSH
46190: LD_INT 16
46192: PUSH
46193: LD_INT 17
46195: PUSH
46196: LD_INT 18
46198: PUSH
46199: LD_INT 19
46201: PUSH
46202: LD_INT 20
46204: PUSH
46205: LD_INT 21
46207: PUSH
46208: LD_INT 22
46210: PUSH
46211: LD_INT 23
46213: PUSH
46214: LD_INT 24
46216: PUSH
46217: LD_INT 25
46219: PUSH
46220: LD_INT 26
46222: PUSH
46223: LD_INT 27
46225: PUSH
46226: LD_INT 28
46228: PUSH
46229: LD_INT 29
46231: PUSH
46232: LD_INT 30
46234: PUSH
46235: LD_INT 31
46237: PUSH
46238: LD_INT 32
46240: PUSH
46241: LD_INT 33
46243: PUSH
46244: LD_INT 34
46246: PUSH
46247: LD_INT 36
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 101
46289: PUSH
46290: LD_INT 102
46292: PUSH
46293: LD_INT 103
46295: PUSH
46296: LD_INT 104
46298: PUSH
46299: LD_INT 105
46301: PUSH
46302: LD_INT 106
46304: PUSH
46305: LD_INT 107
46307: PUSH
46308: LD_INT 108
46310: PUSH
46311: LD_INT 109
46313: PUSH
46314: LD_INT 110
46316: PUSH
46317: LD_INT 111
46319: PUSH
46320: LD_INT 112
46322: PUSH
46323: LD_INT 113
46325: PUSH
46326: LD_INT 114
46328: PUSH
46329: LD_INT 116
46331: PUSH
46332: LD_INT 117
46334: PUSH
46335: LD_INT 118
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: ST_TO_ADDR
46361: GO 47368
46363: LD_INT 15
46365: DOUBLE
46366: EQUAL
46367: IFTRUE 46371
46369: GO 46595
46371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
46372: LD_ADDR_VAR 0 2
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: LD_INT 3
46385: PUSH
46386: LD_INT 4
46388: PUSH
46389: LD_INT 5
46391: PUSH
46392: LD_INT 6
46394: PUSH
46395: LD_INT 7
46397: PUSH
46398: LD_INT 8
46400: PUSH
46401: LD_INT 9
46403: PUSH
46404: LD_INT 10
46406: PUSH
46407: LD_INT 11
46409: PUSH
46410: LD_INT 12
46412: PUSH
46413: LD_INT 13
46415: PUSH
46416: LD_INT 14
46418: PUSH
46419: LD_INT 15
46421: PUSH
46422: LD_INT 16
46424: PUSH
46425: LD_INT 17
46427: PUSH
46428: LD_INT 18
46430: PUSH
46431: LD_INT 19
46433: PUSH
46434: LD_INT 20
46436: PUSH
46437: LD_INT 21
46439: PUSH
46440: LD_INT 22
46442: PUSH
46443: LD_INT 23
46445: PUSH
46446: LD_INT 24
46448: PUSH
46449: LD_INT 25
46451: PUSH
46452: LD_INT 26
46454: PUSH
46455: LD_INT 27
46457: PUSH
46458: LD_INT 28
46460: PUSH
46461: LD_INT 29
46463: PUSH
46464: LD_INT 30
46466: PUSH
46467: LD_INT 31
46469: PUSH
46470: LD_INT 32
46472: PUSH
46473: LD_INT 33
46475: PUSH
46476: LD_INT 34
46478: PUSH
46479: LD_INT 36
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 101
46521: PUSH
46522: LD_INT 102
46524: PUSH
46525: LD_INT 103
46527: PUSH
46528: LD_INT 104
46530: PUSH
46531: LD_INT 105
46533: PUSH
46534: LD_INT 106
46536: PUSH
46537: LD_INT 107
46539: PUSH
46540: LD_INT 108
46542: PUSH
46543: LD_INT 109
46545: PUSH
46546: LD_INT 110
46548: PUSH
46549: LD_INT 111
46551: PUSH
46552: LD_INT 112
46554: PUSH
46555: LD_INT 113
46557: PUSH
46558: LD_INT 114
46560: PUSH
46561: LD_INT 116
46563: PUSH
46564: LD_INT 117
46566: PUSH
46567: LD_INT 118
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: ST_TO_ADDR
46593: GO 47368
46595: LD_INT 16
46597: DOUBLE
46598: EQUAL
46599: IFTRUE 46603
46601: GO 46739
46603: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
46604: LD_ADDR_VAR 0 2
46608: PUSH
46609: LD_INT 2
46611: PUSH
46612: LD_INT 4
46614: PUSH
46615: LD_INT 5
46617: PUSH
46618: LD_INT 7
46620: PUSH
46621: LD_INT 11
46623: PUSH
46624: LD_INT 12
46626: PUSH
46627: LD_INT 15
46629: PUSH
46630: LD_INT 16
46632: PUSH
46633: LD_INT 20
46635: PUSH
46636: LD_INT 21
46638: PUSH
46639: LD_INT 22
46641: PUSH
46642: LD_INT 23
46644: PUSH
46645: LD_INT 25
46647: PUSH
46648: LD_INT 26
46650: PUSH
46651: LD_INT 30
46653: PUSH
46654: LD_INT 31
46656: PUSH
46657: LD_INT 32
46659: PUSH
46660: LD_INT 33
46662: PUSH
46663: LD_INT 34
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 101
46689: PUSH
46690: LD_INT 102
46692: PUSH
46693: LD_INT 103
46695: PUSH
46696: LD_INT 106
46698: PUSH
46699: LD_INT 108
46701: PUSH
46702: LD_INT 112
46704: PUSH
46705: LD_INT 113
46707: PUSH
46708: LD_INT 114
46710: PUSH
46711: LD_INT 116
46713: PUSH
46714: LD_INT 117
46716: PUSH
46717: LD_INT 118
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: ST_TO_ADDR
46737: GO 47368
46739: LD_INT 17
46741: DOUBLE
46742: EQUAL
46743: IFTRUE 46747
46745: GO 46971
46747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
46748: LD_ADDR_VAR 0 2
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: LD_INT 4
46764: PUSH
46765: LD_INT 5
46767: PUSH
46768: LD_INT 6
46770: PUSH
46771: LD_INT 7
46773: PUSH
46774: LD_INT 8
46776: PUSH
46777: LD_INT 9
46779: PUSH
46780: LD_INT 10
46782: PUSH
46783: LD_INT 11
46785: PUSH
46786: LD_INT 12
46788: PUSH
46789: LD_INT 13
46791: PUSH
46792: LD_INT 14
46794: PUSH
46795: LD_INT 15
46797: PUSH
46798: LD_INT 16
46800: PUSH
46801: LD_INT 17
46803: PUSH
46804: LD_INT 18
46806: PUSH
46807: LD_INT 19
46809: PUSH
46810: LD_INT 20
46812: PUSH
46813: LD_INT 21
46815: PUSH
46816: LD_INT 22
46818: PUSH
46819: LD_INT 23
46821: PUSH
46822: LD_INT 24
46824: PUSH
46825: LD_INT 25
46827: PUSH
46828: LD_INT 26
46830: PUSH
46831: LD_INT 27
46833: PUSH
46834: LD_INT 28
46836: PUSH
46837: LD_INT 29
46839: PUSH
46840: LD_INT 30
46842: PUSH
46843: LD_INT 31
46845: PUSH
46846: LD_INT 32
46848: PUSH
46849: LD_INT 33
46851: PUSH
46852: LD_INT 34
46854: PUSH
46855: LD_INT 36
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 101
46897: PUSH
46898: LD_INT 102
46900: PUSH
46901: LD_INT 103
46903: PUSH
46904: LD_INT 104
46906: PUSH
46907: LD_INT 105
46909: PUSH
46910: LD_INT 106
46912: PUSH
46913: LD_INT 107
46915: PUSH
46916: LD_INT 108
46918: PUSH
46919: LD_INT 109
46921: PUSH
46922: LD_INT 110
46924: PUSH
46925: LD_INT 111
46927: PUSH
46928: LD_INT 112
46930: PUSH
46931: LD_INT 113
46933: PUSH
46934: LD_INT 114
46936: PUSH
46937: LD_INT 116
46939: PUSH
46940: LD_INT 117
46942: PUSH
46943: LD_INT 118
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: ST_TO_ADDR
46969: GO 47368
46971: LD_INT 18
46973: DOUBLE
46974: EQUAL
46975: IFTRUE 46979
46977: GO 47127
46979: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
46980: LD_ADDR_VAR 0 2
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: LD_INT 4
46990: PUSH
46991: LD_INT 5
46993: PUSH
46994: LD_INT 7
46996: PUSH
46997: LD_INT 11
46999: PUSH
47000: LD_INT 12
47002: PUSH
47003: LD_INT 15
47005: PUSH
47006: LD_INT 16
47008: PUSH
47009: LD_INT 20
47011: PUSH
47012: LD_INT 21
47014: PUSH
47015: LD_INT 22
47017: PUSH
47018: LD_INT 23
47020: PUSH
47021: LD_INT 25
47023: PUSH
47024: LD_INT 26
47026: PUSH
47027: LD_INT 30
47029: PUSH
47030: LD_INT 31
47032: PUSH
47033: LD_INT 32
47035: PUSH
47036: LD_INT 33
47038: PUSH
47039: LD_INT 34
47041: PUSH
47042: LD_INT 35
47044: PUSH
47045: LD_INT 36
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 101
47073: PUSH
47074: LD_INT 102
47076: PUSH
47077: LD_INT 103
47079: PUSH
47080: LD_INT 106
47082: PUSH
47083: LD_INT 108
47085: PUSH
47086: LD_INT 112
47088: PUSH
47089: LD_INT 113
47091: PUSH
47092: LD_INT 114
47094: PUSH
47095: LD_INT 115
47097: PUSH
47098: LD_INT 116
47100: PUSH
47101: LD_INT 117
47103: PUSH
47104: LD_INT 118
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: ST_TO_ADDR
47125: GO 47368
47127: LD_INT 19
47129: DOUBLE
47130: EQUAL
47131: IFTRUE 47135
47133: GO 47367
47135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
47136: LD_ADDR_VAR 0 2
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: LD_INT 5
47155: PUSH
47156: LD_INT 6
47158: PUSH
47159: LD_INT 7
47161: PUSH
47162: LD_INT 8
47164: PUSH
47165: LD_INT 9
47167: PUSH
47168: LD_INT 10
47170: PUSH
47171: LD_INT 11
47173: PUSH
47174: LD_INT 12
47176: PUSH
47177: LD_INT 13
47179: PUSH
47180: LD_INT 14
47182: PUSH
47183: LD_INT 15
47185: PUSH
47186: LD_INT 16
47188: PUSH
47189: LD_INT 17
47191: PUSH
47192: LD_INT 18
47194: PUSH
47195: LD_INT 19
47197: PUSH
47198: LD_INT 20
47200: PUSH
47201: LD_INT 21
47203: PUSH
47204: LD_INT 22
47206: PUSH
47207: LD_INT 23
47209: PUSH
47210: LD_INT 24
47212: PUSH
47213: LD_INT 25
47215: PUSH
47216: LD_INT 26
47218: PUSH
47219: LD_INT 27
47221: PUSH
47222: LD_INT 28
47224: PUSH
47225: LD_INT 29
47227: PUSH
47228: LD_INT 30
47230: PUSH
47231: LD_INT 31
47233: PUSH
47234: LD_INT 32
47236: PUSH
47237: LD_INT 33
47239: PUSH
47240: LD_INT 34
47242: PUSH
47243: LD_INT 35
47245: PUSH
47246: LD_INT 36
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 101
47289: PUSH
47290: LD_INT 102
47292: PUSH
47293: LD_INT 103
47295: PUSH
47296: LD_INT 104
47298: PUSH
47299: LD_INT 105
47301: PUSH
47302: LD_INT 106
47304: PUSH
47305: LD_INT 107
47307: PUSH
47308: LD_INT 108
47310: PUSH
47311: LD_INT 109
47313: PUSH
47314: LD_INT 110
47316: PUSH
47317: LD_INT 111
47319: PUSH
47320: LD_INT 112
47322: PUSH
47323: LD_INT 113
47325: PUSH
47326: LD_INT 114
47328: PUSH
47329: LD_INT 115
47331: PUSH
47332: LD_INT 116
47334: PUSH
47335: LD_INT 117
47337: PUSH
47338: LD_INT 118
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: ST_TO_ADDR
47365: GO 47368
47367: POP
// end else
47368: GO 47599
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
47370: LD_ADDR_VAR 0 2
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 2
47380: PUSH
47381: LD_INT 3
47383: PUSH
47384: LD_INT 4
47386: PUSH
47387: LD_INT 5
47389: PUSH
47390: LD_INT 6
47392: PUSH
47393: LD_INT 7
47395: PUSH
47396: LD_INT 8
47398: PUSH
47399: LD_INT 9
47401: PUSH
47402: LD_INT 10
47404: PUSH
47405: LD_INT 11
47407: PUSH
47408: LD_INT 12
47410: PUSH
47411: LD_INT 13
47413: PUSH
47414: LD_INT 14
47416: PUSH
47417: LD_INT 15
47419: PUSH
47420: LD_INT 16
47422: PUSH
47423: LD_INT 17
47425: PUSH
47426: LD_INT 18
47428: PUSH
47429: LD_INT 19
47431: PUSH
47432: LD_INT 20
47434: PUSH
47435: LD_INT 21
47437: PUSH
47438: LD_INT 22
47440: PUSH
47441: LD_INT 23
47443: PUSH
47444: LD_INT 24
47446: PUSH
47447: LD_INT 25
47449: PUSH
47450: LD_INT 26
47452: PUSH
47453: LD_INT 27
47455: PUSH
47456: LD_INT 28
47458: PUSH
47459: LD_INT 29
47461: PUSH
47462: LD_INT 30
47464: PUSH
47465: LD_INT 31
47467: PUSH
47468: LD_INT 32
47470: PUSH
47471: LD_INT 33
47473: PUSH
47474: LD_INT 34
47476: PUSH
47477: LD_INT 35
47479: PUSH
47480: LD_INT 36
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 101
47523: PUSH
47524: LD_INT 102
47526: PUSH
47527: LD_INT 103
47529: PUSH
47530: LD_INT 104
47532: PUSH
47533: LD_INT 105
47535: PUSH
47536: LD_INT 106
47538: PUSH
47539: LD_INT 107
47541: PUSH
47542: LD_INT 108
47544: PUSH
47545: LD_INT 109
47547: PUSH
47548: LD_INT 110
47550: PUSH
47551: LD_INT 111
47553: PUSH
47554: LD_INT 112
47556: PUSH
47557: LD_INT 113
47559: PUSH
47560: LD_INT 114
47562: PUSH
47563: LD_INT 115
47565: PUSH
47566: LD_INT 116
47568: PUSH
47569: LD_INT 117
47571: PUSH
47572: LD_INT 118
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: ST_TO_ADDR
// if result then
47599: LD_VAR 0 2
47603: IFFALSE 48389
// begin normal :=  ;
47605: LD_ADDR_VAR 0 5
47609: PUSH
47610: LD_STRING 
47612: ST_TO_ADDR
// hardcore :=  ;
47613: LD_ADDR_VAR 0 6
47617: PUSH
47618: LD_STRING 
47620: ST_TO_ADDR
// active :=  ;
47621: LD_ADDR_VAR 0 7
47625: PUSH
47626: LD_STRING 
47628: ST_TO_ADDR
// for i = 1 to normalCounter do
47629: LD_ADDR_VAR 0 8
47633: PUSH
47634: DOUBLE
47635: LD_INT 1
47637: DEC
47638: ST_TO_ADDR
47639: LD_EXP 35
47643: PUSH
47644: FOR_TO
47645: IFFALSE 47746
// begin tmp := 0 ;
47647: LD_ADDR_VAR 0 3
47651: PUSH
47652: LD_STRING 0
47654: ST_TO_ADDR
// if result [ 1 ] then
47655: LD_VAR 0 2
47659: PUSH
47660: LD_INT 1
47662: ARRAY
47663: IFFALSE 47728
// if result [ 1 ] [ 1 ] = i then
47665: LD_VAR 0 2
47669: PUSH
47670: LD_INT 1
47672: ARRAY
47673: PUSH
47674: LD_INT 1
47676: ARRAY
47677: PUSH
47678: LD_VAR 0 8
47682: EQUAL
47683: IFFALSE 47728
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
47685: LD_ADDR_VAR 0 2
47689: PUSH
47690: LD_VAR 0 2
47694: PPUSH
47695: LD_INT 1
47697: PPUSH
47698: LD_VAR 0 2
47702: PUSH
47703: LD_INT 1
47705: ARRAY
47706: PPUSH
47707: LD_INT 1
47709: PPUSH
47710: CALL_OW 3
47714: PPUSH
47715: CALL_OW 1
47719: ST_TO_ADDR
// tmp := 1 ;
47720: LD_ADDR_VAR 0 3
47724: PUSH
47725: LD_STRING 1
47727: ST_TO_ADDR
// end ; normal := normal & tmp ;
47728: LD_ADDR_VAR 0 5
47732: PUSH
47733: LD_VAR 0 5
47737: PUSH
47738: LD_VAR 0 3
47742: STR
47743: ST_TO_ADDR
// end ;
47744: GO 47644
47746: POP
47747: POP
// for i = 1 to hardcoreCounter do
47748: LD_ADDR_VAR 0 8
47752: PUSH
47753: DOUBLE
47754: LD_INT 1
47756: DEC
47757: ST_TO_ADDR
47758: LD_EXP 36
47762: PUSH
47763: FOR_TO
47764: IFFALSE 47869
// begin tmp := 0 ;
47766: LD_ADDR_VAR 0 3
47770: PUSH
47771: LD_STRING 0
47773: ST_TO_ADDR
// if result [ 2 ] then
47774: LD_VAR 0 2
47778: PUSH
47779: LD_INT 2
47781: ARRAY
47782: IFFALSE 47851
// if result [ 2 ] [ 1 ] = 100 + i then
47784: LD_VAR 0 2
47788: PUSH
47789: LD_INT 2
47791: ARRAY
47792: PUSH
47793: LD_INT 1
47795: ARRAY
47796: PUSH
47797: LD_INT 100
47799: PUSH
47800: LD_VAR 0 8
47804: PLUS
47805: EQUAL
47806: IFFALSE 47851
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
47808: LD_ADDR_VAR 0 2
47812: PUSH
47813: LD_VAR 0 2
47817: PPUSH
47818: LD_INT 2
47820: PPUSH
47821: LD_VAR 0 2
47825: PUSH
47826: LD_INT 2
47828: ARRAY
47829: PPUSH
47830: LD_INT 1
47832: PPUSH
47833: CALL_OW 3
47837: PPUSH
47838: CALL_OW 1
47842: ST_TO_ADDR
// tmp := 1 ;
47843: LD_ADDR_VAR 0 3
47847: PUSH
47848: LD_STRING 1
47850: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
47851: LD_ADDR_VAR 0 6
47855: PUSH
47856: LD_VAR 0 6
47860: PUSH
47861: LD_VAR 0 3
47865: STR
47866: ST_TO_ADDR
// end ;
47867: GO 47763
47869: POP
47870: POP
// if isGameLoad then
47871: LD_VAR 0 1
47875: IFFALSE 48350
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
47877: LD_ADDR_VAR 0 4
47881: PUSH
47882: LD_EXP 39
47886: PUSH
47887: LD_EXP 38
47891: PUSH
47892: LD_EXP 40
47896: PUSH
47897: LD_EXP 37
47901: PUSH
47902: LD_EXP 41
47906: PUSH
47907: LD_EXP 42
47911: PUSH
47912: LD_EXP 43
47916: PUSH
47917: LD_EXP 44
47921: PUSH
47922: LD_EXP 45
47926: PUSH
47927: LD_EXP 46
47931: PUSH
47932: LD_EXP 47
47936: PUSH
47937: LD_EXP 48
47941: PUSH
47942: LD_EXP 49
47946: PUSH
47947: LD_EXP 50
47951: PUSH
47952: LD_EXP 58
47956: PUSH
47957: LD_EXP 59
47961: PUSH
47962: LD_EXP 60
47966: PUSH
47967: LD_EXP 61
47971: PUSH
47972: LD_EXP 63
47976: PUSH
47977: LD_EXP 64
47981: PUSH
47982: LD_EXP 65
47986: PUSH
47987: LD_EXP 68
47991: PUSH
47992: LD_EXP 70
47996: PUSH
47997: LD_EXP 71
48001: PUSH
48002: LD_EXP 72
48006: PUSH
48007: LD_EXP 74
48011: PUSH
48012: LD_EXP 75
48016: PUSH
48017: LD_EXP 78
48021: PUSH
48022: LD_EXP 79
48026: PUSH
48027: LD_EXP 80
48031: PUSH
48032: LD_EXP 81
48036: PUSH
48037: LD_EXP 82
48041: PUSH
48042: LD_EXP 83
48046: PUSH
48047: LD_EXP 84
48051: PUSH
48052: LD_EXP 85
48056: PUSH
48057: LD_EXP 86
48061: PUSH
48062: LD_EXP 51
48066: PUSH
48067: LD_EXP 52
48071: PUSH
48072: LD_EXP 55
48076: PUSH
48077: LD_EXP 56
48081: PUSH
48082: LD_EXP 57
48086: PUSH
48087: LD_EXP 53
48091: PUSH
48092: LD_EXP 54
48096: PUSH
48097: LD_EXP 62
48101: PUSH
48102: LD_EXP 66
48106: PUSH
48107: LD_EXP 67
48111: PUSH
48112: LD_EXP 69
48116: PUSH
48117: LD_EXP 73
48121: PUSH
48122: LD_EXP 76
48126: PUSH
48127: LD_EXP 77
48131: PUSH
48132: LD_EXP 87
48136: PUSH
48137: LD_EXP 88
48141: PUSH
48142: LD_EXP 89
48146: PUSH
48147: LD_EXP 90
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: ST_TO_ADDR
// tmp :=  ;
48208: LD_ADDR_VAR 0 3
48212: PUSH
48213: LD_STRING 
48215: ST_TO_ADDR
// for i = 1 to normalCounter do
48216: LD_ADDR_VAR 0 8
48220: PUSH
48221: DOUBLE
48222: LD_INT 1
48224: DEC
48225: ST_TO_ADDR
48226: LD_EXP 35
48230: PUSH
48231: FOR_TO
48232: IFFALSE 48268
// begin if flags [ i ] then
48234: LD_VAR 0 4
48238: PUSH
48239: LD_VAR 0 8
48243: ARRAY
48244: IFFALSE 48266
// tmp := tmp & i & ; ;
48246: LD_ADDR_VAR 0 3
48250: PUSH
48251: LD_VAR 0 3
48255: PUSH
48256: LD_VAR 0 8
48260: STR
48261: PUSH
48262: LD_STRING ;
48264: STR
48265: ST_TO_ADDR
// end ;
48266: GO 48231
48268: POP
48269: POP
// for i = 1 to hardcoreCounter do
48270: LD_ADDR_VAR 0 8
48274: PUSH
48275: DOUBLE
48276: LD_INT 1
48278: DEC
48279: ST_TO_ADDR
48280: LD_EXP 36
48284: PUSH
48285: FOR_TO
48286: IFFALSE 48332
// begin if flags [ normalCounter + i ] then
48288: LD_VAR 0 4
48292: PUSH
48293: LD_EXP 35
48297: PUSH
48298: LD_VAR 0 8
48302: PLUS
48303: ARRAY
48304: IFFALSE 48330
// tmp := tmp & ( 100 + i ) & ; ;
48306: LD_ADDR_VAR 0 3
48310: PUSH
48311: LD_VAR 0 3
48315: PUSH
48316: LD_INT 100
48318: PUSH
48319: LD_VAR 0 8
48323: PLUS
48324: STR
48325: PUSH
48326: LD_STRING ;
48328: STR
48329: ST_TO_ADDR
// end ;
48330: GO 48285
48332: POP
48333: POP
// if tmp then
48334: LD_VAR 0 3
48338: IFFALSE 48350
// active := tmp ;
48340: LD_ADDR_VAR 0 7
48344: PUSH
48345: LD_VAR 0 3
48349: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
48350: LD_STRING getStreamItemsFromMission("
48352: PUSH
48353: LD_VAR 0 5
48357: STR
48358: PUSH
48359: LD_STRING ","
48361: STR
48362: PUSH
48363: LD_VAR 0 6
48367: STR
48368: PUSH
48369: LD_STRING ","
48371: STR
48372: PUSH
48373: LD_VAR 0 7
48377: STR
48378: PUSH
48379: LD_STRING ")
48381: STR
48382: PPUSH
48383: CALL_OW 559
// end else
48387: GO 48396
// ToLua ( getStreamItemsFromMission("","","") ) ;
48389: LD_STRING getStreamItemsFromMission("","","")
48391: PPUSH
48392: CALL_OW 559
// end ;
48396: LD_VAR 0 2
48400: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
48401: LD_EXP 34
48405: PUSH
48406: LD_EXP 39
48410: AND
48411: IFFALSE 48535
48413: GO 48415
48415: DISABLE
48416: LD_INT 0
48418: PPUSH
48419: PPUSH
// begin enable ;
48420: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
48421: LD_ADDR_VAR 0 2
48425: PUSH
48426: LD_INT 22
48428: PUSH
48429: LD_OWVAR 2
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: PUSH
48441: LD_INT 34
48443: PUSH
48444: LD_INT 7
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 34
48453: PUSH
48454: LD_INT 45
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 34
48463: PUSH
48464: LD_INT 28
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 34
48473: PUSH
48474: LD_INT 47
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PPUSH
48492: CALL_OW 69
48496: ST_TO_ADDR
// if not tmp then
48497: LD_VAR 0 2
48501: NOT
48502: IFFALSE 48506
// exit ;
48504: GO 48535
// for i in tmp do
48506: LD_ADDR_VAR 0 1
48510: PUSH
48511: LD_VAR 0 2
48515: PUSH
48516: FOR_IN
48517: IFFALSE 48533
// begin SetLives ( i , 0 ) ;
48519: LD_VAR 0 1
48523: PPUSH
48524: LD_INT 0
48526: PPUSH
48527: CALL_OW 234
// end ;
48531: GO 48516
48533: POP
48534: POP
// end ;
48535: PPOPN 2
48537: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
48538: LD_EXP 34
48542: PUSH
48543: LD_EXP 40
48547: AND
48548: IFFALSE 48632
48550: GO 48552
48552: DISABLE
48553: LD_INT 0
48555: PPUSH
48556: PPUSH
// begin enable ;
48557: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
48558: LD_ADDR_VAR 0 2
48562: PUSH
48563: LD_INT 22
48565: PUSH
48566: LD_OWVAR 2
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 32
48577: PUSH
48578: LD_INT 3
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PPUSH
48589: CALL_OW 69
48593: ST_TO_ADDR
// if not tmp then
48594: LD_VAR 0 2
48598: NOT
48599: IFFALSE 48603
// exit ;
48601: GO 48632
// for i in tmp do
48603: LD_ADDR_VAR 0 1
48607: PUSH
48608: LD_VAR 0 2
48612: PUSH
48613: FOR_IN
48614: IFFALSE 48630
// begin SetLives ( i , 0 ) ;
48616: LD_VAR 0 1
48620: PPUSH
48621: LD_INT 0
48623: PPUSH
48624: CALL_OW 234
// end ;
48628: GO 48613
48630: POP
48631: POP
// end ;
48632: PPOPN 2
48634: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
48635: LD_EXP 34
48639: PUSH
48640: LD_EXP 37
48644: AND
48645: IFFALSE 48738
48647: GO 48649
48649: DISABLE
48650: LD_INT 0
48652: PPUSH
// begin enable ;
48653: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
48654: LD_ADDR_VAR 0 1
48658: PUSH
48659: LD_INT 22
48661: PUSH
48662: LD_OWVAR 2
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 25
48676: PUSH
48677: LD_INT 5
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 25
48686: PUSH
48687: LD_INT 9
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 25
48696: PUSH
48697: LD_INT 8
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PPUSH
48714: CALL_OW 69
48718: PUSH
48719: FOR_IN
48720: IFFALSE 48736
// begin SetClass ( i , 1 ) ;
48722: LD_VAR 0 1
48726: PPUSH
48727: LD_INT 1
48729: PPUSH
48730: CALL_OW 336
// end ;
48734: GO 48719
48736: POP
48737: POP
// end ;
48738: PPOPN 1
48740: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
48741: LD_EXP 34
48745: PUSH
48746: LD_EXP 38
48750: AND
48751: PUSH
48752: LD_OWVAR 65
48756: PUSH
48757: LD_INT 7
48759: LESS
48760: AND
48761: IFFALSE 48775
48763: GO 48765
48765: DISABLE
// begin enable ;
48766: ENABLE
// game_speed := 7 ;
48767: LD_ADDR_OWVAR 65
48771: PUSH
48772: LD_INT 7
48774: ST_TO_ADDR
// end ;
48775: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
48776: LD_EXP 34
48780: PUSH
48781: LD_EXP 41
48785: AND
48786: IFFALSE 48988
48788: GO 48790
48790: DISABLE
48791: LD_INT 0
48793: PPUSH
48794: PPUSH
48795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
48796: LD_ADDR_VAR 0 3
48800: PUSH
48801: LD_INT 81
48803: PUSH
48804: LD_OWVAR 2
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 21
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PPUSH
48827: CALL_OW 69
48831: ST_TO_ADDR
// if not tmp then
48832: LD_VAR 0 3
48836: NOT
48837: IFFALSE 48841
// exit ;
48839: GO 48988
// if tmp > 5 then
48841: LD_VAR 0 3
48845: PUSH
48846: LD_INT 5
48848: GREATER
48849: IFFALSE 48861
// k := 5 else
48851: LD_ADDR_VAR 0 2
48855: PUSH
48856: LD_INT 5
48858: ST_TO_ADDR
48859: GO 48871
// k := tmp ;
48861: LD_ADDR_VAR 0 2
48865: PUSH
48866: LD_VAR 0 3
48870: ST_TO_ADDR
// for i := 1 to k do
48871: LD_ADDR_VAR 0 1
48875: PUSH
48876: DOUBLE
48877: LD_INT 1
48879: DEC
48880: ST_TO_ADDR
48881: LD_VAR 0 2
48885: PUSH
48886: FOR_TO
48887: IFFALSE 48986
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
48889: LD_VAR 0 3
48893: PUSH
48894: LD_VAR 0 1
48898: ARRAY
48899: PPUSH
48900: LD_VAR 0 1
48904: PUSH
48905: LD_INT 4
48907: MOD
48908: PUSH
48909: LD_INT 1
48911: PLUS
48912: PPUSH
48913: CALL_OW 259
48917: PUSH
48918: LD_INT 10
48920: LESS
48921: IFFALSE 48984
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
48923: LD_VAR 0 3
48927: PUSH
48928: LD_VAR 0 1
48932: ARRAY
48933: PPUSH
48934: LD_VAR 0 1
48938: PUSH
48939: LD_INT 4
48941: MOD
48942: PUSH
48943: LD_INT 1
48945: PLUS
48946: PPUSH
48947: LD_VAR 0 3
48951: PUSH
48952: LD_VAR 0 1
48956: ARRAY
48957: PPUSH
48958: LD_VAR 0 1
48962: PUSH
48963: LD_INT 4
48965: MOD
48966: PUSH
48967: LD_INT 1
48969: PLUS
48970: PPUSH
48971: CALL_OW 259
48975: PUSH
48976: LD_INT 1
48978: PLUS
48979: PPUSH
48980: CALL_OW 237
48984: GO 48886
48986: POP
48987: POP
// end ;
48988: PPOPN 3
48990: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
48991: LD_EXP 34
48995: PUSH
48996: LD_EXP 42
49000: AND
49001: IFFALSE 49021
49003: GO 49005
49005: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
49006: LD_INT 4
49008: PPUSH
49009: LD_OWVAR 2
49013: PPUSH
49014: LD_INT 0
49016: PPUSH
49017: CALL_OW 324
49021: END
// every 0 0$1 trigger StreamModeActive and sShovel do
49022: LD_EXP 34
49026: PUSH
49027: LD_EXP 71
49031: AND
49032: IFFALSE 49052
49034: GO 49036
49036: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
49037: LD_INT 19
49039: PPUSH
49040: LD_OWVAR 2
49044: PPUSH
49045: LD_INT 0
49047: PPUSH
49048: CALL_OW 324
49052: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
49053: LD_EXP 34
49057: PUSH
49058: LD_EXP 43
49062: AND
49063: IFFALSE 49165
49065: GO 49067
49067: DISABLE
49068: LD_INT 0
49070: PPUSH
49071: PPUSH
// begin enable ;
49072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
49073: LD_ADDR_VAR 0 2
49077: PUSH
49078: LD_INT 22
49080: PUSH
49081: LD_OWVAR 2
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 2
49092: PUSH
49093: LD_INT 34
49095: PUSH
49096: LD_INT 11
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 34
49105: PUSH
49106: LD_INT 30
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PPUSH
49122: CALL_OW 69
49126: ST_TO_ADDR
// if not tmp then
49127: LD_VAR 0 2
49131: NOT
49132: IFFALSE 49136
// exit ;
49134: GO 49165
// for i in tmp do
49136: LD_ADDR_VAR 0 1
49140: PUSH
49141: LD_VAR 0 2
49145: PUSH
49146: FOR_IN
49147: IFFALSE 49163
// begin SetLives ( i , 0 ) ;
49149: LD_VAR 0 1
49153: PPUSH
49154: LD_INT 0
49156: PPUSH
49157: CALL_OW 234
// end ;
49161: GO 49146
49163: POP
49164: POP
// end ;
49165: PPOPN 2
49167: END
// every 0 0$1 trigger StreamModeActive and sBunker do
49168: LD_EXP 34
49172: PUSH
49173: LD_EXP 44
49177: AND
49178: IFFALSE 49198
49180: GO 49182
49182: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
49183: LD_INT 32
49185: PPUSH
49186: LD_OWVAR 2
49190: PPUSH
49191: LD_INT 0
49193: PPUSH
49194: CALL_OW 324
49198: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
49199: LD_EXP 34
49203: PUSH
49204: LD_EXP 45
49208: AND
49209: IFFALSE 49390
49211: GO 49213
49213: DISABLE
49214: LD_INT 0
49216: PPUSH
49217: PPUSH
49218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
49219: LD_ADDR_VAR 0 2
49223: PUSH
49224: LD_INT 22
49226: PUSH
49227: LD_OWVAR 2
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 33
49238: PUSH
49239: LD_INT 3
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PPUSH
49250: CALL_OW 69
49254: ST_TO_ADDR
// if not tmp then
49255: LD_VAR 0 2
49259: NOT
49260: IFFALSE 49264
// exit ;
49262: GO 49390
// side := 0 ;
49264: LD_ADDR_VAR 0 3
49268: PUSH
49269: LD_INT 0
49271: ST_TO_ADDR
// for i := 1 to 8 do
49272: LD_ADDR_VAR 0 1
49276: PUSH
49277: DOUBLE
49278: LD_INT 1
49280: DEC
49281: ST_TO_ADDR
49282: LD_INT 8
49284: PUSH
49285: FOR_TO
49286: IFFALSE 49334
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
49288: LD_OWVAR 2
49292: PUSH
49293: LD_VAR 0 1
49297: NONEQUAL
49298: PUSH
49299: LD_OWVAR 2
49303: PPUSH
49304: LD_VAR 0 1
49308: PPUSH
49309: CALL_OW 81
49313: PUSH
49314: LD_INT 2
49316: EQUAL
49317: AND
49318: IFFALSE 49332
// begin side := i ;
49320: LD_ADDR_VAR 0 3
49324: PUSH
49325: LD_VAR 0 1
49329: ST_TO_ADDR
// break ;
49330: GO 49334
// end ;
49332: GO 49285
49334: POP
49335: POP
// if not side then
49336: LD_VAR 0 3
49340: NOT
49341: IFFALSE 49345
// exit ;
49343: GO 49390
// for i := 1 to tmp do
49345: LD_ADDR_VAR 0 1
49349: PUSH
49350: DOUBLE
49351: LD_INT 1
49353: DEC
49354: ST_TO_ADDR
49355: LD_VAR 0 2
49359: PUSH
49360: FOR_TO
49361: IFFALSE 49388
// if Prob ( 60 ) then
49363: LD_INT 60
49365: PPUSH
49366: CALL_OW 13
49370: IFFALSE 49386
// SetSide ( i , side ) ;
49372: LD_VAR 0 1
49376: PPUSH
49377: LD_VAR 0 3
49381: PPUSH
49382: CALL_OW 235
49386: GO 49360
49388: POP
49389: POP
// end ;
49390: PPOPN 3
49392: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
49393: LD_EXP 34
49397: PUSH
49398: LD_EXP 47
49402: AND
49403: IFFALSE 49522
49405: GO 49407
49407: DISABLE
49408: LD_INT 0
49410: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
49411: LD_ADDR_VAR 0 1
49415: PUSH
49416: LD_INT 22
49418: PUSH
49419: LD_OWVAR 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 21
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 3
49440: PUSH
49441: LD_INT 23
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: PPUSH
49460: CALL_OW 69
49464: PUSH
49465: FOR_IN
49466: IFFALSE 49520
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
49468: LD_VAR 0 1
49472: PPUSH
49473: CALL_OW 257
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: LD_INT 4
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: IN
49496: IFFALSE 49518
// SetClass ( un , rand ( 1 , 4 ) ) ;
49498: LD_VAR 0 1
49502: PPUSH
49503: LD_INT 1
49505: PPUSH
49506: LD_INT 4
49508: PPUSH
49509: CALL_OW 12
49513: PPUSH
49514: CALL_OW 336
49518: GO 49465
49520: POP
49521: POP
// end ;
49522: PPOPN 1
49524: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
49525: LD_EXP 34
49529: PUSH
49530: LD_EXP 46
49534: AND
49535: IFFALSE 49614
49537: GO 49539
49539: DISABLE
49540: LD_INT 0
49542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49543: LD_ADDR_VAR 0 1
49547: PUSH
49548: LD_INT 22
49550: PUSH
49551: LD_OWVAR 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 21
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PPUSH
49574: CALL_OW 69
49578: ST_TO_ADDR
// if not tmp then
49579: LD_VAR 0 1
49583: NOT
49584: IFFALSE 49588
// exit ;
49586: GO 49614
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
49588: LD_VAR 0 1
49592: PUSH
49593: LD_INT 1
49595: PPUSH
49596: LD_VAR 0 1
49600: PPUSH
49601: CALL_OW 12
49605: ARRAY
49606: PPUSH
49607: LD_INT 100
49609: PPUSH
49610: CALL_OW 234
// end ;
49614: PPOPN 1
49616: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
49617: LD_EXP 34
49621: PUSH
49622: LD_EXP 48
49626: AND
49627: IFFALSE 49725
49629: GO 49631
49631: DISABLE
49632: LD_INT 0
49634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
49635: LD_ADDR_VAR 0 1
49639: PUSH
49640: LD_INT 22
49642: PUSH
49643: LD_OWVAR 2
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 21
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PPUSH
49666: CALL_OW 69
49670: ST_TO_ADDR
// if not tmp then
49671: LD_VAR 0 1
49675: NOT
49676: IFFALSE 49680
// exit ;
49678: GO 49725
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
49680: LD_VAR 0 1
49684: PUSH
49685: LD_INT 1
49687: PPUSH
49688: LD_VAR 0 1
49692: PPUSH
49693: CALL_OW 12
49697: ARRAY
49698: PPUSH
49699: LD_INT 1
49701: PPUSH
49702: LD_INT 4
49704: PPUSH
49705: CALL_OW 12
49709: PPUSH
49710: LD_INT 3000
49712: PPUSH
49713: LD_INT 9000
49715: PPUSH
49716: CALL_OW 12
49720: PPUSH
49721: CALL_OW 492
// end ;
49725: PPOPN 1
49727: END
// every 0 0$1 trigger StreamModeActive and sDepot do
49728: LD_EXP 34
49732: PUSH
49733: LD_EXP 49
49737: AND
49738: IFFALSE 49758
49740: GO 49742
49742: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
49743: LD_INT 1
49745: PPUSH
49746: LD_OWVAR 2
49750: PPUSH
49751: LD_INT 0
49753: PPUSH
49754: CALL_OW 324
49758: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
49759: LD_EXP 34
49763: PUSH
49764: LD_EXP 50
49768: AND
49769: IFFALSE 49852
49771: GO 49773
49773: DISABLE
49774: LD_INT 0
49776: PPUSH
49777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
49778: LD_ADDR_VAR 0 2
49782: PUSH
49783: LD_INT 22
49785: PUSH
49786: LD_OWVAR 2
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 21
49797: PUSH
49798: LD_INT 3
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PPUSH
49809: CALL_OW 69
49813: ST_TO_ADDR
// if not tmp then
49814: LD_VAR 0 2
49818: NOT
49819: IFFALSE 49823
// exit ;
49821: GO 49852
// for i in tmp do
49823: LD_ADDR_VAR 0 1
49827: PUSH
49828: LD_VAR 0 2
49832: PUSH
49833: FOR_IN
49834: IFFALSE 49850
// SetBLevel ( i , 10 ) ;
49836: LD_VAR 0 1
49840: PPUSH
49841: LD_INT 10
49843: PPUSH
49844: CALL_OW 241
49848: GO 49833
49850: POP
49851: POP
// end ;
49852: PPOPN 2
49854: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
49855: LD_EXP 34
49859: PUSH
49860: LD_EXP 51
49864: AND
49865: IFFALSE 49976
49867: GO 49869
49869: DISABLE
49870: LD_INT 0
49872: PPUSH
49873: PPUSH
49874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
49875: LD_ADDR_VAR 0 3
49879: PUSH
49880: LD_INT 22
49882: PUSH
49883: LD_OWVAR 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 25
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PPUSH
49906: CALL_OW 69
49910: ST_TO_ADDR
// if not tmp then
49911: LD_VAR 0 3
49915: NOT
49916: IFFALSE 49920
// exit ;
49918: GO 49976
// un := tmp [ rand ( 1 , tmp ) ] ;
49920: LD_ADDR_VAR 0 2
49924: PUSH
49925: LD_VAR 0 3
49929: PUSH
49930: LD_INT 1
49932: PPUSH
49933: LD_VAR 0 3
49937: PPUSH
49938: CALL_OW 12
49942: ARRAY
49943: ST_TO_ADDR
// if Crawls ( un ) then
49944: LD_VAR 0 2
49948: PPUSH
49949: CALL_OW 318
49953: IFFALSE 49964
// ComWalk ( un ) ;
49955: LD_VAR 0 2
49959: PPUSH
49960: CALL_OW 138
// SetClass ( un , class_sniper ) ;
49964: LD_VAR 0 2
49968: PPUSH
49969: LD_INT 5
49971: PPUSH
49972: CALL_OW 336
// end ;
49976: PPOPN 3
49978: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
49979: LD_EXP 34
49983: PUSH
49984: LD_EXP 52
49988: AND
49989: PUSH
49990: LD_OWVAR 67
49994: PUSH
49995: LD_INT 4
49997: LESS
49998: AND
49999: IFFALSE 50018
50001: GO 50003
50003: DISABLE
// begin Difficulty := Difficulty + 1 ;
50004: LD_ADDR_OWVAR 67
50008: PUSH
50009: LD_OWVAR 67
50013: PUSH
50014: LD_INT 1
50016: PLUS
50017: ST_TO_ADDR
// end ;
50018: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
50019: LD_EXP 34
50023: PUSH
50024: LD_EXP 53
50028: AND
50029: IFFALSE 50132
50031: GO 50033
50033: DISABLE
50034: LD_INT 0
50036: PPUSH
// begin for i := 1 to 5 do
50037: LD_ADDR_VAR 0 1
50041: PUSH
50042: DOUBLE
50043: LD_INT 1
50045: DEC
50046: ST_TO_ADDR
50047: LD_INT 5
50049: PUSH
50050: FOR_TO
50051: IFFALSE 50130
// begin uc_nation := nation_nature ;
50053: LD_ADDR_OWVAR 21
50057: PUSH
50058: LD_INT 0
50060: ST_TO_ADDR
// uc_side := 0 ;
50061: LD_ADDR_OWVAR 20
50065: PUSH
50066: LD_INT 0
50068: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50069: LD_ADDR_OWVAR 29
50073: PUSH
50074: LD_INT 12
50076: PUSH
50077: LD_INT 12
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: ST_TO_ADDR
// hc_agressivity := 20 ;
50084: LD_ADDR_OWVAR 35
50088: PUSH
50089: LD_INT 20
50091: ST_TO_ADDR
// hc_class := class_tiger ;
50092: LD_ADDR_OWVAR 28
50096: PUSH
50097: LD_INT 14
50099: ST_TO_ADDR
// hc_gallery :=  ;
50100: LD_ADDR_OWVAR 33
50104: PUSH
50105: LD_STRING 
50107: ST_TO_ADDR
// hc_name :=  ;
50108: LD_ADDR_OWVAR 26
50112: PUSH
50113: LD_STRING 
50115: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
50116: CALL_OW 44
50120: PPUSH
50121: LD_INT 0
50123: PPUSH
50124: CALL_OW 51
// end ;
50128: GO 50050
50130: POP
50131: POP
// end ;
50132: PPOPN 1
50134: END
// every 0 0$1 trigger StreamModeActive and sBomb do
50135: LD_EXP 34
50139: PUSH
50140: LD_EXP 54
50144: AND
50145: IFFALSE 50154
50147: GO 50149
50149: DISABLE
// StreamSibBomb ;
50150: CALL 50155 0 0
50154: END
// export function StreamSibBomb ; var i , x , y ; begin
50155: LD_INT 0
50157: PPUSH
50158: PPUSH
50159: PPUSH
50160: PPUSH
// result := false ;
50161: LD_ADDR_VAR 0 1
50165: PUSH
50166: LD_INT 0
50168: ST_TO_ADDR
// for i := 1 to 16 do
50169: LD_ADDR_VAR 0 2
50173: PUSH
50174: DOUBLE
50175: LD_INT 1
50177: DEC
50178: ST_TO_ADDR
50179: LD_INT 16
50181: PUSH
50182: FOR_TO
50183: IFFALSE 50382
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
50185: LD_ADDR_VAR 0 3
50189: PUSH
50190: LD_INT 10
50192: PUSH
50193: LD_INT 20
50195: PUSH
50196: LD_INT 30
50198: PUSH
50199: LD_INT 40
50201: PUSH
50202: LD_INT 50
50204: PUSH
50205: LD_INT 60
50207: PUSH
50208: LD_INT 70
50210: PUSH
50211: LD_INT 80
50213: PUSH
50214: LD_INT 90
50216: PUSH
50217: LD_INT 100
50219: PUSH
50220: LD_INT 110
50222: PUSH
50223: LD_INT 120
50225: PUSH
50226: LD_INT 130
50228: PUSH
50229: LD_INT 140
50231: PUSH
50232: LD_INT 150
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PPUSH
50255: LD_INT 15
50257: PPUSH
50258: CALL_OW 12
50262: ARRAY
50263: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
50264: LD_ADDR_VAR 0 4
50268: PUSH
50269: LD_INT 10
50271: PUSH
50272: LD_INT 20
50274: PUSH
50275: LD_INT 30
50277: PUSH
50278: LD_INT 40
50280: PUSH
50281: LD_INT 50
50283: PUSH
50284: LD_INT 60
50286: PUSH
50287: LD_INT 70
50289: PUSH
50290: LD_INT 80
50292: PUSH
50293: LD_INT 90
50295: PUSH
50296: LD_INT 100
50298: PUSH
50299: LD_INT 110
50301: PUSH
50302: LD_INT 120
50304: PUSH
50305: LD_INT 130
50307: PUSH
50308: LD_INT 140
50310: PUSH
50311: LD_INT 150
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PPUSH
50334: LD_INT 15
50336: PPUSH
50337: CALL_OW 12
50341: ARRAY
50342: ST_TO_ADDR
// if ValidHex ( x , y ) then
50343: LD_VAR 0 3
50347: PPUSH
50348: LD_VAR 0 4
50352: PPUSH
50353: CALL_OW 488
50357: IFFALSE 50380
// begin result := [ x , y ] ;
50359: LD_ADDR_VAR 0 1
50363: PUSH
50364: LD_VAR 0 3
50368: PUSH
50369: LD_VAR 0 4
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: ST_TO_ADDR
// break ;
50378: GO 50382
// end ; end ;
50380: GO 50182
50382: POP
50383: POP
// if result then
50384: LD_VAR 0 1
50388: IFFALSE 50448
// begin ToLua ( playSibBomb() ) ;
50390: LD_STRING playSibBomb()
50392: PPUSH
50393: CALL_OW 559
// wait ( 0 0$14 ) ;
50397: LD_INT 490
50399: PPUSH
50400: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
50404: LD_VAR 0 1
50408: PUSH
50409: LD_INT 1
50411: ARRAY
50412: PPUSH
50413: LD_VAR 0 1
50417: PUSH
50418: LD_INT 2
50420: ARRAY
50421: PPUSH
50422: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
50426: LD_VAR 0 1
50430: PUSH
50431: LD_INT 1
50433: ARRAY
50434: PPUSH
50435: LD_VAR 0 1
50439: PUSH
50440: LD_INT 2
50442: ARRAY
50443: PPUSH
50444: CALL_OW 429
// end ; end ;
50448: LD_VAR 0 1
50452: RET
// every 0 0$1 trigger StreamModeActive and sReset do
50453: LD_EXP 34
50457: PUSH
50458: LD_EXP 56
50462: AND
50463: IFFALSE 50475
50465: GO 50467
50467: DISABLE
// YouLost (  ) ;
50468: LD_STRING 
50470: PPUSH
50471: CALL_OW 104
50475: END
// every 0 0$1 trigger StreamModeActive and sFog do
50476: LD_EXP 34
50480: PUSH
50481: LD_EXP 55
50485: AND
50486: IFFALSE 50500
50488: GO 50490
50490: DISABLE
// FogOff ( your_side ) ;
50491: LD_OWVAR 2
50495: PPUSH
50496: CALL_OW 344
50500: END
// every 0 0$1 trigger StreamModeActive and sSun do
50501: LD_EXP 34
50505: PUSH
50506: LD_EXP 57
50510: AND
50511: IFFALSE 50539
50513: GO 50515
50515: DISABLE
// begin solar_recharge_percent := 0 ;
50516: LD_ADDR_OWVAR 79
50520: PUSH
50521: LD_INT 0
50523: ST_TO_ADDR
// wait ( 5 5$00 ) ;
50524: LD_INT 10500
50526: PPUSH
50527: CALL_OW 67
// solar_recharge_percent := 100 ;
50531: LD_ADDR_OWVAR 79
50535: PUSH
50536: LD_INT 100
50538: ST_TO_ADDR
// end ;
50539: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
50540: LD_EXP 34
50544: PUSH
50545: LD_EXP 58
50549: AND
50550: IFFALSE 50789
50552: GO 50554
50554: DISABLE
50555: LD_INT 0
50557: PPUSH
50558: PPUSH
50559: PPUSH
// begin tmp := [ ] ;
50560: LD_ADDR_VAR 0 3
50564: PUSH
50565: EMPTY
50566: ST_TO_ADDR
// for i := 1 to 6 do
50567: LD_ADDR_VAR 0 1
50571: PUSH
50572: DOUBLE
50573: LD_INT 1
50575: DEC
50576: ST_TO_ADDR
50577: LD_INT 6
50579: PUSH
50580: FOR_TO
50581: IFFALSE 50686
// begin uc_nation := nation_nature ;
50583: LD_ADDR_OWVAR 21
50587: PUSH
50588: LD_INT 0
50590: ST_TO_ADDR
// uc_side := 0 ;
50591: LD_ADDR_OWVAR 20
50595: PUSH
50596: LD_INT 0
50598: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50599: LD_ADDR_OWVAR 29
50603: PUSH
50604: LD_INT 12
50606: PUSH
50607: LD_INT 12
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: ST_TO_ADDR
// hc_agressivity := 20 ;
50614: LD_ADDR_OWVAR 35
50618: PUSH
50619: LD_INT 20
50621: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
50622: LD_ADDR_OWVAR 28
50626: PUSH
50627: LD_INT 17
50629: ST_TO_ADDR
// hc_gallery :=  ;
50630: LD_ADDR_OWVAR 33
50634: PUSH
50635: LD_STRING 
50637: ST_TO_ADDR
// hc_name :=  ;
50638: LD_ADDR_OWVAR 26
50642: PUSH
50643: LD_STRING 
50645: ST_TO_ADDR
// un := CreateHuman ;
50646: LD_ADDR_VAR 0 2
50650: PUSH
50651: CALL_OW 44
50655: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
50656: LD_VAR 0 2
50660: PPUSH
50661: LD_INT 1
50663: PPUSH
50664: CALL_OW 51
// tmp := tmp ^ un ;
50668: LD_ADDR_VAR 0 3
50672: PUSH
50673: LD_VAR 0 3
50677: PUSH
50678: LD_VAR 0 2
50682: ADD
50683: ST_TO_ADDR
// end ;
50684: GO 50580
50686: POP
50687: POP
// repeat wait ( 0 0$1 ) ;
50688: LD_INT 35
50690: PPUSH
50691: CALL_OW 67
// for un in tmp do
50695: LD_ADDR_VAR 0 2
50699: PUSH
50700: LD_VAR 0 3
50704: PUSH
50705: FOR_IN
50706: IFFALSE 50780
// begin if IsDead ( un ) then
50708: LD_VAR 0 2
50712: PPUSH
50713: CALL_OW 301
50717: IFFALSE 50737
// begin tmp := tmp diff un ;
50719: LD_ADDR_VAR 0 3
50723: PUSH
50724: LD_VAR 0 3
50728: PUSH
50729: LD_VAR 0 2
50733: DIFF
50734: ST_TO_ADDR
// continue ;
50735: GO 50705
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
50737: LD_VAR 0 2
50741: PPUSH
50742: LD_INT 3
50744: PUSH
50745: LD_INT 22
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PPUSH
50759: CALL_OW 69
50763: PPUSH
50764: LD_VAR 0 2
50768: PPUSH
50769: CALL_OW 74
50773: PPUSH
50774: CALL_OW 115
// end ;
50778: GO 50705
50780: POP
50781: POP
// until not tmp ;
50782: LD_VAR 0 3
50786: NOT
50787: IFFALSE 50688
// end ;
50789: PPOPN 3
50791: END
// every 0 0$1 trigger StreamModeActive and sTroll do
50792: LD_EXP 34
50796: PUSH
50797: LD_EXP 59
50801: AND
50802: IFFALSE 50856
50804: GO 50806
50806: DISABLE
// begin ToLua ( displayTroll(); ) ;
50807: LD_STRING displayTroll();
50809: PPUSH
50810: CALL_OW 559
// wait ( 3 3$00 ) ;
50814: LD_INT 6300
50816: PPUSH
50817: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50821: LD_STRING hideTroll();
50823: PPUSH
50824: CALL_OW 559
// wait ( 1 1$00 ) ;
50828: LD_INT 2100
50830: PPUSH
50831: CALL_OW 67
// ToLua ( displayTroll(); ) ;
50835: LD_STRING displayTroll();
50837: PPUSH
50838: CALL_OW 559
// wait ( 1 1$00 ) ;
50842: LD_INT 2100
50844: PPUSH
50845: CALL_OW 67
// ToLua ( hideTroll(); ) ;
50849: LD_STRING hideTroll();
50851: PPUSH
50852: CALL_OW 559
// end ;
50856: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
50857: LD_EXP 34
50861: PUSH
50862: LD_EXP 60
50866: AND
50867: IFFALSE 50930
50869: GO 50871
50871: DISABLE
50872: LD_INT 0
50874: PPUSH
// begin p := 0 ;
50875: LD_ADDR_VAR 0 1
50879: PUSH
50880: LD_INT 0
50882: ST_TO_ADDR
// repeat game_speed := 1 ;
50883: LD_ADDR_OWVAR 65
50887: PUSH
50888: LD_INT 1
50890: ST_TO_ADDR
// wait ( 0 0$1 ) ;
50891: LD_INT 35
50893: PPUSH
50894: CALL_OW 67
// p := p + 1 ;
50898: LD_ADDR_VAR 0 1
50902: PUSH
50903: LD_VAR 0 1
50907: PUSH
50908: LD_INT 1
50910: PLUS
50911: ST_TO_ADDR
// until p >= 60 ;
50912: LD_VAR 0 1
50916: PUSH
50917: LD_INT 60
50919: GREATEREQUAL
50920: IFFALSE 50883
// game_speed := 4 ;
50922: LD_ADDR_OWVAR 65
50926: PUSH
50927: LD_INT 4
50929: ST_TO_ADDR
// end ;
50930: PPOPN 1
50932: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
50933: LD_EXP 34
50937: PUSH
50938: LD_EXP 61
50942: AND
50943: IFFALSE 51089
50945: GO 50947
50947: DISABLE
50948: LD_INT 0
50950: PPUSH
50951: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50952: LD_ADDR_VAR 0 1
50956: PUSH
50957: LD_INT 22
50959: PUSH
50960: LD_OWVAR 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 30
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 30
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: LIST
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PPUSH
51001: CALL_OW 69
51005: ST_TO_ADDR
// if not depot then
51006: LD_VAR 0 1
51010: NOT
51011: IFFALSE 51015
// exit ;
51013: GO 51089
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
51015: LD_ADDR_VAR 0 2
51019: PUSH
51020: LD_VAR 0 1
51024: PUSH
51025: LD_INT 1
51027: PPUSH
51028: LD_VAR 0 1
51032: PPUSH
51033: CALL_OW 12
51037: ARRAY
51038: PPUSH
51039: CALL_OW 274
51043: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
51044: LD_VAR 0 2
51048: PPUSH
51049: LD_INT 1
51051: PPUSH
51052: LD_INT 0
51054: PPUSH
51055: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
51059: LD_VAR 0 2
51063: PPUSH
51064: LD_INT 2
51066: PPUSH
51067: LD_INT 0
51069: PPUSH
51070: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
51074: LD_VAR 0 2
51078: PPUSH
51079: LD_INT 3
51081: PPUSH
51082: LD_INT 0
51084: PPUSH
51085: CALL_OW 277
// end ;
51089: PPOPN 2
51091: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
51092: LD_EXP 34
51096: PUSH
51097: LD_EXP 62
51101: AND
51102: IFFALSE 51199
51104: GO 51106
51106: DISABLE
51107: LD_INT 0
51109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51110: LD_ADDR_VAR 0 1
51114: PUSH
51115: LD_INT 22
51117: PUSH
51118: LD_OWVAR 2
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 21
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 3
51139: PUSH
51140: LD_INT 23
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: PPUSH
51159: CALL_OW 69
51163: ST_TO_ADDR
// if not tmp then
51164: LD_VAR 0 1
51168: NOT
51169: IFFALSE 51173
// exit ;
51171: GO 51199
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
51173: LD_VAR 0 1
51177: PUSH
51178: LD_INT 1
51180: PPUSH
51181: LD_VAR 0 1
51185: PPUSH
51186: CALL_OW 12
51190: ARRAY
51191: PPUSH
51192: LD_INT 200
51194: PPUSH
51195: CALL_OW 234
// end ;
51199: PPOPN 1
51201: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
51202: LD_EXP 34
51206: PUSH
51207: LD_EXP 63
51211: AND
51212: IFFALSE 51291
51214: GO 51216
51216: DISABLE
51217: LD_INT 0
51219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
51220: LD_ADDR_VAR 0 1
51224: PUSH
51225: LD_INT 22
51227: PUSH
51228: LD_OWVAR 2
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 21
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PPUSH
51251: CALL_OW 69
51255: ST_TO_ADDR
// if not tmp then
51256: LD_VAR 0 1
51260: NOT
51261: IFFALSE 51265
// exit ;
51263: GO 51291
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
51265: LD_VAR 0 1
51269: PUSH
51270: LD_INT 1
51272: PPUSH
51273: LD_VAR 0 1
51277: PPUSH
51278: CALL_OW 12
51282: ARRAY
51283: PPUSH
51284: LD_INT 60
51286: PPUSH
51287: CALL_OW 234
// end ;
51291: PPOPN 1
51293: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
51294: LD_EXP 34
51298: PUSH
51299: LD_EXP 64
51303: AND
51304: IFFALSE 51403
51306: GO 51308
51308: DISABLE
51309: LD_INT 0
51311: PPUSH
51312: PPUSH
// begin enable ;
51313: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
51314: LD_ADDR_VAR 0 1
51318: PUSH
51319: LD_INT 22
51321: PUSH
51322: LD_OWVAR 2
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 61
51333: PUSH
51334: EMPTY
51335: LIST
51336: PUSH
51337: LD_INT 33
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: LIST
51351: PPUSH
51352: CALL_OW 69
51356: ST_TO_ADDR
// if not tmp then
51357: LD_VAR 0 1
51361: NOT
51362: IFFALSE 51366
// exit ;
51364: GO 51403
// for i in tmp do
51366: LD_ADDR_VAR 0 2
51370: PUSH
51371: LD_VAR 0 1
51375: PUSH
51376: FOR_IN
51377: IFFALSE 51401
// if IsControledBy ( i ) then
51379: LD_VAR 0 2
51383: PPUSH
51384: CALL_OW 312
51388: IFFALSE 51399
// ComUnlink ( i ) ;
51390: LD_VAR 0 2
51394: PPUSH
51395: CALL_OW 136
51399: GO 51376
51401: POP
51402: POP
// end ;
51403: PPOPN 2
51405: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
51406: LD_EXP 34
51410: PUSH
51411: LD_EXP 65
51415: AND
51416: IFFALSE 51556
51418: GO 51420
51420: DISABLE
51421: LD_INT 0
51423: PPUSH
51424: PPUSH
// begin ToLua ( displayPowell(); ) ;
51425: LD_STRING displayPowell();
51427: PPUSH
51428: CALL_OW 559
// uc_side := 0 ;
51432: LD_ADDR_OWVAR 20
51436: PUSH
51437: LD_INT 0
51439: ST_TO_ADDR
// uc_nation := 2 ;
51440: LD_ADDR_OWVAR 21
51444: PUSH
51445: LD_INT 2
51447: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
51448: LD_ADDR_OWVAR 37
51452: PUSH
51453: LD_INT 14
51455: ST_TO_ADDR
// vc_engine := engine_siberite ;
51456: LD_ADDR_OWVAR 39
51460: PUSH
51461: LD_INT 3
51463: ST_TO_ADDR
// vc_control := control_apeman ;
51464: LD_ADDR_OWVAR 38
51468: PUSH
51469: LD_INT 5
51471: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
51472: LD_ADDR_OWVAR 40
51476: PUSH
51477: LD_INT 29
51479: ST_TO_ADDR
// un := CreateVehicle ;
51480: LD_ADDR_VAR 0 2
51484: PUSH
51485: CALL_OW 45
51489: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
51490: LD_VAR 0 2
51494: PPUSH
51495: LD_INT 1
51497: PPUSH
51498: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51502: LD_INT 35
51504: PPUSH
51505: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51509: LD_VAR 0 2
51513: PPUSH
51514: LD_INT 22
51516: PUSH
51517: LD_OWVAR 2
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PPUSH
51526: CALL_OW 69
51530: PPUSH
51531: LD_VAR 0 2
51535: PPUSH
51536: CALL_OW 74
51540: PPUSH
51541: CALL_OW 115
// until IsDead ( un ) ;
51545: LD_VAR 0 2
51549: PPUSH
51550: CALL_OW 301
51554: IFFALSE 51502
// end ;
51556: PPOPN 2
51558: END
// every 0 0$1 trigger StreamModeActive and sStu do
51559: LD_EXP 34
51563: PUSH
51564: LD_EXP 73
51568: AND
51569: IFFALSE 51585
51571: GO 51573
51573: DISABLE
// begin ToLua ( displayStucuk(); ) ;
51574: LD_STRING displayStucuk();
51576: PPUSH
51577: CALL_OW 559
// ResetFog ;
51581: CALL_OW 335
// end ;
51585: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
51586: LD_EXP 34
51590: PUSH
51591: LD_EXP 66
51595: AND
51596: IFFALSE 51737
51598: GO 51600
51600: DISABLE
51601: LD_INT 0
51603: PPUSH
51604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51605: LD_ADDR_VAR 0 2
51609: PUSH
51610: LD_INT 22
51612: PUSH
51613: LD_OWVAR 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 21
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PPUSH
51636: CALL_OW 69
51640: ST_TO_ADDR
// if not tmp then
51641: LD_VAR 0 2
51645: NOT
51646: IFFALSE 51650
// exit ;
51648: GO 51737
// un := tmp [ rand ( 1 , tmp ) ] ;
51650: LD_ADDR_VAR 0 1
51654: PUSH
51655: LD_VAR 0 2
51659: PUSH
51660: LD_INT 1
51662: PPUSH
51663: LD_VAR 0 2
51667: PPUSH
51668: CALL_OW 12
51672: ARRAY
51673: ST_TO_ADDR
// SetSide ( un , 0 ) ;
51674: LD_VAR 0 1
51678: PPUSH
51679: LD_INT 0
51681: PPUSH
51682: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
51686: LD_VAR 0 1
51690: PPUSH
51691: LD_OWVAR 3
51695: PUSH
51696: LD_VAR 0 1
51700: DIFF
51701: PPUSH
51702: LD_VAR 0 1
51706: PPUSH
51707: CALL_OW 74
51711: PPUSH
51712: CALL_OW 115
// wait ( 0 0$20 ) ;
51716: LD_INT 700
51718: PPUSH
51719: CALL_OW 67
// SetSide ( un , your_side ) ;
51723: LD_VAR 0 1
51727: PPUSH
51728: LD_OWVAR 2
51732: PPUSH
51733: CALL_OW 235
// end ;
51737: PPOPN 2
51739: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
51740: LD_EXP 34
51744: PUSH
51745: LD_EXP 67
51749: AND
51750: IFFALSE 51856
51752: GO 51754
51754: DISABLE
51755: LD_INT 0
51757: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51758: LD_ADDR_VAR 0 1
51762: PUSH
51763: LD_INT 22
51765: PUSH
51766: LD_OWVAR 2
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: LD_INT 30
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 30
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: LIST
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PPUSH
51807: CALL_OW 69
51811: ST_TO_ADDR
// if not depot then
51812: LD_VAR 0 1
51816: NOT
51817: IFFALSE 51821
// exit ;
51819: GO 51856
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
51821: LD_VAR 0 1
51825: PUSH
51826: LD_INT 1
51828: ARRAY
51829: PPUSH
51830: CALL_OW 250
51834: PPUSH
51835: LD_VAR 0 1
51839: PUSH
51840: LD_INT 1
51842: ARRAY
51843: PPUSH
51844: CALL_OW 251
51848: PPUSH
51849: LD_INT 70
51851: PPUSH
51852: CALL_OW 495
// end ;
51856: PPOPN 1
51858: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
51859: LD_EXP 34
51863: PUSH
51864: LD_EXP 68
51868: AND
51869: IFFALSE 52080
51871: GO 51873
51873: DISABLE
51874: LD_INT 0
51876: PPUSH
51877: PPUSH
51878: PPUSH
51879: PPUSH
51880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51881: LD_ADDR_VAR 0 5
51885: PUSH
51886: LD_INT 22
51888: PUSH
51889: LD_OWVAR 2
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 21
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PPUSH
51912: CALL_OW 69
51916: ST_TO_ADDR
// if not tmp then
51917: LD_VAR 0 5
51921: NOT
51922: IFFALSE 51926
// exit ;
51924: GO 52080
// for i in tmp do
51926: LD_ADDR_VAR 0 1
51930: PUSH
51931: LD_VAR 0 5
51935: PUSH
51936: FOR_IN
51937: IFFALSE 52078
// begin d := rand ( 0 , 5 ) ;
51939: LD_ADDR_VAR 0 4
51943: PUSH
51944: LD_INT 0
51946: PPUSH
51947: LD_INT 5
51949: PPUSH
51950: CALL_OW 12
51954: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
51955: LD_ADDR_VAR 0 2
51959: PUSH
51960: LD_VAR 0 1
51964: PPUSH
51965: CALL_OW 250
51969: PPUSH
51970: LD_VAR 0 4
51974: PPUSH
51975: LD_INT 3
51977: PPUSH
51978: LD_INT 12
51980: PPUSH
51981: CALL_OW 12
51985: PPUSH
51986: CALL_OW 272
51990: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
51991: LD_ADDR_VAR 0 3
51995: PUSH
51996: LD_VAR 0 1
52000: PPUSH
52001: CALL_OW 251
52005: PPUSH
52006: LD_VAR 0 4
52010: PPUSH
52011: LD_INT 3
52013: PPUSH
52014: LD_INT 12
52016: PPUSH
52017: CALL_OW 12
52021: PPUSH
52022: CALL_OW 273
52026: ST_TO_ADDR
// if ValidHex ( x , y ) then
52027: LD_VAR 0 2
52031: PPUSH
52032: LD_VAR 0 3
52036: PPUSH
52037: CALL_OW 488
52041: IFFALSE 52076
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
52043: LD_VAR 0 1
52047: PPUSH
52048: LD_VAR 0 2
52052: PPUSH
52053: LD_VAR 0 3
52057: PPUSH
52058: LD_INT 3
52060: PPUSH
52061: LD_INT 6
52063: PPUSH
52064: CALL_OW 12
52068: PPUSH
52069: LD_INT 1
52071: PPUSH
52072: CALL_OW 483
// end ;
52076: GO 51936
52078: POP
52079: POP
// end ;
52080: PPOPN 5
52082: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
52083: LD_EXP 34
52087: PUSH
52088: LD_EXP 69
52092: AND
52093: IFFALSE 52187
52095: GO 52097
52097: DISABLE
52098: LD_INT 0
52100: PPUSH
52101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
52102: LD_ADDR_VAR 0 2
52106: PUSH
52107: LD_INT 22
52109: PUSH
52110: LD_OWVAR 2
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 32
52121: PUSH
52122: LD_INT 1
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 21
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: LIST
52143: PPUSH
52144: CALL_OW 69
52148: ST_TO_ADDR
// if not tmp then
52149: LD_VAR 0 2
52153: NOT
52154: IFFALSE 52158
// exit ;
52156: GO 52187
// for i in tmp do
52158: LD_ADDR_VAR 0 1
52162: PUSH
52163: LD_VAR 0 2
52167: PUSH
52168: FOR_IN
52169: IFFALSE 52185
// SetFuel ( i , 0 ) ;
52171: LD_VAR 0 1
52175: PPUSH
52176: LD_INT 0
52178: PPUSH
52179: CALL_OW 240
52183: GO 52168
52185: POP
52186: POP
// end ;
52187: PPOPN 2
52189: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
52190: LD_EXP 34
52194: PUSH
52195: LD_EXP 70
52199: AND
52200: IFFALSE 52266
52202: GO 52204
52204: DISABLE
52205: LD_INT 0
52207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52208: LD_ADDR_VAR 0 1
52212: PUSH
52213: LD_INT 22
52215: PUSH
52216: LD_OWVAR 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 30
52227: PUSH
52228: LD_INT 29
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PPUSH
52239: CALL_OW 69
52243: ST_TO_ADDR
// if not tmp then
52244: LD_VAR 0 1
52248: NOT
52249: IFFALSE 52253
// exit ;
52251: GO 52266
// DestroyUnit ( tmp [ 1 ] ) ;
52253: LD_VAR 0 1
52257: PUSH
52258: LD_INT 1
52260: ARRAY
52261: PPUSH
52262: CALL_OW 65
// end ;
52266: PPOPN 1
52268: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
52269: LD_EXP 34
52273: PUSH
52274: LD_EXP 72
52278: AND
52279: IFFALSE 52408
52281: GO 52283
52283: DISABLE
52284: LD_INT 0
52286: PPUSH
// begin uc_side := 0 ;
52287: LD_ADDR_OWVAR 20
52291: PUSH
52292: LD_INT 0
52294: ST_TO_ADDR
// uc_nation := nation_arabian ;
52295: LD_ADDR_OWVAR 21
52299: PUSH
52300: LD_INT 2
52302: ST_TO_ADDR
// hc_gallery :=  ;
52303: LD_ADDR_OWVAR 33
52307: PUSH
52308: LD_STRING 
52310: ST_TO_ADDR
// hc_name :=  ;
52311: LD_ADDR_OWVAR 26
52315: PUSH
52316: LD_STRING 
52318: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
52319: LD_INT 1
52321: PPUSH
52322: LD_INT 11
52324: PPUSH
52325: LD_INT 10
52327: PPUSH
52328: CALL_OW 380
// un := CreateHuman ;
52332: LD_ADDR_VAR 0 1
52336: PUSH
52337: CALL_OW 44
52341: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
52342: LD_VAR 0 1
52346: PPUSH
52347: LD_INT 1
52349: PPUSH
52350: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
52354: LD_INT 35
52356: PPUSH
52357: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
52361: LD_VAR 0 1
52365: PPUSH
52366: LD_INT 22
52368: PUSH
52369: LD_OWVAR 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PPUSH
52378: CALL_OW 69
52382: PPUSH
52383: LD_VAR 0 1
52387: PPUSH
52388: CALL_OW 74
52392: PPUSH
52393: CALL_OW 115
// until IsDead ( un ) ;
52397: LD_VAR 0 1
52401: PPUSH
52402: CALL_OW 301
52406: IFFALSE 52354
// end ;
52408: PPOPN 1
52410: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
52411: LD_EXP 34
52415: PUSH
52416: LD_EXP 74
52420: AND
52421: IFFALSE 52433
52423: GO 52425
52425: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
52426: LD_STRING earthquake(getX(game), 0, 32)
52428: PPUSH
52429: CALL_OW 559
52433: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
52434: LD_EXP 34
52438: PUSH
52439: LD_EXP 75
52443: AND
52444: IFFALSE 52535
52446: GO 52448
52448: DISABLE
52449: LD_INT 0
52451: PPUSH
// begin enable ;
52452: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
52453: LD_ADDR_VAR 0 1
52457: PUSH
52458: LD_INT 22
52460: PUSH
52461: LD_OWVAR 2
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 21
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 33
52482: PUSH
52483: LD_INT 3
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: PPUSH
52495: CALL_OW 69
52499: ST_TO_ADDR
// if not tmp then
52500: LD_VAR 0 1
52504: NOT
52505: IFFALSE 52509
// exit ;
52507: GO 52535
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52509: LD_VAR 0 1
52513: PUSH
52514: LD_INT 1
52516: PPUSH
52517: LD_VAR 0 1
52521: PPUSH
52522: CALL_OW 12
52526: ARRAY
52527: PPUSH
52528: LD_INT 1
52530: PPUSH
52531: CALL_OW 234
// end ;
52535: PPOPN 1
52537: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
52538: LD_EXP 34
52542: PUSH
52543: LD_EXP 76
52547: AND
52548: IFFALSE 52689
52550: GO 52552
52552: DISABLE
52553: LD_INT 0
52555: PPUSH
52556: PPUSH
52557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52558: LD_ADDR_VAR 0 3
52562: PUSH
52563: LD_INT 22
52565: PUSH
52566: LD_OWVAR 2
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 25
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PPUSH
52589: CALL_OW 69
52593: ST_TO_ADDR
// if not tmp then
52594: LD_VAR 0 3
52598: NOT
52599: IFFALSE 52603
// exit ;
52601: GO 52689
// un := tmp [ rand ( 1 , tmp ) ] ;
52603: LD_ADDR_VAR 0 2
52607: PUSH
52608: LD_VAR 0 3
52612: PUSH
52613: LD_INT 1
52615: PPUSH
52616: LD_VAR 0 3
52620: PPUSH
52621: CALL_OW 12
52625: ARRAY
52626: ST_TO_ADDR
// if Crawls ( un ) then
52627: LD_VAR 0 2
52631: PPUSH
52632: CALL_OW 318
52636: IFFALSE 52647
// ComWalk ( un ) ;
52638: LD_VAR 0 2
52642: PPUSH
52643: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
52647: LD_VAR 0 2
52651: PPUSH
52652: LD_INT 9
52654: PPUSH
52655: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
52659: LD_INT 28
52661: PPUSH
52662: LD_OWVAR 2
52666: PPUSH
52667: LD_INT 2
52669: PPUSH
52670: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
52674: LD_INT 29
52676: PPUSH
52677: LD_OWVAR 2
52681: PPUSH
52682: LD_INT 2
52684: PPUSH
52685: CALL_OW 322
// end ;
52689: PPOPN 3
52691: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
52692: LD_EXP 34
52696: PUSH
52697: LD_EXP 77
52701: AND
52702: IFFALSE 52813
52704: GO 52706
52706: DISABLE
52707: LD_INT 0
52709: PPUSH
52710: PPUSH
52711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52712: LD_ADDR_VAR 0 3
52716: PUSH
52717: LD_INT 22
52719: PUSH
52720: LD_OWVAR 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 25
52731: PUSH
52732: LD_INT 1
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PPUSH
52743: CALL_OW 69
52747: ST_TO_ADDR
// if not tmp then
52748: LD_VAR 0 3
52752: NOT
52753: IFFALSE 52757
// exit ;
52755: GO 52813
// un := tmp [ rand ( 1 , tmp ) ] ;
52757: LD_ADDR_VAR 0 2
52761: PUSH
52762: LD_VAR 0 3
52766: PUSH
52767: LD_INT 1
52769: PPUSH
52770: LD_VAR 0 3
52774: PPUSH
52775: CALL_OW 12
52779: ARRAY
52780: ST_TO_ADDR
// if Crawls ( un ) then
52781: LD_VAR 0 2
52785: PPUSH
52786: CALL_OW 318
52790: IFFALSE 52801
// ComWalk ( un ) ;
52792: LD_VAR 0 2
52796: PPUSH
52797: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52801: LD_VAR 0 2
52805: PPUSH
52806: LD_INT 8
52808: PPUSH
52809: CALL_OW 336
// end ;
52813: PPOPN 3
52815: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
52816: LD_EXP 34
52820: PUSH
52821: LD_EXP 78
52825: AND
52826: IFFALSE 52970
52828: GO 52830
52830: DISABLE
52831: LD_INT 0
52833: PPUSH
52834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
52835: LD_ADDR_VAR 0 2
52839: PUSH
52840: LD_INT 22
52842: PUSH
52843: LD_OWVAR 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 21
52854: PUSH
52855: LD_INT 2
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 34
52867: PUSH
52868: LD_INT 12
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 34
52877: PUSH
52878: LD_INT 51
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 34
52887: PUSH
52888: LD_INT 32
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: LIST
52905: PPUSH
52906: CALL_OW 69
52910: ST_TO_ADDR
// if not tmp then
52911: LD_VAR 0 2
52915: NOT
52916: IFFALSE 52920
// exit ;
52918: GO 52970
// for i in tmp do
52920: LD_ADDR_VAR 0 1
52924: PUSH
52925: LD_VAR 0 2
52929: PUSH
52930: FOR_IN
52931: IFFALSE 52968
// if GetCargo ( i , mat_artifact ) = 0 then
52933: LD_VAR 0 1
52937: PPUSH
52938: LD_INT 4
52940: PPUSH
52941: CALL_OW 289
52945: PUSH
52946: LD_INT 0
52948: EQUAL
52949: IFFALSE 52966
// SetCargo ( i , mat_siberit , 100 ) ;
52951: LD_VAR 0 1
52955: PPUSH
52956: LD_INT 3
52958: PPUSH
52959: LD_INT 100
52961: PPUSH
52962: CALL_OW 290
52966: GO 52930
52968: POP
52969: POP
// end ;
52970: PPOPN 2
52972: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
52973: LD_EXP 34
52977: PUSH
52978: LD_EXP 79
52982: AND
52983: IFFALSE 53166
52985: GO 52987
52987: DISABLE
52988: LD_INT 0
52990: PPUSH
52991: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
52992: LD_ADDR_VAR 0 2
52996: PUSH
52997: LD_INT 22
52999: PUSH
53000: LD_OWVAR 2
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PPUSH
53009: CALL_OW 69
53013: ST_TO_ADDR
// if not tmp then
53014: LD_VAR 0 2
53018: NOT
53019: IFFALSE 53023
// exit ;
53021: GO 53166
// for i := 1 to 2 do
53023: LD_ADDR_VAR 0 1
53027: PUSH
53028: DOUBLE
53029: LD_INT 1
53031: DEC
53032: ST_TO_ADDR
53033: LD_INT 2
53035: PUSH
53036: FOR_TO
53037: IFFALSE 53164
// begin uc_side := your_side ;
53039: LD_ADDR_OWVAR 20
53043: PUSH
53044: LD_OWVAR 2
53048: ST_TO_ADDR
// uc_nation := nation_american ;
53049: LD_ADDR_OWVAR 21
53053: PUSH
53054: LD_INT 1
53056: ST_TO_ADDR
// vc_chassis := us_morphling ;
53057: LD_ADDR_OWVAR 37
53061: PUSH
53062: LD_INT 5
53064: ST_TO_ADDR
// vc_engine := engine_siberite ;
53065: LD_ADDR_OWVAR 39
53069: PUSH
53070: LD_INT 3
53072: ST_TO_ADDR
// vc_control := control_computer ;
53073: LD_ADDR_OWVAR 38
53077: PUSH
53078: LD_INT 3
53080: ST_TO_ADDR
// vc_weapon := us_double_laser ;
53081: LD_ADDR_OWVAR 40
53085: PUSH
53086: LD_INT 10
53088: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
53089: LD_VAR 0 2
53093: PUSH
53094: LD_INT 1
53096: ARRAY
53097: PPUSH
53098: CALL_OW 310
53102: NOT
53103: IFFALSE 53150
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
53105: CALL_OW 45
53109: PPUSH
53110: LD_VAR 0 2
53114: PUSH
53115: LD_INT 1
53117: ARRAY
53118: PPUSH
53119: CALL_OW 250
53123: PPUSH
53124: LD_VAR 0 2
53128: PUSH
53129: LD_INT 1
53131: ARRAY
53132: PPUSH
53133: CALL_OW 251
53137: PPUSH
53138: LD_INT 12
53140: PPUSH
53141: LD_INT 1
53143: PPUSH
53144: CALL_OW 50
53148: GO 53162
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
53150: CALL_OW 45
53154: PPUSH
53155: LD_INT 1
53157: PPUSH
53158: CALL_OW 51
// end ;
53162: GO 53036
53164: POP
53165: POP
// end ;
53166: PPOPN 2
53168: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
53169: LD_EXP 34
53173: PUSH
53174: LD_EXP 80
53178: AND
53179: IFFALSE 53401
53181: GO 53183
53183: DISABLE
53184: LD_INT 0
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
53192: LD_ADDR_VAR 0 6
53196: PUSH
53197: LD_INT 22
53199: PUSH
53200: LD_OWVAR 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 21
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 23
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: PPUSH
53241: CALL_OW 69
53245: ST_TO_ADDR
// if not tmp then
53246: LD_VAR 0 6
53250: NOT
53251: IFFALSE 53255
// exit ;
53253: GO 53401
// s1 := rand ( 1 , 4 ) ;
53255: LD_ADDR_VAR 0 2
53259: PUSH
53260: LD_INT 1
53262: PPUSH
53263: LD_INT 4
53265: PPUSH
53266: CALL_OW 12
53270: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
53271: LD_ADDR_VAR 0 4
53275: PUSH
53276: LD_VAR 0 6
53280: PUSH
53281: LD_INT 1
53283: ARRAY
53284: PPUSH
53285: LD_VAR 0 2
53289: PPUSH
53290: CALL_OW 259
53294: ST_TO_ADDR
// if s1 = 1 then
53295: LD_VAR 0 2
53299: PUSH
53300: LD_INT 1
53302: EQUAL
53303: IFFALSE 53323
// s2 := rand ( 2 , 4 ) else
53305: LD_ADDR_VAR 0 3
53309: PUSH
53310: LD_INT 2
53312: PPUSH
53313: LD_INT 4
53315: PPUSH
53316: CALL_OW 12
53320: ST_TO_ADDR
53321: GO 53331
// s2 := 1 ;
53323: LD_ADDR_VAR 0 3
53327: PUSH
53328: LD_INT 1
53330: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
53331: LD_ADDR_VAR 0 5
53335: PUSH
53336: LD_VAR 0 6
53340: PUSH
53341: LD_INT 1
53343: ARRAY
53344: PPUSH
53345: LD_VAR 0 3
53349: PPUSH
53350: CALL_OW 259
53354: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
53355: LD_VAR 0 6
53359: PUSH
53360: LD_INT 1
53362: ARRAY
53363: PPUSH
53364: LD_VAR 0 2
53368: PPUSH
53369: LD_VAR 0 5
53373: PPUSH
53374: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
53378: LD_VAR 0 6
53382: PUSH
53383: LD_INT 1
53385: ARRAY
53386: PPUSH
53387: LD_VAR 0 3
53391: PPUSH
53392: LD_VAR 0 4
53396: PPUSH
53397: CALL_OW 237
// end ;
53401: PPOPN 6
53403: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
53404: LD_EXP 34
53408: PUSH
53409: LD_EXP 81
53413: AND
53414: IFFALSE 53493
53416: GO 53418
53418: DISABLE
53419: LD_INT 0
53421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
53422: LD_ADDR_VAR 0 1
53426: PUSH
53427: LD_INT 22
53429: PUSH
53430: LD_OWVAR 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 30
53441: PUSH
53442: LD_INT 3
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PPUSH
53453: CALL_OW 69
53457: ST_TO_ADDR
// if not tmp then
53458: LD_VAR 0 1
53462: NOT
53463: IFFALSE 53467
// exit ;
53465: GO 53493
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
53467: LD_VAR 0 1
53471: PUSH
53472: LD_INT 1
53474: PPUSH
53475: LD_VAR 0 1
53479: PPUSH
53480: CALL_OW 12
53484: ARRAY
53485: PPUSH
53486: LD_INT 1
53488: PPUSH
53489: CALL_OW 234
// end ;
53493: PPOPN 1
53495: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
53496: LD_EXP 34
53500: PUSH
53501: LD_EXP 82
53505: AND
53506: IFFALSE 53618
53508: GO 53510
53510: DISABLE
53511: LD_INT 0
53513: PPUSH
53514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
53515: LD_ADDR_VAR 0 2
53519: PUSH
53520: LD_INT 22
53522: PUSH
53523: LD_OWVAR 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: PUSH
53535: LD_INT 30
53537: PUSH
53538: LD_INT 27
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 30
53547: PUSH
53548: LD_INT 26
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 30
53557: PUSH
53558: LD_INT 28
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PPUSH
53575: CALL_OW 69
53579: ST_TO_ADDR
// if not tmp then
53580: LD_VAR 0 2
53584: NOT
53585: IFFALSE 53589
// exit ;
53587: GO 53618
// for i in tmp do
53589: LD_ADDR_VAR 0 1
53593: PUSH
53594: LD_VAR 0 2
53598: PUSH
53599: FOR_IN
53600: IFFALSE 53616
// SetLives ( i , 1 ) ;
53602: LD_VAR 0 1
53606: PPUSH
53607: LD_INT 1
53609: PPUSH
53610: CALL_OW 234
53614: GO 53599
53616: POP
53617: POP
// end ;
53618: PPOPN 2
53620: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
53621: LD_EXP 34
53625: PUSH
53626: LD_EXP 83
53630: AND
53631: IFFALSE 53918
53633: GO 53635
53635: DISABLE
53636: LD_INT 0
53638: PPUSH
53639: PPUSH
53640: PPUSH
// begin i := rand ( 1 , 7 ) ;
53641: LD_ADDR_VAR 0 1
53645: PUSH
53646: LD_INT 1
53648: PPUSH
53649: LD_INT 7
53651: PPUSH
53652: CALL_OW 12
53656: ST_TO_ADDR
// case i of 1 :
53657: LD_VAR 0 1
53661: PUSH
53662: LD_INT 1
53664: DOUBLE
53665: EQUAL
53666: IFTRUE 53670
53668: GO 53680
53670: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
53671: LD_STRING earthquake(getX(game), 0, 32)
53673: PPUSH
53674: CALL_OW 559
53678: GO 53918
53680: LD_INT 2
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53688
53686: GO 53702
53688: POP
// begin ToLua ( displayStucuk(); ) ;
53689: LD_STRING displayStucuk();
53691: PPUSH
53692: CALL_OW 559
// ResetFog ;
53696: CALL_OW 335
// end ; 3 :
53700: GO 53918
53702: LD_INT 3
53704: DOUBLE
53705: EQUAL
53706: IFTRUE 53710
53708: GO 53814
53710: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
53711: LD_ADDR_VAR 0 2
53715: PUSH
53716: LD_INT 22
53718: PUSH
53719: LD_OWVAR 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 25
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PPUSH
53742: CALL_OW 69
53746: ST_TO_ADDR
// if not tmp then
53747: LD_VAR 0 2
53751: NOT
53752: IFFALSE 53756
// exit ;
53754: GO 53918
// un := tmp [ rand ( 1 , tmp ) ] ;
53756: LD_ADDR_VAR 0 3
53760: PUSH
53761: LD_VAR 0 2
53765: PUSH
53766: LD_INT 1
53768: PPUSH
53769: LD_VAR 0 2
53773: PPUSH
53774: CALL_OW 12
53778: ARRAY
53779: ST_TO_ADDR
// if Crawls ( un ) then
53780: LD_VAR 0 3
53784: PPUSH
53785: CALL_OW 318
53789: IFFALSE 53800
// ComWalk ( un ) ;
53791: LD_VAR 0 3
53795: PPUSH
53796: CALL_OW 138
// SetClass ( un , class_mortar ) ;
53800: LD_VAR 0 3
53804: PPUSH
53805: LD_INT 8
53807: PPUSH
53808: CALL_OW 336
// end ; 4 :
53812: GO 53918
53814: LD_INT 4
53816: DOUBLE
53817: EQUAL
53818: IFTRUE 53822
53820: GO 53896
53822: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53823: LD_ADDR_VAR 0 2
53827: PUSH
53828: LD_INT 22
53830: PUSH
53831: LD_OWVAR 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 30
53842: PUSH
53843: LD_INT 29
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PPUSH
53854: CALL_OW 69
53858: ST_TO_ADDR
// if not tmp then
53859: LD_VAR 0 2
53863: NOT
53864: IFFALSE 53868
// exit ;
53866: GO 53918
// CenterNowOnUnits ( tmp [ 1 ] ) ;
53868: LD_VAR 0 2
53872: PUSH
53873: LD_INT 1
53875: ARRAY
53876: PPUSH
53877: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
53881: LD_VAR 0 2
53885: PUSH
53886: LD_INT 1
53888: ARRAY
53889: PPUSH
53890: CALL_OW 65
// end ; 5 .. 7 :
53894: GO 53918
53896: LD_INT 5
53898: DOUBLE
53899: GREATEREQUAL
53900: IFFALSE 53908
53902: LD_INT 7
53904: DOUBLE
53905: LESSEQUAL
53906: IFTRUE 53910
53908: GO 53917
53910: POP
// StreamSibBomb ; end ;
53911: CALL 50155 0 0
53915: GO 53918
53917: POP
// end ;
53918: PPOPN 3
53920: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
53921: LD_EXP 34
53925: PUSH
53926: LD_EXP 84
53930: AND
53931: IFFALSE 54087
53933: GO 53935
53935: DISABLE
53936: LD_INT 0
53938: PPUSH
53939: PPUSH
53940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
53941: LD_ADDR_VAR 0 2
53945: PUSH
53946: LD_INT 81
53948: PUSH
53949: LD_OWVAR 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: LD_INT 21
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 21
53973: PUSH
53974: LD_INT 2
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PPUSH
53990: CALL_OW 69
53994: ST_TO_ADDR
// if not tmp then
53995: LD_VAR 0 2
53999: NOT
54000: IFFALSE 54004
// exit ;
54002: GO 54087
// p := 0 ;
54004: LD_ADDR_VAR 0 3
54008: PUSH
54009: LD_INT 0
54011: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54012: LD_INT 35
54014: PPUSH
54015: CALL_OW 67
// p := p + 1 ;
54019: LD_ADDR_VAR 0 3
54023: PUSH
54024: LD_VAR 0 3
54028: PUSH
54029: LD_INT 1
54031: PLUS
54032: ST_TO_ADDR
// for i in tmp do
54033: LD_ADDR_VAR 0 1
54037: PUSH
54038: LD_VAR 0 2
54042: PUSH
54043: FOR_IN
54044: IFFALSE 54075
// if GetLives ( i ) < 1000 then
54046: LD_VAR 0 1
54050: PPUSH
54051: CALL_OW 256
54055: PUSH
54056: LD_INT 1000
54058: LESS
54059: IFFALSE 54073
// SetLives ( i , 1000 ) ;
54061: LD_VAR 0 1
54065: PPUSH
54066: LD_INT 1000
54068: PPUSH
54069: CALL_OW 234
54073: GO 54043
54075: POP
54076: POP
// until p > 20 ;
54077: LD_VAR 0 3
54081: PUSH
54082: LD_INT 20
54084: GREATER
54085: IFFALSE 54012
// end ;
54087: PPOPN 3
54089: END
// every 0 0$1 trigger StreamModeActive and sTime do
54090: LD_EXP 34
54094: PUSH
54095: LD_EXP 85
54099: AND
54100: IFFALSE 54135
54102: GO 54104
54104: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
54105: LD_INT 28
54107: PPUSH
54108: LD_OWVAR 2
54112: PPUSH
54113: LD_INT 2
54115: PPUSH
54116: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
54120: LD_INT 30
54122: PPUSH
54123: LD_OWVAR 2
54127: PPUSH
54128: LD_INT 2
54130: PPUSH
54131: CALL_OW 322
// end ;
54135: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
54136: LD_EXP 34
54140: PUSH
54141: LD_EXP 86
54145: AND
54146: IFFALSE 54267
54148: GO 54150
54150: DISABLE
54151: LD_INT 0
54153: PPUSH
54154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54155: LD_ADDR_VAR 0 2
54159: PUSH
54160: LD_INT 22
54162: PUSH
54163: LD_OWVAR 2
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 21
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: LD_INT 23
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: LIST
54203: PPUSH
54204: CALL_OW 69
54208: ST_TO_ADDR
// if not tmp then
54209: LD_VAR 0 2
54213: NOT
54214: IFFALSE 54218
// exit ;
54216: GO 54267
// for i in tmp do
54218: LD_ADDR_VAR 0 1
54222: PUSH
54223: LD_VAR 0 2
54227: PUSH
54228: FOR_IN
54229: IFFALSE 54265
// begin if Crawls ( i ) then
54231: LD_VAR 0 1
54235: PPUSH
54236: CALL_OW 318
54240: IFFALSE 54251
// ComWalk ( i ) ;
54242: LD_VAR 0 1
54246: PPUSH
54247: CALL_OW 138
// SetClass ( i , 2 ) ;
54251: LD_VAR 0 1
54255: PPUSH
54256: LD_INT 2
54258: PPUSH
54259: CALL_OW 336
// end ;
54263: GO 54228
54265: POP
54266: POP
// end ;
54267: PPOPN 2
54269: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
54270: LD_EXP 34
54274: PUSH
54275: LD_EXP 87
54279: AND
54280: IFFALSE 54568
54282: GO 54284
54284: DISABLE
54285: LD_INT 0
54287: PPUSH
54288: PPUSH
54289: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
54290: LD_OWVAR 2
54294: PPUSH
54295: LD_INT 9
54297: PPUSH
54298: LD_INT 1
54300: PPUSH
54301: LD_INT 1
54303: PPUSH
54304: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
54308: LD_INT 9
54310: PPUSH
54311: LD_OWVAR 2
54315: PPUSH
54316: CALL_OW 343
// uc_side := 9 ;
54320: LD_ADDR_OWVAR 20
54324: PUSH
54325: LD_INT 9
54327: ST_TO_ADDR
// uc_nation := 2 ;
54328: LD_ADDR_OWVAR 21
54332: PUSH
54333: LD_INT 2
54335: ST_TO_ADDR
// hc_name := Dark Warrior ;
54336: LD_ADDR_OWVAR 26
54340: PUSH
54341: LD_STRING Dark Warrior
54343: ST_TO_ADDR
// hc_gallery :=  ;
54344: LD_ADDR_OWVAR 33
54348: PUSH
54349: LD_STRING 
54351: ST_TO_ADDR
// hc_noskilllimit := true ;
54352: LD_ADDR_OWVAR 76
54356: PUSH
54357: LD_INT 1
54359: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
54360: LD_ADDR_OWVAR 31
54364: PUSH
54365: LD_INT 30
54367: PUSH
54368: LD_INT 30
54370: PUSH
54371: LD_INT 30
54373: PUSH
54374: LD_INT 30
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: ST_TO_ADDR
// un := CreateHuman ;
54383: LD_ADDR_VAR 0 3
54387: PUSH
54388: CALL_OW 44
54392: ST_TO_ADDR
// hc_noskilllimit := false ;
54393: LD_ADDR_OWVAR 76
54397: PUSH
54398: LD_INT 0
54400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
54401: LD_VAR 0 3
54405: PPUSH
54406: LD_INT 1
54408: PPUSH
54409: CALL_OW 51
// ToLua ( playRanger() ) ;
54413: LD_STRING playRanger()
54415: PPUSH
54416: CALL_OW 559
// p := 0 ;
54420: LD_ADDR_VAR 0 2
54424: PUSH
54425: LD_INT 0
54427: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
54428: LD_INT 35
54430: PPUSH
54431: CALL_OW 67
// p := p + 1 ;
54435: LD_ADDR_VAR 0 2
54439: PUSH
54440: LD_VAR 0 2
54444: PUSH
54445: LD_INT 1
54447: PLUS
54448: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
54449: LD_VAR 0 3
54453: PPUSH
54454: CALL_OW 256
54458: PUSH
54459: LD_INT 1000
54461: LESS
54462: IFFALSE 54476
// SetLives ( un , 1000 ) ;
54464: LD_VAR 0 3
54468: PPUSH
54469: LD_INT 1000
54471: PPUSH
54472: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
54476: LD_VAR 0 3
54480: PPUSH
54481: LD_INT 81
54483: PUSH
54484: LD_OWVAR 2
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 91
54495: PUSH
54496: LD_VAR 0 3
54500: PUSH
54501: LD_INT 30
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PPUSH
54513: CALL_OW 69
54517: PPUSH
54518: LD_VAR 0 3
54522: PPUSH
54523: CALL_OW 74
54527: PPUSH
54528: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
54532: LD_VAR 0 2
54536: PUSH
54537: LD_INT 80
54539: GREATER
54540: PUSH
54541: LD_VAR 0 3
54545: PPUSH
54546: CALL_OW 301
54550: OR
54551: IFFALSE 54428
// if un then
54553: LD_VAR 0 3
54557: IFFALSE 54568
// RemoveUnit ( un ) ;
54559: LD_VAR 0 3
54563: PPUSH
54564: CALL_OW 64
// end ;
54568: PPOPN 3
54570: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
54571: LD_EXP 88
54575: IFFALSE 54691
54577: GO 54579
54579: DISABLE
54580: LD_INT 0
54582: PPUSH
54583: PPUSH
54584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54585: LD_ADDR_VAR 0 2
54589: PUSH
54590: LD_INT 81
54592: PUSH
54593: LD_OWVAR 2
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 21
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PPUSH
54616: CALL_OW 69
54620: ST_TO_ADDR
// ToLua ( playComputer() ) ;
54621: LD_STRING playComputer()
54623: PPUSH
54624: CALL_OW 559
// if not tmp then
54628: LD_VAR 0 2
54632: NOT
54633: IFFALSE 54637
// exit ;
54635: GO 54691
// for i in tmp do
54637: LD_ADDR_VAR 0 1
54641: PUSH
54642: LD_VAR 0 2
54646: PUSH
54647: FOR_IN
54648: IFFALSE 54689
// for j := 1 to 4 do
54650: LD_ADDR_VAR 0 3
54654: PUSH
54655: DOUBLE
54656: LD_INT 1
54658: DEC
54659: ST_TO_ADDR
54660: LD_INT 4
54662: PUSH
54663: FOR_TO
54664: IFFALSE 54685
// SetSkill ( i , j , 10 ) ;
54666: LD_VAR 0 1
54670: PPUSH
54671: LD_VAR 0 3
54675: PPUSH
54676: LD_INT 10
54678: PPUSH
54679: CALL_OW 237
54683: GO 54663
54685: POP
54686: POP
54687: GO 54647
54689: POP
54690: POP
// end ;
54691: PPOPN 3
54693: END
// every 0 0$1 trigger s30 do var i , tmp ;
54694: LD_EXP 89
54698: IFFALSE 54767
54700: GO 54702
54702: DISABLE
54703: LD_INT 0
54705: PPUSH
54706: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54707: LD_ADDR_VAR 0 2
54711: PUSH
54712: LD_INT 22
54714: PUSH
54715: LD_OWVAR 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PPUSH
54724: CALL_OW 69
54728: ST_TO_ADDR
// if not tmp then
54729: LD_VAR 0 2
54733: NOT
54734: IFFALSE 54738
// exit ;
54736: GO 54767
// for i in tmp do
54738: LD_ADDR_VAR 0 1
54742: PUSH
54743: LD_VAR 0 2
54747: PUSH
54748: FOR_IN
54749: IFFALSE 54765
// SetLives ( i , 300 ) ;
54751: LD_VAR 0 1
54755: PPUSH
54756: LD_INT 300
54758: PPUSH
54759: CALL_OW 234
54763: GO 54748
54765: POP
54766: POP
// end ;
54767: PPOPN 2
54769: END
// every 0 0$1 trigger s60 do var i , tmp ;
54770: LD_EXP 90
54774: IFFALSE 54843
54776: GO 54778
54778: DISABLE
54779: LD_INT 0
54781: PPUSH
54782: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54783: LD_ADDR_VAR 0 2
54787: PUSH
54788: LD_INT 22
54790: PUSH
54791: LD_OWVAR 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PPUSH
54800: CALL_OW 69
54804: ST_TO_ADDR
// if not tmp then
54805: LD_VAR 0 2
54809: NOT
54810: IFFALSE 54814
// exit ;
54812: GO 54843
// for i in tmp do
54814: LD_ADDR_VAR 0 1
54818: PUSH
54819: LD_VAR 0 2
54823: PUSH
54824: FOR_IN
54825: IFFALSE 54841
// SetLives ( i , 600 ) ;
54827: LD_VAR 0 1
54831: PPUSH
54832: LD_INT 600
54834: PPUSH
54835: CALL_OW 234
54839: GO 54824
54841: POP
54842: POP
// end ;
54843: PPOPN 2
54845: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54846: LD_INT 0
54848: PPUSH
// case cmd of 301 :
54849: LD_VAR 0 1
54853: PUSH
54854: LD_INT 301
54856: DOUBLE
54857: EQUAL
54858: IFTRUE 54862
54860: GO 54894
54862: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
54863: LD_VAR 0 6
54867: PPUSH
54868: LD_VAR 0 7
54872: PPUSH
54873: LD_VAR 0 8
54877: PPUSH
54878: LD_VAR 0 4
54882: PPUSH
54883: LD_VAR 0 5
54887: PPUSH
54888: CALL 56095 0 5
54892: GO 55015
54894: LD_INT 302
54896: DOUBLE
54897: EQUAL
54898: IFTRUE 54902
54900: GO 54939
54902: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
54903: LD_VAR 0 6
54907: PPUSH
54908: LD_VAR 0 7
54912: PPUSH
54913: LD_VAR 0 8
54917: PPUSH
54918: LD_VAR 0 9
54922: PPUSH
54923: LD_VAR 0 4
54927: PPUSH
54928: LD_VAR 0 5
54932: PPUSH
54933: CALL 56186 0 6
54937: GO 55015
54939: LD_INT 303
54941: DOUBLE
54942: EQUAL
54943: IFTRUE 54947
54945: GO 54984
54947: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
54948: LD_VAR 0 6
54952: PPUSH
54953: LD_VAR 0 7
54957: PPUSH
54958: LD_VAR 0 8
54962: PPUSH
54963: LD_VAR 0 9
54967: PPUSH
54968: LD_VAR 0 4
54972: PPUSH
54973: LD_VAR 0 5
54977: PPUSH
54978: CALL 55020 0 6
54982: GO 55015
54984: LD_INT 304
54986: DOUBLE
54987: EQUAL
54988: IFTRUE 54992
54990: GO 55014
54992: POP
// hHackTeleport ( unit , x , y ) ; end ;
54993: LD_VAR 0 2
54997: PPUSH
54998: LD_VAR 0 4
55002: PPUSH
55003: LD_VAR 0 5
55007: PPUSH
55008: CALL 56779 0 3
55012: GO 55015
55014: POP
// end ;
55015: LD_VAR 0 12
55019: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
55020: LD_INT 0
55022: PPUSH
55023: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
55024: LD_VAR 0 1
55028: PUSH
55029: LD_INT 1
55031: LESS
55032: PUSH
55033: LD_VAR 0 1
55037: PUSH
55038: LD_INT 3
55040: GREATER
55041: OR
55042: PUSH
55043: LD_VAR 0 5
55047: PPUSH
55048: LD_VAR 0 6
55052: PPUSH
55053: CALL_OW 428
55057: OR
55058: IFFALSE 55062
// exit ;
55060: GO 55782
// uc_side := your_side ;
55062: LD_ADDR_OWVAR 20
55066: PUSH
55067: LD_OWVAR 2
55071: ST_TO_ADDR
// uc_nation := nation ;
55072: LD_ADDR_OWVAR 21
55076: PUSH
55077: LD_VAR 0 1
55081: ST_TO_ADDR
// bc_level = 1 ;
55082: LD_ADDR_OWVAR 43
55086: PUSH
55087: LD_INT 1
55089: ST_TO_ADDR
// case btype of 1 :
55090: LD_VAR 0 2
55094: PUSH
55095: LD_INT 1
55097: DOUBLE
55098: EQUAL
55099: IFTRUE 55103
55101: GO 55114
55103: POP
// bc_type := b_depot ; 2 :
55104: LD_ADDR_OWVAR 42
55108: PUSH
55109: LD_INT 0
55111: ST_TO_ADDR
55112: GO 55726
55114: LD_INT 2
55116: DOUBLE
55117: EQUAL
55118: IFTRUE 55122
55120: GO 55133
55122: POP
// bc_type := b_warehouse ; 3 :
55123: LD_ADDR_OWVAR 42
55127: PUSH
55128: LD_INT 1
55130: ST_TO_ADDR
55131: GO 55726
55133: LD_INT 3
55135: DOUBLE
55136: EQUAL
55137: IFTRUE 55141
55139: GO 55152
55141: POP
// bc_type := b_lab ; 4 .. 9 :
55142: LD_ADDR_OWVAR 42
55146: PUSH
55147: LD_INT 6
55149: ST_TO_ADDR
55150: GO 55726
55152: LD_INT 4
55154: DOUBLE
55155: GREATEREQUAL
55156: IFFALSE 55164
55158: LD_INT 9
55160: DOUBLE
55161: LESSEQUAL
55162: IFTRUE 55166
55164: GO 55218
55166: POP
// begin bc_type := b_lab_half ;
55167: LD_ADDR_OWVAR 42
55171: PUSH
55172: LD_INT 7
55174: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
55175: LD_ADDR_OWVAR 44
55179: PUSH
55180: LD_INT 10
55182: PUSH
55183: LD_INT 11
55185: PUSH
55186: LD_INT 12
55188: PUSH
55189: LD_INT 15
55191: PUSH
55192: LD_INT 14
55194: PUSH
55195: LD_INT 13
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: PUSH
55206: LD_VAR 0 2
55210: PUSH
55211: LD_INT 3
55213: MINUS
55214: ARRAY
55215: ST_TO_ADDR
// end ; 10 .. 13 :
55216: GO 55726
55218: LD_INT 10
55220: DOUBLE
55221: GREATEREQUAL
55222: IFFALSE 55230
55224: LD_INT 13
55226: DOUBLE
55227: LESSEQUAL
55228: IFTRUE 55232
55230: GO 55309
55232: POP
// begin bc_type := b_lab_full ;
55233: LD_ADDR_OWVAR 42
55237: PUSH
55238: LD_INT 8
55240: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
55241: LD_ADDR_OWVAR 44
55245: PUSH
55246: LD_INT 10
55248: PUSH
55249: LD_INT 12
55251: PUSH
55252: LD_INT 14
55254: PUSH
55255: LD_INT 13
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: PUSH
55264: LD_VAR 0 2
55268: PUSH
55269: LD_INT 9
55271: MINUS
55272: ARRAY
55273: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
55274: LD_ADDR_OWVAR 45
55278: PUSH
55279: LD_INT 11
55281: PUSH
55282: LD_INT 15
55284: PUSH
55285: LD_INT 12
55287: PUSH
55288: LD_INT 15
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: PUSH
55297: LD_VAR 0 2
55301: PUSH
55302: LD_INT 9
55304: MINUS
55305: ARRAY
55306: ST_TO_ADDR
// end ; 14 :
55307: GO 55726
55309: LD_INT 14
55311: DOUBLE
55312: EQUAL
55313: IFTRUE 55317
55315: GO 55328
55317: POP
// bc_type := b_workshop ; 15 :
55318: LD_ADDR_OWVAR 42
55322: PUSH
55323: LD_INT 2
55325: ST_TO_ADDR
55326: GO 55726
55328: LD_INT 15
55330: DOUBLE
55331: EQUAL
55332: IFTRUE 55336
55334: GO 55347
55336: POP
// bc_type := b_factory ; 16 :
55337: LD_ADDR_OWVAR 42
55341: PUSH
55342: LD_INT 3
55344: ST_TO_ADDR
55345: GO 55726
55347: LD_INT 16
55349: DOUBLE
55350: EQUAL
55351: IFTRUE 55355
55353: GO 55366
55355: POP
// bc_type := b_ext_gun ; 17 :
55356: LD_ADDR_OWVAR 42
55360: PUSH
55361: LD_INT 17
55363: ST_TO_ADDR
55364: GO 55726
55366: LD_INT 17
55368: DOUBLE
55369: EQUAL
55370: IFTRUE 55374
55372: GO 55402
55374: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
55375: LD_ADDR_OWVAR 42
55379: PUSH
55380: LD_INT 19
55382: PUSH
55383: LD_INT 23
55385: PUSH
55386: LD_INT 19
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: LIST
55393: PUSH
55394: LD_VAR 0 1
55398: ARRAY
55399: ST_TO_ADDR
55400: GO 55726
55402: LD_INT 18
55404: DOUBLE
55405: EQUAL
55406: IFTRUE 55410
55408: GO 55421
55410: POP
// bc_type := b_ext_radar ; 19 :
55411: LD_ADDR_OWVAR 42
55415: PUSH
55416: LD_INT 20
55418: ST_TO_ADDR
55419: GO 55726
55421: LD_INT 19
55423: DOUBLE
55424: EQUAL
55425: IFTRUE 55429
55427: GO 55440
55429: POP
// bc_type := b_ext_radio ; 20 :
55430: LD_ADDR_OWVAR 42
55434: PUSH
55435: LD_INT 22
55437: ST_TO_ADDR
55438: GO 55726
55440: LD_INT 20
55442: DOUBLE
55443: EQUAL
55444: IFTRUE 55448
55446: GO 55459
55448: POP
// bc_type := b_ext_siberium ; 21 :
55449: LD_ADDR_OWVAR 42
55453: PUSH
55454: LD_INT 21
55456: ST_TO_ADDR
55457: GO 55726
55459: LD_INT 21
55461: DOUBLE
55462: EQUAL
55463: IFTRUE 55467
55465: GO 55478
55467: POP
// bc_type := b_ext_computer ; 22 :
55468: LD_ADDR_OWVAR 42
55472: PUSH
55473: LD_INT 24
55475: ST_TO_ADDR
55476: GO 55726
55478: LD_INT 22
55480: DOUBLE
55481: EQUAL
55482: IFTRUE 55486
55484: GO 55497
55486: POP
// bc_type := b_ext_track ; 23 :
55487: LD_ADDR_OWVAR 42
55491: PUSH
55492: LD_INT 16
55494: ST_TO_ADDR
55495: GO 55726
55497: LD_INT 23
55499: DOUBLE
55500: EQUAL
55501: IFTRUE 55505
55503: GO 55516
55505: POP
// bc_type := b_ext_laser ; 24 :
55506: LD_ADDR_OWVAR 42
55510: PUSH
55511: LD_INT 25
55513: ST_TO_ADDR
55514: GO 55726
55516: LD_INT 24
55518: DOUBLE
55519: EQUAL
55520: IFTRUE 55524
55522: GO 55535
55524: POP
// bc_type := b_control_tower ; 25 :
55525: LD_ADDR_OWVAR 42
55529: PUSH
55530: LD_INT 36
55532: ST_TO_ADDR
55533: GO 55726
55535: LD_INT 25
55537: DOUBLE
55538: EQUAL
55539: IFTRUE 55543
55541: GO 55554
55543: POP
// bc_type := b_breastwork ; 26 :
55544: LD_ADDR_OWVAR 42
55548: PUSH
55549: LD_INT 31
55551: ST_TO_ADDR
55552: GO 55726
55554: LD_INT 26
55556: DOUBLE
55557: EQUAL
55558: IFTRUE 55562
55560: GO 55573
55562: POP
// bc_type := b_bunker ; 27 :
55563: LD_ADDR_OWVAR 42
55567: PUSH
55568: LD_INT 32
55570: ST_TO_ADDR
55571: GO 55726
55573: LD_INT 27
55575: DOUBLE
55576: EQUAL
55577: IFTRUE 55581
55579: GO 55592
55581: POP
// bc_type := b_turret ; 28 :
55582: LD_ADDR_OWVAR 42
55586: PUSH
55587: LD_INT 33
55589: ST_TO_ADDR
55590: GO 55726
55592: LD_INT 28
55594: DOUBLE
55595: EQUAL
55596: IFTRUE 55600
55598: GO 55611
55600: POP
// bc_type := b_armoury ; 29 :
55601: LD_ADDR_OWVAR 42
55605: PUSH
55606: LD_INT 4
55608: ST_TO_ADDR
55609: GO 55726
55611: LD_INT 29
55613: DOUBLE
55614: EQUAL
55615: IFTRUE 55619
55617: GO 55630
55619: POP
// bc_type := b_barracks ; 30 :
55620: LD_ADDR_OWVAR 42
55624: PUSH
55625: LD_INT 5
55627: ST_TO_ADDR
55628: GO 55726
55630: LD_INT 30
55632: DOUBLE
55633: EQUAL
55634: IFTRUE 55638
55636: GO 55649
55638: POP
// bc_type := b_solar_power ; 31 :
55639: LD_ADDR_OWVAR 42
55643: PUSH
55644: LD_INT 27
55646: ST_TO_ADDR
55647: GO 55726
55649: LD_INT 31
55651: DOUBLE
55652: EQUAL
55653: IFTRUE 55657
55655: GO 55668
55657: POP
// bc_type := b_oil_power ; 32 :
55658: LD_ADDR_OWVAR 42
55662: PUSH
55663: LD_INT 26
55665: ST_TO_ADDR
55666: GO 55726
55668: LD_INT 32
55670: DOUBLE
55671: EQUAL
55672: IFTRUE 55676
55674: GO 55687
55676: POP
// bc_type := b_siberite_power ; 33 :
55677: LD_ADDR_OWVAR 42
55681: PUSH
55682: LD_INT 28
55684: ST_TO_ADDR
55685: GO 55726
55687: LD_INT 33
55689: DOUBLE
55690: EQUAL
55691: IFTRUE 55695
55693: GO 55706
55695: POP
// bc_type := b_oil_mine ; 34 :
55696: LD_ADDR_OWVAR 42
55700: PUSH
55701: LD_INT 29
55703: ST_TO_ADDR
55704: GO 55726
55706: LD_INT 34
55708: DOUBLE
55709: EQUAL
55710: IFTRUE 55714
55712: GO 55725
55714: POP
// bc_type := b_siberite_mine ; end ;
55715: LD_ADDR_OWVAR 42
55719: PUSH
55720: LD_INT 30
55722: ST_TO_ADDR
55723: GO 55726
55725: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
55726: LD_ADDR_VAR 0 8
55730: PUSH
55731: LD_VAR 0 5
55735: PPUSH
55736: LD_VAR 0 6
55740: PPUSH
55741: LD_VAR 0 3
55745: PPUSH
55746: CALL_OW 47
55750: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
55751: LD_OWVAR 42
55755: PUSH
55756: LD_INT 32
55758: PUSH
55759: LD_INT 33
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: IN
55766: IFFALSE 55782
// PlaceWeaponTurret ( b , weapon ) ;
55768: LD_VAR 0 8
55772: PPUSH
55773: LD_VAR 0 4
55777: PPUSH
55778: CALL_OW 431
// end ;
55782: LD_VAR 0 7
55786: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
55787: LD_INT 0
55789: PPUSH
55790: PPUSH
55791: PPUSH
55792: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55793: LD_ADDR_VAR 0 4
55797: PUSH
55798: LD_INT 22
55800: PUSH
55801: LD_OWVAR 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 30
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 30
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PPUSH
55842: CALL_OW 69
55846: ST_TO_ADDR
// if not tmp then
55847: LD_VAR 0 4
55851: NOT
55852: IFFALSE 55856
// exit ;
55854: GO 55915
// for i in tmp do
55856: LD_ADDR_VAR 0 2
55860: PUSH
55861: LD_VAR 0 4
55865: PUSH
55866: FOR_IN
55867: IFFALSE 55913
// for j = 1 to 3 do
55869: LD_ADDR_VAR 0 3
55873: PUSH
55874: DOUBLE
55875: LD_INT 1
55877: DEC
55878: ST_TO_ADDR
55879: LD_INT 3
55881: PUSH
55882: FOR_TO
55883: IFFALSE 55909
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
55885: LD_VAR 0 2
55889: PPUSH
55890: CALL_OW 274
55894: PPUSH
55895: LD_VAR 0 3
55899: PPUSH
55900: LD_INT 99999
55902: PPUSH
55903: CALL_OW 277
55907: GO 55882
55909: POP
55910: POP
55911: GO 55866
55913: POP
55914: POP
// end ;
55915: LD_VAR 0 1
55919: RET
// export function hHackSetLevel10 ; var i , j ; begin
55920: LD_INT 0
55922: PPUSH
55923: PPUSH
55924: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55925: LD_ADDR_VAR 0 2
55929: PUSH
55930: LD_INT 21
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PPUSH
55940: CALL_OW 69
55944: PUSH
55945: FOR_IN
55946: IFFALSE 55998
// if IsSelected ( i ) then
55948: LD_VAR 0 2
55952: PPUSH
55953: CALL_OW 306
55957: IFFALSE 55996
// begin for j := 1 to 4 do
55959: LD_ADDR_VAR 0 3
55963: PUSH
55964: DOUBLE
55965: LD_INT 1
55967: DEC
55968: ST_TO_ADDR
55969: LD_INT 4
55971: PUSH
55972: FOR_TO
55973: IFFALSE 55994
// SetSkill ( i , j , 10 ) ;
55975: LD_VAR 0 2
55979: PPUSH
55980: LD_VAR 0 3
55984: PPUSH
55985: LD_INT 10
55987: PPUSH
55988: CALL_OW 237
55992: GO 55972
55994: POP
55995: POP
// end ;
55996: GO 55945
55998: POP
55999: POP
// end ;
56000: LD_VAR 0 1
56004: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
56005: LD_INT 0
56007: PPUSH
56008: PPUSH
56009: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
56010: LD_ADDR_VAR 0 2
56014: PUSH
56015: LD_INT 22
56017: PUSH
56018: LD_OWVAR 2
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 21
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PPUSH
56041: CALL_OW 69
56045: PUSH
56046: FOR_IN
56047: IFFALSE 56088
// begin for j := 1 to 4 do
56049: LD_ADDR_VAR 0 3
56053: PUSH
56054: DOUBLE
56055: LD_INT 1
56057: DEC
56058: ST_TO_ADDR
56059: LD_INT 4
56061: PUSH
56062: FOR_TO
56063: IFFALSE 56084
// SetSkill ( i , j , 10 ) ;
56065: LD_VAR 0 2
56069: PPUSH
56070: LD_VAR 0 3
56074: PPUSH
56075: LD_INT 10
56077: PPUSH
56078: CALL_OW 237
56082: GO 56062
56084: POP
56085: POP
// end ;
56086: GO 56046
56088: POP
56089: POP
// end ;
56090: LD_VAR 0 1
56094: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
56095: LD_INT 0
56097: PPUSH
// uc_side := your_side ;
56098: LD_ADDR_OWVAR 20
56102: PUSH
56103: LD_OWVAR 2
56107: ST_TO_ADDR
// uc_nation := nation ;
56108: LD_ADDR_OWVAR 21
56112: PUSH
56113: LD_VAR 0 1
56117: ST_TO_ADDR
// InitHc ;
56118: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
56122: LD_INT 0
56124: PPUSH
56125: LD_VAR 0 2
56129: PPUSH
56130: LD_VAR 0 3
56134: PPUSH
56135: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
56139: LD_VAR 0 4
56143: PPUSH
56144: LD_VAR 0 5
56148: PPUSH
56149: CALL_OW 428
56153: PUSH
56154: LD_INT 0
56156: EQUAL
56157: IFFALSE 56181
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
56159: CALL_OW 44
56163: PPUSH
56164: LD_VAR 0 4
56168: PPUSH
56169: LD_VAR 0 5
56173: PPUSH
56174: LD_INT 1
56176: PPUSH
56177: CALL_OW 48
// end ;
56181: LD_VAR 0 6
56185: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
56186: LD_INT 0
56188: PPUSH
56189: PPUSH
// uc_side := your_side ;
56190: LD_ADDR_OWVAR 20
56194: PUSH
56195: LD_OWVAR 2
56199: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
56200: LD_VAR 0 1
56204: PUSH
56205: LD_INT 1
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: LD_INT 4
56216: PUSH
56217: LD_INT 5
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: IN
56227: IFFALSE 56239
// uc_nation := nation_american else
56229: LD_ADDR_OWVAR 21
56233: PUSH
56234: LD_INT 1
56236: ST_TO_ADDR
56237: GO 56282
// if chassis in [ 11 , 12 , 13 , 14 ] then
56239: LD_VAR 0 1
56243: PUSH
56244: LD_INT 11
56246: PUSH
56247: LD_INT 12
56249: PUSH
56250: LD_INT 13
56252: PUSH
56253: LD_INT 14
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: IN
56262: IFFALSE 56274
// uc_nation := nation_arabian else
56264: LD_ADDR_OWVAR 21
56268: PUSH
56269: LD_INT 2
56271: ST_TO_ADDR
56272: GO 56282
// uc_nation := nation_russian ;
56274: LD_ADDR_OWVAR 21
56278: PUSH
56279: LD_INT 3
56281: ST_TO_ADDR
// vc_chassis := chassis ;
56282: LD_ADDR_OWVAR 37
56286: PUSH
56287: LD_VAR 0 1
56291: ST_TO_ADDR
// vc_engine := engine ;
56292: LD_ADDR_OWVAR 39
56296: PUSH
56297: LD_VAR 0 2
56301: ST_TO_ADDR
// vc_control := control ;
56302: LD_ADDR_OWVAR 38
56306: PUSH
56307: LD_VAR 0 3
56311: ST_TO_ADDR
// vc_weapon := weapon ;
56312: LD_ADDR_OWVAR 40
56316: PUSH
56317: LD_VAR 0 4
56321: ST_TO_ADDR
// un := CreateVehicle ;
56322: LD_ADDR_VAR 0 8
56326: PUSH
56327: CALL_OW 45
56331: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
56332: LD_VAR 0 8
56336: PPUSH
56337: LD_INT 0
56339: PPUSH
56340: LD_INT 5
56342: PPUSH
56343: CALL_OW 12
56347: PPUSH
56348: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
56352: LD_VAR 0 8
56356: PPUSH
56357: LD_VAR 0 5
56361: PPUSH
56362: LD_VAR 0 6
56366: PPUSH
56367: LD_INT 1
56369: PPUSH
56370: CALL_OW 48
// end ;
56374: LD_VAR 0 7
56378: RET
// export hInvincible ; every 1 do
56379: GO 56381
56381: DISABLE
// hInvincible := [ ] ;
56382: LD_ADDR_EXP 91
56386: PUSH
56387: EMPTY
56388: ST_TO_ADDR
56389: END
// every 10 do var i ;
56390: GO 56392
56392: DISABLE
56393: LD_INT 0
56395: PPUSH
// begin enable ;
56396: ENABLE
// if not hInvincible then
56397: LD_EXP 91
56401: NOT
56402: IFFALSE 56406
// exit ;
56404: GO 56450
// for i in hInvincible do
56406: LD_ADDR_VAR 0 1
56410: PUSH
56411: LD_EXP 91
56415: PUSH
56416: FOR_IN
56417: IFFALSE 56448
// if GetLives ( i ) < 1000 then
56419: LD_VAR 0 1
56423: PPUSH
56424: CALL_OW 256
56428: PUSH
56429: LD_INT 1000
56431: LESS
56432: IFFALSE 56446
// SetLives ( i , 1000 ) ;
56434: LD_VAR 0 1
56438: PPUSH
56439: LD_INT 1000
56441: PPUSH
56442: CALL_OW 234
56446: GO 56416
56448: POP
56449: POP
// end ;
56450: PPOPN 1
56452: END
// export function hHackInvincible ; var i ; begin
56453: LD_INT 0
56455: PPUSH
56456: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
56457: LD_ADDR_VAR 0 2
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: LD_INT 21
56467: PUSH
56468: LD_INT 1
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 21
56477: PUSH
56478: LD_INT 2
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: PPUSH
56490: CALL_OW 69
56494: PUSH
56495: FOR_IN
56496: IFFALSE 56557
// if IsSelected ( i ) then
56498: LD_VAR 0 2
56502: PPUSH
56503: CALL_OW 306
56507: IFFALSE 56555
// begin if i in hInvincible then
56509: LD_VAR 0 2
56513: PUSH
56514: LD_EXP 91
56518: IN
56519: IFFALSE 56539
// hInvincible := hInvincible diff i else
56521: LD_ADDR_EXP 91
56525: PUSH
56526: LD_EXP 91
56530: PUSH
56531: LD_VAR 0 2
56535: DIFF
56536: ST_TO_ADDR
56537: GO 56555
// hInvincible := hInvincible union i ;
56539: LD_ADDR_EXP 91
56543: PUSH
56544: LD_EXP 91
56548: PUSH
56549: LD_VAR 0 2
56553: UNION
56554: ST_TO_ADDR
// end ;
56555: GO 56495
56557: POP
56558: POP
// end ;
56559: LD_VAR 0 1
56563: RET
// export function hHackInvisible ; var i , j ; begin
56564: LD_INT 0
56566: PPUSH
56567: PPUSH
56568: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
56569: LD_ADDR_VAR 0 2
56573: PUSH
56574: LD_INT 21
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PPUSH
56584: CALL_OW 69
56588: PUSH
56589: FOR_IN
56590: IFFALSE 56614
// if IsSelected ( i ) then
56592: LD_VAR 0 2
56596: PPUSH
56597: CALL_OW 306
56601: IFFALSE 56612
// ComForceInvisible ( i ) ;
56603: LD_VAR 0 2
56607: PPUSH
56608: CALL_OW 496
56612: GO 56589
56614: POP
56615: POP
// end ;
56616: LD_VAR 0 1
56620: RET
// export function hHackChangeYourSide ; begin
56621: LD_INT 0
56623: PPUSH
// if your_side = 8 then
56624: LD_OWVAR 2
56628: PUSH
56629: LD_INT 8
56631: EQUAL
56632: IFFALSE 56644
// your_side := 0 else
56634: LD_ADDR_OWVAR 2
56638: PUSH
56639: LD_INT 0
56641: ST_TO_ADDR
56642: GO 56658
// your_side := your_side + 1 ;
56644: LD_ADDR_OWVAR 2
56648: PUSH
56649: LD_OWVAR 2
56653: PUSH
56654: LD_INT 1
56656: PLUS
56657: ST_TO_ADDR
// end ;
56658: LD_VAR 0 1
56662: RET
// export function hHackChangeUnitSide ; var i , j ; begin
56663: LD_INT 0
56665: PPUSH
56666: PPUSH
56667: PPUSH
// for i in all_units do
56668: LD_ADDR_VAR 0 2
56672: PUSH
56673: LD_OWVAR 3
56677: PUSH
56678: FOR_IN
56679: IFFALSE 56757
// if IsSelected ( i ) then
56681: LD_VAR 0 2
56685: PPUSH
56686: CALL_OW 306
56690: IFFALSE 56755
// begin j := GetSide ( i ) ;
56692: LD_ADDR_VAR 0 3
56696: PUSH
56697: LD_VAR 0 2
56701: PPUSH
56702: CALL_OW 255
56706: ST_TO_ADDR
// if j = 8 then
56707: LD_VAR 0 3
56711: PUSH
56712: LD_INT 8
56714: EQUAL
56715: IFFALSE 56727
// j := 0 else
56717: LD_ADDR_VAR 0 3
56721: PUSH
56722: LD_INT 0
56724: ST_TO_ADDR
56725: GO 56741
// j := j + 1 ;
56727: LD_ADDR_VAR 0 3
56731: PUSH
56732: LD_VAR 0 3
56736: PUSH
56737: LD_INT 1
56739: PLUS
56740: ST_TO_ADDR
// SetSide ( i , j ) ;
56741: LD_VAR 0 2
56745: PPUSH
56746: LD_VAR 0 3
56750: PPUSH
56751: CALL_OW 235
// end ;
56755: GO 56678
56757: POP
56758: POP
// end ;
56759: LD_VAR 0 1
56763: RET
// export function hHackFog ; begin
56764: LD_INT 0
56766: PPUSH
// FogOff ( true ) ;
56767: LD_INT 1
56769: PPUSH
56770: CALL_OW 344
// end ;
56774: LD_VAR 0 1
56778: RET
// export function hHackTeleport ( unit , x , y ) ; begin
56779: LD_INT 0
56781: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
56782: LD_VAR 0 1
56786: PPUSH
56787: LD_VAR 0 2
56791: PPUSH
56792: LD_VAR 0 3
56796: PPUSH
56797: LD_INT 1
56799: PPUSH
56800: LD_INT 1
56802: PPUSH
56803: CALL_OW 483
// CenterOnXY ( x , y ) ;
56807: LD_VAR 0 2
56811: PPUSH
56812: LD_VAR 0 3
56816: PPUSH
56817: CALL_OW 84
// end ;
56821: LD_VAR 0 4
56825: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56826: LD_INT 0
56828: PPUSH
56829: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56830: LD_VAR 0 1
56834: NOT
56835: PUSH
56836: LD_VAR 0 2
56840: PPUSH
56841: LD_VAR 0 3
56845: PPUSH
56846: CALL_OW 488
56850: NOT
56851: OR
56852: PUSH
56853: LD_VAR 0 1
56857: PPUSH
56858: CALL_OW 266
56862: PUSH
56863: LD_INT 3
56865: NONEQUAL
56866: PUSH
56867: LD_VAR 0 1
56871: PPUSH
56872: CALL_OW 247
56876: PUSH
56877: LD_INT 1
56879: EQUAL
56880: NOT
56881: AND
56882: OR
56883: IFFALSE 56887
// exit ;
56885: GO 57036
// if GetType ( factory ) = unit_human then
56887: LD_VAR 0 1
56891: PPUSH
56892: CALL_OW 247
56896: PUSH
56897: LD_INT 1
56899: EQUAL
56900: IFFALSE 56917
// factory := IsInUnit ( factory ) ;
56902: LD_ADDR_VAR 0 1
56906: PUSH
56907: LD_VAR 0 1
56911: PPUSH
56912: CALL_OW 310
56916: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56917: LD_VAR 0 1
56921: PPUSH
56922: CALL_OW 266
56926: PUSH
56927: LD_INT 3
56929: NONEQUAL
56930: IFFALSE 56934
// exit ;
56932: GO 57036
// if HexInfo ( x , y ) = factory then
56934: LD_VAR 0 2
56938: PPUSH
56939: LD_VAR 0 3
56943: PPUSH
56944: CALL_OW 428
56948: PUSH
56949: LD_VAR 0 1
56953: EQUAL
56954: IFFALSE 56981
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56956: LD_ADDR_EXP 92
56960: PUSH
56961: LD_EXP 92
56965: PPUSH
56966: LD_VAR 0 1
56970: PPUSH
56971: LD_INT 0
56973: PPUSH
56974: CALL_OW 1
56978: ST_TO_ADDR
56979: GO 57032
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56981: LD_ADDR_EXP 92
56985: PUSH
56986: LD_EXP 92
56990: PPUSH
56991: LD_VAR 0 1
56995: PPUSH
56996: LD_VAR 0 1
57000: PPUSH
57001: CALL_OW 255
57005: PUSH
57006: LD_VAR 0 1
57010: PUSH
57011: LD_VAR 0 2
57015: PUSH
57016: LD_VAR 0 3
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: PPUSH
57027: CALL_OW 1
57031: ST_TO_ADDR
// UpdateFactoryWaypoints ;
57032: CALL 57041 0 0
// end ;
57036: LD_VAR 0 4
57040: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
57041: LD_INT 0
57043: PPUSH
57044: PPUSH
57045: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
57046: LD_STRING resetFactoryWaypoint();
57048: PPUSH
57049: CALL_OW 559
// if factoryWaypoints then
57053: LD_EXP 92
57057: IFFALSE 57183
// begin list := PrepareArray ( factoryWaypoints ) ;
57059: LD_ADDR_VAR 0 3
57063: PUSH
57064: LD_EXP 92
57068: PPUSH
57069: CALL 42218 0 1
57073: ST_TO_ADDR
// for i := 1 to list do
57074: LD_ADDR_VAR 0 2
57078: PUSH
57079: DOUBLE
57080: LD_INT 1
57082: DEC
57083: ST_TO_ADDR
57084: LD_VAR 0 3
57088: PUSH
57089: FOR_TO
57090: IFFALSE 57181
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
57092: LD_STRING setFactoryWaypointXY(
57094: PUSH
57095: LD_VAR 0 3
57099: PUSH
57100: LD_VAR 0 2
57104: ARRAY
57105: PUSH
57106: LD_INT 1
57108: ARRAY
57109: STR
57110: PUSH
57111: LD_STRING ,
57113: STR
57114: PUSH
57115: LD_VAR 0 3
57119: PUSH
57120: LD_VAR 0 2
57124: ARRAY
57125: PUSH
57126: LD_INT 2
57128: ARRAY
57129: STR
57130: PUSH
57131: LD_STRING ,
57133: STR
57134: PUSH
57135: LD_VAR 0 3
57139: PUSH
57140: LD_VAR 0 2
57144: ARRAY
57145: PUSH
57146: LD_INT 3
57148: ARRAY
57149: STR
57150: PUSH
57151: LD_STRING ,
57153: STR
57154: PUSH
57155: LD_VAR 0 3
57159: PUSH
57160: LD_VAR 0 2
57164: ARRAY
57165: PUSH
57166: LD_INT 4
57168: ARRAY
57169: STR
57170: PUSH
57171: LD_STRING )
57173: STR
57174: PPUSH
57175: CALL_OW 559
57179: GO 57089
57181: POP
57182: POP
// end ; end ;
57183: LD_VAR 0 1
57187: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
57188: LD_INT 0
57190: PPUSH
// if HexInfo ( x , y ) = warehouse then
57191: LD_VAR 0 2
57195: PPUSH
57196: LD_VAR 0 3
57200: PPUSH
57201: CALL_OW 428
57205: PUSH
57206: LD_VAR 0 1
57210: EQUAL
57211: IFFALSE 57238
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
57213: LD_ADDR_EXP 93
57217: PUSH
57218: LD_EXP 93
57222: PPUSH
57223: LD_VAR 0 1
57227: PPUSH
57228: LD_INT 0
57230: PPUSH
57231: CALL_OW 1
57235: ST_TO_ADDR
57236: GO 57289
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
57238: LD_ADDR_EXP 93
57242: PUSH
57243: LD_EXP 93
57247: PPUSH
57248: LD_VAR 0 1
57252: PPUSH
57253: LD_VAR 0 1
57257: PPUSH
57258: CALL_OW 255
57262: PUSH
57263: LD_VAR 0 1
57267: PUSH
57268: LD_VAR 0 2
57272: PUSH
57273: LD_VAR 0 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: PPUSH
57284: CALL_OW 1
57288: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
57289: CALL 57298 0 0
// end ;
57293: LD_VAR 0 4
57297: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
57298: LD_INT 0
57300: PPUSH
57301: PPUSH
57302: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
57303: LD_STRING resetWarehouseGatheringPoints();
57305: PPUSH
57306: CALL_OW 559
// if warehouseGatheringPoints then
57310: LD_EXP 93
57314: IFFALSE 57440
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
57316: LD_ADDR_VAR 0 3
57320: PUSH
57321: LD_EXP 93
57325: PPUSH
57326: CALL 42218 0 1
57330: ST_TO_ADDR
// for i := 1 to list do
57331: LD_ADDR_VAR 0 2
57335: PUSH
57336: DOUBLE
57337: LD_INT 1
57339: DEC
57340: ST_TO_ADDR
57341: LD_VAR 0 3
57345: PUSH
57346: FOR_TO
57347: IFFALSE 57438
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
57349: LD_STRING setWarehouseGatheringPointXY(
57351: PUSH
57352: LD_VAR 0 3
57356: PUSH
57357: LD_VAR 0 2
57361: ARRAY
57362: PUSH
57363: LD_INT 1
57365: ARRAY
57366: STR
57367: PUSH
57368: LD_STRING ,
57370: STR
57371: PUSH
57372: LD_VAR 0 3
57376: PUSH
57377: LD_VAR 0 2
57381: ARRAY
57382: PUSH
57383: LD_INT 2
57385: ARRAY
57386: STR
57387: PUSH
57388: LD_STRING ,
57390: STR
57391: PUSH
57392: LD_VAR 0 3
57396: PUSH
57397: LD_VAR 0 2
57401: ARRAY
57402: PUSH
57403: LD_INT 3
57405: ARRAY
57406: STR
57407: PUSH
57408: LD_STRING ,
57410: STR
57411: PUSH
57412: LD_VAR 0 3
57416: PUSH
57417: LD_VAR 0 2
57421: ARRAY
57422: PUSH
57423: LD_INT 4
57425: ARRAY
57426: STR
57427: PUSH
57428: LD_STRING )
57430: STR
57431: PPUSH
57432: CALL_OW 559
57436: GO 57346
57438: POP
57439: POP
// end ; end ;
57440: LD_VAR 0 1
57444: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
57445: LD_EXP 93
57449: IFFALSE 58136
57451: GO 57453
57453: DISABLE
57454: LD_INT 0
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
57460: PPUSH
57461: PPUSH
57462: PPUSH
57463: PPUSH
57464: PPUSH
// begin enable ;
57465: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
57466: LD_ADDR_VAR 0 3
57470: PUSH
57471: LD_EXP 93
57475: PPUSH
57476: CALL 42218 0 1
57480: ST_TO_ADDR
// if not list then
57481: LD_VAR 0 3
57485: NOT
57486: IFFALSE 57490
// exit ;
57488: GO 58136
// for i := 1 to list do
57490: LD_ADDR_VAR 0 1
57494: PUSH
57495: DOUBLE
57496: LD_INT 1
57498: DEC
57499: ST_TO_ADDR
57500: LD_VAR 0 3
57504: PUSH
57505: FOR_TO
57506: IFFALSE 58134
// begin depot := list [ i ] [ 2 ] ;
57508: LD_ADDR_VAR 0 8
57512: PUSH
57513: LD_VAR 0 3
57517: PUSH
57518: LD_VAR 0 1
57522: ARRAY
57523: PUSH
57524: LD_INT 2
57526: ARRAY
57527: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
57528: LD_ADDR_VAR 0 5
57532: PUSH
57533: LD_VAR 0 3
57537: PUSH
57538: LD_VAR 0 1
57542: ARRAY
57543: PUSH
57544: LD_INT 1
57546: ARRAY
57547: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
57548: LD_VAR 0 8
57552: PPUSH
57553: CALL_OW 301
57557: PUSH
57558: LD_VAR 0 5
57562: PUSH
57563: LD_VAR 0 8
57567: PPUSH
57568: CALL_OW 255
57572: NONEQUAL
57573: OR
57574: IFFALSE 57603
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
57576: LD_ADDR_EXP 93
57580: PUSH
57581: LD_EXP 93
57585: PPUSH
57586: LD_VAR 0 8
57590: PPUSH
57591: LD_INT 0
57593: PPUSH
57594: CALL_OW 1
57598: ST_TO_ADDR
// exit ;
57599: POP
57600: POP
57601: GO 58136
// end ; x := list [ i ] [ 3 ] ;
57603: LD_ADDR_VAR 0 6
57607: PUSH
57608: LD_VAR 0 3
57612: PUSH
57613: LD_VAR 0 1
57617: ARRAY
57618: PUSH
57619: LD_INT 3
57621: ARRAY
57622: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
57623: LD_ADDR_VAR 0 7
57627: PUSH
57628: LD_VAR 0 3
57632: PUSH
57633: LD_VAR 0 1
57637: ARRAY
57638: PUSH
57639: LD_INT 4
57641: ARRAY
57642: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
57643: LD_ADDR_VAR 0 9
57647: PUSH
57648: LD_VAR 0 6
57652: PPUSH
57653: LD_VAR 0 7
57657: PPUSH
57658: LD_INT 16
57660: PPUSH
57661: CALL 40802 0 3
57665: ST_TO_ADDR
// if not cratesNearbyPoint then
57666: LD_VAR 0 9
57670: NOT
57671: IFFALSE 57677
// exit ;
57673: POP
57674: POP
57675: GO 58136
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
57677: LD_ADDR_VAR 0 4
57681: PUSH
57682: LD_INT 22
57684: PUSH
57685: LD_VAR 0 5
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 3
57696: PUSH
57697: LD_INT 60
57699: PUSH
57700: EMPTY
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 91
57709: PUSH
57710: LD_VAR 0 8
57714: PUSH
57715: LD_INT 6
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: PUSH
57726: LD_INT 25
57728: PUSH
57729: LD_INT 2
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 25
57738: PUSH
57739: LD_INT 16
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: PPUSH
57757: CALL_OW 69
57761: PUSH
57762: LD_VAR 0 8
57766: PPUSH
57767: CALL_OW 313
57771: PPUSH
57772: LD_INT 3
57774: PUSH
57775: LD_INT 60
57777: PUSH
57778: EMPTY
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 25
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 25
57800: PUSH
57801: LD_INT 16
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: LIST
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PPUSH
57817: CALL_OW 72
57821: UNION
57822: ST_TO_ADDR
// if tmp then
57823: LD_VAR 0 4
57827: IFFALSE 57907
// begin tmp := ShrinkArray ( tmp , 3 ) ;
57829: LD_ADDR_VAR 0 4
57833: PUSH
57834: LD_VAR 0 4
57838: PPUSH
57839: LD_INT 3
57841: PPUSH
57842: CALL 38769 0 2
57846: ST_TO_ADDR
// for j in tmp do
57847: LD_ADDR_VAR 0 2
57851: PUSH
57852: LD_VAR 0 4
57856: PUSH
57857: FOR_IN
57858: IFFALSE 57901
// begin if IsInUnit ( j ) then
57860: LD_VAR 0 2
57864: PPUSH
57865: CALL_OW 310
57869: IFFALSE 57880
// ComExit ( j ) ;
57871: LD_VAR 0 2
57875: PPUSH
57876: CALL 38852 0 1
// AddComCollect ( j , x , y ) ;
57880: LD_VAR 0 2
57884: PPUSH
57885: LD_VAR 0 6
57889: PPUSH
57890: LD_VAR 0 7
57894: PPUSH
57895: CALL_OW 177
// end ;
57899: GO 57857
57901: POP
57902: POP
// exit ;
57903: POP
57904: POP
57905: GO 58136
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
57907: LD_ADDR_VAR 0 4
57911: PUSH
57912: LD_INT 22
57914: PUSH
57915: LD_VAR 0 5
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 91
57926: PUSH
57927: LD_VAR 0 8
57931: PUSH
57932: LD_INT 8
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: LD_INT 34
57945: PUSH
57946: LD_INT 12
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 34
57955: PUSH
57956: LD_INT 51
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 34
57965: PUSH
57966: LD_INT 32
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 34
57975: PUSH
57976: LD_EXP 17
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: LIST
57996: PPUSH
57997: CALL_OW 69
58001: ST_TO_ADDR
// if tmp then
58002: LD_VAR 0 4
58006: IFFALSE 58132
// begin for j in tmp do
58008: LD_ADDR_VAR 0 2
58012: PUSH
58013: LD_VAR 0 4
58017: PUSH
58018: FOR_IN
58019: IFFALSE 58130
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
58021: LD_VAR 0 2
58025: PPUSH
58026: CALL_OW 262
58030: PUSH
58031: LD_INT 3
58033: EQUAL
58034: PUSH
58035: LD_VAR 0 2
58039: PPUSH
58040: CALL_OW 261
58044: PUSH
58045: LD_INT 20
58047: GREATER
58048: OR
58049: PUSH
58050: LD_VAR 0 2
58054: PPUSH
58055: CALL_OW 314
58059: NOT
58060: AND
58061: PUSH
58062: LD_VAR 0 2
58066: PPUSH
58067: CALL_OW 263
58071: PUSH
58072: LD_INT 1
58074: NONEQUAL
58075: PUSH
58076: LD_VAR 0 2
58080: PPUSH
58081: CALL_OW 311
58085: OR
58086: AND
58087: IFFALSE 58128
// begin ComCollect ( j , x , y ) ;
58089: LD_VAR 0 2
58093: PPUSH
58094: LD_VAR 0 6
58098: PPUSH
58099: LD_VAR 0 7
58103: PPUSH
58104: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
58108: LD_VAR 0 2
58112: PPUSH
58113: LD_VAR 0 8
58117: PPUSH
58118: CALL_OW 172
// exit ;
58122: POP
58123: POP
58124: POP
58125: POP
58126: GO 58136
// end ;
58128: GO 58018
58130: POP
58131: POP
// end ; end ;
58132: GO 57505
58134: POP
58135: POP
// end ; end_of_file
58136: PPOPN 9
58138: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
58139: LD_VAR 0 1
58143: PUSH
58144: LD_INT 200
58146: DOUBLE
58147: GREATEREQUAL
58148: IFFALSE 58156
58150: LD_INT 299
58152: DOUBLE
58153: LESSEQUAL
58154: IFTRUE 58158
58156: GO 58190
58158: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
58159: LD_VAR 0 1
58163: PPUSH
58164: LD_VAR 0 2
58168: PPUSH
58169: LD_VAR 0 3
58173: PPUSH
58174: LD_VAR 0 4
58178: PPUSH
58179: LD_VAR 0 5
58183: PPUSH
58184: CALL 58680 0 5
58188: GO 58267
58190: LD_INT 300
58192: DOUBLE
58193: GREATEREQUAL
58194: IFFALSE 58202
58196: LD_INT 399
58198: DOUBLE
58199: LESSEQUAL
58200: IFTRUE 58204
58202: GO 58266
58204: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
58205: LD_VAR 0 1
58209: PPUSH
58210: LD_VAR 0 2
58214: PPUSH
58215: LD_VAR 0 3
58219: PPUSH
58220: LD_VAR 0 4
58224: PPUSH
58225: LD_VAR 0 5
58229: PPUSH
58230: LD_VAR 0 6
58234: PPUSH
58235: LD_VAR 0 7
58239: PPUSH
58240: LD_VAR 0 8
58244: PPUSH
58245: LD_VAR 0 9
58249: PPUSH
58250: LD_VAR 0 10
58254: PPUSH
58255: LD_VAR 0 11
58259: PPUSH
58260: CALL 54846 0 11
58264: GO 58267
58266: POP
// end ;
58267: PPOPN 11
58269: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
58270: LD_VAR 0 1
58274: PPUSH
58275: LD_VAR 0 2
58279: PPUSH
58280: LD_VAR 0 3
58284: PPUSH
58285: LD_VAR 0 4
58289: PPUSH
58290: LD_VAR 0 5
58294: PPUSH
58295: CALL 58416 0 5
// end ; end_of_file
58299: PPOPN 5
58301: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
58302: LD_INT 0
58304: PPUSH
58305: PPUSH
58306: PPUSH
58307: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
58308: LD_VAR 0 1
58312: PPUSH
58313: CALL_OW 264
58317: PUSH
58318: LD_EXP 20
58322: EQUAL
58323: IFFALSE 58395
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58325: LD_INT 68
58327: PPUSH
58328: LD_VAR 0 1
58332: PPUSH
58333: CALL_OW 255
58337: PPUSH
58338: CALL_OW 321
58342: PUSH
58343: LD_INT 2
58345: EQUAL
58346: IFFALSE 58358
// eff := 70 else
58348: LD_ADDR_VAR 0 4
58352: PUSH
58353: LD_INT 70
58355: ST_TO_ADDR
58356: GO 58366
// eff := 30 ;
58358: LD_ADDR_VAR 0 4
58362: PUSH
58363: LD_INT 30
58365: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58366: LD_VAR 0 1
58370: PPUSH
58371: CALL_OW 250
58375: PPUSH
58376: LD_VAR 0 1
58380: PPUSH
58381: CALL_OW 251
58385: PPUSH
58386: LD_VAR 0 4
58390: PPUSH
58391: CALL_OW 495
// end ; end ;
58395: LD_VAR 0 2
58399: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
58400: LD_INT 0
58402: PPUSH
// end ;
58403: LD_VAR 0 4
58407: RET
// export function SOS_Command ( cmd ) ; begin
58408: LD_INT 0
58410: PPUSH
// end ;
58411: LD_VAR 0 2
58415: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
58416: LD_INT 0
58418: PPUSH
// end ;
58419: LD_VAR 0 6
58423: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
58424: LD_INT 0
58426: PPUSH
58427: PPUSH
// if not vehicle or not factory then
58428: LD_VAR 0 1
58432: NOT
58433: PUSH
58434: LD_VAR 0 2
58438: NOT
58439: OR
58440: IFFALSE 58444
// exit ;
58442: GO 58675
// if factoryWaypoints >= factory then
58444: LD_EXP 92
58448: PUSH
58449: LD_VAR 0 2
58453: GREATEREQUAL
58454: IFFALSE 58675
// if factoryWaypoints [ factory ] then
58456: LD_EXP 92
58460: PUSH
58461: LD_VAR 0 2
58465: ARRAY
58466: IFFALSE 58675
// begin if GetControl ( vehicle ) = control_manual then
58468: LD_VAR 0 1
58472: PPUSH
58473: CALL_OW 263
58477: PUSH
58478: LD_INT 1
58480: EQUAL
58481: IFFALSE 58562
// begin driver := IsDrivenBy ( vehicle ) ;
58483: LD_ADDR_VAR 0 4
58487: PUSH
58488: LD_VAR 0 1
58492: PPUSH
58493: CALL_OW 311
58497: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58498: LD_VAR 0 4
58502: PPUSH
58503: LD_EXP 92
58507: PUSH
58508: LD_VAR 0 2
58512: ARRAY
58513: PUSH
58514: LD_INT 3
58516: ARRAY
58517: PPUSH
58518: LD_EXP 92
58522: PUSH
58523: LD_VAR 0 2
58527: ARRAY
58528: PUSH
58529: LD_INT 4
58531: ARRAY
58532: PPUSH
58533: CALL_OW 171
// AddComExitVehicle ( driver ) ;
58537: LD_VAR 0 4
58541: PPUSH
58542: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
58546: LD_VAR 0 4
58550: PPUSH
58551: LD_VAR 0 2
58555: PPUSH
58556: CALL_OW 180
// end else
58560: GO 58675
// if GetControl ( vehicle ) = control_remote then
58562: LD_VAR 0 1
58566: PPUSH
58567: CALL_OW 263
58571: PUSH
58572: LD_INT 2
58574: EQUAL
58575: IFFALSE 58636
// begin wait ( 0 0$2 ) ;
58577: LD_INT 70
58579: PPUSH
58580: CALL_OW 67
// if Connect ( vehicle ) then
58584: LD_VAR 0 1
58588: PPUSH
58589: CALL 9163 0 1
58593: IFFALSE 58634
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58595: LD_VAR 0 1
58599: PPUSH
58600: LD_EXP 92
58604: PUSH
58605: LD_VAR 0 2
58609: ARRAY
58610: PUSH
58611: LD_INT 3
58613: ARRAY
58614: PPUSH
58615: LD_EXP 92
58619: PUSH
58620: LD_VAR 0 2
58624: ARRAY
58625: PUSH
58626: LD_INT 4
58628: ARRAY
58629: PPUSH
58630: CALL_OW 171
// end else
58634: GO 58675
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
58636: LD_VAR 0 1
58640: PPUSH
58641: LD_EXP 92
58645: PUSH
58646: LD_VAR 0 2
58650: ARRAY
58651: PUSH
58652: LD_INT 3
58654: ARRAY
58655: PPUSH
58656: LD_EXP 92
58660: PUSH
58661: LD_VAR 0 2
58665: ARRAY
58666: PUSH
58667: LD_INT 4
58669: ARRAY
58670: PPUSH
58671: CALL_OW 171
// end ; end ;
58675: LD_VAR 0 3
58679: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
58680: LD_INT 0
58682: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
58683: LD_VAR 0 1
58687: PUSH
58688: LD_INT 250
58690: EQUAL
58691: PUSH
58692: LD_VAR 0 2
58696: PPUSH
58697: CALL_OW 264
58701: PUSH
58702: LD_EXP 23
58706: EQUAL
58707: AND
58708: IFFALSE 58729
// MinerPlaceMine ( unit , x , y ) ;
58710: LD_VAR 0 2
58714: PPUSH
58715: LD_VAR 0 4
58719: PPUSH
58720: LD_VAR 0 5
58724: PPUSH
58725: CALL 61128 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
58729: LD_VAR 0 1
58733: PUSH
58734: LD_INT 251
58736: EQUAL
58737: PUSH
58738: LD_VAR 0 2
58742: PPUSH
58743: CALL_OW 264
58747: PUSH
58748: LD_EXP 23
58752: EQUAL
58753: AND
58754: IFFALSE 58775
// MinerDetonateMine ( unit , x , y ) ;
58756: LD_VAR 0 2
58760: PPUSH
58761: LD_VAR 0 4
58765: PPUSH
58766: LD_VAR 0 5
58770: PPUSH
58771: CALL 61405 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
58775: LD_VAR 0 1
58779: PUSH
58780: LD_INT 252
58782: EQUAL
58783: PUSH
58784: LD_VAR 0 2
58788: PPUSH
58789: CALL_OW 264
58793: PUSH
58794: LD_EXP 23
58798: EQUAL
58799: AND
58800: IFFALSE 58821
// MinerCreateMinefield ( unit , x , y ) ;
58802: LD_VAR 0 2
58806: PPUSH
58807: LD_VAR 0 4
58811: PPUSH
58812: LD_VAR 0 5
58816: PPUSH
58817: CALL 61822 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
58821: LD_VAR 0 1
58825: PUSH
58826: LD_INT 253
58828: EQUAL
58829: PUSH
58830: LD_VAR 0 2
58834: PPUSH
58835: CALL_OW 257
58839: PUSH
58840: LD_INT 5
58842: EQUAL
58843: AND
58844: IFFALSE 58865
// ComBinocular ( unit , x , y ) ;
58846: LD_VAR 0 2
58850: PPUSH
58851: LD_VAR 0 4
58855: PPUSH
58856: LD_VAR 0 5
58860: PPUSH
58861: CALL 62193 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
58865: LD_VAR 0 1
58869: PUSH
58870: LD_INT 254
58872: EQUAL
58873: PUSH
58874: LD_VAR 0 2
58878: PPUSH
58879: CALL_OW 264
58883: PUSH
58884: LD_EXP 18
58888: EQUAL
58889: AND
58890: PUSH
58891: LD_VAR 0 3
58895: PPUSH
58896: CALL_OW 263
58900: PUSH
58901: LD_INT 3
58903: EQUAL
58904: AND
58905: IFFALSE 58921
// HackDestroyVehicle ( unit , selectedUnit ) ;
58907: LD_VAR 0 2
58911: PPUSH
58912: LD_VAR 0 3
58916: PPUSH
58917: CALL 60488 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
58921: LD_VAR 0 1
58925: PUSH
58926: LD_INT 255
58928: EQUAL
58929: PUSH
58930: LD_VAR 0 2
58934: PPUSH
58935: CALL_OW 264
58939: PUSH
58940: LD_INT 14
58942: PUSH
58943: LD_INT 53
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: IN
58950: AND
58951: PUSH
58952: LD_VAR 0 4
58956: PPUSH
58957: LD_VAR 0 5
58961: PPUSH
58962: CALL_OW 488
58966: AND
58967: IFFALSE 58991
// CutTreeXYR ( unit , x , y , 12 ) ;
58969: LD_VAR 0 2
58973: PPUSH
58974: LD_VAR 0 4
58978: PPUSH
58979: LD_VAR 0 5
58983: PPUSH
58984: LD_INT 12
58986: PPUSH
58987: CALL 59054 0 4
// if cmd = 256 then
58991: LD_VAR 0 1
58995: PUSH
58996: LD_INT 256
58998: EQUAL
58999: IFFALSE 59020
// SetFactoryWaypoint ( unit , x , y ) ;
59001: LD_VAR 0 2
59005: PPUSH
59006: LD_VAR 0 4
59010: PPUSH
59011: LD_VAR 0 5
59015: PPUSH
59016: CALL 56826 0 3
// if cmd = 257 then
59020: LD_VAR 0 1
59024: PUSH
59025: LD_INT 257
59027: EQUAL
59028: IFFALSE 59049
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59030: LD_VAR 0 2
59034: PPUSH
59035: LD_VAR 0 4
59039: PPUSH
59040: LD_VAR 0 5
59044: PPUSH
59045: CALL 57188 0 3
// end ;
59049: LD_VAR 0 6
59053: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
59054: LD_INT 0
59056: PPUSH
59057: PPUSH
59058: PPUSH
59059: PPUSH
59060: PPUSH
59061: PPUSH
59062: PPUSH
59063: PPUSH
59064: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
59065: LD_VAR 0 1
59069: NOT
59070: PUSH
59071: LD_VAR 0 2
59075: PPUSH
59076: LD_VAR 0 3
59080: PPUSH
59081: CALL_OW 488
59085: NOT
59086: OR
59087: PUSH
59088: LD_VAR 0 4
59092: NOT
59093: OR
59094: IFFALSE 59098
// exit ;
59096: GO 59438
// list := [ ] ;
59098: LD_ADDR_VAR 0 13
59102: PUSH
59103: EMPTY
59104: ST_TO_ADDR
// if x - r < 0 then
59105: LD_VAR 0 2
59109: PUSH
59110: LD_VAR 0 4
59114: MINUS
59115: PUSH
59116: LD_INT 0
59118: LESS
59119: IFFALSE 59131
// min_x := 0 else
59121: LD_ADDR_VAR 0 7
59125: PUSH
59126: LD_INT 0
59128: ST_TO_ADDR
59129: GO 59147
// min_x := x - r ;
59131: LD_ADDR_VAR 0 7
59135: PUSH
59136: LD_VAR 0 2
59140: PUSH
59141: LD_VAR 0 4
59145: MINUS
59146: ST_TO_ADDR
// if y - r < 0 then
59147: LD_VAR 0 3
59151: PUSH
59152: LD_VAR 0 4
59156: MINUS
59157: PUSH
59158: LD_INT 0
59160: LESS
59161: IFFALSE 59173
// min_y := 0 else
59163: LD_ADDR_VAR 0 8
59167: PUSH
59168: LD_INT 0
59170: ST_TO_ADDR
59171: GO 59189
// min_y := y - r ;
59173: LD_ADDR_VAR 0 8
59177: PUSH
59178: LD_VAR 0 3
59182: PUSH
59183: LD_VAR 0 4
59187: MINUS
59188: ST_TO_ADDR
// max_x := x + r ;
59189: LD_ADDR_VAR 0 9
59193: PUSH
59194: LD_VAR 0 2
59198: PUSH
59199: LD_VAR 0 4
59203: PLUS
59204: ST_TO_ADDR
// max_y := y + r ;
59205: LD_ADDR_VAR 0 10
59209: PUSH
59210: LD_VAR 0 3
59214: PUSH
59215: LD_VAR 0 4
59219: PLUS
59220: ST_TO_ADDR
// for _x = min_x to max_x do
59221: LD_ADDR_VAR 0 11
59225: PUSH
59226: DOUBLE
59227: LD_VAR 0 7
59231: DEC
59232: ST_TO_ADDR
59233: LD_VAR 0 9
59237: PUSH
59238: FOR_TO
59239: IFFALSE 59356
// for _y = min_y to max_y do
59241: LD_ADDR_VAR 0 12
59245: PUSH
59246: DOUBLE
59247: LD_VAR 0 8
59251: DEC
59252: ST_TO_ADDR
59253: LD_VAR 0 10
59257: PUSH
59258: FOR_TO
59259: IFFALSE 59352
// begin if not ValidHex ( _x , _y ) then
59261: LD_VAR 0 11
59265: PPUSH
59266: LD_VAR 0 12
59270: PPUSH
59271: CALL_OW 488
59275: NOT
59276: IFFALSE 59280
// continue ;
59278: GO 59258
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
59280: LD_VAR 0 11
59284: PPUSH
59285: LD_VAR 0 12
59289: PPUSH
59290: CALL_OW 351
59294: PUSH
59295: LD_VAR 0 11
59299: PPUSH
59300: LD_VAR 0 12
59304: PPUSH
59305: CALL_OW 554
59309: AND
59310: IFFALSE 59350
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
59312: LD_ADDR_VAR 0 13
59316: PUSH
59317: LD_VAR 0 13
59321: PPUSH
59322: LD_VAR 0 13
59326: PUSH
59327: LD_INT 1
59329: PLUS
59330: PPUSH
59331: LD_VAR 0 11
59335: PUSH
59336: LD_VAR 0 12
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PPUSH
59345: CALL_OW 2
59349: ST_TO_ADDR
// end ;
59350: GO 59258
59352: POP
59353: POP
59354: GO 59238
59356: POP
59357: POP
// if not list then
59358: LD_VAR 0 13
59362: NOT
59363: IFFALSE 59367
// exit ;
59365: GO 59438
// for i in list do
59367: LD_ADDR_VAR 0 6
59371: PUSH
59372: LD_VAR 0 13
59376: PUSH
59377: FOR_IN
59378: IFFALSE 59436
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
59380: LD_VAR 0 1
59384: PPUSH
59385: LD_STRING M
59387: PUSH
59388: LD_VAR 0 6
59392: PUSH
59393: LD_INT 1
59395: ARRAY
59396: PUSH
59397: LD_VAR 0 6
59401: PUSH
59402: LD_INT 2
59404: ARRAY
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: PUSH
59427: EMPTY
59428: LIST
59429: PPUSH
59430: CALL_OW 447
59434: GO 59377
59436: POP
59437: POP
// end ;
59438: LD_VAR 0 5
59442: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59443: LD_EXP 95
59447: NOT
59448: IFFALSE 59498
59450: GO 59452
59452: DISABLE
// begin initHack := true ;
59453: LD_ADDR_EXP 95
59457: PUSH
59458: LD_INT 1
59460: ST_TO_ADDR
// hackTanks := [ ] ;
59461: LD_ADDR_EXP 96
59465: PUSH
59466: EMPTY
59467: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59468: LD_ADDR_EXP 97
59472: PUSH
59473: EMPTY
59474: ST_TO_ADDR
// hackLimit := 3 ;
59475: LD_ADDR_EXP 98
59479: PUSH
59480: LD_INT 3
59482: ST_TO_ADDR
// hackDist := 12 ;
59483: LD_ADDR_EXP 99
59487: PUSH
59488: LD_INT 12
59490: ST_TO_ADDR
// hackCounter := [ ] ;
59491: LD_ADDR_EXP 100
59495: PUSH
59496: EMPTY
59497: ST_TO_ADDR
// end ;
59498: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59499: LD_EXP 95
59503: PUSH
59504: LD_INT 34
59506: PUSH
59507: LD_EXP 18
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PPUSH
59516: CALL_OW 69
59520: AND
59521: IFFALSE 59776
59523: GO 59525
59525: DISABLE
59526: LD_INT 0
59528: PPUSH
59529: PPUSH
// begin enable ;
59530: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59531: LD_ADDR_VAR 0 1
59535: PUSH
59536: LD_INT 34
59538: PUSH
59539: LD_EXP 18
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PPUSH
59548: CALL_OW 69
59552: PUSH
59553: FOR_IN
59554: IFFALSE 59774
// begin if not i in hackTanks then
59556: LD_VAR 0 1
59560: PUSH
59561: LD_EXP 96
59565: IN
59566: NOT
59567: IFFALSE 59650
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59569: LD_ADDR_EXP 96
59573: PUSH
59574: LD_EXP 96
59578: PPUSH
59579: LD_EXP 96
59583: PUSH
59584: LD_INT 1
59586: PLUS
59587: PPUSH
59588: LD_VAR 0 1
59592: PPUSH
59593: CALL_OW 1
59597: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59598: LD_ADDR_EXP 97
59602: PUSH
59603: LD_EXP 97
59607: PPUSH
59608: LD_EXP 97
59612: PUSH
59613: LD_INT 1
59615: PLUS
59616: PPUSH
59617: EMPTY
59618: PPUSH
59619: CALL_OW 1
59623: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59624: LD_ADDR_EXP 100
59628: PUSH
59629: LD_EXP 100
59633: PPUSH
59634: LD_EXP 100
59638: PUSH
59639: LD_INT 1
59641: PLUS
59642: PPUSH
59643: EMPTY
59644: PPUSH
59645: CALL_OW 1
59649: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59650: LD_VAR 0 1
59654: PPUSH
59655: CALL_OW 302
59659: NOT
59660: IFFALSE 59673
// begin HackUnlinkAll ( i ) ;
59662: LD_VAR 0 1
59666: PPUSH
59667: CALL 59779 0 1
// continue ;
59671: GO 59553
// end ; HackCheckCapturedStatus ( i ) ;
59673: LD_VAR 0 1
59677: PPUSH
59678: CALL 60222 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59682: LD_ADDR_VAR 0 2
59686: PUSH
59687: LD_INT 81
59689: PUSH
59690: LD_VAR 0 1
59694: PPUSH
59695: CALL_OW 255
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 33
59706: PUSH
59707: LD_INT 3
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 91
59716: PUSH
59717: LD_VAR 0 1
59721: PUSH
59722: LD_EXP 99
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 50
59734: PUSH
59735: EMPTY
59736: LIST
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: PPUSH
59744: CALL_OW 69
59748: ST_TO_ADDR
// if not tmp then
59749: LD_VAR 0 2
59753: NOT
59754: IFFALSE 59758
// continue ;
59756: GO 59553
// HackLink ( i , tmp ) ;
59758: LD_VAR 0 1
59762: PPUSH
59763: LD_VAR 0 2
59767: PPUSH
59768: CALL 59915 0 2
// end ;
59772: GO 59553
59774: POP
59775: POP
// end ;
59776: PPOPN 2
59778: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59779: LD_INT 0
59781: PPUSH
59782: PPUSH
59783: PPUSH
// if not hack in hackTanks then
59784: LD_VAR 0 1
59788: PUSH
59789: LD_EXP 96
59793: IN
59794: NOT
59795: IFFALSE 59799
// exit ;
59797: GO 59910
// index := GetElementIndex ( hackTanks , hack ) ;
59799: LD_ADDR_VAR 0 4
59803: PUSH
59804: LD_EXP 96
59808: PPUSH
59809: LD_VAR 0 1
59813: PPUSH
59814: CALL 5977 0 2
59818: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59819: LD_EXP 97
59823: PUSH
59824: LD_VAR 0 4
59828: ARRAY
59829: IFFALSE 59910
// begin for i in hackTanksCaptured [ index ] do
59831: LD_ADDR_VAR 0 3
59835: PUSH
59836: LD_EXP 97
59840: PUSH
59841: LD_VAR 0 4
59845: ARRAY
59846: PUSH
59847: FOR_IN
59848: IFFALSE 59874
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59850: LD_VAR 0 3
59854: PUSH
59855: LD_INT 1
59857: ARRAY
59858: PPUSH
59859: LD_VAR 0 3
59863: PUSH
59864: LD_INT 2
59866: ARRAY
59867: PPUSH
59868: CALL_OW 235
59872: GO 59847
59874: POP
59875: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59876: LD_ADDR_EXP 97
59880: PUSH
59881: LD_EXP 97
59885: PPUSH
59886: LD_VAR 0 4
59890: PPUSH
59891: EMPTY
59892: PPUSH
59893: CALL_OW 1
59897: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59898: LD_VAR 0 1
59902: PPUSH
59903: LD_INT 0
59905: PPUSH
59906: CALL_OW 505
// end ; end ;
59910: LD_VAR 0 2
59914: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59915: LD_INT 0
59917: PPUSH
59918: PPUSH
59919: PPUSH
// if not hack in hackTanks or not vehicles then
59920: LD_VAR 0 1
59924: PUSH
59925: LD_EXP 96
59929: IN
59930: NOT
59931: PUSH
59932: LD_VAR 0 2
59936: NOT
59937: OR
59938: IFFALSE 59942
// exit ;
59940: GO 60217
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59942: LD_ADDR_VAR 0 2
59946: PUSH
59947: LD_VAR 0 1
59951: PPUSH
59952: LD_VAR 0 2
59956: PPUSH
59957: LD_INT 1
59959: PPUSH
59960: LD_INT 1
59962: PPUSH
59963: CALL 6627 0 4
59967: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59968: LD_ADDR_VAR 0 5
59972: PUSH
59973: LD_EXP 96
59977: PPUSH
59978: LD_VAR 0 1
59982: PPUSH
59983: CALL 5977 0 2
59987: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59988: LD_EXP 97
59992: PUSH
59993: LD_VAR 0 5
59997: ARRAY
59998: PUSH
59999: LD_EXP 98
60003: LESS
60004: IFFALSE 60193
// begin for i := 1 to vehicles do
60006: LD_ADDR_VAR 0 4
60010: PUSH
60011: DOUBLE
60012: LD_INT 1
60014: DEC
60015: ST_TO_ADDR
60016: LD_VAR 0 2
60020: PUSH
60021: FOR_TO
60022: IFFALSE 60191
// begin if hackTanksCaptured [ index ] = hackLimit then
60024: LD_EXP 97
60028: PUSH
60029: LD_VAR 0 5
60033: ARRAY
60034: PUSH
60035: LD_EXP 98
60039: EQUAL
60040: IFFALSE 60044
// break ;
60042: GO 60191
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
60044: LD_ADDR_EXP 100
60048: PUSH
60049: LD_EXP 100
60053: PPUSH
60054: LD_VAR 0 5
60058: PPUSH
60059: LD_EXP 100
60063: PUSH
60064: LD_VAR 0 5
60068: ARRAY
60069: PUSH
60070: LD_INT 1
60072: PLUS
60073: PPUSH
60074: CALL_OW 1
60078: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
60079: LD_ADDR_EXP 97
60083: PUSH
60084: LD_EXP 97
60088: PPUSH
60089: LD_VAR 0 5
60093: PUSH
60094: LD_EXP 97
60098: PUSH
60099: LD_VAR 0 5
60103: ARRAY
60104: PUSH
60105: LD_INT 1
60107: PLUS
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PPUSH
60113: LD_VAR 0 2
60117: PUSH
60118: LD_VAR 0 4
60122: ARRAY
60123: PUSH
60124: LD_VAR 0 2
60128: PUSH
60129: LD_VAR 0 4
60133: ARRAY
60134: PPUSH
60135: CALL_OW 255
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PPUSH
60144: CALL 6192 0 3
60148: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
60149: LD_VAR 0 2
60153: PUSH
60154: LD_VAR 0 4
60158: ARRAY
60159: PPUSH
60160: LD_VAR 0 1
60164: PPUSH
60165: CALL_OW 255
60169: PPUSH
60170: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
60174: LD_VAR 0 2
60178: PUSH
60179: LD_VAR 0 4
60183: ARRAY
60184: PPUSH
60185: CALL_OW 141
// end ;
60189: GO 60021
60191: POP
60192: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60193: LD_VAR 0 1
60197: PPUSH
60198: LD_EXP 97
60202: PUSH
60203: LD_VAR 0 5
60207: ARRAY
60208: PUSH
60209: LD_INT 0
60211: PLUS
60212: PPUSH
60213: CALL_OW 505
// end ;
60217: LD_VAR 0 3
60221: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60222: LD_INT 0
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
// if not hack in hackTanks then
60228: LD_VAR 0 1
60232: PUSH
60233: LD_EXP 96
60237: IN
60238: NOT
60239: IFFALSE 60243
// exit ;
60241: GO 60483
// index := GetElementIndex ( hackTanks , hack ) ;
60243: LD_ADDR_VAR 0 4
60247: PUSH
60248: LD_EXP 96
60252: PPUSH
60253: LD_VAR 0 1
60257: PPUSH
60258: CALL 5977 0 2
60262: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60263: LD_ADDR_VAR 0 3
60267: PUSH
60268: DOUBLE
60269: LD_EXP 97
60273: PUSH
60274: LD_VAR 0 4
60278: ARRAY
60279: INC
60280: ST_TO_ADDR
60281: LD_INT 1
60283: PUSH
60284: FOR_DOWNTO
60285: IFFALSE 60457
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60287: LD_ADDR_VAR 0 5
60291: PUSH
60292: LD_EXP 97
60296: PUSH
60297: LD_VAR 0 4
60301: ARRAY
60302: PUSH
60303: LD_VAR 0 3
60307: ARRAY
60308: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60309: LD_VAR 0 5
60313: PUSH
60314: LD_INT 1
60316: ARRAY
60317: PPUSH
60318: CALL_OW 302
60322: NOT
60323: PUSH
60324: LD_VAR 0 5
60328: PUSH
60329: LD_INT 1
60331: ARRAY
60332: PPUSH
60333: CALL_OW 255
60337: PUSH
60338: LD_VAR 0 1
60342: PPUSH
60343: CALL_OW 255
60347: NONEQUAL
60348: OR
60349: IFFALSE 60455
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60351: LD_VAR 0 5
60355: PUSH
60356: LD_INT 1
60358: ARRAY
60359: PPUSH
60360: CALL_OW 305
60364: PUSH
60365: LD_VAR 0 5
60369: PUSH
60370: LD_INT 1
60372: ARRAY
60373: PPUSH
60374: CALL_OW 255
60378: PUSH
60379: LD_VAR 0 1
60383: PPUSH
60384: CALL_OW 255
60388: EQUAL
60389: AND
60390: IFFALSE 60414
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60392: LD_VAR 0 5
60396: PUSH
60397: LD_INT 1
60399: ARRAY
60400: PPUSH
60401: LD_VAR 0 5
60405: PUSH
60406: LD_INT 2
60408: ARRAY
60409: PPUSH
60410: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60414: LD_ADDR_EXP 97
60418: PUSH
60419: LD_EXP 97
60423: PPUSH
60424: LD_VAR 0 4
60428: PPUSH
60429: LD_EXP 97
60433: PUSH
60434: LD_VAR 0 4
60438: ARRAY
60439: PPUSH
60440: LD_VAR 0 3
60444: PPUSH
60445: CALL_OW 3
60449: PPUSH
60450: CALL_OW 1
60454: ST_TO_ADDR
// end ; end ;
60455: GO 60284
60457: POP
60458: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60459: LD_VAR 0 1
60463: PPUSH
60464: LD_EXP 97
60468: PUSH
60469: LD_VAR 0 4
60473: ARRAY
60474: PUSH
60475: LD_INT 0
60477: PLUS
60478: PPUSH
60479: CALL_OW 505
// end ;
60483: LD_VAR 0 2
60487: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60488: LD_INT 0
60490: PPUSH
60491: PPUSH
60492: PPUSH
60493: PPUSH
// if not hack in hackTanks then
60494: LD_VAR 0 1
60498: PUSH
60499: LD_EXP 96
60503: IN
60504: NOT
60505: IFFALSE 60509
// exit ;
60507: GO 60594
// index := GetElementIndex ( hackTanks , hack ) ;
60509: LD_ADDR_VAR 0 5
60513: PUSH
60514: LD_EXP 96
60518: PPUSH
60519: LD_VAR 0 1
60523: PPUSH
60524: CALL 5977 0 2
60528: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60529: LD_ADDR_VAR 0 4
60533: PUSH
60534: DOUBLE
60535: LD_INT 1
60537: DEC
60538: ST_TO_ADDR
60539: LD_EXP 97
60543: PUSH
60544: LD_VAR 0 5
60548: ARRAY
60549: PUSH
60550: FOR_TO
60551: IFFALSE 60592
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60553: LD_EXP 97
60557: PUSH
60558: LD_VAR 0 5
60562: ARRAY
60563: PUSH
60564: LD_VAR 0 4
60568: ARRAY
60569: PUSH
60570: LD_INT 1
60572: ARRAY
60573: PUSH
60574: LD_VAR 0 2
60578: EQUAL
60579: IFFALSE 60590
// KillUnit ( vehicle ) ;
60581: LD_VAR 0 2
60585: PPUSH
60586: CALL_OW 66
60590: GO 60550
60592: POP
60593: POP
// end ;
60594: LD_VAR 0 3
60598: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
60599: LD_EXP 101
60603: NOT
60604: IFFALSE 60639
60606: GO 60608
60608: DISABLE
// begin initMiner := true ;
60609: LD_ADDR_EXP 101
60613: PUSH
60614: LD_INT 1
60616: ST_TO_ADDR
// minersList := [ ] ;
60617: LD_ADDR_EXP 102
60621: PUSH
60622: EMPTY
60623: ST_TO_ADDR
// minerMinesList := [ ] ;
60624: LD_ADDR_EXP 103
60628: PUSH
60629: EMPTY
60630: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
60631: LD_ADDR_EXP 104
60635: PUSH
60636: LD_INT 5
60638: ST_TO_ADDR
// end ;
60639: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
60640: LD_EXP 101
60644: PUSH
60645: LD_INT 34
60647: PUSH
60648: LD_EXP 23
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PPUSH
60657: CALL_OW 69
60661: AND
60662: IFFALSE 61125
60664: GO 60666
60666: DISABLE
60667: LD_INT 0
60669: PPUSH
60670: PPUSH
60671: PPUSH
60672: PPUSH
// begin enable ;
60673: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60674: LD_ADDR_VAR 0 1
60678: PUSH
60679: LD_INT 34
60681: PUSH
60682: LD_EXP 23
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PPUSH
60691: CALL_OW 69
60695: PUSH
60696: FOR_IN
60697: IFFALSE 60769
// begin if not i in minersList then
60699: LD_VAR 0 1
60703: PUSH
60704: LD_EXP 102
60708: IN
60709: NOT
60710: IFFALSE 60767
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60712: LD_ADDR_EXP 102
60716: PUSH
60717: LD_EXP 102
60721: PPUSH
60722: LD_EXP 102
60726: PUSH
60727: LD_INT 1
60729: PLUS
60730: PPUSH
60731: LD_VAR 0 1
60735: PPUSH
60736: CALL_OW 1
60740: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60741: LD_ADDR_EXP 103
60745: PUSH
60746: LD_EXP 103
60750: PPUSH
60751: LD_EXP 103
60755: PUSH
60756: LD_INT 1
60758: PLUS
60759: PPUSH
60760: EMPTY
60761: PPUSH
60762: CALL_OW 1
60766: ST_TO_ADDR
// end end ;
60767: GO 60696
60769: POP
60770: POP
// for i := minerMinesList downto 1 do
60771: LD_ADDR_VAR 0 1
60775: PUSH
60776: DOUBLE
60777: LD_EXP 103
60781: INC
60782: ST_TO_ADDR
60783: LD_INT 1
60785: PUSH
60786: FOR_DOWNTO
60787: IFFALSE 61123
// begin if IsLive ( minersList [ i ] ) then
60789: LD_EXP 102
60793: PUSH
60794: LD_VAR 0 1
60798: ARRAY
60799: PPUSH
60800: CALL_OW 300
60804: IFFALSE 60832
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
60806: LD_EXP 102
60810: PUSH
60811: LD_VAR 0 1
60815: ARRAY
60816: PPUSH
60817: LD_EXP 103
60821: PUSH
60822: LD_VAR 0 1
60826: ARRAY
60827: PPUSH
60828: CALL_OW 505
// if not minerMinesList [ i ] then
60832: LD_EXP 103
60836: PUSH
60837: LD_VAR 0 1
60841: ARRAY
60842: NOT
60843: IFFALSE 60847
// continue ;
60845: GO 60786
// for j := minerMinesList [ i ] downto 1 do
60847: LD_ADDR_VAR 0 2
60851: PUSH
60852: DOUBLE
60853: LD_EXP 103
60857: PUSH
60858: LD_VAR 0 1
60862: ARRAY
60863: INC
60864: ST_TO_ADDR
60865: LD_INT 1
60867: PUSH
60868: FOR_DOWNTO
60869: IFFALSE 61119
// begin side := GetSide ( minersList [ i ] ) ;
60871: LD_ADDR_VAR 0 3
60875: PUSH
60876: LD_EXP 102
60880: PUSH
60881: LD_VAR 0 1
60885: ARRAY
60886: PPUSH
60887: CALL_OW 255
60891: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60892: LD_ADDR_VAR 0 4
60896: PUSH
60897: LD_EXP 103
60901: PUSH
60902: LD_VAR 0 1
60906: ARRAY
60907: PUSH
60908: LD_VAR 0 2
60912: ARRAY
60913: PUSH
60914: LD_INT 1
60916: ARRAY
60917: PPUSH
60918: LD_EXP 103
60922: PUSH
60923: LD_VAR 0 1
60927: ARRAY
60928: PUSH
60929: LD_VAR 0 2
60933: ARRAY
60934: PUSH
60935: LD_INT 2
60937: ARRAY
60938: PPUSH
60939: CALL_OW 428
60943: ST_TO_ADDR
// if not tmp then
60944: LD_VAR 0 4
60948: NOT
60949: IFFALSE 60953
// continue ;
60951: GO 60868
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60953: LD_VAR 0 4
60957: PUSH
60958: LD_INT 81
60960: PUSH
60961: LD_VAR 0 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PPUSH
60970: CALL_OW 69
60974: IN
60975: PUSH
60976: LD_EXP 103
60980: PUSH
60981: LD_VAR 0 1
60985: ARRAY
60986: PUSH
60987: LD_VAR 0 2
60991: ARRAY
60992: PUSH
60993: LD_INT 1
60995: ARRAY
60996: PPUSH
60997: LD_EXP 103
61001: PUSH
61002: LD_VAR 0 1
61006: ARRAY
61007: PUSH
61008: LD_VAR 0 2
61012: ARRAY
61013: PUSH
61014: LD_INT 2
61016: ARRAY
61017: PPUSH
61018: CALL_OW 458
61022: AND
61023: IFFALSE 61117
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
61025: LD_EXP 103
61029: PUSH
61030: LD_VAR 0 1
61034: ARRAY
61035: PUSH
61036: LD_VAR 0 2
61040: ARRAY
61041: PUSH
61042: LD_INT 1
61044: ARRAY
61045: PPUSH
61046: LD_EXP 103
61050: PUSH
61051: LD_VAR 0 1
61055: ARRAY
61056: PUSH
61057: LD_VAR 0 2
61061: ARRAY
61062: PUSH
61063: LD_INT 2
61065: ARRAY
61066: PPUSH
61067: LD_VAR 0 3
61071: PPUSH
61072: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61076: LD_ADDR_EXP 103
61080: PUSH
61081: LD_EXP 103
61085: PPUSH
61086: LD_VAR 0 1
61090: PPUSH
61091: LD_EXP 103
61095: PUSH
61096: LD_VAR 0 1
61100: ARRAY
61101: PPUSH
61102: LD_VAR 0 2
61106: PPUSH
61107: CALL_OW 3
61111: PPUSH
61112: CALL_OW 1
61116: ST_TO_ADDR
// end ; end ;
61117: GO 60868
61119: POP
61120: POP
// end ;
61121: GO 60786
61123: POP
61124: POP
// end ;
61125: PPOPN 4
61127: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
61128: LD_INT 0
61130: PPUSH
61131: PPUSH
// result := false ;
61132: LD_ADDR_VAR 0 4
61136: PUSH
61137: LD_INT 0
61139: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61140: LD_VAR 0 1
61144: PPUSH
61145: CALL_OW 264
61149: PUSH
61150: LD_EXP 23
61154: EQUAL
61155: NOT
61156: IFFALSE 61160
// exit ;
61158: GO 61400
// index := GetElementIndex ( minersList , unit ) ;
61160: LD_ADDR_VAR 0 5
61164: PUSH
61165: LD_EXP 102
61169: PPUSH
61170: LD_VAR 0 1
61174: PPUSH
61175: CALL 5977 0 2
61179: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61180: LD_EXP 103
61184: PUSH
61185: LD_VAR 0 5
61189: ARRAY
61190: PUSH
61191: LD_EXP 104
61195: GREATEREQUAL
61196: IFFALSE 61200
// exit ;
61198: GO 61400
// ComMoveXY ( unit , x , y ) ;
61200: LD_VAR 0 1
61204: PPUSH
61205: LD_VAR 0 2
61209: PPUSH
61210: LD_VAR 0 3
61214: PPUSH
61215: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61219: LD_INT 35
61221: PPUSH
61222: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61226: LD_VAR 0 1
61230: PPUSH
61231: LD_VAR 0 2
61235: PPUSH
61236: LD_VAR 0 3
61240: PPUSH
61241: CALL 37263 0 3
61245: NOT
61246: PUSH
61247: LD_VAR 0 1
61251: PPUSH
61252: CALL_OW 314
61256: AND
61257: IFFALSE 61261
// exit ;
61259: GO 61400
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61261: LD_VAR 0 2
61265: PPUSH
61266: LD_VAR 0 3
61270: PPUSH
61271: CALL_OW 428
61275: PUSH
61276: LD_VAR 0 1
61280: EQUAL
61281: PUSH
61282: LD_VAR 0 1
61286: PPUSH
61287: CALL_OW 314
61291: NOT
61292: AND
61293: IFFALSE 61219
// PlaySoundXY ( x , y , PlantMine ) ;
61295: LD_VAR 0 2
61299: PPUSH
61300: LD_VAR 0 3
61304: PPUSH
61305: LD_STRING PlantMine
61307: PPUSH
61308: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
61312: LD_VAR 0 2
61316: PPUSH
61317: LD_VAR 0 3
61321: PPUSH
61322: LD_VAR 0 1
61326: PPUSH
61327: CALL_OW 255
61331: PPUSH
61332: LD_INT 0
61334: PPUSH
61335: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61339: LD_ADDR_EXP 103
61343: PUSH
61344: LD_EXP 103
61348: PPUSH
61349: LD_VAR 0 5
61353: PUSH
61354: LD_EXP 103
61358: PUSH
61359: LD_VAR 0 5
61363: ARRAY
61364: PUSH
61365: LD_INT 1
61367: PLUS
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PPUSH
61373: LD_VAR 0 2
61377: PUSH
61378: LD_VAR 0 3
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PPUSH
61387: CALL 6192 0 3
61391: ST_TO_ADDR
// result := true ;
61392: LD_ADDR_VAR 0 4
61396: PUSH
61397: LD_INT 1
61399: ST_TO_ADDR
// end ;
61400: LD_VAR 0 4
61404: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61405: LD_INT 0
61407: PPUSH
61408: PPUSH
61409: PPUSH
// if not unit in minersList then
61410: LD_VAR 0 1
61414: PUSH
61415: LD_EXP 102
61419: IN
61420: NOT
61421: IFFALSE 61425
// exit ;
61423: GO 61817
// index := GetElementIndex ( minersList , unit ) ;
61425: LD_ADDR_VAR 0 6
61429: PUSH
61430: LD_EXP 102
61434: PPUSH
61435: LD_VAR 0 1
61439: PPUSH
61440: CALL 5977 0 2
61444: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61445: LD_ADDR_VAR 0 5
61449: PUSH
61450: DOUBLE
61451: LD_EXP 103
61455: PUSH
61456: LD_VAR 0 6
61460: ARRAY
61461: INC
61462: ST_TO_ADDR
61463: LD_INT 1
61465: PUSH
61466: FOR_DOWNTO
61467: IFFALSE 61628
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
61469: LD_EXP 103
61473: PUSH
61474: LD_VAR 0 6
61478: ARRAY
61479: PUSH
61480: LD_VAR 0 5
61484: ARRAY
61485: PUSH
61486: LD_INT 1
61488: ARRAY
61489: PUSH
61490: LD_VAR 0 2
61494: EQUAL
61495: PUSH
61496: LD_EXP 103
61500: PUSH
61501: LD_VAR 0 6
61505: ARRAY
61506: PUSH
61507: LD_VAR 0 5
61511: ARRAY
61512: PUSH
61513: LD_INT 2
61515: ARRAY
61516: PUSH
61517: LD_VAR 0 3
61521: EQUAL
61522: AND
61523: IFFALSE 61626
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61525: LD_EXP 103
61529: PUSH
61530: LD_VAR 0 6
61534: ARRAY
61535: PUSH
61536: LD_VAR 0 5
61540: ARRAY
61541: PUSH
61542: LD_INT 1
61544: ARRAY
61545: PPUSH
61546: LD_EXP 103
61550: PUSH
61551: LD_VAR 0 6
61555: ARRAY
61556: PUSH
61557: LD_VAR 0 5
61561: ARRAY
61562: PUSH
61563: LD_INT 2
61565: ARRAY
61566: PPUSH
61567: LD_VAR 0 1
61571: PPUSH
61572: CALL_OW 255
61576: PPUSH
61577: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61581: LD_ADDR_EXP 103
61585: PUSH
61586: LD_EXP 103
61590: PPUSH
61591: LD_VAR 0 6
61595: PPUSH
61596: LD_EXP 103
61600: PUSH
61601: LD_VAR 0 6
61605: ARRAY
61606: PPUSH
61607: LD_VAR 0 5
61611: PPUSH
61612: CALL_OW 3
61616: PPUSH
61617: CALL_OW 1
61621: ST_TO_ADDR
// exit ;
61622: POP
61623: POP
61624: GO 61817
// end ; end ;
61626: GO 61466
61628: POP
61629: POP
// for i := minerMinesList [ index ] downto 1 do
61630: LD_ADDR_VAR 0 5
61634: PUSH
61635: DOUBLE
61636: LD_EXP 103
61640: PUSH
61641: LD_VAR 0 6
61645: ARRAY
61646: INC
61647: ST_TO_ADDR
61648: LD_INT 1
61650: PUSH
61651: FOR_DOWNTO
61652: IFFALSE 61815
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61654: LD_EXP 103
61658: PUSH
61659: LD_VAR 0 6
61663: ARRAY
61664: PUSH
61665: LD_VAR 0 5
61669: ARRAY
61670: PUSH
61671: LD_INT 1
61673: ARRAY
61674: PPUSH
61675: LD_EXP 103
61679: PUSH
61680: LD_VAR 0 6
61684: ARRAY
61685: PUSH
61686: LD_VAR 0 5
61690: ARRAY
61691: PUSH
61692: LD_INT 2
61694: ARRAY
61695: PPUSH
61696: LD_VAR 0 2
61700: PPUSH
61701: LD_VAR 0 3
61705: PPUSH
61706: CALL_OW 298
61710: PUSH
61711: LD_INT 6
61713: LESS
61714: IFFALSE 61813
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61716: LD_EXP 103
61720: PUSH
61721: LD_VAR 0 6
61725: ARRAY
61726: PUSH
61727: LD_VAR 0 5
61731: ARRAY
61732: PUSH
61733: LD_INT 1
61735: ARRAY
61736: PPUSH
61737: LD_EXP 103
61741: PUSH
61742: LD_VAR 0 6
61746: ARRAY
61747: PUSH
61748: LD_VAR 0 5
61752: ARRAY
61753: PUSH
61754: LD_INT 2
61756: ARRAY
61757: PPUSH
61758: LD_VAR 0 1
61762: PPUSH
61763: CALL_OW 255
61767: PPUSH
61768: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61772: LD_ADDR_EXP 103
61776: PUSH
61777: LD_EXP 103
61781: PPUSH
61782: LD_VAR 0 6
61786: PPUSH
61787: LD_EXP 103
61791: PUSH
61792: LD_VAR 0 6
61796: ARRAY
61797: PPUSH
61798: LD_VAR 0 5
61802: PPUSH
61803: CALL_OW 3
61807: PPUSH
61808: CALL_OW 1
61812: ST_TO_ADDR
// end ; end ;
61813: GO 61651
61815: POP
61816: POP
// end ;
61817: LD_VAR 0 4
61821: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61822: LD_INT 0
61824: PPUSH
61825: PPUSH
61826: PPUSH
61827: PPUSH
61828: PPUSH
61829: PPUSH
61830: PPUSH
61831: PPUSH
61832: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61833: LD_VAR 0 1
61837: PPUSH
61838: CALL_OW 264
61842: PUSH
61843: LD_EXP 23
61847: EQUAL
61848: NOT
61849: PUSH
61850: LD_VAR 0 1
61854: PUSH
61855: LD_EXP 102
61859: IN
61860: NOT
61861: OR
61862: IFFALSE 61866
// exit ;
61864: GO 62188
// index := GetElementIndex ( minersList , unit ) ;
61866: LD_ADDR_VAR 0 6
61870: PUSH
61871: LD_EXP 102
61875: PPUSH
61876: LD_VAR 0 1
61880: PPUSH
61881: CALL 5977 0 2
61885: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61886: LD_ADDR_VAR 0 8
61890: PUSH
61891: LD_EXP 104
61895: PUSH
61896: LD_EXP 103
61900: PUSH
61901: LD_VAR 0 6
61905: ARRAY
61906: MINUS
61907: ST_TO_ADDR
// if not minesFreeAmount then
61908: LD_VAR 0 8
61912: NOT
61913: IFFALSE 61917
// exit ;
61915: GO 62188
// tmp := [ ] ;
61917: LD_ADDR_VAR 0 7
61921: PUSH
61922: EMPTY
61923: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61924: LD_ADDR_VAR 0 5
61928: PUSH
61929: DOUBLE
61930: LD_INT 1
61932: DEC
61933: ST_TO_ADDR
61934: LD_VAR 0 8
61938: PUSH
61939: FOR_TO
61940: IFFALSE 62135
// begin _d := rand ( 0 , 5 ) ;
61942: LD_ADDR_VAR 0 11
61946: PUSH
61947: LD_INT 0
61949: PPUSH
61950: LD_INT 5
61952: PPUSH
61953: CALL_OW 12
61957: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61958: LD_ADDR_VAR 0 12
61962: PUSH
61963: LD_INT 2
61965: PPUSH
61966: LD_INT 6
61968: PPUSH
61969: CALL_OW 12
61973: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61974: LD_ADDR_VAR 0 9
61978: PUSH
61979: LD_VAR 0 2
61983: PPUSH
61984: LD_VAR 0 11
61988: PPUSH
61989: LD_VAR 0 12
61993: PPUSH
61994: CALL_OW 272
61998: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61999: LD_ADDR_VAR 0 10
62003: PUSH
62004: LD_VAR 0 3
62008: PPUSH
62009: LD_VAR 0 11
62013: PPUSH
62014: LD_VAR 0 12
62018: PPUSH
62019: CALL_OW 273
62023: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
62024: LD_VAR 0 9
62028: PPUSH
62029: LD_VAR 0 10
62033: PPUSH
62034: CALL_OW 488
62038: PUSH
62039: LD_VAR 0 9
62043: PUSH
62044: LD_VAR 0 10
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_VAR 0 7
62057: IN
62058: NOT
62059: AND
62060: PUSH
62061: LD_VAR 0 9
62065: PPUSH
62066: LD_VAR 0 10
62070: PPUSH
62071: CALL_OW 458
62075: NOT
62076: AND
62077: IFFALSE 62119
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
62079: LD_ADDR_VAR 0 7
62083: PUSH
62084: LD_VAR 0 7
62088: PPUSH
62089: LD_VAR 0 7
62093: PUSH
62094: LD_INT 1
62096: PLUS
62097: PPUSH
62098: LD_VAR 0 9
62102: PUSH
62103: LD_VAR 0 10
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PPUSH
62112: CALL_OW 1
62116: ST_TO_ADDR
62117: GO 62133
// i := i - 1 ;
62119: LD_ADDR_VAR 0 5
62123: PUSH
62124: LD_VAR 0 5
62128: PUSH
62129: LD_INT 1
62131: MINUS
62132: ST_TO_ADDR
// end ;
62133: GO 61939
62135: POP
62136: POP
// for i in tmp do
62137: LD_ADDR_VAR 0 5
62141: PUSH
62142: LD_VAR 0 7
62146: PUSH
62147: FOR_IN
62148: IFFALSE 62186
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62150: LD_VAR 0 1
62154: PPUSH
62155: LD_VAR 0 5
62159: PUSH
62160: LD_INT 1
62162: ARRAY
62163: PPUSH
62164: LD_VAR 0 5
62168: PUSH
62169: LD_INT 2
62171: ARRAY
62172: PPUSH
62173: CALL 61128 0 3
62177: NOT
62178: IFFALSE 62184
// exit ;
62180: POP
62181: POP
62182: GO 62188
62184: GO 62147
62186: POP
62187: POP
// end ;
62188: LD_VAR 0 4
62192: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
62193: LD_INT 0
62195: PPUSH
62196: PPUSH
62197: PPUSH
62198: PPUSH
62199: PPUSH
62200: PPUSH
62201: PPUSH
// if not GetClass ( unit ) = class_sniper then
62202: LD_VAR 0 1
62206: PPUSH
62207: CALL_OW 257
62211: PUSH
62212: LD_INT 5
62214: EQUAL
62215: NOT
62216: IFFALSE 62220
// exit ;
62218: GO 62608
// dist := 8 ;
62220: LD_ADDR_VAR 0 5
62224: PUSH
62225: LD_INT 8
62227: ST_TO_ADDR
// viewRange := 12 ;
62228: LD_ADDR_VAR 0 7
62232: PUSH
62233: LD_INT 12
62235: ST_TO_ADDR
// side := GetSide ( unit ) ;
62236: LD_ADDR_VAR 0 6
62240: PUSH
62241: LD_VAR 0 1
62245: PPUSH
62246: CALL_OW 255
62250: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62251: LD_INT 61
62253: PPUSH
62254: LD_VAR 0 6
62258: PPUSH
62259: CALL_OW 321
62263: PUSH
62264: LD_INT 2
62266: EQUAL
62267: IFFALSE 62277
// viewRange := 16 ;
62269: LD_ADDR_VAR 0 7
62273: PUSH
62274: LD_INT 16
62276: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62277: LD_VAR 0 1
62281: PPUSH
62282: LD_VAR 0 2
62286: PPUSH
62287: LD_VAR 0 3
62291: PPUSH
62292: CALL_OW 297
62296: PUSH
62297: LD_VAR 0 5
62301: GREATER
62302: IFFALSE 62381
// begin ComMoveXY ( unit , x , y ) ;
62304: LD_VAR 0 1
62308: PPUSH
62309: LD_VAR 0 2
62313: PPUSH
62314: LD_VAR 0 3
62318: PPUSH
62319: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62323: LD_INT 35
62325: PPUSH
62326: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62330: LD_VAR 0 1
62334: PPUSH
62335: LD_VAR 0 2
62339: PPUSH
62340: LD_VAR 0 3
62344: PPUSH
62345: CALL 37263 0 3
62349: NOT
62350: IFFALSE 62354
// exit ;
62352: GO 62608
// until GetDistUnitXY ( unit , x , y ) < dist ;
62354: LD_VAR 0 1
62358: PPUSH
62359: LD_VAR 0 2
62363: PPUSH
62364: LD_VAR 0 3
62368: PPUSH
62369: CALL_OW 297
62373: PUSH
62374: LD_VAR 0 5
62378: LESS
62379: IFFALSE 62323
// end ; ComTurnXY ( unit , x , y ) ;
62381: LD_VAR 0 1
62385: PPUSH
62386: LD_VAR 0 2
62390: PPUSH
62391: LD_VAR 0 3
62395: PPUSH
62396: CALL_OW 118
// wait ( 5 ) ;
62400: LD_INT 5
62402: PPUSH
62403: CALL_OW 67
// _d := GetDir ( unit ) ;
62407: LD_ADDR_VAR 0 10
62411: PUSH
62412: LD_VAR 0 1
62416: PPUSH
62417: CALL_OW 254
62421: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
62422: LD_ADDR_VAR 0 8
62426: PUSH
62427: LD_VAR 0 1
62431: PPUSH
62432: CALL_OW 250
62436: PPUSH
62437: LD_VAR 0 10
62441: PPUSH
62442: LD_VAR 0 5
62446: PPUSH
62447: CALL_OW 272
62451: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
62452: LD_ADDR_VAR 0 9
62456: PUSH
62457: LD_VAR 0 1
62461: PPUSH
62462: CALL_OW 251
62466: PPUSH
62467: LD_VAR 0 10
62471: PPUSH
62472: LD_VAR 0 5
62476: PPUSH
62477: CALL_OW 273
62481: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62482: LD_VAR 0 8
62486: PPUSH
62487: LD_VAR 0 9
62491: PPUSH
62492: CALL_OW 488
62496: NOT
62497: IFFALSE 62501
// exit ;
62499: GO 62608
// ComAnimCustom ( unit , 1 ) ;
62501: LD_VAR 0 1
62505: PPUSH
62506: LD_INT 1
62508: PPUSH
62509: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62513: LD_VAR 0 8
62517: PPUSH
62518: LD_VAR 0 9
62522: PPUSH
62523: LD_VAR 0 6
62527: PPUSH
62528: LD_VAR 0 7
62532: PPUSH
62533: CALL_OW 330
// repeat wait ( 1 ) ;
62537: LD_INT 1
62539: PPUSH
62540: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
62544: LD_VAR 0 1
62548: PPUSH
62549: CALL_OW 316
62553: PUSH
62554: LD_VAR 0 1
62558: PPUSH
62559: CALL_OW 314
62563: OR
62564: PUSH
62565: LD_VAR 0 1
62569: PPUSH
62570: CALL_OW 302
62574: NOT
62575: OR
62576: PUSH
62577: LD_VAR 0 1
62581: PPUSH
62582: CALL_OW 301
62586: OR
62587: IFFALSE 62537
// RemoveSeeing ( _x , _y , side ) ;
62589: LD_VAR 0 8
62593: PPUSH
62594: LD_VAR 0 9
62598: PPUSH
62599: LD_VAR 0 6
62603: PPUSH
62604: CALL_OW 331
// end ;
62608: LD_VAR 0 4
62612: RET
