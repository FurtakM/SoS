// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 21374 0 0
// PrepareRussian ;
  12: CALL 2056 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3854 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 68261 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 32329 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 30105 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: IFTRUE 733
 727: PUSH
 728: LD_EXP 1
 732: OR
 733: IFFALSE 760
// begin Harris := NewCharacter ( Harris ) ;
 735: LD_ADDR_EXP 59
 739: PUSH
 740: LD_STRING Harris
 742: PPUSH
 743: CALL_OW 25
 747: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 748: LD_EXP 59
 752: PPUSH
 753: LD_INT 33
 755: PPUSH
 756: CALL_OW 336
// end ; uc_side := 2 ;
 760: LD_ADDR_OWVAR 20
 764: PUSH
 765: LD_INT 2
 767: ST_TO_ADDR
// uc_nation := 2 ;
 768: LD_ADDR_OWVAR 21
 772: PUSH
 773: LD_INT 2
 775: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 776: LD_ADDR_EXP 46
 780: PUSH
 781: LD_STRING Heike
 783: PPUSH
 784: LD_EXP 1
 788: NOT
 789: PPUSH
 790: LD_EXP 2
 794: PPUSH
 795: CALL 30105 0 3
 799: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 800: LD_ADDR_EXP 49
 804: PUSH
 805: LD_STRING Ibrahim
 807: PPUSH
 808: LD_EXP 1
 812: NOT
 813: PPUSH
 814: LD_EXP 2
 818: PPUSH
 819: CALL 30105 0 3
 823: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 824: LD_ADDR_EXP 47
 828: PUSH
 829: LD_STRING Givi
 831: PPUSH
 832: LD_EXP 1
 836: NOT
 837: PPUSH
 838: LD_EXP 2
 842: PPUSH
 843: CALL 30105 0 3
 847: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 848: LD_ADDR_EXP 50
 852: PUSH
 853: LD_STRING Kamil
 855: PPUSH
 856: LD_EXP 1
 860: NOT
 861: PPUSH
 862: LD_EXP 2
 866: PPUSH
 867: CALL 30105 0 3
 871: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 872: LD_ADDR_EXP 51
 876: PUSH
 877: LD_STRING Kaia
 879: PPUSH
 880: LD_EXP 1
 884: NOT
 885: PPUSH
 886: LD_EXP 2
 890: PPUSH
 891: CALL 30105 0 3
 895: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 896: LD_ADDR_EXP 52
 900: PUSH
 901: LD_STRING Sophia
 903: PPUSH
 904: LD_EXP 1
 908: NOT
 909: PPUSH
 910: LD_EXP 2
 914: PPUSH
 915: CALL 30105 0 3
 919: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 920: LD_ADDR_EXP 53
 924: PUSH
 925: LD_STRING Markov
 927: PPUSH
 928: LD_EXP 1
 932: NOT
 933: PPUSH
 934: LD_EXP 2
 938: PPUSH
 939: CALL 30105 0 3
 943: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 944: LD_ADDR_EXP 56
 948: PUSH
 949: LD_STRING Aviradze
 951: PPUSH
 952: LD_EXP 1
 956: NOT
 957: PPUSH
 958: LD_EXP 2
 962: PPUSH
 963: CALL 30105 0 3
 967: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 968: LD_ADDR_EXP 55
 972: PUSH
 973: LD_STRING Kurt
 975: PPUSH
 976: LD_EXP 1
 980: NOT
 981: PPUSH
 982: LD_EXP 2
 986: PPUSH
 987: CALL 30105 0 3
 991: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 992: LD_ADDR_EXP 48
 996: PUSH
 997: LD_STRING Mike
 999: PPUSH
1000: LD_EXP 1
1004: NOT
1005: PPUSH
1006: LD_EXP 2
1010: PPUSH
1011: CALL 30105 0 3
1015: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1016: LD_ADDR_EXP 54
1020: PUSH
1021: LD_STRING Olaf
1023: PPUSH
1024: LD_EXP 1
1028: NOT
1029: PPUSH
1030: LD_EXP 2
1034: PPUSH
1035: CALL 30105 0 3
1039: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1040: LD_ADDR_EXP 57
1044: PUSH
1045: LD_STRING 07_others
1047: PPUSH
1048: CALL_OW 31
1052: ST_TO_ADDR
// end ;
1053: LD_VAR 0 1
1057: RET
// export function PrepareGame ; var i ; begin
1058: LD_INT 0
1060: PPUSH
1061: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1062: LD_EXP 46
1066: PPUSH
1067: LD_INT 23
1069: PPUSH
1070: CALL_OW 52
// if Givi then
1074: LD_EXP 47
1078: IFFALSE 1116
// begin SetSide ( Givi , 5 ) ;
1080: LD_EXP 47
1084: PPUSH
1085: LD_INT 5
1087: PPUSH
1088: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1092: LD_EXP 47
1096: PPUSH
1097: LD_INT 9
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: CALL_OW 49
// ComHold ( Givi ) ;
1107: LD_EXP 47
1111: PPUSH
1112: CALL_OW 140
// end ; if Markov then
1116: LD_EXP 53
1120: IFFALSE 1158
// begin SetSide ( Markov , 5 ) ;
1122: LD_EXP 53
1126: PPUSH
1127: LD_INT 5
1129: PPUSH
1130: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1134: LD_EXP 53
1138: PPUSH
1139: LD_INT 3
1141: PPUSH
1142: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1146: LD_EXP 53
1150: PPUSH
1151: LD_INT 61
1153: PPUSH
1154: CALL_OW 52
// end ; if Mike then
1158: LD_EXP 48
1162: IFFALSE 1200
// begin SetSide ( Mike , 5 ) ;
1164: LD_EXP 48
1168: PPUSH
1169: LD_INT 5
1171: PPUSH
1172: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1176: LD_EXP 48
1180: PPUSH
1181: LD_INT 17
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// ComHold ( Mike ) ;
1191: LD_EXP 48
1195: PPUSH
1196: CALL_OW 140
// end ; if Olaf then
1200: LD_EXP 54
1204: IFFALSE 1245
// begin SetSide ( Olaf , 5 ) ;
1206: LD_EXP 54
1210: PPUSH
1211: LD_INT 5
1213: PPUSH
1214: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1218: LD_EXP 54
1222: PPUSH
1223: LD_INT 16
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1233: LD_EXP 54
1237: PPUSH
1238: LD_INT 3
1240: PPUSH
1241: CALL 71583 0 2
// end ; if Kamil then
1245: LD_EXP 50
1249: IFFALSE 1275
// begin SetSide ( Kamil , 5 ) ;
1251: LD_EXP 50
1255: PPUSH
1256: LD_INT 5
1258: PPUSH
1259: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1263: LD_EXP 50
1267: PPUSH
1268: LD_INT 109
1270: PPUSH
1271: CALL_OW 52
// end ; if Kurt then
1275: LD_EXP 55
1279: IFFALSE 1305
// begin SetSide ( Kurt , 5 ) ;
1281: LD_EXP 55
1285: PPUSH
1286: LD_INT 5
1288: PPUSH
1289: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1293: LD_EXP 55
1297: PPUSH
1298: LD_INT 169
1300: PPUSH
1301: CALL_OW 52
// end ; if Kaia then
1305: LD_EXP 51
1309: IFFALSE 1335
// begin SetSide ( Kaia , 5 ) ;
1311: LD_EXP 51
1315: PPUSH
1316: LD_INT 5
1318: PPUSH
1319: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1323: LD_EXP 51
1327: PPUSH
1328: LD_INT 147
1330: PPUSH
1331: CALL_OW 52
// end ; if Sophia then
1335: LD_EXP 52
1339: IFFALSE 1380
// begin SetSide ( Sophia , 5 ) ;
1341: LD_EXP 52
1345: PPUSH
1346: LD_INT 5
1348: PPUSH
1349: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1353: LD_EXP 52
1357: PPUSH
1358: LD_INT 142
1360: PPUSH
1361: LD_INT 96
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 48
// ComHold ( Sophia ) ;
1371: LD_EXP 52
1375: PPUSH
1376: CALL_OW 140
// end ; if Harris then
1380: LD_EXP 59
1384: IFFALSE 1422
// begin SetSide ( Harris , 4 ) ;
1386: LD_EXP 59
1390: PPUSH
1391: LD_INT 4
1393: PPUSH
1394: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1398: LD_EXP 59
1402: PPUSH
1403: LD_INT 20
1405: PPUSH
1406: LD_INT 0
1408: PPUSH
1409: CALL_OW 49
// ComHold ( i ) ;
1413: LD_VAR 0 2
1417: PPUSH
1418: CALL_OW 140
// end ; if Doug then
1422: LD_EXP 60
1426: IFFALSE 1452
// begin SetSide ( Doug , 4 ) ;
1428: LD_EXP 60
1432: PPUSH
1433: LD_INT 4
1435: PPUSH
1436: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1440: LD_EXP 60
1444: PPUSH
1445: LD_INT 106
1447: PPUSH
1448: CALL_OW 52
// end ; if Aviradze then
1452: LD_EXP 56
1456: IFFALSE 1482
// begin SetSide ( Aviradze , 5 ) ;
1458: LD_EXP 56
1462: PPUSH
1463: LD_INT 5
1465: PPUSH
1466: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1470: LD_EXP 56
1474: PPUSH
1475: LD_INT 119
1477: PPUSH
1478: CALL_OW 52
// end ; if Ibrahim then
1482: LD_EXP 49
1486: IFFALSE 1512
// begin SetSide ( Ibrahim , 5 ) ;
1488: LD_EXP 49
1492: PPUSH
1493: LD_INT 5
1495: PPUSH
1496: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1500: LD_EXP 49
1504: PPUSH
1505: LD_INT 119
1507: PPUSH
1508: CALL_OW 52
// end ; if Jerry then
1512: LD_EXP 61
1516: IFFALSE 1557
// begin SetSide ( Jerry , 4 ) ;
1518: LD_EXP 61
1522: PPUSH
1523: LD_INT 4
1525: PPUSH
1526: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1530: LD_EXP 61
1534: PPUSH
1535: LD_INT 119
1537: PPUSH
1538: LD_INT 59
1540: PPUSH
1541: LD_INT 0
1543: PPUSH
1544: CALL_OW 48
// ComHold ( Jerry ) ;
1548: LD_EXP 61
1552: PPUSH
1553: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1557: LD_EXP 65
1561: PPUSH
1562: LD_INT 119
1564: PPUSH
1565: CALL_OW 52
// for i in americanSquad do
1569: LD_ADDR_VAR 0 2
1573: PUSH
1574: LD_EXP 58
1578: PUSH
1579: FOR_IN
1580: IFFALSE 1608
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1582: LD_VAR 0 2
1586: PPUSH
1587: LD_INT 21
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 49
// ComHold ( i ) ;
1597: LD_VAR 0 2
1601: PPUSH
1602: CALL_OW 140
// end ;
1606: GO 1579
1608: POP
1609: POP
// for i in heikeSecondSquad do
1610: LD_ADDR_VAR 0 2
1614: PUSH
1615: LD_EXP 57
1619: PUSH
1620: FOR_IN
1621: IFFALSE 1661
// begin SetSide ( i , 5 ) ;
1623: LD_VAR 0 2
1627: PPUSH
1628: LD_INT 5
1630: PPUSH
1631: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1635: LD_VAR 0 2
1639: PPUSH
1640: LD_INT 22
1642: PPUSH
1643: LD_INT 0
1645: PPUSH
1646: CALL_OW 49
// ComHold ( i ) ;
1650: LD_VAR 0 2
1654: PPUSH
1655: CALL_OW 140
// end ;
1659: GO 1620
1661: POP
1662: POP
// if not hasVodka then
1663: LD_EXP 4
1667: NOT
1668: IFFALSE 1727
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1670: LD_ADDR_VAR 0 2
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: LD_INT 22
1680: PUSH
1681: LD_INT 2
1683: PUSH
1684: EMPTY
1685: LIST
1686: LIST
1687: PUSH
1688: LD_INT 22
1690: PUSH
1691: LD_INT 5
1693: PUSH
1694: EMPTY
1695: LIST
1696: LIST
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: LIST
1702: PPUSH
1703: CALL_OW 69
1707: PUSH
1708: FOR_IN
1709: IFFALSE 1725
// SetLives ( i , 500 ) ;
1711: LD_VAR 0 2
1715: PPUSH
1716: LD_INT 500
1718: PPUSH
1719: CALL_OW 234
1723: GO 1708
1725: POP
1726: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1727: LD_ADDR_VAR 0 2
1731: PUSH
1732: LD_INT 22
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: CALL_OW 69
1746: PUSH
1747: FOR_IN
1748: IFFALSE 1764
// SetLives ( i , 500 ) ;
1750: LD_VAR 0 2
1754: PPUSH
1755: LD_INT 500
1757: PPUSH
1758: CALL_OW 234
1762: GO 1747
1764: POP
1765: POP
// end ;
1766: LD_VAR 0 1
1770: RET
// export function SetClassKaiaRevolver ; begin
1771: LD_INT 0
1773: PPUSH
// if not IsOk ( Kaia ) then
1774: LD_EXP 51
1778: PPUSH
1779: CALL_OW 302
1783: NOT
1784: IFFALSE 1788
// exit ;
1786: GO 1835
// repeat wait ( 1 ) ;
1788: LD_INT 1
1790: PPUSH
1791: CALL_OW 67
// ComWalk ( Kaia ) ;
1795: LD_EXP 51
1799: PPUSH
1800: CALL_OW 138
// until not Crawls ( Kaia ) ;
1804: LD_EXP 51
1808: PPUSH
1809: CALL_OW 318
1813: NOT
1814: IFFALSE 1788
// SetClass ( Kaia , class_revolver ) ;
1816: LD_EXP 51
1820: PPUSH
1821: LD_INT 34
1823: PPUSH
1824: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1828: LD_STRING ACH_REVOLVER
1830: PPUSH
1831: CALL_OW 543
// end ;
1835: LD_VAR 0 1
1839: RET
// export function SpawnHeikeAsRussian ; begin
1840: LD_INT 0
1842: PPUSH
// RemoveUnit ( Heike ) ;
1843: LD_EXP 46
1847: PPUSH
1848: CALL_OW 64
// heikeTmp := Heike ;
1852: LD_ADDR_EXP 62
1856: PUSH
1857: LD_EXP 46
1861: ST_TO_ADDR
// uc_side := 2 ;
1862: LD_ADDR_OWVAR 20
1866: PUSH
1867: LD_INT 2
1869: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1870: LD_ADDR_EXP 46
1874: PUSH
1875: LD_STRING HeikeRu
1877: PPUSH
1878: CALL_OW 25
1882: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1883: LD_EXP 62
1887: PPUSH
1888: LD_EXP 46
1892: PPUSH
1893: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1897: LD_EXP 46
1901: PPUSH
1902: LD_INT 165
1904: PPUSH
1905: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1909: LD_EXP 46
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: CALL_OW 336
// heikeAsRussian := true ;
1921: LD_ADDR_EXP 27
1925: PUSH
1926: LD_INT 1
1928: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1929: LD_STRING M1-laundry-out
1931: PPUSH
1932: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1936: LD_STRING ACH_HEIKERU
1938: PPUSH
1939: CALL_OW 543
// end ;
1943: LD_VAR 0 1
1947: RET
// export function SpawnGiviAsRussian ; begin
1948: LD_INT 0
1950: PPUSH
// RemoveUnit ( Givi ) ;
1951: LD_EXP 47
1955: PPUSH
1956: CALL_OW 64
// giviTmp := Givi ;
1960: LD_ADDR_EXP 63
1964: PUSH
1965: LD_EXP 47
1969: ST_TO_ADDR
// uc_side := 2 ;
1970: LD_ADDR_OWVAR 20
1974: PUSH
1975: LD_INT 2
1977: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1978: LD_ADDR_EXP 47
1982: PUSH
1983: LD_STRING GiviRu
1985: PPUSH
1986: CALL_OW 25
1990: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1991: LD_EXP 63
1995: PPUSH
1996: LD_EXP 47
2000: PPUSH
2001: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
2005: LD_EXP 47
2009: PPUSH
2010: LD_INT 165
2012: PPUSH
2013: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
2017: LD_EXP 47
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: CALL_OW 336
// giviAsRussian := true ;
2029: LD_ADDR_EXP 28
2033: PUSH
2034: LD_INT 1
2036: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2037: LD_STRING M1-laundry-out
2039: PPUSH
2040: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2044: LD_STRING ACH_GIVIRU
2046: PPUSH
2047: CALL_OW 543
// end ; end_of_file
2051: LD_VAR 0 1
2055: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2056: LD_INT 0
2058: PPUSH
2059: PPUSH
2060: PPUSH
2061: PPUSH
2062: PPUSH
// uc_side := 3 ;
2063: LD_ADDR_OWVAR 20
2067: PUSH
2068: LD_INT 3
2070: ST_TO_ADDR
// uc_nation := 3 ;
2071: LD_ADDR_OWVAR 21
2075: PUSH
2076: LD_INT 3
2078: ST_TO_ADDR
// SetBName ( ruMainBase , yagoda ) ;
2079: LD_INT 2
2081: PPUSH
2082: LD_STRING yagoda
2084: PPUSH
2085: CALL_OW 500
// SetBName ( ruKitchen , kitchen ) ;
2089: LD_INT 192
2091: PPUSH
2092: LD_STRING kitchen
2094: PPUSH
2095: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2099: LD_INT 165
2101: PPUSH
2102: LD_STRING laundry
2104: PPUSH
2105: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2109: LD_INT 54
2111: PPUSH
2112: LD_STRING adminSection
2114: PPUSH
2115: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2119: LD_ADDR_VAR 0 2
2123: PUSH
2124: LD_INT 21
2126: PUSH
2127: LD_INT 3
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: PPUSH
2134: CALL_OW 69
2138: PUSH
2139: FOR_IN
2140: IFFALSE 2156
// SetBLevel ( i , 7 ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_INT 7
2149: PPUSH
2150: CALL_OW 241
2154: GO 2139
2156: POP
2157: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: LD_INT 22
2165: PUSH
2166: LD_INT 3
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: PUSH
2173: LD_INT 2
2175: PUSH
2176: LD_INT 30
2178: PUSH
2179: LD_INT 0
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: PUSH
2186: LD_INT 30
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: LIST
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PPUSH
2205: CALL_OW 69
2209: PUSH
2210: FOR_IN
2211: IFFALSE 2275
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2213: LD_VAR 0 2
2217: PPUSH
2218: CALL_OW 274
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: LD_INT 1000
2228: PPUSH
2229: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2233: LD_VAR 0 2
2237: PPUSH
2238: CALL_OW 274
2242: PPUSH
2243: LD_INT 2
2245: PPUSH
2246: LD_INT 1000
2248: PPUSH
2249: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2253: LD_VAR 0 2
2257: PPUSH
2258: CALL_OW 274
2262: PPUSH
2263: LD_INT 3
2265: PPUSH
2266: LD_INT 100
2268: PPUSH
2269: CALL_OW 277
// end ;
2273: GO 2210
2275: POP
2276: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2277: LD_ADDR_VAR 0 2
2281: PUSH
2282: LD_INT 22
2284: PUSH
2285: LD_INT 3
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: PUSH
2292: LD_INT 30
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: EMPTY
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PUSH
2311: FOR_IN
2312: IFFALSE 2346
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2314: LD_INT 0
2316: PPUSH
2317: LD_INT 5
2319: PUSH
2320: LD_OWVAR 67
2324: PLUS
2325: PPUSH
2326: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2330: CALL_OW 44
2334: PPUSH
2335: LD_VAR 0 2
2339: PPUSH
2340: CALL_OW 52
// end ;
2344: GO 2311
2346: POP
2347: POP
// for i := 1 to 2 do
2348: LD_ADDR_VAR 0 2
2352: PUSH
2353: DOUBLE
2354: LD_INT 1
2356: DEC
2357: ST_TO_ADDR
2358: LD_INT 2
2360: PUSH
2361: FOR_TO
2362: IFFALSE 2414
// begin PrepareMechanic ( false , 8 ) ;
2364: LD_INT 0
2366: PPUSH
2367: LD_INT 8
2369: PPUSH
2370: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2374: LD_ADDR_EXP 67
2378: PUSH
2379: LD_EXP 67
2383: PPUSH
2384: CALL_OW 44
2388: PPUSH
2389: CALL 68261 0 2
2393: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2394: LD_EXP 67
2398: PUSH
2399: LD_EXP 67
2403: ARRAY
2404: PPUSH
2405: LD_INT 61
2407: PPUSH
2408: CALL_OW 52
// end ;
2412: GO 2361
2414: POP
2415: POP
// PrepareMechanic ( sex_male , 8 ) ;
2416: LD_INT 1
2418: PPUSH
2419: LD_INT 8
2421: PPUSH
2422: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2426: LD_ADDR_EXP 68
2430: PUSH
2431: LD_EXP 68
2435: PPUSH
2436: CALL_OW 44
2440: PPUSH
2441: CALL 68261 0 2
2445: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2446: LD_EXP 68
2450: PUSH
2451: LD_EXP 68
2455: ARRAY
2456: PPUSH
2457: LD_INT 196
2459: PPUSH
2460: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2464: LD_INT 1
2466: PPUSH
2467: LD_INT 8
2469: PPUSH
2470: CALL_OW 383
// hc_name := Stiepan Simonov ;
2474: LD_ADDR_OWVAR 26
2478: PUSH
2479: LD_STRING Stiepan Simonov
2481: ST_TO_ADDR
// Stiopa := CreateHuman ;
2482: LD_ADDR_EXP 69
2486: PUSH
2487: CALL_OW 44
2491: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2492: LD_INT 2
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 383
// hc_name := Laura Dragunov ;
2502: LD_ADDR_OWVAR 26
2506: PUSH
2507: LD_STRING Laura Dragunov
2509: ST_TO_ADDR
// Laura := CreateHuman ;
2510: LD_ADDR_EXP 70
2514: PUSH
2515: CALL_OW 44
2519: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2520: LD_EXP 70
2524: PPUSH
2525: LD_INT 196
2527: PPUSH
2528: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2532: LD_INT 1
2534: PPUSH
2535: LD_INT 8
2537: PPUSH
2538: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2542: LD_ADDR_EXP 67
2546: PUSH
2547: LD_EXP 67
2551: PPUSH
2552: LD_INT 1
2554: PPUSH
2555: CALL_OW 44
2559: PPUSH
2560: CALL_OW 2
2564: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2565: LD_EXP 67
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_INT 61
2576: PPUSH
2577: CALL_OW 52
// hc_sex := sex_male ;
2581: LD_ADDR_OWVAR 27
2585: PUSH
2586: LD_INT 1
2588: ST_TO_ADDR
// hc_name := Muchin ;
2589: LD_ADDR_OWVAR 26
2593: PUSH
2594: LD_STRING Muchin
2596: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2597: LD_ADDR_OWVAR 33
2601: PUSH
2602: LD_STRING SecondCharsGal
2604: ST_TO_ADDR
// hc_face_number := 87 ;
2605: LD_ADDR_OWVAR 34
2609: PUSH
2610: LD_INT 87
2612: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 2 , 6 ] ;
2613: LD_ADDR_OWVAR 31
2617: PUSH
2618: LD_INT 8
2620: PUSH
2621: LD_INT 2
2623: PUSH
2624: LD_INT 2
2626: PUSH
2627: LD_INT 6
2629: PUSH
2630: EMPTY
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2636: LD_ADDR_OWVAR 29
2640: PUSH
2641: LD_INT 13
2643: PUSH
2644: LD_INT 13
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: ST_TO_ADDR
// hc_class := class_soldier ;
2651: LD_ADDR_OWVAR 28
2655: PUSH
2656: LD_INT 1
2658: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2659: LD_ADDR_EXP 66
2663: PUSH
2664: CALL_OW 44
2668: ST_TO_ADDR
// InitHC_All ( ) ;
2669: CALL_OW 584
// if Difficulty > 1 then
2673: LD_OWVAR 67
2677: PUSH
2678: LD_INT 1
2680: GREATER
2681: IFFALSE 2801
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: DOUBLE
2689: LD_INT 1
2691: DEC
2692: ST_TO_ADDR
2693: LD_INT 3
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: PUSH
2712: LD_INT 1
2714: PLUS
2715: ARRAY
2716: PUSH
2717: FOR_TO
2718: IFFALSE 2799
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2720: LD_INT 0
2722: PPUSH
2723: LD_INT 5
2725: PUSH
2726: LD_INT 6
2728: PUSH
2729: LD_INT 7
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PUSH
2737: LD_OWVAR 67
2741: PUSH
2742: LD_INT 1
2744: PLUS
2745: ARRAY
2746: PPUSH
2747: CALL_OW 381
// un := CreateHuman ;
2751: LD_ADDR_VAR 0 4
2755: PUSH
2756: CALL_OW 44
2760: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2761: LD_VAR 0 4
2765: PPUSH
2766: LD_INT 62
2768: PUSH
2769: LD_INT 63
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PUSH
2776: LD_VAR 0 2
2780: PUSH
2781: LD_INT 2
2783: MOD
2784: PUSH
2785: LD_INT 1
2787: PLUS
2788: ARRAY
2789: PPUSH
2790: LD_INT 0
2792: PPUSH
2793: CALL_OW 49
// end ;
2797: GO 2717
2799: POP
2800: POP
// end ; uc_side := 6 ;
2801: LD_ADDR_OWVAR 20
2805: PUSH
2806: LD_INT 6
2808: ST_TO_ADDR
// uc_nation := 3 ;
2809: LD_ADDR_OWVAR 21
2813: PUSH
2814: LD_INT 3
2816: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2817: LD_ADDR_VAR 0 5
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: LD_INT 15
2827: PUSH
2828: LD_INT 48
2830: PUSH
2831: LD_INT 24
2833: PUSH
2834: LD_INT 149
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: LIST
2843: ST_TO_ADDR
// for i in tmp do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: LD_VAR 0 5
2853: PUSH
2854: FOR_IN
2855: IFFALSE 2903
// begin for j := 1 to 2 do
2857: LD_ADDR_VAR 0 3
2861: PUSH
2862: DOUBLE
2863: LD_INT 1
2865: DEC
2866: ST_TO_ADDR
2867: LD_INT 2
2869: PUSH
2870: FOR_TO
2871: IFFALSE 2899
// begin PrepareSoldier ( false , 7 ) ;
2873: LD_INT 0
2875: PPUSH
2876: LD_INT 7
2878: PPUSH
2879: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2883: CALL_OW 44
2887: PPUSH
2888: LD_VAR 0 2
2892: PPUSH
2893: CALL_OW 52
// end ;
2897: GO 2870
2899: POP
2900: POP
// end ;
2901: GO 2854
2903: POP
2904: POP
// end ;
2905: LD_VAR 0 1
2909: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2910: LD_INT 0
2912: PPUSH
2913: PPUSH
2914: PPUSH
2915: PPUSH
// uc_side := 3 ;
2916: LD_ADDR_OWVAR 20
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2924: LD_ADDR_OWVAR 21
2928: PUSH
2929: LD_INT 1
2931: PPUSH
2932: LD_INT 3
2934: PPUSH
2935: CALL_OW 12
2939: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2940: LD_ADDR_VAR 0 4
2944: PUSH
2945: LD_INT 5
2947: PPUSH
2948: LD_INT 0
2950: PPUSH
2951: CALL_OW 517
2955: ST_TO_ADDR
// for i := 1 to 3 do
2956: LD_ADDR_VAR 0 2
2960: PUSH
2961: DOUBLE
2962: LD_INT 1
2964: DEC
2965: ST_TO_ADDR
2966: LD_INT 3
2968: PUSH
2969: FOR_TO
2970: IFFALSE 3039
// begin PrepareHuman ( false , class_prison , 0 ) ;
2972: LD_INT 0
2974: PPUSH
2975: LD_INT 33
2977: PPUSH
2978: LD_INT 0
2980: PPUSH
2981: CALL_OW 380
// un := CreateHuman ;
2985: LD_ADDR_VAR 0 3
2989: PUSH
2990: CALL_OW 44
2994: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2995: LD_VAR 0 3
2999: PPUSH
3000: LD_VAR 0 4
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PUSH
3009: LD_VAR 0 2
3013: ARRAY
3014: PPUSH
3015: LD_VAR 0 4
3019: PUSH
3020: LD_INT 2
3022: ARRAY
3023: PUSH
3024: LD_VAR 0 2
3028: ARRAY
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: CALL_OW 601
// end ;
3037: GO 2969
3039: POP
3040: POP
// end ;
3041: LD_VAR 0 1
3045: RET
// export function PrepareFirstScene ; var i , un ; begin
3046: LD_INT 0
3048: PPUSH
3049: PPUSH
3050: PPUSH
// uc_side := 4 ;
3051: LD_ADDR_OWVAR 20
3055: PUSH
3056: LD_INT 4
3058: ST_TO_ADDR
// uc_nation := 1 ;
3059: LD_ADDR_OWVAR 21
3063: PUSH
3064: LD_INT 1
3066: ST_TO_ADDR
// PrepareHuman ( false , class_prison , 0 ) ;
3067: LD_INT 0
3069: PPUSH
3070: LD_INT 33
3072: PPUSH
3073: LD_INT 0
3075: PPUSH
3076: CALL_OW 380
// for i := 1 to 2 do
3080: LD_ADDR_VAR 0 2
3084: PUSH
3085: DOUBLE
3086: LD_INT 1
3088: DEC
3089: ST_TO_ADDR
3090: LD_INT 2
3092: PUSH
3093: FOR_TO
3094: IFFALSE 3159
// begin un := CreateHuman ;
3096: LD_ADDR_VAR 0 3
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3118: LD_VAR 0 3
3122: PPUSH
3123: LD_INT 6
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3133: LD_VAR 0 3
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: CALL 71583 0 2
// SetLives ( un , 300 ) ;
3145: LD_VAR 0 3
3149: PPUSH
3150: LD_INT 300
3152: PPUSH
3153: CALL_OW 234
// end ;
3157: GO 3093
3159: POP
3160: POP
// uc_side := 3 ;
3161: LD_ADDR_OWVAR 20
3165: PUSH
3166: LD_INT 3
3168: ST_TO_ADDR
// uc_nation := 3 ;
3169: LD_ADDR_OWVAR 21
3173: PUSH
3174: LD_INT 3
3176: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3177: LD_INT 1
3179: PPUSH
3180: LD_INT 5
3182: PPUSH
3183: CALL_OW 381
// for i := 1 to 3 do
3187: LD_ADDR_VAR 0 2
3191: PUSH
3192: DOUBLE
3193: LD_INT 1
3195: DEC
3196: ST_TO_ADDR
3197: LD_INT 3
3199: PUSH
3200: FOR_TO
3201: IFFALSE 3274
// begin un := CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3213: LD_ADDR_EXP 64
3217: PUSH
3218: LD_EXP 64
3222: PPUSH
3223: LD_VAR 0 3
3227: PPUSH
3228: CALL 68261 0 2
3232: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3233: LD_VAR 0 3
3237: PPUSH
3238: LD_INT 4
3240: PPUSH
3241: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3245: LD_VAR 0 3
3249: PPUSH
3250: LD_INT 7
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3260: LD_VAR 0 3
3264: PPUSH
3265: LD_INT 4
3267: PPUSH
3268: CALL 71583 0 2
// end ;
3272: GO 3200
3274: POP
3275: POP
// ruCommisar := CreateHuman ;
3276: LD_ADDR_EXP 65
3280: PUSH
3281: CALL_OW 44
3285: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3286: LD_EXP 65
3290: PPUSH
3291: LD_INT 124
3293: PPUSH
3294: LD_INT 37
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3304: LD_EXP 65
3308: PPUSH
3309: LD_INT 3
3311: PPUSH
3312: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3316: LD_EXP 65
3320: PPUSH
3321: LD_INT 3
3323: PPUSH
3324: CALL 71583 0 2
// end ;
3328: LD_VAR 0 1
3332: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3333: LD_INT 0
3335: PPUSH
3336: PPUSH
3337: PPUSH
3338: PPUSH
// uc_side := 6 ;
3339: LD_ADDR_OWVAR 20
3343: PUSH
3344: LD_INT 6
3346: ST_TO_ADDR
// uc_nation := 3 ;
3347: LD_ADDR_OWVAR 21
3351: PUSH
3352: LD_INT 3
3354: ST_TO_ADDR
// ruPatrol := [ ] ;
3355: LD_ADDR_EXP 71
3359: PUSH
3360: EMPTY
3361: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3362: LD_ADDR_VAR 0 4
3366: PUSH
3367: LD_INT 26
3369: PUSH
3370: LD_INT 30
3372: PUSH
3373: LD_INT 39
3375: PUSH
3376: LD_INT 43
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: ST_TO_ADDR
// for i := 1 to spawn do
3385: LD_ADDR_VAR 0 2
3389: PUSH
3390: DOUBLE
3391: LD_INT 1
3393: DEC
3394: ST_TO_ADDR
3395: LD_VAR 0 4
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3512
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 4
3408: PUSH
3409: LD_INT 5
3411: PUSH
3412: LD_INT 6
3414: PUSH
3415: LD_INT 7
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: PUSH
3424: LD_OWVAR 67
3428: ARRAY
3429: PPUSH
3430: CALL_OW 381
// un := CreateHuman ;
3434: LD_ADDR_VAR 0 3
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// SetTag ( un , i ) ;
3444: LD_VAR 0 3
3448: PPUSH
3449: LD_VAR 0 2
3453: PPUSH
3454: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3458: LD_ADDR_EXP 71
3462: PUSH
3463: LD_EXP 71
3467: PPUSH
3468: LD_VAR 0 3
3472: PPUSH
3473: CALL 68261 0 2
3477: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3478: LD_VAR 0 3
3482: PPUSH
3483: LD_VAR 0 4
3487: PUSH
3488: LD_VAR 0 2
3492: ARRAY
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: CALL_OW 49
// ComHold ( un ) ;
3501: LD_VAR 0 3
3505: PPUSH
3506: CALL_OW 140
// end ;
3510: GO 3400
3512: POP
3513: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: LD_INT 48
3521: PUSH
3522: LD_INT 49
3524: PUSH
3525: LD_INT 50
3527: PUSH
3528: LD_INT 51
3530: PUSH
3531: LD_INT 52
3533: PUSH
3534: LD_INT 53
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: ST_TO_ADDR
// for i := 1 to spawn do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_VAR 0 4
3559: PUSH
3560: FOR_TO
3561: IFFALSE 3670
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 4
3568: PUSH
3569: LD_INT 5
3571: PUSH
3572: LD_INT 6
3574: PUSH
3575: LD_INT 7
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: PUSH
3584: LD_OWVAR 67
3588: ARRAY
3589: PPUSH
3590: CALL_OW 381
// un := CreateHuman ;
3594: LD_ADDR_VAR 0 3
3598: PUSH
3599: CALL_OW 44
3603: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3604: LD_VAR 0 3
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3616: LD_ADDR_EXP 71
3620: PUSH
3621: LD_EXP 71
3625: PPUSH
3626: LD_VAR 0 3
3630: PPUSH
3631: CALL 68261 0 2
3635: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3636: LD_VAR 0 3
3640: PPUSH
3641: LD_VAR 0 4
3645: PUSH
3646: LD_VAR 0 2
3650: ARRAY
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
// ComHold ( un ) ;
3659: LD_VAR 0 3
3663: PPUSH
3664: CALL_OW 140
// end ;
3668: GO 3560
3670: POP
3671: POP
// end ;
3672: LD_VAR 0 1
3676: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3677: LD_INT 0
3679: PPUSH
3680: PPUSH
3681: PPUSH
3682: PPUSH
// uc_side := 6 ;
3683: LD_ADDR_OWVAR 20
3687: PUSH
3688: LD_INT 6
3690: ST_TO_ADDR
// uc_nation := nation_russian ;
3691: LD_ADDR_OWVAR 21
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 54
3706: PUSH
3707: LD_INT 55
3709: PUSH
3710: LD_INT 56
3712: PUSH
3713: LD_INT 57
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: ST_TO_ADDR
// for i := 1 to spawn do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_VAR 0 4
3736: PUSH
3737: FOR_TO
3738: IFFALSE 3847
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3740: LD_INT 0
3742: PPUSH
3743: LD_INT 4
3745: PUSH
3746: LD_INT 5
3748: PUSH
3749: LD_INT 6
3751: PUSH
3752: LD_INT 7
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: PUSH
3761: LD_OWVAR 67
3765: ARRAY
3766: PPUSH
3767: CALL_OW 381
// un := CreateHuman ;
3771: LD_ADDR_VAR 0 3
3775: PUSH
3776: CALL_OW 44
3780: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3781: LD_VAR 0 3
3785: PPUSH
3786: LD_INT 0
3788: PPUSH
3789: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3793: LD_ADDR_EXP 71
3797: PUSH
3798: LD_EXP 71
3802: PPUSH
3803: LD_VAR 0 3
3807: PPUSH
3808: CALL 68261 0 2
3812: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3813: LD_VAR 0 3
3817: PPUSH
3818: LD_VAR 0 4
3822: PUSH
3823: LD_VAR 0 2
3827: ARRAY
3828: PPUSH
3829: LD_INT 0
3831: PPUSH
3832: CALL_OW 49
// ComHold ( un ) ;
3836: LD_VAR 0 3
3840: PPUSH
3841: CALL_OW 140
// end ;
3845: GO 3737
3847: POP
3848: POP
// end ; end_of_file
3849: LD_VAR 0 1
3853: RET
// export function Action ; var speaker , i , tmp ; begin
3854: LD_INT 0
3856: PPUSH
3857: PPUSH
3858: PPUSH
3859: PPUSH
// Video ( true ) ;
3860: LD_INT 1
3862: PPUSH
3863: CALL 68233 0 1
// hasNormalScene := Kaia or Givi ;
3867: LD_ADDR_EXP 5
3871: PUSH
3872: LD_EXP 51
3876: IFTRUE 3884
3878: PUSH
3879: LD_EXP 47
3883: OR
3884: ST_TO_ADDR
// if hasNormalScene then
3885: LD_EXP 5
3889: IFFALSE 4130
// begin for i in americanSquad do
3891: LD_ADDR_VAR 0 3
3895: PUSH
3896: LD_EXP 58
3900: PUSH
3901: FOR_IN
3902: IFFALSE 3948
// begin SetClass ( i , class_prison ) ;
3904: LD_VAR 0 3
3908: PPUSH
3909: LD_INT 33
3911: PPUSH
3912: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3916: LD_VAR 0 3
3920: PPUSH
3921: LD_INT 78
3923: PPUSH
3924: LD_INT 16
3926: PPUSH
3927: LD_INT 5
3929: PPUSH
3930: LD_INT 0
3932: PPUSH
3933: CALL_OW 50
// ComHold ( i ) ;
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 140
// end ;
3946: GO 3901
3948: POP
3949: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3950: LD_ADDR_VAR 0 4
3954: PUSH
3955: LD_EXP 48
3959: PUSH
3960: LD_EXP 49
3964: PUSH
3965: LD_EXP 50
3969: PUSH
3970: LD_EXP 51
3974: PUSH
3975: LD_EXP 52
3979: PUSH
3980: LD_EXP 53
3984: PUSH
3985: LD_EXP 54
3989: PUSH
3990: LD_EXP 55
3994: PUSH
3995: LD_EXP 47
3999: PUSH
4000: LD_EXP 56
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: PUSH
4017: LD_EXP 57
4021: UNION
4022: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
4023: LD_EXP 46
4027: PPUSH
4028: LD_INT 33
4030: PPUSH
4031: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
4035: LD_EXP 46
4039: PPUSH
4040: LD_INT 117
4042: PPUSH
4043: LD_INT 24
4045: PPUSH
4046: LD_INT 3
4048: PPUSH
4049: LD_INT 0
4051: PPUSH
4052: CALL 70421 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_INT 123
4063: PPUSH
4064: LD_INT 39
4066: PPUSH
4067: CALL_OW 118
// for i in tmp do
4071: LD_ADDR_VAR 0 3
4075: PUSH
4076: LD_VAR 0 4
4080: PUSH
4081: FOR_IN
4082: IFFALSE 4128
// begin SetClass ( i , class_prison ) ;
4084: LD_VAR 0 3
4088: PPUSH
4089: LD_INT 33
4091: PPUSH
4092: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4096: LD_VAR 0 3
4100: PPUSH
4101: LD_INT 3
4103: PPUSH
4104: LD_INT 0
4106: PPUSH
4107: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4111: LD_VAR 0 3
4115: PPUSH
4116: LD_INT 113
4118: PPUSH
4119: LD_INT 16
4121: PPUSH
4122: CALL_OW 118
// end ;
4126: GO 4081
4128: POP
4129: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4130: LD_INT 124
4132: PPUSH
4133: LD_INT 39
4135: PPUSH
4136: CALL_OW 86
// PrepareDeadBodies ;
4140: CALL 2910 0 0
// PrepareFirstScene ;
4144: CALL 3046 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4148: LD_INT 152
4150: PPUSH
4151: LD_INT 65
4153: PPUSH
4154: LD_INT 2
4156: PPUSH
4157: LD_INT 70
4159: NEG
4160: PPUSH
4161: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4165: LD_INT 152
4167: PPUSH
4168: LD_INT 65
4170: PPUSH
4171: LD_INT 2
4173: PPUSH
4174: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4178: LD_INT 122
4180: PPUSH
4181: LD_INT 40
4183: PPUSH
4184: LD_INT 2
4186: PPUSH
4187: LD_INT 8
4189: NEG
4190: PPUSH
4191: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4195: LD_INT 124
4197: PPUSH
4198: LD_INT 37
4200: PPUSH
4201: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4205: LD_EXP 65
4209: PPUSH
4210: LD_STRING DRum-Execution-1
4212: PPUSH
4213: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4217: LD_EXP 65
4221: PPUSH
4222: LD_STRING DRum-Execution-2
4224: PPUSH
4225: CALL_OW 88
// wait ( 0 0$01 ) ;
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4236: LD_EXP 65
4240: PPUSH
4241: LD_STRING DRum-Execution-3
4243: PPUSH
4244: CALL_OW 88
// wait ( 0 0$1 ) ;
4248: LD_INT 35
4250: PPUSH
4251: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4255: LD_EXP 65
4259: PPUSH
4260: LD_STRING DRum-Execution-4
4262: PPUSH
4263: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4267: LD_EXP 64
4271: PUSH
4272: LD_INT 1
4274: ARRAY
4275: PPUSH
4276: LD_INT 122
4278: PPUSH
4279: LD_INT 39
4281: PPUSH
4282: CALL_OW 428
4286: PPUSH
4287: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4291: LD_EXP 64
4295: PUSH
4296: LD_INT 2
4298: ARRAY
4299: PPUSH
4300: LD_INT 123
4302: PPUSH
4303: LD_INT 41
4305: PPUSH
4306: CALL_OW 428
4310: PPUSH
4311: CALL_OW 115
// AddComHold ( russianKillers ) ;
4315: LD_EXP 64
4319: PPUSH
4320: CALL_OW 200
// wait ( 0 0$1 ) ;
4324: LD_INT 35
4326: PPUSH
4327: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4331: LD_INT 122
4333: PPUSH
4334: LD_INT 40
4336: PPUSH
4337: LD_INT 2
4339: PPUSH
4340: CALL_OW 331
// for i in russianKillers union ruCommisar do
4344: LD_ADDR_VAR 0 3
4348: PUSH
4349: LD_EXP 64
4353: PUSH
4354: LD_EXP 65
4358: UNION
4359: PUSH
4360: FOR_IN
4361: IFFALSE 4374
// RemoveUnit ( i ) ;
4363: LD_VAR 0 3
4367: PPUSH
4368: CALL_OW 64
4372: GO 4360
4374: POP
4375: POP
// if hasNormalScene then
4376: LD_EXP 5
4380: IFFALSE 4388
// ActionNormal else
4382: CALL 4397 0 0
4386: GO 4392
// ActionAdditional ;
4388: CALL 6223 0 0
// end ;
4392: LD_VAR 0 1
4396: RET
// function ActionNormal ; var i , tmp ; begin
4397: LD_INT 0
4399: PPUSH
4400: PPUSH
4401: PPUSH
// CenterNowOnUnits ( Heike ) ;
4402: LD_EXP 46
4406: PPUSH
4407: CALL_OW 87
// wait ( 0 0$1 ) ;
4411: LD_INT 35
4413: PPUSH
4414: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4418: LD_EXP 46
4422: PPUSH
4423: LD_INT 115
4425: PPUSH
4426: LD_INT 19
4428: PPUSH
4429: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4433: LD_EXP 46
4437: PPUSH
4438: LD_INT 113
4440: PPUSH
4441: LD_INT 16
4443: PPUSH
4444: CALL_OW 178
// wait ( 0 0$2 ) ;
4448: LD_INT 70
4450: PPUSH
4451: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4455: LD_EXP 46
4459: PPUSH
4460: LD_STRING DH-Conspiracy-1
4462: PPUSH
4463: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4467: LD_EXP 51
4471: PPUSH
4472: LD_STRING DK-Conspiracy-2
4474: PPUSH
4475: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4479: LD_EXP 47
4483: PPUSH
4484: LD_STRING DG-Conspiracy-3
4486: PPUSH
4487: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4491: LD_EXP 47
4495: PPUSH
4496: LD_STRING DG-Conspiracy-4
4498: PPUSH
4499: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4503: LD_EXP 46
4507: PPUSH
4508: LD_STRING DH-Conspiracy-5
4510: PPUSH
4511: CALL_OW 88
// if IsOk ( Kamil ) then
4515: LD_EXP 50
4519: PPUSH
4520: CALL_OW 302
4524: IFFALSE 4582
// begin hasVodka := true ;
4526: LD_ADDR_EXP 4
4530: PUSH
4531: LD_INT 1
4533: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4534: LD_EXP 50
4538: PPUSH
4539: LD_STRING DKam-Conspiracy-6
4541: PPUSH
4542: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4546: LD_EXP 50
4550: PPUSH
4551: LD_STRING DKam-Conspiracy-7
4553: PPUSH
4554: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4558: LD_EXP 50
4562: PPUSH
4563: LD_STRING DKam-Conspiracy-8
4565: PPUSH
4566: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4570: LD_EXP 50
4574: PPUSH
4575: LD_STRING DKam-Conspiracy-9
4577: PPUSH
4578: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4582: LD_EXP 52
4586: PPUSH
4587: CALL_OW 302
4591: IFFALSE 4772
// begin americanContact := true ;
4593: LD_ADDR_EXP 10
4597: PUSH
4598: LD_INT 1
4600: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4601: LD_STRING M1-american
4603: PPUSH
4604: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4608: LD_EXP 52
4612: PPUSH
4613: LD_STRING DS-Conspiracy-10
4615: PPUSH
4616: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-11 ) ;
4620: LD_EXP 53
4624: PPUSH
4625: LD_STRING DMar-Conspiracy-11
4627: PPUSH
4628: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4632: LD_EXP 52
4636: PPUSH
4637: LD_STRING DS-Conspiracy-12
4639: PPUSH
4640: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4644: LD_INT 84
4646: PPUSH
4647: LD_INT 19
4649: PPUSH
4650: LD_INT 105
4652: PPUSH
4653: CALL 20731 0 3
// if johnnySaved then
4657: LD_EXP 3
4661: IFFALSE 4701
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4663: LD_EXP 52
4667: PPUSH
4668: LD_STRING DS-Conspiracy-13
4670: PPUSH
4671: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4675: LD_EXP 46
4679: PPUSH
4680: LD_STRING DH-Conspiracy-14
4682: PPUSH
4683: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4687: LD_EXP 46
4691: PPUSH
4692: LD_STRING DH-Conspiracy-15
4694: PPUSH
4695: CALL_OW 88
// end else
4699: GO 4737
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4701: LD_EXP 52
4705: PPUSH
4706: LD_STRING DS-Conspiracy-a-13
4708: PPUSH
4709: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4713: LD_EXP 46
4717: PPUSH
4718: LD_STRING DH-Conspiracy-a-14
4720: PPUSH
4721: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4725: LD_EXP 46
4729: PPUSH
4730: LD_STRING DH-Conspiracy-a-15
4732: PPUSH
4733: CALL_OW 88
// end ; if IsOk ( Givi ) then
4737: LD_EXP 47
4741: PPUSH
4742: CALL_OW 302
4746: IFFALSE 4772
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4748: LD_EXP 47
4752: PPUSH
4753: LD_STRING DG-Conspiracy-a-16
4755: PPUSH
4756: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4760: LD_EXP 46
4764: PPUSH
4765: LD_STRING DH-Conspiracy-a-17
4767: PPUSH
4768: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4772: LD_EXP 46
4776: PPUSH
4777: LD_STRING DH-Conspiracy-16
4779: PPUSH
4780: CALL_OW 88
// if IsOk ( Givi ) then
4784: LD_EXP 47
4788: PPUSH
4789: CALL_OW 302
4793: IFFALSE 5065
// begin hasStimDrugs := true ;
4795: LD_ADDR_EXP 9
4799: PUSH
4800: LD_INT 1
4802: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4803: LD_STRING M1-drugs
4805: PPUSH
4806: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4810: LD_EXP 47
4814: PPUSH
4815: LD_STRING DG-Conspiracy-17
4817: PPUSH
4818: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4822: LD_INT 162
4824: PPUSH
4825: LD_INT 2
4827: PPUSH
4828: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4832: LD_INT 194
4834: PPUSH
4835: LD_INT 98
4837: PPUSH
4838: LD_INT 105
4840: PPUSH
4841: CALL 20731 0 3
// SetSide ( drugsLab , 3 ) ;
4845: LD_INT 162
4847: PPUSH
4848: LD_INT 3
4850: PPUSH
4851: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4855: LD_EXP 47
4859: PPUSH
4860: LD_STRING DG-Conspiracy-18
4862: PPUSH
4863: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4867: LD_EXP 47
4871: PPUSH
4872: LD_STRING DG-Conspiracy-19
4874: PPUSH
4875: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4879: LD_EXP 47
4883: PPUSH
4884: LD_STRING DG-Conspiracy-20
4886: PPUSH
4887: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4891: LD_EXP 46
4895: PPUSH
4896: LD_STRING DH-Conspiracy-21
4898: PPUSH
4899: CALL_OW 88
// if IsOk ( Kaia ) then
4903: LD_EXP 51
4907: PPUSH
4908: CALL_OW 302
4912: IFFALSE 4986
// begin hasExplosions := true ;
4914: LD_ADDR_EXP 6
4918: PUSH
4919: LD_INT 1
4921: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4922: LD_STRING M1-explosive
4924: PPUSH
4925: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4929: LD_EXP 51
4933: PPUSH
4934: LD_STRING DK-Conspiracy-22
4936: PPUSH
4937: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4941: LD_INT 73
4943: PPUSH
4944: LD_INT 2
4946: PPUSH
4947: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4951: LD_INT 170
4953: PPUSH
4954: LD_INT 104
4956: PPUSH
4957: LD_INT 105
4959: PPUSH
4960: CALL 20731 0 3
// SetSide ( barExplosion , 3 ) ;
4964: LD_INT 73
4966: PPUSH
4967: LD_INT 3
4969: PPUSH
4970: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4974: LD_EXP 51
4978: PPUSH
4979: LD_STRING DK-Conspiracy-23
4981: PPUSH
4982: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4986: LD_EXP 54
4990: PPUSH
4991: CALL_OW 302
4995: IFFALSE 5065
// begin hasExplosionsInFactory := true ;
4997: LD_ADDR_EXP 7
5001: PUSH
5002: LD_INT 1
5004: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
5005: LD_EXP 54
5009: PPUSH
5010: LD_STRING DO-Conspiracy-24
5012: PPUSH
5013: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
5017: LD_INT 175
5019: PPUSH
5020: LD_INT 54
5022: PPUSH
5023: LD_INT 70
5025: PPUSH
5026: CALL 20731 0 3
// if IsOk ( Markov ) then
5030: LD_EXP 53
5034: PPUSH
5035: CALL_OW 302
5039: IFFALSE 5065
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
5041: LD_EXP 53
5045: PPUSH
5046: LD_STRING DMar-Conspiracy-25
5048: PPUSH
5049: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
5053: LD_EXP 53
5057: PPUSH
5058: LD_STRING DMar-Conspiracy-26
5060: PPUSH
5061: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
5065: LD_EXP 55
5069: PPUSH
5070: CALL_OW 302
5074: IFFALSE 5087
5076: PUSH
5077: LD_EXP 51
5081: PPUSH
5082: CALL_OW 302
5086: AND
5087: IFFALSE 5549
// begin hasWeapons := true ;
5089: LD_ADDR_EXP 19
5093: PUSH
5094: LD_INT 1
5096: ST_TO_ADDR
// hasRevolver := true ;
5097: LD_ADDR_EXP 8
5101: PUSH
5102: LD_INT 1
5104: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5105: LD_STRING M1-weapons
5107: PPUSH
5108: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5112: LD_EXP 55
5116: PPUSH
5117: LD_STRING DKs-Conspiracy-27
5119: PPUSH
5120: CALL_OW 88
// if IsOk ( Givi ) then
5124: LD_EXP 47
5128: PPUSH
5129: CALL_OW 302
5133: IFFALSE 5149
// Say ( Givi , DG-Conspiracy-28 ) else
5135: LD_EXP 47
5139: PPUSH
5140: LD_STRING DG-Conspiracy-28
5142: PPUSH
5143: CALL_OW 88
5147: GO 5214
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5149: LD_EXP 57
5153: PPUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 72
5168: PUSH
5169: LD_INT 1
5171: ARRAY
5172: PPUSH
5173: LD_STRING DArm-Conspiracy-a-28
5175: PPUSH
5176: CALL_OW 88
5180: NOT
5181: IFFALSE 5214
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5183: LD_EXP 57
5187: PPUSH
5188: LD_INT 26
5190: PUSH
5191: LD_INT 2
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 72
5202: PUSH
5203: LD_INT 1
5205: ARRAY
5206: PPUSH
5207: LD_STRING DArf-Conspiracy-a-28
5209: PPUSH
5210: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5214: LD_EXP 55
5218: PPUSH
5219: LD_STRING DKs-Conspiracy-29
5221: PPUSH
5222: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5226: LD_INT 192
5228: PPUSH
5229: LD_INT 122
5231: PPUSH
5232: LD_INT 105
5234: PPUSH
5235: CALL 20731 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5239: LD_EXP 55
5243: PPUSH
5244: LD_STRING DKs-Conspiracy-30
5246: PPUSH
5247: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5251: LD_EXP 51
5255: PPUSH
5256: LD_STRING DK-Conspiracy-31
5258: PPUSH
5259: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5263: LD_EXP 53
5267: PPUSH
5268: LD_STRING DMar-Conspiracy-33
5270: PPUSH
5271: CALL_OW 88
5275: NOT
5276: IFFALSE 5284
5278: PUSH
5279: LD_EXP 57
5283: AND
5284: IFFALSE 5351
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5286: LD_EXP 57
5290: PPUSH
5291: LD_INT 26
5293: PUSH
5294: LD_INT 1
5296: PUSH
5297: EMPTY
5298: LIST
5299: LIST
5300: PPUSH
5301: CALL_OW 72
5305: PUSH
5306: LD_INT 1
5308: ARRAY
5309: PPUSH
5310: LD_STRING DArm-Conspiracy-a-34
5312: PPUSH
5313: CALL_OW 88
5317: NOT
5318: IFFALSE 5351
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5320: LD_EXP 57
5324: PPUSH
5325: LD_INT 26
5327: PUSH
5328: LD_INT 2
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 72
5339: PUSH
5340: LD_INT 1
5342: ARRAY
5343: PPUSH
5344: LD_STRING DArf-Conspiracy-a-34
5346: PPUSH
5347: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5351: LD_EXP 51
5355: PPUSH
5356: LD_STRING DK-Conspiracy-34
5358: PPUSH
5359: CALL_OW 88
// if IsOk ( Markov ) then
5363: LD_EXP 53
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5457
// begin hasSniperRifle := true ;
5374: LD_ADDR_EXP 11
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5382: LD_EXP 53
5386: PPUSH
5387: LD_STRING DMar-Conspiracy-35
5389: PPUSH
5390: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5394: LD_EXP 51
5398: PPUSH
5399: LD_STRING DK-Conspiracy-36
5401: PPUSH
5402: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5406: LD_EXP 53
5410: PPUSH
5411: LD_STRING DMar-Conspiracy-37
5413: PPUSH
5414: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5418: LD_EXP 53
5422: PPUSH
5423: LD_STRING DMar-Conspiracy-38
5425: PPUSH
5426: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5430: LD_INT 137
5432: PPUSH
5433: LD_INT 98
5435: PPUSH
5436: LD_INT 105
5438: PPUSH
5439: CALL 20731 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5443: LD_EXP 53
5447: PPUSH
5448: LD_STRING DMar-Conspiracy-39
5450: PPUSH
5451: CALL_OW 88
// end else
5455: GO 5549
// if heikeSecondSquad then
5457: LD_EXP 57
5461: IFFALSE 5549
// begin hasSniperRifle := true ;
5463: LD_ADDR_EXP 11
5467: PUSH
5468: LD_INT 1
5470: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5471: LD_INT 137
5473: PPUSH
5474: LD_INT 98
5476: PPUSH
5477: LD_INT 105
5479: PPUSH
5480: CALL 20731 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5484: LD_EXP 57
5488: PPUSH
5489: LD_INT 26
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 72
5503: PUSH
5504: LD_INT 1
5506: ARRAY
5507: PPUSH
5508: LD_STRING DArm-Conspiracy-a-35
5510: PPUSH
5511: CALL_OW 88
5515: NOT
5516: IFFALSE 5549
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5518: LD_EXP 57
5522: PPUSH
5523: LD_INT 26
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL_OW 72
5537: PUSH
5538: LD_INT 1
5540: ARRAY
5541: PPUSH
5542: LD_STRING DArf-Conspiracy-a-35
5544: PPUSH
5545: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5549: LD_EXP 46
5553: PPUSH
5554: LD_STRING DH-Conspiracy-40
5556: PPUSH
5557: CALL_OW 88
// if IsOk ( Mike ) then
5561: LD_EXP 48
5565: PPUSH
5566: CALL_OW 302
5570: IFFALSE 5629
// begin hasScout := true ;
5572: LD_ADDR_EXP 12
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5580: LD_EXP 48
5584: PPUSH
5585: LD_STRING DM-Conspiracy-41
5587: PPUSH
5588: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5592: LD_EXP 48
5596: PPUSH
5597: LD_STRING DM-Conspiracy-42
5599: PPUSH
5600: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5604: LD_INT 73
5606: PPUSH
5607: LD_INT 102
5609: PPUSH
5610: LD_INT 105
5612: PPUSH
5613: CALL 20731 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5617: LD_EXP 48
5621: PPUSH
5622: LD_STRING DM-Conspiracy-43
5624: PPUSH
5625: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5629: LD_EXP 4
5633: IFFALSE 5646
5635: PUSH
5636: LD_EXP 51
5640: PPUSH
5641: CALL_OW 302
5645: AND
5646: IFFALSE 5659
5648: PUSH
5649: LD_EXP 55
5653: PPUSH
5654: CALL_OW 302
5658: AND
5659: IFFALSE 5705
// begin hasMethanol := true ;
5661: LD_ADDR_EXP 13
5665: PUSH
5666: LD_INT 1
5668: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5669: LD_EXP 51
5673: PPUSH
5674: LD_STRING DK-Conspiracy-44
5676: PPUSH
5677: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5681: LD_EXP 51
5685: PPUSH
5686: LD_STRING DK-Conspiracy-45
5688: PPUSH
5689: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5693: LD_EXP 50
5697: PPUSH
5698: LD_STRING DKam-Conspiracy-46
5700: PPUSH
5701: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5705: LD_EXP 46
5709: PPUSH
5710: LD_STRING DH-Conspiracy-47
5712: PPUSH
5713: CALL_OW 88
// wait ( 0 0$1 ) ;
5717: LD_INT 35
5719: PPUSH
5720: CALL_OW 67
// your_side := 8 ;
5724: LD_ADDR_OWVAR 2
5728: PUSH
5729: LD_INT 8
5731: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5732: LD_INT 1
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5742: LD_ADDR_VAR 0 2
5746: PUSH
5747: LD_INT 2
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 22
5762: PUSH
5763: LD_INT 4
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 69
5793: PUSH
5794: FOR_IN
5795: IFFALSE 5808
// RemoveUnit ( i ) ;
5797: LD_VAR 0 2
5801: PPUSH
5802: CALL_OW 64
5806: GO 5794
5808: POP
5809: POP
// wait ( 0 0$0.3 ) ;
5810: LD_INT 10
5812: PPUSH
5813: CALL_OW 67
// Query ( StartInfo1 ) ;
5817: LD_STRING StartInfo1
5819: PPUSH
5820: CALL_OW 97
// wait ( 0 0$1 ) ;
5824: LD_INT 35
5826: PPUSH
5827: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5831: LD_STRING colors_night.txt
5833: PPUSH
5834: CALL_OW 544
// Query ( StartInfo2 ) ;
5838: LD_STRING StartInfo2
5840: PPUSH
5841: CALL_OW 97
// PrepareGame ;
5845: CALL 1058 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5849: LD_INT 152
5851: PPUSH
5852: LD_INT 65
5854: PPUSH
5855: LD_INT 2
5857: PPUSH
5858: LD_INT 70
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5866: LD_INT 152
5868: PPUSH
5869: LD_INT 65
5871: PPUSH
5872: LD_INT 2
5874: PPUSH
5875: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5879: LD_INT 133
5881: PPUSH
5882: LD_INT 76
5884: PPUSH
5885: LD_INT 2
5887: PPUSH
5888: LD_INT 6
5890: NEG
5891: PPUSH
5892: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5896: LD_INT 152
5898: PPUSH
5899: LD_INT 65
5901: PPUSH
5902: LD_INT 8
5904: PPUSH
5905: LD_INT 70
5907: NEG
5908: PPUSH
5909: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5913: LD_INT 152
5915: PPUSH
5916: LD_INT 65
5918: PPUSH
5919: LD_INT 8
5921: PPUSH
5922: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5926: LD_INT 133
5928: PPUSH
5929: LD_INT 76
5931: PPUSH
5932: LD_INT 8
5934: PPUSH
5935: LD_INT 6
5937: NEG
5938: PPUSH
5939: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5943: LD_INT 23
5945: PPUSH
5946: CALL_OW 87
// dialogue_skipped := false ;
5950: LD_ADDR_OWVAR 59
5954: PUSH
5955: LD_INT 0
5957: ST_TO_ADDR
// InitRuPatrols ;
5958: CALL 3333 0 0
// Say ( Heike , DH-Escape-1 ) ;
5962: LD_EXP 46
5966: PPUSH
5967: LD_STRING DH-Escape-1
5969: PPUSH
5970: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5974: LD_EXP 46
5978: PPUSH
5979: LD_STRING DH-Escape-2
5981: PPUSH
5982: CALL_OW 88
// StartLockerMinigame ;
5986: CALL 21520 0 0
// wait ( 0 0$1 ) ;
5990: LD_INT 35
5992: PPUSH
5993: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5997: LD_EXP 46
6001: PPUSH
6002: LD_STRING DH-Escape-4
6004: PPUSH
6005: CALL_OW 88
// wait ( 0 0$3 ) ;
6009: LD_INT 105
6011: PPUSH
6012: CALL_OW 67
// your_side := 2 ;
6016: LD_ADDR_OWVAR 2
6020: PUSH
6021: LD_INT 2
6023: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
6024: LD_EXP 46
6028: PPUSH
6029: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
6033: LD_INT 152
6035: PPUSH
6036: LD_INT 65
6038: PPUSH
6039: LD_INT 2
6041: PPUSH
6042: LD_INT 70
6044: NEG
6045: PPUSH
6046: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
6050: LD_INT 152
6052: PPUSH
6053: LD_INT 65
6055: PPUSH
6056: LD_INT 2
6058: PPUSH
6059: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
6063: LD_INT 133
6065: PPUSH
6066: LD_INT 76
6068: PPUSH
6069: LD_INT 8
6071: PPUSH
6072: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
6076: LD_EXP 46
6080: PPUSH
6081: LD_INT 128
6083: PPUSH
6084: LD_INT 64
6086: PPUSH
6087: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6091: LD_INT 35
6093: PPUSH
6094: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6098: LD_EXP 46
6102: PPUSH
6103: LD_INT 128
6105: PPUSH
6106: LD_INT 64
6108: PPUSH
6109: CALL_OW 307
6113: IFFALSE 6091
// ComHold ( Heike ) ;
6115: LD_EXP 46
6119: PPUSH
6120: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6124: LD_EXP 46
6128: PPUSH
6129: LD_STRING DH-Start-1
6131: PPUSH
6132: CALL_OW 88
// if not americanContact then
6136: LD_EXP 10
6140: NOT
6141: IFFALSE 6157
// Say ( Heike , DH-Start-c-2 ) else
6143: LD_EXP 46
6147: PPUSH
6148: LD_STRING DH-Start-c-2
6150: PPUSH
6151: CALL_OW 88
6155: GO 6189
// if johnnySaved then
6157: LD_EXP 3
6161: IFFALSE 6177
// Say ( Heike , DH-Start-a-2 ) else
6163: LD_EXP 46
6167: PPUSH
6168: LD_STRING DH-Start-a-2
6170: PPUSH
6171: CALL_OW 88
6175: GO 6189
// Say ( Heike , DH-Start-b-2 ) ;
6177: LD_EXP 46
6181: PPUSH
6182: LD_STRING DH-Start-b-2
6184: PPUSH
6185: CALL_OW 88
// Video ( false ) ;
6189: LD_INT 0
6191: PPUSH
6192: CALL 68233 0 1
// tick := 0 ;
6196: LD_ADDR_OWVAR 1
6200: PUSH
6201: LD_INT 0
6203: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6204: LD_STRING M1
6206: PPUSH
6207: CALL_OW 337
// enable ( gameStartEvent ) ;
6211: LD_INT 2
6213: ENABLE_MARKED
// SaveForQuickRestart ;
6214: CALL_OW 22
// end ;
6218: LD_VAR 0 1
6222: RET
// function ActionAdditional ; var i , un , tmp ; begin
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6229: LD_INT 115
6231: PPUSH
6232: LD_INT 27
6234: PPUSH
6235: LD_INT 2
6237: PPUSH
6238: LD_INT 6
6240: NEG
6241: PPUSH
6242: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6246: LD_EXP 46
6250: PPUSH
6251: LD_INT 115
6253: PPUSH
6254: LD_INT 27
6256: PPUSH
6257: CALL_OW 428
6261: PPUSH
6262: CALL_OW 52
// SetClass ( Heike , class_prison ) ;
6266: LD_EXP 46
6270: PPUSH
6271: LD_INT 33
6273: PPUSH
6274: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6278: LD_INT 124
6280: PPUSH
6281: LD_INT 39
6283: PPUSH
6284: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6288: LD_EXP 46
6292: PPUSH
6293: LD_STRING DH-Fail-1
6295: PPUSH
6296: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6300: LD_INT 3
6302: PPUSH
6303: CALL_OW 427
// ComExit ( Heike ) ;
6307: LD_EXP 46
6311: PPUSH
6312: CALL 68659 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6316: LD_EXP 46
6320: PPUSH
6321: LD_INT 109
6323: PPUSH
6324: LD_INT 33
6326: PPUSH
6327: CALL_OW 171
// AddComHold ( Heike ) ;
6331: LD_EXP 46
6335: PPUSH
6336: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6340: LD_INT 115
6342: PPUSH
6343: LD_INT 27
6345: PPUSH
6346: LD_INT 2
6348: PPUSH
6349: CALL_OW 331
// wait ( 0 0$2 ) ;
6353: LD_INT 70
6355: PPUSH
6356: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6360: LD_INT 35
6362: PPUSH
6363: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6367: LD_EXP 46
6371: PPUSH
6372: LD_INT 109
6374: PPUSH
6375: LD_INT 33
6377: PPUSH
6378: CALL_OW 307
6382: IFFALSE 6360
// Say ( Heike , DH-Fail-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING DH-Fail-2
6391: PPUSH
6392: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6396: LD_EXP 46
6400: PPUSH
6401: LD_INT 111
6403: PPUSH
6404: LD_INT 48
6406: PPUSH
6407: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6411: LD_INT 35
6413: PPUSH
6414: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6418: LD_EXP 46
6422: PPUSH
6423: LD_INT 111
6425: PPUSH
6426: LD_INT 48
6428: PPUSH
6429: CALL_OW 297
6433: PUSH
6434: LD_INT 4
6436: LESS
6437: IFFALSE 6411
// AddComMoveXY ( Heike , 106 , 72 ) ;
6439: LD_EXP 46
6443: PPUSH
6444: LD_INT 106
6446: PPUSH
6447: LD_INT 72
6449: PPUSH
6450: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6454: LD_EXP 46
6458: PPUSH
6459: LD_INT 103
6461: PPUSH
6462: LD_INT 80
6464: PPUSH
6465: CALL_OW 171
// uc_side := 3 ;
6469: LD_ADDR_OWVAR 20
6473: PUSH
6474: LD_INT 3
6476: ST_TO_ADDR
// uc_nation := 3 ;
6477: LD_ADDR_OWVAR 21
6481: PUSH
6482: LD_INT 3
6484: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6485: LD_INT 1
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: LD_INT 6
6493: PPUSH
6494: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6498: LD_ADDR_OWVAR 29
6502: PUSH
6503: LD_INT 12
6505: PUSH
6506: LD_INT 12
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: ST_TO_ADDR
// un := CreateHuman ;
6513: LD_ADDR_VAR 0 3
6517: PUSH
6518: CALL_OW 44
6522: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6523: LD_VAR 0 3
6527: PPUSH
6528: LD_INT 134
6530: PPUSH
6531: LD_INT 52
6533: PPUSH
6534: LD_INT 4
6536: PPUSH
6537: LD_INT 0
6539: PPUSH
6540: CALL 70421 0 5
// ComTurnUnit ( un , Heike ) ;
6544: LD_VAR 0 3
6548: PPUSH
6549: LD_EXP 46
6553: PPUSH
6554: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6558: LD_VAR 0 3
6562: PPUSH
6563: LD_EXP 46
6567: PPUSH
6568: CALL_OW 112
// if GetSex ( un ) = sex_male then
6572: LD_VAR 0 3
6576: PPUSH
6577: CALL_OW 258
6581: PUSH
6582: LD_INT 1
6584: EQUAL
6585: IFFALSE 6601
// Say ( un , DRum-Fail-3 ) else
6587: LD_VAR 0 3
6591: PPUSH
6592: LD_STRING DRum-Fail-3
6594: PPUSH
6595: CALL_OW 88
6599: GO 6613
// Say ( un , DRuf-Fail-3 ) ;
6601: LD_VAR 0 3
6605: PPUSH
6606: LD_STRING DRuf-Fail-3
6608: PPUSH
6609: CALL_OW 88
// for i := 1 to 3 do
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: DOUBLE
6619: LD_INT 1
6621: DEC
6622: ST_TO_ADDR
6623: LD_INT 3
6625: PUSH
6626: FOR_TO
6627: IFFALSE 6700
// begin PrepareSoldier ( false , 10 ) ;
6629: LD_INT 0
6631: PPUSH
6632: LD_INT 10
6634: PPUSH
6635: CALL_OW 381
// un := CreateHuman ;
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: CALL_OW 44
6648: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6649: LD_ADDR_VAR 0 4
6653: PUSH
6654: LD_VAR 0 4
6658: PPUSH
6659: LD_VAR 0 3
6663: PPUSH
6664: CALL 68261 0 2
6668: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6669: LD_VAR 0 3
6673: PPUSH
6674: LD_INT 8
6676: PPUSH
6677: LD_INT 0
6679: PPUSH
6680: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6684: LD_VAR 0 3
6688: PPUSH
6689: LD_EXP 46
6693: PPUSH
6694: CALL_OW 119
// end ;
6698: GO 6626
6700: POP
6701: POP
// repeat wait ( 0 0$1 ) ;
6702: LD_INT 35
6704: PPUSH
6705: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6709: LD_VAR 0 4
6713: PPUSH
6714: LD_INT 101
6716: PUSH
6717: LD_INT 2
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 72
6728: PUSH
6729: LD_INT 1
6731: GREATER
6732: IFFALSE 6702
// wait ( 0 0$1 ) ;
6734: LD_INT 35
6736: PPUSH
6737: CALL_OW 67
// DialogueOn ;
6741: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6745: LD_EXP 46
6749: PPUSH
6750: LD_STRING DH-Fail-4
6752: PPUSH
6753: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6757: LD_EXP 46
6761: PPUSH
6762: LD_STRING DH-Fail-5
6764: PPUSH
6765: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6769: LD_EXP 46
6773: PPUSH
6774: LD_STRING DH-Fail-6
6776: PPUSH
6777: CALL_OW 88
// DialogueOff ;
6781: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6785: LD_VAR 0 4
6789: PPUSH
6790: LD_EXP 46
6794: PPUSH
6795: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6799: LD_INT 35
6801: PPUSH
6802: CALL_OW 67
// until IsDying ( Heike ) ;
6806: LD_EXP 46
6810: PPUSH
6811: CALL_OW 303
6815: IFFALSE 6799
// KillUnit ( Heike ) ;
6817: LD_EXP 46
6821: PPUSH
6822: CALL_OW 66
// wait ( 0 0$4 ) ;
6826: LD_INT 140
6828: PPUSH
6829: CALL_OW 67
// ResetFog ;
6833: CALL_OW 335
// DialogueOn ;
6837: CALL_OW 6
// dwait ( 0 0$1 ) ;
6841: LD_INT 35
6843: PPUSH
6844: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6848: LD_ADDR_EXP 46
6852: PUSH
6853: LD_STRING Heike
6855: PPUSH
6856: LD_EXP 1
6860: NOT
6861: PPUSH
6862: LD_EXP 2
6866: PPUSH
6867: CALL 30105 0 3
6871: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6872: LD_EXP 46
6876: PPUSH
6877: LD_STRING DH-Fail-7
6879: PPUSH
6880: CALL_OW 89
// DialogueOff ;
6884: CALL_OW 7
// YouLost ( Fail ) ;
6888: LD_STRING Fail
6890: PPUSH
6891: CALL_OW 104
// end ;
6895: LD_VAR 0 1
6899: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6900: LD_INT 2
6902: PPUSH
6903: LD_INT 173
6905: PPUSH
6906: LD_INT 29
6908: PPUSH
6909: CALL_OW 293
6913: IFFALSE 6936
6915: PUSH
6916: LD_EXP 46
6920: PPUSH
6921: LD_INT 173
6923: PPUSH
6924: LD_INT 29
6926: PPUSH
6927: CALL_OW 297
6931: PUSH
6932: LD_INT 6
6934: LESS
6935: AND
6936: IFFALSE 6953
6938: GO 6940
6940: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6941: LD_EXP 46
6945: PPUSH
6946: LD_STRING DH-EastRoad
6948: PPUSH
6949: CALL_OW 88
6953: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6954: LD_INT 2
6956: PPUSH
6957: LD_INT 149
6959: PPUSH
6960: LD_INT 3
6962: PPUSH
6963: CALL_OW 293
6967: IFFALSE 6990
6969: PUSH
6970: LD_EXP 46
6974: PPUSH
6975: LD_INT 149
6977: PPUSH
6978: LD_INT 3
6980: PPUSH
6981: CALL_OW 297
6985: PUSH
6986: LD_INT 6
6988: LESS
6989: AND
6990: IFFALSE 7007
6992: GO 6994
6994: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6995: LD_EXP 46
6999: PPUSH
7000: LD_STRING DH-EastRoad
7002: PPUSH
7003: CALL_OW 88
7007: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
7008: LD_INT 2
7010: PPUSH
7011: LD_INT 217
7013: PPUSH
7014: LD_INT 120
7016: PPUSH
7017: CALL_OW 293
7021: IFFALSE 7044
7023: PUSH
7024: LD_EXP 46
7028: PPUSH
7029: LD_INT 217
7031: PPUSH
7032: LD_INT 120
7034: PPUSH
7035: CALL_OW 297
7039: PUSH
7040: LD_INT 6
7042: LESS
7043: AND
7044: IFFALSE 7061
7046: GO 7048
7048: DISABLE
// Say ( Heike , DH-EastEnd ) ;
7049: LD_EXP 46
7053: PPUSH
7054: LD_STRING DH-EastEnd
7056: PPUSH
7057: CALL_OW 88
7061: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
7062: LD_EXP 46
7066: PPUSH
7067: LD_INT 11
7069: PPUSH
7070: CALL_OW 308
7074: IFFALSE 7112
7076: GO 7078
7078: DISABLE
// begin if not heikeSquad then
7079: LD_EXP 14
7083: NOT
7084: IFFALSE 7100
// Say ( Heike , DH-Hill ) else
7086: LD_EXP 46
7090: PPUSH
7091: LD_STRING DH-Hill
7093: PPUSH
7094: CALL_OW 88
7098: GO 7112
// Say ( Heike , DH-Hill-a ) ;
7100: LD_EXP 46
7104: PPUSH
7105: LD_STRING DH-Hill-a
7107: PPUSH
7108: CALL_OW 88
// end ;
7112: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7113: LD_EXP 46
7117: PPUSH
7118: LD_INT 12
7120: PPUSH
7121: CALL_OW 308
7125: IFFALSE 7312
7127: GO 7129
7129: DISABLE
7130: LD_INT 0
7132: PPUSH
7133: PPUSH
7134: PPUSH
// begin DialogueOn ;
7135: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7139: LD_EXP 46
7143: PPUSH
7144: CALL_OW 87
// x := GetX ( Heike ) ;
7148: LD_ADDR_VAR 0 1
7152: PUSH
7153: LD_EXP 46
7157: PPUSH
7158: CALL_OW 250
7162: ST_TO_ADDR
// y := GetY ( Heike ) ;
7163: LD_ADDR_VAR 0 2
7167: PUSH
7168: LD_EXP 46
7172: PPUSH
7173: CALL_OW 251
7177: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7178: LD_VAR 0 1
7182: PPUSH
7183: LD_VAR 0 2
7187: PPUSH
7188: LD_INT 2
7190: PPUSH
7191: LD_INT 12
7193: NEG
7194: PPUSH
7195: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7199: LD_VAR 0 1
7203: PPUSH
7204: LD_VAR 0 2
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7216: LD_INT 101
7218: PUSH
7219: LD_INT 2
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 2
7228: PUSH
7229: LD_INT 30
7231: PUSH
7232: LD_INT 32
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 30
7241: PUSH
7242: LD_INT 33
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: CALL_OW 69
7262: IFFALSE 7274
// v := 3 else
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_INT 3
7271: ST_TO_ADDR
7272: GO 7282
// v := 2 ;
7274: LD_ADDR_VAR 0 3
7278: PUSH
7279: LD_INT 2
7281: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7282: LD_EXP 46
7286: PPUSH
7287: LD_STRING DH-Outpost-
7289: PUSH
7290: LD_INT 1
7292: PPUSH
7293: LD_VAR 0 3
7297: PPUSH
7298: CALL_OW 12
7302: STR
7303: PPUSH
7304: CALL_OW 88
// DialogueOff ;
7308: CALL_OW 7
// end ;
7312: PPOPN 3
7314: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7315: LD_EXP 46
7319: PPUSH
7320: LD_INT 64
7322: PPUSH
7323: CALL_OW 308
7327: IFFALSE 7514
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
7335: PPUSH
7336: PPUSH
// begin DialogueOn ;
7337: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7341: LD_EXP 46
7345: PPUSH
7346: CALL_OW 87
// x := GetX ( Heike ) ;
7350: LD_ADDR_VAR 0 1
7354: PUSH
7355: LD_EXP 46
7359: PPUSH
7360: CALL_OW 250
7364: ST_TO_ADDR
// y := GetY ( Heike ) ;
7365: LD_ADDR_VAR 0 2
7369: PUSH
7370: LD_EXP 46
7374: PPUSH
7375: CALL_OW 251
7379: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_INT 2
7392: PPUSH
7393: LD_INT 12
7395: NEG
7396: PPUSH
7397: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7401: LD_VAR 0 1
7405: PPUSH
7406: LD_VAR 0 2
7410: PPUSH
7411: LD_INT 2
7413: PPUSH
7414: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7418: LD_INT 101
7420: PUSH
7421: LD_INT 2
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: LD_INT 30
7433: PUSH
7434: LD_INT 32
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 30
7443: PUSH
7444: LD_INT 33
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PPUSH
7460: CALL_OW 69
7464: IFFALSE 7476
// v := 3 else
7466: LD_ADDR_VAR 0 3
7470: PUSH
7471: LD_INT 3
7473: ST_TO_ADDR
7474: GO 7484
// v := 2 ;
7476: LD_ADDR_VAR 0 3
7480: PUSH
7481: LD_INT 2
7483: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7484: LD_EXP 46
7488: PPUSH
7489: LD_STRING DH-Outpost-
7491: PUSH
7492: LD_INT 1
7494: PPUSH
7495: LD_VAR 0 3
7499: PPUSH
7500: CALL_OW 12
7504: STR
7505: PPUSH
7506: CALL_OW 88
// DialogueOff ;
7510: CALL_OW 7
// end ;
7514: PPOPN 3
7516: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7517: LD_EXP 46
7521: PPUSH
7522: LD_INT 19
7524: PPUSH
7525: CALL_OW 308
7529: IFFALSE 7538
7531: PUSH
7532: LD_EXP 22
7536: NOT
7537: AND
7538: IFFALSE 7547
7540: PUSH
7541: LD_EXP 30
7545: NOT
7546: AND
7547: IFFALSE 7620
7549: GO 7551
7551: DISABLE
// begin DialogueOn ;
7552: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7556: LD_INT 152
7558: PPUSH
7559: LD_INT 115
7561: PPUSH
7562: LD_INT 2
7564: PPUSH
7565: LD_INT 16
7567: NEG
7568: PPUSH
7569: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7573: LD_INT 152
7575: PPUSH
7576: LD_INT 115
7578: PPUSH
7579: LD_INT 2
7581: PPUSH
7582: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7586: LD_INT 152
7588: PPUSH
7589: LD_INT 115
7591: PPUSH
7592: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7596: LD_EXP 46
7600: PPUSH
7601: LD_STRING DH-Stealth-1
7603: PPUSH
7604: CALL_OW 88
// DialogueOff ;
7608: CALL_OW 7
// adminAreaDiscovered := true ;
7612: LD_ADDR_EXP 22
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
// end ;
7620: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7621: LD_INT 2
7623: PPUSH
7624: LD_EXP 47
7628: PPUSH
7629: CALL_OW 292
7633: IFFALSE 7655
7635: PUSH
7636: LD_EXP 46
7640: PPUSH
7641: LD_EXP 47
7645: PPUSH
7646: CALL_OW 296
7650: PUSH
7651: LD_INT 6
7653: LESS
7654: AND
7655: IFFALSE 7664
7657: PUSH
7658: LD_EXP 17
7662: NOT
7663: AND
7664: IFFALSE 7673
7666: PUSH
7667: LD_EXP 30
7671: NOT
7672: AND
7673: IFFALSE 7779
7675: GO 7677
7677: DISABLE
// begin DialogueOn ;
7678: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7682: LD_EXP 47
7686: PPUSH
7687: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7691: LD_EXP 47
7695: PPUSH
7696: LD_EXP 46
7700: PPUSH
7701: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7705: LD_EXP 46
7709: PPUSH
7710: LD_EXP 47
7714: PPUSH
7715: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7719: LD_EXP 46
7723: PPUSH
7724: LD_STRING DH-Givi-1
7726: PPUSH
7727: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7731: LD_EXP 47
7735: PPUSH
7736: LD_STRING DG-Givi-2
7738: PPUSH
7739: CALL_OW 88
// DialogueOff ;
7743: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7747: LD_EXP 47
7751: PPUSH
7752: LD_INT 2
7754: PPUSH
7755: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7759: LD_ADDR_EXP 14
7763: PUSH
7764: LD_EXP 14
7768: PPUSH
7769: LD_EXP 47
7773: PPUSH
7774: CALL 68261 0 2
7778: ST_TO_ADDR
// end ;
7779: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7780: LD_INT 2
7782: PPUSH
7783: LD_EXP 52
7787: PPUSH
7788: CALL_OW 292
7792: IFFALSE 7814
7794: PUSH
7795: LD_EXP 46
7799: PPUSH
7800: LD_EXP 52
7804: PPUSH
7805: CALL_OW 296
7809: PUSH
7810: LD_INT 6
7812: LESS
7813: AND
7814: IFFALSE 7823
7816: PUSH
7817: LD_EXP 17
7821: NOT
7822: AND
7823: IFFALSE 7832
7825: PUSH
7826: LD_EXP 30
7830: NOT
7831: AND
7832: IFFALSE 7938
7834: GO 7836
7836: DISABLE
// begin DialogueOn ;
7837: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7841: LD_EXP 52
7845: PPUSH
7846: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7850: LD_EXP 52
7854: PPUSH
7855: LD_EXP 46
7859: PPUSH
7860: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7864: LD_EXP 46
7868: PPUSH
7869: LD_EXP 52
7873: PPUSH
7874: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7878: LD_EXP 46
7882: PPUSH
7883: LD_STRING DH-Sophia-1
7885: PPUSH
7886: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7890: LD_EXP 52
7894: PPUSH
7895: LD_STRING DS-Sophia-2
7897: PPUSH
7898: CALL_OW 88
// DialogueOff ;
7902: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7906: LD_EXP 52
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7918: LD_ADDR_EXP 14
7922: PUSH
7923: LD_EXP 14
7927: PPUSH
7928: LD_EXP 52
7932: PPUSH
7933: CALL 68261 0 2
7937: ST_TO_ADDR
// end ;
7938: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7939: LD_INT 2
7941: PPUSH
7942: LD_EXP 54
7946: PPUSH
7947: CALL_OW 292
7951: IFFALSE 7973
7953: PUSH
7954: LD_EXP 46
7958: PPUSH
7959: LD_EXP 54
7963: PPUSH
7964: CALL_OW 296
7968: PUSH
7969: LD_INT 6
7971: LESS
7972: AND
7973: IFFALSE 7982
7975: PUSH
7976: LD_EXP 17
7980: NOT
7981: AND
7982: IFFALSE 7991
7984: PUSH
7985: LD_EXP 30
7989: NOT
7990: AND
7991: IFFALSE 8087
7993: GO 7995
7995: DISABLE
// begin DialogueOn ;
7996: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
8000: LD_EXP 54
8004: PPUSH
8005: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
8009: LD_EXP 46
8013: PPUSH
8014: LD_STRING DH-Olaf-1
8016: PPUSH
8017: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
8021: LD_EXP 54
8025: PPUSH
8026: LD_STRING DO-Olaf-2
8028: PPUSH
8029: CALL_OW 88
// if explosionsTakenByRussians then
8033: LD_EXP 21
8037: IFFALSE 8051
// Say ( Olaf , DO-Olaf-a-3 ) ;
8039: LD_EXP 54
8043: PPUSH
8044: LD_STRING DO-Olaf-a-3
8046: PPUSH
8047: CALL_OW 88
// DialogueOff ;
8051: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
8055: LD_EXP 54
8059: PPUSH
8060: LD_INT 2
8062: PPUSH
8063: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
8067: LD_ADDR_EXP 14
8071: PUSH
8072: LD_EXP 14
8076: PPUSH
8077: LD_EXP 54
8081: PPUSH
8082: CALL 68261 0 2
8086: ST_TO_ADDR
// end ;
8087: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
8088: LD_INT 2
8090: PPUSH
8091: LD_EXP 48
8095: PPUSH
8096: CALL_OW 292
8100: IFFALSE 8122
8102: PUSH
8103: LD_EXP 46
8107: PPUSH
8108: LD_EXP 48
8112: PPUSH
8113: CALL_OW 296
8117: PUSH
8118: LD_INT 6
8120: LESS
8121: AND
8122: IFFALSE 8131
8124: PUSH
8125: LD_EXP 17
8129: NOT
8130: AND
8131: IFFALSE 8140
8133: PUSH
8134: LD_EXP 30
8138: NOT
8139: AND
8140: IFFALSE 8368
8142: GO 8144
8144: DISABLE
8145: LD_INT 0
8147: PPUSH
8148: PPUSH
// begin DialogueOn ;
8149: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8153: LD_EXP 48
8157: PPUSH
8158: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: LD_INT 18
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: CALL_OW 517
8177: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8178: LD_ADDR_VAR 0 1
8182: PUSH
8183: DOUBLE
8184: LD_INT 1
8186: DEC
8187: ST_TO_ADDR
8188: LD_VAR 0 2
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PUSH
8197: FOR_TO
8198: IFFALSE 8280
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8200: LD_VAR 0 2
8204: PUSH
8205: LD_INT 1
8207: ARRAY
8208: PUSH
8209: LD_VAR 0 1
8213: ARRAY
8214: PPUSH
8215: LD_VAR 0 2
8219: PUSH
8220: LD_INT 2
8222: ARRAY
8223: PUSH
8224: LD_VAR 0 1
8228: ARRAY
8229: PPUSH
8230: LD_INT 2
8232: PPUSH
8233: LD_INT 3
8235: NEG
8236: PPUSH
8237: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8241: LD_VAR 0 2
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PUSH
8250: LD_VAR 0 1
8254: ARRAY
8255: PPUSH
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 2
8263: ARRAY
8264: PUSH
8265: LD_VAR 0 1
8269: ARRAY
8270: PPUSH
8271: LD_INT 2
8273: PPUSH
8274: CALL_OW 331
// end ;
8278: GO 8197
8280: POP
8281: POP
// Say ( Mike , DM-Mike-1 ) ;
8282: LD_EXP 48
8286: PPUSH
8287: LD_STRING DM-Mike-1
8289: PPUSH
8290: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8294: LD_EXP 46
8298: PPUSH
8299: LD_STRING DH-Mike-2
8301: PPUSH
8302: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8306: LD_INT 78
8308: PPUSH
8309: LD_INT 104
8311: PPUSH
8312: CALL_OW 84
// dwait ( 0 0$1 ) ;
8316: LD_INT 35
8318: PPUSH
8319: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8323: LD_EXP 46
8327: PPUSH
8328: CALL_OW 87
// DialogueOff ;
8332: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8336: LD_EXP 48
8340: PPUSH
8341: LD_INT 2
8343: PPUSH
8344: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8348: LD_ADDR_EXP 14
8352: PUSH
8353: LD_EXP 14
8357: PPUSH
8358: LD_EXP 48
8362: PPUSH
8363: CALL 68261 0 2
8367: ST_TO_ADDR
// end ;
8368: PPOPN 2
8370: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = class_prison and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8371: LD_EXP 46
8375: PPUSH
8376: LD_EXP 51
8380: PPUSH
8381: CALL_OW 296
8385: PUSH
8386: LD_INT 6
8388: LESS
8389: IFFALSE 8406
8391: PUSH
8392: LD_EXP 51
8396: PPUSH
8397: CALL_OW 257
8401: PUSH
8402: LD_INT 33
8404: EQUAL
8405: AND
8406: IFFALSE 8415
8408: PUSH
8409: LD_EXP 17
8413: NOT
8414: AND
8415: IFFALSE 8424
8417: PUSH
8418: LD_EXP 30
8422: NOT
8423: AND
8424: IFFALSE 8437
8426: PUSH
8427: LD_EXP 51
8431: PPUSH
8432: CALL_OW 302
8436: AND
8437: IFFALSE 8445
8439: PUSH
8440: LD_EXP 20
8444: AND
8445: IFFALSE 8459
8447: PUSH
8448: LD_EXP 51
8452: PUSH
8453: LD_EXP 14
8457: IN
8458: AND
8459: IFFALSE 8476
8461: PUSH
8462: LD_EXP 51
8466: PPUSH
8467: CALL_OW 255
8471: PUSH
8472: LD_INT 2
8474: EQUAL
8475: AND
8476: IFFALSE 8505
8478: GO 8480
8480: DISABLE
// begin DialogueOn ;
8481: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8485: LD_EXP 46
8489: PPUSH
8490: LD_STRING DH-Kaia-Revolver-2
8492: PPUSH
8493: CALL_OW 88
// SetClassKaiaRevolver ;
8497: CALL 1771 0 0
// DialogueOff ;
8501: CALL_OW 7
// end ;
8505: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8506: LD_EXP 49
8510: IFFALSE 8518
8512: PUSH
8513: LD_EXP 56
8517: AND
8518: IFFALSE 8535
8520: PUSH
8521: LD_EXP 56
8525: PPUSH
8526: CALL_OW 255
8530: PUSH
8531: LD_INT 2
8533: NONEQUAL
8534: AND
8535: IFFALSE 8552
8537: PUSH
8538: LD_EXP 49
8542: PPUSH
8543: CALL_OW 255
8547: PUSH
8548: LD_INT 2
8550: NONEQUAL
8551: AND
8552: IFFALSE 8579
8554: PUSH
8555: LD_EXP 14
8559: PPUSH
8560: LD_INT 22
8562: PUSH
8563: LD_INT 2
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 72
8574: PUSH
8575: LD_INT 5
8577: GREATER
8578: AND
8579: IFFALSE 8588
8581: PUSH
8582: LD_EXP 17
8586: NOT
8587: AND
8588: IFFALSE 8597
8590: PUSH
8591: LD_EXP 30
8595: NOT
8596: AND
8597: IFFALSE 9334
8599: GO 8601
8601: DISABLE
8602: LD_INT 0
8604: PPUSH
8605: PPUSH
// begin DialogueOn ;
8606: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8610: LD_ADDR_VAR 0 2
8614: PUSH
8615: LD_EXP 47
8619: PPUSH
8620: CALL_OW 302
8624: IFFALSE 8638
8626: PUSH
8627: LD_EXP 47
8631: PUSH
8632: LD_EXP 14
8636: IN
8637: AND
8638: IFFALSE 8655
8640: PUSH
8641: LD_EXP 47
8645: PPUSH
8646: CALL_OW 255
8650: PUSH
8651: LD_INT 2
8653: EQUAL
8654: AND
8655: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8656: LD_EXP 46
8660: PPUSH
8661: LD_STRING DH-Med-1
8663: PPUSH
8664: CALL_OW 88
// if hasGivi then
8668: LD_VAR 0 2
8672: IFFALSE 8688
// Say ( Givi , DG-Med-2 ) else
8674: LD_EXP 47
8678: PPUSH
8679: LD_STRING DG-Med-2
8681: PPUSH
8682: CALL_OW 88
8686: GO 8793
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8688: LD_EXP 14
8692: PUSH
8693: LD_EXP 57
8697: ISECT
8698: PPUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 2
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 26
8711: PUSH
8712: LD_INT 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PUSH
8719: EMPTY
8720: LIST
8721: LIST
8722: PPUSH
8723: CALL_OW 72
8727: PUSH
8728: LD_INT 1
8730: ARRAY
8731: PPUSH
8732: LD_STRING DArm-Med-e-2
8734: PPUSH
8735: CALL_OW 88
8739: NOT
8740: IFFALSE 8793
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8742: LD_EXP 14
8746: PUSH
8747: LD_EXP 57
8751: ISECT
8752: PPUSH
8753: LD_INT 22
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 26
8765: PUSH
8766: LD_INT 2
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: PPUSH
8777: CALL_OW 72
8781: PUSH
8782: LD_INT 1
8784: ARRAY
8785: PPUSH
8786: LD_STRING DArf-Med-e-2
8788: PPUSH
8789: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8793: LD_INT 154
8795: PPUSH
8796: LD_INT 119
8798: PPUSH
8799: LD_INT 70
8801: PPUSH
8802: CALL 20731 0 3
// Say ( Heike , DH-Med-3 ) ;
8806: LD_EXP 46
8810: PPUSH
8811: LD_STRING DH-Med-3
8813: PPUSH
8814: CALL_OW 88
// if hasGivi then
8818: LD_VAR 0 2
8822: IFFALSE 8838
// Say ( Givi , DG-Med-4 ) else
8824: LD_EXP 47
8828: PPUSH
8829: LD_STRING DG-Med-4
8831: PPUSH
8832: CALL_OW 88
8836: GO 8943
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8838: LD_EXP 14
8842: PUSH
8843: LD_EXP 57
8847: ISECT
8848: PPUSH
8849: LD_INT 22
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 26
8861: PUSH
8862: LD_INT 1
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PPUSH
8873: CALL_OW 72
8877: PUSH
8878: LD_INT 1
8880: ARRAY
8881: PPUSH
8882: LD_STRING DArm-Med-e-4
8884: PPUSH
8885: CALL_OW 88
8889: NOT
8890: IFFALSE 8943
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8892: LD_EXP 14
8896: PUSH
8897: LD_EXP 57
8901: ISECT
8902: PPUSH
8903: LD_INT 22
8905: PUSH
8906: LD_INT 2
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 26
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: EMPTY
8924: LIST
8925: LIST
8926: PPUSH
8927: CALL_OW 72
8931: PUSH
8932: LD_INT 1
8934: ARRAY
8935: PPUSH
8936: LD_STRING DArf-Med-e-4
8938: PPUSH
8939: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8943: LD_ADDR_VAR 0 1
8947: PUSH
8948: LD_EXP 51
8952: PPUSH
8953: CALL_OW 302
8957: IFFALSE 8971
8959: PUSH
8960: LD_EXP 51
8964: PUSH
8965: LD_EXP 14
8969: IN
8970: AND
8971: IFFALSE 8988
8973: PUSH
8974: LD_EXP 51
8978: PPUSH
8979: CALL_OW 255
8983: PUSH
8984: LD_INT 2
8986: EQUAL
8987: AND
8988: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8989: LD_EXP 48
8993: PPUSH
8994: CALL_OW 302
8998: IFFALSE 9012
9000: PUSH
9001: LD_EXP 48
9005: PUSH
9006: LD_EXP 14
9010: IN
9011: AND
9012: IFFALSE 9029
9014: PUSH
9015: LD_EXP 51
9019: PPUSH
9020: CALL_OW 255
9024: PUSH
9025: LD_INT 2
9027: EQUAL
9028: AND
9029: IFFALSE 9061
// begin Say ( Mike , DM-Med-5 ) ;
9031: LD_EXP 48
9035: PPUSH
9036: LD_STRING DM-Med-5
9038: PPUSH
9039: CALL_OW 88
// if hasKaia then
9043: LD_VAR 0 1
9047: IFFALSE 9061
// Say ( Kaia , DK-Med-6 ) ;
9049: LD_EXP 51
9053: PPUSH
9054: LD_STRING DK-Med-6
9056: PPUSH
9057: CALL_OW 88
// end ; if hasKaia then
9061: LD_VAR 0 1
9065: IFFALSE 9314
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9067: LD_INT 175
9069: PPUSH
9070: LD_INT 123
9072: PPUSH
9073: LD_INT 2
9075: PPUSH
9076: LD_INT 8
9078: NEG
9079: PPUSH
9080: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9084: LD_INT 175
9086: PPUSH
9087: LD_INT 123
9089: PPUSH
9090: LD_INT 2
9092: PPUSH
9093: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9097: LD_INT 175
9099: PPUSH
9100: LD_INT 123
9102: PPUSH
9103: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9107: LD_EXP 51
9111: PPUSH
9112: LD_STRING DK-Med-7
9114: PPUSH
9115: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9119: LD_EXP 51
9123: PPUSH
9124: LD_STRING DK-Med-8
9126: PPUSH
9127: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9131: LD_EXP 53
9135: PPUSH
9136: CALL_OW 302
9140: IFFALSE 9154
9142: PUSH
9143: LD_EXP 53
9147: PUSH
9148: LD_EXP 14
9152: IN
9153: AND
9154: IFFALSE 9171
9156: PUSH
9157: LD_EXP 53
9161: PPUSH
9162: CALL_OW 255
9166: PUSH
9167: LD_INT 2
9169: EQUAL
9170: AND
9171: IFFALSE 9229
// begin Say ( Markov , DMar-Med-9 ) ;
9173: LD_EXP 53
9177: PPUSH
9178: LD_STRING DMar-Med-9
9180: PPUSH
9181: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9185: LD_EXP 51
9189: PPUSH
9190: LD_STRING DK-Med-10
9192: PPUSH
9193: CALL_OW 88
// if hasGivi then
9197: LD_VAR 0 2
9201: IFFALSE 9217
// Say ( Kaia , DK-Med-11 ) else
9203: LD_EXP 51
9207: PPUSH
9208: LD_STRING DK-Med-11
9210: PPUSH
9211: CALL_OW 88
9215: GO 9229
// Say ( Kaia , DK-Med-a-11 ) ;
9217: LD_EXP 51
9221: PPUSH
9222: LD_STRING DK-Med-a-11
9224: PPUSH
9225: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9229: LD_EXP 50
9233: PPUSH
9234: CALL_OW 302
9238: IFFALSE 9252
9240: PUSH
9241: LD_EXP 50
9245: PUSH
9246: LD_EXP 14
9250: IN
9251: AND
9252: IFFALSE 9269
9254: PUSH
9255: LD_EXP 50
9259: PPUSH
9260: CALL_OW 255
9264: PUSH
9265: LD_INT 2
9267: EQUAL
9268: AND
9269: IFFALSE 9314
// begin Say ( Kamil , DKam-Med-12 ) ;
9271: LD_EXP 50
9275: PPUSH
9276: LD_STRING DKam-Med-12
9278: PPUSH
9279: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9283: LD_EXP 50
9287: PPUSH
9288: LD_STRING DKam-Med-13
9290: PPUSH
9291: CALL_OW 88
// if not hasExplosionCollected then
9295: LD_EXP 23
9299: NOT
9300: IFFALSE 9314
// Say ( Heike , DH-Med-d-14 ) ;
9302: LD_EXP 46
9306: PPUSH
9307: LD_STRING DH-Med-d-14
9309: PPUSH
9310: CALL_OW 88
// end ; end ; DialogueOff ;
9314: CALL_OW 7
// adminAreaDiscovered := true ;
9318: LD_ADDR_EXP 22
9322: PUSH
9323: LD_INT 1
9325: ST_TO_ADDR
// laundryAllowed := true ;
9326: LD_ADDR_EXP 26
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// end ;
9334: PPOPN 2
9336: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9337: LD_EXP 49
9341: NOT
9342: IFFALSE 9350
9344: PUSH
9345: LD_EXP 56
9349: AND
9350: IFFALSE 9365
9352: PUSH
9353: LD_EXP 56
9357: PUSH
9358: LD_EXP 14
9362: IN
9363: NOT
9364: AND
9365: IFFALSE 9392
9367: PUSH
9368: LD_EXP 14
9372: PPUSH
9373: LD_INT 22
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 72
9387: PUSH
9388: LD_INT 4
9390: GREATER
9391: AND
9392: IFFALSE 9401
9394: PUSH
9395: LD_EXP 17
9399: NOT
9400: AND
9401: IFFALSE 9410
9403: PUSH
9404: LD_EXP 30
9408: NOT
9409: AND
9410: IFFALSE 10147
9412: GO 9414
9414: DISABLE
9415: LD_INT 0
9417: PPUSH
9418: PPUSH
// begin DialogueOn ;
9419: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_EXP 47
9432: PPUSH
9433: CALL_OW 302
9437: IFFALSE 9451
9439: PUSH
9440: LD_EXP 47
9444: PUSH
9445: LD_EXP 14
9449: IN
9450: AND
9451: IFFALSE 9468
9453: PUSH
9454: LD_EXP 47
9458: PPUSH
9459: CALL_OW 255
9463: PUSH
9464: LD_INT 2
9466: EQUAL
9467: AND
9468: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9469: LD_EXP 46
9473: PPUSH
9474: LD_STRING DH-Med-a-1
9476: PPUSH
9477: CALL_OW 88
// if hasGivi then
9481: LD_VAR 0 1
9485: IFFALSE 9501
// Say ( Givi , DG-Med-a-2 ) else
9487: LD_EXP 47
9491: PPUSH
9492: LD_STRING DG-Med-a-2
9494: PPUSH
9495: CALL_OW 88
9499: GO 9606
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9501: LD_EXP 14
9505: PUSH
9506: LD_EXP 57
9510: ISECT
9511: PPUSH
9512: LD_INT 22
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 26
9524: PUSH
9525: LD_INT 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PPUSH
9536: CALL_OW 72
9540: PUSH
9541: LD_INT 1
9543: ARRAY
9544: PPUSH
9545: LD_STRING DArm-Med-f-2
9547: PPUSH
9548: CALL_OW 88
9552: NOT
9553: IFFALSE 9606
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9555: LD_EXP 14
9559: PUSH
9560: LD_EXP 57
9564: ISECT
9565: PPUSH
9566: LD_INT 22
9568: PUSH
9569: LD_INT 2
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 26
9578: PUSH
9579: LD_INT 2
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PPUSH
9590: CALL_OW 72
9594: PUSH
9595: LD_INT 1
9597: ARRAY
9598: PPUSH
9599: LD_STRING DArf-Med-f-2
9601: PPUSH
9602: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9606: LD_INT 154
9608: PPUSH
9609: LD_INT 119
9611: PPUSH
9612: LD_INT 70
9614: PPUSH
9615: CALL 20731 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9619: LD_EXP 46
9623: PPUSH
9624: LD_STRING DH-Med-a-3
9626: PPUSH
9627: CALL_OW 88
// if hasGivi then
9631: LD_VAR 0 1
9635: IFFALSE 9651
// Say ( Givi , DG-Med-a-4 ) else
9637: LD_EXP 47
9641: PPUSH
9642: LD_STRING DG-Med-a-4
9644: PPUSH
9645: CALL_OW 88
9649: GO 9756
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9651: LD_EXP 14
9655: PUSH
9656: LD_EXP 57
9660: ISECT
9661: PPUSH
9662: LD_INT 22
9664: PUSH
9665: LD_INT 2
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 26
9674: PUSH
9675: LD_INT 1
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PPUSH
9686: CALL_OW 72
9690: PUSH
9691: LD_INT 1
9693: ARRAY
9694: PPUSH
9695: LD_STRING DArm-Med-f-4
9697: PPUSH
9698: CALL_OW 88
9702: NOT
9703: IFFALSE 9756
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9705: LD_EXP 14
9709: PUSH
9710: LD_EXP 57
9714: ISECT
9715: PPUSH
9716: LD_INT 22
9718: PUSH
9719: LD_INT 2
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PUSH
9726: LD_INT 26
9728: PUSH
9729: LD_INT 2
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: PPUSH
9740: CALL_OW 72
9744: PUSH
9745: LD_INT 1
9747: ARRAY
9748: PPUSH
9749: LD_STRING DArf-Med-f-4
9751: PPUSH
9752: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_EXP 51
9765: PPUSH
9766: CALL_OW 302
9770: IFFALSE 9784
9772: PUSH
9773: LD_EXP 51
9777: PUSH
9778: LD_EXP 14
9782: IN
9783: AND
9784: IFFALSE 9801
9786: PUSH
9787: LD_EXP 51
9791: PPUSH
9792: CALL_OW 255
9796: PUSH
9797: LD_INT 2
9799: EQUAL
9800: AND
9801: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9802: LD_EXP 48
9806: PPUSH
9807: CALL_OW 302
9811: IFFALSE 9825
9813: PUSH
9814: LD_EXP 48
9818: PUSH
9819: LD_EXP 14
9823: IN
9824: AND
9825: IFFALSE 9842
9827: PUSH
9828: LD_EXP 48
9832: PPUSH
9833: CALL_OW 255
9837: PUSH
9838: LD_INT 2
9840: EQUAL
9841: AND
9842: IFFALSE 9874
// begin Say ( Mike , DM-Med-5 ) ;
9844: LD_EXP 48
9848: PPUSH
9849: LD_STRING DM-Med-5
9851: PPUSH
9852: CALL_OW 88
// if hasKaia then
9856: LD_VAR 0 2
9860: IFFALSE 9874
// Say ( Kaia , DK-Med-6 ) ;
9862: LD_EXP 51
9866: PPUSH
9867: LD_STRING DK-Med-6
9869: PPUSH
9870: CALL_OW 88
// end ; if hasKaia then
9874: LD_VAR 0 2
9878: IFFALSE 10127
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9880: LD_INT 175
9882: PPUSH
9883: LD_INT 123
9885: PPUSH
9886: LD_INT 2
9888: PPUSH
9889: LD_INT 8
9891: NEG
9892: PPUSH
9893: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9897: LD_INT 175
9899: PPUSH
9900: LD_INT 123
9902: PPUSH
9903: LD_INT 2
9905: PPUSH
9906: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9910: LD_INT 175
9912: PPUSH
9913: LD_INT 123
9915: PPUSH
9916: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9920: LD_EXP 51
9924: PPUSH
9925: LD_STRING DK-Med-7
9927: PPUSH
9928: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9932: LD_EXP 51
9936: PPUSH
9937: LD_STRING DK-Med-8
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9944: LD_EXP 53
9948: PPUSH
9949: CALL_OW 302
9953: IFFALSE 9967
9955: PUSH
9956: LD_EXP 53
9960: PUSH
9961: LD_EXP 14
9965: IN
9966: AND
9967: IFFALSE 9984
9969: PUSH
9970: LD_EXP 53
9974: PPUSH
9975: CALL_OW 255
9979: PUSH
9980: LD_INT 2
9982: EQUAL
9983: AND
9984: IFFALSE 10042
// begin Say ( Markov , DMar-Med-9 ) ;
9986: LD_EXP 53
9990: PPUSH
9991: LD_STRING DMar-Med-9
9993: PPUSH
9994: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9998: LD_EXP 51
10002: PPUSH
10003: LD_STRING DK-Med-10
10005: PPUSH
10006: CALL_OW 88
// if hasGivi then
10010: LD_VAR 0 1
10014: IFFALSE 10030
// Say ( Kaia , DK-Med-11 ) else
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DK-Med-11
10023: PPUSH
10024: CALL_OW 88
10028: GO 10042
// Say ( Kaia , DK-Med-a-11 ) ;
10030: LD_EXP 51
10034: PPUSH
10035: LD_STRING DK-Med-a-11
10037: PPUSH
10038: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10042: LD_EXP 50
10046: PPUSH
10047: CALL_OW 302
10051: IFFALSE 10065
10053: PUSH
10054: LD_EXP 50
10058: PUSH
10059: LD_EXP 14
10063: IN
10064: AND
10065: IFFALSE 10082
10067: PUSH
10068: LD_EXP 50
10072: PPUSH
10073: CALL_OW 255
10077: PUSH
10078: LD_INT 2
10080: EQUAL
10081: AND
10082: IFFALSE 10127
// begin Say ( Kamil , DKam-Med-12 ) ;
10084: LD_EXP 50
10088: PPUSH
10089: LD_STRING DKam-Med-12
10091: PPUSH
10092: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10096: LD_EXP 50
10100: PPUSH
10101: LD_STRING DKam-Med-13
10103: PPUSH
10104: CALL_OW 88
// if not hasExplosionCollected then
10108: LD_EXP 23
10112: NOT
10113: IFFALSE 10127
// Say ( Heike , DH-Med-d-14 ) ;
10115: LD_EXP 46
10119: PPUSH
10120: LD_STRING DH-Med-d-14
10122: PPUSH
10123: CALL_OW 88
// end ; end ; DialogueOff ;
10127: CALL_OW 7
// adminAreaDiscovered := true ;
10131: LD_ADDR_EXP 22
10135: PUSH
10136: LD_INT 1
10138: ST_TO_ADDR
// laundryAllowed := true ;
10139: LD_ADDR_EXP 26
10143: PUSH
10144: LD_INT 1
10146: ST_TO_ADDR
// end ;
10147: PPOPN 2
10149: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
10150: LD_EXP 49
10154: IFFALSE 10163
10156: PUSH
10157: LD_EXP 56
10161: NOT
10162: AND
10163: IFFALSE 10178
10165: PUSH
10166: LD_EXP 49
10170: PUSH
10171: LD_EXP 14
10175: IN
10176: NOT
10177: AND
10178: IFFALSE 10205
10180: PUSH
10181: LD_EXP 14
10185: PPUSH
10186: LD_INT 22
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PPUSH
10196: CALL_OW 72
10200: PUSH
10201: LD_INT 4
10203: GREATER
10204: AND
10205: IFFALSE 10214
10207: PUSH
10208: LD_EXP 17
10212: NOT
10213: AND
10214: IFFALSE 10223
10216: PUSH
10217: LD_EXP 30
10221: NOT
10222: AND
10223: IFFALSE 10960
10225: GO 10227
10227: DISABLE
10228: LD_INT 0
10230: PPUSH
10231: PPUSH
// begin DialogueOn ;
10232: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10236: LD_ADDR_VAR 0 1
10240: PUSH
10241: LD_EXP 47
10245: PPUSH
10246: CALL_OW 302
10250: IFFALSE 10264
10252: PUSH
10253: LD_EXP 47
10257: PUSH
10258: LD_EXP 14
10262: IN
10263: AND
10264: IFFALSE 10281
10266: PUSH
10267: LD_EXP 47
10271: PPUSH
10272: CALL_OW 255
10276: PUSH
10277: LD_INT 2
10279: EQUAL
10280: AND
10281: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10282: LD_EXP 46
10286: PPUSH
10287: LD_STRING DH-Med-b-1
10289: PPUSH
10290: CALL_OW 88
// if hasGivi then
10294: LD_VAR 0 1
10298: IFFALSE 10314
// Say ( Givi , DG-Med-a-2 ) else
10300: LD_EXP 47
10304: PPUSH
10305: LD_STRING DG-Med-a-2
10307: PPUSH
10308: CALL_OW 88
10312: GO 10419
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10314: LD_EXP 14
10318: PUSH
10319: LD_EXP 57
10323: ISECT
10324: PPUSH
10325: LD_INT 22
10327: PUSH
10328: LD_INT 2
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 26
10337: PUSH
10338: LD_INT 1
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 72
10353: PUSH
10354: LD_INT 1
10356: ARRAY
10357: PPUSH
10358: LD_STRING DArm-Med-f-2
10360: PPUSH
10361: CALL_OW 88
10365: NOT
10366: IFFALSE 10419
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10368: LD_EXP 14
10372: PUSH
10373: LD_EXP 57
10377: ISECT
10378: PPUSH
10379: LD_INT 22
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: LD_INT 26
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PPUSH
10403: CALL_OW 72
10407: PUSH
10408: LD_INT 1
10410: ARRAY
10411: PPUSH
10412: LD_STRING DArf-Med-f-2
10414: PPUSH
10415: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10419: LD_INT 154
10421: PPUSH
10422: LD_INT 119
10424: PPUSH
10425: LD_INT 70
10427: PPUSH
10428: CALL 20731 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10432: LD_EXP 46
10436: PPUSH
10437: LD_STRING DH-Med-a-3
10439: PPUSH
10440: CALL_OW 88
// if hasGivi then
10444: LD_VAR 0 1
10448: IFFALSE 10464
// Say ( Givi , DG-Med-a-4 ) else
10450: LD_EXP 47
10454: PPUSH
10455: LD_STRING DG-Med-a-4
10457: PPUSH
10458: CALL_OW 88
10462: GO 10569
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10464: LD_EXP 14
10468: PUSH
10469: LD_EXP 57
10473: ISECT
10474: PPUSH
10475: LD_INT 22
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PUSH
10485: LD_INT 26
10487: PUSH
10488: LD_INT 1
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PPUSH
10499: CALL_OW 72
10503: PUSH
10504: LD_INT 1
10506: ARRAY
10507: PPUSH
10508: LD_STRING DArm-Med-f-4
10510: PPUSH
10511: CALL_OW 88
10515: NOT
10516: IFFALSE 10569
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10518: LD_EXP 14
10522: PUSH
10523: LD_EXP 57
10527: ISECT
10528: PPUSH
10529: LD_INT 22
10531: PUSH
10532: LD_INT 2
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 26
10541: PUSH
10542: LD_INT 2
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PPUSH
10553: CALL_OW 72
10557: PUSH
10558: LD_INT 1
10560: ARRAY
10561: PPUSH
10562: LD_STRING DArf-Med-f-4
10564: PPUSH
10565: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10569: LD_ADDR_VAR 0 2
10573: PUSH
10574: LD_EXP 51
10578: PPUSH
10579: CALL_OW 302
10583: IFFALSE 10597
10585: PUSH
10586: LD_EXP 51
10590: PUSH
10591: LD_EXP 14
10595: IN
10596: AND
10597: IFFALSE 10614
10599: PUSH
10600: LD_EXP 51
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: LD_INT 2
10612: EQUAL
10613: AND
10614: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10615: LD_EXP 48
10619: PPUSH
10620: CALL_OW 302
10624: IFFALSE 10638
10626: PUSH
10627: LD_EXP 48
10631: PUSH
10632: LD_EXP 14
10636: IN
10637: AND
10638: IFFALSE 10655
10640: PUSH
10641: LD_EXP 48
10645: PPUSH
10646: CALL_OW 255
10650: PUSH
10651: LD_INT 2
10653: EQUAL
10654: AND
10655: IFFALSE 10687
// begin Say ( Mike , DM-Med-5 ) ;
10657: LD_EXP 48
10661: PPUSH
10662: LD_STRING DM-Med-5
10664: PPUSH
10665: CALL_OW 88
// if hasKaia then
10669: LD_VAR 0 2
10673: IFFALSE 10687
// Say ( Kaia , DK-Med-6 ) ;
10675: LD_EXP 51
10679: PPUSH
10680: LD_STRING DK-Med-6
10682: PPUSH
10683: CALL_OW 88
// end ; if hasKaia then
10687: LD_VAR 0 2
10691: IFFALSE 10940
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10693: LD_INT 175
10695: PPUSH
10696: LD_INT 123
10698: PPUSH
10699: LD_INT 2
10701: PPUSH
10702: LD_INT 8
10704: NEG
10705: PPUSH
10706: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10710: LD_INT 175
10712: PPUSH
10713: LD_INT 123
10715: PPUSH
10716: LD_INT 2
10718: PPUSH
10719: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10723: LD_INT 175
10725: PPUSH
10726: LD_INT 123
10728: PPUSH
10729: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10733: LD_EXP 51
10737: PPUSH
10738: LD_STRING DK-Med-7
10740: PPUSH
10741: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10745: LD_EXP 51
10749: PPUSH
10750: LD_STRING DK-Med-8
10752: PPUSH
10753: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10757: LD_EXP 53
10761: PPUSH
10762: CALL_OW 302
10766: IFFALSE 10780
10768: PUSH
10769: LD_EXP 53
10773: PUSH
10774: LD_EXP 14
10778: IN
10779: AND
10780: IFFALSE 10797
10782: PUSH
10783: LD_EXP 53
10787: PPUSH
10788: CALL_OW 255
10792: PUSH
10793: LD_INT 2
10795: EQUAL
10796: AND
10797: IFFALSE 10855
// begin Say ( Markov , DMar-Med-9 ) ;
10799: LD_EXP 53
10803: PPUSH
10804: LD_STRING DMar-Med-9
10806: PPUSH
10807: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10811: LD_EXP 51
10815: PPUSH
10816: LD_STRING DK-Med-10
10818: PPUSH
10819: CALL_OW 88
// if hasGivi then
10823: LD_VAR 0 1
10827: IFFALSE 10843
// Say ( Kaia , DK-Med-11 ) else
10829: LD_EXP 51
10833: PPUSH
10834: LD_STRING DK-Med-11
10836: PPUSH
10837: CALL_OW 88
10841: GO 10855
// Say ( Kaia , DK-Med-a-11 ) ;
10843: LD_EXP 51
10847: PPUSH
10848: LD_STRING DK-Med-a-11
10850: PPUSH
10851: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10855: LD_EXP 50
10859: PPUSH
10860: CALL_OW 302
10864: IFFALSE 10878
10866: PUSH
10867: LD_EXP 50
10871: PUSH
10872: LD_EXP 14
10876: IN
10877: AND
10878: IFFALSE 10895
10880: PUSH
10881: LD_EXP 50
10885: PPUSH
10886: CALL_OW 255
10890: PUSH
10891: LD_INT 2
10893: EQUAL
10894: AND
10895: IFFALSE 10940
// begin Say ( Kamil , DKam-Med-12 ) ;
10897: LD_EXP 50
10901: PPUSH
10902: LD_STRING DKam-Med-12
10904: PPUSH
10905: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10909: LD_EXP 50
10913: PPUSH
10914: LD_STRING DKam-Med-13
10916: PPUSH
10917: CALL_OW 88
// if not hasExplosionCollected then
10921: LD_EXP 23
10925: NOT
10926: IFFALSE 10940
// Say ( Heike , DH-Med-d-14 ) ;
10928: LD_EXP 46
10932: PPUSH
10933: LD_STRING DH-Med-d-14
10935: PPUSH
10936: CALL_OW 88
// end ; end ; DialogueOff ;
10940: CALL_OW 7
// adminAreaDiscovered := true ;
10944: LD_ADDR_EXP 22
10948: PUSH
10949: LD_INT 1
10951: ST_TO_ADDR
// laundryAllowed := true ;
10952: LD_ADDR_EXP 26
10956: PUSH
10957: LD_INT 1
10959: ST_TO_ADDR
// end ;
10960: PPOPN 2
10962: END
// every 0 0$1 trigger laundryAllowed do
10963: LD_EXP 26
10967: IFFALSE 10979
10969: GO 10971
10971: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10972: LD_STRING M1-laundry
10974: PPUSH
10975: CALL_OW 337
10979: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10980: LD_EXP 49
10984: NOT
10985: IFFALSE 10994
10987: PUSH
10988: LD_EXP 56
10992: NOT
10993: AND
10994: IFFALSE 11007
10996: PUSH
10997: LD_EXP 54
11001: PPUSH
11002: CALL_OW 302
11006: AND
11007: IFFALSE 11021
11009: PUSH
11010: LD_EXP 54
11014: PUSH
11015: LD_EXP 14
11019: IN
11020: AND
11021: IFFALSE 11038
11023: PUSH
11024: LD_EXP 54
11028: PPUSH
11029: CALL_OW 255
11033: PUSH
11034: LD_INT 2
11036: EQUAL
11037: AND
11038: IFFALSE 11047
11040: PUSH
11041: LD_EXP 17
11045: NOT
11046: AND
11047: IFFALSE 11056
11049: PUSH
11050: LD_EXP 30
11054: NOT
11055: AND
11056: IFFALSE 11216
11058: GO 11060
11060: DISABLE
// begin DialogueOn ;
11061: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
11065: LD_INT 152
11067: PPUSH
11068: LD_INT 115
11070: PPUSH
11071: LD_INT 2
11073: PPUSH
11074: LD_INT 16
11076: NEG
11077: PPUSH
11078: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
11082: LD_INT 152
11084: PPUSH
11085: LD_INT 115
11087: PPUSH
11088: LD_INT 2
11090: PPUSH
11091: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
11095: LD_INT 152
11097: PPUSH
11098: LD_INT 115
11100: PPUSH
11101: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
11105: LD_EXP 54
11109: PPUSH
11110: LD_STRING DO-Med-c-1
11112: PPUSH
11113: CALL_OW 88
// if not hasExplosionCollected then
11117: LD_EXP 23
11121: NOT
11122: IFFALSE 11138
// Say ( Heike , DH-Med-d-14 ) else
11124: LD_EXP 46
11128: PPUSH
11129: LD_STRING DH-Med-d-14
11131: PPUSH
11132: CALL_OW 88
11136: GO 11204
// begin Say ( Heike , DH-Med-c-2 ) ;
11138: LD_EXP 46
11142: PPUSH
11143: LD_STRING DH-Med-c-2
11145: PPUSH
11146: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
11150: LD_EXP 51
11154: PPUSH
11155: CALL_OW 302
11159: IFFALSE 11173
11161: PUSH
11162: LD_EXP 51
11166: PUSH
11167: LD_EXP 14
11171: IN
11172: AND
11173: IFFALSE 11190
11175: PUSH
11176: LD_EXP 51
11180: PPUSH
11181: CALL_OW 255
11185: PUSH
11186: LD_INT 2
11188: EQUAL
11189: AND
11190: IFFALSE 11204
// Say ( Kaia , DK-Med-c-3 ) ;
11192: LD_EXP 51
11196: PPUSH
11197: LD_STRING DK-Med-c-3
11199: PPUSH
11200: CALL_OW 88
// end ; DialogueOff ;
11204: CALL_OW 7
// adminAreaDiscovered := true ;
11208: LD_ADDR_EXP 22
11212: PUSH
11213: LD_INT 1
11215: ST_TO_ADDR
// end ;
11216: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
11217: LD_EXP 51
11221: PPUSH
11222: CALL_OW 256
11226: PUSH
11227: LD_INT 250
11229: LESS
11230: IFFALSE 11244
11232: PUSH
11233: LD_EXP 51
11237: PUSH
11238: LD_EXP 14
11242: IN
11243: AND
11244: IFFALSE 11252
11246: PUSH
11247: LD_EXP 17
11251: AND
11252: IFFALSE 11260
11254: PUSH
11255: LD_EXP 24
11259: AND
11260: IFFALSE 11389
11262: GO 11264
11264: DISABLE
// begin DialogueOn ;
11265: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11269: LD_EXP 51
11273: PPUSH
11274: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11278: LD_EXP 51
11282: PPUSH
11283: LD_STRING DK-death-1
11285: PPUSH
11286: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11290: LD_EXP 46
11294: PPUSH
11295: LD_STRING DH-death-2
11297: PPUSH
11298: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11302: LD_EXP 51
11306: PPUSH
11307: LD_STRING DK-death-3
11309: PPUSH
11310: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11314: LD_EXP 51
11318: PPUSH
11319: LD_STRING DK-death-4
11321: PPUSH
11322: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11326: LD_EXP 51
11330: PPUSH
11331: LD_INT 8
11333: PPUSH
11334: CALL_OW 235
// ComStop ( Kaia ) ;
11338: LD_EXP 51
11342: PPUSH
11343: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11347: LD_INT 8
11349: PPUSH
11350: LD_INT 2
11352: PPUSH
11353: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11357: LD_ADDR_EXP 14
11361: PUSH
11362: LD_EXP 14
11366: PUSH
11367: LD_EXP 51
11371: DIFF
11372: ST_TO_ADDR
// DialogueOff ;
11373: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11377: LD_EXP 48
11381: PPUSH
11382: LD_STRING DM-death-5
11384: PPUSH
11385: CALL_OW 88
// end ;
11389: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11390: LD_EXP 25
11394: NOT
11395: IFFALSE 11404
11397: PUSH
11398: LD_EXP 30
11402: NOT
11403: AND
11404: IFFALSE 11419
11406: PUSH
11407: LD_EXP 59
11411: PUSH
11412: LD_EXP 14
11416: IN
11417: NOT
11418: AND
11419: IFFALSE 11435
11421: PUSH
11422: LD_INT 2
11424: PPUSH
11425: LD_EXP 59
11429: PPUSH
11430: CALL_OW 292
11434: AND
11435: IFFALSE 11457
11437: PUSH
11438: LD_EXP 46
11442: PPUSH
11443: LD_EXP 59
11447: PPUSH
11448: CALL_OW 296
11452: PUSH
11453: LD_INT 6
11455: LESS
11456: AND
11457: IFFALSE 11466
11459: PUSH
11460: LD_EXP 17
11464: NOT
11465: AND
11466: IFFALSE 11690
11468: GO 11470
11470: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11471: LD_EXP 59
11475: PPUSH
11476: LD_EXP 46
11480: PPUSH
11481: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11485: LD_EXP 46
11489: PPUSH
11490: LD_EXP 59
11494: PPUSH
11495: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11499: LD_INT 10
11501: PPUSH
11502: CALL_OW 67
// DialogueOn ;
11506: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11510: LD_EXP 59
11514: PPUSH
11515: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11519: LD_EXP 46
11523: PPUSH
11524: LD_STRING DH-Deal-1
11526: PPUSH
11527: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11531: LD_EXP 59
11535: PPUSH
11536: LD_STRING DJ-Deal-2
11538: PPUSH
11539: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11543: LD_EXP 46
11547: PPUSH
11548: LD_STRING DH-Deal-3
11550: PPUSH
11551: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11555: LD_EXP 59
11559: PPUSH
11560: LD_STRING DJ-Deal-4
11562: PPUSH
11563: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11567: LD_EXP 59
11571: PPUSH
11572: LD_STRING DJ-Deal-5
11574: PPUSH
11575: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11579: LD_EXP 59
11583: PPUSH
11584: LD_STRING DJ-Deal-6
11586: PPUSH
11587: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11591: LD_EXP 59
11595: PPUSH
11596: LD_STRING DJ-Deal-7
11598: PPUSH
11599: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11603: LD_EXP 46
11607: PPUSH
11608: LD_STRING DH-Deal-8
11610: PPUSH
11611: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11615: LD_EXP 46
11619: PPUSH
11620: LD_STRING DH-Deal-9
11622: PPUSH
11623: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11627: LD_EXP 59
11631: PPUSH
11632: LD_STRING DJ-Deal-10
11634: PPUSH
11635: CALL_OW 88
// DialogueOff ;
11639: CALL_OW 7
// contactWithAmerican := true ;
11643: LD_ADDR_EXP 25
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11651: LD_STRING M1-american-out
11653: PPUSH
11654: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11658: LD_EXP 59
11662: PPUSH
11663: LD_INT 2
11665: PPUSH
11666: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11670: LD_ADDR_EXP 14
11674: PUSH
11675: LD_EXP 14
11679: PPUSH
11680: LD_EXP 59
11684: PPUSH
11685: CALL 68261 0 2
11689: ST_TO_ADDR
// end ;
11690: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11691: LD_EXP 25
11695: IFFALSE 11704
11697: PUSH
11698: LD_EXP 30
11702: NOT
11703: AND
11704: IFFALSE 11719
11706: PUSH
11707: LD_EXP 59
11711: PUSH
11712: LD_EXP 14
11716: IN
11717: NOT
11718: AND
11719: IFFALSE 11735
11721: PUSH
11722: LD_INT 2
11724: PPUSH
11725: LD_EXP 59
11729: PPUSH
11730: CALL_OW 292
11734: AND
11735: IFFALSE 11757
11737: PUSH
11738: LD_EXP 46
11742: PPUSH
11743: LD_EXP 59
11747: PPUSH
11748: CALL_OW 296
11752: PUSH
11753: LD_INT 6
11755: LESS
11756: AND
11757: IFFALSE 11766
11759: PUSH
11760: LD_EXP 17
11764: NOT
11765: AND
11766: IFFALSE 11891
11768: GO 11770
11770: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11771: LD_EXP 59
11775: PPUSH
11776: LD_EXP 46
11780: PPUSH
11781: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11785: LD_EXP 46
11789: PPUSH
11790: LD_EXP 59
11794: PPUSH
11795: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11799: LD_INT 10
11801: PPUSH
11802: CALL_OW 67
// DialogueOn ;
11806: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11810: LD_EXP 59
11814: PPUSH
11815: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11819: LD_EXP 59
11823: PPUSH
11824: LD_STRING DJ-Escort-1
11826: PPUSH
11827: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11831: LD_EXP 46
11835: PPUSH
11836: LD_STRING DH-Escort-2
11838: PPUSH
11839: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11843: LD_EXP 59
11847: PPUSH
11848: LD_STRING DJ-Escort-3
11850: PPUSH
11851: CALL_OW 88
// DialogueOff ;
11855: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11859: LD_EXP 59
11863: PPUSH
11864: LD_INT 2
11866: PPUSH
11867: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11871: LD_ADDR_EXP 14
11875: PUSH
11876: LD_EXP 14
11880: PPUSH
11881: LD_EXP 59
11885: PPUSH
11886: CALL 68261 0 2
11890: ST_TO_ADDR
// end ;
11891: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11892: LD_EXP 25
11896: IFFALSE 11905
11898: PUSH
11899: LD_EXP 30
11903: NOT
11904: AND
11905: IFFALSE 11966
11907: PUSH
11908: LD_EXP 58
11912: PUSH
11913: LD_EXP 14
11917: DIFF
11918: PPUSH
11919: LD_INT 22
11921: PUSH
11922: LD_INT 4
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: LD_INT 120
11934: PUSH
11935: LD_INT 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 101
11948: PUSH
11949: LD_INT 2
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: PPUSH
11961: CALL_OW 72
11965: AND
11966: IFFALSE 11975
11968: PUSH
11969: LD_EXP 17
11973: NOT
11974: AND
11975: IFFALSE 12202
11977: GO 11979
11979: DISABLE
11980: LD_INT 0
11982: PPUSH
// begin enable ;
11983: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11984: LD_ADDR_VAR 0 1
11988: PUSH
11989: LD_EXP 58
11993: PUSH
11994: LD_EXP 14
11998: DIFF
11999: PPUSH
12000: LD_INT 22
12002: PUSH
12003: LD_INT 4
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 91
12012: PUSH
12013: LD_EXP 46
12017: PUSH
12018: LD_INT 6
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 101
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: PPUSH
12041: CALL_OW 72
12045: PPUSH
12046: LD_EXP 46
12050: PPUSH
12051: CALL_OW 74
12055: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12056: LD_VAR 0 1
12060: PPUSH
12061: LD_EXP 46
12065: PPUSH
12066: CALL_OW 296
12070: PUSH
12071: LD_INT 6
12073: LESS
12074: IFFALSE 12202
// begin DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12080: LD_VAR 0 1
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12089: LD_EXP 46
12093: PPUSH
12094: LD_STRING DH-USsol-1
12096: PPUSH
12097: CALL_OW 88
// if un <> Jerry then
12101: LD_VAR 0 1
12105: PUSH
12106: LD_EXP 61
12110: NONEQUAL
12111: IFFALSE 12154
// if GetSex ( un ) = sex_male then
12113: LD_VAR 0 1
12117: PPUSH
12118: CALL_OW 258
12122: PUSH
12123: LD_INT 1
12125: EQUAL
12126: IFFALSE 12142
// Say ( un , DUSM-USsol-2 ) else
12128: LD_VAR 0 1
12132: PPUSH
12133: LD_STRING DUSM-USsol-2
12135: PPUSH
12136: CALL_OW 88
12140: GO 12154
// Say ( un , DUSF-USsol-2 ) ;
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_STRING DUSF-USsol-2
12149: PPUSH
12150: CALL_OW 88
// DialogueOff ;
12154: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12158: LD_ADDR_EXP 14
12162: PUSH
12163: LD_EXP 14
12167: PPUSH
12168: LD_VAR 0 1
12172: PPUSH
12173: CALL 68261 0 2
12177: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12178: LD_VAR 0 1
12182: PPUSH
12183: LD_INT 1
12185: PPUSH
12186: CALL_OW 109
// SetSide ( un , 2 ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: LD_INT 2
12197: PPUSH
12198: CALL_OW 235
// end ; end ;
12202: PPOPN 1
12204: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
12205: LD_EXP 57
12209: IFFALSE 12218
12211: PUSH
12212: LD_EXP 30
12216: NOT
12217: AND
12218: IFFALSE 12285
12220: PUSH
12221: LD_EXP 57
12225: PUSH
12226: LD_EXP 14
12230: DIFF
12231: PPUSH
12232: LD_INT 3
12234: PUSH
12235: LD_INT 120
12237: PUSH
12238: LD_INT 1
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: LD_INT 91
12251: PUSH
12252: LD_EXP 46
12256: PUSH
12257: LD_INT 6
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 101
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: PPUSH
12280: CALL_OW 72
12284: AND
12285: IFFALSE 12294
12287: PUSH
12288: LD_EXP 17
12292: NOT
12293: AND
12294: IFFALSE 12509
12296: GO 12298
12298: DISABLE
12299: LD_INT 0
12301: PPUSH
// begin enable ;
12302: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12303: LD_ADDR_VAR 0 1
12307: PUSH
12308: LD_EXP 57
12312: PUSH
12313: LD_EXP 14
12317: DIFF
12318: PPUSH
12319: LD_INT 22
12321: PUSH
12322: LD_INT 5
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 91
12331: PUSH
12332: LD_EXP 46
12336: PUSH
12337: LD_INT 6
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 101
12347: PUSH
12348: LD_INT 2
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: PPUSH
12365: LD_EXP 46
12369: PPUSH
12370: CALL_OW 74
12374: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12375: LD_VAR 0 1
12379: PPUSH
12380: LD_EXP 46
12384: PPUSH
12385: CALL_OW 296
12389: PUSH
12390: LD_INT 6
12392: LESS
12393: IFFALSE 12509
// begin DialogueOn ;
12395: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12408: LD_EXP 46
12412: PPUSH
12413: LD_STRING DH-USsol-1
12415: PPUSH
12416: CALL_OW 88
// if GetSex ( un ) = sex_male then
12420: LD_VAR 0 1
12424: PPUSH
12425: CALL_OW 258
12429: PUSH
12430: LD_INT 1
12432: EQUAL
12433: IFFALSE 12449
// Say ( un , DArm-USsol-2 ) else
12435: LD_VAR 0 1
12439: PPUSH
12440: LD_STRING DArm-USsol-2
12442: PPUSH
12443: CALL_OW 88
12447: GO 12461
// Say ( un , DArf-USsol-3 ) ;
12449: LD_VAR 0 1
12453: PPUSH
12454: LD_STRING DArf-USsol-3
12456: PPUSH
12457: CALL_OW 88
// DialogueOff ;
12461: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12465: LD_ADDR_EXP 14
12469: PUSH
12470: LD_EXP 14
12474: PPUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL 68261 0 2
12484: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12485: LD_VAR 0 1
12489: PPUSH
12490: LD_INT 1
12492: PPUSH
12493: CALL_OW 109
// SetSide ( un , 2 ) ;
12497: LD_VAR 0 1
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 235
// end ; end ;
12509: PPOPN 1
12511: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12512: LD_EXP 58
12516: PPUSH
12517: LD_INT 101
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PPUSH
12527: CALL_OW 72
12531: IFFALSE 12558
12533: PUSH
12534: LD_EXP 14
12538: PPUSH
12539: LD_INT 22
12541: PUSH
12542: LD_INT 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 72
12553: PUSH
12554: LD_INT 5
12556: GREATER
12557: AND
12558: IFFALSE 12567
12560: PUSH
12561: LD_EXP 10
12565: NOT
12566: AND
12567: IFFALSE 12576
12569: PUSH
12570: LD_EXP 30
12574: NOT
12575: AND
12576: IFFALSE 12585
12578: PUSH
12579: LD_EXP 25
12583: NOT
12584: AND
12585: IFFALSE 12594
12587: PUSH
12588: LD_EXP 17
12592: NOT
12593: AND
12594: IFFALSE 12709
12596: GO 12598
12598: DISABLE
12599: LD_INT 0
12601: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_EXP 58
12611: PPUSH
12612: LD_INT 22
12614: PUSH
12615: LD_INT 4
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 101
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 72
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: ST_TO_ADDR
// DialogueOn ;
12645: CALL_OW 6
// if GetSex ( un ) = sex_male then
12649: LD_VAR 0 1
12653: PPUSH
12654: CALL_OW 258
12658: PUSH
12659: LD_INT 1
12661: EQUAL
12662: IFFALSE 12678
// Say ( un , DUSm-USsol-a-2 ) else
12664: LD_VAR 0 1
12668: PPUSH
12669: LD_STRING DUSm-USsol-a-2
12671: PPUSH
12672: CALL_OW 88
12676: GO 12690
// Say ( un , DUSf-USsol-a-2 ) ;
12678: LD_VAR 0 1
12682: PPUSH
12683: LD_STRING DUSf-USsol-a-2
12685: PPUSH
12686: CALL_OW 88
// DialogueOff ;
12690: CALL_OW 7
// wait ( 0 0$2 ) ;
12694: LD_INT 70
12696: PPUSH
12697: CALL_OW 67
// isAlarm := true ;
12701: LD_ADDR_EXP 17
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// end ;
12709: PPOPN 1
12711: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12712: LD_EXP 17
12716: NOT
12717: IFFALSE 12730
12719: PUSH
12720: LD_EXP 47
12724: PPUSH
12725: CALL_OW 302
12729: AND
12730: IFFALSE 12747
12732: PUSH
12733: LD_EXP 47
12737: PPUSH
12738: CALL_OW 255
12742: PUSH
12743: LD_INT 2
12745: EQUAL
12746: AND
12747: IFFALSE 12755
12749: PUSH
12750: LD_EXP 26
12754: AND
12755: IFFALSE 12764
12757: PUSH
12758: LD_EXP 28
12762: NOT
12763: AND
12764: IFFALSE 12773
12766: PUSH
12767: LD_EXP 27
12771: NOT
12772: AND
12773: IFFALSE 12782
12775: PUSH
12776: LD_EXP 30
12780: NOT
12781: AND
12782: IFFALSE 12798
12784: PUSH
12785: LD_EXP 47
12789: PPUSH
12790: LD_INT 165
12792: PPUSH
12793: CALL 21044 0 2
12797: AND
12798: IFFALSE 12930
12800: GO 12802
12802: DISABLE
// begin enable ;
12803: ENABLE
// InGameOn ;
12804: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12808: LD_EXP 47
12812: PPUSH
12813: LD_INT 5
12815: PPUSH
12816: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12820: LD_INT 165
12822: PPUSH
12823: LD_INT 5
12825: PPUSH
12826: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12830: LD_EXP 47
12834: PPUSH
12835: LD_INT 165
12837: PPUSH
12838: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12842: LD_INT 35
12844: PPUSH
12845: CALL_OW 67
// until IsInUnit ( Givi ) ;
12849: LD_EXP 47
12853: PPUSH
12854: CALL_OW 310
12858: IFFALSE 12842
// case Query ( GiviInLaundry ) of 1 :
12860: LD_STRING GiviInLaundry
12862: PPUSH
12863: CALL_OW 97
12867: PUSH
12868: LD_INT 1
12870: DOUBLE
12871: EQUAL
12872: IFTRUE 12876
12874: GO 12883
12876: POP
// SpawnGiviAsRussian ; 2 :
12877: CALL 1948 0 0
12881: GO 12895
12883: LD_INT 2
12885: DOUBLE
12886: EQUAL
12887: IFTRUE 12891
12889: GO 12894
12891: POP
// ; end ;
12892: GO 12895
12894: POP
// ComExitBuilding ( Givi ) ;
12895: LD_EXP 47
12899: PPUSH
12900: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12904: LD_EXP 47
12908: PPUSH
12909: LD_INT 2
12911: PPUSH
12912: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12916: LD_INT 165
12918: PPUSH
12919: LD_INT 3
12921: PPUSH
12922: CALL_OW 235
// InGameOff ;
12926: CALL_OW 9
// end ;
12930: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12931: LD_EXP 17
12935: NOT
12936: IFFALSE 12944
12938: PUSH
12939: LD_EXP 28
12943: AND
12944: IFFALSE 12961
12946: PUSH
12947: LD_EXP 47
12951: PPUSH
12952: CALL_OW 255
12956: PUSH
12957: LD_INT 2
12959: EQUAL
12960: AND
12961: IFFALSE 12978
12963: PUSH
12964: LD_EXP 47
12968: PPUSH
12969: CALL_OW 248
12973: PUSH
12974: LD_INT 3
12976: EQUAL
12977: AND
12978: IFFALSE 12994
12980: PUSH
12981: LD_EXP 47
12985: PPUSH
12986: LD_INT 119
12988: PPUSH
12989: CALL 21044 0 2
12993: AND
12994: IFFALSE 13003
12996: PUSH
12997: LD_EXP 30
13001: NOT
13002: AND
13003: IFFALSE 13257
13005: GO 13007
13007: DISABLE
// begin InGameOn ;
13008: CALL_OW 8
// SetSide ( Givi , 3 ) ;
13012: LD_EXP 47
13016: PPUSH
13017: LD_INT 3
13019: PPUSH
13020: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13024: LD_INT 10
13026: PPUSH
13027: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13031: LD_EXP 47
13035: PPUSH
13036: LD_INT 119
13038: PPUSH
13039: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13043: LD_INT 35
13045: PPUSH
13046: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
13050: LD_EXP 47
13054: PPUSH
13055: LD_INT 119
13057: PPUSH
13058: CALL_OW 120
// until IsInUnit ( Givi ) ;
13062: LD_EXP 47
13066: PPUSH
13067: CALL_OW 310
13071: IFFALSE 13043
// DialogueOn ;
13073: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
13077: LD_EXP 47
13081: PPUSH
13082: LD_STRING DG-Captive-1
13084: PPUSH
13085: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
13089: LD_EXP 65
13093: PPUSH
13094: LD_STRING DCom-Captive-2
13096: PPUSH
13097: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
13101: LD_EXP 47
13105: PPUSH
13106: LD_STRING DG-Captive-3
13108: PPUSH
13109: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
13113: LD_EXP 65
13117: PPUSH
13118: LD_STRING DCom-Captive-4
13120: PPUSH
13121: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13125: LD_EXP 65
13129: PPUSH
13130: CALL_OW 64
// DialogueOff ;
13134: CALL_OW 7
// InGameOff ;
13138: CALL_OW 9
// SetSide ( Givi , 2 ) ;
13142: LD_EXP 47
13146: PPUSH
13147: LD_INT 2
13149: PPUSH
13150: CALL_OW 235
// ComExitBuilding ( Givi ) ;
13154: LD_EXP 47
13158: PPUSH
13159: CALL_OW 122
// if Aviradze then
13163: LD_EXP 56
13167: IFFALSE 13210
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13169: LD_ADDR_EXP 14
13173: PUSH
13174: LD_EXP 14
13178: PPUSH
13179: LD_EXP 56
13183: PPUSH
13184: CALL 68261 0 2
13188: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13189: LD_EXP 56
13193: PPUSH
13194: LD_INT 2
13196: PPUSH
13197: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13201: LD_EXP 56
13205: PPUSH
13206: CALL_OW 122
// end ; if Ibrahim then
13210: LD_EXP 49
13214: IFFALSE 13257
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13216: LD_ADDR_EXP 14
13220: PUSH
13221: LD_EXP 14
13225: PPUSH
13226: LD_EXP 49
13230: PPUSH
13231: CALL 68261 0 2
13235: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13236: LD_EXP 49
13240: PPUSH
13241: LD_INT 2
13243: PPUSH
13244: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13248: LD_EXP 49
13252: PPUSH
13253: CALL_OW 122
// end ; end ;
13257: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
13258: LD_EXP 17
13262: NOT
13263: IFFALSE 13271
13265: PUSH
13266: LD_EXP 27
13270: AND
13271: IFFALSE 13288
13273: PUSH
13274: LD_EXP 46
13278: PPUSH
13279: CALL_OW 248
13283: PUSH
13284: LD_INT 3
13286: EQUAL
13287: AND
13288: IFFALSE 13304
13290: PUSH
13291: LD_EXP 46
13295: PPUSH
13296: LD_INT 119
13298: PPUSH
13299: CALL 21044 0 2
13303: AND
13304: IFFALSE 13313
13306: PUSH
13307: LD_EXP 30
13311: NOT
13312: AND
13313: IFFALSE 13614
13315: GO 13317
13317: DISABLE
// begin InGameOn ;
13318: CALL_OW 8
// SetSide ( Heike , 3 ) ;
13322: LD_EXP 46
13326: PPUSH
13327: LD_INT 3
13329: PPUSH
13330: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13334: LD_INT 10
13336: PPUSH
13337: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13341: LD_EXP 46
13345: PPUSH
13346: LD_INT 119
13348: PPUSH
13349: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13353: LD_INT 35
13355: PPUSH
13356: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13360: LD_EXP 46
13364: PPUSH
13365: LD_INT 119
13367: PPUSH
13368: CALL_OW 120
// until IsInUnit ( Heike ) ;
13372: LD_EXP 46
13376: PPUSH
13377: CALL_OW 310
13381: IFFALSE 13353
// wait ( 0 0$1 ) ;
13383: LD_INT 35
13385: PPUSH
13386: CALL_OW 67
// DialogueOn ;
13390: CALL_OW 6
// if Aviradze and Ibrahim then
13394: LD_EXP 56
13398: IFFALSE 13406
13400: PUSH
13401: LD_EXP 49
13405: AND
13406: IFFALSE 13422
// Say ( Heike , DH-Captive-a-1 ) else
13408: LD_EXP 46
13412: PPUSH
13413: LD_STRING DH-Captive-a-1
13415: PPUSH
13416: CALL_OW 88
13420: GO 13434
// Say ( Heike , DH-Captive-a-b-1 ) ;
13422: LD_EXP 46
13426: PPUSH
13427: LD_STRING DH-Captive-a-b-1
13429: PPUSH
13430: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13434: LD_EXP 65
13438: PPUSH
13439: LD_STRING DCom-Captive-a-2
13441: PPUSH
13442: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13446: LD_EXP 46
13450: PPUSH
13451: LD_STRING DH-Captive-a-3
13453: PPUSH
13454: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13458: LD_EXP 65
13462: PPUSH
13463: LD_STRING DCom-Captive-a-4
13465: PPUSH
13466: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13470: LD_EXP 46
13474: PPUSH
13475: LD_STRING DH-Captive-a-5
13477: PPUSH
13478: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13482: LD_EXP 65
13486: PPUSH
13487: CALL_OW 64
// DialogueOff ;
13491: CALL_OW 7
// InGameOff ;
13495: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13499: LD_EXP 46
13503: PPUSH
13504: LD_INT 2
13506: PPUSH
13507: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13511: LD_EXP 46
13515: PPUSH
13516: CALL_OW 122
// if Aviradze then
13520: LD_EXP 56
13524: IFFALSE 13567
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13526: LD_ADDR_EXP 14
13530: PUSH
13531: LD_EXP 14
13535: PPUSH
13536: LD_EXP 56
13540: PPUSH
13541: CALL 68261 0 2
13545: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13546: LD_EXP 56
13550: PPUSH
13551: LD_INT 2
13553: PPUSH
13554: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13558: LD_EXP 56
13562: PPUSH
13563: CALL_OW 122
// end ; if Ibrahim then
13567: LD_EXP 49
13571: IFFALSE 13614
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13573: LD_ADDR_EXP 14
13577: PUSH
13578: LD_EXP 14
13582: PPUSH
13583: LD_EXP 49
13587: PPUSH
13588: CALL 68261 0 2
13592: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13593: LD_EXP 49
13597: PPUSH
13598: LD_INT 2
13600: PPUSH
13601: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13605: LD_EXP 49
13609: PPUSH
13610: CALL_OW 122
// end ; end ;
13614: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13615: LD_INT 2
13617: PUSH
13618: LD_INT 25
13620: PUSH
13621: LD_INT 32
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 25
13630: PUSH
13631: LD_INT 34
13633: PUSH
13634: EMPTY
13635: LIST
13636: LIST
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: IFFALSE 13659
13649: GO 13651
13651: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13652: LD_STRING M1-weapons-out
13654: PPUSH
13655: CALL_OW 604
13659: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13660: LD_INT 2
13662: PPUSH
13663: LD_EXP 61
13667: PPUSH
13668: CALL_OW 292
13672: IFFALSE 13690
13674: PUSH
13675: LD_EXP 46
13679: PPUSH
13680: LD_EXP 61
13684: PPUSH
13685: CALL_OW 296
13689: AND
13690: IFFALSE 13699
13692: PUSH
13693: LD_EXP 17
13697: NOT
13698: AND
13699: IFFALSE 13708
13701: PUSH
13702: LD_EXP 30
13706: NOT
13707: AND
13708: IFFALSE 14566
13710: GO 13712
13712: DISABLE
13713: LD_INT 0
13715: PPUSH
13716: PPUSH
// begin if contactWithAmerican then
13717: LD_EXP 25
13721: IFFALSE 13818
// begin DialogueOn ;
13723: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13727: LD_EXP 61
13731: PPUSH
13732: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13736: LD_EXP 46
13740: PPUSH
13741: LD_STRING DH-USsol-1
13743: PPUSH
13744: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13748: LD_EXP 61
13752: PPUSH
13753: LD_INT 2
13755: PPUSH
13756: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13760: LD_ADDR_EXP 58
13764: PUSH
13765: LD_EXP 58
13769: PPUSH
13770: LD_EXP 61
13774: PPUSH
13775: CALL 68261 0 2
13779: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13780: LD_ADDR_EXP 14
13784: PUSH
13785: LD_EXP 14
13789: PPUSH
13790: LD_EXP 48
13794: PPUSH
13795: CALL 68261 0 2
13799: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13800: LD_EXP 61
13804: PPUSH
13805: LD_INT 1
13807: PPUSH
13808: CALL_OW 109
// DialogueOff ;
13812: CALL_OW 7
// exit ;
13816: GO 14566
// end ; DialogueOn ;
13818: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13822: LD_EXP 61
13826: PPUSH
13827: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13831: LD_EXP 61
13835: PPUSH
13836: LD_STRING DJy-Food-1
13838: PPUSH
13839: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13843: LD_EXP 46
13847: PPUSH
13848: LD_STRING DH-Food-2
13850: PPUSH
13851: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13855: LD_EXP 61
13859: PPUSH
13860: LD_STRING DJy-Food-3
13862: PPUSH
13863: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13867: LD_EXP 61
13871: PPUSH
13872: LD_STRING DJy-Food-4
13874: PPUSH
13875: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13879: LD_EXP 46
13883: PPUSH
13884: LD_STRING DH-Food-5
13886: PPUSH
13887: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13891: LD_EXP 61
13895: PPUSH
13896: LD_STRING DJy-Food-6
13898: PPUSH
13899: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13903: LD_EXP 61
13907: PPUSH
13908: LD_STRING DJy-Food-7
13910: PPUSH
13911: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13915: LD_EXP 61
13919: PPUSH
13920: LD_STRING DJy-Food-8
13922: PPUSH
13923: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13927: LD_EXP 46
13931: PPUSH
13932: LD_STRING DH-Food-9
13934: PPUSH
13935: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13939: LD_EXP 61
13943: PPUSH
13944: LD_STRING DJy-Food-10
13946: PPUSH
13947: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13951: LD_EXP 46
13955: PPUSH
13956: LD_STRING DH-Food-11
13958: PPUSH
13959: CALL_OW 88
// DialogueOff ;
13963: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13967: LD_STRING M3
13969: PPUSH
13970: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13974: LD_INT 5
13976: PPUSH
13977: LD_INT 215
13979: PPUSH
13980: LD_INT 117
13982: PPUSH
13983: LD_INT 0
13985: PPUSH
13986: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13990: LD_INT 215
13992: PPUSH
13993: LD_INT 118
13995: PPUSH
13996: LD_INT 2
13998: PPUSH
13999: LD_INT 6
14001: NEG
14002: PPUSH
14003: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
14007: LD_INT 215
14009: PPUSH
14010: LD_INT 118
14012: PPUSH
14013: LD_INT 2
14015: PPUSH
14016: CALL_OW 331
// foodDelivered := false ;
14020: LD_ADDR_VAR 0 2
14024: PUSH
14025: LD_INT 0
14027: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14028: LD_INT 35
14030: PPUSH
14031: CALL_OW 67
// if hasMuchin then
14035: LD_EXP 30
14039: IFFALSE 14043
// continue ;
14041: GO 14028
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
14043: LD_ADDR_VAR 0 1
14047: PUSH
14048: LD_EXP 14
14052: PUSH
14053: LD_EXP 46
14057: UNION
14058: PPUSH
14059: LD_INT 91
14061: PUSH
14062: LD_EXP 61
14066: PUSH
14067: LD_INT 6
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: PUSH
14075: LD_INT 25
14077: PUSH
14078: LD_INT 33
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 72
14093: PUSH
14094: FOR_IN
14095: IFFALSE 14295
// if Carry ( i ) then
14097: LD_VAR 0 1
14101: PPUSH
14102: CALL_OW 281
14106: IFFALSE 14293
// begin DialogueOn ;
14108: CALL_OW 6
// foodDelivered := true ;
14112: LD_ADDR_VAR 0 2
14116: PUSH
14117: LD_INT 1
14119: ST_TO_ADDR
// case i of Heike :
14120: LD_VAR 0 1
14124: PUSH
14125: LD_EXP 46
14129: DOUBLE
14130: EQUAL
14131: IFTRUE 14135
14133: GO 14150
14135: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
14136: LD_EXP 46
14140: PPUSH
14141: LD_STRING DH-Food-12
14143: PPUSH
14144: CALL_OW 88
14148: GO 14276
14150: LD_EXP 51
14154: DOUBLE
14155: EQUAL
14156: IFTRUE 14160
14158: GO 14175
14160: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
14161: LD_EXP 51
14165: PPUSH
14166: LD_STRING DK-Food-a-12
14168: PPUSH
14169: CALL_OW 88
14173: GO 14276
14175: LD_EXP 53
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14200
14185: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
14186: LD_EXP 53
14190: PPUSH
14191: LD_STRING DMar-Food-a-12
14193: PPUSH
14194: CALL_OW 88
14198: GO 14276
14200: LD_EXP 47
14204: DOUBLE
14205: EQUAL
14206: IFTRUE 14210
14208: GO 14225
14210: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
14211: LD_EXP 47
14215: PPUSH
14216: LD_STRING DG-Food-a-14
14218: PPUSH
14219: CALL_OW 88
14223: GO 14276
14225: LD_EXP 48
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14250
14235: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
14236: LD_EXP 48
14240: PPUSH
14241: LD_STRING DM-Food-a-15
14243: PPUSH
14244: CALL_OW 88
14248: GO 14276
14250: LD_EXP 50
14254: DOUBLE
14255: EQUAL
14256: IFTRUE 14260
14258: GO 14275
14260: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
14261: LD_EXP 50
14265: PPUSH
14266: LD_STRING DKam-Food-a-16
14268: PPUSH
14269: CALL_OW 88
14273: GO 14276
14275: POP
// SetCargo ( i , mat_cans , 0 ) ;
14276: LD_VAR 0 1
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: LD_INT 0
14286: PPUSH
14287: CALL_OW 290
// break ;
14291: GO 14295
// end ;
14293: GO 14094
14295: POP
14296: POP
// until foodDelivered ;
14297: LD_VAR 0 2
14301: IFFALSE 14028
// givenFood := true ;
14303: LD_ADDR_EXP 33
14307: PUSH
14308: LD_INT 1
14310: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
14311: LD_EXP 61
14315: PPUSH
14316: LD_STRING DJy-Food-13
14318: PPUSH
14319: CALL_OW 88
// hasVirus := true ;
14323: LD_ADDR_EXP 31
14327: PUSH
14328: LD_INT 1
14330: ST_TO_ADDR
// if not americanContact then
14331: LD_EXP 10
14335: NOT
14336: IFFALSE 14386
// begin Say ( Heike , DH-Food-14 ) ;
14338: LD_EXP 46
14342: PPUSH
14343: LD_STRING DH-Food-14
14345: PPUSH
14346: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14350: LD_EXP 61
14354: PPUSH
14355: LD_STRING DJy-Food-15
14357: PPUSH
14358: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14362: LD_EXP 61
14366: PPUSH
14367: LD_STRING DJy-Food-16
14369: PPUSH
14370: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14374: LD_EXP 61
14378: PPUSH
14379: LD_STRING DJy-Food-17
14381: PPUSH
14382: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14386: LD_STRING M3-out
14388: PPUSH
14389: CALL_OW 337
// DialogueOff ;
14393: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14397: LD_EXP 61
14401: PPUSH
14402: LD_INT 1
14404: PPUSH
14405: LD_INT 10
14407: PPUSH
14408: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14412: LD_EXP 61
14416: PPUSH
14417: LD_INT 95
14419: PPUSH
14420: LD_INT 17
14422: PPUSH
14423: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14427: LD_INT 35
14429: PPUSH
14430: CALL_OW 67
// if not HasTask ( Jerry ) then
14434: LD_EXP 61
14438: PPUSH
14439: CALL_OW 314
14443: NOT
14444: IFFALSE 14461
// ComMoveXY ( Jerry , 95 , 17 ) ;
14446: LD_EXP 61
14450: PPUSH
14451: LD_INT 95
14453: PPUSH
14454: LD_INT 17
14456: PPUSH
14457: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14461: LD_EXP 61
14465: PPUSH
14466: LD_INT 95
14468: PPUSH
14469: LD_INT 17
14471: PPUSH
14472: CALL_OW 307
14476: IFFALSE 14427
// SetCargo ( Jerry , mat_cans , 0 ) ;
14478: LD_EXP 61
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: LD_INT 0
14488: PPUSH
14489: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14493: LD_ADDR_EXP 58
14497: PUSH
14498: LD_EXP 58
14502: PPUSH
14503: LD_EXP 61
14507: PPUSH
14508: CALL 68261 0 2
14512: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14513: LD_ADDR_VAR 0 1
14517: PUSH
14518: LD_INT 22
14520: PUSH
14521: LD_INT 4
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 23
14530: PUSH
14531: LD_INT 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 69
14546: PUSH
14547: FOR_IN
14548: IFFALSE 14564
// SetLives ( i , 1000 ) ;
14550: LD_VAR 0 1
14554: PPUSH
14555: LD_INT 1000
14557: PPUSH
14558: CALL_OW 234
14562: GO 14547
14564: POP
14565: POP
// end ;
14566: PPOPN 2
14568: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14569: LD_EXP 30
14573: NOT
14574: IFFALSE 14582
14576: PUSH
14577: LD_EXP 6
14581: AND
14582: IFFALSE 15010
14584: GO 14586
14586: DISABLE
14587: LD_INT 0
14589: PPUSH
14590: PPUSH
// begin tmp := [ ] ;
14591: LD_ADDR_VAR 0 2
14595: PUSH
14596: EMPTY
14597: ST_TO_ADDR
// uc_side := 3 ;
14598: LD_ADDR_OWVAR 20
14602: PUSH
14603: LD_INT 3
14605: ST_TO_ADDR
// uc_nation := 3 ;
14606: LD_ADDR_OWVAR 21
14610: PUSH
14611: LD_INT 3
14613: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14614: LD_INT 1
14616: PPUSH
14617: LD_INT 8
14619: PPUSH
14620: CALL_OW 381
// un := CreateHuman ;
14624: LD_ADDR_VAR 0 1
14628: PUSH
14629: CALL_OW 44
14633: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14634: LD_VAR 0 1
14638: PPUSH
14639: LD_INT 173
14641: PPUSH
14642: LD_INT 104
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14652: LD_ADDR_VAR 0 2
14656: PUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PPUSH
14667: CALL 68261 0 2
14671: ST_TO_ADDR
// un := CreateHuman ;
14672: LD_ADDR_VAR 0 1
14676: PUSH
14677: CALL_OW 44
14681: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14682: LD_VAR 0 1
14686: PPUSH
14687: LD_INT 73
14689: PPUSH
14690: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14694: LD_ADDR_VAR 0 2
14698: PUSH
14699: LD_VAR 0 2
14703: PPUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL 68261 0 2
14713: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14714: LD_INT 35
14716: PPUSH
14717: CALL_OW 67
// if isAlarm then
14721: LD_EXP 17
14725: IFFALSE 14729
// exit ;
14727: GO 15010
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14729: LD_EXP 51
14733: PPUSH
14734: CALL_OW 255
14738: PUSH
14739: LD_INT 2
14741: EQUAL
14742: IFFALSE 14762
14744: PUSH
14745: LD_EXP 51
14749: PPUSH
14750: LD_INT 73
14752: PPUSH
14753: CALL_OW 296
14757: PUSH
14758: LD_INT 12
14760: LESS
14761: AND
14762: IFFALSE 14714
// InGameOn ;
14764: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14768: LD_INT 73
14770: PPUSH
14771: CALL_OW 250
14775: PPUSH
14776: LD_INT 73
14778: PPUSH
14779: CALL_OW 251
14783: PPUSH
14784: LD_INT 2
14786: PPUSH
14787: LD_INT 9
14789: NEG
14790: PPUSH
14791: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14795: LD_INT 73
14797: PPUSH
14798: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14802: LD_EXP 51
14806: PPUSH
14807: LD_INT 73
14809: PPUSH
14810: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14814: LD_EXP 51
14818: PPUSH
14819: LD_STRING DK-Plastic-1
14821: PPUSH
14822: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14826: LD_EXP 51
14830: PPUSH
14831: LD_STRING DK-Plastic-2
14833: PPUSH
14834: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14838: LD_EXP 51
14842: PPUSH
14843: LD_INT 73
14845: PPUSH
14846: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14850: LD_INT 35
14852: PPUSH
14853: CALL_OW 67
// if isAlarm then
14857: LD_EXP 17
14861: IFFALSE 14865
// exit ;
14863: GO 15010
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14865: LD_EXP 51
14869: PPUSH
14870: LD_INT 73
14872: PPUSH
14873: CALL_OW 296
14877: PUSH
14878: LD_INT 8
14880: LESS
14881: IFFALSE 14850
// ComHold ( Kaia ) ;
14883: LD_EXP 51
14887: PPUSH
14888: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14892: LD_VAR 0 2
14896: PUSH
14897: LD_INT 1
14899: ARRAY
14900: PPUSH
14901: LD_STRING DRum-Plastic-3
14903: PPUSH
14904: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14908: LD_VAR 0 2
14912: PUSH
14913: LD_INT 2
14915: ARRAY
14916: PPUSH
14917: LD_STRING DRum2-Plastic-4
14919: PPUSH
14920: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14924: LD_VAR 0 2
14928: PUSH
14929: LD_INT 1
14931: ARRAY
14932: PPUSH
14933: LD_STRING DRum-Plastic-5
14935: PPUSH
14936: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14940: LD_VAR 0 2
14944: PUSH
14945: LD_INT 2
14947: ARRAY
14948: PPUSH
14949: LD_STRING DRum2-Plastic-6
14951: PPUSH
14952: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14956: LD_EXP 51
14960: PPUSH
14961: LD_STRING DK-Plastic-7
14963: PPUSH
14964: CALL_OW 88
// InGameOff ;
14968: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14972: LD_INT 73
14974: PPUSH
14975: CALL_OW 250
14979: PPUSH
14980: LD_INT 73
14982: PPUSH
14983: CALL_OW 251
14987: PPUSH
14988: LD_INT 2
14990: PPUSH
14991: CALL_OW 331
// explosionsTakenByRussians := true ;
14995: LD_ADDR_EXP 21
14999: PUSH
15000: LD_INT 1
15002: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
15003: LD_STRING ExplosivesInfo
15005: PPUSH
15006: CALL_OW 97
// end ;
15010: PPOPN 2
15012: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
15013: LD_EXP 21
15017: IFFALSE 15034
15019: PUSH
15020: LD_EXP 51
15024: PPUSH
15025: CALL_OW 255
15029: PUSH
15030: LD_INT 2
15032: EQUAL
15033: AND
15034: IFFALSE 15050
15036: PUSH
15037: LD_EXP 51
15041: PPUSH
15042: LD_INT 61
15044: PPUSH
15045: CALL 21044 0 2
15049: AND
15050: IFFALSE 15059
15052: PUSH
15053: LD_EXP 17
15057: NOT
15058: AND
15059: IFFALSE 15068
15061: PUSH
15062: LD_EXP 30
15066: NOT
15067: AND
15068: IFFALSE 15379
15070: GO 15072
15072: DISABLE
15073: LD_INT 0
15075: PPUSH
// begin class := GetClass ( Kaia ) ;
15076: LD_ADDR_VAR 0 1
15080: PUSH
15081: LD_EXP 51
15085: PPUSH
15086: CALL_OW 257
15090: ST_TO_ADDR
// if class <> class_prison then
15091: LD_VAR 0 1
15095: PUSH
15096: LD_INT 33
15098: NONEQUAL
15099: IFFALSE 15220
// begin Query ( QKaiaWeapon ) ;
15101: LD_STRING QKaiaWeapon
15103: PPUSH
15104: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15108: LD_INT 67
15110: PPUSH
15111: LD_INT 1
15113: PPUSH
15114: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15118: LD_INT 192
15120: PPUSH
15121: LD_INT 71
15123: PPUSH
15124: CALL_OW 86
// kaiaWeaponHidden := class ;
15128: LD_ADDR_EXP 45
15132: PUSH
15133: LD_VAR 0 1
15137: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15138: LD_INT 35
15140: PPUSH
15141: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15145: LD_EXP 51
15149: PPUSH
15150: LD_INT 67
15152: PPUSH
15153: CALL_OW 308
15157: IFFALSE 15138
// repeat wait ( 1 ) ;
15159: LD_INT 1
15161: PPUSH
15162: CALL_OW 67
// ComWalk ( Kaia ) ;
15166: LD_EXP 51
15170: PPUSH
15171: CALL_OW 138
// until not Crawls ( Kaia ) ;
15175: LD_EXP 51
15179: PPUSH
15180: CALL_OW 318
15184: NOT
15185: IFFALSE 15159
// SetClass ( Kaia , class_prison ) ;
15187: LD_EXP 51
15191: PPUSH
15192: LD_INT 33
15194: PPUSH
15195: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15199: LD_INT 35
15201: PPUSH
15202: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
15206: LD_EXP 51
15210: PPUSH
15211: LD_INT 61
15213: PPUSH
15214: CALL 21044 0 2
15218: IFFALSE 15199
// end ; if knowWhereExplosivesAre then
15220: LD_EXP 34
15224: IFFALSE 15228
// exit ;
15226: GO 15379
// InGameOn ;
15228: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
15232: LD_INT 61
15234: PPUSH
15235: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15239: LD_EXP 51
15243: PPUSH
15244: LD_INT 3
15246: PPUSH
15247: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
15251: LD_EXP 51
15255: PPUSH
15256: LD_INT 61
15258: PPUSH
15259: CALL_OW 120
// wait ( 0 0$2 ) ;
15263: LD_INT 70
15265: PPUSH
15266: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15270: LD_EXP 51
15274: PPUSH
15275: LD_STRING DK-Plastic-8
15277: PPUSH
15278: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
15282: LD_EXP 67
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PPUSH
15291: LD_STRING DRuMch-Plastic-9
15293: PPUSH
15294: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15298: LD_EXP 51
15302: PPUSH
15303: LD_STRING DK-Plastic-10
15305: PPUSH
15306: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
15310: LD_EXP 67
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: LD_STRING DRuMch-Plastic-a-11
15321: PPUSH
15322: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
15326: LD_EXP 51
15330: PPUSH
15331: LD_STRING DK-Plastic-a-12
15333: PPUSH
15334: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
15338: LD_EXP 67
15342: PUSH
15343: LD_INT 1
15345: ARRAY
15346: PPUSH
15347: LD_STRING DRuMch-Plastic-a-13
15349: PPUSH
15350: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
15354: LD_EXP 51
15358: PPUSH
15359: LD_INT 2
15361: PPUSH
15362: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15366: LD_EXP 51
15370: PPUSH
15371: CALL_OW 122
// InGameOff ;
15375: CALL_OW 9
// end ;
15379: PPOPN 1
15381: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15382: LD_EXP 21
15386: IFFALSE 15403
15388: PUSH
15389: LD_EXP 51
15393: PPUSH
15394: CALL_OW 255
15398: PUSH
15399: LD_INT 2
15401: EQUAL
15402: AND
15403: IFFALSE 15419
15405: PUSH
15406: LD_EXP 51
15410: PPUSH
15411: LD_INT 196
15413: PPUSH
15414: CALL 21044 0 2
15418: AND
15419: IFFALSE 15428
15421: PUSH
15422: LD_EXP 17
15426: NOT
15427: AND
15428: IFFALSE 15437
15430: PUSH
15431: LD_EXP 30
15435: NOT
15436: AND
15437: IFFALSE 15923
15439: GO 15441
15441: DISABLE
15442: LD_INT 0
15444: PPUSH
// begin class := GetClass ( Kaia ) ;
15445: LD_ADDR_VAR 0 1
15449: PUSH
15450: LD_EXP 51
15454: PPUSH
15455: CALL_OW 257
15459: ST_TO_ADDR
// if class <> class_prison then
15460: LD_VAR 0 1
15464: PUSH
15465: LD_INT 33
15467: NONEQUAL
15468: IFFALSE 15589
// begin Query ( QKaiaWeapon ) ;
15470: LD_STRING QKaiaWeapon
15472: PPUSH
15473: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15477: LD_INT 67
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15487: LD_INT 192
15489: PPUSH
15490: LD_INT 71
15492: PPUSH
15493: CALL_OW 86
// kaiaWeaponHidden := class ;
15497: LD_ADDR_EXP 45
15501: PUSH
15502: LD_VAR 0 1
15506: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15507: LD_INT 35
15509: PPUSH
15510: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15514: LD_EXP 51
15518: PPUSH
15519: LD_INT 67
15521: PPUSH
15522: CALL_OW 308
15526: IFFALSE 15507
// repeat wait ( 1 ) ;
15528: LD_INT 1
15530: PPUSH
15531: CALL_OW 67
// ComWalk ( Kaia ) ;
15535: LD_EXP 51
15539: PPUSH
15540: CALL_OW 138
// until not Crawls ( Kaia ) ;
15544: LD_EXP 51
15548: PPUSH
15549: CALL_OW 318
15553: NOT
15554: IFFALSE 15528
// SetClass ( Kaia , class_prison ) ;
15556: LD_EXP 51
15560: PPUSH
15561: LD_INT 33
15563: PPUSH
15564: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15568: LD_INT 35
15570: PPUSH
15571: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15575: LD_EXP 51
15579: PPUSH
15580: LD_INT 196
15582: PPUSH
15583: CALL 21044 0 2
15587: IFFALSE 15568
// end ; InGameOn ;
15589: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15593: LD_INT 196
15595: PPUSH
15596: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15600: LD_EXP 51
15604: PPUSH
15605: LD_INT 3
15607: PPUSH
15608: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15612: LD_EXP 51
15616: PPUSH
15617: LD_INT 196
15619: PPUSH
15620: CALL_OW 120
// wait ( 0 0$2 ) ;
15624: LD_INT 70
15626: PPUSH
15627: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15631: LD_EXP 51
15635: PPUSH
15636: LD_STRING DK-Plastic-8
15638: PPUSH
15639: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15643: LD_EXP 68
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PPUSH
15652: LD_STRING DRuMch-Plastic-9
15654: PPUSH
15655: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15659: LD_EXP 51
15663: PPUSH
15664: LD_STRING DK-Plastic-10
15666: PPUSH
15667: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15671: LD_EXP 68
15675: PUSH
15676: LD_INT 1
15678: ARRAY
15679: PPUSH
15680: LD_STRING DRuMch-Plastic-11
15682: PPUSH
15683: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15687: LD_EXP 51
15691: PPUSH
15692: LD_STRING DK-Plastic-12
15694: PPUSH
15695: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15699: LD_EXP 51
15703: PPUSH
15704: LD_STRING DK-Plastic-13
15706: PPUSH
15707: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15711: LD_EXP 68
15715: PUSH
15716: LD_INT 1
15718: ARRAY
15719: PPUSH
15720: LD_STRING DRuMch-Plastic-14
15722: PPUSH
15723: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15727: LD_EXP 69
15731: PPUSH
15732: LD_INT 167
15734: PPUSH
15735: LD_INT 34
15737: PPUSH
15738: LD_INT 3
15740: PPUSH
15741: LD_INT 0
15743: PPUSH
15744: CALL 70421 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15748: LD_EXP 69
15752: PPUSH
15753: LD_INT 196
15755: PPUSH
15756: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15760: LD_INT 35
15762: PPUSH
15763: CALL_OW 67
// if not HasTask ( Stiopa ) then
15767: LD_EXP 69
15771: PPUSH
15772: CALL_OW 314
15776: NOT
15777: IFFALSE 15791
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15779: LD_EXP 69
15783: PPUSH
15784: LD_INT 196
15786: PPUSH
15787: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15791: LD_EXP 69
15795: PPUSH
15796: CALL_OW 310
15800: IFFALSE 15760
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15802: LD_EXP 69
15806: PPUSH
15807: LD_STRING DSpn-Plastic-15
15809: PPUSH
15810: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15814: LD_EXP 70
15818: PPUSH
15819: LD_STRING DLr-Plastic-16
15821: PPUSH
15822: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15826: LD_EXP 51
15830: PPUSH
15831: LD_STRING DK-Plastic-17
15833: PPUSH
15834: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15838: LD_INT 10
15840: PPUSH
15841: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15845: LD_INT 196
15847: PPUSH
15848: CALL 20770 0 1
// SetSide ( Kaia , 2 ) ;
15852: LD_EXP 51
15856: PPUSH
15857: LD_INT 2
15859: PPUSH
15860: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15864: LD_EXP 51
15868: PPUSH
15869: CALL_OW 122
// InGameOff ;
15873: CALL_OW 9
// explosionsTakenByRussians := false ;
15877: LD_ADDR_EXP 21
15881: PUSH
15882: LD_INT 0
15884: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15885: LD_INT 170
15887: PPUSH
15888: LD_INT 28
15890: PPUSH
15891: LD_INT 2
15893: PPUSH
15894: LD_INT 6
15896: NEG
15897: PPUSH
15898: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15902: LD_INT 170
15904: PPUSH
15905: LD_INT 28
15907: PPUSH
15908: LD_INT 2
15910: PPUSH
15911: CALL_OW 331
// knowWhereExplosivesAre := true ;
15915: LD_ADDR_EXP 34
15919: PUSH
15920: LD_INT 1
15922: ST_TO_ADDR
// end ;
15923: PPOPN 1
15925: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15926: LD_EXP 34
15930: IFFALSE 15947
15932: PUSH
15933: LD_EXP 51
15937: PPUSH
15938: CALL_OW 255
15942: PUSH
15943: LD_INT 2
15945: EQUAL
15946: AND
15947: IFFALSE 15963
15949: PUSH
15950: LD_EXP 51
15954: PPUSH
15955: LD_INT 195
15957: PPUSH
15958: CALL 21044 0 2
15962: AND
15963: IFFALSE 15972
15965: PUSH
15966: LD_EXP 17
15970: NOT
15971: AND
15972: IFFALSE 15981
15974: PUSH
15975: LD_EXP 30
15979: NOT
15980: AND
15981: IFFALSE 16087
15983: GO 15985
15985: DISABLE
// begin InGameOn ;
15986: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15990: LD_EXP 51
15994: PPUSH
15995: LD_INT 3
15997: PPUSH
15998: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
16002: LD_EXP 51
16006: PPUSH
16007: LD_INT 195
16009: PPUSH
16010: CALL_OW 120
// wait ( 0 0$1 ) ;
16014: LD_INT 35
16016: PPUSH
16017: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
16021: LD_EXP 51
16025: PPUSH
16026: LD_STRING DK-Plastic-18
16028: PPUSH
16029: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
16033: LD_STRING ExplosivesInfoUsage
16035: PPUSH
16036: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
16040: LD_INT 195
16042: PPUSH
16043: CALL 20770 0 1
// SetSide ( Kaia , 2 ) ;
16047: LD_EXP 51
16051: PPUSH
16052: LD_INT 2
16054: PPUSH
16055: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
16059: LD_EXP 51
16063: PPUSH
16064: CALL_OW 122
// InGameOff ;
16068: CALL_OW 9
// hasExplosionCollected := true ;
16072: LD_ADDR_EXP 23
16076: PUSH
16077: LD_INT 1
16079: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
16080: LD_STRING M1-explosive-out
16082: PPUSH
16083: CALL_OW 337
// end ;
16087: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
16088: LD_EXP 45
16092: IFFALSE 16157
16094: GO 16096
16096: DISABLE
// begin enable ;
16097: ENABLE
// if not kaiaWeaponHidden then
16098: LD_EXP 45
16102: NOT
16103: IFFALSE 16107
// exit ;
16105: GO 16157
// repeat wait ( 1 ) ;
16107: LD_INT 1
16109: PPUSH
16110: CALL_OW 67
// ComWalk ( Kaia ) ;
16114: LD_EXP 51
16118: PPUSH
16119: CALL_OW 138
// until not Crawls ( Kaia ) ;
16123: LD_EXP 51
16127: PPUSH
16128: CALL_OW 318
16132: NOT
16133: IFFALSE 16107
// SetClass ( Kaia , kaiaWeaponHidden ) ;
16135: LD_EXP 51
16139: PPUSH
16140: LD_EXP 45
16144: PPUSH
16145: CALL_OW 336
// kaiaWeaponHidden := 0 ;
16149: LD_ADDR_EXP 45
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// end ;
16157: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
16158: LD_EXP 23
16162: IFFALSE 16171
16164: PUSH
16165: LD_EXP 17
16169: NOT
16170: AND
16171: IFFALSE 16180
16173: PUSH
16174: LD_EXP 30
16178: NOT
16179: AND
16180: IFFALSE 16355
16182: GO 16184
16184: DISABLE
16185: LD_INT 0
16187: PPUSH
16188: PPUSH
// begin for i in importantBuildingsList do
16189: LD_ADDR_VAR 0 1
16193: PUSH
16194: LD_EXP 35
16198: PUSH
16199: FOR_IN
16200: IFFALSE 16216
// MarkBuilding ( i , true ) ;
16202: LD_VAR 0 1
16206: PPUSH
16207: LD_INT 1
16209: PPUSH
16210: CALL 21422 0 2
16214: GO 16199
16216: POP
16217: POP
// repeat wait ( 0 0$1 ) ;
16218: LD_INT 35
16220: PPUSH
16221: CALL_OW 67
// for i in importantBuildingsList do
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_EXP 35
16234: PUSH
16235: FOR_IN
16236: IFFALSE 16346
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
16238: LD_EXP 46
16242: PUSH
16243: LD_EXP 14
16247: UNION
16248: PPUSH
16249: LD_INT 22
16251: PUSH
16252: LD_INT 2
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 21
16261: PUSH
16262: LD_INT 1
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 91
16271: PUSH
16272: LD_VAR 0 1
16276: PUSH
16277: LD_INT 6
16279: PUSH
16280: EMPTY
16281: LIST
16282: LIST
16283: LIST
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: PPUSH
16290: CALL_OW 72
16294: IFFALSE 16344
// begin CenterNowOnUnits ( i ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 87
// PlaceExplosives ( i ) ;
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL 21319 0 1
// MarkBuilding ( i , false ) ;
16314: LD_VAR 0 1
16318: PPUSH
16319: LD_INT 0
16321: PPUSH
16322: CALL 21422 0 2
// importantBuildingsList := importantBuildingsList diff i ;
16326: LD_ADDR_EXP 35
16330: PUSH
16331: LD_EXP 35
16335: PUSH
16336: LD_VAR 0 1
16340: DIFF
16341: ST_TO_ADDR
// continue ;
16342: GO 16235
// end ; end ;
16344: GO 16235
16346: POP
16347: POP
// until not importantBuildingsList ;
16348: LD_EXP 35
16352: NOT
16353: IFFALSE 16218
// end ;
16355: PPOPN 2
16357: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
16358: LD_EXP 14
16362: PPUSH
16363: LD_INT 22
16365: PUSH
16366: LD_INT 2
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: PUSH
16373: LD_INT 95
16375: PUSH
16376: LD_INT 23
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PPUSH
16387: CALL_OW 72
16391: IFFALSE 16404
16393: PUSH
16394: LD_EXP 46
16398: PPUSH
16399: CALL_OW 302
16403: AND
16404: IFFALSE 16413
16406: PUSH
16407: LD_EXP 30
16411: NOT
16412: AND
16413: IFFALSE 16441
16415: GO 16417
16417: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
16418: LD_EXP 46
16422: PPUSH
16423: LD_STRING DH-End-1
16425: PPUSH
16426: CALL_OW 88
// if not activeExplosives then
16430: LD_EXP 36
16434: NOT
16435: IFFALSE 16441
// Explode ;
16437: CALL 24206 0 0
// end ;
16441: END
// function SayHEmpty ( ) ; begin
16442: LD_INT 0
16444: PPUSH
// case rand ( 1 , 3 ) of 1 :
16445: LD_INT 1
16447: PPUSH
16448: LD_INT 3
16450: PPUSH
16451: CALL_OW 12
16455: PUSH
16456: LD_INT 1
16458: DOUBLE
16459: EQUAL
16460: IFTRUE 16464
16462: GO 16479
16464: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16465: LD_EXP 46
16469: PPUSH
16470: LD_STRING DH-Empty-1
16472: PPUSH
16473: CALL_OW 88
16477: GO 16526
16479: LD_INT 2
16481: DOUBLE
16482: EQUAL
16483: IFTRUE 16487
16485: GO 16502
16487: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16488: LD_EXP 46
16492: PPUSH
16493: LD_STRING DH-Empty-2
16495: PPUSH
16496: CALL_OW 88
16500: GO 16526
16502: LD_INT 3
16504: DOUBLE
16505: EQUAL
16506: IFTRUE 16510
16508: GO 16525
16510: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16511: LD_EXP 46
16515: PPUSH
16516: LD_STRING DH-Empty-3
16518: PPUSH
16519: CALL_OW 88
16523: GO 16526
16525: POP
// end ;
16526: LD_VAR 0 1
16530: RET
// function SayHVisited ( ) ; begin
16531: LD_INT 0
16533: PPUSH
// case rand ( 1 , 3 ) of 1 :
16534: LD_INT 1
16536: PPUSH
16537: LD_INT 3
16539: PPUSH
16540: CALL_OW 12
16544: PUSH
16545: LD_INT 1
16547: DOUBLE
16548: EQUAL
16549: IFTRUE 16553
16551: GO 16568
16553: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16554: LD_EXP 46
16558: PPUSH
16559: LD_STRING DH-Visited-1
16561: PPUSH
16562: CALL_OW 88
16566: GO 16615
16568: LD_INT 2
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16591
16576: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16577: LD_EXP 46
16581: PPUSH
16582: LD_STRING DH-Visited-2
16584: PPUSH
16585: CALL_OW 88
16589: GO 16615
16591: LD_INT 3
16593: DOUBLE
16594: EQUAL
16595: IFTRUE 16599
16597: GO 16614
16599: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16600: LD_EXP 46
16604: PPUSH
16605: LD_STRING DH-Visited-3
16607: PPUSH
16608: CALL_OW 88
16612: GO 16615
16614: POP
// end ;
16615: LD_VAR 0 1
16619: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16620: LD_EXP 17
16624: NOT
16625: IFFALSE 16633
16627: PUSH
16628: LD_EXP 15
16632: AND
16633: IFFALSE 16650
16635: PUSH
16636: LD_EXP 46
16640: PPUSH
16641: CALL_OW 255
16645: PUSH
16646: LD_INT 2
16648: EQUAL
16649: AND
16650: IFFALSE 16663
16652: PUSH
16653: LD_EXP 46
16657: PPUSH
16658: CALL_OW 302
16662: AND
16663: IFFALSE 16676
16665: PUSH
16666: LD_EXP 46
16670: PPUSH
16671: CALL_OW 316
16675: AND
16676: IFFALSE 16685
16678: PUSH
16679: LD_EXP 30
16683: NOT
16684: AND
16685: IFFALSE 16751
16687: GO 16689
16689: DISABLE
16690: LD_INT 0
16692: PPUSH
// begin enable ;
16693: ENABLE
// for i in entranceAllowedList do
16694: LD_ADDR_VAR 0 1
16698: PUSH
16699: LD_EXP 15
16703: PUSH
16704: FOR_IN
16705: IFFALSE 16749
// if InEntrance ( Heike , i ) then
16707: LD_EXP 46
16711: PPUSH
16712: LD_VAR 0 1
16716: PPUSH
16717: CALL 21044 0 2
16721: IFFALSE 16747
// begin disable ( entranceEvent ) ;
16723: LD_INT 1
16725: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL 16754 0 1
// wait ( 0 0$3 ) ;
16735: LD_INT 105
16737: PPUSH
16738: CALL_OW 67
// enable ( entranceEvent ) ;
16742: LD_INT 1
16744: ENABLE_MARKED
// break ;
16745: GO 16749
// end ;
16747: GO 16704
16749: POP
16750: POP
// end ;
16751: PPOPN 1
16753: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16754: LD_INT 0
16756: PPUSH
16757: PPUSH
16758: PPUSH
16759: PPUSH
// if not building then
16760: LD_VAR 0 1
16764: NOT
16765: IFFALSE 16769
// exit ;
16767: GO 19462
// if building in entranceVisitedList then
16769: LD_VAR 0 1
16773: PUSH
16774: LD_EXP 16
16778: IN
16779: IFFALSE 16787
// begin SayHVisited ( ) ;
16781: CALL 16531 0 0
// exit ;
16785: GO 19462
// end ; case Query ( EnterBuilding ) of 1 :
16787: LD_STRING EnterBuilding
16789: PPUSH
16790: CALL_OW 97
16794: PUSH
16795: LD_INT 1
16797: DOUBLE
16798: EQUAL
16799: IFTRUE 16803
16801: GO 16806
16803: POP
// ; 2 :
16804: GO 16820
16806: LD_INT 2
16808: DOUBLE
16809: EQUAL
16810: IFTRUE 16814
16812: GO 16819
16814: POP
// exit ; end ;
16815: GO 19462
16817: GO 16820
16819: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16820: LD_ADDR_EXP 16
16824: PUSH
16825: LD_EXP 16
16829: PPUSH
16830: LD_VAR 0 1
16834: PPUSH
16835: CALL 68261 0 2
16839: ST_TO_ADDR
// InGameOn ;
16840: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16844: LD_EXP 46
16848: PPUSH
16849: LD_INT 5
16851: PPUSH
16852: CALL_OW 235
// SetSide ( building , 5 ) ;
16856: LD_VAR 0 1
16860: PPUSH
16861: LD_INT 5
16863: PPUSH
16864: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16868: LD_EXP 46
16872: PPUSH
16873: LD_VAR 0 1
16877: PPUSH
16878: CALL_OW 120
// wait ( 0 0$3 ) ;
16882: LD_INT 105
16884: PPUSH
16885: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16889: LD_ADDR_VAR 0 4
16893: PUSH
16894: LD_INT 165
16896: PUSH
16897: LD_INT 106
16899: PUSH
16900: LD_INT 135
16902: PUSH
16903: LD_INT 162
16905: PUSH
16906: LD_INT 61
16908: PUSH
16909: LD_INT 109
16911: PUSH
16912: LD_INT 169
16914: PUSH
16915: LD_INT 13
16917: PUSH
16918: LD_INT 147
16920: PUSH
16921: LD_INT 137
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: ST_TO_ADDR
// if not building in tmp then
16936: LD_VAR 0 1
16940: PUSH
16941: LD_VAR 0 4
16945: IN
16946: NOT
16947: IFFALSE 16955
// SayHEmpty ( ) else
16949: CALL 16442 0 0
16953: GO 19409
// case building of laundry :
16955: LD_VAR 0 1
16959: PUSH
16960: LD_INT 165
16962: DOUBLE
16963: EQUAL
16964: IFTRUE 16968
16966: GO 17076
16968: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16969: LD_EXP 26
16973: IFFALSE 16982
16975: PUSH
16976: LD_EXP 27
16980: NOT
16981: AND
16982: IFFALSE 16991
16984: PUSH
16985: LD_EXP 28
16989: NOT
16990: AND
16991: IFFALSE 17046
// begin case Query ( HeikeInLaundry ) of 1 :
16993: LD_STRING HeikeInLaundry
16995: PPUSH
16996: CALL_OW 97
17000: PUSH
17001: LD_INT 1
17003: DOUBLE
17004: EQUAL
17005: IFTRUE 17009
17007: GO 17016
17009: POP
// SpawnHeikeAsRussian ; 2 :
17010: CALL 1840 0 0
17014: GO 17044
17016: LD_INT 2
17018: DOUBLE
17019: EQUAL
17020: IFTRUE 17024
17022: GO 17043
17024: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
17025: LD_ADDR_EXP 16
17029: PUSH
17030: LD_EXP 16
17034: PUSH
17035: LD_VAR 0 1
17039: DIFF
17040: ST_TO_ADDR
17041: GO 17044
17043: POP
// end else
17044: GO 17074
// begin entranceVisitedList := entranceVisitedList diff building ;
17046: LD_ADDR_EXP 16
17050: PUSH
17051: LD_EXP 16
17055: PUSH
17056: LD_VAR 0 1
17060: DIFF
17061: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17062: LD_EXP 46
17066: PPUSH
17067: LD_STRING DH-Locked
17069: PPUSH
17070: CALL_OW 88
// end ; end ; dougBar :
17074: GO 19409
17076: LD_INT 106
17078: DOUBLE
17079: EQUAL
17080: IFTRUE 17084
17082: GO 17448
17084: POP
// begin if contactWithAmerican and americanContact then
17085: LD_EXP 25
17089: IFFALSE 17097
17091: PUSH
17092: LD_EXP 10
17096: AND
17097: IFFALSE 17161
// begin Say ( Heike , DH-Escort-a-1 ) ;
17099: LD_EXP 46
17103: PPUSH
17104: LD_STRING DH-Escort-a-1
17106: PPUSH
17107: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
17111: LD_EXP 60
17115: PPUSH
17116: LD_STRING DCa-Escort-a-2
17118: PPUSH
17119: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
17123: LD_EXP 60
17127: PPUSH
17128: LD_STRING DCa-Escort-a-3
17130: PPUSH
17131: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
17135: LD_EXP 46
17139: PPUSH
17140: LD_STRING DH-Escort-a-4
17142: PPUSH
17143: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
17147: LD_EXP 46
17151: PPUSH
17152: LD_STRING DH-Escort-a-5
17154: PPUSH
17155: CALL_OW 88
// end else
17159: GO 17405
// if contactWithAmerican then
17161: LD_EXP 25
17165: IFFALSE 17205
// begin Say ( Heike , DH-Escort-b-1 ) ;
17167: LD_EXP 46
17171: PPUSH
17172: LD_STRING DH-Escort-b-1
17174: PPUSH
17175: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
17179: LD_EXP 60
17183: PPUSH
17184: LD_STRING DCa-Escort-b-2
17186: PPUSH
17187: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
17191: LD_EXP 60
17195: PPUSH
17196: LD_STRING DCa-Escort-b-3
17198: PPUSH
17199: CALL_OW 88
// end else
17203: GO 17405
// begin Say ( Doug , DCa-Deal-a-1 ) ;
17205: LD_EXP 60
17209: PPUSH
17210: LD_STRING DCa-Deal-a-1
17212: PPUSH
17213: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
17217: LD_EXP 60
17221: PPUSH
17222: LD_STRING DCa-Deal-a-2
17224: PPUSH
17225: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
17229: LD_EXP 46
17233: PPUSH
17234: LD_STRING DH-Deal-a-3
17236: PPUSH
17237: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
17241: LD_EXP 60
17245: PPUSH
17246: LD_STRING DCa-Deal-a-4
17248: PPUSH
17249: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
17253: LD_EXP 46
17257: PPUSH
17258: LD_STRING DH-Deal-a-5
17260: PPUSH
17261: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
17265: LD_EXP 60
17269: PPUSH
17270: LD_STRING DCa-Deal-a-6
17272: PPUSH
17273: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
17277: LD_EXP 60
17281: PPUSH
17282: LD_STRING DCa-Deal-a-7
17284: PPUSH
17285: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
17289: LD_EXP 60
17293: PPUSH
17294: LD_STRING DCa-Deal-a-8
17296: PPUSH
17297: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
17301: LD_EXP 60
17305: PPUSH
17306: LD_STRING DCa-Deal-a-9
17308: PPUSH
17309: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
17313: LD_EXP 60
17317: PPUSH
17318: LD_STRING DCa-Deal-a-10
17320: PPUSH
17321: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
17325: LD_EXP 60
17329: PPUSH
17330: LD_STRING DCa-Deal-a-11
17332: PPUSH
17333: CALL_OW 88
// wait ( 0 0$0.3 ) ;
17337: LD_INT 10
17339: PPUSH
17340: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
17344: LD_EXP 60
17348: PPUSH
17349: LD_STRING DCa-Deal-a-12
17351: PPUSH
17352: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
17356: LD_EXP 46
17360: PPUSH
17361: LD_STRING DH-Deal-a-13
17363: PPUSH
17364: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
17368: LD_EXP 46
17372: PPUSH
17373: LD_STRING DH-Deal-a-14
17375: PPUSH
17376: CALL_OW 88
// contactWithAmerican := true ;
17380: LD_ADDR_EXP 25
17384: PUSH
17385: LD_INT 1
17387: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
17388: LD_INT 1
17390: PPUSH
17391: LD_STRING 08_DealWithDoug
17393: PPUSH
17394: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
17398: LD_STRING M1-american-out
17400: PPUSH
17401: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
17405: LD_EXP 60
17409: PPUSH
17410: LD_INT 2
17412: PPUSH
17413: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
17417: LD_ADDR_EXP 14
17421: PUSH
17422: LD_EXP 14
17426: PPUSH
17427: LD_EXP 60
17431: PPUSH
17432: CALL 68261 0 2
17436: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
17437: LD_EXP 60
17441: PPUSH
17442: CALL_OW 122
// end ; usLab :
17446: GO 19409
17448: LD_INT 135
17450: DOUBLE
17451: EQUAL
17452: IFTRUE 17456
17454: GO 17813
17456: POP
// begin if hasSniperRifle then
17457: LD_EXP 11
17461: IFFALSE 17811
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
17463: LD_EXP 51
17467: PPUSH
17468: CALL_OW 302
17472: IFFALSE 17486
17474: PUSH
17475: LD_EXP 51
17479: PUSH
17480: LD_EXP 14
17484: IN
17485: AND
17486: IFFALSE 17503
17488: PUSH
17489: LD_EXP 51
17493: PPUSH
17494: CALL_OW 255
17498: PUSH
17499: LD_INT 2
17501: EQUAL
17502: AND
17503: IFFALSE 17785
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17505: LD_EXP 46
17509: PPUSH
17510: LD_EXP 51
17514: PPUSH
17515: CALL_OW 296
17519: PUSH
17520: LD_INT 10
17522: GREATER
17523: IFFALSE 17548
// begin Query ( KaiaDistance ) ;
17525: LD_STRING KaiaDistance
17527: PPUSH
17528: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17532: LD_ADDR_EXP 16
17536: PUSH
17537: LD_EXP 16
17541: PUSH
17542: LD_INT 135
17544: DIFF
17545: ST_TO_ADDR
// end else
17546: GO 17783
// begin SetSide ( Kaia , 5 ) ;
17548: LD_EXP 51
17552: PPUSH
17553: LD_INT 5
17555: PPUSH
17556: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17560: LD_EXP 51
17564: PPUSH
17565: LD_INT 135
17567: PPUSH
17568: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17572: LD_INT 35
17574: PPUSH
17575: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17579: LD_EXP 51
17583: PPUSH
17584: CALL_OW 310
17588: IFFALSE 17572
// Say ( Kaia , DK-Sniper-1 ) ;
17590: LD_EXP 51
17594: PPUSH
17595: LD_STRING DK-Sniper-1
17597: PPUSH
17598: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17602: LD_EXP 51
17606: PPUSH
17607: CALL_OW 257
17611: PUSH
17612: LD_INT 34
17614: EQUAL
17615: IFFALSE 17629
17617: PUSH
17618: LD_EXP 48
17622: PUSH
17623: LD_EXP 14
17627: IN
17628: AND
17629: IFFALSE 17642
17631: PUSH
17632: LD_EXP 48
17636: PPUSH
17637: CALL_OW 302
17641: AND
17642: IFFALSE 17673
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17644: LD_EXP 51
17648: PPUSH
17649: LD_STRING DK-Sniper-a-2
17651: PPUSH
17652: CALL_OW 88
// giveSniperRifleToMike := true ;
17656: LD_ADDR_EXP 42
17660: PUSH
17661: LD_INT 1
17663: ST_TO_ADDR
// Query ( QSniperMike ) ;
17664: LD_STRING QSniperMike
17666: PPUSH
17667: CALL_OW 97
// end else
17671: GO 17762
// begin Say ( Kaia , DK-Sniper-2 ) ;
17673: LD_EXP 51
17677: PPUSH
17678: LD_STRING DK-Sniper-2
17680: PPUSH
17681: CALL_OW 88
// repeat wait ( 1 ) ;
17685: LD_INT 1
17687: PPUSH
17688: CALL_OW 67
// ComWalk ( Kaia ) ;
17692: LD_EXP 51
17696: PPUSH
17697: CALL_OW 138
// until not Crawls ( Kaia ) ;
17701: LD_EXP 51
17705: PPUSH
17706: CALL_OW 318
17710: NOT
17711: IFFALSE 17685
// SetClass ( Kaia , class_hunter ) ;
17713: LD_EXP 51
17717: PPUSH
17718: LD_INT 32
17720: PPUSH
17721: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17725: LD_EXP 53
17729: PPUSH
17730: CALL_OW 302
17734: IFFALSE 17748
17736: PUSH
17737: LD_EXP 53
17741: PUSH
17742: LD_EXP 14
17746: IN
17747: AND
17748: IFFALSE 17762
// Say ( Markov , DMar-Sniper-3 ) ;
17750: LD_EXP 53
17754: PPUSH
17755: LD_STRING DMar-Sniper-3
17757: PPUSH
17758: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17762: LD_EXP 51
17766: PPUSH
17767: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17771: LD_EXP 51
17775: PPUSH
17776: LD_INT 2
17778: PPUSH
17779: CALL_OW 235
// end ; end else
17783: GO 17811
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17785: LD_ADDR_EXP 16
17789: PUSH
17790: LD_EXP 16
17794: PUSH
17795: LD_INT 135
17797: DIFF
17798: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17799: LD_EXP 46
17803: PPUSH
17804: LD_STRING DH-Locked
17806: PPUSH
17807: CALL_OW 88
// end ; end ; end ; drugsLab :
17811: GO 19409
17813: LD_INT 162
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17954
17821: POP
// begin if hasStimDrugs then
17822: LD_EXP 9
17826: IFFALSE 17940
// begin wait ( 0 0$1 ) ;
17828: LD_INT 35
17830: PPUSH
17831: CALL_OW 67
// if not hasStimDrugsCollected then
17835: LD_EXP 24
17839: NOT
17840: IFFALSE 17882
// begin Say ( Heike , DH-Lab-1 ) ;
17842: LD_EXP 46
17846: PPUSH
17847: LD_STRING DH-Lab-1
17849: PPUSH
17850: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17854: LD_INT 5
17856: PPUSH
17857: LD_INT 2
17859: PPUSH
17860: LD_INT 2
17862: PPUSH
17863: CALL_OW 322
// hasStimDrugsCollected := true ;
17867: LD_ADDR_EXP 24
17871: PUSH
17872: LD_INT 1
17874: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17875: LD_STRING M1-drugs-out
17877: PPUSH
17878: CALL_OW 604
// end ; if not hasExplosionCollected then
17882: LD_EXP 23
17886: NOT
17887: IFFALSE 17905
// entranceVisitedList := entranceVisitedList diff drugsLab else
17889: LD_ADDR_EXP 16
17893: PUSH
17894: LD_EXP 16
17898: PUSH
17899: LD_INT 162
17901: DIFF
17902: ST_TO_ADDR
17903: GO 17938
// begin wait ( 0 0$3 ) ;
17905: LD_INT 105
17907: PPUSH
17908: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17912: LD_EXP 46
17916: PPUSH
17917: LD_STRING DH-Lab-2
17919: PPUSH
17920: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17924: LD_STRING M1-drugsLab-out
17926: PPUSH
17927: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17931: LD_INT 162
17933: PPUSH
17934: CALL 21319 0 1
// end ; end else
17938: GO 17952
// Say ( Heike , DH-Locked ) ;
17940: LD_EXP 46
17944: PPUSH
17945: LD_STRING DH-Locked
17947: PPUSH
17948: CALL_OW 88
// end ; ruFac :
17952: GO 19409
17954: LD_INT 61
17956: DOUBLE
17957: EQUAL
17958: IFTRUE 17962
17960: GO 18074
17962: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17963: LD_EXP 53
17967: PPUSH
17968: CALL_OW 302
17972: IFFALSE 17987
17974: PUSH
17975: LD_EXP 53
17979: PUSH
17980: LD_EXP 14
17984: IN
17985: NOT
17986: AND
17987: IFFALSE 18068
// begin Say ( Heike , DH-Krastyo-1 ) ;
17989: LD_EXP 46
17993: PPUSH
17994: LD_STRING DH-Krastyo-1
17996: PPUSH
17997: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
18001: LD_EXP 53
18005: PPUSH
18006: LD_STRING DMar-Krastyo-2
18008: PPUSH
18009: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
18013: LD_EXP 53
18017: PPUSH
18018: LD_STRING DMar-Krastyo-3
18020: PPUSH
18021: CALL_OW 88
// SetSide ( Markov , 2 ) ;
18025: LD_EXP 53
18029: PPUSH
18030: LD_INT 2
18032: PPUSH
18033: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
18037: LD_ADDR_EXP 14
18041: PUSH
18042: LD_EXP 14
18046: PPUSH
18047: LD_EXP 53
18051: PPUSH
18052: CALL 68261 0 2
18056: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
18057: LD_EXP 53
18061: PPUSH
18062: CALL_OW 122
// end else
18066: GO 18072
// SayHEmpty ( ) ;
18068: CALL 16442 0 0
// end ; ruBarKam :
18072: GO 19409
18074: LD_INT 109
18076: DOUBLE
18077: EQUAL
18078: IFTRUE 18082
18080: GO 18231
18082: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
18083: LD_EXP 50
18087: PPUSH
18088: CALL_OW 302
18092: IFFALSE 18107
18094: PUSH
18095: LD_EXP 50
18099: PUSH
18100: LD_EXP 14
18104: IN
18105: NOT
18106: AND
18107: IFFALSE 18225
// begin Say ( Heike , DH-Kamil-1 ) ;
18109: LD_EXP 46
18113: PPUSH
18114: LD_STRING DH-Kamil-1
18116: PPUSH
18117: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
18121: LD_EXP 50
18125: PPUSH
18126: LD_STRING DKam-Kamil-2
18128: PPUSH
18129: CALL_OW 88
// if IsOk ( Sophia ) then
18133: LD_EXP 52
18137: PPUSH
18138: CALL_OW 302
18142: IFFALSE 18182
// if Sophia in heikeSquad then
18144: LD_EXP 52
18148: PUSH
18149: LD_EXP 14
18153: IN
18154: IFFALSE 18170
// Say ( Kamil , DKam-Kamil-a-3 ) else
18156: LD_EXP 50
18160: PPUSH
18161: LD_STRING DKam-Kamil-a-3
18163: PPUSH
18164: CALL_OW 88
18168: GO 18182
// Say ( Kamil , DKam-Kamil-3 ) ;
18170: LD_EXP 50
18174: PPUSH
18175: LD_STRING DKam-Kamil-3
18177: PPUSH
18178: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
18182: LD_EXP 50
18186: PPUSH
18187: LD_INT 2
18189: PPUSH
18190: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
18194: LD_ADDR_EXP 14
18198: PUSH
18199: LD_EXP 14
18203: PPUSH
18204: LD_EXP 50
18208: PPUSH
18209: CALL 68261 0 2
18213: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
18214: LD_EXP 50
18218: PPUSH
18219: CALL_OW 122
// end else
18223: GO 18229
// SayHEmpty ( ) ;
18225: CALL 16442 0 0
// end ; ruOutpost1 :
18229: GO 19409
18231: LD_INT 169
18233: DOUBLE
18234: EQUAL
18235: IFTRUE 18239
18237: GO 18480
18239: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
18240: LD_EXP 55
18244: PPUSH
18245: CALL_OW 302
18249: IFFALSE 18264
18251: PUSH
18252: LD_EXP 55
18256: PUSH
18257: LD_EXP 14
18261: IN
18262: NOT
18263: AND
18264: IFFALSE 18474
// begin if hasMethanol then
18266: LD_EXP 13
18270: IFFALSE 18403
// begin Say ( Heike , DH-Kurt-1 ) ;
18272: LD_EXP 46
18276: PPUSH
18277: LD_STRING DH-Kurt-1
18279: PPUSH
18280: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18284: LD_EXP 55
18288: PPUSH
18289: LD_STRING DKs-Kurt-2
18291: PPUSH
18292: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
18296: LD_EXP 47
18300: PPUSH
18301: LD_INT 169
18303: PPUSH
18304: CALL_OW 296
18308: PUSH
18309: LD_INT 10
18311: LESS
18312: IFFALSE 18326
18314: PUSH
18315: LD_EXP 47
18319: PUSH
18320: LD_EXP 14
18324: IN
18325: AND
18326: IFFALSE 18401
// begin ComMoveXY ( Givi , 100 , 37 ) ;
18328: LD_EXP 47
18332: PPUSH
18333: LD_INT 100
18335: PPUSH
18336: LD_INT 37
18338: PPUSH
18339: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
18343: LD_EXP 47
18347: PPUSH
18348: LD_INT 169
18350: PPUSH
18351: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
18355: LD_INT 35
18357: PPUSH
18358: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
18362: LD_EXP 47
18366: PPUSH
18367: LD_INT 169
18369: PPUSH
18370: CALL_OW 296
18374: PUSH
18375: LD_INT 7
18377: LESS
18378: IFFALSE 18355
// Say ( Givi , DG-Kurt-3 ) ;
18380: LD_EXP 47
18384: PPUSH
18385: LD_STRING DG-Kurt-3
18387: PPUSH
18388: CALL_OW 88
// ComStop ( Givi ) ;
18392: LD_EXP 47
18396: PPUSH
18397: CALL_OW 141
// end ; end else
18401: GO 18431
// begin Say ( Heike , DH-Kurt-1 ) ;
18403: LD_EXP 46
18407: PPUSH
18408: LD_STRING DH-Kurt-1
18410: PPUSH
18411: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
18415: LD_EXP 55
18419: PPUSH
18420: LD_STRING DKs-Kurt-2
18422: PPUSH
18423: CALL_OW 88
// SpawnAdditionalRuGuards ;
18427: CALL 3677 0 0
// end ; SetSide ( Kurt , 2 ) ;
18431: LD_EXP 55
18435: PPUSH
18436: LD_INT 2
18438: PPUSH
18439: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
18443: LD_ADDR_EXP 14
18447: PUSH
18448: LD_EXP 14
18452: PPUSH
18453: LD_EXP 55
18457: PPUSH
18458: CALL 68261 0 2
18462: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
18463: LD_EXP 55
18467: PPUSH
18468: CALL_OW 122
// end else
18472: GO 18478
// SayHEmpty ( ) ;
18474: CALL 16442 0 0
// end ; ruOutpostBar :
18478: GO 19409
18480: LD_INT 13
18482: DOUBLE
18483: EQUAL
18484: IFTRUE 18488
18486: GO 18534
18488: POP
// begin if not hasGuardPatrolPlan then
18489: LD_EXP 18
18493: NOT
18494: IFFALSE 18528
// begin Say ( Heike , DH-PatrolPlan ) ;
18496: LD_EXP 46
18500: PPUSH
18501: LD_STRING DH-PatrolPlan
18503: PPUSH
18504: CALL_OW 88
// hasGuardPatrolPlan := true ;
18508: LD_ADDR_EXP 18
18512: PUSH
18513: LD_INT 1
18515: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
18516: LD_INT 6
18518: PPUSH
18519: LD_INT 2
18521: PPUSH
18522: CALL_OW 343
// end else
18526: GO 18532
// SayHEmpty ( ) ;
18528: CALL 16442 0 0
// end ; ruKaiaBar :
18532: GO 19409
18534: LD_INT 147
18536: DOUBLE
18537: EQUAL
18538: IFTRUE 18542
18540: GO 18691
18542: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18543: LD_EXP 51
18547: PPUSH
18548: CALL_OW 302
18552: IFFALSE 18567
18554: PUSH
18555: LD_EXP 51
18559: PUSH
18560: LD_EXP 14
18564: IN
18565: NOT
18566: AND
18567: IFFALSE 18689
// begin Say ( Heike , DH-Kaia-1 ) ;
18569: LD_EXP 46
18573: PPUSH
18574: LD_STRING DH-Kaia-1
18576: PPUSH
18577: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18581: LD_EXP 51
18585: PPUSH
18586: LD_STRING DK-Kaia-2
18588: PPUSH
18589: CALL_OW 88
// if hasSniperRifle then
18593: LD_EXP 11
18597: IFFALSE 18648
// begin if IsOk ( Markov ) then
18599: LD_EXP 53
18603: PPUSH
18604: CALL_OW 302
18608: IFFALSE 18624
// Say ( Kaia , DK-Kaia-3 ) else
18610: LD_EXP 51
18614: PPUSH
18615: LD_STRING DK-Kaia-3
18617: PPUSH
18618: CALL_OW 88
18622: GO 18636
// Say ( Kaia , DK-Kaia-a-3 ) ;
18624: LD_EXP 51
18628: PPUSH
18629: LD_STRING DK-Kaia-a-3
18631: PPUSH
18632: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18636: LD_EXP 46
18640: PPUSH
18641: LD_STRING DH-Kaia-4
18643: PPUSH
18644: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18648: LD_EXP 51
18652: PPUSH
18653: LD_INT 2
18655: PPUSH
18656: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18660: LD_ADDR_EXP 14
18664: PUSH
18665: LD_EXP 14
18669: PPUSH
18670: LD_EXP 51
18674: PPUSH
18675: CALL 68261 0 2
18679: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18680: LD_EXP 51
18684: PPUSH
18685: CALL_OW 122
// end ; end ; ruWeaponsBar :
18689: GO 19409
18691: LD_INT 137
18693: DOUBLE
18694: EQUAL
18695: IFTRUE 18699
18697: GO 19408
18699: POP
// begin if hasWeapons then
18700: LD_EXP 19
18704: IFFALSE 19394
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18706: LD_ADDR_EXP 16
18710: PUSH
18711: LD_EXP 16
18715: PUSH
18716: LD_INT 137
18718: DIFF
18719: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18720: LD_ADDR_VAR 0 4
18724: PUSH
18725: LD_EXP 14
18729: PPUSH
18730: LD_INT 91
18732: PUSH
18733: LD_EXP 46
18737: PUSH
18738: LD_INT 8
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: PPUSH
18746: CALL_OW 72
18750: ST_TO_ADDR
// if not heikeSquad or not tmp then
18751: LD_EXP 14
18755: NOT
18756: IFTRUE 18765
18758: PUSH
18759: LD_VAR 0 4
18763: NOT
18764: OR
18765: IFFALSE 18781
// Say ( Heike , DH-Weapons-Alone ) else
18767: LD_EXP 46
18771: PPUSH
18772: LD_STRING DH-Weapons-Alone
18774: PPUSH
18775: CALL_OW 88
18779: GO 19392
// begin if not firstArmouryDialog then
18781: LD_EXP 39
18785: NOT
18786: IFFALSE 18845
// begin Say ( Heike , DH-Weapons-1 ) ;
18788: LD_EXP 46
18792: PPUSH
18793: LD_STRING DH-Weapons-1
18795: PPUSH
18796: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18800: LD_EXP 46
18804: PPUSH
18805: LD_STRING DH-Weapons-2
18807: PPUSH
18808: CALL_OW 88
// Query ( Weapons ) ;
18812: LD_STRING Weapons
18814: PPUSH
18815: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18819: LD_INT 65
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL_OW 424
// canEquipWeapons := true ;
18829: LD_ADDR_EXP 41
18833: PUSH
18834: LD_INT 1
18836: ST_TO_ADDR
// firstArmouryDialog := true ;
18837: LD_ADDR_EXP 39
18841: PUSH
18842: LD_INT 1
18844: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18845: LD_EXP 8
18849: IFFALSE 18863
18851: PUSH
18852: LD_EXP 51
18856: PUSH
18857: LD_VAR 0 4
18861: IN
18862: AND
18863: IFFALSE 18880
18865: PUSH
18866: LD_EXP 51
18870: PPUSH
18871: CALL_OW 257
18875: PUSH
18876: LD_INT 34
18878: NONEQUAL
18879: AND
18880: IFFALSE 19030
// begin SetSide ( Kaia , 5 ) ;
18882: LD_EXP 51
18886: PPUSH
18887: LD_INT 5
18889: PPUSH
18890: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18894: LD_EXP 51
18898: PPUSH
18899: LD_INT 137
18901: PPUSH
18902: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18906: LD_INT 35
18908: PPUSH
18909: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18913: LD_EXP 51
18917: PPUSH
18918: CALL_OW 310
18922: IFFALSE 18906
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18924: LD_EXP 46
18928: PPUSH
18929: LD_STRING DH-Kaia-Revolver-2
18931: PPUSH
18932: CALL_OW 88
// SetClassKaiaRevolver ;
18936: CALL 1771 0 0
// hasRevolver := false ;
18940: LD_ADDR_EXP 8
18944: PUSH
18945: LD_INT 0
18947: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18948: LD_EXP 51
18952: PPUSH
18953: LD_INT 2
18955: PPUSH
18956: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18960: LD_EXP 51
18964: PPUSH
18965: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18969: LD_EXP 51
18973: PPUSH
18974: CALL_OW 257
18978: PUSH
18979: LD_INT 32
18981: EQUAL
18982: IFFALSE 18996
18984: PUSH
18985: LD_EXP 48
18989: PUSH
18990: LD_EXP 14
18994: IN
18995: AND
18996: IFFALSE 19013
18998: PUSH
18999: LD_EXP 48
19003: PPUSH
19004: CALL_OW 255
19008: PUSH
19009: LD_INT 2
19011: EQUAL
19012: AND
19013: IFFALSE 19030
// begin giveSniperRifleToMike := true ;
19015: LD_ADDR_EXP 42
19019: PUSH
19020: LD_INT 1
19022: ST_TO_ADDR
// Query ( QSniperMike ) ;
19023: LD_STRING QSniperMike
19025: PPUSH
19026: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
19030: LD_EXP 47
19034: PUSH
19035: LD_VAR 0 4
19039: IN
19040: IFFALSE 19057
19042: PUSH
19043: LD_EXP 47
19047: PPUSH
19048: CALL_OW 257
19052: PUSH
19053: LD_INT 33
19055: EQUAL
19056: AND
19057: IFFALSE 19198
// begin SetSide ( Givi , 5 ) ;
19059: LD_EXP 47
19063: PPUSH
19064: LD_INT 5
19066: PPUSH
19067: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
19071: LD_EXP 47
19075: PPUSH
19076: LD_INT 137
19078: PPUSH
19079: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19083: LD_INT 35
19085: PPUSH
19086: CALL_OW 67
// until IsInUnit ( Givi ) ;
19090: LD_EXP 47
19094: PPUSH
19095: CALL_OW 310
19099: IFFALSE 19083
// Say ( Givi , DG-Weapons-3 ) ;
19101: LD_EXP 47
19105: PPUSH
19106: LD_STRING DG-Weapons-3
19108: PPUSH
19109: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
19113: LD_EXP 46
19117: PPUSH
19118: LD_STRING DH-Weapons-4
19120: PPUSH
19121: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
19125: LD_EXP 47
19129: PPUSH
19130: LD_STRING DG-Weapons-5
19132: PPUSH
19133: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
19137: LD_EXP 47
19141: PPUSH
19142: LD_INT 11
19144: PPUSH
19145: CALL_OW 336
// ComExitBuilding ( Givi ) ;
19149: LD_EXP 47
19153: PPUSH
19154: CALL_OW 122
// SetSide ( Givi , 2 ) ;
19158: LD_EXP 47
19162: PPUSH
19163: LD_INT 2
19165: PPUSH
19166: CALL_OW 235
// if hasRevolver then
19170: LD_EXP 8
19174: IFFALSE 19196
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19176: LD_EXP 46
19180: PPUSH
19181: LD_STRING DH-Kaia-Revolver-1
19183: PPUSH
19184: CALL_OW 88
// heikeHasRevolver := true ;
19188: LD_ADDR_EXP 20
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// end ; end else
19196: GO 19392
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
19198: LD_EXP 50
19202: PUSH
19203: LD_VAR 0 4
19207: IN
19208: IFFALSE 19225
19210: PUSH
19211: LD_EXP 50
19215: PPUSH
19216: CALL_OW 257
19220: PUSH
19221: LD_INT 33
19223: EQUAL
19224: AND
19225: IFFALSE 19354
// begin SetSide ( Kamil , 5 ) ;
19227: LD_EXP 50
19231: PPUSH
19232: LD_INT 5
19234: PPUSH
19235: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
19239: LD_EXP 50
19243: PPUSH
19244: LD_INT 137
19246: PPUSH
19247: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
19251: LD_INT 35
19253: PPUSH
19254: CALL_OW 67
// until IsInUnit ( Kamil ) ;
19258: LD_EXP 50
19262: PPUSH
19263: CALL_OW 310
19267: IFFALSE 19251
// Say ( Kamil , DKam-Weapons-a-3 ) ;
19269: LD_EXP 50
19273: PPUSH
19274: LD_STRING DKam-Weapons-a-3
19276: PPUSH
19277: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
19281: LD_EXP 46
19285: PPUSH
19286: LD_STRING DH-Weapons-a-4
19288: PPUSH
19289: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
19293: LD_EXP 50
19297: PPUSH
19298: LD_INT 11
19300: PPUSH
19301: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
19305: LD_EXP 50
19309: PPUSH
19310: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
19314: LD_EXP 50
19318: PPUSH
19319: LD_INT 2
19321: PPUSH
19322: CALL_OW 235
// if hasRevolver then
19326: LD_EXP 8
19330: IFFALSE 19352
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
19332: LD_EXP 46
19336: PPUSH
19337: LD_STRING DH-Kaia-Revolver-1
19339: PPUSH
19340: CALL_OW 88
// heikeHasRevolver := true ;
19344: LD_ADDR_EXP 20
19348: PUSH
19349: LD_INT 1
19351: ST_TO_ADDR
// end ; end else
19352: GO 19392
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
19354: LD_EXP 46
19358: PPUSH
19359: LD_STRING DH-Weapons-Alone-2
19361: PPUSH
19362: CALL_OW 88
// if hasRevolver then
19366: LD_EXP 8
19370: IFFALSE 19392
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
19372: LD_EXP 46
19376: PPUSH
19377: LD_STRING DH-Kaia-Revolver-1a
19379: PPUSH
19380: CALL_OW 88
// heikeHasRevolver := true ;
19384: LD_ADDR_EXP 20
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// end ; end ; end ; end else
19392: GO 19406
// Say ( Heike , DH-Locked ) ;
19394: LD_EXP 46
19398: PPUSH
19399: LD_STRING DH-Locked
19401: PPUSH
19402: CALL_OW 88
// end ; end ;
19406: GO 19409
19408: POP
// SetSide ( building , 3 ) ;
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_INT 3
19416: PPUSH
19417: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL 20770 0 1
// wait ( 0 0$0.3 ) ;
19430: LD_INT 10
19432: PPUSH
19433: CALL_OW 67
// ComExitBuilding ( Heike ) ;
19437: LD_EXP 46
19441: PPUSH
19442: CALL_OW 122
// SetSide ( Heike , 2 ) ;
19446: LD_EXP 46
19450: PPUSH
19451: LD_INT 2
19453: PPUSH
19454: CALL_OW 235
// InGameOff ;
19458: CALL_OW 9
// end ;
19462: LD_VAR 0 2
19466: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
19467: LD_EXP 30
19471: NOT
19472: IFFALSE 19481
19474: PUSH
19475: LD_EXP 17
19479: NOT
19480: AND
19481: IFFALSE 19517
19483: PUSH
19484: LD_INT 22
19486: PUSH
19487: LD_INT 5
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 1
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PPUSH
19508: CALL_OW 69
19512: PUSH
19513: LD_INT 0
19515: EQUAL
19516: AND
19517: IFFALSE 19570
19519: PUSH
19520: LD_INT 22
19522: PUSH
19523: LD_INT 4
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: LD_INT 21
19532: PUSH
19533: LD_INT 1
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PPUSH
19544: CALL_OW 69
19548: PUSH
19549: LD_INT 0
19551: EQUAL
19552: IFFALSE 19560
19554: PUSH
19555: LD_EXP 25
19559: AND
19560: IFTRUE 19569
19562: PUSH
19563: LD_EXP 25
19567: NOT
19568: OR
19569: AND
19570: IFFALSE 19602
19572: GO 19574
19574: DISABLE
// begin DialogueOn ;
19575: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19579: LD_EXP 46
19583: PPUSH
19584: LD_STRING DH-Alarm-2
19586: PPUSH
19587: CALL_OW 88
// DialogueOff ;
19591: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19595: LD_STRING M1-people-out
19597: PPUSH
19598: CALL_OW 337
// end ;
19602: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19603: LD_EXP 48
19607: PPUSH
19608: CALL_OW 255
19612: PUSH
19613: LD_INT 2
19615: EQUAL
19616: IFFALSE 19630
19618: PUSH
19619: LD_EXP 48
19623: PUSH
19624: LD_EXP 14
19628: IN
19629: AND
19630: IFFALSE 19652
19632: PUSH
19633: LD_EXP 46
19637: PPUSH
19638: LD_EXP 48
19642: PPUSH
19643: CALL_OW 296
19647: PUSH
19648: LD_INT 6
19650: LESS
19651: AND
19652: IFFALSE 19661
19654: PUSH
19655: LD_EXP 30
19659: NOT
19660: AND
19661: IFFALSE 19669
19663: PUSH
19664: LD_EXP 42
19668: AND
19669: IFFALSE 19714
19671: GO 19673
19673: DISABLE
// begin repeat wait ( 1 ) ;
19674: LD_INT 1
19676: PPUSH
19677: CALL_OW 67
// ComWalk ( Mike ) ;
19681: LD_EXP 48
19685: PPUSH
19686: CALL_OW 138
// until not Crawls ( Mike ) ;
19690: LD_EXP 48
19694: PPUSH
19695: CALL_OW 318
19699: NOT
19700: IFFALSE 19674
// SetClass ( Mike , class_hunter ) ;
19702: LD_EXP 48
19706: PPUSH
19707: LD_INT 32
19709: PPUSH
19710: CALL_OW 336
// end ;
19714: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19715: LD_EXP 41
19719: IFFALSE 19727
19721: PUSH
19722: LD_EXP 40
19726: AND
19727: IFFALSE 19742
19729: PUSH
19730: LD_INT 137
19732: PPUSH
19733: CALL_OW 255
19737: PUSH
19738: LD_INT 3
19740: EQUAL
19741: AND
19742: IFFALSE 19790
19744: PUSH
19745: LD_EXP 14
19749: PPUSH
19750: LD_INT 95
19752: PUSH
19753: LD_INT 65
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 22
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 25
19772: PUSH
19773: LD_INT 33
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 72
19789: AND
19790: IFFALSE 19809
19792: PUSH
19793: LD_INT 2
19795: PPUSH
19796: LD_INT 3
19798: PPUSH
19799: CALL_OW 81
19803: PUSH
19804: LD_INT 2
19806: EQUAL
19807: NOT
19808: AND
19809: IFFALSE 19830
19811: PUSH
19812: LD_EXP 66
19816: PPUSH
19817: LD_INT 137
19819: PPUSH
19820: CALL_OW 296
19824: PUSH
19825: LD_INT 12
19827: LESS
19828: NOT
19829: AND
19830: IFFALSE 20084
19832: GO 19834
19834: DISABLE
19835: LD_INT 0
19837: PPUSH
19838: PPUSH
// begin enable ;
19839: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19840: LD_ADDR_VAR 0 2
19844: PUSH
19845: LD_EXP 14
19849: PPUSH
19850: LD_INT 95
19852: PUSH
19853: LD_INT 65
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 22
19862: PUSH
19863: LD_INT 2
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: LD_INT 25
19872: PUSH
19873: LD_INT 33
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: LIST
19884: PPUSH
19885: CALL_OW 72
19889: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19890: LD_STRING QWeapons
19892: PPUSH
19893: CALL_OW 97
19897: PUSH
19898: LD_INT 1
19900: EQUAL
19901: IFFALSE 20084
// begin for i in tmp do
19903: LD_ADDR_VAR 0 1
19907: PUSH
19908: LD_VAR 0 2
19912: PUSH
19913: FOR_IN
19914: IFFALSE 20082
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19916: LD_INT 137
19918: PPUSH
19919: CALL_OW 313
19923: PUSH
19924: LD_INT 6
19926: EQUAL
19927: IFFALSE 19931
// continue ;
19929: GO 19913
// SetSide ( i , 3 ) ;
19931: LD_VAR 0 1
19935: PPUSH
19936: LD_INT 3
19938: PPUSH
19939: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19943: LD_VAR 0 1
19947: PPUSH
19948: LD_INT 137
19950: PPUSH
19951: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19955: LD_ADDR_EXP 40
19959: PUSH
19960: LD_EXP 40
19964: PPUSH
19965: CALL 69656 0 1
19969: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19970: LD_INT 10
19972: PPUSH
19973: CALL_OW 67
// until IsInUnit ( i ) ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 310
19986: IFFALSE 19970
// SetClass ( i , class_soldier ) ;
19988: LD_VAR 0 1
19992: PPUSH
19993: LD_INT 1
19995: PPUSH
19996: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
20000: LD_VAR 0 1
20004: PPUSH
20005: CALL_OW 122
// wait ( 0 0$1 ) ;
20009: LD_INT 35
20011: PPUSH
20012: CALL_OW 67
// until not IsInUnit ( i ) ;
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 310
20025: NOT
20026: IFFALSE 20000
// SetSide ( i , 2 ) ;
20028: LD_VAR 0 1
20032: PPUSH
20033: LD_INT 2
20035: PPUSH
20036: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
20040: LD_VAR 0 1
20044: PPUSH
20045: LD_INT 191
20047: PPUSH
20048: LD_INT 126
20050: PPUSH
20051: CALL_OW 171
// if weaponsAmount = 0 then
20055: LD_EXP 40
20059: PUSH
20060: LD_INT 0
20062: EQUAL
20063: IFFALSE 20080
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
20065: LD_INT 65
20067: PPUSH
20068: LD_INT 0
20070: PPUSH
20071: CALL_OW 424
// disable ;
20075: DISABLE
// exit ;
20076: POP
20077: POP
20078: GO 20084
// end ; end ;
20080: GO 19913
20082: POP
20083: POP
// end ; end ; end_of_file
20084: PPOPN 2
20086: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
20087: LD_VAR 0 1
20091: PUSH
20092: LD_INT 3
20094: DOUBLE
20095: EQUAL
20096: IFTRUE 20100
20098: GO 20130
20100: POP
// begin repeat wait ( 0 0$1 ) ;
20101: LD_INT 35
20103: PPUSH
20104: CALL_OW 67
// CenterOnUnits ( Heike ) ;
20108: LD_EXP 46
20112: PPUSH
20113: CALL_OW 85
// until IsDying ( Heike ) ;
20117: LD_EXP 46
20121: PPUSH
20122: CALL_OW 303
20126: IFFALSE 20101
// end ; end ;
20128: GO 20131
20130: POP
// end ;
20131: PPOPN 1
20133: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
20134: LD_OWVAR 59
20138: IFFALSE 20142
// exit ;
20140: GO 20216
// if showPlaceEvent then
20142: LD_INT 4
20144: IFFALSE 20216
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_VAR 0 3
20155: PPUSH
20156: LD_INT 2
20158: PPUSH
20159: LD_INT 6
20161: NEG
20162: PPUSH
20163: CALL_OW 330
// CenterOnXY ( x , y ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_VAR 0 3
20176: PPUSH
20177: CALL_OW 84
// wait ( time ) ;
20181: LD_VAR 0 4
20185: PPUSH
20186: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
20190: LD_EXP 46
20194: PPUSH
20195: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
20199: LD_VAR 0 2
20203: PPUSH
20204: LD_VAR 0 3
20208: PPUSH
20209: LD_INT 2
20211: PPUSH
20212: CALL_OW 331
// end ; end ;
20216: PPOPN 7
20218: END
// on UnitDestroyed ( un ) do var x , y ;
20219: LD_INT 0
20221: PPUSH
20222: PPUSH
// begin if un = Heike and hasNormalScene then
20223: LD_VAR 0 1
20227: PUSH
20228: LD_EXP 46
20232: EQUAL
20233: IFFALSE 20241
20235: PUSH
20236: LD_EXP 5
20240: AND
20241: IFFALSE 20265
// if loseCounter then
20243: LD_EXP 32
20247: IFFALSE 20258
// YouLost ( HeikeNoSurrender ) else
20249: LD_STRING HeikeNoSurrender
20251: PPUSH
20252: CALL_OW 104
20256: GO 20265
// YouLost ( Heike ) ;
20258: LD_STRING Heike
20260: PPUSH
20261: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
20265: LD_VAR 0 1
20269: PPUSH
20270: CALL_OW 255
20274: PUSH
20275: LD_INT 2
20277: EQUAL
20278: IFFALSE 20295
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 247
20290: PUSH
20291: LD_INT 1
20293: EQUAL
20294: AND
20295: IFFALSE 20312
// loseCounter := Inc ( loseCounter ) ;
20297: LD_ADDR_EXP 32
20301: PUSH
20302: LD_EXP 32
20306: PPUSH
20307: CALL 69634 0 1
20311: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
20312: LD_VAR 0 1
20316: PPUSH
20317: CALL_OW 255
20321: PUSH
20322: LD_INT 6
20324: EQUAL
20325: IFFALSE 20334
20327: PUSH
20328: LD_EXP 17
20332: NOT
20333: AND
20334: IFFALSE 20348
20336: PUSH
20337: LD_VAR 0 1
20341: PUSH
20342: LD_EXP 71
20346: IN
20347: AND
20348: IFFALSE 20452
// begin x := GetX ( un ) ;
20350: LD_ADDR_VAR 0 2
20354: PUSH
20355: LD_VAR 0 1
20359: PPUSH
20360: CALL_OW 250
20364: ST_TO_ADDR
// y := GetY ( un ) ;
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: LD_VAR 0 1
20374: PPUSH
20375: CALL_OW 251
20379: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
20380: LD_ADDR_EXP 43
20384: PUSH
20385: LD_EXP 43
20389: PPUSH
20390: LD_VAR 0 2
20394: PUSH
20395: LD_VAR 0 3
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PPUSH
20404: CALL 68261 0 2
20408: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
20409: LD_ADDR_EXP 71
20413: PUSH
20414: LD_EXP 71
20418: PUSH
20419: LD_VAR 0 1
20423: DIFF
20424: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
20425: LD_INT 3
20427: PPUSH
20428: LD_VAR 0 2
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: CALL_OW 293
20442: IFFALSE 20452
// isAlarm := true ;
20444: LD_ADDR_EXP 17
20448: PUSH
20449: LD_INT 1
20451: ST_TO_ADDR
// end ; end ;
20452: PPOPN 3
20454: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
20455: LD_EXP 44
20459: IFFALSE 20463
// exit ;
20461: GO 20517
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
20463: LD_VAR 0 1
20467: PUSH
20468: LD_INT 2
20470: EQUAL
20471: IFFALSE 20483
20473: PUSH
20474: LD_VAR 0 2
20478: PUSH
20479: LD_INT 3
20481: EQUAL
20482: AND
20483: IFTRUE 20507
20485: PUSH
20486: LD_VAR 0 1
20490: PUSH
20491: LD_INT 3
20493: EQUAL
20494: IFFALSE 20506
20496: PUSH
20497: LD_VAR 0 2
20501: PUSH
20502: LD_INT 2
20504: EQUAL
20505: AND
20506: OR
20507: IFFALSE 20517
// isAlarm := true ;
20509: LD_ADDR_EXP 17
20513: PUSH
20514: LD_INT 1
20516: ST_TO_ADDR
// end ;
20517: PPOPN 2
20519: END
// on DestinationUnreachable ( un ) do var i , units ;
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
// begin if un = ruDisturb and not isAlarm then
20524: LD_VAR 0 1
20528: PUSH
20529: LD_EXP 66
20533: EQUAL
20534: IFFALSE 20543
20536: PUSH
20537: LD_EXP 17
20541: NOT
20542: AND
20543: IFFALSE 20664
// begin units := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff Heike ;
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 22
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: LD_INT 21
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PPUSH
20574: CALL_OW 69
20578: PUSH
20579: LD_EXP 46
20583: DIFF
20584: ST_TO_ADDR
// if not units then
20585: LD_VAR 0 3
20589: NOT
20590: IFFALSE 20594
// exit ;
20592: GO 20664
// for i in units do
20594: LD_ADDR_VAR 0 2
20598: PUSH
20599: LD_VAR 0 3
20603: PUSH
20604: FOR_IN
20605: IFFALSE 20662
// begin if Carry ( i ) then
20607: LD_VAR 0 2
20611: PPUSH
20612: CALL_OW 281
20616: IFFALSE 20633
// SetCargo ( i , mat_cans , 0 ) ;
20618: LD_VAR 0 2
20622: PPUSH
20623: LD_INT 1
20625: PPUSH
20626: LD_INT 0
20628: PPUSH
20629: CALL_OW 290
// SetSide ( i , 5 ) ;
20633: LD_VAR 0 2
20637: PPUSH
20638: LD_INT 5
20640: PPUSH
20641: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20645: LD_VAR 0 2
20649: PPUSH
20650: LD_INT 113
20652: PPUSH
20653: LD_INT 17
20655: PPUSH
20656: CALL_OW 111
// end ;
20660: GO 20604
20662: POP
20663: POP
// end ; end ; end_of_file
20664: PPOPN 3
20666: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
20667: LD_INT 0
20669: PPUSH
20670: PPUSH
20671: PPUSH
// u1 := IsInUnit ( unit1 ) ;
20672: LD_ADDR_VAR 0 4
20676: PUSH
20677: LD_VAR 0 1
20681: PPUSH
20682: CALL_OW 310
20686: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
20687: LD_ADDR_VAR 0 5
20691: PUSH
20692: LD_VAR 0 2
20696: PPUSH
20697: CALL_OW 310
20701: ST_TO_ADDR
// result := u1 and u1 = u2 ;
20702: LD_ADDR_VAR 0 3
20706: PUSH
20707: LD_VAR 0 4
20711: IFFALSE 20725
20713: PUSH
20714: LD_VAR 0 4
20718: PUSH
20719: LD_VAR 0 5
20723: EQUAL
20724: AND
20725: ST_TO_ADDR
// end ;
20726: LD_VAR 0 3
20730: RET
// export function ShowPlace ( x , y , time ) ; begin
20731: LD_INT 0
20733: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
20734: LD_INT 4
20736: PPUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: LD_INT 0
20754: PPUSH
20755: LD_INT 0
20757: PPUSH
20758: LD_INT 0
20760: PPUSH
20761: CALL_OW 595
// end ;
20765: LD_VAR 0 4
20769: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20770: LD_INT 0
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
// if not IsOk ( building ) then
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 302
20787: NOT
20788: IFFALSE 20792
// exit ;
20790: GO 21039
// x := GetX ( building ) ;
20792: LD_ADDR_VAR 0 4
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL_OW 250
20806: ST_TO_ADDR
// y := GetY ( building ) ;
20807: LD_ADDR_VAR 0 5
20811: PUSH
20812: LD_VAR 0 1
20816: PPUSH
20817: CALL_OW 251
20821: ST_TO_ADDR
// d := GetDir ( building ) ;
20822: LD_ADDR_VAR 0 6
20826: PUSH
20827: LD_VAR 0 1
20831: PPUSH
20832: CALL_OW 254
20836: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20837: LD_ADDR_VAR 0 7
20841: PUSH
20842: LD_VAR 0 4
20846: PPUSH
20847: LD_VAR 0 6
20851: PPUSH
20852: LD_INT 3
20854: PPUSH
20855: CALL_OW 272
20859: PUSH
20860: LD_VAR 0 5
20864: PPUSH
20865: LD_VAR 0 6
20869: PPUSH
20870: LD_INT 3
20872: PPUSH
20873: CALL_OW 273
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20882: LD_VAR 0 7
20886: PUSH
20887: LD_INT 1
20889: ARRAY
20890: PPUSH
20891: LD_VAR 0 7
20895: PUSH
20896: LD_INT 2
20898: ARRAY
20899: PPUSH
20900: CALL_OW 488
20904: NOT
20905: IFFALSE 20909
// exit ;
20907: GO 21039
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20909: LD_ADDR_VAR 0 2
20913: PUSH
20914: LD_INT 92
20916: PUSH
20917: LD_VAR 0 4
20921: PUSH
20922: LD_VAR 0 5
20926: PUSH
20927: LD_INT 4
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 3
20938: PUSH
20939: LD_INT 54
20941: PUSH
20942: EMPTY
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PPUSH
20953: CALL_OW 69
20957: ST_TO_ADDR
// if not result then
20958: LD_VAR 0 2
20962: NOT
20963: IFFALSE 20967
// exit ;
20965: GO 21039
// for i in result do
20967: LD_ADDR_VAR 0 3
20971: PUSH
20972: LD_VAR 0 2
20976: PUSH
20977: FOR_IN
20978: IFFALSE 21037
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
20980: LD_VAR 0 3
20984: PPUSH
20985: LD_VAR 0 3
20989: PPUSH
20990: CALL_OW 250
20994: PPUSH
20995: LD_VAR 0 6
20999: PPUSH
21000: LD_INT 3
21002: PPUSH
21003: CALL_OW 272
21007: PPUSH
21008: LD_VAR 0 3
21012: PPUSH
21013: CALL_OW 251
21017: PPUSH
21018: LD_VAR 0 6
21022: PPUSH
21023: LD_INT 3
21025: PPUSH
21026: CALL_OW 273
21030: PPUSH
21031: CALL_OW 111
21035: GO 20977
21037: POP
21038: POP
// end ;
21039: LD_VAR 0 2
21043: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
21044: LD_INT 0
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 302
21061: NOT
21062: IFTRUE 21076
21064: PUSH
21065: LD_VAR 0 2
21069: PPUSH
21070: CALL_OW 302
21074: NOT
21075: OR
21076: IFTRUE 21093
21078: PUSH
21079: LD_VAR 0 2
21083: PPUSH
21084: CALL_OW 313
21088: PUSH
21089: LD_INT 6
21091: EQUAL
21092: OR
21093: IFFALSE 21097
// exit ;
21095: GO 21314
// btype := GetBType ( building ) ;
21097: LD_ADDR_VAR 0 8
21101: PUSH
21102: LD_VAR 0 2
21106: PPUSH
21107: CALL_OW 266
21111: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
21112: LD_VAR 0 8
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 4
21128: PUSH
21129: LD_INT 5
21131: PUSH
21132: LD_INT 3
21134: PUSH
21135: LD_INT 6
21137: PUSH
21138: LD_INT 7
21140: PUSH
21141: LD_INT 8
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: IN
21155: NOT
21156: IFFALSE 21160
// exit ;
21158: GO 21314
// x := GetX ( building ) ;
21160: LD_ADDR_VAR 0 4
21164: PUSH
21165: LD_VAR 0 2
21169: PPUSH
21170: CALL_OW 250
21174: ST_TO_ADDR
// y := GetY ( building ) ;
21175: LD_ADDR_VAR 0 5
21179: PUSH
21180: LD_VAR 0 2
21184: PPUSH
21185: CALL_OW 251
21189: ST_TO_ADDR
// d := GetDir ( building ) ;
21190: LD_ADDR_VAR 0 6
21194: PUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: CALL_OW 254
21204: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
21205: LD_ADDR_VAR 0 7
21209: PUSH
21210: LD_VAR 0 4
21214: PPUSH
21215: LD_VAR 0 6
21219: PPUSH
21220: LD_INT 3
21222: PPUSH
21223: CALL_OW 272
21227: PUSH
21228: LD_VAR 0 5
21232: PPUSH
21233: LD_VAR 0 6
21237: PPUSH
21238: LD_INT 3
21240: PPUSH
21241: CALL_OW 273
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
21250: LD_VAR 0 7
21254: PUSH
21255: LD_INT 1
21257: ARRAY
21258: PPUSH
21259: LD_VAR 0 7
21263: PUSH
21264: LD_INT 2
21266: ARRAY
21267: PPUSH
21268: CALL_OW 488
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21314
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
21277: LD_ADDR_VAR 0 3
21281: PUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: LD_VAR 0 7
21291: PUSH
21292: LD_INT 1
21294: ARRAY
21295: PPUSH
21296: LD_VAR 0 7
21300: PUSH
21301: LD_INT 2
21303: ARRAY
21304: PPUSH
21305: CALL_OW 297
21309: PUSH
21310: LD_INT 4
21312: LESS
21313: ST_TO_ADDR
// end ;
21314: LD_VAR 0 3
21318: RET
// export function PlaceExplosives ( building ) ; begin
21319: LD_INT 0
21321: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
21322: LD_ADDR_EXP 29
21326: PUSH
21327: LD_EXP 29
21331: PPUSH
21332: LD_VAR 0 1
21336: PPUSH
21337: CALL 68261 0 2
21341: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
21342: LD_VAR 0 1
21346: PPUSH
21347: CALL_OW 250
21351: PPUSH
21352: LD_VAR 0 1
21356: PPUSH
21357: CALL_OW 251
21361: PPUSH
21362: LD_STRING PlantBomb
21364: PPUSH
21365: CALL_OW 366
// end ;
21369: LD_VAR 0 2
21373: RET
// export function CreateNature ; var i ; begin
21374: LD_INT 0
21376: PPUSH
21377: PPUSH
// PrepareFrog ;
21378: CALL 64664 0 0
// for i := 1 to 3 do
21382: LD_ADDR_VAR 0 2
21386: PUSH
21387: DOUBLE
21388: LD_INT 1
21390: DEC
21391: ST_TO_ADDR
21392: LD_INT 3
21394: PUSH
21395: FOR_TO
21396: IFFALSE 21415
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
21398: CALL_OW 44
21402: PPUSH
21403: LD_INT 24
21405: PPUSH
21406: LD_INT 0
21408: PPUSH
21409: CALL_OW 49
21413: GO 21395
21415: POP
21416: POP
// end ;
21417: LD_VAR 0 1
21421: RET
// export function MarkBuilding ( building , marker ) ; begin
21422: LD_INT 0
21424: PPUSH
// if marker then
21425: LD_VAR 0 2
21429: IFFALSE 21476
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
21431: LD_VAR 0 1
21435: PPUSH
21436: CALL_OW 250
21440: PPUSH
21441: LD_VAR 0 1
21445: PPUSH
21446: CALL_OW 251
21450: PPUSH
21451: LD_INT 2
21453: PPUSH
21454: LD_INT 3
21456: NEG
21457: PPUSH
21458: CALL_OW 330
// SetBName ( building , target ) ;
21462: LD_VAR 0 1
21466: PPUSH
21467: LD_STRING target
21469: PPUSH
21470: CALL_OW 500
// end else
21474: GO 21515
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 250
21485: PPUSH
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 251
21495: PPUSH
21496: LD_INT 2
21498: PPUSH
21499: CALL_OW 331
// SetBName ( building ,  ) ;
21503: LD_VAR 0 1
21507: PPUSH
21508: LD_STRING 
21510: PPUSH
21511: CALL_OW 500
// end ; end ; end_of_file
21515: LD_VAR 0 3
21519: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
21520: LD_INT 0
21522: PPUSH
// lockerCodeValid := false ;
21523: LD_ADDR_EXP 72
21527: PUSH
21528: LD_INT 0
21530: ST_TO_ADDR
// if not step then
21531: LD_LOC 1
21535: NOT
21536: IFFALSE 21546
// step := 1 ;
21538: LD_ADDR_LOC 1
21542: PUSH
21543: LD_INT 1
21545: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
21546: LD_STRING HEscape
21548: PUSH
21549: LD_LOC 1
21553: STR
21554: PPUSH
21555: CALL_OW 97
21559: PUSH
21560: LD_INT 1
21562: DOUBLE
21563: EQUAL
21564: IFTRUE 21568
21566: GO 21575
21568: POP
// LockerMinigameSearch ; 2 :
21569: CALL 21608 0 0
21573: GO 21591
21575: LD_INT 2
21577: DOUBLE
21578: EQUAL
21579: IFTRUE 21583
21581: GO 21590
21583: POP
// LockerMinigameSetCode ; end ;
21584: CALL 21682 0 0
21588: GO 21591
21590: POP
// if lockerCodeValid then
21591: LD_EXP 72
21595: IFFALSE 21599
// exit ;
21597: GO 21603
// StartLockerMinigame ;
21599: CALL 21520 0 0
// end ;
21603: LD_VAR 0 1
21607: RET
// function LockerMinigameSearch ; begin
21608: LD_INT 0
21610: PPUSH
// if code then
21611: LD_LOC 2
21615: IFFALSE 21631
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
21617: LD_EXP 46
21621: PPUSH
21622: LD_STRING DH-Escape-3-Hint-0
21624: PPUSH
21625: CALL_OW 88
// exit ;
21629: GO 21677
// end ; Randomize ;
21631: CALL_OW 10
// code := rand ( 1 , 5 ) ;
21635: LD_ADDR_LOC 2
21639: PUSH
21640: LD_INT 1
21642: PPUSH
21643: LD_INT 5
21645: PPUSH
21646: CALL_OW 12
21650: ST_TO_ADDR
// step := 2 ;
21651: LD_ADDR_LOC 1
21655: PUSH
21656: LD_INT 2
21658: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
21659: LD_EXP 46
21663: PPUSH
21664: LD_STRING DH-Escape-3-Hint-
21666: PUSH
21667: LD_LOC 2
21671: STR
21672: PPUSH
21673: CALL_OW 88
// end ;
21677: LD_VAR 0 1
21681: RET
// function LockerMinigameSetCode ; begin
21682: LD_INT 0
21684: PPUSH
// if not code then
21685: LD_LOC 2
21689: NOT
21690: IFFALSE 21700
// code := 0 ;
21692: LD_ADDR_LOC 2
21696: PUSH
21697: LD_INT 0
21699: ST_TO_ADDR
// lockerBusy := true ;
21700: LD_ADDR_EXP 73
21704: PUSH
21705: LD_INT 1
21707: ST_TO_ADDR
// InGameOff ;
21708: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
21712: LD_STRING initLockerMinigame("
21714: PUSH
21715: LD_LOC 2
21719: STR
21720: PUSH
21721: LD_STRING ")
21723: STR
21724: PPUSH
21725: CALL_OW 559
// step := 3 ;
21729: LD_ADDR_LOC 1
21733: PUSH
21734: LD_INT 3
21736: ST_TO_ADDR
// repeat wait ( 1 ) ;
21737: LD_INT 1
21739: PPUSH
21740: CALL_OW 67
// until not lockerBusy ;
21744: LD_EXP 73
21748: NOT
21749: IFFALSE 21737
// InGameOn ;
21751: CALL_OW 8
// if not lockerCodeValid then
21755: LD_EXP 72
21759: NOT
21760: IFFALSE 21786
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21762: LD_EXP 46
21766: PPUSH
21767: LD_STRING DH-Escape-3-Fail-
21769: PUSH
21770: LD_INT 1
21772: PPUSH
21773: LD_INT 2
21775: PPUSH
21776: CALL_OW 12
21780: STR
21781: PPUSH
21782: CALL_OW 88
// end ; end_of_file
21786: LD_VAR 0 1
21790: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21791: LD_VAR 0 2
21795: PUSH
21796: LD_INT 102
21798: EQUAL
21799: IFFALSE 21821
// begin lockerBusy := false ;
21801: LD_ADDR_EXP 73
21805: PUSH
21806: LD_INT 0
21808: ST_TO_ADDR
// lockerCodeValid := p3 ;
21809: LD_ADDR_EXP 72
21813: PUSH
21814: LD_VAR 0 3
21818: ST_TO_ADDR
// end else
21819: GO 21875
// if p2 = 103 then
21821: LD_VAR 0 2
21825: PUSH
21826: LD_INT 103
21828: EQUAL
21829: IFFALSE 21841
// begin weatherBusy := false ;
21831: LD_ADDR_EXP 37
21835: PUSH
21836: LD_INT 0
21838: ST_TO_ADDR
// end else
21839: GO 21875
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21841: LD_VAR 0 1
21845: PPUSH
21846: LD_VAR 0 2
21850: PPUSH
21851: LD_VAR 0 3
21855: PPUSH
21856: LD_VAR 0 4
21860: PPUSH
21861: LD_VAR 0 5
21865: PPUSH
21866: LD_VAR 0 6
21870: PPUSH
21871: CALL 73787 0 6
// end ;
21875: PPOPN 6
21877: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21878: LD_STRING killGameMusic();
21880: PPUSH
21881: CALL_OW 559
// PlayOriginalMusic ;
21885: CALL 96075 0 0
// SOS_MapStart ( ) ;
21889: CALL 73674 0 0
// end ; end_of_file
21893: PPOPN 1
21895: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21896: LD_EXP 17
21900: NOT
21901: IFFALSE 21909
21903: PUSH
21904: LD_EXP 71
21908: AND
21909: IFFALSE 22495
21911: GO 21913
21913: DISABLE
21914: LD_INT 0
21916: PPUSH
21917: PPUSH
21918: PPUSH
21919: PPUSH
21920: PPUSH
// begin enable ;
21921: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21922: LD_ADDR_VAR 0 3
21926: PUSH
21927: LD_INT 26
21929: PUSH
21930: LD_INT 27
21932: PUSH
21933: LD_INT 28
21935: PUSH
21936: LD_INT 29
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 31
21950: PUSH
21951: LD_INT 32
21953: PUSH
21954: LD_INT 33
21956: PUSH
21957: LD_INT 34
21959: PUSH
21960: LD_INT 35
21962: PUSH
21963: LD_INT 36
21965: PUSH
21966: LD_INT 37
21968: PUSH
21969: LD_INT 38
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 39
21985: PUSH
21986: LD_INT 40
21988: PUSH
21989: LD_INT 41
21991: PUSH
21992: LD_INT 42
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 43
22003: PUSH
22004: LD_INT 44
22006: PUSH
22007: LD_INT 45
22009: PUSH
22010: LD_INT 46
22012: PUSH
22013: LD_INT 47
22015: PUSH
22016: LD_INT 46
22018: PUSH
22019: LD_INT 45
22021: PUSH
22022: LD_INT 44
22024: PUSH
22025: LD_INT 43
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: ST_TO_ADDR
// for i in ruPatrol do
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: LD_EXP 71
22054: PUSH
22055: FOR_IN
22056: IFFALSE 22493
// begin if not IsOk ( i ) then
22058: LD_VAR 0 1
22062: PPUSH
22063: CALL_OW 302
22067: NOT
22068: IFFALSE 22072
// continue ;
22070: GO 22055
// if Count ( ruKilledHex ) then
22072: LD_EXP 43
22076: PPUSH
22077: CALL 32329 0 1
22081: IFFALSE 22154
// for j in ruKilledHex do
22083: LD_ADDR_VAR 0 2
22087: PUSH
22088: LD_EXP 43
22092: PUSH
22093: FOR_IN
22094: IFFALSE 22152
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
22096: LD_VAR 0 1
22100: PPUSH
22101: LD_VAR 0 2
22105: PUSH
22106: LD_INT 1
22108: ARRAY
22109: PPUSH
22110: LD_VAR 0 2
22114: PUSH
22115: LD_INT 2
22117: ARRAY
22118: PPUSH
22119: CALL_OW 297
22123: PUSH
22124: LD_INT 6
22126: LESS
22127: IFFALSE 22150
// begin Query ( QBody ) ;
22129: LD_STRING QBody
22131: PPUSH
22132: CALL_OW 97
// isAlarm := true ;
22136: LD_ADDR_EXP 17
22140: PUSH
22141: LD_INT 1
22143: ST_TO_ADDR
// exit ;
22144: POP
22145: POP
22146: POP
22147: POP
22148: GO 22495
// end ;
22150: GO 22093
22152: POP
22153: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
22154: LD_ADDR_VAR 0 5
22158: PUSH
22159: LD_INT 22
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 21
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 91
22181: PUSH
22182: LD_VAR 0 1
22186: PUSH
22187: LD_INT 7
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: LIST
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: LIST
22199: PPUSH
22200: CALL_OW 69
22204: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
22205: LD_INT 2
22207: PPUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 292
22217: IFFALSE 22225
22219: PUSH
22220: LD_VAR 0 5
22224: AND
22225: IFFALSE 22379
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
22227: LD_EXP 30
22231: IFFALSE 22253
22233: PUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: LD_EXP 66
22243: PPUSH
22244: CALL_OW 296
22248: PUSH
22249: LD_INT 16
22251: LESS
22252: AND
22253: IFTRUE 22261
22255: PUSH
22256: LD_EXP 38
22260: OR
22261: IFFALSE 22265
// continue ;
22263: GO 22055
// for j in tmp do
22265: LD_ADDR_VAR 0 2
22269: PUSH
22270: LD_VAR 0 5
22274: PUSH
22275: FOR_IN
22276: IFFALSE 22337
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
22278: LD_ADDR_VAR 0 5
22282: PUSH
22283: LD_VAR 0 5
22287: PUSH
22288: LD_INT 22
22290: PUSH
22291: LD_INT 2
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 21
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 91
22310: PUSH
22311: LD_VAR 0 2
22315: PUSH
22316: LD_INT 4
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: LIST
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: PPUSH
22329: CALL_OW 69
22333: UNION
22334: ST_TO_ADDR
22335: GO 22275
22337: POP
22338: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
22339: LD_VAR 0 1
22343: PPUSH
22344: LD_VAR 0 5
22348: PPUSH
22349: LD_VAR 0 1
22353: PPUSH
22354: CALL_OW 74
22358: PPUSH
22359: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
22363: LD_VAR 0 1
22367: PPUSH
22368: LD_VAR 0 5
22372: PPUSH
22373: CALL 22498 0 2
// continue ;
22377: GO 22055
// end ; if HasTask ( i ) then
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 314
22388: IFFALSE 22392
// continue ;
22390: GO 22055
// tag := GetTag ( i ) ;
22392: LD_ADDR_VAR 0 4
22396: PUSH
22397: LD_VAR 0 1
22401: PPUSH
22402: CALL_OW 110
22406: ST_TO_ADDR
// if not tag then
22407: LD_VAR 0 4
22411: NOT
22412: IFFALSE 22425
// begin ComHold ( i ) ;
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 140
// continue ;
22423: GO 22055
// end ; for j := 1 to points [ tag ] do
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: DOUBLE
22431: LD_INT 1
22433: DEC
22434: ST_TO_ADDR
22435: LD_VAR 0 3
22439: PUSH
22440: LD_VAR 0 4
22444: ARRAY
22445: PUSH
22446: FOR_TO
22447: IFFALSE 22489
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
22449: LD_VAR 0 1
22453: PPUSH
22454: LD_VAR 0 3
22458: PUSH
22459: LD_VAR 0 4
22463: ARRAY
22464: PUSH
22465: LD_VAR 0 2
22469: ARRAY
22470: PPUSH
22471: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
22475: LD_VAR 0 1
22479: PPUSH
22480: LD_INT 70
22482: PPUSH
22483: CALL_OW 202
// end ;
22487: GO 22446
22489: POP
22490: POP
// end ;
22491: GO 22055
22493: POP
22494: POP
// end ;
22495: PPOPN 5
22497: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
22502: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
22503: LD_VAR 0 2
22507: PPUSH
22508: LD_INT 23
22510: PUSH
22511: LD_INT 2
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 2
22520: PUSH
22521: LD_INT 25
22523: PUSH
22524: LD_INT 1
22526: PUSH
22527: EMPTY
22528: LIST
22529: LIST
22530: PUSH
22531: LD_INT 25
22533: PUSH
22534: LD_INT 11
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 25
22543: PUSH
22544: LD_INT 34
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 25
22553: PUSH
22554: LD_INT 32
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PPUSH
22572: CALL_OW 72
22576: IFFALSE 22689
// begin blockPatrolThread := true ;
22578: LD_ADDR_EXP 38
22582: PUSH
22583: LD_INT 1
22585: ST_TO_ADDR
// DialogueOn ;
22586: CALL_OW 6
// case GetSex ( guard ) of sex_male :
22590: LD_VAR 0 1
22594: PPUSH
22595: CALL_OW 258
22599: PUSH
22600: LD_INT 1
22602: DOUBLE
22603: EQUAL
22604: IFTRUE 22608
22606: GO 22623
22608: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22609: LD_VAR 0 1
22613: PPUSH
22614: LD_STRING DRum-Fail-3
22616: PPUSH
22617: CALL_OW 88
22621: GO 22647
22623: LD_INT 2
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22646
22631: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
22632: LD_VAR 0 1
22636: PPUSH
22637: LD_STRING DRuf-Fail-3
22639: PPUSH
22640: CALL_OW 88
22644: GO 22647
22646: POP
// DialogueOff ;
22647: CALL_OW 7
// wait ( 0 0$5 ) ;
22651: LD_INT 175
22653: PPUSH
22654: CALL_OW 67
// if IsOk ( guard ) then
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 302
22667: IFFALSE 22679
// isAlarm := true else
22669: LD_ADDR_EXP 17
22673: PUSH
22674: LD_INT 1
22676: ST_TO_ADDR
22677: GO 22687
// blockPatrolThread := false ;
22679: LD_ADDR_EXP 38
22683: PUSH
22684: LD_INT 0
22686: ST_TO_ADDR
// exit ;
22687: GO 23692
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
22689: LD_VAR 0 2
22693: PPUSH
22694: LD_INT 23
22696: PUSH
22697: LD_INT 3
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PPUSH
22704: CALL_OW 72
22708: IFTRUE 22731
22710: PUSH
22711: LD_VAR 0 2
22715: PPUSH
22716: LD_INT 95
22718: PUSH
22719: LD_INT 61
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL_OW 72
22730: OR
22731: IFFALSE 22735
// exit ;
22733: GO 23692
// DialogueOn ;
22735: CALL_OW 6
// blockPatrolThread := true ;
22739: LD_ADDR_EXP 38
22743: PUSH
22744: LD_INT 1
22746: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
22747: LD_VAR 0 1
22751: PPUSH
22752: CALL_OW 87
// if not Heike in units then
22756: LD_EXP 46
22760: PUSH
22761: LD_VAR 0 2
22765: IN
22766: NOT
22767: IFFALSE 23133
// begin case GetSex ( guard ) of sex_male :
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 258
22778: PUSH
22779: LD_INT 1
22781: DOUBLE
22782: EQUAL
22783: IFTRUE 22787
22785: GO 22802
22787: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_STRING DRum-Guard-1
22795: PPUSH
22796: CALL_OW 88
22800: GO 22826
22802: LD_INT 2
22804: DOUBLE
22805: EQUAL
22806: IFTRUE 22810
22808: GO 22825
22810: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22811: LD_VAR 0 1
22815: PPUSH
22816: LD_STRING DRuf-Guard-1
22818: PPUSH
22819: CALL_OW 88
22823: GO 22826
22825: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22826: LD_STRING SurrenderInfoPeople
22828: PPUSH
22829: CALL_OW 97
22833: PUSH
22834: LD_INT 1
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 22951
22842: POP
// begin Query ( CaughtSquadInfo ) ;
22843: LD_STRING CaughtSquadInfo
22845: PPUSH
22846: CALL_OW 97
// for i in units do
22850: LD_ADDR_VAR 0 4
22854: PUSH
22855: LD_VAR 0 2
22859: PUSH
22860: FOR_IN
22861: IFFALSE 22918
// begin if Carry ( i ) then
22863: LD_VAR 0 4
22867: PPUSH
22868: CALL_OW 281
22872: IFFALSE 22889
// SetCargo ( i , mat_cans , 0 ) ;
22874: LD_VAR 0 4
22878: PPUSH
22879: LD_INT 1
22881: PPUSH
22882: LD_INT 0
22884: PPUSH
22885: CALL_OW 290
// SetSide ( i , 5 ) ;
22889: LD_VAR 0 4
22893: PPUSH
22894: LD_INT 5
22896: PPUSH
22897: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22901: LD_VAR 0 4
22905: PPUSH
22906: LD_INT 113
22908: PPUSH
22909: LD_INT 17
22911: PPUSH
22912: CALL_OW 111
// end ;
22916: GO 22860
22918: POP
22919: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22920: LD_VAR 0 1
22924: PPUSH
22925: LD_INT 117
22927: PPUSH
22928: LD_INT 25
22930: PPUSH
22931: CALL_OW 111
// DialogueOff ;
22935: CALL_OW 7
// blockPatrolThread := false ;
22939: LD_ADDR_EXP 38
22943: PUSH
22944: LD_INT 0
22946: ST_TO_ADDR
// exit ;
22947: GO 23692
// end ; 2 :
22949: GO 23133
22951: LD_INT 2
22953: DOUBLE
22954: EQUAL
22955: IFTRUE 22959
22957: GO 23132
22959: POP
// begin DialogueOff ;
22960: CALL_OW 7
// wait ( 0 0$2 ) ;
22964: LD_INT 70
22966: PPUSH
22967: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22971: LD_INT 6
22973: PPUSH
22974: LD_INT 2
22976: PPUSH
22977: LD_INT 2
22979: PPUSH
22980: LD_INT 1
22982: PPUSH
22983: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
22987: LD_VAR 0 1
22991: PPUSH
22992: LD_VAR 0 2
22996: PUSH
22997: LD_INT 1
22999: ARRAY
23000: PPUSH
23001: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23005: LD_VAR 0 1
23009: PPUSH
23010: CALL_OW 258
23014: PUSH
23015: LD_INT 1
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23038
23023: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23024: LD_VAR 0 1
23028: PPUSH
23029: LD_STRING DRum-Fail-3
23031: PPUSH
23032: CALL_OW 88
23036: GO 23062
23038: LD_INT 2
23040: DOUBLE
23041: EQUAL
23042: IFTRUE 23046
23044: GO 23061
23046: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23047: LD_VAR 0 1
23051: PPUSH
23052: LD_STRING DRum-Fail-3
23054: PPUSH
23055: CALL_OW 88
23059: GO 23062
23061: POP
// wait ( 0 0$5 ) ;
23062: LD_INT 175
23064: PPUSH
23065: CALL_OW 67
// if IsOk ( guard ) then
23069: LD_VAR 0 1
23073: PPUSH
23074: CALL_OW 302
23078: IFFALSE 23090
// isAlarm := true else
23080: LD_ADDR_EXP 17
23084: PUSH
23085: LD_INT 1
23087: ST_TO_ADDR
23088: GO 23122
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23090: LD_INT 6
23092: PPUSH
23093: LD_INT 2
23095: PPUSH
23096: LD_INT 0
23098: PPUSH
23099: LD_INT 1
23101: PPUSH
23102: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23106: LD_INT 3
23108: PPUSH
23109: LD_INT 2
23111: PPUSH
23112: LD_INT 0
23114: PPUSH
23115: LD_INT 1
23117: PPUSH
23118: CALL_OW 80
// end ; blockPatrolThread := false ;
23122: LD_ADDR_EXP 38
23126: PUSH
23127: LD_INT 0
23129: ST_TO_ADDR
// end ; end ;
23130: GO 23133
23132: POP
// end ; if Carry ( Heike ) then
23133: LD_EXP 46
23137: PPUSH
23138: CALL_OW 281
23142: IFFALSE 23218
// begin case GetSex ( guard ) of sex_male :
23144: LD_VAR 0 1
23148: PPUSH
23149: CALL_OW 258
23153: PUSH
23154: LD_INT 1
23156: DOUBLE
23157: EQUAL
23158: IFTRUE 23162
23160: GO 23177
23162: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_STRING DRum-FoodFail-1
23170: PPUSH
23171: CALL_OW 88
23175: GO 23201
23177: LD_INT 2
23179: DOUBLE
23180: EQUAL
23181: IFTRUE 23185
23183: GO 23200
23185: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
23186: LD_VAR 0 1
23190: PPUSH
23191: LD_STRING DRuf-FoodFail-2
23193: PPUSH
23194: CALL_OW 88
23198: GO 23201
23200: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
23201: LD_EXP 46
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: LD_INT 0
23211: PPUSH
23212: CALL_OW 290
// end else
23216: GO 23275
// begin case GetSex ( guard ) of sex_male :
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 258
23227: PUSH
23228: LD_INT 1
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23251
23236: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
23237: LD_VAR 0 1
23241: PPUSH
23242: LD_STRING DRum-Seen-1
23244: PPUSH
23245: CALL_OW 88
23249: GO 23275
23251: LD_INT 2
23253: DOUBLE
23254: EQUAL
23255: IFTRUE 23259
23257: GO 23274
23259: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
23260: LD_VAR 0 1
23264: PPUSH
23265: LD_STRING DRuf-Seen-1
23267: PPUSH
23268: CALL_OW 88
23272: GO 23275
23274: POP
// end ; alone := ( units = 1 ) ;
23275: LD_ADDR_VAR 0 5
23279: PUSH
23280: LD_VAR 0 2
23284: PUSH
23285: LD_INT 1
23287: EQUAL
23288: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
23289: LD_STRING SurrenderInfo
23291: PPUSH
23292: CALL_OW 97
23296: PUSH
23297: LD_INT 1
23299: DOUBLE
23300: EQUAL
23301: IFTRUE 23305
23303: GO 23494
23305: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
23306: LD_INT 23
23308: PPUSH
23309: CALL_OW 87
// RemoveUnit ( Heike ) ;
23313: LD_EXP 46
23317: PPUSH
23318: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
23322: LD_EXP 46
23326: PPUSH
23327: LD_INT 23
23329: PPUSH
23330: CALL_OW 52
// if not alone then
23334: LD_VAR 0 5
23338: NOT
23339: IFFALSE 23406
// for i in units diff Heike do
23341: LD_ADDR_VAR 0 4
23345: PUSH
23346: LD_VAR 0 2
23350: PUSH
23351: LD_EXP 46
23355: DIFF
23356: PUSH
23357: FOR_IN
23358: IFFALSE 23404
// begin RemoveUnit ( i ) ;
23360: LD_VAR 0 4
23364: PPUSH
23365: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
23369: LD_VAR 0 4
23373: PPUSH
23374: LD_INT 114
23376: PPUSH
23377: LD_INT 17
23379: PPUSH
23380: LD_INT 10
23382: PPUSH
23383: LD_INT 0
23385: PPUSH
23386: CALL_OW 50
// SetSide ( i , 5 ) ;
23390: LD_VAR 0 4
23394: PPUSH
23395: LD_INT 5
23397: PPUSH
23398: CALL_OW 235
// end ;
23402: GO 23357
23404: POP
23405: POP
// wait ( 0 0$0.3 ) ;
23406: LD_INT 10
23408: PPUSH
23409: CALL_OW 67
// if alone then
23413: LD_VAR 0 5
23417: IFFALSE 23428
// Query ( CaughtInfoAlone ) else
23419: LD_STRING CaughtInfoAlone
23421: PPUSH
23422: CALL_OW 97
23426: GO 23435
// Query ( CaughtInfo ) ;
23428: LD_STRING CaughtInfo
23430: PPUSH
23431: CALL_OW 97
// wait ( 0 0$2 ) ;
23435: LD_INT 70
23437: PPUSH
23438: CALL_OW 67
// StartLockerMinigame ;
23442: CALL 21520 0 0
// Say ( Heike , DH-Reset ) ;
23446: LD_EXP 46
23450: PPUSH
23451: LD_STRING DH-Reset
23453: PPUSH
23454: CALL_OW 88
// DialogueOff ;
23458: CALL_OW 7
// InGameOff ;
23462: CALL_OW 9
// blockPatrolThread := false ;
23466: LD_ADDR_EXP 38
23470: PUSH
23471: LD_INT 0
23473: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
23474: LD_EXP 46
23478: PPUSH
23479: CALL_OW 122
// ComFree ( guard ) ;
23483: LD_VAR 0 1
23487: PPUSH
23488: CALL_OW 139
// end ; 2 :
23492: GO 23684
23494: LD_INT 2
23496: DOUBLE
23497: EQUAL
23498: IFTRUE 23502
23500: GO 23683
23502: POP
// begin Say ( Heike , DH-Guard-2 ) ;
23503: LD_EXP 46
23507: PPUSH
23508: LD_STRING DH-Guard-2
23510: PPUSH
23511: CALL_OW 88
// DialogueOff ;
23515: CALL_OW 7
// wait ( 0 0$2 ) ;
23519: LD_INT 70
23521: PPUSH
23522: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23526: LD_INT 6
23528: PPUSH
23529: LD_INT 2
23531: PPUSH
23532: LD_INT 2
23534: PPUSH
23535: LD_INT 1
23537: PPUSH
23538: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
23542: LD_VAR 0 1
23546: PPUSH
23547: LD_EXP 46
23551: PPUSH
23552: CALL_OW 115
// case GetSex ( guard ) of sex_male :
23556: LD_VAR 0 1
23560: PPUSH
23561: CALL_OW 258
23565: PUSH
23566: LD_INT 1
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23589
23574: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_STRING DRum-Fail-3
23582: PPUSH
23583: CALL_OW 88
23587: GO 23613
23589: LD_INT 2
23591: DOUBLE
23592: EQUAL
23593: IFTRUE 23597
23595: GO 23612
23597: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
23598: LD_VAR 0 1
23602: PPUSH
23603: LD_STRING DRum-Fail-3
23605: PPUSH
23606: CALL_OW 88
23610: GO 23613
23612: POP
// wait ( 0 0$5 ) ;
23613: LD_INT 175
23615: PPUSH
23616: CALL_OW 67
// if IsOk ( guard ) then
23620: LD_VAR 0 1
23624: PPUSH
23625: CALL_OW 302
23629: IFFALSE 23641
// isAlarm := true else
23631: LD_ADDR_EXP 17
23635: PUSH
23636: LD_INT 1
23638: ST_TO_ADDR
23639: GO 23673
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
23641: LD_INT 6
23643: PPUSH
23644: LD_INT 2
23646: PPUSH
23647: LD_INT 0
23649: PPUSH
23650: LD_INT 1
23652: PPUSH
23653: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
23657: LD_INT 3
23659: PPUSH
23660: LD_INT 2
23662: PPUSH
23663: LD_INT 0
23665: PPUSH
23666: LD_INT 1
23668: PPUSH
23669: CALL_OW 80
// end ; blockPatrolThread := false ;
23673: LD_ADDR_EXP 38
23677: PUSH
23678: LD_INT 0
23680: ST_TO_ADDR
// end ; end ;
23681: GO 23684
23683: POP
// blockPatrolThread := false ;
23684: LD_ADDR_EXP 38
23688: PUSH
23689: LD_INT 0
23691: ST_TO_ADDR
// end ;
23692: LD_VAR 0 3
23696: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
23697: LD_EXP 14
23701: PPUSH
23702: LD_INT 22
23704: PUSH
23705: LD_INT 5
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 3
23714: PUSH
23715: LD_INT 101
23717: PUSH
23718: LD_INT 6
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 92
23731: PUSH
23732: LD_INT 113
23734: PUSH
23735: LD_INT 16
23737: PUSH
23738: LD_INT 12
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: PUSH
23747: LD_INT 91
23749: PUSH
23750: LD_EXP 46
23754: PUSH
23755: LD_INT 6
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: LIST
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 72
23773: IFFALSE 23782
23775: PUSH
23776: LD_EXP 30
23780: NOT
23781: AND
23782: IFFALSE 23887
23784: GO 23786
23786: DISABLE
23787: LD_INT 0
23789: PPUSH
// begin enable ;
23790: ENABLE
// DialogueOn ;
23791: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23795: LD_EXP 46
23799: PPUSH
23800: LD_STRING DH-Join-
23802: PUSH
23803: LD_INT 1
23805: PPUSH
23806: LD_INT 3
23808: PPUSH
23809: CALL_OW 12
23813: STR
23814: PPUSH
23815: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23819: LD_ADDR_VAR 0 1
23823: PUSH
23824: LD_EXP 14
23828: PPUSH
23829: LD_INT 22
23831: PUSH
23832: LD_INT 5
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 91
23841: PUSH
23842: LD_EXP 46
23846: PUSH
23847: LD_INT 10
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 72
23863: PUSH
23864: FOR_IN
23865: IFFALSE 23881
// SetSide ( i , 2 ) ;
23867: LD_VAR 0 1
23871: PPUSH
23872: LD_INT 2
23874: PPUSH
23875: CALL_OW 235
23879: GO 23864
23881: POP
23882: POP
// DialogueOff ;
23883: CALL_OW 7
// end ; end_of_file
23887: PPOPN 1
23889: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23890: LD_EXP 17
23894: IFFALSE 23902
23896: PUSH
23897: LD_EXP 5
23901: AND
23902: IFFALSE 24203
23904: GO 23906
23906: DISABLE
23907: LD_INT 0
23909: PPUSH
23910: PPUSH
23911: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23912: LD_INT 1
23914: NEG
23915: PPUSH
23916: LD_INT 1
23918: NEG
23919: PPUSH
23920: LD_STRING alarm
23922: PPUSH
23923: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23927: LD_INT 3
23929: PPUSH
23930: LD_INT 2
23932: PPUSH
23933: LD_INT 2
23935: PPUSH
23936: LD_INT 1
23938: PPUSH
23939: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23943: LD_INT 6
23945: PPUSH
23946: LD_INT 2
23948: PPUSH
23949: LD_INT 2
23951: PPUSH
23952: LD_INT 1
23954: PPUSH
23955: CALL_OW 80
// DialogueOn ;
23959: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
23963: LD_EXP 46
23967: PPUSH
23968: LD_STRING DH-Alarm-1
23970: PPUSH
23971: CALL_OW 88
// DialogueOff ;
23975: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
23979: LD_ADDR_VAR 0 2
23983: PUSH
23984: LD_INT 107
23986: PUSH
23987: LD_INT 39
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 143
23996: PUSH
23997: LD_INT 33
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 180
24006: PUSH
24007: LD_INT 115
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 96
24016: PUSH
24017: LD_INT 90
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 59
24026: PUSH
24027: LD_INT 52
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 16
24036: PUSH
24037: LD_INT 15
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 90
24046: PUSH
24047: LD_INT 120
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: LD_INT 22
24070: PUSH
24071: LD_INT 6
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 25
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: EMPTY
24089: LIST
24090: LIST
24091: PPUSH
24092: CALL_OW 69
24096: ST_TO_ADDR
// for i in tmp do
24097: LD_ADDR_VAR 0 1
24101: PUSH
24102: LD_VAR 0 3
24106: PUSH
24107: FOR_IN
24108: IFFALSE 24176
// begin ComExit ( i ) ;
24110: LD_VAR 0 1
24114: PPUSH
24115: CALL 68659 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
24119: LD_VAR 0 1
24123: PPUSH
24124: LD_VAR 0 2
24128: PUSH
24129: LD_VAR 0 1
24133: PUSH
24134: LD_INT 7
24136: MOD
24137: PUSH
24138: LD_INT 1
24140: PLUS
24141: ARRAY
24142: PUSH
24143: LD_INT 1
24145: ARRAY
24146: PPUSH
24147: LD_VAR 0 2
24151: PUSH
24152: LD_VAR 0 1
24156: PUSH
24157: LD_INT 7
24159: MOD
24160: PUSH
24161: LD_INT 1
24163: PLUS
24164: ARRAY
24165: PUSH
24166: LD_INT 2
24168: ARRAY
24169: PPUSH
24170: CALL_OW 174
// end ;
24174: GO 24107
24176: POP
24177: POP
// Explode ;
24178: CALL 24206 0 0
// wait ( 0 0$45 ) ;
24182: LD_INT 1575
24184: PPUSH
24185: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
24189: LD_VAR 0 3
24193: PPUSH
24194: LD_EXP 46
24198: PPUSH
24199: CALL_OW 175
// end ;
24203: PPOPN 3
24205: END
// export function Explode ; var i , x , y , j ; begin
24206: LD_INT 0
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
// if hasExplosionsInFactory then
24213: LD_EXP 7
24217: IFFALSE 24237
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
24219: LD_ADDR_EXP 29
24223: PUSH
24224: LD_EXP 29
24228: PPUSH
24229: LD_INT 61
24231: PPUSH
24232: CALL 68261 0 2
24236: ST_TO_ADDR
// if explosivePlantedList then
24237: LD_EXP 29
24241: IFFALSE 24389
// begin for i in explosivePlantedList do
24243: LD_ADDR_VAR 0 2
24247: PUSH
24248: LD_EXP 29
24252: PUSH
24253: FOR_IN
24254: IFFALSE 24357
// begin x := GetX ( i ) ;
24256: LD_ADDR_VAR 0 3
24260: PUSH
24261: LD_VAR 0 2
24265: PPUSH
24266: CALL_OW 250
24270: ST_TO_ADDR
// y := GetY ( i ) ;
24271: LD_ADDR_VAR 0 4
24275: PUSH
24276: LD_VAR 0 2
24280: PPUSH
24281: CALL_OW 251
24285: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
24286: LD_ADDR_VAR 0 5
24290: PUSH
24291: LD_INT 1
24293: PUSH
24294: LD_INT 3
24296: PUSH
24297: LD_INT 5
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: LIST
24304: PUSH
24305: FOR_IN
24306: IFFALSE 24353
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
24308: LD_VAR 0 3
24312: PPUSH
24313: LD_VAR 0 5
24317: PPUSH
24318: LD_INT 2
24320: PPUSH
24321: CALL_OW 272
24325: PPUSH
24326: LD_VAR 0 4
24330: PPUSH
24331: LD_VAR 0 5
24335: PPUSH
24336: LD_INT 2
24338: PPUSH
24339: CALL_OW 273
24343: PPUSH
24344: LD_INT 1
24346: PPUSH
24347: CALL_OW 453
24351: GO 24305
24353: POP
24354: POP
// end ;
24355: GO 24253
24357: POP
24358: POP
// Say ( Heike , DH-End-2 ) ;
24359: LD_EXP 46
24363: PPUSH
24364: LD_STRING DH-End-2
24366: PPUSH
24367: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
24371: LD_INT 175
24373: PUSH
24374: LD_EXP 29
24378: PPUSH
24379: CALL 32329 0 1
24383: MUL
24384: PPUSH
24385: CALL_OW 67
// end ; if not isAlarm then
24389: LD_EXP 17
24393: NOT
24394: IFFALSE 24404
// isAlarm := true ;
24396: LD_ADDR_EXP 17
24400: PUSH
24401: LD_INT 1
24403: ST_TO_ADDR
// end ;
24404: LD_VAR 0 1
24408: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
24409: LD_INT 22
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: LD_INT 2
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: PUSH
24432: LD_INT 101
24434: PUSH
24435: LD_INT 3
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 101
24444: PUSH
24445: LD_INT 6
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: PPUSH
24462: CALL_OW 69
24466: IFFALSE 24479
24468: GO 24470
24470: DISABLE
// isAlarm := true ; end_of_file
24471: LD_ADDR_EXP 17
24475: PUSH
24476: LD_INT 1
24478: ST_TO_ADDR
24479: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
24480: LD_EXP 14
24484: PPUSH
24485: LD_INT 22
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 72
24499: PUSH
24500: LD_INT 3
24502: GREATER
24503: IFFALSE 24512
24505: PUSH
24506: LD_EXP 17
24510: NOT
24511: AND
24512: IFFALSE 28585
24514: GO 24516
24516: DISABLE
24517: LD_INT 0
24519: PPUSH
24520: PPUSH
24521: PPUSH
24522: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
24523: LD_EXP 66
24527: PPUSH
24528: LD_INT 155
24530: PPUSH
24531: LD_INT 68
24533: PPUSH
24534: LD_INT 0
24536: PPUSH
24537: CALL_OW 48
// wait ( 0 0$1 ) ;
24541: LD_INT 35
24543: PPUSH
24544: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24548: LD_INT 35
24550: PPUSH
24551: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24555: LD_EXP 66
24559: PPUSH
24560: CALL_OW 314
24564: NOT
24565: IFFALSE 24581
// ComMoveUnit ( ruDisturb , Heike ) ;
24567: LD_EXP 66
24571: PPUSH
24572: LD_EXP 46
24576: PPUSH
24577: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24581: LD_EXP 46
24585: PPUSH
24586: LD_EXP 66
24590: PPUSH
24591: CALL_OW 296
24595: PUSH
24596: LD_INT 6
24598: LESS
24599: IFFALSE 24612
24601: PUSH
24602: LD_EXP 66
24606: PPUSH
24607: CALL_OW 302
24611: AND
24612: IFFALSE 24548
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24614: LD_EXP 46
24618: PPUSH
24619: CALL_OW 257
24623: PUSH
24624: LD_INT 33
24626: NONEQUAL
24627: IFTRUE 24721
24629: PUSH
24630: LD_EXP 14
24634: PPUSH
24635: LD_INT 22
24637: PUSH
24638: LD_INT 2
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 91
24647: PUSH
24648: LD_EXP 66
24652: PUSH
24653: LD_INT 8
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 25
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 25
24676: PUSH
24677: LD_INT 11
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 25
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 25
24696: PUSH
24697: LD_INT 34
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: PPUSH
24716: CALL_OW 72
24720: OR
24721: IFFALSE 24731
// isAlarm := true ;
24723: LD_ADDR_EXP 17
24727: PUSH
24728: LD_INT 1
24730: ST_TO_ADDR
// if isAlarm then
24731: LD_EXP 17
24735: IFFALSE 24739
// exit ;
24737: GO 28585
// DialogueOn ;
24739: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24743: LD_EXP 66
24747: PPUSH
24748: LD_STRING DMcn-Interrupt-1
24750: PPUSH
24751: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24755: LD_EXP 66
24759: PPUSH
24760: LD_STRING DMcn-Interrupt-2
24762: PPUSH
24763: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
24767: LD_EXP 66
24771: PPUSH
24772: LD_STRING DMcn-Interrupt-3
24774: PPUSH
24775: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
24779: LD_EXP 46
24783: PPUSH
24784: LD_STRING DH-Interrupt-a-4
24786: PPUSH
24787: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24791: LD_EXP 66
24795: PPUSH
24796: LD_STRING DMcn-Interrupt-a-5
24798: PPUSH
24799: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24803: LD_EXP 46
24807: PPUSH
24808: LD_STRING DH-Interrupt-a-6
24810: PPUSH
24811: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24815: LD_EXP 66
24819: PPUSH
24820: LD_STRING DMcn-Interrupt-a-7
24822: PPUSH
24823: CALL_OW 88
// DialogueOff ;
24827: CALL_OW 7
// hasMuchin := true ;
24831: LD_ADDR_EXP 30
24835: PUSH
24836: LD_INT 1
24838: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24839: LD_STRING MuchinInfo
24841: PPUSH
24842: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24846: LD_STRING M2a
24848: PPUSH
24849: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24853: LD_INT 105
24855: PPUSH
24856: LD_INT 55
24858: PPUSH
24859: CALL_OW 428
24863: PPUSH
24864: LD_INT 2
24866: PPUSH
24867: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24871: LD_INT 115
24873: PPUSH
24874: LD_INT 65
24876: PPUSH
24877: CALL_OW 428
24881: PPUSH
24882: LD_INT 2
24884: PPUSH
24885: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24889: LD_INT 109
24891: PPUSH
24892: LD_INT 59
24894: PPUSH
24895: LD_INT 2
24897: PPUSH
24898: LD_INT 10
24900: NEG
24901: PPUSH
24902: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24906: LD_INT 109
24908: PPUSH
24909: LD_INT 59
24911: PPUSH
24912: CALL_OW 84
// wait ( 0 0$2 ) ;
24916: LD_INT 70
24918: PPUSH
24919: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24923: LD_INT 109
24925: PPUSH
24926: LD_INT 59
24928: PPUSH
24929: LD_INT 2
24931: PPUSH
24932: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24936: LD_INT 35
24938: PPUSH
24939: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24943: LD_EXP 66
24947: PPUSH
24948: LD_EXP 46
24952: PPUSH
24953: CALL_OW 296
24957: PUSH
24958: LD_INT 6
24960: GREATER
24961: IFFALSE 24977
// ComMoveUnit ( ruDisturb , Heike ) ;
24963: LD_EXP 66
24967: PPUSH
24968: LD_EXP 46
24972: PPUSH
24973: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24977: LD_EXP 46
24981: PPUSH
24982: CALL_OW 257
24986: PUSH
24987: LD_INT 33
24989: NONEQUAL
24990: IFTRUE 25084
24992: PUSH
24993: LD_EXP 14
24997: PPUSH
24998: LD_INT 22
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 91
25010: PUSH
25011: LD_EXP 66
25015: PUSH
25016: LD_INT 8
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 2
25026: PUSH
25027: LD_INT 25
25029: PUSH
25030: LD_INT 1
25032: PUSH
25033: EMPTY
25034: LIST
25035: LIST
25036: PUSH
25037: LD_INT 25
25039: PUSH
25040: LD_INT 11
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 25
25049: PUSH
25050: LD_INT 32
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 25
25059: PUSH
25060: LD_INT 34
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: LIST
25078: PPUSH
25079: CALL_OW 72
25083: OR
25084: IFFALSE 25096
// begin isAlarm := true ;
25086: LD_ADDR_EXP 17
25090: PUSH
25091: LD_INT 1
25093: ST_TO_ADDR
// exit ;
25094: GO 28585
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
25096: LD_INT 105
25098: PPUSH
25099: LD_INT 55
25101: PPUSH
25102: CALL_OW 428
25106: NOT
25107: IFTRUE 25122
25109: PUSH
25110: LD_INT 115
25112: PPUSH
25113: LD_INT 65
25115: PPUSH
25116: CALL_OW 428
25120: NOT
25121: OR
25122: IFFALSE 25134
// begin isAlarm := true ;
25124: LD_ADDR_EXP 17
25128: PUSH
25129: LD_INT 1
25131: ST_TO_ADDR
// exit ;
25132: GO 28585
// end ; until not BuildingsInProgress ( 2 ) ;
25134: LD_INT 2
25136: PPUSH
25137: CALL_OW 345
25141: NOT
25142: IFFALSE 24936
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
25144: LD_INT 105
25146: PPUSH
25147: LD_INT 55
25149: PPUSH
25150: CALL_OW 428
25154: PPUSH
25155: LD_INT 3
25157: PPUSH
25158: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
25162: LD_INT 115
25164: PPUSH
25165: LD_INT 65
25167: PPUSH
25168: CALL_OW 428
25172: PPUSH
25173: LD_INT 3
25175: PPUSH
25176: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
25180: LD_STRING M2a-out
25182: PPUSH
25183: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25187: LD_EXP 66
25191: PPUSH
25192: LD_INT 2
25194: PPUSH
25195: CALL_OW 120
// wait ( 0 0$3 ) ;
25199: LD_INT 105
25201: PPUSH
25202: CALL_OW 67
// hasMuchin := false ;
25206: LD_ADDR_EXP 30
25210: PUSH
25211: LD_INT 0
25213: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25214: LD_INT 4200
25216: PPUSH
25217: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25221: LD_INT 35
25223: PPUSH
25224: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25228: LD_EXP 66
25232: PPUSH
25233: CALL_OW 314
25237: NOT
25238: IFFALSE 25254
// ComMoveUnit ( ruDisturb , Heike ) ;
25240: LD_EXP 66
25244: PPUSH
25245: LD_EXP 46
25249: PPUSH
25250: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
25254: LD_EXP 46
25258: PPUSH
25259: LD_EXP 66
25263: PPUSH
25264: CALL_OW 296
25268: PUSH
25269: LD_INT 6
25271: LESS
25272: IFFALSE 25285
25274: PUSH
25275: LD_EXP 66
25279: PPUSH
25280: CALL_OW 302
25284: AND
25285: IFFALSE 25221
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25287: LD_EXP 46
25291: PPUSH
25292: CALL_OW 257
25296: PUSH
25297: LD_INT 33
25299: NONEQUAL
25300: IFTRUE 25394
25302: PUSH
25303: LD_EXP 14
25307: PPUSH
25308: LD_INT 22
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 91
25320: PUSH
25321: LD_EXP 66
25325: PUSH
25326: LD_INT 8
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 2
25336: PUSH
25337: LD_INT 25
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 25
25349: PUSH
25350: LD_INT 11
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 25
25359: PUSH
25360: LD_INT 32
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 25
25369: PUSH
25370: LD_INT 34
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: PPUSH
25389: CALL_OW 72
25393: OR
25394: IFFALSE 25404
// isAlarm := true ;
25396: LD_ADDR_EXP 17
25400: PUSH
25401: LD_INT 1
25403: ST_TO_ADDR
// if isAlarm then
25404: LD_EXP 17
25408: IFFALSE 25412
// exit ;
25410: GO 28585
// DialogueOn ;
25412: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
25416: LD_EXP 66
25420: PPUSH
25421: LD_STRING DMcn-Interrupt-1
25423: PPUSH
25424: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
25428: LD_EXP 66
25432: PPUSH
25433: LD_STRING DMcn-Interrupt-2
25435: PPUSH
25436: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
25440: LD_INT 176
25442: PPUSH
25443: LD_INT 54
25445: PPUSH
25446: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
25450: LD_INT 176
25452: PPUSH
25453: LD_INT 54
25455: PPUSH
25456: LD_INT 2
25458: PPUSH
25459: LD_INT 6
25461: NEG
25462: PPUSH
25463: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
25467: LD_INT 10
25469: PPUSH
25470: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
25474: LD_EXP 66
25478: PPUSH
25479: LD_STRING DMcn-Interrupt-b-3
25481: PPUSH
25482: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
25486: LD_EXP 46
25490: PPUSH
25491: LD_STRING DH-Interrupt-b-4
25493: PPUSH
25494: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
25498: LD_EXP 66
25502: PPUSH
25503: LD_STRING DMcn-Interrupt-b-5
25505: PPUSH
25506: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
25510: LD_EXP 46
25514: PPUSH
25515: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
25519: LD_INT 176
25521: PPUSH
25522: LD_INT 54
25524: PPUSH
25525: LD_INT 2
25527: PPUSH
25528: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
25532: LD_EXP 66
25536: PPUSH
25537: LD_STRING DMcn-Interrupt-b-6
25539: PPUSH
25540: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
25544: LD_EXP 46
25548: PPUSH
25549: LD_STRING DH-Interrupt-b-7
25551: PPUSH
25552: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
25556: LD_EXP 66
25560: PPUSH
25561: LD_STRING DMcn-Interrupt-b-8
25563: PPUSH
25564: CALL_OW 88
// DialogueOff ;
25568: CALL_OW 7
// Query ( MuchinInfo ) ;
25572: LD_STRING MuchinInfo
25574: PPUSH
25575: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
25579: LD_STRING M2b
25581: PPUSH
25582: CALL_OW 337
// hasMuchin := true ;
25586: LD_ADDR_EXP 30
25590: PUSH
25591: LD_INT 1
25593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25594: LD_INT 35
25596: PPUSH
25597: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
25601: LD_EXP 66
25605: PPUSH
25606: LD_EXP 46
25610: PPUSH
25611: CALL_OW 296
25615: PUSH
25616: LD_INT 6
25618: GREATER
25619: IFFALSE 25635
// ComMoveUnit ( ruDisturb , Heike ) ;
25621: LD_EXP 66
25625: PPUSH
25626: LD_EXP 46
25630: PPUSH
25631: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25635: LD_EXP 46
25639: PPUSH
25640: CALL_OW 257
25644: PUSH
25645: LD_INT 33
25647: NONEQUAL
25648: IFTRUE 25742
25650: PUSH
25651: LD_EXP 14
25655: PPUSH
25656: LD_INT 22
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 91
25668: PUSH
25669: LD_EXP 66
25673: PUSH
25674: LD_INT 8
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: LD_INT 25
25687: PUSH
25688: LD_INT 1
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 25
25697: PUSH
25698: LD_INT 11
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 25
25707: PUSH
25708: LD_INT 32
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 25
25717: PUSH
25718: LD_INT 34
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: PPUSH
25737: CALL_OW 72
25741: OR
25742: IFFALSE 25754
// begin isAlarm := true ;
25744: LD_ADDR_EXP 17
25748: PUSH
25749: LD_INT 1
25751: ST_TO_ADDR
// exit ;
25752: GO 28585
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
25754: LD_EXP 46
25758: PPUSH
25759: LD_INT 61
25761: PPUSH
25762: CALL_OW 296
25766: PUSH
25767: LD_INT 4
25769: LESS
25770: IFFALSE 25594
// InGameOn ;
25772: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
25776: LD_INT 173
25778: PPUSH
25779: LD_INT 54
25781: PPUSH
25782: LD_INT 2
25784: PPUSH
25785: LD_INT 8
25787: NEG
25788: PPUSH
25789: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25793: LD_EXP 46
25797: PPUSH
25798: LD_INT 3
25800: PPUSH
25801: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25805: LD_EXP 46
25809: PPUSH
25810: LD_INT 61
25812: PPUSH
25813: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25817: LD_EXP 66
25821: PPUSH
25822: LD_INT 61
25824: PPUSH
25825: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25829: LD_EXP 53
25833: PUSH
25834: LD_EXP 14
25838: IN
25839: IFFALSE 25859
25841: PUSH
25842: LD_EXP 53
25846: PPUSH
25847: LD_INT 61
25849: PPUSH
25850: CALL_OW 296
25854: PUSH
25855: LD_INT 12
25857: LESS
25858: AND
25859: IFFALSE 25903
// begin SetSide ( Markov , 3 ) ;
25861: LD_EXP 53
25865: PPUSH
25866: LD_INT 3
25868: PPUSH
25869: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25873: LD_EXP 53
25877: PPUSH
25878: LD_INT 61
25880: PPUSH
25881: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25885: LD_INT 35
25887: PPUSH
25888: CALL_OW 67
// until IsInUnit ( Markov ) ;
25892: LD_EXP 53
25896: PPUSH
25897: CALL_OW 310
25901: IFFALSE 25885
// end ; repeat wait ( 0 0$1 ) ;
25903: LD_INT 35
25905: PPUSH
25906: CALL_OW 67
// until IsInUnit ( Heike ) ;
25910: LD_EXP 46
25914: PPUSH
25915: CALL_OW 310
25919: IFFALSE 25903
// SetClass ( Heike , class_mechanic ) ;
25921: LD_EXP 46
25925: PPUSH
25926: LD_INT 3
25928: PPUSH
25929: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25933: LD_INT 61
25935: PPUSH
25936: LD_INT 21
25938: PPUSH
25939: LD_INT 3
25941: PPUSH
25942: LD_INT 3
25944: PPUSH
25945: LD_INT 43
25947: PPUSH
25948: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25952: LD_EXP 31
25956: IFFALSE 25987
25958: PUSH
25959: LD_EXP 53
25963: PUSH
25964: LD_EXP 14
25968: IN
25969: IFTRUE 25986
25971: PUSH
25972: LD_EXP 53
25976: PPUSH
25977: CALL_OW 310
25981: PUSH
25982: LD_INT 61
25984: EQUAL
25985: OR
25986: AND
25987: IFFALSE 26477
// begin wait ( 0 0$5 ) ;
25989: LD_INT 175
25991: PPUSH
25992: CALL_OW 67
// SetSide ( Heike , 2 ) ;
25996: LD_EXP 46
26000: PPUSH
26001: LD_INT 2
26003: PPUSH
26004: CALL_OW 235
// SetSide ( Markov , 2 ) ;
26008: LD_EXP 53
26012: PPUSH
26013: LD_INT 2
26015: PPUSH
26016: CALL_OW 235
// if not Markov in heikeSquad then
26020: LD_EXP 53
26024: PUSH
26025: LD_EXP 14
26029: IN
26030: NOT
26031: IFFALSE 26053
// heikeSquad := Join ( heikeSquad , Markov ) ;
26033: LD_ADDR_EXP 14
26037: PUSH
26038: LD_EXP 14
26042: PPUSH
26043: LD_EXP 53
26047: PPUSH
26048: CALL 68261 0 2
26052: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
26053: LD_EXP 53
26057: PPUSH
26058: LD_STRING DMar-Factory-1
26060: PPUSH
26061: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
26065: LD_INT 61
26067: PPUSH
26068: LD_INT 99
26070: PPUSH
26071: CALL_OW 329
// game_speed := 4 ;
26075: LD_ADDR_OWVAR 65
26079: PUSH
26080: LD_INT 4
26082: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
26083: LD_EXP 66
26087: PPUSH
26088: CALL_OW 122
// ComExitBuilding ( Markov ) ;
26092: LD_EXP 53
26096: PPUSH
26097: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
26101: LD_EXP 66
26105: PPUSH
26106: LD_INT 171
26108: PPUSH
26109: LD_INT 51
26111: PPUSH
26112: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
26116: LD_EXP 53
26120: PPUSH
26121: LD_INT 167
26123: PPUSH
26124: LD_INT 50
26126: PPUSH
26127: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
26131: LD_EXP 53
26135: PPUSH
26136: LD_EXP 66
26140: PPUSH
26141: CALL_OW 179
// wait ( 0 0$5 ) ;
26145: LD_INT 175
26147: PPUSH
26148: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
26152: LD_EXP 53
26156: PPUSH
26157: LD_STRING DMar-Factory-2
26159: PPUSH
26160: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
26164: LD_ADDR_VAR 0 2
26168: PUSH
26169: LD_INT 22
26171: PUSH
26172: LD_INT 3
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 33
26181: PUSH
26182: LD_INT 3
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PPUSH
26193: CALL_OW 69
26197: PUSH
26198: LD_INT 1
26200: ARRAY
26201: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
26202: LD_EXP 66
26206: PPUSH
26207: LD_VAR 0 2
26211: PPUSH
26212: CALL_OW 119
// game_speed := 4 ;
26216: LD_ADDR_OWVAR 65
26220: PUSH
26221: LD_INT 4
26223: ST_TO_ADDR
// async ;
26224: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
26225: LD_EXP 66
26229: PPUSH
26230: LD_STRING DMcn-Factory-3
26232: PPUSH
26233: CALL_OW 88
// wait ( 0 0$0.9 ) ;
26237: LD_INT 32
26239: PPUSH
26240: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
26244: LD_VAR 0 2
26248: PPUSH
26249: LD_EXP 66
26253: PPUSH
26254: CALL_OW 115
// sync ;
26258: SYNC
// wait ( 0 0$1 ) ;
26259: LD_INT 35
26261: PPUSH
26262: CALL_OW 67
// KillUnit ( ruDisturb ) ;
26266: LD_EXP 66
26270: PPUSH
26271: CALL_OW 66
// SetSide ( veh , 7 ) ;
26275: LD_VAR 0 2
26279: PPUSH
26280: LD_INT 7
26282: PPUSH
26283: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
26287: LD_VAR 0 2
26291: PPUSH
26292: LD_INT 84
26294: PPUSH
26295: LD_INT 38
26297: PPUSH
26298: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
26302: LD_EXP 67
26306: PUSH
26307: LD_INT 1
26309: ARRAY
26310: PPUSH
26311: CALL_OW 258
26315: PUSH
26316: LD_INT 1
26318: EQUAL
26319: IFFALSE 26339
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
26321: LD_EXP 67
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PPUSH
26330: LD_STRING DRum-Factory-4
26332: PPUSH
26333: CALL_OW 88
26337: GO 26355
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
26339: LD_EXP 67
26343: PUSH
26344: LD_INT 1
26346: ARRAY
26347: PPUSH
26348: LD_STRING DRuf-Factory-4
26350: PPUSH
26351: CALL_OW 88
// wait ( 0 0$1 ) ;
26355: LD_INT 35
26357: PPUSH
26358: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
26362: LD_EXP 67
26366: PPUSH
26367: LD_INT 26
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 72
26381: PUSH
26382: LD_INT 1
26384: ARRAY
26385: PPUSH
26386: LD_STRING DRum-Factory-6
26388: PPUSH
26389: CALL_OW 88
// wait ( 0 0$2 ) ;
26393: LD_INT 70
26395: PPUSH
26396: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
26400: LD_EXP 46
26404: PPUSH
26405: LD_INT 33
26407: PPUSH
26408: CALL_OW 336
// ComExitBuilding ( Heike ) ;
26412: LD_EXP 46
26416: PPUSH
26417: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26421: LD_EXP 46
26425: PPUSH
26426: LD_INT 168
26428: PPUSH
26429: LD_INT 54
26431: PPUSH
26432: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26436: LD_INT 173
26438: PPUSH
26439: LD_INT 54
26441: PPUSH
26442: LD_INT 2
26444: PPUSH
26445: CALL_OW 331
// InGameOff ;
26449: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
26453: LD_STRING M2b-out
26455: PPUSH
26456: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
26460: LD_STRING ACH_TOY
26462: PPUSH
26463: CALL_OW 543
// hasMuchin := false ;
26467: LD_ADDR_EXP 30
26471: PUSH
26472: LD_INT 0
26474: ST_TO_ADDR
// exit ;
26475: GO 28585
// end ; wait ( 0 0$5 ) ;
26477: LD_INT 175
26479: PPUSH
26480: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
26484: LD_INT 61
26486: PPUSH
26487: LD_INT 99
26489: PPUSH
26490: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
26494: LD_EXP 53
26498: PUSH
26499: LD_EXP 14
26503: IN
26504: IFFALSE 26521
26506: PUSH
26507: LD_EXP 53
26511: PPUSH
26512: CALL_OW 255
26516: PUSH
26517: LD_INT 3
26519: EQUAL
26520: AND
26521: IFFALSE 26544
// begin SetSide ( Markov , 2 ) ;
26523: LD_EXP 53
26527: PPUSH
26528: LD_INT 2
26530: PPUSH
26531: CALL_OW 235
// ComExitBuilding ( Markov ) ;
26535: LD_EXP 53
26539: PPUSH
26540: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
26544: LD_EXP 46
26548: PPUSH
26549: LD_INT 2
26551: PPUSH
26552: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
26556: LD_EXP 46
26560: PPUSH
26561: LD_INT 33
26563: PPUSH
26564: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
26568: LD_EXP 66
26572: PPUSH
26573: CALL_OW 122
// ComExitBuilding ( Heike ) ;
26577: LD_EXP 46
26581: PPUSH
26582: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
26586: LD_EXP 46
26590: PPUSH
26591: LD_INT 168
26593: PPUSH
26594: LD_INT 54
26596: PPUSH
26597: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
26601: LD_INT 173
26603: PPUSH
26604: LD_INT 54
26606: PPUSH
26607: LD_INT 2
26609: PPUSH
26610: CALL_OW 331
// InGameOff ;
26614: CALL_OW 9
// wait ( 3 ) ;
26618: LD_INT 3
26620: PPUSH
26621: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
26625: LD_EXP 66
26629: PPUSH
26630: LD_INT 2
26632: PPUSH
26633: CALL_OW 120
// wait ( 0 0$3 ) ;
26637: LD_INT 105
26639: PPUSH
26640: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
26644: LD_STRING M2b-out
26646: PPUSH
26647: CALL_OW 337
// hasMuchin := false ;
26651: LD_ADDR_EXP 30
26655: PUSH
26656: LD_INT 0
26658: ST_TO_ADDR
// wait ( 2 2$00 ) ;
26659: LD_INT 4200
26661: PPUSH
26662: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
26666: LD_INT 35
26668: PPUSH
26669: CALL_OW 67
// if not HasTask ( ruDisturb ) then
26673: LD_EXP 66
26677: PPUSH
26678: CALL_OW 314
26682: NOT
26683: IFFALSE 26699
// ComMoveUnit ( ruDisturb , Heike ) ;
26685: LD_EXP 66
26689: PPUSH
26690: LD_EXP 46
26694: PPUSH
26695: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
26699: LD_EXP 46
26703: PPUSH
26704: LD_EXP 66
26708: PPUSH
26709: CALL_OW 296
26713: PUSH
26714: LD_INT 2
26716: LESS
26717: IFFALSE 26730
26719: PUSH
26720: LD_EXP 66
26724: PPUSH
26725: CALL_OW 302
26729: AND
26730: IFFALSE 26666
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26732: LD_EXP 46
26736: PPUSH
26737: CALL_OW 257
26741: PUSH
26742: LD_INT 33
26744: NONEQUAL
26745: IFTRUE 26839
26747: PUSH
26748: LD_EXP 14
26752: PPUSH
26753: LD_INT 22
26755: PUSH
26756: LD_INT 2
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 91
26765: PUSH
26766: LD_EXP 66
26770: PUSH
26771: LD_INT 8
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 25
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 25
26794: PUSH
26795: LD_INT 11
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 25
26804: PUSH
26805: LD_INT 32
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 25
26814: PUSH
26815: LD_INT 34
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: PPUSH
26834: CALL_OW 72
26838: OR
26839: IFFALSE 26849
// isAlarm := true ;
26841: LD_ADDR_EXP 17
26845: PUSH
26846: LD_INT 1
26848: ST_TO_ADDR
// if isAlarm then
26849: LD_EXP 17
26853: IFFALSE 26857
// exit ;
26855: GO 28585
// ComTurnUnit ( Heike , ruDisturb ) ;
26857: LD_EXP 46
26861: PPUSH
26862: LD_EXP 66
26866: PPUSH
26867: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26871: LD_EXP 66
26875: PPUSH
26876: LD_EXP 46
26880: PPUSH
26881: CALL_OW 119
// wait ( 3 ) ;
26885: LD_INT 3
26887: PPUSH
26888: CALL_OW 67
// for i := 1 to 3 do
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: DOUBLE
26898: LD_INT 1
26900: DEC
26901: ST_TO_ADDR
26902: LD_INT 3
26904: PUSH
26905: FOR_TO
26906: IFFALSE 26923
// CreateCratesArea ( 5 , cratesArea , false ) ;
26908: LD_INT 5
26910: PPUSH
26911: LD_INT 58
26913: PPUSH
26914: LD_INT 0
26916: PPUSH
26917: CALL_OW 55
26921: GO 26905
26923: POP
26924: POP
// uc_side := 3 ;
26925: LD_ADDR_OWVAR 20
26929: PUSH
26930: LD_INT 3
26932: ST_TO_ADDR
// uc_nation := nation_russian ;
26933: LD_ADDR_OWVAR 21
26937: PUSH
26938: LD_INT 3
26940: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26941: LD_INT 21
26943: PPUSH
26944: LD_INT 3
26946: PPUSH
26947: LD_INT 1
26949: PPUSH
26950: LD_INT 51
26952: PPUSH
26953: LD_INT 100
26955: PPUSH
26956: CALL 35091 0 5
// veh := CreateVehicle ;
26960: LD_ADDR_VAR 0 2
26964: PUSH
26965: CALL_OW 45
26969: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
26970: LD_VAR 0 2
26974: PPUSH
26975: LD_INT 104
26977: PPUSH
26978: LD_INT 41
26980: PPUSH
26981: LD_INT 3
26983: PPUSH
26984: LD_INT 0
26986: PPUSH
26987: CALL 70421 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
26991: LD_VAR 0 2
26995: PPUSH
26996: LD_INT 1
26998: PPUSH
26999: LD_INT 100
27001: PPUSH
27002: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
27006: CALL_OW 44
27010: PPUSH
27011: LD_VAR 0 2
27015: PPUSH
27016: CALL_OW 52
// DialogueOn ;
27020: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
27024: LD_EXP 66
27028: PPUSH
27029: LD_STRING DMcn-Interrupt-1
27031: PPUSH
27032: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
27036: LD_EXP 66
27040: PPUSH
27041: LD_STRING DMcn-Interrupt-2
27043: PPUSH
27044: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
27048: LD_EXP 66
27052: PPUSH
27053: LD_STRING DMcn-Interrupt-c-3
27055: PPUSH
27056: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
27060: LD_INT 101
27062: PPUSH
27063: LD_INT 38
27065: PPUSH
27066: LD_INT 2
27068: PPUSH
27069: LD_INT 10
27071: NEG
27072: PPUSH
27073: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
27077: LD_INT 101
27079: PPUSH
27080: LD_INT 38
27082: PPUSH
27083: CALL_OW 84
// wait ( 0 0$2 ) ;
27087: LD_INT 70
27089: PPUSH
27090: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
27094: LD_INT 101
27096: PPUSH
27097: LD_INT 38
27099: PPUSH
27100: LD_INT 2
27102: PPUSH
27103: CALL_OW 331
// RemoveUnit ( veh ) ;
27107: LD_VAR 0 2
27111: PPUSH
27112: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
27116: LD_EXP 66
27120: PPUSH
27121: LD_STRING DMcn-Interrupt-c-4
27123: PPUSH
27124: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
27128: LD_EXP 46
27132: PPUSH
27133: LD_STRING DH-Interrupt-c-5
27135: PPUSH
27136: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
27140: LD_EXP 66
27144: PPUSH
27145: LD_STRING DMcn-Interrupt-c-6
27147: PPUSH
27148: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
27152: LD_EXP 46
27156: PPUSH
27157: LD_STRING DH-Interrupt-c-7
27159: PPUSH
27160: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
27164: LD_EXP 66
27168: PPUSH
27169: LD_STRING DMcn-Interrupt-c-8
27171: PPUSH
27172: CALL_OW 88
// DialogueOff ;
27176: CALL_OW 7
// hasMuchin := true ;
27180: LD_ADDR_EXP 30
27184: PUSH
27185: LD_INT 1
27187: ST_TO_ADDR
// Query ( MuchinInfo ) ;
27188: LD_STRING MuchinInfo
27190: PPUSH
27191: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
27195: LD_STRING M2c
27197: PPUSH
27198: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
27202: LD_INT 35
27204: PPUSH
27205: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
27209: LD_EXP 66
27213: PPUSH
27214: LD_EXP 46
27218: PPUSH
27219: CALL_OW 296
27223: PUSH
27224: LD_INT 6
27226: GREATER
27227: IFFALSE 27243
// ComMoveUnit ( ruDisturb , Heike ) ;
27229: LD_EXP 66
27233: PPUSH
27234: LD_EXP 46
27238: PPUSH
27239: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
27243: LD_EXP 46
27247: PPUSH
27248: CALL_OW 257
27252: PUSH
27253: LD_INT 33
27255: NONEQUAL
27256: IFTRUE 27350
27258: PUSH
27259: LD_EXP 14
27263: PPUSH
27264: LD_INT 22
27266: PUSH
27267: LD_INT 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 91
27276: PUSH
27277: LD_EXP 66
27281: PUSH
27282: LD_INT 8
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 2
27292: PUSH
27293: LD_INT 25
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 25
27305: PUSH
27306: LD_INT 11
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 25
27315: PUSH
27316: LD_INT 32
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 25
27325: PUSH
27326: LD_INT 34
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: PPUSH
27345: CALL_OW 72
27349: OR
27350: IFFALSE 27362
// begin isAlarm := true ;
27352: LD_ADDR_EXP 17
27356: PUSH
27357: LD_INT 1
27359: ST_TO_ADDR
// exit ;
27360: GO 28585
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
27362: LD_EXP 14
27366: PUSH
27367: LD_EXP 46
27371: UNION
27372: PPUSH
27373: LD_INT 92
27375: PUSH
27376: LD_INT 100
27378: PUSH
27379: LD_INT 37
27381: PUSH
27382: LD_INT 6
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: PPUSH
27391: CALL_OW 72
27395: IFFALSE 27202
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
27397: LD_INT 100
27399: PPUSH
27400: LD_INT 37
27402: PPUSH
27403: LD_INT 3
27405: PPUSH
27406: LD_INT 10
27408: NEG
27409: PPUSH
27410: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_EXP 14
27423: PUSH
27424: LD_EXP 46
27428: UNION
27429: PPUSH
27430: LD_INT 25
27432: PUSH
27433: LD_INT 33
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 91
27442: PUSH
27443: LD_INT 6
27445: PUSH
27446: LD_INT 12
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PPUSH
27458: CALL_OW 72
27462: ST_TO_ADDR
// for i in tmp do
27463: LD_ADDR_VAR 0 1
27467: PUSH
27468: LD_VAR 0 3
27472: PUSH
27473: FOR_IN
27474: IFFALSE 27505
// begin SetSide ( i , 3 ) ;
27476: LD_VAR 0 1
27480: PPUSH
27481: LD_INT 3
27483: PPUSH
27484: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
27488: LD_VAR 0 1
27492: PPUSH
27493: LD_INT 101
27495: PPUSH
27496: LD_INT 38
27498: PPUSH
27499: CALL_OW 111
// end ;
27503: GO 27473
27505: POP
27506: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
27507: LD_EXP 66
27511: PPUSH
27512: LD_INT 104
27514: PPUSH
27515: LD_INT 37
27517: PPUSH
27518: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27522: LD_EXP 66
27526: PPUSH
27527: LD_EXP 46
27531: PPUSH
27532: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
27536: LD_INT 35
27538: PPUSH
27539: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
27543: LD_ADDR_VAR 0 4
27547: PUSH
27548: LD_INT 58
27550: PPUSH
27551: CALL_OW 435
27555: ST_TO_ADDR
// for i in tmp do
27556: LD_ADDR_VAR 0 1
27560: PUSH
27561: LD_VAR 0 3
27565: PUSH
27566: FOR_IN
27567: IFFALSE 27610
// if not HasTask ( i ) then
27569: LD_VAR 0 1
27573: PPUSH
27574: CALL_OW 314
27578: NOT
27579: IFFALSE 27608
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
27581: LD_VAR 0 1
27585: PPUSH
27586: LD_VAR 0 4
27590: PUSH
27591: LD_INT 1
27593: ARRAY
27594: PPUSH
27595: LD_VAR 0 4
27599: PUSH
27600: LD_INT 2
27602: ARRAY
27603: PPUSH
27604: CALL_OW 117
27608: GO 27566
27610: POP
27611: POP
// until not cr ;
27612: LD_VAR 0 4
27616: NOT
27617: IFFALSE 27536
// wait ( 0 0$2 ) ;
27619: LD_INT 70
27621: PPUSH
27622: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
27626: LD_INT 100
27628: PPUSH
27629: LD_INT 37
27631: PPUSH
27632: LD_INT 3
27634: PPUSH
27635: CALL_OW 331
// for i in tmp do
27639: LD_ADDR_VAR 0 1
27643: PUSH
27644: LD_VAR 0 3
27648: PUSH
27649: FOR_IN
27650: IFFALSE 27666
// SetSide ( i , 2 ) ;
27652: LD_VAR 0 1
27656: PPUSH
27657: LD_INT 2
27659: PPUSH
27660: CALL_OW 235
27664: GO 27649
27666: POP
27667: POP
// if Kaia in tmp then
27668: LD_EXP 51
27672: PUSH
27673: LD_VAR 0 3
27677: IN
27678: IFFALSE 27979
// begin InGameOn ;
27680: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
27684: LD_EXP 51
27688: PPUSH
27689: LD_EXP 66
27693: PPUSH
27694: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
27698: LD_EXP 66
27702: PPUSH
27703: LD_EXP 51
27707: PPUSH
27708: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
27712: LD_EXP 51
27716: PPUSH
27717: LD_EXP 66
27721: PPUSH
27722: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
27726: LD_EXP 51
27730: PPUSH
27731: LD_STRING DK-Assassin-1
27733: PPUSH
27734: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
27738: LD_EXP 66
27742: PPUSH
27743: LD_STRING DMcn-Assassin-2
27745: PPUSH
27746: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
27750: LD_EXP 51
27754: PPUSH
27755: LD_STRING DK-Assassin-3
27757: PPUSH
27758: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
27762: LD_EXP 66
27766: PPUSH
27767: LD_STRING DMcn-Assassin-4
27769: PPUSH
27770: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
27774: LD_EXP 51
27778: PPUSH
27779: LD_STRING DK-Assassin-5
27781: PPUSH
27782: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
27786: LD_EXP 66
27790: PPUSH
27791: LD_STRING DMcn-Assassin-6
27793: PPUSH
27794: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
27798: LD_EXP 51
27802: PPUSH
27803: LD_INT 3
27805: PPUSH
27806: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27810: LD_EXP 51
27814: PUSH
27815: LD_EXP 66
27819: PUSH
27820: EMPTY
27821: LIST
27822: LIST
27823: PPUSH
27824: LD_INT 6
27826: PPUSH
27827: CALL_OW 120
// wait ( 0 0$5 ) ;
27831: LD_INT 175
27833: PPUSH
27834: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27838: LD_EXP 51
27842: PPUSH
27843: LD_STRING DK-Assassin-7
27845: PPUSH
27846: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27850: LD_EXP 66
27854: PPUSH
27855: LD_STRING DMcn-Assassin-8
27857: PPUSH
27858: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27862: LD_INT 10
27864: PPUSH
27865: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27869: LD_EXP 51
27873: PPUSH
27874: LD_STRING DK-Assassin-9
27876: PPUSH
27877: CALL_OW 88
// wait ( 0 0$2 ) ;
27881: LD_INT 70
27883: PPUSH
27884: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27888: LD_EXP 51
27892: PPUSH
27893: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27897: LD_EXP 66
27901: PPUSH
27902: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27906: LD_EXP 51
27910: PPUSH
27911: LD_INT 2
27913: PPUSH
27914: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27918: LD_EXP 51
27922: PPUSH
27923: LD_EXP 46
27927: PPUSH
27928: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27932: LD_EXP 51
27936: PPUSH
27937: LD_STRING DK-Assasin-10
27939: PPUSH
27940: CALL_OW 88
// InGameOff ;
27944: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27948: LD_STRING ACH_POKER
27950: PPUSH
27951: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27955: LD_STRING M2c-out
27957: PPUSH
27958: CALL_OW 337
// wait ( 0 0$3 ) ;
27962: LD_INT 105
27964: PPUSH
27965: CALL_OW 67
// hasMuchin := false ;
27969: LD_ADDR_EXP 30
27973: PUSH
27974: LD_INT 0
27976: ST_TO_ADDR
// exit ;
27977: GO 28585
// end ; ChangeMissionObjectives ( M2c-out ) ;
27979: LD_STRING M2c-out
27981: PPUSH
27982: CALL_OW 337
// meetWithMuchin := true ;
27986: LD_ADDR_EXP 44
27990: PUSH
27991: LD_INT 1
27993: ST_TO_ADDR
// InGameOn ;
27994: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
27998: LD_EXP 66
28002: PPUSH
28003: LD_STRING DMcn-Fail-1
28005: PPUSH
28006: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
28010: LD_VAR 0 3
28014: PPUSH
28015: LD_INT 114
28017: PPUSH
28018: LD_INT 17
28020: PPUSH
28021: CALL_OW 111
// wait ( 0 0$1 ) ;
28025: LD_INT 35
28027: PPUSH
28028: CALL_OW 67
// async ;
28032: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28033: LD_EXP 66
28037: PPUSH
28038: LD_EXP 46
28042: PPUSH
28043: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
28047: LD_EXP 66
28051: PPUSH
28052: LD_STRING DMcn-Fail-2
28054: PPUSH
28055: CALL_OW 88
// ComStop ( Heike ) ;
28059: LD_EXP 46
28063: PPUSH
28064: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
28068: LD_EXP 46
28072: PPUSH
28073: LD_EXP 66
28077: PPUSH
28078: CALL_OW 179
// sync ;
28082: SYNC
// Say ( Heike , DH-Fail-3 ) ;
28083: LD_EXP 46
28087: PPUSH
28088: LD_STRING DH-Fail-3
28090: PPUSH
28091: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
28095: LD_EXP 66
28099: PPUSH
28100: LD_STRING DMcn-Fail-4
28102: PPUSH
28103: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
28107: LD_EXP 46
28111: PUSH
28112: LD_EXP 66
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PPUSH
28121: LD_INT 41
28123: PPUSH
28124: LD_INT 19
28126: PPUSH
28127: CALL_OW 111
// wait ( 0 0$2 ) ;
28131: LD_INT 70
28133: PPUSH
28134: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
28138: LD_EXP 66
28142: PPUSH
28143: LD_INT 40
28145: PPUSH
28146: LD_INT 19
28148: PPUSH
28149: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
28153: LD_EXP 46
28157: PPUSH
28158: LD_INT 43
28160: PPUSH
28161: LD_INT 21
28163: PPUSH
28164: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
28168: LD_EXP 66
28172: PPUSH
28173: LD_EXP 46
28177: PPUSH
28178: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
28182: LD_EXP 46
28186: PPUSH
28187: LD_EXP 66
28191: PPUSH
28192: CALL_OW 179
// wait ( 0 0$2 ) ;
28196: LD_INT 70
28198: PPUSH
28199: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
28203: LD_EXP 66
28207: PPUSH
28208: LD_STRING DMcn-Fail-5
28210: PPUSH
28211: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28215: LD_EXP 46
28219: PPUSH
28220: CALL_OW 87
// wait ( 0 0$2 ) ;
28224: LD_INT 70
28226: PPUSH
28227: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
28231: LD_EXP 66
28235: PPUSH
28236: LD_STRING DMcn-Fail-6
28238: PPUSH
28239: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
28243: LD_EXP 46
28247: PPUSH
28248: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
28252: LD_INT 35
28254: PPUSH
28255: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
28259: LD_EXP 46
28263: PPUSH
28264: LD_INT 43
28266: PPUSH
28267: LD_INT 21
28269: PPUSH
28270: CALL_OW 307
28274: IFFALSE 28252
// CenterNowOnUnits ( Heike ) ;
28276: LD_EXP 46
28280: PPUSH
28281: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
28285: LD_STRING MuchinQuestion
28287: PPUSH
28288: CALL_OW 97
28292: PUSH
28293: LD_INT 1
28295: DOUBLE
28296: EQUAL
28297: IFTRUE 28301
28299: GO 28401
28301: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
28302: LD_EXP 66
28306: PPUSH
28307: LD_STRING DMcn-Fail-7
28309: PPUSH
28310: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
28314: LD_EXP 46
28318: PPUSH
28319: LD_STRING DH-Fail-8
28321: PPUSH
28322: CALL_OW 88
// wait ( 0 0$0.3 ) ;
28326: LD_INT 10
28328: PPUSH
28329: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
28333: LD_EXP 46
28337: PPUSH
28338: LD_STRING DH-Fail-9
28340: PPUSH
28341: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
28345: LD_EXP 46
28349: PPUSH
28350: LD_STRING DH-Fail-10
28352: PPUSH
28353: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
28357: LD_EXP 66
28361: PPUSH
28362: LD_STRING DMcn-Fail-11
28364: PPUSH
28365: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
28369: LD_EXP 66
28373: PPUSH
28374: LD_EXP 46
28378: PPUSH
28379: CALL_OW 115
// wait ( 0 0$2 ) ;
28383: LD_INT 70
28385: PPUSH
28386: CALL_OW 67
// KillUnit ( Heike ) ;
28390: LD_EXP 46
28394: PPUSH
28395: CALL_OW 66
// end ; 2 :
28399: GO 28581
28401: LD_INT 2
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28580
28409: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
28410: LD_EXP 46
28414: PPUSH
28415: LD_STRING DH-Fail-a-8
28417: PPUSH
28418: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
28422: LD_EXP 46
28426: PPUSH
28427: LD_STRING DH-Fail-a-9
28429: PPUSH
28430: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
28434: LD_EXP 46
28438: PPUSH
28439: LD_STRING DH-Fail-10
28441: PPUSH
28442: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
28446: LD_EXP 46
28450: PPUSH
28451: LD_STRING DH-Fail-a-11
28453: PPUSH
28454: CALL_OW 88
// async ;
28458: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
28459: LD_EXP 66
28463: PPUSH
28464: LD_EXP 46
28468: PPUSH
28469: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
28473: LD_EXP 66
28477: PPUSH
28478: LD_EXP 46
28482: PPUSH
28483: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
28487: LD_EXP 66
28491: PPUSH
28492: LD_STRING DH-Fail-12
28494: PPUSH
28495: CALL_OW 88
// sync ;
28499: SYNC
// wait ( 0 0$1 ) ;
28500: LD_INT 35
28502: PPUSH
28503: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
28507: LD_EXP 46
28511: PPUSH
28512: LD_STRING DH-Fail-a-13
28514: PPUSH
28515: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
28519: LD_EXP 66
28523: PPUSH
28524: LD_INT 100
28526: PPUSH
28527: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
28531: LD_EXP 66
28535: PPUSH
28536: LD_STRING DMcn-Fail-a-14
28538: PPUSH
28539: CALL_OW 91
// KillUnit ( ruDisturb ) ;
28543: LD_EXP 66
28547: PPUSH
28548: CALL_OW 66
// wait ( 0 0$1 ) ;
28552: LD_INT 35
28554: PPUSH
28555: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
28559: LD_EXP 46
28563: PPUSH
28564: LD_STRING DH-Fail-a-15
28566: PPUSH
28567: CALL_OW 88
// YouLost ( FailMuchin ) ;
28571: LD_STRING FailMuchin
28573: PPUSH
28574: CALL_OW 104
// end ; end ;
28578: GO 28581
28580: POP
// InGameOff ;
28581: CALL_OW 9
// end ;
28585: PPOPN 4
28587: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
28588: LD_INT 23
28590: PPUSH
28591: LD_INT 22
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 70
28605: IFFALSE 28614
28607: PUSH
28608: LD_EXP 44
28612: NOT
28613: AND
28614: IFFALSE 28622
28616: PUSH
28617: LD_EXP 30
28621: AND
28622: IFFALSE 28635
28624: GO 28626
28626: DISABLE
// isAlarm := true ; end_of_file
28627: LD_ADDR_EXP 17
28631: PUSH
28632: LD_INT 1
28634: ST_TO_ADDR
28635: END
// every 0 0$1 marked gameStartEvent do
28636: GO 28638
28638: DISABLE
// begin enable ;
28639: ENABLE
// if not contactWithAmerican then
28640: LD_EXP 25
28644: NOT
28645: IFFALSE 28690
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
28647: LD_ADDR_OWVAR 47
28651: PUSH
28652: LD_STRING #X108-1
28654: PUSH
28655: LD_INT 22
28657: PUSH
28658: LD_INT 5
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 21
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PPUSH
28679: CALL_OW 69
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: ST_TO_ADDR
28688: GO 28779
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
28690: LD_ADDR_OWVAR 47
28694: PUSH
28695: LD_STRING #X108-1
28697: PUSH
28698: LD_INT 22
28700: PUSH
28701: LD_INT 5
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 21
28710: PUSH
28711: LD_INT 1
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 50
28720: PUSH
28721: EMPTY
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: PPUSH
28729: CALL_OW 69
28733: PUSH
28734: LD_STRING #X108-2
28736: PUSH
28737: LD_INT 22
28739: PUSH
28740: LD_INT 4
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 21
28749: PUSH
28750: LD_INT 1
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 50
28759: PUSH
28760: EMPTY
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: PPUSH
28768: CALL_OW 69
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// end ; end_of_file
28779: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
28780: LD_EXP 46
28784: PPUSH
28785: LD_INT 59
28787: PPUSH
28788: CALL_OW 308
28792: IFFALSE 28914
28794: GO 28796
28796: DISABLE
// begin Query ( FinalInfo ) ;
28797: LD_STRING FinalInfo
28799: PPUSH
28800: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
28804: LD_INT 59
28806: PPUSH
28807: LD_INT 1
28809: PPUSH
28810: CALL_OW 424
// end_the_mission_allowed := true ;
28814: LD_ADDR_OWVAR 57
28818: PUSH
28819: LD_INT 1
28821: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28822: LD_INT 35
28824: PPUSH
28825: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28829: LD_INT 22
28831: PUSH
28832: LD_INT 2
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 21
28841: PUSH
28842: LD_INT 1
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 95
28851: PUSH
28852: LD_INT 59
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: LIST
28863: PPUSH
28864: CALL_OW 69
28868: PPUSH
28869: CALL 32329 0 1
28873: PUSH
28874: LD_INT 22
28876: PUSH
28877: LD_INT 2
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: LD_INT 21
28886: PUSH
28887: LD_INT 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PPUSH
28898: CALL_OW 69
28902: PPUSH
28903: CALL 32329 0 1
28907: EQUAL
28908: IFFALSE 28822
// EndMission ;
28910: CALL 28922 0 0
// end ;
28914: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28915: CALL 28922 0 0
// end ;
28919: PPOPN 1
28921: END
// function EndMission ; var tmp ; begin
28922: LD_INT 0
28924: PPUSH
28925: PPUSH
// PlayOriginalMusic ;
28926: CALL 96075 0 0
// if not IsInArea ( Heike , finalArea ) then
28930: LD_EXP 46
28934: PPUSH
28935: LD_INT 59
28937: PPUSH
28938: CALL_OW 308
28942: NOT
28943: IFFALSE 28954
// begin Query ( HeikeOutOfArea ) ;
28945: LD_STRING HeikeOutOfArea
28947: PPUSH
28948: CALL_OW 97
// exit ;
28952: GO 29903
// end ; if not IsOk ( Heike ) then
28954: LD_EXP 46
28958: PPUSH
28959: CALL_OW 302
28963: NOT
28964: IFFALSE 28975
// begin Query ( HeikeIsHurt ) ;
28966: LD_STRING HeikeIsHurt
28968: PPUSH
28969: CALL_OW 97
// exit ;
28973: GO 29903
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
28975: LD_INT 22
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 21
28987: PUSH
28988: LD_INT 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 50
28997: PUSH
28998: EMPTY
28999: LIST
29000: PUSH
29001: LD_INT 95
29003: PUSH
29004: LD_INT 59
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 69
29021: PPUSH
29022: CALL 32329 0 1
29026: PUSH
29027: LD_INT 6
29029: LESS
29030: IFFALSE 29039
// YouLost ( NeedMorePep ) ;
29032: LD_STRING NeedMorePep
29034: PPUSH
29035: CALL_OW 104
// if tick < 20 20$00 then
29039: LD_OWVAR 1
29043: PUSH
29044: LD_INT 42000
29046: LESS
29047: IFFALSE 29056
// SetAchievement ( ACH_HSPEED_8 ) ;
29049: LD_STRING ACH_HSPEED_8
29051: PPUSH
29052: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
29056: LD_INT 22
29058: PUSH
29059: LD_INT 5
29061: PUSH
29062: EMPTY
29063: LIST
29064: LIST
29065: PUSH
29066: LD_INT 21
29068: PUSH
29069: LD_INT 1
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PPUSH
29080: CALL_OW 69
29084: PUSH
29085: LD_INT 0
29087: EQUAL
29088: IFFALSE 29100
29090: PUSH
29091: LD_EXP 32
29095: PUSH
29096: LD_INT 0
29098: EQUAL
29099: AND
29100: IFFALSE 29114
// AddMedal ( med1 , 1 ) else
29102: LD_STRING med1
29104: PPUSH
29105: LD_INT 1
29107: PPUSH
29108: CALL_OW 101
29112: GO 29125
// AddMedal ( med1 , - 1 ) ;
29114: LD_STRING med1
29116: PPUSH
29117: LD_INT 1
29119: NEG
29120: PPUSH
29121: CALL_OW 101
// if explosivePlantedList >= 3 then
29125: LD_EXP 29
29129: PUSH
29130: LD_INT 3
29132: GREATEREQUAL
29133: IFFALSE 29147
// AddMedal ( med2 , 1 ) else
29135: LD_STRING med2
29137: PPUSH
29138: LD_INT 1
29140: PPUSH
29141: CALL_OW 101
29145: GO 29181
// if explosivePlantedList < 3 then
29147: LD_EXP 29
29151: PUSH
29152: LD_INT 3
29154: LESS
29155: IFFALSE 29170
// AddMedal ( med2 , - 2 ) else
29157: LD_STRING med2
29159: PPUSH
29160: LD_INT 2
29162: NEG
29163: PPUSH
29164: CALL_OW 101
29168: GO 29181
// AddMedal ( med2 , - 1 ) ;
29170: LD_STRING med2
29172: PPUSH
29173: LD_INT 1
29175: NEG
29176: PPUSH
29177: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
29181: LD_INT 5
29183: PPUSH
29184: LD_INT 2
29186: PPUSH
29187: CALL_OW 321
29191: PUSH
29192: LD_INT 2
29194: EQUAL
29195: IFFALSE 29209
// AddMedal ( med3 , 1 ) else
29197: LD_STRING med3
29199: PPUSH
29200: LD_INT 1
29202: PPUSH
29203: CALL_OW 101
29207: GO 29220
// AddMedal ( med3 , - 1 ) ;
29209: LD_STRING med3
29211: PPUSH
29212: LD_INT 1
29214: NEG
29215: PPUSH
29216: CALL_OW 101
// GiveMedals ( MAIN ) ;
29220: LD_STRING MAIN
29222: PPUSH
29223: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
29227: LD_ADDR_VAR 0 2
29231: PUSH
29232: LD_INT 22
29234: PUSH
29235: LD_INT 2
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 21
29244: PUSH
29245: LD_INT 1
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 50
29254: PUSH
29255: EMPTY
29256: LIST
29257: PUSH
29258: LD_INT 95
29260: PUSH
29261: LD_INT 59
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: PPUSH
29274: CALL_OW 69
29278: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
29279: LD_VAR 0 2
29283: PPUSH
29284: LD_INT 23
29286: PUSH
29287: LD_INT 2
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PPUSH
29294: CALL_OW 72
29298: PPUSH
29299: CALL_OW 43
// if Doug and Doug in tmp then
29303: LD_EXP 60
29307: IFFALSE 29321
29309: PUSH
29310: LD_EXP 60
29314: PUSH
29315: LD_VAR 0 2
29319: IN
29320: AND
29321: IFFALSE 29335
// SaveCharacters ( Doug , 08_UsCommander ) ;
29323: LD_EXP 60
29327: PPUSH
29328: LD_STRING 08_UsCommander
29330: PPUSH
29331: CALL_OW 38
// if Harris and Harris in tmp then
29335: LD_EXP 59
29339: IFFALSE 29353
29341: PUSH
29342: LD_EXP 59
29346: PUSH
29347: LD_VAR 0 2
29351: IN
29352: AND
29353: IFFALSE 29367
// SaveCharacters ( Harris , 08_Harris ) ;
29355: LD_EXP 59
29359: PPUSH
29360: LD_STRING 08_Harris
29362: PPUSH
29363: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
29367: LD_VAR 0 2
29371: PPUSH
29372: LD_INT 23
29374: PUSH
29375: LD_INT 1
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PPUSH
29382: CALL_OW 72
29386: PUSH
29387: LD_EXP 60
29391: PUSH
29392: LD_EXP 59
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: DIFF
29401: PPUSH
29402: LD_STRING 08_Americans
29404: PPUSH
29405: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
29409: LD_EXP 46
29413: PPUSH
29414: CALL_OW 248
29418: PUSH
29419: LD_INT 3
29421: EQUAL
29422: IFFALSE 29452
// begin CopySkills ( Heike , HeikeTmp ) ;
29424: LD_EXP 46
29428: PPUSH
29429: LD_EXP 62
29433: PPUSH
29434: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
29438: LD_EXP 62
29442: PPUSH
29443: LD_STRING 08_Heike
29445: PPUSH
29446: CALL_OW 38
// end else
29450: GO 29464
// SaveCharacters ( Heike , 08_Heike ) ;
29452: LD_EXP 46
29456: PPUSH
29457: LD_STRING 08_Heike
29459: PPUSH
29460: CALL_OW 38
// if Aviradze and Aviradze in tmp then
29464: LD_EXP 56
29468: IFFALSE 29482
29470: PUSH
29471: LD_EXP 56
29475: PUSH
29476: LD_VAR 0 2
29480: IN
29481: AND
29482: IFFALSE 29496
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
29484: LD_EXP 56
29488: PPUSH
29489: LD_STRING 08_Aviradze
29491: PPUSH
29492: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
29496: LD_EXP 49
29500: IFFALSE 29514
29502: PUSH
29503: LD_EXP 49
29507: PUSH
29508: LD_VAR 0 2
29512: IN
29513: AND
29514: IFFALSE 29528
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
29516: LD_EXP 49
29520: PPUSH
29521: LD_STRING 08_Ibrahim
29523: PPUSH
29524: CALL_OW 38
// if Kamil and Kamil in tmp then
29528: LD_EXP 50
29532: IFFALSE 29546
29534: PUSH
29535: LD_EXP 50
29539: PUSH
29540: LD_VAR 0 2
29544: IN
29545: AND
29546: IFFALSE 29560
// SaveCharacters ( Kamil , 08_Kamil ) ;
29548: LD_EXP 50
29552: PPUSH
29553: LD_STRING 08_Kamil
29555: PPUSH
29556: CALL_OW 38
// if Sophia and Sophia in tmp then
29560: LD_EXP 52
29564: IFFALSE 29578
29566: PUSH
29567: LD_EXP 52
29571: PUSH
29572: LD_VAR 0 2
29576: IN
29577: AND
29578: IFFALSE 29592
// SaveCharacters ( Sophia , 08_Sophia ) ;
29580: LD_EXP 52
29584: PPUSH
29585: LD_STRING 08_Sophia
29587: PPUSH
29588: CALL_OW 38
// if Kaia and Kaia in tmp then
29592: LD_EXP 51
29596: IFFALSE 29610
29598: PUSH
29599: LD_EXP 51
29603: PUSH
29604: LD_VAR 0 2
29608: IN
29609: AND
29610: IFFALSE 29624
// SaveCharacters ( Kaia , 08_Kaia ) ;
29612: LD_EXP 51
29616: PPUSH
29617: LD_STRING 08_Kaia
29619: PPUSH
29620: CALL_OW 38
// if Givi and Givi in tmp then
29624: LD_EXP 47
29628: IFFALSE 29642
29630: PUSH
29631: LD_EXP 47
29635: PUSH
29636: LD_VAR 0 2
29640: IN
29641: AND
29642: IFFALSE 29699
// if GetNation ( Givi ) = nation_russian then
29644: LD_EXP 47
29648: PPUSH
29649: CALL_OW 248
29653: PUSH
29654: LD_INT 3
29656: EQUAL
29657: IFFALSE 29687
// begin CopySkills ( Givi , GiviTmp ) ;
29659: LD_EXP 47
29663: PPUSH
29664: LD_EXP 63
29668: PPUSH
29669: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
29673: LD_EXP 63
29677: PPUSH
29678: LD_STRING 08_Givi
29680: PPUSH
29681: CALL_OW 38
// end else
29685: GO 29699
// SaveCharacters ( Givi , 08_Givi ) ;
29687: LD_EXP 47
29691: PPUSH
29692: LD_STRING 08_Givi
29694: PPUSH
29695: CALL_OW 38
// if Mike and Mike in tmp then
29699: LD_EXP 48
29703: IFFALSE 29717
29705: PUSH
29706: LD_EXP 48
29710: PUSH
29711: LD_VAR 0 2
29715: IN
29716: AND
29717: IFFALSE 29731
// SaveCharacters ( Mike , 08_Mike ) ;
29719: LD_EXP 48
29723: PPUSH
29724: LD_STRING 08_Mike
29726: PPUSH
29727: CALL_OW 38
// if Markov and Markov in tmp then
29731: LD_EXP 53
29735: IFFALSE 29749
29737: PUSH
29738: LD_EXP 53
29742: PUSH
29743: LD_VAR 0 2
29747: IN
29748: AND
29749: IFFALSE 29763
// SaveCharacters ( Markov , 08_Markov ) ;
29751: LD_EXP 53
29755: PPUSH
29756: LD_STRING 08_Markov
29758: PPUSH
29759: CALL_OW 38
// if Kurt and Kurt in tmp then
29763: LD_EXP 55
29767: IFFALSE 29781
29769: PUSH
29770: LD_EXP 55
29774: PUSH
29775: LD_VAR 0 2
29779: IN
29780: AND
29781: IFFALSE 29795
// SaveCharacters ( Kurt , 08_Kurt ) ;
29783: LD_EXP 55
29787: PPUSH
29788: LD_STRING 08_Kurt
29790: PPUSH
29791: CALL_OW 38
// if Olaf and Olaf in tmp then
29795: LD_EXP 54
29799: IFFALSE 29813
29801: PUSH
29802: LD_EXP 54
29806: PUSH
29807: LD_VAR 0 2
29811: IN
29812: AND
29813: IFFALSE 29827
// SaveCharacters ( Olaf , 08_Olaf ) ;
29815: LD_EXP 54
29819: PPUSH
29820: LD_STRING 08_Olaf
29822: PPUSH
29823: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
29827: LD_EXP 57
29831: PPUSH
29832: LD_INT 95
29834: PUSH
29835: LD_INT 59
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 50
29844: PUSH
29845: EMPTY
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PPUSH
29852: CALL_OW 72
29856: IFFALSE 29895
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29858: LD_EXP 57
29862: PPUSH
29863: LD_INT 95
29865: PUSH
29866: LD_INT 59
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 50
29875: PUSH
29876: EMPTY
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PPUSH
29883: CALL_OW 72
29887: PPUSH
29888: LD_STRING 08_others
29890: PPUSH
29891: CALL_OW 38
// YouWin ;
29895: CALL_OW 103
// DialogueOff ;
29899: CALL_OW 7
// end ; end_of_file
29903: LD_VAR 0 1
29907: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
29908: LD_EXP 5
29912: IFFALSE 30102
29914: GO 29916
29916: DISABLE
29917: LD_INT 0
29919: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
29920: LD_INT 35
29922: PPUSH
29923: LD_INT 2100
29925: PPUSH
29926: CALL_OW 12
29930: PPUSH
29931: CALL_OW 67
// StopOriginalMusic ;
29935: CALL 96060 0 0
// weatherBusy := true ;
29939: LD_ADDR_EXP 37
29943: PUSH
29944: LD_INT 1
29946: ST_TO_ADDR
// for i := 1 to 3 do
29947: LD_ADDR_VAR 0 1
29951: PUSH
29952: DOUBLE
29953: LD_INT 1
29955: DEC
29956: ST_TO_ADDR
29957: LD_INT 3
29959: PUSH
29960: FOR_TO
29961: IFFALSE 29995
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
29963: LD_INT 1
29965: PPUSH
29966: LD_INT 100
29968: PUSH
29969: LD_INT 100
29971: PUSH
29972: LD_VAR 0 1
29976: MUL
29977: PLUS
29978: PPUSH
29979: LD_INT 60
29981: PPUSH
29982: CALL_OW 550
// wait ( 0 0$2 ) ;
29986: LD_INT 70
29988: PPUSH
29989: CALL_OW 67
// end ;
29993: GO 29960
29995: POP
29996: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
29997: LD_STRING ArStormRain.wav
29999: PPUSH
30000: LD_STRING OW_CUSTOM_COMMAND(103);
30002: PPUSH
30003: CALL 96090 0 2
// wait ( 0 0$3 ) ;
30007: LD_INT 105
30009: PPUSH
30010: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
30014: LD_INT 1
30016: PPUSH
30017: LD_INT 900
30019: PPUSH
30020: LD_INT 120
30022: PPUSH
30023: CALL_OW 550
// wait ( 0 0$10 ) ;
30027: LD_INT 350
30029: PPUSH
30030: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
30034: LD_INT 1
30036: PPUSH
30037: LD_INT 1500
30039: PPUSH
30040: LD_INT 300
30042: PPUSH
30043: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
30047: LD_INT 35
30049: PPUSH
30050: CALL_OW 67
// until not weatherBusy ;
30054: LD_EXP 37
30058: NOT
30059: IFFALSE 30047
// SetWeather ( 0 , 0 , 0 ) ;
30061: LD_INT 0
30063: PPUSH
30064: LD_INT 0
30066: PPUSH
30067: LD_INT 0
30069: PPUSH
30070: CALL_OW 550
// wait ( 5 5$00 ) ;
30074: LD_INT 10500
30076: PPUSH
30077: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
30081: LD_STRING ArStormNormal.wav
30083: PPUSH
30084: LD_STRING OW_CUSTOM_COMMAND(103);
30086: PPUSH
30087: CALL 96090 0 2
// wait ( 5 5$00 ) ;
30091: LD_INT 10500
30093: PPUSH
30094: CALL_OW 67
// PlayOriginalMusic ;
30098: CALL 96075 0 0
// end ; end_of_file
30102: PPOPN 1
30104: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30105: LD_INT 0
30107: PPUSH
30108: PPUSH
// if exist_mode then
30109: LD_VAR 0 2
30113: IFFALSE 30159
// begin unit := CreateCharacter ( prefix & ident ) ;
30115: LD_ADDR_VAR 0 5
30119: PUSH
30120: LD_VAR 0 3
30124: PUSH
30125: LD_VAR 0 1
30129: STR
30130: PPUSH
30131: CALL_OW 34
30135: ST_TO_ADDR
// if unit then
30136: LD_VAR 0 5
30140: IFFALSE 30157
// DeleteCharacters ( prefix & ident ) ;
30142: LD_VAR 0 3
30146: PUSH
30147: LD_VAR 0 1
30151: STR
30152: PPUSH
30153: CALL_OW 40
// end else
30157: GO 30174
// unit := NewCharacter ( ident ) ;
30159: LD_ADDR_VAR 0 5
30163: PUSH
30164: LD_VAR 0 1
30168: PPUSH
30169: CALL_OW 25
30173: ST_TO_ADDR
// result := unit ;
30174: LD_ADDR_VAR 0 4
30178: PUSH
30179: LD_VAR 0 5
30183: ST_TO_ADDR
// end ;
30184: LD_VAR 0 4
30188: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30189: LD_INT 0
30191: PPUSH
30192: PPUSH
// if exist_mode then
30193: LD_VAR 0 2
30197: IFFALSE 30222
// unit := CreateCharacter ( prefix & ident ) else
30199: LD_ADDR_VAR 0 5
30203: PUSH
30204: LD_VAR 0 3
30208: PUSH
30209: LD_VAR 0 1
30213: STR
30214: PPUSH
30215: CALL_OW 34
30219: ST_TO_ADDR
30220: GO 30237
// unit := NewCharacter ( ident ) ;
30222: LD_ADDR_VAR 0 5
30226: PUSH
30227: LD_VAR 0 1
30231: PPUSH
30232: CALL_OW 25
30236: ST_TO_ADDR
// result := unit ;
30237: LD_ADDR_VAR 0 4
30241: PUSH
30242: LD_VAR 0 5
30246: ST_TO_ADDR
// end ;
30247: LD_VAR 0 4
30251: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30252: LD_INT 0
30254: PPUSH
30255: PPUSH
// if not side or not nation then
30256: LD_VAR 0 1
30260: NOT
30261: IFTRUE 30270
30263: PUSH
30264: LD_VAR 0 2
30268: NOT
30269: OR
30270: IFFALSE 30274
// exit ;
30272: GO 31068
// case nation of nation_american :
30274: LD_VAR 0 2
30278: PUSH
30279: LD_INT 1
30281: DOUBLE
30282: EQUAL
30283: IFTRUE 30287
30285: GO 30509
30287: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
30288: LD_ADDR_VAR 0 4
30292: PUSH
30293: LD_INT 35
30295: PUSH
30296: LD_INT 45
30298: PUSH
30299: LD_INT 46
30301: PUSH
30302: LD_INT 47
30304: PUSH
30305: LD_INT 82
30307: PUSH
30308: LD_INT 83
30310: PUSH
30311: LD_INT 84
30313: PUSH
30314: LD_INT 85
30316: PUSH
30317: LD_INT 86
30319: PUSH
30320: LD_INT 1
30322: PUSH
30323: LD_INT 2
30325: PUSH
30326: LD_INT 6
30328: PUSH
30329: LD_INT 15
30331: PUSH
30332: LD_INT 16
30334: PUSH
30335: LD_INT 7
30337: PUSH
30338: LD_INT 12
30340: PUSH
30341: LD_INT 13
30343: PUSH
30344: LD_INT 10
30346: PUSH
30347: LD_INT 14
30349: PUSH
30350: LD_INT 20
30352: PUSH
30353: LD_INT 21
30355: PUSH
30356: LD_INT 22
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 32
30364: PUSH
30365: LD_INT 27
30367: PUSH
30368: LD_INT 36
30370: PUSH
30371: LD_INT 69
30373: PUSH
30374: LD_INT 39
30376: PUSH
30377: LD_INT 34
30379: PUSH
30380: LD_INT 40
30382: PUSH
30383: LD_INT 48
30385: PUSH
30386: LD_INT 49
30388: PUSH
30389: LD_INT 50
30391: PUSH
30392: LD_INT 51
30394: PUSH
30395: LD_INT 52
30397: PUSH
30398: LD_INT 53
30400: PUSH
30401: LD_INT 54
30403: PUSH
30404: LD_INT 55
30406: PUSH
30407: LD_INT 56
30409: PUSH
30410: LD_INT 57
30412: PUSH
30413: LD_INT 58
30415: PUSH
30416: LD_INT 59
30418: PUSH
30419: LD_INT 60
30421: PUSH
30422: LD_INT 61
30424: PUSH
30425: LD_INT 62
30427: PUSH
30428: LD_INT 80
30430: PUSH
30431: LD_INT 82
30433: PUSH
30434: LD_INT 83
30436: PUSH
30437: LD_INT 84
30439: PUSH
30440: LD_INT 85
30442: PUSH
30443: LD_INT 86
30445: PUSH
30446: LD_INT 90
30448: PUSH
30449: LD_INT 93
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: ST_TO_ADDR
30507: GO 30990
30509: LD_INT 2
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30751
30517: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
30518: LD_ADDR_VAR 0 4
30522: PUSH
30523: LD_INT 35
30525: PUSH
30526: LD_INT 45
30528: PUSH
30529: LD_INT 46
30531: PUSH
30532: LD_INT 47
30534: PUSH
30535: LD_INT 82
30537: PUSH
30538: LD_INT 83
30540: PUSH
30541: LD_INT 84
30543: PUSH
30544: LD_INT 85
30546: PUSH
30547: LD_INT 87
30549: PUSH
30550: LD_INT 70
30552: PUSH
30553: LD_INT 1
30555: PUSH
30556: LD_INT 11
30558: PUSH
30559: LD_INT 3
30561: PUSH
30562: LD_INT 4
30564: PUSH
30565: LD_INT 5
30567: PUSH
30568: LD_INT 6
30570: PUSH
30571: LD_INT 15
30573: PUSH
30574: LD_INT 18
30576: PUSH
30577: LD_INT 7
30579: PUSH
30580: LD_INT 17
30582: PUSH
30583: LD_INT 8
30585: PUSH
30586: LD_INT 20
30588: PUSH
30589: LD_INT 21
30591: PUSH
30592: LD_INT 22
30594: PUSH
30595: LD_INT 72
30597: PUSH
30598: LD_INT 26
30600: PUSH
30601: LD_INT 69
30603: PUSH
30604: LD_INT 39
30606: PUSH
30607: LD_INT 40
30609: PUSH
30610: LD_INT 41
30612: PUSH
30613: LD_INT 42
30615: PUSH
30616: LD_INT 43
30618: PUSH
30619: LD_INT 48
30621: PUSH
30622: LD_INT 49
30624: PUSH
30625: LD_INT 50
30627: PUSH
30628: LD_INT 51
30630: PUSH
30631: LD_INT 52
30633: PUSH
30634: LD_INT 53
30636: PUSH
30637: LD_INT 54
30639: PUSH
30640: LD_INT 55
30642: PUSH
30643: LD_INT 56
30645: PUSH
30646: LD_INT 60
30648: PUSH
30649: LD_INT 61
30651: PUSH
30652: LD_INT 62
30654: PUSH
30655: LD_INT 66
30657: PUSH
30658: LD_INT 67
30660: PUSH
30661: LD_INT 68
30663: PUSH
30664: LD_INT 81
30666: PUSH
30667: LD_INT 82
30669: PUSH
30670: LD_INT 83
30672: PUSH
30673: LD_INT 84
30675: PUSH
30676: LD_INT 85
30678: PUSH
30679: LD_INT 87
30681: PUSH
30682: LD_INT 88
30684: PUSH
30685: LD_INT 92
30687: PUSH
30688: LD_INT 94
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: ST_TO_ADDR
30749: GO 30990
30751: LD_INT 3
30753: DOUBLE
30754: EQUAL
30755: IFTRUE 30759
30757: GO 30989
30759: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
30760: LD_ADDR_VAR 0 4
30764: PUSH
30765: LD_INT 46
30767: PUSH
30768: LD_INT 47
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: LD_INT 2
30776: PUSH
30777: LD_INT 82
30779: PUSH
30780: LD_INT 83
30782: PUSH
30783: LD_INT 84
30785: PUSH
30786: LD_INT 85
30788: PUSH
30789: LD_INT 86
30791: PUSH
30792: LD_INT 11
30794: PUSH
30795: LD_INT 9
30797: PUSH
30798: LD_INT 20
30800: PUSH
30801: LD_INT 19
30803: PUSH
30804: LD_INT 21
30806: PUSH
30807: LD_INT 24
30809: PUSH
30810: LD_INT 22
30812: PUSH
30813: LD_INT 25
30815: PUSH
30816: LD_INT 28
30818: PUSH
30819: LD_INT 29
30821: PUSH
30822: LD_INT 30
30824: PUSH
30825: LD_INT 31
30827: PUSH
30828: LD_INT 37
30830: PUSH
30831: LD_INT 38
30833: PUSH
30834: LD_INT 32
30836: PUSH
30837: LD_INT 27
30839: PUSH
30840: LD_INT 33
30842: PUSH
30843: LD_INT 69
30845: PUSH
30846: LD_INT 39
30848: PUSH
30849: LD_INT 34
30851: PUSH
30852: LD_INT 40
30854: PUSH
30855: LD_INT 71
30857: PUSH
30858: LD_INT 23
30860: PUSH
30861: LD_INT 44
30863: PUSH
30864: LD_INT 48
30866: PUSH
30867: LD_INT 49
30869: PUSH
30870: LD_INT 50
30872: PUSH
30873: LD_INT 51
30875: PUSH
30876: LD_INT 52
30878: PUSH
30879: LD_INT 53
30881: PUSH
30882: LD_INT 54
30884: PUSH
30885: LD_INT 55
30887: PUSH
30888: LD_INT 56
30890: PUSH
30891: LD_INT 57
30893: PUSH
30894: LD_INT 58
30896: PUSH
30897: LD_INT 59
30899: PUSH
30900: LD_INT 63
30902: PUSH
30903: LD_INT 64
30905: PUSH
30906: LD_INT 65
30908: PUSH
30909: LD_INT 82
30911: PUSH
30912: LD_INT 83
30914: PUSH
30915: LD_INT 84
30917: PUSH
30918: LD_INT 85
30920: PUSH
30921: LD_INT 86
30923: PUSH
30924: LD_INT 89
30926: PUSH
30927: LD_INT 91
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: ST_TO_ADDR
30987: GO 30990
30989: POP
// if state > - 1 and state < 3 then
30990: LD_VAR 0 3
30994: PUSH
30995: LD_INT 1
30997: NEG
30998: GREATER
30999: IFFALSE 31011
31001: PUSH
31002: LD_VAR 0 3
31006: PUSH
31007: LD_INT 3
31009: LESS
31010: AND
31011: IFFALSE 31068
// for i in result do
31013: LD_ADDR_VAR 0 5
31017: PUSH
31018: LD_VAR 0 4
31022: PUSH
31023: FOR_IN
31024: IFFALSE 31066
// if GetTech ( i , side ) <> state then
31026: LD_VAR 0 5
31030: PPUSH
31031: LD_VAR 0 1
31035: PPUSH
31036: CALL_OW 321
31040: PUSH
31041: LD_VAR 0 3
31045: NONEQUAL
31046: IFFALSE 31064
// result := result diff i ;
31048: LD_ADDR_VAR 0 4
31052: PUSH
31053: LD_VAR 0 4
31057: PUSH
31058: LD_VAR 0 5
31062: DIFF
31063: ST_TO_ADDR
31064: GO 31023
31066: POP
31067: POP
// end ;
31068: LD_VAR 0 4
31072: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31073: LD_INT 0
31075: PPUSH
31076: PPUSH
31077: PPUSH
// result := true ;
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 1
31085: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31086: LD_ADDR_VAR 0 5
31090: PUSH
31091: LD_VAR 0 2
31095: PPUSH
31096: CALL_OW 480
31100: ST_TO_ADDR
// if not tmp then
31101: LD_VAR 0 5
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31159
// for i in tmp do
31110: LD_ADDR_VAR 0 4
31114: PUSH
31115: LD_VAR 0 5
31119: PUSH
31120: FOR_IN
31121: IFFALSE 31157
// if GetTech ( i , side ) <> state_researched then
31123: LD_VAR 0 4
31127: PPUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 321
31137: PUSH
31138: LD_INT 2
31140: NONEQUAL
31141: IFFALSE 31155
// begin result := false ;
31143: LD_ADDR_VAR 0 3
31147: PUSH
31148: LD_INT 0
31150: ST_TO_ADDR
// exit ;
31151: POP
31152: POP
31153: GO 31159
// end ;
31155: GO 31120
31157: POP
31158: POP
// end ;
31159: LD_VAR 0 3
31163: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31164: LD_INT 0
31166: PPUSH
31167: PPUSH
31168: PPUSH
31169: PPUSH
31170: PPUSH
31171: PPUSH
31172: PPUSH
31173: PPUSH
31174: PPUSH
31175: PPUSH
31176: PPUSH
31177: PPUSH
31178: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31179: LD_VAR 0 1
31183: NOT
31184: IFTRUE 31201
31186: PUSH
31187: LD_VAR 0 1
31191: PPUSH
31192: CALL_OW 257
31196: PUSH
31197: LD_INT 9
31199: NONEQUAL
31200: OR
31201: IFFALSE 31205
// exit ;
31203: GO 31784
// side := GetSide ( unit ) ;
31205: LD_ADDR_VAR 0 9
31209: PUSH
31210: LD_VAR 0 1
31214: PPUSH
31215: CALL_OW 255
31219: ST_TO_ADDR
// tech_space := tech_spacanom ;
31220: LD_ADDR_VAR 0 12
31224: PUSH
31225: LD_INT 29
31227: ST_TO_ADDR
// tech_time := tech_taurad ;
31228: LD_ADDR_VAR 0 13
31232: PUSH
31233: LD_INT 28
31235: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31236: LD_ADDR_VAR 0 11
31240: PUSH
31241: LD_VAR 0 1
31245: PPUSH
31246: CALL_OW 310
31250: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31251: LD_VAR 0 11
31255: PPUSH
31256: CALL_OW 247
31260: PUSH
31261: LD_INT 2
31263: EQUAL
31264: IFFALSE 31268
// exit ;
31266: GO 31784
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31268: LD_ADDR_VAR 0 8
31272: PUSH
31273: LD_INT 81
31275: PUSH
31276: LD_VAR 0 9
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: PUSH
31288: LD_INT 21
31290: PUSH
31291: LD_INT 3
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PPUSH
31306: CALL_OW 69
31310: ST_TO_ADDR
// if not tmp then
31311: LD_VAR 0 8
31315: NOT
31316: IFFALSE 31320
// exit ;
31318: GO 31784
// if in_unit then
31320: LD_VAR 0 11
31324: IFFALSE 31348
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31326: LD_ADDR_VAR 0 10
31330: PUSH
31331: LD_VAR 0 8
31335: PPUSH
31336: LD_VAR 0 11
31340: PPUSH
31341: CALL_OW 74
31345: ST_TO_ADDR
31346: GO 31368
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31348: LD_ADDR_VAR 0 10
31352: PUSH
31353: LD_VAR 0 8
31357: PPUSH
31358: LD_VAR 0 1
31362: PPUSH
31363: CALL_OW 74
31367: ST_TO_ADDR
// if not enemy then
31368: LD_VAR 0 10
31372: NOT
31373: IFFALSE 31377
// exit ;
31375: GO 31784
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31377: LD_VAR 0 11
31381: IFFALSE 31403
31383: PUSH
31384: LD_VAR 0 11
31388: PPUSH
31389: LD_VAR 0 10
31393: PPUSH
31394: CALL_OW 296
31398: PUSH
31399: LD_INT 13
31401: GREATER
31402: AND
31403: IFTRUE 31425
31405: PUSH
31406: LD_VAR 0 1
31410: PPUSH
31411: LD_VAR 0 10
31415: PPUSH
31416: CALL_OW 296
31420: PUSH
31421: LD_INT 12
31423: GREATER
31424: OR
31425: IFFALSE 31429
// exit ;
31427: GO 31784
// missile := [ 1 ] ;
31429: LD_ADDR_VAR 0 14
31433: PUSH
31434: LD_INT 1
31436: PUSH
31437: EMPTY
31438: LIST
31439: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31440: LD_VAR 0 9
31444: PPUSH
31445: LD_VAR 0 12
31449: PPUSH
31450: CALL_OW 325
31454: IFFALSE 31483
// missile := Replace ( missile , missile + 1 , 2 ) ;
31456: LD_ADDR_VAR 0 14
31460: PUSH
31461: LD_VAR 0 14
31465: PPUSH
31466: LD_VAR 0 14
31470: PUSH
31471: LD_INT 1
31473: PLUS
31474: PPUSH
31475: LD_INT 2
31477: PPUSH
31478: CALL_OW 1
31482: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31483: LD_VAR 0 9
31487: PPUSH
31488: LD_VAR 0 13
31492: PPUSH
31493: CALL_OW 325
31497: IFFALSE 31521
31499: PUSH
31500: LD_VAR 0 10
31504: PPUSH
31505: CALL_OW 255
31509: PPUSH
31510: LD_VAR 0 13
31514: PPUSH
31515: CALL_OW 325
31519: NOT
31520: AND
31521: IFFALSE 31550
// missile := Replace ( missile , missile + 1 , 3 ) ;
31523: LD_ADDR_VAR 0 14
31527: PUSH
31528: LD_VAR 0 14
31532: PPUSH
31533: LD_VAR 0 14
31537: PUSH
31538: LD_INT 1
31540: PLUS
31541: PPUSH
31542: LD_INT 3
31544: PPUSH
31545: CALL_OW 1
31549: ST_TO_ADDR
// if missile < 2 then
31550: LD_VAR 0 14
31554: PUSH
31555: LD_INT 2
31557: LESS
31558: IFFALSE 31562
// exit ;
31560: GO 31784
// x := GetX ( enemy ) ;
31562: LD_ADDR_VAR 0 4
31566: PUSH
31567: LD_VAR 0 10
31571: PPUSH
31572: CALL_OW 250
31576: ST_TO_ADDR
// y := GetY ( enemy ) ;
31577: LD_ADDR_VAR 0 5
31581: PUSH
31582: LD_VAR 0 10
31586: PPUSH
31587: CALL_OW 251
31591: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31592: LD_ADDR_VAR 0 6
31596: PUSH
31597: LD_VAR 0 4
31601: PUSH
31602: LD_INT 1
31604: NEG
31605: PPUSH
31606: LD_INT 1
31608: PPUSH
31609: CALL_OW 12
31613: PLUS
31614: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31615: LD_ADDR_VAR 0 7
31619: PUSH
31620: LD_VAR 0 5
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PPUSH
31629: LD_INT 1
31631: PPUSH
31632: CALL_OW 12
31636: PLUS
31637: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31638: LD_VAR 0 6
31642: PPUSH
31643: LD_VAR 0 7
31647: PPUSH
31648: CALL_OW 488
31652: NOT
31653: IFFALSE 31675
// begin _x := x ;
31655: LD_ADDR_VAR 0 6
31659: PUSH
31660: LD_VAR 0 4
31664: ST_TO_ADDR
// _y := y ;
31665: LD_ADDR_VAR 0 7
31669: PUSH
31670: LD_VAR 0 5
31674: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_INT 1
31682: PPUSH
31683: LD_VAR 0 14
31687: PPUSH
31688: CALL_OW 12
31692: ST_TO_ADDR
// case i of 1 :
31693: LD_VAR 0 3
31697: PUSH
31698: LD_INT 1
31700: DOUBLE
31701: EQUAL
31702: IFTRUE 31706
31704: GO 31723
31706: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31707: LD_VAR 0 1
31711: PPUSH
31712: LD_VAR 0 10
31716: PPUSH
31717: CALL_OW 115
31721: GO 31784
31723: LD_INT 2
31725: DOUBLE
31726: EQUAL
31727: IFTRUE 31731
31729: GO 31753
31731: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31732: LD_VAR 0 1
31736: PPUSH
31737: LD_VAR 0 6
31741: PPUSH
31742: LD_VAR 0 7
31746: PPUSH
31747: CALL_OW 153
31751: GO 31784
31753: LD_INT 3
31755: DOUBLE
31756: EQUAL
31757: IFTRUE 31761
31759: GO 31783
31761: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31762: LD_VAR 0 1
31766: PPUSH
31767: LD_VAR 0 6
31771: PPUSH
31772: LD_VAR 0 7
31776: PPUSH
31777: CALL_OW 154
31781: GO 31784
31783: POP
// end ;
31784: LD_VAR 0 2
31788: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31789: LD_INT 0
31791: PPUSH
31792: PPUSH
31793: PPUSH
31794: PPUSH
31795: PPUSH
31796: PPUSH
// if not unit or not building then
31797: LD_VAR 0 1
31801: NOT
31802: IFTRUE 31811
31804: PUSH
31805: LD_VAR 0 2
31809: NOT
31810: OR
31811: IFFALSE 31815
// exit ;
31813: GO 31973
// x := GetX ( building ) ;
31815: LD_ADDR_VAR 0 5
31819: PUSH
31820: LD_VAR 0 2
31824: PPUSH
31825: CALL_OW 250
31829: ST_TO_ADDR
// y := GetY ( building ) ;
31830: LD_ADDR_VAR 0 6
31834: PUSH
31835: LD_VAR 0 2
31839: PPUSH
31840: CALL_OW 251
31844: ST_TO_ADDR
// for i := 0 to 5 do
31845: LD_ADDR_VAR 0 4
31849: PUSH
31850: DOUBLE
31851: LD_INT 0
31853: DEC
31854: ST_TO_ADDR
31855: LD_INT 5
31857: PUSH
31858: FOR_TO
31859: IFFALSE 31971
// begin _x := ShiftX ( x , i , 3 ) ;
31861: LD_ADDR_VAR 0 7
31865: PUSH
31866: LD_VAR 0 5
31870: PPUSH
31871: LD_VAR 0 4
31875: PPUSH
31876: LD_INT 3
31878: PPUSH
31879: CALL_OW 272
31883: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31884: LD_ADDR_VAR 0 8
31888: PUSH
31889: LD_VAR 0 6
31893: PPUSH
31894: LD_VAR 0 4
31898: PPUSH
31899: LD_INT 3
31901: PPUSH
31902: CALL_OW 273
31906: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31907: LD_VAR 0 7
31911: PPUSH
31912: LD_VAR 0 8
31916: PPUSH
31917: CALL_OW 488
31921: NOT
31922: IFFALSE 31926
// continue ;
31924: GO 31858
// if HexInfo ( _x , _y ) = 0 then
31926: LD_VAR 0 7
31930: PPUSH
31931: LD_VAR 0 8
31935: PPUSH
31936: CALL_OW 428
31940: PUSH
31941: LD_INT 0
31943: EQUAL
31944: IFFALSE 31969
// begin ComMoveXY ( unit , _x , _y ) ;
31946: LD_VAR 0 1
31950: PPUSH
31951: LD_VAR 0 7
31955: PPUSH
31956: LD_VAR 0 8
31960: PPUSH
31961: CALL_OW 111
// exit ;
31965: POP
31966: POP
31967: GO 31973
// end ; end ;
31969: GO 31858
31971: POP
31972: POP
// end ;
31973: LD_VAR 0 3
31977: RET
// export function ScanBase ( side , base_area ) ; begin
31978: LD_INT 0
31980: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: LD_VAR 0 2
31990: PPUSH
31991: LD_INT 81
31993: PUSH
31994: LD_VAR 0 1
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PPUSH
32003: CALL_OW 70
32007: ST_TO_ADDR
// end ;
32008: LD_VAR 0 3
32012: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32013: LD_INT 0
32015: PPUSH
32016: PPUSH
32017: PPUSH
32018: PPUSH
// result := false ;
32019: LD_ADDR_VAR 0 2
32023: PUSH
32024: LD_INT 0
32026: ST_TO_ADDR
// side := GetSide ( unit ) ;
32027: LD_ADDR_VAR 0 3
32031: PUSH
32032: LD_VAR 0 1
32036: PPUSH
32037: CALL_OW 255
32041: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32042: LD_ADDR_VAR 0 4
32046: PUSH
32047: LD_VAR 0 1
32051: PPUSH
32052: CALL_OW 248
32056: ST_TO_ADDR
// case nat of 1 :
32057: LD_VAR 0 4
32061: PUSH
32062: LD_INT 1
32064: DOUBLE
32065: EQUAL
32066: IFTRUE 32070
32068: GO 32081
32070: POP
// tech := tech_lassight ; 2 :
32071: LD_ADDR_VAR 0 5
32075: PUSH
32076: LD_INT 12
32078: ST_TO_ADDR
32079: GO 32120
32081: LD_INT 2
32083: DOUBLE
32084: EQUAL
32085: IFTRUE 32089
32087: GO 32100
32089: POP
// tech := tech_mortar ; 3 :
32090: LD_ADDR_VAR 0 5
32094: PUSH
32095: LD_INT 41
32097: ST_TO_ADDR
32098: GO 32120
32100: LD_INT 3
32102: DOUBLE
32103: EQUAL
32104: IFTRUE 32108
32106: GO 32119
32108: POP
// tech := tech_bazooka ; end ;
32109: LD_ADDR_VAR 0 5
32113: PUSH
32114: LD_INT 44
32116: ST_TO_ADDR
32117: GO 32120
32119: POP
// if Researched ( side , tech ) then
32120: LD_VAR 0 3
32124: PPUSH
32125: LD_VAR 0 5
32129: PPUSH
32130: CALL_OW 325
32134: IFFALSE 32161
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32136: LD_ADDR_VAR 0 2
32140: PUSH
32141: LD_INT 5
32143: PUSH
32144: LD_INT 8
32146: PUSH
32147: LD_INT 9
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: PUSH
32155: LD_VAR 0 4
32159: ARRAY
32160: ST_TO_ADDR
// end ;
32161: LD_VAR 0 2
32165: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32166: LD_INT 0
32168: PPUSH
32169: PPUSH
32170: PPUSH
// if not mines then
32171: LD_VAR 0 2
32175: NOT
32176: IFFALSE 32180
// exit ;
32178: GO 32324
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32180: LD_ADDR_VAR 0 5
32184: PUSH
32185: LD_INT 81
32187: PUSH
32188: LD_VAR 0 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 3
32199: PUSH
32200: LD_INT 21
32202: PUSH
32203: LD_INT 3
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PPUSH
32218: CALL_OW 69
32222: ST_TO_ADDR
// for i in mines do
32223: LD_ADDR_VAR 0 4
32227: PUSH
32228: LD_VAR 0 2
32232: PUSH
32233: FOR_IN
32234: IFFALSE 32322
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32236: LD_VAR 0 4
32240: PUSH
32241: LD_INT 1
32243: ARRAY
32244: PPUSH
32245: LD_VAR 0 4
32249: PUSH
32250: LD_INT 2
32252: ARRAY
32253: PPUSH
32254: CALL_OW 458
32258: NOT
32259: IFFALSE 32263
// continue ;
32261: GO 32233
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32263: LD_VAR 0 4
32267: PUSH
32268: LD_INT 1
32270: ARRAY
32271: PPUSH
32272: LD_VAR 0 4
32276: PUSH
32277: LD_INT 2
32279: ARRAY
32280: PPUSH
32281: CALL_OW 428
32285: PUSH
32286: LD_VAR 0 5
32290: IN
32291: IFFALSE 32320
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32293: LD_VAR 0 4
32297: PUSH
32298: LD_INT 1
32300: ARRAY
32301: PPUSH
32302: LD_VAR 0 4
32306: PUSH
32307: LD_INT 2
32309: ARRAY
32310: PPUSH
32311: LD_VAR 0 1
32315: PPUSH
32316: CALL_OW 456
// end ;
32320: GO 32233
32322: POP
32323: POP
// end ;
32324: LD_VAR 0 3
32328: RET
// export function Count ( array ) ; begin
32329: LD_INT 0
32331: PPUSH
// result := array + 0 ;
32332: LD_ADDR_VAR 0 2
32336: PUSH
32337: LD_VAR 0 1
32341: PUSH
32342: LD_INT 0
32344: PLUS
32345: ST_TO_ADDR
// end ;
32346: LD_VAR 0 2
32350: RET
// export function IsEmpty ( building ) ; begin
32351: LD_INT 0
32353: PPUSH
// if not building then
32354: LD_VAR 0 1
32358: NOT
32359: IFFALSE 32363
// exit ;
32361: GO 32406
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32363: LD_ADDR_VAR 0 2
32367: PUSH
32368: LD_VAR 0 1
32372: PUSH
32373: LD_INT 22
32375: PUSH
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 255
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 58
32392: PUSH
32393: EMPTY
32394: LIST
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PPUSH
32400: CALL_OW 69
32404: IN
32405: ST_TO_ADDR
// end ;
32406: LD_VAR 0 2
32410: RET
// export function IsNotFull ( building ) ; var places ; begin
32411: LD_INT 0
32413: PPUSH
32414: PPUSH
// if not building then
32415: LD_VAR 0 1
32419: NOT
32420: IFFALSE 32424
// exit ;
32422: GO 32452
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32424: LD_ADDR_VAR 0 2
32428: PUSH
32429: LD_VAR 0 1
32433: PPUSH
32434: LD_INT 3
32436: PUSH
32437: LD_INT 62
32439: PUSH
32440: EMPTY
32441: LIST
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PPUSH
32447: CALL_OW 72
32451: ST_TO_ADDR
// end ;
32452: LD_VAR 0 2
32456: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32457: LD_INT 0
32459: PPUSH
32460: PPUSH
32461: PPUSH
32462: PPUSH
// tmp := [ ] ;
32463: LD_ADDR_VAR 0 3
32467: PUSH
32468: EMPTY
32469: ST_TO_ADDR
// list := [ ] ;
32470: LD_ADDR_VAR 0 5
32474: PUSH
32475: EMPTY
32476: ST_TO_ADDR
// for i = 16 to 25 do
32477: LD_ADDR_VAR 0 4
32481: PUSH
32482: DOUBLE
32483: LD_INT 16
32485: DEC
32486: ST_TO_ADDR
32487: LD_INT 25
32489: PUSH
32490: FOR_TO
32491: IFFALSE 32564
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32493: LD_ADDR_VAR 0 3
32497: PUSH
32498: LD_VAR 0 3
32502: PUSH
32503: LD_INT 22
32505: PUSH
32506: LD_VAR 0 1
32510: PPUSH
32511: CALL_OW 255
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 91
32522: PUSH
32523: LD_VAR 0 1
32527: PUSH
32528: LD_INT 6
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: PUSH
32536: LD_INT 30
32538: PUSH
32539: LD_VAR 0 4
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: PUSH
32553: EMPTY
32554: LIST
32555: PPUSH
32556: CALL_OW 69
32560: ADD
32561: ST_TO_ADDR
32562: GO 32490
32564: POP
32565: POP
// for i = 1 to tmp do
32566: LD_ADDR_VAR 0 4
32570: PUSH
32571: DOUBLE
32572: LD_INT 1
32574: DEC
32575: ST_TO_ADDR
32576: LD_VAR 0 3
32580: PUSH
32581: FOR_TO
32582: IFFALSE 32670
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32584: LD_ADDR_VAR 0 5
32588: PUSH
32589: LD_VAR 0 5
32593: PUSH
32594: LD_VAR 0 3
32598: PUSH
32599: LD_VAR 0 4
32603: ARRAY
32604: PPUSH
32605: CALL_OW 266
32609: PUSH
32610: LD_VAR 0 3
32614: PUSH
32615: LD_VAR 0 4
32619: ARRAY
32620: PPUSH
32621: CALL_OW 250
32625: PUSH
32626: LD_VAR 0 3
32630: PUSH
32631: LD_VAR 0 4
32635: ARRAY
32636: PPUSH
32637: CALL_OW 251
32641: PUSH
32642: LD_VAR 0 3
32646: PUSH
32647: LD_VAR 0 4
32651: ARRAY
32652: PPUSH
32653: CALL_OW 254
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: PUSH
32664: EMPTY
32665: LIST
32666: ADD
32667: ST_TO_ADDR
32668: GO 32581
32670: POP
32671: POP
// result := list ;
32672: LD_ADDR_VAR 0 2
32676: PUSH
32677: LD_VAR 0 5
32681: ST_TO_ADDR
// end ;
32682: LD_VAR 0 2
32686: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32687: LD_INT 0
32689: PPUSH
32690: PPUSH
32691: PPUSH
32692: PPUSH
32693: PPUSH
32694: PPUSH
32695: PPUSH
// if not factory then
32696: LD_VAR 0 1
32700: NOT
32701: IFFALSE 32705
// exit ;
32703: GO 33308
// if control = control_apeman then
32705: LD_VAR 0 4
32709: PUSH
32710: LD_INT 5
32712: EQUAL
32713: IFFALSE 32822
// begin tmp := UnitsInside ( factory ) ;
32715: LD_ADDR_VAR 0 8
32719: PUSH
32720: LD_VAR 0 1
32724: PPUSH
32725: CALL_OW 313
32729: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32730: LD_VAR 0 8
32734: PPUSH
32735: LD_INT 25
32737: PUSH
32738: LD_INT 12
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PPUSH
32745: CALL_OW 72
32749: NOT
32750: IFFALSE 32760
// control := control_manual ;
32752: LD_ADDR_VAR 0 4
32756: PUSH
32757: LD_INT 1
32759: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32760: LD_ADDR_VAR 0 8
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL 32457 0 1
32774: ST_TO_ADDR
// if tmp then
32775: LD_VAR 0 8
32779: IFFALSE 32822
// begin for i in tmp do
32781: LD_ADDR_VAR 0 7
32785: PUSH
32786: LD_VAR 0 8
32790: PUSH
32791: FOR_IN
32792: IFFALSE 32820
// if i [ 1 ] = b_ext_radio then
32794: LD_VAR 0 7
32798: PUSH
32799: LD_INT 1
32801: ARRAY
32802: PUSH
32803: LD_INT 22
32805: EQUAL
32806: IFFALSE 32818
// begin control := control_remote ;
32808: LD_ADDR_VAR 0 4
32812: PUSH
32813: LD_INT 2
32815: ST_TO_ADDR
// break ;
32816: GO 32820
// end ;
32818: GO 32791
32820: POP
32821: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32822: LD_VAR 0 1
32826: PPUSH
32827: LD_VAR 0 2
32831: PPUSH
32832: LD_VAR 0 3
32836: PPUSH
32837: LD_VAR 0 4
32841: PPUSH
32842: LD_VAR 0 5
32846: PPUSH
32847: CALL_OW 448
32851: IFFALSE 32886
// begin result := [ chassis , engine , control , weapon ] ;
32853: LD_ADDR_VAR 0 6
32857: PUSH
32858: LD_VAR 0 2
32862: PUSH
32863: LD_VAR 0 3
32867: PUSH
32868: LD_VAR 0 4
32872: PUSH
32873: LD_VAR 0 5
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: ST_TO_ADDR
// exit ;
32884: GO 33308
// end ; _chassis := AvailableChassisList ( factory ) ;
32886: LD_ADDR_VAR 0 9
32890: PUSH
32891: LD_VAR 0 1
32895: PPUSH
32896: CALL_OW 475
32900: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32901: LD_ADDR_VAR 0 11
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 476
32915: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32916: LD_ADDR_VAR 0 12
32920: PUSH
32921: LD_VAR 0 1
32925: PPUSH
32926: CALL_OW 477
32930: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32931: LD_ADDR_VAR 0 10
32935: PUSH
32936: LD_VAR 0 1
32940: PPUSH
32941: CALL_OW 478
32945: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32946: LD_VAR 0 9
32950: NOT
32951: IFTRUE 32960
32953: PUSH
32954: LD_VAR 0 11
32958: NOT
32959: OR
32960: IFTRUE 32969
32962: PUSH
32963: LD_VAR 0 12
32967: NOT
32968: OR
32969: IFTRUE 32978
32971: PUSH
32972: LD_VAR 0 10
32976: NOT
32977: OR
32978: IFFALSE 33013
// begin result := [ chassis , engine , control , weapon ] ;
32980: LD_ADDR_VAR 0 6
32984: PUSH
32985: LD_VAR 0 2
32989: PUSH
32990: LD_VAR 0 3
32994: PUSH
32995: LD_VAR 0 4
32999: PUSH
33000: LD_VAR 0 5
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: ST_TO_ADDR
// exit ;
33011: GO 33308
// end ; if not chassis in _chassis then
33013: LD_VAR 0 2
33017: PUSH
33018: LD_VAR 0 9
33022: IN
33023: NOT
33024: IFFALSE 33050
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33026: LD_ADDR_VAR 0 2
33030: PUSH
33031: LD_VAR 0 9
33035: PUSH
33036: LD_INT 1
33038: PPUSH
33039: LD_VAR 0 9
33043: PPUSH
33044: CALL_OW 12
33048: ARRAY
33049: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33050: LD_VAR 0 2
33054: PPUSH
33055: LD_VAR 0 3
33059: PPUSH
33060: CALL 33313 0 2
33064: NOT
33065: IFFALSE 33126
// repeat engine := _engine [ 1 ] ;
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: LD_VAR 0 11
33076: PUSH
33077: LD_INT 1
33079: ARRAY
33080: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33081: LD_ADDR_VAR 0 11
33085: PUSH
33086: LD_VAR 0 11
33090: PPUSH
33091: LD_INT 1
33093: PPUSH
33094: CALL_OW 3
33098: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33099: LD_VAR 0 2
33103: PPUSH
33104: LD_VAR 0 3
33108: PPUSH
33109: CALL 33313 0 2
33113: IFTRUE 33124
33115: PUSH
33116: LD_VAR 0 11
33120: PUSH
33121: EMPTY
33122: EQUAL
33123: OR
33124: IFFALSE 33067
// if not control in _control then
33126: LD_VAR 0 4
33130: PUSH
33131: LD_VAR 0 12
33135: IN
33136: NOT
33137: IFFALSE 33163
// control := _control [ rand ( 1 , _control ) ] ;
33139: LD_ADDR_VAR 0 4
33143: PUSH
33144: LD_VAR 0 12
33148: PUSH
33149: LD_INT 1
33151: PPUSH
33152: LD_VAR 0 12
33156: PPUSH
33157: CALL_OW 12
33161: ARRAY
33162: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33163: LD_VAR 0 2
33167: PPUSH
33168: LD_VAR 0 5
33172: PPUSH
33173: CALL 33535 0 2
33177: NOT
33178: IFFALSE 33239
// repeat weapon := _weapon [ 1 ] ;
33180: LD_ADDR_VAR 0 5
33184: PUSH
33185: LD_VAR 0 10
33189: PUSH
33190: LD_INT 1
33192: ARRAY
33193: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33194: LD_ADDR_VAR 0 10
33198: PUSH
33199: LD_VAR 0 10
33203: PPUSH
33204: LD_INT 1
33206: PPUSH
33207: CALL_OW 3
33211: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33212: LD_VAR 0 2
33216: PPUSH
33217: LD_VAR 0 5
33221: PPUSH
33222: CALL 33535 0 2
33226: IFTRUE 33237
33228: PUSH
33229: LD_VAR 0 10
33233: PUSH
33234: EMPTY
33235: EQUAL
33236: OR
33237: IFFALSE 33180
// result := [ ] ;
33239: LD_ADDR_VAR 0 6
33243: PUSH
33244: EMPTY
33245: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33246: LD_VAR 0 1
33250: PPUSH
33251: LD_VAR 0 2
33255: PPUSH
33256: LD_VAR 0 3
33260: PPUSH
33261: LD_VAR 0 4
33265: PPUSH
33266: LD_VAR 0 5
33270: PPUSH
33271: CALL_OW 448
33275: IFFALSE 33308
// result := [ chassis , engine , control , weapon ] ;
33277: LD_ADDR_VAR 0 6
33281: PUSH
33282: LD_VAR 0 2
33286: PUSH
33287: LD_VAR 0 3
33291: PUSH
33292: LD_VAR 0 4
33296: PUSH
33297: LD_VAR 0 5
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
// end ;
33308: LD_VAR 0 6
33312: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33313: LD_INT 0
33315: PPUSH
// if not chassis or not engine then
33316: LD_VAR 0 1
33320: NOT
33321: IFTRUE 33330
33323: PUSH
33324: LD_VAR 0 2
33328: NOT
33329: OR
33330: IFFALSE 33334
// exit ;
33332: GO 33530
// case engine of engine_solar :
33334: LD_VAR 0 2
33338: PUSH
33339: LD_INT 2
33341: DOUBLE
33342: EQUAL
33343: IFTRUE 33347
33345: GO 33385
33347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33348: LD_ADDR_VAR 0 3
33352: PUSH
33353: LD_INT 11
33355: PUSH
33356: LD_INT 12
33358: PUSH
33359: LD_INT 13
33361: PUSH
33362: LD_INT 14
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 2
33370: PUSH
33371: LD_INT 3
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: ST_TO_ADDR
33383: GO 33514
33385: LD_INT 1
33387: DOUBLE
33388: EQUAL
33389: IFTRUE 33393
33391: GO 33455
33393: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33394: LD_ADDR_VAR 0 3
33398: PUSH
33399: LD_INT 11
33401: PUSH
33402: LD_INT 12
33404: PUSH
33405: LD_INT 13
33407: PUSH
33408: LD_INT 14
33410: PUSH
33411: LD_INT 1
33413: PUSH
33414: LD_INT 2
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: LD_INT 4
33422: PUSH
33423: LD_INT 5
33425: PUSH
33426: LD_INT 21
33428: PUSH
33429: LD_INT 23
33431: PUSH
33432: LD_INT 22
33434: PUSH
33435: LD_INT 24
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
33453: GO 33514
33455: LD_INT 3
33457: DOUBLE
33458: EQUAL
33459: IFTRUE 33463
33461: GO 33513
33463: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33464: LD_ADDR_VAR 0 3
33468: PUSH
33469: LD_INT 13
33471: PUSH
33472: LD_INT 14
33474: PUSH
33475: LD_INT 2
33477: PUSH
33478: LD_INT 3
33480: PUSH
33481: LD_INT 4
33483: PUSH
33484: LD_INT 5
33486: PUSH
33487: LD_INT 21
33489: PUSH
33490: LD_INT 22
33492: PUSH
33493: LD_INT 23
33495: PUSH
33496: LD_INT 24
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
33511: GO 33514
33513: POP
// result := ( chassis in result ) ;
33514: LD_ADDR_VAR 0 3
33518: PUSH
33519: LD_VAR 0 1
33523: PUSH
33524: LD_VAR 0 3
33528: IN
33529: ST_TO_ADDR
// end ;
33530: LD_VAR 0 3
33534: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33535: LD_INT 0
33537: PPUSH
// if not chassis or not weapon then
33538: LD_VAR 0 1
33542: NOT
33543: IFTRUE 33552
33545: PUSH
33546: LD_VAR 0 2
33550: NOT
33551: OR
33552: IFFALSE 33556
// exit ;
33554: GO 34616
// case weapon of us_machine_gun :
33556: LD_VAR 0 2
33560: PUSH
33561: LD_INT 2
33563: DOUBLE
33564: EQUAL
33565: IFTRUE 33569
33567: GO 33599
33569: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33570: LD_ADDR_VAR 0 3
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: LD_INT 2
33580: PUSH
33581: LD_INT 3
33583: PUSH
33584: LD_INT 4
33586: PUSH
33587: LD_INT 5
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
33597: GO 34600
33599: LD_INT 3
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33607
33605: GO 33637
33607: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: LD_INT 1
33615: PUSH
33616: LD_INT 2
33618: PUSH
33619: LD_INT 3
33621: PUSH
33622: LD_INT 4
33624: PUSH
33625: LD_INT 5
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
33635: GO 34600
33637: LD_INT 11
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33675
33645: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: LD_INT 4
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: ST_TO_ADDR
33673: GO 34600
33675: LD_INT 4
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33709
33683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_INT 2
33691: PUSH
33692: LD_INT 3
33694: PUSH
33695: LD_INT 4
33697: PUSH
33698: LD_INT 5
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
33707: GO 34600
33709: LD_INT 5
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33717
33715: GO 33743
33717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33718: LD_ADDR_VAR 0 3
33722: PUSH
33723: LD_INT 2
33725: PUSH
33726: LD_INT 3
33728: PUSH
33729: LD_INT 4
33731: PUSH
33732: LD_INT 5
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 34600
33743: LD_INT 9
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33777
33751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 3
33762: PUSH
33763: LD_INT 4
33765: PUSH
33766: LD_INT 5
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: ST_TO_ADDR
33775: GO 34600
33777: LD_INT 7
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33785
33783: GO 33811
33785: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33786: LD_ADDR_VAR 0 3
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 4
33799: PUSH
33800: LD_INT 5
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: ST_TO_ADDR
33809: GO 34600
33811: LD_INT 12
33813: DOUBLE
33814: EQUAL
33815: IFTRUE 33819
33817: GO 33845
33819: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33820: LD_ADDR_VAR 0 3
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: LD_INT 3
33830: PUSH
33831: LD_INT 4
33833: PUSH
33834: LD_INT 5
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: ST_TO_ADDR
33843: GO 34600
33845: LD_INT 13
33847: DOUBLE
33848: EQUAL
33849: IFTRUE 33853
33851: GO 33879
33853: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33854: LD_ADDR_VAR 0 3
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 3
33864: PUSH
33865: LD_INT 4
33867: PUSH
33868: LD_INT 5
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: ST_TO_ADDR
33877: GO 34600
33879: LD_INT 14
33881: DOUBLE
33882: EQUAL
33883: IFTRUE 33887
33885: GO 33905
33887: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33888: LD_ADDR_VAR 0 3
33892: PUSH
33893: LD_INT 4
33895: PUSH
33896: LD_INT 5
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: ST_TO_ADDR
33903: GO 34600
33905: LD_INT 6
33907: DOUBLE
33908: EQUAL
33909: IFTRUE 33913
33911: GO 33931
33913: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33914: LD_ADDR_VAR 0 3
33918: PUSH
33919: LD_INT 4
33921: PUSH
33922: LD_INT 5
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: ST_TO_ADDR
33929: GO 34600
33931: LD_INT 10
33933: DOUBLE
33934: EQUAL
33935: IFTRUE 33939
33937: GO 33957
33939: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_INT 4
33947: PUSH
33948: LD_INT 5
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: ST_TO_ADDR
33955: GO 34600
33957: LD_INT 22
33959: DOUBLE
33960: EQUAL
33961: IFTRUE 33965
33963: GO 33991
33965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33966: LD_ADDR_VAR 0 3
33970: PUSH
33971: LD_INT 11
33973: PUSH
33974: LD_INT 12
33976: PUSH
33977: LD_INT 13
33979: PUSH
33980: LD_INT 14
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: ST_TO_ADDR
33989: GO 34600
33991: LD_INT 23
33993: DOUBLE
33994: EQUAL
33995: IFTRUE 33999
33997: GO 34025
33999: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34000: LD_ADDR_VAR 0 3
34004: PUSH
34005: LD_INT 11
34007: PUSH
34008: LD_INT 12
34010: PUSH
34011: LD_INT 13
34013: PUSH
34014: LD_INT 14
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: ST_TO_ADDR
34023: GO 34600
34025: LD_INT 24
34027: DOUBLE
34028: EQUAL
34029: IFTRUE 34033
34031: GO 34059
34033: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34034: LD_ADDR_VAR 0 3
34038: PUSH
34039: LD_INT 11
34041: PUSH
34042: LD_INT 12
34044: PUSH
34045: LD_INT 13
34047: PUSH
34048: LD_INT 14
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: ST_TO_ADDR
34057: GO 34600
34059: LD_INT 30
34061: DOUBLE
34062: EQUAL
34063: IFTRUE 34067
34065: GO 34093
34067: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34068: LD_ADDR_VAR 0 3
34072: PUSH
34073: LD_INT 11
34075: PUSH
34076: LD_INT 12
34078: PUSH
34079: LD_INT 13
34081: PUSH
34082: LD_INT 14
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
34091: GO 34600
34093: LD_INT 25
34095: DOUBLE
34096: EQUAL
34097: IFTRUE 34101
34099: GO 34119
34101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34102: LD_ADDR_VAR 0 3
34106: PUSH
34107: LD_INT 13
34109: PUSH
34110: LD_INT 14
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: ST_TO_ADDR
34117: GO 34600
34119: LD_INT 27
34121: DOUBLE
34122: EQUAL
34123: IFTRUE 34127
34125: GO 34145
34127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34128: LD_ADDR_VAR 0 3
34132: PUSH
34133: LD_INT 13
34135: PUSH
34136: LD_INT 14
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: ST_TO_ADDR
34143: GO 34600
34145: LD_INT 92
34147: DOUBLE
34148: EQUAL
34149: IFTRUE 34153
34151: GO 34179
34153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34154: LD_ADDR_VAR 0 3
34158: PUSH
34159: LD_INT 11
34161: PUSH
34162: LD_INT 12
34164: PUSH
34165: LD_INT 13
34167: PUSH
34168: LD_INT 14
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
34177: GO 34600
34179: LD_INT 28
34181: DOUBLE
34182: EQUAL
34183: IFTRUE 34187
34185: GO 34205
34187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34188: LD_ADDR_VAR 0 3
34192: PUSH
34193: LD_INT 13
34195: PUSH
34196: LD_INT 14
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: ST_TO_ADDR
34203: GO 34600
34205: LD_INT 29
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 34231
34213: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34214: LD_ADDR_VAR 0 3
34218: PUSH
34219: LD_INT 13
34221: PUSH
34222: LD_INT 14
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: ST_TO_ADDR
34229: GO 34600
34231: LD_INT 31
34233: DOUBLE
34234: EQUAL
34235: IFTRUE 34239
34237: GO 34257
34239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34240: LD_ADDR_VAR 0 3
34244: PUSH
34245: LD_INT 13
34247: PUSH
34248: LD_INT 14
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: ST_TO_ADDR
34255: GO 34600
34257: LD_INT 26
34259: DOUBLE
34260: EQUAL
34261: IFTRUE 34265
34263: GO 34283
34265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34266: LD_ADDR_VAR 0 3
34270: PUSH
34271: LD_INT 13
34273: PUSH
34274: LD_INT 14
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: ST_TO_ADDR
34281: GO 34600
34283: LD_INT 42
34285: DOUBLE
34286: EQUAL
34287: IFTRUE 34291
34289: GO 34317
34291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34292: LD_ADDR_VAR 0 3
34296: PUSH
34297: LD_INT 21
34299: PUSH
34300: LD_INT 22
34302: PUSH
34303: LD_INT 23
34305: PUSH
34306: LD_INT 24
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: ST_TO_ADDR
34315: GO 34600
34317: LD_INT 43
34319: DOUBLE
34320: EQUAL
34321: IFTRUE 34325
34323: GO 34351
34325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34326: LD_ADDR_VAR 0 3
34330: PUSH
34331: LD_INT 21
34333: PUSH
34334: LD_INT 22
34336: PUSH
34337: LD_INT 23
34339: PUSH
34340: LD_INT 24
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
34349: GO 34600
34351: LD_INT 44
34353: DOUBLE
34354: EQUAL
34355: IFTRUE 34359
34357: GO 34385
34359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34360: LD_ADDR_VAR 0 3
34364: PUSH
34365: LD_INT 21
34367: PUSH
34368: LD_INT 22
34370: PUSH
34371: LD_INT 23
34373: PUSH
34374: LD_INT 24
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: ST_TO_ADDR
34383: GO 34600
34385: LD_INT 45
34387: DOUBLE
34388: EQUAL
34389: IFTRUE 34393
34391: GO 34419
34393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34394: LD_ADDR_VAR 0 3
34398: PUSH
34399: LD_INT 21
34401: PUSH
34402: LD_INT 22
34404: PUSH
34405: LD_INT 23
34407: PUSH
34408: LD_INT 24
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: ST_TO_ADDR
34417: GO 34600
34419: LD_INT 49
34421: DOUBLE
34422: EQUAL
34423: IFTRUE 34427
34425: GO 34453
34427: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34428: LD_ADDR_VAR 0 3
34432: PUSH
34433: LD_INT 21
34435: PUSH
34436: LD_INT 22
34438: PUSH
34439: LD_INT 23
34441: PUSH
34442: LD_INT 24
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
34451: GO 34600
34453: LD_INT 51
34455: DOUBLE
34456: EQUAL
34457: IFTRUE 34461
34459: GO 34487
34461: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34462: LD_ADDR_VAR 0 3
34466: PUSH
34467: LD_INT 21
34469: PUSH
34470: LD_INT 22
34472: PUSH
34473: LD_INT 23
34475: PUSH
34476: LD_INT 24
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: ST_TO_ADDR
34485: GO 34600
34487: LD_INT 52
34489: DOUBLE
34490: EQUAL
34491: IFTRUE 34495
34493: GO 34521
34495: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34496: LD_ADDR_VAR 0 3
34500: PUSH
34501: LD_INT 21
34503: PUSH
34504: LD_INT 22
34506: PUSH
34507: LD_INT 23
34509: PUSH
34510: LD_INT 24
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
34519: GO 34600
34521: LD_INT 53
34523: DOUBLE
34524: EQUAL
34525: IFTRUE 34529
34527: GO 34547
34529: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34530: LD_ADDR_VAR 0 3
34534: PUSH
34535: LD_INT 23
34537: PUSH
34538: LD_INT 24
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: ST_TO_ADDR
34545: GO 34600
34547: LD_INT 46
34549: DOUBLE
34550: EQUAL
34551: IFTRUE 34555
34553: GO 34573
34555: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34556: LD_ADDR_VAR 0 3
34560: PUSH
34561: LD_INT 23
34563: PUSH
34564: LD_INT 24
34566: PUSH
34567: EMPTY
34568: LIST
34569: LIST
34570: ST_TO_ADDR
34571: GO 34600
34573: LD_INT 47
34575: DOUBLE
34576: EQUAL
34577: IFTRUE 34581
34579: GO 34599
34581: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34582: LD_ADDR_VAR 0 3
34586: PUSH
34587: LD_INT 23
34589: PUSH
34590: LD_INT 24
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: ST_TO_ADDR
34597: GO 34600
34599: POP
// result := ( chassis in result ) ;
34600: LD_ADDR_VAR 0 3
34604: PUSH
34605: LD_VAR 0 1
34609: PUSH
34610: LD_VAR 0 3
34614: IN
34615: ST_TO_ADDR
// end ;
34616: LD_VAR 0 3
34620: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34621: LD_INT 0
34623: PPUSH
34624: PPUSH
34625: PPUSH
34626: PPUSH
34627: PPUSH
34628: PPUSH
34629: PPUSH
// result := array ;
34630: LD_ADDR_VAR 0 5
34634: PUSH
34635: LD_VAR 0 1
34639: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34640: LD_VAR 0 1
34644: NOT
34645: IFTRUE 34654
34647: PUSH
34648: LD_VAR 0 2
34652: NOT
34653: OR
34654: IFTRUE 34663
34656: PUSH
34657: LD_VAR 0 3
34661: NOT
34662: OR
34663: IFTRUE 34677
34665: PUSH
34666: LD_VAR 0 2
34670: PUSH
34671: LD_VAR 0 1
34675: GREATER
34676: OR
34677: IFTRUE 34691
34679: PUSH
34680: LD_VAR 0 3
34684: PUSH
34685: LD_VAR 0 1
34689: GREATER
34690: OR
34691: IFFALSE 34695
// exit ;
34693: GO 34991
// if direction then
34695: LD_VAR 0 4
34699: IFFALSE 34763
// begin d := 1 ;
34701: LD_ADDR_VAR 0 9
34705: PUSH
34706: LD_INT 1
34708: ST_TO_ADDR
// if i_from > i_to then
34709: LD_VAR 0 2
34713: PUSH
34714: LD_VAR 0 3
34718: GREATER
34719: IFFALSE 34745
// length := ( array - i_from ) + i_to else
34721: LD_ADDR_VAR 0 11
34725: PUSH
34726: LD_VAR 0 1
34730: PUSH
34731: LD_VAR 0 2
34735: MINUS
34736: PUSH
34737: LD_VAR 0 3
34741: PLUS
34742: ST_TO_ADDR
34743: GO 34761
// length := i_to - i_from ;
34745: LD_ADDR_VAR 0 11
34749: PUSH
34750: LD_VAR 0 3
34754: PUSH
34755: LD_VAR 0 2
34759: MINUS
34760: ST_TO_ADDR
// end else
34761: GO 34824
// begin d := - 1 ;
34763: LD_ADDR_VAR 0 9
34767: PUSH
34768: LD_INT 1
34770: NEG
34771: ST_TO_ADDR
// if i_from > i_to then
34772: LD_VAR 0 2
34776: PUSH
34777: LD_VAR 0 3
34781: GREATER
34782: IFFALSE 34802
// length := i_from - i_to else
34784: LD_ADDR_VAR 0 11
34788: PUSH
34789: LD_VAR 0 2
34793: PUSH
34794: LD_VAR 0 3
34798: MINUS
34799: ST_TO_ADDR
34800: GO 34824
// length := ( array - i_to ) + i_from ;
34802: LD_ADDR_VAR 0 11
34806: PUSH
34807: LD_VAR 0 1
34811: PUSH
34812: LD_VAR 0 3
34816: MINUS
34817: PUSH
34818: LD_VAR 0 2
34822: PLUS
34823: ST_TO_ADDR
// end ; if not length then
34824: LD_VAR 0 11
34828: NOT
34829: IFFALSE 34833
// exit ;
34831: GO 34991
// tmp := array ;
34833: LD_ADDR_VAR 0 10
34837: PUSH
34838: LD_VAR 0 1
34842: ST_TO_ADDR
// for i = 1 to length do
34843: LD_ADDR_VAR 0 6
34847: PUSH
34848: DOUBLE
34849: LD_INT 1
34851: DEC
34852: ST_TO_ADDR
34853: LD_VAR 0 11
34857: PUSH
34858: FOR_TO
34859: IFFALSE 34979
// begin for j = 1 to array do
34861: LD_ADDR_VAR 0 7
34865: PUSH
34866: DOUBLE
34867: LD_INT 1
34869: DEC
34870: ST_TO_ADDR
34871: LD_VAR 0 1
34875: PUSH
34876: FOR_TO
34877: IFFALSE 34965
// begin k := j + d ;
34879: LD_ADDR_VAR 0 8
34883: PUSH
34884: LD_VAR 0 7
34888: PUSH
34889: LD_VAR 0 9
34893: PLUS
34894: ST_TO_ADDR
// if k > array then
34895: LD_VAR 0 8
34899: PUSH
34900: LD_VAR 0 1
34904: GREATER
34905: IFFALSE 34915
// k := 1 ;
34907: LD_ADDR_VAR 0 8
34911: PUSH
34912: LD_INT 1
34914: ST_TO_ADDR
// if not k then
34915: LD_VAR 0 8
34919: NOT
34920: IFFALSE 34932
// k := array ;
34922: LD_ADDR_VAR 0 8
34926: PUSH
34927: LD_VAR 0 1
34931: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34932: LD_ADDR_VAR 0 10
34936: PUSH
34937: LD_VAR 0 10
34941: PPUSH
34942: LD_VAR 0 8
34946: PPUSH
34947: LD_VAR 0 1
34951: PUSH
34952: LD_VAR 0 7
34956: ARRAY
34957: PPUSH
34958: CALL_OW 1
34962: ST_TO_ADDR
// end ;
34963: GO 34876
34965: POP
34966: POP
// array := tmp ;
34967: LD_ADDR_VAR 0 1
34971: PUSH
34972: LD_VAR 0 10
34976: ST_TO_ADDR
// end ;
34977: GO 34858
34979: POP
34980: POP
// result := array ;
34981: LD_ADDR_VAR 0 5
34985: PUSH
34986: LD_VAR 0 1
34990: ST_TO_ADDR
// end ;
34991: LD_VAR 0 5
34995: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34996: LD_INT 0
34998: PPUSH
34999: PPUSH
// result := 0 ;
35000: LD_ADDR_VAR 0 3
35004: PUSH
35005: LD_INT 0
35007: ST_TO_ADDR
// if not array or not value in array then
35008: LD_VAR 0 1
35012: NOT
35013: IFTRUE 35028
35015: PUSH
35016: LD_VAR 0 2
35020: PUSH
35021: LD_VAR 0 1
35025: IN
35026: NOT
35027: OR
35028: IFFALSE 35032
// exit ;
35030: GO 35086
// for i = 1 to array do
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: DOUBLE
35038: LD_INT 1
35040: DEC
35041: ST_TO_ADDR
35042: LD_VAR 0 1
35046: PUSH
35047: FOR_TO
35048: IFFALSE 35084
// if value = array [ i ] then
35050: LD_VAR 0 2
35054: PUSH
35055: LD_VAR 0 1
35059: PUSH
35060: LD_VAR 0 4
35064: ARRAY
35065: EQUAL
35066: IFFALSE 35082
// begin result := i ;
35068: LD_ADDR_VAR 0 3
35072: PUSH
35073: LD_VAR 0 4
35077: ST_TO_ADDR
// exit ;
35078: POP
35079: POP
35080: GO 35086
// end ;
35082: GO 35047
35084: POP
35085: POP
// end ;
35086: LD_VAR 0 3
35090: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35091: LD_INT 0
35093: PPUSH
// vc_chassis := chassis ;
35094: LD_ADDR_OWVAR 37
35098: PUSH
35099: LD_VAR 0 1
35103: ST_TO_ADDR
// vc_engine := engine ;
35104: LD_ADDR_OWVAR 39
35108: PUSH
35109: LD_VAR 0 2
35113: ST_TO_ADDR
// vc_control := control ;
35114: LD_ADDR_OWVAR 38
35118: PUSH
35119: LD_VAR 0 3
35123: ST_TO_ADDR
// vc_weapon := weapon ;
35124: LD_ADDR_OWVAR 40
35128: PUSH
35129: LD_VAR 0 4
35133: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35134: LD_ADDR_OWVAR 41
35138: PUSH
35139: LD_VAR 0 5
35143: ST_TO_ADDR
// end ;
35144: LD_VAR 0 6
35148: RET
// export function WantPlant ( unit ) ; var task ; begin
35149: LD_INT 0
35151: PPUSH
35152: PPUSH
// result := false ;
35153: LD_ADDR_VAR 0 2
35157: PUSH
35158: LD_INT 0
35160: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_VAR 0 1
35170: PPUSH
35171: CALL_OW 437
35175: ST_TO_ADDR
// if task then
35176: LD_VAR 0 3
35180: IFFALSE 35208
// if task [ 1 ] [ 1 ] = p then
35182: LD_VAR 0 3
35186: PUSH
35187: LD_INT 1
35189: ARRAY
35190: PUSH
35191: LD_INT 1
35193: ARRAY
35194: PUSH
35195: LD_STRING p
35197: EQUAL
35198: IFFALSE 35208
// result := true ;
35200: LD_ADDR_VAR 0 2
35204: PUSH
35205: LD_INT 1
35207: ST_TO_ADDR
// end ;
35208: LD_VAR 0 2
35212: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35213: LD_INT 0
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
// if pos < 1 then
35219: LD_VAR 0 2
35223: PUSH
35224: LD_INT 1
35226: LESS
35227: IFFALSE 35231
// exit ;
35229: GO 35534
// if pos = 1 then
35231: LD_VAR 0 2
35235: PUSH
35236: LD_INT 1
35238: EQUAL
35239: IFFALSE 35272
// result := Replace ( arr , pos [ 1 ] , value ) else
35241: LD_ADDR_VAR 0 4
35245: PUSH
35246: LD_VAR 0 1
35250: PPUSH
35251: LD_VAR 0 2
35255: PUSH
35256: LD_INT 1
35258: ARRAY
35259: PPUSH
35260: LD_VAR 0 3
35264: PPUSH
35265: CALL_OW 1
35269: ST_TO_ADDR
35270: GO 35534
// begin tmp := arr ;
35272: LD_ADDR_VAR 0 6
35276: PUSH
35277: LD_VAR 0 1
35281: ST_TO_ADDR
// s_arr := [ tmp ] ;
35282: LD_ADDR_VAR 0 7
35286: PUSH
35287: LD_VAR 0 6
35291: PUSH
35292: EMPTY
35293: LIST
35294: ST_TO_ADDR
// for i = 1 to pos - 1 do
35295: LD_ADDR_VAR 0 5
35299: PUSH
35300: DOUBLE
35301: LD_INT 1
35303: DEC
35304: ST_TO_ADDR
35305: LD_VAR 0 2
35309: PUSH
35310: LD_INT 1
35312: MINUS
35313: PUSH
35314: FOR_TO
35315: IFFALSE 35360
// begin tmp := tmp [ pos [ i ] ] ;
35317: LD_ADDR_VAR 0 6
35321: PUSH
35322: LD_VAR 0 6
35326: PUSH
35327: LD_VAR 0 2
35331: PUSH
35332: LD_VAR 0 5
35336: ARRAY
35337: ARRAY
35338: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35339: LD_ADDR_VAR 0 7
35343: PUSH
35344: LD_VAR 0 7
35348: PUSH
35349: LD_VAR 0 6
35353: PUSH
35354: EMPTY
35355: LIST
35356: ADD
35357: ST_TO_ADDR
// end ;
35358: GO 35314
35360: POP
35361: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35362: LD_ADDR_VAR 0 6
35366: PUSH
35367: LD_VAR 0 6
35371: PPUSH
35372: LD_VAR 0 2
35376: PUSH
35377: LD_VAR 0 2
35381: ARRAY
35382: PPUSH
35383: LD_VAR 0 3
35387: PPUSH
35388: CALL_OW 1
35392: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35393: LD_ADDR_VAR 0 7
35397: PUSH
35398: LD_VAR 0 7
35402: PPUSH
35403: LD_VAR 0 7
35407: PPUSH
35408: LD_VAR 0 6
35412: PPUSH
35413: CALL_OW 1
35417: ST_TO_ADDR
// for i = s_arr downto 2 do
35418: LD_ADDR_VAR 0 5
35422: PUSH
35423: DOUBLE
35424: LD_VAR 0 7
35428: INC
35429: ST_TO_ADDR
35430: LD_INT 2
35432: PUSH
35433: FOR_DOWNTO
35434: IFFALSE 35518
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35436: LD_ADDR_VAR 0 6
35440: PUSH
35441: LD_VAR 0 7
35445: PUSH
35446: LD_VAR 0 5
35450: PUSH
35451: LD_INT 1
35453: MINUS
35454: ARRAY
35455: PPUSH
35456: LD_VAR 0 2
35460: PUSH
35461: LD_VAR 0 5
35465: PUSH
35466: LD_INT 1
35468: MINUS
35469: ARRAY
35470: PPUSH
35471: LD_VAR 0 7
35475: PUSH
35476: LD_VAR 0 5
35480: ARRAY
35481: PPUSH
35482: CALL_OW 1
35486: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35487: LD_ADDR_VAR 0 7
35491: PUSH
35492: LD_VAR 0 7
35496: PPUSH
35497: LD_VAR 0 5
35501: PUSH
35502: LD_INT 1
35504: MINUS
35505: PPUSH
35506: LD_VAR 0 6
35510: PPUSH
35511: CALL_OW 1
35515: ST_TO_ADDR
// end ;
35516: GO 35433
35518: POP
35519: POP
// result := s_arr [ 1 ] ;
35520: LD_ADDR_VAR 0 4
35524: PUSH
35525: LD_VAR 0 7
35529: PUSH
35530: LD_INT 1
35532: ARRAY
35533: ST_TO_ADDR
// end ; end ;
35534: LD_VAR 0 4
35538: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35539: LD_INT 0
35541: PPUSH
35542: PPUSH
// if not list then
35543: LD_VAR 0 1
35547: NOT
35548: IFFALSE 35552
// exit ;
35550: GO 35643
// i := list [ pos1 ] ;
35552: LD_ADDR_VAR 0 5
35556: PUSH
35557: LD_VAR 0 1
35561: PUSH
35562: LD_VAR 0 2
35566: ARRAY
35567: ST_TO_ADDR
// if not i then
35568: LD_VAR 0 5
35572: NOT
35573: IFFALSE 35577
// exit ;
35575: GO 35643
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35577: LD_ADDR_VAR 0 1
35581: PUSH
35582: LD_VAR 0 1
35586: PPUSH
35587: LD_VAR 0 2
35591: PPUSH
35592: LD_VAR 0 1
35596: PUSH
35597: LD_VAR 0 3
35601: ARRAY
35602: PPUSH
35603: CALL_OW 1
35607: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35608: LD_ADDR_VAR 0 1
35612: PUSH
35613: LD_VAR 0 1
35617: PPUSH
35618: LD_VAR 0 3
35622: PPUSH
35623: LD_VAR 0 5
35627: PPUSH
35628: CALL_OW 1
35632: ST_TO_ADDR
// result := list ;
35633: LD_ADDR_VAR 0 4
35637: PUSH
35638: LD_VAR 0 1
35642: ST_TO_ADDR
// end ;
35643: LD_VAR 0 4
35647: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35648: LD_INT 0
35650: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35651: LD_ADDR_VAR 0 5
35655: PUSH
35656: LD_VAR 0 1
35660: PPUSH
35661: CALL_OW 250
35665: PPUSH
35666: LD_VAR 0 1
35670: PPUSH
35671: CALL_OW 251
35675: PPUSH
35676: LD_VAR 0 2
35680: PPUSH
35681: LD_VAR 0 3
35685: PPUSH
35686: LD_VAR 0 4
35690: PPUSH
35691: CALL 36073 0 5
35695: ST_TO_ADDR
// end ;
35696: LD_VAR 0 5
35700: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35701: LD_INT 0
35703: PPUSH
35704: PPUSH
35705: PPUSH
35706: PPUSH
// if not list or not unit then
35707: LD_VAR 0 2
35711: NOT
35712: IFTRUE 35721
35714: PUSH
35715: LD_VAR 0 1
35719: NOT
35720: OR
35721: IFFALSE 35725
// exit ;
35723: GO 36068
// result := [ ] ;
35725: LD_ADDR_VAR 0 5
35729: PUSH
35730: EMPTY
35731: ST_TO_ADDR
// for i in list do
35732: LD_ADDR_VAR 0 6
35736: PUSH
35737: LD_VAR 0 2
35741: PUSH
35742: FOR_IN
35743: IFFALSE 35961
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35745: LD_ADDR_VAR 0 8
35749: PUSH
35750: LD_VAR 0 1
35754: PPUSH
35755: LD_VAR 0 6
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: PPUSH
35764: LD_VAR 0 6
35768: PUSH
35769: LD_INT 2
35771: ARRAY
35772: PPUSH
35773: CALL_OW 297
35777: ST_TO_ADDR
// if not Count ( result ) then
35778: LD_VAR 0 5
35782: PPUSH
35783: CALL 32329 0 1
35787: NOT
35788: IFFALSE 35821
// begin result := Join ( result , [ i , tmp ] ) ;
35790: LD_ADDR_VAR 0 5
35794: PUSH
35795: LD_VAR 0 5
35799: PPUSH
35800: LD_VAR 0 6
35804: PUSH
35805: LD_VAR 0 8
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PPUSH
35814: CALL 68261 0 2
35818: ST_TO_ADDR
// continue ;
35819: GO 35742
// end ; if result [ result ] [ 2 ] <= tmp then
35821: LD_VAR 0 5
35825: PUSH
35826: LD_VAR 0 5
35830: ARRAY
35831: PUSH
35832: LD_INT 2
35834: ARRAY
35835: PUSH
35836: LD_VAR 0 8
35840: LESSEQUAL
35841: IFFALSE 35874
// result := Join ( result , [ i , tmp ] ) else
35843: LD_ADDR_VAR 0 5
35847: PUSH
35848: LD_VAR 0 5
35852: PPUSH
35853: LD_VAR 0 6
35857: PUSH
35858: LD_VAR 0 8
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PPUSH
35867: CALL 68261 0 2
35871: ST_TO_ADDR
35872: GO 35959
// begin for j := 1 to Count ( result ) do
35874: LD_ADDR_VAR 0 7
35878: PUSH
35879: DOUBLE
35880: LD_INT 1
35882: DEC
35883: ST_TO_ADDR
35884: LD_VAR 0 5
35888: PPUSH
35889: CALL 32329 0 1
35893: PUSH
35894: FOR_TO
35895: IFFALSE 35957
// begin if tmp < result [ j ] [ 2 ] then
35897: LD_VAR 0 8
35901: PUSH
35902: LD_VAR 0 5
35906: PUSH
35907: LD_VAR 0 7
35911: ARRAY
35912: PUSH
35913: LD_INT 2
35915: ARRAY
35916: LESS
35917: IFFALSE 35955
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35919: LD_ADDR_VAR 0 5
35923: PUSH
35924: LD_VAR 0 5
35928: PPUSH
35929: LD_VAR 0 7
35933: PPUSH
35934: LD_VAR 0 6
35938: PUSH
35939: LD_VAR 0 8
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PPUSH
35948: CALL_OW 2
35952: ST_TO_ADDR
// break ;
35953: GO 35957
// end ; end ;
35955: GO 35894
35957: POP
35958: POP
// end ; end ;
35959: GO 35742
35961: POP
35962: POP
// if result and not asc then
35963: LD_VAR 0 5
35967: IFFALSE 35976
35969: PUSH
35970: LD_VAR 0 3
35974: NOT
35975: AND
35976: IFFALSE 35993
// result := ReverseArray ( result ) ;
35978: LD_ADDR_VAR 0 5
35982: PUSH
35983: LD_VAR 0 5
35987: PPUSH
35988: CALL 63351 0 1
35992: ST_TO_ADDR
// tmp := [ ] ;
35993: LD_ADDR_VAR 0 8
35997: PUSH
35998: EMPTY
35999: ST_TO_ADDR
// if mode then
36000: LD_VAR 0 4
36004: IFFALSE 36068
// begin for i := 1 to result do
36006: LD_ADDR_VAR 0 6
36010: PUSH
36011: DOUBLE
36012: LD_INT 1
36014: DEC
36015: ST_TO_ADDR
36016: LD_VAR 0 5
36020: PUSH
36021: FOR_TO
36022: IFFALSE 36056
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36024: LD_ADDR_VAR 0 8
36028: PUSH
36029: LD_VAR 0 8
36033: PPUSH
36034: LD_VAR 0 5
36038: PUSH
36039: LD_VAR 0 6
36043: ARRAY
36044: PUSH
36045: LD_INT 1
36047: ARRAY
36048: PPUSH
36049: CALL 68261 0 2
36053: ST_TO_ADDR
36054: GO 36021
36056: POP
36057: POP
// result := tmp ;
36058: LD_ADDR_VAR 0 5
36062: PUSH
36063: LD_VAR 0 8
36067: ST_TO_ADDR
// end ; end ;
36068: LD_VAR 0 5
36072: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36073: LD_INT 0
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
// if not list then
36079: LD_VAR 0 3
36083: NOT
36084: IFFALSE 36088
// exit ;
36086: GO 36478
// result := [ ] ;
36088: LD_ADDR_VAR 0 6
36092: PUSH
36093: EMPTY
36094: ST_TO_ADDR
// for i in list do
36095: LD_ADDR_VAR 0 7
36099: PUSH
36100: LD_VAR 0 3
36104: PUSH
36105: FOR_IN
36106: IFFALSE 36308
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36108: LD_ADDR_VAR 0 9
36112: PUSH
36113: LD_VAR 0 7
36117: PPUSH
36118: LD_VAR 0 1
36122: PPUSH
36123: LD_VAR 0 2
36127: PPUSH
36128: CALL_OW 297
36132: ST_TO_ADDR
// if not result then
36133: LD_VAR 0 6
36137: NOT
36138: IFFALSE 36164
// result := [ [ i , tmp ] ] else
36140: LD_ADDR_VAR 0 6
36144: PUSH
36145: LD_VAR 0 7
36149: PUSH
36150: LD_VAR 0 9
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: EMPTY
36160: LIST
36161: ST_TO_ADDR
36162: GO 36306
// begin if result [ result ] [ 2 ] <= tmp then
36164: LD_VAR 0 6
36168: PUSH
36169: LD_VAR 0 6
36173: ARRAY
36174: PUSH
36175: LD_INT 2
36177: ARRAY
36178: PUSH
36179: LD_VAR 0 9
36183: LESSEQUAL
36184: IFFALSE 36226
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36186: LD_ADDR_VAR 0 6
36190: PUSH
36191: LD_VAR 0 6
36195: PPUSH
36196: LD_VAR 0 6
36200: PUSH
36201: LD_INT 1
36203: PLUS
36204: PPUSH
36205: LD_VAR 0 7
36209: PUSH
36210: LD_VAR 0 9
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PPUSH
36219: CALL_OW 2
36223: ST_TO_ADDR
36224: GO 36306
// for j := 1 to result do
36226: LD_ADDR_VAR 0 8
36230: PUSH
36231: DOUBLE
36232: LD_INT 1
36234: DEC
36235: ST_TO_ADDR
36236: LD_VAR 0 6
36240: PUSH
36241: FOR_TO
36242: IFFALSE 36304
// begin if tmp < result [ j ] [ 2 ] then
36244: LD_VAR 0 9
36248: PUSH
36249: LD_VAR 0 6
36253: PUSH
36254: LD_VAR 0 8
36258: ARRAY
36259: PUSH
36260: LD_INT 2
36262: ARRAY
36263: LESS
36264: IFFALSE 36302
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36266: LD_ADDR_VAR 0 6
36270: PUSH
36271: LD_VAR 0 6
36275: PPUSH
36276: LD_VAR 0 8
36280: PPUSH
36281: LD_VAR 0 7
36285: PUSH
36286: LD_VAR 0 9
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PPUSH
36295: CALL_OW 2
36299: ST_TO_ADDR
// break ;
36300: GO 36304
// end ; end ;
36302: GO 36241
36304: POP
36305: POP
// end ; end ;
36306: GO 36105
36308: POP
36309: POP
// if result and not asc then
36310: LD_VAR 0 6
36314: IFFALSE 36323
36316: PUSH
36317: LD_VAR 0 4
36321: NOT
36322: AND
36323: IFFALSE 36398
// begin tmp := result ;
36325: LD_ADDR_VAR 0 9
36329: PUSH
36330: LD_VAR 0 6
36334: ST_TO_ADDR
// for i = tmp downto 1 do
36335: LD_ADDR_VAR 0 7
36339: PUSH
36340: DOUBLE
36341: LD_VAR 0 9
36345: INC
36346: ST_TO_ADDR
36347: LD_INT 1
36349: PUSH
36350: FOR_DOWNTO
36351: IFFALSE 36396
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36353: LD_ADDR_VAR 0 6
36357: PUSH
36358: LD_VAR 0 6
36362: PPUSH
36363: LD_VAR 0 9
36367: PUSH
36368: LD_VAR 0 7
36372: MINUS
36373: PUSH
36374: LD_INT 1
36376: PLUS
36377: PPUSH
36378: LD_VAR 0 9
36382: PUSH
36383: LD_VAR 0 7
36387: ARRAY
36388: PPUSH
36389: CALL_OW 1
36393: ST_TO_ADDR
36394: GO 36350
36396: POP
36397: POP
// end ; tmp := [ ] ;
36398: LD_ADDR_VAR 0 9
36402: PUSH
36403: EMPTY
36404: ST_TO_ADDR
// if mode then
36405: LD_VAR 0 5
36409: IFFALSE 36478
// begin for i = 1 to result do
36411: LD_ADDR_VAR 0 7
36415: PUSH
36416: DOUBLE
36417: LD_INT 1
36419: DEC
36420: ST_TO_ADDR
36421: LD_VAR 0 6
36425: PUSH
36426: FOR_TO
36427: IFFALSE 36466
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36429: LD_ADDR_VAR 0 9
36433: PUSH
36434: LD_VAR 0 9
36438: PPUSH
36439: LD_VAR 0 7
36443: PPUSH
36444: LD_VAR 0 6
36448: PUSH
36449: LD_VAR 0 7
36453: ARRAY
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: PPUSH
36459: CALL_OW 1
36463: ST_TO_ADDR
36464: GO 36426
36466: POP
36467: POP
// result := tmp ;
36468: LD_ADDR_VAR 0 6
36472: PUSH
36473: LD_VAR 0 9
36477: ST_TO_ADDR
// end ; end ;
36478: LD_VAR 0 6
36482: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36483: LD_INT 0
36485: PPUSH
36486: PPUSH
36487: PPUSH
36488: PPUSH
36489: PPUSH
36490: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36491: LD_ADDR_VAR 0 5
36495: PUSH
36496: LD_INT 0
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 0
36504: PUSH
36505: EMPTY
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
// if not x or not y then
36513: LD_VAR 0 2
36517: NOT
36518: IFTRUE 36527
36520: PUSH
36521: LD_VAR 0 3
36525: NOT
36526: OR
36527: IFFALSE 36531
// exit ;
36529: GO 38187
// if not range then
36531: LD_VAR 0 4
36535: NOT
36536: IFFALSE 36546
// range := 10 ;
36538: LD_ADDR_VAR 0 4
36542: PUSH
36543: LD_INT 10
36545: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36546: LD_ADDR_VAR 0 8
36550: PUSH
36551: LD_INT 81
36553: PUSH
36554: LD_VAR 0 1
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 92
36565: PUSH
36566: LD_VAR 0 2
36570: PUSH
36571: LD_VAR 0 3
36575: PUSH
36576: LD_VAR 0 4
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 3
36589: PUSH
36590: LD_INT 21
36592: PUSH
36593: LD_INT 3
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: PPUSH
36609: CALL_OW 69
36613: ST_TO_ADDR
// if not tmp then
36614: LD_VAR 0 8
36618: NOT
36619: IFFALSE 36623
// exit ;
36621: GO 38187
// for i in tmp do
36623: LD_ADDR_VAR 0 6
36627: PUSH
36628: LD_VAR 0 8
36632: PUSH
36633: FOR_IN
36634: IFFALSE 38162
// begin points := [ 0 , 0 , 0 ] ;
36636: LD_ADDR_VAR 0 9
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: LD_INT 0
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: ST_TO_ADDR
// bpoints := 1 ;
36655: LD_ADDR_VAR 0 10
36659: PUSH
36660: LD_INT 1
36662: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36663: LD_VAR 0 6
36667: PPUSH
36668: CALL_OW 247
36672: PUSH
36673: LD_INT 1
36675: DOUBLE
36676: EQUAL
36677: IFTRUE 36681
36679: GO 37263
36681: POP
// begin if GetClass ( i ) = 1 then
36682: LD_VAR 0 6
36686: PPUSH
36687: CALL_OW 257
36691: PUSH
36692: LD_INT 1
36694: EQUAL
36695: IFFALSE 36716
// points := [ 10 , 5 , 3 ] ;
36697: LD_ADDR_VAR 0 9
36701: PUSH
36702: LD_INT 10
36704: PUSH
36705: LD_INT 5
36707: PUSH
36708: LD_INT 3
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: LIST
36715: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36716: LD_VAR 0 6
36720: PPUSH
36721: CALL_OW 257
36725: PUSH
36726: LD_INT 2
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 4
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: LIST
36739: IN
36740: IFFALSE 36761
// points := [ 3 , 2 , 1 ] ;
36742: LD_ADDR_VAR 0 9
36746: PUSH
36747: LD_INT 3
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36761: LD_VAR 0 6
36765: PPUSH
36766: CALL_OW 257
36770: PUSH
36771: LD_INT 5
36773: EQUAL
36774: IFFALSE 36795
// points := [ 130 , 5 , 2 ] ;
36776: LD_ADDR_VAR 0 9
36780: PUSH
36781: LD_INT 130
36783: PUSH
36784: LD_INT 5
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36795: LD_VAR 0 6
36799: PPUSH
36800: CALL_OW 257
36804: PUSH
36805: LD_INT 8
36807: EQUAL
36808: IFFALSE 36829
// points := [ 35 , 35 , 30 ] ;
36810: LD_ADDR_VAR 0 9
36814: PUSH
36815: LD_INT 35
36817: PUSH
36818: LD_INT 35
36820: PUSH
36821: LD_INT 30
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36829: LD_VAR 0 6
36833: PPUSH
36834: CALL_OW 257
36838: PUSH
36839: LD_INT 9
36841: EQUAL
36842: IFFALSE 36863
// points := [ 20 , 55 , 40 ] ;
36844: LD_ADDR_VAR 0 9
36848: PUSH
36849: LD_INT 20
36851: PUSH
36852: LD_INT 55
36854: PUSH
36855: LD_INT 40
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36863: LD_VAR 0 6
36867: PPUSH
36868: CALL_OW 257
36872: PUSH
36873: LD_INT 12
36875: PUSH
36876: LD_INT 16
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: IN
36883: IFFALSE 36904
// points := [ 5 , 3 , 2 ] ;
36885: LD_ADDR_VAR 0 9
36889: PUSH
36890: LD_INT 5
36892: PUSH
36893: LD_INT 3
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: LIST
36903: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36904: LD_VAR 0 6
36908: PPUSH
36909: CALL_OW 257
36913: PUSH
36914: LD_INT 17
36916: EQUAL
36917: IFFALSE 36938
// points := [ 100 , 50 , 75 ] ;
36919: LD_ADDR_VAR 0 9
36923: PUSH
36924: LD_INT 100
36926: PUSH
36927: LD_INT 50
36929: PUSH
36930: LD_INT 75
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36938: LD_VAR 0 6
36942: PPUSH
36943: CALL_OW 257
36947: PUSH
36948: LD_INT 15
36950: EQUAL
36951: IFFALSE 36972
// points := [ 10 , 5 , 3 ] ;
36953: LD_ADDR_VAR 0 9
36957: PUSH
36958: LD_INT 10
36960: PUSH
36961: LD_INT 5
36963: PUSH
36964: LD_INT 3
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36972: LD_VAR 0 6
36976: PPUSH
36977: CALL_OW 257
36981: PUSH
36982: LD_INT 14
36984: EQUAL
36985: IFFALSE 37006
// points := [ 10 , 0 , 0 ] ;
36987: LD_ADDR_VAR 0 9
36991: PUSH
36992: LD_INT 10
36994: PUSH
36995: LD_INT 0
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37006: LD_VAR 0 6
37010: PPUSH
37011: CALL_OW 257
37015: PUSH
37016: LD_INT 11
37018: EQUAL
37019: IFFALSE 37040
// points := [ 30 , 10 , 5 ] ;
37021: LD_ADDR_VAR 0 9
37025: PUSH
37026: LD_INT 30
37028: PUSH
37029: LD_INT 10
37031: PUSH
37032: LD_INT 5
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37040: LD_VAR 0 1
37044: PPUSH
37045: LD_INT 5
37047: PPUSH
37048: CALL_OW 321
37052: PUSH
37053: LD_INT 2
37055: EQUAL
37056: IFFALSE 37073
// bpoints := bpoints * 1.8 ;
37058: LD_ADDR_VAR 0 10
37062: PUSH
37063: LD_VAR 0 10
37067: PUSH
37068: LD_REAL  1.80000000000000E+0000
37071: MUL
37072: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37073: LD_VAR 0 6
37077: PPUSH
37078: CALL_OW 257
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 2
37088: PUSH
37089: LD_INT 3
37091: PUSH
37092: LD_INT 4
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: IN
37101: IFFALSE 37121
37103: PUSH
37104: LD_VAR 0 1
37108: PPUSH
37109: LD_INT 51
37111: PPUSH
37112: CALL_OW 321
37116: PUSH
37117: LD_INT 2
37119: EQUAL
37120: AND
37121: IFFALSE 37138
// bpoints := bpoints * 1.2 ;
37123: LD_ADDR_VAR 0 10
37127: PUSH
37128: LD_VAR 0 10
37132: PUSH
37133: LD_REAL  1.20000000000000E+0000
37136: MUL
37137: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37138: LD_VAR 0 6
37142: PPUSH
37143: CALL_OW 257
37147: PUSH
37148: LD_INT 5
37150: PUSH
37151: LD_INT 7
37153: PUSH
37154: LD_INT 9
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: IN
37162: IFFALSE 37182
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: LD_INT 52
37172: PPUSH
37173: CALL_OW 321
37177: PUSH
37178: LD_INT 2
37180: EQUAL
37181: AND
37182: IFFALSE 37199
// bpoints := bpoints * 1.5 ;
37184: LD_ADDR_VAR 0 10
37188: PUSH
37189: LD_VAR 0 10
37193: PUSH
37194: LD_REAL  1.50000000000000E+0000
37197: MUL
37198: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37199: LD_VAR 0 1
37203: PPUSH
37204: LD_INT 66
37206: PPUSH
37207: CALL_OW 321
37211: PUSH
37212: LD_INT 2
37214: EQUAL
37215: IFFALSE 37232
// bpoints := bpoints * 1.1 ;
37217: LD_ADDR_VAR 0 10
37221: PUSH
37222: LD_VAR 0 10
37226: PUSH
37227: LD_REAL  1.10000000000000E+0000
37230: MUL
37231: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37232: LD_ADDR_VAR 0 10
37236: PUSH
37237: LD_VAR 0 10
37241: PUSH
37242: LD_VAR 0 6
37246: PPUSH
37247: LD_INT 1
37249: PPUSH
37250: CALL_OW 259
37254: PUSH
37255: LD_REAL  1.15000000000000E+0000
37258: MUL
37259: MUL
37260: ST_TO_ADDR
// end ; unit_vehicle :
37261: GO 38091
37263: LD_INT 2
37265: DOUBLE
37266: EQUAL
37267: IFTRUE 37271
37269: GO 38079
37271: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37272: LD_VAR 0 6
37276: PPUSH
37277: CALL_OW 264
37281: PUSH
37282: LD_INT 2
37284: PUSH
37285: LD_INT 42
37287: PUSH
37288: LD_INT 24
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: LIST
37295: IN
37296: IFFALSE 37317
// points := [ 25 , 5 , 3 ] ;
37298: LD_ADDR_VAR 0 9
37302: PUSH
37303: LD_INT 25
37305: PUSH
37306: LD_INT 5
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: LIST
37316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37317: LD_VAR 0 6
37321: PPUSH
37322: CALL_OW 264
37326: PUSH
37327: LD_INT 4
37329: PUSH
37330: LD_INT 43
37332: PUSH
37333: LD_INT 25
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: LIST
37340: IN
37341: IFFALSE 37362
// points := [ 40 , 15 , 5 ] ;
37343: LD_ADDR_VAR 0 9
37347: PUSH
37348: LD_INT 40
37350: PUSH
37351: LD_INT 15
37353: PUSH
37354: LD_INT 5
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37362: LD_VAR 0 6
37366: PPUSH
37367: CALL_OW 264
37371: PUSH
37372: LD_INT 3
37374: PUSH
37375: LD_INT 23
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: IN
37382: IFFALSE 37403
// points := [ 7 , 25 , 8 ] ;
37384: LD_ADDR_VAR 0 9
37388: PUSH
37389: LD_INT 7
37391: PUSH
37392: LD_INT 25
37394: PUSH
37395: LD_INT 8
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37403: LD_VAR 0 6
37407: PPUSH
37408: CALL_OW 264
37412: PUSH
37413: LD_INT 5
37415: PUSH
37416: LD_INT 27
37418: PUSH
37419: LD_INT 44
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: LIST
37426: IN
37427: IFFALSE 37448
// points := [ 14 , 50 , 16 ] ;
37429: LD_ADDR_VAR 0 9
37433: PUSH
37434: LD_INT 14
37436: PUSH
37437: LD_INT 50
37439: PUSH
37440: LD_INT 16
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37448: LD_VAR 0 6
37452: PPUSH
37453: CALL_OW 264
37457: PUSH
37458: LD_INT 6
37460: PUSH
37461: LD_INT 46
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: IN
37468: IFFALSE 37489
// points := [ 32 , 120 , 70 ] ;
37470: LD_ADDR_VAR 0 9
37474: PUSH
37475: LD_INT 32
37477: PUSH
37478: LD_INT 120
37480: PUSH
37481: LD_INT 70
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: LIST
37488: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37489: LD_VAR 0 6
37493: PPUSH
37494: CALL_OW 264
37498: PUSH
37499: LD_INT 7
37501: PUSH
37502: LD_INT 28
37504: PUSH
37505: LD_INT 45
37507: PUSH
37508: LD_INT 92
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: IN
37517: IFFALSE 37538
// points := [ 35 , 20 , 45 ] ;
37519: LD_ADDR_VAR 0 9
37523: PUSH
37524: LD_INT 35
37526: PUSH
37527: LD_INT 20
37529: PUSH
37530: LD_INT 45
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37538: LD_VAR 0 6
37542: PPUSH
37543: CALL_OW 264
37547: PUSH
37548: LD_INT 47
37550: PUSH
37551: EMPTY
37552: LIST
37553: IN
37554: IFFALSE 37575
// points := [ 67 , 45 , 75 ] ;
37556: LD_ADDR_VAR 0 9
37560: PUSH
37561: LD_INT 67
37563: PUSH
37564: LD_INT 45
37566: PUSH
37567: LD_INT 75
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: LIST
37574: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37575: LD_VAR 0 6
37579: PPUSH
37580: CALL_OW 264
37584: PUSH
37585: LD_INT 26
37587: PUSH
37588: EMPTY
37589: LIST
37590: IN
37591: IFFALSE 37612
// points := [ 120 , 30 , 80 ] ;
37593: LD_ADDR_VAR 0 9
37597: PUSH
37598: LD_INT 120
37600: PUSH
37601: LD_INT 30
37603: PUSH
37604: LD_INT 80
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37612: LD_VAR 0 6
37616: PPUSH
37617: CALL_OW 264
37621: PUSH
37622: LD_INT 22
37624: PUSH
37625: EMPTY
37626: LIST
37627: IN
37628: IFFALSE 37649
// points := [ 40 , 1 , 1 ] ;
37630: LD_ADDR_VAR 0 9
37634: PUSH
37635: LD_INT 40
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37649: LD_VAR 0 6
37653: PPUSH
37654: CALL_OW 264
37658: PUSH
37659: LD_INT 29
37661: PUSH
37662: EMPTY
37663: LIST
37664: IN
37665: IFFALSE 37686
// points := [ 70 , 200 , 400 ] ;
37667: LD_ADDR_VAR 0 9
37671: PUSH
37672: LD_INT 70
37674: PUSH
37675: LD_INT 200
37677: PUSH
37678: LD_INT 400
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: LIST
37685: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37686: LD_VAR 0 6
37690: PPUSH
37691: CALL_OW 264
37695: PUSH
37696: LD_INT 14
37698: PUSH
37699: LD_INT 53
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: IN
37706: IFFALSE 37727
// points := [ 40 , 10 , 20 ] ;
37708: LD_ADDR_VAR 0 9
37712: PUSH
37713: LD_INT 40
37715: PUSH
37716: LD_INT 10
37718: PUSH
37719: LD_INT 20
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: LIST
37726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37727: LD_VAR 0 6
37731: PPUSH
37732: CALL_OW 264
37736: PUSH
37737: LD_INT 9
37739: PUSH
37740: EMPTY
37741: LIST
37742: IN
37743: IFFALSE 37764
// points := [ 5 , 70 , 20 ] ;
37745: LD_ADDR_VAR 0 9
37749: PUSH
37750: LD_INT 5
37752: PUSH
37753: LD_INT 70
37755: PUSH
37756: LD_INT 20
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37764: LD_VAR 0 6
37768: PPUSH
37769: CALL_OW 264
37773: PUSH
37774: LD_INT 10
37776: PUSH
37777: EMPTY
37778: LIST
37779: IN
37780: IFFALSE 37801
// points := [ 35 , 110 , 70 ] ;
37782: LD_ADDR_VAR 0 9
37786: PUSH
37787: LD_INT 35
37789: PUSH
37790: LD_INT 110
37792: PUSH
37793: LD_INT 70
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37801: LD_VAR 0 6
37805: PPUSH
37806: CALL_OW 265
37810: PUSH
37811: LD_INT 25
37813: EQUAL
37814: IFFALSE 37835
// points := [ 80 , 65 , 100 ] ;
37816: LD_ADDR_VAR 0 9
37820: PUSH
37821: LD_INT 80
37823: PUSH
37824: LD_INT 65
37826: PUSH
37827: LD_INT 100
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: LIST
37834: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37835: LD_VAR 0 6
37839: PPUSH
37840: CALL_OW 263
37844: PUSH
37845: LD_INT 1
37847: EQUAL
37848: IFFALSE 37883
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37850: LD_ADDR_VAR 0 10
37854: PUSH
37855: LD_VAR 0 10
37859: PUSH
37860: LD_VAR 0 6
37864: PPUSH
37865: CALL_OW 311
37869: PPUSH
37870: LD_INT 3
37872: PPUSH
37873: CALL_OW 259
37877: PUSH
37878: LD_INT 4
37880: MUL
37881: MUL
37882: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37883: LD_VAR 0 6
37887: PPUSH
37888: CALL_OW 263
37892: PUSH
37893: LD_INT 2
37895: EQUAL
37896: IFFALSE 37947
// begin j := IsControledBy ( i ) ;
37898: LD_ADDR_VAR 0 7
37902: PUSH
37903: LD_VAR 0 6
37907: PPUSH
37908: CALL_OW 312
37912: ST_TO_ADDR
// if j then
37913: LD_VAR 0 7
37917: IFFALSE 37947
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37919: LD_ADDR_VAR 0 10
37923: PUSH
37924: LD_VAR 0 10
37928: PUSH
37929: LD_VAR 0 7
37933: PPUSH
37934: LD_INT 3
37936: PPUSH
37937: CALL_OW 259
37941: PUSH
37942: LD_INT 3
37944: MUL
37945: MUL
37946: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37947: LD_VAR 0 6
37951: PPUSH
37952: CALL_OW 264
37956: PUSH
37957: LD_INT 5
37959: PUSH
37960: LD_INT 6
37962: PUSH
37963: LD_INT 46
37965: PUSH
37966: LD_INT 44
37968: PUSH
37969: LD_INT 47
37971: PUSH
37972: LD_INT 45
37974: PUSH
37975: LD_INT 28
37977: PUSH
37978: LD_INT 7
37980: PUSH
37981: LD_INT 27
37983: PUSH
37984: LD_INT 29
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: IN
37999: IFFALSE 38019
38001: PUSH
38002: LD_VAR 0 1
38006: PPUSH
38007: LD_INT 52
38009: PPUSH
38010: CALL_OW 321
38014: PUSH
38015: LD_INT 2
38017: EQUAL
38018: AND
38019: IFFALSE 38036
// bpoints := bpoints * 1.2 ;
38021: LD_ADDR_VAR 0 10
38025: PUSH
38026: LD_VAR 0 10
38030: PUSH
38031: LD_REAL  1.20000000000000E+0000
38034: MUL
38035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38036: LD_VAR 0 6
38040: PPUSH
38041: CALL_OW 264
38045: PUSH
38046: LD_INT 6
38048: PUSH
38049: LD_INT 46
38051: PUSH
38052: LD_INT 47
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: IN
38060: IFFALSE 38077
// bpoints := bpoints * 1.2 ;
38062: LD_ADDR_VAR 0 10
38066: PUSH
38067: LD_VAR 0 10
38071: PUSH
38072: LD_REAL  1.20000000000000E+0000
38075: MUL
38076: ST_TO_ADDR
// end ; unit_building :
38077: GO 38091
38079: LD_INT 3
38081: DOUBLE
38082: EQUAL
38083: IFTRUE 38087
38085: GO 38090
38087: POP
// ; end ;
38088: GO 38091
38090: POP
// for j = 1 to 3 do
38091: LD_ADDR_VAR 0 7
38095: PUSH
38096: DOUBLE
38097: LD_INT 1
38099: DEC
38100: ST_TO_ADDR
38101: LD_INT 3
38103: PUSH
38104: FOR_TO
38105: IFFALSE 38158
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38107: LD_ADDR_VAR 0 5
38111: PUSH
38112: LD_VAR 0 5
38116: PPUSH
38117: LD_VAR 0 7
38121: PPUSH
38122: LD_VAR 0 5
38126: PUSH
38127: LD_VAR 0 7
38131: ARRAY
38132: PUSH
38133: LD_VAR 0 9
38137: PUSH
38138: LD_VAR 0 7
38142: ARRAY
38143: PUSH
38144: LD_VAR 0 10
38148: MUL
38149: PLUS
38150: PPUSH
38151: CALL_OW 1
38155: ST_TO_ADDR
38156: GO 38104
38158: POP
38159: POP
// end ;
38160: GO 36633
38162: POP
38163: POP
// result := Replace ( result , 4 , tmp ) ;
38164: LD_ADDR_VAR 0 5
38168: PUSH
38169: LD_VAR 0 5
38173: PPUSH
38174: LD_INT 4
38176: PPUSH
38177: LD_VAR 0 8
38181: PPUSH
38182: CALL_OW 1
38186: ST_TO_ADDR
// end ;
38187: LD_VAR 0 5
38191: RET
// export function DangerAtRange ( unit , range ) ; begin
38192: LD_INT 0
38194: PPUSH
// if not unit then
38195: LD_VAR 0 1
38199: NOT
38200: IFFALSE 38204
// exit ;
38202: GO 38249
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38204: LD_ADDR_VAR 0 3
38208: PUSH
38209: LD_VAR 0 1
38213: PPUSH
38214: CALL_OW 255
38218: PPUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 250
38228: PPUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 251
38238: PPUSH
38239: LD_VAR 0 2
38243: PPUSH
38244: CALL 36483 0 4
38248: ST_TO_ADDR
// end ;
38249: LD_VAR 0 3
38253: RET
// export function DangerInArea ( side , area ) ; begin
38254: LD_INT 0
38256: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38257: LD_ADDR_VAR 0 3
38261: PUSH
38262: LD_VAR 0 2
38266: PPUSH
38267: LD_INT 81
38269: PUSH
38270: LD_VAR 0 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PPUSH
38279: CALL_OW 70
38283: ST_TO_ADDR
// end ;
38284: LD_VAR 0 3
38288: RET
// export function IsExtension ( b ) ; begin
38289: LD_INT 0
38291: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38292: LD_ADDR_VAR 0 2
38296: PUSH
38297: LD_VAR 0 1
38301: PUSH
38302: LD_INT 23
38304: PUSH
38305: LD_INT 20
38307: PUSH
38308: LD_INT 22
38310: PUSH
38311: LD_INT 17
38313: PUSH
38314: LD_INT 24
38316: PUSH
38317: LD_INT 21
38319: PUSH
38320: LD_INT 19
38322: PUSH
38323: LD_INT 16
38325: PUSH
38326: LD_INT 25
38328: PUSH
38329: LD_INT 18
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: IN
38344: ST_TO_ADDR
// end ;
38345: LD_VAR 0 2
38349: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38350: LD_INT 0
38352: PPUSH
38353: PPUSH
38354: PPUSH
// result := [ ] ;
38355: LD_ADDR_VAR 0 4
38359: PUSH
38360: EMPTY
38361: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38362: LD_ADDR_VAR 0 5
38366: PUSH
38367: LD_VAR 0 2
38371: PPUSH
38372: LD_INT 21
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PPUSH
38382: CALL_OW 70
38386: ST_TO_ADDR
// if not tmp then
38387: LD_VAR 0 5
38391: NOT
38392: IFFALSE 38396
// exit ;
38394: GO 38460
// if checkLink then
38396: LD_VAR 0 3
38400: IFFALSE 38450
// begin for i in tmp do
38402: LD_ADDR_VAR 0 6
38406: PUSH
38407: LD_VAR 0 5
38411: PUSH
38412: FOR_IN
38413: IFFALSE 38448
// if GetBase ( i ) <> base then
38415: LD_VAR 0 6
38419: PPUSH
38420: CALL_OW 274
38424: PUSH
38425: LD_VAR 0 1
38429: NONEQUAL
38430: IFFALSE 38446
// ComLinkToBase ( base , i ) ;
38432: LD_VAR 0 1
38436: PPUSH
38437: LD_VAR 0 6
38441: PPUSH
38442: CALL_OW 169
38446: GO 38412
38448: POP
38449: POP
// end ; result := tmp ;
38450: LD_ADDR_VAR 0 4
38454: PUSH
38455: LD_VAR 0 5
38459: ST_TO_ADDR
// end ;
38460: LD_VAR 0 4
38464: RET
// export function ComComplete ( units , b ) ; var i ; begin
38465: LD_INT 0
38467: PPUSH
38468: PPUSH
// if not units then
38469: LD_VAR 0 1
38473: NOT
38474: IFFALSE 38478
// exit ;
38476: GO 38568
// for i in units do
38478: LD_ADDR_VAR 0 4
38482: PUSH
38483: LD_VAR 0 1
38487: PUSH
38488: FOR_IN
38489: IFFALSE 38566
// if BuildingStatus ( b ) = bs_build then
38491: LD_VAR 0 2
38495: PPUSH
38496: CALL_OW 461
38500: PUSH
38501: LD_INT 1
38503: EQUAL
38504: IFFALSE 38564
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38506: LD_VAR 0 4
38510: PPUSH
38511: LD_STRING h
38513: PUSH
38514: LD_VAR 0 2
38518: PPUSH
38519: CALL_OW 250
38523: PUSH
38524: LD_VAR 0 2
38528: PPUSH
38529: CALL_OW 251
38533: PUSH
38534: LD_VAR 0 2
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: PPUSH
38560: CALL_OW 446
38564: GO 38488
38566: POP
38567: POP
// end ;
38568: LD_VAR 0 3
38572: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38573: LD_INT 0
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38581: LD_VAR 0 1
38585: NOT
38586: IFTRUE 38603
38588: PUSH
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 263
38598: PUSH
38599: LD_INT 2
38601: NONEQUAL
38602: OR
38603: IFFALSE 38607
// exit ;
38605: GO 38923
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38607: LD_ADDR_VAR 0 6
38611: PUSH
38612: LD_INT 22
38614: PUSH
38615: LD_VAR 0 1
38619: PPUSH
38620: CALL_OW 255
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 2
38631: PUSH
38632: LD_INT 30
38634: PUSH
38635: LD_INT 36
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 34
38644: PUSH
38645: LD_INT 31
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PPUSH
38661: CALL_OW 69
38665: ST_TO_ADDR
// if not tmp then
38666: LD_VAR 0 6
38670: NOT
38671: IFFALSE 38675
// exit ;
38673: GO 38923
// result := [ ] ;
38675: LD_ADDR_VAR 0 2
38679: PUSH
38680: EMPTY
38681: ST_TO_ADDR
// for i in tmp do
38682: LD_ADDR_VAR 0 3
38686: PUSH
38687: LD_VAR 0 6
38691: PUSH
38692: FOR_IN
38693: IFFALSE 38764
// begin t := UnitsInside ( i ) ;
38695: LD_ADDR_VAR 0 4
38699: PUSH
38700: LD_VAR 0 3
38704: PPUSH
38705: CALL_OW 313
38709: ST_TO_ADDR
// if t then
38710: LD_VAR 0 4
38714: IFFALSE 38762
// for j in t do
38716: LD_ADDR_VAR 0 7
38720: PUSH
38721: LD_VAR 0 4
38725: PUSH
38726: FOR_IN
38727: IFFALSE 38760
// result := Replace ( result , result + 1 , j ) ;
38729: LD_ADDR_VAR 0 2
38733: PUSH
38734: LD_VAR 0 2
38738: PPUSH
38739: LD_VAR 0 2
38743: PUSH
38744: LD_INT 1
38746: PLUS
38747: PPUSH
38748: LD_VAR 0 7
38752: PPUSH
38753: CALL_OW 1
38757: ST_TO_ADDR
38758: GO 38726
38760: POP
38761: POP
// end ;
38762: GO 38692
38764: POP
38765: POP
// if not result then
38766: LD_VAR 0 2
38770: NOT
38771: IFFALSE 38775
// exit ;
38773: GO 38923
// mech := result [ 1 ] ;
38775: LD_ADDR_VAR 0 5
38779: PUSH
38780: LD_VAR 0 2
38784: PUSH
38785: LD_INT 1
38787: ARRAY
38788: ST_TO_ADDR
// if result > 1 then
38789: LD_VAR 0 2
38793: PUSH
38794: LD_INT 1
38796: GREATER
38797: IFFALSE 38909
// begin for i = 2 to result do
38799: LD_ADDR_VAR 0 3
38803: PUSH
38804: DOUBLE
38805: LD_INT 2
38807: DEC
38808: ST_TO_ADDR
38809: LD_VAR 0 2
38813: PUSH
38814: FOR_TO
38815: IFFALSE 38907
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38817: LD_ADDR_VAR 0 4
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: LD_VAR 0 3
38831: ARRAY
38832: PPUSH
38833: LD_INT 3
38835: PPUSH
38836: CALL_OW 259
38840: PUSH
38841: LD_VAR 0 2
38845: PUSH
38846: LD_VAR 0 3
38850: ARRAY
38851: PPUSH
38852: CALL_OW 432
38856: MINUS
38857: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38858: LD_VAR 0 4
38862: PUSH
38863: LD_VAR 0 5
38867: PPUSH
38868: LD_INT 3
38870: PPUSH
38871: CALL_OW 259
38875: PUSH
38876: LD_VAR 0 5
38880: PPUSH
38881: CALL_OW 432
38885: MINUS
38886: GREATEREQUAL
38887: IFFALSE 38905
// mech := result [ i ] ;
38889: LD_ADDR_VAR 0 5
38893: PUSH
38894: LD_VAR 0 2
38898: PUSH
38899: LD_VAR 0 3
38903: ARRAY
38904: ST_TO_ADDR
// end ;
38905: GO 38814
38907: POP
38908: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38909: LD_VAR 0 1
38913: PPUSH
38914: LD_VAR 0 5
38918: PPUSH
38919: CALL_OW 135
// end ;
38923: LD_VAR 0 2
38927: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38928: LD_INT 0
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
// result := [ ] ;
38943: LD_ADDR_VAR 0 7
38947: PUSH
38948: EMPTY
38949: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38950: LD_VAR 0 1
38954: PPUSH
38955: CALL_OW 266
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: IN
38970: NOT
38971: IFFALSE 38975
// exit ;
38973: GO 40615
// if name then
38975: LD_VAR 0 3
38979: IFFALSE 38995
// SetBName ( base_dep , name ) ;
38981: LD_VAR 0 1
38985: PPUSH
38986: LD_VAR 0 3
38990: PPUSH
38991: CALL_OW 500
// base := GetBase ( base_dep ) ;
38995: LD_ADDR_VAR 0 15
38999: PUSH
39000: LD_VAR 0 1
39004: PPUSH
39005: CALL_OW 274
39009: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39010: LD_ADDR_VAR 0 16
39014: PUSH
39015: LD_VAR 0 1
39019: PPUSH
39020: CALL_OW 255
39024: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39025: LD_ADDR_VAR 0 17
39029: PUSH
39030: LD_VAR 0 1
39034: PPUSH
39035: CALL_OW 248
39039: ST_TO_ADDR
// if sources then
39040: LD_VAR 0 5
39044: IFFALSE 39091
// for i = 1 to 3 do
39046: LD_ADDR_VAR 0 8
39050: PUSH
39051: DOUBLE
39052: LD_INT 1
39054: DEC
39055: ST_TO_ADDR
39056: LD_INT 3
39058: PUSH
39059: FOR_TO
39060: IFFALSE 39089
// AddResourceType ( base , i , sources [ i ] ) ;
39062: LD_VAR 0 15
39066: PPUSH
39067: LD_VAR 0 8
39071: PPUSH
39072: LD_VAR 0 5
39076: PUSH
39077: LD_VAR 0 8
39081: ARRAY
39082: PPUSH
39083: CALL_OW 276
39087: GO 39059
39089: POP
39090: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39091: LD_ADDR_VAR 0 18
39095: PUSH
39096: LD_VAR 0 15
39100: PPUSH
39101: LD_VAR 0 2
39105: PPUSH
39106: LD_INT 1
39108: PPUSH
39109: CALL 38350 0 3
39113: ST_TO_ADDR
// InitHc ;
39114: CALL_OW 19
// InitUc ;
39118: CALL_OW 18
// uc_side := side ;
39122: LD_ADDR_OWVAR 20
39126: PUSH
39127: LD_VAR 0 16
39131: ST_TO_ADDR
// uc_nation := nation ;
39132: LD_ADDR_OWVAR 21
39136: PUSH
39137: LD_VAR 0 17
39141: ST_TO_ADDR
// if buildings then
39142: LD_VAR 0 18
39146: IFFALSE 40474
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39148: LD_ADDR_VAR 0 19
39152: PUSH
39153: LD_VAR 0 18
39157: PPUSH
39158: LD_INT 2
39160: PUSH
39161: LD_INT 30
39163: PUSH
39164: LD_INT 29
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 30
39173: PUSH
39174: LD_INT 30
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: LIST
39185: PPUSH
39186: CALL_OW 72
39190: ST_TO_ADDR
// if tmp then
39191: LD_VAR 0 19
39195: IFFALSE 39243
// for i in tmp do
39197: LD_ADDR_VAR 0 8
39201: PUSH
39202: LD_VAR 0 19
39206: PUSH
39207: FOR_IN
39208: IFFALSE 39241
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39210: LD_VAR 0 8
39214: PPUSH
39215: CALL_OW 250
39219: PPUSH
39220: LD_VAR 0 8
39224: PPUSH
39225: CALL_OW 251
39229: PPUSH
39230: LD_VAR 0 16
39234: PPUSH
39235: CALL_OW 441
39239: GO 39207
39241: POP
39242: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39243: LD_VAR 0 18
39247: PPUSH
39248: LD_INT 2
39250: PUSH
39251: LD_INT 30
39253: PUSH
39254: LD_INT 32
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 30
39263: PUSH
39264: LD_INT 33
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: EMPTY
39272: LIST
39273: LIST
39274: LIST
39275: PPUSH
39276: CALL_OW 72
39280: IFFALSE 39368
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39282: LD_ADDR_VAR 0 8
39286: PUSH
39287: LD_VAR 0 18
39291: PPUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 30
39297: PUSH
39298: LD_INT 32
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 30
39307: PUSH
39308: LD_INT 33
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: PPUSH
39320: CALL_OW 72
39324: PUSH
39325: FOR_IN
39326: IFFALSE 39366
// begin if not GetBWeapon ( i ) then
39328: LD_VAR 0 8
39332: PPUSH
39333: CALL_OW 269
39337: NOT
39338: IFFALSE 39364
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39340: LD_VAR 0 8
39344: PPUSH
39345: LD_VAR 0 8
39349: PPUSH
39350: LD_VAR 0 2
39354: PPUSH
39355: CALL 40620 0 2
39359: PPUSH
39360: CALL_OW 431
// end ;
39364: GO 39325
39366: POP
39367: POP
// end ; for i = 1 to personel do
39368: LD_ADDR_VAR 0 8
39372: PUSH
39373: DOUBLE
39374: LD_INT 1
39376: DEC
39377: ST_TO_ADDR
39378: LD_VAR 0 6
39382: PUSH
39383: FOR_TO
39384: IFFALSE 40454
// begin if i > 4 then
39386: LD_VAR 0 8
39390: PUSH
39391: LD_INT 4
39393: GREATER
39394: IFFALSE 39398
// break ;
39396: GO 40454
// case i of 1 :
39398: LD_VAR 0 8
39402: PUSH
39403: LD_INT 1
39405: DOUBLE
39406: EQUAL
39407: IFTRUE 39411
39409: GO 39491
39411: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39412: LD_ADDR_VAR 0 12
39416: PUSH
39417: LD_VAR 0 18
39421: PPUSH
39422: LD_INT 22
39424: PUSH
39425: LD_VAR 0 16
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 58
39436: PUSH
39437: EMPTY
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: LD_INT 30
39445: PUSH
39446: LD_INT 32
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 30
39455: PUSH
39456: LD_INT 4
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 30
39465: PUSH
39466: LD_INT 5
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: LIST
39483: PPUSH
39484: CALL_OW 72
39488: ST_TO_ADDR
39489: GO 39713
39491: LD_INT 2
39493: DOUBLE
39494: EQUAL
39495: IFTRUE 39499
39497: GO 39561
39499: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39500: LD_ADDR_VAR 0 12
39504: PUSH
39505: LD_VAR 0 18
39509: PPUSH
39510: LD_INT 22
39512: PUSH
39513: LD_VAR 0 16
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 30
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 30
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PPUSH
39554: CALL_OW 72
39558: ST_TO_ADDR
39559: GO 39713
39561: LD_INT 3
39563: DOUBLE
39564: EQUAL
39565: IFTRUE 39569
39567: GO 39631
39569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39570: LD_ADDR_VAR 0 12
39574: PUSH
39575: LD_VAR 0 18
39579: PPUSH
39580: LD_INT 22
39582: PUSH
39583: LD_VAR 0 16
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 2
39594: PUSH
39595: LD_INT 30
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 30
39607: PUSH
39608: LD_INT 3
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PPUSH
39624: CALL_OW 72
39628: ST_TO_ADDR
39629: GO 39713
39631: LD_INT 4
39633: DOUBLE
39634: EQUAL
39635: IFTRUE 39639
39637: GO 39712
39639: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39640: LD_ADDR_VAR 0 12
39644: PUSH
39645: LD_VAR 0 18
39649: PPUSH
39650: LD_INT 22
39652: PUSH
39653: LD_VAR 0 16
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: LD_INT 30
39667: PUSH
39668: LD_INT 6
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 30
39677: PUSH
39678: LD_INT 7
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 30
39687: PUSH
39688: LD_INT 8
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PPUSH
39705: CALL_OW 72
39709: ST_TO_ADDR
39710: GO 39713
39712: POP
// if i = 1 then
39713: LD_VAR 0 8
39717: PUSH
39718: LD_INT 1
39720: EQUAL
39721: IFFALSE 39832
// begin tmp := [ ] ;
39723: LD_ADDR_VAR 0 19
39727: PUSH
39728: EMPTY
39729: ST_TO_ADDR
// for j in f do
39730: LD_ADDR_VAR 0 9
39734: PUSH
39735: LD_VAR 0 12
39739: PUSH
39740: FOR_IN
39741: IFFALSE 39814
// if GetBType ( j ) = b_bunker then
39743: LD_VAR 0 9
39747: PPUSH
39748: CALL_OW 266
39752: PUSH
39753: LD_INT 32
39755: EQUAL
39756: IFFALSE 39783
// tmp := Insert ( tmp , 1 , j ) else
39758: LD_ADDR_VAR 0 19
39762: PUSH
39763: LD_VAR 0 19
39767: PPUSH
39768: LD_INT 1
39770: PPUSH
39771: LD_VAR 0 9
39775: PPUSH
39776: CALL_OW 2
39780: ST_TO_ADDR
39781: GO 39812
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39783: LD_ADDR_VAR 0 19
39787: PUSH
39788: LD_VAR 0 19
39792: PPUSH
39793: LD_VAR 0 19
39797: PUSH
39798: LD_INT 1
39800: PLUS
39801: PPUSH
39802: LD_VAR 0 9
39806: PPUSH
39807: CALL_OW 2
39811: ST_TO_ADDR
39812: GO 39740
39814: POP
39815: POP
// if tmp then
39816: LD_VAR 0 19
39820: IFFALSE 39832
// f := tmp ;
39822: LD_ADDR_VAR 0 12
39826: PUSH
39827: LD_VAR 0 19
39831: ST_TO_ADDR
// end ; x := personel [ i ] ;
39832: LD_ADDR_VAR 0 13
39836: PUSH
39837: LD_VAR 0 6
39841: PUSH
39842: LD_VAR 0 8
39846: ARRAY
39847: ST_TO_ADDR
// if x = - 1 then
39848: LD_VAR 0 13
39852: PUSH
39853: LD_INT 1
39855: NEG
39856: EQUAL
39857: IFFALSE 40068
// begin for j in f do
39859: LD_ADDR_VAR 0 9
39863: PUSH
39864: LD_VAR 0 12
39868: PUSH
39869: FOR_IN
39870: IFFALSE 40064
// repeat InitHc ;
39872: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39876: LD_VAR 0 9
39880: PPUSH
39881: CALL_OW 266
39885: PUSH
39886: LD_INT 5
39888: EQUAL
39889: IFFALSE 39959
// begin if UnitsInside ( j ) < 3 then
39891: LD_VAR 0 9
39895: PPUSH
39896: CALL_OW 313
39900: PUSH
39901: LD_INT 3
39903: LESS
39904: IFFALSE 39940
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39906: LD_INT 0
39908: PPUSH
39909: LD_INT 5
39911: PUSH
39912: LD_INT 8
39914: PUSH
39915: LD_INT 9
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: LIST
39922: PUSH
39923: LD_VAR 0 17
39927: ARRAY
39928: PPUSH
39929: LD_VAR 0 4
39933: PPUSH
39934: CALL_OW 380
39938: GO 39957
// PrepareHuman ( false , i , skill ) ;
39940: LD_INT 0
39942: PPUSH
39943: LD_VAR 0 8
39947: PPUSH
39948: LD_VAR 0 4
39952: PPUSH
39953: CALL_OW 380
// end else
39957: GO 39976
// PrepareHuman ( false , i , skill ) ;
39959: LD_INT 0
39961: PPUSH
39962: LD_VAR 0 8
39966: PPUSH
39967: LD_VAR 0 4
39971: PPUSH
39972: CALL_OW 380
// un := CreateHuman ;
39976: LD_ADDR_VAR 0 14
39980: PUSH
39981: CALL_OW 44
39985: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39986: LD_ADDR_VAR 0 7
39990: PUSH
39991: LD_VAR 0 7
39995: PPUSH
39996: LD_INT 1
39998: PPUSH
39999: LD_VAR 0 14
40003: PPUSH
40004: CALL_OW 2
40008: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40009: LD_VAR 0 14
40013: PPUSH
40014: LD_VAR 0 9
40018: PPUSH
40019: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40023: LD_VAR 0 9
40027: PPUSH
40028: CALL_OW 313
40032: PUSH
40033: LD_INT 6
40035: EQUAL
40036: IFTRUE 40060
40038: PUSH
40039: LD_VAR 0 9
40043: PPUSH
40044: CALL_OW 266
40048: PUSH
40049: LD_INT 32
40051: PUSH
40052: LD_INT 31
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: IN
40059: OR
40060: IFFALSE 39872
40062: GO 39869
40064: POP
40065: POP
// end else
40066: GO 40452
// for j = 1 to x do
40068: LD_ADDR_VAR 0 9
40072: PUSH
40073: DOUBLE
40074: LD_INT 1
40076: DEC
40077: ST_TO_ADDR
40078: LD_VAR 0 13
40082: PUSH
40083: FOR_TO
40084: IFFALSE 40450
// begin InitHc ;
40086: CALL_OW 19
// if not f then
40090: LD_VAR 0 12
40094: NOT
40095: IFFALSE 40184
// begin PrepareHuman ( false , i , skill ) ;
40097: LD_INT 0
40099: PPUSH
40100: LD_VAR 0 8
40104: PPUSH
40105: LD_VAR 0 4
40109: PPUSH
40110: CALL_OW 380
// un := CreateHuman ;
40114: LD_ADDR_VAR 0 14
40118: PUSH
40119: CALL_OW 44
40123: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40124: LD_ADDR_VAR 0 7
40128: PUSH
40129: LD_VAR 0 7
40133: PPUSH
40134: LD_INT 1
40136: PPUSH
40137: LD_VAR 0 14
40141: PPUSH
40142: CALL_OW 2
40146: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40147: LD_VAR 0 14
40151: PPUSH
40152: LD_VAR 0 1
40156: PPUSH
40157: CALL_OW 250
40161: PPUSH
40162: LD_VAR 0 1
40166: PPUSH
40167: CALL_OW 251
40171: PPUSH
40172: LD_INT 10
40174: PPUSH
40175: LD_INT 0
40177: PPUSH
40178: CALL_OW 50
// continue ;
40182: GO 40083
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40184: LD_VAR 0 12
40188: PUSH
40189: LD_INT 1
40191: ARRAY
40192: PPUSH
40193: CALL_OW 313
40197: IFFALSE 40225
40199: PUSH
40200: LD_VAR 0 12
40204: PUSH
40205: LD_INT 1
40207: ARRAY
40208: PPUSH
40209: CALL_OW 266
40213: PUSH
40214: LD_INT 32
40216: PUSH
40217: LD_INT 31
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: IN
40224: AND
40225: IFTRUE 40246
40227: PUSH
40228: LD_VAR 0 12
40232: PUSH
40233: LD_INT 1
40235: ARRAY
40236: PPUSH
40237: CALL_OW 313
40241: PUSH
40242: LD_INT 6
40244: EQUAL
40245: OR
40246: IFFALSE 40266
// f := Delete ( f , 1 ) ;
40248: LD_ADDR_VAR 0 12
40252: PUSH
40253: LD_VAR 0 12
40257: PPUSH
40258: LD_INT 1
40260: PPUSH
40261: CALL_OW 3
40265: ST_TO_ADDR
// if not f then
40266: LD_VAR 0 12
40270: NOT
40271: IFFALSE 40289
// begin x := x + 2 ;
40273: LD_ADDR_VAR 0 13
40277: PUSH
40278: LD_VAR 0 13
40282: PUSH
40283: LD_INT 2
40285: PLUS
40286: ST_TO_ADDR
// continue ;
40287: GO 40083
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40289: LD_VAR 0 12
40293: PUSH
40294: LD_INT 1
40296: ARRAY
40297: PPUSH
40298: CALL_OW 266
40302: PUSH
40303: LD_INT 5
40305: EQUAL
40306: IFFALSE 40380
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40308: LD_VAR 0 12
40312: PUSH
40313: LD_INT 1
40315: ARRAY
40316: PPUSH
40317: CALL_OW 313
40321: PUSH
40322: LD_INT 3
40324: LESS
40325: IFFALSE 40361
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40327: LD_INT 0
40329: PPUSH
40330: LD_INT 5
40332: PUSH
40333: LD_INT 8
40335: PUSH
40336: LD_INT 9
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: LIST
40343: PUSH
40344: LD_VAR 0 17
40348: ARRAY
40349: PPUSH
40350: LD_VAR 0 4
40354: PPUSH
40355: CALL_OW 380
40359: GO 40378
// PrepareHuman ( false , i , skill ) ;
40361: LD_INT 0
40363: PPUSH
40364: LD_VAR 0 8
40368: PPUSH
40369: LD_VAR 0 4
40373: PPUSH
40374: CALL_OW 380
// end else
40378: GO 40397
// PrepareHuman ( false , i , skill ) ;
40380: LD_INT 0
40382: PPUSH
40383: LD_VAR 0 8
40387: PPUSH
40388: LD_VAR 0 4
40392: PPUSH
40393: CALL_OW 380
// un := CreateHuman ;
40397: LD_ADDR_VAR 0 14
40401: PUSH
40402: CALL_OW 44
40406: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40407: LD_ADDR_VAR 0 7
40411: PUSH
40412: LD_VAR 0 7
40416: PPUSH
40417: LD_INT 1
40419: PPUSH
40420: LD_VAR 0 14
40424: PPUSH
40425: CALL_OW 2
40429: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40430: LD_VAR 0 14
40434: PPUSH
40435: LD_VAR 0 12
40439: PUSH
40440: LD_INT 1
40442: ARRAY
40443: PPUSH
40444: CALL_OW 52
// end ;
40448: GO 40083
40450: POP
40451: POP
// end ;
40452: GO 39383
40454: POP
40455: POP
// result := result ^ buildings ;
40456: LD_ADDR_VAR 0 7
40460: PUSH
40461: LD_VAR 0 7
40465: PUSH
40466: LD_VAR 0 18
40470: ADD
40471: ST_TO_ADDR
// end else
40472: GO 40615
// begin for i = 1 to personel do
40474: LD_ADDR_VAR 0 8
40478: PUSH
40479: DOUBLE
40480: LD_INT 1
40482: DEC
40483: ST_TO_ADDR
40484: LD_VAR 0 6
40488: PUSH
40489: FOR_TO
40490: IFFALSE 40613
// begin if i > 4 then
40492: LD_VAR 0 8
40496: PUSH
40497: LD_INT 4
40499: GREATER
40500: IFFALSE 40504
// break ;
40502: GO 40613
// x := personel [ i ] ;
40504: LD_ADDR_VAR 0 13
40508: PUSH
40509: LD_VAR 0 6
40513: PUSH
40514: LD_VAR 0 8
40518: ARRAY
40519: ST_TO_ADDR
// if x = - 1 then
40520: LD_VAR 0 13
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: EQUAL
40529: IFFALSE 40533
// continue ;
40531: GO 40489
// PrepareHuman ( false , i , skill ) ;
40533: LD_INT 0
40535: PPUSH
40536: LD_VAR 0 8
40540: PPUSH
40541: LD_VAR 0 4
40545: PPUSH
40546: CALL_OW 380
// un := CreateHuman ;
40550: LD_ADDR_VAR 0 14
40554: PUSH
40555: CALL_OW 44
40559: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40560: LD_VAR 0 14
40564: PPUSH
40565: LD_VAR 0 1
40569: PPUSH
40570: CALL_OW 250
40574: PPUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 251
40584: PPUSH
40585: LD_INT 10
40587: PPUSH
40588: LD_INT 0
40590: PPUSH
40591: CALL_OW 50
// result := result ^ un ;
40595: LD_ADDR_VAR 0 7
40599: PUSH
40600: LD_VAR 0 7
40604: PUSH
40605: LD_VAR 0 14
40609: ADD
40610: ST_TO_ADDR
// end ;
40611: GO 40489
40613: POP
40614: POP
// end ; end ;
40615: LD_VAR 0 7
40619: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40620: LD_INT 0
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
// result := false ;
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_INT 0
40645: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40646: LD_VAR 0 1
40650: NOT
40651: IFTRUE 40676
40653: PUSH
40654: LD_VAR 0 1
40658: PPUSH
40659: CALL_OW 266
40663: PUSH
40664: LD_INT 32
40666: PUSH
40667: LD_INT 33
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: IN
40674: NOT
40675: OR
40676: IFFALSE 40680
// exit ;
40678: GO 41815
// nat := GetNation ( tower ) ;
40680: LD_ADDR_VAR 0 12
40684: PUSH
40685: LD_VAR 0 1
40689: PPUSH
40690: CALL_OW 248
40694: ST_TO_ADDR
// side := GetSide ( tower ) ;
40695: LD_ADDR_VAR 0 16
40699: PUSH
40700: LD_VAR 0 1
40704: PPUSH
40705: CALL_OW 255
40709: ST_TO_ADDR
// x := GetX ( tower ) ;
40710: LD_ADDR_VAR 0 10
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 250
40724: ST_TO_ADDR
// y := GetY ( tower ) ;
40725: LD_ADDR_VAR 0 11
40729: PUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 251
40739: ST_TO_ADDR
// if not x or not y then
40740: LD_VAR 0 10
40744: NOT
40745: IFTRUE 40754
40747: PUSH
40748: LD_VAR 0 11
40752: NOT
40753: OR
40754: IFFALSE 40758
// exit ;
40756: GO 41815
// weapon := 0 ;
40758: LD_ADDR_VAR 0 18
40762: PUSH
40763: LD_INT 0
40765: ST_TO_ADDR
// fac_list := [ ] ;
40766: LD_ADDR_VAR 0 17
40770: PUSH
40771: EMPTY
40772: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40773: LD_ADDR_VAR 0 6
40777: PUSH
40778: LD_VAR 0 1
40782: PPUSH
40783: CALL_OW 274
40787: PPUSH
40788: LD_VAR 0 2
40792: PPUSH
40793: LD_INT 0
40795: PPUSH
40796: CALL 38350 0 3
40800: PPUSH
40801: LD_INT 30
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PPUSH
40811: CALL_OW 72
40815: ST_TO_ADDR
// if not factories then
40816: LD_VAR 0 6
40820: NOT
40821: IFFALSE 40825
// exit ;
40823: GO 41815
// for i in factories do
40825: LD_ADDR_VAR 0 8
40829: PUSH
40830: LD_VAR 0 6
40834: PUSH
40835: FOR_IN
40836: IFFALSE 40861
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40838: LD_ADDR_VAR 0 17
40842: PUSH
40843: LD_VAR 0 17
40847: PUSH
40848: LD_VAR 0 8
40852: PPUSH
40853: CALL_OW 478
40857: UNION
40858: ST_TO_ADDR
40859: GO 40835
40861: POP
40862: POP
// if not fac_list then
40863: LD_VAR 0 17
40867: NOT
40868: IFFALSE 40872
// exit ;
40870: GO 41815
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40872: LD_ADDR_VAR 0 5
40876: PUSH
40877: LD_INT 4
40879: PUSH
40880: LD_INT 5
40882: PUSH
40883: LD_INT 9
40885: PUSH
40886: LD_INT 10
40888: PUSH
40889: LD_INT 6
40891: PUSH
40892: LD_INT 7
40894: PUSH
40895: LD_INT 11
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 27
40909: PUSH
40910: LD_INT 28
40912: PUSH
40913: LD_INT 26
40915: PUSH
40916: LD_INT 30
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 43
40927: PUSH
40928: LD_INT 44
40930: PUSH
40931: LD_INT 46
40933: PUSH
40934: LD_INT 45
40936: PUSH
40937: LD_INT 47
40939: PUSH
40940: LD_INT 49
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: PUSH
40956: LD_VAR 0 12
40960: ARRAY
40961: ST_TO_ADDR
// list := list isect fac_list ;
40962: LD_ADDR_VAR 0 5
40966: PUSH
40967: LD_VAR 0 5
40971: PUSH
40972: LD_VAR 0 17
40976: ISECT
40977: ST_TO_ADDR
// if not list then
40978: LD_VAR 0 5
40982: NOT
40983: IFFALSE 40987
// exit ;
40985: GO 41815
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40987: LD_VAR 0 12
40991: PUSH
40992: LD_INT 3
40994: EQUAL
40995: IFFALSE 41007
40997: PUSH
40998: LD_INT 49
41000: PUSH
41001: LD_VAR 0 5
41005: IN
41006: AND
41007: IFFALSE 41027
41009: PUSH
41010: LD_INT 31
41012: PPUSH
41013: LD_VAR 0 16
41017: PPUSH
41018: CALL_OW 321
41022: PUSH
41023: LD_INT 2
41025: EQUAL
41026: AND
41027: IFFALSE 41087
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41029: LD_INT 22
41031: PUSH
41032: LD_VAR 0 16
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 35
41043: PUSH
41044: LD_INT 49
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 91
41053: PUSH
41054: LD_VAR 0 1
41058: PUSH
41059: LD_INT 10
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: PPUSH
41072: CALL_OW 69
41076: NOT
41077: IFFALSE 41087
// weapon := ru_time_lapser ;
41079: LD_ADDR_VAR 0 18
41083: PUSH
41084: LD_INT 49
41086: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41087: LD_VAR 0 12
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: IN
41102: IFFALSE 41126
41104: PUSH
41105: LD_INT 11
41107: PUSH
41108: LD_VAR 0 5
41112: IN
41113: IFTRUE 41125
41115: PUSH
41116: LD_INT 30
41118: PUSH
41119: LD_VAR 0 5
41123: IN
41124: OR
41125: AND
41126: IFFALSE 41146
41128: PUSH
41129: LD_INT 6
41131: PPUSH
41132: LD_VAR 0 16
41136: PPUSH
41137: CALL_OW 321
41141: PUSH
41142: LD_INT 2
41144: EQUAL
41145: AND
41146: IFFALSE 41313
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41148: LD_INT 22
41150: PUSH
41151: LD_VAR 0 16
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 2
41162: PUSH
41163: LD_INT 35
41165: PUSH
41166: LD_INT 11
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 35
41175: PUSH
41176: LD_INT 30
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 91
41190: PUSH
41191: LD_VAR 0 1
41195: PUSH
41196: LD_INT 18
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: LIST
41208: PPUSH
41209: CALL_OW 69
41213: NOT
41214: IFFALSE 41290
41216: PUSH
41217: LD_INT 22
41219: PUSH
41220: LD_VAR 0 16
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 30
41234: PUSH
41235: LD_INT 32
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 30
41244: PUSH
41245: LD_INT 33
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 91
41259: PUSH
41260: LD_VAR 0 1
41264: PUSH
41265: LD_INT 12
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: LIST
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: LIST
41277: PUSH
41278: EMPTY
41279: LIST
41280: PPUSH
41281: CALL_OW 69
41285: PUSH
41286: LD_INT 2
41288: GREATER
41289: AND
41290: IFFALSE 41313
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41292: LD_ADDR_VAR 0 18
41296: PUSH
41297: LD_INT 11
41299: PUSH
41300: LD_INT 30
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_VAR 0 12
41311: ARRAY
41312: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41313: LD_VAR 0 18
41317: NOT
41318: IFFALSE 41338
41320: PUSH
41321: LD_INT 40
41323: PPUSH
41324: LD_VAR 0 16
41328: PPUSH
41329: CALL_OW 321
41333: PUSH
41334: LD_INT 2
41336: EQUAL
41337: AND
41338: IFFALSE 41374
41340: PUSH
41341: LD_INT 7
41343: PUSH
41344: LD_VAR 0 5
41348: IN
41349: IFTRUE 41361
41351: PUSH
41352: LD_INT 28
41354: PUSH
41355: LD_VAR 0 5
41359: IN
41360: OR
41361: IFTRUE 41373
41363: PUSH
41364: LD_INT 45
41366: PUSH
41367: LD_VAR 0 5
41371: IN
41372: OR
41373: AND
41374: IFFALSE 41628
// begin hex := GetHexInfo ( x , y ) ;
41376: LD_ADDR_VAR 0 4
41380: PUSH
41381: LD_VAR 0 10
41385: PPUSH
41386: LD_VAR 0 11
41390: PPUSH
41391: CALL_OW 546
41395: ST_TO_ADDR
// if hex [ 1 ] then
41396: LD_VAR 0 4
41400: PUSH
41401: LD_INT 1
41403: ARRAY
41404: IFFALSE 41408
// exit ;
41406: GO 41815
// height := hex [ 2 ] ;
41408: LD_ADDR_VAR 0 15
41412: PUSH
41413: LD_VAR 0 4
41417: PUSH
41418: LD_INT 2
41420: ARRAY
41421: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41422: LD_ADDR_VAR 0 14
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: LD_INT 3
41435: PUSH
41436: LD_INT 5
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: ST_TO_ADDR
// for i in tmp do
41445: LD_ADDR_VAR 0 8
41449: PUSH
41450: LD_VAR 0 14
41454: PUSH
41455: FOR_IN
41456: IFFALSE 41626
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41458: LD_ADDR_VAR 0 9
41462: PUSH
41463: LD_VAR 0 10
41467: PPUSH
41468: LD_VAR 0 8
41472: PPUSH
41473: LD_INT 5
41475: PPUSH
41476: CALL_OW 272
41480: PUSH
41481: LD_VAR 0 11
41485: PPUSH
41486: LD_VAR 0 8
41490: PPUSH
41491: LD_INT 5
41493: PPUSH
41494: CALL_OW 273
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41503: LD_VAR 0 9
41507: PUSH
41508: LD_INT 1
41510: ARRAY
41511: PPUSH
41512: LD_VAR 0 9
41516: PUSH
41517: LD_INT 2
41519: ARRAY
41520: PPUSH
41521: CALL_OW 488
41525: IFFALSE 41624
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41527: LD_ADDR_VAR 0 4
41531: PUSH
41532: LD_VAR 0 9
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: PPUSH
41541: LD_VAR 0 9
41545: PUSH
41546: LD_INT 2
41548: ARRAY
41549: PPUSH
41550: CALL_OW 546
41554: ST_TO_ADDR
// if hex [ 1 ] then
41555: LD_VAR 0 4
41559: PUSH
41560: LD_INT 1
41562: ARRAY
41563: IFFALSE 41567
// continue ;
41565: GO 41455
// h := hex [ 2 ] ;
41567: LD_ADDR_VAR 0 13
41571: PUSH
41572: LD_VAR 0 4
41576: PUSH
41577: LD_INT 2
41579: ARRAY
41580: ST_TO_ADDR
// if h + 7 < height then
41581: LD_VAR 0 13
41585: PUSH
41586: LD_INT 7
41588: PLUS
41589: PUSH
41590: LD_VAR 0 15
41594: LESS
41595: IFFALSE 41624
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41597: LD_ADDR_VAR 0 18
41601: PUSH
41602: LD_INT 7
41604: PUSH
41605: LD_INT 28
41607: PUSH
41608: LD_INT 45
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: PUSH
41616: LD_VAR 0 12
41620: ARRAY
41621: ST_TO_ADDR
// break ;
41622: GO 41626
// end ; end ; end ;
41624: GO 41455
41626: POP
41627: POP
// end ; if not weapon then
41628: LD_VAR 0 18
41632: NOT
41633: IFFALSE 41693
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41635: LD_ADDR_VAR 0 5
41639: PUSH
41640: LD_VAR 0 5
41644: PUSH
41645: LD_INT 11
41647: PUSH
41648: LD_INT 30
41650: PUSH
41651: LD_INT 49
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: DIFF
41659: ST_TO_ADDR
// if not list then
41660: LD_VAR 0 5
41664: NOT
41665: IFFALSE 41669
// exit ;
41667: GO 41815
// weapon := list [ rand ( 1 , list ) ] ;
41669: LD_ADDR_VAR 0 18
41673: PUSH
41674: LD_VAR 0 5
41678: PUSH
41679: LD_INT 1
41681: PPUSH
41682: LD_VAR 0 5
41686: PPUSH
41687: CALL_OW 12
41691: ARRAY
41692: ST_TO_ADDR
// end ; if weapon then
41693: LD_VAR 0 18
41697: IFFALSE 41815
// begin tmp := CostOfWeapon ( weapon ) ;
41699: LD_ADDR_VAR 0 14
41703: PUSH
41704: LD_VAR 0 18
41708: PPUSH
41709: CALL_OW 451
41713: ST_TO_ADDR
// j := GetBase ( tower ) ;
41714: LD_ADDR_VAR 0 9
41718: PUSH
41719: LD_VAR 0 1
41723: PPUSH
41724: CALL_OW 274
41728: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41729: LD_VAR 0 9
41733: PPUSH
41734: LD_INT 1
41736: PPUSH
41737: CALL_OW 275
41741: PUSH
41742: LD_VAR 0 14
41746: PUSH
41747: LD_INT 1
41749: ARRAY
41750: GREATEREQUAL
41751: IFFALSE 41777
41753: PUSH
41754: LD_VAR 0 9
41758: PPUSH
41759: LD_INT 2
41761: PPUSH
41762: CALL_OW 275
41766: PUSH
41767: LD_VAR 0 14
41771: PUSH
41772: LD_INT 2
41774: ARRAY
41775: GREATEREQUAL
41776: AND
41777: IFFALSE 41803
41779: PUSH
41780: LD_VAR 0 9
41784: PPUSH
41785: LD_INT 3
41787: PPUSH
41788: CALL_OW 275
41792: PUSH
41793: LD_VAR 0 14
41797: PUSH
41798: LD_INT 3
41800: ARRAY
41801: GREATEREQUAL
41802: AND
41803: IFFALSE 41815
// result := weapon ;
41805: LD_ADDR_VAR 0 3
41809: PUSH
41810: LD_VAR 0 18
41814: ST_TO_ADDR
// end ; end ;
41815: LD_VAR 0 3
41819: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41820: LD_INT 0
41822: PPUSH
41823: PPUSH
// result := true ;
41824: LD_ADDR_VAR 0 3
41828: PUSH
41829: LD_INT 1
41831: ST_TO_ADDR
// if array1 = array2 then
41832: LD_VAR 0 1
41836: PUSH
41837: LD_VAR 0 2
41841: EQUAL
41842: IFFALSE 41902
// begin for i = 1 to array1 do
41844: LD_ADDR_VAR 0 4
41848: PUSH
41849: DOUBLE
41850: LD_INT 1
41852: DEC
41853: ST_TO_ADDR
41854: LD_VAR 0 1
41858: PUSH
41859: FOR_TO
41860: IFFALSE 41898
// if array1 [ i ] <> array2 [ i ] then
41862: LD_VAR 0 1
41866: PUSH
41867: LD_VAR 0 4
41871: ARRAY
41872: PUSH
41873: LD_VAR 0 2
41877: PUSH
41878: LD_VAR 0 4
41882: ARRAY
41883: NONEQUAL
41884: IFFALSE 41896
// begin result := false ;
41886: LD_ADDR_VAR 0 3
41890: PUSH
41891: LD_INT 0
41893: ST_TO_ADDR
// break ;
41894: GO 41898
// end ;
41896: GO 41859
41898: POP
41899: POP
// end else
41900: GO 41910
// result := false ;
41902: LD_ADDR_VAR 0 3
41906: PUSH
41907: LD_INT 0
41909: ST_TO_ADDR
// end ;
41910: LD_VAR 0 3
41914: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41915: LD_INT 0
41917: PPUSH
41918: PPUSH
// if not array1 or not array2 then
41919: LD_VAR 0 1
41923: NOT
41924: IFTRUE 41933
41926: PUSH
41927: LD_VAR 0 2
41931: NOT
41932: OR
41933: IFFALSE 41937
// exit ;
41935: GO 42001
// result := true ;
41937: LD_ADDR_VAR 0 3
41941: PUSH
41942: LD_INT 1
41944: ST_TO_ADDR
// for i = 1 to array1 do
41945: LD_ADDR_VAR 0 4
41949: PUSH
41950: DOUBLE
41951: LD_INT 1
41953: DEC
41954: ST_TO_ADDR
41955: LD_VAR 0 1
41959: PUSH
41960: FOR_TO
41961: IFFALSE 41999
// if array1 [ i ] <> array2 [ i ] then
41963: LD_VAR 0 1
41967: PUSH
41968: LD_VAR 0 4
41972: ARRAY
41973: PUSH
41974: LD_VAR 0 2
41978: PUSH
41979: LD_VAR 0 4
41983: ARRAY
41984: NONEQUAL
41985: IFFALSE 41997
// begin result := false ;
41987: LD_ADDR_VAR 0 3
41991: PUSH
41992: LD_INT 0
41994: ST_TO_ADDR
// break ;
41995: GO 41999
// end ;
41997: GO 41960
41999: POP
42000: POP
// end ;
42001: LD_VAR 0 3
42005: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42006: LD_INT 0
42008: PPUSH
42009: PPUSH
42010: PPUSH
// pom := GetBase ( fac ) ;
42011: LD_ADDR_VAR 0 5
42015: PUSH
42016: LD_VAR 0 1
42020: PPUSH
42021: CALL_OW 274
42025: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42026: LD_ADDR_VAR 0 4
42030: PUSH
42031: LD_VAR 0 2
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: PPUSH
42040: LD_VAR 0 2
42044: PUSH
42045: LD_INT 2
42047: ARRAY
42048: PPUSH
42049: LD_VAR 0 2
42053: PUSH
42054: LD_INT 3
42056: ARRAY
42057: PPUSH
42058: LD_VAR 0 2
42062: PUSH
42063: LD_INT 4
42065: ARRAY
42066: PPUSH
42067: CALL_OW 449
42071: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42072: LD_ADDR_VAR 0 3
42076: PUSH
42077: LD_VAR 0 5
42081: PPUSH
42082: LD_INT 1
42084: PPUSH
42085: CALL_OW 275
42089: PUSH
42090: LD_VAR 0 4
42094: PUSH
42095: LD_INT 1
42097: ARRAY
42098: GREATEREQUAL
42099: IFFALSE 42125
42101: PUSH
42102: LD_VAR 0 5
42106: PPUSH
42107: LD_INT 2
42109: PPUSH
42110: CALL_OW 275
42114: PUSH
42115: LD_VAR 0 4
42119: PUSH
42120: LD_INT 2
42122: ARRAY
42123: GREATEREQUAL
42124: AND
42125: IFFALSE 42151
42127: PUSH
42128: LD_VAR 0 5
42132: PPUSH
42133: LD_INT 3
42135: PPUSH
42136: CALL_OW 275
42140: PUSH
42141: LD_VAR 0 4
42145: PUSH
42146: LD_INT 3
42148: ARRAY
42149: GREATEREQUAL
42150: AND
42151: ST_TO_ADDR
// end ;
42152: LD_VAR 0 3
42156: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42157: LD_INT 0
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
// pom := GetBase ( building ) ;
42163: LD_ADDR_VAR 0 3
42167: PUSH
42168: LD_VAR 0 1
42172: PPUSH
42173: CALL_OW 274
42177: ST_TO_ADDR
// if not pom then
42178: LD_VAR 0 3
42182: NOT
42183: IFFALSE 42187
// exit ;
42185: GO 42361
// btype := GetBType ( building ) ;
42187: LD_ADDR_VAR 0 5
42191: PUSH
42192: LD_VAR 0 1
42196: PPUSH
42197: CALL_OW 266
42201: ST_TO_ADDR
// if btype = b_armoury then
42202: LD_VAR 0 5
42206: PUSH
42207: LD_INT 4
42209: EQUAL
42210: IFFALSE 42220
// btype := b_barracks ;
42212: LD_ADDR_VAR 0 5
42216: PUSH
42217: LD_INT 5
42219: ST_TO_ADDR
// if btype = b_depot then
42220: LD_VAR 0 5
42224: PUSH
42225: LD_INT 0
42227: EQUAL
42228: IFFALSE 42238
// btype := b_warehouse ;
42230: LD_ADDR_VAR 0 5
42234: PUSH
42235: LD_INT 1
42237: ST_TO_ADDR
// if btype = b_workshop then
42238: LD_VAR 0 5
42242: PUSH
42243: LD_INT 2
42245: EQUAL
42246: IFFALSE 42256
// btype := b_factory ;
42248: LD_ADDR_VAR 0 5
42252: PUSH
42253: LD_INT 3
42255: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42256: LD_ADDR_VAR 0 4
42260: PUSH
42261: LD_VAR 0 5
42265: PPUSH
42266: LD_VAR 0 1
42270: PPUSH
42271: CALL_OW 248
42275: PPUSH
42276: CALL_OW 450
42280: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42281: LD_ADDR_VAR 0 2
42285: PUSH
42286: LD_VAR 0 3
42290: PPUSH
42291: LD_INT 1
42293: PPUSH
42294: CALL_OW 275
42298: PUSH
42299: LD_VAR 0 4
42303: PUSH
42304: LD_INT 1
42306: ARRAY
42307: GREATEREQUAL
42308: IFFALSE 42334
42310: PUSH
42311: LD_VAR 0 3
42315: PPUSH
42316: LD_INT 2
42318: PPUSH
42319: CALL_OW 275
42323: PUSH
42324: LD_VAR 0 4
42328: PUSH
42329: LD_INT 2
42331: ARRAY
42332: GREATEREQUAL
42333: AND
42334: IFFALSE 42360
42336: PUSH
42337: LD_VAR 0 3
42341: PPUSH
42342: LD_INT 3
42344: PPUSH
42345: CALL_OW 275
42349: PUSH
42350: LD_VAR 0 4
42354: PUSH
42355: LD_INT 3
42357: ARRAY
42358: GREATEREQUAL
42359: AND
42360: ST_TO_ADDR
// end ;
42361: LD_VAR 0 2
42365: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42366: LD_INT 0
42368: PPUSH
42369: PPUSH
42370: PPUSH
// pom := GetBase ( building ) ;
42371: LD_ADDR_VAR 0 4
42375: PUSH
42376: LD_VAR 0 1
42380: PPUSH
42381: CALL_OW 274
42385: ST_TO_ADDR
// if not pom then
42386: LD_VAR 0 4
42390: NOT
42391: IFFALSE 42395
// exit ;
42393: GO 42500
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42395: LD_ADDR_VAR 0 5
42399: PUSH
42400: LD_VAR 0 2
42404: PPUSH
42405: LD_VAR 0 1
42409: PPUSH
42410: CALL_OW 248
42414: PPUSH
42415: CALL_OW 450
42419: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42420: LD_ADDR_VAR 0 3
42424: PUSH
42425: LD_VAR 0 4
42429: PPUSH
42430: LD_INT 1
42432: PPUSH
42433: CALL_OW 275
42437: PUSH
42438: LD_VAR 0 5
42442: PUSH
42443: LD_INT 1
42445: ARRAY
42446: GREATEREQUAL
42447: IFFALSE 42473
42449: PUSH
42450: LD_VAR 0 4
42454: PPUSH
42455: LD_INT 2
42457: PPUSH
42458: CALL_OW 275
42462: PUSH
42463: LD_VAR 0 5
42467: PUSH
42468: LD_INT 2
42470: ARRAY
42471: GREATEREQUAL
42472: AND
42473: IFFALSE 42499
42475: PUSH
42476: LD_VAR 0 4
42480: PPUSH
42481: LD_INT 3
42483: PPUSH
42484: CALL_OW 275
42488: PUSH
42489: LD_VAR 0 5
42493: PUSH
42494: LD_INT 3
42496: ARRAY
42497: GREATEREQUAL
42498: AND
42499: ST_TO_ADDR
// end ;
42500: LD_VAR 0 3
42504: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42505: LD_INT 0
42507: PPUSH
42508: PPUSH
42509: PPUSH
42510: PPUSH
42511: PPUSH
42512: PPUSH
42513: PPUSH
42514: PPUSH
42515: PPUSH
42516: PPUSH
42517: PPUSH
// result := false ;
42518: LD_ADDR_VAR 0 8
42522: PUSH
42523: LD_INT 0
42525: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42526: LD_VAR 0 5
42530: NOT
42531: IFTRUE 42540
42533: PUSH
42534: LD_VAR 0 1
42538: NOT
42539: OR
42540: IFTRUE 42549
42542: PUSH
42543: LD_VAR 0 2
42547: NOT
42548: OR
42549: IFTRUE 42558
42551: PUSH
42552: LD_VAR 0 3
42556: NOT
42557: OR
42558: IFFALSE 42562
// exit ;
42560: GO 43388
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42562: LD_ADDR_VAR 0 14
42566: PUSH
42567: LD_VAR 0 1
42571: PPUSH
42572: LD_VAR 0 2
42576: PPUSH
42577: LD_VAR 0 3
42581: PPUSH
42582: LD_VAR 0 4
42586: PPUSH
42587: LD_VAR 0 5
42591: PUSH
42592: LD_INT 1
42594: ARRAY
42595: PPUSH
42596: CALL_OW 248
42600: PPUSH
42601: LD_INT 0
42603: PPUSH
42604: CALL 44669 0 6
42608: ST_TO_ADDR
// if not hexes then
42609: LD_VAR 0 14
42613: NOT
42614: IFFALSE 42618
// exit ;
42616: GO 43388
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42618: LD_ADDR_VAR 0 17
42622: PUSH
42623: LD_VAR 0 5
42627: PPUSH
42628: LD_INT 22
42630: PUSH
42631: LD_VAR 0 13
42635: PPUSH
42636: CALL_OW 255
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 30
42650: PUSH
42651: LD_INT 0
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 30
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 72
42681: ST_TO_ADDR
// for i = 1 to hexes do
42682: LD_ADDR_VAR 0 9
42686: PUSH
42687: DOUBLE
42688: LD_INT 1
42690: DEC
42691: ST_TO_ADDR
42692: LD_VAR 0 14
42696: PUSH
42697: FOR_TO
42698: IFFALSE 43386
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42700: LD_ADDR_VAR 0 13
42704: PUSH
42705: LD_VAR 0 14
42709: PUSH
42710: LD_VAR 0 9
42714: ARRAY
42715: PUSH
42716: LD_INT 1
42718: ARRAY
42719: PPUSH
42720: LD_VAR 0 14
42724: PUSH
42725: LD_VAR 0 9
42729: ARRAY
42730: PUSH
42731: LD_INT 2
42733: ARRAY
42734: PPUSH
42735: CALL_OW 428
42739: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42740: LD_VAR 0 14
42744: PUSH
42745: LD_VAR 0 9
42749: ARRAY
42750: PUSH
42751: LD_INT 1
42753: ARRAY
42754: PPUSH
42755: LD_VAR 0 14
42759: PUSH
42760: LD_VAR 0 9
42764: ARRAY
42765: PUSH
42766: LD_INT 2
42768: ARRAY
42769: PPUSH
42770: CALL_OW 351
42774: IFTRUE 42813
42776: PUSH
42777: LD_VAR 0 14
42781: PUSH
42782: LD_VAR 0 9
42786: ARRAY
42787: PUSH
42788: LD_INT 1
42790: ARRAY
42791: PPUSH
42792: LD_VAR 0 14
42796: PUSH
42797: LD_VAR 0 9
42801: ARRAY
42802: PUSH
42803: LD_INT 2
42805: ARRAY
42806: PPUSH
42807: CALL_OW 488
42811: NOT
42812: OR
42813: IFTRUE 42830
42815: PUSH
42816: LD_VAR 0 13
42820: PPUSH
42821: CALL_OW 247
42825: PUSH
42826: LD_INT 3
42828: EQUAL
42829: OR
42830: IFFALSE 42836
// exit ;
42832: POP
42833: POP
42834: GO 43388
// if not tmp then
42836: LD_VAR 0 13
42840: NOT
42841: IFFALSE 42845
// continue ;
42843: GO 42697
// result := true ;
42845: LD_ADDR_VAR 0 8
42849: PUSH
42850: LD_INT 1
42852: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42853: LD_VAR 0 6
42857: IFFALSE 42874
42859: PUSH
42860: LD_VAR 0 13
42864: PPUSH
42865: CALL_OW 247
42869: PUSH
42870: LD_INT 2
42872: EQUAL
42873: AND
42874: IFFALSE 42891
42876: PUSH
42877: LD_VAR 0 13
42881: PPUSH
42882: CALL_OW 263
42886: PUSH
42887: LD_INT 1
42889: EQUAL
42890: AND
42891: IFFALSE 43055
// begin if IsDrivenBy ( tmp ) then
42893: LD_VAR 0 13
42897: PPUSH
42898: CALL_OW 311
42902: IFFALSE 42906
// continue ;
42904: GO 42697
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42906: LD_VAR 0 6
42910: PPUSH
42911: LD_INT 3
42913: PUSH
42914: LD_INT 60
42916: PUSH
42917: EMPTY
42918: LIST
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 3
42926: PUSH
42927: LD_INT 55
42929: PUSH
42930: EMPTY
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PPUSH
42941: CALL_OW 72
42945: IFFALSE 43053
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42947: LD_ADDR_VAR 0 18
42951: PUSH
42952: LD_VAR 0 6
42956: PPUSH
42957: LD_INT 3
42959: PUSH
42960: LD_INT 60
42962: PUSH
42963: EMPTY
42964: LIST
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 3
42972: PUSH
42973: LD_INT 55
42975: PUSH
42976: EMPTY
42977: LIST
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PPUSH
42987: CALL_OW 72
42991: PUSH
42992: LD_INT 1
42994: ARRAY
42995: ST_TO_ADDR
// if IsInUnit ( driver ) then
42996: LD_VAR 0 18
43000: PPUSH
43001: CALL_OW 310
43005: IFFALSE 43016
// ComExit ( driver ) ;
43007: LD_VAR 0 18
43011: PPUSH
43012: CALL 68659 0 1
// AddComEnterUnit ( driver , tmp ) ;
43016: LD_VAR 0 18
43020: PPUSH
43021: LD_VAR 0 13
43025: PPUSH
43026: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43030: LD_VAR 0 18
43034: PPUSH
43035: LD_VAR 0 7
43039: PPUSH
43040: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43044: LD_VAR 0 18
43048: PPUSH
43049: CALL_OW 181
// end ; continue ;
43053: GO 42697
// end ; if not cleaners or not tmp in cleaners then
43055: LD_VAR 0 6
43059: NOT
43060: IFTRUE 43075
43062: PUSH
43063: LD_VAR 0 13
43067: PUSH
43068: LD_VAR 0 6
43072: IN
43073: NOT
43074: OR
43075: IFFALSE 43384
// begin if dep then
43077: LD_VAR 0 17
43081: IFFALSE 43217
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43083: LD_ADDR_VAR 0 16
43087: PUSH
43088: LD_VAR 0 17
43092: PUSH
43093: LD_INT 1
43095: ARRAY
43096: PPUSH
43097: CALL_OW 250
43101: PPUSH
43102: LD_VAR 0 17
43106: PUSH
43107: LD_INT 1
43109: ARRAY
43110: PPUSH
43111: CALL_OW 254
43115: PPUSH
43116: LD_INT 5
43118: PPUSH
43119: CALL_OW 272
43123: PUSH
43124: LD_VAR 0 17
43128: PUSH
43129: LD_INT 1
43131: ARRAY
43132: PPUSH
43133: CALL_OW 251
43137: PPUSH
43138: LD_VAR 0 17
43142: PUSH
43143: LD_INT 1
43145: ARRAY
43146: PPUSH
43147: CALL_OW 254
43151: PPUSH
43152: LD_INT 5
43154: PPUSH
43155: CALL_OW 273
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43164: LD_VAR 0 16
43168: PUSH
43169: LD_INT 1
43171: ARRAY
43172: PPUSH
43173: LD_VAR 0 16
43177: PUSH
43178: LD_INT 2
43180: ARRAY
43181: PPUSH
43182: CALL_OW 488
43186: IFFALSE 43217
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43188: LD_VAR 0 13
43192: PPUSH
43193: LD_VAR 0 16
43197: PUSH
43198: LD_INT 1
43200: ARRAY
43201: PPUSH
43202: LD_VAR 0 16
43206: PUSH
43207: LD_INT 2
43209: ARRAY
43210: PPUSH
43211: CALL_OW 111
// continue ;
43215: GO 42697
// end ; end ; r := GetDir ( tmp ) ;
43217: LD_ADDR_VAR 0 15
43221: PUSH
43222: LD_VAR 0 13
43226: PPUSH
43227: CALL_OW 254
43231: ST_TO_ADDR
// if r = 5 then
43232: LD_VAR 0 15
43236: PUSH
43237: LD_INT 5
43239: EQUAL
43240: IFFALSE 43250
// r := 0 ;
43242: LD_ADDR_VAR 0 15
43246: PUSH
43247: LD_INT 0
43249: ST_TO_ADDR
// for j = r to 5 do
43250: LD_ADDR_VAR 0 10
43254: PUSH
43255: DOUBLE
43256: LD_VAR 0 15
43260: DEC
43261: ST_TO_ADDR
43262: LD_INT 5
43264: PUSH
43265: FOR_TO
43266: IFFALSE 43382
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43268: LD_ADDR_VAR 0 11
43272: PUSH
43273: LD_VAR 0 13
43277: PPUSH
43278: CALL_OW 250
43282: PPUSH
43283: LD_VAR 0 10
43287: PPUSH
43288: LD_INT 2
43290: PPUSH
43291: CALL_OW 272
43295: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43296: LD_ADDR_VAR 0 12
43300: PUSH
43301: LD_VAR 0 13
43305: PPUSH
43306: CALL_OW 251
43310: PPUSH
43311: LD_VAR 0 10
43315: PPUSH
43316: LD_INT 2
43318: PPUSH
43319: CALL_OW 273
43323: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43324: LD_VAR 0 11
43328: PPUSH
43329: LD_VAR 0 12
43333: PPUSH
43334: CALL_OW 488
43338: IFFALSE 43357
43340: PUSH
43341: LD_VAR 0 11
43345: PPUSH
43346: LD_VAR 0 12
43350: PPUSH
43351: CALL_OW 428
43355: NOT
43356: AND
43357: IFFALSE 43380
// begin ComMoveXY ( tmp , _x , _y ) ;
43359: LD_VAR 0 13
43363: PPUSH
43364: LD_VAR 0 11
43368: PPUSH
43369: LD_VAR 0 12
43373: PPUSH
43374: CALL_OW 111
// break ;
43378: GO 43382
// end ; end ;
43380: GO 43265
43382: POP
43383: POP
// end ; end ;
43384: GO 42697
43386: POP
43387: POP
// end ;
43388: LD_VAR 0 8
43392: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43393: LD_INT 0
43395: PPUSH
// result := true ;
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: LD_INT 1
43403: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43404: LD_VAR 0 2
43408: PUSH
43409: LD_INT 24
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43423
43415: LD_INT 33
43417: DOUBLE
43418: EQUAL
43419: IFTRUE 43423
43421: GO 43448
43423: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43424: LD_ADDR_VAR 0 3
43428: PUSH
43429: LD_INT 32
43431: PPUSH
43432: LD_VAR 0 1
43436: PPUSH
43437: CALL_OW 321
43441: PUSH
43442: LD_INT 2
43444: EQUAL
43445: ST_TO_ADDR
43446: GO 43764
43448: LD_INT 20
43450: DOUBLE
43451: EQUAL
43452: IFTRUE 43456
43454: GO 43481
43456: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43457: LD_ADDR_VAR 0 3
43461: PUSH
43462: LD_INT 6
43464: PPUSH
43465: LD_VAR 0 1
43469: PPUSH
43470: CALL_OW 321
43474: PUSH
43475: LD_INT 2
43477: EQUAL
43478: ST_TO_ADDR
43479: GO 43764
43481: LD_INT 22
43483: DOUBLE
43484: EQUAL
43485: IFTRUE 43495
43487: LD_INT 36
43489: DOUBLE
43490: EQUAL
43491: IFTRUE 43495
43493: GO 43520
43495: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43496: LD_ADDR_VAR 0 3
43500: PUSH
43501: LD_INT 15
43503: PPUSH
43504: LD_VAR 0 1
43508: PPUSH
43509: CALL_OW 321
43513: PUSH
43514: LD_INT 2
43516: EQUAL
43517: ST_TO_ADDR
43518: GO 43764
43520: LD_INT 30
43522: DOUBLE
43523: EQUAL
43524: IFTRUE 43528
43526: GO 43553
43528: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43529: LD_ADDR_VAR 0 3
43533: PUSH
43534: LD_INT 20
43536: PPUSH
43537: LD_VAR 0 1
43541: PPUSH
43542: CALL_OW 321
43546: PUSH
43547: LD_INT 2
43549: EQUAL
43550: ST_TO_ADDR
43551: GO 43764
43553: LD_INT 28
43555: DOUBLE
43556: EQUAL
43557: IFTRUE 43567
43559: LD_INT 21
43561: DOUBLE
43562: EQUAL
43563: IFTRUE 43567
43565: GO 43592
43567: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43568: LD_ADDR_VAR 0 3
43572: PUSH
43573: LD_INT 21
43575: PPUSH
43576: LD_VAR 0 1
43580: PPUSH
43581: CALL_OW 321
43585: PUSH
43586: LD_INT 2
43588: EQUAL
43589: ST_TO_ADDR
43590: GO 43764
43592: LD_INT 16
43594: DOUBLE
43595: EQUAL
43596: IFTRUE 43600
43598: GO 43625
43600: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43601: LD_ADDR_VAR 0 3
43605: PUSH
43606: LD_INT 84
43608: PPUSH
43609: LD_VAR 0 1
43613: PPUSH
43614: CALL_OW 321
43618: PUSH
43619: LD_INT 2
43621: EQUAL
43622: ST_TO_ADDR
43623: GO 43764
43625: LD_INT 19
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43639
43631: LD_INT 23
43633: DOUBLE
43634: EQUAL
43635: IFTRUE 43639
43637: GO 43664
43639: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43640: LD_ADDR_VAR 0 3
43644: PUSH
43645: LD_INT 83
43647: PPUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 321
43657: PUSH
43658: LD_INT 2
43660: EQUAL
43661: ST_TO_ADDR
43662: GO 43764
43664: LD_INT 17
43666: DOUBLE
43667: EQUAL
43668: IFTRUE 43672
43670: GO 43697
43672: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43673: LD_ADDR_VAR 0 3
43677: PUSH
43678: LD_INT 39
43680: PPUSH
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 321
43690: PUSH
43691: LD_INT 2
43693: EQUAL
43694: ST_TO_ADDR
43695: GO 43764
43697: LD_INT 18
43699: DOUBLE
43700: EQUAL
43701: IFTRUE 43705
43703: GO 43730
43705: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43706: LD_ADDR_VAR 0 3
43710: PUSH
43711: LD_INT 40
43713: PPUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: CALL_OW 321
43723: PUSH
43724: LD_INT 2
43726: EQUAL
43727: ST_TO_ADDR
43728: GO 43764
43730: LD_INT 27
43732: DOUBLE
43733: EQUAL
43734: IFTRUE 43738
43736: GO 43763
43738: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43739: LD_ADDR_VAR 0 3
43743: PUSH
43744: LD_INT 35
43746: PPUSH
43747: LD_VAR 0 1
43751: PPUSH
43752: CALL_OW 321
43756: PUSH
43757: LD_INT 2
43759: EQUAL
43760: ST_TO_ADDR
43761: GO 43764
43763: POP
// end ;
43764: LD_VAR 0 3
43768: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43769: LD_INT 0
43771: PPUSH
43772: PPUSH
43773: PPUSH
43774: PPUSH
43775: PPUSH
43776: PPUSH
43777: PPUSH
43778: PPUSH
43779: PPUSH
43780: PPUSH
43781: PPUSH
// result := false ;
43782: LD_ADDR_VAR 0 6
43786: PUSH
43787: LD_INT 0
43789: ST_TO_ADDR
// if btype = b_depot then
43790: LD_VAR 0 2
43794: PUSH
43795: LD_INT 0
43797: EQUAL
43798: IFFALSE 43810
// begin result := true ;
43800: LD_ADDR_VAR 0 6
43804: PUSH
43805: LD_INT 1
43807: ST_TO_ADDR
// exit ;
43808: GO 44664
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43810: LD_VAR 0 1
43814: NOT
43815: IFTRUE 43840
43817: PUSH
43818: LD_VAR 0 1
43822: PPUSH
43823: CALL_OW 266
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: IN
43838: NOT
43839: OR
43840: IFTRUE 43849
43842: PUSH
43843: LD_VAR 0 2
43847: NOT
43848: OR
43849: IFTRUE 43885
43851: PUSH
43852: LD_VAR 0 5
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: LD_INT 3
43868: PUSH
43869: LD_INT 4
43871: PUSH
43872: LD_INT 5
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: IN
43883: NOT
43884: OR
43885: IFTRUE 43904
43887: PUSH
43888: LD_VAR 0 3
43892: PPUSH
43893: LD_VAR 0 4
43897: PPUSH
43898: CALL_OW 488
43902: NOT
43903: OR
43904: IFFALSE 43908
// exit ;
43906: GO 44664
// side := GetSide ( depot ) ;
43908: LD_ADDR_VAR 0 9
43912: PUSH
43913: LD_VAR 0 1
43917: PPUSH
43918: CALL_OW 255
43922: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43923: LD_VAR 0 9
43927: PPUSH
43928: LD_VAR 0 2
43932: PPUSH
43933: CALL 43393 0 2
43937: NOT
43938: IFFALSE 43942
// exit ;
43940: GO 44664
// pom := GetBase ( depot ) ;
43942: LD_ADDR_VAR 0 10
43946: PUSH
43947: LD_VAR 0 1
43951: PPUSH
43952: CALL_OW 274
43956: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43957: LD_ADDR_VAR 0 11
43961: PUSH
43962: LD_VAR 0 2
43966: PPUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: CALL_OW 248
43976: PPUSH
43977: CALL_OW 450
43981: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43982: LD_VAR 0 10
43986: PPUSH
43987: LD_INT 1
43989: PPUSH
43990: CALL_OW 275
43994: PUSH
43995: LD_VAR 0 11
43999: PUSH
44000: LD_INT 1
44002: ARRAY
44003: GREATEREQUAL
44004: IFFALSE 44030
44006: PUSH
44007: LD_VAR 0 10
44011: PPUSH
44012: LD_INT 2
44014: PPUSH
44015: CALL_OW 275
44019: PUSH
44020: LD_VAR 0 11
44024: PUSH
44025: LD_INT 2
44027: ARRAY
44028: GREATEREQUAL
44029: AND
44030: IFFALSE 44056
44032: PUSH
44033: LD_VAR 0 10
44037: PPUSH
44038: LD_INT 3
44040: PPUSH
44041: CALL_OW 275
44045: PUSH
44046: LD_VAR 0 11
44050: PUSH
44051: LD_INT 3
44053: ARRAY
44054: GREATEREQUAL
44055: AND
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44664
// if GetBType ( depot ) = b_depot then
44061: LD_VAR 0 1
44065: PPUSH
44066: CALL_OW 266
44070: PUSH
44071: LD_INT 0
44073: EQUAL
44074: IFFALSE 44086
// dist := 28 else
44076: LD_ADDR_VAR 0 14
44080: PUSH
44081: LD_INT 28
44083: ST_TO_ADDR
44084: GO 44094
// dist := 36 ;
44086: LD_ADDR_VAR 0 14
44090: PUSH
44091: LD_INT 36
44093: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44094: LD_VAR 0 1
44098: PPUSH
44099: LD_VAR 0 3
44103: PPUSH
44104: LD_VAR 0 4
44108: PPUSH
44109: CALL_OW 297
44113: PUSH
44114: LD_VAR 0 14
44118: GREATER
44119: IFFALSE 44123
// exit ;
44121: GO 44664
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44123: LD_ADDR_VAR 0 12
44127: PUSH
44128: LD_VAR 0 2
44132: PPUSH
44133: LD_VAR 0 3
44137: PPUSH
44138: LD_VAR 0 4
44142: PPUSH
44143: LD_VAR 0 5
44147: PPUSH
44148: LD_VAR 0 1
44152: PPUSH
44153: CALL_OW 248
44157: PPUSH
44158: LD_INT 0
44160: PPUSH
44161: CALL 44669 0 6
44165: ST_TO_ADDR
// if not hexes then
44166: LD_VAR 0 12
44170: NOT
44171: IFFALSE 44175
// exit ;
44173: GO 44664
// hex := GetHexInfo ( x , y ) ;
44175: LD_ADDR_VAR 0 15
44179: PUSH
44180: LD_VAR 0 3
44184: PPUSH
44185: LD_VAR 0 4
44189: PPUSH
44190: CALL_OW 546
44194: ST_TO_ADDR
// if hex [ 1 ] then
44195: LD_VAR 0 15
44199: PUSH
44200: LD_INT 1
44202: ARRAY
44203: IFFALSE 44207
// exit ;
44205: GO 44664
// height := hex [ 2 ] ;
44207: LD_ADDR_VAR 0 13
44211: PUSH
44212: LD_VAR 0 15
44216: PUSH
44217: LD_INT 2
44219: ARRAY
44220: ST_TO_ADDR
// for i = 1 to hexes do
44221: LD_ADDR_VAR 0 7
44225: PUSH
44226: DOUBLE
44227: LD_INT 1
44229: DEC
44230: ST_TO_ADDR
44231: LD_VAR 0 12
44235: PUSH
44236: FOR_TO
44237: IFFALSE 44581
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44239: LD_VAR 0 12
44243: PUSH
44244: LD_VAR 0 7
44248: ARRAY
44249: PUSH
44250: LD_INT 1
44252: ARRAY
44253: PPUSH
44254: LD_VAR 0 12
44258: PUSH
44259: LD_VAR 0 7
44263: ARRAY
44264: PUSH
44265: LD_INT 2
44267: ARRAY
44268: PPUSH
44269: CALL_OW 488
44273: NOT
44274: IFTRUE 44316
44276: PUSH
44277: LD_VAR 0 12
44281: PUSH
44282: LD_VAR 0 7
44286: ARRAY
44287: PUSH
44288: LD_INT 1
44290: ARRAY
44291: PPUSH
44292: LD_VAR 0 12
44296: PUSH
44297: LD_VAR 0 7
44301: ARRAY
44302: PUSH
44303: LD_INT 2
44305: ARRAY
44306: PPUSH
44307: CALL_OW 428
44311: PUSH
44312: LD_INT 0
44314: GREATER
44315: OR
44316: IFTRUE 44354
44318: PUSH
44319: LD_VAR 0 12
44323: PUSH
44324: LD_VAR 0 7
44328: ARRAY
44329: PUSH
44330: LD_INT 1
44332: ARRAY
44333: PPUSH
44334: LD_VAR 0 12
44338: PUSH
44339: LD_VAR 0 7
44343: ARRAY
44344: PUSH
44345: LD_INT 2
44347: ARRAY
44348: PPUSH
44349: CALL_OW 351
44353: OR
44354: IFFALSE 44360
// exit ;
44356: POP
44357: POP
44358: GO 44664
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44360: LD_ADDR_VAR 0 8
44364: PUSH
44365: LD_VAR 0 12
44369: PUSH
44370: LD_VAR 0 7
44374: ARRAY
44375: PUSH
44376: LD_INT 1
44378: ARRAY
44379: PPUSH
44380: LD_VAR 0 12
44384: PUSH
44385: LD_VAR 0 7
44389: ARRAY
44390: PUSH
44391: LD_INT 2
44393: ARRAY
44394: PPUSH
44395: CALL_OW 546
44399: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44400: LD_VAR 0 8
44404: PUSH
44405: LD_INT 1
44407: ARRAY
44408: IFTRUE 44430
44410: PUSH
44411: LD_VAR 0 8
44415: PUSH
44416: LD_INT 2
44418: ARRAY
44419: PUSH
44420: LD_VAR 0 13
44424: PUSH
44425: LD_INT 2
44427: PLUS
44428: GREATER
44429: OR
44430: IFTRUE 44452
44432: PUSH
44433: LD_VAR 0 8
44437: PUSH
44438: LD_INT 2
44440: ARRAY
44441: PUSH
44442: LD_VAR 0 13
44446: PUSH
44447: LD_INT 2
44449: MINUS
44450: LESS
44451: OR
44452: IFTRUE 44520
44454: PUSH
44455: LD_VAR 0 8
44459: PUSH
44460: LD_INT 3
44462: ARRAY
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 8
44469: PUSH
44470: LD_INT 9
44472: PUSH
44473: LD_INT 10
44475: PUSH
44476: LD_INT 11
44478: PUSH
44479: LD_INT 12
44481: PUSH
44482: LD_INT 13
44484: PUSH
44485: LD_INT 16
44487: PUSH
44488: LD_INT 17
44490: PUSH
44491: LD_INT 18
44493: PUSH
44494: LD_INT 19
44496: PUSH
44497: LD_INT 20
44499: PUSH
44500: LD_INT 21
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: IN
44518: NOT
44519: OR
44520: IFTRUE 44533
44522: PUSH
44523: LD_VAR 0 8
44527: PUSH
44528: LD_INT 5
44530: ARRAY
44531: NOT
44532: OR
44533: IFTRUE 44573
44535: PUSH
44536: LD_VAR 0 8
44540: PUSH
44541: LD_INT 6
44543: ARRAY
44544: PUSH
44545: LD_INT 1
44547: PUSH
44548: LD_INT 2
44550: PUSH
44551: LD_INT 7
44553: PUSH
44554: LD_INT 9
44556: PUSH
44557: LD_INT 10
44559: PUSH
44560: LD_INT 11
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: IN
44571: NOT
44572: OR
44573: IFFALSE 44579
// exit ;
44575: POP
44576: POP
44577: GO 44664
// end ;
44579: GO 44236
44581: POP
44582: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44583: LD_VAR 0 9
44587: PPUSH
44588: LD_VAR 0 3
44592: PPUSH
44593: LD_VAR 0 4
44597: PPUSH
44598: LD_INT 20
44600: PPUSH
44601: CALL 36483 0 4
44605: PUSH
44606: LD_INT 4
44608: ARRAY
44609: IFFALSE 44613
// exit ;
44611: GO 44664
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44613: LD_VAR 0 2
44617: PUSH
44618: LD_INT 29
44620: PUSH
44621: LD_INT 30
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: IN
44628: IFFALSE 44652
44630: PUSH
44631: LD_VAR 0 3
44635: PPUSH
44636: LD_VAR 0 4
44640: PPUSH
44641: LD_VAR 0 9
44645: PPUSH
44646: CALL_OW 440
44650: NOT
44651: AND
44652: IFFALSE 44656
// exit ;
44654: GO 44664
// result := true ;
44656: LD_ADDR_VAR 0 6
44660: PUSH
44661: LD_INT 1
44663: ST_TO_ADDR
// end ;
44664: LD_VAR 0 6
44668: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44669: LD_INT 0
44671: PPUSH
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
44679: PPUSH
44680: PPUSH
44681: PPUSH
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
44704: PPUSH
44705: PPUSH
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
44718: PPUSH
44719: PPUSH
44720: PPUSH
44721: PPUSH
44722: PPUSH
44723: PPUSH
44724: PPUSH
44725: PPUSH
44726: PPUSH
44727: PPUSH
44728: PPUSH
// result = [ ] ;
44729: LD_ADDR_VAR 0 7
44733: PUSH
44734: EMPTY
44735: ST_TO_ADDR
// temp_list = [ ] ;
44736: LD_ADDR_VAR 0 9
44740: PUSH
44741: EMPTY
44742: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44743: LD_VAR 0 4
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 3
44759: PUSH
44760: LD_INT 4
44762: PUSH
44763: LD_INT 5
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: IN
44774: NOT
44775: IFTRUE 44818
44777: PUSH
44778: LD_VAR 0 1
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: IN
44793: IFFALSE 44817
44795: PUSH
44796: LD_VAR 0 5
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 2
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: IN
44815: NOT
44816: AND
44817: OR
44818: IFFALSE 44822
// exit ;
44820: GO 63221
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44822: LD_VAR 0 1
44826: PUSH
44827: LD_INT 6
44829: PUSH
44830: LD_INT 7
44832: PUSH
44833: LD_INT 8
44835: PUSH
44836: LD_INT 13
44838: PUSH
44839: LD_INT 12
44841: PUSH
44842: LD_INT 15
44844: PUSH
44845: LD_INT 11
44847: PUSH
44848: LD_INT 14
44850: PUSH
44851: LD_INT 10
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: IN
44865: IFFALSE 44875
// btype = b_lab ;
44867: LD_ADDR_VAR 0 1
44871: PUSH
44872: LD_INT 6
44874: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44875: LD_VAR 0 6
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: IN
44894: NOT
44895: IFTRUE 44963
44897: PUSH
44898: LD_VAR 0 1
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: LD_INT 6
44917: PUSH
44918: LD_INT 36
44920: PUSH
44921: LD_INT 4
44923: PUSH
44924: LD_INT 5
44926: PUSH
44927: LD_INT 31
44929: PUSH
44930: LD_INT 32
44932: PUSH
44933: LD_INT 33
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: IN
44949: NOT
44950: IFFALSE 44962
44952: PUSH
44953: LD_VAR 0 6
44957: PUSH
44958: LD_INT 1
44960: EQUAL
44961: AND
44962: OR
44963: IFTRUE 44995
44965: PUSH
44966: LD_VAR 0 1
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: IN
44981: NOT
44982: IFFALSE 44994
44984: PUSH
44985: LD_VAR 0 6
44989: PUSH
44990: LD_INT 2
44992: EQUAL
44993: AND
44994: OR
44995: IFFALSE 45005
// mode = 0 ;
44997: LD_ADDR_VAR 0 6
45001: PUSH
45002: LD_INT 0
45004: ST_TO_ADDR
// case mode of 0 :
45005: LD_VAR 0 6
45009: PUSH
45010: LD_INT 0
45012: DOUBLE
45013: EQUAL
45014: IFTRUE 45018
45016: GO 56471
45018: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45019: LD_ADDR_VAR 0 11
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 0
45112: PUSH
45113: LD_INT 2
45115: NEG
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: LD_INT 2
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: LD_INT 3
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45212: LD_ADDR_VAR 0 12
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 1
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 0
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: NEG
45336: PUSH
45337: LD_INT 0
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 3
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 3
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45408: LD_ADDR_VAR 0 13
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 0
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 2
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: LD_INT 3
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 3
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: NEG
45580: PUSH
45581: LD_INT 3
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45607: LD_ADDR_VAR 0 14
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: NEG
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 3
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45803: LD_ADDR_VAR 0 15
45807: PUSH
45808: LD_INT 0
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 3
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 3
45970: PUSH
45971: LD_INT 1
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45996: LD_ADDR_VAR 0 16
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 2
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 2
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 3
46153: PUSH
46154: LD_INT 3
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: LD_INT 3
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46189: LD_ADDR_VAR 0 17
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46419: LD_ADDR_VAR 0 18
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: NEG
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46649: LD_ADDR_VAR 0 19
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46879: LD_ADDR_VAR 0 20
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47109: LD_ADDR_VAR 0 21
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47339: LD_ADDR_VAR 0 22
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 0
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: NEG
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: NEG
47409: PUSH
47410: LD_INT 1
47412: NEG
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: NEG
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: LD_INT 2
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 2
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 2
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 2
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: NEG
47539: PUSH
47540: LD_INT 2
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47569: LD_ADDR_VAR 0 23
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: NEG
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 0
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 2
47780: NEG
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 3
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 2
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47849: LD_ADDR_VAR 0 24
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 2
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 2
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 2
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: NEG
48037: PUSH
48038: LD_INT 1
48040: NEG
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 2
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 2
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48125: LD_ADDR_VAR 0 25
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 1
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 2
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 3
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 3
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48399: LD_ADDR_VAR 0 26
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 2
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 1
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 0
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: LD_INT 2
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: PUSH
48611: LD_INT 3
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 3
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 1
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48675: LD_ADDR_VAR 0 27
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: LD_INT 0
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 0
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 2
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 2
48862: NEG
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: NEG
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: LD_INT 2
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48955: LD_ADDR_VAR 0 28
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 1
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: EMPTY
49075: LIST
49076: LIST
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 3
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 3
49202: NEG
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49237: LD_ADDR_VAR 0 29
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 1
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 0
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 1
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 3
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 3
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 3
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49516: LD_ADDR_VAR 0 30
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 2
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: NEG
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: LD_INT 1
49763: NEG
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49794: LD_ADDR_VAR 0 31
49798: PUSH
49799: LD_INT 0
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 2
49983: NEG
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 1
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 3
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50072: LD_ADDR_VAR 0 32
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 1
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 2
50197: PUSH
50198: LD_INT 2
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 2
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 2
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 2
50238: NEG
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: NEG
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 2
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 3
50284: PUSH
50285: LD_INT 2
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 2
50294: PUSH
50295: LD_INT 3
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 3
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50350: LD_ADDR_VAR 0 33
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: NEG
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 0
50484: PUSH
50485: LD_INT 2
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 1
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: NEG
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: LD_INT 3
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: NEG
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50629: LD_ADDR_VAR 0 34
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 2
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 2
50785: NEG
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: NEG
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 3
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 3
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: LD_INT 3
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 3
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50909: LD_ADDR_VAR 0 35
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 0
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: LD_INT 0
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51021: LD_ADDR_VAR 0 36
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51133: LD_ADDR_VAR 0 37
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 1
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: LD_INT 1
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: NEG
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51245: LD_ADDR_VAR 0 38
51249: PUSH
51250: LD_INT 0
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: NEG
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51357: LD_ADDR_VAR 0 39
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 0
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: LD_INT 1
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 2
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51469: LD_ADDR_VAR 0 40
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 1
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51581: LD_ADDR_VAR 0 41
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 1
51662: NEG
51663: PUSH
51664: LD_INT 2
51666: NEG
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: NEG
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 2
51759: NEG
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: LD_INT 3
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 3
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 3
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 2
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 3
51866: NEG
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 3
51878: NEG
51879: PUSH
51880: LD_INT 2
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 3
51890: NEG
51891: PUSH
51892: LD_INT 3
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51931: LD_ADDR_VAR 0 42
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: LD_INT 1
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 2
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 2
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: LD_INT 1
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 3
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 3
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 3
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 3
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52281: LD_ADDR_VAR 0 43
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 1
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 0
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 2
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 1
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 2
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: LD_INT 0
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: NEG
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: LD_INT 3
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 3
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 3
52577: NEG
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52629: LD_ADDR_VAR 0 44
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: NEG
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 2
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 1
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 2
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 3
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 2
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 3
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 2
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 3
52903: NEG
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 3
52914: NEG
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 3
52926: NEG
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: NEG
52939: PUSH
52940: LD_INT 3
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52979: LD_ADDR_VAR 0 45
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 1
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 2
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 1
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 0
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 3
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: LD_INT 2
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 3
53225: PUSH
53226: LD_INT 3
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 2
53235: PUSH
53236: LD_INT 3
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 3
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: LD_INT 2
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53329: LD_ADDR_VAR 0 46
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 1
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 2
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 1
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 0
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 2
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: LD_INT 3
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 0
53593: PUSH
53594: LD_INT 3
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53677: LD_ADDR_VAR 0 47
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 0
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 1
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 2
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 2
53792: NEG
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: NEG
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53828: LD_ADDR_VAR 0 48
53832: PUSH
53833: LD_INT 0
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 1
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 1
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: NEG
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 0
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53975: LD_ADDR_VAR 0 49
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 0
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: LD_INT 0
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54119: LD_ADDR_VAR 0 50
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 0
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: PUSH
54211: LD_INT 2
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 2
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 2
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54263: LD_ADDR_VAR 0 51
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: NEG
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54410: LD_ADDR_VAR 0 52
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 1
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: NEG
54526: PUSH
54527: LD_INT 1
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 2
54537: NEG
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54561: LD_ADDR_VAR 0 53
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54791: LD_ADDR_VAR 0 54
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55021: LD_ADDR_VAR 0 55
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55251: LD_ADDR_VAR 0 56
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 2
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 2
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 2
55450: NEG
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55481: LD_ADDR_VAR 0 57
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: PUSH
55520: LD_INT 1
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 2
55616: PUSH
55617: LD_INT 2
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 0
55636: PUSH
55637: LD_INT 2
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 2
55657: NEG
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 2
55680: NEG
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55711: LD_ADDR_VAR 0 58
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55941: LD_ADDR_VAR 0 59
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 0
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: LD_INT 1
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56029: LD_ADDR_VAR 0 60
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 1
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: LD_INT 1
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56117: LD_ADDR_VAR 0 61
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56205: LD_ADDR_VAR 0 62
56209: PUSH
56210: LD_INT 0
56212: PUSH
56213: LD_INT 0
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: LD_INT 1
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 1
56263: NEG
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: LD_INT 1
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56293: LD_ADDR_VAR 0 63
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 1
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 0
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56381: LD_ADDR_VAR 0 64
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// end ; 1 :
56469: GO 62366
56471: LD_INT 1
56473: DOUBLE
56474: EQUAL
56475: IFTRUE 56479
56477: GO 59102
56479: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56480: LD_ADDR_VAR 0 11
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: LD_INT 3
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 0
56499: PUSH
56500: LD_INT 3
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56524: LD_ADDR_VAR 0 12
56528: PUSH
56529: LD_INT 2
56531: PUSH
56532: LD_INT 1
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: LD_INT 1
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56565: LD_ADDR_VAR 0 13
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 3
56582: PUSH
56583: LD_INT 3
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56605: LD_ADDR_VAR 0 14
56609: PUSH
56610: LD_INT 1
56612: PUSH
56613: LD_INT 3
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 3
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: LIST
56645: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56646: LD_ADDR_VAR 0 15
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 3
56664: NEG
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: NEG
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: LIST
56689: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56690: LD_ADDR_VAR 0 16
56694: PUSH
56695: LD_INT 2
56697: NEG
56698: PUSH
56699: LD_INT 3
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 3
56709: NEG
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 3
56721: NEG
56722: PUSH
56723: LD_INT 3
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: LIST
56735: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56736: LD_ADDR_VAR 0 17
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 3
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 2
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: LIST
56779: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56780: LD_ADDR_VAR 0 18
56784: PUSH
56785: LD_INT 2
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56821: LD_ADDR_VAR 0 19
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 3
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: LIST
56860: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56861: LD_ADDR_VAR 0 20
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 3
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 2
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: LIST
56901: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56902: LD_ADDR_VAR 0 21
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 0
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 1
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56946: LD_ADDR_VAR 0 22
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: NEG
56966: PUSH
56967: LD_INT 2
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: LIST
56991: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56992: LD_ADDR_VAR 0 23
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: LD_INT 3
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 4
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: LD_INT 3
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: LIST
57035: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57036: LD_ADDR_VAR 0 24
57040: PUSH
57041: LD_INT 3
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 4
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57077: LD_ADDR_VAR 0 25
57081: PUSH
57082: LD_INT 3
57084: PUSH
57085: LD_INT 3
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 4
57094: PUSH
57095: LD_INT 3
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57117: LD_ADDR_VAR 0 26
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: PUSH
57135: LD_INT 4
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: LIST
57157: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57158: LD_ADDR_VAR 0 27
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: NEG
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 4
57187: NEG
57188: PUSH
57189: LD_INT 1
57191: NEG
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57202: LD_ADDR_VAR 0 28
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 3
57221: NEG
57222: PUSH
57223: LD_INT 4
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: NEG
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57248: LD_ADDR_VAR 0 29
57252: PUSH
57253: LD_INT 1
57255: NEG
57256: PUSH
57257: LD_INT 3
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 4
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: LD_INT 4
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 3
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: LD_INT 5
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: LD_INT 5
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 4
57349: NEG
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 1
57357: NEG
57358: PUSH
57359: LD_INT 6
57361: NEG
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 0
57369: PUSH
57370: LD_INT 6
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: PUSH
57381: LD_INT 5
57383: NEG
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57403: LD_ADDR_VAR 0 30
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 3
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 3
57441: PUSH
57442: LD_INT 1
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 4
57452: PUSH
57453: LD_INT 0
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 4
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 4
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 5
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 5
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 5
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 6
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 6
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57546: LD_ADDR_VAR 0 31
57550: PUSH
57551: LD_INT 3
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 3
57563: PUSH
57564: LD_INT 3
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: LD_INT 3
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: LD_INT 3
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 4
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 5
57613: PUSH
57614: LD_INT 4
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 5
57623: PUSH
57624: LD_INT 5
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 4
57633: PUSH
57634: LD_INT 5
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 6
57643: PUSH
57644: LD_INT 5
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 6
57653: PUSH
57654: LD_INT 6
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 5
57663: PUSH
57664: LD_INT 6
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57685: LD_ADDR_VAR 0 32
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 0
57702: PUSH
57703: LD_INT 3
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: NEG
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 1
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: LD_INT 4
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 3
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 5
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 5
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: LD_INT 4
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 6
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 6
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: LD_INT 5
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57828: LD_ADDR_VAR 0 33
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 3
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 4
57880: NEG
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 4
57891: NEG
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 4
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 5
57914: NEG
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 5
57925: NEG
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 5
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 6
57948: NEG
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 6
57959: NEG
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57983: LD_ADDR_VAR 0 34
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 3
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: LD_INT 3
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: LD_INT 4
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 4
58038: NEG
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 4
58050: NEG
58051: PUSH
58052: LD_INT 4
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 4
58062: NEG
58063: PUSH
58064: LD_INT 5
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 5
58074: NEG
58075: PUSH
58076: LD_INT 4
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 5
58086: NEG
58087: PUSH
58088: LD_INT 5
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 5
58098: NEG
58099: PUSH
58100: LD_INT 6
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 6
58110: NEG
58111: PUSH
58112: LD_INT 5
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 6
58122: NEG
58123: PUSH
58124: LD_INT 6
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58146: LD_ADDR_VAR 0 41
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 1
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58190: LD_ADDR_VAR 0 42
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 3
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: LIST
58230: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58231: LD_ADDR_VAR 0 43
58235: PUSH
58236: LD_INT 2
58238: PUSH
58239: LD_INT 2
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58271: LD_ADDR_VAR 0 44
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58312: LD_ADDR_VAR 0 45
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 3
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58356: LD_ADDR_VAR 0 46
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: LD_INT 3
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: LD_INT 2
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: LIST
58401: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58402: LD_ADDR_VAR 0 47
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 3
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58435: LD_ADDR_VAR 0 48
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 2
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58466: LD_ADDR_VAR 0 49
58470: PUSH
58471: LD_INT 3
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58495: LD_ADDR_VAR 0 50
58499: PUSH
58500: LD_INT 2
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58524: LD_ADDR_VAR 0 51
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: NEG
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58555: LD_ADDR_VAR 0 52
58559: PUSH
58560: LD_INT 3
58562: NEG
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 3
58574: NEG
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58588: LD_ADDR_VAR 0 53
58592: PUSH
58593: LD_INT 1
58595: NEG
58596: PUSH
58597: LD_INT 3
58599: NEG
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 0
58607: PUSH
58608: LD_INT 3
58610: NEG
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58632: LD_ADDR_VAR 0 54
58636: PUSH
58637: LD_INT 2
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 3
58650: PUSH
58651: LD_INT 0
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: LIST
58672: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58673: LD_ADDR_VAR 0 55
58677: PUSH
58678: LD_INT 3
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: EMPTY
58685: LIST
58686: LIST
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: LD_INT 3
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 2
58700: PUSH
58701: LD_INT 3
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58713: LD_ADDR_VAR 0 56
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 3
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58754: LD_ADDR_VAR 0 57
58758: PUSH
58759: LD_INT 2
58761: NEG
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: LD_INT 0
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 3
58783: NEG
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58798: LD_ADDR_VAR 0 58
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: LD_INT 2
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 3
58829: NEG
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58844: LD_ADDR_VAR 0 59
58848: PUSH
58849: LD_INT 1
58851: NEG
58852: PUSH
58853: LD_INT 2
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58888: LD_ADDR_VAR 0 60
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58929: LD_ADDR_VAR 0 61
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58969: LD_ADDR_VAR 0 62
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 1
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: LIST
59009: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59010: LD_ADDR_VAR 0 63
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 2
59039: NEG
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: LIST
59053: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59054: LD_ADDR_VAR 0 64
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 2
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: LIST
59099: ST_TO_ADDR
// end ; 2 :
59100: GO 62366
59102: LD_INT 2
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59110
59108: GO 62365
59110: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59111: LD_ADDR_VAR 0 29
59115: PUSH
59116: LD_INT 4
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 4
59128: PUSH
59129: LD_INT 1
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 5
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 5
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 4
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 3
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: LD_INT 1
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 5
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 3
59211: PUSH
59212: LD_INT 3
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 4
59231: PUSH
59232: LD_INT 3
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 4
59241: PUSH
59242: LD_INT 4
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: PUSH
59252: LD_INT 4
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: LD_INT 3
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: LD_INT 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 4
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 4
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 4
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 0
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 4
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: LD_INT 5
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 4
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 1
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: LD_INT 3
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 3
59394: NEG
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: NEG
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 4
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 4
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: NEG
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 2
59485: NEG
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 4
59496: NEG
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 4
59508: NEG
59509: PUSH
59510: LD_INT 5
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 3
59520: NEG
59521: PUSH
59522: LD_INT 4
59524: NEG
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 3
59532: NEG
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 4
59544: NEG
59545: PUSH
59546: LD_INT 3
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 5
59556: NEG
59557: PUSH
59558: LD_INT 4
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 5
59568: NEG
59569: PUSH
59570: LD_INT 5
59572: NEG
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 3
59580: NEG
59581: PUSH
59582: LD_INT 5
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 5
59592: NEG
59593: PUSH
59594: LD_INT 3
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59649: LD_ADDR_VAR 0 30
59653: PUSH
59654: LD_INT 4
59656: PUSH
59657: LD_INT 4
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 4
59666: PUSH
59667: LD_INT 3
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 5
59676: PUSH
59677: LD_INT 4
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 5
59686: PUSH
59687: LD_INT 5
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 4
59696: PUSH
59697: LD_INT 5
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 3
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 3
59716: PUSH
59717: LD_INT 3
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 5
59726: PUSH
59727: LD_INT 3
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 3
59736: PUSH
59737: LD_INT 5
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: PUSH
59767: LD_INT 3
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 1
59776: PUSH
59777: LD_INT 4
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: NEG
59797: PUSH
59798: LD_INT 3
59800: PUSH
59801: EMPTY
59802: LIST
59803: LIST
59804: PUSH
59805: LD_INT 1
59807: NEG
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 4
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 4
59839: NEG
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 4
59850: NEG
59851: PUSH
59852: LD_INT 1
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 3
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: EMPTY
59879: LIST
59880: LIST
59881: PUSH
59882: LD_INT 4
59884: NEG
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 5
59895: NEG
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 5
59906: NEG
59907: PUSH
59908: LD_INT 1
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 5
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 3
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: LD_INT 3
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: NEG
59978: PUSH
59979: LD_INT 2
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 3
59989: NEG
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 4
60001: NEG
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: LD_INT 4
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: LD_INT 4
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 4
60037: NEG
60038: PUSH
60039: LD_INT 2
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 0
60049: PUSH
60050: LD_INT 4
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 5
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 3
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 0
60093: PUSH
60094: LD_INT 3
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: LD_INT 4
60108: NEG
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: LD_INT 5
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 3
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: LD_INT 5
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60196: LD_ADDR_VAR 0 31
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 4
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 0
60213: PUSH
60214: LD_INT 3
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 4
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: LD_INT 5
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: LD_INT 5
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 1
60253: NEG
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 1
60264: NEG
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 5
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: NEG
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 2
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 3
60341: NEG
60342: PUSH
60343: LD_INT 1
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 4
60352: NEG
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 4
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: NEG
60388: PUSH
60389: LD_INT 2
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 4
60398: NEG
60399: PUSH
60400: LD_INT 4
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 4
60410: NEG
60411: PUSH
60412: LD_INT 5
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 3
60422: NEG
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 3
60434: NEG
60435: PUSH
60436: LD_INT 3
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 4
60446: NEG
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 5
60458: NEG
60459: PUSH
60460: LD_INT 4
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 5
60470: NEG
60471: PUSH
60472: LD_INT 5
60474: NEG
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PUSH
60480: LD_INT 3
60482: NEG
60483: PUSH
60484: LD_INT 5
60486: NEG
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 5
60494: NEG
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 0
60506: PUSH
60507: LD_INT 3
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 4
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 1
60539: PUSH
60540: LD_INT 2
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 2
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 1
60561: NEG
60562: PUSH
60563: LD_INT 3
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: NEG
60574: PUSH
60575: LD_INT 4
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 2
60585: PUSH
60586: LD_INT 2
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 2
60596: NEG
60597: PUSH
60598: LD_INT 4
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 4
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 5
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 5
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 4
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 5
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60746: LD_ADDR_VAR 0 32
60750: PUSH
60751: LD_INT 4
60753: NEG
60754: PUSH
60755: LD_INT 0
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 4
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: LD_INT 1
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 5
60809: NEG
60810: PUSH
60811: LD_INT 0
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 5
60820: NEG
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 5
60832: NEG
60833: PUSH
60834: LD_INT 2
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 3
60844: NEG
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: LD_INT 4
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 2
60879: NEG
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 2
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 4
60927: NEG
60928: PUSH
60929: LD_INT 4
60931: NEG
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 4
60943: NEG
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 4
60951: NEG
60952: PUSH
60953: LD_INT 2
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 4
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 5
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 4
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: LD_INT 3
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 0
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 4
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: NEG
61031: PUSH
61032: LD_INT 5
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: PUSH
61043: LD_INT 3
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 2
61053: NEG
61054: PUSH
61055: LD_INT 5
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 3
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 4
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 3
61106: PUSH
61107: LD_INT 1
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 2
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 4
61148: PUSH
61149: LD_INT 2
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 4
61158: PUSH
61159: LD_INT 4
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 4
61168: PUSH
61169: LD_INT 3
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 5
61178: PUSH
61179: LD_INT 4
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 5
61188: PUSH
61189: LD_INT 5
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 4
61198: PUSH
61199: LD_INT 5
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: PUSH
61209: LD_INT 4
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: PUSH
61219: LD_INT 3
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 5
61228: PUSH
61229: LD_INT 3
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 3
61238: PUSH
61239: LD_INT 5
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61293: LD_ADDR_VAR 0 33
61297: PUSH
61298: LD_INT 4
61300: NEG
61301: PUSH
61302: LD_INT 4
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 4
61312: NEG
61313: PUSH
61314: LD_INT 5
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: LD_INT 4
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 3
61336: NEG
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: LD_INT 3
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 5
61360: NEG
61361: PUSH
61362: LD_INT 4
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 5
61372: NEG
61373: PUSH
61374: LD_INT 5
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 3
61384: NEG
61385: PUSH
61386: LD_INT 5
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 5
61396: NEG
61397: PUSH
61398: LD_INT 3
61400: NEG
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: LD_INT 3
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: LD_INT 4
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: PUSH
61431: LD_INT 3
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: LD_INT 2
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 0
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: NEG
61464: PUSH
61465: LD_INT 3
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: LD_INT 4
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 2
61498: NEG
61499: PUSH
61500: LD_INT 4
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 4
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 5
61531: PUSH
61532: LD_INT 0
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 5
61541: PUSH
61542: LD_INT 1
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 4
61551: PUSH
61552: LD_INT 1
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 3
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 3
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 5
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 4
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 4
61633: PUSH
61634: LD_INT 4
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: LD_INT 4
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: LD_INT 3
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: PUSH
61661: LD_INT 2
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 4
61673: PUSH
61674: LD_INT 2
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 2
61683: PUSH
61684: LD_INT 4
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 4
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: LD_INT 4
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: LD_INT 5
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: LD_INT 5
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 4
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: PUSH
61752: LD_INT 1
61754: NEG
61755: PUSH
61756: LD_INT 3
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 2
61765: PUSH
61766: LD_INT 5
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: LD_INT 3
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61831: LD_ADDR_VAR 0 34
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 4
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 5
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 4
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 1
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: LD_INT 3
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 4
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 5
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 2
61917: PUSH
61918: LD_INT 3
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: NEG
61929: PUSH
61930: LD_INT 5
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 3
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: LD_INT 3
61950: PUSH
61951: LD_INT 1
61953: NEG
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 4
61971: PUSH
61972: LD_INT 1
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 1
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: LD_INT 2
62015: NEG
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 4
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 4
62033: PUSH
62034: LD_INT 4
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 4
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 5
62053: PUSH
62054: LD_INT 4
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 5
62063: PUSH
62064: LD_INT 5
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 4
62073: PUSH
62074: LD_INT 5
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: LD_INT 4
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 3
62093: PUSH
62094: LD_INT 3
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 5
62103: PUSH
62104: LD_INT 3
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 3
62113: PUSH
62114: LD_INT 5
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 0
62123: PUSH
62124: LD_INT 3
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 2
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 4
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 4
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: LD_INT 2
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: LD_INT 4
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: NEG
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: NEG
62217: PUSH
62218: LD_INT 0
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 4
62227: NEG
62228: PUSH
62229: LD_INT 1
62231: NEG
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: NEG
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 3
62250: NEG
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 4
62261: NEG
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 5
62272: NEG
62273: PUSH
62274: LD_INT 0
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 5
62283: NEG
62284: PUSH
62285: LD_INT 1
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 5
62295: NEG
62296: PUSH
62297: LD_INT 2
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 3
62307: NEG
62308: PUSH
62309: LD_INT 2
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: ST_TO_ADDR
// end ; end ;
62363: GO 62366
62365: POP
// case btype of b_depot , b_warehouse :
62366: LD_VAR 0 1
62370: PUSH
62371: LD_INT 0
62373: DOUBLE
62374: EQUAL
62375: IFTRUE 62385
62377: LD_INT 1
62379: DOUBLE
62380: EQUAL
62381: IFTRUE 62385
62383: GO 62586
62385: POP
// case nation of nation_american :
62386: LD_VAR 0 5
62390: PUSH
62391: LD_INT 1
62393: DOUBLE
62394: EQUAL
62395: IFTRUE 62399
62397: GO 62455
62399: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62400: LD_ADDR_VAR 0 9
62404: PUSH
62405: LD_VAR 0 11
62409: PUSH
62410: LD_VAR 0 12
62414: PUSH
62415: LD_VAR 0 13
62419: PUSH
62420: LD_VAR 0 14
62424: PUSH
62425: LD_VAR 0 15
62429: PUSH
62430: LD_VAR 0 16
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: PUSH
62443: LD_VAR 0 4
62447: PUSH
62448: LD_INT 1
62450: PLUS
62451: ARRAY
62452: ST_TO_ADDR
62453: GO 62584
62455: LD_INT 2
62457: DOUBLE
62458: EQUAL
62459: IFTRUE 62463
62461: GO 62519
62463: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62464: LD_ADDR_VAR 0 9
62468: PUSH
62469: LD_VAR 0 17
62473: PUSH
62474: LD_VAR 0 18
62478: PUSH
62479: LD_VAR 0 19
62483: PUSH
62484: LD_VAR 0 20
62488: PUSH
62489: LD_VAR 0 21
62493: PUSH
62494: LD_VAR 0 22
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_VAR 0 4
62511: PUSH
62512: LD_INT 1
62514: PLUS
62515: ARRAY
62516: ST_TO_ADDR
62517: GO 62584
62519: LD_INT 3
62521: DOUBLE
62522: EQUAL
62523: IFTRUE 62527
62525: GO 62583
62527: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62528: LD_ADDR_VAR 0 9
62532: PUSH
62533: LD_VAR 0 23
62537: PUSH
62538: LD_VAR 0 24
62542: PUSH
62543: LD_VAR 0 25
62547: PUSH
62548: LD_VAR 0 26
62552: PUSH
62553: LD_VAR 0 27
62557: PUSH
62558: LD_VAR 0 28
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: PUSH
62571: LD_VAR 0 4
62575: PUSH
62576: LD_INT 1
62578: PLUS
62579: ARRAY
62580: ST_TO_ADDR
62581: GO 62584
62583: POP
62584: GO 63139
62586: LD_INT 2
62588: DOUBLE
62589: EQUAL
62590: IFTRUE 62600
62592: LD_INT 3
62594: DOUBLE
62595: EQUAL
62596: IFTRUE 62600
62598: GO 62656
62600: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62601: LD_ADDR_VAR 0 9
62605: PUSH
62606: LD_VAR 0 29
62610: PUSH
62611: LD_VAR 0 30
62615: PUSH
62616: LD_VAR 0 31
62620: PUSH
62621: LD_VAR 0 32
62625: PUSH
62626: LD_VAR 0 33
62630: PUSH
62631: LD_VAR 0 34
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: PUSH
62644: LD_VAR 0 4
62648: PUSH
62649: LD_INT 1
62651: PLUS
62652: ARRAY
62653: ST_TO_ADDR
62654: GO 63139
62656: LD_INT 16
62658: DOUBLE
62659: EQUAL
62660: IFTRUE 62718
62662: LD_INT 17
62664: DOUBLE
62665: EQUAL
62666: IFTRUE 62718
62668: LD_INT 18
62670: DOUBLE
62671: EQUAL
62672: IFTRUE 62718
62674: LD_INT 19
62676: DOUBLE
62677: EQUAL
62678: IFTRUE 62718
62680: LD_INT 22
62682: DOUBLE
62683: EQUAL
62684: IFTRUE 62718
62686: LD_INT 20
62688: DOUBLE
62689: EQUAL
62690: IFTRUE 62718
62692: LD_INT 21
62694: DOUBLE
62695: EQUAL
62696: IFTRUE 62718
62698: LD_INT 23
62700: DOUBLE
62701: EQUAL
62702: IFTRUE 62718
62704: LD_INT 24
62706: DOUBLE
62707: EQUAL
62708: IFTRUE 62718
62710: LD_INT 25
62712: DOUBLE
62713: EQUAL
62714: IFTRUE 62718
62716: GO 62774
62718: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62719: LD_ADDR_VAR 0 9
62723: PUSH
62724: LD_VAR 0 35
62728: PUSH
62729: LD_VAR 0 36
62733: PUSH
62734: LD_VAR 0 37
62738: PUSH
62739: LD_VAR 0 38
62743: PUSH
62744: LD_VAR 0 39
62748: PUSH
62749: LD_VAR 0 40
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: PUSH
62762: LD_VAR 0 4
62766: PUSH
62767: LD_INT 1
62769: PLUS
62770: ARRAY
62771: ST_TO_ADDR
62772: GO 63139
62774: LD_INT 6
62776: DOUBLE
62777: EQUAL
62778: IFTRUE 62830
62780: LD_INT 7
62782: DOUBLE
62783: EQUAL
62784: IFTRUE 62830
62786: LD_INT 8
62788: DOUBLE
62789: EQUAL
62790: IFTRUE 62830
62792: LD_INT 13
62794: DOUBLE
62795: EQUAL
62796: IFTRUE 62830
62798: LD_INT 12
62800: DOUBLE
62801: EQUAL
62802: IFTRUE 62830
62804: LD_INT 15
62806: DOUBLE
62807: EQUAL
62808: IFTRUE 62830
62810: LD_INT 11
62812: DOUBLE
62813: EQUAL
62814: IFTRUE 62830
62816: LD_INT 14
62818: DOUBLE
62819: EQUAL
62820: IFTRUE 62830
62822: LD_INT 10
62824: DOUBLE
62825: EQUAL
62826: IFTRUE 62830
62828: GO 62886
62830: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62831: LD_ADDR_VAR 0 9
62835: PUSH
62836: LD_VAR 0 41
62840: PUSH
62841: LD_VAR 0 42
62845: PUSH
62846: LD_VAR 0 43
62850: PUSH
62851: LD_VAR 0 44
62855: PUSH
62856: LD_VAR 0 45
62860: PUSH
62861: LD_VAR 0 46
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: PUSH
62874: LD_VAR 0 4
62878: PUSH
62879: LD_INT 1
62881: PLUS
62882: ARRAY
62883: ST_TO_ADDR
62884: GO 63139
62886: LD_INT 36
62888: DOUBLE
62889: EQUAL
62890: IFTRUE 62894
62892: GO 62950
62894: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62895: LD_ADDR_VAR 0 9
62899: PUSH
62900: LD_VAR 0 47
62904: PUSH
62905: LD_VAR 0 48
62909: PUSH
62910: LD_VAR 0 49
62914: PUSH
62915: LD_VAR 0 50
62919: PUSH
62920: LD_VAR 0 51
62924: PUSH
62925: LD_VAR 0 52
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: PUSH
62938: LD_VAR 0 4
62942: PUSH
62943: LD_INT 1
62945: PLUS
62946: ARRAY
62947: ST_TO_ADDR
62948: GO 63139
62950: LD_INT 4
62952: DOUBLE
62953: EQUAL
62954: IFTRUE 62976
62956: LD_INT 5
62958: DOUBLE
62959: EQUAL
62960: IFTRUE 62976
62962: LD_INT 34
62964: DOUBLE
62965: EQUAL
62966: IFTRUE 62976
62968: LD_INT 37
62970: DOUBLE
62971: EQUAL
62972: IFTRUE 62976
62974: GO 63032
62976: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62977: LD_ADDR_VAR 0 9
62981: PUSH
62982: LD_VAR 0 53
62986: PUSH
62987: LD_VAR 0 54
62991: PUSH
62992: LD_VAR 0 55
62996: PUSH
62997: LD_VAR 0 56
63001: PUSH
63002: LD_VAR 0 57
63006: PUSH
63007: LD_VAR 0 58
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: PUSH
63020: LD_VAR 0 4
63024: PUSH
63025: LD_INT 1
63027: PLUS
63028: ARRAY
63029: ST_TO_ADDR
63030: GO 63139
63032: LD_INT 31
63034: DOUBLE
63035: EQUAL
63036: IFTRUE 63082
63038: LD_INT 32
63040: DOUBLE
63041: EQUAL
63042: IFTRUE 63082
63044: LD_INT 33
63046: DOUBLE
63047: EQUAL
63048: IFTRUE 63082
63050: LD_INT 27
63052: DOUBLE
63053: EQUAL
63054: IFTRUE 63082
63056: LD_INT 26
63058: DOUBLE
63059: EQUAL
63060: IFTRUE 63082
63062: LD_INT 28
63064: DOUBLE
63065: EQUAL
63066: IFTRUE 63082
63068: LD_INT 29
63070: DOUBLE
63071: EQUAL
63072: IFTRUE 63082
63074: LD_INT 30
63076: DOUBLE
63077: EQUAL
63078: IFTRUE 63082
63080: GO 63138
63082: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63083: LD_ADDR_VAR 0 9
63087: PUSH
63088: LD_VAR 0 59
63092: PUSH
63093: LD_VAR 0 60
63097: PUSH
63098: LD_VAR 0 61
63102: PUSH
63103: LD_VAR 0 62
63107: PUSH
63108: LD_VAR 0 63
63112: PUSH
63113: LD_VAR 0 64
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: PUSH
63126: LD_VAR 0 4
63130: PUSH
63131: LD_INT 1
63133: PLUS
63134: ARRAY
63135: ST_TO_ADDR
63136: GO 63139
63138: POP
// temp_list2 = [ ] ;
63139: LD_ADDR_VAR 0 10
63143: PUSH
63144: EMPTY
63145: ST_TO_ADDR
// for i in temp_list do
63146: LD_ADDR_VAR 0 8
63150: PUSH
63151: LD_VAR 0 9
63155: PUSH
63156: FOR_IN
63157: IFFALSE 63209
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63159: LD_ADDR_VAR 0 10
63163: PUSH
63164: LD_VAR 0 10
63168: PUSH
63169: LD_VAR 0 8
63173: PUSH
63174: LD_INT 1
63176: ARRAY
63177: PUSH
63178: LD_VAR 0 2
63182: PLUS
63183: PUSH
63184: LD_VAR 0 8
63188: PUSH
63189: LD_INT 2
63191: ARRAY
63192: PUSH
63193: LD_VAR 0 3
63197: PLUS
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: EMPTY
63204: LIST
63205: ADD
63206: ST_TO_ADDR
63207: GO 63156
63209: POP
63210: POP
// result = temp_list2 ;
63211: LD_ADDR_VAR 0 7
63215: PUSH
63216: LD_VAR 0 10
63220: ST_TO_ADDR
// end ;
63221: LD_VAR 0 7
63225: RET
// export function EnemyInRange ( unit , dist ) ; begin
63226: LD_INT 0
63228: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63229: LD_ADDR_VAR 0 3
63233: PUSH
63234: LD_VAR 0 1
63238: PPUSH
63239: CALL_OW 255
63243: PPUSH
63244: LD_VAR 0 1
63248: PPUSH
63249: CALL_OW 250
63253: PPUSH
63254: LD_VAR 0 1
63258: PPUSH
63259: CALL_OW 251
63263: PPUSH
63264: LD_VAR 0 2
63268: PPUSH
63269: CALL 36483 0 4
63273: PUSH
63274: LD_INT 4
63276: ARRAY
63277: ST_TO_ADDR
// end ;
63278: LD_VAR 0 3
63282: RET
// export function PlayerSeeMe ( unit ) ; begin
63283: LD_INT 0
63285: PPUSH
// result := See ( your_side , unit ) ;
63286: LD_ADDR_VAR 0 2
63290: PUSH
63291: LD_OWVAR 2
63295: PPUSH
63296: LD_VAR 0 1
63300: PPUSH
63301: CALL_OW 292
63305: ST_TO_ADDR
// end ;
63306: LD_VAR 0 2
63310: RET
// export function ReverseDir ( unit ) ; begin
63311: LD_INT 0
63313: PPUSH
// if not unit then
63314: LD_VAR 0 1
63318: NOT
63319: IFFALSE 63323
// exit ;
63321: GO 63346
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63323: LD_ADDR_VAR 0 2
63327: PUSH
63328: LD_VAR 0 1
63332: PPUSH
63333: CALL_OW 254
63337: PUSH
63338: LD_INT 3
63340: PLUS
63341: PUSH
63342: LD_INT 6
63344: MOD
63345: ST_TO_ADDR
// end ;
63346: LD_VAR 0 2
63350: RET
// export function ReverseArray ( array ) ; var i ; begin
63351: LD_INT 0
63353: PPUSH
63354: PPUSH
// if not array then
63355: LD_VAR 0 1
63359: NOT
63360: IFFALSE 63364
// exit ;
63362: GO 63419
// result := [ ] ;
63364: LD_ADDR_VAR 0 2
63368: PUSH
63369: EMPTY
63370: ST_TO_ADDR
// for i := array downto 1 do
63371: LD_ADDR_VAR 0 3
63375: PUSH
63376: DOUBLE
63377: LD_VAR 0 1
63381: INC
63382: ST_TO_ADDR
63383: LD_INT 1
63385: PUSH
63386: FOR_DOWNTO
63387: IFFALSE 63417
// result := Join ( result , array [ i ] ) ;
63389: LD_ADDR_VAR 0 2
63393: PUSH
63394: LD_VAR 0 2
63398: PPUSH
63399: LD_VAR 0 1
63403: PUSH
63404: LD_VAR 0 3
63408: ARRAY
63409: PPUSH
63410: CALL 68261 0 2
63414: ST_TO_ADDR
63415: GO 63386
63417: POP
63418: POP
// end ;
63419: LD_VAR 0 2
63423: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63424: LD_INT 0
63426: PPUSH
63427: PPUSH
63428: PPUSH
63429: PPUSH
63430: PPUSH
63431: PPUSH
// if not unit or not hexes then
63432: LD_VAR 0 1
63436: NOT
63437: IFTRUE 63446
63439: PUSH
63440: LD_VAR 0 2
63444: NOT
63445: OR
63446: IFFALSE 63450
// exit ;
63448: GO 63573
// dist := 9999 ;
63450: LD_ADDR_VAR 0 5
63454: PUSH
63455: LD_INT 9999
63457: ST_TO_ADDR
// for i = 1 to hexes do
63458: LD_ADDR_VAR 0 4
63462: PUSH
63463: DOUBLE
63464: LD_INT 1
63466: DEC
63467: ST_TO_ADDR
63468: LD_VAR 0 2
63472: PUSH
63473: FOR_TO
63474: IFFALSE 63561
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63476: LD_ADDR_VAR 0 6
63480: PUSH
63481: LD_VAR 0 1
63485: PPUSH
63486: LD_VAR 0 2
63490: PUSH
63491: LD_VAR 0 4
63495: ARRAY
63496: PUSH
63497: LD_INT 1
63499: ARRAY
63500: PPUSH
63501: LD_VAR 0 2
63505: PUSH
63506: LD_VAR 0 4
63510: ARRAY
63511: PUSH
63512: LD_INT 2
63514: ARRAY
63515: PPUSH
63516: CALL_OW 297
63520: ST_TO_ADDR
// if tdist < dist then
63521: LD_VAR 0 6
63525: PUSH
63526: LD_VAR 0 5
63530: LESS
63531: IFFALSE 63559
// begin hex := hexes [ i ] ;
63533: LD_ADDR_VAR 0 8
63537: PUSH
63538: LD_VAR 0 2
63542: PUSH
63543: LD_VAR 0 4
63547: ARRAY
63548: ST_TO_ADDR
// dist := tdist ;
63549: LD_ADDR_VAR 0 5
63553: PUSH
63554: LD_VAR 0 6
63558: ST_TO_ADDR
// end ; end ;
63559: GO 63473
63561: POP
63562: POP
// result := hex ;
63563: LD_ADDR_VAR 0 3
63567: PUSH
63568: LD_VAR 0 8
63572: ST_TO_ADDR
// end ;
63573: LD_VAR 0 3
63577: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63578: LD_INT 0
63580: PPUSH
63581: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63582: LD_VAR 0 1
63586: NOT
63587: IFTRUE 63626
63589: PUSH
63590: LD_VAR 0 1
63594: PUSH
63595: LD_INT 21
63597: PUSH
63598: LD_INT 2
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 23
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PPUSH
63619: CALL_OW 69
63623: IN
63624: NOT
63625: OR
63626: IFFALSE 63630
// exit ;
63628: GO 63677
// for i = 1 to 3 do
63630: LD_ADDR_VAR 0 3
63634: PUSH
63635: DOUBLE
63636: LD_INT 1
63638: DEC
63639: ST_TO_ADDR
63640: LD_INT 3
63642: PUSH
63643: FOR_TO
63644: IFFALSE 63675
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63646: LD_VAR 0 1
63650: PPUSH
63651: CALL_OW 250
63655: PPUSH
63656: LD_VAR 0 1
63660: PPUSH
63661: CALL_OW 251
63665: PPUSH
63666: LD_INT 1
63668: PPUSH
63669: CALL_OW 453
63673: GO 63643
63675: POP
63676: POP
// end ;
63677: LD_VAR 0 2
63681: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63682: LD_INT 0
63684: PPUSH
63685: PPUSH
63686: PPUSH
63687: PPUSH
63688: PPUSH
63689: PPUSH
// if not unit or not enemy_unit then
63690: LD_VAR 0 1
63694: NOT
63695: IFTRUE 63704
63697: PUSH
63698: LD_VAR 0 2
63702: NOT
63703: OR
63704: IFFALSE 63708
// exit ;
63706: GO 64179
// if GetLives ( i ) < 250 then
63708: LD_VAR 0 4
63712: PPUSH
63713: CALL_OW 256
63717: PUSH
63718: LD_INT 250
63720: LESS
63721: IFFALSE 63734
// begin ComAutodestruct ( i ) ;
63723: LD_VAR 0 4
63727: PPUSH
63728: CALL 63578 0 1
// exit ;
63732: GO 64179
// end ; x := GetX ( enemy_unit ) ;
63734: LD_ADDR_VAR 0 7
63738: PUSH
63739: LD_VAR 0 2
63743: PPUSH
63744: CALL_OW 250
63748: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63749: LD_ADDR_VAR 0 8
63753: PUSH
63754: LD_VAR 0 2
63758: PPUSH
63759: CALL_OW 251
63763: ST_TO_ADDR
// if not x or not y then
63764: LD_VAR 0 7
63768: NOT
63769: IFTRUE 63778
63771: PUSH
63772: LD_VAR 0 8
63776: NOT
63777: OR
63778: IFFALSE 63782
// exit ;
63780: GO 64179
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63782: LD_ADDR_VAR 0 6
63786: PUSH
63787: LD_VAR 0 7
63791: PPUSH
63792: LD_INT 0
63794: PPUSH
63795: LD_INT 4
63797: PPUSH
63798: CALL_OW 272
63802: PUSH
63803: LD_VAR 0 8
63807: PPUSH
63808: LD_INT 0
63810: PPUSH
63811: LD_INT 4
63813: PPUSH
63814: CALL_OW 273
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_VAR 0 7
63827: PPUSH
63828: LD_INT 1
63830: PPUSH
63831: LD_INT 4
63833: PPUSH
63834: CALL_OW 272
63838: PUSH
63839: LD_VAR 0 8
63843: PPUSH
63844: LD_INT 1
63846: PPUSH
63847: LD_INT 4
63849: PPUSH
63850: CALL_OW 273
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_VAR 0 7
63863: PPUSH
63864: LD_INT 2
63866: PPUSH
63867: LD_INT 4
63869: PPUSH
63870: CALL_OW 272
63874: PUSH
63875: LD_VAR 0 8
63879: PPUSH
63880: LD_INT 2
63882: PPUSH
63883: LD_INT 4
63885: PPUSH
63886: CALL_OW 273
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_VAR 0 7
63899: PPUSH
63900: LD_INT 3
63902: PPUSH
63903: LD_INT 4
63905: PPUSH
63906: CALL_OW 272
63910: PUSH
63911: LD_VAR 0 8
63915: PPUSH
63916: LD_INT 3
63918: PPUSH
63919: LD_INT 4
63921: PPUSH
63922: CALL_OW 273
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_VAR 0 7
63935: PPUSH
63936: LD_INT 4
63938: PPUSH
63939: LD_INT 4
63941: PPUSH
63942: CALL_OW 272
63946: PUSH
63947: LD_VAR 0 8
63951: PPUSH
63952: LD_INT 4
63954: PPUSH
63955: LD_INT 4
63957: PPUSH
63958: CALL_OW 273
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_VAR 0 7
63971: PPUSH
63972: LD_INT 5
63974: PPUSH
63975: LD_INT 4
63977: PPUSH
63978: CALL_OW 272
63982: PUSH
63983: LD_VAR 0 8
63987: PPUSH
63988: LD_INT 5
63990: PPUSH
63991: LD_INT 4
63993: PPUSH
63994: CALL_OW 273
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: ST_TO_ADDR
// for i = tmp downto 1 do
64011: LD_ADDR_VAR 0 4
64015: PUSH
64016: DOUBLE
64017: LD_VAR 0 6
64021: INC
64022: ST_TO_ADDR
64023: LD_INT 1
64025: PUSH
64026: FOR_DOWNTO
64027: IFFALSE 64130
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64029: LD_VAR 0 6
64033: PUSH
64034: LD_VAR 0 4
64038: ARRAY
64039: PUSH
64040: LD_INT 1
64042: ARRAY
64043: PPUSH
64044: LD_VAR 0 6
64048: PUSH
64049: LD_VAR 0 4
64053: ARRAY
64054: PUSH
64055: LD_INT 2
64057: ARRAY
64058: PPUSH
64059: CALL_OW 488
64063: NOT
64064: IFTRUE 64106
64066: PUSH
64067: LD_VAR 0 6
64071: PUSH
64072: LD_VAR 0 4
64076: ARRAY
64077: PUSH
64078: LD_INT 1
64080: ARRAY
64081: PPUSH
64082: LD_VAR 0 6
64086: PUSH
64087: LD_VAR 0 4
64091: ARRAY
64092: PUSH
64093: LD_INT 2
64095: ARRAY
64096: PPUSH
64097: CALL_OW 428
64101: PUSH
64102: LD_INT 0
64104: NONEQUAL
64105: OR
64106: IFFALSE 64128
// tmp := Delete ( tmp , i ) ;
64108: LD_ADDR_VAR 0 6
64112: PUSH
64113: LD_VAR 0 6
64117: PPUSH
64118: LD_VAR 0 4
64122: PPUSH
64123: CALL_OW 3
64127: ST_TO_ADDR
64128: GO 64026
64130: POP
64131: POP
// j := GetClosestHex ( unit , tmp ) ;
64132: LD_ADDR_VAR 0 5
64136: PUSH
64137: LD_VAR 0 1
64141: PPUSH
64142: LD_VAR 0 6
64146: PPUSH
64147: CALL 63424 0 2
64151: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64152: LD_VAR 0 1
64156: PPUSH
64157: LD_VAR 0 5
64161: PUSH
64162: LD_INT 1
64164: ARRAY
64165: PPUSH
64166: LD_VAR 0 5
64170: PUSH
64171: LD_INT 2
64173: ARRAY
64174: PPUSH
64175: CALL_OW 111
// end ;
64179: LD_VAR 0 3
64183: RET
// export function PrepareApemanSoldier ( ) ; begin
64184: LD_INT 0
64186: PPUSH
// uc_nation := 0 ;
64187: LD_ADDR_OWVAR 21
64191: PUSH
64192: LD_INT 0
64194: ST_TO_ADDR
// hc_sex := sex_male ;
64195: LD_ADDR_OWVAR 27
64199: PUSH
64200: LD_INT 1
64202: ST_TO_ADDR
// hc_name :=  ;
64203: LD_ADDR_OWVAR 26
64207: PUSH
64208: LD_STRING 
64210: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64211: LD_ADDR_OWVAR 28
64215: PUSH
64216: LD_INT 15
64218: ST_TO_ADDR
// hc_gallery :=  ;
64219: LD_ADDR_OWVAR 33
64223: PUSH
64224: LD_STRING 
64226: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64227: LD_ADDR_OWVAR 31
64231: PUSH
64232: LD_INT 0
64234: PPUSH
64235: LD_INT 3
64237: PPUSH
64238: CALL_OW 12
64242: PUSH
64243: LD_INT 0
64245: PPUSH
64246: LD_INT 3
64248: PPUSH
64249: CALL_OW 12
64253: PUSH
64254: LD_INT 0
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: LIST
64264: LIST
64265: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64266: LD_ADDR_OWVAR 29
64270: PUSH
64271: LD_INT 12
64273: PUSH
64274: LD_INT 12
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: ST_TO_ADDR
// end ;
64281: LD_VAR 0 1
64285: RET
// export function PrepareApemanEngineer ( ) ; begin
64286: LD_INT 0
64288: PPUSH
// uc_nation := 0 ;
64289: LD_ADDR_OWVAR 21
64293: PUSH
64294: LD_INT 0
64296: ST_TO_ADDR
// hc_sex := sex_male ;
64297: LD_ADDR_OWVAR 27
64301: PUSH
64302: LD_INT 1
64304: ST_TO_ADDR
// hc_name :=  ;
64305: LD_ADDR_OWVAR 26
64309: PUSH
64310: LD_STRING 
64312: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64313: LD_ADDR_OWVAR 28
64317: PUSH
64318: LD_INT 16
64320: ST_TO_ADDR
// hc_gallery :=  ;
64321: LD_ADDR_OWVAR 33
64325: PUSH
64326: LD_STRING 
64328: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64329: LD_ADDR_OWVAR 31
64333: PUSH
64334: LD_INT 0
64336: PPUSH
64337: LD_INT 3
64339: PPUSH
64340: CALL_OW 12
64344: PUSH
64345: LD_INT 0
64347: PPUSH
64348: LD_INT 3
64350: PPUSH
64351: CALL_OW 12
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: LIST
64366: LIST
64367: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64368: LD_ADDR_OWVAR 29
64372: PUSH
64373: LD_INT 12
64375: PUSH
64376: LD_INT 12
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: ST_TO_ADDR
// end ;
64383: LD_VAR 0 1
64387: RET
// export function PrepareApeman ( agressivity ) ; begin
64388: LD_INT 0
64390: PPUSH
// uc_side := 0 ;
64391: LD_ADDR_OWVAR 20
64395: PUSH
64396: LD_INT 0
64398: ST_TO_ADDR
// uc_nation := 0 ;
64399: LD_ADDR_OWVAR 21
64403: PUSH
64404: LD_INT 0
64406: ST_TO_ADDR
// hc_sex := sex_male ;
64407: LD_ADDR_OWVAR 27
64411: PUSH
64412: LD_INT 1
64414: ST_TO_ADDR
// hc_class := class_apeman ;
64415: LD_ADDR_OWVAR 28
64419: PUSH
64420: LD_INT 12
64422: ST_TO_ADDR
// hc_gallery :=  ;
64423: LD_ADDR_OWVAR 33
64427: PUSH
64428: LD_STRING 
64430: ST_TO_ADDR
// hc_name :=  ;
64431: LD_ADDR_OWVAR 26
64435: PUSH
64436: LD_STRING 
64438: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64439: LD_ADDR_OWVAR 29
64443: PUSH
64444: LD_INT 12
64446: PUSH
64447: LD_INT 12
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: ST_TO_ADDR
// if agressivity = 0 then
64454: LD_VAR 0 1
64458: PUSH
64459: LD_INT 0
64461: EQUAL
64462: IFFALSE 64474
// hc_agressivity := 0 else
64464: LD_ADDR_OWVAR 35
64468: PUSH
64469: LD_INT 0
64471: ST_TO_ADDR
64472: GO 64495
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64474: LD_ADDR_OWVAR 35
64478: PUSH
64479: LD_VAR 0 1
64483: NEG
64484: PPUSH
64485: LD_VAR 0 1
64489: PPUSH
64490: CALL_OW 12
64494: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64495: LD_ADDR_OWVAR 31
64499: PUSH
64500: LD_INT 0
64502: PPUSH
64503: LD_INT 3
64505: PPUSH
64506: CALL_OW 12
64510: PUSH
64511: LD_INT 0
64513: PPUSH
64514: LD_INT 3
64516: PPUSH
64517: CALL_OW 12
64521: PUSH
64522: LD_INT 0
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: ST_TO_ADDR
// end ;
64534: LD_VAR 0 2
64538: RET
// export function PrepareTiger ( agressivity ) ; begin
64539: LD_INT 0
64541: PPUSH
// uc_side := 0 ;
64542: LD_ADDR_OWVAR 20
64546: PUSH
64547: LD_INT 0
64549: ST_TO_ADDR
// uc_nation := 0 ;
64550: LD_ADDR_OWVAR 21
64554: PUSH
64555: LD_INT 0
64557: ST_TO_ADDR
// InitHc ;
64558: CALL_OW 19
// hc_class := class_tiger ;
64562: LD_ADDR_OWVAR 28
64566: PUSH
64567: LD_INT 14
64569: ST_TO_ADDR
// hc_gallery :=  ;
64570: LD_ADDR_OWVAR 33
64574: PUSH
64575: LD_STRING 
64577: ST_TO_ADDR
// hc_name :=  ;
64578: LD_ADDR_OWVAR 26
64582: PUSH
64583: LD_STRING 
64585: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64586: LD_ADDR_OWVAR 35
64590: PUSH
64591: LD_VAR 0 1
64595: NEG
64596: PPUSH
64597: LD_VAR 0 1
64601: PPUSH
64602: CALL_OW 12
64606: ST_TO_ADDR
// end ;
64607: LD_VAR 0 2
64611: RET
// export function PrepareEnchidna ( ) ; begin
64612: LD_INT 0
64614: PPUSH
// uc_side := 0 ;
64615: LD_ADDR_OWVAR 20
64619: PUSH
64620: LD_INT 0
64622: ST_TO_ADDR
// uc_nation := 0 ;
64623: LD_ADDR_OWVAR 21
64627: PUSH
64628: LD_INT 0
64630: ST_TO_ADDR
// InitHc ;
64631: CALL_OW 19
// hc_class := class_baggie ;
64635: LD_ADDR_OWVAR 28
64639: PUSH
64640: LD_INT 13
64642: ST_TO_ADDR
// hc_gallery :=  ;
64643: LD_ADDR_OWVAR 33
64647: PUSH
64648: LD_STRING 
64650: ST_TO_ADDR
// hc_name :=  ;
64651: LD_ADDR_OWVAR 26
64655: PUSH
64656: LD_STRING 
64658: ST_TO_ADDR
// end ;
64659: LD_VAR 0 1
64663: RET
// export function PrepareFrog ( ) ; begin
64664: LD_INT 0
64666: PPUSH
// uc_side := 0 ;
64667: LD_ADDR_OWVAR 20
64671: PUSH
64672: LD_INT 0
64674: ST_TO_ADDR
// uc_nation := 0 ;
64675: LD_ADDR_OWVAR 21
64679: PUSH
64680: LD_INT 0
64682: ST_TO_ADDR
// InitHc ;
64683: CALL_OW 19
// hc_class := class_frog ;
64687: LD_ADDR_OWVAR 28
64691: PUSH
64692: LD_INT 19
64694: ST_TO_ADDR
// hc_gallery :=  ;
64695: LD_ADDR_OWVAR 33
64699: PUSH
64700: LD_STRING 
64702: ST_TO_ADDR
// hc_name :=  ;
64703: LD_ADDR_OWVAR 26
64707: PUSH
64708: LD_STRING 
64710: ST_TO_ADDR
// end ;
64711: LD_VAR 0 1
64715: RET
// export function PrepareFish ( ) ; begin
64716: LD_INT 0
64718: PPUSH
// uc_side := 0 ;
64719: LD_ADDR_OWVAR 20
64723: PUSH
64724: LD_INT 0
64726: ST_TO_ADDR
// uc_nation := 0 ;
64727: LD_ADDR_OWVAR 21
64731: PUSH
64732: LD_INT 0
64734: ST_TO_ADDR
// InitHc ;
64735: CALL_OW 19
// hc_class := class_fish ;
64739: LD_ADDR_OWVAR 28
64743: PUSH
64744: LD_INT 20
64746: ST_TO_ADDR
// hc_gallery :=  ;
64747: LD_ADDR_OWVAR 33
64751: PUSH
64752: LD_STRING 
64754: ST_TO_ADDR
// hc_name :=  ;
64755: LD_ADDR_OWVAR 26
64759: PUSH
64760: LD_STRING 
64762: ST_TO_ADDR
// end ;
64763: LD_VAR 0 1
64767: RET
// export function PrepareBird ( ) ; begin
64768: LD_INT 0
64770: PPUSH
// uc_side := 0 ;
64771: LD_ADDR_OWVAR 20
64775: PUSH
64776: LD_INT 0
64778: ST_TO_ADDR
// uc_nation := 0 ;
64779: LD_ADDR_OWVAR 21
64783: PUSH
64784: LD_INT 0
64786: ST_TO_ADDR
// InitHc ;
64787: CALL_OW 19
// hc_class := class_phororhacos ;
64791: LD_ADDR_OWVAR 28
64795: PUSH
64796: LD_INT 18
64798: ST_TO_ADDR
// hc_gallery :=  ;
64799: LD_ADDR_OWVAR 33
64803: PUSH
64804: LD_STRING 
64806: ST_TO_ADDR
// hc_name :=  ;
64807: LD_ADDR_OWVAR 26
64811: PUSH
64812: LD_STRING 
64814: ST_TO_ADDR
// end ;
64815: LD_VAR 0 1
64819: RET
// export function PrepareHorse ( ) ; begin
64820: LD_INT 0
64822: PPUSH
// uc_side := 0 ;
64823: LD_ADDR_OWVAR 20
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// uc_nation := 0 ;
64831: LD_ADDR_OWVAR 21
64835: PUSH
64836: LD_INT 0
64838: ST_TO_ADDR
// InitHc ;
64839: CALL_OW 19
// hc_class := class_horse ;
64843: LD_ADDR_OWVAR 28
64847: PUSH
64848: LD_INT 21
64850: ST_TO_ADDR
// hc_gallery :=  ;
64851: LD_ADDR_OWVAR 33
64855: PUSH
64856: LD_STRING 
64858: ST_TO_ADDR
// hc_name :=  ;
64859: LD_ADDR_OWVAR 26
64863: PUSH
64864: LD_STRING 
64866: ST_TO_ADDR
// end ;
64867: LD_VAR 0 1
64871: RET
// export function PrepareMastodont ( ) ; begin
64872: LD_INT 0
64874: PPUSH
// uc_side := 0 ;
64875: LD_ADDR_OWVAR 20
64879: PUSH
64880: LD_INT 0
64882: ST_TO_ADDR
// uc_nation := 0 ;
64883: LD_ADDR_OWVAR 21
64887: PUSH
64888: LD_INT 0
64890: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64891: LD_ADDR_OWVAR 37
64895: PUSH
64896: LD_INT 31
64898: ST_TO_ADDR
// vc_control := control_rider ;
64899: LD_ADDR_OWVAR 38
64903: PUSH
64904: LD_INT 4
64906: ST_TO_ADDR
// end ;
64907: LD_VAR 0 1
64911: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64912: LD_INT 0
64914: PPUSH
64915: PPUSH
64916: PPUSH
// uc_side = 0 ;
64917: LD_ADDR_OWVAR 20
64921: PUSH
64922: LD_INT 0
64924: ST_TO_ADDR
// uc_nation = 0 ;
64925: LD_ADDR_OWVAR 21
64929: PUSH
64930: LD_INT 0
64932: ST_TO_ADDR
// InitHc_All ( ) ;
64933: CALL_OW 584
// InitVc ;
64937: CALL_OW 20
// if mastodonts then
64941: LD_VAR 0 6
64945: IFFALSE 65012
// for i = 1 to mastodonts do
64947: LD_ADDR_VAR 0 11
64951: PUSH
64952: DOUBLE
64953: LD_INT 1
64955: DEC
64956: ST_TO_ADDR
64957: LD_VAR 0 6
64961: PUSH
64962: FOR_TO
64963: IFFALSE 65010
// begin vc_chassis := 31 ;
64965: LD_ADDR_OWVAR 37
64969: PUSH
64970: LD_INT 31
64972: ST_TO_ADDR
// vc_control := control_rider ;
64973: LD_ADDR_OWVAR 38
64977: PUSH
64978: LD_INT 4
64980: ST_TO_ADDR
// animal := CreateVehicle ;
64981: LD_ADDR_VAR 0 12
64985: PUSH
64986: CALL_OW 45
64990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64991: LD_VAR 0 12
64995: PPUSH
64996: LD_VAR 0 8
65000: PPUSH
65001: LD_INT 0
65003: PPUSH
65004: CALL 67154 0 3
// end ;
65008: GO 64962
65010: POP
65011: POP
// if horses then
65012: LD_VAR 0 5
65016: IFFALSE 65083
// for i = 1 to horses do
65018: LD_ADDR_VAR 0 11
65022: PUSH
65023: DOUBLE
65024: LD_INT 1
65026: DEC
65027: ST_TO_ADDR
65028: LD_VAR 0 5
65032: PUSH
65033: FOR_TO
65034: IFFALSE 65081
// begin hc_class := 21 ;
65036: LD_ADDR_OWVAR 28
65040: PUSH
65041: LD_INT 21
65043: ST_TO_ADDR
// hc_gallery :=  ;
65044: LD_ADDR_OWVAR 33
65048: PUSH
65049: LD_STRING 
65051: ST_TO_ADDR
// animal := CreateHuman ;
65052: LD_ADDR_VAR 0 12
65056: PUSH
65057: CALL_OW 44
65061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65062: LD_VAR 0 12
65066: PPUSH
65067: LD_VAR 0 8
65071: PPUSH
65072: LD_INT 0
65074: PPUSH
65075: CALL 67154 0 3
// end ;
65079: GO 65033
65081: POP
65082: POP
// if birds then
65083: LD_VAR 0 1
65087: IFFALSE 65154
// for i = 1 to birds do
65089: LD_ADDR_VAR 0 11
65093: PUSH
65094: DOUBLE
65095: LD_INT 1
65097: DEC
65098: ST_TO_ADDR
65099: LD_VAR 0 1
65103: PUSH
65104: FOR_TO
65105: IFFALSE 65152
// begin hc_class := 18 ;
65107: LD_ADDR_OWVAR 28
65111: PUSH
65112: LD_INT 18
65114: ST_TO_ADDR
// hc_gallery =  ;
65115: LD_ADDR_OWVAR 33
65119: PUSH
65120: LD_STRING 
65122: ST_TO_ADDR
// animal := CreateHuman ;
65123: LD_ADDR_VAR 0 12
65127: PUSH
65128: CALL_OW 44
65132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65133: LD_VAR 0 12
65137: PPUSH
65138: LD_VAR 0 8
65142: PPUSH
65143: LD_INT 0
65145: PPUSH
65146: CALL 67154 0 3
// end ;
65150: GO 65104
65152: POP
65153: POP
// if tigers then
65154: LD_VAR 0 2
65158: IFFALSE 65242
// for i = 1 to tigers do
65160: LD_ADDR_VAR 0 11
65164: PUSH
65165: DOUBLE
65166: LD_INT 1
65168: DEC
65169: ST_TO_ADDR
65170: LD_VAR 0 2
65174: PUSH
65175: FOR_TO
65176: IFFALSE 65240
// begin hc_class = class_tiger ;
65178: LD_ADDR_OWVAR 28
65182: PUSH
65183: LD_INT 14
65185: ST_TO_ADDR
// hc_gallery =  ;
65186: LD_ADDR_OWVAR 33
65190: PUSH
65191: LD_STRING 
65193: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65194: LD_ADDR_OWVAR 35
65198: PUSH
65199: LD_INT 7
65201: NEG
65202: PPUSH
65203: LD_INT 7
65205: PPUSH
65206: CALL_OW 12
65210: ST_TO_ADDR
// animal := CreateHuman ;
65211: LD_ADDR_VAR 0 12
65215: PUSH
65216: CALL_OW 44
65220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65221: LD_VAR 0 12
65225: PPUSH
65226: LD_VAR 0 8
65230: PPUSH
65231: LD_INT 0
65233: PPUSH
65234: CALL 67154 0 3
// end ;
65238: GO 65175
65240: POP
65241: POP
// if apemans then
65242: LD_VAR 0 3
65246: IFFALSE 65369
// for i = 1 to apemans do
65248: LD_ADDR_VAR 0 11
65252: PUSH
65253: DOUBLE
65254: LD_INT 1
65256: DEC
65257: ST_TO_ADDR
65258: LD_VAR 0 3
65262: PUSH
65263: FOR_TO
65264: IFFALSE 65367
// begin hc_class = class_apeman ;
65266: LD_ADDR_OWVAR 28
65270: PUSH
65271: LD_INT 12
65273: ST_TO_ADDR
// hc_gallery =  ;
65274: LD_ADDR_OWVAR 33
65278: PUSH
65279: LD_STRING 
65281: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65282: LD_ADDR_OWVAR 35
65286: PUSH
65287: LD_INT 2
65289: NEG
65290: PPUSH
65291: LD_INT 2
65293: PPUSH
65294: CALL_OW 12
65298: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65299: LD_ADDR_OWVAR 31
65303: PUSH
65304: LD_INT 1
65306: PPUSH
65307: LD_INT 3
65309: PPUSH
65310: CALL_OW 12
65314: PUSH
65315: LD_INT 1
65317: PPUSH
65318: LD_INT 3
65320: PPUSH
65321: CALL_OW 12
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: LIST
65337: ST_TO_ADDR
// animal := CreateHuman ;
65338: LD_ADDR_VAR 0 12
65342: PUSH
65343: CALL_OW 44
65347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65348: LD_VAR 0 12
65352: PPUSH
65353: LD_VAR 0 8
65357: PPUSH
65358: LD_INT 0
65360: PPUSH
65361: CALL 67154 0 3
// end ;
65365: GO 65263
65367: POP
65368: POP
// if enchidnas then
65369: LD_VAR 0 4
65373: IFFALSE 65440
// for i = 1 to enchidnas do
65375: LD_ADDR_VAR 0 11
65379: PUSH
65380: DOUBLE
65381: LD_INT 1
65383: DEC
65384: ST_TO_ADDR
65385: LD_VAR 0 4
65389: PUSH
65390: FOR_TO
65391: IFFALSE 65438
// begin hc_class = 13 ;
65393: LD_ADDR_OWVAR 28
65397: PUSH
65398: LD_INT 13
65400: ST_TO_ADDR
// hc_gallery =  ;
65401: LD_ADDR_OWVAR 33
65405: PUSH
65406: LD_STRING 
65408: ST_TO_ADDR
// animal := CreateHuman ;
65409: LD_ADDR_VAR 0 12
65413: PUSH
65414: CALL_OW 44
65418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65419: LD_VAR 0 12
65423: PPUSH
65424: LD_VAR 0 8
65428: PPUSH
65429: LD_INT 0
65431: PPUSH
65432: CALL 67154 0 3
// end ;
65436: GO 65390
65438: POP
65439: POP
// if fishes then
65440: LD_VAR 0 7
65444: IFFALSE 65511
// for i = 1 to fishes do
65446: LD_ADDR_VAR 0 11
65450: PUSH
65451: DOUBLE
65452: LD_INT 1
65454: DEC
65455: ST_TO_ADDR
65456: LD_VAR 0 7
65460: PUSH
65461: FOR_TO
65462: IFFALSE 65509
// begin hc_class = 20 ;
65464: LD_ADDR_OWVAR 28
65468: PUSH
65469: LD_INT 20
65471: ST_TO_ADDR
// hc_gallery =  ;
65472: LD_ADDR_OWVAR 33
65476: PUSH
65477: LD_STRING 
65479: ST_TO_ADDR
// animal := CreateHuman ;
65480: LD_ADDR_VAR 0 12
65484: PUSH
65485: CALL_OW 44
65489: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65490: LD_VAR 0 12
65494: PPUSH
65495: LD_VAR 0 9
65499: PPUSH
65500: LD_INT 0
65502: PPUSH
65503: CALL 67154 0 3
// end ;
65507: GO 65461
65509: POP
65510: POP
// end ;
65511: LD_VAR 0 10
65515: RET
// export function WantHeal ( sci , unit ) ; begin
65516: LD_INT 0
65518: PPUSH
// if GetTaskList ( sci ) > 0 then
65519: LD_VAR 0 1
65523: PPUSH
65524: CALL_OW 437
65528: PUSH
65529: LD_INT 0
65531: GREATER
65532: IFFALSE 65604
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65534: LD_VAR 0 1
65538: PPUSH
65539: CALL_OW 437
65543: PUSH
65544: LD_INT 1
65546: ARRAY
65547: PUSH
65548: LD_INT 1
65550: ARRAY
65551: PUSH
65552: LD_STRING l
65554: EQUAL
65555: IFFALSE 65582
65557: PUSH
65558: LD_VAR 0 1
65562: PPUSH
65563: CALL_OW 437
65567: PUSH
65568: LD_INT 1
65570: ARRAY
65571: PUSH
65572: LD_INT 4
65574: ARRAY
65575: PUSH
65576: LD_VAR 0 2
65580: EQUAL
65581: AND
65582: IFFALSE 65594
// result := true else
65584: LD_ADDR_VAR 0 3
65588: PUSH
65589: LD_INT 1
65591: ST_TO_ADDR
65592: GO 65602
// result := false ;
65594: LD_ADDR_VAR 0 3
65598: PUSH
65599: LD_INT 0
65601: ST_TO_ADDR
// end else
65602: GO 65612
// result := false ;
65604: LD_ADDR_VAR 0 3
65608: PUSH
65609: LD_INT 0
65611: ST_TO_ADDR
// end ;
65612: LD_VAR 0 3
65616: RET
// export function HealTarget ( sci ) ; begin
65617: LD_INT 0
65619: PPUSH
// if not sci then
65620: LD_VAR 0 1
65624: NOT
65625: IFFALSE 65629
// exit ;
65627: GO 65694
// result := 0 ;
65629: LD_ADDR_VAR 0 2
65633: PUSH
65634: LD_INT 0
65636: ST_TO_ADDR
// if GetTaskList ( sci ) then
65637: LD_VAR 0 1
65641: PPUSH
65642: CALL_OW 437
65646: IFFALSE 65694
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65648: LD_VAR 0 1
65652: PPUSH
65653: CALL_OW 437
65657: PUSH
65658: LD_INT 1
65660: ARRAY
65661: PUSH
65662: LD_INT 1
65664: ARRAY
65665: PUSH
65666: LD_STRING l
65668: EQUAL
65669: IFFALSE 65694
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65671: LD_ADDR_VAR 0 2
65675: PUSH
65676: LD_VAR 0 1
65680: PPUSH
65681: CALL_OW 437
65685: PUSH
65686: LD_INT 1
65688: ARRAY
65689: PUSH
65690: LD_INT 4
65692: ARRAY
65693: ST_TO_ADDR
// end ;
65694: LD_VAR 0 2
65698: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65699: LD_INT 0
65701: PPUSH
65702: PPUSH
65703: PPUSH
65704: PPUSH
// if not base_units then
65705: LD_VAR 0 1
65709: NOT
65710: IFFALSE 65714
// exit ;
65712: GO 65801
// result := false ;
65714: LD_ADDR_VAR 0 2
65718: PUSH
65719: LD_INT 0
65721: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65722: LD_ADDR_VAR 0 5
65726: PUSH
65727: LD_VAR 0 1
65731: PPUSH
65732: LD_INT 21
65734: PUSH
65735: LD_INT 3
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PPUSH
65742: CALL_OW 72
65746: ST_TO_ADDR
// if not tmp then
65747: LD_VAR 0 5
65751: NOT
65752: IFFALSE 65756
// exit ;
65754: GO 65801
// for i in tmp do
65756: LD_ADDR_VAR 0 3
65760: PUSH
65761: LD_VAR 0 5
65765: PUSH
65766: FOR_IN
65767: IFFALSE 65799
// begin result := EnemyInRange ( i , 22 ) ;
65769: LD_ADDR_VAR 0 2
65773: PUSH
65774: LD_VAR 0 3
65778: PPUSH
65779: LD_INT 22
65781: PPUSH
65782: CALL 63226 0 2
65786: ST_TO_ADDR
// if result then
65787: LD_VAR 0 2
65791: IFFALSE 65797
// exit ;
65793: POP
65794: POP
65795: GO 65801
// end ;
65797: GO 65766
65799: POP
65800: POP
// end ;
65801: LD_VAR 0 2
65805: RET
// export function FilterByTag ( units , tag ) ; begin
65806: LD_INT 0
65808: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65809: LD_ADDR_VAR 0 3
65813: PUSH
65814: LD_VAR 0 1
65818: PPUSH
65819: LD_INT 120
65821: PUSH
65822: LD_VAR 0 2
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PPUSH
65831: CALL_OW 72
65835: ST_TO_ADDR
// end ;
65836: LD_VAR 0 3
65840: RET
// export function IsDriver ( un ) ; begin
65841: LD_INT 0
65843: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65844: LD_ADDR_VAR 0 2
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 55
65856: PUSH
65857: EMPTY
65858: LIST
65859: PPUSH
65860: CALL_OW 69
65864: IN
65865: ST_TO_ADDR
// end ;
65866: LD_VAR 0 2
65870: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65871: LD_INT 0
65873: PPUSH
65874: PPUSH
// list := [ ] ;
65875: LD_ADDR_VAR 0 5
65879: PUSH
65880: EMPTY
65881: ST_TO_ADDR
// case d of 0 :
65882: LD_VAR 0 3
65886: PUSH
65887: LD_INT 0
65889: DOUBLE
65890: EQUAL
65891: IFTRUE 65895
65893: GO 66028
65895: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65896: LD_ADDR_VAR 0 5
65900: PUSH
65901: LD_VAR 0 1
65905: PUSH
65906: LD_INT 4
65908: MINUS
65909: PUSH
65910: LD_VAR 0 2
65914: PUSH
65915: LD_INT 4
65917: MINUS
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: LIST
65926: PUSH
65927: LD_VAR 0 1
65931: PUSH
65932: LD_INT 3
65934: MINUS
65935: PUSH
65936: LD_VAR 0 2
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: LIST
65948: PUSH
65949: LD_VAR 0 1
65953: PUSH
65954: LD_INT 4
65956: PLUS
65957: PUSH
65958: LD_VAR 0 2
65962: PUSH
65963: LD_INT 4
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: PUSH
65971: LD_VAR 0 1
65975: PUSH
65976: LD_INT 3
65978: PLUS
65979: PUSH
65980: LD_VAR 0 2
65984: PUSH
65985: LD_INT 3
65987: PLUS
65988: PUSH
65989: LD_INT 5
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: LIST
65996: PUSH
65997: LD_VAR 0 1
66001: PUSH
66002: LD_VAR 0 2
66006: PUSH
66007: LD_INT 4
66009: PLUS
66010: PUSH
66011: LD_INT 0
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: LIST
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: LIST
66023: LIST
66024: LIST
66025: ST_TO_ADDR
// end ; 1 :
66026: GO 66726
66028: LD_INT 1
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66036
66034: GO 66169
66036: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66037: LD_ADDR_VAR 0 5
66041: PUSH
66042: LD_VAR 0 1
66046: PUSH
66047: LD_VAR 0 2
66051: PUSH
66052: LD_INT 4
66054: MINUS
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: PUSH
66064: LD_VAR 0 1
66068: PUSH
66069: LD_INT 3
66071: MINUS
66072: PUSH
66073: LD_VAR 0 2
66077: PUSH
66078: LD_INT 3
66080: MINUS
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: LIST
66089: PUSH
66090: LD_VAR 0 1
66094: PUSH
66095: LD_INT 4
66097: MINUS
66098: PUSH
66099: LD_VAR 0 2
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: PUSH
66112: LD_VAR 0 1
66116: PUSH
66117: LD_VAR 0 2
66121: PUSH
66122: LD_INT 3
66124: PLUS
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: LIST
66133: PUSH
66134: LD_VAR 0 1
66138: PUSH
66139: LD_INT 4
66141: PLUS
66142: PUSH
66143: LD_VAR 0 2
66147: PUSH
66148: LD_INT 4
66150: PLUS
66151: PUSH
66152: LD_INT 5
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: LIST
66159: PUSH
66160: EMPTY
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// end ; 2 :
66167: GO 66726
66169: LD_INT 2
66171: DOUBLE
66172: EQUAL
66173: IFTRUE 66177
66175: GO 66306
66177: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66178: LD_ADDR_VAR 0 5
66182: PUSH
66183: LD_VAR 0 1
66187: PUSH
66188: LD_VAR 0 2
66192: PUSH
66193: LD_INT 3
66195: MINUS
66196: PUSH
66197: LD_INT 3
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: LIST
66204: PUSH
66205: LD_VAR 0 1
66209: PUSH
66210: LD_INT 4
66212: PLUS
66213: PUSH
66214: LD_VAR 0 2
66218: PUSH
66219: LD_INT 4
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: PUSH
66227: LD_VAR 0 1
66231: PUSH
66232: LD_VAR 0 2
66236: PUSH
66237: LD_INT 4
66239: PLUS
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: LIST
66248: PUSH
66249: LD_VAR 0 1
66253: PUSH
66254: LD_INT 3
66256: MINUS
66257: PUSH
66258: LD_VAR 0 2
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: LIST
66270: PUSH
66271: LD_VAR 0 1
66275: PUSH
66276: LD_INT 4
66278: MINUS
66279: PUSH
66280: LD_VAR 0 2
66284: PUSH
66285: LD_INT 4
66287: MINUS
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: LIST
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: ST_TO_ADDR
// end ; 3 :
66304: GO 66726
66306: LD_INT 3
66308: DOUBLE
66309: EQUAL
66310: IFTRUE 66314
66312: GO 66447
66314: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66315: LD_ADDR_VAR 0 5
66319: PUSH
66320: LD_VAR 0 1
66324: PUSH
66325: LD_INT 3
66327: PLUS
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_INT 4
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: LIST
66341: PUSH
66342: LD_VAR 0 1
66346: PUSH
66347: LD_INT 4
66349: PLUS
66350: PUSH
66351: LD_VAR 0 2
66355: PUSH
66356: LD_INT 4
66358: PLUS
66359: PUSH
66360: LD_INT 5
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: LIST
66367: PUSH
66368: LD_VAR 0 1
66372: PUSH
66373: LD_INT 4
66375: MINUS
66376: PUSH
66377: LD_VAR 0 2
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: PUSH
66390: LD_VAR 0 1
66394: PUSH
66395: LD_VAR 0 2
66399: PUSH
66400: LD_INT 4
66402: MINUS
66403: PUSH
66404: LD_INT 3
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: PUSH
66412: LD_VAR 0 1
66416: PUSH
66417: LD_INT 3
66419: MINUS
66420: PUSH
66421: LD_VAR 0 2
66425: PUSH
66426: LD_INT 3
66428: MINUS
66429: PUSH
66430: LD_INT 2
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: ST_TO_ADDR
// end ; 4 :
66445: GO 66726
66447: LD_INT 4
66449: DOUBLE
66450: EQUAL
66451: IFTRUE 66455
66453: GO 66588
66455: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66456: LD_ADDR_VAR 0 5
66460: PUSH
66461: LD_VAR 0 1
66465: PUSH
66466: LD_VAR 0 2
66470: PUSH
66471: LD_INT 4
66473: PLUS
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: LIST
66482: PUSH
66483: LD_VAR 0 1
66487: PUSH
66488: LD_INT 3
66490: PLUS
66491: PUSH
66492: LD_VAR 0 2
66496: PUSH
66497: LD_INT 3
66499: PLUS
66500: PUSH
66501: LD_INT 5
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: LIST
66508: PUSH
66509: LD_VAR 0 1
66513: PUSH
66514: LD_INT 4
66516: PLUS
66517: PUSH
66518: LD_VAR 0 2
66522: PUSH
66523: LD_INT 4
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: LIST
66530: PUSH
66531: LD_VAR 0 1
66535: PUSH
66536: LD_VAR 0 2
66540: PUSH
66541: LD_INT 3
66543: MINUS
66544: PUSH
66545: LD_INT 3
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: LIST
66552: PUSH
66553: LD_VAR 0 1
66557: PUSH
66558: LD_INT 4
66560: MINUS
66561: PUSH
66562: LD_VAR 0 2
66566: PUSH
66567: LD_INT 4
66569: MINUS
66570: PUSH
66571: LD_INT 2
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: ST_TO_ADDR
// end ; 5 :
66586: GO 66726
66588: LD_INT 5
66590: DOUBLE
66591: EQUAL
66592: IFTRUE 66596
66594: GO 66725
66596: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66597: LD_ADDR_VAR 0 5
66601: PUSH
66602: LD_VAR 0 1
66606: PUSH
66607: LD_INT 4
66609: MINUS
66610: PUSH
66611: LD_VAR 0 2
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: PUSH
66624: LD_VAR 0 1
66628: PUSH
66629: LD_VAR 0 2
66633: PUSH
66634: LD_INT 4
66636: MINUS
66637: PUSH
66638: LD_INT 3
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: PUSH
66646: LD_VAR 0 1
66650: PUSH
66651: LD_INT 4
66653: PLUS
66654: PUSH
66655: LD_VAR 0 2
66659: PUSH
66660: LD_INT 4
66662: PLUS
66663: PUSH
66664: LD_INT 5
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: LD_VAR 0 1
66676: PUSH
66677: LD_INT 3
66679: PLUS
66680: PUSH
66681: LD_VAR 0 2
66685: PUSH
66686: LD_INT 4
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: LIST
66693: PUSH
66694: LD_VAR 0 1
66698: PUSH
66699: LD_VAR 0 2
66703: PUSH
66704: LD_INT 3
66706: PLUS
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// end ; end ;
66723: GO 66726
66725: POP
// result := list ;
66726: LD_ADDR_VAR 0 4
66730: PUSH
66731: LD_VAR 0 5
66735: ST_TO_ADDR
// end ;
66736: LD_VAR 0 4
66740: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66741: LD_INT 0
66743: PPUSH
66744: PPUSH
66745: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66746: LD_VAR 0 1
66750: NOT
66751: IFTRUE 66779
66753: PUSH
66754: LD_VAR 0 2
66758: PUSH
66759: LD_INT 1
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: LD_INT 4
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: IN
66777: NOT
66778: OR
66779: IFFALSE 66783
// exit ;
66781: GO 66866
// tmp := [ ] ;
66783: LD_ADDR_VAR 0 5
66787: PUSH
66788: EMPTY
66789: ST_TO_ADDR
// for i in units do
66790: LD_ADDR_VAR 0 4
66794: PUSH
66795: LD_VAR 0 1
66799: PUSH
66800: FOR_IN
66801: IFFALSE 66835
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66803: LD_ADDR_VAR 0 5
66807: PUSH
66808: LD_VAR 0 5
66812: PPUSH
66813: LD_VAR 0 4
66817: PPUSH
66818: LD_VAR 0 2
66822: PPUSH
66823: CALL_OW 259
66827: PPUSH
66828: CALL 68261 0 2
66832: ST_TO_ADDR
66833: GO 66800
66835: POP
66836: POP
// if not tmp then
66837: LD_VAR 0 5
66841: NOT
66842: IFFALSE 66846
// exit ;
66844: GO 66866
// result := SortListByListDesc ( units , tmp ) ;
66846: LD_ADDR_VAR 0 3
66850: PUSH
66851: LD_VAR 0 1
66855: PPUSH
66856: LD_VAR 0 5
66860: PPUSH
66861: CALL_OW 77
66865: ST_TO_ADDR
// end ;
66866: LD_VAR 0 3
66870: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66871: LD_INT 0
66873: PPUSH
66874: PPUSH
66875: PPUSH
// result := false ;
66876: LD_ADDR_VAR 0 3
66880: PUSH
66881: LD_INT 0
66883: ST_TO_ADDR
// if not building then
66884: LD_VAR 0 2
66888: NOT
66889: IFFALSE 66893
// exit ;
66891: GO 67037
// x := GetX ( building ) ;
66893: LD_ADDR_VAR 0 4
66897: PUSH
66898: LD_VAR 0 2
66902: PPUSH
66903: CALL_OW 250
66907: ST_TO_ADDR
// y := GetY ( building ) ;
66908: LD_ADDR_VAR 0 5
66912: PUSH
66913: LD_VAR 0 2
66917: PPUSH
66918: CALL_OW 251
66922: ST_TO_ADDR
// if not x or not y then
66923: LD_VAR 0 4
66927: NOT
66928: IFTRUE 66937
66930: PUSH
66931: LD_VAR 0 5
66935: NOT
66936: OR
66937: IFFALSE 66941
// exit ;
66939: GO 67037
// if GetTaskList ( unit ) then
66941: LD_VAR 0 1
66945: PPUSH
66946: CALL_OW 437
66950: IFFALSE 67037
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66952: LD_STRING e
66954: PUSH
66955: LD_VAR 0 1
66959: PPUSH
66960: CALL_OW 437
66964: PUSH
66965: LD_INT 1
66967: ARRAY
66968: PUSH
66969: LD_INT 1
66971: ARRAY
66972: EQUAL
66973: IFFALSE 67000
66975: PUSH
66976: LD_VAR 0 4
66980: PUSH
66981: LD_VAR 0 1
66985: PPUSH
66986: CALL_OW 437
66990: PUSH
66991: LD_INT 1
66993: ARRAY
66994: PUSH
66995: LD_INT 2
66997: ARRAY
66998: EQUAL
66999: AND
67000: IFFALSE 67027
67002: PUSH
67003: LD_VAR 0 5
67007: PUSH
67008: LD_VAR 0 1
67012: PPUSH
67013: CALL_OW 437
67017: PUSH
67018: LD_INT 1
67020: ARRAY
67021: PUSH
67022: LD_INT 3
67024: ARRAY
67025: EQUAL
67026: AND
67027: IFFALSE 67037
// result := true end ;
67029: LD_ADDR_VAR 0 3
67033: PUSH
67034: LD_INT 1
67036: ST_TO_ADDR
// end ;
67037: LD_VAR 0 3
67041: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67042: LD_INT 0
67044: PPUSH
// result := false ;
67045: LD_ADDR_VAR 0 4
67049: PUSH
67050: LD_INT 0
67052: ST_TO_ADDR
// if GetTaskList ( unit ) then
67053: LD_VAR 0 1
67057: PPUSH
67058: CALL_OW 437
67062: IFFALSE 67149
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67064: LD_STRING M
67066: PUSH
67067: LD_VAR 0 1
67071: PPUSH
67072: CALL_OW 437
67076: PUSH
67077: LD_INT 1
67079: ARRAY
67080: PUSH
67081: LD_INT 1
67083: ARRAY
67084: EQUAL
67085: IFFALSE 67112
67087: PUSH
67088: LD_VAR 0 2
67092: PUSH
67093: LD_VAR 0 1
67097: PPUSH
67098: CALL_OW 437
67102: PUSH
67103: LD_INT 1
67105: ARRAY
67106: PUSH
67107: LD_INT 2
67109: ARRAY
67110: EQUAL
67111: AND
67112: IFFALSE 67139
67114: PUSH
67115: LD_VAR 0 3
67119: PUSH
67120: LD_VAR 0 1
67124: PPUSH
67125: CALL_OW 437
67129: PUSH
67130: LD_INT 1
67132: ARRAY
67133: PUSH
67134: LD_INT 3
67136: ARRAY
67137: EQUAL
67138: AND
67139: IFFALSE 67149
// result := true ;
67141: LD_ADDR_VAR 0 4
67145: PUSH
67146: LD_INT 1
67148: ST_TO_ADDR
// end ; end ;
67149: LD_VAR 0 4
67153: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67154: LD_INT 0
67156: PPUSH
67157: PPUSH
67158: PPUSH
67159: PPUSH
// if not unit or not area then
67160: LD_VAR 0 1
67164: NOT
67165: IFTRUE 67174
67167: PUSH
67168: LD_VAR 0 2
67172: NOT
67173: OR
67174: IFFALSE 67178
// exit ;
67176: GO 67354
// tmp := AreaToList ( area , i ) ;
67178: LD_ADDR_VAR 0 6
67182: PUSH
67183: LD_VAR 0 2
67187: PPUSH
67188: LD_VAR 0 5
67192: PPUSH
67193: CALL_OW 517
67197: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67198: LD_ADDR_VAR 0 5
67202: PUSH
67203: DOUBLE
67204: LD_INT 1
67206: DEC
67207: ST_TO_ADDR
67208: LD_VAR 0 6
67212: PUSH
67213: LD_INT 1
67215: ARRAY
67216: PUSH
67217: FOR_TO
67218: IFFALSE 67352
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67220: LD_ADDR_VAR 0 7
67224: PUSH
67225: LD_VAR 0 6
67229: PUSH
67230: LD_INT 1
67232: ARRAY
67233: PUSH
67234: LD_VAR 0 5
67238: ARRAY
67239: PUSH
67240: LD_VAR 0 6
67244: PUSH
67245: LD_INT 2
67247: ARRAY
67248: PUSH
67249: LD_VAR 0 5
67253: ARRAY
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
67259: LD_INT 92
67261: PUSH
67262: LD_VAR 0 7
67266: PUSH
67267: LD_INT 1
67269: ARRAY
67270: PUSH
67271: LD_VAR 0 7
67275: PUSH
67276: LD_INT 2
67278: ARRAY
67279: PUSH
67280: LD_INT 2
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: PPUSH
67289: CALL_OW 69
67293: PUSH
67294: LD_INT 0
67296: EQUAL
67297: IFFALSE 67350
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67299: LD_VAR 0 1
67303: PPUSH
67304: LD_VAR 0 7
67308: PUSH
67309: LD_INT 1
67311: ARRAY
67312: PPUSH
67313: LD_VAR 0 7
67317: PUSH
67318: LD_INT 2
67320: ARRAY
67321: PPUSH
67322: LD_VAR 0 3
67326: PPUSH
67327: CALL_OW 48
// result := IsPlaced ( unit ) ;
67331: LD_ADDR_VAR 0 4
67335: PUSH
67336: LD_VAR 0 1
67340: PPUSH
67341: CALL_OW 305
67345: ST_TO_ADDR
// exit ;
67346: POP
67347: POP
67348: GO 67354
// end ; end ;
67350: GO 67217
67352: POP
67353: POP
// end ;
67354: LD_VAR 0 4
67358: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67359: LD_INT 0
67361: PPUSH
67362: PPUSH
67363: PPUSH
// if not side or side > 8 then
67364: LD_VAR 0 1
67368: NOT
67369: IFTRUE 67381
67371: PUSH
67372: LD_VAR 0 1
67376: PUSH
67377: LD_INT 8
67379: GREATER
67380: OR
67381: IFFALSE 67385
// exit ;
67383: GO 67572
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67385: LD_ADDR_VAR 0 4
67389: PUSH
67390: LD_INT 22
67392: PUSH
67393: LD_VAR 0 1
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 21
67404: PUSH
67405: LD_INT 3
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PPUSH
67416: CALL_OW 69
67420: ST_TO_ADDR
// if not tmp then
67421: LD_VAR 0 4
67425: NOT
67426: IFFALSE 67430
// exit ;
67428: GO 67572
// enable_addtolog := true ;
67430: LD_ADDR_OWVAR 81
67434: PUSH
67435: LD_INT 1
67437: ST_TO_ADDR
// AddToLog ( [ ) ;
67438: LD_STRING [
67440: PPUSH
67441: CALL_OW 561
// for i in tmp do
67445: LD_ADDR_VAR 0 3
67449: PUSH
67450: LD_VAR 0 4
67454: PUSH
67455: FOR_IN
67456: IFFALSE 67563
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67458: LD_STRING [
67460: PUSH
67461: LD_VAR 0 3
67465: PPUSH
67466: CALL_OW 266
67470: STR
67471: PUSH
67472: LD_STRING , 
67474: STR
67475: PUSH
67476: LD_VAR 0 3
67480: PPUSH
67481: CALL_OW 250
67485: STR
67486: PUSH
67487: LD_STRING , 
67489: STR
67490: PUSH
67491: LD_VAR 0 3
67495: PPUSH
67496: CALL_OW 251
67500: STR
67501: PUSH
67502: LD_STRING , 
67504: STR
67505: PUSH
67506: LD_VAR 0 3
67510: PPUSH
67511: CALL_OW 254
67515: STR
67516: PUSH
67517: LD_STRING , 
67519: STR
67520: PUSH
67521: LD_VAR 0 3
67525: PPUSH
67526: LD_INT 1
67528: PPUSH
67529: CALL_OW 268
67533: STR
67534: PUSH
67535: LD_STRING , 
67537: STR
67538: PUSH
67539: LD_VAR 0 3
67543: PPUSH
67544: LD_INT 2
67546: PPUSH
67547: CALL_OW 268
67551: STR
67552: PUSH
67553: LD_STRING ],
67555: STR
67556: PPUSH
67557: CALL_OW 561
// end ;
67561: GO 67455
67563: POP
67564: POP
// AddToLog ( ]; ) ;
67565: LD_STRING ];
67567: PPUSH
67568: CALL_OW 561
// end ;
67572: LD_VAR 0 2
67576: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67577: LD_INT 0
67579: PPUSH
67580: PPUSH
67581: PPUSH
67582: PPUSH
67583: PPUSH
// if not area or not rate or not max then
67584: LD_VAR 0 1
67588: NOT
67589: IFTRUE 67598
67591: PUSH
67592: LD_VAR 0 2
67596: NOT
67597: OR
67598: IFTRUE 67607
67600: PUSH
67601: LD_VAR 0 4
67605: NOT
67606: OR
67607: IFFALSE 67611
// exit ;
67609: GO 67800
// while 1 do
67611: LD_INT 1
67613: IFFALSE 67800
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67615: LD_ADDR_VAR 0 9
67619: PUSH
67620: LD_VAR 0 1
67624: PPUSH
67625: LD_INT 1
67627: PPUSH
67628: CALL_OW 287
67632: PUSH
67633: LD_INT 10
67635: MUL
67636: ST_TO_ADDR
// r := rate / 10 ;
67637: LD_ADDR_VAR 0 7
67641: PUSH
67642: LD_VAR 0 2
67646: PUSH
67647: LD_INT 10
67649: DIVREAL
67650: ST_TO_ADDR
// time := 1 1$00 ;
67651: LD_ADDR_VAR 0 8
67655: PUSH
67656: LD_INT 2100
67658: ST_TO_ADDR
// if amount < min then
67659: LD_VAR 0 9
67663: PUSH
67664: LD_VAR 0 3
67668: LESS
67669: IFFALSE 67687
// r := r * 2 else
67671: LD_ADDR_VAR 0 7
67675: PUSH
67676: LD_VAR 0 7
67680: PUSH
67681: LD_INT 2
67683: MUL
67684: ST_TO_ADDR
67685: GO 67713
// if amount > max then
67687: LD_VAR 0 9
67691: PUSH
67692: LD_VAR 0 4
67696: GREATER
67697: IFFALSE 67713
// r := r / 2 ;
67699: LD_ADDR_VAR 0 7
67703: PUSH
67704: LD_VAR 0 7
67708: PUSH
67709: LD_INT 2
67711: DIVREAL
67712: ST_TO_ADDR
// time := time / r ;
67713: LD_ADDR_VAR 0 8
67717: PUSH
67718: LD_VAR 0 8
67722: PUSH
67723: LD_VAR 0 7
67727: DIVREAL
67728: ST_TO_ADDR
// if time < 0 then
67729: LD_VAR 0 8
67733: PUSH
67734: LD_INT 0
67736: LESS
67737: IFFALSE 67754
// time := time * - 1 ;
67739: LD_ADDR_VAR 0 8
67743: PUSH
67744: LD_VAR 0 8
67748: PUSH
67749: LD_INT 1
67751: NEG
67752: MUL
67753: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67754: LD_VAR 0 8
67758: PUSH
67759: LD_INT 35
67761: PPUSH
67762: LD_INT 875
67764: PPUSH
67765: CALL_OW 12
67769: PLUS
67770: PPUSH
67771: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67775: LD_INT 1
67777: PPUSH
67778: LD_INT 5
67780: PPUSH
67781: CALL_OW 12
67785: PPUSH
67786: LD_VAR 0 1
67790: PPUSH
67791: LD_INT 1
67793: PPUSH
67794: CALL_OW 55
// end ;
67798: GO 67611
// end ;
67800: LD_VAR 0 5
67804: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67805: LD_INT 0
67807: PPUSH
67808: PPUSH
67809: PPUSH
67810: PPUSH
67811: PPUSH
67812: PPUSH
67813: PPUSH
67814: PPUSH
// if not turrets or not factories then
67815: LD_VAR 0 1
67819: NOT
67820: IFTRUE 67829
67822: PUSH
67823: LD_VAR 0 2
67827: NOT
67828: OR
67829: IFFALSE 67833
// exit ;
67831: GO 68140
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67833: LD_ADDR_VAR 0 10
67837: PUSH
67838: LD_INT 5
67840: PUSH
67841: LD_INT 6
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 2
67850: PUSH
67851: LD_INT 4
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 3
67860: PUSH
67861: LD_INT 5
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 24
67875: PUSH
67876: LD_INT 25
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 23
67885: PUSH
67886: LD_INT 27
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 42
67899: PUSH
67900: LD_INT 43
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 44
67909: PUSH
67910: LD_INT 46
67912: PUSH
67913: EMPTY
67914: LIST
67915: LIST
67916: PUSH
67917: LD_INT 45
67919: PUSH
67920: LD_INT 47
67922: PUSH
67923: EMPTY
67924: LIST
67925: LIST
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: LIST
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: LIST
67936: ST_TO_ADDR
// result := [ ] ;
67937: LD_ADDR_VAR 0 3
67941: PUSH
67942: EMPTY
67943: ST_TO_ADDR
// for i in turrets do
67944: LD_ADDR_VAR 0 4
67948: PUSH
67949: LD_VAR 0 1
67953: PUSH
67954: FOR_IN
67955: IFFALSE 68138
// begin nat := GetNation ( i ) ;
67957: LD_ADDR_VAR 0 7
67961: PUSH
67962: LD_VAR 0 4
67966: PPUSH
67967: CALL_OW 248
67971: ST_TO_ADDR
// weapon := 0 ;
67972: LD_ADDR_VAR 0 8
67976: PUSH
67977: LD_INT 0
67979: ST_TO_ADDR
// if not nat then
67980: LD_VAR 0 7
67984: NOT
67985: IFFALSE 67989
// continue ;
67987: GO 67954
// for j in list [ nat ] do
67989: LD_ADDR_VAR 0 5
67993: PUSH
67994: LD_VAR 0 10
67998: PUSH
67999: LD_VAR 0 7
68003: ARRAY
68004: PUSH
68005: FOR_IN
68006: IFFALSE 68047
// if GetBWeapon ( i ) = j [ 1 ] then
68008: LD_VAR 0 4
68012: PPUSH
68013: CALL_OW 269
68017: PUSH
68018: LD_VAR 0 5
68022: PUSH
68023: LD_INT 1
68025: ARRAY
68026: EQUAL
68027: IFFALSE 68045
// begin weapon := j [ 2 ] ;
68029: LD_ADDR_VAR 0 8
68033: PUSH
68034: LD_VAR 0 5
68038: PUSH
68039: LD_INT 2
68041: ARRAY
68042: ST_TO_ADDR
// break ;
68043: GO 68047
// end ;
68045: GO 68005
68047: POP
68048: POP
// if not weapon then
68049: LD_VAR 0 8
68053: NOT
68054: IFFALSE 68058
// continue ;
68056: GO 67954
// for k in factories do
68058: LD_ADDR_VAR 0 6
68062: PUSH
68063: LD_VAR 0 2
68067: PUSH
68068: FOR_IN
68069: IFFALSE 68134
// begin weapons := AvailableWeaponList ( k ) ;
68071: LD_ADDR_VAR 0 9
68075: PUSH
68076: LD_VAR 0 6
68080: PPUSH
68081: CALL_OW 478
68085: ST_TO_ADDR
// if not weapons then
68086: LD_VAR 0 9
68090: NOT
68091: IFFALSE 68095
// continue ;
68093: GO 68068
// if weapon in weapons then
68095: LD_VAR 0 8
68099: PUSH
68100: LD_VAR 0 9
68104: IN
68105: IFFALSE 68132
// begin result := [ i , weapon ] ;
68107: LD_ADDR_VAR 0 3
68111: PUSH
68112: LD_VAR 0 4
68116: PUSH
68117: LD_VAR 0 8
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: ST_TO_ADDR
// exit ;
68126: POP
68127: POP
68128: POP
68129: POP
68130: GO 68140
// end ; end ;
68132: GO 68068
68134: POP
68135: POP
// end ;
68136: GO 67954
68138: POP
68139: POP
// end ;
68140: LD_VAR 0 3
68144: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68145: LD_INT 0
68147: PPUSH
// if not side or side > 8 then
68148: LD_VAR 0 3
68152: NOT
68153: IFTRUE 68165
68155: PUSH
68156: LD_VAR 0 3
68160: PUSH
68161: LD_INT 8
68163: GREATER
68164: OR
68165: IFFALSE 68169
// exit ;
68167: GO 68228
// if not range then
68169: LD_VAR 0 4
68173: NOT
68174: IFFALSE 68185
// range := - 12 ;
68176: LD_ADDR_VAR 0 4
68180: PUSH
68181: LD_INT 12
68183: NEG
68184: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68185: LD_VAR 0 1
68189: PPUSH
68190: LD_VAR 0 2
68194: PPUSH
68195: LD_VAR 0 3
68199: PPUSH
68200: LD_VAR 0 4
68204: PPUSH
68205: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68209: LD_VAR 0 1
68213: PPUSH
68214: LD_VAR 0 2
68218: PPUSH
68219: LD_VAR 0 3
68223: PPUSH
68224: CALL_OW 331
// end ;
68228: LD_VAR 0 5
68232: RET
// export function Video ( mode ) ; begin
68233: LD_INT 0
68235: PPUSH
// ingame_video = mode ;
68236: LD_ADDR_OWVAR 52
68240: PUSH
68241: LD_VAR 0 1
68245: ST_TO_ADDR
// interface_hidden = mode ;
68246: LD_ADDR_OWVAR 54
68250: PUSH
68251: LD_VAR 0 1
68255: ST_TO_ADDR
// end ;
68256: LD_VAR 0 2
68260: RET
// export function Join ( array , element ) ; begin
68261: LD_INT 0
68263: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68264: LD_ADDR_VAR 0 3
68268: PUSH
68269: LD_VAR 0 1
68273: PPUSH
68274: LD_VAR 0 1
68278: PUSH
68279: LD_INT 1
68281: PLUS
68282: PPUSH
68283: LD_VAR 0 2
68287: PPUSH
68288: CALL_OW 1
68292: ST_TO_ADDR
// end ;
68293: LD_VAR 0 3
68297: RET
// export function JoinUnion ( array , element ) ; begin
68298: LD_INT 0
68300: PPUSH
// result := array union element ;
68301: LD_ADDR_VAR 0 3
68305: PUSH
68306: LD_VAR 0 1
68310: PUSH
68311: LD_VAR 0 2
68315: UNION
68316: ST_TO_ADDR
// end ;
68317: LD_VAR 0 3
68321: RET
// export function GetBehemoths ( side ) ; begin
68322: LD_INT 0
68324: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68325: LD_ADDR_VAR 0 2
68329: PUSH
68330: LD_INT 22
68332: PUSH
68333: LD_VAR 0 1
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 31
68344: PUSH
68345: LD_INT 25
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PPUSH
68356: CALL_OW 69
68360: ST_TO_ADDR
// end ;
68361: LD_VAR 0 2
68365: RET
// export function Shuffle ( array ) ; var i , index ; begin
68366: LD_INT 0
68368: PPUSH
68369: PPUSH
68370: PPUSH
// result := [ ] ;
68371: LD_ADDR_VAR 0 2
68375: PUSH
68376: EMPTY
68377: ST_TO_ADDR
// if not array then
68378: LD_VAR 0 1
68382: NOT
68383: IFFALSE 68387
// exit ;
68385: GO 68486
// Randomize ;
68387: CALL_OW 10
// for i = array downto 1 do
68391: LD_ADDR_VAR 0 3
68395: PUSH
68396: DOUBLE
68397: LD_VAR 0 1
68401: INC
68402: ST_TO_ADDR
68403: LD_INT 1
68405: PUSH
68406: FOR_DOWNTO
68407: IFFALSE 68484
// begin index := rand ( 1 , array ) ;
68409: LD_ADDR_VAR 0 4
68413: PUSH
68414: LD_INT 1
68416: PPUSH
68417: LD_VAR 0 1
68421: PPUSH
68422: CALL_OW 12
68426: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68427: LD_ADDR_VAR 0 2
68431: PUSH
68432: LD_VAR 0 2
68436: PPUSH
68437: LD_VAR 0 2
68441: PUSH
68442: LD_INT 1
68444: PLUS
68445: PPUSH
68446: LD_VAR 0 1
68450: PUSH
68451: LD_VAR 0 4
68455: ARRAY
68456: PPUSH
68457: CALL_OW 2
68461: ST_TO_ADDR
// array := Delete ( array , index ) ;
68462: LD_ADDR_VAR 0 1
68466: PUSH
68467: LD_VAR 0 1
68471: PPUSH
68472: LD_VAR 0 4
68476: PPUSH
68477: CALL_OW 3
68481: ST_TO_ADDR
// end ;
68482: GO 68406
68484: POP
68485: POP
// end ;
68486: LD_VAR 0 2
68490: RET
// export function GetBaseMaterials ( base ) ; begin
68491: LD_INT 0
68493: PPUSH
// result := [ 0 , 0 , 0 ] ;
68494: LD_ADDR_VAR 0 2
68498: PUSH
68499: LD_INT 0
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: LIST
68512: ST_TO_ADDR
// if not base then
68513: LD_VAR 0 1
68517: NOT
68518: IFFALSE 68522
// exit ;
68520: GO 68571
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68522: LD_ADDR_VAR 0 2
68526: PUSH
68527: LD_VAR 0 1
68531: PPUSH
68532: LD_INT 1
68534: PPUSH
68535: CALL_OW 275
68539: PUSH
68540: LD_VAR 0 1
68544: PPUSH
68545: LD_INT 2
68547: PPUSH
68548: CALL_OW 275
68552: PUSH
68553: LD_VAR 0 1
68557: PPUSH
68558: LD_INT 3
68560: PPUSH
68561: CALL_OW 275
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: LIST
68570: ST_TO_ADDR
// end ;
68571: LD_VAR 0 2
68575: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68576: LD_INT 0
68578: PPUSH
68579: PPUSH
// result := array ;
68580: LD_ADDR_VAR 0 3
68584: PUSH
68585: LD_VAR 0 1
68589: ST_TO_ADDR
// if size >= result then
68590: LD_VAR 0 2
68594: PUSH
68595: LD_VAR 0 3
68599: GREATEREQUAL
68600: IFFALSE 68604
// exit ;
68602: GO 68654
// if size then
68604: LD_VAR 0 2
68608: IFFALSE 68654
// for i := array downto size do
68610: LD_ADDR_VAR 0 4
68614: PUSH
68615: DOUBLE
68616: LD_VAR 0 1
68620: INC
68621: ST_TO_ADDR
68622: LD_VAR 0 2
68626: PUSH
68627: FOR_DOWNTO
68628: IFFALSE 68652
// result := Delete ( result , result ) ;
68630: LD_ADDR_VAR 0 3
68634: PUSH
68635: LD_VAR 0 3
68639: PPUSH
68640: LD_VAR 0 3
68644: PPUSH
68645: CALL_OW 3
68649: ST_TO_ADDR
68650: GO 68627
68652: POP
68653: POP
// end ;
68654: LD_VAR 0 3
68658: RET
// export function ComExit ( unit ) ; var tmp ; begin
68659: LD_INT 0
68661: PPUSH
68662: PPUSH
// if not IsInUnit ( unit ) then
68663: LD_VAR 0 1
68667: PPUSH
68668: CALL_OW 310
68672: NOT
68673: IFFALSE 68677
// exit ;
68675: GO 68737
// tmp := IsInUnit ( unit ) ;
68677: LD_ADDR_VAR 0 3
68681: PUSH
68682: LD_VAR 0 1
68686: PPUSH
68687: CALL_OW 310
68691: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68692: LD_VAR 0 3
68696: PPUSH
68697: CALL_OW 247
68701: PUSH
68702: LD_INT 2
68704: EQUAL
68705: IFFALSE 68718
// ComExitVehicle ( unit ) else
68707: LD_VAR 0 1
68711: PPUSH
68712: CALL_OW 121
68716: GO 68727
// ComExitBuilding ( unit ) ;
68718: LD_VAR 0 1
68722: PPUSH
68723: CALL_OW 122
// result := tmp ;
68727: LD_ADDR_VAR 0 2
68731: PUSH
68732: LD_VAR 0 3
68736: ST_TO_ADDR
// end ;
68737: LD_VAR 0 2
68741: RET
// export function ComExitAll ( units ) ; var i ; begin
68742: LD_INT 0
68744: PPUSH
68745: PPUSH
// if not units then
68746: LD_VAR 0 1
68750: NOT
68751: IFFALSE 68755
// exit ;
68753: GO 68781
// for i in units do
68755: LD_ADDR_VAR 0 3
68759: PUSH
68760: LD_VAR 0 1
68764: PUSH
68765: FOR_IN
68766: IFFALSE 68779
// ComExit ( i ) ;
68768: LD_VAR 0 3
68772: PPUSH
68773: CALL 68659 0 1
68777: GO 68765
68779: POP
68780: POP
// end ;
68781: LD_VAR 0 2
68785: RET
// export function ResetHc ; begin
68786: LD_INT 0
68788: PPUSH
// InitHc ;
68789: CALL_OW 19
// hc_importance := 0 ;
68793: LD_ADDR_OWVAR 32
68797: PUSH
68798: LD_INT 0
68800: ST_TO_ADDR
// end ;
68801: LD_VAR 0 1
68805: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68806: LD_INT 0
68808: PPUSH
68809: PPUSH
68810: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68811: LD_ADDR_VAR 0 6
68815: PUSH
68816: LD_VAR 0 1
68820: PUSH
68821: LD_VAR 0 3
68825: PLUS
68826: PUSH
68827: LD_INT 2
68829: DIV
68830: ST_TO_ADDR
// if _x < 0 then
68831: LD_VAR 0 6
68835: PUSH
68836: LD_INT 0
68838: LESS
68839: IFFALSE 68856
// _x := _x * - 1 ;
68841: LD_ADDR_VAR 0 6
68845: PUSH
68846: LD_VAR 0 6
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: MUL
68855: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68856: LD_ADDR_VAR 0 7
68860: PUSH
68861: LD_VAR 0 2
68865: PUSH
68866: LD_VAR 0 4
68870: PLUS
68871: PUSH
68872: LD_INT 2
68874: DIV
68875: ST_TO_ADDR
// if _y < 0 then
68876: LD_VAR 0 7
68880: PUSH
68881: LD_INT 0
68883: LESS
68884: IFFALSE 68901
// _y := _y * - 1 ;
68886: LD_ADDR_VAR 0 7
68890: PUSH
68891: LD_VAR 0 7
68895: PUSH
68896: LD_INT 1
68898: NEG
68899: MUL
68900: ST_TO_ADDR
// result := [ _x , _y ] ;
68901: LD_ADDR_VAR 0 5
68905: PUSH
68906: LD_VAR 0 6
68910: PUSH
68911: LD_VAR 0 7
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: ST_TO_ADDR
// end ;
68920: LD_VAR 0 5
68924: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68925: LD_INT 0
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
// task := GetTaskList ( unit ) ;
68931: LD_ADDR_VAR 0 7
68935: PUSH
68936: LD_VAR 0 1
68940: PPUSH
68941: CALL_OW 437
68945: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68946: LD_VAR 0 7
68950: NOT
68951: IFFALSE 68970
68953: PUSH
68954: LD_VAR 0 1
68958: PPUSH
68959: LD_VAR 0 2
68963: PPUSH
68964: CALL_OW 308
68968: NOT
68969: AND
68970: IFFALSE 68974
// exit ;
68972: GO 69092
// if IsInArea ( unit , area ) then
68974: LD_VAR 0 1
68978: PPUSH
68979: LD_VAR 0 2
68983: PPUSH
68984: CALL_OW 308
68988: IFFALSE 69006
// begin ComMoveToArea ( unit , goAway ) ;
68990: LD_VAR 0 1
68994: PPUSH
68995: LD_VAR 0 3
68999: PPUSH
69000: CALL_OW 113
// exit ;
69004: GO 69092
// end ; if task [ 1 ] [ 1 ] <> M then
69006: LD_VAR 0 7
69010: PUSH
69011: LD_INT 1
69013: ARRAY
69014: PUSH
69015: LD_INT 1
69017: ARRAY
69018: PUSH
69019: LD_STRING M
69021: NONEQUAL
69022: IFFALSE 69026
// exit ;
69024: GO 69092
// x := task [ 1 ] [ 2 ] ;
69026: LD_ADDR_VAR 0 5
69030: PUSH
69031: LD_VAR 0 7
69035: PUSH
69036: LD_INT 1
69038: ARRAY
69039: PUSH
69040: LD_INT 2
69042: ARRAY
69043: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69044: LD_ADDR_VAR 0 6
69048: PUSH
69049: LD_VAR 0 7
69053: PUSH
69054: LD_INT 1
69056: ARRAY
69057: PUSH
69058: LD_INT 3
69060: ARRAY
69061: ST_TO_ADDR
// if InArea ( x , y , area ) then
69062: LD_VAR 0 5
69066: PPUSH
69067: LD_VAR 0 6
69071: PPUSH
69072: LD_VAR 0 2
69076: PPUSH
69077: CALL_OW 309
69081: IFFALSE 69092
// ComStop ( unit ) ;
69083: LD_VAR 0 1
69087: PPUSH
69088: CALL_OW 141
// end ;
69092: LD_VAR 0 4
69096: RET
// export function Abs ( value ) ; begin
69097: LD_INT 0
69099: PPUSH
// result := value ;
69100: LD_ADDR_VAR 0 2
69104: PUSH
69105: LD_VAR 0 1
69109: ST_TO_ADDR
// if value < 0 then
69110: LD_VAR 0 1
69114: PUSH
69115: LD_INT 0
69117: LESS
69118: IFFALSE 69135
// result := value * - 1 ;
69120: LD_ADDR_VAR 0 2
69124: PUSH
69125: LD_VAR 0 1
69129: PUSH
69130: LD_INT 1
69132: NEG
69133: MUL
69134: ST_TO_ADDR
// end ;
69135: LD_VAR 0 2
69139: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69140: LD_INT 0
69142: PPUSH
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
69148: PPUSH
69149: PPUSH
// if not unit or not building then
69150: LD_VAR 0 1
69154: NOT
69155: IFTRUE 69164
69157: PUSH
69158: LD_VAR 0 2
69162: NOT
69163: OR
69164: IFFALSE 69168
// exit ;
69166: GO 69396
// x := GetX ( building ) ;
69168: LD_ADDR_VAR 0 4
69172: PUSH
69173: LD_VAR 0 2
69177: PPUSH
69178: CALL_OW 250
69182: ST_TO_ADDR
// y := GetY ( building ) ;
69183: LD_ADDR_VAR 0 6
69187: PUSH
69188: LD_VAR 0 2
69192: PPUSH
69193: CALL_OW 251
69197: ST_TO_ADDR
// d := GetDir ( building ) ;
69198: LD_ADDR_VAR 0 8
69202: PUSH
69203: LD_VAR 0 2
69207: PPUSH
69208: CALL_OW 254
69212: ST_TO_ADDR
// r := 4 ;
69213: LD_ADDR_VAR 0 9
69217: PUSH
69218: LD_INT 4
69220: ST_TO_ADDR
// for i := 1 to 5 do
69221: LD_ADDR_VAR 0 10
69225: PUSH
69226: DOUBLE
69227: LD_INT 1
69229: DEC
69230: ST_TO_ADDR
69231: LD_INT 5
69233: PUSH
69234: FOR_TO
69235: IFFALSE 69394
// begin _x := ShiftX ( x , d , r + i ) ;
69237: LD_ADDR_VAR 0 5
69241: PUSH
69242: LD_VAR 0 4
69246: PPUSH
69247: LD_VAR 0 8
69251: PPUSH
69252: LD_VAR 0 9
69256: PUSH
69257: LD_VAR 0 10
69261: PLUS
69262: PPUSH
69263: CALL_OW 272
69267: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69268: LD_ADDR_VAR 0 7
69272: PUSH
69273: LD_VAR 0 6
69277: PPUSH
69278: LD_VAR 0 8
69282: PPUSH
69283: LD_VAR 0 9
69287: PUSH
69288: LD_VAR 0 10
69292: PLUS
69293: PPUSH
69294: CALL_OW 273
69298: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69299: LD_VAR 0 5
69303: PPUSH
69304: LD_VAR 0 7
69308: PPUSH
69309: CALL_OW 488
69313: IFFALSE 69348
69315: PUSH
69316: LD_VAR 0 5
69320: PPUSH
69321: LD_VAR 0 7
69325: PPUSH
69326: CALL_OW 428
69330: PPUSH
69331: CALL_OW 247
69335: PUSH
69336: LD_INT 3
69338: PUSH
69339: LD_INT 2
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: IN
69346: NOT
69347: AND
69348: IFFALSE 69392
// begin ComMoveXY ( unit , _x , _y ) ;
69350: LD_VAR 0 1
69354: PPUSH
69355: LD_VAR 0 5
69359: PPUSH
69360: LD_VAR 0 7
69364: PPUSH
69365: CALL_OW 111
// result := [ _x , _y ] ;
69369: LD_ADDR_VAR 0 3
69373: PUSH
69374: LD_VAR 0 5
69378: PUSH
69379: LD_VAR 0 7
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: ST_TO_ADDR
// exit ;
69388: POP
69389: POP
69390: GO 69396
// end ; end ;
69392: GO 69234
69394: POP
69395: POP
// end ;
69396: LD_VAR 0 3
69400: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69401: LD_INT 0
69403: PPUSH
69404: PPUSH
69405: PPUSH
// result := 0 ;
69406: LD_ADDR_VAR 0 3
69410: PUSH
69411: LD_INT 0
69413: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69414: LD_VAR 0 1
69418: PUSH
69419: LD_INT 0
69421: LESS
69422: IFTRUE 69434
69424: PUSH
69425: LD_VAR 0 1
69429: PUSH
69430: LD_INT 8
69432: GREATER
69433: OR
69434: IFTRUE 69446
69436: PUSH
69437: LD_VAR 0 2
69441: PUSH
69442: LD_INT 0
69444: LESS
69445: OR
69446: IFTRUE 69458
69448: PUSH
69449: LD_VAR 0 2
69453: PUSH
69454: LD_INT 8
69456: GREATER
69457: OR
69458: IFFALSE 69462
// exit ;
69460: GO 69537
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69462: LD_ADDR_VAR 0 4
69466: PUSH
69467: LD_INT 22
69469: PUSH
69470: LD_VAR 0 2
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PPUSH
69479: CALL_OW 69
69483: PUSH
69484: FOR_IN
69485: IFFALSE 69535
// begin un := UnitShoot ( i ) ;
69487: LD_ADDR_VAR 0 5
69491: PUSH
69492: LD_VAR 0 4
69496: PPUSH
69497: CALL_OW 504
69501: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69502: LD_VAR 0 5
69506: PPUSH
69507: CALL_OW 255
69511: PUSH
69512: LD_VAR 0 1
69516: EQUAL
69517: IFFALSE 69533
// begin result := un ;
69519: LD_ADDR_VAR 0 3
69523: PUSH
69524: LD_VAR 0 5
69528: ST_TO_ADDR
// exit ;
69529: POP
69530: POP
69531: GO 69537
// end ; end ;
69533: GO 69484
69535: POP
69536: POP
// end ;
69537: LD_VAR 0 3
69541: RET
// export function GetCargoBay ( units ) ; begin
69542: LD_INT 0
69544: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69545: LD_ADDR_VAR 0 2
69549: PUSH
69550: LD_VAR 0 1
69554: PPUSH
69555: LD_INT 2
69557: PUSH
69558: LD_INT 34
69560: PUSH
69561: LD_INT 12
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 34
69570: PUSH
69571: LD_INT 51
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 34
69580: PUSH
69581: LD_INT 32
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 34
69590: PUSH
69591: LD_INT 89
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: EMPTY
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: PPUSH
69605: CALL_OW 72
69609: ST_TO_ADDR
// end ;
69610: LD_VAR 0 2
69614: RET
// export function Negate ( value ) ; begin
69615: LD_INT 0
69617: PPUSH
// result := not value ;
69618: LD_ADDR_VAR 0 2
69622: PUSH
69623: LD_VAR 0 1
69627: NOT
69628: ST_TO_ADDR
// end ;
69629: LD_VAR 0 2
69633: RET
// export function Inc ( value ) ; begin
69634: LD_INT 0
69636: PPUSH
// result := value + 1 ;
69637: LD_ADDR_VAR 0 2
69641: PUSH
69642: LD_VAR 0 1
69646: PUSH
69647: LD_INT 1
69649: PLUS
69650: ST_TO_ADDR
// end ;
69651: LD_VAR 0 2
69655: RET
// export function Dec ( value ) ; begin
69656: LD_INT 0
69658: PPUSH
// result := value - 1 ;
69659: LD_ADDR_VAR 0 2
69663: PUSH
69664: LD_VAR 0 1
69668: PUSH
69669: LD_INT 1
69671: MINUS
69672: ST_TO_ADDR
// end ;
69673: LD_VAR 0 2
69677: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69678: LD_INT 0
69680: PPUSH
69681: PPUSH
69682: PPUSH
69683: PPUSH
69684: PPUSH
69685: PPUSH
69686: PPUSH
69687: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69688: LD_VAR 0 1
69692: PPUSH
69693: LD_VAR 0 2
69697: PPUSH
69698: CALL_OW 488
69702: NOT
69703: IFTRUE 69722
69705: PUSH
69706: LD_VAR 0 3
69710: PPUSH
69711: LD_VAR 0 4
69715: PPUSH
69716: CALL_OW 488
69720: NOT
69721: OR
69722: IFFALSE 69735
// begin result := - 1 ;
69724: LD_ADDR_VAR 0 5
69728: PUSH
69729: LD_INT 1
69731: NEG
69732: ST_TO_ADDR
// exit ;
69733: GO 69970
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69735: LD_ADDR_VAR 0 12
69739: PUSH
69740: LD_VAR 0 1
69744: PPUSH
69745: LD_VAR 0 2
69749: PPUSH
69750: LD_VAR 0 3
69754: PPUSH
69755: LD_VAR 0 4
69759: PPUSH
69760: CALL 68806 0 4
69764: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69765: LD_ADDR_VAR 0 11
69769: PUSH
69770: LD_VAR 0 1
69774: PPUSH
69775: LD_VAR 0 2
69779: PPUSH
69780: LD_VAR 0 12
69784: PUSH
69785: LD_INT 1
69787: ARRAY
69788: PPUSH
69789: LD_VAR 0 12
69793: PUSH
69794: LD_INT 2
69796: ARRAY
69797: PPUSH
69798: CALL_OW 298
69802: ST_TO_ADDR
// distance := 9999 ;
69803: LD_ADDR_VAR 0 10
69807: PUSH
69808: LD_INT 9999
69810: ST_TO_ADDR
// for i := 0 to 5 do
69811: LD_ADDR_VAR 0 6
69815: PUSH
69816: DOUBLE
69817: LD_INT 0
69819: DEC
69820: ST_TO_ADDR
69821: LD_INT 5
69823: PUSH
69824: FOR_TO
69825: IFFALSE 69968
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69827: LD_ADDR_VAR 0 7
69831: PUSH
69832: LD_VAR 0 1
69836: PPUSH
69837: LD_VAR 0 6
69841: PPUSH
69842: LD_VAR 0 11
69846: PPUSH
69847: CALL_OW 272
69851: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69852: LD_ADDR_VAR 0 8
69856: PUSH
69857: LD_VAR 0 2
69861: PPUSH
69862: LD_VAR 0 6
69866: PPUSH
69867: LD_VAR 0 11
69871: PPUSH
69872: CALL_OW 273
69876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69877: LD_VAR 0 7
69881: PPUSH
69882: LD_VAR 0 8
69886: PPUSH
69887: CALL_OW 488
69891: NOT
69892: IFFALSE 69896
// continue ;
69894: GO 69824
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69896: LD_ADDR_VAR 0 9
69900: PUSH
69901: LD_VAR 0 12
69905: PUSH
69906: LD_INT 1
69908: ARRAY
69909: PPUSH
69910: LD_VAR 0 12
69914: PUSH
69915: LD_INT 2
69917: ARRAY
69918: PPUSH
69919: LD_VAR 0 7
69923: PPUSH
69924: LD_VAR 0 8
69928: PPUSH
69929: CALL_OW 298
69933: ST_TO_ADDR
// if tmp < distance then
69934: LD_VAR 0 9
69938: PUSH
69939: LD_VAR 0 10
69943: LESS
69944: IFFALSE 69966
// begin result := i ;
69946: LD_ADDR_VAR 0 5
69950: PUSH
69951: LD_VAR 0 6
69955: ST_TO_ADDR
// distance := tmp ;
69956: LD_ADDR_VAR 0 10
69960: PUSH
69961: LD_VAR 0 9
69965: ST_TO_ADDR
// end ; end ;
69966: GO 69824
69968: POP
69969: POP
// end ;
69970: LD_VAR 0 5
69974: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69975: LD_INT 0
69977: PPUSH
69978: PPUSH
// if not driver or not IsInUnit ( driver ) then
69979: LD_VAR 0 1
69983: NOT
69984: IFTRUE 69998
69986: PUSH
69987: LD_VAR 0 1
69991: PPUSH
69992: CALL_OW 310
69996: NOT
69997: OR
69998: IFFALSE 70002
// exit ;
70000: GO 70092
// vehicle := IsInUnit ( driver ) ;
70002: LD_ADDR_VAR 0 3
70006: PUSH
70007: LD_VAR 0 1
70011: PPUSH
70012: CALL_OW 310
70016: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70017: LD_VAR 0 1
70021: PPUSH
70022: LD_STRING \
70024: PUSH
70025: LD_INT 0
70027: PUSH
70028: LD_INT 0
70030: PUSH
70031: LD_INT 0
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: LD_INT 0
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: PUSH
70052: LD_STRING E
70054: PUSH
70055: LD_INT 0
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_VAR 0 3
70065: PUSH
70066: LD_INT 0
70068: PUSH
70069: LD_INT 0
70071: PUSH
70072: LD_INT 0
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PPUSH
70088: CALL_OW 446
// end ;
70092: LD_VAR 0 2
70096: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70097: LD_INT 0
70099: PPUSH
70100: PPUSH
// if not driver or not IsInUnit ( driver ) then
70101: LD_VAR 0 1
70105: NOT
70106: IFTRUE 70120
70108: PUSH
70109: LD_VAR 0 1
70113: PPUSH
70114: CALL_OW 310
70118: NOT
70119: OR
70120: IFFALSE 70124
// exit ;
70122: GO 70214
// vehicle := IsInUnit ( driver ) ;
70124: LD_ADDR_VAR 0 3
70128: PUSH
70129: LD_VAR 0 1
70133: PPUSH
70134: CALL_OW 310
70138: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70139: LD_VAR 0 1
70143: PPUSH
70144: LD_STRING \
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: LD_INT 0
70152: PUSH
70153: LD_INT 0
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: LD_INT 0
70161: PUSH
70162: LD_INT 0
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: PUSH
70174: LD_STRING E
70176: PUSH
70177: LD_INT 0
70179: PUSH
70180: LD_INT 0
70182: PUSH
70183: LD_VAR 0 3
70187: PUSH
70188: LD_INT 0
70190: PUSH
70191: LD_INT 0
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PPUSH
70210: CALL_OW 447
// end ;
70214: LD_VAR 0 2
70218: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70219: LD_INT 0
70221: PPUSH
70222: PPUSH
70223: PPUSH
// tmp := [ ] ;
70224: LD_ADDR_VAR 0 5
70228: PUSH
70229: EMPTY
70230: ST_TO_ADDR
// for i in units do
70231: LD_ADDR_VAR 0 4
70235: PUSH
70236: LD_VAR 0 1
70240: PUSH
70241: FOR_IN
70242: IFFALSE 70280
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70244: LD_ADDR_VAR 0 5
70248: PUSH
70249: LD_VAR 0 5
70253: PPUSH
70254: LD_VAR 0 5
70258: PUSH
70259: LD_INT 1
70261: PLUS
70262: PPUSH
70263: LD_VAR 0 4
70267: PPUSH
70268: CALL_OW 256
70272: PPUSH
70273: CALL_OW 2
70277: ST_TO_ADDR
70278: GO 70241
70280: POP
70281: POP
// if not tmp then
70282: LD_VAR 0 5
70286: NOT
70287: IFFALSE 70291
// exit ;
70289: GO 70339
// if asc then
70291: LD_VAR 0 2
70295: IFFALSE 70319
// result := SortListByListAsc ( units , tmp ) else
70297: LD_ADDR_VAR 0 3
70301: PUSH
70302: LD_VAR 0 1
70306: PPUSH
70307: LD_VAR 0 5
70311: PPUSH
70312: CALL_OW 76
70316: ST_TO_ADDR
70317: GO 70339
// result := SortListByListDesc ( units , tmp ) ;
70319: LD_ADDR_VAR 0 3
70323: PUSH
70324: LD_VAR 0 1
70328: PPUSH
70329: LD_VAR 0 5
70333: PPUSH
70334: CALL_OW 77
70338: ST_TO_ADDR
// end ;
70339: LD_VAR 0 3
70343: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70344: LD_INT 0
70346: PPUSH
70347: PPUSH
// task := GetTaskList ( mech ) ;
70348: LD_ADDR_VAR 0 4
70352: PUSH
70353: LD_VAR 0 1
70357: PPUSH
70358: CALL_OW 437
70362: ST_TO_ADDR
// if not task then
70363: LD_VAR 0 4
70367: NOT
70368: IFFALSE 70372
// exit ;
70370: GO 70416
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70372: LD_ADDR_VAR 0 3
70376: PUSH
70377: LD_VAR 0 4
70381: PUSH
70382: LD_INT 1
70384: ARRAY
70385: PUSH
70386: LD_INT 1
70388: ARRAY
70389: PUSH
70390: LD_STRING r
70392: EQUAL
70393: IFFALSE 70415
70395: PUSH
70396: LD_VAR 0 4
70400: PUSH
70401: LD_INT 1
70403: ARRAY
70404: PUSH
70405: LD_INT 4
70407: ARRAY
70408: PUSH
70409: LD_VAR 0 2
70413: EQUAL
70414: AND
70415: ST_TO_ADDR
// end ;
70416: LD_VAR 0 3
70420: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70421: LD_INT 0
70423: PPUSH
// SetDir ( unit , d ) ;
70424: LD_VAR 0 1
70428: PPUSH
70429: LD_VAR 0 4
70433: PPUSH
70434: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70438: LD_ADDR_VAR 0 6
70442: PUSH
70443: LD_VAR 0 1
70447: PPUSH
70448: LD_VAR 0 2
70452: PPUSH
70453: LD_VAR 0 3
70457: PPUSH
70458: LD_VAR 0 5
70462: PPUSH
70463: CALL_OW 48
70467: ST_TO_ADDR
// end ;
70468: LD_VAR 0 6
70472: RET
// export function ToNaturalNumber ( number ) ; begin
70473: LD_INT 0
70475: PPUSH
// result := number div 1 ;
70476: LD_ADDR_VAR 0 2
70480: PUSH
70481: LD_VAR 0 1
70485: PUSH
70486: LD_INT 1
70488: DIV
70489: ST_TO_ADDR
// if number < 0 then
70490: LD_VAR 0 1
70494: PUSH
70495: LD_INT 0
70497: LESS
70498: IFFALSE 70508
// result := 0 ;
70500: LD_ADDR_VAR 0 2
70504: PUSH
70505: LD_INT 0
70507: ST_TO_ADDR
// end ;
70508: LD_VAR 0 2
70512: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
70513: LD_INT 0
70515: PPUSH
70516: PPUSH
70517: PPUSH
// if not buildings then
70518: LD_VAR 0 1
70522: NOT
70523: IFFALSE 70527
// exit ;
70525: GO 70642
// tmp := [ ] ;
70527: LD_ADDR_VAR 0 5
70531: PUSH
70532: EMPTY
70533: ST_TO_ADDR
// for b in buildings do
70534: LD_ADDR_VAR 0 4
70538: PUSH
70539: LD_VAR 0 1
70543: PUSH
70544: FOR_IN
70545: IFFALSE 70583
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
70547: LD_ADDR_VAR 0 5
70551: PUSH
70552: LD_VAR 0 5
70556: PPUSH
70557: LD_VAR 0 5
70561: PUSH
70562: LD_INT 1
70564: PLUS
70565: PPUSH
70566: LD_VAR 0 4
70570: PPUSH
70571: CALL_OW 266
70575: PPUSH
70576: CALL_OW 1
70580: ST_TO_ADDR
70581: GO 70544
70583: POP
70584: POP
// if not tmp then
70585: LD_VAR 0 5
70589: NOT
70590: IFFALSE 70594
// exit ;
70592: GO 70642
// if asc then
70594: LD_VAR 0 2
70598: IFFALSE 70622
// result := SortListByListAsc ( buildings , tmp ) else
70600: LD_ADDR_VAR 0 3
70604: PUSH
70605: LD_VAR 0 1
70609: PPUSH
70610: LD_VAR 0 5
70614: PPUSH
70615: CALL_OW 76
70619: ST_TO_ADDR
70620: GO 70642
// result := SortListByListDesc ( buildings , tmp ) ;
70622: LD_ADDR_VAR 0 3
70626: PUSH
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_VAR 0 5
70636: PPUSH
70637: CALL_OW 77
70641: ST_TO_ADDR
// end ;
70642: LD_VAR 0 3
70646: RET
// export function SortByClass ( units , class ) ; var un ; begin
70647: LD_INT 0
70649: PPUSH
70650: PPUSH
// if not units or not class then
70651: LD_VAR 0 1
70655: NOT
70656: IFTRUE 70665
70658: PUSH
70659: LD_VAR 0 2
70663: NOT
70664: OR
70665: IFFALSE 70669
// exit ;
70667: GO 70764
// result := [ ] ;
70669: LD_ADDR_VAR 0 3
70673: PUSH
70674: EMPTY
70675: ST_TO_ADDR
// for un in units do
70676: LD_ADDR_VAR 0 4
70680: PUSH
70681: LD_VAR 0 1
70685: PUSH
70686: FOR_IN
70687: IFFALSE 70762
// if GetClass ( un ) = class then
70689: LD_VAR 0 4
70693: PPUSH
70694: CALL_OW 257
70698: PUSH
70699: LD_VAR 0 2
70703: EQUAL
70704: IFFALSE 70731
// result := Insert ( result , 1 , un ) else
70706: LD_ADDR_VAR 0 3
70710: PUSH
70711: LD_VAR 0 3
70715: PPUSH
70716: LD_INT 1
70718: PPUSH
70719: LD_VAR 0 4
70723: PPUSH
70724: CALL_OW 2
70728: ST_TO_ADDR
70729: GO 70760
// result := Replace ( result , result + 1 , un ) ;
70731: LD_ADDR_VAR 0 3
70735: PUSH
70736: LD_VAR 0 3
70740: PPUSH
70741: LD_VAR 0 3
70745: PUSH
70746: LD_INT 1
70748: PLUS
70749: PPUSH
70750: LD_VAR 0 4
70754: PPUSH
70755: CALL_OW 1
70759: ST_TO_ADDR
70760: GO 70686
70762: POP
70763: POP
// end ;
70764: LD_VAR 0 3
70768: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70769: LD_INT 0
70771: PPUSH
70772: PPUSH
70773: PPUSH
70774: PPUSH
70775: PPUSH
70776: PPUSH
70777: PPUSH
// result := [ ] ;
70778: LD_ADDR_VAR 0 4
70782: PUSH
70783: EMPTY
70784: ST_TO_ADDR
// if x - r < 0 then
70785: LD_VAR 0 1
70789: PUSH
70790: LD_VAR 0 3
70794: MINUS
70795: PUSH
70796: LD_INT 0
70798: LESS
70799: IFFALSE 70811
// min_x := 0 else
70801: LD_ADDR_VAR 0 8
70805: PUSH
70806: LD_INT 0
70808: ST_TO_ADDR
70809: GO 70827
// min_x := x - r ;
70811: LD_ADDR_VAR 0 8
70815: PUSH
70816: LD_VAR 0 1
70820: PUSH
70821: LD_VAR 0 3
70825: MINUS
70826: ST_TO_ADDR
// if y - r < 0 then
70827: LD_VAR 0 2
70831: PUSH
70832: LD_VAR 0 3
70836: MINUS
70837: PUSH
70838: LD_INT 0
70840: LESS
70841: IFFALSE 70853
// min_y := 0 else
70843: LD_ADDR_VAR 0 7
70847: PUSH
70848: LD_INT 0
70850: ST_TO_ADDR
70851: GO 70869
// min_y := y - r ;
70853: LD_ADDR_VAR 0 7
70857: PUSH
70858: LD_VAR 0 2
70862: PUSH
70863: LD_VAR 0 3
70867: MINUS
70868: ST_TO_ADDR
// max_x := x + r ;
70869: LD_ADDR_VAR 0 9
70873: PUSH
70874: LD_VAR 0 1
70878: PUSH
70879: LD_VAR 0 3
70883: PLUS
70884: ST_TO_ADDR
// max_y := y + r ;
70885: LD_ADDR_VAR 0 10
70889: PUSH
70890: LD_VAR 0 2
70894: PUSH
70895: LD_VAR 0 3
70899: PLUS
70900: ST_TO_ADDR
// for _x = min_x to max_x do
70901: LD_ADDR_VAR 0 5
70905: PUSH
70906: DOUBLE
70907: LD_VAR 0 8
70911: DEC
70912: ST_TO_ADDR
70913: LD_VAR 0 9
70917: PUSH
70918: FOR_TO
70919: IFFALSE 71020
// for _y = min_y to max_y do
70921: LD_ADDR_VAR 0 6
70925: PUSH
70926: DOUBLE
70927: LD_VAR 0 7
70931: DEC
70932: ST_TO_ADDR
70933: LD_VAR 0 10
70937: PUSH
70938: FOR_TO
70939: IFFALSE 71016
// begin if not ValidHex ( _x , _y ) then
70941: LD_VAR 0 5
70945: PPUSH
70946: LD_VAR 0 6
70950: PPUSH
70951: CALL_OW 488
70955: NOT
70956: IFFALSE 70960
// continue ;
70958: GO 70938
// if GetResourceTypeXY ( _x , _y ) then
70960: LD_VAR 0 5
70964: PPUSH
70965: LD_VAR 0 6
70969: PPUSH
70970: CALL_OW 283
70974: IFFALSE 71014
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70976: LD_ADDR_VAR 0 4
70980: PUSH
70981: LD_VAR 0 4
70985: PPUSH
70986: LD_VAR 0 4
70990: PUSH
70991: LD_INT 1
70993: PLUS
70994: PPUSH
70995: LD_VAR 0 5
70999: PUSH
71000: LD_VAR 0 6
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PPUSH
71009: CALL_OW 1
71013: ST_TO_ADDR
// end ;
71014: GO 70938
71016: POP
71017: POP
71018: GO 70918
71020: POP
71021: POP
// end ;
71022: LD_VAR 0 4
71026: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71027: LD_INT 0
71029: PPUSH
71030: PPUSH
71031: PPUSH
71032: PPUSH
71033: PPUSH
71034: PPUSH
71035: PPUSH
71036: PPUSH
// if not units then
71037: LD_VAR 0 1
71041: NOT
71042: IFFALSE 71046
// exit ;
71044: GO 71578
// result := UnitFilter ( units , [ f_ok ] ) ;
71046: LD_ADDR_VAR 0 3
71050: PUSH
71051: LD_VAR 0 1
71055: PPUSH
71056: LD_INT 50
71058: PUSH
71059: EMPTY
71060: LIST
71061: PPUSH
71062: CALL_OW 72
71066: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71067: LD_ADDR_VAR 0 8
71071: PUSH
71072: LD_VAR 0 1
71076: PUSH
71077: LD_INT 1
71079: ARRAY
71080: PPUSH
71081: CALL_OW 255
71085: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71086: LD_ADDR_VAR 0 10
71090: PUSH
71091: LD_INT 29
71093: PUSH
71094: LD_INT 91
71096: PUSH
71097: LD_INT 49
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: LIST
71104: ST_TO_ADDR
// if not result then
71105: LD_VAR 0 3
71109: NOT
71110: IFFALSE 71114
// exit ;
71112: GO 71578
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71114: LD_ADDR_VAR 0 5
71118: PUSH
71119: LD_INT 81
71121: PUSH
71122: LD_VAR 0 8
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PPUSH
71131: CALL_OW 69
71135: ST_TO_ADDR
// for i in result do
71136: LD_ADDR_VAR 0 4
71140: PUSH
71141: LD_VAR 0 3
71145: PUSH
71146: FOR_IN
71147: IFFALSE 71576
// begin tag := GetTag ( i ) + 1 ;
71149: LD_ADDR_VAR 0 9
71153: PUSH
71154: LD_VAR 0 4
71158: PPUSH
71159: CALL_OW 110
71163: PUSH
71164: LD_INT 1
71166: PLUS
71167: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
71168: LD_ADDR_VAR 0 7
71172: PUSH
71173: LD_VAR 0 4
71177: PPUSH
71178: CALL_OW 250
71182: PPUSH
71183: LD_VAR 0 4
71187: PPUSH
71188: CALL_OW 251
71192: PPUSH
71193: LD_INT 4
71195: PPUSH
71196: CALL 70769 0 3
71200: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
71201: LD_VAR 0 4
71205: PPUSH
71206: CALL_OW 247
71210: PUSH
71211: LD_INT 2
71213: EQUAL
71214: IFFALSE 71226
71216: PUSH
71217: LD_VAR 0 7
71221: PUSH
71222: LD_INT 2
71224: GREATER
71225: AND
71226: IFFALSE 71246
71228: PUSH
71229: LD_VAR 0 4
71233: PPUSH
71234: CALL_OW 264
71238: PUSH
71239: LD_VAR 0 10
71243: IN
71244: NOT
71245: AND
71246: IFFALSE 71285
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71248: LD_VAR 0 4
71252: PPUSH
71253: LD_VAR 0 7
71257: PUSH
71258: LD_INT 1
71260: ARRAY
71261: PUSH
71262: LD_INT 1
71264: ARRAY
71265: PPUSH
71266: LD_VAR 0 7
71270: PUSH
71271: LD_INT 1
71273: ARRAY
71274: PUSH
71275: LD_INT 2
71277: ARRAY
71278: PPUSH
71279: CALL_OW 116
71283: GO 71574
// if path > tag then
71285: LD_VAR 0 2
71289: PUSH
71290: LD_VAR 0 9
71294: GREATER
71295: IFFALSE 71503
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71297: LD_ADDR_VAR 0 6
71301: PUSH
71302: LD_VAR 0 5
71306: PPUSH
71307: LD_INT 91
71309: PUSH
71310: LD_VAR 0 4
71314: PUSH
71315: LD_INT 8
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: PPUSH
71323: CALL_OW 72
71327: ST_TO_ADDR
// if nearEnemy then
71328: LD_VAR 0 6
71332: IFFALSE 71401
// begin if GetWeapon ( i ) = ru_time_lapser then
71334: LD_VAR 0 4
71338: PPUSH
71339: CALL_OW 264
71343: PUSH
71344: LD_INT 49
71346: EQUAL
71347: IFFALSE 71375
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71349: LD_VAR 0 4
71353: PPUSH
71354: LD_VAR 0 6
71358: PPUSH
71359: LD_VAR 0 4
71363: PPUSH
71364: CALL_OW 74
71368: PPUSH
71369: CALL_OW 112
71373: GO 71399
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71375: LD_VAR 0 4
71379: PPUSH
71380: LD_VAR 0 6
71384: PPUSH
71385: LD_VAR 0 4
71389: PPUSH
71390: CALL_OW 74
71394: PPUSH
71395: CALL 72659 0 2
// end else
71399: GO 71501
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
71401: LD_VAR 0 4
71405: PPUSH
71406: LD_VAR 0 2
71410: PUSH
71411: LD_VAR 0 9
71415: ARRAY
71416: PUSH
71417: LD_INT 1
71419: ARRAY
71420: PPUSH
71421: LD_VAR 0 2
71425: PUSH
71426: LD_VAR 0 9
71430: ARRAY
71431: PUSH
71432: LD_INT 2
71434: ARRAY
71435: PPUSH
71436: CALL_OW 297
71440: PUSH
71441: LD_INT 6
71443: GREATER
71444: IFFALSE 71487
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71446: LD_VAR 0 4
71450: PPUSH
71451: LD_VAR 0 2
71455: PUSH
71456: LD_VAR 0 9
71460: ARRAY
71461: PUSH
71462: LD_INT 1
71464: ARRAY
71465: PPUSH
71466: LD_VAR 0 2
71470: PUSH
71471: LD_VAR 0 9
71475: ARRAY
71476: PUSH
71477: LD_INT 2
71479: ARRAY
71480: PPUSH
71481: CALL_OW 114
71485: GO 71501
// SetTag ( i , tag ) ;
71487: LD_VAR 0 4
71491: PPUSH
71492: LD_VAR 0 9
71496: PPUSH
71497: CALL_OW 109
// end else
71501: GO 71574
// if enemy then
71503: LD_VAR 0 5
71507: IFFALSE 71574
// begin if GetWeapon ( i ) = ru_time_lapser then
71509: LD_VAR 0 4
71513: PPUSH
71514: CALL_OW 264
71518: PUSH
71519: LD_INT 49
71521: EQUAL
71522: IFFALSE 71550
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71524: LD_VAR 0 4
71528: PPUSH
71529: LD_VAR 0 5
71533: PPUSH
71534: LD_VAR 0 4
71538: PPUSH
71539: CALL_OW 74
71543: PPUSH
71544: CALL_OW 112
71548: GO 71574
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71550: LD_VAR 0 4
71554: PPUSH
71555: LD_VAR 0 5
71559: PPUSH
71560: LD_VAR 0 4
71564: PPUSH
71565: CALL_OW 74
71569: PPUSH
71570: CALL 72659 0 2
// end ; end ;
71574: GO 71146
71576: POP
71577: POP
// end ;
71578: LD_VAR 0 3
71582: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71583: LD_INT 0
71585: PPUSH
71586: PPUSH
71587: PPUSH
// if not unit or IsInUnit ( unit ) then
71588: LD_VAR 0 1
71592: NOT
71593: IFTRUE 71606
71595: PUSH
71596: LD_VAR 0 1
71600: PPUSH
71601: CALL_OW 310
71605: OR
71606: IFFALSE 71610
// exit ;
71608: GO 71701
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71610: LD_ADDR_VAR 0 4
71614: PUSH
71615: LD_VAR 0 1
71619: PPUSH
71620: CALL_OW 250
71624: PPUSH
71625: LD_VAR 0 2
71629: PPUSH
71630: LD_INT 1
71632: PPUSH
71633: CALL_OW 272
71637: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71638: LD_ADDR_VAR 0 5
71642: PUSH
71643: LD_VAR 0 1
71647: PPUSH
71648: CALL_OW 251
71652: PPUSH
71653: LD_VAR 0 2
71657: PPUSH
71658: LD_INT 1
71660: PPUSH
71661: CALL_OW 273
71665: ST_TO_ADDR
// if ValidHex ( x , y ) then
71666: LD_VAR 0 4
71670: PPUSH
71671: LD_VAR 0 5
71675: PPUSH
71676: CALL_OW 488
71680: IFFALSE 71701
// ComTurnXY ( unit , x , y ) ;
71682: LD_VAR 0 1
71686: PPUSH
71687: LD_VAR 0 4
71691: PPUSH
71692: LD_VAR 0 5
71696: PPUSH
71697: CALL_OW 118
// end ;
71701: LD_VAR 0 3
71705: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71706: LD_INT 0
71708: PPUSH
71709: PPUSH
// result := false ;
71710: LD_ADDR_VAR 0 3
71714: PUSH
71715: LD_INT 0
71717: ST_TO_ADDR
// if not units then
71718: LD_VAR 0 2
71722: NOT
71723: IFFALSE 71727
// exit ;
71725: GO 71772
// for i in units do
71727: LD_ADDR_VAR 0 4
71731: PUSH
71732: LD_VAR 0 2
71736: PUSH
71737: FOR_IN
71738: IFFALSE 71770
// if See ( side , i ) then
71740: LD_VAR 0 1
71744: PPUSH
71745: LD_VAR 0 4
71749: PPUSH
71750: CALL_OW 292
71754: IFFALSE 71768
// begin result := true ;
71756: LD_ADDR_VAR 0 3
71760: PUSH
71761: LD_INT 1
71763: ST_TO_ADDR
// exit ;
71764: POP
71765: POP
71766: GO 71772
// end ;
71768: GO 71737
71770: POP
71771: POP
// end ;
71772: LD_VAR 0 3
71776: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71777: LD_INT 0
71779: PPUSH
71780: PPUSH
71781: PPUSH
71782: PPUSH
// if not unit or not points then
71783: LD_VAR 0 1
71787: NOT
71788: IFTRUE 71797
71790: PUSH
71791: LD_VAR 0 2
71795: NOT
71796: OR
71797: IFFALSE 71801
// exit ;
71799: GO 71891
// dist := 99999 ;
71801: LD_ADDR_VAR 0 5
71805: PUSH
71806: LD_INT 99999
71808: ST_TO_ADDR
// for i in points do
71809: LD_ADDR_VAR 0 4
71813: PUSH
71814: LD_VAR 0 2
71818: PUSH
71819: FOR_IN
71820: IFFALSE 71889
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71822: LD_ADDR_VAR 0 6
71826: PUSH
71827: LD_VAR 0 1
71831: PPUSH
71832: LD_VAR 0 4
71836: PUSH
71837: LD_INT 1
71839: ARRAY
71840: PPUSH
71841: LD_VAR 0 4
71845: PUSH
71846: LD_INT 2
71848: ARRAY
71849: PPUSH
71850: CALL_OW 297
71854: ST_TO_ADDR
// if tmpDist < dist then
71855: LD_VAR 0 6
71859: PUSH
71860: LD_VAR 0 5
71864: LESS
71865: IFFALSE 71887
// begin result := i ;
71867: LD_ADDR_VAR 0 3
71871: PUSH
71872: LD_VAR 0 4
71876: ST_TO_ADDR
// dist := tmpDist ;
71877: LD_ADDR_VAR 0 5
71881: PUSH
71882: LD_VAR 0 6
71886: ST_TO_ADDR
// end ; end ;
71887: GO 71819
71889: POP
71890: POP
// end ;
71891: LD_VAR 0 3
71895: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71896: LD_INT 0
71898: PPUSH
// uc_side := side ;
71899: LD_ADDR_OWVAR 20
71903: PUSH
71904: LD_VAR 0 1
71908: ST_TO_ADDR
// uc_nation := 3 ;
71909: LD_ADDR_OWVAR 21
71913: PUSH
71914: LD_INT 3
71916: ST_TO_ADDR
// vc_chassis := 25 ;
71917: LD_ADDR_OWVAR 37
71921: PUSH
71922: LD_INT 25
71924: ST_TO_ADDR
// vc_engine := engine_siberite ;
71925: LD_ADDR_OWVAR 39
71929: PUSH
71930: LD_INT 3
71932: ST_TO_ADDR
// vc_control := control_computer ;
71933: LD_ADDR_OWVAR 38
71937: PUSH
71938: LD_INT 3
71940: ST_TO_ADDR
// vc_weapon := 59 ;
71941: LD_ADDR_OWVAR 40
71945: PUSH
71946: LD_INT 59
71948: ST_TO_ADDR
// result := CreateVehicle ;
71949: LD_ADDR_VAR 0 5
71953: PUSH
71954: CALL_OW 45
71958: ST_TO_ADDR
// SetDir ( result , d ) ;
71959: LD_VAR 0 5
71963: PPUSH
71964: LD_VAR 0 4
71968: PPUSH
71969: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71973: LD_VAR 0 5
71977: PPUSH
71978: LD_VAR 0 2
71982: PPUSH
71983: LD_VAR 0 3
71987: PPUSH
71988: LD_INT 0
71990: PPUSH
71991: CALL_OW 48
// end ;
71995: LD_VAR 0 5
71999: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72000: LD_INT 0
72002: PPUSH
72003: PPUSH
72004: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72005: LD_ADDR_VAR 0 2
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: LD_INT 0
72018: PUSH
72019: LD_INT 0
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: LIST
72026: LIST
72027: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72028: LD_VAR 0 1
72032: NOT
72033: IFTRUE 72066
72035: PUSH
72036: LD_VAR 0 1
72040: PPUSH
72041: CALL_OW 264
72045: PUSH
72046: LD_INT 12
72048: PUSH
72049: LD_INT 51
72051: PUSH
72052: LD_INT 32
72054: PUSH
72055: LD_INT 89
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: LIST
72062: LIST
72063: IN
72064: NOT
72065: OR
72066: IFFALSE 72070
// exit ;
72068: GO 72168
// for i := 1 to 3 do
72070: LD_ADDR_VAR 0 3
72074: PUSH
72075: DOUBLE
72076: LD_INT 1
72078: DEC
72079: ST_TO_ADDR
72080: LD_INT 3
72082: PUSH
72083: FOR_TO
72084: IFFALSE 72166
// begin tmp := GetCargo ( cargo , i ) ;
72086: LD_ADDR_VAR 0 4
72090: PUSH
72091: LD_VAR 0 1
72095: PPUSH
72096: LD_VAR 0 3
72100: PPUSH
72101: CALL_OW 289
72105: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72106: LD_ADDR_VAR 0 2
72110: PUSH
72111: LD_VAR 0 2
72115: PPUSH
72116: LD_VAR 0 3
72120: PPUSH
72121: LD_VAR 0 4
72125: PPUSH
72126: CALL_OW 1
72130: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72131: LD_ADDR_VAR 0 2
72135: PUSH
72136: LD_VAR 0 2
72140: PPUSH
72141: LD_INT 4
72143: PPUSH
72144: LD_VAR 0 2
72148: PUSH
72149: LD_INT 4
72151: ARRAY
72152: PUSH
72153: LD_VAR 0 4
72157: PLUS
72158: PPUSH
72159: CALL_OW 1
72163: ST_TO_ADDR
// end ;
72164: GO 72083
72166: POP
72167: POP
// end ;
72168: LD_VAR 0 2
72172: RET
// export function Length ( array ) ; begin
72173: LD_INT 0
72175: PPUSH
// result := array + 0 ;
72176: LD_ADDR_VAR 0 2
72180: PUSH
72181: LD_VAR 0 1
72185: PUSH
72186: LD_INT 0
72188: PLUS
72189: ST_TO_ADDR
// end ;
72190: LD_VAR 0 2
72194: RET
// export function PrepareArray ( array ) ; begin
72195: LD_INT 0
72197: PPUSH
// result := array diff 0 ;
72198: LD_ADDR_VAR 0 2
72202: PUSH
72203: LD_VAR 0 1
72207: PUSH
72208: LD_INT 0
72210: DIFF
72211: ST_TO_ADDR
// if not result [ 1 ] then
72212: LD_VAR 0 2
72216: PUSH
72217: LD_INT 1
72219: ARRAY
72220: NOT
72221: IFFALSE 72241
// result := Delete ( result , 1 ) ;
72223: LD_ADDR_VAR 0 2
72227: PUSH
72228: LD_VAR 0 2
72232: PPUSH
72233: LD_INT 1
72235: PPUSH
72236: CALL_OW 3
72240: ST_TO_ADDR
// end ;
72241: LD_VAR 0 2
72245: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72246: LD_INT 0
72248: PPUSH
72249: PPUSH
72250: PPUSH
72251: PPUSH
// sibRocketRange := 25 ;
72252: LD_ADDR_VAR 0 6
72256: PUSH
72257: LD_INT 25
72259: ST_TO_ADDR
// result := false ;
72260: LD_ADDR_VAR 0 4
72264: PUSH
72265: LD_INT 0
72267: ST_TO_ADDR
// for i := 0 to 5 do
72268: LD_ADDR_VAR 0 5
72272: PUSH
72273: DOUBLE
72274: LD_INT 0
72276: DEC
72277: ST_TO_ADDR
72278: LD_INT 5
72280: PUSH
72281: FOR_TO
72282: IFFALSE 72349
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72284: LD_VAR 0 1
72288: PPUSH
72289: LD_VAR 0 5
72293: PPUSH
72294: LD_VAR 0 6
72298: PPUSH
72299: CALL_OW 272
72303: PPUSH
72304: LD_VAR 0 2
72308: PPUSH
72309: LD_VAR 0 5
72313: PPUSH
72314: LD_VAR 0 6
72318: PPUSH
72319: CALL_OW 273
72323: PPUSH
72324: LD_VAR 0 3
72328: PPUSH
72329: CALL_OW 309
72333: IFFALSE 72347
// begin result := true ;
72335: LD_ADDR_VAR 0 4
72339: PUSH
72340: LD_INT 1
72342: ST_TO_ADDR
// exit ;
72343: POP
72344: POP
72345: GO 72351
// end ;
72347: GO 72281
72349: POP
72350: POP
// end ;
72351: LD_VAR 0 4
72355: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
72356: LD_INT 0
72358: PPUSH
72359: PPUSH
72360: PPUSH
// if btype = b_depot then
72361: LD_VAR 0 2
72365: PUSH
72366: LD_INT 0
72368: EQUAL
72369: IFFALSE 72381
// begin result := true ;
72371: LD_ADDR_VAR 0 3
72375: PUSH
72376: LD_INT 1
72378: ST_TO_ADDR
// exit ;
72379: GO 72501
// end ; pom := GetBase ( depot ) ;
72381: LD_ADDR_VAR 0 4
72385: PUSH
72386: LD_VAR 0 1
72390: PPUSH
72391: CALL_OW 274
72395: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
72396: LD_ADDR_VAR 0 5
72400: PUSH
72401: LD_VAR 0 2
72405: PPUSH
72406: LD_VAR 0 1
72410: PPUSH
72411: CALL_OW 248
72415: PPUSH
72416: CALL_OW 450
72420: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
72421: LD_ADDR_VAR 0 3
72425: PUSH
72426: LD_VAR 0 4
72430: PPUSH
72431: LD_INT 1
72433: PPUSH
72434: CALL_OW 275
72438: PUSH
72439: LD_VAR 0 5
72443: PUSH
72444: LD_INT 1
72446: ARRAY
72447: GREATEREQUAL
72448: IFFALSE 72474
72450: PUSH
72451: LD_VAR 0 4
72455: PPUSH
72456: LD_INT 2
72458: PPUSH
72459: CALL_OW 275
72463: PUSH
72464: LD_VAR 0 5
72468: PUSH
72469: LD_INT 2
72471: ARRAY
72472: GREATEREQUAL
72473: AND
72474: IFFALSE 72500
72476: PUSH
72477: LD_VAR 0 4
72481: PPUSH
72482: LD_INT 3
72484: PPUSH
72485: CALL_OW 275
72489: PUSH
72490: LD_VAR 0 5
72494: PUSH
72495: LD_INT 3
72497: ARRAY
72498: GREATEREQUAL
72499: AND
72500: ST_TO_ADDR
// end ;
72501: LD_VAR 0 3
72505: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72506: LD_INT 0
72508: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72509: LD_VAR 0 1
72513: PPUSH
72514: LD_VAR 0 2
72518: PPUSH
72519: LD_INT 0
72521: PPUSH
72522: LD_INT 0
72524: PPUSH
72525: LD_INT 1
72527: PPUSH
72528: LD_INT 0
72530: PPUSH
72531: CALL_OW 587
// end ;
72535: LD_VAR 0 3
72539: RET
// export function CenterOnNow ( unit ) ; begin
72540: LD_INT 0
72542: PPUSH
// result := IsInUnit ( unit ) ;
72543: LD_ADDR_VAR 0 2
72547: PUSH
72548: LD_VAR 0 1
72552: PPUSH
72553: CALL_OW 310
72557: ST_TO_ADDR
// if not result then
72558: LD_VAR 0 2
72562: NOT
72563: IFFALSE 72575
// result := unit ;
72565: LD_ADDR_VAR 0 2
72569: PUSH
72570: LD_VAR 0 1
72574: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72575: LD_VAR 0 1
72579: PPUSH
72580: CALL_OW 87
// end ;
72584: LD_VAR 0 2
72588: RET
// export function ComMoveHex ( unit , hex ) ; begin
72589: LD_INT 0
72591: PPUSH
// if not hex then
72592: LD_VAR 0 2
72596: NOT
72597: IFFALSE 72601
// exit ;
72599: GO 72654
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72601: LD_VAR 0 2
72605: PUSH
72606: LD_INT 1
72608: ARRAY
72609: PPUSH
72610: LD_VAR 0 2
72614: PUSH
72615: LD_INT 2
72617: ARRAY
72618: PPUSH
72619: CALL_OW 428
72623: IFFALSE 72627
// exit ;
72625: GO 72654
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72627: LD_VAR 0 1
72631: PPUSH
72632: LD_VAR 0 2
72636: PUSH
72637: LD_INT 1
72639: ARRAY
72640: PPUSH
72641: LD_VAR 0 2
72645: PUSH
72646: LD_INT 2
72648: ARRAY
72649: PPUSH
72650: CALL_OW 111
// end ;
72654: LD_VAR 0 3
72658: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72659: LD_INT 0
72661: PPUSH
72662: PPUSH
72663: PPUSH
// if not unit or not enemy then
72664: LD_VAR 0 1
72668: NOT
72669: IFTRUE 72678
72671: PUSH
72672: LD_VAR 0 2
72676: NOT
72677: OR
72678: IFFALSE 72682
// exit ;
72680: GO 72808
// x := GetX ( enemy ) ;
72682: LD_ADDR_VAR 0 4
72686: PUSH
72687: LD_VAR 0 2
72691: PPUSH
72692: CALL_OW 250
72696: ST_TO_ADDR
// y := GetY ( enemy ) ;
72697: LD_ADDR_VAR 0 5
72701: PUSH
72702: LD_VAR 0 2
72706: PPUSH
72707: CALL_OW 251
72711: ST_TO_ADDR
// if ValidHex ( x , y ) then
72712: LD_VAR 0 4
72716: PPUSH
72717: LD_VAR 0 5
72721: PPUSH
72722: CALL_OW 488
72726: IFFALSE 72808
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72728: LD_VAR 0 2
72732: PPUSH
72733: CALL_OW 247
72737: PUSH
72738: LD_INT 3
72740: PUSH
72741: LD_INT 2
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: IN
72748: IFTRUE 72771
72750: PUSH
72751: LD_VAR 0 1
72755: PPUSH
72756: CALL_OW 255
72760: PPUSH
72761: LD_VAR 0 2
72765: PPUSH
72766: CALL_OW 292
72770: OR
72771: IFFALSE 72789
// ComAttackUnit ( unit , enemy ) else
72773: LD_VAR 0 1
72777: PPUSH
72778: LD_VAR 0 2
72782: PPUSH
72783: CALL_OW 115
72787: GO 72808
// ComAgressiveMove ( unit , x , y ) ;
72789: LD_VAR 0 1
72793: PPUSH
72794: LD_VAR 0 4
72798: PPUSH
72799: LD_VAR 0 5
72803: PPUSH
72804: CALL_OW 114
// end ;
72808: LD_VAR 0 3
72812: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72813: LD_INT 0
72815: PPUSH
72816: PPUSH
72817: PPUSH
// list := AreaToList ( area , 0 ) ;
72818: LD_ADDR_VAR 0 5
72822: PUSH
72823: LD_VAR 0 1
72827: PPUSH
72828: LD_INT 0
72830: PPUSH
72831: CALL_OW 517
72835: ST_TO_ADDR
// if not list then
72836: LD_VAR 0 5
72840: NOT
72841: IFFALSE 72845
// exit ;
72843: GO 72975
// if all then
72845: LD_VAR 0 2
72849: IFFALSE 72937
// begin for i := 1 to list [ 1 ] do
72851: LD_ADDR_VAR 0 4
72855: PUSH
72856: DOUBLE
72857: LD_INT 1
72859: DEC
72860: ST_TO_ADDR
72861: LD_VAR 0 5
72865: PUSH
72866: LD_INT 1
72868: ARRAY
72869: PUSH
72870: FOR_TO
72871: IFFALSE 72933
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72873: LD_ADDR_VAR 0 3
72877: PUSH
72878: LD_VAR 0 3
72882: PPUSH
72883: LD_VAR 0 3
72887: PUSH
72888: LD_INT 1
72890: PLUS
72891: PPUSH
72892: LD_VAR 0 5
72896: PUSH
72897: LD_INT 1
72899: ARRAY
72900: PUSH
72901: LD_VAR 0 4
72905: ARRAY
72906: PUSH
72907: LD_VAR 0 5
72911: PUSH
72912: LD_INT 2
72914: ARRAY
72915: PUSH
72916: LD_VAR 0 4
72920: ARRAY
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PPUSH
72926: CALL_OW 1
72930: ST_TO_ADDR
72931: GO 72870
72933: POP
72934: POP
// exit ;
72935: GO 72975
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72937: LD_ADDR_VAR 0 3
72941: PUSH
72942: LD_VAR 0 5
72946: PUSH
72947: LD_INT 1
72949: ARRAY
72950: PUSH
72951: LD_INT 1
72953: ARRAY
72954: PUSH
72955: LD_VAR 0 5
72959: PUSH
72960: LD_INT 2
72962: ARRAY
72963: PUSH
72964: LD_INT 1
72966: ARRAY
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: EMPTY
72973: LIST
72974: ST_TO_ADDR
// end ;
72975: LD_VAR 0 3
72979: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72980: LD_INT 0
72982: PPUSH
72983: PPUSH
// list := AreaToList ( area , 0 ) ;
72984: LD_ADDR_VAR 0 4
72988: PUSH
72989: LD_VAR 0 1
72993: PPUSH
72994: LD_INT 0
72996: PPUSH
72997: CALL_OW 517
73001: ST_TO_ADDR
// if not list then
73002: LD_VAR 0 4
73006: NOT
73007: IFFALSE 73011
// exit ;
73009: GO 73052
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73011: LD_ADDR_VAR 0 3
73015: PUSH
73016: LD_VAR 0 4
73020: PUSH
73021: LD_INT 1
73023: ARRAY
73024: PUSH
73025: LD_INT 1
73027: ARRAY
73028: PUSH
73029: LD_VAR 0 4
73033: PUSH
73034: LD_INT 2
73036: ARRAY
73037: PUSH
73038: LD_INT 1
73040: ARRAY
73041: PUSH
73042: LD_VAR 0 2
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: LIST
73051: ST_TO_ADDR
// end ;
73052: LD_VAR 0 3
73056: RET
// export function First ( array ) ; begin
73057: LD_INT 0
73059: PPUSH
// if not array then
73060: LD_VAR 0 1
73064: NOT
73065: IFFALSE 73069
// exit ;
73067: GO 73083
// result := array [ 1 ] ;
73069: LD_ADDR_VAR 0 2
73073: PUSH
73074: LD_VAR 0 1
73078: PUSH
73079: LD_INT 1
73081: ARRAY
73082: ST_TO_ADDR
// end ;
73083: LD_VAR 0 2
73087: RET
// export function Last ( array ) ; begin
73088: LD_INT 0
73090: PPUSH
// if not array then
73091: LD_VAR 0 1
73095: NOT
73096: IFFALSE 73100
// exit ;
73098: GO 73116
// result := array [ array ] ;
73100: LD_ADDR_VAR 0 2
73104: PUSH
73105: LD_VAR 0 1
73109: PUSH
73110: LD_VAR 0 1
73114: ARRAY
73115: ST_TO_ADDR
// end ;
73116: LD_VAR 0 2
73120: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
73121: LD_INT 0
73123: PPUSH
73124: PPUSH
// result := [ ] ;
73125: LD_ADDR_VAR 0 5
73129: PUSH
73130: EMPTY
73131: ST_TO_ADDR
// if not array then
73132: LD_VAR 0 1
73136: NOT
73137: IFFALSE 73141
// exit ;
73139: GO 73253
// for i := 1 to array do
73141: LD_ADDR_VAR 0 6
73145: PUSH
73146: DOUBLE
73147: LD_INT 1
73149: DEC
73150: ST_TO_ADDR
73151: LD_VAR 0 1
73155: PUSH
73156: FOR_TO
73157: IFFALSE 73251
// if array [ i ] [ index ] = value then
73159: LD_VAR 0 1
73163: PUSH
73164: LD_VAR 0 6
73168: ARRAY
73169: PUSH
73170: LD_VAR 0 2
73174: ARRAY
73175: PUSH
73176: LD_VAR 0 3
73180: EQUAL
73181: IFFALSE 73249
// begin if indexColumn then
73183: LD_VAR 0 4
73187: IFFALSE 73223
// result := Join ( result , array [ i ] [ indexColumn ] ) else
73189: LD_ADDR_VAR 0 5
73193: PUSH
73194: LD_VAR 0 5
73198: PPUSH
73199: LD_VAR 0 1
73203: PUSH
73204: LD_VAR 0 6
73208: ARRAY
73209: PUSH
73210: LD_VAR 0 4
73214: ARRAY
73215: PPUSH
73216: CALL 68261 0 2
73220: ST_TO_ADDR
73221: GO 73249
// result := Join ( result , array [ i ] ) ;
73223: LD_ADDR_VAR 0 5
73227: PUSH
73228: LD_VAR 0 5
73232: PPUSH
73233: LD_VAR 0 1
73237: PUSH
73238: LD_VAR 0 6
73242: ARRAY
73243: PPUSH
73244: CALL 68261 0 2
73248: ST_TO_ADDR
// end ;
73249: GO 73156
73251: POP
73252: POP
// end ;
73253: LD_VAR 0 5
73257: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
73258: LD_INT 0
73260: PPUSH
// if not vehicles or not parkingPoint then
73261: LD_VAR 0 1
73265: NOT
73266: IFTRUE 73275
73268: PUSH
73269: LD_VAR 0 2
73273: NOT
73274: OR
73275: IFFALSE 73279
// exit ;
73277: GO 73377
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
73279: LD_ADDR_VAR 0 1
73283: PUSH
73284: LD_VAR 0 1
73288: PPUSH
73289: LD_INT 50
73291: PUSH
73292: EMPTY
73293: LIST
73294: PUSH
73295: LD_INT 3
73297: PUSH
73298: LD_INT 92
73300: PUSH
73301: LD_VAR 0 2
73305: PUSH
73306: LD_INT 1
73308: ARRAY
73309: PUSH
73310: LD_VAR 0 2
73314: PUSH
73315: LD_INT 2
73317: ARRAY
73318: PUSH
73319: LD_INT 8
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PPUSH
73336: CALL_OW 72
73340: ST_TO_ADDR
// if not vehicles then
73341: LD_VAR 0 1
73345: NOT
73346: IFFALSE 73350
// exit ;
73348: GO 73377
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
73350: LD_VAR 0 1
73354: PPUSH
73355: LD_VAR 0 2
73359: PUSH
73360: LD_INT 1
73362: ARRAY
73363: PPUSH
73364: LD_VAR 0 2
73368: PUSH
73369: LD_INT 2
73371: ARRAY
73372: PPUSH
73373: CALL_OW 111
// end ;
73377: LD_VAR 0 3
73381: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
73382: LD_INT 0
73384: PPUSH
73385: PPUSH
73386: PPUSH
// if not side or not area then
73387: LD_VAR 0 1
73391: NOT
73392: IFTRUE 73401
73394: PUSH
73395: LD_VAR 0 2
73399: NOT
73400: OR
73401: IFFALSE 73405
// exit ;
73403: GO 73524
// tmp := AreaToList ( area , 0 ) ;
73405: LD_ADDR_VAR 0 5
73409: PUSH
73410: LD_VAR 0 2
73414: PPUSH
73415: LD_INT 0
73417: PPUSH
73418: CALL_OW 517
73422: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
73423: LD_ADDR_VAR 0 4
73427: PUSH
73428: DOUBLE
73429: LD_INT 1
73431: DEC
73432: ST_TO_ADDR
73433: LD_VAR 0 5
73437: PUSH
73438: LD_INT 1
73440: ARRAY
73441: PUSH
73442: FOR_TO
73443: IFFALSE 73522
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
73445: LD_VAR 0 5
73449: PUSH
73450: LD_INT 1
73452: ARRAY
73453: PUSH
73454: LD_VAR 0 4
73458: ARRAY
73459: PPUSH
73460: LD_VAR 0 5
73464: PUSH
73465: LD_INT 2
73467: ARRAY
73468: PUSH
73469: LD_VAR 0 4
73473: ARRAY
73474: PPUSH
73475: CALL_OW 351
73479: IFFALSE 73520
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73481: LD_VAR 0 5
73485: PUSH
73486: LD_INT 1
73488: ARRAY
73489: PUSH
73490: LD_VAR 0 4
73494: ARRAY
73495: PPUSH
73496: LD_VAR 0 5
73500: PUSH
73501: LD_INT 2
73503: ARRAY
73504: PUSH
73505: LD_VAR 0 4
73509: ARRAY
73510: PPUSH
73511: LD_VAR 0 1
73515: PPUSH
73516: CALL_OW 244
// end ;
73520: GO 73442
73522: POP
73523: POP
// end ;
73524: LD_VAR 0 3
73528: RET
// export function UniqueArray ( array ) ; var i ; begin
73529: LD_INT 0
73531: PPUSH
73532: PPUSH
// result := [ ] ;
73533: LD_ADDR_VAR 0 2
73537: PUSH
73538: EMPTY
73539: ST_TO_ADDR
// if not array then
73540: LD_VAR 0 1
73544: NOT
73545: IFFALSE 73549
// exit ;
73547: GO 73610
// for i := 1 to array do
73549: LD_ADDR_VAR 0 3
73553: PUSH
73554: DOUBLE
73555: LD_INT 1
73557: DEC
73558: ST_TO_ADDR
73559: LD_VAR 0 1
73563: PUSH
73564: FOR_TO
73565: IFFALSE 73608
// if not array [ i ] in result then
73567: LD_VAR 0 1
73571: PUSH
73572: LD_VAR 0 3
73576: ARRAY
73577: PUSH
73578: LD_VAR 0 2
73582: IN
73583: NOT
73584: IFFALSE 73606
// result := Join ( result , i ) ;
73586: LD_ADDR_VAR 0 2
73590: PUSH
73591: LD_VAR 0 2
73595: PPUSH
73596: LD_VAR 0 3
73600: PPUSH
73601: CALL 68261 0 2
73605: ST_TO_ADDR
73606: GO 73564
73608: POP
73609: POP
// end ; end_of_file
73610: LD_VAR 0 2
73614: RET
// export globalGameSaveCounter ; every 0 0$1 do
73615: GO 73617
73617: DISABLE
// begin enable ;
73618: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
73619: LD_STRING updateTimer(
73621: PUSH
73622: LD_OWVAR 1
73626: STR
73627: PUSH
73628: LD_STRING );
73630: STR
73631: PPUSH
73632: CALL_OW 559
// end ;
73636: END
// every 0 0$1 do
73637: GO 73639
73639: DISABLE
// begin globalGameSaveCounter := 0 ;
73640: LD_ADDR_EXP 74
73644: PUSH
73645: LD_INT 0
73647: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
73648: LD_STRING setGameSaveCounter(0)
73650: PPUSH
73651: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
73655: LD_STRING initStreamRollete();
73657: PPUSH
73658: CALL_OW 559
// InitStreamMode ;
73662: CALL 75007 0 0
// DefineStreamItems ( false ) ;
73666: LD_INT 0
73668: PPUSH
73669: CALL 75471 0 1
// end ;
73673: END
// export function SOS_MapStart ( ) ; begin
73674: LD_INT 0
73676: PPUSH
// if streamModeActive then
73677: LD_EXP 75
73681: IFFALSE 73690
// DefineStreamItems ( true ) ;
73683: LD_INT 1
73685: PPUSH
73686: CALL 75471 0 1
// UpdateLuaVariables ( ) ;
73690: CALL 73707 0 0
// UpdateFactoryWaypoints ( ) ;
73694: CALL 88593 0 0
// UpdateWarehouseGatheringPoints ( ) ;
73698: CALL 88845 0 0
// end ;
73702: LD_VAR 0 1
73706: RET
// function UpdateLuaVariables ( ) ; begin
73707: LD_INT 0
73709: PPUSH
// if globalGameSaveCounter then
73710: LD_EXP 74
73714: IFFALSE 73748
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
73716: LD_ADDR_EXP 74
73720: PUSH
73721: LD_EXP 74
73725: PPUSH
73726: CALL 69634 0 1
73730: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73731: LD_STRING setGameSaveCounter(
73733: PUSH
73734: LD_EXP 74
73738: STR
73739: PUSH
73740: LD_STRING )
73742: STR
73743: PPUSH
73744: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
73748: LD_STRING setGameDifficulty(
73750: PUSH
73751: LD_OWVAR 67
73755: STR
73756: PUSH
73757: LD_STRING )
73759: STR
73760: PPUSH
73761: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
73765: LD_STRING displayDifficulty(
73767: PUSH
73768: LD_OWVAR 67
73772: STR
73773: PUSH
73774: LD_STRING )
73776: STR
73777: PPUSH
73778: CALL_OW 559
// end ;
73782: LD_VAR 0 1
73786: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73787: LD_INT 0
73789: PPUSH
// if p2 = stream_mode then
73790: LD_VAR 0 2
73794: PUSH
73795: LD_INT 100
73797: EQUAL
73798: IFFALSE 74801
// begin if not StreamModeActive then
73800: LD_EXP 75
73804: NOT
73805: IFFALSE 73815
// StreamModeActive := true ;
73807: LD_ADDR_EXP 75
73811: PUSH
73812: LD_INT 1
73814: ST_TO_ADDR
// if p3 = 0 then
73815: LD_VAR 0 3
73819: PUSH
73820: LD_INT 0
73822: EQUAL
73823: IFFALSE 73829
// InitStreamMode ;
73825: CALL 75007 0 0
// if p3 = 1 then
73829: LD_VAR 0 3
73833: PUSH
73834: LD_INT 1
73836: EQUAL
73837: IFFALSE 73847
// sRocket := true ;
73839: LD_ADDR_EXP 80
73843: PUSH
73844: LD_INT 1
73846: ST_TO_ADDR
// if p3 = 2 then
73847: LD_VAR 0 3
73851: PUSH
73852: LD_INT 2
73854: EQUAL
73855: IFFALSE 73865
// sSpeed := true ;
73857: LD_ADDR_EXP 79
73861: PUSH
73862: LD_INT 1
73864: ST_TO_ADDR
// if p3 = 3 then
73865: LD_VAR 0 3
73869: PUSH
73870: LD_INT 3
73872: EQUAL
73873: IFFALSE 73883
// sEngine := true ;
73875: LD_ADDR_EXP 81
73879: PUSH
73880: LD_INT 1
73882: ST_TO_ADDR
// if p3 = 4 then
73883: LD_VAR 0 3
73887: PUSH
73888: LD_INT 4
73890: EQUAL
73891: IFFALSE 73901
// sSpec := true ;
73893: LD_ADDR_EXP 78
73897: PUSH
73898: LD_INT 1
73900: ST_TO_ADDR
// if p3 = 5 then
73901: LD_VAR 0 3
73905: PUSH
73906: LD_INT 5
73908: EQUAL
73909: IFFALSE 73919
// sLevel := true ;
73911: LD_ADDR_EXP 82
73915: PUSH
73916: LD_INT 1
73918: ST_TO_ADDR
// if p3 = 6 then
73919: LD_VAR 0 3
73923: PUSH
73924: LD_INT 6
73926: EQUAL
73927: IFFALSE 73937
// sArmoury := true ;
73929: LD_ADDR_EXP 83
73933: PUSH
73934: LD_INT 1
73936: ST_TO_ADDR
// if p3 = 7 then
73937: LD_VAR 0 3
73941: PUSH
73942: LD_INT 7
73944: EQUAL
73945: IFFALSE 73955
// sRadar := true ;
73947: LD_ADDR_EXP 84
73951: PUSH
73952: LD_INT 1
73954: ST_TO_ADDR
// if p3 = 8 then
73955: LD_VAR 0 3
73959: PUSH
73960: LD_INT 8
73962: EQUAL
73963: IFFALSE 73973
// sBunker := true ;
73965: LD_ADDR_EXP 85
73969: PUSH
73970: LD_INT 1
73972: ST_TO_ADDR
// if p3 = 9 then
73973: LD_VAR 0 3
73977: PUSH
73978: LD_INT 9
73980: EQUAL
73981: IFFALSE 73991
// sHack := true ;
73983: LD_ADDR_EXP 86
73987: PUSH
73988: LD_INT 1
73990: ST_TO_ADDR
// if p3 = 10 then
73991: LD_VAR 0 3
73995: PUSH
73996: LD_INT 10
73998: EQUAL
73999: IFFALSE 74009
// sFire := true ;
74001: LD_ADDR_EXP 87
74005: PUSH
74006: LD_INT 1
74008: ST_TO_ADDR
// if p3 = 11 then
74009: LD_VAR 0 3
74013: PUSH
74014: LD_INT 11
74016: EQUAL
74017: IFFALSE 74027
// sRefresh := true ;
74019: LD_ADDR_EXP 88
74023: PUSH
74024: LD_INT 1
74026: ST_TO_ADDR
// if p3 = 12 then
74027: LD_VAR 0 3
74031: PUSH
74032: LD_INT 12
74034: EQUAL
74035: IFFALSE 74045
// sExp := true ;
74037: LD_ADDR_EXP 89
74041: PUSH
74042: LD_INT 1
74044: ST_TO_ADDR
// if p3 = 13 then
74045: LD_VAR 0 3
74049: PUSH
74050: LD_INT 13
74052: EQUAL
74053: IFFALSE 74063
// sDepot := true ;
74055: LD_ADDR_EXP 90
74059: PUSH
74060: LD_INT 1
74062: ST_TO_ADDR
// if p3 = 14 then
74063: LD_VAR 0 3
74067: PUSH
74068: LD_INT 14
74070: EQUAL
74071: IFFALSE 74081
// sFlag := true ;
74073: LD_ADDR_EXP 91
74077: PUSH
74078: LD_INT 1
74080: ST_TO_ADDR
// if p3 = 15 then
74081: LD_VAR 0 3
74085: PUSH
74086: LD_INT 15
74088: EQUAL
74089: IFFALSE 74099
// sKamikadze := true ;
74091: LD_ADDR_EXP 99
74095: PUSH
74096: LD_INT 1
74098: ST_TO_ADDR
// if p3 = 16 then
74099: LD_VAR 0 3
74103: PUSH
74104: LD_INT 16
74106: EQUAL
74107: IFFALSE 74117
// sTroll := true ;
74109: LD_ADDR_EXP 100
74113: PUSH
74114: LD_INT 1
74116: ST_TO_ADDR
// if p3 = 17 then
74117: LD_VAR 0 3
74121: PUSH
74122: LD_INT 17
74124: EQUAL
74125: IFFALSE 74135
// sSlow := true ;
74127: LD_ADDR_EXP 101
74131: PUSH
74132: LD_INT 1
74134: ST_TO_ADDR
// if p3 = 18 then
74135: LD_VAR 0 3
74139: PUSH
74140: LD_INT 18
74142: EQUAL
74143: IFFALSE 74153
// sLack := true ;
74145: LD_ADDR_EXP 102
74149: PUSH
74150: LD_INT 1
74152: ST_TO_ADDR
// if p3 = 19 then
74153: LD_VAR 0 3
74157: PUSH
74158: LD_INT 19
74160: EQUAL
74161: IFFALSE 74171
// sTank := true ;
74163: LD_ADDR_EXP 104
74167: PUSH
74168: LD_INT 1
74170: ST_TO_ADDR
// if p3 = 20 then
74171: LD_VAR 0 3
74175: PUSH
74176: LD_INT 20
74178: EQUAL
74179: IFFALSE 74189
// sRemote := true ;
74181: LD_ADDR_EXP 105
74185: PUSH
74186: LD_INT 1
74188: ST_TO_ADDR
// if p3 = 21 then
74189: LD_VAR 0 3
74193: PUSH
74194: LD_INT 21
74196: EQUAL
74197: IFFALSE 74207
// sPowell := true ;
74199: LD_ADDR_EXP 106
74203: PUSH
74204: LD_INT 1
74206: ST_TO_ADDR
// if p3 = 22 then
74207: LD_VAR 0 3
74211: PUSH
74212: LD_INT 22
74214: EQUAL
74215: IFFALSE 74225
// sTeleport := true ;
74217: LD_ADDR_EXP 109
74221: PUSH
74222: LD_INT 1
74224: ST_TO_ADDR
// if p3 = 23 then
74225: LD_VAR 0 3
74229: PUSH
74230: LD_INT 23
74232: EQUAL
74233: IFFALSE 74243
// sOilTower := true ;
74235: LD_ADDR_EXP 111
74239: PUSH
74240: LD_INT 1
74242: ST_TO_ADDR
// if p3 = 24 then
74243: LD_VAR 0 3
74247: PUSH
74248: LD_INT 24
74250: EQUAL
74251: IFFALSE 74261
// sShovel := true ;
74253: LD_ADDR_EXP 112
74257: PUSH
74258: LD_INT 1
74260: ST_TO_ADDR
// if p3 = 25 then
74261: LD_VAR 0 3
74265: PUSH
74266: LD_INT 25
74268: EQUAL
74269: IFFALSE 74279
// sSheik := true ;
74271: LD_ADDR_EXP 113
74275: PUSH
74276: LD_INT 1
74278: ST_TO_ADDR
// if p3 = 26 then
74279: LD_VAR 0 3
74283: PUSH
74284: LD_INT 26
74286: EQUAL
74287: IFFALSE 74297
// sEarthquake := true ;
74289: LD_ADDR_EXP 115
74293: PUSH
74294: LD_INT 1
74296: ST_TO_ADDR
// if p3 = 27 then
74297: LD_VAR 0 3
74301: PUSH
74302: LD_INT 27
74304: EQUAL
74305: IFFALSE 74315
// sAI := true ;
74307: LD_ADDR_EXP 116
74311: PUSH
74312: LD_INT 1
74314: ST_TO_ADDR
// if p3 = 28 then
74315: LD_VAR 0 3
74319: PUSH
74320: LD_INT 28
74322: EQUAL
74323: IFFALSE 74333
// sCargo := true ;
74325: LD_ADDR_EXP 119
74329: PUSH
74330: LD_INT 1
74332: ST_TO_ADDR
// if p3 = 29 then
74333: LD_VAR 0 3
74337: PUSH
74338: LD_INT 29
74340: EQUAL
74341: IFFALSE 74351
// sDLaser := true ;
74343: LD_ADDR_EXP 120
74347: PUSH
74348: LD_INT 1
74350: ST_TO_ADDR
// if p3 = 30 then
74351: LD_VAR 0 3
74355: PUSH
74356: LD_INT 30
74358: EQUAL
74359: IFFALSE 74369
// sExchange := true ;
74361: LD_ADDR_EXP 121
74365: PUSH
74366: LD_INT 1
74368: ST_TO_ADDR
// if p3 = 31 then
74369: LD_VAR 0 3
74373: PUSH
74374: LD_INT 31
74376: EQUAL
74377: IFFALSE 74387
// sFac := true ;
74379: LD_ADDR_EXP 122
74383: PUSH
74384: LD_INT 1
74386: ST_TO_ADDR
// if p3 = 32 then
74387: LD_VAR 0 3
74391: PUSH
74392: LD_INT 32
74394: EQUAL
74395: IFFALSE 74405
// sPower := true ;
74397: LD_ADDR_EXP 123
74401: PUSH
74402: LD_INT 1
74404: ST_TO_ADDR
// if p3 = 33 then
74405: LD_VAR 0 3
74409: PUSH
74410: LD_INT 33
74412: EQUAL
74413: IFFALSE 74423
// sRandom := true ;
74415: LD_ADDR_EXP 124
74419: PUSH
74420: LD_INT 1
74422: ST_TO_ADDR
// if p3 = 34 then
74423: LD_VAR 0 3
74427: PUSH
74428: LD_INT 34
74430: EQUAL
74431: IFFALSE 74441
// sShield := true ;
74433: LD_ADDR_EXP 125
74437: PUSH
74438: LD_INT 1
74440: ST_TO_ADDR
// if p3 = 35 then
74441: LD_VAR 0 3
74445: PUSH
74446: LD_INT 35
74448: EQUAL
74449: IFFALSE 74459
// sTime := true ;
74451: LD_ADDR_EXP 126
74455: PUSH
74456: LD_INT 1
74458: ST_TO_ADDR
// if p3 = 36 then
74459: LD_VAR 0 3
74463: PUSH
74464: LD_INT 36
74466: EQUAL
74467: IFFALSE 74477
// sTools := true ;
74469: LD_ADDR_EXP 127
74473: PUSH
74474: LD_INT 1
74476: ST_TO_ADDR
// if p3 = 101 then
74477: LD_VAR 0 3
74481: PUSH
74482: LD_INT 101
74484: EQUAL
74485: IFFALSE 74495
// sSold := true ;
74487: LD_ADDR_EXP 92
74491: PUSH
74492: LD_INT 1
74494: ST_TO_ADDR
// if p3 = 102 then
74495: LD_VAR 0 3
74499: PUSH
74500: LD_INT 102
74502: EQUAL
74503: IFFALSE 74513
// sDiff := true ;
74505: LD_ADDR_EXP 93
74509: PUSH
74510: LD_INT 1
74512: ST_TO_ADDR
// if p3 = 103 then
74513: LD_VAR 0 3
74517: PUSH
74518: LD_INT 103
74520: EQUAL
74521: IFFALSE 74531
// sFog := true ;
74523: LD_ADDR_EXP 96
74527: PUSH
74528: LD_INT 1
74530: ST_TO_ADDR
// if p3 = 104 then
74531: LD_VAR 0 3
74535: PUSH
74536: LD_INT 104
74538: EQUAL
74539: IFFALSE 74549
// sReset := true ;
74541: LD_ADDR_EXP 97
74545: PUSH
74546: LD_INT 1
74548: ST_TO_ADDR
// if p3 = 105 then
74549: LD_VAR 0 3
74553: PUSH
74554: LD_INT 105
74556: EQUAL
74557: IFFALSE 74567
// sSun := true ;
74559: LD_ADDR_EXP 98
74563: PUSH
74564: LD_INT 1
74566: ST_TO_ADDR
// if p3 = 106 then
74567: LD_VAR 0 3
74571: PUSH
74572: LD_INT 106
74574: EQUAL
74575: IFFALSE 74585
// sTiger := true ;
74577: LD_ADDR_EXP 94
74581: PUSH
74582: LD_INT 1
74584: ST_TO_ADDR
// if p3 = 107 then
74585: LD_VAR 0 3
74589: PUSH
74590: LD_INT 107
74592: EQUAL
74593: IFFALSE 74603
// sBomb := true ;
74595: LD_ADDR_EXP 95
74599: PUSH
74600: LD_INT 1
74602: ST_TO_ADDR
// if p3 = 108 then
74603: LD_VAR 0 3
74607: PUSH
74608: LD_INT 108
74610: EQUAL
74611: IFFALSE 74621
// sWound := true ;
74613: LD_ADDR_EXP 103
74617: PUSH
74618: LD_INT 1
74620: ST_TO_ADDR
// if p3 = 109 then
74621: LD_VAR 0 3
74625: PUSH
74626: LD_INT 109
74628: EQUAL
74629: IFFALSE 74639
// sBetray := true ;
74631: LD_ADDR_EXP 107
74635: PUSH
74636: LD_INT 1
74638: ST_TO_ADDR
// if p3 = 110 then
74639: LD_VAR 0 3
74643: PUSH
74644: LD_INT 110
74646: EQUAL
74647: IFFALSE 74657
// sContamin := true ;
74649: LD_ADDR_EXP 108
74653: PUSH
74654: LD_INT 1
74656: ST_TO_ADDR
// if p3 = 111 then
74657: LD_VAR 0 3
74661: PUSH
74662: LD_INT 111
74664: EQUAL
74665: IFFALSE 74675
// sOil := true ;
74667: LD_ADDR_EXP 110
74671: PUSH
74672: LD_INT 1
74674: ST_TO_ADDR
// if p3 = 112 then
74675: LD_VAR 0 3
74679: PUSH
74680: LD_INT 112
74682: EQUAL
74683: IFFALSE 74693
// sStu := true ;
74685: LD_ADDR_EXP 114
74689: PUSH
74690: LD_INT 1
74692: ST_TO_ADDR
// if p3 = 113 then
74693: LD_VAR 0 3
74697: PUSH
74698: LD_INT 113
74700: EQUAL
74701: IFFALSE 74711
// sBazooka := true ;
74703: LD_ADDR_EXP 117
74707: PUSH
74708: LD_INT 1
74710: ST_TO_ADDR
// if p3 = 114 then
74711: LD_VAR 0 3
74715: PUSH
74716: LD_INT 114
74718: EQUAL
74719: IFFALSE 74729
// sMortar := true ;
74721: LD_ADDR_EXP 118
74725: PUSH
74726: LD_INT 1
74728: ST_TO_ADDR
// if p3 = 115 then
74729: LD_VAR 0 3
74733: PUSH
74734: LD_INT 115
74736: EQUAL
74737: IFFALSE 74747
// sRanger := true ;
74739: LD_ADDR_EXP 128
74743: PUSH
74744: LD_INT 1
74746: ST_TO_ADDR
// if p3 = 116 then
74747: LD_VAR 0 3
74751: PUSH
74752: LD_INT 116
74754: EQUAL
74755: IFFALSE 74765
// sComputer := true ;
74757: LD_ADDR_EXP 129
74761: PUSH
74762: LD_INT 1
74764: ST_TO_ADDR
// if p3 = 117 then
74765: LD_VAR 0 3
74769: PUSH
74770: LD_INT 117
74772: EQUAL
74773: IFFALSE 74783
// s30 := true ;
74775: LD_ADDR_EXP 130
74779: PUSH
74780: LD_INT 1
74782: ST_TO_ADDR
// if p3 = 118 then
74783: LD_VAR 0 3
74787: PUSH
74788: LD_INT 118
74790: EQUAL
74791: IFFALSE 74801
// s60 := true ;
74793: LD_ADDR_EXP 131
74797: PUSH
74798: LD_INT 1
74800: ST_TO_ADDR
// end ; if p2 = hack_mode then
74801: LD_VAR 0 2
74805: PUSH
74806: LD_INT 101
74808: EQUAL
74809: IFFALSE 74937
// begin case p3 of 1 :
74811: LD_VAR 0 3
74815: PUSH
74816: LD_INT 1
74818: DOUBLE
74819: EQUAL
74820: IFTRUE 74824
74822: GO 74831
74824: POP
// hHackUnlimitedResources ; 2 :
74825: CALL 87200 0 0
74829: GO 74937
74831: LD_INT 2
74833: DOUBLE
74834: EQUAL
74835: IFTRUE 74839
74837: GO 74846
74839: POP
// hHackSetLevel10 ; 3 :
74840: CALL 87333 0 0
74844: GO 74937
74846: LD_INT 3
74848: DOUBLE
74849: EQUAL
74850: IFTRUE 74854
74852: GO 74861
74854: POP
// hHackSetLevel10YourUnits ; 4 :
74855: CALL 87418 0 0
74859: GO 74937
74861: LD_INT 4
74863: DOUBLE
74864: EQUAL
74865: IFTRUE 74869
74867: GO 74876
74869: POP
// hHackInvincible ; 5 :
74870: CALL 87866 0 0
74874: GO 74937
74876: LD_INT 5
74878: DOUBLE
74879: EQUAL
74880: IFTRUE 74884
74882: GO 74891
74884: POP
// hHackInvisible ; 6 :
74885: CALL 87977 0 0
74889: GO 74937
74891: LD_INT 6
74893: DOUBLE
74894: EQUAL
74895: IFTRUE 74899
74897: GO 74906
74899: POP
// hHackChangeYourSide ; 7 :
74900: CALL 88034 0 0
74904: GO 74937
74906: LD_INT 7
74908: DOUBLE
74909: EQUAL
74910: IFTRUE 74914
74912: GO 74921
74914: POP
// hHackChangeUnitSide ; 8 :
74915: CALL 88076 0 0
74919: GO 74937
74921: LD_INT 8
74923: DOUBLE
74924: EQUAL
74925: IFTRUE 74929
74927: GO 74936
74929: POP
// hHackFog ; end ;
74930: CALL 88177 0 0
74934: GO 74937
74936: POP
// end ; if p2 = game_save_mode then
74937: LD_VAR 0 2
74941: PUSH
74942: LD_INT 102
74944: EQUAL
74945: IFFALSE 75002
// begin if p3 = 1 then
74947: LD_VAR 0 3
74951: PUSH
74952: LD_INT 1
74954: EQUAL
74955: IFFALSE 74967
// globalGameSaveCounter := p4 ;
74957: LD_ADDR_EXP 74
74961: PUSH
74962: LD_VAR 0 4
74966: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
74967: LD_VAR 0 3
74971: PUSH
74972: LD_INT 2
74974: EQUAL
74975: IFFALSE 74983
74977: PUSH
74978: LD_EXP 74
74982: AND
74983: IFFALSE 75002
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
74985: LD_STRING setGameSaveCounter(
74987: PUSH
74988: LD_EXP 74
74992: STR
74993: PUSH
74994: LD_STRING )
74996: STR
74997: PPUSH
74998: CALL_OW 559
// end ; end ;
75002: LD_VAR 0 7
75006: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
75007: LD_INT 0
75009: PPUSH
// streamModeActive := false ;
75010: LD_ADDR_EXP 75
75014: PUSH
75015: LD_INT 0
75017: ST_TO_ADDR
// normalCounter := 36 ;
75018: LD_ADDR_EXP 76
75022: PUSH
75023: LD_INT 36
75025: ST_TO_ADDR
// hardcoreCounter := 18 ;
75026: LD_ADDR_EXP 77
75030: PUSH
75031: LD_INT 18
75033: ST_TO_ADDR
// sRocket := false ;
75034: LD_ADDR_EXP 80
75038: PUSH
75039: LD_INT 0
75041: ST_TO_ADDR
// sSpeed := false ;
75042: LD_ADDR_EXP 79
75046: PUSH
75047: LD_INT 0
75049: ST_TO_ADDR
// sEngine := false ;
75050: LD_ADDR_EXP 81
75054: PUSH
75055: LD_INT 0
75057: ST_TO_ADDR
// sSpec := false ;
75058: LD_ADDR_EXP 78
75062: PUSH
75063: LD_INT 0
75065: ST_TO_ADDR
// sLevel := false ;
75066: LD_ADDR_EXP 82
75070: PUSH
75071: LD_INT 0
75073: ST_TO_ADDR
// sArmoury := false ;
75074: LD_ADDR_EXP 83
75078: PUSH
75079: LD_INT 0
75081: ST_TO_ADDR
// sRadar := false ;
75082: LD_ADDR_EXP 84
75086: PUSH
75087: LD_INT 0
75089: ST_TO_ADDR
// sBunker := false ;
75090: LD_ADDR_EXP 85
75094: PUSH
75095: LD_INT 0
75097: ST_TO_ADDR
// sHack := false ;
75098: LD_ADDR_EXP 86
75102: PUSH
75103: LD_INT 0
75105: ST_TO_ADDR
// sFire := false ;
75106: LD_ADDR_EXP 87
75110: PUSH
75111: LD_INT 0
75113: ST_TO_ADDR
// sRefresh := false ;
75114: LD_ADDR_EXP 88
75118: PUSH
75119: LD_INT 0
75121: ST_TO_ADDR
// sExp := false ;
75122: LD_ADDR_EXP 89
75126: PUSH
75127: LD_INT 0
75129: ST_TO_ADDR
// sDepot := false ;
75130: LD_ADDR_EXP 90
75134: PUSH
75135: LD_INT 0
75137: ST_TO_ADDR
// sFlag := false ;
75138: LD_ADDR_EXP 91
75142: PUSH
75143: LD_INT 0
75145: ST_TO_ADDR
// sKamikadze := false ;
75146: LD_ADDR_EXP 99
75150: PUSH
75151: LD_INT 0
75153: ST_TO_ADDR
// sTroll := false ;
75154: LD_ADDR_EXP 100
75158: PUSH
75159: LD_INT 0
75161: ST_TO_ADDR
// sSlow := false ;
75162: LD_ADDR_EXP 101
75166: PUSH
75167: LD_INT 0
75169: ST_TO_ADDR
// sLack := false ;
75170: LD_ADDR_EXP 102
75174: PUSH
75175: LD_INT 0
75177: ST_TO_ADDR
// sTank := false ;
75178: LD_ADDR_EXP 104
75182: PUSH
75183: LD_INT 0
75185: ST_TO_ADDR
// sRemote := false ;
75186: LD_ADDR_EXP 105
75190: PUSH
75191: LD_INT 0
75193: ST_TO_ADDR
// sPowell := false ;
75194: LD_ADDR_EXP 106
75198: PUSH
75199: LD_INT 0
75201: ST_TO_ADDR
// sTeleport := false ;
75202: LD_ADDR_EXP 109
75206: PUSH
75207: LD_INT 0
75209: ST_TO_ADDR
// sOilTower := false ;
75210: LD_ADDR_EXP 111
75214: PUSH
75215: LD_INT 0
75217: ST_TO_ADDR
// sShovel := false ;
75218: LD_ADDR_EXP 112
75222: PUSH
75223: LD_INT 0
75225: ST_TO_ADDR
// sSheik := false ;
75226: LD_ADDR_EXP 113
75230: PUSH
75231: LD_INT 0
75233: ST_TO_ADDR
// sEarthquake := false ;
75234: LD_ADDR_EXP 115
75238: PUSH
75239: LD_INT 0
75241: ST_TO_ADDR
// sAI := false ;
75242: LD_ADDR_EXP 116
75246: PUSH
75247: LD_INT 0
75249: ST_TO_ADDR
// sCargo := false ;
75250: LD_ADDR_EXP 119
75254: PUSH
75255: LD_INT 0
75257: ST_TO_ADDR
// sDLaser := false ;
75258: LD_ADDR_EXP 120
75262: PUSH
75263: LD_INT 0
75265: ST_TO_ADDR
// sExchange := false ;
75266: LD_ADDR_EXP 121
75270: PUSH
75271: LD_INT 0
75273: ST_TO_ADDR
// sFac := false ;
75274: LD_ADDR_EXP 122
75278: PUSH
75279: LD_INT 0
75281: ST_TO_ADDR
// sPower := false ;
75282: LD_ADDR_EXP 123
75286: PUSH
75287: LD_INT 0
75289: ST_TO_ADDR
// sRandom := false ;
75290: LD_ADDR_EXP 124
75294: PUSH
75295: LD_INT 0
75297: ST_TO_ADDR
// sShield := false ;
75298: LD_ADDR_EXP 125
75302: PUSH
75303: LD_INT 0
75305: ST_TO_ADDR
// sTime := false ;
75306: LD_ADDR_EXP 126
75310: PUSH
75311: LD_INT 0
75313: ST_TO_ADDR
// sTools := false ;
75314: LD_ADDR_EXP 127
75318: PUSH
75319: LD_INT 0
75321: ST_TO_ADDR
// sSold := false ;
75322: LD_ADDR_EXP 92
75326: PUSH
75327: LD_INT 0
75329: ST_TO_ADDR
// sDiff := false ;
75330: LD_ADDR_EXP 93
75334: PUSH
75335: LD_INT 0
75337: ST_TO_ADDR
// sFog := false ;
75338: LD_ADDR_EXP 96
75342: PUSH
75343: LD_INT 0
75345: ST_TO_ADDR
// sReset := false ;
75346: LD_ADDR_EXP 97
75350: PUSH
75351: LD_INT 0
75353: ST_TO_ADDR
// sSun := false ;
75354: LD_ADDR_EXP 98
75358: PUSH
75359: LD_INT 0
75361: ST_TO_ADDR
// sTiger := false ;
75362: LD_ADDR_EXP 94
75366: PUSH
75367: LD_INT 0
75369: ST_TO_ADDR
// sBomb := false ;
75370: LD_ADDR_EXP 95
75374: PUSH
75375: LD_INT 0
75377: ST_TO_ADDR
// sWound := false ;
75378: LD_ADDR_EXP 103
75382: PUSH
75383: LD_INT 0
75385: ST_TO_ADDR
// sBetray := false ;
75386: LD_ADDR_EXP 107
75390: PUSH
75391: LD_INT 0
75393: ST_TO_ADDR
// sContamin := false ;
75394: LD_ADDR_EXP 108
75398: PUSH
75399: LD_INT 0
75401: ST_TO_ADDR
// sOil := false ;
75402: LD_ADDR_EXP 110
75406: PUSH
75407: LD_INT 0
75409: ST_TO_ADDR
// sStu := false ;
75410: LD_ADDR_EXP 114
75414: PUSH
75415: LD_INT 0
75417: ST_TO_ADDR
// sBazooka := false ;
75418: LD_ADDR_EXP 117
75422: PUSH
75423: LD_INT 0
75425: ST_TO_ADDR
// sMortar := false ;
75426: LD_ADDR_EXP 118
75430: PUSH
75431: LD_INT 0
75433: ST_TO_ADDR
// sRanger := false ;
75434: LD_ADDR_EXP 128
75438: PUSH
75439: LD_INT 0
75441: ST_TO_ADDR
// sComputer := false ;
75442: LD_ADDR_EXP 129
75446: PUSH
75447: LD_INT 0
75449: ST_TO_ADDR
// s30 := false ;
75450: LD_ADDR_EXP 130
75454: PUSH
75455: LD_INT 0
75457: ST_TO_ADDR
// s60 := false ;
75458: LD_ADDR_EXP 131
75462: PUSH
75463: LD_INT 0
75465: ST_TO_ADDR
// end ;
75466: LD_VAR 0 1
75470: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
75471: LD_INT 0
75473: PPUSH
75474: PPUSH
75475: PPUSH
75476: PPUSH
75477: PPUSH
75478: PPUSH
75479: PPUSH
// result := [ ] ;
75480: LD_ADDR_VAR 0 2
75484: PUSH
75485: EMPTY
75486: ST_TO_ADDR
// if campaign_id = 1 then
75487: LD_OWVAR 69
75491: PUSH
75492: LD_INT 1
75494: EQUAL
75495: IFFALSE 78661
// begin case mission_number of 1 :
75497: LD_OWVAR 70
75501: PUSH
75502: LD_INT 1
75504: DOUBLE
75505: EQUAL
75506: IFTRUE 75510
75508: GO 75586
75510: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
75511: LD_ADDR_VAR 0 2
75515: PUSH
75516: LD_INT 2
75518: PUSH
75519: LD_INT 4
75521: PUSH
75522: LD_INT 11
75524: PUSH
75525: LD_INT 12
75527: PUSH
75528: LD_INT 15
75530: PUSH
75531: LD_INT 16
75533: PUSH
75534: LD_INT 22
75536: PUSH
75537: LD_INT 23
75539: PUSH
75540: LD_INT 26
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 101
75556: PUSH
75557: LD_INT 102
75559: PUSH
75560: LD_INT 106
75562: PUSH
75563: LD_INT 116
75565: PUSH
75566: LD_INT 117
75568: PUSH
75569: LD_INT 118
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: ST_TO_ADDR
75584: GO 78659
75586: LD_INT 2
75588: DOUBLE
75589: EQUAL
75590: IFTRUE 75594
75592: GO 75678
75594: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
75595: LD_ADDR_VAR 0 2
75599: PUSH
75600: LD_INT 2
75602: PUSH
75603: LD_INT 4
75605: PUSH
75606: LD_INT 11
75608: PUSH
75609: LD_INT 12
75611: PUSH
75612: LD_INT 15
75614: PUSH
75615: LD_INT 16
75617: PUSH
75618: LD_INT 22
75620: PUSH
75621: LD_INT 23
75623: PUSH
75624: LD_INT 26
75626: PUSH
75627: EMPTY
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: PUSH
75638: LD_INT 101
75640: PUSH
75641: LD_INT 102
75643: PUSH
75644: LD_INT 105
75646: PUSH
75647: LD_INT 106
75649: PUSH
75650: LD_INT 108
75652: PUSH
75653: LD_INT 116
75655: PUSH
75656: LD_INT 117
75658: PUSH
75659: LD_INT 118
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: PUSH
75672: EMPTY
75673: LIST
75674: LIST
75675: ST_TO_ADDR
75676: GO 78659
75678: LD_INT 3
75680: DOUBLE
75681: EQUAL
75682: IFTRUE 75686
75684: GO 75774
75686: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
75687: LD_ADDR_VAR 0 2
75691: PUSH
75692: LD_INT 2
75694: PUSH
75695: LD_INT 4
75697: PUSH
75698: LD_INT 5
75700: PUSH
75701: LD_INT 11
75703: PUSH
75704: LD_INT 12
75706: PUSH
75707: LD_INT 15
75709: PUSH
75710: LD_INT 16
75712: PUSH
75713: LD_INT 22
75715: PUSH
75716: LD_INT 26
75718: PUSH
75719: LD_INT 36
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: PUSH
75734: LD_INT 101
75736: PUSH
75737: LD_INT 102
75739: PUSH
75740: LD_INT 105
75742: PUSH
75743: LD_INT 106
75745: PUSH
75746: LD_INT 108
75748: PUSH
75749: LD_INT 116
75751: PUSH
75752: LD_INT 117
75754: PUSH
75755: LD_INT 118
75757: PUSH
75758: EMPTY
75759: LIST
75760: LIST
75761: LIST
75762: LIST
75763: LIST
75764: LIST
75765: LIST
75766: LIST
75767: PUSH
75768: EMPTY
75769: LIST
75770: LIST
75771: ST_TO_ADDR
75772: GO 78659
75774: LD_INT 4
75776: DOUBLE
75777: EQUAL
75778: IFTRUE 75782
75780: GO 75878
75782: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
75783: LD_ADDR_VAR 0 2
75787: PUSH
75788: LD_INT 2
75790: PUSH
75791: LD_INT 4
75793: PUSH
75794: LD_INT 5
75796: PUSH
75797: LD_INT 8
75799: PUSH
75800: LD_INT 11
75802: PUSH
75803: LD_INT 12
75805: PUSH
75806: LD_INT 15
75808: PUSH
75809: LD_INT 16
75811: PUSH
75812: LD_INT 22
75814: PUSH
75815: LD_INT 23
75817: PUSH
75818: LD_INT 26
75820: PUSH
75821: LD_INT 36
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 101
75840: PUSH
75841: LD_INT 102
75843: PUSH
75844: LD_INT 105
75846: PUSH
75847: LD_INT 106
75849: PUSH
75850: LD_INT 108
75852: PUSH
75853: LD_INT 116
75855: PUSH
75856: LD_INT 117
75858: PUSH
75859: LD_INT 118
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: ST_TO_ADDR
75876: GO 78659
75878: LD_INT 5
75880: DOUBLE
75881: EQUAL
75882: IFTRUE 75886
75884: GO 75998
75886: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
75887: LD_ADDR_VAR 0 2
75891: PUSH
75892: LD_INT 2
75894: PUSH
75895: LD_INT 4
75897: PUSH
75898: LD_INT 5
75900: PUSH
75901: LD_INT 6
75903: PUSH
75904: LD_INT 8
75906: PUSH
75907: LD_INT 11
75909: PUSH
75910: LD_INT 12
75912: PUSH
75913: LD_INT 15
75915: PUSH
75916: LD_INT 16
75918: PUSH
75919: LD_INT 22
75921: PUSH
75922: LD_INT 23
75924: PUSH
75925: LD_INT 25
75927: PUSH
75928: LD_INT 26
75930: PUSH
75931: LD_INT 36
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: LIST
75943: LIST
75944: LIST
75945: LIST
75946: LIST
75947: LIST
75948: LIST
75949: PUSH
75950: LD_INT 101
75952: PUSH
75953: LD_INT 102
75955: PUSH
75956: LD_INT 105
75958: PUSH
75959: LD_INT 106
75961: PUSH
75962: LD_INT 108
75964: PUSH
75965: LD_INT 109
75967: PUSH
75968: LD_INT 112
75970: PUSH
75971: LD_INT 116
75973: PUSH
75974: LD_INT 117
75976: PUSH
75977: LD_INT 118
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: PUSH
75992: EMPTY
75993: LIST
75994: LIST
75995: ST_TO_ADDR
75996: GO 78659
75998: LD_INT 6
76000: DOUBLE
76001: EQUAL
76002: IFTRUE 76006
76004: GO 76138
76006: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
76007: LD_ADDR_VAR 0 2
76011: PUSH
76012: LD_INT 2
76014: PUSH
76015: LD_INT 4
76017: PUSH
76018: LD_INT 5
76020: PUSH
76021: LD_INT 6
76023: PUSH
76024: LD_INT 8
76026: PUSH
76027: LD_INT 11
76029: PUSH
76030: LD_INT 12
76032: PUSH
76033: LD_INT 15
76035: PUSH
76036: LD_INT 16
76038: PUSH
76039: LD_INT 20
76041: PUSH
76042: LD_INT 21
76044: PUSH
76045: LD_INT 22
76047: PUSH
76048: LD_INT 23
76050: PUSH
76051: LD_INT 25
76053: PUSH
76054: LD_INT 26
76056: PUSH
76057: LD_INT 30
76059: PUSH
76060: LD_INT 31
76062: PUSH
76063: LD_INT 32
76065: PUSH
76066: LD_INT 36
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: LIST
76075: LIST
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 101
76092: PUSH
76093: LD_INT 102
76095: PUSH
76096: LD_INT 105
76098: PUSH
76099: LD_INT 106
76101: PUSH
76102: LD_INT 108
76104: PUSH
76105: LD_INT 109
76107: PUSH
76108: LD_INT 112
76110: PUSH
76111: LD_INT 116
76113: PUSH
76114: LD_INT 117
76116: PUSH
76117: LD_INT 118
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: LIST
76124: LIST
76125: LIST
76126: LIST
76127: LIST
76128: LIST
76129: LIST
76130: LIST
76131: PUSH
76132: EMPTY
76133: LIST
76134: LIST
76135: ST_TO_ADDR
76136: GO 78659
76138: LD_INT 7
76140: DOUBLE
76141: EQUAL
76142: IFTRUE 76146
76144: GO 76258
76146: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
76147: LD_ADDR_VAR 0 2
76151: PUSH
76152: LD_INT 2
76154: PUSH
76155: LD_INT 4
76157: PUSH
76158: LD_INT 5
76160: PUSH
76161: LD_INT 7
76163: PUSH
76164: LD_INT 11
76166: PUSH
76167: LD_INT 12
76169: PUSH
76170: LD_INT 15
76172: PUSH
76173: LD_INT 16
76175: PUSH
76176: LD_INT 20
76178: PUSH
76179: LD_INT 21
76181: PUSH
76182: LD_INT 22
76184: PUSH
76185: LD_INT 23
76187: PUSH
76188: LD_INT 25
76190: PUSH
76191: LD_INT 26
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: PUSH
76210: LD_INT 101
76212: PUSH
76213: LD_INT 102
76215: PUSH
76216: LD_INT 103
76218: PUSH
76219: LD_INT 105
76221: PUSH
76222: LD_INT 106
76224: PUSH
76225: LD_INT 108
76227: PUSH
76228: LD_INT 112
76230: PUSH
76231: LD_INT 116
76233: PUSH
76234: LD_INT 117
76236: PUSH
76237: LD_INT 118
76239: PUSH
76240: EMPTY
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: ST_TO_ADDR
76256: GO 78659
76258: LD_INT 8
76260: DOUBLE
76261: EQUAL
76262: IFTRUE 76266
76264: GO 76406
76266: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
76267: LD_ADDR_VAR 0 2
76271: PUSH
76272: LD_INT 2
76274: PUSH
76275: LD_INT 4
76277: PUSH
76278: LD_INT 5
76280: PUSH
76281: LD_INT 6
76283: PUSH
76284: LD_INT 7
76286: PUSH
76287: LD_INT 8
76289: PUSH
76290: LD_INT 11
76292: PUSH
76293: LD_INT 12
76295: PUSH
76296: LD_INT 15
76298: PUSH
76299: LD_INT 16
76301: PUSH
76302: LD_INT 20
76304: PUSH
76305: LD_INT 21
76307: PUSH
76308: LD_INT 22
76310: PUSH
76311: LD_INT 23
76313: PUSH
76314: LD_INT 25
76316: PUSH
76317: LD_INT 26
76319: PUSH
76320: LD_INT 30
76322: PUSH
76323: LD_INT 31
76325: PUSH
76326: LD_INT 32
76328: PUSH
76329: LD_INT 36
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: LIST
76344: LIST
76345: LIST
76346: LIST
76347: LIST
76348: LIST
76349: LIST
76350: LIST
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 101
76356: PUSH
76357: LD_INT 102
76359: PUSH
76360: LD_INT 103
76362: PUSH
76363: LD_INT 105
76365: PUSH
76366: LD_INT 106
76368: PUSH
76369: LD_INT 108
76371: PUSH
76372: LD_INT 109
76374: PUSH
76375: LD_INT 112
76377: PUSH
76378: LD_INT 116
76380: PUSH
76381: LD_INT 117
76383: PUSH
76384: LD_INT 118
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: ST_TO_ADDR
76404: GO 78659
76406: LD_INT 9
76408: DOUBLE
76409: EQUAL
76410: IFTRUE 76414
76412: GO 76562
76414: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
76415: LD_ADDR_VAR 0 2
76419: PUSH
76420: LD_INT 2
76422: PUSH
76423: LD_INT 4
76425: PUSH
76426: LD_INT 5
76428: PUSH
76429: LD_INT 6
76431: PUSH
76432: LD_INT 7
76434: PUSH
76435: LD_INT 8
76437: PUSH
76438: LD_INT 11
76440: PUSH
76441: LD_INT 12
76443: PUSH
76444: LD_INT 15
76446: PUSH
76447: LD_INT 16
76449: PUSH
76450: LD_INT 20
76452: PUSH
76453: LD_INT 21
76455: PUSH
76456: LD_INT 22
76458: PUSH
76459: LD_INT 23
76461: PUSH
76462: LD_INT 25
76464: PUSH
76465: LD_INT 26
76467: PUSH
76468: LD_INT 28
76470: PUSH
76471: LD_INT 30
76473: PUSH
76474: LD_INT 31
76476: PUSH
76477: LD_INT 32
76479: PUSH
76480: LD_INT 36
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: LIST
76487: LIST
76488: LIST
76489: LIST
76490: LIST
76491: LIST
76492: LIST
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 101
76508: PUSH
76509: LD_INT 102
76511: PUSH
76512: LD_INT 103
76514: PUSH
76515: LD_INT 105
76517: PUSH
76518: LD_INT 106
76520: PUSH
76521: LD_INT 108
76523: PUSH
76524: LD_INT 109
76526: PUSH
76527: LD_INT 112
76529: PUSH
76530: LD_INT 114
76532: PUSH
76533: LD_INT 116
76535: PUSH
76536: LD_INT 117
76538: PUSH
76539: LD_INT 118
76541: PUSH
76542: EMPTY
76543: LIST
76544: LIST
76545: LIST
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: LIST
76554: LIST
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: ST_TO_ADDR
76560: GO 78659
76562: LD_INT 10
76564: DOUBLE
76565: EQUAL
76566: IFTRUE 76570
76568: GO 76766
76570: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
76571: LD_ADDR_VAR 0 2
76575: PUSH
76576: LD_INT 2
76578: PUSH
76579: LD_INT 4
76581: PUSH
76582: LD_INT 5
76584: PUSH
76585: LD_INT 6
76587: PUSH
76588: LD_INT 7
76590: PUSH
76591: LD_INT 8
76593: PUSH
76594: LD_INT 9
76596: PUSH
76597: LD_INT 10
76599: PUSH
76600: LD_INT 11
76602: PUSH
76603: LD_INT 12
76605: PUSH
76606: LD_INT 13
76608: PUSH
76609: LD_INT 14
76611: PUSH
76612: LD_INT 15
76614: PUSH
76615: LD_INT 16
76617: PUSH
76618: LD_INT 17
76620: PUSH
76621: LD_INT 18
76623: PUSH
76624: LD_INT 19
76626: PUSH
76627: LD_INT 20
76629: PUSH
76630: LD_INT 21
76632: PUSH
76633: LD_INT 22
76635: PUSH
76636: LD_INT 23
76638: PUSH
76639: LD_INT 24
76641: PUSH
76642: LD_INT 25
76644: PUSH
76645: LD_INT 26
76647: PUSH
76648: LD_INT 28
76650: PUSH
76651: LD_INT 30
76653: PUSH
76654: LD_INT 31
76656: PUSH
76657: LD_INT 32
76659: PUSH
76660: LD_INT 36
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: PUSH
76694: LD_INT 101
76696: PUSH
76697: LD_INT 102
76699: PUSH
76700: LD_INT 103
76702: PUSH
76703: LD_INT 104
76705: PUSH
76706: LD_INT 105
76708: PUSH
76709: LD_INT 106
76711: PUSH
76712: LD_INT 107
76714: PUSH
76715: LD_INT 108
76717: PUSH
76718: LD_INT 109
76720: PUSH
76721: LD_INT 110
76723: PUSH
76724: LD_INT 111
76726: PUSH
76727: LD_INT 112
76729: PUSH
76730: LD_INT 114
76732: PUSH
76733: LD_INT 116
76735: PUSH
76736: LD_INT 117
76738: PUSH
76739: LD_INT 118
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: ST_TO_ADDR
76764: GO 78659
76766: LD_INT 11
76768: DOUBLE
76769: EQUAL
76770: IFTRUE 76774
76772: GO 76978
76774: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
76775: LD_ADDR_VAR 0 2
76779: PUSH
76780: LD_INT 2
76782: PUSH
76783: LD_INT 3
76785: PUSH
76786: LD_INT 4
76788: PUSH
76789: LD_INT 5
76791: PUSH
76792: LD_INT 6
76794: PUSH
76795: LD_INT 7
76797: PUSH
76798: LD_INT 8
76800: PUSH
76801: LD_INT 9
76803: PUSH
76804: LD_INT 10
76806: PUSH
76807: LD_INT 11
76809: PUSH
76810: LD_INT 12
76812: PUSH
76813: LD_INT 13
76815: PUSH
76816: LD_INT 14
76818: PUSH
76819: LD_INT 15
76821: PUSH
76822: LD_INT 16
76824: PUSH
76825: LD_INT 17
76827: PUSH
76828: LD_INT 18
76830: PUSH
76831: LD_INT 19
76833: PUSH
76834: LD_INT 20
76836: PUSH
76837: LD_INT 21
76839: PUSH
76840: LD_INT 22
76842: PUSH
76843: LD_INT 23
76845: PUSH
76846: LD_INT 24
76848: PUSH
76849: LD_INT 25
76851: PUSH
76852: LD_INT 26
76854: PUSH
76855: LD_INT 28
76857: PUSH
76858: LD_INT 30
76860: PUSH
76861: LD_INT 31
76863: PUSH
76864: LD_INT 32
76866: PUSH
76867: LD_INT 34
76869: PUSH
76870: LD_INT 36
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: LIST
76886: LIST
76887: LIST
76888: LIST
76889: LIST
76890: LIST
76891: LIST
76892: LIST
76893: LIST
76894: LIST
76895: LIST
76896: LIST
76897: LIST
76898: LIST
76899: LIST
76900: LIST
76901: LIST
76902: LIST
76903: LIST
76904: LIST
76905: PUSH
76906: LD_INT 101
76908: PUSH
76909: LD_INT 102
76911: PUSH
76912: LD_INT 103
76914: PUSH
76915: LD_INT 104
76917: PUSH
76918: LD_INT 105
76920: PUSH
76921: LD_INT 106
76923: PUSH
76924: LD_INT 107
76926: PUSH
76927: LD_INT 108
76929: PUSH
76930: LD_INT 109
76932: PUSH
76933: LD_INT 110
76935: PUSH
76936: LD_INT 111
76938: PUSH
76939: LD_INT 112
76941: PUSH
76942: LD_INT 114
76944: PUSH
76945: LD_INT 116
76947: PUSH
76948: LD_INT 117
76950: PUSH
76951: LD_INT 118
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: LIST
76958: LIST
76959: LIST
76960: LIST
76961: LIST
76962: LIST
76963: LIST
76964: LIST
76965: LIST
76966: LIST
76967: LIST
76968: LIST
76969: LIST
76970: LIST
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: ST_TO_ADDR
76976: GO 78659
76978: LD_INT 12
76980: DOUBLE
76981: EQUAL
76982: IFTRUE 76986
76984: GO 77206
76986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
76987: LD_ADDR_VAR 0 2
76991: PUSH
76992: LD_INT 1
76994: PUSH
76995: LD_INT 2
76997: PUSH
76998: LD_INT 3
77000: PUSH
77001: LD_INT 4
77003: PUSH
77004: LD_INT 5
77006: PUSH
77007: LD_INT 6
77009: PUSH
77010: LD_INT 7
77012: PUSH
77013: LD_INT 8
77015: PUSH
77016: LD_INT 9
77018: PUSH
77019: LD_INT 10
77021: PUSH
77022: LD_INT 11
77024: PUSH
77025: LD_INT 12
77027: PUSH
77028: LD_INT 13
77030: PUSH
77031: LD_INT 14
77033: PUSH
77034: LD_INT 15
77036: PUSH
77037: LD_INT 16
77039: PUSH
77040: LD_INT 17
77042: PUSH
77043: LD_INT 18
77045: PUSH
77046: LD_INT 19
77048: PUSH
77049: LD_INT 20
77051: PUSH
77052: LD_INT 21
77054: PUSH
77055: LD_INT 22
77057: PUSH
77058: LD_INT 23
77060: PUSH
77061: LD_INT 24
77063: PUSH
77064: LD_INT 25
77066: PUSH
77067: LD_INT 26
77069: PUSH
77070: LD_INT 27
77072: PUSH
77073: LD_INT 28
77075: PUSH
77076: LD_INT 30
77078: PUSH
77079: LD_INT 31
77081: PUSH
77082: LD_INT 32
77084: PUSH
77085: LD_INT 33
77087: PUSH
77088: LD_INT 34
77090: PUSH
77091: LD_INT 36
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: LIST
77113: LIST
77114: LIST
77115: LIST
77116: LIST
77117: LIST
77118: LIST
77119: LIST
77120: LIST
77121: LIST
77122: LIST
77123: LIST
77124: LIST
77125: LIST
77126: LIST
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 101
77132: PUSH
77133: LD_INT 102
77135: PUSH
77136: LD_INT 103
77138: PUSH
77139: LD_INT 104
77141: PUSH
77142: LD_INT 105
77144: PUSH
77145: LD_INT 106
77147: PUSH
77148: LD_INT 107
77150: PUSH
77151: LD_INT 108
77153: PUSH
77154: LD_INT 109
77156: PUSH
77157: LD_INT 110
77159: PUSH
77160: LD_INT 111
77162: PUSH
77163: LD_INT 112
77165: PUSH
77166: LD_INT 113
77168: PUSH
77169: LD_INT 114
77171: PUSH
77172: LD_INT 116
77174: PUSH
77175: LD_INT 117
77177: PUSH
77178: LD_INT 118
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: LIST
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: ST_TO_ADDR
77204: GO 78659
77206: LD_INT 13
77208: DOUBLE
77209: EQUAL
77210: IFTRUE 77214
77212: GO 77422
77214: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
77215: LD_ADDR_VAR 0 2
77219: PUSH
77220: LD_INT 1
77222: PUSH
77223: LD_INT 2
77225: PUSH
77226: LD_INT 3
77228: PUSH
77229: LD_INT 4
77231: PUSH
77232: LD_INT 5
77234: PUSH
77235: LD_INT 8
77237: PUSH
77238: LD_INT 9
77240: PUSH
77241: LD_INT 10
77243: PUSH
77244: LD_INT 11
77246: PUSH
77247: LD_INT 12
77249: PUSH
77250: LD_INT 14
77252: PUSH
77253: LD_INT 15
77255: PUSH
77256: LD_INT 16
77258: PUSH
77259: LD_INT 17
77261: PUSH
77262: LD_INT 18
77264: PUSH
77265: LD_INT 19
77267: PUSH
77268: LD_INT 20
77270: PUSH
77271: LD_INT 21
77273: PUSH
77274: LD_INT 22
77276: PUSH
77277: LD_INT 23
77279: PUSH
77280: LD_INT 24
77282: PUSH
77283: LD_INT 25
77285: PUSH
77286: LD_INT 26
77288: PUSH
77289: LD_INT 27
77291: PUSH
77292: LD_INT 28
77294: PUSH
77295: LD_INT 30
77297: PUSH
77298: LD_INT 31
77300: PUSH
77301: LD_INT 32
77303: PUSH
77304: LD_INT 33
77306: PUSH
77307: LD_INT 34
77309: PUSH
77310: LD_INT 36
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: LIST
77321: LIST
77322: LIST
77323: LIST
77324: LIST
77325: LIST
77326: LIST
77327: LIST
77328: LIST
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: PUSH
77346: LD_INT 101
77348: PUSH
77349: LD_INT 102
77351: PUSH
77352: LD_INT 103
77354: PUSH
77355: LD_INT 104
77357: PUSH
77358: LD_INT 105
77360: PUSH
77361: LD_INT 106
77363: PUSH
77364: LD_INT 107
77366: PUSH
77367: LD_INT 108
77369: PUSH
77370: LD_INT 109
77372: PUSH
77373: LD_INT 110
77375: PUSH
77376: LD_INT 111
77378: PUSH
77379: LD_INT 112
77381: PUSH
77382: LD_INT 113
77384: PUSH
77385: LD_INT 114
77387: PUSH
77388: LD_INT 116
77390: PUSH
77391: LD_INT 117
77393: PUSH
77394: LD_INT 118
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: LIST
77409: LIST
77410: LIST
77411: LIST
77412: LIST
77413: LIST
77414: LIST
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: ST_TO_ADDR
77420: GO 78659
77422: LD_INT 14
77424: DOUBLE
77425: EQUAL
77426: IFTRUE 77430
77428: GO 77654
77430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
77431: LD_ADDR_VAR 0 2
77435: PUSH
77436: LD_INT 1
77438: PUSH
77439: LD_INT 2
77441: PUSH
77442: LD_INT 3
77444: PUSH
77445: LD_INT 4
77447: PUSH
77448: LD_INT 5
77450: PUSH
77451: LD_INT 6
77453: PUSH
77454: LD_INT 7
77456: PUSH
77457: LD_INT 8
77459: PUSH
77460: LD_INT 9
77462: PUSH
77463: LD_INT 10
77465: PUSH
77466: LD_INT 11
77468: PUSH
77469: LD_INT 12
77471: PUSH
77472: LD_INT 13
77474: PUSH
77475: LD_INT 14
77477: PUSH
77478: LD_INT 15
77480: PUSH
77481: LD_INT 16
77483: PUSH
77484: LD_INT 17
77486: PUSH
77487: LD_INT 18
77489: PUSH
77490: LD_INT 19
77492: PUSH
77493: LD_INT 20
77495: PUSH
77496: LD_INT 21
77498: PUSH
77499: LD_INT 22
77501: PUSH
77502: LD_INT 23
77504: PUSH
77505: LD_INT 24
77507: PUSH
77508: LD_INT 25
77510: PUSH
77511: LD_INT 26
77513: PUSH
77514: LD_INT 27
77516: PUSH
77517: LD_INT 28
77519: PUSH
77520: LD_INT 29
77522: PUSH
77523: LD_INT 30
77525: PUSH
77526: LD_INT 31
77528: PUSH
77529: LD_INT 32
77531: PUSH
77532: LD_INT 33
77534: PUSH
77535: LD_INT 34
77537: PUSH
77538: LD_INT 36
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: LIST
77570: LIST
77571: LIST
77572: LIST
77573: LIST
77574: LIST
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 101
77580: PUSH
77581: LD_INT 102
77583: PUSH
77584: LD_INT 103
77586: PUSH
77587: LD_INT 104
77589: PUSH
77590: LD_INT 105
77592: PUSH
77593: LD_INT 106
77595: PUSH
77596: LD_INT 107
77598: PUSH
77599: LD_INT 108
77601: PUSH
77602: LD_INT 109
77604: PUSH
77605: LD_INT 110
77607: PUSH
77608: LD_INT 111
77610: PUSH
77611: LD_INT 112
77613: PUSH
77614: LD_INT 113
77616: PUSH
77617: LD_INT 114
77619: PUSH
77620: LD_INT 116
77622: PUSH
77623: LD_INT 117
77625: PUSH
77626: LD_INT 118
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: LIST
77633: LIST
77634: LIST
77635: LIST
77636: LIST
77637: LIST
77638: LIST
77639: LIST
77640: LIST
77641: LIST
77642: LIST
77643: LIST
77644: LIST
77645: LIST
77646: LIST
77647: PUSH
77648: EMPTY
77649: LIST
77650: LIST
77651: ST_TO_ADDR
77652: GO 78659
77654: LD_INT 15
77656: DOUBLE
77657: EQUAL
77658: IFTRUE 77662
77660: GO 77886
77662: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
77663: LD_ADDR_VAR 0 2
77667: PUSH
77668: LD_INT 1
77670: PUSH
77671: LD_INT 2
77673: PUSH
77674: LD_INT 3
77676: PUSH
77677: LD_INT 4
77679: PUSH
77680: LD_INT 5
77682: PUSH
77683: LD_INT 6
77685: PUSH
77686: LD_INT 7
77688: PUSH
77689: LD_INT 8
77691: PUSH
77692: LD_INT 9
77694: PUSH
77695: LD_INT 10
77697: PUSH
77698: LD_INT 11
77700: PUSH
77701: LD_INT 12
77703: PUSH
77704: LD_INT 13
77706: PUSH
77707: LD_INT 14
77709: PUSH
77710: LD_INT 15
77712: PUSH
77713: LD_INT 16
77715: PUSH
77716: LD_INT 17
77718: PUSH
77719: LD_INT 18
77721: PUSH
77722: LD_INT 19
77724: PUSH
77725: LD_INT 20
77727: PUSH
77728: LD_INT 21
77730: PUSH
77731: LD_INT 22
77733: PUSH
77734: LD_INT 23
77736: PUSH
77737: LD_INT 24
77739: PUSH
77740: LD_INT 25
77742: PUSH
77743: LD_INT 26
77745: PUSH
77746: LD_INT 27
77748: PUSH
77749: LD_INT 28
77751: PUSH
77752: LD_INT 29
77754: PUSH
77755: LD_INT 30
77757: PUSH
77758: LD_INT 31
77760: PUSH
77761: LD_INT 32
77763: PUSH
77764: LD_INT 33
77766: PUSH
77767: LD_INT 34
77769: PUSH
77770: LD_INT 36
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: LIST
77777: LIST
77778: LIST
77779: LIST
77780: LIST
77781: LIST
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: LIST
77807: LIST
77808: LIST
77809: PUSH
77810: LD_INT 101
77812: PUSH
77813: LD_INT 102
77815: PUSH
77816: LD_INT 103
77818: PUSH
77819: LD_INT 104
77821: PUSH
77822: LD_INT 105
77824: PUSH
77825: LD_INT 106
77827: PUSH
77828: LD_INT 107
77830: PUSH
77831: LD_INT 108
77833: PUSH
77834: LD_INT 109
77836: PUSH
77837: LD_INT 110
77839: PUSH
77840: LD_INT 111
77842: PUSH
77843: LD_INT 112
77845: PUSH
77846: LD_INT 113
77848: PUSH
77849: LD_INT 114
77851: PUSH
77852: LD_INT 116
77854: PUSH
77855: LD_INT 117
77857: PUSH
77858: LD_INT 118
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: LIST
77865: LIST
77866: LIST
77867: LIST
77868: LIST
77869: LIST
77870: LIST
77871: LIST
77872: LIST
77873: LIST
77874: LIST
77875: LIST
77876: LIST
77877: LIST
77878: LIST
77879: PUSH
77880: EMPTY
77881: LIST
77882: LIST
77883: ST_TO_ADDR
77884: GO 78659
77886: LD_INT 16
77888: DOUBLE
77889: EQUAL
77890: IFTRUE 77894
77892: GO 78030
77894: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
77895: LD_ADDR_VAR 0 2
77899: PUSH
77900: LD_INT 2
77902: PUSH
77903: LD_INT 4
77905: PUSH
77906: LD_INT 5
77908: PUSH
77909: LD_INT 7
77911: PUSH
77912: LD_INT 11
77914: PUSH
77915: LD_INT 12
77917: PUSH
77918: LD_INT 15
77920: PUSH
77921: LD_INT 16
77923: PUSH
77924: LD_INT 20
77926: PUSH
77927: LD_INT 21
77929: PUSH
77930: LD_INT 22
77932: PUSH
77933: LD_INT 23
77935: PUSH
77936: LD_INT 25
77938: PUSH
77939: LD_INT 26
77941: PUSH
77942: LD_INT 30
77944: PUSH
77945: LD_INT 31
77947: PUSH
77948: LD_INT 32
77950: PUSH
77951: LD_INT 33
77953: PUSH
77954: LD_INT 34
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: LIST
77961: LIST
77962: LIST
77963: LIST
77964: LIST
77965: LIST
77966: LIST
77967: LIST
77968: LIST
77969: LIST
77970: LIST
77971: LIST
77972: LIST
77973: LIST
77974: LIST
77975: LIST
77976: LIST
77977: PUSH
77978: LD_INT 101
77980: PUSH
77981: LD_INT 102
77983: PUSH
77984: LD_INT 103
77986: PUSH
77987: LD_INT 106
77989: PUSH
77990: LD_INT 108
77992: PUSH
77993: LD_INT 112
77995: PUSH
77996: LD_INT 113
77998: PUSH
77999: LD_INT 114
78001: PUSH
78002: LD_INT 116
78004: PUSH
78005: LD_INT 117
78007: PUSH
78008: LD_INT 118
78010: PUSH
78011: EMPTY
78012: LIST
78013: LIST
78014: LIST
78015: LIST
78016: LIST
78017: LIST
78018: LIST
78019: LIST
78020: LIST
78021: LIST
78022: LIST
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: ST_TO_ADDR
78028: GO 78659
78030: LD_INT 17
78032: DOUBLE
78033: EQUAL
78034: IFTRUE 78038
78036: GO 78262
78038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
78039: LD_ADDR_VAR 0 2
78043: PUSH
78044: LD_INT 1
78046: PUSH
78047: LD_INT 2
78049: PUSH
78050: LD_INT 3
78052: PUSH
78053: LD_INT 4
78055: PUSH
78056: LD_INT 5
78058: PUSH
78059: LD_INT 6
78061: PUSH
78062: LD_INT 7
78064: PUSH
78065: LD_INT 8
78067: PUSH
78068: LD_INT 9
78070: PUSH
78071: LD_INT 10
78073: PUSH
78074: LD_INT 11
78076: PUSH
78077: LD_INT 12
78079: PUSH
78080: LD_INT 13
78082: PUSH
78083: LD_INT 14
78085: PUSH
78086: LD_INT 15
78088: PUSH
78089: LD_INT 16
78091: PUSH
78092: LD_INT 17
78094: PUSH
78095: LD_INT 18
78097: PUSH
78098: LD_INT 19
78100: PUSH
78101: LD_INT 20
78103: PUSH
78104: LD_INT 21
78106: PUSH
78107: LD_INT 22
78109: PUSH
78110: LD_INT 23
78112: PUSH
78113: LD_INT 24
78115: PUSH
78116: LD_INT 25
78118: PUSH
78119: LD_INT 26
78121: PUSH
78122: LD_INT 27
78124: PUSH
78125: LD_INT 28
78127: PUSH
78128: LD_INT 29
78130: PUSH
78131: LD_INT 30
78133: PUSH
78134: LD_INT 31
78136: PUSH
78137: LD_INT 32
78139: PUSH
78140: LD_INT 33
78142: PUSH
78143: LD_INT 34
78145: PUSH
78146: LD_INT 36
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: LIST
78177: LIST
78178: LIST
78179: LIST
78180: LIST
78181: LIST
78182: LIST
78183: LIST
78184: LIST
78185: PUSH
78186: LD_INT 101
78188: PUSH
78189: LD_INT 102
78191: PUSH
78192: LD_INT 103
78194: PUSH
78195: LD_INT 104
78197: PUSH
78198: LD_INT 105
78200: PUSH
78201: LD_INT 106
78203: PUSH
78204: LD_INT 107
78206: PUSH
78207: LD_INT 108
78209: PUSH
78210: LD_INT 109
78212: PUSH
78213: LD_INT 110
78215: PUSH
78216: LD_INT 111
78218: PUSH
78219: LD_INT 112
78221: PUSH
78222: LD_INT 113
78224: PUSH
78225: LD_INT 114
78227: PUSH
78228: LD_INT 116
78230: PUSH
78231: LD_INT 117
78233: PUSH
78234: LD_INT 118
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: LIST
78241: LIST
78242: LIST
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: LIST
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: ST_TO_ADDR
78260: GO 78659
78262: LD_INT 18
78264: DOUBLE
78265: EQUAL
78266: IFTRUE 78270
78268: GO 78418
78270: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
78271: LD_ADDR_VAR 0 2
78275: PUSH
78276: LD_INT 2
78278: PUSH
78279: LD_INT 4
78281: PUSH
78282: LD_INT 5
78284: PUSH
78285: LD_INT 7
78287: PUSH
78288: LD_INT 11
78290: PUSH
78291: LD_INT 12
78293: PUSH
78294: LD_INT 15
78296: PUSH
78297: LD_INT 16
78299: PUSH
78300: LD_INT 20
78302: PUSH
78303: LD_INT 21
78305: PUSH
78306: LD_INT 22
78308: PUSH
78309: LD_INT 23
78311: PUSH
78312: LD_INT 25
78314: PUSH
78315: LD_INT 26
78317: PUSH
78318: LD_INT 30
78320: PUSH
78321: LD_INT 31
78323: PUSH
78324: LD_INT 32
78326: PUSH
78327: LD_INT 33
78329: PUSH
78330: LD_INT 34
78332: PUSH
78333: LD_INT 35
78335: PUSH
78336: LD_INT 36
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: LIST
78343: LIST
78344: LIST
78345: LIST
78346: LIST
78347: LIST
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: LIST
78355: LIST
78356: LIST
78357: LIST
78358: LIST
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 101
78364: PUSH
78365: LD_INT 102
78367: PUSH
78368: LD_INT 103
78370: PUSH
78371: LD_INT 106
78373: PUSH
78374: LD_INT 108
78376: PUSH
78377: LD_INT 112
78379: PUSH
78380: LD_INT 113
78382: PUSH
78383: LD_INT 114
78385: PUSH
78386: LD_INT 115
78388: PUSH
78389: LD_INT 116
78391: PUSH
78392: LD_INT 117
78394: PUSH
78395: LD_INT 118
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: LIST
78402: LIST
78403: LIST
78404: LIST
78405: LIST
78406: LIST
78407: LIST
78408: LIST
78409: LIST
78410: LIST
78411: PUSH
78412: EMPTY
78413: LIST
78414: LIST
78415: ST_TO_ADDR
78416: GO 78659
78418: LD_INT 19
78420: DOUBLE
78421: EQUAL
78422: IFTRUE 78426
78424: GO 78658
78426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
78427: LD_ADDR_VAR 0 2
78431: PUSH
78432: LD_INT 1
78434: PUSH
78435: LD_INT 2
78437: PUSH
78438: LD_INT 3
78440: PUSH
78441: LD_INT 4
78443: PUSH
78444: LD_INT 5
78446: PUSH
78447: LD_INT 6
78449: PUSH
78450: LD_INT 7
78452: PUSH
78453: LD_INT 8
78455: PUSH
78456: LD_INT 9
78458: PUSH
78459: LD_INT 10
78461: PUSH
78462: LD_INT 11
78464: PUSH
78465: LD_INT 12
78467: PUSH
78468: LD_INT 13
78470: PUSH
78471: LD_INT 14
78473: PUSH
78474: LD_INT 15
78476: PUSH
78477: LD_INT 16
78479: PUSH
78480: LD_INT 17
78482: PUSH
78483: LD_INT 18
78485: PUSH
78486: LD_INT 19
78488: PUSH
78489: LD_INT 20
78491: PUSH
78492: LD_INT 21
78494: PUSH
78495: LD_INT 22
78497: PUSH
78498: LD_INT 23
78500: PUSH
78501: LD_INT 24
78503: PUSH
78504: LD_INT 25
78506: PUSH
78507: LD_INT 26
78509: PUSH
78510: LD_INT 27
78512: PUSH
78513: LD_INT 28
78515: PUSH
78516: LD_INT 29
78518: PUSH
78519: LD_INT 30
78521: PUSH
78522: LD_INT 31
78524: PUSH
78525: LD_INT 32
78527: PUSH
78528: LD_INT 33
78530: PUSH
78531: LD_INT 34
78533: PUSH
78534: LD_INT 35
78536: PUSH
78537: LD_INT 36
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: LIST
78544: LIST
78545: LIST
78546: LIST
78547: LIST
78548: LIST
78549: LIST
78550: LIST
78551: LIST
78552: LIST
78553: LIST
78554: LIST
78555: LIST
78556: LIST
78557: LIST
78558: LIST
78559: LIST
78560: LIST
78561: LIST
78562: LIST
78563: LIST
78564: LIST
78565: LIST
78566: LIST
78567: LIST
78568: LIST
78569: LIST
78570: LIST
78571: LIST
78572: LIST
78573: LIST
78574: LIST
78575: LIST
78576: LIST
78577: PUSH
78578: LD_INT 101
78580: PUSH
78581: LD_INT 102
78583: PUSH
78584: LD_INT 103
78586: PUSH
78587: LD_INT 104
78589: PUSH
78590: LD_INT 105
78592: PUSH
78593: LD_INT 106
78595: PUSH
78596: LD_INT 107
78598: PUSH
78599: LD_INT 108
78601: PUSH
78602: LD_INT 109
78604: PUSH
78605: LD_INT 110
78607: PUSH
78608: LD_INT 111
78610: PUSH
78611: LD_INT 112
78613: PUSH
78614: LD_INT 113
78616: PUSH
78617: LD_INT 114
78619: PUSH
78620: LD_INT 115
78622: PUSH
78623: LD_INT 116
78625: PUSH
78626: LD_INT 117
78628: PUSH
78629: LD_INT 118
78631: PUSH
78632: EMPTY
78633: LIST
78634: LIST
78635: LIST
78636: LIST
78637: LIST
78638: LIST
78639: LIST
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: LIST
78648: LIST
78649: LIST
78650: LIST
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: ST_TO_ADDR
78656: GO 78659
78658: POP
// end else
78659: GO 78890
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
78661: LD_ADDR_VAR 0 2
78665: PUSH
78666: LD_INT 1
78668: PUSH
78669: LD_INT 2
78671: PUSH
78672: LD_INT 3
78674: PUSH
78675: LD_INT 4
78677: PUSH
78678: LD_INT 5
78680: PUSH
78681: LD_INT 6
78683: PUSH
78684: LD_INT 7
78686: PUSH
78687: LD_INT 8
78689: PUSH
78690: LD_INT 9
78692: PUSH
78693: LD_INT 10
78695: PUSH
78696: LD_INT 11
78698: PUSH
78699: LD_INT 12
78701: PUSH
78702: LD_INT 13
78704: PUSH
78705: LD_INT 14
78707: PUSH
78708: LD_INT 15
78710: PUSH
78711: LD_INT 16
78713: PUSH
78714: LD_INT 17
78716: PUSH
78717: LD_INT 18
78719: PUSH
78720: LD_INT 19
78722: PUSH
78723: LD_INT 20
78725: PUSH
78726: LD_INT 21
78728: PUSH
78729: LD_INT 22
78731: PUSH
78732: LD_INT 23
78734: PUSH
78735: LD_INT 24
78737: PUSH
78738: LD_INT 25
78740: PUSH
78741: LD_INT 26
78743: PUSH
78744: LD_INT 27
78746: PUSH
78747: LD_INT 28
78749: PUSH
78750: LD_INT 29
78752: PUSH
78753: LD_INT 30
78755: PUSH
78756: LD_INT 31
78758: PUSH
78759: LD_INT 32
78761: PUSH
78762: LD_INT 33
78764: PUSH
78765: LD_INT 34
78767: PUSH
78768: LD_INT 35
78770: PUSH
78771: LD_INT 36
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: LIST
78781: LIST
78782: LIST
78783: LIST
78784: LIST
78785: LIST
78786: LIST
78787: LIST
78788: LIST
78789: LIST
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: LIST
78803: LIST
78804: LIST
78805: LIST
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: PUSH
78812: LD_INT 101
78814: PUSH
78815: LD_INT 102
78817: PUSH
78818: LD_INT 103
78820: PUSH
78821: LD_INT 104
78823: PUSH
78824: LD_INT 105
78826: PUSH
78827: LD_INT 106
78829: PUSH
78830: LD_INT 107
78832: PUSH
78833: LD_INT 108
78835: PUSH
78836: LD_INT 109
78838: PUSH
78839: LD_INT 110
78841: PUSH
78842: LD_INT 111
78844: PUSH
78845: LD_INT 112
78847: PUSH
78848: LD_INT 113
78850: PUSH
78851: LD_INT 114
78853: PUSH
78854: LD_INT 115
78856: PUSH
78857: LD_INT 116
78859: PUSH
78860: LD_INT 117
78862: PUSH
78863: LD_INT 118
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: LIST
78870: LIST
78871: LIST
78872: LIST
78873: LIST
78874: LIST
78875: LIST
78876: LIST
78877: LIST
78878: LIST
78879: LIST
78880: LIST
78881: LIST
78882: LIST
78883: LIST
78884: LIST
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: ST_TO_ADDR
// if result then
78890: LD_VAR 0 2
78894: IFFALSE 79680
// begin normal :=  ;
78896: LD_ADDR_VAR 0 5
78900: PUSH
78901: LD_STRING 
78903: ST_TO_ADDR
// hardcore :=  ;
78904: LD_ADDR_VAR 0 6
78908: PUSH
78909: LD_STRING 
78911: ST_TO_ADDR
// active :=  ;
78912: LD_ADDR_VAR 0 7
78916: PUSH
78917: LD_STRING 
78919: ST_TO_ADDR
// for i = 1 to normalCounter do
78920: LD_ADDR_VAR 0 8
78924: PUSH
78925: DOUBLE
78926: LD_INT 1
78928: DEC
78929: ST_TO_ADDR
78930: LD_EXP 76
78934: PUSH
78935: FOR_TO
78936: IFFALSE 79037
// begin tmp := 0 ;
78938: LD_ADDR_VAR 0 3
78942: PUSH
78943: LD_STRING 0
78945: ST_TO_ADDR
// if result [ 1 ] then
78946: LD_VAR 0 2
78950: PUSH
78951: LD_INT 1
78953: ARRAY
78954: IFFALSE 79019
// if result [ 1 ] [ 1 ] = i then
78956: LD_VAR 0 2
78960: PUSH
78961: LD_INT 1
78963: ARRAY
78964: PUSH
78965: LD_INT 1
78967: ARRAY
78968: PUSH
78969: LD_VAR 0 8
78973: EQUAL
78974: IFFALSE 79019
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
78976: LD_ADDR_VAR 0 2
78980: PUSH
78981: LD_VAR 0 2
78985: PPUSH
78986: LD_INT 1
78988: PPUSH
78989: LD_VAR 0 2
78993: PUSH
78994: LD_INT 1
78996: ARRAY
78997: PPUSH
78998: LD_INT 1
79000: PPUSH
79001: CALL_OW 3
79005: PPUSH
79006: CALL_OW 1
79010: ST_TO_ADDR
// tmp := 1 ;
79011: LD_ADDR_VAR 0 3
79015: PUSH
79016: LD_STRING 1
79018: ST_TO_ADDR
// end ; normal := normal & tmp ;
79019: LD_ADDR_VAR 0 5
79023: PUSH
79024: LD_VAR 0 5
79028: PUSH
79029: LD_VAR 0 3
79033: STR
79034: ST_TO_ADDR
// end ;
79035: GO 78935
79037: POP
79038: POP
// for i = 1 to hardcoreCounter do
79039: LD_ADDR_VAR 0 8
79043: PUSH
79044: DOUBLE
79045: LD_INT 1
79047: DEC
79048: ST_TO_ADDR
79049: LD_EXP 77
79053: PUSH
79054: FOR_TO
79055: IFFALSE 79160
// begin tmp := 0 ;
79057: LD_ADDR_VAR 0 3
79061: PUSH
79062: LD_STRING 0
79064: ST_TO_ADDR
// if result [ 2 ] then
79065: LD_VAR 0 2
79069: PUSH
79070: LD_INT 2
79072: ARRAY
79073: IFFALSE 79142
// if result [ 2 ] [ 1 ] = 100 + i then
79075: LD_VAR 0 2
79079: PUSH
79080: LD_INT 2
79082: ARRAY
79083: PUSH
79084: LD_INT 1
79086: ARRAY
79087: PUSH
79088: LD_INT 100
79090: PUSH
79091: LD_VAR 0 8
79095: PLUS
79096: EQUAL
79097: IFFALSE 79142
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
79099: LD_ADDR_VAR 0 2
79103: PUSH
79104: LD_VAR 0 2
79108: PPUSH
79109: LD_INT 2
79111: PPUSH
79112: LD_VAR 0 2
79116: PUSH
79117: LD_INT 2
79119: ARRAY
79120: PPUSH
79121: LD_INT 1
79123: PPUSH
79124: CALL_OW 3
79128: PPUSH
79129: CALL_OW 1
79133: ST_TO_ADDR
// tmp := 1 ;
79134: LD_ADDR_VAR 0 3
79138: PUSH
79139: LD_STRING 1
79141: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
79142: LD_ADDR_VAR 0 6
79146: PUSH
79147: LD_VAR 0 6
79151: PUSH
79152: LD_VAR 0 3
79156: STR
79157: ST_TO_ADDR
// end ;
79158: GO 79054
79160: POP
79161: POP
// if isGameLoad then
79162: LD_VAR 0 1
79166: IFFALSE 79641
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
79168: LD_ADDR_VAR 0 4
79172: PUSH
79173: LD_EXP 80
79177: PUSH
79178: LD_EXP 79
79182: PUSH
79183: LD_EXP 81
79187: PUSH
79188: LD_EXP 78
79192: PUSH
79193: LD_EXP 82
79197: PUSH
79198: LD_EXP 83
79202: PUSH
79203: LD_EXP 84
79207: PUSH
79208: LD_EXP 85
79212: PUSH
79213: LD_EXP 86
79217: PUSH
79218: LD_EXP 87
79222: PUSH
79223: LD_EXP 88
79227: PUSH
79228: LD_EXP 89
79232: PUSH
79233: LD_EXP 90
79237: PUSH
79238: LD_EXP 91
79242: PUSH
79243: LD_EXP 99
79247: PUSH
79248: LD_EXP 100
79252: PUSH
79253: LD_EXP 101
79257: PUSH
79258: LD_EXP 102
79262: PUSH
79263: LD_EXP 104
79267: PUSH
79268: LD_EXP 105
79272: PUSH
79273: LD_EXP 106
79277: PUSH
79278: LD_EXP 109
79282: PUSH
79283: LD_EXP 111
79287: PUSH
79288: LD_EXP 112
79292: PUSH
79293: LD_EXP 113
79297: PUSH
79298: LD_EXP 115
79302: PUSH
79303: LD_EXP 116
79307: PUSH
79308: LD_EXP 119
79312: PUSH
79313: LD_EXP 120
79317: PUSH
79318: LD_EXP 121
79322: PUSH
79323: LD_EXP 122
79327: PUSH
79328: LD_EXP 123
79332: PUSH
79333: LD_EXP 124
79337: PUSH
79338: LD_EXP 125
79342: PUSH
79343: LD_EXP 126
79347: PUSH
79348: LD_EXP 127
79352: PUSH
79353: LD_EXP 92
79357: PUSH
79358: LD_EXP 93
79362: PUSH
79363: LD_EXP 96
79367: PUSH
79368: LD_EXP 97
79372: PUSH
79373: LD_EXP 98
79377: PUSH
79378: LD_EXP 94
79382: PUSH
79383: LD_EXP 95
79387: PUSH
79388: LD_EXP 103
79392: PUSH
79393: LD_EXP 107
79397: PUSH
79398: LD_EXP 108
79402: PUSH
79403: LD_EXP 110
79407: PUSH
79408: LD_EXP 114
79412: PUSH
79413: LD_EXP 117
79417: PUSH
79418: LD_EXP 118
79422: PUSH
79423: LD_EXP 128
79427: PUSH
79428: LD_EXP 129
79432: PUSH
79433: LD_EXP 130
79437: PUSH
79438: LD_EXP 131
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: LIST
79447: LIST
79448: LIST
79449: LIST
79450: LIST
79451: LIST
79452: LIST
79453: LIST
79454: LIST
79455: LIST
79456: LIST
79457: LIST
79458: LIST
79459: LIST
79460: LIST
79461: LIST
79462: LIST
79463: LIST
79464: LIST
79465: LIST
79466: LIST
79467: LIST
79468: LIST
79469: LIST
79470: LIST
79471: LIST
79472: LIST
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: LIST
79491: LIST
79492: LIST
79493: LIST
79494: LIST
79495: LIST
79496: LIST
79497: LIST
79498: ST_TO_ADDR
// tmp :=  ;
79499: LD_ADDR_VAR 0 3
79503: PUSH
79504: LD_STRING 
79506: ST_TO_ADDR
// for i = 1 to normalCounter do
79507: LD_ADDR_VAR 0 8
79511: PUSH
79512: DOUBLE
79513: LD_INT 1
79515: DEC
79516: ST_TO_ADDR
79517: LD_EXP 76
79521: PUSH
79522: FOR_TO
79523: IFFALSE 79559
// begin if flags [ i ] then
79525: LD_VAR 0 4
79529: PUSH
79530: LD_VAR 0 8
79534: ARRAY
79535: IFFALSE 79557
// tmp := tmp & i & ; ;
79537: LD_ADDR_VAR 0 3
79541: PUSH
79542: LD_VAR 0 3
79546: PUSH
79547: LD_VAR 0 8
79551: STR
79552: PUSH
79553: LD_STRING ;
79555: STR
79556: ST_TO_ADDR
// end ;
79557: GO 79522
79559: POP
79560: POP
// for i = 1 to hardcoreCounter do
79561: LD_ADDR_VAR 0 8
79565: PUSH
79566: DOUBLE
79567: LD_INT 1
79569: DEC
79570: ST_TO_ADDR
79571: LD_EXP 77
79575: PUSH
79576: FOR_TO
79577: IFFALSE 79623
// begin if flags [ normalCounter + i ] then
79579: LD_VAR 0 4
79583: PUSH
79584: LD_EXP 76
79588: PUSH
79589: LD_VAR 0 8
79593: PLUS
79594: ARRAY
79595: IFFALSE 79621
// tmp := tmp & ( 100 + i ) & ; ;
79597: LD_ADDR_VAR 0 3
79601: PUSH
79602: LD_VAR 0 3
79606: PUSH
79607: LD_INT 100
79609: PUSH
79610: LD_VAR 0 8
79614: PLUS
79615: STR
79616: PUSH
79617: LD_STRING ;
79619: STR
79620: ST_TO_ADDR
// end ;
79621: GO 79576
79623: POP
79624: POP
// if tmp then
79625: LD_VAR 0 3
79629: IFFALSE 79641
// active := tmp ;
79631: LD_ADDR_VAR 0 7
79635: PUSH
79636: LD_VAR 0 3
79640: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
79641: LD_STRING getStreamItemsFromMission("
79643: PUSH
79644: LD_VAR 0 5
79648: STR
79649: PUSH
79650: LD_STRING ","
79652: STR
79653: PUSH
79654: LD_VAR 0 6
79658: STR
79659: PUSH
79660: LD_STRING ","
79662: STR
79663: PUSH
79664: LD_VAR 0 7
79668: STR
79669: PUSH
79670: LD_STRING ")
79672: STR
79673: PPUSH
79674: CALL_OW 559
// end else
79678: GO 79687
// ToLua ( getStreamItemsFromMission("","","") ) ;
79680: LD_STRING getStreamItemsFromMission("","","")
79682: PPUSH
79683: CALL_OW 559
// end ;
79687: LD_VAR 0 2
79691: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
79692: LD_EXP 75
79696: IFFALSE 79704
79698: PUSH
79699: LD_EXP 80
79703: AND
79704: IFFALSE 79828
79706: GO 79708
79708: DISABLE
79709: LD_INT 0
79711: PPUSH
79712: PPUSH
// begin enable ;
79713: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
79714: LD_ADDR_VAR 0 2
79718: PUSH
79719: LD_INT 22
79721: PUSH
79722: LD_OWVAR 2
79726: PUSH
79727: EMPTY
79728: LIST
79729: LIST
79730: PUSH
79731: LD_INT 2
79733: PUSH
79734: LD_INT 34
79736: PUSH
79737: LD_INT 7
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: PUSH
79744: LD_INT 34
79746: PUSH
79747: LD_INT 45
79749: PUSH
79750: EMPTY
79751: LIST
79752: LIST
79753: PUSH
79754: LD_INT 34
79756: PUSH
79757: LD_INT 28
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: LD_INT 34
79766: PUSH
79767: LD_INT 47
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: LIST
79778: LIST
79779: LIST
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PPUSH
79785: CALL_OW 69
79789: ST_TO_ADDR
// if not tmp then
79790: LD_VAR 0 2
79794: NOT
79795: IFFALSE 79799
// exit ;
79797: GO 79828
// for i in tmp do
79799: LD_ADDR_VAR 0 1
79803: PUSH
79804: LD_VAR 0 2
79808: PUSH
79809: FOR_IN
79810: IFFALSE 79826
// begin SetLives ( i , 0 ) ;
79812: LD_VAR 0 1
79816: PPUSH
79817: LD_INT 0
79819: PPUSH
79820: CALL_OW 234
// end ;
79824: GO 79809
79826: POP
79827: POP
// end ;
79828: PPOPN 2
79830: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
79831: LD_EXP 75
79835: IFFALSE 79843
79837: PUSH
79838: LD_EXP 81
79842: AND
79843: IFFALSE 79927
79845: GO 79847
79847: DISABLE
79848: LD_INT 0
79850: PPUSH
79851: PPUSH
// begin enable ;
79852: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
79853: LD_ADDR_VAR 0 2
79857: PUSH
79858: LD_INT 22
79860: PUSH
79861: LD_OWVAR 2
79865: PUSH
79866: EMPTY
79867: LIST
79868: LIST
79869: PUSH
79870: LD_INT 32
79872: PUSH
79873: LD_INT 3
79875: PUSH
79876: EMPTY
79877: LIST
79878: LIST
79879: PUSH
79880: EMPTY
79881: LIST
79882: LIST
79883: PPUSH
79884: CALL_OW 69
79888: ST_TO_ADDR
// if not tmp then
79889: LD_VAR 0 2
79893: NOT
79894: IFFALSE 79898
// exit ;
79896: GO 79927
// for i in tmp do
79898: LD_ADDR_VAR 0 1
79902: PUSH
79903: LD_VAR 0 2
79907: PUSH
79908: FOR_IN
79909: IFFALSE 79925
// begin SetLives ( i , 0 ) ;
79911: LD_VAR 0 1
79915: PPUSH
79916: LD_INT 0
79918: PPUSH
79919: CALL_OW 234
// end ;
79923: GO 79908
79925: POP
79926: POP
// end ;
79927: PPOPN 2
79929: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
79930: LD_EXP 75
79934: IFFALSE 79942
79936: PUSH
79937: LD_EXP 78
79941: AND
79942: IFFALSE 80035
79944: GO 79946
79946: DISABLE
79947: LD_INT 0
79949: PPUSH
// begin enable ;
79950: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
79951: LD_ADDR_VAR 0 1
79955: PUSH
79956: LD_INT 22
79958: PUSH
79959: LD_OWVAR 2
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 2
79970: PUSH
79971: LD_INT 25
79973: PUSH
79974: LD_INT 5
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: PUSH
79981: LD_INT 25
79983: PUSH
79984: LD_INT 9
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: PUSH
79991: LD_INT 25
79993: PUSH
79994: LD_INT 8
79996: PUSH
79997: EMPTY
79998: LIST
79999: LIST
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: LIST
80005: LIST
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PPUSH
80011: CALL_OW 69
80015: PUSH
80016: FOR_IN
80017: IFFALSE 80033
// begin SetClass ( i , 1 ) ;
80019: LD_VAR 0 1
80023: PPUSH
80024: LD_INT 1
80026: PPUSH
80027: CALL_OW 336
// end ;
80031: GO 80016
80033: POP
80034: POP
// end ;
80035: PPOPN 1
80037: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
80038: LD_EXP 75
80042: IFFALSE 80050
80044: PUSH
80045: LD_EXP 79
80049: AND
80050: IFFALSE 80062
80052: PUSH
80053: LD_OWVAR 65
80057: PUSH
80058: LD_INT 7
80060: LESS
80061: AND
80062: IFFALSE 80076
80064: GO 80066
80066: DISABLE
// begin enable ;
80067: ENABLE
// game_speed := 7 ;
80068: LD_ADDR_OWVAR 65
80072: PUSH
80073: LD_INT 7
80075: ST_TO_ADDR
// end ;
80076: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
80077: LD_EXP 75
80081: IFFALSE 80089
80083: PUSH
80084: LD_EXP 82
80088: AND
80089: IFFALSE 80291
80091: GO 80093
80093: DISABLE
80094: LD_INT 0
80096: PPUSH
80097: PPUSH
80098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80099: LD_ADDR_VAR 0 3
80103: PUSH
80104: LD_INT 81
80106: PUSH
80107: LD_OWVAR 2
80111: PUSH
80112: EMPTY
80113: LIST
80114: LIST
80115: PUSH
80116: LD_INT 21
80118: PUSH
80119: LD_INT 1
80121: PUSH
80122: EMPTY
80123: LIST
80124: LIST
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: PPUSH
80130: CALL_OW 69
80134: ST_TO_ADDR
// if not tmp then
80135: LD_VAR 0 3
80139: NOT
80140: IFFALSE 80144
// exit ;
80142: GO 80291
// if tmp > 5 then
80144: LD_VAR 0 3
80148: PUSH
80149: LD_INT 5
80151: GREATER
80152: IFFALSE 80164
// k := 5 else
80154: LD_ADDR_VAR 0 2
80158: PUSH
80159: LD_INT 5
80161: ST_TO_ADDR
80162: GO 80174
// k := tmp ;
80164: LD_ADDR_VAR 0 2
80168: PUSH
80169: LD_VAR 0 3
80173: ST_TO_ADDR
// for i := 1 to k do
80174: LD_ADDR_VAR 0 1
80178: PUSH
80179: DOUBLE
80180: LD_INT 1
80182: DEC
80183: ST_TO_ADDR
80184: LD_VAR 0 2
80188: PUSH
80189: FOR_TO
80190: IFFALSE 80289
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
80192: LD_VAR 0 3
80196: PUSH
80197: LD_VAR 0 1
80201: ARRAY
80202: PPUSH
80203: LD_VAR 0 1
80207: PUSH
80208: LD_INT 4
80210: MOD
80211: PUSH
80212: LD_INT 1
80214: PLUS
80215: PPUSH
80216: CALL_OW 259
80220: PUSH
80221: LD_INT 10
80223: LESS
80224: IFFALSE 80287
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
80226: LD_VAR 0 3
80230: PUSH
80231: LD_VAR 0 1
80235: ARRAY
80236: PPUSH
80237: LD_VAR 0 1
80241: PUSH
80242: LD_INT 4
80244: MOD
80245: PUSH
80246: LD_INT 1
80248: PLUS
80249: PPUSH
80250: LD_VAR 0 3
80254: PUSH
80255: LD_VAR 0 1
80259: ARRAY
80260: PPUSH
80261: LD_VAR 0 1
80265: PUSH
80266: LD_INT 4
80268: MOD
80269: PUSH
80270: LD_INT 1
80272: PLUS
80273: PPUSH
80274: CALL_OW 259
80278: PUSH
80279: LD_INT 1
80281: PLUS
80282: PPUSH
80283: CALL_OW 237
80287: GO 80189
80289: POP
80290: POP
// end ;
80291: PPOPN 3
80293: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
80294: LD_EXP 75
80298: IFFALSE 80306
80300: PUSH
80301: LD_EXP 83
80305: AND
80306: IFFALSE 80326
80308: GO 80310
80310: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
80311: LD_INT 4
80313: PPUSH
80314: LD_OWVAR 2
80318: PPUSH
80319: LD_INT 0
80321: PPUSH
80322: CALL_OW 324
80326: END
// every 0 0$1 trigger StreamModeActive and sShovel do
80327: LD_EXP 75
80331: IFFALSE 80339
80333: PUSH
80334: LD_EXP 112
80338: AND
80339: IFFALSE 80359
80341: GO 80343
80343: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
80344: LD_INT 19
80346: PPUSH
80347: LD_OWVAR 2
80351: PPUSH
80352: LD_INT 0
80354: PPUSH
80355: CALL_OW 324
80359: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
80360: LD_EXP 75
80364: IFFALSE 80372
80366: PUSH
80367: LD_EXP 84
80371: AND
80372: IFFALSE 80474
80374: GO 80376
80376: DISABLE
80377: LD_INT 0
80379: PPUSH
80380: PPUSH
// begin enable ;
80381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
80382: LD_ADDR_VAR 0 2
80386: PUSH
80387: LD_INT 22
80389: PUSH
80390: LD_OWVAR 2
80394: PUSH
80395: EMPTY
80396: LIST
80397: LIST
80398: PUSH
80399: LD_INT 2
80401: PUSH
80402: LD_INT 34
80404: PUSH
80405: LD_INT 11
80407: PUSH
80408: EMPTY
80409: LIST
80410: LIST
80411: PUSH
80412: LD_INT 34
80414: PUSH
80415: LD_INT 30
80417: PUSH
80418: EMPTY
80419: LIST
80420: LIST
80421: PUSH
80422: EMPTY
80423: LIST
80424: LIST
80425: LIST
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PPUSH
80431: CALL_OW 69
80435: ST_TO_ADDR
// if not tmp then
80436: LD_VAR 0 2
80440: NOT
80441: IFFALSE 80445
// exit ;
80443: GO 80474
// for i in tmp do
80445: LD_ADDR_VAR 0 1
80449: PUSH
80450: LD_VAR 0 2
80454: PUSH
80455: FOR_IN
80456: IFFALSE 80472
// begin SetLives ( i , 0 ) ;
80458: LD_VAR 0 1
80462: PPUSH
80463: LD_INT 0
80465: PPUSH
80466: CALL_OW 234
// end ;
80470: GO 80455
80472: POP
80473: POP
// end ;
80474: PPOPN 2
80476: END
// every 0 0$1 trigger StreamModeActive and sBunker do
80477: LD_EXP 75
80481: IFFALSE 80489
80483: PUSH
80484: LD_EXP 85
80488: AND
80489: IFFALSE 80509
80491: GO 80493
80493: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
80494: LD_INT 32
80496: PPUSH
80497: LD_OWVAR 2
80501: PPUSH
80502: LD_INT 0
80504: PPUSH
80505: CALL_OW 324
80509: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
80510: LD_EXP 75
80514: IFFALSE 80522
80516: PUSH
80517: LD_EXP 86
80521: AND
80522: IFFALSE 80705
80524: GO 80526
80526: DISABLE
80527: LD_INT 0
80529: PPUSH
80530: PPUSH
80531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
80532: LD_ADDR_VAR 0 2
80536: PUSH
80537: LD_INT 22
80539: PUSH
80540: LD_OWVAR 2
80544: PUSH
80545: EMPTY
80546: LIST
80547: LIST
80548: PUSH
80549: LD_INT 33
80551: PUSH
80552: LD_INT 3
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: PUSH
80559: EMPTY
80560: LIST
80561: LIST
80562: PPUSH
80563: CALL_OW 69
80567: ST_TO_ADDR
// if not tmp then
80568: LD_VAR 0 2
80572: NOT
80573: IFFALSE 80577
// exit ;
80575: GO 80705
// side := 0 ;
80577: LD_ADDR_VAR 0 3
80581: PUSH
80582: LD_INT 0
80584: ST_TO_ADDR
// for i := 1 to 8 do
80585: LD_ADDR_VAR 0 1
80589: PUSH
80590: DOUBLE
80591: LD_INT 1
80593: DEC
80594: ST_TO_ADDR
80595: LD_INT 8
80597: PUSH
80598: FOR_TO
80599: IFFALSE 80649
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
80601: LD_OWVAR 2
80605: PUSH
80606: LD_VAR 0 1
80610: NONEQUAL
80611: IFFALSE 80633
80613: PUSH
80614: LD_OWVAR 2
80618: PPUSH
80619: LD_VAR 0 1
80623: PPUSH
80624: CALL_OW 81
80628: PUSH
80629: LD_INT 2
80631: EQUAL
80632: AND
80633: IFFALSE 80647
// begin side := i ;
80635: LD_ADDR_VAR 0 3
80639: PUSH
80640: LD_VAR 0 1
80644: ST_TO_ADDR
// break ;
80645: GO 80649
// end ;
80647: GO 80598
80649: POP
80650: POP
// if not side then
80651: LD_VAR 0 3
80655: NOT
80656: IFFALSE 80660
// exit ;
80658: GO 80705
// for i := 1 to tmp do
80660: LD_ADDR_VAR 0 1
80664: PUSH
80665: DOUBLE
80666: LD_INT 1
80668: DEC
80669: ST_TO_ADDR
80670: LD_VAR 0 2
80674: PUSH
80675: FOR_TO
80676: IFFALSE 80703
// if Prob ( 60 ) then
80678: LD_INT 60
80680: PPUSH
80681: CALL_OW 13
80685: IFFALSE 80701
// SetSide ( i , side ) ;
80687: LD_VAR 0 1
80691: PPUSH
80692: LD_VAR 0 3
80696: PPUSH
80697: CALL_OW 235
80701: GO 80675
80703: POP
80704: POP
// end ;
80705: PPOPN 3
80707: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
80708: LD_EXP 75
80712: IFFALSE 80720
80714: PUSH
80715: LD_EXP 88
80719: AND
80720: IFFALSE 80839
80722: GO 80724
80724: DISABLE
80725: LD_INT 0
80727: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
80728: LD_ADDR_VAR 0 1
80732: PUSH
80733: LD_INT 22
80735: PUSH
80736: LD_OWVAR 2
80740: PUSH
80741: EMPTY
80742: LIST
80743: LIST
80744: PUSH
80745: LD_INT 21
80747: PUSH
80748: LD_INT 1
80750: PUSH
80751: EMPTY
80752: LIST
80753: LIST
80754: PUSH
80755: LD_INT 3
80757: PUSH
80758: LD_INT 23
80760: PUSH
80761: LD_INT 0
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: PUSH
80768: EMPTY
80769: LIST
80770: LIST
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: LIST
80776: PPUSH
80777: CALL_OW 69
80781: PUSH
80782: FOR_IN
80783: IFFALSE 80837
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
80785: LD_VAR 0 1
80789: PPUSH
80790: CALL_OW 257
80794: PUSH
80795: LD_INT 1
80797: PUSH
80798: LD_INT 2
80800: PUSH
80801: LD_INT 3
80803: PUSH
80804: LD_INT 4
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: LIST
80811: LIST
80812: IN
80813: IFFALSE 80835
// SetClass ( un , rand ( 1 , 4 ) ) ;
80815: LD_VAR 0 1
80819: PPUSH
80820: LD_INT 1
80822: PPUSH
80823: LD_INT 4
80825: PPUSH
80826: CALL_OW 12
80830: PPUSH
80831: CALL_OW 336
80835: GO 80782
80837: POP
80838: POP
// end ;
80839: PPOPN 1
80841: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
80842: LD_EXP 75
80846: IFFALSE 80854
80848: PUSH
80849: LD_EXP 87
80853: AND
80854: IFFALSE 80933
80856: GO 80858
80858: DISABLE
80859: LD_INT 0
80861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
80862: LD_ADDR_VAR 0 1
80866: PUSH
80867: LD_INT 22
80869: PUSH
80870: LD_OWVAR 2
80874: PUSH
80875: EMPTY
80876: LIST
80877: LIST
80878: PUSH
80879: LD_INT 21
80881: PUSH
80882: LD_INT 3
80884: PUSH
80885: EMPTY
80886: LIST
80887: LIST
80888: PUSH
80889: EMPTY
80890: LIST
80891: LIST
80892: PPUSH
80893: CALL_OW 69
80897: ST_TO_ADDR
// if not tmp then
80898: LD_VAR 0 1
80902: NOT
80903: IFFALSE 80907
// exit ;
80905: GO 80933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
80907: LD_VAR 0 1
80911: PUSH
80912: LD_INT 1
80914: PPUSH
80915: LD_VAR 0 1
80919: PPUSH
80920: CALL_OW 12
80924: ARRAY
80925: PPUSH
80926: LD_INT 100
80928: PPUSH
80929: CALL_OW 234
// end ;
80933: PPOPN 1
80935: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
80936: LD_EXP 75
80940: IFFALSE 80948
80942: PUSH
80943: LD_EXP 89
80947: AND
80948: IFFALSE 81046
80950: GO 80952
80952: DISABLE
80953: LD_INT 0
80955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
80956: LD_ADDR_VAR 0 1
80960: PUSH
80961: LD_INT 22
80963: PUSH
80964: LD_OWVAR 2
80968: PUSH
80969: EMPTY
80970: LIST
80971: LIST
80972: PUSH
80973: LD_INT 21
80975: PUSH
80976: LD_INT 1
80978: PUSH
80979: EMPTY
80980: LIST
80981: LIST
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PPUSH
80987: CALL_OW 69
80991: ST_TO_ADDR
// if not tmp then
80992: LD_VAR 0 1
80996: NOT
80997: IFFALSE 81001
// exit ;
80999: GO 81046
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
81001: LD_VAR 0 1
81005: PUSH
81006: LD_INT 1
81008: PPUSH
81009: LD_VAR 0 1
81013: PPUSH
81014: CALL_OW 12
81018: ARRAY
81019: PPUSH
81020: LD_INT 1
81022: PPUSH
81023: LD_INT 4
81025: PPUSH
81026: CALL_OW 12
81030: PPUSH
81031: LD_INT 3000
81033: PPUSH
81034: LD_INT 9000
81036: PPUSH
81037: CALL_OW 12
81041: PPUSH
81042: CALL_OW 492
// end ;
81046: PPOPN 1
81048: END
// every 0 0$1 trigger StreamModeActive and sDepot do
81049: LD_EXP 75
81053: IFFALSE 81061
81055: PUSH
81056: LD_EXP 90
81060: AND
81061: IFFALSE 81081
81063: GO 81065
81065: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
81066: LD_INT 1
81068: PPUSH
81069: LD_OWVAR 2
81073: PPUSH
81074: LD_INT 0
81076: PPUSH
81077: CALL_OW 324
81081: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
81082: LD_EXP 75
81086: IFFALSE 81094
81088: PUSH
81089: LD_EXP 91
81093: AND
81094: IFFALSE 81177
81096: GO 81098
81098: DISABLE
81099: LD_INT 0
81101: PPUSH
81102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
81103: LD_ADDR_VAR 0 2
81107: PUSH
81108: LD_INT 22
81110: PUSH
81111: LD_OWVAR 2
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: LD_INT 21
81122: PUSH
81123: LD_INT 3
81125: PUSH
81126: EMPTY
81127: LIST
81128: LIST
81129: PUSH
81130: EMPTY
81131: LIST
81132: LIST
81133: PPUSH
81134: CALL_OW 69
81138: ST_TO_ADDR
// if not tmp then
81139: LD_VAR 0 2
81143: NOT
81144: IFFALSE 81148
// exit ;
81146: GO 81177
// for i in tmp do
81148: LD_ADDR_VAR 0 1
81152: PUSH
81153: LD_VAR 0 2
81157: PUSH
81158: FOR_IN
81159: IFFALSE 81175
// SetBLevel ( i , 10 ) ;
81161: LD_VAR 0 1
81165: PPUSH
81166: LD_INT 10
81168: PPUSH
81169: CALL_OW 241
81173: GO 81158
81175: POP
81176: POP
// end ;
81177: PPOPN 2
81179: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
81180: LD_EXP 75
81184: IFFALSE 81192
81186: PUSH
81187: LD_EXP 92
81191: AND
81192: IFFALSE 81303
81194: GO 81196
81196: DISABLE
81197: LD_INT 0
81199: PPUSH
81200: PPUSH
81201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
81202: LD_ADDR_VAR 0 3
81206: PUSH
81207: LD_INT 22
81209: PUSH
81210: LD_OWVAR 2
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: PUSH
81219: LD_INT 25
81221: PUSH
81222: LD_INT 1
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: PPUSH
81233: CALL_OW 69
81237: ST_TO_ADDR
// if not tmp then
81238: LD_VAR 0 3
81242: NOT
81243: IFFALSE 81247
// exit ;
81245: GO 81303
// un := tmp [ rand ( 1 , tmp ) ] ;
81247: LD_ADDR_VAR 0 2
81251: PUSH
81252: LD_VAR 0 3
81256: PUSH
81257: LD_INT 1
81259: PPUSH
81260: LD_VAR 0 3
81264: PPUSH
81265: CALL_OW 12
81269: ARRAY
81270: ST_TO_ADDR
// if Crawls ( un ) then
81271: LD_VAR 0 2
81275: PPUSH
81276: CALL_OW 318
81280: IFFALSE 81291
// ComWalk ( un ) ;
81282: LD_VAR 0 2
81286: PPUSH
81287: CALL_OW 138
// SetClass ( un , class_sniper ) ;
81291: LD_VAR 0 2
81295: PPUSH
81296: LD_INT 5
81298: PPUSH
81299: CALL_OW 336
// end ;
81303: PPOPN 3
81305: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
81306: LD_EXP 75
81310: IFFALSE 81318
81312: PUSH
81313: LD_EXP 93
81317: AND
81318: IFFALSE 81330
81320: PUSH
81321: LD_OWVAR 67
81325: PUSH
81326: LD_INT 4
81328: LESS
81329: AND
81330: IFFALSE 81349
81332: GO 81334
81334: DISABLE
// begin Difficulty := Difficulty + 1 ;
81335: LD_ADDR_OWVAR 67
81339: PUSH
81340: LD_OWVAR 67
81344: PUSH
81345: LD_INT 1
81347: PLUS
81348: ST_TO_ADDR
// end ;
81349: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
81350: LD_EXP 75
81354: IFFALSE 81362
81356: PUSH
81357: LD_EXP 94
81361: AND
81362: IFFALSE 81465
81364: GO 81366
81366: DISABLE
81367: LD_INT 0
81369: PPUSH
// begin for i := 1 to 5 do
81370: LD_ADDR_VAR 0 1
81374: PUSH
81375: DOUBLE
81376: LD_INT 1
81378: DEC
81379: ST_TO_ADDR
81380: LD_INT 5
81382: PUSH
81383: FOR_TO
81384: IFFALSE 81463
// begin uc_nation := nation_nature ;
81386: LD_ADDR_OWVAR 21
81390: PUSH
81391: LD_INT 0
81393: ST_TO_ADDR
// uc_side := 0 ;
81394: LD_ADDR_OWVAR 20
81398: PUSH
81399: LD_INT 0
81401: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81402: LD_ADDR_OWVAR 29
81406: PUSH
81407: LD_INT 12
81409: PUSH
81410: LD_INT 12
81412: PUSH
81413: EMPTY
81414: LIST
81415: LIST
81416: ST_TO_ADDR
// hc_agressivity := 20 ;
81417: LD_ADDR_OWVAR 35
81421: PUSH
81422: LD_INT 20
81424: ST_TO_ADDR
// hc_class := class_tiger ;
81425: LD_ADDR_OWVAR 28
81429: PUSH
81430: LD_INT 14
81432: ST_TO_ADDR
// hc_gallery :=  ;
81433: LD_ADDR_OWVAR 33
81437: PUSH
81438: LD_STRING 
81440: ST_TO_ADDR
// hc_name :=  ;
81441: LD_ADDR_OWVAR 26
81445: PUSH
81446: LD_STRING 
81448: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
81449: CALL_OW 44
81453: PPUSH
81454: LD_INT 0
81456: PPUSH
81457: CALL_OW 51
// end ;
81461: GO 81383
81463: POP
81464: POP
// end ;
81465: PPOPN 1
81467: END
// every 0 0$1 trigger StreamModeActive and sBomb do
81468: LD_EXP 75
81472: IFFALSE 81480
81474: PUSH
81475: LD_EXP 95
81479: AND
81480: IFFALSE 81489
81482: GO 81484
81484: DISABLE
// StreamSibBomb ;
81485: CALL 81490 0 0
81489: END
// export function StreamSibBomb ; var i , x , y ; begin
81490: LD_INT 0
81492: PPUSH
81493: PPUSH
81494: PPUSH
81495: PPUSH
// result := false ;
81496: LD_ADDR_VAR 0 1
81500: PUSH
81501: LD_INT 0
81503: ST_TO_ADDR
// for i := 1 to 16 do
81504: LD_ADDR_VAR 0 2
81508: PUSH
81509: DOUBLE
81510: LD_INT 1
81512: DEC
81513: ST_TO_ADDR
81514: LD_INT 16
81516: PUSH
81517: FOR_TO
81518: IFFALSE 81717
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81520: LD_ADDR_VAR 0 3
81524: PUSH
81525: LD_INT 10
81527: PUSH
81528: LD_INT 20
81530: PUSH
81531: LD_INT 30
81533: PUSH
81534: LD_INT 40
81536: PUSH
81537: LD_INT 50
81539: PUSH
81540: LD_INT 60
81542: PUSH
81543: LD_INT 70
81545: PUSH
81546: LD_INT 80
81548: PUSH
81549: LD_INT 90
81551: PUSH
81552: LD_INT 100
81554: PUSH
81555: LD_INT 110
81557: PUSH
81558: LD_INT 120
81560: PUSH
81561: LD_INT 130
81563: PUSH
81564: LD_INT 140
81566: PUSH
81567: LD_INT 150
81569: PUSH
81570: EMPTY
81571: LIST
81572: LIST
81573: LIST
81574: LIST
81575: LIST
81576: LIST
81577: LIST
81578: LIST
81579: LIST
81580: LIST
81581: LIST
81582: LIST
81583: LIST
81584: LIST
81585: LIST
81586: PUSH
81587: LD_INT 1
81589: PPUSH
81590: LD_INT 15
81592: PPUSH
81593: CALL_OW 12
81597: ARRAY
81598: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
81599: LD_ADDR_VAR 0 4
81603: PUSH
81604: LD_INT 10
81606: PUSH
81607: LD_INT 20
81609: PUSH
81610: LD_INT 30
81612: PUSH
81613: LD_INT 40
81615: PUSH
81616: LD_INT 50
81618: PUSH
81619: LD_INT 60
81621: PUSH
81622: LD_INT 70
81624: PUSH
81625: LD_INT 80
81627: PUSH
81628: LD_INT 90
81630: PUSH
81631: LD_INT 100
81633: PUSH
81634: LD_INT 110
81636: PUSH
81637: LD_INT 120
81639: PUSH
81640: LD_INT 130
81642: PUSH
81643: LD_INT 140
81645: PUSH
81646: LD_INT 150
81648: PUSH
81649: EMPTY
81650: LIST
81651: LIST
81652: LIST
81653: LIST
81654: LIST
81655: LIST
81656: LIST
81657: LIST
81658: LIST
81659: LIST
81660: LIST
81661: LIST
81662: LIST
81663: LIST
81664: LIST
81665: PUSH
81666: LD_INT 1
81668: PPUSH
81669: LD_INT 15
81671: PPUSH
81672: CALL_OW 12
81676: ARRAY
81677: ST_TO_ADDR
// if ValidHex ( x , y ) then
81678: LD_VAR 0 3
81682: PPUSH
81683: LD_VAR 0 4
81687: PPUSH
81688: CALL_OW 488
81692: IFFALSE 81715
// begin result := [ x , y ] ;
81694: LD_ADDR_VAR 0 1
81698: PUSH
81699: LD_VAR 0 3
81703: PUSH
81704: LD_VAR 0 4
81708: PUSH
81709: EMPTY
81710: LIST
81711: LIST
81712: ST_TO_ADDR
// break ;
81713: GO 81717
// end ; end ;
81715: GO 81517
81717: POP
81718: POP
// if result then
81719: LD_VAR 0 1
81723: IFFALSE 81783
// begin ToLua ( playSibBomb() ) ;
81725: LD_STRING playSibBomb()
81727: PPUSH
81728: CALL_OW 559
// wait ( 0 0$14 ) ;
81732: LD_INT 490
81734: PPUSH
81735: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
81739: LD_VAR 0 1
81743: PUSH
81744: LD_INT 1
81746: ARRAY
81747: PPUSH
81748: LD_VAR 0 1
81752: PUSH
81753: LD_INT 2
81755: ARRAY
81756: PPUSH
81757: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
81761: LD_VAR 0 1
81765: PUSH
81766: LD_INT 1
81768: ARRAY
81769: PPUSH
81770: LD_VAR 0 1
81774: PUSH
81775: LD_INT 2
81777: ARRAY
81778: PPUSH
81779: CALL_OW 429
// end ; end ;
81783: LD_VAR 0 1
81787: RET
// every 0 0$1 trigger StreamModeActive and sReset do
81788: LD_EXP 75
81792: IFFALSE 81800
81794: PUSH
81795: LD_EXP 97
81799: AND
81800: IFFALSE 81812
81802: GO 81804
81804: DISABLE
// YouLost (  ) ;
81805: LD_STRING 
81807: PPUSH
81808: CALL_OW 104
81812: END
// every 0 0$1 trigger StreamModeActive and sFog do
81813: LD_EXP 75
81817: IFFALSE 81825
81819: PUSH
81820: LD_EXP 96
81824: AND
81825: IFFALSE 81839
81827: GO 81829
81829: DISABLE
// FogOff ( your_side ) ;
81830: LD_OWVAR 2
81834: PPUSH
81835: CALL_OW 344
81839: END
// every 0 0$1 trigger StreamModeActive and sSun do
81840: LD_EXP 75
81844: IFFALSE 81852
81846: PUSH
81847: LD_EXP 98
81851: AND
81852: IFFALSE 81880
81854: GO 81856
81856: DISABLE
// begin solar_recharge_percent := 0 ;
81857: LD_ADDR_OWVAR 79
81861: PUSH
81862: LD_INT 0
81864: ST_TO_ADDR
// wait ( 5 5$00 ) ;
81865: LD_INT 10500
81867: PPUSH
81868: CALL_OW 67
// solar_recharge_percent := 100 ;
81872: LD_ADDR_OWVAR 79
81876: PUSH
81877: LD_INT 100
81879: ST_TO_ADDR
// end ;
81880: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
81881: LD_EXP 75
81885: IFFALSE 81893
81887: PUSH
81888: LD_EXP 99
81892: AND
81893: IFFALSE 82132
81895: GO 81897
81897: DISABLE
81898: LD_INT 0
81900: PPUSH
81901: PPUSH
81902: PPUSH
// begin tmp := [ ] ;
81903: LD_ADDR_VAR 0 3
81907: PUSH
81908: EMPTY
81909: ST_TO_ADDR
// for i := 1 to 6 do
81910: LD_ADDR_VAR 0 1
81914: PUSH
81915: DOUBLE
81916: LD_INT 1
81918: DEC
81919: ST_TO_ADDR
81920: LD_INT 6
81922: PUSH
81923: FOR_TO
81924: IFFALSE 82029
// begin uc_nation := nation_nature ;
81926: LD_ADDR_OWVAR 21
81930: PUSH
81931: LD_INT 0
81933: ST_TO_ADDR
// uc_side := 0 ;
81934: LD_ADDR_OWVAR 20
81938: PUSH
81939: LD_INT 0
81941: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
81942: LD_ADDR_OWVAR 29
81946: PUSH
81947: LD_INT 12
81949: PUSH
81950: LD_INT 12
81952: PUSH
81953: EMPTY
81954: LIST
81955: LIST
81956: ST_TO_ADDR
// hc_agressivity := 20 ;
81957: LD_ADDR_OWVAR 35
81961: PUSH
81962: LD_INT 20
81964: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
81965: LD_ADDR_OWVAR 28
81969: PUSH
81970: LD_INT 17
81972: ST_TO_ADDR
// hc_gallery :=  ;
81973: LD_ADDR_OWVAR 33
81977: PUSH
81978: LD_STRING 
81980: ST_TO_ADDR
// hc_name :=  ;
81981: LD_ADDR_OWVAR 26
81985: PUSH
81986: LD_STRING 
81988: ST_TO_ADDR
// un := CreateHuman ;
81989: LD_ADDR_VAR 0 2
81993: PUSH
81994: CALL_OW 44
81998: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
81999: LD_VAR 0 2
82003: PPUSH
82004: LD_INT 1
82006: PPUSH
82007: CALL_OW 51
// tmp := tmp ^ un ;
82011: LD_ADDR_VAR 0 3
82015: PUSH
82016: LD_VAR 0 3
82020: PUSH
82021: LD_VAR 0 2
82025: ADD
82026: ST_TO_ADDR
// end ;
82027: GO 81923
82029: POP
82030: POP
// repeat wait ( 0 0$1 ) ;
82031: LD_INT 35
82033: PPUSH
82034: CALL_OW 67
// for un in tmp do
82038: LD_ADDR_VAR 0 2
82042: PUSH
82043: LD_VAR 0 3
82047: PUSH
82048: FOR_IN
82049: IFFALSE 82123
// begin if IsDead ( un ) then
82051: LD_VAR 0 2
82055: PPUSH
82056: CALL_OW 301
82060: IFFALSE 82080
// begin tmp := tmp diff un ;
82062: LD_ADDR_VAR 0 3
82066: PUSH
82067: LD_VAR 0 3
82071: PUSH
82072: LD_VAR 0 2
82076: DIFF
82077: ST_TO_ADDR
// continue ;
82078: GO 82048
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
82080: LD_VAR 0 2
82084: PPUSH
82085: LD_INT 3
82087: PUSH
82088: LD_INT 22
82090: PUSH
82091: LD_INT 0
82093: PUSH
82094: EMPTY
82095: LIST
82096: LIST
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: PPUSH
82102: CALL_OW 69
82106: PPUSH
82107: LD_VAR 0 2
82111: PPUSH
82112: CALL_OW 74
82116: PPUSH
82117: CALL_OW 115
// end ;
82121: GO 82048
82123: POP
82124: POP
// until not tmp ;
82125: LD_VAR 0 3
82129: NOT
82130: IFFALSE 82031
// end ;
82132: PPOPN 3
82134: END
// every 0 0$1 trigger StreamModeActive and sTroll do
82135: LD_EXP 75
82139: IFFALSE 82147
82141: PUSH
82142: LD_EXP 100
82146: AND
82147: IFFALSE 82201
82149: GO 82151
82151: DISABLE
// begin ToLua ( displayTroll(); ) ;
82152: LD_STRING displayTroll();
82154: PPUSH
82155: CALL_OW 559
// wait ( 3 3$00 ) ;
82159: LD_INT 6300
82161: PPUSH
82162: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82166: LD_STRING hideTroll();
82168: PPUSH
82169: CALL_OW 559
// wait ( 1 1$00 ) ;
82173: LD_INT 2100
82175: PPUSH
82176: CALL_OW 67
// ToLua ( displayTroll(); ) ;
82180: LD_STRING displayTroll();
82182: PPUSH
82183: CALL_OW 559
// wait ( 1 1$00 ) ;
82187: LD_INT 2100
82189: PPUSH
82190: CALL_OW 67
// ToLua ( hideTroll(); ) ;
82194: LD_STRING hideTroll();
82196: PPUSH
82197: CALL_OW 559
// end ;
82201: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
82202: LD_EXP 75
82206: IFFALSE 82214
82208: PUSH
82209: LD_EXP 101
82213: AND
82214: IFFALSE 82277
82216: GO 82218
82218: DISABLE
82219: LD_INT 0
82221: PPUSH
// begin p := 0 ;
82222: LD_ADDR_VAR 0 1
82226: PUSH
82227: LD_INT 0
82229: ST_TO_ADDR
// repeat game_speed := 1 ;
82230: LD_ADDR_OWVAR 65
82234: PUSH
82235: LD_INT 1
82237: ST_TO_ADDR
// wait ( 0 0$1 ) ;
82238: LD_INT 35
82240: PPUSH
82241: CALL_OW 67
// p := p + 1 ;
82245: LD_ADDR_VAR 0 1
82249: PUSH
82250: LD_VAR 0 1
82254: PUSH
82255: LD_INT 1
82257: PLUS
82258: ST_TO_ADDR
// until p >= 60 ;
82259: LD_VAR 0 1
82263: PUSH
82264: LD_INT 60
82266: GREATEREQUAL
82267: IFFALSE 82230
// game_speed := 4 ;
82269: LD_ADDR_OWVAR 65
82273: PUSH
82274: LD_INT 4
82276: ST_TO_ADDR
// end ;
82277: PPOPN 1
82279: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
82280: LD_EXP 75
82284: IFFALSE 82292
82286: PUSH
82287: LD_EXP 102
82291: AND
82292: IFFALSE 82438
82294: GO 82296
82296: DISABLE
82297: LD_INT 0
82299: PPUSH
82300: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82301: LD_ADDR_VAR 0 1
82305: PUSH
82306: LD_INT 22
82308: PUSH
82309: LD_OWVAR 2
82313: PUSH
82314: EMPTY
82315: LIST
82316: LIST
82317: PUSH
82318: LD_INT 2
82320: PUSH
82321: LD_INT 30
82323: PUSH
82324: LD_INT 0
82326: PUSH
82327: EMPTY
82328: LIST
82329: LIST
82330: PUSH
82331: LD_INT 30
82333: PUSH
82334: LD_INT 1
82336: PUSH
82337: EMPTY
82338: LIST
82339: LIST
82340: PUSH
82341: EMPTY
82342: LIST
82343: LIST
82344: LIST
82345: PUSH
82346: EMPTY
82347: LIST
82348: LIST
82349: PPUSH
82350: CALL_OW 69
82354: ST_TO_ADDR
// if not depot then
82355: LD_VAR 0 1
82359: NOT
82360: IFFALSE 82364
// exit ;
82362: GO 82438
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
82364: LD_ADDR_VAR 0 2
82368: PUSH
82369: LD_VAR 0 1
82373: PUSH
82374: LD_INT 1
82376: PPUSH
82377: LD_VAR 0 1
82381: PPUSH
82382: CALL_OW 12
82386: ARRAY
82387: PPUSH
82388: CALL_OW 274
82392: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
82393: LD_VAR 0 2
82397: PPUSH
82398: LD_INT 1
82400: PPUSH
82401: LD_INT 0
82403: PPUSH
82404: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
82408: LD_VAR 0 2
82412: PPUSH
82413: LD_INT 2
82415: PPUSH
82416: LD_INT 0
82418: PPUSH
82419: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
82423: LD_VAR 0 2
82427: PPUSH
82428: LD_INT 3
82430: PPUSH
82431: LD_INT 0
82433: PPUSH
82434: CALL_OW 277
// end ;
82438: PPOPN 2
82440: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
82441: LD_EXP 75
82445: IFFALSE 82453
82447: PUSH
82448: LD_EXP 103
82452: AND
82453: IFFALSE 82550
82455: GO 82457
82457: DISABLE
82458: LD_INT 0
82460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82461: LD_ADDR_VAR 0 1
82465: PUSH
82466: LD_INT 22
82468: PUSH
82469: LD_OWVAR 2
82473: PUSH
82474: EMPTY
82475: LIST
82476: LIST
82477: PUSH
82478: LD_INT 21
82480: PUSH
82481: LD_INT 1
82483: PUSH
82484: EMPTY
82485: LIST
82486: LIST
82487: PUSH
82488: LD_INT 3
82490: PUSH
82491: LD_INT 23
82493: PUSH
82494: LD_INT 0
82496: PUSH
82497: EMPTY
82498: LIST
82499: LIST
82500: PUSH
82501: EMPTY
82502: LIST
82503: LIST
82504: PUSH
82505: EMPTY
82506: LIST
82507: LIST
82508: LIST
82509: PPUSH
82510: CALL_OW 69
82514: ST_TO_ADDR
// if not tmp then
82515: LD_VAR 0 1
82519: NOT
82520: IFFALSE 82524
// exit ;
82522: GO 82550
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
82524: LD_VAR 0 1
82528: PUSH
82529: LD_INT 1
82531: PPUSH
82532: LD_VAR 0 1
82536: PPUSH
82537: CALL_OW 12
82541: ARRAY
82542: PPUSH
82543: LD_INT 200
82545: PPUSH
82546: CALL_OW 234
// end ;
82550: PPOPN 1
82552: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
82553: LD_EXP 75
82557: IFFALSE 82565
82559: PUSH
82560: LD_EXP 104
82564: AND
82565: IFFALSE 82644
82567: GO 82569
82569: DISABLE
82570: LD_INT 0
82572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
82573: LD_ADDR_VAR 0 1
82577: PUSH
82578: LD_INT 22
82580: PUSH
82581: LD_OWVAR 2
82585: PUSH
82586: EMPTY
82587: LIST
82588: LIST
82589: PUSH
82590: LD_INT 21
82592: PUSH
82593: LD_INT 2
82595: PUSH
82596: EMPTY
82597: LIST
82598: LIST
82599: PUSH
82600: EMPTY
82601: LIST
82602: LIST
82603: PPUSH
82604: CALL_OW 69
82608: ST_TO_ADDR
// if not tmp then
82609: LD_VAR 0 1
82613: NOT
82614: IFFALSE 82618
// exit ;
82616: GO 82644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
82618: LD_VAR 0 1
82622: PUSH
82623: LD_INT 1
82625: PPUSH
82626: LD_VAR 0 1
82630: PPUSH
82631: CALL_OW 12
82635: ARRAY
82636: PPUSH
82637: LD_INT 60
82639: PPUSH
82640: CALL_OW 234
// end ;
82644: PPOPN 1
82646: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
82647: LD_EXP 75
82651: IFFALSE 82659
82653: PUSH
82654: LD_EXP 105
82658: AND
82659: IFFALSE 82758
82661: GO 82663
82663: DISABLE
82664: LD_INT 0
82666: PPUSH
82667: PPUSH
// begin enable ;
82668: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
82669: LD_ADDR_VAR 0 1
82673: PUSH
82674: LD_INT 22
82676: PUSH
82677: LD_OWVAR 2
82681: PUSH
82682: EMPTY
82683: LIST
82684: LIST
82685: PUSH
82686: LD_INT 61
82688: PUSH
82689: EMPTY
82690: LIST
82691: PUSH
82692: LD_INT 33
82694: PUSH
82695: LD_INT 2
82697: PUSH
82698: EMPTY
82699: LIST
82700: LIST
82701: PUSH
82702: EMPTY
82703: LIST
82704: LIST
82705: LIST
82706: PPUSH
82707: CALL_OW 69
82711: ST_TO_ADDR
// if not tmp then
82712: LD_VAR 0 1
82716: NOT
82717: IFFALSE 82721
// exit ;
82719: GO 82758
// for i in tmp do
82721: LD_ADDR_VAR 0 2
82725: PUSH
82726: LD_VAR 0 1
82730: PUSH
82731: FOR_IN
82732: IFFALSE 82756
// if IsControledBy ( i ) then
82734: LD_VAR 0 2
82738: PPUSH
82739: CALL_OW 312
82743: IFFALSE 82754
// ComUnlink ( i ) ;
82745: LD_VAR 0 2
82749: PPUSH
82750: CALL_OW 136
82754: GO 82731
82756: POP
82757: POP
// end ;
82758: PPOPN 2
82760: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
82761: LD_EXP 75
82765: IFFALSE 82773
82767: PUSH
82768: LD_EXP 106
82772: AND
82773: IFFALSE 82913
82775: GO 82777
82777: DISABLE
82778: LD_INT 0
82780: PPUSH
82781: PPUSH
// begin ToLua ( displayPowell(); ) ;
82782: LD_STRING displayPowell();
82784: PPUSH
82785: CALL_OW 559
// uc_side := 0 ;
82789: LD_ADDR_OWVAR 20
82793: PUSH
82794: LD_INT 0
82796: ST_TO_ADDR
// uc_nation := 2 ;
82797: LD_ADDR_OWVAR 21
82801: PUSH
82802: LD_INT 2
82804: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
82805: LD_ADDR_OWVAR 37
82809: PUSH
82810: LD_INT 14
82812: ST_TO_ADDR
// vc_engine := engine_siberite ;
82813: LD_ADDR_OWVAR 39
82817: PUSH
82818: LD_INT 3
82820: ST_TO_ADDR
// vc_control := control_apeman ;
82821: LD_ADDR_OWVAR 38
82825: PUSH
82826: LD_INT 5
82828: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
82829: LD_ADDR_OWVAR 40
82833: PUSH
82834: LD_INT 29
82836: ST_TO_ADDR
// un := CreateVehicle ;
82837: LD_ADDR_VAR 0 2
82841: PUSH
82842: CALL_OW 45
82846: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82847: LD_VAR 0 2
82851: PPUSH
82852: LD_INT 1
82854: PPUSH
82855: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82859: LD_INT 35
82861: PPUSH
82862: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82866: LD_VAR 0 2
82870: PPUSH
82871: LD_INT 22
82873: PUSH
82874: LD_OWVAR 2
82878: PUSH
82879: EMPTY
82880: LIST
82881: LIST
82882: PPUSH
82883: CALL_OW 69
82887: PPUSH
82888: LD_VAR 0 2
82892: PPUSH
82893: CALL_OW 74
82897: PPUSH
82898: CALL_OW 115
// until IsDead ( un ) ;
82902: LD_VAR 0 2
82906: PPUSH
82907: CALL_OW 301
82911: IFFALSE 82859
// end ;
82913: PPOPN 2
82915: END
// every 0 0$1 trigger StreamModeActive and sStu do
82916: LD_EXP 75
82920: IFFALSE 82928
82922: PUSH
82923: LD_EXP 114
82927: AND
82928: IFFALSE 82944
82930: GO 82932
82932: DISABLE
// begin ToLua ( displayStucuk(); ) ;
82933: LD_STRING displayStucuk();
82935: PPUSH
82936: CALL_OW 559
// ResetFog ;
82940: CALL_OW 335
// end ;
82944: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
82945: LD_EXP 75
82949: IFFALSE 82957
82951: PUSH
82952: LD_EXP 107
82956: AND
82957: IFFALSE 83098
82959: GO 82961
82961: DISABLE
82962: LD_INT 0
82964: PPUSH
82965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
82966: LD_ADDR_VAR 0 2
82970: PUSH
82971: LD_INT 22
82973: PUSH
82974: LD_OWVAR 2
82978: PUSH
82979: EMPTY
82980: LIST
82981: LIST
82982: PUSH
82983: LD_INT 21
82985: PUSH
82986: LD_INT 1
82988: PUSH
82989: EMPTY
82990: LIST
82991: LIST
82992: PUSH
82993: EMPTY
82994: LIST
82995: LIST
82996: PPUSH
82997: CALL_OW 69
83001: ST_TO_ADDR
// if not tmp then
83002: LD_VAR 0 2
83006: NOT
83007: IFFALSE 83011
// exit ;
83009: GO 83098
// un := tmp [ rand ( 1 , tmp ) ] ;
83011: LD_ADDR_VAR 0 1
83015: PUSH
83016: LD_VAR 0 2
83020: PUSH
83021: LD_INT 1
83023: PPUSH
83024: LD_VAR 0 2
83028: PPUSH
83029: CALL_OW 12
83033: ARRAY
83034: ST_TO_ADDR
// SetSide ( un , 0 ) ;
83035: LD_VAR 0 1
83039: PPUSH
83040: LD_INT 0
83042: PPUSH
83043: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
83047: LD_VAR 0 1
83051: PPUSH
83052: LD_OWVAR 3
83056: PUSH
83057: LD_VAR 0 1
83061: DIFF
83062: PPUSH
83063: LD_VAR 0 1
83067: PPUSH
83068: CALL_OW 74
83072: PPUSH
83073: CALL_OW 115
// wait ( 0 0$20 ) ;
83077: LD_INT 700
83079: PPUSH
83080: CALL_OW 67
// SetSide ( un , your_side ) ;
83084: LD_VAR 0 1
83088: PPUSH
83089: LD_OWVAR 2
83093: PPUSH
83094: CALL_OW 235
// end ;
83098: PPOPN 2
83100: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
83101: LD_EXP 75
83105: IFFALSE 83113
83107: PUSH
83108: LD_EXP 108
83112: AND
83113: IFFALSE 83219
83115: GO 83117
83117: DISABLE
83118: LD_INT 0
83120: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
83121: LD_ADDR_VAR 0 1
83125: PUSH
83126: LD_INT 22
83128: PUSH
83129: LD_OWVAR 2
83133: PUSH
83134: EMPTY
83135: LIST
83136: LIST
83137: PUSH
83138: LD_INT 2
83140: PUSH
83141: LD_INT 30
83143: PUSH
83144: LD_INT 0
83146: PUSH
83147: EMPTY
83148: LIST
83149: LIST
83150: PUSH
83151: LD_INT 30
83153: PUSH
83154: LD_INT 1
83156: PUSH
83157: EMPTY
83158: LIST
83159: LIST
83160: PUSH
83161: EMPTY
83162: LIST
83163: LIST
83164: LIST
83165: PUSH
83166: EMPTY
83167: LIST
83168: LIST
83169: PPUSH
83170: CALL_OW 69
83174: ST_TO_ADDR
// if not depot then
83175: LD_VAR 0 1
83179: NOT
83180: IFFALSE 83184
// exit ;
83182: GO 83219
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
83184: LD_VAR 0 1
83188: PUSH
83189: LD_INT 1
83191: ARRAY
83192: PPUSH
83193: CALL_OW 250
83197: PPUSH
83198: LD_VAR 0 1
83202: PUSH
83203: LD_INT 1
83205: ARRAY
83206: PPUSH
83207: CALL_OW 251
83211: PPUSH
83212: LD_INT 70
83214: PPUSH
83215: CALL_OW 495
// end ;
83219: PPOPN 1
83221: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
83222: LD_EXP 75
83226: IFFALSE 83234
83228: PUSH
83229: LD_EXP 109
83233: AND
83234: IFFALSE 83445
83236: GO 83238
83238: DISABLE
83239: LD_INT 0
83241: PPUSH
83242: PPUSH
83243: PPUSH
83244: PPUSH
83245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
83246: LD_ADDR_VAR 0 5
83250: PUSH
83251: LD_INT 22
83253: PUSH
83254: LD_OWVAR 2
83258: PUSH
83259: EMPTY
83260: LIST
83261: LIST
83262: PUSH
83263: LD_INT 21
83265: PUSH
83266: LD_INT 1
83268: PUSH
83269: EMPTY
83270: LIST
83271: LIST
83272: PUSH
83273: EMPTY
83274: LIST
83275: LIST
83276: PPUSH
83277: CALL_OW 69
83281: ST_TO_ADDR
// if not tmp then
83282: LD_VAR 0 5
83286: NOT
83287: IFFALSE 83291
// exit ;
83289: GO 83445
// for i in tmp do
83291: LD_ADDR_VAR 0 1
83295: PUSH
83296: LD_VAR 0 5
83300: PUSH
83301: FOR_IN
83302: IFFALSE 83443
// begin d := rand ( 0 , 5 ) ;
83304: LD_ADDR_VAR 0 4
83308: PUSH
83309: LD_INT 0
83311: PPUSH
83312: LD_INT 5
83314: PPUSH
83315: CALL_OW 12
83319: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
83320: LD_ADDR_VAR 0 2
83324: PUSH
83325: LD_VAR 0 1
83329: PPUSH
83330: CALL_OW 250
83334: PPUSH
83335: LD_VAR 0 4
83339: PPUSH
83340: LD_INT 3
83342: PPUSH
83343: LD_INT 12
83345: PPUSH
83346: CALL_OW 12
83350: PPUSH
83351: CALL_OW 272
83355: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
83356: LD_ADDR_VAR 0 3
83360: PUSH
83361: LD_VAR 0 1
83365: PPUSH
83366: CALL_OW 251
83370: PPUSH
83371: LD_VAR 0 4
83375: PPUSH
83376: LD_INT 3
83378: PPUSH
83379: LD_INT 12
83381: PPUSH
83382: CALL_OW 12
83386: PPUSH
83387: CALL_OW 273
83391: ST_TO_ADDR
// if ValidHex ( x , y ) then
83392: LD_VAR 0 2
83396: PPUSH
83397: LD_VAR 0 3
83401: PPUSH
83402: CALL_OW 488
83406: IFFALSE 83441
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
83408: LD_VAR 0 1
83412: PPUSH
83413: LD_VAR 0 2
83417: PPUSH
83418: LD_VAR 0 3
83422: PPUSH
83423: LD_INT 3
83425: PPUSH
83426: LD_INT 6
83428: PPUSH
83429: CALL_OW 12
83433: PPUSH
83434: LD_INT 1
83436: PPUSH
83437: CALL_OW 483
// end ;
83441: GO 83301
83443: POP
83444: POP
// end ;
83445: PPOPN 5
83447: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
83448: LD_EXP 75
83452: IFFALSE 83460
83454: PUSH
83455: LD_EXP 110
83459: AND
83460: IFFALSE 83554
83462: GO 83464
83464: DISABLE
83465: LD_INT 0
83467: PPUSH
83468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
83469: LD_ADDR_VAR 0 2
83473: PUSH
83474: LD_INT 22
83476: PUSH
83477: LD_OWVAR 2
83481: PUSH
83482: EMPTY
83483: LIST
83484: LIST
83485: PUSH
83486: LD_INT 32
83488: PUSH
83489: LD_INT 1
83491: PUSH
83492: EMPTY
83493: LIST
83494: LIST
83495: PUSH
83496: LD_INT 21
83498: PUSH
83499: LD_INT 2
83501: PUSH
83502: EMPTY
83503: LIST
83504: LIST
83505: PUSH
83506: EMPTY
83507: LIST
83508: LIST
83509: LIST
83510: PPUSH
83511: CALL_OW 69
83515: ST_TO_ADDR
// if not tmp then
83516: LD_VAR 0 2
83520: NOT
83521: IFFALSE 83525
// exit ;
83523: GO 83554
// for i in tmp do
83525: LD_ADDR_VAR 0 1
83529: PUSH
83530: LD_VAR 0 2
83534: PUSH
83535: FOR_IN
83536: IFFALSE 83552
// SetFuel ( i , 0 ) ;
83538: LD_VAR 0 1
83542: PPUSH
83543: LD_INT 0
83545: PPUSH
83546: CALL_OW 240
83550: GO 83535
83552: POP
83553: POP
// end ;
83554: PPOPN 2
83556: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
83557: LD_EXP 75
83561: IFFALSE 83569
83563: PUSH
83564: LD_EXP 111
83568: AND
83569: IFFALSE 83635
83571: GO 83573
83573: DISABLE
83574: LD_INT 0
83576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83577: LD_ADDR_VAR 0 1
83581: PUSH
83582: LD_INT 22
83584: PUSH
83585: LD_OWVAR 2
83589: PUSH
83590: EMPTY
83591: LIST
83592: LIST
83593: PUSH
83594: LD_INT 30
83596: PUSH
83597: LD_INT 29
83599: PUSH
83600: EMPTY
83601: LIST
83602: LIST
83603: PUSH
83604: EMPTY
83605: LIST
83606: LIST
83607: PPUSH
83608: CALL_OW 69
83612: ST_TO_ADDR
// if not tmp then
83613: LD_VAR 0 1
83617: NOT
83618: IFFALSE 83622
// exit ;
83620: GO 83635
// DestroyUnit ( tmp [ 1 ] ) ;
83622: LD_VAR 0 1
83626: PUSH
83627: LD_INT 1
83629: ARRAY
83630: PPUSH
83631: CALL_OW 65
// end ;
83635: PPOPN 1
83637: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
83638: LD_EXP 75
83642: IFFALSE 83650
83644: PUSH
83645: LD_EXP 113
83649: AND
83650: IFFALSE 83779
83652: GO 83654
83654: DISABLE
83655: LD_INT 0
83657: PPUSH
// begin uc_side := 0 ;
83658: LD_ADDR_OWVAR 20
83662: PUSH
83663: LD_INT 0
83665: ST_TO_ADDR
// uc_nation := nation_arabian ;
83666: LD_ADDR_OWVAR 21
83670: PUSH
83671: LD_INT 2
83673: ST_TO_ADDR
// hc_gallery :=  ;
83674: LD_ADDR_OWVAR 33
83678: PUSH
83679: LD_STRING 
83681: ST_TO_ADDR
// hc_name :=  ;
83682: LD_ADDR_OWVAR 26
83686: PUSH
83687: LD_STRING 
83689: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
83690: LD_INT 1
83692: PPUSH
83693: LD_INT 11
83695: PPUSH
83696: LD_INT 10
83698: PPUSH
83699: CALL_OW 380
// un := CreateHuman ;
83703: LD_ADDR_VAR 0 1
83707: PUSH
83708: CALL_OW 44
83712: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
83713: LD_VAR 0 1
83717: PPUSH
83718: LD_INT 1
83720: PPUSH
83721: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
83725: LD_INT 35
83727: PPUSH
83728: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
83732: LD_VAR 0 1
83736: PPUSH
83737: LD_INT 22
83739: PUSH
83740: LD_OWVAR 2
83744: PUSH
83745: EMPTY
83746: LIST
83747: LIST
83748: PPUSH
83749: CALL_OW 69
83753: PPUSH
83754: LD_VAR 0 1
83758: PPUSH
83759: CALL_OW 74
83763: PPUSH
83764: CALL_OW 115
// until IsDead ( un ) ;
83768: LD_VAR 0 1
83772: PPUSH
83773: CALL_OW 301
83777: IFFALSE 83725
// end ;
83779: PPOPN 1
83781: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
83782: LD_EXP 75
83786: IFFALSE 83794
83788: PUSH
83789: LD_EXP 115
83793: AND
83794: IFFALSE 83806
83796: GO 83798
83798: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
83799: LD_STRING earthquake(getX(game), 0, 32)
83801: PPUSH
83802: CALL_OW 559
83806: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
83807: LD_EXP 75
83811: IFFALSE 83819
83813: PUSH
83814: LD_EXP 116
83818: AND
83819: IFFALSE 83910
83821: GO 83823
83823: DISABLE
83824: LD_INT 0
83826: PPUSH
// begin enable ;
83827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
83828: LD_ADDR_VAR 0 1
83832: PUSH
83833: LD_INT 22
83835: PUSH
83836: LD_OWVAR 2
83840: PUSH
83841: EMPTY
83842: LIST
83843: LIST
83844: PUSH
83845: LD_INT 21
83847: PUSH
83848: LD_INT 2
83850: PUSH
83851: EMPTY
83852: LIST
83853: LIST
83854: PUSH
83855: LD_INT 33
83857: PUSH
83858: LD_INT 3
83860: PUSH
83861: EMPTY
83862: LIST
83863: LIST
83864: PUSH
83865: EMPTY
83866: LIST
83867: LIST
83868: LIST
83869: PPUSH
83870: CALL_OW 69
83874: ST_TO_ADDR
// if not tmp then
83875: LD_VAR 0 1
83879: NOT
83880: IFFALSE 83884
// exit ;
83882: GO 83910
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83884: LD_VAR 0 1
83888: PUSH
83889: LD_INT 1
83891: PPUSH
83892: LD_VAR 0 1
83896: PPUSH
83897: CALL_OW 12
83901: ARRAY
83902: PPUSH
83903: LD_INT 1
83905: PPUSH
83906: CALL_OW 234
// end ;
83910: PPOPN 1
83912: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
83913: LD_EXP 75
83917: IFFALSE 83925
83919: PUSH
83920: LD_EXP 117
83924: AND
83925: IFFALSE 84066
83927: GO 83929
83929: DISABLE
83930: LD_INT 0
83932: PPUSH
83933: PPUSH
83934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83935: LD_ADDR_VAR 0 3
83939: PUSH
83940: LD_INT 22
83942: PUSH
83943: LD_OWVAR 2
83947: PUSH
83948: EMPTY
83949: LIST
83950: LIST
83951: PUSH
83952: LD_INT 25
83954: PUSH
83955: LD_INT 1
83957: PUSH
83958: EMPTY
83959: LIST
83960: LIST
83961: PUSH
83962: EMPTY
83963: LIST
83964: LIST
83965: PPUSH
83966: CALL_OW 69
83970: ST_TO_ADDR
// if not tmp then
83971: LD_VAR 0 3
83975: NOT
83976: IFFALSE 83980
// exit ;
83978: GO 84066
// un := tmp [ rand ( 1 , tmp ) ] ;
83980: LD_ADDR_VAR 0 2
83984: PUSH
83985: LD_VAR 0 3
83989: PUSH
83990: LD_INT 1
83992: PPUSH
83993: LD_VAR 0 3
83997: PPUSH
83998: CALL_OW 12
84002: ARRAY
84003: ST_TO_ADDR
// if Crawls ( un ) then
84004: LD_VAR 0 2
84008: PPUSH
84009: CALL_OW 318
84013: IFFALSE 84024
// ComWalk ( un ) ;
84015: LD_VAR 0 2
84019: PPUSH
84020: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
84024: LD_VAR 0 2
84028: PPUSH
84029: LD_INT 9
84031: PPUSH
84032: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
84036: LD_INT 28
84038: PPUSH
84039: LD_OWVAR 2
84043: PPUSH
84044: LD_INT 2
84046: PPUSH
84047: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
84051: LD_INT 29
84053: PPUSH
84054: LD_OWVAR 2
84058: PPUSH
84059: LD_INT 2
84061: PPUSH
84062: CALL_OW 322
// end ;
84066: PPOPN 3
84068: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
84069: LD_EXP 75
84073: IFFALSE 84081
84075: PUSH
84076: LD_EXP 118
84080: AND
84081: IFFALSE 84192
84083: GO 84085
84085: DISABLE
84086: LD_INT 0
84088: PPUSH
84089: PPUSH
84090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
84091: LD_ADDR_VAR 0 3
84095: PUSH
84096: LD_INT 22
84098: PUSH
84099: LD_OWVAR 2
84103: PUSH
84104: EMPTY
84105: LIST
84106: LIST
84107: PUSH
84108: LD_INT 25
84110: PUSH
84111: LD_INT 1
84113: PUSH
84114: EMPTY
84115: LIST
84116: LIST
84117: PUSH
84118: EMPTY
84119: LIST
84120: LIST
84121: PPUSH
84122: CALL_OW 69
84126: ST_TO_ADDR
// if not tmp then
84127: LD_VAR 0 3
84131: NOT
84132: IFFALSE 84136
// exit ;
84134: GO 84192
// un := tmp [ rand ( 1 , tmp ) ] ;
84136: LD_ADDR_VAR 0 2
84140: PUSH
84141: LD_VAR 0 3
84145: PUSH
84146: LD_INT 1
84148: PPUSH
84149: LD_VAR 0 3
84153: PPUSH
84154: CALL_OW 12
84158: ARRAY
84159: ST_TO_ADDR
// if Crawls ( un ) then
84160: LD_VAR 0 2
84164: PPUSH
84165: CALL_OW 318
84169: IFFALSE 84180
// ComWalk ( un ) ;
84171: LD_VAR 0 2
84175: PPUSH
84176: CALL_OW 138
// SetClass ( un , class_mortar ) ;
84180: LD_VAR 0 2
84184: PPUSH
84185: LD_INT 8
84187: PPUSH
84188: CALL_OW 336
// end ;
84192: PPOPN 3
84194: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
84195: LD_EXP 75
84199: IFFALSE 84207
84201: PUSH
84202: LD_EXP 119
84206: AND
84207: IFFALSE 84351
84209: GO 84211
84211: DISABLE
84212: LD_INT 0
84214: PPUSH
84215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
84216: LD_ADDR_VAR 0 2
84220: PUSH
84221: LD_INT 22
84223: PUSH
84224: LD_OWVAR 2
84228: PUSH
84229: EMPTY
84230: LIST
84231: LIST
84232: PUSH
84233: LD_INT 21
84235: PUSH
84236: LD_INT 2
84238: PUSH
84239: EMPTY
84240: LIST
84241: LIST
84242: PUSH
84243: LD_INT 2
84245: PUSH
84246: LD_INT 34
84248: PUSH
84249: LD_INT 12
84251: PUSH
84252: EMPTY
84253: LIST
84254: LIST
84255: PUSH
84256: LD_INT 34
84258: PUSH
84259: LD_INT 51
84261: PUSH
84262: EMPTY
84263: LIST
84264: LIST
84265: PUSH
84266: LD_INT 34
84268: PUSH
84269: LD_INT 32
84271: PUSH
84272: EMPTY
84273: LIST
84274: LIST
84275: PUSH
84276: EMPTY
84277: LIST
84278: LIST
84279: LIST
84280: LIST
84281: PUSH
84282: EMPTY
84283: LIST
84284: LIST
84285: LIST
84286: PPUSH
84287: CALL_OW 69
84291: ST_TO_ADDR
// if not tmp then
84292: LD_VAR 0 2
84296: NOT
84297: IFFALSE 84301
// exit ;
84299: GO 84351
// for i in tmp do
84301: LD_ADDR_VAR 0 1
84305: PUSH
84306: LD_VAR 0 2
84310: PUSH
84311: FOR_IN
84312: IFFALSE 84349
// if GetCargo ( i , mat_artifact ) = 0 then
84314: LD_VAR 0 1
84318: PPUSH
84319: LD_INT 4
84321: PPUSH
84322: CALL_OW 289
84326: PUSH
84327: LD_INT 0
84329: EQUAL
84330: IFFALSE 84347
// SetCargo ( i , mat_siberit , 100 ) ;
84332: LD_VAR 0 1
84336: PPUSH
84337: LD_INT 3
84339: PPUSH
84340: LD_INT 100
84342: PPUSH
84343: CALL_OW 290
84347: GO 84311
84349: POP
84350: POP
// end ;
84351: PPOPN 2
84353: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
84354: LD_EXP 75
84358: IFFALSE 84366
84360: PUSH
84361: LD_EXP 120
84365: AND
84366: IFFALSE 84549
84368: GO 84370
84370: DISABLE
84371: LD_INT 0
84373: PPUSH
84374: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84375: LD_ADDR_VAR 0 2
84379: PUSH
84380: LD_INT 22
84382: PUSH
84383: LD_OWVAR 2
84387: PUSH
84388: EMPTY
84389: LIST
84390: LIST
84391: PPUSH
84392: CALL_OW 69
84396: ST_TO_ADDR
// if not tmp then
84397: LD_VAR 0 2
84401: NOT
84402: IFFALSE 84406
// exit ;
84404: GO 84549
// for i := 1 to 2 do
84406: LD_ADDR_VAR 0 1
84410: PUSH
84411: DOUBLE
84412: LD_INT 1
84414: DEC
84415: ST_TO_ADDR
84416: LD_INT 2
84418: PUSH
84419: FOR_TO
84420: IFFALSE 84547
// begin uc_side := your_side ;
84422: LD_ADDR_OWVAR 20
84426: PUSH
84427: LD_OWVAR 2
84431: ST_TO_ADDR
// uc_nation := nation_american ;
84432: LD_ADDR_OWVAR 21
84436: PUSH
84437: LD_INT 1
84439: ST_TO_ADDR
// vc_chassis := us_morphling ;
84440: LD_ADDR_OWVAR 37
84444: PUSH
84445: LD_INT 5
84447: ST_TO_ADDR
// vc_engine := engine_siberite ;
84448: LD_ADDR_OWVAR 39
84452: PUSH
84453: LD_INT 3
84455: ST_TO_ADDR
// vc_control := control_computer ;
84456: LD_ADDR_OWVAR 38
84460: PUSH
84461: LD_INT 3
84463: ST_TO_ADDR
// vc_weapon := us_double_laser ;
84464: LD_ADDR_OWVAR 40
84468: PUSH
84469: LD_INT 10
84471: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
84472: LD_VAR 0 2
84476: PUSH
84477: LD_INT 1
84479: ARRAY
84480: PPUSH
84481: CALL_OW 310
84485: NOT
84486: IFFALSE 84533
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
84488: CALL_OW 45
84492: PPUSH
84493: LD_VAR 0 2
84497: PUSH
84498: LD_INT 1
84500: ARRAY
84501: PPUSH
84502: CALL_OW 250
84506: PPUSH
84507: LD_VAR 0 2
84511: PUSH
84512: LD_INT 1
84514: ARRAY
84515: PPUSH
84516: CALL_OW 251
84520: PPUSH
84521: LD_INT 12
84523: PPUSH
84524: LD_INT 1
84526: PPUSH
84527: CALL_OW 50
84531: GO 84545
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
84533: CALL_OW 45
84537: PPUSH
84538: LD_INT 1
84540: PPUSH
84541: CALL_OW 51
// end ;
84545: GO 84419
84547: POP
84548: POP
// end ;
84549: PPOPN 2
84551: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
84552: LD_EXP 75
84556: IFFALSE 84564
84558: PUSH
84559: LD_EXP 121
84563: AND
84564: IFFALSE 84786
84566: GO 84568
84568: DISABLE
84569: LD_INT 0
84571: PPUSH
84572: PPUSH
84573: PPUSH
84574: PPUSH
84575: PPUSH
84576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
84577: LD_ADDR_VAR 0 6
84581: PUSH
84582: LD_INT 22
84584: PUSH
84585: LD_OWVAR 2
84589: PUSH
84590: EMPTY
84591: LIST
84592: LIST
84593: PUSH
84594: LD_INT 21
84596: PUSH
84597: LD_INT 1
84599: PUSH
84600: EMPTY
84601: LIST
84602: LIST
84603: PUSH
84604: LD_INT 3
84606: PUSH
84607: LD_INT 23
84609: PUSH
84610: LD_INT 0
84612: PUSH
84613: EMPTY
84614: LIST
84615: LIST
84616: PUSH
84617: EMPTY
84618: LIST
84619: LIST
84620: PUSH
84621: EMPTY
84622: LIST
84623: LIST
84624: LIST
84625: PPUSH
84626: CALL_OW 69
84630: ST_TO_ADDR
// if not tmp then
84631: LD_VAR 0 6
84635: NOT
84636: IFFALSE 84640
// exit ;
84638: GO 84786
// s1 := rand ( 1 , 4 ) ;
84640: LD_ADDR_VAR 0 2
84644: PUSH
84645: LD_INT 1
84647: PPUSH
84648: LD_INT 4
84650: PPUSH
84651: CALL_OW 12
84655: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
84656: LD_ADDR_VAR 0 4
84660: PUSH
84661: LD_VAR 0 6
84665: PUSH
84666: LD_INT 1
84668: ARRAY
84669: PPUSH
84670: LD_VAR 0 2
84674: PPUSH
84675: CALL_OW 259
84679: ST_TO_ADDR
// if s1 = 1 then
84680: LD_VAR 0 2
84684: PUSH
84685: LD_INT 1
84687: EQUAL
84688: IFFALSE 84708
// s2 := rand ( 2 , 4 ) else
84690: LD_ADDR_VAR 0 3
84694: PUSH
84695: LD_INT 2
84697: PPUSH
84698: LD_INT 4
84700: PPUSH
84701: CALL_OW 12
84705: ST_TO_ADDR
84706: GO 84716
// s2 := 1 ;
84708: LD_ADDR_VAR 0 3
84712: PUSH
84713: LD_INT 1
84715: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
84716: LD_ADDR_VAR 0 5
84720: PUSH
84721: LD_VAR 0 6
84725: PUSH
84726: LD_INT 1
84728: ARRAY
84729: PPUSH
84730: LD_VAR 0 3
84734: PPUSH
84735: CALL_OW 259
84739: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
84740: LD_VAR 0 6
84744: PUSH
84745: LD_INT 1
84747: ARRAY
84748: PPUSH
84749: LD_VAR 0 2
84753: PPUSH
84754: LD_VAR 0 5
84758: PPUSH
84759: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
84763: LD_VAR 0 6
84767: PUSH
84768: LD_INT 1
84770: ARRAY
84771: PPUSH
84772: LD_VAR 0 3
84776: PPUSH
84777: LD_VAR 0 4
84781: PPUSH
84782: CALL_OW 237
// end ;
84786: PPOPN 6
84788: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
84789: LD_EXP 75
84793: IFFALSE 84801
84795: PUSH
84796: LD_EXP 122
84800: AND
84801: IFFALSE 84880
84803: GO 84805
84805: DISABLE
84806: LD_INT 0
84808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
84809: LD_ADDR_VAR 0 1
84813: PUSH
84814: LD_INT 22
84816: PUSH
84817: LD_OWVAR 2
84821: PUSH
84822: EMPTY
84823: LIST
84824: LIST
84825: PUSH
84826: LD_INT 30
84828: PUSH
84829: LD_INT 3
84831: PUSH
84832: EMPTY
84833: LIST
84834: LIST
84835: PUSH
84836: EMPTY
84837: LIST
84838: LIST
84839: PPUSH
84840: CALL_OW 69
84844: ST_TO_ADDR
// if not tmp then
84845: LD_VAR 0 1
84849: NOT
84850: IFFALSE 84854
// exit ;
84852: GO 84880
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
84854: LD_VAR 0 1
84858: PUSH
84859: LD_INT 1
84861: PPUSH
84862: LD_VAR 0 1
84866: PPUSH
84867: CALL_OW 12
84871: ARRAY
84872: PPUSH
84873: LD_INT 1
84875: PPUSH
84876: CALL_OW 234
// end ;
84880: PPOPN 1
84882: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
84883: LD_EXP 75
84887: IFFALSE 84895
84889: PUSH
84890: LD_EXP 123
84894: AND
84895: IFFALSE 85007
84897: GO 84899
84899: DISABLE
84900: LD_INT 0
84902: PPUSH
84903: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
84904: LD_ADDR_VAR 0 2
84908: PUSH
84909: LD_INT 22
84911: PUSH
84912: LD_OWVAR 2
84916: PUSH
84917: EMPTY
84918: LIST
84919: LIST
84920: PUSH
84921: LD_INT 2
84923: PUSH
84924: LD_INT 30
84926: PUSH
84927: LD_INT 27
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: PUSH
84934: LD_INT 30
84936: PUSH
84937: LD_INT 26
84939: PUSH
84940: EMPTY
84941: LIST
84942: LIST
84943: PUSH
84944: LD_INT 30
84946: PUSH
84947: LD_INT 28
84949: PUSH
84950: EMPTY
84951: LIST
84952: LIST
84953: PUSH
84954: EMPTY
84955: LIST
84956: LIST
84957: LIST
84958: LIST
84959: PUSH
84960: EMPTY
84961: LIST
84962: LIST
84963: PPUSH
84964: CALL_OW 69
84968: ST_TO_ADDR
// if not tmp then
84969: LD_VAR 0 2
84973: NOT
84974: IFFALSE 84978
// exit ;
84976: GO 85007
// for i in tmp do
84978: LD_ADDR_VAR 0 1
84982: PUSH
84983: LD_VAR 0 2
84987: PUSH
84988: FOR_IN
84989: IFFALSE 85005
// SetLives ( i , 1 ) ;
84991: LD_VAR 0 1
84995: PPUSH
84996: LD_INT 1
84998: PPUSH
84999: CALL_OW 234
85003: GO 84988
85005: POP
85006: POP
// end ;
85007: PPOPN 2
85009: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
85010: LD_EXP 75
85014: IFFALSE 85022
85016: PUSH
85017: LD_EXP 124
85021: AND
85022: IFFALSE 85309
85024: GO 85026
85026: DISABLE
85027: LD_INT 0
85029: PPUSH
85030: PPUSH
85031: PPUSH
// begin i := rand ( 1 , 7 ) ;
85032: LD_ADDR_VAR 0 1
85036: PUSH
85037: LD_INT 1
85039: PPUSH
85040: LD_INT 7
85042: PPUSH
85043: CALL_OW 12
85047: ST_TO_ADDR
// case i of 1 :
85048: LD_VAR 0 1
85052: PUSH
85053: LD_INT 1
85055: DOUBLE
85056: EQUAL
85057: IFTRUE 85061
85059: GO 85071
85061: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
85062: LD_STRING earthquake(getX(game), 0, 32)
85064: PPUSH
85065: CALL_OW 559
85069: GO 85309
85071: LD_INT 2
85073: DOUBLE
85074: EQUAL
85075: IFTRUE 85079
85077: GO 85093
85079: POP
// begin ToLua ( displayStucuk(); ) ;
85080: LD_STRING displayStucuk();
85082: PPUSH
85083: CALL_OW 559
// ResetFog ;
85087: CALL_OW 335
// end ; 3 :
85091: GO 85309
85093: LD_INT 3
85095: DOUBLE
85096: EQUAL
85097: IFTRUE 85101
85099: GO 85205
85101: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
85102: LD_ADDR_VAR 0 2
85106: PUSH
85107: LD_INT 22
85109: PUSH
85110: LD_OWVAR 2
85114: PUSH
85115: EMPTY
85116: LIST
85117: LIST
85118: PUSH
85119: LD_INT 25
85121: PUSH
85122: LD_INT 1
85124: PUSH
85125: EMPTY
85126: LIST
85127: LIST
85128: PUSH
85129: EMPTY
85130: LIST
85131: LIST
85132: PPUSH
85133: CALL_OW 69
85137: ST_TO_ADDR
// if not tmp then
85138: LD_VAR 0 2
85142: NOT
85143: IFFALSE 85147
// exit ;
85145: GO 85309
// un := tmp [ rand ( 1 , tmp ) ] ;
85147: LD_ADDR_VAR 0 3
85151: PUSH
85152: LD_VAR 0 2
85156: PUSH
85157: LD_INT 1
85159: PPUSH
85160: LD_VAR 0 2
85164: PPUSH
85165: CALL_OW 12
85169: ARRAY
85170: ST_TO_ADDR
// if Crawls ( un ) then
85171: LD_VAR 0 3
85175: PPUSH
85176: CALL_OW 318
85180: IFFALSE 85191
// ComWalk ( un ) ;
85182: LD_VAR 0 3
85186: PPUSH
85187: CALL_OW 138
// SetClass ( un , class_mortar ) ;
85191: LD_VAR 0 3
85195: PPUSH
85196: LD_INT 8
85198: PPUSH
85199: CALL_OW 336
// end ; 4 :
85203: GO 85309
85205: LD_INT 4
85207: DOUBLE
85208: EQUAL
85209: IFTRUE 85213
85211: GO 85287
85213: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
85214: LD_ADDR_VAR 0 2
85218: PUSH
85219: LD_INT 22
85221: PUSH
85222: LD_OWVAR 2
85226: PUSH
85227: EMPTY
85228: LIST
85229: LIST
85230: PUSH
85231: LD_INT 30
85233: PUSH
85234: LD_INT 29
85236: PUSH
85237: EMPTY
85238: LIST
85239: LIST
85240: PUSH
85241: EMPTY
85242: LIST
85243: LIST
85244: PPUSH
85245: CALL_OW 69
85249: ST_TO_ADDR
// if not tmp then
85250: LD_VAR 0 2
85254: NOT
85255: IFFALSE 85259
// exit ;
85257: GO 85309
// CenterNowOnUnits ( tmp [ 1 ] ) ;
85259: LD_VAR 0 2
85263: PUSH
85264: LD_INT 1
85266: ARRAY
85267: PPUSH
85268: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
85272: LD_VAR 0 2
85276: PUSH
85277: LD_INT 1
85279: ARRAY
85280: PPUSH
85281: CALL_OW 65
// end ; 5 .. 7 :
85285: GO 85309
85287: LD_INT 5
85289: DOUBLE
85290: GREATEREQUAL
85291: IFFALSE 85299
85293: LD_INT 7
85295: DOUBLE
85296: LESSEQUAL
85297: IFTRUE 85301
85299: GO 85308
85301: POP
// StreamSibBomb ; end ;
85302: CALL 81490 0 0
85306: GO 85309
85308: POP
// end ;
85309: PPOPN 3
85311: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
85312: LD_EXP 75
85316: IFFALSE 85324
85318: PUSH
85319: LD_EXP 125
85323: AND
85324: IFFALSE 85480
85326: GO 85328
85328: DISABLE
85329: LD_INT 0
85331: PPUSH
85332: PPUSH
85333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
85334: LD_ADDR_VAR 0 2
85338: PUSH
85339: LD_INT 81
85341: PUSH
85342: LD_OWVAR 2
85346: PUSH
85347: EMPTY
85348: LIST
85349: LIST
85350: PUSH
85351: LD_INT 2
85353: PUSH
85354: LD_INT 21
85356: PUSH
85357: LD_INT 1
85359: PUSH
85360: EMPTY
85361: LIST
85362: LIST
85363: PUSH
85364: LD_INT 21
85366: PUSH
85367: LD_INT 2
85369: PUSH
85370: EMPTY
85371: LIST
85372: LIST
85373: PUSH
85374: EMPTY
85375: LIST
85376: LIST
85377: LIST
85378: PUSH
85379: EMPTY
85380: LIST
85381: LIST
85382: PPUSH
85383: CALL_OW 69
85387: ST_TO_ADDR
// if not tmp then
85388: LD_VAR 0 2
85392: NOT
85393: IFFALSE 85397
// exit ;
85395: GO 85480
// p := 0 ;
85397: LD_ADDR_VAR 0 3
85401: PUSH
85402: LD_INT 0
85404: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85405: LD_INT 35
85407: PPUSH
85408: CALL_OW 67
// p := p + 1 ;
85412: LD_ADDR_VAR 0 3
85416: PUSH
85417: LD_VAR 0 3
85421: PUSH
85422: LD_INT 1
85424: PLUS
85425: ST_TO_ADDR
// for i in tmp do
85426: LD_ADDR_VAR 0 1
85430: PUSH
85431: LD_VAR 0 2
85435: PUSH
85436: FOR_IN
85437: IFFALSE 85468
// if GetLives ( i ) < 1000 then
85439: LD_VAR 0 1
85443: PPUSH
85444: CALL_OW 256
85448: PUSH
85449: LD_INT 1000
85451: LESS
85452: IFFALSE 85466
// SetLives ( i , 1000 ) ;
85454: LD_VAR 0 1
85458: PPUSH
85459: LD_INT 1000
85461: PPUSH
85462: CALL_OW 234
85466: GO 85436
85468: POP
85469: POP
// until p > 20 ;
85470: LD_VAR 0 3
85474: PUSH
85475: LD_INT 20
85477: GREATER
85478: IFFALSE 85405
// end ;
85480: PPOPN 3
85482: END
// every 0 0$1 trigger StreamModeActive and sTime do
85483: LD_EXP 75
85487: IFFALSE 85495
85489: PUSH
85490: LD_EXP 126
85494: AND
85495: IFFALSE 85530
85497: GO 85499
85499: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
85500: LD_INT 28
85502: PPUSH
85503: LD_OWVAR 2
85507: PPUSH
85508: LD_INT 2
85510: PPUSH
85511: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
85515: LD_INT 30
85517: PPUSH
85518: LD_OWVAR 2
85522: PPUSH
85523: LD_INT 2
85525: PPUSH
85526: CALL_OW 322
// end ;
85530: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
85531: LD_EXP 75
85535: IFFALSE 85543
85537: PUSH
85538: LD_EXP 127
85542: AND
85543: IFFALSE 85664
85545: GO 85547
85547: DISABLE
85548: LD_INT 0
85550: PPUSH
85551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
85552: LD_ADDR_VAR 0 2
85556: PUSH
85557: LD_INT 22
85559: PUSH
85560: LD_OWVAR 2
85564: PUSH
85565: EMPTY
85566: LIST
85567: LIST
85568: PUSH
85569: LD_INT 21
85571: PUSH
85572: LD_INT 1
85574: PUSH
85575: EMPTY
85576: LIST
85577: LIST
85578: PUSH
85579: LD_INT 3
85581: PUSH
85582: LD_INT 23
85584: PUSH
85585: LD_INT 0
85587: PUSH
85588: EMPTY
85589: LIST
85590: LIST
85591: PUSH
85592: EMPTY
85593: LIST
85594: LIST
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: LIST
85600: PPUSH
85601: CALL_OW 69
85605: ST_TO_ADDR
// if not tmp then
85606: LD_VAR 0 2
85610: NOT
85611: IFFALSE 85615
// exit ;
85613: GO 85664
// for i in tmp do
85615: LD_ADDR_VAR 0 1
85619: PUSH
85620: LD_VAR 0 2
85624: PUSH
85625: FOR_IN
85626: IFFALSE 85662
// begin if Crawls ( i ) then
85628: LD_VAR 0 1
85632: PPUSH
85633: CALL_OW 318
85637: IFFALSE 85648
// ComWalk ( i ) ;
85639: LD_VAR 0 1
85643: PPUSH
85644: CALL_OW 138
// SetClass ( i , 2 ) ;
85648: LD_VAR 0 1
85652: PPUSH
85653: LD_INT 2
85655: PPUSH
85656: CALL_OW 336
// end ;
85660: GO 85625
85662: POP
85663: POP
// end ;
85664: PPOPN 2
85666: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
85667: LD_EXP 75
85671: IFFALSE 85679
85673: PUSH
85674: LD_EXP 128
85678: AND
85679: IFFALSE 85969
85681: GO 85683
85683: DISABLE
85684: LD_INT 0
85686: PPUSH
85687: PPUSH
85688: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
85689: LD_OWVAR 2
85693: PPUSH
85694: LD_INT 9
85696: PPUSH
85697: LD_INT 1
85699: PPUSH
85700: LD_INT 1
85702: PPUSH
85703: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
85707: LD_INT 9
85709: PPUSH
85710: LD_OWVAR 2
85714: PPUSH
85715: CALL_OW 343
// uc_side := 9 ;
85719: LD_ADDR_OWVAR 20
85723: PUSH
85724: LD_INT 9
85726: ST_TO_ADDR
// uc_nation := 2 ;
85727: LD_ADDR_OWVAR 21
85731: PUSH
85732: LD_INT 2
85734: ST_TO_ADDR
// hc_name := Dark Warrior ;
85735: LD_ADDR_OWVAR 26
85739: PUSH
85740: LD_STRING Dark Warrior
85742: ST_TO_ADDR
// hc_gallery :=  ;
85743: LD_ADDR_OWVAR 33
85747: PUSH
85748: LD_STRING 
85750: ST_TO_ADDR
// hc_noskilllimit := true ;
85751: LD_ADDR_OWVAR 76
85755: PUSH
85756: LD_INT 1
85758: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
85759: LD_ADDR_OWVAR 31
85763: PUSH
85764: LD_INT 30
85766: PUSH
85767: LD_INT 30
85769: PUSH
85770: LD_INT 30
85772: PUSH
85773: LD_INT 30
85775: PUSH
85776: EMPTY
85777: LIST
85778: LIST
85779: LIST
85780: LIST
85781: ST_TO_ADDR
// un := CreateHuman ;
85782: LD_ADDR_VAR 0 3
85786: PUSH
85787: CALL_OW 44
85791: ST_TO_ADDR
// hc_noskilllimit := false ;
85792: LD_ADDR_OWVAR 76
85796: PUSH
85797: LD_INT 0
85799: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
85800: LD_VAR 0 3
85804: PPUSH
85805: LD_INT 1
85807: PPUSH
85808: CALL_OW 51
// ToLua ( playRanger() ) ;
85812: LD_STRING playRanger()
85814: PPUSH
85815: CALL_OW 559
// p := 0 ;
85819: LD_ADDR_VAR 0 2
85823: PUSH
85824: LD_INT 0
85826: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
85827: LD_INT 35
85829: PPUSH
85830: CALL_OW 67
// p := p + 1 ;
85834: LD_ADDR_VAR 0 2
85838: PUSH
85839: LD_VAR 0 2
85843: PUSH
85844: LD_INT 1
85846: PLUS
85847: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
85848: LD_VAR 0 3
85852: PPUSH
85853: CALL_OW 256
85857: PUSH
85858: LD_INT 1000
85860: LESS
85861: IFFALSE 85875
// SetLives ( un , 1000 ) ;
85863: LD_VAR 0 3
85867: PPUSH
85868: LD_INT 1000
85870: PPUSH
85871: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
85875: LD_VAR 0 3
85879: PPUSH
85880: LD_INT 81
85882: PUSH
85883: LD_OWVAR 2
85887: PUSH
85888: EMPTY
85889: LIST
85890: LIST
85891: PUSH
85892: LD_INT 91
85894: PUSH
85895: LD_VAR 0 3
85899: PUSH
85900: LD_INT 30
85902: PUSH
85903: EMPTY
85904: LIST
85905: LIST
85906: LIST
85907: PUSH
85908: EMPTY
85909: LIST
85910: LIST
85911: PPUSH
85912: CALL_OW 69
85916: PPUSH
85917: LD_VAR 0 3
85921: PPUSH
85922: CALL_OW 74
85926: PPUSH
85927: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
85931: LD_VAR 0 2
85935: PUSH
85936: LD_INT 80
85938: GREATER
85939: IFTRUE 85952
85941: PUSH
85942: LD_VAR 0 3
85946: PPUSH
85947: CALL_OW 301
85951: OR
85952: IFFALSE 85827
// if un then
85954: LD_VAR 0 3
85958: IFFALSE 85969
// RemoveUnit ( un ) ;
85960: LD_VAR 0 3
85964: PPUSH
85965: CALL_OW 64
// end ;
85969: PPOPN 3
85971: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
85972: LD_EXP 129
85976: IFFALSE 86092
85978: GO 85980
85980: DISABLE
85981: LD_INT 0
85983: PPUSH
85984: PPUSH
85985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
85986: LD_ADDR_VAR 0 2
85990: PUSH
85991: LD_INT 81
85993: PUSH
85994: LD_OWVAR 2
85998: PUSH
85999: EMPTY
86000: LIST
86001: LIST
86002: PUSH
86003: LD_INT 21
86005: PUSH
86006: LD_INT 1
86008: PUSH
86009: EMPTY
86010: LIST
86011: LIST
86012: PUSH
86013: EMPTY
86014: LIST
86015: LIST
86016: PPUSH
86017: CALL_OW 69
86021: ST_TO_ADDR
// ToLua ( playComputer() ) ;
86022: LD_STRING playComputer()
86024: PPUSH
86025: CALL_OW 559
// if not tmp then
86029: LD_VAR 0 2
86033: NOT
86034: IFFALSE 86038
// exit ;
86036: GO 86092
// for i in tmp do
86038: LD_ADDR_VAR 0 1
86042: PUSH
86043: LD_VAR 0 2
86047: PUSH
86048: FOR_IN
86049: IFFALSE 86090
// for j := 1 to 4 do
86051: LD_ADDR_VAR 0 3
86055: PUSH
86056: DOUBLE
86057: LD_INT 1
86059: DEC
86060: ST_TO_ADDR
86061: LD_INT 4
86063: PUSH
86064: FOR_TO
86065: IFFALSE 86086
// SetSkill ( i , j , 10 ) ;
86067: LD_VAR 0 1
86071: PPUSH
86072: LD_VAR 0 3
86076: PPUSH
86077: LD_INT 10
86079: PPUSH
86080: CALL_OW 237
86084: GO 86064
86086: POP
86087: POP
86088: GO 86048
86090: POP
86091: POP
// end ;
86092: PPOPN 3
86094: END
// every 0 0$1 trigger s30 do var i , tmp ;
86095: LD_EXP 130
86099: IFFALSE 86168
86101: GO 86103
86103: DISABLE
86104: LD_INT 0
86106: PPUSH
86107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86108: LD_ADDR_VAR 0 2
86112: PUSH
86113: LD_INT 22
86115: PUSH
86116: LD_OWVAR 2
86120: PUSH
86121: EMPTY
86122: LIST
86123: LIST
86124: PPUSH
86125: CALL_OW 69
86129: ST_TO_ADDR
// if not tmp then
86130: LD_VAR 0 2
86134: NOT
86135: IFFALSE 86139
// exit ;
86137: GO 86168
// for i in tmp do
86139: LD_ADDR_VAR 0 1
86143: PUSH
86144: LD_VAR 0 2
86148: PUSH
86149: FOR_IN
86150: IFFALSE 86166
// SetLives ( i , 300 ) ;
86152: LD_VAR 0 1
86156: PPUSH
86157: LD_INT 300
86159: PPUSH
86160: CALL_OW 234
86164: GO 86149
86166: POP
86167: POP
// end ;
86168: PPOPN 2
86170: END
// every 0 0$1 trigger s60 do var i , tmp ;
86171: LD_EXP 131
86175: IFFALSE 86244
86177: GO 86179
86179: DISABLE
86180: LD_INT 0
86182: PPUSH
86183: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
86184: LD_ADDR_VAR 0 2
86188: PUSH
86189: LD_INT 22
86191: PUSH
86192: LD_OWVAR 2
86196: PUSH
86197: EMPTY
86198: LIST
86199: LIST
86200: PPUSH
86201: CALL_OW 69
86205: ST_TO_ADDR
// if not tmp then
86206: LD_VAR 0 2
86210: NOT
86211: IFFALSE 86215
// exit ;
86213: GO 86244
// for i in tmp do
86215: LD_ADDR_VAR 0 1
86219: PUSH
86220: LD_VAR 0 2
86224: PUSH
86225: FOR_IN
86226: IFFALSE 86242
// SetLives ( i , 600 ) ;
86228: LD_VAR 0 1
86232: PPUSH
86233: LD_INT 600
86235: PPUSH
86236: CALL_OW 234
86240: GO 86225
86242: POP
86243: POP
// end ;
86244: PPOPN 2
86246: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
86247: LD_INT 0
86249: PPUSH
// case cmd of 301 :
86250: LD_VAR 0 1
86254: PUSH
86255: LD_INT 301
86257: DOUBLE
86258: EQUAL
86259: IFTRUE 86263
86261: GO 86295
86263: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
86264: LD_VAR 0 6
86268: PPUSH
86269: LD_VAR 0 7
86273: PPUSH
86274: LD_VAR 0 8
86278: PPUSH
86279: LD_VAR 0 4
86283: PPUSH
86284: LD_VAR 0 5
86288: PPUSH
86289: CALL 87508 0 5
86293: GO 86416
86295: LD_INT 302
86297: DOUBLE
86298: EQUAL
86299: IFTRUE 86303
86301: GO 86340
86303: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
86304: LD_VAR 0 6
86308: PPUSH
86309: LD_VAR 0 7
86313: PPUSH
86314: LD_VAR 0 8
86318: PPUSH
86319: LD_VAR 0 9
86323: PPUSH
86324: LD_VAR 0 4
86328: PPUSH
86329: LD_VAR 0 5
86333: PPUSH
86334: CALL 87599 0 6
86338: GO 86416
86340: LD_INT 303
86342: DOUBLE
86343: EQUAL
86344: IFTRUE 86348
86346: GO 86385
86348: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
86349: LD_VAR 0 6
86353: PPUSH
86354: LD_VAR 0 7
86358: PPUSH
86359: LD_VAR 0 8
86363: PPUSH
86364: LD_VAR 0 9
86368: PPUSH
86369: LD_VAR 0 4
86373: PPUSH
86374: LD_VAR 0 5
86378: PPUSH
86379: CALL 86421 0 6
86383: GO 86416
86385: LD_INT 304
86387: DOUBLE
86388: EQUAL
86389: IFTRUE 86393
86391: GO 86415
86393: POP
// hHackTeleport ( unit , x , y ) ; end ;
86394: LD_VAR 0 2
86398: PPUSH
86399: LD_VAR 0 4
86403: PPUSH
86404: LD_VAR 0 5
86408: PPUSH
86409: CALL 88192 0 3
86413: GO 86416
86415: POP
// end ;
86416: LD_VAR 0 12
86420: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
86421: LD_INT 0
86423: PPUSH
86424: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
86425: LD_VAR 0 1
86429: PUSH
86430: LD_INT 1
86432: LESS
86433: IFTRUE 86445
86435: PUSH
86436: LD_VAR 0 1
86440: PUSH
86441: LD_INT 3
86443: GREATER
86444: OR
86445: IFTRUE 86463
86447: PUSH
86448: LD_VAR 0 5
86452: PPUSH
86453: LD_VAR 0 6
86457: PPUSH
86458: CALL_OW 428
86462: OR
86463: IFFALSE 86467
// exit ;
86465: GO 87195
// uc_side := your_side ;
86467: LD_ADDR_OWVAR 20
86471: PUSH
86472: LD_OWVAR 2
86476: ST_TO_ADDR
// uc_nation := nation ;
86477: LD_ADDR_OWVAR 21
86481: PUSH
86482: LD_VAR 0 1
86486: ST_TO_ADDR
// bc_level = 1 ;
86487: LD_ADDR_OWVAR 43
86491: PUSH
86492: LD_INT 1
86494: ST_TO_ADDR
// case btype of 1 :
86495: LD_VAR 0 2
86499: PUSH
86500: LD_INT 1
86502: DOUBLE
86503: EQUAL
86504: IFTRUE 86508
86506: GO 86519
86508: POP
// bc_type := b_depot ; 2 :
86509: LD_ADDR_OWVAR 42
86513: PUSH
86514: LD_INT 0
86516: ST_TO_ADDR
86517: GO 87139
86519: LD_INT 2
86521: DOUBLE
86522: EQUAL
86523: IFTRUE 86527
86525: GO 86538
86527: POP
// bc_type := b_warehouse ; 3 :
86528: LD_ADDR_OWVAR 42
86532: PUSH
86533: LD_INT 1
86535: ST_TO_ADDR
86536: GO 87139
86538: LD_INT 3
86540: DOUBLE
86541: EQUAL
86542: IFTRUE 86546
86544: GO 86557
86546: POP
// bc_type := b_lab ; 4 .. 9 :
86547: LD_ADDR_OWVAR 42
86551: PUSH
86552: LD_INT 6
86554: ST_TO_ADDR
86555: GO 87139
86557: LD_INT 4
86559: DOUBLE
86560: GREATEREQUAL
86561: IFFALSE 86569
86563: LD_INT 9
86565: DOUBLE
86566: LESSEQUAL
86567: IFTRUE 86571
86569: GO 86631
86571: POP
// begin bc_type := b_lab_half ;
86572: LD_ADDR_OWVAR 42
86576: PUSH
86577: LD_INT 7
86579: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
86580: LD_ADDR_OWVAR 44
86584: PUSH
86585: LD_INT 10
86587: PUSH
86588: LD_INT 11
86590: PUSH
86591: LD_INT 12
86593: PUSH
86594: LD_INT 15
86596: PUSH
86597: LD_INT 14
86599: PUSH
86600: LD_INT 13
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: LIST
86607: LIST
86608: LIST
86609: LIST
86610: PUSH
86611: LD_VAR 0 2
86615: PUSH
86616: LD_INT 3
86618: MINUS
86619: ARRAY
86620: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
86621: LD_ADDR_OWVAR 45
86625: PUSH
86626: LD_INT 9
86628: ST_TO_ADDR
// end ; 10 .. 13 :
86629: GO 87139
86631: LD_INT 10
86633: DOUBLE
86634: GREATEREQUAL
86635: IFFALSE 86643
86637: LD_INT 13
86639: DOUBLE
86640: LESSEQUAL
86641: IFTRUE 86645
86643: GO 86722
86645: POP
// begin bc_type := b_lab_full ;
86646: LD_ADDR_OWVAR 42
86650: PUSH
86651: LD_INT 8
86653: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
86654: LD_ADDR_OWVAR 44
86658: PUSH
86659: LD_INT 10
86661: PUSH
86662: LD_INT 12
86664: PUSH
86665: LD_INT 14
86667: PUSH
86668: LD_INT 13
86670: PUSH
86671: EMPTY
86672: LIST
86673: LIST
86674: LIST
86675: LIST
86676: PUSH
86677: LD_VAR 0 2
86681: PUSH
86682: LD_INT 9
86684: MINUS
86685: ARRAY
86686: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
86687: LD_ADDR_OWVAR 45
86691: PUSH
86692: LD_INT 11
86694: PUSH
86695: LD_INT 15
86697: PUSH
86698: LD_INT 12
86700: PUSH
86701: LD_INT 15
86703: PUSH
86704: EMPTY
86705: LIST
86706: LIST
86707: LIST
86708: LIST
86709: PUSH
86710: LD_VAR 0 2
86714: PUSH
86715: LD_INT 9
86717: MINUS
86718: ARRAY
86719: ST_TO_ADDR
// end ; 14 :
86720: GO 87139
86722: LD_INT 14
86724: DOUBLE
86725: EQUAL
86726: IFTRUE 86730
86728: GO 86741
86730: POP
// bc_type := b_workshop ; 15 :
86731: LD_ADDR_OWVAR 42
86735: PUSH
86736: LD_INT 2
86738: ST_TO_ADDR
86739: GO 87139
86741: LD_INT 15
86743: DOUBLE
86744: EQUAL
86745: IFTRUE 86749
86747: GO 86760
86749: POP
// bc_type := b_factory ; 16 :
86750: LD_ADDR_OWVAR 42
86754: PUSH
86755: LD_INT 3
86757: ST_TO_ADDR
86758: GO 87139
86760: LD_INT 16
86762: DOUBLE
86763: EQUAL
86764: IFTRUE 86768
86766: GO 86779
86768: POP
// bc_type := b_ext_gun ; 17 :
86769: LD_ADDR_OWVAR 42
86773: PUSH
86774: LD_INT 17
86776: ST_TO_ADDR
86777: GO 87139
86779: LD_INT 17
86781: DOUBLE
86782: EQUAL
86783: IFTRUE 86787
86785: GO 86815
86787: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
86788: LD_ADDR_OWVAR 42
86792: PUSH
86793: LD_INT 19
86795: PUSH
86796: LD_INT 23
86798: PUSH
86799: LD_INT 19
86801: PUSH
86802: EMPTY
86803: LIST
86804: LIST
86805: LIST
86806: PUSH
86807: LD_VAR 0 1
86811: ARRAY
86812: ST_TO_ADDR
86813: GO 87139
86815: LD_INT 18
86817: DOUBLE
86818: EQUAL
86819: IFTRUE 86823
86821: GO 86834
86823: POP
// bc_type := b_ext_radar ; 19 :
86824: LD_ADDR_OWVAR 42
86828: PUSH
86829: LD_INT 20
86831: ST_TO_ADDR
86832: GO 87139
86834: LD_INT 19
86836: DOUBLE
86837: EQUAL
86838: IFTRUE 86842
86840: GO 86853
86842: POP
// bc_type := b_ext_radio ; 20 :
86843: LD_ADDR_OWVAR 42
86847: PUSH
86848: LD_INT 22
86850: ST_TO_ADDR
86851: GO 87139
86853: LD_INT 20
86855: DOUBLE
86856: EQUAL
86857: IFTRUE 86861
86859: GO 86872
86861: POP
// bc_type := b_ext_siberium ; 21 :
86862: LD_ADDR_OWVAR 42
86866: PUSH
86867: LD_INT 21
86869: ST_TO_ADDR
86870: GO 87139
86872: LD_INT 21
86874: DOUBLE
86875: EQUAL
86876: IFTRUE 86880
86878: GO 86891
86880: POP
// bc_type := b_ext_computer ; 22 :
86881: LD_ADDR_OWVAR 42
86885: PUSH
86886: LD_INT 24
86888: ST_TO_ADDR
86889: GO 87139
86891: LD_INT 22
86893: DOUBLE
86894: EQUAL
86895: IFTRUE 86899
86897: GO 86910
86899: POP
// bc_type := b_ext_track ; 23 :
86900: LD_ADDR_OWVAR 42
86904: PUSH
86905: LD_INT 16
86907: ST_TO_ADDR
86908: GO 87139
86910: LD_INT 23
86912: DOUBLE
86913: EQUAL
86914: IFTRUE 86918
86916: GO 86929
86918: POP
// bc_type := b_ext_laser ; 24 :
86919: LD_ADDR_OWVAR 42
86923: PUSH
86924: LD_INT 25
86926: ST_TO_ADDR
86927: GO 87139
86929: LD_INT 24
86931: DOUBLE
86932: EQUAL
86933: IFTRUE 86937
86935: GO 86948
86937: POP
// bc_type := b_control_tower ; 25 :
86938: LD_ADDR_OWVAR 42
86942: PUSH
86943: LD_INT 36
86945: ST_TO_ADDR
86946: GO 87139
86948: LD_INT 25
86950: DOUBLE
86951: EQUAL
86952: IFTRUE 86956
86954: GO 86967
86956: POP
// bc_type := b_breastwork ; 26 :
86957: LD_ADDR_OWVAR 42
86961: PUSH
86962: LD_INT 31
86964: ST_TO_ADDR
86965: GO 87139
86967: LD_INT 26
86969: DOUBLE
86970: EQUAL
86971: IFTRUE 86975
86973: GO 86986
86975: POP
// bc_type := b_bunker ; 27 :
86976: LD_ADDR_OWVAR 42
86980: PUSH
86981: LD_INT 32
86983: ST_TO_ADDR
86984: GO 87139
86986: LD_INT 27
86988: DOUBLE
86989: EQUAL
86990: IFTRUE 86994
86992: GO 87005
86994: POP
// bc_type := b_turret ; 28 :
86995: LD_ADDR_OWVAR 42
86999: PUSH
87000: LD_INT 33
87002: ST_TO_ADDR
87003: GO 87139
87005: LD_INT 28
87007: DOUBLE
87008: EQUAL
87009: IFTRUE 87013
87011: GO 87024
87013: POP
// bc_type := b_armoury ; 29 :
87014: LD_ADDR_OWVAR 42
87018: PUSH
87019: LD_INT 4
87021: ST_TO_ADDR
87022: GO 87139
87024: LD_INT 29
87026: DOUBLE
87027: EQUAL
87028: IFTRUE 87032
87030: GO 87043
87032: POP
// bc_type := b_barracks ; 30 :
87033: LD_ADDR_OWVAR 42
87037: PUSH
87038: LD_INT 5
87040: ST_TO_ADDR
87041: GO 87139
87043: LD_INT 30
87045: DOUBLE
87046: EQUAL
87047: IFTRUE 87051
87049: GO 87062
87051: POP
// bc_type := b_solar_power ; 31 :
87052: LD_ADDR_OWVAR 42
87056: PUSH
87057: LD_INT 27
87059: ST_TO_ADDR
87060: GO 87139
87062: LD_INT 31
87064: DOUBLE
87065: EQUAL
87066: IFTRUE 87070
87068: GO 87081
87070: POP
// bc_type := b_oil_power ; 32 :
87071: LD_ADDR_OWVAR 42
87075: PUSH
87076: LD_INT 26
87078: ST_TO_ADDR
87079: GO 87139
87081: LD_INT 32
87083: DOUBLE
87084: EQUAL
87085: IFTRUE 87089
87087: GO 87100
87089: POP
// bc_type := b_siberite_power ; 33 :
87090: LD_ADDR_OWVAR 42
87094: PUSH
87095: LD_INT 28
87097: ST_TO_ADDR
87098: GO 87139
87100: LD_INT 33
87102: DOUBLE
87103: EQUAL
87104: IFTRUE 87108
87106: GO 87119
87108: POP
// bc_type := b_oil_mine ; 34 :
87109: LD_ADDR_OWVAR 42
87113: PUSH
87114: LD_INT 29
87116: ST_TO_ADDR
87117: GO 87139
87119: LD_INT 34
87121: DOUBLE
87122: EQUAL
87123: IFTRUE 87127
87125: GO 87138
87127: POP
// bc_type := b_siberite_mine ; end ;
87128: LD_ADDR_OWVAR 42
87132: PUSH
87133: LD_INT 30
87135: ST_TO_ADDR
87136: GO 87139
87138: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
87139: LD_ADDR_VAR 0 8
87143: PUSH
87144: LD_VAR 0 5
87148: PPUSH
87149: LD_VAR 0 6
87153: PPUSH
87154: LD_VAR 0 3
87158: PPUSH
87159: CALL_OW 47
87163: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
87164: LD_OWVAR 42
87168: PUSH
87169: LD_INT 32
87171: PUSH
87172: LD_INT 33
87174: PUSH
87175: EMPTY
87176: LIST
87177: LIST
87178: IN
87179: IFFALSE 87195
// PlaceWeaponTurret ( b , weapon ) ;
87181: LD_VAR 0 8
87185: PPUSH
87186: LD_VAR 0 4
87190: PPUSH
87191: CALL_OW 431
// end ;
87195: LD_VAR 0 7
87199: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
87200: LD_INT 0
87202: PPUSH
87203: PPUSH
87204: PPUSH
87205: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
87206: LD_ADDR_VAR 0 4
87210: PUSH
87211: LD_INT 22
87213: PUSH
87214: LD_OWVAR 2
87218: PUSH
87219: EMPTY
87220: LIST
87221: LIST
87222: PUSH
87223: LD_INT 2
87225: PUSH
87226: LD_INT 30
87228: PUSH
87229: LD_INT 0
87231: PUSH
87232: EMPTY
87233: LIST
87234: LIST
87235: PUSH
87236: LD_INT 30
87238: PUSH
87239: LD_INT 1
87241: PUSH
87242: EMPTY
87243: LIST
87244: LIST
87245: PUSH
87246: EMPTY
87247: LIST
87248: LIST
87249: LIST
87250: PUSH
87251: EMPTY
87252: LIST
87253: LIST
87254: PPUSH
87255: CALL_OW 69
87259: ST_TO_ADDR
// if not tmp then
87260: LD_VAR 0 4
87264: NOT
87265: IFFALSE 87269
// exit ;
87267: GO 87328
// for i in tmp do
87269: LD_ADDR_VAR 0 2
87273: PUSH
87274: LD_VAR 0 4
87278: PUSH
87279: FOR_IN
87280: IFFALSE 87326
// for j = 1 to 3 do
87282: LD_ADDR_VAR 0 3
87286: PUSH
87287: DOUBLE
87288: LD_INT 1
87290: DEC
87291: ST_TO_ADDR
87292: LD_INT 3
87294: PUSH
87295: FOR_TO
87296: IFFALSE 87322
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
87298: LD_VAR 0 2
87302: PPUSH
87303: CALL_OW 274
87307: PPUSH
87308: LD_VAR 0 3
87312: PPUSH
87313: LD_INT 99999
87315: PPUSH
87316: CALL_OW 277
87320: GO 87295
87322: POP
87323: POP
87324: GO 87279
87326: POP
87327: POP
// end ;
87328: LD_VAR 0 1
87332: RET
// export function hHackSetLevel10 ; var i , j ; begin
87333: LD_INT 0
87335: PPUSH
87336: PPUSH
87337: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87338: LD_ADDR_VAR 0 2
87342: PUSH
87343: LD_INT 21
87345: PUSH
87346: LD_INT 1
87348: PUSH
87349: EMPTY
87350: LIST
87351: LIST
87352: PPUSH
87353: CALL_OW 69
87357: PUSH
87358: FOR_IN
87359: IFFALSE 87411
// if IsSelected ( i ) then
87361: LD_VAR 0 2
87365: PPUSH
87366: CALL_OW 306
87370: IFFALSE 87409
// begin for j := 1 to 4 do
87372: LD_ADDR_VAR 0 3
87376: PUSH
87377: DOUBLE
87378: LD_INT 1
87380: DEC
87381: ST_TO_ADDR
87382: LD_INT 4
87384: PUSH
87385: FOR_TO
87386: IFFALSE 87407
// SetSkill ( i , j , 10 ) ;
87388: LD_VAR 0 2
87392: PPUSH
87393: LD_VAR 0 3
87397: PPUSH
87398: LD_INT 10
87400: PPUSH
87401: CALL_OW 237
87405: GO 87385
87407: POP
87408: POP
// end ;
87409: GO 87358
87411: POP
87412: POP
// end ;
87413: LD_VAR 0 1
87417: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
87418: LD_INT 0
87420: PPUSH
87421: PPUSH
87422: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
87423: LD_ADDR_VAR 0 2
87427: PUSH
87428: LD_INT 22
87430: PUSH
87431: LD_OWVAR 2
87435: PUSH
87436: EMPTY
87437: LIST
87438: LIST
87439: PUSH
87440: LD_INT 21
87442: PUSH
87443: LD_INT 1
87445: PUSH
87446: EMPTY
87447: LIST
87448: LIST
87449: PUSH
87450: EMPTY
87451: LIST
87452: LIST
87453: PPUSH
87454: CALL_OW 69
87458: PUSH
87459: FOR_IN
87460: IFFALSE 87501
// begin for j := 1 to 4 do
87462: LD_ADDR_VAR 0 3
87466: PUSH
87467: DOUBLE
87468: LD_INT 1
87470: DEC
87471: ST_TO_ADDR
87472: LD_INT 4
87474: PUSH
87475: FOR_TO
87476: IFFALSE 87497
// SetSkill ( i , j , 10 ) ;
87478: LD_VAR 0 2
87482: PPUSH
87483: LD_VAR 0 3
87487: PPUSH
87488: LD_INT 10
87490: PPUSH
87491: CALL_OW 237
87495: GO 87475
87497: POP
87498: POP
// end ;
87499: GO 87459
87501: POP
87502: POP
// end ;
87503: LD_VAR 0 1
87507: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
87508: LD_INT 0
87510: PPUSH
// uc_side := your_side ;
87511: LD_ADDR_OWVAR 20
87515: PUSH
87516: LD_OWVAR 2
87520: ST_TO_ADDR
// uc_nation := nation ;
87521: LD_ADDR_OWVAR 21
87525: PUSH
87526: LD_VAR 0 1
87530: ST_TO_ADDR
// InitHc ;
87531: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
87535: LD_INT 0
87537: PPUSH
87538: LD_VAR 0 2
87542: PPUSH
87543: LD_VAR 0 3
87547: PPUSH
87548: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
87552: LD_VAR 0 4
87556: PPUSH
87557: LD_VAR 0 5
87561: PPUSH
87562: CALL_OW 428
87566: PUSH
87567: LD_INT 0
87569: EQUAL
87570: IFFALSE 87594
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
87572: CALL_OW 44
87576: PPUSH
87577: LD_VAR 0 4
87581: PPUSH
87582: LD_VAR 0 5
87586: PPUSH
87587: LD_INT 1
87589: PPUSH
87590: CALL_OW 48
// end ;
87594: LD_VAR 0 6
87598: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
87599: LD_INT 0
87601: PPUSH
87602: PPUSH
// uc_side := your_side ;
87603: LD_ADDR_OWVAR 20
87607: PUSH
87608: LD_OWVAR 2
87612: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
87613: LD_VAR 0 1
87617: PUSH
87618: LD_INT 1
87620: PUSH
87621: LD_INT 2
87623: PUSH
87624: LD_INT 3
87626: PUSH
87627: LD_INT 4
87629: PUSH
87630: LD_INT 5
87632: PUSH
87633: EMPTY
87634: LIST
87635: LIST
87636: LIST
87637: LIST
87638: LIST
87639: IN
87640: IFFALSE 87652
// uc_nation := nation_american else
87642: LD_ADDR_OWVAR 21
87646: PUSH
87647: LD_INT 1
87649: ST_TO_ADDR
87650: GO 87695
// if chassis in [ 11 , 12 , 13 , 14 ] then
87652: LD_VAR 0 1
87656: PUSH
87657: LD_INT 11
87659: PUSH
87660: LD_INT 12
87662: PUSH
87663: LD_INT 13
87665: PUSH
87666: LD_INT 14
87668: PUSH
87669: EMPTY
87670: LIST
87671: LIST
87672: LIST
87673: LIST
87674: IN
87675: IFFALSE 87687
// uc_nation := nation_arabian else
87677: LD_ADDR_OWVAR 21
87681: PUSH
87682: LD_INT 2
87684: ST_TO_ADDR
87685: GO 87695
// uc_nation := nation_russian ;
87687: LD_ADDR_OWVAR 21
87691: PUSH
87692: LD_INT 3
87694: ST_TO_ADDR
// vc_chassis := chassis ;
87695: LD_ADDR_OWVAR 37
87699: PUSH
87700: LD_VAR 0 1
87704: ST_TO_ADDR
// vc_engine := engine ;
87705: LD_ADDR_OWVAR 39
87709: PUSH
87710: LD_VAR 0 2
87714: ST_TO_ADDR
// vc_control := control ;
87715: LD_ADDR_OWVAR 38
87719: PUSH
87720: LD_VAR 0 3
87724: ST_TO_ADDR
// vc_weapon := weapon ;
87725: LD_ADDR_OWVAR 40
87729: PUSH
87730: LD_VAR 0 4
87734: ST_TO_ADDR
// un := CreateVehicle ;
87735: LD_ADDR_VAR 0 8
87739: PUSH
87740: CALL_OW 45
87744: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
87745: LD_VAR 0 8
87749: PPUSH
87750: LD_INT 0
87752: PPUSH
87753: LD_INT 5
87755: PPUSH
87756: CALL_OW 12
87760: PPUSH
87761: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
87765: LD_VAR 0 8
87769: PPUSH
87770: LD_VAR 0 5
87774: PPUSH
87775: LD_VAR 0 6
87779: PPUSH
87780: LD_INT 1
87782: PPUSH
87783: CALL_OW 48
// end ;
87787: LD_VAR 0 7
87791: RET
// export hInvincible ; every 1 do
87792: GO 87794
87794: DISABLE
// hInvincible := [ ] ;
87795: LD_ADDR_EXP 132
87799: PUSH
87800: EMPTY
87801: ST_TO_ADDR
87802: END
// every 10 do var i ;
87803: GO 87805
87805: DISABLE
87806: LD_INT 0
87808: PPUSH
// begin enable ;
87809: ENABLE
// if not hInvincible then
87810: LD_EXP 132
87814: NOT
87815: IFFALSE 87819
// exit ;
87817: GO 87863
// for i in hInvincible do
87819: LD_ADDR_VAR 0 1
87823: PUSH
87824: LD_EXP 132
87828: PUSH
87829: FOR_IN
87830: IFFALSE 87861
// if GetLives ( i ) < 1000 then
87832: LD_VAR 0 1
87836: PPUSH
87837: CALL_OW 256
87841: PUSH
87842: LD_INT 1000
87844: LESS
87845: IFFALSE 87859
// SetLives ( i , 1000 ) ;
87847: LD_VAR 0 1
87851: PPUSH
87852: LD_INT 1000
87854: PPUSH
87855: CALL_OW 234
87859: GO 87829
87861: POP
87862: POP
// end ;
87863: PPOPN 1
87865: END
// export function hHackInvincible ; var i ; begin
87866: LD_INT 0
87868: PPUSH
87869: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
87870: LD_ADDR_VAR 0 2
87874: PUSH
87875: LD_INT 2
87877: PUSH
87878: LD_INT 21
87880: PUSH
87881: LD_INT 1
87883: PUSH
87884: EMPTY
87885: LIST
87886: LIST
87887: PUSH
87888: LD_INT 21
87890: PUSH
87891: LD_INT 2
87893: PUSH
87894: EMPTY
87895: LIST
87896: LIST
87897: PUSH
87898: EMPTY
87899: LIST
87900: LIST
87901: LIST
87902: PPUSH
87903: CALL_OW 69
87907: PUSH
87908: FOR_IN
87909: IFFALSE 87970
// if IsSelected ( i ) then
87911: LD_VAR 0 2
87915: PPUSH
87916: CALL_OW 306
87920: IFFALSE 87968
// begin if i in hInvincible then
87922: LD_VAR 0 2
87926: PUSH
87927: LD_EXP 132
87931: IN
87932: IFFALSE 87952
// hInvincible := hInvincible diff i else
87934: LD_ADDR_EXP 132
87938: PUSH
87939: LD_EXP 132
87943: PUSH
87944: LD_VAR 0 2
87948: DIFF
87949: ST_TO_ADDR
87950: GO 87968
// hInvincible := hInvincible union i ;
87952: LD_ADDR_EXP 132
87956: PUSH
87957: LD_EXP 132
87961: PUSH
87962: LD_VAR 0 2
87966: UNION
87967: ST_TO_ADDR
// end ;
87968: GO 87908
87970: POP
87971: POP
// end ;
87972: LD_VAR 0 1
87976: RET
// export function hHackInvisible ; var i , j ; begin
87977: LD_INT 0
87979: PPUSH
87980: PPUSH
87981: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
87982: LD_ADDR_VAR 0 2
87986: PUSH
87987: LD_INT 21
87989: PUSH
87990: LD_INT 1
87992: PUSH
87993: EMPTY
87994: LIST
87995: LIST
87996: PPUSH
87997: CALL_OW 69
88001: PUSH
88002: FOR_IN
88003: IFFALSE 88027
// if IsSelected ( i ) then
88005: LD_VAR 0 2
88009: PPUSH
88010: CALL_OW 306
88014: IFFALSE 88025
// ComForceInvisible ( i ) ;
88016: LD_VAR 0 2
88020: PPUSH
88021: CALL_OW 496
88025: GO 88002
88027: POP
88028: POP
// end ;
88029: LD_VAR 0 1
88033: RET
// export function hHackChangeYourSide ; begin
88034: LD_INT 0
88036: PPUSH
// if your_side = 8 then
88037: LD_OWVAR 2
88041: PUSH
88042: LD_INT 8
88044: EQUAL
88045: IFFALSE 88057
// your_side := 0 else
88047: LD_ADDR_OWVAR 2
88051: PUSH
88052: LD_INT 0
88054: ST_TO_ADDR
88055: GO 88071
// your_side := your_side + 1 ;
88057: LD_ADDR_OWVAR 2
88061: PUSH
88062: LD_OWVAR 2
88066: PUSH
88067: LD_INT 1
88069: PLUS
88070: ST_TO_ADDR
// end ;
88071: LD_VAR 0 1
88075: RET
// export function hHackChangeUnitSide ; var i , j ; begin
88076: LD_INT 0
88078: PPUSH
88079: PPUSH
88080: PPUSH
// for i in all_units do
88081: LD_ADDR_VAR 0 2
88085: PUSH
88086: LD_OWVAR 3
88090: PUSH
88091: FOR_IN
88092: IFFALSE 88170
// if IsSelected ( i ) then
88094: LD_VAR 0 2
88098: PPUSH
88099: CALL_OW 306
88103: IFFALSE 88168
// begin j := GetSide ( i ) ;
88105: LD_ADDR_VAR 0 3
88109: PUSH
88110: LD_VAR 0 2
88114: PPUSH
88115: CALL_OW 255
88119: ST_TO_ADDR
// if j = 8 then
88120: LD_VAR 0 3
88124: PUSH
88125: LD_INT 8
88127: EQUAL
88128: IFFALSE 88140
// j := 0 else
88130: LD_ADDR_VAR 0 3
88134: PUSH
88135: LD_INT 0
88137: ST_TO_ADDR
88138: GO 88154
// j := j + 1 ;
88140: LD_ADDR_VAR 0 3
88144: PUSH
88145: LD_VAR 0 3
88149: PUSH
88150: LD_INT 1
88152: PLUS
88153: ST_TO_ADDR
// SetSide ( i , j ) ;
88154: LD_VAR 0 2
88158: PPUSH
88159: LD_VAR 0 3
88163: PPUSH
88164: CALL_OW 235
// end ;
88168: GO 88091
88170: POP
88171: POP
// end ;
88172: LD_VAR 0 1
88176: RET
// export function hHackFog ; begin
88177: LD_INT 0
88179: PPUSH
// FogOff ( true ) ;
88180: LD_INT 1
88182: PPUSH
88183: CALL_OW 344
// end ;
88187: LD_VAR 0 1
88191: RET
// export function hHackTeleport ( unit , x , y ) ; begin
88192: LD_INT 0
88194: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
88195: LD_VAR 0 1
88199: PPUSH
88200: LD_VAR 0 2
88204: PPUSH
88205: LD_VAR 0 3
88209: PPUSH
88210: LD_INT 1
88212: PPUSH
88213: LD_INT 1
88215: PPUSH
88216: CALL_OW 483
// CenterOnXY ( x , y ) ;
88220: LD_VAR 0 2
88224: PPUSH
88225: LD_VAR 0 3
88229: PPUSH
88230: CALL_OW 84
// end ;
88234: LD_VAR 0 4
88238: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
88239: LD_INT 0
88241: PPUSH
88242: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
88243: LD_VAR 0 1
88247: NOT
88248: IFTRUE 88267
88250: PUSH
88251: LD_VAR 0 2
88255: PPUSH
88256: LD_VAR 0 3
88260: PPUSH
88261: CALL_OW 488
88265: NOT
88266: OR
88267: IFTRUE 88302
88269: PUSH
88270: LD_VAR 0 1
88274: PPUSH
88275: CALL_OW 266
88279: PUSH
88280: LD_INT 3
88282: NONEQUAL
88283: IFFALSE 88301
88285: PUSH
88286: LD_VAR 0 1
88290: PPUSH
88291: CALL_OW 247
88295: PUSH
88296: LD_INT 1
88298: EQUAL
88299: NOT
88300: AND
88301: OR
88302: IFFALSE 88306
// exit ;
88304: GO 88588
// if GetType ( factory ) = unit_human then
88306: LD_VAR 0 1
88310: PPUSH
88311: CALL_OW 247
88315: PUSH
88316: LD_INT 1
88318: EQUAL
88319: IFFALSE 88336
// factory := IsInUnit ( factory ) ;
88321: LD_ADDR_VAR 0 1
88325: PUSH
88326: LD_VAR 0 1
88330: PPUSH
88331: CALL_OW 310
88335: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
88336: LD_VAR 0 1
88340: PPUSH
88341: CALL_OW 266
88345: PUSH
88346: LD_INT 3
88348: NONEQUAL
88349: IFFALSE 88353
// exit ;
88351: GO 88588
// for i := 1 to Count ( factoryWaypoints ) do
88353: LD_ADDR_VAR 0 5
88357: PUSH
88358: DOUBLE
88359: LD_INT 1
88361: DEC
88362: ST_TO_ADDR
88363: LD_EXP 133
88367: PPUSH
88368: CALL 32329 0 1
88372: PUSH
88373: FOR_TO
88374: IFFALSE 88536
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
88376: LD_VAR 0 2
88380: PPUSH
88381: LD_VAR 0 3
88385: PPUSH
88386: CALL_OW 428
88390: PUSH
88391: LD_EXP 133
88395: PUSH
88396: LD_VAR 0 5
88400: ARRAY
88401: PUSH
88402: LD_INT 2
88404: ARRAY
88405: EQUAL
88406: IFFALSE 88438
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88408: LD_ADDR_EXP 133
88412: PUSH
88413: LD_EXP 133
88417: PPUSH
88418: LD_VAR 0 5
88422: PPUSH
88423: CALL_OW 3
88427: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88428: CALL 88593 0 0
// exit ;
88432: POP
88433: POP
88434: GO 88588
// end else
88436: GO 88534
// if factory = factoryWaypoints [ i ] [ 2 ] then
88438: LD_VAR 0 1
88442: PUSH
88443: LD_EXP 133
88447: PUSH
88448: LD_VAR 0 5
88452: ARRAY
88453: PUSH
88454: LD_INT 2
88456: ARRAY
88457: EQUAL
88458: IFFALSE 88534
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
88460: LD_ADDR_EXP 133
88464: PUSH
88465: LD_EXP 133
88469: PPUSH
88470: LD_VAR 0 5
88474: PPUSH
88475: CALL_OW 3
88479: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88480: LD_ADDR_EXP 133
88484: PUSH
88485: LD_EXP 133
88489: PPUSH
88490: LD_VAR 0 1
88494: PPUSH
88495: CALL_OW 255
88499: PUSH
88500: LD_VAR 0 1
88504: PUSH
88505: LD_VAR 0 2
88509: PUSH
88510: LD_VAR 0 3
88514: PUSH
88515: EMPTY
88516: LIST
88517: LIST
88518: LIST
88519: LIST
88520: PPUSH
88521: CALL 68261 0 2
88525: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88526: CALL 88593 0 0
// exit ;
88530: POP
88531: POP
88532: GO 88588
// end ; end ;
88534: GO 88373
88536: POP
88537: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
88538: LD_ADDR_EXP 133
88542: PUSH
88543: LD_EXP 133
88547: PPUSH
88548: LD_VAR 0 1
88552: PPUSH
88553: CALL_OW 255
88557: PUSH
88558: LD_VAR 0 1
88562: PUSH
88563: LD_VAR 0 2
88567: PUSH
88568: LD_VAR 0 3
88572: PUSH
88573: EMPTY
88574: LIST
88575: LIST
88576: LIST
88577: LIST
88578: PPUSH
88579: CALL 68261 0 2
88583: ST_TO_ADDR
// UpdateFactoryWaypoints ;
88584: CALL 88593 0 0
// end ;
88588: LD_VAR 0 4
88592: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
88593: LD_INT 0
88595: PPUSH
88596: PPUSH
88597: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
88598: LD_STRING resetFactoryWaypoint();
88600: PPUSH
88601: CALL_OW 559
// if factoryWaypoints then
88605: LD_EXP 133
88609: IFFALSE 88730
// begin list := factoryWaypoints ;
88611: LD_ADDR_VAR 0 3
88615: PUSH
88616: LD_EXP 133
88620: ST_TO_ADDR
// for i := 1 to list do
88621: LD_ADDR_VAR 0 2
88625: PUSH
88626: DOUBLE
88627: LD_INT 1
88629: DEC
88630: ST_TO_ADDR
88631: LD_VAR 0 3
88635: PUSH
88636: FOR_TO
88637: IFFALSE 88728
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88639: LD_STRING setFactoryWaypointXY(
88641: PUSH
88642: LD_VAR 0 3
88646: PUSH
88647: LD_VAR 0 2
88651: ARRAY
88652: PUSH
88653: LD_INT 1
88655: ARRAY
88656: STR
88657: PUSH
88658: LD_STRING ,
88660: STR
88661: PUSH
88662: LD_VAR 0 3
88666: PUSH
88667: LD_VAR 0 2
88671: ARRAY
88672: PUSH
88673: LD_INT 2
88675: ARRAY
88676: STR
88677: PUSH
88678: LD_STRING ,
88680: STR
88681: PUSH
88682: LD_VAR 0 3
88686: PUSH
88687: LD_VAR 0 2
88691: ARRAY
88692: PUSH
88693: LD_INT 3
88695: ARRAY
88696: STR
88697: PUSH
88698: LD_STRING ,
88700: STR
88701: PUSH
88702: LD_VAR 0 3
88706: PUSH
88707: LD_VAR 0 2
88711: ARRAY
88712: PUSH
88713: LD_INT 4
88715: ARRAY
88716: STR
88717: PUSH
88718: LD_STRING )
88720: STR
88721: PPUSH
88722: CALL_OW 559
88726: GO 88636
88728: POP
88729: POP
// end ; end ;
88730: LD_VAR 0 1
88734: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
88735: LD_INT 0
88737: PPUSH
// if HexInfo ( x , y ) = warehouse then
88738: LD_VAR 0 2
88742: PPUSH
88743: LD_VAR 0 3
88747: PPUSH
88748: CALL_OW 428
88752: PUSH
88753: LD_VAR 0 1
88757: EQUAL
88758: IFFALSE 88785
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
88760: LD_ADDR_EXP 135
88764: PUSH
88765: LD_EXP 135
88769: PPUSH
88770: LD_VAR 0 1
88774: PPUSH
88775: LD_INT 0
88777: PPUSH
88778: CALL_OW 1
88782: ST_TO_ADDR
88783: GO 88836
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
88785: LD_ADDR_EXP 135
88789: PUSH
88790: LD_EXP 135
88794: PPUSH
88795: LD_VAR 0 1
88799: PPUSH
88800: LD_VAR 0 1
88804: PPUSH
88805: CALL_OW 255
88809: PUSH
88810: LD_VAR 0 1
88814: PUSH
88815: LD_VAR 0 2
88819: PUSH
88820: LD_VAR 0 3
88824: PUSH
88825: EMPTY
88826: LIST
88827: LIST
88828: LIST
88829: LIST
88830: PPUSH
88831: CALL_OW 1
88835: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
88836: CALL 88845 0 0
// end ;
88840: LD_VAR 0 4
88844: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
88845: LD_INT 0
88847: PPUSH
88848: PPUSH
88849: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
88850: LD_STRING resetWarehouseGatheringPoints();
88852: PPUSH
88853: CALL_OW 559
// if warehouseGatheringPoints then
88857: LD_EXP 135
88861: IFFALSE 88987
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
88863: LD_ADDR_VAR 0 3
88867: PUSH
88868: LD_EXP 135
88872: PPUSH
88873: CALL 72195 0 1
88877: ST_TO_ADDR
// for i := 1 to list do
88878: LD_ADDR_VAR 0 2
88882: PUSH
88883: DOUBLE
88884: LD_INT 1
88886: DEC
88887: ST_TO_ADDR
88888: LD_VAR 0 3
88892: PUSH
88893: FOR_TO
88894: IFFALSE 88985
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
88896: LD_STRING setWarehouseGatheringPointXY(
88898: PUSH
88899: LD_VAR 0 3
88903: PUSH
88904: LD_VAR 0 2
88908: ARRAY
88909: PUSH
88910: LD_INT 1
88912: ARRAY
88913: STR
88914: PUSH
88915: LD_STRING ,
88917: STR
88918: PUSH
88919: LD_VAR 0 3
88923: PUSH
88924: LD_VAR 0 2
88928: ARRAY
88929: PUSH
88930: LD_INT 2
88932: ARRAY
88933: STR
88934: PUSH
88935: LD_STRING ,
88937: STR
88938: PUSH
88939: LD_VAR 0 3
88943: PUSH
88944: LD_VAR 0 2
88948: ARRAY
88949: PUSH
88950: LD_INT 3
88952: ARRAY
88953: STR
88954: PUSH
88955: LD_STRING ,
88957: STR
88958: PUSH
88959: LD_VAR 0 3
88963: PUSH
88964: LD_VAR 0 2
88968: ARRAY
88969: PUSH
88970: LD_INT 4
88972: ARRAY
88973: STR
88974: PUSH
88975: LD_STRING )
88977: STR
88978: PPUSH
88979: CALL_OW 559
88983: GO 88893
88985: POP
88986: POP
// end ; end ;
88987: LD_VAR 0 1
88991: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
88992: LD_EXP 135
88996: IFFALSE 89691
88998: GO 89000
89000: DISABLE
89001: LD_INT 0
89003: PPUSH
89004: PPUSH
89005: PPUSH
89006: PPUSH
89007: PPUSH
89008: PPUSH
89009: PPUSH
89010: PPUSH
89011: PPUSH
// begin enable ;
89012: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
89013: LD_ADDR_VAR 0 3
89017: PUSH
89018: LD_EXP 135
89022: PPUSH
89023: CALL 72195 0 1
89027: ST_TO_ADDR
// if not list then
89028: LD_VAR 0 3
89032: NOT
89033: IFFALSE 89037
// exit ;
89035: GO 89691
// for i := 1 to list do
89037: LD_ADDR_VAR 0 1
89041: PUSH
89042: DOUBLE
89043: LD_INT 1
89045: DEC
89046: ST_TO_ADDR
89047: LD_VAR 0 3
89051: PUSH
89052: FOR_TO
89053: IFFALSE 89689
// begin depot := list [ i ] [ 2 ] ;
89055: LD_ADDR_VAR 0 8
89059: PUSH
89060: LD_VAR 0 3
89064: PUSH
89065: LD_VAR 0 1
89069: ARRAY
89070: PUSH
89071: LD_INT 2
89073: ARRAY
89074: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
89075: LD_ADDR_VAR 0 5
89079: PUSH
89080: LD_VAR 0 3
89084: PUSH
89085: LD_VAR 0 1
89089: ARRAY
89090: PUSH
89091: LD_INT 1
89093: ARRAY
89094: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
89095: LD_VAR 0 8
89099: PPUSH
89100: CALL_OW 301
89104: IFTRUE 89123
89106: PUSH
89107: LD_VAR 0 5
89111: PUSH
89112: LD_VAR 0 8
89116: PPUSH
89117: CALL_OW 255
89121: NONEQUAL
89122: OR
89123: IFFALSE 89152
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
89125: LD_ADDR_EXP 135
89129: PUSH
89130: LD_EXP 135
89134: PPUSH
89135: LD_VAR 0 8
89139: PPUSH
89140: LD_INT 0
89142: PPUSH
89143: CALL_OW 1
89147: ST_TO_ADDR
// exit ;
89148: POP
89149: POP
89150: GO 89691
// end ; x := list [ i ] [ 3 ] ;
89152: LD_ADDR_VAR 0 6
89156: PUSH
89157: LD_VAR 0 3
89161: PUSH
89162: LD_VAR 0 1
89166: ARRAY
89167: PUSH
89168: LD_INT 3
89170: ARRAY
89171: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
89172: LD_ADDR_VAR 0 7
89176: PUSH
89177: LD_VAR 0 3
89181: PUSH
89182: LD_VAR 0 1
89186: ARRAY
89187: PUSH
89188: LD_INT 4
89190: ARRAY
89191: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
89192: LD_ADDR_VAR 0 9
89196: PUSH
89197: LD_VAR 0 6
89201: PPUSH
89202: LD_VAR 0 7
89206: PPUSH
89207: LD_INT 16
89209: PPUSH
89210: CALL 70769 0 3
89214: ST_TO_ADDR
// if not cratesNearbyPoint then
89215: LD_VAR 0 9
89219: NOT
89220: IFFALSE 89226
// exit ;
89222: POP
89223: POP
89224: GO 89691
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
89226: LD_ADDR_VAR 0 4
89230: PUSH
89231: LD_INT 22
89233: PUSH
89234: LD_VAR 0 5
89238: PUSH
89239: EMPTY
89240: LIST
89241: LIST
89242: PUSH
89243: LD_INT 3
89245: PUSH
89246: LD_INT 60
89248: PUSH
89249: EMPTY
89250: LIST
89251: PUSH
89252: EMPTY
89253: LIST
89254: LIST
89255: PUSH
89256: LD_INT 91
89258: PUSH
89259: LD_VAR 0 8
89263: PUSH
89264: LD_INT 6
89266: PUSH
89267: EMPTY
89268: LIST
89269: LIST
89270: LIST
89271: PUSH
89272: LD_INT 2
89274: PUSH
89275: LD_INT 25
89277: PUSH
89278: LD_INT 2
89280: PUSH
89281: EMPTY
89282: LIST
89283: LIST
89284: PUSH
89285: LD_INT 25
89287: PUSH
89288: LD_INT 16
89290: PUSH
89291: EMPTY
89292: LIST
89293: LIST
89294: PUSH
89295: EMPTY
89296: LIST
89297: LIST
89298: LIST
89299: PUSH
89300: EMPTY
89301: LIST
89302: LIST
89303: LIST
89304: LIST
89305: PPUSH
89306: CALL_OW 69
89310: PUSH
89311: LD_VAR 0 8
89315: PPUSH
89316: CALL_OW 313
89320: PPUSH
89321: LD_INT 3
89323: PUSH
89324: LD_INT 60
89326: PUSH
89327: EMPTY
89328: LIST
89329: PUSH
89330: EMPTY
89331: LIST
89332: LIST
89333: PUSH
89334: LD_INT 2
89336: PUSH
89337: LD_INT 25
89339: PUSH
89340: LD_INT 2
89342: PUSH
89343: EMPTY
89344: LIST
89345: LIST
89346: PUSH
89347: LD_INT 25
89349: PUSH
89350: LD_INT 16
89352: PUSH
89353: EMPTY
89354: LIST
89355: LIST
89356: PUSH
89357: EMPTY
89358: LIST
89359: LIST
89360: LIST
89361: PUSH
89362: EMPTY
89363: LIST
89364: LIST
89365: PPUSH
89366: CALL_OW 72
89370: UNION
89371: ST_TO_ADDR
// if tmp then
89372: LD_VAR 0 4
89376: IFFALSE 89456
// begin tmp := ShrinkArray ( tmp , 3 ) ;
89378: LD_ADDR_VAR 0 4
89382: PUSH
89383: LD_VAR 0 4
89387: PPUSH
89388: LD_INT 3
89390: PPUSH
89391: CALL 68576 0 2
89395: ST_TO_ADDR
// for j in tmp do
89396: LD_ADDR_VAR 0 2
89400: PUSH
89401: LD_VAR 0 4
89405: PUSH
89406: FOR_IN
89407: IFFALSE 89450
// begin if IsInUnit ( j ) then
89409: LD_VAR 0 2
89413: PPUSH
89414: CALL_OW 310
89418: IFFALSE 89429
// ComExit ( j ) ;
89420: LD_VAR 0 2
89424: PPUSH
89425: CALL 68659 0 1
// AddComCollect ( j , x , y ) ;
89429: LD_VAR 0 2
89433: PPUSH
89434: LD_VAR 0 6
89438: PPUSH
89439: LD_VAR 0 7
89443: PPUSH
89444: CALL_OW 177
// end ;
89448: GO 89406
89450: POP
89451: POP
// exit ;
89452: POP
89453: POP
89454: GO 89691
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
89456: LD_ADDR_VAR 0 4
89460: PUSH
89461: LD_INT 22
89463: PUSH
89464: LD_VAR 0 5
89468: PUSH
89469: EMPTY
89470: LIST
89471: LIST
89472: PUSH
89473: LD_INT 91
89475: PUSH
89476: LD_VAR 0 8
89480: PUSH
89481: LD_INT 8
89483: PUSH
89484: EMPTY
89485: LIST
89486: LIST
89487: LIST
89488: PUSH
89489: LD_INT 2
89491: PUSH
89492: LD_INT 34
89494: PUSH
89495: LD_INT 12
89497: PUSH
89498: EMPTY
89499: LIST
89500: LIST
89501: PUSH
89502: LD_INT 34
89504: PUSH
89505: LD_INT 51
89507: PUSH
89508: EMPTY
89509: LIST
89510: LIST
89511: PUSH
89512: LD_INT 34
89514: PUSH
89515: LD_INT 32
89517: PUSH
89518: EMPTY
89519: LIST
89520: LIST
89521: PUSH
89522: LD_INT 34
89524: PUSH
89525: LD_INT 89
89527: PUSH
89528: EMPTY
89529: LIST
89530: LIST
89531: PUSH
89532: EMPTY
89533: LIST
89534: LIST
89535: LIST
89536: LIST
89537: LIST
89538: PUSH
89539: EMPTY
89540: LIST
89541: LIST
89542: LIST
89543: PPUSH
89544: CALL_OW 69
89548: ST_TO_ADDR
// if tmp then
89549: LD_VAR 0 4
89553: IFFALSE 89687
// begin for j in tmp do
89555: LD_ADDR_VAR 0 2
89559: PUSH
89560: LD_VAR 0 4
89564: PUSH
89565: FOR_IN
89566: IFFALSE 89685
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
89568: LD_VAR 0 2
89572: PPUSH
89573: CALL_OW 262
89577: PUSH
89578: LD_INT 3
89580: EQUAL
89581: IFTRUE 89598
89583: PUSH
89584: LD_VAR 0 2
89588: PPUSH
89589: CALL_OW 261
89593: PUSH
89594: LD_INT 20
89596: GREATER
89597: OR
89598: IFFALSE 89612
89600: PUSH
89601: LD_VAR 0 2
89605: PPUSH
89606: CALL_OW 314
89610: NOT
89611: AND
89612: IFFALSE 89642
89614: PUSH
89615: LD_VAR 0 2
89619: PPUSH
89620: CALL_OW 263
89624: PUSH
89625: LD_INT 1
89627: NONEQUAL
89628: IFTRUE 89641
89630: PUSH
89631: LD_VAR 0 2
89635: PPUSH
89636: CALL_OW 311
89640: OR
89641: AND
89642: IFFALSE 89683
// begin ComCollect ( j , x , y ) ;
89644: LD_VAR 0 2
89648: PPUSH
89649: LD_VAR 0 6
89653: PPUSH
89654: LD_VAR 0 7
89658: PPUSH
89659: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
89663: LD_VAR 0 2
89667: PPUSH
89668: LD_VAR 0 8
89672: PPUSH
89673: CALL_OW 172
// exit ;
89677: POP
89678: POP
89679: POP
89680: POP
89681: GO 89691
// end ;
89683: GO 89565
89685: POP
89686: POP
// end ; end ;
89687: GO 89052
89689: POP
89690: POP
// end ; end_of_file
89691: PPOPN 9
89693: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89694: LD_VAR 0 1
89698: PUSH
89699: LD_INT 200
89701: DOUBLE
89702: GREATEREQUAL
89703: IFFALSE 89711
89705: LD_INT 299
89707: DOUBLE
89708: LESSEQUAL
89709: IFTRUE 89713
89711: GO 89745
89713: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89714: LD_VAR 0 1
89718: PPUSH
89719: LD_VAR 0 2
89723: PPUSH
89724: LD_VAR 0 3
89728: PPUSH
89729: LD_VAR 0 4
89733: PPUSH
89734: LD_VAR 0 5
89738: PPUSH
89739: CALL 90526 0 5
89743: GO 89822
89745: LD_INT 300
89747: DOUBLE
89748: GREATEREQUAL
89749: IFFALSE 89757
89751: LD_INT 399
89753: DOUBLE
89754: LESSEQUAL
89755: IFTRUE 89759
89757: GO 89821
89759: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89760: LD_VAR 0 1
89764: PPUSH
89765: LD_VAR 0 2
89769: PPUSH
89770: LD_VAR 0 3
89774: PPUSH
89775: LD_VAR 0 4
89779: PPUSH
89780: LD_VAR 0 5
89784: PPUSH
89785: LD_VAR 0 6
89789: PPUSH
89790: LD_VAR 0 7
89794: PPUSH
89795: LD_VAR 0 8
89799: PPUSH
89800: LD_VAR 0 9
89804: PPUSH
89805: LD_VAR 0 10
89809: PPUSH
89810: LD_VAR 0 11
89814: PPUSH
89815: CALL 86247 0 11
89819: GO 89822
89821: POP
// end ;
89822: PPOPN 11
89824: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89825: LD_VAR 0 1
89829: PPUSH
89830: LD_VAR 0 2
89834: PPUSH
89835: LD_VAR 0 3
89839: PPUSH
89840: LD_VAR 0 4
89844: PPUSH
89845: LD_VAR 0 5
89849: PPUSH
89850: CALL 89907 0 5
// end ; end_of_file
89854: PPOPN 5
89856: END
// export function SOS_UnitDestroyed ( un ) ; begin
89857: LD_INT 0
89859: PPUSH
// ComRadiation ( un ) ;
89860: LD_VAR 0 1
89864: PPUSH
89865: CALL 90946 0 1
// end ;
89869: LD_VAR 0 2
89873: RET
// export function SOS_UnitKamikazed ( un ) ; begin
89874: LD_INT 0
89876: PPUSH
// ComRadiation ( un ) ;
89877: LD_VAR 0 1
89881: PPUSH
89882: CALL 90946 0 1
// end ;
89886: LD_VAR 0 2
89890: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
89891: LD_INT 0
89893: PPUSH
// end ;
89894: LD_VAR 0 4
89898: RET
// export function SOS_Command ( cmd ) ; begin
89899: LD_INT 0
89901: PPUSH
// end ;
89902: LD_VAR 0 2
89906: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
89907: LD_INT 0
89909: PPUSH
// end ;
89910: LD_VAR 0 6
89914: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
89915: LD_INT 0
89917: PPUSH
89918: PPUSH
89919: PPUSH
89920: PPUSH
// if not vehicle or not factory then
89921: LD_VAR 0 1
89925: NOT
89926: IFTRUE 89935
89928: PUSH
89929: LD_VAR 0 2
89933: NOT
89934: OR
89935: IFFALSE 89939
// exit ;
89937: GO 90521
// if not factoryWaypoints then
89939: LD_EXP 133
89943: NOT
89944: IFFALSE 89948
// exit ;
89946: GO 90521
// for i := 1 to Count ( factoryWaypoints ) do
89948: LD_ADDR_VAR 0 4
89952: PUSH
89953: DOUBLE
89954: LD_INT 1
89956: DEC
89957: ST_TO_ADDR
89958: LD_EXP 133
89962: PPUSH
89963: CALL 32329 0 1
89967: PUSH
89968: FOR_TO
89969: IFFALSE 90519
// if factoryWaypoints [ i ] [ 2 ] = factory then
89971: LD_EXP 133
89975: PUSH
89976: LD_VAR 0 4
89980: ARRAY
89981: PUSH
89982: LD_INT 2
89984: ARRAY
89985: PUSH
89986: LD_VAR 0 2
89990: EQUAL
89991: IFFALSE 90517
// begin if GetControl ( vehicle ) = control_manual then
89993: LD_VAR 0 1
89997: PPUSH
89998: CALL_OW 263
90002: PUSH
90003: LD_INT 1
90005: EQUAL
90006: IFFALSE 90370
// begin driver := IsDrivenBy ( vehicle ) ;
90008: LD_ADDR_VAR 0 5
90012: PUSH
90013: LD_VAR 0 1
90017: PPUSH
90018: CALL_OW 311
90022: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
90023: LD_VAR 0 5
90027: PUSH
90028: LD_EXP 134
90032: IN
90033: IFTRUE 90047
90035: PUSH
90036: LD_VAR 0 1
90040: PUSH
90041: LD_EXP 134
90045: IN
90046: OR
90047: IFFALSE 90053
// exit ;
90049: POP
90050: POP
90051: GO 90521
// if not HasTask ( driver ) then
90053: LD_VAR 0 5
90057: PPUSH
90058: CALL_OW 314
90062: NOT
90063: IFFALSE 90368
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
90065: LD_ADDR_EXP 134
90069: PUSH
90070: LD_EXP 134
90074: PPUSH
90075: LD_VAR 0 5
90079: PPUSH
90080: CALL 68261 0 2
90084: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
90085: LD_ADDR_EXP 134
90089: PUSH
90090: LD_EXP 134
90094: PPUSH
90095: LD_VAR 0 1
90099: PPUSH
90100: CALL 68261 0 2
90104: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90105: LD_ADDR_VAR 0 6
90109: PUSH
90110: LD_EXP 133
90114: PUSH
90115: LD_VAR 0 4
90119: ARRAY
90120: PUSH
90121: LD_INT 3
90123: ARRAY
90124: PPUSH
90125: LD_EXP 133
90129: PUSH
90130: LD_VAR 0 4
90134: ARRAY
90135: PUSH
90136: LD_INT 4
90138: ARRAY
90139: PPUSH
90140: CALL_OW 428
90144: ST_TO_ADDR
// if hex then
90145: LD_VAR 0 6
90149: IFFALSE 90167
// ComMoveUnit ( driver , hex ) else
90151: LD_VAR 0 5
90155: PPUSH
90156: LD_VAR 0 6
90160: PPUSH
90161: CALL_OW 112
90165: GO 90251
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
90167: LD_VAR 0 1
90171: PPUSH
90172: LD_EXP 133
90176: PUSH
90177: LD_VAR 0 4
90181: ARRAY
90182: PUSH
90183: LD_INT 3
90185: ARRAY
90186: PPUSH
90187: LD_EXP 133
90191: PUSH
90192: LD_VAR 0 4
90196: ARRAY
90197: PUSH
90198: LD_INT 4
90200: ARRAY
90201: PPUSH
90202: CALL_OW 297
90206: PUSH
90207: LD_INT 0
90209: GREATER
90210: IFFALSE 90251
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90212: LD_VAR 0 5
90216: PPUSH
90217: LD_EXP 133
90221: PUSH
90222: LD_VAR 0 4
90226: ARRAY
90227: PUSH
90228: LD_INT 3
90230: ARRAY
90231: PPUSH
90232: LD_EXP 133
90236: PUSH
90237: LD_VAR 0 4
90241: ARRAY
90242: PUSH
90243: LD_INT 4
90245: ARRAY
90246: PPUSH
90247: CALL_OW 111
// AddComExitVehicle ( driver ) ;
90251: LD_VAR 0 5
90255: PPUSH
90256: CALL_OW 181
// if Multiplayer then
90260: LD_OWVAR 4
90264: IFFALSE 90313
// begin repeat wait ( 10 ) ;
90266: LD_INT 10
90268: PPUSH
90269: CALL_OW 67
// until not IsInUnit ( driver ) ;
90273: LD_VAR 0 5
90277: PPUSH
90278: CALL_OW 310
90282: NOT
90283: IFFALSE 90266
// if not HasTask ( driver ) then
90285: LD_VAR 0 5
90289: PPUSH
90290: CALL_OW 314
90294: NOT
90295: IFFALSE 90311
// ComEnterUnit ( driver , factory ) ;
90297: LD_VAR 0 5
90301: PPUSH
90302: LD_VAR 0 2
90306: PPUSH
90307: CALL_OW 120
// end else
90311: GO 90327
// AddComEnterUnit ( driver , factory ) ;
90313: LD_VAR 0 5
90317: PPUSH
90318: LD_VAR 0 2
90322: PPUSH
90323: CALL_OW 180
// wait ( 0 0$1 ) ;
90327: LD_INT 35
90329: PPUSH
90330: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
90334: LD_ADDR_EXP 134
90338: PUSH
90339: LD_EXP 134
90343: PUSH
90344: LD_VAR 0 5
90348: DIFF
90349: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
90350: LD_ADDR_EXP 134
90354: PUSH
90355: LD_EXP 134
90359: PUSH
90360: LD_VAR 0 1
90364: DIFF
90365: ST_TO_ADDR
// break ;
90366: GO 90519
// end ; end else
90368: GO 90517
// if GetControl ( vehicle ) = control_remote then
90370: LD_VAR 0 1
90374: PPUSH
90375: CALL_OW 263
90379: PUSH
90380: LD_INT 2
90382: EQUAL
90383: IFFALSE 90469
// begin wait ( 0 0$2 ) ;
90385: LD_INT 70
90387: PPUSH
90388: CALL_OW 67
// repeat wait ( 10 ) ;
90392: LD_INT 10
90394: PPUSH
90395: CALL_OW 67
// Connect ( vehicle ) ;
90399: LD_VAR 0 1
90403: PPUSH
90404: CALL 38573 0 1
// until IsControledBy ( vehicle ) ;
90408: LD_VAR 0 1
90412: PPUSH
90413: CALL_OW 312
90417: IFFALSE 90392
// wait ( 10 ) ;
90419: LD_INT 10
90421: PPUSH
90422: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90426: LD_VAR 0 1
90430: PPUSH
90431: LD_EXP 133
90435: PUSH
90436: LD_VAR 0 4
90440: ARRAY
90441: PUSH
90442: LD_INT 3
90444: ARRAY
90445: PPUSH
90446: LD_EXP 133
90450: PUSH
90451: LD_VAR 0 4
90455: ARRAY
90456: PUSH
90457: LD_INT 4
90459: ARRAY
90460: PPUSH
90461: CALL_OW 111
// break ;
90465: GO 90519
// end else
90467: GO 90517
// begin wait ( 0 0$3 ) ;
90469: LD_INT 105
90471: PPUSH
90472: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
90476: LD_VAR 0 1
90480: PPUSH
90481: LD_EXP 133
90485: PUSH
90486: LD_VAR 0 4
90490: ARRAY
90491: PUSH
90492: LD_INT 3
90494: ARRAY
90495: PPUSH
90496: LD_EXP 133
90500: PUSH
90501: LD_VAR 0 4
90505: ARRAY
90506: PUSH
90507: LD_INT 4
90509: ARRAY
90510: PPUSH
90511: CALL_OW 111
// break ;
90515: GO 90519
// end ; end ;
90517: GO 89968
90519: POP
90520: POP
// end ;
90521: LD_VAR 0 3
90525: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
90526: LD_INT 0
90528: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
90529: LD_VAR 0 1
90533: PUSH
90534: LD_INT 250
90536: EQUAL
90537: IFFALSE 90554
90539: PUSH
90540: LD_VAR 0 2
90544: PPUSH
90545: CALL_OW 264
90549: PUSH
90550: LD_INT 81
90552: EQUAL
90553: AND
90554: IFFALSE 90575
// MinerPlaceMine ( unit , x , y ) ;
90556: LD_VAR 0 2
90560: PPUSH
90561: LD_VAR 0 4
90565: PPUSH
90566: LD_VAR 0 5
90570: PPUSH
90571: CALL 93707 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
90575: LD_VAR 0 1
90579: PUSH
90580: LD_INT 251
90582: EQUAL
90583: IFFALSE 90600
90585: PUSH
90586: LD_VAR 0 2
90590: PPUSH
90591: CALL_OW 264
90595: PUSH
90596: LD_INT 81
90598: EQUAL
90599: AND
90600: IFFALSE 90621
// MinerDetonateMine ( unit , x , y ) ;
90602: LD_VAR 0 2
90606: PPUSH
90607: LD_VAR 0 4
90611: PPUSH
90612: LD_VAR 0 5
90616: PPUSH
90617: CALL 93986 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
90621: LD_VAR 0 1
90625: PUSH
90626: LD_INT 252
90628: EQUAL
90629: IFFALSE 90646
90631: PUSH
90632: LD_VAR 0 2
90636: PPUSH
90637: CALL_OW 264
90641: PUSH
90642: LD_INT 81
90644: EQUAL
90645: AND
90646: IFFALSE 90667
// MinerCreateMinefield ( unit , x , y ) ;
90648: LD_VAR 0 2
90652: PPUSH
90653: LD_VAR 0 4
90657: PPUSH
90658: LD_VAR 0 5
90662: PPUSH
90663: CALL 94405 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
90667: LD_VAR 0 1
90671: PUSH
90672: LD_INT 253
90674: EQUAL
90675: IFFALSE 90692
90677: PUSH
90678: LD_VAR 0 2
90682: PPUSH
90683: CALL_OW 257
90687: PUSH
90688: LD_INT 5
90690: EQUAL
90691: AND
90692: IFFALSE 90713
// ComBinocular ( unit , x , y ) ;
90694: LD_VAR 0 2
90698: PPUSH
90699: LD_VAR 0 4
90703: PPUSH
90704: LD_VAR 0 5
90708: PPUSH
90709: CALL 94780 0 3
// if selectedUnit then
90713: LD_VAR 0 3
90717: IFFALSE 90777
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
90719: LD_VAR 0 1
90723: PUSH
90724: LD_INT 254
90726: EQUAL
90727: IFFALSE 90744
90729: PUSH
90730: LD_VAR 0 2
90734: PPUSH
90735: CALL_OW 264
90739: PUSH
90740: LD_INT 99
90742: EQUAL
90743: AND
90744: IFFALSE 90761
90746: PUSH
90747: LD_VAR 0 3
90751: PPUSH
90752: CALL_OW 263
90756: PUSH
90757: LD_INT 3
90759: EQUAL
90760: AND
90761: IFFALSE 90777
// HackDestroyVehicle ( unit , selectedUnit ) ;
90763: LD_VAR 0 2
90767: PPUSH
90768: LD_VAR 0 3
90772: PPUSH
90773: CALL 93067 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
90777: LD_VAR 0 1
90781: PUSH
90782: LD_INT 255
90784: EQUAL
90785: IFFALSE 90809
90787: PUSH
90788: LD_VAR 0 2
90792: PPUSH
90793: CALL_OW 264
90797: PUSH
90798: LD_INT 14
90800: PUSH
90801: LD_INT 53
90803: PUSH
90804: EMPTY
90805: LIST
90806: LIST
90807: IN
90808: AND
90809: IFFALSE 90827
90811: PUSH
90812: LD_VAR 0 4
90816: PPUSH
90817: LD_VAR 0 5
90821: PPUSH
90822: CALL_OW 488
90826: AND
90827: IFFALSE 90851
// CutTreeXYR ( unit , x , y , 12 ) ;
90829: LD_VAR 0 2
90833: PPUSH
90834: LD_VAR 0 4
90838: PPUSH
90839: LD_VAR 0 5
90843: PPUSH
90844: LD_INT 12
90846: PPUSH
90847: CALL 91042 0 4
// if cmd = 256 then
90851: LD_VAR 0 1
90855: PUSH
90856: LD_INT 256
90858: EQUAL
90859: IFFALSE 90880
// SetFactoryWaypoint ( unit , x , y ) ;
90861: LD_VAR 0 2
90865: PPUSH
90866: LD_VAR 0 4
90870: PPUSH
90871: LD_VAR 0 5
90875: PPUSH
90876: CALL 88239 0 3
// if cmd = 257 then
90880: LD_VAR 0 1
90884: PUSH
90885: LD_INT 257
90887: EQUAL
90888: IFFALSE 90909
// SetWarehouseGatheringPoint ( unit , x , y ) ;
90890: LD_VAR 0 2
90894: PPUSH
90895: LD_VAR 0 4
90899: PPUSH
90900: LD_VAR 0 5
90904: PPUSH
90905: CALL 88735 0 3
// if cmd = 258 then
90909: LD_VAR 0 1
90913: PUSH
90914: LD_INT 258
90916: EQUAL
90917: IFFALSE 90941
// BurnTreeXYR ( unit , x , y , 8 ) ;
90919: LD_VAR 0 2
90923: PPUSH
90924: LD_VAR 0 4
90928: PPUSH
90929: LD_VAR 0 5
90933: PPUSH
90934: LD_INT 8
90936: PPUSH
90937: CALL 91442 0 4
// end ;
90941: LD_VAR 0 6
90945: RET
// export function ComRadiation ( un ) ; var eff ; begin
90946: LD_INT 0
90948: PPUSH
90949: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
90950: LD_VAR 0 1
90954: PPUSH
90955: CALL_OW 264
90959: PUSH
90960: LD_INT 91
90962: NONEQUAL
90963: IFFALSE 90967
// exit ;
90965: GO 91037
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
90967: LD_INT 68
90969: PPUSH
90970: LD_VAR 0 1
90974: PPUSH
90975: CALL_OW 255
90979: PPUSH
90980: CALL_OW 321
90984: PUSH
90985: LD_INT 2
90987: EQUAL
90988: IFFALSE 91000
// eff := 50 else
90990: LD_ADDR_VAR 0 3
90994: PUSH
90995: LD_INT 50
90997: ST_TO_ADDR
90998: GO 91008
// eff := 25 ;
91000: LD_ADDR_VAR 0 3
91004: PUSH
91005: LD_INT 25
91007: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
91008: LD_VAR 0 1
91012: PPUSH
91013: CALL_OW 250
91017: PPUSH
91018: LD_VAR 0 1
91022: PPUSH
91023: CALL_OW 251
91027: PPUSH
91028: LD_VAR 0 3
91032: PPUSH
91033: CALL_OW 495
// end ;
91037: LD_VAR 0 2
91041: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
91042: LD_INT 0
91044: PPUSH
91045: PPUSH
91046: PPUSH
91047: PPUSH
91048: PPUSH
91049: PPUSH
91050: PPUSH
91051: PPUSH
91052: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
91053: LD_VAR 0 1
91057: PPUSH
91058: CALL_OW 302
91062: NOT
91063: IFTRUE 91082
91065: PUSH
91066: LD_VAR 0 2
91070: PPUSH
91071: LD_VAR 0 3
91075: PPUSH
91076: CALL_OW 488
91080: NOT
91081: OR
91082: IFTRUE 91091
91084: PUSH
91085: LD_VAR 0 4
91089: NOT
91090: OR
91091: IFFALSE 91095
// exit ;
91093: GO 91437
// list := [ ] ;
91095: LD_ADDR_VAR 0 13
91099: PUSH
91100: EMPTY
91101: ST_TO_ADDR
// if x - r < 0 then
91102: LD_VAR 0 2
91106: PUSH
91107: LD_VAR 0 4
91111: MINUS
91112: PUSH
91113: LD_INT 0
91115: LESS
91116: IFFALSE 91128
// min_x := 0 else
91118: LD_ADDR_VAR 0 7
91122: PUSH
91123: LD_INT 0
91125: ST_TO_ADDR
91126: GO 91144
// min_x := x - r ;
91128: LD_ADDR_VAR 0 7
91132: PUSH
91133: LD_VAR 0 2
91137: PUSH
91138: LD_VAR 0 4
91142: MINUS
91143: ST_TO_ADDR
// if y - r < 0 then
91144: LD_VAR 0 3
91148: PUSH
91149: LD_VAR 0 4
91153: MINUS
91154: PUSH
91155: LD_INT 0
91157: LESS
91158: IFFALSE 91170
// min_y := 0 else
91160: LD_ADDR_VAR 0 8
91164: PUSH
91165: LD_INT 0
91167: ST_TO_ADDR
91168: GO 91186
// min_y := y - r ;
91170: LD_ADDR_VAR 0 8
91174: PUSH
91175: LD_VAR 0 3
91179: PUSH
91180: LD_VAR 0 4
91184: MINUS
91185: ST_TO_ADDR
// max_x := x + r ;
91186: LD_ADDR_VAR 0 9
91190: PUSH
91191: LD_VAR 0 2
91195: PUSH
91196: LD_VAR 0 4
91200: PLUS
91201: ST_TO_ADDR
// max_y := y + r ;
91202: LD_ADDR_VAR 0 10
91206: PUSH
91207: LD_VAR 0 3
91211: PUSH
91212: LD_VAR 0 4
91216: PLUS
91217: ST_TO_ADDR
// for _x = min_x to max_x do
91218: LD_ADDR_VAR 0 11
91222: PUSH
91223: DOUBLE
91224: LD_VAR 0 7
91228: DEC
91229: ST_TO_ADDR
91230: LD_VAR 0 9
91234: PUSH
91235: FOR_TO
91236: IFFALSE 91355
// for _y = min_y to max_y do
91238: LD_ADDR_VAR 0 12
91242: PUSH
91243: DOUBLE
91244: LD_VAR 0 8
91248: DEC
91249: ST_TO_ADDR
91250: LD_VAR 0 10
91254: PUSH
91255: FOR_TO
91256: IFFALSE 91351
// begin if not ValidHex ( _x , _y ) then
91258: LD_VAR 0 11
91262: PPUSH
91263: LD_VAR 0 12
91267: PPUSH
91268: CALL_OW 488
91272: NOT
91273: IFFALSE 91277
// continue ;
91275: GO 91255
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91277: LD_VAR 0 11
91281: PPUSH
91282: LD_VAR 0 12
91286: PPUSH
91287: CALL_OW 351
91291: IFFALSE 91309
91293: PUSH
91294: LD_VAR 0 11
91298: PPUSH
91299: LD_VAR 0 12
91303: PPUSH
91304: CALL_OW 554
91308: AND
91309: IFFALSE 91349
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91311: LD_ADDR_VAR 0 13
91315: PUSH
91316: LD_VAR 0 13
91320: PPUSH
91321: LD_VAR 0 13
91325: PUSH
91326: LD_INT 1
91328: PLUS
91329: PPUSH
91330: LD_VAR 0 11
91334: PUSH
91335: LD_VAR 0 12
91339: PUSH
91340: EMPTY
91341: LIST
91342: LIST
91343: PPUSH
91344: CALL_OW 2
91348: ST_TO_ADDR
// end ;
91349: GO 91255
91351: POP
91352: POP
91353: GO 91235
91355: POP
91356: POP
// if not list then
91357: LD_VAR 0 13
91361: NOT
91362: IFFALSE 91366
// exit ;
91364: GO 91437
// for i in list do
91366: LD_ADDR_VAR 0 6
91370: PUSH
91371: LD_VAR 0 13
91375: PUSH
91376: FOR_IN
91377: IFFALSE 91435
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
91379: LD_VAR 0 1
91383: PPUSH
91384: LD_STRING M
91386: PUSH
91387: LD_VAR 0 6
91391: PUSH
91392: LD_INT 1
91394: ARRAY
91395: PUSH
91396: LD_VAR 0 6
91400: PUSH
91401: LD_INT 2
91403: ARRAY
91404: PUSH
91405: LD_INT 0
91407: PUSH
91408: LD_INT 0
91410: PUSH
91411: LD_INT 0
91413: PUSH
91414: LD_INT 0
91416: PUSH
91417: EMPTY
91418: LIST
91419: LIST
91420: LIST
91421: LIST
91422: LIST
91423: LIST
91424: LIST
91425: PUSH
91426: EMPTY
91427: LIST
91428: PPUSH
91429: CALL_OW 447
91433: GO 91376
91435: POP
91436: POP
// end ;
91437: LD_VAR 0 5
91441: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
91442: LD_INT 0
91444: PPUSH
91445: PPUSH
91446: PPUSH
91447: PPUSH
91448: PPUSH
91449: PPUSH
91450: PPUSH
91451: PPUSH
91452: PPUSH
91453: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
91454: LD_VAR 0 1
91458: PPUSH
91459: CALL_OW 302
91463: NOT
91464: IFTRUE 91483
91466: PUSH
91467: LD_VAR 0 2
91471: PPUSH
91472: LD_VAR 0 3
91476: PPUSH
91477: CALL_OW 488
91481: NOT
91482: OR
91483: IFTRUE 91492
91485: PUSH
91486: LD_VAR 0 4
91490: NOT
91491: OR
91492: IFFALSE 91496
// exit ;
91494: GO 92013
// list := [ ] ;
91496: LD_ADDR_VAR 0 13
91500: PUSH
91501: EMPTY
91502: ST_TO_ADDR
// if x - r < 0 then
91503: LD_VAR 0 2
91507: PUSH
91508: LD_VAR 0 4
91512: MINUS
91513: PUSH
91514: LD_INT 0
91516: LESS
91517: IFFALSE 91529
// min_x := 0 else
91519: LD_ADDR_VAR 0 7
91523: PUSH
91524: LD_INT 0
91526: ST_TO_ADDR
91527: GO 91545
// min_x := x - r ;
91529: LD_ADDR_VAR 0 7
91533: PUSH
91534: LD_VAR 0 2
91538: PUSH
91539: LD_VAR 0 4
91543: MINUS
91544: ST_TO_ADDR
// if y - r < 0 then
91545: LD_VAR 0 3
91549: PUSH
91550: LD_VAR 0 4
91554: MINUS
91555: PUSH
91556: LD_INT 0
91558: LESS
91559: IFFALSE 91571
// min_y := 0 else
91561: LD_ADDR_VAR 0 8
91565: PUSH
91566: LD_INT 0
91568: ST_TO_ADDR
91569: GO 91587
// min_y := y - r ;
91571: LD_ADDR_VAR 0 8
91575: PUSH
91576: LD_VAR 0 3
91580: PUSH
91581: LD_VAR 0 4
91585: MINUS
91586: ST_TO_ADDR
// max_x := x + r ;
91587: LD_ADDR_VAR 0 9
91591: PUSH
91592: LD_VAR 0 2
91596: PUSH
91597: LD_VAR 0 4
91601: PLUS
91602: ST_TO_ADDR
// max_y := y + r ;
91603: LD_ADDR_VAR 0 10
91607: PUSH
91608: LD_VAR 0 3
91612: PUSH
91613: LD_VAR 0 4
91617: PLUS
91618: ST_TO_ADDR
// for _x = min_x to max_x do
91619: LD_ADDR_VAR 0 11
91623: PUSH
91624: DOUBLE
91625: LD_VAR 0 7
91629: DEC
91630: ST_TO_ADDR
91631: LD_VAR 0 9
91635: PUSH
91636: FOR_TO
91637: IFFALSE 91756
// for _y = min_y to max_y do
91639: LD_ADDR_VAR 0 12
91643: PUSH
91644: DOUBLE
91645: LD_VAR 0 8
91649: DEC
91650: ST_TO_ADDR
91651: LD_VAR 0 10
91655: PUSH
91656: FOR_TO
91657: IFFALSE 91752
// begin if not ValidHex ( _x , _y ) then
91659: LD_VAR 0 11
91663: PPUSH
91664: LD_VAR 0 12
91668: PPUSH
91669: CALL_OW 488
91673: NOT
91674: IFFALSE 91678
// continue ;
91676: GO 91656
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
91678: LD_VAR 0 11
91682: PPUSH
91683: LD_VAR 0 12
91687: PPUSH
91688: CALL_OW 351
91692: IFFALSE 91710
91694: PUSH
91695: LD_VAR 0 11
91699: PPUSH
91700: LD_VAR 0 12
91704: PPUSH
91705: CALL_OW 554
91709: AND
91710: IFFALSE 91750
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
91712: LD_ADDR_VAR 0 13
91716: PUSH
91717: LD_VAR 0 13
91721: PPUSH
91722: LD_VAR 0 13
91726: PUSH
91727: LD_INT 1
91729: PLUS
91730: PPUSH
91731: LD_VAR 0 11
91735: PUSH
91736: LD_VAR 0 12
91740: PUSH
91741: EMPTY
91742: LIST
91743: LIST
91744: PPUSH
91745: CALL_OW 2
91749: ST_TO_ADDR
// end ;
91750: GO 91656
91752: POP
91753: POP
91754: GO 91636
91756: POP
91757: POP
// if not list then
91758: LD_VAR 0 13
91762: NOT
91763: IFFALSE 91767
// exit ;
91765: GO 92013
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
91767: LD_ADDR_VAR 0 13
91771: PUSH
91772: LD_VAR 0 1
91776: PPUSH
91777: LD_VAR 0 13
91781: PPUSH
91782: LD_INT 1
91784: PPUSH
91785: LD_INT 1
91787: PPUSH
91788: CALL 35701 0 4
91792: ST_TO_ADDR
// ComStop ( flame ) ;
91793: LD_VAR 0 1
91797: PPUSH
91798: CALL_OW 141
// for i in list do
91802: LD_ADDR_VAR 0 6
91806: PUSH
91807: LD_VAR 0 13
91811: PUSH
91812: FOR_IN
91813: IFFALSE 91844
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
91815: LD_VAR 0 1
91819: PPUSH
91820: LD_VAR 0 6
91824: PUSH
91825: LD_INT 1
91827: ARRAY
91828: PPUSH
91829: LD_VAR 0 6
91833: PUSH
91834: LD_INT 2
91836: ARRAY
91837: PPUSH
91838: CALL_OW 176
91842: GO 91812
91844: POP
91845: POP
// repeat wait ( 0 0$1 ) ;
91846: LD_INT 35
91848: PPUSH
91849: CALL_OW 67
// task := GetTaskList ( flame ) ;
91853: LD_ADDR_VAR 0 14
91857: PUSH
91858: LD_VAR 0 1
91862: PPUSH
91863: CALL_OW 437
91867: ST_TO_ADDR
// if not task then
91868: LD_VAR 0 14
91872: NOT
91873: IFFALSE 91877
// exit ;
91875: GO 92013
// if task [ 1 ] [ 1 ] <> | then
91877: LD_VAR 0 14
91881: PUSH
91882: LD_INT 1
91884: ARRAY
91885: PUSH
91886: LD_INT 1
91888: ARRAY
91889: PUSH
91890: LD_STRING |
91892: NONEQUAL
91893: IFFALSE 91897
// exit ;
91895: GO 92013
// _x := task [ 1 ] [ 2 ] ;
91897: LD_ADDR_VAR 0 11
91901: PUSH
91902: LD_VAR 0 14
91906: PUSH
91907: LD_INT 1
91909: ARRAY
91910: PUSH
91911: LD_INT 2
91913: ARRAY
91914: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
91915: LD_ADDR_VAR 0 12
91919: PUSH
91920: LD_VAR 0 14
91924: PUSH
91925: LD_INT 1
91927: ARRAY
91928: PUSH
91929: LD_INT 3
91931: ARRAY
91932: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
91933: LD_VAR 0 11
91937: PPUSH
91938: LD_VAR 0 12
91942: PPUSH
91943: CALL_OW 351
91947: NOT
91948: IFTRUE 91967
91950: PUSH
91951: LD_VAR 0 11
91955: PPUSH
91956: LD_VAR 0 12
91960: PPUSH
91961: CALL_OW 554
91965: NOT
91966: OR
91967: IFFALSE 92001
// begin task := Delete ( task , 1 ) ;
91969: LD_ADDR_VAR 0 14
91973: PUSH
91974: LD_VAR 0 14
91978: PPUSH
91979: LD_INT 1
91981: PPUSH
91982: CALL_OW 3
91986: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
91987: LD_VAR 0 1
91991: PPUSH
91992: LD_VAR 0 14
91996: PPUSH
91997: CALL_OW 446
// end ; until not HasTask ( flame ) ;
92001: LD_VAR 0 1
92005: PPUSH
92006: CALL_OW 314
92010: NOT
92011: IFFALSE 91846
// end ;
92013: LD_VAR 0 5
92017: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
92018: LD_EXP 137
92022: NOT
92023: IFFALSE 92073
92025: GO 92027
92027: DISABLE
// begin initHack := true ;
92028: LD_ADDR_EXP 137
92032: PUSH
92033: LD_INT 1
92035: ST_TO_ADDR
// hackTanks := [ ] ;
92036: LD_ADDR_EXP 138
92040: PUSH
92041: EMPTY
92042: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
92043: LD_ADDR_EXP 139
92047: PUSH
92048: EMPTY
92049: ST_TO_ADDR
// hackLimit := 3 ;
92050: LD_ADDR_EXP 140
92054: PUSH
92055: LD_INT 3
92057: ST_TO_ADDR
// hackDist := 12 ;
92058: LD_ADDR_EXP 141
92062: PUSH
92063: LD_INT 12
92065: ST_TO_ADDR
// hackCounter := [ ] ;
92066: LD_ADDR_EXP 142
92070: PUSH
92071: EMPTY
92072: ST_TO_ADDR
// end ;
92073: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
92074: LD_EXP 137
92078: IFFALSE 92096
92080: PUSH
92081: LD_INT 34
92083: PUSH
92084: LD_INT 99
92086: PUSH
92087: EMPTY
92088: LIST
92089: LIST
92090: PPUSH
92091: CALL_OW 69
92095: AND
92096: IFFALSE 92349
92098: GO 92100
92100: DISABLE
92101: LD_INT 0
92103: PPUSH
92104: PPUSH
// begin enable ;
92105: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
92106: LD_ADDR_VAR 0 1
92110: PUSH
92111: LD_INT 34
92113: PUSH
92114: LD_INT 99
92116: PUSH
92117: EMPTY
92118: LIST
92119: LIST
92120: PPUSH
92121: CALL_OW 69
92125: PUSH
92126: FOR_IN
92127: IFFALSE 92347
// begin if not i in hackTanks then
92129: LD_VAR 0 1
92133: PUSH
92134: LD_EXP 138
92138: IN
92139: NOT
92140: IFFALSE 92223
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
92142: LD_ADDR_EXP 138
92146: PUSH
92147: LD_EXP 138
92151: PPUSH
92152: LD_EXP 138
92156: PUSH
92157: LD_INT 1
92159: PLUS
92160: PPUSH
92161: LD_VAR 0 1
92165: PPUSH
92166: CALL_OW 1
92170: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
92171: LD_ADDR_EXP 139
92175: PUSH
92176: LD_EXP 139
92180: PPUSH
92181: LD_EXP 139
92185: PUSH
92186: LD_INT 1
92188: PLUS
92189: PPUSH
92190: EMPTY
92191: PPUSH
92192: CALL_OW 1
92196: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
92197: LD_ADDR_EXP 142
92201: PUSH
92202: LD_EXP 142
92206: PPUSH
92207: LD_EXP 142
92211: PUSH
92212: LD_INT 1
92214: PLUS
92215: PPUSH
92216: EMPTY
92217: PPUSH
92218: CALL_OW 1
92222: ST_TO_ADDR
// end ; if not IsOk ( i ) then
92223: LD_VAR 0 1
92227: PPUSH
92228: CALL_OW 302
92232: NOT
92233: IFFALSE 92246
// begin HackUnlinkAll ( i ) ;
92235: LD_VAR 0 1
92239: PPUSH
92240: CALL 92352 0 1
// continue ;
92244: GO 92126
// end ; HackCheckCapturedStatus ( i ) ;
92246: LD_VAR 0 1
92250: PPUSH
92251: CALL 92797 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
92255: LD_ADDR_VAR 0 2
92259: PUSH
92260: LD_INT 81
92262: PUSH
92263: LD_VAR 0 1
92267: PPUSH
92268: CALL_OW 255
92272: PUSH
92273: EMPTY
92274: LIST
92275: LIST
92276: PUSH
92277: LD_INT 33
92279: PUSH
92280: LD_INT 3
92282: PUSH
92283: EMPTY
92284: LIST
92285: LIST
92286: PUSH
92287: LD_INT 91
92289: PUSH
92290: LD_VAR 0 1
92294: PUSH
92295: LD_EXP 141
92299: PUSH
92300: EMPTY
92301: LIST
92302: LIST
92303: LIST
92304: PUSH
92305: LD_INT 50
92307: PUSH
92308: EMPTY
92309: LIST
92310: PUSH
92311: EMPTY
92312: LIST
92313: LIST
92314: LIST
92315: LIST
92316: PPUSH
92317: CALL_OW 69
92321: ST_TO_ADDR
// if not tmp then
92322: LD_VAR 0 2
92326: NOT
92327: IFFALSE 92331
// continue ;
92329: GO 92126
// HackLink ( i , tmp ) ;
92331: LD_VAR 0 1
92335: PPUSH
92336: LD_VAR 0 2
92340: PPUSH
92341: CALL 92488 0 2
// end ;
92345: GO 92126
92347: POP
92348: POP
// end ;
92349: PPOPN 2
92351: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
92352: LD_INT 0
92354: PPUSH
92355: PPUSH
92356: PPUSH
// if not hack in hackTanks then
92357: LD_VAR 0 1
92361: PUSH
92362: LD_EXP 138
92366: IN
92367: NOT
92368: IFFALSE 92372
// exit ;
92370: GO 92483
// index := GetElementIndex ( hackTanks , hack ) ;
92372: LD_ADDR_VAR 0 4
92376: PUSH
92377: LD_EXP 138
92381: PPUSH
92382: LD_VAR 0 1
92386: PPUSH
92387: CALL 34996 0 2
92391: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
92392: LD_EXP 139
92396: PUSH
92397: LD_VAR 0 4
92401: ARRAY
92402: IFFALSE 92483
// begin for i in hackTanksCaptured [ index ] do
92404: LD_ADDR_VAR 0 3
92408: PUSH
92409: LD_EXP 139
92413: PUSH
92414: LD_VAR 0 4
92418: ARRAY
92419: PUSH
92420: FOR_IN
92421: IFFALSE 92447
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
92423: LD_VAR 0 3
92427: PUSH
92428: LD_INT 1
92430: ARRAY
92431: PPUSH
92432: LD_VAR 0 3
92436: PUSH
92437: LD_INT 2
92439: ARRAY
92440: PPUSH
92441: CALL_OW 235
92445: GO 92420
92447: POP
92448: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
92449: LD_ADDR_EXP 139
92453: PUSH
92454: LD_EXP 139
92458: PPUSH
92459: LD_VAR 0 4
92463: PPUSH
92464: EMPTY
92465: PPUSH
92466: CALL_OW 1
92470: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
92471: LD_VAR 0 1
92475: PPUSH
92476: LD_INT 0
92478: PPUSH
92479: CALL_OW 505
// end ; end ;
92483: LD_VAR 0 2
92487: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
92488: LD_INT 0
92490: PPUSH
92491: PPUSH
92492: PPUSH
// if not hack in hackTanks or not vehicles then
92493: LD_VAR 0 1
92497: PUSH
92498: LD_EXP 138
92502: IN
92503: NOT
92504: IFTRUE 92513
92506: PUSH
92507: LD_VAR 0 2
92511: NOT
92512: OR
92513: IFFALSE 92517
// exit ;
92515: GO 92792
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
92517: LD_ADDR_VAR 0 2
92521: PUSH
92522: LD_VAR 0 1
92526: PPUSH
92527: LD_VAR 0 2
92531: PPUSH
92532: LD_INT 1
92534: PPUSH
92535: LD_INT 1
92537: PPUSH
92538: CALL 35648 0 4
92542: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
92543: LD_ADDR_VAR 0 5
92547: PUSH
92548: LD_EXP 138
92552: PPUSH
92553: LD_VAR 0 1
92557: PPUSH
92558: CALL 34996 0 2
92562: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
92563: LD_EXP 139
92567: PUSH
92568: LD_VAR 0 5
92572: ARRAY
92573: PUSH
92574: LD_EXP 140
92578: LESS
92579: IFFALSE 92768
// begin for i := 1 to vehicles do
92581: LD_ADDR_VAR 0 4
92585: PUSH
92586: DOUBLE
92587: LD_INT 1
92589: DEC
92590: ST_TO_ADDR
92591: LD_VAR 0 2
92595: PUSH
92596: FOR_TO
92597: IFFALSE 92766
// begin if hackTanksCaptured [ index ] = hackLimit then
92599: LD_EXP 139
92603: PUSH
92604: LD_VAR 0 5
92608: ARRAY
92609: PUSH
92610: LD_EXP 140
92614: EQUAL
92615: IFFALSE 92619
// break ;
92617: GO 92766
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
92619: LD_ADDR_EXP 142
92623: PUSH
92624: LD_EXP 142
92628: PPUSH
92629: LD_VAR 0 5
92633: PPUSH
92634: LD_EXP 142
92638: PUSH
92639: LD_VAR 0 5
92643: ARRAY
92644: PUSH
92645: LD_INT 1
92647: PLUS
92648: PPUSH
92649: CALL_OW 1
92653: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
92654: LD_ADDR_EXP 139
92658: PUSH
92659: LD_EXP 139
92663: PPUSH
92664: LD_VAR 0 5
92668: PUSH
92669: LD_EXP 139
92673: PUSH
92674: LD_VAR 0 5
92678: ARRAY
92679: PUSH
92680: LD_INT 1
92682: PLUS
92683: PUSH
92684: EMPTY
92685: LIST
92686: LIST
92687: PPUSH
92688: LD_VAR 0 2
92692: PUSH
92693: LD_VAR 0 4
92697: ARRAY
92698: PUSH
92699: LD_VAR 0 2
92703: PUSH
92704: LD_VAR 0 4
92708: ARRAY
92709: PPUSH
92710: CALL_OW 255
92714: PUSH
92715: EMPTY
92716: LIST
92717: LIST
92718: PPUSH
92719: CALL 35213 0 3
92723: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
92724: LD_VAR 0 2
92728: PUSH
92729: LD_VAR 0 4
92733: ARRAY
92734: PPUSH
92735: LD_VAR 0 1
92739: PPUSH
92740: CALL_OW 255
92744: PPUSH
92745: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
92749: LD_VAR 0 2
92753: PUSH
92754: LD_VAR 0 4
92758: ARRAY
92759: PPUSH
92760: CALL_OW 141
// end ;
92764: GO 92596
92766: POP
92767: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
92768: LD_VAR 0 1
92772: PPUSH
92773: LD_EXP 139
92777: PUSH
92778: LD_VAR 0 5
92782: ARRAY
92783: PUSH
92784: LD_INT 0
92786: PLUS
92787: PPUSH
92788: CALL_OW 505
// end ;
92792: LD_VAR 0 3
92796: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
92797: LD_INT 0
92799: PPUSH
92800: PPUSH
92801: PPUSH
92802: PPUSH
// if not hack in hackTanks then
92803: LD_VAR 0 1
92807: PUSH
92808: LD_EXP 138
92812: IN
92813: NOT
92814: IFFALSE 92818
// exit ;
92816: GO 93062
// index := GetElementIndex ( hackTanks , hack ) ;
92818: LD_ADDR_VAR 0 4
92822: PUSH
92823: LD_EXP 138
92827: PPUSH
92828: LD_VAR 0 1
92832: PPUSH
92833: CALL 34996 0 2
92837: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
92838: LD_ADDR_VAR 0 3
92842: PUSH
92843: DOUBLE
92844: LD_EXP 139
92848: PUSH
92849: LD_VAR 0 4
92853: ARRAY
92854: INC
92855: ST_TO_ADDR
92856: LD_INT 1
92858: PUSH
92859: FOR_DOWNTO
92860: IFFALSE 93036
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
92862: LD_ADDR_VAR 0 5
92866: PUSH
92867: LD_EXP 139
92871: PUSH
92872: LD_VAR 0 4
92876: ARRAY
92877: PUSH
92878: LD_VAR 0 3
92882: ARRAY
92883: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
92884: LD_VAR 0 5
92888: PUSH
92889: LD_INT 1
92891: ARRAY
92892: PPUSH
92893: CALL_OW 302
92897: NOT
92898: IFTRUE 92926
92900: PUSH
92901: LD_VAR 0 5
92905: PUSH
92906: LD_INT 1
92908: ARRAY
92909: PPUSH
92910: CALL_OW 255
92914: PUSH
92915: LD_VAR 0 1
92919: PPUSH
92920: CALL_OW 255
92924: NONEQUAL
92925: OR
92926: IFFALSE 93034
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
92928: LD_VAR 0 5
92932: PUSH
92933: LD_INT 1
92935: ARRAY
92936: PPUSH
92937: CALL_OW 305
92941: IFFALSE 92969
92943: PUSH
92944: LD_VAR 0 5
92948: PUSH
92949: LD_INT 1
92951: ARRAY
92952: PPUSH
92953: CALL_OW 255
92957: PUSH
92958: LD_VAR 0 1
92962: PPUSH
92963: CALL_OW 255
92967: EQUAL
92968: AND
92969: IFFALSE 92993
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
92971: LD_VAR 0 5
92975: PUSH
92976: LD_INT 1
92978: ARRAY
92979: PPUSH
92980: LD_VAR 0 5
92984: PUSH
92985: LD_INT 2
92987: ARRAY
92988: PPUSH
92989: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
92993: LD_ADDR_EXP 139
92997: PUSH
92998: LD_EXP 139
93002: PPUSH
93003: LD_VAR 0 4
93007: PPUSH
93008: LD_EXP 139
93012: PUSH
93013: LD_VAR 0 4
93017: ARRAY
93018: PPUSH
93019: LD_VAR 0 3
93023: PPUSH
93024: CALL_OW 3
93028: PPUSH
93029: CALL_OW 1
93033: ST_TO_ADDR
// end ; end ;
93034: GO 92859
93036: POP
93037: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
93038: LD_VAR 0 1
93042: PPUSH
93043: LD_EXP 139
93047: PUSH
93048: LD_VAR 0 4
93052: ARRAY
93053: PUSH
93054: LD_INT 0
93056: PLUS
93057: PPUSH
93058: CALL_OW 505
// end ;
93062: LD_VAR 0 2
93066: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
93067: LD_INT 0
93069: PPUSH
93070: PPUSH
93071: PPUSH
93072: PPUSH
// if not hack in hackTanks then
93073: LD_VAR 0 1
93077: PUSH
93078: LD_EXP 138
93082: IN
93083: NOT
93084: IFFALSE 93088
// exit ;
93086: GO 93173
// index := GetElementIndex ( hackTanks , hack ) ;
93088: LD_ADDR_VAR 0 5
93092: PUSH
93093: LD_EXP 138
93097: PPUSH
93098: LD_VAR 0 1
93102: PPUSH
93103: CALL 34996 0 2
93107: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
93108: LD_ADDR_VAR 0 4
93112: PUSH
93113: DOUBLE
93114: LD_INT 1
93116: DEC
93117: ST_TO_ADDR
93118: LD_EXP 139
93122: PUSH
93123: LD_VAR 0 5
93127: ARRAY
93128: PUSH
93129: FOR_TO
93130: IFFALSE 93171
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
93132: LD_EXP 139
93136: PUSH
93137: LD_VAR 0 5
93141: ARRAY
93142: PUSH
93143: LD_VAR 0 4
93147: ARRAY
93148: PUSH
93149: LD_INT 1
93151: ARRAY
93152: PUSH
93153: LD_VAR 0 2
93157: EQUAL
93158: IFFALSE 93169
// KillUnit ( vehicle ) ;
93160: LD_VAR 0 2
93164: PPUSH
93165: CALL_OW 66
93169: GO 93129
93171: POP
93172: POP
// end ;
93173: LD_VAR 0 3
93177: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
93178: LD_EXP 143
93182: NOT
93183: IFFALSE 93218
93185: GO 93187
93187: DISABLE
// begin initMiner := true ;
93188: LD_ADDR_EXP 143
93192: PUSH
93193: LD_INT 1
93195: ST_TO_ADDR
// minersList := [ ] ;
93196: LD_ADDR_EXP 144
93200: PUSH
93201: EMPTY
93202: ST_TO_ADDR
// minerMinesList := [ ] ;
93203: LD_ADDR_EXP 145
93207: PUSH
93208: EMPTY
93209: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
93210: LD_ADDR_EXP 146
93214: PUSH
93215: LD_INT 5
93217: ST_TO_ADDR
// end ;
93218: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
93219: LD_EXP 143
93223: IFFALSE 93241
93225: PUSH
93226: LD_INT 34
93228: PUSH
93229: LD_INT 81
93231: PUSH
93232: EMPTY
93233: LIST
93234: LIST
93235: PPUSH
93236: CALL_OW 69
93240: AND
93241: IFFALSE 93704
93243: GO 93245
93245: DISABLE
93246: LD_INT 0
93248: PPUSH
93249: PPUSH
93250: PPUSH
93251: PPUSH
// begin enable ;
93252: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
93253: LD_ADDR_VAR 0 1
93257: PUSH
93258: LD_INT 34
93260: PUSH
93261: LD_INT 81
93263: PUSH
93264: EMPTY
93265: LIST
93266: LIST
93267: PPUSH
93268: CALL_OW 69
93272: PUSH
93273: FOR_IN
93274: IFFALSE 93346
// begin if not i in minersList then
93276: LD_VAR 0 1
93280: PUSH
93281: LD_EXP 144
93285: IN
93286: NOT
93287: IFFALSE 93344
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
93289: LD_ADDR_EXP 144
93293: PUSH
93294: LD_EXP 144
93298: PPUSH
93299: LD_EXP 144
93303: PUSH
93304: LD_INT 1
93306: PLUS
93307: PPUSH
93308: LD_VAR 0 1
93312: PPUSH
93313: CALL_OW 1
93317: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
93318: LD_ADDR_EXP 145
93322: PUSH
93323: LD_EXP 145
93327: PPUSH
93328: LD_EXP 145
93332: PUSH
93333: LD_INT 1
93335: PLUS
93336: PPUSH
93337: EMPTY
93338: PPUSH
93339: CALL_OW 1
93343: ST_TO_ADDR
// end end ;
93344: GO 93273
93346: POP
93347: POP
// for i := minerMinesList downto 1 do
93348: LD_ADDR_VAR 0 1
93352: PUSH
93353: DOUBLE
93354: LD_EXP 145
93358: INC
93359: ST_TO_ADDR
93360: LD_INT 1
93362: PUSH
93363: FOR_DOWNTO
93364: IFFALSE 93702
// begin if IsLive ( minersList [ i ] ) then
93366: LD_EXP 144
93370: PUSH
93371: LD_VAR 0 1
93375: ARRAY
93376: PPUSH
93377: CALL_OW 300
93381: IFFALSE 93409
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
93383: LD_EXP 144
93387: PUSH
93388: LD_VAR 0 1
93392: ARRAY
93393: PPUSH
93394: LD_EXP 145
93398: PUSH
93399: LD_VAR 0 1
93403: ARRAY
93404: PPUSH
93405: CALL_OW 505
// if not minerMinesList [ i ] then
93409: LD_EXP 145
93413: PUSH
93414: LD_VAR 0 1
93418: ARRAY
93419: NOT
93420: IFFALSE 93424
// continue ;
93422: GO 93363
// for j := minerMinesList [ i ] downto 1 do
93424: LD_ADDR_VAR 0 2
93428: PUSH
93429: DOUBLE
93430: LD_EXP 145
93434: PUSH
93435: LD_VAR 0 1
93439: ARRAY
93440: INC
93441: ST_TO_ADDR
93442: LD_INT 1
93444: PUSH
93445: FOR_DOWNTO
93446: IFFALSE 93698
// begin side := GetSide ( minersList [ i ] ) ;
93448: LD_ADDR_VAR 0 3
93452: PUSH
93453: LD_EXP 144
93457: PUSH
93458: LD_VAR 0 1
93462: ARRAY
93463: PPUSH
93464: CALL_OW 255
93468: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
93469: LD_ADDR_VAR 0 4
93473: PUSH
93474: LD_EXP 145
93478: PUSH
93479: LD_VAR 0 1
93483: ARRAY
93484: PUSH
93485: LD_VAR 0 2
93489: ARRAY
93490: PUSH
93491: LD_INT 1
93493: ARRAY
93494: PPUSH
93495: LD_EXP 145
93499: PUSH
93500: LD_VAR 0 1
93504: ARRAY
93505: PUSH
93506: LD_VAR 0 2
93510: ARRAY
93511: PUSH
93512: LD_INT 2
93514: ARRAY
93515: PPUSH
93516: CALL_OW 428
93520: ST_TO_ADDR
// if not tmp then
93521: LD_VAR 0 4
93525: NOT
93526: IFFALSE 93530
// continue ;
93528: GO 93445
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
93530: LD_VAR 0 4
93534: PUSH
93535: LD_INT 81
93537: PUSH
93538: LD_VAR 0 3
93542: PUSH
93543: EMPTY
93544: LIST
93545: LIST
93546: PPUSH
93547: CALL_OW 69
93551: IN
93552: IFFALSE 93602
93554: PUSH
93555: LD_EXP 145
93559: PUSH
93560: LD_VAR 0 1
93564: ARRAY
93565: PUSH
93566: LD_VAR 0 2
93570: ARRAY
93571: PUSH
93572: LD_INT 1
93574: ARRAY
93575: PPUSH
93576: LD_EXP 145
93580: PUSH
93581: LD_VAR 0 1
93585: ARRAY
93586: PUSH
93587: LD_VAR 0 2
93591: ARRAY
93592: PUSH
93593: LD_INT 2
93595: ARRAY
93596: PPUSH
93597: CALL_OW 458
93601: AND
93602: IFFALSE 93696
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
93604: LD_EXP 145
93608: PUSH
93609: LD_VAR 0 1
93613: ARRAY
93614: PUSH
93615: LD_VAR 0 2
93619: ARRAY
93620: PUSH
93621: LD_INT 1
93623: ARRAY
93624: PPUSH
93625: LD_EXP 145
93629: PUSH
93630: LD_VAR 0 1
93634: ARRAY
93635: PUSH
93636: LD_VAR 0 2
93640: ARRAY
93641: PUSH
93642: LD_INT 2
93644: ARRAY
93645: PPUSH
93646: LD_VAR 0 3
93650: PPUSH
93651: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
93655: LD_ADDR_EXP 145
93659: PUSH
93660: LD_EXP 145
93664: PPUSH
93665: LD_VAR 0 1
93669: PPUSH
93670: LD_EXP 145
93674: PUSH
93675: LD_VAR 0 1
93679: ARRAY
93680: PPUSH
93681: LD_VAR 0 2
93685: PPUSH
93686: CALL_OW 3
93690: PPUSH
93691: CALL_OW 1
93695: ST_TO_ADDR
// end ; end ;
93696: GO 93445
93698: POP
93699: POP
// end ;
93700: GO 93363
93702: POP
93703: POP
// end ;
93704: PPOPN 4
93706: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
93707: LD_INT 0
93709: PPUSH
93710: PPUSH
// result := false ;
93711: LD_ADDR_VAR 0 4
93715: PUSH
93716: LD_INT 0
93718: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
93719: LD_VAR 0 1
93723: PPUSH
93724: CALL_OW 264
93728: PUSH
93729: LD_INT 81
93731: EQUAL
93732: NOT
93733: IFFALSE 93737
// exit ;
93735: GO 93981
// index := GetElementIndex ( minersList , unit ) ;
93737: LD_ADDR_VAR 0 5
93741: PUSH
93742: LD_EXP 144
93746: PPUSH
93747: LD_VAR 0 1
93751: PPUSH
93752: CALL 34996 0 2
93756: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
93757: LD_EXP 145
93761: PUSH
93762: LD_VAR 0 5
93766: ARRAY
93767: PUSH
93768: LD_EXP 146
93772: GREATEREQUAL
93773: IFFALSE 93777
// exit ;
93775: GO 93981
// ComMoveXY ( unit , x , y ) ;
93777: LD_VAR 0 1
93781: PPUSH
93782: LD_VAR 0 2
93786: PPUSH
93787: LD_VAR 0 3
93791: PPUSH
93792: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
93796: LD_INT 35
93798: PPUSH
93799: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
93803: LD_VAR 0 1
93807: PPUSH
93808: LD_VAR 0 2
93812: PPUSH
93813: LD_VAR 0 3
93817: PPUSH
93818: CALL 67042 0 3
93822: NOT
93823: IFFALSE 93836
93825: PUSH
93826: LD_VAR 0 1
93830: PPUSH
93831: CALL_OW 314
93835: AND
93836: IFFALSE 93840
// exit ;
93838: GO 93981
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
93840: LD_VAR 0 2
93844: PPUSH
93845: LD_VAR 0 3
93849: PPUSH
93850: CALL_OW 428
93854: PUSH
93855: LD_VAR 0 1
93859: EQUAL
93860: IFFALSE 93874
93862: PUSH
93863: LD_VAR 0 1
93867: PPUSH
93868: CALL_OW 314
93872: NOT
93873: AND
93874: IFFALSE 93796
// PlaySoundXY ( x , y , PlantMine ) ;
93876: LD_VAR 0 2
93880: PPUSH
93881: LD_VAR 0 3
93885: PPUSH
93886: LD_STRING PlantMine
93888: PPUSH
93889: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
93893: LD_VAR 0 2
93897: PPUSH
93898: LD_VAR 0 3
93902: PPUSH
93903: LD_VAR 0 1
93907: PPUSH
93908: CALL_OW 255
93912: PPUSH
93913: LD_INT 0
93915: PPUSH
93916: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
93920: LD_ADDR_EXP 145
93924: PUSH
93925: LD_EXP 145
93929: PPUSH
93930: LD_VAR 0 5
93934: PUSH
93935: LD_EXP 145
93939: PUSH
93940: LD_VAR 0 5
93944: ARRAY
93945: PUSH
93946: LD_INT 1
93948: PLUS
93949: PUSH
93950: EMPTY
93951: LIST
93952: LIST
93953: PPUSH
93954: LD_VAR 0 2
93958: PUSH
93959: LD_VAR 0 3
93963: PUSH
93964: EMPTY
93965: LIST
93966: LIST
93967: PPUSH
93968: CALL 35213 0 3
93972: ST_TO_ADDR
// result := true ;
93973: LD_ADDR_VAR 0 4
93977: PUSH
93978: LD_INT 1
93980: ST_TO_ADDR
// end ;
93981: LD_VAR 0 4
93985: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
93986: LD_INT 0
93988: PPUSH
93989: PPUSH
93990: PPUSH
// if not unit in minersList then
93991: LD_VAR 0 1
93995: PUSH
93996: LD_EXP 144
94000: IN
94001: NOT
94002: IFFALSE 94006
// exit ;
94004: GO 94400
// index := GetElementIndex ( minersList , unit ) ;
94006: LD_ADDR_VAR 0 6
94010: PUSH
94011: LD_EXP 144
94015: PPUSH
94016: LD_VAR 0 1
94020: PPUSH
94021: CALL 34996 0 2
94025: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
94026: LD_ADDR_VAR 0 5
94030: PUSH
94031: DOUBLE
94032: LD_EXP 145
94036: PUSH
94037: LD_VAR 0 6
94041: ARRAY
94042: INC
94043: ST_TO_ADDR
94044: LD_INT 1
94046: PUSH
94047: FOR_DOWNTO
94048: IFFALSE 94211
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
94050: LD_EXP 145
94054: PUSH
94055: LD_VAR 0 6
94059: ARRAY
94060: PUSH
94061: LD_VAR 0 5
94065: ARRAY
94066: PUSH
94067: LD_INT 1
94069: ARRAY
94070: PUSH
94071: LD_VAR 0 2
94075: EQUAL
94076: IFFALSE 94106
94078: PUSH
94079: LD_EXP 145
94083: PUSH
94084: LD_VAR 0 6
94088: ARRAY
94089: PUSH
94090: LD_VAR 0 5
94094: ARRAY
94095: PUSH
94096: LD_INT 2
94098: ARRAY
94099: PUSH
94100: LD_VAR 0 3
94104: EQUAL
94105: AND
94106: IFFALSE 94209
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
94108: LD_EXP 145
94112: PUSH
94113: LD_VAR 0 6
94117: ARRAY
94118: PUSH
94119: LD_VAR 0 5
94123: ARRAY
94124: PUSH
94125: LD_INT 1
94127: ARRAY
94128: PPUSH
94129: LD_EXP 145
94133: PUSH
94134: LD_VAR 0 6
94138: ARRAY
94139: PUSH
94140: LD_VAR 0 5
94144: ARRAY
94145: PUSH
94146: LD_INT 2
94148: ARRAY
94149: PPUSH
94150: LD_VAR 0 1
94154: PPUSH
94155: CALL_OW 255
94159: PPUSH
94160: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
94164: LD_ADDR_EXP 145
94168: PUSH
94169: LD_EXP 145
94173: PPUSH
94174: LD_VAR 0 6
94178: PPUSH
94179: LD_EXP 145
94183: PUSH
94184: LD_VAR 0 6
94188: ARRAY
94189: PPUSH
94190: LD_VAR 0 5
94194: PPUSH
94195: CALL_OW 3
94199: PPUSH
94200: CALL_OW 1
94204: ST_TO_ADDR
// exit ;
94205: POP
94206: POP
94207: GO 94400
// end ; end ;
94209: GO 94047
94211: POP
94212: POP
// for i := minerMinesList [ index ] downto 1 do
94213: LD_ADDR_VAR 0 5
94217: PUSH
94218: DOUBLE
94219: LD_EXP 145
94223: PUSH
94224: LD_VAR 0 6
94228: ARRAY
94229: INC
94230: ST_TO_ADDR
94231: LD_INT 1
94233: PUSH
94234: FOR_DOWNTO
94235: IFFALSE 94398
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
94237: LD_EXP 145
94241: PUSH
94242: LD_VAR 0 6
94246: ARRAY
94247: PUSH
94248: LD_VAR 0 5
94252: ARRAY
94253: PUSH
94254: LD_INT 1
94256: ARRAY
94257: PPUSH
94258: LD_EXP 145
94262: PUSH
94263: LD_VAR 0 6
94267: ARRAY
94268: PUSH
94269: LD_VAR 0 5
94273: ARRAY
94274: PUSH
94275: LD_INT 2
94277: ARRAY
94278: PPUSH
94279: LD_VAR 0 2
94283: PPUSH
94284: LD_VAR 0 3
94288: PPUSH
94289: CALL_OW 298
94293: PUSH
94294: LD_INT 6
94296: LESS
94297: IFFALSE 94396
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
94299: LD_EXP 145
94303: PUSH
94304: LD_VAR 0 6
94308: ARRAY
94309: PUSH
94310: LD_VAR 0 5
94314: ARRAY
94315: PUSH
94316: LD_INT 1
94318: ARRAY
94319: PPUSH
94320: LD_EXP 145
94324: PUSH
94325: LD_VAR 0 6
94329: ARRAY
94330: PUSH
94331: LD_VAR 0 5
94335: ARRAY
94336: PUSH
94337: LD_INT 2
94339: ARRAY
94340: PPUSH
94341: LD_VAR 0 1
94345: PPUSH
94346: CALL_OW 255
94350: PPUSH
94351: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
94355: LD_ADDR_EXP 145
94359: PUSH
94360: LD_EXP 145
94364: PPUSH
94365: LD_VAR 0 6
94369: PPUSH
94370: LD_EXP 145
94374: PUSH
94375: LD_VAR 0 6
94379: ARRAY
94380: PPUSH
94381: LD_VAR 0 5
94385: PPUSH
94386: CALL_OW 3
94390: PPUSH
94391: CALL_OW 1
94395: ST_TO_ADDR
// end ; end ;
94396: GO 94234
94398: POP
94399: POP
// end ;
94400: LD_VAR 0 4
94404: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
94405: LD_INT 0
94407: PPUSH
94408: PPUSH
94409: PPUSH
94410: PPUSH
94411: PPUSH
94412: PPUSH
94413: PPUSH
94414: PPUSH
94415: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
94416: LD_VAR 0 1
94420: PPUSH
94421: CALL_OW 264
94425: PUSH
94426: LD_INT 81
94428: EQUAL
94429: NOT
94430: IFTRUE 94445
94432: PUSH
94433: LD_VAR 0 1
94437: PUSH
94438: LD_EXP 144
94442: IN
94443: NOT
94444: OR
94445: IFFALSE 94449
// exit ;
94447: GO 94775
// index := GetElementIndex ( minersList , unit ) ;
94449: LD_ADDR_VAR 0 6
94453: PUSH
94454: LD_EXP 144
94458: PPUSH
94459: LD_VAR 0 1
94463: PPUSH
94464: CALL 34996 0 2
94468: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
94469: LD_ADDR_VAR 0 8
94473: PUSH
94474: LD_EXP 146
94478: PUSH
94479: LD_EXP 145
94483: PUSH
94484: LD_VAR 0 6
94488: ARRAY
94489: MINUS
94490: ST_TO_ADDR
// if not minesFreeAmount then
94491: LD_VAR 0 8
94495: NOT
94496: IFFALSE 94500
// exit ;
94498: GO 94775
// tmp := [ ] ;
94500: LD_ADDR_VAR 0 7
94504: PUSH
94505: EMPTY
94506: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
94507: LD_ADDR_VAR 0 5
94511: PUSH
94512: DOUBLE
94513: LD_INT 1
94515: DEC
94516: ST_TO_ADDR
94517: LD_VAR 0 8
94521: PUSH
94522: FOR_TO
94523: IFFALSE 94722
// begin _d := rand ( 0 , 5 ) ;
94525: LD_ADDR_VAR 0 11
94529: PUSH
94530: LD_INT 0
94532: PPUSH
94533: LD_INT 5
94535: PPUSH
94536: CALL_OW 12
94540: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
94541: LD_ADDR_VAR 0 12
94545: PUSH
94546: LD_INT 2
94548: PPUSH
94549: LD_INT 6
94551: PPUSH
94552: CALL_OW 12
94556: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
94557: LD_ADDR_VAR 0 9
94561: PUSH
94562: LD_VAR 0 2
94566: PPUSH
94567: LD_VAR 0 11
94571: PPUSH
94572: LD_VAR 0 12
94576: PPUSH
94577: CALL_OW 272
94581: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
94582: LD_ADDR_VAR 0 10
94586: PUSH
94587: LD_VAR 0 3
94591: PPUSH
94592: LD_VAR 0 11
94596: PPUSH
94597: LD_VAR 0 12
94601: PPUSH
94602: CALL_OW 273
94606: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
94607: LD_VAR 0 9
94611: PPUSH
94612: LD_VAR 0 10
94616: PPUSH
94617: CALL_OW 488
94621: IFFALSE 94645
94623: PUSH
94624: LD_VAR 0 9
94628: PUSH
94629: LD_VAR 0 10
94633: PUSH
94634: EMPTY
94635: LIST
94636: LIST
94637: PUSH
94638: LD_VAR 0 7
94642: IN
94643: NOT
94644: AND
94645: IFFALSE 94664
94647: PUSH
94648: LD_VAR 0 9
94652: PPUSH
94653: LD_VAR 0 10
94657: PPUSH
94658: CALL_OW 458
94662: NOT
94663: AND
94664: IFFALSE 94706
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
94666: LD_ADDR_VAR 0 7
94670: PUSH
94671: LD_VAR 0 7
94675: PPUSH
94676: LD_VAR 0 7
94680: PUSH
94681: LD_INT 1
94683: PLUS
94684: PPUSH
94685: LD_VAR 0 9
94689: PUSH
94690: LD_VAR 0 10
94694: PUSH
94695: EMPTY
94696: LIST
94697: LIST
94698: PPUSH
94699: CALL_OW 1
94703: ST_TO_ADDR
94704: GO 94720
// i := i - 1 ;
94706: LD_ADDR_VAR 0 5
94710: PUSH
94711: LD_VAR 0 5
94715: PUSH
94716: LD_INT 1
94718: MINUS
94719: ST_TO_ADDR
// end ;
94720: GO 94522
94722: POP
94723: POP
// for i in tmp do
94724: LD_ADDR_VAR 0 5
94728: PUSH
94729: LD_VAR 0 7
94733: PUSH
94734: FOR_IN
94735: IFFALSE 94773
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
94737: LD_VAR 0 1
94741: PPUSH
94742: LD_VAR 0 5
94746: PUSH
94747: LD_INT 1
94749: ARRAY
94750: PPUSH
94751: LD_VAR 0 5
94755: PUSH
94756: LD_INT 2
94758: ARRAY
94759: PPUSH
94760: CALL 93707 0 3
94764: NOT
94765: IFFALSE 94771
// exit ;
94767: POP
94768: POP
94769: GO 94775
94771: GO 94734
94773: POP
94774: POP
// end ;
94775: LD_VAR 0 4
94779: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
94780: LD_INT 0
94782: PPUSH
94783: PPUSH
94784: PPUSH
94785: PPUSH
94786: PPUSH
94787: PPUSH
94788: PPUSH
94789: PPUSH
94790: PPUSH
// if GetClass ( unit ) <> class_sniper then
94791: LD_VAR 0 1
94795: PPUSH
94796: CALL_OW 257
94800: PUSH
94801: LD_INT 5
94803: NONEQUAL
94804: IFFALSE 94808
// exit ;
94806: GO 95278
// dist := 8 ;
94808: LD_ADDR_VAR 0 5
94812: PUSH
94813: LD_INT 8
94815: ST_TO_ADDR
// viewRange := 12 ;
94816: LD_ADDR_VAR 0 8
94820: PUSH
94821: LD_INT 12
94823: ST_TO_ADDR
// side := GetSide ( unit ) ;
94824: LD_ADDR_VAR 0 6
94828: PUSH
94829: LD_VAR 0 1
94833: PPUSH
94834: CALL_OW 255
94838: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
94839: LD_INT 61
94841: PPUSH
94842: LD_VAR 0 6
94846: PPUSH
94847: CALL_OW 321
94851: PUSH
94852: LD_INT 2
94854: EQUAL
94855: IFFALSE 94865
// viewRange := 16 ;
94857: LD_ADDR_VAR 0 8
94861: PUSH
94862: LD_INT 16
94864: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
94865: LD_VAR 0 1
94869: PPUSH
94870: LD_VAR 0 2
94874: PPUSH
94875: LD_VAR 0 3
94879: PPUSH
94880: CALL_OW 297
94884: PUSH
94885: LD_VAR 0 5
94889: GREATER
94890: IFFALSE 94969
// begin ComMoveXY ( unit , x , y ) ;
94892: LD_VAR 0 1
94896: PPUSH
94897: LD_VAR 0 2
94901: PPUSH
94902: LD_VAR 0 3
94906: PPUSH
94907: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
94911: LD_INT 35
94913: PPUSH
94914: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
94918: LD_VAR 0 1
94922: PPUSH
94923: LD_VAR 0 2
94927: PPUSH
94928: LD_VAR 0 3
94932: PPUSH
94933: CALL 67042 0 3
94937: NOT
94938: IFFALSE 94942
// exit ;
94940: GO 95278
// until GetDistUnitXY ( unit , x , y ) < dist ;
94942: LD_VAR 0 1
94946: PPUSH
94947: LD_VAR 0 2
94951: PPUSH
94952: LD_VAR 0 3
94956: PPUSH
94957: CALL_OW 297
94961: PUSH
94962: LD_VAR 0 5
94966: LESS
94967: IFFALSE 94911
// end ; ComTurnXY ( unit , x , y ) ;
94969: LD_VAR 0 1
94973: PPUSH
94974: LD_VAR 0 2
94978: PPUSH
94979: LD_VAR 0 3
94983: PPUSH
94984: CALL_OW 118
// repeat if Multiplayer then
94988: LD_OWVAR 4
94992: IFFALSE 95003
// wait ( 35 ) else
94994: LD_INT 35
94996: PPUSH
94997: CALL_OW 67
95001: GO 95010
// wait ( 5 ) ;
95003: LD_INT 5
95005: PPUSH
95006: CALL_OW 67
// _d := GetDir ( unit ) ;
95010: LD_ADDR_VAR 0 11
95014: PUSH
95015: LD_VAR 0 1
95019: PPUSH
95020: CALL_OW 254
95024: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
95025: LD_ADDR_VAR 0 7
95029: PUSH
95030: LD_VAR 0 1
95034: PPUSH
95035: CALL_OW 250
95039: PPUSH
95040: LD_VAR 0 1
95044: PPUSH
95045: CALL_OW 251
95049: PPUSH
95050: LD_VAR 0 2
95054: PPUSH
95055: LD_VAR 0 3
95059: PPUSH
95060: CALL 69678 0 4
95064: ST_TO_ADDR
// until dir = _d ;
95065: LD_VAR 0 7
95069: PUSH
95070: LD_VAR 0 11
95074: EQUAL
95075: IFFALSE 94988
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
95077: LD_ADDR_VAR 0 9
95081: PUSH
95082: LD_VAR 0 1
95086: PPUSH
95087: CALL_OW 250
95091: PPUSH
95092: LD_VAR 0 7
95096: PPUSH
95097: LD_VAR 0 5
95101: PPUSH
95102: CALL_OW 272
95106: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
95107: LD_ADDR_VAR 0 10
95111: PUSH
95112: LD_VAR 0 1
95116: PPUSH
95117: CALL_OW 251
95121: PPUSH
95122: LD_VAR 0 7
95126: PPUSH
95127: LD_VAR 0 5
95131: PPUSH
95132: CALL_OW 273
95136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
95137: LD_VAR 0 9
95141: PPUSH
95142: LD_VAR 0 10
95146: PPUSH
95147: CALL_OW 488
95151: NOT
95152: IFFALSE 95156
// exit ;
95154: GO 95278
// ComAnimCustom ( unit , 1 ) ;
95156: LD_VAR 0 1
95160: PPUSH
95161: LD_INT 1
95163: PPUSH
95164: CALL_OW 592
// p := 0 ;
95168: LD_ADDR_VAR 0 12
95172: PUSH
95173: LD_INT 0
95175: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
95176: LD_VAR 0 9
95180: PPUSH
95181: LD_VAR 0 10
95185: PPUSH
95186: LD_VAR 0 6
95190: PPUSH
95191: LD_VAR 0 8
95195: PPUSH
95196: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
95200: LD_INT 35
95202: PPUSH
95203: CALL_OW 67
// p := Inc ( p ) ;
95207: LD_ADDR_VAR 0 12
95211: PUSH
95212: LD_VAR 0 12
95216: PPUSH
95217: CALL 69634 0 1
95221: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
95222: LD_VAR 0 12
95226: PUSH
95227: LD_INT 3
95229: EQUAL
95230: IFTRUE 95244
95232: PUSH
95233: LD_VAR 0 1
95237: PPUSH
95238: CALL_OW 302
95242: NOT
95243: OR
95244: IFTRUE 95257
95246: PUSH
95247: LD_VAR 0 1
95251: PPUSH
95252: CALL_OW 301
95256: OR
95257: IFFALSE 95200
// RemoveSeeing ( _x , _y , side ) ;
95259: LD_VAR 0 9
95263: PPUSH
95264: LD_VAR 0 10
95268: PPUSH
95269: LD_VAR 0 6
95273: PPUSH
95274: CALL_OW 331
// end ;
95278: LD_VAR 0 4
95282: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
95283: LD_INT 0
95285: PPUSH
95286: PPUSH
95287: PPUSH
95288: PPUSH
95289: PPUSH
95290: PPUSH
95291: PPUSH
95292: PPUSH
95293: PPUSH
95294: PPUSH
95295: PPUSH
// if not unit then
95296: LD_VAR 0 1
95300: NOT
95301: IFFALSE 95305
// exit ;
95303: GO 95576
// side := GetSide ( unit ) ;
95305: LD_ADDR_VAR 0 3
95309: PUSH
95310: LD_VAR 0 1
95314: PPUSH
95315: CALL_OW 255
95319: ST_TO_ADDR
// x := GetX ( unit ) ;
95320: LD_ADDR_VAR 0 5
95324: PUSH
95325: LD_VAR 0 1
95329: PPUSH
95330: CALL_OW 250
95334: ST_TO_ADDR
// y := GetY ( unit ) ;
95335: LD_ADDR_VAR 0 6
95339: PUSH
95340: LD_VAR 0 1
95344: PPUSH
95345: CALL_OW 251
95349: ST_TO_ADDR
// r := 8 ;
95350: LD_ADDR_VAR 0 4
95354: PUSH
95355: LD_INT 8
95357: ST_TO_ADDR
// if x - r < 0 then
95358: LD_VAR 0 5
95362: PUSH
95363: LD_VAR 0 4
95367: MINUS
95368: PUSH
95369: LD_INT 0
95371: LESS
95372: IFFALSE 95384
// min_x := 0 else
95374: LD_ADDR_VAR 0 7
95378: PUSH
95379: LD_INT 0
95381: ST_TO_ADDR
95382: GO 95400
// min_x := x - r ;
95384: LD_ADDR_VAR 0 7
95388: PUSH
95389: LD_VAR 0 5
95393: PUSH
95394: LD_VAR 0 4
95398: MINUS
95399: ST_TO_ADDR
// if y - r < 0 then
95400: LD_VAR 0 6
95404: PUSH
95405: LD_VAR 0 4
95409: MINUS
95410: PUSH
95411: LD_INT 0
95413: LESS
95414: IFFALSE 95426
// min_y := 0 else
95416: LD_ADDR_VAR 0 8
95420: PUSH
95421: LD_INT 0
95423: ST_TO_ADDR
95424: GO 95442
// min_y := y - r ;
95426: LD_ADDR_VAR 0 8
95430: PUSH
95431: LD_VAR 0 6
95435: PUSH
95436: LD_VAR 0 4
95440: MINUS
95441: ST_TO_ADDR
// max_x := x + r ;
95442: LD_ADDR_VAR 0 9
95446: PUSH
95447: LD_VAR 0 5
95451: PUSH
95452: LD_VAR 0 4
95456: PLUS
95457: ST_TO_ADDR
// max_y := y + r ;
95458: LD_ADDR_VAR 0 10
95462: PUSH
95463: LD_VAR 0 6
95467: PUSH
95468: LD_VAR 0 4
95472: PLUS
95473: ST_TO_ADDR
// for _x = min_x to max_x do
95474: LD_ADDR_VAR 0 11
95478: PUSH
95479: DOUBLE
95480: LD_VAR 0 7
95484: DEC
95485: ST_TO_ADDR
95486: LD_VAR 0 9
95490: PUSH
95491: FOR_TO
95492: IFFALSE 95574
// for _y = min_y to max_y do
95494: LD_ADDR_VAR 0 12
95498: PUSH
95499: DOUBLE
95500: LD_VAR 0 8
95504: DEC
95505: ST_TO_ADDR
95506: LD_VAR 0 10
95510: PUSH
95511: FOR_TO
95512: IFFALSE 95570
// begin if not ValidHex ( _x , _y ) then
95514: LD_VAR 0 11
95518: PPUSH
95519: LD_VAR 0 12
95523: PPUSH
95524: CALL_OW 488
95528: NOT
95529: IFFALSE 95533
// continue ;
95531: GO 95511
// if MineAtPos ( _x , _y ) then
95533: LD_VAR 0 11
95537: PPUSH
95538: LD_VAR 0 12
95542: PPUSH
95543: CALL_OW 458
95547: IFFALSE 95568
// ViewMineAtPos ( _x , _y , side ) ;
95549: LD_VAR 0 11
95553: PPUSH
95554: LD_VAR 0 12
95558: PPUSH
95559: LD_VAR 0 3
95563: PPUSH
95564: CALL_OW 457
// end ;
95568: GO 95511
95570: POP
95571: POP
95572: GO 95491
95574: POP
95575: POP
// end ;
95576: LD_VAR 0 2
95580: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
95581: LD_INT 0
95583: PPUSH
95584: PPUSH
95585: PPUSH
95586: PPUSH
95587: PPUSH
95588: PPUSH
// if not units then
95589: LD_VAR 0 1
95593: NOT
95594: IFFALSE 95598
// exit ;
95596: GO 96028
// scaners := [ ] ;
95598: LD_ADDR_VAR 0 6
95602: PUSH
95603: EMPTY
95604: ST_TO_ADDR
// for i in units do
95605: LD_ADDR_VAR 0 3
95609: PUSH
95610: LD_VAR 0 1
95614: PUSH
95615: FOR_IN
95616: IFFALSE 95773
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
95618: LD_VAR 0 3
95622: PPUSH
95623: CALL_OW 264
95627: PUSH
95628: LD_INT 11
95630: NONEQUAL
95631: IFTRUE 95645
95633: PUSH
95634: LD_VAR 0 3
95638: PPUSH
95639: CALL_OW 302
95643: NOT
95644: OR
95645: IFTRUE 95662
95647: PUSH
95648: LD_VAR 0 3
95652: PPUSH
95653: CALL_OW 110
95657: PUSH
95658: LD_INT 502
95660: EQUAL
95661: OR
95662: IFFALSE 95666
// continue ;
95664: GO 95615
// ComStop ( i ) ;
95666: LD_VAR 0 3
95670: PPUSH
95671: CALL_OW 141
// x := GetX ( i ) ;
95675: LD_ADDR_VAR 0 4
95679: PUSH
95680: LD_VAR 0 3
95684: PPUSH
95685: CALL_OW 250
95689: ST_TO_ADDR
// y := GetY ( i ) ;
95690: LD_ADDR_VAR 0 5
95694: PUSH
95695: LD_VAR 0 3
95699: PPUSH
95700: CALL_OW 251
95704: ST_TO_ADDR
// if GetSide ( i ) = your_side then
95705: LD_VAR 0 3
95709: PPUSH
95710: CALL_OW 255
95714: PUSH
95715: LD_OWVAR 2
95719: EQUAL
95720: IFFALSE 95739
// PlaySoundXY ( x , y , mineDetector ) ;
95722: LD_VAR 0 4
95726: PPUSH
95727: LD_VAR 0 5
95731: PPUSH
95732: LD_STRING mineDetector
95734: PPUSH
95735: CALL_OW 366
// scaners := Join ( scaners , i ) ;
95739: LD_ADDR_VAR 0 6
95743: PUSH
95744: LD_VAR 0 6
95748: PPUSH
95749: LD_VAR 0 3
95753: PPUSH
95754: CALL 68261 0 2
95758: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
95759: LD_VAR 0 3
95763: PPUSH
95764: LD_INT 502
95766: PPUSH
95767: CALL_OW 109
// end ;
95771: GO 95615
95773: POP
95774: POP
// if not scaners then
95775: LD_VAR 0 6
95779: NOT
95780: IFFALSE 95784
// exit ;
95782: GO 96028
// wait ( 3 ) ;
95784: LD_INT 3
95786: PPUSH
95787: CALL_OW 67
// timer := 6 ;
95791: LD_ADDR_VAR 0 7
95795: PUSH
95796: LD_INT 6
95798: ST_TO_ADDR
// repeat for i in scaners do
95799: LD_ADDR_VAR 0 3
95803: PUSH
95804: LD_VAR 0 6
95808: PUSH
95809: FOR_IN
95810: IFFALSE 95926
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
95812: LD_VAR 0 3
95816: PPUSH
95817: CALL_OW 302
95821: NOT
95822: IFTRUE 95835
95824: PUSH
95825: LD_VAR 0 3
95829: PPUSH
95830: CALL_OW 314
95834: OR
95835: IFTRUE 95866
95837: PUSH
95838: LD_VAR 0 3
95842: PPUSH
95843: CALL_OW 263
95847: PUSH
95848: LD_INT 1
95850: EQUAL
95851: IFFALSE 95865
95853: PUSH
95854: LD_VAR 0 3
95858: PPUSH
95859: CALL_OW 311
95863: NOT
95864: AND
95865: OR
95866: IFFALSE 95910
// begin SetUnitDisplayNumber ( i , 0 ) ;
95868: LD_VAR 0 3
95872: PPUSH
95873: LD_INT 0
95875: PPUSH
95876: CALL_OW 505
// SetTag ( i , 0 ) ;
95880: LD_VAR 0 3
95884: PPUSH
95885: LD_INT 0
95887: PPUSH
95888: CALL_OW 109
// scaners := scaners diff i ;
95892: LD_ADDR_VAR 0 6
95896: PUSH
95897: LD_VAR 0 6
95901: PUSH
95902: LD_VAR 0 3
95906: DIFF
95907: ST_TO_ADDR
// continue ;
95908: GO 95809
// end ; SetUnitDisplayNumber ( i , timer ) ;
95910: LD_VAR 0 3
95914: PPUSH
95915: LD_VAR 0 7
95919: PPUSH
95920: CALL_OW 505
// end ;
95924: GO 95809
95926: POP
95927: POP
// if not scaners then
95928: LD_VAR 0 6
95932: NOT
95933: IFFALSE 95937
// exit ;
95935: GO 96028
// timer := Dec ( timer ) ;
95937: LD_ADDR_VAR 0 7
95941: PUSH
95942: LD_VAR 0 7
95946: PPUSH
95947: CALL 69656 0 1
95951: ST_TO_ADDR
// wait ( 0 0$1 ) ;
95952: LD_INT 35
95954: PPUSH
95955: CALL_OW 67
// until timer = 0 ;
95959: LD_VAR 0 7
95963: PUSH
95964: LD_INT 0
95966: EQUAL
95967: IFFALSE 95799
// if not scaners then
95969: LD_VAR 0 6
95973: NOT
95974: IFFALSE 95978
// exit ;
95976: GO 96028
// for i in scaners do
95978: LD_ADDR_VAR 0 3
95982: PUSH
95983: LD_VAR 0 6
95987: PUSH
95988: FOR_IN
95989: IFFALSE 96026
// begin SetUnitDisplayNumber ( i , 0 ) ;
95991: LD_VAR 0 3
95995: PPUSH
95996: LD_INT 0
95998: PPUSH
95999: CALL_OW 505
// SetTag ( i , 0 ) ;
96003: LD_VAR 0 3
96007: PPUSH
96008: LD_INT 0
96010: PPUSH
96011: CALL_OW 109
// RevealDetectorMine ( i ) ;
96015: LD_VAR 0 3
96019: PPUSH
96020: CALL 95283 0 1
// end ;
96024: GO 95988
96026: POP
96027: POP
// end ;
96028: LD_VAR 0 2
96032: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
96033: LD_INT 0
96035: PPUSH
// if p1 = mine_detector_mode then
96036: LD_VAR 0 2
96040: PUSH
96041: LD_INT 103
96043: EQUAL
96044: IFFALSE 96055
// DetectMine ( units ) ;
96046: LD_VAR 0 1
96050: PPUSH
96051: CALL 95581 0 1
// end ; end_of_file
96055: LD_VAR 0 7
96059: RET
// export function StopOriginalMusic ; begin
96060: LD_INT 0
96062: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
96063: LD_STRING OW_FORCEMUSICDISABLE(true);
96065: PPUSH
96066: CALL_OW 559
// end ;
96070: LD_VAR 0 1
96074: RET
// export function PlayOriginalMusic ; begin
96075: LD_INT 0
96077: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
96078: LD_STRING OW_FORCEMUSICDISABLE(false);
96080: PPUSH
96081: CALL_OW 559
// end ;
96085: LD_VAR 0 1
96089: RET
// export function PlayCustomMusic ( track , callback ) ; begin
96090: LD_INT 0
96092: PPUSH
// StopOriginalMusic ;
96093: CALL 96060 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
96097: LD_STRING playMusic("
96099: PUSH
96100: LD_VAR 0 1
96104: STR
96105: PUSH
96106: LD_STRING ", "
96108: STR
96109: PUSH
96110: LD_VAR 0 2
96114: STR
96115: PUSH
96116: LD_STRING ")
96118: STR
96119: PPUSH
96120: CALL_OW 559
// end ;
96124: LD_VAR 0 3
96128: RET
