// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15411 0 0
// PrepareDifficulty ;
 226: CALL 12514 0 0
// PrepareVehicles ;
 230: CALL 1765 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1339 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3153 0 0
// PrepareWestBase ;
 258: CALL 3668 0 0
// PrepareEastBase ;
 262: CALL 3228 0 0
// PrepareOtherRussians ;
 266: CALL 3780 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: LD_STRING 11_
 688: PPUSH
 689: CALL 36825 0 3
 693: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 694: LD_EXP 1
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 22
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: LD_INT 21
 723: PUSH
 724: LD_INT 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 58
 733: PUSH
 734: EMPTY
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 69
 746: PUSH
 747: LD_INT 1
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 755: LD_STRING 11_Lisa
 757: PPUSH
 758: CALL_OW 28
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: IFFALSE 816
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 768: LD_ADDR_EXP 2
 772: PUSH
 773: LD_STRING Lisa
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_STRING 11_
 781: PPUSH
 782: CALL 36825 0 3
 786: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 787: LD_EXP 2
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 799: LD_EXP 2
 803: PPUSH
 804: LD_INT 4
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// end else
 814: GO 832
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 816: LD_INT 4
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL 1339 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 832: LD_STRING 11_Donaldson
 834: PPUSH
 835: CALL_OW 28
 839: PUSH
 840: LD_INT 1
 842: EQUAL
 843: IFFALSE 893
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 845: LD_ADDR_EXP 3
 849: PUSH
 850: LD_STRING Donaldson
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: LD_STRING 11_
 858: PPUSH
 859: CALL 36825 0 3
 863: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_INT 1
 871: PPUSH
 872: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 4
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// end else
 891: GO 909
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: LD_INT 1
 901: PPUSH
 902: LD_INT 0
 904: PPUSH
 905: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 909: LD_STRING 11_Cyrus
 911: PPUSH
 912: CALL_OW 28
 916: PUSH
 917: LD_INT 1
 919: EQUAL
 920: IFFALSE 970
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 36825 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1339 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: PUSH
 994: LD_INT 1
 996: EQUAL
 997: IFFALSE 1047
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
 999: LD_ADDR_EXP 6
1003: PUSH
1004: LD_STRING Denis
1006: PPUSH
1007: LD_INT 1
1009: PPUSH
1010: LD_STRING 11_
1012: PPUSH
1013: CALL 36825 0 3
1017: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1018: LD_EXP 6
1022: PPUSH
1023: LD_INT 4
1025: PPUSH
1026: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1030: LD_EXP 6
1034: PPUSH
1035: LD_INT 4
1037: PPUSH
1038: LD_INT 0
1040: PPUSH
1041: CALL_OW 49
// end else
1045: GO 1063
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1047: LD_INT 4
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: LD_INT 1
1055: PPUSH
1056: LD_INT 0
1058: PPUSH
1059: CALL 1339 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1063: LD_STRING 11_Frank
1065: PPUSH
1066: CALL_OW 28
1070: PUSH
1071: LD_INT 1
1073: EQUAL
1074: IFFALSE 1124
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 36825 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1339 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1201
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING Cornell
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: LD_STRING 11_
1166: PPUSH
1167: CALL 36825 0 3
1171: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1184: LD_EXP 10
1188: PPUSH
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: CALL_OW 49
// end else
1199: GO 1217
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1201: LD_INT 4
1203: PPUSH
1204: LD_INT 0
1206: PPUSH
1207: LD_INT 1
1209: PPUSH
1210: LD_INT 0
1212: PPUSH
1213: CALL 1339 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_EXP 14
1226: PPUSH
1227: LD_INT 26
1229: PUSH
1230: LD_INT 1
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: PPUSH
1237: CALL_OW 72
1241: ST_TO_ADDR
// if not tmp then
1242: LD_VAR 0 2
1246: NOT
1247: IFFALSE 1276
// begin PrepareSoldier ( sex_male , 8 ) ;
1249: LD_INT 1
1251: PPUSH
1252: LD_INT 8
1254: PPUSH
1255: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1259: CALL_OW 44
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// end else
1274: GO 1315
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1276: LD_VAR 0 2
1280: PUSH
1281: LD_INT 1
1283: ARRAY
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1295: LD_ADDR_EXP 14
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: DIFF
1314: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1315: LD_ADDR_EXP 22
1319: PUSH
1320: LD_STRING Powell
1322: PPUSH
1323: LD_INT 0
1325: PPUSH
1326: LD_STRING 
1328: PPUSH
1329: CALL 36825 0 3
1333: ST_TO_ADDR
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// if mech = 1 then
1346: LD_VAR 0 4
1350: PUSH
1351: LD_INT 1
1353: EQUAL
1354: IFFALSE 1591
// begin if others11 > 0 then
1356: LD_EXP 14
1360: PUSH
1361: LD_INT 0
1363: GREATER
1364: IFFALSE 1531
// begin for i := 1 to others11 - 1 do
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: DOUBLE
1372: LD_INT 1
1374: DEC
1375: ST_TO_ADDR
1376: LD_EXP 14
1380: PUSH
1381: LD_INT 1
1383: MINUS
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1468
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1388: LD_EXP 14
1392: PUSH
1393: LD_VAR 0 6
1397: ARRAY
1398: PPUSH
1399: LD_INT 3
1401: PPUSH
1402: CALL_OW 259
1406: PUSH
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ARRAY
1421: PPUSH
1422: LD_INT 3
1424: PPUSH
1425: CALL_OW 259
1429: LESS
1430: IFFALSE 1466
// begin mecha = others11 [ i + 1 ] ;
1432: LD_ADDR_VAR 0 9
1436: PUSH
1437: LD_EXP 14
1441: PUSH
1442: LD_VAR 0 6
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1452: LD_VAR 0 9
1456: PPUSH
1457: LD_INT 3
1459: PPUSH
1460: CALL_OW 336
// break ;
1464: GO 1468
// end ; end ;
1466: GO 1385
1468: POP
1469: POP
// if spawnMode = 1 then
1470: LD_VAR 0 3
1474: PUSH
1475: LD_INT 1
1477: EQUAL
1478: IFFALSE 1499
// PlaceUnitArea ( mecha , area , false ) else
1480: LD_VAR 0 9
1484: PPUSH
1485: LD_VAR 0 1
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
1497: GO 1513
// PlaceHumanInUnit ( mecha , veh ) ;
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 2
1508: PPUSH
1509: CALL_OW 52
// others11 = others11 diff mecha ;
1513: LD_ADDR_EXP 14
1517: PUSH
1518: LD_EXP 14
1522: PUSH
1523: LD_VAR 0 9
1527: DIFF
1528: ST_TO_ADDR
// end else
1529: GO 1589
// begin hc_name =  ;
1531: LD_ADDR_OWVAR 26
1535: PUSH
1536: LD_STRING 
1538: ST_TO_ADDR
// hc_gallery =  ;
1539: LD_ADDR_OWVAR 33
1543: PUSH
1544: LD_STRING 
1546: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1547: LD_INT 0
1549: PPUSH
1550: LD_INT 7
1552: PPUSH
1553: LD_INT 9
1555: PPUSH
1556: CALL_OW 12
1560: PPUSH
1561: CALL_OW 383
// un = CreateHuman ;
1565: LD_ADDR_VAR 0 7
1569: PUSH
1570: CALL_OW 44
1574: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1575: LD_VAR 0 7
1579: PPUSH
1580: LD_VAR 0 2
1584: PPUSH
1585: CALL_OW 52
// end ; end else
1589: GO 1760
// begin if others11 > 0 then
1591: LD_EXP 14
1595: PUSH
1596: LD_INT 0
1598: GREATER
1599: IFFALSE 1672
// begin if spawnMode = 1 then
1601: LD_VAR 0 3
1605: PUSH
1606: LD_INT 1
1608: EQUAL
1609: IFFALSE 1634
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1611: LD_EXP 14
1615: PUSH
1616: LD_INT 1
1618: ARRAY
1619: PPUSH
1620: LD_VAR 0 1
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
1632: GO 1652
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1634: LD_EXP 14
1638: PUSH
1639: LD_INT 1
1641: ARRAY
1642: PPUSH
1643: LD_VAR 0 2
1647: PPUSH
1648: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1652: LD_ADDR_EXP 14
1656: PUSH
1657: LD_EXP 14
1661: PPUSH
1662: LD_INT 1
1664: PPUSH
1665: CALL_OW 3
1669: ST_TO_ADDR
// end else
1670: GO 1760
// begin hc_name =  ;
1672: LD_ADDR_OWVAR 26
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1688: LD_INT 0
1690: PPUSH
1691: LD_INT 1
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: LD_INT 3
1699: PUSH
1700: LD_INT 4
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 1
1711: PPUSH
1712: LD_INT 4
1714: PPUSH
1715: CALL_OW 12
1719: ARRAY
1720: PPUSH
1721: LD_INT 7
1723: PPUSH
1724: LD_INT 9
1726: PPUSH
1727: CALL_OW 12
1731: PPUSH
1732: CALL_OW 380
// un = CreateHuman ;
1736: LD_ADDR_VAR 0 7
1740: PUSH
1741: CALL_OW 44
1745: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1746: LD_VAR 0 7
1750: PPUSH
1751: LD_VAR 0 2
1755: PPUSH
1756: CALL_OW 52
// end ; end ; end ;
1760: LD_VAR 0 5
1764: RET
// export function PrepareVehicles ; var veh ; begin
1765: LD_INT 0
1767: PPUSH
1768: PPUSH
// uc_side = 1 ;
1769: LD_ADDR_OWVAR 20
1773: PUSH
1774: LD_INT 1
1776: ST_TO_ADDR
// uc_nation = 1 ;
1777: LD_ADDR_OWVAR 21
1781: PUSH
1782: LD_INT 1
1784: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1785: LD_ADDR_OWVAR 37
1789: PUSH
1790: LD_INT 3
1792: ST_TO_ADDR
// vc_engine = 3 ;
1793: LD_ADDR_OWVAR 39
1797: PUSH
1798: LD_INT 3
1800: ST_TO_ADDR
// vc_control = 3 ;
1801: LD_ADDR_OWVAR 38
1805: PUSH
1806: LD_INT 3
1808: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1809: LD_ADDR_OWVAR 40
1813: PUSH
1814: LD_INT 4
1816: ST_TO_ADDR
// veh = CreateVehicle ;
1817: LD_ADDR_VAR 0 2
1821: PUSH
1822: CALL_OW 45
1826: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1827: LD_VAR 0 2
1831: PPUSH
1832: LD_INT 4
1834: PPUSH
1835: LD_INT 0
1837: PPUSH
1838: CALL_OW 49
// vc_weapon = us_double_gun ;
1842: LD_ADDR_OWVAR 40
1846: PUSH
1847: LD_INT 5
1849: ST_TO_ADDR
// vc_control = 1 ;
1850: LD_ADDR_OWVAR 38
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// veh = CreateVehicle ;
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: CALL_OW 45
1867: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1868: LD_VAR 0 2
1872: PPUSH
1873: LD_INT 4
1875: PPUSH
1876: LD_INT 0
1878: PPUSH
1879: CALL_OW 49
// vc_weapon = us_light_gun ;
1883: LD_ADDR_OWVAR 40
1887: PUSH
1888: LD_INT 3
1890: ST_TO_ADDR
// vc_control = 3 ;
1891: LD_ADDR_OWVAR 38
1895: PUSH
1896: LD_INT 3
1898: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1899: LD_ADDR_OWVAR 37
1903: PUSH
1904: LD_INT 2
1906: ST_TO_ADDR
// veh = CreateVehicle ;
1907: LD_ADDR_VAR 0 2
1911: PUSH
1912: CALL_OW 45
1916: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1917: LD_VAR 0 2
1921: PPUSH
1922: LD_INT 4
1924: PPUSH
1925: LD_INT 0
1927: PPUSH
1928: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1932: LD_ADDR_OWVAR 40
1936: PUSH
1937: LD_INT 4
1939: ST_TO_ADDR
// veh = CreateVehicle ;
1940: LD_ADDR_VAR 0 2
1944: PUSH
1945: CALL_OW 45
1949: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1950: LD_VAR 0 2
1954: PPUSH
1955: LD_INT 4
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// end ;
1965: LD_VAR 0 1
1969: RET
// export function PowellSupport1 ; var veh , un ; begin
1970: LD_INT 0
1972: PPUSH
1973: PPUSH
1974: PPUSH
// uc_side = 1 ;
1975: LD_ADDR_OWVAR 20
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// uc_nation = 1 ;
1983: LD_ADDR_OWVAR 21
1987: PUSH
1988: LD_INT 1
1990: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1991: LD_STRING 11_Brown
1993: PPUSH
1994: CALL_OW 28
1998: PUSH
1999: LD_INT 1
2001: EQUAL
2002: IFFALSE 2052
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2004: LD_ADDR_EXP 7
2008: PUSH
2009: LD_STRING Brown
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_STRING 11_
2017: PPUSH
2018: CALL 36825 0 3
2022: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2023: LD_EXP 7
2027: PPUSH
2028: LD_INT 2
2030: PPUSH
2031: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2035: LD_EXP 7
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: LD_INT 0
2045: PPUSH
2046: CALL_OW 49
// end else
2050: GO 2068
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2052: LD_INT 4
2054: PPUSH
2055: LD_INT 0
2057: PPUSH
2058: LD_INT 1
2060: PPUSH
2061: LD_INT 0
2063: PPUSH
2064: CALL 1339 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2068: LD_STRING 11_Gary
2070: PPUSH
2071: CALL_OW 28
2075: PUSH
2076: LD_INT 1
2078: EQUAL
2079: IFFALSE 2129
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2081: LD_ADDR_EXP 11
2085: PUSH
2086: LD_STRING Gary
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_STRING 11_
2094: PPUSH
2095: CALL 36825 0 3
2099: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2100: LD_EXP 11
2104: PPUSH
2105: LD_INT 2
2107: PPUSH
2108: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2112: LD_EXP 11
2116: PPUSH
2117: LD_INT 4
2119: PPUSH
2120: LD_INT 0
2122: PPUSH
2123: CALL_OW 49
// end else
2127: GO 2145
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2129: LD_INT 4
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: LD_INT 1
2137: PPUSH
2138: LD_INT 0
2140: PPUSH
2141: CALL 1339 0 4
// end ; vc_chassis = us_medium_tracked ;
2145: LD_ADDR_OWVAR 37
2149: PUSH
2150: LD_INT 3
2152: ST_TO_ADDR
// vc_engine = 3 ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_INT 3
2160: ST_TO_ADDR
// vc_control = 1 ;
2161: LD_ADDR_OWVAR 38
2165: PUSH
2166: LD_INT 1
2168: ST_TO_ADDR
// vc_weapon = us_crane ;
2169: LD_ADDR_OWVAR 40
2173: PUSH
2174: LD_INT 13
2176: ST_TO_ADDR
// veh = CreateVehicle ;
2177: LD_ADDR_VAR 0 2
2181: PUSH
2182: CALL_OW 45
2186: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2199: LD_VAR 0 2
2203: PPUSH
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2214: LD_INT 4
2216: PPUSH
2217: LD_VAR 0 2
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL 1339 0 4
// vc_weapon = 9 ;
2232: LD_ADDR_OWVAR 40
2236: PUSH
2237: LD_INT 9
2239: ST_TO_ADDR
// veh = CreateVehicle ;
2240: LD_ADDR_VAR 0 2
2244: PUSH
2245: CALL_OW 45
2249: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 4
2257: PPUSH
2258: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: LD_INT 0
2272: PPUSH
2273: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2277: LD_INT 4
2279: PPUSH
2280: LD_VAR 0 2
2284: PPUSH
2285: LD_INT 2
2287: PPUSH
2288: LD_INT 1
2290: PPUSH
2291: CALL 1339 0 4
// vc_control = 3 ;
2295: LD_ADDR_OWVAR 38
2299: PUSH
2300: LD_INT 3
2302: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2303: LD_ADDR_OWVAR 40
2307: PUSH
2308: LD_INT 12
2310: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2311: LD_ADDR_EXP 15
2315: PUSH
2316: CALL_OW 45
2320: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2321: LD_ADDR_EXP 16
2325: PUSH
2326: CALL_OW 45
2330: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2331: LD_EXP 15
2335: PPUSH
2336: LD_INT 4
2338: PPUSH
2339: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2343: LD_EXP 16
2347: PPUSH
2348: LD_INT 4
2350: PPUSH
2351: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 4
2362: PPUSH
2363: LD_INT 0
2365: PPUSH
2366: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 4
2377: PPUSH
2378: LD_INT 0
2380: PPUSH
2381: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2385: LD_EXP 15
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 100
2395: PPUSH
2396: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2400: LD_EXP 16
2404: PPUSH
2405: LD_INT 1
2407: PPUSH
2408: LD_INT 80
2410: PPUSH
2411: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2415: LD_EXP 16
2419: PPUSH
2420: LD_INT 3
2422: PPUSH
2423: LD_INT 20
2425: PPUSH
2426: CALL_OW 291
// end ;
2430: LD_VAR 0 1
2434: RET
// export function PowellSupport2 ; var veh , un ; begin
2435: LD_INT 0
2437: PPUSH
2438: PPUSH
2439: PPUSH
// uc_side = 1 ;
2440: LD_ADDR_OWVAR 20
2444: PUSH
2445: LD_INT 1
2447: ST_TO_ADDR
// uc_nation = 1 ;
2448: LD_ADDR_OWVAR 21
2452: PUSH
2453: LD_INT 1
2455: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2456: LD_ADDR_OWVAR 37
2460: PUSH
2461: LD_INT 2
2463: ST_TO_ADDR
// vc_engine = 3 ;
2464: LD_ADDR_OWVAR 39
2468: PUSH
2469: LD_INT 3
2471: ST_TO_ADDR
// vc_control = 3 ;
2472: LD_ADDR_OWVAR 38
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2480: LD_ADDR_OWVAR 40
2484: PUSH
2485: LD_INT 3
2487: ST_TO_ADDR
// veh = CreateVehicle ;
2488: LD_ADDR_VAR 0 2
2492: PUSH
2493: CALL_OW 45
2497: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2498: LD_VAR 0 2
2502: PPUSH
2503: LD_INT 4
2505: PPUSH
2506: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2510: LD_VAR 0 2
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// vc_control = 1 ;
2525: LD_ADDR_OWVAR 38
2529: PUSH
2530: LD_INT 1
2532: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2533: LD_ADDR_OWVAR 37
2537: PUSH
2538: LD_INT 2
2540: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2541: LD_ADDR_OWVAR 40
2545: PUSH
2546: LD_INT 5
2548: ST_TO_ADDR
// veh = CreateVehicle ;
2549: LD_ADDR_VAR 0 2
2553: PUSH
2554: CALL_OW 45
2558: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2559: LD_VAR 0 2
2563: PPUSH
2564: LD_INT 4
2566: PPUSH
2567: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2571: LD_VAR 0 2
2575: PPUSH
2576: LD_INT 4
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2586: LD_STRING 11_Bobby
2588: PPUSH
2589: CALL_OW 28
2593: PUSH
2594: LD_INT 1
2596: EQUAL
2597: IFFALSE 2646
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2599: LD_ADDR_EXP 4
2603: PUSH
2604: LD_STRING Bobby
2606: PPUSH
2607: LD_INT 1
2609: PPUSH
2610: LD_STRING 11_
2612: PPUSH
2613: CALL 36825 0 3
2617: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2618: LD_EXP 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2630: LD_EXP 4
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 52
// end else
2644: GO 2664
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2646: LD_INT 0
2648: PPUSH
2649: LD_VAR 0 2
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL 1339 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2664: LD_STRING 11_Houten
2666: PPUSH
2667: CALL_OW 28
2671: PUSH
2672: LD_INT 1
2674: EQUAL
2675: IFFALSE 2725
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2677: LD_ADDR_EXP 9
2681: PUSH
2682: LD_STRING Houten
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 11_
2690: PPUSH
2691: CALL 36825 0 3
2695: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2696: LD_EXP 9
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2708: LD_EXP 9
2712: PPUSH
2713: LD_INT 4
2715: PPUSH
2716: LD_INT 0
2718: PPUSH
2719: CALL_OW 49
// end else
2723: GO 2741
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2725: LD_INT 4
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL 1339 0 4
// end ; vc_control = 3 ;
2741: LD_ADDR_OWVAR 38
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2749: LD_ADDR_OWVAR 40
2753: PUSH
2754: LD_INT 12
2756: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2757: LD_ADDR_EXP 17
2761: PUSH
2762: CALL_OW 45
2766: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2767: LD_EXP 17
2771: PPUSH
2772: LD_INT 4
2774: PPUSH
2775: CALL_OW 233
// amCargo4 = CreateVehicle ;
2779: LD_ADDR_EXP 18
2783: PUSH
2784: CALL_OW 45
2788: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2789: LD_EXP 18
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// amCargo5 = CreateVehicle ;
2801: LD_ADDR_EXP 19
2805: PUSH
2806: CALL_OW 45
2810: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2811: LD_EXP 19
2815: PPUSH
2816: LD_INT 4
2818: PPUSH
2819: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2823: LD_EXP 17
2827: PPUSH
2828: LD_INT 4
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2838: LD_EXP 18
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: LD_INT 0
2848: PPUSH
2849: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2853: LD_EXP 19
2857: PPUSH
2858: LD_INT 4
2860: PPUSH
2861: LD_INT 0
2863: PPUSH
2864: CALL_OW 49
// if kurtStatus > 0 then
2868: LD_EXP 26
2872: PUSH
2873: LD_INT 0
2875: GREATER
2876: IFFALSE 2925
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2878: LD_EXP 17
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2893: LD_EXP 18
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 100
2903: PPUSH
2904: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2908: LD_EXP 19
2912: PPUSH
2913: LD_INT 3
2915: PPUSH
2916: LD_INT 80
2918: PPUSH
2919: CALL_OW 291
// end else
2923: GO 2970
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2925: LD_EXP 17
2929: PPUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 100
2935: PPUSH
2936: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2940: LD_EXP 18
2944: PPUSH
2945: LD_INT 3
2947: PPUSH
2948: LD_INT 60
2950: PPUSH
2951: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2955: LD_EXP 19
2959: PPUSH
2960: LD_INT 3
2962: PPUSH
2963: LD_INT 100
2965: PPUSH
2966: CALL_OW 291
// end ; end ;
2970: LD_VAR 0 1
2974: RET
// export function PowellSupport3 ; var veh , un ; begin
2975: LD_INT 0
2977: PPUSH
2978: PPUSH
2979: PPUSH
// uc_side = 1 ;
2980: LD_ADDR_OWVAR 20
2984: PUSH
2985: LD_INT 1
2987: ST_TO_ADDR
// uc_nation = 1 ;
2988: LD_ADDR_OWVAR 21
2992: PUSH
2993: LD_INT 1
2995: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL 1339 0 4
// vc_chassis = us_medium_wheeled ;
3012: LD_ADDR_OWVAR 37
3016: PUSH
3017: LD_INT 2
3019: ST_TO_ADDR
// vc_engine = 3 ;
3020: LD_ADDR_OWVAR 39
3024: PUSH
3025: LD_INT 3
3027: ST_TO_ADDR
// vc_control = 3 ;
3028: LD_ADDR_OWVAR 38
3032: PUSH
3033: LD_INT 3
3035: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3036: LD_ADDR_OWVAR 40
3040: PUSH
3041: LD_INT 12
3043: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3044: LD_ADDR_EXP 20
3048: PUSH
3049: CALL_OW 45
3053: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3054: LD_ADDR_EXP 21
3058: PUSH
3059: CALL_OW 45
3063: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3064: LD_EXP 20
3068: PPUSH
3069: LD_INT 4
3071: PPUSH
3072: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3076: LD_EXP 21
3080: PPUSH
3081: LD_INT 4
3083: PPUSH
3084: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3088: LD_EXP 20
3092: PPUSH
3093: LD_INT 4
3095: PPUSH
3096: LD_INT 0
3098: PPUSH
3099: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3103: LD_EXP 21
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3118: LD_EXP 20
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 100
3128: PPUSH
3129: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3133: LD_EXP 21
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 100
3143: PPUSH
3144: CALL_OW 291
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareRussianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 3 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3164: LD_ADDR_EXP 23
3168: PUSH
3169: LD_STRING Davidov
3171: PPUSH
3172: LD_INT 0
3174: PPUSH
3175: LD_STRING 
3177: PPUSH
3178: CALL 36825 0 3
3182: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3183: LD_EXP 23
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3195: LD_ADDR_EXP 34
3199: PUSH
3200: LD_EXP 34
3204: PUSH
3205: LD_EXP 23
3209: ADD
3210: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3211: LD_EXP 34
3215: PPUSH
3216: LD_INT 4
3218: PPUSH
3219: CALL_OW 336
// end ;
3223: LD_VAR 0 1
3227: RET
// export function PrepareEastBase ; var i , un ; begin
3228: LD_INT 0
3230: PPUSH
3231: PPUSH
3232: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 3
3238: PPUSH
3239: LD_INT 121
3241: PPUSH
3242: LD_EXP 36
3246: PPUSH
3247: LD_EXP 37
3251: PPUSH
3252: CALL_OW 12
3256: PPUSH
3257: LD_INT 1
3259: PPUSH
3260: LD_INT 3
3262: PPUSH
3263: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3267: LD_INT 3
3269: PPUSH
3270: LD_INT 3
3272: PPUSH
3273: LD_INT 121
3275: PPUSH
3276: LD_EXP 36
3280: PPUSH
3281: LD_EXP 37
3285: PPUSH
3286: CALL_OW 12
3290: PPUSH
3291: LD_INT 9
3293: PPUSH
3294: LD_INT 3
3296: PPUSH
3297: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 3
3306: PPUSH
3307: LD_INT 4
3309: PPUSH
3310: LD_EXP 36
3314: PPUSH
3315: LD_EXP 37
3319: PPUSH
3320: CALL_OW 12
3324: PPUSH
3325: LD_INT 2
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3335: LD_INT 3
3337: PPUSH
3338: LD_INT 3
3340: PPUSH
3341: LD_INT 112
3343: PPUSH
3344: LD_EXP 36
3348: PPUSH
3349: LD_EXP 37
3353: PPUSH
3354: CALL_OW 12
3358: PPUSH
3359: LD_INT 3
3361: PPUSH
3362: LD_INT 6
3364: PPUSH
3365: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3369: LD_INT 3
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: LD_INT 47
3377: PPUSH
3378: LD_EXP 36
3382: PPUSH
3383: LD_EXP 37
3387: PPUSH
3388: CALL_OW 12
3392: PPUSH
3393: LD_INT 4
3395: PPUSH
3396: LD_INT 6
3398: PPUSH
3399: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3403: LD_INT 3
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_INT 129
3411: PPUSH
3412: LD_EXP 36
3416: PPUSH
3417: LD_EXP 37
3421: PPUSH
3422: CALL_OW 12
3426: PPUSH
3427: LD_INT 4
3429: PPUSH
3430: LD_INT 6
3432: PPUSH
3433: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3437: LD_INT 3
3439: PPUSH
3440: LD_INT 3
3442: PPUSH
3443: LD_INT 135
3445: PPUSH
3446: LD_EXP 36
3450: PPUSH
3451: LD_EXP 37
3455: PPUSH
3456: CALL_OW 12
3460: PPUSH
3461: LD_INT 4
3463: PPUSH
3464: LD_INT 6
3466: PPUSH
3467: CALL 12945 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3471: LD_ADDR_VAR 0 2
3475: PUSH
3476: LD_INT 22
3478: PUSH
3479: LD_INT 3
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: PUSH
3486: LD_INT 30
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: EMPTY
3493: LIST
3494: LIST
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PPUSH
3500: CALL_OW 69
3504: PUSH
3505: FOR_IN
3506: IFFALSE 3546
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3508: LD_INT 3
3510: PPUSH
3511: LD_INT 3
3513: PPUSH
3514: LD_VAR 0 2
3518: PPUSH
3519: LD_EXP 36
3523: PPUSH
3524: LD_EXP 37
3528: PPUSH
3529: CALL_OW 12
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_INT 1
3539: PPUSH
3540: CALL 12945 0 6
3544: GO 3505
3546: POP
3547: POP
// for i = 1 to 5 do
3548: LD_ADDR_VAR 0 2
3552: PUSH
3553: DOUBLE
3554: LD_INT 1
3556: DEC
3557: ST_TO_ADDR
3558: LD_INT 5
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3661
// begin uc_side = 3 ;
3564: LD_ADDR_OWVAR 20
3568: PUSH
3569: LD_INT 3
3571: ST_TO_ADDR
// uc_nation = 3 ;
3572: LD_ADDR_OWVAR 21
3576: PUSH
3577: LD_INT 3
3579: ST_TO_ADDR
// hc_gallery =  ;
3580: LD_ADDR_OWVAR 33
3584: PUSH
3585: LD_STRING 
3587: ST_TO_ADDR
// hc_name =  ;
3588: LD_ADDR_OWVAR 26
3592: PUSH
3593: LD_STRING 
3595: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3596: LD_INT 0
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_EXP 36
3606: PPUSH
3607: LD_EXP 37
3611: PPUSH
3612: CALL_OW 12
3616: PPUSH
3617: CALL_OW 380
// un = CreateHuman ;
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: CALL_OW 44
3630: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3643: LD_ADDR_EXP 34
3647: PUSH
3648: LD_EXP 34
3652: PUSH
3653: LD_VAR 0 3
3657: ADD
3658: ST_TO_ADDR
// end ;
3659: GO 3561
3661: POP
3662: POP
// end ;
3663: LD_VAR 0 1
3667: RET
// export function PrepareWestBase ; var i , un ; begin
3668: LD_INT 0
3670: PPUSH
3671: PPUSH
3672: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 3
3678: PPUSH
3679: LD_INT 6
3681: PPUSH
3682: LD_EXP 36
3686: PPUSH
3687: LD_EXP 37
3691: PPUSH
3692: CALL_OW 12
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: LD_INT 3
3702: PPUSH
3703: CALL 12945 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3707: LD_INT 3
3709: PPUSH
3710: LD_INT 3
3712: PPUSH
3713: LD_INT 91
3715: PPUSH
3716: LD_EXP 36
3720: PPUSH
3721: LD_EXP 37
3725: PPUSH
3726: CALL_OW 12
3730: PPUSH
3731: LD_INT 4
3733: PPUSH
3734: LD_INT 3
3736: PPUSH
3737: CALL 12945 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 21
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 6
3770: PPUSH
3771: CALL 12945 0 6
// end ;
3775: LD_VAR 0 1
3779: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3780: LD_INT 0
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// uc_side = 3 ;
3786: LD_ADDR_OWVAR 20
3790: PUSH
3791: LD_INT 3
3793: ST_TO_ADDR
// uc_nation = 3 ;
3794: LD_ADDR_OWVAR 21
3798: PUSH
3799: LD_INT 3
3801: ST_TO_ADDR
// for i = 1 to 5 do
3802: LD_ADDR_VAR 0 2
3806: PUSH
3807: DOUBLE
3808: LD_INT 1
3810: DEC
3811: ST_TO_ADDR
3812: LD_INT 5
3814: PUSH
3815: FOR_TO
3816: IFFALSE 3886
// begin hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 9
3839: PPUSH
3840: LD_EXP 36
3844: PPUSH
3845: LD_EXP 37
3849: PPUSH
3850: CALL_OW 12
3854: PPUSH
3855: CALL_OW 380
// un = CreateHuman ;
3859: LD_ADDR_VAR 0 3
3863: PUSH
3864: CALL_OW 44
3868: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3869: LD_VAR 0 3
3873: PPUSH
3874: LD_INT 8
3876: PPUSH
3877: LD_INT 0
3879: PPUSH
3880: CALL_OW 49
// end ;
3884: GO 3815
3886: POP
3887: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3888: LD_ADDR_VAR 0 2
3892: PUSH
3893: DOUBLE
3894: LD_INT 1
3896: DEC
3897: ST_TO_ADDR
3898: LD_INT 2
3900: PUSH
3901: LD_INT 3
3903: PUSH
3904: LD_INT 4
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: LIST
3911: PUSH
3912: LD_OWVAR 67
3916: ARRAY
3917: PUSH
3918: FOR_TO
3919: IFFALSE 3989
// begin hc_gallery =  ;
3921: LD_ADDR_OWVAR 33
3925: PUSH
3926: LD_STRING 
3928: ST_TO_ADDR
// hc_name =  ;
3929: LD_ADDR_OWVAR 26
3933: PUSH
3934: LD_STRING 
3936: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3937: LD_INT 0
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: LD_EXP 36
3947: PPUSH
3948: LD_EXP 37
3952: PPUSH
3953: CALL_OW 12
3957: PPUSH
3958: CALL_OW 380
// un = CreateHuman ;
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: CALL_OW 44
3971: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3972: LD_VAR 0 3
3976: PPUSH
3977: LD_INT 8
3979: PPUSH
3980: LD_INT 0
3982: PPUSH
3983: CALL_OW 49
// end ;
3987: GO 3918
3989: POP
3990: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3991: LD_ADDR_VAR 0 2
3995: PUSH
3996: DOUBLE
3997: LD_INT 1
3999: DEC
4000: ST_TO_ADDR
4001: LD_INT 3
4003: PUSH
4004: LD_INT 4
4006: PUSH
4007: LD_INT 5
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: PUSH
4015: LD_OWVAR 67
4019: ARRAY
4020: PUSH
4021: FOR_TO
4022: IFFALSE 4218
// begin vc_engine = 3 ;
4024: LD_ADDR_OWVAR 39
4028: PUSH
4029: LD_INT 3
4031: ST_TO_ADDR
// vc_control = 1 ;
4032: LD_ADDR_OWVAR 38
4036: PUSH
4037: LD_INT 1
4039: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4040: LD_ADDR_OWVAR 40
4044: PUSH
4045: LD_INT 42
4047: PUSH
4048: LD_INT 43
4050: PUSH
4051: LD_INT 44
4053: PUSH
4054: LD_INT 45
4056: PUSH
4057: LD_INT 46
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 5
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4079: LD_OWVAR 40
4083: PUSH
4084: LD_INT 46
4086: EQUAL
4087: IFFALSE 4099
// vc_chassis = ru_heavy_tracked else
4089: LD_ADDR_OWVAR 37
4093: PUSH
4094: LD_INT 24
4096: ST_TO_ADDR
4097: GO 4126
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4099: LD_ADDR_OWVAR 37
4103: PUSH
4104: LD_INT 22
4106: PUSH
4107: LD_INT 21
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 1
4116: PPUSH
4117: LD_INT 2
4119: PPUSH
4120: CALL_OW 12
4124: ARRAY
4125: ST_TO_ADDR
// veh = CreateVehicle ;
4126: LD_ADDR_VAR 0 4
4130: PUSH
4131: CALL_OW 45
4135: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4136: LD_VAR 0 4
4140: PPUSH
4141: LD_INT 3
4143: PPUSH
4144: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4148: LD_VAR 0 4
4152: PPUSH
4153: LD_INT 5
4155: PPUSH
4156: LD_INT 0
4158: PPUSH
4159: CALL_OW 49
// hc_gallery =  ;
4163: LD_ADDR_OWVAR 33
4167: PUSH
4168: LD_STRING 
4170: ST_TO_ADDR
// hc_name =  ;
4171: LD_ADDR_OWVAR 26
4175: PUSH
4176: LD_STRING 
4178: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4179: LD_INT 0
4181: PPUSH
4182: LD_INT 3
4184: PPUSH
4185: LD_INT 10
4187: PPUSH
4188: CALL_OW 380
// un = CreateHuman ;
4192: LD_ADDR_VAR 0 3
4196: PUSH
4197: CALL_OW 44
4201: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4202: LD_VAR 0 3
4206: PPUSH
4207: LD_VAR 0 4
4211: PPUSH
4212: CALL_OW 52
// end ;
4216: GO 4021
4218: POP
4219: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4220: LD_ADDR_VAR 0 2
4224: PUSH
4225: DOUBLE
4226: LD_INT 1
4228: DEC
4229: ST_TO_ADDR
4230: LD_INT 3
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: LD_INT 5
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: LIST
4243: PUSH
4244: LD_OWVAR 67
4248: ARRAY
4249: PUSH
4250: FOR_TO
4251: IFFALSE 4398
// begin vc_engine = 3 ;
4253: LD_ADDR_OWVAR 39
4257: PUSH
4258: LD_INT 3
4260: ST_TO_ADDR
// vc_control = 3 ;
4261: LD_ADDR_OWVAR 38
4265: PUSH
4266: LD_INT 3
4268: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4269: LD_ADDR_OWVAR 40
4273: PUSH
4274: LD_INT 42
4276: PUSH
4277: LD_INT 43
4279: PUSH
4280: LD_INT 44
4282: PUSH
4283: LD_INT 45
4285: PUSH
4286: LD_INT 46
4288: PUSH
4289: LD_INT 49
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 1
4302: PPUSH
4303: LD_INT 5
4305: PPUSH
4306: CALL_OW 12
4310: ARRAY
4311: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4312: LD_OWVAR 40
4316: PUSH
4317: LD_INT 46
4319: EQUAL
4320: IFFALSE 4332
// vc_chassis = ru_heavy_tracked else
4322: LD_ADDR_OWVAR 37
4326: PUSH
4327: LD_INT 24
4329: ST_TO_ADDR
4330: GO 4359
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4332: LD_ADDR_OWVAR 37
4336: PUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 21
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 1
4349: PPUSH
4350: LD_INT 2
4352: PPUSH
4353: CALL_OW 12
4357: ARRAY
4358: ST_TO_ADDR
// veh = CreateVehicle ;
4359: LD_ADDR_VAR 0 4
4363: PUSH
4364: CALL_OW 45
4368: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4369: LD_VAR 0 4
4373: PPUSH
4374: LD_INT 3
4376: PPUSH
4377: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4381: LD_VAR 0 4
4385: PPUSH
4386: LD_INT 6
4388: PPUSH
4389: LD_INT 0
4391: PPUSH
4392: CALL_OW 49
// end ;
4396: GO 4250
4398: POP
4399: POP
// end ; end_of_file
4400: LD_VAR 0 1
4404: RET
// export function PrepareKurt ; begin
4405: LD_INT 0
4407: PPUSH
// uc_side = 8 ;
4408: LD_ADDR_OWVAR 20
4412: PUSH
4413: LD_INT 8
4415: ST_TO_ADDR
// uc_nation = 2 ;
4416: LD_ADDR_OWVAR 21
4420: PUSH
4421: LD_INT 2
4423: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4424: LD_ADDR_OWVAR 37
4428: PUSH
4429: LD_INT 13
4431: ST_TO_ADDR
// vc_engine = 1 ;
4432: LD_ADDR_OWVAR 39
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// vc_control = 1 ;
4440: LD_ADDR_OWVAR 38
4444: PUSH
4445: LD_INT 1
4447: ST_TO_ADDR
// vc_weapon = 24 ;
4448: LD_ADDR_OWVAR 40
4452: PUSH
4453: LD_INT 24
4455: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4456: LD_ADDR_EXP 25
4460: PUSH
4461: CALL_OW 45
4465: ST_TO_ADDR
// if kurtStatus > 0 then
4466: LD_EXP 26
4470: PUSH
4471: LD_INT 0
4473: GREATER
4474: IFFALSE 4526
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4476: LD_ADDR_EXP 24
4480: PUSH
4481: LD_STRING Kurt
4483: PPUSH
4484: LD_INT 0
4486: PPUSH
4487: LD_STRING 
4489: PPUSH
4490: CALL 36825 0 3
4494: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4495: LD_EXP 25
4499: PPUSH
4500: LD_INT 4
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4510: LD_EXP 24
4514: PPUSH
4515: LD_EXP 25
4519: PPUSH
4520: CALL_OW 52
// end else
4524: GO 4603
// begin hc_name =  ;
4526: LD_ADDR_OWVAR 26
4530: PUSH
4531: LD_STRING 
4533: ST_TO_ADDR
// hc_gallery =  ;
4534: LD_ADDR_OWVAR 33
4538: PUSH
4539: LD_STRING 
4541: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 10
4547: PPUSH
4548: CALL_OW 381
// Kurt = CreateHuman ;
4552: LD_ADDR_EXP 24
4556: PUSH
4557: CALL_OW 44
4561: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4562: LD_EXP 25
4566: PPUSH
4567: LD_INT 4
4569: PPUSH
4570: LD_INT 0
4572: PPUSH
4573: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4577: LD_EXP 24
4581: PPUSH
4582: LD_EXP 25
4586: PPUSH
4587: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4591: LD_EXP 24
4595: PPUSH
4596: LD_STRING AltKurt
4598: PPUSH
4599: CALL_OW 38
// end ; end ;
4603: LD_VAR 0 1
4607: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4608: LD_INT 0
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
// for i = 1 to 3 do
4614: LD_ADDR_VAR 0 2
4618: PUSH
4619: DOUBLE
4620: LD_INT 1
4622: DEC
4623: ST_TO_ADDR
4624: LD_INT 3
4626: PUSH
4627: FOR_TO
4628: IFFALSE 4749
// begin uc_side = 1 ;
4630: LD_ADDR_OWVAR 20
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// uc_nation = 2 ;
4638: LD_ADDR_OWVAR 21
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// hc_gallery =  ;
4646: LD_ADDR_OWVAR 33
4650: PUSH
4651: LD_STRING 
4653: ST_TO_ADDR
// hc_name =  ;
4654: LD_ADDR_OWVAR 26
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4662: LD_EXP 26
4666: PUSH
4667: LD_INT 0
4669: EQUAL
4670: PUSH
4671: LD_EXP 26
4675: PUSH
4676: LD_INT 2
4678: EQUAL
4679: OR
4680: IFFALSE 4697
// PrepareHuman ( false , 1 , 6 ) else
4682: LD_INT 0
4684: PPUSH
4685: LD_INT 1
4687: PPUSH
4688: LD_INT 6
4690: PPUSH
4691: CALL_OW 380
4695: GO 4710
// PrepareHuman ( false , 1 , 8 ) ;
4697: LD_INT 0
4699: PPUSH
4700: LD_INT 1
4702: PPUSH
4703: LD_INT 8
4705: PPUSH
4706: CALL_OW 380
// un = CreateHuman ;
4710: LD_ADDR_VAR 0 3
4714: PUSH
4715: CALL_OW 44
4719: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4720: LD_VAR 0 3
4724: PPUSH
4725: LD_INT 4
4727: PPUSH
4728: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4732: LD_VAR 0 3
4736: PPUSH
4737: LD_INT 4
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 49
// end ;
4747: GO 4627
4749: POP
4750: POP
// vc_chassis = 14 ;
4751: LD_ADDR_OWVAR 37
4755: PUSH
4756: LD_INT 14
4758: ST_TO_ADDR
// vc_engine = 3 ;
4759: LD_ADDR_OWVAR 39
4763: PUSH
4764: LD_INT 3
4766: ST_TO_ADDR
// vc_control = 1 ;
4767: LD_ADDR_OWVAR 38
4771: PUSH
4772: LD_INT 1
4774: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4775: LD_ADDR_OWVAR 40
4779: PUSH
4780: LD_INT 27
4782: PUSH
4783: LD_INT 26
4785: PUSH
4786: LD_INT 28
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: LIST
4793: PUSH
4794: LD_INT 1
4796: PPUSH
4797: LD_INT 3
4799: PPUSH
4800: CALL_OW 12
4804: ARRAY
4805: ST_TO_ADDR
// veh = CreateVehicle ;
4806: LD_ADDR_VAR 0 4
4810: PUSH
4811: CALL_OW 45
4815: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4816: LD_VAR 0 4
4820: PPUSH
4821: LD_INT 4
4823: PPUSH
4824: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4828: LD_VAR 0 4
4832: PPUSH
4833: LD_INT 4
4835: PPUSH
4836: LD_INT 0
4838: PPUSH
4839: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4843: LD_EXP 26
4847: PUSH
4848: LD_INT 0
4850: EQUAL
4851: PUSH
4852: LD_EXP 26
4856: PUSH
4857: LD_INT 2
4859: EQUAL
4860: OR
4861: IFFALSE 4878
// PrepareHuman ( false , 3 , 6 ) else
4863: LD_INT 0
4865: PPUSH
4866: LD_INT 3
4868: PPUSH
4869: LD_INT 6
4871: PPUSH
4872: CALL_OW 380
4876: GO 4891
// PrepareHuman ( false , 3 , 8 ) ;
4878: LD_INT 0
4880: PPUSH
4881: LD_INT 3
4883: PPUSH
4884: LD_INT 8
4886: PPUSH
4887: CALL_OW 380
// un = CreateHuman ;
4891: LD_ADDR_VAR 0 3
4895: PUSH
4896: CALL_OW 44
4900: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4901: LD_VAR 0 3
4905: PPUSH
4906: LD_VAR 0 4
4910: PPUSH
4911: CALL_OW 52
// vc_chassis = 14 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 14
4922: ST_TO_ADDR
// vc_engine = 3 ;
4923: LD_ADDR_OWVAR 39
4927: PUSH
4928: LD_INT 3
4930: ST_TO_ADDR
// vc_control = 1 ;
4931: LD_ADDR_OWVAR 38
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4939: LD_ADDR_OWVAR 40
4943: PUSH
4944: LD_INT 27
4946: PUSH
4947: LD_INT 26
4949: PUSH
4950: LD_INT 28
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 3
4963: PPUSH
4964: CALL_OW 12
4968: ARRAY
4969: ST_TO_ADDR
// veh = CreateVehicle ;
4970: LD_ADDR_VAR 0 4
4974: PUSH
4975: CALL_OW 45
4979: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4980: LD_VAR 0 4
4984: PPUSH
4985: LD_INT 4
4987: PPUSH
4988: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4992: LD_VAR 0 4
4996: PPUSH
4997: LD_INT 4
4999: PPUSH
5000: LD_INT 0
5002: PPUSH
5003: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5007: LD_EXP 26
5011: PUSH
5012: LD_INT 0
5014: EQUAL
5015: PUSH
5016: LD_EXP 26
5020: PUSH
5021: LD_INT 2
5023: EQUAL
5024: OR
5025: IFFALSE 5042
// PrepareHuman ( false , 4 , 6 ) else
5027: LD_INT 0
5029: PPUSH
5030: LD_INT 4
5032: PPUSH
5033: LD_INT 6
5035: PPUSH
5036: CALL_OW 380
5040: GO 5055
// PrepareHuman ( false , 4 , 8 ) ;
5042: LD_INT 0
5044: PPUSH
5045: LD_INT 4
5047: PPUSH
5048: LD_INT 8
5050: PPUSH
5051: CALL_OW 380
// un = CreateHuman ;
5055: LD_ADDR_VAR 0 3
5059: PUSH
5060: CALL_OW 44
5064: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5065: LD_VAR 0 3
5069: PPUSH
5070: LD_INT 4
5072: PPUSH
5073: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5077: LD_VAR 0 3
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 52
// vc_chassis = 14 ;
5091: LD_ADDR_OWVAR 37
5095: PUSH
5096: LD_INT 14
5098: ST_TO_ADDR
// vc_engine = 3 ;
5099: LD_ADDR_OWVAR 39
5103: PUSH
5104: LD_INT 3
5106: ST_TO_ADDR
// vc_control = 1 ;
5107: LD_ADDR_OWVAR 38
5111: PUSH
5112: LD_INT 1
5114: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5115: LD_ADDR_OWVAR 40
5119: PUSH
5120: LD_INT 27
5122: PUSH
5123: LD_INT 26
5125: PUSH
5126: LD_INT 28
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 1
5136: PPUSH
5137: LD_INT 3
5139: PPUSH
5140: CALL_OW 12
5144: ARRAY
5145: ST_TO_ADDR
// veh = CreateVehicle ;
5146: LD_ADDR_VAR 0 4
5150: PUSH
5151: CALL_OW 45
5155: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5156: LD_VAR 0 4
5160: PPUSH
5161: LD_INT 4
5163: PPUSH
5164: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5168: LD_VAR 0 4
5172: PPUSH
5173: LD_INT 4
5175: PPUSH
5176: LD_INT 0
5178: PPUSH
5179: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5183: LD_EXP 26
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: PUSH
5192: LD_EXP 26
5196: PUSH
5197: LD_INT 2
5199: EQUAL
5200: OR
5201: IFFALSE 5218
// PrepareHuman ( false , 2 , 4 ) else
5203: LD_INT 0
5205: PPUSH
5206: LD_INT 2
5208: PPUSH
5209: LD_INT 4
5211: PPUSH
5212: CALL_OW 380
5216: GO 5231
// PrepareHuman ( false , 2 , 8 ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_INT 2
5223: PPUSH
5224: LD_INT 8
5226: PPUSH
5227: CALL_OW 380
// un = CreateHuman ;
5231: LD_ADDR_VAR 0 3
5235: PUSH
5236: CALL_OW 44
5240: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5241: LD_VAR 0 3
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5253: LD_VAR 0 3
5257: PPUSH
5258: LD_VAR 0 4
5262: PPUSH
5263: CALL_OW 52
// end ;
5267: LD_VAR 0 1
5271: RET
// export function PrepareAttackLegion ; var i , un ; begin
5272: LD_INT 0
5274: PPUSH
5275: PPUSH
5276: PPUSH
// for i = 1 to 4 do
5277: LD_ADDR_VAR 0 2
5281: PUSH
5282: DOUBLE
5283: LD_INT 1
5285: DEC
5286: ST_TO_ADDR
5287: LD_INT 4
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5401
// begin uc_side = 8 ;
5293: LD_ADDR_OWVAR 20
5297: PUSH
5298: LD_INT 8
5300: ST_TO_ADDR
// uc_nation = 2 ;
5301: LD_ADDR_OWVAR 21
5305: PUSH
5306: LD_INT 2
5308: ST_TO_ADDR
// hc_gallery =  ;
5309: LD_ADDR_OWVAR 33
5313: PUSH
5314: LD_STRING 
5316: ST_TO_ADDR
// hc_name =  ;
5317: LD_ADDR_OWVAR 26
5321: PUSH
5322: LD_STRING 
5324: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5325: LD_INT 0
5327: PPUSH
5328: LD_INT 1
5330: PUSH
5331: LD_INT 8
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: PUSH
5338: LD_INT 1
5340: PPUSH
5341: LD_INT 2
5343: PPUSH
5344: CALL_OW 12
5348: ARRAY
5349: PPUSH
5350: LD_INT 6
5352: PPUSH
5353: LD_INT 8
5355: PPUSH
5356: CALL_OW 12
5360: PPUSH
5361: CALL_OW 380
// un = CreateHuman ;
5365: LD_ADDR_VAR 0 3
5369: PUSH
5370: CALL_OW 44
5374: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5375: LD_VAR 0 3
5379: PPUSH
5380: LD_INT 19
5382: PPUSH
5383: LD_INT 0
5385: PPUSH
5386: CALL_OW 49
// ComCrawl ( un ) ;
5390: LD_VAR 0 3
5394: PPUSH
5395: CALL_OW 137
// end ;
5399: GO 5290
5401: POP
5402: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5403: LD_INT 1
5405: PPUSH
5406: LD_INT 8
5408: PPUSH
5409: LD_INT 2
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5419: LD_INT 20
5421: PPUSH
5422: LD_INT 3
5424: PPUSH
5425: CALL 14923 0 2
// end ; end_of_file
5429: LD_VAR 0 1
5433: RET
// every 1 do var i ;
5434: GO 5436
5436: DISABLE
5437: LD_INT 0
5439: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5440: LD_INT 10
5442: PPUSH
5443: LD_INT 122
5445: PPUSH
5446: LD_INT 145
5448: PPUSH
5449: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5453: LD_INT 137
5455: PPUSH
5456: LD_INT 84
5458: PPUSH
5459: LD_INT 61
5461: PPUSH
5462: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5466: LD_EXP 1
5470: PPUSH
5471: CALL_OW 310
5475: PPUSH
5476: CALL_OW 87
// InGameOn ;
5480: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5484: LD_INT 22
5486: PUSH
5487: LD_INT 1
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PPUSH
5494: CALL_OW 69
5498: PPUSH
5499: LD_INT 130
5501: PPUSH
5502: LD_INT 103
5504: PPUSH
5505: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5509: LD_VAR 0 1
5513: PPUSH
5514: LD_INT 114
5516: PPUSH
5517: LD_INT 102
5519: PPUSH
5520: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5524: LD_EXP 1
5528: PPUSH
5529: LD_STRING D1-JMM-1
5531: PPUSH
5532: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5536: LD_EXP 1
5540: PPUSH
5541: CALL_OW 310
5545: PPUSH
5546: CALL_OW 87
// if IsOk ( Donaldson ) then
5550: LD_EXP 3
5554: PPUSH
5555: CALL_OW 302
5559: IFFALSE 5639
// begin Say ( Donaldson , D1-Don-1 ) ;
5561: LD_EXP 3
5565: PPUSH
5566: LD_STRING D1-Don-1
5568: PPUSH
5569: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5573: LD_EXP 1
5577: PPUSH
5578: CALL_OW 310
5582: PPUSH
5583: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5587: LD_EXP 1
5591: PPUSH
5592: LD_STRING D1-JMM-2
5594: PPUSH
5595: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5599: LD_EXP 1
5603: PPUSH
5604: CALL_OW 310
5608: PPUSH
5609: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5613: LD_EXP 3
5617: PPUSH
5618: LD_STRING D1-Don-2
5620: PPUSH
5621: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5625: LD_EXP 1
5629: PPUSH
5630: CALL_OW 310
5634: PPUSH
5635: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5639: LD_INT 22
5641: PUSH
5642: LD_INT 1
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 69
5653: PPUSH
5654: LD_INT 110
5656: PPUSH
5657: LD_INT 101
5659: PPUSH
5660: CALL_OW 171
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// wait ( 0 0$1 ) ;
5706: LD_INT 35
5708: PPUSH
5709: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5713: LD_EXP 1
5717: PPUSH
5718: CALL_OW 310
5722: PPUSH
5723: CALL_OW 87
// wait ( 0 0$1 ) ;
5727: LD_INT 35
5729: PPUSH
5730: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5734: LD_EXP 1
5738: PPUSH
5739: CALL_OW 310
5743: PPUSH
5744: CALL_OW 87
// end ;
5748: PPOPN 1
5750: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5751: LD_INT 1
5753: PPUSH
5754: LD_INT 102
5756: PPUSH
5757: LD_INT 94
5759: PPUSH
5760: CALL_OW 293
5764: IFFALSE 5955
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5772: LD_INT 102
5774: PPUSH
5775: LD_INT 94
5777: PPUSH
5778: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5782: LD_INT 22
5784: PUSH
5785: LD_INT 1
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 26
5794: PUSH
5795: LD_INT 1
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: PUSH
5802: LD_INT 2
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: LD_INT 25
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: EMPTY
5822: LIST
5823: LIST
5824: PUSH
5825: LD_INT 25
5827: PUSH
5828: LD_INT 3
5830: PUSH
5831: EMPTY
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 25
5837: PUSH
5838: LD_INT 4
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 25
5847: PUSH
5848: LD_INT 5
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: LD_INT 25
5857: PUSH
5858: LD_INT 8
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: LIST
5878: PPUSH
5879: CALL_OW 69
5883: PPUSH
5884: LD_STRING D1-Sol1-2
5886: PPUSH
5887: LD_STRING 
5889: PPUSH
5890: CALL 12328 0 3
// Say ( JMM , D1-JMM-3 ) ;
5894: LD_EXP 1
5898: PPUSH
5899: LD_STRING D1-JMM-3
5901: PPUSH
5902: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5906: LD_STRING M1
5908: PPUSH
5909: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5913: LD_ADDR_VAR 0 1
5917: PUSH
5918: LD_INT 22
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 69
5932: PUSH
5933: FOR_IN
5934: IFFALSE 5953
// ComMoveXY ( i , 95 , 84 ) ;
5936: LD_VAR 0 1
5940: PPUSH
5941: LD_INT 95
5943: PPUSH
5944: LD_INT 84
5946: PPUSH
5947: CALL_OW 111
5951: GO 5933
5953: POP
5954: POP
// end ;
5955: PPOPN 1
5957: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5958: GO 5960
5960: DISABLE
5961: LD_INT 0
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: LD_INT 8
5974: PPUSH
5975: LD_INT 22
5977: PUSH
5978: LD_INT 3
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 25
5987: PUSH
5988: LD_INT 9
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 70
6003: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6004: LD_ADDR_VAR 0 3
6008: PUSH
6009: LD_INT 22
6011: PUSH
6012: LD_INT 1
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: PUSH
6019: EMPTY
6020: LIST
6021: PPUSH
6022: CALL_OW 69
6026: ST_TO_ADDR
// enable ;
6027: ENABLE
// for i in your_units do
6028: LD_ADDR_VAR 0 1
6032: PUSH
6033: LD_VAR 0 3
6037: PUSH
6038: FOR_IN
6039: IFFALSE 6705
// begin if See ( 3 , i ) then
6041: LD_INT 3
6043: PPUSH
6044: LD_VAR 0 1
6048: PPUSH
6049: CALL_OW 292
6053: IFFALSE 6703
// begin disable ;
6055: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6056: LD_VAR 0 2
6060: PPUSH
6061: LD_INT 96
6063: PPUSH
6064: LD_INT 85
6066: PPUSH
6067: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_INT 96
6078: PPUSH
6079: LD_INT 85
6081: PPUSH
6082: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6086: LD_VAR 0 2
6090: PPUSH
6091: LD_INT 96
6093: PPUSH
6094: LD_INT 85
6096: PPUSH
6097: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6101: LD_VAR 0 2
6105: PPUSH
6106: LD_INT 96
6108: PPUSH
6109: LD_INT 85
6111: PPUSH
6112: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_INT 96
6123: PPUSH
6124: LD_INT 85
6126: PPUSH
6127: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6131: LD_VAR 0 2
6135: PPUSH
6136: LD_INT 96
6138: PPUSH
6139: LD_INT 85
6141: PPUSH
6142: CALL_OW 214
// wait ( 0 0$2 ) ;
6146: LD_INT 70
6148: PPUSH
6149: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6153: LD_EXP 1
6157: PPUSH
6158: LD_STRING D1a-JMM-1
6160: PPUSH
6161: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1a-Don-1
6172: PPUSH
6173: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6177: LD_ADDR_VAR 0 1
6181: PUSH
6182: LD_INT 22
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PPUSH
6192: CALL_OW 69
6196: PUSH
6197: FOR_IN
6198: IFFALSE 6217
// ComMoveXY ( i , 109 , 102 ) ;
6200: LD_VAR 0 1
6204: PPUSH
6205: LD_INT 109
6207: PPUSH
6208: LD_INT 102
6210: PPUSH
6211: CALL_OW 111
6215: GO 6197
6217: POP
6218: POP
// Say ( JMM , D1a-JMM-2 ) ;
6219: LD_EXP 1
6223: PPUSH
6224: LD_STRING D1a-JMM-2
6226: PPUSH
6227: CALL_OW 88
// wait ( 0 0$10 ) ;
6231: LD_INT 350
6233: PPUSH
6234: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6238: LD_EXP 1
6242: PPUSH
6243: CALL_OW 310
6247: PPUSH
6248: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6252: LD_EXP 3
6256: PPUSH
6257: LD_STRING D1b-Don-1
6259: PPUSH
6260: CALL_OW 88
// if IsOk ( Donaldson ) then
6264: LD_EXP 3
6268: PPUSH
6269: CALL_OW 302
6273: IFFALSE 6287
// Say ( JMM , D1b-JMM-1 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D1b-JMM-1
6282: PPUSH
6283: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6287: LD_INT 22
6289: PUSH
6290: LD_INT 1
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: LD_INT 26
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: LD_INT 25
6312: PUSH
6313: LD_INT 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 25
6322: PUSH
6323: LD_INT 2
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: LD_INT 25
6332: PUSH
6333: LD_INT 3
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: PUSH
6340: LD_INT 25
6342: PUSH
6343: LD_INT 4
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: PUSH
6350: LD_INT 25
6352: PUSH
6353: LD_INT 5
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: PUSH
6360: LD_INT 25
6362: PUSH
6363: LD_INT 8
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: PPUSH
6384: CALL_OW 69
6388: PPUSH
6389: LD_STRING D1b-Sol1-1
6391: PPUSH
6392: LD_STRING 
6394: PPUSH
6395: CALL 12328 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6399: LD_EXP 3
6403: PPUSH
6404: LD_STRING D1b-Don-2
6406: PPUSH
6407: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6411: LD_EXP 1
6415: PPUSH
6416: LD_STRING D1b-JMM-2
6418: PPUSH
6419: CALL_OW 88
// dec = ShowQuery1 ;
6423: LD_ADDR_VAR 0 4
6427: PUSH
6428: CALL 12797 0 0
6432: ST_TO_ADDR
// if dec = 1 then
6433: LD_VAR 0 4
6437: PUSH
6438: LD_INT 1
6440: EQUAL
6441: IFFALSE 6547
// begin Say ( JMM , D2-JMM-1 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2-JMM-1
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6455: LD_EXP 22
6459: PPUSH
6460: LD_STRING D2-Pow-1
6462: PPUSH
6463: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6467: LD_EXP 1
6471: PPUSH
6472: LD_STRING D2a-JMM-1
6474: PPUSH
6475: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6479: LD_EXP 22
6483: PPUSH
6484: LD_STRING D2a-Pow-1
6486: PPUSH
6487: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6491: LD_EXP 1
6495: PPUSH
6496: LD_STRING D2a-JMM-2
6498: PPUSH
6499: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6503: LD_EXP 22
6507: PPUSH
6508: LD_STRING D2a-Pow-2
6510: PPUSH
6511: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2a-JMM-3
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2a-Pow-3
6534: PPUSH
6535: CALL_OW 94
// secondPass = 2 ;
6539: LD_ADDR_EXP 27
6543: PUSH
6544: LD_INT 2
6546: ST_TO_ADDR
// end ; if dec = 2 then
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: EQUAL
6555: IFFALSE 6649
// begin Say ( JMM , D2-JMM-1 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2-JMM-1
6564: PPUSH
6565: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6569: LD_EXP 22
6573: PPUSH
6574: LD_STRING D2-Pow-1
6576: PPUSH
6577: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6581: LD_EXP 1
6585: PPUSH
6586: LD_STRING D2b-JMM-1
6588: PPUSH
6589: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6593: LD_EXP 22
6597: PPUSH
6598: LD_STRING D2b-Pow-1
6600: PPUSH
6601: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6605: LD_EXP 1
6609: PPUSH
6610: LD_STRING D2c-JMM-1
6612: PPUSH
6613: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6617: LD_EXP 22
6621: PPUSH
6622: LD_STRING D2c-Pow-1
6624: PPUSH
6625: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6629: LD_EXP 1
6633: PPUSH
6634: LD_STRING D2c-JMM-2
6636: PPUSH
6637: CALL_OW 88
// secondPass = 2 ;
6641: LD_ADDR_EXP 27
6645: PUSH
6646: LD_INT 2
6648: ST_TO_ADDR
// end ; if dec = 3 then
6649: LD_VAR 0 4
6653: PUSH
6654: LD_INT 3
6656: EQUAL
6657: IFFALSE 6667
// secondPass = 1 ;
6659: LD_ADDR_EXP 27
6663: PUSH
6664: LD_INT 1
6666: ST_TO_ADDR
// InGameOff ;
6667: CALL_OW 9
// ruAI = 1 ;
6671: LD_ADDR_EXP 41
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6679: LD_INT 1
6681: PPUSH
6682: LD_INT 3
6684: PPUSH
6685: LD_INT 2
6687: PPUSH
6688: LD_INT 1
6690: PPUSH
6691: CALL_OW 80
// SaveForQuickRestart ;
6695: CALL_OW 22
// exit ;
6699: POP
6700: POP
6701: GO 6707
// end ; end ;
6703: GO 6038
6705: POP
6706: POP
// end ;
6707: PPOPN 4
6709: END
// every 1 1$0 trigger secondPass = 2 do
6710: LD_EXP 27
6714: PUSH
6715: LD_INT 2
6717: EQUAL
6718: IFFALSE 6938
6720: GO 6722
6722: DISABLE
// begin PowellSupport1 ;
6723: CALL 1970 0 0
// DialogueOn ;
6727: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6731: LD_EXP 1
6735: PPUSH
6736: LD_STRING DC1-JMM-1
6738: PPUSH
6739: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6743: LD_EXP 22
6747: PPUSH
6748: LD_STRING DC1-Pow-1
6750: PPUSH
6751: CALL_OW 94
// DialogueOff ;
6755: CALL_OW 7
// wait ( 3 3$0 ) ;
6759: LD_INT 6300
6761: PPUSH
6762: CALL_OW 67
// PowellSupport2 ;
6766: CALL 2435 0 0
// DialogueOn ;
6770: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6774: LD_EXP 1
6778: PPUSH
6779: LD_STRING DC2-JMM-1
6781: PPUSH
6782: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6786: LD_EXP 22
6790: PPUSH
6791: LD_STRING DC2-Pow-1
6793: PPUSH
6794: CALL_OW 94
// DialogueOff ;
6798: CALL_OW 7
// wait ( 3 3$00 ) ;
6802: LD_INT 6300
6804: PPUSH
6805: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6809: LD_INT 35
6811: PPUSH
6812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6816: LD_INT 22
6818: PUSH
6819: LD_INT 1
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: LD_INT 2
6828: PUSH
6829: LD_INT 30
6831: PUSH
6832: LD_INT 0
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 30
6841: PUSH
6842: LD_INT 1
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: LIST
6853: PUSH
6854: EMPTY
6855: LIST
6856: LIST
6857: PPUSH
6858: CALL_OW 69
6862: PUSH
6863: LD_INT 11
6865: PPUSH
6866: LD_INT 22
6868: PUSH
6869: LD_INT 3
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PPUSH
6876: CALL_OW 70
6880: NOT
6881: AND
6882: IFFALSE 6809
// wait ( 0 0$10 ) ;
6884: LD_INT 350
6886: PPUSH
6887: CALL_OW 67
// Legion ;
6891: CALL 6939 0 0
// wait ( 6 6$0 ) ;
6895: LD_INT 12600
6897: PPUSH
6898: CALL_OW 67
// PowellSupport3 ;
6902: CALL 2975 0 0
// DialogueOn ;
6906: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6910: LD_EXP 22
6914: PPUSH
6915: LD_STRING DC3-Pow-1
6917: PPUSH
6918: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6922: LD_EXP 1
6926: PPUSH
6927: LD_STRING DC3-JMM-1
6929: PPUSH
6930: CALL_OW 88
// DialogueOff ;
6934: CALL_OW 7
// end ;
6938: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6939: LD_INT 0
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
6945: PPUSH
6946: PPUSH
6947: PPUSH
6948: PPUSH
6949: PPUSH
6950: PPUSH
6951: PPUSH
6952: PPUSH
6953: PPUSH
6954: PPUSH
6955: PPUSH
6956: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6957: LD_ADDR_VAR 0 5
6961: PUSH
6962: LD_INT 22
6964: PUSH
6965: LD_INT 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 3
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 0
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 1
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: EMPTY
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 69
7019: ST_TO_ADDR
// crates := 0 ;
7020: LD_ADDR_VAR 0 8
7024: PUSH
7025: LD_INT 0
7027: ST_TO_ADDR
// oil := 0 ;
7028: LD_ADDR_VAR 0 9
7032: PUSH
7033: LD_INT 0
7035: ST_TO_ADDR
// siberite := 0 ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// payForNeutral := false ;
7044: LD_ADDR_VAR 0 13
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// payForHelp := false ;
7052: LD_ADDR_VAR 0 14
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// for i in tmp do
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_VAR 0 5
7069: PUSH
7070: FOR_IN
7071: IFFALSE 7162
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7073: LD_ADDR_VAR 0 8
7077: PUSH
7078: LD_VAR 0 8
7082: PUSH
7083: LD_VAR 0 2
7087: PPUSH
7088: CALL_OW 274
7092: PPUSH
7093: LD_INT 1
7095: PPUSH
7096: CALL_OW 275
7100: PLUS
7101: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7102: LD_ADDR_VAR 0 9
7106: PUSH
7107: LD_VAR 0 9
7111: PUSH
7112: LD_VAR 0 2
7116: PPUSH
7117: CALL_OW 274
7121: PPUSH
7122: LD_INT 2
7124: PPUSH
7125: CALL_OW 275
7129: PLUS
7130: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7131: LD_ADDR_VAR 0 10
7135: PUSH
7136: LD_VAR 0 10
7140: PUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 274
7150: PPUSH
7151: LD_INT 3
7153: PPUSH
7154: CALL_OW 275
7158: PLUS
7159: ST_TO_ADDR
// end ;
7160: GO 7070
7162: POP
7163: POP
// PrepareKurt ;
7164: CALL 4405 0 0
// if not Kurt then
7168: LD_EXP 24
7172: NOT
7173: IFFALSE 7177
// exit ;
7175: GO 9309
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7177: LD_EXP 25
7181: PPUSH
7182: LD_INT 144
7184: PPUSH
7185: LD_INT 111
7187: PPUSH
7188: CALL_OW 111
// wait ( 0 0$2 ) ;
7192: LD_INT 70
7194: PPUSH
7195: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7199: LD_INT 167
7201: PPUSH
7202: LD_INT 121
7204: PPUSH
7205: LD_INT 1
7207: PPUSH
7208: LD_INT 10
7210: NEG
7211: PPUSH
7212: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7216: LD_EXP 24
7220: PPUSH
7221: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7225: LD_EXP 24
7229: PPUSH
7230: CALL_OW 87
// wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// DialogueOn ;
7241: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7245: LD_INT 22
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 26
7257: PUSH
7258: LD_INT 1
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 2
7267: PUSH
7268: LD_INT 25
7270: PUSH
7271: LD_INT 1
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 25
7280: PUSH
7281: LD_INT 2
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 25
7290: PUSH
7291: LD_INT 3
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 25
7300: PUSH
7301: LD_INT 4
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: PUSH
7308: LD_INT 25
7310: PUSH
7311: LD_INT 5
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 25
7320: PUSH
7321: LD_INT 8
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL_OW 69
7346: PPUSH
7347: LD_STRING D3-Sol1-1
7349: PPUSH
7350: LD_STRING 
7352: PPUSH
7353: CALL 12328 0 3
// if KurtStatus then
7357: LD_EXP 26
7361: IFFALSE 7461
// begin Say ( Kurt , D3-Kurt-1 ) ;
7363: LD_EXP 24
7367: PPUSH
7368: LD_STRING D3-Kurt-1
7370: PPUSH
7371: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7375: LD_EXP 1
7379: PPUSH
7380: LD_STRING D3-JMM-1
7382: PPUSH
7383: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7387: LD_EXP 24
7391: PPUSH
7392: LD_STRING D3-Kurt-2
7394: PPUSH
7395: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7399: LD_EXP 1
7403: PPUSH
7404: LD_STRING D3-JMM-2
7406: PPUSH
7407: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7411: LD_EXP 24
7415: PPUSH
7416: LD_STRING D3-Kurt-4
7418: PPUSH
7419: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7423: LD_EXP 1
7427: PPUSH
7428: LD_STRING D3-JMM-4
7430: PPUSH
7431: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7435: LD_EXP 24
7439: PPUSH
7440: LD_STRING D3-Kurt-5
7442: PPUSH
7443: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7447: LD_EXP 24
7451: PPUSH
7452: LD_STRING D3-Kurt-5a
7454: PPUSH
7455: CALL_OW 88
// end else
7459: GO 7557
// begin Say ( Kurt , D3-Kurt-1 ) ;
7461: LD_EXP 24
7465: PPUSH
7466: LD_STRING D3-Kurt-1
7468: PPUSH
7469: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7473: LD_EXP 1
7477: PPUSH
7478: LD_STRING D3-JMM-1
7480: PPUSH
7481: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7485: LD_EXP 24
7489: PPUSH
7490: LD_STRING D3-Kurt-3
7492: PPUSH
7493: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7497: LD_EXP 1
7501: PPUSH
7502: LD_STRING D3-JMM-3
7504: PPUSH
7505: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7509: LD_EXP 24
7513: PPUSH
7514: LD_STRING D3-Kurt-4
7516: PPUSH
7517: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7521: LD_EXP 1
7525: PPUSH
7526: LD_STRING D3-JMM-4
7528: PPUSH
7529: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7533: LD_EXP 24
7537: PPUSH
7538: LD_STRING D3-Kurt-5
7540: PPUSH
7541: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7545: LD_EXP 24
7549: PPUSH
7550: LD_STRING D3-Kurt-5b
7552: PPUSH
7553: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7557: LD_VAR 0 8
7561: PUSH
7562: LD_INT 120
7564: PUSH
7565: LD_INT 60
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_EXP 26
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ARRAY
7581: GREATEREQUAL
7582: PUSH
7583: LD_VAR 0 10
7587: PUSH
7588: LD_INT 120
7590: PUSH
7591: LD_INT 60
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PUSH
7598: LD_EXP 26
7602: PUSH
7603: LD_INT 1
7605: PLUS
7606: ARRAY
7607: GREATEREQUAL
7608: AND
7609: IFFALSE 7661
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7611: LD_ADDR_VAR 0 3
7615: PUSH
7616: LD_STRING Q2
7618: PUSH
7619: LD_STRING Q2K
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_EXP 26
7630: PUSH
7631: LD_INT 1
7633: PLUS
7634: ARRAY
7635: PPUSH
7636: LD_INT 1
7638: PUSH
7639: LD_INT 2
7641: PUSH
7642: LD_INT 3
7644: PUSH
7645: LD_INT 4
7647: PUSH
7648: EMPTY
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 98
7658: ST_TO_ADDR
7659: GO 7705
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7661: LD_ADDR_VAR 0 3
7665: PUSH
7666: LD_STRING Q2
7668: PUSH
7669: LD_STRING Q2K
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_EXP 26
7680: PUSH
7681: LD_INT 1
7683: PLUS
7684: ARRAY
7685: PPUSH
7686: LD_INT 1
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: LD_INT 4
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 98
7704: ST_TO_ADDR
// if dec1 = 1 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 1
7712: EQUAL
7713: IFFALSE 7747
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Ka-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Ka-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// warWithLegion = 1 ;
7739: LD_ADDR_EXP 30
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// end ; if dec1 = 2 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: IFFALSE 7839
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7757: LD_EXP 1
7761: PPUSH
7762: LD_STRING D3Kb-JMM-1
7764: PPUSH
7765: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7769: LD_EXP 24
7773: PPUSH
7774: LD_STRING D3Kb-Kurt-1
7776: PPUSH
7777: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7781: LD_ADDR_VAR 0 11
7785: PUSH
7786: LD_INT 120
7788: PUSH
7789: LD_INT 60
7791: PUSH
7792: EMPTY
7793: LIST
7794: LIST
7795: PUSH
7796: LD_EXP 26
7800: PUSH
7801: LD_INT 1
7803: PLUS
7804: ARRAY
7805: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7806: LD_ADDR_VAR 0 12
7810: PUSH
7811: LD_INT 120
7813: PUSH
7814: LD_INT 60
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: PUSH
7821: LD_EXP 26
7825: PUSH
7826: LD_INT 1
7828: PLUS
7829: ARRAY
7830: ST_TO_ADDR
// payForNeutral := true ;
7831: LD_ADDR_VAR 0 13
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// end ; if dec1 = 3 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 3
7846: EQUAL
7847: IFFALSE 8082
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7849: LD_EXP 1
7853: PPUSH
7854: LD_STRING D3Kc1-JMM-1
7856: PPUSH
7857: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7861: LD_EXP 24
7865: PPUSH
7866: LD_STRING D3Kc1-Kurt-1
7868: PPUSH
7869: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7873: LD_EXP 1
7877: PPUSH
7878: LD_STRING D3Kc1-JMM-2
7880: PPUSH
7881: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7885: LD_EXP 24
7889: PPUSH
7890: LD_STRING D3Kc1-Kurt-2
7892: PPUSH
7893: CALL_OW 88
// askSiberite = 1 ;
7897: LD_ADDR_EXP 32
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7905: LD_ADDR_VAR 0 4
7909: PUSH
7910: LD_STRING Q2b
7912: PPUSH
7913: LD_INT 1
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: PPUSH
7927: CALL_OW 98
7931: ST_TO_ADDR
// if dec2 = 1 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 1
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4a-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4a-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 2 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 2
7981: EQUAL
7982: IFFALSE 8016
// begin Say ( JMM , D4b-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4b-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4b-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// warWithLegion = 1 ;
8008: LD_ADDR_EXP 30
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// end ; if dec2 = 3 then
8016: LD_VAR 0 4
8020: PUSH
8021: LD_INT 3
8023: EQUAL
8024: IFFALSE 8082
// begin Say ( JMM , D4c-JMM-1 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D4c-JMM-1
8033: PPUSH
8034: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8038: LD_EXP 24
8042: PPUSH
8043: LD_STRING D4c-Kurt-1
8045: PPUSH
8046: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D4c-JMM-2
8057: PPUSH
8058: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8062: LD_EXP 24
8066: PPUSH
8067: LD_STRING D4c-Kurt-2
8069: PPUSH
8070: CALL_OW 88
// fakeInfo = 1 ;
8074: LD_ADDR_EXP 31
8078: PUSH
8079: LD_INT 1
8081: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 4
8089: EQUAL
8090: IFFALSE 9165
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8092: LD_EXP 1
8096: PPUSH
8097: LD_STRING D3Kd-JMM-1
8099: PPUSH
8100: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8104: LD_VAR 0 8
8108: PUSH
8109: LD_INT 200
8111: PUSH
8112: LD_INT 120
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: LD_EXP 26
8123: PUSH
8124: LD_INT 1
8126: PLUS
8127: ARRAY
8128: GREATEREQUAL
8129: PUSH
8130: LD_VAR 0 10
8134: PUSH
8135: LD_INT 200
8137: PUSH
8138: LD_INT 120
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_EXP 26
8149: PUSH
8150: LD_INT 1
8152: PLUS
8153: ARRAY
8154: GREATEREQUAL
8155: AND
8156: IFFALSE 8208
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8158: LD_ADDR_VAR 0 4
8162: PUSH
8163: LD_STRING Q2a
8165: PUSH
8166: LD_STRING Q2aK
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_EXP 26
8177: PUSH
8178: LD_INT 1
8180: PLUS
8181: ARRAY
8182: PPUSH
8183: LD_INT 1
8185: PUSH
8186: LD_INT 2
8188: PUSH
8189: LD_INT 3
8191: PUSH
8192: LD_INT 4
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 98
8205: ST_TO_ADDR
8206: GO 8385
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8208: LD_VAR 0 8
8212: PUSH
8213: LD_INT 120
8215: PUSH
8216: LD_INT 60
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 26
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: GREATEREQUAL
8233: PUSH
8234: LD_VAR 0 10
8238: PUSH
8239: LD_INT 120
8241: PUSH
8242: LD_INT 60
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: LD_EXP 26
8253: PUSH
8254: LD_INT 1
8256: PLUS
8257: ARRAY
8258: GREATEREQUAL
8259: AND
8260: IFFALSE 8308
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8262: LD_ADDR_VAR 0 4
8266: PUSH
8267: LD_STRING Q2a
8269: PUSH
8270: LD_STRING Q2aK
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_EXP 26
8281: PUSH
8282: LD_INT 1
8284: PLUS
8285: ARRAY
8286: PPUSH
8287: LD_INT 1
8289: PUSH
8290: LD_INT 2
8292: PUSH
8293: LD_INT 4
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 98
8305: ST_TO_ADDR
8306: GO 8385
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8308: LD_STRING Q2d
8310: PUSH
8311: LD_STRING Q2dK
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: PUSH
8318: LD_EXP 26
8322: PUSH
8323: LD_INT 1
8325: PLUS
8326: ARRAY
8327: PPUSH
8328: CALL_OW 97
8332: PUSH
8333: LD_INT 1
8335: DOUBLE
8336: EQUAL
8337: IFTRUE 8341
8339: GO 8344
8341: POP
// ; end ;
8342: GO 8345
8344: POP
// dec2 := 0 ;
8345: LD_ADDR_VAR 0 4
8349: PUSH
8350: LD_INT 0
8352: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D3Kc1-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8365: LD_EXP 24
8369: PPUSH
8370: LD_STRING D3Kc2-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion := 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 1 then
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 1
8392: EQUAL
8393: IFFALSE 8427
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D5Ka-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8407: LD_EXP 24
8411: PPUSH
8412: LD_STRING D5Ka-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// warWithLegion = 1 ;
8419: LD_ADDR_EXP 30
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// end ; if dec2 = 2 then
8427: LD_VAR 0 4
8431: PUSH
8432: LD_INT 2
8434: EQUAL
8435: IFFALSE 8519
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8437: LD_EXP 1
8441: PPUSH
8442: LD_STRING D3Kb-JMM-1
8444: PPUSH
8445: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8449: LD_EXP 24
8453: PPUSH
8454: LD_STRING D3Kb-Kurt-1
8456: PPUSH
8457: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8461: LD_ADDR_VAR 0 11
8465: PUSH
8466: LD_INT 120
8468: PUSH
8469: LD_INT 60
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: PUSH
8476: LD_EXP 26
8480: PUSH
8481: LD_INT 1
8483: PLUS
8484: ARRAY
8485: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8486: LD_ADDR_VAR 0 12
8490: PUSH
8491: LD_INT 120
8493: PUSH
8494: LD_INT 60
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: LD_EXP 26
8505: PUSH
8506: LD_INT 1
8508: PLUS
8509: ARRAY
8510: ST_TO_ADDR
// payForNeutral := true ;
8511: LD_ADDR_VAR 0 13
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// end ; if dec2 = 3 then
8519: LD_VAR 0 4
8523: PUSH
8524: LD_INT 3
8526: EQUAL
8527: IFFALSE 8611
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8529: LD_EXP 1
8533: PPUSH
8534: LD_STRING D3Ke-JMM-1
8536: PPUSH
8537: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8541: LD_EXP 24
8545: PPUSH
8546: LD_STRING D3Ke-Kurt-1
8548: PPUSH
8549: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8553: LD_ADDR_VAR 0 11
8557: PUSH
8558: LD_INT 200
8560: PUSH
8561: LD_INT 120
8563: PUSH
8564: EMPTY
8565: LIST
8566: LIST
8567: PUSH
8568: LD_EXP 26
8572: PUSH
8573: LD_INT 1
8575: PLUS
8576: ARRAY
8577: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8578: LD_ADDR_VAR 0 12
8582: PUSH
8583: LD_INT 200
8585: PUSH
8586: LD_INT 120
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_EXP 26
8597: PUSH
8598: LD_INT 1
8600: PLUS
8601: ARRAY
8602: ST_TO_ADDR
// payForHelp := true ;
8603: LD_ADDR_VAR 0 14
8607: PUSH
8608: LD_INT 1
8610: ST_TO_ADDR
// end ; if dec2 = 4 then
8611: LD_VAR 0 4
8615: PUSH
8616: LD_INT 4
8618: EQUAL
8619: IFFALSE 8854
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8621: LD_EXP 1
8625: PPUSH
8626: LD_STRING D3Kc1-JMM-1
8628: PPUSH
8629: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8633: LD_EXP 24
8637: PPUSH
8638: LD_STRING D3Kc1-Kurt-1
8640: PPUSH
8641: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8645: LD_EXP 1
8649: PPUSH
8650: LD_STRING D3Kc1-JMM-2
8652: PPUSH
8653: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8657: LD_EXP 24
8661: PPUSH
8662: LD_STRING D3Kc1-Kurt-2
8664: PPUSH
8665: CALL_OW 88
// askSiberite = 1 ;
8669: LD_ADDR_EXP 32
8673: PUSH
8674: LD_INT 1
8676: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8677: LD_ADDR_VAR 0 4
8681: PUSH
8682: LD_STRING Q2b
8684: PPUSH
8685: LD_INT 1
8687: PUSH
8688: LD_INT 2
8690: PUSH
8691: LD_INT 3
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 98
8703: ST_TO_ADDR
// if dec2 = 1 then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 1
8711: EQUAL
8712: IFFALSE 8746
// begin Say ( JMM , D4a-JMM-1 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4a-JMM-1
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8726: LD_EXP 24
8730: PPUSH
8731: LD_STRING D4b-Kurt-1
8733: PPUSH
8734: CALL_OW 88
// warWithLegion = 1 ;
8738: LD_ADDR_EXP 30
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; if dec2 = 2 then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 2
8753: EQUAL
8754: IFFALSE 8788
// begin Say ( JMM , D4b-JMM-1 ) ;
8756: LD_EXP 1
8760: PPUSH
8761: LD_STRING D4b-JMM-1
8763: PPUSH
8764: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8768: LD_EXP 24
8772: PPUSH
8773: LD_STRING D4b-Kurt-1
8775: PPUSH
8776: CALL_OW 88
// warWithLegion = 1 ;
8780: LD_ADDR_EXP 30
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// end ; if dec2 = 3 then
8788: LD_VAR 0 4
8792: PUSH
8793: LD_INT 3
8795: EQUAL
8796: IFFALSE 8854
// begin Say ( JMM , D4c-JMM-1 ) ;
8798: LD_EXP 1
8802: PPUSH
8803: LD_STRING D4c-JMM-1
8805: PPUSH
8806: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8810: LD_EXP 24
8814: PPUSH
8815: LD_STRING D4c-Kurt-1
8817: PPUSH
8818: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8822: LD_EXP 1
8826: PPUSH
8827: LD_STRING D4c-JMM-2
8829: PPUSH
8830: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8834: LD_EXP 24
8838: PPUSH
8839: LD_STRING D4c-Kurt-2
8841: PPUSH
8842: CALL_OW 88
// fakeInfo = 1 ;
8846: LD_ADDR_EXP 31
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8854: LD_VAR 0 13
8858: PUSH
8859: LD_VAR 0 14
8863: OR
8864: IFFALSE 9165
// begin for i in tmp do
8866: LD_ADDR_VAR 0 2
8870: PUSH
8871: LD_VAR 0 5
8875: PUSH
8876: FOR_IN
8877: IFFALSE 9163
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8879: LD_ADDR_VAR 0 6
8883: PUSH
8884: LD_VAR 0 2
8888: PPUSH
8889: CALL_OW 274
8893: PPUSH
8894: LD_INT 1
8896: PPUSH
8897: CALL_OW 275
8901: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8902: LD_ADDR_VAR 0 7
8906: PUSH
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 274
8916: PPUSH
8917: LD_INT 3
8919: PPUSH
8920: CALL_OW 275
8924: ST_TO_ADDR
// if cr then
8925: LD_VAR 0 11
8929: IFFALSE 9043
// begin if tmp2 and tmp2 < cr then
8931: LD_VAR 0 6
8935: PUSH
8936: LD_VAR 0 6
8940: PUSH
8941: LD_VAR 0 11
8945: LESS
8946: AND
8947: IFFALSE 8995
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8949: LD_VAR 0 2
8953: PPUSH
8954: CALL_OW 274
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 11
8966: PUSH
8967: LD_VAR 0 6
8971: MINUS
8972: PPUSH
8973: CALL_OW 277
// cr := cr - tmp2 ;
8977: LD_ADDR_VAR 0 11
8981: PUSH
8982: LD_VAR 0 11
8986: PUSH
8987: LD_VAR 0 6
8991: MINUS
8992: ST_TO_ADDR
// end else
8993: GO 9043
// if tmp2 > cr then
8995: LD_VAR 0 6
8999: PUSH
9000: LD_VAR 0 11
9004: GREATER
9005: IFFALSE 9043
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9007: LD_VAR 0 2
9011: PPUSH
9012: CALL_OW 274
9016: PPUSH
9017: LD_INT 1
9019: PPUSH
9020: LD_VAR 0 6
9024: PUSH
9025: LD_VAR 0 11
9029: MINUS
9030: PPUSH
9031: CALL_OW 277
// cr := 0 ;
9035: LD_ADDR_VAR 0 11
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// end ; end ; if sb then
9043: LD_VAR 0 12
9047: IFFALSE 9161
// begin if tmp3 and tmp3 < sb then
9049: LD_VAR 0 7
9053: PUSH
9054: LD_VAR 0 7
9058: PUSH
9059: LD_VAR 0 12
9063: LESS
9064: AND
9065: IFFALSE 9113
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: CALL_OW 274
9076: PPUSH
9077: LD_INT 3
9079: PPUSH
9080: LD_VAR 0 12
9084: PUSH
9085: LD_VAR 0 7
9089: MINUS
9090: PPUSH
9091: CALL_OW 277
// sb := sb - tmp3 ;
9095: LD_ADDR_VAR 0 12
9099: PUSH
9100: LD_VAR 0 12
9104: PUSH
9105: LD_VAR 0 7
9109: MINUS
9110: ST_TO_ADDR
// end else
9111: GO 9161
// if tmp3 > sb then
9113: LD_VAR 0 7
9117: PUSH
9118: LD_VAR 0 12
9122: GREATER
9123: IFFALSE 9161
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9125: LD_VAR 0 2
9129: PPUSH
9130: CALL_OW 274
9134: PPUSH
9135: LD_INT 3
9137: PPUSH
9138: LD_VAR 0 7
9142: PUSH
9143: LD_VAR 0 12
9147: MINUS
9148: PPUSH
9149: CALL_OW 277
// sb := 0 ;
9153: LD_ADDR_VAR 0 12
9157: PUSH
9158: LD_INT 0
9160: ST_TO_ADDR
// end ; end ; end ;
9161: GO 8876
9163: POP
9164: POP
// end ; end ; DialogueOff ;
9165: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9169: LD_INT 167
9171: PPUSH
9172: LD_INT 121
9174: PPUSH
9175: LD_INT 1
9177: PPUSH
9178: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9182: LD_EXP 24
9186: PPUSH
9187: LD_EXP 25
9191: PPUSH
9192: CALL_OW 120
// wait ( 0 0$1 ) ;
9196: LD_INT 35
9198: PPUSH
9199: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9203: LD_EXP 25
9207: PPUSH
9208: LD_INT 4
9210: PPUSH
9211: CALL_OW 113
// wait ( 0 0$3 ) ;
9215: LD_INT 105
9217: PPUSH
9218: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9222: LD_EXP 24
9226: PPUSH
9227: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9231: LD_EXP 25
9235: PPUSH
9236: CALL_OW 64
// wait ( 0 0$3 ) ;
9240: LD_INT 105
9242: PPUSH
9243: CALL_OW 67
// if payForHelp then
9247: LD_VAR 0 14
9251: IFFALSE 9309
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9253: LD_INT 36
9255: PPUSH
9256: LD_INT 57
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9266: LD_INT 51
9268: PPUSH
9269: LD_INT 63
9271: PPUSH
9272: LD_INT 1
9274: PPUSH
9275: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9279: LD_INT 93
9281: PPUSH
9282: LD_INT 65
9284: PPUSH
9285: LD_INT 1
9287: PPUSH
9288: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9292: LD_INT 42
9294: PPUSH
9295: LD_INT 12
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 244
// PrepareLegionForPlayer ;
9305: CALL 4608 0 0
// end ; end ;
9309: LD_VAR 0 1
9313: RET
// every 0 0$10 trigger warWithLegion = 1 do
9314: LD_EXP 30
9318: PUSH
9319: LD_INT 1
9321: EQUAL
9322: IFFALSE 9331
9324: GO 9326
9326: DISABLE
// PrepareAttackLegion ;
9327: CALL 5272 0 0
9331: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9332: LD_EXP 15
9336: PPUSH
9337: CALL_OW 305
9341: PUSH
9342: LD_EXP 15
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: CALL_OW 289
9354: NOT
9355: AND
9356: PUSH
9357: LD_EXP 15
9361: PPUSH
9362: LD_INT 2
9364: PPUSH
9365: CALL_OW 289
9369: NOT
9370: AND
9371: PUSH
9372: LD_EXP 15
9376: PPUSH
9377: LD_INT 3
9379: PPUSH
9380: CALL_OW 289
9384: NOT
9385: AND
9386: IFFALSE 9403
9388: GO 9390
9390: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9391: LD_EXP 15
9395: PPUSH
9396: LD_INT 4
9398: PPUSH
9399: CALL_OW 235
9403: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9404: LD_EXP 16
9408: PPUSH
9409: CALL_OW 305
9413: PUSH
9414: LD_EXP 16
9418: PPUSH
9419: LD_INT 1
9421: PPUSH
9422: CALL_OW 289
9426: NOT
9427: AND
9428: PUSH
9429: LD_EXP 16
9433: PPUSH
9434: LD_INT 2
9436: PPUSH
9437: CALL_OW 289
9441: NOT
9442: AND
9443: PUSH
9444: LD_EXP 16
9448: PPUSH
9449: LD_INT 3
9451: PPUSH
9452: CALL_OW 289
9456: NOT
9457: AND
9458: IFFALSE 9475
9460: GO 9462
9462: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9463: LD_EXP 16
9467: PPUSH
9468: LD_INT 4
9470: PPUSH
9471: CALL_OW 235
9475: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9476: LD_EXP 17
9480: PPUSH
9481: CALL_OW 305
9485: PUSH
9486: LD_EXP 17
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 289
9498: NOT
9499: AND
9500: PUSH
9501: LD_EXP 17
9505: PPUSH
9506: LD_INT 2
9508: PPUSH
9509: CALL_OW 289
9513: NOT
9514: AND
9515: PUSH
9516: LD_EXP 17
9520: PPUSH
9521: LD_INT 3
9523: PPUSH
9524: CALL_OW 289
9528: NOT
9529: AND
9530: IFFALSE 9547
9532: GO 9534
9534: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9535: LD_EXP 17
9539: PPUSH
9540: LD_INT 4
9542: PPUSH
9543: CALL_OW 235
9547: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9548: LD_EXP 18
9552: PPUSH
9553: CALL_OW 305
9557: PUSH
9558: LD_EXP 18
9562: PPUSH
9563: LD_INT 1
9565: PPUSH
9566: CALL_OW 289
9570: NOT
9571: AND
9572: PUSH
9573: LD_EXP 18
9577: PPUSH
9578: LD_INT 2
9580: PPUSH
9581: CALL_OW 289
9585: NOT
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: LD_INT 3
9595: PPUSH
9596: CALL_OW 289
9600: NOT
9601: AND
9602: IFFALSE 9619
9604: GO 9606
9606: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9607: LD_EXP 18
9611: PPUSH
9612: LD_INT 4
9614: PPUSH
9615: CALL_OW 235
9619: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9620: LD_EXP 19
9624: PPUSH
9625: CALL_OW 305
9629: PUSH
9630: LD_EXP 19
9634: PPUSH
9635: LD_INT 1
9637: PPUSH
9638: CALL_OW 289
9642: NOT
9643: AND
9644: PUSH
9645: LD_EXP 19
9649: PPUSH
9650: LD_INT 2
9652: PPUSH
9653: CALL_OW 289
9657: NOT
9658: AND
9659: PUSH
9660: LD_EXP 19
9664: PPUSH
9665: LD_INT 3
9667: PPUSH
9668: CALL_OW 289
9672: NOT
9673: AND
9674: PUSH
9675: LD_EXP 19
9679: PPUSH
9680: LD_INT 2
9682: PPUSH
9683: CALL_OW 289
9687: NOT
9688: AND
9689: IFFALSE 9706
9691: GO 9693
9693: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9694: LD_EXP 19
9698: PPUSH
9699: LD_INT 4
9701: PPUSH
9702: CALL_OW 235
9706: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9707: LD_EXP 20
9711: PPUSH
9712: CALL_OW 305
9716: PUSH
9717: LD_EXP 20
9721: PPUSH
9722: LD_INT 1
9724: PPUSH
9725: CALL_OW 289
9729: NOT
9730: AND
9731: PUSH
9732: LD_EXP 20
9736: PPUSH
9737: LD_INT 2
9739: PPUSH
9740: CALL_OW 289
9744: NOT
9745: AND
9746: PUSH
9747: LD_EXP 20
9751: PPUSH
9752: LD_INT 3
9754: PPUSH
9755: CALL_OW 289
9759: NOT
9760: AND
9761: IFFALSE 9778
9763: GO 9765
9765: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9766: LD_EXP 20
9770: PPUSH
9771: LD_INT 4
9773: PPUSH
9774: CALL_OW 235
9778: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9779: LD_EXP 21
9783: PPUSH
9784: CALL_OW 305
9788: PUSH
9789: LD_EXP 21
9793: PPUSH
9794: LD_INT 1
9796: PPUSH
9797: CALL_OW 289
9801: NOT
9802: AND
9803: PUSH
9804: LD_EXP 21
9808: PPUSH
9809: LD_INT 2
9811: PPUSH
9812: CALL_OW 289
9816: NOT
9817: AND
9818: PUSH
9819: LD_EXP 21
9823: PPUSH
9824: LD_INT 3
9826: PPUSH
9827: CALL_OW 289
9831: NOT
9832: AND
9833: IFFALSE 9850
9835: GO 9837
9837: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9838: LD_EXP 21
9842: PPUSH
9843: LD_INT 4
9845: PPUSH
9846: CALL_OW 235
9850: END
// every 0 0$1 do var i ;
9851: GO 9853
9853: DISABLE
9854: LD_INT 0
9856: PPUSH
// begin enable ;
9857: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9858: LD_ADDR_VAR 0 1
9862: PUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 4
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PPUSH
9873: CALL_OW 69
9877: PUSH
9878: FOR_IN
9879: IFFALSE 9918
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_INT 4
9888: PPUSH
9889: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9893: LD_VAR 0 1
9897: PPUSH
9898: LD_INT 4
9900: PPUSH
9901: CALL_OW 308
9905: IFFALSE 9916
// RemoveUnit ( i ) ;
9907: LD_VAR 0 1
9911: PPUSH
9912: CALL_OW 64
// end ;
9916: GO 9878
9918: POP
9919: POP
// end ;
9920: PPOPN 1
9922: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9923: LD_EXP 27
9927: PUSH
9928: LD_INT 1
9930: EQUAL
9931: IFFALSE 10370
9933: GO 9935
9935: DISABLE
9936: LD_INT 0
9938: PPUSH
9939: PPUSH
9940: PPUSH
// begin enable ;
9941: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9942: LD_ADDR_VAR 0 2
9946: PUSH
9947: LD_INT 12
9949: PPUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 21
9962: PUSH
9963: LD_INT 2
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: PPUSH
9974: CALL_OW 70
9978: ST_TO_ADDR
// for i in enemyVehs do
9979: LD_ADDR_VAR 0 1
9983: PUSH
9984: LD_VAR 0 2
9988: PUSH
9989: FOR_IN
9990: IFFALSE 10368
// begin if See ( 1 , i ) then
9992: LD_INT 1
9994: PPUSH
9995: LD_VAR 0 1
9999: PPUSH
10000: CALL_OW 292
10004: IFFALSE 10366
// begin disable ;
10006: DISABLE
// DialogueOn ;
10007: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10011: LD_VAR 0 1
10015: PPUSH
10016: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10020: LD_INT 22
10022: PUSH
10023: LD_INT 1
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 26
10032: PUSH
10033: LD_INT 1
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 2
10042: PUSH
10043: LD_INT 25
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 25
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 25
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 25
10075: PUSH
10076: LD_INT 4
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 25
10085: PUSH
10086: LD_INT 5
10088: PUSH
10089: EMPTY
10090: LIST
10091: LIST
10092: PUSH
10093: LD_INT 25
10095: PUSH
10096: LD_INT 8
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 69
10121: PPUSH
10122: LD_STRING DT1-Sol1-1
10124: PPUSH
10125: LD_STRING DT1-FSol1-1
10127: PPUSH
10128: CALL 12328 0 3
// dec = ShowQuery2 ;
10132: LD_ADDR_VAR 0 3
10136: PUSH
10137: CALL 12871 0 0
10141: ST_TO_ADDR
// if dec = 1 then
10142: LD_VAR 0 3
10146: PUSH
10147: LD_INT 1
10149: EQUAL
10150: IFFALSE 10256
// begin Say ( JMM , D2-JMM-1 ) ;
10152: LD_EXP 1
10156: PPUSH
10157: LD_STRING D2-JMM-1
10159: PPUSH
10160: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10164: LD_EXP 22
10168: PPUSH
10169: LD_STRING D2-Pow-1
10171: PPUSH
10172: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10176: LD_EXP 1
10180: PPUSH
10181: LD_STRING D2a-JMM-1
10183: PPUSH
10184: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10188: LD_EXP 22
10192: PPUSH
10193: LD_STRING D2a-Pow-1
10195: PPUSH
10196: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10200: LD_EXP 1
10204: PPUSH
10205: LD_STRING D2a-JMM-2
10207: PPUSH
10208: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10212: LD_EXP 22
10216: PPUSH
10217: LD_STRING D2a-Pow-2
10219: PPUSH
10220: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10224: LD_EXP 1
10228: PPUSH
10229: LD_STRING D2a-JMM-3
10231: PPUSH
10232: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10236: LD_EXP 22
10240: PPUSH
10241: LD_STRING D2a-Pow-3
10243: PPUSH
10244: CALL_OW 94
// secondPass = 2 ;
10248: LD_ADDR_EXP 27
10252: PUSH
10253: LD_INT 2
10255: ST_TO_ADDR
// end ; if dec = 2 then
10256: LD_VAR 0 3
10260: PUSH
10261: LD_INT 2
10263: EQUAL
10264: IFFALSE 10358
// begin Say ( JMM , D2-JMM-1 ) ;
10266: LD_EXP 1
10270: PPUSH
10271: LD_STRING D2-JMM-1
10273: PPUSH
10274: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10278: LD_EXP 22
10282: PPUSH
10283: LD_STRING D2-Pow-1
10285: PPUSH
10286: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10290: LD_EXP 1
10294: PPUSH
10295: LD_STRING D2b-JMM-1
10297: PPUSH
10298: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10302: LD_EXP 22
10306: PPUSH
10307: LD_STRING D2b-Pow-1
10309: PPUSH
10310: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10314: LD_EXP 1
10318: PPUSH
10319: LD_STRING D2c-JMM-1
10321: PPUSH
10322: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10326: LD_EXP 22
10330: PPUSH
10331: LD_STRING D2c-Pow-1
10333: PPUSH
10334: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10338: LD_EXP 1
10342: PPUSH
10343: LD_STRING D2c-JMM-2
10345: PPUSH
10346: CALL_OW 88
// secondPass = 2 ;
10350: LD_ADDR_EXP 27
10354: PUSH
10355: LD_INT 2
10357: ST_TO_ADDR
// end ; DialogueOff ;
10358: CALL_OW 7
// exit ;
10362: POP
10363: POP
10364: GO 10370
// end ; end ;
10366: GO 9989
10368: POP
10369: POP
// end ;
10370: PPOPN 3
10372: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10373: LD_EXP 28
10377: PUSH
10378: LD_INT 1
10380: EQUAL
10381: PUSH
10382: LD_INT 11
10384: PPUSH
10385: LD_INT 22
10387: PUSH
10388: LD_INT 3
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: PPUSH
10395: CALL_OW 70
10399: AND
10400: IFFALSE 10628
10402: GO 10404
10404: DISABLE
10405: LD_INT 0
10407: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10408: LD_ADDR_VAR 0 1
10412: PUSH
10413: LD_INT 11
10415: PPUSH
10416: LD_INT 22
10418: PUSH
10419: LD_INT 3
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 70
10430: ST_TO_ADDR
// if not vehicles then
10431: LD_VAR 0 1
10435: NOT
10436: IFFALSE 10440
// exit ;
10438: GO 10628
// repeat wait ( 0 0$1 ) ;
10440: LD_INT 35
10442: PPUSH
10443: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10447: LD_VAR 0 1
10451: PPUSH
10452: LD_INT 101
10454: PUSH
10455: LD_INT 1
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PPUSH
10462: CALL_OW 72
10466: IFFALSE 10440
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10468: LD_VAR 0 1
10472: PPUSH
10473: LD_INT 101
10475: PUSH
10476: LD_INT 1
10478: PUSH
10479: EMPTY
10480: LIST
10481: LIST
10482: PPUSH
10483: CALL_OW 72
10487: PUSH
10488: LD_INT 1
10490: ARRAY
10491: PPUSH
10492: CALL_OW 87
// DialogueOn ;
10496: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10500: LD_INT 22
10502: PUSH
10503: LD_INT 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 26
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 25
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 25
10545: PUSH
10546: LD_INT 3
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 25
10555: PUSH
10556: LD_INT 4
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PUSH
10563: LD_INT 25
10565: PUSH
10566: LD_INT 5
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 25
10575: PUSH
10576: LD_INT 8
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PPUSH
10602: LD_STRING DT1-Sol1-1
10604: PPUSH
10605: LD_STRING DT1-FSol1-1
10607: PPUSH
10608: CALL 12328 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10612: LD_EXP 1
10616: PPUSH
10617: LD_STRING DT1-JMM-1
10619: PPUSH
10620: CALL_OW 88
// DialogueOff ;
10624: CALL_OW 7
// end ;
10628: PPOPN 1
10630: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10631: LD_EXP 28
10635: PUSH
10636: LD_INT 1
10638: EQUAL
10639: PUSH
10640: LD_INT 11
10642: PPUSH
10643: LD_INT 22
10645: PUSH
10646: LD_INT 3
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: PUSH
10653: LD_INT 50
10655: PUSH
10656: EMPTY
10657: LIST
10658: PUSH
10659: LD_INT 2
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 21
10674: PUSH
10675: LD_INT 1
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 70
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: AND
10701: PUSH
10702: LD_EXP 29
10706: AND
10707: IFFALSE 10864
10709: GO 10711
10711: DISABLE
// begin vehicleTeleported = 2 ;
10712: LD_ADDR_EXP 28
10716: PUSH
10717: LD_INT 2
10719: ST_TO_ADDR
// DialogueOn ;
10720: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_STRING DT1a-JMM-1
10731: PPUSH
10732: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10736: LD_INT 22
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 26
10748: PUSH
10749: LD_INT 1
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: LD_INT 25
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 25
10771: PUSH
10772: LD_INT 2
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 25
10781: PUSH
10782: LD_INT 3
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 25
10791: PUSH
10792: LD_INT 4
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 25
10801: PUSH
10802: LD_INT 5
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 25
10811: PUSH
10812: LD_INT 8
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: PPUSH
10833: CALL_OW 69
10837: PPUSH
10838: LD_STRING DT1a-Sol1-1
10840: PPUSH
10841: LD_STRING DT1a-FSol1-1
10843: PPUSH
10844: CALL 12328 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10848: LD_EXP 1
10852: PPUSH
10853: LD_STRING DT1a-JMM-2
10855: PPUSH
10856: CALL_OW 88
// DialogueOff ;
10860: CALL_OW 7
// end ;
10864: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10865: LD_EXP 28
10869: PUSH
10870: LD_INT 3
10872: EQUAL
10873: PUSH
10874: LD_INT 11
10876: PPUSH
10877: LD_INT 22
10879: PUSH
10880: LD_INT 3
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PUSH
10887: LD_INT 101
10889: PUSH
10890: LD_INT 1
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PPUSH
10901: CALL_OW 70
10905: AND
10906: IFFALSE 11180
10908: GO 10910
10910: DISABLE
10911: LD_INT 0
10913: PPUSH
10914: PPUSH
10915: PPUSH
// begin wait ( 0 0$0.3 ) ;
10916: LD_INT 10
10918: PPUSH
10919: CALL_OW 67
// DialogueOn ;
10923: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10927: LD_ADDR_VAR 0 3
10931: PUSH
10932: LD_INT 22
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 26
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 2
10954: PUSH
10955: LD_INT 25
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 25
10967: PUSH
10968: LD_INT 2
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 25
10977: PUSH
10978: LD_INT 3
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 25
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: PUSH
10995: LD_INT 25
10997: PUSH
10998: LD_INT 5
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 25
11007: PUSH
11008: LD_INT 8
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: PPUSH
11029: CALL_OW 69
11033: PPUSH
11034: LD_STRING DT2-Sol1-1
11036: PPUSH
11037: LD_STRING DT2-FSol1-1
11039: PPUSH
11040: CALL 12328 0 3
11044: ST_TO_ADDR
// DialogueOff ;
11045: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11049: LD_INT 35
11051: PPUSH
11052: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11056: LD_INT 11
11058: PPUSH
11059: LD_INT 22
11061: PUSH
11062: LD_INT 3
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 50
11071: PUSH
11072: EMPTY
11073: LIST
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: PPUSH
11079: CALL_OW 70
11083: NOT
11084: IFFALSE 11049
// wait ( 0 0$2 ) ;
11086: LD_INT 70
11088: PPUSH
11089: CALL_OW 67
// vehicleTeleported = 4 ;
11093: LD_ADDR_EXP 28
11097: PUSH
11098: LD_INT 4
11100: ST_TO_ADDR
// DialogueOn ;
11101: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11105: LD_EXP 1
11109: PPUSH
11110: LD_STRING DT2a-JMM-1
11112: PPUSH
11113: CALL_OW 88
// if speaker then
11117: LD_VAR 0 3
11121: IFFALSE 11164
// if GetSex ( speaker ) = 1 then
11123: LD_VAR 0 3
11127: PPUSH
11128: CALL_OW 258
11132: PUSH
11133: LD_INT 1
11135: EQUAL
11136: IFFALSE 11152
// Say ( speaker , DT2a-Sol1-1 ) else
11138: LD_VAR 0 3
11142: PPUSH
11143: LD_STRING DT2a-Sol1-1
11145: PPUSH
11146: CALL_OW 88
11150: GO 11164
// Say ( speaker , DT2a-FSol1-1 ) ;
11152: LD_VAR 0 3
11156: PPUSH
11157: LD_STRING DT2a-FSol1-1
11159: PPUSH
11160: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11164: LD_EXP 3
11168: PPUSH
11169: LD_STRING DT2a-Don-1
11171: PPUSH
11172: CALL_OW 88
// DialogueOff ;
11176: CALL_OW 7
// end ;
11180: PPOPN 3
11182: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11183: LD_INT 1
11185: PPUSH
11186: LD_INT 45
11188: PPUSH
11189: LD_INT 74
11191: PPUSH
11192: CALL_OW 293
11196: IFFALSE 11360
11198: GO 11200
11200: DISABLE
// begin DialogueOn ;
11201: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11205: LD_INT 36
11207: PPUSH
11208: LD_INT 55
11210: PPUSH
11211: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11215: LD_INT 22
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 26
11227: PUSH
11228: LD_INT 1
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: LD_INT 25
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 25
11250: PUSH
11251: LD_INT 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 25
11270: PUSH
11271: LD_INT 4
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 25
11280: PUSH
11281: LD_INT 5
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 8
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: PPUSH
11317: LD_STRING D5-Sol1-1
11319: PPUSH
11320: LD_STRING D5-FSol1-
11322: PPUSH
11323: CALL 12328 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11327: LD_EXP 30
11331: PUSH
11332: LD_EXP 3
11336: PPUSH
11337: CALL_OW 302
11341: AND
11342: IFFALSE 11356
// Say ( Donaldson , D5-Don-1 ) ;
11344: LD_EXP 3
11348: PPUSH
11349: LD_STRING D5-Don-1
11351: PPUSH
11352: CALL_OW 88
// DialogueOff ;
11356: CALL_OW 7
// end ;
11360: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11361: LD_INT 1
11363: PPUSH
11364: LD_INT 10
11366: PPUSH
11367: CALL_OW 292
11371: PUSH
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 137
11377: PPUSH
11378: CALL_OW 292
11382: OR
11383: IFFALSE 11527
11385: GO 11387
11387: DISABLE
// begin DialogueOn ;
11388: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11392: LD_INT 22
11394: PUSH
11395: LD_INT 1
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 26
11404: PUSH
11405: LD_INT 1
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: LD_INT 25
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 25
11427: PUSH
11428: LD_INT 2
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 25
11437: PUSH
11438: LD_INT 3
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 25
11447: PUSH
11448: LD_INT 4
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 25
11467: PUSH
11468: LD_INT 8
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: PPUSH
11489: CALL_OW 69
11493: PPUSH
11494: LD_STRING DT3-Sol1-1
11496: PPUSH
11497: LD_STRING DT3-FSol1-1
11499: PPUSH
11500: CALL 12328 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11504: LD_EXP 1
11508: PPUSH
11509: LD_STRING DT3-JMM-1
11511: PPUSH
11512: CALL_OW 88
// DialogueOff ;
11516: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11520: LD_STRING M2
11522: PPUSH
11523: CALL_OW 337
// end ;
11527: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11528: LD_EXP 42
11532: PUSH
11533: LD_INT 0
11535: EQUAL
11536: IFFALSE 11619
11538: GO 11540
11540: DISABLE
11541: LD_INT 0
11543: PPUSH
// begin enable ;
11544: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11545: LD_ADDR_VAR 0 1
11549: PUSH
11550: LD_INT 10
11552: PPUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 3
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 21
11565: PUSH
11566: LD_INT 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 58
11575: PUSH
11576: EMPTY
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 70
11588: PUSH
11589: FOR_IN
11590: IFFALSE 11617
// if GetLives ( i ) < 1000 then
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 256
11601: PUSH
11602: LD_INT 1000
11604: LESS
11605: IFFALSE 11615
// ruEscape = 1 ;
11607: LD_ADDR_EXP 42
11611: PUSH
11612: LD_INT 1
11614: ST_TO_ADDR
11615: GO 11589
11617: POP
11618: POP
// end ;
11619: PPOPN 1
11621: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11622: LD_INT 3
11624: PPUSH
11625: CALL_OW 303
11629: PUSH
11630: LD_INT 4
11632: PPUSH
11633: CALL_OW 303
11637: OR
11638: PUSH
11639: LD_INT 22
11641: PPUSH
11642: LD_INT 22
11644: PUSH
11645: LD_INT 1
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PPUSH
11652: CALL_OW 70
11656: PUSH
11657: LD_INT 0
11659: GREATER
11660: OR
11661: PUSH
11662: LD_EXP 42
11666: PUSH
11667: LD_INT 1
11669: EQUAL
11670: OR
11671: IFFALSE 11902
11673: GO 11675
11675: DISABLE
11676: LD_INT 0
11678: PPUSH
11679: PPUSH
11680: PPUSH
// begin ruAI = 0 ;
11681: LD_ADDR_EXP 41
11685: PUSH
11686: LD_INT 0
11688: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11689: LD_ADDR_VAR 0 3
11693: PUSH
11694: LD_INT 10
11696: PPUSH
11697: LD_INT 22
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 21
11709: PUSH
11710: LD_INT 2
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 58
11719: PUSH
11720: EMPTY
11721: LIST
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: PPUSH
11728: CALL_OW 70
11732: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11733: LD_EXP 34
11737: PPUSH
11738: CALL_OW 122
// wait ( 0 0$1 ) ;
11742: LD_INT 35
11744: PPUSH
11745: CALL_OW 67
// DialogueOn ;
11749: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11753: LD_EXP 1
11757: PPUSH
11758: LD_STRING D6-JMM-1
11760: PPUSH
11761: CALL_OW 88
// DialogueOff ;
11765: CALL_OW 7
// if vehs > 0 then
11769: LD_VAR 0 3
11773: PUSH
11774: LD_INT 0
11776: GREATER
11777: IFFALSE 11847
// for i := 1 to RuScientists do
11779: LD_ADDR_VAR 0 1
11783: PUSH
11784: DOUBLE
11785: LD_INT 1
11787: DEC
11788: ST_TO_ADDR
11789: LD_EXP 34
11793: PUSH
11794: FOR_TO
11795: IFFALSE 11843
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11797: LD_EXP 34
11801: PUSH
11802: LD_VAR 0 1
11806: ARRAY
11807: PPUSH
11808: LD_INT 3
11810: PUSH
11811: LD_INT 60
11813: PUSH
11814: EMPTY
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PPUSH
11821: CALL_OW 72
11825: PPUSH
11826: LD_VAR 0 3
11830: PUSH
11831: LD_VAR 0 1
11835: ARRAY
11836: PPUSH
11837: CALL_OW 120
11841: GO 11794
11843: POP
11844: POP
11845: GO 11902
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11847: LD_EXP 34
11851: PUSH
11852: LD_VAR 0 1
11856: ARRAY
11857: PPUSH
11858: LD_INT 3
11860: PUSH
11861: LD_INT 60
11863: PUSH
11864: EMPTY
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 72
11875: PPUSH
11876: LD_INT 13
11878: PUSH
11879: LD_INT 14
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 1
11888: PPUSH
11889: LD_INT 2
11891: PPUSH
11892: CALL_OW 12
11896: ARRAY
11897: PPUSH
11898: CALL_OW 113
// end ;
11902: PPOPN 3
11904: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11905: LD_EXP 41
11909: PUSH
11910: LD_INT 0
11912: EQUAL
11913: IFFALSE 12285
11915: GO 11917
11917: DISABLE
11918: LD_INT 0
11920: PPUSH
11921: PPUSH
11922: PPUSH
11923: PPUSH
// begin enable ;
11924: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11925: LD_EXP 34
11929: PPUSH
11930: LD_INT 2
11932: PUSH
11933: LD_INT 95
11935: PUSH
11936: LD_INT 13
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 95
11945: PUSH
11946: LD_INT 14
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: PPUSH
11958: CALL_OW 72
11962: PUSH
11963: LD_INT 33
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 23
11975: PUSH
11976: LD_INT 3
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: LD_INT 95
11988: PUSH
11989: LD_INT 13
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 95
11998: PUSH
11999: LD_INT 14
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: OR
12021: IFFALSE 12210
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
12023: LD_ADDR_VAR 0 2
12027: PUSH
12028: LD_EXP 34
12032: PPUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 95
12038: PUSH
12039: LD_INT 13
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 95
12048: PUSH
12049: LD_INT 14
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: PPUSH
12061: CALL_OW 72
12065: PUSH
12066: LD_INT 1
12068: ARRAY
12069: ST_TO_ADDR
// if not unit then
12070: LD_VAR 0 2
12074: NOT
12075: IFFALSE 12210
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12077: LD_ADDR_VAR 0 4
12081: PUSH
12082: LD_INT 2
12084: PUSH
12085: LD_INT 95
12087: PUSH
12088: LD_INT 13
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: LD_INT 95
12097: PUSH
12098: LD_INT 14
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 33
12112: PUSH
12113: LD_INT 1
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 23
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: PPUSH
12135: CALL_OW 69
12139: ST_TO_ADDR
// if not tmp then
12140: LD_VAR 0 4
12144: NOT
12145: IFFALSE 12149
// exit ;
12147: GO 12285
// for i in tmp do
12149: LD_ADDR_VAR 0 1
12153: PUSH
12154: LD_VAR 0 4
12158: PUSH
12159: FOR_IN
12160: IFFALSE 12208
// if IsDrivenBy ( i ) in RuScientists then
12162: LD_VAR 0 1
12166: PPUSH
12167: CALL_OW 311
12171: PUSH
12172: LD_EXP 34
12176: IN
12177: IFFALSE 12206
// begin unit := IsDrivenBy ( i ) ;
12179: LD_ADDR_VAR 0 2
12183: PUSH
12184: LD_VAR 0 1
12188: PPUSH
12189: CALL_OW 311
12193: ST_TO_ADDR
// veh := i ;
12194: LD_ADDR_VAR 0 3
12198: PUSH
12199: LD_VAR 0 1
12203: ST_TO_ADDR
// break ;
12204: GO 12208
// end ;
12206: GO 12159
12208: POP
12209: POP
// end ; end ; if not unit then
12210: LD_VAR 0 2
12214: NOT
12215: IFFALSE 12219
// exit ;
12217: GO 12285
// RuScientists = RuScientists diff unit ;
12219: LD_ADDR_EXP 34
12223: PUSH
12224: LD_EXP 34
12228: PUSH
12229: LD_VAR 0 2
12233: DIFF
12234: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12235: LD_VAR 0 2
12239: PPUSH
12240: CALL_OW 64
// if veh then
12244: LD_VAR 0 3
12248: IFFALSE 12285
// begin if GetWeapon ( veh ) = 49 then
12250: LD_VAR 0 3
12254: PPUSH
12255: CALL_OW 264
12259: PUSH
12260: LD_INT 49
12262: EQUAL
12263: IFFALSE 12276
// KillUnit ( veh ) else
12265: LD_VAR 0 3
12269: PPUSH
12270: CALL_OW 66
12274: GO 12285
// RemoveUnit ( veh ) ;
12276: LD_VAR 0 3
12280: PPUSH
12281: CALL_OW 64
// end ; end ; end_of_file
12285: PPOPN 4
12287: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12288: LD_INT 0
12290: PPUSH
12291: PPUSH
// for i in charactersList do
12292: LD_ADDR_VAR 0 4
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12321
// SaveCharacters ( i , ident ) ;
12305: LD_VAR 0 4
12309: PPUSH
12310: LD_VAR 0 2
12314: PPUSH
12315: CALL_OW 38
12319: GO 12302
12321: POP
12322: POP
// end ;
12323: LD_VAR 0 3
12327: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12328: LD_INT 0
12330: PPUSH
12331: PPUSH
12332: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12333: LD_ADDR_VAR 0 1
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: LD_EXP 1
12347: PUSH
12348: LD_EXP 7
12352: PUSH
12353: LD_EXP 3
12357: PUSH
12358: LD_EXP 4
12362: PUSH
12363: LD_EXP 5
12367: PUSH
12368: LD_EXP 2
12372: PUSH
12373: LD_EXP 12
12377: PUSH
12378: LD_EXP 13
12382: PUSH
12383: LD_EXP 9
12387: PUSH
12388: LD_EXP 11
12392: PUSH
12393: LD_EXP 6
12397: PUSH
12398: LD_EXP 8
12402: PUSH
12403: LD_EXP 10
12407: PUSH
12408: LD_EXP 22
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: DIFF
12429: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12430: LD_ADDR_VAR 0 6
12434: PUSH
12435: LD_VAR 0 1
12439: PUSH
12440: LD_INT 1
12442: PPUSH
12443: LD_VAR 0 1
12447: PPUSH
12448: CALL_OW 12
12452: ARRAY
12453: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12454: LD_VAR 0 6
12458: PPUSH
12459: CALL_OW 258
12463: PUSH
12464: LD_INT 1
12466: EQUAL
12467: IFFALSE 12485
// Say ( speaker , dialogMID ) else
12469: LD_VAR 0 6
12473: PPUSH
12474: LD_VAR 0 2
12478: PPUSH
12479: CALL_OW 88
12483: GO 12499
// Say ( speaker , dialogFID ) ;
12485: LD_VAR 0 6
12489: PPUSH
12490: LD_VAR 0 3
12494: PPUSH
12495: CALL_OW 88
// result := speaker ;
12499: LD_ADDR_VAR 0 4
12503: PUSH
12504: LD_VAR 0 6
12508: ST_TO_ADDR
// end ;
12509: LD_VAR 0 4
12513: RET
// export function PrepareDifficulty ; var tmp ; begin
12514: LD_INT 0
12516: PPUSH
12517: PPUSH
// if Difficulty = 1 then
12518: LD_OWVAR 67
12522: PUSH
12523: LD_INT 1
12525: EQUAL
12526: IFFALSE 12544
// begin RuSolMinLevel = 8 ;
12528: LD_ADDR_EXP 36
12532: PUSH
12533: LD_INT 8
12535: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12536: LD_ADDR_EXP 37
12540: PUSH
12541: LD_INT 10
12543: ST_TO_ADDR
// end ; if Difficulty = 2 then
12544: LD_OWVAR 67
12548: PUSH
12549: LD_INT 2
12551: EQUAL
12552: IFFALSE 12646
// begin RuSolMinLevel = 9 ;
12554: LD_ADDR_EXP 36
12558: PUSH
12559: LD_INT 9
12561: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12562: LD_ADDR_EXP 37
12566: PUSH
12567: LD_INT 10
12569: ST_TO_ADDR
// uc_nation = 3 ;
12570: LD_ADDR_OWVAR 21
12574: PUSH
12575: LD_INT 3
12577: ST_TO_ADDR
// uc_side = 3 ;
12578: LD_ADDR_OWVAR 20
12582: PUSH
12583: LD_INT 3
12585: ST_TO_ADDR
// bc_level = 10 ;
12586: LD_ADDR_OWVAR 43
12590: PUSH
12591: LD_INT 10
12593: ST_TO_ADDR
// bc_type = b_turret ;
12594: LD_ADDR_OWVAR 42
12598: PUSH
12599: LD_INT 33
12601: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_INT 86
12609: PPUSH
12610: LD_INT 34
12612: PPUSH
12613: LD_INT 2
12615: PPUSH
12616: CALL_OW 47
12620: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12621: LD_VAR 0 2
12625: PPUSH
12626: LD_INT 49
12628: PPUSH
12629: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12633: LD_INT 64
12635: PPUSH
12636: LD_INT 3
12638: PPUSH
12639: LD_INT 1
12641: PPUSH
12642: CALL_OW 322
// end ; if Difficulty = 3 then
12646: LD_OWVAR 67
12650: PUSH
12651: LD_INT 3
12653: EQUAL
12654: IFFALSE 12792
// begin RuSolMinLevel = 10 ;
12656: LD_ADDR_EXP 36
12660: PUSH
12661: LD_INT 10
12663: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12664: LD_ADDR_EXP 37
12668: PUSH
12669: LD_INT 10
12671: ST_TO_ADDR
// uc_nation = 3 ;
12672: LD_ADDR_OWVAR 21
12676: PUSH
12677: LD_INT 3
12679: ST_TO_ADDR
// uc_side = 3 ;
12680: LD_ADDR_OWVAR 20
12684: PUSH
12685: LD_INT 3
12687: ST_TO_ADDR
// bc_level = 10 ;
12688: LD_ADDR_OWVAR 43
12692: PUSH
12693: LD_INT 10
12695: ST_TO_ADDR
// bc_type = b_turret ;
12696: LD_ADDR_OWVAR 42
12700: PUSH
12701: LD_INT 33
12703: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12704: LD_ADDR_VAR 0 2
12708: PUSH
12709: LD_INT 86
12711: PPUSH
12712: LD_INT 34
12714: PPUSH
12715: LD_INT 2
12717: PPUSH
12718: CALL_OW 47
12722: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12723: LD_VAR 0 2
12727: PPUSH
12728: LD_INT 49
12730: PPUSH
12731: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12735: LD_ADDR_VAR 0 2
12739: PUSH
12740: LD_INT 93
12742: PPUSH
12743: LD_INT 31
12745: PPUSH
12746: LD_INT 2
12748: PPUSH
12749: CALL_OW 47
12753: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12754: LD_VAR 0 2
12758: PPUSH
12759: LD_INT 49
12761: PPUSH
12762: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12766: LD_INT 64
12768: PPUSH
12769: LD_INT 3
12771: PPUSH
12772: LD_INT 1
12774: PPUSH
12775: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12779: LD_INT 65
12781: PPUSH
12782: LD_INT 3
12784: PPUSH
12785: LD_INT 1
12787: PPUSH
12788: CALL_OW 322
// end ; end ;
12792: LD_VAR 0 1
12796: RET
// export function ShowQuery1 ; begin
12797: LD_INT 0
12799: PPUSH
// case query ( Q1 ) of 1 :
12800: LD_STRING Q1
12802: PPUSH
12803: CALL_OW 97
12807: PUSH
12808: LD_INT 1
12810: DOUBLE
12811: EQUAL
12812: IFTRUE 12816
12814: GO 12827
12816: POP
// result = 1 ; 2 :
12817: LD_ADDR_VAR 0 1
12821: PUSH
12822: LD_INT 1
12824: ST_TO_ADDR
12825: GO 12866
12827: LD_INT 2
12829: DOUBLE
12830: EQUAL
12831: IFTRUE 12835
12833: GO 12846
12835: POP
// result = 2 ; 3 :
12836: LD_ADDR_VAR 0 1
12840: PUSH
12841: LD_INT 2
12843: ST_TO_ADDR
12844: GO 12866
12846: LD_INT 3
12848: DOUBLE
12849: EQUAL
12850: IFTRUE 12854
12852: GO 12865
12854: POP
// result = 3 ; end ;
12855: LD_ADDR_VAR 0 1
12859: PUSH
12860: LD_INT 3
12862: ST_TO_ADDR
12863: GO 12866
12865: POP
// end ;
12866: LD_VAR 0 1
12870: RET
// export function ShowQuery2 ; begin
12871: LD_INT 0
12873: PPUSH
// case query ( Q1a ) of 1 :
12874: LD_STRING Q1a
12876: PPUSH
12877: CALL_OW 97
12881: PUSH
12882: LD_INT 1
12884: DOUBLE
12885: EQUAL
12886: IFTRUE 12890
12888: GO 12901
12890: POP
// result = 1 ; 2 :
12891: LD_ADDR_VAR 0 1
12895: PUSH
12896: LD_INT 1
12898: ST_TO_ADDR
12899: GO 12940
12901: LD_INT 2
12903: DOUBLE
12904: EQUAL
12905: IFTRUE 12909
12907: GO 12920
12909: POP
// result = 2 ; 3 :
12910: LD_ADDR_VAR 0 1
12914: PUSH
12915: LD_INT 2
12917: ST_TO_ADDR
12918: GO 12940
12920: LD_INT 3
12922: DOUBLE
12923: EQUAL
12924: IFTRUE 12928
12926: GO 12939
12928: POP
// result = 3 ; end ;
12929: LD_ADDR_VAR 0 1
12933: PUSH
12934: LD_INT 3
12936: ST_TO_ADDR
12937: GO 12940
12939: POP
// end ;
12940: LD_VAR 0 1
12944: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12945: LD_INT 0
12947: PPUSH
12948: PPUSH
12949: PPUSH
12950: PPUSH
12951: PPUSH
// for i = 1 to count do
12952: LD_ADDR_VAR 0 8
12956: PUSH
12957: DOUBLE
12958: LD_INT 1
12960: DEC
12961: ST_TO_ADDR
12962: LD_VAR 0 6
12966: PUSH
12967: FOR_TO
12968: IFFALSE 13049
// begin uc_side = side ;
12970: LD_ADDR_OWVAR 20
12974: PUSH
12975: LD_VAR 0 1
12979: ST_TO_ADDR
// uc_nation = nation ;
12980: LD_ADDR_OWVAR 21
12984: PUSH
12985: LD_VAR 0 2
12989: ST_TO_ADDR
// hc_gallery =  ;
12990: LD_ADDR_OWVAR 33
12994: PUSH
12995: LD_STRING 
12997: ST_TO_ADDR
// hc_name =  ;
12998: LD_ADDR_OWVAR 26
13002: PUSH
13003: LD_STRING 
13005: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13006: LD_INT 0
13008: PPUSH
13009: LD_VAR 0 5
13013: PPUSH
13014: LD_VAR 0 4
13018: PPUSH
13019: CALL_OW 380
// un = CreateHuman ;
13023: LD_ADDR_VAR 0 10
13027: PUSH
13028: CALL_OW 44
13032: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13033: LD_VAR 0 10
13037: PPUSH
13038: LD_VAR 0 3
13042: PPUSH
13043: CALL_OW 52
// end ;
13047: GO 12967
13049: POP
13050: POP
// end ;
13051: LD_VAR 0 7
13055: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13056: LD_INT 0
13058: PPUSH
13059: PPUSH
13060: PPUSH
13061: PPUSH
13062: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13063: LD_ADDR_VAR 0 8
13067: PUSH
13068: LD_INT 48
13070: PUSH
13071: LD_INT 49
13073: PUSH
13074: LD_INT 50
13076: PUSH
13077: LD_INT 20
13079: PUSH
13080: LD_INT 1
13082: PUSH
13083: LD_INT 51
13085: PUSH
13086: LD_INT 52
13088: PUSH
13089: LD_INT 69
13091: PUSH
13092: LD_INT 39
13094: PUSH
13095: LD_INT 34
13097: PUSH
13098: LD_INT 40
13100: PUSH
13101: LD_INT 53
13103: PUSH
13104: LD_INT 71
13106: PUSH
13107: LD_INT 57
13109: PUSH
13110: LD_INT 58
13112: PUSH
13113: LD_INT 44
13115: PUSH
13116: LD_INT 32
13118: PUSH
13119: LD_INT 27
13121: PUSH
13122: LD_INT 23
13124: PUSH
13125: LD_INT 33
13127: PUSH
13128: LD_INT 59
13130: PUSH
13131: LD_INT 54
13133: PUSH
13134: LD_INT 55
13136: PUSH
13137: LD_INT 56
13139: PUSH
13140: LD_INT 63
13142: PUSH
13143: LD_INT 64
13145: PUSH
13146: LD_INT 65
13148: PUSH
13149: LD_INT 30
13151: PUSH
13152: LD_INT 31
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 22
13160: PUSH
13161: LD_INT 25
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13198: LD_ADDR_VAR 0 5
13202: PUSH
13203: DOUBLE
13204: LD_INT 1
13206: DEC
13207: ST_TO_ADDR
13208: LD_VAR 0 8
13212: PUSH
13213: FOR_TO
13214: IFFALSE 13290
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13216: LD_VAR 0 8
13220: PUSH
13221: LD_VAR 0 5
13225: ARRAY
13226: PPUSH
13227: LD_VAR 0 1
13231: PPUSH
13232: CALL_OW 321
13236: PUSH
13237: LD_INT 1
13239: EQUAL
13240: PUSH
13241: LD_VAR 0 8
13245: PUSH
13246: LD_VAR 0 5
13250: ARRAY
13251: PPUSH
13252: LD_VAR 0 3
13256: PPUSH
13257: CALL_OW 482
13261: PUSH
13262: LD_INT 1
13264: EQUAL
13265: AND
13266: IFFALSE 13288
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_VAR 0 8
13277: PUSH
13278: LD_VAR 0 5
13282: ARRAY
13283: PPUSH
13284: CALL_OW 184
13288: GO 13213
13290: POP
13291: POP
// end ;
13292: LD_VAR 0 4
13296: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13297: LD_INT 0
13299: PPUSH
13300: PPUSH
13301: PPUSH
13302: PPUSH
13303: PPUSH
13304: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13305: LD_ADDR_VAR 0 8
13309: PUSH
13310: LD_VAR 0 2
13314: PPUSH
13315: CALL_OW 313
13319: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13320: LD_ADDR_VAR 0 9
13324: PUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_VAR 0 1
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 25
13344: PUSH
13345: LD_INT 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 24
13354: PUSH
13355: LD_INT 750
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: LD_INT 3
13364: PUSH
13365: LD_INT 54
13367: PUSH
13368: EMPTY
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: PPUSH
13381: CALL_OW 70
13385: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13386: LD_ADDR_VAR 0 6
13390: PUSH
13391: LD_VAR 0 3
13395: PPUSH
13396: LD_INT 22
13398: PUSH
13399: LD_VAR 0 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 21
13410: PUSH
13411: LD_INT 3
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: LD_INT 24
13423: PUSH
13424: LD_INT 1000
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: PUSH
13440: EMPTY
13441: LIST
13442: PPUSH
13443: CALL_OW 70
13447: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13448: LD_VAR 0 6
13452: NOT
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_VAR 0 1
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 24
13478: PUSH
13479: LD_INT 250
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: PPUSH
13491: CALL_OW 69
13495: NOT
13496: AND
13497: IFFALSE 13501
// exit ;
13499: GO 13683
// if buildings_list > 0 and engineerOkInside then
13501: LD_VAR 0 6
13505: PUSH
13506: LD_INT 0
13508: GREATER
13509: PUSH
13510: LD_VAR 0 8
13514: AND
13515: IFFALSE 13526
// ComExitBuilding ( engineerOkInside ) ;
13517: LD_VAR 0 8
13521: PPUSH
13522: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13526: LD_VAR 0 6
13530: PUSH
13531: LD_INT 0
13533: GREATER
13534: PUSH
13535: LD_VAR 0 9
13539: PUSH
13540: LD_INT 0
13542: GREATER
13543: AND
13544: IFFALSE 13564
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13546: LD_VAR 0 9
13550: PPUSH
13551: LD_VAR 0 6
13555: PUSH
13556: LD_INT 1
13558: ARRAY
13559: PPUSH
13560: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13564: LD_VAR 0 6
13568: PUSH
13569: LD_INT 0
13571: EQUAL
13572: PUSH
13573: LD_VAR 0 4
13577: PUSH
13578: LD_INT 0
13580: EQUAL
13581: AND
13582: PUSH
13583: LD_VAR 0 9
13587: PUSH
13588: LD_INT 0
13590: GREATER
13591: AND
13592: IFFALSE 13608
// ComEnterUnit ( engineerOkOutside , building ) ;
13594: LD_VAR 0 9
13598: PPUSH
13599: LD_VAR 0 2
13603: PPUSH
13604: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13608: LD_VAR 0 9
13612: PUSH
13613: LD_INT 0
13615: GREATER
13616: PUSH
13617: LD_VAR 0 6
13621: PUSH
13622: LD_INT 0
13624: EQUAL
13625: AND
13626: PUSH
13627: LD_VAR 0 4
13631: PUSH
13632: LD_INT 0
13634: GREATER
13635: AND
13636: IFFALSE 13683
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13638: LD_VAR 0 9
13642: PPUSH
13643: LD_VAR 0 4
13647: PUSH
13648: LD_INT 1
13650: ARRAY
13651: PPUSH
13652: LD_VAR 0 4
13656: PUSH
13657: LD_INT 2
13659: ARRAY
13660: PPUSH
13661: LD_VAR 0 4
13665: PUSH
13666: LD_INT 3
13668: ARRAY
13669: PPUSH
13670: LD_VAR 0 4
13674: PUSH
13675: LD_INT 4
13677: ARRAY
13678: PPUSH
13679: CALL_OW 145
// end ;
13683: LD_VAR 0 5
13687: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13688: LD_INT 0
13690: PPUSH
13691: PPUSH
13692: PPUSH
13693: PPUSH
13694: PPUSH
13695: PPUSH
13696: PPUSH
13697: PPUSH
13698: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13699: LD_ADDR_VAR 0 6
13703: PUSH
13704: LD_INT 22
13706: PUSH
13707: LD_VAR 0 1
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 25
13718: PUSH
13719: LD_INT 4
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 24
13728: PUSH
13729: LD_INT 251
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: PUSH
13746: LD_EXP 34
13750: PUSH
13751: EMPTY
13752: LIST
13753: DIFF
13754: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13755: LD_ADDR_VAR 0 7
13759: PUSH
13760: LD_VAR 0 3
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_VAR 0 1
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 25
13779: PUSH
13780: LD_INT 4
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: LD_INT 50
13789: PUSH
13790: EMPTY
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 70
13802: PUSH
13803: LD_EXP 34
13807: PUSH
13808: EMPTY
13809: LIST
13810: DIFF
13811: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13812: LD_ADDR_VAR 0 10
13816: PUSH
13817: LD_VAR 0 3
13821: PPUSH
13822: LD_INT 22
13824: PUSH
13825: LD_VAR 0 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: LD_INT 24
13849: PUSH
13850: LD_INT 750
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 70
13870: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13871: LD_ADDR_VAR 0 11
13875: PUSH
13876: LD_VAR 0 2
13880: PPUSH
13881: LD_INT 22
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 21
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: LD_INT 24
13908: PUSH
13909: LD_INT 1000
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 70
13929: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13930: LD_VAR 0 10
13934: PUSH
13935: LD_INT 0
13937: GREATER
13938: PUSH
13939: LD_VAR 0 6
13943: PUSH
13944: LD_INT 0
13946: GREATER
13947: AND
13948: IFFALSE 13964
// ComMoveToArea ( damageUnits , healArea ) ;
13950: LD_VAR 0 10
13954: PPUSH
13955: LD_VAR 0 2
13959: PPUSH
13960: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13964: LD_VAR 0 11
13968: PUSH
13969: LD_INT 0
13971: GREATER
13972: PUSH
13973: LD_VAR 0 7
13977: PUSH
13978: LD_INT 0
13980: GREATER
13981: AND
13982: IFFALSE 14002
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13984: LD_VAR 0 7
13988: PPUSH
13989: LD_VAR 0 11
13993: PUSH
13994: LD_INT 1
13996: ARRAY
13997: PPUSH
13998: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14002: LD_VAR 0 10
14006: PUSH
14007: LD_INT 0
14009: EQUAL
14010: PUSH
14011: LD_VAR 0 11
14015: PUSH
14016: LD_INT 0
14018: EQUAL
14019: AND
14020: PUSH
14021: LD_VAR 0 7
14025: PUSH
14026: LD_INT 0
14028: GREATER
14029: AND
14030: IFFALSE 14135
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14032: LD_ADDR_VAR 0 12
14036: PUSH
14037: LD_INT 22
14039: PUSH
14040: LD_VAR 0 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 21
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PUSH
14059: LD_INT 30
14061: PUSH
14062: LD_INT 8
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: PPUSH
14074: CALL_OW 69
14078: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14079: LD_ADDR_VAR 0 13
14083: PUSH
14084: LD_INT 1
14086: PPUSH
14087: LD_VAR 0 12
14091: PPUSH
14092: CALL_OW 12
14096: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14097: LD_VAR 0 7
14101: PPUSH
14102: LD_INT 3
14104: PUSH
14105: LD_INT 60
14107: PUSH
14108: EMPTY
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 72
14119: PPUSH
14120: LD_VAR 0 12
14124: PUSH
14125: LD_VAR 0 13
14129: ARRAY
14130: PPUSH
14131: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14135: LD_VAR 0 3
14139: PPUSH
14140: LD_INT 22
14142: PUSH
14143: LD_VAR 0 1
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 25
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 24
14164: PUSH
14165: LD_INT 751
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: PPUSH
14177: CALL_OW 70
14181: PUSH
14182: LD_INT 0
14184: GREATER
14185: PUSH
14186: LD_INT 21
14188: PPUSH
14189: CALL_OW 302
14193: AND
14194: PUSH
14195: LD_INT 21
14197: PPUSH
14198: CALL_OW 255
14202: PUSH
14203: LD_INT 3
14205: EQUAL
14206: AND
14207: IFFALSE 14263
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14209: LD_VAR 0 3
14213: PPUSH
14214: LD_INT 22
14216: PUSH
14217: LD_VAR 0 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 25
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 24
14238: PUSH
14239: LD_INT 751
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 70
14255: PPUSH
14256: LD_INT 21
14258: PPUSH
14259: CALL_OW 120
// end ;
14263: LD_VAR 0 5
14267: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14268: LD_INT 0
14270: PPUSH
14271: PPUSH
14272: PPUSH
14273: PPUSH
14274: PPUSH
14275: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14276: LD_ADDR_VAR 0 7
14280: PUSH
14281: LD_VAR 0 2
14285: PPUSH
14286: LD_INT 22
14288: PUSH
14289: LD_VAR 0 1
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 21
14300: PUSH
14301: LD_INT 2
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 34
14310: PUSH
14311: LD_INT 52
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 70
14327: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14328: LD_ADDR_VAR 0 8
14332: PUSH
14333: LD_VAR 0 2
14337: PPUSH
14338: LD_INT 22
14340: PUSH
14341: LD_VAR 0 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 3
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 3
14362: PUSH
14363: LD_INT 24
14365: PUSH
14366: LD_INT 1000
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PUSH
14382: EMPTY
14383: LIST
14384: PPUSH
14385: CALL_OW 70
14389: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14390: LD_VAR 0 8
14394: PUSH
14395: LD_INT 0
14397: GREATER
14398: PUSH
14399: LD_VAR 0 7
14403: PPUSH
14404: LD_INT 24
14406: PUSH
14407: LD_INT 750
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 72
14418: PUSH
14419: LD_INT 0
14421: GREATER
14422: AND
14423: IFFALSE 14443
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14425: LD_VAR 0 7
14429: PPUSH
14430: LD_VAR 0 8
14434: PUSH
14435: LD_INT 1
14437: ARRAY
14438: PPUSH
14439: CALL_OW 130
// end ;
14443: LD_VAR 0 3
14447: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14448: LD_INT 0
14450: PPUSH
14451: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14452: LD_INT 22
14454: PUSH
14455: LD_VAR 0 1
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 21
14466: PUSH
14467: LD_INT 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: PPUSH
14478: CALL_OW 69
14482: PUSH
14483: LD_INT 18
14485: PPUSH
14486: LD_INT 22
14488: PUSH
14489: LD_VAR 0 1
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 2
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: PPUSH
14512: CALL_OW 70
14516: PUSH
14517: LD_VAR 0 3
14521: LESSEQUAL
14522: DIFF
14523: IFFALSE 14590
// for i = 1 to vehCount do
14525: LD_ADDR_VAR 0 9
14529: PUSH
14530: DOUBLE
14531: LD_INT 1
14533: DEC
14534: ST_TO_ADDR
14535: LD_VAR 0 3
14539: PUSH
14540: FOR_TO
14541: IFFALSE 14588
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14543: LD_VAR 0 2
14547: PPUSH
14548: LD_VAR 0 7
14552: PPUSH
14553: LD_VAR 0 5
14557: PPUSH
14558: LD_VAR 0 6
14562: PPUSH
14563: LD_VAR 0 4
14567: PUSH
14568: LD_INT 1
14570: PPUSH
14571: LD_VAR 0 4
14575: PPUSH
14576: CALL_OW 12
14580: ARRAY
14581: PPUSH
14582: CALL_OW 185
14586: GO 14540
14588: POP
14589: POP
// end ;
14590: LD_VAR 0 8
14594: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14595: LD_INT 0
14597: PPUSH
14598: PPUSH
14599: PPUSH
14600: PPUSH
14601: PPUSH
14602: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14603: LD_ADDR_VAR 0 6
14607: PUSH
14608: LD_INT 22
14610: PUSH
14611: LD_VAR 0 1
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 9
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14639: LD_ADDR_VAR 0 7
14643: PUSH
14644: LD_INT 81
14646: PUSH
14647: LD_VAR 0 1
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 3
14658: PUSH
14659: LD_INT 21
14661: PUSH
14662: LD_INT 3
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PPUSH
14677: CALL_OW 69
14681: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14682: LD_ADDR_VAR 0 4
14686: PUSH
14687: LD_INT 1
14689: PPUSH
14690: LD_INT 3
14692: PPUSH
14693: CALL_OW 12
14697: ST_TO_ADDR
// for i = 1 to list do
14698: LD_ADDR_VAR 0 5
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 6
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14916
// for ta in filter do
14716: LD_ADDR_VAR 0 3
14720: PUSH
14721: LD_VAR 0 7
14725: PUSH
14726: FOR_IN
14727: IFFALSE 14912
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14729: LD_VAR 0 6
14733: PUSH
14734: LD_VAR 0 5
14738: ARRAY
14739: PPUSH
14740: LD_VAR 0 3
14744: PPUSH
14745: CALL_OW 296
14749: PUSH
14750: LD_INT 15
14752: LESSEQUAL
14753: IFFALSE 14910
// begin case c of 1 :
14755: LD_VAR 0 4
14759: PUSH
14760: LD_INT 1
14762: DOUBLE
14763: EQUAL
14764: IFTRUE 14768
14766: GO 14806
14768: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14769: LD_VAR 0 6
14773: PUSH
14774: LD_VAR 0 5
14778: ARRAY
14779: PPUSH
14780: LD_VAR 0 3
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 3
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 154
14804: GO 14910
14806: LD_INT 2
14808: DOUBLE
14809: EQUAL
14810: IFTRUE 14814
14812: GO 14878
14814: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14815: LD_VAR 0 6
14819: PUSH
14820: LD_VAR 0 5
14824: ARRAY
14825: PPUSH
14826: LD_VAR 0 3
14830: PPUSH
14831: CALL_OW 250
14835: PUSH
14836: LD_INT 1
14838: NEG
14839: PPUSH
14840: LD_INT 1
14842: PPUSH
14843: CALL_OW 12
14847: PLUS
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PUSH
14859: LD_INT 1
14861: NEG
14862: PPUSH
14863: LD_INT 1
14865: PPUSH
14866: CALL_OW 12
14870: PLUS
14871: PPUSH
14872: CALL_OW 153
14876: GO 14910
14878: LD_INT 3
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 14909
14886: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14887: LD_VAR 0 6
14891: PUSH
14892: LD_VAR 0 5
14896: ARRAY
14897: PPUSH
14898: LD_VAR 0 3
14902: PPUSH
14903: CALL_OW 115
14907: GO 14910
14909: POP
// end ; end ;
14910: GO 14726
14912: POP
14913: POP
14914: GO 14713
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 2
14922: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
// r := 100 ;
14929: LD_ADDR_VAR 0 5
14933: PUSH
14934: LD_INT 100
14936: ST_TO_ADDR
// x := 0 ;
14937: LD_ADDR_VAR 0 6
14941: PUSH
14942: LD_INT 0
14944: ST_TO_ADDR
// while ( x < n ) do
14945: LD_VAR 0 6
14949: PUSH
14950: LD_VAR 0 2
14954: LESS
14955: IFFALSE 15242
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14957: LD_ADDR_VAR 0 4
14961: PUSH
14962: DOUBLE
14963: LD_INT 1
14965: DEC
14966: ST_TO_ADDR
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_INT 0
14974: PPUSH
14975: CALL_OW 517
14979: PUSH
14980: LD_INT 1
14982: ARRAY
14983: PUSH
14984: FOR_TO
14985: IFFALSE 15238
// begin if r > 50 then
14987: LD_VAR 0 5
14991: PUSH
14992: LD_INT 50
14994: GREATER
14995: IFFALSE 15214
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14997: LD_VAR 0 1
15001: PPUSH
15002: LD_INT 0
15004: PPUSH
15005: CALL_OW 517
15009: PUSH
15010: LD_INT 1
15012: ARRAY
15013: PUSH
15014: LD_VAR 0 4
15018: ARRAY
15019: PPUSH
15020: LD_VAR 0 1
15024: PPUSH
15025: LD_INT 0
15027: PPUSH
15028: CALL_OW 517
15032: PUSH
15033: LD_INT 2
15035: ARRAY
15036: PUSH
15037: LD_VAR 0 4
15041: ARRAY
15042: PPUSH
15043: CALL_OW 458
15047: NOT
15048: IFFALSE 15198
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15050: LD_VAR 0 1
15054: PPUSH
15055: LD_INT 0
15057: PPUSH
15058: CALL_OW 517
15062: PUSH
15063: LD_INT 1
15065: ARRAY
15066: PUSH
15067: LD_VAR 0 4
15071: ARRAY
15072: PPUSH
15073: LD_VAR 0 1
15077: PPUSH
15078: LD_INT 0
15080: PPUSH
15081: CALL_OW 517
15085: PUSH
15086: LD_INT 2
15088: ARRAY
15089: PUSH
15090: LD_VAR 0 4
15094: ARRAY
15095: PPUSH
15096: LD_INT 8
15098: PPUSH
15099: LD_INT 0
15101: PPUSH
15102: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15106: LD_ADDR_EXP 44
15110: PUSH
15111: LD_EXP 44
15115: PPUSH
15116: LD_INT 1
15118: PPUSH
15119: LD_VAR 0 1
15123: PPUSH
15124: LD_INT 0
15126: PPUSH
15127: CALL_OW 517
15131: PUSH
15132: LD_INT 1
15134: ARRAY
15135: PUSH
15136: LD_VAR 0 4
15140: ARRAY
15141: PUSH
15142: LD_VAR 0 1
15146: PPUSH
15147: LD_INT 0
15149: PPUSH
15150: CALL_OW 517
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PUSH
15159: LD_VAR 0 4
15163: ARRAY
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PPUSH
15169: CALL_OW 2
15173: ST_TO_ADDR
// r := 0 ;
15174: LD_ADDR_VAR 0 5
15178: PUSH
15179: LD_INT 0
15181: ST_TO_ADDR
// x := x + 1 ;
15182: LD_ADDR_VAR 0 6
15186: PUSH
15187: LD_VAR 0 6
15191: PUSH
15192: LD_INT 1
15194: PLUS
15195: ST_TO_ADDR
// end else
15196: GO 15212
// r := r + 35 ;
15198: LD_ADDR_VAR 0 5
15202: PUSH
15203: LD_VAR 0 5
15207: PUSH
15208: LD_INT 35
15210: PLUS
15211: ST_TO_ADDR
// end else
15212: GO 15236
// r := r + rand ( 10 , 25 ) ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_VAR 0 5
15223: PUSH
15224: LD_INT 10
15226: PPUSH
15227: LD_INT 25
15229: PPUSH
15230: CALL_OW 12
15234: PLUS
15235: ST_TO_ADDR
// end ;
15236: GO 14984
15238: POP
15239: POP
15240: GO 14945
// end ;
15242: LD_VAR 0 3
15246: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15247: LD_INT 0
15249: PPUSH
15250: PPUSH
15251: PPUSH
15252: PPUSH
// tmpTab = [ ] ;
15253: LD_ADDR_VAR 0 6
15257: PUSH
15258: EMPTY
15259: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15260: LD_INT 22
15262: PUSH
15263: LD_VAR 0 1
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 30
15274: PUSH
15275: LD_INT 32
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: PUSH
15291: LD_INT 0
15293: GREATER
15294: IFFALSE 15377
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15296: LD_ADDR_VAR 0 4
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: PUSH
15332: FOR_IN
15333: IFFALSE 15375
// begin for j in UnitsInside ( i ) do
15335: LD_ADDR_VAR 0 5
15339: PUSH
15340: LD_VAR 0 4
15344: PPUSH
15345: CALL_OW 313
15349: PUSH
15350: FOR_IN
15351: IFFALSE 15371
// tmpTab = tmpTab ^ j ;
15353: LD_ADDR_VAR 0 6
15357: PUSH
15358: LD_VAR 0 6
15362: PUSH
15363: LD_VAR 0 5
15367: ADD
15368: ST_TO_ADDR
15369: GO 15350
15371: POP
15372: POP
// end ;
15373: GO 15332
15375: POP
15376: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15377: LD_VAR 0 6
15381: PPUSH
15382: LD_VAR 0 2
15386: PPUSH
15387: CALL_OW 250
15391: PPUSH
15392: LD_VAR 0 2
15396: PPUSH
15397: CALL_OW 251
15401: PPUSH
15402: CALL_OW 114
// end ;
15406: LD_VAR 0 3
15410: RET
// export function CreateNature ; var i , un ; begin
15411: LD_INT 0
15413: PPUSH
15414: PPUSH
15415: PPUSH
// uc_side := 0 ;
15416: LD_ADDR_OWVAR 20
15420: PUSH
15421: LD_INT 0
15423: ST_TO_ADDR
// uc_nation := 0 ;
15424: LD_ADDR_OWVAR 21
15428: PUSH
15429: LD_INT 0
15431: ST_TO_ADDR
// InitHc ;
15432: CALL_OW 19
// hc_class := class_fish ;
15436: LD_ADDR_OWVAR 28
15440: PUSH
15441: LD_INT 20
15443: ST_TO_ADDR
// for i = 1 to 6 do
15444: LD_ADDR_VAR 0 2
15448: PUSH
15449: DOUBLE
15450: LD_INT 1
15452: DEC
15453: ST_TO_ADDR
15454: LD_INT 6
15456: PUSH
15457: FOR_TO
15458: IFFALSE 15477
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15460: CALL_OW 44
15464: PPUSH
15465: LD_INT 23
15467: PPUSH
15468: LD_INT 0
15470: PPUSH
15471: CALL_OW 49
15475: GO 15457
15477: POP
15478: POP
// for i = 1 to Difficulty + 2 do
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: DOUBLE
15485: LD_INT 1
15487: DEC
15488: ST_TO_ADDR
15489: LD_OWVAR 67
15493: PUSH
15494: LD_INT 2
15496: PLUS
15497: PUSH
15498: FOR_TO
15499: IFFALSE 15608
// begin hc_sex = sex_male ;
15501: LD_ADDR_OWVAR 27
15505: PUSH
15506: LD_INT 1
15508: ST_TO_ADDR
// uc_side = 0 ;
15509: LD_ADDR_OWVAR 20
15513: PUSH
15514: LD_INT 0
15516: ST_TO_ADDR
// uc_nation = nation_nature ;
15517: LD_ADDR_OWVAR 21
15521: PUSH
15522: LD_INT 0
15524: ST_TO_ADDR
// hc_class = class_tiger ;
15525: LD_ADDR_OWVAR 28
15529: PUSH
15530: LD_INT 14
15532: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15533: LD_ADDR_OWVAR 31
15537: PUSH
15538: LD_EXP 37
15542: PUSH
15543: LD_INT 0
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: LD_INT 0
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15558: LD_ADDR_OWVAR 35
15562: PUSH
15563: LD_INT 5
15565: NEG
15566: PPUSH
15567: LD_INT 5
15569: PPUSH
15570: CALL_OW 12
15574: PUSH
15575: LD_OWVAR 67
15579: MUL
15580: ST_TO_ADDR
// un = CreateHuman ;
15581: LD_ADDR_VAR 0 3
15585: PUSH
15586: CALL_OW 44
15590: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15591: LD_VAR 0 3
15595: PPUSH
15596: LD_INT 24
15598: PPUSH
15599: LD_INT 0
15601: PPUSH
15602: CALL_OW 49
// end ;
15606: GO 15498
15608: POP
15609: POP
// for i = 1 to rand ( 3 , 4 ) do
15610: LD_ADDR_VAR 0 2
15614: PUSH
15615: DOUBLE
15616: LD_INT 1
15618: DEC
15619: ST_TO_ADDR
15620: LD_INT 3
15622: PPUSH
15623: LD_INT 4
15625: PPUSH
15626: CALL_OW 12
15630: PUSH
15631: FOR_TO
15632: IFFALSE 15724
// begin hc_sex = sex_male ;
15634: LD_ADDR_OWVAR 27
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// uc_side = 0 ;
15642: LD_ADDR_OWVAR 20
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// uc_nation = nation_nature ;
15650: LD_ADDR_OWVAR 21
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// hc_class = 18 ;
15658: LD_ADDR_OWVAR 28
15662: PUSH
15663: LD_INT 18
15665: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15666: LD_ADDR_OWVAR 31
15670: PUSH
15671: LD_INT 0
15673: PUSH
15674: LD_INT 0
15676: PUSH
15677: LD_INT 0
15679: PUSH
15680: LD_INT 0
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: ST_TO_ADDR
// hc_agressivity = 0 ;
15689: LD_ADDR_OWVAR 35
15693: PUSH
15694: LD_INT 0
15696: ST_TO_ADDR
// un = CreateHuman ;
15697: LD_ADDR_VAR 0 3
15701: PUSH
15702: CALL_OW 44
15706: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15707: LD_VAR 0 3
15711: PPUSH
15712: LD_INT 24
15714: PPUSH
15715: LD_INT 0
15717: PPUSH
15718: CALL_OW 49
// end ;
15722: GO 15631
15724: POP
15725: POP
// for i = 1 to rand ( 1 , 3 ) do
15726: LD_ADDR_VAR 0 2
15730: PUSH
15731: DOUBLE
15732: LD_INT 1
15734: DEC
15735: ST_TO_ADDR
15736: LD_INT 1
15738: PPUSH
15739: LD_INT 3
15741: PPUSH
15742: CALL_OW 12
15746: PUSH
15747: FOR_TO
15748: IFFALSE 15896
// begin hc_sex = sex_male ;
15750: LD_ADDR_OWVAR 27
15754: PUSH
15755: LD_INT 1
15757: ST_TO_ADDR
// uc_side = 0 ;
15758: LD_ADDR_OWVAR 20
15762: PUSH
15763: LD_INT 0
15765: ST_TO_ADDR
// uc_nation = nation_nature ;
15766: LD_ADDR_OWVAR 21
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// hc_class = class_apeman ;
15774: LD_ADDR_OWVAR 28
15778: PUSH
15779: LD_INT 12
15781: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15782: LD_ADDR_OWVAR 31
15786: PUSH
15787: LD_EXP 36
15791: PPUSH
15792: LD_EXP 37
15796: PPUSH
15797: CALL_OW 12
15801: PUSH
15802: LD_EXP 36
15806: PPUSH
15807: LD_EXP 37
15811: PPUSH
15812: CALL_OW 12
15816: PUSH
15817: LD_EXP 36
15821: PPUSH
15822: LD_EXP 37
15826: PPUSH
15827: CALL_OW 12
15831: PUSH
15832: LD_EXP 36
15836: PPUSH
15837: LD_EXP 37
15841: PPUSH
15842: CALL_OW 12
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15853: LD_ADDR_OWVAR 35
15857: PUSH
15858: LD_INT 1
15860: PPUSH
15861: LD_INT 20
15863: PPUSH
15864: CALL_OW 12
15868: ST_TO_ADDR
// un = CreateHuman ;
15869: LD_ADDR_VAR 0 3
15873: PUSH
15874: CALL_OW 44
15878: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15879: LD_VAR 0 3
15883: PPUSH
15884: LD_INT 24
15886: PPUSH
15887: LD_INT 0
15889: PPUSH
15890: CALL_OW 49
// end ;
15894: GO 15747
15896: POP
15897: POP
// end ; end_of_file
15898: LD_VAR 0 1
15902: RET
// on UnitDestroyed ( unit ) do var i ;
15903: LD_INT 0
15905: PPUSH
// begin if unit in russianTanks then
15906: LD_VAR 0 1
15910: PUSH
15911: LD_EXP 39
15915: IN
15916: IFFALSE 15934
// russianTanks := russianTanks diff unit ;
15918: LD_ADDR_EXP 39
15922: PUSH
15923: LD_EXP 39
15927: PUSH
15928: LD_VAR 0 1
15932: DIFF
15933: ST_TO_ADDR
// if unit in russianTimeLapsers then
15934: LD_VAR 0 1
15938: PUSH
15939: LD_EXP 40
15943: IN
15944: IFFALSE 15962
// russianTimeLapsers := russianTimeLapsers diff unit ;
15946: LD_ADDR_EXP 40
15950: PUSH
15951: LD_EXP 40
15955: PUSH
15956: LD_VAR 0 1
15960: DIFF
15961: ST_TO_ADDR
// if unit in RuScientists then
15962: LD_VAR 0 1
15966: PUSH
15967: LD_EXP 34
15971: IN
15972: IFFALSE 16004
// begin RuScientists = RuScientists diff unit ;
15974: LD_ADDR_EXP 34
15978: PUSH
15979: LD_EXP 34
15983: PUSH
15984: LD_VAR 0 1
15988: DIFF
15989: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
15990: LD_ADDR_EXP 35
15994: PUSH
15995: LD_EXP 35
15999: PUSH
16000: LD_INT 1
16002: PLUS
16003: ST_TO_ADDR
// end ; end ;
16004: PPOPN 2
16006: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16007: LD_VAR 0 3
16011: PPUSH
16012: CALL_OW 264
16016: PUSH
16017: LD_INT 9
16019: EQUAL
16020: IFFALSE 16036
// laserCounterDestroy := laserCounterDestroy + 1 ;
16022: LD_ADDR_EXP 50
16026: PUSH
16027: LD_EXP 50
16031: PUSH
16032: LD_INT 1
16034: PLUS
16035: ST_TO_ADDR
// end ;
16036: PPOPN 3
16038: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16039: LD_VAR 0 1
16043: PUSH
16044: LD_INT 10
16046: EQUAL
16047: PUSH
16048: LD_VAR 0 2
16052: PPUSH
16053: CALL_OW 255
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: AND
16062: PUSH
16063: LD_EXP 47
16067: PUSH
16068: LD_INT 0
16070: EQUAL
16071: AND
16072: IFFALSE 16184
// begin eventVar1 = 1 ;
16074: LD_ADDR_EXP 47
16078: PUSH
16079: LD_INT 1
16081: ST_TO_ADDR
// teleportExplored = 1 ;
16082: LD_ADDR_EXP 33
16086: PUSH
16087: LD_INT 1
16089: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16090: LD_STRING M2a
16092: PPUSH
16093: CALL_OW 337
// wait ( 0 0$2 ) ;
16097: LD_INT 70
16099: PPUSH
16100: CALL_OW 67
// DialogueOn ;
16104: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16108: LD_INT 22
16110: PUSH
16111: LD_INT 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 1
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PPUSH
16132: CALL_OW 69
16136: PPUSH
16137: LD_STRING DT3a-Sol1-1
16139: PPUSH
16140: LD_STRING DT3a-FSol1-1
16142: PPUSH
16143: CALL 12328 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16147: LD_EXP 1
16151: PPUSH
16152: LD_STRING DT3a-JMM-1
16154: PPUSH
16155: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16159: LD_VAR 0 2
16163: PPUSH
16164: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16168: LD_EXP 1
16172: PPUSH
16173: LD_STRING DT3a-JMM-1a
16175: PPUSH
16176: CALL_OW 88
// DialogueOff ;
16180: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16184: LD_VAR 0 1
16188: PUSH
16189: LD_INT 10
16191: EQUAL
16192: PUSH
16193: LD_VAR 0 2
16197: PPUSH
16198: CALL_OW 247
16202: PUSH
16203: LD_INT 2
16205: EQUAL
16206: AND
16207: PUSH
16208: LD_VAR 0 2
16212: PPUSH
16213: CALL_OW 255
16217: PUSH
16218: LD_INT 3
16220: EQUAL
16221: AND
16222: PUSH
16223: LD_EXP 28
16227: PUSH
16228: LD_INT 0
16230: EQUAL
16231: AND
16232: IFFALSE 16249
// begin wait ( 0 0$3 ) ;
16234: LD_INT 105
16236: PPUSH
16237: CALL_OW 67
// vehicleTeleported = 1 ;
16241: LD_ADDR_EXP 28
16245: PUSH
16246: LD_INT 1
16248: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16249: LD_VAR 0 1
16253: PUSH
16254: LD_INT 10
16256: EQUAL
16257: PUSH
16258: LD_VAR 0 2
16262: PPUSH
16263: CALL_OW 247
16267: PUSH
16268: LD_INT 2
16270: EQUAL
16271: AND
16272: PUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: CALL_OW 255
16282: PUSH
16283: LD_INT 3
16285: EQUAL
16286: AND
16287: PUSH
16288: LD_EXP 28
16292: PUSH
16293: LD_INT 2
16295: EQUAL
16296: AND
16297: IFFALSE 16314
// begin wait ( 0 0$3 ) ;
16299: LD_INT 105
16301: PPUSH
16302: CALL_OW 67
// vehicleTeleported = 3 ;
16306: LD_ADDR_EXP 28
16310: PUSH
16311: LD_INT 3
16313: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16314: LD_VAR 0 1
16318: PUSH
16319: LD_INT 10
16321: EQUAL
16322: PUSH
16323: LD_VAR 0 2
16327: PPUSH
16328: CALL_OW 247
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: AND
16337: PUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 255
16347: PUSH
16348: LD_INT 3
16350: EQUAL
16351: AND
16352: IFFALSE 16368
// tpCounter = tpCounter + 1 ;
16354: LD_ADDR_EXP 29
16358: PUSH
16359: LD_EXP 29
16363: PUSH
16364: LD_INT 1
16366: PLUS
16367: ST_TO_ADDR
// end ;
16368: PPOPN 2
16370: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16371: LD_VAR 0 1
16375: PPUSH
16376: CALL_OW 264
16380: PUSH
16381: LD_INT 7
16383: EQUAL
16384: IFFALSE 16394
// rocketBuilded := true ;
16386: LD_ADDR_EXP 51
16390: PUSH
16391: LD_INT 1
16393: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16394: LD_VAR 0 2
16398: PUSH
16399: LD_INT 21
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 2
16407: PUSH
16408: LD_INT 112
16410: EQUAL
16411: OR
16412: IFFALSE 16533
// if GetSide ( vehicle ) = 3 then
16414: LD_VAR 0 1
16418: PPUSH
16419: CALL_OW 255
16423: PUSH
16424: LD_INT 3
16426: EQUAL
16427: IFFALSE 16533
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 264
16438: PUSH
16439: LD_INT 46
16441: EQUAL
16442: PUSH
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 264
16452: PUSH
16453: LD_INT 45
16455: EQUAL
16456: OR
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 264
16467: PUSH
16468: LD_INT 44
16470: EQUAL
16471: OR
16472: IFFALSE 16490
// begin russianTanks = russianTanks ^ vehicle ;
16474: LD_ADDR_EXP 39
16478: PUSH
16479: LD_EXP 39
16483: PUSH
16484: LD_VAR 0 1
16488: ADD
16489: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16490: LD_VAR 0 1
16494: PPUSH
16495: CALL_OW 264
16499: PUSH
16500: LD_INT 49
16502: EQUAL
16503: IFFALSE 16533
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16505: LD_ADDR_EXP 40
16509: PUSH
16510: LD_EXP 40
16514: PUSH
16515: LD_VAR 0 1
16519: ADD
16520: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16521: LD_VAR 0 1
16525: PPUSH
16526: LD_INT 137
16528: PPUSH
16529: CALL_OW 120
// end ; end ; end ;
16533: PPOPN 2
16535: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16536: LD_INT 0
16538: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16539: LD_VAR 0 2
16543: PPUSH
16544: CALL_OW 255
16548: PUSH
16549: LD_INT 3
16551: EQUAL
16552: PUSH
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 257
16562: PUSH
16563: LD_INT 3
16565: EQUAL
16566: AND
16567: PUSH
16568: LD_INT 21
16570: PPUSH
16571: CALL_OW 255
16575: PUSH
16576: LD_INT 3
16578: EQUAL
16579: AND
16580: PUSH
16581: LD_INT 21
16583: PPUSH
16584: CALL_OW 302
16588: AND
16589: IFFALSE 16603
// ComEnterUnit ( human , ru_fact ) ;
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_INT 21
16598: PPUSH
16599: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16603: LD_VAR 0 2
16607: PPUSH
16608: CALL_OW 257
16612: PUSH
16613: LD_INT 4
16615: EQUAL
16616: PUSH
16617: LD_VAR 0 2
16621: PPUSH
16622: CALL_OW 255
16626: PUSH
16627: LD_INT 3
16629: EQUAL
16630: AND
16631: PUSH
16632: LD_EXP 41
16636: PUSH
16637: LD_INT 0
16639: EQUAL
16640: AND
16641: IFFALSE 16703
// for i in RuScientists do
16643: LD_ADDR_VAR 0 3
16647: PUSH
16648: LD_EXP 34
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16701
// if i = human then
16656: LD_VAR 0 3
16660: PUSH
16661: LD_VAR 0 2
16665: EQUAL
16666: IFFALSE 16699
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16668: LD_VAR 0 3
16672: PPUSH
16673: LD_INT 13
16675: PUSH
16676: LD_INT 14
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PUSH
16683: LD_INT 1
16685: PPUSH
16686: LD_INT 2
16688: PPUSH
16689: CALL_OW 12
16693: ARRAY
16694: PPUSH
16695: CALL_OW 113
16699: GO 16653
16701: POP
16702: POP
// end ;
16703: PPOPN 3
16705: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16706: LD_INT 0
16708: PPUSH
16709: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 255
16719: PUSH
16720: LD_INT 3
16722: EQUAL
16723: PUSH
16724: LD_VAR 0 2
16728: PPUSH
16729: CALL_OW 257
16733: PUSH
16734: LD_INT 4
16736: EQUAL
16737: AND
16738: IFFALSE 16880
// for i in RuScientists do
16740: LD_ADDR_VAR 0 3
16744: PUSH
16745: LD_EXP 34
16749: PUSH
16750: FOR_IN
16751: IFFALSE 16878
// if i = human then
16753: LD_VAR 0 3
16757: PUSH
16758: LD_VAR 0 2
16762: EQUAL
16763: IFFALSE 16876
// if IsOk ( rutp ) then
16765: LD_INT 137
16767: PPUSH
16768: CALL_OW 302
16772: IFFALSE 16845
// begin rnd = rand ( 1 , 2 ) ;
16774: LD_ADDR_VAR 0 4
16778: PUSH
16779: LD_INT 1
16781: PPUSH
16782: LD_INT 2
16784: PPUSH
16785: CALL_OW 12
16789: ST_TO_ADDR
// if rnd = 1 then
16790: LD_VAR 0 4
16794: PUSH
16795: LD_INT 1
16797: EQUAL
16798: IFFALSE 16812
// ComEnterUnit ( vehicle , rutp ) ;
16800: LD_VAR 0 1
16804: PPUSH
16805: LD_INT 137
16807: PPUSH
16808: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: LD_INT 13
16819: PUSH
16820: LD_INT 14
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_INT 2
16832: PPUSH
16833: CALL_OW 12
16837: ARRAY
16838: PPUSH
16839: CALL_OW 173
// end else
16843: GO 16876
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16845: LD_VAR 0 1
16849: PPUSH
16850: LD_INT 13
16852: PUSH
16853: LD_INT 14
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 1
16862: PPUSH
16863: LD_INT 2
16865: PPUSH
16866: CALL_OW 12
16870: ARRAY
16871: PPUSH
16872: CALL_OW 113
// end ;
16876: GO 16750
16878: POP
16879: POP
// end ;
16880: PPOPN 4
16882: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: CALL 32942 0 1
// end ; end_of_file
16892: PPOPN 1
16894: END
// every 0 0$1 trigger ruAI = 1 do
16895: LD_EXP 41
16899: PUSH
16900: LD_INT 1
16902: EQUAL
16903: IFFALSE 17015
16905: GO 16907
16907: DISABLE
// begin enable ;
16908: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16909: LD_INT 3
16911: PPUSH
16912: LD_INT 6
16914: PPUSH
16915: LD_INT 9
16917: PPUSH
16918: LD_EXP 38
16922: PPUSH
16923: CALL 13297 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 4
16932: PPUSH
16933: LD_INT 10
16935: PPUSH
16936: LD_EXP 38
16940: PPUSH
16941: CALL 13297 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16945: LD_INT 3
16947: PPUSH
16948: LD_INT 9
16950: PPUSH
16951: CALL 14268 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16955: LD_INT 3
16957: PPUSH
16958: LD_INT 10
16960: PPUSH
16961: CALL 14268 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16965: LD_INT 3
16967: PPUSH
16968: LD_INT 16
16970: PPUSH
16971: LD_INT 9
16973: PPUSH
16974: LD_INT 91
16976: PPUSH
16977: CALL 13688 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 17
16986: PPUSH
16987: LD_INT 10
16989: PPUSH
16990: LD_INT 47
16992: PUSH
16993: LD_INT 129
16995: PUSH
16996: LD_INT 135
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: PPUSH
17004: CALL 13688 0 4
// IntBazooka ( 3 ) ;
17008: LD_INT 3
17010: PPUSH
17011: CALL 14595 0 1
// end ;
17015: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
17016: LD_EXP 39
17020: PUSH
17021: LD_INT 3
17023: PUSH
17024: LD_INT 4
17026: PUSH
17027: LD_INT 4
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: PUSH
17035: LD_OWVAR 67
17039: ARRAY
17040: GREATEREQUAL
17041: IFFALSE 17513
17043: GO 17045
17045: DISABLE
17046: LD_INT 0
17048: PPUSH
17049: PPUSH
17050: PPUSH
17051: PPUSH
// begin enable ;
17052: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17053: LD_ADDR_VAR 0 2
17057: PUSH
17058: LD_EXP 39
17062: PUSH
17063: LD_EXP 40
17067: UNION
17068: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17069: LD_ADDR_EXP 39
17073: PUSH
17074: LD_EXP 39
17078: PUSH
17079: LD_VAR 0 2
17083: DIFF
17084: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17085: LD_ADDR_EXP 40
17089: PUSH
17090: LD_EXP 40
17094: PUSH
17095: LD_VAR 0 2
17099: DIFF
17100: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17101: LD_INT 10
17103: PPUSH
17104: CALL_OW 302
17108: IFFALSE 17191
// begin for j in tmp do
17110: LD_ADDR_VAR 0 1
17114: PUSH
17115: LD_VAR 0 2
17119: PUSH
17120: FOR_IN
17121: IFFALSE 17164
// if attackTactic < 2 then
17123: LD_EXP 43
17127: PUSH
17128: LD_INT 2
17130: LESS
17131: IFFALSE 17147
// ComEnterUnit ( j , ruteleprt ) else
17133: LD_VAR 0 1
17137: PPUSH
17138: LD_INT 10
17140: PPUSH
17141: CALL_OW 120
17145: GO 17162
// ComMoveXY ( j , 88 , 69 ) ;
17147: LD_VAR 0 1
17151: PPUSH
17152: LD_INT 88
17154: PPUSH
17155: LD_INT 69
17157: PPUSH
17158: CALL_OW 111
17162: GO 17120
17164: POP
17165: POP
// repeat wait ( 0 0$1 ) ;
17166: LD_INT 35
17168: PPUSH
17169: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17173: LD_VAR 0 2
17177: PPUSH
17178: LD_INT 60
17180: PUSH
17181: EMPTY
17182: LIST
17183: PPUSH
17184: CALL_OW 72
17188: NOT
17189: IFFALSE 17166
// end ; repeat wait ( 0 0$1 ) ;
17191: LD_INT 35
17193: PPUSH
17194: CALL_OW 67
// for j in tmp do
17198: LD_ADDR_VAR 0 1
17202: PUSH
17203: LD_VAR 0 2
17207: PUSH
17208: FOR_IN
17209: IFFALSE 17504
// begin if IsDead ( j ) then
17211: LD_VAR 0 1
17215: PPUSH
17216: CALL_OW 301
17220: IFFALSE 17238
// tmp := tmp diff j ;
17222: LD_ADDR_VAR 0 2
17226: PUSH
17227: LD_VAR 0 2
17231: PUSH
17232: LD_VAR 0 1
17236: DIFF
17237: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17238: LD_ADDR_VAR 0 3
17242: PUSH
17243: LD_INT 81
17245: PUSH
17246: LD_INT 3
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: PPUSH
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 74
17267: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17268: LD_ADDR_VAR 0 4
17272: PUSH
17273: LD_INT 81
17275: PUSH
17276: LD_INT 3
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: PPUSH
17300: CALL_OW 69
17304: PPUSH
17305: LD_VAR 0 1
17309: PPUSH
17310: CALL_OW 74
17314: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 264
17324: PUSH
17325: LD_INT 49
17327: EQUAL
17328: IFFALSE 17436
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
17330: LD_VAR 0 2
17334: PPUSH
17335: LD_INT 3
17337: PUSH
17338: LD_INT 34
17340: PUSH
17341: LD_INT 49
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 72
17356: PUSH
17357: LD_INT 1
17359: GREATER
17360: IFFALSE 17410
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17362: LD_VAR 0 1
17366: PPUSH
17367: LD_VAR 0 2
17371: PPUSH
17372: LD_INT 3
17374: PUSH
17375: LD_INT 34
17377: PUSH
17378: LD_INT 49
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PPUSH
17389: CALL_OW 72
17393: PPUSH
17394: LD_VAR 0 1
17398: PPUSH
17399: CALL_OW 74
17403: PPUSH
17404: CALL_OW 112
17408: GO 17434
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 74
17429: PPUSH
17430: CALL_OW 112
// end else
17434: GO 17502
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17436: LD_VAR 0 1
17440: PPUSH
17441: LD_VAR 0 4
17445: PPUSH
17446: CALL_OW 296
17450: PUSH
17451: LD_VAR 0 1
17455: PPUSH
17456: LD_VAR 0 3
17460: PPUSH
17461: CALL_OW 296
17465: PUSH
17466: LD_INT 2
17468: PLUS
17469: LESS
17470: IFFALSE 17488
// ComAttackUnit ( j , target2 ) else
17472: LD_VAR 0 1
17476: PPUSH
17477: LD_VAR 0 4
17481: PPUSH
17482: CALL_OW 115
17486: GO 17502
// ComAttackUnit ( j , target1 ) ;
17488: LD_VAR 0 1
17492: PPUSH
17493: LD_VAR 0 3
17497: PPUSH
17498: CALL_OW 115
// end ; end ;
17502: GO 17208
17504: POP
17505: POP
// until not tmp ;
17506: LD_VAR 0 2
17510: NOT
17511: IFFALSE 17191
// end ;
17513: PPOPN 4
17515: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17516: LD_INT 4
17518: PPUSH
17519: CALL_OW 303
17523: IFFALSE 17538
17525: GO 17527
17527: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17528: LD_INT 3
17530: PPUSH
17531: LD_INT 4
17533: PPUSH
17534: CALL 15247 0 2
17538: END
// every 0 0$1 do
17539: GO 17541
17541: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17542: LD_INT 3
17544: PPUSH
17545: LD_INT 91
17547: PPUSH
17548: LD_INT 3
17550: PPUSH
17551: CALL 13056 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17555: LD_INT 3
17557: PPUSH
17558: LD_INT 47
17560: PPUSH
17561: LD_INT 3
17563: PPUSH
17564: CALL 13056 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17568: LD_INT 3
17570: PPUSH
17571: LD_INT 129
17573: PPUSH
17574: LD_INT 3
17576: PPUSH
17577: CALL 13056 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17581: LD_INT 3
17583: PPUSH
17584: LD_INT 3
17586: PPUSH
17587: LD_INT 3
17589: PPUSH
17590: CALL 13056 0 3
// end ;
17594: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17595: LD_INT 22
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 21
17607: PUSH
17608: LD_INT 3
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PPUSH
17619: CALL_OW 69
17623: IFFALSE 17688
17625: GO 17627
17627: DISABLE
// begin wait ( 0 0$40 ) ;
17628: LD_INT 1400
17630: PPUSH
17631: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17635: LD_INT 3
17637: PPUSH
17638: LD_INT 21
17640: PPUSH
17641: LD_INT 3
17643: PUSH
17644: LD_INT 4
17646: PUSH
17647: LD_INT 4
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: PUSH
17655: LD_OWVAR 67
17659: ARRAY
17660: PPUSH
17661: LD_INT 46
17663: PUSH
17664: LD_INT 45
17666: PUSH
17667: LD_INT 44
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: LIST
17674: PPUSH
17675: LD_INT 3
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: LD_INT 24
17683: PPUSH
17684: CALL 14448 0 7
// end ;
17688: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17689: LD_EXP 27
17693: PUSH
17694: LD_INT 2
17696: EQUAL
17697: PUSH
17698: LD_INT 21
17700: PPUSH
17701: CALL_OW 255
17705: PUSH
17706: LD_INT 3
17708: EQUAL
17709: AND
17710: PUSH
17711: LD_INT 112
17713: PPUSH
17714: CALL_OW 255
17718: PUSH
17719: LD_INT 3
17721: EQUAL
17722: AND
17723: PUSH
17724: LD_INT 21
17726: PPUSH
17727: CALL_OW 302
17731: AND
17732: PUSH
17733: LD_INT 112
17735: PPUSH
17736: CALL_OW 302
17740: AND
17741: PUSH
17742: LD_INT 22
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 50
17764: PUSH
17765: EMPTY
17766: LIST
17767: PUSH
17768: LD_INT 3
17770: PUSH
17771: LD_INT 58
17773: PUSH
17774: EMPTY
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PPUSH
17787: CALL_OW 69
17791: PUSH
17792: LD_INT 18
17794: PPUSH
17795: LD_INT 22
17797: PUSH
17798: LD_INT 3
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 2
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 70
17823: PUSH
17824: LD_INT 0
17826: EQUAL
17827: DIFF
17828: AND
17829: IFFALSE 17947
17831: GO 17833
17833: DISABLE
// begin enable ;
17834: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17835: LD_INT 3
17837: PPUSH
17838: LD_INT 21
17840: PPUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: LD_INT 4
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: PUSH
17855: LD_OWVAR 67
17859: ARRAY
17860: PPUSH
17861: LD_INT 46
17863: PUSH
17864: LD_INT 45
17866: PUSH
17867: LD_INT 44
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: PPUSH
17875: LD_INT 3
17877: PPUSH
17878: LD_INT 3
17880: PPUSH
17881: LD_INT 24
17883: PPUSH
17884: CALL 14448 0 7
// if russianTimeLapsers = 0 then
17888: LD_EXP 40
17892: PUSH
17893: LD_INT 0
17895: EQUAL
17896: IFFALSE 17947
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17898: LD_INT 3
17900: PPUSH
17901: LD_INT 112
17903: PPUSH
17904: LD_INT 1
17906: PUSH
17907: LD_INT 2
17909: PUSH
17910: LD_INT 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: LD_OWVAR 67
17922: ARRAY
17923: PPUSH
17924: LD_INT 49
17926: PUSH
17927: LD_INT 49
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: LD_INT 3
17936: PPUSH
17937: LD_INT 3
17939: PPUSH
17940: LD_INT 24
17942: PPUSH
17943: CALL 14448 0 7
// end ;
17947: END
// every 0 0$1 trigger arabianMines do var i ;
17948: LD_EXP 44
17952: IFFALSE 18073
17954: GO 17956
17956: DISABLE
17957: LD_INT 0
17959: PPUSH
// begin enable ;
17960: ENABLE
// for i in arabianMines do
17961: LD_ADDR_VAR 0 1
17965: PUSH
17966: LD_EXP 44
17970: PUSH
17971: FOR_IN
17972: IFFALSE 18071
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17974: LD_INT 22
17976: PUSH
17977: LD_INT 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 92
17986: PUSH
17987: LD_VAR 0 1
17991: PUSH
17992: LD_INT 1
17994: ARRAY
17995: PUSH
17996: LD_VAR 0 1
18000: PUSH
18001: LD_INT 2
18003: ARRAY
18004: PUSH
18005: LD_INT 3
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: IFFALSE 18069
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18024: LD_VAR 0 1
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: LD_VAR 0 1
18037: PUSH
18038: LD_INT 2
18040: ARRAY
18041: PPUSH
18042: LD_INT 5
18044: PPUSH
18045: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18049: LD_ADDR_EXP 44
18053: PUSH
18054: LD_EXP 44
18058: PPUSH
18059: LD_VAR 0 1
18063: PPUSH
18064: CALL_OW 3
18068: ST_TO_ADDR
// end ; end ;
18069: GO 17971
18071: POP
18072: POP
// end ;
18073: PPOPN 1
18075: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18076: LD_EXP 28
18080: PUSH
18081: LD_INT 4
18083: EQUAL
18084: PUSH
18085: LD_EXP 29
18089: PUSH
18090: LD_INT 6
18092: PUSH
18093: LD_INT 8
18095: PUSH
18096: LD_INT 8
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: LIST
18103: PUSH
18104: LD_OWVAR 67
18108: ARRAY
18109: EQUAL
18110: AND
18111: IFFALSE 18129
18113: GO 18115
18115: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18116: LD_INT 10
18118: PPUSH
18119: LD_INT 47
18121: PPUSH
18122: LD_INT 82
18124: PPUSH
18125: CALL_OW 243
18129: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18130: LD_EXP 28
18134: PUSH
18135: LD_INT 4
18137: EQUAL
18138: IFFALSE 18160
18140: GO 18142
18142: DISABLE
// begin enable ;
18143: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18144: LD_ADDR_EXP 43
18148: PUSH
18149: LD_INT 1
18151: PPUSH
18152: LD_INT 2
18154: PPUSH
18155: CALL_OW 12
18159: ST_TO_ADDR
// end ; end_of_file
18160: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18161: LD_INT 3
18163: PPUSH
18164: CALL_OW 301
18168: IFFALSE 18357
18170: GO 18172
18172: DISABLE
// begin if sciCounter = 0 then
18173: LD_EXP 35
18177: PUSH
18178: LD_INT 0
18180: EQUAL
18181: IFFALSE 18209
// begin Say ( JMM , D7a-JMM-1 ) ;
18183: LD_EXP 1
18187: PPUSH
18188: LD_STRING D7a-JMM-1
18190: PPUSH
18191: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18195: LD_EXP 22
18199: PPUSH
18200: LD_STRING D7a-Pow-1
18202: PPUSH
18203: CALL_OW 94
// end else
18207: GO 18353
// if sciCounter < 6 then
18209: LD_EXP 35
18213: PUSH
18214: LD_INT 6
18216: LESS
18217: IFFALSE 18245
// begin Say ( JMM , D7b-JMM-1 ) ;
18219: LD_EXP 1
18223: PPUSH
18224: LD_STRING D7b-JMM-1
18226: PPUSH
18227: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18231: LD_EXP 22
18235: PPUSH
18236: LD_STRING D7b-Pow-1
18238: PPUSH
18239: CALL_OW 94
// end else
18243: GO 18353
// begin Say ( JMM , D7c-JMM-1 ) ;
18245: LD_EXP 1
18249: PPUSH
18250: LD_STRING D7c-JMM-1
18252: PPUSH
18253: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18257: LD_EXP 22
18261: PPUSH
18262: LD_STRING D7c-Pow-1
18264: PPUSH
18265: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18269: LD_EXP 1
18273: PPUSH
18274: LD_STRING D7d-JMM-1
18276: PPUSH
18277: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18281: LD_EXP 22
18285: PPUSH
18286: LD_STRING D7d-Pow-1
18288: PPUSH
18289: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18293: LD_EXP 1
18297: PPUSH
18298: LD_STRING D7d-JMM-2
18300: PPUSH
18301: CALL_OW 88
// if askSiberite = 1 then
18305: LD_EXP 32
18309: PUSH
18310: LD_INT 1
18312: EQUAL
18313: IFFALSE 18329
// Say ( JMM , D7d-JMM-2a ) else
18315: LD_EXP 1
18319: PPUSH
18320: LD_STRING D7d-JMM-2a
18322: PPUSH
18323: CALL_OW 88
18327: GO 18341
// SayRadio ( Powell , D7d-Pow-2 ) ;
18329: LD_EXP 22
18333: PPUSH
18334: LD_STRING D7d-Pow-2
18336: PPUSH
18337: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18341: LD_EXP 22
18345: PPUSH
18346: LD_STRING D7d-Pow-2a
18348: PPUSH
18349: CALL_OW 94
// end ; FinishMission ;
18353: CALL 18358 0 0
// end ;
18357: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18358: LD_INT 0
18360: PPUSH
18361: PPUSH
18362: PPUSH
18363: PPUSH
// m1 := false ;
18364: LD_ADDR_VAR 0 2
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// m2 := false ;
18372: LD_ADDR_VAR 0 3
18376: PUSH
18377: LD_INT 0
18379: ST_TO_ADDR
// m3 := false ;
18380: LD_ADDR_VAR 0 4
18384: PUSH
18385: LD_INT 0
18387: ST_TO_ADDR
// if not westPathUsed then
18388: LD_EXP 49
18392: NOT
18393: IFFALSE 18402
// SetAchievement ( ACH_PATH ) ;
18395: LD_STRING ACH_PATH
18397: PPUSH
18398: CALL_OW 543
// if not rocketBuilded then
18402: LD_EXP 51
18406: NOT
18407: IFFALSE 18423
// begin wait ( 3 ) ;
18409: LD_INT 3
18411: PPUSH
18412: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18416: LD_STRING ACH_ROCKET
18418: PPUSH
18419: CALL_OW 543
// end ; if tick <= 40 40$00 then
18423: LD_OWVAR 1
18427: PUSH
18428: LD_INT 84000
18430: LESSEQUAL
18431: IFFALSE 18447
// begin wait ( 3 ) ;
18433: LD_INT 3
18435: PPUSH
18436: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18440: LD_STRING ACH_ASPEED_12
18442: PPUSH
18443: CALL_OW 543
// end ; if teleportExplored = 1 then
18447: LD_EXP 33
18451: PUSH
18452: LD_INT 1
18454: EQUAL
18455: IFFALSE 18477
// begin m1 := true ;
18457: LD_ADDR_VAR 0 2
18461: PUSH
18462: LD_INT 1
18464: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18465: LD_STRING Teleport
18467: PPUSH
18468: LD_INT 1
18470: PPUSH
18471: CALL_OW 101
// end else
18475: GO 18488
// AddMedal ( Teleport , - 1 ) ;
18477: LD_STRING Teleport
18479: PPUSH
18480: LD_INT 1
18482: NEG
18483: PPUSH
18484: CALL_OW 101
// if sciCounter > 2 then
18488: LD_EXP 35
18492: PUSH
18493: LD_INT 2
18495: GREATER
18496: IFFALSE 18518
// begin m2 := true ;
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: LD_INT 1
18505: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18506: LD_STRING Materials
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: CALL_OW 101
// end else
18516: GO 18529
// AddMedal ( Materials , - 1 ) ;
18518: LD_STRING Materials
18520: PPUSH
18521: LD_INT 1
18523: NEG
18524: PPUSH
18525: CALL_OW 101
// if sciCounter >= 6 then
18529: LD_EXP 35
18533: PUSH
18534: LD_INT 6
18536: GREATEREQUAL
18537: IFFALSE 18569
// begin m3 := true ;
18539: LD_ADDR_VAR 0 4
18543: PUSH
18544: LD_INT 1
18546: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18547: LD_STRING Scientists
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18557: LD_INT 1
18559: PPUSH
18560: LD_STRING 12_SciDed_1
18562: PPUSH
18563: CALL_OW 39
// end else
18567: GO 18590
// begin AddMedal ( Scientists , - 1 ) ;
18569: LD_STRING Scientists
18571: PPUSH
18572: LD_INT 1
18574: NEG
18575: PPUSH
18576: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18580: LD_INT 0
18582: PPUSH
18583: LD_STRING 12_SciDed_1
18585: PPUSH
18586: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18590: LD_EXP 31
18594: PPUSH
18595: LD_STRING 12_MainDepositFake_1
18597: PPUSH
18598: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18602: LD_VAR 0 2
18606: PUSH
18607: LD_VAR 0 3
18611: AND
18612: PUSH
18613: LD_VAR 0 4
18617: AND
18618: PUSH
18619: LD_OWVAR 67
18623: PUSH
18624: LD_INT 3
18626: EQUAL
18627: AND
18628: IFFALSE 18640
// SetAchievementEX ( ACH_AMER , 12 ) ;
18630: LD_STRING ACH_AMER
18632: PPUSH
18633: LD_INT 12
18635: PPUSH
18636: CALL_OW 564
// GiveMedals ( MAIN ) ;
18640: LD_STRING MAIN
18642: PPUSH
18643: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18647: LD_INT 22
18649: PUSH
18650: LD_INT 1
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 21
18659: PUSH
18660: LD_INT 1
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 25
18672: PUSH
18673: LD_INT 1
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 25
18682: PUSH
18683: LD_INT 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 25
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 25
18702: PUSH
18703: LD_INT 4
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 25
18712: PUSH
18713: LD_INT 5
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 25
18722: PUSH
18723: LD_INT 8
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PPUSH
18744: CALL_OW 69
18748: PPUSH
18749: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18753: LD_EXP 1
18757: PPUSH
18758: LD_EXP 46
18762: PUSH
18763: LD_STRING JMM
18765: STR
18766: PPUSH
18767: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18771: LD_EXP 7
18775: PPUSH
18776: LD_EXP 46
18780: PUSH
18781: LD_STRING Brown
18783: STR
18784: PPUSH
18785: CALL 12288 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18789: LD_EXP 3
18793: PPUSH
18794: LD_EXP 46
18798: PUSH
18799: LD_STRING Donaldson
18801: STR
18802: PPUSH
18803: CALL 12288 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18807: LD_EXP 4
18811: PPUSH
18812: LD_EXP 46
18816: PUSH
18817: LD_STRING Bobby
18819: STR
18820: PPUSH
18821: CALL 12288 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18825: LD_EXP 5
18829: PPUSH
18830: LD_EXP 46
18834: PUSH
18835: LD_STRING Cyrus
18837: STR
18838: PPUSH
18839: CALL 12288 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18843: LD_EXP 2
18847: PPUSH
18848: LD_EXP 46
18852: PUSH
18853: LD_STRING Lisa
18855: STR
18856: PPUSH
18857: CALL 12288 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18861: LD_EXP 12
18865: PPUSH
18866: LD_EXP 46
18870: PUSH
18871: LD_STRING Frank
18873: STR
18874: PPUSH
18875: CALL 12288 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18879: LD_EXP 13
18883: PPUSH
18884: LD_EXP 46
18888: PUSH
18889: LD_STRING Kikuchi
18891: STR
18892: PPUSH
18893: CALL 12288 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18897: LD_EXP 9
18901: PPUSH
18902: LD_EXP 46
18906: PUSH
18907: LD_STRING Houten
18909: STR
18910: PPUSH
18911: CALL 12288 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18915: LD_EXP 11
18919: PPUSH
18920: LD_EXP 46
18924: PUSH
18925: LD_STRING Gary
18927: STR
18928: PPUSH
18929: CALL 12288 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18933: LD_EXP 10
18937: PPUSH
18938: LD_EXP 46
18942: PUSH
18943: LD_STRING Cornell
18945: STR
18946: PPUSH
18947: CALL 12288 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18951: LD_EXP 6
18955: PPUSH
18956: LD_EXP 46
18960: PUSH
18961: LD_STRING Denis
18963: STR
18964: PPUSH
18965: CALL 12288 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18969: LD_EXP 8
18973: PPUSH
18974: LD_EXP 46
18978: PUSH
18979: LD_STRING Gladstone
18981: STR
18982: PPUSH
18983: CALL 12288 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18987: LD_INT 22
18989: PUSH
18990: LD_INT 1
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 23
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 21
19009: PUSH
19010: LD_INT 1
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: LD_INT 25
19022: PUSH
19023: LD_INT 1
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: LD_INT 25
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 25
19042: PUSH
19043: LD_INT 3
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 25
19052: PUSH
19053: LD_INT 4
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 25
19062: PUSH
19063: LD_INT 5
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 25
19072: PUSH
19073: LD_INT 8
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: PPUSH
19095: CALL_OW 69
19099: PUSH
19100: LD_EXP 1
19104: PUSH
19105: LD_EXP 7
19109: PUSH
19110: LD_EXP 3
19114: PUSH
19115: LD_EXP 4
19119: PUSH
19120: LD_EXP 5
19124: PUSH
19125: LD_EXP 2
19129: PUSH
19130: LD_EXP 12
19134: PUSH
19135: LD_EXP 8
19139: PUSH
19140: LD_EXP 13
19144: PUSH
19145: LD_EXP 6
19149: PUSH
19150: LD_EXP 9
19154: PUSH
19155: LD_EXP 11
19159: PUSH
19160: LD_EXP 10
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: DIFF
19180: PPUSH
19181: LD_STRING 12_other_survivors
19183: PPUSH
19184: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19188: LD_INT 22
19190: PUSH
19191: LD_INT 1
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 23
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 21
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 25
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 25
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 25
19243: PUSH
19244: LD_INT 3
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 25
19253: PUSH
19254: LD_INT 4
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 25
19263: PUSH
19264: LD_INT 5
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 25
19273: PUSH
19274: LD_INT 8
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 69
19300: PPUSH
19301: LD_STRING 12_kurt_squad
19303: PPUSH
19304: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19308: LD_EXP 14
19312: PPUSH
19313: LD_STRING 12_others
19315: PPUSH
19316: CALL_OW 38
// YouWin ;
19320: CALL_OW 103
// end ; end_of_file
19324: LD_VAR 0 1
19328: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19329: LD_EXP 1
19333: PPUSH
19334: CALL_OW 301
19338: IFFALSE 19350
19340: GO 19342
19342: DISABLE
// YouLost ( JMM ) ; end_of_file
19343: LD_STRING JMM
19345: PPUSH
19346: CALL_OW 104
19350: END
// every 0 0$01 do
19351: GO 19353
19353: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19354: LD_INT 1050
19356: PPUSH
19357: CALL_OW 67
// if cratesSpawned < 6 then
19361: LD_EXP 45
19365: PUSH
19366: LD_INT 6
19368: LESS
19369: IFFALSE 19406
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19371: LD_INT 3
19373: PPUSH
19374: LD_INT 5
19376: PPUSH
19377: CALL_OW 12
19381: PPUSH
19382: LD_INT 21
19384: PPUSH
19385: LD_INT 1
19387: PPUSH
19388: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19392: LD_ADDR_EXP 45
19396: PUSH
19397: LD_EXP 45
19401: PUSH
19402: LD_INT 1
19404: PLUS
19405: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19406: LD_EXP 45
19410: PUSH
19411: LD_INT 6
19413: GREATEREQUAL
19414: PUSH
19415: LD_EXP 45
19419: PUSH
19420: LD_INT 12
19422: LESS
19423: AND
19424: IFFALSE 19468
// begin wait ( 0 0$50 ) ;
19426: LD_INT 1750
19428: PPUSH
19429: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19433: LD_INT 3
19435: PPUSH
19436: LD_INT 5
19438: PPUSH
19439: CALL_OW 12
19443: PPUSH
19444: LD_INT 21
19446: PPUSH
19447: LD_INT 1
19449: PPUSH
19450: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19454: LD_ADDR_EXP 45
19458: PUSH
19459: LD_EXP 45
19463: PUSH
19464: LD_INT 1
19466: PLUS
19467: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19468: LD_EXP 45
19472: PUSH
19473: LD_INT 12
19475: GREATEREQUAL
19476: IFFALSE 19520
// begin wait ( 1 1$40 ) ;
19478: LD_INT 3500
19480: PPUSH
19481: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19485: LD_INT 3
19487: PPUSH
19488: LD_INT 5
19490: PPUSH
19491: CALL_OW 12
19495: PPUSH
19496: LD_INT 21
19498: PPUSH
19499: LD_INT 1
19501: PPUSH
19502: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19506: LD_ADDR_EXP 45
19510: PUSH
19511: LD_EXP 45
19515: PUSH
19516: LD_INT 1
19518: PLUS
19519: ST_TO_ADDR
// end ; until false ;
19520: LD_INT 0
19522: IFFALSE 19354
// end ; end_of_file
19524: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
19525: LD_INT 0
19527: PPUSH
// ar_miner := 81 ;
19528: LD_ADDR_EXP 59
19532: PUSH
19533: LD_INT 81
19535: ST_TO_ADDR
// ar_crane := 88 ;
19536: LD_ADDR_EXP 58
19540: PUSH
19541: LD_INT 88
19543: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19544: LD_ADDR_EXP 53
19548: PUSH
19549: LD_INT 89
19551: ST_TO_ADDR
// us_hack := 99 ;
19552: LD_ADDR_EXP 54
19556: PUSH
19557: LD_INT 99
19559: ST_TO_ADDR
// us_artillery := 97 ;
19560: LD_ADDR_EXP 55
19564: PUSH
19565: LD_INT 97
19567: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19568: LD_ADDR_EXP 56
19572: PUSH
19573: LD_INT 91
19575: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
19576: LD_ADDR_EXP 57
19580: PUSH
19581: LD_INT 92
19583: ST_TO_ADDR
// ru_radar := 98 ;
19584: LD_ADDR_EXP 52
19588: PUSH
19589: LD_INT 98
19591: ST_TO_ADDR
// tech_Artillery := 80 ;
19592: LD_ADDR_EXP 60
19596: PUSH
19597: LD_INT 80
19599: ST_TO_ADDR
// tech_RadMat := 81 ;
19600: LD_ADDR_EXP 61
19604: PUSH
19605: LD_INT 81
19607: ST_TO_ADDR
// tech_BasicTools := 82 ;
19608: LD_ADDR_EXP 62
19612: PUSH
19613: LD_INT 82
19615: ST_TO_ADDR
// tech_Cargo := 83 ;
19616: LD_ADDR_EXP 63
19620: PUSH
19621: LD_INT 83
19623: ST_TO_ADDR
// tech_Track := 84 ;
19624: LD_ADDR_EXP 64
19628: PUSH
19629: LD_INT 84
19631: ST_TO_ADDR
// tech_Crane := 85 ;
19632: LD_ADDR_EXP 65
19636: PUSH
19637: LD_INT 85
19639: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19640: LD_ADDR_EXP 66
19644: PUSH
19645: LD_INT 86
19647: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19648: LD_ADDR_EXP 67
19652: PUSH
19653: LD_INT 87
19655: ST_TO_ADDR
// end ;
19656: LD_VAR 0 1
19660: RET
// every 1 do
19661: GO 19663
19663: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19664: CALL 19525 0 0
19668: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
19669: LD_VAR 0 2
19673: PUSH
19674: LD_INT 100
19676: EQUAL
19677: IFFALSE 20626
// begin if not StreamModeActive then
19679: LD_EXP 68
19683: NOT
19684: IFFALSE 19694
// StreamModeActive := true ;
19686: LD_ADDR_EXP 68
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// if p3 = 0 then
19694: LD_VAR 0 3
19698: PUSH
19699: LD_INT 0
19701: EQUAL
19702: IFFALSE 19708
// InitStreamMode ;
19704: CALL 20784 0 0
// if p3 = 1 then
19708: LD_VAR 0 3
19712: PUSH
19713: LD_INT 1
19715: EQUAL
19716: IFFALSE 19726
// sRocket := true ;
19718: LD_ADDR_EXP 73
19722: PUSH
19723: LD_INT 1
19725: ST_TO_ADDR
// if p3 = 2 then
19726: LD_VAR 0 3
19730: PUSH
19731: LD_INT 2
19733: EQUAL
19734: IFFALSE 19744
// sSpeed := true ;
19736: LD_ADDR_EXP 72
19740: PUSH
19741: LD_INT 1
19743: ST_TO_ADDR
// if p3 = 3 then
19744: LD_VAR 0 3
19748: PUSH
19749: LD_INT 3
19751: EQUAL
19752: IFFALSE 19762
// sEngine := true ;
19754: LD_ADDR_EXP 74
19758: PUSH
19759: LD_INT 1
19761: ST_TO_ADDR
// if p3 = 4 then
19762: LD_VAR 0 3
19766: PUSH
19767: LD_INT 4
19769: EQUAL
19770: IFFALSE 19780
// sSpec := true ;
19772: LD_ADDR_EXP 71
19776: PUSH
19777: LD_INT 1
19779: ST_TO_ADDR
// if p3 = 5 then
19780: LD_VAR 0 3
19784: PUSH
19785: LD_INT 5
19787: EQUAL
19788: IFFALSE 19798
// sLevel := true ;
19790: LD_ADDR_EXP 75
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// if p3 = 6 then
19798: LD_VAR 0 3
19802: PUSH
19803: LD_INT 6
19805: EQUAL
19806: IFFALSE 19816
// sArmoury := true ;
19808: LD_ADDR_EXP 76
19812: PUSH
19813: LD_INT 1
19815: ST_TO_ADDR
// if p3 = 7 then
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 7
19823: EQUAL
19824: IFFALSE 19834
// sRadar := true ;
19826: LD_ADDR_EXP 77
19830: PUSH
19831: LD_INT 1
19833: ST_TO_ADDR
// if p3 = 8 then
19834: LD_VAR 0 3
19838: PUSH
19839: LD_INT 8
19841: EQUAL
19842: IFFALSE 19852
// sBunker := true ;
19844: LD_ADDR_EXP 78
19848: PUSH
19849: LD_INT 1
19851: ST_TO_ADDR
// if p3 = 9 then
19852: LD_VAR 0 3
19856: PUSH
19857: LD_INT 9
19859: EQUAL
19860: IFFALSE 19870
// sHack := true ;
19862: LD_ADDR_EXP 79
19866: PUSH
19867: LD_INT 1
19869: ST_TO_ADDR
// if p3 = 10 then
19870: LD_VAR 0 3
19874: PUSH
19875: LD_INT 10
19877: EQUAL
19878: IFFALSE 19888
// sFire := true ;
19880: LD_ADDR_EXP 80
19884: PUSH
19885: LD_INT 1
19887: ST_TO_ADDR
// if p3 = 11 then
19888: LD_VAR 0 3
19892: PUSH
19893: LD_INT 11
19895: EQUAL
19896: IFFALSE 19906
// sRefresh := true ;
19898: LD_ADDR_EXP 81
19902: PUSH
19903: LD_INT 1
19905: ST_TO_ADDR
// if p3 = 12 then
19906: LD_VAR 0 3
19910: PUSH
19911: LD_INT 12
19913: EQUAL
19914: IFFALSE 19924
// sExp := true ;
19916: LD_ADDR_EXP 82
19920: PUSH
19921: LD_INT 1
19923: ST_TO_ADDR
// if p3 = 13 then
19924: LD_VAR 0 3
19928: PUSH
19929: LD_INT 13
19931: EQUAL
19932: IFFALSE 19942
// sDepot := true ;
19934: LD_ADDR_EXP 83
19938: PUSH
19939: LD_INT 1
19941: ST_TO_ADDR
// if p3 = 14 then
19942: LD_VAR 0 3
19946: PUSH
19947: LD_INT 14
19949: EQUAL
19950: IFFALSE 19960
// sFlag := true ;
19952: LD_ADDR_EXP 84
19956: PUSH
19957: LD_INT 1
19959: ST_TO_ADDR
// if p3 = 15 then
19960: LD_VAR 0 3
19964: PUSH
19965: LD_INT 15
19967: EQUAL
19968: IFFALSE 19978
// sKamikadze := true ;
19970: LD_ADDR_EXP 92
19974: PUSH
19975: LD_INT 1
19977: ST_TO_ADDR
// if p3 = 16 then
19978: LD_VAR 0 3
19982: PUSH
19983: LD_INT 16
19985: EQUAL
19986: IFFALSE 19996
// sTroll := true ;
19988: LD_ADDR_EXP 93
19992: PUSH
19993: LD_INT 1
19995: ST_TO_ADDR
// if p3 = 17 then
19996: LD_VAR 0 3
20000: PUSH
20001: LD_INT 17
20003: EQUAL
20004: IFFALSE 20014
// sSlow := true ;
20006: LD_ADDR_EXP 94
20010: PUSH
20011: LD_INT 1
20013: ST_TO_ADDR
// if p3 = 18 then
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 18
20021: EQUAL
20022: IFFALSE 20032
// sLack := true ;
20024: LD_ADDR_EXP 95
20028: PUSH
20029: LD_INT 1
20031: ST_TO_ADDR
// if p3 = 19 then
20032: LD_VAR 0 3
20036: PUSH
20037: LD_INT 19
20039: EQUAL
20040: IFFALSE 20050
// sTank := true ;
20042: LD_ADDR_EXP 97
20046: PUSH
20047: LD_INT 1
20049: ST_TO_ADDR
// if p3 = 20 then
20050: LD_VAR 0 3
20054: PUSH
20055: LD_INT 20
20057: EQUAL
20058: IFFALSE 20068
// sRemote := true ;
20060: LD_ADDR_EXP 98
20064: PUSH
20065: LD_INT 1
20067: ST_TO_ADDR
// if p3 = 21 then
20068: LD_VAR 0 3
20072: PUSH
20073: LD_INT 21
20075: EQUAL
20076: IFFALSE 20086
// sPowell := true ;
20078: LD_ADDR_EXP 99
20082: PUSH
20083: LD_INT 1
20085: ST_TO_ADDR
// if p3 = 22 then
20086: LD_VAR 0 3
20090: PUSH
20091: LD_INT 22
20093: EQUAL
20094: IFFALSE 20104
// sTeleport := true ;
20096: LD_ADDR_EXP 102
20100: PUSH
20101: LD_INT 1
20103: ST_TO_ADDR
// if p3 = 23 then
20104: LD_VAR 0 3
20108: PUSH
20109: LD_INT 23
20111: EQUAL
20112: IFFALSE 20122
// sOilTower := true ;
20114: LD_ADDR_EXP 104
20118: PUSH
20119: LD_INT 1
20121: ST_TO_ADDR
// if p3 = 24 then
20122: LD_VAR 0 3
20126: PUSH
20127: LD_INT 24
20129: EQUAL
20130: IFFALSE 20140
// sShovel := true ;
20132: LD_ADDR_EXP 105
20136: PUSH
20137: LD_INT 1
20139: ST_TO_ADDR
// if p3 = 25 then
20140: LD_VAR 0 3
20144: PUSH
20145: LD_INT 25
20147: EQUAL
20148: IFFALSE 20158
// sSheik := true ;
20150: LD_ADDR_EXP 106
20154: PUSH
20155: LD_INT 1
20157: ST_TO_ADDR
// if p3 = 26 then
20158: LD_VAR 0 3
20162: PUSH
20163: LD_INT 26
20165: EQUAL
20166: IFFALSE 20176
// sEarthquake := true ;
20168: LD_ADDR_EXP 108
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// if p3 = 27 then
20176: LD_VAR 0 3
20180: PUSH
20181: LD_INT 27
20183: EQUAL
20184: IFFALSE 20194
// sAI := true ;
20186: LD_ADDR_EXP 109
20190: PUSH
20191: LD_INT 1
20193: ST_TO_ADDR
// if p3 = 28 then
20194: LD_VAR 0 3
20198: PUSH
20199: LD_INT 28
20201: EQUAL
20202: IFFALSE 20212
// sCargo := true ;
20204: LD_ADDR_EXP 112
20208: PUSH
20209: LD_INT 1
20211: ST_TO_ADDR
// if p3 = 29 then
20212: LD_VAR 0 3
20216: PUSH
20217: LD_INT 29
20219: EQUAL
20220: IFFALSE 20230
// sDLaser := true ;
20222: LD_ADDR_EXP 113
20226: PUSH
20227: LD_INT 1
20229: ST_TO_ADDR
// if p3 = 30 then
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 30
20237: EQUAL
20238: IFFALSE 20248
// sExchange := true ;
20240: LD_ADDR_EXP 114
20244: PUSH
20245: LD_INT 1
20247: ST_TO_ADDR
// if p3 = 31 then
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 31
20255: EQUAL
20256: IFFALSE 20266
// sFac := true ;
20258: LD_ADDR_EXP 115
20262: PUSH
20263: LD_INT 1
20265: ST_TO_ADDR
// if p3 = 32 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 32
20273: EQUAL
20274: IFFALSE 20284
// sPower := true ;
20276: LD_ADDR_EXP 116
20280: PUSH
20281: LD_INT 1
20283: ST_TO_ADDR
// if p3 = 33 then
20284: LD_VAR 0 3
20288: PUSH
20289: LD_INT 33
20291: EQUAL
20292: IFFALSE 20302
// sRandom := true ;
20294: LD_ADDR_EXP 117
20298: PUSH
20299: LD_INT 1
20301: ST_TO_ADDR
// if p3 = 34 then
20302: LD_VAR 0 3
20306: PUSH
20307: LD_INT 34
20309: EQUAL
20310: IFFALSE 20320
// sShield := true ;
20312: LD_ADDR_EXP 118
20316: PUSH
20317: LD_INT 1
20319: ST_TO_ADDR
// if p3 = 35 then
20320: LD_VAR 0 3
20324: PUSH
20325: LD_INT 35
20327: EQUAL
20328: IFFALSE 20338
// sTime := true ;
20330: LD_ADDR_EXP 119
20334: PUSH
20335: LD_INT 1
20337: ST_TO_ADDR
// if p3 = 36 then
20338: LD_VAR 0 3
20342: PUSH
20343: LD_INT 36
20345: EQUAL
20346: IFFALSE 20356
// sTools := true ;
20348: LD_ADDR_EXP 120
20352: PUSH
20353: LD_INT 1
20355: ST_TO_ADDR
// if p3 = 101 then
20356: LD_VAR 0 3
20360: PUSH
20361: LD_INT 101
20363: EQUAL
20364: IFFALSE 20374
// sSold := true ;
20366: LD_ADDR_EXP 85
20370: PUSH
20371: LD_INT 1
20373: ST_TO_ADDR
// if p3 = 102 then
20374: LD_VAR 0 3
20378: PUSH
20379: LD_INT 102
20381: EQUAL
20382: IFFALSE 20392
// sDiff := true ;
20384: LD_ADDR_EXP 86
20388: PUSH
20389: LD_INT 1
20391: ST_TO_ADDR
// if p3 = 103 then
20392: LD_VAR 0 3
20396: PUSH
20397: LD_INT 103
20399: EQUAL
20400: IFFALSE 20410
// sFog := true ;
20402: LD_ADDR_EXP 89
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// if p3 = 104 then
20410: LD_VAR 0 3
20414: PUSH
20415: LD_INT 104
20417: EQUAL
20418: IFFALSE 20428
// sReset := true ;
20420: LD_ADDR_EXP 90
20424: PUSH
20425: LD_INT 1
20427: ST_TO_ADDR
// if p3 = 105 then
20428: LD_VAR 0 3
20432: PUSH
20433: LD_INT 105
20435: EQUAL
20436: IFFALSE 20446
// sSun := true ;
20438: LD_ADDR_EXP 91
20442: PUSH
20443: LD_INT 1
20445: ST_TO_ADDR
// if p3 = 106 then
20446: LD_VAR 0 3
20450: PUSH
20451: LD_INT 106
20453: EQUAL
20454: IFFALSE 20464
// sTiger := true ;
20456: LD_ADDR_EXP 87
20460: PUSH
20461: LD_INT 1
20463: ST_TO_ADDR
// if p3 = 107 then
20464: LD_VAR 0 3
20468: PUSH
20469: LD_INT 107
20471: EQUAL
20472: IFFALSE 20482
// sBomb := true ;
20474: LD_ADDR_EXP 88
20478: PUSH
20479: LD_INT 1
20481: ST_TO_ADDR
// if p3 = 108 then
20482: LD_VAR 0 3
20486: PUSH
20487: LD_INT 108
20489: EQUAL
20490: IFFALSE 20500
// sWound := true ;
20492: LD_ADDR_EXP 96
20496: PUSH
20497: LD_INT 1
20499: ST_TO_ADDR
// if p3 = 109 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 109
20507: EQUAL
20508: IFFALSE 20518
// sBetray := true ;
20510: LD_ADDR_EXP 100
20514: PUSH
20515: LD_INT 1
20517: ST_TO_ADDR
// if p3 = 110 then
20518: LD_VAR 0 3
20522: PUSH
20523: LD_INT 110
20525: EQUAL
20526: IFFALSE 20536
// sContamin := true ;
20528: LD_ADDR_EXP 101
20532: PUSH
20533: LD_INT 1
20535: ST_TO_ADDR
// if p3 = 111 then
20536: LD_VAR 0 3
20540: PUSH
20541: LD_INT 111
20543: EQUAL
20544: IFFALSE 20554
// sOil := true ;
20546: LD_ADDR_EXP 103
20550: PUSH
20551: LD_INT 1
20553: ST_TO_ADDR
// if p3 = 112 then
20554: LD_VAR 0 3
20558: PUSH
20559: LD_INT 112
20561: EQUAL
20562: IFFALSE 20572
// sStu := true ;
20564: LD_ADDR_EXP 107
20568: PUSH
20569: LD_INT 1
20571: ST_TO_ADDR
// if p3 = 113 then
20572: LD_VAR 0 3
20576: PUSH
20577: LD_INT 113
20579: EQUAL
20580: IFFALSE 20590
// sBazooka := true ;
20582: LD_ADDR_EXP 110
20586: PUSH
20587: LD_INT 1
20589: ST_TO_ADDR
// if p3 = 114 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 114
20597: EQUAL
20598: IFFALSE 20608
// sMortar := true ;
20600: LD_ADDR_EXP 111
20604: PUSH
20605: LD_INT 1
20607: ST_TO_ADDR
// if p3 = 115 then
20608: LD_VAR 0 3
20612: PUSH
20613: LD_INT 115
20615: EQUAL
20616: IFFALSE 20626
// sRanger := true ;
20618: LD_ADDR_EXP 121
20622: PUSH
20623: LD_INT 1
20625: ST_TO_ADDR
// end ; if p2 = 101 then
20626: LD_VAR 0 2
20630: PUSH
20631: LD_INT 101
20633: EQUAL
20634: IFFALSE 20762
// begin case p3 of 1 :
20636: LD_VAR 0 3
20640: PUSH
20641: LD_INT 1
20643: DOUBLE
20644: EQUAL
20645: IFTRUE 20649
20647: GO 20656
20649: POP
// hHackUnlimitedResources ; 2 :
20650: CALL 31797 0 0
20654: GO 20762
20656: LD_INT 2
20658: DOUBLE
20659: EQUAL
20660: IFTRUE 20664
20662: GO 20671
20664: POP
// hHackSetLevel10 ; 3 :
20665: CALL 31930 0 0
20669: GO 20762
20671: LD_INT 3
20673: DOUBLE
20674: EQUAL
20675: IFTRUE 20679
20677: GO 20686
20679: POP
// hHackSetLevel10YourUnits ; 4 :
20680: CALL 32015 0 0
20684: GO 20762
20686: LD_INT 4
20688: DOUBLE
20689: EQUAL
20690: IFTRUE 20694
20692: GO 20701
20694: POP
// hHackInvincible ; 5 :
20695: CALL 32463 0 0
20699: GO 20762
20701: LD_INT 5
20703: DOUBLE
20704: EQUAL
20705: IFTRUE 20709
20707: GO 20716
20709: POP
// hHackInvisible ; 6 :
20710: CALL 32574 0 0
20714: GO 20762
20716: LD_INT 6
20718: DOUBLE
20719: EQUAL
20720: IFTRUE 20724
20722: GO 20731
20724: POP
// hHackChangeYourSide ; 7 :
20725: CALL 32631 0 0
20729: GO 20762
20731: LD_INT 7
20733: DOUBLE
20734: EQUAL
20735: IFTRUE 20739
20737: GO 20746
20739: POP
// hHackChangeUnitSide ; 8 :
20740: CALL 32673 0 0
20744: GO 20762
20746: LD_INT 8
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20761
20754: POP
// hHackFog ; end ;
20755: CALL 32774 0 0
20759: GO 20762
20761: POP
// end ; end ;
20762: PPOPN 6
20764: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
20765: GO 20767
20767: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20768: LD_STRING initStreamRollete();
20770: PPUSH
20771: CALL_OW 559
// InitStreamMode ;
20775: CALL 20784 0 0
// DefineStreamItems ( ) ;
20779: CALL 21224 0 0
// end ;
20783: END
// function InitStreamMode ; begin
20784: LD_INT 0
20786: PPUSH
// streamModeActive := false ;
20787: LD_ADDR_EXP 68
20791: PUSH
20792: LD_INT 0
20794: ST_TO_ADDR
// normalCounter := 36 ;
20795: LD_ADDR_EXP 69
20799: PUSH
20800: LD_INT 36
20802: ST_TO_ADDR
// hardcoreCounter := 16 ;
20803: LD_ADDR_EXP 70
20807: PUSH
20808: LD_INT 16
20810: ST_TO_ADDR
// sRocket := false ;
20811: LD_ADDR_EXP 73
20815: PUSH
20816: LD_INT 0
20818: ST_TO_ADDR
// sSpeed := false ;
20819: LD_ADDR_EXP 72
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
// sEngine := false ;
20827: LD_ADDR_EXP 74
20831: PUSH
20832: LD_INT 0
20834: ST_TO_ADDR
// sSpec := false ;
20835: LD_ADDR_EXP 71
20839: PUSH
20840: LD_INT 0
20842: ST_TO_ADDR
// sLevel := false ;
20843: LD_ADDR_EXP 75
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// sArmoury := false ;
20851: LD_ADDR_EXP 76
20855: PUSH
20856: LD_INT 0
20858: ST_TO_ADDR
// sRadar := false ;
20859: LD_ADDR_EXP 77
20863: PUSH
20864: LD_INT 0
20866: ST_TO_ADDR
// sBunker := false ;
20867: LD_ADDR_EXP 78
20871: PUSH
20872: LD_INT 0
20874: ST_TO_ADDR
// sHack := false ;
20875: LD_ADDR_EXP 79
20879: PUSH
20880: LD_INT 0
20882: ST_TO_ADDR
// sFire := false ;
20883: LD_ADDR_EXP 80
20887: PUSH
20888: LD_INT 0
20890: ST_TO_ADDR
// sRefresh := false ;
20891: LD_ADDR_EXP 81
20895: PUSH
20896: LD_INT 0
20898: ST_TO_ADDR
// sExp := false ;
20899: LD_ADDR_EXP 82
20903: PUSH
20904: LD_INT 0
20906: ST_TO_ADDR
// sDepot := false ;
20907: LD_ADDR_EXP 83
20911: PUSH
20912: LD_INT 0
20914: ST_TO_ADDR
// sFlag := false ;
20915: LD_ADDR_EXP 84
20919: PUSH
20920: LD_INT 0
20922: ST_TO_ADDR
// sKamikadze := false ;
20923: LD_ADDR_EXP 92
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// sTroll := false ;
20931: LD_ADDR_EXP 93
20935: PUSH
20936: LD_INT 0
20938: ST_TO_ADDR
// sSlow := false ;
20939: LD_ADDR_EXP 94
20943: PUSH
20944: LD_INT 0
20946: ST_TO_ADDR
// sLack := false ;
20947: LD_ADDR_EXP 95
20951: PUSH
20952: LD_INT 0
20954: ST_TO_ADDR
// sTank := false ;
20955: LD_ADDR_EXP 97
20959: PUSH
20960: LD_INT 0
20962: ST_TO_ADDR
// sRemote := false ;
20963: LD_ADDR_EXP 98
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// sPowell := false ;
20971: LD_ADDR_EXP 99
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// sTeleport := false ;
20979: LD_ADDR_EXP 102
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
// sOilTower := false ;
20987: LD_ADDR_EXP 104
20991: PUSH
20992: LD_INT 0
20994: ST_TO_ADDR
// sShovel := false ;
20995: LD_ADDR_EXP 105
20999: PUSH
21000: LD_INT 0
21002: ST_TO_ADDR
// sSheik := false ;
21003: LD_ADDR_EXP 106
21007: PUSH
21008: LD_INT 0
21010: ST_TO_ADDR
// sEarthquake := false ;
21011: LD_ADDR_EXP 108
21015: PUSH
21016: LD_INT 0
21018: ST_TO_ADDR
// sAI := false ;
21019: LD_ADDR_EXP 109
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// sCargo := false ;
21027: LD_ADDR_EXP 112
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// sDLaser := false ;
21035: LD_ADDR_EXP 113
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// sExchange := false ;
21043: LD_ADDR_EXP 114
21047: PUSH
21048: LD_INT 0
21050: ST_TO_ADDR
// sFac := false ;
21051: LD_ADDR_EXP 115
21055: PUSH
21056: LD_INT 0
21058: ST_TO_ADDR
// sPower := false ;
21059: LD_ADDR_EXP 116
21063: PUSH
21064: LD_INT 0
21066: ST_TO_ADDR
// sRandom := false ;
21067: LD_ADDR_EXP 117
21071: PUSH
21072: LD_INT 0
21074: ST_TO_ADDR
// sShield := false ;
21075: LD_ADDR_EXP 118
21079: PUSH
21080: LD_INT 0
21082: ST_TO_ADDR
// sTime := false ;
21083: LD_ADDR_EXP 119
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// sTools := false ;
21091: LD_ADDR_EXP 120
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// sSold := false ;
21099: LD_ADDR_EXP 85
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
// sDiff := false ;
21107: LD_ADDR_EXP 86
21111: PUSH
21112: LD_INT 0
21114: ST_TO_ADDR
// sFog := false ;
21115: LD_ADDR_EXP 89
21119: PUSH
21120: LD_INT 0
21122: ST_TO_ADDR
// sReset := false ;
21123: LD_ADDR_EXP 90
21127: PUSH
21128: LD_INT 0
21130: ST_TO_ADDR
// sSun := false ;
21131: LD_ADDR_EXP 91
21135: PUSH
21136: LD_INT 0
21138: ST_TO_ADDR
// sTiger := false ;
21139: LD_ADDR_EXP 87
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// sBomb := false ;
21147: LD_ADDR_EXP 88
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// sWound := false ;
21155: LD_ADDR_EXP 96
21159: PUSH
21160: LD_INT 0
21162: ST_TO_ADDR
// sBetray := false ;
21163: LD_ADDR_EXP 100
21167: PUSH
21168: LD_INT 0
21170: ST_TO_ADDR
// sContamin := false ;
21171: LD_ADDR_EXP 101
21175: PUSH
21176: LD_INT 0
21178: ST_TO_ADDR
// sOil := false ;
21179: LD_ADDR_EXP 103
21183: PUSH
21184: LD_INT 0
21186: ST_TO_ADDR
// sStu := false ;
21187: LD_ADDR_EXP 107
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// sBazooka := false ;
21195: LD_ADDR_EXP 110
21199: PUSH
21200: LD_INT 0
21202: ST_TO_ADDR
// sMortar := false ;
21203: LD_ADDR_EXP 111
21207: PUSH
21208: LD_INT 0
21210: ST_TO_ADDR
// sRanger := false ;
21211: LD_ADDR_EXP 121
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
// end ;
21219: LD_VAR 0 1
21223: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
21224: LD_INT 0
21226: PPUSH
21227: PPUSH
21228: PPUSH
21229: PPUSH
21230: PPUSH
// result := [ ] ;
21231: LD_ADDR_VAR 0 1
21235: PUSH
21236: EMPTY
21237: ST_TO_ADDR
// if campaign_id = 1 then
21238: LD_OWVAR 69
21242: PUSH
21243: LD_INT 1
21245: EQUAL
21246: IFFALSE 24184
// begin case mission_number of 1 :
21248: LD_OWVAR 70
21252: PUSH
21253: LD_INT 1
21255: DOUBLE
21256: EQUAL
21257: IFTRUE 21261
21259: GO 21325
21261: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
21262: LD_ADDR_VAR 0 1
21266: PUSH
21267: LD_INT 2
21269: PUSH
21270: LD_INT 4
21272: PUSH
21273: LD_INT 11
21275: PUSH
21276: LD_INT 12
21278: PUSH
21279: LD_INT 15
21281: PUSH
21282: LD_INT 16
21284: PUSH
21285: LD_INT 22
21287: PUSH
21288: LD_INT 23
21290: PUSH
21291: LD_INT 26
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 101
21307: PUSH
21308: LD_INT 102
21310: PUSH
21311: LD_INT 106
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: ST_TO_ADDR
21323: GO 24182
21325: LD_INT 2
21327: DOUBLE
21328: EQUAL
21329: IFTRUE 21333
21331: GO 21405
21333: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
21334: LD_ADDR_VAR 0 1
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: LD_INT 4
21344: PUSH
21345: LD_INT 11
21347: PUSH
21348: LD_INT 12
21350: PUSH
21351: LD_INT 15
21353: PUSH
21354: LD_INT 16
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_INT 23
21362: PUSH
21363: LD_INT 26
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 101
21379: PUSH
21380: LD_INT 102
21382: PUSH
21383: LD_INT 105
21385: PUSH
21386: LD_INT 106
21388: PUSH
21389: LD_INT 108
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: ST_TO_ADDR
21403: GO 24182
21405: LD_INT 3
21407: DOUBLE
21408: EQUAL
21409: IFTRUE 21413
21411: GO 21489
21413: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
21414: LD_ADDR_VAR 0 1
21418: PUSH
21419: LD_INT 2
21421: PUSH
21422: LD_INT 4
21424: PUSH
21425: LD_INT 5
21427: PUSH
21428: LD_INT 11
21430: PUSH
21431: LD_INT 12
21433: PUSH
21434: LD_INT 15
21436: PUSH
21437: LD_INT 16
21439: PUSH
21440: LD_INT 22
21442: PUSH
21443: LD_INT 26
21445: PUSH
21446: LD_INT 36
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: PUSH
21461: LD_INT 101
21463: PUSH
21464: LD_INT 102
21466: PUSH
21467: LD_INT 105
21469: PUSH
21470: LD_INT 106
21472: PUSH
21473: LD_INT 108
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: ST_TO_ADDR
21487: GO 24182
21489: LD_INT 4
21491: DOUBLE
21492: EQUAL
21493: IFTRUE 21497
21495: GO 21581
21497: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
21498: LD_ADDR_VAR 0 1
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: LD_INT 4
21508: PUSH
21509: LD_INT 5
21511: PUSH
21512: LD_INT 8
21514: PUSH
21515: LD_INT 11
21517: PUSH
21518: LD_INT 12
21520: PUSH
21521: LD_INT 15
21523: PUSH
21524: LD_INT 16
21526: PUSH
21527: LD_INT 22
21529: PUSH
21530: LD_INT 23
21532: PUSH
21533: LD_INT 26
21535: PUSH
21536: LD_INT 36
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 101
21555: PUSH
21556: LD_INT 102
21558: PUSH
21559: LD_INT 105
21561: PUSH
21562: LD_INT 106
21564: PUSH
21565: LD_INT 108
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: ST_TO_ADDR
21579: GO 24182
21581: LD_INT 5
21583: DOUBLE
21584: EQUAL
21585: IFTRUE 21589
21587: GO 21689
21589: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
21590: LD_ADDR_VAR 0 1
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: LD_INT 4
21600: PUSH
21601: LD_INT 5
21603: PUSH
21604: LD_INT 6
21606: PUSH
21607: LD_INT 8
21609: PUSH
21610: LD_INT 11
21612: PUSH
21613: LD_INT 12
21615: PUSH
21616: LD_INT 15
21618: PUSH
21619: LD_INT 16
21621: PUSH
21622: LD_INT 22
21624: PUSH
21625: LD_INT 23
21627: PUSH
21628: LD_INT 25
21630: PUSH
21631: LD_INT 26
21633: PUSH
21634: LD_INT 36
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 101
21655: PUSH
21656: LD_INT 102
21658: PUSH
21659: LD_INT 105
21661: PUSH
21662: LD_INT 106
21664: PUSH
21665: LD_INT 108
21667: PUSH
21668: LD_INT 109
21670: PUSH
21671: LD_INT 112
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: ST_TO_ADDR
21687: GO 24182
21689: LD_INT 6
21691: DOUBLE
21692: EQUAL
21693: IFTRUE 21697
21695: GO 21817
21697: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
21698: LD_ADDR_VAR 0 1
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 4
21708: PUSH
21709: LD_INT 5
21711: PUSH
21712: LD_INT 6
21714: PUSH
21715: LD_INT 8
21717: PUSH
21718: LD_INT 11
21720: PUSH
21721: LD_INT 12
21723: PUSH
21724: LD_INT 15
21726: PUSH
21727: LD_INT 16
21729: PUSH
21730: LD_INT 20
21732: PUSH
21733: LD_INT 21
21735: PUSH
21736: LD_INT 22
21738: PUSH
21739: LD_INT 23
21741: PUSH
21742: LD_INT 25
21744: PUSH
21745: LD_INT 26
21747: PUSH
21748: LD_INT 30
21750: PUSH
21751: LD_INT 31
21753: PUSH
21754: LD_INT 32
21756: PUSH
21757: LD_INT 36
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 101
21783: PUSH
21784: LD_INT 102
21786: PUSH
21787: LD_INT 105
21789: PUSH
21790: LD_INT 106
21792: PUSH
21793: LD_INT 108
21795: PUSH
21796: LD_INT 109
21798: PUSH
21799: LD_INT 112
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: ST_TO_ADDR
21815: GO 24182
21817: LD_INT 7
21819: DOUBLE
21820: EQUAL
21821: IFTRUE 21825
21823: GO 21925
21825: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
21826: LD_ADDR_VAR 0 1
21830: PUSH
21831: LD_INT 2
21833: PUSH
21834: LD_INT 4
21836: PUSH
21837: LD_INT 5
21839: PUSH
21840: LD_INT 7
21842: PUSH
21843: LD_INT 11
21845: PUSH
21846: LD_INT 12
21848: PUSH
21849: LD_INT 15
21851: PUSH
21852: LD_INT 16
21854: PUSH
21855: LD_INT 20
21857: PUSH
21858: LD_INT 21
21860: PUSH
21861: LD_INT 22
21863: PUSH
21864: LD_INT 23
21866: PUSH
21867: LD_INT 25
21869: PUSH
21870: LD_INT 26
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 101
21891: PUSH
21892: LD_INT 102
21894: PUSH
21895: LD_INT 103
21897: PUSH
21898: LD_INT 105
21900: PUSH
21901: LD_INT 106
21903: PUSH
21904: LD_INT 108
21906: PUSH
21907: LD_INT 112
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: ST_TO_ADDR
21923: GO 24182
21925: LD_INT 8
21927: DOUBLE
21928: EQUAL
21929: IFTRUE 21933
21931: GO 22061
21933: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
21934: LD_ADDR_VAR 0 1
21938: PUSH
21939: LD_INT 2
21941: PUSH
21942: LD_INT 4
21944: PUSH
21945: LD_INT 5
21947: PUSH
21948: LD_INT 6
21950: PUSH
21951: LD_INT 7
21953: PUSH
21954: LD_INT 8
21956: PUSH
21957: LD_INT 11
21959: PUSH
21960: LD_INT 12
21962: PUSH
21963: LD_INT 15
21965: PUSH
21966: LD_INT 16
21968: PUSH
21969: LD_INT 20
21971: PUSH
21972: LD_INT 21
21974: PUSH
21975: LD_INT 22
21977: PUSH
21978: LD_INT 23
21980: PUSH
21981: LD_INT 25
21983: PUSH
21984: LD_INT 26
21986: PUSH
21987: LD_INT 30
21989: PUSH
21990: LD_INT 31
21992: PUSH
21993: LD_INT 32
21995: PUSH
21996: LD_INT 36
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 101
22023: PUSH
22024: LD_INT 102
22026: PUSH
22027: LD_INT 103
22029: PUSH
22030: LD_INT 105
22032: PUSH
22033: LD_INT 106
22035: PUSH
22036: LD_INT 108
22038: PUSH
22039: LD_INT 109
22041: PUSH
22042: LD_INT 112
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: ST_TO_ADDR
22059: GO 24182
22061: LD_INT 9
22063: DOUBLE
22064: EQUAL
22065: IFTRUE 22069
22067: GO 22205
22069: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
22070: LD_ADDR_VAR 0 1
22074: PUSH
22075: LD_INT 2
22077: PUSH
22078: LD_INT 4
22080: PUSH
22081: LD_INT 5
22083: PUSH
22084: LD_INT 6
22086: PUSH
22087: LD_INT 7
22089: PUSH
22090: LD_INT 8
22092: PUSH
22093: LD_INT 11
22095: PUSH
22096: LD_INT 12
22098: PUSH
22099: LD_INT 15
22101: PUSH
22102: LD_INT 16
22104: PUSH
22105: LD_INT 20
22107: PUSH
22108: LD_INT 21
22110: PUSH
22111: LD_INT 22
22113: PUSH
22114: LD_INT 23
22116: PUSH
22117: LD_INT 25
22119: PUSH
22120: LD_INT 26
22122: PUSH
22123: LD_INT 28
22125: PUSH
22126: LD_INT 30
22128: PUSH
22129: LD_INT 31
22131: PUSH
22132: LD_INT 32
22134: PUSH
22135: LD_INT 36
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 101
22163: PUSH
22164: LD_INT 102
22166: PUSH
22167: LD_INT 103
22169: PUSH
22170: LD_INT 105
22172: PUSH
22173: LD_INT 106
22175: PUSH
22176: LD_INT 108
22178: PUSH
22179: LD_INT 109
22181: PUSH
22182: LD_INT 112
22184: PUSH
22185: LD_INT 114
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: ST_TO_ADDR
22203: GO 24182
22205: LD_INT 10
22207: DOUBLE
22208: EQUAL
22209: IFTRUE 22213
22211: GO 22397
22213: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
22214: LD_ADDR_VAR 0 1
22218: PUSH
22219: LD_INT 2
22221: PUSH
22222: LD_INT 4
22224: PUSH
22225: LD_INT 5
22227: PUSH
22228: LD_INT 6
22230: PUSH
22231: LD_INT 7
22233: PUSH
22234: LD_INT 8
22236: PUSH
22237: LD_INT 9
22239: PUSH
22240: LD_INT 10
22242: PUSH
22243: LD_INT 11
22245: PUSH
22246: LD_INT 12
22248: PUSH
22249: LD_INT 13
22251: PUSH
22252: LD_INT 14
22254: PUSH
22255: LD_INT 15
22257: PUSH
22258: LD_INT 16
22260: PUSH
22261: LD_INT 17
22263: PUSH
22264: LD_INT 18
22266: PUSH
22267: LD_INT 19
22269: PUSH
22270: LD_INT 20
22272: PUSH
22273: LD_INT 21
22275: PUSH
22276: LD_INT 22
22278: PUSH
22279: LD_INT 23
22281: PUSH
22282: LD_INT 24
22284: PUSH
22285: LD_INT 25
22287: PUSH
22288: LD_INT 26
22290: PUSH
22291: LD_INT 28
22293: PUSH
22294: LD_INT 30
22296: PUSH
22297: LD_INT 31
22299: PUSH
22300: LD_INT 32
22302: PUSH
22303: LD_INT 36
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 101
22339: PUSH
22340: LD_INT 102
22342: PUSH
22343: LD_INT 103
22345: PUSH
22346: LD_INT 104
22348: PUSH
22349: LD_INT 105
22351: PUSH
22352: LD_INT 106
22354: PUSH
22355: LD_INT 107
22357: PUSH
22358: LD_INT 108
22360: PUSH
22361: LD_INT 109
22363: PUSH
22364: LD_INT 110
22366: PUSH
22367: LD_INT 111
22369: PUSH
22370: LD_INT 112
22372: PUSH
22373: LD_INT 114
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: ST_TO_ADDR
22395: GO 24182
22397: LD_INT 11
22399: DOUBLE
22400: EQUAL
22401: IFTRUE 22405
22403: GO 22597
22405: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
22406: LD_ADDR_VAR 0 1
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: LD_INT 4
22419: PUSH
22420: LD_INT 5
22422: PUSH
22423: LD_INT 6
22425: PUSH
22426: LD_INT 7
22428: PUSH
22429: LD_INT 8
22431: PUSH
22432: LD_INT 9
22434: PUSH
22435: LD_INT 10
22437: PUSH
22438: LD_INT 11
22440: PUSH
22441: LD_INT 12
22443: PUSH
22444: LD_INT 13
22446: PUSH
22447: LD_INT 14
22449: PUSH
22450: LD_INT 15
22452: PUSH
22453: LD_INT 16
22455: PUSH
22456: LD_INT 17
22458: PUSH
22459: LD_INT 18
22461: PUSH
22462: LD_INT 19
22464: PUSH
22465: LD_INT 20
22467: PUSH
22468: LD_INT 21
22470: PUSH
22471: LD_INT 22
22473: PUSH
22474: LD_INT 23
22476: PUSH
22477: LD_INT 24
22479: PUSH
22480: LD_INT 25
22482: PUSH
22483: LD_INT 26
22485: PUSH
22486: LD_INT 28
22488: PUSH
22489: LD_INT 30
22491: PUSH
22492: LD_INT 31
22494: PUSH
22495: LD_INT 32
22497: PUSH
22498: LD_INT 34
22500: PUSH
22501: LD_INT 36
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 101
22539: PUSH
22540: LD_INT 102
22542: PUSH
22543: LD_INT 103
22545: PUSH
22546: LD_INT 104
22548: PUSH
22549: LD_INT 105
22551: PUSH
22552: LD_INT 106
22554: PUSH
22555: LD_INT 107
22557: PUSH
22558: LD_INT 108
22560: PUSH
22561: LD_INT 109
22563: PUSH
22564: LD_INT 110
22566: PUSH
22567: LD_INT 111
22569: PUSH
22570: LD_INT 112
22572: PUSH
22573: LD_INT 114
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: ST_TO_ADDR
22595: GO 24182
22597: LD_INT 12
22599: DOUBLE
22600: EQUAL
22601: IFTRUE 22605
22603: GO 22813
22605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
22606: LD_ADDR_VAR 0 1
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: LD_INT 3
22619: PUSH
22620: LD_INT 4
22622: PUSH
22623: LD_INT 5
22625: PUSH
22626: LD_INT 6
22628: PUSH
22629: LD_INT 7
22631: PUSH
22632: LD_INT 8
22634: PUSH
22635: LD_INT 9
22637: PUSH
22638: LD_INT 10
22640: PUSH
22641: LD_INT 11
22643: PUSH
22644: LD_INT 12
22646: PUSH
22647: LD_INT 13
22649: PUSH
22650: LD_INT 14
22652: PUSH
22653: LD_INT 15
22655: PUSH
22656: LD_INT 16
22658: PUSH
22659: LD_INT 17
22661: PUSH
22662: LD_INT 18
22664: PUSH
22665: LD_INT 19
22667: PUSH
22668: LD_INT 20
22670: PUSH
22671: LD_INT 21
22673: PUSH
22674: LD_INT 22
22676: PUSH
22677: LD_INT 23
22679: PUSH
22680: LD_INT 24
22682: PUSH
22683: LD_INT 25
22685: PUSH
22686: LD_INT 26
22688: PUSH
22689: LD_INT 27
22691: PUSH
22692: LD_INT 28
22694: PUSH
22695: LD_INT 30
22697: PUSH
22698: LD_INT 31
22700: PUSH
22701: LD_INT 32
22703: PUSH
22704: LD_INT 33
22706: PUSH
22707: LD_INT 34
22709: PUSH
22710: LD_INT 36
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 101
22751: PUSH
22752: LD_INT 102
22754: PUSH
22755: LD_INT 103
22757: PUSH
22758: LD_INT 104
22760: PUSH
22761: LD_INT 105
22763: PUSH
22764: LD_INT 106
22766: PUSH
22767: LD_INT 107
22769: PUSH
22770: LD_INT 108
22772: PUSH
22773: LD_INT 109
22775: PUSH
22776: LD_INT 110
22778: PUSH
22779: LD_INT 111
22781: PUSH
22782: LD_INT 112
22784: PUSH
22785: LD_INT 113
22787: PUSH
22788: LD_INT 114
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: ST_TO_ADDR
22811: GO 24182
22813: LD_INT 13
22815: DOUBLE
22816: EQUAL
22817: IFTRUE 22821
22819: GO 23017
22821: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
22822: LD_ADDR_VAR 0 1
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: LD_INT 2
22832: PUSH
22833: LD_INT 3
22835: PUSH
22836: LD_INT 4
22838: PUSH
22839: LD_INT 5
22841: PUSH
22842: LD_INT 8
22844: PUSH
22845: LD_INT 9
22847: PUSH
22848: LD_INT 10
22850: PUSH
22851: LD_INT 11
22853: PUSH
22854: LD_INT 12
22856: PUSH
22857: LD_INT 14
22859: PUSH
22860: LD_INT 15
22862: PUSH
22863: LD_INT 16
22865: PUSH
22866: LD_INT 17
22868: PUSH
22869: LD_INT 18
22871: PUSH
22872: LD_INT 19
22874: PUSH
22875: LD_INT 20
22877: PUSH
22878: LD_INT 21
22880: PUSH
22881: LD_INT 22
22883: PUSH
22884: LD_INT 23
22886: PUSH
22887: LD_INT 24
22889: PUSH
22890: LD_INT 25
22892: PUSH
22893: LD_INT 26
22895: PUSH
22896: LD_INT 27
22898: PUSH
22899: LD_INT 28
22901: PUSH
22902: LD_INT 30
22904: PUSH
22905: LD_INT 31
22907: PUSH
22908: LD_INT 32
22910: PUSH
22911: LD_INT 33
22913: PUSH
22914: LD_INT 34
22916: PUSH
22917: LD_INT 36
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 101
22955: PUSH
22956: LD_INT 102
22958: PUSH
22959: LD_INT 103
22961: PUSH
22962: LD_INT 104
22964: PUSH
22965: LD_INT 105
22967: PUSH
22968: LD_INT 106
22970: PUSH
22971: LD_INT 107
22973: PUSH
22974: LD_INT 108
22976: PUSH
22977: LD_INT 109
22979: PUSH
22980: LD_INT 110
22982: PUSH
22983: LD_INT 111
22985: PUSH
22986: LD_INT 112
22988: PUSH
22989: LD_INT 113
22991: PUSH
22992: LD_INT 114
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: ST_TO_ADDR
23015: GO 24182
23017: LD_INT 14
23019: DOUBLE
23020: EQUAL
23021: IFTRUE 23025
23023: GO 23237
23025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
23026: LD_ADDR_VAR 0 1
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 2
23036: PUSH
23037: LD_INT 3
23039: PUSH
23040: LD_INT 4
23042: PUSH
23043: LD_INT 5
23045: PUSH
23046: LD_INT 6
23048: PUSH
23049: LD_INT 7
23051: PUSH
23052: LD_INT 8
23054: PUSH
23055: LD_INT 9
23057: PUSH
23058: LD_INT 10
23060: PUSH
23061: LD_INT 11
23063: PUSH
23064: LD_INT 12
23066: PUSH
23067: LD_INT 13
23069: PUSH
23070: LD_INT 14
23072: PUSH
23073: LD_INT 15
23075: PUSH
23076: LD_INT 16
23078: PUSH
23079: LD_INT 17
23081: PUSH
23082: LD_INT 18
23084: PUSH
23085: LD_INT 19
23087: PUSH
23088: LD_INT 20
23090: PUSH
23091: LD_INT 21
23093: PUSH
23094: LD_INT 22
23096: PUSH
23097: LD_INT 23
23099: PUSH
23100: LD_INT 24
23102: PUSH
23103: LD_INT 25
23105: PUSH
23106: LD_INT 26
23108: PUSH
23109: LD_INT 27
23111: PUSH
23112: LD_INT 28
23114: PUSH
23115: LD_INT 29
23117: PUSH
23118: LD_INT 30
23120: PUSH
23121: LD_INT 31
23123: PUSH
23124: LD_INT 32
23126: PUSH
23127: LD_INT 33
23129: PUSH
23130: LD_INT 34
23132: PUSH
23133: LD_INT 36
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 101
23175: PUSH
23176: LD_INT 102
23178: PUSH
23179: LD_INT 103
23181: PUSH
23182: LD_INT 104
23184: PUSH
23185: LD_INT 105
23187: PUSH
23188: LD_INT 106
23190: PUSH
23191: LD_INT 107
23193: PUSH
23194: LD_INT 108
23196: PUSH
23197: LD_INT 109
23199: PUSH
23200: LD_INT 110
23202: PUSH
23203: LD_INT 111
23205: PUSH
23206: LD_INT 112
23208: PUSH
23209: LD_INT 113
23211: PUSH
23212: LD_INT 114
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: ST_TO_ADDR
23235: GO 24182
23237: LD_INT 15
23239: DOUBLE
23240: EQUAL
23241: IFTRUE 23245
23243: GO 23457
23245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
23246: LD_ADDR_VAR 0 1
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: LD_INT 2
23256: PUSH
23257: LD_INT 3
23259: PUSH
23260: LD_INT 4
23262: PUSH
23263: LD_INT 5
23265: PUSH
23266: LD_INT 6
23268: PUSH
23269: LD_INT 7
23271: PUSH
23272: LD_INT 8
23274: PUSH
23275: LD_INT 9
23277: PUSH
23278: LD_INT 10
23280: PUSH
23281: LD_INT 11
23283: PUSH
23284: LD_INT 12
23286: PUSH
23287: LD_INT 13
23289: PUSH
23290: LD_INT 14
23292: PUSH
23293: LD_INT 15
23295: PUSH
23296: LD_INT 16
23298: PUSH
23299: LD_INT 17
23301: PUSH
23302: LD_INT 18
23304: PUSH
23305: LD_INT 19
23307: PUSH
23308: LD_INT 20
23310: PUSH
23311: LD_INT 21
23313: PUSH
23314: LD_INT 22
23316: PUSH
23317: LD_INT 23
23319: PUSH
23320: LD_INT 24
23322: PUSH
23323: LD_INT 25
23325: PUSH
23326: LD_INT 26
23328: PUSH
23329: LD_INT 27
23331: PUSH
23332: LD_INT 28
23334: PUSH
23335: LD_INT 29
23337: PUSH
23338: LD_INT 30
23340: PUSH
23341: LD_INT 31
23343: PUSH
23344: LD_INT 32
23346: PUSH
23347: LD_INT 33
23349: PUSH
23350: LD_INT 34
23352: PUSH
23353: LD_INT 36
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 101
23395: PUSH
23396: LD_INT 102
23398: PUSH
23399: LD_INT 103
23401: PUSH
23402: LD_INT 104
23404: PUSH
23405: LD_INT 105
23407: PUSH
23408: LD_INT 106
23410: PUSH
23411: LD_INT 107
23413: PUSH
23414: LD_INT 108
23416: PUSH
23417: LD_INT 109
23419: PUSH
23420: LD_INT 110
23422: PUSH
23423: LD_INT 111
23425: PUSH
23426: LD_INT 112
23428: PUSH
23429: LD_INT 113
23431: PUSH
23432: LD_INT 114
23434: PUSH
23435: EMPTY
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: ST_TO_ADDR
23455: GO 24182
23457: LD_INT 16
23459: DOUBLE
23460: EQUAL
23461: IFTRUE 23465
23463: GO 23589
23465: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
23466: LD_ADDR_VAR 0 1
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: LD_INT 4
23476: PUSH
23477: LD_INT 5
23479: PUSH
23480: LD_INT 7
23482: PUSH
23483: LD_INT 11
23485: PUSH
23486: LD_INT 12
23488: PUSH
23489: LD_INT 15
23491: PUSH
23492: LD_INT 16
23494: PUSH
23495: LD_INT 20
23497: PUSH
23498: LD_INT 21
23500: PUSH
23501: LD_INT 22
23503: PUSH
23504: LD_INT 23
23506: PUSH
23507: LD_INT 25
23509: PUSH
23510: LD_INT 26
23512: PUSH
23513: LD_INT 30
23515: PUSH
23516: LD_INT 31
23518: PUSH
23519: LD_INT 32
23521: PUSH
23522: LD_INT 33
23524: PUSH
23525: LD_INT 34
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 101
23551: PUSH
23552: LD_INT 102
23554: PUSH
23555: LD_INT 103
23557: PUSH
23558: LD_INT 106
23560: PUSH
23561: LD_INT 108
23563: PUSH
23564: LD_INT 112
23566: PUSH
23567: LD_INT 113
23569: PUSH
23570: LD_INT 114
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: ST_TO_ADDR
23587: GO 24182
23589: LD_INT 17
23591: DOUBLE
23592: EQUAL
23593: IFTRUE 23597
23595: GO 23809
23597: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
23598: LD_ADDR_VAR 0 1
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 2
23608: PUSH
23609: LD_INT 3
23611: PUSH
23612: LD_INT 4
23614: PUSH
23615: LD_INT 5
23617: PUSH
23618: LD_INT 6
23620: PUSH
23621: LD_INT 7
23623: PUSH
23624: LD_INT 8
23626: PUSH
23627: LD_INT 9
23629: PUSH
23630: LD_INT 10
23632: PUSH
23633: LD_INT 11
23635: PUSH
23636: LD_INT 12
23638: PUSH
23639: LD_INT 13
23641: PUSH
23642: LD_INT 14
23644: PUSH
23645: LD_INT 15
23647: PUSH
23648: LD_INT 16
23650: PUSH
23651: LD_INT 17
23653: PUSH
23654: LD_INT 18
23656: PUSH
23657: LD_INT 19
23659: PUSH
23660: LD_INT 20
23662: PUSH
23663: LD_INT 21
23665: PUSH
23666: LD_INT 22
23668: PUSH
23669: LD_INT 23
23671: PUSH
23672: LD_INT 24
23674: PUSH
23675: LD_INT 25
23677: PUSH
23678: LD_INT 26
23680: PUSH
23681: LD_INT 27
23683: PUSH
23684: LD_INT 28
23686: PUSH
23687: LD_INT 29
23689: PUSH
23690: LD_INT 30
23692: PUSH
23693: LD_INT 31
23695: PUSH
23696: LD_INT 32
23698: PUSH
23699: LD_INT 33
23701: PUSH
23702: LD_INT 34
23704: PUSH
23705: LD_INT 36
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 101
23747: PUSH
23748: LD_INT 102
23750: PUSH
23751: LD_INT 103
23753: PUSH
23754: LD_INT 104
23756: PUSH
23757: LD_INT 105
23759: PUSH
23760: LD_INT 106
23762: PUSH
23763: LD_INT 107
23765: PUSH
23766: LD_INT 108
23768: PUSH
23769: LD_INT 109
23771: PUSH
23772: LD_INT 110
23774: PUSH
23775: LD_INT 111
23777: PUSH
23778: LD_INT 112
23780: PUSH
23781: LD_INT 113
23783: PUSH
23784: LD_INT 114
23786: PUSH
23787: EMPTY
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: ST_TO_ADDR
23807: GO 24182
23809: LD_INT 18
23811: DOUBLE
23812: EQUAL
23813: IFTRUE 23817
23815: GO 23953
23817: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
23818: LD_ADDR_VAR 0 1
23822: PUSH
23823: LD_INT 2
23825: PUSH
23826: LD_INT 4
23828: PUSH
23829: LD_INT 5
23831: PUSH
23832: LD_INT 7
23834: PUSH
23835: LD_INT 11
23837: PUSH
23838: LD_INT 12
23840: PUSH
23841: LD_INT 15
23843: PUSH
23844: LD_INT 16
23846: PUSH
23847: LD_INT 20
23849: PUSH
23850: LD_INT 21
23852: PUSH
23853: LD_INT 22
23855: PUSH
23856: LD_INT 23
23858: PUSH
23859: LD_INT 25
23861: PUSH
23862: LD_INT 26
23864: PUSH
23865: LD_INT 30
23867: PUSH
23868: LD_INT 31
23870: PUSH
23871: LD_INT 32
23873: PUSH
23874: LD_INT 33
23876: PUSH
23877: LD_INT 34
23879: PUSH
23880: LD_INT 35
23882: PUSH
23883: LD_INT 36
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 101
23911: PUSH
23912: LD_INT 102
23914: PUSH
23915: LD_INT 103
23917: PUSH
23918: LD_INT 106
23920: PUSH
23921: LD_INT 108
23923: PUSH
23924: LD_INT 112
23926: PUSH
23927: LD_INT 113
23929: PUSH
23930: LD_INT 114
23932: PUSH
23933: LD_INT 115
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 24182
23953: LD_INT 19
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24181
23961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
23962: LD_ADDR_VAR 0 1
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: LD_INT 5
23981: PUSH
23982: LD_INT 6
23984: PUSH
23985: LD_INT 7
23987: PUSH
23988: LD_INT 8
23990: PUSH
23991: LD_INT 9
23993: PUSH
23994: LD_INT 10
23996: PUSH
23997: LD_INT 11
23999: PUSH
24000: LD_INT 12
24002: PUSH
24003: LD_INT 13
24005: PUSH
24006: LD_INT 14
24008: PUSH
24009: LD_INT 15
24011: PUSH
24012: LD_INT 16
24014: PUSH
24015: LD_INT 17
24017: PUSH
24018: LD_INT 18
24020: PUSH
24021: LD_INT 19
24023: PUSH
24024: LD_INT 20
24026: PUSH
24027: LD_INT 21
24029: PUSH
24030: LD_INT 22
24032: PUSH
24033: LD_INT 23
24035: PUSH
24036: LD_INT 24
24038: PUSH
24039: LD_INT 25
24041: PUSH
24042: LD_INT 26
24044: PUSH
24045: LD_INT 27
24047: PUSH
24048: LD_INT 28
24050: PUSH
24051: LD_INT 29
24053: PUSH
24054: LD_INT 30
24056: PUSH
24057: LD_INT 31
24059: PUSH
24060: LD_INT 32
24062: PUSH
24063: LD_INT 33
24065: PUSH
24066: LD_INT 34
24068: PUSH
24069: LD_INT 35
24071: PUSH
24072: LD_INT 36
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 101
24115: PUSH
24116: LD_INT 102
24118: PUSH
24119: LD_INT 103
24121: PUSH
24122: LD_INT 104
24124: PUSH
24125: LD_INT 105
24127: PUSH
24128: LD_INT 106
24130: PUSH
24131: LD_INT 107
24133: PUSH
24134: LD_INT 108
24136: PUSH
24137: LD_INT 109
24139: PUSH
24140: LD_INT 110
24142: PUSH
24143: LD_INT 111
24145: PUSH
24146: LD_INT 112
24148: PUSH
24149: LD_INT 113
24151: PUSH
24152: LD_INT 114
24154: PUSH
24155: LD_INT 115
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: ST_TO_ADDR
24179: GO 24182
24181: POP
// end else
24182: GO 24401
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
24184: LD_ADDR_VAR 0 1
24188: PUSH
24189: LD_INT 1
24191: PUSH
24192: LD_INT 2
24194: PUSH
24195: LD_INT 3
24197: PUSH
24198: LD_INT 4
24200: PUSH
24201: LD_INT 5
24203: PUSH
24204: LD_INT 6
24206: PUSH
24207: LD_INT 7
24209: PUSH
24210: LD_INT 8
24212: PUSH
24213: LD_INT 9
24215: PUSH
24216: LD_INT 10
24218: PUSH
24219: LD_INT 11
24221: PUSH
24222: LD_INT 12
24224: PUSH
24225: LD_INT 13
24227: PUSH
24228: LD_INT 14
24230: PUSH
24231: LD_INT 15
24233: PUSH
24234: LD_INT 16
24236: PUSH
24237: LD_INT 17
24239: PUSH
24240: LD_INT 18
24242: PUSH
24243: LD_INT 19
24245: PUSH
24246: LD_INT 20
24248: PUSH
24249: LD_INT 21
24251: PUSH
24252: LD_INT 22
24254: PUSH
24255: LD_INT 23
24257: PUSH
24258: LD_INT 24
24260: PUSH
24261: LD_INT 25
24263: PUSH
24264: LD_INT 26
24266: PUSH
24267: LD_INT 27
24269: PUSH
24270: LD_INT 28
24272: PUSH
24273: LD_INT 29
24275: PUSH
24276: LD_INT 30
24278: PUSH
24279: LD_INT 31
24281: PUSH
24282: LD_INT 32
24284: PUSH
24285: LD_INT 33
24287: PUSH
24288: LD_INT 34
24290: PUSH
24291: LD_INT 35
24293: PUSH
24294: LD_INT 36
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: PUSH
24335: LD_INT 101
24337: PUSH
24338: LD_INT 102
24340: PUSH
24341: LD_INT 103
24343: PUSH
24344: LD_INT 104
24346: PUSH
24347: LD_INT 105
24349: PUSH
24350: LD_INT 106
24352: PUSH
24353: LD_INT 107
24355: PUSH
24356: LD_INT 108
24358: PUSH
24359: LD_INT 109
24361: PUSH
24362: LD_INT 110
24364: PUSH
24365: LD_INT 111
24367: PUSH
24368: LD_INT 112
24370: PUSH
24371: LD_INT 113
24373: PUSH
24374: LD_INT 114
24376: PUSH
24377: LD_INT 115
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: ST_TO_ADDR
// if result then
24401: LD_VAR 0 1
24405: IFFALSE 24694
// begin normal :=  ;
24407: LD_ADDR_VAR 0 3
24411: PUSH
24412: LD_STRING 
24414: ST_TO_ADDR
// hardcore :=  ;
24415: LD_ADDR_VAR 0 4
24419: PUSH
24420: LD_STRING 
24422: ST_TO_ADDR
// for i = 1 to normalCounter do
24423: LD_ADDR_VAR 0 5
24427: PUSH
24428: DOUBLE
24429: LD_INT 1
24431: DEC
24432: ST_TO_ADDR
24433: LD_EXP 69
24437: PUSH
24438: FOR_TO
24439: IFFALSE 24540
// begin tmp := 0 ;
24441: LD_ADDR_VAR 0 2
24445: PUSH
24446: LD_STRING 0
24448: ST_TO_ADDR
// if result [ 1 ] then
24449: LD_VAR 0 1
24453: PUSH
24454: LD_INT 1
24456: ARRAY
24457: IFFALSE 24522
// if result [ 1 ] [ 1 ] = i then
24459: LD_VAR 0 1
24463: PUSH
24464: LD_INT 1
24466: ARRAY
24467: PUSH
24468: LD_INT 1
24470: ARRAY
24471: PUSH
24472: LD_VAR 0 5
24476: EQUAL
24477: IFFALSE 24522
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24479: LD_ADDR_VAR 0 1
24483: PUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: LD_INT 1
24491: PPUSH
24492: LD_VAR 0 1
24496: PUSH
24497: LD_INT 1
24499: ARRAY
24500: PPUSH
24501: LD_INT 1
24503: PPUSH
24504: CALL_OW 3
24508: PPUSH
24509: CALL_OW 1
24513: ST_TO_ADDR
// tmp := 1 ;
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_STRING 1
24521: ST_TO_ADDR
// end ; normal := normal & tmp ;
24522: LD_ADDR_VAR 0 3
24526: PUSH
24527: LD_VAR 0 3
24531: PUSH
24532: LD_VAR 0 2
24536: STR
24537: ST_TO_ADDR
// end ;
24538: GO 24438
24540: POP
24541: POP
// for i = 1 to hardcoreCounter do
24542: LD_ADDR_VAR 0 5
24546: PUSH
24547: DOUBLE
24548: LD_INT 1
24550: DEC
24551: ST_TO_ADDR
24552: LD_EXP 70
24556: PUSH
24557: FOR_TO
24558: IFFALSE 24663
// begin tmp := 0 ;
24560: LD_ADDR_VAR 0 2
24564: PUSH
24565: LD_STRING 0
24567: ST_TO_ADDR
// if result [ 2 ] then
24568: LD_VAR 0 1
24572: PUSH
24573: LD_INT 2
24575: ARRAY
24576: IFFALSE 24645
// if result [ 2 ] [ 1 ] = 100 + i then
24578: LD_VAR 0 1
24582: PUSH
24583: LD_INT 2
24585: ARRAY
24586: PUSH
24587: LD_INT 1
24589: ARRAY
24590: PUSH
24591: LD_INT 100
24593: PUSH
24594: LD_VAR 0 5
24598: PLUS
24599: EQUAL
24600: IFFALSE 24645
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24602: LD_ADDR_VAR 0 1
24606: PUSH
24607: LD_VAR 0 1
24611: PPUSH
24612: LD_INT 2
24614: PPUSH
24615: LD_VAR 0 1
24619: PUSH
24620: LD_INT 2
24622: ARRAY
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 3
24631: PPUSH
24632: CALL_OW 1
24636: ST_TO_ADDR
// tmp := 1 ;
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: LD_STRING 1
24644: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24645: LD_ADDR_VAR 0 4
24649: PUSH
24650: LD_VAR 0 4
24654: PUSH
24655: LD_VAR 0 2
24659: STR
24660: ST_TO_ADDR
// end ;
24661: GO 24557
24663: POP
24664: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
24665: LD_STRING getStreamItemsFromMission("
24667: PUSH
24668: LD_VAR 0 3
24672: STR
24673: PUSH
24674: LD_STRING ","
24676: STR
24677: PUSH
24678: LD_VAR 0 4
24682: STR
24683: PUSH
24684: LD_STRING ")
24686: STR
24687: PPUSH
24688: CALL_OW 559
// end else
24692: GO 24701
// ToLua ( getStreamItemsFromMission("","") ) ;
24694: LD_STRING getStreamItemsFromMission("","")
24696: PPUSH
24697: CALL_OW 559
// end ;
24701: LD_VAR 0 1
24705: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24706: LD_EXP 68
24710: PUSH
24711: LD_EXP 73
24715: AND
24716: IFFALSE 24840
24718: GO 24720
24720: DISABLE
24721: LD_INT 0
24723: PPUSH
24724: PPUSH
// begin enable ;
24725: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24726: LD_ADDR_VAR 0 2
24730: PUSH
24731: LD_INT 22
24733: PUSH
24734: LD_OWVAR 2
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 2
24745: PUSH
24746: LD_INT 34
24748: PUSH
24749: LD_INT 7
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: LD_INT 34
24758: PUSH
24759: LD_INT 45
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 34
24768: PUSH
24769: LD_INT 28
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 34
24778: PUSH
24779: LD_INT 47
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PPUSH
24797: CALL_OW 69
24801: ST_TO_ADDR
// if not tmp then
24802: LD_VAR 0 2
24806: NOT
24807: IFFALSE 24811
// exit ;
24809: GO 24840
// for i in tmp do
24811: LD_ADDR_VAR 0 1
24815: PUSH
24816: LD_VAR 0 2
24820: PUSH
24821: FOR_IN
24822: IFFALSE 24838
// begin SetLives ( i , 0 ) ;
24824: LD_VAR 0 1
24828: PPUSH
24829: LD_INT 0
24831: PPUSH
24832: CALL_OW 234
// end ;
24836: GO 24821
24838: POP
24839: POP
// end ;
24840: PPOPN 2
24842: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24843: LD_EXP 68
24847: PUSH
24848: LD_EXP 74
24852: AND
24853: IFFALSE 24937
24855: GO 24857
24857: DISABLE
24858: LD_INT 0
24860: PPUSH
24861: PPUSH
// begin enable ;
24862: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24863: LD_ADDR_VAR 0 2
24867: PUSH
24868: LD_INT 22
24870: PUSH
24871: LD_OWVAR 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 32
24882: PUSH
24883: LD_INT 3
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PPUSH
24894: CALL_OW 69
24898: ST_TO_ADDR
// if not tmp then
24899: LD_VAR 0 2
24903: NOT
24904: IFFALSE 24908
// exit ;
24906: GO 24937
// for i in tmp do
24908: LD_ADDR_VAR 0 1
24912: PUSH
24913: LD_VAR 0 2
24917: PUSH
24918: FOR_IN
24919: IFFALSE 24935
// begin SetLives ( i , 0 ) ;
24921: LD_VAR 0 1
24925: PPUSH
24926: LD_INT 0
24928: PPUSH
24929: CALL_OW 234
// end ;
24933: GO 24918
24935: POP
24936: POP
// end ;
24937: PPOPN 2
24939: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24940: LD_EXP 68
24944: PUSH
24945: LD_EXP 71
24949: AND
24950: IFFALSE 25043
24952: GO 24954
24954: DISABLE
24955: LD_INT 0
24957: PPUSH
// begin enable ;
24958: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24959: LD_ADDR_VAR 0 1
24963: PUSH
24964: LD_INT 22
24966: PUSH
24967: LD_OWVAR 2
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 25
24981: PUSH
24982: LD_INT 5
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 25
24991: PUSH
24992: LD_INT 9
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 25
25001: PUSH
25002: LD_INT 8
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PPUSH
25019: CALL_OW 69
25023: PUSH
25024: FOR_IN
25025: IFFALSE 25041
// begin SetClass ( i , 1 ) ;
25027: LD_VAR 0 1
25031: PPUSH
25032: LD_INT 1
25034: PPUSH
25035: CALL_OW 336
// end ;
25039: GO 25024
25041: POP
25042: POP
// end ;
25043: PPOPN 1
25045: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25046: LD_EXP 68
25050: PUSH
25051: LD_EXP 72
25055: AND
25056: PUSH
25057: LD_OWVAR 65
25061: PUSH
25062: LD_INT 7
25064: LESS
25065: AND
25066: IFFALSE 25080
25068: GO 25070
25070: DISABLE
// begin enable ;
25071: ENABLE
// game_speed := 7 ;
25072: LD_ADDR_OWVAR 65
25076: PUSH
25077: LD_INT 7
25079: ST_TO_ADDR
// end ;
25080: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25081: LD_EXP 68
25085: PUSH
25086: LD_EXP 75
25090: AND
25091: IFFALSE 25293
25093: GO 25095
25095: DISABLE
25096: LD_INT 0
25098: PPUSH
25099: PPUSH
25100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_INT 81
25108: PUSH
25109: LD_OWVAR 2
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 21
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PPUSH
25132: CALL_OW 69
25136: ST_TO_ADDR
// if not tmp then
25137: LD_VAR 0 3
25141: NOT
25142: IFFALSE 25146
// exit ;
25144: GO 25293
// if tmp > 5 then
25146: LD_VAR 0 3
25150: PUSH
25151: LD_INT 5
25153: GREATER
25154: IFFALSE 25166
// k := 5 else
25156: LD_ADDR_VAR 0 2
25160: PUSH
25161: LD_INT 5
25163: ST_TO_ADDR
25164: GO 25176
// k := tmp ;
25166: LD_ADDR_VAR 0 2
25170: PUSH
25171: LD_VAR 0 3
25175: ST_TO_ADDR
// for i := 1 to k do
25176: LD_ADDR_VAR 0 1
25180: PUSH
25181: DOUBLE
25182: LD_INT 1
25184: DEC
25185: ST_TO_ADDR
25186: LD_VAR 0 2
25190: PUSH
25191: FOR_TO
25192: IFFALSE 25291
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25194: LD_VAR 0 3
25198: PUSH
25199: LD_VAR 0 1
25203: ARRAY
25204: PPUSH
25205: LD_VAR 0 1
25209: PUSH
25210: LD_INT 4
25212: MOD
25213: PUSH
25214: LD_INT 1
25216: PLUS
25217: PPUSH
25218: CALL_OW 259
25222: PUSH
25223: LD_INT 10
25225: LESS
25226: IFFALSE 25289
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25228: LD_VAR 0 3
25232: PUSH
25233: LD_VAR 0 1
25237: ARRAY
25238: PPUSH
25239: LD_VAR 0 1
25243: PUSH
25244: LD_INT 4
25246: MOD
25247: PUSH
25248: LD_INT 1
25250: PLUS
25251: PPUSH
25252: LD_VAR 0 3
25256: PUSH
25257: LD_VAR 0 1
25261: ARRAY
25262: PPUSH
25263: LD_VAR 0 1
25267: PUSH
25268: LD_INT 4
25270: MOD
25271: PUSH
25272: LD_INT 1
25274: PLUS
25275: PPUSH
25276: CALL_OW 259
25280: PUSH
25281: LD_INT 1
25283: PLUS
25284: PPUSH
25285: CALL_OW 237
25289: GO 25191
25291: POP
25292: POP
// end ;
25293: PPOPN 3
25295: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25296: LD_EXP 68
25300: PUSH
25301: LD_EXP 76
25305: AND
25306: IFFALSE 25326
25308: GO 25310
25310: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25311: LD_INT 4
25313: PPUSH
25314: LD_OWVAR 2
25318: PPUSH
25319: LD_INT 0
25321: PPUSH
25322: CALL_OW 324
25326: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25327: LD_EXP 68
25331: PUSH
25332: LD_EXP 105
25336: AND
25337: IFFALSE 25357
25339: GO 25341
25341: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25342: LD_INT 19
25344: PPUSH
25345: LD_OWVAR 2
25349: PPUSH
25350: LD_INT 0
25352: PPUSH
25353: CALL_OW 324
25357: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25358: LD_EXP 68
25362: PUSH
25363: LD_EXP 77
25367: AND
25368: IFFALSE 25470
25370: GO 25372
25372: DISABLE
25373: LD_INT 0
25375: PPUSH
25376: PPUSH
// begin enable ;
25377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25378: LD_ADDR_VAR 0 2
25382: PUSH
25383: LD_INT 22
25385: PUSH
25386: LD_OWVAR 2
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: LD_INT 34
25400: PUSH
25401: LD_INT 11
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 34
25410: PUSH
25411: LD_INT 30
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 2
25436: NOT
25437: IFFALSE 25441
// exit ;
25439: GO 25470
// for i in tmp do
25441: LD_ADDR_VAR 0 1
25445: PUSH
25446: LD_VAR 0 2
25450: PUSH
25451: FOR_IN
25452: IFFALSE 25468
// begin SetLives ( i , 0 ) ;
25454: LD_VAR 0 1
25458: PPUSH
25459: LD_INT 0
25461: PPUSH
25462: CALL_OW 234
// end ;
25466: GO 25451
25468: POP
25469: POP
// end ;
25470: PPOPN 2
25472: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25473: LD_EXP 68
25477: PUSH
25478: LD_EXP 78
25482: AND
25483: IFFALSE 25503
25485: GO 25487
25487: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25488: LD_INT 32
25490: PPUSH
25491: LD_OWVAR 2
25495: PPUSH
25496: LD_INT 0
25498: PPUSH
25499: CALL_OW 324
25503: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25504: LD_EXP 68
25508: PUSH
25509: LD_EXP 79
25513: AND
25514: IFFALSE 25695
25516: GO 25518
25518: DISABLE
25519: LD_INT 0
25521: PPUSH
25522: PPUSH
25523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25524: LD_ADDR_VAR 0 2
25528: PUSH
25529: LD_INT 22
25531: PUSH
25532: LD_OWVAR 2
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 33
25543: PUSH
25544: LD_INT 3
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PPUSH
25555: CALL_OW 69
25559: ST_TO_ADDR
// if not tmp then
25560: LD_VAR 0 2
25564: NOT
25565: IFFALSE 25569
// exit ;
25567: GO 25695
// side := 0 ;
25569: LD_ADDR_VAR 0 3
25573: PUSH
25574: LD_INT 0
25576: ST_TO_ADDR
// for i := 1 to 8 do
25577: LD_ADDR_VAR 0 1
25581: PUSH
25582: DOUBLE
25583: LD_INT 1
25585: DEC
25586: ST_TO_ADDR
25587: LD_INT 8
25589: PUSH
25590: FOR_TO
25591: IFFALSE 25639
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25593: LD_OWVAR 2
25597: PUSH
25598: LD_VAR 0 1
25602: NONEQUAL
25603: PUSH
25604: LD_OWVAR 2
25608: PPUSH
25609: LD_VAR 0 1
25613: PPUSH
25614: CALL_OW 81
25618: PUSH
25619: LD_INT 2
25621: EQUAL
25622: AND
25623: IFFALSE 25637
// begin side := i ;
25625: LD_ADDR_VAR 0 3
25629: PUSH
25630: LD_VAR 0 1
25634: ST_TO_ADDR
// break ;
25635: GO 25639
// end ;
25637: GO 25590
25639: POP
25640: POP
// if not side then
25641: LD_VAR 0 3
25645: NOT
25646: IFFALSE 25650
// exit ;
25648: GO 25695
// for i := 1 to tmp do
25650: LD_ADDR_VAR 0 1
25654: PUSH
25655: DOUBLE
25656: LD_INT 1
25658: DEC
25659: ST_TO_ADDR
25660: LD_VAR 0 2
25664: PUSH
25665: FOR_TO
25666: IFFALSE 25693
// if Prob ( 60 ) then
25668: LD_INT 60
25670: PPUSH
25671: CALL_OW 13
25675: IFFALSE 25691
// SetSide ( i , side ) ;
25677: LD_VAR 0 1
25681: PPUSH
25682: LD_VAR 0 3
25686: PPUSH
25687: CALL_OW 235
25691: GO 25665
25693: POP
25694: POP
// end ;
25695: PPOPN 3
25697: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25698: LD_EXP 68
25702: PUSH
25703: LD_EXP 81
25707: AND
25708: IFFALSE 25827
25710: GO 25712
25712: DISABLE
25713: LD_INT 0
25715: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25716: LD_ADDR_VAR 0 1
25720: PUSH
25721: LD_INT 22
25723: PUSH
25724: LD_OWVAR 2
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 21
25735: PUSH
25736: LD_INT 1
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 3
25745: PUSH
25746: LD_INT 23
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: LIST
25764: PPUSH
25765: CALL_OW 69
25769: PUSH
25770: FOR_IN
25771: IFFALSE 25825
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25773: LD_VAR 0 1
25777: PPUSH
25778: CALL_OW 257
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: LD_INT 2
25788: PUSH
25789: LD_INT 3
25791: PUSH
25792: LD_INT 4
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: IN
25801: IFFALSE 25823
// SetClass ( un , rand ( 1 , 4 ) ) ;
25803: LD_VAR 0 1
25807: PPUSH
25808: LD_INT 1
25810: PPUSH
25811: LD_INT 4
25813: PPUSH
25814: CALL_OW 12
25818: PPUSH
25819: CALL_OW 336
25823: GO 25770
25825: POP
25826: POP
// end ;
25827: PPOPN 1
25829: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25830: LD_EXP 68
25834: PUSH
25835: LD_EXP 80
25839: AND
25840: IFFALSE 25919
25842: GO 25844
25844: DISABLE
25845: LD_INT 0
25847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25848: LD_ADDR_VAR 0 1
25852: PUSH
25853: LD_INT 22
25855: PUSH
25856: LD_OWVAR 2
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 21
25867: PUSH
25868: LD_INT 3
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 69
25883: ST_TO_ADDR
// if not tmp then
25884: LD_VAR 0 1
25888: NOT
25889: IFFALSE 25893
// exit ;
25891: GO 25919
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25893: LD_VAR 0 1
25897: PUSH
25898: LD_INT 1
25900: PPUSH
25901: LD_VAR 0 1
25905: PPUSH
25906: CALL_OW 12
25910: ARRAY
25911: PPUSH
25912: LD_INT 100
25914: PPUSH
25915: CALL_OW 234
// end ;
25919: PPOPN 1
25921: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25922: LD_EXP 68
25926: PUSH
25927: LD_EXP 82
25931: AND
25932: IFFALSE 26030
25934: GO 25936
25936: DISABLE
25937: LD_INT 0
25939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25940: LD_ADDR_VAR 0 1
25944: PUSH
25945: LD_INT 22
25947: PUSH
25948: LD_OWVAR 2
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PUSH
25957: LD_INT 21
25959: PUSH
25960: LD_INT 1
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PPUSH
25971: CALL_OW 69
25975: ST_TO_ADDR
// if not tmp then
25976: LD_VAR 0 1
25980: NOT
25981: IFFALSE 25985
// exit ;
25983: GO 26030
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25985: LD_VAR 0 1
25989: PUSH
25990: LD_INT 1
25992: PPUSH
25993: LD_VAR 0 1
25997: PPUSH
25998: CALL_OW 12
26002: ARRAY
26003: PPUSH
26004: LD_INT 1
26006: PPUSH
26007: LD_INT 4
26009: PPUSH
26010: CALL_OW 12
26014: PPUSH
26015: LD_INT 3000
26017: PPUSH
26018: LD_INT 9000
26020: PPUSH
26021: CALL_OW 12
26025: PPUSH
26026: CALL_OW 492
// end ;
26030: PPOPN 1
26032: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26033: LD_EXP 68
26037: PUSH
26038: LD_EXP 83
26042: AND
26043: IFFALSE 26063
26045: GO 26047
26047: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26048: LD_INT 1
26050: PPUSH
26051: LD_OWVAR 2
26055: PPUSH
26056: LD_INT 0
26058: PPUSH
26059: CALL_OW 324
26063: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26064: LD_EXP 68
26068: PUSH
26069: LD_EXP 84
26073: AND
26074: IFFALSE 26157
26076: GO 26078
26078: DISABLE
26079: LD_INT 0
26081: PPUSH
26082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26083: LD_ADDR_VAR 0 2
26087: PUSH
26088: LD_INT 22
26090: PUSH
26091: LD_OWVAR 2
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 21
26102: PUSH
26103: LD_INT 3
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PPUSH
26114: CALL_OW 69
26118: ST_TO_ADDR
// if not tmp then
26119: LD_VAR 0 2
26123: NOT
26124: IFFALSE 26128
// exit ;
26126: GO 26157
// for i in tmp do
26128: LD_ADDR_VAR 0 1
26132: PUSH
26133: LD_VAR 0 2
26137: PUSH
26138: FOR_IN
26139: IFFALSE 26155
// SetBLevel ( i , 10 ) ;
26141: LD_VAR 0 1
26145: PPUSH
26146: LD_INT 10
26148: PPUSH
26149: CALL_OW 241
26153: GO 26138
26155: POP
26156: POP
// end ;
26157: PPOPN 2
26159: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26160: LD_EXP 68
26164: PUSH
26165: LD_EXP 85
26169: AND
26170: IFFALSE 26281
26172: GO 26174
26174: DISABLE
26175: LD_INT 0
26177: PPUSH
26178: PPUSH
26179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26180: LD_ADDR_VAR 0 3
26184: PUSH
26185: LD_INT 22
26187: PUSH
26188: LD_OWVAR 2
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 25
26199: PUSH
26200: LD_INT 1
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: ST_TO_ADDR
// if not tmp then
26216: LD_VAR 0 3
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26281
// un := tmp [ rand ( 1 , tmp ) ] ;
26225: LD_ADDR_VAR 0 2
26229: PUSH
26230: LD_VAR 0 3
26234: PUSH
26235: LD_INT 1
26237: PPUSH
26238: LD_VAR 0 3
26242: PPUSH
26243: CALL_OW 12
26247: ARRAY
26248: ST_TO_ADDR
// if Crawls ( un ) then
26249: LD_VAR 0 2
26253: PPUSH
26254: CALL_OW 318
26258: IFFALSE 26269
// ComWalk ( un ) ;
26260: LD_VAR 0 2
26264: PPUSH
26265: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26269: LD_VAR 0 2
26273: PPUSH
26274: LD_INT 5
26276: PPUSH
26277: CALL_OW 336
// end ;
26281: PPOPN 3
26283: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26284: LD_EXP 68
26288: PUSH
26289: LD_EXP 86
26293: AND
26294: PUSH
26295: LD_OWVAR 67
26299: PUSH
26300: LD_INT 3
26302: LESS
26303: AND
26304: IFFALSE 26323
26306: GO 26308
26308: DISABLE
// Difficulty := Difficulty + 1 ;
26309: LD_ADDR_OWVAR 67
26313: PUSH
26314: LD_OWVAR 67
26318: PUSH
26319: LD_INT 1
26321: PLUS
26322: ST_TO_ADDR
26323: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26324: LD_EXP 68
26328: PUSH
26329: LD_EXP 87
26333: AND
26334: IFFALSE 26437
26336: GO 26338
26338: DISABLE
26339: LD_INT 0
26341: PPUSH
// begin for i := 1 to 5 do
26342: LD_ADDR_VAR 0 1
26346: PUSH
26347: DOUBLE
26348: LD_INT 1
26350: DEC
26351: ST_TO_ADDR
26352: LD_INT 5
26354: PUSH
26355: FOR_TO
26356: IFFALSE 26435
// begin uc_nation := nation_nature ;
26358: LD_ADDR_OWVAR 21
26362: PUSH
26363: LD_INT 0
26365: ST_TO_ADDR
// uc_side := 0 ;
26366: LD_ADDR_OWVAR 20
26370: PUSH
26371: LD_INT 0
26373: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26374: LD_ADDR_OWVAR 29
26378: PUSH
26379: LD_INT 12
26381: PUSH
26382: LD_INT 12
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: ST_TO_ADDR
// hc_agressivity := 20 ;
26389: LD_ADDR_OWVAR 35
26393: PUSH
26394: LD_INT 20
26396: ST_TO_ADDR
// hc_class := class_tiger ;
26397: LD_ADDR_OWVAR 28
26401: PUSH
26402: LD_INT 14
26404: ST_TO_ADDR
// hc_gallery :=  ;
26405: LD_ADDR_OWVAR 33
26409: PUSH
26410: LD_STRING 
26412: ST_TO_ADDR
// hc_name :=  ;
26413: LD_ADDR_OWVAR 26
26417: PUSH
26418: LD_STRING 
26420: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26421: CALL_OW 44
26425: PPUSH
26426: LD_INT 0
26428: PPUSH
26429: CALL_OW 51
// end ;
26433: GO 26355
26435: POP
26436: POP
// end ;
26437: PPOPN 1
26439: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26440: LD_EXP 68
26444: PUSH
26445: LD_EXP 88
26449: AND
26450: IFFALSE 26459
26452: GO 26454
26454: DISABLE
// StreamSibBomb ;
26455: CALL 26460 0 0
26459: END
// export function StreamSibBomb ; var i , x , y ; begin
26460: LD_INT 0
26462: PPUSH
26463: PPUSH
26464: PPUSH
26465: PPUSH
// result := false ;
26466: LD_ADDR_VAR 0 1
26470: PUSH
26471: LD_INT 0
26473: ST_TO_ADDR
// for i := 1 to 16 do
26474: LD_ADDR_VAR 0 2
26478: PUSH
26479: DOUBLE
26480: LD_INT 1
26482: DEC
26483: ST_TO_ADDR
26484: LD_INT 16
26486: PUSH
26487: FOR_TO
26488: IFFALSE 26687
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26490: LD_ADDR_VAR 0 3
26494: PUSH
26495: LD_INT 10
26497: PUSH
26498: LD_INT 20
26500: PUSH
26501: LD_INT 30
26503: PUSH
26504: LD_INT 40
26506: PUSH
26507: LD_INT 50
26509: PUSH
26510: LD_INT 60
26512: PUSH
26513: LD_INT 70
26515: PUSH
26516: LD_INT 80
26518: PUSH
26519: LD_INT 90
26521: PUSH
26522: LD_INT 100
26524: PUSH
26525: LD_INT 110
26527: PUSH
26528: LD_INT 120
26530: PUSH
26531: LD_INT 130
26533: PUSH
26534: LD_INT 140
26536: PUSH
26537: LD_INT 150
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 1
26559: PPUSH
26560: LD_INT 15
26562: PPUSH
26563: CALL_OW 12
26567: ARRAY
26568: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26569: LD_ADDR_VAR 0 4
26573: PUSH
26574: LD_INT 10
26576: PUSH
26577: LD_INT 20
26579: PUSH
26580: LD_INT 30
26582: PUSH
26583: LD_INT 40
26585: PUSH
26586: LD_INT 50
26588: PUSH
26589: LD_INT 60
26591: PUSH
26592: LD_INT 70
26594: PUSH
26595: LD_INT 80
26597: PUSH
26598: LD_INT 90
26600: PUSH
26601: LD_INT 100
26603: PUSH
26604: LD_INT 110
26606: PUSH
26607: LD_INT 120
26609: PUSH
26610: LD_INT 130
26612: PUSH
26613: LD_INT 140
26615: PUSH
26616: LD_INT 150
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 1
26638: PPUSH
26639: LD_INT 15
26641: PPUSH
26642: CALL_OW 12
26646: ARRAY
26647: ST_TO_ADDR
// if ValidHex ( x , y ) then
26648: LD_VAR 0 3
26652: PPUSH
26653: LD_VAR 0 4
26657: PPUSH
26658: CALL_OW 488
26662: IFFALSE 26685
// begin result := [ x , y ] ;
26664: LD_ADDR_VAR 0 1
26668: PUSH
26669: LD_VAR 0 3
26673: PUSH
26674: LD_VAR 0 4
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: ST_TO_ADDR
// break ;
26683: GO 26687
// end ; end ;
26685: GO 26487
26687: POP
26688: POP
// if result then
26689: LD_VAR 0 1
26693: IFFALSE 26753
// begin ToLua ( playSibBomb() ) ;
26695: LD_STRING playSibBomb()
26697: PPUSH
26698: CALL_OW 559
// wait ( 0 0$14 ) ;
26702: LD_INT 490
26704: PPUSH
26705: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26709: LD_VAR 0 1
26713: PUSH
26714: LD_INT 1
26716: ARRAY
26717: PPUSH
26718: LD_VAR 0 1
26722: PUSH
26723: LD_INT 2
26725: ARRAY
26726: PPUSH
26727: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26731: LD_VAR 0 1
26735: PUSH
26736: LD_INT 1
26738: ARRAY
26739: PPUSH
26740: LD_VAR 0 1
26744: PUSH
26745: LD_INT 2
26747: ARRAY
26748: PPUSH
26749: CALL_OW 429
// end ; end ;
26753: LD_VAR 0 1
26757: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26758: LD_EXP 68
26762: PUSH
26763: LD_EXP 90
26767: AND
26768: IFFALSE 26780
26770: GO 26772
26772: DISABLE
// YouLost (  ) ;
26773: LD_STRING 
26775: PPUSH
26776: CALL_OW 104
26780: END
// every 0 0$1 trigger StreamModeActive and sFog do
26781: LD_EXP 68
26785: PUSH
26786: LD_EXP 89
26790: AND
26791: IFFALSE 26805
26793: GO 26795
26795: DISABLE
// FogOff ( your_side ) ;
26796: LD_OWVAR 2
26800: PPUSH
26801: CALL_OW 344
26805: END
// every 0 0$1 trigger StreamModeActive and sSun do
26806: LD_EXP 68
26810: PUSH
26811: LD_EXP 91
26815: AND
26816: IFFALSE 26844
26818: GO 26820
26820: DISABLE
// begin solar_recharge_percent := 0 ;
26821: LD_ADDR_OWVAR 79
26825: PUSH
26826: LD_INT 0
26828: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26829: LD_INT 10500
26831: PPUSH
26832: CALL_OW 67
// solar_recharge_percent := 100 ;
26836: LD_ADDR_OWVAR 79
26840: PUSH
26841: LD_INT 100
26843: ST_TO_ADDR
// end ;
26844: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26845: LD_EXP 68
26849: PUSH
26850: LD_EXP 92
26854: AND
26855: IFFALSE 27094
26857: GO 26859
26859: DISABLE
26860: LD_INT 0
26862: PPUSH
26863: PPUSH
26864: PPUSH
// begin tmp := [ ] ;
26865: LD_ADDR_VAR 0 3
26869: PUSH
26870: EMPTY
26871: ST_TO_ADDR
// for i := 1 to 6 do
26872: LD_ADDR_VAR 0 1
26876: PUSH
26877: DOUBLE
26878: LD_INT 1
26880: DEC
26881: ST_TO_ADDR
26882: LD_INT 6
26884: PUSH
26885: FOR_TO
26886: IFFALSE 26991
// begin uc_nation := nation_nature ;
26888: LD_ADDR_OWVAR 21
26892: PUSH
26893: LD_INT 0
26895: ST_TO_ADDR
// uc_side := 0 ;
26896: LD_ADDR_OWVAR 20
26900: PUSH
26901: LD_INT 0
26903: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26904: LD_ADDR_OWVAR 29
26908: PUSH
26909: LD_INT 12
26911: PUSH
26912: LD_INT 12
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: ST_TO_ADDR
// hc_agressivity := 20 ;
26919: LD_ADDR_OWVAR 35
26923: PUSH
26924: LD_INT 20
26926: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26927: LD_ADDR_OWVAR 28
26931: PUSH
26932: LD_INT 17
26934: ST_TO_ADDR
// hc_gallery :=  ;
26935: LD_ADDR_OWVAR 33
26939: PUSH
26940: LD_STRING 
26942: ST_TO_ADDR
// hc_name :=  ;
26943: LD_ADDR_OWVAR 26
26947: PUSH
26948: LD_STRING 
26950: ST_TO_ADDR
// un := CreateHuman ;
26951: LD_ADDR_VAR 0 2
26955: PUSH
26956: CALL_OW 44
26960: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26961: LD_VAR 0 2
26965: PPUSH
26966: LD_INT 1
26968: PPUSH
26969: CALL_OW 51
// tmp := tmp ^ un ;
26973: LD_ADDR_VAR 0 3
26977: PUSH
26978: LD_VAR 0 3
26982: PUSH
26983: LD_VAR 0 2
26987: ADD
26988: ST_TO_ADDR
// end ;
26989: GO 26885
26991: POP
26992: POP
// repeat wait ( 0 0$1 ) ;
26993: LD_INT 35
26995: PPUSH
26996: CALL_OW 67
// for un in tmp do
27000: LD_ADDR_VAR 0 2
27004: PUSH
27005: LD_VAR 0 3
27009: PUSH
27010: FOR_IN
27011: IFFALSE 27085
// begin if IsDead ( un ) then
27013: LD_VAR 0 2
27017: PPUSH
27018: CALL_OW 301
27022: IFFALSE 27042
// begin tmp := tmp diff un ;
27024: LD_ADDR_VAR 0 3
27028: PUSH
27029: LD_VAR 0 3
27033: PUSH
27034: LD_VAR 0 2
27038: DIFF
27039: ST_TO_ADDR
// continue ;
27040: GO 27010
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27042: LD_VAR 0 2
27046: PPUSH
27047: LD_INT 3
27049: PUSH
27050: LD_INT 22
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PPUSH
27064: CALL_OW 69
27068: PPUSH
27069: LD_VAR 0 2
27073: PPUSH
27074: CALL_OW 74
27078: PPUSH
27079: CALL_OW 115
// end ;
27083: GO 27010
27085: POP
27086: POP
// until not tmp ;
27087: LD_VAR 0 3
27091: NOT
27092: IFFALSE 26993
// end ;
27094: PPOPN 3
27096: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27097: LD_EXP 68
27101: PUSH
27102: LD_EXP 93
27106: AND
27107: IFFALSE 27161
27109: GO 27111
27111: DISABLE
// begin ToLua ( displayTroll(); ) ;
27112: LD_STRING displayTroll();
27114: PPUSH
27115: CALL_OW 559
// wait ( 3 3$00 ) ;
27119: LD_INT 6300
27121: PPUSH
27122: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27126: LD_STRING hideTroll();
27128: PPUSH
27129: CALL_OW 559
// wait ( 1 1$00 ) ;
27133: LD_INT 2100
27135: PPUSH
27136: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27140: LD_STRING displayTroll();
27142: PPUSH
27143: CALL_OW 559
// wait ( 1 1$00 ) ;
27147: LD_INT 2100
27149: PPUSH
27150: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27154: LD_STRING hideTroll();
27156: PPUSH
27157: CALL_OW 559
// end ;
27161: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27162: LD_EXP 68
27166: PUSH
27167: LD_EXP 94
27171: AND
27172: IFFALSE 27235
27174: GO 27176
27176: DISABLE
27177: LD_INT 0
27179: PPUSH
// begin p := 0 ;
27180: LD_ADDR_VAR 0 1
27184: PUSH
27185: LD_INT 0
27187: ST_TO_ADDR
// repeat game_speed := 1 ;
27188: LD_ADDR_OWVAR 65
27192: PUSH
27193: LD_INT 1
27195: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27196: LD_INT 35
27198: PPUSH
27199: CALL_OW 67
// p := p + 1 ;
27203: LD_ADDR_VAR 0 1
27207: PUSH
27208: LD_VAR 0 1
27212: PUSH
27213: LD_INT 1
27215: PLUS
27216: ST_TO_ADDR
// until p >= 60 ;
27217: LD_VAR 0 1
27221: PUSH
27222: LD_INT 60
27224: GREATEREQUAL
27225: IFFALSE 27188
// game_speed := 4 ;
27227: LD_ADDR_OWVAR 65
27231: PUSH
27232: LD_INT 4
27234: ST_TO_ADDR
// end ;
27235: PPOPN 1
27237: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27238: LD_EXP 68
27242: PUSH
27243: LD_EXP 95
27247: AND
27248: IFFALSE 27394
27250: GO 27252
27252: DISABLE
27253: LD_INT 0
27255: PPUSH
27256: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27257: LD_ADDR_VAR 0 1
27261: PUSH
27262: LD_INT 22
27264: PUSH
27265: LD_OWVAR 2
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 2
27276: PUSH
27277: LD_INT 30
27279: PUSH
27280: LD_INT 0
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: LD_INT 30
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PPUSH
27306: CALL_OW 69
27310: ST_TO_ADDR
// if not depot then
27311: LD_VAR 0 1
27315: NOT
27316: IFFALSE 27320
// exit ;
27318: GO 27394
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27320: LD_ADDR_VAR 0 2
27324: PUSH
27325: LD_VAR 0 1
27329: PUSH
27330: LD_INT 1
27332: PPUSH
27333: LD_VAR 0 1
27337: PPUSH
27338: CALL_OW 12
27342: ARRAY
27343: PPUSH
27344: CALL_OW 274
27348: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27349: LD_VAR 0 2
27353: PPUSH
27354: LD_INT 1
27356: PPUSH
27357: LD_INT 0
27359: PPUSH
27360: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27364: LD_VAR 0 2
27368: PPUSH
27369: LD_INT 2
27371: PPUSH
27372: LD_INT 0
27374: PPUSH
27375: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27379: LD_VAR 0 2
27383: PPUSH
27384: LD_INT 3
27386: PPUSH
27387: LD_INT 0
27389: PPUSH
27390: CALL_OW 277
// end ;
27394: PPOPN 2
27396: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27397: LD_EXP 68
27401: PUSH
27402: LD_EXP 96
27406: AND
27407: IFFALSE 27504
27409: GO 27411
27411: DISABLE
27412: LD_INT 0
27414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27415: LD_ADDR_VAR 0 1
27419: PUSH
27420: LD_INT 22
27422: PUSH
27423: LD_OWVAR 2
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 21
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 3
27444: PUSH
27445: LD_INT 23
27447: PUSH
27448: LD_INT 0
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: LIST
27463: PPUSH
27464: CALL_OW 69
27468: ST_TO_ADDR
// if not tmp then
27469: LD_VAR 0 1
27473: NOT
27474: IFFALSE 27478
// exit ;
27476: GO 27504
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27478: LD_VAR 0 1
27482: PUSH
27483: LD_INT 1
27485: PPUSH
27486: LD_VAR 0 1
27490: PPUSH
27491: CALL_OW 12
27495: ARRAY
27496: PPUSH
27497: LD_INT 200
27499: PPUSH
27500: CALL_OW 234
// end ;
27504: PPOPN 1
27506: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27507: LD_EXP 68
27511: PUSH
27512: LD_EXP 97
27516: AND
27517: IFFALSE 27596
27519: GO 27521
27521: DISABLE
27522: LD_INT 0
27524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27525: LD_ADDR_VAR 0 1
27529: PUSH
27530: LD_INT 22
27532: PUSH
27533: LD_OWVAR 2
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: LD_INT 21
27544: PUSH
27545: LD_INT 2
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PPUSH
27556: CALL_OW 69
27560: ST_TO_ADDR
// if not tmp then
27561: LD_VAR 0 1
27565: NOT
27566: IFFALSE 27570
// exit ;
27568: GO 27596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27570: LD_VAR 0 1
27574: PUSH
27575: LD_INT 1
27577: PPUSH
27578: LD_VAR 0 1
27582: PPUSH
27583: CALL_OW 12
27587: ARRAY
27588: PPUSH
27589: LD_INT 60
27591: PPUSH
27592: CALL_OW 234
// end ;
27596: PPOPN 1
27598: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27599: LD_EXP 68
27603: PUSH
27604: LD_EXP 98
27608: AND
27609: IFFALSE 27708
27611: GO 27613
27613: DISABLE
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
// begin enable ;
27618: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27619: LD_ADDR_VAR 0 1
27623: PUSH
27624: LD_INT 22
27626: PUSH
27627: LD_OWVAR 2
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 61
27638: PUSH
27639: EMPTY
27640: LIST
27641: PUSH
27642: LD_INT 33
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: PPUSH
27657: CALL_OW 69
27661: ST_TO_ADDR
// if not tmp then
27662: LD_VAR 0 1
27666: NOT
27667: IFFALSE 27671
// exit ;
27669: GO 27708
// for i in tmp do
27671: LD_ADDR_VAR 0 2
27675: PUSH
27676: LD_VAR 0 1
27680: PUSH
27681: FOR_IN
27682: IFFALSE 27706
// if IsControledBy ( i ) then
27684: LD_VAR 0 2
27688: PPUSH
27689: CALL_OW 312
27693: IFFALSE 27704
// ComUnlink ( i ) ;
27695: LD_VAR 0 2
27699: PPUSH
27700: CALL_OW 136
27704: GO 27681
27706: POP
27707: POP
// end ;
27708: PPOPN 2
27710: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27711: LD_EXP 68
27715: PUSH
27716: LD_EXP 99
27720: AND
27721: IFFALSE 27861
27723: GO 27725
27725: DISABLE
27726: LD_INT 0
27728: PPUSH
27729: PPUSH
// begin ToLua ( displayPowell(); ) ;
27730: LD_STRING displayPowell();
27732: PPUSH
27733: CALL_OW 559
// uc_side := 0 ;
27737: LD_ADDR_OWVAR 20
27741: PUSH
27742: LD_INT 0
27744: ST_TO_ADDR
// uc_nation := 2 ;
27745: LD_ADDR_OWVAR 21
27749: PUSH
27750: LD_INT 2
27752: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27753: LD_ADDR_OWVAR 37
27757: PUSH
27758: LD_INT 14
27760: ST_TO_ADDR
// vc_engine := engine_siberite ;
27761: LD_ADDR_OWVAR 39
27765: PUSH
27766: LD_INT 3
27768: ST_TO_ADDR
// vc_control := control_apeman ;
27769: LD_ADDR_OWVAR 38
27773: PUSH
27774: LD_INT 5
27776: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27777: LD_ADDR_OWVAR 40
27781: PUSH
27782: LD_INT 29
27784: ST_TO_ADDR
// un := CreateVehicle ;
27785: LD_ADDR_VAR 0 2
27789: PUSH
27790: CALL_OW 45
27794: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27795: LD_VAR 0 2
27799: PPUSH
27800: LD_INT 1
27802: PPUSH
27803: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27807: LD_INT 35
27809: PPUSH
27810: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27814: LD_VAR 0 2
27818: PPUSH
27819: LD_INT 22
27821: PUSH
27822: LD_OWVAR 2
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PPUSH
27831: CALL_OW 69
27835: PPUSH
27836: LD_VAR 0 2
27840: PPUSH
27841: CALL_OW 74
27845: PPUSH
27846: CALL_OW 115
// until IsDead ( un ) ;
27850: LD_VAR 0 2
27854: PPUSH
27855: CALL_OW 301
27859: IFFALSE 27807
// end ;
27861: PPOPN 2
27863: END
// every 0 0$1 trigger StreamModeActive and sStu do
27864: LD_EXP 68
27868: PUSH
27869: LD_EXP 107
27873: AND
27874: IFFALSE 27890
27876: GO 27878
27878: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27879: LD_STRING displayStucuk();
27881: PPUSH
27882: CALL_OW 559
// ResetFog ;
27886: CALL_OW 335
// end ;
27890: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27891: LD_EXP 68
27895: PUSH
27896: LD_EXP 100
27900: AND
27901: IFFALSE 28042
27903: GO 27905
27905: DISABLE
27906: LD_INT 0
27908: PPUSH
27909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27910: LD_ADDR_VAR 0 2
27914: PUSH
27915: LD_INT 22
27917: PUSH
27918: LD_OWVAR 2
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 21
27929: PUSH
27930: LD_INT 1
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PPUSH
27941: CALL_OW 69
27945: ST_TO_ADDR
// if not tmp then
27946: LD_VAR 0 2
27950: NOT
27951: IFFALSE 27955
// exit ;
27953: GO 28042
// un := tmp [ rand ( 1 , tmp ) ] ;
27955: LD_ADDR_VAR 0 1
27959: PUSH
27960: LD_VAR 0 2
27964: PUSH
27965: LD_INT 1
27967: PPUSH
27968: LD_VAR 0 2
27972: PPUSH
27973: CALL_OW 12
27977: ARRAY
27978: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27979: LD_VAR 0 1
27983: PPUSH
27984: LD_INT 0
27986: PPUSH
27987: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27991: LD_VAR 0 1
27995: PPUSH
27996: LD_OWVAR 3
28000: PUSH
28001: LD_VAR 0 1
28005: DIFF
28006: PPUSH
28007: LD_VAR 0 1
28011: PPUSH
28012: CALL_OW 74
28016: PPUSH
28017: CALL_OW 115
// wait ( 0 0$20 ) ;
28021: LD_INT 700
28023: PPUSH
28024: CALL_OW 67
// SetSide ( un , your_side ) ;
28028: LD_VAR 0 1
28032: PPUSH
28033: LD_OWVAR 2
28037: PPUSH
28038: CALL_OW 235
// end ;
28042: PPOPN 2
28044: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28045: LD_EXP 68
28049: PUSH
28050: LD_EXP 101
28054: AND
28055: IFFALSE 28161
28057: GO 28059
28059: DISABLE
28060: LD_INT 0
28062: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28063: LD_ADDR_VAR 0 1
28067: PUSH
28068: LD_INT 22
28070: PUSH
28071: LD_OWVAR 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 30
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 30
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PPUSH
28112: CALL_OW 69
28116: ST_TO_ADDR
// if not depot then
28117: LD_VAR 0 1
28121: NOT
28122: IFFALSE 28126
// exit ;
28124: GO 28161
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28126: LD_VAR 0 1
28130: PUSH
28131: LD_INT 1
28133: ARRAY
28134: PPUSH
28135: CALL_OW 250
28139: PPUSH
28140: LD_VAR 0 1
28144: PUSH
28145: LD_INT 1
28147: ARRAY
28148: PPUSH
28149: CALL_OW 251
28153: PPUSH
28154: LD_INT 70
28156: PPUSH
28157: CALL_OW 495
// end ;
28161: PPOPN 1
28163: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28164: LD_EXP 68
28168: PUSH
28169: LD_EXP 102
28173: AND
28174: IFFALSE 28385
28176: GO 28178
28178: DISABLE
28179: LD_INT 0
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28186: LD_ADDR_VAR 0 5
28190: PUSH
28191: LD_INT 22
28193: PUSH
28194: LD_OWVAR 2
28198: PUSH
28199: EMPTY
28200: LIST
28201: LIST
28202: PUSH
28203: LD_INT 21
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PPUSH
28217: CALL_OW 69
28221: ST_TO_ADDR
// if not tmp then
28222: LD_VAR 0 5
28226: NOT
28227: IFFALSE 28231
// exit ;
28229: GO 28385
// for i in tmp do
28231: LD_ADDR_VAR 0 1
28235: PUSH
28236: LD_VAR 0 5
28240: PUSH
28241: FOR_IN
28242: IFFALSE 28383
// begin d := rand ( 0 , 5 ) ;
28244: LD_ADDR_VAR 0 4
28248: PUSH
28249: LD_INT 0
28251: PPUSH
28252: LD_INT 5
28254: PPUSH
28255: CALL_OW 12
28259: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28260: LD_ADDR_VAR 0 2
28264: PUSH
28265: LD_VAR 0 1
28269: PPUSH
28270: CALL_OW 250
28274: PPUSH
28275: LD_VAR 0 4
28279: PPUSH
28280: LD_INT 3
28282: PPUSH
28283: LD_INT 12
28285: PPUSH
28286: CALL_OW 12
28290: PPUSH
28291: CALL_OW 272
28295: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28296: LD_ADDR_VAR 0 3
28300: PUSH
28301: LD_VAR 0 1
28305: PPUSH
28306: CALL_OW 251
28310: PPUSH
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_INT 3
28318: PPUSH
28319: LD_INT 12
28321: PPUSH
28322: CALL_OW 12
28326: PPUSH
28327: CALL_OW 273
28331: ST_TO_ADDR
// if ValidHex ( x , y ) then
28332: LD_VAR 0 2
28336: PPUSH
28337: LD_VAR 0 3
28341: PPUSH
28342: CALL_OW 488
28346: IFFALSE 28381
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28348: LD_VAR 0 1
28352: PPUSH
28353: LD_VAR 0 2
28357: PPUSH
28358: LD_VAR 0 3
28362: PPUSH
28363: LD_INT 3
28365: PPUSH
28366: LD_INT 6
28368: PPUSH
28369: CALL_OW 12
28373: PPUSH
28374: LD_INT 1
28376: PPUSH
28377: CALL_OW 483
// end ;
28381: GO 28241
28383: POP
28384: POP
// end ;
28385: PPOPN 5
28387: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28388: LD_EXP 68
28392: PUSH
28393: LD_EXP 103
28397: AND
28398: IFFALSE 28492
28400: GO 28402
28402: DISABLE
28403: LD_INT 0
28405: PPUSH
28406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28407: LD_ADDR_VAR 0 2
28411: PUSH
28412: LD_INT 22
28414: PUSH
28415: LD_OWVAR 2
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 32
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 21
28436: PUSH
28437: LD_INT 2
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: LIST
28448: PPUSH
28449: CALL_OW 69
28453: ST_TO_ADDR
// if not tmp then
28454: LD_VAR 0 2
28458: NOT
28459: IFFALSE 28463
// exit ;
28461: GO 28492
// for i in tmp do
28463: LD_ADDR_VAR 0 1
28467: PUSH
28468: LD_VAR 0 2
28472: PUSH
28473: FOR_IN
28474: IFFALSE 28490
// SetFuel ( i , 0 ) ;
28476: LD_VAR 0 1
28480: PPUSH
28481: LD_INT 0
28483: PPUSH
28484: CALL_OW 240
28488: GO 28473
28490: POP
28491: POP
// end ;
28492: PPOPN 2
28494: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28495: LD_EXP 68
28499: PUSH
28500: LD_EXP 104
28504: AND
28505: IFFALSE 28571
28507: GO 28509
28509: DISABLE
28510: LD_INT 0
28512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28513: LD_ADDR_VAR 0 1
28517: PUSH
28518: LD_INT 22
28520: PUSH
28521: LD_OWVAR 2
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 30
28532: PUSH
28533: LD_INT 29
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: PPUSH
28544: CALL_OW 69
28548: ST_TO_ADDR
// if not tmp then
28549: LD_VAR 0 1
28553: NOT
28554: IFFALSE 28558
// exit ;
28556: GO 28571
// DestroyUnit ( tmp [ 1 ] ) ;
28558: LD_VAR 0 1
28562: PUSH
28563: LD_INT 1
28565: ARRAY
28566: PPUSH
28567: CALL_OW 65
// end ;
28571: PPOPN 1
28573: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28574: LD_EXP 68
28578: PUSH
28579: LD_EXP 106
28583: AND
28584: IFFALSE 28713
28586: GO 28588
28588: DISABLE
28589: LD_INT 0
28591: PPUSH
// begin uc_side := 0 ;
28592: LD_ADDR_OWVAR 20
28596: PUSH
28597: LD_INT 0
28599: ST_TO_ADDR
// uc_nation := nation_arabian ;
28600: LD_ADDR_OWVAR 21
28604: PUSH
28605: LD_INT 2
28607: ST_TO_ADDR
// hc_gallery :=  ;
28608: LD_ADDR_OWVAR 33
28612: PUSH
28613: LD_STRING 
28615: ST_TO_ADDR
// hc_name :=  ;
28616: LD_ADDR_OWVAR 26
28620: PUSH
28621: LD_STRING 
28623: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28624: LD_INT 1
28626: PPUSH
28627: LD_INT 11
28629: PPUSH
28630: LD_INT 10
28632: PPUSH
28633: CALL_OW 380
// un := CreateHuman ;
28637: LD_ADDR_VAR 0 1
28641: PUSH
28642: CALL_OW 44
28646: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28647: LD_VAR 0 1
28651: PPUSH
28652: LD_INT 1
28654: PPUSH
28655: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28659: LD_INT 35
28661: PPUSH
28662: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28666: LD_VAR 0 1
28670: PPUSH
28671: LD_INT 22
28673: PUSH
28674: LD_OWVAR 2
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PPUSH
28683: CALL_OW 69
28687: PPUSH
28688: LD_VAR 0 1
28692: PPUSH
28693: CALL_OW 74
28697: PPUSH
28698: CALL_OW 115
// until IsDead ( un ) ;
28702: LD_VAR 0 1
28706: PPUSH
28707: CALL_OW 301
28711: IFFALSE 28659
// end ;
28713: PPOPN 1
28715: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28716: LD_EXP 68
28720: PUSH
28721: LD_EXP 108
28725: AND
28726: IFFALSE 28738
28728: GO 28730
28730: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28731: LD_STRING earthquake(getX(game), 0, 32)
28733: PPUSH
28734: CALL_OW 559
28738: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28739: LD_EXP 68
28743: PUSH
28744: LD_EXP 109
28748: AND
28749: IFFALSE 28840
28751: GO 28753
28753: DISABLE
28754: LD_INT 0
28756: PPUSH
// begin enable ;
28757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28758: LD_ADDR_VAR 0 1
28762: PUSH
28763: LD_INT 22
28765: PUSH
28766: LD_OWVAR 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 21
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 33
28787: PUSH
28788: LD_INT 3
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: LIST
28799: PPUSH
28800: CALL_OW 69
28804: ST_TO_ADDR
// if not tmp then
28805: LD_VAR 0 1
28809: NOT
28810: IFFALSE 28814
// exit ;
28812: GO 28840
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28814: LD_VAR 0 1
28818: PUSH
28819: LD_INT 1
28821: PPUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: CALL_OW 12
28831: ARRAY
28832: PPUSH
28833: LD_INT 1
28835: PPUSH
28836: CALL_OW 234
// end ;
28840: PPOPN 1
28842: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28843: LD_EXP 68
28847: PUSH
28848: LD_EXP 110
28852: AND
28853: IFFALSE 28994
28855: GO 28857
28857: DISABLE
28858: LD_INT 0
28860: PPUSH
28861: PPUSH
28862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28863: LD_ADDR_VAR 0 3
28867: PUSH
28868: LD_INT 22
28870: PUSH
28871: LD_OWVAR 2
28875: PUSH
28876: EMPTY
28877: LIST
28878: LIST
28879: PUSH
28880: LD_INT 25
28882: PUSH
28883: LD_INT 1
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PPUSH
28894: CALL_OW 69
28898: ST_TO_ADDR
// if not tmp then
28899: LD_VAR 0 3
28903: NOT
28904: IFFALSE 28908
// exit ;
28906: GO 28994
// un := tmp [ rand ( 1 , tmp ) ] ;
28908: LD_ADDR_VAR 0 2
28912: PUSH
28913: LD_VAR 0 3
28917: PUSH
28918: LD_INT 1
28920: PPUSH
28921: LD_VAR 0 3
28925: PPUSH
28926: CALL_OW 12
28930: ARRAY
28931: ST_TO_ADDR
// if Crawls ( un ) then
28932: LD_VAR 0 2
28936: PPUSH
28937: CALL_OW 318
28941: IFFALSE 28952
// ComWalk ( un ) ;
28943: LD_VAR 0 2
28947: PPUSH
28948: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28952: LD_VAR 0 2
28956: PPUSH
28957: LD_INT 9
28959: PPUSH
28960: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28964: LD_INT 28
28966: PPUSH
28967: LD_OWVAR 2
28971: PPUSH
28972: LD_INT 2
28974: PPUSH
28975: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28979: LD_INT 29
28981: PPUSH
28982: LD_OWVAR 2
28986: PPUSH
28987: LD_INT 2
28989: PPUSH
28990: CALL_OW 322
// end ;
28994: PPOPN 3
28996: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28997: LD_EXP 68
29001: PUSH
29002: LD_EXP 111
29006: AND
29007: IFFALSE 29118
29009: GO 29011
29011: DISABLE
29012: LD_INT 0
29014: PPUSH
29015: PPUSH
29016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29017: LD_ADDR_VAR 0 3
29021: PUSH
29022: LD_INT 22
29024: PUSH
29025: LD_OWVAR 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 25
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 69
29052: ST_TO_ADDR
// if not tmp then
29053: LD_VAR 0 3
29057: NOT
29058: IFFALSE 29062
// exit ;
29060: GO 29118
// un := tmp [ rand ( 1 , tmp ) ] ;
29062: LD_ADDR_VAR 0 2
29066: PUSH
29067: LD_VAR 0 3
29071: PUSH
29072: LD_INT 1
29074: PPUSH
29075: LD_VAR 0 3
29079: PPUSH
29080: CALL_OW 12
29084: ARRAY
29085: ST_TO_ADDR
// if Crawls ( un ) then
29086: LD_VAR 0 2
29090: PPUSH
29091: CALL_OW 318
29095: IFFALSE 29106
// ComWalk ( un ) ;
29097: LD_VAR 0 2
29101: PPUSH
29102: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29106: LD_VAR 0 2
29110: PPUSH
29111: LD_INT 8
29113: PPUSH
29114: CALL_OW 336
// end ;
29118: PPOPN 3
29120: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29121: LD_EXP 68
29125: PUSH
29126: LD_EXP 112
29130: AND
29131: IFFALSE 29275
29133: GO 29135
29135: DISABLE
29136: LD_INT 0
29138: PPUSH
29139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29140: LD_ADDR_VAR 0 2
29144: PUSH
29145: LD_INT 22
29147: PUSH
29148: LD_OWVAR 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PUSH
29157: LD_INT 21
29159: PUSH
29160: LD_INT 2
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: LD_INT 34
29172: PUSH
29173: LD_INT 12
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 34
29182: PUSH
29183: LD_INT 51
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 34
29192: PUSH
29193: LD_INT 32
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: LIST
29210: PPUSH
29211: CALL_OW 69
29215: ST_TO_ADDR
// if not tmp then
29216: LD_VAR 0 2
29220: NOT
29221: IFFALSE 29225
// exit ;
29223: GO 29275
// for i in tmp do
29225: LD_ADDR_VAR 0 1
29229: PUSH
29230: LD_VAR 0 2
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29273
// if GetCargo ( i , mat_artifact ) = 0 then
29238: LD_VAR 0 1
29242: PPUSH
29243: LD_INT 4
29245: PPUSH
29246: CALL_OW 289
29250: PUSH
29251: LD_INT 0
29253: EQUAL
29254: IFFALSE 29271
// SetCargo ( i , mat_siberit , 100 ) ;
29256: LD_VAR 0 1
29260: PPUSH
29261: LD_INT 3
29263: PPUSH
29264: LD_INT 100
29266: PPUSH
29267: CALL_OW 290
29271: GO 29235
29273: POP
29274: POP
// end ;
29275: PPOPN 2
29277: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29278: LD_EXP 68
29282: PUSH
29283: LD_EXP 113
29287: AND
29288: IFFALSE 29471
29290: GO 29292
29292: DISABLE
29293: LD_INT 0
29295: PPUSH
29296: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29297: LD_ADDR_VAR 0 2
29301: PUSH
29302: LD_INT 22
29304: PUSH
29305: LD_OWVAR 2
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PPUSH
29314: CALL_OW 69
29318: ST_TO_ADDR
// if not tmp then
29319: LD_VAR 0 2
29323: NOT
29324: IFFALSE 29328
// exit ;
29326: GO 29471
// for i := 1 to 2 do
29328: LD_ADDR_VAR 0 1
29332: PUSH
29333: DOUBLE
29334: LD_INT 1
29336: DEC
29337: ST_TO_ADDR
29338: LD_INT 2
29340: PUSH
29341: FOR_TO
29342: IFFALSE 29469
// begin uc_side := your_side ;
29344: LD_ADDR_OWVAR 20
29348: PUSH
29349: LD_OWVAR 2
29353: ST_TO_ADDR
// uc_nation := nation_american ;
29354: LD_ADDR_OWVAR 21
29358: PUSH
29359: LD_INT 1
29361: ST_TO_ADDR
// vc_chassis := us_morphling ;
29362: LD_ADDR_OWVAR 37
29366: PUSH
29367: LD_INT 5
29369: ST_TO_ADDR
// vc_engine := engine_siberite ;
29370: LD_ADDR_OWVAR 39
29374: PUSH
29375: LD_INT 3
29377: ST_TO_ADDR
// vc_control := control_computer ;
29378: LD_ADDR_OWVAR 38
29382: PUSH
29383: LD_INT 3
29385: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29386: LD_ADDR_OWVAR 40
29390: PUSH
29391: LD_INT 10
29393: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29394: LD_VAR 0 2
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: CALL_OW 310
29407: NOT
29408: IFFALSE 29455
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29410: CALL_OW 45
29414: PPUSH
29415: LD_VAR 0 2
29419: PUSH
29420: LD_INT 1
29422: ARRAY
29423: PPUSH
29424: CALL_OW 250
29428: PPUSH
29429: LD_VAR 0 2
29433: PUSH
29434: LD_INT 1
29436: ARRAY
29437: PPUSH
29438: CALL_OW 251
29442: PPUSH
29443: LD_INT 12
29445: PPUSH
29446: LD_INT 1
29448: PPUSH
29449: CALL_OW 50
29453: GO 29467
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29455: CALL_OW 45
29459: PPUSH
29460: LD_INT 1
29462: PPUSH
29463: CALL_OW 51
// end ;
29467: GO 29341
29469: POP
29470: POP
// end ;
29471: PPOPN 2
29473: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29474: LD_EXP 68
29478: PUSH
29479: LD_EXP 114
29483: AND
29484: IFFALSE 29706
29486: GO 29488
29488: DISABLE
29489: LD_INT 0
29491: PPUSH
29492: PPUSH
29493: PPUSH
29494: PPUSH
29495: PPUSH
29496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29497: LD_ADDR_VAR 0 6
29501: PUSH
29502: LD_INT 22
29504: PUSH
29505: LD_OWVAR 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 21
29516: PUSH
29517: LD_INT 1
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 3
29526: PUSH
29527: LD_INT 23
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: PPUSH
29546: CALL_OW 69
29550: ST_TO_ADDR
// if not tmp then
29551: LD_VAR 0 6
29555: NOT
29556: IFFALSE 29560
// exit ;
29558: GO 29706
// s1 := rand ( 1 , 4 ) ;
29560: LD_ADDR_VAR 0 2
29564: PUSH
29565: LD_INT 1
29567: PPUSH
29568: LD_INT 4
29570: PPUSH
29571: CALL_OW 12
29575: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29576: LD_ADDR_VAR 0 4
29580: PUSH
29581: LD_VAR 0 6
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: LD_VAR 0 2
29594: PPUSH
29595: CALL_OW 259
29599: ST_TO_ADDR
// if s1 = 1 then
29600: LD_VAR 0 2
29604: PUSH
29605: LD_INT 1
29607: EQUAL
29608: IFFALSE 29628
// s2 := rand ( 2 , 4 ) else
29610: LD_ADDR_VAR 0 3
29614: PUSH
29615: LD_INT 2
29617: PPUSH
29618: LD_INT 4
29620: PPUSH
29621: CALL_OW 12
29625: ST_TO_ADDR
29626: GO 29636
// s2 := 1 ;
29628: LD_ADDR_VAR 0 3
29632: PUSH
29633: LD_INT 1
29635: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29636: LD_ADDR_VAR 0 5
29640: PUSH
29641: LD_VAR 0 6
29645: PUSH
29646: LD_INT 1
29648: ARRAY
29649: PPUSH
29650: LD_VAR 0 3
29654: PPUSH
29655: CALL_OW 259
29659: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29660: LD_VAR 0 6
29664: PUSH
29665: LD_INT 1
29667: ARRAY
29668: PPUSH
29669: LD_VAR 0 2
29673: PPUSH
29674: LD_VAR 0 5
29678: PPUSH
29679: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29683: LD_VAR 0 6
29687: PUSH
29688: LD_INT 1
29690: ARRAY
29691: PPUSH
29692: LD_VAR 0 3
29696: PPUSH
29697: LD_VAR 0 4
29701: PPUSH
29702: CALL_OW 237
// end ;
29706: PPOPN 6
29708: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29709: LD_EXP 68
29713: PUSH
29714: LD_EXP 115
29718: AND
29719: IFFALSE 29798
29721: GO 29723
29723: DISABLE
29724: LD_INT 0
29726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29727: LD_ADDR_VAR 0 1
29731: PUSH
29732: LD_INT 22
29734: PUSH
29735: LD_OWVAR 2
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 30
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: PPUSH
29758: CALL_OW 69
29762: ST_TO_ADDR
// if not tmp then
29763: LD_VAR 0 1
29767: NOT
29768: IFFALSE 29772
// exit ;
29770: GO 29798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29772: LD_VAR 0 1
29776: PUSH
29777: LD_INT 1
29779: PPUSH
29780: LD_VAR 0 1
29784: PPUSH
29785: CALL_OW 12
29789: ARRAY
29790: PPUSH
29791: LD_INT 1
29793: PPUSH
29794: CALL_OW 234
// end ;
29798: PPOPN 1
29800: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29801: LD_EXP 68
29805: PUSH
29806: LD_EXP 116
29810: AND
29811: IFFALSE 29923
29813: GO 29815
29815: DISABLE
29816: LD_INT 0
29818: PPUSH
29819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29820: LD_ADDR_VAR 0 2
29824: PUSH
29825: LD_INT 22
29827: PUSH
29828: LD_OWVAR 2
29832: PUSH
29833: EMPTY
29834: LIST
29835: LIST
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: LD_INT 30
29842: PUSH
29843: LD_INT 27
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 30
29852: PUSH
29853: LD_INT 26
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PUSH
29860: LD_INT 30
29862: PUSH
29863: LD_INT 28
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PPUSH
29880: CALL_OW 69
29884: ST_TO_ADDR
// if not tmp then
29885: LD_VAR 0 2
29889: NOT
29890: IFFALSE 29894
// exit ;
29892: GO 29923
// for i in tmp do
29894: LD_ADDR_VAR 0 1
29898: PUSH
29899: LD_VAR 0 2
29903: PUSH
29904: FOR_IN
29905: IFFALSE 29921
// SetLives ( i , 1 ) ;
29907: LD_VAR 0 1
29911: PPUSH
29912: LD_INT 1
29914: PPUSH
29915: CALL_OW 234
29919: GO 29904
29921: POP
29922: POP
// end ;
29923: PPOPN 2
29925: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29926: LD_EXP 68
29930: PUSH
29931: LD_EXP 117
29935: AND
29936: IFFALSE 30210
29938: GO 29940
29940: DISABLE
29941: LD_INT 0
29943: PPUSH
29944: PPUSH
29945: PPUSH
// begin i := rand ( 1 , 7 ) ;
29946: LD_ADDR_VAR 0 1
29950: PUSH
29951: LD_INT 1
29953: PPUSH
29954: LD_INT 7
29956: PPUSH
29957: CALL_OW 12
29961: ST_TO_ADDR
// case i of 1 :
29962: LD_VAR 0 1
29966: PUSH
29967: LD_INT 1
29969: DOUBLE
29970: EQUAL
29971: IFTRUE 29975
29973: GO 29985
29975: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29976: LD_STRING earthquake(getX(game), 0, 32)
29978: PPUSH
29979: CALL_OW 559
29983: GO 30210
29985: LD_INT 2
29987: DOUBLE
29988: EQUAL
29989: IFTRUE 29993
29991: GO 30007
29993: POP
// begin ToLua ( displayStucuk(); ) ;
29994: LD_STRING displayStucuk();
29996: PPUSH
29997: CALL_OW 559
// ResetFog ;
30001: CALL_OW 335
// end ; 3 :
30005: GO 30210
30007: LD_INT 3
30009: DOUBLE
30010: EQUAL
30011: IFTRUE 30015
30013: GO 30119
30015: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30016: LD_ADDR_VAR 0 2
30020: PUSH
30021: LD_INT 22
30023: PUSH
30024: LD_OWVAR 2
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: LD_INT 25
30035: PUSH
30036: LD_INT 1
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PPUSH
30047: CALL_OW 69
30051: ST_TO_ADDR
// if not tmp then
30052: LD_VAR 0 2
30056: NOT
30057: IFFALSE 30061
// exit ;
30059: GO 30210
// un := tmp [ rand ( 1 , tmp ) ] ;
30061: LD_ADDR_VAR 0 3
30065: PUSH
30066: LD_VAR 0 2
30070: PUSH
30071: LD_INT 1
30073: PPUSH
30074: LD_VAR 0 2
30078: PPUSH
30079: CALL_OW 12
30083: ARRAY
30084: ST_TO_ADDR
// if Crawls ( un ) then
30085: LD_VAR 0 3
30089: PPUSH
30090: CALL_OW 318
30094: IFFALSE 30105
// ComWalk ( un ) ;
30096: LD_VAR 0 3
30100: PPUSH
30101: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30105: LD_VAR 0 3
30109: PPUSH
30110: LD_INT 8
30112: PPUSH
30113: CALL_OW 336
// end ; 4 :
30117: GO 30210
30119: LD_INT 4
30121: DOUBLE
30122: EQUAL
30123: IFTRUE 30127
30125: GO 30188
30127: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30128: LD_ADDR_VAR 0 2
30132: PUSH
30133: LD_INT 22
30135: PUSH
30136: LD_OWVAR 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 30
30147: PUSH
30148: LD_INT 29
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PPUSH
30159: CALL_OW 69
30163: ST_TO_ADDR
// if not tmp then
30164: LD_VAR 0 2
30168: NOT
30169: IFFALSE 30173
// exit ;
30171: GO 30210
// DestroyUnit ( tmp [ 1 ] ) ;
30173: LD_VAR 0 2
30177: PUSH
30178: LD_INT 1
30180: ARRAY
30181: PPUSH
30182: CALL_OW 65
// end ; 5 .. 7 :
30186: GO 30210
30188: LD_INT 5
30190: DOUBLE
30191: GREATEREQUAL
30192: IFFALSE 30200
30194: LD_INT 7
30196: DOUBLE
30197: LESSEQUAL
30198: IFTRUE 30202
30200: GO 30209
30202: POP
// StreamSibBomb ; end ;
30203: CALL 26460 0 0
30207: GO 30210
30209: POP
// end ;
30210: PPOPN 3
30212: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30213: LD_EXP 68
30217: PUSH
30218: LD_EXP 118
30222: AND
30223: IFFALSE 30379
30225: GO 30227
30227: DISABLE
30228: LD_INT 0
30230: PPUSH
30231: PPUSH
30232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30233: LD_ADDR_VAR 0 2
30237: PUSH
30238: LD_INT 81
30240: PUSH
30241: LD_OWVAR 2
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 21
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 21
30265: PUSH
30266: LD_INT 2
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PPUSH
30282: CALL_OW 69
30286: ST_TO_ADDR
// if not tmp then
30287: LD_VAR 0 2
30291: NOT
30292: IFFALSE 30296
// exit ;
30294: GO 30379
// p := 0 ;
30296: LD_ADDR_VAR 0 3
30300: PUSH
30301: LD_INT 0
30303: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30304: LD_INT 35
30306: PPUSH
30307: CALL_OW 67
// p := p + 1 ;
30311: LD_ADDR_VAR 0 3
30315: PUSH
30316: LD_VAR 0 3
30320: PUSH
30321: LD_INT 1
30323: PLUS
30324: ST_TO_ADDR
// for i in tmp do
30325: LD_ADDR_VAR 0 1
30329: PUSH
30330: LD_VAR 0 2
30334: PUSH
30335: FOR_IN
30336: IFFALSE 30367
// if GetLives ( i ) < 1000 then
30338: LD_VAR 0 1
30342: PPUSH
30343: CALL_OW 256
30347: PUSH
30348: LD_INT 1000
30350: LESS
30351: IFFALSE 30365
// SetLives ( i , 1000 ) ;
30353: LD_VAR 0 1
30357: PPUSH
30358: LD_INT 1000
30360: PPUSH
30361: CALL_OW 234
30365: GO 30335
30367: POP
30368: POP
// until p > 20 ;
30369: LD_VAR 0 3
30373: PUSH
30374: LD_INT 20
30376: GREATER
30377: IFFALSE 30304
// end ;
30379: PPOPN 3
30381: END
// every 0 0$1 trigger StreamModeActive and sTime do
30382: LD_EXP 68
30386: PUSH
30387: LD_EXP 119
30391: AND
30392: IFFALSE 30427
30394: GO 30396
30396: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30397: LD_INT 28
30399: PPUSH
30400: LD_OWVAR 2
30404: PPUSH
30405: LD_INT 2
30407: PPUSH
30408: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30412: LD_INT 30
30414: PPUSH
30415: LD_OWVAR 2
30419: PPUSH
30420: LD_INT 2
30422: PPUSH
30423: CALL_OW 322
// end ;
30427: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30428: LD_EXP 68
30432: PUSH
30433: LD_EXP 120
30437: AND
30438: IFFALSE 30559
30440: GO 30442
30442: DISABLE
30443: LD_INT 0
30445: PPUSH
30446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30447: LD_ADDR_VAR 0 2
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_OWVAR 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 21
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: LD_INT 23
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: LIST
30495: PPUSH
30496: CALL_OW 69
30500: ST_TO_ADDR
// if not tmp then
30501: LD_VAR 0 2
30505: NOT
30506: IFFALSE 30510
// exit ;
30508: GO 30559
// for i in tmp do
30510: LD_ADDR_VAR 0 1
30514: PUSH
30515: LD_VAR 0 2
30519: PUSH
30520: FOR_IN
30521: IFFALSE 30557
// begin if Crawls ( i ) then
30523: LD_VAR 0 1
30527: PPUSH
30528: CALL_OW 318
30532: IFFALSE 30543
// ComWalk ( i ) ;
30534: LD_VAR 0 1
30538: PPUSH
30539: CALL_OW 138
// SetClass ( i , 2 ) ;
30543: LD_VAR 0 1
30547: PPUSH
30548: LD_INT 2
30550: PPUSH
30551: CALL_OW 336
// end ;
30555: GO 30520
30557: POP
30558: POP
// end ;
30559: PPOPN 2
30561: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30562: LD_EXP 68
30566: PUSH
30567: LD_EXP 121
30571: AND
30572: IFFALSE 30853
30574: GO 30576
30576: DISABLE
30577: LD_INT 0
30579: PPUSH
30580: PPUSH
30581: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30582: LD_OWVAR 2
30586: PPUSH
30587: LD_INT 9
30589: PPUSH
30590: LD_INT 1
30592: PPUSH
30593: LD_INT 1
30595: PPUSH
30596: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30600: LD_INT 9
30602: PPUSH
30603: LD_OWVAR 2
30607: PPUSH
30608: CALL_OW 343
// uc_side := 9 ;
30612: LD_ADDR_OWVAR 20
30616: PUSH
30617: LD_INT 9
30619: ST_TO_ADDR
// uc_nation := 2 ;
30620: LD_ADDR_OWVAR 21
30624: PUSH
30625: LD_INT 2
30627: ST_TO_ADDR
// hc_name := Dark Warrior ;
30628: LD_ADDR_OWVAR 26
30632: PUSH
30633: LD_STRING Dark Warrior
30635: ST_TO_ADDR
// hc_gallery :=  ;
30636: LD_ADDR_OWVAR 33
30640: PUSH
30641: LD_STRING 
30643: ST_TO_ADDR
// hc_noskilllimit := true ;
30644: LD_ADDR_OWVAR 76
30648: PUSH
30649: LD_INT 1
30651: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30652: LD_ADDR_OWVAR 31
30656: PUSH
30657: LD_INT 30
30659: PUSH
30660: LD_INT 30
30662: PUSH
30663: LD_INT 30
30665: PUSH
30666: LD_INT 30
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: ST_TO_ADDR
// un := CreateHuman ;
30675: LD_ADDR_VAR 0 3
30679: PUSH
30680: CALL_OW 44
30684: ST_TO_ADDR
// hc_noskilllimit := false ;
30685: LD_ADDR_OWVAR 76
30689: PUSH
30690: LD_INT 0
30692: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30693: LD_VAR 0 3
30697: PPUSH
30698: LD_INT 1
30700: PPUSH
30701: CALL_OW 51
// p := 0 ;
30705: LD_ADDR_VAR 0 2
30709: PUSH
30710: LD_INT 0
30712: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30713: LD_INT 35
30715: PPUSH
30716: CALL_OW 67
// p := p + 1 ;
30720: LD_ADDR_VAR 0 2
30724: PUSH
30725: LD_VAR 0 2
30729: PUSH
30730: LD_INT 1
30732: PLUS
30733: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30734: LD_VAR 0 3
30738: PPUSH
30739: CALL_OW 256
30743: PUSH
30744: LD_INT 1000
30746: LESS
30747: IFFALSE 30761
// SetLives ( un , 1000 ) ;
30749: LD_VAR 0 3
30753: PPUSH
30754: LD_INT 1000
30756: PPUSH
30757: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30761: LD_VAR 0 3
30765: PPUSH
30766: LD_INT 81
30768: PUSH
30769: LD_OWVAR 2
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 91
30780: PUSH
30781: LD_VAR 0 3
30785: PUSH
30786: LD_INT 30
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PPUSH
30798: CALL_OW 69
30802: PPUSH
30803: LD_VAR 0 3
30807: PPUSH
30808: CALL_OW 74
30812: PPUSH
30813: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30817: LD_VAR 0 2
30821: PUSH
30822: LD_INT 60
30824: GREATER
30825: PUSH
30826: LD_VAR 0 3
30830: PPUSH
30831: CALL_OW 301
30835: OR
30836: IFFALSE 30713
// if un then
30838: LD_VAR 0 3
30842: IFFALSE 30853
// RemoveUnit ( un ) ;
30844: LD_VAR 0 3
30848: PPUSH
30849: CALL_OW 64
// end ;
30853: PPOPN 3
30855: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30856: LD_INT 0
30858: PPUSH
// case cmd of 301 :
30859: LD_VAR 0 1
30863: PUSH
30864: LD_INT 301
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30904
30872: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
30873: LD_VAR 0 6
30877: PPUSH
30878: LD_VAR 0 7
30882: PPUSH
30883: LD_VAR 0 8
30887: PPUSH
30888: LD_VAR 0 4
30892: PPUSH
30893: LD_VAR 0 5
30897: PPUSH
30898: CALL 32105 0 5
30902: GO 31025
30904: LD_INT 302
30906: DOUBLE
30907: EQUAL
30908: IFTRUE 30912
30910: GO 30949
30912: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
30913: LD_VAR 0 6
30917: PPUSH
30918: LD_VAR 0 7
30922: PPUSH
30923: LD_VAR 0 8
30927: PPUSH
30928: LD_VAR 0 9
30932: PPUSH
30933: LD_VAR 0 4
30937: PPUSH
30938: LD_VAR 0 5
30942: PPUSH
30943: CALL 32196 0 6
30947: GO 31025
30949: LD_INT 303
30951: DOUBLE
30952: EQUAL
30953: IFTRUE 30957
30955: GO 30994
30957: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
30958: LD_VAR 0 6
30962: PPUSH
30963: LD_VAR 0 7
30967: PPUSH
30968: LD_VAR 0 8
30972: PPUSH
30973: LD_VAR 0 9
30977: PPUSH
30978: LD_VAR 0 4
30982: PPUSH
30983: LD_VAR 0 5
30987: PPUSH
30988: CALL 31030 0 6
30992: GO 31025
30994: LD_INT 304
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31002
31000: GO 31024
31002: POP
// hHackTeleport ( unit , x , y ) ; end ;
31003: LD_VAR 0 2
31007: PPUSH
31008: LD_VAR 0 4
31012: PPUSH
31013: LD_VAR 0 5
31017: PPUSH
31018: CALL 32789 0 3
31022: GO 31025
31024: POP
// end ;
31025: LD_VAR 0 12
31029: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31030: LD_INT 0
31032: PPUSH
31033: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31034: LD_VAR 0 1
31038: PUSH
31039: LD_INT 1
31041: LESS
31042: PUSH
31043: LD_VAR 0 1
31047: PUSH
31048: LD_INT 3
31050: GREATER
31051: OR
31052: PUSH
31053: LD_VAR 0 5
31057: PPUSH
31058: LD_VAR 0 6
31062: PPUSH
31063: CALL_OW 428
31067: OR
31068: IFFALSE 31072
// exit ;
31070: GO 31792
// uc_side := your_side ;
31072: LD_ADDR_OWVAR 20
31076: PUSH
31077: LD_OWVAR 2
31081: ST_TO_ADDR
// uc_nation := nation ;
31082: LD_ADDR_OWVAR 21
31086: PUSH
31087: LD_VAR 0 1
31091: ST_TO_ADDR
// bc_level = 1 ;
31092: LD_ADDR_OWVAR 43
31096: PUSH
31097: LD_INT 1
31099: ST_TO_ADDR
// case btype of 1 :
31100: LD_VAR 0 2
31104: PUSH
31105: LD_INT 1
31107: DOUBLE
31108: EQUAL
31109: IFTRUE 31113
31111: GO 31124
31113: POP
// bc_type := b_depot ; 2 :
31114: LD_ADDR_OWVAR 42
31118: PUSH
31119: LD_INT 0
31121: ST_TO_ADDR
31122: GO 31736
31124: LD_INT 2
31126: DOUBLE
31127: EQUAL
31128: IFTRUE 31132
31130: GO 31143
31132: POP
// bc_type := b_warehouse ; 3 :
31133: LD_ADDR_OWVAR 42
31137: PUSH
31138: LD_INT 1
31140: ST_TO_ADDR
31141: GO 31736
31143: LD_INT 3
31145: DOUBLE
31146: EQUAL
31147: IFTRUE 31151
31149: GO 31162
31151: POP
// bc_type := b_lab ; 4 .. 9 :
31152: LD_ADDR_OWVAR 42
31156: PUSH
31157: LD_INT 6
31159: ST_TO_ADDR
31160: GO 31736
31162: LD_INT 4
31164: DOUBLE
31165: GREATEREQUAL
31166: IFFALSE 31174
31168: LD_INT 9
31170: DOUBLE
31171: LESSEQUAL
31172: IFTRUE 31176
31174: GO 31228
31176: POP
// begin bc_type := b_lab_half ;
31177: LD_ADDR_OWVAR 42
31181: PUSH
31182: LD_INT 7
31184: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31185: LD_ADDR_OWVAR 44
31189: PUSH
31190: LD_INT 10
31192: PUSH
31193: LD_INT 11
31195: PUSH
31196: LD_INT 12
31198: PUSH
31199: LD_INT 15
31201: PUSH
31202: LD_INT 14
31204: PUSH
31205: LD_INT 13
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: PUSH
31216: LD_VAR 0 2
31220: PUSH
31221: LD_INT 3
31223: MINUS
31224: ARRAY
31225: ST_TO_ADDR
// end ; 10 .. 13 :
31226: GO 31736
31228: LD_INT 10
31230: DOUBLE
31231: GREATEREQUAL
31232: IFFALSE 31240
31234: LD_INT 13
31236: DOUBLE
31237: LESSEQUAL
31238: IFTRUE 31242
31240: GO 31319
31242: POP
// begin bc_type := b_lab_full ;
31243: LD_ADDR_OWVAR 42
31247: PUSH
31248: LD_INT 8
31250: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31251: LD_ADDR_OWVAR 44
31255: PUSH
31256: LD_INT 10
31258: PUSH
31259: LD_INT 12
31261: PUSH
31262: LD_INT 14
31264: PUSH
31265: LD_INT 13
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: PUSH
31274: LD_VAR 0 2
31278: PUSH
31279: LD_INT 9
31281: MINUS
31282: ARRAY
31283: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31284: LD_ADDR_OWVAR 45
31288: PUSH
31289: LD_INT 11
31291: PUSH
31292: LD_INT 15
31294: PUSH
31295: LD_INT 12
31297: PUSH
31298: LD_INT 15
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: PUSH
31307: LD_VAR 0 2
31311: PUSH
31312: LD_INT 9
31314: MINUS
31315: ARRAY
31316: ST_TO_ADDR
// end ; 14 :
31317: GO 31736
31319: LD_INT 14
31321: DOUBLE
31322: EQUAL
31323: IFTRUE 31327
31325: GO 31338
31327: POP
// bc_type := b_workshop ; 15 :
31328: LD_ADDR_OWVAR 42
31332: PUSH
31333: LD_INT 2
31335: ST_TO_ADDR
31336: GO 31736
31338: LD_INT 15
31340: DOUBLE
31341: EQUAL
31342: IFTRUE 31346
31344: GO 31357
31346: POP
// bc_type := b_factory ; 16 :
31347: LD_ADDR_OWVAR 42
31351: PUSH
31352: LD_INT 3
31354: ST_TO_ADDR
31355: GO 31736
31357: LD_INT 16
31359: DOUBLE
31360: EQUAL
31361: IFTRUE 31365
31363: GO 31376
31365: POP
// bc_type := b_ext_gun ; 17 :
31366: LD_ADDR_OWVAR 42
31370: PUSH
31371: LD_INT 17
31373: ST_TO_ADDR
31374: GO 31736
31376: LD_INT 17
31378: DOUBLE
31379: EQUAL
31380: IFTRUE 31384
31382: GO 31412
31384: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31385: LD_ADDR_OWVAR 42
31389: PUSH
31390: LD_INT 19
31392: PUSH
31393: LD_INT 23
31395: PUSH
31396: LD_INT 19
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: LIST
31403: PUSH
31404: LD_VAR 0 1
31408: ARRAY
31409: ST_TO_ADDR
31410: GO 31736
31412: LD_INT 18
31414: DOUBLE
31415: EQUAL
31416: IFTRUE 31420
31418: GO 31431
31420: POP
// bc_type := b_ext_radar ; 19 :
31421: LD_ADDR_OWVAR 42
31425: PUSH
31426: LD_INT 20
31428: ST_TO_ADDR
31429: GO 31736
31431: LD_INT 19
31433: DOUBLE
31434: EQUAL
31435: IFTRUE 31439
31437: GO 31450
31439: POP
// bc_type := b_ext_radio ; 20 :
31440: LD_ADDR_OWVAR 42
31444: PUSH
31445: LD_INT 22
31447: ST_TO_ADDR
31448: GO 31736
31450: LD_INT 20
31452: DOUBLE
31453: EQUAL
31454: IFTRUE 31458
31456: GO 31469
31458: POP
// bc_type := b_ext_siberium ; 21 :
31459: LD_ADDR_OWVAR 42
31463: PUSH
31464: LD_INT 21
31466: ST_TO_ADDR
31467: GO 31736
31469: LD_INT 21
31471: DOUBLE
31472: EQUAL
31473: IFTRUE 31477
31475: GO 31488
31477: POP
// bc_type := b_ext_computer ; 22 :
31478: LD_ADDR_OWVAR 42
31482: PUSH
31483: LD_INT 24
31485: ST_TO_ADDR
31486: GO 31736
31488: LD_INT 22
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31507
31496: POP
// bc_type := b_ext_track ; 23 :
31497: LD_ADDR_OWVAR 42
31501: PUSH
31502: LD_INT 16
31504: ST_TO_ADDR
31505: GO 31736
31507: LD_INT 23
31509: DOUBLE
31510: EQUAL
31511: IFTRUE 31515
31513: GO 31526
31515: POP
// bc_type := b_ext_laser ; 24 :
31516: LD_ADDR_OWVAR 42
31520: PUSH
31521: LD_INT 25
31523: ST_TO_ADDR
31524: GO 31736
31526: LD_INT 24
31528: DOUBLE
31529: EQUAL
31530: IFTRUE 31534
31532: GO 31545
31534: POP
// bc_type := b_control_tower ; 25 :
31535: LD_ADDR_OWVAR 42
31539: PUSH
31540: LD_INT 36
31542: ST_TO_ADDR
31543: GO 31736
31545: LD_INT 25
31547: DOUBLE
31548: EQUAL
31549: IFTRUE 31553
31551: GO 31564
31553: POP
// bc_type := b_breastwork ; 26 :
31554: LD_ADDR_OWVAR 42
31558: PUSH
31559: LD_INT 31
31561: ST_TO_ADDR
31562: GO 31736
31564: LD_INT 26
31566: DOUBLE
31567: EQUAL
31568: IFTRUE 31572
31570: GO 31583
31572: POP
// bc_type := b_bunker ; 27 :
31573: LD_ADDR_OWVAR 42
31577: PUSH
31578: LD_INT 32
31580: ST_TO_ADDR
31581: GO 31736
31583: LD_INT 27
31585: DOUBLE
31586: EQUAL
31587: IFTRUE 31591
31589: GO 31602
31591: POP
// bc_type := b_turret ; 28 :
31592: LD_ADDR_OWVAR 42
31596: PUSH
31597: LD_INT 33
31599: ST_TO_ADDR
31600: GO 31736
31602: LD_INT 28
31604: DOUBLE
31605: EQUAL
31606: IFTRUE 31610
31608: GO 31621
31610: POP
// bc_type := b_armoury ; 29 :
31611: LD_ADDR_OWVAR 42
31615: PUSH
31616: LD_INT 4
31618: ST_TO_ADDR
31619: GO 31736
31621: LD_INT 29
31623: DOUBLE
31624: EQUAL
31625: IFTRUE 31629
31627: GO 31640
31629: POP
// bc_type := b_barracks ; 30 :
31630: LD_ADDR_OWVAR 42
31634: PUSH
31635: LD_INT 5
31637: ST_TO_ADDR
31638: GO 31736
31640: LD_INT 30
31642: DOUBLE
31643: EQUAL
31644: IFTRUE 31648
31646: GO 31659
31648: POP
// bc_type := b_solar_power ; 31 :
31649: LD_ADDR_OWVAR 42
31653: PUSH
31654: LD_INT 27
31656: ST_TO_ADDR
31657: GO 31736
31659: LD_INT 31
31661: DOUBLE
31662: EQUAL
31663: IFTRUE 31667
31665: GO 31678
31667: POP
// bc_type := b_oil_power ; 32 :
31668: LD_ADDR_OWVAR 42
31672: PUSH
31673: LD_INT 26
31675: ST_TO_ADDR
31676: GO 31736
31678: LD_INT 32
31680: DOUBLE
31681: EQUAL
31682: IFTRUE 31686
31684: GO 31697
31686: POP
// bc_type := b_siberite_power ; 33 :
31687: LD_ADDR_OWVAR 42
31691: PUSH
31692: LD_INT 28
31694: ST_TO_ADDR
31695: GO 31736
31697: LD_INT 33
31699: DOUBLE
31700: EQUAL
31701: IFTRUE 31705
31703: GO 31716
31705: POP
// bc_type := b_oil_mine ; 34 :
31706: LD_ADDR_OWVAR 42
31710: PUSH
31711: LD_INT 29
31713: ST_TO_ADDR
31714: GO 31736
31716: LD_INT 34
31718: DOUBLE
31719: EQUAL
31720: IFTRUE 31724
31722: GO 31735
31724: POP
// bc_type := b_siberite_mine ; end ;
31725: LD_ADDR_OWVAR 42
31729: PUSH
31730: LD_INT 30
31732: ST_TO_ADDR
31733: GO 31736
31735: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
31736: LD_ADDR_VAR 0 8
31740: PUSH
31741: LD_VAR 0 5
31745: PPUSH
31746: LD_VAR 0 6
31750: PPUSH
31751: LD_VAR 0 3
31755: PPUSH
31756: CALL_OW 47
31760: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
31761: LD_OWVAR 42
31765: PUSH
31766: LD_INT 32
31768: PUSH
31769: LD_INT 33
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: IN
31776: IFFALSE 31792
// PlaceWeaponTurret ( b , weapon ) ;
31778: LD_VAR 0 8
31782: PPUSH
31783: LD_VAR 0 4
31787: PPUSH
31788: CALL_OW 431
// end ;
31792: LD_VAR 0 7
31796: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
31797: LD_INT 0
31799: PPUSH
31800: PPUSH
31801: PPUSH
31802: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31803: LD_ADDR_VAR 0 4
31807: PUSH
31808: LD_INT 22
31810: PUSH
31811: LD_OWVAR 2
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 30
31825: PUSH
31826: LD_INT 0
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 30
31835: PUSH
31836: LD_INT 1
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PPUSH
31852: CALL_OW 69
31856: ST_TO_ADDR
// if not tmp then
31857: LD_VAR 0 4
31861: NOT
31862: IFFALSE 31866
// exit ;
31864: GO 31925
// for i in tmp do
31866: LD_ADDR_VAR 0 2
31870: PUSH
31871: LD_VAR 0 4
31875: PUSH
31876: FOR_IN
31877: IFFALSE 31923
// for j = 1 to 3 do
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: DOUBLE
31885: LD_INT 1
31887: DEC
31888: ST_TO_ADDR
31889: LD_INT 3
31891: PUSH
31892: FOR_TO
31893: IFFALSE 31919
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
31895: LD_VAR 0 2
31899: PPUSH
31900: CALL_OW 274
31904: PPUSH
31905: LD_VAR 0 3
31909: PPUSH
31910: LD_INT 99999
31912: PPUSH
31913: CALL_OW 277
31917: GO 31892
31919: POP
31920: POP
31921: GO 31876
31923: POP
31924: POP
// end ;
31925: LD_VAR 0 1
31929: RET
// export function hHackSetLevel10 ; var i , j ; begin
31930: LD_INT 0
31932: PPUSH
31933: PPUSH
31934: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
31935: LD_ADDR_VAR 0 2
31939: PUSH
31940: LD_INT 21
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PPUSH
31950: CALL_OW 69
31954: PUSH
31955: FOR_IN
31956: IFFALSE 32008
// if IsSelected ( i ) then
31958: LD_VAR 0 2
31962: PPUSH
31963: CALL_OW 306
31967: IFFALSE 32006
// begin for j := 1 to 4 do
31969: LD_ADDR_VAR 0 3
31973: PUSH
31974: DOUBLE
31975: LD_INT 1
31977: DEC
31978: ST_TO_ADDR
31979: LD_INT 4
31981: PUSH
31982: FOR_TO
31983: IFFALSE 32004
// SetSkill ( i , j , 10 ) ;
31985: LD_VAR 0 2
31989: PPUSH
31990: LD_VAR 0 3
31994: PPUSH
31995: LD_INT 10
31997: PPUSH
31998: CALL_OW 237
32002: GO 31982
32004: POP
32005: POP
// end ;
32006: GO 31955
32008: POP
32009: POP
// end ;
32010: LD_VAR 0 1
32014: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32015: LD_INT 0
32017: PPUSH
32018: PPUSH
32019: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32020: LD_ADDR_VAR 0 2
32024: PUSH
32025: LD_INT 22
32027: PUSH
32028: LD_OWVAR 2
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: LD_INT 21
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PPUSH
32051: CALL_OW 69
32055: PUSH
32056: FOR_IN
32057: IFFALSE 32098
// begin for j := 1 to 4 do
32059: LD_ADDR_VAR 0 3
32063: PUSH
32064: DOUBLE
32065: LD_INT 1
32067: DEC
32068: ST_TO_ADDR
32069: LD_INT 4
32071: PUSH
32072: FOR_TO
32073: IFFALSE 32094
// SetSkill ( i , j , 10 ) ;
32075: LD_VAR 0 2
32079: PPUSH
32080: LD_VAR 0 3
32084: PPUSH
32085: LD_INT 10
32087: PPUSH
32088: CALL_OW 237
32092: GO 32072
32094: POP
32095: POP
// end ;
32096: GO 32056
32098: POP
32099: POP
// end ;
32100: LD_VAR 0 1
32104: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32105: LD_INT 0
32107: PPUSH
// uc_side := your_side ;
32108: LD_ADDR_OWVAR 20
32112: PUSH
32113: LD_OWVAR 2
32117: ST_TO_ADDR
// uc_nation := nation ;
32118: LD_ADDR_OWVAR 21
32122: PUSH
32123: LD_VAR 0 1
32127: ST_TO_ADDR
// InitHc ;
32128: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32132: LD_INT 0
32134: PPUSH
32135: LD_VAR 0 2
32139: PPUSH
32140: LD_VAR 0 3
32144: PPUSH
32145: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32149: LD_VAR 0 4
32153: PPUSH
32154: LD_VAR 0 5
32158: PPUSH
32159: CALL_OW 428
32163: PUSH
32164: LD_INT 0
32166: EQUAL
32167: IFFALSE 32191
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32169: CALL_OW 44
32173: PPUSH
32174: LD_VAR 0 4
32178: PPUSH
32179: LD_VAR 0 5
32183: PPUSH
32184: LD_INT 1
32186: PPUSH
32187: CALL_OW 48
// end ;
32191: LD_VAR 0 6
32195: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32196: LD_INT 0
32198: PPUSH
32199: PPUSH
// uc_side := your_side ;
32200: LD_ADDR_OWVAR 20
32204: PUSH
32205: LD_OWVAR 2
32209: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32210: LD_VAR 0 1
32214: PUSH
32215: LD_INT 1
32217: PUSH
32218: LD_INT 2
32220: PUSH
32221: LD_INT 3
32223: PUSH
32224: LD_INT 4
32226: PUSH
32227: LD_INT 5
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: IN
32237: IFFALSE 32249
// uc_nation := nation_american else
32239: LD_ADDR_OWVAR 21
32243: PUSH
32244: LD_INT 1
32246: ST_TO_ADDR
32247: GO 32292
// if chassis in [ 11 , 12 , 13 , 14 ] then
32249: LD_VAR 0 1
32253: PUSH
32254: LD_INT 11
32256: PUSH
32257: LD_INT 12
32259: PUSH
32260: LD_INT 13
32262: PUSH
32263: LD_INT 14
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: IN
32272: IFFALSE 32284
// uc_nation := nation_arabian else
32274: LD_ADDR_OWVAR 21
32278: PUSH
32279: LD_INT 2
32281: ST_TO_ADDR
32282: GO 32292
// uc_nation := nation_russian ;
32284: LD_ADDR_OWVAR 21
32288: PUSH
32289: LD_INT 3
32291: ST_TO_ADDR
// vc_chassis := chassis ;
32292: LD_ADDR_OWVAR 37
32296: PUSH
32297: LD_VAR 0 1
32301: ST_TO_ADDR
// vc_engine := engine ;
32302: LD_ADDR_OWVAR 39
32306: PUSH
32307: LD_VAR 0 2
32311: ST_TO_ADDR
// vc_control := control ;
32312: LD_ADDR_OWVAR 38
32316: PUSH
32317: LD_VAR 0 3
32321: ST_TO_ADDR
// vc_weapon := weapon ;
32322: LD_ADDR_OWVAR 40
32326: PUSH
32327: LD_VAR 0 4
32331: ST_TO_ADDR
// un := CreateVehicle ;
32332: LD_ADDR_VAR 0 8
32336: PUSH
32337: CALL_OW 45
32341: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32342: LD_VAR 0 8
32346: PPUSH
32347: LD_INT 0
32349: PPUSH
32350: LD_INT 5
32352: PPUSH
32353: CALL_OW 12
32357: PPUSH
32358: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32362: LD_VAR 0 8
32366: PPUSH
32367: LD_VAR 0 5
32371: PPUSH
32372: LD_VAR 0 6
32376: PPUSH
32377: LD_INT 1
32379: PPUSH
32380: CALL_OW 48
// end ;
32384: LD_VAR 0 7
32388: RET
// export hInvincible ; every 1 do
32389: GO 32391
32391: DISABLE
// hInvincible := [ ] ;
32392: LD_ADDR_EXP 122
32396: PUSH
32397: EMPTY
32398: ST_TO_ADDR
32399: END
// every 10 do var i ;
32400: GO 32402
32402: DISABLE
32403: LD_INT 0
32405: PPUSH
// begin enable ;
32406: ENABLE
// if not hInvincible then
32407: LD_EXP 122
32411: NOT
32412: IFFALSE 32416
// exit ;
32414: GO 32460
// for i in hInvincible do
32416: LD_ADDR_VAR 0 1
32420: PUSH
32421: LD_EXP 122
32425: PUSH
32426: FOR_IN
32427: IFFALSE 32458
// if GetLives ( i ) < 1000 then
32429: LD_VAR 0 1
32433: PPUSH
32434: CALL_OW 256
32438: PUSH
32439: LD_INT 1000
32441: LESS
32442: IFFALSE 32456
// SetLives ( i , 1000 ) ;
32444: LD_VAR 0 1
32448: PPUSH
32449: LD_INT 1000
32451: PPUSH
32452: CALL_OW 234
32456: GO 32426
32458: POP
32459: POP
// end ;
32460: PPOPN 1
32462: END
// export function hHackInvincible ; var i ; begin
32463: LD_INT 0
32465: PPUSH
32466: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32467: LD_ADDR_VAR 0 2
32471: PUSH
32472: LD_INT 2
32474: PUSH
32475: LD_INT 21
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 21
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: LIST
32499: PPUSH
32500: CALL_OW 69
32504: PUSH
32505: FOR_IN
32506: IFFALSE 32567
// if IsSelected ( i ) then
32508: LD_VAR 0 2
32512: PPUSH
32513: CALL_OW 306
32517: IFFALSE 32565
// begin if i in hInvincible then
32519: LD_VAR 0 2
32523: PUSH
32524: LD_EXP 122
32528: IN
32529: IFFALSE 32549
// hInvincible := hInvincible diff i else
32531: LD_ADDR_EXP 122
32535: PUSH
32536: LD_EXP 122
32540: PUSH
32541: LD_VAR 0 2
32545: DIFF
32546: ST_TO_ADDR
32547: GO 32565
// hInvincible := hInvincible union i ;
32549: LD_ADDR_EXP 122
32553: PUSH
32554: LD_EXP 122
32558: PUSH
32559: LD_VAR 0 2
32563: UNION
32564: ST_TO_ADDR
// end ;
32565: GO 32505
32567: POP
32568: POP
// end ;
32569: LD_VAR 0 1
32573: RET
// export function hHackInvisible ; var i , j ; begin
32574: LD_INT 0
32576: PPUSH
32577: PPUSH
32578: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32579: LD_ADDR_VAR 0 2
32583: PUSH
32584: LD_INT 21
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PPUSH
32594: CALL_OW 69
32598: PUSH
32599: FOR_IN
32600: IFFALSE 32624
// if IsSelected ( i ) then
32602: LD_VAR 0 2
32606: PPUSH
32607: CALL_OW 306
32611: IFFALSE 32622
// ComForceInvisible ( i ) ;
32613: LD_VAR 0 2
32617: PPUSH
32618: CALL_OW 496
32622: GO 32599
32624: POP
32625: POP
// end ;
32626: LD_VAR 0 1
32630: RET
// export function hHackChangeYourSide ; begin
32631: LD_INT 0
32633: PPUSH
// if your_side = 8 then
32634: LD_OWVAR 2
32638: PUSH
32639: LD_INT 8
32641: EQUAL
32642: IFFALSE 32654
// your_side := 0 else
32644: LD_ADDR_OWVAR 2
32648: PUSH
32649: LD_INT 0
32651: ST_TO_ADDR
32652: GO 32668
// your_side := your_side + 1 ;
32654: LD_ADDR_OWVAR 2
32658: PUSH
32659: LD_OWVAR 2
32663: PUSH
32664: LD_INT 1
32666: PLUS
32667: ST_TO_ADDR
// end ;
32668: LD_VAR 0 1
32672: RET
// export function hHackChangeUnitSide ; var i , j ; begin
32673: LD_INT 0
32675: PPUSH
32676: PPUSH
32677: PPUSH
// for i in all_units do
32678: LD_ADDR_VAR 0 2
32682: PUSH
32683: LD_OWVAR 3
32687: PUSH
32688: FOR_IN
32689: IFFALSE 32767
// if IsSelected ( i ) then
32691: LD_VAR 0 2
32695: PPUSH
32696: CALL_OW 306
32700: IFFALSE 32765
// begin j := GetSide ( i ) ;
32702: LD_ADDR_VAR 0 3
32706: PUSH
32707: LD_VAR 0 2
32711: PPUSH
32712: CALL_OW 255
32716: ST_TO_ADDR
// if j = 8 then
32717: LD_VAR 0 3
32721: PUSH
32722: LD_INT 8
32724: EQUAL
32725: IFFALSE 32737
// j := 0 else
32727: LD_ADDR_VAR 0 3
32731: PUSH
32732: LD_INT 0
32734: ST_TO_ADDR
32735: GO 32751
// j := j + 1 ;
32737: LD_ADDR_VAR 0 3
32741: PUSH
32742: LD_VAR 0 3
32746: PUSH
32747: LD_INT 1
32749: PLUS
32750: ST_TO_ADDR
// SetSide ( i , j ) ;
32751: LD_VAR 0 2
32755: PPUSH
32756: LD_VAR 0 3
32760: PPUSH
32761: CALL_OW 235
// end ;
32765: GO 32688
32767: POP
32768: POP
// end ;
32769: LD_VAR 0 1
32773: RET
// export function hHackFog ; begin
32774: LD_INT 0
32776: PPUSH
// FogOff ( true ) ;
32777: LD_INT 1
32779: PPUSH
32780: CALL_OW 344
// end ;
32784: LD_VAR 0 1
32788: RET
// export function hHackTeleport ( unit , x , y ) ; begin
32789: LD_INT 0
32791: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
32792: LD_VAR 0 1
32796: PPUSH
32797: LD_VAR 0 2
32801: PPUSH
32802: LD_VAR 0 3
32806: PPUSH
32807: LD_INT 1
32809: PPUSH
32810: LD_INT 1
32812: PPUSH
32813: CALL_OW 483
// CenterOnXY ( x , y ) ;
32817: LD_VAR 0 2
32821: PPUSH
32822: LD_VAR 0 3
32826: PPUSH
32827: CALL_OW 84
// end ; end_of_file
32831: LD_VAR 0 4
32835: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
32836: LD_INT 0
32838: PPUSH
32839: PPUSH
32840: PPUSH
32841: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
32842: LD_VAR 0 1
32846: PPUSH
32847: CALL_OW 264
32851: PUSH
32852: LD_EXP 56
32856: EQUAL
32857: IFFALSE 32929
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
32859: LD_INT 68
32861: PPUSH
32862: LD_VAR 0 1
32866: PPUSH
32867: CALL_OW 255
32871: PPUSH
32872: CALL_OW 321
32876: PUSH
32877: LD_INT 2
32879: EQUAL
32880: IFFALSE 32892
// eff := 70 else
32882: LD_ADDR_VAR 0 4
32886: PUSH
32887: LD_INT 70
32889: ST_TO_ADDR
32890: GO 32900
// eff := 30 ;
32892: LD_ADDR_VAR 0 4
32896: PUSH
32897: LD_INT 30
32899: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
32900: LD_VAR 0 1
32904: PPUSH
32905: CALL_OW 250
32909: PPUSH
32910: LD_VAR 0 1
32914: PPUSH
32915: CALL_OW 251
32919: PPUSH
32920: LD_VAR 0 4
32924: PPUSH
32925: CALL_OW 495
// end ; end ;
32929: LD_VAR 0 2
32933: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
32934: LD_INT 0
32936: PPUSH
// end ;
32937: LD_VAR 0 4
32941: RET
// export function SOS_Command ( cmd ) ; begin
32942: LD_INT 0
32944: PPUSH
// end ;
32945: LD_VAR 0 2
32949: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32950: LD_INT 0
32952: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32953: LD_VAR 0 1
32957: PUSH
32958: LD_INT 250
32960: EQUAL
32961: PUSH
32962: LD_VAR 0 2
32966: PPUSH
32967: CALL_OW 264
32971: PUSH
32972: LD_EXP 59
32976: EQUAL
32977: AND
32978: IFFALSE 32999
// MinerPlaceMine ( unit , x , y ) ;
32980: LD_VAR 0 2
32984: PPUSH
32985: LD_VAR 0 4
32989: PPUSH
32990: LD_VAR 0 5
32994: PPUSH
32995: CALL 35340 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32999: LD_VAR 0 1
33003: PUSH
33004: LD_INT 251
33006: EQUAL
33007: PUSH
33008: LD_VAR 0 2
33012: PPUSH
33013: CALL_OW 264
33017: PUSH
33018: LD_EXP 59
33022: EQUAL
33023: AND
33024: IFFALSE 33045
// MinerDetonateMine ( unit , x , y ) ;
33026: LD_VAR 0 2
33030: PPUSH
33031: LD_VAR 0 4
33035: PPUSH
33036: LD_VAR 0 5
33040: PPUSH
33041: CALL 35617 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
33045: LD_VAR 0 1
33049: PUSH
33050: LD_INT 252
33052: EQUAL
33053: PUSH
33054: LD_VAR 0 2
33058: PPUSH
33059: CALL_OW 264
33063: PUSH
33064: LD_EXP 59
33068: EQUAL
33069: AND
33070: IFFALSE 33091
// MinerCreateMinefield ( unit , x , y ) ;
33072: LD_VAR 0 2
33076: PPUSH
33077: LD_VAR 0 4
33081: PPUSH
33082: LD_VAR 0 5
33086: PPUSH
33087: CALL 36034 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
33091: LD_VAR 0 1
33095: PUSH
33096: LD_INT 253
33098: EQUAL
33099: PUSH
33100: LD_VAR 0 2
33104: PPUSH
33105: CALL_OW 257
33109: PUSH
33110: LD_INT 5
33112: EQUAL
33113: AND
33114: IFFALSE 33135
// ComBinocular ( unit , x , y ) ;
33116: LD_VAR 0 2
33120: PPUSH
33121: LD_VAR 0 4
33125: PPUSH
33126: LD_VAR 0 5
33130: PPUSH
33131: CALL 36405 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
33135: LD_VAR 0 1
33139: PUSH
33140: LD_INT 254
33142: EQUAL
33143: PUSH
33144: LD_VAR 0 2
33148: PPUSH
33149: CALL_OW 264
33153: PUSH
33154: LD_EXP 54
33158: EQUAL
33159: AND
33160: PUSH
33161: LD_VAR 0 3
33165: PPUSH
33166: CALL_OW 263
33170: PUSH
33171: LD_INT 3
33173: EQUAL
33174: AND
33175: IFFALSE 33191
// HackDestroyVehicle ( unit , selectedUnit ) ;
33177: LD_VAR 0 2
33181: PPUSH
33182: LD_VAR 0 3
33186: PPUSH
33187: CALL 34700 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
33191: LD_VAR 0 1
33195: PUSH
33196: LD_INT 255
33198: EQUAL
33199: PUSH
33200: LD_VAR 0 2
33204: PPUSH
33205: CALL_OW 264
33209: PUSH
33210: LD_INT 14
33212: PUSH
33213: LD_INT 53
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: IN
33220: AND
33221: PUSH
33222: LD_VAR 0 4
33226: PPUSH
33227: LD_VAR 0 5
33231: PPUSH
33232: CALL_OW 488
33236: AND
33237: IFFALSE 33261
// CutTreeXYR ( unit , x , y , 12 ) ;
33239: LD_VAR 0 2
33243: PPUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: LD_VAR 0 5
33253: PPUSH
33254: LD_INT 12
33256: PPUSH
33257: CALL 33266 0 4
// end ;
33261: LD_VAR 0 6
33265: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33266: LD_INT 0
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
33276: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
33277: LD_VAR 0 1
33281: NOT
33282: PUSH
33283: LD_VAR 0 2
33287: PPUSH
33288: LD_VAR 0 3
33292: PPUSH
33293: CALL_OW 488
33297: NOT
33298: OR
33299: PUSH
33300: LD_VAR 0 4
33304: NOT
33305: OR
33306: IFFALSE 33310
// exit ;
33308: GO 33650
// list := [ ] ;
33310: LD_ADDR_VAR 0 13
33314: PUSH
33315: EMPTY
33316: ST_TO_ADDR
// if x - r < 0 then
33317: LD_VAR 0 2
33321: PUSH
33322: LD_VAR 0 4
33326: MINUS
33327: PUSH
33328: LD_INT 0
33330: LESS
33331: IFFALSE 33343
// min_x := 0 else
33333: LD_ADDR_VAR 0 7
33337: PUSH
33338: LD_INT 0
33340: ST_TO_ADDR
33341: GO 33359
// min_x := x - r ;
33343: LD_ADDR_VAR 0 7
33347: PUSH
33348: LD_VAR 0 2
33352: PUSH
33353: LD_VAR 0 4
33357: MINUS
33358: ST_TO_ADDR
// if y - r < 0 then
33359: LD_VAR 0 3
33363: PUSH
33364: LD_VAR 0 4
33368: MINUS
33369: PUSH
33370: LD_INT 0
33372: LESS
33373: IFFALSE 33385
// min_y := 0 else
33375: LD_ADDR_VAR 0 8
33379: PUSH
33380: LD_INT 0
33382: ST_TO_ADDR
33383: GO 33401
// min_y := y - r ;
33385: LD_ADDR_VAR 0 8
33389: PUSH
33390: LD_VAR 0 3
33394: PUSH
33395: LD_VAR 0 4
33399: MINUS
33400: ST_TO_ADDR
// max_x := x + r ;
33401: LD_ADDR_VAR 0 9
33405: PUSH
33406: LD_VAR 0 2
33410: PUSH
33411: LD_VAR 0 4
33415: PLUS
33416: ST_TO_ADDR
// max_y := y + r ;
33417: LD_ADDR_VAR 0 10
33421: PUSH
33422: LD_VAR 0 3
33426: PUSH
33427: LD_VAR 0 4
33431: PLUS
33432: ST_TO_ADDR
// for _x = min_x to max_x do
33433: LD_ADDR_VAR 0 11
33437: PUSH
33438: DOUBLE
33439: LD_VAR 0 7
33443: DEC
33444: ST_TO_ADDR
33445: LD_VAR 0 9
33449: PUSH
33450: FOR_TO
33451: IFFALSE 33568
// for _y = min_y to max_y do
33453: LD_ADDR_VAR 0 12
33457: PUSH
33458: DOUBLE
33459: LD_VAR 0 8
33463: DEC
33464: ST_TO_ADDR
33465: LD_VAR 0 10
33469: PUSH
33470: FOR_TO
33471: IFFALSE 33564
// begin if not ValidHex ( _x , _y ) then
33473: LD_VAR 0 11
33477: PPUSH
33478: LD_VAR 0 12
33482: PPUSH
33483: CALL_OW 488
33487: NOT
33488: IFFALSE 33492
// continue ;
33490: GO 33470
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33492: LD_VAR 0 11
33496: PPUSH
33497: LD_VAR 0 12
33501: PPUSH
33502: CALL_OW 351
33506: PUSH
33507: LD_VAR 0 11
33511: PPUSH
33512: LD_VAR 0 12
33516: PPUSH
33517: CALL_OW 554
33521: AND
33522: IFFALSE 33562
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33524: LD_ADDR_VAR 0 13
33528: PUSH
33529: LD_VAR 0 13
33533: PPUSH
33534: LD_VAR 0 13
33538: PUSH
33539: LD_INT 1
33541: PLUS
33542: PPUSH
33543: LD_VAR 0 11
33547: PUSH
33548: LD_VAR 0 12
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PPUSH
33557: CALL_OW 2
33561: ST_TO_ADDR
// end ;
33562: GO 33470
33564: POP
33565: POP
33566: GO 33450
33568: POP
33569: POP
// if not list then
33570: LD_VAR 0 13
33574: NOT
33575: IFFALSE 33579
// exit ;
33577: GO 33650
// for i in list do
33579: LD_ADDR_VAR 0 6
33583: PUSH
33584: LD_VAR 0 13
33588: PUSH
33589: FOR_IN
33590: IFFALSE 33648
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33592: LD_VAR 0 1
33596: PPUSH
33597: LD_STRING M
33599: PUSH
33600: LD_VAR 0 6
33604: PUSH
33605: LD_INT 1
33607: ARRAY
33608: PUSH
33609: LD_VAR 0 6
33613: PUSH
33614: LD_INT 2
33616: ARRAY
33617: PUSH
33618: LD_INT 0
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: PUSH
33639: EMPTY
33640: LIST
33641: PPUSH
33642: CALL_OW 447
33646: GO 33589
33648: POP
33649: POP
// end ;
33650: LD_VAR 0 5
33654: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
33655: LD_EXP 123
33659: NOT
33660: IFFALSE 33710
33662: GO 33664
33664: DISABLE
// begin initHack := true ;
33665: LD_ADDR_EXP 123
33669: PUSH
33670: LD_INT 1
33672: ST_TO_ADDR
// hackTanks := [ ] ;
33673: LD_ADDR_EXP 124
33677: PUSH
33678: EMPTY
33679: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
33680: LD_ADDR_EXP 125
33684: PUSH
33685: EMPTY
33686: ST_TO_ADDR
// hackLimit := 3 ;
33687: LD_ADDR_EXP 126
33691: PUSH
33692: LD_INT 3
33694: ST_TO_ADDR
// hackDist := 12 ;
33695: LD_ADDR_EXP 127
33699: PUSH
33700: LD_INT 12
33702: ST_TO_ADDR
// hackCounter := [ ] ;
33703: LD_ADDR_EXP 128
33707: PUSH
33708: EMPTY
33709: ST_TO_ADDR
// end ;
33710: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
33711: LD_EXP 123
33715: PUSH
33716: LD_INT 34
33718: PUSH
33719: LD_EXP 54
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PPUSH
33728: CALL_OW 69
33732: AND
33733: IFFALSE 33988
33735: GO 33737
33737: DISABLE
33738: LD_INT 0
33740: PPUSH
33741: PPUSH
// begin enable ;
33742: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
33743: LD_ADDR_VAR 0 1
33747: PUSH
33748: LD_INT 34
33750: PUSH
33751: LD_EXP 54
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PPUSH
33760: CALL_OW 69
33764: PUSH
33765: FOR_IN
33766: IFFALSE 33986
// begin if not i in hackTanks then
33768: LD_VAR 0 1
33772: PUSH
33773: LD_EXP 124
33777: IN
33778: NOT
33779: IFFALSE 33862
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
33781: LD_ADDR_EXP 124
33785: PUSH
33786: LD_EXP 124
33790: PPUSH
33791: LD_EXP 124
33795: PUSH
33796: LD_INT 1
33798: PLUS
33799: PPUSH
33800: LD_VAR 0 1
33804: PPUSH
33805: CALL_OW 1
33809: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
33810: LD_ADDR_EXP 125
33814: PUSH
33815: LD_EXP 125
33819: PPUSH
33820: LD_EXP 125
33824: PUSH
33825: LD_INT 1
33827: PLUS
33828: PPUSH
33829: EMPTY
33830: PPUSH
33831: CALL_OW 1
33835: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
33836: LD_ADDR_EXP 128
33840: PUSH
33841: LD_EXP 128
33845: PPUSH
33846: LD_EXP 128
33850: PUSH
33851: LD_INT 1
33853: PLUS
33854: PPUSH
33855: EMPTY
33856: PPUSH
33857: CALL_OW 1
33861: ST_TO_ADDR
// end ; if not IsOk ( i ) then
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL_OW 302
33871: NOT
33872: IFFALSE 33885
// begin HackUnlinkAll ( i ) ;
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL 33991 0 1
// continue ;
33883: GO 33765
// end ; HackCheckCapturedStatus ( i ) ;
33885: LD_VAR 0 1
33889: PPUSH
33890: CALL 34434 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
33894: LD_ADDR_VAR 0 2
33898: PUSH
33899: LD_INT 81
33901: PUSH
33902: LD_VAR 0 1
33906: PPUSH
33907: CALL_OW 255
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 33
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 91
33928: PUSH
33929: LD_VAR 0 1
33933: PUSH
33934: LD_EXP 127
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 50
33946: PUSH
33947: EMPTY
33948: LIST
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: PPUSH
33956: CALL_OW 69
33960: ST_TO_ADDR
// if not tmp then
33961: LD_VAR 0 2
33965: NOT
33966: IFFALSE 33970
// continue ;
33968: GO 33765
// HackLink ( i , tmp ) ;
33970: LD_VAR 0 1
33974: PPUSH
33975: LD_VAR 0 2
33979: PPUSH
33980: CALL 34127 0 2
// end ;
33984: GO 33765
33986: POP
33987: POP
// end ;
33988: PPOPN 2
33990: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
33991: LD_INT 0
33993: PPUSH
33994: PPUSH
33995: PPUSH
// if not hack in hackTanks then
33996: LD_VAR 0 1
34000: PUSH
34001: LD_EXP 124
34005: IN
34006: NOT
34007: IFFALSE 34011
// exit ;
34009: GO 34122
// index := GetElementIndex ( hackTanks , hack ) ;
34011: LD_ADDR_VAR 0 4
34015: PUSH
34016: LD_EXP 124
34020: PPUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL 41556 0 2
34030: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34031: LD_EXP 125
34035: PUSH
34036: LD_VAR 0 4
34040: ARRAY
34041: IFFALSE 34122
// begin for i in hackTanksCaptured [ index ] do
34043: LD_ADDR_VAR 0 3
34047: PUSH
34048: LD_EXP 125
34052: PUSH
34053: LD_VAR 0 4
34057: ARRAY
34058: PUSH
34059: FOR_IN
34060: IFFALSE 34086
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34062: LD_VAR 0 3
34066: PUSH
34067: LD_INT 1
34069: ARRAY
34070: PPUSH
34071: LD_VAR 0 3
34075: PUSH
34076: LD_INT 2
34078: ARRAY
34079: PPUSH
34080: CALL_OW 235
34084: GO 34059
34086: POP
34087: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34088: LD_ADDR_EXP 125
34092: PUSH
34093: LD_EXP 125
34097: PPUSH
34098: LD_VAR 0 4
34102: PPUSH
34103: EMPTY
34104: PPUSH
34105: CALL_OW 1
34109: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34110: LD_VAR 0 1
34114: PPUSH
34115: LD_INT 0
34117: PPUSH
34118: CALL_OW 505
// end ; end ;
34122: LD_VAR 0 2
34126: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34127: LD_INT 0
34129: PPUSH
34130: PPUSH
34131: PPUSH
// if not hack in hackTanks or not vehicles then
34132: LD_VAR 0 1
34136: PUSH
34137: LD_EXP 124
34141: IN
34142: NOT
34143: PUSH
34144: LD_VAR 0 2
34148: NOT
34149: OR
34150: IFFALSE 34154
// exit ;
34152: GO 34429
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34154: LD_ADDR_VAR 0 2
34158: PUSH
34159: LD_VAR 0 1
34163: PPUSH
34164: LD_VAR 0 2
34168: PPUSH
34169: LD_INT 1
34171: PPUSH
34172: LD_INT 1
34174: PPUSH
34175: CALL 42206 0 4
34179: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34180: LD_ADDR_VAR 0 5
34184: PUSH
34185: LD_EXP 124
34189: PPUSH
34190: LD_VAR 0 1
34194: PPUSH
34195: CALL 41556 0 2
34199: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34200: LD_EXP 125
34204: PUSH
34205: LD_VAR 0 5
34209: ARRAY
34210: PUSH
34211: LD_EXP 126
34215: LESS
34216: IFFALSE 34405
// begin for i := 1 to vehicles do
34218: LD_ADDR_VAR 0 4
34222: PUSH
34223: DOUBLE
34224: LD_INT 1
34226: DEC
34227: ST_TO_ADDR
34228: LD_VAR 0 2
34232: PUSH
34233: FOR_TO
34234: IFFALSE 34403
// begin if hackTanksCaptured [ index ] = hackLimit then
34236: LD_EXP 125
34240: PUSH
34241: LD_VAR 0 5
34245: ARRAY
34246: PUSH
34247: LD_EXP 126
34251: EQUAL
34252: IFFALSE 34256
// break ;
34254: GO 34403
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34256: LD_ADDR_EXP 128
34260: PUSH
34261: LD_EXP 128
34265: PPUSH
34266: LD_VAR 0 5
34270: PPUSH
34271: LD_EXP 128
34275: PUSH
34276: LD_VAR 0 5
34280: ARRAY
34281: PUSH
34282: LD_INT 1
34284: PLUS
34285: PPUSH
34286: CALL_OW 1
34290: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34291: LD_ADDR_EXP 125
34295: PUSH
34296: LD_EXP 125
34300: PPUSH
34301: LD_VAR 0 5
34305: PUSH
34306: LD_EXP 125
34310: PUSH
34311: LD_VAR 0 5
34315: ARRAY
34316: PUSH
34317: LD_INT 1
34319: PLUS
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PPUSH
34325: LD_VAR 0 2
34329: PUSH
34330: LD_VAR 0 4
34334: ARRAY
34335: PUSH
34336: LD_VAR 0 2
34340: PUSH
34341: LD_VAR 0 4
34345: ARRAY
34346: PPUSH
34347: CALL_OW 255
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PPUSH
34356: CALL 41771 0 3
34360: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34361: LD_VAR 0 2
34365: PUSH
34366: LD_VAR 0 4
34370: ARRAY
34371: PPUSH
34372: LD_VAR 0 1
34376: PPUSH
34377: CALL_OW 255
34381: PPUSH
34382: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34386: LD_VAR 0 2
34390: PUSH
34391: LD_VAR 0 4
34395: ARRAY
34396: PPUSH
34397: CALL_OW 141
// end ;
34401: GO 34233
34403: POP
34404: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34405: LD_VAR 0 1
34409: PPUSH
34410: LD_EXP 125
34414: PUSH
34415: LD_VAR 0 5
34419: ARRAY
34420: PUSH
34421: LD_INT 0
34423: PLUS
34424: PPUSH
34425: CALL_OW 505
// end ;
34429: LD_VAR 0 3
34433: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34434: LD_INT 0
34436: PPUSH
34437: PPUSH
34438: PPUSH
34439: PPUSH
// if not hack in hackTanks then
34440: LD_VAR 0 1
34444: PUSH
34445: LD_EXP 124
34449: IN
34450: NOT
34451: IFFALSE 34455
// exit ;
34453: GO 34695
// index := GetElementIndex ( hackTanks , hack ) ;
34455: LD_ADDR_VAR 0 4
34459: PUSH
34460: LD_EXP 124
34464: PPUSH
34465: LD_VAR 0 1
34469: PPUSH
34470: CALL 41556 0 2
34474: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34475: LD_ADDR_VAR 0 3
34479: PUSH
34480: DOUBLE
34481: LD_EXP 125
34485: PUSH
34486: LD_VAR 0 4
34490: ARRAY
34491: INC
34492: ST_TO_ADDR
34493: LD_INT 1
34495: PUSH
34496: FOR_DOWNTO
34497: IFFALSE 34669
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
34499: LD_ADDR_VAR 0 5
34503: PUSH
34504: LD_EXP 125
34508: PUSH
34509: LD_VAR 0 4
34513: ARRAY
34514: PUSH
34515: LD_VAR 0 3
34519: ARRAY
34520: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
34521: LD_VAR 0 5
34525: PUSH
34526: LD_INT 1
34528: ARRAY
34529: PPUSH
34530: CALL_OW 302
34534: NOT
34535: PUSH
34536: LD_VAR 0 5
34540: PUSH
34541: LD_INT 1
34543: ARRAY
34544: PPUSH
34545: CALL_OW 255
34549: PUSH
34550: LD_VAR 0 1
34554: PPUSH
34555: CALL_OW 255
34559: NONEQUAL
34560: OR
34561: IFFALSE 34667
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
34563: LD_VAR 0 5
34567: PUSH
34568: LD_INT 1
34570: ARRAY
34571: PPUSH
34572: CALL_OW 305
34576: PUSH
34577: LD_VAR 0 5
34581: PUSH
34582: LD_INT 1
34584: ARRAY
34585: PPUSH
34586: CALL_OW 255
34590: PUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: CALL_OW 255
34600: EQUAL
34601: AND
34602: IFFALSE 34626
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
34604: LD_VAR 0 5
34608: PUSH
34609: LD_INT 1
34611: ARRAY
34612: PPUSH
34613: LD_VAR 0 5
34617: PUSH
34618: LD_INT 2
34620: ARRAY
34621: PPUSH
34622: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
34626: LD_ADDR_EXP 125
34630: PUSH
34631: LD_EXP 125
34635: PPUSH
34636: LD_VAR 0 4
34640: PPUSH
34641: LD_EXP 125
34645: PUSH
34646: LD_VAR 0 4
34650: ARRAY
34651: PPUSH
34652: LD_VAR 0 3
34656: PPUSH
34657: CALL_OW 3
34661: PPUSH
34662: CALL_OW 1
34666: ST_TO_ADDR
// end ; end ;
34667: GO 34496
34669: POP
34670: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34671: LD_VAR 0 1
34675: PPUSH
34676: LD_EXP 125
34680: PUSH
34681: LD_VAR 0 4
34685: ARRAY
34686: PUSH
34687: LD_INT 0
34689: PLUS
34690: PPUSH
34691: CALL_OW 505
// end ;
34695: LD_VAR 0 2
34699: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
34700: LD_INT 0
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
// if not hack in hackTanks then
34706: LD_VAR 0 1
34710: PUSH
34711: LD_EXP 124
34715: IN
34716: NOT
34717: IFFALSE 34721
// exit ;
34719: GO 34806
// index := GetElementIndex ( hackTanks , hack ) ;
34721: LD_ADDR_VAR 0 5
34725: PUSH
34726: LD_EXP 124
34730: PPUSH
34731: LD_VAR 0 1
34735: PPUSH
34736: CALL 41556 0 2
34740: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
34741: LD_ADDR_VAR 0 4
34745: PUSH
34746: DOUBLE
34747: LD_INT 1
34749: DEC
34750: ST_TO_ADDR
34751: LD_EXP 125
34755: PUSH
34756: LD_VAR 0 5
34760: ARRAY
34761: PUSH
34762: FOR_TO
34763: IFFALSE 34804
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
34765: LD_EXP 125
34769: PUSH
34770: LD_VAR 0 5
34774: ARRAY
34775: PUSH
34776: LD_VAR 0 4
34780: ARRAY
34781: PUSH
34782: LD_INT 1
34784: ARRAY
34785: PUSH
34786: LD_VAR 0 2
34790: EQUAL
34791: IFFALSE 34802
// KillUnit ( vehicle ) ;
34793: LD_VAR 0 2
34797: PPUSH
34798: CALL_OW 66
34802: GO 34762
34804: POP
34805: POP
// end ;
34806: LD_VAR 0 3
34810: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
34811: LD_EXP 129
34815: NOT
34816: IFFALSE 34851
34818: GO 34820
34820: DISABLE
// begin initMiner := true ;
34821: LD_ADDR_EXP 129
34825: PUSH
34826: LD_INT 1
34828: ST_TO_ADDR
// minersList := [ ] ;
34829: LD_ADDR_EXP 130
34833: PUSH
34834: EMPTY
34835: ST_TO_ADDR
// minerMinesList := [ ] ;
34836: LD_ADDR_EXP 131
34840: PUSH
34841: EMPTY
34842: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
34843: LD_ADDR_EXP 132
34847: PUSH
34848: LD_INT 5
34850: ST_TO_ADDR
// end ;
34851: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
34852: LD_EXP 129
34856: PUSH
34857: LD_INT 34
34859: PUSH
34860: LD_EXP 59
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PPUSH
34869: CALL_OW 69
34873: AND
34874: IFFALSE 35337
34876: GO 34878
34878: DISABLE
34879: LD_INT 0
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
// begin enable ;
34885: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
34886: LD_ADDR_VAR 0 1
34890: PUSH
34891: LD_INT 34
34893: PUSH
34894: LD_EXP 59
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PPUSH
34903: CALL_OW 69
34907: PUSH
34908: FOR_IN
34909: IFFALSE 34981
// begin if not i in minersList then
34911: LD_VAR 0 1
34915: PUSH
34916: LD_EXP 130
34920: IN
34921: NOT
34922: IFFALSE 34979
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
34924: LD_ADDR_EXP 130
34928: PUSH
34929: LD_EXP 130
34933: PPUSH
34934: LD_EXP 130
34938: PUSH
34939: LD_INT 1
34941: PLUS
34942: PPUSH
34943: LD_VAR 0 1
34947: PPUSH
34948: CALL_OW 1
34952: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
34953: LD_ADDR_EXP 131
34957: PUSH
34958: LD_EXP 131
34962: PPUSH
34963: LD_EXP 131
34967: PUSH
34968: LD_INT 1
34970: PLUS
34971: PPUSH
34972: EMPTY
34973: PPUSH
34974: CALL_OW 1
34978: ST_TO_ADDR
// end end ;
34979: GO 34908
34981: POP
34982: POP
// for i := minerMinesList downto 1 do
34983: LD_ADDR_VAR 0 1
34987: PUSH
34988: DOUBLE
34989: LD_EXP 131
34993: INC
34994: ST_TO_ADDR
34995: LD_INT 1
34997: PUSH
34998: FOR_DOWNTO
34999: IFFALSE 35335
// begin if IsLive ( minersList [ i ] ) then
35001: LD_EXP 130
35005: PUSH
35006: LD_VAR 0 1
35010: ARRAY
35011: PPUSH
35012: CALL_OW 300
35016: IFFALSE 35044
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
35018: LD_EXP 130
35022: PUSH
35023: LD_VAR 0 1
35027: ARRAY
35028: PPUSH
35029: LD_EXP 131
35033: PUSH
35034: LD_VAR 0 1
35038: ARRAY
35039: PPUSH
35040: CALL_OW 505
// if not minerMinesList [ i ] then
35044: LD_EXP 131
35048: PUSH
35049: LD_VAR 0 1
35053: ARRAY
35054: NOT
35055: IFFALSE 35059
// continue ;
35057: GO 34998
// for j := minerMinesList [ i ] downto 1 do
35059: LD_ADDR_VAR 0 2
35063: PUSH
35064: DOUBLE
35065: LD_EXP 131
35069: PUSH
35070: LD_VAR 0 1
35074: ARRAY
35075: INC
35076: ST_TO_ADDR
35077: LD_INT 1
35079: PUSH
35080: FOR_DOWNTO
35081: IFFALSE 35331
// begin side := GetSide ( minersList [ i ] ) ;
35083: LD_ADDR_VAR 0 3
35087: PUSH
35088: LD_EXP 130
35092: PUSH
35093: LD_VAR 0 1
35097: ARRAY
35098: PPUSH
35099: CALL_OW 255
35103: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35104: LD_ADDR_VAR 0 4
35108: PUSH
35109: LD_EXP 131
35113: PUSH
35114: LD_VAR 0 1
35118: ARRAY
35119: PUSH
35120: LD_VAR 0 2
35124: ARRAY
35125: PUSH
35126: LD_INT 1
35128: ARRAY
35129: PPUSH
35130: LD_EXP 131
35134: PUSH
35135: LD_VAR 0 1
35139: ARRAY
35140: PUSH
35141: LD_VAR 0 2
35145: ARRAY
35146: PUSH
35147: LD_INT 2
35149: ARRAY
35150: PPUSH
35151: CALL_OW 428
35155: ST_TO_ADDR
// if not tmp then
35156: LD_VAR 0 4
35160: NOT
35161: IFFALSE 35165
// continue ;
35163: GO 35080
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35165: LD_VAR 0 4
35169: PUSH
35170: LD_INT 81
35172: PUSH
35173: LD_VAR 0 3
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PPUSH
35182: CALL_OW 69
35186: IN
35187: PUSH
35188: LD_EXP 131
35192: PUSH
35193: LD_VAR 0 1
35197: ARRAY
35198: PUSH
35199: LD_VAR 0 2
35203: ARRAY
35204: PUSH
35205: LD_INT 1
35207: ARRAY
35208: PPUSH
35209: LD_EXP 131
35213: PUSH
35214: LD_VAR 0 1
35218: ARRAY
35219: PUSH
35220: LD_VAR 0 2
35224: ARRAY
35225: PUSH
35226: LD_INT 2
35228: ARRAY
35229: PPUSH
35230: CALL_OW 458
35234: AND
35235: IFFALSE 35329
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35237: LD_EXP 131
35241: PUSH
35242: LD_VAR 0 1
35246: ARRAY
35247: PUSH
35248: LD_VAR 0 2
35252: ARRAY
35253: PUSH
35254: LD_INT 1
35256: ARRAY
35257: PPUSH
35258: LD_EXP 131
35262: PUSH
35263: LD_VAR 0 1
35267: ARRAY
35268: PUSH
35269: LD_VAR 0 2
35273: ARRAY
35274: PUSH
35275: LD_INT 2
35277: ARRAY
35278: PPUSH
35279: LD_VAR 0 3
35283: PPUSH
35284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35288: LD_ADDR_EXP 131
35292: PUSH
35293: LD_EXP 131
35297: PPUSH
35298: LD_VAR 0 1
35302: PPUSH
35303: LD_EXP 131
35307: PUSH
35308: LD_VAR 0 1
35312: ARRAY
35313: PPUSH
35314: LD_VAR 0 2
35318: PPUSH
35319: CALL_OW 3
35323: PPUSH
35324: CALL_OW 1
35328: ST_TO_ADDR
// end ; end ;
35329: GO 35080
35331: POP
35332: POP
// end ;
35333: GO 34998
35335: POP
35336: POP
// end ;
35337: PPOPN 4
35339: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
35340: LD_INT 0
35342: PPUSH
35343: PPUSH
// result := false ;
35344: LD_ADDR_VAR 0 4
35348: PUSH
35349: LD_INT 0
35351: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
35352: LD_VAR 0 1
35356: PPUSH
35357: CALL_OW 264
35361: PUSH
35362: LD_EXP 59
35366: EQUAL
35367: NOT
35368: IFFALSE 35372
// exit ;
35370: GO 35612
// index := GetElementIndex ( minersList , unit ) ;
35372: LD_ADDR_VAR 0 5
35376: PUSH
35377: LD_EXP 130
35381: PPUSH
35382: LD_VAR 0 1
35386: PPUSH
35387: CALL 41556 0 2
35391: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
35392: LD_EXP 131
35396: PUSH
35397: LD_VAR 0 5
35401: ARRAY
35402: PUSH
35403: LD_EXP 132
35407: GREATEREQUAL
35408: IFFALSE 35412
// exit ;
35410: GO 35612
// ComMoveXY ( unit , x , y ) ;
35412: LD_VAR 0 1
35416: PPUSH
35417: LD_VAR 0 2
35421: PPUSH
35422: LD_VAR 0 3
35426: PPUSH
35427: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35431: LD_INT 35
35433: PPUSH
35434: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
35438: LD_VAR 0 1
35442: PPUSH
35443: LD_VAR 0 2
35447: PPUSH
35448: LD_VAR 0 3
35452: PPUSH
35453: CALL 71620 0 3
35457: NOT
35458: PUSH
35459: LD_VAR 0 1
35463: PPUSH
35464: CALL_OW 314
35468: AND
35469: IFFALSE 35473
// exit ;
35471: GO 35612
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
35473: LD_VAR 0 2
35477: PPUSH
35478: LD_VAR 0 3
35482: PPUSH
35483: CALL_OW 428
35487: PUSH
35488: LD_VAR 0 1
35492: EQUAL
35493: PUSH
35494: LD_VAR 0 1
35498: PPUSH
35499: CALL_OW 314
35503: NOT
35504: AND
35505: IFFALSE 35431
// PlaySoundXY ( x , y , PlantMine ) ;
35507: LD_VAR 0 2
35511: PPUSH
35512: LD_VAR 0 3
35516: PPUSH
35517: LD_STRING PlantMine
35519: PPUSH
35520: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
35524: LD_VAR 0 2
35528: PPUSH
35529: LD_VAR 0 3
35533: PPUSH
35534: LD_VAR 0 1
35538: PPUSH
35539: CALL_OW 255
35543: PPUSH
35544: LD_INT 0
35546: PPUSH
35547: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
35551: LD_ADDR_EXP 131
35555: PUSH
35556: LD_EXP 131
35560: PPUSH
35561: LD_VAR 0 5
35565: PUSH
35566: LD_EXP 131
35570: PUSH
35571: LD_VAR 0 5
35575: ARRAY
35576: PUSH
35577: LD_INT 1
35579: PLUS
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PPUSH
35585: LD_VAR 0 2
35589: PUSH
35590: LD_VAR 0 3
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PPUSH
35599: CALL 41771 0 3
35603: ST_TO_ADDR
// result := true ;
35604: LD_ADDR_VAR 0 4
35608: PUSH
35609: LD_INT 1
35611: ST_TO_ADDR
// end ;
35612: LD_VAR 0 4
35616: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
35617: LD_INT 0
35619: PPUSH
35620: PPUSH
35621: PPUSH
// if not unit in minersList then
35622: LD_VAR 0 1
35626: PUSH
35627: LD_EXP 130
35631: IN
35632: NOT
35633: IFFALSE 35637
// exit ;
35635: GO 36029
// index := GetElementIndex ( minersList , unit ) ;
35637: LD_ADDR_VAR 0 6
35641: PUSH
35642: LD_EXP 130
35646: PPUSH
35647: LD_VAR 0 1
35651: PPUSH
35652: CALL 41556 0 2
35656: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
35657: LD_ADDR_VAR 0 5
35661: PUSH
35662: DOUBLE
35663: LD_EXP 131
35667: PUSH
35668: LD_VAR 0 6
35672: ARRAY
35673: INC
35674: ST_TO_ADDR
35675: LD_INT 1
35677: PUSH
35678: FOR_DOWNTO
35679: IFFALSE 35840
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
35681: LD_EXP 131
35685: PUSH
35686: LD_VAR 0 6
35690: ARRAY
35691: PUSH
35692: LD_VAR 0 5
35696: ARRAY
35697: PUSH
35698: LD_INT 1
35700: ARRAY
35701: PUSH
35702: LD_VAR 0 2
35706: EQUAL
35707: PUSH
35708: LD_EXP 131
35712: PUSH
35713: LD_VAR 0 6
35717: ARRAY
35718: PUSH
35719: LD_VAR 0 5
35723: ARRAY
35724: PUSH
35725: LD_INT 2
35727: ARRAY
35728: PUSH
35729: LD_VAR 0 3
35733: EQUAL
35734: AND
35735: IFFALSE 35838
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35737: LD_EXP 131
35741: PUSH
35742: LD_VAR 0 6
35746: ARRAY
35747: PUSH
35748: LD_VAR 0 5
35752: ARRAY
35753: PUSH
35754: LD_INT 1
35756: ARRAY
35757: PPUSH
35758: LD_EXP 131
35762: PUSH
35763: LD_VAR 0 6
35767: ARRAY
35768: PUSH
35769: LD_VAR 0 5
35773: ARRAY
35774: PUSH
35775: LD_INT 2
35777: ARRAY
35778: PPUSH
35779: LD_VAR 0 1
35783: PPUSH
35784: CALL_OW 255
35788: PPUSH
35789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35793: LD_ADDR_EXP 131
35797: PUSH
35798: LD_EXP 131
35802: PPUSH
35803: LD_VAR 0 6
35807: PPUSH
35808: LD_EXP 131
35812: PUSH
35813: LD_VAR 0 6
35817: ARRAY
35818: PPUSH
35819: LD_VAR 0 5
35823: PPUSH
35824: CALL_OW 3
35828: PPUSH
35829: CALL_OW 1
35833: ST_TO_ADDR
// exit ;
35834: POP
35835: POP
35836: GO 36029
// end ; end ;
35838: GO 35678
35840: POP
35841: POP
// for i := minerMinesList [ index ] downto 1 do
35842: LD_ADDR_VAR 0 5
35846: PUSH
35847: DOUBLE
35848: LD_EXP 131
35852: PUSH
35853: LD_VAR 0 6
35857: ARRAY
35858: INC
35859: ST_TO_ADDR
35860: LD_INT 1
35862: PUSH
35863: FOR_DOWNTO
35864: IFFALSE 36027
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
35866: LD_EXP 131
35870: PUSH
35871: LD_VAR 0 6
35875: ARRAY
35876: PUSH
35877: LD_VAR 0 5
35881: ARRAY
35882: PUSH
35883: LD_INT 1
35885: ARRAY
35886: PPUSH
35887: LD_EXP 131
35891: PUSH
35892: LD_VAR 0 6
35896: ARRAY
35897: PUSH
35898: LD_VAR 0 5
35902: ARRAY
35903: PUSH
35904: LD_INT 2
35906: ARRAY
35907: PPUSH
35908: LD_VAR 0 2
35912: PPUSH
35913: LD_VAR 0 3
35917: PPUSH
35918: CALL_OW 298
35922: PUSH
35923: LD_INT 6
35925: LESS
35926: IFFALSE 36025
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
35928: LD_EXP 131
35932: PUSH
35933: LD_VAR 0 6
35937: ARRAY
35938: PUSH
35939: LD_VAR 0 5
35943: ARRAY
35944: PUSH
35945: LD_INT 1
35947: ARRAY
35948: PPUSH
35949: LD_EXP 131
35953: PUSH
35954: LD_VAR 0 6
35958: ARRAY
35959: PUSH
35960: LD_VAR 0 5
35964: ARRAY
35965: PUSH
35966: LD_INT 2
35968: ARRAY
35969: PPUSH
35970: LD_VAR 0 1
35974: PPUSH
35975: CALL_OW 255
35979: PPUSH
35980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
35984: LD_ADDR_EXP 131
35988: PUSH
35989: LD_EXP 131
35993: PPUSH
35994: LD_VAR 0 6
35998: PPUSH
35999: LD_EXP 131
36003: PUSH
36004: LD_VAR 0 6
36008: ARRAY
36009: PPUSH
36010: LD_VAR 0 5
36014: PPUSH
36015: CALL_OW 3
36019: PPUSH
36020: CALL_OW 1
36024: ST_TO_ADDR
// end ; end ;
36025: GO 35863
36027: POP
36028: POP
// end ;
36029: LD_VAR 0 4
36033: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36034: LD_INT 0
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL_OW 264
36054: PUSH
36055: LD_EXP 59
36059: EQUAL
36060: NOT
36061: PUSH
36062: LD_VAR 0 1
36066: PUSH
36067: LD_EXP 130
36071: IN
36072: NOT
36073: OR
36074: IFFALSE 36078
// exit ;
36076: GO 36400
// index := GetElementIndex ( minersList , unit ) ;
36078: LD_ADDR_VAR 0 6
36082: PUSH
36083: LD_EXP 130
36087: PPUSH
36088: LD_VAR 0 1
36092: PPUSH
36093: CALL 41556 0 2
36097: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36098: LD_ADDR_VAR 0 8
36102: PUSH
36103: LD_EXP 132
36107: PUSH
36108: LD_EXP 131
36112: PUSH
36113: LD_VAR 0 6
36117: ARRAY
36118: MINUS
36119: ST_TO_ADDR
// if not minesFreeAmount then
36120: LD_VAR 0 8
36124: NOT
36125: IFFALSE 36129
// exit ;
36127: GO 36400
// tmp := [ ] ;
36129: LD_ADDR_VAR 0 7
36133: PUSH
36134: EMPTY
36135: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36136: LD_ADDR_VAR 0 5
36140: PUSH
36141: DOUBLE
36142: LD_INT 1
36144: DEC
36145: ST_TO_ADDR
36146: LD_VAR 0 8
36150: PUSH
36151: FOR_TO
36152: IFFALSE 36347
// begin _d := rand ( 0 , 5 ) ;
36154: LD_ADDR_VAR 0 11
36158: PUSH
36159: LD_INT 0
36161: PPUSH
36162: LD_INT 5
36164: PPUSH
36165: CALL_OW 12
36169: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36170: LD_ADDR_VAR 0 12
36174: PUSH
36175: LD_INT 2
36177: PPUSH
36178: LD_INT 6
36180: PPUSH
36181: CALL_OW 12
36185: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36186: LD_ADDR_VAR 0 9
36190: PUSH
36191: LD_VAR 0 2
36195: PPUSH
36196: LD_VAR 0 11
36200: PPUSH
36201: LD_VAR 0 12
36205: PPUSH
36206: CALL_OW 272
36210: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36211: LD_ADDR_VAR 0 10
36215: PUSH
36216: LD_VAR 0 3
36220: PPUSH
36221: LD_VAR 0 11
36225: PPUSH
36226: LD_VAR 0 12
36230: PPUSH
36231: CALL_OW 273
36235: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36236: LD_VAR 0 9
36240: PPUSH
36241: LD_VAR 0 10
36245: PPUSH
36246: CALL_OW 488
36250: PUSH
36251: LD_VAR 0 9
36255: PUSH
36256: LD_VAR 0 10
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_VAR 0 7
36269: IN
36270: NOT
36271: AND
36272: PUSH
36273: LD_VAR 0 9
36277: PPUSH
36278: LD_VAR 0 10
36282: PPUSH
36283: CALL_OW 458
36287: NOT
36288: AND
36289: IFFALSE 36331
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36291: LD_ADDR_VAR 0 7
36295: PUSH
36296: LD_VAR 0 7
36300: PPUSH
36301: LD_VAR 0 7
36305: PUSH
36306: LD_INT 1
36308: PLUS
36309: PPUSH
36310: LD_VAR 0 9
36314: PUSH
36315: LD_VAR 0 10
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PPUSH
36324: CALL_OW 1
36328: ST_TO_ADDR
36329: GO 36345
// i := i - 1 ;
36331: LD_ADDR_VAR 0 5
36335: PUSH
36336: LD_VAR 0 5
36340: PUSH
36341: LD_INT 1
36343: MINUS
36344: ST_TO_ADDR
// end ;
36345: GO 36151
36347: POP
36348: POP
// for i in tmp do
36349: LD_ADDR_VAR 0 5
36353: PUSH
36354: LD_VAR 0 7
36358: PUSH
36359: FOR_IN
36360: IFFALSE 36398
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36362: LD_VAR 0 1
36366: PPUSH
36367: LD_VAR 0 5
36371: PUSH
36372: LD_INT 1
36374: ARRAY
36375: PPUSH
36376: LD_VAR 0 5
36380: PUSH
36381: LD_INT 2
36383: ARRAY
36384: PPUSH
36385: CALL 35340 0 3
36389: NOT
36390: IFFALSE 36396
// exit ;
36392: POP
36393: POP
36394: GO 36400
36396: GO 36359
36398: POP
36399: POP
// end ;
36400: LD_VAR 0 4
36404: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
36405: LD_INT 0
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
// if not GetClass ( unit ) = class_sniper then
36414: LD_VAR 0 1
36418: PPUSH
36419: CALL_OW 257
36423: PUSH
36424: LD_INT 5
36426: EQUAL
36427: NOT
36428: IFFALSE 36432
// exit ;
36430: GO 36820
// dist := 8 ;
36432: LD_ADDR_VAR 0 5
36436: PUSH
36437: LD_INT 8
36439: ST_TO_ADDR
// viewRange := 12 ;
36440: LD_ADDR_VAR 0 7
36444: PUSH
36445: LD_INT 12
36447: ST_TO_ADDR
// side := GetSide ( unit ) ;
36448: LD_ADDR_VAR 0 6
36452: PUSH
36453: LD_VAR 0 1
36457: PPUSH
36458: CALL_OW 255
36462: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
36463: LD_INT 61
36465: PPUSH
36466: LD_VAR 0 6
36470: PPUSH
36471: CALL_OW 321
36475: PUSH
36476: LD_INT 2
36478: EQUAL
36479: IFFALSE 36489
// viewRange := 16 ;
36481: LD_ADDR_VAR 0 7
36485: PUSH
36486: LD_INT 16
36488: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
36489: LD_VAR 0 1
36493: PPUSH
36494: LD_VAR 0 2
36498: PPUSH
36499: LD_VAR 0 3
36503: PPUSH
36504: CALL_OW 297
36508: PUSH
36509: LD_VAR 0 5
36513: GREATER
36514: IFFALSE 36593
// begin ComMoveXY ( unit , x , y ) ;
36516: LD_VAR 0 1
36520: PPUSH
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 3
36530: PPUSH
36531: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36535: LD_INT 35
36537: PPUSH
36538: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
36542: LD_VAR 0 1
36546: PPUSH
36547: LD_VAR 0 2
36551: PPUSH
36552: LD_VAR 0 3
36556: PPUSH
36557: CALL 71620 0 3
36561: NOT
36562: IFFALSE 36566
// exit ;
36564: GO 36820
// until GetDistUnitXY ( unit , x , y ) < dist ;
36566: LD_VAR 0 1
36570: PPUSH
36571: LD_VAR 0 2
36575: PPUSH
36576: LD_VAR 0 3
36580: PPUSH
36581: CALL_OW 297
36585: PUSH
36586: LD_VAR 0 5
36590: LESS
36591: IFFALSE 36535
// end ; ComTurnXY ( unit , x , y ) ;
36593: LD_VAR 0 1
36597: PPUSH
36598: LD_VAR 0 2
36602: PPUSH
36603: LD_VAR 0 3
36607: PPUSH
36608: CALL_OW 118
// wait ( 5 ) ;
36612: LD_INT 5
36614: PPUSH
36615: CALL_OW 67
// _d := GetDir ( unit ) ;
36619: LD_ADDR_VAR 0 10
36623: PUSH
36624: LD_VAR 0 1
36628: PPUSH
36629: CALL_OW 254
36633: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
36634: LD_ADDR_VAR 0 8
36638: PUSH
36639: LD_VAR 0 1
36643: PPUSH
36644: CALL_OW 250
36648: PPUSH
36649: LD_VAR 0 10
36653: PPUSH
36654: LD_VAR 0 5
36658: PPUSH
36659: CALL_OW 272
36663: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
36664: LD_ADDR_VAR 0 9
36668: PUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 251
36678: PPUSH
36679: LD_VAR 0 10
36683: PPUSH
36684: LD_VAR 0 5
36688: PPUSH
36689: CALL_OW 273
36693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36694: LD_VAR 0 8
36698: PPUSH
36699: LD_VAR 0 9
36703: PPUSH
36704: CALL_OW 488
36708: NOT
36709: IFFALSE 36713
// exit ;
36711: GO 36820
// ComAnimCustom ( unit , 1 ) ;
36713: LD_VAR 0 1
36717: PPUSH
36718: LD_INT 1
36720: PPUSH
36721: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
36725: LD_VAR 0 8
36729: PPUSH
36730: LD_VAR 0 9
36734: PPUSH
36735: LD_VAR 0 6
36739: PPUSH
36740: LD_VAR 0 7
36744: PPUSH
36745: CALL_OW 330
// repeat wait ( 1 ) ;
36749: LD_INT 1
36751: PPUSH
36752: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
36756: LD_VAR 0 1
36760: PPUSH
36761: CALL_OW 316
36765: PUSH
36766: LD_VAR 0 1
36770: PPUSH
36771: CALL_OW 314
36775: OR
36776: PUSH
36777: LD_VAR 0 1
36781: PPUSH
36782: CALL_OW 302
36786: NOT
36787: OR
36788: PUSH
36789: LD_VAR 0 1
36793: PPUSH
36794: CALL_OW 301
36798: OR
36799: IFFALSE 36749
// RemoveSeeing ( _x , _y , side ) ;
36801: LD_VAR 0 8
36805: PPUSH
36806: LD_VAR 0 9
36810: PPUSH
36811: LD_VAR 0 6
36815: PPUSH
36816: CALL_OW 331
// end ; end_of_file
36820: LD_VAR 0 4
36824: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
36825: LD_INT 0
36827: PPUSH
36828: PPUSH
// if exist_mode then
36829: LD_VAR 0 2
36833: IFFALSE 36858
// unit := CreateCharacter ( prefix & ident ) else
36835: LD_ADDR_VAR 0 5
36839: PUSH
36840: LD_VAR 0 3
36844: PUSH
36845: LD_VAR 0 1
36849: STR
36850: PPUSH
36851: CALL_OW 34
36855: ST_TO_ADDR
36856: GO 36873
// unit := NewCharacter ( ident ) ;
36858: LD_ADDR_VAR 0 5
36862: PUSH
36863: LD_VAR 0 1
36867: PPUSH
36868: CALL_OW 25
36872: ST_TO_ADDR
// result := unit ;
36873: LD_ADDR_VAR 0 4
36877: PUSH
36878: LD_VAR 0 5
36882: ST_TO_ADDR
// end ;
36883: LD_VAR 0 4
36887: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
36888: LD_INT 0
36890: PPUSH
36891: PPUSH
// if not side or not nation then
36892: LD_VAR 0 1
36896: NOT
36897: PUSH
36898: LD_VAR 0 2
36902: NOT
36903: OR
36904: IFFALSE 36908
// exit ;
36906: GO 37672
// case nation of nation_american :
36908: LD_VAR 0 2
36912: PUSH
36913: LD_INT 1
36915: DOUBLE
36916: EQUAL
36917: IFTRUE 36921
36919: GO 37135
36921: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36922: LD_ADDR_VAR 0 4
36926: PUSH
36927: LD_INT 35
36929: PUSH
36930: LD_INT 45
36932: PUSH
36933: LD_INT 46
36935: PUSH
36936: LD_INT 47
36938: PUSH
36939: LD_INT 82
36941: PUSH
36942: LD_INT 83
36944: PUSH
36945: LD_INT 84
36947: PUSH
36948: LD_INT 85
36950: PUSH
36951: LD_INT 86
36953: PUSH
36954: LD_INT 1
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 6
36962: PUSH
36963: LD_INT 15
36965: PUSH
36966: LD_INT 16
36968: PUSH
36969: LD_INT 7
36971: PUSH
36972: LD_INT 12
36974: PUSH
36975: LD_INT 13
36977: PUSH
36978: LD_INT 10
36980: PUSH
36981: LD_INT 14
36983: PUSH
36984: LD_INT 20
36986: PUSH
36987: LD_INT 21
36989: PUSH
36990: LD_INT 22
36992: PUSH
36993: LD_INT 25
36995: PUSH
36996: LD_INT 32
36998: PUSH
36999: LD_INT 27
37001: PUSH
37002: LD_INT 36
37004: PUSH
37005: LD_INT 69
37007: PUSH
37008: LD_INT 39
37010: PUSH
37011: LD_INT 34
37013: PUSH
37014: LD_INT 40
37016: PUSH
37017: LD_INT 48
37019: PUSH
37020: LD_INT 49
37022: PUSH
37023: LD_INT 50
37025: PUSH
37026: LD_INT 51
37028: PUSH
37029: LD_INT 52
37031: PUSH
37032: LD_INT 53
37034: PUSH
37035: LD_INT 54
37037: PUSH
37038: LD_INT 55
37040: PUSH
37041: LD_INT 56
37043: PUSH
37044: LD_INT 57
37046: PUSH
37047: LD_INT 58
37049: PUSH
37050: LD_INT 59
37052: PUSH
37053: LD_INT 60
37055: PUSH
37056: LD_INT 61
37058: PUSH
37059: LD_INT 62
37061: PUSH
37062: LD_INT 80
37064: PUSH
37065: LD_INT 82
37067: PUSH
37068: LD_INT 83
37070: PUSH
37071: LD_INT 84
37073: PUSH
37074: LD_INT 85
37076: PUSH
37077: LD_INT 86
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
37133: GO 37596
37135: LD_INT 2
37137: DOUBLE
37138: EQUAL
37139: IFTRUE 37143
37141: GO 37365
37143: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
37144: LD_ADDR_VAR 0 4
37148: PUSH
37149: LD_INT 35
37151: PUSH
37152: LD_INT 45
37154: PUSH
37155: LD_INT 46
37157: PUSH
37158: LD_INT 47
37160: PUSH
37161: LD_INT 82
37163: PUSH
37164: LD_INT 83
37166: PUSH
37167: LD_INT 84
37169: PUSH
37170: LD_INT 85
37172: PUSH
37173: LD_INT 87
37175: PUSH
37176: LD_INT 70
37178: PUSH
37179: LD_INT 1
37181: PUSH
37182: LD_INT 11
37184: PUSH
37185: LD_INT 3
37187: PUSH
37188: LD_INT 4
37190: PUSH
37191: LD_INT 5
37193: PUSH
37194: LD_INT 6
37196: PUSH
37197: LD_INT 15
37199: PUSH
37200: LD_INT 18
37202: PUSH
37203: LD_INT 7
37205: PUSH
37206: LD_INT 17
37208: PUSH
37209: LD_INT 8
37211: PUSH
37212: LD_INT 20
37214: PUSH
37215: LD_INT 21
37217: PUSH
37218: LD_INT 22
37220: PUSH
37221: LD_INT 72
37223: PUSH
37224: LD_INT 26
37226: PUSH
37227: LD_INT 69
37229: PUSH
37230: LD_INT 39
37232: PUSH
37233: LD_INT 40
37235: PUSH
37236: LD_INT 41
37238: PUSH
37239: LD_INT 42
37241: PUSH
37242: LD_INT 43
37244: PUSH
37245: LD_INT 48
37247: PUSH
37248: LD_INT 49
37250: PUSH
37251: LD_INT 50
37253: PUSH
37254: LD_INT 51
37256: PUSH
37257: LD_INT 52
37259: PUSH
37260: LD_INT 53
37262: PUSH
37263: LD_INT 54
37265: PUSH
37266: LD_INT 55
37268: PUSH
37269: LD_INT 56
37271: PUSH
37272: LD_INT 60
37274: PUSH
37275: LD_INT 61
37277: PUSH
37278: LD_INT 62
37280: PUSH
37281: LD_INT 66
37283: PUSH
37284: LD_INT 67
37286: PUSH
37287: LD_INT 68
37289: PUSH
37290: LD_INT 81
37292: PUSH
37293: LD_INT 82
37295: PUSH
37296: LD_INT 83
37298: PUSH
37299: LD_INT 84
37301: PUSH
37302: LD_INT 85
37304: PUSH
37305: LD_INT 87
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: ST_TO_ADDR
37363: GO 37596
37365: LD_INT 3
37367: DOUBLE
37368: EQUAL
37369: IFTRUE 37373
37371: GO 37595
37373: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
37374: LD_ADDR_VAR 0 4
37378: PUSH
37379: LD_INT 46
37381: PUSH
37382: LD_INT 47
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: LD_INT 82
37393: PUSH
37394: LD_INT 83
37396: PUSH
37397: LD_INT 84
37399: PUSH
37400: LD_INT 85
37402: PUSH
37403: LD_INT 86
37405: PUSH
37406: LD_INT 11
37408: PUSH
37409: LD_INT 9
37411: PUSH
37412: LD_INT 20
37414: PUSH
37415: LD_INT 19
37417: PUSH
37418: LD_INT 21
37420: PUSH
37421: LD_INT 24
37423: PUSH
37424: LD_INT 22
37426: PUSH
37427: LD_INT 25
37429: PUSH
37430: LD_INT 28
37432: PUSH
37433: LD_INT 29
37435: PUSH
37436: LD_INT 30
37438: PUSH
37439: LD_INT 31
37441: PUSH
37442: LD_INT 37
37444: PUSH
37445: LD_INT 38
37447: PUSH
37448: LD_INT 32
37450: PUSH
37451: LD_INT 27
37453: PUSH
37454: LD_INT 33
37456: PUSH
37457: LD_INT 69
37459: PUSH
37460: LD_INT 39
37462: PUSH
37463: LD_INT 34
37465: PUSH
37466: LD_INT 40
37468: PUSH
37469: LD_INT 71
37471: PUSH
37472: LD_INT 23
37474: PUSH
37475: LD_INT 44
37477: PUSH
37478: LD_INT 48
37480: PUSH
37481: LD_INT 49
37483: PUSH
37484: LD_INT 50
37486: PUSH
37487: LD_INT 51
37489: PUSH
37490: LD_INT 52
37492: PUSH
37493: LD_INT 53
37495: PUSH
37496: LD_INT 54
37498: PUSH
37499: LD_INT 55
37501: PUSH
37502: LD_INT 56
37504: PUSH
37505: LD_INT 57
37507: PUSH
37508: LD_INT 58
37510: PUSH
37511: LD_INT 59
37513: PUSH
37514: LD_INT 63
37516: PUSH
37517: LD_INT 64
37519: PUSH
37520: LD_INT 65
37522: PUSH
37523: LD_INT 82
37525: PUSH
37526: LD_INT 83
37528: PUSH
37529: LD_INT 84
37531: PUSH
37532: LD_INT 85
37534: PUSH
37535: LD_INT 86
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
37593: GO 37596
37595: POP
// if state > - 1 and state < 3 then
37596: LD_VAR 0 3
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: GREATER
37605: PUSH
37606: LD_VAR 0 3
37610: PUSH
37611: LD_INT 3
37613: LESS
37614: AND
37615: IFFALSE 37672
// for i in result do
37617: LD_ADDR_VAR 0 5
37621: PUSH
37622: LD_VAR 0 4
37626: PUSH
37627: FOR_IN
37628: IFFALSE 37670
// if GetTech ( i , side ) <> state then
37630: LD_VAR 0 5
37634: PPUSH
37635: LD_VAR 0 1
37639: PPUSH
37640: CALL_OW 321
37644: PUSH
37645: LD_VAR 0 3
37649: NONEQUAL
37650: IFFALSE 37668
// result := result diff i ;
37652: LD_ADDR_VAR 0 4
37656: PUSH
37657: LD_VAR 0 4
37661: PUSH
37662: LD_VAR 0 5
37666: DIFF
37667: ST_TO_ADDR
37668: GO 37627
37670: POP
37671: POP
// end ;
37672: LD_VAR 0 4
37676: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
37677: LD_INT 0
37679: PPUSH
37680: PPUSH
37681: PPUSH
// result := true ;
37682: LD_ADDR_VAR 0 3
37686: PUSH
37687: LD_INT 1
37689: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
37690: LD_ADDR_VAR 0 5
37694: PUSH
37695: LD_VAR 0 2
37699: PPUSH
37700: CALL_OW 480
37704: ST_TO_ADDR
// if not tmp then
37705: LD_VAR 0 5
37709: NOT
37710: IFFALSE 37714
// exit ;
37712: GO 37763
// for i in tmp do
37714: LD_ADDR_VAR 0 4
37718: PUSH
37719: LD_VAR 0 5
37723: PUSH
37724: FOR_IN
37725: IFFALSE 37761
// if GetTech ( i , side ) <> state_researched then
37727: LD_VAR 0 4
37731: PPUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: CALL_OW 321
37741: PUSH
37742: LD_INT 2
37744: NONEQUAL
37745: IFFALSE 37759
// begin result := false ;
37747: LD_ADDR_VAR 0 3
37751: PUSH
37752: LD_INT 0
37754: ST_TO_ADDR
// exit ;
37755: POP
37756: POP
37757: GO 37763
// end ;
37759: GO 37724
37761: POP
37762: POP
// end ;
37763: LD_VAR 0 3
37767: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
37768: LD_INT 0
37770: PPUSH
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
37782: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
37783: LD_VAR 0 1
37787: NOT
37788: PUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 257
37798: PUSH
37799: LD_INT 9
37801: NONEQUAL
37802: OR
37803: IFFALSE 37807
// exit ;
37805: GO 38380
// side := GetSide ( unit ) ;
37807: LD_ADDR_VAR 0 9
37811: PUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL_OW 255
37821: ST_TO_ADDR
// tech_space := tech_spacanom ;
37822: LD_ADDR_VAR 0 12
37826: PUSH
37827: LD_INT 29
37829: ST_TO_ADDR
// tech_time := tech_taurad ;
37830: LD_ADDR_VAR 0 13
37834: PUSH
37835: LD_INT 28
37837: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
37838: LD_ADDR_VAR 0 11
37842: PUSH
37843: LD_VAR 0 1
37847: PPUSH
37848: CALL_OW 310
37852: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
37853: LD_VAR 0 11
37857: PPUSH
37858: CALL_OW 247
37862: PUSH
37863: LD_INT 2
37865: EQUAL
37866: IFFALSE 37870
// exit ;
37868: GO 38380
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37870: LD_ADDR_VAR 0 8
37874: PUSH
37875: LD_INT 81
37877: PUSH
37878: LD_VAR 0 9
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: LD_INT 21
37892: PUSH
37893: LD_INT 3
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PPUSH
37908: CALL_OW 69
37912: ST_TO_ADDR
// if not tmp then
37913: LD_VAR 0 8
37917: NOT
37918: IFFALSE 37922
// exit ;
37920: GO 38380
// if in_unit then
37922: LD_VAR 0 11
37926: IFFALSE 37950
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37928: LD_ADDR_VAR 0 10
37932: PUSH
37933: LD_VAR 0 8
37937: PPUSH
37938: LD_VAR 0 11
37942: PPUSH
37943: CALL_OW 74
37947: ST_TO_ADDR
37948: GO 37970
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37950: LD_ADDR_VAR 0 10
37954: PUSH
37955: LD_VAR 0 8
37959: PPUSH
37960: LD_VAR 0 1
37964: PPUSH
37965: CALL_OW 74
37969: ST_TO_ADDR
// if not enemy then
37970: LD_VAR 0 10
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 38380
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37979: LD_VAR 0 11
37983: PUSH
37984: LD_VAR 0 11
37988: PPUSH
37989: LD_VAR 0 10
37993: PPUSH
37994: CALL_OW 296
37998: PUSH
37999: LD_INT 13
38001: GREATER
38002: AND
38003: PUSH
38004: LD_VAR 0 1
38008: PPUSH
38009: LD_VAR 0 10
38013: PPUSH
38014: CALL_OW 296
38018: PUSH
38019: LD_INT 12
38021: GREATER
38022: OR
38023: IFFALSE 38027
// exit ;
38025: GO 38380
// missile := [ 1 ] ;
38027: LD_ADDR_VAR 0 14
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: ST_TO_ADDR
// if Researched ( side , tech_space ) then
38038: LD_VAR 0 9
38042: PPUSH
38043: LD_VAR 0 12
38047: PPUSH
38048: CALL_OW 325
38052: IFFALSE 38081
// missile := Insert ( missile , missile + 1 , 2 ) ;
38054: LD_ADDR_VAR 0 14
38058: PUSH
38059: LD_VAR 0 14
38063: PPUSH
38064: LD_VAR 0 14
38068: PUSH
38069: LD_INT 1
38071: PLUS
38072: PPUSH
38073: LD_INT 2
38075: PPUSH
38076: CALL_OW 2
38080: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
38081: LD_VAR 0 9
38085: PPUSH
38086: LD_VAR 0 13
38090: PPUSH
38091: CALL_OW 325
38095: PUSH
38096: LD_VAR 0 10
38100: PPUSH
38101: CALL_OW 255
38105: PPUSH
38106: LD_VAR 0 13
38110: PPUSH
38111: CALL_OW 325
38115: NOT
38116: AND
38117: IFFALSE 38146
// missile := Insert ( missile , missile + 1 , 3 ) ;
38119: LD_ADDR_VAR 0 14
38123: PUSH
38124: LD_VAR 0 14
38128: PPUSH
38129: LD_VAR 0 14
38133: PUSH
38134: LD_INT 1
38136: PLUS
38137: PPUSH
38138: LD_INT 3
38140: PPUSH
38141: CALL_OW 2
38145: ST_TO_ADDR
// if missile < 2 then
38146: LD_VAR 0 14
38150: PUSH
38151: LD_INT 2
38153: LESS
38154: IFFALSE 38158
// exit ;
38156: GO 38380
// x := GetX ( enemy ) ;
38158: LD_ADDR_VAR 0 4
38162: PUSH
38163: LD_VAR 0 10
38167: PPUSH
38168: CALL_OW 250
38172: ST_TO_ADDR
// y := GetY ( enemy ) ;
38173: LD_ADDR_VAR 0 5
38177: PUSH
38178: LD_VAR 0 10
38182: PPUSH
38183: CALL_OW 251
38187: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
38188: LD_ADDR_VAR 0 6
38192: PUSH
38193: LD_VAR 0 4
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PPUSH
38202: LD_INT 1
38204: PPUSH
38205: CALL_OW 12
38209: PLUS
38210: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
38211: LD_ADDR_VAR 0 7
38215: PUSH
38216: LD_VAR 0 5
38220: PUSH
38221: LD_INT 1
38223: NEG
38224: PPUSH
38225: LD_INT 1
38227: PPUSH
38228: CALL_OW 12
38232: PLUS
38233: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38234: LD_VAR 0 6
38238: PPUSH
38239: LD_VAR 0 7
38243: PPUSH
38244: CALL_OW 488
38248: NOT
38249: IFFALSE 38271
// begin _x := x ;
38251: LD_ADDR_VAR 0 6
38255: PUSH
38256: LD_VAR 0 4
38260: ST_TO_ADDR
// _y := y ;
38261: LD_ADDR_VAR 0 7
38265: PUSH
38266: LD_VAR 0 5
38270: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
38271: LD_ADDR_VAR 0 3
38275: PUSH
38276: LD_INT 1
38278: PPUSH
38279: LD_VAR 0 14
38283: PPUSH
38284: CALL_OW 12
38288: ST_TO_ADDR
// case i of 1 :
38289: LD_VAR 0 3
38293: PUSH
38294: LD_INT 1
38296: DOUBLE
38297: EQUAL
38298: IFTRUE 38302
38300: GO 38319
38302: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
38303: LD_VAR 0 1
38307: PPUSH
38308: LD_VAR 0 10
38312: PPUSH
38313: CALL_OW 115
38317: GO 38380
38319: LD_INT 2
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38327
38325: GO 38349
38327: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
38328: LD_VAR 0 1
38332: PPUSH
38333: LD_VAR 0 6
38337: PPUSH
38338: LD_VAR 0 7
38342: PPUSH
38343: CALL_OW 153
38347: GO 38380
38349: LD_INT 3
38351: DOUBLE
38352: EQUAL
38353: IFTRUE 38357
38355: GO 38379
38357: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
38358: LD_VAR 0 1
38362: PPUSH
38363: LD_VAR 0 6
38367: PPUSH
38368: LD_VAR 0 7
38372: PPUSH
38373: CALL_OW 154
38377: GO 38380
38379: POP
// end ;
38380: LD_VAR 0 2
38384: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
38385: LD_INT 0
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
38392: PPUSH
// if not unit or not building then
38393: LD_VAR 0 1
38397: NOT
38398: PUSH
38399: LD_VAR 0 2
38403: NOT
38404: OR
38405: IFFALSE 38409
// exit ;
38407: GO 38567
// x := GetX ( building ) ;
38409: LD_ADDR_VAR 0 5
38413: PUSH
38414: LD_VAR 0 2
38418: PPUSH
38419: CALL_OW 250
38423: ST_TO_ADDR
// y := GetY ( building ) ;
38424: LD_ADDR_VAR 0 6
38428: PUSH
38429: LD_VAR 0 2
38433: PPUSH
38434: CALL_OW 251
38438: ST_TO_ADDR
// for i = 0 to 5 do
38439: LD_ADDR_VAR 0 4
38443: PUSH
38444: DOUBLE
38445: LD_INT 0
38447: DEC
38448: ST_TO_ADDR
38449: LD_INT 5
38451: PUSH
38452: FOR_TO
38453: IFFALSE 38565
// begin _x := ShiftX ( x , i , 3 ) ;
38455: LD_ADDR_VAR 0 7
38459: PUSH
38460: LD_VAR 0 5
38464: PPUSH
38465: LD_VAR 0 4
38469: PPUSH
38470: LD_INT 3
38472: PPUSH
38473: CALL_OW 272
38477: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
38478: LD_ADDR_VAR 0 8
38482: PUSH
38483: LD_VAR 0 6
38487: PPUSH
38488: LD_VAR 0 4
38492: PPUSH
38493: LD_INT 3
38495: PPUSH
38496: CALL_OW 273
38500: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38501: LD_VAR 0 7
38505: PPUSH
38506: LD_VAR 0 8
38510: PPUSH
38511: CALL_OW 488
38515: NOT
38516: IFFALSE 38520
// continue ;
38518: GO 38452
// if HexInfo ( _x , _y ) = 0 then
38520: LD_VAR 0 7
38524: PPUSH
38525: LD_VAR 0 8
38529: PPUSH
38530: CALL_OW 428
38534: PUSH
38535: LD_INT 0
38537: EQUAL
38538: IFFALSE 38563
// begin ComMoveXY ( unit , _x , _y ) ;
38540: LD_VAR 0 1
38544: PPUSH
38545: LD_VAR 0 7
38549: PPUSH
38550: LD_VAR 0 8
38554: PPUSH
38555: CALL_OW 111
// exit ;
38559: POP
38560: POP
38561: GO 38567
// end ; end ;
38563: GO 38452
38565: POP
38566: POP
// end ;
38567: LD_VAR 0 3
38571: RET
// export function ScanBase ( side , base_area ) ; begin
38572: LD_INT 0
38574: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
38575: LD_ADDR_VAR 0 3
38579: PUSH
38580: LD_VAR 0 2
38584: PPUSH
38585: LD_INT 81
38587: PUSH
38588: LD_VAR 0 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PPUSH
38597: CALL_OW 70
38601: ST_TO_ADDR
// end ;
38602: LD_VAR 0 3
38606: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
38607: LD_INT 0
38609: PPUSH
38610: PPUSH
38611: PPUSH
38612: PPUSH
// result := false ;
38613: LD_ADDR_VAR 0 2
38617: PUSH
38618: LD_INT 0
38620: ST_TO_ADDR
// side := GetSide ( unit ) ;
38621: LD_ADDR_VAR 0 3
38625: PUSH
38626: LD_VAR 0 1
38630: PPUSH
38631: CALL_OW 255
38635: ST_TO_ADDR
// nat := GetNation ( unit ) ;
38636: LD_ADDR_VAR 0 4
38640: PUSH
38641: LD_VAR 0 1
38645: PPUSH
38646: CALL_OW 248
38650: ST_TO_ADDR
// case nat of 1 :
38651: LD_VAR 0 4
38655: PUSH
38656: LD_INT 1
38658: DOUBLE
38659: EQUAL
38660: IFTRUE 38664
38662: GO 38675
38664: POP
// tech := tech_lassight ; 2 :
38665: LD_ADDR_VAR 0 5
38669: PUSH
38670: LD_INT 12
38672: ST_TO_ADDR
38673: GO 38714
38675: LD_INT 2
38677: DOUBLE
38678: EQUAL
38679: IFTRUE 38683
38681: GO 38694
38683: POP
// tech := tech_mortar ; 3 :
38684: LD_ADDR_VAR 0 5
38688: PUSH
38689: LD_INT 41
38691: ST_TO_ADDR
38692: GO 38714
38694: LD_INT 3
38696: DOUBLE
38697: EQUAL
38698: IFTRUE 38702
38700: GO 38713
38702: POP
// tech := tech_bazooka ; end ;
38703: LD_ADDR_VAR 0 5
38707: PUSH
38708: LD_INT 44
38710: ST_TO_ADDR
38711: GO 38714
38713: POP
// if Researched ( side , tech ) then
38714: LD_VAR 0 3
38718: PPUSH
38719: LD_VAR 0 5
38723: PPUSH
38724: CALL_OW 325
38728: IFFALSE 38755
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
38730: LD_ADDR_VAR 0 2
38734: PUSH
38735: LD_INT 5
38737: PUSH
38738: LD_INT 8
38740: PUSH
38741: LD_INT 9
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: LIST
38748: PUSH
38749: LD_VAR 0 4
38753: ARRAY
38754: ST_TO_ADDR
// end ;
38755: LD_VAR 0 2
38759: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
38760: LD_INT 0
38762: PPUSH
38763: PPUSH
38764: PPUSH
// if not mines then
38765: LD_VAR 0 2
38769: NOT
38770: IFFALSE 38774
// exit ;
38772: GO 38918
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38774: LD_ADDR_VAR 0 5
38778: PUSH
38779: LD_INT 81
38781: PUSH
38782: LD_VAR 0 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: LD_INT 21
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PPUSH
38812: CALL_OW 69
38816: ST_TO_ADDR
// for i in mines do
38817: LD_ADDR_VAR 0 4
38821: PUSH
38822: LD_VAR 0 2
38826: PUSH
38827: FOR_IN
38828: IFFALSE 38916
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
38830: LD_VAR 0 4
38834: PUSH
38835: LD_INT 1
38837: ARRAY
38838: PPUSH
38839: LD_VAR 0 4
38843: PUSH
38844: LD_INT 2
38846: ARRAY
38847: PPUSH
38848: CALL_OW 458
38852: NOT
38853: IFFALSE 38857
// continue ;
38855: GO 38827
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
38857: LD_VAR 0 4
38861: PUSH
38862: LD_INT 1
38864: ARRAY
38865: PPUSH
38866: LD_VAR 0 4
38870: PUSH
38871: LD_INT 2
38873: ARRAY
38874: PPUSH
38875: CALL_OW 428
38879: PUSH
38880: LD_VAR 0 5
38884: IN
38885: IFFALSE 38914
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
38887: LD_VAR 0 4
38891: PUSH
38892: LD_INT 1
38894: ARRAY
38895: PPUSH
38896: LD_VAR 0 4
38900: PUSH
38901: LD_INT 2
38903: ARRAY
38904: PPUSH
38905: LD_VAR 0 1
38909: PPUSH
38910: CALL_OW 456
// end ;
38914: GO 38827
38916: POP
38917: POP
// end ;
38918: LD_VAR 0 3
38922: RET
// export function Count ( array ) ; var i ; begin
38923: LD_INT 0
38925: PPUSH
38926: PPUSH
// result := 0 ;
38927: LD_ADDR_VAR 0 2
38931: PUSH
38932: LD_INT 0
38934: ST_TO_ADDR
// for i in array do
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_VAR 0 1
38944: PUSH
38945: FOR_IN
38946: IFFALSE 38970
// if i then
38948: LD_VAR 0 3
38952: IFFALSE 38968
// result := result + 1 ;
38954: LD_ADDR_VAR 0 2
38958: PUSH
38959: LD_VAR 0 2
38963: PUSH
38964: LD_INT 1
38966: PLUS
38967: ST_TO_ADDR
38968: GO 38945
38970: POP
38971: POP
// end ;
38972: LD_VAR 0 2
38976: RET
// export function IsEmpty ( building ) ; begin
38977: LD_INT 0
38979: PPUSH
// if not building then
38980: LD_VAR 0 1
38984: NOT
38985: IFFALSE 38989
// exit ;
38987: GO 39032
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38989: LD_ADDR_VAR 0 2
38993: PUSH
38994: LD_VAR 0 1
38998: PUSH
38999: LD_INT 22
39001: PUSH
39002: LD_VAR 0 1
39006: PPUSH
39007: CALL_OW 255
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 58
39018: PUSH
39019: EMPTY
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PPUSH
39026: CALL_OW 69
39030: IN
39031: ST_TO_ADDR
// end ;
39032: LD_VAR 0 2
39036: RET
// export function IsNotFull ( building ) ; begin
39037: LD_INT 0
39039: PPUSH
// if not building then
39040: LD_VAR 0 1
39044: NOT
39045: IFFALSE 39049
// exit ;
39047: GO 39068
// result := UnitsInside ( building ) < 6 ;
39049: LD_ADDR_VAR 0 2
39053: PUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 313
39063: PUSH
39064: LD_INT 6
39066: LESS
39067: ST_TO_ADDR
// end ;
39068: LD_VAR 0 2
39072: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
39073: LD_INT 0
39075: PPUSH
39076: PPUSH
39077: PPUSH
39078: PPUSH
// tmp := [ ] ;
39079: LD_ADDR_VAR 0 3
39083: PUSH
39084: EMPTY
39085: ST_TO_ADDR
// list := [ ] ;
39086: LD_ADDR_VAR 0 5
39090: PUSH
39091: EMPTY
39092: ST_TO_ADDR
// for i = 16 to 25 do
39093: LD_ADDR_VAR 0 4
39097: PUSH
39098: DOUBLE
39099: LD_INT 16
39101: DEC
39102: ST_TO_ADDR
39103: LD_INT 25
39105: PUSH
39106: FOR_TO
39107: IFFALSE 39180
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
39109: LD_ADDR_VAR 0 3
39113: PUSH
39114: LD_VAR 0 3
39118: PUSH
39119: LD_INT 22
39121: PUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: CALL_OW 255
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 91
39138: PUSH
39139: LD_VAR 0 1
39143: PUSH
39144: LD_INT 6
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 30
39154: PUSH
39155: LD_VAR 0 4
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: PUSH
39169: EMPTY
39170: LIST
39171: PPUSH
39172: CALL_OW 69
39176: ADD
39177: ST_TO_ADDR
39178: GO 39106
39180: POP
39181: POP
// for i = 1 to tmp do
39182: LD_ADDR_VAR 0 4
39186: PUSH
39187: DOUBLE
39188: LD_INT 1
39190: DEC
39191: ST_TO_ADDR
39192: LD_VAR 0 3
39196: PUSH
39197: FOR_TO
39198: IFFALSE 39286
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
39200: LD_ADDR_VAR 0 5
39204: PUSH
39205: LD_VAR 0 5
39209: PUSH
39210: LD_VAR 0 3
39214: PUSH
39215: LD_VAR 0 4
39219: ARRAY
39220: PPUSH
39221: CALL_OW 266
39225: PUSH
39226: LD_VAR 0 3
39230: PUSH
39231: LD_VAR 0 4
39235: ARRAY
39236: PPUSH
39237: CALL_OW 250
39241: PUSH
39242: LD_VAR 0 3
39246: PUSH
39247: LD_VAR 0 4
39251: ARRAY
39252: PPUSH
39253: CALL_OW 251
39257: PUSH
39258: LD_VAR 0 3
39262: PUSH
39263: LD_VAR 0 4
39267: ARRAY
39268: PPUSH
39269: CALL_OW 254
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: PUSH
39280: EMPTY
39281: LIST
39282: ADD
39283: ST_TO_ADDR
39284: GO 39197
39286: POP
39287: POP
// result := list ;
39288: LD_ADDR_VAR 0 2
39292: PUSH
39293: LD_VAR 0 5
39297: ST_TO_ADDR
// end ;
39298: LD_VAR 0 2
39302: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
39303: LD_INT 0
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
39310: PPUSH
39311: PPUSH
// if not factory then
39312: LD_VAR 0 1
39316: NOT
39317: IFFALSE 39321
// exit ;
39319: GO 39914
// if control = control_apeman then
39321: LD_VAR 0 4
39325: PUSH
39326: LD_INT 5
39328: EQUAL
39329: IFFALSE 39438
// begin tmp := UnitsInside ( factory ) ;
39331: LD_ADDR_VAR 0 8
39335: PUSH
39336: LD_VAR 0 1
39340: PPUSH
39341: CALL_OW 313
39345: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
39346: LD_VAR 0 8
39350: PPUSH
39351: LD_INT 25
39353: PUSH
39354: LD_INT 12
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PPUSH
39361: CALL_OW 72
39365: NOT
39366: IFFALSE 39376
// control := control_manual ;
39368: LD_ADDR_VAR 0 4
39372: PUSH
39373: LD_INT 1
39375: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
39376: LD_ADDR_VAR 0 8
39380: PUSH
39381: LD_VAR 0 1
39385: PPUSH
39386: CALL 39073 0 1
39390: ST_TO_ADDR
// if tmp then
39391: LD_VAR 0 8
39395: IFFALSE 39438
// begin for i in tmp do
39397: LD_ADDR_VAR 0 7
39401: PUSH
39402: LD_VAR 0 8
39406: PUSH
39407: FOR_IN
39408: IFFALSE 39436
// if i [ 1 ] = b_ext_radio then
39410: LD_VAR 0 7
39414: PUSH
39415: LD_INT 1
39417: ARRAY
39418: PUSH
39419: LD_INT 22
39421: EQUAL
39422: IFFALSE 39434
// begin control := control_remote ;
39424: LD_ADDR_VAR 0 4
39428: PUSH
39429: LD_INT 2
39431: ST_TO_ADDR
// break ;
39432: GO 39436
// end ;
39434: GO 39407
39436: POP
39437: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39438: LD_VAR 0 1
39442: PPUSH
39443: LD_VAR 0 2
39447: PPUSH
39448: LD_VAR 0 3
39452: PPUSH
39453: LD_VAR 0 4
39457: PPUSH
39458: LD_VAR 0 5
39462: PPUSH
39463: CALL_OW 448
39467: IFFALSE 39502
// begin result := [ chassis , engine , control , weapon ] ;
39469: LD_ADDR_VAR 0 6
39473: PUSH
39474: LD_VAR 0 2
39478: PUSH
39479: LD_VAR 0 3
39483: PUSH
39484: LD_VAR 0 4
39488: PUSH
39489: LD_VAR 0 5
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: ST_TO_ADDR
// exit ;
39500: GO 39914
// end ; _chassis := AvailableChassisList ( factory ) ;
39502: LD_ADDR_VAR 0 9
39506: PUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 475
39516: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
39517: LD_ADDR_VAR 0 11
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 476
39531: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
39532: LD_ADDR_VAR 0 12
39536: PUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 477
39546: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
39547: LD_ADDR_VAR 0 10
39551: PUSH
39552: LD_VAR 0 1
39556: PPUSH
39557: CALL_OW 478
39561: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
39562: LD_VAR 0 9
39566: NOT
39567: PUSH
39568: LD_VAR 0 11
39572: NOT
39573: OR
39574: PUSH
39575: LD_VAR 0 12
39579: NOT
39580: OR
39581: PUSH
39582: LD_VAR 0 10
39586: NOT
39587: OR
39588: IFFALSE 39623
// begin result := [ chassis , engine , control , weapon ] ;
39590: LD_ADDR_VAR 0 6
39594: PUSH
39595: LD_VAR 0 2
39599: PUSH
39600: LD_VAR 0 3
39604: PUSH
39605: LD_VAR 0 4
39609: PUSH
39610: LD_VAR 0 5
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
// exit ;
39621: GO 39914
// end ; if not chassis in _chassis then
39623: LD_VAR 0 2
39627: PUSH
39628: LD_VAR 0 9
39632: IN
39633: NOT
39634: IFFALSE 39660
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
39636: LD_ADDR_VAR 0 2
39640: PUSH
39641: LD_VAR 0 9
39645: PUSH
39646: LD_INT 1
39648: PPUSH
39649: LD_VAR 0 9
39653: PPUSH
39654: CALL_OW 12
39658: ARRAY
39659: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
39660: LD_VAR 0 2
39664: PPUSH
39665: LD_VAR 0 3
39669: PPUSH
39670: CALL 39919 0 2
39674: NOT
39675: IFFALSE 39734
// repeat engine := _engine [ 1 ] ;
39677: LD_ADDR_VAR 0 3
39681: PUSH
39682: LD_VAR 0 11
39686: PUSH
39687: LD_INT 1
39689: ARRAY
39690: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
39691: LD_ADDR_VAR 0 11
39695: PUSH
39696: LD_VAR 0 11
39700: PPUSH
39701: LD_INT 1
39703: PPUSH
39704: CALL_OW 3
39708: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
39709: LD_VAR 0 2
39713: PPUSH
39714: LD_VAR 0 3
39718: PPUSH
39719: CALL 39919 0 2
39723: PUSH
39724: LD_VAR 0 11
39728: PUSH
39729: EMPTY
39730: EQUAL
39731: OR
39732: IFFALSE 39677
// if not control in _control then
39734: LD_VAR 0 4
39738: PUSH
39739: LD_VAR 0 12
39743: IN
39744: NOT
39745: IFFALSE 39771
// control := _control [ rand ( 1 , _control ) ] ;
39747: LD_ADDR_VAR 0 4
39751: PUSH
39752: LD_VAR 0 12
39756: PUSH
39757: LD_INT 1
39759: PPUSH
39760: LD_VAR 0 12
39764: PPUSH
39765: CALL_OW 12
39769: ARRAY
39770: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
39771: LD_VAR 0 2
39775: PPUSH
39776: LD_VAR 0 5
39780: PPUSH
39781: CALL 40139 0 2
39785: NOT
39786: IFFALSE 39845
// repeat weapon := _weapon [ 1 ] ;
39788: LD_ADDR_VAR 0 5
39792: PUSH
39793: LD_VAR 0 10
39797: PUSH
39798: LD_INT 1
39800: ARRAY
39801: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
39802: LD_ADDR_VAR 0 10
39806: PUSH
39807: LD_VAR 0 10
39811: PPUSH
39812: LD_INT 1
39814: PPUSH
39815: CALL_OW 3
39819: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
39820: LD_VAR 0 2
39824: PPUSH
39825: LD_VAR 0 5
39829: PPUSH
39830: CALL 40139 0 2
39834: PUSH
39835: LD_VAR 0 10
39839: PUSH
39840: EMPTY
39841: EQUAL
39842: OR
39843: IFFALSE 39788
// result := [ ] ;
39845: LD_ADDR_VAR 0 6
39849: PUSH
39850: EMPTY
39851: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
39852: LD_VAR 0 1
39856: PPUSH
39857: LD_VAR 0 2
39861: PPUSH
39862: LD_VAR 0 3
39866: PPUSH
39867: LD_VAR 0 4
39871: PPUSH
39872: LD_VAR 0 5
39876: PPUSH
39877: CALL_OW 448
39881: IFFALSE 39914
// result := [ chassis , engine , control , weapon ] ;
39883: LD_ADDR_VAR 0 6
39887: PUSH
39888: LD_VAR 0 2
39892: PUSH
39893: LD_VAR 0 3
39897: PUSH
39898: LD_VAR 0 4
39902: PUSH
39903: LD_VAR 0 5
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: LIST
39912: LIST
39913: ST_TO_ADDR
// end ;
39914: LD_VAR 0 6
39918: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
39919: LD_INT 0
39921: PPUSH
// if not chassis or not engine then
39922: LD_VAR 0 1
39926: NOT
39927: PUSH
39928: LD_VAR 0 2
39932: NOT
39933: OR
39934: IFFALSE 39938
// exit ;
39936: GO 40134
// case engine of engine_solar :
39938: LD_VAR 0 2
39942: PUSH
39943: LD_INT 2
39945: DOUBLE
39946: EQUAL
39947: IFTRUE 39951
39949: GO 39989
39951: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39952: LD_ADDR_VAR 0 3
39956: PUSH
39957: LD_INT 11
39959: PUSH
39960: LD_INT 12
39962: PUSH
39963: LD_INT 13
39965: PUSH
39966: LD_INT 14
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 3
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: ST_TO_ADDR
39987: GO 40118
39989: LD_INT 1
39991: DOUBLE
39992: EQUAL
39993: IFTRUE 39997
39995: GO 40059
39997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39998: LD_ADDR_VAR 0 3
40002: PUSH
40003: LD_INT 11
40005: PUSH
40006: LD_INT 12
40008: PUSH
40009: LD_INT 13
40011: PUSH
40012: LD_INT 14
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 3
40023: PUSH
40024: LD_INT 4
40026: PUSH
40027: LD_INT 5
40029: PUSH
40030: LD_INT 21
40032: PUSH
40033: LD_INT 23
40035: PUSH
40036: LD_INT 22
40038: PUSH
40039: LD_INT 24
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: ST_TO_ADDR
40057: GO 40118
40059: LD_INT 3
40061: DOUBLE
40062: EQUAL
40063: IFTRUE 40067
40065: GO 40117
40067: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40068: LD_ADDR_VAR 0 3
40072: PUSH
40073: LD_INT 13
40075: PUSH
40076: LD_INT 14
40078: PUSH
40079: LD_INT 2
40081: PUSH
40082: LD_INT 3
40084: PUSH
40085: LD_INT 4
40087: PUSH
40088: LD_INT 5
40090: PUSH
40091: LD_INT 21
40093: PUSH
40094: LD_INT 22
40096: PUSH
40097: LD_INT 23
40099: PUSH
40100: LD_INT 24
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: ST_TO_ADDR
40115: GO 40118
40117: POP
// result := ( chassis in result ) ;
40118: LD_ADDR_VAR 0 3
40122: PUSH
40123: LD_VAR 0 1
40127: PUSH
40128: LD_VAR 0 3
40132: IN
40133: ST_TO_ADDR
// end ;
40134: LD_VAR 0 3
40138: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
40139: LD_INT 0
40141: PPUSH
// if not chassis or not weapon then
40142: LD_VAR 0 1
40146: NOT
40147: PUSH
40148: LD_VAR 0 2
40152: NOT
40153: OR
40154: IFFALSE 40158
// exit ;
40156: GO 41184
// case weapon of us_machine_gun :
40158: LD_VAR 0 2
40162: PUSH
40163: LD_INT 2
40165: DOUBLE
40166: EQUAL
40167: IFTRUE 40171
40169: GO 40201
40171: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
40172: LD_ADDR_VAR 0 3
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: LD_INT 2
40182: PUSH
40183: LD_INT 3
40185: PUSH
40186: LD_INT 4
40188: PUSH
40189: LD_INT 5
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
40199: GO 41168
40201: LD_INT 3
40203: DOUBLE
40204: EQUAL
40205: IFTRUE 40209
40207: GO 40239
40209: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
40210: LD_ADDR_VAR 0 3
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: LD_INT 3
40223: PUSH
40224: LD_INT 4
40226: PUSH
40227: LD_INT 5
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: ST_TO_ADDR
40237: GO 41168
40239: LD_INT 11
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40277
40247: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 1
40255: PUSH
40256: LD_INT 2
40258: PUSH
40259: LD_INT 3
40261: PUSH
40262: LD_INT 4
40264: PUSH
40265: LD_INT 5
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: ST_TO_ADDR
40275: GO 41168
40277: LD_INT 4
40279: DOUBLE
40280: EQUAL
40281: IFTRUE 40285
40283: GO 40311
40285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
40286: LD_ADDR_VAR 0 3
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 3
40296: PUSH
40297: LD_INT 4
40299: PUSH
40300: LD_INT 5
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: ST_TO_ADDR
40309: GO 41168
40311: LD_INT 5
40313: DOUBLE
40314: EQUAL
40315: IFTRUE 40319
40317: GO 40345
40319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_INT 2
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: LD_INT 4
40333: PUSH
40334: LD_INT 5
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: ST_TO_ADDR
40343: GO 41168
40345: LD_INT 9
40347: DOUBLE
40348: EQUAL
40349: IFTRUE 40353
40351: GO 40379
40353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
40354: LD_ADDR_VAR 0 3
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: LD_INT 4
40367: PUSH
40368: LD_INT 5
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: ST_TO_ADDR
40377: GO 41168
40379: LD_INT 7
40381: DOUBLE
40382: EQUAL
40383: IFTRUE 40387
40385: GO 40413
40387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
40388: LD_ADDR_VAR 0 3
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: LD_INT 3
40398: PUSH
40399: LD_INT 4
40401: PUSH
40402: LD_INT 5
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: ST_TO_ADDR
40411: GO 41168
40413: LD_INT 12
40415: DOUBLE
40416: EQUAL
40417: IFTRUE 40421
40419: GO 40447
40421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
40422: LD_ADDR_VAR 0 3
40426: PUSH
40427: LD_INT 2
40429: PUSH
40430: LD_INT 3
40432: PUSH
40433: LD_INT 4
40435: PUSH
40436: LD_INT 5
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: ST_TO_ADDR
40445: GO 41168
40447: LD_INT 13
40449: DOUBLE
40450: EQUAL
40451: IFTRUE 40455
40453: GO 40481
40455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
40456: LD_ADDR_VAR 0 3
40460: PUSH
40461: LD_INT 2
40463: PUSH
40464: LD_INT 3
40466: PUSH
40467: LD_INT 4
40469: PUSH
40470: LD_INT 5
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: ST_TO_ADDR
40479: GO 41168
40481: LD_INT 14
40483: DOUBLE
40484: EQUAL
40485: IFTRUE 40489
40487: GO 40507
40489: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
40490: LD_ADDR_VAR 0 3
40494: PUSH
40495: LD_INT 4
40497: PUSH
40498: LD_INT 5
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: ST_TO_ADDR
40505: GO 41168
40507: LD_INT 6
40509: DOUBLE
40510: EQUAL
40511: IFTRUE 40515
40513: GO 40533
40515: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
40516: LD_ADDR_VAR 0 3
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: LD_INT 5
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: ST_TO_ADDR
40531: GO 41168
40533: LD_INT 10
40535: DOUBLE
40536: EQUAL
40537: IFTRUE 40541
40539: GO 40559
40541: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
40542: LD_ADDR_VAR 0 3
40546: PUSH
40547: LD_INT 4
40549: PUSH
40550: LD_INT 5
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: ST_TO_ADDR
40557: GO 41168
40559: LD_INT 22
40561: DOUBLE
40562: EQUAL
40563: IFTRUE 40567
40565: GO 40593
40567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
40568: LD_ADDR_VAR 0 3
40572: PUSH
40573: LD_INT 11
40575: PUSH
40576: LD_INT 12
40578: PUSH
40579: LD_INT 13
40581: PUSH
40582: LD_INT 14
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
40591: GO 41168
40593: LD_INT 23
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40627
40601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
40602: LD_ADDR_VAR 0 3
40606: PUSH
40607: LD_INT 11
40609: PUSH
40610: LD_INT 12
40612: PUSH
40613: LD_INT 13
40615: PUSH
40616: LD_INT 14
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: ST_TO_ADDR
40625: GO 41168
40627: LD_INT 24
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40635
40633: GO 40661
40635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_INT 11
40643: PUSH
40644: LD_INT 12
40646: PUSH
40647: LD_INT 13
40649: PUSH
40650: LD_INT 14
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: ST_TO_ADDR
40659: GO 41168
40661: LD_INT 30
40663: DOUBLE
40664: EQUAL
40665: IFTRUE 40669
40667: GO 40695
40669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
40670: LD_ADDR_VAR 0 3
40674: PUSH
40675: LD_INT 11
40677: PUSH
40678: LD_INT 12
40680: PUSH
40681: LD_INT 13
40683: PUSH
40684: LD_INT 14
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: ST_TO_ADDR
40693: GO 41168
40695: LD_INT 25
40697: DOUBLE
40698: EQUAL
40699: IFTRUE 40703
40701: GO 40721
40703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
40704: LD_ADDR_VAR 0 3
40708: PUSH
40709: LD_INT 13
40711: PUSH
40712: LD_INT 14
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: ST_TO_ADDR
40719: GO 41168
40721: LD_INT 27
40723: DOUBLE
40724: EQUAL
40725: IFTRUE 40729
40727: GO 40747
40729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
40730: LD_ADDR_VAR 0 3
40734: PUSH
40735: LD_INT 13
40737: PUSH
40738: LD_INT 14
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: ST_TO_ADDR
40745: GO 41168
40747: LD_INT 28
40749: DOUBLE
40750: EQUAL
40751: IFTRUE 40755
40753: GO 40773
40755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
40756: LD_ADDR_VAR 0 3
40760: PUSH
40761: LD_INT 13
40763: PUSH
40764: LD_INT 14
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: ST_TO_ADDR
40771: GO 41168
40773: LD_INT 29
40775: DOUBLE
40776: EQUAL
40777: IFTRUE 40781
40779: GO 40799
40781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
40782: LD_ADDR_VAR 0 3
40786: PUSH
40787: LD_INT 13
40789: PUSH
40790: LD_INT 14
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: ST_TO_ADDR
40797: GO 41168
40799: LD_INT 31
40801: DOUBLE
40802: EQUAL
40803: IFTRUE 40807
40805: GO 40825
40807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
40808: LD_ADDR_VAR 0 3
40812: PUSH
40813: LD_INT 13
40815: PUSH
40816: LD_INT 14
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: ST_TO_ADDR
40823: GO 41168
40825: LD_INT 26
40827: DOUBLE
40828: EQUAL
40829: IFTRUE 40833
40831: GO 40851
40833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
40834: LD_ADDR_VAR 0 3
40838: PUSH
40839: LD_INT 13
40841: PUSH
40842: LD_INT 14
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: ST_TO_ADDR
40849: GO 41168
40851: LD_INT 42
40853: DOUBLE
40854: EQUAL
40855: IFTRUE 40859
40857: GO 40885
40859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: LD_INT 21
40867: PUSH
40868: LD_INT 22
40870: PUSH
40871: LD_INT 23
40873: PUSH
40874: LD_INT 24
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: ST_TO_ADDR
40883: GO 41168
40885: LD_INT 43
40887: DOUBLE
40888: EQUAL
40889: IFTRUE 40893
40891: GO 40919
40893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
40894: LD_ADDR_VAR 0 3
40898: PUSH
40899: LD_INT 21
40901: PUSH
40902: LD_INT 22
40904: PUSH
40905: LD_INT 23
40907: PUSH
40908: LD_INT 24
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: ST_TO_ADDR
40917: GO 41168
40919: LD_INT 44
40921: DOUBLE
40922: EQUAL
40923: IFTRUE 40927
40925: GO 40953
40927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40928: LD_ADDR_VAR 0 3
40932: PUSH
40933: LD_INT 21
40935: PUSH
40936: LD_INT 22
40938: PUSH
40939: LD_INT 23
40941: PUSH
40942: LD_INT 24
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: ST_TO_ADDR
40951: GO 41168
40953: LD_INT 45
40955: DOUBLE
40956: EQUAL
40957: IFTRUE 40961
40959: GO 40987
40961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40962: LD_ADDR_VAR 0 3
40966: PUSH
40967: LD_INT 21
40969: PUSH
40970: LD_INT 22
40972: PUSH
40973: LD_INT 23
40975: PUSH
40976: LD_INT 24
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: ST_TO_ADDR
40985: GO 41168
40987: LD_INT 49
40989: DOUBLE
40990: EQUAL
40991: IFTRUE 40995
40993: GO 41021
40995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40996: LD_ADDR_VAR 0 3
41000: PUSH
41001: LD_INT 21
41003: PUSH
41004: LD_INT 22
41006: PUSH
41007: LD_INT 23
41009: PUSH
41010: LD_INT 24
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: ST_TO_ADDR
41019: GO 41168
41021: LD_INT 51
41023: DOUBLE
41024: EQUAL
41025: IFTRUE 41029
41027: GO 41055
41029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
41030: LD_ADDR_VAR 0 3
41034: PUSH
41035: LD_INT 21
41037: PUSH
41038: LD_INT 22
41040: PUSH
41041: LD_INT 23
41043: PUSH
41044: LD_INT 24
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: ST_TO_ADDR
41053: GO 41168
41055: LD_INT 52
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41089
41063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
41064: LD_ADDR_VAR 0 3
41068: PUSH
41069: LD_INT 21
41071: PUSH
41072: LD_INT 22
41074: PUSH
41075: LD_INT 23
41077: PUSH
41078: LD_INT 24
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: ST_TO_ADDR
41087: GO 41168
41089: LD_INT 53
41091: DOUBLE
41092: EQUAL
41093: IFTRUE 41097
41095: GO 41115
41097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_INT 23
41105: PUSH
41106: LD_INT 24
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: ST_TO_ADDR
41113: GO 41168
41115: LD_INT 46
41117: DOUBLE
41118: EQUAL
41119: IFTRUE 41123
41121: GO 41141
41123: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
41124: LD_ADDR_VAR 0 3
41128: PUSH
41129: LD_INT 23
41131: PUSH
41132: LD_INT 24
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: ST_TO_ADDR
41139: GO 41168
41141: LD_INT 47
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41167
41149: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: LD_INT 23
41157: PUSH
41158: LD_INT 24
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: ST_TO_ADDR
41165: GO 41168
41167: POP
// result := ( chassis in result ) ;
41168: LD_ADDR_VAR 0 3
41172: PUSH
41173: LD_VAR 0 1
41177: PUSH
41178: LD_VAR 0 3
41182: IN
41183: ST_TO_ADDR
// end ;
41184: LD_VAR 0 3
41188: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
41189: LD_INT 0
41191: PPUSH
41192: PPUSH
41193: PPUSH
41194: PPUSH
41195: PPUSH
41196: PPUSH
41197: PPUSH
// result := array ;
41198: LD_ADDR_VAR 0 5
41202: PUSH
41203: LD_VAR 0 1
41207: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
41208: LD_VAR 0 1
41212: NOT
41213: PUSH
41214: LD_VAR 0 2
41218: NOT
41219: OR
41220: PUSH
41221: LD_VAR 0 3
41225: NOT
41226: OR
41227: PUSH
41228: LD_VAR 0 2
41232: PUSH
41233: LD_VAR 0 1
41237: GREATER
41238: OR
41239: PUSH
41240: LD_VAR 0 3
41244: PUSH
41245: LD_VAR 0 1
41249: GREATER
41250: OR
41251: IFFALSE 41255
// exit ;
41253: GO 41551
// if direction then
41255: LD_VAR 0 4
41259: IFFALSE 41323
// begin d := 1 ;
41261: LD_ADDR_VAR 0 9
41265: PUSH
41266: LD_INT 1
41268: ST_TO_ADDR
// if i_from > i_to then
41269: LD_VAR 0 2
41273: PUSH
41274: LD_VAR 0 3
41278: GREATER
41279: IFFALSE 41305
// length := ( array - i_from ) + i_to else
41281: LD_ADDR_VAR 0 11
41285: PUSH
41286: LD_VAR 0 1
41290: PUSH
41291: LD_VAR 0 2
41295: MINUS
41296: PUSH
41297: LD_VAR 0 3
41301: PLUS
41302: ST_TO_ADDR
41303: GO 41321
// length := i_to - i_from ;
41305: LD_ADDR_VAR 0 11
41309: PUSH
41310: LD_VAR 0 3
41314: PUSH
41315: LD_VAR 0 2
41319: MINUS
41320: ST_TO_ADDR
// end else
41321: GO 41384
// begin d := - 1 ;
41323: LD_ADDR_VAR 0 9
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: ST_TO_ADDR
// if i_from > i_to then
41332: LD_VAR 0 2
41336: PUSH
41337: LD_VAR 0 3
41341: GREATER
41342: IFFALSE 41362
// length := i_from - i_to else
41344: LD_ADDR_VAR 0 11
41348: PUSH
41349: LD_VAR 0 2
41353: PUSH
41354: LD_VAR 0 3
41358: MINUS
41359: ST_TO_ADDR
41360: GO 41384
// length := ( array - i_to ) + i_from ;
41362: LD_ADDR_VAR 0 11
41366: PUSH
41367: LD_VAR 0 1
41371: PUSH
41372: LD_VAR 0 3
41376: MINUS
41377: PUSH
41378: LD_VAR 0 2
41382: PLUS
41383: ST_TO_ADDR
// end ; if not length then
41384: LD_VAR 0 11
41388: NOT
41389: IFFALSE 41393
// exit ;
41391: GO 41551
// tmp := array ;
41393: LD_ADDR_VAR 0 10
41397: PUSH
41398: LD_VAR 0 1
41402: ST_TO_ADDR
// for i = 1 to length do
41403: LD_ADDR_VAR 0 6
41407: PUSH
41408: DOUBLE
41409: LD_INT 1
41411: DEC
41412: ST_TO_ADDR
41413: LD_VAR 0 11
41417: PUSH
41418: FOR_TO
41419: IFFALSE 41539
// begin for j = 1 to array do
41421: LD_ADDR_VAR 0 7
41425: PUSH
41426: DOUBLE
41427: LD_INT 1
41429: DEC
41430: ST_TO_ADDR
41431: LD_VAR 0 1
41435: PUSH
41436: FOR_TO
41437: IFFALSE 41525
// begin k := j + d ;
41439: LD_ADDR_VAR 0 8
41443: PUSH
41444: LD_VAR 0 7
41448: PUSH
41449: LD_VAR 0 9
41453: PLUS
41454: ST_TO_ADDR
// if k > array then
41455: LD_VAR 0 8
41459: PUSH
41460: LD_VAR 0 1
41464: GREATER
41465: IFFALSE 41475
// k := 1 ;
41467: LD_ADDR_VAR 0 8
41471: PUSH
41472: LD_INT 1
41474: ST_TO_ADDR
// if not k then
41475: LD_VAR 0 8
41479: NOT
41480: IFFALSE 41492
// k := array ;
41482: LD_ADDR_VAR 0 8
41486: PUSH
41487: LD_VAR 0 1
41491: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
41492: LD_ADDR_VAR 0 10
41496: PUSH
41497: LD_VAR 0 10
41501: PPUSH
41502: LD_VAR 0 8
41506: PPUSH
41507: LD_VAR 0 1
41511: PUSH
41512: LD_VAR 0 7
41516: ARRAY
41517: PPUSH
41518: CALL_OW 1
41522: ST_TO_ADDR
// end ;
41523: GO 41436
41525: POP
41526: POP
// array := tmp ;
41527: LD_ADDR_VAR 0 1
41531: PUSH
41532: LD_VAR 0 10
41536: ST_TO_ADDR
// end ;
41537: GO 41418
41539: POP
41540: POP
// result := array ;
41541: LD_ADDR_VAR 0 5
41545: PUSH
41546: LD_VAR 0 1
41550: ST_TO_ADDR
// end ;
41551: LD_VAR 0 5
41555: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
41556: LD_INT 0
41558: PPUSH
41559: PPUSH
// result := 0 ;
41560: LD_ADDR_VAR 0 3
41564: PUSH
41565: LD_INT 0
41567: ST_TO_ADDR
// if not array or not value in array then
41568: LD_VAR 0 1
41572: NOT
41573: PUSH
41574: LD_VAR 0 2
41578: PUSH
41579: LD_VAR 0 1
41583: IN
41584: NOT
41585: OR
41586: IFFALSE 41590
// exit ;
41588: GO 41644
// for i = 1 to array do
41590: LD_ADDR_VAR 0 4
41594: PUSH
41595: DOUBLE
41596: LD_INT 1
41598: DEC
41599: ST_TO_ADDR
41600: LD_VAR 0 1
41604: PUSH
41605: FOR_TO
41606: IFFALSE 41642
// if value = array [ i ] then
41608: LD_VAR 0 2
41612: PUSH
41613: LD_VAR 0 1
41617: PUSH
41618: LD_VAR 0 4
41622: ARRAY
41623: EQUAL
41624: IFFALSE 41640
// begin result := i ;
41626: LD_ADDR_VAR 0 3
41630: PUSH
41631: LD_VAR 0 4
41635: ST_TO_ADDR
// exit ;
41636: POP
41637: POP
41638: GO 41644
// end ;
41640: GO 41605
41642: POP
41643: POP
// end ;
41644: LD_VAR 0 3
41648: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
41649: LD_INT 0
41651: PPUSH
// vc_chassis := chassis ;
41652: LD_ADDR_OWVAR 37
41656: PUSH
41657: LD_VAR 0 1
41661: ST_TO_ADDR
// vc_engine := engine ;
41662: LD_ADDR_OWVAR 39
41666: PUSH
41667: LD_VAR 0 2
41671: ST_TO_ADDR
// vc_control := control ;
41672: LD_ADDR_OWVAR 38
41676: PUSH
41677: LD_VAR 0 3
41681: ST_TO_ADDR
// vc_weapon := weapon ;
41682: LD_ADDR_OWVAR 40
41686: PUSH
41687: LD_VAR 0 4
41691: ST_TO_ADDR
// vc_fuel_battery := fuel ;
41692: LD_ADDR_OWVAR 41
41696: PUSH
41697: LD_VAR 0 5
41701: ST_TO_ADDR
// end ;
41702: LD_VAR 0 6
41706: RET
// export function WantPlant ( unit ) ; var task ; begin
41707: LD_INT 0
41709: PPUSH
41710: PPUSH
// result := false ;
41711: LD_ADDR_VAR 0 2
41715: PUSH
41716: LD_INT 0
41718: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
41719: LD_ADDR_VAR 0 3
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 437
41733: ST_TO_ADDR
// if task then
41734: LD_VAR 0 3
41738: IFFALSE 41766
// if task [ 1 ] [ 1 ] = p then
41740: LD_VAR 0 3
41744: PUSH
41745: LD_INT 1
41747: ARRAY
41748: PUSH
41749: LD_INT 1
41751: ARRAY
41752: PUSH
41753: LD_STRING p
41755: EQUAL
41756: IFFALSE 41766
// result := true ;
41758: LD_ADDR_VAR 0 2
41762: PUSH
41763: LD_INT 1
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 2
41770: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
// if pos < 1 then
41777: LD_VAR 0 2
41781: PUSH
41782: LD_INT 1
41784: LESS
41785: IFFALSE 41789
// exit ;
41787: GO 42092
// if pos = 1 then
41789: LD_VAR 0 2
41793: PUSH
41794: LD_INT 1
41796: EQUAL
41797: IFFALSE 41830
// result := Replace ( arr , pos [ 1 ] , value ) else
41799: LD_ADDR_VAR 0 4
41803: PUSH
41804: LD_VAR 0 1
41808: PPUSH
41809: LD_VAR 0 2
41813: PUSH
41814: LD_INT 1
41816: ARRAY
41817: PPUSH
41818: LD_VAR 0 3
41822: PPUSH
41823: CALL_OW 1
41827: ST_TO_ADDR
41828: GO 42092
// begin tmp := arr ;
41830: LD_ADDR_VAR 0 6
41834: PUSH
41835: LD_VAR 0 1
41839: ST_TO_ADDR
// s_arr := [ tmp ] ;
41840: LD_ADDR_VAR 0 7
41844: PUSH
41845: LD_VAR 0 6
41849: PUSH
41850: EMPTY
41851: LIST
41852: ST_TO_ADDR
// for i = 1 to pos - 1 do
41853: LD_ADDR_VAR 0 5
41857: PUSH
41858: DOUBLE
41859: LD_INT 1
41861: DEC
41862: ST_TO_ADDR
41863: LD_VAR 0 2
41867: PUSH
41868: LD_INT 1
41870: MINUS
41871: PUSH
41872: FOR_TO
41873: IFFALSE 41918
// begin tmp := tmp [ pos [ i ] ] ;
41875: LD_ADDR_VAR 0 6
41879: PUSH
41880: LD_VAR 0 6
41884: PUSH
41885: LD_VAR 0 2
41889: PUSH
41890: LD_VAR 0 5
41894: ARRAY
41895: ARRAY
41896: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
41897: LD_ADDR_VAR 0 7
41901: PUSH
41902: LD_VAR 0 7
41906: PUSH
41907: LD_VAR 0 6
41911: PUSH
41912: EMPTY
41913: LIST
41914: ADD
41915: ST_TO_ADDR
// end ;
41916: GO 41872
41918: POP
41919: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41920: LD_ADDR_VAR 0 6
41924: PUSH
41925: LD_VAR 0 6
41929: PPUSH
41930: LD_VAR 0 2
41934: PUSH
41935: LD_VAR 0 2
41939: ARRAY
41940: PPUSH
41941: LD_VAR 0 3
41945: PPUSH
41946: CALL_OW 1
41950: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41951: LD_ADDR_VAR 0 7
41955: PUSH
41956: LD_VAR 0 7
41960: PPUSH
41961: LD_VAR 0 7
41965: PPUSH
41966: LD_VAR 0 6
41970: PPUSH
41971: CALL_OW 1
41975: ST_TO_ADDR
// for i = s_arr downto 2 do
41976: LD_ADDR_VAR 0 5
41980: PUSH
41981: DOUBLE
41982: LD_VAR 0 7
41986: INC
41987: ST_TO_ADDR
41988: LD_INT 2
41990: PUSH
41991: FOR_DOWNTO
41992: IFFALSE 42076
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41994: LD_ADDR_VAR 0 6
41998: PUSH
41999: LD_VAR 0 7
42003: PUSH
42004: LD_VAR 0 5
42008: PUSH
42009: LD_INT 1
42011: MINUS
42012: ARRAY
42013: PPUSH
42014: LD_VAR 0 2
42018: PUSH
42019: LD_VAR 0 5
42023: PUSH
42024: LD_INT 1
42026: MINUS
42027: ARRAY
42028: PPUSH
42029: LD_VAR 0 7
42033: PUSH
42034: LD_VAR 0 5
42038: ARRAY
42039: PPUSH
42040: CALL_OW 1
42044: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
42045: LD_ADDR_VAR 0 7
42049: PUSH
42050: LD_VAR 0 7
42054: PPUSH
42055: LD_VAR 0 5
42059: PUSH
42060: LD_INT 1
42062: MINUS
42063: PPUSH
42064: LD_VAR 0 6
42068: PPUSH
42069: CALL_OW 1
42073: ST_TO_ADDR
// end ;
42074: GO 41991
42076: POP
42077: POP
// result := s_arr [ 1 ] ;
42078: LD_ADDR_VAR 0 4
42082: PUSH
42083: LD_VAR 0 7
42087: PUSH
42088: LD_INT 1
42090: ARRAY
42091: ST_TO_ADDR
// end ; end ;
42092: LD_VAR 0 4
42096: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
42097: LD_INT 0
42099: PPUSH
42100: PPUSH
// if not list then
42101: LD_VAR 0 1
42105: NOT
42106: IFFALSE 42110
// exit ;
42108: GO 42201
// i := list [ pos1 ] ;
42110: LD_ADDR_VAR 0 5
42114: PUSH
42115: LD_VAR 0 1
42119: PUSH
42120: LD_VAR 0 2
42124: ARRAY
42125: ST_TO_ADDR
// if not i then
42126: LD_VAR 0 5
42130: NOT
42131: IFFALSE 42135
// exit ;
42133: GO 42201
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
42135: LD_ADDR_VAR 0 1
42139: PUSH
42140: LD_VAR 0 1
42144: PPUSH
42145: LD_VAR 0 2
42149: PPUSH
42150: LD_VAR 0 1
42154: PUSH
42155: LD_VAR 0 3
42159: ARRAY
42160: PPUSH
42161: CALL_OW 1
42165: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
42166: LD_ADDR_VAR 0 1
42170: PUSH
42171: LD_VAR 0 1
42175: PPUSH
42176: LD_VAR 0 3
42180: PPUSH
42181: LD_VAR 0 5
42185: PPUSH
42186: CALL_OW 1
42190: ST_TO_ADDR
// result := list ;
42191: LD_ADDR_VAR 0 4
42195: PUSH
42196: LD_VAR 0 1
42200: ST_TO_ADDR
// end ;
42201: LD_VAR 0 4
42205: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
42206: LD_INT 0
42208: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
42209: LD_ADDR_VAR 0 5
42213: PUSH
42214: LD_VAR 0 1
42218: PPUSH
42219: CALL_OW 250
42223: PPUSH
42224: LD_VAR 0 1
42228: PPUSH
42229: CALL_OW 251
42233: PPUSH
42234: LD_VAR 0 2
42238: PPUSH
42239: LD_VAR 0 3
42243: PPUSH
42244: LD_VAR 0 4
42248: PPUSH
42249: CALL 42259 0 5
42253: ST_TO_ADDR
// end ;
42254: LD_VAR 0 5
42258: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
42259: LD_INT 0
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
// if not list then
42265: LD_VAR 0 3
42269: NOT
42270: IFFALSE 42274
// exit ;
42272: GO 42662
// result := [ ] ;
42274: LD_ADDR_VAR 0 6
42278: PUSH
42279: EMPTY
42280: ST_TO_ADDR
// for i in list do
42281: LD_ADDR_VAR 0 7
42285: PUSH
42286: LD_VAR 0 3
42290: PUSH
42291: FOR_IN
42292: IFFALSE 42494
// begin tmp := GetDistUnitXY ( i , x , y ) ;
42294: LD_ADDR_VAR 0 9
42298: PUSH
42299: LD_VAR 0 7
42303: PPUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: LD_VAR 0 2
42313: PPUSH
42314: CALL_OW 297
42318: ST_TO_ADDR
// if not result then
42319: LD_VAR 0 6
42323: NOT
42324: IFFALSE 42350
// result := [ [ i , tmp ] ] else
42326: LD_ADDR_VAR 0 6
42330: PUSH
42331: LD_VAR 0 7
42335: PUSH
42336: LD_VAR 0 9
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: EMPTY
42346: LIST
42347: ST_TO_ADDR
42348: GO 42492
// begin if result [ result ] [ 2 ] < tmp then
42350: LD_VAR 0 6
42354: PUSH
42355: LD_VAR 0 6
42359: ARRAY
42360: PUSH
42361: LD_INT 2
42363: ARRAY
42364: PUSH
42365: LD_VAR 0 9
42369: LESS
42370: IFFALSE 42412
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
42372: LD_ADDR_VAR 0 6
42376: PUSH
42377: LD_VAR 0 6
42381: PPUSH
42382: LD_VAR 0 6
42386: PUSH
42387: LD_INT 1
42389: PLUS
42390: PPUSH
42391: LD_VAR 0 7
42395: PUSH
42396: LD_VAR 0 9
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PPUSH
42405: CALL_OW 2
42409: ST_TO_ADDR
42410: GO 42492
// for j = 1 to result do
42412: LD_ADDR_VAR 0 8
42416: PUSH
42417: DOUBLE
42418: LD_INT 1
42420: DEC
42421: ST_TO_ADDR
42422: LD_VAR 0 6
42426: PUSH
42427: FOR_TO
42428: IFFALSE 42490
// begin if tmp < result [ j ] [ 2 ] then
42430: LD_VAR 0 9
42434: PUSH
42435: LD_VAR 0 6
42439: PUSH
42440: LD_VAR 0 8
42444: ARRAY
42445: PUSH
42446: LD_INT 2
42448: ARRAY
42449: LESS
42450: IFFALSE 42488
// begin result := Insert ( result , j , [ i , tmp ] ) ;
42452: LD_ADDR_VAR 0 6
42456: PUSH
42457: LD_VAR 0 6
42461: PPUSH
42462: LD_VAR 0 8
42466: PPUSH
42467: LD_VAR 0 7
42471: PUSH
42472: LD_VAR 0 9
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PPUSH
42481: CALL_OW 2
42485: ST_TO_ADDR
// break ;
42486: GO 42490
// end ; end ;
42488: GO 42427
42490: POP
42491: POP
// end ; end ;
42492: GO 42291
42494: POP
42495: POP
// if result and not asc then
42496: LD_VAR 0 6
42500: PUSH
42501: LD_VAR 0 4
42505: NOT
42506: AND
42507: IFFALSE 42582
// begin tmp := result ;
42509: LD_ADDR_VAR 0 9
42513: PUSH
42514: LD_VAR 0 6
42518: ST_TO_ADDR
// for i = tmp downto 1 do
42519: LD_ADDR_VAR 0 7
42523: PUSH
42524: DOUBLE
42525: LD_VAR 0 9
42529: INC
42530: ST_TO_ADDR
42531: LD_INT 1
42533: PUSH
42534: FOR_DOWNTO
42535: IFFALSE 42580
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
42537: LD_ADDR_VAR 0 6
42541: PUSH
42542: LD_VAR 0 6
42546: PPUSH
42547: LD_VAR 0 9
42551: PUSH
42552: LD_VAR 0 7
42556: MINUS
42557: PUSH
42558: LD_INT 1
42560: PLUS
42561: PPUSH
42562: LD_VAR 0 9
42566: PUSH
42567: LD_VAR 0 7
42571: ARRAY
42572: PPUSH
42573: CALL_OW 1
42577: ST_TO_ADDR
42578: GO 42534
42580: POP
42581: POP
// end ; tmp := [ ] ;
42582: LD_ADDR_VAR 0 9
42586: PUSH
42587: EMPTY
42588: ST_TO_ADDR
// if mode then
42589: LD_VAR 0 5
42593: IFFALSE 42662
// begin for i = 1 to result do
42595: LD_ADDR_VAR 0 7
42599: PUSH
42600: DOUBLE
42601: LD_INT 1
42603: DEC
42604: ST_TO_ADDR
42605: LD_VAR 0 6
42609: PUSH
42610: FOR_TO
42611: IFFALSE 42650
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
42613: LD_ADDR_VAR 0 9
42617: PUSH
42618: LD_VAR 0 9
42622: PPUSH
42623: LD_VAR 0 7
42627: PPUSH
42628: LD_VAR 0 6
42632: PUSH
42633: LD_VAR 0 7
42637: ARRAY
42638: PUSH
42639: LD_INT 1
42641: ARRAY
42642: PPUSH
42643: CALL_OW 1
42647: ST_TO_ADDR
42648: GO 42610
42650: POP
42651: POP
// result := tmp ;
42652: LD_ADDR_VAR 0 6
42656: PUSH
42657: LD_VAR 0 9
42661: ST_TO_ADDR
// end ; end ;
42662: LD_VAR 0 6
42666: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
42667: LD_INT 0
42669: PPUSH
42670: PPUSH
42671: PPUSH
42672: PPUSH
42673: PPUSH
42674: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
42675: LD_ADDR_VAR 0 5
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: LD_INT 0
42688: PUSH
42689: EMPTY
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
// if not x or not y then
42697: LD_VAR 0 2
42701: NOT
42702: PUSH
42703: LD_VAR 0 3
42707: NOT
42708: OR
42709: IFFALSE 42713
// exit ;
42711: GO 44359
// if not range then
42713: LD_VAR 0 4
42717: NOT
42718: IFFALSE 42728
// range := 10 ;
42720: LD_ADDR_VAR 0 4
42724: PUSH
42725: LD_INT 10
42727: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42728: LD_ADDR_VAR 0 8
42732: PUSH
42733: LD_INT 81
42735: PUSH
42736: LD_VAR 0 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 92
42747: PUSH
42748: LD_VAR 0 2
42752: PUSH
42753: LD_VAR 0 3
42757: PUSH
42758: LD_VAR 0 4
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: LD_INT 21
42774: PUSH
42775: LD_INT 3
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: LIST
42790: PPUSH
42791: CALL_OW 69
42795: ST_TO_ADDR
// if not tmp then
42796: LD_VAR 0 8
42800: NOT
42801: IFFALSE 42805
// exit ;
42803: GO 44359
// for i in tmp do
42805: LD_ADDR_VAR 0 6
42809: PUSH
42810: LD_VAR 0 8
42814: PUSH
42815: FOR_IN
42816: IFFALSE 44334
// begin points := [ 0 , 0 , 0 ] ;
42818: LD_ADDR_VAR 0 9
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// bpoints := 1 ;
42837: LD_ADDR_VAR 0 10
42841: PUSH
42842: LD_INT 1
42844: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42845: LD_VAR 0 6
42849: PPUSH
42850: CALL_OW 247
42854: PUSH
42855: LD_INT 1
42857: DOUBLE
42858: EQUAL
42859: IFTRUE 42863
42861: GO 43441
42863: POP
// begin if GetClass ( i ) = 1 then
42864: LD_VAR 0 6
42868: PPUSH
42869: CALL_OW 257
42873: PUSH
42874: LD_INT 1
42876: EQUAL
42877: IFFALSE 42898
// points := [ 10 , 5 , 3 ] ;
42879: LD_ADDR_VAR 0 9
42883: PUSH
42884: LD_INT 10
42886: PUSH
42887: LD_INT 5
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42898: LD_VAR 0 6
42902: PPUSH
42903: CALL_OW 257
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 3
42913: PUSH
42914: LD_INT 4
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: IN
42922: IFFALSE 42943
// points := [ 3 , 2 , 1 ] ;
42924: LD_ADDR_VAR 0 9
42928: PUSH
42929: LD_INT 3
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: LIST
42942: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42943: LD_VAR 0 6
42947: PPUSH
42948: CALL_OW 257
42952: PUSH
42953: LD_INT 5
42955: EQUAL
42956: IFFALSE 42977
// points := [ 130 , 5 , 2 ] ;
42958: LD_ADDR_VAR 0 9
42962: PUSH
42963: LD_INT 130
42965: PUSH
42966: LD_INT 5
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42977: LD_VAR 0 6
42981: PPUSH
42982: CALL_OW 257
42986: PUSH
42987: LD_INT 8
42989: EQUAL
42990: IFFALSE 43011
// points := [ 35 , 35 , 30 ] ;
42992: LD_ADDR_VAR 0 9
42996: PUSH
42997: LD_INT 35
42999: PUSH
43000: LD_INT 35
43002: PUSH
43003: LD_INT 30
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: LIST
43010: ST_TO_ADDR
// if GetClass ( i ) = 9 then
43011: LD_VAR 0 6
43015: PPUSH
43016: CALL_OW 257
43020: PUSH
43021: LD_INT 9
43023: EQUAL
43024: IFFALSE 43045
// points := [ 20 , 55 , 40 ] ;
43026: LD_ADDR_VAR 0 9
43030: PUSH
43031: LD_INT 20
43033: PUSH
43034: LD_INT 55
43036: PUSH
43037: LD_INT 40
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
43045: LD_VAR 0 6
43049: PPUSH
43050: CALL_OW 257
43054: PUSH
43055: LD_INT 12
43057: PUSH
43058: LD_INT 16
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: IN
43065: IFFALSE 43086
// points := [ 5 , 3 , 2 ] ;
43067: LD_ADDR_VAR 0 9
43071: PUSH
43072: LD_INT 5
43074: PUSH
43075: LD_INT 3
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// if GetClass ( i ) = 17 then
43086: LD_VAR 0 6
43090: PPUSH
43091: CALL_OW 257
43095: PUSH
43096: LD_INT 17
43098: EQUAL
43099: IFFALSE 43120
// points := [ 100 , 50 , 75 ] ;
43101: LD_ADDR_VAR 0 9
43105: PUSH
43106: LD_INT 100
43108: PUSH
43109: LD_INT 50
43111: PUSH
43112: LD_INT 75
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: LIST
43119: ST_TO_ADDR
// if GetClass ( i ) = 15 then
43120: LD_VAR 0 6
43124: PPUSH
43125: CALL_OW 257
43129: PUSH
43130: LD_INT 15
43132: EQUAL
43133: IFFALSE 43154
// points := [ 10 , 5 , 3 ] ;
43135: LD_ADDR_VAR 0 9
43139: PUSH
43140: LD_INT 10
43142: PUSH
43143: LD_INT 5
43145: PUSH
43146: LD_INT 3
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: ST_TO_ADDR
// if GetClass ( i ) = 14 then
43154: LD_VAR 0 6
43158: PPUSH
43159: CALL_OW 257
43163: PUSH
43164: LD_INT 14
43166: EQUAL
43167: IFFALSE 43188
// points := [ 10 , 0 , 0 ] ;
43169: LD_ADDR_VAR 0 9
43173: PUSH
43174: LD_INT 10
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: LIST
43187: ST_TO_ADDR
// if GetClass ( i ) = 11 then
43188: LD_VAR 0 6
43192: PPUSH
43193: CALL_OW 257
43197: PUSH
43198: LD_INT 11
43200: EQUAL
43201: IFFALSE 43222
// points := [ 30 , 10 , 5 ] ;
43203: LD_ADDR_VAR 0 9
43207: PUSH
43208: LD_INT 30
43210: PUSH
43211: LD_INT 10
43213: PUSH
43214: LD_INT 5
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
43222: LD_VAR 0 1
43226: PPUSH
43227: LD_INT 5
43229: PPUSH
43230: CALL_OW 321
43234: PUSH
43235: LD_INT 2
43237: EQUAL
43238: IFFALSE 43255
// bpoints := bpoints * 1.8 ;
43240: LD_ADDR_VAR 0 10
43244: PUSH
43245: LD_VAR 0 10
43249: PUSH
43250: LD_REAL  1.80000000000000E+0000
43253: MUL
43254: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
43255: LD_VAR 0 6
43259: PPUSH
43260: CALL_OW 257
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: LD_INT 4
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: IN
43283: PUSH
43284: LD_VAR 0 1
43288: PPUSH
43289: LD_INT 51
43291: PPUSH
43292: CALL_OW 321
43296: PUSH
43297: LD_INT 2
43299: EQUAL
43300: AND
43301: IFFALSE 43318
// bpoints := bpoints * 1.2 ;
43303: LD_ADDR_VAR 0 10
43307: PUSH
43308: LD_VAR 0 10
43312: PUSH
43313: LD_REAL  1.20000000000000E+0000
43316: MUL
43317: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
43318: LD_VAR 0 6
43322: PPUSH
43323: CALL_OW 257
43327: PUSH
43328: LD_INT 5
43330: PUSH
43331: LD_INT 7
43333: PUSH
43334: LD_INT 9
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: LIST
43341: IN
43342: PUSH
43343: LD_VAR 0 1
43347: PPUSH
43348: LD_INT 52
43350: PPUSH
43351: CALL_OW 321
43355: PUSH
43356: LD_INT 2
43358: EQUAL
43359: AND
43360: IFFALSE 43377
// bpoints := bpoints * 1.5 ;
43362: LD_ADDR_VAR 0 10
43366: PUSH
43367: LD_VAR 0 10
43371: PUSH
43372: LD_REAL  1.50000000000000E+0000
43375: MUL
43376: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
43377: LD_VAR 0 1
43381: PPUSH
43382: LD_INT 66
43384: PPUSH
43385: CALL_OW 321
43389: PUSH
43390: LD_INT 2
43392: EQUAL
43393: IFFALSE 43410
// bpoints := bpoints * 1.1 ;
43395: LD_ADDR_VAR 0 10
43399: PUSH
43400: LD_VAR 0 10
43404: PUSH
43405: LD_REAL  1.10000000000000E+0000
43408: MUL
43409: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
43410: LD_ADDR_VAR 0 10
43414: PUSH
43415: LD_VAR 0 10
43419: PUSH
43420: LD_VAR 0 6
43424: PPUSH
43425: LD_INT 1
43427: PPUSH
43428: CALL_OW 259
43432: PUSH
43433: LD_REAL  1.15000000000000E+0000
43436: MUL
43437: MUL
43438: ST_TO_ADDR
// end ; unit_vehicle :
43439: GO 44263
43441: LD_INT 2
43443: DOUBLE
43444: EQUAL
43445: IFTRUE 43449
43447: GO 44251
43449: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
43450: LD_VAR 0 6
43454: PPUSH
43455: CALL_OW 264
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 42
43465: PUSH
43466: LD_INT 24
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: LIST
43473: IN
43474: IFFALSE 43495
// points := [ 25 , 5 , 3 ] ;
43476: LD_ADDR_VAR 0 9
43480: PUSH
43481: LD_INT 25
43483: PUSH
43484: LD_INT 5
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
43495: LD_VAR 0 6
43499: PPUSH
43500: CALL_OW 264
43504: PUSH
43505: LD_INT 4
43507: PUSH
43508: LD_INT 43
43510: PUSH
43511: LD_INT 25
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: LIST
43518: IN
43519: IFFALSE 43540
// points := [ 40 , 15 , 5 ] ;
43521: LD_ADDR_VAR 0 9
43525: PUSH
43526: LD_INT 40
43528: PUSH
43529: LD_INT 15
43531: PUSH
43532: LD_INT 5
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
43540: LD_VAR 0 6
43544: PPUSH
43545: CALL_OW 264
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 23
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: IN
43560: IFFALSE 43581
// points := [ 7 , 25 , 8 ] ;
43562: LD_ADDR_VAR 0 9
43566: PUSH
43567: LD_INT 7
43569: PUSH
43570: LD_INT 25
43572: PUSH
43573: LD_INT 8
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
43581: LD_VAR 0 6
43585: PPUSH
43586: CALL_OW 264
43590: PUSH
43591: LD_INT 5
43593: PUSH
43594: LD_INT 27
43596: PUSH
43597: LD_INT 44
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: LIST
43604: IN
43605: IFFALSE 43626
// points := [ 14 , 50 , 16 ] ;
43607: LD_ADDR_VAR 0 9
43611: PUSH
43612: LD_INT 14
43614: PUSH
43615: LD_INT 50
43617: PUSH
43618: LD_INT 16
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
43626: LD_VAR 0 6
43630: PPUSH
43631: CALL_OW 264
43635: PUSH
43636: LD_INT 6
43638: PUSH
43639: LD_INT 46
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: IN
43646: IFFALSE 43667
// points := [ 32 , 120 , 70 ] ;
43648: LD_ADDR_VAR 0 9
43652: PUSH
43653: LD_INT 32
43655: PUSH
43656: LD_INT 120
43658: PUSH
43659: LD_INT 70
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
43667: LD_VAR 0 6
43671: PPUSH
43672: CALL_OW 264
43676: PUSH
43677: LD_INT 7
43679: PUSH
43680: LD_INT 28
43682: PUSH
43683: LD_INT 45
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: LIST
43690: IN
43691: IFFALSE 43712
// points := [ 35 , 20 , 45 ] ;
43693: LD_ADDR_VAR 0 9
43697: PUSH
43698: LD_INT 35
43700: PUSH
43701: LD_INT 20
43703: PUSH
43704: LD_INT 45
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: LIST
43711: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
43712: LD_VAR 0 6
43716: PPUSH
43717: CALL_OW 264
43721: PUSH
43722: LD_INT 47
43724: PUSH
43725: EMPTY
43726: LIST
43727: IN
43728: IFFALSE 43749
// points := [ 67 , 45 , 75 ] ;
43730: LD_ADDR_VAR 0 9
43734: PUSH
43735: LD_INT 67
43737: PUSH
43738: LD_INT 45
43740: PUSH
43741: LD_INT 75
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: LIST
43748: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
43749: LD_VAR 0 6
43753: PPUSH
43754: CALL_OW 264
43758: PUSH
43759: LD_INT 26
43761: PUSH
43762: EMPTY
43763: LIST
43764: IN
43765: IFFALSE 43786
// points := [ 120 , 30 , 80 ] ;
43767: LD_ADDR_VAR 0 9
43771: PUSH
43772: LD_INT 120
43774: PUSH
43775: LD_INT 30
43777: PUSH
43778: LD_INT 80
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
43786: LD_VAR 0 6
43790: PPUSH
43791: CALL_OW 264
43795: PUSH
43796: LD_INT 22
43798: PUSH
43799: EMPTY
43800: LIST
43801: IN
43802: IFFALSE 43823
// points := [ 40 , 1 , 1 ] ;
43804: LD_ADDR_VAR 0 9
43808: PUSH
43809: LD_INT 40
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: LIST
43822: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
43823: LD_VAR 0 6
43827: PPUSH
43828: CALL_OW 264
43832: PUSH
43833: LD_INT 29
43835: PUSH
43836: EMPTY
43837: LIST
43838: IN
43839: IFFALSE 43860
// points := [ 70 , 200 , 400 ] ;
43841: LD_ADDR_VAR 0 9
43845: PUSH
43846: LD_INT 70
43848: PUSH
43849: LD_INT 200
43851: PUSH
43852: LD_INT 400
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: LIST
43859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43860: LD_VAR 0 6
43864: PPUSH
43865: CALL_OW 264
43869: PUSH
43870: LD_INT 14
43872: PUSH
43873: LD_INT 53
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: IN
43880: IFFALSE 43901
// points := [ 40 , 10 , 20 ] ;
43882: LD_ADDR_VAR 0 9
43886: PUSH
43887: LD_INT 40
43889: PUSH
43890: LD_INT 10
43892: PUSH
43893: LD_INT 20
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43901: LD_VAR 0 6
43905: PPUSH
43906: CALL_OW 264
43910: PUSH
43911: LD_INT 9
43913: PUSH
43914: EMPTY
43915: LIST
43916: IN
43917: IFFALSE 43938
// points := [ 5 , 70 , 20 ] ;
43919: LD_ADDR_VAR 0 9
43923: PUSH
43924: LD_INT 5
43926: PUSH
43927: LD_INT 70
43929: PUSH
43930: LD_INT 20
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43938: LD_VAR 0 6
43942: PPUSH
43943: CALL_OW 264
43947: PUSH
43948: LD_INT 10
43950: PUSH
43951: EMPTY
43952: LIST
43953: IN
43954: IFFALSE 43975
// points := [ 35 , 110 , 70 ] ;
43956: LD_ADDR_VAR 0 9
43960: PUSH
43961: LD_INT 35
43963: PUSH
43964: LD_INT 110
43966: PUSH
43967: LD_INT 70
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: LIST
43974: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43975: LD_VAR 0 6
43979: PPUSH
43980: CALL_OW 265
43984: PUSH
43985: LD_INT 25
43987: EQUAL
43988: IFFALSE 44009
// points := [ 80 , 65 , 100 ] ;
43990: LD_ADDR_VAR 0 9
43994: PUSH
43995: LD_INT 80
43997: PUSH
43998: LD_INT 65
44000: PUSH
44001: LD_INT 100
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: LIST
44008: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
44009: LD_VAR 0 6
44013: PPUSH
44014: CALL_OW 263
44018: PUSH
44019: LD_INT 1
44021: EQUAL
44022: IFFALSE 44057
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
44024: LD_ADDR_VAR 0 10
44028: PUSH
44029: LD_VAR 0 10
44033: PUSH
44034: LD_VAR 0 6
44038: PPUSH
44039: CALL_OW 311
44043: PPUSH
44044: LD_INT 3
44046: PPUSH
44047: CALL_OW 259
44051: PUSH
44052: LD_INT 4
44054: MUL
44055: MUL
44056: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
44057: LD_VAR 0 6
44061: PPUSH
44062: CALL_OW 263
44066: PUSH
44067: LD_INT 2
44069: EQUAL
44070: IFFALSE 44121
// begin j := IsControledBy ( i ) ;
44072: LD_ADDR_VAR 0 7
44076: PUSH
44077: LD_VAR 0 6
44081: PPUSH
44082: CALL_OW 312
44086: ST_TO_ADDR
// if j then
44087: LD_VAR 0 7
44091: IFFALSE 44121
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
44093: LD_ADDR_VAR 0 10
44097: PUSH
44098: LD_VAR 0 10
44102: PUSH
44103: LD_VAR 0 7
44107: PPUSH
44108: LD_INT 3
44110: PPUSH
44111: CALL_OW 259
44115: PUSH
44116: LD_INT 3
44118: MUL
44119: MUL
44120: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
44121: LD_VAR 0 6
44125: PPUSH
44126: CALL_OW 264
44130: PUSH
44131: LD_INT 5
44133: PUSH
44134: LD_INT 6
44136: PUSH
44137: LD_INT 46
44139: PUSH
44140: LD_INT 44
44142: PUSH
44143: LD_INT 47
44145: PUSH
44146: LD_INT 45
44148: PUSH
44149: LD_INT 28
44151: PUSH
44152: LD_INT 7
44154: PUSH
44155: LD_INT 27
44157: PUSH
44158: LD_INT 29
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: IN
44173: PUSH
44174: LD_VAR 0 1
44178: PPUSH
44179: LD_INT 52
44181: PPUSH
44182: CALL_OW 321
44186: PUSH
44187: LD_INT 2
44189: EQUAL
44190: AND
44191: IFFALSE 44208
// bpoints := bpoints * 1.2 ;
44193: LD_ADDR_VAR 0 10
44197: PUSH
44198: LD_VAR 0 10
44202: PUSH
44203: LD_REAL  1.20000000000000E+0000
44206: MUL
44207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
44208: LD_VAR 0 6
44212: PPUSH
44213: CALL_OW 264
44217: PUSH
44218: LD_INT 6
44220: PUSH
44221: LD_INT 46
44223: PUSH
44224: LD_INT 47
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: LIST
44231: IN
44232: IFFALSE 44249
// bpoints := bpoints * 1.2 ;
44234: LD_ADDR_VAR 0 10
44238: PUSH
44239: LD_VAR 0 10
44243: PUSH
44244: LD_REAL  1.20000000000000E+0000
44247: MUL
44248: ST_TO_ADDR
// end ; unit_building :
44249: GO 44263
44251: LD_INT 3
44253: DOUBLE
44254: EQUAL
44255: IFTRUE 44259
44257: GO 44262
44259: POP
// ; end ;
44260: GO 44263
44262: POP
// for j = 1 to 3 do
44263: LD_ADDR_VAR 0 7
44267: PUSH
44268: DOUBLE
44269: LD_INT 1
44271: DEC
44272: ST_TO_ADDR
44273: LD_INT 3
44275: PUSH
44276: FOR_TO
44277: IFFALSE 44330
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
44279: LD_ADDR_VAR 0 5
44283: PUSH
44284: LD_VAR 0 5
44288: PPUSH
44289: LD_VAR 0 7
44293: PPUSH
44294: LD_VAR 0 5
44298: PUSH
44299: LD_VAR 0 7
44303: ARRAY
44304: PUSH
44305: LD_VAR 0 9
44309: PUSH
44310: LD_VAR 0 7
44314: ARRAY
44315: PUSH
44316: LD_VAR 0 10
44320: MUL
44321: PLUS
44322: PPUSH
44323: CALL_OW 1
44327: ST_TO_ADDR
44328: GO 44276
44330: POP
44331: POP
// end ;
44332: GO 42815
44334: POP
44335: POP
// result := Replace ( result , 4 , tmp ) ;
44336: LD_ADDR_VAR 0 5
44340: PUSH
44341: LD_VAR 0 5
44345: PPUSH
44346: LD_INT 4
44348: PPUSH
44349: LD_VAR 0 8
44353: PPUSH
44354: CALL_OW 1
44358: ST_TO_ADDR
// end ;
44359: LD_VAR 0 5
44363: RET
// export function DangerAtRange ( unit , range ) ; begin
44364: LD_INT 0
44366: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
44367: LD_ADDR_VAR 0 3
44371: PUSH
44372: LD_VAR 0 1
44376: PPUSH
44377: CALL_OW 255
44381: PPUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: CALL_OW 250
44391: PPUSH
44392: LD_VAR 0 1
44396: PPUSH
44397: CALL_OW 251
44401: PPUSH
44402: LD_VAR 0 2
44406: PPUSH
44407: CALL 42667 0 4
44411: ST_TO_ADDR
// end ;
44412: LD_VAR 0 3
44416: RET
// export function DangerInArea ( side , area ) ; begin
44417: LD_INT 0
44419: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
44420: LD_ADDR_VAR 0 3
44424: PUSH
44425: LD_VAR 0 2
44429: PPUSH
44430: LD_INT 81
44432: PUSH
44433: LD_VAR 0 1
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PPUSH
44442: CALL_OW 70
44446: ST_TO_ADDR
// end ;
44447: LD_VAR 0 3
44451: RET
// export function IsExtension ( b ) ; begin
44452: LD_INT 0
44454: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
44455: LD_ADDR_VAR 0 2
44459: PUSH
44460: LD_VAR 0 1
44464: PUSH
44465: LD_INT 23
44467: PUSH
44468: LD_INT 20
44470: PUSH
44471: LD_INT 22
44473: PUSH
44474: LD_INT 17
44476: PUSH
44477: LD_INT 24
44479: PUSH
44480: LD_INT 21
44482: PUSH
44483: LD_INT 19
44485: PUSH
44486: LD_INT 16
44488: PUSH
44489: LD_INT 25
44491: PUSH
44492: LD_INT 18
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: IN
44507: ST_TO_ADDR
// end ;
44508: LD_VAR 0 2
44512: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
44513: LD_INT 0
44515: PPUSH
44516: PPUSH
44517: PPUSH
// result := [ ] ;
44518: LD_ADDR_VAR 0 3
44522: PUSH
44523: EMPTY
44524: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
44525: LD_ADDR_VAR 0 4
44529: PUSH
44530: LD_VAR 0 2
44534: PPUSH
44535: LD_INT 21
44537: PUSH
44538: LD_INT 3
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PPUSH
44545: CALL_OW 70
44549: ST_TO_ADDR
// if not tmp then
44550: LD_VAR 0 4
44554: NOT
44555: IFFALSE 44559
// exit ;
44557: GO 44617
// for i in tmp do
44559: LD_ADDR_VAR 0 5
44563: PUSH
44564: LD_VAR 0 4
44568: PUSH
44569: FOR_IN
44570: IFFALSE 44605
// if GetBase ( i ) <> base then
44572: LD_VAR 0 5
44576: PPUSH
44577: CALL_OW 274
44581: PUSH
44582: LD_VAR 0 1
44586: NONEQUAL
44587: IFFALSE 44603
// ComLinkToBase ( base , i ) ;
44589: LD_VAR 0 1
44593: PPUSH
44594: LD_VAR 0 5
44598: PPUSH
44599: CALL_OW 169
44603: GO 44569
44605: POP
44606: POP
// result := tmp ;
44607: LD_ADDR_VAR 0 3
44611: PUSH
44612: LD_VAR 0 4
44616: ST_TO_ADDR
// end ;
44617: LD_VAR 0 3
44621: RET
// export function ComComplete ( unit , b ) ; var i ; begin
44622: LD_INT 0
44624: PPUSH
44625: PPUSH
// if BuildingStatus ( b ) = bs_build then
44626: LD_VAR 0 2
44630: PPUSH
44631: CALL_OW 461
44635: PUSH
44636: LD_INT 1
44638: EQUAL
44639: IFFALSE 44699
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
44641: LD_VAR 0 1
44645: PPUSH
44646: LD_STRING h
44648: PUSH
44649: LD_VAR 0 2
44653: PPUSH
44654: CALL_OW 250
44658: PUSH
44659: LD_VAR 0 2
44663: PPUSH
44664: CALL_OW 251
44668: PUSH
44669: LD_VAR 0 2
44673: PUSH
44674: LD_INT 0
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: PPUSH
44695: CALL_OW 446
// end ;
44699: LD_VAR 0 3
44703: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
44704: LD_INT 0
44706: PPUSH
44707: PPUSH
44708: PPUSH
44709: PPUSH
44710: PPUSH
44711: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
44712: LD_VAR 0 1
44716: NOT
44717: PUSH
44718: LD_VAR 0 1
44722: PPUSH
44723: CALL_OW 263
44727: PUSH
44728: LD_INT 2
44730: EQUAL
44731: NOT
44732: OR
44733: IFFALSE 44737
// exit ;
44735: GO 45053
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
44737: LD_ADDR_VAR 0 6
44741: PUSH
44742: LD_INT 22
44744: PUSH
44745: LD_VAR 0 1
44749: PPUSH
44750: CALL_OW 255
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 30
44764: PUSH
44765: LD_INT 36
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 34
44774: PUSH
44775: LD_INT 31
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PPUSH
44791: CALL_OW 69
44795: ST_TO_ADDR
// if not tmp then
44796: LD_VAR 0 6
44800: NOT
44801: IFFALSE 44805
// exit ;
44803: GO 45053
// result := [ ] ;
44805: LD_ADDR_VAR 0 2
44809: PUSH
44810: EMPTY
44811: ST_TO_ADDR
// for i in tmp do
44812: LD_ADDR_VAR 0 3
44816: PUSH
44817: LD_VAR 0 6
44821: PUSH
44822: FOR_IN
44823: IFFALSE 44894
// begin t := UnitsInside ( i ) ;
44825: LD_ADDR_VAR 0 4
44829: PUSH
44830: LD_VAR 0 3
44834: PPUSH
44835: CALL_OW 313
44839: ST_TO_ADDR
// if t then
44840: LD_VAR 0 4
44844: IFFALSE 44892
// for j in t do
44846: LD_ADDR_VAR 0 7
44850: PUSH
44851: LD_VAR 0 4
44855: PUSH
44856: FOR_IN
44857: IFFALSE 44890
// result := Insert ( result , result + 1 , j ) ;
44859: LD_ADDR_VAR 0 2
44863: PUSH
44864: LD_VAR 0 2
44868: PPUSH
44869: LD_VAR 0 2
44873: PUSH
44874: LD_INT 1
44876: PLUS
44877: PPUSH
44878: LD_VAR 0 7
44882: PPUSH
44883: CALL_OW 2
44887: ST_TO_ADDR
44888: GO 44856
44890: POP
44891: POP
// end ;
44892: GO 44822
44894: POP
44895: POP
// if not result then
44896: LD_VAR 0 2
44900: NOT
44901: IFFALSE 44905
// exit ;
44903: GO 45053
// mech := result [ 1 ] ;
44905: LD_ADDR_VAR 0 5
44909: PUSH
44910: LD_VAR 0 2
44914: PUSH
44915: LD_INT 1
44917: ARRAY
44918: ST_TO_ADDR
// if result > 1 then
44919: LD_VAR 0 2
44923: PUSH
44924: LD_INT 1
44926: GREATER
44927: IFFALSE 45039
// for i = 2 to result do
44929: LD_ADDR_VAR 0 3
44933: PUSH
44934: DOUBLE
44935: LD_INT 2
44937: DEC
44938: ST_TO_ADDR
44939: LD_VAR 0 2
44943: PUSH
44944: FOR_TO
44945: IFFALSE 45037
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44947: LD_ADDR_VAR 0 4
44951: PUSH
44952: LD_VAR 0 2
44956: PUSH
44957: LD_VAR 0 3
44961: ARRAY
44962: PPUSH
44963: LD_INT 3
44965: PPUSH
44966: CALL_OW 259
44970: PUSH
44971: LD_VAR 0 2
44975: PUSH
44976: LD_VAR 0 3
44980: ARRAY
44981: PPUSH
44982: CALL_OW 432
44986: MINUS
44987: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44988: LD_VAR 0 4
44992: PUSH
44993: LD_VAR 0 5
44997: PPUSH
44998: LD_INT 3
45000: PPUSH
45001: CALL_OW 259
45005: PUSH
45006: LD_VAR 0 5
45010: PPUSH
45011: CALL_OW 432
45015: MINUS
45016: GREATEREQUAL
45017: IFFALSE 45035
// mech := result [ i ] ;
45019: LD_ADDR_VAR 0 5
45023: PUSH
45024: LD_VAR 0 2
45028: PUSH
45029: LD_VAR 0 3
45033: ARRAY
45034: ST_TO_ADDR
// end ;
45035: GO 44944
45037: POP
45038: POP
// ComLinkTo ( vehicle , mech ) ;
45039: LD_VAR 0 1
45043: PPUSH
45044: LD_VAR 0 5
45048: PPUSH
45049: CALL_OW 135
// end ;
45053: LD_VAR 0 2
45057: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
45058: LD_INT 0
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
// result := [ ] ;
45073: LD_ADDR_VAR 0 7
45077: PUSH
45078: EMPTY
45079: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
45080: LD_VAR 0 1
45084: PPUSH
45085: CALL_OW 266
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: IN
45100: NOT
45101: IFFALSE 45105
// exit ;
45103: GO 46736
// if name then
45105: LD_VAR 0 3
45109: IFFALSE 45125
// SetBName ( base_dep , name ) ;
45111: LD_VAR 0 1
45115: PPUSH
45116: LD_VAR 0 3
45120: PPUSH
45121: CALL_OW 500
// base := GetBase ( base_dep ) ;
45125: LD_ADDR_VAR 0 15
45129: PUSH
45130: LD_VAR 0 1
45134: PPUSH
45135: CALL_OW 274
45139: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
45140: LD_ADDR_VAR 0 16
45144: PUSH
45145: LD_VAR 0 1
45149: PPUSH
45150: CALL_OW 255
45154: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
45155: LD_ADDR_VAR 0 17
45159: PUSH
45160: LD_VAR 0 1
45164: PPUSH
45165: CALL_OW 248
45169: ST_TO_ADDR
// if sources then
45170: LD_VAR 0 5
45174: IFFALSE 45221
// for i = 1 to 3 do
45176: LD_ADDR_VAR 0 8
45180: PUSH
45181: DOUBLE
45182: LD_INT 1
45184: DEC
45185: ST_TO_ADDR
45186: LD_INT 3
45188: PUSH
45189: FOR_TO
45190: IFFALSE 45219
// AddResourceType ( base , i , sources [ i ] ) ;
45192: LD_VAR 0 15
45196: PPUSH
45197: LD_VAR 0 8
45201: PPUSH
45202: LD_VAR 0 5
45206: PUSH
45207: LD_VAR 0 8
45211: ARRAY
45212: PPUSH
45213: CALL_OW 276
45217: GO 45189
45219: POP
45220: POP
// buildings := GetBaseBuildings ( base , area ) ;
45221: LD_ADDR_VAR 0 18
45225: PUSH
45226: LD_VAR 0 15
45230: PPUSH
45231: LD_VAR 0 2
45235: PPUSH
45236: CALL 44513 0 2
45240: ST_TO_ADDR
// InitHc ;
45241: CALL_OW 19
// InitUc ;
45245: CALL_OW 18
// uc_side := side ;
45249: LD_ADDR_OWVAR 20
45253: PUSH
45254: LD_VAR 0 16
45258: ST_TO_ADDR
// uc_nation := nation ;
45259: LD_ADDR_OWVAR 21
45263: PUSH
45264: LD_VAR 0 17
45268: ST_TO_ADDR
// if buildings then
45269: LD_VAR 0 18
45273: IFFALSE 46595
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
45275: LD_ADDR_VAR 0 19
45279: PUSH
45280: LD_VAR 0 18
45284: PPUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 30
45290: PUSH
45291: LD_INT 29
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 30
45300: PUSH
45301: LD_INT 30
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: LIST
45312: PPUSH
45313: CALL_OW 72
45317: ST_TO_ADDR
// if tmp then
45318: LD_VAR 0 19
45322: IFFALSE 45370
// for i in tmp do
45324: LD_ADDR_VAR 0 8
45328: PUSH
45329: LD_VAR 0 19
45333: PUSH
45334: FOR_IN
45335: IFFALSE 45368
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
45337: LD_VAR 0 8
45341: PPUSH
45342: CALL_OW 250
45346: PPUSH
45347: LD_VAR 0 8
45351: PPUSH
45352: CALL_OW 251
45356: PPUSH
45357: LD_VAR 0 16
45361: PPUSH
45362: CALL_OW 441
45366: GO 45334
45368: POP
45369: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
45370: LD_VAR 0 18
45374: PPUSH
45375: LD_INT 2
45377: PUSH
45378: LD_INT 30
45380: PUSH
45381: LD_INT 32
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 30
45390: PUSH
45391: LD_INT 33
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: LIST
45402: PPUSH
45403: CALL_OW 72
45407: IFFALSE 45495
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
45409: LD_ADDR_VAR 0 8
45413: PUSH
45414: LD_VAR 0 18
45418: PPUSH
45419: LD_INT 2
45421: PUSH
45422: LD_INT 30
45424: PUSH
45425: LD_INT 32
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 30
45434: PUSH
45435: LD_INT 33
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: PPUSH
45447: CALL_OW 72
45451: PUSH
45452: FOR_IN
45453: IFFALSE 45493
// begin if not GetBWeapon ( i ) then
45455: LD_VAR 0 8
45459: PPUSH
45460: CALL_OW 269
45464: NOT
45465: IFFALSE 45491
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
45467: LD_VAR 0 8
45471: PPUSH
45472: LD_VAR 0 8
45476: PPUSH
45477: LD_VAR 0 2
45481: PPUSH
45482: CALL 46741 0 2
45486: PPUSH
45487: CALL_OW 431
// end ;
45491: GO 45452
45493: POP
45494: POP
// end ; for i = 1 to personel do
45495: LD_ADDR_VAR 0 8
45499: PUSH
45500: DOUBLE
45501: LD_INT 1
45503: DEC
45504: ST_TO_ADDR
45505: LD_VAR 0 6
45509: PUSH
45510: FOR_TO
45511: IFFALSE 46575
// begin if i > 4 then
45513: LD_VAR 0 8
45517: PUSH
45518: LD_INT 4
45520: GREATER
45521: IFFALSE 45525
// break ;
45523: GO 46575
// case i of 1 :
45525: LD_VAR 0 8
45529: PUSH
45530: LD_INT 1
45532: DOUBLE
45533: EQUAL
45534: IFTRUE 45538
45536: GO 45618
45538: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
45539: LD_ADDR_VAR 0 12
45543: PUSH
45544: LD_VAR 0 18
45548: PPUSH
45549: LD_INT 22
45551: PUSH
45552: LD_VAR 0 16
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 58
45563: PUSH
45564: EMPTY
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 30
45572: PUSH
45573: LD_INT 32
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 30
45582: PUSH
45583: LD_INT 4
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 30
45592: PUSH
45593: LD_INT 5
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: PPUSH
45611: CALL_OW 72
45615: ST_TO_ADDR
45616: GO 45840
45618: LD_INT 2
45620: DOUBLE
45621: EQUAL
45622: IFTRUE 45626
45624: GO 45688
45626: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
45627: LD_ADDR_VAR 0 12
45631: PUSH
45632: LD_VAR 0 18
45636: PPUSH
45637: LD_INT 22
45639: PUSH
45640: LD_VAR 0 16
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: LD_INT 30
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 30
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PPUSH
45681: CALL_OW 72
45685: ST_TO_ADDR
45686: GO 45840
45688: LD_INT 3
45690: DOUBLE
45691: EQUAL
45692: IFTRUE 45696
45694: GO 45758
45696: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
45697: LD_ADDR_VAR 0 12
45701: PUSH
45702: LD_VAR 0 18
45706: PPUSH
45707: LD_INT 22
45709: PUSH
45710: LD_VAR 0 16
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 30
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 30
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: LIST
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PPUSH
45751: CALL_OW 72
45755: ST_TO_ADDR
45756: GO 45840
45758: LD_INT 4
45760: DOUBLE
45761: EQUAL
45762: IFTRUE 45766
45764: GO 45839
45766: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
45767: LD_ADDR_VAR 0 12
45771: PUSH
45772: LD_VAR 0 18
45776: PPUSH
45777: LD_INT 22
45779: PUSH
45780: LD_VAR 0 16
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 30
45794: PUSH
45795: LD_INT 6
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 30
45804: PUSH
45805: LD_INT 7
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 30
45814: PUSH
45815: LD_INT 8
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PPUSH
45832: CALL_OW 72
45836: ST_TO_ADDR
45837: GO 45840
45839: POP
// if i = 1 then
45840: LD_VAR 0 8
45844: PUSH
45845: LD_INT 1
45847: EQUAL
45848: IFFALSE 45959
// begin tmp := [ ] ;
45850: LD_ADDR_VAR 0 19
45854: PUSH
45855: EMPTY
45856: ST_TO_ADDR
// for j in f do
45857: LD_ADDR_VAR 0 9
45861: PUSH
45862: LD_VAR 0 12
45866: PUSH
45867: FOR_IN
45868: IFFALSE 45941
// if GetBType ( j ) = b_bunker then
45870: LD_VAR 0 9
45874: PPUSH
45875: CALL_OW 266
45879: PUSH
45880: LD_INT 32
45882: EQUAL
45883: IFFALSE 45910
// tmp := Insert ( tmp , 1 , j ) else
45885: LD_ADDR_VAR 0 19
45889: PUSH
45890: LD_VAR 0 19
45894: PPUSH
45895: LD_INT 1
45897: PPUSH
45898: LD_VAR 0 9
45902: PPUSH
45903: CALL_OW 2
45907: ST_TO_ADDR
45908: GO 45939
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45910: LD_ADDR_VAR 0 19
45914: PUSH
45915: LD_VAR 0 19
45919: PPUSH
45920: LD_VAR 0 19
45924: PUSH
45925: LD_INT 1
45927: PLUS
45928: PPUSH
45929: LD_VAR 0 9
45933: PPUSH
45934: CALL_OW 2
45938: ST_TO_ADDR
45939: GO 45867
45941: POP
45942: POP
// if tmp then
45943: LD_VAR 0 19
45947: IFFALSE 45959
// f := tmp ;
45949: LD_ADDR_VAR 0 12
45953: PUSH
45954: LD_VAR 0 19
45958: ST_TO_ADDR
// end ; x := personel [ i ] ;
45959: LD_ADDR_VAR 0 13
45963: PUSH
45964: LD_VAR 0 6
45968: PUSH
45969: LD_VAR 0 8
45973: ARRAY
45974: ST_TO_ADDR
// if x = - 1 then
45975: LD_VAR 0 13
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: EQUAL
45984: IFFALSE 46193
// begin for j in f do
45986: LD_ADDR_VAR 0 9
45990: PUSH
45991: LD_VAR 0 12
45995: PUSH
45996: FOR_IN
45997: IFFALSE 46189
// repeat InitHc ;
45999: CALL_OW 19
// if GetBType ( j ) = b_barracks then
46003: LD_VAR 0 9
46007: PPUSH
46008: CALL_OW 266
46012: PUSH
46013: LD_INT 5
46015: EQUAL
46016: IFFALSE 46086
// begin if UnitsInside ( j ) < 3 then
46018: LD_VAR 0 9
46022: PPUSH
46023: CALL_OW 313
46027: PUSH
46028: LD_INT 3
46030: LESS
46031: IFFALSE 46067
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46033: LD_INT 0
46035: PPUSH
46036: LD_INT 5
46038: PUSH
46039: LD_INT 8
46041: PUSH
46042: LD_INT 9
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: PUSH
46050: LD_VAR 0 17
46054: ARRAY
46055: PPUSH
46056: LD_VAR 0 4
46060: PPUSH
46061: CALL_OW 380
46065: GO 46084
// PrepareHuman ( false , i , skill ) ;
46067: LD_INT 0
46069: PPUSH
46070: LD_VAR 0 8
46074: PPUSH
46075: LD_VAR 0 4
46079: PPUSH
46080: CALL_OW 380
// end else
46084: GO 46103
// PrepareHuman ( false , i , skill ) ;
46086: LD_INT 0
46088: PPUSH
46089: LD_VAR 0 8
46093: PPUSH
46094: LD_VAR 0 4
46098: PPUSH
46099: CALL_OW 380
// un := CreateHuman ;
46103: LD_ADDR_VAR 0 14
46107: PUSH
46108: CALL_OW 44
46112: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46113: LD_ADDR_VAR 0 7
46117: PUSH
46118: LD_VAR 0 7
46122: PPUSH
46123: LD_INT 1
46125: PPUSH
46126: LD_VAR 0 14
46130: PPUSH
46131: CALL_OW 2
46135: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
46136: LD_VAR 0 14
46140: PPUSH
46141: LD_VAR 0 9
46145: PPUSH
46146: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
46150: LD_VAR 0 9
46154: PPUSH
46155: CALL_OW 313
46159: PUSH
46160: LD_INT 6
46162: EQUAL
46163: PUSH
46164: LD_VAR 0 9
46168: PPUSH
46169: CALL_OW 266
46173: PUSH
46174: LD_INT 32
46176: PUSH
46177: LD_INT 31
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: IN
46184: OR
46185: IFFALSE 45999
46187: GO 45996
46189: POP
46190: POP
// end else
46191: GO 46573
// for j = 1 to x do
46193: LD_ADDR_VAR 0 9
46197: PUSH
46198: DOUBLE
46199: LD_INT 1
46201: DEC
46202: ST_TO_ADDR
46203: LD_VAR 0 13
46207: PUSH
46208: FOR_TO
46209: IFFALSE 46571
// begin InitHc ;
46211: CALL_OW 19
// if not f then
46215: LD_VAR 0 12
46219: NOT
46220: IFFALSE 46309
// begin PrepareHuman ( false , i , skill ) ;
46222: LD_INT 0
46224: PPUSH
46225: LD_VAR 0 8
46229: PPUSH
46230: LD_VAR 0 4
46234: PPUSH
46235: CALL_OW 380
// un := CreateHuman ;
46239: LD_ADDR_VAR 0 14
46243: PUSH
46244: CALL_OW 44
46248: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46249: LD_ADDR_VAR 0 7
46253: PUSH
46254: LD_VAR 0 7
46258: PPUSH
46259: LD_INT 1
46261: PPUSH
46262: LD_VAR 0 14
46266: PPUSH
46267: CALL_OW 2
46271: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46272: LD_VAR 0 14
46276: PPUSH
46277: LD_VAR 0 1
46281: PPUSH
46282: CALL_OW 250
46286: PPUSH
46287: LD_VAR 0 1
46291: PPUSH
46292: CALL_OW 251
46296: PPUSH
46297: LD_INT 10
46299: PPUSH
46300: LD_INT 0
46302: PPUSH
46303: CALL_OW 50
// continue ;
46307: GO 46208
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
46309: LD_VAR 0 12
46313: PUSH
46314: LD_INT 1
46316: ARRAY
46317: PPUSH
46318: CALL_OW 313
46322: PUSH
46323: LD_VAR 0 12
46327: PUSH
46328: LD_INT 1
46330: ARRAY
46331: PPUSH
46332: CALL_OW 266
46336: PUSH
46337: LD_INT 32
46339: PUSH
46340: LD_INT 31
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: IN
46347: AND
46348: PUSH
46349: LD_VAR 0 12
46353: PUSH
46354: LD_INT 1
46356: ARRAY
46357: PPUSH
46358: CALL_OW 313
46362: PUSH
46363: LD_INT 6
46365: EQUAL
46366: OR
46367: IFFALSE 46387
// f := Delete ( f , 1 ) ;
46369: LD_ADDR_VAR 0 12
46373: PUSH
46374: LD_VAR 0 12
46378: PPUSH
46379: LD_INT 1
46381: PPUSH
46382: CALL_OW 3
46386: ST_TO_ADDR
// if not f then
46387: LD_VAR 0 12
46391: NOT
46392: IFFALSE 46410
// begin x := x + 2 ;
46394: LD_ADDR_VAR 0 13
46398: PUSH
46399: LD_VAR 0 13
46403: PUSH
46404: LD_INT 2
46406: PLUS
46407: ST_TO_ADDR
// continue ;
46408: GO 46208
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
46410: LD_VAR 0 12
46414: PUSH
46415: LD_INT 1
46417: ARRAY
46418: PPUSH
46419: CALL_OW 266
46423: PUSH
46424: LD_INT 5
46426: EQUAL
46427: IFFALSE 46501
// begin if UnitsInside ( f [ 1 ] ) < 3 then
46429: LD_VAR 0 12
46433: PUSH
46434: LD_INT 1
46436: ARRAY
46437: PPUSH
46438: CALL_OW 313
46442: PUSH
46443: LD_INT 3
46445: LESS
46446: IFFALSE 46482
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
46448: LD_INT 0
46450: PPUSH
46451: LD_INT 5
46453: PUSH
46454: LD_INT 8
46456: PUSH
46457: LD_INT 9
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: LIST
46464: PUSH
46465: LD_VAR 0 17
46469: ARRAY
46470: PPUSH
46471: LD_VAR 0 4
46475: PPUSH
46476: CALL_OW 380
46480: GO 46499
// PrepareHuman ( false , i , skill ) ;
46482: LD_INT 0
46484: PPUSH
46485: LD_VAR 0 8
46489: PPUSH
46490: LD_VAR 0 4
46494: PPUSH
46495: CALL_OW 380
// end else
46499: GO 46518
// PrepareHuman ( false , i , skill ) ;
46501: LD_INT 0
46503: PPUSH
46504: LD_VAR 0 8
46508: PPUSH
46509: LD_VAR 0 4
46513: PPUSH
46514: CALL_OW 380
// un := CreateHuman ;
46518: LD_ADDR_VAR 0 14
46522: PUSH
46523: CALL_OW 44
46527: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
46528: LD_ADDR_VAR 0 7
46532: PUSH
46533: LD_VAR 0 7
46537: PPUSH
46538: LD_INT 1
46540: PPUSH
46541: LD_VAR 0 14
46545: PPUSH
46546: CALL_OW 2
46550: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
46551: LD_VAR 0 14
46555: PPUSH
46556: LD_VAR 0 12
46560: PUSH
46561: LD_INT 1
46563: ARRAY
46564: PPUSH
46565: CALL_OW 52
// end ;
46569: GO 46208
46571: POP
46572: POP
// end ;
46573: GO 45510
46575: POP
46576: POP
// result := result ^ buildings ;
46577: LD_ADDR_VAR 0 7
46581: PUSH
46582: LD_VAR 0 7
46586: PUSH
46587: LD_VAR 0 18
46591: ADD
46592: ST_TO_ADDR
// end else
46593: GO 46736
// begin for i = 1 to personel do
46595: LD_ADDR_VAR 0 8
46599: PUSH
46600: DOUBLE
46601: LD_INT 1
46603: DEC
46604: ST_TO_ADDR
46605: LD_VAR 0 6
46609: PUSH
46610: FOR_TO
46611: IFFALSE 46734
// begin if i > 4 then
46613: LD_VAR 0 8
46617: PUSH
46618: LD_INT 4
46620: GREATER
46621: IFFALSE 46625
// break ;
46623: GO 46734
// x := personel [ i ] ;
46625: LD_ADDR_VAR 0 13
46629: PUSH
46630: LD_VAR 0 6
46634: PUSH
46635: LD_VAR 0 8
46639: ARRAY
46640: ST_TO_ADDR
// if x = - 1 then
46641: LD_VAR 0 13
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: EQUAL
46650: IFFALSE 46654
// continue ;
46652: GO 46610
// PrepareHuman ( false , i , skill ) ;
46654: LD_INT 0
46656: PPUSH
46657: LD_VAR 0 8
46661: PPUSH
46662: LD_VAR 0 4
46666: PPUSH
46667: CALL_OW 380
// un := CreateHuman ;
46671: LD_ADDR_VAR 0 14
46675: PUSH
46676: CALL_OW 44
46680: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
46681: LD_VAR 0 14
46685: PPUSH
46686: LD_VAR 0 1
46690: PPUSH
46691: CALL_OW 250
46695: PPUSH
46696: LD_VAR 0 1
46700: PPUSH
46701: CALL_OW 251
46705: PPUSH
46706: LD_INT 10
46708: PPUSH
46709: LD_INT 0
46711: PPUSH
46712: CALL_OW 50
// result := result ^ un ;
46716: LD_ADDR_VAR 0 7
46720: PUSH
46721: LD_VAR 0 7
46725: PUSH
46726: LD_VAR 0 14
46730: ADD
46731: ST_TO_ADDR
// end ;
46732: GO 46610
46734: POP
46735: POP
// end ; end ;
46736: LD_VAR 0 7
46740: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
46741: LD_INT 0
46743: PPUSH
46744: PPUSH
46745: PPUSH
46746: PPUSH
46747: PPUSH
46748: PPUSH
46749: PPUSH
46750: PPUSH
46751: PPUSH
46752: PPUSH
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
// result := false ;
46759: LD_ADDR_VAR 0 3
46763: PUSH
46764: LD_INT 0
46766: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
46767: LD_VAR 0 1
46771: NOT
46772: PUSH
46773: LD_VAR 0 1
46777: PPUSH
46778: CALL_OW 266
46782: PUSH
46783: LD_INT 32
46785: PUSH
46786: LD_INT 33
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: IN
46793: NOT
46794: OR
46795: IFFALSE 46799
// exit ;
46797: GO 47935
// nat := GetNation ( tower ) ;
46799: LD_ADDR_VAR 0 12
46803: PUSH
46804: LD_VAR 0 1
46808: PPUSH
46809: CALL_OW 248
46813: ST_TO_ADDR
// side := GetSide ( tower ) ;
46814: LD_ADDR_VAR 0 16
46818: PUSH
46819: LD_VAR 0 1
46823: PPUSH
46824: CALL_OW 255
46828: ST_TO_ADDR
// x := GetX ( tower ) ;
46829: LD_ADDR_VAR 0 10
46833: PUSH
46834: LD_VAR 0 1
46838: PPUSH
46839: CALL_OW 250
46843: ST_TO_ADDR
// y := GetY ( tower ) ;
46844: LD_ADDR_VAR 0 11
46848: PUSH
46849: LD_VAR 0 1
46853: PPUSH
46854: CALL_OW 251
46858: ST_TO_ADDR
// if not x or not y then
46859: LD_VAR 0 10
46863: NOT
46864: PUSH
46865: LD_VAR 0 11
46869: NOT
46870: OR
46871: IFFALSE 46875
// exit ;
46873: GO 47935
// weapon := 0 ;
46875: LD_ADDR_VAR 0 18
46879: PUSH
46880: LD_INT 0
46882: ST_TO_ADDR
// fac_list := [ ] ;
46883: LD_ADDR_VAR 0 17
46887: PUSH
46888: EMPTY
46889: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
46890: LD_ADDR_VAR 0 6
46894: PUSH
46895: LD_VAR 0 1
46899: PPUSH
46900: CALL_OW 274
46904: PPUSH
46905: LD_VAR 0 2
46909: PPUSH
46910: CALL 44513 0 2
46914: PPUSH
46915: LD_INT 30
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PPUSH
46925: CALL_OW 72
46929: ST_TO_ADDR
// if not factories then
46930: LD_VAR 0 6
46934: NOT
46935: IFFALSE 46939
// exit ;
46937: GO 47935
// for i in factories do
46939: LD_ADDR_VAR 0 8
46943: PUSH
46944: LD_VAR 0 6
46948: PUSH
46949: FOR_IN
46950: IFFALSE 46975
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46952: LD_ADDR_VAR 0 17
46956: PUSH
46957: LD_VAR 0 17
46961: PUSH
46962: LD_VAR 0 8
46966: PPUSH
46967: CALL_OW 478
46971: UNION
46972: ST_TO_ADDR
46973: GO 46949
46975: POP
46976: POP
// if not fac_list then
46977: LD_VAR 0 17
46981: NOT
46982: IFFALSE 46986
// exit ;
46984: GO 47935
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46986: LD_ADDR_VAR 0 5
46990: PUSH
46991: LD_INT 4
46993: PUSH
46994: LD_INT 5
46996: PUSH
46997: LD_INT 9
46999: PUSH
47000: LD_INT 10
47002: PUSH
47003: LD_INT 6
47005: PUSH
47006: LD_INT 7
47008: PUSH
47009: LD_INT 11
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 27
47023: PUSH
47024: LD_INT 28
47026: PUSH
47027: LD_INT 26
47029: PUSH
47030: LD_INT 30
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 43
47041: PUSH
47042: LD_INT 44
47044: PUSH
47045: LD_INT 46
47047: PUSH
47048: LD_INT 45
47050: PUSH
47051: LD_INT 47
47053: PUSH
47054: LD_INT 49
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: LIST
47069: PUSH
47070: LD_VAR 0 12
47074: ARRAY
47075: ST_TO_ADDR
// for i in list do
47076: LD_ADDR_VAR 0 8
47080: PUSH
47081: LD_VAR 0 5
47085: PUSH
47086: FOR_IN
47087: IFFALSE 47120
// if not i in fac_list then
47089: LD_VAR 0 8
47093: PUSH
47094: LD_VAR 0 17
47098: IN
47099: NOT
47100: IFFALSE 47118
// list := list diff i ;
47102: LD_ADDR_VAR 0 5
47106: PUSH
47107: LD_VAR 0 5
47111: PUSH
47112: LD_VAR 0 8
47116: DIFF
47117: ST_TO_ADDR
47118: GO 47086
47120: POP
47121: POP
// if not list then
47122: LD_VAR 0 5
47126: NOT
47127: IFFALSE 47131
// exit ;
47129: GO 47935
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
47131: LD_VAR 0 12
47135: PUSH
47136: LD_INT 3
47138: EQUAL
47139: PUSH
47140: LD_INT 49
47142: PUSH
47143: LD_VAR 0 5
47147: IN
47148: AND
47149: PUSH
47150: LD_INT 31
47152: PPUSH
47153: LD_VAR 0 16
47157: PPUSH
47158: CALL_OW 321
47162: PUSH
47163: LD_INT 2
47165: EQUAL
47166: AND
47167: IFFALSE 47227
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
47169: LD_INT 22
47171: PUSH
47172: LD_VAR 0 16
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 35
47183: PUSH
47184: LD_INT 49
47186: PUSH
47187: EMPTY
47188: LIST
47189: LIST
47190: PUSH
47191: LD_INT 91
47193: PUSH
47194: LD_VAR 0 1
47198: PUSH
47199: LD_INT 10
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: LIST
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: LIST
47211: PPUSH
47212: CALL_OW 69
47216: NOT
47217: IFFALSE 47227
// weapon := ru_time_lapser ;
47219: LD_ADDR_VAR 0 18
47223: PUSH
47224: LD_INT 49
47226: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
47227: LD_VAR 0 12
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: LD_INT 2
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: IN
47242: PUSH
47243: LD_INT 11
47245: PUSH
47246: LD_VAR 0 5
47250: IN
47251: PUSH
47252: LD_INT 30
47254: PUSH
47255: LD_VAR 0 5
47259: IN
47260: OR
47261: AND
47262: PUSH
47263: LD_INT 6
47265: PPUSH
47266: LD_VAR 0 16
47270: PPUSH
47271: CALL_OW 321
47275: PUSH
47276: LD_INT 2
47278: EQUAL
47279: AND
47280: IFFALSE 47445
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
47282: LD_INT 22
47284: PUSH
47285: LD_VAR 0 16
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 35
47299: PUSH
47300: LD_INT 11
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 35
47309: PUSH
47310: LD_INT 30
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 91
47324: PUSH
47325: LD_VAR 0 1
47329: PUSH
47330: LD_INT 18
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: PPUSH
47343: CALL_OW 69
47347: NOT
47348: PUSH
47349: LD_INT 22
47351: PUSH
47352: LD_VAR 0 16
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: LD_INT 30
47366: PUSH
47367: LD_INT 32
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 30
47376: PUSH
47377: LD_INT 33
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 91
47391: PUSH
47392: LD_VAR 0 1
47396: PUSH
47397: LD_INT 12
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: PPUSH
47413: CALL_OW 69
47417: PUSH
47418: LD_INT 2
47420: GREATER
47421: AND
47422: IFFALSE 47445
// weapon := [ us_radar , ar_radar ] [ nat ] ;
47424: LD_ADDR_VAR 0 18
47428: PUSH
47429: LD_INT 11
47431: PUSH
47432: LD_INT 30
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_VAR 0 12
47443: ARRAY
47444: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
47445: LD_VAR 0 18
47449: NOT
47450: PUSH
47451: LD_INT 40
47453: PPUSH
47454: LD_VAR 0 16
47458: PPUSH
47459: CALL_OW 321
47463: PUSH
47464: LD_INT 2
47466: EQUAL
47467: AND
47468: PUSH
47469: LD_INT 7
47471: PUSH
47472: LD_VAR 0 5
47476: IN
47477: PUSH
47478: LD_INT 28
47480: PUSH
47481: LD_VAR 0 5
47485: IN
47486: OR
47487: PUSH
47488: LD_INT 45
47490: PUSH
47491: LD_VAR 0 5
47495: IN
47496: OR
47497: AND
47498: IFFALSE 47752
// begin hex := GetHexInfo ( x , y ) ;
47500: LD_ADDR_VAR 0 4
47504: PUSH
47505: LD_VAR 0 10
47509: PPUSH
47510: LD_VAR 0 11
47514: PPUSH
47515: CALL_OW 546
47519: ST_TO_ADDR
// if hex [ 1 ] then
47520: LD_VAR 0 4
47524: PUSH
47525: LD_INT 1
47527: ARRAY
47528: IFFALSE 47532
// exit ;
47530: GO 47935
// height := hex [ 2 ] ;
47532: LD_ADDR_VAR 0 15
47536: PUSH
47537: LD_VAR 0 4
47541: PUSH
47542: LD_INT 2
47544: ARRAY
47545: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
47546: LD_ADDR_VAR 0 14
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 3
47559: PUSH
47560: LD_INT 5
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: ST_TO_ADDR
// for i in tmp do
47569: LD_ADDR_VAR 0 8
47573: PUSH
47574: LD_VAR 0 14
47578: PUSH
47579: FOR_IN
47580: IFFALSE 47750
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
47582: LD_ADDR_VAR 0 9
47586: PUSH
47587: LD_VAR 0 10
47591: PPUSH
47592: LD_VAR 0 8
47596: PPUSH
47597: LD_INT 5
47599: PPUSH
47600: CALL_OW 272
47604: PUSH
47605: LD_VAR 0 11
47609: PPUSH
47610: LD_VAR 0 8
47614: PPUSH
47615: LD_INT 5
47617: PPUSH
47618: CALL_OW 273
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
47627: LD_VAR 0 9
47631: PUSH
47632: LD_INT 1
47634: ARRAY
47635: PPUSH
47636: LD_VAR 0 9
47640: PUSH
47641: LD_INT 2
47643: ARRAY
47644: PPUSH
47645: CALL_OW 488
47649: IFFALSE 47748
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
47651: LD_ADDR_VAR 0 4
47655: PUSH
47656: LD_VAR 0 9
47660: PUSH
47661: LD_INT 1
47663: ARRAY
47664: PPUSH
47665: LD_VAR 0 9
47669: PUSH
47670: LD_INT 2
47672: ARRAY
47673: PPUSH
47674: CALL_OW 546
47678: ST_TO_ADDR
// if hex [ 1 ] then
47679: LD_VAR 0 4
47683: PUSH
47684: LD_INT 1
47686: ARRAY
47687: IFFALSE 47691
// continue ;
47689: GO 47579
// h := hex [ 2 ] ;
47691: LD_ADDR_VAR 0 13
47695: PUSH
47696: LD_VAR 0 4
47700: PUSH
47701: LD_INT 2
47703: ARRAY
47704: ST_TO_ADDR
// if h + 7 < height then
47705: LD_VAR 0 13
47709: PUSH
47710: LD_INT 7
47712: PLUS
47713: PUSH
47714: LD_VAR 0 15
47718: LESS
47719: IFFALSE 47748
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
47721: LD_ADDR_VAR 0 18
47725: PUSH
47726: LD_INT 7
47728: PUSH
47729: LD_INT 28
47731: PUSH
47732: LD_INT 45
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: LIST
47739: PUSH
47740: LD_VAR 0 12
47744: ARRAY
47745: ST_TO_ADDR
// break ;
47746: GO 47750
// end ; end ; end ;
47748: GO 47579
47750: POP
47751: POP
// end ; if not weapon then
47752: LD_VAR 0 18
47756: NOT
47757: IFFALSE 47817
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
47759: LD_ADDR_VAR 0 5
47763: PUSH
47764: LD_VAR 0 5
47768: PUSH
47769: LD_INT 11
47771: PUSH
47772: LD_INT 30
47774: PUSH
47775: LD_INT 49
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: LIST
47782: DIFF
47783: ST_TO_ADDR
// if not list then
47784: LD_VAR 0 5
47788: NOT
47789: IFFALSE 47793
// exit ;
47791: GO 47935
// weapon := list [ rand ( 1 , list ) ] ;
47793: LD_ADDR_VAR 0 18
47797: PUSH
47798: LD_VAR 0 5
47802: PUSH
47803: LD_INT 1
47805: PPUSH
47806: LD_VAR 0 5
47810: PPUSH
47811: CALL_OW 12
47815: ARRAY
47816: ST_TO_ADDR
// end ; if weapon then
47817: LD_VAR 0 18
47821: IFFALSE 47935
// begin tmp := CostOfWeapon ( weapon ) ;
47823: LD_ADDR_VAR 0 14
47827: PUSH
47828: LD_VAR 0 18
47832: PPUSH
47833: CALL_OW 451
47837: ST_TO_ADDR
// j := GetBase ( tower ) ;
47838: LD_ADDR_VAR 0 9
47842: PUSH
47843: LD_VAR 0 1
47847: PPUSH
47848: CALL_OW 274
47852: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47853: LD_VAR 0 9
47857: PPUSH
47858: LD_INT 1
47860: PPUSH
47861: CALL_OW 275
47865: PUSH
47866: LD_VAR 0 14
47870: PUSH
47871: LD_INT 1
47873: ARRAY
47874: GREATEREQUAL
47875: PUSH
47876: LD_VAR 0 9
47880: PPUSH
47881: LD_INT 2
47883: PPUSH
47884: CALL_OW 275
47888: PUSH
47889: LD_VAR 0 14
47893: PUSH
47894: LD_INT 2
47896: ARRAY
47897: GREATEREQUAL
47898: AND
47899: PUSH
47900: LD_VAR 0 9
47904: PPUSH
47905: LD_INT 3
47907: PPUSH
47908: CALL_OW 275
47912: PUSH
47913: LD_VAR 0 14
47917: PUSH
47918: LD_INT 3
47920: ARRAY
47921: GREATEREQUAL
47922: AND
47923: IFFALSE 47935
// result := weapon ;
47925: LD_ADDR_VAR 0 3
47929: PUSH
47930: LD_VAR 0 18
47934: ST_TO_ADDR
// end ; end ;
47935: LD_VAR 0 3
47939: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47940: LD_INT 0
47942: PPUSH
47943: PPUSH
// result := true ;
47944: LD_ADDR_VAR 0 3
47948: PUSH
47949: LD_INT 1
47951: ST_TO_ADDR
// if array1 = array2 then
47952: LD_VAR 0 1
47956: PUSH
47957: LD_VAR 0 2
47961: EQUAL
47962: IFFALSE 48022
// begin for i = 1 to array1 do
47964: LD_ADDR_VAR 0 4
47968: PUSH
47969: DOUBLE
47970: LD_INT 1
47972: DEC
47973: ST_TO_ADDR
47974: LD_VAR 0 1
47978: PUSH
47979: FOR_TO
47980: IFFALSE 48018
// if array1 [ i ] <> array2 [ i ] then
47982: LD_VAR 0 1
47986: PUSH
47987: LD_VAR 0 4
47991: ARRAY
47992: PUSH
47993: LD_VAR 0 2
47997: PUSH
47998: LD_VAR 0 4
48002: ARRAY
48003: NONEQUAL
48004: IFFALSE 48016
// begin result := false ;
48006: LD_ADDR_VAR 0 3
48010: PUSH
48011: LD_INT 0
48013: ST_TO_ADDR
// break ;
48014: GO 48018
// end ;
48016: GO 47979
48018: POP
48019: POP
// end else
48020: GO 48030
// result := false ;
48022: LD_ADDR_VAR 0 3
48026: PUSH
48027: LD_INT 0
48029: ST_TO_ADDR
// end ;
48030: LD_VAR 0 3
48034: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
48035: LD_INT 0
48037: PPUSH
48038: PPUSH
48039: PPUSH
// pom := GetBase ( fac ) ;
48040: LD_ADDR_VAR 0 5
48044: PUSH
48045: LD_VAR 0 1
48049: PPUSH
48050: CALL_OW 274
48054: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
48055: LD_ADDR_VAR 0 4
48059: PUSH
48060: LD_VAR 0 2
48064: PUSH
48065: LD_INT 1
48067: ARRAY
48068: PPUSH
48069: LD_VAR 0 2
48073: PUSH
48074: LD_INT 2
48076: ARRAY
48077: PPUSH
48078: LD_VAR 0 2
48082: PUSH
48083: LD_INT 3
48085: ARRAY
48086: PPUSH
48087: LD_VAR 0 2
48091: PUSH
48092: LD_INT 4
48094: ARRAY
48095: PPUSH
48096: CALL_OW 449
48100: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48101: LD_ADDR_VAR 0 3
48105: PUSH
48106: LD_VAR 0 5
48110: PPUSH
48111: LD_INT 1
48113: PPUSH
48114: CALL_OW 275
48118: PUSH
48119: LD_VAR 0 4
48123: PUSH
48124: LD_INT 1
48126: ARRAY
48127: GREATEREQUAL
48128: PUSH
48129: LD_VAR 0 5
48133: PPUSH
48134: LD_INT 2
48136: PPUSH
48137: CALL_OW 275
48141: PUSH
48142: LD_VAR 0 4
48146: PUSH
48147: LD_INT 2
48149: ARRAY
48150: GREATEREQUAL
48151: AND
48152: PUSH
48153: LD_VAR 0 5
48157: PPUSH
48158: LD_INT 3
48160: PPUSH
48161: CALL_OW 275
48165: PUSH
48166: LD_VAR 0 4
48170: PUSH
48171: LD_INT 3
48173: ARRAY
48174: GREATEREQUAL
48175: AND
48176: ST_TO_ADDR
// end ;
48177: LD_VAR 0 3
48181: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
48182: LD_INT 0
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
// pom := GetBase ( building ) ;
48188: LD_ADDR_VAR 0 3
48192: PUSH
48193: LD_VAR 0 1
48197: PPUSH
48198: CALL_OW 274
48202: ST_TO_ADDR
// if not pom then
48203: LD_VAR 0 3
48207: NOT
48208: IFFALSE 48212
// exit ;
48210: GO 48382
// btype := GetBType ( building ) ;
48212: LD_ADDR_VAR 0 5
48216: PUSH
48217: LD_VAR 0 1
48221: PPUSH
48222: CALL_OW 266
48226: ST_TO_ADDR
// if btype = b_armoury then
48227: LD_VAR 0 5
48231: PUSH
48232: LD_INT 4
48234: EQUAL
48235: IFFALSE 48245
// btype := b_barracks ;
48237: LD_ADDR_VAR 0 5
48241: PUSH
48242: LD_INT 5
48244: ST_TO_ADDR
// if btype = b_depot then
48245: LD_VAR 0 5
48249: PUSH
48250: LD_INT 0
48252: EQUAL
48253: IFFALSE 48263
// btype := b_warehouse ;
48255: LD_ADDR_VAR 0 5
48259: PUSH
48260: LD_INT 1
48262: ST_TO_ADDR
// if btype = b_workshop then
48263: LD_VAR 0 5
48267: PUSH
48268: LD_INT 2
48270: EQUAL
48271: IFFALSE 48281
// btype := b_factory ;
48273: LD_ADDR_VAR 0 5
48277: PUSH
48278: LD_INT 3
48280: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48281: LD_ADDR_VAR 0 4
48285: PUSH
48286: LD_VAR 0 5
48290: PPUSH
48291: LD_VAR 0 1
48295: PPUSH
48296: CALL_OW 248
48300: PPUSH
48301: CALL_OW 450
48305: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48306: LD_ADDR_VAR 0 2
48310: PUSH
48311: LD_VAR 0 3
48315: PPUSH
48316: LD_INT 1
48318: PPUSH
48319: CALL_OW 275
48323: PUSH
48324: LD_VAR 0 4
48328: PUSH
48329: LD_INT 1
48331: ARRAY
48332: GREATEREQUAL
48333: PUSH
48334: LD_VAR 0 3
48338: PPUSH
48339: LD_INT 2
48341: PPUSH
48342: CALL_OW 275
48346: PUSH
48347: LD_VAR 0 4
48351: PUSH
48352: LD_INT 2
48354: ARRAY
48355: GREATEREQUAL
48356: AND
48357: PUSH
48358: LD_VAR 0 3
48362: PPUSH
48363: LD_INT 3
48365: PPUSH
48366: CALL_OW 275
48370: PUSH
48371: LD_VAR 0 4
48375: PUSH
48376: LD_INT 3
48378: ARRAY
48379: GREATEREQUAL
48380: AND
48381: ST_TO_ADDR
// end ;
48382: LD_VAR 0 2
48386: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
48387: LD_INT 0
48389: PPUSH
48390: PPUSH
48391: PPUSH
// pom := GetBase ( building ) ;
48392: LD_ADDR_VAR 0 4
48396: PUSH
48397: LD_VAR 0 1
48401: PPUSH
48402: CALL_OW 274
48406: ST_TO_ADDR
// if not pom then
48407: LD_VAR 0 4
48411: NOT
48412: IFFALSE 48416
// exit ;
48414: GO 48517
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
48416: LD_ADDR_VAR 0 5
48420: PUSH
48421: LD_VAR 0 2
48425: PPUSH
48426: LD_VAR 0 1
48430: PPUSH
48431: CALL_OW 248
48435: PPUSH
48436: CALL_OW 450
48440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
48441: LD_ADDR_VAR 0 3
48445: PUSH
48446: LD_VAR 0 4
48450: PPUSH
48451: LD_INT 1
48453: PPUSH
48454: CALL_OW 275
48458: PUSH
48459: LD_VAR 0 5
48463: PUSH
48464: LD_INT 1
48466: ARRAY
48467: GREATEREQUAL
48468: PUSH
48469: LD_VAR 0 4
48473: PPUSH
48474: LD_INT 2
48476: PPUSH
48477: CALL_OW 275
48481: PUSH
48482: LD_VAR 0 5
48486: PUSH
48487: LD_INT 2
48489: ARRAY
48490: GREATEREQUAL
48491: AND
48492: PUSH
48493: LD_VAR 0 4
48497: PPUSH
48498: LD_INT 3
48500: PPUSH
48501: CALL_OW 275
48505: PUSH
48506: LD_VAR 0 5
48510: PUSH
48511: LD_INT 3
48513: ARRAY
48514: GREATEREQUAL
48515: AND
48516: ST_TO_ADDR
// end ;
48517: LD_VAR 0 3
48521: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
48522: LD_INT 0
48524: PPUSH
48525: PPUSH
48526: PPUSH
48527: PPUSH
48528: PPUSH
48529: PPUSH
48530: PPUSH
48531: PPUSH
48532: PPUSH
48533: PPUSH
// result := false ;
48534: LD_ADDR_VAR 0 6
48538: PUSH
48539: LD_INT 0
48541: ST_TO_ADDR
// if not base or not btype or not x or not y then
48542: LD_VAR 0 1
48546: NOT
48547: PUSH
48548: LD_VAR 0 2
48552: NOT
48553: OR
48554: PUSH
48555: LD_VAR 0 3
48559: NOT
48560: OR
48561: PUSH
48562: LD_VAR 0 4
48566: NOT
48567: OR
48568: IFFALSE 48572
// exit ;
48570: GO 49181
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
48572: LD_ADDR_VAR 0 12
48576: PUSH
48577: LD_VAR 0 2
48581: PPUSH
48582: LD_VAR 0 3
48586: PPUSH
48587: LD_VAR 0 4
48591: PPUSH
48592: LD_VAR 0 5
48596: PPUSH
48597: LD_VAR 0 1
48601: PUSH
48602: LD_INT 1
48604: ARRAY
48605: PPUSH
48606: CALL_OW 248
48610: PPUSH
48611: LD_INT 0
48613: PPUSH
48614: CALL 50018 0 6
48618: ST_TO_ADDR
// if not hexes then
48619: LD_VAR 0 12
48623: NOT
48624: IFFALSE 48628
// exit ;
48626: GO 49181
// for i = 1 to hexes do
48628: LD_ADDR_VAR 0 7
48632: PUSH
48633: DOUBLE
48634: LD_INT 1
48636: DEC
48637: ST_TO_ADDR
48638: LD_VAR 0 12
48642: PUSH
48643: FOR_TO
48644: IFFALSE 49179
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48646: LD_ADDR_VAR 0 11
48650: PUSH
48651: LD_VAR 0 12
48655: PUSH
48656: LD_VAR 0 7
48660: ARRAY
48661: PUSH
48662: LD_INT 1
48664: ARRAY
48665: PPUSH
48666: LD_VAR 0 12
48670: PUSH
48671: LD_VAR 0 7
48675: ARRAY
48676: PUSH
48677: LD_INT 2
48679: ARRAY
48680: PPUSH
48681: CALL_OW 428
48685: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48686: LD_VAR 0 12
48690: PUSH
48691: LD_VAR 0 7
48695: ARRAY
48696: PUSH
48697: LD_INT 1
48699: ARRAY
48700: PPUSH
48701: LD_VAR 0 12
48705: PUSH
48706: LD_VAR 0 7
48710: ARRAY
48711: PUSH
48712: LD_INT 2
48714: ARRAY
48715: PPUSH
48716: CALL_OW 351
48720: PUSH
48721: LD_VAR 0 12
48725: PUSH
48726: LD_VAR 0 7
48730: ARRAY
48731: PUSH
48732: LD_INT 1
48734: ARRAY
48735: PPUSH
48736: LD_VAR 0 12
48740: PUSH
48741: LD_VAR 0 7
48745: ARRAY
48746: PUSH
48747: LD_INT 2
48749: ARRAY
48750: PPUSH
48751: CALL_OW 488
48755: NOT
48756: OR
48757: PUSH
48758: LD_VAR 0 11
48762: PPUSH
48763: CALL_OW 247
48767: PUSH
48768: LD_INT 3
48770: EQUAL
48771: OR
48772: IFFALSE 48778
// exit ;
48774: POP
48775: POP
48776: GO 49181
// if not tmp or not tmp in base then
48778: LD_VAR 0 11
48782: NOT
48783: PUSH
48784: LD_VAR 0 11
48788: PUSH
48789: LD_VAR 0 1
48793: IN
48794: NOT
48795: OR
48796: IFFALSE 48800
// continue ;
48798: GO 48643
// result := true ;
48800: LD_ADDR_VAR 0 6
48804: PUSH
48805: LD_INT 1
48807: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
48808: LD_ADDR_VAR 0 15
48812: PUSH
48813: LD_VAR 0 1
48817: PPUSH
48818: LD_INT 22
48820: PUSH
48821: LD_VAR 0 11
48825: PPUSH
48826: CALL_OW 255
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: PUSH
48838: LD_INT 30
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 30
48850: PUSH
48851: LD_INT 1
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PPUSH
48867: CALL_OW 72
48871: ST_TO_ADDR
// if dep then
48872: LD_VAR 0 15
48876: IFFALSE 49012
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48878: LD_ADDR_VAR 0 14
48882: PUSH
48883: LD_VAR 0 15
48887: PUSH
48888: LD_INT 1
48890: ARRAY
48891: PPUSH
48892: CALL_OW 250
48896: PPUSH
48897: LD_VAR 0 15
48901: PUSH
48902: LD_INT 1
48904: ARRAY
48905: PPUSH
48906: CALL_OW 254
48910: PPUSH
48911: LD_INT 5
48913: PPUSH
48914: CALL_OW 272
48918: PUSH
48919: LD_VAR 0 15
48923: PUSH
48924: LD_INT 1
48926: ARRAY
48927: PPUSH
48928: CALL_OW 251
48932: PPUSH
48933: LD_VAR 0 15
48937: PUSH
48938: LD_INT 1
48940: ARRAY
48941: PPUSH
48942: CALL_OW 254
48946: PPUSH
48947: LD_INT 5
48949: PPUSH
48950: CALL_OW 273
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48959: LD_VAR 0 14
48963: PUSH
48964: LD_INT 1
48966: ARRAY
48967: PPUSH
48968: LD_VAR 0 14
48972: PUSH
48973: LD_INT 2
48975: ARRAY
48976: PPUSH
48977: CALL_OW 488
48981: IFFALSE 49012
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48983: LD_VAR 0 11
48987: PPUSH
48988: LD_VAR 0 14
48992: PUSH
48993: LD_INT 1
48995: ARRAY
48996: PPUSH
48997: LD_VAR 0 14
49001: PUSH
49002: LD_INT 2
49004: ARRAY
49005: PPUSH
49006: CALL_OW 111
// continue ;
49010: GO 48643
// end ; end ; r := GetDir ( tmp ) ;
49012: LD_ADDR_VAR 0 13
49016: PUSH
49017: LD_VAR 0 11
49021: PPUSH
49022: CALL_OW 254
49026: ST_TO_ADDR
// if r = 5 then
49027: LD_VAR 0 13
49031: PUSH
49032: LD_INT 5
49034: EQUAL
49035: IFFALSE 49045
// r := 0 ;
49037: LD_ADDR_VAR 0 13
49041: PUSH
49042: LD_INT 0
49044: ST_TO_ADDR
// for j = r to 5 do
49045: LD_ADDR_VAR 0 8
49049: PUSH
49050: DOUBLE
49051: LD_VAR 0 13
49055: DEC
49056: ST_TO_ADDR
49057: LD_INT 5
49059: PUSH
49060: FOR_TO
49061: IFFALSE 49175
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
49063: LD_ADDR_VAR 0 9
49067: PUSH
49068: LD_VAR 0 11
49072: PPUSH
49073: CALL_OW 250
49077: PPUSH
49078: LD_VAR 0 8
49082: PPUSH
49083: LD_INT 2
49085: PPUSH
49086: CALL_OW 272
49090: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
49091: LD_ADDR_VAR 0 10
49095: PUSH
49096: LD_VAR 0 11
49100: PPUSH
49101: CALL_OW 251
49105: PPUSH
49106: LD_VAR 0 8
49110: PPUSH
49111: LD_INT 2
49113: PPUSH
49114: CALL_OW 273
49118: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
49119: LD_VAR 0 9
49123: PPUSH
49124: LD_VAR 0 10
49128: PPUSH
49129: CALL_OW 488
49133: PUSH
49134: LD_VAR 0 9
49138: PPUSH
49139: LD_VAR 0 10
49143: PPUSH
49144: CALL_OW 428
49148: NOT
49149: AND
49150: IFFALSE 49173
// begin ComMoveXY ( tmp , _x , _y ) ;
49152: LD_VAR 0 11
49156: PPUSH
49157: LD_VAR 0 9
49161: PPUSH
49162: LD_VAR 0 10
49166: PPUSH
49167: CALL_OW 111
// break ;
49171: GO 49175
// end ; end ;
49173: GO 49060
49175: POP
49176: POP
// end ;
49177: GO 48643
49179: POP
49180: POP
// end ;
49181: LD_VAR 0 6
49185: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
49186: LD_INT 0
49188: PPUSH
49189: PPUSH
49190: PPUSH
49191: PPUSH
49192: PPUSH
49193: PPUSH
49194: PPUSH
49195: PPUSH
49196: PPUSH
49197: PPUSH
// result := false ;
49198: LD_ADDR_VAR 0 6
49202: PUSH
49203: LD_INT 0
49205: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49206: LD_VAR 0 1
49210: NOT
49211: PUSH
49212: LD_VAR 0 1
49216: PPUSH
49217: CALL_OW 266
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: IN
49232: NOT
49233: OR
49234: PUSH
49235: LD_VAR 0 2
49239: NOT
49240: OR
49241: PUSH
49242: LD_VAR 0 5
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 3
49258: PUSH
49259: LD_INT 4
49261: PUSH
49262: LD_INT 5
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: IN
49273: NOT
49274: OR
49275: PUSH
49276: LD_VAR 0 3
49280: PPUSH
49281: LD_VAR 0 4
49285: PPUSH
49286: CALL_OW 488
49290: NOT
49291: OR
49292: IFFALSE 49296
// exit ;
49294: GO 50013
// pom := GetBase ( depot ) ;
49296: LD_ADDR_VAR 0 10
49300: PUSH
49301: LD_VAR 0 1
49305: PPUSH
49306: CALL_OW 274
49310: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49311: LD_ADDR_VAR 0 11
49315: PUSH
49316: LD_VAR 0 2
49320: PPUSH
49321: LD_VAR 0 1
49325: PPUSH
49326: CALL_OW 248
49330: PPUSH
49331: CALL_OW 450
49335: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49336: LD_VAR 0 10
49340: PPUSH
49341: LD_INT 1
49343: PPUSH
49344: CALL_OW 275
49348: PUSH
49349: LD_VAR 0 11
49353: PUSH
49354: LD_INT 1
49356: ARRAY
49357: GREATEREQUAL
49358: PUSH
49359: LD_VAR 0 10
49363: PPUSH
49364: LD_INT 2
49366: PPUSH
49367: CALL_OW 275
49371: PUSH
49372: LD_VAR 0 11
49376: PUSH
49377: LD_INT 2
49379: ARRAY
49380: GREATEREQUAL
49381: AND
49382: PUSH
49383: LD_VAR 0 10
49387: PPUSH
49388: LD_INT 3
49390: PPUSH
49391: CALL_OW 275
49395: PUSH
49396: LD_VAR 0 11
49400: PUSH
49401: LD_INT 3
49403: ARRAY
49404: GREATEREQUAL
49405: AND
49406: NOT
49407: IFFALSE 49411
// exit ;
49409: GO 50013
// if GetBType ( depot ) = b_depot then
49411: LD_VAR 0 1
49415: PPUSH
49416: CALL_OW 266
49420: PUSH
49421: LD_INT 0
49423: EQUAL
49424: IFFALSE 49436
// dist := 28 else
49426: LD_ADDR_VAR 0 14
49430: PUSH
49431: LD_INT 28
49433: ST_TO_ADDR
49434: GO 49444
// dist := 36 ;
49436: LD_ADDR_VAR 0 14
49440: PUSH
49441: LD_INT 36
49443: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49444: LD_VAR 0 1
49448: PPUSH
49449: LD_VAR 0 3
49453: PPUSH
49454: LD_VAR 0 4
49458: PPUSH
49459: CALL_OW 297
49463: PUSH
49464: LD_VAR 0 14
49468: GREATER
49469: IFFALSE 49473
// exit ;
49471: GO 50013
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49473: LD_ADDR_VAR 0 12
49477: PUSH
49478: LD_VAR 0 2
49482: PPUSH
49483: LD_VAR 0 3
49487: PPUSH
49488: LD_VAR 0 4
49492: PPUSH
49493: LD_VAR 0 5
49497: PPUSH
49498: LD_VAR 0 1
49502: PPUSH
49503: CALL_OW 248
49507: PPUSH
49508: LD_INT 0
49510: PPUSH
49511: CALL 50018 0 6
49515: ST_TO_ADDR
// if not hexes then
49516: LD_VAR 0 12
49520: NOT
49521: IFFALSE 49525
// exit ;
49523: GO 50013
// hex := GetHexInfo ( x , y ) ;
49525: LD_ADDR_VAR 0 15
49529: PUSH
49530: LD_VAR 0 3
49534: PPUSH
49535: LD_VAR 0 4
49539: PPUSH
49540: CALL_OW 546
49544: ST_TO_ADDR
// if hex [ 1 ] then
49545: LD_VAR 0 15
49549: PUSH
49550: LD_INT 1
49552: ARRAY
49553: IFFALSE 49557
// exit ;
49555: GO 50013
// height := hex [ 2 ] ;
49557: LD_ADDR_VAR 0 13
49561: PUSH
49562: LD_VAR 0 15
49566: PUSH
49567: LD_INT 2
49569: ARRAY
49570: ST_TO_ADDR
// for i = 1 to hexes do
49571: LD_ADDR_VAR 0 7
49575: PUSH
49576: DOUBLE
49577: LD_INT 1
49579: DEC
49580: ST_TO_ADDR
49581: LD_VAR 0 12
49585: PUSH
49586: FOR_TO
49587: IFFALSE 49917
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49589: LD_VAR 0 12
49593: PUSH
49594: LD_VAR 0 7
49598: ARRAY
49599: PUSH
49600: LD_INT 1
49602: ARRAY
49603: PPUSH
49604: LD_VAR 0 12
49608: PUSH
49609: LD_VAR 0 7
49613: ARRAY
49614: PUSH
49615: LD_INT 2
49617: ARRAY
49618: PPUSH
49619: CALL_OW 488
49623: NOT
49624: PUSH
49625: LD_VAR 0 12
49629: PUSH
49630: LD_VAR 0 7
49634: ARRAY
49635: PUSH
49636: LD_INT 1
49638: ARRAY
49639: PPUSH
49640: LD_VAR 0 12
49644: PUSH
49645: LD_VAR 0 7
49649: ARRAY
49650: PUSH
49651: LD_INT 2
49653: ARRAY
49654: PPUSH
49655: CALL_OW 428
49659: PUSH
49660: LD_INT 0
49662: GREATER
49663: OR
49664: PUSH
49665: LD_VAR 0 12
49669: PUSH
49670: LD_VAR 0 7
49674: ARRAY
49675: PUSH
49676: LD_INT 1
49678: ARRAY
49679: PPUSH
49680: LD_VAR 0 12
49684: PUSH
49685: LD_VAR 0 7
49689: ARRAY
49690: PUSH
49691: LD_INT 2
49693: ARRAY
49694: PPUSH
49695: CALL_OW 351
49699: OR
49700: IFFALSE 49706
// exit ;
49702: POP
49703: POP
49704: GO 50013
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49706: LD_ADDR_VAR 0 8
49710: PUSH
49711: LD_VAR 0 12
49715: PUSH
49716: LD_VAR 0 7
49720: ARRAY
49721: PUSH
49722: LD_INT 1
49724: ARRAY
49725: PPUSH
49726: LD_VAR 0 12
49730: PUSH
49731: LD_VAR 0 7
49735: ARRAY
49736: PUSH
49737: LD_INT 2
49739: ARRAY
49740: PPUSH
49741: CALL_OW 546
49745: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49746: LD_VAR 0 8
49750: PUSH
49751: LD_INT 1
49753: ARRAY
49754: PUSH
49755: LD_VAR 0 8
49759: PUSH
49760: LD_INT 2
49762: ARRAY
49763: PUSH
49764: LD_VAR 0 13
49768: PUSH
49769: LD_INT 2
49771: PLUS
49772: GREATER
49773: OR
49774: PUSH
49775: LD_VAR 0 8
49779: PUSH
49780: LD_INT 2
49782: ARRAY
49783: PUSH
49784: LD_VAR 0 13
49788: PUSH
49789: LD_INT 2
49791: MINUS
49792: LESS
49793: OR
49794: PUSH
49795: LD_VAR 0 8
49799: PUSH
49800: LD_INT 3
49802: ARRAY
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 8
49809: PUSH
49810: LD_INT 9
49812: PUSH
49813: LD_INT 10
49815: PUSH
49816: LD_INT 11
49818: PUSH
49819: LD_INT 12
49821: PUSH
49822: LD_INT 13
49824: PUSH
49825: LD_INT 16
49827: PUSH
49828: LD_INT 17
49830: PUSH
49831: LD_INT 18
49833: PUSH
49834: LD_INT 19
49836: PUSH
49837: LD_INT 20
49839: PUSH
49840: LD_INT 21
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: IN
49858: NOT
49859: OR
49860: PUSH
49861: LD_VAR 0 8
49865: PUSH
49866: LD_INT 5
49868: ARRAY
49869: NOT
49870: OR
49871: PUSH
49872: LD_VAR 0 8
49876: PUSH
49877: LD_INT 6
49879: ARRAY
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 7
49889: PUSH
49890: LD_INT 9
49892: PUSH
49893: LD_INT 10
49895: PUSH
49896: LD_INT 11
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: IN
49907: NOT
49908: OR
49909: IFFALSE 49915
// exit ;
49911: POP
49912: POP
49913: GO 50013
// end ;
49915: GO 49586
49917: POP
49918: POP
// side := GetSide ( depot ) ;
49919: LD_ADDR_VAR 0 9
49923: PUSH
49924: LD_VAR 0 1
49928: PPUSH
49929: CALL_OW 255
49933: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49934: LD_VAR 0 9
49938: PPUSH
49939: LD_VAR 0 3
49943: PPUSH
49944: LD_VAR 0 4
49948: PPUSH
49949: LD_INT 20
49951: PPUSH
49952: CALL 42667 0 4
49956: PUSH
49957: LD_INT 4
49959: ARRAY
49960: IFFALSE 49964
// exit ;
49962: GO 50013
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49964: LD_VAR 0 2
49968: PUSH
49969: LD_INT 29
49971: PUSH
49972: LD_INT 30
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: IN
49979: PUSH
49980: LD_VAR 0 3
49984: PPUSH
49985: LD_VAR 0 4
49989: PPUSH
49990: LD_VAR 0 9
49994: PPUSH
49995: CALL_OW 440
49999: NOT
50000: AND
50001: IFFALSE 50005
// exit ;
50003: GO 50013
// result := true ;
50005: LD_ADDR_VAR 0 6
50009: PUSH
50010: LD_INT 1
50012: ST_TO_ADDR
// end ;
50013: LD_VAR 0 6
50017: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50018: LD_INT 0
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
50024: PPUSH
50025: PPUSH
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
50045: PPUSH
50046: PPUSH
50047: PPUSH
50048: PPUSH
50049: PPUSH
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
50060: PPUSH
50061: PPUSH
50062: PPUSH
50063: PPUSH
50064: PPUSH
50065: PPUSH
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
50077: PPUSH
// result = [ ] ;
50078: LD_ADDR_VAR 0 7
50082: PUSH
50083: EMPTY
50084: ST_TO_ADDR
// temp_list = [ ] ;
50085: LD_ADDR_VAR 0 9
50089: PUSH
50090: EMPTY
50091: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50092: LD_VAR 0 4
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 1
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 3
50108: PUSH
50109: LD_INT 4
50111: PUSH
50112: LD_INT 5
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: IN
50123: NOT
50124: PUSH
50125: LD_VAR 0 1
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: IN
50140: PUSH
50141: LD_VAR 0 5
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 3
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: LIST
50159: IN
50160: NOT
50161: AND
50162: OR
50163: IFFALSE 50167
// exit ;
50165: GO 68558
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50167: LD_VAR 0 1
50171: PUSH
50172: LD_INT 6
50174: PUSH
50175: LD_INT 7
50177: PUSH
50178: LD_INT 8
50180: PUSH
50181: LD_INT 13
50183: PUSH
50184: LD_INT 12
50186: PUSH
50187: LD_INT 15
50189: PUSH
50190: LD_INT 11
50192: PUSH
50193: LD_INT 14
50195: PUSH
50196: LD_INT 10
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: IN
50210: IFFALSE 50220
// btype = b_lab ;
50212: LD_ADDR_VAR 0 1
50216: PUSH
50217: LD_INT 6
50219: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50220: LD_VAR 0 6
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: LD_INT 2
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: IN
50239: NOT
50240: PUSH
50241: LD_VAR 0 1
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: LD_INT 2
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 6
50260: PUSH
50261: LD_INT 36
50263: PUSH
50264: LD_INT 4
50266: PUSH
50267: LD_INT 5
50269: PUSH
50270: LD_INT 31
50272: PUSH
50273: LD_INT 32
50275: PUSH
50276: LD_INT 33
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: IN
50292: NOT
50293: PUSH
50294: LD_VAR 0 6
50298: PUSH
50299: LD_INT 1
50301: EQUAL
50302: AND
50303: OR
50304: PUSH
50305: LD_VAR 0 1
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: IN
50320: NOT
50321: PUSH
50322: LD_VAR 0 6
50326: PUSH
50327: LD_INT 2
50329: EQUAL
50330: AND
50331: OR
50332: IFFALSE 50342
// mode = 0 ;
50334: LD_ADDR_VAR 0 6
50338: PUSH
50339: LD_INT 0
50341: ST_TO_ADDR
// case mode of 0 :
50342: LD_VAR 0 6
50346: PUSH
50347: LD_INT 0
50349: DOUBLE
50350: EQUAL
50351: IFTRUE 50355
50353: GO 61808
50355: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50356: LD_ADDR_VAR 0 11
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: LD_INT 1
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50549: LD_ADDR_VAR 0 12
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 0
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 3
50706: NEG
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50745: LD_ADDR_VAR 0 13
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 3
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 3
50916: NEG
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50944: LD_ADDR_VAR 0 14
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: NEG
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: LD_INT 2
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 1
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: LD_INT 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 3
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51140: LD_ADDR_VAR 0 15
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: LD_INT 0
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 0
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 1
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 0
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 3
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51333: LD_ADDR_VAR 0 16
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 0
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 1
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 3
51480: PUSH
51481: LD_INT 2
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: LD_INT 3
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: LD_INT 3
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51526: LD_ADDR_VAR 0 17
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51756: LD_ADDR_VAR 0 18
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51986: LD_ADDR_VAR 0 19
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52216: LD_ADDR_VAR 0 20
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 0
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 2
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: LD_INT 1
52407: NEG
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52446: LD_ADDR_VAR 0 21
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 0
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 1
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 2
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 2
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 2
52622: NEG
52623: PUSH
52624: LD_INT 0
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52676: LD_ADDR_VAR 0 22
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: LD_INT 2
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 2
52811: PUSH
52812: LD_INT 2
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 2
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 2
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: NEG
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: NEG
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52906: LD_ADDR_VAR 0 23
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 1
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 2
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 2
53082: NEG
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: NEG
53118: PUSH
53119: LD_INT 3
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 3
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 2
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 1
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53186: LD_ADDR_VAR 0 24
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 0
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 1
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 0
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 2
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 1
53331: PUSH
53332: LD_INT 2
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 0
53341: PUSH
53342: LD_INT 2
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: NEG
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 3
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53462: LD_ADDR_VAR 0 25
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 0
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 2
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: NEG
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 3
53673: PUSH
53674: LD_INT 1
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53736: LD_ADDR_VAR 0 26
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 3
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54012: LD_ADDR_VAR 0 27
54016: PUSH
54017: LD_INT 0
54019: PUSH
54020: LD_INT 0
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: NEG
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 3
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 3
54257: NEG
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54292: LD_ADDR_VAR 0 28
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 0
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 1
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 2
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 2
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 3
54539: NEG
54540: PUSH
54541: LD_INT 2
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54574: LD_ADDR_VAR 0 29
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 0
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 0
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 1
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 2
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 2
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 3
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54853: LD_ADDR_VAR 0 30
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 2
54938: NEG
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 2
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: PUSH
54989: LD_INT 2
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: LD_INT 2
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: NEG
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 3
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 3
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 2
55085: NEG
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55131: LD_ADDR_VAR 0 31
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 1
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 1
55204: NEG
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 2
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 1
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 2
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: NEG
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: LD_INT 3
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 3
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55409: LD_ADDR_VAR 0 32
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 1
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 2
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 1
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: LD_INT 1
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 1
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 2
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 3
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: LD_INT 3
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: LD_INT 1
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55687: LD_ADDR_VAR 0 33
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 0
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 2
55772: NEG
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: NEG
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: LD_INT 3
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 1
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 3
55931: NEG
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55966: LD_ADDR_VAR 0 34
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: LD_INT 1
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 1
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: NEG
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 3
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: LD_INT 2
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 2
56190: PUSH
56191: LD_INT 3
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56246: LD_ADDR_VAR 0 35
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: NEG
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: NEG
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56358: LD_ADDR_VAR 0 36
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56470: LD_ADDR_VAR 0 37
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 0
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 0
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56582: LD_ADDR_VAR 0 38
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 1
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: NEG
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56694: LD_ADDR_VAR 0 39
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: LD_INT 0
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 1
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 0
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: LD_INT 0
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56806: LD_ADDR_VAR 0 40
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 1
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56918: LD_ADDR_VAR 0 41
56922: PUSH
56923: LD_INT 0
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 1
56976: NEG
56977: PUSH
56978: LD_INT 0
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 1
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: NEG
57000: PUSH
57001: LD_INT 2
57003: NEG
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 1
57011: PUSH
57012: LD_INT 1
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: PUSH
57043: LD_INT 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: LD_INT 2
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 2
57096: NEG
57097: PUSH
57098: LD_INT 2
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 2
57108: NEG
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 3
57141: PUSH
57142: LD_INT 1
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 3
57151: PUSH
57152: LD_INT 2
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 3
57161: PUSH
57162: LD_INT 3
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: NEG
57216: PUSH
57217: LD_INT 2
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 3
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57268: LD_ADDR_VAR 0 42
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: NEG
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: NEG
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: LD_INT 1
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 2
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 2
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: LD_INT 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 2
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: NEG
57459: PUSH
57460: LD_INT 3
57462: NEG
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: LD_INT 3
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 3
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: LD_INT 3
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: LD_INT 3
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: LD_INT 3
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: LD_INT 2
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 3
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57618: LD_ADDR_VAR 0 43
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 0
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: LD_INT 1
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 2
57743: PUSH
57744: LD_INT 1
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 1
57773: NEG
57774: PUSH
57775: LD_INT 1
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: LD_INT 1
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 1
57892: NEG
57893: PUSH
57894: LD_INT 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 3
57914: NEG
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57966: LD_ADDR_VAR 0 44
57970: PUSH
57971: LD_INT 0
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: LD_INT 1
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: LD_INT 1
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 0
58014: PUSH
58015: LD_INT 1
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 1
58024: NEG
58025: PUSH
58026: LD_INT 0
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: LD_INT 2
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: LD_INT 2
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 2
58121: NEG
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 3
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 2
58168: PUSH
58169: LD_INT 1
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: LD_INT 1
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: LD_INT 2
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: LD_INT 3
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 3
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 3
58263: NEG
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 3
58275: NEG
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58316: LD_ADDR_VAR 0 45
58320: PUSH
58321: LD_INT 0
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 0
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 1
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: NEG
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 2
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 1
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: NEG
58495: PUSH
58496: LD_INT 2
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 3
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 0
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 2
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 1
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 3
58613: NEG
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: PUSH
58623: LD_INT 3
58625: NEG
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58666: LD_ADDR_VAR 0 46
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 0
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: LD_INT 1
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 2
58781: PUSH
58782: LD_INT 0
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 0
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 1
58821: NEG
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 2
58832: NEG
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 3
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: LD_INT 2
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 3
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 3
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: LD_INT 2
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 2
58951: NEG
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 1
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59014: LD_ADDR_VAR 0 47
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: LD_INT 0
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 0
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 0
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: LD_INT 1
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: NEG
59130: PUSH
59131: LD_INT 1
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59165: LD_ADDR_VAR 0 48
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 1
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 0
59213: PUSH
59214: LD_INT 1
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: NEG
59224: PUSH
59225: LD_INT 0
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: LD_INT 2
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59312: LD_ADDR_VAR 0 49
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: LD_INT 1
59332: NEG
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 0
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 1
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 1
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 1
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 2
59414: PUSH
59415: LD_INT 1
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 2
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: PUSH
59435: LD_INT 2
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59456: LD_ADDR_VAR 0 50
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: NEG
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59600: LD_ADDR_VAR 0 51
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 0
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 1
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: LD_INT 2
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 1
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: NEG
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59747: LD_ADDR_VAR 0 52
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 0
59764: PUSH
59765: LD_INT 1
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 1
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59898: LD_ADDR_VAR 0 53
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60128: LD_ADDR_VAR 0 54
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60358: LD_ADDR_VAR 0 55
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 2
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 2
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: NEG
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60588: LD_ADDR_VAR 0 56
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 1
60608: NEG
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: PUSH
60627: LD_INT 1
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 2
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: PUSH
60734: LD_INT 2
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: LD_INT 2
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: NEG
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60818: LD_ADDR_VAR 0 57
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 2
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 1
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: LD_INT 1
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 2
60994: NEG
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: LD_INT 1
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61048: LD_ADDR_VAR 0 58
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 1
61068: NEG
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 1
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 0
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: LD_INT 1
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: LD_INT 0
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 2
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: LD_INT 2
61206: PUSH
61207: EMPTY
61208: LIST
61209: LIST
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: NEG
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 2
61247: NEG
61248: PUSH
61249: LD_INT 2
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61278: LD_ADDR_VAR 0 59
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: LD_INT 0
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 0
61326: PUSH
61327: LD_INT 1
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 1
61336: NEG
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 1
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61366: LD_ADDR_VAR 0 60
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: LD_INT 0
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: LD_INT 1
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61454: LD_ADDR_VAR 0 61
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 1
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 1
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: LD_INT 0
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61542: LD_ADDR_VAR 0 62
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 0
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 1
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 1
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 1
61600: NEG
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61630: LD_ADDR_VAR 0 63
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 0
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 0
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 1
61668: PUSH
61669: LD_INT 1
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 1
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: LD_INT 0
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 1
61703: NEG
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61718: LD_ADDR_VAR 0 64
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 0
61735: PUSH
61736: LD_INT 1
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: PUSH
61747: LD_INT 0
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: LD_INT 1
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: ST_TO_ADDR
// end ; 1 :
61806: GO 67703
61808: LD_INT 1
61810: DOUBLE
61811: EQUAL
61812: IFTRUE 61816
61814: GO 64439
61816: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61817: LD_ADDR_VAR 0 11
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: LD_INT 3
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 1
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: LIST
61860: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61861: LD_ADDR_VAR 0 12
61865: PUSH
61866: LD_INT 2
61868: PUSH
61869: LD_INT 1
61871: NEG
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 3
61879: PUSH
61880: LD_INT 0
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61902: LD_ADDR_VAR 0 13
61906: PUSH
61907: LD_INT 3
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 3
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 3
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: LIST
61941: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61942: LD_ADDR_VAR 0 14
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: LD_INT 3
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: LD_INT 3
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 1
61969: NEG
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: EMPTY
61979: LIST
61980: LIST
61981: LIST
61982: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61983: LD_ADDR_VAR 0 15
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 0
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: LD_INT 1
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62027: LD_ADDR_VAR 0 16
62031: PUSH
62032: LD_INT 2
62034: NEG
62035: PUSH
62036: LD_INT 3
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 3
62046: NEG
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: LD_INT 3
62062: NEG
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: LIST
62072: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62073: LD_ADDR_VAR 0 17
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: LD_INT 3
62084: NEG
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 3
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: LIST
62116: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62117: LD_ADDR_VAR 0 18
62121: PUSH
62122: LD_INT 2
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 3
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 3
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: LIST
62157: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62158: LD_ADDR_VAR 0 19
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: LD_INT 2
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 3
62175: PUSH
62176: LD_INT 3
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: LD_INT 3
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62198: LD_ADDR_VAR 0 20
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 3
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 3
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: LIST
62238: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62239: LD_ADDR_VAR 0 21
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: LD_INT 1
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 3
62257: NEG
62258: PUSH
62259: LD_INT 0
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: LIST
62282: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62283: LD_ADDR_VAR 0 22
62287: PUSH
62288: LD_INT 2
62290: NEG
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 3
62302: NEG
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: LD_INT 3
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62329: LD_ADDR_VAR 0 23
62333: PUSH
62334: LD_INT 0
62336: PUSH
62337: LD_INT 3
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 4
62351: NEG
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: LIST
62372: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62373: LD_ADDR_VAR 0 24
62377: PUSH
62378: LD_INT 3
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 3
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 4
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62414: LD_ADDR_VAR 0 25
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 4
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: LD_INT 4
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: LIST
62453: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62454: LD_ADDR_VAR 0 26
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: LD_INT 3
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: LD_INT 3
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: LIST
62494: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62495: LD_ADDR_VAR 0 27
62499: PUSH
62500: LD_INT 3
62502: NEG
62503: PUSH
62504: LD_INT 0
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 4
62524: NEG
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: LIST
62538: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62539: LD_ADDR_VAR 0 28
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: LD_INT 3
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 3
62558: NEG
62559: PUSH
62560: LD_INT 4
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 4
62570: NEG
62571: PUSH
62572: LD_INT 3
62574: NEG
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62585: LD_ADDR_VAR 0 29
62589: PUSH
62590: LD_INT 1
62592: NEG
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 4
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: LD_INT 4
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: LD_INT 3
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: NEG
62661: PUSH
62662: LD_INT 5
62664: NEG
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: LD_INT 5
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: LD_INT 4
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: NEG
62695: PUSH
62696: LD_INT 6
62698: NEG
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: LD_INT 0
62706: PUSH
62707: LD_INT 6
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: PUSH
62718: LD_INT 5
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62740: LD_ADDR_VAR 0 30
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 3
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 4
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 4
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 4
62809: PUSH
62810: LD_INT 1
62812: NEG
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 5
62820: PUSH
62821: LD_INT 0
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 5
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 5
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 6
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 6
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62883: LD_ADDR_VAR 0 31
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 2
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 4
62920: PUSH
62921: LD_INT 3
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 4
62930: PUSH
62931: LD_INT 4
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: LD_INT 4
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 5
62950: PUSH
62951: LD_INT 4
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 5
62960: PUSH
62961: LD_INT 5
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 4
62970: PUSH
62971: LD_INT 5
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 6
62980: PUSH
62981: LD_INT 5
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 6
62990: PUSH
62991: LD_INT 6
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 5
63000: PUSH
63001: LD_INT 6
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63022: LD_ADDR_VAR 0 32
63026: PUSH
63027: LD_INT 1
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 4
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 4
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 3
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 5
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 5
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 4
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: PUSH
63123: LD_INT 6
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 0
63132: PUSH
63133: LD_INT 6
63135: PUSH
63136: EMPTY
63137: LIST
63138: LIST
63139: PUSH
63140: LD_INT 1
63142: NEG
63143: PUSH
63144: LD_INT 5
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63165: LD_ADDR_VAR 0 33
63169: PUSH
63170: LD_INT 2
63172: NEG
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 3
63183: NEG
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 4
63217: NEG
63218: PUSH
63219: LD_INT 0
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: LD_INT 1
63232: NEG
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 4
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 5
63251: NEG
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 5
63262: NEG
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: PUSH
63272: LD_INT 5
63274: NEG
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 6
63285: NEG
63286: PUSH
63287: LD_INT 0
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 6
63296: NEG
63297: PUSH
63298: LD_INT 1
63300: NEG
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63320: LD_ADDR_VAR 0 34
63324: PUSH
63325: LD_INT 2
63327: NEG
63328: PUSH
63329: LD_INT 3
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: NEG
63340: PUSH
63341: LD_INT 2
63343: NEG
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 3
63351: NEG
63352: PUSH
63353: LD_INT 3
63355: NEG
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 3
63363: NEG
63364: PUSH
63365: LD_INT 4
63367: NEG
63368: PUSH
63369: EMPTY
63370: LIST
63371: LIST
63372: PUSH
63373: LD_INT 4
63375: NEG
63376: PUSH
63377: LD_INT 3
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 4
63387: NEG
63388: PUSH
63389: LD_INT 4
63391: NEG
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PUSH
63397: LD_INT 4
63399: NEG
63400: PUSH
63401: LD_INT 5
63403: NEG
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 5
63411: NEG
63412: PUSH
63413: LD_INT 4
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 5
63423: NEG
63424: PUSH
63425: LD_INT 5
63427: NEG
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 5
63435: NEG
63436: PUSH
63437: LD_INT 6
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 6
63447: NEG
63448: PUSH
63449: LD_INT 5
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 6
63459: NEG
63460: PUSH
63461: LD_INT 6
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63483: LD_ADDR_VAR 0 41
63487: PUSH
63488: LD_INT 0
63490: PUSH
63491: LD_INT 2
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 3
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 2
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: LIST
63526: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63527: LD_ADDR_VAR 0 42
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 3
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63568: LD_ADDR_VAR 0 43
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 2
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 3
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63608: LD_ADDR_VAR 0 44
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 2
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 1
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: LIST
63648: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63649: LD_ADDR_VAR 0 45
63653: PUSH
63654: LD_INT 2
63656: NEG
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: LD_INT 1
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 3
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: NEG
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: LIST
63692: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63693: LD_ADDR_VAR 0 46
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 3
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 3
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63739: LD_ADDR_VAR 0 47
63743: PUSH
63744: LD_INT 2
63746: NEG
63747: PUSH
63748: LD_INT 3
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: LD_INT 3
63762: NEG
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63772: LD_ADDR_VAR 0 48
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 2
63782: NEG
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 1
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63803: LD_ADDR_VAR 0 49
63807: PUSH
63808: LD_INT 3
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 3
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63832: LD_ADDR_VAR 0 50
63836: PUSH
63837: LD_INT 2
63839: PUSH
63840: LD_INT 3
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63861: LD_ADDR_VAR 0 51
63865: PUSH
63866: LD_INT 1
63868: NEG
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 2
63879: NEG
63880: PUSH
63881: LD_INT 1
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63892: LD_ADDR_VAR 0 52
63896: PUSH
63897: LD_INT 3
63899: NEG
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63925: LD_ADDR_VAR 0 53
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: LD_INT 3
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 0
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: LD_INT 2
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: LIST
63968: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63969: LD_ADDR_VAR 0 54
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: LD_INT 1
63979: NEG
63980: PUSH
63981: EMPTY
63982: LIST
63983: LIST
63984: PUSH
63985: LD_INT 3
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 3
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: LIST
64009: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64010: LD_ADDR_VAR 0 55
64014: PUSH
64015: LD_INT 3
64017: PUSH
64018: LD_INT 2
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 3
64027: PUSH
64028: LD_INT 3
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 2
64037: PUSH
64038: LD_INT 3
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: LIST
64049: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64050: LD_ADDR_VAR 0 56
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 3
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 0
64067: PUSH
64068: LD_INT 3
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: LIST
64090: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64091: LD_ADDR_VAR 0 57
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 3
64109: NEG
64110: PUSH
64111: LD_INT 0
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: NEG
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: LIST
64134: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64135: LD_ADDR_VAR 0 58
64139: PUSH
64140: LD_INT 2
64142: NEG
64143: PUSH
64144: LD_INT 3
64146: NEG
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 3
64154: NEG
64155: PUSH
64156: LD_INT 2
64158: NEG
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: PUSH
64164: LD_INT 3
64166: NEG
64167: PUSH
64168: LD_INT 3
64170: NEG
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64181: LD_ADDR_VAR 0 59
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: LD_INT 2
64192: NEG
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 0
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 1
64211: PUSH
64212: LD_INT 1
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64225: LD_ADDR_VAR 0 60
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: LD_INT 0
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: LIST
64265: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64266: LD_ADDR_VAR 0 61
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: LD_INT 1
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: LD_INT 2
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64306: LD_ADDR_VAR 0 62
64310: PUSH
64311: LD_INT 1
64313: PUSH
64314: LD_INT 2
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 2
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 1
64333: NEG
64334: PUSH
64335: LD_INT 1
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64347: LD_ADDR_VAR 0 63
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: LD_INT 1
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: LIST
64390: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64391: LD_ADDR_VAR 0 64
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 2
64422: NEG
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: ST_TO_ADDR
// end ; 2 :
64437: GO 67703
64439: LD_INT 2
64441: DOUBLE
64442: EQUAL
64443: IFTRUE 64447
64445: GO 67702
64447: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64448: LD_ADDR_VAR 0 29
64452: PUSH
64453: LD_INT 4
64455: PUSH
64456: LD_INT 0
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 4
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 5
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 5
64486: PUSH
64487: LD_INT 1
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 4
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: LD_INT 2
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 5
64538: PUSH
64539: LD_INT 2
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: LD_INT 3
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 3
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 4
64568: PUSH
64569: LD_INT 3
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 4
64578: PUSH
64579: LD_INT 4
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: LD_INT 4
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 3
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 4
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 2
64628: PUSH
64629: LD_INT 4
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 0
64638: PUSH
64639: LD_INT 4
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 0
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: LD_INT 4
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 5
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 5
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: LD_INT 4
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: LD_INT 5
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 3
64731: NEG
64732: PUSH
64733: LD_INT 0
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: NEG
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 3
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 4
64787: NEG
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 4
64798: NEG
64799: PUSH
64800: LD_INT 1
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 4
64810: NEG
64811: PUSH
64812: LD_INT 2
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: NEG
64823: PUSH
64824: LD_INT 2
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 4
64833: NEG
64834: PUSH
64835: LD_INT 4
64837: NEG
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 4
64845: NEG
64846: PUSH
64847: LD_INT 5
64849: NEG
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 3
64857: NEG
64858: PUSH
64859: LD_INT 4
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 3
64869: NEG
64870: PUSH
64871: LD_INT 3
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 4
64881: NEG
64882: PUSH
64883: LD_INT 3
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 5
64893: NEG
64894: PUSH
64895: LD_INT 4
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 5
64905: NEG
64906: PUSH
64907: LD_INT 5
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: LD_INT 5
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: LD_INT 5
64929: NEG
64930: PUSH
64931: LD_INT 3
64933: NEG
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64986: LD_ADDR_VAR 0 30
64990: PUSH
64991: LD_INT 4
64993: PUSH
64994: LD_INT 4
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: PUSH
65004: LD_INT 3
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 5
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 5
65023: PUSH
65024: LD_INT 5
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 4
65033: PUSH
65034: LD_INT 5
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 3
65043: PUSH
65044: LD_INT 4
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 3
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 5
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 3
65073: PUSH
65074: LD_INT 5
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 3
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 0
65093: PUSH
65094: LD_INT 2
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 1
65103: PUSH
65104: LD_INT 3
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: LD_INT 4
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 0
65123: PUSH
65124: LD_INT 4
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 1
65133: NEG
65134: PUSH
65135: LD_INT 3
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: LD_INT 2
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 2
65155: PUSH
65156: LD_INT 4
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 2
65165: NEG
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 4
65176: NEG
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: NEG
65188: PUSH
65189: LD_INT 1
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: NEG
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 3
65210: NEG
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 4
65221: NEG
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 5
65232: NEG
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 5
65243: NEG
65244: PUSH
65245: LD_INT 1
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 5
65255: NEG
65256: PUSH
65257: LD_INT 2
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 3
65267: NEG
65268: PUSH
65269: LD_INT 2
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: NEG
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: NEG
65291: PUSH
65292: LD_INT 4
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: LD_INT 3
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 2
65314: NEG
65315: PUSH
65316: LD_INT 2
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 3
65326: NEG
65327: PUSH
65328: LD_INT 2
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 4
65338: NEG
65339: PUSH
65340: LD_INT 3
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 4
65350: NEG
65351: PUSH
65352: LD_INT 4
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: LD_INT 4
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 4
65374: NEG
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 4
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: LD_INT 5
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: LD_INT 4
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: LD_INT 3
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: LD_INT 3
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: NEG
65442: PUSH
65443: LD_INT 4
65445: NEG
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: LD_INT 5
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 2
65465: PUSH
65466: LD_INT 3
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 2
65476: NEG
65477: PUSH
65478: LD_INT 5
65480: NEG
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65533: LD_ADDR_VAR 0 31
65537: PUSH
65538: LD_INT 0
65540: PUSH
65541: LD_INT 4
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: PUSH
65561: LD_INT 4
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 1
65570: PUSH
65571: LD_INT 5
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 0
65580: PUSH
65581: LD_INT 5
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: LD_INT 4
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: LD_INT 3
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: LD_INT 5
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 2
65622: NEG
65623: PUSH
65624: LD_INT 3
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 3
65633: NEG
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 3
65644: NEG
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 3
65678: NEG
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 4
65689: NEG
65690: PUSH
65691: LD_INT 0
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: NEG
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 4
65712: NEG
65713: PUSH
65714: LD_INT 2
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 2
65724: NEG
65725: PUSH
65726: LD_INT 2
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 4
65735: NEG
65736: PUSH
65737: LD_INT 4
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 4
65747: NEG
65748: PUSH
65749: LD_INT 5
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 3
65759: NEG
65760: PUSH
65761: LD_INT 4
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 3
65771: NEG
65772: PUSH
65773: LD_INT 3
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 4
65783: NEG
65784: PUSH
65785: LD_INT 3
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 5
65795: NEG
65796: PUSH
65797: LD_INT 4
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 5
65807: NEG
65808: PUSH
65809: LD_INT 5
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: LD_INT 5
65823: NEG
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 5
65831: NEG
65832: PUSH
65833: LD_INT 3
65835: NEG
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 3
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 4
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: LD_INT 3
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: LD_INT 3
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 1
65910: NEG
65911: PUSH
65912: LD_INT 4
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 2
65922: PUSH
65923: LD_INT 2
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: LD_INT 4
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 4
65945: PUSH
65946: LD_INT 0
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 4
65955: PUSH
65956: LD_INT 1
65958: NEG
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 5
65966: PUSH
65967: LD_INT 0
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 5
65976: PUSH
65977: LD_INT 1
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 4
65986: PUSH
65987: LD_INT 1
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 3
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: LD_INT 1
66009: NEG
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: LD_INT 2
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 5
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66083: LD_ADDR_VAR 0 32
66087: PUSH
66088: LD_INT 4
66090: NEG
66091: PUSH
66092: LD_INT 0
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 4
66101: NEG
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 3
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 3
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 4
66135: NEG
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 5
66146: NEG
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 5
66157: NEG
66158: PUSH
66159: LD_INT 1
66161: NEG
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 5
66169: NEG
66170: PUSH
66171: LD_INT 2
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 3
66181: NEG
66182: PUSH
66183: LD_INT 2
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: LD_INT 3
66196: NEG
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 3
66204: NEG
66205: PUSH
66206: LD_INT 4
66208: NEG
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: LD_INT 3
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: LD_INT 2
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 3
66240: NEG
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 4
66252: NEG
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 4
66264: NEG
66265: PUSH
66266: LD_INT 4
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: LD_INT 4
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 4
66288: NEG
66289: PUSH
66290: LD_INT 2
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 0
66300: PUSH
66301: LD_INT 4
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 5
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: PUSH
66323: LD_INT 4
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 1
66333: PUSH
66334: LD_INT 3
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 0
66344: PUSH
66345: LD_INT 3
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 1
66355: NEG
66356: PUSH
66357: LD_INT 4
66359: NEG
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 1
66367: NEG
66368: PUSH
66369: LD_INT 5
66371: NEG
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: LD_INT 3
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: NEG
66391: PUSH
66392: LD_INT 5
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 3
66402: PUSH
66403: LD_INT 0
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: PUSH
66410: LD_INT 3
66412: PUSH
66413: LD_INT 1
66415: NEG
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 4
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 4
66433: PUSH
66434: LD_INT 1
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 3
66443: PUSH
66444: LD_INT 1
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: LD_INT 2
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 4
66485: PUSH
66486: LD_INT 2
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 4
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 4
66505: PUSH
66506: LD_INT 3
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 5
66515: PUSH
66516: LD_INT 4
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 5
66525: PUSH
66526: LD_INT 5
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 4
66535: PUSH
66536: LD_INT 5
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: LD_INT 3
66545: PUSH
66546: LD_INT 4
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: LD_INT 3
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 5
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 3
66575: PUSH
66576: LD_INT 5
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66630: LD_ADDR_VAR 0 33
66634: PUSH
66635: LD_INT 4
66637: NEG
66638: PUSH
66639: LD_INT 4
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 4
66649: NEG
66650: PUSH
66651: LD_INT 5
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 3
66661: NEG
66662: PUSH
66663: LD_INT 4
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 3
66673: NEG
66674: PUSH
66675: LD_INT 3
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 4
66685: NEG
66686: PUSH
66687: LD_INT 3
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 5
66697: NEG
66698: PUSH
66699: LD_INT 4
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 5
66709: NEG
66710: PUSH
66711: LD_INT 5
66713: NEG
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 3
66721: NEG
66722: PUSH
66723: LD_INT 5
66725: NEG
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: PUSH
66731: LD_INT 5
66733: NEG
66734: PUSH
66735: LD_INT 3
66737: NEG
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 4
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: LD_INT 3
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: LD_INT 2
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 1
66800: NEG
66801: PUSH
66802: LD_INT 3
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 1
66812: NEG
66813: PUSH
66814: LD_INT 4
66816: NEG
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: LD_INT 2
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 2
66835: NEG
66836: PUSH
66837: LD_INT 4
66839: NEG
66840: PUSH
66841: EMPTY
66842: LIST
66843: LIST
66844: PUSH
66845: LD_INT 4
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 4
66857: PUSH
66858: LD_INT 1
66860: NEG
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 5
66868: PUSH
66869: LD_INT 0
66871: PUSH
66872: EMPTY
66873: LIST
66874: LIST
66875: PUSH
66876: LD_INT 5
66878: PUSH
66879: LD_INT 1
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 4
66888: PUSH
66889: LD_INT 1
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 3
66908: PUSH
66909: LD_INT 1
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 3
66919: PUSH
66920: LD_INT 2
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 5
66930: PUSH
66931: LD_INT 2
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: PUSH
66938: LD_INT 3
66940: PUSH
66941: LD_INT 3
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: LD_INT 2
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PUSH
66958: LD_INT 4
66960: PUSH
66961: LD_INT 3
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 4
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: LD_INT 4
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 2
66990: PUSH
66991: LD_INT 3
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 2
67000: PUSH
67001: LD_INT 2
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 4
67010: PUSH
67011: LD_INT 2
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: LD_INT 4
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 4
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 1
67050: PUSH
67051: LD_INT 4
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 5
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: LD_INT 5
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 4
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: LD_INT 3
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 2
67102: PUSH
67103: LD_INT 5
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 2
67112: NEG
67113: PUSH
67114: LD_INT 3
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67168: LD_ADDR_VAR 0 34
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: LD_INT 4
67178: NEG
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 5
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 1
67197: PUSH
67198: LD_INT 4
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: LD_INT 3
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 1
67230: NEG
67231: PUSH
67232: LD_INT 4
67234: NEG
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 1
67242: NEG
67243: PUSH
67244: LD_INT 5
67246: NEG
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 2
67254: PUSH
67255: LD_INT 3
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 2
67265: NEG
67266: PUSH
67267: LD_INT 5
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 3
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 4
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 4
67308: PUSH
67309: LD_INT 1
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 3
67318: PUSH
67319: LD_INT 1
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 2
67328: PUSH
67329: LD_INT 0
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 2
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: LD_INT 2
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 4
67360: PUSH
67361: LD_INT 2
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 4
67370: PUSH
67371: LD_INT 4
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 4
67380: PUSH
67381: LD_INT 3
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 5
67390: PUSH
67391: LD_INT 4
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 5
67400: PUSH
67401: LD_INT 5
67403: PUSH
67404: EMPTY
67405: LIST
67406: LIST
67407: PUSH
67408: LD_INT 4
67410: PUSH
67411: LD_INT 5
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 3
67420: PUSH
67421: LD_INT 4
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: LD_INT 3
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: LD_INT 5
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 3
67450: PUSH
67451: LD_INT 5
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 3
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 2
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: LD_INT 4
67493: PUSH
67494: EMPTY
67495: LIST
67496: LIST
67497: PUSH
67498: LD_INT 0
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 1
67510: NEG
67511: PUSH
67512: LD_INT 3
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 2
67532: PUSH
67533: LD_INT 4
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 2
67542: NEG
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 4
67553: NEG
67554: PUSH
67555: LD_INT 0
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: LD_INT 1
67568: NEG
67569: PUSH
67570: EMPTY
67571: LIST
67572: LIST
67573: PUSH
67574: LD_INT 3
67576: NEG
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 1
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 4
67598: NEG
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 5
67609: NEG
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 5
67620: NEG
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 5
67632: NEG
67633: PUSH
67634: LD_INT 2
67636: NEG
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 3
67644: NEG
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// end ; end ;
67700: GO 67703
67702: POP
// case btype of b_depot , b_warehouse :
67703: LD_VAR 0 1
67707: PUSH
67708: LD_INT 0
67710: DOUBLE
67711: EQUAL
67712: IFTRUE 67722
67714: LD_INT 1
67716: DOUBLE
67717: EQUAL
67718: IFTRUE 67722
67720: GO 67923
67722: POP
// case nation of nation_american :
67723: LD_VAR 0 5
67727: PUSH
67728: LD_INT 1
67730: DOUBLE
67731: EQUAL
67732: IFTRUE 67736
67734: GO 67792
67736: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67737: LD_ADDR_VAR 0 9
67741: PUSH
67742: LD_VAR 0 11
67746: PUSH
67747: LD_VAR 0 12
67751: PUSH
67752: LD_VAR 0 13
67756: PUSH
67757: LD_VAR 0 14
67761: PUSH
67762: LD_VAR 0 15
67766: PUSH
67767: LD_VAR 0 16
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: PUSH
67780: LD_VAR 0 4
67784: PUSH
67785: LD_INT 1
67787: PLUS
67788: ARRAY
67789: ST_TO_ADDR
67790: GO 67921
67792: LD_INT 2
67794: DOUBLE
67795: EQUAL
67796: IFTRUE 67800
67798: GO 67856
67800: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67801: LD_ADDR_VAR 0 9
67805: PUSH
67806: LD_VAR 0 17
67810: PUSH
67811: LD_VAR 0 18
67815: PUSH
67816: LD_VAR 0 19
67820: PUSH
67821: LD_VAR 0 20
67825: PUSH
67826: LD_VAR 0 21
67830: PUSH
67831: LD_VAR 0 22
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: PUSH
67844: LD_VAR 0 4
67848: PUSH
67849: LD_INT 1
67851: PLUS
67852: ARRAY
67853: ST_TO_ADDR
67854: GO 67921
67856: LD_INT 3
67858: DOUBLE
67859: EQUAL
67860: IFTRUE 67864
67862: GO 67920
67864: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67865: LD_ADDR_VAR 0 9
67869: PUSH
67870: LD_VAR 0 23
67874: PUSH
67875: LD_VAR 0 24
67879: PUSH
67880: LD_VAR 0 25
67884: PUSH
67885: LD_VAR 0 26
67889: PUSH
67890: LD_VAR 0 27
67894: PUSH
67895: LD_VAR 0 28
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: PUSH
67908: LD_VAR 0 4
67912: PUSH
67913: LD_INT 1
67915: PLUS
67916: ARRAY
67917: ST_TO_ADDR
67918: GO 67921
67920: POP
67921: GO 68476
67923: LD_INT 2
67925: DOUBLE
67926: EQUAL
67927: IFTRUE 67937
67929: LD_INT 3
67931: DOUBLE
67932: EQUAL
67933: IFTRUE 67937
67935: GO 67993
67937: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67938: LD_ADDR_VAR 0 9
67942: PUSH
67943: LD_VAR 0 29
67947: PUSH
67948: LD_VAR 0 30
67952: PUSH
67953: LD_VAR 0 31
67957: PUSH
67958: LD_VAR 0 32
67962: PUSH
67963: LD_VAR 0 33
67967: PUSH
67968: LD_VAR 0 34
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: PUSH
67981: LD_VAR 0 4
67985: PUSH
67986: LD_INT 1
67988: PLUS
67989: ARRAY
67990: ST_TO_ADDR
67991: GO 68476
67993: LD_INT 16
67995: DOUBLE
67996: EQUAL
67997: IFTRUE 68055
67999: LD_INT 17
68001: DOUBLE
68002: EQUAL
68003: IFTRUE 68055
68005: LD_INT 18
68007: DOUBLE
68008: EQUAL
68009: IFTRUE 68055
68011: LD_INT 19
68013: DOUBLE
68014: EQUAL
68015: IFTRUE 68055
68017: LD_INT 22
68019: DOUBLE
68020: EQUAL
68021: IFTRUE 68055
68023: LD_INT 20
68025: DOUBLE
68026: EQUAL
68027: IFTRUE 68055
68029: LD_INT 21
68031: DOUBLE
68032: EQUAL
68033: IFTRUE 68055
68035: LD_INT 23
68037: DOUBLE
68038: EQUAL
68039: IFTRUE 68055
68041: LD_INT 24
68043: DOUBLE
68044: EQUAL
68045: IFTRUE 68055
68047: LD_INT 25
68049: DOUBLE
68050: EQUAL
68051: IFTRUE 68055
68053: GO 68111
68055: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68056: LD_ADDR_VAR 0 9
68060: PUSH
68061: LD_VAR 0 35
68065: PUSH
68066: LD_VAR 0 36
68070: PUSH
68071: LD_VAR 0 37
68075: PUSH
68076: LD_VAR 0 38
68080: PUSH
68081: LD_VAR 0 39
68085: PUSH
68086: LD_VAR 0 40
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: PUSH
68099: LD_VAR 0 4
68103: PUSH
68104: LD_INT 1
68106: PLUS
68107: ARRAY
68108: ST_TO_ADDR
68109: GO 68476
68111: LD_INT 6
68113: DOUBLE
68114: EQUAL
68115: IFTRUE 68167
68117: LD_INT 7
68119: DOUBLE
68120: EQUAL
68121: IFTRUE 68167
68123: LD_INT 8
68125: DOUBLE
68126: EQUAL
68127: IFTRUE 68167
68129: LD_INT 13
68131: DOUBLE
68132: EQUAL
68133: IFTRUE 68167
68135: LD_INT 12
68137: DOUBLE
68138: EQUAL
68139: IFTRUE 68167
68141: LD_INT 15
68143: DOUBLE
68144: EQUAL
68145: IFTRUE 68167
68147: LD_INT 11
68149: DOUBLE
68150: EQUAL
68151: IFTRUE 68167
68153: LD_INT 14
68155: DOUBLE
68156: EQUAL
68157: IFTRUE 68167
68159: LD_INT 10
68161: DOUBLE
68162: EQUAL
68163: IFTRUE 68167
68165: GO 68223
68167: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68168: LD_ADDR_VAR 0 9
68172: PUSH
68173: LD_VAR 0 41
68177: PUSH
68178: LD_VAR 0 42
68182: PUSH
68183: LD_VAR 0 43
68187: PUSH
68188: LD_VAR 0 44
68192: PUSH
68193: LD_VAR 0 45
68197: PUSH
68198: LD_VAR 0 46
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: LIST
68207: LIST
68208: LIST
68209: LIST
68210: PUSH
68211: LD_VAR 0 4
68215: PUSH
68216: LD_INT 1
68218: PLUS
68219: ARRAY
68220: ST_TO_ADDR
68221: GO 68476
68223: LD_INT 36
68225: DOUBLE
68226: EQUAL
68227: IFTRUE 68231
68229: GO 68287
68231: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68232: LD_ADDR_VAR 0 9
68236: PUSH
68237: LD_VAR 0 47
68241: PUSH
68242: LD_VAR 0 48
68246: PUSH
68247: LD_VAR 0 49
68251: PUSH
68252: LD_VAR 0 50
68256: PUSH
68257: LD_VAR 0 51
68261: PUSH
68262: LD_VAR 0 52
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: PUSH
68275: LD_VAR 0 4
68279: PUSH
68280: LD_INT 1
68282: PLUS
68283: ARRAY
68284: ST_TO_ADDR
68285: GO 68476
68287: LD_INT 4
68289: DOUBLE
68290: EQUAL
68291: IFTRUE 68313
68293: LD_INT 5
68295: DOUBLE
68296: EQUAL
68297: IFTRUE 68313
68299: LD_INT 34
68301: DOUBLE
68302: EQUAL
68303: IFTRUE 68313
68305: LD_INT 37
68307: DOUBLE
68308: EQUAL
68309: IFTRUE 68313
68311: GO 68369
68313: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68314: LD_ADDR_VAR 0 9
68318: PUSH
68319: LD_VAR 0 53
68323: PUSH
68324: LD_VAR 0 54
68328: PUSH
68329: LD_VAR 0 55
68333: PUSH
68334: LD_VAR 0 56
68338: PUSH
68339: LD_VAR 0 57
68343: PUSH
68344: LD_VAR 0 58
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: PUSH
68357: LD_VAR 0 4
68361: PUSH
68362: LD_INT 1
68364: PLUS
68365: ARRAY
68366: ST_TO_ADDR
68367: GO 68476
68369: LD_INT 31
68371: DOUBLE
68372: EQUAL
68373: IFTRUE 68419
68375: LD_INT 32
68377: DOUBLE
68378: EQUAL
68379: IFTRUE 68419
68381: LD_INT 33
68383: DOUBLE
68384: EQUAL
68385: IFTRUE 68419
68387: LD_INT 27
68389: DOUBLE
68390: EQUAL
68391: IFTRUE 68419
68393: LD_INT 26
68395: DOUBLE
68396: EQUAL
68397: IFTRUE 68419
68399: LD_INT 28
68401: DOUBLE
68402: EQUAL
68403: IFTRUE 68419
68405: LD_INT 29
68407: DOUBLE
68408: EQUAL
68409: IFTRUE 68419
68411: LD_INT 30
68413: DOUBLE
68414: EQUAL
68415: IFTRUE 68419
68417: GO 68475
68419: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68420: LD_ADDR_VAR 0 9
68424: PUSH
68425: LD_VAR 0 59
68429: PUSH
68430: LD_VAR 0 60
68434: PUSH
68435: LD_VAR 0 61
68439: PUSH
68440: LD_VAR 0 62
68444: PUSH
68445: LD_VAR 0 63
68449: PUSH
68450: LD_VAR 0 64
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: PUSH
68463: LD_VAR 0 4
68467: PUSH
68468: LD_INT 1
68470: PLUS
68471: ARRAY
68472: ST_TO_ADDR
68473: GO 68476
68475: POP
// temp_list2 = [ ] ;
68476: LD_ADDR_VAR 0 10
68480: PUSH
68481: EMPTY
68482: ST_TO_ADDR
// for i in temp_list do
68483: LD_ADDR_VAR 0 8
68487: PUSH
68488: LD_VAR 0 9
68492: PUSH
68493: FOR_IN
68494: IFFALSE 68546
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68496: LD_ADDR_VAR 0 10
68500: PUSH
68501: LD_VAR 0 10
68505: PUSH
68506: LD_VAR 0 8
68510: PUSH
68511: LD_INT 1
68513: ARRAY
68514: PUSH
68515: LD_VAR 0 2
68519: PLUS
68520: PUSH
68521: LD_VAR 0 8
68525: PUSH
68526: LD_INT 2
68528: ARRAY
68529: PUSH
68530: LD_VAR 0 3
68534: PLUS
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: EMPTY
68541: LIST
68542: ADD
68543: ST_TO_ADDR
68544: GO 68493
68546: POP
68547: POP
// result = temp_list2 ;
68548: LD_ADDR_VAR 0 7
68552: PUSH
68553: LD_VAR 0 10
68557: ST_TO_ADDR
// end ;
68558: LD_VAR 0 7
68562: RET
// export function EnemyInRange ( unit , dist ) ; begin
68563: LD_INT 0
68565: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68566: LD_ADDR_VAR 0 3
68570: PUSH
68571: LD_VAR 0 1
68575: PPUSH
68576: CALL_OW 255
68580: PPUSH
68581: LD_VAR 0 1
68585: PPUSH
68586: CALL_OW 250
68590: PPUSH
68591: LD_VAR 0 1
68595: PPUSH
68596: CALL_OW 251
68600: PPUSH
68601: LD_VAR 0 2
68605: PPUSH
68606: CALL 42667 0 4
68610: PUSH
68611: LD_INT 4
68613: ARRAY
68614: ST_TO_ADDR
// end ;
68615: LD_VAR 0 3
68619: RET
// export function PlayerSeeMe ( unit ) ; begin
68620: LD_INT 0
68622: PPUSH
// result := See ( your_side , unit ) ;
68623: LD_ADDR_VAR 0 2
68627: PUSH
68628: LD_OWVAR 2
68632: PPUSH
68633: LD_VAR 0 1
68637: PPUSH
68638: CALL_OW 292
68642: ST_TO_ADDR
// end ;
68643: LD_VAR 0 2
68647: RET
// export function ReverseDir ( unit ) ; begin
68648: LD_INT 0
68650: PPUSH
// if not unit then
68651: LD_VAR 0 1
68655: NOT
68656: IFFALSE 68660
// exit ;
68658: GO 68683
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68660: LD_ADDR_VAR 0 2
68664: PUSH
68665: LD_VAR 0 1
68669: PPUSH
68670: CALL_OW 254
68674: PUSH
68675: LD_INT 3
68677: PLUS
68678: PUSH
68679: LD_INT 6
68681: MOD
68682: ST_TO_ADDR
// end ;
68683: LD_VAR 0 2
68687: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
68688: LD_INT 0
68690: PPUSH
68691: PPUSH
68692: PPUSH
68693: PPUSH
68694: PPUSH
// if not hexes then
68695: LD_VAR 0 2
68699: NOT
68700: IFFALSE 68704
// exit ;
68702: GO 68852
// dist := 9999 ;
68704: LD_ADDR_VAR 0 5
68708: PUSH
68709: LD_INT 9999
68711: ST_TO_ADDR
// for i = 1 to hexes do
68712: LD_ADDR_VAR 0 4
68716: PUSH
68717: DOUBLE
68718: LD_INT 1
68720: DEC
68721: ST_TO_ADDR
68722: LD_VAR 0 2
68726: PUSH
68727: FOR_TO
68728: IFFALSE 68840
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
68730: LD_VAR 0 1
68734: PPUSH
68735: LD_VAR 0 2
68739: PUSH
68740: LD_VAR 0 4
68744: ARRAY
68745: PUSH
68746: LD_INT 1
68748: ARRAY
68749: PPUSH
68750: LD_VAR 0 2
68754: PUSH
68755: LD_VAR 0 4
68759: ARRAY
68760: PUSH
68761: LD_INT 2
68763: ARRAY
68764: PPUSH
68765: CALL_OW 297
68769: PUSH
68770: LD_VAR 0 5
68774: LESS
68775: IFFALSE 68838
// begin hex := hexes [ i ] ;
68777: LD_ADDR_VAR 0 7
68781: PUSH
68782: LD_VAR 0 2
68786: PUSH
68787: LD_VAR 0 4
68791: ARRAY
68792: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68793: LD_ADDR_VAR 0 5
68797: PUSH
68798: LD_VAR 0 1
68802: PPUSH
68803: LD_VAR 0 2
68807: PUSH
68808: LD_VAR 0 4
68812: ARRAY
68813: PUSH
68814: LD_INT 1
68816: ARRAY
68817: PPUSH
68818: LD_VAR 0 2
68822: PUSH
68823: LD_VAR 0 4
68827: ARRAY
68828: PUSH
68829: LD_INT 2
68831: ARRAY
68832: PPUSH
68833: CALL_OW 297
68837: ST_TO_ADDR
// end ; end ;
68838: GO 68727
68840: POP
68841: POP
// result := hex ;
68842: LD_ADDR_VAR 0 3
68846: PUSH
68847: LD_VAR 0 7
68851: ST_TO_ADDR
// end ;
68852: LD_VAR 0 3
68856: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68857: LD_INT 0
68859: PPUSH
68860: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68861: LD_VAR 0 1
68865: NOT
68866: PUSH
68867: LD_VAR 0 1
68871: PUSH
68872: LD_INT 21
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 23
68884: PUSH
68885: LD_INT 2
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: EMPTY
68893: LIST
68894: LIST
68895: PPUSH
68896: CALL_OW 69
68900: IN
68901: NOT
68902: OR
68903: IFFALSE 68907
// exit ;
68905: GO 68954
// for i = 1 to 3 do
68907: LD_ADDR_VAR 0 3
68911: PUSH
68912: DOUBLE
68913: LD_INT 1
68915: DEC
68916: ST_TO_ADDR
68917: LD_INT 3
68919: PUSH
68920: FOR_TO
68921: IFFALSE 68952
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68923: LD_VAR 0 1
68927: PPUSH
68928: CALL_OW 250
68932: PPUSH
68933: LD_VAR 0 1
68937: PPUSH
68938: CALL_OW 251
68942: PPUSH
68943: LD_INT 1
68945: PPUSH
68946: CALL_OW 453
68950: GO 68920
68952: POP
68953: POP
// end ;
68954: LD_VAR 0 2
68958: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68959: LD_INT 0
68961: PPUSH
68962: PPUSH
68963: PPUSH
68964: PPUSH
68965: PPUSH
68966: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68967: LD_VAR 0 1
68971: NOT
68972: PUSH
68973: LD_VAR 0 2
68977: NOT
68978: OR
68979: PUSH
68980: LD_VAR 0 1
68984: PPUSH
68985: CALL_OW 314
68989: OR
68990: IFFALSE 68994
// exit ;
68992: GO 69435
// x := GetX ( enemy_unit ) ;
68994: LD_ADDR_VAR 0 7
68998: PUSH
68999: LD_VAR 0 2
69003: PPUSH
69004: CALL_OW 250
69008: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69009: LD_ADDR_VAR 0 8
69013: PUSH
69014: LD_VAR 0 2
69018: PPUSH
69019: CALL_OW 251
69023: ST_TO_ADDR
// if not x or not y then
69024: LD_VAR 0 7
69028: NOT
69029: PUSH
69030: LD_VAR 0 8
69034: NOT
69035: OR
69036: IFFALSE 69040
// exit ;
69038: GO 69435
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69040: LD_ADDR_VAR 0 6
69044: PUSH
69045: LD_VAR 0 7
69049: PPUSH
69050: LD_INT 0
69052: PPUSH
69053: LD_INT 4
69055: PPUSH
69056: CALL_OW 272
69060: PUSH
69061: LD_VAR 0 8
69065: PPUSH
69066: LD_INT 0
69068: PPUSH
69069: LD_INT 4
69071: PPUSH
69072: CALL_OW 273
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_VAR 0 7
69085: PPUSH
69086: LD_INT 1
69088: PPUSH
69089: LD_INT 4
69091: PPUSH
69092: CALL_OW 272
69096: PUSH
69097: LD_VAR 0 8
69101: PPUSH
69102: LD_INT 1
69104: PPUSH
69105: LD_INT 4
69107: PPUSH
69108: CALL_OW 273
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: PUSH
69117: LD_VAR 0 7
69121: PPUSH
69122: LD_INT 2
69124: PPUSH
69125: LD_INT 4
69127: PPUSH
69128: CALL_OW 272
69132: PUSH
69133: LD_VAR 0 8
69137: PPUSH
69138: LD_INT 2
69140: PPUSH
69141: LD_INT 4
69143: PPUSH
69144: CALL_OW 273
69148: PUSH
69149: EMPTY
69150: LIST
69151: LIST
69152: PUSH
69153: LD_VAR 0 7
69157: PPUSH
69158: LD_INT 3
69160: PPUSH
69161: LD_INT 4
69163: PPUSH
69164: CALL_OW 272
69168: PUSH
69169: LD_VAR 0 8
69173: PPUSH
69174: LD_INT 3
69176: PPUSH
69177: LD_INT 4
69179: PPUSH
69180: CALL_OW 273
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_VAR 0 7
69193: PPUSH
69194: LD_INT 4
69196: PPUSH
69197: LD_INT 4
69199: PPUSH
69200: CALL_OW 272
69204: PUSH
69205: LD_VAR 0 8
69209: PPUSH
69210: LD_INT 4
69212: PPUSH
69213: LD_INT 4
69215: PPUSH
69216: CALL_OW 273
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_VAR 0 7
69229: PPUSH
69230: LD_INT 5
69232: PPUSH
69233: LD_INT 4
69235: PPUSH
69236: CALL_OW 272
69240: PUSH
69241: LD_VAR 0 8
69245: PPUSH
69246: LD_INT 5
69248: PPUSH
69249: LD_INT 4
69251: PPUSH
69252: CALL_OW 273
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: ST_TO_ADDR
// for i = tmp downto 1 do
69269: LD_ADDR_VAR 0 4
69273: PUSH
69274: DOUBLE
69275: LD_VAR 0 6
69279: INC
69280: ST_TO_ADDR
69281: LD_INT 1
69283: PUSH
69284: FOR_DOWNTO
69285: IFFALSE 69386
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69287: LD_VAR 0 6
69291: PUSH
69292: LD_VAR 0 4
69296: ARRAY
69297: PUSH
69298: LD_INT 1
69300: ARRAY
69301: PPUSH
69302: LD_VAR 0 6
69306: PUSH
69307: LD_VAR 0 4
69311: ARRAY
69312: PUSH
69313: LD_INT 2
69315: ARRAY
69316: PPUSH
69317: CALL_OW 488
69321: NOT
69322: PUSH
69323: LD_VAR 0 6
69327: PUSH
69328: LD_VAR 0 4
69332: ARRAY
69333: PUSH
69334: LD_INT 1
69336: ARRAY
69337: PPUSH
69338: LD_VAR 0 6
69342: PUSH
69343: LD_VAR 0 4
69347: ARRAY
69348: PUSH
69349: LD_INT 2
69351: ARRAY
69352: PPUSH
69353: CALL_OW 428
69357: PUSH
69358: LD_INT 0
69360: NONEQUAL
69361: OR
69362: IFFALSE 69384
// tmp := Delete ( tmp , i ) ;
69364: LD_ADDR_VAR 0 6
69368: PUSH
69369: LD_VAR 0 6
69373: PPUSH
69374: LD_VAR 0 4
69378: PPUSH
69379: CALL_OW 3
69383: ST_TO_ADDR
69384: GO 69284
69386: POP
69387: POP
// j := GetClosestHex ( unit , tmp ) ;
69388: LD_ADDR_VAR 0 5
69392: PUSH
69393: LD_VAR 0 1
69397: PPUSH
69398: LD_VAR 0 6
69402: PPUSH
69403: CALL 68688 0 2
69407: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69408: LD_VAR 0 1
69412: PPUSH
69413: LD_VAR 0 5
69417: PUSH
69418: LD_INT 1
69420: ARRAY
69421: PPUSH
69422: LD_VAR 0 5
69426: PUSH
69427: LD_INT 2
69429: ARRAY
69430: PPUSH
69431: CALL_OW 111
// end ;
69435: LD_VAR 0 3
69439: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69440: LD_INT 0
69442: PPUSH
69443: PPUSH
69444: PPUSH
// uc_side = 0 ;
69445: LD_ADDR_OWVAR 20
69449: PUSH
69450: LD_INT 0
69452: ST_TO_ADDR
// uc_nation = 0 ;
69453: LD_ADDR_OWVAR 21
69457: PUSH
69458: LD_INT 0
69460: ST_TO_ADDR
// InitHc_All ( ) ;
69461: CALL_OW 584
// InitVc ;
69465: CALL_OW 20
// if mastodonts then
69469: LD_VAR 0 6
69473: IFFALSE 69540
// for i = 1 to mastodonts do
69475: LD_ADDR_VAR 0 11
69479: PUSH
69480: DOUBLE
69481: LD_INT 1
69483: DEC
69484: ST_TO_ADDR
69485: LD_VAR 0 6
69489: PUSH
69490: FOR_TO
69491: IFFALSE 69538
// begin vc_chassis := 31 ;
69493: LD_ADDR_OWVAR 37
69497: PUSH
69498: LD_INT 31
69500: ST_TO_ADDR
// vc_control := control_rider ;
69501: LD_ADDR_OWVAR 38
69505: PUSH
69506: LD_INT 4
69508: ST_TO_ADDR
// animal := CreateVehicle ;
69509: LD_ADDR_VAR 0 12
69513: PUSH
69514: CALL_OW 45
69518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69519: LD_VAR 0 12
69523: PPUSH
69524: LD_VAR 0 8
69528: PPUSH
69529: LD_INT 0
69531: PPUSH
69532: CALL 71728 0 3
// end ;
69536: GO 69490
69538: POP
69539: POP
// if horses then
69540: LD_VAR 0 5
69544: IFFALSE 69611
// for i = 1 to horses do
69546: LD_ADDR_VAR 0 11
69550: PUSH
69551: DOUBLE
69552: LD_INT 1
69554: DEC
69555: ST_TO_ADDR
69556: LD_VAR 0 5
69560: PUSH
69561: FOR_TO
69562: IFFALSE 69609
// begin hc_class := 21 ;
69564: LD_ADDR_OWVAR 28
69568: PUSH
69569: LD_INT 21
69571: ST_TO_ADDR
// hc_gallery :=  ;
69572: LD_ADDR_OWVAR 33
69576: PUSH
69577: LD_STRING 
69579: ST_TO_ADDR
// animal := CreateHuman ;
69580: LD_ADDR_VAR 0 12
69584: PUSH
69585: CALL_OW 44
69589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69590: LD_VAR 0 12
69594: PPUSH
69595: LD_VAR 0 8
69599: PPUSH
69600: LD_INT 0
69602: PPUSH
69603: CALL 71728 0 3
// end ;
69607: GO 69561
69609: POP
69610: POP
// if birds then
69611: LD_VAR 0 1
69615: IFFALSE 69682
// for i = 1 to birds do
69617: LD_ADDR_VAR 0 11
69621: PUSH
69622: DOUBLE
69623: LD_INT 1
69625: DEC
69626: ST_TO_ADDR
69627: LD_VAR 0 1
69631: PUSH
69632: FOR_TO
69633: IFFALSE 69680
// begin hc_class = 18 ;
69635: LD_ADDR_OWVAR 28
69639: PUSH
69640: LD_INT 18
69642: ST_TO_ADDR
// hc_gallery =  ;
69643: LD_ADDR_OWVAR 33
69647: PUSH
69648: LD_STRING 
69650: ST_TO_ADDR
// animal := CreateHuman ;
69651: LD_ADDR_VAR 0 12
69655: PUSH
69656: CALL_OW 44
69660: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69661: LD_VAR 0 12
69665: PPUSH
69666: LD_VAR 0 8
69670: PPUSH
69671: LD_INT 0
69673: PPUSH
69674: CALL 71728 0 3
// end ;
69678: GO 69632
69680: POP
69681: POP
// if tigers then
69682: LD_VAR 0 2
69686: IFFALSE 69770
// for i = 1 to tigers do
69688: LD_ADDR_VAR 0 11
69692: PUSH
69693: DOUBLE
69694: LD_INT 1
69696: DEC
69697: ST_TO_ADDR
69698: LD_VAR 0 2
69702: PUSH
69703: FOR_TO
69704: IFFALSE 69768
// begin hc_class = class_tiger ;
69706: LD_ADDR_OWVAR 28
69710: PUSH
69711: LD_INT 14
69713: ST_TO_ADDR
// hc_gallery =  ;
69714: LD_ADDR_OWVAR 33
69718: PUSH
69719: LD_STRING 
69721: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69722: LD_ADDR_OWVAR 35
69726: PUSH
69727: LD_INT 7
69729: NEG
69730: PPUSH
69731: LD_INT 7
69733: PPUSH
69734: CALL_OW 12
69738: ST_TO_ADDR
// animal := CreateHuman ;
69739: LD_ADDR_VAR 0 12
69743: PUSH
69744: CALL_OW 44
69748: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69749: LD_VAR 0 12
69753: PPUSH
69754: LD_VAR 0 8
69758: PPUSH
69759: LD_INT 0
69761: PPUSH
69762: CALL 71728 0 3
// end ;
69766: GO 69703
69768: POP
69769: POP
// if apemans then
69770: LD_VAR 0 3
69774: IFFALSE 69897
// for i = 1 to apemans do
69776: LD_ADDR_VAR 0 11
69780: PUSH
69781: DOUBLE
69782: LD_INT 1
69784: DEC
69785: ST_TO_ADDR
69786: LD_VAR 0 3
69790: PUSH
69791: FOR_TO
69792: IFFALSE 69895
// begin hc_class = class_apeman ;
69794: LD_ADDR_OWVAR 28
69798: PUSH
69799: LD_INT 12
69801: ST_TO_ADDR
// hc_gallery =  ;
69802: LD_ADDR_OWVAR 33
69806: PUSH
69807: LD_STRING 
69809: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
69810: LD_ADDR_OWVAR 35
69814: PUSH
69815: LD_INT 5
69817: NEG
69818: PPUSH
69819: LD_INT 5
69821: PPUSH
69822: CALL_OW 12
69826: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69827: LD_ADDR_OWVAR 31
69831: PUSH
69832: LD_INT 1
69834: PPUSH
69835: LD_INT 3
69837: PPUSH
69838: CALL_OW 12
69842: PUSH
69843: LD_INT 1
69845: PPUSH
69846: LD_INT 3
69848: PPUSH
69849: CALL_OW 12
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: ST_TO_ADDR
// animal := CreateHuman ;
69866: LD_ADDR_VAR 0 12
69870: PUSH
69871: CALL_OW 44
69875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69876: LD_VAR 0 12
69880: PPUSH
69881: LD_VAR 0 8
69885: PPUSH
69886: LD_INT 0
69888: PPUSH
69889: CALL 71728 0 3
// end ;
69893: GO 69791
69895: POP
69896: POP
// if enchidnas then
69897: LD_VAR 0 4
69901: IFFALSE 69968
// for i = 1 to enchidnas do
69903: LD_ADDR_VAR 0 11
69907: PUSH
69908: DOUBLE
69909: LD_INT 1
69911: DEC
69912: ST_TO_ADDR
69913: LD_VAR 0 4
69917: PUSH
69918: FOR_TO
69919: IFFALSE 69966
// begin hc_class = 13 ;
69921: LD_ADDR_OWVAR 28
69925: PUSH
69926: LD_INT 13
69928: ST_TO_ADDR
// hc_gallery =  ;
69929: LD_ADDR_OWVAR 33
69933: PUSH
69934: LD_STRING 
69936: ST_TO_ADDR
// animal := CreateHuman ;
69937: LD_ADDR_VAR 0 12
69941: PUSH
69942: CALL_OW 44
69946: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69947: LD_VAR 0 12
69951: PPUSH
69952: LD_VAR 0 8
69956: PPUSH
69957: LD_INT 0
69959: PPUSH
69960: CALL 71728 0 3
// end ;
69964: GO 69918
69966: POP
69967: POP
// if fishes then
69968: LD_VAR 0 7
69972: IFFALSE 70039
// for i = 1 to fishes do
69974: LD_ADDR_VAR 0 11
69978: PUSH
69979: DOUBLE
69980: LD_INT 1
69982: DEC
69983: ST_TO_ADDR
69984: LD_VAR 0 7
69988: PUSH
69989: FOR_TO
69990: IFFALSE 70037
// begin hc_class = 20 ;
69992: LD_ADDR_OWVAR 28
69996: PUSH
69997: LD_INT 20
69999: ST_TO_ADDR
// hc_gallery =  ;
70000: LD_ADDR_OWVAR 33
70004: PUSH
70005: LD_STRING 
70007: ST_TO_ADDR
// animal := CreateHuman ;
70008: LD_ADDR_VAR 0 12
70012: PUSH
70013: CALL_OW 44
70017: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70018: LD_VAR 0 12
70022: PPUSH
70023: LD_VAR 0 9
70027: PPUSH
70028: LD_INT 0
70030: PPUSH
70031: CALL 71728 0 3
// end ;
70035: GO 69989
70037: POP
70038: POP
// end ;
70039: LD_VAR 0 10
70043: RET
// export function WantHeal ( sci , unit ) ; begin
70044: LD_INT 0
70046: PPUSH
// if GetTaskList ( sci ) > 0 then
70047: LD_VAR 0 1
70051: PPUSH
70052: CALL_OW 437
70056: PUSH
70057: LD_INT 0
70059: GREATER
70060: IFFALSE 70130
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70062: LD_VAR 0 1
70066: PPUSH
70067: CALL_OW 437
70071: PUSH
70072: LD_INT 1
70074: ARRAY
70075: PUSH
70076: LD_INT 1
70078: ARRAY
70079: PUSH
70080: LD_STRING l
70082: EQUAL
70083: PUSH
70084: LD_VAR 0 1
70088: PPUSH
70089: CALL_OW 437
70093: PUSH
70094: LD_INT 1
70096: ARRAY
70097: PUSH
70098: LD_INT 4
70100: ARRAY
70101: PUSH
70102: LD_VAR 0 2
70106: EQUAL
70107: AND
70108: IFFALSE 70120
// result := true else
70110: LD_ADDR_VAR 0 3
70114: PUSH
70115: LD_INT 1
70117: ST_TO_ADDR
70118: GO 70128
// result := false ;
70120: LD_ADDR_VAR 0 3
70124: PUSH
70125: LD_INT 0
70127: ST_TO_ADDR
// end else
70128: GO 70138
// result := false ;
70130: LD_ADDR_VAR 0 3
70134: PUSH
70135: LD_INT 0
70137: ST_TO_ADDR
// end ;
70138: LD_VAR 0 3
70142: RET
// export function HealTarget ( sci ) ; begin
70143: LD_INT 0
70145: PPUSH
// if not sci then
70146: LD_VAR 0 1
70150: NOT
70151: IFFALSE 70155
// exit ;
70153: GO 70220
// result := 0 ;
70155: LD_ADDR_VAR 0 2
70159: PUSH
70160: LD_INT 0
70162: ST_TO_ADDR
// if GetTaskList ( sci ) then
70163: LD_VAR 0 1
70167: PPUSH
70168: CALL_OW 437
70172: IFFALSE 70220
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70174: LD_VAR 0 1
70178: PPUSH
70179: CALL_OW 437
70183: PUSH
70184: LD_INT 1
70186: ARRAY
70187: PUSH
70188: LD_INT 1
70190: ARRAY
70191: PUSH
70192: LD_STRING l
70194: EQUAL
70195: IFFALSE 70220
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70197: LD_ADDR_VAR 0 2
70201: PUSH
70202: LD_VAR 0 1
70206: PPUSH
70207: CALL_OW 437
70211: PUSH
70212: LD_INT 1
70214: ARRAY
70215: PUSH
70216: LD_INT 4
70218: ARRAY
70219: ST_TO_ADDR
// end ;
70220: LD_VAR 0 2
70224: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70225: LD_INT 0
70227: PPUSH
70228: PPUSH
70229: PPUSH
70230: PPUSH
// if not base_units then
70231: LD_VAR 0 1
70235: NOT
70236: IFFALSE 70240
// exit ;
70238: GO 70327
// result := false ;
70240: LD_ADDR_VAR 0 2
70244: PUSH
70245: LD_INT 0
70247: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70248: LD_ADDR_VAR 0 5
70252: PUSH
70253: LD_VAR 0 1
70257: PPUSH
70258: LD_INT 21
70260: PUSH
70261: LD_INT 3
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PPUSH
70268: CALL_OW 72
70272: ST_TO_ADDR
// if not tmp then
70273: LD_VAR 0 5
70277: NOT
70278: IFFALSE 70282
// exit ;
70280: GO 70327
// for i in tmp do
70282: LD_ADDR_VAR 0 3
70286: PUSH
70287: LD_VAR 0 5
70291: PUSH
70292: FOR_IN
70293: IFFALSE 70325
// begin result := EnemyInRange ( i , 22 ) ;
70295: LD_ADDR_VAR 0 2
70299: PUSH
70300: LD_VAR 0 3
70304: PPUSH
70305: LD_INT 22
70307: PPUSH
70308: CALL 68563 0 2
70312: ST_TO_ADDR
// if result then
70313: LD_VAR 0 2
70317: IFFALSE 70323
// exit ;
70319: POP
70320: POP
70321: GO 70327
// end ;
70323: GO 70292
70325: POP
70326: POP
// end ;
70327: LD_VAR 0 2
70331: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
70332: LD_INT 0
70334: PPUSH
70335: PPUSH
// if not units then
70336: LD_VAR 0 1
70340: NOT
70341: IFFALSE 70345
// exit ;
70343: GO 70415
// result := [ ] ;
70345: LD_ADDR_VAR 0 3
70349: PUSH
70350: EMPTY
70351: ST_TO_ADDR
// for i in units do
70352: LD_ADDR_VAR 0 4
70356: PUSH
70357: LD_VAR 0 1
70361: PUSH
70362: FOR_IN
70363: IFFALSE 70413
// if GetTag ( i ) = tag then
70365: LD_VAR 0 4
70369: PPUSH
70370: CALL_OW 110
70374: PUSH
70375: LD_VAR 0 2
70379: EQUAL
70380: IFFALSE 70411
// result := Insert ( result , result + 1 , i ) ;
70382: LD_ADDR_VAR 0 3
70386: PUSH
70387: LD_VAR 0 3
70391: PPUSH
70392: LD_VAR 0 3
70396: PUSH
70397: LD_INT 1
70399: PLUS
70400: PPUSH
70401: LD_VAR 0 4
70405: PPUSH
70406: CALL_OW 2
70410: ST_TO_ADDR
70411: GO 70362
70413: POP
70414: POP
// end ;
70415: LD_VAR 0 3
70419: RET
// export function IsDriver ( un ) ; begin
70420: LD_INT 0
70422: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70423: LD_ADDR_VAR 0 2
70427: PUSH
70428: LD_VAR 0 1
70432: PUSH
70433: LD_INT 55
70435: PUSH
70436: EMPTY
70437: LIST
70438: PPUSH
70439: CALL_OW 69
70443: IN
70444: ST_TO_ADDR
// end ;
70445: LD_VAR 0 2
70449: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70450: LD_INT 0
70452: PPUSH
70453: PPUSH
// list := [ ] ;
70454: LD_ADDR_VAR 0 5
70458: PUSH
70459: EMPTY
70460: ST_TO_ADDR
// case d of 0 :
70461: LD_VAR 0 3
70465: PUSH
70466: LD_INT 0
70468: DOUBLE
70469: EQUAL
70470: IFTRUE 70474
70472: GO 70607
70474: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70475: LD_ADDR_VAR 0 5
70479: PUSH
70480: LD_VAR 0 1
70484: PUSH
70485: LD_INT 4
70487: MINUS
70488: PUSH
70489: LD_VAR 0 2
70493: PUSH
70494: LD_INT 4
70496: MINUS
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: LIST
70505: PUSH
70506: LD_VAR 0 1
70510: PUSH
70511: LD_INT 3
70513: MINUS
70514: PUSH
70515: LD_VAR 0 2
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: LIST
70527: PUSH
70528: LD_VAR 0 1
70532: PUSH
70533: LD_INT 4
70535: PLUS
70536: PUSH
70537: LD_VAR 0 2
70541: PUSH
70542: LD_INT 4
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: LIST
70549: PUSH
70550: LD_VAR 0 1
70554: PUSH
70555: LD_INT 3
70557: PLUS
70558: PUSH
70559: LD_VAR 0 2
70563: PUSH
70564: LD_INT 3
70566: PLUS
70567: PUSH
70568: LD_INT 5
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: PUSH
70576: LD_VAR 0 1
70580: PUSH
70581: LD_VAR 0 2
70585: PUSH
70586: LD_INT 4
70588: PLUS
70589: PUSH
70590: LD_INT 0
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: ST_TO_ADDR
// end ; 1 :
70605: GO 71305
70607: LD_INT 1
70609: DOUBLE
70610: EQUAL
70611: IFTRUE 70615
70613: GO 70748
70615: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70616: LD_ADDR_VAR 0 5
70620: PUSH
70621: LD_VAR 0 1
70625: PUSH
70626: LD_VAR 0 2
70630: PUSH
70631: LD_INT 4
70633: MINUS
70634: PUSH
70635: LD_INT 3
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: LIST
70642: PUSH
70643: LD_VAR 0 1
70647: PUSH
70648: LD_INT 3
70650: MINUS
70651: PUSH
70652: LD_VAR 0 2
70656: PUSH
70657: LD_INT 3
70659: MINUS
70660: PUSH
70661: LD_INT 2
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: LIST
70668: PUSH
70669: LD_VAR 0 1
70673: PUSH
70674: LD_INT 4
70676: MINUS
70677: PUSH
70678: LD_VAR 0 2
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: LIST
70690: PUSH
70691: LD_VAR 0 1
70695: PUSH
70696: LD_VAR 0 2
70700: PUSH
70701: LD_INT 3
70703: PLUS
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: LIST
70712: PUSH
70713: LD_VAR 0 1
70717: PUSH
70718: LD_INT 4
70720: PLUS
70721: PUSH
70722: LD_VAR 0 2
70726: PUSH
70727: LD_INT 4
70729: PLUS
70730: PUSH
70731: LD_INT 5
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: LIST
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: ST_TO_ADDR
// end ; 2 :
70746: GO 71305
70748: LD_INT 2
70750: DOUBLE
70751: EQUAL
70752: IFTRUE 70756
70754: GO 70885
70756: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70757: LD_ADDR_VAR 0 5
70761: PUSH
70762: LD_VAR 0 1
70766: PUSH
70767: LD_VAR 0 2
70771: PUSH
70772: LD_INT 3
70774: MINUS
70775: PUSH
70776: LD_INT 3
70778: PUSH
70779: EMPTY
70780: LIST
70781: LIST
70782: LIST
70783: PUSH
70784: LD_VAR 0 1
70788: PUSH
70789: LD_INT 4
70791: PLUS
70792: PUSH
70793: LD_VAR 0 2
70797: PUSH
70798: LD_INT 4
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: LIST
70805: PUSH
70806: LD_VAR 0 1
70810: PUSH
70811: LD_VAR 0 2
70815: PUSH
70816: LD_INT 4
70818: PLUS
70819: PUSH
70820: LD_INT 0
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: PUSH
70828: LD_VAR 0 1
70832: PUSH
70833: LD_INT 3
70835: MINUS
70836: PUSH
70837: LD_VAR 0 2
70841: PUSH
70842: LD_INT 1
70844: PUSH
70845: EMPTY
70846: LIST
70847: LIST
70848: LIST
70849: PUSH
70850: LD_VAR 0 1
70854: PUSH
70855: LD_INT 4
70857: MINUS
70858: PUSH
70859: LD_VAR 0 2
70863: PUSH
70864: LD_INT 4
70866: MINUS
70867: PUSH
70868: LD_INT 2
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: LIST
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: ST_TO_ADDR
// end ; 3 :
70883: GO 71305
70885: LD_INT 3
70887: DOUBLE
70888: EQUAL
70889: IFTRUE 70893
70891: GO 71026
70893: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70894: LD_ADDR_VAR 0 5
70898: PUSH
70899: LD_VAR 0 1
70903: PUSH
70904: LD_INT 3
70906: PLUS
70907: PUSH
70908: LD_VAR 0 2
70912: PUSH
70913: LD_INT 4
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 1
70925: PUSH
70926: LD_INT 4
70928: PLUS
70929: PUSH
70930: LD_VAR 0 2
70934: PUSH
70935: LD_INT 4
70937: PLUS
70938: PUSH
70939: LD_INT 5
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: LIST
70946: PUSH
70947: LD_VAR 0 1
70951: PUSH
70952: LD_INT 4
70954: MINUS
70955: PUSH
70956: LD_VAR 0 2
70960: PUSH
70961: LD_INT 1
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: LD_VAR 0 1
70973: PUSH
70974: LD_VAR 0 2
70978: PUSH
70979: LD_INT 4
70981: MINUS
70982: PUSH
70983: LD_INT 3
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: LIST
70990: PUSH
70991: LD_VAR 0 1
70995: PUSH
70996: LD_INT 3
70998: MINUS
70999: PUSH
71000: LD_VAR 0 2
71004: PUSH
71005: LD_INT 3
71007: MINUS
71008: PUSH
71009: LD_INT 2
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: ST_TO_ADDR
// end ; 4 :
71024: GO 71305
71026: LD_INT 4
71028: DOUBLE
71029: EQUAL
71030: IFTRUE 71034
71032: GO 71167
71034: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71035: LD_ADDR_VAR 0 5
71039: PUSH
71040: LD_VAR 0 1
71044: PUSH
71045: LD_VAR 0 2
71049: PUSH
71050: LD_INT 4
71052: PLUS
71053: PUSH
71054: LD_INT 0
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: LIST
71061: PUSH
71062: LD_VAR 0 1
71066: PUSH
71067: LD_INT 3
71069: PLUS
71070: PUSH
71071: LD_VAR 0 2
71075: PUSH
71076: LD_INT 3
71078: PLUS
71079: PUSH
71080: LD_INT 5
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: LIST
71087: PUSH
71088: LD_VAR 0 1
71092: PUSH
71093: LD_INT 4
71095: PLUS
71096: PUSH
71097: LD_VAR 0 2
71101: PUSH
71102: LD_INT 4
71104: PUSH
71105: EMPTY
71106: LIST
71107: LIST
71108: LIST
71109: PUSH
71110: LD_VAR 0 1
71114: PUSH
71115: LD_VAR 0 2
71119: PUSH
71120: LD_INT 3
71122: MINUS
71123: PUSH
71124: LD_INT 3
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: LIST
71131: PUSH
71132: LD_VAR 0 1
71136: PUSH
71137: LD_INT 4
71139: MINUS
71140: PUSH
71141: LD_VAR 0 2
71145: PUSH
71146: LD_INT 4
71148: MINUS
71149: PUSH
71150: LD_INT 2
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: LIST
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: ST_TO_ADDR
// end ; 5 :
71165: GO 71305
71167: LD_INT 5
71169: DOUBLE
71170: EQUAL
71171: IFTRUE 71175
71173: GO 71304
71175: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71176: LD_ADDR_VAR 0 5
71180: PUSH
71181: LD_VAR 0 1
71185: PUSH
71186: LD_INT 4
71188: MINUS
71189: PUSH
71190: LD_VAR 0 2
71194: PUSH
71195: LD_INT 1
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: LIST
71202: PUSH
71203: LD_VAR 0 1
71207: PUSH
71208: LD_VAR 0 2
71212: PUSH
71213: LD_INT 4
71215: MINUS
71216: PUSH
71217: LD_INT 3
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: PUSH
71225: LD_VAR 0 1
71229: PUSH
71230: LD_INT 4
71232: PLUS
71233: PUSH
71234: LD_VAR 0 2
71238: PUSH
71239: LD_INT 4
71241: PLUS
71242: PUSH
71243: LD_INT 5
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: LIST
71250: PUSH
71251: LD_VAR 0 1
71255: PUSH
71256: LD_INT 3
71258: PLUS
71259: PUSH
71260: LD_VAR 0 2
71264: PUSH
71265: LD_INT 4
71267: PUSH
71268: EMPTY
71269: LIST
71270: LIST
71271: LIST
71272: PUSH
71273: LD_VAR 0 1
71277: PUSH
71278: LD_VAR 0 2
71282: PUSH
71283: LD_INT 3
71285: PLUS
71286: PUSH
71287: LD_INT 0
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: LIST
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: LIST
71299: LIST
71300: LIST
71301: ST_TO_ADDR
// end ; end ;
71302: GO 71305
71304: POP
// result := list ;
71305: LD_ADDR_VAR 0 4
71309: PUSH
71310: LD_VAR 0 5
71314: ST_TO_ADDR
// end ;
71315: LD_VAR 0 4
71319: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71320: LD_INT 0
71322: PPUSH
71323: PPUSH
71324: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71325: LD_VAR 0 1
71329: NOT
71330: PUSH
71331: LD_VAR 0 2
71335: PUSH
71336: LD_INT 1
71338: PUSH
71339: LD_INT 2
71341: PUSH
71342: LD_INT 3
71344: PUSH
71345: LD_INT 4
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: IN
71354: NOT
71355: OR
71356: IFFALSE 71360
// exit ;
71358: GO 71452
// tmp := [ ] ;
71360: LD_ADDR_VAR 0 5
71364: PUSH
71365: EMPTY
71366: ST_TO_ADDR
// for i in units do
71367: LD_ADDR_VAR 0 4
71371: PUSH
71372: LD_VAR 0 1
71376: PUSH
71377: FOR_IN
71378: IFFALSE 71421
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
71380: LD_ADDR_VAR 0 5
71384: PUSH
71385: LD_VAR 0 5
71389: PPUSH
71390: LD_VAR 0 5
71394: PUSH
71395: LD_INT 1
71397: PLUS
71398: PPUSH
71399: LD_VAR 0 4
71403: PPUSH
71404: LD_VAR 0 2
71408: PPUSH
71409: CALL_OW 259
71413: PPUSH
71414: CALL_OW 2
71418: ST_TO_ADDR
71419: GO 71377
71421: POP
71422: POP
// if not tmp then
71423: LD_VAR 0 5
71427: NOT
71428: IFFALSE 71432
// exit ;
71430: GO 71452
// result := SortListByListDesc ( units , tmp ) ;
71432: LD_ADDR_VAR 0 3
71436: PUSH
71437: LD_VAR 0 1
71441: PPUSH
71442: LD_VAR 0 5
71446: PPUSH
71447: CALL_OW 77
71451: ST_TO_ADDR
// end ;
71452: LD_VAR 0 3
71456: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71457: LD_INT 0
71459: PPUSH
71460: PPUSH
71461: PPUSH
// result := false ;
71462: LD_ADDR_VAR 0 3
71466: PUSH
71467: LD_INT 0
71469: ST_TO_ADDR
// x := GetX ( building ) ;
71470: LD_ADDR_VAR 0 4
71474: PUSH
71475: LD_VAR 0 2
71479: PPUSH
71480: CALL_OW 250
71484: ST_TO_ADDR
// y := GetY ( building ) ;
71485: LD_ADDR_VAR 0 5
71489: PUSH
71490: LD_VAR 0 2
71494: PPUSH
71495: CALL_OW 251
71499: ST_TO_ADDR
// if not building or not x or not y then
71500: LD_VAR 0 2
71504: NOT
71505: PUSH
71506: LD_VAR 0 4
71510: NOT
71511: OR
71512: PUSH
71513: LD_VAR 0 5
71517: NOT
71518: OR
71519: IFFALSE 71523
// exit ;
71521: GO 71615
// if GetTaskList ( unit ) then
71523: LD_VAR 0 1
71527: PPUSH
71528: CALL_OW 437
71532: IFFALSE 71615
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71534: LD_STRING e
71536: PUSH
71537: LD_VAR 0 1
71541: PPUSH
71542: CALL_OW 437
71546: PUSH
71547: LD_INT 1
71549: ARRAY
71550: PUSH
71551: LD_INT 1
71553: ARRAY
71554: EQUAL
71555: PUSH
71556: LD_VAR 0 4
71560: PUSH
71561: LD_VAR 0 1
71565: PPUSH
71566: CALL_OW 437
71570: PUSH
71571: LD_INT 1
71573: ARRAY
71574: PUSH
71575: LD_INT 2
71577: ARRAY
71578: EQUAL
71579: AND
71580: PUSH
71581: LD_VAR 0 5
71585: PUSH
71586: LD_VAR 0 1
71590: PPUSH
71591: CALL_OW 437
71595: PUSH
71596: LD_INT 1
71598: ARRAY
71599: PUSH
71600: LD_INT 3
71602: ARRAY
71603: EQUAL
71604: AND
71605: IFFALSE 71615
// result := true end ;
71607: LD_ADDR_VAR 0 3
71611: PUSH
71612: LD_INT 1
71614: ST_TO_ADDR
// end ;
71615: LD_VAR 0 3
71619: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71620: LD_INT 0
71622: PPUSH
// result := false ;
71623: LD_ADDR_VAR 0 4
71627: PUSH
71628: LD_INT 0
71630: ST_TO_ADDR
// if GetTaskList ( unit ) then
71631: LD_VAR 0 1
71635: PPUSH
71636: CALL_OW 437
71640: IFFALSE 71723
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71642: LD_STRING M
71644: PUSH
71645: LD_VAR 0 1
71649: PPUSH
71650: CALL_OW 437
71654: PUSH
71655: LD_INT 1
71657: ARRAY
71658: PUSH
71659: LD_INT 1
71661: ARRAY
71662: EQUAL
71663: PUSH
71664: LD_VAR 0 2
71668: PUSH
71669: LD_VAR 0 1
71673: PPUSH
71674: CALL_OW 437
71678: PUSH
71679: LD_INT 1
71681: ARRAY
71682: PUSH
71683: LD_INT 2
71685: ARRAY
71686: EQUAL
71687: AND
71688: PUSH
71689: LD_VAR 0 3
71693: PUSH
71694: LD_VAR 0 1
71698: PPUSH
71699: CALL_OW 437
71703: PUSH
71704: LD_INT 1
71706: ARRAY
71707: PUSH
71708: LD_INT 3
71710: ARRAY
71711: EQUAL
71712: AND
71713: IFFALSE 71723
// result := true ;
71715: LD_ADDR_VAR 0 4
71719: PUSH
71720: LD_INT 1
71722: ST_TO_ADDR
// end ; end ;
71723: LD_VAR 0 4
71727: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71728: LD_INT 0
71730: PPUSH
71731: PPUSH
71732: PPUSH
71733: PPUSH
// if not unit or not area then
71734: LD_VAR 0 1
71738: NOT
71739: PUSH
71740: LD_VAR 0 2
71744: NOT
71745: OR
71746: IFFALSE 71750
// exit ;
71748: GO 71914
// tmp := AreaToList ( area , i ) ;
71750: LD_ADDR_VAR 0 6
71754: PUSH
71755: LD_VAR 0 2
71759: PPUSH
71760: LD_VAR 0 5
71764: PPUSH
71765: CALL_OW 517
71769: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71770: LD_ADDR_VAR 0 5
71774: PUSH
71775: DOUBLE
71776: LD_INT 1
71778: DEC
71779: ST_TO_ADDR
71780: LD_VAR 0 6
71784: PUSH
71785: LD_INT 1
71787: ARRAY
71788: PUSH
71789: FOR_TO
71790: IFFALSE 71912
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71792: LD_ADDR_VAR 0 7
71796: PUSH
71797: LD_VAR 0 6
71801: PUSH
71802: LD_INT 1
71804: ARRAY
71805: PUSH
71806: LD_VAR 0 5
71810: ARRAY
71811: PUSH
71812: LD_VAR 0 6
71816: PUSH
71817: LD_INT 2
71819: ARRAY
71820: PUSH
71821: LD_VAR 0 5
71825: ARRAY
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71831: LD_VAR 0 7
71835: PUSH
71836: LD_INT 1
71838: ARRAY
71839: PPUSH
71840: LD_VAR 0 7
71844: PUSH
71845: LD_INT 2
71847: ARRAY
71848: PPUSH
71849: CALL_OW 428
71853: PUSH
71854: LD_INT 0
71856: EQUAL
71857: IFFALSE 71910
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71859: LD_VAR 0 1
71863: PPUSH
71864: LD_VAR 0 7
71868: PUSH
71869: LD_INT 1
71871: ARRAY
71872: PPUSH
71873: LD_VAR 0 7
71877: PUSH
71878: LD_INT 2
71880: ARRAY
71881: PPUSH
71882: LD_VAR 0 3
71886: PPUSH
71887: CALL_OW 48
// result := IsPlaced ( unit ) ;
71891: LD_ADDR_VAR 0 4
71895: PUSH
71896: LD_VAR 0 1
71900: PPUSH
71901: CALL_OW 305
71905: ST_TO_ADDR
// exit ;
71906: POP
71907: POP
71908: GO 71914
// end ; end ;
71910: GO 71789
71912: POP
71913: POP
// end ;
71914: LD_VAR 0 4
71918: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71919: LD_INT 0
71921: PPUSH
71922: PPUSH
71923: PPUSH
// if not side or side > 8 then
71924: LD_VAR 0 1
71928: NOT
71929: PUSH
71930: LD_VAR 0 1
71934: PUSH
71935: LD_INT 8
71937: GREATER
71938: OR
71939: IFFALSE 71943
// exit ;
71941: GO 72130
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71943: LD_ADDR_VAR 0 4
71947: PUSH
71948: LD_INT 22
71950: PUSH
71951: LD_VAR 0 1
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: LD_INT 21
71962: PUSH
71963: LD_INT 3
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PPUSH
71974: CALL_OW 69
71978: ST_TO_ADDR
// if not tmp then
71979: LD_VAR 0 4
71983: NOT
71984: IFFALSE 71988
// exit ;
71986: GO 72130
// enable_addtolog := true ;
71988: LD_ADDR_OWVAR 81
71992: PUSH
71993: LD_INT 1
71995: ST_TO_ADDR
// AddToLog ( [ ) ;
71996: LD_STRING [
71998: PPUSH
71999: CALL_OW 561
// for i in tmp do
72003: LD_ADDR_VAR 0 3
72007: PUSH
72008: LD_VAR 0 4
72012: PUSH
72013: FOR_IN
72014: IFFALSE 72121
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72016: LD_STRING [
72018: PUSH
72019: LD_VAR 0 3
72023: PPUSH
72024: CALL_OW 266
72028: STR
72029: PUSH
72030: LD_STRING , 
72032: STR
72033: PUSH
72034: LD_VAR 0 3
72038: PPUSH
72039: CALL_OW 250
72043: STR
72044: PUSH
72045: LD_STRING , 
72047: STR
72048: PUSH
72049: LD_VAR 0 3
72053: PPUSH
72054: CALL_OW 251
72058: STR
72059: PUSH
72060: LD_STRING , 
72062: STR
72063: PUSH
72064: LD_VAR 0 3
72068: PPUSH
72069: CALL_OW 254
72073: STR
72074: PUSH
72075: LD_STRING , 
72077: STR
72078: PUSH
72079: LD_VAR 0 3
72083: PPUSH
72084: LD_INT 1
72086: PPUSH
72087: CALL_OW 268
72091: STR
72092: PUSH
72093: LD_STRING , 
72095: STR
72096: PUSH
72097: LD_VAR 0 3
72101: PPUSH
72102: LD_INT 2
72104: PPUSH
72105: CALL_OW 268
72109: STR
72110: PUSH
72111: LD_STRING ],
72113: STR
72114: PPUSH
72115: CALL_OW 561
// end ;
72119: GO 72013
72121: POP
72122: POP
// AddToLog ( ]; ) ;
72123: LD_STRING ];
72125: PPUSH
72126: CALL_OW 561
// end ;
72130: LD_VAR 0 2
72134: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72135: LD_INT 0
72137: PPUSH
72138: PPUSH
72139: PPUSH
72140: PPUSH
72141: PPUSH
// if not area or not rate or not max then
72142: LD_VAR 0 1
72146: NOT
72147: PUSH
72148: LD_VAR 0 2
72152: NOT
72153: OR
72154: PUSH
72155: LD_VAR 0 4
72159: NOT
72160: OR
72161: IFFALSE 72165
// exit ;
72163: GO 72357
// while 1 do
72165: LD_INT 1
72167: IFFALSE 72357
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72169: LD_ADDR_VAR 0 9
72173: PUSH
72174: LD_VAR 0 1
72178: PPUSH
72179: LD_INT 1
72181: PPUSH
72182: CALL_OW 287
72186: PUSH
72187: LD_INT 10
72189: MUL
72190: ST_TO_ADDR
// r := rate / 10 ;
72191: LD_ADDR_VAR 0 7
72195: PUSH
72196: LD_VAR 0 2
72200: PUSH
72201: LD_INT 10
72203: DIVREAL
72204: ST_TO_ADDR
// time := 1 1$00 ;
72205: LD_ADDR_VAR 0 8
72209: PUSH
72210: LD_INT 2100
72212: ST_TO_ADDR
// if amount < min then
72213: LD_VAR 0 9
72217: PUSH
72218: LD_VAR 0 3
72222: LESS
72223: IFFALSE 72241
// r := r * 2 else
72225: LD_ADDR_VAR 0 7
72229: PUSH
72230: LD_VAR 0 7
72234: PUSH
72235: LD_INT 2
72237: MUL
72238: ST_TO_ADDR
72239: GO 72267
// if amount > max then
72241: LD_VAR 0 9
72245: PUSH
72246: LD_VAR 0 4
72250: GREATER
72251: IFFALSE 72267
// r := r / 2 ;
72253: LD_ADDR_VAR 0 7
72257: PUSH
72258: LD_VAR 0 7
72262: PUSH
72263: LD_INT 2
72265: DIVREAL
72266: ST_TO_ADDR
// time := time / r ;
72267: LD_ADDR_VAR 0 8
72271: PUSH
72272: LD_VAR 0 8
72276: PUSH
72277: LD_VAR 0 7
72281: DIVREAL
72282: ST_TO_ADDR
// if time < 0 then
72283: LD_VAR 0 8
72287: PUSH
72288: LD_INT 0
72290: LESS
72291: IFFALSE 72308
// time := time * - 1 ;
72293: LD_ADDR_VAR 0 8
72297: PUSH
72298: LD_VAR 0 8
72302: PUSH
72303: LD_INT 1
72305: NEG
72306: MUL
72307: ST_TO_ADDR
// wait ( time ) ;
72308: LD_VAR 0 8
72312: PPUSH
72313: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
72317: LD_INT 35
72319: PPUSH
72320: LD_INT 875
72322: PPUSH
72323: CALL_OW 12
72327: PPUSH
72328: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72332: LD_INT 1
72334: PPUSH
72335: LD_INT 5
72337: PPUSH
72338: CALL_OW 12
72342: PPUSH
72343: LD_VAR 0 1
72347: PPUSH
72348: LD_INT 1
72350: PPUSH
72351: CALL_OW 55
// end ;
72355: GO 72165
// end ;
72357: LD_VAR 0 5
72361: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72362: LD_INT 0
72364: PPUSH
72365: PPUSH
72366: PPUSH
72367: PPUSH
72368: PPUSH
72369: PPUSH
72370: PPUSH
72371: PPUSH
// if not turrets or not factories then
72372: LD_VAR 0 1
72376: NOT
72377: PUSH
72378: LD_VAR 0 2
72382: NOT
72383: OR
72384: IFFALSE 72388
// exit ;
72386: GO 72695
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72388: LD_ADDR_VAR 0 10
72392: PUSH
72393: LD_INT 5
72395: PUSH
72396: LD_INT 6
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: LD_INT 2
72405: PUSH
72406: LD_INT 4
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 3
72415: PUSH
72416: LD_INT 5
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 24
72430: PUSH
72431: LD_INT 25
72433: PUSH
72434: EMPTY
72435: LIST
72436: LIST
72437: PUSH
72438: LD_INT 23
72440: PUSH
72441: LD_INT 27
72443: PUSH
72444: EMPTY
72445: LIST
72446: LIST
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 42
72454: PUSH
72455: LD_INT 43
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 44
72464: PUSH
72465: LD_INT 46
72467: PUSH
72468: EMPTY
72469: LIST
72470: LIST
72471: PUSH
72472: LD_INT 45
72474: PUSH
72475: LD_INT 47
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: LIST
72486: PUSH
72487: EMPTY
72488: LIST
72489: LIST
72490: LIST
72491: ST_TO_ADDR
// result := [ ] ;
72492: LD_ADDR_VAR 0 3
72496: PUSH
72497: EMPTY
72498: ST_TO_ADDR
// for i in turrets do
72499: LD_ADDR_VAR 0 4
72503: PUSH
72504: LD_VAR 0 1
72508: PUSH
72509: FOR_IN
72510: IFFALSE 72693
// begin nat := GetNation ( i ) ;
72512: LD_ADDR_VAR 0 7
72516: PUSH
72517: LD_VAR 0 4
72521: PPUSH
72522: CALL_OW 248
72526: ST_TO_ADDR
// weapon := 0 ;
72527: LD_ADDR_VAR 0 8
72531: PUSH
72532: LD_INT 0
72534: ST_TO_ADDR
// if not nat then
72535: LD_VAR 0 7
72539: NOT
72540: IFFALSE 72544
// continue ;
72542: GO 72509
// for j in list [ nat ] do
72544: LD_ADDR_VAR 0 5
72548: PUSH
72549: LD_VAR 0 10
72553: PUSH
72554: LD_VAR 0 7
72558: ARRAY
72559: PUSH
72560: FOR_IN
72561: IFFALSE 72602
// if GetBWeapon ( i ) = j [ 1 ] then
72563: LD_VAR 0 4
72567: PPUSH
72568: CALL_OW 269
72572: PUSH
72573: LD_VAR 0 5
72577: PUSH
72578: LD_INT 1
72580: ARRAY
72581: EQUAL
72582: IFFALSE 72600
// begin weapon := j [ 2 ] ;
72584: LD_ADDR_VAR 0 8
72588: PUSH
72589: LD_VAR 0 5
72593: PUSH
72594: LD_INT 2
72596: ARRAY
72597: ST_TO_ADDR
// break ;
72598: GO 72602
// end ;
72600: GO 72560
72602: POP
72603: POP
// if not weapon then
72604: LD_VAR 0 8
72608: NOT
72609: IFFALSE 72613
// continue ;
72611: GO 72509
// for k in factories do
72613: LD_ADDR_VAR 0 6
72617: PUSH
72618: LD_VAR 0 2
72622: PUSH
72623: FOR_IN
72624: IFFALSE 72689
// begin weapons := AvailableWeaponList ( k ) ;
72626: LD_ADDR_VAR 0 9
72630: PUSH
72631: LD_VAR 0 6
72635: PPUSH
72636: CALL_OW 478
72640: ST_TO_ADDR
// if not weapons then
72641: LD_VAR 0 9
72645: NOT
72646: IFFALSE 72650
// continue ;
72648: GO 72623
// if weapon in weapons then
72650: LD_VAR 0 8
72654: PUSH
72655: LD_VAR 0 9
72659: IN
72660: IFFALSE 72687
// begin result := [ i , weapon ] ;
72662: LD_ADDR_VAR 0 3
72666: PUSH
72667: LD_VAR 0 4
72671: PUSH
72672: LD_VAR 0 8
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: ST_TO_ADDR
// exit ;
72681: POP
72682: POP
72683: POP
72684: POP
72685: GO 72695
// end ; end ;
72687: GO 72623
72689: POP
72690: POP
// end ;
72691: GO 72509
72693: POP
72694: POP
// end ;
72695: LD_VAR 0 3
72699: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72700: LD_INT 0
72702: PPUSH
// if not side or side > 8 then
72703: LD_VAR 0 3
72707: NOT
72708: PUSH
72709: LD_VAR 0 3
72713: PUSH
72714: LD_INT 8
72716: GREATER
72717: OR
72718: IFFALSE 72722
// exit ;
72720: GO 72781
// if not range then
72722: LD_VAR 0 4
72726: NOT
72727: IFFALSE 72738
// range := - 12 ;
72729: LD_ADDR_VAR 0 4
72733: PUSH
72734: LD_INT 12
72736: NEG
72737: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72738: LD_VAR 0 1
72742: PPUSH
72743: LD_VAR 0 2
72747: PPUSH
72748: LD_VAR 0 3
72752: PPUSH
72753: LD_VAR 0 4
72757: PPUSH
72758: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72762: LD_VAR 0 1
72766: PPUSH
72767: LD_VAR 0 2
72771: PPUSH
72772: LD_VAR 0 3
72776: PPUSH
72777: CALL_OW 331
// end ;
72781: LD_VAR 0 5
72785: RET
// export function Video ( mode ) ; begin
72786: LD_INT 0
72788: PPUSH
// ingame_video = mode ;
72789: LD_ADDR_OWVAR 52
72793: PUSH
72794: LD_VAR 0 1
72798: ST_TO_ADDR
// interface_hidden = mode ;
72799: LD_ADDR_OWVAR 54
72803: PUSH
72804: LD_VAR 0 1
72808: ST_TO_ADDR
// end ;
72809: LD_VAR 0 2
72813: RET
// export function Join ( array , element ) ; begin
72814: LD_INT 0
72816: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72817: LD_ADDR_VAR 0 3
72821: PUSH
72822: LD_VAR 0 1
72826: PPUSH
72827: LD_VAR 0 1
72831: PUSH
72832: LD_INT 1
72834: PLUS
72835: PPUSH
72836: LD_VAR 0 2
72840: PPUSH
72841: CALL_OW 1
72845: ST_TO_ADDR
// end ;
72846: LD_VAR 0 3
72850: RET
// export function JoinUnion ( array , element ) ; begin
72851: LD_INT 0
72853: PPUSH
// result := array union element ;
72854: LD_ADDR_VAR 0 3
72858: PUSH
72859: LD_VAR 0 1
72863: PUSH
72864: LD_VAR 0 2
72868: UNION
72869: ST_TO_ADDR
// end ;
72870: LD_VAR 0 3
72874: RET
// export function GetBehemoths ( side ) ; begin
72875: LD_INT 0
72877: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
72878: LD_ADDR_VAR 0 2
72882: PUSH
72883: LD_INT 22
72885: PUSH
72886: LD_VAR 0 1
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 31
72897: PUSH
72898: LD_INT 25
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PPUSH
72909: CALL_OW 69
72913: ST_TO_ADDR
// end ;
72914: LD_VAR 0 2
72918: RET
// export function Shuffle ( array ) ; var i , index ; begin
72919: LD_INT 0
72921: PPUSH
72922: PPUSH
72923: PPUSH
// result := [ ] ;
72924: LD_ADDR_VAR 0 2
72928: PUSH
72929: EMPTY
72930: ST_TO_ADDR
// if not array then
72931: LD_VAR 0 1
72935: NOT
72936: IFFALSE 72940
// exit ;
72938: GO 73039
// Randomize ;
72940: CALL_OW 10
// for i = array downto 1 do
72944: LD_ADDR_VAR 0 3
72948: PUSH
72949: DOUBLE
72950: LD_VAR 0 1
72954: INC
72955: ST_TO_ADDR
72956: LD_INT 1
72958: PUSH
72959: FOR_DOWNTO
72960: IFFALSE 73037
// begin index := rand ( 1 , array ) ;
72962: LD_ADDR_VAR 0 4
72966: PUSH
72967: LD_INT 1
72969: PPUSH
72970: LD_VAR 0 1
72974: PPUSH
72975: CALL_OW 12
72979: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72980: LD_ADDR_VAR 0 2
72984: PUSH
72985: LD_VAR 0 2
72989: PPUSH
72990: LD_VAR 0 2
72994: PUSH
72995: LD_INT 1
72997: PLUS
72998: PPUSH
72999: LD_VAR 0 1
73003: PUSH
73004: LD_VAR 0 4
73008: ARRAY
73009: PPUSH
73010: CALL_OW 2
73014: ST_TO_ADDR
// array := Delete ( array , index ) ;
73015: LD_ADDR_VAR 0 1
73019: PUSH
73020: LD_VAR 0 1
73024: PPUSH
73025: LD_VAR 0 4
73029: PPUSH
73030: CALL_OW 3
73034: ST_TO_ADDR
// end ;
73035: GO 72959
73037: POP
73038: POP
// end ;
73039: LD_VAR 0 2
73043: RET
// export function GetBaseMaterials ( base ) ; begin
73044: LD_INT 0
73046: PPUSH
// result := [ 0 , 0 , 0 ] ;
73047: LD_ADDR_VAR 0 2
73051: PUSH
73052: LD_INT 0
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: LD_INT 0
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: LIST
73065: ST_TO_ADDR
// if not base then
73066: LD_VAR 0 1
73070: NOT
73071: IFFALSE 73075
// exit ;
73073: GO 73124
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73075: LD_ADDR_VAR 0 2
73079: PUSH
73080: LD_VAR 0 1
73084: PPUSH
73085: LD_INT 1
73087: PPUSH
73088: CALL_OW 275
73092: PUSH
73093: LD_VAR 0 1
73097: PPUSH
73098: LD_INT 2
73100: PPUSH
73101: CALL_OW 275
73105: PUSH
73106: LD_VAR 0 1
73110: PPUSH
73111: LD_INT 3
73113: PPUSH
73114: CALL_OW 275
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: LIST
73123: ST_TO_ADDR
// end ;
73124: LD_VAR 0 2
73128: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73129: LD_INT 0
73131: PPUSH
73132: PPUSH
// result := array ;
73133: LD_ADDR_VAR 0 3
73137: PUSH
73138: LD_VAR 0 1
73142: ST_TO_ADDR
// if size > 0 then
73143: LD_VAR 0 2
73147: PUSH
73148: LD_INT 0
73150: GREATER
73151: IFFALSE 73197
// for i := array downto size do
73153: LD_ADDR_VAR 0 4
73157: PUSH
73158: DOUBLE
73159: LD_VAR 0 1
73163: INC
73164: ST_TO_ADDR
73165: LD_VAR 0 2
73169: PUSH
73170: FOR_DOWNTO
73171: IFFALSE 73195
// result := Delete ( result , result ) ;
73173: LD_ADDR_VAR 0 3
73177: PUSH
73178: LD_VAR 0 3
73182: PPUSH
73183: LD_VAR 0 3
73187: PPUSH
73188: CALL_OW 3
73192: ST_TO_ADDR
73193: GO 73170
73195: POP
73196: POP
// end ;
73197: LD_VAR 0 3
73201: RET
// export function ComExit ( unit ) ; var tmp ; begin
73202: LD_INT 0
73204: PPUSH
73205: PPUSH
// if not IsInUnit ( unit ) then
73206: LD_VAR 0 1
73210: PPUSH
73211: CALL_OW 310
73215: NOT
73216: IFFALSE 73220
// exit ;
73218: GO 73280
// tmp := IsInUnit ( unit ) ;
73220: LD_ADDR_VAR 0 3
73224: PUSH
73225: LD_VAR 0 1
73229: PPUSH
73230: CALL_OW 310
73234: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73235: LD_VAR 0 3
73239: PPUSH
73240: CALL_OW 247
73244: PUSH
73245: LD_INT 2
73247: EQUAL
73248: IFFALSE 73261
// ComExitVehicle ( unit ) else
73250: LD_VAR 0 1
73254: PPUSH
73255: CALL_OW 121
73259: GO 73270
// ComExitBuilding ( unit ) ;
73261: LD_VAR 0 1
73265: PPUSH
73266: CALL_OW 122
// result := tmp ;
73270: LD_ADDR_VAR 0 2
73274: PUSH
73275: LD_VAR 0 3
73279: ST_TO_ADDR
// end ;
73280: LD_VAR 0 2
73284: RET
// export function ResetHc ; begin
73285: LD_INT 0
73287: PPUSH
// InitHc ;
73288: CALL_OW 19
// hc_importance := 0 ;
73292: LD_ADDR_OWVAR 32
73296: PUSH
73297: LD_INT 0
73299: ST_TO_ADDR
// end ;
73300: LD_VAR 0 1
73304: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73305: LD_INT 0
73307: PPUSH
73308: PPUSH
73309: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73310: LD_ADDR_VAR 0 6
73314: PUSH
73315: LD_VAR 0 1
73319: PUSH
73320: LD_VAR 0 3
73324: PLUS
73325: PUSH
73326: LD_INT 2
73328: DIV
73329: ST_TO_ADDR
// if _x < 0 then
73330: LD_VAR 0 6
73334: PUSH
73335: LD_INT 0
73337: LESS
73338: IFFALSE 73355
// _x := _x * - 1 ;
73340: LD_ADDR_VAR 0 6
73344: PUSH
73345: LD_VAR 0 6
73349: PUSH
73350: LD_INT 1
73352: NEG
73353: MUL
73354: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73355: LD_ADDR_VAR 0 7
73359: PUSH
73360: LD_VAR 0 2
73364: PUSH
73365: LD_VAR 0 4
73369: PLUS
73370: PUSH
73371: LD_INT 2
73373: DIV
73374: ST_TO_ADDR
// if _y < 0 then
73375: LD_VAR 0 7
73379: PUSH
73380: LD_INT 0
73382: LESS
73383: IFFALSE 73400
// _y := _y * - 1 ;
73385: LD_ADDR_VAR 0 7
73389: PUSH
73390: LD_VAR 0 7
73394: PUSH
73395: LD_INT 1
73397: NEG
73398: MUL
73399: ST_TO_ADDR
// result := [ _x , _y ] ;
73400: LD_ADDR_VAR 0 5
73404: PUSH
73405: LD_VAR 0 6
73409: PUSH
73410: LD_VAR 0 7
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: ST_TO_ADDR
// end ;
73419: LD_VAR 0 5
73423: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73424: LD_INT 0
73426: PPUSH
73427: PPUSH
73428: PPUSH
73429: PPUSH
// task := GetTaskList ( unit ) ;
73430: LD_ADDR_VAR 0 7
73434: PUSH
73435: LD_VAR 0 1
73439: PPUSH
73440: CALL_OW 437
73444: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73445: LD_VAR 0 7
73449: NOT
73450: PUSH
73451: LD_VAR 0 1
73455: PPUSH
73456: LD_VAR 0 2
73460: PPUSH
73461: CALL_OW 308
73465: NOT
73466: AND
73467: IFFALSE 73471
// exit ;
73469: GO 73589
// if IsInArea ( unit , area ) then
73471: LD_VAR 0 1
73475: PPUSH
73476: LD_VAR 0 2
73480: PPUSH
73481: CALL_OW 308
73485: IFFALSE 73503
// begin ComMoveToArea ( unit , goAway ) ;
73487: LD_VAR 0 1
73491: PPUSH
73492: LD_VAR 0 3
73496: PPUSH
73497: CALL_OW 113
// exit ;
73501: GO 73589
// end ; if task [ 1 ] [ 1 ] <> M then
73503: LD_VAR 0 7
73507: PUSH
73508: LD_INT 1
73510: ARRAY
73511: PUSH
73512: LD_INT 1
73514: ARRAY
73515: PUSH
73516: LD_STRING M
73518: NONEQUAL
73519: IFFALSE 73523
// exit ;
73521: GO 73589
// x := task [ 1 ] [ 2 ] ;
73523: LD_ADDR_VAR 0 5
73527: PUSH
73528: LD_VAR 0 7
73532: PUSH
73533: LD_INT 1
73535: ARRAY
73536: PUSH
73537: LD_INT 2
73539: ARRAY
73540: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73541: LD_ADDR_VAR 0 6
73545: PUSH
73546: LD_VAR 0 7
73550: PUSH
73551: LD_INT 1
73553: ARRAY
73554: PUSH
73555: LD_INT 3
73557: ARRAY
73558: ST_TO_ADDR
// if InArea ( x , y , area ) then
73559: LD_VAR 0 5
73563: PPUSH
73564: LD_VAR 0 6
73568: PPUSH
73569: LD_VAR 0 2
73573: PPUSH
73574: CALL_OW 309
73578: IFFALSE 73589
// ComStop ( unit ) ;
73580: LD_VAR 0 1
73584: PPUSH
73585: CALL_OW 141
// end ;
73589: LD_VAR 0 4
73593: RET
// export function Abs ( value ) ; begin
73594: LD_INT 0
73596: PPUSH
// result := value ;
73597: LD_ADDR_VAR 0 2
73601: PUSH
73602: LD_VAR 0 1
73606: ST_TO_ADDR
// if value < 0 then
73607: LD_VAR 0 1
73611: PUSH
73612: LD_INT 0
73614: LESS
73615: IFFALSE 73632
// result := value * - 1 ;
73617: LD_ADDR_VAR 0 2
73621: PUSH
73622: LD_VAR 0 1
73626: PUSH
73627: LD_INT 1
73629: NEG
73630: MUL
73631: ST_TO_ADDR
// end ;
73632: LD_VAR 0 2
73636: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73637: LD_INT 0
73639: PPUSH
73640: PPUSH
73641: PPUSH
73642: PPUSH
73643: PPUSH
73644: PPUSH
73645: PPUSH
73646: PPUSH
// if not unit or not building then
73647: LD_VAR 0 1
73651: NOT
73652: PUSH
73653: LD_VAR 0 2
73657: NOT
73658: OR
73659: IFFALSE 73663
// exit ;
73661: GO 73889
// x := GetX ( building ) ;
73663: LD_ADDR_VAR 0 4
73667: PUSH
73668: LD_VAR 0 2
73672: PPUSH
73673: CALL_OW 250
73677: ST_TO_ADDR
// y := GetY ( building ) ;
73678: LD_ADDR_VAR 0 6
73682: PUSH
73683: LD_VAR 0 2
73687: PPUSH
73688: CALL_OW 251
73692: ST_TO_ADDR
// d := GetDir ( building ) ;
73693: LD_ADDR_VAR 0 8
73697: PUSH
73698: LD_VAR 0 2
73702: PPUSH
73703: CALL_OW 254
73707: ST_TO_ADDR
// r := 4 ;
73708: LD_ADDR_VAR 0 9
73712: PUSH
73713: LD_INT 4
73715: ST_TO_ADDR
// for i := 1 to 5 do
73716: LD_ADDR_VAR 0 10
73720: PUSH
73721: DOUBLE
73722: LD_INT 1
73724: DEC
73725: ST_TO_ADDR
73726: LD_INT 5
73728: PUSH
73729: FOR_TO
73730: IFFALSE 73887
// begin _x := ShiftX ( x , d , r + i ) ;
73732: LD_ADDR_VAR 0 5
73736: PUSH
73737: LD_VAR 0 4
73741: PPUSH
73742: LD_VAR 0 8
73746: PPUSH
73747: LD_VAR 0 9
73751: PUSH
73752: LD_VAR 0 10
73756: PLUS
73757: PPUSH
73758: CALL_OW 272
73762: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73763: LD_ADDR_VAR 0 7
73767: PUSH
73768: LD_VAR 0 6
73772: PPUSH
73773: LD_VAR 0 8
73777: PPUSH
73778: LD_VAR 0 9
73782: PUSH
73783: LD_VAR 0 10
73787: PLUS
73788: PPUSH
73789: CALL_OW 273
73793: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73794: LD_VAR 0 5
73798: PPUSH
73799: LD_VAR 0 7
73803: PPUSH
73804: CALL_OW 488
73808: PUSH
73809: LD_VAR 0 5
73813: PPUSH
73814: LD_VAR 0 7
73818: PPUSH
73819: CALL_OW 428
73823: PPUSH
73824: CALL_OW 247
73828: PUSH
73829: LD_INT 3
73831: PUSH
73832: LD_INT 2
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: IN
73839: NOT
73840: AND
73841: IFFALSE 73885
// begin ComMoveXY ( unit , _x , _y ) ;
73843: LD_VAR 0 1
73847: PPUSH
73848: LD_VAR 0 5
73852: PPUSH
73853: LD_VAR 0 7
73857: PPUSH
73858: CALL_OW 111
// result := [ _x , _y ] ;
73862: LD_ADDR_VAR 0 3
73866: PUSH
73867: LD_VAR 0 5
73871: PUSH
73872: LD_VAR 0 7
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: ST_TO_ADDR
// exit ;
73881: POP
73882: POP
73883: GO 73889
// end ; end ;
73885: GO 73729
73887: POP
73888: POP
// end ; end_of_file
73889: LD_VAR 0 3
73893: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73894: LD_VAR 0 1
73898: PUSH
73899: LD_INT 200
73901: DOUBLE
73902: GREATEREQUAL
73903: IFFALSE 73911
73905: LD_INT 299
73907: DOUBLE
73908: LESSEQUAL
73909: IFTRUE 73913
73911: GO 73945
73913: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73914: LD_VAR 0 1
73918: PPUSH
73919: LD_VAR 0 2
73923: PPUSH
73924: LD_VAR 0 3
73928: PPUSH
73929: LD_VAR 0 4
73933: PPUSH
73934: LD_VAR 0 5
73938: PPUSH
73939: CALL 32950 0 5
73943: GO 74022
73945: LD_INT 300
73947: DOUBLE
73948: GREATEREQUAL
73949: IFFALSE 73957
73951: LD_INT 399
73953: DOUBLE
73954: LESSEQUAL
73955: IFTRUE 73959
73957: GO 74021
73959: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73960: LD_VAR 0 1
73964: PPUSH
73965: LD_VAR 0 2
73969: PPUSH
73970: LD_VAR 0 3
73974: PPUSH
73975: LD_VAR 0 4
73979: PPUSH
73980: LD_VAR 0 5
73984: PPUSH
73985: LD_VAR 0 6
73989: PPUSH
73990: LD_VAR 0 7
73994: PPUSH
73995: LD_VAR 0 8
73999: PPUSH
74000: LD_VAR 0 9
74004: PPUSH
74005: LD_VAR 0 10
74009: PPUSH
74010: LD_VAR 0 11
74014: PPUSH
74015: CALL 30856 0 11
74019: GO 74022
74021: POP
// end ;
74022: PPOPN 11
74024: END
