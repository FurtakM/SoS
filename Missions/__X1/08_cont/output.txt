// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 17 0 0
// PrepareHeike ;
   8: CALL 41 0 0
// Action ;
  12: CALL 718 0 0
// end ;
  16: END
// export debug , prefix ; function Init ; begin
  17: LD_INT 0
  19: PPUSH
// debug := true ;
  20: LD_ADDR_EXP 1
  24: PUSH
  25: LD_INT 1
  27: ST_TO_ADDR
// prefix := 07_ ;
  28: LD_ADDR_EXP 2
  32: PUSH
  33: LD_STRING 07_
  35: ST_TO_ADDR
// end ; end_of_file
  36: LD_VAR 0 1
  40: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareHeike ; var i , tmp , un , veh ; begin
  41: LD_INT 0
  43: PPUSH
  44: PPUSH
  45: PPUSH
  46: PPUSH
  47: PPUSH
// uc_side := 4 ;
  48: LD_ADDR_OWVAR 20
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// uc_nation := 1 ;
  56: LD_ADDR_OWVAR 21
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
  64: LD_ADDR_EXP 15
  68: PUSH
  69: LD_STRING 07_Americans
  71: PPUSH
  72: CALL_OW 31
  76: ST_TO_ADDR
// if americanSquad < 5 then
  77: LD_EXP 15
  81: PUSH
  82: LD_INT 5
  84: LESS
  85: IFFALSE 142
// begin for i := americanSquad to 5 do
  87: LD_ADDR_VAR 0 2
  91: PUSH
  92: DOUBLE
  93: LD_EXP 15
  97: DEC
  98: ST_TO_ADDR
  99: LD_INT 5
 101: PUSH
 102: FOR_TO
 103: IFFALSE 140
// begin PrepareHuman ( false , 2 , 6 ) ;
 105: LD_INT 0
 107: PPUSH
 108: LD_INT 2
 110: PPUSH
 111: LD_INT 6
 113: PPUSH
 114: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 118: LD_ADDR_EXP 15
 122: PUSH
 123: LD_EXP 15
 127: PPUSH
 128: CALL_OW 44
 132: PPUSH
 133: CALL 37466 0 2
 137: ST_TO_ADDR
// end ;
 138: GO 102
 140: POP
 141: POP
// end ; for i in americanSquad do
 142: LD_ADDR_VAR 0 2
 146: PUSH
 147: LD_EXP 15
 151: PUSH
 152: FOR_IN
 153: IFFALSE 220
// begin SetClass ( i , 2 ) ;
 155: LD_VAR 0 2
 159: PPUSH
 160: LD_INT 2
 162: PPUSH
 163: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
 167: LD_VAR 0 2
 171: PPUSH
 172: LD_INT 78
 174: PPUSH
 175: LD_INT 16
 177: PPUSH
 178: LD_INT 5
 180: PPUSH
 181: LD_INT 0
 183: PPUSH
 184: CALL_OW 50
// ComHold ( i ) ;
 188: LD_VAR 0 2
 192: PPUSH
 193: CALL_OW 140
// if Prob ( 60 ) then
 197: LD_INT 60
 199: PPUSH
 200: CALL_OW 13
 204: IFFALSE 218
// ForceSleep ( i , true ) ;
 206: LD_VAR 0 2
 210: PPUSH
 211: LD_INT 1
 213: PPUSH
 214: CALL_OW 585
// end ;
 218: GO 152
 220: POP
 221: POP
// uc_side := 2 ;
 222: LD_ADDR_OWVAR 20
 226: PUSH
 227: LD_INT 2
 229: ST_TO_ADDR
// uc_nation := 2 ;
 230: LD_ADDR_OWVAR 21
 234: PUSH
 235: LD_INT 2
 237: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 238: LD_ADDR_EXP 3
 242: PUSH
 243: LD_STRING Heike
 245: PPUSH
 246: LD_EXP 1
 250: NOT
 251: PPUSH
 252: LD_EXP 2
 256: PPUSH
 257: CALL 785 0 3
 261: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 262: LD_ADDR_EXP 6
 266: PUSH
 267: LD_STRING Ibrahim
 269: PPUSH
 270: LD_EXP 1
 274: NOT
 275: PPUSH
 276: LD_EXP 2
 280: PPUSH
 281: CALL 785 0 3
 285: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 286: LD_ADDR_EXP 4
 290: PUSH
 291: LD_STRING Givi
 293: PPUSH
 294: LD_EXP 1
 298: NOT
 299: PPUSH
 300: LD_EXP 2
 304: PPUSH
 305: CALL 785 0 3
 309: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 310: LD_ADDR_EXP 7
 314: PUSH
 315: LD_STRING Kamil
 317: PPUSH
 318: LD_EXP 1
 322: NOT
 323: PPUSH
 324: LD_EXP 2
 328: PPUSH
 329: CALL 785 0 3
 333: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 334: LD_ADDR_EXP 8
 338: PUSH
 339: LD_STRING Kaia
 341: PPUSH
 342: LD_EXP 1
 346: NOT
 347: PPUSH
 348: LD_EXP 2
 352: PPUSH
 353: CALL 785 0 3
 357: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 358: LD_ADDR_EXP 9
 362: PUSH
 363: LD_STRING Sophia
 365: PPUSH
 366: LD_EXP 1
 370: NOT
 371: PPUSH
 372: LD_EXP 2
 376: PPUSH
 377: CALL 785 0 3
 381: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 382: LD_ADDR_EXP 10
 386: PUSH
 387: LD_STRING Markov
 389: PPUSH
 390: LD_EXP 1
 394: NOT
 395: PPUSH
 396: LD_EXP 2
 400: PPUSH
 401: CALL 785 0 3
 405: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 406: LD_ADDR_EXP 13
 410: PUSH
 411: LD_STRING Aviradze
 413: PPUSH
 414: LD_EXP 1
 418: NOT
 419: PPUSH
 420: LD_EXP 2
 424: PPUSH
 425: CALL 785 0 3
 429: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 430: LD_ADDR_EXP 12
 434: PUSH
 435: LD_STRING Kurt
 437: PPUSH
 438: LD_EXP 1
 442: NOT
 443: PPUSH
 444: LD_EXP 2
 448: PPUSH
 449: CALL 785 0 3
 453: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 454: LD_ADDR_EXP 5
 458: PUSH
 459: LD_STRING Mike
 461: PPUSH
 462: LD_EXP 1
 466: NOT
 467: PPUSH
 468: LD_EXP 2
 472: PPUSH
 473: CALL 785 0 3
 477: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 478: LD_ADDR_EXP 11
 482: PUSH
 483: LD_STRING Olaf
 485: PPUSH
 486: LD_INT 0
 488: PPUSH
 489: LD_STRING 
 491: PPUSH
 492: CALL 785 0 3
 496: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 497: LD_ADDR_EXP 14
 501: PUSH
 502: LD_STRING 07_others
 504: PPUSH
 505: CALL_OW 31
 509: ST_TO_ADDR
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
 510: LD_ADDR_VAR 0 3
 514: PUSH
 515: LD_EXP 5
 519: PUSH
 520: LD_EXP 6
 524: PUSH
 525: LD_EXP 7
 529: PUSH
 530: LD_EXP 8
 534: PUSH
 535: LD_EXP 9
 539: PUSH
 540: LD_EXP 10
 544: PUSH
 545: LD_EXP 11
 549: PUSH
 550: LD_EXP 12
 554: PUSH
 555: LD_EXP 13
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: LIST
 565: LIST
 566: LIST
 567: LIST
 568: LIST
 569: LIST
 570: PUSH
 571: LD_EXP 14
 575: UNION
 576: ST_TO_ADDR
// end ; end_of_file
 577: LD_VAR 0 1
 581: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
 582: LD_INT 0
 584: PPUSH
 585: PPUSH
 586: PPUSH
 587: PPUSH
// uc_side := 3 ;
 588: LD_ADDR_OWVAR 20
 592: PUSH
 593: LD_INT 3
 595: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
 596: LD_ADDR_OWVAR 21
 600: PUSH
 601: LD_INT 1
 603: PPUSH
 604: LD_INT 3
 606: PPUSH
 607: CALL_OW 12
 611: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
 612: LD_ADDR_VAR 0 4
 616: PUSH
 617: LD_INT 5
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL_OW 517
 627: ST_TO_ADDR
// for i := 1 to 3 do
 628: LD_ADDR_VAR 0 2
 632: PUSH
 633: DOUBLE
 634: LD_INT 1
 636: DEC
 637: ST_TO_ADDR
 638: LD_INT 3
 640: PUSH
 641: FOR_TO
 642: IFFALSE 711
// begin PrepareHuman ( false , 2 , 0 ) ;
 644: LD_INT 0
 646: PPUSH
 647: LD_INT 2
 649: PPUSH
 650: LD_INT 0
 652: PPUSH
 653: CALL_OW 380
// un := CreateHuman ;
 657: LD_ADDR_VAR 0 3
 661: PUSH
 662: CALL_OW 44
 666: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
 667: LD_VAR 0 3
 671: PPUSH
 672: LD_VAR 0 4
 676: PUSH
 677: LD_INT 1
 679: ARRAY
 680: PUSH
 681: LD_VAR 0 2
 685: ARRAY
 686: PPUSH
 687: LD_VAR 0 4
 691: PUSH
 692: LD_INT 2
 694: ARRAY
 695: PUSH
 696: LD_VAR 0 2
 700: ARRAY
 701: PPUSH
 702: LD_INT 1
 704: PPUSH
 705: CALL_OW 601
// end ;
 709: GO 641
 711: POP
 712: POP
// end ; end_of_file
 713: LD_VAR 0 1
 717: RET
// export function Action ; begin
 718: LD_INT 0
 720: PPUSH
// InGameOn ;
 721: CALL_OW 8
// PrepareDeadBodies ;
 725: CALL 582 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 90 ) ;
 729: LD_INT 152
 731: PPUSH
 732: LD_INT 65
 734: PPUSH
 735: LD_INT 2
 737: PPUSH
 738: LD_INT 90
 740: NEG
 741: PPUSH
 742: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
 746: LD_INT 152
 748: PPUSH
 749: LD_INT 65
 751: PPUSH
 752: LD_INT 2
 754: PPUSH
 755: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
 759: LD_INT 122
 761: PPUSH
 762: LD_INT 40
 764: PPUSH
 765: LD_INT 2
 767: PPUSH
 768: LD_INT 8
 770: NEG
 771: PPUSH
 772: CALL_OW 330
// InGameOff ;
 776: CALL_OW 9
// end ; end_of_file
 780: LD_VAR 0 1
 784: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 785: LD_INT 0
 787: PPUSH
 788: PPUSH
// if exist_mode then
 789: LD_VAR 0 2
 793: IFFALSE 818
// unit := CreateCharacter ( prefix & ident ) else
 795: LD_ADDR_VAR 0 5
 799: PUSH
 800: LD_VAR 0 3
 804: PUSH
 805: LD_VAR 0 1
 809: STR
 810: PPUSH
 811: CALL_OW 34
 815: ST_TO_ADDR
 816: GO 833
// unit := NewCharacter ( ident ) ;
 818: LD_ADDR_VAR 0 5
 822: PUSH
 823: LD_VAR 0 1
 827: PPUSH
 828: CALL_OW 25
 832: ST_TO_ADDR
// result := unit ;
 833: LD_ADDR_VAR 0 4
 837: PUSH
 838: LD_VAR 0 5
 842: ST_TO_ADDR
// end ;
 843: LD_VAR 0 4
 847: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 848: LD_INT 0
 850: PPUSH
 851: PPUSH
// if not side or not nation then
 852: LD_VAR 0 1
 856: NOT
 857: PUSH
 858: LD_VAR 0 2
 862: NOT
 863: OR
 864: IFFALSE 868
// exit ;
 866: GO 1636
// case nation of nation_american :
 868: LD_VAR 0 2
 872: PUSH
 873: LD_INT 1
 875: DOUBLE
 876: EQUAL
 877: IFTRUE 881
 879: GO 1095
 881: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 882: LD_ADDR_VAR 0 4
 886: PUSH
 887: LD_INT 35
 889: PUSH
 890: LD_INT 45
 892: PUSH
 893: LD_INT 46
 895: PUSH
 896: LD_INT 47
 898: PUSH
 899: LD_INT 82
 901: PUSH
 902: LD_INT 83
 904: PUSH
 905: LD_INT 84
 907: PUSH
 908: LD_INT 85
 910: PUSH
 911: LD_INT 86
 913: PUSH
 914: LD_INT 1
 916: PUSH
 917: LD_INT 2
 919: PUSH
 920: LD_INT 6
 922: PUSH
 923: LD_INT 15
 925: PUSH
 926: LD_INT 16
 928: PUSH
 929: LD_INT 7
 931: PUSH
 932: LD_INT 12
 934: PUSH
 935: LD_INT 13
 937: PUSH
 938: LD_INT 10
 940: PUSH
 941: LD_INT 14
 943: PUSH
 944: LD_INT 20
 946: PUSH
 947: LD_INT 21
 949: PUSH
 950: LD_INT 22
 952: PUSH
 953: LD_INT 25
 955: PUSH
 956: LD_INT 32
 958: PUSH
 959: LD_INT 27
 961: PUSH
 962: LD_INT 36
 964: PUSH
 965: LD_INT 69
 967: PUSH
 968: LD_INT 39
 970: PUSH
 971: LD_INT 34
 973: PUSH
 974: LD_INT 40
 976: PUSH
 977: LD_INT 48
 979: PUSH
 980: LD_INT 49
 982: PUSH
 983: LD_INT 50
 985: PUSH
 986: LD_INT 51
 988: PUSH
 989: LD_INT 52
 991: PUSH
 992: LD_INT 53
 994: PUSH
 995: LD_INT 54
 997: PUSH
 998: LD_INT 55
1000: PUSH
1001: LD_INT 56
1003: PUSH
1004: LD_INT 57
1006: PUSH
1007: LD_INT 58
1009: PUSH
1010: LD_INT 59
1012: PUSH
1013: LD_INT 60
1015: PUSH
1016: LD_INT 61
1018: PUSH
1019: LD_INT 62
1021: PUSH
1022: LD_INT 80
1024: PUSH
1025: LD_INT 82
1027: PUSH
1028: LD_INT 83
1030: PUSH
1031: LD_INT 84
1033: PUSH
1034: LD_INT 85
1036: PUSH
1037: LD_INT 86
1039: PUSH
1040: EMPTY
1041: LIST
1042: LIST
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: ST_TO_ADDR
1093: GO 1560
1095: LD_INT 2
1097: DOUBLE
1098: EQUAL
1099: IFTRUE 1103
1101: GO 1329
1103: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
1104: LD_ADDR_VAR 0 4
1108: PUSH
1109: LD_INT 35
1111: PUSH
1112: LD_INT 45
1114: PUSH
1115: LD_INT 46
1117: PUSH
1118: LD_INT 47
1120: PUSH
1121: LD_INT 82
1123: PUSH
1124: LD_INT 83
1126: PUSH
1127: LD_INT 84
1129: PUSH
1130: LD_INT 85
1132: PUSH
1133: LD_INT 87
1135: PUSH
1136: LD_INT 70
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: LD_INT 11
1144: PUSH
1145: LD_INT 3
1147: PUSH
1148: LD_INT 4
1150: PUSH
1151: LD_INT 5
1153: PUSH
1154: LD_INT 6
1156: PUSH
1157: LD_INT 15
1159: PUSH
1160: LD_INT 18
1162: PUSH
1163: LD_INT 7
1165: PUSH
1166: LD_INT 17
1168: PUSH
1169: LD_INT 8
1171: PUSH
1172: LD_INT 20
1174: PUSH
1175: LD_INT 21
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_INT 72
1183: PUSH
1184: LD_INT 26
1186: PUSH
1187: LD_INT 69
1189: PUSH
1190: LD_INT 39
1192: PUSH
1193: LD_INT 40
1195: PUSH
1196: LD_INT 41
1198: PUSH
1199: LD_INT 42
1201: PUSH
1202: LD_INT 43
1204: PUSH
1205: LD_INT 48
1207: PUSH
1208: LD_INT 49
1210: PUSH
1211: LD_INT 50
1213: PUSH
1214: LD_INT 51
1216: PUSH
1217: LD_INT 52
1219: PUSH
1220: LD_INT 53
1222: PUSH
1223: LD_INT 54
1225: PUSH
1226: LD_INT 55
1228: PUSH
1229: LD_INT 56
1231: PUSH
1232: LD_INT 60
1234: PUSH
1235: LD_INT 61
1237: PUSH
1238: LD_INT 62
1240: PUSH
1241: LD_INT 66
1243: PUSH
1244: LD_INT 67
1246: PUSH
1247: LD_INT 68
1249: PUSH
1250: LD_INT 81
1252: PUSH
1253: LD_INT 82
1255: PUSH
1256: LD_INT 83
1258: PUSH
1259: LD_INT 84
1261: PUSH
1262: LD_INT 85
1264: PUSH
1265: LD_INT 87
1267: PUSH
1268: LD_INT 88
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: LIST
1325: LIST
1326: ST_TO_ADDR
1327: GO 1560
1329: LD_INT 3
1331: DOUBLE
1332: EQUAL
1333: IFTRUE 1337
1335: GO 1559
1337: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1338: LD_ADDR_VAR 0 4
1342: PUSH
1343: LD_INT 46
1345: PUSH
1346: LD_INT 47
1348: PUSH
1349: LD_INT 1
1351: PUSH
1352: LD_INT 2
1354: PUSH
1355: LD_INT 82
1357: PUSH
1358: LD_INT 83
1360: PUSH
1361: LD_INT 84
1363: PUSH
1364: LD_INT 85
1366: PUSH
1367: LD_INT 86
1369: PUSH
1370: LD_INT 11
1372: PUSH
1373: LD_INT 9
1375: PUSH
1376: LD_INT 20
1378: PUSH
1379: LD_INT 19
1381: PUSH
1382: LD_INT 21
1384: PUSH
1385: LD_INT 24
1387: PUSH
1388: LD_INT 22
1390: PUSH
1391: LD_INT 25
1393: PUSH
1394: LD_INT 28
1396: PUSH
1397: LD_INT 29
1399: PUSH
1400: LD_INT 30
1402: PUSH
1403: LD_INT 31
1405: PUSH
1406: LD_INT 37
1408: PUSH
1409: LD_INT 38
1411: PUSH
1412: LD_INT 32
1414: PUSH
1415: LD_INT 27
1417: PUSH
1418: LD_INT 33
1420: PUSH
1421: LD_INT 69
1423: PUSH
1424: LD_INT 39
1426: PUSH
1427: LD_INT 34
1429: PUSH
1430: LD_INT 40
1432: PUSH
1433: LD_INT 71
1435: PUSH
1436: LD_INT 23
1438: PUSH
1439: LD_INT 44
1441: PUSH
1442: LD_INT 48
1444: PUSH
1445: LD_INT 49
1447: PUSH
1448: LD_INT 50
1450: PUSH
1451: LD_INT 51
1453: PUSH
1454: LD_INT 52
1456: PUSH
1457: LD_INT 53
1459: PUSH
1460: LD_INT 54
1462: PUSH
1463: LD_INT 55
1465: PUSH
1466: LD_INT 56
1468: PUSH
1469: LD_INT 57
1471: PUSH
1472: LD_INT 58
1474: PUSH
1475: LD_INT 59
1477: PUSH
1478: LD_INT 63
1480: PUSH
1481: LD_INT 64
1483: PUSH
1484: LD_INT 65
1486: PUSH
1487: LD_INT 82
1489: PUSH
1490: LD_INT 83
1492: PUSH
1493: LD_INT 84
1495: PUSH
1496: LD_INT 85
1498: PUSH
1499: LD_INT 86
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: LIST
1555: LIST
1556: ST_TO_ADDR
1557: GO 1560
1559: POP
// if state > - 1 and state < 3 then
1560: LD_VAR 0 3
1564: PUSH
1565: LD_INT 1
1567: NEG
1568: GREATER
1569: PUSH
1570: LD_VAR 0 3
1574: PUSH
1575: LD_INT 3
1577: LESS
1578: AND
1579: IFFALSE 1636
// for i in result do
1581: LD_ADDR_VAR 0 5
1585: PUSH
1586: LD_VAR 0 4
1590: PUSH
1591: FOR_IN
1592: IFFALSE 1634
// if GetTech ( i , side ) <> state then
1594: LD_VAR 0 5
1598: PPUSH
1599: LD_VAR 0 1
1603: PPUSH
1604: CALL_OW 321
1608: PUSH
1609: LD_VAR 0 3
1613: NONEQUAL
1614: IFFALSE 1632
// result := result diff i ;
1616: LD_ADDR_VAR 0 4
1620: PUSH
1621: LD_VAR 0 4
1625: PUSH
1626: LD_VAR 0 5
1630: DIFF
1631: ST_TO_ADDR
1632: GO 1591
1634: POP
1635: POP
// end ;
1636: LD_VAR 0 4
1640: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
1641: LD_INT 0
1643: PPUSH
1644: PPUSH
1645: PPUSH
// result := true ;
1646: LD_ADDR_VAR 0 3
1650: PUSH
1651: LD_INT 1
1653: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
1654: LD_ADDR_VAR 0 5
1658: PUSH
1659: LD_VAR 0 2
1663: PPUSH
1664: CALL_OW 480
1668: ST_TO_ADDR
// if not tmp then
1669: LD_VAR 0 5
1673: NOT
1674: IFFALSE 1678
// exit ;
1676: GO 1727
// for i in tmp do
1678: LD_ADDR_VAR 0 4
1682: PUSH
1683: LD_VAR 0 5
1687: PUSH
1688: FOR_IN
1689: IFFALSE 1725
// if GetTech ( i , side ) <> state_researched then
1691: LD_VAR 0 4
1695: PPUSH
1696: LD_VAR 0 1
1700: PPUSH
1701: CALL_OW 321
1705: PUSH
1706: LD_INT 2
1708: NONEQUAL
1709: IFFALSE 1723
// begin result := false ;
1711: LD_ADDR_VAR 0 3
1715: PUSH
1716: LD_INT 0
1718: ST_TO_ADDR
// exit ;
1719: POP
1720: POP
1721: GO 1727
// end ;
1723: GO 1688
1725: POP
1726: POP
// end ;
1727: LD_VAR 0 3
1731: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
1732: LD_INT 0
1734: PPUSH
1735: PPUSH
1736: PPUSH
1737: PPUSH
1738: PPUSH
1739: PPUSH
1740: PPUSH
1741: PPUSH
1742: PPUSH
1743: PPUSH
1744: PPUSH
1745: PPUSH
1746: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
1747: LD_VAR 0 1
1751: NOT
1752: PUSH
1753: LD_VAR 0 1
1757: PPUSH
1758: CALL_OW 257
1762: PUSH
1763: LD_INT 9
1765: NONEQUAL
1766: OR
1767: IFFALSE 1771
// exit ;
1769: GO 2344
// side := GetSide ( unit ) ;
1771: LD_ADDR_VAR 0 9
1775: PUSH
1776: LD_VAR 0 1
1780: PPUSH
1781: CALL_OW 255
1785: ST_TO_ADDR
// tech_space := tech_spacanom ;
1786: LD_ADDR_VAR 0 12
1790: PUSH
1791: LD_INT 29
1793: ST_TO_ADDR
// tech_time := tech_taurad ;
1794: LD_ADDR_VAR 0 13
1798: PUSH
1799: LD_INT 28
1801: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
1802: LD_ADDR_VAR 0 11
1806: PUSH
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 310
1816: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
1817: LD_VAR 0 11
1821: PPUSH
1822: CALL_OW 247
1826: PUSH
1827: LD_INT 2
1829: EQUAL
1830: IFFALSE 1834
// exit ;
1832: GO 2344
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
1834: LD_ADDR_VAR 0 8
1838: PUSH
1839: LD_INT 81
1841: PUSH
1842: LD_VAR 0 9
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 3
1853: PUSH
1854: LD_INT 21
1856: PUSH
1857: LD_INT 3
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: PPUSH
1872: CALL_OW 69
1876: ST_TO_ADDR
// if not tmp then
1877: LD_VAR 0 8
1881: NOT
1882: IFFALSE 1886
// exit ;
1884: GO 2344
// if in_unit then
1886: LD_VAR 0 11
1890: IFFALSE 1914
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
1892: LD_ADDR_VAR 0 10
1896: PUSH
1897: LD_VAR 0 8
1901: PPUSH
1902: LD_VAR 0 11
1906: PPUSH
1907: CALL_OW 74
1911: ST_TO_ADDR
1912: GO 1934
// enemy := NearestUnitToUnit ( tmp , unit ) ;
1914: LD_ADDR_VAR 0 10
1918: PUSH
1919: LD_VAR 0 8
1923: PPUSH
1924: LD_VAR 0 1
1928: PPUSH
1929: CALL_OW 74
1933: ST_TO_ADDR
// if not enemy then
1934: LD_VAR 0 10
1938: NOT
1939: IFFALSE 1943
// exit ;
1941: GO 2344
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
1943: LD_VAR 0 11
1947: PUSH
1948: LD_VAR 0 11
1952: PPUSH
1953: LD_VAR 0 10
1957: PPUSH
1958: CALL_OW 296
1962: PUSH
1963: LD_INT 13
1965: GREATER
1966: AND
1967: PUSH
1968: LD_VAR 0 1
1972: PPUSH
1973: LD_VAR 0 10
1977: PPUSH
1978: CALL_OW 296
1982: PUSH
1983: LD_INT 12
1985: GREATER
1986: OR
1987: IFFALSE 1991
// exit ;
1989: GO 2344
// missile := [ 1 ] ;
1991: LD_ADDR_VAR 0 14
1995: PUSH
1996: LD_INT 1
1998: PUSH
1999: EMPTY
2000: LIST
2001: ST_TO_ADDR
// if Researched ( side , tech_space ) then
2002: LD_VAR 0 9
2006: PPUSH
2007: LD_VAR 0 12
2011: PPUSH
2012: CALL_OW 325
2016: IFFALSE 2045
// missile := Replace ( missile , missile + 1 , 2 ) ;
2018: LD_ADDR_VAR 0 14
2022: PUSH
2023: LD_VAR 0 14
2027: PPUSH
2028: LD_VAR 0 14
2032: PUSH
2033: LD_INT 1
2035: PLUS
2036: PPUSH
2037: LD_INT 2
2039: PPUSH
2040: CALL_OW 1
2044: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
2045: LD_VAR 0 9
2049: PPUSH
2050: LD_VAR 0 13
2054: PPUSH
2055: CALL_OW 325
2059: PUSH
2060: LD_VAR 0 10
2064: PPUSH
2065: CALL_OW 255
2069: PPUSH
2070: LD_VAR 0 13
2074: PPUSH
2075: CALL_OW 325
2079: NOT
2080: AND
2081: IFFALSE 2110
// missile := Replace ( missile , missile + 1 , 3 ) ;
2083: LD_ADDR_VAR 0 14
2087: PUSH
2088: LD_VAR 0 14
2092: PPUSH
2093: LD_VAR 0 14
2097: PUSH
2098: LD_INT 1
2100: PLUS
2101: PPUSH
2102: LD_INT 3
2104: PPUSH
2105: CALL_OW 1
2109: ST_TO_ADDR
// if missile < 2 then
2110: LD_VAR 0 14
2114: PUSH
2115: LD_INT 2
2117: LESS
2118: IFFALSE 2122
// exit ;
2120: GO 2344
// x := GetX ( enemy ) ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_VAR 0 10
2131: PPUSH
2132: CALL_OW 250
2136: ST_TO_ADDR
// y := GetY ( enemy ) ;
2137: LD_ADDR_VAR 0 5
2141: PUSH
2142: LD_VAR 0 10
2146: PPUSH
2147: CALL_OW 251
2151: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
2152: LD_ADDR_VAR 0 6
2156: PUSH
2157: LD_VAR 0 4
2161: PUSH
2162: LD_INT 1
2164: NEG
2165: PPUSH
2166: LD_INT 1
2168: PPUSH
2169: CALL_OW 12
2173: PLUS
2174: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
2175: LD_ADDR_VAR 0 7
2179: PUSH
2180: LD_VAR 0 5
2184: PUSH
2185: LD_INT 1
2187: NEG
2188: PPUSH
2189: LD_INT 1
2191: PPUSH
2192: CALL_OW 12
2196: PLUS
2197: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2198: LD_VAR 0 6
2202: PPUSH
2203: LD_VAR 0 7
2207: PPUSH
2208: CALL_OW 488
2212: NOT
2213: IFFALSE 2235
// begin _x := x ;
2215: LD_ADDR_VAR 0 6
2219: PUSH
2220: LD_VAR 0 4
2224: ST_TO_ADDR
// _y := y ;
2225: LD_ADDR_VAR 0 7
2229: PUSH
2230: LD_VAR 0 5
2234: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
2235: LD_ADDR_VAR 0 3
2239: PUSH
2240: LD_INT 1
2242: PPUSH
2243: LD_VAR 0 14
2247: PPUSH
2248: CALL_OW 12
2252: ST_TO_ADDR
// case i of 1 :
2253: LD_VAR 0 3
2257: PUSH
2258: LD_INT 1
2260: DOUBLE
2261: EQUAL
2262: IFTRUE 2266
2264: GO 2283
2266: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
2267: LD_VAR 0 1
2271: PPUSH
2272: LD_VAR 0 10
2276: PPUSH
2277: CALL_OW 115
2281: GO 2344
2283: LD_INT 2
2285: DOUBLE
2286: EQUAL
2287: IFTRUE 2291
2289: GO 2313
2291: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
2292: LD_VAR 0 1
2296: PPUSH
2297: LD_VAR 0 6
2301: PPUSH
2302: LD_VAR 0 7
2306: PPUSH
2307: CALL_OW 153
2311: GO 2344
2313: LD_INT 3
2315: DOUBLE
2316: EQUAL
2317: IFTRUE 2321
2319: GO 2343
2321: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
2322: LD_VAR 0 1
2326: PPUSH
2327: LD_VAR 0 6
2331: PPUSH
2332: LD_VAR 0 7
2336: PPUSH
2337: CALL_OW 154
2341: GO 2344
2343: POP
// end ;
2344: LD_VAR 0 2
2348: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
2349: LD_INT 0
2351: PPUSH
2352: PPUSH
2353: PPUSH
2354: PPUSH
2355: PPUSH
2356: PPUSH
// if not unit or not building then
2357: LD_VAR 0 1
2361: NOT
2362: PUSH
2363: LD_VAR 0 2
2367: NOT
2368: OR
2369: IFFALSE 2373
// exit ;
2371: GO 2531
// x := GetX ( building ) ;
2373: LD_ADDR_VAR 0 5
2377: PUSH
2378: LD_VAR 0 2
2382: PPUSH
2383: CALL_OW 250
2387: ST_TO_ADDR
// y := GetY ( building ) ;
2388: LD_ADDR_VAR 0 6
2392: PUSH
2393: LD_VAR 0 2
2397: PPUSH
2398: CALL_OW 251
2402: ST_TO_ADDR
// for i = 0 to 5 do
2403: LD_ADDR_VAR 0 4
2407: PUSH
2408: DOUBLE
2409: LD_INT 0
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 5
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2529
// begin _x := ShiftX ( x , i , 3 ) ;
2419: LD_ADDR_VAR 0 7
2423: PUSH
2424: LD_VAR 0 5
2428: PPUSH
2429: LD_VAR 0 4
2433: PPUSH
2434: LD_INT 3
2436: PPUSH
2437: CALL_OW 272
2441: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
2442: LD_ADDR_VAR 0 8
2446: PUSH
2447: LD_VAR 0 6
2451: PPUSH
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_INT 3
2459: PPUSH
2460: CALL_OW 273
2464: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
2465: LD_VAR 0 7
2469: PPUSH
2470: LD_VAR 0 8
2474: PPUSH
2475: CALL_OW 488
2479: NOT
2480: IFFALSE 2484
// continue ;
2482: GO 2416
// if HexInfo ( _x , _y ) = 0 then
2484: LD_VAR 0 7
2488: PPUSH
2489: LD_VAR 0 8
2493: PPUSH
2494: CALL_OW 428
2498: PUSH
2499: LD_INT 0
2501: EQUAL
2502: IFFALSE 2527
// begin ComMoveXY ( unit , _x , _y ) ;
2504: LD_VAR 0 1
2508: PPUSH
2509: LD_VAR 0 7
2513: PPUSH
2514: LD_VAR 0 8
2518: PPUSH
2519: CALL_OW 111
// exit ;
2523: POP
2524: POP
2525: GO 2531
// end ; end ;
2527: GO 2416
2529: POP
2530: POP
// end ;
2531: LD_VAR 0 3
2535: RET
// export function ScanBase ( side , base_area ) ; begin
2536: LD_INT 0
2538: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 2
2548: PPUSH
2549: LD_INT 81
2551: PUSH
2552: LD_VAR 0 1
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PPUSH
2561: CALL_OW 70
2565: ST_TO_ADDR
// end ;
2566: LD_VAR 0 3
2570: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
2571: LD_INT 0
2573: PPUSH
2574: PPUSH
2575: PPUSH
2576: PPUSH
// result := false ;
2577: LD_ADDR_VAR 0 2
2581: PUSH
2582: LD_INT 0
2584: ST_TO_ADDR
// side := GetSide ( unit ) ;
2585: LD_ADDR_VAR 0 3
2589: PUSH
2590: LD_VAR 0 1
2594: PPUSH
2595: CALL_OW 255
2599: ST_TO_ADDR
// nat := GetNation ( unit ) ;
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_VAR 0 1
2609: PPUSH
2610: CALL_OW 248
2614: ST_TO_ADDR
// case nat of 1 :
2615: LD_VAR 0 4
2619: PUSH
2620: LD_INT 1
2622: DOUBLE
2623: EQUAL
2624: IFTRUE 2628
2626: GO 2639
2628: POP
// tech := tech_lassight ; 2 :
2629: LD_ADDR_VAR 0 5
2633: PUSH
2634: LD_INT 12
2636: ST_TO_ADDR
2637: GO 2678
2639: LD_INT 2
2641: DOUBLE
2642: EQUAL
2643: IFTRUE 2647
2645: GO 2658
2647: POP
// tech := tech_mortar ; 3 :
2648: LD_ADDR_VAR 0 5
2652: PUSH
2653: LD_INT 41
2655: ST_TO_ADDR
2656: GO 2678
2658: LD_INT 3
2660: DOUBLE
2661: EQUAL
2662: IFTRUE 2666
2664: GO 2677
2666: POP
// tech := tech_bazooka ; end ;
2667: LD_ADDR_VAR 0 5
2671: PUSH
2672: LD_INT 44
2674: ST_TO_ADDR
2675: GO 2678
2677: POP
// if Researched ( side , tech ) then
2678: LD_VAR 0 3
2682: PPUSH
2683: LD_VAR 0 5
2687: PPUSH
2688: CALL_OW 325
2692: IFFALSE 2719
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
2694: LD_ADDR_VAR 0 2
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: LD_INT 8
2704: PUSH
2705: LD_INT 9
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: LD_VAR 0 4
2717: ARRAY
2718: ST_TO_ADDR
// end ;
2719: LD_VAR 0 2
2723: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
2724: LD_INT 0
2726: PPUSH
2727: PPUSH
2728: PPUSH
// if not mines then
2729: LD_VAR 0 2
2733: NOT
2734: IFFALSE 2738
// exit ;
2736: GO 2882
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
2738: LD_ADDR_VAR 0 5
2742: PUSH
2743: LD_INT 81
2745: PUSH
2746: LD_VAR 0 1
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 3
2757: PUSH
2758: LD_INT 21
2760: PUSH
2761: LD_INT 3
2763: PUSH
2764: EMPTY
2765: LIST
2766: LIST
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: PPUSH
2776: CALL_OW 69
2780: ST_TO_ADDR
// for i in mines do
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_VAR 0 2
2790: PUSH
2791: FOR_IN
2792: IFFALSE 2880
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
2794: LD_VAR 0 4
2798: PUSH
2799: LD_INT 1
2801: ARRAY
2802: PPUSH
2803: LD_VAR 0 4
2807: PUSH
2808: LD_INT 2
2810: ARRAY
2811: PPUSH
2812: CALL_OW 458
2816: NOT
2817: IFFALSE 2821
// continue ;
2819: GO 2791
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
2821: LD_VAR 0 4
2825: PUSH
2826: LD_INT 1
2828: ARRAY
2829: PPUSH
2830: LD_VAR 0 4
2834: PUSH
2835: LD_INT 2
2837: ARRAY
2838: PPUSH
2839: CALL_OW 428
2843: PUSH
2844: LD_VAR 0 5
2848: IN
2849: IFFALSE 2878
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
2851: LD_VAR 0 4
2855: PUSH
2856: LD_INT 1
2858: ARRAY
2859: PPUSH
2860: LD_VAR 0 4
2864: PUSH
2865: LD_INT 2
2867: ARRAY
2868: PPUSH
2869: LD_VAR 0 1
2873: PPUSH
2874: CALL_OW 456
// end ;
2878: GO 2791
2880: POP
2881: POP
// end ;
2882: LD_VAR 0 3
2886: RET
// export function Count ( array ) ; var i ; begin
2887: LD_INT 0
2889: PPUSH
2890: PPUSH
// result := 0 ;
2891: LD_ADDR_VAR 0 2
2895: PUSH
2896: LD_INT 0
2898: ST_TO_ADDR
// for i in array do
2899: LD_ADDR_VAR 0 3
2903: PUSH
2904: LD_VAR 0 1
2908: PUSH
2909: FOR_IN
2910: IFFALSE 2934
// if i then
2912: LD_VAR 0 3
2916: IFFALSE 2932
// result := result + 1 ;
2918: LD_ADDR_VAR 0 2
2922: PUSH
2923: LD_VAR 0 2
2927: PUSH
2928: LD_INT 1
2930: PLUS
2931: ST_TO_ADDR
2932: GO 2909
2934: POP
2935: POP
// end ;
2936: LD_VAR 0 2
2940: RET
// export function IsEmpty ( building ) ; begin
2941: LD_INT 0
2943: PPUSH
// if not building then
2944: LD_VAR 0 1
2948: NOT
2949: IFFALSE 2953
// exit ;
2951: GO 2996
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
2953: LD_ADDR_VAR 0 2
2957: PUSH
2958: LD_VAR 0 1
2962: PUSH
2963: LD_INT 22
2965: PUSH
2966: LD_VAR 0 1
2970: PPUSH
2971: CALL_OW 255
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 58
2982: PUSH
2983: EMPTY
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PPUSH
2990: CALL_OW 69
2994: IN
2995: ST_TO_ADDR
// end ;
2996: LD_VAR 0 2
3000: RET
// export function IsNotFull ( building ) ; begin
3001: LD_INT 0
3003: PPUSH
// if not building then
3004: LD_VAR 0 1
3008: NOT
3009: IFFALSE 3013
// exit ;
3011: GO 3032
// result := UnitsInside ( building ) < 6 ;
3013: LD_ADDR_VAR 0 2
3017: PUSH
3018: LD_VAR 0 1
3022: PPUSH
3023: CALL_OW 313
3027: PUSH
3028: LD_INT 6
3030: LESS
3031: ST_TO_ADDR
// end ;
3032: LD_VAR 0 2
3036: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
3037: LD_INT 0
3039: PPUSH
3040: PPUSH
3041: PPUSH
3042: PPUSH
// tmp := [ ] ;
3043: LD_ADDR_VAR 0 3
3047: PUSH
3048: EMPTY
3049: ST_TO_ADDR
// list := [ ] ;
3050: LD_ADDR_VAR 0 5
3054: PUSH
3055: EMPTY
3056: ST_TO_ADDR
// for i = 16 to 25 do
3057: LD_ADDR_VAR 0 4
3061: PUSH
3062: DOUBLE
3063: LD_INT 16
3065: DEC
3066: ST_TO_ADDR
3067: LD_INT 25
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3144
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
3073: LD_ADDR_VAR 0 3
3077: PUSH
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 22
3085: PUSH
3086: LD_VAR 0 1
3090: PPUSH
3091: CALL_OW 255
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 91
3102: PUSH
3103: LD_VAR 0 1
3107: PUSH
3108: LD_INT 6
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 30
3118: PUSH
3119: LD_VAR 0 4
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: LIST
3132: PUSH
3133: EMPTY
3134: LIST
3135: PPUSH
3136: CALL_OW 69
3140: ADD
3141: ST_TO_ADDR
3142: GO 3070
3144: POP
3145: POP
// for i = 1 to tmp do
3146: LD_ADDR_VAR 0 4
3150: PUSH
3151: DOUBLE
3152: LD_INT 1
3154: DEC
3155: ST_TO_ADDR
3156: LD_VAR 0 3
3160: PUSH
3161: FOR_TO
3162: IFFALSE 3250
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
3164: LD_ADDR_VAR 0 5
3168: PUSH
3169: LD_VAR 0 5
3173: PUSH
3174: LD_VAR 0 3
3178: PUSH
3179: LD_VAR 0 4
3183: ARRAY
3184: PPUSH
3185: CALL_OW 266
3189: PUSH
3190: LD_VAR 0 3
3194: PUSH
3195: LD_VAR 0 4
3199: ARRAY
3200: PPUSH
3201: CALL_OW 250
3205: PUSH
3206: LD_VAR 0 3
3210: PUSH
3211: LD_VAR 0 4
3215: ARRAY
3216: PPUSH
3217: CALL_OW 251
3221: PUSH
3222: LD_VAR 0 3
3226: PUSH
3227: LD_VAR 0 4
3231: ARRAY
3232: PPUSH
3233: CALL_OW 254
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: ADD
3247: ST_TO_ADDR
3248: GO 3161
3250: POP
3251: POP
// result := list ;
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: LD_VAR 0 5
3261: ST_TO_ADDR
// end ;
3262: LD_VAR 0 2
3266: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
3267: LD_INT 0
3269: PPUSH
3270: PPUSH
3271: PPUSH
3272: PPUSH
3273: PPUSH
3274: PPUSH
3275: PPUSH
// if not factory then
3276: LD_VAR 0 1
3280: NOT
3281: IFFALSE 3285
// exit ;
3283: GO 3878
// if control = control_apeman then
3285: LD_VAR 0 4
3289: PUSH
3290: LD_INT 5
3292: EQUAL
3293: IFFALSE 3402
// begin tmp := UnitsInside ( factory ) ;
3295: LD_ADDR_VAR 0 8
3299: PUSH
3300: LD_VAR 0 1
3304: PPUSH
3305: CALL_OW 313
3309: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
3310: LD_VAR 0 8
3314: PPUSH
3315: LD_INT 25
3317: PUSH
3318: LD_INT 12
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: PPUSH
3325: CALL_OW 72
3329: NOT
3330: IFFALSE 3340
// control := control_manual ;
3332: LD_ADDR_VAR 0 4
3336: PUSH
3337: LD_INT 1
3339: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
3340: LD_ADDR_VAR 0 8
3344: PUSH
3345: LD_VAR 0 1
3349: PPUSH
3350: CALL 3037 0 1
3354: ST_TO_ADDR
// if tmp then
3355: LD_VAR 0 8
3359: IFFALSE 3402
// begin for i in tmp do
3361: LD_ADDR_VAR 0 7
3365: PUSH
3366: LD_VAR 0 8
3370: PUSH
3371: FOR_IN
3372: IFFALSE 3400
// if i [ 1 ] = b_ext_radio then
3374: LD_VAR 0 7
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: PUSH
3383: LD_INT 22
3385: EQUAL
3386: IFFALSE 3398
// begin control := control_remote ;
3388: LD_ADDR_VAR 0 4
3392: PUSH
3393: LD_INT 2
3395: ST_TO_ADDR
// break ;
3396: GO 3400
// end ;
3398: GO 3371
3400: POP
3401: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3402: LD_VAR 0 1
3406: PPUSH
3407: LD_VAR 0 2
3411: PPUSH
3412: LD_VAR 0 3
3416: PPUSH
3417: LD_VAR 0 4
3421: PPUSH
3422: LD_VAR 0 5
3426: PPUSH
3427: CALL_OW 448
3431: IFFALSE 3466
// begin result := [ chassis , engine , control , weapon ] ;
3433: LD_ADDR_VAR 0 6
3437: PUSH
3438: LD_VAR 0 2
3442: PUSH
3443: LD_VAR 0 3
3447: PUSH
3448: LD_VAR 0 4
3452: PUSH
3453: LD_VAR 0 5
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: ST_TO_ADDR
// exit ;
3464: GO 3878
// end ; _chassis := AvailableChassisList ( factory ) ;
3466: LD_ADDR_VAR 0 9
3470: PUSH
3471: LD_VAR 0 1
3475: PPUSH
3476: CALL_OW 475
3480: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
3481: LD_ADDR_VAR 0 11
3485: PUSH
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 476
3495: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
3496: LD_ADDR_VAR 0 12
3500: PUSH
3501: LD_VAR 0 1
3505: PPUSH
3506: CALL_OW 477
3510: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
3511: LD_ADDR_VAR 0 10
3515: PUSH
3516: LD_VAR 0 1
3520: PPUSH
3521: CALL_OW 478
3525: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
3526: LD_VAR 0 9
3530: NOT
3531: PUSH
3532: LD_VAR 0 11
3536: NOT
3537: OR
3538: PUSH
3539: LD_VAR 0 12
3543: NOT
3544: OR
3545: PUSH
3546: LD_VAR 0 10
3550: NOT
3551: OR
3552: IFFALSE 3587
// begin result := [ chassis , engine , control , weapon ] ;
3554: LD_ADDR_VAR 0 6
3558: PUSH
3559: LD_VAR 0 2
3563: PUSH
3564: LD_VAR 0 3
3568: PUSH
3569: LD_VAR 0 4
3573: PUSH
3574: LD_VAR 0 5
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: ST_TO_ADDR
// exit ;
3585: GO 3878
// end ; if not chassis in _chassis then
3587: LD_VAR 0 2
3591: PUSH
3592: LD_VAR 0 9
3596: IN
3597: NOT
3598: IFFALSE 3624
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
3600: LD_ADDR_VAR 0 2
3604: PUSH
3605: LD_VAR 0 9
3609: PUSH
3610: LD_INT 1
3612: PPUSH
3613: LD_VAR 0 9
3617: PPUSH
3618: CALL_OW 12
3622: ARRAY
3623: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
3624: LD_VAR 0 2
3628: PPUSH
3629: LD_VAR 0 3
3633: PPUSH
3634: CALL 3883 0 2
3638: NOT
3639: IFFALSE 3698
// repeat engine := _engine [ 1 ] ;
3641: LD_ADDR_VAR 0 3
3645: PUSH
3646: LD_VAR 0 11
3650: PUSH
3651: LD_INT 1
3653: ARRAY
3654: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
3655: LD_ADDR_VAR 0 11
3659: PUSH
3660: LD_VAR 0 11
3664: PPUSH
3665: LD_INT 1
3667: PPUSH
3668: CALL_OW 3
3672: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
3673: LD_VAR 0 2
3677: PPUSH
3678: LD_VAR 0 3
3682: PPUSH
3683: CALL 3883 0 2
3687: PUSH
3688: LD_VAR 0 11
3692: PUSH
3693: EMPTY
3694: EQUAL
3695: OR
3696: IFFALSE 3641
// if not control in _control then
3698: LD_VAR 0 4
3702: PUSH
3703: LD_VAR 0 12
3707: IN
3708: NOT
3709: IFFALSE 3735
// control := _control [ rand ( 1 , _control ) ] ;
3711: LD_ADDR_VAR 0 4
3715: PUSH
3716: LD_VAR 0 12
3720: PUSH
3721: LD_INT 1
3723: PPUSH
3724: LD_VAR 0 12
3728: PPUSH
3729: CALL_OW 12
3733: ARRAY
3734: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
3735: LD_VAR 0 2
3739: PPUSH
3740: LD_VAR 0 5
3744: PPUSH
3745: CALL 4103 0 2
3749: NOT
3750: IFFALSE 3809
// repeat weapon := _weapon [ 1 ] ;
3752: LD_ADDR_VAR 0 5
3756: PUSH
3757: LD_VAR 0 10
3761: PUSH
3762: LD_INT 1
3764: ARRAY
3765: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
3766: LD_ADDR_VAR 0 10
3770: PUSH
3771: LD_VAR 0 10
3775: PPUSH
3776: LD_INT 1
3778: PPUSH
3779: CALL_OW 3
3783: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
3784: LD_VAR 0 2
3788: PPUSH
3789: LD_VAR 0 5
3793: PPUSH
3794: CALL 4103 0 2
3798: PUSH
3799: LD_VAR 0 10
3803: PUSH
3804: EMPTY
3805: EQUAL
3806: OR
3807: IFFALSE 3752
// result := [ ] ;
3809: LD_ADDR_VAR 0 6
3813: PUSH
3814: EMPTY
3815: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
3816: LD_VAR 0 1
3820: PPUSH
3821: LD_VAR 0 2
3825: PPUSH
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_VAR 0 4
3835: PPUSH
3836: LD_VAR 0 5
3840: PPUSH
3841: CALL_OW 448
3845: IFFALSE 3878
// result := [ chassis , engine , control , weapon ] ;
3847: LD_ADDR_VAR 0 6
3851: PUSH
3852: LD_VAR 0 2
3856: PUSH
3857: LD_VAR 0 3
3861: PUSH
3862: LD_VAR 0 4
3866: PUSH
3867: LD_VAR 0 5
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: ST_TO_ADDR
// end ;
3878: LD_VAR 0 6
3882: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
3883: LD_INT 0
3885: PPUSH
// if not chassis or not engine then
3886: LD_VAR 0 1
3890: NOT
3891: PUSH
3892: LD_VAR 0 2
3896: NOT
3897: OR
3898: IFFALSE 3902
// exit ;
3900: GO 4098
// case engine of engine_solar :
3902: LD_VAR 0 2
3906: PUSH
3907: LD_INT 2
3909: DOUBLE
3910: EQUAL
3911: IFTRUE 3915
3913: GO 3953
3915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
3916: LD_ADDR_VAR 0 3
3920: PUSH
3921: LD_INT 11
3923: PUSH
3924: LD_INT 12
3926: PUSH
3927: LD_INT 13
3929: PUSH
3930: LD_INT 14
3932: PUSH
3933: LD_INT 1
3935: PUSH
3936: LD_INT 2
3938: PUSH
3939: LD_INT 3
3941: PUSH
3942: EMPTY
3943: LIST
3944: LIST
3945: LIST
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: ST_TO_ADDR
3951: GO 4082
3953: LD_INT 1
3955: DOUBLE
3956: EQUAL
3957: IFTRUE 3961
3959: GO 4023
3961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
3962: LD_ADDR_VAR 0 3
3966: PUSH
3967: LD_INT 11
3969: PUSH
3970: LD_INT 12
3972: PUSH
3973: LD_INT 13
3975: PUSH
3976: LD_INT 14
3978: PUSH
3979: LD_INT 1
3981: PUSH
3982: LD_INT 2
3984: PUSH
3985: LD_INT 3
3987: PUSH
3988: LD_INT 4
3990: PUSH
3991: LD_INT 5
3993: PUSH
3994: LD_INT 21
3996: PUSH
3997: LD_INT 23
3999: PUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 24
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: LIST
4020: ST_TO_ADDR
4021: GO 4082
4023: LD_INT 3
4025: DOUBLE
4026: EQUAL
4027: IFTRUE 4031
4029: GO 4081
4031: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
4032: LD_ADDR_VAR 0 3
4036: PUSH
4037: LD_INT 13
4039: PUSH
4040: LD_INT 14
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: LD_INT 4
4051: PUSH
4052: LD_INT 5
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 22
4060: PUSH
4061: LD_INT 23
4063: PUSH
4064: LD_INT 24
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ST_TO_ADDR
4079: GO 4082
4081: POP
// result := ( chassis in result ) ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: LD_VAR 0 1
4091: PUSH
4092: LD_VAR 0 3
4096: IN
4097: ST_TO_ADDR
// end ;
4098: LD_VAR 0 3
4102: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
4103: LD_INT 0
4105: PPUSH
// if not chassis or not weapon then
4106: LD_VAR 0 1
4110: NOT
4111: PUSH
4112: LD_VAR 0 2
4116: NOT
4117: OR
4118: IFFALSE 4122
// exit ;
4120: GO 5184
// case weapon of us_machine_gun :
4122: LD_VAR 0 2
4126: PUSH
4127: LD_INT 2
4129: DOUBLE
4130: EQUAL
4131: IFTRUE 4135
4133: GO 4165
4135: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
4136: LD_ADDR_VAR 0 3
4140: PUSH
4141: LD_INT 1
4143: PUSH
4144: LD_INT 2
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 4
4152: PUSH
4153: LD_INT 5
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: ST_TO_ADDR
4163: GO 5168
4165: LD_INT 3
4167: DOUBLE
4168: EQUAL
4169: IFTRUE 4173
4171: GO 4203
4173: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
4174: LD_ADDR_VAR 0 3
4178: PUSH
4179: LD_INT 1
4181: PUSH
4182: LD_INT 2
4184: PUSH
4185: LD_INT 3
4187: PUSH
4188: LD_INT 4
4190: PUSH
4191: LD_INT 5
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: ST_TO_ADDR
4201: GO 5168
4203: LD_INT 11
4205: DOUBLE
4206: EQUAL
4207: IFTRUE 4211
4209: GO 4241
4211: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
4212: LD_ADDR_VAR 0 3
4216: PUSH
4217: LD_INT 1
4219: PUSH
4220: LD_INT 2
4222: PUSH
4223: LD_INT 3
4225: PUSH
4226: LD_INT 4
4228: PUSH
4229: LD_INT 5
4231: PUSH
4232: EMPTY
4233: LIST
4234: LIST
4235: LIST
4236: LIST
4237: LIST
4238: ST_TO_ADDR
4239: GO 5168
4241: LD_INT 4
4243: DOUBLE
4244: EQUAL
4245: IFTRUE 4249
4247: GO 4275
4249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
4250: LD_ADDR_VAR 0 3
4254: PUSH
4255: LD_INT 2
4257: PUSH
4258: LD_INT 3
4260: PUSH
4261: LD_INT 4
4263: PUSH
4264: LD_INT 5
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: ST_TO_ADDR
4273: GO 5168
4275: LD_INT 5
4277: DOUBLE
4278: EQUAL
4279: IFTRUE 4283
4281: GO 4309
4283: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
4284: LD_ADDR_VAR 0 3
4288: PUSH
4289: LD_INT 2
4291: PUSH
4292: LD_INT 3
4294: PUSH
4295: LD_INT 4
4297: PUSH
4298: LD_INT 5
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: ST_TO_ADDR
4307: GO 5168
4309: LD_INT 9
4311: DOUBLE
4312: EQUAL
4313: IFTRUE 4317
4315: GO 4343
4317: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
4318: LD_ADDR_VAR 0 3
4322: PUSH
4323: LD_INT 2
4325: PUSH
4326: LD_INT 3
4328: PUSH
4329: LD_INT 4
4331: PUSH
4332: LD_INT 5
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: ST_TO_ADDR
4341: GO 5168
4343: LD_INT 7
4345: DOUBLE
4346: EQUAL
4347: IFTRUE 4351
4349: GO 4377
4351: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
4352: LD_ADDR_VAR 0 3
4356: PUSH
4357: LD_INT 2
4359: PUSH
4360: LD_INT 3
4362: PUSH
4363: LD_INT 4
4365: PUSH
4366: LD_INT 5
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: ST_TO_ADDR
4375: GO 5168
4377: LD_INT 12
4379: DOUBLE
4380: EQUAL
4381: IFTRUE 4385
4383: GO 4411
4385: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
4386: LD_ADDR_VAR 0 3
4390: PUSH
4391: LD_INT 2
4393: PUSH
4394: LD_INT 3
4396: PUSH
4397: LD_INT 4
4399: PUSH
4400: LD_INT 5
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: ST_TO_ADDR
4409: GO 5168
4411: LD_INT 13
4413: DOUBLE
4414: EQUAL
4415: IFTRUE 4419
4417: GO 4445
4419: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: LD_INT 2
4427: PUSH
4428: LD_INT 3
4430: PUSH
4431: LD_INT 4
4433: PUSH
4434: LD_INT 5
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: ST_TO_ADDR
4443: GO 5168
4445: LD_INT 14
4447: DOUBLE
4448: EQUAL
4449: IFTRUE 4453
4451: GO 4471
4453: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
4454: LD_ADDR_VAR 0 3
4458: PUSH
4459: LD_INT 4
4461: PUSH
4462: LD_INT 5
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: ST_TO_ADDR
4469: GO 5168
4471: LD_INT 6
4473: DOUBLE
4474: EQUAL
4475: IFTRUE 4479
4477: GO 4497
4479: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
4480: LD_ADDR_VAR 0 3
4484: PUSH
4485: LD_INT 4
4487: PUSH
4488: LD_INT 5
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: ST_TO_ADDR
4495: GO 5168
4497: LD_INT 10
4499: DOUBLE
4500: EQUAL
4501: IFTRUE 4505
4503: GO 4523
4505: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
4506: LD_ADDR_VAR 0 3
4510: PUSH
4511: LD_INT 4
4513: PUSH
4514: LD_INT 5
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: ST_TO_ADDR
4521: GO 5168
4523: LD_INT 22
4525: DOUBLE
4526: EQUAL
4527: IFTRUE 4531
4529: GO 4557
4531: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
4532: LD_ADDR_VAR 0 3
4536: PUSH
4537: LD_INT 11
4539: PUSH
4540: LD_INT 12
4542: PUSH
4543: LD_INT 13
4545: PUSH
4546: LD_INT 14
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: ST_TO_ADDR
4555: GO 5168
4557: LD_INT 23
4559: DOUBLE
4560: EQUAL
4561: IFTRUE 4565
4563: GO 4591
4565: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
4566: LD_ADDR_VAR 0 3
4570: PUSH
4571: LD_INT 11
4573: PUSH
4574: LD_INT 12
4576: PUSH
4577: LD_INT 13
4579: PUSH
4580: LD_INT 14
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: ST_TO_ADDR
4589: GO 5168
4591: LD_INT 24
4593: DOUBLE
4594: EQUAL
4595: IFTRUE 4599
4597: GO 4625
4599: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
4600: LD_ADDR_VAR 0 3
4604: PUSH
4605: LD_INT 11
4607: PUSH
4608: LD_INT 12
4610: PUSH
4611: LD_INT 13
4613: PUSH
4614: LD_INT 14
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: ST_TO_ADDR
4623: GO 5168
4625: LD_INT 30
4627: DOUBLE
4628: EQUAL
4629: IFTRUE 4633
4631: GO 4659
4633: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
4634: LD_ADDR_VAR 0 3
4638: PUSH
4639: LD_INT 11
4641: PUSH
4642: LD_INT 12
4644: PUSH
4645: LD_INT 13
4647: PUSH
4648: LD_INT 14
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: ST_TO_ADDR
4657: GO 5168
4659: LD_INT 25
4661: DOUBLE
4662: EQUAL
4663: IFTRUE 4667
4665: GO 4685
4667: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: LD_INT 13
4675: PUSH
4676: LD_INT 14
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: ST_TO_ADDR
4683: GO 5168
4685: LD_INT 27
4687: DOUBLE
4688: EQUAL
4689: IFTRUE 4693
4691: GO 4711
4693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
4694: LD_ADDR_VAR 0 3
4698: PUSH
4699: LD_INT 13
4701: PUSH
4702: LD_INT 14
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: ST_TO_ADDR
4709: GO 5168
4711: LD_EXP 21
4715: DOUBLE
4716: EQUAL
4717: IFTRUE 4721
4719: GO 4747
4721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
4722: LD_ADDR_VAR 0 3
4726: PUSH
4727: LD_INT 11
4729: PUSH
4730: LD_INT 12
4732: PUSH
4733: LD_INT 13
4735: PUSH
4736: LD_INT 14
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: ST_TO_ADDR
4745: GO 5168
4747: LD_INT 28
4749: DOUBLE
4750: EQUAL
4751: IFTRUE 4755
4753: GO 4773
4755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
4756: LD_ADDR_VAR 0 3
4760: PUSH
4761: LD_INT 13
4763: PUSH
4764: LD_INT 14
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: ST_TO_ADDR
4771: GO 5168
4773: LD_INT 29
4775: DOUBLE
4776: EQUAL
4777: IFTRUE 4781
4779: GO 4799
4781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
4782: LD_ADDR_VAR 0 3
4786: PUSH
4787: LD_INT 13
4789: PUSH
4790: LD_INT 14
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: ST_TO_ADDR
4797: GO 5168
4799: LD_INT 31
4801: DOUBLE
4802: EQUAL
4803: IFTRUE 4807
4805: GO 4825
4807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
4808: LD_ADDR_VAR 0 3
4812: PUSH
4813: LD_INT 13
4815: PUSH
4816: LD_INT 14
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: ST_TO_ADDR
4823: GO 5168
4825: LD_INT 26
4827: DOUBLE
4828: EQUAL
4829: IFTRUE 4833
4831: GO 4851
4833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 13
4841: PUSH
4842: LD_INT 14
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: ST_TO_ADDR
4849: GO 5168
4851: LD_INT 42
4853: DOUBLE
4854: EQUAL
4855: IFTRUE 4859
4857: GO 4885
4859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
4860: LD_ADDR_VAR 0 3
4864: PUSH
4865: LD_INT 21
4867: PUSH
4868: LD_INT 22
4870: PUSH
4871: LD_INT 23
4873: PUSH
4874: LD_INT 24
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: ST_TO_ADDR
4883: GO 5168
4885: LD_INT 43
4887: DOUBLE
4888: EQUAL
4889: IFTRUE 4893
4891: GO 4919
4893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: LD_INT 21
4901: PUSH
4902: LD_INT 22
4904: PUSH
4905: LD_INT 23
4907: PUSH
4908: LD_INT 24
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: ST_TO_ADDR
4917: GO 5168
4919: LD_INT 44
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4927
4925: GO 4953
4927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
4928: LD_ADDR_VAR 0 3
4932: PUSH
4933: LD_INT 21
4935: PUSH
4936: LD_INT 22
4938: PUSH
4939: LD_INT 23
4941: PUSH
4942: LD_INT 24
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: ST_TO_ADDR
4951: GO 5168
4953: LD_INT 45
4955: DOUBLE
4956: EQUAL
4957: IFTRUE 4961
4959: GO 4987
4961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 21
4969: PUSH
4970: LD_INT 22
4972: PUSH
4973: LD_INT 23
4975: PUSH
4976: LD_INT 24
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: ST_TO_ADDR
4985: GO 5168
4987: LD_INT 49
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 4995
4993: GO 5021
4995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
4996: LD_ADDR_VAR 0 3
5000: PUSH
5001: LD_INT 21
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_INT 23
5009: PUSH
5010: LD_INT 24
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: ST_TO_ADDR
5019: GO 5168
5021: LD_INT 51
5023: DOUBLE
5024: EQUAL
5025: IFTRUE 5029
5027: GO 5055
5029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
5030: LD_ADDR_VAR 0 3
5034: PUSH
5035: LD_INT 21
5037: PUSH
5038: LD_INT 22
5040: PUSH
5041: LD_INT 23
5043: PUSH
5044: LD_INT 24
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: ST_TO_ADDR
5053: GO 5168
5055: LD_INT 52
5057: DOUBLE
5058: EQUAL
5059: IFTRUE 5063
5061: GO 5089
5063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
5064: LD_ADDR_VAR 0 3
5068: PUSH
5069: LD_INT 21
5071: PUSH
5072: LD_INT 22
5074: PUSH
5075: LD_INT 23
5077: PUSH
5078: LD_INT 24
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: ST_TO_ADDR
5087: GO 5168
5089: LD_INT 53
5091: DOUBLE
5092: EQUAL
5093: IFTRUE 5097
5095: GO 5115
5097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
5098: LD_ADDR_VAR 0 3
5102: PUSH
5103: LD_INT 23
5105: PUSH
5106: LD_INT 24
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: ST_TO_ADDR
5113: GO 5168
5115: LD_INT 46
5117: DOUBLE
5118: EQUAL
5119: IFTRUE 5123
5121: GO 5141
5123: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
5124: LD_ADDR_VAR 0 3
5128: PUSH
5129: LD_INT 23
5131: PUSH
5132: LD_INT 24
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: ST_TO_ADDR
5139: GO 5168
5141: LD_INT 47
5143: DOUBLE
5144: EQUAL
5145: IFTRUE 5149
5147: GO 5167
5149: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
5150: LD_ADDR_VAR 0 3
5154: PUSH
5155: LD_INT 23
5157: PUSH
5158: LD_INT 24
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: ST_TO_ADDR
5165: GO 5168
5167: POP
// result := ( chassis in result ) ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_VAR 0 1
5177: PUSH
5178: LD_VAR 0 3
5182: IN
5183: ST_TO_ADDR
// end ;
5184: LD_VAR 0 3
5188: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
5189: LD_INT 0
5191: PPUSH
5192: PPUSH
5193: PPUSH
5194: PPUSH
5195: PPUSH
5196: PPUSH
5197: PPUSH
// result := array ;
5198: LD_ADDR_VAR 0 5
5202: PUSH
5203: LD_VAR 0 1
5207: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
5208: LD_VAR 0 1
5212: NOT
5213: PUSH
5214: LD_VAR 0 2
5218: NOT
5219: OR
5220: PUSH
5221: LD_VAR 0 3
5225: NOT
5226: OR
5227: PUSH
5228: LD_VAR 0 2
5232: PUSH
5233: LD_VAR 0 1
5237: GREATER
5238: OR
5239: PUSH
5240: LD_VAR 0 3
5244: PUSH
5245: LD_VAR 0 1
5249: GREATER
5250: OR
5251: IFFALSE 5255
// exit ;
5253: GO 5551
// if direction then
5255: LD_VAR 0 4
5259: IFFALSE 5323
// begin d := 1 ;
5261: LD_ADDR_VAR 0 9
5265: PUSH
5266: LD_INT 1
5268: ST_TO_ADDR
// if i_from > i_to then
5269: LD_VAR 0 2
5273: PUSH
5274: LD_VAR 0 3
5278: GREATER
5279: IFFALSE 5305
// length := ( array - i_from ) + i_to else
5281: LD_ADDR_VAR 0 11
5285: PUSH
5286: LD_VAR 0 1
5290: PUSH
5291: LD_VAR 0 2
5295: MINUS
5296: PUSH
5297: LD_VAR 0 3
5301: PLUS
5302: ST_TO_ADDR
5303: GO 5321
// length := i_to - i_from ;
5305: LD_ADDR_VAR 0 11
5309: PUSH
5310: LD_VAR 0 3
5314: PUSH
5315: LD_VAR 0 2
5319: MINUS
5320: ST_TO_ADDR
// end else
5321: GO 5384
// begin d := - 1 ;
5323: LD_ADDR_VAR 0 9
5327: PUSH
5328: LD_INT 1
5330: NEG
5331: ST_TO_ADDR
// if i_from > i_to then
5332: LD_VAR 0 2
5336: PUSH
5337: LD_VAR 0 3
5341: GREATER
5342: IFFALSE 5362
// length := i_from - i_to else
5344: LD_ADDR_VAR 0 11
5348: PUSH
5349: LD_VAR 0 2
5353: PUSH
5354: LD_VAR 0 3
5358: MINUS
5359: ST_TO_ADDR
5360: GO 5384
// length := ( array - i_to ) + i_from ;
5362: LD_ADDR_VAR 0 11
5366: PUSH
5367: LD_VAR 0 1
5371: PUSH
5372: LD_VAR 0 3
5376: MINUS
5377: PUSH
5378: LD_VAR 0 2
5382: PLUS
5383: ST_TO_ADDR
// end ; if not length then
5384: LD_VAR 0 11
5388: NOT
5389: IFFALSE 5393
// exit ;
5391: GO 5551
// tmp := array ;
5393: LD_ADDR_VAR 0 10
5397: PUSH
5398: LD_VAR 0 1
5402: ST_TO_ADDR
// for i = 1 to length do
5403: LD_ADDR_VAR 0 6
5407: PUSH
5408: DOUBLE
5409: LD_INT 1
5411: DEC
5412: ST_TO_ADDR
5413: LD_VAR 0 11
5417: PUSH
5418: FOR_TO
5419: IFFALSE 5539
// begin for j = 1 to array do
5421: LD_ADDR_VAR 0 7
5425: PUSH
5426: DOUBLE
5427: LD_INT 1
5429: DEC
5430: ST_TO_ADDR
5431: LD_VAR 0 1
5435: PUSH
5436: FOR_TO
5437: IFFALSE 5525
// begin k := j + d ;
5439: LD_ADDR_VAR 0 8
5443: PUSH
5444: LD_VAR 0 7
5448: PUSH
5449: LD_VAR 0 9
5453: PLUS
5454: ST_TO_ADDR
// if k > array then
5455: LD_VAR 0 8
5459: PUSH
5460: LD_VAR 0 1
5464: GREATER
5465: IFFALSE 5475
// k := 1 ;
5467: LD_ADDR_VAR 0 8
5471: PUSH
5472: LD_INT 1
5474: ST_TO_ADDR
// if not k then
5475: LD_VAR 0 8
5479: NOT
5480: IFFALSE 5492
// k := array ;
5482: LD_ADDR_VAR 0 8
5486: PUSH
5487: LD_VAR 0 1
5491: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
5492: LD_ADDR_VAR 0 10
5496: PUSH
5497: LD_VAR 0 10
5501: PPUSH
5502: LD_VAR 0 8
5506: PPUSH
5507: LD_VAR 0 1
5511: PUSH
5512: LD_VAR 0 7
5516: ARRAY
5517: PPUSH
5518: CALL_OW 1
5522: ST_TO_ADDR
// end ;
5523: GO 5436
5525: POP
5526: POP
// array := tmp ;
5527: LD_ADDR_VAR 0 1
5531: PUSH
5532: LD_VAR 0 10
5536: ST_TO_ADDR
// end ;
5537: GO 5418
5539: POP
5540: POP
// result := array ;
5541: LD_ADDR_VAR 0 5
5545: PUSH
5546: LD_VAR 0 1
5550: ST_TO_ADDR
// end ;
5551: LD_VAR 0 5
5555: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
5556: LD_INT 0
5558: PPUSH
5559: PPUSH
// result := 0 ;
5560: LD_ADDR_VAR 0 3
5564: PUSH
5565: LD_INT 0
5567: ST_TO_ADDR
// if not array or not value in array then
5568: LD_VAR 0 1
5572: NOT
5573: PUSH
5574: LD_VAR 0 2
5578: PUSH
5579: LD_VAR 0 1
5583: IN
5584: NOT
5585: OR
5586: IFFALSE 5590
// exit ;
5588: GO 5644
// for i = 1 to array do
5590: LD_ADDR_VAR 0 4
5594: PUSH
5595: DOUBLE
5596: LD_INT 1
5598: DEC
5599: ST_TO_ADDR
5600: LD_VAR 0 1
5604: PUSH
5605: FOR_TO
5606: IFFALSE 5642
// if value = array [ i ] then
5608: LD_VAR 0 2
5612: PUSH
5613: LD_VAR 0 1
5617: PUSH
5618: LD_VAR 0 4
5622: ARRAY
5623: EQUAL
5624: IFFALSE 5640
// begin result := i ;
5626: LD_ADDR_VAR 0 3
5630: PUSH
5631: LD_VAR 0 4
5635: ST_TO_ADDR
// exit ;
5636: POP
5637: POP
5638: GO 5644
// end ;
5640: GO 5605
5642: POP
5643: POP
// end ;
5644: LD_VAR 0 3
5648: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
5649: LD_INT 0
5651: PPUSH
// vc_chassis := chassis ;
5652: LD_ADDR_OWVAR 37
5656: PUSH
5657: LD_VAR 0 1
5661: ST_TO_ADDR
// vc_engine := engine ;
5662: LD_ADDR_OWVAR 39
5666: PUSH
5667: LD_VAR 0 2
5671: ST_TO_ADDR
// vc_control := control ;
5672: LD_ADDR_OWVAR 38
5676: PUSH
5677: LD_VAR 0 3
5681: ST_TO_ADDR
// vc_weapon := weapon ;
5682: LD_ADDR_OWVAR 40
5686: PUSH
5687: LD_VAR 0 4
5691: ST_TO_ADDR
// vc_fuel_battery := fuel ;
5692: LD_ADDR_OWVAR 41
5696: PUSH
5697: LD_VAR 0 5
5701: ST_TO_ADDR
// end ;
5702: LD_VAR 0 6
5706: RET
// export function WantPlant ( unit ) ; var task ; begin
5707: LD_INT 0
5709: PPUSH
5710: PPUSH
// result := false ;
5711: LD_ADDR_VAR 0 2
5715: PUSH
5716: LD_INT 0
5718: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_VAR 0 1
5728: PPUSH
5729: CALL_OW 437
5733: ST_TO_ADDR
// if task then
5734: LD_VAR 0 3
5738: IFFALSE 5766
// if task [ 1 ] [ 1 ] = p then
5740: LD_VAR 0 3
5744: PUSH
5745: LD_INT 1
5747: ARRAY
5748: PUSH
5749: LD_INT 1
5751: ARRAY
5752: PUSH
5753: LD_STRING p
5755: EQUAL
5756: IFFALSE 5766
// result := true ;
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: LD_INT 1
5765: ST_TO_ADDR
// end ;
5766: LD_VAR 0 2
5770: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
5771: LD_INT 0
5773: PPUSH
5774: PPUSH
5775: PPUSH
5776: PPUSH
// if pos < 1 then
5777: LD_VAR 0 2
5781: PUSH
5782: LD_INT 1
5784: LESS
5785: IFFALSE 5789
// exit ;
5787: GO 6092
// if pos = 1 then
5789: LD_VAR 0 2
5793: PUSH
5794: LD_INT 1
5796: EQUAL
5797: IFFALSE 5830
// result := Replace ( arr , pos [ 1 ] , value ) else
5799: LD_ADDR_VAR 0 4
5803: PUSH
5804: LD_VAR 0 1
5808: PPUSH
5809: LD_VAR 0 2
5813: PUSH
5814: LD_INT 1
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 3
5822: PPUSH
5823: CALL_OW 1
5827: ST_TO_ADDR
5828: GO 6092
// begin tmp := arr ;
5830: LD_ADDR_VAR 0 6
5834: PUSH
5835: LD_VAR 0 1
5839: ST_TO_ADDR
// s_arr := [ tmp ] ;
5840: LD_ADDR_VAR 0 7
5844: PUSH
5845: LD_VAR 0 6
5849: PUSH
5850: EMPTY
5851: LIST
5852: ST_TO_ADDR
// for i = 1 to pos - 1 do
5853: LD_ADDR_VAR 0 5
5857: PUSH
5858: DOUBLE
5859: LD_INT 1
5861: DEC
5862: ST_TO_ADDR
5863: LD_VAR 0 2
5867: PUSH
5868: LD_INT 1
5870: MINUS
5871: PUSH
5872: FOR_TO
5873: IFFALSE 5918
// begin tmp := tmp [ pos [ i ] ] ;
5875: LD_ADDR_VAR 0 6
5879: PUSH
5880: LD_VAR 0 6
5884: PUSH
5885: LD_VAR 0 2
5889: PUSH
5890: LD_VAR 0 5
5894: ARRAY
5895: ARRAY
5896: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
5897: LD_ADDR_VAR 0 7
5901: PUSH
5902: LD_VAR 0 7
5906: PUSH
5907: LD_VAR 0 6
5911: PUSH
5912: EMPTY
5913: LIST
5914: ADD
5915: ST_TO_ADDR
// end ;
5916: GO 5872
5918: POP
5919: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
5920: LD_ADDR_VAR 0 6
5924: PUSH
5925: LD_VAR 0 6
5929: PPUSH
5930: LD_VAR 0 2
5934: PUSH
5935: LD_VAR 0 2
5939: ARRAY
5940: PPUSH
5941: LD_VAR 0 3
5945: PPUSH
5946: CALL_OW 1
5950: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
5951: LD_ADDR_VAR 0 7
5955: PUSH
5956: LD_VAR 0 7
5960: PPUSH
5961: LD_VAR 0 7
5965: PPUSH
5966: LD_VAR 0 6
5970: PPUSH
5971: CALL_OW 1
5975: ST_TO_ADDR
// for i = s_arr downto 2 do
5976: LD_ADDR_VAR 0 5
5980: PUSH
5981: DOUBLE
5982: LD_VAR 0 7
5986: INC
5987: ST_TO_ADDR
5988: LD_INT 2
5990: PUSH
5991: FOR_DOWNTO
5992: IFFALSE 6076
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
5994: LD_ADDR_VAR 0 6
5998: PUSH
5999: LD_VAR 0 7
6003: PUSH
6004: LD_VAR 0 5
6008: PUSH
6009: LD_INT 1
6011: MINUS
6012: ARRAY
6013: PPUSH
6014: LD_VAR 0 2
6018: PUSH
6019: LD_VAR 0 5
6023: PUSH
6024: LD_INT 1
6026: MINUS
6027: ARRAY
6028: PPUSH
6029: LD_VAR 0 7
6033: PUSH
6034: LD_VAR 0 5
6038: ARRAY
6039: PPUSH
6040: CALL_OW 1
6044: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: LD_VAR 0 7
6054: PPUSH
6055: LD_VAR 0 5
6059: PUSH
6060: LD_INT 1
6062: MINUS
6063: PPUSH
6064: LD_VAR 0 6
6068: PPUSH
6069: CALL_OW 1
6073: ST_TO_ADDR
// end ;
6074: GO 5991
6076: POP
6077: POP
// result := s_arr [ 1 ] ;
6078: LD_ADDR_VAR 0 4
6082: PUSH
6083: LD_VAR 0 7
6087: PUSH
6088: LD_INT 1
6090: ARRAY
6091: ST_TO_ADDR
// end ; end ;
6092: LD_VAR 0 4
6096: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
6097: LD_INT 0
6099: PPUSH
6100: PPUSH
// if not list then
6101: LD_VAR 0 1
6105: NOT
6106: IFFALSE 6110
// exit ;
6108: GO 6201
// i := list [ pos1 ] ;
6110: LD_ADDR_VAR 0 5
6114: PUSH
6115: LD_VAR 0 1
6119: PUSH
6120: LD_VAR 0 2
6124: ARRAY
6125: ST_TO_ADDR
// if not i then
6126: LD_VAR 0 5
6130: NOT
6131: IFFALSE 6135
// exit ;
6133: GO 6201
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_VAR 0 1
6144: PPUSH
6145: LD_VAR 0 2
6149: PPUSH
6150: LD_VAR 0 1
6154: PUSH
6155: LD_VAR 0 3
6159: ARRAY
6160: PPUSH
6161: CALL_OW 1
6165: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
6166: LD_ADDR_VAR 0 1
6170: PUSH
6171: LD_VAR 0 1
6175: PPUSH
6176: LD_VAR 0 3
6180: PPUSH
6181: LD_VAR 0 5
6185: PPUSH
6186: CALL_OW 1
6190: ST_TO_ADDR
// result := list ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_VAR 0 1
6200: ST_TO_ADDR
// end ;
6201: LD_VAR 0 4
6205: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
6206: LD_INT 0
6208: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
6209: LD_ADDR_VAR 0 5
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 250
6223: PPUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 251
6233: PPUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: LD_VAR 0 3
6243: PPUSH
6244: LD_VAR 0 4
6248: PPUSH
6249: CALL 6259 0 5
6253: ST_TO_ADDR
// end ;
6254: LD_VAR 0 5
6258: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
6259: LD_INT 0
6261: PPUSH
6262: PPUSH
6263: PPUSH
6264: PPUSH
// if not list then
6265: LD_VAR 0 3
6269: NOT
6270: IFFALSE 6274
// exit ;
6272: GO 6662
// result := [ ] ;
6274: LD_ADDR_VAR 0 6
6278: PUSH
6279: EMPTY
6280: ST_TO_ADDR
// for i in list do
6281: LD_ADDR_VAR 0 7
6285: PUSH
6286: LD_VAR 0 3
6290: PUSH
6291: FOR_IN
6292: IFFALSE 6494
// begin tmp := GetDistUnitXY ( i , x , y ) ;
6294: LD_ADDR_VAR 0 9
6298: PUSH
6299: LD_VAR 0 7
6303: PPUSH
6304: LD_VAR 0 1
6308: PPUSH
6309: LD_VAR 0 2
6313: PPUSH
6314: CALL_OW 297
6318: ST_TO_ADDR
// if not result then
6319: LD_VAR 0 6
6323: NOT
6324: IFFALSE 6350
// result := [ [ i , tmp ] ] else
6326: LD_ADDR_VAR 0 6
6330: PUSH
6331: LD_VAR 0 7
6335: PUSH
6336: LD_VAR 0 9
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: ST_TO_ADDR
6348: GO 6492
// begin if result [ result ] [ 2 ] < tmp then
6350: LD_VAR 0 6
6354: PUSH
6355: LD_VAR 0 6
6359: ARRAY
6360: PUSH
6361: LD_INT 2
6363: ARRAY
6364: PUSH
6365: LD_VAR 0 9
6369: LESS
6370: IFFALSE 6412
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
6372: LD_ADDR_VAR 0 6
6376: PUSH
6377: LD_VAR 0 6
6381: PPUSH
6382: LD_VAR 0 6
6386: PUSH
6387: LD_INT 1
6389: PLUS
6390: PPUSH
6391: LD_VAR 0 7
6395: PUSH
6396: LD_VAR 0 9
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PPUSH
6405: CALL_OW 2
6409: ST_TO_ADDR
6410: GO 6492
// for j = 1 to result do
6412: LD_ADDR_VAR 0 8
6416: PUSH
6417: DOUBLE
6418: LD_INT 1
6420: DEC
6421: ST_TO_ADDR
6422: LD_VAR 0 6
6426: PUSH
6427: FOR_TO
6428: IFFALSE 6490
// begin if tmp < result [ j ] [ 2 ] then
6430: LD_VAR 0 9
6434: PUSH
6435: LD_VAR 0 6
6439: PUSH
6440: LD_VAR 0 8
6444: ARRAY
6445: PUSH
6446: LD_INT 2
6448: ARRAY
6449: LESS
6450: IFFALSE 6488
// begin result := Insert ( result , j , [ i , tmp ] ) ;
6452: LD_ADDR_VAR 0 6
6456: PUSH
6457: LD_VAR 0 6
6461: PPUSH
6462: LD_VAR 0 8
6466: PPUSH
6467: LD_VAR 0 7
6471: PUSH
6472: LD_VAR 0 9
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PPUSH
6481: CALL_OW 2
6485: ST_TO_ADDR
// break ;
6486: GO 6490
// end ; end ;
6488: GO 6427
6490: POP
6491: POP
// end ; end ;
6492: GO 6291
6494: POP
6495: POP
// if result and not asc then
6496: LD_VAR 0 6
6500: PUSH
6501: LD_VAR 0 4
6505: NOT
6506: AND
6507: IFFALSE 6582
// begin tmp := result ;
6509: LD_ADDR_VAR 0 9
6513: PUSH
6514: LD_VAR 0 6
6518: ST_TO_ADDR
// for i = tmp downto 1 do
6519: LD_ADDR_VAR 0 7
6523: PUSH
6524: DOUBLE
6525: LD_VAR 0 9
6529: INC
6530: ST_TO_ADDR
6531: LD_INT 1
6533: PUSH
6534: FOR_DOWNTO
6535: IFFALSE 6580
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
6537: LD_ADDR_VAR 0 6
6541: PUSH
6542: LD_VAR 0 6
6546: PPUSH
6547: LD_VAR 0 9
6551: PUSH
6552: LD_VAR 0 7
6556: MINUS
6557: PUSH
6558: LD_INT 1
6560: PLUS
6561: PPUSH
6562: LD_VAR 0 9
6566: PUSH
6567: LD_VAR 0 7
6571: ARRAY
6572: PPUSH
6573: CALL_OW 1
6577: ST_TO_ADDR
6578: GO 6534
6580: POP
6581: POP
// end ; tmp := [ ] ;
6582: LD_ADDR_VAR 0 9
6586: PUSH
6587: EMPTY
6588: ST_TO_ADDR
// if mode then
6589: LD_VAR 0 5
6593: IFFALSE 6662
// begin for i = 1 to result do
6595: LD_ADDR_VAR 0 7
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 6
6609: PUSH
6610: FOR_TO
6611: IFFALSE 6650
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
6613: LD_ADDR_VAR 0 9
6617: PUSH
6618: LD_VAR 0 9
6622: PPUSH
6623: LD_VAR 0 7
6627: PPUSH
6628: LD_VAR 0 6
6632: PUSH
6633: LD_VAR 0 7
6637: ARRAY
6638: PUSH
6639: LD_INT 1
6641: ARRAY
6642: PPUSH
6643: CALL_OW 1
6647: ST_TO_ADDR
6648: GO 6610
6650: POP
6651: POP
// result := tmp ;
6652: LD_ADDR_VAR 0 6
6656: PUSH
6657: LD_VAR 0 9
6661: ST_TO_ADDR
// end ; end ;
6662: LD_VAR 0 6
6666: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
6667: LD_INT 0
6669: PPUSH
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
6675: LD_ADDR_VAR 0 5
6679: PUSH
6680: LD_INT 0
6682: PUSH
6683: LD_INT 0
6685: PUSH
6686: LD_INT 0
6688: PUSH
6689: EMPTY
6690: PUSH
6691: EMPTY
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: ST_TO_ADDR
// if not x or not y then
6697: LD_VAR 0 2
6701: NOT
6702: PUSH
6703: LD_VAR 0 3
6707: NOT
6708: OR
6709: IFFALSE 6713
// exit ;
6711: GO 8365
// if not range then
6713: LD_VAR 0 4
6717: NOT
6718: IFFALSE 6728
// range := 10 ;
6720: LD_ADDR_VAR 0 4
6724: PUSH
6725: LD_INT 10
6727: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6728: LD_ADDR_VAR 0 8
6732: PUSH
6733: LD_INT 81
6735: PUSH
6736: LD_VAR 0 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 92
6747: PUSH
6748: LD_VAR 0 2
6752: PUSH
6753: LD_VAR 0 3
6757: PUSH
6758: LD_VAR 0 4
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: PUSH
6769: LD_INT 3
6771: PUSH
6772: LD_INT 21
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if not tmp then
6796: LD_VAR 0 8
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8365
// for i in tmp do
6805: LD_ADDR_VAR 0 6
6809: PUSH
6810: LD_VAR 0 8
6814: PUSH
6815: FOR_IN
6816: IFFALSE 8340
// begin points := [ 0 , 0 , 0 ] ;
6818: LD_ADDR_VAR 0 9
6822: PUSH
6823: LD_INT 0
6825: PUSH
6826: LD_INT 0
6828: PUSH
6829: LD_INT 0
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: LIST
6836: ST_TO_ADDR
// bpoints := 1 ;
6837: LD_ADDR_VAR 0 10
6841: PUSH
6842: LD_INT 1
6844: ST_TO_ADDR
// case GetType ( i ) of unit_human :
6845: LD_VAR 0 6
6849: PPUSH
6850: CALL_OW 247
6854: PUSH
6855: LD_INT 1
6857: DOUBLE
6858: EQUAL
6859: IFTRUE 6863
6861: GO 7441
6863: POP
// begin if GetClass ( i ) = 1 then
6864: LD_VAR 0 6
6868: PPUSH
6869: CALL_OW 257
6873: PUSH
6874: LD_INT 1
6876: EQUAL
6877: IFFALSE 6898
// points := [ 10 , 5 , 3 ] ;
6879: LD_ADDR_VAR 0 9
6883: PUSH
6884: LD_INT 10
6886: PUSH
6887: LD_INT 5
6889: PUSH
6890: LD_INT 3
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: LIST
6897: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
6898: LD_VAR 0 6
6902: PPUSH
6903: CALL_OW 257
6907: PUSH
6908: LD_INT 2
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: IN
6922: IFFALSE 6943
// points := [ 3 , 2 , 1 ] ;
6924: LD_ADDR_VAR 0 9
6928: PUSH
6929: LD_INT 3
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 1
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: ST_TO_ADDR
// if GetClass ( i ) = 5 then
6943: LD_VAR 0 6
6947: PPUSH
6948: CALL_OW 257
6952: PUSH
6953: LD_INT 5
6955: EQUAL
6956: IFFALSE 6977
// points := [ 130 , 5 , 2 ] ;
6958: LD_ADDR_VAR 0 9
6962: PUSH
6963: LD_INT 130
6965: PUSH
6966: LD_INT 5
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: LIST
6976: ST_TO_ADDR
// if GetClass ( i ) = 8 then
6977: LD_VAR 0 6
6981: PPUSH
6982: CALL_OW 257
6986: PUSH
6987: LD_INT 8
6989: EQUAL
6990: IFFALSE 7011
// points := [ 35 , 35 , 30 ] ;
6992: LD_ADDR_VAR 0 9
6996: PUSH
6997: LD_INT 35
6999: PUSH
7000: LD_INT 35
7002: PUSH
7003: LD_INT 30
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: ST_TO_ADDR
// if GetClass ( i ) = 9 then
7011: LD_VAR 0 6
7015: PPUSH
7016: CALL_OW 257
7020: PUSH
7021: LD_INT 9
7023: EQUAL
7024: IFFALSE 7045
// points := [ 20 , 55 , 40 ] ;
7026: LD_ADDR_VAR 0 9
7030: PUSH
7031: LD_INT 20
7033: PUSH
7034: LD_INT 55
7036: PUSH
7037: LD_INT 40
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
7045: LD_VAR 0 6
7049: PPUSH
7050: CALL_OW 257
7054: PUSH
7055: LD_INT 12
7057: PUSH
7058: LD_INT 16
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: IN
7065: IFFALSE 7086
// points := [ 5 , 3 , 2 ] ;
7067: LD_ADDR_VAR 0 9
7071: PUSH
7072: LD_INT 5
7074: PUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: LIST
7085: ST_TO_ADDR
// if GetClass ( i ) = 17 then
7086: LD_VAR 0 6
7090: PPUSH
7091: CALL_OW 257
7095: PUSH
7096: LD_INT 17
7098: EQUAL
7099: IFFALSE 7120
// points := [ 100 , 50 , 75 ] ;
7101: LD_ADDR_VAR 0 9
7105: PUSH
7106: LD_INT 100
7108: PUSH
7109: LD_INT 50
7111: PUSH
7112: LD_INT 75
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: ST_TO_ADDR
// if GetClass ( i ) = 15 then
7120: LD_VAR 0 6
7124: PPUSH
7125: CALL_OW 257
7129: PUSH
7130: LD_INT 15
7132: EQUAL
7133: IFFALSE 7154
// points := [ 10 , 5 , 3 ] ;
7135: LD_ADDR_VAR 0 9
7139: PUSH
7140: LD_INT 10
7142: PUSH
7143: LD_INT 5
7145: PUSH
7146: LD_INT 3
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: ST_TO_ADDR
// if GetClass ( i ) = 14 then
7154: LD_VAR 0 6
7158: PPUSH
7159: CALL_OW 257
7163: PUSH
7164: LD_INT 14
7166: EQUAL
7167: IFFALSE 7188
// points := [ 10 , 0 , 0 ] ;
7169: LD_ADDR_VAR 0 9
7173: PUSH
7174: LD_INT 10
7176: PUSH
7177: LD_INT 0
7179: PUSH
7180: LD_INT 0
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: ST_TO_ADDR
// if GetClass ( i ) = 11 then
7188: LD_VAR 0 6
7192: PPUSH
7193: CALL_OW 257
7197: PUSH
7198: LD_INT 11
7200: EQUAL
7201: IFFALSE 7222
// points := [ 30 , 10 , 5 ] ;
7203: LD_ADDR_VAR 0 9
7207: PUSH
7208: LD_INT 30
7210: PUSH
7211: LD_INT 10
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: LIST
7221: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
7222: LD_VAR 0 1
7226: PPUSH
7227: LD_INT 5
7229: PPUSH
7230: CALL_OW 321
7234: PUSH
7235: LD_INT 2
7237: EQUAL
7238: IFFALSE 7255
// bpoints := bpoints * 1.8 ;
7240: LD_ADDR_VAR 0 10
7244: PUSH
7245: LD_VAR 0 10
7249: PUSH
7250: LD_REAL  1.80000000000000E+0000
7253: MUL
7254: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
7255: LD_VAR 0 6
7259: PPUSH
7260: CALL_OW 257
7264: PUSH
7265: LD_INT 1
7267: PUSH
7268: LD_INT 2
7270: PUSH
7271: LD_INT 3
7273: PUSH
7274: LD_INT 4
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: IN
7283: PUSH
7284: LD_VAR 0 1
7288: PPUSH
7289: LD_INT 51
7291: PPUSH
7292: CALL_OW 321
7296: PUSH
7297: LD_INT 2
7299: EQUAL
7300: AND
7301: IFFALSE 7318
// bpoints := bpoints * 1.2 ;
7303: LD_ADDR_VAR 0 10
7307: PUSH
7308: LD_VAR 0 10
7312: PUSH
7313: LD_REAL  1.20000000000000E+0000
7316: MUL
7317: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
7318: LD_VAR 0 6
7322: PPUSH
7323: CALL_OW 257
7327: PUSH
7328: LD_INT 5
7330: PUSH
7331: LD_INT 7
7333: PUSH
7334: LD_INT 9
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: IN
7342: PUSH
7343: LD_VAR 0 1
7347: PPUSH
7348: LD_INT 52
7350: PPUSH
7351: CALL_OW 321
7355: PUSH
7356: LD_INT 2
7358: EQUAL
7359: AND
7360: IFFALSE 7377
// bpoints := bpoints * 1.5 ;
7362: LD_ADDR_VAR 0 10
7366: PUSH
7367: LD_VAR 0 10
7371: PUSH
7372: LD_REAL  1.50000000000000E+0000
7375: MUL
7376: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
7377: LD_VAR 0 1
7381: PPUSH
7382: LD_INT 66
7384: PPUSH
7385: CALL_OW 321
7389: PUSH
7390: LD_INT 2
7392: EQUAL
7393: IFFALSE 7410
// bpoints := bpoints * 1.1 ;
7395: LD_ADDR_VAR 0 10
7399: PUSH
7400: LD_VAR 0 10
7404: PUSH
7405: LD_REAL  1.10000000000000E+0000
7408: MUL
7409: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
7410: LD_ADDR_VAR 0 10
7414: PUSH
7415: LD_VAR 0 10
7419: PUSH
7420: LD_VAR 0 6
7424: PPUSH
7425: LD_INT 1
7427: PPUSH
7428: CALL_OW 259
7432: PUSH
7433: LD_REAL  1.15000000000000E+0000
7436: MUL
7437: MUL
7438: ST_TO_ADDR
// end ; unit_vehicle :
7439: GO 8269
7441: LD_INT 2
7443: DOUBLE
7444: EQUAL
7445: IFTRUE 7449
7447: GO 8257
7449: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
7450: LD_VAR 0 6
7454: PPUSH
7455: CALL_OW 264
7459: PUSH
7460: LD_INT 2
7462: PUSH
7463: LD_INT 42
7465: PUSH
7466: LD_INT 24
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: IN
7474: IFFALSE 7495
// points := [ 25 , 5 , 3 ] ;
7476: LD_ADDR_VAR 0 9
7480: PUSH
7481: LD_INT 25
7483: PUSH
7484: LD_INT 5
7486: PUSH
7487: LD_INT 3
7489: PUSH
7490: EMPTY
7491: LIST
7492: LIST
7493: LIST
7494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
7495: LD_VAR 0 6
7499: PPUSH
7500: CALL_OW 264
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: LD_INT 43
7510: PUSH
7511: LD_INT 25
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: LIST
7518: IN
7519: IFFALSE 7540
// points := [ 40 , 15 , 5 ] ;
7521: LD_ADDR_VAR 0 9
7525: PUSH
7526: LD_INT 40
7528: PUSH
7529: LD_INT 15
7531: PUSH
7532: LD_INT 5
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
7540: LD_VAR 0 6
7544: PPUSH
7545: CALL_OW 264
7549: PUSH
7550: LD_INT 3
7552: PUSH
7553: LD_INT 23
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: IN
7560: IFFALSE 7581
// points := [ 7 , 25 , 8 ] ;
7562: LD_ADDR_VAR 0 9
7566: PUSH
7567: LD_INT 7
7569: PUSH
7570: LD_INT 25
7572: PUSH
7573: LD_INT 8
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
7581: LD_VAR 0 6
7585: PPUSH
7586: CALL_OW 264
7590: PUSH
7591: LD_INT 5
7593: PUSH
7594: LD_INT 27
7596: PUSH
7597: LD_INT 44
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: IN
7605: IFFALSE 7626
// points := [ 14 , 50 , 16 ] ;
7607: LD_ADDR_VAR 0 9
7611: PUSH
7612: LD_INT 14
7614: PUSH
7615: LD_INT 50
7617: PUSH
7618: LD_INT 16
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
7626: LD_VAR 0 6
7630: PPUSH
7631: CALL_OW 264
7635: PUSH
7636: LD_INT 6
7638: PUSH
7639: LD_INT 46
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: IN
7646: IFFALSE 7667
// points := [ 32 , 120 , 70 ] ;
7648: LD_ADDR_VAR 0 9
7652: PUSH
7653: LD_INT 32
7655: PUSH
7656: LD_INT 120
7658: PUSH
7659: LD_INT 70
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: LIST
7666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
7667: LD_VAR 0 6
7671: PPUSH
7672: CALL_OW 264
7676: PUSH
7677: LD_INT 7
7679: PUSH
7680: LD_INT 28
7682: PUSH
7683: LD_INT 45
7685: PUSH
7686: LD_EXP 21
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: IN
7697: IFFALSE 7718
// points := [ 35 , 20 , 45 ] ;
7699: LD_ADDR_VAR 0 9
7703: PUSH
7704: LD_INT 35
7706: PUSH
7707: LD_INT 20
7709: PUSH
7710: LD_INT 45
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
7718: LD_VAR 0 6
7722: PPUSH
7723: CALL_OW 264
7727: PUSH
7728: LD_INT 47
7730: PUSH
7731: EMPTY
7732: LIST
7733: IN
7734: IFFALSE 7755
// points := [ 67 , 45 , 75 ] ;
7736: LD_ADDR_VAR 0 9
7740: PUSH
7741: LD_INT 67
7743: PUSH
7744: LD_INT 45
7746: PUSH
7747: LD_INT 75
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: LIST
7754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
7755: LD_VAR 0 6
7759: PPUSH
7760: CALL_OW 264
7764: PUSH
7765: LD_INT 26
7767: PUSH
7768: EMPTY
7769: LIST
7770: IN
7771: IFFALSE 7792
// points := [ 120 , 30 , 80 ] ;
7773: LD_ADDR_VAR 0 9
7777: PUSH
7778: LD_INT 120
7780: PUSH
7781: LD_INT 30
7783: PUSH
7784: LD_INT 80
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
7792: LD_VAR 0 6
7796: PPUSH
7797: CALL_OW 264
7801: PUSH
7802: LD_INT 22
7804: PUSH
7805: EMPTY
7806: LIST
7807: IN
7808: IFFALSE 7829
// points := [ 40 , 1 , 1 ] ;
7810: LD_ADDR_VAR 0 9
7814: PUSH
7815: LD_INT 40
7817: PUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 1
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
7829: LD_VAR 0 6
7833: PPUSH
7834: CALL_OW 264
7838: PUSH
7839: LD_INT 29
7841: PUSH
7842: EMPTY
7843: LIST
7844: IN
7845: IFFALSE 7866
// points := [ 70 , 200 , 400 ] ;
7847: LD_ADDR_VAR 0 9
7851: PUSH
7852: LD_INT 70
7854: PUSH
7855: LD_INT 200
7857: PUSH
7858: LD_INT 400
7860: PUSH
7861: EMPTY
7862: LIST
7863: LIST
7864: LIST
7865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
7866: LD_VAR 0 6
7870: PPUSH
7871: CALL_OW 264
7875: PUSH
7876: LD_INT 14
7878: PUSH
7879: LD_INT 53
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: IN
7886: IFFALSE 7907
// points := [ 40 , 10 , 20 ] ;
7888: LD_ADDR_VAR 0 9
7892: PUSH
7893: LD_INT 40
7895: PUSH
7896: LD_INT 10
7898: PUSH
7899: LD_INT 20
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
7907: LD_VAR 0 6
7911: PPUSH
7912: CALL_OW 264
7916: PUSH
7917: LD_INT 9
7919: PUSH
7920: EMPTY
7921: LIST
7922: IN
7923: IFFALSE 7944
// points := [ 5 , 70 , 20 ] ;
7925: LD_ADDR_VAR 0 9
7929: PUSH
7930: LD_INT 5
7932: PUSH
7933: LD_INT 70
7935: PUSH
7936: LD_INT 20
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
7944: LD_VAR 0 6
7948: PPUSH
7949: CALL_OW 264
7953: PUSH
7954: LD_INT 10
7956: PUSH
7957: EMPTY
7958: LIST
7959: IN
7960: IFFALSE 7981
// points := [ 35 , 110 , 70 ] ;
7962: LD_ADDR_VAR 0 9
7966: PUSH
7967: LD_INT 35
7969: PUSH
7970: LD_INT 110
7972: PUSH
7973: LD_INT 70
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: LIST
7980: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
7981: LD_VAR 0 6
7985: PPUSH
7986: CALL_OW 265
7990: PUSH
7991: LD_INT 25
7993: EQUAL
7994: IFFALSE 8015
// points := [ 80 , 65 , 100 ] ;
7996: LD_ADDR_VAR 0 9
8000: PUSH
8001: LD_INT 80
8003: PUSH
8004: LD_INT 65
8006: PUSH
8007: LD_INT 100
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
8015: LD_VAR 0 6
8019: PPUSH
8020: CALL_OW 263
8024: PUSH
8025: LD_INT 1
8027: EQUAL
8028: IFFALSE 8063
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
8030: LD_ADDR_VAR 0 10
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_VAR 0 6
8044: PPUSH
8045: CALL_OW 311
8049: PPUSH
8050: LD_INT 3
8052: PPUSH
8053: CALL_OW 259
8057: PUSH
8058: LD_INT 4
8060: MUL
8061: MUL
8062: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
8063: LD_VAR 0 6
8067: PPUSH
8068: CALL_OW 263
8072: PUSH
8073: LD_INT 2
8075: EQUAL
8076: IFFALSE 8127
// begin j := IsControledBy ( i ) ;
8078: LD_ADDR_VAR 0 7
8082: PUSH
8083: LD_VAR 0 6
8087: PPUSH
8088: CALL_OW 312
8092: ST_TO_ADDR
// if j then
8093: LD_VAR 0 7
8097: IFFALSE 8127
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
8099: LD_ADDR_VAR 0 10
8103: PUSH
8104: LD_VAR 0 10
8108: PUSH
8109: LD_VAR 0 7
8113: PPUSH
8114: LD_INT 3
8116: PPUSH
8117: CALL_OW 259
8121: PUSH
8122: LD_INT 3
8124: MUL
8125: MUL
8126: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
8127: LD_VAR 0 6
8131: PPUSH
8132: CALL_OW 264
8136: PUSH
8137: LD_INT 5
8139: PUSH
8140: LD_INT 6
8142: PUSH
8143: LD_INT 46
8145: PUSH
8146: LD_INT 44
8148: PUSH
8149: LD_INT 47
8151: PUSH
8152: LD_INT 45
8154: PUSH
8155: LD_INT 28
8157: PUSH
8158: LD_INT 7
8160: PUSH
8161: LD_INT 27
8163: PUSH
8164: LD_INT 29
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: IN
8179: PUSH
8180: LD_VAR 0 1
8184: PPUSH
8185: LD_INT 52
8187: PPUSH
8188: CALL_OW 321
8192: PUSH
8193: LD_INT 2
8195: EQUAL
8196: AND
8197: IFFALSE 8214
// bpoints := bpoints * 1.2 ;
8199: LD_ADDR_VAR 0 10
8203: PUSH
8204: LD_VAR 0 10
8208: PUSH
8209: LD_REAL  1.20000000000000E+0000
8212: MUL
8213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
8214: LD_VAR 0 6
8218: PPUSH
8219: CALL_OW 264
8223: PUSH
8224: LD_INT 6
8226: PUSH
8227: LD_INT 46
8229: PUSH
8230: LD_INT 47
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: LIST
8237: IN
8238: IFFALSE 8255
// bpoints := bpoints * 1.2 ;
8240: LD_ADDR_VAR 0 10
8244: PUSH
8245: LD_VAR 0 10
8249: PUSH
8250: LD_REAL  1.20000000000000E+0000
8253: MUL
8254: ST_TO_ADDR
// end ; unit_building :
8255: GO 8269
8257: LD_INT 3
8259: DOUBLE
8260: EQUAL
8261: IFTRUE 8265
8263: GO 8268
8265: POP
// ; end ;
8266: GO 8269
8268: POP
// for j = 1 to 3 do
8269: LD_ADDR_VAR 0 7
8273: PUSH
8274: DOUBLE
8275: LD_INT 1
8277: DEC
8278: ST_TO_ADDR
8279: LD_INT 3
8281: PUSH
8282: FOR_TO
8283: IFFALSE 8336
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
8285: LD_ADDR_VAR 0 5
8289: PUSH
8290: LD_VAR 0 5
8294: PPUSH
8295: LD_VAR 0 7
8299: PPUSH
8300: LD_VAR 0 5
8304: PUSH
8305: LD_VAR 0 7
8309: ARRAY
8310: PUSH
8311: LD_VAR 0 9
8315: PUSH
8316: LD_VAR 0 7
8320: ARRAY
8321: PUSH
8322: LD_VAR 0 10
8326: MUL
8327: PLUS
8328: PPUSH
8329: CALL_OW 1
8333: ST_TO_ADDR
8334: GO 8282
8336: POP
8337: POP
// end ;
8338: GO 6815
8340: POP
8341: POP
// result := Replace ( result , 4 , tmp ) ;
8342: LD_ADDR_VAR 0 5
8346: PUSH
8347: LD_VAR 0 5
8351: PPUSH
8352: LD_INT 4
8354: PPUSH
8355: LD_VAR 0 8
8359: PPUSH
8360: CALL_OW 1
8364: ST_TO_ADDR
// end ;
8365: LD_VAR 0 5
8369: RET
// export function DangerAtRange ( unit , range ) ; begin
8370: LD_INT 0
8372: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
8373: LD_ADDR_VAR 0 3
8377: PUSH
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 255
8387: PPUSH
8388: LD_VAR 0 1
8392: PPUSH
8393: CALL_OW 250
8397: PPUSH
8398: LD_VAR 0 1
8402: PPUSH
8403: CALL_OW 251
8407: PPUSH
8408: LD_VAR 0 2
8412: PPUSH
8413: CALL 6667 0 4
8417: ST_TO_ADDR
// end ;
8418: LD_VAR 0 3
8422: RET
// export function DangerInArea ( side , area ) ; begin
8423: LD_INT 0
8425: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
8426: LD_ADDR_VAR 0 3
8430: PUSH
8431: LD_VAR 0 2
8435: PPUSH
8436: LD_INT 81
8438: PUSH
8439: LD_VAR 0 1
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PPUSH
8448: CALL_OW 70
8452: ST_TO_ADDR
// end ;
8453: LD_VAR 0 3
8457: RET
// export function IsExtension ( b ) ; begin
8458: LD_INT 0
8460: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
8461: LD_ADDR_VAR 0 2
8465: PUSH
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 23
8473: PUSH
8474: LD_INT 20
8476: PUSH
8477: LD_INT 22
8479: PUSH
8480: LD_INT 17
8482: PUSH
8483: LD_INT 24
8485: PUSH
8486: LD_INT 21
8488: PUSH
8489: LD_INT 19
8491: PUSH
8492: LD_INT 16
8494: PUSH
8495: LD_INT 25
8497: PUSH
8498: LD_INT 18
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: IN
8513: ST_TO_ADDR
// end ;
8514: LD_VAR 0 2
8518: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
8519: LD_INT 0
8521: PPUSH
8522: PPUSH
8523: PPUSH
// result := [ ] ;
8524: LD_ADDR_VAR 0 4
8528: PUSH
8529: EMPTY
8530: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
8531: LD_ADDR_VAR 0 5
8535: PUSH
8536: LD_VAR 0 2
8540: PPUSH
8541: LD_INT 21
8543: PUSH
8544: LD_INT 3
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 70
8555: ST_TO_ADDR
// if not tmp then
8556: LD_VAR 0 5
8560: NOT
8561: IFFALSE 8565
// exit ;
8563: GO 8629
// if checkLink then
8565: LD_VAR 0 3
8569: IFFALSE 8619
// begin for i in tmp do
8571: LD_ADDR_VAR 0 6
8575: PUSH
8576: LD_VAR 0 5
8580: PUSH
8581: FOR_IN
8582: IFFALSE 8617
// if GetBase ( i ) <> base then
8584: LD_VAR 0 6
8588: PPUSH
8589: CALL_OW 274
8593: PUSH
8594: LD_VAR 0 1
8598: NONEQUAL
8599: IFFALSE 8615
// ComLinkToBase ( base , i ) ;
8601: LD_VAR 0 1
8605: PPUSH
8606: LD_VAR 0 6
8610: PPUSH
8611: CALL_OW 169
8615: GO 8581
8617: POP
8618: POP
// end ; result := tmp ;
8619: LD_ADDR_VAR 0 4
8623: PUSH
8624: LD_VAR 0 5
8628: ST_TO_ADDR
// end ;
8629: LD_VAR 0 4
8633: RET
// export function ComComplete ( units , b ) ; var i ; begin
8634: LD_INT 0
8636: PPUSH
8637: PPUSH
// if not units then
8638: LD_VAR 0 1
8642: NOT
8643: IFFALSE 8647
// exit ;
8645: GO 8737
// for i in units do
8647: LD_ADDR_VAR 0 4
8651: PUSH
8652: LD_VAR 0 1
8656: PUSH
8657: FOR_IN
8658: IFFALSE 8735
// if BuildingStatus ( b ) = bs_build then
8660: LD_VAR 0 2
8664: PPUSH
8665: CALL_OW 461
8669: PUSH
8670: LD_INT 1
8672: EQUAL
8673: IFFALSE 8733
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
8675: LD_VAR 0 4
8679: PPUSH
8680: LD_STRING h
8682: PUSH
8683: LD_VAR 0 2
8687: PPUSH
8688: CALL_OW 250
8692: PUSH
8693: LD_VAR 0 2
8697: PPUSH
8698: CALL_OW 251
8702: PUSH
8703: LD_VAR 0 2
8707: PUSH
8708: LD_INT 0
8710: PUSH
8711: LD_INT 0
8713: PUSH
8714: LD_INT 0
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: PUSH
8726: EMPTY
8727: LIST
8728: PPUSH
8729: CALL_OW 446
8733: GO 8657
8735: POP
8736: POP
// end ;
8737: LD_VAR 0 3
8741: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
8742: LD_INT 0
8744: PPUSH
8745: PPUSH
8746: PPUSH
8747: PPUSH
8748: PPUSH
8749: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
8750: LD_VAR 0 1
8754: NOT
8755: PUSH
8756: LD_VAR 0 1
8760: PPUSH
8761: CALL_OW 263
8765: PUSH
8766: LD_INT 2
8768: NONEQUAL
8769: OR
8770: IFFALSE 8774
// exit ;
8772: GO 9090
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
8774: LD_ADDR_VAR 0 6
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_VAR 0 1
8786: PPUSH
8787: CALL_OW 255
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: LD_INT 30
8801: PUSH
8802: LD_INT 36
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 34
8811: PUSH
8812: LD_INT 31
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PPUSH
8828: CALL_OW 69
8832: ST_TO_ADDR
// if not tmp then
8833: LD_VAR 0 6
8837: NOT
8838: IFFALSE 8842
// exit ;
8840: GO 9090
// result := [ ] ;
8842: LD_ADDR_VAR 0 2
8846: PUSH
8847: EMPTY
8848: ST_TO_ADDR
// for i in tmp do
8849: LD_ADDR_VAR 0 3
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8931
// begin t := UnitsInside ( i ) ;
8862: LD_ADDR_VAR 0 4
8866: PUSH
8867: LD_VAR 0 3
8871: PPUSH
8872: CALL_OW 313
8876: ST_TO_ADDR
// if t then
8877: LD_VAR 0 4
8881: IFFALSE 8929
// for j in t do
8883: LD_ADDR_VAR 0 7
8887: PUSH
8888: LD_VAR 0 4
8892: PUSH
8893: FOR_IN
8894: IFFALSE 8927
// result := Replace ( result , result + 1 , j ) ;
8896: LD_ADDR_VAR 0 2
8900: PUSH
8901: LD_VAR 0 2
8905: PPUSH
8906: LD_VAR 0 2
8910: PUSH
8911: LD_INT 1
8913: PLUS
8914: PPUSH
8915: LD_VAR 0 7
8919: PPUSH
8920: CALL_OW 1
8924: ST_TO_ADDR
8925: GO 8893
8927: POP
8928: POP
// end ;
8929: GO 8859
8931: POP
8932: POP
// if not result then
8933: LD_VAR 0 2
8937: NOT
8938: IFFALSE 8942
// exit ;
8940: GO 9090
// mech := result [ 1 ] ;
8942: LD_ADDR_VAR 0 5
8946: PUSH
8947: LD_VAR 0 2
8951: PUSH
8952: LD_INT 1
8954: ARRAY
8955: ST_TO_ADDR
// if result > 1 then
8956: LD_VAR 0 2
8960: PUSH
8961: LD_INT 1
8963: GREATER
8964: IFFALSE 9076
// begin for i = 2 to result do
8966: LD_ADDR_VAR 0 3
8970: PUSH
8971: DOUBLE
8972: LD_INT 2
8974: DEC
8975: ST_TO_ADDR
8976: LD_VAR 0 2
8980: PUSH
8981: FOR_TO
8982: IFFALSE 9074
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
8984: LD_ADDR_VAR 0 4
8988: PUSH
8989: LD_VAR 0 2
8993: PUSH
8994: LD_VAR 0 3
8998: ARRAY
8999: PPUSH
9000: LD_INT 3
9002: PPUSH
9003: CALL_OW 259
9007: PUSH
9008: LD_VAR 0 2
9012: PUSH
9013: LD_VAR 0 3
9017: ARRAY
9018: PPUSH
9019: CALL_OW 432
9023: MINUS
9024: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
9025: LD_VAR 0 4
9029: PUSH
9030: LD_VAR 0 5
9034: PPUSH
9035: LD_INT 3
9037: PPUSH
9038: CALL_OW 259
9042: PUSH
9043: LD_VAR 0 5
9047: PPUSH
9048: CALL_OW 432
9052: MINUS
9053: GREATEREQUAL
9054: IFFALSE 9072
// mech := result [ i ] ;
9056: LD_ADDR_VAR 0 5
9060: PUSH
9061: LD_VAR 0 2
9065: PUSH
9066: LD_VAR 0 3
9070: ARRAY
9071: ST_TO_ADDR
// end ;
9072: GO 8981
9074: POP
9075: POP
// end ; ComLinkTo ( vehicle , mech ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_VAR 0 5
9085: PPUSH
9086: CALL_OW 135
// end ;
9090: LD_VAR 0 2
9094: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
9095: LD_INT 0
9097: PPUSH
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
9102: PPUSH
9103: PPUSH
9104: PPUSH
9105: PPUSH
9106: PPUSH
9107: PPUSH
9108: PPUSH
9109: PPUSH
// result := [ ] ;
9110: LD_ADDR_VAR 0 7
9114: PUSH
9115: EMPTY
9116: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
9117: LD_VAR 0 1
9121: PPUSH
9122: CALL_OW 266
9126: PUSH
9127: LD_INT 0
9129: PUSH
9130: LD_INT 1
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: IN
9137: NOT
9138: IFFALSE 9142
// exit ;
9140: GO 10776
// if name then
9142: LD_VAR 0 3
9146: IFFALSE 9162
// SetBName ( base_dep , name ) ;
9148: LD_VAR 0 1
9152: PPUSH
9153: LD_VAR 0 3
9157: PPUSH
9158: CALL_OW 500
// base := GetBase ( base_dep ) ;
9162: LD_ADDR_VAR 0 15
9166: PUSH
9167: LD_VAR 0 1
9171: PPUSH
9172: CALL_OW 274
9176: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
9177: LD_ADDR_VAR 0 16
9181: PUSH
9182: LD_VAR 0 1
9186: PPUSH
9187: CALL_OW 255
9191: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
9192: LD_ADDR_VAR 0 17
9196: PUSH
9197: LD_VAR 0 1
9201: PPUSH
9202: CALL_OW 248
9206: ST_TO_ADDR
// if sources then
9207: LD_VAR 0 5
9211: IFFALSE 9258
// for i = 1 to 3 do
9213: LD_ADDR_VAR 0 8
9217: PUSH
9218: DOUBLE
9219: LD_INT 1
9221: DEC
9222: ST_TO_ADDR
9223: LD_INT 3
9225: PUSH
9226: FOR_TO
9227: IFFALSE 9256
// AddResourceType ( base , i , sources [ i ] ) ;
9229: LD_VAR 0 15
9233: PPUSH
9234: LD_VAR 0 8
9238: PPUSH
9239: LD_VAR 0 5
9243: PUSH
9244: LD_VAR 0 8
9248: ARRAY
9249: PPUSH
9250: CALL_OW 276
9254: GO 9226
9256: POP
9257: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
9258: LD_ADDR_VAR 0 18
9262: PUSH
9263: LD_VAR 0 15
9267: PPUSH
9268: LD_VAR 0 2
9272: PPUSH
9273: LD_INT 1
9275: PPUSH
9276: CALL 8519 0 3
9280: ST_TO_ADDR
// InitHc ;
9281: CALL_OW 19
// InitUc ;
9285: CALL_OW 18
// uc_side := side ;
9289: LD_ADDR_OWVAR 20
9293: PUSH
9294: LD_VAR 0 16
9298: ST_TO_ADDR
// uc_nation := nation ;
9299: LD_ADDR_OWVAR 21
9303: PUSH
9304: LD_VAR 0 17
9308: ST_TO_ADDR
// if buildings then
9309: LD_VAR 0 18
9313: IFFALSE 10635
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
9315: LD_ADDR_VAR 0 19
9319: PUSH
9320: LD_VAR 0 18
9324: PPUSH
9325: LD_INT 2
9327: PUSH
9328: LD_INT 30
9330: PUSH
9331: LD_INT 29
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: PUSH
9338: LD_INT 30
9340: PUSH
9341: LD_INT 30
9343: PUSH
9344: EMPTY
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: PPUSH
9353: CALL_OW 72
9357: ST_TO_ADDR
// if tmp then
9358: LD_VAR 0 19
9362: IFFALSE 9410
// for i in tmp do
9364: LD_ADDR_VAR 0 8
9368: PUSH
9369: LD_VAR 0 19
9373: PUSH
9374: FOR_IN
9375: IFFALSE 9408
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
9377: LD_VAR 0 8
9381: PPUSH
9382: CALL_OW 250
9386: PPUSH
9387: LD_VAR 0 8
9391: PPUSH
9392: CALL_OW 251
9396: PPUSH
9397: LD_VAR 0 16
9401: PPUSH
9402: CALL_OW 441
9406: GO 9374
9408: POP
9409: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
9410: LD_VAR 0 18
9414: PPUSH
9415: LD_INT 2
9417: PUSH
9418: LD_INT 30
9420: PUSH
9421: LD_INT 32
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 30
9430: PUSH
9431: LD_INT 33
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: PPUSH
9443: CALL_OW 72
9447: IFFALSE 9535
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
9449: LD_ADDR_VAR 0 8
9453: PUSH
9454: LD_VAR 0 18
9458: PPUSH
9459: LD_INT 2
9461: PUSH
9462: LD_INT 30
9464: PUSH
9465: LD_INT 32
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 30
9474: PUSH
9475: LD_INT 33
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 72
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9533
// begin if not GetBWeapon ( i ) then
9495: LD_VAR 0 8
9499: PPUSH
9500: CALL_OW 269
9504: NOT
9505: IFFALSE 9531
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
9507: LD_VAR 0 8
9511: PPUSH
9512: LD_VAR 0 8
9516: PPUSH
9517: LD_VAR 0 2
9521: PPUSH
9522: CALL 10781 0 2
9526: PPUSH
9527: CALL_OW 431
// end ;
9531: GO 9492
9533: POP
9534: POP
// end ; for i = 1 to personel do
9535: LD_ADDR_VAR 0 8
9539: PUSH
9540: DOUBLE
9541: LD_INT 1
9543: DEC
9544: ST_TO_ADDR
9545: LD_VAR 0 6
9549: PUSH
9550: FOR_TO
9551: IFFALSE 10615
// begin if i > 4 then
9553: LD_VAR 0 8
9557: PUSH
9558: LD_INT 4
9560: GREATER
9561: IFFALSE 9565
// break ;
9563: GO 10615
// case i of 1 :
9565: LD_VAR 0 8
9569: PUSH
9570: LD_INT 1
9572: DOUBLE
9573: EQUAL
9574: IFTRUE 9578
9576: GO 9658
9578: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
9579: LD_ADDR_VAR 0 12
9583: PUSH
9584: LD_VAR 0 18
9588: PPUSH
9589: LD_INT 22
9591: PUSH
9592: LD_VAR 0 16
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: LD_INT 58
9603: PUSH
9604: EMPTY
9605: LIST
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: LD_INT 30
9612: PUSH
9613: LD_INT 32
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 30
9622: PUSH
9623: LD_INT 4
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 5
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 72
9655: ST_TO_ADDR
9656: GO 9880
9658: LD_INT 2
9660: DOUBLE
9661: EQUAL
9662: IFTRUE 9666
9664: GO 9728
9666: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
9667: LD_ADDR_VAR 0 12
9671: PUSH
9672: LD_VAR 0 18
9676: PPUSH
9677: LD_INT 22
9679: PUSH
9680: LD_VAR 0 16
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 2
9691: PUSH
9692: LD_INT 30
9694: PUSH
9695: LD_INT 0
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 30
9704: PUSH
9705: LD_INT 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PPUSH
9721: CALL_OW 72
9725: ST_TO_ADDR
9726: GO 9880
9728: LD_INT 3
9730: DOUBLE
9731: EQUAL
9732: IFTRUE 9736
9734: GO 9798
9736: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
9737: LD_ADDR_VAR 0 12
9741: PUSH
9742: LD_VAR 0 18
9746: PPUSH
9747: LD_INT 22
9749: PUSH
9750: LD_VAR 0 16
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 2
9761: PUSH
9762: LD_INT 30
9764: PUSH
9765: LD_INT 2
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 72
9795: ST_TO_ADDR
9796: GO 9880
9798: LD_INT 4
9800: DOUBLE
9801: EQUAL
9802: IFTRUE 9806
9804: GO 9879
9806: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
9807: LD_ADDR_VAR 0 12
9811: PUSH
9812: LD_VAR 0 18
9816: PPUSH
9817: LD_INT 22
9819: PUSH
9820: LD_VAR 0 16
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 2
9831: PUSH
9832: LD_INT 30
9834: PUSH
9835: LD_INT 6
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PUSH
9842: LD_INT 30
9844: PUSH
9845: LD_INT 7
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: PUSH
9852: LD_INT 30
9854: PUSH
9855: LD_INT 8
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 72
9876: ST_TO_ADDR
9877: GO 9880
9879: POP
// if i = 1 then
9880: LD_VAR 0 8
9884: PUSH
9885: LD_INT 1
9887: EQUAL
9888: IFFALSE 9999
// begin tmp := [ ] ;
9890: LD_ADDR_VAR 0 19
9894: PUSH
9895: EMPTY
9896: ST_TO_ADDR
// for j in f do
9897: LD_ADDR_VAR 0 9
9901: PUSH
9902: LD_VAR 0 12
9906: PUSH
9907: FOR_IN
9908: IFFALSE 9981
// if GetBType ( j ) = b_bunker then
9910: LD_VAR 0 9
9914: PPUSH
9915: CALL_OW 266
9919: PUSH
9920: LD_INT 32
9922: EQUAL
9923: IFFALSE 9950
// tmp := Insert ( tmp , 1 , j ) else
9925: LD_ADDR_VAR 0 19
9929: PUSH
9930: LD_VAR 0 19
9934: PPUSH
9935: LD_INT 1
9937: PPUSH
9938: LD_VAR 0 9
9942: PPUSH
9943: CALL_OW 2
9947: ST_TO_ADDR
9948: GO 9979
// tmp := Insert ( tmp , tmp + 1 , j ) ;
9950: LD_ADDR_VAR 0 19
9954: PUSH
9955: LD_VAR 0 19
9959: PPUSH
9960: LD_VAR 0 19
9964: PUSH
9965: LD_INT 1
9967: PLUS
9968: PPUSH
9969: LD_VAR 0 9
9973: PPUSH
9974: CALL_OW 2
9978: ST_TO_ADDR
9979: GO 9907
9981: POP
9982: POP
// if tmp then
9983: LD_VAR 0 19
9987: IFFALSE 9999
// f := tmp ;
9989: LD_ADDR_VAR 0 12
9993: PUSH
9994: LD_VAR 0 19
9998: ST_TO_ADDR
// end ; x := personel [ i ] ;
9999: LD_ADDR_VAR 0 13
10003: PUSH
10004: LD_VAR 0 6
10008: PUSH
10009: LD_VAR 0 8
10013: ARRAY
10014: ST_TO_ADDR
// if x = - 1 then
10015: LD_VAR 0 13
10019: PUSH
10020: LD_INT 1
10022: NEG
10023: EQUAL
10024: IFFALSE 10233
// begin for j in f do
10026: LD_ADDR_VAR 0 9
10030: PUSH
10031: LD_VAR 0 12
10035: PUSH
10036: FOR_IN
10037: IFFALSE 10229
// repeat InitHc ;
10039: CALL_OW 19
// if GetBType ( j ) = b_barracks then
10043: LD_VAR 0 9
10047: PPUSH
10048: CALL_OW 266
10052: PUSH
10053: LD_INT 5
10055: EQUAL
10056: IFFALSE 10126
// begin if UnitsInside ( j ) < 3 then
10058: LD_VAR 0 9
10062: PPUSH
10063: CALL_OW 313
10067: PUSH
10068: LD_INT 3
10070: LESS
10071: IFFALSE 10107
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10073: LD_INT 0
10075: PPUSH
10076: LD_INT 5
10078: PUSH
10079: LD_INT 8
10081: PUSH
10082: LD_INT 9
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: PUSH
10090: LD_VAR 0 17
10094: ARRAY
10095: PPUSH
10096: LD_VAR 0 4
10100: PPUSH
10101: CALL_OW 380
10105: GO 10124
// PrepareHuman ( false , i , skill ) ;
10107: LD_INT 0
10109: PPUSH
10110: LD_VAR 0 8
10114: PPUSH
10115: LD_VAR 0 4
10119: PPUSH
10120: CALL_OW 380
// end else
10124: GO 10143
// PrepareHuman ( false , i , skill ) ;
10126: LD_INT 0
10128: PPUSH
10129: LD_VAR 0 8
10133: PPUSH
10134: LD_VAR 0 4
10138: PPUSH
10139: CALL_OW 380
// un := CreateHuman ;
10143: LD_ADDR_VAR 0 14
10147: PUSH
10148: CALL_OW 44
10152: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10153: LD_ADDR_VAR 0 7
10157: PUSH
10158: LD_VAR 0 7
10162: PPUSH
10163: LD_INT 1
10165: PPUSH
10166: LD_VAR 0 14
10170: PPUSH
10171: CALL_OW 2
10175: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
10176: LD_VAR 0 14
10180: PPUSH
10181: LD_VAR 0 9
10185: PPUSH
10186: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
10190: LD_VAR 0 9
10194: PPUSH
10195: CALL_OW 313
10199: PUSH
10200: LD_INT 6
10202: EQUAL
10203: PUSH
10204: LD_VAR 0 9
10208: PPUSH
10209: CALL_OW 266
10213: PUSH
10214: LD_INT 32
10216: PUSH
10217: LD_INT 31
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: IN
10224: OR
10225: IFFALSE 10039
10227: GO 10036
10229: POP
10230: POP
// end else
10231: GO 10613
// for j = 1 to x do
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: DOUBLE
10239: LD_INT 1
10241: DEC
10242: ST_TO_ADDR
10243: LD_VAR 0 13
10247: PUSH
10248: FOR_TO
10249: IFFALSE 10611
// begin InitHc ;
10251: CALL_OW 19
// if not f then
10255: LD_VAR 0 12
10259: NOT
10260: IFFALSE 10349
// begin PrepareHuman ( false , i , skill ) ;
10262: LD_INT 0
10264: PPUSH
10265: LD_VAR 0 8
10269: PPUSH
10270: LD_VAR 0 4
10274: PPUSH
10275: CALL_OW 380
// un := CreateHuman ;
10279: LD_ADDR_VAR 0 14
10283: PUSH
10284: CALL_OW 44
10288: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10289: LD_ADDR_VAR 0 7
10293: PUSH
10294: LD_VAR 0 7
10298: PPUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_VAR 0 14
10306: PPUSH
10307: CALL_OW 2
10311: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10312: LD_VAR 0 14
10316: PPUSH
10317: LD_VAR 0 1
10321: PPUSH
10322: CALL_OW 250
10326: PPUSH
10327: LD_VAR 0 1
10331: PPUSH
10332: CALL_OW 251
10336: PPUSH
10337: LD_INT 10
10339: PPUSH
10340: LD_INT 0
10342: PPUSH
10343: CALL_OW 50
// continue ;
10347: GO 10248
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
10349: LD_VAR 0 12
10353: PUSH
10354: LD_INT 1
10356: ARRAY
10357: PPUSH
10358: CALL_OW 313
10362: PUSH
10363: LD_VAR 0 12
10367: PUSH
10368: LD_INT 1
10370: ARRAY
10371: PPUSH
10372: CALL_OW 266
10376: PUSH
10377: LD_INT 32
10379: PUSH
10380: LD_INT 31
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: IN
10387: AND
10388: PUSH
10389: LD_VAR 0 12
10393: PUSH
10394: LD_INT 1
10396: ARRAY
10397: PPUSH
10398: CALL_OW 313
10402: PUSH
10403: LD_INT 6
10405: EQUAL
10406: OR
10407: IFFALSE 10427
// f := Delete ( f , 1 ) ;
10409: LD_ADDR_VAR 0 12
10413: PUSH
10414: LD_VAR 0 12
10418: PPUSH
10419: LD_INT 1
10421: PPUSH
10422: CALL_OW 3
10426: ST_TO_ADDR
// if not f then
10427: LD_VAR 0 12
10431: NOT
10432: IFFALSE 10450
// begin x := x + 2 ;
10434: LD_ADDR_VAR 0 13
10438: PUSH
10439: LD_VAR 0 13
10443: PUSH
10444: LD_INT 2
10446: PLUS
10447: ST_TO_ADDR
// continue ;
10448: GO 10248
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
10450: LD_VAR 0 12
10454: PUSH
10455: LD_INT 1
10457: ARRAY
10458: PPUSH
10459: CALL_OW 266
10463: PUSH
10464: LD_INT 5
10466: EQUAL
10467: IFFALSE 10541
// begin if UnitsInside ( f [ 1 ] ) < 3 then
10469: LD_VAR 0 12
10473: PUSH
10474: LD_INT 1
10476: ARRAY
10477: PPUSH
10478: CALL_OW 313
10482: PUSH
10483: LD_INT 3
10485: LESS
10486: IFFALSE 10522
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
10488: LD_INT 0
10490: PPUSH
10491: LD_INT 5
10493: PUSH
10494: LD_INT 8
10496: PUSH
10497: LD_INT 9
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: PUSH
10505: LD_VAR 0 17
10509: ARRAY
10510: PPUSH
10511: LD_VAR 0 4
10515: PPUSH
10516: CALL_OW 380
10520: GO 10539
// PrepareHuman ( false , i , skill ) ;
10522: LD_INT 0
10524: PPUSH
10525: LD_VAR 0 8
10529: PPUSH
10530: LD_VAR 0 4
10534: PPUSH
10535: CALL_OW 380
// end else
10539: GO 10558
// PrepareHuman ( false , i , skill ) ;
10541: LD_INT 0
10543: PPUSH
10544: LD_VAR 0 8
10548: PPUSH
10549: LD_VAR 0 4
10553: PPUSH
10554: CALL_OW 380
// un := CreateHuman ;
10558: LD_ADDR_VAR 0 14
10562: PUSH
10563: CALL_OW 44
10567: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
10568: LD_ADDR_VAR 0 7
10572: PUSH
10573: LD_VAR 0 7
10577: PPUSH
10578: LD_INT 1
10580: PPUSH
10581: LD_VAR 0 14
10585: PPUSH
10586: CALL_OW 2
10590: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
10591: LD_VAR 0 14
10595: PPUSH
10596: LD_VAR 0 12
10600: PUSH
10601: LD_INT 1
10603: ARRAY
10604: PPUSH
10605: CALL_OW 52
// end ;
10609: GO 10248
10611: POP
10612: POP
// end ;
10613: GO 9550
10615: POP
10616: POP
// result := result ^ buildings ;
10617: LD_ADDR_VAR 0 7
10621: PUSH
10622: LD_VAR 0 7
10626: PUSH
10627: LD_VAR 0 18
10631: ADD
10632: ST_TO_ADDR
// end else
10633: GO 10776
// begin for i = 1 to personel do
10635: LD_ADDR_VAR 0 8
10639: PUSH
10640: DOUBLE
10641: LD_INT 1
10643: DEC
10644: ST_TO_ADDR
10645: LD_VAR 0 6
10649: PUSH
10650: FOR_TO
10651: IFFALSE 10774
// begin if i > 4 then
10653: LD_VAR 0 8
10657: PUSH
10658: LD_INT 4
10660: GREATER
10661: IFFALSE 10665
// break ;
10663: GO 10774
// x := personel [ i ] ;
10665: LD_ADDR_VAR 0 13
10669: PUSH
10670: LD_VAR 0 6
10674: PUSH
10675: LD_VAR 0 8
10679: ARRAY
10680: ST_TO_ADDR
// if x = - 1 then
10681: LD_VAR 0 13
10685: PUSH
10686: LD_INT 1
10688: NEG
10689: EQUAL
10690: IFFALSE 10694
// continue ;
10692: GO 10650
// PrepareHuman ( false , i , skill ) ;
10694: LD_INT 0
10696: PPUSH
10697: LD_VAR 0 8
10701: PPUSH
10702: LD_VAR 0 4
10706: PPUSH
10707: CALL_OW 380
// un := CreateHuman ;
10711: LD_ADDR_VAR 0 14
10715: PUSH
10716: CALL_OW 44
10720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
10721: LD_VAR 0 14
10725: PPUSH
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 250
10735: PPUSH
10736: LD_VAR 0 1
10740: PPUSH
10741: CALL_OW 251
10745: PPUSH
10746: LD_INT 10
10748: PPUSH
10749: LD_INT 0
10751: PPUSH
10752: CALL_OW 50
// result := result ^ un ;
10756: LD_ADDR_VAR 0 7
10760: PUSH
10761: LD_VAR 0 7
10765: PUSH
10766: LD_VAR 0 14
10770: ADD
10771: ST_TO_ADDR
// end ;
10772: GO 10650
10774: POP
10775: POP
// end ; end ;
10776: LD_VAR 0 7
10780: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
10781: LD_INT 0
10783: PPUSH
10784: PPUSH
10785: PPUSH
10786: PPUSH
10787: PPUSH
10788: PPUSH
10789: PPUSH
10790: PPUSH
10791: PPUSH
10792: PPUSH
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
// result := false ;
10799: LD_ADDR_VAR 0 3
10803: PUSH
10804: LD_INT 0
10806: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
10807: LD_VAR 0 1
10811: NOT
10812: PUSH
10813: LD_VAR 0 1
10817: PPUSH
10818: CALL_OW 266
10822: PUSH
10823: LD_INT 32
10825: PUSH
10826: LD_INT 33
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: IN
10833: NOT
10834: OR
10835: IFFALSE 10839
// exit ;
10837: GO 11948
// nat := GetNation ( tower ) ;
10839: LD_ADDR_VAR 0 12
10843: PUSH
10844: LD_VAR 0 1
10848: PPUSH
10849: CALL_OW 248
10853: ST_TO_ADDR
// side := GetSide ( tower ) ;
10854: LD_ADDR_VAR 0 16
10858: PUSH
10859: LD_VAR 0 1
10863: PPUSH
10864: CALL_OW 255
10868: ST_TO_ADDR
// x := GetX ( tower ) ;
10869: LD_ADDR_VAR 0 10
10873: PUSH
10874: LD_VAR 0 1
10878: PPUSH
10879: CALL_OW 250
10883: ST_TO_ADDR
// y := GetY ( tower ) ;
10884: LD_ADDR_VAR 0 11
10888: PUSH
10889: LD_VAR 0 1
10893: PPUSH
10894: CALL_OW 251
10898: ST_TO_ADDR
// if not x or not y then
10899: LD_VAR 0 10
10903: NOT
10904: PUSH
10905: LD_VAR 0 11
10909: NOT
10910: OR
10911: IFFALSE 10915
// exit ;
10913: GO 11948
// weapon := 0 ;
10915: LD_ADDR_VAR 0 18
10919: PUSH
10920: LD_INT 0
10922: ST_TO_ADDR
// fac_list := [ ] ;
10923: LD_ADDR_VAR 0 17
10927: PUSH
10928: EMPTY
10929: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
10930: LD_ADDR_VAR 0 6
10934: PUSH
10935: LD_VAR 0 1
10939: PPUSH
10940: CALL_OW 274
10944: PPUSH
10945: LD_VAR 0 2
10949: PPUSH
10950: LD_INT 0
10952: PPUSH
10953: CALL 8519 0 3
10957: PPUSH
10958: LD_INT 30
10960: PUSH
10961: LD_INT 3
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 72
10972: ST_TO_ADDR
// if not factories then
10973: LD_VAR 0 6
10977: NOT
10978: IFFALSE 10982
// exit ;
10980: GO 11948
// for i in factories do
10982: LD_ADDR_VAR 0 8
10986: PUSH
10987: LD_VAR 0 6
10991: PUSH
10992: FOR_IN
10993: IFFALSE 11018
// fac_list := fac_list union AvailableWeaponList ( i ) ;
10995: LD_ADDR_VAR 0 17
10999: PUSH
11000: LD_VAR 0 17
11004: PUSH
11005: LD_VAR 0 8
11009: PPUSH
11010: CALL_OW 478
11014: UNION
11015: ST_TO_ADDR
11016: GO 10992
11018: POP
11019: POP
// if not fac_list then
11020: LD_VAR 0 17
11024: NOT
11025: IFFALSE 11029
// exit ;
11027: GO 11948
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
11029: LD_ADDR_VAR 0 5
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: LD_INT 9
11042: PUSH
11043: LD_INT 10
11045: PUSH
11046: LD_INT 6
11048: PUSH
11049: LD_INT 7
11051: PUSH
11052: LD_INT 11
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 27
11066: PUSH
11067: LD_INT 28
11069: PUSH
11070: LD_INT 26
11072: PUSH
11073: LD_INT 30
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 43
11084: PUSH
11085: LD_INT 44
11087: PUSH
11088: LD_INT 46
11090: PUSH
11091: LD_INT 45
11093: PUSH
11094: LD_INT 47
11096: PUSH
11097: LD_INT 49
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: LD_VAR 0 12
11117: ARRAY
11118: ST_TO_ADDR
// list := list isect fac_list ;
11119: LD_ADDR_VAR 0 5
11123: PUSH
11124: LD_VAR 0 5
11128: PUSH
11129: LD_VAR 0 17
11133: ISECT
11134: ST_TO_ADDR
// if not list then
11135: LD_VAR 0 5
11139: NOT
11140: IFFALSE 11144
// exit ;
11142: GO 11948
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
11144: LD_VAR 0 12
11148: PUSH
11149: LD_INT 3
11151: EQUAL
11152: PUSH
11153: LD_INT 49
11155: PUSH
11156: LD_VAR 0 5
11160: IN
11161: AND
11162: PUSH
11163: LD_INT 31
11165: PPUSH
11166: LD_VAR 0 16
11170: PPUSH
11171: CALL_OW 321
11175: PUSH
11176: LD_INT 2
11178: EQUAL
11179: AND
11180: IFFALSE 11240
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
11182: LD_INT 22
11184: PUSH
11185: LD_VAR 0 16
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: LD_INT 35
11196: PUSH
11197: LD_INT 49
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PUSH
11204: LD_INT 91
11206: PUSH
11207: LD_VAR 0 1
11211: PUSH
11212: LD_INT 10
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: PPUSH
11225: CALL_OW 69
11229: NOT
11230: IFFALSE 11240
// weapon := ru_time_lapser ;
11232: LD_ADDR_VAR 0 18
11236: PUSH
11237: LD_INT 49
11239: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
11240: LD_VAR 0 12
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: IN
11255: PUSH
11256: LD_INT 11
11258: PUSH
11259: LD_VAR 0 5
11263: IN
11264: PUSH
11265: LD_INT 30
11267: PUSH
11268: LD_VAR 0 5
11272: IN
11273: OR
11274: AND
11275: PUSH
11276: LD_INT 6
11278: PPUSH
11279: LD_VAR 0 16
11283: PPUSH
11284: CALL_OW 321
11288: PUSH
11289: LD_INT 2
11291: EQUAL
11292: AND
11293: IFFALSE 11458
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
11295: LD_INT 22
11297: PUSH
11298: LD_VAR 0 16
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: LD_INT 35
11312: PUSH
11313: LD_INT 11
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 35
11322: PUSH
11323: LD_INT 30
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 91
11337: PUSH
11338: LD_VAR 0 1
11342: PUSH
11343: LD_INT 18
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PPUSH
11356: CALL_OW 69
11360: NOT
11361: PUSH
11362: LD_INT 22
11364: PUSH
11365: LD_VAR 0 16
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: LD_INT 30
11379: PUSH
11380: LD_INT 32
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 30
11389: PUSH
11390: LD_INT 33
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 91
11404: PUSH
11405: LD_VAR 0 1
11409: PUSH
11410: LD_INT 12
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: PUSH
11418: EMPTY
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: EMPTY
11424: LIST
11425: PPUSH
11426: CALL_OW 69
11430: PUSH
11431: LD_INT 2
11433: GREATER
11434: AND
11435: IFFALSE 11458
// weapon := [ us_radar , ar_radar ] [ nat ] ;
11437: LD_ADDR_VAR 0 18
11441: PUSH
11442: LD_INT 11
11444: PUSH
11445: LD_INT 30
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: PUSH
11452: LD_VAR 0 12
11456: ARRAY
11457: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
11458: LD_VAR 0 18
11462: NOT
11463: PUSH
11464: LD_INT 40
11466: PPUSH
11467: LD_VAR 0 16
11471: PPUSH
11472: CALL_OW 321
11476: PUSH
11477: LD_INT 2
11479: EQUAL
11480: AND
11481: PUSH
11482: LD_INT 7
11484: PUSH
11485: LD_VAR 0 5
11489: IN
11490: PUSH
11491: LD_INT 28
11493: PUSH
11494: LD_VAR 0 5
11498: IN
11499: OR
11500: PUSH
11501: LD_INT 45
11503: PUSH
11504: LD_VAR 0 5
11508: IN
11509: OR
11510: AND
11511: IFFALSE 11765
// begin hex := GetHexInfo ( x , y ) ;
11513: LD_ADDR_VAR 0 4
11517: PUSH
11518: LD_VAR 0 10
11522: PPUSH
11523: LD_VAR 0 11
11527: PPUSH
11528: CALL_OW 546
11532: ST_TO_ADDR
// if hex [ 1 ] then
11533: LD_VAR 0 4
11537: PUSH
11538: LD_INT 1
11540: ARRAY
11541: IFFALSE 11545
// exit ;
11543: GO 11948
// height := hex [ 2 ] ;
11545: LD_ADDR_VAR 0 15
11549: PUSH
11550: LD_VAR 0 4
11554: PUSH
11555: LD_INT 2
11557: ARRAY
11558: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
11559: LD_ADDR_VAR 0 14
11563: PUSH
11564: LD_INT 0
11566: PUSH
11567: LD_INT 2
11569: PUSH
11570: LD_INT 3
11572: PUSH
11573: LD_INT 5
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: ST_TO_ADDR
// for i in tmp do
11582: LD_ADDR_VAR 0 8
11586: PUSH
11587: LD_VAR 0 14
11591: PUSH
11592: FOR_IN
11593: IFFALSE 11763
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
11595: LD_ADDR_VAR 0 9
11599: PUSH
11600: LD_VAR 0 10
11604: PPUSH
11605: LD_VAR 0 8
11609: PPUSH
11610: LD_INT 5
11612: PPUSH
11613: CALL_OW 272
11617: PUSH
11618: LD_VAR 0 11
11622: PPUSH
11623: LD_VAR 0 8
11627: PPUSH
11628: LD_INT 5
11630: PPUSH
11631: CALL_OW 273
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
11640: LD_VAR 0 9
11644: PUSH
11645: LD_INT 1
11647: ARRAY
11648: PPUSH
11649: LD_VAR 0 9
11653: PUSH
11654: LD_INT 2
11656: ARRAY
11657: PPUSH
11658: CALL_OW 488
11662: IFFALSE 11761
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
11664: LD_ADDR_VAR 0 4
11668: PUSH
11669: LD_VAR 0 9
11673: PUSH
11674: LD_INT 1
11676: ARRAY
11677: PPUSH
11678: LD_VAR 0 9
11682: PUSH
11683: LD_INT 2
11685: ARRAY
11686: PPUSH
11687: CALL_OW 546
11691: ST_TO_ADDR
// if hex [ 1 ] then
11692: LD_VAR 0 4
11696: PUSH
11697: LD_INT 1
11699: ARRAY
11700: IFFALSE 11704
// continue ;
11702: GO 11592
// h := hex [ 2 ] ;
11704: LD_ADDR_VAR 0 13
11708: PUSH
11709: LD_VAR 0 4
11713: PUSH
11714: LD_INT 2
11716: ARRAY
11717: ST_TO_ADDR
// if h + 7 < height then
11718: LD_VAR 0 13
11722: PUSH
11723: LD_INT 7
11725: PLUS
11726: PUSH
11727: LD_VAR 0 15
11731: LESS
11732: IFFALSE 11761
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
11734: LD_ADDR_VAR 0 18
11738: PUSH
11739: LD_INT 7
11741: PUSH
11742: LD_INT 28
11744: PUSH
11745: LD_INT 45
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: LIST
11752: PUSH
11753: LD_VAR 0 12
11757: ARRAY
11758: ST_TO_ADDR
// break ;
11759: GO 11763
// end ; end ; end ;
11761: GO 11592
11763: POP
11764: POP
// end ; if not weapon then
11765: LD_VAR 0 18
11769: NOT
11770: IFFALSE 11830
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
11772: LD_ADDR_VAR 0 5
11776: PUSH
11777: LD_VAR 0 5
11781: PUSH
11782: LD_INT 11
11784: PUSH
11785: LD_INT 30
11787: PUSH
11788: LD_INT 49
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: DIFF
11796: ST_TO_ADDR
// if not list then
11797: LD_VAR 0 5
11801: NOT
11802: IFFALSE 11806
// exit ;
11804: GO 11948
// weapon := list [ rand ( 1 , list ) ] ;
11806: LD_ADDR_VAR 0 18
11810: PUSH
11811: LD_VAR 0 5
11815: PUSH
11816: LD_INT 1
11818: PPUSH
11819: LD_VAR 0 5
11823: PPUSH
11824: CALL_OW 12
11828: ARRAY
11829: ST_TO_ADDR
// end ; if weapon then
11830: LD_VAR 0 18
11834: IFFALSE 11948
// begin tmp := CostOfWeapon ( weapon ) ;
11836: LD_ADDR_VAR 0 14
11840: PUSH
11841: LD_VAR 0 18
11845: PPUSH
11846: CALL_OW 451
11850: ST_TO_ADDR
// j := GetBase ( tower ) ;
11851: LD_ADDR_VAR 0 9
11855: PUSH
11856: LD_VAR 0 1
11860: PPUSH
11861: CALL_OW 274
11865: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
11866: LD_VAR 0 9
11870: PPUSH
11871: LD_INT 1
11873: PPUSH
11874: CALL_OW 275
11878: PUSH
11879: LD_VAR 0 14
11883: PUSH
11884: LD_INT 1
11886: ARRAY
11887: GREATEREQUAL
11888: PUSH
11889: LD_VAR 0 9
11893: PPUSH
11894: LD_INT 2
11896: PPUSH
11897: CALL_OW 275
11901: PUSH
11902: LD_VAR 0 14
11906: PUSH
11907: LD_INT 2
11909: ARRAY
11910: GREATEREQUAL
11911: AND
11912: PUSH
11913: LD_VAR 0 9
11917: PPUSH
11918: LD_INT 3
11920: PPUSH
11921: CALL_OW 275
11925: PUSH
11926: LD_VAR 0 14
11930: PUSH
11931: LD_INT 3
11933: ARRAY
11934: GREATEREQUAL
11935: AND
11936: IFFALSE 11948
// result := weapon ;
11938: LD_ADDR_VAR 0 3
11942: PUSH
11943: LD_VAR 0 18
11947: ST_TO_ADDR
// end ; end ;
11948: LD_VAR 0 3
11952: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
11953: LD_INT 0
11955: PPUSH
11956: PPUSH
// result := true ;
11957: LD_ADDR_VAR 0 3
11961: PUSH
11962: LD_INT 1
11964: ST_TO_ADDR
// if array1 = array2 then
11965: LD_VAR 0 1
11969: PUSH
11970: LD_VAR 0 2
11974: EQUAL
11975: IFFALSE 12035
// begin for i = 1 to array1 do
11977: LD_ADDR_VAR 0 4
11981: PUSH
11982: DOUBLE
11983: LD_INT 1
11985: DEC
11986: ST_TO_ADDR
11987: LD_VAR 0 1
11991: PUSH
11992: FOR_TO
11993: IFFALSE 12031
// if array1 [ i ] <> array2 [ i ] then
11995: LD_VAR 0 1
11999: PUSH
12000: LD_VAR 0 4
12004: ARRAY
12005: PUSH
12006: LD_VAR 0 2
12010: PUSH
12011: LD_VAR 0 4
12015: ARRAY
12016: NONEQUAL
12017: IFFALSE 12029
// begin result := false ;
12019: LD_ADDR_VAR 0 3
12023: PUSH
12024: LD_INT 0
12026: ST_TO_ADDR
// break ;
12027: GO 12031
// end ;
12029: GO 11992
12031: POP
12032: POP
// end else
12033: GO 12043
// result := false ;
12035: LD_ADDR_VAR 0 3
12039: PUSH
12040: LD_INT 0
12042: ST_TO_ADDR
// end ;
12043: LD_VAR 0 3
12047: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
12048: LD_INT 0
12050: PPUSH
12051: PPUSH
// if not array1 or not array2 then
12052: LD_VAR 0 1
12056: NOT
12057: PUSH
12058: LD_VAR 0 2
12062: NOT
12063: OR
12064: IFFALSE 12068
// exit ;
12066: GO 12132
// result := true ;
12068: LD_ADDR_VAR 0 3
12072: PUSH
12073: LD_INT 1
12075: ST_TO_ADDR
// for i = 1 to array1 do
12076: LD_ADDR_VAR 0 4
12080: PUSH
12081: DOUBLE
12082: LD_INT 1
12084: DEC
12085: ST_TO_ADDR
12086: LD_VAR 0 1
12090: PUSH
12091: FOR_TO
12092: IFFALSE 12130
// if array1 [ i ] <> array2 [ i ] then
12094: LD_VAR 0 1
12098: PUSH
12099: LD_VAR 0 4
12103: ARRAY
12104: PUSH
12105: LD_VAR 0 2
12109: PUSH
12110: LD_VAR 0 4
12114: ARRAY
12115: NONEQUAL
12116: IFFALSE 12128
// begin result := false ;
12118: LD_ADDR_VAR 0 3
12122: PUSH
12123: LD_INT 0
12125: ST_TO_ADDR
// break ;
12126: GO 12130
// end ;
12128: GO 12091
12130: POP
12131: POP
// end ;
12132: LD_VAR 0 3
12136: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
12137: LD_INT 0
12139: PPUSH
12140: PPUSH
12141: PPUSH
// pom := GetBase ( fac ) ;
12142: LD_ADDR_VAR 0 5
12146: PUSH
12147: LD_VAR 0 1
12151: PPUSH
12152: CALL_OW 274
12156: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
12157: LD_ADDR_VAR 0 4
12161: PUSH
12162: LD_VAR 0 2
12166: PUSH
12167: LD_INT 1
12169: ARRAY
12170: PPUSH
12171: LD_VAR 0 2
12175: PUSH
12176: LD_INT 2
12178: ARRAY
12179: PPUSH
12180: LD_VAR 0 2
12184: PUSH
12185: LD_INT 3
12187: ARRAY
12188: PPUSH
12189: LD_VAR 0 2
12193: PUSH
12194: LD_INT 4
12196: ARRAY
12197: PPUSH
12198: CALL_OW 449
12202: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12203: LD_ADDR_VAR 0 3
12207: PUSH
12208: LD_VAR 0 5
12212: PPUSH
12213: LD_INT 1
12215: PPUSH
12216: CALL_OW 275
12220: PUSH
12221: LD_VAR 0 4
12225: PUSH
12226: LD_INT 1
12228: ARRAY
12229: GREATEREQUAL
12230: PUSH
12231: LD_VAR 0 5
12235: PPUSH
12236: LD_INT 2
12238: PPUSH
12239: CALL_OW 275
12243: PUSH
12244: LD_VAR 0 4
12248: PUSH
12249: LD_INT 2
12251: ARRAY
12252: GREATEREQUAL
12253: AND
12254: PUSH
12255: LD_VAR 0 5
12259: PPUSH
12260: LD_INT 3
12262: PPUSH
12263: CALL_OW 275
12267: PUSH
12268: LD_VAR 0 4
12272: PUSH
12273: LD_INT 3
12275: ARRAY
12276: GREATEREQUAL
12277: AND
12278: ST_TO_ADDR
// end ;
12279: LD_VAR 0 3
12283: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
12284: LD_INT 0
12286: PPUSH
12287: PPUSH
12288: PPUSH
12289: PPUSH
// pom := GetBase ( building ) ;
12290: LD_ADDR_VAR 0 3
12294: PUSH
12295: LD_VAR 0 1
12299: PPUSH
12300: CALL_OW 274
12304: ST_TO_ADDR
// if not pom then
12305: LD_VAR 0 3
12309: NOT
12310: IFFALSE 12314
// exit ;
12312: GO 12484
// btype := GetBType ( building ) ;
12314: LD_ADDR_VAR 0 5
12318: PUSH
12319: LD_VAR 0 1
12323: PPUSH
12324: CALL_OW 266
12328: ST_TO_ADDR
// if btype = b_armoury then
12329: LD_VAR 0 5
12333: PUSH
12334: LD_INT 4
12336: EQUAL
12337: IFFALSE 12347
// btype := b_barracks ;
12339: LD_ADDR_VAR 0 5
12343: PUSH
12344: LD_INT 5
12346: ST_TO_ADDR
// if btype = b_depot then
12347: LD_VAR 0 5
12351: PUSH
12352: LD_INT 0
12354: EQUAL
12355: IFFALSE 12365
// btype := b_warehouse ;
12357: LD_ADDR_VAR 0 5
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// if btype = b_workshop then
12365: LD_VAR 0 5
12369: PUSH
12370: LD_INT 2
12372: EQUAL
12373: IFFALSE 12383
// btype := b_factory ;
12375: LD_ADDR_VAR 0 5
12379: PUSH
12380: LD_INT 3
12382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12383: LD_ADDR_VAR 0 4
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: LD_VAR 0 1
12397: PPUSH
12398: CALL_OW 248
12402: PPUSH
12403: CALL_OW 450
12407: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12408: LD_ADDR_VAR 0 2
12412: PUSH
12413: LD_VAR 0 3
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: CALL_OW 275
12425: PUSH
12426: LD_VAR 0 4
12430: PUSH
12431: LD_INT 1
12433: ARRAY
12434: GREATEREQUAL
12435: PUSH
12436: LD_VAR 0 3
12440: PPUSH
12441: LD_INT 2
12443: PPUSH
12444: CALL_OW 275
12448: PUSH
12449: LD_VAR 0 4
12453: PUSH
12454: LD_INT 2
12456: ARRAY
12457: GREATEREQUAL
12458: AND
12459: PUSH
12460: LD_VAR 0 3
12464: PPUSH
12465: LD_INT 3
12467: PPUSH
12468: CALL_OW 275
12472: PUSH
12473: LD_VAR 0 4
12477: PUSH
12478: LD_INT 3
12480: ARRAY
12481: GREATEREQUAL
12482: AND
12483: ST_TO_ADDR
// end ;
12484: LD_VAR 0 2
12488: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
12489: LD_INT 0
12491: PPUSH
12492: PPUSH
12493: PPUSH
// pom := GetBase ( building ) ;
12494: LD_ADDR_VAR 0 4
12498: PUSH
12499: LD_VAR 0 1
12503: PPUSH
12504: CALL_OW 274
12508: ST_TO_ADDR
// if not pom then
12509: LD_VAR 0 4
12513: NOT
12514: IFFALSE 12518
// exit ;
12516: GO 12619
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
12518: LD_ADDR_VAR 0 5
12522: PUSH
12523: LD_VAR 0 2
12527: PPUSH
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 248
12537: PPUSH
12538: CALL_OW 450
12542: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
12543: LD_ADDR_VAR 0 3
12547: PUSH
12548: LD_VAR 0 4
12552: PPUSH
12553: LD_INT 1
12555: PPUSH
12556: CALL_OW 275
12560: PUSH
12561: LD_VAR 0 5
12565: PUSH
12566: LD_INT 1
12568: ARRAY
12569: GREATEREQUAL
12570: PUSH
12571: LD_VAR 0 4
12575: PPUSH
12576: LD_INT 2
12578: PPUSH
12579: CALL_OW 275
12583: PUSH
12584: LD_VAR 0 5
12588: PUSH
12589: LD_INT 2
12591: ARRAY
12592: GREATEREQUAL
12593: AND
12594: PUSH
12595: LD_VAR 0 4
12599: PPUSH
12600: LD_INT 3
12602: PPUSH
12603: CALL_OW 275
12607: PUSH
12608: LD_VAR 0 5
12612: PUSH
12613: LD_INT 3
12615: ARRAY
12616: GREATEREQUAL
12617: AND
12618: ST_TO_ADDR
// end ;
12619: LD_VAR 0 3
12623: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
12624: LD_INT 0
12626: PPUSH
12627: PPUSH
12628: PPUSH
12629: PPUSH
12630: PPUSH
12631: PPUSH
12632: PPUSH
12633: PPUSH
12634: PPUSH
12635: PPUSH
12636: PPUSH
// result := false ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_INT 0
12644: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
12645: LD_VAR 0 5
12649: NOT
12650: PUSH
12651: LD_VAR 0 1
12655: NOT
12656: OR
12657: PUSH
12658: LD_VAR 0 2
12662: NOT
12663: OR
12664: PUSH
12665: LD_VAR 0 3
12669: NOT
12670: OR
12671: IFFALSE 12675
// exit ;
12673: GO 13489
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
12675: LD_ADDR_VAR 0 14
12679: PUSH
12680: LD_VAR 0 1
12684: PPUSH
12685: LD_VAR 0 2
12689: PPUSH
12690: LD_VAR 0 3
12694: PPUSH
12695: LD_VAR 0 4
12699: PPUSH
12700: LD_VAR 0 5
12704: PUSH
12705: LD_INT 1
12707: ARRAY
12708: PPUSH
12709: CALL_OW 248
12713: PPUSH
12714: LD_INT 0
12716: PPUSH
12717: CALL 14726 0 6
12721: ST_TO_ADDR
// if not hexes then
12722: LD_VAR 0 14
12726: NOT
12727: IFFALSE 12731
// exit ;
12729: GO 13489
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12731: LD_ADDR_VAR 0 17
12735: PUSH
12736: LD_VAR 0 5
12740: PPUSH
12741: LD_INT 22
12743: PUSH
12744: LD_VAR 0 13
12748: PPUSH
12749: CALL_OW 255
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 2
12760: PUSH
12761: LD_INT 30
12763: PUSH
12764: LD_INT 0
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 30
12773: PUSH
12774: LD_INT 1
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PPUSH
12790: CALL_OW 72
12794: ST_TO_ADDR
// for i = 1 to hexes do
12795: LD_ADDR_VAR 0 9
12799: PUSH
12800: DOUBLE
12801: LD_INT 1
12803: DEC
12804: ST_TO_ADDR
12805: LD_VAR 0 14
12809: PUSH
12810: FOR_TO
12811: IFFALSE 13487
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
12813: LD_ADDR_VAR 0 13
12817: PUSH
12818: LD_VAR 0 14
12822: PUSH
12823: LD_VAR 0 9
12827: ARRAY
12828: PUSH
12829: LD_INT 1
12831: ARRAY
12832: PPUSH
12833: LD_VAR 0 14
12837: PUSH
12838: LD_VAR 0 9
12842: ARRAY
12843: PUSH
12844: LD_INT 2
12846: ARRAY
12847: PPUSH
12848: CALL_OW 428
12852: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
12853: LD_VAR 0 14
12857: PUSH
12858: LD_VAR 0 9
12862: ARRAY
12863: PUSH
12864: LD_INT 1
12866: ARRAY
12867: PPUSH
12868: LD_VAR 0 14
12872: PUSH
12873: LD_VAR 0 9
12877: ARRAY
12878: PUSH
12879: LD_INT 2
12881: ARRAY
12882: PPUSH
12883: CALL_OW 351
12887: PUSH
12888: LD_VAR 0 14
12892: PUSH
12893: LD_VAR 0 9
12897: ARRAY
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: LD_VAR 0 14
12907: PUSH
12908: LD_VAR 0 9
12912: ARRAY
12913: PUSH
12914: LD_INT 2
12916: ARRAY
12917: PPUSH
12918: CALL_OW 488
12922: NOT
12923: OR
12924: PUSH
12925: LD_VAR 0 13
12929: PPUSH
12930: CALL_OW 247
12934: PUSH
12935: LD_INT 3
12937: EQUAL
12938: OR
12939: IFFALSE 12945
// exit ;
12941: POP
12942: POP
12943: GO 13489
// if not tmp then
12945: LD_VAR 0 13
12949: NOT
12950: IFFALSE 12954
// continue ;
12952: GO 12810
// result := true ;
12954: LD_ADDR_VAR 0 8
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
12962: LD_VAR 0 6
12966: PUSH
12967: LD_VAR 0 13
12971: PPUSH
12972: CALL_OW 247
12976: PUSH
12977: LD_INT 2
12979: EQUAL
12980: AND
12981: PUSH
12982: LD_VAR 0 13
12986: PPUSH
12987: CALL_OW 263
12991: PUSH
12992: LD_INT 1
12994: EQUAL
12995: AND
12996: IFFALSE 13160
// begin if IsDrivenBy ( tmp ) then
12998: LD_VAR 0 13
13002: PPUSH
13003: CALL_OW 311
13007: IFFALSE 13011
// continue ;
13009: GO 12810
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
13011: LD_VAR 0 6
13015: PPUSH
13016: LD_INT 3
13018: PUSH
13019: LD_INT 60
13021: PUSH
13022: EMPTY
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 3
13031: PUSH
13032: LD_INT 55
13034: PUSH
13035: EMPTY
13036: LIST
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PPUSH
13046: CALL_OW 72
13050: IFFALSE 13158
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
13052: LD_ADDR_VAR 0 18
13056: PUSH
13057: LD_VAR 0 6
13061: PPUSH
13062: LD_INT 3
13064: PUSH
13065: LD_INT 60
13067: PUSH
13068: EMPTY
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 3
13077: PUSH
13078: LD_INT 55
13080: PUSH
13081: EMPTY
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 72
13096: PUSH
13097: LD_INT 1
13099: ARRAY
13100: ST_TO_ADDR
// if IsInUnit ( driver ) then
13101: LD_VAR 0 18
13105: PPUSH
13106: CALL_OW 310
13110: IFFALSE 13121
// ComExit ( driver ) ;
13112: LD_VAR 0 18
13116: PPUSH
13117: CALL 37854 0 1
// AddComEnterUnit ( driver , tmp ) ;
13121: LD_VAR 0 18
13125: PPUSH
13126: LD_VAR 0 13
13130: PPUSH
13131: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
13135: LD_VAR 0 18
13139: PPUSH
13140: LD_VAR 0 7
13144: PPUSH
13145: CALL_OW 173
// AddComExitVehicle ( driver ) ;
13149: LD_VAR 0 18
13153: PPUSH
13154: CALL_OW 181
// end ; continue ;
13158: GO 12810
// end ; if not cleaners or not tmp in cleaners then
13160: LD_VAR 0 6
13164: NOT
13165: PUSH
13166: LD_VAR 0 13
13170: PUSH
13171: LD_VAR 0 6
13175: IN
13176: NOT
13177: OR
13178: IFFALSE 13485
// begin if dep then
13180: LD_VAR 0 17
13184: IFFALSE 13320
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
13186: LD_ADDR_VAR 0 16
13190: PUSH
13191: LD_VAR 0 17
13195: PUSH
13196: LD_INT 1
13198: ARRAY
13199: PPUSH
13200: CALL_OW 250
13204: PPUSH
13205: LD_VAR 0 17
13209: PUSH
13210: LD_INT 1
13212: ARRAY
13213: PPUSH
13214: CALL_OW 254
13218: PPUSH
13219: LD_INT 5
13221: PPUSH
13222: CALL_OW 272
13226: PUSH
13227: LD_VAR 0 17
13231: PUSH
13232: LD_INT 1
13234: ARRAY
13235: PPUSH
13236: CALL_OW 251
13240: PPUSH
13241: LD_VAR 0 17
13245: PUSH
13246: LD_INT 1
13248: ARRAY
13249: PPUSH
13250: CALL_OW 254
13254: PPUSH
13255: LD_INT 5
13257: PPUSH
13258: CALL_OW 273
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
13267: LD_VAR 0 16
13271: PUSH
13272: LD_INT 1
13274: ARRAY
13275: PPUSH
13276: LD_VAR 0 16
13280: PUSH
13281: LD_INT 2
13283: ARRAY
13284: PPUSH
13285: CALL_OW 488
13289: IFFALSE 13320
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
13291: LD_VAR 0 13
13295: PPUSH
13296: LD_VAR 0 16
13300: PUSH
13301: LD_INT 1
13303: ARRAY
13304: PPUSH
13305: LD_VAR 0 16
13309: PUSH
13310: LD_INT 2
13312: ARRAY
13313: PPUSH
13314: CALL_OW 111
// continue ;
13318: GO 12810
// end ; end ; r := GetDir ( tmp ) ;
13320: LD_ADDR_VAR 0 15
13324: PUSH
13325: LD_VAR 0 13
13329: PPUSH
13330: CALL_OW 254
13334: ST_TO_ADDR
// if r = 5 then
13335: LD_VAR 0 15
13339: PUSH
13340: LD_INT 5
13342: EQUAL
13343: IFFALSE 13353
// r := 0 ;
13345: LD_ADDR_VAR 0 15
13349: PUSH
13350: LD_INT 0
13352: ST_TO_ADDR
// for j = r to 5 do
13353: LD_ADDR_VAR 0 10
13357: PUSH
13358: DOUBLE
13359: LD_VAR 0 15
13363: DEC
13364: ST_TO_ADDR
13365: LD_INT 5
13367: PUSH
13368: FOR_TO
13369: IFFALSE 13483
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
13371: LD_ADDR_VAR 0 11
13375: PUSH
13376: LD_VAR 0 13
13380: PPUSH
13381: CALL_OW 250
13385: PPUSH
13386: LD_VAR 0 10
13390: PPUSH
13391: LD_INT 2
13393: PPUSH
13394: CALL_OW 272
13398: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
13399: LD_ADDR_VAR 0 12
13403: PUSH
13404: LD_VAR 0 13
13408: PPUSH
13409: CALL_OW 251
13413: PPUSH
13414: LD_VAR 0 10
13418: PPUSH
13419: LD_INT 2
13421: PPUSH
13422: CALL_OW 273
13426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
13427: LD_VAR 0 11
13431: PPUSH
13432: LD_VAR 0 12
13436: PPUSH
13437: CALL_OW 488
13441: PUSH
13442: LD_VAR 0 11
13446: PPUSH
13447: LD_VAR 0 12
13451: PPUSH
13452: CALL_OW 428
13456: NOT
13457: AND
13458: IFFALSE 13481
// begin ComMoveXY ( tmp , _x , _y ) ;
13460: LD_VAR 0 13
13464: PPUSH
13465: LD_VAR 0 11
13469: PPUSH
13470: LD_VAR 0 12
13474: PPUSH
13475: CALL_OW 111
// break ;
13479: GO 13483
// end ; end ;
13481: GO 13368
13483: POP
13484: POP
// end ; end ;
13485: GO 12810
13487: POP
13488: POP
// end ;
13489: LD_VAR 0 8
13493: RET
// export function BuildingTechInvented ( side , btype ) ; begin
13494: LD_INT 0
13496: PPUSH
// result := true ;
13497: LD_ADDR_VAR 0 3
13501: PUSH
13502: LD_INT 1
13504: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
13505: LD_VAR 0 2
13509: PUSH
13510: LD_INT 24
13512: DOUBLE
13513: EQUAL
13514: IFTRUE 13524
13516: LD_INT 33
13518: DOUBLE
13519: EQUAL
13520: IFTRUE 13524
13522: GO 13549
13524: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_INT 32
13532: PPUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: CALL_OW 321
13542: PUSH
13543: LD_INT 2
13545: EQUAL
13546: ST_TO_ADDR
13547: GO 13869
13549: LD_INT 20
13551: DOUBLE
13552: EQUAL
13553: IFTRUE 13557
13555: GO 13582
13557: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
13558: LD_ADDR_VAR 0 3
13562: PUSH
13563: LD_INT 6
13565: PPUSH
13566: LD_VAR 0 1
13570: PPUSH
13571: CALL_OW 321
13575: PUSH
13576: LD_INT 2
13578: EQUAL
13579: ST_TO_ADDR
13580: GO 13869
13582: LD_INT 22
13584: DOUBLE
13585: EQUAL
13586: IFTRUE 13596
13588: LD_INT 36
13590: DOUBLE
13591: EQUAL
13592: IFTRUE 13596
13594: GO 13621
13596: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
13597: LD_ADDR_VAR 0 3
13601: PUSH
13602: LD_INT 15
13604: PPUSH
13605: LD_VAR 0 1
13609: PPUSH
13610: CALL_OW 321
13614: PUSH
13615: LD_INT 2
13617: EQUAL
13618: ST_TO_ADDR
13619: GO 13869
13621: LD_INT 30
13623: DOUBLE
13624: EQUAL
13625: IFTRUE 13629
13627: GO 13654
13629: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
13630: LD_ADDR_VAR 0 3
13634: PUSH
13635: LD_INT 20
13637: PPUSH
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 321
13647: PUSH
13648: LD_INT 2
13650: EQUAL
13651: ST_TO_ADDR
13652: GO 13869
13654: LD_INT 28
13656: DOUBLE
13657: EQUAL
13658: IFTRUE 13668
13660: LD_INT 21
13662: DOUBLE
13663: EQUAL
13664: IFTRUE 13668
13666: GO 13693
13668: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
13669: LD_ADDR_VAR 0 3
13673: PUSH
13674: LD_INT 21
13676: PPUSH
13677: LD_VAR 0 1
13681: PPUSH
13682: CALL_OW 321
13686: PUSH
13687: LD_INT 2
13689: EQUAL
13690: ST_TO_ADDR
13691: GO 13869
13693: LD_INT 16
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13728
13701: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
13702: LD_ADDR_VAR 0 3
13706: PUSH
13707: LD_EXP 29
13711: PPUSH
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 321
13721: PUSH
13722: LD_INT 2
13724: EQUAL
13725: ST_TO_ADDR
13726: GO 13869
13728: LD_INT 19
13730: DOUBLE
13731: EQUAL
13732: IFTRUE 13742
13734: LD_INT 23
13736: DOUBLE
13737: EQUAL
13738: IFTRUE 13742
13740: GO 13769
13742: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
13743: LD_ADDR_VAR 0 3
13747: PUSH
13748: LD_EXP 28
13752: PPUSH
13753: LD_VAR 0 1
13757: PPUSH
13758: CALL_OW 321
13762: PUSH
13763: LD_INT 2
13765: EQUAL
13766: ST_TO_ADDR
13767: GO 13869
13769: LD_INT 17
13771: DOUBLE
13772: EQUAL
13773: IFTRUE 13777
13775: GO 13802
13777: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
13778: LD_ADDR_VAR 0 3
13782: PUSH
13783: LD_INT 39
13785: PPUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: CALL_OW 321
13795: PUSH
13796: LD_INT 2
13798: EQUAL
13799: ST_TO_ADDR
13800: GO 13869
13802: LD_INT 18
13804: DOUBLE
13805: EQUAL
13806: IFTRUE 13810
13808: GO 13835
13810: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
13811: LD_ADDR_VAR 0 3
13815: PUSH
13816: LD_INT 40
13818: PPUSH
13819: LD_VAR 0 1
13823: PPUSH
13824: CALL_OW 321
13828: PUSH
13829: LD_INT 2
13831: EQUAL
13832: ST_TO_ADDR
13833: GO 13869
13835: LD_INT 27
13837: DOUBLE
13838: EQUAL
13839: IFTRUE 13843
13841: GO 13868
13843: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
13844: LD_ADDR_VAR 0 3
13848: PUSH
13849: LD_INT 35
13851: PPUSH
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 321
13861: PUSH
13862: LD_INT 2
13864: EQUAL
13865: ST_TO_ADDR
13866: GO 13869
13868: POP
// end ;
13869: LD_VAR 0 3
13873: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
13874: LD_INT 0
13876: PPUSH
13877: PPUSH
13878: PPUSH
13879: PPUSH
13880: PPUSH
13881: PPUSH
13882: PPUSH
13883: PPUSH
13884: PPUSH
13885: PPUSH
13886: PPUSH
// result := false ;
13887: LD_ADDR_VAR 0 6
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
13895: LD_VAR 0 1
13899: NOT
13900: PUSH
13901: LD_VAR 0 1
13905: PPUSH
13906: CALL_OW 266
13910: PUSH
13911: LD_INT 0
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: IN
13921: NOT
13922: OR
13923: PUSH
13924: LD_VAR 0 2
13928: NOT
13929: OR
13930: PUSH
13931: LD_VAR 0 5
13935: PUSH
13936: LD_INT 0
13938: PUSH
13939: LD_INT 1
13941: PUSH
13942: LD_INT 2
13944: PUSH
13945: LD_INT 3
13947: PUSH
13948: LD_INT 4
13950: PUSH
13951: LD_INT 5
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: IN
13962: NOT
13963: OR
13964: PUSH
13965: LD_VAR 0 3
13969: PPUSH
13970: LD_VAR 0 4
13974: PPUSH
13975: CALL_OW 488
13979: NOT
13980: OR
13981: IFFALSE 13985
// exit ;
13983: GO 14721
// side := GetSide ( depot ) ;
13985: LD_ADDR_VAR 0 9
13989: PUSH
13990: LD_VAR 0 1
13994: PPUSH
13995: CALL_OW 255
13999: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
14000: LD_VAR 0 9
14004: PPUSH
14005: LD_VAR 0 2
14009: PPUSH
14010: CALL 13494 0 2
14014: NOT
14015: IFFALSE 14019
// exit ;
14017: GO 14721
// pom := GetBase ( depot ) ;
14019: LD_ADDR_VAR 0 10
14023: PUSH
14024: LD_VAR 0 1
14028: PPUSH
14029: CALL_OW 274
14033: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
14034: LD_ADDR_VAR 0 11
14038: PUSH
14039: LD_VAR 0 2
14043: PPUSH
14044: LD_VAR 0 1
14048: PPUSH
14049: CALL_OW 248
14053: PPUSH
14054: CALL_OW 450
14058: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
14059: LD_VAR 0 10
14063: PPUSH
14064: LD_INT 1
14066: PPUSH
14067: CALL_OW 275
14071: PUSH
14072: LD_VAR 0 11
14076: PUSH
14077: LD_INT 1
14079: ARRAY
14080: GREATEREQUAL
14081: PUSH
14082: LD_VAR 0 10
14086: PPUSH
14087: LD_INT 2
14089: PPUSH
14090: CALL_OW 275
14094: PUSH
14095: LD_VAR 0 11
14099: PUSH
14100: LD_INT 2
14102: ARRAY
14103: GREATEREQUAL
14104: AND
14105: PUSH
14106: LD_VAR 0 10
14110: PPUSH
14111: LD_INT 3
14113: PPUSH
14114: CALL_OW 275
14118: PUSH
14119: LD_VAR 0 11
14123: PUSH
14124: LD_INT 3
14126: ARRAY
14127: GREATEREQUAL
14128: AND
14129: NOT
14130: IFFALSE 14134
// exit ;
14132: GO 14721
// if GetBType ( depot ) = b_depot then
14134: LD_VAR 0 1
14138: PPUSH
14139: CALL_OW 266
14143: PUSH
14144: LD_INT 0
14146: EQUAL
14147: IFFALSE 14159
// dist := 28 else
14149: LD_ADDR_VAR 0 14
14153: PUSH
14154: LD_INT 28
14156: ST_TO_ADDR
14157: GO 14167
// dist := 36 ;
14159: LD_ADDR_VAR 0 14
14163: PUSH
14164: LD_INT 36
14166: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
14167: LD_VAR 0 1
14171: PPUSH
14172: LD_VAR 0 3
14176: PPUSH
14177: LD_VAR 0 4
14181: PPUSH
14182: CALL_OW 297
14186: PUSH
14187: LD_VAR 0 14
14191: GREATER
14192: IFFALSE 14196
// exit ;
14194: GO 14721
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
14196: LD_ADDR_VAR 0 12
14200: PUSH
14201: LD_VAR 0 2
14205: PPUSH
14206: LD_VAR 0 3
14210: PPUSH
14211: LD_VAR 0 4
14215: PPUSH
14216: LD_VAR 0 5
14220: PPUSH
14221: LD_VAR 0 1
14225: PPUSH
14226: CALL_OW 248
14230: PPUSH
14231: LD_INT 0
14233: PPUSH
14234: CALL 14726 0 6
14238: ST_TO_ADDR
// if not hexes then
14239: LD_VAR 0 12
14243: NOT
14244: IFFALSE 14248
// exit ;
14246: GO 14721
// hex := GetHexInfo ( x , y ) ;
14248: LD_ADDR_VAR 0 15
14252: PUSH
14253: LD_VAR 0 3
14257: PPUSH
14258: LD_VAR 0 4
14262: PPUSH
14263: CALL_OW 546
14267: ST_TO_ADDR
// if hex [ 1 ] then
14268: LD_VAR 0 15
14272: PUSH
14273: LD_INT 1
14275: ARRAY
14276: IFFALSE 14280
// exit ;
14278: GO 14721
// height := hex [ 2 ] ;
14280: LD_ADDR_VAR 0 13
14284: PUSH
14285: LD_VAR 0 15
14289: PUSH
14290: LD_INT 2
14292: ARRAY
14293: ST_TO_ADDR
// for i = 1 to hexes do
14294: LD_ADDR_VAR 0 7
14298: PUSH
14299: DOUBLE
14300: LD_INT 1
14302: DEC
14303: ST_TO_ADDR
14304: LD_VAR 0 12
14308: PUSH
14309: FOR_TO
14310: IFFALSE 14640
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
14312: LD_VAR 0 12
14316: PUSH
14317: LD_VAR 0 7
14321: ARRAY
14322: PUSH
14323: LD_INT 1
14325: ARRAY
14326: PPUSH
14327: LD_VAR 0 12
14331: PUSH
14332: LD_VAR 0 7
14336: ARRAY
14337: PUSH
14338: LD_INT 2
14340: ARRAY
14341: PPUSH
14342: CALL_OW 488
14346: NOT
14347: PUSH
14348: LD_VAR 0 12
14352: PUSH
14353: LD_VAR 0 7
14357: ARRAY
14358: PUSH
14359: LD_INT 1
14361: ARRAY
14362: PPUSH
14363: LD_VAR 0 12
14367: PUSH
14368: LD_VAR 0 7
14372: ARRAY
14373: PUSH
14374: LD_INT 2
14376: ARRAY
14377: PPUSH
14378: CALL_OW 428
14382: PUSH
14383: LD_INT 0
14385: GREATER
14386: OR
14387: PUSH
14388: LD_VAR 0 12
14392: PUSH
14393: LD_VAR 0 7
14397: ARRAY
14398: PUSH
14399: LD_INT 1
14401: ARRAY
14402: PPUSH
14403: LD_VAR 0 12
14407: PUSH
14408: LD_VAR 0 7
14412: ARRAY
14413: PUSH
14414: LD_INT 2
14416: ARRAY
14417: PPUSH
14418: CALL_OW 351
14422: OR
14423: IFFALSE 14429
// exit ;
14425: POP
14426: POP
14427: GO 14721
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14429: LD_ADDR_VAR 0 8
14433: PUSH
14434: LD_VAR 0 12
14438: PUSH
14439: LD_VAR 0 7
14443: ARRAY
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PPUSH
14449: LD_VAR 0 12
14453: PUSH
14454: LD_VAR 0 7
14458: ARRAY
14459: PUSH
14460: LD_INT 2
14462: ARRAY
14463: PPUSH
14464: CALL_OW 546
14468: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
14469: LD_VAR 0 8
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PUSH
14478: LD_VAR 0 8
14482: PUSH
14483: LD_INT 2
14485: ARRAY
14486: PUSH
14487: LD_VAR 0 13
14491: PUSH
14492: LD_INT 2
14494: PLUS
14495: GREATER
14496: OR
14497: PUSH
14498: LD_VAR 0 8
14502: PUSH
14503: LD_INT 2
14505: ARRAY
14506: PUSH
14507: LD_VAR 0 13
14511: PUSH
14512: LD_INT 2
14514: MINUS
14515: LESS
14516: OR
14517: PUSH
14518: LD_VAR 0 8
14522: PUSH
14523: LD_INT 3
14525: ARRAY
14526: PUSH
14527: LD_INT 0
14529: PUSH
14530: LD_INT 8
14532: PUSH
14533: LD_INT 9
14535: PUSH
14536: LD_INT 10
14538: PUSH
14539: LD_INT 11
14541: PUSH
14542: LD_INT 12
14544: PUSH
14545: LD_INT 13
14547: PUSH
14548: LD_INT 16
14550: PUSH
14551: LD_INT 17
14553: PUSH
14554: LD_INT 18
14556: PUSH
14557: LD_INT 19
14559: PUSH
14560: LD_INT 20
14562: PUSH
14563: LD_INT 21
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: IN
14581: NOT
14582: OR
14583: PUSH
14584: LD_VAR 0 8
14588: PUSH
14589: LD_INT 5
14591: ARRAY
14592: NOT
14593: OR
14594: PUSH
14595: LD_VAR 0 8
14599: PUSH
14600: LD_INT 6
14602: ARRAY
14603: PUSH
14604: LD_INT 1
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: LD_INT 7
14612: PUSH
14613: LD_INT 9
14615: PUSH
14616: LD_INT 10
14618: PUSH
14619: LD_INT 11
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: IN
14630: NOT
14631: OR
14632: IFFALSE 14638
// exit ;
14634: POP
14635: POP
14636: GO 14721
// end ;
14638: GO 14309
14640: POP
14641: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
14642: LD_VAR 0 9
14646: PPUSH
14647: LD_VAR 0 3
14651: PPUSH
14652: LD_VAR 0 4
14656: PPUSH
14657: LD_INT 20
14659: PPUSH
14660: CALL 6667 0 4
14664: PUSH
14665: LD_INT 4
14667: ARRAY
14668: IFFALSE 14672
// exit ;
14670: GO 14721
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
14672: LD_VAR 0 2
14676: PUSH
14677: LD_INT 29
14679: PUSH
14680: LD_INT 30
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: IN
14687: PUSH
14688: LD_VAR 0 3
14692: PPUSH
14693: LD_VAR 0 4
14697: PPUSH
14698: LD_VAR 0 9
14702: PPUSH
14703: CALL_OW 440
14707: NOT
14708: AND
14709: IFFALSE 14713
// exit ;
14711: GO 14721
// result := true ;
14713: LD_ADDR_VAR 0 6
14717: PUSH
14718: LD_INT 1
14720: ST_TO_ADDR
// end ;
14721: LD_VAR 0 6
14725: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
14726: LD_INT 0
14728: PPUSH
14729: PPUSH
14730: PPUSH
14731: PPUSH
14732: PPUSH
14733: PPUSH
14734: PPUSH
14735: PPUSH
14736: PPUSH
14737: PPUSH
14738: PPUSH
14739: PPUSH
14740: PPUSH
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
14748: PPUSH
14749: PPUSH
14750: PPUSH
14751: PPUSH
14752: PPUSH
14753: PPUSH
14754: PPUSH
14755: PPUSH
14756: PPUSH
14757: PPUSH
14758: PPUSH
14759: PPUSH
14760: PPUSH
14761: PPUSH
14762: PPUSH
14763: PPUSH
14764: PPUSH
14765: PPUSH
14766: PPUSH
14767: PPUSH
14768: PPUSH
14769: PPUSH
14770: PPUSH
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
14776: PPUSH
14777: PPUSH
14778: PPUSH
14779: PPUSH
14780: PPUSH
14781: PPUSH
14782: PPUSH
14783: PPUSH
14784: PPUSH
14785: PPUSH
// result = [ ] ;
14786: LD_ADDR_VAR 0 7
14790: PUSH
14791: EMPTY
14792: ST_TO_ADDR
// temp_list = [ ] ;
14793: LD_ADDR_VAR 0 9
14797: PUSH
14798: EMPTY
14799: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
14800: LD_VAR 0 4
14804: PUSH
14805: LD_INT 0
14807: PUSH
14808: LD_INT 1
14810: PUSH
14811: LD_INT 2
14813: PUSH
14814: LD_INT 3
14816: PUSH
14817: LD_INT 4
14819: PUSH
14820: LD_INT 5
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: IN
14831: NOT
14832: PUSH
14833: LD_VAR 0 1
14837: PUSH
14838: LD_INT 0
14840: PUSH
14841: LD_INT 1
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: IN
14848: PUSH
14849: LD_VAR 0 5
14853: PUSH
14854: LD_INT 1
14856: PUSH
14857: LD_INT 2
14859: PUSH
14860: LD_INT 3
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: LIST
14867: IN
14868: NOT
14869: AND
14870: OR
14871: IFFALSE 14875
// exit ;
14873: GO 33266
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
14875: LD_VAR 0 1
14879: PUSH
14880: LD_INT 6
14882: PUSH
14883: LD_INT 7
14885: PUSH
14886: LD_INT 8
14888: PUSH
14889: LD_INT 13
14891: PUSH
14892: LD_INT 12
14894: PUSH
14895: LD_INT 15
14897: PUSH
14898: LD_INT 11
14900: PUSH
14901: LD_INT 14
14903: PUSH
14904: LD_INT 10
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: IN
14918: IFFALSE 14928
// btype = b_lab ;
14920: LD_ADDR_VAR 0 1
14924: PUSH
14925: LD_INT 6
14927: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
14928: LD_VAR 0 6
14932: PUSH
14933: LD_INT 0
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: LD_INT 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: IN
14947: NOT
14948: PUSH
14949: LD_VAR 0 1
14953: PUSH
14954: LD_INT 0
14956: PUSH
14957: LD_INT 1
14959: PUSH
14960: LD_INT 2
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: LD_INT 6
14968: PUSH
14969: LD_INT 36
14971: PUSH
14972: LD_INT 4
14974: PUSH
14975: LD_INT 5
14977: PUSH
14978: LD_INT 31
14980: PUSH
14981: LD_INT 32
14983: PUSH
14984: LD_INT 33
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: IN
15000: NOT
15001: PUSH
15002: LD_VAR 0 6
15006: PUSH
15007: LD_INT 1
15009: EQUAL
15010: AND
15011: OR
15012: PUSH
15013: LD_VAR 0 1
15017: PUSH
15018: LD_INT 2
15020: PUSH
15021: LD_INT 3
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: IN
15028: NOT
15029: PUSH
15030: LD_VAR 0 6
15034: PUSH
15035: LD_INT 2
15037: EQUAL
15038: AND
15039: OR
15040: IFFALSE 15050
// mode = 0 ;
15042: LD_ADDR_VAR 0 6
15046: PUSH
15047: LD_INT 0
15049: ST_TO_ADDR
// case mode of 0 :
15050: LD_VAR 0 6
15054: PUSH
15055: LD_INT 0
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 26516
15063: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
15064: LD_ADDR_VAR 0 11
15068: PUSH
15069: LD_INT 0
15071: PUSH
15072: LD_INT 0
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 0
15081: PUSH
15082: LD_INT 1
15084: NEG
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: LD_INT 0
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: LD_INT 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 0
15112: PUSH
15113: LD_INT 1
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 1
15122: NEG
15123: PUSH
15124: LD_INT 0
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 1
15133: NEG
15134: PUSH
15135: LD_INT 1
15137: NEG
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 1
15145: NEG
15146: PUSH
15147: LD_INT 2
15149: NEG
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 0
15157: PUSH
15158: LD_INT 2
15160: NEG
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 1
15168: PUSH
15169: LD_INT 1
15171: NEG
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 1
15179: PUSH
15180: LD_INT 2
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 0
15189: PUSH
15190: LD_INT 2
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 1
15199: NEG
15200: PUSH
15201: LD_INT 1
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PUSH
15208: LD_INT 1
15210: PUSH
15211: LD_INT 3
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PUSH
15218: LD_INT 0
15220: PUSH
15221: LD_INT 3
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 1
15230: NEG
15231: PUSH
15232: LD_INT 2
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
15257: LD_ADDR_VAR 0 12
15261: PUSH
15262: LD_INT 0
15264: PUSH
15265: LD_INT 0
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: LD_INT 0
15274: PUSH
15275: LD_INT 1
15277: NEG
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: PUSH
15283: LD_INT 1
15285: PUSH
15286: LD_INT 0
15288: PUSH
15289: EMPTY
15290: LIST
15291: LIST
15292: PUSH
15293: LD_INT 1
15295: PUSH
15296: LD_INT 1
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 0
15305: PUSH
15306: LD_INT 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 1
15315: NEG
15316: PUSH
15317: LD_INT 0
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 1
15326: NEG
15327: PUSH
15328: LD_INT 1
15330: NEG
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: LD_INT 1
15338: PUSH
15339: LD_INT 1
15341: NEG
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 2
15349: PUSH
15350: LD_INT 0
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 2
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: NEG
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 2
15380: NEG
15381: PUSH
15382: LD_INT 0
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 2
15391: NEG
15392: PUSH
15393: LD_INT 1
15395: NEG
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 2
15403: NEG
15404: PUSH
15405: LD_INT 1
15407: PUSH
15408: EMPTY
15409: LIST
15410: LIST
15411: PUSH
15412: LD_INT 3
15414: NEG
15415: PUSH
15416: LD_INT 0
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 3
15425: NEG
15426: PUSH
15427: LD_INT 1
15429: NEG
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
15453: LD_ADDR_VAR 0 13
15457: PUSH
15458: LD_INT 0
15460: PUSH
15461: LD_INT 0
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 0
15470: PUSH
15471: LD_INT 1
15473: NEG
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 1
15481: PUSH
15482: LD_INT 0
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 1
15491: PUSH
15492: LD_INT 1
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 0
15501: PUSH
15502: LD_INT 1
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 1
15511: NEG
15512: PUSH
15513: LD_INT 0
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 1
15522: NEG
15523: PUSH
15524: LD_INT 1
15526: NEG
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 1
15534: NEG
15535: PUSH
15536: LD_INT 2
15538: NEG
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 2
15546: PUSH
15547: LD_INT 1
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 2
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 2
15576: NEG
15577: PUSH
15578: LD_INT 1
15580: NEG
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 2
15588: NEG
15589: PUSH
15590: LD_INT 2
15592: NEG
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 2
15600: NEG
15601: PUSH
15602: LD_INT 3
15604: NEG
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 3
15612: NEG
15613: PUSH
15614: LD_INT 2
15616: NEG
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 3
15624: NEG
15625: PUSH
15626: LD_INT 3
15628: NEG
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
15652: LD_ADDR_VAR 0 14
15656: PUSH
15657: LD_INT 0
15659: PUSH
15660: LD_INT 0
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 0
15669: PUSH
15670: LD_INT 1
15672: NEG
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PUSH
15678: LD_INT 1
15680: PUSH
15681: LD_INT 0
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 1
15690: PUSH
15691: LD_INT 1
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 0
15700: PUSH
15701: LD_INT 1
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 1
15710: NEG
15711: PUSH
15712: LD_INT 0
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 1
15721: NEG
15722: PUSH
15723: LD_INT 1
15725: NEG
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 1
15733: NEG
15734: PUSH
15735: LD_INT 2
15737: NEG
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 0
15745: PUSH
15746: LD_INT 2
15748: NEG
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 1
15756: PUSH
15757: LD_INT 1
15759: NEG
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 1
15767: PUSH
15768: LD_INT 2
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 0
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 1
15787: NEG
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 1
15798: NEG
15799: PUSH
15800: LD_INT 3
15802: NEG
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 0
15810: PUSH
15811: LD_INT 3
15813: NEG
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PUSH
15819: LD_INT 1
15821: PUSH
15822: LD_INT 2
15824: NEG
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
15848: LD_ADDR_VAR 0 15
15852: PUSH
15853: LD_INT 0
15855: PUSH
15856: LD_INT 0
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PUSH
15863: LD_INT 0
15865: PUSH
15866: LD_INT 1
15868: NEG
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 1
15876: PUSH
15877: LD_INT 0
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PUSH
15884: LD_INT 1
15886: PUSH
15887: LD_INT 1
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 0
15896: PUSH
15897: LD_INT 1
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 1
15906: NEG
15907: PUSH
15908: LD_INT 0
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 1
15917: NEG
15918: PUSH
15919: LD_INT 1
15921: NEG
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 1
15929: PUSH
15930: LD_INT 1
15932: NEG
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 0
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: LD_INT 1
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 1
15960: NEG
15961: PUSH
15962: LD_INT 1
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 2
15971: NEG
15972: PUSH
15973: LD_INT 0
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 2
15982: NEG
15983: PUSH
15984: LD_INT 1
15986: NEG
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: LD_INT 1
15997: NEG
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 3
16005: PUSH
16006: LD_INT 0
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 3
16015: PUSH
16016: LD_INT 1
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
16041: LD_ADDR_VAR 0 16
16045: PUSH
16046: LD_INT 0
16048: PUSH
16049: LD_INT 0
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 0
16058: PUSH
16059: LD_INT 1
16061: NEG
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 1
16069: PUSH
16070: LD_INT 0
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 1
16079: PUSH
16080: LD_INT 1
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 0
16089: PUSH
16090: LD_INT 1
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: LD_INT 1
16099: NEG
16100: PUSH
16101: LD_INT 0
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 1
16110: NEG
16111: PUSH
16112: LD_INT 1
16114: NEG
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 1
16122: NEG
16123: PUSH
16124: LD_INT 2
16126: NEG
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: LD_INT 2
16134: PUSH
16135: LD_INT 1
16137: PUSH
16138: EMPTY
16139: LIST
16140: LIST
16141: PUSH
16142: LD_INT 2
16144: PUSH
16145: LD_INT 2
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: LD_INT 2
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 2
16164: NEG
16165: PUSH
16166: LD_INT 1
16168: NEG
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PUSH
16174: LD_INT 2
16176: NEG
16177: PUSH
16178: LD_INT 2
16180: NEG
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: LD_INT 3
16188: PUSH
16189: LD_INT 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 3
16198: PUSH
16199: LD_INT 3
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: LD_INT 3
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16234: LD_ADDR_VAR 0 17
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: LD_INT 0
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 0
16251: PUSH
16252: LD_INT 1
16254: NEG
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: LD_INT 0
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 0
16282: PUSH
16283: LD_INT 1
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 1
16292: NEG
16293: PUSH
16294: LD_INT 0
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PUSH
16301: LD_INT 1
16303: NEG
16304: PUSH
16305: LD_INT 1
16307: NEG
16308: PUSH
16309: EMPTY
16310: LIST
16311: LIST
16312: PUSH
16313: LD_INT 1
16315: NEG
16316: PUSH
16317: LD_INT 2
16319: NEG
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: LD_INT 0
16327: PUSH
16328: LD_INT 2
16330: NEG
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PUSH
16336: LD_INT 1
16338: PUSH
16339: LD_INT 1
16341: NEG
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 0
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 2
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: LD_INT 2
16369: PUSH
16370: LD_INT 2
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 1
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 0
16389: PUSH
16390: LD_INT 2
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 1
16399: NEG
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: LD_INT 2
16410: NEG
16411: PUSH
16412: LD_INT 0
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: LD_INT 2
16421: NEG
16422: PUSH
16423: LD_INT 1
16425: NEG
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: PUSH
16431: LD_INT 2
16433: NEG
16434: PUSH
16435: LD_INT 2
16437: NEG
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16464: LD_ADDR_VAR 0 18
16468: PUSH
16469: LD_INT 0
16471: PUSH
16472: LD_INT 0
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 0
16481: PUSH
16482: LD_INT 1
16484: NEG
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 1
16492: PUSH
16493: LD_INT 0
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 1
16502: PUSH
16503: LD_INT 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 0
16512: PUSH
16513: LD_INT 1
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 1
16522: NEG
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 1
16533: NEG
16534: PUSH
16535: LD_INT 1
16537: NEG
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 1
16545: NEG
16546: PUSH
16547: LD_INT 2
16549: NEG
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 0
16557: PUSH
16558: LD_INT 2
16560: NEG
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: PUSH
16566: LD_INT 1
16568: PUSH
16569: LD_INT 1
16571: NEG
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 2
16579: PUSH
16580: LD_INT 0
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: PUSH
16587: LD_INT 2
16589: PUSH
16590: LD_INT 1
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 2
16599: PUSH
16600: LD_INT 2
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 1
16609: PUSH
16610: LD_INT 2
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 0
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 1
16629: NEG
16630: PUSH
16631: LD_INT 1
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 2
16640: NEG
16641: PUSH
16642: LD_INT 0
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 2
16651: NEG
16652: PUSH
16653: LD_INT 1
16655: NEG
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 2
16663: NEG
16664: PUSH
16665: LD_INT 2
16667: NEG
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16694: LD_ADDR_VAR 0 19
16698: PUSH
16699: LD_INT 0
16701: PUSH
16702: LD_INT 0
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 0
16711: PUSH
16712: LD_INT 1
16714: NEG
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PUSH
16720: LD_INT 1
16722: PUSH
16723: LD_INT 0
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PUSH
16730: LD_INT 1
16732: PUSH
16733: LD_INT 1
16735: PUSH
16736: EMPTY
16737: LIST
16738: LIST
16739: PUSH
16740: LD_INT 0
16742: PUSH
16743: LD_INT 1
16745: PUSH
16746: EMPTY
16747: LIST
16748: LIST
16749: PUSH
16750: LD_INT 1
16752: NEG
16753: PUSH
16754: LD_INT 0
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: PUSH
16761: LD_INT 1
16763: NEG
16764: PUSH
16765: LD_INT 1
16767: NEG
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: LD_INT 1
16775: NEG
16776: PUSH
16777: LD_INT 2
16779: NEG
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 0
16787: PUSH
16788: LD_INT 2
16790: NEG
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: PUSH
16799: LD_INT 1
16801: NEG
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: LD_INT 0
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 2
16829: PUSH
16830: LD_INT 2
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 1
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: LD_INT 0
16849: PUSH
16850: LD_INT 2
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 1
16859: NEG
16860: PUSH
16861: LD_INT 1
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 2
16870: NEG
16871: PUSH
16872: LD_INT 0
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 2
16881: NEG
16882: PUSH
16883: LD_INT 1
16885: NEG
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 2
16893: NEG
16894: PUSH
16895: LD_INT 2
16897: NEG
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
16924: LD_ADDR_VAR 0 20
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: LD_INT 0
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 0
16941: PUSH
16942: LD_INT 1
16944: NEG
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: LD_INT 0
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: LD_INT 1
16962: PUSH
16963: LD_INT 1
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 0
16972: PUSH
16973: LD_INT 1
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: LD_INT 1
16982: NEG
16983: PUSH
16984: LD_INT 0
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 1
16993: NEG
16994: PUSH
16995: LD_INT 1
16997: NEG
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 1
17005: NEG
17006: PUSH
17007: LD_INT 2
17009: NEG
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 0
17017: PUSH
17018: LD_INT 2
17020: NEG
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: LD_INT 1
17031: NEG
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 2
17039: PUSH
17040: LD_INT 0
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: LD_INT 2
17049: PUSH
17050: LD_INT 1
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: LD_INT 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 1
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: LD_INT 0
17079: PUSH
17080: LD_INT 2
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PUSH
17087: LD_INT 1
17089: NEG
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 2
17100: NEG
17101: PUSH
17102: LD_INT 0
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 2
17111: NEG
17112: PUSH
17113: LD_INT 1
17115: NEG
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 2
17123: NEG
17124: PUSH
17125: LD_INT 2
17127: NEG
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17154: LD_ADDR_VAR 0 21
17158: PUSH
17159: LD_INT 0
17161: PUSH
17162: LD_INT 0
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 0
17171: PUSH
17172: LD_INT 1
17174: NEG
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 1
17182: PUSH
17183: LD_INT 0
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 1
17192: PUSH
17193: LD_INT 1
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: LD_INT 1
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 1
17212: NEG
17213: PUSH
17214: LD_INT 0
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 1
17223: NEG
17224: PUSH
17225: LD_INT 1
17227: NEG
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 1
17235: NEG
17236: PUSH
17237: LD_INT 2
17239: NEG
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 0
17247: PUSH
17248: LD_INT 2
17250: NEG
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: LD_INT 1
17258: PUSH
17259: LD_INT 1
17261: NEG
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: LD_INT 2
17269: PUSH
17270: LD_INT 0
17272: PUSH
17273: EMPTY
17274: LIST
17275: LIST
17276: PUSH
17277: LD_INT 2
17279: PUSH
17280: LD_INT 1
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 2
17289: PUSH
17290: LD_INT 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: LD_INT 2
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: PUSH
17307: LD_INT 0
17309: PUSH
17310: LD_INT 2
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 1
17319: NEG
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PUSH
17328: LD_INT 2
17330: NEG
17331: PUSH
17332: LD_INT 0
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: PUSH
17339: LD_INT 2
17341: NEG
17342: PUSH
17343: LD_INT 1
17345: NEG
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 2
17353: NEG
17354: PUSH
17355: LD_INT 2
17357: NEG
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
17384: LD_ADDR_VAR 0 22
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: LD_INT 0
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 0
17401: PUSH
17402: LD_INT 1
17404: NEG
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: LD_INT 0
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 1
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 0
17432: PUSH
17433: LD_INT 1
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 1
17442: NEG
17443: PUSH
17444: LD_INT 0
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 1
17453: NEG
17454: PUSH
17455: LD_INT 1
17457: NEG
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 1
17465: NEG
17466: PUSH
17467: LD_INT 2
17469: NEG
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 0
17477: PUSH
17478: LD_INT 2
17480: NEG
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 1
17488: PUSH
17489: LD_INT 1
17491: NEG
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: LD_INT 2
17499: PUSH
17500: LD_INT 0
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 1
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 2
17519: PUSH
17520: LD_INT 2
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: LD_INT 2
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: PUSH
17537: LD_INT 0
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 1
17549: NEG
17550: PUSH
17551: LD_INT 1
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 2
17560: NEG
17561: PUSH
17562: LD_INT 0
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 2
17571: NEG
17572: PUSH
17573: LD_INT 1
17575: NEG
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: LD_INT 2
17583: NEG
17584: PUSH
17585: LD_INT 2
17587: NEG
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
17614: LD_ADDR_VAR 0 23
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: LD_INT 0
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 0
17631: PUSH
17632: LD_INT 1
17634: NEG
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 1
17652: PUSH
17653: LD_INT 1
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: PUSH
17660: LD_INT 0
17662: PUSH
17663: LD_INT 1
17665: PUSH
17666: EMPTY
17667: LIST
17668: LIST
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: LD_INT 0
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 1
17683: NEG
17684: PUSH
17685: LD_INT 1
17687: NEG
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 1
17695: NEG
17696: PUSH
17697: LD_INT 2
17699: NEG
17700: PUSH
17701: EMPTY
17702: LIST
17703: LIST
17704: PUSH
17705: LD_INT 0
17707: PUSH
17708: LD_INT 2
17710: NEG
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 1
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 2
17729: PUSH
17730: LD_INT 0
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 1
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 1
17759: PUSH
17760: LD_INT 2
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 0
17769: PUSH
17770: LD_INT 2
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 1
17779: NEG
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 2
17790: NEG
17791: PUSH
17792: LD_INT 0
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 2
17801: NEG
17802: PUSH
17803: LD_INT 1
17805: NEG
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: NEG
17814: PUSH
17815: LD_INT 2
17817: NEG
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 2
17825: NEG
17826: PUSH
17827: LD_INT 3
17829: NEG
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: LD_INT 3
17841: NEG
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 1
17849: PUSH
17850: LD_INT 2
17852: NEG
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PUSH
17858: LD_INT 2
17860: PUSH
17861: LD_INT 1
17863: NEG
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
17894: LD_ADDR_VAR 0 24
17898: PUSH
17899: LD_INT 0
17901: PUSH
17902: LD_INT 0
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 0
17911: PUSH
17912: LD_INT 1
17914: NEG
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: LD_INT 0
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 0
17942: PUSH
17943: LD_INT 1
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: NEG
17953: PUSH
17954: LD_INT 0
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 1
17963: NEG
17964: PUSH
17965: LD_INT 1
17967: NEG
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 1
17975: NEG
17976: PUSH
17977: LD_INT 2
17979: NEG
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 0
17987: PUSH
17988: LD_INT 2
17990: NEG
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: LD_INT 1
18001: NEG
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 2
18009: PUSH
18010: LD_INT 0
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 2
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 1
18039: PUSH
18040: LD_INT 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 0
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 1
18059: NEG
18060: PUSH
18061: LD_INT 1
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PUSH
18068: LD_INT 2
18070: NEG
18071: PUSH
18072: LD_INT 0
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 2
18081: NEG
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 2
18093: NEG
18094: PUSH
18095: LD_INT 2
18097: NEG
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 1
18105: PUSH
18106: LD_INT 2
18108: NEG
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: LD_INT 1
18119: NEG
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 3
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 3
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
18170: LD_ADDR_VAR 0 25
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: LD_INT 0
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 0
18187: PUSH
18188: LD_INT 1
18190: NEG
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 1
18198: PUSH
18199: LD_INT 0
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: PUSH
18209: LD_INT 1
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: LD_INT 0
18218: PUSH
18219: LD_INT 1
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PUSH
18226: LD_INT 1
18228: NEG
18229: PUSH
18230: LD_INT 0
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: LD_INT 1
18239: NEG
18240: PUSH
18241: LD_INT 1
18243: NEG
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: LD_INT 1
18251: NEG
18252: PUSH
18253: LD_INT 2
18255: NEG
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PUSH
18261: LD_INT 0
18263: PUSH
18264: LD_INT 2
18266: NEG
18267: PUSH
18268: EMPTY
18269: LIST
18270: LIST
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 1
18277: NEG
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: LD_INT 2
18285: PUSH
18286: LD_INT 0
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 2
18295: PUSH
18296: LD_INT 1
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: PUSH
18306: LD_INT 2
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 1
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 0
18325: PUSH
18326: LD_INT 2
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 1
18335: NEG
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 2
18346: NEG
18347: PUSH
18348: LD_INT 0
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 2
18357: NEG
18358: PUSH
18359: LD_INT 1
18361: NEG
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 2
18369: NEG
18370: PUSH
18371: LD_INT 2
18373: NEG
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 3
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 3
18391: PUSH
18392: LD_INT 2
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 2
18401: PUSH
18402: LD_INT 3
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 1
18411: PUSH
18412: LD_INT 3
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
18444: LD_ADDR_VAR 0 26
18448: PUSH
18449: LD_INT 0
18451: PUSH
18452: LD_INT 0
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 0
18461: PUSH
18462: LD_INT 1
18464: NEG
18465: PUSH
18466: EMPTY
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 1
18472: PUSH
18473: LD_INT 0
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: LD_INT 1
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 0
18492: PUSH
18493: LD_INT 1
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 1
18502: NEG
18503: PUSH
18504: LD_INT 0
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: PUSH
18515: LD_INT 1
18517: NEG
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PUSH
18523: LD_INT 1
18525: NEG
18526: PUSH
18527: LD_INT 2
18529: NEG
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 0
18537: PUSH
18538: LD_INT 2
18540: NEG
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: LD_INT 1
18551: NEG
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 2
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 2
18579: PUSH
18580: LD_INT 2
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 1
18589: PUSH
18590: LD_INT 2
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 0
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: LD_INT 1
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 2
18620: NEG
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 2
18631: NEG
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 2
18643: NEG
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 3
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: PUSH
18666: LD_INT 3
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 1
18675: NEG
18676: PUSH
18677: LD_INT 2
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 2
18686: NEG
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
18720: LD_ADDR_VAR 0 27
18724: PUSH
18725: LD_INT 0
18727: PUSH
18728: LD_INT 0
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 0
18737: PUSH
18738: LD_INT 1
18740: NEG
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 1
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 0
18768: PUSH
18769: LD_INT 1
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: NEG
18779: PUSH
18780: LD_INT 0
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: NEG
18790: PUSH
18791: LD_INT 1
18793: NEG
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 1
18801: NEG
18802: PUSH
18803: LD_INT 2
18805: NEG
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 0
18813: PUSH
18814: LD_INT 2
18816: NEG
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 1
18824: PUSH
18825: LD_INT 1
18827: NEG
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 2
18835: PUSH
18836: LD_INT 0
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 1
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 2
18855: PUSH
18856: LD_INT 2
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: PUSH
18863: LD_INT 1
18865: PUSH
18866: LD_INT 2
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: LD_INT 2
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 1
18885: NEG
18886: PUSH
18887: LD_INT 1
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 2
18896: NEG
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 2
18907: NEG
18908: PUSH
18909: LD_INT 1
18911: NEG
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: LD_INT 2
18919: NEG
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 1
18931: NEG
18932: PUSH
18933: LD_INT 2
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 2
18942: NEG
18943: PUSH
18944: LD_INT 1
18946: PUSH
18947: EMPTY
18948: LIST
18949: LIST
18950: PUSH
18951: LD_INT 3
18953: NEG
18954: PUSH
18955: LD_INT 1
18957: NEG
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 3
18965: NEG
18966: PUSH
18967: LD_INT 2
18969: NEG
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
19000: LD_ADDR_VAR 0 28
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 0
19017: PUSH
19018: LD_INT 1
19020: NEG
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: LD_INT 0
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 1
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 0
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 1
19058: NEG
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 1
19069: NEG
19070: PUSH
19071: LD_INT 1
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 1
19081: NEG
19082: PUSH
19083: LD_INT 2
19085: NEG
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: LD_INT 2
19096: NEG
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 1
19104: PUSH
19105: LD_INT 1
19107: NEG
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: LD_INT 2
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 2
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 1
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 0
19155: PUSH
19156: LD_INT 2
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: NEG
19166: PUSH
19167: LD_INT 1
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 2
19176: NEG
19177: PUSH
19178: LD_INT 0
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: LD_INT 2
19187: NEG
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 2
19199: NEG
19200: PUSH
19201: LD_INT 2
19203: NEG
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 2
19211: NEG
19212: PUSH
19213: LD_INT 3
19215: NEG
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: LD_INT 3
19227: NEG
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 3
19235: NEG
19236: PUSH
19237: LD_INT 1
19239: NEG
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 3
19247: NEG
19248: PUSH
19249: LD_INT 2
19251: NEG
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19282: LD_ADDR_VAR 0 29
19286: PUSH
19287: LD_INT 0
19289: PUSH
19290: LD_INT 0
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 0
19299: PUSH
19300: LD_INT 1
19302: NEG
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: LD_INT 0
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: LD_INT 1
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: LD_INT 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 1
19340: NEG
19341: PUSH
19342: LD_INT 0
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 1
19351: NEG
19352: PUSH
19353: LD_INT 1
19355: NEG
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 1
19363: NEG
19364: PUSH
19365: LD_INT 2
19367: NEG
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: LD_INT 2
19378: NEG
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: LD_INT 1
19389: NEG
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 2
19397: PUSH
19398: LD_INT 0
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 2
19407: PUSH
19408: LD_INT 1
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 1
19417: PUSH
19418: LD_INT 2
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 0
19427: PUSH
19428: LD_INT 2
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: NEG
19438: PUSH
19439: LD_INT 1
19441: PUSH
19442: EMPTY
19443: LIST
19444: LIST
19445: PUSH
19446: LD_INT 2
19448: NEG
19449: PUSH
19450: LD_INT 1
19452: NEG
19453: PUSH
19454: EMPTY
19455: LIST
19456: LIST
19457: PUSH
19458: LD_INT 2
19460: NEG
19461: PUSH
19462: LD_INT 2
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 2
19472: NEG
19473: PUSH
19474: LD_INT 3
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 3
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 3
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 1
19515: NEG
19516: PUSH
19517: LD_INT 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 3
19526: NEG
19527: PUSH
19528: LD_INT 2
19530: NEG
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
19561: LD_ADDR_VAR 0 30
19565: PUSH
19566: LD_INT 0
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 0
19578: PUSH
19579: LD_INT 1
19581: NEG
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 1
19589: PUSH
19590: LD_INT 0
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: LD_INT 1
19599: PUSH
19600: LD_INT 1
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 0
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 1
19619: NEG
19620: PUSH
19621: LD_INT 0
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 1
19630: NEG
19631: PUSH
19632: LD_INT 1
19634: NEG
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PUSH
19640: LD_INT 1
19642: NEG
19643: PUSH
19644: LD_INT 2
19646: NEG
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 0
19654: PUSH
19655: LD_INT 2
19657: NEG
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 2
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 2
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: LD_INT 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PUSH
19714: LD_INT 1
19716: NEG
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 2
19727: NEG
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 2
19738: NEG
19739: PUSH
19740: LD_INT 1
19742: NEG
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: LD_INT 1
19750: NEG
19751: PUSH
19752: LD_INT 3
19754: NEG
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: LD_INT 2
19765: NEG
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 3
19773: PUSH
19774: LD_INT 2
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 3
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: NEG
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 3
19804: NEG
19805: PUSH
19806: LD_INT 1
19808: NEG
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
19839: LD_ADDR_VAR 0 31
19843: PUSH
19844: LD_INT 0
19846: PUSH
19847: LD_INT 0
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: LD_INT 0
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: LD_INT 1
19877: PUSH
19878: LD_INT 1
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 0
19887: PUSH
19888: LD_INT 1
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: NEG
19898: PUSH
19899: LD_INT 0
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 1
19908: NEG
19909: PUSH
19910: LD_INT 1
19912: NEG
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 1
19920: NEG
19921: PUSH
19922: LD_INT 2
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: LD_INT 1
19935: NEG
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 2
19943: PUSH
19944: LD_INT 0
19946: PUSH
19947: EMPTY
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 2
19953: PUSH
19954: LD_INT 1
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 2
19963: PUSH
19964: LD_INT 2
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 1
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 1
19993: NEG
19994: PUSH
19995: LD_INT 1
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: LD_INT 2
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: NEG
20029: PUSH
20030: LD_INT 3
20032: NEG
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 2
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 3
20051: PUSH
20052: LD_INT 1
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 1
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 1
20071: NEG
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 3
20082: NEG
20083: PUSH
20084: LD_INT 2
20086: NEG
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20117: LD_ADDR_VAR 0 32
20121: PUSH
20122: LD_INT 0
20124: PUSH
20125: LD_INT 0
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 0
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 1
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 1
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: NEG
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: LD_INT 1
20190: NEG
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 1
20198: NEG
20199: PUSH
20200: LD_INT 2
20202: NEG
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: LD_INT 2
20213: NEG
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: LD_INT 1
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: LD_INT 1
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: LD_INT 2
20242: PUSH
20243: LD_INT 2
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 1
20252: PUSH
20253: LD_INT 2
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 0
20262: PUSH
20263: LD_INT 2
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PUSH
20270: LD_INT 1
20272: NEG
20273: PUSH
20274: LD_INT 1
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 2
20283: NEG
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 2
20294: NEG
20295: PUSH
20296: LD_INT 1
20298: NEG
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PUSH
20304: LD_INT 1
20306: NEG
20307: PUSH
20308: LD_INT 3
20310: NEG
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: LD_INT 2
20321: NEG
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 3
20329: PUSH
20330: LD_INT 2
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: LD_INT 2
20339: PUSH
20340: LD_INT 3
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: PUSH
20347: LD_INT 2
20349: NEG
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: PUSH
20358: LD_INT 3
20360: NEG
20361: PUSH
20362: LD_INT 1
20364: NEG
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
20395: LD_ADDR_VAR 0 33
20399: PUSH
20400: LD_INT 0
20402: PUSH
20403: LD_INT 0
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: PUSH
20424: LD_INT 0
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: LD_INT 1
20433: PUSH
20434: LD_INT 1
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PUSH
20441: LD_INT 0
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 1
20453: NEG
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 1
20464: NEG
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 1
20476: NEG
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: LD_INT 1
20491: NEG
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 2
20509: PUSH
20510: LD_INT 1
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: LD_INT 1
20519: PUSH
20520: LD_INT 2
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: LD_INT 0
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PUSH
20537: LD_INT 1
20539: NEG
20540: PUSH
20541: LD_INT 1
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 2
20550: NEG
20551: PUSH
20552: LD_INT 0
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PUSH
20559: LD_INT 2
20561: NEG
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: LD_INT 2
20573: NEG
20574: PUSH
20575: LD_INT 2
20577: NEG
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 2
20585: NEG
20586: PUSH
20587: LD_INT 3
20589: NEG
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 2
20597: PUSH
20598: LD_INT 1
20600: NEG
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 3
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: LD_INT 3
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: LD_INT 1
20628: NEG
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 3
20639: NEG
20640: PUSH
20641: LD_INT 2
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
20674: LD_ADDR_VAR 0 34
20678: PUSH
20679: LD_INT 0
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 0
20691: PUSH
20692: LD_INT 1
20694: NEG
20695: PUSH
20696: EMPTY
20697: LIST
20698: LIST
20699: PUSH
20700: LD_INT 1
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 1
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 0
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: LD_INT 1
20732: NEG
20733: PUSH
20734: LD_INT 0
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 1
20743: NEG
20744: PUSH
20745: LD_INT 1
20747: NEG
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: NEG
20756: PUSH
20757: LD_INT 2
20759: NEG
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 0
20767: PUSH
20768: LD_INT 2
20770: NEG
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 1
20778: PUSH
20779: LD_INT 1
20781: NEG
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: LD_INT 1
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 2
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 1
20809: PUSH
20810: LD_INT 2
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 1
20819: NEG
20820: PUSH
20821: LD_INT 1
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 2
20830: NEG
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: NEG
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 2
20853: NEG
20854: PUSH
20855: LD_INT 2
20857: NEG
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 1
20865: NEG
20866: PUSH
20867: LD_INT 3
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 2
20880: NEG
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 3
20888: PUSH
20889: LD_INT 2
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: LD_INT 2
20898: PUSH
20899: LD_INT 3
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 2
20908: NEG
20909: PUSH
20910: LD_INT 1
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 3
20919: NEG
20920: PUSH
20921: LD_INT 1
20923: NEG
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
20954: LD_ADDR_VAR 0 35
20958: PUSH
20959: LD_INT 0
20961: PUSH
20962: LD_INT 0
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: LD_INT 0
20971: PUSH
20972: LD_INT 1
20974: NEG
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PUSH
20980: LD_INT 1
20982: PUSH
20983: LD_INT 0
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 1
20992: PUSH
20993: LD_INT 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 0
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: LD_INT 0
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 1
21023: NEG
21024: PUSH
21025: LD_INT 1
21027: NEG
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 2
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 2
21045: NEG
21046: PUSH
21047: LD_INT 1
21049: NEG
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21066: LD_ADDR_VAR 0 36
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: LD_INT 0
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 0
21083: PUSH
21084: LD_INT 1
21086: NEG
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: PUSH
21095: LD_INT 0
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: LD_INT 0
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 1
21135: NEG
21136: PUSH
21137: LD_INT 1
21139: NEG
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 1
21147: NEG
21148: PUSH
21149: LD_INT 2
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 2
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21178: LD_ADDR_VAR 0 37
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 0
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: LD_INT 1
21198: NEG
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: PUSH
21207: LD_INT 0
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: PUSH
21214: LD_INT 1
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: NEG
21237: PUSH
21238: LD_INT 0
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: NEG
21248: PUSH
21249: LD_INT 1
21251: NEG
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: LD_INT 1
21262: NEG
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 1
21270: NEG
21271: PUSH
21272: LD_INT 1
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
21290: LD_ADDR_VAR 0 38
21294: PUSH
21295: LD_INT 0
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 0
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 1
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 1
21328: PUSH
21329: LD_INT 1
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 0
21338: PUSH
21339: LD_INT 1
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: LD_INT 0
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 1
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 2
21371: PUSH
21372: LD_INT 1
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 2
21381: NEG
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
21402: LD_ADDR_VAR 0 39
21406: PUSH
21407: LD_INT 0
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 1
21430: PUSH
21431: LD_INT 0
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 1
21440: PUSH
21441: LD_INT 1
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: LD_INT 0
21450: PUSH
21451: LD_INT 1
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: LD_INT 0
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: PUSH
21469: LD_INT 1
21471: NEG
21472: PUSH
21473: LD_INT 1
21475: NEG
21476: PUSH
21477: EMPTY
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 1
21483: NEG
21484: PUSH
21485: LD_INT 2
21487: NEG
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: LD_INT 2
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
21514: LD_ADDR_VAR 0 40
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: LD_INT 0
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 0
21531: PUSH
21532: LD_INT 1
21534: NEG
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: PUSH
21543: LD_INT 0
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 1
21552: PUSH
21553: LD_INT 1
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 0
21562: PUSH
21563: LD_INT 1
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 1
21572: NEG
21573: PUSH
21574: LD_INT 0
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: NEG
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: LD_INT 1
21598: NEG
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 1
21606: NEG
21607: PUSH
21608: LD_INT 1
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21626: LD_ADDR_VAR 0 41
21630: PUSH
21631: LD_INT 0
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 0
21643: PUSH
21644: LD_INT 1
21646: NEG
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: LD_INT 0
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: LD_INT 1
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: LD_INT 0
21674: PUSH
21675: LD_INT 1
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: LD_INT 0
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: LD_INT 1
21699: NEG
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 1
21707: NEG
21708: PUSH
21709: LD_INT 2
21711: NEG
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: LD_INT 1
21722: NEG
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 2
21730: PUSH
21731: LD_INT 0
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 2
21740: PUSH
21741: LD_INT 1
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: PUSH
21748: LD_INT 2
21750: PUSH
21751: LD_INT 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 1
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: NEG
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: LD_INT 2
21781: NEG
21782: PUSH
21783: LD_INT 0
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: LD_INT 2
21792: NEG
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 2
21804: NEG
21805: PUSH
21806: LD_INT 2
21808: NEG
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: LD_INT 3
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: LD_INT 1
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 3
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 3
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 3
21859: PUSH
21860: LD_INT 2
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 3
21869: PUSH
21870: LD_INT 3
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 3
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: NEG
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PUSH
21898: LD_INT 3
21900: NEG
21901: PUSH
21902: LD_INT 0
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 3
21911: NEG
21912: PUSH
21913: LD_INT 1
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 3
21923: NEG
21924: PUSH
21925: LD_INT 2
21927: NEG
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 3
21935: NEG
21936: PUSH
21937: LD_INT 3
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21976: LD_ADDR_VAR 0 42
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 1
21996: NEG
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 1
22034: NEG
22035: PUSH
22036: LD_INT 0
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: NEG
22046: PUSH
22047: LD_INT 1
22049: NEG
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PUSH
22059: LD_INT 2
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 0
22069: PUSH
22070: LD_INT 2
22072: NEG
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: LD_INT 1
22083: NEG
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 1
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 0
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 2
22142: NEG
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: LD_INT 2
22158: NEG
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 2
22166: NEG
22167: PUSH
22168: LD_INT 3
22170: NEG
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: LD_INT 3
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 0
22190: PUSH
22191: LD_INT 3
22193: NEG
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 1
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 3
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 3
22222: PUSH
22223: LD_INT 3
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: PUSH
22230: LD_INT 2
22232: PUSH
22233: LD_INT 3
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: LD_INT 3
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 0
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: NEG
22263: PUSH
22264: LD_INT 2
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 3
22273: NEG
22274: PUSH
22275: LD_INT 2
22277: NEG
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 3
22285: NEG
22286: PUSH
22287: LD_INT 3
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
22326: LD_ADDR_VAR 0 43
22330: PUSH
22331: LD_INT 0
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: LD_INT 1
22346: NEG
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 1
22354: PUSH
22355: LD_INT 0
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 1
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 0
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 1
22395: NEG
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: NEG
22408: PUSH
22409: LD_INT 2
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 0
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 2
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: LD_INT 1
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: LD_INT 2
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 2
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 1
22481: NEG
22482: PUSH
22483: LD_INT 1
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: NEG
22516: PUSH
22517: LD_INT 3
22519: NEG
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 0
22527: PUSH
22528: LD_INT 3
22530: NEG
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 1
22538: PUSH
22539: LD_INT 2
22541: NEG
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 2
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: LD_INT 3
22560: PUSH
22561: LD_INT 0
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PUSH
22568: LD_INT 3
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 3
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 3
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: NEG
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: LD_INT 3
22622: NEG
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 3
22633: NEG
22634: PUSH
22635: LD_INT 1
22637: NEG
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
22674: LD_ADDR_VAR 0 44
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 0
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: LD_INT 1
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: NEG
22733: PUSH
22734: LD_INT 0
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: LD_INT 1
22747: NEG
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PUSH
22753: LD_INT 1
22755: NEG
22756: PUSH
22757: LD_INT 2
22759: NEG
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PUSH
22776: LD_INT 2
22778: PUSH
22779: LD_INT 0
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 2
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: LD_INT 2
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: PUSH
22816: LD_INT 1
22818: NEG
22819: PUSH
22820: LD_INT 1
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: NEG
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 2
22840: NEG
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 2
22852: NEG
22853: PUSH
22854: LD_INT 2
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 2
22864: NEG
22865: PUSH
22866: LD_INT 3
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 2
22876: PUSH
22877: LD_INT 1
22879: NEG
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 3
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 3
22897: PUSH
22898: LD_INT 1
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 3
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 3
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 2
22927: PUSH
22928: LD_INT 3
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 3
22948: NEG
22949: PUSH
22950: LD_INT 0
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 3
22959: NEG
22960: PUSH
22961: LD_INT 1
22963: NEG
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: LD_INT 3
22971: NEG
22972: PUSH
22973: LD_INT 2
22975: NEG
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 3
22983: NEG
22984: PUSH
22985: LD_INT 3
22987: NEG
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23024: LD_ADDR_VAR 0 45
23028: PUSH
23029: LD_INT 0
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 1
23044: NEG
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: PUSH
23063: LD_INT 1
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: LD_INT 1
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 1
23093: NEG
23094: PUSH
23095: LD_INT 1
23097: NEG
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 1
23105: NEG
23106: PUSH
23107: LD_INT 2
23109: NEG
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 0
23117: PUSH
23118: LD_INT 2
23120: NEG
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: LD_INT 2
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 0
23169: PUSH
23170: LD_INT 2
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 1
23179: NEG
23180: PUSH
23181: LD_INT 1
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 2
23190: NEG
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: NEG
23203: PUSH
23204: LD_INT 2
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: LD_INT 3
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: LD_INT 1
23226: NEG
23227: PUSH
23228: LD_INT 3
23230: NEG
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 0
23238: PUSH
23239: LD_INT 3
23241: NEG
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: LD_INT 1
23249: PUSH
23250: LD_INT 2
23252: NEG
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: LD_INT 2
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 2
23280: PUSH
23281: LD_INT 3
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 1
23290: PUSH
23291: LD_INT 3
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: LD_INT 3
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 1
23310: NEG
23311: PUSH
23312: LD_INT 2
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 3
23321: NEG
23322: PUSH
23323: LD_INT 2
23325: NEG
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: PUSH
23331: LD_INT 3
23333: NEG
23334: PUSH
23335: LD_INT 3
23337: NEG
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23374: LD_ADDR_VAR 0 46
23378: PUSH
23379: LD_INT 0
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: LD_INT 0
23391: PUSH
23392: LD_INT 1
23394: NEG
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 1
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 1
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 1
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: LD_INT 0
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 1
23443: NEG
23444: PUSH
23445: LD_INT 1
23447: NEG
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 1
23455: NEG
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 1
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: EMPTY
23484: LIST
23485: LIST
23486: PUSH
23487: LD_INT 2
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: PUSH
23500: LD_INT 1
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: LD_INT 2
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 0
23519: PUSH
23520: LD_INT 2
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 1
23529: NEG
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: NEG
23541: PUSH
23542: LD_INT 0
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 2
23551: NEG
23552: PUSH
23553: LD_INT 1
23555: NEG
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: NEG
23564: PUSH
23565: LD_INT 3
23567: NEG
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: PUSH
23573: LD_INT 0
23575: PUSH
23576: LD_INT 3
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 1
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 1
23600: NEG
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 3
23608: PUSH
23609: LD_INT 0
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 3
23618: PUSH
23619: LD_INT 1
23621: PUSH
23622: EMPTY
23623: LIST
23624: LIST
23625: PUSH
23626: LD_INT 1
23628: PUSH
23629: LD_INT 3
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 3
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 2
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 3
23670: NEG
23671: PUSH
23672: LD_INT 0
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 3
23681: NEG
23682: PUSH
23683: LD_INT 1
23685: NEG
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23722: LD_ADDR_VAR 0 47
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: EMPTY
23734: LIST
23735: LIST
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: LD_INT 0
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 1
23760: PUSH
23761: LD_INT 1
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 0
23770: PUSH
23771: LD_INT 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: LD_INT 0
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 1
23791: NEG
23792: PUSH
23793: LD_INT 1
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: NEG
23804: PUSH
23805: LD_INT 2
23807: NEG
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 0
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 1
23826: PUSH
23827: LD_INT 1
23829: NEG
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: PUSH
23835: LD_INT 2
23837: NEG
23838: PUSH
23839: LD_INT 1
23841: NEG
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: NEG
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23873: LD_ADDR_VAR 0 48
23877: PUSH
23878: LD_INT 0
23880: PUSH
23881: LD_INT 0
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: LD_INT 1
23893: NEG
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: PUSH
23899: LD_INT 1
23901: PUSH
23902: LD_INT 0
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 1
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 0
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: NEG
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 1
23954: NEG
23955: PUSH
23956: LD_INT 2
23958: NEG
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: LD_INT 2
23969: NEG
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 1
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: PUSH
23989: LD_INT 0
23991: PUSH
23992: EMPTY
23993: LIST
23994: LIST
23995: PUSH
23996: LD_INT 2
23998: PUSH
23999: LD_INT 1
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
24020: LD_ADDR_VAR 0 49
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 1
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 0
24068: PUSH
24069: LD_INT 1
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: NEG
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 1
24089: NEG
24090: PUSH
24091: LD_INT 1
24093: NEG
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 1
24101: PUSH
24102: LD_INT 1
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: LD_INT 0
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 2
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
24164: LD_ADDR_VAR 0 50
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 2
24245: PUSH
24246: LD_INT 1
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 2
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 1
24265: PUSH
24266: LD_INT 2
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 0
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 1
24285: NEG
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
24308: LD_ADDR_VAR 0 51
24312: PUSH
24313: LD_INT 0
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 0
24325: PUSH
24326: LD_INT 1
24328: NEG
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: LD_INT 1
24349: PUSH
24350: EMPTY
24351: LIST
24352: LIST
24353: PUSH
24354: LD_INT 0
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 1
24366: NEG
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 1
24377: NEG
24378: PUSH
24379: LD_INT 1
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: LD_INT 2
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_INT 2
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 2
24420: NEG
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: LD_INT 1
24435: NEG
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24455: LD_ADDR_VAR 0 52
24459: PUSH
24460: LD_INT 0
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 0
24472: PUSH
24473: LD_INT 1
24475: NEG
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 1
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: LD_INT 1
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: LD_INT 0
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 1
24536: NEG
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: LD_INT 1
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: PUSH
24557: LD_INT 2
24559: NEG
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 2
24570: NEG
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: EMPTY
24577: LIST
24578: LIST
24579: PUSH
24580: LD_INT 2
24582: NEG
24583: PUSH
24584: LD_INT 2
24586: NEG
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24606: LD_ADDR_VAR 0 53
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 0
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: PUSH
24635: LD_INT 0
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 0
24654: PUSH
24655: LD_INT 1
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 0
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: LD_INT 1
24679: NEG
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 1
24687: NEG
24688: PUSH
24689: LD_INT 2
24691: NEG
24692: PUSH
24693: EMPTY
24694: LIST
24695: LIST
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 2
24702: NEG
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 1
24710: PUSH
24711: LD_INT 1
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 2
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: PUSH
24752: LD_INT 2
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 0
24761: PUSH
24762: LD_INT 2
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: LD_INT 1
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: NEG
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 2
24793: NEG
24794: PUSH
24795: LD_INT 1
24797: NEG
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 2
24805: NEG
24806: PUSH
24807: LD_INT 2
24809: NEG
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24836: LD_ADDR_VAR 0 54
24840: PUSH
24841: LD_INT 0
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: LD_INT 1
24856: NEG
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: LD_INT 1
24864: PUSH
24865: LD_INT 0
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: LD_INT 1
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 1
24894: NEG
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: LD_INT 1
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 1
24917: NEG
24918: PUSH
24919: LD_INT 2
24921: NEG
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 2
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 1
24943: NEG
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 2
24951: PUSH
24952: LD_INT 0
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 2
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 1
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 0
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: NEG
25002: PUSH
25003: LD_INT 1
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 2
25012: NEG
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: NEG
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: LD_INT 2
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25066: LD_ADDR_VAR 0 55
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: LD_INT 0
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 0
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: NEG
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: NEG
25148: PUSH
25149: LD_INT 2
25151: NEG
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 1
25173: NEG
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: LD_INT 0
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: LD_INT 1
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: LD_INT 2
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: PUSH
25219: LD_INT 0
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 1
25231: NEG
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: LD_INT 0
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 2
25253: NEG
25254: PUSH
25255: LD_INT 1
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: LD_INT 2
25269: NEG
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25296: LD_ADDR_VAR 0 56
25300: PUSH
25301: LD_INT 0
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 1
25316: NEG
25317: PUSH
25318: EMPTY
25319: LIST
25320: LIST
25321: PUSH
25322: LD_INT 1
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: LD_INT 1
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: NEG
25378: PUSH
25379: LD_INT 2
25381: NEG
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 2
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 2
25411: PUSH
25412: LD_INT 0
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: PUSH
25419: LD_INT 2
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 1
25441: PUSH
25442: LD_INT 2
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 0
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: NEG
25462: PUSH
25463: LD_INT 1
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 2
25472: NEG
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 2
25483: NEG
25484: PUSH
25485: LD_INT 1
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 2
25495: NEG
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: LIST
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25526: LD_ADDR_VAR 0 57
25530: PUSH
25531: LD_INT 0
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 0
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 1
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 1
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: NEG
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 1
25599: NEG
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: NEG
25703: PUSH
25704: LD_INT 0
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 2
25713: NEG
25714: PUSH
25715: LD_INT 1
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 2
25725: NEG
25726: PUSH
25727: LD_INT 2
25729: NEG
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25756: LD_ADDR_VAR 0 58
25760: PUSH
25761: LD_INT 0
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 0
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 1
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 0
25804: PUSH
25805: LD_INT 1
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PUSH
25812: LD_INT 1
25814: NEG
25815: PUSH
25816: LD_INT 0
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 2
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 1
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: LD_INT 2
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: LD_INT 2
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 0
25911: PUSH
25912: LD_INT 2
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: LD_INT 0
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 2
25943: NEG
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 2
25955: NEG
25956: PUSH
25957: LD_INT 2
25959: NEG
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
25986: LD_ADDR_VAR 0 59
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: LD_INT 0
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 0
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: NEG
26045: PUSH
26046: LD_INT 0
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: NEG
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26074: LD_ADDR_VAR 0 60
26078: PUSH
26079: LD_INT 0
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 0
26105: PUSH
26106: EMPTY
26107: LIST
26108: LIST
26109: PUSH
26110: LD_INT 1
26112: PUSH
26113: LD_INT 1
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: LD_INT 0
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PUSH
26130: LD_INT 1
26132: NEG
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 1
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26162: LD_ADDR_VAR 0 61
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26250: LD_ADDR_VAR 0 62
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: LIST
26333: LIST
26334: LIST
26335: LIST
26336: LIST
26337: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26338: LD_ADDR_VAR 0 63
26342: PUSH
26343: LD_INT 0
26345: PUSH
26346: LD_INT 0
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 0
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: LD_INT 0
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 1
26376: PUSH
26377: LD_INT 1
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 0
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: NEG
26397: PUSH
26398: LD_INT 0
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 1
26411: NEG
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
26426: LD_ADDR_VAR 0 64
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: LD_INT 1
26446: NEG
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: PUSH
26472: LD_INT 0
26474: PUSH
26475: LD_INT 1
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 1
26484: NEG
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: LD_INT 1
26499: NEG
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: ST_TO_ADDR
// end ; 1 :
26514: GO 32411
26516: LD_INT 1
26518: DOUBLE
26519: EQUAL
26520: IFTRUE 26524
26522: GO 29147
26524: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26525: LD_ADDR_VAR 0 11
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: LD_INT 3
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 0
26544: PUSH
26545: LD_INT 3
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 1
26555: PUSH
26556: LD_INT 2
26558: NEG
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26569: LD_ADDR_VAR 0 12
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 1
26579: NEG
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 3
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: PUSH
26595: LD_INT 3
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: LIST
26609: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26610: LD_ADDR_VAR 0 13
26614: PUSH
26615: LD_INT 3
26617: PUSH
26618: LD_INT 2
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 3
26627: PUSH
26628: LD_INT 3
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: LD_INT 3
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: LIST
26649: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26650: LD_ADDR_VAR 0 14
26654: PUSH
26655: LD_INT 1
26657: PUSH
26658: LD_INT 3
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 0
26667: PUSH
26668: LD_INT 3
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: PUSH
26675: LD_INT 1
26677: NEG
26678: PUSH
26679: LD_INT 2
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: LIST
26690: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26691: LD_ADDR_VAR 0 15
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 3
26709: NEG
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 3
26720: NEG
26721: PUSH
26722: LD_INT 1
26724: NEG
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26735: LD_ADDR_VAR 0 16
26739: PUSH
26740: LD_INT 2
26742: NEG
26743: PUSH
26744: LD_INT 3
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 3
26754: NEG
26755: PUSH
26756: LD_INT 2
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 3
26766: NEG
26767: PUSH
26768: LD_INT 3
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
26781: LD_ADDR_VAR 0 17
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: LD_INT 3
26792: NEG
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: LD_INT 3
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 2
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: LIST
26824: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26825: LD_ADDR_VAR 0 18
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: PUSH
26841: LD_INT 3
26843: PUSH
26844: LD_INT 0
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 3
26853: PUSH
26854: LD_INT 1
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26866: LD_ADDR_VAR 0 19
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: EMPTY
26878: LIST
26879: LIST
26880: PUSH
26881: LD_INT 3
26883: PUSH
26884: LD_INT 3
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 2
26893: PUSH
26894: LD_INT 3
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
26906: LD_ADDR_VAR 0 20
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: LD_INT 3
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26947: LD_ADDR_VAR 0 21
26951: PUSH
26952: LD_INT 2
26954: NEG
26955: PUSH
26956: LD_INT 1
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 3
26965: NEG
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PUSH
26974: LD_INT 3
26976: NEG
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
26991: LD_ADDR_VAR 0 22
26995: PUSH
26996: LD_INT 2
26998: NEG
26999: PUSH
27000: LD_INT 3
27002: NEG
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 3
27010: NEG
27011: PUSH
27012: LD_INT 2
27014: NEG
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 3
27022: NEG
27023: PUSH
27024: LD_INT 3
27026: NEG
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
27037: LD_ADDR_VAR 0 23
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: LD_INT 3
27047: NEG
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 4
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: LD_INT 3
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: LIST
27080: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
27081: LD_ADDR_VAR 0 24
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: LD_INT 0
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 3
27098: PUSH
27099: LD_INT 1
27101: NEG
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 4
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
27122: LD_ADDR_VAR 0 25
27126: PUSH
27127: LD_INT 3
27129: PUSH
27130: LD_INT 3
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 4
27139: PUSH
27140: LD_INT 3
27142: PUSH
27143: EMPTY
27144: LIST
27145: LIST
27146: PUSH
27147: LD_INT 3
27149: PUSH
27150: LD_INT 4
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: LIST
27161: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
27162: LD_ADDR_VAR 0 26
27166: PUSH
27167: LD_INT 0
27169: PUSH
27170: LD_INT 3
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 1
27179: PUSH
27180: LD_INT 4
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: LD_INT 1
27189: NEG
27190: PUSH
27191: LD_INT 3
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
27203: LD_ADDR_VAR 0 27
27207: PUSH
27208: LD_INT 3
27210: NEG
27211: PUSH
27212: LD_INT 0
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 3
27221: NEG
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 4
27232: NEG
27233: PUSH
27234: LD_INT 1
27236: NEG
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
27247: LD_ADDR_VAR 0 28
27251: PUSH
27252: LD_INT 3
27254: NEG
27255: PUSH
27256: LD_INT 3
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 3
27266: NEG
27267: PUSH
27268: LD_INT 4
27270: NEG
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 4
27278: NEG
27279: PUSH
27280: LD_INT 3
27282: NEG
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
27293: LD_ADDR_VAR 0 29
27297: PUSH
27298: LD_INT 1
27300: NEG
27301: PUSH
27302: LD_INT 3
27304: NEG
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: LD_INT 3
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: LD_INT 1
27323: PUSH
27324: LD_INT 2
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 1
27334: NEG
27335: PUSH
27336: LD_INT 4
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 0
27346: PUSH
27347: LD_INT 4
27349: NEG
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 1
27357: PUSH
27358: LD_INT 3
27360: NEG
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: LD_INT 5
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: LD_INT 5
27383: NEG
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: LD_INT 4
27394: NEG
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PUSH
27400: LD_INT 1
27402: NEG
27403: PUSH
27404: LD_INT 6
27406: NEG
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: PUSH
27412: LD_INT 0
27414: PUSH
27415: LD_INT 6
27417: NEG
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: PUSH
27423: LD_INT 1
27425: PUSH
27426: LD_INT 5
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
27448: LD_ADDR_VAR 0 30
27452: PUSH
27453: LD_INT 2
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: PUSH
27464: LD_INT 3
27466: PUSH
27467: LD_INT 0
27469: PUSH
27470: EMPTY
27471: LIST
27472: LIST
27473: PUSH
27474: LD_INT 3
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: EMPTY
27481: LIST
27482: LIST
27483: PUSH
27484: LD_INT 3
27486: PUSH
27487: LD_INT 1
27489: NEG
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 4
27497: PUSH
27498: LD_INT 0
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 4
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: EMPTY
27512: LIST
27513: LIST
27514: PUSH
27515: LD_INT 4
27517: PUSH
27518: LD_INT 1
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 5
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 5
27538: PUSH
27539: LD_INT 1
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 5
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 6
27559: PUSH
27560: LD_INT 0
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 6
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
27591: LD_ADDR_VAR 0 31
27595: PUSH
27596: LD_INT 3
27598: PUSH
27599: LD_INT 2
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: PUSH
27606: LD_INT 3
27608: PUSH
27609: LD_INT 3
27611: PUSH
27612: EMPTY
27613: LIST
27614: LIST
27615: PUSH
27616: LD_INT 2
27618: PUSH
27619: LD_INT 3
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 4
27628: PUSH
27629: LD_INT 3
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: PUSH
27636: LD_INT 4
27638: PUSH
27639: LD_INT 4
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: LD_INT 4
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 5
27658: PUSH
27659: LD_INT 4
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 5
27668: PUSH
27669: LD_INT 5
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 4
27678: PUSH
27679: LD_INT 5
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 6
27688: PUSH
27689: LD_INT 5
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 6
27698: PUSH
27699: LD_INT 6
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 5
27708: PUSH
27709: LD_INT 6
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
27730: LD_ADDR_VAR 0 32
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: LD_INT 3
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 0
27747: PUSH
27748: LD_INT 3
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 1
27768: PUSH
27769: LD_INT 4
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 4
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: NEG
27789: PUSH
27790: LD_INT 3
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 1
27799: PUSH
27800: LD_INT 5
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 5
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: LD_INT 4
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 6
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: LD_INT 6
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 1
27850: NEG
27851: PUSH
27852: LD_INT 5
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: LIST
27871: LIST
27872: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
27873: LD_ADDR_VAR 0 33
27877: PUSH
27878: LD_INT 2
27880: NEG
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: EMPTY
27886: LIST
27887: LIST
27888: PUSH
27889: LD_INT 3
27891: NEG
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 3
27902: NEG
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PUSH
27912: LD_INT 3
27914: NEG
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 4
27925: NEG
27926: PUSH
27927: LD_INT 0
27929: PUSH
27930: EMPTY
27931: LIST
27932: LIST
27933: PUSH
27934: LD_INT 4
27936: NEG
27937: PUSH
27938: LD_INT 1
27940: NEG
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 4
27948: NEG
27949: PUSH
27950: LD_INT 1
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 5
27959: NEG
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 5
27970: NEG
27971: PUSH
27972: LD_INT 1
27974: NEG
27975: PUSH
27976: EMPTY
27977: LIST
27978: LIST
27979: PUSH
27980: LD_INT 5
27982: NEG
27983: PUSH
27984: LD_INT 1
27986: PUSH
27987: EMPTY
27988: LIST
27989: LIST
27990: PUSH
27991: LD_INT 6
27993: NEG
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: EMPTY
27999: LIST
28000: LIST
28001: PUSH
28002: LD_INT 6
28004: NEG
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: PUSH
28010: EMPTY
28011: LIST
28012: LIST
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
28028: LD_ADDR_VAR 0 34
28032: PUSH
28033: LD_INT 2
28035: NEG
28036: PUSH
28037: LD_INT 3
28039: NEG
28040: PUSH
28041: EMPTY
28042: LIST
28043: LIST
28044: PUSH
28045: LD_INT 3
28047: NEG
28048: PUSH
28049: LD_INT 2
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 3
28059: NEG
28060: PUSH
28061: LD_INT 3
28063: NEG
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 3
28071: NEG
28072: PUSH
28073: LD_INT 4
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 4
28083: NEG
28084: PUSH
28085: LD_INT 3
28087: NEG
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 4
28095: NEG
28096: PUSH
28097: LD_INT 4
28099: NEG
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 4
28107: NEG
28108: PUSH
28109: LD_INT 5
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 5
28119: NEG
28120: PUSH
28121: LD_INT 4
28123: NEG
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 5
28131: NEG
28132: PUSH
28133: LD_INT 5
28135: NEG
28136: PUSH
28137: EMPTY
28138: LIST
28139: LIST
28140: PUSH
28141: LD_INT 5
28143: NEG
28144: PUSH
28145: LD_INT 6
28147: NEG
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PUSH
28153: LD_INT 6
28155: NEG
28156: PUSH
28157: LD_INT 5
28159: NEG
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 6
28167: NEG
28168: PUSH
28169: LD_INT 6
28171: NEG
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
28191: LD_ADDR_VAR 0 41
28195: PUSH
28196: LD_INT 0
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: LD_INT 3
28213: NEG
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 2
28224: NEG
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
28235: LD_ADDR_VAR 0 42
28239: PUSH
28240: LD_INT 2
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: LD_INT 1
28255: NEG
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 3
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: EMPTY
28268: LIST
28269: LIST
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: LIST
28275: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
28276: LD_ADDR_VAR 0 43
28280: PUSH
28281: LD_INT 2
28283: PUSH
28284: LD_INT 2
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 3
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 2
28303: PUSH
28304: LD_INT 3
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: LIST
28315: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
28316: LD_ADDR_VAR 0 44
28320: PUSH
28321: LD_INT 0
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 3
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28357: LD_ADDR_VAR 0 45
28361: PUSH
28362: LD_INT 2
28364: NEG
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 3
28386: NEG
28387: PUSH
28388: LD_INT 1
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: LIST
28400: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
28401: LD_ADDR_VAR 0 46
28405: PUSH
28406: LD_INT 2
28408: NEG
28409: PUSH
28410: LD_INT 2
28412: NEG
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: NEG
28421: PUSH
28422: LD_INT 3
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 3
28432: NEG
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
28447: LD_ADDR_VAR 0 47
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: LD_INT 3
28458: NEG
28459: PUSH
28460: EMPTY
28461: LIST
28462: LIST
28463: PUSH
28464: LD_INT 1
28466: NEG
28467: PUSH
28468: LD_INT 3
28470: NEG
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
28480: LD_ADDR_VAR 0 48
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: LD_INT 2
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
28511: LD_ADDR_VAR 0 49
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 3
28528: PUSH
28529: LD_INT 2
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: EMPTY
28537: LIST
28538: LIST
28539: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
28540: LD_ADDR_VAR 0 50
28544: PUSH
28545: LD_INT 2
28547: PUSH
28548: LD_INT 3
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 1
28557: PUSH
28558: LD_INT 3
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28569: LD_ADDR_VAR 0 51
28573: PUSH
28574: LD_INT 1
28576: NEG
28577: PUSH
28578: LD_INT 2
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 2
28587: NEG
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28600: LD_ADDR_VAR 0 52
28604: PUSH
28605: LD_INT 3
28607: NEG
28608: PUSH
28609: LD_INT 1
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 3
28619: NEG
28620: PUSH
28621: LD_INT 2
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28633: LD_ADDR_VAR 0 53
28637: PUSH
28638: LD_INT 1
28640: NEG
28641: PUSH
28642: LD_INT 3
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: LD_INT 3
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 2
28666: NEG
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28677: LD_ADDR_VAR 0 54
28681: PUSH
28682: LD_INT 2
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: LD_INT 3
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 3
28705: PUSH
28706: LD_INT 1
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: LIST
28717: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28718: LD_ADDR_VAR 0 55
28722: PUSH
28723: LD_INT 3
28725: PUSH
28726: LD_INT 2
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 3
28735: PUSH
28736: LD_INT 3
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 2
28745: PUSH
28746: LD_INT 3
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28758: LD_ADDR_VAR 0 56
28762: PUSH
28763: LD_INT 1
28765: PUSH
28766: LD_INT 3
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: PUSH
28773: LD_INT 0
28775: PUSH
28776: LD_INT 3
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 1
28785: NEG
28786: PUSH
28787: LD_INT 2
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28799: LD_ADDR_VAR 0 57
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 3
28817: NEG
28818: PUSH
28819: LD_INT 0
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 3
28828: NEG
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: EMPTY
28839: LIST
28840: LIST
28841: LIST
28842: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28843: LD_ADDR_VAR 0 58
28847: PUSH
28848: LD_INT 2
28850: NEG
28851: PUSH
28852: LD_INT 3
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 3
28862: NEG
28863: PUSH
28864: LD_INT 2
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 3
28874: NEG
28875: PUSH
28876: LD_INT 3
28878: NEG
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
28889: LD_ADDR_VAR 0 59
28893: PUSH
28894: LD_INT 1
28896: NEG
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: LD_INT 2
28911: NEG
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: LD_INT 1
28922: NEG
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: LIST
28932: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
28933: LD_ADDR_VAR 0 60
28937: PUSH
28938: LD_INT 1
28940: PUSH
28941: LD_INT 1
28943: NEG
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 0
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: LD_INT 1
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: LIST
28973: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
28974: LD_ADDR_VAR 0 61
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: LD_INT 1
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 2
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: LD_INT 2
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: LIST
29013: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29014: LD_ADDR_VAR 0 62
29018: PUSH
29019: LD_INT 1
29021: PUSH
29022: LD_INT 2
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: LIST
29054: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29055: LD_ADDR_VAR 0 63
29059: PUSH
29060: LD_INT 1
29062: NEG
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: LD_INT 0
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 1
29088: NEG
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: LIST
29098: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29099: LD_ADDR_VAR 0 64
29103: PUSH
29104: LD_INT 1
29106: NEG
29107: PUSH
29108: LD_INT 2
29110: NEG
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 2
29118: NEG
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: LIST
29144: ST_TO_ADDR
// end ; 2 :
29145: GO 32411
29147: LD_INT 2
29149: DOUBLE
29150: EQUAL
29151: IFTRUE 29155
29153: GO 32410
29155: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
29156: LD_ADDR_VAR 0 29
29160: PUSH
29161: LD_INT 4
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 4
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 5
29184: PUSH
29185: LD_INT 0
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 5
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: PUSH
29202: LD_INT 4
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 3
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 3
29235: PUSH
29236: LD_INT 2
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 5
29246: PUSH
29247: LD_INT 2
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 3
29256: PUSH
29257: LD_INT 3
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 3
29266: PUSH
29267: LD_INT 2
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PUSH
29274: LD_INT 4
29276: PUSH
29277: LD_INT 3
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 4
29286: PUSH
29287: LD_INT 4
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 3
29296: PUSH
29297: LD_INT 4
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: PUSH
29307: LD_INT 3
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 2
29316: PUSH
29317: LD_INT 2
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 4
29326: PUSH
29327: LD_INT 2
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: LD_INT 4
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 0
29346: PUSH
29347: LD_INT 4
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 0
29356: PUSH
29357: LD_INT 3
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 1
29366: PUSH
29367: LD_INT 4
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: LD_INT 5
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 0
29386: PUSH
29387: LD_INT 5
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 1
29396: NEG
29397: PUSH
29398: LD_INT 4
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: LD_INT 3
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: LD_INT 5
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: NEG
29429: PUSH
29430: LD_INT 3
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 3
29439: NEG
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 3
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 2
29462: NEG
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 2
29473: NEG
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 3
29484: NEG
29485: PUSH
29486: LD_INT 1
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 4
29495: NEG
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 4
29506: NEG
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 4
29518: NEG
29519: PUSH
29520: LD_INT 2
29522: NEG
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: NEG
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 4
29541: NEG
29542: PUSH
29543: LD_INT 4
29545: NEG
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 4
29553: NEG
29554: PUSH
29555: LD_INT 5
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 3
29565: NEG
29566: PUSH
29567: LD_INT 4
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 3
29577: NEG
29578: PUSH
29579: LD_INT 3
29581: NEG
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 4
29589: NEG
29590: PUSH
29591: LD_INT 3
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 5
29601: NEG
29602: PUSH
29603: LD_INT 4
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 5
29613: NEG
29614: PUSH
29615: LD_INT 5
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: NEG
29626: PUSH
29627: LD_INT 5
29629: NEG
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: PUSH
29635: LD_INT 5
29637: NEG
29638: PUSH
29639: LD_INT 3
29641: NEG
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
29694: LD_ADDR_VAR 0 30
29698: PUSH
29699: LD_INT 4
29701: PUSH
29702: LD_INT 4
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 4
29711: PUSH
29712: LD_INT 3
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 5
29721: PUSH
29722: LD_INT 4
29724: PUSH
29725: EMPTY
29726: LIST
29727: LIST
29728: PUSH
29729: LD_INT 5
29731: PUSH
29732: LD_INT 5
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 4
29741: PUSH
29742: LD_INT 5
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: PUSH
29749: LD_INT 3
29751: PUSH
29752: LD_INT 4
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 3
29761: PUSH
29762: LD_INT 3
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 5
29771: PUSH
29772: LD_INT 3
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 3
29781: PUSH
29782: LD_INT 5
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: LD_INT 3
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 0
29801: PUSH
29802: LD_INT 2
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: PUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 3
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PUSH
29822: LD_INT 4
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 0
29831: PUSH
29832: LD_INT 4
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 1
29841: NEG
29842: PUSH
29843: LD_INT 3
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 4
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 2
29873: NEG
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 4
29884: NEG
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 4
29895: NEG
29896: PUSH
29897: LD_INT 1
29899: NEG
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 3
29907: NEG
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 3
29918: NEG
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 4
29929: NEG
29930: PUSH
29931: LD_INT 1
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: LD_INT 5
29940: NEG
29941: PUSH
29942: LD_INT 0
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 5
29951: NEG
29952: PUSH
29953: LD_INT 1
29955: NEG
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 5
29963: NEG
29964: PUSH
29965: LD_INT 2
29967: NEG
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: PUSH
29973: LD_INT 3
29975: NEG
29976: PUSH
29977: LD_INT 2
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: PUSH
29984: LD_INT 3
29986: NEG
29987: PUSH
29988: LD_INT 3
29990: NEG
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: PUSH
29996: LD_INT 3
29998: NEG
29999: PUSH
30000: LD_INT 4
30002: NEG
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: NEG
30011: PUSH
30012: LD_INT 3
30014: NEG
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: LD_INT 2
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 3
30034: NEG
30035: PUSH
30036: LD_INT 2
30038: NEG
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 4
30046: NEG
30047: PUSH
30048: LD_INT 3
30050: NEG
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: PUSH
30056: LD_INT 4
30058: NEG
30059: PUSH
30060: LD_INT 4
30062: NEG
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 2
30070: NEG
30071: PUSH
30072: LD_INT 4
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 4
30082: NEG
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: LD_INT 4
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 5
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: LD_INT 4
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 3
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: LD_INT 4
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 5
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 2
30173: PUSH
30174: LD_INT 3
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 2
30184: NEG
30185: PUSH
30186: LD_INT 5
30188: NEG
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
30241: LD_ADDR_VAR 0 31
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: LD_INT 4
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 3
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: LD_INT 4
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: LD_INT 5
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 5
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: LD_INT 4
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 1
30309: NEG
30310: PUSH
30311: LD_INT 3
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PUSH
30318: LD_INT 2
30320: PUSH
30321: LD_INT 5
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: NEG
30331: PUSH
30332: LD_INT 3
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: NEG
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 3
30352: NEG
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 2
30364: NEG
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: LD_INT 2
30375: NEG
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 3
30386: NEG
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 4
30397: NEG
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 4
30408: NEG
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 4
30420: NEG
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: LD_INT 2
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PUSH
30441: LD_INT 4
30443: NEG
30444: PUSH
30445: LD_INT 4
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 4
30455: NEG
30456: PUSH
30457: LD_INT 5
30459: NEG
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 3
30467: NEG
30468: PUSH
30469: LD_INT 4
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 3
30479: NEG
30480: PUSH
30481: LD_INT 3
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 4
30491: NEG
30492: PUSH
30493: LD_INT 3
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 5
30503: NEG
30504: PUSH
30505: LD_INT 4
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 5
30515: NEG
30516: PUSH
30517: LD_INT 5
30519: NEG
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 3
30527: NEG
30528: PUSH
30529: LD_INT 5
30531: NEG
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PUSH
30537: LD_INT 5
30539: NEG
30540: PUSH
30541: LD_INT 3
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: LD_INT 3
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 0
30562: PUSH
30563: LD_INT 4
30565: NEG
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: LD_INT 1
30573: PUSH
30574: LD_INT 3
30576: NEG
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 1
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PUSH
30593: LD_INT 0
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 1
30606: NEG
30607: PUSH
30608: LD_INT 3
30610: NEG
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: PUSH
30616: LD_INT 1
30618: NEG
30619: PUSH
30620: LD_INT 4
30622: NEG
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: LD_INT 2
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 2
30641: NEG
30642: PUSH
30643: LD_INT 4
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 4
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 4
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 5
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 5
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 4
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 3
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 3
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 3
30725: PUSH
30726: LD_INT 2
30728: NEG
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 5
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
30791: LD_ADDR_VAR 0 32
30795: PUSH
30796: LD_INT 4
30798: NEG
30799: PUSH
30800: LD_INT 0
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 4
30809: NEG
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 3
30821: NEG
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 3
30832: NEG
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 4
30843: NEG
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 5
30854: NEG
30855: PUSH
30856: LD_INT 0
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: LD_INT 5
30865: NEG
30866: PUSH
30867: LD_INT 1
30869: NEG
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 5
30877: NEG
30878: PUSH
30879: LD_INT 2
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: NEG
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: NEG
30901: PUSH
30902: LD_INT 3
30904: NEG
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 3
30912: NEG
30913: PUSH
30914: LD_INT 4
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: LD_INT 3
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: NEG
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: EMPTY
30943: LIST
30944: LIST
30945: PUSH
30946: LD_INT 3
30948: NEG
30949: PUSH
30950: LD_INT 2
30952: NEG
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: LD_INT 4
30960: NEG
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 4
30972: NEG
30973: PUSH
30974: LD_INT 4
30976: NEG
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: LD_INT 4
30988: NEG
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 4
30996: NEG
30997: PUSH
30998: LD_INT 2
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: LD_INT 4
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 5
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 4
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: LD_INT 3
31044: NEG
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 3
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: LD_INT 4
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: LD_INT 5
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 3
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: LD_INT 5
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 3
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 3
31120: PUSH
31121: LD_INT 1
31123: NEG
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 4
31131: PUSH
31132: LD_INT 0
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: PUSH
31139: LD_INT 4
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 3
31151: PUSH
31152: LD_INT 1
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 2
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 2
31171: PUSH
31172: LD_INT 1
31174: NEG
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 2
31182: PUSH
31183: LD_INT 2
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 4
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 4
31203: PUSH
31204: LD_INT 4
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 4
31213: PUSH
31214: LD_INT 3
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 5
31223: PUSH
31224: LD_INT 4
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 5
31233: PUSH
31234: LD_INT 5
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 4
31243: PUSH
31244: LD_INT 5
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 3
31253: PUSH
31254: LD_INT 4
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 3
31263: PUSH
31264: LD_INT 3
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 5
31273: PUSH
31274: LD_INT 3
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 3
31283: PUSH
31284: LD_INT 5
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
31338: LD_ADDR_VAR 0 33
31342: PUSH
31343: LD_INT 4
31345: NEG
31346: PUSH
31347: LD_INT 4
31349: NEG
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 4
31357: NEG
31358: PUSH
31359: LD_INT 5
31361: NEG
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 3
31369: NEG
31370: PUSH
31371: LD_INT 4
31373: NEG
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 3
31381: NEG
31382: PUSH
31383: LD_INT 3
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 4
31393: NEG
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 5
31405: NEG
31406: PUSH
31407: LD_INT 4
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 5
31417: NEG
31418: PUSH
31419: LD_INT 5
31421: NEG
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 3
31429: NEG
31430: PUSH
31431: LD_INT 5
31433: NEG
31434: PUSH
31435: EMPTY
31436: LIST
31437: LIST
31438: PUSH
31439: LD_INT 5
31441: NEG
31442: PUSH
31443: LD_INT 3
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 0
31453: PUSH
31454: LD_INT 3
31456: NEG
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: LD_INT 4
31467: NEG
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 1
31475: PUSH
31476: LD_INT 3
31478: NEG
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 2
31489: NEG
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 0
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: EMPTY
31503: LIST
31504: LIST
31505: PUSH
31506: LD_INT 1
31508: NEG
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 4
31524: NEG
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 2
31532: PUSH
31533: LD_INT 2
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 2
31543: NEG
31544: PUSH
31545: LD_INT 4
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 4
31555: PUSH
31556: LD_INT 0
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 4
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 5
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 5
31586: PUSH
31587: LD_INT 1
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 4
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 3
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 3
31627: PUSH
31628: LD_INT 2
31630: NEG
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 5
31638: PUSH
31639: LD_INT 2
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: LD_INT 3
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 4
31668: PUSH
31669: LD_INT 3
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 4
31678: PUSH
31679: LD_INT 4
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 3
31688: PUSH
31689: LD_INT 4
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 3
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 2
31708: PUSH
31709: LD_INT 2
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 4
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: PUSH
31729: LD_INT 4
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 4
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: LD_INT 3
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 4
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 1
31768: PUSH
31769: LD_INT 5
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: LD_INT 0
31778: PUSH
31779: LD_INT 5
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: LD_INT 4
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 3
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 2
31810: PUSH
31811: LD_INT 5
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: LD_INT 3
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
31876: LD_ADDR_VAR 0 34
31880: PUSH
31881: LD_INT 0
31883: PUSH
31884: LD_INT 4
31886: NEG
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 5
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 1
31905: PUSH
31906: LD_INT 4
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 3
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: LD_INT 4
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 5
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: PUSH
31963: LD_INT 3
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: NEG
31974: PUSH
31975: LD_INT 5
31977: NEG
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: LD_INT 3
31985: PUSH
31986: LD_INT 0
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 4
32006: PUSH
32007: LD_INT 0
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 4
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 3
32026: PUSH
32027: LD_INT 1
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: PUSH
32037: LD_INT 0
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 2
32046: PUSH
32047: LD_INT 1
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 2
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 4
32068: PUSH
32069: LD_INT 2
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 4
32078: PUSH
32079: LD_INT 4
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 4
32088: PUSH
32089: LD_INT 3
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 5
32098: PUSH
32099: LD_INT 4
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: PUSH
32106: LD_INT 5
32108: PUSH
32109: LD_INT 5
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: LD_INT 4
32118: PUSH
32119: LD_INT 5
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: LD_INT 4
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 5
32148: PUSH
32149: LD_INT 3
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 3
32158: PUSH
32159: LD_INT 5
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 0
32168: PUSH
32169: LD_INT 3
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 0
32178: PUSH
32179: LD_INT 2
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: PUSH
32189: LD_INT 3
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 1
32198: PUSH
32199: LD_INT 4
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 0
32208: PUSH
32209: LD_INT 4
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: LD_INT 3
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: LD_INT 2
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: LD_INT 4
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 2
32250: NEG
32251: PUSH
32252: LD_INT 2
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 4
32261: NEG
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 4
32272: NEG
32273: PUSH
32274: LD_INT 1
32276: NEG
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 3
32284: NEG
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: NEG
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 4
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 5
32317: NEG
32318: PUSH
32319: LD_INT 0
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 5
32328: NEG
32329: PUSH
32330: LD_INT 1
32332: NEG
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 5
32340: NEG
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: NEG
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: ST_TO_ADDR
// end ; end ;
32408: GO 32411
32410: POP
// case btype of b_depot , b_warehouse :
32411: LD_VAR 0 1
32415: PUSH
32416: LD_INT 0
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32430
32422: LD_INT 1
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32631
32430: POP
// case nation of nation_american :
32431: LD_VAR 0 5
32435: PUSH
32436: LD_INT 1
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32500
32444: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
32445: LD_ADDR_VAR 0 9
32449: PUSH
32450: LD_VAR 0 11
32454: PUSH
32455: LD_VAR 0 12
32459: PUSH
32460: LD_VAR 0 13
32464: PUSH
32465: LD_VAR 0 14
32469: PUSH
32470: LD_VAR 0 15
32474: PUSH
32475: LD_VAR 0 16
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: PUSH
32488: LD_VAR 0 4
32492: PUSH
32493: LD_INT 1
32495: PLUS
32496: ARRAY
32497: ST_TO_ADDR
32498: GO 32629
32500: LD_INT 2
32502: DOUBLE
32503: EQUAL
32504: IFTRUE 32508
32506: GO 32564
32508: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
32509: LD_ADDR_VAR 0 9
32513: PUSH
32514: LD_VAR 0 17
32518: PUSH
32519: LD_VAR 0 18
32523: PUSH
32524: LD_VAR 0 19
32528: PUSH
32529: LD_VAR 0 20
32533: PUSH
32534: LD_VAR 0 21
32538: PUSH
32539: LD_VAR 0 22
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: PUSH
32552: LD_VAR 0 4
32556: PUSH
32557: LD_INT 1
32559: PLUS
32560: ARRAY
32561: ST_TO_ADDR
32562: GO 32629
32564: LD_INT 3
32566: DOUBLE
32567: EQUAL
32568: IFTRUE 32572
32570: GO 32628
32572: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_VAR 0 23
32582: PUSH
32583: LD_VAR 0 24
32587: PUSH
32588: LD_VAR 0 25
32592: PUSH
32593: LD_VAR 0 26
32597: PUSH
32598: LD_VAR 0 27
32602: PUSH
32603: LD_VAR 0 28
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: PUSH
32616: LD_VAR 0 4
32620: PUSH
32621: LD_INT 1
32623: PLUS
32624: ARRAY
32625: ST_TO_ADDR
32626: GO 32629
32628: POP
32629: GO 33184
32631: LD_INT 2
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32645
32637: LD_INT 3
32639: DOUBLE
32640: EQUAL
32641: IFTRUE 32645
32643: GO 32701
32645: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
32646: LD_ADDR_VAR 0 9
32650: PUSH
32651: LD_VAR 0 29
32655: PUSH
32656: LD_VAR 0 30
32660: PUSH
32661: LD_VAR 0 31
32665: PUSH
32666: LD_VAR 0 32
32670: PUSH
32671: LD_VAR 0 33
32675: PUSH
32676: LD_VAR 0 34
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: PUSH
32689: LD_VAR 0 4
32693: PUSH
32694: LD_INT 1
32696: PLUS
32697: ARRAY
32698: ST_TO_ADDR
32699: GO 33184
32701: LD_INT 16
32703: DOUBLE
32704: EQUAL
32705: IFTRUE 32763
32707: LD_INT 17
32709: DOUBLE
32710: EQUAL
32711: IFTRUE 32763
32713: LD_INT 18
32715: DOUBLE
32716: EQUAL
32717: IFTRUE 32763
32719: LD_INT 19
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32763
32725: LD_INT 22
32727: DOUBLE
32728: EQUAL
32729: IFTRUE 32763
32731: LD_INT 20
32733: DOUBLE
32734: EQUAL
32735: IFTRUE 32763
32737: LD_INT 21
32739: DOUBLE
32740: EQUAL
32741: IFTRUE 32763
32743: LD_INT 23
32745: DOUBLE
32746: EQUAL
32747: IFTRUE 32763
32749: LD_INT 24
32751: DOUBLE
32752: EQUAL
32753: IFTRUE 32763
32755: LD_INT 25
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32819
32763: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
32764: LD_ADDR_VAR 0 9
32768: PUSH
32769: LD_VAR 0 35
32773: PUSH
32774: LD_VAR 0 36
32778: PUSH
32779: LD_VAR 0 37
32783: PUSH
32784: LD_VAR 0 38
32788: PUSH
32789: LD_VAR 0 39
32793: PUSH
32794: LD_VAR 0 40
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: PUSH
32807: LD_VAR 0 4
32811: PUSH
32812: LD_INT 1
32814: PLUS
32815: ARRAY
32816: ST_TO_ADDR
32817: GO 33184
32819: LD_INT 6
32821: DOUBLE
32822: EQUAL
32823: IFTRUE 32875
32825: LD_INT 7
32827: DOUBLE
32828: EQUAL
32829: IFTRUE 32875
32831: LD_INT 8
32833: DOUBLE
32834: EQUAL
32835: IFTRUE 32875
32837: LD_INT 13
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32875
32843: LD_INT 12
32845: DOUBLE
32846: EQUAL
32847: IFTRUE 32875
32849: LD_INT 15
32851: DOUBLE
32852: EQUAL
32853: IFTRUE 32875
32855: LD_INT 11
32857: DOUBLE
32858: EQUAL
32859: IFTRUE 32875
32861: LD_INT 14
32863: DOUBLE
32864: EQUAL
32865: IFTRUE 32875
32867: LD_INT 10
32869: DOUBLE
32870: EQUAL
32871: IFTRUE 32875
32873: GO 32931
32875: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
32876: LD_ADDR_VAR 0 9
32880: PUSH
32881: LD_VAR 0 41
32885: PUSH
32886: LD_VAR 0 42
32890: PUSH
32891: LD_VAR 0 43
32895: PUSH
32896: LD_VAR 0 44
32900: PUSH
32901: LD_VAR 0 45
32905: PUSH
32906: LD_VAR 0 46
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: PUSH
32919: LD_VAR 0 4
32923: PUSH
32924: LD_INT 1
32926: PLUS
32927: ARRAY
32928: ST_TO_ADDR
32929: GO 33184
32931: LD_INT 36
32933: DOUBLE
32934: EQUAL
32935: IFTRUE 32939
32937: GO 32995
32939: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
32940: LD_ADDR_VAR 0 9
32944: PUSH
32945: LD_VAR 0 47
32949: PUSH
32950: LD_VAR 0 48
32954: PUSH
32955: LD_VAR 0 49
32959: PUSH
32960: LD_VAR 0 50
32964: PUSH
32965: LD_VAR 0 51
32969: PUSH
32970: LD_VAR 0 52
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: PUSH
32983: LD_VAR 0 4
32987: PUSH
32988: LD_INT 1
32990: PLUS
32991: ARRAY
32992: ST_TO_ADDR
32993: GO 33184
32995: LD_INT 4
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33021
33001: LD_INT 5
33003: DOUBLE
33004: EQUAL
33005: IFTRUE 33021
33007: LD_INT 34
33009: DOUBLE
33010: EQUAL
33011: IFTRUE 33021
33013: LD_INT 37
33015: DOUBLE
33016: EQUAL
33017: IFTRUE 33021
33019: GO 33077
33021: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
33022: LD_ADDR_VAR 0 9
33026: PUSH
33027: LD_VAR 0 53
33031: PUSH
33032: LD_VAR 0 54
33036: PUSH
33037: LD_VAR 0 55
33041: PUSH
33042: LD_VAR 0 56
33046: PUSH
33047: LD_VAR 0 57
33051: PUSH
33052: LD_VAR 0 58
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: PUSH
33065: LD_VAR 0 4
33069: PUSH
33070: LD_INT 1
33072: PLUS
33073: ARRAY
33074: ST_TO_ADDR
33075: GO 33184
33077: LD_INT 31
33079: DOUBLE
33080: EQUAL
33081: IFTRUE 33127
33083: LD_INT 32
33085: DOUBLE
33086: EQUAL
33087: IFTRUE 33127
33089: LD_INT 33
33091: DOUBLE
33092: EQUAL
33093: IFTRUE 33127
33095: LD_INT 27
33097: DOUBLE
33098: EQUAL
33099: IFTRUE 33127
33101: LD_INT 26
33103: DOUBLE
33104: EQUAL
33105: IFTRUE 33127
33107: LD_INT 28
33109: DOUBLE
33110: EQUAL
33111: IFTRUE 33127
33113: LD_INT 29
33115: DOUBLE
33116: EQUAL
33117: IFTRUE 33127
33119: LD_INT 30
33121: DOUBLE
33122: EQUAL
33123: IFTRUE 33127
33125: GO 33183
33127: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
33128: LD_ADDR_VAR 0 9
33132: PUSH
33133: LD_VAR 0 59
33137: PUSH
33138: LD_VAR 0 60
33142: PUSH
33143: LD_VAR 0 61
33147: PUSH
33148: LD_VAR 0 62
33152: PUSH
33153: LD_VAR 0 63
33157: PUSH
33158: LD_VAR 0 64
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: PUSH
33171: LD_VAR 0 4
33175: PUSH
33176: LD_INT 1
33178: PLUS
33179: ARRAY
33180: ST_TO_ADDR
33181: GO 33184
33183: POP
// temp_list2 = [ ] ;
33184: LD_ADDR_VAR 0 10
33188: PUSH
33189: EMPTY
33190: ST_TO_ADDR
// for i in temp_list do
33191: LD_ADDR_VAR 0 8
33195: PUSH
33196: LD_VAR 0 9
33200: PUSH
33201: FOR_IN
33202: IFFALSE 33254
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
33204: LD_ADDR_VAR 0 10
33208: PUSH
33209: LD_VAR 0 10
33213: PUSH
33214: LD_VAR 0 8
33218: PUSH
33219: LD_INT 1
33221: ARRAY
33222: PUSH
33223: LD_VAR 0 2
33227: PLUS
33228: PUSH
33229: LD_VAR 0 8
33233: PUSH
33234: LD_INT 2
33236: ARRAY
33237: PUSH
33238: LD_VAR 0 3
33242: PLUS
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: EMPTY
33249: LIST
33250: ADD
33251: ST_TO_ADDR
33252: GO 33201
33254: POP
33255: POP
// result = temp_list2 ;
33256: LD_ADDR_VAR 0 7
33260: PUSH
33261: LD_VAR 0 10
33265: ST_TO_ADDR
// end ;
33266: LD_VAR 0 7
33270: RET
// export function EnemyInRange ( unit , dist ) ; begin
33271: LD_INT 0
33273: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
33274: LD_ADDR_VAR 0 3
33278: PUSH
33279: LD_VAR 0 1
33283: PPUSH
33284: CALL_OW 255
33288: PPUSH
33289: LD_VAR 0 1
33293: PPUSH
33294: CALL_OW 250
33298: PPUSH
33299: LD_VAR 0 1
33303: PPUSH
33304: CALL_OW 251
33308: PPUSH
33309: LD_VAR 0 2
33313: PPUSH
33314: CALL 6667 0 4
33318: PUSH
33319: LD_INT 4
33321: ARRAY
33322: ST_TO_ADDR
// end ;
33323: LD_VAR 0 3
33327: RET
// export function PlayerSeeMe ( unit ) ; begin
33328: LD_INT 0
33330: PPUSH
// result := See ( your_side , unit ) ;
33331: LD_ADDR_VAR 0 2
33335: PUSH
33336: LD_OWVAR 2
33340: PPUSH
33341: LD_VAR 0 1
33345: PPUSH
33346: CALL_OW 292
33350: ST_TO_ADDR
// end ;
33351: LD_VAR 0 2
33355: RET
// export function ReverseDir ( unit ) ; begin
33356: LD_INT 0
33358: PPUSH
// if not unit then
33359: LD_VAR 0 1
33363: NOT
33364: IFFALSE 33368
// exit ;
33366: GO 33391
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
33368: LD_ADDR_VAR 0 2
33372: PUSH
33373: LD_VAR 0 1
33377: PPUSH
33378: CALL_OW 254
33382: PUSH
33383: LD_INT 3
33385: PLUS
33386: PUSH
33387: LD_INT 6
33389: MOD
33390: ST_TO_ADDR
// end ;
33391: LD_VAR 0 2
33395: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
33396: LD_INT 0
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
// if not hexes then
33403: LD_VAR 0 2
33407: NOT
33408: IFFALSE 33412
// exit ;
33410: GO 33560
// dist := 9999 ;
33412: LD_ADDR_VAR 0 5
33416: PUSH
33417: LD_INT 9999
33419: ST_TO_ADDR
// for i = 1 to hexes do
33420: LD_ADDR_VAR 0 4
33424: PUSH
33425: DOUBLE
33426: LD_INT 1
33428: DEC
33429: ST_TO_ADDR
33430: LD_VAR 0 2
33434: PUSH
33435: FOR_TO
33436: IFFALSE 33548
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
33438: LD_VAR 0 1
33442: PPUSH
33443: LD_VAR 0 2
33447: PUSH
33448: LD_VAR 0 4
33452: ARRAY
33453: PUSH
33454: LD_INT 1
33456: ARRAY
33457: PPUSH
33458: LD_VAR 0 2
33462: PUSH
33463: LD_VAR 0 4
33467: ARRAY
33468: PUSH
33469: LD_INT 2
33471: ARRAY
33472: PPUSH
33473: CALL_OW 297
33477: PUSH
33478: LD_VAR 0 5
33482: LESS
33483: IFFALSE 33546
// begin hex := hexes [ i ] ;
33485: LD_ADDR_VAR 0 7
33489: PUSH
33490: LD_VAR 0 2
33494: PUSH
33495: LD_VAR 0 4
33499: ARRAY
33500: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33501: LD_ADDR_VAR 0 5
33505: PUSH
33506: LD_VAR 0 1
33510: PPUSH
33511: LD_VAR 0 2
33515: PUSH
33516: LD_VAR 0 4
33520: ARRAY
33521: PUSH
33522: LD_INT 1
33524: ARRAY
33525: PPUSH
33526: LD_VAR 0 2
33530: PUSH
33531: LD_VAR 0 4
33535: ARRAY
33536: PUSH
33537: LD_INT 2
33539: ARRAY
33540: PPUSH
33541: CALL_OW 297
33545: ST_TO_ADDR
// end ; end ;
33546: GO 33435
33548: POP
33549: POP
// result := hex ;
33550: LD_ADDR_VAR 0 3
33554: PUSH
33555: LD_VAR 0 7
33559: ST_TO_ADDR
// end ;
33560: LD_VAR 0 3
33564: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
33565: LD_INT 0
33567: PPUSH
33568: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
33569: LD_VAR 0 1
33573: NOT
33574: PUSH
33575: LD_VAR 0 1
33579: PUSH
33580: LD_INT 21
33582: PUSH
33583: LD_INT 2
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 23
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PPUSH
33604: CALL_OW 69
33608: IN
33609: NOT
33610: OR
33611: IFFALSE 33615
// exit ;
33613: GO 33662
// for i = 1 to 3 do
33615: LD_ADDR_VAR 0 3
33619: PUSH
33620: DOUBLE
33621: LD_INT 1
33623: DEC
33624: ST_TO_ADDR
33625: LD_INT 3
33627: PUSH
33628: FOR_TO
33629: IFFALSE 33660
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
33631: LD_VAR 0 1
33635: PPUSH
33636: CALL_OW 250
33640: PPUSH
33641: LD_VAR 0 1
33645: PPUSH
33646: CALL_OW 251
33650: PPUSH
33651: LD_INT 1
33653: PPUSH
33654: CALL_OW 453
33658: GO 33628
33660: POP
33661: POP
// end ;
33662: LD_VAR 0 2
33666: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
33667: LD_INT 0
33669: PPUSH
33670: PPUSH
33671: PPUSH
33672: PPUSH
33673: PPUSH
33674: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
33675: LD_VAR 0 1
33679: NOT
33680: PUSH
33681: LD_VAR 0 2
33685: NOT
33686: OR
33687: PUSH
33688: LD_VAR 0 1
33692: PPUSH
33693: CALL_OW 314
33697: OR
33698: IFFALSE 33702
// exit ;
33700: GO 34143
// x := GetX ( enemy_unit ) ;
33702: LD_ADDR_VAR 0 7
33706: PUSH
33707: LD_VAR 0 2
33711: PPUSH
33712: CALL_OW 250
33716: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
33717: LD_ADDR_VAR 0 8
33721: PUSH
33722: LD_VAR 0 2
33726: PPUSH
33727: CALL_OW 251
33731: ST_TO_ADDR
// if not x or not y then
33732: LD_VAR 0 7
33736: NOT
33737: PUSH
33738: LD_VAR 0 8
33742: NOT
33743: OR
33744: IFFALSE 33748
// exit ;
33746: GO 34143
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
33748: LD_ADDR_VAR 0 6
33752: PUSH
33753: LD_VAR 0 7
33757: PPUSH
33758: LD_INT 0
33760: PPUSH
33761: LD_INT 4
33763: PPUSH
33764: CALL_OW 272
33768: PUSH
33769: LD_VAR 0 8
33773: PPUSH
33774: LD_INT 0
33776: PPUSH
33777: LD_INT 4
33779: PPUSH
33780: CALL_OW 273
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_VAR 0 7
33793: PPUSH
33794: LD_INT 1
33796: PPUSH
33797: LD_INT 4
33799: PPUSH
33800: CALL_OW 272
33804: PUSH
33805: LD_VAR 0 8
33809: PPUSH
33810: LD_INT 1
33812: PPUSH
33813: LD_INT 4
33815: PPUSH
33816: CALL_OW 273
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_VAR 0 7
33829: PPUSH
33830: LD_INT 2
33832: PPUSH
33833: LD_INT 4
33835: PPUSH
33836: CALL_OW 272
33840: PUSH
33841: LD_VAR 0 8
33845: PPUSH
33846: LD_INT 2
33848: PPUSH
33849: LD_INT 4
33851: PPUSH
33852: CALL_OW 273
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_VAR 0 7
33865: PPUSH
33866: LD_INT 3
33868: PPUSH
33869: LD_INT 4
33871: PPUSH
33872: CALL_OW 272
33876: PUSH
33877: LD_VAR 0 8
33881: PPUSH
33882: LD_INT 3
33884: PPUSH
33885: LD_INT 4
33887: PPUSH
33888: CALL_OW 273
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_VAR 0 7
33901: PPUSH
33902: LD_INT 4
33904: PPUSH
33905: LD_INT 4
33907: PPUSH
33908: CALL_OW 272
33912: PUSH
33913: LD_VAR 0 8
33917: PPUSH
33918: LD_INT 4
33920: PPUSH
33921: LD_INT 4
33923: PPUSH
33924: CALL_OW 273
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_VAR 0 7
33937: PPUSH
33938: LD_INT 5
33940: PPUSH
33941: LD_INT 4
33943: PPUSH
33944: CALL_OW 272
33948: PUSH
33949: LD_VAR 0 8
33953: PPUSH
33954: LD_INT 5
33956: PPUSH
33957: LD_INT 4
33959: PPUSH
33960: CALL_OW 273
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: ST_TO_ADDR
// for i = tmp downto 1 do
33977: LD_ADDR_VAR 0 4
33981: PUSH
33982: DOUBLE
33983: LD_VAR 0 6
33987: INC
33988: ST_TO_ADDR
33989: LD_INT 1
33991: PUSH
33992: FOR_DOWNTO
33993: IFFALSE 34094
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
33995: LD_VAR 0 6
33999: PUSH
34000: LD_VAR 0 4
34004: ARRAY
34005: PUSH
34006: LD_INT 1
34008: ARRAY
34009: PPUSH
34010: LD_VAR 0 6
34014: PUSH
34015: LD_VAR 0 4
34019: ARRAY
34020: PUSH
34021: LD_INT 2
34023: ARRAY
34024: PPUSH
34025: CALL_OW 488
34029: NOT
34030: PUSH
34031: LD_VAR 0 6
34035: PUSH
34036: LD_VAR 0 4
34040: ARRAY
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PPUSH
34046: LD_VAR 0 6
34050: PUSH
34051: LD_VAR 0 4
34055: ARRAY
34056: PUSH
34057: LD_INT 2
34059: ARRAY
34060: PPUSH
34061: CALL_OW 428
34065: PUSH
34066: LD_INT 0
34068: NONEQUAL
34069: OR
34070: IFFALSE 34092
// tmp := Delete ( tmp , i ) ;
34072: LD_ADDR_VAR 0 6
34076: PUSH
34077: LD_VAR 0 6
34081: PPUSH
34082: LD_VAR 0 4
34086: PPUSH
34087: CALL_OW 3
34091: ST_TO_ADDR
34092: GO 33992
34094: POP
34095: POP
// j := GetClosestHex ( unit , tmp ) ;
34096: LD_ADDR_VAR 0 5
34100: PUSH
34101: LD_VAR 0 1
34105: PPUSH
34106: LD_VAR 0 6
34110: PPUSH
34111: CALL 33396 0 2
34115: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
34116: LD_VAR 0 1
34120: PPUSH
34121: LD_VAR 0 5
34125: PUSH
34126: LD_INT 1
34128: ARRAY
34129: PPUSH
34130: LD_VAR 0 5
34134: PUSH
34135: LD_INT 2
34137: ARRAY
34138: PPUSH
34139: CALL_OW 111
// end ;
34143: LD_VAR 0 3
34147: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
34148: LD_INT 0
34150: PPUSH
34151: PPUSH
34152: PPUSH
// uc_side = 0 ;
34153: LD_ADDR_OWVAR 20
34157: PUSH
34158: LD_INT 0
34160: ST_TO_ADDR
// uc_nation = 0 ;
34161: LD_ADDR_OWVAR 21
34165: PUSH
34166: LD_INT 0
34168: ST_TO_ADDR
// InitHc_All ( ) ;
34169: CALL_OW 584
// InitVc ;
34173: CALL_OW 20
// if mastodonts then
34177: LD_VAR 0 6
34181: IFFALSE 34248
// for i = 1 to mastodonts do
34183: LD_ADDR_VAR 0 11
34187: PUSH
34188: DOUBLE
34189: LD_INT 1
34191: DEC
34192: ST_TO_ADDR
34193: LD_VAR 0 6
34197: PUSH
34198: FOR_TO
34199: IFFALSE 34246
// begin vc_chassis := 31 ;
34201: LD_ADDR_OWVAR 37
34205: PUSH
34206: LD_INT 31
34208: ST_TO_ADDR
// vc_control := control_rider ;
34209: LD_ADDR_OWVAR 38
34213: PUSH
34214: LD_INT 4
34216: ST_TO_ADDR
// animal := CreateVehicle ;
34217: LD_ADDR_VAR 0 12
34221: PUSH
34222: CALL_OW 45
34226: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34227: LD_VAR 0 12
34231: PPUSH
34232: LD_VAR 0 8
34236: PPUSH
34237: LD_INT 0
34239: PPUSH
34240: CALL 36383 0 3
// end ;
34244: GO 34198
34246: POP
34247: POP
// if horses then
34248: LD_VAR 0 5
34252: IFFALSE 34319
// for i = 1 to horses do
34254: LD_ADDR_VAR 0 11
34258: PUSH
34259: DOUBLE
34260: LD_INT 1
34262: DEC
34263: ST_TO_ADDR
34264: LD_VAR 0 5
34268: PUSH
34269: FOR_TO
34270: IFFALSE 34317
// begin hc_class := 21 ;
34272: LD_ADDR_OWVAR 28
34276: PUSH
34277: LD_INT 21
34279: ST_TO_ADDR
// hc_gallery :=  ;
34280: LD_ADDR_OWVAR 33
34284: PUSH
34285: LD_STRING 
34287: ST_TO_ADDR
// animal := CreateHuman ;
34288: LD_ADDR_VAR 0 12
34292: PUSH
34293: CALL_OW 44
34297: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34298: LD_VAR 0 12
34302: PPUSH
34303: LD_VAR 0 8
34307: PPUSH
34308: LD_INT 0
34310: PPUSH
34311: CALL 36383 0 3
// end ;
34315: GO 34269
34317: POP
34318: POP
// if birds then
34319: LD_VAR 0 1
34323: IFFALSE 34390
// for i = 1 to birds do
34325: LD_ADDR_VAR 0 11
34329: PUSH
34330: DOUBLE
34331: LD_INT 1
34333: DEC
34334: ST_TO_ADDR
34335: LD_VAR 0 1
34339: PUSH
34340: FOR_TO
34341: IFFALSE 34388
// begin hc_class = 18 ;
34343: LD_ADDR_OWVAR 28
34347: PUSH
34348: LD_INT 18
34350: ST_TO_ADDR
// hc_gallery =  ;
34351: LD_ADDR_OWVAR 33
34355: PUSH
34356: LD_STRING 
34358: ST_TO_ADDR
// animal := CreateHuman ;
34359: LD_ADDR_VAR 0 12
34363: PUSH
34364: CALL_OW 44
34368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34369: LD_VAR 0 12
34373: PPUSH
34374: LD_VAR 0 8
34378: PPUSH
34379: LD_INT 0
34381: PPUSH
34382: CALL 36383 0 3
// end ;
34386: GO 34340
34388: POP
34389: POP
// if tigers then
34390: LD_VAR 0 2
34394: IFFALSE 34478
// for i = 1 to tigers do
34396: LD_ADDR_VAR 0 11
34400: PUSH
34401: DOUBLE
34402: LD_INT 1
34404: DEC
34405: ST_TO_ADDR
34406: LD_VAR 0 2
34410: PUSH
34411: FOR_TO
34412: IFFALSE 34476
// begin hc_class = class_tiger ;
34414: LD_ADDR_OWVAR 28
34418: PUSH
34419: LD_INT 14
34421: ST_TO_ADDR
// hc_gallery =  ;
34422: LD_ADDR_OWVAR 33
34426: PUSH
34427: LD_STRING 
34429: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
34430: LD_ADDR_OWVAR 35
34434: PUSH
34435: LD_INT 7
34437: NEG
34438: PPUSH
34439: LD_INT 7
34441: PPUSH
34442: CALL_OW 12
34446: ST_TO_ADDR
// animal := CreateHuman ;
34447: LD_ADDR_VAR 0 12
34451: PUSH
34452: CALL_OW 44
34456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34457: LD_VAR 0 12
34461: PPUSH
34462: LD_VAR 0 8
34466: PPUSH
34467: LD_INT 0
34469: PPUSH
34470: CALL 36383 0 3
// end ;
34474: GO 34411
34476: POP
34477: POP
// if apemans then
34478: LD_VAR 0 3
34482: IFFALSE 34605
// for i = 1 to apemans do
34484: LD_ADDR_VAR 0 11
34488: PUSH
34489: DOUBLE
34490: LD_INT 1
34492: DEC
34493: ST_TO_ADDR
34494: LD_VAR 0 3
34498: PUSH
34499: FOR_TO
34500: IFFALSE 34603
// begin hc_class = class_apeman ;
34502: LD_ADDR_OWVAR 28
34506: PUSH
34507: LD_INT 12
34509: ST_TO_ADDR
// hc_gallery =  ;
34510: LD_ADDR_OWVAR 33
34514: PUSH
34515: LD_STRING 
34517: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
34518: LD_ADDR_OWVAR 35
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PPUSH
34527: LD_INT 2
34529: PPUSH
34530: CALL_OW 12
34534: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
34535: LD_ADDR_OWVAR 31
34539: PUSH
34540: LD_INT 1
34542: PPUSH
34543: LD_INT 3
34545: PPUSH
34546: CALL_OW 12
34550: PUSH
34551: LD_INT 1
34553: PPUSH
34554: LD_INT 3
34556: PPUSH
34557: CALL_OW 12
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: ST_TO_ADDR
// animal := CreateHuman ;
34574: LD_ADDR_VAR 0 12
34578: PUSH
34579: CALL_OW 44
34583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34584: LD_VAR 0 12
34588: PPUSH
34589: LD_VAR 0 8
34593: PPUSH
34594: LD_INT 0
34596: PPUSH
34597: CALL 36383 0 3
// end ;
34601: GO 34499
34603: POP
34604: POP
// if enchidnas then
34605: LD_VAR 0 4
34609: IFFALSE 34676
// for i = 1 to enchidnas do
34611: LD_ADDR_VAR 0 11
34615: PUSH
34616: DOUBLE
34617: LD_INT 1
34619: DEC
34620: ST_TO_ADDR
34621: LD_VAR 0 4
34625: PUSH
34626: FOR_TO
34627: IFFALSE 34674
// begin hc_class = 13 ;
34629: LD_ADDR_OWVAR 28
34633: PUSH
34634: LD_INT 13
34636: ST_TO_ADDR
// hc_gallery =  ;
34637: LD_ADDR_OWVAR 33
34641: PUSH
34642: LD_STRING 
34644: ST_TO_ADDR
// animal := CreateHuman ;
34645: LD_ADDR_VAR 0 12
34649: PUSH
34650: CALL_OW 44
34654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
34655: LD_VAR 0 12
34659: PPUSH
34660: LD_VAR 0 8
34664: PPUSH
34665: LD_INT 0
34667: PPUSH
34668: CALL 36383 0 3
// end ;
34672: GO 34626
34674: POP
34675: POP
// if fishes then
34676: LD_VAR 0 7
34680: IFFALSE 34747
// for i = 1 to fishes do
34682: LD_ADDR_VAR 0 11
34686: PUSH
34687: DOUBLE
34688: LD_INT 1
34690: DEC
34691: ST_TO_ADDR
34692: LD_VAR 0 7
34696: PUSH
34697: FOR_TO
34698: IFFALSE 34745
// begin hc_class = 20 ;
34700: LD_ADDR_OWVAR 28
34704: PUSH
34705: LD_INT 20
34707: ST_TO_ADDR
// hc_gallery =  ;
34708: LD_ADDR_OWVAR 33
34712: PUSH
34713: LD_STRING 
34715: ST_TO_ADDR
// animal := CreateHuman ;
34716: LD_ADDR_VAR 0 12
34720: PUSH
34721: CALL_OW 44
34725: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
34726: LD_VAR 0 12
34730: PPUSH
34731: LD_VAR 0 9
34735: PPUSH
34736: LD_INT 0
34738: PPUSH
34739: CALL 36383 0 3
// end ;
34743: GO 34697
34745: POP
34746: POP
// end ;
34747: LD_VAR 0 10
34751: RET
// export function WantHeal ( sci , unit ) ; begin
34752: LD_INT 0
34754: PPUSH
// if GetTaskList ( sci ) > 0 then
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 437
34764: PUSH
34765: LD_INT 0
34767: GREATER
34768: IFFALSE 34838
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 437
34779: PUSH
34780: LD_INT 1
34782: ARRAY
34783: PUSH
34784: LD_INT 1
34786: ARRAY
34787: PUSH
34788: LD_STRING l
34790: EQUAL
34791: PUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: CALL_OW 437
34801: PUSH
34802: LD_INT 1
34804: ARRAY
34805: PUSH
34806: LD_INT 4
34808: ARRAY
34809: PUSH
34810: LD_VAR 0 2
34814: EQUAL
34815: AND
34816: IFFALSE 34828
// result := true else
34818: LD_ADDR_VAR 0 3
34822: PUSH
34823: LD_INT 1
34825: ST_TO_ADDR
34826: GO 34836
// result := false ;
34828: LD_ADDR_VAR 0 3
34832: PUSH
34833: LD_INT 0
34835: ST_TO_ADDR
// end else
34836: GO 34846
// result := false ;
34838: LD_ADDR_VAR 0 3
34842: PUSH
34843: LD_INT 0
34845: ST_TO_ADDR
// end ;
34846: LD_VAR 0 3
34850: RET
// export function HealTarget ( sci ) ; begin
34851: LD_INT 0
34853: PPUSH
// if not sci then
34854: LD_VAR 0 1
34858: NOT
34859: IFFALSE 34863
// exit ;
34861: GO 34928
// result := 0 ;
34863: LD_ADDR_VAR 0 2
34867: PUSH
34868: LD_INT 0
34870: ST_TO_ADDR
// if GetTaskList ( sci ) then
34871: LD_VAR 0 1
34875: PPUSH
34876: CALL_OW 437
34880: IFFALSE 34928
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
34882: LD_VAR 0 1
34886: PPUSH
34887: CALL_OW 437
34891: PUSH
34892: LD_INT 1
34894: ARRAY
34895: PUSH
34896: LD_INT 1
34898: ARRAY
34899: PUSH
34900: LD_STRING l
34902: EQUAL
34903: IFFALSE 34928
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
34905: LD_ADDR_VAR 0 2
34909: PUSH
34910: LD_VAR 0 1
34914: PPUSH
34915: CALL_OW 437
34919: PUSH
34920: LD_INT 1
34922: ARRAY
34923: PUSH
34924: LD_INT 4
34926: ARRAY
34927: ST_TO_ADDR
// end ;
34928: LD_VAR 0 2
34932: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
34933: LD_INT 0
34935: PPUSH
34936: PPUSH
34937: PPUSH
34938: PPUSH
// if not base_units then
34939: LD_VAR 0 1
34943: NOT
34944: IFFALSE 34948
// exit ;
34946: GO 35035
// result := false ;
34948: LD_ADDR_VAR 0 2
34952: PUSH
34953: LD_INT 0
34955: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
34956: LD_ADDR_VAR 0 5
34960: PUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: LD_INT 21
34968: PUSH
34969: LD_INT 3
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PPUSH
34976: CALL_OW 72
34980: ST_TO_ADDR
// if not tmp then
34981: LD_VAR 0 5
34985: NOT
34986: IFFALSE 34990
// exit ;
34988: GO 35035
// for i in tmp do
34990: LD_ADDR_VAR 0 3
34994: PUSH
34995: LD_VAR 0 5
34999: PUSH
35000: FOR_IN
35001: IFFALSE 35033
// begin result := EnemyInRange ( i , 22 ) ;
35003: LD_ADDR_VAR 0 2
35007: PUSH
35008: LD_VAR 0 3
35012: PPUSH
35013: LD_INT 22
35015: PPUSH
35016: CALL 33271 0 2
35020: ST_TO_ADDR
// if result then
35021: LD_VAR 0 2
35025: IFFALSE 35031
// exit ;
35027: POP
35028: POP
35029: GO 35035
// end ;
35031: GO 35000
35033: POP
35034: POP
// end ;
35035: LD_VAR 0 2
35039: RET
// export function FilterByTag ( units , tag ) ; begin
35040: LD_INT 0
35042: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
35043: LD_ADDR_VAR 0 3
35047: PUSH
35048: LD_VAR 0 1
35052: PPUSH
35053: LD_INT 120
35055: PUSH
35056: LD_VAR 0 2
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PPUSH
35065: CALL_OW 72
35069: ST_TO_ADDR
// end ;
35070: LD_VAR 0 3
35074: RET
// export function IsDriver ( un ) ; begin
35075: LD_INT 0
35077: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
35078: LD_ADDR_VAR 0 2
35082: PUSH
35083: LD_VAR 0 1
35087: PUSH
35088: LD_INT 55
35090: PUSH
35091: EMPTY
35092: LIST
35093: PPUSH
35094: CALL_OW 69
35098: IN
35099: ST_TO_ADDR
// end ;
35100: LD_VAR 0 2
35104: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
35105: LD_INT 0
35107: PPUSH
35108: PPUSH
// list := [ ] ;
35109: LD_ADDR_VAR 0 5
35113: PUSH
35114: EMPTY
35115: ST_TO_ADDR
// case d of 0 :
35116: LD_VAR 0 3
35120: PUSH
35121: LD_INT 0
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35129
35127: GO 35262
35129: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
35130: LD_ADDR_VAR 0 5
35134: PUSH
35135: LD_VAR 0 1
35139: PUSH
35140: LD_INT 4
35142: MINUS
35143: PUSH
35144: LD_VAR 0 2
35148: PUSH
35149: LD_INT 4
35151: MINUS
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: PUSH
35161: LD_VAR 0 1
35165: PUSH
35166: LD_INT 3
35168: MINUS
35169: PUSH
35170: LD_VAR 0 2
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: LIST
35182: PUSH
35183: LD_VAR 0 1
35187: PUSH
35188: LD_INT 4
35190: PLUS
35191: PUSH
35192: LD_VAR 0 2
35196: PUSH
35197: LD_INT 4
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: LIST
35204: PUSH
35205: LD_VAR 0 1
35209: PUSH
35210: LD_INT 3
35212: PLUS
35213: PUSH
35214: LD_VAR 0 2
35218: PUSH
35219: LD_INT 3
35221: PLUS
35222: PUSH
35223: LD_INT 5
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: PUSH
35231: LD_VAR 0 1
35235: PUSH
35236: LD_VAR 0 2
35240: PUSH
35241: LD_INT 4
35243: PLUS
35244: PUSH
35245: LD_INT 0
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: ST_TO_ADDR
// end ; 1 :
35260: GO 35960
35262: LD_INT 1
35264: DOUBLE
35265: EQUAL
35266: IFTRUE 35270
35268: GO 35403
35270: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
35271: LD_ADDR_VAR 0 5
35275: PUSH
35276: LD_VAR 0 1
35280: PUSH
35281: LD_VAR 0 2
35285: PUSH
35286: LD_INT 4
35288: MINUS
35289: PUSH
35290: LD_INT 3
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: PUSH
35298: LD_VAR 0 1
35302: PUSH
35303: LD_INT 3
35305: MINUS
35306: PUSH
35307: LD_VAR 0 2
35311: PUSH
35312: LD_INT 3
35314: MINUS
35315: PUSH
35316: LD_INT 2
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: LIST
35323: PUSH
35324: LD_VAR 0 1
35328: PUSH
35329: LD_INT 4
35331: MINUS
35332: PUSH
35333: LD_VAR 0 2
35337: PUSH
35338: LD_INT 1
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: PUSH
35346: LD_VAR 0 1
35350: PUSH
35351: LD_VAR 0 2
35355: PUSH
35356: LD_INT 3
35358: PLUS
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: LIST
35367: PUSH
35368: LD_VAR 0 1
35372: PUSH
35373: LD_INT 4
35375: PLUS
35376: PUSH
35377: LD_VAR 0 2
35381: PUSH
35382: LD_INT 4
35384: PLUS
35385: PUSH
35386: LD_INT 5
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: ST_TO_ADDR
// end ; 2 :
35401: GO 35960
35403: LD_INT 2
35405: DOUBLE
35406: EQUAL
35407: IFTRUE 35411
35409: GO 35540
35411: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
35412: LD_ADDR_VAR 0 5
35416: PUSH
35417: LD_VAR 0 1
35421: PUSH
35422: LD_VAR 0 2
35426: PUSH
35427: LD_INT 3
35429: MINUS
35430: PUSH
35431: LD_INT 3
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: PUSH
35439: LD_VAR 0 1
35443: PUSH
35444: LD_INT 4
35446: PLUS
35447: PUSH
35448: LD_VAR 0 2
35452: PUSH
35453: LD_INT 4
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: LIST
35460: PUSH
35461: LD_VAR 0 1
35465: PUSH
35466: LD_VAR 0 2
35470: PUSH
35471: LD_INT 4
35473: PLUS
35474: PUSH
35475: LD_INT 0
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: LIST
35482: PUSH
35483: LD_VAR 0 1
35487: PUSH
35488: LD_INT 3
35490: MINUS
35491: PUSH
35492: LD_VAR 0 2
35496: PUSH
35497: LD_INT 1
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: PUSH
35505: LD_VAR 0 1
35509: PUSH
35510: LD_INT 4
35512: MINUS
35513: PUSH
35514: LD_VAR 0 2
35518: PUSH
35519: LD_INT 4
35521: MINUS
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: LIST
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: ST_TO_ADDR
// end ; 3 :
35538: GO 35960
35540: LD_INT 3
35542: DOUBLE
35543: EQUAL
35544: IFTRUE 35548
35546: GO 35681
35548: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
35549: LD_ADDR_VAR 0 5
35553: PUSH
35554: LD_VAR 0 1
35558: PUSH
35559: LD_INT 3
35561: PLUS
35562: PUSH
35563: LD_VAR 0 2
35567: PUSH
35568: LD_INT 4
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: PUSH
35576: LD_VAR 0 1
35580: PUSH
35581: LD_INT 4
35583: PLUS
35584: PUSH
35585: LD_VAR 0 2
35589: PUSH
35590: LD_INT 4
35592: PLUS
35593: PUSH
35594: LD_INT 5
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: PUSH
35602: LD_VAR 0 1
35606: PUSH
35607: LD_INT 4
35609: MINUS
35610: PUSH
35611: LD_VAR 0 2
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: LIST
35623: PUSH
35624: LD_VAR 0 1
35628: PUSH
35629: LD_VAR 0 2
35633: PUSH
35634: LD_INT 4
35636: MINUS
35637: PUSH
35638: LD_INT 3
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: LIST
35645: PUSH
35646: LD_VAR 0 1
35650: PUSH
35651: LD_INT 3
35653: MINUS
35654: PUSH
35655: LD_VAR 0 2
35659: PUSH
35660: LD_INT 3
35662: MINUS
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: ST_TO_ADDR
// end ; 4 :
35679: GO 35960
35681: LD_INT 4
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35689
35687: GO 35822
35689: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
35690: LD_ADDR_VAR 0 5
35694: PUSH
35695: LD_VAR 0 1
35699: PUSH
35700: LD_VAR 0 2
35704: PUSH
35705: LD_INT 4
35707: PLUS
35708: PUSH
35709: LD_INT 0
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: LIST
35716: PUSH
35717: LD_VAR 0 1
35721: PUSH
35722: LD_INT 3
35724: PLUS
35725: PUSH
35726: LD_VAR 0 2
35730: PUSH
35731: LD_INT 3
35733: PLUS
35734: PUSH
35735: LD_INT 5
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: PUSH
35743: LD_VAR 0 1
35747: PUSH
35748: LD_INT 4
35750: PLUS
35751: PUSH
35752: LD_VAR 0 2
35756: PUSH
35757: LD_INT 4
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: PUSH
35765: LD_VAR 0 1
35769: PUSH
35770: LD_VAR 0 2
35774: PUSH
35775: LD_INT 3
35777: MINUS
35778: PUSH
35779: LD_INT 3
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: LIST
35786: PUSH
35787: LD_VAR 0 1
35791: PUSH
35792: LD_INT 4
35794: MINUS
35795: PUSH
35796: LD_VAR 0 2
35800: PUSH
35801: LD_INT 4
35803: MINUS
35804: PUSH
35805: LD_INT 2
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: ST_TO_ADDR
// end ; 5 :
35820: GO 35960
35822: LD_INT 5
35824: DOUBLE
35825: EQUAL
35826: IFTRUE 35830
35828: GO 35959
35830: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
35831: LD_ADDR_VAR 0 5
35835: PUSH
35836: LD_VAR 0 1
35840: PUSH
35841: LD_INT 4
35843: MINUS
35844: PUSH
35845: LD_VAR 0 2
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: LIST
35857: PUSH
35858: LD_VAR 0 1
35862: PUSH
35863: LD_VAR 0 2
35867: PUSH
35868: LD_INT 4
35870: MINUS
35871: PUSH
35872: LD_INT 3
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: LIST
35879: PUSH
35880: LD_VAR 0 1
35884: PUSH
35885: LD_INT 4
35887: PLUS
35888: PUSH
35889: LD_VAR 0 2
35893: PUSH
35894: LD_INT 4
35896: PLUS
35897: PUSH
35898: LD_INT 5
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: LIST
35905: PUSH
35906: LD_VAR 0 1
35910: PUSH
35911: LD_INT 3
35913: PLUS
35914: PUSH
35915: LD_VAR 0 2
35919: PUSH
35920: LD_INT 4
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: PUSH
35928: LD_VAR 0 1
35932: PUSH
35933: LD_VAR 0 2
35937: PUSH
35938: LD_INT 3
35940: PLUS
35941: PUSH
35942: LD_INT 0
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// end ; end ;
35957: GO 35960
35959: POP
// result := list ;
35960: LD_ADDR_VAR 0 4
35964: PUSH
35965: LD_VAR 0 5
35969: ST_TO_ADDR
// end ;
35970: LD_VAR 0 4
35974: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
35975: LD_INT 0
35977: PPUSH
35978: PPUSH
35979: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
35980: LD_VAR 0 1
35984: NOT
35985: PUSH
35986: LD_VAR 0 2
35990: PUSH
35991: LD_INT 1
35993: PUSH
35994: LD_INT 2
35996: PUSH
35997: LD_INT 3
35999: PUSH
36000: LD_INT 4
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: IN
36009: NOT
36010: OR
36011: IFFALSE 36015
// exit ;
36013: GO 36107
// tmp := [ ] ;
36015: LD_ADDR_VAR 0 5
36019: PUSH
36020: EMPTY
36021: ST_TO_ADDR
// for i in units do
36022: LD_ADDR_VAR 0 4
36026: PUSH
36027: LD_VAR 0 1
36031: PUSH
36032: FOR_IN
36033: IFFALSE 36076
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
36035: LD_ADDR_VAR 0 5
36039: PUSH
36040: LD_VAR 0 5
36044: PPUSH
36045: LD_VAR 0 5
36049: PUSH
36050: LD_INT 1
36052: PLUS
36053: PPUSH
36054: LD_VAR 0 4
36058: PPUSH
36059: LD_VAR 0 2
36063: PPUSH
36064: CALL_OW 259
36068: PPUSH
36069: CALL_OW 2
36073: ST_TO_ADDR
36074: GO 36032
36076: POP
36077: POP
// if not tmp then
36078: LD_VAR 0 5
36082: NOT
36083: IFFALSE 36087
// exit ;
36085: GO 36107
// result := SortListByListDesc ( units , tmp ) ;
36087: LD_ADDR_VAR 0 3
36091: PUSH
36092: LD_VAR 0 1
36096: PPUSH
36097: LD_VAR 0 5
36101: PPUSH
36102: CALL_OW 77
36106: ST_TO_ADDR
// end ;
36107: LD_VAR 0 3
36111: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
36112: LD_INT 0
36114: PPUSH
36115: PPUSH
36116: PPUSH
// result := false ;
36117: LD_ADDR_VAR 0 3
36121: PUSH
36122: LD_INT 0
36124: ST_TO_ADDR
// x := GetX ( building ) ;
36125: LD_ADDR_VAR 0 4
36129: PUSH
36130: LD_VAR 0 2
36134: PPUSH
36135: CALL_OW 250
36139: ST_TO_ADDR
// y := GetY ( building ) ;
36140: LD_ADDR_VAR 0 5
36144: PUSH
36145: LD_VAR 0 2
36149: PPUSH
36150: CALL_OW 251
36154: ST_TO_ADDR
// if not building or not x or not y then
36155: LD_VAR 0 2
36159: NOT
36160: PUSH
36161: LD_VAR 0 4
36165: NOT
36166: OR
36167: PUSH
36168: LD_VAR 0 5
36172: NOT
36173: OR
36174: IFFALSE 36178
// exit ;
36176: GO 36270
// if GetTaskList ( unit ) then
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL_OW 437
36187: IFFALSE 36270
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36189: LD_STRING e
36191: PUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 437
36201: PUSH
36202: LD_INT 1
36204: ARRAY
36205: PUSH
36206: LD_INT 1
36208: ARRAY
36209: EQUAL
36210: PUSH
36211: LD_VAR 0 4
36215: PUSH
36216: LD_VAR 0 1
36220: PPUSH
36221: CALL_OW 437
36225: PUSH
36226: LD_INT 1
36228: ARRAY
36229: PUSH
36230: LD_INT 2
36232: ARRAY
36233: EQUAL
36234: AND
36235: PUSH
36236: LD_VAR 0 5
36240: PUSH
36241: LD_VAR 0 1
36245: PPUSH
36246: CALL_OW 437
36250: PUSH
36251: LD_INT 1
36253: ARRAY
36254: PUSH
36255: LD_INT 3
36257: ARRAY
36258: EQUAL
36259: AND
36260: IFFALSE 36270
// result := true end ;
36262: LD_ADDR_VAR 0 3
36266: PUSH
36267: LD_INT 1
36269: ST_TO_ADDR
// end ;
36270: LD_VAR 0 3
36274: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
36275: LD_INT 0
36277: PPUSH
// result := false ;
36278: LD_ADDR_VAR 0 4
36282: PUSH
36283: LD_INT 0
36285: ST_TO_ADDR
// if GetTaskList ( unit ) then
36286: LD_VAR 0 1
36290: PPUSH
36291: CALL_OW 437
36295: IFFALSE 36378
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
36297: LD_STRING M
36299: PUSH
36300: LD_VAR 0 1
36304: PPUSH
36305: CALL_OW 437
36309: PUSH
36310: LD_INT 1
36312: ARRAY
36313: PUSH
36314: LD_INT 1
36316: ARRAY
36317: EQUAL
36318: PUSH
36319: LD_VAR 0 2
36323: PUSH
36324: LD_VAR 0 1
36328: PPUSH
36329: CALL_OW 437
36333: PUSH
36334: LD_INT 1
36336: ARRAY
36337: PUSH
36338: LD_INT 2
36340: ARRAY
36341: EQUAL
36342: AND
36343: PUSH
36344: LD_VAR 0 3
36348: PUSH
36349: LD_VAR 0 1
36353: PPUSH
36354: CALL_OW 437
36358: PUSH
36359: LD_INT 1
36361: ARRAY
36362: PUSH
36363: LD_INT 3
36365: ARRAY
36366: EQUAL
36367: AND
36368: IFFALSE 36378
// result := true ;
36370: LD_ADDR_VAR 0 4
36374: PUSH
36375: LD_INT 1
36377: ST_TO_ADDR
// end ; end ;
36378: LD_VAR 0 4
36382: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
// if not unit or not area then
36389: LD_VAR 0 1
36393: NOT
36394: PUSH
36395: LD_VAR 0 2
36399: NOT
36400: OR
36401: IFFALSE 36405
// exit ;
36403: GO 36569
// tmp := AreaToList ( area , i ) ;
36405: LD_ADDR_VAR 0 6
36409: PUSH
36410: LD_VAR 0 2
36414: PPUSH
36415: LD_VAR 0 5
36419: PPUSH
36420: CALL_OW 517
36424: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
36425: LD_ADDR_VAR 0 5
36429: PUSH
36430: DOUBLE
36431: LD_INT 1
36433: DEC
36434: ST_TO_ADDR
36435: LD_VAR 0 6
36439: PUSH
36440: LD_INT 1
36442: ARRAY
36443: PUSH
36444: FOR_TO
36445: IFFALSE 36567
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
36447: LD_ADDR_VAR 0 7
36451: PUSH
36452: LD_VAR 0 6
36456: PUSH
36457: LD_INT 1
36459: ARRAY
36460: PUSH
36461: LD_VAR 0 5
36465: ARRAY
36466: PUSH
36467: LD_VAR 0 6
36471: PUSH
36472: LD_INT 2
36474: ARRAY
36475: PUSH
36476: LD_VAR 0 5
36480: ARRAY
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
36486: LD_VAR 0 7
36490: PUSH
36491: LD_INT 1
36493: ARRAY
36494: PPUSH
36495: LD_VAR 0 7
36499: PUSH
36500: LD_INT 2
36502: ARRAY
36503: PPUSH
36504: CALL_OW 428
36508: PUSH
36509: LD_INT 0
36511: EQUAL
36512: IFFALSE 36565
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
36514: LD_VAR 0 1
36518: PPUSH
36519: LD_VAR 0 7
36523: PUSH
36524: LD_INT 1
36526: ARRAY
36527: PPUSH
36528: LD_VAR 0 7
36532: PUSH
36533: LD_INT 2
36535: ARRAY
36536: PPUSH
36537: LD_VAR 0 3
36541: PPUSH
36542: CALL_OW 48
// result := IsPlaced ( unit ) ;
36546: LD_ADDR_VAR 0 4
36550: PUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 305
36560: ST_TO_ADDR
// exit ;
36561: POP
36562: POP
36563: GO 36569
// end ; end ;
36565: GO 36444
36567: POP
36568: POP
// end ;
36569: LD_VAR 0 4
36573: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
36574: LD_INT 0
36576: PPUSH
36577: PPUSH
36578: PPUSH
// if not side or side > 8 then
36579: LD_VAR 0 1
36583: NOT
36584: PUSH
36585: LD_VAR 0 1
36589: PUSH
36590: LD_INT 8
36592: GREATER
36593: OR
36594: IFFALSE 36598
// exit ;
36596: GO 36785
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
36598: LD_ADDR_VAR 0 4
36602: PUSH
36603: LD_INT 22
36605: PUSH
36606: LD_VAR 0 1
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 21
36617: PUSH
36618: LD_INT 3
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PPUSH
36629: CALL_OW 69
36633: ST_TO_ADDR
// if not tmp then
36634: LD_VAR 0 4
36638: NOT
36639: IFFALSE 36643
// exit ;
36641: GO 36785
// enable_addtolog := true ;
36643: LD_ADDR_OWVAR 81
36647: PUSH
36648: LD_INT 1
36650: ST_TO_ADDR
// AddToLog ( [ ) ;
36651: LD_STRING [
36653: PPUSH
36654: CALL_OW 561
// for i in tmp do
36658: LD_ADDR_VAR 0 3
36662: PUSH
36663: LD_VAR 0 4
36667: PUSH
36668: FOR_IN
36669: IFFALSE 36776
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
36671: LD_STRING [
36673: PUSH
36674: LD_VAR 0 3
36678: PPUSH
36679: CALL_OW 266
36683: STR
36684: PUSH
36685: LD_STRING , 
36687: STR
36688: PUSH
36689: LD_VAR 0 3
36693: PPUSH
36694: CALL_OW 250
36698: STR
36699: PUSH
36700: LD_STRING , 
36702: STR
36703: PUSH
36704: LD_VAR 0 3
36708: PPUSH
36709: CALL_OW 251
36713: STR
36714: PUSH
36715: LD_STRING , 
36717: STR
36718: PUSH
36719: LD_VAR 0 3
36723: PPUSH
36724: CALL_OW 254
36728: STR
36729: PUSH
36730: LD_STRING , 
36732: STR
36733: PUSH
36734: LD_VAR 0 3
36738: PPUSH
36739: LD_INT 1
36741: PPUSH
36742: CALL_OW 268
36746: STR
36747: PUSH
36748: LD_STRING , 
36750: STR
36751: PUSH
36752: LD_VAR 0 3
36756: PPUSH
36757: LD_INT 2
36759: PPUSH
36760: CALL_OW 268
36764: STR
36765: PUSH
36766: LD_STRING ],
36768: STR
36769: PPUSH
36770: CALL_OW 561
// end ;
36774: GO 36668
36776: POP
36777: POP
// AddToLog ( ]; ) ;
36778: LD_STRING ];
36780: PPUSH
36781: CALL_OW 561
// end ;
36785: LD_VAR 0 2
36789: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
36790: LD_INT 0
36792: PPUSH
36793: PPUSH
36794: PPUSH
36795: PPUSH
36796: PPUSH
// if not area or not rate or not max then
36797: LD_VAR 0 1
36801: NOT
36802: PUSH
36803: LD_VAR 0 2
36807: NOT
36808: OR
36809: PUSH
36810: LD_VAR 0 4
36814: NOT
36815: OR
36816: IFFALSE 36820
// exit ;
36818: GO 37009
// while 1 do
36820: LD_INT 1
36822: IFFALSE 37009
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
36824: LD_ADDR_VAR 0 9
36828: PUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: LD_INT 1
36836: PPUSH
36837: CALL_OW 287
36841: PUSH
36842: LD_INT 10
36844: MUL
36845: ST_TO_ADDR
// r := rate / 10 ;
36846: LD_ADDR_VAR 0 7
36850: PUSH
36851: LD_VAR 0 2
36855: PUSH
36856: LD_INT 10
36858: DIVREAL
36859: ST_TO_ADDR
// time := 1 1$00 ;
36860: LD_ADDR_VAR 0 8
36864: PUSH
36865: LD_INT 2100
36867: ST_TO_ADDR
// if amount < min then
36868: LD_VAR 0 9
36872: PUSH
36873: LD_VAR 0 3
36877: LESS
36878: IFFALSE 36896
// r := r * 2 else
36880: LD_ADDR_VAR 0 7
36884: PUSH
36885: LD_VAR 0 7
36889: PUSH
36890: LD_INT 2
36892: MUL
36893: ST_TO_ADDR
36894: GO 36922
// if amount > max then
36896: LD_VAR 0 9
36900: PUSH
36901: LD_VAR 0 4
36905: GREATER
36906: IFFALSE 36922
// r := r / 2 ;
36908: LD_ADDR_VAR 0 7
36912: PUSH
36913: LD_VAR 0 7
36917: PUSH
36918: LD_INT 2
36920: DIVREAL
36921: ST_TO_ADDR
// time := time / r ;
36922: LD_ADDR_VAR 0 8
36926: PUSH
36927: LD_VAR 0 8
36931: PUSH
36932: LD_VAR 0 7
36936: DIVREAL
36937: ST_TO_ADDR
// if time < 0 then
36938: LD_VAR 0 8
36942: PUSH
36943: LD_INT 0
36945: LESS
36946: IFFALSE 36963
// time := time * - 1 ;
36948: LD_ADDR_VAR 0 8
36952: PUSH
36953: LD_VAR 0 8
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: MUL
36962: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
36963: LD_VAR 0 8
36967: PUSH
36968: LD_INT 35
36970: PPUSH
36971: LD_INT 875
36973: PPUSH
36974: CALL_OW 12
36978: PLUS
36979: PPUSH
36980: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
36984: LD_INT 1
36986: PPUSH
36987: LD_INT 5
36989: PPUSH
36990: CALL_OW 12
36994: PPUSH
36995: LD_VAR 0 1
36999: PPUSH
37000: LD_INT 1
37002: PPUSH
37003: CALL_OW 55
// end ;
37007: GO 36820
// end ;
37009: LD_VAR 0 5
37013: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
37014: LD_INT 0
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
// if not turrets or not factories then
37024: LD_VAR 0 1
37028: NOT
37029: PUSH
37030: LD_VAR 0 2
37034: NOT
37035: OR
37036: IFFALSE 37040
// exit ;
37038: GO 37347
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
37040: LD_ADDR_VAR 0 10
37044: PUSH
37045: LD_INT 5
37047: PUSH
37048: LD_INT 6
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 2
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 3
37067: PUSH
37068: LD_INT 5
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 24
37082: PUSH
37083: LD_INT 25
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 23
37092: PUSH
37093: LD_INT 27
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 42
37106: PUSH
37107: LD_INT 43
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 44
37116: PUSH
37117: LD_INT 46
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 45
37126: PUSH
37127: LD_INT 47
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: ST_TO_ADDR
// result := [ ] ;
37144: LD_ADDR_VAR 0 3
37148: PUSH
37149: EMPTY
37150: ST_TO_ADDR
// for i in turrets do
37151: LD_ADDR_VAR 0 4
37155: PUSH
37156: LD_VAR 0 1
37160: PUSH
37161: FOR_IN
37162: IFFALSE 37345
// begin nat := GetNation ( i ) ;
37164: LD_ADDR_VAR 0 7
37168: PUSH
37169: LD_VAR 0 4
37173: PPUSH
37174: CALL_OW 248
37178: ST_TO_ADDR
// weapon := 0 ;
37179: LD_ADDR_VAR 0 8
37183: PUSH
37184: LD_INT 0
37186: ST_TO_ADDR
// if not nat then
37187: LD_VAR 0 7
37191: NOT
37192: IFFALSE 37196
// continue ;
37194: GO 37161
// for j in list [ nat ] do
37196: LD_ADDR_VAR 0 5
37200: PUSH
37201: LD_VAR 0 10
37205: PUSH
37206: LD_VAR 0 7
37210: ARRAY
37211: PUSH
37212: FOR_IN
37213: IFFALSE 37254
// if GetBWeapon ( i ) = j [ 1 ] then
37215: LD_VAR 0 4
37219: PPUSH
37220: CALL_OW 269
37224: PUSH
37225: LD_VAR 0 5
37229: PUSH
37230: LD_INT 1
37232: ARRAY
37233: EQUAL
37234: IFFALSE 37252
// begin weapon := j [ 2 ] ;
37236: LD_ADDR_VAR 0 8
37240: PUSH
37241: LD_VAR 0 5
37245: PUSH
37246: LD_INT 2
37248: ARRAY
37249: ST_TO_ADDR
// break ;
37250: GO 37254
// end ;
37252: GO 37212
37254: POP
37255: POP
// if not weapon then
37256: LD_VAR 0 8
37260: NOT
37261: IFFALSE 37265
// continue ;
37263: GO 37161
// for k in factories do
37265: LD_ADDR_VAR 0 6
37269: PUSH
37270: LD_VAR 0 2
37274: PUSH
37275: FOR_IN
37276: IFFALSE 37341
// begin weapons := AvailableWeaponList ( k ) ;
37278: LD_ADDR_VAR 0 9
37282: PUSH
37283: LD_VAR 0 6
37287: PPUSH
37288: CALL_OW 478
37292: ST_TO_ADDR
// if not weapons then
37293: LD_VAR 0 9
37297: NOT
37298: IFFALSE 37302
// continue ;
37300: GO 37275
// if weapon in weapons then
37302: LD_VAR 0 8
37306: PUSH
37307: LD_VAR 0 9
37311: IN
37312: IFFALSE 37339
// begin result := [ i , weapon ] ;
37314: LD_ADDR_VAR 0 3
37318: PUSH
37319: LD_VAR 0 4
37323: PUSH
37324: LD_VAR 0 8
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: ST_TO_ADDR
// exit ;
37333: POP
37334: POP
37335: POP
37336: POP
37337: GO 37347
// end ; end ;
37339: GO 37275
37341: POP
37342: POP
// end ;
37343: GO 37161
37345: POP
37346: POP
// end ;
37347: LD_VAR 0 3
37351: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
37352: LD_INT 0
37354: PPUSH
// if not side or side > 8 then
37355: LD_VAR 0 3
37359: NOT
37360: PUSH
37361: LD_VAR 0 3
37365: PUSH
37366: LD_INT 8
37368: GREATER
37369: OR
37370: IFFALSE 37374
// exit ;
37372: GO 37433
// if not range then
37374: LD_VAR 0 4
37378: NOT
37379: IFFALSE 37390
// range := - 12 ;
37381: LD_ADDR_VAR 0 4
37385: PUSH
37386: LD_INT 12
37388: NEG
37389: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
37390: LD_VAR 0 1
37394: PPUSH
37395: LD_VAR 0 2
37399: PPUSH
37400: LD_VAR 0 3
37404: PPUSH
37405: LD_VAR 0 4
37409: PPUSH
37410: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
37414: LD_VAR 0 1
37418: PPUSH
37419: LD_VAR 0 2
37423: PPUSH
37424: LD_VAR 0 3
37428: PPUSH
37429: CALL_OW 331
// end ;
37433: LD_VAR 0 5
37437: RET
// export function Video ( mode ) ; begin
37438: LD_INT 0
37440: PPUSH
// ingame_video = mode ;
37441: LD_ADDR_OWVAR 52
37445: PUSH
37446: LD_VAR 0 1
37450: ST_TO_ADDR
// interface_hidden = mode ;
37451: LD_ADDR_OWVAR 54
37455: PUSH
37456: LD_VAR 0 1
37460: ST_TO_ADDR
// end ;
37461: LD_VAR 0 2
37465: RET
// export function Join ( array , element ) ; begin
37466: LD_INT 0
37468: PPUSH
// result := Replace ( array , array + 1 , element ) ;
37469: LD_ADDR_VAR 0 3
37473: PUSH
37474: LD_VAR 0 1
37478: PPUSH
37479: LD_VAR 0 1
37483: PUSH
37484: LD_INT 1
37486: PLUS
37487: PPUSH
37488: LD_VAR 0 2
37492: PPUSH
37493: CALL_OW 1
37497: ST_TO_ADDR
// end ;
37498: LD_VAR 0 3
37502: RET
// export function JoinUnion ( array , element ) ; begin
37503: LD_INT 0
37505: PPUSH
// result := array union element ;
37506: LD_ADDR_VAR 0 3
37510: PUSH
37511: LD_VAR 0 1
37515: PUSH
37516: LD_VAR 0 2
37520: UNION
37521: ST_TO_ADDR
// end ;
37522: LD_VAR 0 3
37526: RET
// export function GetBehemoths ( side ) ; begin
37527: LD_INT 0
37529: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
37530: LD_ADDR_VAR 0 2
37534: PUSH
37535: LD_INT 22
37537: PUSH
37538: LD_VAR 0 1
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 31
37549: PUSH
37550: LD_INT 25
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PPUSH
37561: CALL_OW 69
37565: ST_TO_ADDR
// end ;
37566: LD_VAR 0 2
37570: RET
// export function Shuffle ( array ) ; var i , index ; begin
37571: LD_INT 0
37573: PPUSH
37574: PPUSH
37575: PPUSH
// result := [ ] ;
37576: LD_ADDR_VAR 0 2
37580: PUSH
37581: EMPTY
37582: ST_TO_ADDR
// if not array then
37583: LD_VAR 0 1
37587: NOT
37588: IFFALSE 37592
// exit ;
37590: GO 37691
// Randomize ;
37592: CALL_OW 10
// for i = array downto 1 do
37596: LD_ADDR_VAR 0 3
37600: PUSH
37601: DOUBLE
37602: LD_VAR 0 1
37606: INC
37607: ST_TO_ADDR
37608: LD_INT 1
37610: PUSH
37611: FOR_DOWNTO
37612: IFFALSE 37689
// begin index := rand ( 1 , array ) ;
37614: LD_ADDR_VAR 0 4
37618: PUSH
37619: LD_INT 1
37621: PPUSH
37622: LD_VAR 0 1
37626: PPUSH
37627: CALL_OW 12
37631: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
37632: LD_ADDR_VAR 0 2
37636: PUSH
37637: LD_VAR 0 2
37641: PPUSH
37642: LD_VAR 0 2
37646: PUSH
37647: LD_INT 1
37649: PLUS
37650: PPUSH
37651: LD_VAR 0 1
37655: PUSH
37656: LD_VAR 0 4
37660: ARRAY
37661: PPUSH
37662: CALL_OW 2
37666: ST_TO_ADDR
// array := Delete ( array , index ) ;
37667: LD_ADDR_VAR 0 1
37671: PUSH
37672: LD_VAR 0 1
37676: PPUSH
37677: LD_VAR 0 4
37681: PPUSH
37682: CALL_OW 3
37686: ST_TO_ADDR
// end ;
37687: GO 37611
37689: POP
37690: POP
// end ;
37691: LD_VAR 0 2
37695: RET
// export function GetBaseMaterials ( base ) ; begin
37696: LD_INT 0
37698: PPUSH
// result := [ 0 , 0 , 0 ] ;
37699: LD_ADDR_VAR 0 2
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 0
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: ST_TO_ADDR
// if not base then
37718: LD_VAR 0 1
37722: NOT
37723: IFFALSE 37727
// exit ;
37725: GO 37776
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
37727: LD_ADDR_VAR 0 2
37731: PUSH
37732: LD_VAR 0 1
37736: PPUSH
37737: LD_INT 1
37739: PPUSH
37740: CALL_OW 275
37744: PUSH
37745: LD_VAR 0 1
37749: PPUSH
37750: LD_INT 2
37752: PPUSH
37753: CALL_OW 275
37757: PUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: LD_INT 3
37765: PPUSH
37766: CALL_OW 275
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: ST_TO_ADDR
// end ;
37776: LD_VAR 0 2
37780: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
37781: LD_INT 0
37783: PPUSH
37784: PPUSH
// result := array ;
37785: LD_ADDR_VAR 0 3
37789: PUSH
37790: LD_VAR 0 1
37794: ST_TO_ADDR
// if size > 0 then
37795: LD_VAR 0 2
37799: PUSH
37800: LD_INT 0
37802: GREATER
37803: IFFALSE 37849
// for i := array downto size do
37805: LD_ADDR_VAR 0 4
37809: PUSH
37810: DOUBLE
37811: LD_VAR 0 1
37815: INC
37816: ST_TO_ADDR
37817: LD_VAR 0 2
37821: PUSH
37822: FOR_DOWNTO
37823: IFFALSE 37847
// result := Delete ( result , result ) ;
37825: LD_ADDR_VAR 0 3
37829: PUSH
37830: LD_VAR 0 3
37834: PPUSH
37835: LD_VAR 0 3
37839: PPUSH
37840: CALL_OW 3
37844: ST_TO_ADDR
37845: GO 37822
37847: POP
37848: POP
// end ;
37849: LD_VAR 0 3
37853: RET
// export function ComExit ( unit ) ; var tmp ; begin
37854: LD_INT 0
37856: PPUSH
37857: PPUSH
// if not IsInUnit ( unit ) then
37858: LD_VAR 0 1
37862: PPUSH
37863: CALL_OW 310
37867: NOT
37868: IFFALSE 37872
// exit ;
37870: GO 37932
// tmp := IsInUnit ( unit ) ;
37872: LD_ADDR_VAR 0 3
37876: PUSH
37877: LD_VAR 0 1
37881: PPUSH
37882: CALL_OW 310
37886: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
37887: LD_VAR 0 3
37891: PPUSH
37892: CALL_OW 247
37896: PUSH
37897: LD_INT 2
37899: EQUAL
37900: IFFALSE 37913
// ComExitVehicle ( unit ) else
37902: LD_VAR 0 1
37906: PPUSH
37907: CALL_OW 121
37911: GO 37922
// ComExitBuilding ( unit ) ;
37913: LD_VAR 0 1
37917: PPUSH
37918: CALL_OW 122
// result := tmp ;
37922: LD_ADDR_VAR 0 2
37926: PUSH
37927: LD_VAR 0 3
37931: ST_TO_ADDR
// end ;
37932: LD_VAR 0 2
37936: RET
// export function ComExitAll ( units ) ; var i ; begin
37937: LD_INT 0
37939: PPUSH
37940: PPUSH
// if not units then
37941: LD_VAR 0 1
37945: NOT
37946: IFFALSE 37950
// exit ;
37948: GO 37976
// for i in units do
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_VAR 0 1
37959: PUSH
37960: FOR_IN
37961: IFFALSE 37974
// ComExit ( i ) ;
37963: LD_VAR 0 3
37967: PPUSH
37968: CALL 37854 0 1
37972: GO 37960
37974: POP
37975: POP
// end ;
37976: LD_VAR 0 2
37980: RET
// export function ResetHc ; begin
37981: LD_INT 0
37983: PPUSH
// InitHc ;
37984: CALL_OW 19
// hc_importance := 0 ;
37988: LD_ADDR_OWVAR 32
37992: PUSH
37993: LD_INT 0
37995: ST_TO_ADDR
// end ;
37996: LD_VAR 0 1
38000: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
38001: LD_INT 0
38003: PPUSH
38004: PPUSH
38005: PPUSH
// _x := ( x1 + x2 ) div 2 ;
38006: LD_ADDR_VAR 0 6
38010: PUSH
38011: LD_VAR 0 1
38015: PUSH
38016: LD_VAR 0 3
38020: PLUS
38021: PUSH
38022: LD_INT 2
38024: DIV
38025: ST_TO_ADDR
// if _x < 0 then
38026: LD_VAR 0 6
38030: PUSH
38031: LD_INT 0
38033: LESS
38034: IFFALSE 38051
// _x := _x * - 1 ;
38036: LD_ADDR_VAR 0 6
38040: PUSH
38041: LD_VAR 0 6
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: MUL
38050: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
38051: LD_ADDR_VAR 0 7
38055: PUSH
38056: LD_VAR 0 2
38060: PUSH
38061: LD_VAR 0 4
38065: PLUS
38066: PUSH
38067: LD_INT 2
38069: DIV
38070: ST_TO_ADDR
// if _y < 0 then
38071: LD_VAR 0 7
38075: PUSH
38076: LD_INT 0
38078: LESS
38079: IFFALSE 38096
// _y := _y * - 1 ;
38081: LD_ADDR_VAR 0 7
38085: PUSH
38086: LD_VAR 0 7
38090: PUSH
38091: LD_INT 1
38093: NEG
38094: MUL
38095: ST_TO_ADDR
// result := [ _x , _y ] ;
38096: LD_ADDR_VAR 0 5
38100: PUSH
38101: LD_VAR 0 6
38105: PUSH
38106: LD_VAR 0 7
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: ST_TO_ADDR
// end ;
38115: LD_VAR 0 5
38119: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
38120: LD_INT 0
38122: PPUSH
38123: PPUSH
38124: PPUSH
38125: PPUSH
// task := GetTaskList ( unit ) ;
38126: LD_ADDR_VAR 0 7
38130: PUSH
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL_OW 437
38140: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
38141: LD_VAR 0 7
38145: NOT
38146: PUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: LD_VAR 0 2
38156: PPUSH
38157: CALL_OW 308
38161: NOT
38162: AND
38163: IFFALSE 38167
// exit ;
38165: GO 38285
// if IsInArea ( unit , area ) then
38167: LD_VAR 0 1
38171: PPUSH
38172: LD_VAR 0 2
38176: PPUSH
38177: CALL_OW 308
38181: IFFALSE 38199
// begin ComMoveToArea ( unit , goAway ) ;
38183: LD_VAR 0 1
38187: PPUSH
38188: LD_VAR 0 3
38192: PPUSH
38193: CALL_OW 113
// exit ;
38197: GO 38285
// end ; if task [ 1 ] [ 1 ] <> M then
38199: LD_VAR 0 7
38203: PUSH
38204: LD_INT 1
38206: ARRAY
38207: PUSH
38208: LD_INT 1
38210: ARRAY
38211: PUSH
38212: LD_STRING M
38214: NONEQUAL
38215: IFFALSE 38219
// exit ;
38217: GO 38285
// x := task [ 1 ] [ 2 ] ;
38219: LD_ADDR_VAR 0 5
38223: PUSH
38224: LD_VAR 0 7
38228: PUSH
38229: LD_INT 1
38231: ARRAY
38232: PUSH
38233: LD_INT 2
38235: ARRAY
38236: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
38237: LD_ADDR_VAR 0 6
38241: PUSH
38242: LD_VAR 0 7
38246: PUSH
38247: LD_INT 1
38249: ARRAY
38250: PUSH
38251: LD_INT 3
38253: ARRAY
38254: ST_TO_ADDR
// if InArea ( x , y , area ) then
38255: LD_VAR 0 5
38259: PPUSH
38260: LD_VAR 0 6
38264: PPUSH
38265: LD_VAR 0 2
38269: PPUSH
38270: CALL_OW 309
38274: IFFALSE 38285
// ComStop ( unit ) ;
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 141
// end ;
38285: LD_VAR 0 4
38289: RET
// export function Abs ( value ) ; begin
38290: LD_INT 0
38292: PPUSH
// result := value ;
38293: LD_ADDR_VAR 0 2
38297: PUSH
38298: LD_VAR 0 1
38302: ST_TO_ADDR
// if value < 0 then
38303: LD_VAR 0 1
38307: PUSH
38308: LD_INT 0
38310: LESS
38311: IFFALSE 38328
// result := value * - 1 ;
38313: LD_ADDR_VAR 0 2
38317: PUSH
38318: LD_VAR 0 1
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: MUL
38327: ST_TO_ADDR
// end ;
38328: LD_VAR 0 2
38332: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
38333: LD_INT 0
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
// if not unit or not building then
38343: LD_VAR 0 1
38347: NOT
38348: PUSH
38349: LD_VAR 0 2
38353: NOT
38354: OR
38355: IFFALSE 38359
// exit ;
38357: GO 38585
// x := GetX ( building ) ;
38359: LD_ADDR_VAR 0 4
38363: PUSH
38364: LD_VAR 0 2
38368: PPUSH
38369: CALL_OW 250
38373: ST_TO_ADDR
// y := GetY ( building ) ;
38374: LD_ADDR_VAR 0 6
38378: PUSH
38379: LD_VAR 0 2
38383: PPUSH
38384: CALL_OW 251
38388: ST_TO_ADDR
// d := GetDir ( building ) ;
38389: LD_ADDR_VAR 0 8
38393: PUSH
38394: LD_VAR 0 2
38398: PPUSH
38399: CALL_OW 254
38403: ST_TO_ADDR
// r := 4 ;
38404: LD_ADDR_VAR 0 9
38408: PUSH
38409: LD_INT 4
38411: ST_TO_ADDR
// for i := 1 to 5 do
38412: LD_ADDR_VAR 0 10
38416: PUSH
38417: DOUBLE
38418: LD_INT 1
38420: DEC
38421: ST_TO_ADDR
38422: LD_INT 5
38424: PUSH
38425: FOR_TO
38426: IFFALSE 38583
// begin _x := ShiftX ( x , d , r + i ) ;
38428: LD_ADDR_VAR 0 5
38432: PUSH
38433: LD_VAR 0 4
38437: PPUSH
38438: LD_VAR 0 8
38442: PPUSH
38443: LD_VAR 0 9
38447: PUSH
38448: LD_VAR 0 10
38452: PLUS
38453: PPUSH
38454: CALL_OW 272
38458: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
38459: LD_ADDR_VAR 0 7
38463: PUSH
38464: LD_VAR 0 6
38468: PPUSH
38469: LD_VAR 0 8
38473: PPUSH
38474: LD_VAR 0 9
38478: PUSH
38479: LD_VAR 0 10
38483: PLUS
38484: PPUSH
38485: CALL_OW 273
38489: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
38490: LD_VAR 0 5
38494: PPUSH
38495: LD_VAR 0 7
38499: PPUSH
38500: CALL_OW 488
38504: PUSH
38505: LD_VAR 0 5
38509: PPUSH
38510: LD_VAR 0 7
38514: PPUSH
38515: CALL_OW 428
38519: PPUSH
38520: CALL_OW 247
38524: PUSH
38525: LD_INT 3
38527: PUSH
38528: LD_INT 2
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: IN
38535: NOT
38536: AND
38537: IFFALSE 38581
// begin ComMoveXY ( unit , _x , _y ) ;
38539: LD_VAR 0 1
38543: PPUSH
38544: LD_VAR 0 5
38548: PPUSH
38549: LD_VAR 0 7
38553: PPUSH
38554: CALL_OW 111
// result := [ _x , _y ] ;
38558: LD_ADDR_VAR 0 3
38562: PUSH
38563: LD_VAR 0 5
38567: PUSH
38568: LD_VAR 0 7
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// exit ;
38577: POP
38578: POP
38579: GO 38585
// end ; end ;
38581: GO 38425
38583: POP
38584: POP
// end ;
38585: LD_VAR 0 3
38589: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
38590: LD_INT 0
38592: PPUSH
38593: PPUSH
38594: PPUSH
// result := 0 ;
38595: LD_ADDR_VAR 0 3
38599: PUSH
38600: LD_INT 0
38602: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
38603: LD_VAR 0 1
38607: PUSH
38608: LD_INT 0
38610: LESS
38611: PUSH
38612: LD_VAR 0 1
38616: PUSH
38617: LD_INT 8
38619: GREATER
38620: OR
38621: PUSH
38622: LD_VAR 0 2
38626: PUSH
38627: LD_INT 0
38629: LESS
38630: OR
38631: PUSH
38632: LD_VAR 0 2
38636: PUSH
38637: LD_INT 8
38639: GREATER
38640: OR
38641: IFFALSE 38645
// exit ;
38643: GO 38720
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
38645: LD_ADDR_VAR 0 4
38649: PUSH
38650: LD_INT 22
38652: PUSH
38653: LD_VAR 0 2
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PPUSH
38662: CALL_OW 69
38666: PUSH
38667: FOR_IN
38668: IFFALSE 38718
// begin un := UnitShoot ( i ) ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_VAR 0 4
38679: PPUSH
38680: CALL_OW 504
38684: ST_TO_ADDR
// if GetSide ( un ) = side1 then
38685: LD_VAR 0 5
38689: PPUSH
38690: CALL_OW 255
38694: PUSH
38695: LD_VAR 0 1
38699: EQUAL
38700: IFFALSE 38716
// begin result := un ;
38702: LD_ADDR_VAR 0 3
38706: PUSH
38707: LD_VAR 0 5
38711: ST_TO_ADDR
// exit ;
38712: POP
38713: POP
38714: GO 38720
// end ; end ;
38716: GO 38667
38718: POP
38719: POP
// end ;
38720: LD_VAR 0 3
38724: RET
// export function GetCargoBay ( units ) ; begin
38725: LD_INT 0
38727: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
38728: LD_ADDR_VAR 0 2
38732: PUSH
38733: LD_VAR 0 1
38737: PPUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 34
38743: PUSH
38744: LD_INT 12
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 34
38753: PUSH
38754: LD_INT 51
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 34
38763: PUSH
38764: LD_INT 32
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 34
38773: PUSH
38774: LD_EXP 17
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: PPUSH
38790: CALL_OW 72
38794: ST_TO_ADDR
// end ;
38795: LD_VAR 0 2
38799: RET
// export function Negate ( value ) ; begin
38800: LD_INT 0
38802: PPUSH
// result := not value ;
38803: LD_ADDR_VAR 0 2
38807: PUSH
38808: LD_VAR 0 1
38812: NOT
38813: ST_TO_ADDR
// end ;
38814: LD_VAR 0 2
38818: RET
// export function Inc ( value ) ; begin
38819: LD_INT 0
38821: PPUSH
// result := value + 1 ;
38822: LD_ADDR_VAR 0 2
38826: PUSH
38827: LD_VAR 0 1
38831: PUSH
38832: LD_INT 1
38834: PLUS
38835: ST_TO_ADDR
// end ;
38836: LD_VAR 0 2
38840: RET
// export function Dec ( value ) ; begin
38841: LD_INT 0
38843: PPUSH
// result := value - 1 ;
38844: LD_ADDR_VAR 0 2
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 1
38856: MINUS
38857: ST_TO_ADDR
// end ;
38858: LD_VAR 0 2
38862: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
38863: LD_INT 0
38865: PPUSH
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
38872: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
38873: LD_VAR 0 1
38877: PPUSH
38878: LD_VAR 0 2
38882: PPUSH
38883: CALL_OW 488
38887: NOT
38888: PUSH
38889: LD_VAR 0 3
38893: PPUSH
38894: LD_VAR 0 4
38898: PPUSH
38899: CALL_OW 488
38903: NOT
38904: OR
38905: IFFALSE 38918
// begin result := - 1 ;
38907: LD_ADDR_VAR 0 5
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: ST_TO_ADDR
// exit ;
38916: GO 39153
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
38918: LD_ADDR_VAR 0 12
38922: PUSH
38923: LD_VAR 0 1
38927: PPUSH
38928: LD_VAR 0 2
38932: PPUSH
38933: LD_VAR 0 3
38937: PPUSH
38938: LD_VAR 0 4
38942: PPUSH
38943: CALL 38001 0 4
38947: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
38948: LD_ADDR_VAR 0 11
38952: PUSH
38953: LD_VAR 0 1
38957: PPUSH
38958: LD_VAR 0 2
38962: PPUSH
38963: LD_VAR 0 12
38967: PUSH
38968: LD_INT 1
38970: ARRAY
38971: PPUSH
38972: LD_VAR 0 12
38976: PUSH
38977: LD_INT 2
38979: ARRAY
38980: PPUSH
38981: CALL_OW 298
38985: ST_TO_ADDR
// distance := 9999 ;
38986: LD_ADDR_VAR 0 10
38990: PUSH
38991: LD_INT 9999
38993: ST_TO_ADDR
// for i := 0 to 5 do
38994: LD_ADDR_VAR 0 6
38998: PUSH
38999: DOUBLE
39000: LD_INT 0
39002: DEC
39003: ST_TO_ADDR
39004: LD_INT 5
39006: PUSH
39007: FOR_TO
39008: IFFALSE 39151
// begin _x := ShiftX ( x1 , i , centerDist ) ;
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: LD_VAR 0 1
39019: PPUSH
39020: LD_VAR 0 6
39024: PPUSH
39025: LD_VAR 0 11
39029: PPUSH
39030: CALL_OW 272
39034: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
39035: LD_ADDR_VAR 0 8
39039: PUSH
39040: LD_VAR 0 2
39044: PPUSH
39045: LD_VAR 0 6
39049: PPUSH
39050: LD_VAR 0 11
39054: PPUSH
39055: CALL_OW 273
39059: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39060: LD_VAR 0 7
39064: PPUSH
39065: LD_VAR 0 8
39069: PPUSH
39070: CALL_OW 488
39074: NOT
39075: IFFALSE 39079
// continue ;
39077: GO 39007
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
39079: LD_ADDR_VAR 0 9
39083: PUSH
39084: LD_VAR 0 12
39088: PUSH
39089: LD_INT 1
39091: ARRAY
39092: PPUSH
39093: LD_VAR 0 12
39097: PUSH
39098: LD_INT 2
39100: ARRAY
39101: PPUSH
39102: LD_VAR 0 7
39106: PPUSH
39107: LD_VAR 0 8
39111: PPUSH
39112: CALL_OW 298
39116: ST_TO_ADDR
// if tmp < distance then
39117: LD_VAR 0 9
39121: PUSH
39122: LD_VAR 0 10
39126: LESS
39127: IFFALSE 39149
// begin result := i ;
39129: LD_ADDR_VAR 0 5
39133: PUSH
39134: LD_VAR 0 6
39138: ST_TO_ADDR
// distance := tmp ;
39139: LD_ADDR_VAR 0 10
39143: PUSH
39144: LD_VAR 0 9
39148: ST_TO_ADDR
// end ; end ;
39149: GO 39007
39151: POP
39152: POP
// end ;
39153: LD_VAR 0 5
39157: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39158: LD_INT 0
39160: PPUSH
39161: PPUSH
// if not driver or not IsInUnit ( driver ) then
39162: LD_VAR 0 1
39166: NOT
39167: PUSH
39168: LD_VAR 0 1
39172: PPUSH
39173: CALL_OW 310
39177: NOT
39178: OR
39179: IFFALSE 39183
// exit ;
39181: GO 39273
// vehicle := IsInUnit ( driver ) ;
39183: LD_ADDR_VAR 0 3
39187: PUSH
39188: LD_VAR 0 1
39192: PPUSH
39193: CALL_OW 310
39197: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39198: LD_VAR 0 1
39202: PPUSH
39203: LD_STRING \
39205: PUSH
39206: LD_INT 0
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: PUSH
39233: LD_STRING E
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 0
39241: PUSH
39242: LD_VAR 0 3
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: LD_INT 0
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PPUSH
39269: CALL_OW 446
// end ;
39273: LD_VAR 0 2
39277: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
39278: LD_INT 0
39280: PPUSH
39281: PPUSH
// if not driver or not IsInUnit ( driver ) then
39282: LD_VAR 0 1
39286: NOT
39287: PUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 310
39297: NOT
39298: OR
39299: IFFALSE 39303
// exit ;
39301: GO 39393
// vehicle := IsInUnit ( driver ) ;
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_VAR 0 1
39312: PPUSH
39313: CALL_OW 310
39317: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
39318: LD_VAR 0 1
39322: PPUSH
39323: LD_STRING \
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 0
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 0
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: PUSH
39353: LD_STRING E
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: LD_VAR 0 3
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 0
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PPUSH
39389: CALL_OW 447
// end ;
39393: LD_VAR 0 2
39397: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
39398: LD_INT 0
39400: PPUSH
39401: PPUSH
39402: PPUSH
// tmp := [ ] ;
39403: LD_ADDR_VAR 0 5
39407: PUSH
39408: EMPTY
39409: ST_TO_ADDR
// for i in units do
39410: LD_ADDR_VAR 0 4
39414: PUSH
39415: LD_VAR 0 1
39419: PUSH
39420: FOR_IN
39421: IFFALSE 39459
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
39423: LD_ADDR_VAR 0 5
39427: PUSH
39428: LD_VAR 0 5
39432: PPUSH
39433: LD_VAR 0 5
39437: PUSH
39438: LD_INT 1
39440: PLUS
39441: PPUSH
39442: LD_VAR 0 4
39446: PPUSH
39447: CALL_OW 256
39451: PPUSH
39452: CALL_OW 2
39456: ST_TO_ADDR
39457: GO 39420
39459: POP
39460: POP
// if not tmp then
39461: LD_VAR 0 5
39465: NOT
39466: IFFALSE 39470
// exit ;
39468: GO 39518
// if asc then
39470: LD_VAR 0 2
39474: IFFALSE 39498
// result := SortListByListAsc ( units , tmp ) else
39476: LD_ADDR_VAR 0 3
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: LD_VAR 0 5
39490: PPUSH
39491: CALL_OW 76
39495: ST_TO_ADDR
39496: GO 39518
// result := SortListByListDesc ( units , tmp ) ;
39498: LD_ADDR_VAR 0 3
39502: PUSH
39503: LD_VAR 0 1
39507: PPUSH
39508: LD_VAR 0 5
39512: PPUSH
39513: CALL_OW 77
39517: ST_TO_ADDR
// end ;
39518: LD_VAR 0 3
39522: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
39523: LD_INT 0
39525: PPUSH
39526: PPUSH
// task := GetTaskList ( mech ) ;
39527: LD_ADDR_VAR 0 4
39531: PUSH
39532: LD_VAR 0 1
39536: PPUSH
39537: CALL_OW 437
39541: ST_TO_ADDR
// if not task then
39542: LD_VAR 0 4
39546: NOT
39547: IFFALSE 39551
// exit ;
39549: GO 39593
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
39551: LD_ADDR_VAR 0 3
39555: PUSH
39556: LD_VAR 0 4
39560: PUSH
39561: LD_INT 1
39563: ARRAY
39564: PUSH
39565: LD_INT 1
39567: ARRAY
39568: PUSH
39569: LD_STRING r
39571: EQUAL
39572: PUSH
39573: LD_VAR 0 4
39577: PUSH
39578: LD_INT 1
39580: ARRAY
39581: PUSH
39582: LD_INT 4
39584: ARRAY
39585: PUSH
39586: LD_VAR 0 2
39590: EQUAL
39591: AND
39592: ST_TO_ADDR
// end ;
39593: LD_VAR 0 3
39597: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
39598: LD_INT 0
39600: PPUSH
// SetDir ( unit , d ) ;
39601: LD_VAR 0 1
39605: PPUSH
39606: LD_VAR 0 4
39610: PPUSH
39611: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
39615: LD_VAR 0 1
39619: PPUSH
39620: LD_VAR 0 2
39624: PPUSH
39625: LD_VAR 0 3
39629: PPUSH
39630: LD_VAR 0 5
39634: PPUSH
39635: CALL_OW 48
// end ;
39639: LD_VAR 0 6
39643: RET
// export function ToNaturalNumber ( number ) ; begin
39644: LD_INT 0
39646: PPUSH
// result := number div 1 ;
39647: LD_ADDR_VAR 0 2
39651: PUSH
39652: LD_VAR 0 1
39656: PUSH
39657: LD_INT 1
39659: DIV
39660: ST_TO_ADDR
// if number < 0 then
39661: LD_VAR 0 1
39665: PUSH
39666: LD_INT 0
39668: LESS
39669: IFFALSE 39679
// result := 0 ;
39671: LD_ADDR_VAR 0 2
39675: PUSH
39676: LD_INT 0
39678: ST_TO_ADDR
// end ;
39679: LD_VAR 0 2
39683: RET
// export function SortByClass ( units , class ) ; var un ; begin
39684: LD_INT 0
39686: PPUSH
39687: PPUSH
// if not units or not class then
39688: LD_VAR 0 1
39692: NOT
39693: PUSH
39694: LD_VAR 0 2
39698: NOT
39699: OR
39700: IFFALSE 39704
// exit ;
39702: GO 39799
// result := [ ] ;
39704: LD_ADDR_VAR 0 3
39708: PUSH
39709: EMPTY
39710: ST_TO_ADDR
// for un in units do
39711: LD_ADDR_VAR 0 4
39715: PUSH
39716: LD_VAR 0 1
39720: PUSH
39721: FOR_IN
39722: IFFALSE 39797
// if GetClass ( un ) = class then
39724: LD_VAR 0 4
39728: PPUSH
39729: CALL_OW 257
39733: PUSH
39734: LD_VAR 0 2
39738: EQUAL
39739: IFFALSE 39766
// result := Insert ( result , 1 , un ) else
39741: LD_ADDR_VAR 0 3
39745: PUSH
39746: LD_VAR 0 3
39750: PPUSH
39751: LD_INT 1
39753: PPUSH
39754: LD_VAR 0 4
39758: PPUSH
39759: CALL_OW 2
39763: ST_TO_ADDR
39764: GO 39795
// result := Replace ( result , result + 1 , un ) ;
39766: LD_ADDR_VAR 0 3
39770: PUSH
39771: LD_VAR 0 3
39775: PPUSH
39776: LD_VAR 0 3
39780: PUSH
39781: LD_INT 1
39783: PLUS
39784: PPUSH
39785: LD_VAR 0 4
39789: PPUSH
39790: CALL_OW 1
39794: ST_TO_ADDR
39795: GO 39721
39797: POP
39798: POP
// end ;
39799: LD_VAR 0 3
39803: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
39804: LD_INT 0
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
39811: PPUSH
39812: PPUSH
// result := [ ] ;
39813: LD_ADDR_VAR 0 4
39817: PUSH
39818: EMPTY
39819: ST_TO_ADDR
// if x - r < 0 then
39820: LD_VAR 0 1
39824: PUSH
39825: LD_VAR 0 3
39829: MINUS
39830: PUSH
39831: LD_INT 0
39833: LESS
39834: IFFALSE 39846
// min_x := 0 else
39836: LD_ADDR_VAR 0 8
39840: PUSH
39841: LD_INT 0
39843: ST_TO_ADDR
39844: GO 39862
// min_x := x - r ;
39846: LD_ADDR_VAR 0 8
39850: PUSH
39851: LD_VAR 0 1
39855: PUSH
39856: LD_VAR 0 3
39860: MINUS
39861: ST_TO_ADDR
// if y - r < 0 then
39862: LD_VAR 0 2
39866: PUSH
39867: LD_VAR 0 3
39871: MINUS
39872: PUSH
39873: LD_INT 0
39875: LESS
39876: IFFALSE 39888
// min_y := 0 else
39878: LD_ADDR_VAR 0 7
39882: PUSH
39883: LD_INT 0
39885: ST_TO_ADDR
39886: GO 39904
// min_y := y - r ;
39888: LD_ADDR_VAR 0 7
39892: PUSH
39893: LD_VAR 0 2
39897: PUSH
39898: LD_VAR 0 3
39902: MINUS
39903: ST_TO_ADDR
// max_x := x + r ;
39904: LD_ADDR_VAR 0 9
39908: PUSH
39909: LD_VAR 0 1
39913: PUSH
39914: LD_VAR 0 3
39918: PLUS
39919: ST_TO_ADDR
// max_y := y + r ;
39920: LD_ADDR_VAR 0 10
39924: PUSH
39925: LD_VAR 0 2
39929: PUSH
39930: LD_VAR 0 3
39934: PLUS
39935: ST_TO_ADDR
// for _x = min_x to max_x do
39936: LD_ADDR_VAR 0 5
39940: PUSH
39941: DOUBLE
39942: LD_VAR 0 8
39946: DEC
39947: ST_TO_ADDR
39948: LD_VAR 0 9
39952: PUSH
39953: FOR_TO
39954: IFFALSE 40055
// for _y = min_y to max_y do
39956: LD_ADDR_VAR 0 6
39960: PUSH
39961: DOUBLE
39962: LD_VAR 0 7
39966: DEC
39967: ST_TO_ADDR
39968: LD_VAR 0 10
39972: PUSH
39973: FOR_TO
39974: IFFALSE 40051
// begin if not ValidHex ( _x , _y ) then
39976: LD_VAR 0 5
39980: PPUSH
39981: LD_VAR 0 6
39985: PPUSH
39986: CALL_OW 488
39990: NOT
39991: IFFALSE 39995
// continue ;
39993: GO 39973
// if GetResourceTypeXY ( _x , _y ) then
39995: LD_VAR 0 5
39999: PPUSH
40000: LD_VAR 0 6
40004: PPUSH
40005: CALL_OW 283
40009: IFFALSE 40049
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
40011: LD_ADDR_VAR 0 4
40015: PUSH
40016: LD_VAR 0 4
40020: PPUSH
40021: LD_VAR 0 4
40025: PUSH
40026: LD_INT 1
40028: PLUS
40029: PPUSH
40030: LD_VAR 0 5
40034: PUSH
40035: LD_VAR 0 6
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PPUSH
40044: CALL_OW 1
40048: ST_TO_ADDR
// end ;
40049: GO 39973
40051: POP
40052: POP
40053: GO 39953
40055: POP
40056: POP
// end ;
40057: LD_VAR 0 4
40061: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
40062: LD_INT 0
40064: PPUSH
40065: PPUSH
40066: PPUSH
40067: PPUSH
40068: PPUSH
40069: PPUSH
40070: PPUSH
40071: PPUSH
// if not units then
40072: LD_VAR 0 1
40076: NOT
40077: IFFALSE 40081
// exit ;
40079: GO 40506
// result := UnitFilter ( units , [ f_ok ] ) ;
40081: LD_ADDR_VAR 0 3
40085: PUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: LD_INT 50
40093: PUSH
40094: EMPTY
40095: LIST
40096: PPUSH
40097: CALL_OW 72
40101: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
40102: LD_ADDR_VAR 0 8
40106: PUSH
40107: LD_VAR 0 1
40111: PUSH
40112: LD_INT 1
40114: ARRAY
40115: PPUSH
40116: CALL_OW 255
40120: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
40121: LD_ADDR_VAR 0 10
40125: PUSH
40126: LD_INT 29
40128: PUSH
40129: LD_EXP 20
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: ST_TO_ADDR
// if not result then
40138: LD_VAR 0 3
40142: NOT
40143: IFFALSE 40147
// exit ;
40145: GO 40506
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
40147: LD_ADDR_VAR 0 5
40151: PUSH
40152: LD_INT 81
40154: PUSH
40155: LD_VAR 0 8
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PPUSH
40164: CALL_OW 69
40168: ST_TO_ADDR
// for i in result do
40169: LD_ADDR_VAR 0 4
40173: PUSH
40174: LD_VAR 0 3
40178: PUSH
40179: FOR_IN
40180: IFFALSE 40504
// begin tag := GetTag ( i ) + 1 ;
40182: LD_ADDR_VAR 0 9
40186: PUSH
40187: LD_VAR 0 4
40191: PPUSH
40192: CALL_OW 110
40196: PUSH
40197: LD_INT 1
40199: PLUS
40200: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
40201: LD_ADDR_VAR 0 7
40205: PUSH
40206: LD_VAR 0 4
40210: PPUSH
40211: CALL_OW 250
40215: PPUSH
40216: LD_VAR 0 4
40220: PPUSH
40221: CALL_OW 251
40225: PPUSH
40226: LD_INT 6
40228: PPUSH
40229: CALL 39804 0 3
40233: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
40234: LD_VAR 0 7
40238: PUSH
40239: LD_VAR 0 4
40243: PPUSH
40244: CALL_OW 264
40248: PUSH
40249: LD_VAR 0 10
40253: IN
40254: NOT
40255: AND
40256: IFFALSE 40295
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
40258: LD_VAR 0 4
40262: PPUSH
40263: LD_VAR 0 7
40267: PUSH
40268: LD_INT 1
40270: ARRAY
40271: PUSH
40272: LD_INT 1
40274: ARRAY
40275: PPUSH
40276: LD_VAR 0 7
40280: PUSH
40281: LD_INT 1
40283: ARRAY
40284: PUSH
40285: LD_INT 2
40287: ARRAY
40288: PPUSH
40289: CALL_OW 116
40293: GO 40502
// if path > tag then
40295: LD_VAR 0 2
40299: PUSH
40300: LD_VAR 0 9
40304: GREATER
40305: IFFALSE 40472
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
40307: LD_ADDR_VAR 0 6
40311: PUSH
40312: LD_VAR 0 5
40316: PPUSH
40317: LD_INT 91
40319: PUSH
40320: LD_VAR 0 4
40324: PUSH
40325: LD_INT 12
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: LIST
40332: PPUSH
40333: CALL_OW 72
40337: ST_TO_ADDR
// if nearEnemy then
40338: LD_VAR 0 6
40342: IFFALSE 40370
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
40344: LD_VAR 0 4
40348: PPUSH
40349: LD_VAR 0 6
40353: PPUSH
40354: LD_VAR 0 4
40358: PPUSH
40359: CALL_OW 74
40363: PPUSH
40364: CALL_OW 115
40368: GO 40470
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
40370: LD_VAR 0 4
40374: PPUSH
40375: LD_VAR 0 2
40379: PUSH
40380: LD_VAR 0 9
40384: ARRAY
40385: PUSH
40386: LD_INT 1
40388: ARRAY
40389: PPUSH
40390: LD_VAR 0 2
40394: PUSH
40395: LD_VAR 0 9
40399: ARRAY
40400: PUSH
40401: LD_INT 2
40403: ARRAY
40404: PPUSH
40405: CALL_OW 297
40409: PUSH
40410: LD_INT 6
40412: GREATER
40413: IFFALSE 40456
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
40415: LD_VAR 0 4
40419: PPUSH
40420: LD_VAR 0 2
40424: PUSH
40425: LD_VAR 0 9
40429: ARRAY
40430: PUSH
40431: LD_INT 1
40433: ARRAY
40434: PPUSH
40435: LD_VAR 0 2
40439: PUSH
40440: LD_VAR 0 9
40444: ARRAY
40445: PUSH
40446: LD_INT 2
40448: ARRAY
40449: PPUSH
40450: CALL_OW 114
40454: GO 40470
// SetTag ( i , tag ) ;
40456: LD_VAR 0 4
40460: PPUSH
40461: LD_VAR 0 9
40465: PPUSH
40466: CALL_OW 109
// end else
40470: GO 40502
// if enemy then
40472: LD_VAR 0 5
40476: IFFALSE 40502
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
40478: LD_VAR 0 4
40482: PPUSH
40483: LD_VAR 0 5
40487: PPUSH
40488: LD_VAR 0 4
40492: PPUSH
40493: CALL_OW 74
40497: PPUSH
40498: CALL_OW 115
// end ;
40502: GO 40179
40504: POP
40505: POP
// end ;
40506: LD_VAR 0 3
40510: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
40511: LD_INT 0
40513: PPUSH
40514: PPUSH
40515: PPUSH
// if not unit or IsInUnit ( unit ) then
40516: LD_VAR 0 1
40520: NOT
40521: PUSH
40522: LD_VAR 0 1
40526: PPUSH
40527: CALL_OW 310
40531: OR
40532: IFFALSE 40536
// exit ;
40534: GO 40627
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
40536: LD_ADDR_VAR 0 4
40540: PUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: CALL_OW 250
40550: PPUSH
40551: LD_VAR 0 2
40555: PPUSH
40556: LD_INT 1
40558: PPUSH
40559: CALL_OW 272
40563: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
40564: LD_ADDR_VAR 0 5
40568: PUSH
40569: LD_VAR 0 1
40573: PPUSH
40574: CALL_OW 251
40578: PPUSH
40579: LD_VAR 0 2
40583: PPUSH
40584: LD_INT 1
40586: PPUSH
40587: CALL_OW 273
40591: ST_TO_ADDR
// if ValidHex ( x , y ) then
40592: LD_VAR 0 4
40596: PPUSH
40597: LD_VAR 0 5
40601: PPUSH
40602: CALL_OW 488
40606: IFFALSE 40627
// ComTurnXY ( unit , x , y ) ;
40608: LD_VAR 0 1
40612: PPUSH
40613: LD_VAR 0 4
40617: PPUSH
40618: LD_VAR 0 5
40622: PPUSH
40623: CALL_OW 118
// end ;
40627: LD_VAR 0 3
40631: RET
// export function SeeUnits ( side , units ) ; var i ; begin
40632: LD_INT 0
40634: PPUSH
40635: PPUSH
// result := false ;
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_INT 0
40643: ST_TO_ADDR
// if not units then
40644: LD_VAR 0 2
40648: NOT
40649: IFFALSE 40653
// exit ;
40651: GO 40698
// for i in units do
40653: LD_ADDR_VAR 0 4
40657: PUSH
40658: LD_VAR 0 2
40662: PUSH
40663: FOR_IN
40664: IFFALSE 40696
// if See ( side , i ) then
40666: LD_VAR 0 1
40670: PPUSH
40671: LD_VAR 0 4
40675: PPUSH
40676: CALL_OW 292
40680: IFFALSE 40694
// begin result := true ;
40682: LD_ADDR_VAR 0 3
40686: PUSH
40687: LD_INT 1
40689: ST_TO_ADDR
// exit ;
40690: POP
40691: POP
40692: GO 40698
// end ;
40694: GO 40663
40696: POP
40697: POP
// end ;
40698: LD_VAR 0 3
40702: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
40703: LD_INT 0
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
// if not unit or not points then
40709: LD_VAR 0 1
40713: NOT
40714: PUSH
40715: LD_VAR 0 2
40719: NOT
40720: OR
40721: IFFALSE 40725
// exit ;
40723: GO 40815
// dist := 99999 ;
40725: LD_ADDR_VAR 0 5
40729: PUSH
40730: LD_INT 99999
40732: ST_TO_ADDR
// for i in points do
40733: LD_ADDR_VAR 0 4
40737: PUSH
40738: LD_VAR 0 2
40742: PUSH
40743: FOR_IN
40744: IFFALSE 40813
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
40746: LD_ADDR_VAR 0 6
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: LD_VAR 0 4
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: PPUSH
40765: LD_VAR 0 4
40769: PUSH
40770: LD_INT 2
40772: ARRAY
40773: PPUSH
40774: CALL_OW 297
40778: ST_TO_ADDR
// if tmpDist < dist then
40779: LD_VAR 0 6
40783: PUSH
40784: LD_VAR 0 5
40788: LESS
40789: IFFALSE 40811
// begin result := i ;
40791: LD_ADDR_VAR 0 3
40795: PUSH
40796: LD_VAR 0 4
40800: ST_TO_ADDR
// dist := tmpDist ;
40801: LD_ADDR_VAR 0 5
40805: PUSH
40806: LD_VAR 0 6
40810: ST_TO_ADDR
// end ; end ;
40811: GO 40743
40813: POP
40814: POP
// end ;
40815: LD_VAR 0 3
40819: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
40820: LD_INT 0
40822: PPUSH
// uc_side := side ;
40823: LD_ADDR_OWVAR 20
40827: PUSH
40828: LD_VAR 0 1
40832: ST_TO_ADDR
// uc_nation := 3 ;
40833: LD_ADDR_OWVAR 21
40837: PUSH
40838: LD_INT 3
40840: ST_TO_ADDR
// vc_chassis := 25 ;
40841: LD_ADDR_OWVAR 37
40845: PUSH
40846: LD_INT 25
40848: ST_TO_ADDR
// vc_engine := engine_siberite ;
40849: LD_ADDR_OWVAR 39
40853: PUSH
40854: LD_INT 3
40856: ST_TO_ADDR
// vc_control := control_computer ;
40857: LD_ADDR_OWVAR 38
40861: PUSH
40862: LD_INT 3
40864: ST_TO_ADDR
// vc_weapon := 59 ;
40865: LD_ADDR_OWVAR 40
40869: PUSH
40870: LD_INT 59
40872: ST_TO_ADDR
// result := CreateVehicle ;
40873: LD_ADDR_VAR 0 5
40877: PUSH
40878: CALL_OW 45
40882: ST_TO_ADDR
// SetDir ( result , d ) ;
40883: LD_VAR 0 5
40887: PPUSH
40888: LD_VAR 0 4
40892: PPUSH
40893: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
40897: LD_VAR 0 5
40901: PPUSH
40902: LD_VAR 0 2
40906: PPUSH
40907: LD_VAR 0 3
40911: PPUSH
40912: LD_INT 0
40914: PPUSH
40915: CALL_OW 48
// end ; end_of_file
40919: LD_VAR 0 5
40923: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
40924: LD_INT 0
40926: PPUSH
// ar_miner := 81 ;
40927: LD_ADDR_EXP 23
40931: PUSH
40932: LD_INT 81
40934: ST_TO_ADDR
// ar_crane := 88 ;
40935: LD_ADDR_EXP 22
40939: PUSH
40940: LD_INT 88
40942: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
40943: LD_ADDR_EXP 17
40947: PUSH
40948: LD_INT 89
40950: ST_TO_ADDR
// us_hack := 99 ;
40951: LD_ADDR_EXP 18
40955: PUSH
40956: LD_INT 99
40958: ST_TO_ADDR
// us_artillery := 97 ;
40959: LD_ADDR_EXP 19
40963: PUSH
40964: LD_INT 97
40966: ST_TO_ADDR
// ar_bio_bomb := 91 ;
40967: LD_ADDR_EXP 20
40971: PUSH
40972: LD_INT 91
40974: ST_TO_ADDR
// ar_mortar := 92 ;
40975: LD_ADDR_EXP 21
40979: PUSH
40980: LD_INT 92
40982: ST_TO_ADDR
// ru_flamethrower := 93 ;
40983: LD_ADDR_EXP 24
40987: PUSH
40988: LD_INT 93
40990: ST_TO_ADDR
// ru_radar := 98 ;
40991: LD_ADDR_EXP 16
40995: PUSH
40996: LD_INT 98
40998: ST_TO_ADDR
// tech_Artillery := 80 ;
40999: LD_ADDR_EXP 25
41003: PUSH
41004: LD_INT 80
41006: ST_TO_ADDR
// tech_RadMat := 81 ;
41007: LD_ADDR_EXP 26
41011: PUSH
41012: LD_INT 81
41014: ST_TO_ADDR
// tech_BasicTools := 82 ;
41015: LD_ADDR_EXP 27
41019: PUSH
41020: LD_INT 82
41022: ST_TO_ADDR
// tech_Cargo := 83 ;
41023: LD_ADDR_EXP 28
41027: PUSH
41028: LD_INT 83
41030: ST_TO_ADDR
// tech_Track := 84 ;
41031: LD_ADDR_EXP 29
41035: PUSH
41036: LD_INT 84
41038: ST_TO_ADDR
// tech_Crane := 85 ;
41039: LD_ADDR_EXP 30
41043: PUSH
41044: LD_INT 85
41046: ST_TO_ADDR
// tech_Bulldozer := 86 ;
41047: LD_ADDR_EXP 31
41051: PUSH
41052: LD_INT 86
41054: ST_TO_ADDR
// tech_Hovercraft := 87 ;
41055: LD_ADDR_EXP 32
41059: PUSH
41060: LD_INT 87
41062: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
41063: LD_ADDR_EXP 33
41067: PUSH
41068: LD_INT 88
41070: ST_TO_ADDR
// class_mastodont := 31 ;
41071: LD_ADDR_EXP 34
41075: PUSH
41076: LD_INT 31
41078: ST_TO_ADDR
// class_horse := 21 ;
41079: LD_ADDR_EXP 35
41083: PUSH
41084: LD_INT 21
41086: ST_TO_ADDR
// end ;
41087: LD_VAR 0 1
41091: RET
// every 1 do
41092: GO 41094
41094: DISABLE
// InitGlobalVariables ; end_of_file
41095: CALL 40924 0 0
41099: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
41100: LD_VAR 0 1
41104: PPUSH
41105: LD_VAR 0 2
41109: PPUSH
41110: LD_VAR 0 3
41114: PPUSH
41115: LD_VAR 0 4
41119: PPUSH
41120: LD_VAR 0 5
41124: PPUSH
41125: LD_VAR 0 6
41129: PPUSH
41130: CALL 41191 0 6
// end ;
41134: PPOPN 6
41136: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
41137: CALL 41166 0 0
// end ; end_of_file
41141: PPOPN 1
41143: END
// every 0 0$1 do
41144: GO 41146
41146: DISABLE
// begin enable ;
41147: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
41148: LD_STRING updateTimer(
41150: PUSH
41151: LD_OWVAR 1
41155: STR
41156: PUSH
41157: LD_STRING );
41159: STR
41160: PPUSH
41161: CALL_OW 559
// end ;
41165: END
// export function SOS_MapStart ( ) ; begin
41166: LD_INT 0
41168: PPUSH
// if streamModeActive then
41169: LD_EXP 36
41173: IFFALSE 41182
// DefineStreamItems ( true ) ;
41175: LD_INT 1
41177: PPUSH
41178: CALL 42832 0 1
// UpdateFactoryWaypoints ( ) ;
41182: CALL 56579 0 0
// end ;
41186: LD_VAR 0 1
41190: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41191: LD_INT 0
41193: PPUSH
// if p2 = 100 then
41194: LD_VAR 0 2
41198: PUSH
41199: LD_INT 100
41201: EQUAL
41202: IFFALSE 42205
// begin if not StreamModeActive then
41204: LD_EXP 36
41208: NOT
41209: IFFALSE 41219
// StreamModeActive := true ;
41211: LD_ADDR_EXP 36
41215: PUSH
41216: LD_INT 1
41218: ST_TO_ADDR
// if p3 = 0 then
41219: LD_VAR 0 3
41223: PUSH
41224: LD_INT 0
41226: EQUAL
41227: IFFALSE 41233
// InitStreamMode ;
41229: CALL 42368 0 0
// if p3 = 1 then
41233: LD_VAR 0 3
41237: PUSH
41238: LD_INT 1
41240: EQUAL
41241: IFFALSE 41251
// sRocket := true ;
41243: LD_ADDR_EXP 41
41247: PUSH
41248: LD_INT 1
41250: ST_TO_ADDR
// if p3 = 2 then
41251: LD_VAR 0 3
41255: PUSH
41256: LD_INT 2
41258: EQUAL
41259: IFFALSE 41269
// sSpeed := true ;
41261: LD_ADDR_EXP 40
41265: PUSH
41266: LD_INT 1
41268: ST_TO_ADDR
// if p3 = 3 then
41269: LD_VAR 0 3
41273: PUSH
41274: LD_INT 3
41276: EQUAL
41277: IFFALSE 41287
// sEngine := true ;
41279: LD_ADDR_EXP 42
41283: PUSH
41284: LD_INT 1
41286: ST_TO_ADDR
// if p3 = 4 then
41287: LD_VAR 0 3
41291: PUSH
41292: LD_INT 4
41294: EQUAL
41295: IFFALSE 41305
// sSpec := true ;
41297: LD_ADDR_EXP 39
41301: PUSH
41302: LD_INT 1
41304: ST_TO_ADDR
// if p3 = 5 then
41305: LD_VAR 0 3
41309: PUSH
41310: LD_INT 5
41312: EQUAL
41313: IFFALSE 41323
// sLevel := true ;
41315: LD_ADDR_EXP 43
41319: PUSH
41320: LD_INT 1
41322: ST_TO_ADDR
// if p3 = 6 then
41323: LD_VAR 0 3
41327: PUSH
41328: LD_INT 6
41330: EQUAL
41331: IFFALSE 41341
// sArmoury := true ;
41333: LD_ADDR_EXP 44
41337: PUSH
41338: LD_INT 1
41340: ST_TO_ADDR
// if p3 = 7 then
41341: LD_VAR 0 3
41345: PUSH
41346: LD_INT 7
41348: EQUAL
41349: IFFALSE 41359
// sRadar := true ;
41351: LD_ADDR_EXP 45
41355: PUSH
41356: LD_INT 1
41358: ST_TO_ADDR
// if p3 = 8 then
41359: LD_VAR 0 3
41363: PUSH
41364: LD_INT 8
41366: EQUAL
41367: IFFALSE 41377
// sBunker := true ;
41369: LD_ADDR_EXP 46
41373: PUSH
41374: LD_INT 1
41376: ST_TO_ADDR
// if p3 = 9 then
41377: LD_VAR 0 3
41381: PUSH
41382: LD_INT 9
41384: EQUAL
41385: IFFALSE 41395
// sHack := true ;
41387: LD_ADDR_EXP 47
41391: PUSH
41392: LD_INT 1
41394: ST_TO_ADDR
// if p3 = 10 then
41395: LD_VAR 0 3
41399: PUSH
41400: LD_INT 10
41402: EQUAL
41403: IFFALSE 41413
// sFire := true ;
41405: LD_ADDR_EXP 48
41409: PUSH
41410: LD_INT 1
41412: ST_TO_ADDR
// if p3 = 11 then
41413: LD_VAR 0 3
41417: PUSH
41418: LD_INT 11
41420: EQUAL
41421: IFFALSE 41431
// sRefresh := true ;
41423: LD_ADDR_EXP 49
41427: PUSH
41428: LD_INT 1
41430: ST_TO_ADDR
// if p3 = 12 then
41431: LD_VAR 0 3
41435: PUSH
41436: LD_INT 12
41438: EQUAL
41439: IFFALSE 41449
// sExp := true ;
41441: LD_ADDR_EXP 50
41445: PUSH
41446: LD_INT 1
41448: ST_TO_ADDR
// if p3 = 13 then
41449: LD_VAR 0 3
41453: PUSH
41454: LD_INT 13
41456: EQUAL
41457: IFFALSE 41467
// sDepot := true ;
41459: LD_ADDR_EXP 51
41463: PUSH
41464: LD_INT 1
41466: ST_TO_ADDR
// if p3 = 14 then
41467: LD_VAR 0 3
41471: PUSH
41472: LD_INT 14
41474: EQUAL
41475: IFFALSE 41485
// sFlag := true ;
41477: LD_ADDR_EXP 52
41481: PUSH
41482: LD_INT 1
41484: ST_TO_ADDR
// if p3 = 15 then
41485: LD_VAR 0 3
41489: PUSH
41490: LD_INT 15
41492: EQUAL
41493: IFFALSE 41503
// sKamikadze := true ;
41495: LD_ADDR_EXP 60
41499: PUSH
41500: LD_INT 1
41502: ST_TO_ADDR
// if p3 = 16 then
41503: LD_VAR 0 3
41507: PUSH
41508: LD_INT 16
41510: EQUAL
41511: IFFALSE 41521
// sTroll := true ;
41513: LD_ADDR_EXP 61
41517: PUSH
41518: LD_INT 1
41520: ST_TO_ADDR
// if p3 = 17 then
41521: LD_VAR 0 3
41525: PUSH
41526: LD_INT 17
41528: EQUAL
41529: IFFALSE 41539
// sSlow := true ;
41531: LD_ADDR_EXP 62
41535: PUSH
41536: LD_INT 1
41538: ST_TO_ADDR
// if p3 = 18 then
41539: LD_VAR 0 3
41543: PUSH
41544: LD_INT 18
41546: EQUAL
41547: IFFALSE 41557
// sLack := true ;
41549: LD_ADDR_EXP 63
41553: PUSH
41554: LD_INT 1
41556: ST_TO_ADDR
// if p3 = 19 then
41557: LD_VAR 0 3
41561: PUSH
41562: LD_INT 19
41564: EQUAL
41565: IFFALSE 41575
// sTank := true ;
41567: LD_ADDR_EXP 65
41571: PUSH
41572: LD_INT 1
41574: ST_TO_ADDR
// if p3 = 20 then
41575: LD_VAR 0 3
41579: PUSH
41580: LD_INT 20
41582: EQUAL
41583: IFFALSE 41593
// sRemote := true ;
41585: LD_ADDR_EXP 66
41589: PUSH
41590: LD_INT 1
41592: ST_TO_ADDR
// if p3 = 21 then
41593: LD_VAR 0 3
41597: PUSH
41598: LD_INT 21
41600: EQUAL
41601: IFFALSE 41611
// sPowell := true ;
41603: LD_ADDR_EXP 67
41607: PUSH
41608: LD_INT 1
41610: ST_TO_ADDR
// if p3 = 22 then
41611: LD_VAR 0 3
41615: PUSH
41616: LD_INT 22
41618: EQUAL
41619: IFFALSE 41629
// sTeleport := true ;
41621: LD_ADDR_EXP 70
41625: PUSH
41626: LD_INT 1
41628: ST_TO_ADDR
// if p3 = 23 then
41629: LD_VAR 0 3
41633: PUSH
41634: LD_INT 23
41636: EQUAL
41637: IFFALSE 41647
// sOilTower := true ;
41639: LD_ADDR_EXP 72
41643: PUSH
41644: LD_INT 1
41646: ST_TO_ADDR
// if p3 = 24 then
41647: LD_VAR 0 3
41651: PUSH
41652: LD_INT 24
41654: EQUAL
41655: IFFALSE 41665
// sShovel := true ;
41657: LD_ADDR_EXP 73
41661: PUSH
41662: LD_INT 1
41664: ST_TO_ADDR
// if p3 = 25 then
41665: LD_VAR 0 3
41669: PUSH
41670: LD_INT 25
41672: EQUAL
41673: IFFALSE 41683
// sSheik := true ;
41675: LD_ADDR_EXP 74
41679: PUSH
41680: LD_INT 1
41682: ST_TO_ADDR
// if p3 = 26 then
41683: LD_VAR 0 3
41687: PUSH
41688: LD_INT 26
41690: EQUAL
41691: IFFALSE 41701
// sEarthquake := true ;
41693: LD_ADDR_EXP 76
41697: PUSH
41698: LD_INT 1
41700: ST_TO_ADDR
// if p3 = 27 then
41701: LD_VAR 0 3
41705: PUSH
41706: LD_INT 27
41708: EQUAL
41709: IFFALSE 41719
// sAI := true ;
41711: LD_ADDR_EXP 77
41715: PUSH
41716: LD_INT 1
41718: ST_TO_ADDR
// if p3 = 28 then
41719: LD_VAR 0 3
41723: PUSH
41724: LD_INT 28
41726: EQUAL
41727: IFFALSE 41737
// sCargo := true ;
41729: LD_ADDR_EXP 80
41733: PUSH
41734: LD_INT 1
41736: ST_TO_ADDR
// if p3 = 29 then
41737: LD_VAR 0 3
41741: PUSH
41742: LD_INT 29
41744: EQUAL
41745: IFFALSE 41755
// sDLaser := true ;
41747: LD_ADDR_EXP 81
41751: PUSH
41752: LD_INT 1
41754: ST_TO_ADDR
// if p3 = 30 then
41755: LD_VAR 0 3
41759: PUSH
41760: LD_INT 30
41762: EQUAL
41763: IFFALSE 41773
// sExchange := true ;
41765: LD_ADDR_EXP 82
41769: PUSH
41770: LD_INT 1
41772: ST_TO_ADDR
// if p3 = 31 then
41773: LD_VAR 0 3
41777: PUSH
41778: LD_INT 31
41780: EQUAL
41781: IFFALSE 41791
// sFac := true ;
41783: LD_ADDR_EXP 83
41787: PUSH
41788: LD_INT 1
41790: ST_TO_ADDR
// if p3 = 32 then
41791: LD_VAR 0 3
41795: PUSH
41796: LD_INT 32
41798: EQUAL
41799: IFFALSE 41809
// sPower := true ;
41801: LD_ADDR_EXP 84
41805: PUSH
41806: LD_INT 1
41808: ST_TO_ADDR
// if p3 = 33 then
41809: LD_VAR 0 3
41813: PUSH
41814: LD_INT 33
41816: EQUAL
41817: IFFALSE 41827
// sRandom := true ;
41819: LD_ADDR_EXP 85
41823: PUSH
41824: LD_INT 1
41826: ST_TO_ADDR
// if p3 = 34 then
41827: LD_VAR 0 3
41831: PUSH
41832: LD_INT 34
41834: EQUAL
41835: IFFALSE 41845
// sShield := true ;
41837: LD_ADDR_EXP 86
41841: PUSH
41842: LD_INT 1
41844: ST_TO_ADDR
// if p3 = 35 then
41845: LD_VAR 0 3
41849: PUSH
41850: LD_INT 35
41852: EQUAL
41853: IFFALSE 41863
// sTime := true ;
41855: LD_ADDR_EXP 87
41859: PUSH
41860: LD_INT 1
41862: ST_TO_ADDR
// if p3 = 36 then
41863: LD_VAR 0 3
41867: PUSH
41868: LD_INT 36
41870: EQUAL
41871: IFFALSE 41881
// sTools := true ;
41873: LD_ADDR_EXP 88
41877: PUSH
41878: LD_INT 1
41880: ST_TO_ADDR
// if p3 = 101 then
41881: LD_VAR 0 3
41885: PUSH
41886: LD_INT 101
41888: EQUAL
41889: IFFALSE 41899
// sSold := true ;
41891: LD_ADDR_EXP 53
41895: PUSH
41896: LD_INT 1
41898: ST_TO_ADDR
// if p3 = 102 then
41899: LD_VAR 0 3
41903: PUSH
41904: LD_INT 102
41906: EQUAL
41907: IFFALSE 41917
// sDiff := true ;
41909: LD_ADDR_EXP 54
41913: PUSH
41914: LD_INT 1
41916: ST_TO_ADDR
// if p3 = 103 then
41917: LD_VAR 0 3
41921: PUSH
41922: LD_INT 103
41924: EQUAL
41925: IFFALSE 41935
// sFog := true ;
41927: LD_ADDR_EXP 57
41931: PUSH
41932: LD_INT 1
41934: ST_TO_ADDR
// if p3 = 104 then
41935: LD_VAR 0 3
41939: PUSH
41940: LD_INT 104
41942: EQUAL
41943: IFFALSE 41953
// sReset := true ;
41945: LD_ADDR_EXP 58
41949: PUSH
41950: LD_INT 1
41952: ST_TO_ADDR
// if p3 = 105 then
41953: LD_VAR 0 3
41957: PUSH
41958: LD_INT 105
41960: EQUAL
41961: IFFALSE 41971
// sSun := true ;
41963: LD_ADDR_EXP 59
41967: PUSH
41968: LD_INT 1
41970: ST_TO_ADDR
// if p3 = 106 then
41971: LD_VAR 0 3
41975: PUSH
41976: LD_INT 106
41978: EQUAL
41979: IFFALSE 41989
// sTiger := true ;
41981: LD_ADDR_EXP 55
41985: PUSH
41986: LD_INT 1
41988: ST_TO_ADDR
// if p3 = 107 then
41989: LD_VAR 0 3
41993: PUSH
41994: LD_INT 107
41996: EQUAL
41997: IFFALSE 42007
// sBomb := true ;
41999: LD_ADDR_EXP 56
42003: PUSH
42004: LD_INT 1
42006: ST_TO_ADDR
// if p3 = 108 then
42007: LD_VAR 0 3
42011: PUSH
42012: LD_INT 108
42014: EQUAL
42015: IFFALSE 42025
// sWound := true ;
42017: LD_ADDR_EXP 64
42021: PUSH
42022: LD_INT 1
42024: ST_TO_ADDR
// if p3 = 109 then
42025: LD_VAR 0 3
42029: PUSH
42030: LD_INT 109
42032: EQUAL
42033: IFFALSE 42043
// sBetray := true ;
42035: LD_ADDR_EXP 68
42039: PUSH
42040: LD_INT 1
42042: ST_TO_ADDR
// if p3 = 110 then
42043: LD_VAR 0 3
42047: PUSH
42048: LD_INT 110
42050: EQUAL
42051: IFFALSE 42061
// sContamin := true ;
42053: LD_ADDR_EXP 69
42057: PUSH
42058: LD_INT 1
42060: ST_TO_ADDR
// if p3 = 111 then
42061: LD_VAR 0 3
42065: PUSH
42066: LD_INT 111
42068: EQUAL
42069: IFFALSE 42079
// sOil := true ;
42071: LD_ADDR_EXP 71
42075: PUSH
42076: LD_INT 1
42078: ST_TO_ADDR
// if p3 = 112 then
42079: LD_VAR 0 3
42083: PUSH
42084: LD_INT 112
42086: EQUAL
42087: IFFALSE 42097
// sStu := true ;
42089: LD_ADDR_EXP 75
42093: PUSH
42094: LD_INT 1
42096: ST_TO_ADDR
// if p3 = 113 then
42097: LD_VAR 0 3
42101: PUSH
42102: LD_INT 113
42104: EQUAL
42105: IFFALSE 42115
// sBazooka := true ;
42107: LD_ADDR_EXP 78
42111: PUSH
42112: LD_INT 1
42114: ST_TO_ADDR
// if p3 = 114 then
42115: LD_VAR 0 3
42119: PUSH
42120: LD_INT 114
42122: EQUAL
42123: IFFALSE 42133
// sMortar := true ;
42125: LD_ADDR_EXP 79
42129: PUSH
42130: LD_INT 1
42132: ST_TO_ADDR
// if p3 = 115 then
42133: LD_VAR 0 3
42137: PUSH
42138: LD_INT 115
42140: EQUAL
42141: IFFALSE 42151
// sRanger := true ;
42143: LD_ADDR_EXP 89
42147: PUSH
42148: LD_INT 1
42150: ST_TO_ADDR
// if p3 = 116 then
42151: LD_VAR 0 3
42155: PUSH
42156: LD_INT 116
42158: EQUAL
42159: IFFALSE 42169
// sComputer := true ;
42161: LD_ADDR_EXP 90
42165: PUSH
42166: LD_INT 1
42168: ST_TO_ADDR
// if p3 = 117 then
42169: LD_VAR 0 3
42173: PUSH
42174: LD_INT 117
42176: EQUAL
42177: IFFALSE 42187
// s30 := true ;
42179: LD_ADDR_EXP 91
42183: PUSH
42184: LD_INT 1
42186: ST_TO_ADDR
// if p3 = 118 then
42187: LD_VAR 0 3
42191: PUSH
42192: LD_INT 118
42194: EQUAL
42195: IFFALSE 42205
// s60 := true ;
42197: LD_ADDR_EXP 92
42201: PUSH
42202: LD_INT 1
42204: ST_TO_ADDR
// end ; if p2 = 101 then
42205: LD_VAR 0 2
42209: PUSH
42210: LD_INT 101
42212: EQUAL
42213: IFFALSE 42341
// begin case p3 of 1 :
42215: LD_VAR 0 3
42219: PUSH
42220: LD_INT 1
42222: DOUBLE
42223: EQUAL
42224: IFTRUE 42228
42226: GO 42235
42228: POP
// hHackUnlimitedResources ; 2 :
42229: CALL 54439 0 0
42233: GO 42341
42235: LD_INT 2
42237: DOUBLE
42238: EQUAL
42239: IFTRUE 42243
42241: GO 42250
42243: POP
// hHackSetLevel10 ; 3 :
42244: CALL 54572 0 0
42248: GO 42341
42250: LD_INT 3
42252: DOUBLE
42253: EQUAL
42254: IFTRUE 42258
42256: GO 42265
42258: POP
// hHackSetLevel10YourUnits ; 4 :
42259: CALL 54657 0 0
42263: GO 42341
42265: LD_INT 4
42267: DOUBLE
42268: EQUAL
42269: IFTRUE 42273
42271: GO 42280
42273: POP
// hHackInvincible ; 5 :
42274: CALL 55105 0 0
42278: GO 42341
42280: LD_INT 5
42282: DOUBLE
42283: EQUAL
42284: IFTRUE 42288
42286: GO 42295
42288: POP
// hHackInvisible ; 6 :
42289: CALL 55216 0 0
42293: GO 42341
42295: LD_INT 6
42297: DOUBLE
42298: EQUAL
42299: IFTRUE 42303
42301: GO 42310
42303: POP
// hHackChangeYourSide ; 7 :
42304: CALL 55273 0 0
42308: GO 42341
42310: LD_INT 7
42312: DOUBLE
42313: EQUAL
42314: IFTRUE 42318
42316: GO 42325
42318: POP
// hHackChangeUnitSide ; 8 :
42319: CALL 55315 0 0
42323: GO 42341
42325: LD_INT 8
42327: DOUBLE
42328: EQUAL
42329: IFTRUE 42333
42331: GO 42340
42333: POP
// hHackFog ; end ;
42334: CALL 55416 0 0
42338: GO 42341
42340: POP
// end ; end ;
42341: LD_VAR 0 7
42345: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
42346: GO 42348
42348: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
42349: LD_STRING initStreamRollete();
42351: PPUSH
42352: CALL_OW 559
// InitStreamMode ;
42356: CALL 42368 0 0
// DefineStreamItems ( false ) ;
42360: LD_INT 0
42362: PPUSH
42363: CALL 42832 0 1
// end ;
42367: END
// function InitStreamMode ; begin
42368: LD_INT 0
42370: PPUSH
// streamModeActive := false ;
42371: LD_ADDR_EXP 36
42375: PUSH
42376: LD_INT 0
42378: ST_TO_ADDR
// normalCounter := 36 ;
42379: LD_ADDR_EXP 37
42383: PUSH
42384: LD_INT 36
42386: ST_TO_ADDR
// hardcoreCounter := 18 ;
42387: LD_ADDR_EXP 38
42391: PUSH
42392: LD_INT 18
42394: ST_TO_ADDR
// sRocket := false ;
42395: LD_ADDR_EXP 41
42399: PUSH
42400: LD_INT 0
42402: ST_TO_ADDR
// sSpeed := false ;
42403: LD_ADDR_EXP 40
42407: PUSH
42408: LD_INT 0
42410: ST_TO_ADDR
// sEngine := false ;
42411: LD_ADDR_EXP 42
42415: PUSH
42416: LD_INT 0
42418: ST_TO_ADDR
// sSpec := false ;
42419: LD_ADDR_EXP 39
42423: PUSH
42424: LD_INT 0
42426: ST_TO_ADDR
// sLevel := false ;
42427: LD_ADDR_EXP 43
42431: PUSH
42432: LD_INT 0
42434: ST_TO_ADDR
// sArmoury := false ;
42435: LD_ADDR_EXP 44
42439: PUSH
42440: LD_INT 0
42442: ST_TO_ADDR
// sRadar := false ;
42443: LD_ADDR_EXP 45
42447: PUSH
42448: LD_INT 0
42450: ST_TO_ADDR
// sBunker := false ;
42451: LD_ADDR_EXP 46
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
// sHack := false ;
42459: LD_ADDR_EXP 47
42463: PUSH
42464: LD_INT 0
42466: ST_TO_ADDR
// sFire := false ;
42467: LD_ADDR_EXP 48
42471: PUSH
42472: LD_INT 0
42474: ST_TO_ADDR
// sRefresh := false ;
42475: LD_ADDR_EXP 49
42479: PUSH
42480: LD_INT 0
42482: ST_TO_ADDR
// sExp := false ;
42483: LD_ADDR_EXP 50
42487: PUSH
42488: LD_INT 0
42490: ST_TO_ADDR
// sDepot := false ;
42491: LD_ADDR_EXP 51
42495: PUSH
42496: LD_INT 0
42498: ST_TO_ADDR
// sFlag := false ;
42499: LD_ADDR_EXP 52
42503: PUSH
42504: LD_INT 0
42506: ST_TO_ADDR
// sKamikadze := false ;
42507: LD_ADDR_EXP 60
42511: PUSH
42512: LD_INT 0
42514: ST_TO_ADDR
// sTroll := false ;
42515: LD_ADDR_EXP 61
42519: PUSH
42520: LD_INT 0
42522: ST_TO_ADDR
// sSlow := false ;
42523: LD_ADDR_EXP 62
42527: PUSH
42528: LD_INT 0
42530: ST_TO_ADDR
// sLack := false ;
42531: LD_ADDR_EXP 63
42535: PUSH
42536: LD_INT 0
42538: ST_TO_ADDR
// sTank := false ;
42539: LD_ADDR_EXP 65
42543: PUSH
42544: LD_INT 0
42546: ST_TO_ADDR
// sRemote := false ;
42547: LD_ADDR_EXP 66
42551: PUSH
42552: LD_INT 0
42554: ST_TO_ADDR
// sPowell := false ;
42555: LD_ADDR_EXP 67
42559: PUSH
42560: LD_INT 0
42562: ST_TO_ADDR
// sTeleport := false ;
42563: LD_ADDR_EXP 70
42567: PUSH
42568: LD_INT 0
42570: ST_TO_ADDR
// sOilTower := false ;
42571: LD_ADDR_EXP 72
42575: PUSH
42576: LD_INT 0
42578: ST_TO_ADDR
// sShovel := false ;
42579: LD_ADDR_EXP 73
42583: PUSH
42584: LD_INT 0
42586: ST_TO_ADDR
// sSheik := false ;
42587: LD_ADDR_EXP 74
42591: PUSH
42592: LD_INT 0
42594: ST_TO_ADDR
// sEarthquake := false ;
42595: LD_ADDR_EXP 76
42599: PUSH
42600: LD_INT 0
42602: ST_TO_ADDR
// sAI := false ;
42603: LD_ADDR_EXP 77
42607: PUSH
42608: LD_INT 0
42610: ST_TO_ADDR
// sCargo := false ;
42611: LD_ADDR_EXP 80
42615: PUSH
42616: LD_INT 0
42618: ST_TO_ADDR
// sDLaser := false ;
42619: LD_ADDR_EXP 81
42623: PUSH
42624: LD_INT 0
42626: ST_TO_ADDR
// sExchange := false ;
42627: LD_ADDR_EXP 82
42631: PUSH
42632: LD_INT 0
42634: ST_TO_ADDR
// sFac := false ;
42635: LD_ADDR_EXP 83
42639: PUSH
42640: LD_INT 0
42642: ST_TO_ADDR
// sPower := false ;
42643: LD_ADDR_EXP 84
42647: PUSH
42648: LD_INT 0
42650: ST_TO_ADDR
// sRandom := false ;
42651: LD_ADDR_EXP 85
42655: PUSH
42656: LD_INT 0
42658: ST_TO_ADDR
// sShield := false ;
42659: LD_ADDR_EXP 86
42663: PUSH
42664: LD_INT 0
42666: ST_TO_ADDR
// sTime := false ;
42667: LD_ADDR_EXP 87
42671: PUSH
42672: LD_INT 0
42674: ST_TO_ADDR
// sTools := false ;
42675: LD_ADDR_EXP 88
42679: PUSH
42680: LD_INT 0
42682: ST_TO_ADDR
// sSold := false ;
42683: LD_ADDR_EXP 53
42687: PUSH
42688: LD_INT 0
42690: ST_TO_ADDR
// sDiff := false ;
42691: LD_ADDR_EXP 54
42695: PUSH
42696: LD_INT 0
42698: ST_TO_ADDR
// sFog := false ;
42699: LD_ADDR_EXP 57
42703: PUSH
42704: LD_INT 0
42706: ST_TO_ADDR
// sReset := false ;
42707: LD_ADDR_EXP 58
42711: PUSH
42712: LD_INT 0
42714: ST_TO_ADDR
// sSun := false ;
42715: LD_ADDR_EXP 59
42719: PUSH
42720: LD_INT 0
42722: ST_TO_ADDR
// sTiger := false ;
42723: LD_ADDR_EXP 55
42727: PUSH
42728: LD_INT 0
42730: ST_TO_ADDR
// sBomb := false ;
42731: LD_ADDR_EXP 56
42735: PUSH
42736: LD_INT 0
42738: ST_TO_ADDR
// sWound := false ;
42739: LD_ADDR_EXP 64
42743: PUSH
42744: LD_INT 0
42746: ST_TO_ADDR
// sBetray := false ;
42747: LD_ADDR_EXP 68
42751: PUSH
42752: LD_INT 0
42754: ST_TO_ADDR
// sContamin := false ;
42755: LD_ADDR_EXP 69
42759: PUSH
42760: LD_INT 0
42762: ST_TO_ADDR
// sOil := false ;
42763: LD_ADDR_EXP 71
42767: PUSH
42768: LD_INT 0
42770: ST_TO_ADDR
// sStu := false ;
42771: LD_ADDR_EXP 75
42775: PUSH
42776: LD_INT 0
42778: ST_TO_ADDR
// sBazooka := false ;
42779: LD_ADDR_EXP 78
42783: PUSH
42784: LD_INT 0
42786: ST_TO_ADDR
// sMortar := false ;
42787: LD_ADDR_EXP 79
42791: PUSH
42792: LD_INT 0
42794: ST_TO_ADDR
// sRanger := false ;
42795: LD_ADDR_EXP 89
42799: PUSH
42800: LD_INT 0
42802: ST_TO_ADDR
// sComputer := false ;
42803: LD_ADDR_EXP 90
42807: PUSH
42808: LD_INT 0
42810: ST_TO_ADDR
// s30 := false ;
42811: LD_ADDR_EXP 91
42815: PUSH
42816: LD_INT 0
42818: ST_TO_ADDR
// s60 := false ;
42819: LD_ADDR_EXP 92
42823: PUSH
42824: LD_INT 0
42826: ST_TO_ADDR
// end ;
42827: LD_VAR 0 1
42831: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
42832: LD_INT 0
42834: PPUSH
42835: PPUSH
42836: PPUSH
42837: PPUSH
42838: PPUSH
42839: PPUSH
42840: PPUSH
// result := [ ] ;
42841: LD_ADDR_VAR 0 2
42845: PUSH
42846: EMPTY
42847: ST_TO_ADDR
// if campaign_id = 1 then
42848: LD_OWVAR 69
42852: PUSH
42853: LD_INT 1
42855: EQUAL
42856: IFFALSE 46022
// begin case mission_number of 1 :
42858: LD_OWVAR 70
42862: PUSH
42863: LD_INT 1
42865: DOUBLE
42866: EQUAL
42867: IFTRUE 42871
42869: GO 42947
42871: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
42872: LD_ADDR_VAR 0 2
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: LD_INT 4
42882: PUSH
42883: LD_INT 11
42885: PUSH
42886: LD_INT 12
42888: PUSH
42889: LD_INT 15
42891: PUSH
42892: LD_INT 16
42894: PUSH
42895: LD_INT 22
42897: PUSH
42898: LD_INT 23
42900: PUSH
42901: LD_INT 26
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 101
42917: PUSH
42918: LD_INT 102
42920: PUSH
42921: LD_INT 106
42923: PUSH
42924: LD_INT 116
42926: PUSH
42927: LD_INT 117
42929: PUSH
42930: LD_INT 118
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: ST_TO_ADDR
42945: GO 46020
42947: LD_INT 2
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42955
42953: GO 43039
42955: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
42956: LD_ADDR_VAR 0 2
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 4
42966: PUSH
42967: LD_INT 11
42969: PUSH
42970: LD_INT 12
42972: PUSH
42973: LD_INT 15
42975: PUSH
42976: LD_INT 16
42978: PUSH
42979: LD_INT 22
42981: PUSH
42982: LD_INT 23
42984: PUSH
42985: LD_INT 26
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 101
43001: PUSH
43002: LD_INT 102
43004: PUSH
43005: LD_INT 105
43007: PUSH
43008: LD_INT 106
43010: PUSH
43011: LD_INT 108
43013: PUSH
43014: LD_INT 116
43016: PUSH
43017: LD_INT 117
43019: PUSH
43020: LD_INT 118
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: ST_TO_ADDR
43037: GO 46020
43039: LD_INT 3
43041: DOUBLE
43042: EQUAL
43043: IFTRUE 43047
43045: GO 43135
43047: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
43048: LD_ADDR_VAR 0 2
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 4
43058: PUSH
43059: LD_INT 5
43061: PUSH
43062: LD_INT 11
43064: PUSH
43065: LD_INT 12
43067: PUSH
43068: LD_INT 15
43070: PUSH
43071: LD_INT 16
43073: PUSH
43074: LD_INT 22
43076: PUSH
43077: LD_INT 26
43079: PUSH
43080: LD_INT 36
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 101
43097: PUSH
43098: LD_INT 102
43100: PUSH
43101: LD_INT 105
43103: PUSH
43104: LD_INT 106
43106: PUSH
43107: LD_INT 108
43109: PUSH
43110: LD_INT 116
43112: PUSH
43113: LD_INT 117
43115: PUSH
43116: LD_INT 118
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: ST_TO_ADDR
43133: GO 46020
43135: LD_INT 4
43137: DOUBLE
43138: EQUAL
43139: IFTRUE 43143
43141: GO 43239
43143: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
43144: LD_ADDR_VAR 0 2
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 4
43154: PUSH
43155: LD_INT 5
43157: PUSH
43158: LD_INT 8
43160: PUSH
43161: LD_INT 11
43163: PUSH
43164: LD_INT 12
43166: PUSH
43167: LD_INT 15
43169: PUSH
43170: LD_INT 16
43172: PUSH
43173: LD_INT 22
43175: PUSH
43176: LD_INT 23
43178: PUSH
43179: LD_INT 26
43181: PUSH
43182: LD_INT 36
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 101
43201: PUSH
43202: LD_INT 102
43204: PUSH
43205: LD_INT 105
43207: PUSH
43208: LD_INT 106
43210: PUSH
43211: LD_INT 108
43213: PUSH
43214: LD_INT 116
43216: PUSH
43217: LD_INT 117
43219: PUSH
43220: LD_INT 118
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: ST_TO_ADDR
43237: GO 46020
43239: LD_INT 5
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43247
43245: GO 43359
43247: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
43248: LD_ADDR_VAR 0 2
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 4
43258: PUSH
43259: LD_INT 5
43261: PUSH
43262: LD_INT 6
43264: PUSH
43265: LD_INT 8
43267: PUSH
43268: LD_INT 11
43270: PUSH
43271: LD_INT 12
43273: PUSH
43274: LD_INT 15
43276: PUSH
43277: LD_INT 16
43279: PUSH
43280: LD_INT 22
43282: PUSH
43283: LD_INT 23
43285: PUSH
43286: LD_INT 25
43288: PUSH
43289: LD_INT 26
43291: PUSH
43292: LD_INT 36
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 101
43313: PUSH
43314: LD_INT 102
43316: PUSH
43317: LD_INT 105
43319: PUSH
43320: LD_INT 106
43322: PUSH
43323: LD_INT 108
43325: PUSH
43326: LD_INT 109
43328: PUSH
43329: LD_INT 112
43331: PUSH
43332: LD_INT 116
43334: PUSH
43335: LD_INT 117
43337: PUSH
43338: LD_INT 118
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: ST_TO_ADDR
43357: GO 46020
43359: LD_INT 6
43361: DOUBLE
43362: EQUAL
43363: IFTRUE 43367
43365: GO 43499
43367: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
43368: LD_ADDR_VAR 0 2
43372: PUSH
43373: LD_INT 2
43375: PUSH
43376: LD_INT 4
43378: PUSH
43379: LD_INT 5
43381: PUSH
43382: LD_INT 6
43384: PUSH
43385: LD_INT 8
43387: PUSH
43388: LD_INT 11
43390: PUSH
43391: LD_INT 12
43393: PUSH
43394: LD_INT 15
43396: PUSH
43397: LD_INT 16
43399: PUSH
43400: LD_INT 20
43402: PUSH
43403: LD_INT 21
43405: PUSH
43406: LD_INT 22
43408: PUSH
43409: LD_INT 23
43411: PUSH
43412: LD_INT 25
43414: PUSH
43415: LD_INT 26
43417: PUSH
43418: LD_INT 30
43420: PUSH
43421: LD_INT 31
43423: PUSH
43424: LD_INT 32
43426: PUSH
43427: LD_INT 36
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 101
43453: PUSH
43454: LD_INT 102
43456: PUSH
43457: LD_INT 105
43459: PUSH
43460: LD_INT 106
43462: PUSH
43463: LD_INT 108
43465: PUSH
43466: LD_INT 109
43468: PUSH
43469: LD_INT 112
43471: PUSH
43472: LD_INT 116
43474: PUSH
43475: LD_INT 117
43477: PUSH
43478: LD_INT 118
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: ST_TO_ADDR
43497: GO 46020
43499: LD_INT 7
43501: DOUBLE
43502: EQUAL
43503: IFTRUE 43507
43505: GO 43619
43507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
43508: LD_ADDR_VAR 0 2
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 4
43518: PUSH
43519: LD_INT 5
43521: PUSH
43522: LD_INT 7
43524: PUSH
43525: LD_INT 11
43527: PUSH
43528: LD_INT 12
43530: PUSH
43531: LD_INT 15
43533: PUSH
43534: LD_INT 16
43536: PUSH
43537: LD_INT 20
43539: PUSH
43540: LD_INT 21
43542: PUSH
43543: LD_INT 22
43545: PUSH
43546: LD_INT 23
43548: PUSH
43549: LD_INT 25
43551: PUSH
43552: LD_INT 26
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 101
43573: PUSH
43574: LD_INT 102
43576: PUSH
43577: LD_INT 103
43579: PUSH
43580: LD_INT 105
43582: PUSH
43583: LD_INT 106
43585: PUSH
43586: LD_INT 108
43588: PUSH
43589: LD_INT 112
43591: PUSH
43592: LD_INT 116
43594: PUSH
43595: LD_INT 117
43597: PUSH
43598: LD_INT 118
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: ST_TO_ADDR
43617: GO 46020
43619: LD_INT 8
43621: DOUBLE
43622: EQUAL
43623: IFTRUE 43627
43625: GO 43767
43627: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
43628: LD_ADDR_VAR 0 2
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: LD_INT 4
43638: PUSH
43639: LD_INT 5
43641: PUSH
43642: LD_INT 6
43644: PUSH
43645: LD_INT 7
43647: PUSH
43648: LD_INT 8
43650: PUSH
43651: LD_INT 11
43653: PUSH
43654: LD_INT 12
43656: PUSH
43657: LD_INT 15
43659: PUSH
43660: LD_INT 16
43662: PUSH
43663: LD_INT 20
43665: PUSH
43666: LD_INT 21
43668: PUSH
43669: LD_INT 22
43671: PUSH
43672: LD_INT 23
43674: PUSH
43675: LD_INT 25
43677: PUSH
43678: LD_INT 26
43680: PUSH
43681: LD_INT 30
43683: PUSH
43684: LD_INT 31
43686: PUSH
43687: LD_INT 32
43689: PUSH
43690: LD_INT 36
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 101
43717: PUSH
43718: LD_INT 102
43720: PUSH
43721: LD_INT 103
43723: PUSH
43724: LD_INT 105
43726: PUSH
43727: LD_INT 106
43729: PUSH
43730: LD_INT 108
43732: PUSH
43733: LD_INT 109
43735: PUSH
43736: LD_INT 112
43738: PUSH
43739: LD_INT 116
43741: PUSH
43742: LD_INT 117
43744: PUSH
43745: LD_INT 118
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: ST_TO_ADDR
43765: GO 46020
43767: LD_INT 9
43769: DOUBLE
43770: EQUAL
43771: IFTRUE 43775
43773: GO 43923
43775: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
43776: LD_ADDR_VAR 0 2
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: LD_INT 4
43786: PUSH
43787: LD_INT 5
43789: PUSH
43790: LD_INT 6
43792: PUSH
43793: LD_INT 7
43795: PUSH
43796: LD_INT 8
43798: PUSH
43799: LD_INT 11
43801: PUSH
43802: LD_INT 12
43804: PUSH
43805: LD_INT 15
43807: PUSH
43808: LD_INT 16
43810: PUSH
43811: LD_INT 20
43813: PUSH
43814: LD_INT 21
43816: PUSH
43817: LD_INT 22
43819: PUSH
43820: LD_INT 23
43822: PUSH
43823: LD_INT 25
43825: PUSH
43826: LD_INT 26
43828: PUSH
43829: LD_INT 28
43831: PUSH
43832: LD_INT 30
43834: PUSH
43835: LD_INT 31
43837: PUSH
43838: LD_INT 32
43840: PUSH
43841: LD_INT 36
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 101
43869: PUSH
43870: LD_INT 102
43872: PUSH
43873: LD_INT 103
43875: PUSH
43876: LD_INT 105
43878: PUSH
43879: LD_INT 106
43881: PUSH
43882: LD_INT 108
43884: PUSH
43885: LD_INT 109
43887: PUSH
43888: LD_INT 112
43890: PUSH
43891: LD_INT 114
43893: PUSH
43894: LD_INT 116
43896: PUSH
43897: LD_INT 117
43899: PUSH
43900: LD_INT 118
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: ST_TO_ADDR
43921: GO 46020
43923: LD_INT 10
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43931
43929: GO 44127
43931: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
43932: LD_ADDR_VAR 0 2
43936: PUSH
43937: LD_INT 2
43939: PUSH
43940: LD_INT 4
43942: PUSH
43943: LD_INT 5
43945: PUSH
43946: LD_INT 6
43948: PUSH
43949: LD_INT 7
43951: PUSH
43952: LD_INT 8
43954: PUSH
43955: LD_INT 9
43957: PUSH
43958: LD_INT 10
43960: PUSH
43961: LD_INT 11
43963: PUSH
43964: LD_INT 12
43966: PUSH
43967: LD_INT 13
43969: PUSH
43970: LD_INT 14
43972: PUSH
43973: LD_INT 15
43975: PUSH
43976: LD_INT 16
43978: PUSH
43979: LD_INT 17
43981: PUSH
43982: LD_INT 18
43984: PUSH
43985: LD_INT 19
43987: PUSH
43988: LD_INT 20
43990: PUSH
43991: LD_INT 21
43993: PUSH
43994: LD_INT 22
43996: PUSH
43997: LD_INT 23
43999: PUSH
44000: LD_INT 24
44002: PUSH
44003: LD_INT 25
44005: PUSH
44006: LD_INT 26
44008: PUSH
44009: LD_INT 28
44011: PUSH
44012: LD_INT 30
44014: PUSH
44015: LD_INT 31
44017: PUSH
44018: LD_INT 32
44020: PUSH
44021: LD_INT 36
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 101
44057: PUSH
44058: LD_INT 102
44060: PUSH
44061: LD_INT 103
44063: PUSH
44064: LD_INT 104
44066: PUSH
44067: LD_INT 105
44069: PUSH
44070: LD_INT 106
44072: PUSH
44073: LD_INT 107
44075: PUSH
44076: LD_INT 108
44078: PUSH
44079: LD_INT 109
44081: PUSH
44082: LD_INT 110
44084: PUSH
44085: LD_INT 111
44087: PUSH
44088: LD_INT 112
44090: PUSH
44091: LD_INT 114
44093: PUSH
44094: LD_INT 116
44096: PUSH
44097: LD_INT 117
44099: PUSH
44100: LD_INT 118
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: ST_TO_ADDR
44125: GO 46020
44127: LD_INT 11
44129: DOUBLE
44130: EQUAL
44131: IFTRUE 44135
44133: GO 44339
44135: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
44136: LD_ADDR_VAR 0 2
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: LD_INT 4
44149: PUSH
44150: LD_INT 5
44152: PUSH
44153: LD_INT 6
44155: PUSH
44156: LD_INT 7
44158: PUSH
44159: LD_INT 8
44161: PUSH
44162: LD_INT 9
44164: PUSH
44165: LD_INT 10
44167: PUSH
44168: LD_INT 11
44170: PUSH
44171: LD_INT 12
44173: PUSH
44174: LD_INT 13
44176: PUSH
44177: LD_INT 14
44179: PUSH
44180: LD_INT 15
44182: PUSH
44183: LD_INT 16
44185: PUSH
44186: LD_INT 17
44188: PUSH
44189: LD_INT 18
44191: PUSH
44192: LD_INT 19
44194: PUSH
44195: LD_INT 20
44197: PUSH
44198: LD_INT 21
44200: PUSH
44201: LD_INT 22
44203: PUSH
44204: LD_INT 23
44206: PUSH
44207: LD_INT 24
44209: PUSH
44210: LD_INT 25
44212: PUSH
44213: LD_INT 26
44215: PUSH
44216: LD_INT 28
44218: PUSH
44219: LD_INT 30
44221: PUSH
44222: LD_INT 31
44224: PUSH
44225: LD_INT 32
44227: PUSH
44228: LD_INT 34
44230: PUSH
44231: LD_INT 36
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 101
44269: PUSH
44270: LD_INT 102
44272: PUSH
44273: LD_INT 103
44275: PUSH
44276: LD_INT 104
44278: PUSH
44279: LD_INT 105
44281: PUSH
44282: LD_INT 106
44284: PUSH
44285: LD_INT 107
44287: PUSH
44288: LD_INT 108
44290: PUSH
44291: LD_INT 109
44293: PUSH
44294: LD_INT 110
44296: PUSH
44297: LD_INT 111
44299: PUSH
44300: LD_INT 112
44302: PUSH
44303: LD_INT 114
44305: PUSH
44306: LD_INT 116
44308: PUSH
44309: LD_INT 117
44311: PUSH
44312: LD_INT 118
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: ST_TO_ADDR
44337: GO 46020
44339: LD_INT 12
44341: DOUBLE
44342: EQUAL
44343: IFTRUE 44347
44345: GO 44567
44347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
44348: LD_ADDR_VAR 0 2
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: LD_INT 2
44358: PUSH
44359: LD_INT 3
44361: PUSH
44362: LD_INT 4
44364: PUSH
44365: LD_INT 5
44367: PUSH
44368: LD_INT 6
44370: PUSH
44371: LD_INT 7
44373: PUSH
44374: LD_INT 8
44376: PUSH
44377: LD_INT 9
44379: PUSH
44380: LD_INT 10
44382: PUSH
44383: LD_INT 11
44385: PUSH
44386: LD_INT 12
44388: PUSH
44389: LD_INT 13
44391: PUSH
44392: LD_INT 14
44394: PUSH
44395: LD_INT 15
44397: PUSH
44398: LD_INT 16
44400: PUSH
44401: LD_INT 17
44403: PUSH
44404: LD_INT 18
44406: PUSH
44407: LD_INT 19
44409: PUSH
44410: LD_INT 20
44412: PUSH
44413: LD_INT 21
44415: PUSH
44416: LD_INT 22
44418: PUSH
44419: LD_INT 23
44421: PUSH
44422: LD_INT 24
44424: PUSH
44425: LD_INT 25
44427: PUSH
44428: LD_INT 26
44430: PUSH
44431: LD_INT 27
44433: PUSH
44434: LD_INT 28
44436: PUSH
44437: LD_INT 30
44439: PUSH
44440: LD_INT 31
44442: PUSH
44443: LD_INT 32
44445: PUSH
44446: LD_INT 33
44448: PUSH
44449: LD_INT 34
44451: PUSH
44452: LD_INT 36
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 101
44493: PUSH
44494: LD_INT 102
44496: PUSH
44497: LD_INT 103
44499: PUSH
44500: LD_INT 104
44502: PUSH
44503: LD_INT 105
44505: PUSH
44506: LD_INT 106
44508: PUSH
44509: LD_INT 107
44511: PUSH
44512: LD_INT 108
44514: PUSH
44515: LD_INT 109
44517: PUSH
44518: LD_INT 110
44520: PUSH
44521: LD_INT 111
44523: PUSH
44524: LD_INT 112
44526: PUSH
44527: LD_INT 113
44529: PUSH
44530: LD_INT 114
44532: PUSH
44533: LD_INT 116
44535: PUSH
44536: LD_INT 117
44538: PUSH
44539: LD_INT 118
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: ST_TO_ADDR
44565: GO 46020
44567: LD_INT 13
44569: DOUBLE
44570: EQUAL
44571: IFTRUE 44575
44573: GO 44783
44575: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
44576: LD_ADDR_VAR 0 2
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: LD_INT 4
44592: PUSH
44593: LD_INT 5
44595: PUSH
44596: LD_INT 8
44598: PUSH
44599: LD_INT 9
44601: PUSH
44602: LD_INT 10
44604: PUSH
44605: LD_INT 11
44607: PUSH
44608: LD_INT 12
44610: PUSH
44611: LD_INT 14
44613: PUSH
44614: LD_INT 15
44616: PUSH
44617: LD_INT 16
44619: PUSH
44620: LD_INT 17
44622: PUSH
44623: LD_INT 18
44625: PUSH
44626: LD_INT 19
44628: PUSH
44629: LD_INT 20
44631: PUSH
44632: LD_INT 21
44634: PUSH
44635: LD_INT 22
44637: PUSH
44638: LD_INT 23
44640: PUSH
44641: LD_INT 24
44643: PUSH
44644: LD_INT 25
44646: PUSH
44647: LD_INT 26
44649: PUSH
44650: LD_INT 27
44652: PUSH
44653: LD_INT 28
44655: PUSH
44656: LD_INT 30
44658: PUSH
44659: LD_INT 31
44661: PUSH
44662: LD_INT 32
44664: PUSH
44665: LD_INT 33
44667: PUSH
44668: LD_INT 34
44670: PUSH
44671: LD_INT 36
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 101
44709: PUSH
44710: LD_INT 102
44712: PUSH
44713: LD_INT 103
44715: PUSH
44716: LD_INT 104
44718: PUSH
44719: LD_INT 105
44721: PUSH
44722: LD_INT 106
44724: PUSH
44725: LD_INT 107
44727: PUSH
44728: LD_INT 108
44730: PUSH
44731: LD_INT 109
44733: PUSH
44734: LD_INT 110
44736: PUSH
44737: LD_INT 111
44739: PUSH
44740: LD_INT 112
44742: PUSH
44743: LD_INT 113
44745: PUSH
44746: LD_INT 114
44748: PUSH
44749: LD_INT 116
44751: PUSH
44752: LD_INT 117
44754: PUSH
44755: LD_INT 118
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: ST_TO_ADDR
44781: GO 46020
44783: LD_INT 14
44785: DOUBLE
44786: EQUAL
44787: IFTRUE 44791
44789: GO 45015
44791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
44792: LD_ADDR_VAR 0 2
44796: PUSH
44797: LD_INT 1
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: LD_INT 4
44808: PUSH
44809: LD_INT 5
44811: PUSH
44812: LD_INT 6
44814: PUSH
44815: LD_INT 7
44817: PUSH
44818: LD_INT 8
44820: PUSH
44821: LD_INT 9
44823: PUSH
44824: LD_INT 10
44826: PUSH
44827: LD_INT 11
44829: PUSH
44830: LD_INT 12
44832: PUSH
44833: LD_INT 13
44835: PUSH
44836: LD_INT 14
44838: PUSH
44839: LD_INT 15
44841: PUSH
44842: LD_INT 16
44844: PUSH
44845: LD_INT 17
44847: PUSH
44848: LD_INT 18
44850: PUSH
44851: LD_INT 19
44853: PUSH
44854: LD_INT 20
44856: PUSH
44857: LD_INT 21
44859: PUSH
44860: LD_INT 22
44862: PUSH
44863: LD_INT 23
44865: PUSH
44866: LD_INT 24
44868: PUSH
44869: LD_INT 25
44871: PUSH
44872: LD_INT 26
44874: PUSH
44875: LD_INT 27
44877: PUSH
44878: LD_INT 28
44880: PUSH
44881: LD_INT 29
44883: PUSH
44884: LD_INT 30
44886: PUSH
44887: LD_INT 31
44889: PUSH
44890: LD_INT 32
44892: PUSH
44893: LD_INT 33
44895: PUSH
44896: LD_INT 34
44898: PUSH
44899: LD_INT 36
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 101
44941: PUSH
44942: LD_INT 102
44944: PUSH
44945: LD_INT 103
44947: PUSH
44948: LD_INT 104
44950: PUSH
44951: LD_INT 105
44953: PUSH
44954: LD_INT 106
44956: PUSH
44957: LD_INT 107
44959: PUSH
44960: LD_INT 108
44962: PUSH
44963: LD_INT 109
44965: PUSH
44966: LD_INT 110
44968: PUSH
44969: LD_INT 111
44971: PUSH
44972: LD_INT 112
44974: PUSH
44975: LD_INT 113
44977: PUSH
44978: LD_INT 114
44980: PUSH
44981: LD_INT 116
44983: PUSH
44984: LD_INT 117
44986: PUSH
44987: LD_INT 118
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: ST_TO_ADDR
45013: GO 46020
45015: LD_INT 15
45017: DOUBLE
45018: EQUAL
45019: IFTRUE 45023
45021: GO 45247
45023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
45024: LD_ADDR_VAR 0 2
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: LD_INT 3
45037: PUSH
45038: LD_INT 4
45040: PUSH
45041: LD_INT 5
45043: PUSH
45044: LD_INT 6
45046: PUSH
45047: LD_INT 7
45049: PUSH
45050: LD_INT 8
45052: PUSH
45053: LD_INT 9
45055: PUSH
45056: LD_INT 10
45058: PUSH
45059: LD_INT 11
45061: PUSH
45062: LD_INT 12
45064: PUSH
45065: LD_INT 13
45067: PUSH
45068: LD_INT 14
45070: PUSH
45071: LD_INT 15
45073: PUSH
45074: LD_INT 16
45076: PUSH
45077: LD_INT 17
45079: PUSH
45080: LD_INT 18
45082: PUSH
45083: LD_INT 19
45085: PUSH
45086: LD_INT 20
45088: PUSH
45089: LD_INT 21
45091: PUSH
45092: LD_INT 22
45094: PUSH
45095: LD_INT 23
45097: PUSH
45098: LD_INT 24
45100: PUSH
45101: LD_INT 25
45103: PUSH
45104: LD_INT 26
45106: PUSH
45107: LD_INT 27
45109: PUSH
45110: LD_INT 28
45112: PUSH
45113: LD_INT 29
45115: PUSH
45116: LD_INT 30
45118: PUSH
45119: LD_INT 31
45121: PUSH
45122: LD_INT 32
45124: PUSH
45125: LD_INT 33
45127: PUSH
45128: LD_INT 34
45130: PUSH
45131: LD_INT 36
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: LIST
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 101
45173: PUSH
45174: LD_INT 102
45176: PUSH
45177: LD_INT 103
45179: PUSH
45180: LD_INT 104
45182: PUSH
45183: LD_INT 105
45185: PUSH
45186: LD_INT 106
45188: PUSH
45189: LD_INT 107
45191: PUSH
45192: LD_INT 108
45194: PUSH
45195: LD_INT 109
45197: PUSH
45198: LD_INT 110
45200: PUSH
45201: LD_INT 111
45203: PUSH
45204: LD_INT 112
45206: PUSH
45207: LD_INT 113
45209: PUSH
45210: LD_INT 114
45212: PUSH
45213: LD_INT 116
45215: PUSH
45216: LD_INT 117
45218: PUSH
45219: LD_INT 118
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: ST_TO_ADDR
45245: GO 46020
45247: LD_INT 16
45249: DOUBLE
45250: EQUAL
45251: IFTRUE 45255
45253: GO 45391
45255: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
45256: LD_ADDR_VAR 0 2
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 4
45266: PUSH
45267: LD_INT 5
45269: PUSH
45270: LD_INT 7
45272: PUSH
45273: LD_INT 11
45275: PUSH
45276: LD_INT 12
45278: PUSH
45279: LD_INT 15
45281: PUSH
45282: LD_INT 16
45284: PUSH
45285: LD_INT 20
45287: PUSH
45288: LD_INT 21
45290: PUSH
45291: LD_INT 22
45293: PUSH
45294: LD_INT 23
45296: PUSH
45297: LD_INT 25
45299: PUSH
45300: LD_INT 26
45302: PUSH
45303: LD_INT 30
45305: PUSH
45306: LD_INT 31
45308: PUSH
45309: LD_INT 32
45311: PUSH
45312: LD_INT 33
45314: PUSH
45315: LD_INT 34
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 101
45341: PUSH
45342: LD_INT 102
45344: PUSH
45345: LD_INT 103
45347: PUSH
45348: LD_INT 106
45350: PUSH
45351: LD_INT 108
45353: PUSH
45354: LD_INT 112
45356: PUSH
45357: LD_INT 113
45359: PUSH
45360: LD_INT 114
45362: PUSH
45363: LD_INT 116
45365: PUSH
45366: LD_INT 117
45368: PUSH
45369: LD_INT 118
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: ST_TO_ADDR
45389: GO 46020
45391: LD_INT 17
45393: DOUBLE
45394: EQUAL
45395: IFTRUE 45399
45397: GO 45623
45399: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
45400: LD_ADDR_VAR 0 2
45404: PUSH
45405: LD_INT 1
45407: PUSH
45408: LD_INT 2
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 4
45416: PUSH
45417: LD_INT 5
45419: PUSH
45420: LD_INT 6
45422: PUSH
45423: LD_INT 7
45425: PUSH
45426: LD_INT 8
45428: PUSH
45429: LD_INT 9
45431: PUSH
45432: LD_INT 10
45434: PUSH
45435: LD_INT 11
45437: PUSH
45438: LD_INT 12
45440: PUSH
45441: LD_INT 13
45443: PUSH
45444: LD_INT 14
45446: PUSH
45447: LD_INT 15
45449: PUSH
45450: LD_INT 16
45452: PUSH
45453: LD_INT 17
45455: PUSH
45456: LD_INT 18
45458: PUSH
45459: LD_INT 19
45461: PUSH
45462: LD_INT 20
45464: PUSH
45465: LD_INT 21
45467: PUSH
45468: LD_INT 22
45470: PUSH
45471: LD_INT 23
45473: PUSH
45474: LD_INT 24
45476: PUSH
45477: LD_INT 25
45479: PUSH
45480: LD_INT 26
45482: PUSH
45483: LD_INT 27
45485: PUSH
45486: LD_INT 28
45488: PUSH
45489: LD_INT 29
45491: PUSH
45492: LD_INT 30
45494: PUSH
45495: LD_INT 31
45497: PUSH
45498: LD_INT 32
45500: PUSH
45501: LD_INT 33
45503: PUSH
45504: LD_INT 34
45506: PUSH
45507: LD_INT 36
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 101
45549: PUSH
45550: LD_INT 102
45552: PUSH
45553: LD_INT 103
45555: PUSH
45556: LD_INT 104
45558: PUSH
45559: LD_INT 105
45561: PUSH
45562: LD_INT 106
45564: PUSH
45565: LD_INT 107
45567: PUSH
45568: LD_INT 108
45570: PUSH
45571: LD_INT 109
45573: PUSH
45574: LD_INT 110
45576: PUSH
45577: LD_INT 111
45579: PUSH
45580: LD_INT 112
45582: PUSH
45583: LD_INT 113
45585: PUSH
45586: LD_INT 114
45588: PUSH
45589: LD_INT 116
45591: PUSH
45592: LD_INT 117
45594: PUSH
45595: LD_INT 118
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: ST_TO_ADDR
45621: GO 46020
45623: LD_INT 18
45625: DOUBLE
45626: EQUAL
45627: IFTRUE 45631
45629: GO 45779
45631: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
45632: LD_ADDR_VAR 0 2
45636: PUSH
45637: LD_INT 2
45639: PUSH
45640: LD_INT 4
45642: PUSH
45643: LD_INT 5
45645: PUSH
45646: LD_INT 7
45648: PUSH
45649: LD_INT 11
45651: PUSH
45652: LD_INT 12
45654: PUSH
45655: LD_INT 15
45657: PUSH
45658: LD_INT 16
45660: PUSH
45661: LD_INT 20
45663: PUSH
45664: LD_INT 21
45666: PUSH
45667: LD_INT 22
45669: PUSH
45670: LD_INT 23
45672: PUSH
45673: LD_INT 25
45675: PUSH
45676: LD_INT 26
45678: PUSH
45679: LD_INT 30
45681: PUSH
45682: LD_INT 31
45684: PUSH
45685: LD_INT 32
45687: PUSH
45688: LD_INT 33
45690: PUSH
45691: LD_INT 34
45693: PUSH
45694: LD_INT 35
45696: PUSH
45697: LD_INT 36
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 101
45725: PUSH
45726: LD_INT 102
45728: PUSH
45729: LD_INT 103
45731: PUSH
45732: LD_INT 106
45734: PUSH
45735: LD_INT 108
45737: PUSH
45738: LD_INT 112
45740: PUSH
45741: LD_INT 113
45743: PUSH
45744: LD_INT 114
45746: PUSH
45747: LD_INT 115
45749: PUSH
45750: LD_INT 116
45752: PUSH
45753: LD_INT 117
45755: PUSH
45756: LD_INT 118
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: ST_TO_ADDR
45777: GO 46020
45779: LD_INT 19
45781: DOUBLE
45782: EQUAL
45783: IFTRUE 45787
45785: GO 46019
45787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
45788: LD_ADDR_VAR 0 2
45792: PUSH
45793: LD_INT 1
45795: PUSH
45796: LD_INT 2
45798: PUSH
45799: LD_INT 3
45801: PUSH
45802: LD_INT 4
45804: PUSH
45805: LD_INT 5
45807: PUSH
45808: LD_INT 6
45810: PUSH
45811: LD_INT 7
45813: PUSH
45814: LD_INT 8
45816: PUSH
45817: LD_INT 9
45819: PUSH
45820: LD_INT 10
45822: PUSH
45823: LD_INT 11
45825: PUSH
45826: LD_INT 12
45828: PUSH
45829: LD_INT 13
45831: PUSH
45832: LD_INT 14
45834: PUSH
45835: LD_INT 15
45837: PUSH
45838: LD_INT 16
45840: PUSH
45841: LD_INT 17
45843: PUSH
45844: LD_INT 18
45846: PUSH
45847: LD_INT 19
45849: PUSH
45850: LD_INT 20
45852: PUSH
45853: LD_INT 21
45855: PUSH
45856: LD_INT 22
45858: PUSH
45859: LD_INT 23
45861: PUSH
45862: LD_INT 24
45864: PUSH
45865: LD_INT 25
45867: PUSH
45868: LD_INT 26
45870: PUSH
45871: LD_INT 27
45873: PUSH
45874: LD_INT 28
45876: PUSH
45877: LD_INT 29
45879: PUSH
45880: LD_INT 30
45882: PUSH
45883: LD_INT 31
45885: PUSH
45886: LD_INT 32
45888: PUSH
45889: LD_INT 33
45891: PUSH
45892: LD_INT 34
45894: PUSH
45895: LD_INT 35
45897: PUSH
45898: LD_INT 36
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 101
45941: PUSH
45942: LD_INT 102
45944: PUSH
45945: LD_INT 103
45947: PUSH
45948: LD_INT 104
45950: PUSH
45951: LD_INT 105
45953: PUSH
45954: LD_INT 106
45956: PUSH
45957: LD_INT 107
45959: PUSH
45960: LD_INT 108
45962: PUSH
45963: LD_INT 109
45965: PUSH
45966: LD_INT 110
45968: PUSH
45969: LD_INT 111
45971: PUSH
45972: LD_INT 112
45974: PUSH
45975: LD_INT 113
45977: PUSH
45978: LD_INT 114
45980: PUSH
45981: LD_INT 115
45983: PUSH
45984: LD_INT 116
45986: PUSH
45987: LD_INT 117
45989: PUSH
45990: LD_INT 118
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: ST_TO_ADDR
46017: GO 46020
46019: POP
// end else
46020: GO 46251
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
46022: LD_ADDR_VAR 0 2
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: LD_INT 4
46038: PUSH
46039: LD_INT 5
46041: PUSH
46042: LD_INT 6
46044: PUSH
46045: LD_INT 7
46047: PUSH
46048: LD_INT 8
46050: PUSH
46051: LD_INT 9
46053: PUSH
46054: LD_INT 10
46056: PUSH
46057: LD_INT 11
46059: PUSH
46060: LD_INT 12
46062: PUSH
46063: LD_INT 13
46065: PUSH
46066: LD_INT 14
46068: PUSH
46069: LD_INT 15
46071: PUSH
46072: LD_INT 16
46074: PUSH
46075: LD_INT 17
46077: PUSH
46078: LD_INT 18
46080: PUSH
46081: LD_INT 19
46083: PUSH
46084: LD_INT 20
46086: PUSH
46087: LD_INT 21
46089: PUSH
46090: LD_INT 22
46092: PUSH
46093: LD_INT 23
46095: PUSH
46096: LD_INT 24
46098: PUSH
46099: LD_INT 25
46101: PUSH
46102: LD_INT 26
46104: PUSH
46105: LD_INT 27
46107: PUSH
46108: LD_INT 28
46110: PUSH
46111: LD_INT 29
46113: PUSH
46114: LD_INT 30
46116: PUSH
46117: LD_INT 31
46119: PUSH
46120: LD_INT 32
46122: PUSH
46123: LD_INT 33
46125: PUSH
46126: LD_INT 34
46128: PUSH
46129: LD_INT 35
46131: PUSH
46132: LD_INT 36
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 101
46175: PUSH
46176: LD_INT 102
46178: PUSH
46179: LD_INT 103
46181: PUSH
46182: LD_INT 104
46184: PUSH
46185: LD_INT 105
46187: PUSH
46188: LD_INT 106
46190: PUSH
46191: LD_INT 107
46193: PUSH
46194: LD_INT 108
46196: PUSH
46197: LD_INT 109
46199: PUSH
46200: LD_INT 110
46202: PUSH
46203: LD_INT 111
46205: PUSH
46206: LD_INT 112
46208: PUSH
46209: LD_INT 113
46211: PUSH
46212: LD_INT 114
46214: PUSH
46215: LD_INT 115
46217: PUSH
46218: LD_INT 116
46220: PUSH
46221: LD_INT 117
46223: PUSH
46224: LD_INT 118
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: ST_TO_ADDR
// if result then
46251: LD_VAR 0 2
46255: IFFALSE 47041
// begin normal :=  ;
46257: LD_ADDR_VAR 0 5
46261: PUSH
46262: LD_STRING 
46264: ST_TO_ADDR
// hardcore :=  ;
46265: LD_ADDR_VAR 0 6
46269: PUSH
46270: LD_STRING 
46272: ST_TO_ADDR
// active :=  ;
46273: LD_ADDR_VAR 0 7
46277: PUSH
46278: LD_STRING 
46280: ST_TO_ADDR
// for i = 1 to normalCounter do
46281: LD_ADDR_VAR 0 8
46285: PUSH
46286: DOUBLE
46287: LD_INT 1
46289: DEC
46290: ST_TO_ADDR
46291: LD_EXP 37
46295: PUSH
46296: FOR_TO
46297: IFFALSE 46398
// begin tmp := 0 ;
46299: LD_ADDR_VAR 0 3
46303: PUSH
46304: LD_STRING 0
46306: ST_TO_ADDR
// if result [ 1 ] then
46307: LD_VAR 0 2
46311: PUSH
46312: LD_INT 1
46314: ARRAY
46315: IFFALSE 46380
// if result [ 1 ] [ 1 ] = i then
46317: LD_VAR 0 2
46321: PUSH
46322: LD_INT 1
46324: ARRAY
46325: PUSH
46326: LD_INT 1
46328: ARRAY
46329: PUSH
46330: LD_VAR 0 8
46334: EQUAL
46335: IFFALSE 46380
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
46337: LD_ADDR_VAR 0 2
46341: PUSH
46342: LD_VAR 0 2
46346: PPUSH
46347: LD_INT 1
46349: PPUSH
46350: LD_VAR 0 2
46354: PUSH
46355: LD_INT 1
46357: ARRAY
46358: PPUSH
46359: LD_INT 1
46361: PPUSH
46362: CALL_OW 3
46366: PPUSH
46367: CALL_OW 1
46371: ST_TO_ADDR
// tmp := 1 ;
46372: LD_ADDR_VAR 0 3
46376: PUSH
46377: LD_STRING 1
46379: ST_TO_ADDR
// end ; normal := normal & tmp ;
46380: LD_ADDR_VAR 0 5
46384: PUSH
46385: LD_VAR 0 5
46389: PUSH
46390: LD_VAR 0 3
46394: STR
46395: ST_TO_ADDR
// end ;
46396: GO 46296
46398: POP
46399: POP
// for i = 1 to hardcoreCounter do
46400: LD_ADDR_VAR 0 8
46404: PUSH
46405: DOUBLE
46406: LD_INT 1
46408: DEC
46409: ST_TO_ADDR
46410: LD_EXP 38
46414: PUSH
46415: FOR_TO
46416: IFFALSE 46521
// begin tmp := 0 ;
46418: LD_ADDR_VAR 0 3
46422: PUSH
46423: LD_STRING 0
46425: ST_TO_ADDR
// if result [ 2 ] then
46426: LD_VAR 0 2
46430: PUSH
46431: LD_INT 2
46433: ARRAY
46434: IFFALSE 46503
// if result [ 2 ] [ 1 ] = 100 + i then
46436: LD_VAR 0 2
46440: PUSH
46441: LD_INT 2
46443: ARRAY
46444: PUSH
46445: LD_INT 1
46447: ARRAY
46448: PUSH
46449: LD_INT 100
46451: PUSH
46452: LD_VAR 0 8
46456: PLUS
46457: EQUAL
46458: IFFALSE 46503
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
46460: LD_ADDR_VAR 0 2
46464: PUSH
46465: LD_VAR 0 2
46469: PPUSH
46470: LD_INT 2
46472: PPUSH
46473: LD_VAR 0 2
46477: PUSH
46478: LD_INT 2
46480: ARRAY
46481: PPUSH
46482: LD_INT 1
46484: PPUSH
46485: CALL_OW 3
46489: PPUSH
46490: CALL_OW 1
46494: ST_TO_ADDR
// tmp := 1 ;
46495: LD_ADDR_VAR 0 3
46499: PUSH
46500: LD_STRING 1
46502: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
46503: LD_ADDR_VAR 0 6
46507: PUSH
46508: LD_VAR 0 6
46512: PUSH
46513: LD_VAR 0 3
46517: STR
46518: ST_TO_ADDR
// end ;
46519: GO 46415
46521: POP
46522: POP
// if isGameLoad then
46523: LD_VAR 0 1
46527: IFFALSE 47002
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
46529: LD_ADDR_VAR 0 4
46533: PUSH
46534: LD_EXP 41
46538: PUSH
46539: LD_EXP 40
46543: PUSH
46544: LD_EXP 42
46548: PUSH
46549: LD_EXP 39
46553: PUSH
46554: LD_EXP 43
46558: PUSH
46559: LD_EXP 44
46563: PUSH
46564: LD_EXP 45
46568: PUSH
46569: LD_EXP 46
46573: PUSH
46574: LD_EXP 47
46578: PUSH
46579: LD_EXP 48
46583: PUSH
46584: LD_EXP 49
46588: PUSH
46589: LD_EXP 50
46593: PUSH
46594: LD_EXP 51
46598: PUSH
46599: LD_EXP 52
46603: PUSH
46604: LD_EXP 60
46608: PUSH
46609: LD_EXP 61
46613: PUSH
46614: LD_EXP 62
46618: PUSH
46619: LD_EXP 63
46623: PUSH
46624: LD_EXP 65
46628: PUSH
46629: LD_EXP 66
46633: PUSH
46634: LD_EXP 67
46638: PUSH
46639: LD_EXP 70
46643: PUSH
46644: LD_EXP 72
46648: PUSH
46649: LD_EXP 73
46653: PUSH
46654: LD_EXP 74
46658: PUSH
46659: LD_EXP 76
46663: PUSH
46664: LD_EXP 77
46668: PUSH
46669: LD_EXP 80
46673: PUSH
46674: LD_EXP 81
46678: PUSH
46679: LD_EXP 82
46683: PUSH
46684: LD_EXP 83
46688: PUSH
46689: LD_EXP 84
46693: PUSH
46694: LD_EXP 85
46698: PUSH
46699: LD_EXP 86
46703: PUSH
46704: LD_EXP 87
46708: PUSH
46709: LD_EXP 88
46713: PUSH
46714: LD_EXP 53
46718: PUSH
46719: LD_EXP 54
46723: PUSH
46724: LD_EXP 57
46728: PUSH
46729: LD_EXP 58
46733: PUSH
46734: LD_EXP 59
46738: PUSH
46739: LD_EXP 55
46743: PUSH
46744: LD_EXP 56
46748: PUSH
46749: LD_EXP 64
46753: PUSH
46754: LD_EXP 68
46758: PUSH
46759: LD_EXP 69
46763: PUSH
46764: LD_EXP 71
46768: PUSH
46769: LD_EXP 75
46773: PUSH
46774: LD_EXP 78
46778: PUSH
46779: LD_EXP 79
46783: PUSH
46784: LD_EXP 89
46788: PUSH
46789: LD_EXP 90
46793: PUSH
46794: LD_EXP 91
46798: PUSH
46799: LD_EXP 92
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// tmp :=  ;
46860: LD_ADDR_VAR 0 3
46864: PUSH
46865: LD_STRING 
46867: ST_TO_ADDR
// for i = 1 to normalCounter do
46868: LD_ADDR_VAR 0 8
46872: PUSH
46873: DOUBLE
46874: LD_INT 1
46876: DEC
46877: ST_TO_ADDR
46878: LD_EXP 37
46882: PUSH
46883: FOR_TO
46884: IFFALSE 46920
// begin if flags [ i ] then
46886: LD_VAR 0 4
46890: PUSH
46891: LD_VAR 0 8
46895: ARRAY
46896: IFFALSE 46918
// tmp := tmp & i & ; ;
46898: LD_ADDR_VAR 0 3
46902: PUSH
46903: LD_VAR 0 3
46907: PUSH
46908: LD_VAR 0 8
46912: STR
46913: PUSH
46914: LD_STRING ;
46916: STR
46917: ST_TO_ADDR
// end ;
46918: GO 46883
46920: POP
46921: POP
// for i = 1 to hardcoreCounter do
46922: LD_ADDR_VAR 0 8
46926: PUSH
46927: DOUBLE
46928: LD_INT 1
46930: DEC
46931: ST_TO_ADDR
46932: LD_EXP 38
46936: PUSH
46937: FOR_TO
46938: IFFALSE 46984
// begin if flags [ normalCounter + i ] then
46940: LD_VAR 0 4
46944: PUSH
46945: LD_EXP 37
46949: PUSH
46950: LD_VAR 0 8
46954: PLUS
46955: ARRAY
46956: IFFALSE 46982
// tmp := tmp & ( 100 + i ) & ; ;
46958: LD_ADDR_VAR 0 3
46962: PUSH
46963: LD_VAR 0 3
46967: PUSH
46968: LD_INT 100
46970: PUSH
46971: LD_VAR 0 8
46975: PLUS
46976: STR
46977: PUSH
46978: LD_STRING ;
46980: STR
46981: ST_TO_ADDR
// end ;
46982: GO 46937
46984: POP
46985: POP
// if tmp then
46986: LD_VAR 0 3
46990: IFFALSE 47002
// active := tmp ;
46992: LD_ADDR_VAR 0 7
46996: PUSH
46997: LD_VAR 0 3
47001: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
47002: LD_STRING getStreamItemsFromMission("
47004: PUSH
47005: LD_VAR 0 5
47009: STR
47010: PUSH
47011: LD_STRING ","
47013: STR
47014: PUSH
47015: LD_VAR 0 6
47019: STR
47020: PUSH
47021: LD_STRING ","
47023: STR
47024: PUSH
47025: LD_VAR 0 7
47029: STR
47030: PUSH
47031: LD_STRING ")
47033: STR
47034: PPUSH
47035: CALL_OW 559
// end else
47039: GO 47048
// ToLua ( getStreamItemsFromMission("","","") ) ;
47041: LD_STRING getStreamItemsFromMission("","","")
47043: PPUSH
47044: CALL_OW 559
// end ;
47048: LD_VAR 0 2
47052: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
47053: LD_EXP 36
47057: PUSH
47058: LD_EXP 41
47062: AND
47063: IFFALSE 47187
47065: GO 47067
47067: DISABLE
47068: LD_INT 0
47070: PPUSH
47071: PPUSH
// begin enable ;
47072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
47073: LD_ADDR_VAR 0 2
47077: PUSH
47078: LD_INT 22
47080: PUSH
47081: LD_OWVAR 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: PUSH
47093: LD_INT 34
47095: PUSH
47096: LD_INT 7
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 34
47105: PUSH
47106: LD_INT 45
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 34
47115: PUSH
47116: LD_INT 28
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 34
47125: PUSH
47126: LD_INT 47
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PPUSH
47144: CALL_OW 69
47148: ST_TO_ADDR
// if not tmp then
47149: LD_VAR 0 2
47153: NOT
47154: IFFALSE 47158
// exit ;
47156: GO 47187
// for i in tmp do
47158: LD_ADDR_VAR 0 1
47162: PUSH
47163: LD_VAR 0 2
47167: PUSH
47168: FOR_IN
47169: IFFALSE 47185
// begin SetLives ( i , 0 ) ;
47171: LD_VAR 0 1
47175: PPUSH
47176: LD_INT 0
47178: PPUSH
47179: CALL_OW 234
// end ;
47183: GO 47168
47185: POP
47186: POP
// end ;
47187: PPOPN 2
47189: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
47190: LD_EXP 36
47194: PUSH
47195: LD_EXP 42
47199: AND
47200: IFFALSE 47284
47202: GO 47204
47204: DISABLE
47205: LD_INT 0
47207: PPUSH
47208: PPUSH
// begin enable ;
47209: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
47210: LD_ADDR_VAR 0 2
47214: PUSH
47215: LD_INT 22
47217: PUSH
47218: LD_OWVAR 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 32
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PPUSH
47241: CALL_OW 69
47245: ST_TO_ADDR
// if not tmp then
47246: LD_VAR 0 2
47250: NOT
47251: IFFALSE 47255
// exit ;
47253: GO 47284
// for i in tmp do
47255: LD_ADDR_VAR 0 1
47259: PUSH
47260: LD_VAR 0 2
47264: PUSH
47265: FOR_IN
47266: IFFALSE 47282
// begin SetLives ( i , 0 ) ;
47268: LD_VAR 0 1
47272: PPUSH
47273: LD_INT 0
47275: PPUSH
47276: CALL_OW 234
// end ;
47280: GO 47265
47282: POP
47283: POP
// end ;
47284: PPOPN 2
47286: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
47287: LD_EXP 36
47291: PUSH
47292: LD_EXP 39
47296: AND
47297: IFFALSE 47390
47299: GO 47301
47301: DISABLE
47302: LD_INT 0
47304: PPUSH
// begin enable ;
47305: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
47306: LD_ADDR_VAR 0 1
47310: PUSH
47311: LD_INT 22
47313: PUSH
47314: LD_OWVAR 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 25
47328: PUSH
47329: LD_INT 5
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 25
47338: PUSH
47339: LD_INT 9
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 25
47348: PUSH
47349: LD_INT 8
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PPUSH
47366: CALL_OW 69
47370: PUSH
47371: FOR_IN
47372: IFFALSE 47388
// begin SetClass ( i , 1 ) ;
47374: LD_VAR 0 1
47378: PPUSH
47379: LD_INT 1
47381: PPUSH
47382: CALL_OW 336
// end ;
47386: GO 47371
47388: POP
47389: POP
// end ;
47390: PPOPN 1
47392: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
47393: LD_EXP 36
47397: PUSH
47398: LD_EXP 40
47402: AND
47403: PUSH
47404: LD_OWVAR 65
47408: PUSH
47409: LD_INT 7
47411: LESS
47412: AND
47413: IFFALSE 47427
47415: GO 47417
47417: DISABLE
// begin enable ;
47418: ENABLE
// game_speed := 7 ;
47419: LD_ADDR_OWVAR 65
47423: PUSH
47424: LD_INT 7
47426: ST_TO_ADDR
// end ;
47427: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
47428: LD_EXP 36
47432: PUSH
47433: LD_EXP 43
47437: AND
47438: IFFALSE 47640
47440: GO 47442
47442: DISABLE
47443: LD_INT 0
47445: PPUSH
47446: PPUSH
47447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
47448: LD_ADDR_VAR 0 3
47452: PUSH
47453: LD_INT 81
47455: PUSH
47456: LD_OWVAR 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 21
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PPUSH
47479: CALL_OW 69
47483: ST_TO_ADDR
// if not tmp then
47484: LD_VAR 0 3
47488: NOT
47489: IFFALSE 47493
// exit ;
47491: GO 47640
// if tmp > 5 then
47493: LD_VAR 0 3
47497: PUSH
47498: LD_INT 5
47500: GREATER
47501: IFFALSE 47513
// k := 5 else
47503: LD_ADDR_VAR 0 2
47507: PUSH
47508: LD_INT 5
47510: ST_TO_ADDR
47511: GO 47523
// k := tmp ;
47513: LD_ADDR_VAR 0 2
47517: PUSH
47518: LD_VAR 0 3
47522: ST_TO_ADDR
// for i := 1 to k do
47523: LD_ADDR_VAR 0 1
47527: PUSH
47528: DOUBLE
47529: LD_INT 1
47531: DEC
47532: ST_TO_ADDR
47533: LD_VAR 0 2
47537: PUSH
47538: FOR_TO
47539: IFFALSE 47638
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
47541: LD_VAR 0 3
47545: PUSH
47546: LD_VAR 0 1
47550: ARRAY
47551: PPUSH
47552: LD_VAR 0 1
47556: PUSH
47557: LD_INT 4
47559: MOD
47560: PUSH
47561: LD_INT 1
47563: PLUS
47564: PPUSH
47565: CALL_OW 259
47569: PUSH
47570: LD_INT 10
47572: LESS
47573: IFFALSE 47636
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
47575: LD_VAR 0 3
47579: PUSH
47580: LD_VAR 0 1
47584: ARRAY
47585: PPUSH
47586: LD_VAR 0 1
47590: PUSH
47591: LD_INT 4
47593: MOD
47594: PUSH
47595: LD_INT 1
47597: PLUS
47598: PPUSH
47599: LD_VAR 0 3
47603: PUSH
47604: LD_VAR 0 1
47608: ARRAY
47609: PPUSH
47610: LD_VAR 0 1
47614: PUSH
47615: LD_INT 4
47617: MOD
47618: PUSH
47619: LD_INT 1
47621: PLUS
47622: PPUSH
47623: CALL_OW 259
47627: PUSH
47628: LD_INT 1
47630: PLUS
47631: PPUSH
47632: CALL_OW 237
47636: GO 47538
47638: POP
47639: POP
// end ;
47640: PPOPN 3
47642: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
47643: LD_EXP 36
47647: PUSH
47648: LD_EXP 44
47652: AND
47653: IFFALSE 47673
47655: GO 47657
47657: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
47658: LD_INT 4
47660: PPUSH
47661: LD_OWVAR 2
47665: PPUSH
47666: LD_INT 0
47668: PPUSH
47669: CALL_OW 324
47673: END
// every 0 0$1 trigger StreamModeActive and sShovel do
47674: LD_EXP 36
47678: PUSH
47679: LD_EXP 73
47683: AND
47684: IFFALSE 47704
47686: GO 47688
47688: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
47689: LD_INT 19
47691: PPUSH
47692: LD_OWVAR 2
47696: PPUSH
47697: LD_INT 0
47699: PPUSH
47700: CALL_OW 324
47704: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
47705: LD_EXP 36
47709: PUSH
47710: LD_EXP 45
47714: AND
47715: IFFALSE 47817
47717: GO 47719
47719: DISABLE
47720: LD_INT 0
47722: PPUSH
47723: PPUSH
// begin enable ;
47724: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
47725: LD_ADDR_VAR 0 2
47729: PUSH
47730: LD_INT 22
47732: PUSH
47733: LD_OWVAR 2
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 34
47747: PUSH
47748: LD_INT 11
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 34
47757: PUSH
47758: LD_INT 30
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PPUSH
47774: CALL_OW 69
47778: ST_TO_ADDR
// if not tmp then
47779: LD_VAR 0 2
47783: NOT
47784: IFFALSE 47788
// exit ;
47786: GO 47817
// for i in tmp do
47788: LD_ADDR_VAR 0 1
47792: PUSH
47793: LD_VAR 0 2
47797: PUSH
47798: FOR_IN
47799: IFFALSE 47815
// begin SetLives ( i , 0 ) ;
47801: LD_VAR 0 1
47805: PPUSH
47806: LD_INT 0
47808: PPUSH
47809: CALL_OW 234
// end ;
47813: GO 47798
47815: POP
47816: POP
// end ;
47817: PPOPN 2
47819: END
// every 0 0$1 trigger StreamModeActive and sBunker do
47820: LD_EXP 36
47824: PUSH
47825: LD_EXP 46
47829: AND
47830: IFFALSE 47850
47832: GO 47834
47834: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
47835: LD_INT 32
47837: PPUSH
47838: LD_OWVAR 2
47842: PPUSH
47843: LD_INT 0
47845: PPUSH
47846: CALL_OW 324
47850: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
47851: LD_EXP 36
47855: PUSH
47856: LD_EXP 47
47860: AND
47861: IFFALSE 48042
47863: GO 47865
47865: DISABLE
47866: LD_INT 0
47868: PPUSH
47869: PPUSH
47870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
47871: LD_ADDR_VAR 0 2
47875: PUSH
47876: LD_INT 22
47878: PUSH
47879: LD_OWVAR 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 33
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PPUSH
47902: CALL_OW 69
47906: ST_TO_ADDR
// if not tmp then
47907: LD_VAR 0 2
47911: NOT
47912: IFFALSE 47916
// exit ;
47914: GO 48042
// side := 0 ;
47916: LD_ADDR_VAR 0 3
47920: PUSH
47921: LD_INT 0
47923: ST_TO_ADDR
// for i := 1 to 8 do
47924: LD_ADDR_VAR 0 1
47928: PUSH
47929: DOUBLE
47930: LD_INT 1
47932: DEC
47933: ST_TO_ADDR
47934: LD_INT 8
47936: PUSH
47937: FOR_TO
47938: IFFALSE 47986
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
47940: LD_OWVAR 2
47944: PUSH
47945: LD_VAR 0 1
47949: NONEQUAL
47950: PUSH
47951: LD_OWVAR 2
47955: PPUSH
47956: LD_VAR 0 1
47960: PPUSH
47961: CALL_OW 81
47965: PUSH
47966: LD_INT 2
47968: EQUAL
47969: AND
47970: IFFALSE 47984
// begin side := i ;
47972: LD_ADDR_VAR 0 3
47976: PUSH
47977: LD_VAR 0 1
47981: ST_TO_ADDR
// break ;
47982: GO 47986
// end ;
47984: GO 47937
47986: POP
47987: POP
// if not side then
47988: LD_VAR 0 3
47992: NOT
47993: IFFALSE 47997
// exit ;
47995: GO 48042
// for i := 1 to tmp do
47997: LD_ADDR_VAR 0 1
48001: PUSH
48002: DOUBLE
48003: LD_INT 1
48005: DEC
48006: ST_TO_ADDR
48007: LD_VAR 0 2
48011: PUSH
48012: FOR_TO
48013: IFFALSE 48040
// if Prob ( 60 ) then
48015: LD_INT 60
48017: PPUSH
48018: CALL_OW 13
48022: IFFALSE 48038
// SetSide ( i , side ) ;
48024: LD_VAR 0 1
48028: PPUSH
48029: LD_VAR 0 3
48033: PPUSH
48034: CALL_OW 235
48038: GO 48012
48040: POP
48041: POP
// end ;
48042: PPOPN 3
48044: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
48045: LD_EXP 36
48049: PUSH
48050: LD_EXP 49
48054: AND
48055: IFFALSE 48174
48057: GO 48059
48059: DISABLE
48060: LD_INT 0
48062: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
48063: LD_ADDR_VAR 0 1
48067: PUSH
48068: LD_INT 22
48070: PUSH
48071: LD_OWVAR 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 21
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 3
48092: PUSH
48093: LD_INT 23
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: LIST
48111: PPUSH
48112: CALL_OW 69
48116: PUSH
48117: FOR_IN
48118: IFFALSE 48172
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
48120: LD_VAR 0 1
48124: PPUSH
48125: CALL_OW 257
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 3
48138: PUSH
48139: LD_INT 4
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: IN
48148: IFFALSE 48170
// SetClass ( un , rand ( 1 , 4 ) ) ;
48150: LD_VAR 0 1
48154: PPUSH
48155: LD_INT 1
48157: PPUSH
48158: LD_INT 4
48160: PPUSH
48161: CALL_OW 12
48165: PPUSH
48166: CALL_OW 336
48170: GO 48117
48172: POP
48173: POP
// end ;
48174: PPOPN 1
48176: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
48177: LD_EXP 36
48181: PUSH
48182: LD_EXP 48
48186: AND
48187: IFFALSE 48266
48189: GO 48191
48191: DISABLE
48192: LD_INT 0
48194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48195: LD_ADDR_VAR 0 1
48199: PUSH
48200: LD_INT 22
48202: PUSH
48203: LD_OWVAR 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 21
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PPUSH
48226: CALL_OW 69
48230: ST_TO_ADDR
// if not tmp then
48231: LD_VAR 0 1
48235: NOT
48236: IFFALSE 48240
// exit ;
48238: GO 48266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
48240: LD_VAR 0 1
48244: PUSH
48245: LD_INT 1
48247: PPUSH
48248: LD_VAR 0 1
48252: PPUSH
48253: CALL_OW 12
48257: ARRAY
48258: PPUSH
48259: LD_INT 100
48261: PPUSH
48262: CALL_OW 234
// end ;
48266: PPOPN 1
48268: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
48269: LD_EXP 36
48273: PUSH
48274: LD_EXP 50
48278: AND
48279: IFFALSE 48377
48281: GO 48283
48283: DISABLE
48284: LD_INT 0
48286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
48287: LD_ADDR_VAR 0 1
48291: PUSH
48292: LD_INT 22
48294: PUSH
48295: LD_OWVAR 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 21
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PPUSH
48318: CALL_OW 69
48322: ST_TO_ADDR
// if not tmp then
48323: LD_VAR 0 1
48327: NOT
48328: IFFALSE 48332
// exit ;
48330: GO 48377
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
48332: LD_VAR 0 1
48336: PUSH
48337: LD_INT 1
48339: PPUSH
48340: LD_VAR 0 1
48344: PPUSH
48345: CALL_OW 12
48349: ARRAY
48350: PPUSH
48351: LD_INT 1
48353: PPUSH
48354: LD_INT 4
48356: PPUSH
48357: CALL_OW 12
48361: PPUSH
48362: LD_INT 3000
48364: PPUSH
48365: LD_INT 9000
48367: PPUSH
48368: CALL_OW 12
48372: PPUSH
48373: CALL_OW 492
// end ;
48377: PPOPN 1
48379: END
// every 0 0$1 trigger StreamModeActive and sDepot do
48380: LD_EXP 36
48384: PUSH
48385: LD_EXP 51
48389: AND
48390: IFFALSE 48410
48392: GO 48394
48394: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
48395: LD_INT 1
48397: PPUSH
48398: LD_OWVAR 2
48402: PPUSH
48403: LD_INT 0
48405: PPUSH
48406: CALL_OW 324
48410: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
48411: LD_EXP 36
48415: PUSH
48416: LD_EXP 52
48420: AND
48421: IFFALSE 48504
48423: GO 48425
48425: DISABLE
48426: LD_INT 0
48428: PPUSH
48429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
48430: LD_ADDR_VAR 0 2
48434: PUSH
48435: LD_INT 22
48437: PUSH
48438: LD_OWVAR 2
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 21
48449: PUSH
48450: LD_INT 3
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PPUSH
48461: CALL_OW 69
48465: ST_TO_ADDR
// if not tmp then
48466: LD_VAR 0 2
48470: NOT
48471: IFFALSE 48475
// exit ;
48473: GO 48504
// for i in tmp do
48475: LD_ADDR_VAR 0 1
48479: PUSH
48480: LD_VAR 0 2
48484: PUSH
48485: FOR_IN
48486: IFFALSE 48502
// SetBLevel ( i , 10 ) ;
48488: LD_VAR 0 1
48492: PPUSH
48493: LD_INT 10
48495: PPUSH
48496: CALL_OW 241
48500: GO 48485
48502: POP
48503: POP
// end ;
48504: PPOPN 2
48506: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
48507: LD_EXP 36
48511: PUSH
48512: LD_EXP 53
48516: AND
48517: IFFALSE 48628
48519: GO 48521
48521: DISABLE
48522: LD_INT 0
48524: PPUSH
48525: PPUSH
48526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
48527: LD_ADDR_VAR 0 3
48531: PUSH
48532: LD_INT 22
48534: PUSH
48535: LD_OWVAR 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 25
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PPUSH
48558: CALL_OW 69
48562: ST_TO_ADDR
// if not tmp then
48563: LD_VAR 0 3
48567: NOT
48568: IFFALSE 48572
// exit ;
48570: GO 48628
// un := tmp [ rand ( 1 , tmp ) ] ;
48572: LD_ADDR_VAR 0 2
48576: PUSH
48577: LD_VAR 0 3
48581: PUSH
48582: LD_INT 1
48584: PPUSH
48585: LD_VAR 0 3
48589: PPUSH
48590: CALL_OW 12
48594: ARRAY
48595: ST_TO_ADDR
// if Crawls ( un ) then
48596: LD_VAR 0 2
48600: PPUSH
48601: CALL_OW 318
48605: IFFALSE 48616
// ComWalk ( un ) ;
48607: LD_VAR 0 2
48611: PPUSH
48612: CALL_OW 138
// SetClass ( un , class_sniper ) ;
48616: LD_VAR 0 2
48620: PPUSH
48621: LD_INT 5
48623: PPUSH
48624: CALL_OW 336
// end ;
48628: PPOPN 3
48630: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
48631: LD_EXP 36
48635: PUSH
48636: LD_EXP 54
48640: AND
48641: PUSH
48642: LD_OWVAR 67
48646: PUSH
48647: LD_INT 4
48649: LESS
48650: AND
48651: IFFALSE 48670
48653: GO 48655
48655: DISABLE
// begin Difficulty := Difficulty + 1 ;
48656: LD_ADDR_OWVAR 67
48660: PUSH
48661: LD_OWVAR 67
48665: PUSH
48666: LD_INT 1
48668: PLUS
48669: ST_TO_ADDR
// end ;
48670: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
48671: LD_EXP 36
48675: PUSH
48676: LD_EXP 55
48680: AND
48681: IFFALSE 48784
48683: GO 48685
48685: DISABLE
48686: LD_INT 0
48688: PPUSH
// begin for i := 1 to 5 do
48689: LD_ADDR_VAR 0 1
48693: PUSH
48694: DOUBLE
48695: LD_INT 1
48697: DEC
48698: ST_TO_ADDR
48699: LD_INT 5
48701: PUSH
48702: FOR_TO
48703: IFFALSE 48782
// begin uc_nation := nation_nature ;
48705: LD_ADDR_OWVAR 21
48709: PUSH
48710: LD_INT 0
48712: ST_TO_ADDR
// uc_side := 0 ;
48713: LD_ADDR_OWVAR 20
48717: PUSH
48718: LD_INT 0
48720: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
48721: LD_ADDR_OWVAR 29
48725: PUSH
48726: LD_INT 12
48728: PUSH
48729: LD_INT 12
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: ST_TO_ADDR
// hc_agressivity := 20 ;
48736: LD_ADDR_OWVAR 35
48740: PUSH
48741: LD_INT 20
48743: ST_TO_ADDR
// hc_class := class_tiger ;
48744: LD_ADDR_OWVAR 28
48748: PUSH
48749: LD_INT 14
48751: ST_TO_ADDR
// hc_gallery :=  ;
48752: LD_ADDR_OWVAR 33
48756: PUSH
48757: LD_STRING 
48759: ST_TO_ADDR
// hc_name :=  ;
48760: LD_ADDR_OWVAR 26
48764: PUSH
48765: LD_STRING 
48767: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
48768: CALL_OW 44
48772: PPUSH
48773: LD_INT 0
48775: PPUSH
48776: CALL_OW 51
// end ;
48780: GO 48702
48782: POP
48783: POP
// end ;
48784: PPOPN 1
48786: END
// every 0 0$1 trigger StreamModeActive and sBomb do
48787: LD_EXP 36
48791: PUSH
48792: LD_EXP 56
48796: AND
48797: IFFALSE 48806
48799: GO 48801
48801: DISABLE
// StreamSibBomb ;
48802: CALL 48807 0 0
48806: END
// export function StreamSibBomb ; var i , x , y ; begin
48807: LD_INT 0
48809: PPUSH
48810: PPUSH
48811: PPUSH
48812: PPUSH
// result := false ;
48813: LD_ADDR_VAR 0 1
48817: PUSH
48818: LD_INT 0
48820: ST_TO_ADDR
// for i := 1 to 16 do
48821: LD_ADDR_VAR 0 2
48825: PUSH
48826: DOUBLE
48827: LD_INT 1
48829: DEC
48830: ST_TO_ADDR
48831: LD_INT 16
48833: PUSH
48834: FOR_TO
48835: IFFALSE 49034
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48837: LD_ADDR_VAR 0 3
48841: PUSH
48842: LD_INT 10
48844: PUSH
48845: LD_INT 20
48847: PUSH
48848: LD_INT 30
48850: PUSH
48851: LD_INT 40
48853: PUSH
48854: LD_INT 50
48856: PUSH
48857: LD_INT 60
48859: PUSH
48860: LD_INT 70
48862: PUSH
48863: LD_INT 80
48865: PUSH
48866: LD_INT 90
48868: PUSH
48869: LD_INT 100
48871: PUSH
48872: LD_INT 110
48874: PUSH
48875: LD_INT 120
48877: PUSH
48878: LD_INT 130
48880: PUSH
48881: LD_INT 140
48883: PUSH
48884: LD_INT 150
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PPUSH
48907: LD_INT 15
48909: PPUSH
48910: CALL_OW 12
48914: ARRAY
48915: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
48916: LD_ADDR_VAR 0 4
48920: PUSH
48921: LD_INT 10
48923: PUSH
48924: LD_INT 20
48926: PUSH
48927: LD_INT 30
48929: PUSH
48930: LD_INT 40
48932: PUSH
48933: LD_INT 50
48935: PUSH
48936: LD_INT 60
48938: PUSH
48939: LD_INT 70
48941: PUSH
48942: LD_INT 80
48944: PUSH
48945: LD_INT 90
48947: PUSH
48948: LD_INT 100
48950: PUSH
48951: LD_INT 110
48953: PUSH
48954: LD_INT 120
48956: PUSH
48957: LD_INT 130
48959: PUSH
48960: LD_INT 140
48962: PUSH
48963: LD_INT 150
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PPUSH
48986: LD_INT 15
48988: PPUSH
48989: CALL_OW 12
48993: ARRAY
48994: ST_TO_ADDR
// if ValidHex ( x , y ) then
48995: LD_VAR 0 3
48999: PPUSH
49000: LD_VAR 0 4
49004: PPUSH
49005: CALL_OW 488
49009: IFFALSE 49032
// begin result := [ x , y ] ;
49011: LD_ADDR_VAR 0 1
49015: PUSH
49016: LD_VAR 0 3
49020: PUSH
49021: LD_VAR 0 4
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: ST_TO_ADDR
// break ;
49030: GO 49034
// end ; end ;
49032: GO 48834
49034: POP
49035: POP
// if result then
49036: LD_VAR 0 1
49040: IFFALSE 49100
// begin ToLua ( playSibBomb() ) ;
49042: LD_STRING playSibBomb()
49044: PPUSH
49045: CALL_OW 559
// wait ( 0 0$14 ) ;
49049: LD_INT 490
49051: PPUSH
49052: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
49056: LD_VAR 0 1
49060: PUSH
49061: LD_INT 1
49063: ARRAY
49064: PPUSH
49065: LD_VAR 0 1
49069: PUSH
49070: LD_INT 2
49072: ARRAY
49073: PPUSH
49074: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
49078: LD_VAR 0 1
49082: PUSH
49083: LD_INT 1
49085: ARRAY
49086: PPUSH
49087: LD_VAR 0 1
49091: PUSH
49092: LD_INT 2
49094: ARRAY
49095: PPUSH
49096: CALL_OW 429
// end ; end ;
49100: LD_VAR 0 1
49104: RET
// every 0 0$1 trigger StreamModeActive and sReset do
49105: LD_EXP 36
49109: PUSH
49110: LD_EXP 58
49114: AND
49115: IFFALSE 49127
49117: GO 49119
49119: DISABLE
// YouLost (  ) ;
49120: LD_STRING 
49122: PPUSH
49123: CALL_OW 104
49127: END
// every 0 0$1 trigger StreamModeActive and sFog do
49128: LD_EXP 36
49132: PUSH
49133: LD_EXP 57
49137: AND
49138: IFFALSE 49152
49140: GO 49142
49142: DISABLE
// FogOff ( your_side ) ;
49143: LD_OWVAR 2
49147: PPUSH
49148: CALL_OW 344
49152: END
// every 0 0$1 trigger StreamModeActive and sSun do
49153: LD_EXP 36
49157: PUSH
49158: LD_EXP 59
49162: AND
49163: IFFALSE 49191
49165: GO 49167
49167: DISABLE
// begin solar_recharge_percent := 0 ;
49168: LD_ADDR_OWVAR 79
49172: PUSH
49173: LD_INT 0
49175: ST_TO_ADDR
// wait ( 5 5$00 ) ;
49176: LD_INT 10500
49178: PPUSH
49179: CALL_OW 67
// solar_recharge_percent := 100 ;
49183: LD_ADDR_OWVAR 79
49187: PUSH
49188: LD_INT 100
49190: ST_TO_ADDR
// end ;
49191: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
49192: LD_EXP 36
49196: PUSH
49197: LD_EXP 60
49201: AND
49202: IFFALSE 49441
49204: GO 49206
49206: DISABLE
49207: LD_INT 0
49209: PPUSH
49210: PPUSH
49211: PPUSH
// begin tmp := [ ] ;
49212: LD_ADDR_VAR 0 3
49216: PUSH
49217: EMPTY
49218: ST_TO_ADDR
// for i := 1 to 6 do
49219: LD_ADDR_VAR 0 1
49223: PUSH
49224: DOUBLE
49225: LD_INT 1
49227: DEC
49228: ST_TO_ADDR
49229: LD_INT 6
49231: PUSH
49232: FOR_TO
49233: IFFALSE 49338
// begin uc_nation := nation_nature ;
49235: LD_ADDR_OWVAR 21
49239: PUSH
49240: LD_INT 0
49242: ST_TO_ADDR
// uc_side := 0 ;
49243: LD_ADDR_OWVAR 20
49247: PUSH
49248: LD_INT 0
49250: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49251: LD_ADDR_OWVAR 29
49255: PUSH
49256: LD_INT 12
49258: PUSH
49259: LD_INT 12
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: ST_TO_ADDR
// hc_agressivity := 20 ;
49266: LD_ADDR_OWVAR 35
49270: PUSH
49271: LD_INT 20
49273: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
49274: LD_ADDR_OWVAR 28
49278: PUSH
49279: LD_INT 17
49281: ST_TO_ADDR
// hc_gallery :=  ;
49282: LD_ADDR_OWVAR 33
49286: PUSH
49287: LD_STRING 
49289: ST_TO_ADDR
// hc_name :=  ;
49290: LD_ADDR_OWVAR 26
49294: PUSH
49295: LD_STRING 
49297: ST_TO_ADDR
// un := CreateHuman ;
49298: LD_ADDR_VAR 0 2
49302: PUSH
49303: CALL_OW 44
49307: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
49308: LD_VAR 0 2
49312: PPUSH
49313: LD_INT 1
49315: PPUSH
49316: CALL_OW 51
// tmp := tmp ^ un ;
49320: LD_ADDR_VAR 0 3
49324: PUSH
49325: LD_VAR 0 3
49329: PUSH
49330: LD_VAR 0 2
49334: ADD
49335: ST_TO_ADDR
// end ;
49336: GO 49232
49338: POP
49339: POP
// repeat wait ( 0 0$1 ) ;
49340: LD_INT 35
49342: PPUSH
49343: CALL_OW 67
// for un in tmp do
49347: LD_ADDR_VAR 0 2
49351: PUSH
49352: LD_VAR 0 3
49356: PUSH
49357: FOR_IN
49358: IFFALSE 49432
// begin if IsDead ( un ) then
49360: LD_VAR 0 2
49364: PPUSH
49365: CALL_OW 301
49369: IFFALSE 49389
// begin tmp := tmp diff un ;
49371: LD_ADDR_VAR 0 3
49375: PUSH
49376: LD_VAR 0 3
49380: PUSH
49381: LD_VAR 0 2
49385: DIFF
49386: ST_TO_ADDR
// continue ;
49387: GO 49357
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
49389: LD_VAR 0 2
49393: PPUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 22
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PPUSH
49411: CALL_OW 69
49415: PPUSH
49416: LD_VAR 0 2
49420: PPUSH
49421: CALL_OW 74
49425: PPUSH
49426: CALL_OW 115
// end ;
49430: GO 49357
49432: POP
49433: POP
// until not tmp ;
49434: LD_VAR 0 3
49438: NOT
49439: IFFALSE 49340
// end ;
49441: PPOPN 3
49443: END
// every 0 0$1 trigger StreamModeActive and sTroll do
49444: LD_EXP 36
49448: PUSH
49449: LD_EXP 61
49453: AND
49454: IFFALSE 49508
49456: GO 49458
49458: DISABLE
// begin ToLua ( displayTroll(); ) ;
49459: LD_STRING displayTroll();
49461: PPUSH
49462: CALL_OW 559
// wait ( 3 3$00 ) ;
49466: LD_INT 6300
49468: PPUSH
49469: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49473: LD_STRING hideTroll();
49475: PPUSH
49476: CALL_OW 559
// wait ( 1 1$00 ) ;
49480: LD_INT 2100
49482: PPUSH
49483: CALL_OW 67
// ToLua ( displayTroll(); ) ;
49487: LD_STRING displayTroll();
49489: PPUSH
49490: CALL_OW 559
// wait ( 1 1$00 ) ;
49494: LD_INT 2100
49496: PPUSH
49497: CALL_OW 67
// ToLua ( hideTroll(); ) ;
49501: LD_STRING hideTroll();
49503: PPUSH
49504: CALL_OW 559
// end ;
49508: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
49509: LD_EXP 36
49513: PUSH
49514: LD_EXP 62
49518: AND
49519: IFFALSE 49582
49521: GO 49523
49523: DISABLE
49524: LD_INT 0
49526: PPUSH
// begin p := 0 ;
49527: LD_ADDR_VAR 0 1
49531: PUSH
49532: LD_INT 0
49534: ST_TO_ADDR
// repeat game_speed := 1 ;
49535: LD_ADDR_OWVAR 65
49539: PUSH
49540: LD_INT 1
49542: ST_TO_ADDR
// wait ( 0 0$1 ) ;
49543: LD_INT 35
49545: PPUSH
49546: CALL_OW 67
// p := p + 1 ;
49550: LD_ADDR_VAR 0 1
49554: PUSH
49555: LD_VAR 0 1
49559: PUSH
49560: LD_INT 1
49562: PLUS
49563: ST_TO_ADDR
// until p >= 60 ;
49564: LD_VAR 0 1
49568: PUSH
49569: LD_INT 60
49571: GREATEREQUAL
49572: IFFALSE 49535
// game_speed := 4 ;
49574: LD_ADDR_OWVAR 65
49578: PUSH
49579: LD_INT 4
49581: ST_TO_ADDR
// end ;
49582: PPOPN 1
49584: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
49585: LD_EXP 36
49589: PUSH
49590: LD_EXP 63
49594: AND
49595: IFFALSE 49741
49597: GO 49599
49599: DISABLE
49600: LD_INT 0
49602: PPUSH
49603: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
49604: LD_ADDR_VAR 0 1
49608: PUSH
49609: LD_INT 22
49611: PUSH
49612: LD_OWVAR 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: LD_INT 30
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 30
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PPUSH
49653: CALL_OW 69
49657: ST_TO_ADDR
// if not depot then
49658: LD_VAR 0 1
49662: NOT
49663: IFFALSE 49667
// exit ;
49665: GO 49741
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
49667: LD_ADDR_VAR 0 2
49671: PUSH
49672: LD_VAR 0 1
49676: PUSH
49677: LD_INT 1
49679: PPUSH
49680: LD_VAR 0 1
49684: PPUSH
49685: CALL_OW 12
49689: ARRAY
49690: PPUSH
49691: CALL_OW 274
49695: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
49696: LD_VAR 0 2
49700: PPUSH
49701: LD_INT 1
49703: PPUSH
49704: LD_INT 0
49706: PPUSH
49707: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
49711: LD_VAR 0 2
49715: PPUSH
49716: LD_INT 2
49718: PPUSH
49719: LD_INT 0
49721: PPUSH
49722: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
49726: LD_VAR 0 2
49730: PPUSH
49731: LD_INT 3
49733: PPUSH
49734: LD_INT 0
49736: PPUSH
49737: CALL_OW 277
// end ;
49741: PPOPN 2
49743: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
49744: LD_EXP 36
49748: PUSH
49749: LD_EXP 64
49753: AND
49754: IFFALSE 49851
49756: GO 49758
49758: DISABLE
49759: LD_INT 0
49761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
49762: LD_ADDR_VAR 0 1
49766: PUSH
49767: LD_INT 22
49769: PUSH
49770: LD_OWVAR 2
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 21
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: LD_INT 23
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: LIST
49810: PPUSH
49811: CALL_OW 69
49815: ST_TO_ADDR
// if not tmp then
49816: LD_VAR 0 1
49820: NOT
49821: IFFALSE 49825
// exit ;
49823: GO 49851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
49825: LD_VAR 0 1
49829: PUSH
49830: LD_INT 1
49832: PPUSH
49833: LD_VAR 0 1
49837: PPUSH
49838: CALL_OW 12
49842: ARRAY
49843: PPUSH
49844: LD_INT 200
49846: PPUSH
49847: CALL_OW 234
// end ;
49851: PPOPN 1
49853: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
49854: LD_EXP 36
49858: PUSH
49859: LD_EXP 65
49863: AND
49864: IFFALSE 49943
49866: GO 49868
49868: DISABLE
49869: LD_INT 0
49871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
49872: LD_ADDR_VAR 0 1
49876: PUSH
49877: LD_INT 22
49879: PUSH
49880: LD_OWVAR 2
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 21
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PPUSH
49903: CALL_OW 69
49907: ST_TO_ADDR
// if not tmp then
49908: LD_VAR 0 1
49912: NOT
49913: IFFALSE 49917
// exit ;
49915: GO 49943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
49917: LD_VAR 0 1
49921: PUSH
49922: LD_INT 1
49924: PPUSH
49925: LD_VAR 0 1
49929: PPUSH
49930: CALL_OW 12
49934: ARRAY
49935: PPUSH
49936: LD_INT 60
49938: PPUSH
49939: CALL_OW 234
// end ;
49943: PPOPN 1
49945: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
49946: LD_EXP 36
49950: PUSH
49951: LD_EXP 66
49955: AND
49956: IFFALSE 50055
49958: GO 49960
49960: DISABLE
49961: LD_INT 0
49963: PPUSH
49964: PPUSH
// begin enable ;
49965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
49966: LD_ADDR_VAR 0 1
49970: PUSH
49971: LD_INT 22
49973: PUSH
49974: LD_OWVAR 2
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 61
49985: PUSH
49986: EMPTY
49987: LIST
49988: PUSH
49989: LD_INT 33
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: LIST
50003: PPUSH
50004: CALL_OW 69
50008: ST_TO_ADDR
// if not tmp then
50009: LD_VAR 0 1
50013: NOT
50014: IFFALSE 50018
// exit ;
50016: GO 50055
// for i in tmp do
50018: LD_ADDR_VAR 0 2
50022: PUSH
50023: LD_VAR 0 1
50027: PUSH
50028: FOR_IN
50029: IFFALSE 50053
// if IsControledBy ( i ) then
50031: LD_VAR 0 2
50035: PPUSH
50036: CALL_OW 312
50040: IFFALSE 50051
// ComUnlink ( i ) ;
50042: LD_VAR 0 2
50046: PPUSH
50047: CALL_OW 136
50051: GO 50028
50053: POP
50054: POP
// end ;
50055: PPOPN 2
50057: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
50058: LD_EXP 36
50062: PUSH
50063: LD_EXP 67
50067: AND
50068: IFFALSE 50208
50070: GO 50072
50072: DISABLE
50073: LD_INT 0
50075: PPUSH
50076: PPUSH
// begin ToLua ( displayPowell(); ) ;
50077: LD_STRING displayPowell();
50079: PPUSH
50080: CALL_OW 559
// uc_side := 0 ;
50084: LD_ADDR_OWVAR 20
50088: PUSH
50089: LD_INT 0
50091: ST_TO_ADDR
// uc_nation := 2 ;
50092: LD_ADDR_OWVAR 21
50096: PUSH
50097: LD_INT 2
50099: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
50100: LD_ADDR_OWVAR 37
50104: PUSH
50105: LD_INT 14
50107: ST_TO_ADDR
// vc_engine := engine_siberite ;
50108: LD_ADDR_OWVAR 39
50112: PUSH
50113: LD_INT 3
50115: ST_TO_ADDR
// vc_control := control_apeman ;
50116: LD_ADDR_OWVAR 38
50120: PUSH
50121: LD_INT 5
50123: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
50124: LD_ADDR_OWVAR 40
50128: PUSH
50129: LD_INT 29
50131: ST_TO_ADDR
// un := CreateVehicle ;
50132: LD_ADDR_VAR 0 2
50136: PUSH
50137: CALL_OW 45
50141: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50142: LD_VAR 0 2
50146: PPUSH
50147: LD_INT 1
50149: PPUSH
50150: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
50154: LD_INT 35
50156: PPUSH
50157: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
50161: LD_VAR 0 2
50165: PPUSH
50166: LD_INT 22
50168: PUSH
50169: LD_OWVAR 2
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PPUSH
50178: CALL_OW 69
50182: PPUSH
50183: LD_VAR 0 2
50187: PPUSH
50188: CALL_OW 74
50192: PPUSH
50193: CALL_OW 115
// until IsDead ( un ) ;
50197: LD_VAR 0 2
50201: PPUSH
50202: CALL_OW 301
50206: IFFALSE 50154
// end ;
50208: PPOPN 2
50210: END
// every 0 0$1 trigger StreamModeActive and sStu do
50211: LD_EXP 36
50215: PUSH
50216: LD_EXP 75
50220: AND
50221: IFFALSE 50237
50223: GO 50225
50225: DISABLE
// begin ToLua ( displayStucuk(); ) ;
50226: LD_STRING displayStucuk();
50228: PPUSH
50229: CALL_OW 559
// ResetFog ;
50233: CALL_OW 335
// end ;
50237: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
50238: LD_EXP 36
50242: PUSH
50243: LD_EXP 68
50247: AND
50248: IFFALSE 50389
50250: GO 50252
50252: DISABLE
50253: LD_INT 0
50255: PPUSH
50256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50257: LD_ADDR_VAR 0 2
50261: PUSH
50262: LD_INT 22
50264: PUSH
50265: LD_OWVAR 2
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 21
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PPUSH
50288: CALL_OW 69
50292: ST_TO_ADDR
// if not tmp then
50293: LD_VAR 0 2
50297: NOT
50298: IFFALSE 50302
// exit ;
50300: GO 50389
// un := tmp [ rand ( 1 , tmp ) ] ;
50302: LD_ADDR_VAR 0 1
50306: PUSH
50307: LD_VAR 0 2
50311: PUSH
50312: LD_INT 1
50314: PPUSH
50315: LD_VAR 0 2
50319: PPUSH
50320: CALL_OW 12
50324: ARRAY
50325: ST_TO_ADDR
// SetSide ( un , 0 ) ;
50326: LD_VAR 0 1
50330: PPUSH
50331: LD_INT 0
50333: PPUSH
50334: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
50338: LD_VAR 0 1
50342: PPUSH
50343: LD_OWVAR 3
50347: PUSH
50348: LD_VAR 0 1
50352: DIFF
50353: PPUSH
50354: LD_VAR 0 1
50358: PPUSH
50359: CALL_OW 74
50363: PPUSH
50364: CALL_OW 115
// wait ( 0 0$20 ) ;
50368: LD_INT 700
50370: PPUSH
50371: CALL_OW 67
// SetSide ( un , your_side ) ;
50375: LD_VAR 0 1
50379: PPUSH
50380: LD_OWVAR 2
50384: PPUSH
50385: CALL_OW 235
// end ;
50389: PPOPN 2
50391: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
50392: LD_EXP 36
50396: PUSH
50397: LD_EXP 69
50401: AND
50402: IFFALSE 50508
50404: GO 50406
50406: DISABLE
50407: LD_INT 0
50409: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50410: LD_ADDR_VAR 0 1
50414: PUSH
50415: LD_INT 22
50417: PUSH
50418: LD_OWVAR 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: PUSH
50430: LD_INT 30
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 30
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PPUSH
50459: CALL_OW 69
50463: ST_TO_ADDR
// if not depot then
50464: LD_VAR 0 1
50468: NOT
50469: IFFALSE 50473
// exit ;
50471: GO 50508
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
50473: LD_VAR 0 1
50477: PUSH
50478: LD_INT 1
50480: ARRAY
50481: PPUSH
50482: CALL_OW 250
50486: PPUSH
50487: LD_VAR 0 1
50491: PUSH
50492: LD_INT 1
50494: ARRAY
50495: PPUSH
50496: CALL_OW 251
50500: PPUSH
50501: LD_INT 70
50503: PPUSH
50504: CALL_OW 495
// end ;
50508: PPOPN 1
50510: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
50511: LD_EXP 36
50515: PUSH
50516: LD_EXP 70
50520: AND
50521: IFFALSE 50732
50523: GO 50525
50525: DISABLE
50526: LD_INT 0
50528: PPUSH
50529: PPUSH
50530: PPUSH
50531: PPUSH
50532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
50533: LD_ADDR_VAR 0 5
50537: PUSH
50538: LD_INT 22
50540: PUSH
50541: LD_OWVAR 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 21
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PPUSH
50564: CALL_OW 69
50568: ST_TO_ADDR
// if not tmp then
50569: LD_VAR 0 5
50573: NOT
50574: IFFALSE 50578
// exit ;
50576: GO 50732
// for i in tmp do
50578: LD_ADDR_VAR 0 1
50582: PUSH
50583: LD_VAR 0 5
50587: PUSH
50588: FOR_IN
50589: IFFALSE 50730
// begin d := rand ( 0 , 5 ) ;
50591: LD_ADDR_VAR 0 4
50595: PUSH
50596: LD_INT 0
50598: PPUSH
50599: LD_INT 5
50601: PPUSH
50602: CALL_OW 12
50606: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
50607: LD_ADDR_VAR 0 2
50611: PUSH
50612: LD_VAR 0 1
50616: PPUSH
50617: CALL_OW 250
50621: PPUSH
50622: LD_VAR 0 4
50626: PPUSH
50627: LD_INT 3
50629: PPUSH
50630: LD_INT 12
50632: PPUSH
50633: CALL_OW 12
50637: PPUSH
50638: CALL_OW 272
50642: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
50643: LD_ADDR_VAR 0 3
50647: PUSH
50648: LD_VAR 0 1
50652: PPUSH
50653: CALL_OW 251
50657: PPUSH
50658: LD_VAR 0 4
50662: PPUSH
50663: LD_INT 3
50665: PPUSH
50666: LD_INT 12
50668: PPUSH
50669: CALL_OW 12
50673: PPUSH
50674: CALL_OW 273
50678: ST_TO_ADDR
// if ValidHex ( x , y ) then
50679: LD_VAR 0 2
50683: PPUSH
50684: LD_VAR 0 3
50688: PPUSH
50689: CALL_OW 488
50693: IFFALSE 50728
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
50695: LD_VAR 0 1
50699: PPUSH
50700: LD_VAR 0 2
50704: PPUSH
50705: LD_VAR 0 3
50709: PPUSH
50710: LD_INT 3
50712: PPUSH
50713: LD_INT 6
50715: PPUSH
50716: CALL_OW 12
50720: PPUSH
50721: LD_INT 1
50723: PPUSH
50724: CALL_OW 483
// end ;
50728: GO 50588
50730: POP
50731: POP
// end ;
50732: PPOPN 5
50734: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
50735: LD_EXP 36
50739: PUSH
50740: LD_EXP 71
50744: AND
50745: IFFALSE 50839
50747: GO 50749
50749: DISABLE
50750: LD_INT 0
50752: PPUSH
50753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
50754: LD_ADDR_VAR 0 2
50758: PUSH
50759: LD_INT 22
50761: PUSH
50762: LD_OWVAR 2
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 32
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 21
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: PPUSH
50796: CALL_OW 69
50800: ST_TO_ADDR
// if not tmp then
50801: LD_VAR 0 2
50805: NOT
50806: IFFALSE 50810
// exit ;
50808: GO 50839
// for i in tmp do
50810: LD_ADDR_VAR 0 1
50814: PUSH
50815: LD_VAR 0 2
50819: PUSH
50820: FOR_IN
50821: IFFALSE 50837
// SetFuel ( i , 0 ) ;
50823: LD_VAR 0 1
50827: PPUSH
50828: LD_INT 0
50830: PPUSH
50831: CALL_OW 240
50835: GO 50820
50837: POP
50838: POP
// end ;
50839: PPOPN 2
50841: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
50842: LD_EXP 36
50846: PUSH
50847: LD_EXP 72
50851: AND
50852: IFFALSE 50918
50854: GO 50856
50856: DISABLE
50857: LD_INT 0
50859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
50860: LD_ADDR_VAR 0 1
50864: PUSH
50865: LD_INT 22
50867: PUSH
50868: LD_OWVAR 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 30
50879: PUSH
50880: LD_INT 29
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PPUSH
50891: CALL_OW 69
50895: ST_TO_ADDR
// if not tmp then
50896: LD_VAR 0 1
50900: NOT
50901: IFFALSE 50905
// exit ;
50903: GO 50918
// DestroyUnit ( tmp [ 1 ] ) ;
50905: LD_VAR 0 1
50909: PUSH
50910: LD_INT 1
50912: ARRAY
50913: PPUSH
50914: CALL_OW 65
// end ;
50918: PPOPN 1
50920: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
50921: LD_EXP 36
50925: PUSH
50926: LD_EXP 74
50930: AND
50931: IFFALSE 51060
50933: GO 50935
50935: DISABLE
50936: LD_INT 0
50938: PPUSH
// begin uc_side := 0 ;
50939: LD_ADDR_OWVAR 20
50943: PUSH
50944: LD_INT 0
50946: ST_TO_ADDR
// uc_nation := nation_arabian ;
50947: LD_ADDR_OWVAR 21
50951: PUSH
50952: LD_INT 2
50954: ST_TO_ADDR
// hc_gallery :=  ;
50955: LD_ADDR_OWVAR 33
50959: PUSH
50960: LD_STRING 
50962: ST_TO_ADDR
// hc_name :=  ;
50963: LD_ADDR_OWVAR 26
50967: PUSH
50968: LD_STRING 
50970: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
50971: LD_INT 1
50973: PPUSH
50974: LD_INT 11
50976: PPUSH
50977: LD_INT 10
50979: PPUSH
50980: CALL_OW 380
// un := CreateHuman ;
50984: LD_ADDR_VAR 0 1
50988: PUSH
50989: CALL_OW 44
50993: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
50994: LD_VAR 0 1
50998: PPUSH
50999: LD_INT 1
51001: PPUSH
51002: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
51006: LD_INT 35
51008: PPUSH
51009: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
51013: LD_VAR 0 1
51017: PPUSH
51018: LD_INT 22
51020: PUSH
51021: LD_OWVAR 2
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PPUSH
51030: CALL_OW 69
51034: PPUSH
51035: LD_VAR 0 1
51039: PPUSH
51040: CALL_OW 74
51044: PPUSH
51045: CALL_OW 115
// until IsDead ( un ) ;
51049: LD_VAR 0 1
51053: PPUSH
51054: CALL_OW 301
51058: IFFALSE 51006
// end ;
51060: PPOPN 1
51062: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
51063: LD_EXP 36
51067: PUSH
51068: LD_EXP 76
51072: AND
51073: IFFALSE 51085
51075: GO 51077
51077: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
51078: LD_STRING earthquake(getX(game), 0, 32)
51080: PPUSH
51081: CALL_OW 559
51085: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
51086: LD_EXP 36
51090: PUSH
51091: LD_EXP 77
51095: AND
51096: IFFALSE 51187
51098: GO 51100
51100: DISABLE
51101: LD_INT 0
51103: PPUSH
// begin enable ;
51104: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
51105: LD_ADDR_VAR 0 1
51109: PUSH
51110: LD_INT 22
51112: PUSH
51113: LD_OWVAR 2
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 21
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 33
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: LIST
51146: PPUSH
51147: CALL_OW 69
51151: ST_TO_ADDR
// if not tmp then
51152: LD_VAR 0 1
51156: NOT
51157: IFFALSE 51161
// exit ;
51159: GO 51187
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
51161: LD_VAR 0 1
51165: PUSH
51166: LD_INT 1
51168: PPUSH
51169: LD_VAR 0 1
51173: PPUSH
51174: CALL_OW 12
51178: ARRAY
51179: PPUSH
51180: LD_INT 1
51182: PPUSH
51183: CALL_OW 234
// end ;
51187: PPOPN 1
51189: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
51190: LD_EXP 36
51194: PUSH
51195: LD_EXP 78
51199: AND
51200: IFFALSE 51341
51202: GO 51204
51204: DISABLE
51205: LD_INT 0
51207: PPUSH
51208: PPUSH
51209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51210: LD_ADDR_VAR 0 3
51214: PUSH
51215: LD_INT 22
51217: PUSH
51218: LD_OWVAR 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 25
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PPUSH
51241: CALL_OW 69
51245: ST_TO_ADDR
// if not tmp then
51246: LD_VAR 0 3
51250: NOT
51251: IFFALSE 51255
// exit ;
51253: GO 51341
// un := tmp [ rand ( 1 , tmp ) ] ;
51255: LD_ADDR_VAR 0 2
51259: PUSH
51260: LD_VAR 0 3
51264: PUSH
51265: LD_INT 1
51267: PPUSH
51268: LD_VAR 0 3
51272: PPUSH
51273: CALL_OW 12
51277: ARRAY
51278: ST_TO_ADDR
// if Crawls ( un ) then
51279: LD_VAR 0 2
51283: PPUSH
51284: CALL_OW 318
51288: IFFALSE 51299
// ComWalk ( un ) ;
51290: LD_VAR 0 2
51294: PPUSH
51295: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
51299: LD_VAR 0 2
51303: PPUSH
51304: LD_INT 9
51306: PPUSH
51307: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
51311: LD_INT 28
51313: PPUSH
51314: LD_OWVAR 2
51318: PPUSH
51319: LD_INT 2
51321: PPUSH
51322: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
51326: LD_INT 29
51328: PPUSH
51329: LD_OWVAR 2
51333: PPUSH
51334: LD_INT 2
51336: PPUSH
51337: CALL_OW 322
// end ;
51341: PPOPN 3
51343: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
51344: LD_EXP 36
51348: PUSH
51349: LD_EXP 79
51353: AND
51354: IFFALSE 51465
51356: GO 51358
51358: DISABLE
51359: LD_INT 0
51361: PPUSH
51362: PPUSH
51363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51364: LD_ADDR_VAR 0 3
51368: PUSH
51369: LD_INT 22
51371: PUSH
51372: LD_OWVAR 2
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 25
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PPUSH
51395: CALL_OW 69
51399: ST_TO_ADDR
// if not tmp then
51400: LD_VAR 0 3
51404: NOT
51405: IFFALSE 51409
// exit ;
51407: GO 51465
// un := tmp [ rand ( 1 , tmp ) ] ;
51409: LD_ADDR_VAR 0 2
51413: PUSH
51414: LD_VAR 0 3
51418: PUSH
51419: LD_INT 1
51421: PPUSH
51422: LD_VAR 0 3
51426: PPUSH
51427: CALL_OW 12
51431: ARRAY
51432: ST_TO_ADDR
// if Crawls ( un ) then
51433: LD_VAR 0 2
51437: PPUSH
51438: CALL_OW 318
51442: IFFALSE 51453
// ComWalk ( un ) ;
51444: LD_VAR 0 2
51448: PPUSH
51449: CALL_OW 138
// SetClass ( un , class_mortar ) ;
51453: LD_VAR 0 2
51457: PPUSH
51458: LD_INT 8
51460: PPUSH
51461: CALL_OW 336
// end ;
51465: PPOPN 3
51467: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
51468: LD_EXP 36
51472: PUSH
51473: LD_EXP 80
51477: AND
51478: IFFALSE 51622
51480: GO 51482
51482: DISABLE
51483: LD_INT 0
51485: PPUSH
51486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
51487: LD_ADDR_VAR 0 2
51491: PUSH
51492: LD_INT 22
51494: PUSH
51495: LD_OWVAR 2
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 21
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 2
51516: PUSH
51517: LD_INT 34
51519: PUSH
51520: LD_INT 12
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 34
51529: PUSH
51530: LD_INT 51
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 34
51539: PUSH
51540: LD_INT 32
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: PPUSH
51558: CALL_OW 69
51562: ST_TO_ADDR
// if not tmp then
51563: LD_VAR 0 2
51567: NOT
51568: IFFALSE 51572
// exit ;
51570: GO 51622
// for i in tmp do
51572: LD_ADDR_VAR 0 1
51576: PUSH
51577: LD_VAR 0 2
51581: PUSH
51582: FOR_IN
51583: IFFALSE 51620
// if GetCargo ( i , mat_artifact ) = 0 then
51585: LD_VAR 0 1
51589: PPUSH
51590: LD_INT 4
51592: PPUSH
51593: CALL_OW 289
51597: PUSH
51598: LD_INT 0
51600: EQUAL
51601: IFFALSE 51618
// SetCargo ( i , mat_siberit , 100 ) ;
51603: LD_VAR 0 1
51607: PPUSH
51608: LD_INT 3
51610: PPUSH
51611: LD_INT 100
51613: PPUSH
51614: CALL_OW 290
51618: GO 51582
51620: POP
51621: POP
// end ;
51622: PPOPN 2
51624: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
51625: LD_EXP 36
51629: PUSH
51630: LD_EXP 81
51634: AND
51635: IFFALSE 51818
51637: GO 51639
51639: DISABLE
51640: LD_INT 0
51642: PPUSH
51643: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
51644: LD_ADDR_VAR 0 2
51648: PUSH
51649: LD_INT 22
51651: PUSH
51652: LD_OWVAR 2
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PPUSH
51661: CALL_OW 69
51665: ST_TO_ADDR
// if not tmp then
51666: LD_VAR 0 2
51670: NOT
51671: IFFALSE 51675
// exit ;
51673: GO 51818
// for i := 1 to 2 do
51675: LD_ADDR_VAR 0 1
51679: PUSH
51680: DOUBLE
51681: LD_INT 1
51683: DEC
51684: ST_TO_ADDR
51685: LD_INT 2
51687: PUSH
51688: FOR_TO
51689: IFFALSE 51816
// begin uc_side := your_side ;
51691: LD_ADDR_OWVAR 20
51695: PUSH
51696: LD_OWVAR 2
51700: ST_TO_ADDR
// uc_nation := nation_american ;
51701: LD_ADDR_OWVAR 21
51705: PUSH
51706: LD_INT 1
51708: ST_TO_ADDR
// vc_chassis := us_morphling ;
51709: LD_ADDR_OWVAR 37
51713: PUSH
51714: LD_INT 5
51716: ST_TO_ADDR
// vc_engine := engine_siberite ;
51717: LD_ADDR_OWVAR 39
51721: PUSH
51722: LD_INT 3
51724: ST_TO_ADDR
// vc_control := control_computer ;
51725: LD_ADDR_OWVAR 38
51729: PUSH
51730: LD_INT 3
51732: ST_TO_ADDR
// vc_weapon := us_double_laser ;
51733: LD_ADDR_OWVAR 40
51737: PUSH
51738: LD_INT 10
51740: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
51741: LD_VAR 0 2
51745: PUSH
51746: LD_INT 1
51748: ARRAY
51749: PPUSH
51750: CALL_OW 310
51754: NOT
51755: IFFALSE 51802
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
51757: CALL_OW 45
51761: PPUSH
51762: LD_VAR 0 2
51766: PUSH
51767: LD_INT 1
51769: ARRAY
51770: PPUSH
51771: CALL_OW 250
51775: PPUSH
51776: LD_VAR 0 2
51780: PUSH
51781: LD_INT 1
51783: ARRAY
51784: PPUSH
51785: CALL_OW 251
51789: PPUSH
51790: LD_INT 12
51792: PPUSH
51793: LD_INT 1
51795: PPUSH
51796: CALL_OW 50
51800: GO 51814
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
51802: CALL_OW 45
51806: PPUSH
51807: LD_INT 1
51809: PPUSH
51810: CALL_OW 51
// end ;
51814: GO 51688
51816: POP
51817: POP
// end ;
51818: PPOPN 2
51820: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
51821: LD_EXP 36
51825: PUSH
51826: LD_EXP 82
51830: AND
51831: IFFALSE 52053
51833: GO 51835
51835: DISABLE
51836: LD_INT 0
51838: PPUSH
51839: PPUSH
51840: PPUSH
51841: PPUSH
51842: PPUSH
51843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
51844: LD_ADDR_VAR 0 6
51848: PUSH
51849: LD_INT 22
51851: PUSH
51852: LD_OWVAR 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 21
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: PUSH
51874: LD_INT 23
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: PPUSH
51893: CALL_OW 69
51897: ST_TO_ADDR
// if not tmp then
51898: LD_VAR 0 6
51902: NOT
51903: IFFALSE 51907
// exit ;
51905: GO 52053
// s1 := rand ( 1 , 4 ) ;
51907: LD_ADDR_VAR 0 2
51911: PUSH
51912: LD_INT 1
51914: PPUSH
51915: LD_INT 4
51917: PPUSH
51918: CALL_OW 12
51922: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
51923: LD_ADDR_VAR 0 4
51927: PUSH
51928: LD_VAR 0 6
51932: PUSH
51933: LD_INT 1
51935: ARRAY
51936: PPUSH
51937: LD_VAR 0 2
51941: PPUSH
51942: CALL_OW 259
51946: ST_TO_ADDR
// if s1 = 1 then
51947: LD_VAR 0 2
51951: PUSH
51952: LD_INT 1
51954: EQUAL
51955: IFFALSE 51975
// s2 := rand ( 2 , 4 ) else
51957: LD_ADDR_VAR 0 3
51961: PUSH
51962: LD_INT 2
51964: PPUSH
51965: LD_INT 4
51967: PPUSH
51968: CALL_OW 12
51972: ST_TO_ADDR
51973: GO 51983
// s2 := 1 ;
51975: LD_ADDR_VAR 0 3
51979: PUSH
51980: LD_INT 1
51982: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
51983: LD_ADDR_VAR 0 5
51987: PUSH
51988: LD_VAR 0 6
51992: PUSH
51993: LD_INT 1
51995: ARRAY
51996: PPUSH
51997: LD_VAR 0 3
52001: PPUSH
52002: CALL_OW 259
52006: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
52007: LD_VAR 0 6
52011: PUSH
52012: LD_INT 1
52014: ARRAY
52015: PPUSH
52016: LD_VAR 0 2
52020: PPUSH
52021: LD_VAR 0 5
52025: PPUSH
52026: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
52030: LD_VAR 0 6
52034: PUSH
52035: LD_INT 1
52037: ARRAY
52038: PPUSH
52039: LD_VAR 0 3
52043: PPUSH
52044: LD_VAR 0 4
52048: PPUSH
52049: CALL_OW 237
// end ;
52053: PPOPN 6
52055: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
52056: LD_EXP 36
52060: PUSH
52061: LD_EXP 83
52065: AND
52066: IFFALSE 52145
52068: GO 52070
52070: DISABLE
52071: LD_INT 0
52073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
52074: LD_ADDR_VAR 0 1
52078: PUSH
52079: LD_INT 22
52081: PUSH
52082: LD_OWVAR 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 30
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PPUSH
52105: CALL_OW 69
52109: ST_TO_ADDR
// if not tmp then
52110: LD_VAR 0 1
52114: NOT
52115: IFFALSE 52119
// exit ;
52117: GO 52145
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
52119: LD_VAR 0 1
52123: PUSH
52124: LD_INT 1
52126: PPUSH
52127: LD_VAR 0 1
52131: PPUSH
52132: CALL_OW 12
52136: ARRAY
52137: PPUSH
52138: LD_INT 1
52140: PPUSH
52141: CALL_OW 234
// end ;
52145: PPOPN 1
52147: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
52148: LD_EXP 36
52152: PUSH
52153: LD_EXP 84
52157: AND
52158: IFFALSE 52270
52160: GO 52162
52162: DISABLE
52163: LD_INT 0
52165: PPUSH
52166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
52167: LD_ADDR_VAR 0 2
52171: PUSH
52172: LD_INT 22
52174: PUSH
52175: LD_OWVAR 2
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 30
52189: PUSH
52190: LD_INT 27
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 30
52199: PUSH
52200: LD_INT 26
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 30
52209: PUSH
52210: LD_INT 28
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PPUSH
52227: CALL_OW 69
52231: ST_TO_ADDR
// if not tmp then
52232: LD_VAR 0 2
52236: NOT
52237: IFFALSE 52241
// exit ;
52239: GO 52270
// for i in tmp do
52241: LD_ADDR_VAR 0 1
52245: PUSH
52246: LD_VAR 0 2
52250: PUSH
52251: FOR_IN
52252: IFFALSE 52268
// SetLives ( i , 1 ) ;
52254: LD_VAR 0 1
52258: PPUSH
52259: LD_INT 1
52261: PPUSH
52262: CALL_OW 234
52266: GO 52251
52268: POP
52269: POP
// end ;
52270: PPOPN 2
52272: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
52273: LD_EXP 36
52277: PUSH
52278: LD_EXP 85
52282: AND
52283: IFFALSE 52570
52285: GO 52287
52287: DISABLE
52288: LD_INT 0
52290: PPUSH
52291: PPUSH
52292: PPUSH
// begin i := rand ( 1 , 7 ) ;
52293: LD_ADDR_VAR 0 1
52297: PUSH
52298: LD_INT 1
52300: PPUSH
52301: LD_INT 7
52303: PPUSH
52304: CALL_OW 12
52308: ST_TO_ADDR
// case i of 1 :
52309: LD_VAR 0 1
52313: PUSH
52314: LD_INT 1
52316: DOUBLE
52317: EQUAL
52318: IFTRUE 52322
52320: GO 52332
52322: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
52323: LD_STRING earthquake(getX(game), 0, 32)
52325: PPUSH
52326: CALL_OW 559
52330: GO 52570
52332: LD_INT 2
52334: DOUBLE
52335: EQUAL
52336: IFTRUE 52340
52338: GO 52354
52340: POP
// begin ToLua ( displayStucuk(); ) ;
52341: LD_STRING displayStucuk();
52343: PPUSH
52344: CALL_OW 559
// ResetFog ;
52348: CALL_OW 335
// end ; 3 :
52352: GO 52570
52354: LD_INT 3
52356: DOUBLE
52357: EQUAL
52358: IFTRUE 52362
52360: GO 52466
52362: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
52363: LD_ADDR_VAR 0 2
52367: PUSH
52368: LD_INT 22
52370: PUSH
52371: LD_OWVAR 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 25
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PPUSH
52394: CALL_OW 69
52398: ST_TO_ADDR
// if not tmp then
52399: LD_VAR 0 2
52403: NOT
52404: IFFALSE 52408
// exit ;
52406: GO 52570
// un := tmp [ rand ( 1 , tmp ) ] ;
52408: LD_ADDR_VAR 0 3
52412: PUSH
52413: LD_VAR 0 2
52417: PUSH
52418: LD_INT 1
52420: PPUSH
52421: LD_VAR 0 2
52425: PPUSH
52426: CALL_OW 12
52430: ARRAY
52431: ST_TO_ADDR
// if Crawls ( un ) then
52432: LD_VAR 0 3
52436: PPUSH
52437: CALL_OW 318
52441: IFFALSE 52452
// ComWalk ( un ) ;
52443: LD_VAR 0 3
52447: PPUSH
52448: CALL_OW 138
// SetClass ( un , class_mortar ) ;
52452: LD_VAR 0 3
52456: PPUSH
52457: LD_INT 8
52459: PPUSH
52460: CALL_OW 336
// end ; 4 :
52464: GO 52570
52466: LD_INT 4
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52548
52474: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
52475: LD_ADDR_VAR 0 2
52479: PUSH
52480: LD_INT 22
52482: PUSH
52483: LD_OWVAR 2
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 30
52494: PUSH
52495: LD_INT 29
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PPUSH
52506: CALL_OW 69
52510: ST_TO_ADDR
// if not tmp then
52511: LD_VAR 0 2
52515: NOT
52516: IFFALSE 52520
// exit ;
52518: GO 52570
// CenterNowOnUnits ( tmp [ 1 ] ) ;
52520: LD_VAR 0 2
52524: PUSH
52525: LD_INT 1
52527: ARRAY
52528: PPUSH
52529: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
52533: LD_VAR 0 2
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: PPUSH
52542: CALL_OW 65
// end ; 5 .. 7 :
52546: GO 52570
52548: LD_INT 5
52550: DOUBLE
52551: GREATEREQUAL
52552: IFFALSE 52560
52554: LD_INT 7
52556: DOUBLE
52557: LESSEQUAL
52558: IFTRUE 52562
52560: GO 52569
52562: POP
// StreamSibBomb ; end ;
52563: CALL 48807 0 0
52567: GO 52570
52569: POP
// end ;
52570: PPOPN 3
52572: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
52573: LD_EXP 36
52577: PUSH
52578: LD_EXP 86
52582: AND
52583: IFFALSE 52739
52585: GO 52587
52587: DISABLE
52588: LD_INT 0
52590: PPUSH
52591: PPUSH
52592: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
52593: LD_ADDR_VAR 0 2
52597: PUSH
52598: LD_INT 81
52600: PUSH
52601: LD_OWVAR 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 21
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 21
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: LIST
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PPUSH
52642: CALL_OW 69
52646: ST_TO_ADDR
// if not tmp then
52647: LD_VAR 0 2
52651: NOT
52652: IFFALSE 52656
// exit ;
52654: GO 52739
// p := 0 ;
52656: LD_ADDR_VAR 0 3
52660: PUSH
52661: LD_INT 0
52663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
52664: LD_INT 35
52666: PPUSH
52667: CALL_OW 67
// p := p + 1 ;
52671: LD_ADDR_VAR 0 3
52675: PUSH
52676: LD_VAR 0 3
52680: PUSH
52681: LD_INT 1
52683: PLUS
52684: ST_TO_ADDR
// for i in tmp do
52685: LD_ADDR_VAR 0 1
52689: PUSH
52690: LD_VAR 0 2
52694: PUSH
52695: FOR_IN
52696: IFFALSE 52727
// if GetLives ( i ) < 1000 then
52698: LD_VAR 0 1
52702: PPUSH
52703: CALL_OW 256
52707: PUSH
52708: LD_INT 1000
52710: LESS
52711: IFFALSE 52725
// SetLives ( i , 1000 ) ;
52713: LD_VAR 0 1
52717: PPUSH
52718: LD_INT 1000
52720: PPUSH
52721: CALL_OW 234
52725: GO 52695
52727: POP
52728: POP
// until p > 20 ;
52729: LD_VAR 0 3
52733: PUSH
52734: LD_INT 20
52736: GREATER
52737: IFFALSE 52664
// end ;
52739: PPOPN 3
52741: END
// every 0 0$1 trigger StreamModeActive and sTime do
52742: LD_EXP 36
52746: PUSH
52747: LD_EXP 87
52751: AND
52752: IFFALSE 52787
52754: GO 52756
52756: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
52757: LD_INT 28
52759: PPUSH
52760: LD_OWVAR 2
52764: PPUSH
52765: LD_INT 2
52767: PPUSH
52768: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
52772: LD_INT 30
52774: PPUSH
52775: LD_OWVAR 2
52779: PPUSH
52780: LD_INT 2
52782: PPUSH
52783: CALL_OW 322
// end ;
52787: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
52788: LD_EXP 36
52792: PUSH
52793: LD_EXP 88
52797: AND
52798: IFFALSE 52919
52800: GO 52802
52802: DISABLE
52803: LD_INT 0
52805: PPUSH
52806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52807: LD_ADDR_VAR 0 2
52811: PUSH
52812: LD_INT 22
52814: PUSH
52815: LD_OWVAR 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 21
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: LD_INT 23
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: LIST
52855: PPUSH
52856: CALL_OW 69
52860: ST_TO_ADDR
// if not tmp then
52861: LD_VAR 0 2
52865: NOT
52866: IFFALSE 52870
// exit ;
52868: GO 52919
// for i in tmp do
52870: LD_ADDR_VAR 0 1
52874: PUSH
52875: LD_VAR 0 2
52879: PUSH
52880: FOR_IN
52881: IFFALSE 52917
// begin if Crawls ( i ) then
52883: LD_VAR 0 1
52887: PPUSH
52888: CALL_OW 318
52892: IFFALSE 52903
// ComWalk ( i ) ;
52894: LD_VAR 0 1
52898: PPUSH
52899: CALL_OW 138
// SetClass ( i , 2 ) ;
52903: LD_VAR 0 1
52907: PPUSH
52908: LD_INT 2
52910: PPUSH
52911: CALL_OW 336
// end ;
52915: GO 52880
52917: POP
52918: POP
// end ;
52919: PPOPN 2
52921: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
52922: LD_EXP 36
52926: PUSH
52927: LD_EXP 89
52931: AND
52932: IFFALSE 53220
52934: GO 52936
52936: DISABLE
52937: LD_INT 0
52939: PPUSH
52940: PPUSH
52941: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
52942: LD_OWVAR 2
52946: PPUSH
52947: LD_INT 9
52949: PPUSH
52950: LD_INT 1
52952: PPUSH
52953: LD_INT 1
52955: PPUSH
52956: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
52960: LD_INT 9
52962: PPUSH
52963: LD_OWVAR 2
52967: PPUSH
52968: CALL_OW 343
// uc_side := 9 ;
52972: LD_ADDR_OWVAR 20
52976: PUSH
52977: LD_INT 9
52979: ST_TO_ADDR
// uc_nation := 2 ;
52980: LD_ADDR_OWVAR 21
52984: PUSH
52985: LD_INT 2
52987: ST_TO_ADDR
// hc_name := Dark Warrior ;
52988: LD_ADDR_OWVAR 26
52992: PUSH
52993: LD_STRING Dark Warrior
52995: ST_TO_ADDR
// hc_gallery :=  ;
52996: LD_ADDR_OWVAR 33
53000: PUSH
53001: LD_STRING 
53003: ST_TO_ADDR
// hc_noskilllimit := true ;
53004: LD_ADDR_OWVAR 76
53008: PUSH
53009: LD_INT 1
53011: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
53012: LD_ADDR_OWVAR 31
53016: PUSH
53017: LD_INT 30
53019: PUSH
53020: LD_INT 30
53022: PUSH
53023: LD_INT 30
53025: PUSH
53026: LD_INT 30
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: ST_TO_ADDR
// un := CreateHuman ;
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: CALL_OW 44
53044: ST_TO_ADDR
// hc_noskilllimit := false ;
53045: LD_ADDR_OWVAR 76
53049: PUSH
53050: LD_INT 0
53052: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53053: LD_VAR 0 3
53057: PPUSH
53058: LD_INT 1
53060: PPUSH
53061: CALL_OW 51
// ToLua ( playRanger() ) ;
53065: LD_STRING playRanger()
53067: PPUSH
53068: CALL_OW 559
// p := 0 ;
53072: LD_ADDR_VAR 0 2
53076: PUSH
53077: LD_INT 0
53079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
53080: LD_INT 35
53082: PPUSH
53083: CALL_OW 67
// p := p + 1 ;
53087: LD_ADDR_VAR 0 2
53091: PUSH
53092: LD_VAR 0 2
53096: PUSH
53097: LD_INT 1
53099: PLUS
53100: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
53101: LD_VAR 0 3
53105: PPUSH
53106: CALL_OW 256
53110: PUSH
53111: LD_INT 1000
53113: LESS
53114: IFFALSE 53128
// SetLives ( un , 1000 ) ;
53116: LD_VAR 0 3
53120: PPUSH
53121: LD_INT 1000
53123: PPUSH
53124: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
53128: LD_VAR 0 3
53132: PPUSH
53133: LD_INT 81
53135: PUSH
53136: LD_OWVAR 2
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 91
53147: PUSH
53148: LD_VAR 0 3
53152: PUSH
53153: LD_INT 30
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PPUSH
53165: CALL_OW 69
53169: PPUSH
53170: LD_VAR 0 3
53174: PPUSH
53175: CALL_OW 74
53179: PPUSH
53180: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
53184: LD_VAR 0 2
53188: PUSH
53189: LD_INT 80
53191: GREATER
53192: PUSH
53193: LD_VAR 0 3
53197: PPUSH
53198: CALL_OW 301
53202: OR
53203: IFFALSE 53080
// if un then
53205: LD_VAR 0 3
53209: IFFALSE 53220
// RemoveUnit ( un ) ;
53211: LD_VAR 0 3
53215: PPUSH
53216: CALL_OW 64
// end ;
53220: PPOPN 3
53222: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
53223: LD_EXP 90
53227: IFFALSE 53343
53229: GO 53231
53231: DISABLE
53232: LD_INT 0
53234: PPUSH
53235: PPUSH
53236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
53237: LD_ADDR_VAR 0 2
53241: PUSH
53242: LD_INT 81
53244: PUSH
53245: LD_OWVAR 2
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 21
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PPUSH
53268: CALL_OW 69
53272: ST_TO_ADDR
// ToLua ( playComputer() ) ;
53273: LD_STRING playComputer()
53275: PPUSH
53276: CALL_OW 559
// if not tmp then
53280: LD_VAR 0 2
53284: NOT
53285: IFFALSE 53289
// exit ;
53287: GO 53343
// for i in tmp do
53289: LD_ADDR_VAR 0 1
53293: PUSH
53294: LD_VAR 0 2
53298: PUSH
53299: FOR_IN
53300: IFFALSE 53341
// for j := 1 to 4 do
53302: LD_ADDR_VAR 0 3
53306: PUSH
53307: DOUBLE
53308: LD_INT 1
53310: DEC
53311: ST_TO_ADDR
53312: LD_INT 4
53314: PUSH
53315: FOR_TO
53316: IFFALSE 53337
// SetSkill ( i , j , 10 ) ;
53318: LD_VAR 0 1
53322: PPUSH
53323: LD_VAR 0 3
53327: PPUSH
53328: LD_INT 10
53330: PPUSH
53331: CALL_OW 237
53335: GO 53315
53337: POP
53338: POP
53339: GO 53299
53341: POP
53342: POP
// end ;
53343: PPOPN 3
53345: END
// every 0 0$1 trigger s30 do var i , tmp ;
53346: LD_EXP 91
53350: IFFALSE 53419
53352: GO 53354
53354: DISABLE
53355: LD_INT 0
53357: PPUSH
53358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53359: LD_ADDR_VAR 0 2
53363: PUSH
53364: LD_INT 22
53366: PUSH
53367: LD_OWVAR 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PPUSH
53376: CALL_OW 69
53380: ST_TO_ADDR
// if not tmp then
53381: LD_VAR 0 2
53385: NOT
53386: IFFALSE 53390
// exit ;
53388: GO 53419
// for i in tmp do
53390: LD_ADDR_VAR 0 1
53394: PUSH
53395: LD_VAR 0 2
53399: PUSH
53400: FOR_IN
53401: IFFALSE 53417
// SetLives ( i , 300 ) ;
53403: LD_VAR 0 1
53407: PPUSH
53408: LD_INT 300
53410: PPUSH
53411: CALL_OW 234
53415: GO 53400
53417: POP
53418: POP
// end ;
53419: PPOPN 2
53421: END
// every 0 0$1 trigger s60 do var i , tmp ;
53422: LD_EXP 92
53426: IFFALSE 53495
53428: GO 53430
53430: DISABLE
53431: LD_INT 0
53433: PPUSH
53434: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
53435: LD_ADDR_VAR 0 2
53439: PUSH
53440: LD_INT 22
53442: PUSH
53443: LD_OWVAR 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PPUSH
53452: CALL_OW 69
53456: ST_TO_ADDR
// if not tmp then
53457: LD_VAR 0 2
53461: NOT
53462: IFFALSE 53466
// exit ;
53464: GO 53495
// for i in tmp do
53466: LD_ADDR_VAR 0 1
53470: PUSH
53471: LD_VAR 0 2
53475: PUSH
53476: FOR_IN
53477: IFFALSE 53493
// SetLives ( i , 600 ) ;
53479: LD_VAR 0 1
53483: PPUSH
53484: LD_INT 600
53486: PPUSH
53487: CALL_OW 234
53491: GO 53476
53493: POP
53494: POP
// end ;
53495: PPOPN 2
53497: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53498: LD_INT 0
53500: PPUSH
// case cmd of 301 :
53501: LD_VAR 0 1
53505: PUSH
53506: LD_INT 301
53508: DOUBLE
53509: EQUAL
53510: IFTRUE 53514
53512: GO 53546
53514: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
53515: LD_VAR 0 6
53519: PPUSH
53520: LD_VAR 0 7
53524: PPUSH
53525: LD_VAR 0 8
53529: PPUSH
53530: LD_VAR 0 4
53534: PPUSH
53535: LD_VAR 0 5
53539: PPUSH
53540: CALL 54747 0 5
53544: GO 53667
53546: LD_INT 302
53548: DOUBLE
53549: EQUAL
53550: IFTRUE 53554
53552: GO 53591
53554: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
53555: LD_VAR 0 6
53559: PPUSH
53560: LD_VAR 0 7
53564: PPUSH
53565: LD_VAR 0 8
53569: PPUSH
53570: LD_VAR 0 9
53574: PPUSH
53575: LD_VAR 0 4
53579: PPUSH
53580: LD_VAR 0 5
53584: PPUSH
53585: CALL 54838 0 6
53589: GO 53667
53591: LD_INT 303
53593: DOUBLE
53594: EQUAL
53595: IFTRUE 53599
53597: GO 53636
53599: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
53600: LD_VAR 0 6
53604: PPUSH
53605: LD_VAR 0 7
53609: PPUSH
53610: LD_VAR 0 8
53614: PPUSH
53615: LD_VAR 0 9
53619: PPUSH
53620: LD_VAR 0 4
53624: PPUSH
53625: LD_VAR 0 5
53629: PPUSH
53630: CALL 53672 0 6
53634: GO 53667
53636: LD_INT 304
53638: DOUBLE
53639: EQUAL
53640: IFTRUE 53644
53642: GO 53666
53644: POP
// hHackTeleport ( unit , x , y ) ; end ;
53645: LD_VAR 0 2
53649: PPUSH
53650: LD_VAR 0 4
53654: PPUSH
53655: LD_VAR 0 5
53659: PPUSH
53660: CALL 55431 0 3
53664: GO 53667
53666: POP
// end ;
53667: LD_VAR 0 12
53671: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
53672: LD_INT 0
53674: PPUSH
53675: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
53676: LD_VAR 0 1
53680: PUSH
53681: LD_INT 1
53683: LESS
53684: PUSH
53685: LD_VAR 0 1
53689: PUSH
53690: LD_INT 3
53692: GREATER
53693: OR
53694: PUSH
53695: LD_VAR 0 5
53699: PPUSH
53700: LD_VAR 0 6
53704: PPUSH
53705: CALL_OW 428
53709: OR
53710: IFFALSE 53714
// exit ;
53712: GO 54434
// uc_side := your_side ;
53714: LD_ADDR_OWVAR 20
53718: PUSH
53719: LD_OWVAR 2
53723: ST_TO_ADDR
// uc_nation := nation ;
53724: LD_ADDR_OWVAR 21
53728: PUSH
53729: LD_VAR 0 1
53733: ST_TO_ADDR
// bc_level = 1 ;
53734: LD_ADDR_OWVAR 43
53738: PUSH
53739: LD_INT 1
53741: ST_TO_ADDR
// case btype of 1 :
53742: LD_VAR 0 2
53746: PUSH
53747: LD_INT 1
53749: DOUBLE
53750: EQUAL
53751: IFTRUE 53755
53753: GO 53766
53755: POP
// bc_type := b_depot ; 2 :
53756: LD_ADDR_OWVAR 42
53760: PUSH
53761: LD_INT 0
53763: ST_TO_ADDR
53764: GO 54378
53766: LD_INT 2
53768: DOUBLE
53769: EQUAL
53770: IFTRUE 53774
53772: GO 53785
53774: POP
// bc_type := b_warehouse ; 3 :
53775: LD_ADDR_OWVAR 42
53779: PUSH
53780: LD_INT 1
53782: ST_TO_ADDR
53783: GO 54378
53785: LD_INT 3
53787: DOUBLE
53788: EQUAL
53789: IFTRUE 53793
53791: GO 53804
53793: POP
// bc_type := b_lab ; 4 .. 9 :
53794: LD_ADDR_OWVAR 42
53798: PUSH
53799: LD_INT 6
53801: ST_TO_ADDR
53802: GO 54378
53804: LD_INT 4
53806: DOUBLE
53807: GREATEREQUAL
53808: IFFALSE 53816
53810: LD_INT 9
53812: DOUBLE
53813: LESSEQUAL
53814: IFTRUE 53818
53816: GO 53870
53818: POP
// begin bc_type := b_lab_half ;
53819: LD_ADDR_OWVAR 42
53823: PUSH
53824: LD_INT 7
53826: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
53827: LD_ADDR_OWVAR 44
53831: PUSH
53832: LD_INT 10
53834: PUSH
53835: LD_INT 11
53837: PUSH
53838: LD_INT 12
53840: PUSH
53841: LD_INT 15
53843: PUSH
53844: LD_INT 14
53846: PUSH
53847: LD_INT 13
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: PUSH
53858: LD_VAR 0 2
53862: PUSH
53863: LD_INT 3
53865: MINUS
53866: ARRAY
53867: ST_TO_ADDR
// end ; 10 .. 13 :
53868: GO 54378
53870: LD_INT 10
53872: DOUBLE
53873: GREATEREQUAL
53874: IFFALSE 53882
53876: LD_INT 13
53878: DOUBLE
53879: LESSEQUAL
53880: IFTRUE 53884
53882: GO 53961
53884: POP
// begin bc_type := b_lab_full ;
53885: LD_ADDR_OWVAR 42
53889: PUSH
53890: LD_INT 8
53892: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
53893: LD_ADDR_OWVAR 44
53897: PUSH
53898: LD_INT 10
53900: PUSH
53901: LD_INT 12
53903: PUSH
53904: LD_INT 14
53906: PUSH
53907: LD_INT 13
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: PUSH
53916: LD_VAR 0 2
53920: PUSH
53921: LD_INT 9
53923: MINUS
53924: ARRAY
53925: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
53926: LD_ADDR_OWVAR 45
53930: PUSH
53931: LD_INT 11
53933: PUSH
53934: LD_INT 15
53936: PUSH
53937: LD_INT 12
53939: PUSH
53940: LD_INT 15
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: PUSH
53949: LD_VAR 0 2
53953: PUSH
53954: LD_INT 9
53956: MINUS
53957: ARRAY
53958: ST_TO_ADDR
// end ; 14 :
53959: GO 54378
53961: LD_INT 14
53963: DOUBLE
53964: EQUAL
53965: IFTRUE 53969
53967: GO 53980
53969: POP
// bc_type := b_workshop ; 15 :
53970: LD_ADDR_OWVAR 42
53974: PUSH
53975: LD_INT 2
53977: ST_TO_ADDR
53978: GO 54378
53980: LD_INT 15
53982: DOUBLE
53983: EQUAL
53984: IFTRUE 53988
53986: GO 53999
53988: POP
// bc_type := b_factory ; 16 :
53989: LD_ADDR_OWVAR 42
53993: PUSH
53994: LD_INT 3
53996: ST_TO_ADDR
53997: GO 54378
53999: LD_INT 16
54001: DOUBLE
54002: EQUAL
54003: IFTRUE 54007
54005: GO 54018
54007: POP
// bc_type := b_ext_gun ; 17 :
54008: LD_ADDR_OWVAR 42
54012: PUSH
54013: LD_INT 17
54015: ST_TO_ADDR
54016: GO 54378
54018: LD_INT 17
54020: DOUBLE
54021: EQUAL
54022: IFTRUE 54026
54024: GO 54054
54026: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
54027: LD_ADDR_OWVAR 42
54031: PUSH
54032: LD_INT 19
54034: PUSH
54035: LD_INT 23
54037: PUSH
54038: LD_INT 19
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: LIST
54045: PUSH
54046: LD_VAR 0 1
54050: ARRAY
54051: ST_TO_ADDR
54052: GO 54378
54054: LD_INT 18
54056: DOUBLE
54057: EQUAL
54058: IFTRUE 54062
54060: GO 54073
54062: POP
// bc_type := b_ext_radar ; 19 :
54063: LD_ADDR_OWVAR 42
54067: PUSH
54068: LD_INT 20
54070: ST_TO_ADDR
54071: GO 54378
54073: LD_INT 19
54075: DOUBLE
54076: EQUAL
54077: IFTRUE 54081
54079: GO 54092
54081: POP
// bc_type := b_ext_radio ; 20 :
54082: LD_ADDR_OWVAR 42
54086: PUSH
54087: LD_INT 22
54089: ST_TO_ADDR
54090: GO 54378
54092: LD_INT 20
54094: DOUBLE
54095: EQUAL
54096: IFTRUE 54100
54098: GO 54111
54100: POP
// bc_type := b_ext_siberium ; 21 :
54101: LD_ADDR_OWVAR 42
54105: PUSH
54106: LD_INT 21
54108: ST_TO_ADDR
54109: GO 54378
54111: LD_INT 21
54113: DOUBLE
54114: EQUAL
54115: IFTRUE 54119
54117: GO 54130
54119: POP
// bc_type := b_ext_computer ; 22 :
54120: LD_ADDR_OWVAR 42
54124: PUSH
54125: LD_INT 24
54127: ST_TO_ADDR
54128: GO 54378
54130: LD_INT 22
54132: DOUBLE
54133: EQUAL
54134: IFTRUE 54138
54136: GO 54149
54138: POP
// bc_type := b_ext_track ; 23 :
54139: LD_ADDR_OWVAR 42
54143: PUSH
54144: LD_INT 16
54146: ST_TO_ADDR
54147: GO 54378
54149: LD_INT 23
54151: DOUBLE
54152: EQUAL
54153: IFTRUE 54157
54155: GO 54168
54157: POP
// bc_type := b_ext_laser ; 24 :
54158: LD_ADDR_OWVAR 42
54162: PUSH
54163: LD_INT 25
54165: ST_TO_ADDR
54166: GO 54378
54168: LD_INT 24
54170: DOUBLE
54171: EQUAL
54172: IFTRUE 54176
54174: GO 54187
54176: POP
// bc_type := b_control_tower ; 25 :
54177: LD_ADDR_OWVAR 42
54181: PUSH
54182: LD_INT 36
54184: ST_TO_ADDR
54185: GO 54378
54187: LD_INT 25
54189: DOUBLE
54190: EQUAL
54191: IFTRUE 54195
54193: GO 54206
54195: POP
// bc_type := b_breastwork ; 26 :
54196: LD_ADDR_OWVAR 42
54200: PUSH
54201: LD_INT 31
54203: ST_TO_ADDR
54204: GO 54378
54206: LD_INT 26
54208: DOUBLE
54209: EQUAL
54210: IFTRUE 54214
54212: GO 54225
54214: POP
// bc_type := b_bunker ; 27 :
54215: LD_ADDR_OWVAR 42
54219: PUSH
54220: LD_INT 32
54222: ST_TO_ADDR
54223: GO 54378
54225: LD_INT 27
54227: DOUBLE
54228: EQUAL
54229: IFTRUE 54233
54231: GO 54244
54233: POP
// bc_type := b_turret ; 28 :
54234: LD_ADDR_OWVAR 42
54238: PUSH
54239: LD_INT 33
54241: ST_TO_ADDR
54242: GO 54378
54244: LD_INT 28
54246: DOUBLE
54247: EQUAL
54248: IFTRUE 54252
54250: GO 54263
54252: POP
// bc_type := b_armoury ; 29 :
54253: LD_ADDR_OWVAR 42
54257: PUSH
54258: LD_INT 4
54260: ST_TO_ADDR
54261: GO 54378
54263: LD_INT 29
54265: DOUBLE
54266: EQUAL
54267: IFTRUE 54271
54269: GO 54282
54271: POP
// bc_type := b_barracks ; 30 :
54272: LD_ADDR_OWVAR 42
54276: PUSH
54277: LD_INT 5
54279: ST_TO_ADDR
54280: GO 54378
54282: LD_INT 30
54284: DOUBLE
54285: EQUAL
54286: IFTRUE 54290
54288: GO 54301
54290: POP
// bc_type := b_solar_power ; 31 :
54291: LD_ADDR_OWVAR 42
54295: PUSH
54296: LD_INT 27
54298: ST_TO_ADDR
54299: GO 54378
54301: LD_INT 31
54303: DOUBLE
54304: EQUAL
54305: IFTRUE 54309
54307: GO 54320
54309: POP
// bc_type := b_oil_power ; 32 :
54310: LD_ADDR_OWVAR 42
54314: PUSH
54315: LD_INT 26
54317: ST_TO_ADDR
54318: GO 54378
54320: LD_INT 32
54322: DOUBLE
54323: EQUAL
54324: IFTRUE 54328
54326: GO 54339
54328: POP
// bc_type := b_siberite_power ; 33 :
54329: LD_ADDR_OWVAR 42
54333: PUSH
54334: LD_INT 28
54336: ST_TO_ADDR
54337: GO 54378
54339: LD_INT 33
54341: DOUBLE
54342: EQUAL
54343: IFTRUE 54347
54345: GO 54358
54347: POP
// bc_type := b_oil_mine ; 34 :
54348: LD_ADDR_OWVAR 42
54352: PUSH
54353: LD_INT 29
54355: ST_TO_ADDR
54356: GO 54378
54358: LD_INT 34
54360: DOUBLE
54361: EQUAL
54362: IFTRUE 54366
54364: GO 54377
54366: POP
// bc_type := b_siberite_mine ; end ;
54367: LD_ADDR_OWVAR 42
54371: PUSH
54372: LD_INT 30
54374: ST_TO_ADDR
54375: GO 54378
54377: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
54378: LD_ADDR_VAR 0 8
54382: PUSH
54383: LD_VAR 0 5
54387: PPUSH
54388: LD_VAR 0 6
54392: PPUSH
54393: LD_VAR 0 3
54397: PPUSH
54398: CALL_OW 47
54402: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
54403: LD_OWVAR 42
54407: PUSH
54408: LD_INT 32
54410: PUSH
54411: LD_INT 33
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: IN
54418: IFFALSE 54434
// PlaceWeaponTurret ( b , weapon ) ;
54420: LD_VAR 0 8
54424: PPUSH
54425: LD_VAR 0 4
54429: PPUSH
54430: CALL_OW 431
// end ;
54434: LD_VAR 0 7
54438: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
54439: LD_INT 0
54441: PPUSH
54442: PPUSH
54443: PPUSH
54444: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54445: LD_ADDR_VAR 0 4
54449: PUSH
54450: LD_INT 22
54452: PUSH
54453: LD_OWVAR 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: LD_INT 30
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 30
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PPUSH
54494: CALL_OW 69
54498: ST_TO_ADDR
// if not tmp then
54499: LD_VAR 0 4
54503: NOT
54504: IFFALSE 54508
// exit ;
54506: GO 54567
// for i in tmp do
54508: LD_ADDR_VAR 0 2
54512: PUSH
54513: LD_VAR 0 4
54517: PUSH
54518: FOR_IN
54519: IFFALSE 54565
// for j = 1 to 3 do
54521: LD_ADDR_VAR 0 3
54525: PUSH
54526: DOUBLE
54527: LD_INT 1
54529: DEC
54530: ST_TO_ADDR
54531: LD_INT 3
54533: PUSH
54534: FOR_TO
54535: IFFALSE 54561
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
54537: LD_VAR 0 2
54541: PPUSH
54542: CALL_OW 274
54546: PPUSH
54547: LD_VAR 0 3
54551: PPUSH
54552: LD_INT 99999
54554: PPUSH
54555: CALL_OW 277
54559: GO 54534
54561: POP
54562: POP
54563: GO 54518
54565: POP
54566: POP
// end ;
54567: LD_VAR 0 1
54571: RET
// export function hHackSetLevel10 ; var i , j ; begin
54572: LD_INT 0
54574: PPUSH
54575: PPUSH
54576: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
54577: LD_ADDR_VAR 0 2
54581: PUSH
54582: LD_INT 21
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PPUSH
54592: CALL_OW 69
54596: PUSH
54597: FOR_IN
54598: IFFALSE 54650
// if IsSelected ( i ) then
54600: LD_VAR 0 2
54604: PPUSH
54605: CALL_OW 306
54609: IFFALSE 54648
// begin for j := 1 to 4 do
54611: LD_ADDR_VAR 0 3
54615: PUSH
54616: DOUBLE
54617: LD_INT 1
54619: DEC
54620: ST_TO_ADDR
54621: LD_INT 4
54623: PUSH
54624: FOR_TO
54625: IFFALSE 54646
// SetSkill ( i , j , 10 ) ;
54627: LD_VAR 0 2
54631: PPUSH
54632: LD_VAR 0 3
54636: PPUSH
54637: LD_INT 10
54639: PPUSH
54640: CALL_OW 237
54644: GO 54624
54646: POP
54647: POP
// end ;
54648: GO 54597
54650: POP
54651: POP
// end ;
54652: LD_VAR 0 1
54656: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
54657: LD_INT 0
54659: PPUSH
54660: PPUSH
54661: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
54662: LD_ADDR_VAR 0 2
54666: PUSH
54667: LD_INT 22
54669: PUSH
54670: LD_OWVAR 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 21
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PPUSH
54693: CALL_OW 69
54697: PUSH
54698: FOR_IN
54699: IFFALSE 54740
// begin for j := 1 to 4 do
54701: LD_ADDR_VAR 0 3
54705: PUSH
54706: DOUBLE
54707: LD_INT 1
54709: DEC
54710: ST_TO_ADDR
54711: LD_INT 4
54713: PUSH
54714: FOR_TO
54715: IFFALSE 54736
// SetSkill ( i , j , 10 ) ;
54717: LD_VAR 0 2
54721: PPUSH
54722: LD_VAR 0 3
54726: PPUSH
54727: LD_INT 10
54729: PPUSH
54730: CALL_OW 237
54734: GO 54714
54736: POP
54737: POP
// end ;
54738: GO 54698
54740: POP
54741: POP
// end ;
54742: LD_VAR 0 1
54746: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
54747: LD_INT 0
54749: PPUSH
// uc_side := your_side ;
54750: LD_ADDR_OWVAR 20
54754: PUSH
54755: LD_OWVAR 2
54759: ST_TO_ADDR
// uc_nation := nation ;
54760: LD_ADDR_OWVAR 21
54764: PUSH
54765: LD_VAR 0 1
54769: ST_TO_ADDR
// InitHc ;
54770: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
54774: LD_INT 0
54776: PPUSH
54777: LD_VAR 0 2
54781: PPUSH
54782: LD_VAR 0 3
54786: PPUSH
54787: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
54791: LD_VAR 0 4
54795: PPUSH
54796: LD_VAR 0 5
54800: PPUSH
54801: CALL_OW 428
54805: PUSH
54806: LD_INT 0
54808: EQUAL
54809: IFFALSE 54833
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
54811: CALL_OW 44
54815: PPUSH
54816: LD_VAR 0 4
54820: PPUSH
54821: LD_VAR 0 5
54825: PPUSH
54826: LD_INT 1
54828: PPUSH
54829: CALL_OW 48
// end ;
54833: LD_VAR 0 6
54837: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
54838: LD_INT 0
54840: PPUSH
54841: PPUSH
// uc_side := your_side ;
54842: LD_ADDR_OWVAR 20
54846: PUSH
54847: LD_OWVAR 2
54851: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
54852: LD_VAR 0 1
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: LD_INT 4
54868: PUSH
54869: LD_INT 5
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: IN
54879: IFFALSE 54891
// uc_nation := nation_american else
54881: LD_ADDR_OWVAR 21
54885: PUSH
54886: LD_INT 1
54888: ST_TO_ADDR
54889: GO 54934
// if chassis in [ 11 , 12 , 13 , 14 ] then
54891: LD_VAR 0 1
54895: PUSH
54896: LD_INT 11
54898: PUSH
54899: LD_INT 12
54901: PUSH
54902: LD_INT 13
54904: PUSH
54905: LD_INT 14
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: IN
54914: IFFALSE 54926
// uc_nation := nation_arabian else
54916: LD_ADDR_OWVAR 21
54920: PUSH
54921: LD_INT 2
54923: ST_TO_ADDR
54924: GO 54934
// uc_nation := nation_russian ;
54926: LD_ADDR_OWVAR 21
54930: PUSH
54931: LD_INT 3
54933: ST_TO_ADDR
// vc_chassis := chassis ;
54934: LD_ADDR_OWVAR 37
54938: PUSH
54939: LD_VAR 0 1
54943: ST_TO_ADDR
// vc_engine := engine ;
54944: LD_ADDR_OWVAR 39
54948: PUSH
54949: LD_VAR 0 2
54953: ST_TO_ADDR
// vc_control := control ;
54954: LD_ADDR_OWVAR 38
54958: PUSH
54959: LD_VAR 0 3
54963: ST_TO_ADDR
// vc_weapon := weapon ;
54964: LD_ADDR_OWVAR 40
54968: PUSH
54969: LD_VAR 0 4
54973: ST_TO_ADDR
// un := CreateVehicle ;
54974: LD_ADDR_VAR 0 8
54978: PUSH
54979: CALL_OW 45
54983: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
54984: LD_VAR 0 8
54988: PPUSH
54989: LD_INT 0
54991: PPUSH
54992: LD_INT 5
54994: PPUSH
54995: CALL_OW 12
54999: PPUSH
55000: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
55004: LD_VAR 0 8
55008: PPUSH
55009: LD_VAR 0 5
55013: PPUSH
55014: LD_VAR 0 6
55018: PPUSH
55019: LD_INT 1
55021: PPUSH
55022: CALL_OW 48
// end ;
55026: LD_VAR 0 7
55030: RET
// export hInvincible ; every 1 do
55031: GO 55033
55033: DISABLE
// hInvincible := [ ] ;
55034: LD_ADDR_EXP 93
55038: PUSH
55039: EMPTY
55040: ST_TO_ADDR
55041: END
// every 10 do var i ;
55042: GO 55044
55044: DISABLE
55045: LD_INT 0
55047: PPUSH
// begin enable ;
55048: ENABLE
// if not hInvincible then
55049: LD_EXP 93
55053: NOT
55054: IFFALSE 55058
// exit ;
55056: GO 55102
// for i in hInvincible do
55058: LD_ADDR_VAR 0 1
55062: PUSH
55063: LD_EXP 93
55067: PUSH
55068: FOR_IN
55069: IFFALSE 55100
// if GetLives ( i ) < 1000 then
55071: LD_VAR 0 1
55075: PPUSH
55076: CALL_OW 256
55080: PUSH
55081: LD_INT 1000
55083: LESS
55084: IFFALSE 55098
// SetLives ( i , 1000 ) ;
55086: LD_VAR 0 1
55090: PPUSH
55091: LD_INT 1000
55093: PPUSH
55094: CALL_OW 234
55098: GO 55068
55100: POP
55101: POP
// end ;
55102: PPOPN 1
55104: END
// export function hHackInvincible ; var i ; begin
55105: LD_INT 0
55107: PPUSH
55108: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
55109: LD_ADDR_VAR 0 2
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: LD_INT 21
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 21
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: PPUSH
55142: CALL_OW 69
55146: PUSH
55147: FOR_IN
55148: IFFALSE 55209
// if IsSelected ( i ) then
55150: LD_VAR 0 2
55154: PPUSH
55155: CALL_OW 306
55159: IFFALSE 55207
// begin if i in hInvincible then
55161: LD_VAR 0 2
55165: PUSH
55166: LD_EXP 93
55170: IN
55171: IFFALSE 55191
// hInvincible := hInvincible diff i else
55173: LD_ADDR_EXP 93
55177: PUSH
55178: LD_EXP 93
55182: PUSH
55183: LD_VAR 0 2
55187: DIFF
55188: ST_TO_ADDR
55189: GO 55207
// hInvincible := hInvincible union i ;
55191: LD_ADDR_EXP 93
55195: PUSH
55196: LD_EXP 93
55200: PUSH
55201: LD_VAR 0 2
55205: UNION
55206: ST_TO_ADDR
// end ;
55207: GO 55147
55209: POP
55210: POP
// end ;
55211: LD_VAR 0 1
55215: RET
// export function hHackInvisible ; var i , j ; begin
55216: LD_INT 0
55218: PPUSH
55219: PPUSH
55220: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
55221: LD_ADDR_VAR 0 2
55225: PUSH
55226: LD_INT 21
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PPUSH
55236: CALL_OW 69
55240: PUSH
55241: FOR_IN
55242: IFFALSE 55266
// if IsSelected ( i ) then
55244: LD_VAR 0 2
55248: PPUSH
55249: CALL_OW 306
55253: IFFALSE 55264
// ComForceInvisible ( i ) ;
55255: LD_VAR 0 2
55259: PPUSH
55260: CALL_OW 496
55264: GO 55241
55266: POP
55267: POP
// end ;
55268: LD_VAR 0 1
55272: RET
// export function hHackChangeYourSide ; begin
55273: LD_INT 0
55275: PPUSH
// if your_side = 8 then
55276: LD_OWVAR 2
55280: PUSH
55281: LD_INT 8
55283: EQUAL
55284: IFFALSE 55296
// your_side := 0 else
55286: LD_ADDR_OWVAR 2
55290: PUSH
55291: LD_INT 0
55293: ST_TO_ADDR
55294: GO 55310
// your_side := your_side + 1 ;
55296: LD_ADDR_OWVAR 2
55300: PUSH
55301: LD_OWVAR 2
55305: PUSH
55306: LD_INT 1
55308: PLUS
55309: ST_TO_ADDR
// end ;
55310: LD_VAR 0 1
55314: RET
// export function hHackChangeUnitSide ; var i , j ; begin
55315: LD_INT 0
55317: PPUSH
55318: PPUSH
55319: PPUSH
// for i in all_units do
55320: LD_ADDR_VAR 0 2
55324: PUSH
55325: LD_OWVAR 3
55329: PUSH
55330: FOR_IN
55331: IFFALSE 55409
// if IsSelected ( i ) then
55333: LD_VAR 0 2
55337: PPUSH
55338: CALL_OW 306
55342: IFFALSE 55407
// begin j := GetSide ( i ) ;
55344: LD_ADDR_VAR 0 3
55348: PUSH
55349: LD_VAR 0 2
55353: PPUSH
55354: CALL_OW 255
55358: ST_TO_ADDR
// if j = 8 then
55359: LD_VAR 0 3
55363: PUSH
55364: LD_INT 8
55366: EQUAL
55367: IFFALSE 55379
// j := 0 else
55369: LD_ADDR_VAR 0 3
55373: PUSH
55374: LD_INT 0
55376: ST_TO_ADDR
55377: GO 55393
// j := j + 1 ;
55379: LD_ADDR_VAR 0 3
55383: PUSH
55384: LD_VAR 0 3
55388: PUSH
55389: LD_INT 1
55391: PLUS
55392: ST_TO_ADDR
// SetSide ( i , j ) ;
55393: LD_VAR 0 2
55397: PPUSH
55398: LD_VAR 0 3
55402: PPUSH
55403: CALL_OW 235
// end ;
55407: GO 55330
55409: POP
55410: POP
// end ;
55411: LD_VAR 0 1
55415: RET
// export function hHackFog ; begin
55416: LD_INT 0
55418: PPUSH
// FogOff ( true ) ;
55419: LD_INT 1
55421: PPUSH
55422: CALL_OW 344
// end ;
55426: LD_VAR 0 1
55430: RET
// export function hHackTeleport ( unit , x , y ) ; begin
55431: LD_INT 0
55433: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
55434: LD_VAR 0 1
55438: PPUSH
55439: LD_VAR 0 2
55443: PPUSH
55444: LD_VAR 0 3
55448: PPUSH
55449: LD_INT 1
55451: PPUSH
55452: LD_INT 1
55454: PPUSH
55455: CALL_OW 483
// CenterOnXY ( x , y ) ;
55459: LD_VAR 0 2
55463: PPUSH
55464: LD_VAR 0 3
55468: PPUSH
55469: CALL_OW 84
// end ; end_of_file
55473: LD_VAR 0 4
55477: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55478: LD_VAR 0 1
55482: PUSH
55483: LD_INT 200
55485: DOUBLE
55486: GREATEREQUAL
55487: IFFALSE 55495
55489: LD_INT 299
55491: DOUBLE
55492: LESSEQUAL
55493: IFTRUE 55497
55495: GO 55529
55497: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55498: LD_VAR 0 1
55502: PPUSH
55503: LD_VAR 0 2
55507: PPUSH
55508: LD_VAR 0 3
55512: PPUSH
55513: LD_VAR 0 4
55517: PPUSH
55518: LD_VAR 0 5
55522: PPUSH
55523: CALL 56019 0 5
55527: GO 55606
55529: LD_INT 300
55531: DOUBLE
55532: GREATEREQUAL
55533: IFFALSE 55541
55535: LD_INT 399
55537: DOUBLE
55538: LESSEQUAL
55539: IFTRUE 55543
55541: GO 55605
55543: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55544: LD_VAR 0 1
55548: PPUSH
55549: LD_VAR 0 2
55553: PPUSH
55554: LD_VAR 0 3
55558: PPUSH
55559: LD_VAR 0 4
55563: PPUSH
55564: LD_VAR 0 5
55568: PPUSH
55569: LD_VAR 0 6
55573: PPUSH
55574: LD_VAR 0 7
55578: PPUSH
55579: LD_VAR 0 8
55583: PPUSH
55584: LD_VAR 0 9
55588: PPUSH
55589: LD_VAR 0 10
55593: PPUSH
55594: LD_VAR 0 11
55598: PPUSH
55599: CALL 53498 0 11
55603: GO 55606
55605: POP
// end ;
55606: PPOPN 11
55608: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55609: LD_VAR 0 1
55613: PPUSH
55614: LD_VAR 0 2
55618: PPUSH
55619: LD_VAR 0 3
55623: PPUSH
55624: LD_VAR 0 4
55628: PPUSH
55629: LD_VAR 0 5
55633: PPUSH
55634: CALL 55755 0 5
// end ; end_of_file
55638: PPOPN 5
55640: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
55641: LD_INT 0
55643: PPUSH
55644: PPUSH
55645: PPUSH
55646: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
55647: LD_VAR 0 1
55651: PPUSH
55652: CALL_OW 264
55656: PUSH
55657: LD_EXP 20
55661: EQUAL
55662: IFFALSE 55734
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
55664: LD_INT 68
55666: PPUSH
55667: LD_VAR 0 1
55671: PPUSH
55672: CALL_OW 255
55676: PPUSH
55677: CALL_OW 321
55681: PUSH
55682: LD_INT 2
55684: EQUAL
55685: IFFALSE 55697
// eff := 70 else
55687: LD_ADDR_VAR 0 4
55691: PUSH
55692: LD_INT 70
55694: ST_TO_ADDR
55695: GO 55705
// eff := 30 ;
55697: LD_ADDR_VAR 0 4
55701: PUSH
55702: LD_INT 30
55704: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
55705: LD_VAR 0 1
55709: PPUSH
55710: CALL_OW 250
55714: PPUSH
55715: LD_VAR 0 1
55719: PPUSH
55720: CALL_OW 251
55724: PPUSH
55725: LD_VAR 0 4
55729: PPUSH
55730: CALL_OW 495
// end ; end ;
55734: LD_VAR 0 2
55738: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55739: LD_INT 0
55741: PPUSH
// end ;
55742: LD_VAR 0 4
55746: RET
// export function SOS_Command ( cmd ) ; begin
55747: LD_INT 0
55749: PPUSH
// end ;
55750: LD_VAR 0 2
55754: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55755: LD_INT 0
55757: PPUSH
// end ;
55758: LD_VAR 0 6
55762: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
55763: LD_INT 0
55765: PPUSH
55766: PPUSH
// if not vehicle or not factory then
55767: LD_VAR 0 1
55771: NOT
55772: PUSH
55773: LD_VAR 0 2
55777: NOT
55778: OR
55779: IFFALSE 55783
// exit ;
55781: GO 56014
// if factoryWaypoints >= factory then
55783: LD_EXP 94
55787: PUSH
55788: LD_VAR 0 2
55792: GREATEREQUAL
55793: IFFALSE 56014
// if factoryWaypoints [ factory ] then
55795: LD_EXP 94
55799: PUSH
55800: LD_VAR 0 2
55804: ARRAY
55805: IFFALSE 56014
// begin if GetControl ( vehicle ) = control_manual then
55807: LD_VAR 0 1
55811: PPUSH
55812: CALL_OW 263
55816: PUSH
55817: LD_INT 1
55819: EQUAL
55820: IFFALSE 55901
// begin driver := IsDrivenBy ( vehicle ) ;
55822: LD_ADDR_VAR 0 4
55826: PUSH
55827: LD_VAR 0 1
55831: PPUSH
55832: CALL_OW 311
55836: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55837: LD_VAR 0 4
55841: PPUSH
55842: LD_EXP 94
55846: PUSH
55847: LD_VAR 0 2
55851: ARRAY
55852: PUSH
55853: LD_INT 3
55855: ARRAY
55856: PPUSH
55857: LD_EXP 94
55861: PUSH
55862: LD_VAR 0 2
55866: ARRAY
55867: PUSH
55868: LD_INT 4
55870: ARRAY
55871: PPUSH
55872: CALL_OW 171
// AddComExitVehicle ( driver ) ;
55876: LD_VAR 0 4
55880: PPUSH
55881: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
55885: LD_VAR 0 4
55889: PPUSH
55890: LD_VAR 0 2
55894: PPUSH
55895: CALL_OW 180
// end else
55899: GO 56014
// if GetControl ( vehicle ) = control_remote then
55901: LD_VAR 0 1
55905: PPUSH
55906: CALL_OW 263
55910: PUSH
55911: LD_INT 2
55913: EQUAL
55914: IFFALSE 55975
// begin wait ( 0 0$2 ) ;
55916: LD_INT 70
55918: PPUSH
55919: CALL_OW 67
// if Connect ( vehicle ) then
55923: LD_VAR 0 1
55927: PPUSH
55928: CALL 8742 0 1
55932: IFFALSE 55973
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55934: LD_VAR 0 1
55938: PPUSH
55939: LD_EXP 94
55943: PUSH
55944: LD_VAR 0 2
55948: ARRAY
55949: PUSH
55950: LD_INT 3
55952: ARRAY
55953: PPUSH
55954: LD_EXP 94
55958: PUSH
55959: LD_VAR 0 2
55963: ARRAY
55964: PUSH
55965: LD_INT 4
55967: ARRAY
55968: PPUSH
55969: CALL_OW 171
// end else
55973: GO 56014
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
55975: LD_VAR 0 1
55979: PPUSH
55980: LD_EXP 94
55984: PUSH
55985: LD_VAR 0 2
55989: ARRAY
55990: PUSH
55991: LD_INT 3
55993: ARRAY
55994: PPUSH
55995: LD_EXP 94
55999: PUSH
56000: LD_VAR 0 2
56004: ARRAY
56005: PUSH
56006: LD_INT 4
56008: ARRAY
56009: PPUSH
56010: CALL_OW 171
// end ; end ;
56014: LD_VAR 0 3
56018: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56019: LD_INT 0
56021: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56022: LD_VAR 0 1
56026: PUSH
56027: LD_INT 250
56029: EQUAL
56030: PUSH
56031: LD_VAR 0 2
56035: PPUSH
56036: CALL_OW 264
56040: PUSH
56041: LD_EXP 23
56045: EQUAL
56046: AND
56047: IFFALSE 56068
// MinerPlaceMine ( unit , x , y ) ;
56049: LD_VAR 0 2
56053: PPUSH
56054: LD_VAR 0 4
56058: PPUSH
56059: LD_VAR 0 5
56063: PPUSH
56064: CALL 58796 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56068: LD_VAR 0 1
56072: PUSH
56073: LD_INT 251
56075: EQUAL
56076: PUSH
56077: LD_VAR 0 2
56081: PPUSH
56082: CALL_OW 264
56086: PUSH
56087: LD_EXP 23
56091: EQUAL
56092: AND
56093: IFFALSE 56114
// MinerDetonateMine ( unit , x , y ) ;
56095: LD_VAR 0 2
56099: PPUSH
56100: LD_VAR 0 4
56104: PPUSH
56105: LD_VAR 0 5
56109: PPUSH
56110: CALL 59073 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56114: LD_VAR 0 1
56118: PUSH
56119: LD_INT 252
56121: EQUAL
56122: PUSH
56123: LD_VAR 0 2
56127: PPUSH
56128: CALL_OW 264
56132: PUSH
56133: LD_EXP 23
56137: EQUAL
56138: AND
56139: IFFALSE 56160
// MinerCreateMinefield ( unit , x , y ) ;
56141: LD_VAR 0 2
56145: PPUSH
56146: LD_VAR 0 4
56150: PPUSH
56151: LD_VAR 0 5
56155: PPUSH
56156: CALL 59490 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56160: LD_VAR 0 1
56164: PUSH
56165: LD_INT 253
56167: EQUAL
56168: PUSH
56169: LD_VAR 0 2
56173: PPUSH
56174: CALL_OW 257
56178: PUSH
56179: LD_INT 5
56181: EQUAL
56182: AND
56183: IFFALSE 56204
// ComBinocular ( unit , x , y ) ;
56185: LD_VAR 0 2
56189: PPUSH
56190: LD_VAR 0 4
56194: PPUSH
56195: LD_VAR 0 5
56199: PPUSH
56200: CALL 59861 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56204: LD_VAR 0 1
56208: PUSH
56209: LD_INT 254
56211: EQUAL
56212: PUSH
56213: LD_VAR 0 2
56217: PPUSH
56218: CALL_OW 264
56222: PUSH
56223: LD_EXP 18
56227: EQUAL
56228: AND
56229: PUSH
56230: LD_VAR 0 3
56234: PPUSH
56235: CALL_OW 263
56239: PUSH
56240: LD_INT 3
56242: EQUAL
56243: AND
56244: IFFALSE 56260
// HackDestroyVehicle ( unit , selectedUnit ) ;
56246: LD_VAR 0 2
56250: PPUSH
56251: LD_VAR 0 3
56255: PPUSH
56256: CALL 58156 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56260: LD_VAR 0 1
56264: PUSH
56265: LD_INT 255
56267: EQUAL
56268: PUSH
56269: LD_VAR 0 2
56273: PPUSH
56274: CALL_OW 264
56278: PUSH
56279: LD_INT 14
56281: PUSH
56282: LD_INT 53
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: IN
56289: AND
56290: PUSH
56291: LD_VAR 0 4
56295: PPUSH
56296: LD_VAR 0 5
56300: PPUSH
56301: CALL_OW 488
56305: AND
56306: IFFALSE 56330
// CutTreeXYR ( unit , x , y , 12 ) ;
56308: LD_VAR 0 2
56312: PPUSH
56313: LD_VAR 0 4
56317: PPUSH
56318: LD_VAR 0 5
56322: PPUSH
56323: LD_INT 12
56325: PPUSH
56326: CALL 56722 0 4
// if cmd = 256 then
56330: LD_VAR 0 1
56334: PUSH
56335: LD_INT 256
56337: EQUAL
56338: IFFALSE 56359
// SetFactoryWaypoint ( unit , x , y ) ;
56340: LD_VAR 0 2
56344: PPUSH
56345: LD_VAR 0 4
56349: PPUSH
56350: LD_VAR 0 5
56354: PPUSH
56355: CALL 56364 0 3
// end ;
56359: LD_VAR 0 6
56363: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
56364: LD_INT 0
56366: PPUSH
56367: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
56368: LD_VAR 0 1
56372: NOT
56373: PUSH
56374: LD_VAR 0 2
56378: PPUSH
56379: LD_VAR 0 3
56383: PPUSH
56384: CALL_OW 488
56388: NOT
56389: OR
56390: PUSH
56391: LD_VAR 0 1
56395: PPUSH
56396: CALL_OW 266
56400: PUSH
56401: LD_INT 3
56403: NONEQUAL
56404: PUSH
56405: LD_VAR 0 1
56409: PPUSH
56410: CALL_OW 247
56414: PUSH
56415: LD_INT 1
56417: EQUAL
56418: NOT
56419: AND
56420: OR
56421: IFFALSE 56425
// exit ;
56423: GO 56574
// if GetType ( factory ) = unit_human then
56425: LD_VAR 0 1
56429: PPUSH
56430: CALL_OW 247
56434: PUSH
56435: LD_INT 1
56437: EQUAL
56438: IFFALSE 56455
// factory := IsInUnit ( factory ) ;
56440: LD_ADDR_VAR 0 1
56444: PUSH
56445: LD_VAR 0 1
56449: PPUSH
56450: CALL_OW 310
56454: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
56455: LD_VAR 0 1
56459: PPUSH
56460: CALL_OW 266
56464: PUSH
56465: LD_INT 3
56467: NONEQUAL
56468: IFFALSE 56472
// exit ;
56470: GO 56574
// if HexInfo ( x , y ) = factory then
56472: LD_VAR 0 2
56476: PPUSH
56477: LD_VAR 0 3
56481: PPUSH
56482: CALL_OW 428
56486: PUSH
56487: LD_VAR 0 1
56491: EQUAL
56492: IFFALSE 56519
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
56494: LD_ADDR_EXP 94
56498: PUSH
56499: LD_EXP 94
56503: PPUSH
56504: LD_VAR 0 1
56508: PPUSH
56509: LD_INT 0
56511: PPUSH
56512: CALL_OW 1
56516: ST_TO_ADDR
56517: GO 56570
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
56519: LD_ADDR_EXP 94
56523: PUSH
56524: LD_EXP 94
56528: PPUSH
56529: LD_VAR 0 1
56533: PPUSH
56534: LD_VAR 0 1
56538: PPUSH
56539: CALL_OW 255
56543: PUSH
56544: LD_VAR 0 1
56548: PUSH
56549: LD_VAR 0 2
56553: PUSH
56554: LD_VAR 0 3
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: PPUSH
56565: CALL_OW 1
56569: ST_TO_ADDR
// UpdateFactoryWaypoints ;
56570: CALL 56579 0 0
// end ;
56574: LD_VAR 0 4
56578: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
56579: LD_INT 0
56581: PPUSH
56582: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
56583: LD_STRING resetFactoryWaypoint();
56585: PPUSH
56586: CALL_OW 559
// if factoryWaypoints then
56590: LD_EXP 94
56594: IFFALSE 56717
// begin for i := 1 to factoryWaypoints do
56596: LD_ADDR_VAR 0 2
56600: PUSH
56601: DOUBLE
56602: LD_INT 1
56604: DEC
56605: ST_TO_ADDR
56606: LD_EXP 94
56610: PUSH
56611: FOR_TO
56612: IFFALSE 56715
// if factoryWaypoints [ i ] then
56614: LD_EXP 94
56618: PUSH
56619: LD_VAR 0 2
56623: ARRAY
56624: IFFALSE 56713
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
56626: LD_STRING setFactoryWaypointXY(
56628: PUSH
56629: LD_EXP 94
56633: PUSH
56634: LD_VAR 0 2
56638: ARRAY
56639: PUSH
56640: LD_INT 1
56642: ARRAY
56643: STR
56644: PUSH
56645: LD_STRING ,
56647: STR
56648: PUSH
56649: LD_EXP 94
56653: PUSH
56654: LD_VAR 0 2
56658: ARRAY
56659: PUSH
56660: LD_INT 2
56662: ARRAY
56663: STR
56664: PUSH
56665: LD_STRING ,
56667: STR
56668: PUSH
56669: LD_EXP 94
56673: PUSH
56674: LD_VAR 0 2
56678: ARRAY
56679: PUSH
56680: LD_INT 3
56682: ARRAY
56683: STR
56684: PUSH
56685: LD_STRING ,
56687: STR
56688: PUSH
56689: LD_EXP 94
56693: PUSH
56694: LD_VAR 0 2
56698: ARRAY
56699: PUSH
56700: LD_INT 4
56702: ARRAY
56703: STR
56704: PUSH
56705: LD_STRING )
56707: STR
56708: PPUSH
56709: CALL_OW 559
56713: GO 56611
56715: POP
56716: POP
// end ; end ;
56717: LD_VAR 0 1
56721: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56722: LD_INT 0
56724: PPUSH
56725: PPUSH
56726: PPUSH
56727: PPUSH
56728: PPUSH
56729: PPUSH
56730: PPUSH
56731: PPUSH
56732: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
56733: LD_VAR 0 1
56737: NOT
56738: PUSH
56739: LD_VAR 0 2
56743: PPUSH
56744: LD_VAR 0 3
56748: PPUSH
56749: CALL_OW 488
56753: NOT
56754: OR
56755: PUSH
56756: LD_VAR 0 4
56760: NOT
56761: OR
56762: IFFALSE 56766
// exit ;
56764: GO 57106
// list := [ ] ;
56766: LD_ADDR_VAR 0 13
56770: PUSH
56771: EMPTY
56772: ST_TO_ADDR
// if x - r < 0 then
56773: LD_VAR 0 2
56777: PUSH
56778: LD_VAR 0 4
56782: MINUS
56783: PUSH
56784: LD_INT 0
56786: LESS
56787: IFFALSE 56799
// min_x := 0 else
56789: LD_ADDR_VAR 0 7
56793: PUSH
56794: LD_INT 0
56796: ST_TO_ADDR
56797: GO 56815
// min_x := x - r ;
56799: LD_ADDR_VAR 0 7
56803: PUSH
56804: LD_VAR 0 2
56808: PUSH
56809: LD_VAR 0 4
56813: MINUS
56814: ST_TO_ADDR
// if y - r < 0 then
56815: LD_VAR 0 3
56819: PUSH
56820: LD_VAR 0 4
56824: MINUS
56825: PUSH
56826: LD_INT 0
56828: LESS
56829: IFFALSE 56841
// min_y := 0 else
56831: LD_ADDR_VAR 0 8
56835: PUSH
56836: LD_INT 0
56838: ST_TO_ADDR
56839: GO 56857
// min_y := y - r ;
56841: LD_ADDR_VAR 0 8
56845: PUSH
56846: LD_VAR 0 3
56850: PUSH
56851: LD_VAR 0 4
56855: MINUS
56856: ST_TO_ADDR
// max_x := x + r ;
56857: LD_ADDR_VAR 0 9
56861: PUSH
56862: LD_VAR 0 2
56866: PUSH
56867: LD_VAR 0 4
56871: PLUS
56872: ST_TO_ADDR
// max_y := y + r ;
56873: LD_ADDR_VAR 0 10
56877: PUSH
56878: LD_VAR 0 3
56882: PUSH
56883: LD_VAR 0 4
56887: PLUS
56888: ST_TO_ADDR
// for _x = min_x to max_x do
56889: LD_ADDR_VAR 0 11
56893: PUSH
56894: DOUBLE
56895: LD_VAR 0 7
56899: DEC
56900: ST_TO_ADDR
56901: LD_VAR 0 9
56905: PUSH
56906: FOR_TO
56907: IFFALSE 57024
// for _y = min_y to max_y do
56909: LD_ADDR_VAR 0 12
56913: PUSH
56914: DOUBLE
56915: LD_VAR 0 8
56919: DEC
56920: ST_TO_ADDR
56921: LD_VAR 0 10
56925: PUSH
56926: FOR_TO
56927: IFFALSE 57020
// begin if not ValidHex ( _x , _y ) then
56929: LD_VAR 0 11
56933: PPUSH
56934: LD_VAR 0 12
56938: PPUSH
56939: CALL_OW 488
56943: NOT
56944: IFFALSE 56948
// continue ;
56946: GO 56926
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
56948: LD_VAR 0 11
56952: PPUSH
56953: LD_VAR 0 12
56957: PPUSH
56958: CALL_OW 351
56962: PUSH
56963: LD_VAR 0 11
56967: PPUSH
56968: LD_VAR 0 12
56972: PPUSH
56973: CALL_OW 554
56977: AND
56978: IFFALSE 57018
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
56980: LD_ADDR_VAR 0 13
56984: PUSH
56985: LD_VAR 0 13
56989: PPUSH
56990: LD_VAR 0 13
56994: PUSH
56995: LD_INT 1
56997: PLUS
56998: PPUSH
56999: LD_VAR 0 11
57003: PUSH
57004: LD_VAR 0 12
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PPUSH
57013: CALL_OW 2
57017: ST_TO_ADDR
// end ;
57018: GO 56926
57020: POP
57021: POP
57022: GO 56906
57024: POP
57025: POP
// if not list then
57026: LD_VAR 0 13
57030: NOT
57031: IFFALSE 57035
// exit ;
57033: GO 57106
// for i in list do
57035: LD_ADDR_VAR 0 6
57039: PUSH
57040: LD_VAR 0 13
57044: PUSH
57045: FOR_IN
57046: IFFALSE 57104
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57048: LD_VAR 0 1
57052: PPUSH
57053: LD_STRING M
57055: PUSH
57056: LD_VAR 0 6
57060: PUSH
57061: LD_INT 1
57063: ARRAY
57064: PUSH
57065: LD_VAR 0 6
57069: PUSH
57070: LD_INT 2
57072: ARRAY
57073: PUSH
57074: LD_INT 0
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: PUSH
57095: EMPTY
57096: LIST
57097: PPUSH
57098: CALL_OW 447
57102: GO 57045
57104: POP
57105: POP
// end ;
57106: LD_VAR 0 5
57110: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57111: LD_EXP 95
57115: NOT
57116: IFFALSE 57166
57118: GO 57120
57120: DISABLE
// begin initHack := true ;
57121: LD_ADDR_EXP 95
57125: PUSH
57126: LD_INT 1
57128: ST_TO_ADDR
// hackTanks := [ ] ;
57129: LD_ADDR_EXP 96
57133: PUSH
57134: EMPTY
57135: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57136: LD_ADDR_EXP 97
57140: PUSH
57141: EMPTY
57142: ST_TO_ADDR
// hackLimit := 3 ;
57143: LD_ADDR_EXP 98
57147: PUSH
57148: LD_INT 3
57150: ST_TO_ADDR
// hackDist := 12 ;
57151: LD_ADDR_EXP 99
57155: PUSH
57156: LD_INT 12
57158: ST_TO_ADDR
// hackCounter := [ ] ;
57159: LD_ADDR_EXP 100
57163: PUSH
57164: EMPTY
57165: ST_TO_ADDR
// end ;
57166: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57167: LD_EXP 95
57171: PUSH
57172: LD_INT 34
57174: PUSH
57175: LD_EXP 18
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PPUSH
57184: CALL_OW 69
57188: AND
57189: IFFALSE 57444
57191: GO 57193
57193: DISABLE
57194: LD_INT 0
57196: PPUSH
57197: PPUSH
// begin enable ;
57198: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57199: LD_ADDR_VAR 0 1
57203: PUSH
57204: LD_INT 34
57206: PUSH
57207: LD_EXP 18
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PPUSH
57216: CALL_OW 69
57220: PUSH
57221: FOR_IN
57222: IFFALSE 57442
// begin if not i in hackTanks then
57224: LD_VAR 0 1
57228: PUSH
57229: LD_EXP 96
57233: IN
57234: NOT
57235: IFFALSE 57318
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57237: LD_ADDR_EXP 96
57241: PUSH
57242: LD_EXP 96
57246: PPUSH
57247: LD_EXP 96
57251: PUSH
57252: LD_INT 1
57254: PLUS
57255: PPUSH
57256: LD_VAR 0 1
57260: PPUSH
57261: CALL_OW 1
57265: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57266: LD_ADDR_EXP 97
57270: PUSH
57271: LD_EXP 97
57275: PPUSH
57276: LD_EXP 97
57280: PUSH
57281: LD_INT 1
57283: PLUS
57284: PPUSH
57285: EMPTY
57286: PPUSH
57287: CALL_OW 1
57291: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57292: LD_ADDR_EXP 100
57296: PUSH
57297: LD_EXP 100
57301: PPUSH
57302: LD_EXP 100
57306: PUSH
57307: LD_INT 1
57309: PLUS
57310: PPUSH
57311: EMPTY
57312: PPUSH
57313: CALL_OW 1
57317: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57318: LD_VAR 0 1
57322: PPUSH
57323: CALL_OW 302
57327: NOT
57328: IFFALSE 57341
// begin HackUnlinkAll ( i ) ;
57330: LD_VAR 0 1
57334: PPUSH
57335: CALL 57447 0 1
// continue ;
57339: GO 57221
// end ; HackCheckCapturedStatus ( i ) ;
57341: LD_VAR 0 1
57345: PPUSH
57346: CALL 57890 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57350: LD_ADDR_VAR 0 2
57354: PUSH
57355: LD_INT 81
57357: PUSH
57358: LD_VAR 0 1
57362: PPUSH
57363: CALL_OW 255
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 33
57374: PUSH
57375: LD_INT 3
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 91
57384: PUSH
57385: LD_VAR 0 1
57389: PUSH
57390: LD_EXP 99
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 50
57402: PUSH
57403: EMPTY
57404: LIST
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: PPUSH
57412: CALL_OW 69
57416: ST_TO_ADDR
// if not tmp then
57417: LD_VAR 0 2
57421: NOT
57422: IFFALSE 57426
// continue ;
57424: GO 57221
// HackLink ( i , tmp ) ;
57426: LD_VAR 0 1
57430: PPUSH
57431: LD_VAR 0 2
57435: PPUSH
57436: CALL 57583 0 2
// end ;
57440: GO 57221
57442: POP
57443: POP
// end ;
57444: PPOPN 2
57446: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
57447: LD_INT 0
57449: PPUSH
57450: PPUSH
57451: PPUSH
// if not hack in hackTanks then
57452: LD_VAR 0 1
57456: PUSH
57457: LD_EXP 96
57461: IN
57462: NOT
57463: IFFALSE 57467
// exit ;
57465: GO 57578
// index := GetElementIndex ( hackTanks , hack ) ;
57467: LD_ADDR_VAR 0 4
57471: PUSH
57472: LD_EXP 96
57476: PPUSH
57477: LD_VAR 0 1
57481: PPUSH
57482: CALL 5556 0 2
57486: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
57487: LD_EXP 97
57491: PUSH
57492: LD_VAR 0 4
57496: ARRAY
57497: IFFALSE 57578
// begin for i in hackTanksCaptured [ index ] do
57499: LD_ADDR_VAR 0 3
57503: PUSH
57504: LD_EXP 97
57508: PUSH
57509: LD_VAR 0 4
57513: ARRAY
57514: PUSH
57515: FOR_IN
57516: IFFALSE 57542
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
57518: LD_VAR 0 3
57522: PUSH
57523: LD_INT 1
57525: ARRAY
57526: PPUSH
57527: LD_VAR 0 3
57531: PUSH
57532: LD_INT 2
57534: ARRAY
57535: PPUSH
57536: CALL_OW 235
57540: GO 57515
57542: POP
57543: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
57544: LD_ADDR_EXP 97
57548: PUSH
57549: LD_EXP 97
57553: PPUSH
57554: LD_VAR 0 4
57558: PPUSH
57559: EMPTY
57560: PPUSH
57561: CALL_OW 1
57565: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
57566: LD_VAR 0 1
57570: PPUSH
57571: LD_INT 0
57573: PPUSH
57574: CALL_OW 505
// end ; end ;
57578: LD_VAR 0 2
57582: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
57583: LD_INT 0
57585: PPUSH
57586: PPUSH
57587: PPUSH
// if not hack in hackTanks or not vehicles then
57588: LD_VAR 0 1
57592: PUSH
57593: LD_EXP 96
57597: IN
57598: NOT
57599: PUSH
57600: LD_VAR 0 2
57604: NOT
57605: OR
57606: IFFALSE 57610
// exit ;
57608: GO 57885
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
57610: LD_ADDR_VAR 0 2
57614: PUSH
57615: LD_VAR 0 1
57619: PPUSH
57620: LD_VAR 0 2
57624: PPUSH
57625: LD_INT 1
57627: PPUSH
57628: LD_INT 1
57630: PPUSH
57631: CALL 6206 0 4
57635: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
57636: LD_ADDR_VAR 0 5
57640: PUSH
57641: LD_EXP 96
57645: PPUSH
57646: LD_VAR 0 1
57650: PPUSH
57651: CALL 5556 0 2
57655: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
57656: LD_EXP 97
57660: PUSH
57661: LD_VAR 0 5
57665: ARRAY
57666: PUSH
57667: LD_EXP 98
57671: LESS
57672: IFFALSE 57861
// begin for i := 1 to vehicles do
57674: LD_ADDR_VAR 0 4
57678: PUSH
57679: DOUBLE
57680: LD_INT 1
57682: DEC
57683: ST_TO_ADDR
57684: LD_VAR 0 2
57688: PUSH
57689: FOR_TO
57690: IFFALSE 57859
// begin if hackTanksCaptured [ index ] = hackLimit then
57692: LD_EXP 97
57696: PUSH
57697: LD_VAR 0 5
57701: ARRAY
57702: PUSH
57703: LD_EXP 98
57707: EQUAL
57708: IFFALSE 57712
// break ;
57710: GO 57859
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
57712: LD_ADDR_EXP 100
57716: PUSH
57717: LD_EXP 100
57721: PPUSH
57722: LD_VAR 0 5
57726: PPUSH
57727: LD_EXP 100
57731: PUSH
57732: LD_VAR 0 5
57736: ARRAY
57737: PUSH
57738: LD_INT 1
57740: PLUS
57741: PPUSH
57742: CALL_OW 1
57746: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
57747: LD_ADDR_EXP 97
57751: PUSH
57752: LD_EXP 97
57756: PPUSH
57757: LD_VAR 0 5
57761: PUSH
57762: LD_EXP 97
57766: PUSH
57767: LD_VAR 0 5
57771: ARRAY
57772: PUSH
57773: LD_INT 1
57775: PLUS
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PPUSH
57781: LD_VAR 0 2
57785: PUSH
57786: LD_VAR 0 4
57790: ARRAY
57791: PUSH
57792: LD_VAR 0 2
57796: PUSH
57797: LD_VAR 0 4
57801: ARRAY
57802: PPUSH
57803: CALL_OW 255
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PPUSH
57812: CALL 5771 0 3
57816: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
57817: LD_VAR 0 2
57821: PUSH
57822: LD_VAR 0 4
57826: ARRAY
57827: PPUSH
57828: LD_VAR 0 1
57832: PPUSH
57833: CALL_OW 255
57837: PPUSH
57838: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
57842: LD_VAR 0 2
57846: PUSH
57847: LD_VAR 0 4
57851: ARRAY
57852: PPUSH
57853: CALL_OW 141
// end ;
57857: GO 57689
57859: POP
57860: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
57861: LD_VAR 0 1
57865: PPUSH
57866: LD_EXP 97
57870: PUSH
57871: LD_VAR 0 5
57875: ARRAY
57876: PUSH
57877: LD_INT 0
57879: PLUS
57880: PPUSH
57881: CALL_OW 505
// end ;
57885: LD_VAR 0 3
57889: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
57890: LD_INT 0
57892: PPUSH
57893: PPUSH
57894: PPUSH
57895: PPUSH
// if not hack in hackTanks then
57896: LD_VAR 0 1
57900: PUSH
57901: LD_EXP 96
57905: IN
57906: NOT
57907: IFFALSE 57911
// exit ;
57909: GO 58151
// index := GetElementIndex ( hackTanks , hack ) ;
57911: LD_ADDR_VAR 0 4
57915: PUSH
57916: LD_EXP 96
57920: PPUSH
57921: LD_VAR 0 1
57925: PPUSH
57926: CALL 5556 0 2
57930: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
57931: LD_ADDR_VAR 0 3
57935: PUSH
57936: DOUBLE
57937: LD_EXP 97
57941: PUSH
57942: LD_VAR 0 4
57946: ARRAY
57947: INC
57948: ST_TO_ADDR
57949: LD_INT 1
57951: PUSH
57952: FOR_DOWNTO
57953: IFFALSE 58125
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
57955: LD_ADDR_VAR 0 5
57959: PUSH
57960: LD_EXP 97
57964: PUSH
57965: LD_VAR 0 4
57969: ARRAY
57970: PUSH
57971: LD_VAR 0 3
57975: ARRAY
57976: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
57977: LD_VAR 0 5
57981: PUSH
57982: LD_INT 1
57984: ARRAY
57985: PPUSH
57986: CALL_OW 302
57990: NOT
57991: PUSH
57992: LD_VAR 0 5
57996: PUSH
57997: LD_INT 1
57999: ARRAY
58000: PPUSH
58001: CALL_OW 255
58005: PUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL_OW 255
58015: NONEQUAL
58016: OR
58017: IFFALSE 58123
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58019: LD_VAR 0 5
58023: PUSH
58024: LD_INT 1
58026: ARRAY
58027: PPUSH
58028: CALL_OW 305
58032: PUSH
58033: LD_VAR 0 5
58037: PUSH
58038: LD_INT 1
58040: ARRAY
58041: PPUSH
58042: CALL_OW 255
58046: PUSH
58047: LD_VAR 0 1
58051: PPUSH
58052: CALL_OW 255
58056: EQUAL
58057: AND
58058: IFFALSE 58082
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58060: LD_VAR 0 5
58064: PUSH
58065: LD_INT 1
58067: ARRAY
58068: PPUSH
58069: LD_VAR 0 5
58073: PUSH
58074: LD_INT 2
58076: ARRAY
58077: PPUSH
58078: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58082: LD_ADDR_EXP 97
58086: PUSH
58087: LD_EXP 97
58091: PPUSH
58092: LD_VAR 0 4
58096: PPUSH
58097: LD_EXP 97
58101: PUSH
58102: LD_VAR 0 4
58106: ARRAY
58107: PPUSH
58108: LD_VAR 0 3
58112: PPUSH
58113: CALL_OW 3
58117: PPUSH
58118: CALL_OW 1
58122: ST_TO_ADDR
// end ; end ;
58123: GO 57952
58125: POP
58126: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58127: LD_VAR 0 1
58131: PPUSH
58132: LD_EXP 97
58136: PUSH
58137: LD_VAR 0 4
58141: ARRAY
58142: PUSH
58143: LD_INT 0
58145: PLUS
58146: PPUSH
58147: CALL_OW 505
// end ;
58151: LD_VAR 0 2
58155: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58156: LD_INT 0
58158: PPUSH
58159: PPUSH
58160: PPUSH
58161: PPUSH
// if not hack in hackTanks then
58162: LD_VAR 0 1
58166: PUSH
58167: LD_EXP 96
58171: IN
58172: NOT
58173: IFFALSE 58177
// exit ;
58175: GO 58262
// index := GetElementIndex ( hackTanks , hack ) ;
58177: LD_ADDR_VAR 0 5
58181: PUSH
58182: LD_EXP 96
58186: PPUSH
58187: LD_VAR 0 1
58191: PPUSH
58192: CALL 5556 0 2
58196: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58197: LD_ADDR_VAR 0 4
58201: PUSH
58202: DOUBLE
58203: LD_INT 1
58205: DEC
58206: ST_TO_ADDR
58207: LD_EXP 97
58211: PUSH
58212: LD_VAR 0 5
58216: ARRAY
58217: PUSH
58218: FOR_TO
58219: IFFALSE 58260
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58221: LD_EXP 97
58225: PUSH
58226: LD_VAR 0 5
58230: ARRAY
58231: PUSH
58232: LD_VAR 0 4
58236: ARRAY
58237: PUSH
58238: LD_INT 1
58240: ARRAY
58241: PUSH
58242: LD_VAR 0 2
58246: EQUAL
58247: IFFALSE 58258
// KillUnit ( vehicle ) ;
58249: LD_VAR 0 2
58253: PPUSH
58254: CALL_OW 66
58258: GO 58218
58260: POP
58261: POP
// end ;
58262: LD_VAR 0 3
58266: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58267: LD_EXP 101
58271: NOT
58272: IFFALSE 58307
58274: GO 58276
58276: DISABLE
// begin initMiner := true ;
58277: LD_ADDR_EXP 101
58281: PUSH
58282: LD_INT 1
58284: ST_TO_ADDR
// minersList := [ ] ;
58285: LD_ADDR_EXP 102
58289: PUSH
58290: EMPTY
58291: ST_TO_ADDR
// minerMinesList := [ ] ;
58292: LD_ADDR_EXP 103
58296: PUSH
58297: EMPTY
58298: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58299: LD_ADDR_EXP 104
58303: PUSH
58304: LD_INT 5
58306: ST_TO_ADDR
// end ;
58307: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58308: LD_EXP 101
58312: PUSH
58313: LD_INT 34
58315: PUSH
58316: LD_EXP 23
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PPUSH
58325: CALL_OW 69
58329: AND
58330: IFFALSE 58793
58332: GO 58334
58334: DISABLE
58335: LD_INT 0
58337: PPUSH
58338: PPUSH
58339: PPUSH
58340: PPUSH
// begin enable ;
58341: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58342: LD_ADDR_VAR 0 1
58346: PUSH
58347: LD_INT 34
58349: PUSH
58350: LD_EXP 23
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PPUSH
58359: CALL_OW 69
58363: PUSH
58364: FOR_IN
58365: IFFALSE 58437
// begin if not i in minersList then
58367: LD_VAR 0 1
58371: PUSH
58372: LD_EXP 102
58376: IN
58377: NOT
58378: IFFALSE 58435
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
58380: LD_ADDR_EXP 102
58384: PUSH
58385: LD_EXP 102
58389: PPUSH
58390: LD_EXP 102
58394: PUSH
58395: LD_INT 1
58397: PLUS
58398: PPUSH
58399: LD_VAR 0 1
58403: PPUSH
58404: CALL_OW 1
58408: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
58409: LD_ADDR_EXP 103
58413: PUSH
58414: LD_EXP 103
58418: PPUSH
58419: LD_EXP 103
58423: PUSH
58424: LD_INT 1
58426: PLUS
58427: PPUSH
58428: EMPTY
58429: PPUSH
58430: CALL_OW 1
58434: ST_TO_ADDR
// end end ;
58435: GO 58364
58437: POP
58438: POP
// for i := minerMinesList downto 1 do
58439: LD_ADDR_VAR 0 1
58443: PUSH
58444: DOUBLE
58445: LD_EXP 103
58449: INC
58450: ST_TO_ADDR
58451: LD_INT 1
58453: PUSH
58454: FOR_DOWNTO
58455: IFFALSE 58791
// begin if IsLive ( minersList [ i ] ) then
58457: LD_EXP 102
58461: PUSH
58462: LD_VAR 0 1
58466: ARRAY
58467: PPUSH
58468: CALL_OW 300
58472: IFFALSE 58500
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
58474: LD_EXP 102
58478: PUSH
58479: LD_VAR 0 1
58483: ARRAY
58484: PPUSH
58485: LD_EXP 103
58489: PUSH
58490: LD_VAR 0 1
58494: ARRAY
58495: PPUSH
58496: CALL_OW 505
// if not minerMinesList [ i ] then
58500: LD_EXP 103
58504: PUSH
58505: LD_VAR 0 1
58509: ARRAY
58510: NOT
58511: IFFALSE 58515
// continue ;
58513: GO 58454
// for j := minerMinesList [ i ] downto 1 do
58515: LD_ADDR_VAR 0 2
58519: PUSH
58520: DOUBLE
58521: LD_EXP 103
58525: PUSH
58526: LD_VAR 0 1
58530: ARRAY
58531: INC
58532: ST_TO_ADDR
58533: LD_INT 1
58535: PUSH
58536: FOR_DOWNTO
58537: IFFALSE 58787
// begin side := GetSide ( minersList [ i ] ) ;
58539: LD_ADDR_VAR 0 3
58543: PUSH
58544: LD_EXP 102
58548: PUSH
58549: LD_VAR 0 1
58553: ARRAY
58554: PPUSH
58555: CALL_OW 255
58559: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
58560: LD_ADDR_VAR 0 4
58564: PUSH
58565: LD_EXP 103
58569: PUSH
58570: LD_VAR 0 1
58574: ARRAY
58575: PUSH
58576: LD_VAR 0 2
58580: ARRAY
58581: PUSH
58582: LD_INT 1
58584: ARRAY
58585: PPUSH
58586: LD_EXP 103
58590: PUSH
58591: LD_VAR 0 1
58595: ARRAY
58596: PUSH
58597: LD_VAR 0 2
58601: ARRAY
58602: PUSH
58603: LD_INT 2
58605: ARRAY
58606: PPUSH
58607: CALL_OW 428
58611: ST_TO_ADDR
// if not tmp then
58612: LD_VAR 0 4
58616: NOT
58617: IFFALSE 58621
// continue ;
58619: GO 58536
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
58621: LD_VAR 0 4
58625: PUSH
58626: LD_INT 81
58628: PUSH
58629: LD_VAR 0 3
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PPUSH
58638: CALL_OW 69
58642: IN
58643: PUSH
58644: LD_EXP 103
58648: PUSH
58649: LD_VAR 0 1
58653: ARRAY
58654: PUSH
58655: LD_VAR 0 2
58659: ARRAY
58660: PUSH
58661: LD_INT 1
58663: ARRAY
58664: PPUSH
58665: LD_EXP 103
58669: PUSH
58670: LD_VAR 0 1
58674: ARRAY
58675: PUSH
58676: LD_VAR 0 2
58680: ARRAY
58681: PUSH
58682: LD_INT 2
58684: ARRAY
58685: PPUSH
58686: CALL_OW 458
58690: AND
58691: IFFALSE 58785
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
58693: LD_EXP 103
58697: PUSH
58698: LD_VAR 0 1
58702: ARRAY
58703: PUSH
58704: LD_VAR 0 2
58708: ARRAY
58709: PUSH
58710: LD_INT 1
58712: ARRAY
58713: PPUSH
58714: LD_EXP 103
58718: PUSH
58719: LD_VAR 0 1
58723: ARRAY
58724: PUSH
58725: LD_VAR 0 2
58729: ARRAY
58730: PUSH
58731: LD_INT 2
58733: ARRAY
58734: PPUSH
58735: LD_VAR 0 3
58739: PPUSH
58740: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
58744: LD_ADDR_EXP 103
58748: PUSH
58749: LD_EXP 103
58753: PPUSH
58754: LD_VAR 0 1
58758: PPUSH
58759: LD_EXP 103
58763: PUSH
58764: LD_VAR 0 1
58768: ARRAY
58769: PPUSH
58770: LD_VAR 0 2
58774: PPUSH
58775: CALL_OW 3
58779: PPUSH
58780: CALL_OW 1
58784: ST_TO_ADDR
// end ; end ;
58785: GO 58536
58787: POP
58788: POP
// end ;
58789: GO 58454
58791: POP
58792: POP
// end ;
58793: PPOPN 4
58795: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
58796: LD_INT 0
58798: PPUSH
58799: PPUSH
// result := false ;
58800: LD_ADDR_VAR 0 4
58804: PUSH
58805: LD_INT 0
58807: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
58808: LD_VAR 0 1
58812: PPUSH
58813: CALL_OW 264
58817: PUSH
58818: LD_EXP 23
58822: EQUAL
58823: NOT
58824: IFFALSE 58828
// exit ;
58826: GO 59068
// index := GetElementIndex ( minersList , unit ) ;
58828: LD_ADDR_VAR 0 5
58832: PUSH
58833: LD_EXP 102
58837: PPUSH
58838: LD_VAR 0 1
58842: PPUSH
58843: CALL 5556 0 2
58847: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
58848: LD_EXP 103
58852: PUSH
58853: LD_VAR 0 5
58857: ARRAY
58858: PUSH
58859: LD_EXP 104
58863: GREATEREQUAL
58864: IFFALSE 58868
// exit ;
58866: GO 59068
// ComMoveXY ( unit , x , y ) ;
58868: LD_VAR 0 1
58872: PPUSH
58873: LD_VAR 0 2
58877: PPUSH
58878: LD_VAR 0 3
58882: PPUSH
58883: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
58887: LD_INT 35
58889: PPUSH
58890: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
58894: LD_VAR 0 1
58898: PPUSH
58899: LD_VAR 0 2
58903: PPUSH
58904: LD_VAR 0 3
58908: PPUSH
58909: CALL 36275 0 3
58913: NOT
58914: PUSH
58915: LD_VAR 0 1
58919: PPUSH
58920: CALL_OW 314
58924: AND
58925: IFFALSE 58929
// exit ;
58927: GO 59068
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
58929: LD_VAR 0 2
58933: PPUSH
58934: LD_VAR 0 3
58938: PPUSH
58939: CALL_OW 428
58943: PUSH
58944: LD_VAR 0 1
58948: EQUAL
58949: PUSH
58950: LD_VAR 0 1
58954: PPUSH
58955: CALL_OW 314
58959: NOT
58960: AND
58961: IFFALSE 58887
// PlaySoundXY ( x , y , PlantMine ) ;
58963: LD_VAR 0 2
58967: PPUSH
58968: LD_VAR 0 3
58972: PPUSH
58973: LD_STRING PlantMine
58975: PPUSH
58976: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
58980: LD_VAR 0 2
58984: PPUSH
58985: LD_VAR 0 3
58989: PPUSH
58990: LD_VAR 0 1
58994: PPUSH
58995: CALL_OW 255
58999: PPUSH
59000: LD_INT 0
59002: PPUSH
59003: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59007: LD_ADDR_EXP 103
59011: PUSH
59012: LD_EXP 103
59016: PPUSH
59017: LD_VAR 0 5
59021: PUSH
59022: LD_EXP 103
59026: PUSH
59027: LD_VAR 0 5
59031: ARRAY
59032: PUSH
59033: LD_INT 1
59035: PLUS
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PPUSH
59041: LD_VAR 0 2
59045: PUSH
59046: LD_VAR 0 3
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PPUSH
59055: CALL 5771 0 3
59059: ST_TO_ADDR
// result := true ;
59060: LD_ADDR_VAR 0 4
59064: PUSH
59065: LD_INT 1
59067: ST_TO_ADDR
// end ;
59068: LD_VAR 0 4
59072: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59073: LD_INT 0
59075: PPUSH
59076: PPUSH
59077: PPUSH
// if not unit in minersList then
59078: LD_VAR 0 1
59082: PUSH
59083: LD_EXP 102
59087: IN
59088: NOT
59089: IFFALSE 59093
// exit ;
59091: GO 59485
// index := GetElementIndex ( minersList , unit ) ;
59093: LD_ADDR_VAR 0 6
59097: PUSH
59098: LD_EXP 102
59102: PPUSH
59103: LD_VAR 0 1
59107: PPUSH
59108: CALL 5556 0 2
59112: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59113: LD_ADDR_VAR 0 5
59117: PUSH
59118: DOUBLE
59119: LD_EXP 103
59123: PUSH
59124: LD_VAR 0 6
59128: ARRAY
59129: INC
59130: ST_TO_ADDR
59131: LD_INT 1
59133: PUSH
59134: FOR_DOWNTO
59135: IFFALSE 59296
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59137: LD_EXP 103
59141: PUSH
59142: LD_VAR 0 6
59146: ARRAY
59147: PUSH
59148: LD_VAR 0 5
59152: ARRAY
59153: PUSH
59154: LD_INT 1
59156: ARRAY
59157: PUSH
59158: LD_VAR 0 2
59162: EQUAL
59163: PUSH
59164: LD_EXP 103
59168: PUSH
59169: LD_VAR 0 6
59173: ARRAY
59174: PUSH
59175: LD_VAR 0 5
59179: ARRAY
59180: PUSH
59181: LD_INT 2
59183: ARRAY
59184: PUSH
59185: LD_VAR 0 3
59189: EQUAL
59190: AND
59191: IFFALSE 59294
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59193: LD_EXP 103
59197: PUSH
59198: LD_VAR 0 6
59202: ARRAY
59203: PUSH
59204: LD_VAR 0 5
59208: ARRAY
59209: PUSH
59210: LD_INT 1
59212: ARRAY
59213: PPUSH
59214: LD_EXP 103
59218: PUSH
59219: LD_VAR 0 6
59223: ARRAY
59224: PUSH
59225: LD_VAR 0 5
59229: ARRAY
59230: PUSH
59231: LD_INT 2
59233: ARRAY
59234: PPUSH
59235: LD_VAR 0 1
59239: PPUSH
59240: CALL_OW 255
59244: PPUSH
59245: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59249: LD_ADDR_EXP 103
59253: PUSH
59254: LD_EXP 103
59258: PPUSH
59259: LD_VAR 0 6
59263: PPUSH
59264: LD_EXP 103
59268: PUSH
59269: LD_VAR 0 6
59273: ARRAY
59274: PPUSH
59275: LD_VAR 0 5
59279: PPUSH
59280: CALL_OW 3
59284: PPUSH
59285: CALL_OW 1
59289: ST_TO_ADDR
// exit ;
59290: POP
59291: POP
59292: GO 59485
// end ; end ;
59294: GO 59134
59296: POP
59297: POP
// for i := minerMinesList [ index ] downto 1 do
59298: LD_ADDR_VAR 0 5
59302: PUSH
59303: DOUBLE
59304: LD_EXP 103
59308: PUSH
59309: LD_VAR 0 6
59313: ARRAY
59314: INC
59315: ST_TO_ADDR
59316: LD_INT 1
59318: PUSH
59319: FOR_DOWNTO
59320: IFFALSE 59483
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59322: LD_EXP 103
59326: PUSH
59327: LD_VAR 0 6
59331: ARRAY
59332: PUSH
59333: LD_VAR 0 5
59337: ARRAY
59338: PUSH
59339: LD_INT 1
59341: ARRAY
59342: PPUSH
59343: LD_EXP 103
59347: PUSH
59348: LD_VAR 0 6
59352: ARRAY
59353: PUSH
59354: LD_VAR 0 5
59358: ARRAY
59359: PUSH
59360: LD_INT 2
59362: ARRAY
59363: PPUSH
59364: LD_VAR 0 2
59368: PPUSH
59369: LD_VAR 0 3
59373: PPUSH
59374: CALL_OW 298
59378: PUSH
59379: LD_INT 6
59381: LESS
59382: IFFALSE 59481
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59384: LD_EXP 103
59388: PUSH
59389: LD_VAR 0 6
59393: ARRAY
59394: PUSH
59395: LD_VAR 0 5
59399: ARRAY
59400: PUSH
59401: LD_INT 1
59403: ARRAY
59404: PPUSH
59405: LD_EXP 103
59409: PUSH
59410: LD_VAR 0 6
59414: ARRAY
59415: PUSH
59416: LD_VAR 0 5
59420: ARRAY
59421: PUSH
59422: LD_INT 2
59424: ARRAY
59425: PPUSH
59426: LD_VAR 0 1
59430: PPUSH
59431: CALL_OW 255
59435: PPUSH
59436: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59440: LD_ADDR_EXP 103
59444: PUSH
59445: LD_EXP 103
59449: PPUSH
59450: LD_VAR 0 6
59454: PPUSH
59455: LD_EXP 103
59459: PUSH
59460: LD_VAR 0 6
59464: ARRAY
59465: PPUSH
59466: LD_VAR 0 5
59470: PPUSH
59471: CALL_OW 3
59475: PPUSH
59476: CALL_OW 1
59480: ST_TO_ADDR
// end ; end ;
59481: GO 59319
59483: POP
59484: POP
// end ;
59485: LD_VAR 0 4
59489: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
59490: LD_INT 0
59492: PPUSH
59493: PPUSH
59494: PPUSH
59495: PPUSH
59496: PPUSH
59497: PPUSH
59498: PPUSH
59499: PPUSH
59500: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
59501: LD_VAR 0 1
59505: PPUSH
59506: CALL_OW 264
59510: PUSH
59511: LD_EXP 23
59515: EQUAL
59516: NOT
59517: PUSH
59518: LD_VAR 0 1
59522: PUSH
59523: LD_EXP 102
59527: IN
59528: NOT
59529: OR
59530: IFFALSE 59534
// exit ;
59532: GO 59856
// index := GetElementIndex ( minersList , unit ) ;
59534: LD_ADDR_VAR 0 6
59538: PUSH
59539: LD_EXP 102
59543: PPUSH
59544: LD_VAR 0 1
59548: PPUSH
59549: CALL 5556 0 2
59553: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
59554: LD_ADDR_VAR 0 8
59558: PUSH
59559: LD_EXP 104
59563: PUSH
59564: LD_EXP 103
59568: PUSH
59569: LD_VAR 0 6
59573: ARRAY
59574: MINUS
59575: ST_TO_ADDR
// if not minesFreeAmount then
59576: LD_VAR 0 8
59580: NOT
59581: IFFALSE 59585
// exit ;
59583: GO 59856
// tmp := [ ] ;
59585: LD_ADDR_VAR 0 7
59589: PUSH
59590: EMPTY
59591: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
59592: LD_ADDR_VAR 0 5
59596: PUSH
59597: DOUBLE
59598: LD_INT 1
59600: DEC
59601: ST_TO_ADDR
59602: LD_VAR 0 8
59606: PUSH
59607: FOR_TO
59608: IFFALSE 59803
// begin _d := rand ( 0 , 5 ) ;
59610: LD_ADDR_VAR 0 11
59614: PUSH
59615: LD_INT 0
59617: PPUSH
59618: LD_INT 5
59620: PPUSH
59621: CALL_OW 12
59625: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
59626: LD_ADDR_VAR 0 12
59630: PUSH
59631: LD_INT 2
59633: PPUSH
59634: LD_INT 6
59636: PPUSH
59637: CALL_OW 12
59641: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
59642: LD_ADDR_VAR 0 9
59646: PUSH
59647: LD_VAR 0 2
59651: PPUSH
59652: LD_VAR 0 11
59656: PPUSH
59657: LD_VAR 0 12
59661: PPUSH
59662: CALL_OW 272
59666: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
59667: LD_ADDR_VAR 0 10
59671: PUSH
59672: LD_VAR 0 3
59676: PPUSH
59677: LD_VAR 0 11
59681: PPUSH
59682: LD_VAR 0 12
59686: PPUSH
59687: CALL_OW 273
59691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
59692: LD_VAR 0 9
59696: PPUSH
59697: LD_VAR 0 10
59701: PPUSH
59702: CALL_OW 488
59706: PUSH
59707: LD_VAR 0 9
59711: PUSH
59712: LD_VAR 0 10
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_VAR 0 7
59725: IN
59726: NOT
59727: AND
59728: PUSH
59729: LD_VAR 0 9
59733: PPUSH
59734: LD_VAR 0 10
59738: PPUSH
59739: CALL_OW 458
59743: NOT
59744: AND
59745: IFFALSE 59787
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
59747: LD_ADDR_VAR 0 7
59751: PUSH
59752: LD_VAR 0 7
59756: PPUSH
59757: LD_VAR 0 7
59761: PUSH
59762: LD_INT 1
59764: PLUS
59765: PPUSH
59766: LD_VAR 0 9
59770: PUSH
59771: LD_VAR 0 10
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PPUSH
59780: CALL_OW 1
59784: ST_TO_ADDR
59785: GO 59801
// i := i - 1 ;
59787: LD_ADDR_VAR 0 5
59791: PUSH
59792: LD_VAR 0 5
59796: PUSH
59797: LD_INT 1
59799: MINUS
59800: ST_TO_ADDR
// end ;
59801: GO 59607
59803: POP
59804: POP
// for i in tmp do
59805: LD_ADDR_VAR 0 5
59809: PUSH
59810: LD_VAR 0 7
59814: PUSH
59815: FOR_IN
59816: IFFALSE 59854
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
59818: LD_VAR 0 1
59822: PPUSH
59823: LD_VAR 0 5
59827: PUSH
59828: LD_INT 1
59830: ARRAY
59831: PPUSH
59832: LD_VAR 0 5
59836: PUSH
59837: LD_INT 2
59839: ARRAY
59840: PPUSH
59841: CALL 58796 0 3
59845: NOT
59846: IFFALSE 59852
// exit ;
59848: POP
59849: POP
59850: GO 59856
59852: GO 59815
59854: POP
59855: POP
// end ;
59856: LD_VAR 0 4
59860: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
59861: LD_INT 0
59863: PPUSH
59864: PPUSH
59865: PPUSH
59866: PPUSH
59867: PPUSH
59868: PPUSH
59869: PPUSH
// if not GetClass ( unit ) = class_sniper then
59870: LD_VAR 0 1
59874: PPUSH
59875: CALL_OW 257
59879: PUSH
59880: LD_INT 5
59882: EQUAL
59883: NOT
59884: IFFALSE 59888
// exit ;
59886: GO 60276
// dist := 8 ;
59888: LD_ADDR_VAR 0 5
59892: PUSH
59893: LD_INT 8
59895: ST_TO_ADDR
// viewRange := 12 ;
59896: LD_ADDR_VAR 0 7
59900: PUSH
59901: LD_INT 12
59903: ST_TO_ADDR
// side := GetSide ( unit ) ;
59904: LD_ADDR_VAR 0 6
59908: PUSH
59909: LD_VAR 0 1
59913: PPUSH
59914: CALL_OW 255
59918: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
59919: LD_INT 61
59921: PPUSH
59922: LD_VAR 0 6
59926: PPUSH
59927: CALL_OW 321
59931: PUSH
59932: LD_INT 2
59934: EQUAL
59935: IFFALSE 59945
// viewRange := 16 ;
59937: LD_ADDR_VAR 0 7
59941: PUSH
59942: LD_INT 16
59944: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
59945: LD_VAR 0 1
59949: PPUSH
59950: LD_VAR 0 2
59954: PPUSH
59955: LD_VAR 0 3
59959: PPUSH
59960: CALL_OW 297
59964: PUSH
59965: LD_VAR 0 5
59969: GREATER
59970: IFFALSE 60049
// begin ComMoveXY ( unit , x , y ) ;
59972: LD_VAR 0 1
59976: PPUSH
59977: LD_VAR 0 2
59981: PPUSH
59982: LD_VAR 0 3
59986: PPUSH
59987: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59991: LD_INT 35
59993: PPUSH
59994: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
59998: LD_VAR 0 1
60002: PPUSH
60003: LD_VAR 0 2
60007: PPUSH
60008: LD_VAR 0 3
60012: PPUSH
60013: CALL 36275 0 3
60017: NOT
60018: IFFALSE 60022
// exit ;
60020: GO 60276
// until GetDistUnitXY ( unit , x , y ) < dist ;
60022: LD_VAR 0 1
60026: PPUSH
60027: LD_VAR 0 2
60031: PPUSH
60032: LD_VAR 0 3
60036: PPUSH
60037: CALL_OW 297
60041: PUSH
60042: LD_VAR 0 5
60046: LESS
60047: IFFALSE 59991
// end ; ComTurnXY ( unit , x , y ) ;
60049: LD_VAR 0 1
60053: PPUSH
60054: LD_VAR 0 2
60058: PPUSH
60059: LD_VAR 0 3
60063: PPUSH
60064: CALL_OW 118
// wait ( 5 ) ;
60068: LD_INT 5
60070: PPUSH
60071: CALL_OW 67
// _d := GetDir ( unit ) ;
60075: LD_ADDR_VAR 0 10
60079: PUSH
60080: LD_VAR 0 1
60084: PPUSH
60085: CALL_OW 254
60089: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
60090: LD_ADDR_VAR 0 8
60094: PUSH
60095: LD_VAR 0 1
60099: PPUSH
60100: CALL_OW 250
60104: PPUSH
60105: LD_VAR 0 10
60109: PPUSH
60110: LD_VAR 0 5
60114: PPUSH
60115: CALL_OW 272
60119: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
60120: LD_ADDR_VAR 0 9
60124: PUSH
60125: LD_VAR 0 1
60129: PPUSH
60130: CALL_OW 251
60134: PPUSH
60135: LD_VAR 0 10
60139: PPUSH
60140: LD_VAR 0 5
60144: PPUSH
60145: CALL_OW 273
60149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60150: LD_VAR 0 8
60154: PPUSH
60155: LD_VAR 0 9
60159: PPUSH
60160: CALL_OW 488
60164: NOT
60165: IFFALSE 60169
// exit ;
60167: GO 60276
// ComAnimCustom ( unit , 1 ) ;
60169: LD_VAR 0 1
60173: PPUSH
60174: LD_INT 1
60176: PPUSH
60177: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60181: LD_VAR 0 8
60185: PPUSH
60186: LD_VAR 0 9
60190: PPUSH
60191: LD_VAR 0 6
60195: PPUSH
60196: LD_VAR 0 7
60200: PPUSH
60201: CALL_OW 330
// repeat wait ( 1 ) ;
60205: LD_INT 1
60207: PPUSH
60208: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
60212: LD_VAR 0 1
60216: PPUSH
60217: CALL_OW 316
60221: PUSH
60222: LD_VAR 0 1
60226: PPUSH
60227: CALL_OW 314
60231: OR
60232: PUSH
60233: LD_VAR 0 1
60237: PPUSH
60238: CALL_OW 302
60242: NOT
60243: OR
60244: PUSH
60245: LD_VAR 0 1
60249: PPUSH
60250: CALL_OW 301
60254: OR
60255: IFFALSE 60205
// RemoveSeeing ( _x , _y , side ) ;
60257: LD_VAR 0 8
60261: PPUSH
60262: LD_VAR 0 9
60266: PPUSH
60267: LD_VAR 0 6
60271: PPUSH
60272: CALL_OW 331
// end ;
60276: LD_VAR 0 4
60280: RET
