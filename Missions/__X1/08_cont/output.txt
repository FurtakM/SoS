// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 38 0 0
// InitEvents ;
   8: CALL 94 0 0
// PrepareRussian ;
  12: CALL 501 0 0
// PrepareArabian ;
  16: CALL 110 0 0
// Action ;
  20: CALL 1120 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// end ;
  37: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene ; function Init ; begin
  38: LD_INT 0
  40: PPUSH
// debug := true ;
  41: LD_ADDR_EXP 1
  45: PUSH
  46: LD_INT 1
  48: ST_TO_ADDR
// hasNormalScene := false ;
  49: LD_ADDR_EXP 5
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// prefix := 07_ ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_STRING 07_
  64: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  65: LD_ADDR_EXP 3
  69: PUSH
  70: LD_STRING 01_JohnnySaved
  72: PPUSH
  73: LD_INT 0
  75: PPUSH
  76: CALL_OW 30
  80: ST_TO_ADDR
// hasVodka := false ;
  81: LD_ADDR_EXP 4
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// end ;
  89: LD_VAR 0 1
  93: RET
// export eventCenterCamOnHeike ; function InitEvents ; begin
  94: LD_INT 0
  96: PPUSH
// eventCenterCamOnHeike := 1 ;
  97: LD_ADDR_EXP 6
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad ; export function PrepareArabian ; var i ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
// uc_side := 4 ;
 114: LD_ADDR_OWVAR 20
 118: PUSH
 119: LD_INT 4
 121: ST_TO_ADDR
// uc_nation := 1 ;
 122: LD_ADDR_OWVAR 21
 126: PUSH
 127: LD_INT 1
 129: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 130: LD_ADDR_EXP 19
 134: PUSH
 135: LD_STRING 07_Americans
 137: PPUSH
 138: CALL_OW 31
 142: ST_TO_ADDR
// if americanSquad < 5 then
 143: LD_EXP 19
 147: PUSH
 148: LD_INT 5
 150: LESS
 151: IFFALSE 208
// begin for i := americanSquad to 5 do
 153: LD_ADDR_VAR 0 2
 157: PUSH
 158: DOUBLE
 159: LD_EXP 19
 163: DEC
 164: ST_TO_ADDR
 165: LD_INT 5
 167: PUSH
 168: FOR_TO
 169: IFFALSE 206
// begin PrepareHuman ( false , 2 , 6 ) ;
 171: LD_INT 0
 173: PPUSH
 174: LD_INT 2
 176: PPUSH
 177: LD_INT 6
 179: PPUSH
 180: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 184: LD_ADDR_EXP 19
 188: PUSH
 189: LD_EXP 19
 193: PPUSH
 194: CALL_OW 44
 198: PPUSH
 199: CALL 40029 0 2
 203: ST_TO_ADDR
// end ;
 204: GO 168
 206: POP
 207: POP
// end ; uc_side := 2 ;
 208: LD_ADDR_OWVAR 20
 212: PUSH
 213: LD_INT 2
 215: ST_TO_ADDR
// uc_nation := 2 ;
 216: LD_ADDR_OWVAR 21
 220: PUSH
 221: LD_INT 2
 223: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 224: LD_ADDR_EXP 7
 228: PUSH
 229: LD_STRING Heike
 231: PPUSH
 232: LD_EXP 1
 236: NOT
 237: PPUSH
 238: LD_EXP 2
 242: PPUSH
 243: CALL 2628 0 3
 247: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 248: LD_ADDR_EXP 10
 252: PUSH
 253: LD_STRING Ibrahim
 255: PPUSH
 256: LD_EXP 1
 260: NOT
 261: PPUSH
 262: LD_EXP 2
 266: PPUSH
 267: CALL 2628 0 3
 271: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 272: LD_ADDR_EXP 8
 276: PUSH
 277: LD_STRING Givi
 279: PPUSH
 280: LD_EXP 1
 284: NOT
 285: PPUSH
 286: LD_EXP 2
 290: PPUSH
 291: CALL 2628 0 3
 295: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 296: LD_ADDR_EXP 11
 300: PUSH
 301: LD_STRING Kamil
 303: PPUSH
 304: LD_EXP 1
 308: NOT
 309: PPUSH
 310: LD_EXP 2
 314: PPUSH
 315: CALL 2628 0 3
 319: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 320: LD_ADDR_EXP 12
 324: PUSH
 325: LD_STRING Kaia
 327: PPUSH
 328: LD_EXP 1
 332: NOT
 333: PPUSH
 334: LD_EXP 2
 338: PPUSH
 339: CALL 2628 0 3
 343: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 344: LD_ADDR_EXP 13
 348: PUSH
 349: LD_STRING Sophia
 351: PPUSH
 352: LD_EXP 1
 356: NOT
 357: PPUSH
 358: LD_EXP 2
 362: PPUSH
 363: CALL 2628 0 3
 367: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 368: LD_ADDR_EXP 14
 372: PUSH
 373: LD_STRING Markov
 375: PPUSH
 376: LD_EXP 1
 380: NOT
 381: PPUSH
 382: LD_EXP 2
 386: PPUSH
 387: CALL 2628 0 3
 391: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 392: LD_ADDR_EXP 17
 396: PUSH
 397: LD_STRING Aviradze
 399: PPUSH
 400: LD_EXP 1
 404: NOT
 405: PPUSH
 406: LD_EXP 2
 410: PPUSH
 411: CALL 2628 0 3
 415: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 416: LD_ADDR_EXP 16
 420: PUSH
 421: LD_STRING Kurt
 423: PPUSH
 424: LD_EXP 1
 428: NOT
 429: PPUSH
 430: LD_EXP 2
 434: PPUSH
 435: CALL 2628 0 3
 439: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 440: LD_ADDR_EXP 9
 444: PUSH
 445: LD_STRING Mike
 447: PPUSH
 448: LD_EXP 1
 452: NOT
 453: PPUSH
 454: LD_EXP 2
 458: PPUSH
 459: CALL 2628 0 3
 463: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 464: LD_ADDR_EXP 15
 468: PUSH
 469: LD_STRING Olaf
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: LD_STRING 
 477: PPUSH
 478: CALL 2628 0 3
 482: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 483: LD_ADDR_EXP 18
 487: PUSH
 488: LD_STRING 07_others
 490: PPUSH
 491: CALL_OW 31
 495: ST_TO_ADDR
// end ; end_of_file
 496: LD_VAR 0 1
 500: RET
// export russianKillers ; export function PrepareRussian ; var i , tmp ; begin
 501: LD_INT 0
 503: PPUSH
 504: PPUSH
 505: PPUSH
// uc_side := 3 ;
 506: LD_ADDR_OWVAR 20
 510: PUSH
 511: LD_INT 3
 513: ST_TO_ADDR
// uc_nation := 3 ;
 514: LD_ADDR_OWVAR 21
 518: PUSH
 519: LD_INT 3
 521: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 522: LD_ADDR_VAR 0 2
 526: PUSH
 527: LD_INT 22
 529: PUSH
 530: LD_INT 3
 532: PUSH
 533: EMPTY
 534: LIST
 535: LIST
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 30
 542: PUSH
 543: LD_INT 0
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 30
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PPUSH
 569: CALL_OW 69
 573: PUSH
 574: FOR_IN
 575: IFFALSE 619
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
 577: LD_VAR 0 2
 581: PPUSH
 582: CALL_OW 274
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: LD_INT 1000
 592: PPUSH
 593: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
 597: LD_VAR 0 2
 601: PPUSH
 602: CALL_OW 274
 606: PPUSH
 607: LD_INT 2
 609: PPUSH
 610: LD_INT 1000
 612: PPUSH
 613: CALL_OW 277
// end ;
 617: GO 574
 619: POP
 620: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
 621: LD_ADDR_VAR 0 2
 625: PUSH
 626: LD_INT 22
 628: PUSH
 629: LD_INT 3
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: PUSH
 636: LD_INT 30
 638: PUSH
 639: LD_INT 32
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: PPUSH
 650: CALL_OW 69
 654: PUSH
 655: FOR_IN
 656: IFFALSE 690
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
 658: LD_INT 0
 660: PPUSH
 661: LD_INT 5
 663: PUSH
 664: LD_OWVAR 67
 668: PLUS
 669: PPUSH
 670: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
 674: CALL_OW 44
 678: PPUSH
 679: LD_VAR 0 2
 683: PPUSH
 684: CALL_OW 52
// end ;
 688: GO 655
 690: POP
 691: POP
// end ;
 692: LD_VAR 0 1
 696: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
 697: LD_INT 0
 699: PPUSH
 700: PPUSH
 701: PPUSH
 702: PPUSH
// uc_side := 3 ;
 703: LD_ADDR_OWVAR 20
 707: PUSH
 708: LD_INT 3
 710: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
 711: LD_ADDR_OWVAR 21
 715: PUSH
 716: LD_INT 1
 718: PPUSH
 719: LD_INT 3
 721: PPUSH
 722: CALL_OW 12
 726: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
 727: LD_ADDR_VAR 0 4
 731: PUSH
 732: LD_INT 5
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL_OW 517
 742: ST_TO_ADDR
// for i := 1 to 3 do
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: DOUBLE
 749: LD_INT 1
 751: DEC
 752: ST_TO_ADDR
 753: LD_INT 3
 755: PUSH
 756: FOR_TO
 757: IFFALSE 826
// begin PrepareHuman ( false , 33 , 0 ) ;
 759: LD_INT 0
 761: PPUSH
 762: LD_INT 33
 764: PPUSH
 765: LD_INT 0
 767: PPUSH
 768: CALL_OW 380
// un := CreateHuman ;
 772: LD_ADDR_VAR 0 3
 776: PUSH
 777: CALL_OW 44
 781: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
 782: LD_VAR 0 3
 786: PPUSH
 787: LD_VAR 0 4
 791: PUSH
 792: LD_INT 1
 794: ARRAY
 795: PUSH
 796: LD_VAR 0 2
 800: ARRAY
 801: PPUSH
 802: LD_VAR 0 4
 806: PUSH
 807: LD_INT 2
 809: ARRAY
 810: PUSH
 811: LD_VAR 0 2
 815: ARRAY
 816: PPUSH
 817: LD_INT 1
 819: PPUSH
 820: CALL_OW 601
// end ;
 824: GO 756
 826: POP
 827: POP
// end ;
 828: LD_VAR 0 1
 832: RET
// export function PrepareFirstScene ; var i , un ; begin
 833: LD_INT 0
 835: PPUSH
 836: PPUSH
 837: PPUSH
// uc_side := 4 ;
 838: LD_ADDR_OWVAR 20
 842: PUSH
 843: LD_INT 4
 845: ST_TO_ADDR
// uc_nation := 1 ;
 846: LD_ADDR_OWVAR 21
 850: PUSH
 851: LD_INT 1
 853: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
 854: LD_INT 0
 856: PPUSH
 857: LD_INT 33
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 380
// for i := 1 to 2 do
 867: LD_ADDR_VAR 0 2
 871: PUSH
 872: DOUBLE
 873: LD_INT 1
 875: DEC
 876: ST_TO_ADDR
 877: LD_INT 2
 879: PUSH
 880: FOR_TO
 881: IFFALSE 946
// begin un := CreateHuman ;
 883: LD_ADDR_VAR 0 3
 887: PUSH
 888: CALL_OW 44
 892: ST_TO_ADDR
// SetDir ( un , 1 ) ;
 893: LD_VAR 0 3
 897: PPUSH
 898: LD_INT 1
 900: PPUSH
 901: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
 905: LD_VAR 0 3
 909: PPUSH
 910: LD_INT 6
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
 920: LD_VAR 0 3
 924: PPUSH
 925: LD_INT 1
 927: PPUSH
 928: CALL 43185 0 2
// SetLives ( un , 300 ) ;
 932: LD_VAR 0 3
 936: PPUSH
 937: LD_INT 300
 939: PPUSH
 940: CALL_OW 234
// end ;
 944: GO 880
 946: POP
 947: POP
// uc_side := 3 ;
 948: LD_ADDR_OWVAR 20
 952: PUSH
 953: LD_INT 3
 955: ST_TO_ADDR
// uc_nation := 3 ;
 956: LD_ADDR_OWVAR 21
 960: PUSH
 961: LD_INT 3
 963: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
 964: LD_INT 1
 966: PPUSH
 967: LD_INT 5
 969: PPUSH
 970: CALL_OW 381
// for i := 1 to 3 do
 974: LD_ADDR_VAR 0 2
 978: PUSH
 979: DOUBLE
 980: LD_INT 1
 982: DEC
 983: ST_TO_ADDR
 984: LD_INT 3
 986: PUSH
 987: FOR_TO
 988: IFFALSE 1061
// begin un := CreateHuman ;
 990: LD_ADDR_VAR 0 3
 994: PUSH
 995: CALL_OW 44
 999: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
1000: LD_ADDR_EXP 20
1004: PUSH
1005: LD_EXP 20
1009: PPUSH
1010: LD_VAR 0 3
1014: PPUSH
1015: CALL 40029 0 2
1019: ST_TO_ADDR
// SetDir ( un , 4 ) ;
1020: LD_VAR 0 3
1024: PPUSH
1025: LD_INT 4
1027: PPUSH
1028: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
1032: LD_VAR 0 3
1036: PPUSH
1037: LD_INT 7
1039: PPUSH
1040: LD_INT 0
1042: PPUSH
1043: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
1047: LD_VAR 0 3
1051: PPUSH
1052: LD_INT 4
1054: PPUSH
1055: CALL 43185 0 2
// end ;
1059: GO 987
1061: POP
1062: POP
// un := CreateHuman ;
1063: LD_ADDR_VAR 0 3
1067: PUSH
1068: CALL_OW 44
1072: ST_TO_ADDR
// PlaceUnitXY ( un , 124 , 37 , false ) ;
1073: LD_VAR 0 3
1077: PPUSH
1078: LD_INT 124
1080: PPUSH
1081: LD_INT 37
1083: PPUSH
1084: LD_INT 0
1086: PPUSH
1087: CALL_OW 48
// SetDir ( un , 3 ) ;
1091: LD_VAR 0 3
1095: PPUSH
1096: LD_INT 3
1098: PPUSH
1099: CALL_OW 233
// ComLookAtDir ( un , 3 ) ;
1103: LD_VAR 0 3
1107: PPUSH
1108: LD_INT 3
1110: PPUSH
1111: CALL 43185 0 2
// end ; end_of_file
1115: LD_VAR 0 1
1119: RET
// export function Action ; var speaker , i , tmp ; begin
1120: LD_INT 0
1122: PPUSH
1123: PPUSH
1124: PPUSH
1125: PPUSH
// Video ( true ) ;
1126: LD_INT 1
1128: PPUSH
1129: CALL 40001 0 1
// hasNormalScene := Kaia or Givi ;
1133: LD_ADDR_EXP 5
1137: PUSH
1138: LD_EXP 12
1142: PUSH
1143: LD_EXP 8
1147: OR
1148: ST_TO_ADDR
// if hasNormalScene then
1149: LD_EXP 5
1153: IFFALSE 1388
// begin for i in americanSquad do
1155: LD_ADDR_VAR 0 3
1159: PUSH
1160: LD_EXP 19
1164: PUSH
1165: FOR_IN
1166: IFFALSE 1212
// begin SetClass ( i , 33 ) ;
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_INT 33
1175: PPUSH
1176: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
1180: LD_VAR 0 3
1184: PPUSH
1185: LD_INT 78
1187: PPUSH
1188: LD_INT 16
1190: PPUSH
1191: LD_INT 5
1193: PPUSH
1194: LD_INT 0
1196: PPUSH
1197: CALL_OW 50
// ComHold ( i ) ;
1201: LD_VAR 0 3
1205: PPUSH
1206: CALL_OW 140
// end ;
1210: GO 1165
1212: POP
1213: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
1214: LD_ADDR_VAR 0 4
1218: PUSH
1219: LD_EXP 9
1223: PUSH
1224: LD_EXP 10
1228: PUSH
1229: LD_EXP 11
1233: PUSH
1234: LD_EXP 12
1238: PUSH
1239: LD_EXP 13
1243: PUSH
1244: LD_EXP 14
1248: PUSH
1249: LD_EXP 15
1253: PUSH
1254: LD_EXP 16
1258: PUSH
1259: LD_EXP 8
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: LIST
1268: LIST
1269: LIST
1270: LIST
1271: LIST
1272: LIST
1273: LIST
1274: PUSH
1275: LD_EXP 18
1279: UNION
1280: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
1281: LD_EXP 7
1285: PPUSH
1286: LD_INT 33
1288: PPUSH
1289: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
1293: LD_EXP 7
1297: PPUSH
1298: LD_INT 117
1300: PPUSH
1301: LD_INT 24
1303: PPUSH
1304: LD_INT 3
1306: PPUSH
1307: LD_INT 0
1309: PPUSH
1310: CALL 42171 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
1314: LD_EXP 7
1318: PPUSH
1319: LD_INT 123
1321: PPUSH
1322: LD_INT 39
1324: PPUSH
1325: CALL_OW 118
// for i in tmp do
1329: LD_ADDR_VAR 0 3
1333: PUSH
1334: LD_VAR 0 4
1338: PUSH
1339: FOR_IN
1340: IFFALSE 1386
// begin SetClass ( i , 33 ) ;
1342: LD_VAR 0 3
1346: PPUSH
1347: LD_INT 33
1349: PPUSH
1350: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
1354: LD_VAR 0 3
1358: PPUSH
1359: LD_INT 3
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
1369: LD_VAR 0 3
1373: PPUSH
1374: LD_INT 113
1376: PPUSH
1377: LD_INT 16
1379: PPUSH
1380: CALL_OW 118
// end ;
1384: GO 1339
1386: POP
1387: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
1388: LD_INT 124
1390: PPUSH
1391: LD_INT 39
1393: PPUSH
1394: CALL_OW 86
// PrepareDeadBodies ;
1398: CALL 697 0 0
// PrepareFirstScene ;
1402: CALL 833 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 90 ) ;
1406: LD_INT 152
1408: PPUSH
1409: LD_INT 65
1411: PPUSH
1412: LD_INT 2
1414: PPUSH
1415: LD_INT 90
1417: NEG
1418: PPUSH
1419: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
1423: LD_INT 152
1425: PPUSH
1426: LD_INT 65
1428: PPUSH
1429: LD_INT 2
1431: PPUSH
1432: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
1436: LD_INT 122
1438: PPUSH
1439: LD_INT 40
1441: PPUSH
1442: LD_INT 2
1444: PPUSH
1445: LD_INT 8
1447: NEG
1448: PPUSH
1449: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
1453: LD_INT 124
1455: PPUSH
1456: LD_INT 37
1458: PPUSH
1459: CALL_OW 86
// speaker := HexInfo ( 124 , 37 ) ;
1463: LD_ADDR_VAR 0 2
1467: PUSH
1468: LD_INT 124
1470: PPUSH
1471: LD_INT 37
1473: PPUSH
1474: CALL_OW 428
1478: ST_TO_ADDR
// Say ( speaker , DRum-Execution-1 ) ;
1479: LD_VAR 0 2
1483: PPUSH
1484: LD_STRING DRum-Execution-1
1486: PPUSH
1487: CALL_OW 88
// Say ( speaker , DRum-Execution-2 ) ;
1491: LD_VAR 0 2
1495: PPUSH
1496: LD_STRING DRum-Execution-2
1498: PPUSH
1499: CALL_OW 88
// wait ( 0 0$01 ) ;
1503: LD_INT 35
1505: PPUSH
1506: CALL_OW 67
// Say ( speaker , DRum-Execution-3 ) ;
1510: LD_VAR 0 2
1514: PPUSH
1515: LD_STRING DRum-Execution-3
1517: PPUSH
1518: CALL_OW 88
// wait ( 0 0$1 ) ;
1522: LD_INT 35
1524: PPUSH
1525: CALL_OW 67
// Say ( speaker , DRum-Execution-4 ) ;
1529: LD_VAR 0 2
1533: PPUSH
1534: LD_STRING DRum-Execution-4
1536: PPUSH
1537: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
1541: LD_EXP 20
1545: PUSH
1546: LD_INT 1
1548: ARRAY
1549: PPUSH
1550: LD_INT 122
1552: PPUSH
1553: LD_INT 39
1555: PPUSH
1556: CALL_OW 428
1560: PPUSH
1561: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
1565: LD_EXP 20
1569: PUSH
1570: LD_INT 2
1572: ARRAY
1573: PPUSH
1574: LD_INT 123
1576: PPUSH
1577: LD_INT 41
1579: PPUSH
1580: CALL_OW 428
1584: PPUSH
1585: CALL_OW 115
// AddComHold ( russianKillers ) ;
1589: LD_EXP 20
1593: PPUSH
1594: CALL_OW 200
// wait ( 0 0$1 ) ;
1598: LD_INT 35
1600: PPUSH
1601: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
1605: LD_INT 122
1607: PPUSH
1608: LD_INT 40
1610: PPUSH
1611: LD_INT 2
1613: PPUSH
1614: CALL_OW 331
// if hasNormalScene then
1618: LD_EXP 5
1622: IFFALSE 1630
// ActionNormal else
1624: CALL 1639 0 0
1628: GO 1634
// ActionAdditional ;
1630: CALL 1901 0 0
// end ;
1634: LD_VAR 0 1
1638: RET
// function ActionNormal ; var i , tmp ; begin
1639: LD_INT 0
1641: PPUSH
1642: PPUSH
1643: PPUSH
// CenterNowOnUnits ( Heike ) ;
1644: LD_EXP 7
1648: PPUSH
1649: CALL_OW 87
// wait ( 0 0$1 ) ;
1653: LD_INT 35
1655: PPUSH
1656: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
1660: LD_EXP 7
1664: PPUSH
1665: LD_INT 115
1667: PPUSH
1668: LD_INT 19
1670: PPUSH
1671: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
1675: LD_EXP 7
1679: PPUSH
1680: LD_INT 113
1682: PPUSH
1683: LD_INT 16
1685: PPUSH
1686: CALL_OW 178
// wait ( 0 0$2 ) ;
1690: LD_INT 70
1692: PPUSH
1693: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
1697: LD_EXP 7
1701: PPUSH
1702: LD_STRING DH-Conspiracy-1
1704: PPUSH
1705: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
1709: LD_EXP 12
1713: PPUSH
1714: LD_STRING DK-Conspiracy-2
1716: PPUSH
1717: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
1721: LD_EXP 8
1725: PPUSH
1726: LD_STRING DG-Conspiracy-3
1728: PPUSH
1729: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
1733: LD_EXP 8
1737: PPUSH
1738: LD_STRING DG-Conspiracy-4
1740: PPUSH
1741: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
1745: LD_EXP 7
1749: PPUSH
1750: LD_STRING DH-Conspiracy-5
1752: PPUSH
1753: CALL_OW 88
// if IsOk ( Kamil ) then
1757: LD_EXP 11
1761: PPUSH
1762: CALL_OW 302
1766: IFFALSE 1824
// begin hasVodka := true ;
1768: LD_ADDR_EXP 4
1772: PUSH
1773: LD_INT 1
1775: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
1776: LD_EXP 11
1780: PPUSH
1781: LD_STRING DKam-Conspiracy-6
1783: PPUSH
1784: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
1788: LD_EXP 11
1792: PPUSH
1793: LD_STRING DKam-Conspiracy-7
1795: PPUSH
1796: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
1800: LD_EXP 11
1804: PPUSH
1805: LD_STRING DKam-Conspiracy-8
1807: PPUSH
1808: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
1812: LD_EXP 11
1816: PPUSH
1817: LD_STRING DKam-Conspiracy-9
1819: PPUSH
1820: CALL_OW 88
// end ; if IsOk ( Sophia ) then
1824: LD_EXP 13
1828: PPUSH
1829: CALL_OW 302
1833: IFFALSE 1889
// begin Say ( Sophia , DS-Conspiracy-10 ) ;
1835: LD_EXP 13
1839: PPUSH
1840: LD_STRING DS-Conspiracy-10
1842: PPUSH
1843: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
1847: LD_EXP 14
1851: PPUSH
1852: LD_STRING DM-Conspiracy-11
1854: PPUSH
1855: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
1859: LD_EXP 13
1863: PPUSH
1864: LD_STRING DS-Conspiracy-12
1866: PPUSH
1867: CALL_OW 88
// if johnnySaved then
1871: LD_EXP 3
1875: IFFALSE 1889
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
1877: LD_EXP 13
1881: PPUSH
1882: LD_STRING DS-Conspiracy-13
1884: PPUSH
1885: CALL_OW 88
// end ; end ; Video ( false ) ;
1889: LD_INT 0
1891: PPUSH
1892: CALL 40001 0 1
// end ;
1896: LD_VAR 0 1
1900: RET
// function ActionAdditional ; var i , un , tmp ; begin
1901: LD_INT 0
1903: PPUSH
1904: PPUSH
1905: PPUSH
1906: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
1907: LD_INT 115
1909: PPUSH
1910: LD_INT 27
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: LD_INT 6
1918: NEG
1919: PPUSH
1920: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
1924: LD_EXP 7
1928: PPUSH
1929: LD_INT 115
1931: PPUSH
1932: LD_INT 27
1934: PPUSH
1935: CALL_OW 428
1939: PPUSH
1940: CALL_OW 52
// SetClass ( Heike , 33 ) ;
1944: LD_EXP 7
1948: PPUSH
1949: LD_INT 33
1951: PPUSH
1952: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
1956: LD_INT 124
1958: PPUSH
1959: LD_INT 39
1961: PPUSH
1962: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
1966: LD_EXP 7
1970: PPUSH
1971: LD_STRING DH-Fail-1
1973: PPUSH
1974: CALL_OW 88
// RaiseSailEvent ( eventCenterCamOnHeike ) ;
1978: LD_EXP 6
1982: PPUSH
1983: CALL_OW 427
// ComExit ( Heike ) ;
1987: LD_EXP 7
1991: PPUSH
1992: CALL 40427 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
1996: LD_EXP 7
2000: PPUSH
2001: LD_INT 109
2003: PPUSH
2004: LD_INT 33
2006: PPUSH
2007: CALL_OW 171
// AddComHold ( Heike ) ;
2011: LD_EXP 7
2015: PPUSH
2016: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
2020: LD_INT 115
2022: PPUSH
2023: LD_INT 27
2025: PPUSH
2026: LD_INT 2
2028: PPUSH
2029: CALL_OW 331
// wait ( 0 0$2 ) ;
2033: LD_INT 70
2035: PPUSH
2036: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2040: LD_INT 35
2042: PPUSH
2043: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
2047: LD_EXP 7
2051: PPUSH
2052: LD_INT 109
2054: PPUSH
2055: LD_INT 33
2057: PPUSH
2058: CALL_OW 307
2062: IFFALSE 2040
// Say ( Heike , DH-Fail-2 ) ;
2064: LD_EXP 7
2068: PPUSH
2069: LD_STRING DH-Fail-2
2071: PPUSH
2072: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
2076: LD_EXP 7
2080: PPUSH
2081: LD_INT 111
2083: PPUSH
2084: LD_INT 48
2086: PPUSH
2087: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
2091: LD_INT 35
2093: PPUSH
2094: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
2098: LD_EXP 7
2102: PPUSH
2103: LD_INT 111
2105: PPUSH
2106: LD_INT 48
2108: PPUSH
2109: CALL_OW 297
2113: PUSH
2114: LD_INT 4
2116: LESS
2117: IFFALSE 2091
// AddComMoveXY ( Heike , 106 , 72 ) ;
2119: LD_EXP 7
2123: PPUSH
2124: LD_INT 106
2126: PPUSH
2127: LD_INT 72
2129: PPUSH
2130: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
2134: LD_EXP 7
2138: PPUSH
2139: LD_INT 103
2141: PPUSH
2142: LD_INT 80
2144: PPUSH
2145: CALL_OW 171
// uc_side := 3 ;
2149: LD_ADDR_OWVAR 20
2153: PUSH
2154: LD_INT 3
2156: ST_TO_ADDR
// uc_nation := 3 ;
2157: LD_ADDR_OWVAR 21
2161: PUSH
2162: LD_INT 3
2164: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
2165: LD_INT 1
2167: PPUSH
2168: LD_INT 1
2170: PPUSH
2171: LD_INT 6
2173: PPUSH
2174: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
2178: LD_ADDR_OWVAR 29
2182: PUSH
2183: LD_INT 12
2185: PUSH
2186: LD_INT 12
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: ST_TO_ADDR
// un := CreateHuman ;
2193: LD_ADDR_VAR 0 3
2197: PUSH
2198: CALL_OW 44
2202: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
2203: LD_VAR 0 3
2207: PPUSH
2208: LD_INT 134
2210: PPUSH
2211: LD_INT 52
2213: PPUSH
2214: LD_INT 4
2216: PPUSH
2217: LD_INT 0
2219: PPUSH
2220: CALL 42171 0 5
// ComTurnUnit ( un , Heike ) ;
2224: LD_VAR 0 3
2228: PPUSH
2229: LD_EXP 7
2233: PPUSH
2234: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
2238: LD_VAR 0 3
2242: PPUSH
2243: LD_EXP 7
2247: PPUSH
2248: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
2252: LD_VAR 0 3
2256: PPUSH
2257: LD_STRING DRum-Fail-3
2259: PPUSH
2260: CALL_OW 88
// for i := 1 to 3 do
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_INT 3
2276: PUSH
2277: FOR_TO
2278: IFFALSE 2351
// begin PrepareSoldier ( false , 10 ) ;
2280: LD_INT 0
2282: PPUSH
2283: LD_INT 10
2285: PPUSH
2286: CALL_OW 381
// un := CreateHuman ;
2290: LD_ADDR_VAR 0 3
2294: PUSH
2295: CALL_OW 44
2299: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
2300: LD_ADDR_VAR 0 4
2304: PUSH
2305: LD_VAR 0 4
2309: PPUSH
2310: LD_VAR 0 3
2314: PPUSH
2315: CALL 40029 0 2
2319: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
2320: LD_VAR 0 3
2324: PPUSH
2325: LD_INT 8
2327: PPUSH
2328: LD_INT 0
2330: PPUSH
2331: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
2335: LD_VAR 0 3
2339: PPUSH
2340: LD_EXP 7
2344: PPUSH
2345: CALL_OW 119
// end ;
2349: GO 2277
2351: POP
2352: POP
// repeat wait ( 0 0$1 ) ;
2353: LD_INT 35
2355: PPUSH
2356: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
2360: LD_VAR 0 4
2364: PPUSH
2365: LD_INT 101
2367: PUSH
2368: LD_INT 2
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 72
2379: PUSH
2380: LD_INT 1
2382: GREATER
2383: IFFALSE 2353
// wait ( 0 0$1 ) ;
2385: LD_INT 35
2387: PPUSH
2388: CALL_OW 67
// DialogueOn ;
2392: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
2396: LD_EXP 7
2400: PPUSH
2401: LD_STRING DH-Fail-4
2403: PPUSH
2404: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
2408: LD_EXP 7
2412: PPUSH
2413: LD_STRING DH-Fail-5
2415: PPUSH
2416: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
2420: LD_EXP 7
2424: PPUSH
2425: LD_STRING DH-Fail-6
2427: PPUSH
2428: CALL_OW 88
// DialogueOff ;
2432: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
2436: LD_VAR 0 4
2440: PPUSH
2441: LD_EXP 7
2445: PPUSH
2446: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
2450: LD_INT 35
2452: PPUSH
2453: CALL_OW 67
// until IsDying ( Heike ) ;
2457: LD_EXP 7
2461: PPUSH
2462: CALL_OW 303
2466: IFFALSE 2450
// KillUnit ( Heike ) ;
2468: LD_EXP 7
2472: PPUSH
2473: CALL_OW 66
// wait ( 0 0$4 ) ;
2477: LD_INT 140
2479: PPUSH
2480: CALL_OW 67
// ResetFog ;
2484: CALL_OW 335
// DialogueOn ;
2488: CALL_OW 6
// dwait ( 0 0$1 ) ;
2492: LD_INT 35
2494: PPUSH
2495: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2499: LD_ADDR_EXP 7
2503: PUSH
2504: LD_STRING Heike
2506: PPUSH
2507: LD_EXP 1
2511: NOT
2512: PPUSH
2513: LD_EXP 2
2517: PPUSH
2518: CALL 2628 0 3
2522: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
2523: LD_EXP 7
2527: PPUSH
2528: LD_STRING DH-Fail-7
2530: PPUSH
2531: CALL_OW 89
// DialogueOff ;
2535: CALL_OW 7
// YouLost ( Fail ) ;
2539: LD_STRING Fail
2541: PPUSH
2542: CALL_OW 104
// end ; end_of_file
2546: LD_VAR 0 1
2550: RET
// on SailEvent ( event ) do begin case event of eventCenterCamOnHeike :
2551: LD_VAR 0 1
2555: PUSH
2556: LD_EXP 6
2560: DOUBLE
2561: EQUAL
2562: IFTRUE 2566
2564: GO 2596
2566: POP
// begin repeat wait ( 0 0$1 ) ;
2567: LD_INT 35
2569: PPUSH
2570: CALL_OW 67
// CenterOnUnits ( Heike ) ;
2574: LD_EXP 7
2578: PPUSH
2579: CALL_OW 85
// until IsDying ( Heike ) ;
2583: LD_EXP 7
2587: PPUSH
2588: CALL_OW 303
2592: IFFALSE 2567
// end ; end ;
2594: GO 2597
2596: POP
// end ;
2597: PPOPN 1
2599: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
2600: LD_VAR 0 1
2604: PUSH
2605: LD_EXP 7
2609: EQUAL
2610: PUSH
2611: LD_EXP 5
2615: AND
2616: IFFALSE 2625
// YouLost ( Heike ) ;
2618: LD_STRING Heike
2620: PPUSH
2621: CALL_OW 104
// end ; end_of_file
2625: PPOPN 1
2627: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2628: LD_INT 0
2630: PPUSH
2631: PPUSH
// if exist_mode then
2632: LD_VAR 0 2
2636: IFFALSE 2661
// unit := CreateCharacter ( prefix & ident ) else
2638: LD_ADDR_VAR 0 5
2642: PUSH
2643: LD_VAR 0 3
2647: PUSH
2648: LD_VAR 0 1
2652: STR
2653: PPUSH
2654: CALL_OW 34
2658: ST_TO_ADDR
2659: GO 2676
// unit := NewCharacter ( ident ) ;
2661: LD_ADDR_VAR 0 5
2665: PUSH
2666: LD_VAR 0 1
2670: PPUSH
2671: CALL_OW 25
2675: ST_TO_ADDR
// result := unit ;
2676: LD_ADDR_VAR 0 4
2680: PUSH
2681: LD_VAR 0 5
2685: ST_TO_ADDR
// end ;
2686: LD_VAR 0 4
2690: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
2691: LD_INT 0
2693: PPUSH
2694: PPUSH
// if not side or not nation then
2695: LD_VAR 0 1
2699: NOT
2700: PUSH
2701: LD_VAR 0 2
2705: NOT
2706: OR
2707: IFFALSE 2711
// exit ;
2709: GO 3479
// case nation of nation_american :
2711: LD_VAR 0 2
2715: PUSH
2716: LD_INT 1
2718: DOUBLE
2719: EQUAL
2720: IFTRUE 2724
2722: GO 2938
2724: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
2725: LD_ADDR_VAR 0 4
2729: PUSH
2730: LD_INT 35
2732: PUSH
2733: LD_INT 45
2735: PUSH
2736: LD_INT 46
2738: PUSH
2739: LD_INT 47
2741: PUSH
2742: LD_INT 82
2744: PUSH
2745: LD_INT 83
2747: PUSH
2748: LD_INT 84
2750: PUSH
2751: LD_INT 85
2753: PUSH
2754: LD_INT 86
2756: PUSH
2757: LD_INT 1
2759: PUSH
2760: LD_INT 2
2762: PUSH
2763: LD_INT 6
2765: PUSH
2766: LD_INT 15
2768: PUSH
2769: LD_INT 16
2771: PUSH
2772: LD_INT 7
2774: PUSH
2775: LD_INT 12
2777: PUSH
2778: LD_INT 13
2780: PUSH
2781: LD_INT 10
2783: PUSH
2784: LD_INT 14
2786: PUSH
2787: LD_INT 20
2789: PUSH
2790: LD_INT 21
2792: PUSH
2793: LD_INT 22
2795: PUSH
2796: LD_INT 25
2798: PUSH
2799: LD_INT 32
2801: PUSH
2802: LD_INT 27
2804: PUSH
2805: LD_INT 36
2807: PUSH
2808: LD_INT 69
2810: PUSH
2811: LD_INT 39
2813: PUSH
2814: LD_INT 34
2816: PUSH
2817: LD_INT 40
2819: PUSH
2820: LD_INT 48
2822: PUSH
2823: LD_INT 49
2825: PUSH
2826: LD_INT 50
2828: PUSH
2829: LD_INT 51
2831: PUSH
2832: LD_INT 52
2834: PUSH
2835: LD_INT 53
2837: PUSH
2838: LD_INT 54
2840: PUSH
2841: LD_INT 55
2843: PUSH
2844: LD_INT 56
2846: PUSH
2847: LD_INT 57
2849: PUSH
2850: LD_INT 58
2852: PUSH
2853: LD_INT 59
2855: PUSH
2856: LD_INT 60
2858: PUSH
2859: LD_INT 61
2861: PUSH
2862: LD_INT 62
2864: PUSH
2865: LD_INT 80
2867: PUSH
2868: LD_INT 82
2870: PUSH
2871: LD_INT 83
2873: PUSH
2874: LD_INT 84
2876: PUSH
2877: LD_INT 85
2879: PUSH
2880: LD_INT 86
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: LIST
2895: LIST
2896: LIST
2897: LIST
2898: LIST
2899: LIST
2900: LIST
2901: LIST
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: LIST
2909: LIST
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: LIST
2920: LIST
2921: LIST
2922: LIST
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: LIST
2933: LIST
2934: LIST
2935: ST_TO_ADDR
2936: GO 3403
2938: LD_INT 2
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 3172
2946: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
2947: LD_ADDR_VAR 0 4
2951: PUSH
2952: LD_INT 35
2954: PUSH
2955: LD_INT 45
2957: PUSH
2958: LD_INT 46
2960: PUSH
2961: LD_INT 47
2963: PUSH
2964: LD_INT 82
2966: PUSH
2967: LD_INT 83
2969: PUSH
2970: LD_INT 84
2972: PUSH
2973: LD_INT 85
2975: PUSH
2976: LD_INT 87
2978: PUSH
2979: LD_INT 70
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: LD_INT 11
2987: PUSH
2988: LD_INT 3
2990: PUSH
2991: LD_INT 4
2993: PUSH
2994: LD_INT 5
2996: PUSH
2997: LD_INT 6
2999: PUSH
3000: LD_INT 15
3002: PUSH
3003: LD_INT 18
3005: PUSH
3006: LD_INT 7
3008: PUSH
3009: LD_INT 17
3011: PUSH
3012: LD_INT 8
3014: PUSH
3015: LD_INT 20
3017: PUSH
3018: LD_INT 21
3020: PUSH
3021: LD_INT 22
3023: PUSH
3024: LD_INT 72
3026: PUSH
3027: LD_INT 26
3029: PUSH
3030: LD_INT 69
3032: PUSH
3033: LD_INT 39
3035: PUSH
3036: LD_INT 40
3038: PUSH
3039: LD_INT 41
3041: PUSH
3042: LD_INT 42
3044: PUSH
3045: LD_INT 43
3047: PUSH
3048: LD_INT 48
3050: PUSH
3051: LD_INT 49
3053: PUSH
3054: LD_INT 50
3056: PUSH
3057: LD_INT 51
3059: PUSH
3060: LD_INT 52
3062: PUSH
3063: LD_INT 53
3065: PUSH
3066: LD_INT 54
3068: PUSH
3069: LD_INT 55
3071: PUSH
3072: LD_INT 56
3074: PUSH
3075: LD_INT 60
3077: PUSH
3078: LD_INT 61
3080: PUSH
3081: LD_INT 62
3083: PUSH
3084: LD_INT 66
3086: PUSH
3087: LD_INT 67
3089: PUSH
3090: LD_INT 68
3092: PUSH
3093: LD_INT 81
3095: PUSH
3096: LD_INT 82
3098: PUSH
3099: LD_INT 83
3101: PUSH
3102: LD_INT 84
3104: PUSH
3105: LD_INT 85
3107: PUSH
3108: LD_INT 87
3110: PUSH
3111: LD_INT 88
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: LIST
3136: LIST
3137: LIST
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: LIST
3143: LIST
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: LIST
3155: LIST
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: LIST
3164: LIST
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: ST_TO_ADDR
3170: GO 3403
3172: LD_INT 3
3174: DOUBLE
3175: EQUAL
3176: IFTRUE 3180
3178: GO 3402
3180: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3181: LD_ADDR_VAR 0 4
3185: PUSH
3186: LD_INT 46
3188: PUSH
3189: LD_INT 47
3191: PUSH
3192: LD_INT 1
3194: PUSH
3195: LD_INT 2
3197: PUSH
3198: LD_INT 82
3200: PUSH
3201: LD_INT 83
3203: PUSH
3204: LD_INT 84
3206: PUSH
3207: LD_INT 85
3209: PUSH
3210: LD_INT 86
3212: PUSH
3213: LD_INT 11
3215: PUSH
3216: LD_INT 9
3218: PUSH
3219: LD_INT 20
3221: PUSH
3222: LD_INT 19
3224: PUSH
3225: LD_INT 21
3227: PUSH
3228: LD_INT 24
3230: PUSH
3231: LD_INT 22
3233: PUSH
3234: LD_INT 25
3236: PUSH
3237: LD_INT 28
3239: PUSH
3240: LD_INT 29
3242: PUSH
3243: LD_INT 30
3245: PUSH
3246: LD_INT 31
3248: PUSH
3249: LD_INT 37
3251: PUSH
3252: LD_INT 38
3254: PUSH
3255: LD_INT 32
3257: PUSH
3258: LD_INT 27
3260: PUSH
3261: LD_INT 33
3263: PUSH
3264: LD_INT 69
3266: PUSH
3267: LD_INT 39
3269: PUSH
3270: LD_INT 34
3272: PUSH
3273: LD_INT 40
3275: PUSH
3276: LD_INT 71
3278: PUSH
3279: LD_INT 23
3281: PUSH
3282: LD_INT 44
3284: PUSH
3285: LD_INT 48
3287: PUSH
3288: LD_INT 49
3290: PUSH
3291: LD_INT 50
3293: PUSH
3294: LD_INT 51
3296: PUSH
3297: LD_INT 52
3299: PUSH
3300: LD_INT 53
3302: PUSH
3303: LD_INT 54
3305: PUSH
3306: LD_INT 55
3308: PUSH
3309: LD_INT 56
3311: PUSH
3312: LD_INT 57
3314: PUSH
3315: LD_INT 58
3317: PUSH
3318: LD_INT 59
3320: PUSH
3321: LD_INT 63
3323: PUSH
3324: LD_INT 64
3326: PUSH
3327: LD_INT 65
3329: PUSH
3330: LD_INT 82
3332: PUSH
3333: LD_INT 83
3335: PUSH
3336: LD_INT 84
3338: PUSH
3339: LD_INT 85
3341: PUSH
3342: LD_INT 86
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: ST_TO_ADDR
3400: GO 3403
3402: POP
// if state > - 1 and state < 3 then
3403: LD_VAR 0 3
3407: PUSH
3408: LD_INT 1
3410: NEG
3411: GREATER
3412: PUSH
3413: LD_VAR 0 3
3417: PUSH
3418: LD_INT 3
3420: LESS
3421: AND
3422: IFFALSE 3479
// for i in result do
3424: LD_ADDR_VAR 0 5
3428: PUSH
3429: LD_VAR 0 4
3433: PUSH
3434: FOR_IN
3435: IFFALSE 3477
// if GetTech ( i , side ) <> state then
3437: LD_VAR 0 5
3441: PPUSH
3442: LD_VAR 0 1
3446: PPUSH
3447: CALL_OW 321
3451: PUSH
3452: LD_VAR 0 3
3456: NONEQUAL
3457: IFFALSE 3475
// result := result diff i ;
3459: LD_ADDR_VAR 0 4
3463: PUSH
3464: LD_VAR 0 4
3468: PUSH
3469: LD_VAR 0 5
3473: DIFF
3474: ST_TO_ADDR
3475: GO 3434
3477: POP
3478: POP
// end ;
3479: LD_VAR 0 4
3483: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3484: LD_INT 0
3486: PPUSH
3487: PPUSH
3488: PPUSH
// result := true ;
3489: LD_ADDR_VAR 0 3
3493: PUSH
3494: LD_INT 1
3496: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3497: LD_ADDR_VAR 0 5
3501: PUSH
3502: LD_VAR 0 2
3506: PPUSH
3507: CALL_OW 480
3511: ST_TO_ADDR
// if not tmp then
3512: LD_VAR 0 5
3516: NOT
3517: IFFALSE 3521
// exit ;
3519: GO 3570
// for i in tmp do
3521: LD_ADDR_VAR 0 4
3525: PUSH
3526: LD_VAR 0 5
3530: PUSH
3531: FOR_IN
3532: IFFALSE 3568
// if GetTech ( i , side ) <> state_researched then
3534: LD_VAR 0 4
3538: PPUSH
3539: LD_VAR 0 1
3543: PPUSH
3544: CALL_OW 321
3548: PUSH
3549: LD_INT 2
3551: NONEQUAL
3552: IFFALSE 3566
// begin result := false ;
3554: LD_ADDR_VAR 0 3
3558: PUSH
3559: LD_INT 0
3561: ST_TO_ADDR
// exit ;
3562: POP
3563: POP
3564: GO 3570
// end ;
3566: GO 3531
3568: POP
3569: POP
// end ;
3570: LD_VAR 0 3
3574: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3575: LD_INT 0
3577: PPUSH
3578: PPUSH
3579: PPUSH
3580: PPUSH
3581: PPUSH
3582: PPUSH
3583: PPUSH
3584: PPUSH
3585: PPUSH
3586: PPUSH
3587: PPUSH
3588: PPUSH
3589: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3590: LD_VAR 0 1
3594: NOT
3595: PUSH
3596: LD_VAR 0 1
3600: PPUSH
3601: CALL_OW 257
3605: PUSH
3606: LD_INT 9
3608: NONEQUAL
3609: OR
3610: IFFALSE 3614
// exit ;
3612: GO 4187
// side := GetSide ( unit ) ;
3614: LD_ADDR_VAR 0 9
3618: PUSH
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 255
3628: ST_TO_ADDR
// tech_space := tech_spacanom ;
3629: LD_ADDR_VAR 0 12
3633: PUSH
3634: LD_INT 29
3636: ST_TO_ADDR
// tech_time := tech_taurad ;
3637: LD_ADDR_VAR 0 13
3641: PUSH
3642: LD_INT 28
3644: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
3645: LD_ADDR_VAR 0 11
3649: PUSH
3650: LD_VAR 0 1
3654: PPUSH
3655: CALL_OW 310
3659: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
3660: LD_VAR 0 11
3664: PPUSH
3665: CALL_OW 247
3669: PUSH
3670: LD_INT 2
3672: EQUAL
3673: IFFALSE 3677
// exit ;
3675: GO 4187
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3677: LD_ADDR_VAR 0 8
3681: PUSH
3682: LD_INT 81
3684: PUSH
3685: LD_VAR 0 9
3689: PUSH
3690: EMPTY
3691: LIST
3692: LIST
3693: PUSH
3694: LD_INT 3
3696: PUSH
3697: LD_INT 21
3699: PUSH
3700: LD_INT 3
3702: PUSH
3703: EMPTY
3704: LIST
3705: LIST
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: ST_TO_ADDR
// if not tmp then
3720: LD_VAR 0 8
3724: NOT
3725: IFFALSE 3729
// exit ;
3727: GO 4187
// if in_unit then
3729: LD_VAR 0 11
3733: IFFALSE 3757
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
3735: LD_ADDR_VAR 0 10
3739: PUSH
3740: LD_VAR 0 8
3744: PPUSH
3745: LD_VAR 0 11
3749: PPUSH
3750: CALL_OW 74
3754: ST_TO_ADDR
3755: GO 3777
// enemy := NearestUnitToUnit ( tmp , unit ) ;
3757: LD_ADDR_VAR 0 10
3761: PUSH
3762: LD_VAR 0 8
3766: PPUSH
3767: LD_VAR 0 1
3771: PPUSH
3772: CALL_OW 74
3776: ST_TO_ADDR
// if not enemy then
3777: LD_VAR 0 10
3781: NOT
3782: IFFALSE 3786
// exit ;
3784: GO 4187
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
3786: LD_VAR 0 11
3790: PUSH
3791: LD_VAR 0 11
3795: PPUSH
3796: LD_VAR 0 10
3800: PPUSH
3801: CALL_OW 296
3805: PUSH
3806: LD_INT 13
3808: GREATER
3809: AND
3810: PUSH
3811: LD_VAR 0 1
3815: PPUSH
3816: LD_VAR 0 10
3820: PPUSH
3821: CALL_OW 296
3825: PUSH
3826: LD_INT 12
3828: GREATER
3829: OR
3830: IFFALSE 3834
// exit ;
3832: GO 4187
// missile := [ 1 ] ;
3834: LD_ADDR_VAR 0 14
3838: PUSH
3839: LD_INT 1
3841: PUSH
3842: EMPTY
3843: LIST
3844: ST_TO_ADDR
// if Researched ( side , tech_space ) then
3845: LD_VAR 0 9
3849: PPUSH
3850: LD_VAR 0 12
3854: PPUSH
3855: CALL_OW 325
3859: IFFALSE 3888
// missile := Replace ( missile , missile + 1 , 2 ) ;
3861: LD_ADDR_VAR 0 14
3865: PUSH
3866: LD_VAR 0 14
3870: PPUSH
3871: LD_VAR 0 14
3875: PUSH
3876: LD_INT 1
3878: PLUS
3879: PPUSH
3880: LD_INT 2
3882: PPUSH
3883: CALL_OW 1
3887: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
3888: LD_VAR 0 9
3892: PPUSH
3893: LD_VAR 0 13
3897: PPUSH
3898: CALL_OW 325
3902: PUSH
3903: LD_VAR 0 10
3907: PPUSH
3908: CALL_OW 255
3912: PPUSH
3913: LD_VAR 0 13
3917: PPUSH
3918: CALL_OW 325
3922: NOT
3923: AND
3924: IFFALSE 3953
// missile := Replace ( missile , missile + 1 , 3 ) ;
3926: LD_ADDR_VAR 0 14
3930: PUSH
3931: LD_VAR 0 14
3935: PPUSH
3936: LD_VAR 0 14
3940: PUSH
3941: LD_INT 1
3943: PLUS
3944: PPUSH
3945: LD_INT 3
3947: PPUSH
3948: CALL_OW 1
3952: ST_TO_ADDR
// if missile < 2 then
3953: LD_VAR 0 14
3957: PUSH
3958: LD_INT 2
3960: LESS
3961: IFFALSE 3965
// exit ;
3963: GO 4187
// x := GetX ( enemy ) ;
3965: LD_ADDR_VAR 0 4
3969: PUSH
3970: LD_VAR 0 10
3974: PPUSH
3975: CALL_OW 250
3979: ST_TO_ADDR
// y := GetY ( enemy ) ;
3980: LD_ADDR_VAR 0 5
3984: PUSH
3985: LD_VAR 0 10
3989: PPUSH
3990: CALL_OW 251
3994: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
3995: LD_ADDR_VAR 0 6
3999: PUSH
4000: LD_VAR 0 4
4004: PUSH
4005: LD_INT 1
4007: NEG
4008: PPUSH
4009: LD_INT 1
4011: PPUSH
4012: CALL_OW 12
4016: PLUS
4017: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4018: LD_ADDR_VAR 0 7
4022: PUSH
4023: LD_VAR 0 5
4027: PUSH
4028: LD_INT 1
4030: NEG
4031: PPUSH
4032: LD_INT 1
4034: PPUSH
4035: CALL_OW 12
4039: PLUS
4040: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4041: LD_VAR 0 6
4045: PPUSH
4046: LD_VAR 0 7
4050: PPUSH
4051: CALL_OW 488
4055: NOT
4056: IFFALSE 4078
// begin _x := x ;
4058: LD_ADDR_VAR 0 6
4062: PUSH
4063: LD_VAR 0 4
4067: ST_TO_ADDR
// _y := y ;
4068: LD_ADDR_VAR 0 7
4072: PUSH
4073: LD_VAR 0 5
4077: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: LD_INT 1
4085: PPUSH
4086: LD_VAR 0 14
4090: PPUSH
4091: CALL_OW 12
4095: ST_TO_ADDR
// case i of 1 :
4096: LD_VAR 0 3
4100: PUSH
4101: LD_INT 1
4103: DOUBLE
4104: EQUAL
4105: IFTRUE 4109
4107: GO 4126
4109: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4110: LD_VAR 0 1
4114: PPUSH
4115: LD_VAR 0 10
4119: PPUSH
4120: CALL_OW 115
4124: GO 4187
4126: LD_INT 2
4128: DOUBLE
4129: EQUAL
4130: IFTRUE 4134
4132: GO 4156
4134: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4135: LD_VAR 0 1
4139: PPUSH
4140: LD_VAR 0 6
4144: PPUSH
4145: LD_VAR 0 7
4149: PPUSH
4150: CALL_OW 153
4154: GO 4187
4156: LD_INT 3
4158: DOUBLE
4159: EQUAL
4160: IFTRUE 4164
4162: GO 4186
4164: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4165: LD_VAR 0 1
4169: PPUSH
4170: LD_VAR 0 6
4174: PPUSH
4175: LD_VAR 0 7
4179: PPUSH
4180: CALL_OW 154
4184: GO 4187
4186: POP
// end ;
4187: LD_VAR 0 2
4191: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4192: LD_INT 0
4194: PPUSH
4195: PPUSH
4196: PPUSH
4197: PPUSH
4198: PPUSH
4199: PPUSH
// if not unit or not building then
4200: LD_VAR 0 1
4204: NOT
4205: PUSH
4206: LD_VAR 0 2
4210: NOT
4211: OR
4212: IFFALSE 4216
// exit ;
4214: GO 4374
// x := GetX ( building ) ;
4216: LD_ADDR_VAR 0 5
4220: PUSH
4221: LD_VAR 0 2
4225: PPUSH
4226: CALL_OW 250
4230: ST_TO_ADDR
// y := GetY ( building ) ;
4231: LD_ADDR_VAR 0 6
4235: PUSH
4236: LD_VAR 0 2
4240: PPUSH
4241: CALL_OW 251
4245: ST_TO_ADDR
// for i = 0 to 5 do
4246: LD_ADDR_VAR 0 4
4250: PUSH
4251: DOUBLE
4252: LD_INT 0
4254: DEC
4255: ST_TO_ADDR
4256: LD_INT 5
4258: PUSH
4259: FOR_TO
4260: IFFALSE 4372
// begin _x := ShiftX ( x , i , 3 ) ;
4262: LD_ADDR_VAR 0 7
4266: PUSH
4267: LD_VAR 0 5
4271: PPUSH
4272: LD_VAR 0 4
4276: PPUSH
4277: LD_INT 3
4279: PPUSH
4280: CALL_OW 272
4284: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4285: LD_ADDR_VAR 0 8
4289: PUSH
4290: LD_VAR 0 6
4294: PPUSH
4295: LD_VAR 0 4
4299: PPUSH
4300: LD_INT 3
4302: PPUSH
4303: CALL_OW 273
4307: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4308: LD_VAR 0 7
4312: PPUSH
4313: LD_VAR 0 8
4317: PPUSH
4318: CALL_OW 488
4322: NOT
4323: IFFALSE 4327
// continue ;
4325: GO 4259
// if HexInfo ( _x , _y ) = 0 then
4327: LD_VAR 0 7
4331: PPUSH
4332: LD_VAR 0 8
4336: PPUSH
4337: CALL_OW 428
4341: PUSH
4342: LD_INT 0
4344: EQUAL
4345: IFFALSE 4370
// begin ComMoveXY ( unit , _x , _y ) ;
4347: LD_VAR 0 1
4351: PPUSH
4352: LD_VAR 0 7
4356: PPUSH
4357: LD_VAR 0 8
4361: PPUSH
4362: CALL_OW 111
// exit ;
4366: POP
4367: POP
4368: GO 4374
// end ; end ;
4370: GO 4259
4372: POP
4373: POP
// end ;
4374: LD_VAR 0 3
4378: RET
// export function ScanBase ( side , base_area ) ; begin
4379: LD_INT 0
4381: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4382: LD_ADDR_VAR 0 3
4386: PUSH
4387: LD_VAR 0 2
4391: PPUSH
4392: LD_INT 81
4394: PUSH
4395: LD_VAR 0 1
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 70
4408: ST_TO_ADDR
// end ;
4409: LD_VAR 0 3
4413: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4414: LD_INT 0
4416: PPUSH
4417: PPUSH
4418: PPUSH
4419: PPUSH
// result := false ;
4420: LD_ADDR_VAR 0 2
4424: PUSH
4425: LD_INT 0
4427: ST_TO_ADDR
// side := GetSide ( unit ) ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: LD_VAR 0 1
4437: PPUSH
4438: CALL_OW 255
4442: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4443: LD_ADDR_VAR 0 4
4447: PUSH
4448: LD_VAR 0 1
4452: PPUSH
4453: CALL_OW 248
4457: ST_TO_ADDR
// case nat of 1 :
4458: LD_VAR 0 4
4462: PUSH
4463: LD_INT 1
4465: DOUBLE
4466: EQUAL
4467: IFTRUE 4471
4469: GO 4482
4471: POP
// tech := tech_lassight ; 2 :
4472: LD_ADDR_VAR 0 5
4476: PUSH
4477: LD_INT 12
4479: ST_TO_ADDR
4480: GO 4521
4482: LD_INT 2
4484: DOUBLE
4485: EQUAL
4486: IFTRUE 4490
4488: GO 4501
4490: POP
// tech := tech_mortar ; 3 :
4491: LD_ADDR_VAR 0 5
4495: PUSH
4496: LD_INT 41
4498: ST_TO_ADDR
4499: GO 4521
4501: LD_INT 3
4503: DOUBLE
4504: EQUAL
4505: IFTRUE 4509
4507: GO 4520
4509: POP
// tech := tech_bazooka ; end ;
4510: LD_ADDR_VAR 0 5
4514: PUSH
4515: LD_INT 44
4517: ST_TO_ADDR
4518: GO 4521
4520: POP
// if Researched ( side , tech ) then
4521: LD_VAR 0 3
4525: PPUSH
4526: LD_VAR 0 5
4530: PPUSH
4531: CALL_OW 325
4535: IFFALSE 4562
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4537: LD_ADDR_VAR 0 2
4541: PUSH
4542: LD_INT 5
4544: PUSH
4545: LD_INT 8
4547: PUSH
4548: LD_INT 9
4550: PUSH
4551: EMPTY
4552: LIST
4553: LIST
4554: LIST
4555: PUSH
4556: LD_VAR 0 4
4560: ARRAY
4561: ST_TO_ADDR
// end ;
4562: LD_VAR 0 2
4566: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4567: LD_INT 0
4569: PPUSH
4570: PPUSH
4571: PPUSH
// if not mines then
4572: LD_VAR 0 2
4576: NOT
4577: IFFALSE 4581
// exit ;
4579: GO 4725
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4581: LD_ADDR_VAR 0 5
4585: PUSH
4586: LD_INT 81
4588: PUSH
4589: LD_VAR 0 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 3
4600: PUSH
4601: LD_INT 21
4603: PUSH
4604: LD_INT 3
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PPUSH
4619: CALL_OW 69
4623: ST_TO_ADDR
// for i in mines do
4624: LD_ADDR_VAR 0 4
4628: PUSH
4629: LD_VAR 0 2
4633: PUSH
4634: FOR_IN
4635: IFFALSE 4723
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
4637: LD_VAR 0 4
4641: PUSH
4642: LD_INT 1
4644: ARRAY
4645: PPUSH
4646: LD_VAR 0 4
4650: PUSH
4651: LD_INT 2
4653: ARRAY
4654: PPUSH
4655: CALL_OW 458
4659: NOT
4660: IFFALSE 4664
// continue ;
4662: GO 4634
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
4664: LD_VAR 0 4
4668: PUSH
4669: LD_INT 1
4671: ARRAY
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_INT 2
4680: ARRAY
4681: PPUSH
4682: CALL_OW 428
4686: PUSH
4687: LD_VAR 0 5
4691: IN
4692: IFFALSE 4721
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
4694: LD_VAR 0 4
4698: PUSH
4699: LD_INT 1
4701: ARRAY
4702: PPUSH
4703: LD_VAR 0 4
4707: PUSH
4708: LD_INT 2
4710: ARRAY
4711: PPUSH
4712: LD_VAR 0 1
4716: PPUSH
4717: CALL_OW 456
// end ;
4721: GO 4634
4723: POP
4724: POP
// end ;
4725: LD_VAR 0 3
4729: RET
// export function Count ( array ) ; var i ; begin
4730: LD_INT 0
4732: PPUSH
4733: PPUSH
// result := 0 ;
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: LD_INT 0
4741: ST_TO_ADDR
// for i in array do
4742: LD_ADDR_VAR 0 3
4746: PUSH
4747: LD_VAR 0 1
4751: PUSH
4752: FOR_IN
4753: IFFALSE 4777
// if i then
4755: LD_VAR 0 3
4759: IFFALSE 4775
// result := result + 1 ;
4761: LD_ADDR_VAR 0 2
4765: PUSH
4766: LD_VAR 0 2
4770: PUSH
4771: LD_INT 1
4773: PLUS
4774: ST_TO_ADDR
4775: GO 4752
4777: POP
4778: POP
// end ;
4779: LD_VAR 0 2
4783: RET
// export function IsEmpty ( building ) ; begin
4784: LD_INT 0
4786: PPUSH
// if not building then
4787: LD_VAR 0 1
4791: NOT
4792: IFFALSE 4796
// exit ;
4794: GO 4839
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
4796: LD_ADDR_VAR 0 2
4800: PUSH
4801: LD_VAR 0 1
4805: PUSH
4806: LD_INT 22
4808: PUSH
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 255
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 58
4825: PUSH
4826: EMPTY
4827: LIST
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: PPUSH
4833: CALL_OW 69
4837: IN
4838: ST_TO_ADDR
// end ;
4839: LD_VAR 0 2
4843: RET
// export function IsNotFull ( building ) ; var places ; begin
4844: LD_INT 0
4846: PPUSH
4847: PPUSH
// if not building then
4848: LD_VAR 0 1
4852: NOT
4853: IFFALSE 4857
// exit ;
4855: GO 5028
// result := false ;
4857: LD_ADDR_VAR 0 2
4861: PUSH
4862: LD_INT 0
4864: ST_TO_ADDR
// places := 0 ;
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 0
4872: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 266
4882: PUSH
4883: LD_INT 0
4885: DOUBLE
4886: EQUAL
4887: IFTRUE 4945
4889: LD_INT 1
4891: DOUBLE
4892: EQUAL
4893: IFTRUE 4945
4895: LD_INT 6
4897: DOUBLE
4898: EQUAL
4899: IFTRUE 4945
4901: LD_INT 7
4903: DOUBLE
4904: EQUAL
4905: IFTRUE 4945
4907: LD_INT 8
4909: DOUBLE
4910: EQUAL
4911: IFTRUE 4945
4913: LD_INT 4
4915: DOUBLE
4916: EQUAL
4917: IFTRUE 4945
4919: LD_INT 5
4921: DOUBLE
4922: EQUAL
4923: IFTRUE 4945
4925: LD_INT 2
4927: DOUBLE
4928: EQUAL
4929: IFTRUE 4945
4931: LD_INT 3
4933: DOUBLE
4934: EQUAL
4935: IFTRUE 4945
4937: LD_INT 35
4939: DOUBLE
4940: EQUAL
4941: IFTRUE 4945
4943: GO 4956
4945: POP
// places := 6 ; b_bunker , b_breastwork :
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: LD_INT 6
4953: ST_TO_ADDR
4954: GO 5001
4956: LD_INT 32
4958: DOUBLE
4959: EQUAL
4960: IFTRUE 4970
4962: LD_INT 31
4964: DOUBLE
4965: EQUAL
4966: IFTRUE 4970
4968: GO 4981
4970: POP
// places := 1 ; b_control_tower :
4971: LD_ADDR_VAR 0 3
4975: PUSH
4976: LD_INT 1
4978: ST_TO_ADDR
4979: GO 5001
4981: LD_INT 36
4983: DOUBLE
4984: EQUAL
4985: IFTRUE 4989
4987: GO 5000
4989: POP
// places := 3 ; end ;
4990: LD_ADDR_VAR 0 3
4994: PUSH
4995: LD_INT 3
4997: ST_TO_ADDR
4998: GO 5001
5000: POP
// if places then
5001: LD_VAR 0 3
5005: IFFALSE 5028
// result := UnitsInside ( building ) < places ;
5007: LD_ADDR_VAR 0 2
5011: PUSH
5012: LD_VAR 0 1
5016: PPUSH
5017: CALL_OW 313
5021: PUSH
5022: LD_VAR 0 3
5026: LESS
5027: ST_TO_ADDR
// end ;
5028: LD_VAR 0 2
5032: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5033: LD_INT 0
5035: PPUSH
5036: PPUSH
5037: PPUSH
5038: PPUSH
// tmp := [ ] ;
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: EMPTY
5045: ST_TO_ADDR
// list := [ ] ;
5046: LD_ADDR_VAR 0 5
5050: PUSH
5051: EMPTY
5052: ST_TO_ADDR
// for i = 16 to 25 do
5053: LD_ADDR_VAR 0 4
5057: PUSH
5058: DOUBLE
5059: LD_INT 16
5061: DEC
5062: ST_TO_ADDR
5063: LD_INT 25
5065: PUSH
5066: FOR_TO
5067: IFFALSE 5140
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5069: LD_ADDR_VAR 0 3
5073: PUSH
5074: LD_VAR 0 3
5078: PUSH
5079: LD_INT 22
5081: PUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 255
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 91
5098: PUSH
5099: LD_VAR 0 1
5103: PUSH
5104: LD_INT 6
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: LD_INT 30
5114: PUSH
5115: LD_VAR 0 4
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: PPUSH
5132: CALL_OW 69
5136: ADD
5137: ST_TO_ADDR
5138: GO 5066
5140: POP
5141: POP
// for i = 1 to tmp do
5142: LD_ADDR_VAR 0 4
5146: PUSH
5147: DOUBLE
5148: LD_INT 1
5150: DEC
5151: ST_TO_ADDR
5152: LD_VAR 0 3
5156: PUSH
5157: FOR_TO
5158: IFFALSE 5246
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5160: LD_ADDR_VAR 0 5
5164: PUSH
5165: LD_VAR 0 5
5169: PUSH
5170: LD_VAR 0 3
5174: PUSH
5175: LD_VAR 0 4
5179: ARRAY
5180: PPUSH
5181: CALL_OW 266
5185: PUSH
5186: LD_VAR 0 3
5190: PUSH
5191: LD_VAR 0 4
5195: ARRAY
5196: PPUSH
5197: CALL_OW 250
5201: PUSH
5202: LD_VAR 0 3
5206: PUSH
5207: LD_VAR 0 4
5211: ARRAY
5212: PPUSH
5213: CALL_OW 251
5217: PUSH
5218: LD_VAR 0 3
5222: PUSH
5223: LD_VAR 0 4
5227: ARRAY
5228: PPUSH
5229: CALL_OW 254
5233: PUSH
5234: EMPTY
5235: LIST
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: EMPTY
5241: LIST
5242: ADD
5243: ST_TO_ADDR
5244: GO 5157
5246: POP
5247: POP
// result := list ;
5248: LD_ADDR_VAR 0 2
5252: PUSH
5253: LD_VAR 0 5
5257: ST_TO_ADDR
// end ;
5258: LD_VAR 0 2
5262: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
// if not factory then
5272: LD_VAR 0 1
5276: NOT
5277: IFFALSE 5281
// exit ;
5279: GO 5874
// if control = control_apeman then
5281: LD_VAR 0 4
5285: PUSH
5286: LD_INT 5
5288: EQUAL
5289: IFFALSE 5398
// begin tmp := UnitsInside ( factory ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 313
5305: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5306: LD_VAR 0 8
5310: PPUSH
5311: LD_INT 25
5313: PUSH
5314: LD_INT 12
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PPUSH
5321: CALL_OW 72
5325: NOT
5326: IFFALSE 5336
// control := control_manual ;
5328: LD_ADDR_VAR 0 4
5332: PUSH
5333: LD_INT 1
5335: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5336: LD_ADDR_VAR 0 8
5340: PUSH
5341: LD_VAR 0 1
5345: PPUSH
5346: CALL 5033 0 1
5350: ST_TO_ADDR
// if tmp then
5351: LD_VAR 0 8
5355: IFFALSE 5398
// begin for i in tmp do
5357: LD_ADDR_VAR 0 7
5361: PUSH
5362: LD_VAR 0 8
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5396
// if i [ 1 ] = b_ext_radio then
5370: LD_VAR 0 7
5374: PUSH
5375: LD_INT 1
5377: ARRAY
5378: PUSH
5379: LD_INT 22
5381: EQUAL
5382: IFFALSE 5394
// begin control := control_remote ;
5384: LD_ADDR_VAR 0 4
5388: PUSH
5389: LD_INT 2
5391: ST_TO_ADDR
// break ;
5392: GO 5396
// end ;
5394: GO 5367
5396: POP
5397: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5398: LD_VAR 0 1
5402: PPUSH
5403: LD_VAR 0 2
5407: PPUSH
5408: LD_VAR 0 3
5412: PPUSH
5413: LD_VAR 0 4
5417: PPUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: CALL_OW 448
5427: IFFALSE 5462
// begin result := [ chassis , engine , control , weapon ] ;
5429: LD_ADDR_VAR 0 6
5433: PUSH
5434: LD_VAR 0 2
5438: PUSH
5439: LD_VAR 0 3
5443: PUSH
5444: LD_VAR 0 4
5448: PUSH
5449: LD_VAR 0 5
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: ST_TO_ADDR
// exit ;
5460: GO 5874
// end ; _chassis := AvailableChassisList ( factory ) ;
5462: LD_ADDR_VAR 0 9
5466: PUSH
5467: LD_VAR 0 1
5471: PPUSH
5472: CALL_OW 475
5476: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5477: LD_ADDR_VAR 0 11
5481: PUSH
5482: LD_VAR 0 1
5486: PPUSH
5487: CALL_OW 476
5491: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5492: LD_ADDR_VAR 0 12
5496: PUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 477
5506: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5507: LD_ADDR_VAR 0 10
5511: PUSH
5512: LD_VAR 0 1
5516: PPUSH
5517: CALL_OW 478
5521: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5522: LD_VAR 0 9
5526: NOT
5527: PUSH
5528: LD_VAR 0 11
5532: NOT
5533: OR
5534: PUSH
5535: LD_VAR 0 12
5539: NOT
5540: OR
5541: PUSH
5542: LD_VAR 0 10
5546: NOT
5547: OR
5548: IFFALSE 5583
// begin result := [ chassis , engine , control , weapon ] ;
5550: LD_ADDR_VAR 0 6
5554: PUSH
5555: LD_VAR 0 2
5559: PUSH
5560: LD_VAR 0 3
5564: PUSH
5565: LD_VAR 0 4
5569: PUSH
5570: LD_VAR 0 5
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: ST_TO_ADDR
// exit ;
5581: GO 5874
// end ; if not chassis in _chassis then
5583: LD_VAR 0 2
5587: PUSH
5588: LD_VAR 0 9
5592: IN
5593: NOT
5594: IFFALSE 5620
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5596: LD_ADDR_VAR 0 2
5600: PUSH
5601: LD_VAR 0 9
5605: PUSH
5606: LD_INT 1
5608: PPUSH
5609: LD_VAR 0 9
5613: PPUSH
5614: CALL_OW 12
5618: ARRAY
5619: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5620: LD_VAR 0 2
5624: PPUSH
5625: LD_VAR 0 3
5629: PPUSH
5630: CALL 5879 0 2
5634: NOT
5635: IFFALSE 5694
// repeat engine := _engine [ 1 ] ;
5637: LD_ADDR_VAR 0 3
5641: PUSH
5642: LD_VAR 0 11
5646: PUSH
5647: LD_INT 1
5649: ARRAY
5650: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5651: LD_ADDR_VAR 0 11
5655: PUSH
5656: LD_VAR 0 11
5660: PPUSH
5661: LD_INT 1
5663: PPUSH
5664: CALL_OW 3
5668: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5669: LD_VAR 0 2
5673: PPUSH
5674: LD_VAR 0 3
5678: PPUSH
5679: CALL 5879 0 2
5683: PUSH
5684: LD_VAR 0 11
5688: PUSH
5689: EMPTY
5690: EQUAL
5691: OR
5692: IFFALSE 5637
// if not control in _control then
5694: LD_VAR 0 4
5698: PUSH
5699: LD_VAR 0 12
5703: IN
5704: NOT
5705: IFFALSE 5731
// control := _control [ rand ( 1 , _control ) ] ;
5707: LD_ADDR_VAR 0 4
5711: PUSH
5712: LD_VAR 0 12
5716: PUSH
5717: LD_INT 1
5719: PPUSH
5720: LD_VAR 0 12
5724: PPUSH
5725: CALL_OW 12
5729: ARRAY
5730: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 5
5740: PPUSH
5741: CALL 6099 0 2
5745: NOT
5746: IFFALSE 5805
// repeat weapon := _weapon [ 1 ] ;
5748: LD_ADDR_VAR 0 5
5752: PUSH
5753: LD_VAR 0 10
5757: PUSH
5758: LD_INT 1
5760: ARRAY
5761: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5762: LD_ADDR_VAR 0 10
5766: PUSH
5767: LD_VAR 0 10
5771: PPUSH
5772: LD_INT 1
5774: PPUSH
5775: CALL_OW 3
5779: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
5780: LD_VAR 0 2
5784: PPUSH
5785: LD_VAR 0 5
5789: PPUSH
5790: CALL 6099 0 2
5794: PUSH
5795: LD_VAR 0 10
5799: PUSH
5800: EMPTY
5801: EQUAL
5802: OR
5803: IFFALSE 5748
// result := [ ] ;
5805: LD_ADDR_VAR 0 6
5809: PUSH
5810: EMPTY
5811: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: LD_VAR 0 2
5821: PPUSH
5822: LD_VAR 0 3
5826: PPUSH
5827: LD_VAR 0 4
5831: PPUSH
5832: LD_VAR 0 5
5836: PPUSH
5837: CALL_OW 448
5841: IFFALSE 5874
// result := [ chassis , engine , control , weapon ] ;
5843: LD_ADDR_VAR 0 6
5847: PUSH
5848: LD_VAR 0 2
5852: PUSH
5853: LD_VAR 0 3
5857: PUSH
5858: LD_VAR 0 4
5862: PUSH
5863: LD_VAR 0 5
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: ST_TO_ADDR
// end ;
5874: LD_VAR 0 6
5878: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
5879: LD_INT 0
5881: PPUSH
// if not chassis or not engine then
5882: LD_VAR 0 1
5886: NOT
5887: PUSH
5888: LD_VAR 0 2
5892: NOT
5893: OR
5894: IFFALSE 5898
// exit ;
5896: GO 6094
// case engine of engine_solar :
5898: LD_VAR 0 2
5902: PUSH
5903: LD_INT 2
5905: DOUBLE
5906: EQUAL
5907: IFTRUE 5911
5909: GO 5949
5911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
5912: LD_ADDR_VAR 0 3
5916: PUSH
5917: LD_INT 11
5919: PUSH
5920: LD_INT 12
5922: PUSH
5923: LD_INT 13
5925: PUSH
5926: LD_INT 14
5928: PUSH
5929: LD_INT 1
5931: PUSH
5932: LD_INT 2
5934: PUSH
5935: LD_INT 3
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: LIST
5944: LIST
5945: LIST
5946: ST_TO_ADDR
5947: GO 6078
5949: LD_INT 1
5951: DOUBLE
5952: EQUAL
5953: IFTRUE 5957
5955: GO 6019
5957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
5958: LD_ADDR_VAR 0 3
5962: PUSH
5963: LD_INT 11
5965: PUSH
5966: LD_INT 12
5968: PUSH
5969: LD_INT 13
5971: PUSH
5972: LD_INT 14
5974: PUSH
5975: LD_INT 1
5977: PUSH
5978: LD_INT 2
5980: PUSH
5981: LD_INT 3
5983: PUSH
5984: LD_INT 4
5986: PUSH
5987: LD_INT 5
5989: PUSH
5990: LD_INT 21
5992: PUSH
5993: LD_INT 23
5995: PUSH
5996: LD_INT 22
5998: PUSH
5999: LD_INT 24
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: LIST
6012: LIST
6013: LIST
6014: LIST
6015: LIST
6016: ST_TO_ADDR
6017: GO 6078
6019: LD_INT 3
6021: DOUBLE
6022: EQUAL
6023: IFTRUE 6027
6025: GO 6077
6027: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 13
6035: PUSH
6036: LD_INT 14
6038: PUSH
6039: LD_INT 2
6041: PUSH
6042: LD_INT 3
6044: PUSH
6045: LD_INT 4
6047: PUSH
6048: LD_INT 5
6050: PUSH
6051: LD_INT 21
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_INT 23
6059: PUSH
6060: LD_INT 24
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: ST_TO_ADDR
6075: GO 6078
6077: POP
// result := ( chassis in result ) ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_VAR 0 1
6087: PUSH
6088: LD_VAR 0 3
6092: IN
6093: ST_TO_ADDR
// end ;
6094: LD_VAR 0 3
6098: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6099: LD_INT 0
6101: PPUSH
// if not chassis or not weapon then
6102: LD_VAR 0 1
6106: NOT
6107: PUSH
6108: LD_VAR 0 2
6112: NOT
6113: OR
6114: IFFALSE 6118
// exit ;
6116: GO 7180
// case weapon of us_machine_gun :
6118: LD_VAR 0 2
6122: PUSH
6123: LD_INT 2
6125: DOUBLE
6126: EQUAL
6127: IFTRUE 6131
6129: GO 6161
6131: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6132: LD_ADDR_VAR 0 3
6136: PUSH
6137: LD_INT 1
6139: PUSH
6140: LD_INT 2
6142: PUSH
6143: LD_INT 3
6145: PUSH
6146: LD_INT 4
6148: PUSH
6149: LD_INT 5
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: ST_TO_ADDR
6159: GO 7164
6161: LD_INT 3
6163: DOUBLE
6164: EQUAL
6165: IFTRUE 6169
6167: GO 6199
6169: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6170: LD_ADDR_VAR 0 3
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: LD_INT 2
6180: PUSH
6181: LD_INT 3
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: ST_TO_ADDR
6197: GO 7164
6199: LD_INT 11
6201: DOUBLE
6202: EQUAL
6203: IFTRUE 6207
6205: GO 6237
6207: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6208: LD_ADDR_VAR 0 3
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: LD_INT 2
6218: PUSH
6219: LD_INT 3
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: LD_INT 5
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: ST_TO_ADDR
6235: GO 7164
6237: LD_INT 4
6239: DOUBLE
6240: EQUAL
6241: IFTRUE 6245
6243: GO 6271
6245: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: LD_INT 3
6256: PUSH
6257: LD_INT 4
6259: PUSH
6260: LD_INT 5
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: ST_TO_ADDR
6269: GO 7164
6271: LD_INT 5
6273: DOUBLE
6274: EQUAL
6275: IFTRUE 6279
6277: GO 6305
6279: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_INT 2
6287: PUSH
6288: LD_INT 3
6290: PUSH
6291: LD_INT 4
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: ST_TO_ADDR
6303: GO 7164
6305: LD_INT 9
6307: DOUBLE
6308: EQUAL
6309: IFTRUE 6313
6311: GO 6339
6313: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6314: LD_ADDR_VAR 0 3
6318: PUSH
6319: LD_INT 2
6321: PUSH
6322: LD_INT 3
6324: PUSH
6325: LD_INT 4
6327: PUSH
6328: LD_INT 5
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: ST_TO_ADDR
6337: GO 7164
6339: LD_INT 7
6341: DOUBLE
6342: EQUAL
6343: IFTRUE 6347
6345: GO 6373
6347: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6348: LD_ADDR_VAR 0 3
6352: PUSH
6353: LD_INT 2
6355: PUSH
6356: LD_INT 3
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: LD_INT 5
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: ST_TO_ADDR
6371: GO 7164
6373: LD_INT 12
6375: DOUBLE
6376: EQUAL
6377: IFTRUE 6381
6379: GO 6407
6381: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6382: LD_ADDR_VAR 0 3
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 3
6392: PUSH
6393: LD_INT 4
6395: PUSH
6396: LD_INT 5
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: ST_TO_ADDR
6405: GO 7164
6407: LD_INT 13
6409: DOUBLE
6410: EQUAL
6411: IFTRUE 6415
6413: GO 6441
6415: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6416: LD_ADDR_VAR 0 3
6420: PUSH
6421: LD_INT 2
6423: PUSH
6424: LD_INT 3
6426: PUSH
6427: LD_INT 4
6429: PUSH
6430: LD_INT 5
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: ST_TO_ADDR
6439: GO 7164
6441: LD_INT 14
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6467
6449: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6450: LD_ADDR_VAR 0 3
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: ST_TO_ADDR
6465: GO 7164
6467: LD_INT 6
6469: DOUBLE
6470: EQUAL
6471: IFTRUE 6475
6473: GO 6493
6475: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6476: LD_ADDR_VAR 0 3
6480: PUSH
6481: LD_INT 4
6483: PUSH
6484: LD_INT 5
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: ST_TO_ADDR
6491: GO 7164
6493: LD_INT 10
6495: DOUBLE
6496: EQUAL
6497: IFTRUE 6501
6499: GO 6519
6501: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6502: LD_ADDR_VAR 0 3
6506: PUSH
6507: LD_INT 4
6509: PUSH
6510: LD_INT 5
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: ST_TO_ADDR
6517: GO 7164
6519: LD_INT 22
6521: DOUBLE
6522: EQUAL
6523: IFTRUE 6527
6525: GO 6553
6527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6528: LD_ADDR_VAR 0 3
6532: PUSH
6533: LD_INT 11
6535: PUSH
6536: LD_INT 12
6538: PUSH
6539: LD_INT 13
6541: PUSH
6542: LD_INT 14
6544: PUSH
6545: EMPTY
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: ST_TO_ADDR
6551: GO 7164
6553: LD_INT 23
6555: DOUBLE
6556: EQUAL
6557: IFTRUE 6561
6559: GO 6587
6561: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6562: LD_ADDR_VAR 0 3
6566: PUSH
6567: LD_INT 11
6569: PUSH
6570: LD_INT 12
6572: PUSH
6573: LD_INT 13
6575: PUSH
6576: LD_INT 14
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: ST_TO_ADDR
6585: GO 7164
6587: LD_INT 24
6589: DOUBLE
6590: EQUAL
6591: IFTRUE 6595
6593: GO 6621
6595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6596: LD_ADDR_VAR 0 3
6600: PUSH
6601: LD_INT 11
6603: PUSH
6604: LD_INT 12
6606: PUSH
6607: LD_INT 13
6609: PUSH
6610: LD_INT 14
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: ST_TO_ADDR
6619: GO 7164
6621: LD_INT 30
6623: DOUBLE
6624: EQUAL
6625: IFTRUE 6629
6627: GO 6655
6629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6630: LD_ADDR_VAR 0 3
6634: PUSH
6635: LD_INT 11
6637: PUSH
6638: LD_INT 12
6640: PUSH
6641: LD_INT 13
6643: PUSH
6644: LD_INT 14
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: ST_TO_ADDR
6653: GO 7164
6655: LD_INT 25
6657: DOUBLE
6658: EQUAL
6659: IFTRUE 6663
6661: GO 6681
6663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6664: LD_ADDR_VAR 0 3
6668: PUSH
6669: LD_INT 13
6671: PUSH
6672: LD_INT 14
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7164
6681: LD_INT 27
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6707
6689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 13
6697: PUSH
6698: LD_INT 14
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: ST_TO_ADDR
6705: GO 7164
6707: LD_EXP 26
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6743
6717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6718: LD_ADDR_VAR 0 3
6722: PUSH
6723: LD_INT 11
6725: PUSH
6726: LD_INT 12
6728: PUSH
6729: LD_INT 13
6731: PUSH
6732: LD_INT 14
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: ST_TO_ADDR
6741: GO 7164
6743: LD_INT 28
6745: DOUBLE
6746: EQUAL
6747: IFTRUE 6751
6749: GO 6769
6751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6752: LD_ADDR_VAR 0 3
6756: PUSH
6757: LD_INT 13
6759: PUSH
6760: LD_INT 14
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: ST_TO_ADDR
6767: GO 7164
6769: LD_INT 29
6771: DOUBLE
6772: EQUAL
6773: IFTRUE 6777
6775: GO 6795
6777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
6778: LD_ADDR_VAR 0 3
6782: PUSH
6783: LD_INT 13
6785: PUSH
6786: LD_INT 14
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: ST_TO_ADDR
6793: GO 7164
6795: LD_INT 31
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6821
6803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
6804: LD_ADDR_VAR 0 3
6808: PUSH
6809: LD_INT 13
6811: PUSH
6812: LD_INT 14
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: ST_TO_ADDR
6819: GO 7164
6821: LD_INT 26
6823: DOUBLE
6824: EQUAL
6825: IFTRUE 6829
6827: GO 6847
6829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
6830: LD_ADDR_VAR 0 3
6834: PUSH
6835: LD_INT 13
6837: PUSH
6838: LD_INT 14
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: ST_TO_ADDR
6845: GO 7164
6847: LD_INT 42
6849: DOUBLE
6850: EQUAL
6851: IFTRUE 6855
6853: GO 6881
6855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
6856: LD_ADDR_VAR 0 3
6860: PUSH
6861: LD_INT 21
6863: PUSH
6864: LD_INT 22
6866: PUSH
6867: LD_INT 23
6869: PUSH
6870: LD_INT 24
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: ST_TO_ADDR
6879: GO 7164
6881: LD_INT 43
6883: DOUBLE
6884: EQUAL
6885: IFTRUE 6889
6887: GO 6915
6889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
6890: LD_ADDR_VAR 0 3
6894: PUSH
6895: LD_INT 21
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_INT 23
6903: PUSH
6904: LD_INT 24
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: ST_TO_ADDR
6913: GO 7164
6915: LD_INT 44
6917: DOUBLE
6918: EQUAL
6919: IFTRUE 6923
6921: GO 6949
6923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
6924: LD_ADDR_VAR 0 3
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 22
6934: PUSH
6935: LD_INT 23
6937: PUSH
6938: LD_INT 24
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: ST_TO_ADDR
6947: GO 7164
6949: LD_INT 45
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 6983
6957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
6958: LD_ADDR_VAR 0 3
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 23
6971: PUSH
6972: LD_INT 24
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 7164
6983: LD_INT 49
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7017
6991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
6992: LD_ADDR_VAR 0 3
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_INT 23
7005: PUSH
7006: LD_INT 24
7008: PUSH
7009: EMPTY
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: ST_TO_ADDR
7015: GO 7164
7017: LD_INT 51
7019: DOUBLE
7020: EQUAL
7021: IFTRUE 7025
7023: GO 7051
7025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7026: LD_ADDR_VAR 0 3
7030: PUSH
7031: LD_INT 21
7033: PUSH
7034: LD_INT 22
7036: PUSH
7037: LD_INT 23
7039: PUSH
7040: LD_INT 24
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: ST_TO_ADDR
7049: GO 7164
7051: LD_INT 52
7053: DOUBLE
7054: EQUAL
7055: IFTRUE 7059
7057: GO 7085
7059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_INT 21
7067: PUSH
7068: LD_INT 22
7070: PUSH
7071: LD_INT 23
7073: PUSH
7074: LD_INT 24
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: ST_TO_ADDR
7083: GO 7164
7085: LD_INT 53
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7111
7093: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7094: LD_ADDR_VAR 0 3
7098: PUSH
7099: LD_INT 23
7101: PUSH
7102: LD_INT 24
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: ST_TO_ADDR
7109: GO 7164
7111: LD_INT 46
7113: DOUBLE
7114: EQUAL
7115: IFTRUE 7119
7117: GO 7137
7119: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7120: LD_ADDR_VAR 0 3
7124: PUSH
7125: LD_INT 23
7127: PUSH
7128: LD_INT 24
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: ST_TO_ADDR
7135: GO 7164
7137: LD_INT 47
7139: DOUBLE
7140: EQUAL
7141: IFTRUE 7145
7143: GO 7163
7145: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7146: LD_ADDR_VAR 0 3
7150: PUSH
7151: LD_INT 23
7153: PUSH
7154: LD_INT 24
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: ST_TO_ADDR
7161: GO 7164
7163: POP
// result := ( chassis in result ) ;
7164: LD_ADDR_VAR 0 3
7168: PUSH
7169: LD_VAR 0 1
7173: PUSH
7174: LD_VAR 0 3
7178: IN
7179: ST_TO_ADDR
// end ;
7180: LD_VAR 0 3
7184: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7185: LD_INT 0
7187: PPUSH
7188: PPUSH
7189: PPUSH
7190: PPUSH
7191: PPUSH
7192: PPUSH
7193: PPUSH
// result := array ;
7194: LD_ADDR_VAR 0 5
7198: PUSH
7199: LD_VAR 0 1
7203: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7204: LD_VAR 0 1
7208: NOT
7209: PUSH
7210: LD_VAR 0 2
7214: NOT
7215: OR
7216: PUSH
7217: LD_VAR 0 3
7221: NOT
7222: OR
7223: PUSH
7224: LD_VAR 0 2
7228: PUSH
7229: LD_VAR 0 1
7233: GREATER
7234: OR
7235: PUSH
7236: LD_VAR 0 3
7240: PUSH
7241: LD_VAR 0 1
7245: GREATER
7246: OR
7247: IFFALSE 7251
// exit ;
7249: GO 7547
// if direction then
7251: LD_VAR 0 4
7255: IFFALSE 7319
// begin d := 1 ;
7257: LD_ADDR_VAR 0 9
7261: PUSH
7262: LD_INT 1
7264: ST_TO_ADDR
// if i_from > i_to then
7265: LD_VAR 0 2
7269: PUSH
7270: LD_VAR 0 3
7274: GREATER
7275: IFFALSE 7301
// length := ( array - i_from ) + i_to else
7277: LD_ADDR_VAR 0 11
7281: PUSH
7282: LD_VAR 0 1
7286: PUSH
7287: LD_VAR 0 2
7291: MINUS
7292: PUSH
7293: LD_VAR 0 3
7297: PLUS
7298: ST_TO_ADDR
7299: GO 7317
// length := i_to - i_from ;
7301: LD_ADDR_VAR 0 11
7305: PUSH
7306: LD_VAR 0 3
7310: PUSH
7311: LD_VAR 0 2
7315: MINUS
7316: ST_TO_ADDR
// end else
7317: GO 7380
// begin d := - 1 ;
7319: LD_ADDR_VAR 0 9
7323: PUSH
7324: LD_INT 1
7326: NEG
7327: ST_TO_ADDR
// if i_from > i_to then
7328: LD_VAR 0 2
7332: PUSH
7333: LD_VAR 0 3
7337: GREATER
7338: IFFALSE 7358
// length := i_from - i_to else
7340: LD_ADDR_VAR 0 11
7344: PUSH
7345: LD_VAR 0 2
7349: PUSH
7350: LD_VAR 0 3
7354: MINUS
7355: ST_TO_ADDR
7356: GO 7380
// length := ( array - i_to ) + i_from ;
7358: LD_ADDR_VAR 0 11
7362: PUSH
7363: LD_VAR 0 1
7367: PUSH
7368: LD_VAR 0 3
7372: MINUS
7373: PUSH
7374: LD_VAR 0 2
7378: PLUS
7379: ST_TO_ADDR
// end ; if not length then
7380: LD_VAR 0 11
7384: NOT
7385: IFFALSE 7389
// exit ;
7387: GO 7547
// tmp := array ;
7389: LD_ADDR_VAR 0 10
7393: PUSH
7394: LD_VAR 0 1
7398: ST_TO_ADDR
// for i = 1 to length do
7399: LD_ADDR_VAR 0 6
7403: PUSH
7404: DOUBLE
7405: LD_INT 1
7407: DEC
7408: ST_TO_ADDR
7409: LD_VAR 0 11
7413: PUSH
7414: FOR_TO
7415: IFFALSE 7535
// begin for j = 1 to array do
7417: LD_ADDR_VAR 0 7
7421: PUSH
7422: DOUBLE
7423: LD_INT 1
7425: DEC
7426: ST_TO_ADDR
7427: LD_VAR 0 1
7431: PUSH
7432: FOR_TO
7433: IFFALSE 7521
// begin k := j + d ;
7435: LD_ADDR_VAR 0 8
7439: PUSH
7440: LD_VAR 0 7
7444: PUSH
7445: LD_VAR 0 9
7449: PLUS
7450: ST_TO_ADDR
// if k > array then
7451: LD_VAR 0 8
7455: PUSH
7456: LD_VAR 0 1
7460: GREATER
7461: IFFALSE 7471
// k := 1 ;
7463: LD_ADDR_VAR 0 8
7467: PUSH
7468: LD_INT 1
7470: ST_TO_ADDR
// if not k then
7471: LD_VAR 0 8
7475: NOT
7476: IFFALSE 7488
// k := array ;
7478: LD_ADDR_VAR 0 8
7482: PUSH
7483: LD_VAR 0 1
7487: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7488: LD_ADDR_VAR 0 10
7492: PUSH
7493: LD_VAR 0 10
7497: PPUSH
7498: LD_VAR 0 8
7502: PPUSH
7503: LD_VAR 0 1
7507: PUSH
7508: LD_VAR 0 7
7512: ARRAY
7513: PPUSH
7514: CALL_OW 1
7518: ST_TO_ADDR
// end ;
7519: GO 7432
7521: POP
7522: POP
// array := tmp ;
7523: LD_ADDR_VAR 0 1
7527: PUSH
7528: LD_VAR 0 10
7532: ST_TO_ADDR
// end ;
7533: GO 7414
7535: POP
7536: POP
// result := array ;
7537: LD_ADDR_VAR 0 5
7541: PUSH
7542: LD_VAR 0 1
7546: ST_TO_ADDR
// end ;
7547: LD_VAR 0 5
7551: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7552: LD_INT 0
7554: PPUSH
7555: PPUSH
// result := 0 ;
7556: LD_ADDR_VAR 0 3
7560: PUSH
7561: LD_INT 0
7563: ST_TO_ADDR
// if not array or not value in array then
7564: LD_VAR 0 1
7568: NOT
7569: PUSH
7570: LD_VAR 0 2
7574: PUSH
7575: LD_VAR 0 1
7579: IN
7580: NOT
7581: OR
7582: IFFALSE 7586
// exit ;
7584: GO 7640
// for i = 1 to array do
7586: LD_ADDR_VAR 0 4
7590: PUSH
7591: DOUBLE
7592: LD_INT 1
7594: DEC
7595: ST_TO_ADDR
7596: LD_VAR 0 1
7600: PUSH
7601: FOR_TO
7602: IFFALSE 7638
// if value = array [ i ] then
7604: LD_VAR 0 2
7608: PUSH
7609: LD_VAR 0 1
7613: PUSH
7614: LD_VAR 0 4
7618: ARRAY
7619: EQUAL
7620: IFFALSE 7636
// begin result := i ;
7622: LD_ADDR_VAR 0 3
7626: PUSH
7627: LD_VAR 0 4
7631: ST_TO_ADDR
// exit ;
7632: POP
7633: POP
7634: GO 7640
// end ;
7636: GO 7601
7638: POP
7639: POP
// end ;
7640: LD_VAR 0 3
7644: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7645: LD_INT 0
7647: PPUSH
// vc_chassis := chassis ;
7648: LD_ADDR_OWVAR 37
7652: PUSH
7653: LD_VAR 0 1
7657: ST_TO_ADDR
// vc_engine := engine ;
7658: LD_ADDR_OWVAR 39
7662: PUSH
7663: LD_VAR 0 2
7667: ST_TO_ADDR
// vc_control := control ;
7668: LD_ADDR_OWVAR 38
7672: PUSH
7673: LD_VAR 0 3
7677: ST_TO_ADDR
// vc_weapon := weapon ;
7678: LD_ADDR_OWVAR 40
7682: PUSH
7683: LD_VAR 0 4
7687: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7688: LD_ADDR_OWVAR 41
7692: PUSH
7693: LD_VAR 0 5
7697: ST_TO_ADDR
// end ;
7698: LD_VAR 0 6
7702: RET
// export function WantPlant ( unit ) ; var task ; begin
7703: LD_INT 0
7705: PPUSH
7706: PPUSH
// result := false ;
7707: LD_ADDR_VAR 0 2
7711: PUSH
7712: LD_INT 0
7714: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7715: LD_ADDR_VAR 0 3
7719: PUSH
7720: LD_VAR 0 1
7724: PPUSH
7725: CALL_OW 437
7729: ST_TO_ADDR
// if task then
7730: LD_VAR 0 3
7734: IFFALSE 7762
// if task [ 1 ] [ 1 ] = p then
7736: LD_VAR 0 3
7740: PUSH
7741: LD_INT 1
7743: ARRAY
7744: PUSH
7745: LD_INT 1
7747: ARRAY
7748: PUSH
7749: LD_STRING p
7751: EQUAL
7752: IFFALSE 7762
// result := true ;
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// end ;
7762: LD_VAR 0 2
7766: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
7767: LD_INT 0
7769: PPUSH
7770: PPUSH
7771: PPUSH
7772: PPUSH
// if pos < 1 then
7773: LD_VAR 0 2
7777: PUSH
7778: LD_INT 1
7780: LESS
7781: IFFALSE 7785
// exit ;
7783: GO 8088
// if pos = 1 then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_INT 1
7792: EQUAL
7793: IFFALSE 7826
// result := Replace ( arr , pos [ 1 ] , value ) else
7795: LD_ADDR_VAR 0 4
7799: PUSH
7800: LD_VAR 0 1
7804: PPUSH
7805: LD_VAR 0 2
7809: PUSH
7810: LD_INT 1
7812: ARRAY
7813: PPUSH
7814: LD_VAR 0 3
7818: PPUSH
7819: CALL_OW 1
7823: ST_TO_ADDR
7824: GO 8088
// begin tmp := arr ;
7826: LD_ADDR_VAR 0 6
7830: PUSH
7831: LD_VAR 0 1
7835: ST_TO_ADDR
// s_arr := [ tmp ] ;
7836: LD_ADDR_VAR 0 7
7840: PUSH
7841: LD_VAR 0 6
7845: PUSH
7846: EMPTY
7847: LIST
7848: ST_TO_ADDR
// for i = 1 to pos - 1 do
7849: LD_ADDR_VAR 0 5
7853: PUSH
7854: DOUBLE
7855: LD_INT 1
7857: DEC
7858: ST_TO_ADDR
7859: LD_VAR 0 2
7863: PUSH
7864: LD_INT 1
7866: MINUS
7867: PUSH
7868: FOR_TO
7869: IFFALSE 7914
// begin tmp := tmp [ pos [ i ] ] ;
7871: LD_ADDR_VAR 0 6
7875: PUSH
7876: LD_VAR 0 6
7880: PUSH
7881: LD_VAR 0 2
7885: PUSH
7886: LD_VAR 0 5
7890: ARRAY
7891: ARRAY
7892: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
7893: LD_ADDR_VAR 0 7
7897: PUSH
7898: LD_VAR 0 7
7902: PUSH
7903: LD_VAR 0 6
7907: PUSH
7908: EMPTY
7909: LIST
7910: ADD
7911: ST_TO_ADDR
// end ;
7912: GO 7868
7914: POP
7915: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
7916: LD_ADDR_VAR 0 6
7920: PUSH
7921: LD_VAR 0 6
7925: PPUSH
7926: LD_VAR 0 2
7930: PUSH
7931: LD_VAR 0 2
7935: ARRAY
7936: PPUSH
7937: LD_VAR 0 3
7941: PPUSH
7942: CALL_OW 1
7946: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
7947: LD_ADDR_VAR 0 7
7951: PUSH
7952: LD_VAR 0 7
7956: PPUSH
7957: LD_VAR 0 7
7961: PPUSH
7962: LD_VAR 0 6
7966: PPUSH
7967: CALL_OW 1
7971: ST_TO_ADDR
// for i = s_arr downto 2 do
7972: LD_ADDR_VAR 0 5
7976: PUSH
7977: DOUBLE
7978: LD_VAR 0 7
7982: INC
7983: ST_TO_ADDR
7984: LD_INT 2
7986: PUSH
7987: FOR_DOWNTO
7988: IFFALSE 8072
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
7990: LD_ADDR_VAR 0 6
7994: PUSH
7995: LD_VAR 0 7
7999: PUSH
8000: LD_VAR 0 5
8004: PUSH
8005: LD_INT 1
8007: MINUS
8008: ARRAY
8009: PPUSH
8010: LD_VAR 0 2
8014: PUSH
8015: LD_VAR 0 5
8019: PUSH
8020: LD_INT 1
8022: MINUS
8023: ARRAY
8024: PPUSH
8025: LD_VAR 0 7
8029: PUSH
8030: LD_VAR 0 5
8034: ARRAY
8035: PPUSH
8036: CALL_OW 1
8040: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8041: LD_ADDR_VAR 0 7
8045: PUSH
8046: LD_VAR 0 7
8050: PPUSH
8051: LD_VAR 0 5
8055: PUSH
8056: LD_INT 1
8058: MINUS
8059: PPUSH
8060: LD_VAR 0 6
8064: PPUSH
8065: CALL_OW 1
8069: ST_TO_ADDR
// end ;
8070: GO 7987
8072: POP
8073: POP
// result := s_arr [ 1 ] ;
8074: LD_ADDR_VAR 0 4
8078: PUSH
8079: LD_VAR 0 7
8083: PUSH
8084: LD_INT 1
8086: ARRAY
8087: ST_TO_ADDR
// end ; end ;
8088: LD_VAR 0 4
8092: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8093: LD_INT 0
8095: PPUSH
8096: PPUSH
// if not list then
8097: LD_VAR 0 1
8101: NOT
8102: IFFALSE 8106
// exit ;
8104: GO 8197
// i := list [ pos1 ] ;
8106: LD_ADDR_VAR 0 5
8110: PUSH
8111: LD_VAR 0 1
8115: PUSH
8116: LD_VAR 0 2
8120: ARRAY
8121: ST_TO_ADDR
// if not i then
8122: LD_VAR 0 5
8126: NOT
8127: IFFALSE 8131
// exit ;
8129: GO 8197
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8131: LD_ADDR_VAR 0 1
8135: PUSH
8136: LD_VAR 0 1
8140: PPUSH
8141: LD_VAR 0 2
8145: PPUSH
8146: LD_VAR 0 1
8150: PUSH
8151: LD_VAR 0 3
8155: ARRAY
8156: PPUSH
8157: CALL_OW 1
8161: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8162: LD_ADDR_VAR 0 1
8166: PUSH
8167: LD_VAR 0 1
8171: PPUSH
8172: LD_VAR 0 3
8176: PPUSH
8177: LD_VAR 0 5
8181: PPUSH
8182: CALL_OW 1
8186: ST_TO_ADDR
// result := list ;
8187: LD_ADDR_VAR 0 4
8191: PUSH
8192: LD_VAR 0 1
8196: ST_TO_ADDR
// end ;
8197: LD_VAR 0 4
8201: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8202: LD_INT 0
8204: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8205: LD_ADDR_VAR 0 5
8209: PUSH
8210: LD_VAR 0 1
8214: PPUSH
8215: CALL_OW 250
8219: PPUSH
8220: LD_VAR 0 1
8224: PPUSH
8225: CALL_OW 251
8229: PPUSH
8230: LD_VAR 0 2
8234: PPUSH
8235: LD_VAR 0 3
8239: PPUSH
8240: LD_VAR 0 4
8244: PPUSH
8245: CALL 8255 0 5
8249: ST_TO_ADDR
// end ;
8250: LD_VAR 0 5
8254: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8255: LD_INT 0
8257: PPUSH
8258: PPUSH
8259: PPUSH
8260: PPUSH
// if not list then
8261: LD_VAR 0 3
8265: NOT
8266: IFFALSE 8270
// exit ;
8268: GO 8658
// result := [ ] ;
8270: LD_ADDR_VAR 0 6
8274: PUSH
8275: EMPTY
8276: ST_TO_ADDR
// for i in list do
8277: LD_ADDR_VAR 0 7
8281: PUSH
8282: LD_VAR 0 3
8286: PUSH
8287: FOR_IN
8288: IFFALSE 8490
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8290: LD_ADDR_VAR 0 9
8294: PUSH
8295: LD_VAR 0 7
8299: PPUSH
8300: LD_VAR 0 1
8304: PPUSH
8305: LD_VAR 0 2
8309: PPUSH
8310: CALL_OW 297
8314: ST_TO_ADDR
// if not result then
8315: LD_VAR 0 6
8319: NOT
8320: IFFALSE 8346
// result := [ [ i , tmp ] ] else
8322: LD_ADDR_VAR 0 6
8326: PUSH
8327: LD_VAR 0 7
8331: PUSH
8332: LD_VAR 0 9
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: EMPTY
8342: LIST
8343: ST_TO_ADDR
8344: GO 8488
// begin if result [ result ] [ 2 ] < tmp then
8346: LD_VAR 0 6
8350: PUSH
8351: LD_VAR 0 6
8355: ARRAY
8356: PUSH
8357: LD_INT 2
8359: ARRAY
8360: PUSH
8361: LD_VAR 0 9
8365: LESS
8366: IFFALSE 8408
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8368: LD_ADDR_VAR 0 6
8372: PUSH
8373: LD_VAR 0 6
8377: PPUSH
8378: LD_VAR 0 6
8382: PUSH
8383: LD_INT 1
8385: PLUS
8386: PPUSH
8387: LD_VAR 0 7
8391: PUSH
8392: LD_VAR 0 9
8396: PUSH
8397: EMPTY
8398: LIST
8399: LIST
8400: PPUSH
8401: CALL_OW 2
8405: ST_TO_ADDR
8406: GO 8488
// for j = 1 to result do
8408: LD_ADDR_VAR 0 8
8412: PUSH
8413: DOUBLE
8414: LD_INT 1
8416: DEC
8417: ST_TO_ADDR
8418: LD_VAR 0 6
8422: PUSH
8423: FOR_TO
8424: IFFALSE 8486
// begin if tmp < result [ j ] [ 2 ] then
8426: LD_VAR 0 9
8430: PUSH
8431: LD_VAR 0 6
8435: PUSH
8436: LD_VAR 0 8
8440: ARRAY
8441: PUSH
8442: LD_INT 2
8444: ARRAY
8445: LESS
8446: IFFALSE 8484
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8448: LD_ADDR_VAR 0 6
8452: PUSH
8453: LD_VAR 0 6
8457: PPUSH
8458: LD_VAR 0 8
8462: PPUSH
8463: LD_VAR 0 7
8467: PUSH
8468: LD_VAR 0 9
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: PPUSH
8477: CALL_OW 2
8481: ST_TO_ADDR
// break ;
8482: GO 8486
// end ; end ;
8484: GO 8423
8486: POP
8487: POP
// end ; end ;
8488: GO 8287
8490: POP
8491: POP
// if result and not asc then
8492: LD_VAR 0 6
8496: PUSH
8497: LD_VAR 0 4
8501: NOT
8502: AND
8503: IFFALSE 8578
// begin tmp := result ;
8505: LD_ADDR_VAR 0 9
8509: PUSH
8510: LD_VAR 0 6
8514: ST_TO_ADDR
// for i = tmp downto 1 do
8515: LD_ADDR_VAR 0 7
8519: PUSH
8520: DOUBLE
8521: LD_VAR 0 9
8525: INC
8526: ST_TO_ADDR
8527: LD_INT 1
8529: PUSH
8530: FOR_DOWNTO
8531: IFFALSE 8576
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
8533: LD_ADDR_VAR 0 6
8537: PUSH
8538: LD_VAR 0 6
8542: PPUSH
8543: LD_VAR 0 9
8547: PUSH
8548: LD_VAR 0 7
8552: MINUS
8553: PUSH
8554: LD_INT 1
8556: PLUS
8557: PPUSH
8558: LD_VAR 0 9
8562: PUSH
8563: LD_VAR 0 7
8567: ARRAY
8568: PPUSH
8569: CALL_OW 1
8573: ST_TO_ADDR
8574: GO 8530
8576: POP
8577: POP
// end ; tmp := [ ] ;
8578: LD_ADDR_VAR 0 9
8582: PUSH
8583: EMPTY
8584: ST_TO_ADDR
// if mode then
8585: LD_VAR 0 5
8589: IFFALSE 8658
// begin for i = 1 to result do
8591: LD_ADDR_VAR 0 7
8595: PUSH
8596: DOUBLE
8597: LD_INT 1
8599: DEC
8600: ST_TO_ADDR
8601: LD_VAR 0 6
8605: PUSH
8606: FOR_TO
8607: IFFALSE 8646
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
8609: LD_ADDR_VAR 0 9
8613: PUSH
8614: LD_VAR 0 9
8618: PPUSH
8619: LD_VAR 0 7
8623: PPUSH
8624: LD_VAR 0 6
8628: PUSH
8629: LD_VAR 0 7
8633: ARRAY
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL_OW 1
8643: ST_TO_ADDR
8644: GO 8606
8646: POP
8647: POP
// result := tmp ;
8648: LD_ADDR_VAR 0 6
8652: PUSH
8653: LD_VAR 0 9
8657: ST_TO_ADDR
// end ; end ;
8658: LD_VAR 0 6
8662: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
8663: LD_INT 0
8665: PPUSH
8666: PPUSH
8667: PPUSH
8668: PPUSH
8669: PPUSH
8670: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
8671: LD_ADDR_VAR 0 5
8675: PUSH
8676: LD_INT 0
8678: PUSH
8679: LD_INT 0
8681: PUSH
8682: LD_INT 0
8684: PUSH
8685: EMPTY
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: ST_TO_ADDR
// if not x or not y then
8693: LD_VAR 0 2
8697: NOT
8698: PUSH
8699: LD_VAR 0 3
8703: NOT
8704: OR
8705: IFFALSE 8709
// exit ;
8707: GO 10361
// if not range then
8709: LD_VAR 0 4
8713: NOT
8714: IFFALSE 8724
// range := 10 ;
8716: LD_ADDR_VAR 0 4
8720: PUSH
8721: LD_INT 10
8723: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8724: LD_ADDR_VAR 0 8
8728: PUSH
8729: LD_INT 81
8731: PUSH
8732: LD_VAR 0 1
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 92
8743: PUSH
8744: LD_VAR 0 2
8748: PUSH
8749: LD_VAR 0 3
8753: PUSH
8754: LD_VAR 0 4
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: PUSH
8765: LD_INT 3
8767: PUSH
8768: LD_INT 21
8770: PUSH
8771: LD_INT 3
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: PPUSH
8787: CALL_OW 69
8791: ST_TO_ADDR
// if not tmp then
8792: LD_VAR 0 8
8796: NOT
8797: IFFALSE 8801
// exit ;
8799: GO 10361
// for i in tmp do
8801: LD_ADDR_VAR 0 6
8805: PUSH
8806: LD_VAR 0 8
8810: PUSH
8811: FOR_IN
8812: IFFALSE 10336
// begin points := [ 0 , 0 , 0 ] ;
8814: LD_ADDR_VAR 0 9
8818: PUSH
8819: LD_INT 0
8821: PUSH
8822: LD_INT 0
8824: PUSH
8825: LD_INT 0
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: ST_TO_ADDR
// bpoints := 1 ;
8833: LD_ADDR_VAR 0 10
8837: PUSH
8838: LD_INT 1
8840: ST_TO_ADDR
// case GetType ( i ) of unit_human :
8841: LD_VAR 0 6
8845: PPUSH
8846: CALL_OW 247
8850: PUSH
8851: LD_INT 1
8853: DOUBLE
8854: EQUAL
8855: IFTRUE 8859
8857: GO 9437
8859: POP
// begin if GetClass ( i ) = 1 then
8860: LD_VAR 0 6
8864: PPUSH
8865: CALL_OW 257
8869: PUSH
8870: LD_INT 1
8872: EQUAL
8873: IFFALSE 8894
// points := [ 10 , 5 , 3 ] ;
8875: LD_ADDR_VAR 0 9
8879: PUSH
8880: LD_INT 10
8882: PUSH
8883: LD_INT 5
8885: PUSH
8886: LD_INT 3
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
8894: LD_VAR 0 6
8898: PPUSH
8899: CALL_OW 257
8903: PUSH
8904: LD_INT 2
8906: PUSH
8907: LD_INT 3
8909: PUSH
8910: LD_INT 4
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: LIST
8917: IN
8918: IFFALSE 8939
// points := [ 3 , 2 , 1 ] ;
8920: LD_ADDR_VAR 0 9
8924: PUSH
8925: LD_INT 3
8927: PUSH
8928: LD_INT 2
8930: PUSH
8931: LD_INT 1
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: ST_TO_ADDR
// if GetClass ( i ) = 5 then
8939: LD_VAR 0 6
8943: PPUSH
8944: CALL_OW 257
8948: PUSH
8949: LD_INT 5
8951: EQUAL
8952: IFFALSE 8973
// points := [ 130 , 5 , 2 ] ;
8954: LD_ADDR_VAR 0 9
8958: PUSH
8959: LD_INT 130
8961: PUSH
8962: LD_INT 5
8964: PUSH
8965: LD_INT 2
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: ST_TO_ADDR
// if GetClass ( i ) = 8 then
8973: LD_VAR 0 6
8977: PPUSH
8978: CALL_OW 257
8982: PUSH
8983: LD_INT 8
8985: EQUAL
8986: IFFALSE 9007
// points := [ 35 , 35 , 30 ] ;
8988: LD_ADDR_VAR 0 9
8992: PUSH
8993: LD_INT 35
8995: PUSH
8996: LD_INT 35
8998: PUSH
8999: LD_INT 30
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9007: LD_VAR 0 6
9011: PPUSH
9012: CALL_OW 257
9016: PUSH
9017: LD_INT 9
9019: EQUAL
9020: IFFALSE 9041
// points := [ 20 , 55 , 40 ] ;
9022: LD_ADDR_VAR 0 9
9026: PUSH
9027: LD_INT 20
9029: PUSH
9030: LD_INT 55
9032: PUSH
9033: LD_INT 40
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9041: LD_VAR 0 6
9045: PPUSH
9046: CALL_OW 257
9050: PUSH
9051: LD_INT 12
9053: PUSH
9054: LD_INT 16
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: IN
9061: IFFALSE 9082
// points := [ 5 , 3 , 2 ] ;
9063: LD_ADDR_VAR 0 9
9067: PUSH
9068: LD_INT 5
9070: PUSH
9071: LD_INT 3
9073: PUSH
9074: LD_INT 2
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9082: LD_VAR 0 6
9086: PPUSH
9087: CALL_OW 257
9091: PUSH
9092: LD_INT 17
9094: EQUAL
9095: IFFALSE 9116
// points := [ 100 , 50 , 75 ] ;
9097: LD_ADDR_VAR 0 9
9101: PUSH
9102: LD_INT 100
9104: PUSH
9105: LD_INT 50
9107: PUSH
9108: LD_INT 75
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9116: LD_VAR 0 6
9120: PPUSH
9121: CALL_OW 257
9125: PUSH
9126: LD_INT 15
9128: EQUAL
9129: IFFALSE 9150
// points := [ 10 , 5 , 3 ] ;
9131: LD_ADDR_VAR 0 9
9135: PUSH
9136: LD_INT 10
9138: PUSH
9139: LD_INT 5
9141: PUSH
9142: LD_INT 3
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9150: LD_VAR 0 6
9154: PPUSH
9155: CALL_OW 257
9159: PUSH
9160: LD_INT 14
9162: EQUAL
9163: IFFALSE 9184
// points := [ 10 , 0 , 0 ] ;
9165: LD_ADDR_VAR 0 9
9169: PUSH
9170: LD_INT 10
9172: PUSH
9173: LD_INT 0
9175: PUSH
9176: LD_INT 0
9178: PUSH
9179: EMPTY
9180: LIST
9181: LIST
9182: LIST
9183: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9184: LD_VAR 0 6
9188: PPUSH
9189: CALL_OW 257
9193: PUSH
9194: LD_INT 11
9196: EQUAL
9197: IFFALSE 9218
// points := [ 30 , 10 , 5 ] ;
9199: LD_ADDR_VAR 0 9
9203: PUSH
9204: LD_INT 30
9206: PUSH
9207: LD_INT 10
9209: PUSH
9210: LD_INT 5
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 5
9225: PPUSH
9226: CALL_OW 321
9230: PUSH
9231: LD_INT 2
9233: EQUAL
9234: IFFALSE 9251
// bpoints := bpoints * 1.8 ;
9236: LD_ADDR_VAR 0 10
9240: PUSH
9241: LD_VAR 0 10
9245: PUSH
9246: LD_REAL  1.80000000000000E+0000
9249: MUL
9250: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9251: LD_VAR 0 6
9255: PPUSH
9256: CALL_OW 257
9260: PUSH
9261: LD_INT 1
9263: PUSH
9264: LD_INT 2
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: LD_INT 4
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: IN
9279: PUSH
9280: LD_VAR 0 1
9284: PPUSH
9285: LD_INT 51
9287: PPUSH
9288: CALL_OW 321
9292: PUSH
9293: LD_INT 2
9295: EQUAL
9296: AND
9297: IFFALSE 9314
// bpoints := bpoints * 1.2 ;
9299: LD_ADDR_VAR 0 10
9303: PUSH
9304: LD_VAR 0 10
9308: PUSH
9309: LD_REAL  1.20000000000000E+0000
9312: MUL
9313: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9314: LD_VAR 0 6
9318: PPUSH
9319: CALL_OW 257
9323: PUSH
9324: LD_INT 5
9326: PUSH
9327: LD_INT 7
9329: PUSH
9330: LD_INT 9
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: IN
9338: PUSH
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 52
9346: PPUSH
9347: CALL_OW 321
9351: PUSH
9352: LD_INT 2
9354: EQUAL
9355: AND
9356: IFFALSE 9373
// bpoints := bpoints * 1.5 ;
9358: LD_ADDR_VAR 0 10
9362: PUSH
9363: LD_VAR 0 10
9367: PUSH
9368: LD_REAL  1.50000000000000E+0000
9371: MUL
9372: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 66
9380: PPUSH
9381: CALL_OW 321
9385: PUSH
9386: LD_INT 2
9388: EQUAL
9389: IFFALSE 9406
// bpoints := bpoints * 1.1 ;
9391: LD_ADDR_VAR 0 10
9395: PUSH
9396: LD_VAR 0 10
9400: PUSH
9401: LD_REAL  1.10000000000000E+0000
9404: MUL
9405: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
9406: LD_ADDR_VAR 0 10
9410: PUSH
9411: LD_VAR 0 10
9415: PUSH
9416: LD_VAR 0 6
9420: PPUSH
9421: LD_INT 1
9423: PPUSH
9424: CALL_OW 259
9428: PUSH
9429: LD_REAL  1.15000000000000E+0000
9432: MUL
9433: MUL
9434: ST_TO_ADDR
// end ; unit_vehicle :
9435: GO 10265
9437: LD_INT 2
9439: DOUBLE
9440: EQUAL
9441: IFTRUE 9445
9443: GO 10253
9445: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
9446: LD_VAR 0 6
9450: PPUSH
9451: CALL_OW 264
9455: PUSH
9456: LD_INT 2
9458: PUSH
9459: LD_INT 42
9461: PUSH
9462: LD_INT 24
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: LIST
9469: IN
9470: IFFALSE 9491
// points := [ 25 , 5 , 3 ] ;
9472: LD_ADDR_VAR 0 9
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 5
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
9491: LD_VAR 0 6
9495: PPUSH
9496: CALL_OW 264
9500: PUSH
9501: LD_INT 4
9503: PUSH
9504: LD_INT 43
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: IN
9515: IFFALSE 9536
// points := [ 40 , 15 , 5 ] ;
9517: LD_ADDR_VAR 0 9
9521: PUSH
9522: LD_INT 40
9524: PUSH
9525: LD_INT 15
9527: PUSH
9528: LD_INT 5
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
9536: LD_VAR 0 6
9540: PPUSH
9541: CALL_OW 264
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 23
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: IN
9556: IFFALSE 9577
// points := [ 7 , 25 , 8 ] ;
9558: LD_ADDR_VAR 0 9
9562: PUSH
9563: LD_INT 7
9565: PUSH
9566: LD_INT 25
9568: PUSH
9569: LD_INT 8
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
9577: LD_VAR 0 6
9581: PPUSH
9582: CALL_OW 264
9586: PUSH
9587: LD_INT 5
9589: PUSH
9590: LD_INT 27
9592: PUSH
9593: LD_INT 44
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: IN
9601: IFFALSE 9622
// points := [ 14 , 50 , 16 ] ;
9603: LD_ADDR_VAR 0 9
9607: PUSH
9608: LD_INT 14
9610: PUSH
9611: LD_INT 50
9613: PUSH
9614: LD_INT 16
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
9622: LD_VAR 0 6
9626: PPUSH
9627: CALL_OW 264
9631: PUSH
9632: LD_INT 6
9634: PUSH
9635: LD_INT 46
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: IN
9642: IFFALSE 9663
// points := [ 32 , 120 , 70 ] ;
9644: LD_ADDR_VAR 0 9
9648: PUSH
9649: LD_INT 32
9651: PUSH
9652: LD_INT 120
9654: PUSH
9655: LD_INT 70
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
9663: LD_VAR 0 6
9667: PPUSH
9668: CALL_OW 264
9672: PUSH
9673: LD_INT 7
9675: PUSH
9676: LD_INT 28
9678: PUSH
9679: LD_INT 45
9681: PUSH
9682: LD_EXP 26
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: IN
9693: IFFALSE 9714
// points := [ 35 , 20 , 45 ] ;
9695: LD_ADDR_VAR 0 9
9699: PUSH
9700: LD_INT 35
9702: PUSH
9703: LD_INT 20
9705: PUSH
9706: LD_INT 45
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: LIST
9713: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
9714: LD_VAR 0 6
9718: PPUSH
9719: CALL_OW 264
9723: PUSH
9724: LD_INT 47
9726: PUSH
9727: EMPTY
9728: LIST
9729: IN
9730: IFFALSE 9751
// points := [ 67 , 45 , 75 ] ;
9732: LD_ADDR_VAR 0 9
9736: PUSH
9737: LD_INT 67
9739: PUSH
9740: LD_INT 45
9742: PUSH
9743: LD_INT 75
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
9751: LD_VAR 0 6
9755: PPUSH
9756: CALL_OW 264
9760: PUSH
9761: LD_INT 26
9763: PUSH
9764: EMPTY
9765: LIST
9766: IN
9767: IFFALSE 9788
// points := [ 120 , 30 , 80 ] ;
9769: LD_ADDR_VAR 0 9
9773: PUSH
9774: LD_INT 120
9776: PUSH
9777: LD_INT 30
9779: PUSH
9780: LD_INT 80
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
9788: LD_VAR 0 6
9792: PPUSH
9793: CALL_OW 264
9797: PUSH
9798: LD_INT 22
9800: PUSH
9801: EMPTY
9802: LIST
9803: IN
9804: IFFALSE 9825
// points := [ 40 , 1 , 1 ] ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_INT 40
9813: PUSH
9814: LD_INT 1
9816: PUSH
9817: LD_INT 1
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
9825: LD_VAR 0 6
9829: PPUSH
9830: CALL_OW 264
9834: PUSH
9835: LD_INT 29
9837: PUSH
9838: EMPTY
9839: LIST
9840: IN
9841: IFFALSE 9862
// points := [ 70 , 200 , 400 ] ;
9843: LD_ADDR_VAR 0 9
9847: PUSH
9848: LD_INT 70
9850: PUSH
9851: LD_INT 200
9853: PUSH
9854: LD_INT 400
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
9862: LD_VAR 0 6
9866: PPUSH
9867: CALL_OW 264
9871: PUSH
9872: LD_INT 14
9874: PUSH
9875: LD_INT 53
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: IN
9882: IFFALSE 9903
// points := [ 40 , 10 , 20 ] ;
9884: LD_ADDR_VAR 0 9
9888: PUSH
9889: LD_INT 40
9891: PUSH
9892: LD_INT 10
9894: PUSH
9895: LD_INT 20
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
9903: LD_VAR 0 6
9907: PPUSH
9908: CALL_OW 264
9912: PUSH
9913: LD_INT 9
9915: PUSH
9916: EMPTY
9917: LIST
9918: IN
9919: IFFALSE 9940
// points := [ 5 , 70 , 20 ] ;
9921: LD_ADDR_VAR 0 9
9925: PUSH
9926: LD_INT 5
9928: PUSH
9929: LD_INT 70
9931: PUSH
9932: LD_INT 20
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: LIST
9939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
9940: LD_VAR 0 6
9944: PPUSH
9945: CALL_OW 264
9949: PUSH
9950: LD_INT 10
9952: PUSH
9953: EMPTY
9954: LIST
9955: IN
9956: IFFALSE 9977
// points := [ 35 , 110 , 70 ] ;
9958: LD_ADDR_VAR 0 9
9962: PUSH
9963: LD_INT 35
9965: PUSH
9966: LD_INT 110
9968: PUSH
9969: LD_INT 70
9971: PUSH
9972: EMPTY
9973: LIST
9974: LIST
9975: LIST
9976: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
9977: LD_VAR 0 6
9981: PPUSH
9982: CALL_OW 265
9986: PUSH
9987: LD_INT 25
9989: EQUAL
9990: IFFALSE 10011
// points := [ 80 , 65 , 100 ] ;
9992: LD_ADDR_VAR 0 9
9996: PUSH
9997: LD_INT 80
9999: PUSH
10000: LD_INT 65
10002: PUSH
10003: LD_INT 100
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10011: LD_VAR 0 6
10015: PPUSH
10016: CALL_OW 263
10020: PUSH
10021: LD_INT 1
10023: EQUAL
10024: IFFALSE 10059
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10026: LD_ADDR_VAR 0 10
10030: PUSH
10031: LD_VAR 0 10
10035: PUSH
10036: LD_VAR 0 6
10040: PPUSH
10041: CALL_OW 311
10045: PPUSH
10046: LD_INT 3
10048: PPUSH
10049: CALL_OW 259
10053: PUSH
10054: LD_INT 4
10056: MUL
10057: MUL
10058: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10059: LD_VAR 0 6
10063: PPUSH
10064: CALL_OW 263
10068: PUSH
10069: LD_INT 2
10071: EQUAL
10072: IFFALSE 10123
// begin j := IsControledBy ( i ) ;
10074: LD_ADDR_VAR 0 7
10078: PUSH
10079: LD_VAR 0 6
10083: PPUSH
10084: CALL_OW 312
10088: ST_TO_ADDR
// if j then
10089: LD_VAR 0 7
10093: IFFALSE 10123
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10095: LD_ADDR_VAR 0 10
10099: PUSH
10100: LD_VAR 0 10
10104: PUSH
10105: LD_VAR 0 7
10109: PPUSH
10110: LD_INT 3
10112: PPUSH
10113: CALL_OW 259
10117: PUSH
10118: LD_INT 3
10120: MUL
10121: MUL
10122: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10123: LD_VAR 0 6
10127: PPUSH
10128: CALL_OW 264
10132: PUSH
10133: LD_INT 5
10135: PUSH
10136: LD_INT 6
10138: PUSH
10139: LD_INT 46
10141: PUSH
10142: LD_INT 44
10144: PUSH
10145: LD_INT 47
10147: PUSH
10148: LD_INT 45
10150: PUSH
10151: LD_INT 28
10153: PUSH
10154: LD_INT 7
10156: PUSH
10157: LD_INT 27
10159: PUSH
10160: LD_INT 29
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: IN
10175: PUSH
10176: LD_VAR 0 1
10180: PPUSH
10181: LD_INT 52
10183: PPUSH
10184: CALL_OW 321
10188: PUSH
10189: LD_INT 2
10191: EQUAL
10192: AND
10193: IFFALSE 10210
// bpoints := bpoints * 1.2 ;
10195: LD_ADDR_VAR 0 10
10199: PUSH
10200: LD_VAR 0 10
10204: PUSH
10205: LD_REAL  1.20000000000000E+0000
10208: MUL
10209: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10210: LD_VAR 0 6
10214: PPUSH
10215: CALL_OW 264
10219: PUSH
10220: LD_INT 6
10222: PUSH
10223: LD_INT 46
10225: PUSH
10226: LD_INT 47
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: IN
10234: IFFALSE 10251
// bpoints := bpoints * 1.2 ;
10236: LD_ADDR_VAR 0 10
10240: PUSH
10241: LD_VAR 0 10
10245: PUSH
10246: LD_REAL  1.20000000000000E+0000
10249: MUL
10250: ST_TO_ADDR
// end ; unit_building :
10251: GO 10265
10253: LD_INT 3
10255: DOUBLE
10256: EQUAL
10257: IFTRUE 10261
10259: GO 10264
10261: POP
// ; end ;
10262: GO 10265
10264: POP
// for j = 1 to 3 do
10265: LD_ADDR_VAR 0 7
10269: PUSH
10270: DOUBLE
10271: LD_INT 1
10273: DEC
10274: ST_TO_ADDR
10275: LD_INT 3
10277: PUSH
10278: FOR_TO
10279: IFFALSE 10332
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10281: LD_ADDR_VAR 0 5
10285: PUSH
10286: LD_VAR 0 5
10290: PPUSH
10291: LD_VAR 0 7
10295: PPUSH
10296: LD_VAR 0 5
10300: PUSH
10301: LD_VAR 0 7
10305: ARRAY
10306: PUSH
10307: LD_VAR 0 9
10311: PUSH
10312: LD_VAR 0 7
10316: ARRAY
10317: PUSH
10318: LD_VAR 0 10
10322: MUL
10323: PLUS
10324: PPUSH
10325: CALL_OW 1
10329: ST_TO_ADDR
10330: GO 10278
10332: POP
10333: POP
// end ;
10334: GO 8811
10336: POP
10337: POP
// result := Replace ( result , 4 , tmp ) ;
10338: LD_ADDR_VAR 0 5
10342: PUSH
10343: LD_VAR 0 5
10347: PPUSH
10348: LD_INT 4
10350: PPUSH
10351: LD_VAR 0 8
10355: PPUSH
10356: CALL_OW 1
10360: ST_TO_ADDR
// end ;
10361: LD_VAR 0 5
10365: RET
// export function DangerAtRange ( unit , range ) ; begin
10366: LD_INT 0
10368: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
10369: LD_ADDR_VAR 0 3
10373: PUSH
10374: LD_VAR 0 1
10378: PPUSH
10379: CALL_OW 255
10383: PPUSH
10384: LD_VAR 0 1
10388: PPUSH
10389: CALL_OW 250
10393: PPUSH
10394: LD_VAR 0 1
10398: PPUSH
10399: CALL_OW 251
10403: PPUSH
10404: LD_VAR 0 2
10408: PPUSH
10409: CALL 8663 0 4
10413: ST_TO_ADDR
// end ;
10414: LD_VAR 0 3
10418: RET
// export function DangerInArea ( side , area ) ; begin
10419: LD_INT 0
10421: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
10422: LD_ADDR_VAR 0 3
10426: PUSH
10427: LD_VAR 0 2
10431: PPUSH
10432: LD_INT 81
10434: PUSH
10435: LD_VAR 0 1
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 70
10448: ST_TO_ADDR
// end ;
10449: LD_VAR 0 3
10453: RET
// export function IsExtension ( b ) ; begin
10454: LD_INT 0
10456: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
10457: LD_ADDR_VAR 0 2
10461: PUSH
10462: LD_VAR 0 1
10466: PUSH
10467: LD_INT 23
10469: PUSH
10470: LD_INT 20
10472: PUSH
10473: LD_INT 22
10475: PUSH
10476: LD_INT 17
10478: PUSH
10479: LD_INT 24
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 19
10487: PUSH
10488: LD_INT 16
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 18
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: IN
10509: ST_TO_ADDR
// end ;
10510: LD_VAR 0 2
10514: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
10515: LD_INT 0
10517: PPUSH
10518: PPUSH
10519: PPUSH
// result := [ ] ;
10520: LD_ADDR_VAR 0 4
10524: PUSH
10525: EMPTY
10526: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
10527: LD_ADDR_VAR 0 5
10531: PUSH
10532: LD_VAR 0 2
10536: PPUSH
10537: LD_INT 21
10539: PUSH
10540: LD_INT 3
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PPUSH
10547: CALL_OW 70
10551: ST_TO_ADDR
// if not tmp then
10552: LD_VAR 0 5
10556: NOT
10557: IFFALSE 10561
// exit ;
10559: GO 10625
// if checkLink then
10561: LD_VAR 0 3
10565: IFFALSE 10615
// begin for i in tmp do
10567: LD_ADDR_VAR 0 6
10571: PUSH
10572: LD_VAR 0 5
10576: PUSH
10577: FOR_IN
10578: IFFALSE 10613
// if GetBase ( i ) <> base then
10580: LD_VAR 0 6
10584: PPUSH
10585: CALL_OW 274
10589: PUSH
10590: LD_VAR 0 1
10594: NONEQUAL
10595: IFFALSE 10611
// ComLinkToBase ( base , i ) ;
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_VAR 0 6
10606: PPUSH
10607: CALL_OW 169
10611: GO 10577
10613: POP
10614: POP
// end ; result := tmp ;
10615: LD_ADDR_VAR 0 4
10619: PUSH
10620: LD_VAR 0 5
10624: ST_TO_ADDR
// end ;
10625: LD_VAR 0 4
10629: RET
// export function ComComplete ( units , b ) ; var i ; begin
10630: LD_INT 0
10632: PPUSH
10633: PPUSH
// if not units then
10634: LD_VAR 0 1
10638: NOT
10639: IFFALSE 10643
// exit ;
10641: GO 10733
// for i in units do
10643: LD_ADDR_VAR 0 4
10647: PUSH
10648: LD_VAR 0 1
10652: PUSH
10653: FOR_IN
10654: IFFALSE 10731
// if BuildingStatus ( b ) = bs_build then
10656: LD_VAR 0 2
10660: PPUSH
10661: CALL_OW 461
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10729
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
10671: LD_VAR 0 4
10675: PPUSH
10676: LD_STRING h
10678: PUSH
10679: LD_VAR 0 2
10683: PPUSH
10684: CALL_OW 250
10688: PUSH
10689: LD_VAR 0 2
10693: PPUSH
10694: CALL_OW 251
10698: PUSH
10699: LD_VAR 0 2
10703: PUSH
10704: LD_INT 0
10706: PUSH
10707: LD_INT 0
10709: PUSH
10710: LD_INT 0
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: PPUSH
10725: CALL_OW 446
10729: GO 10653
10731: POP
10732: POP
// end ;
10733: LD_VAR 0 3
10737: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
10738: LD_INT 0
10740: PPUSH
10741: PPUSH
10742: PPUSH
10743: PPUSH
10744: PPUSH
10745: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
10746: LD_VAR 0 1
10750: NOT
10751: PUSH
10752: LD_VAR 0 1
10756: PPUSH
10757: CALL_OW 263
10761: PUSH
10762: LD_INT 2
10764: NONEQUAL
10765: OR
10766: IFFALSE 10770
// exit ;
10768: GO 11086
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
10770: LD_ADDR_VAR 0 6
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_VAR 0 1
10782: PPUSH
10783: CALL_OW 255
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 2
10794: PUSH
10795: LD_INT 30
10797: PUSH
10798: LD_INT 36
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 34
10807: PUSH
10808: LD_INT 31
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: LIST
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: PPUSH
10824: CALL_OW 69
10828: ST_TO_ADDR
// if not tmp then
10829: LD_VAR 0 6
10833: NOT
10834: IFFALSE 10838
// exit ;
10836: GO 11086
// result := [ ] ;
10838: LD_ADDR_VAR 0 2
10842: PUSH
10843: EMPTY
10844: ST_TO_ADDR
// for i in tmp do
10845: LD_ADDR_VAR 0 3
10849: PUSH
10850: LD_VAR 0 6
10854: PUSH
10855: FOR_IN
10856: IFFALSE 10927
// begin t := UnitsInside ( i ) ;
10858: LD_ADDR_VAR 0 4
10862: PUSH
10863: LD_VAR 0 3
10867: PPUSH
10868: CALL_OW 313
10872: ST_TO_ADDR
// if t then
10873: LD_VAR 0 4
10877: IFFALSE 10925
// for j in t do
10879: LD_ADDR_VAR 0 7
10883: PUSH
10884: LD_VAR 0 4
10888: PUSH
10889: FOR_IN
10890: IFFALSE 10923
// result := Replace ( result , result + 1 , j ) ;
10892: LD_ADDR_VAR 0 2
10896: PUSH
10897: LD_VAR 0 2
10901: PPUSH
10902: LD_VAR 0 2
10906: PUSH
10907: LD_INT 1
10909: PLUS
10910: PPUSH
10911: LD_VAR 0 7
10915: PPUSH
10916: CALL_OW 1
10920: ST_TO_ADDR
10921: GO 10889
10923: POP
10924: POP
// end ;
10925: GO 10855
10927: POP
10928: POP
// if not result then
10929: LD_VAR 0 2
10933: NOT
10934: IFFALSE 10938
// exit ;
10936: GO 11086
// mech := result [ 1 ] ;
10938: LD_ADDR_VAR 0 5
10942: PUSH
10943: LD_VAR 0 2
10947: PUSH
10948: LD_INT 1
10950: ARRAY
10951: ST_TO_ADDR
// if result > 1 then
10952: LD_VAR 0 2
10956: PUSH
10957: LD_INT 1
10959: GREATER
10960: IFFALSE 11072
// begin for i = 2 to result do
10962: LD_ADDR_VAR 0 3
10966: PUSH
10967: DOUBLE
10968: LD_INT 2
10970: DEC
10971: ST_TO_ADDR
10972: LD_VAR 0 2
10976: PUSH
10977: FOR_TO
10978: IFFALSE 11070
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_VAR 0 2
10989: PUSH
10990: LD_VAR 0 3
10994: ARRAY
10995: PPUSH
10996: LD_INT 3
10998: PPUSH
10999: CALL_OW 259
11003: PUSH
11004: LD_VAR 0 2
11008: PUSH
11009: LD_VAR 0 3
11013: ARRAY
11014: PPUSH
11015: CALL_OW 432
11019: MINUS
11020: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11021: LD_VAR 0 4
11025: PUSH
11026: LD_VAR 0 5
11030: PPUSH
11031: LD_INT 3
11033: PPUSH
11034: CALL_OW 259
11038: PUSH
11039: LD_VAR 0 5
11043: PPUSH
11044: CALL_OW 432
11048: MINUS
11049: GREATEREQUAL
11050: IFFALSE 11068
// mech := result [ i ] ;
11052: LD_ADDR_VAR 0 5
11056: PUSH
11057: LD_VAR 0 2
11061: PUSH
11062: LD_VAR 0 3
11066: ARRAY
11067: ST_TO_ADDR
// end ;
11068: GO 10977
11070: POP
11071: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11072: LD_VAR 0 1
11076: PPUSH
11077: LD_VAR 0 5
11081: PPUSH
11082: CALL_OW 135
// end ;
11086: LD_VAR 0 2
11090: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11091: LD_INT 0
11093: PPUSH
11094: PPUSH
11095: PPUSH
11096: PPUSH
11097: PPUSH
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
11102: PPUSH
11103: PPUSH
11104: PPUSH
11105: PPUSH
// result := [ ] ;
11106: LD_ADDR_VAR 0 7
11110: PUSH
11111: EMPTY
11112: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11113: LD_VAR 0 1
11117: PPUSH
11118: CALL_OW 266
11122: PUSH
11123: LD_INT 0
11125: PUSH
11126: LD_INT 1
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: IN
11133: NOT
11134: IFFALSE 11138
// exit ;
11136: GO 12772
// if name then
11138: LD_VAR 0 3
11142: IFFALSE 11158
// SetBName ( base_dep , name ) ;
11144: LD_VAR 0 1
11148: PPUSH
11149: LD_VAR 0 3
11153: PPUSH
11154: CALL_OW 500
// base := GetBase ( base_dep ) ;
11158: LD_ADDR_VAR 0 15
11162: PUSH
11163: LD_VAR 0 1
11167: PPUSH
11168: CALL_OW 274
11172: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11173: LD_ADDR_VAR 0 16
11177: PUSH
11178: LD_VAR 0 1
11182: PPUSH
11183: CALL_OW 255
11187: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11188: LD_ADDR_VAR 0 17
11192: PUSH
11193: LD_VAR 0 1
11197: PPUSH
11198: CALL_OW 248
11202: ST_TO_ADDR
// if sources then
11203: LD_VAR 0 5
11207: IFFALSE 11254
// for i = 1 to 3 do
11209: LD_ADDR_VAR 0 8
11213: PUSH
11214: DOUBLE
11215: LD_INT 1
11217: DEC
11218: ST_TO_ADDR
11219: LD_INT 3
11221: PUSH
11222: FOR_TO
11223: IFFALSE 11252
// AddResourceType ( base , i , sources [ i ] ) ;
11225: LD_VAR 0 15
11229: PPUSH
11230: LD_VAR 0 8
11234: PPUSH
11235: LD_VAR 0 5
11239: PUSH
11240: LD_VAR 0 8
11244: ARRAY
11245: PPUSH
11246: CALL_OW 276
11250: GO 11222
11252: POP
11253: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11254: LD_ADDR_VAR 0 18
11258: PUSH
11259: LD_VAR 0 15
11263: PPUSH
11264: LD_VAR 0 2
11268: PPUSH
11269: LD_INT 1
11271: PPUSH
11272: CALL 10515 0 3
11276: ST_TO_ADDR
// InitHc ;
11277: CALL_OW 19
// InitUc ;
11281: CALL_OW 18
// uc_side := side ;
11285: LD_ADDR_OWVAR 20
11289: PUSH
11290: LD_VAR 0 16
11294: ST_TO_ADDR
// uc_nation := nation ;
11295: LD_ADDR_OWVAR 21
11299: PUSH
11300: LD_VAR 0 17
11304: ST_TO_ADDR
// if buildings then
11305: LD_VAR 0 18
11309: IFFALSE 12631
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11311: LD_ADDR_VAR 0 19
11315: PUSH
11316: LD_VAR 0 18
11320: PPUSH
11321: LD_INT 2
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 29
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PUSH
11334: LD_INT 30
11336: PUSH
11337: LD_INT 30
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: PPUSH
11349: CALL_OW 72
11353: ST_TO_ADDR
// if tmp then
11354: LD_VAR 0 19
11358: IFFALSE 11406
// for i in tmp do
11360: LD_ADDR_VAR 0 8
11364: PUSH
11365: LD_VAR 0 19
11369: PUSH
11370: FOR_IN
11371: IFFALSE 11404
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
11373: LD_VAR 0 8
11377: PPUSH
11378: CALL_OW 250
11382: PPUSH
11383: LD_VAR 0 8
11387: PPUSH
11388: CALL_OW 251
11392: PPUSH
11393: LD_VAR 0 16
11397: PPUSH
11398: CALL_OW 441
11402: GO 11370
11404: POP
11405: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
11406: LD_VAR 0 18
11410: PPUSH
11411: LD_INT 2
11413: PUSH
11414: LD_INT 30
11416: PUSH
11417: LD_INT 32
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 30
11426: PUSH
11427: LD_INT 33
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: PPUSH
11439: CALL_OW 72
11443: IFFALSE 11531
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
11445: LD_ADDR_VAR 0 8
11449: PUSH
11450: LD_VAR 0 18
11454: PPUSH
11455: LD_INT 2
11457: PUSH
11458: LD_INT 30
11460: PUSH
11461: LD_INT 32
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 30
11470: PUSH
11471: LD_INT 33
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 72
11487: PUSH
11488: FOR_IN
11489: IFFALSE 11529
// begin if not GetBWeapon ( i ) then
11491: LD_VAR 0 8
11495: PPUSH
11496: CALL_OW 269
11500: NOT
11501: IFFALSE 11527
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
11503: LD_VAR 0 8
11507: PPUSH
11508: LD_VAR 0 8
11512: PPUSH
11513: LD_VAR 0 2
11517: PPUSH
11518: CALL 12777 0 2
11522: PPUSH
11523: CALL_OW 431
// end ;
11527: GO 11488
11529: POP
11530: POP
// end ; for i = 1 to personel do
11531: LD_ADDR_VAR 0 8
11535: PUSH
11536: DOUBLE
11537: LD_INT 1
11539: DEC
11540: ST_TO_ADDR
11541: LD_VAR 0 6
11545: PUSH
11546: FOR_TO
11547: IFFALSE 12611
// begin if i > 4 then
11549: LD_VAR 0 8
11553: PUSH
11554: LD_INT 4
11556: GREATER
11557: IFFALSE 11561
// break ;
11559: GO 12611
// case i of 1 :
11561: LD_VAR 0 8
11565: PUSH
11566: LD_INT 1
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11654
11574: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
11575: LD_ADDR_VAR 0 12
11579: PUSH
11580: LD_VAR 0 18
11584: PPUSH
11585: LD_INT 22
11587: PUSH
11588: LD_VAR 0 16
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 58
11599: PUSH
11600: EMPTY
11601: LIST
11602: PUSH
11603: LD_INT 2
11605: PUSH
11606: LD_INT 30
11608: PUSH
11609: LD_INT 32
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 30
11618: PUSH
11619: LD_INT 4
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 30
11628: PUSH
11629: LD_INT 5
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 72
11651: ST_TO_ADDR
11652: GO 11876
11654: LD_INT 2
11656: DOUBLE
11657: EQUAL
11658: IFTRUE 11662
11660: GO 11724
11662: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
11663: LD_ADDR_VAR 0 12
11667: PUSH
11668: LD_VAR 0 18
11672: PPUSH
11673: LD_INT 22
11675: PUSH
11676: LD_VAR 0 16
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 2
11687: PUSH
11688: LD_INT 30
11690: PUSH
11691: LD_INT 0
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 30
11700: PUSH
11701: LD_INT 1
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PPUSH
11717: CALL_OW 72
11721: ST_TO_ADDR
11722: GO 11876
11724: LD_INT 3
11726: DOUBLE
11727: EQUAL
11728: IFTRUE 11732
11730: GO 11794
11732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
11733: LD_ADDR_VAR 0 12
11737: PUSH
11738: LD_VAR 0 18
11742: PPUSH
11743: LD_INT 22
11745: PUSH
11746: LD_VAR 0 16
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: LD_INT 30
11760: PUSH
11761: LD_INT 2
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 30
11770: PUSH
11771: LD_INT 3
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PPUSH
11787: CALL_OW 72
11791: ST_TO_ADDR
11792: GO 11876
11794: LD_INT 4
11796: DOUBLE
11797: EQUAL
11798: IFTRUE 11802
11800: GO 11875
11802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
11803: LD_ADDR_VAR 0 12
11807: PUSH
11808: LD_VAR 0 18
11812: PPUSH
11813: LD_INT 22
11815: PUSH
11816: LD_VAR 0 16
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 30
11830: PUSH
11831: LD_INT 6
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 30
11840: PUSH
11841: LD_INT 7
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 30
11850: PUSH
11851: LD_INT 8
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 72
11872: ST_TO_ADDR
11873: GO 11876
11875: POP
// if i = 1 then
11876: LD_VAR 0 8
11880: PUSH
11881: LD_INT 1
11883: EQUAL
11884: IFFALSE 11995
// begin tmp := [ ] ;
11886: LD_ADDR_VAR 0 19
11890: PUSH
11891: EMPTY
11892: ST_TO_ADDR
// for j in f do
11893: LD_ADDR_VAR 0 9
11897: PUSH
11898: LD_VAR 0 12
11902: PUSH
11903: FOR_IN
11904: IFFALSE 11977
// if GetBType ( j ) = b_bunker then
11906: LD_VAR 0 9
11910: PPUSH
11911: CALL_OW 266
11915: PUSH
11916: LD_INT 32
11918: EQUAL
11919: IFFALSE 11946
// tmp := Insert ( tmp , 1 , j ) else
11921: LD_ADDR_VAR 0 19
11925: PUSH
11926: LD_VAR 0 19
11930: PPUSH
11931: LD_INT 1
11933: PPUSH
11934: LD_VAR 0 9
11938: PPUSH
11939: CALL_OW 2
11943: ST_TO_ADDR
11944: GO 11975
// tmp := Insert ( tmp , tmp + 1 , j ) ;
11946: LD_ADDR_VAR 0 19
11950: PUSH
11951: LD_VAR 0 19
11955: PPUSH
11956: LD_VAR 0 19
11960: PUSH
11961: LD_INT 1
11963: PLUS
11964: PPUSH
11965: LD_VAR 0 9
11969: PPUSH
11970: CALL_OW 2
11974: ST_TO_ADDR
11975: GO 11903
11977: POP
11978: POP
// if tmp then
11979: LD_VAR 0 19
11983: IFFALSE 11995
// f := tmp ;
11985: LD_ADDR_VAR 0 12
11989: PUSH
11990: LD_VAR 0 19
11994: ST_TO_ADDR
// end ; x := personel [ i ] ;
11995: LD_ADDR_VAR 0 13
11999: PUSH
12000: LD_VAR 0 6
12004: PUSH
12005: LD_VAR 0 8
12009: ARRAY
12010: ST_TO_ADDR
// if x = - 1 then
12011: LD_VAR 0 13
12015: PUSH
12016: LD_INT 1
12018: NEG
12019: EQUAL
12020: IFFALSE 12229
// begin for j in f do
12022: LD_ADDR_VAR 0 9
12026: PUSH
12027: LD_VAR 0 12
12031: PUSH
12032: FOR_IN
12033: IFFALSE 12225
// repeat InitHc ;
12035: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12039: LD_VAR 0 9
12043: PPUSH
12044: CALL_OW 266
12048: PUSH
12049: LD_INT 5
12051: EQUAL
12052: IFFALSE 12122
// begin if UnitsInside ( j ) < 3 then
12054: LD_VAR 0 9
12058: PPUSH
12059: CALL_OW 313
12063: PUSH
12064: LD_INT 3
12066: LESS
12067: IFFALSE 12103
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12069: LD_INT 0
12071: PPUSH
12072: LD_INT 5
12074: PUSH
12075: LD_INT 8
12077: PUSH
12078: LD_INT 9
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: LD_VAR 0 17
12090: ARRAY
12091: PPUSH
12092: LD_VAR 0 4
12096: PPUSH
12097: CALL_OW 380
12101: GO 12120
// PrepareHuman ( false , i , skill ) ;
12103: LD_INT 0
12105: PPUSH
12106: LD_VAR 0 8
12110: PPUSH
12111: LD_VAR 0 4
12115: PPUSH
12116: CALL_OW 380
// end else
12120: GO 12139
// PrepareHuman ( false , i , skill ) ;
12122: LD_INT 0
12124: PPUSH
12125: LD_VAR 0 8
12129: PPUSH
12130: LD_VAR 0 4
12134: PPUSH
12135: CALL_OW 380
// un := CreateHuman ;
12139: LD_ADDR_VAR 0 14
12143: PUSH
12144: CALL_OW 44
12148: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12149: LD_ADDR_VAR 0 7
12153: PUSH
12154: LD_VAR 0 7
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: LD_VAR 0 14
12166: PPUSH
12167: CALL_OW 2
12171: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12172: LD_VAR 0 14
12176: PPUSH
12177: LD_VAR 0 9
12181: PPUSH
12182: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12186: LD_VAR 0 9
12190: PPUSH
12191: CALL_OW 313
12195: PUSH
12196: LD_INT 6
12198: EQUAL
12199: PUSH
12200: LD_VAR 0 9
12204: PPUSH
12205: CALL_OW 266
12209: PUSH
12210: LD_INT 32
12212: PUSH
12213: LD_INT 31
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: IN
12220: OR
12221: IFFALSE 12035
12223: GO 12032
12225: POP
12226: POP
// end else
12227: GO 12609
// for j = 1 to x do
12229: LD_ADDR_VAR 0 9
12233: PUSH
12234: DOUBLE
12235: LD_INT 1
12237: DEC
12238: ST_TO_ADDR
12239: LD_VAR 0 13
12243: PUSH
12244: FOR_TO
12245: IFFALSE 12607
// begin InitHc ;
12247: CALL_OW 19
// if not f then
12251: LD_VAR 0 12
12255: NOT
12256: IFFALSE 12345
// begin PrepareHuman ( false , i , skill ) ;
12258: LD_INT 0
12260: PPUSH
12261: LD_VAR 0 8
12265: PPUSH
12266: LD_VAR 0 4
12270: PPUSH
12271: CALL_OW 380
// un := CreateHuman ;
12275: LD_ADDR_VAR 0 14
12279: PUSH
12280: CALL_OW 44
12284: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12285: LD_ADDR_VAR 0 7
12289: PUSH
12290: LD_VAR 0 7
12294: PPUSH
12295: LD_INT 1
12297: PPUSH
12298: LD_VAR 0 14
12302: PPUSH
12303: CALL_OW 2
12307: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12308: LD_VAR 0 14
12312: PPUSH
12313: LD_VAR 0 1
12317: PPUSH
12318: CALL_OW 250
12322: PPUSH
12323: LD_VAR 0 1
12327: PPUSH
12328: CALL_OW 251
12332: PPUSH
12333: LD_INT 10
12335: PPUSH
12336: LD_INT 0
12338: PPUSH
12339: CALL_OW 50
// continue ;
12343: GO 12244
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12345: LD_VAR 0 12
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PPUSH
12354: CALL_OW 313
12358: PUSH
12359: LD_VAR 0 12
12363: PUSH
12364: LD_INT 1
12366: ARRAY
12367: PPUSH
12368: CALL_OW 266
12372: PUSH
12373: LD_INT 32
12375: PUSH
12376: LD_INT 31
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: IN
12383: AND
12384: PUSH
12385: LD_VAR 0 12
12389: PUSH
12390: LD_INT 1
12392: ARRAY
12393: PPUSH
12394: CALL_OW 313
12398: PUSH
12399: LD_INT 6
12401: EQUAL
12402: OR
12403: IFFALSE 12423
// f := Delete ( f , 1 ) ;
12405: LD_ADDR_VAR 0 12
12409: PUSH
12410: LD_VAR 0 12
12414: PPUSH
12415: LD_INT 1
12417: PPUSH
12418: CALL_OW 3
12422: ST_TO_ADDR
// if not f then
12423: LD_VAR 0 12
12427: NOT
12428: IFFALSE 12446
// begin x := x + 2 ;
12430: LD_ADDR_VAR 0 13
12434: PUSH
12435: LD_VAR 0 13
12439: PUSH
12440: LD_INT 2
12442: PLUS
12443: ST_TO_ADDR
// continue ;
12444: GO 12244
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
12446: LD_VAR 0 12
12450: PUSH
12451: LD_INT 1
12453: ARRAY
12454: PPUSH
12455: CALL_OW 266
12459: PUSH
12460: LD_INT 5
12462: EQUAL
12463: IFFALSE 12537
// begin if UnitsInside ( f [ 1 ] ) < 3 then
12465: LD_VAR 0 12
12469: PUSH
12470: LD_INT 1
12472: ARRAY
12473: PPUSH
12474: CALL_OW 313
12478: PUSH
12479: LD_INT 3
12481: LESS
12482: IFFALSE 12518
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12484: LD_INT 0
12486: PPUSH
12487: LD_INT 5
12489: PUSH
12490: LD_INT 8
12492: PUSH
12493: LD_INT 9
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_VAR 0 17
12505: ARRAY
12506: PPUSH
12507: LD_VAR 0 4
12511: PPUSH
12512: CALL_OW 380
12516: GO 12535
// PrepareHuman ( false , i , skill ) ;
12518: LD_INT 0
12520: PPUSH
12521: LD_VAR 0 8
12525: PPUSH
12526: LD_VAR 0 4
12530: PPUSH
12531: CALL_OW 380
// end else
12535: GO 12554
// PrepareHuman ( false , i , skill ) ;
12537: LD_INT 0
12539: PPUSH
12540: LD_VAR 0 8
12544: PPUSH
12545: LD_VAR 0 4
12549: PPUSH
12550: CALL_OW 380
// un := CreateHuman ;
12554: LD_ADDR_VAR 0 14
12558: PUSH
12559: CALL_OW 44
12563: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12564: LD_ADDR_VAR 0 7
12568: PUSH
12569: LD_VAR 0 7
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: LD_VAR 0 14
12581: PPUSH
12582: CALL_OW 2
12586: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
12587: LD_VAR 0 14
12591: PPUSH
12592: LD_VAR 0 12
12596: PUSH
12597: LD_INT 1
12599: ARRAY
12600: PPUSH
12601: CALL_OW 52
// end ;
12605: GO 12244
12607: POP
12608: POP
// end ;
12609: GO 11546
12611: POP
12612: POP
// result := result ^ buildings ;
12613: LD_ADDR_VAR 0 7
12617: PUSH
12618: LD_VAR 0 7
12622: PUSH
12623: LD_VAR 0 18
12627: ADD
12628: ST_TO_ADDR
// end else
12629: GO 12772
// begin for i = 1 to personel do
12631: LD_ADDR_VAR 0 8
12635: PUSH
12636: DOUBLE
12637: LD_INT 1
12639: DEC
12640: ST_TO_ADDR
12641: LD_VAR 0 6
12645: PUSH
12646: FOR_TO
12647: IFFALSE 12770
// begin if i > 4 then
12649: LD_VAR 0 8
12653: PUSH
12654: LD_INT 4
12656: GREATER
12657: IFFALSE 12661
// break ;
12659: GO 12770
// x := personel [ i ] ;
12661: LD_ADDR_VAR 0 13
12665: PUSH
12666: LD_VAR 0 6
12670: PUSH
12671: LD_VAR 0 8
12675: ARRAY
12676: ST_TO_ADDR
// if x = - 1 then
12677: LD_VAR 0 13
12681: PUSH
12682: LD_INT 1
12684: NEG
12685: EQUAL
12686: IFFALSE 12690
// continue ;
12688: GO 12646
// PrepareHuman ( false , i , skill ) ;
12690: LD_INT 0
12692: PPUSH
12693: LD_VAR 0 8
12697: PPUSH
12698: LD_VAR 0 4
12702: PPUSH
12703: CALL_OW 380
// un := CreateHuman ;
12707: LD_ADDR_VAR 0 14
12711: PUSH
12712: CALL_OW 44
12716: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12717: LD_VAR 0 14
12721: PPUSH
12722: LD_VAR 0 1
12726: PPUSH
12727: CALL_OW 250
12731: PPUSH
12732: LD_VAR 0 1
12736: PPUSH
12737: CALL_OW 251
12741: PPUSH
12742: LD_INT 10
12744: PPUSH
12745: LD_INT 0
12747: PPUSH
12748: CALL_OW 50
// result := result ^ un ;
12752: LD_ADDR_VAR 0 7
12756: PUSH
12757: LD_VAR 0 7
12761: PUSH
12762: LD_VAR 0 14
12766: ADD
12767: ST_TO_ADDR
// end ;
12768: GO 12646
12770: POP
12771: POP
// end ; end ;
12772: LD_VAR 0 7
12776: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
12777: LD_INT 0
12779: PPUSH
12780: PPUSH
12781: PPUSH
12782: PPUSH
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
12787: PPUSH
12788: PPUSH
12789: PPUSH
12790: PPUSH
12791: PPUSH
12792: PPUSH
12793: PPUSH
12794: PPUSH
// result := false ;
12795: LD_ADDR_VAR 0 3
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
12803: LD_VAR 0 1
12807: NOT
12808: PUSH
12809: LD_VAR 0 1
12813: PPUSH
12814: CALL_OW 266
12818: PUSH
12819: LD_INT 32
12821: PUSH
12822: LD_INT 33
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: IN
12829: NOT
12830: OR
12831: IFFALSE 12835
// exit ;
12833: GO 13944
// nat := GetNation ( tower ) ;
12835: LD_ADDR_VAR 0 12
12839: PUSH
12840: LD_VAR 0 1
12844: PPUSH
12845: CALL_OW 248
12849: ST_TO_ADDR
// side := GetSide ( tower ) ;
12850: LD_ADDR_VAR 0 16
12854: PUSH
12855: LD_VAR 0 1
12859: PPUSH
12860: CALL_OW 255
12864: ST_TO_ADDR
// x := GetX ( tower ) ;
12865: LD_ADDR_VAR 0 10
12869: PUSH
12870: LD_VAR 0 1
12874: PPUSH
12875: CALL_OW 250
12879: ST_TO_ADDR
// y := GetY ( tower ) ;
12880: LD_ADDR_VAR 0 11
12884: PUSH
12885: LD_VAR 0 1
12889: PPUSH
12890: CALL_OW 251
12894: ST_TO_ADDR
// if not x or not y then
12895: LD_VAR 0 10
12899: NOT
12900: PUSH
12901: LD_VAR 0 11
12905: NOT
12906: OR
12907: IFFALSE 12911
// exit ;
12909: GO 13944
// weapon := 0 ;
12911: LD_ADDR_VAR 0 18
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// fac_list := [ ] ;
12919: LD_ADDR_VAR 0 17
12923: PUSH
12924: EMPTY
12925: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
12926: LD_ADDR_VAR 0 6
12930: PUSH
12931: LD_VAR 0 1
12935: PPUSH
12936: CALL_OW 274
12940: PPUSH
12941: LD_VAR 0 2
12945: PPUSH
12946: LD_INT 0
12948: PPUSH
12949: CALL 10515 0 3
12953: PPUSH
12954: LD_INT 30
12956: PUSH
12957: LD_INT 3
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PPUSH
12964: CALL_OW 72
12968: ST_TO_ADDR
// if not factories then
12969: LD_VAR 0 6
12973: NOT
12974: IFFALSE 12978
// exit ;
12976: GO 13944
// for i in factories do
12978: LD_ADDR_VAR 0 8
12982: PUSH
12983: LD_VAR 0 6
12987: PUSH
12988: FOR_IN
12989: IFFALSE 13014
// fac_list := fac_list union AvailableWeaponList ( i ) ;
12991: LD_ADDR_VAR 0 17
12995: PUSH
12996: LD_VAR 0 17
13000: PUSH
13001: LD_VAR 0 8
13005: PPUSH
13006: CALL_OW 478
13010: UNION
13011: ST_TO_ADDR
13012: GO 12988
13014: POP
13015: POP
// if not fac_list then
13016: LD_VAR 0 17
13020: NOT
13021: IFFALSE 13025
// exit ;
13023: GO 13944
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13025: LD_ADDR_VAR 0 5
13029: PUSH
13030: LD_INT 4
13032: PUSH
13033: LD_INT 5
13035: PUSH
13036: LD_INT 9
13038: PUSH
13039: LD_INT 10
13041: PUSH
13042: LD_INT 6
13044: PUSH
13045: LD_INT 7
13047: PUSH
13048: LD_INT 11
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 27
13062: PUSH
13063: LD_INT 28
13065: PUSH
13066: LD_INT 26
13068: PUSH
13069: LD_INT 30
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 43
13080: PUSH
13081: LD_INT 44
13083: PUSH
13084: LD_INT 46
13086: PUSH
13087: LD_INT 45
13089: PUSH
13090: LD_INT 47
13092: PUSH
13093: LD_INT 49
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: EMPTY
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: LD_VAR 0 12
13113: ARRAY
13114: ST_TO_ADDR
// list := list isect fac_list ;
13115: LD_ADDR_VAR 0 5
13119: PUSH
13120: LD_VAR 0 5
13124: PUSH
13125: LD_VAR 0 17
13129: ISECT
13130: ST_TO_ADDR
// if not list then
13131: LD_VAR 0 5
13135: NOT
13136: IFFALSE 13140
// exit ;
13138: GO 13944
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13140: LD_VAR 0 12
13144: PUSH
13145: LD_INT 3
13147: EQUAL
13148: PUSH
13149: LD_INT 49
13151: PUSH
13152: LD_VAR 0 5
13156: IN
13157: AND
13158: PUSH
13159: LD_INT 31
13161: PPUSH
13162: LD_VAR 0 16
13166: PPUSH
13167: CALL_OW 321
13171: PUSH
13172: LD_INT 2
13174: EQUAL
13175: AND
13176: IFFALSE 13236
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13178: LD_INT 22
13180: PUSH
13181: LD_VAR 0 16
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 35
13192: PUSH
13193: LD_INT 49
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 91
13202: PUSH
13203: LD_VAR 0 1
13207: PUSH
13208: LD_INT 10
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: PPUSH
13221: CALL_OW 69
13225: NOT
13226: IFFALSE 13236
// weapon := ru_time_lapser ;
13228: LD_ADDR_VAR 0 18
13232: PUSH
13233: LD_INT 49
13235: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13236: LD_VAR 0 12
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: LD_INT 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: IN
13251: PUSH
13252: LD_INT 11
13254: PUSH
13255: LD_VAR 0 5
13259: IN
13260: PUSH
13261: LD_INT 30
13263: PUSH
13264: LD_VAR 0 5
13268: IN
13269: OR
13270: AND
13271: PUSH
13272: LD_INT 6
13274: PPUSH
13275: LD_VAR 0 16
13279: PPUSH
13280: CALL_OW 321
13284: PUSH
13285: LD_INT 2
13287: EQUAL
13288: AND
13289: IFFALSE 13454
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13291: LD_INT 22
13293: PUSH
13294: LD_VAR 0 16
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 2
13305: PUSH
13306: LD_INT 35
13308: PUSH
13309: LD_INT 11
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 35
13318: PUSH
13319: LD_INT 30
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 91
13333: PUSH
13334: LD_VAR 0 1
13338: PUSH
13339: LD_INT 18
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: NOT
13357: PUSH
13358: LD_INT 22
13360: PUSH
13361: LD_VAR 0 16
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 30
13375: PUSH
13376: LD_INT 32
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 30
13385: PUSH
13386: LD_INT 33
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 91
13400: PUSH
13401: LD_VAR 0 1
13405: PUSH
13406: LD_INT 12
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: EMPTY
13420: LIST
13421: PPUSH
13422: CALL_OW 69
13426: PUSH
13427: LD_INT 2
13429: GREATER
13430: AND
13431: IFFALSE 13454
// weapon := [ us_radar , ar_radar ] [ nat ] ;
13433: LD_ADDR_VAR 0 18
13437: PUSH
13438: LD_INT 11
13440: PUSH
13441: LD_INT 30
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_VAR 0 12
13452: ARRAY
13453: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
13454: LD_VAR 0 18
13458: NOT
13459: PUSH
13460: LD_INT 40
13462: PPUSH
13463: LD_VAR 0 16
13467: PPUSH
13468: CALL_OW 321
13472: PUSH
13473: LD_INT 2
13475: EQUAL
13476: AND
13477: PUSH
13478: LD_INT 7
13480: PUSH
13481: LD_VAR 0 5
13485: IN
13486: PUSH
13487: LD_INT 28
13489: PUSH
13490: LD_VAR 0 5
13494: IN
13495: OR
13496: PUSH
13497: LD_INT 45
13499: PUSH
13500: LD_VAR 0 5
13504: IN
13505: OR
13506: AND
13507: IFFALSE 13761
// begin hex := GetHexInfo ( x , y ) ;
13509: LD_ADDR_VAR 0 4
13513: PUSH
13514: LD_VAR 0 10
13518: PPUSH
13519: LD_VAR 0 11
13523: PPUSH
13524: CALL_OW 546
13528: ST_TO_ADDR
// if hex [ 1 ] then
13529: LD_VAR 0 4
13533: PUSH
13534: LD_INT 1
13536: ARRAY
13537: IFFALSE 13541
// exit ;
13539: GO 13944
// height := hex [ 2 ] ;
13541: LD_ADDR_VAR 0 15
13545: PUSH
13546: LD_VAR 0 4
13550: PUSH
13551: LD_INT 2
13553: ARRAY
13554: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
13555: LD_ADDR_VAR 0 14
13559: PUSH
13560: LD_INT 0
13562: PUSH
13563: LD_INT 2
13565: PUSH
13566: LD_INT 3
13568: PUSH
13569: LD_INT 5
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: LIST
13576: LIST
13577: ST_TO_ADDR
// for i in tmp do
13578: LD_ADDR_VAR 0 8
13582: PUSH
13583: LD_VAR 0 14
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13759
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
13591: LD_ADDR_VAR 0 9
13595: PUSH
13596: LD_VAR 0 10
13600: PPUSH
13601: LD_VAR 0 8
13605: PPUSH
13606: LD_INT 5
13608: PPUSH
13609: CALL_OW 272
13613: PUSH
13614: LD_VAR 0 11
13618: PPUSH
13619: LD_VAR 0 8
13623: PPUSH
13624: LD_INT 5
13626: PPUSH
13627: CALL_OW 273
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
13636: LD_VAR 0 9
13640: PUSH
13641: LD_INT 1
13643: ARRAY
13644: PPUSH
13645: LD_VAR 0 9
13649: PUSH
13650: LD_INT 2
13652: ARRAY
13653: PPUSH
13654: CALL_OW 488
13658: IFFALSE 13757
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
13660: LD_ADDR_VAR 0 4
13664: PUSH
13665: LD_VAR 0 9
13669: PUSH
13670: LD_INT 1
13672: ARRAY
13673: PPUSH
13674: LD_VAR 0 9
13678: PUSH
13679: LD_INT 2
13681: ARRAY
13682: PPUSH
13683: CALL_OW 546
13687: ST_TO_ADDR
// if hex [ 1 ] then
13688: LD_VAR 0 4
13692: PUSH
13693: LD_INT 1
13695: ARRAY
13696: IFFALSE 13700
// continue ;
13698: GO 13588
// h := hex [ 2 ] ;
13700: LD_ADDR_VAR 0 13
13704: PUSH
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 2
13712: ARRAY
13713: ST_TO_ADDR
// if h + 7 < height then
13714: LD_VAR 0 13
13718: PUSH
13719: LD_INT 7
13721: PLUS
13722: PUSH
13723: LD_VAR 0 15
13727: LESS
13728: IFFALSE 13757
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
13730: LD_ADDR_VAR 0 18
13734: PUSH
13735: LD_INT 7
13737: PUSH
13738: LD_INT 28
13740: PUSH
13741: LD_INT 45
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: LD_VAR 0 12
13753: ARRAY
13754: ST_TO_ADDR
// break ;
13755: GO 13759
// end ; end ; end ;
13757: GO 13588
13759: POP
13760: POP
// end ; if not weapon then
13761: LD_VAR 0 18
13765: NOT
13766: IFFALSE 13826
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
13768: LD_ADDR_VAR 0 5
13772: PUSH
13773: LD_VAR 0 5
13777: PUSH
13778: LD_INT 11
13780: PUSH
13781: LD_INT 30
13783: PUSH
13784: LD_INT 49
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: DIFF
13792: ST_TO_ADDR
// if not list then
13793: LD_VAR 0 5
13797: NOT
13798: IFFALSE 13802
// exit ;
13800: GO 13944
// weapon := list [ rand ( 1 , list ) ] ;
13802: LD_ADDR_VAR 0 18
13806: PUSH
13807: LD_VAR 0 5
13811: PUSH
13812: LD_INT 1
13814: PPUSH
13815: LD_VAR 0 5
13819: PPUSH
13820: CALL_OW 12
13824: ARRAY
13825: ST_TO_ADDR
// end ; if weapon then
13826: LD_VAR 0 18
13830: IFFALSE 13944
// begin tmp := CostOfWeapon ( weapon ) ;
13832: LD_ADDR_VAR 0 14
13836: PUSH
13837: LD_VAR 0 18
13841: PPUSH
13842: CALL_OW 451
13846: ST_TO_ADDR
// j := GetBase ( tower ) ;
13847: LD_ADDR_VAR 0 9
13851: PUSH
13852: LD_VAR 0 1
13856: PPUSH
13857: CALL_OW 274
13861: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
13862: LD_VAR 0 9
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: CALL_OW 275
13874: PUSH
13875: LD_VAR 0 14
13879: PUSH
13880: LD_INT 1
13882: ARRAY
13883: GREATEREQUAL
13884: PUSH
13885: LD_VAR 0 9
13889: PPUSH
13890: LD_INT 2
13892: PPUSH
13893: CALL_OW 275
13897: PUSH
13898: LD_VAR 0 14
13902: PUSH
13903: LD_INT 2
13905: ARRAY
13906: GREATEREQUAL
13907: AND
13908: PUSH
13909: LD_VAR 0 9
13913: PPUSH
13914: LD_INT 3
13916: PPUSH
13917: CALL_OW 275
13921: PUSH
13922: LD_VAR 0 14
13926: PUSH
13927: LD_INT 3
13929: ARRAY
13930: GREATEREQUAL
13931: AND
13932: IFFALSE 13944
// result := weapon ;
13934: LD_ADDR_VAR 0 3
13938: PUSH
13939: LD_VAR 0 18
13943: ST_TO_ADDR
// end ; end ;
13944: LD_VAR 0 3
13948: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
13949: LD_INT 0
13951: PPUSH
13952: PPUSH
// result := true ;
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: LD_INT 1
13960: ST_TO_ADDR
// if array1 = array2 then
13961: LD_VAR 0 1
13965: PUSH
13966: LD_VAR 0 2
13970: EQUAL
13971: IFFALSE 14031
// begin for i = 1 to array1 do
13973: LD_ADDR_VAR 0 4
13977: PUSH
13978: DOUBLE
13979: LD_INT 1
13981: DEC
13982: ST_TO_ADDR
13983: LD_VAR 0 1
13987: PUSH
13988: FOR_TO
13989: IFFALSE 14027
// if array1 [ i ] <> array2 [ i ] then
13991: LD_VAR 0 1
13995: PUSH
13996: LD_VAR 0 4
14000: ARRAY
14001: PUSH
14002: LD_VAR 0 2
14006: PUSH
14007: LD_VAR 0 4
14011: ARRAY
14012: NONEQUAL
14013: IFFALSE 14025
// begin result := false ;
14015: LD_ADDR_VAR 0 3
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// break ;
14023: GO 14027
// end ;
14025: GO 13988
14027: POP
14028: POP
// end else
14029: GO 14039
// result := false ;
14031: LD_ADDR_VAR 0 3
14035: PUSH
14036: LD_INT 0
14038: ST_TO_ADDR
// end ;
14039: LD_VAR 0 3
14043: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14044: LD_INT 0
14046: PPUSH
14047: PPUSH
// if not array1 or not array2 then
14048: LD_VAR 0 1
14052: NOT
14053: PUSH
14054: LD_VAR 0 2
14058: NOT
14059: OR
14060: IFFALSE 14064
// exit ;
14062: GO 14128
// result := true ;
14064: LD_ADDR_VAR 0 3
14068: PUSH
14069: LD_INT 1
14071: ST_TO_ADDR
// for i = 1 to array1 do
14072: LD_ADDR_VAR 0 4
14076: PUSH
14077: DOUBLE
14078: LD_INT 1
14080: DEC
14081: ST_TO_ADDR
14082: LD_VAR 0 1
14086: PUSH
14087: FOR_TO
14088: IFFALSE 14126
// if array1 [ i ] <> array2 [ i ] then
14090: LD_VAR 0 1
14094: PUSH
14095: LD_VAR 0 4
14099: ARRAY
14100: PUSH
14101: LD_VAR 0 2
14105: PUSH
14106: LD_VAR 0 4
14110: ARRAY
14111: NONEQUAL
14112: IFFALSE 14124
// begin result := false ;
14114: LD_ADDR_VAR 0 3
14118: PUSH
14119: LD_INT 0
14121: ST_TO_ADDR
// break ;
14122: GO 14126
// end ;
14124: GO 14087
14126: POP
14127: POP
// end ;
14128: LD_VAR 0 3
14132: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14133: LD_INT 0
14135: PPUSH
14136: PPUSH
14137: PPUSH
// pom := GetBase ( fac ) ;
14138: LD_ADDR_VAR 0 5
14142: PUSH
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 274
14152: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14153: LD_ADDR_VAR 0 4
14157: PUSH
14158: LD_VAR 0 2
14162: PUSH
14163: LD_INT 1
14165: ARRAY
14166: PPUSH
14167: LD_VAR 0 2
14171: PUSH
14172: LD_INT 2
14174: ARRAY
14175: PPUSH
14176: LD_VAR 0 2
14180: PUSH
14181: LD_INT 3
14183: ARRAY
14184: PPUSH
14185: LD_VAR 0 2
14189: PUSH
14190: LD_INT 4
14192: ARRAY
14193: PPUSH
14194: CALL_OW 449
14198: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14199: LD_ADDR_VAR 0 3
14203: PUSH
14204: LD_VAR 0 5
14208: PPUSH
14209: LD_INT 1
14211: PPUSH
14212: CALL_OW 275
14216: PUSH
14217: LD_VAR 0 4
14221: PUSH
14222: LD_INT 1
14224: ARRAY
14225: GREATEREQUAL
14226: PUSH
14227: LD_VAR 0 5
14231: PPUSH
14232: LD_INT 2
14234: PPUSH
14235: CALL_OW 275
14239: PUSH
14240: LD_VAR 0 4
14244: PUSH
14245: LD_INT 2
14247: ARRAY
14248: GREATEREQUAL
14249: AND
14250: PUSH
14251: LD_VAR 0 5
14255: PPUSH
14256: LD_INT 3
14258: PPUSH
14259: CALL_OW 275
14263: PUSH
14264: LD_VAR 0 4
14268: PUSH
14269: LD_INT 3
14271: ARRAY
14272: GREATEREQUAL
14273: AND
14274: ST_TO_ADDR
// end ;
14275: LD_VAR 0 3
14279: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14280: LD_INT 0
14282: PPUSH
14283: PPUSH
14284: PPUSH
14285: PPUSH
// pom := GetBase ( building ) ;
14286: LD_ADDR_VAR 0 3
14290: PUSH
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 274
14300: ST_TO_ADDR
// if not pom then
14301: LD_VAR 0 3
14305: NOT
14306: IFFALSE 14310
// exit ;
14308: GO 14480
// btype := GetBType ( building ) ;
14310: LD_ADDR_VAR 0 5
14314: PUSH
14315: LD_VAR 0 1
14319: PPUSH
14320: CALL_OW 266
14324: ST_TO_ADDR
// if btype = b_armoury then
14325: LD_VAR 0 5
14329: PUSH
14330: LD_INT 4
14332: EQUAL
14333: IFFALSE 14343
// btype := b_barracks ;
14335: LD_ADDR_VAR 0 5
14339: PUSH
14340: LD_INT 5
14342: ST_TO_ADDR
// if btype = b_depot then
14343: LD_VAR 0 5
14347: PUSH
14348: LD_INT 0
14350: EQUAL
14351: IFFALSE 14361
// btype := b_warehouse ;
14353: LD_ADDR_VAR 0 5
14357: PUSH
14358: LD_INT 1
14360: ST_TO_ADDR
// if btype = b_workshop then
14361: LD_VAR 0 5
14365: PUSH
14366: LD_INT 2
14368: EQUAL
14369: IFFALSE 14379
// btype := b_factory ;
14371: LD_ADDR_VAR 0 5
14375: PUSH
14376: LD_INT 3
14378: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14379: LD_ADDR_VAR 0 4
14383: PUSH
14384: LD_VAR 0 5
14388: PPUSH
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 248
14398: PPUSH
14399: CALL_OW 450
14403: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14404: LD_ADDR_VAR 0 2
14408: PUSH
14409: LD_VAR 0 3
14413: PPUSH
14414: LD_INT 1
14416: PPUSH
14417: CALL_OW 275
14421: PUSH
14422: LD_VAR 0 4
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: GREATEREQUAL
14431: PUSH
14432: LD_VAR 0 3
14436: PPUSH
14437: LD_INT 2
14439: PPUSH
14440: CALL_OW 275
14444: PUSH
14445: LD_VAR 0 4
14449: PUSH
14450: LD_INT 2
14452: ARRAY
14453: GREATEREQUAL
14454: AND
14455: PUSH
14456: LD_VAR 0 3
14460: PPUSH
14461: LD_INT 3
14463: PPUSH
14464: CALL_OW 275
14468: PUSH
14469: LD_VAR 0 4
14473: PUSH
14474: LD_INT 3
14476: ARRAY
14477: GREATEREQUAL
14478: AND
14479: ST_TO_ADDR
// end ;
14480: LD_VAR 0 2
14484: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
14489: PPUSH
// pom := GetBase ( building ) ;
14490: LD_ADDR_VAR 0 4
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 274
14504: ST_TO_ADDR
// if not pom then
14505: LD_VAR 0 4
14509: NOT
14510: IFFALSE 14514
// exit ;
14512: GO 14615
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
14514: LD_ADDR_VAR 0 5
14518: PUSH
14519: LD_VAR 0 2
14523: PPUSH
14524: LD_VAR 0 1
14528: PPUSH
14529: CALL_OW 248
14533: PPUSH
14534: CALL_OW 450
14538: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14539: LD_ADDR_VAR 0 3
14543: PUSH
14544: LD_VAR 0 4
14548: PPUSH
14549: LD_INT 1
14551: PPUSH
14552: CALL_OW 275
14556: PUSH
14557: LD_VAR 0 5
14561: PUSH
14562: LD_INT 1
14564: ARRAY
14565: GREATEREQUAL
14566: PUSH
14567: LD_VAR 0 4
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 275
14579: PUSH
14580: LD_VAR 0 5
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: GREATEREQUAL
14589: AND
14590: PUSH
14591: LD_VAR 0 4
14595: PPUSH
14596: LD_INT 3
14598: PPUSH
14599: CALL_OW 275
14603: PUSH
14604: LD_VAR 0 5
14608: PUSH
14609: LD_INT 3
14611: ARRAY
14612: GREATEREQUAL
14613: AND
14614: ST_TO_ADDR
// end ;
14615: LD_VAR 0 3
14619: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
14624: PPUSH
14625: PPUSH
14626: PPUSH
14627: PPUSH
14628: PPUSH
14629: PPUSH
14630: PPUSH
14631: PPUSH
14632: PPUSH
// result := false ;
14633: LD_ADDR_VAR 0 8
14637: PUSH
14638: LD_INT 0
14640: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
14641: LD_VAR 0 5
14645: NOT
14646: PUSH
14647: LD_VAR 0 1
14651: NOT
14652: OR
14653: PUSH
14654: LD_VAR 0 2
14658: NOT
14659: OR
14660: PUSH
14661: LD_VAR 0 3
14665: NOT
14666: OR
14667: IFFALSE 14671
// exit ;
14669: GO 15485
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
14671: LD_ADDR_VAR 0 14
14675: PUSH
14676: LD_VAR 0 1
14680: PPUSH
14681: LD_VAR 0 2
14685: PPUSH
14686: LD_VAR 0 3
14690: PPUSH
14691: LD_VAR 0 4
14695: PPUSH
14696: LD_VAR 0 5
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PPUSH
14705: CALL_OW 248
14709: PPUSH
14710: LD_INT 0
14712: PPUSH
14713: CALL 16722 0 6
14717: ST_TO_ADDR
// if not hexes then
14718: LD_VAR 0 14
14722: NOT
14723: IFFALSE 14727
// exit ;
14725: GO 15485
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14727: LD_ADDR_VAR 0 17
14731: PUSH
14732: LD_VAR 0 5
14736: PPUSH
14737: LD_INT 22
14739: PUSH
14740: LD_VAR 0 13
14744: PPUSH
14745: CALL_OW 255
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 2
14756: PUSH
14757: LD_INT 30
14759: PUSH
14760: LD_INT 0
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 30
14769: PUSH
14770: LD_INT 1
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 72
14790: ST_TO_ADDR
// for i = 1 to hexes do
14791: LD_ADDR_VAR 0 9
14795: PUSH
14796: DOUBLE
14797: LD_INT 1
14799: DEC
14800: ST_TO_ADDR
14801: LD_VAR 0 14
14805: PUSH
14806: FOR_TO
14807: IFFALSE 15483
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
14809: LD_ADDR_VAR 0 13
14813: PUSH
14814: LD_VAR 0 14
14818: PUSH
14819: LD_VAR 0 9
14823: ARRAY
14824: PUSH
14825: LD_INT 1
14827: ARRAY
14828: PPUSH
14829: LD_VAR 0 14
14833: PUSH
14834: LD_VAR 0 9
14838: ARRAY
14839: PUSH
14840: LD_INT 2
14842: ARRAY
14843: PPUSH
14844: CALL_OW 428
14848: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
14849: LD_VAR 0 14
14853: PUSH
14854: LD_VAR 0 9
14858: ARRAY
14859: PUSH
14860: LD_INT 1
14862: ARRAY
14863: PPUSH
14864: LD_VAR 0 14
14868: PUSH
14869: LD_VAR 0 9
14873: ARRAY
14874: PUSH
14875: LD_INT 2
14877: ARRAY
14878: PPUSH
14879: CALL_OW 351
14883: PUSH
14884: LD_VAR 0 14
14888: PUSH
14889: LD_VAR 0 9
14893: ARRAY
14894: PUSH
14895: LD_INT 1
14897: ARRAY
14898: PPUSH
14899: LD_VAR 0 14
14903: PUSH
14904: LD_VAR 0 9
14908: ARRAY
14909: PUSH
14910: LD_INT 2
14912: ARRAY
14913: PPUSH
14914: CALL_OW 488
14918: NOT
14919: OR
14920: PUSH
14921: LD_VAR 0 13
14925: PPUSH
14926: CALL_OW 247
14930: PUSH
14931: LD_INT 3
14933: EQUAL
14934: OR
14935: IFFALSE 14941
// exit ;
14937: POP
14938: POP
14939: GO 15485
// if not tmp then
14941: LD_VAR 0 13
14945: NOT
14946: IFFALSE 14950
// continue ;
14948: GO 14806
// result := true ;
14950: LD_ADDR_VAR 0 8
14954: PUSH
14955: LD_INT 1
14957: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
14958: LD_VAR 0 6
14962: PUSH
14963: LD_VAR 0 13
14967: PPUSH
14968: CALL_OW 247
14972: PUSH
14973: LD_INT 2
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_VAR 0 13
14982: PPUSH
14983: CALL_OW 263
14987: PUSH
14988: LD_INT 1
14990: EQUAL
14991: AND
14992: IFFALSE 15156
// begin if IsDrivenBy ( tmp ) then
14994: LD_VAR 0 13
14998: PPUSH
14999: CALL_OW 311
15003: IFFALSE 15007
// continue ;
15005: GO 14806
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15007: LD_VAR 0 6
15011: PPUSH
15012: LD_INT 3
15014: PUSH
15015: LD_INT 60
15017: PUSH
15018: EMPTY
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: LD_INT 55
15030: PUSH
15031: EMPTY
15032: LIST
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PPUSH
15042: CALL_OW 72
15046: IFFALSE 15154
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15048: LD_ADDR_VAR 0 18
15052: PUSH
15053: LD_VAR 0 6
15057: PPUSH
15058: LD_INT 3
15060: PUSH
15061: LD_INT 60
15063: PUSH
15064: EMPTY
15065: LIST
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 3
15073: PUSH
15074: LD_INT 55
15076: PUSH
15077: EMPTY
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PPUSH
15088: CALL_OW 72
15092: PUSH
15093: LD_INT 1
15095: ARRAY
15096: ST_TO_ADDR
// if IsInUnit ( driver ) then
15097: LD_VAR 0 18
15101: PPUSH
15102: CALL_OW 310
15106: IFFALSE 15117
// ComExit ( driver ) ;
15108: LD_VAR 0 18
15112: PPUSH
15113: CALL 40427 0 1
// AddComEnterUnit ( driver , tmp ) ;
15117: LD_VAR 0 18
15121: PPUSH
15122: LD_VAR 0 13
15126: PPUSH
15127: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15131: LD_VAR 0 18
15135: PPUSH
15136: LD_VAR 0 7
15140: PPUSH
15141: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15145: LD_VAR 0 18
15149: PPUSH
15150: CALL_OW 181
// end ; continue ;
15154: GO 14806
// end ; if not cleaners or not tmp in cleaners then
15156: LD_VAR 0 6
15160: NOT
15161: PUSH
15162: LD_VAR 0 13
15166: PUSH
15167: LD_VAR 0 6
15171: IN
15172: NOT
15173: OR
15174: IFFALSE 15481
// begin if dep then
15176: LD_VAR 0 17
15180: IFFALSE 15316
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15182: LD_ADDR_VAR 0 16
15186: PUSH
15187: LD_VAR 0 17
15191: PUSH
15192: LD_INT 1
15194: ARRAY
15195: PPUSH
15196: CALL_OW 250
15200: PPUSH
15201: LD_VAR 0 17
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL_OW 254
15214: PPUSH
15215: LD_INT 5
15217: PPUSH
15218: CALL_OW 272
15222: PUSH
15223: LD_VAR 0 17
15227: PUSH
15228: LD_INT 1
15230: ARRAY
15231: PPUSH
15232: CALL_OW 251
15236: PPUSH
15237: LD_VAR 0 17
15241: PUSH
15242: LD_INT 1
15244: ARRAY
15245: PPUSH
15246: CALL_OW 254
15250: PPUSH
15251: LD_INT 5
15253: PPUSH
15254: CALL_OW 273
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15263: LD_VAR 0 16
15267: PUSH
15268: LD_INT 1
15270: ARRAY
15271: PPUSH
15272: LD_VAR 0 16
15276: PUSH
15277: LD_INT 2
15279: ARRAY
15280: PPUSH
15281: CALL_OW 488
15285: IFFALSE 15316
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15287: LD_VAR 0 13
15291: PPUSH
15292: LD_VAR 0 16
15296: PUSH
15297: LD_INT 1
15299: ARRAY
15300: PPUSH
15301: LD_VAR 0 16
15305: PUSH
15306: LD_INT 2
15308: ARRAY
15309: PPUSH
15310: CALL_OW 111
// continue ;
15314: GO 14806
// end ; end ; r := GetDir ( tmp ) ;
15316: LD_ADDR_VAR 0 15
15320: PUSH
15321: LD_VAR 0 13
15325: PPUSH
15326: CALL_OW 254
15330: ST_TO_ADDR
// if r = 5 then
15331: LD_VAR 0 15
15335: PUSH
15336: LD_INT 5
15338: EQUAL
15339: IFFALSE 15349
// r := 0 ;
15341: LD_ADDR_VAR 0 15
15345: PUSH
15346: LD_INT 0
15348: ST_TO_ADDR
// for j = r to 5 do
15349: LD_ADDR_VAR 0 10
15353: PUSH
15354: DOUBLE
15355: LD_VAR 0 15
15359: DEC
15360: ST_TO_ADDR
15361: LD_INT 5
15363: PUSH
15364: FOR_TO
15365: IFFALSE 15479
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
15367: LD_ADDR_VAR 0 11
15371: PUSH
15372: LD_VAR 0 13
15376: PPUSH
15377: CALL_OW 250
15381: PPUSH
15382: LD_VAR 0 10
15386: PPUSH
15387: LD_INT 2
15389: PPUSH
15390: CALL_OW 272
15394: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
15395: LD_ADDR_VAR 0 12
15399: PUSH
15400: LD_VAR 0 13
15404: PPUSH
15405: CALL_OW 251
15409: PPUSH
15410: LD_VAR 0 10
15414: PPUSH
15415: LD_INT 2
15417: PPUSH
15418: CALL_OW 273
15422: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
15423: LD_VAR 0 11
15427: PPUSH
15428: LD_VAR 0 12
15432: PPUSH
15433: CALL_OW 488
15437: PUSH
15438: LD_VAR 0 11
15442: PPUSH
15443: LD_VAR 0 12
15447: PPUSH
15448: CALL_OW 428
15452: NOT
15453: AND
15454: IFFALSE 15477
// begin ComMoveXY ( tmp , _x , _y ) ;
15456: LD_VAR 0 13
15460: PPUSH
15461: LD_VAR 0 11
15465: PPUSH
15466: LD_VAR 0 12
15470: PPUSH
15471: CALL_OW 111
// break ;
15475: GO 15479
// end ; end ;
15477: GO 15364
15479: POP
15480: POP
// end ; end ;
15481: GO 14806
15483: POP
15484: POP
// end ;
15485: LD_VAR 0 8
15489: RET
// export function BuildingTechInvented ( side , btype ) ; begin
15490: LD_INT 0
15492: PPUSH
// result := true ;
15493: LD_ADDR_VAR 0 3
15497: PUSH
15498: LD_INT 1
15500: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
15501: LD_VAR 0 2
15505: PUSH
15506: LD_INT 24
15508: DOUBLE
15509: EQUAL
15510: IFTRUE 15520
15512: LD_INT 33
15514: DOUBLE
15515: EQUAL
15516: IFTRUE 15520
15518: GO 15545
15520: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
15521: LD_ADDR_VAR 0 3
15525: PUSH
15526: LD_INT 32
15528: PPUSH
15529: LD_VAR 0 1
15533: PPUSH
15534: CALL_OW 321
15538: PUSH
15539: LD_INT 2
15541: EQUAL
15542: ST_TO_ADDR
15543: GO 15865
15545: LD_INT 20
15547: DOUBLE
15548: EQUAL
15549: IFTRUE 15553
15551: GO 15578
15553: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
15554: LD_ADDR_VAR 0 3
15558: PUSH
15559: LD_INT 6
15561: PPUSH
15562: LD_VAR 0 1
15566: PPUSH
15567: CALL_OW 321
15571: PUSH
15572: LD_INT 2
15574: EQUAL
15575: ST_TO_ADDR
15576: GO 15865
15578: LD_INT 22
15580: DOUBLE
15581: EQUAL
15582: IFTRUE 15592
15584: LD_INT 36
15586: DOUBLE
15587: EQUAL
15588: IFTRUE 15592
15590: GO 15617
15592: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
15593: LD_ADDR_VAR 0 3
15597: PUSH
15598: LD_INT 15
15600: PPUSH
15601: LD_VAR 0 1
15605: PPUSH
15606: CALL_OW 321
15610: PUSH
15611: LD_INT 2
15613: EQUAL
15614: ST_TO_ADDR
15615: GO 15865
15617: LD_INT 30
15619: DOUBLE
15620: EQUAL
15621: IFTRUE 15625
15623: GO 15650
15625: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
15626: LD_ADDR_VAR 0 3
15630: PUSH
15631: LD_INT 20
15633: PPUSH
15634: LD_VAR 0 1
15638: PPUSH
15639: CALL_OW 321
15643: PUSH
15644: LD_INT 2
15646: EQUAL
15647: ST_TO_ADDR
15648: GO 15865
15650: LD_INT 28
15652: DOUBLE
15653: EQUAL
15654: IFTRUE 15664
15656: LD_INT 21
15658: DOUBLE
15659: EQUAL
15660: IFTRUE 15664
15662: GO 15689
15664: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
15665: LD_ADDR_VAR 0 3
15669: PUSH
15670: LD_INT 21
15672: PPUSH
15673: LD_VAR 0 1
15677: PPUSH
15678: CALL_OW 321
15682: PUSH
15683: LD_INT 2
15685: EQUAL
15686: ST_TO_ADDR
15687: GO 15865
15689: LD_INT 16
15691: DOUBLE
15692: EQUAL
15693: IFTRUE 15697
15695: GO 15724
15697: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
15698: LD_ADDR_VAR 0 3
15702: PUSH
15703: LD_EXP 34
15707: PPUSH
15708: LD_VAR 0 1
15712: PPUSH
15713: CALL_OW 321
15717: PUSH
15718: LD_INT 2
15720: EQUAL
15721: ST_TO_ADDR
15722: GO 15865
15724: LD_INT 19
15726: DOUBLE
15727: EQUAL
15728: IFTRUE 15738
15730: LD_INT 23
15732: DOUBLE
15733: EQUAL
15734: IFTRUE 15738
15736: GO 15765
15738: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
15739: LD_ADDR_VAR 0 3
15743: PUSH
15744: LD_EXP 33
15748: PPUSH
15749: LD_VAR 0 1
15753: PPUSH
15754: CALL_OW 321
15758: PUSH
15759: LD_INT 2
15761: EQUAL
15762: ST_TO_ADDR
15763: GO 15865
15765: LD_INT 17
15767: DOUBLE
15768: EQUAL
15769: IFTRUE 15773
15771: GO 15798
15773: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
15774: LD_ADDR_VAR 0 3
15778: PUSH
15779: LD_INT 39
15781: PPUSH
15782: LD_VAR 0 1
15786: PPUSH
15787: CALL_OW 321
15791: PUSH
15792: LD_INT 2
15794: EQUAL
15795: ST_TO_ADDR
15796: GO 15865
15798: LD_INT 18
15800: DOUBLE
15801: EQUAL
15802: IFTRUE 15806
15804: GO 15831
15806: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
15807: LD_ADDR_VAR 0 3
15811: PUSH
15812: LD_INT 40
15814: PPUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: CALL_OW 321
15824: PUSH
15825: LD_INT 2
15827: EQUAL
15828: ST_TO_ADDR
15829: GO 15865
15831: LD_INT 27
15833: DOUBLE
15834: EQUAL
15835: IFTRUE 15839
15837: GO 15864
15839: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
15840: LD_ADDR_VAR 0 3
15844: PUSH
15845: LD_INT 35
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 321
15857: PUSH
15858: LD_INT 2
15860: EQUAL
15861: ST_TO_ADDR
15862: GO 15865
15864: POP
// end ;
15865: LD_VAR 0 3
15869: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
15870: LD_INT 0
15872: PPUSH
15873: PPUSH
15874: PPUSH
15875: PPUSH
15876: PPUSH
15877: PPUSH
15878: PPUSH
15879: PPUSH
15880: PPUSH
15881: PPUSH
15882: PPUSH
// result := false ;
15883: LD_ADDR_VAR 0 6
15887: PUSH
15888: LD_INT 0
15890: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
15891: LD_VAR 0 1
15895: NOT
15896: PUSH
15897: LD_VAR 0 1
15901: PPUSH
15902: CALL_OW 266
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: IN
15917: NOT
15918: OR
15919: PUSH
15920: LD_VAR 0 2
15924: NOT
15925: OR
15926: PUSH
15927: LD_VAR 0 5
15931: PUSH
15932: LD_INT 0
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 3
15943: PUSH
15944: LD_INT 4
15946: PUSH
15947: LD_INT 5
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: IN
15958: NOT
15959: OR
15960: PUSH
15961: LD_VAR 0 3
15965: PPUSH
15966: LD_VAR 0 4
15970: PPUSH
15971: CALL_OW 488
15975: NOT
15976: OR
15977: IFFALSE 15981
// exit ;
15979: GO 16717
// side := GetSide ( depot ) ;
15981: LD_ADDR_VAR 0 9
15985: PUSH
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 255
15995: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
15996: LD_VAR 0 9
16000: PPUSH
16001: LD_VAR 0 2
16005: PPUSH
16006: CALL 15490 0 2
16010: NOT
16011: IFFALSE 16015
// exit ;
16013: GO 16717
// pom := GetBase ( depot ) ;
16015: LD_ADDR_VAR 0 10
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 274
16029: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16030: LD_ADDR_VAR 0 11
16034: PUSH
16035: LD_VAR 0 2
16039: PPUSH
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 248
16049: PPUSH
16050: CALL_OW 450
16054: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16055: LD_VAR 0 10
16059: PPUSH
16060: LD_INT 1
16062: PPUSH
16063: CALL_OW 275
16067: PUSH
16068: LD_VAR 0 11
16072: PUSH
16073: LD_INT 1
16075: ARRAY
16076: GREATEREQUAL
16077: PUSH
16078: LD_VAR 0 10
16082: PPUSH
16083: LD_INT 2
16085: PPUSH
16086: CALL_OW 275
16090: PUSH
16091: LD_VAR 0 11
16095: PUSH
16096: LD_INT 2
16098: ARRAY
16099: GREATEREQUAL
16100: AND
16101: PUSH
16102: LD_VAR 0 10
16106: PPUSH
16107: LD_INT 3
16109: PPUSH
16110: CALL_OW 275
16114: PUSH
16115: LD_VAR 0 11
16119: PUSH
16120: LD_INT 3
16122: ARRAY
16123: GREATEREQUAL
16124: AND
16125: NOT
16126: IFFALSE 16130
// exit ;
16128: GO 16717
// if GetBType ( depot ) = b_depot then
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 266
16139: PUSH
16140: LD_INT 0
16142: EQUAL
16143: IFFALSE 16155
// dist := 28 else
16145: LD_ADDR_VAR 0 14
16149: PUSH
16150: LD_INT 28
16152: ST_TO_ADDR
16153: GO 16163
// dist := 36 ;
16155: LD_ADDR_VAR 0 14
16159: PUSH
16160: LD_INT 36
16162: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16163: LD_VAR 0 1
16167: PPUSH
16168: LD_VAR 0 3
16172: PPUSH
16173: LD_VAR 0 4
16177: PPUSH
16178: CALL_OW 297
16182: PUSH
16183: LD_VAR 0 14
16187: GREATER
16188: IFFALSE 16192
// exit ;
16190: GO 16717
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16192: LD_ADDR_VAR 0 12
16196: PUSH
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PPUSH
16207: LD_VAR 0 4
16211: PPUSH
16212: LD_VAR 0 5
16216: PPUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 248
16226: PPUSH
16227: LD_INT 0
16229: PPUSH
16230: CALL 16722 0 6
16234: ST_TO_ADDR
// if not hexes then
16235: LD_VAR 0 12
16239: NOT
16240: IFFALSE 16244
// exit ;
16242: GO 16717
// hex := GetHexInfo ( x , y ) ;
16244: LD_ADDR_VAR 0 15
16248: PUSH
16249: LD_VAR 0 3
16253: PPUSH
16254: LD_VAR 0 4
16258: PPUSH
16259: CALL_OW 546
16263: ST_TO_ADDR
// if hex [ 1 ] then
16264: LD_VAR 0 15
16268: PUSH
16269: LD_INT 1
16271: ARRAY
16272: IFFALSE 16276
// exit ;
16274: GO 16717
// height := hex [ 2 ] ;
16276: LD_ADDR_VAR 0 13
16280: PUSH
16281: LD_VAR 0 15
16285: PUSH
16286: LD_INT 2
16288: ARRAY
16289: ST_TO_ADDR
// for i = 1 to hexes do
16290: LD_ADDR_VAR 0 7
16294: PUSH
16295: DOUBLE
16296: LD_INT 1
16298: DEC
16299: ST_TO_ADDR
16300: LD_VAR 0 12
16304: PUSH
16305: FOR_TO
16306: IFFALSE 16636
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
16308: LD_VAR 0 12
16312: PUSH
16313: LD_VAR 0 7
16317: ARRAY
16318: PUSH
16319: LD_INT 1
16321: ARRAY
16322: PPUSH
16323: LD_VAR 0 12
16327: PUSH
16328: LD_VAR 0 7
16332: ARRAY
16333: PUSH
16334: LD_INT 2
16336: ARRAY
16337: PPUSH
16338: CALL_OW 488
16342: NOT
16343: PUSH
16344: LD_VAR 0 12
16348: PUSH
16349: LD_VAR 0 7
16353: ARRAY
16354: PUSH
16355: LD_INT 1
16357: ARRAY
16358: PPUSH
16359: LD_VAR 0 12
16363: PUSH
16364: LD_VAR 0 7
16368: ARRAY
16369: PUSH
16370: LD_INT 2
16372: ARRAY
16373: PPUSH
16374: CALL_OW 428
16378: PUSH
16379: LD_INT 0
16381: GREATER
16382: OR
16383: PUSH
16384: LD_VAR 0 12
16388: PUSH
16389: LD_VAR 0 7
16393: ARRAY
16394: PUSH
16395: LD_INT 1
16397: ARRAY
16398: PPUSH
16399: LD_VAR 0 12
16403: PUSH
16404: LD_VAR 0 7
16408: ARRAY
16409: PUSH
16410: LD_INT 2
16412: ARRAY
16413: PPUSH
16414: CALL_OW 351
16418: OR
16419: IFFALSE 16425
// exit ;
16421: POP
16422: POP
16423: GO 16717
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
16425: LD_ADDR_VAR 0 8
16429: PUSH
16430: LD_VAR 0 12
16434: PUSH
16435: LD_VAR 0 7
16439: ARRAY
16440: PUSH
16441: LD_INT 1
16443: ARRAY
16444: PPUSH
16445: LD_VAR 0 12
16449: PUSH
16450: LD_VAR 0 7
16454: ARRAY
16455: PUSH
16456: LD_INT 2
16458: ARRAY
16459: PPUSH
16460: CALL_OW 546
16464: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
16465: LD_VAR 0 8
16469: PUSH
16470: LD_INT 1
16472: ARRAY
16473: PUSH
16474: LD_VAR 0 8
16478: PUSH
16479: LD_INT 2
16481: ARRAY
16482: PUSH
16483: LD_VAR 0 13
16487: PUSH
16488: LD_INT 2
16490: PLUS
16491: GREATER
16492: OR
16493: PUSH
16494: LD_VAR 0 8
16498: PUSH
16499: LD_INT 2
16501: ARRAY
16502: PUSH
16503: LD_VAR 0 13
16507: PUSH
16508: LD_INT 2
16510: MINUS
16511: LESS
16512: OR
16513: PUSH
16514: LD_VAR 0 8
16518: PUSH
16519: LD_INT 3
16521: ARRAY
16522: PUSH
16523: LD_INT 0
16525: PUSH
16526: LD_INT 8
16528: PUSH
16529: LD_INT 9
16531: PUSH
16532: LD_INT 10
16534: PUSH
16535: LD_INT 11
16537: PUSH
16538: LD_INT 12
16540: PUSH
16541: LD_INT 13
16543: PUSH
16544: LD_INT 16
16546: PUSH
16547: LD_INT 17
16549: PUSH
16550: LD_INT 18
16552: PUSH
16553: LD_INT 19
16555: PUSH
16556: LD_INT 20
16558: PUSH
16559: LD_INT 21
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: IN
16577: NOT
16578: OR
16579: PUSH
16580: LD_VAR 0 8
16584: PUSH
16585: LD_INT 5
16587: ARRAY
16588: NOT
16589: OR
16590: PUSH
16591: LD_VAR 0 8
16595: PUSH
16596: LD_INT 6
16598: ARRAY
16599: PUSH
16600: LD_INT 1
16602: PUSH
16603: LD_INT 2
16605: PUSH
16606: LD_INT 7
16608: PUSH
16609: LD_INT 9
16611: PUSH
16612: LD_INT 10
16614: PUSH
16615: LD_INT 11
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: IN
16626: NOT
16627: OR
16628: IFFALSE 16634
// exit ;
16630: POP
16631: POP
16632: GO 16717
// end ;
16634: GO 16305
16636: POP
16637: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
16638: LD_VAR 0 9
16642: PPUSH
16643: LD_VAR 0 3
16647: PPUSH
16648: LD_VAR 0 4
16652: PPUSH
16653: LD_INT 20
16655: PPUSH
16656: CALL 8663 0 4
16660: PUSH
16661: LD_INT 4
16663: ARRAY
16664: IFFALSE 16668
// exit ;
16666: GO 16717
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
16668: LD_VAR 0 2
16672: PUSH
16673: LD_INT 29
16675: PUSH
16676: LD_INT 30
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: IN
16683: PUSH
16684: LD_VAR 0 3
16688: PPUSH
16689: LD_VAR 0 4
16693: PPUSH
16694: LD_VAR 0 9
16698: PPUSH
16699: CALL_OW 440
16703: NOT
16704: AND
16705: IFFALSE 16709
// exit ;
16707: GO 16717
// result := true ;
16709: LD_ADDR_VAR 0 6
16713: PUSH
16714: LD_INT 1
16716: ST_TO_ADDR
// end ;
16717: LD_VAR 0 6
16721: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
16722: LD_INT 0
16724: PPUSH
16725: PPUSH
16726: PPUSH
16727: PPUSH
16728: PPUSH
16729: PPUSH
16730: PPUSH
16731: PPUSH
16732: PPUSH
16733: PPUSH
16734: PPUSH
16735: PPUSH
16736: PPUSH
16737: PPUSH
16738: PPUSH
16739: PPUSH
16740: PPUSH
16741: PPUSH
16742: PPUSH
16743: PPUSH
16744: PPUSH
16745: PPUSH
16746: PPUSH
16747: PPUSH
16748: PPUSH
16749: PPUSH
16750: PPUSH
16751: PPUSH
16752: PPUSH
16753: PPUSH
16754: PPUSH
16755: PPUSH
16756: PPUSH
16757: PPUSH
16758: PPUSH
16759: PPUSH
16760: PPUSH
16761: PPUSH
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
16767: PPUSH
16768: PPUSH
16769: PPUSH
16770: PPUSH
16771: PPUSH
16772: PPUSH
16773: PPUSH
16774: PPUSH
16775: PPUSH
16776: PPUSH
16777: PPUSH
16778: PPUSH
16779: PPUSH
16780: PPUSH
16781: PPUSH
// result = [ ] ;
16782: LD_ADDR_VAR 0 7
16786: PUSH
16787: EMPTY
16788: ST_TO_ADDR
// temp_list = [ ] ;
16789: LD_ADDR_VAR 0 9
16793: PUSH
16794: EMPTY
16795: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
16796: LD_VAR 0 4
16800: PUSH
16801: LD_INT 0
16803: PUSH
16804: LD_INT 1
16806: PUSH
16807: LD_INT 2
16809: PUSH
16810: LD_INT 3
16812: PUSH
16813: LD_INT 4
16815: PUSH
16816: LD_INT 5
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: IN
16827: NOT
16828: PUSH
16829: LD_VAR 0 1
16833: PUSH
16834: LD_INT 0
16836: PUSH
16837: LD_INT 1
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: IN
16844: PUSH
16845: LD_VAR 0 5
16849: PUSH
16850: LD_INT 1
16852: PUSH
16853: LD_INT 2
16855: PUSH
16856: LD_INT 3
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: IN
16864: NOT
16865: AND
16866: OR
16867: IFFALSE 16871
// exit ;
16869: GO 35262
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
16871: LD_VAR 0 1
16875: PUSH
16876: LD_INT 6
16878: PUSH
16879: LD_INT 7
16881: PUSH
16882: LD_INT 8
16884: PUSH
16885: LD_INT 13
16887: PUSH
16888: LD_INT 12
16890: PUSH
16891: LD_INT 15
16893: PUSH
16894: LD_INT 11
16896: PUSH
16897: LD_INT 14
16899: PUSH
16900: LD_INT 10
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: IN
16914: IFFALSE 16924
// btype = b_lab ;
16916: LD_ADDR_VAR 0 1
16920: PUSH
16921: LD_INT 6
16923: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
16924: LD_VAR 0 6
16928: PUSH
16929: LD_INT 0
16931: PUSH
16932: LD_INT 1
16934: PUSH
16935: LD_INT 2
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: IN
16943: NOT
16944: PUSH
16945: LD_VAR 0 1
16949: PUSH
16950: LD_INT 0
16952: PUSH
16953: LD_INT 1
16955: PUSH
16956: LD_INT 2
16958: PUSH
16959: LD_INT 3
16961: PUSH
16962: LD_INT 6
16964: PUSH
16965: LD_INT 36
16967: PUSH
16968: LD_INT 4
16970: PUSH
16971: LD_INT 5
16973: PUSH
16974: LD_INT 31
16976: PUSH
16977: LD_INT 32
16979: PUSH
16980: LD_INT 33
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: IN
16996: NOT
16997: PUSH
16998: LD_VAR 0 6
17002: PUSH
17003: LD_INT 1
17005: EQUAL
17006: AND
17007: OR
17008: PUSH
17009: LD_VAR 0 1
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: LD_INT 3
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: IN
17024: NOT
17025: PUSH
17026: LD_VAR 0 6
17030: PUSH
17031: LD_INT 2
17033: EQUAL
17034: AND
17035: OR
17036: IFFALSE 17046
// mode = 0 ;
17038: LD_ADDR_VAR 0 6
17042: PUSH
17043: LD_INT 0
17045: ST_TO_ADDR
// case mode of 0 :
17046: LD_VAR 0 6
17050: PUSH
17051: LD_INT 0
17053: DOUBLE
17054: EQUAL
17055: IFTRUE 17059
17057: GO 28512
17059: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17060: LD_ADDR_VAR 0 11
17064: PUSH
17065: LD_INT 0
17067: PUSH
17068: LD_INT 0
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 0
17077: PUSH
17078: LD_INT 1
17080: NEG
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PUSH
17086: LD_INT 1
17088: PUSH
17089: LD_INT 0
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: LD_INT 1
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 1
17118: NEG
17119: PUSH
17120: LD_INT 0
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 1
17129: NEG
17130: PUSH
17131: LD_INT 1
17133: NEG
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 1
17141: NEG
17142: PUSH
17143: LD_INT 2
17145: NEG
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 0
17153: PUSH
17154: LD_INT 2
17156: NEG
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: PUSH
17162: LD_INT 1
17164: PUSH
17165: LD_INT 1
17167: NEG
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: PUSH
17173: LD_INT 1
17175: PUSH
17176: LD_INT 2
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: PUSH
17183: LD_INT 0
17185: PUSH
17186: LD_INT 2
17188: PUSH
17189: EMPTY
17190: LIST
17191: LIST
17192: PUSH
17193: LD_INT 1
17195: NEG
17196: PUSH
17197: LD_INT 1
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 1
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 0
17216: PUSH
17217: LD_INT 3
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: LD_INT 1
17226: NEG
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17253: LD_ADDR_VAR 0 12
17257: PUSH
17258: LD_INT 0
17260: PUSH
17261: LD_INT 0
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: LD_INT 1
17273: NEG
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: LD_INT 0
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 1
17291: PUSH
17292: LD_INT 1
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: LD_INT 0
17301: PUSH
17302: LD_INT 1
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 1
17311: NEG
17312: PUSH
17313: LD_INT 0
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 1
17322: NEG
17323: PUSH
17324: LD_INT 1
17326: NEG
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 1
17334: PUSH
17335: LD_INT 1
17337: NEG
17338: PUSH
17339: EMPTY
17340: LIST
17341: LIST
17342: PUSH
17343: LD_INT 2
17345: PUSH
17346: LD_INT 0
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: LD_INT 1
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 1
17365: NEG
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 2
17376: NEG
17377: PUSH
17378: LD_INT 0
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 2
17387: NEG
17388: PUSH
17389: LD_INT 1
17391: NEG
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 2
17399: NEG
17400: PUSH
17401: LD_INT 1
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PUSH
17408: LD_INT 3
17410: NEG
17411: PUSH
17412: LD_INT 0
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 3
17421: NEG
17422: PUSH
17423: LD_INT 1
17425: NEG
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17449: LD_ADDR_VAR 0 13
17453: PUSH
17454: LD_INT 0
17456: PUSH
17457: LD_INT 0
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 0
17466: PUSH
17467: LD_INT 1
17469: NEG
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 1
17477: PUSH
17478: LD_INT 0
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 1
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: PUSH
17495: LD_INT 0
17497: PUSH
17498: LD_INT 1
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: PUSH
17505: LD_INT 1
17507: NEG
17508: PUSH
17509: LD_INT 0
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PUSH
17516: LD_INT 1
17518: NEG
17519: PUSH
17520: LD_INT 1
17522: NEG
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 1
17530: NEG
17531: PUSH
17532: LD_INT 2
17534: NEG
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 2
17552: PUSH
17553: LD_INT 2
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 1
17562: PUSH
17563: LD_INT 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: NEG
17573: PUSH
17574: LD_INT 1
17576: NEG
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PUSH
17582: LD_INT 2
17584: NEG
17585: PUSH
17586: LD_INT 2
17588: NEG
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 2
17596: NEG
17597: PUSH
17598: LD_INT 3
17600: NEG
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PUSH
17606: LD_INT 3
17608: NEG
17609: PUSH
17610: LD_INT 2
17612: NEG
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 3
17620: NEG
17621: PUSH
17622: LD_INT 3
17624: NEG
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: LIST
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
17648: LD_ADDR_VAR 0 14
17652: PUSH
17653: LD_INT 0
17655: PUSH
17656: LD_INT 0
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 0
17665: PUSH
17666: LD_INT 1
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: LD_INT 0
17679: PUSH
17680: EMPTY
17681: LIST
17682: LIST
17683: PUSH
17684: LD_INT 1
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: LD_INT 0
17696: PUSH
17697: LD_INT 1
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 1
17706: NEG
17707: PUSH
17708: LD_INT 0
17710: PUSH
17711: EMPTY
17712: LIST
17713: LIST
17714: PUSH
17715: LD_INT 1
17717: NEG
17718: PUSH
17719: LD_INT 1
17721: NEG
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 1
17729: NEG
17730: PUSH
17731: LD_INT 2
17733: NEG
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 0
17741: PUSH
17742: LD_INT 2
17744: NEG
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: LD_INT 1
17755: NEG
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 0
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 1
17783: NEG
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: LD_INT 1
17794: NEG
17795: PUSH
17796: LD_INT 3
17798: NEG
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 0
17806: PUSH
17807: LD_INT 3
17809: NEG
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 1
17817: PUSH
17818: LD_INT 2
17820: NEG
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
17844: LD_ADDR_VAR 0 15
17848: PUSH
17849: LD_INT 0
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 0
17861: PUSH
17862: LD_INT 1
17864: NEG
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 1
17872: PUSH
17873: LD_INT 0
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 1
17882: PUSH
17883: LD_INT 1
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 0
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 1
17902: NEG
17903: PUSH
17904: LD_INT 0
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: PUSH
17911: LD_INT 1
17913: NEG
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: LD_INT 1
17928: NEG
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: LD_INT 0
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: NEG
17957: PUSH
17958: LD_INT 1
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 2
17967: NEG
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 2
17978: NEG
17979: PUSH
17980: LD_INT 1
17982: NEG
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 2
17990: PUSH
17991: LD_INT 1
17993: NEG
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: LD_INT 0
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 3
18011: PUSH
18012: LD_INT 1
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18037: LD_ADDR_VAR 0 16
18041: PUSH
18042: LD_INT 0
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 0
18054: PUSH
18055: LD_INT 1
18057: NEG
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 1
18065: PUSH
18066: LD_INT 0
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: LD_INT 1
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 0
18085: PUSH
18086: LD_INT 1
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 1
18095: NEG
18096: PUSH
18097: LD_INT 0
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: LD_INT 1
18110: NEG
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 1
18118: NEG
18119: PUSH
18120: LD_INT 2
18122: NEG
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 2
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 2
18140: PUSH
18141: LD_INT 2
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 1
18150: PUSH
18151: LD_INT 2
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: LD_INT 2
18160: NEG
18161: PUSH
18162: LD_INT 1
18164: NEG
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: LD_INT 2
18172: NEG
18173: PUSH
18174: LD_INT 2
18176: NEG
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 3
18184: PUSH
18185: LD_INT 2
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 3
18194: PUSH
18195: LD_INT 3
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: LD_INT 3
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18230: LD_ADDR_VAR 0 17
18234: PUSH
18235: LD_INT 0
18237: PUSH
18238: LD_INT 0
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PUSH
18245: LD_INT 0
18247: PUSH
18248: LD_INT 1
18250: NEG
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: LD_INT 0
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: LD_INT 1
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 0
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: LD_INT 0
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: PUSH
18297: LD_INT 1
18299: NEG
18300: PUSH
18301: LD_INT 1
18303: NEG
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 1
18311: NEG
18312: PUSH
18313: LD_INT 2
18315: NEG
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: LD_INT 2
18326: NEG
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 1
18334: PUSH
18335: LD_INT 1
18337: NEG
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 0
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: LD_INT 1
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: LD_INT 2
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: PUSH
18376: LD_INT 2
18378: PUSH
18379: EMPTY
18380: LIST
18381: LIST
18382: PUSH
18383: LD_INT 0
18385: PUSH
18386: LD_INT 2
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: LD_INT 1
18395: NEG
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: NEG
18407: PUSH
18408: LD_INT 0
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: PUSH
18415: LD_INT 2
18417: NEG
18418: PUSH
18419: LD_INT 1
18421: NEG
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: LD_INT 2
18429: NEG
18430: PUSH
18431: LD_INT 2
18433: NEG
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18460: LD_ADDR_VAR 0 18
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: LD_INT 0
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 0
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 1
18488: PUSH
18489: LD_INT 0
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 1
18498: PUSH
18499: LD_INT 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 0
18508: PUSH
18509: LD_INT 1
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 1
18518: NEG
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 1
18529: NEG
18530: PUSH
18531: LD_INT 1
18533: NEG
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 1
18541: NEG
18542: PUSH
18543: LD_INT 2
18545: NEG
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 0
18553: PUSH
18554: LD_INT 2
18556: NEG
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 1
18564: PUSH
18565: LD_INT 1
18567: NEG
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: LD_INT 0
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: LD_INT 1
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 2
18595: PUSH
18596: LD_INT 2
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: LD_INT 1
18605: PUSH
18606: LD_INT 2
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 0
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 1
18625: NEG
18626: PUSH
18627: LD_INT 1
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 2
18636: NEG
18637: PUSH
18638: LD_INT 0
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 2
18647: NEG
18648: PUSH
18649: LD_INT 1
18651: NEG
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 2
18659: NEG
18660: PUSH
18661: LD_INT 2
18663: NEG
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18690: LD_ADDR_VAR 0 19
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: LD_INT 0
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 0
18707: PUSH
18708: LD_INT 1
18710: NEG
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 1
18718: PUSH
18719: LD_INT 0
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 1
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 0
18738: PUSH
18739: LD_INT 1
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PUSH
18746: LD_INT 1
18748: NEG
18749: PUSH
18750: LD_INT 0
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 1
18759: NEG
18760: PUSH
18761: LD_INT 1
18763: NEG
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 1
18771: NEG
18772: PUSH
18773: LD_INT 2
18775: NEG
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PUSH
18781: LD_INT 0
18783: PUSH
18784: LD_INT 2
18786: NEG
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 2
18805: PUSH
18806: LD_INT 0
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: LD_INT 1
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 2
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PUSH
18833: LD_INT 1
18835: PUSH
18836: LD_INT 2
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: LD_INT 2
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 1
18855: NEG
18856: PUSH
18857: LD_INT 1
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 2
18866: NEG
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 2
18877: NEG
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 2
18889: NEG
18890: PUSH
18891: LD_INT 2
18893: NEG
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18920: LD_ADDR_VAR 0 20
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: LD_INT 0
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 0
18937: PUSH
18938: LD_INT 1
18940: NEG
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 1
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 0
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: LD_INT 1
18978: NEG
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PUSH
18987: LD_INT 1
18989: NEG
18990: PUSH
18991: LD_INT 1
18993: NEG
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 1
19001: NEG
19002: PUSH
19003: LD_INT 2
19005: NEG
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 0
19013: PUSH
19014: LD_INT 2
19016: NEG
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 1
19027: NEG
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 2
19045: PUSH
19046: LD_INT 1
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: LD_INT 2
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: LD_INT 1
19065: PUSH
19066: LD_INT 2
19068: PUSH
19069: EMPTY
19070: LIST
19071: LIST
19072: PUSH
19073: LD_INT 0
19075: PUSH
19076: LD_INT 2
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PUSH
19083: LD_INT 1
19085: NEG
19086: PUSH
19087: LD_INT 1
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 2
19096: NEG
19097: PUSH
19098: LD_INT 0
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 2
19107: NEG
19108: PUSH
19109: LD_INT 1
19111: NEG
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 2
19119: NEG
19120: PUSH
19121: LD_INT 2
19123: NEG
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19150: LD_ADDR_VAR 0 21
19154: PUSH
19155: LD_INT 0
19157: PUSH
19158: LD_INT 0
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 0
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: LD_INT 0
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 1
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: LD_INT 0
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: LD_INT 0
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 1
19219: NEG
19220: PUSH
19221: LD_INT 1
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: NEG
19232: PUSH
19233: LD_INT 2
19235: NEG
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 0
19243: PUSH
19244: LD_INT 2
19246: NEG
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: LD_INT 1
19257: NEG
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: LD_INT 0
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 2
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 0
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 1
19315: NEG
19316: PUSH
19317: LD_INT 1
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: NEG
19327: PUSH
19328: LD_INT 0
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: LD_INT 2
19337: NEG
19338: PUSH
19339: LD_INT 1
19341: NEG
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 2
19349: NEG
19350: PUSH
19351: LD_INT 2
19353: NEG
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19380: LD_ADDR_VAR 0 22
19384: PUSH
19385: LD_INT 0
19387: PUSH
19388: LD_INT 0
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 0
19397: PUSH
19398: LD_INT 1
19400: NEG
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: LD_INT 0
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 1
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: LD_INT 1
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 0
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: LD_INT 1
19449: NEG
19450: PUSH
19451: LD_INT 1
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: NEG
19462: PUSH
19463: LD_INT 2
19465: NEG
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 0
19473: PUSH
19474: LD_INT 2
19476: NEG
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 1
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 0
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: LD_INT 1
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: LD_INT 2
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PUSH
19523: LD_INT 1
19525: PUSH
19526: LD_INT 2
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 0
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 1
19545: NEG
19546: PUSH
19547: LD_INT 1
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: LD_INT 0
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 2
19567: NEG
19568: PUSH
19569: LD_INT 1
19571: NEG
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PUSH
19577: LD_INT 2
19579: NEG
19580: PUSH
19581: LD_INT 2
19583: NEG
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
19610: LD_ADDR_VAR 0 23
19614: PUSH
19615: LD_INT 0
19617: PUSH
19618: LD_INT 0
19620: PUSH
19621: EMPTY
19622: LIST
19623: LIST
19624: PUSH
19625: LD_INT 0
19627: PUSH
19628: LD_INT 1
19630: NEG
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: LD_INT 0
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PUSH
19646: LD_INT 1
19648: PUSH
19649: LD_INT 1
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: LD_INT 1
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: LD_INT 0
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PUSH
19677: LD_INT 1
19679: NEG
19680: PUSH
19681: LD_INT 1
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: NEG
19692: PUSH
19693: LD_INT 2
19695: NEG
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 0
19703: PUSH
19704: LD_INT 2
19706: NEG
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: LD_INT 1
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: LD_INT 0
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: LD_INT 1
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: LD_INT 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 1
19755: PUSH
19756: LD_INT 2
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 0
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: EMPTY
19770: LIST
19771: LIST
19772: PUSH
19773: LD_INT 1
19775: NEG
19776: PUSH
19777: LD_INT 1
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: LD_INT 0
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 2
19797: NEG
19798: PUSH
19799: LD_INT 1
19801: NEG
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 2
19809: NEG
19810: PUSH
19811: LD_INT 2
19813: NEG
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 2
19821: NEG
19822: PUSH
19823: LD_INT 3
19825: NEG
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 1
19833: NEG
19834: PUSH
19835: LD_INT 3
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 2
19848: NEG
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: LD_INT 2
19856: PUSH
19857: LD_INT 1
19859: NEG
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: LIST
19883: LIST
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
19890: LD_ADDR_VAR 0 24
19894: PUSH
19895: LD_INT 0
19897: PUSH
19898: LD_INT 0
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 0
19907: PUSH
19908: LD_INT 1
19910: NEG
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PUSH
19916: LD_INT 1
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: LD_INT 1
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 0
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 1
19948: NEG
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: LD_INT 1
19963: NEG
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: LD_INT 2
19975: NEG
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: LD_INT 0
19983: PUSH
19984: LD_INT 2
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: PUSH
19995: LD_INT 1
19997: NEG
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PUSH
20003: LD_INT 2
20005: PUSH
20006: LD_INT 0
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 2
20015: PUSH
20016: LD_INT 1
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: PUSH
20023: LD_INT 2
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 1
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 0
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 1
20055: NEG
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 2
20066: NEG
20067: PUSH
20068: LD_INT 0
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: NEG
20078: PUSH
20079: LD_INT 1
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: LD_INT 2
20093: NEG
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 1
20101: PUSH
20102: LD_INT 2
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: PUSH
20113: LD_INT 1
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 3
20123: PUSH
20124: LD_INT 1
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: PUSH
20131: LD_INT 3
20133: PUSH
20134: LD_INT 2
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20166: LD_ADDR_VAR 0 25
20170: PUSH
20171: LD_INT 0
20173: PUSH
20174: LD_INT 0
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: PUSH
20181: LD_INT 0
20183: PUSH
20184: LD_INT 1
20186: NEG
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: LD_INT 0
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: LD_INT 1
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 0
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: LD_INT 0
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: LD_INT 1
20235: NEG
20236: PUSH
20237: LD_INT 1
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: NEG
20248: PUSH
20249: LD_INT 2
20251: NEG
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 0
20259: PUSH
20260: LD_INT 2
20262: NEG
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: PUSH
20268: LD_INT 1
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: LD_INT 1
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: LD_INT 2
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 0
20321: PUSH
20322: LD_INT 2
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: LD_INT 1
20331: NEG
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: LD_INT 0
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 2
20353: NEG
20354: PUSH
20355: LD_INT 1
20357: NEG
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: PUSH
20363: LD_INT 2
20365: NEG
20366: PUSH
20367: LD_INT 2
20369: NEG
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 3
20377: PUSH
20378: LD_INT 1
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PUSH
20385: LD_INT 3
20387: PUSH
20388: LD_INT 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 2
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: LD_INT 3
20410: PUSH
20411: EMPTY
20412: LIST
20413: LIST
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
20440: LD_ADDR_VAR 0 26
20444: PUSH
20445: LD_INT 0
20447: PUSH
20448: LD_INT 0
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: LD_INT 1
20460: NEG
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: LD_INT 1
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: EMPTY
20473: LIST
20474: LIST
20475: PUSH
20476: LD_INT 1
20478: PUSH
20479: LD_INT 1
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 0
20488: PUSH
20489: LD_INT 1
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 1
20498: NEG
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 1
20509: NEG
20510: PUSH
20511: LD_INT 1
20513: NEG
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: LD_INT 1
20521: NEG
20522: PUSH
20523: LD_INT 2
20525: NEG
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: LD_INT 0
20533: PUSH
20534: LD_INT 2
20536: NEG
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 1
20544: PUSH
20545: LD_INT 1
20547: NEG
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 2
20555: PUSH
20556: LD_INT 0
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 2
20565: PUSH
20566: LD_INT 1
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 2
20575: PUSH
20576: LD_INT 2
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 1
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: LD_INT 2
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 1
20605: NEG
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 2
20616: NEG
20617: PUSH
20618: LD_INT 0
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: LD_INT 2
20627: NEG
20628: PUSH
20629: LD_INT 1
20631: NEG
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 2
20639: NEG
20640: PUSH
20641: LD_INT 2
20643: NEG
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: LD_INT 3
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 1
20661: PUSH
20662: LD_INT 3
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 1
20671: NEG
20672: PUSH
20673: LD_INT 2
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 2
20682: NEG
20683: PUSH
20684: LD_INT 1
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20716: LD_ADDR_VAR 0 27
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 0
20733: PUSH
20734: LD_INT 1
20736: NEG
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: PUSH
20745: LD_INT 0
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: PUSH
20752: LD_INT 1
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 0
20764: PUSH
20765: LD_INT 1
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 1
20774: NEG
20775: PUSH
20776: LD_INT 0
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: PUSH
20783: LD_INT 1
20785: NEG
20786: PUSH
20787: LD_INT 1
20789: NEG
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 1
20797: NEG
20798: PUSH
20799: LD_INT 2
20801: NEG
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: LD_INT 0
20809: PUSH
20810: LD_INT 2
20812: NEG
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: LD_INT 1
20823: NEG
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 2
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 1
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: LD_INT 0
20871: PUSH
20872: LD_INT 2
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 1
20881: NEG
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 2
20892: NEG
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 2
20903: NEG
20904: PUSH
20905: LD_INT 1
20907: NEG
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: LD_INT 2
20919: NEG
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 1
20927: NEG
20928: PUSH
20929: LD_INT 2
20931: PUSH
20932: EMPTY
20933: LIST
20934: LIST
20935: PUSH
20936: LD_INT 2
20938: NEG
20939: PUSH
20940: LD_INT 1
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 3
20949: NEG
20950: PUSH
20951: LD_INT 1
20953: NEG
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 3
20961: NEG
20962: PUSH
20963: LD_INT 2
20965: NEG
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
20996: LD_ADDR_VAR 0 28
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: LD_INT 0
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 0
21013: PUSH
21014: LD_INT 1
21016: NEG
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: PUSH
21025: LD_INT 0
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 1
21034: PUSH
21035: LD_INT 1
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 0
21044: PUSH
21045: LD_INT 1
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 1
21054: NEG
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 1
21065: NEG
21066: PUSH
21067: LD_INT 1
21069: NEG
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 1
21077: NEG
21078: PUSH
21079: LD_INT 2
21081: NEG
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 0
21089: PUSH
21090: LD_INT 2
21092: NEG
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: LD_INT 1
21103: NEG
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: LD_INT 0
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 2
21121: PUSH
21122: LD_INT 1
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PUSH
21139: LD_INT 1
21141: PUSH
21142: LD_INT 2
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PUSH
21149: LD_INT 0
21151: PUSH
21152: LD_INT 2
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: NEG
21173: PUSH
21174: LD_INT 0
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PUSH
21181: LD_INT 2
21183: NEG
21184: PUSH
21185: LD_INT 1
21187: NEG
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: NEG
21196: PUSH
21197: LD_INT 2
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: NEG
21208: PUSH
21209: LD_INT 3
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: LD_INT 3
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 3
21231: NEG
21232: PUSH
21233: LD_INT 1
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 3
21243: NEG
21244: PUSH
21245: LD_INT 2
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21278: LD_ADDR_VAR 0 29
21282: PUSH
21283: LD_INT 0
21285: PUSH
21286: LD_INT 0
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: LD_INT 1
21298: NEG
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: PUSH
21304: LD_INT 1
21306: PUSH
21307: LD_INT 0
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: PUSH
21314: LD_INT 1
21316: PUSH
21317: LD_INT 1
21319: PUSH
21320: EMPTY
21321: LIST
21322: LIST
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: LD_INT 1
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: LD_INT 0
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: LD_INT 1
21347: NEG
21348: PUSH
21349: LD_INT 1
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: LD_INT 1
21359: NEG
21360: PUSH
21361: LD_INT 2
21363: NEG
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 2
21374: NEG
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: LD_INT 1
21385: NEG
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 0
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 2
21403: PUSH
21404: LD_INT 1
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 1
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 0
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 1
21433: NEG
21434: PUSH
21435: LD_INT 1
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 2
21444: NEG
21445: PUSH
21446: LD_INT 1
21448: NEG
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 2
21456: NEG
21457: PUSH
21458: LD_INT 2
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 2
21468: NEG
21469: PUSH
21470: LD_INT 3
21472: NEG
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 2
21480: PUSH
21481: LD_INT 1
21483: NEG
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 3
21491: PUSH
21492: LD_INT 1
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: LD_INT 3
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 3
21522: NEG
21523: PUSH
21524: LD_INT 2
21526: NEG
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: LIST
21556: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
21557: LD_ADDR_VAR 0 30
21561: PUSH
21562: LD_INT 0
21564: PUSH
21565: LD_INT 0
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: LD_INT 1
21577: NEG
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 1
21585: PUSH
21586: LD_INT 0
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: LD_INT 1
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 0
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: NEG
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 1
21638: NEG
21639: PUSH
21640: LD_INT 2
21642: NEG
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: PUSH
21648: LD_INT 0
21650: PUSH
21651: LD_INT 2
21653: NEG
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 1
21712: NEG
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: LD_INT 2
21723: NEG
21724: PUSH
21725: LD_INT 0
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 2
21734: NEG
21735: PUSH
21736: LD_INT 1
21738: NEG
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 1
21746: NEG
21747: PUSH
21748: LD_INT 3
21750: NEG
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 2
21761: NEG
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 2
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 2
21779: PUSH
21780: LD_INT 3
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 3
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
21835: LD_ADDR_VAR 0 31
21839: PUSH
21840: LD_INT 0
21842: PUSH
21843: LD_INT 0
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 1
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 0
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: LD_INT 1
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: NEG
21894: PUSH
21895: LD_INT 0
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: NEG
21905: PUSH
21906: LD_INT 1
21908: NEG
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: LD_INT 1
21916: NEG
21917: PUSH
21918: LD_INT 2
21920: NEG
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: LD_INT 1
21931: NEG
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: PUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 2
21949: PUSH
21950: LD_INT 1
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: LD_INT 2
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 2
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 0
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 1
21989: NEG
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: NEG
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 2
22012: NEG
22013: PUSH
22014: LD_INT 2
22016: NEG
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PUSH
22022: LD_INT 2
22024: NEG
22025: PUSH
22026: LD_INT 3
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 2
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 3
22047: PUSH
22048: LD_INT 1
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 1
22057: PUSH
22058: LD_INT 3
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: LD_INT 2
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: NEG
22079: PUSH
22080: LD_INT 2
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22113: LD_ADDR_VAR 0 32
22117: PUSH
22118: LD_INT 0
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 0
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 1
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 0
22161: PUSH
22162: LD_INT 1
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 1
22171: NEG
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: LD_INT 1
22186: NEG
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PUSH
22192: LD_INT 1
22194: NEG
22195: PUSH
22196: LD_INT 2
22198: NEG
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 2
22209: NEG
22210: PUSH
22211: EMPTY
22212: LIST
22213: LIST
22214: PUSH
22215: LD_INT 1
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: LD_INT 1
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 2
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: LD_INT 2
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 2
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 1
22268: NEG
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 2
22279: NEG
22280: PUSH
22281: LD_INT 0
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 2
22290: NEG
22291: PUSH
22292: LD_INT 1
22294: NEG
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 1
22302: NEG
22303: PUSH
22304: LD_INT 3
22306: NEG
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 1
22314: PUSH
22315: LD_INT 2
22317: NEG
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 3
22325: PUSH
22326: LD_INT 2
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: PUSH
22333: LD_INT 2
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 2
22345: NEG
22346: PUSH
22347: LD_INT 1
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 3
22356: NEG
22357: PUSH
22358: LD_INT 1
22360: NEG
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22391: LD_ADDR_VAR 0 33
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 0
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 0
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: LD_INT 0
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: LD_INT 1
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: LD_INT 0
22439: PUSH
22440: LD_INT 1
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 1
22449: NEG
22450: PUSH
22451: LD_INT 0
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 1
22460: NEG
22461: PUSH
22462: LD_INT 1
22464: NEG
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: PUSH
22470: LD_INT 1
22472: NEG
22473: PUSH
22474: LD_INT 2
22476: NEG
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: LD_INT 1
22487: NEG
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 2
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 2
22505: PUSH
22506: LD_INT 1
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PUSH
22513: LD_INT 1
22515: PUSH
22516: LD_INT 2
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 0
22525: PUSH
22526: LD_INT 2
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 1
22539: PUSH
22540: EMPTY
22541: LIST
22542: LIST
22543: PUSH
22544: LD_INT 2
22546: NEG
22547: PUSH
22548: LD_INT 0
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 2
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: NEG
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: NEG
22582: PUSH
22583: LD_INT 3
22585: NEG
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 1
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 3
22604: PUSH
22605: LD_INT 1
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: LD_INT 3
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 2
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 3
22635: NEG
22636: PUSH
22637: LD_INT 2
22639: NEG
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: LIST
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22670: LD_ADDR_VAR 0 34
22674: PUSH
22675: LD_INT 0
22677: PUSH
22678: LD_INT 0
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 0
22687: PUSH
22688: LD_INT 1
22690: NEG
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: LD_INT 0
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 1
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 1
22728: NEG
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: NEG
22740: PUSH
22741: LD_INT 1
22743: NEG
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: LD_INT 1
22751: NEG
22752: PUSH
22753: LD_INT 2
22755: NEG
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: LD_INT 2
22766: NEG
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: LD_INT 1
22777: NEG
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: LD_INT 2
22785: PUSH
22786: LD_INT 1
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 2
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 2
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: NEG
22816: PUSH
22817: LD_INT 1
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: NEG
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 2
22837: NEG
22838: PUSH
22839: LD_INT 1
22841: NEG
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: LD_INT 2
22853: NEG
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 1
22861: NEG
22862: PUSH
22863: LD_INT 3
22865: NEG
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: LD_INT 2
22876: NEG
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 3
22884: PUSH
22885: LD_INT 2
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 2
22894: PUSH
22895: LD_INT 3
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: LD_INT 1
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 3
22915: NEG
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
22950: LD_ADDR_VAR 0 35
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: LD_INT 0
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 1
22970: NEG
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: PUSH
22979: LD_INT 0
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 1
22988: PUSH
22989: LD_INT 1
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 0
22998: PUSH
22999: LD_INT 1
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: PUSH
23006: LD_INT 1
23008: NEG
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 1
23019: NEG
23020: PUSH
23021: LD_INT 1
23023: NEG
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 2
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 2
23041: NEG
23042: PUSH
23043: LD_INT 1
23045: NEG
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23062: LD_ADDR_VAR 0 36
23066: PUSH
23067: LD_INT 0
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: LD_INT 1
23082: NEG
23083: PUSH
23084: EMPTY
23085: LIST
23086: LIST
23087: PUSH
23088: LD_INT 1
23090: PUSH
23091: LD_INT 0
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: LD_INT 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 1
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: NEG
23121: PUSH
23122: LD_INT 0
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: LD_INT 1
23131: NEG
23132: PUSH
23133: LD_INT 1
23135: NEG
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: LD_INT 2
23147: NEG
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23174: LD_ADDR_VAR 0 37
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 0
23191: PUSH
23192: LD_INT 1
23194: NEG
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: LD_INT 0
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: LD_INT 1
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 0
23222: PUSH
23223: LD_INT 1
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 1
23232: NEG
23233: PUSH
23234: LD_INT 0
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: NEG
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: LD_INT 1
23258: NEG
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 1
23266: NEG
23267: PUSH
23268: LD_INT 1
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23286: LD_ADDR_VAR 0 38
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: LD_INT 0
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 0
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: LD_INT 0
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 1
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 0
23334: PUSH
23335: LD_INT 1
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: LD_INT 0
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 1
23355: NEG
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 2
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 2
23377: NEG
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23398: LD_ADDR_VAR 0 39
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 0
23415: PUSH
23416: LD_INT 1
23418: NEG
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 1
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: LD_INT 1
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 1
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: NEG
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: NEG
23468: PUSH
23469: LD_INT 1
23471: NEG
23472: PUSH
23473: EMPTY
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 1
23479: NEG
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23510: LD_ADDR_VAR 0 40
23514: PUSH
23515: LD_INT 0
23517: PUSH
23518: LD_INT 0
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 0
23527: PUSH
23528: LD_INT 1
23530: NEG
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: LD_INT 0
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 1
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 0
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: NEG
23569: PUSH
23570: LD_INT 0
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 1
23579: NEG
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 1
23602: NEG
23603: PUSH
23604: LD_INT 1
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23622: LD_ADDR_VAR 0 41
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: LD_INT 1
23642: NEG
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 0
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 1
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: NEG
23681: PUSH
23682: LD_INT 0
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: NEG
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: PUSH
23701: LD_INT 1
23703: NEG
23704: PUSH
23705: LD_INT 2
23707: NEG
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 2
23726: PUSH
23727: LD_INT 0
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: LD_INT 1
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: LD_INT 2
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 1
23756: PUSH
23757: LD_INT 2
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: NEG
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: NEG
23778: PUSH
23779: LD_INT 0
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: NEG
23789: PUSH
23790: LD_INT 1
23792: NEG
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 2
23800: NEG
23801: PUSH
23802: LD_INT 2
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 2
23812: NEG
23813: PUSH
23814: LD_INT 3
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 2
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 3
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 3
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 3
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 3
23865: PUSH
23866: LD_INT 3
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 2
23875: PUSH
23876: LD_INT 3
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 2
23885: NEG
23886: PUSH
23887: LD_INT 1
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 3
23896: NEG
23897: PUSH
23898: LD_INT 0
23900: PUSH
23901: EMPTY
23902: LIST
23903: LIST
23904: PUSH
23905: LD_INT 3
23907: NEG
23908: PUSH
23909: LD_INT 1
23911: NEG
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 3
23919: NEG
23920: PUSH
23921: LD_INT 2
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 3
23931: NEG
23932: PUSH
23933: LD_INT 3
23935: NEG
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: EMPTY
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23972: LD_ADDR_VAR 0 42
23976: PUSH
23977: LD_INT 0
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 0
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: LD_INT 0
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: EMPTY
24015: LIST
24016: LIST
24017: PUSH
24018: LD_INT 0
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 1
24030: NEG
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: NEG
24042: PUSH
24043: LD_INT 1
24045: NEG
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 1
24053: NEG
24054: PUSH
24055: LD_INT 2
24057: NEG
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: LD_INT 2
24068: NEG
24069: PUSH
24070: EMPTY
24071: LIST
24072: LIST
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 1
24079: NEG
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 2
24097: PUSH
24098: LD_INT 2
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: PUSH
24108: LD_INT 2
24110: PUSH
24111: EMPTY
24112: LIST
24113: LIST
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: LD_INT 2
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 2
24138: NEG
24139: PUSH
24140: LD_INT 1
24142: NEG
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 2
24150: NEG
24151: PUSH
24152: LD_INT 2
24154: NEG
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 2
24162: NEG
24163: PUSH
24164: LD_INT 3
24166: NEG
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 1
24174: NEG
24175: PUSH
24176: LD_INT 3
24178: NEG
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: LD_INT 3
24189: NEG
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: PUSH
24195: LD_INT 1
24197: PUSH
24198: LD_INT 2
24200: NEG
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 3
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 3
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: PUSH
24226: LD_INT 2
24228: PUSH
24229: LD_INT 3
24231: PUSH
24232: EMPTY
24233: LIST
24234: LIST
24235: PUSH
24236: LD_INT 1
24238: PUSH
24239: LD_INT 3
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: LD_INT 3
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: LD_INT 3
24269: NEG
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 3
24281: NEG
24282: PUSH
24283: LD_INT 3
24285: NEG
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24322: LD_ADDR_VAR 0 43
24326: PUSH
24327: LD_INT 0
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: PUSH
24337: LD_INT 0
24339: PUSH
24340: LD_INT 1
24342: NEG
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 1
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: LD_INT 1
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: LD_INT 0
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: LD_INT 1
24391: NEG
24392: PUSH
24393: LD_INT 1
24395: NEG
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: LD_INT 2
24407: NEG
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: PUSH
24413: LD_INT 0
24415: PUSH
24416: LD_INT 2
24418: NEG
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 0
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: LD_INT 2
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 0
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 1
24477: NEG
24478: PUSH
24479: LD_INT 1
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 2
24488: NEG
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 2
24499: NEG
24500: PUSH
24501: LD_INT 1
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 1
24511: NEG
24512: PUSH
24513: LD_INT 3
24515: NEG
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: LD_INT 3
24526: NEG
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: LD_INT 2
24537: NEG
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PUSH
24543: LD_INT 2
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 3
24556: PUSH
24557: LD_INT 0
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: LD_INT 1
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: LD_INT 3
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: LD_INT 3
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: NEG
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: NEG
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 3
24618: NEG
24619: PUSH
24620: LD_INT 0
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 3
24629: NEG
24630: PUSH
24631: LD_INT 1
24633: NEG
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24670: LD_ADDR_VAR 0 44
24674: PUSH
24675: LD_INT 0
24677: PUSH
24678: LD_INT 0
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 0
24687: PUSH
24688: LD_INT 1
24690: NEG
24691: PUSH
24692: EMPTY
24693: LIST
24694: LIST
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 0
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: LD_INT 1
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: LD_INT 1
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: PUSH
24726: LD_INT 1
24728: NEG
24729: PUSH
24730: LD_INT 0
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: LD_INT 1
24743: NEG
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 1
24751: NEG
24752: PUSH
24753: LD_INT 2
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 2
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 2
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 2
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: PUSH
24805: LD_INT 2
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 2
24825: NEG
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 2
24836: NEG
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 2
24848: NEG
24849: PUSH
24850: LD_INT 2
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: NEG
24861: PUSH
24862: LD_INT 3
24864: NEG
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: LD_INT 1
24875: NEG
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 3
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 3
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 3
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 3
24913: PUSH
24914: LD_INT 3
24916: PUSH
24917: EMPTY
24918: LIST
24919: LIST
24920: PUSH
24921: LD_INT 2
24923: PUSH
24924: LD_INT 3
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 2
24933: NEG
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 3
24944: NEG
24945: PUSH
24946: LD_INT 0
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: PUSH
24953: LD_INT 3
24955: NEG
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 3
24967: NEG
24968: PUSH
24969: LD_INT 2
24971: NEG
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 3
24979: NEG
24980: PUSH
24981: LD_INT 3
24983: NEG
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25020: LD_ADDR_VAR 0 45
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 0
25037: PUSH
25038: LD_INT 1
25040: NEG
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: LD_INT 1
25093: NEG
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 0
25113: PUSH
25114: LD_INT 2
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: LD_INT 1
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: LD_INT 2
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 0
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 1
25175: NEG
25176: PUSH
25177: LD_INT 1
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 2
25186: NEG
25187: PUSH
25188: LD_INT 1
25190: NEG
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 2
25198: NEG
25199: PUSH
25200: LD_INT 2
25202: NEG
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: LD_INT 3
25214: NEG
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PUSH
25220: LD_INT 1
25222: NEG
25223: PUSH
25224: LD_INT 3
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: LD_INT 3
25237: NEG
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: LD_INT 2
25248: NEG
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 3
25256: PUSH
25257: LD_INT 2
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: LD_INT 3
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 2
25276: PUSH
25277: LD_INT 3
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 1
25286: PUSH
25287: LD_INT 3
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 3
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 3
25317: NEG
25318: PUSH
25319: LD_INT 2
25321: NEG
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 3
25329: NEG
25330: PUSH
25331: LD_INT 3
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25370: LD_ADDR_VAR 0 46
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 0
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 0
25387: PUSH
25388: LD_INT 1
25390: NEG
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: LD_INT 1
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 0
25418: PUSH
25419: LD_INT 1
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: LD_INT 0
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: LD_INT 1
25443: NEG
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 1
25451: NEG
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 0
25463: PUSH
25464: LD_INT 2
25466: NEG
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 1
25477: NEG
25478: PUSH
25479: EMPTY
25480: LIST
25481: LIST
25482: PUSH
25483: LD_INT 2
25485: PUSH
25486: LD_INT 0
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 2
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: LD_INT 2
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 0
25515: PUSH
25516: LD_INT 2
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: PUSH
25523: LD_INT 1
25525: NEG
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 2
25536: NEG
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: NEG
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 1
25559: NEG
25560: PUSH
25561: LD_INT 3
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: LD_INT 3
25574: NEG
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: LD_INT 1
25582: PUSH
25583: LD_INT 2
25585: NEG
25586: PUSH
25587: EMPTY
25588: LIST
25589: LIST
25590: PUSH
25591: LD_INT 2
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 3
25604: PUSH
25605: LD_INT 0
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 3
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: PUSH
25625: LD_INT 3
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PUSH
25632: LD_INT 0
25634: PUSH
25635: LD_INT 3
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: LD_INT 2
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 2
25655: NEG
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 3
25666: NEG
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 3
25677: NEG
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25718: LD_ADDR_VAR 0 47
25722: PUSH
25723: LD_INT 0
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 1
25738: NEG
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: LD_INT 0
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: NEG
25788: PUSH
25789: LD_INT 1
25791: NEG
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: PUSH
25797: LD_INT 1
25799: NEG
25800: PUSH
25801: LD_INT 2
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: LD_INT 2
25814: NEG
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: LD_INT 1
25825: NEG
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: LD_INT 1
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 2
25845: NEG
25846: PUSH
25847: LD_INT 2
25849: NEG
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
25869: LD_ADDR_VAR 0 48
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: LD_INT 0
25886: PUSH
25887: LD_INT 1
25889: NEG
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: LD_INT 0
25900: PUSH
25901: EMPTY
25902: LIST
25903: LIST
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 1
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: LD_INT 2
25954: NEG
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 1
25973: PUSH
25974: LD_INT 1
25976: NEG
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PUSH
25982: LD_INT 2
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26016: LD_ADDR_VAR 0 49
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 0
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 0
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: NEG
26075: PUSH
26076: LD_INT 0
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: NEG
26086: PUSH
26087: LD_INT 1
26089: NEG
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 1
26097: PUSH
26098: LD_INT 1
26100: NEG
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 0
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: PUSH
26139: LD_INT 2
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26160: LD_ADDR_VAR 0 50
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 0
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 0
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: LD_INT 0
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: NEG
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 0
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 1
26281: NEG
26282: PUSH
26283: LD_INT 1
26285: PUSH
26286: EMPTY
26287: LIST
26288: LIST
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
26304: LD_ADDR_VAR 0 51
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: LD_INT 1
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: LD_INT 0
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 0
26352: PUSH
26353: LD_INT 1
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 1
26362: NEG
26363: PUSH
26364: LD_INT 0
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 1
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: NEG
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: EMPTY
26438: LIST
26439: LIST
26440: LIST
26441: LIST
26442: LIST
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: LIST
26450: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26451: LD_ADDR_VAR 0 52
26455: PUSH
26456: LD_INT 0
26458: PUSH
26459: LD_INT 0
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 0
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 1
26489: PUSH
26490: LD_INT 1
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 1
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: LD_INT 0
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 1
26520: NEG
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 1
26532: NEG
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: NEG
26545: PUSH
26546: LD_INT 1
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: LD_INT 0
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: LD_INT 1
26570: NEG
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: LD_INT 2
26582: NEG
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26602: LD_ADDR_VAR 0 53
26606: PUSH
26607: LD_INT 0
26609: PUSH
26610: LD_INT 0
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 0
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 0
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: LD_INT 0
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: LD_INT 1
26675: NEG
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: LD_INT 2
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: LD_INT 2
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 1
26706: PUSH
26707: LD_INT 1
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 2
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: LD_INT 1
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: LD_INT 2
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: LD_INT 2
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 2
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: NEG
26779: PUSH
26780: LD_INT 0
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 2
26789: NEG
26790: PUSH
26791: LD_INT 1
26793: NEG
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 2
26801: NEG
26802: PUSH
26803: LD_INT 2
26805: NEG
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26832: LD_ADDR_VAR 0 54
26836: PUSH
26837: LD_INT 0
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 0
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 0
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: NEG
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: LD_INT 2
26917: NEG
26918: PUSH
26919: EMPTY
26920: LIST
26921: LIST
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: LD_INT 2
26928: NEG
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 1
26936: PUSH
26937: LD_INT 1
26939: NEG
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 2
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: LD_INT 1
26960: PUSH
26961: EMPTY
26962: LIST
26963: LIST
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: LD_INT 2
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: LD_INT 2
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: NEG
27009: PUSH
27010: LD_INT 0
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 2
27019: NEG
27020: PUSH
27021: LD_INT 1
27023: NEG
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 2
27031: NEG
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27062: LD_ADDR_VAR 0 55
27066: PUSH
27067: LD_INT 0
27069: PUSH
27070: LD_INT 0
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 0
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 1
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: LD_INT 1
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 1
27135: NEG
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: LD_INT 2
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 2
27177: PUSH
27178: LD_INT 0
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: LD_INT 1
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 2
27197: PUSH
27198: LD_INT 2
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: PUSH
27205: LD_INT 1
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 0
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: NEG
27228: PUSH
27229: LD_INT 1
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: NEG
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 2
27249: NEG
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: EMPTY
27256: LIST
27257: LIST
27258: PUSH
27259: LD_INT 2
27261: NEG
27262: PUSH
27263: LD_INT 2
27265: NEG
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27292: LD_ADDR_VAR 0 56
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 0
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 0
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: LD_INT 0
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 1
27365: NEG
27366: PUSH
27367: EMPTY
27368: LIST
27369: LIST
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: LD_INT 2
27377: NEG
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: LD_INT 1
27399: NEG
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: LD_INT 2
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 2
27417: PUSH
27418: LD_INT 1
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: PUSH
27428: LD_INT 2
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: LD_INT 2
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: LD_INT 2
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: NEG
27458: PUSH
27459: LD_INT 1
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: NEG
27469: PUSH
27470: LD_INT 0
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: LD_INT 1
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 2
27491: NEG
27492: PUSH
27493: LD_INT 2
27495: NEG
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27522: LD_ADDR_VAR 0 57
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 1
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 0
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 0
27584: PUSH
27585: EMPTY
27586: LIST
27587: LIST
27588: PUSH
27589: LD_INT 1
27591: NEG
27592: PUSH
27593: LD_INT 1
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: NEG
27604: PUSH
27605: LD_INT 2
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: LD_INT 2
27618: NEG
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: PUSH
27624: LD_INT 1
27626: PUSH
27627: LD_INT 1
27629: NEG
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: LD_INT 1
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: LD_INT 2
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 1
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 0
27677: PUSH
27678: LD_INT 2
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 1
27687: NEG
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 2
27698: NEG
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: PUSH
27707: LD_INT 2
27709: NEG
27710: PUSH
27711: LD_INT 1
27713: NEG
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 2
27721: NEG
27722: PUSH
27723: LD_INT 2
27725: NEG
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27752: LD_ADDR_VAR 0 58
27756: PUSH
27757: LD_INT 0
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 0
27769: PUSH
27770: LD_INT 1
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 1
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 0
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 1
27821: NEG
27822: PUSH
27823: LD_INT 1
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: NEG
27834: PUSH
27835: LD_INT 2
27837: NEG
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: LD_INT 2
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 1
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 1
27897: PUSH
27898: LD_INT 2
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 0
27907: PUSH
27908: LD_INT 2
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: NEG
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 2
27939: NEG
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 2
27951: NEG
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
27982: LD_ADDR_VAR 0 59
27986: PUSH
27987: LD_INT 0
27989: PUSH
27990: LD_INT 0
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 1
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: LD_INT 0
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: LD_INT 1
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28070: LD_ADDR_VAR 0 60
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 0
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: LD_INT 0
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 0
28118: PUSH
28119: LD_INT 1
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: LD_INT 0
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: LD_INT 1
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28158: LD_ADDR_VAR 0 61
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: LD_INT 0
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 1
28196: PUSH
28197: LD_INT 1
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: NEG
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: NEG
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28246: LD_ADDR_VAR 0 62
28250: PUSH
28251: LD_INT 0
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: EMPTY
28258: LIST
28259: LIST
28260: PUSH
28261: LD_INT 0
28263: PUSH
28264: LD_INT 1
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 0
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PUSH
28282: LD_INT 1
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 0
28294: PUSH
28295: LD_INT 1
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 1
28304: NEG
28305: PUSH
28306: LD_INT 0
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 1
28315: NEG
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28334: LD_ADDR_VAR 0 63
28338: PUSH
28339: LD_INT 0
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 0
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 1
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: EMPTY
28367: LIST
28368: LIST
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: LD_INT 1
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: LD_INT 1
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: LD_INT 0
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: NEG
28404: PUSH
28405: LD_INT 1
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28422: LD_ADDR_VAR 0 64
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: LD_INT 0
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: LD_INT 1
28442: NEG
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: PUSH
28451: LD_INT 0
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: LD_INT 1
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: LD_INT 1
28473: PUSH
28474: EMPTY
28475: LIST
28476: LIST
28477: PUSH
28478: LD_INT 1
28480: NEG
28481: PUSH
28482: LD_INT 0
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PUSH
28489: LD_INT 1
28491: NEG
28492: PUSH
28493: LD_INT 1
28495: NEG
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: ST_TO_ADDR
// end ; 1 :
28510: GO 34407
28512: LD_INT 1
28514: DOUBLE
28515: EQUAL
28516: IFTRUE 28520
28518: GO 31143
28520: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28521: LD_ADDR_VAR 0 11
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: LD_INT 3
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: LD_INT 3
28543: NEG
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: PUSH
28552: LD_INT 2
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: LIST
28564: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28565: LD_ADDR_VAR 0 12
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 3
28583: PUSH
28584: LD_INT 0
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 3
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28606: LD_ADDR_VAR 0 13
28610: PUSH
28611: LD_INT 3
28613: PUSH
28614: LD_INT 2
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 3
28623: PUSH
28624: LD_INT 3
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: LD_INT 3
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28646: LD_ADDR_VAR 0 14
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 3
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 3
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: LD_INT 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: LIST
28686: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28687: LD_ADDR_VAR 0 15
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: LD_INT 1
28698: PUSH
28699: EMPTY
28700: LIST
28701: LIST
28702: PUSH
28703: LD_INT 3
28705: NEG
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 3
28716: NEG
28717: PUSH
28718: LD_INT 1
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: LIST
28730: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28731: LD_ADDR_VAR 0 16
28735: PUSH
28736: LD_INT 2
28738: NEG
28739: PUSH
28740: LD_INT 3
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 3
28750: NEG
28751: PUSH
28752: LD_INT 2
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 3
28762: NEG
28763: PUSH
28764: LD_INT 3
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: LIST
28776: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
28777: LD_ADDR_VAR 0 17
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: LD_INT 3
28788: NEG
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 3
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 2
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: EMPTY
28817: LIST
28818: LIST
28819: LIST
28820: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
28821: LD_ADDR_VAR 0 18
28825: PUSH
28826: LD_INT 2
28828: PUSH
28829: LD_INT 1
28831: NEG
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 3
28839: PUSH
28840: LD_INT 0
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: PUSH
28850: LD_INT 1
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
28862: LD_ADDR_VAR 0 19
28866: PUSH
28867: LD_INT 3
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 3
28879: PUSH
28880: LD_INT 3
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 2
28889: PUSH
28890: LD_INT 3
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: LIST
28901: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28902: LD_ADDR_VAR 0 20
28906: PUSH
28907: LD_INT 1
28909: PUSH
28910: LD_INT 3
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: LD_INT 3
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 1
28929: NEG
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: LIST
28942: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28943: LD_ADDR_VAR 0 21
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 3
28961: NEG
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 3
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28987: LD_ADDR_VAR 0 22
28991: PUSH
28992: LD_INT 2
28994: NEG
28995: PUSH
28996: LD_INT 3
28998: NEG
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: LD_INT 3
29006: NEG
29007: PUSH
29008: LD_INT 2
29010: NEG
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 3
29018: NEG
29019: PUSH
29020: LD_INT 3
29022: NEG
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29033: LD_ADDR_VAR 0 23
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: LD_INT 3
29043: NEG
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 4
29055: NEG
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: PUSH
29064: LD_INT 3
29066: NEG
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29077: LD_ADDR_VAR 0 24
29081: PUSH
29082: LD_INT 3
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 3
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 4
29105: PUSH
29106: LD_INT 1
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: LIST
29117: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29118: LD_ADDR_VAR 0 25
29122: PUSH
29123: LD_INT 3
29125: PUSH
29126: LD_INT 3
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 4
29135: PUSH
29136: LD_INT 3
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 3
29145: PUSH
29146: LD_INT 4
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29158: LD_ADDR_VAR 0 26
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 3
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 1
29175: PUSH
29176: LD_INT 4
29178: PUSH
29179: EMPTY
29180: LIST
29181: LIST
29182: PUSH
29183: LD_INT 1
29185: NEG
29186: PUSH
29187: LD_INT 3
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: LIST
29198: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29199: LD_ADDR_VAR 0 27
29203: PUSH
29204: LD_INT 3
29206: NEG
29207: PUSH
29208: LD_INT 0
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 3
29217: NEG
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 4
29228: NEG
29229: PUSH
29230: LD_INT 1
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
29243: LD_ADDR_VAR 0 28
29247: PUSH
29248: LD_INT 3
29250: NEG
29251: PUSH
29252: LD_INT 3
29254: NEG
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 3
29262: NEG
29263: PUSH
29264: LD_INT 4
29266: NEG
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 4
29274: NEG
29275: PUSH
29276: LD_INT 3
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: LIST
29288: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
29289: LD_ADDR_VAR 0 29
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: LD_INT 3
29300: NEG
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 0
29308: PUSH
29309: LD_INT 3
29311: NEG
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 2
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: PUSH
29332: LD_INT 4
29334: NEG
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 0
29342: PUSH
29343: LD_INT 4
29345: NEG
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: LD_INT 3
29356: NEG
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 1
29364: NEG
29365: PUSH
29366: LD_INT 5
29368: NEG
29369: PUSH
29370: EMPTY
29371: LIST
29372: LIST
29373: PUSH
29374: LD_INT 0
29376: PUSH
29377: LD_INT 5
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: PUSH
29388: LD_INT 4
29390: NEG
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: LD_INT 6
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 0
29410: PUSH
29411: LD_INT 6
29413: NEG
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 5
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: LIST
29443: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
29444: LD_ADDR_VAR 0 30
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 3
29462: PUSH
29463: LD_INT 0
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 3
29472: PUSH
29473: LD_INT 1
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 3
29482: PUSH
29483: LD_INT 1
29485: NEG
29486: PUSH
29487: EMPTY
29488: LIST
29489: LIST
29490: PUSH
29491: LD_INT 4
29493: PUSH
29494: LD_INT 0
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 4
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 4
29513: PUSH
29514: LD_INT 1
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 5
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 5
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 6
29555: PUSH
29556: LD_INT 0
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 6
29565: PUSH
29566: LD_INT 1
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
29587: LD_ADDR_VAR 0 31
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: LD_INT 2
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 3
29604: PUSH
29605: LD_INT 3
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 2
29614: PUSH
29615: LD_INT 3
29617: PUSH
29618: EMPTY
29619: LIST
29620: LIST
29621: PUSH
29622: LD_INT 4
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 4
29634: PUSH
29635: LD_INT 4
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 3
29644: PUSH
29645: LD_INT 4
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: LD_INT 5
29654: PUSH
29655: LD_INT 4
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 5
29664: PUSH
29665: LD_INT 5
29667: PUSH
29668: EMPTY
29669: LIST
29670: LIST
29671: PUSH
29672: LD_INT 4
29674: PUSH
29675: LD_INT 5
29677: PUSH
29678: EMPTY
29679: LIST
29680: LIST
29681: PUSH
29682: LD_INT 6
29684: PUSH
29685: LD_INT 5
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: PUSH
29692: LD_INT 6
29694: PUSH
29695: LD_INT 6
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 5
29704: PUSH
29705: LD_INT 6
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
29726: LD_ADDR_VAR 0 32
29730: PUSH
29731: LD_INT 1
29733: PUSH
29734: LD_INT 3
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 0
29743: PUSH
29744: LD_INT 3
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: NEG
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: EMPTY
29759: LIST
29760: LIST
29761: PUSH
29762: LD_INT 1
29764: PUSH
29765: LD_INT 4
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 0
29774: PUSH
29775: LD_INT 4
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: NEG
29785: PUSH
29786: LD_INT 3
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: LD_INT 5
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: LD_INT 5
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: LD_INT 4
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 6
29829: PUSH
29830: EMPTY
29831: LIST
29832: LIST
29833: PUSH
29834: LD_INT 0
29836: PUSH
29837: LD_INT 6
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 5
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: EMPTY
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
29869: LD_ADDR_VAR 0 33
29873: PUSH
29874: LD_INT 2
29876: NEG
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 3
29887: NEG
29888: PUSH
29889: LD_INT 0
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: NEG
29899: PUSH
29900: LD_INT 1
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 3
29910: NEG
29911: PUSH
29912: LD_INT 1
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 4
29921: NEG
29922: PUSH
29923: LD_INT 0
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: PUSH
29930: LD_INT 4
29932: NEG
29933: PUSH
29934: LD_INT 1
29936: NEG
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: PUSH
29942: LD_INT 4
29944: NEG
29945: PUSH
29946: LD_INT 1
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: PUSH
29953: LD_INT 5
29955: NEG
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 5
29966: NEG
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 5
29978: NEG
29979: PUSH
29980: LD_INT 1
29982: PUSH
29983: EMPTY
29984: LIST
29985: LIST
29986: PUSH
29987: LD_INT 6
29989: NEG
29990: PUSH
29991: LD_INT 0
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 6
30000: NEG
30001: PUSH
30002: LD_INT 1
30004: NEG
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30024: LD_ADDR_VAR 0 34
30028: PUSH
30029: LD_INT 2
30031: NEG
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 3
30043: NEG
30044: PUSH
30045: LD_INT 2
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 3
30055: NEG
30056: PUSH
30057: LD_INT 3
30059: NEG
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 3
30067: NEG
30068: PUSH
30069: LD_INT 4
30071: NEG
30072: PUSH
30073: EMPTY
30074: LIST
30075: LIST
30076: PUSH
30077: LD_INT 4
30079: NEG
30080: PUSH
30081: LD_INT 3
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 4
30091: NEG
30092: PUSH
30093: LD_INT 4
30095: NEG
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 4
30103: NEG
30104: PUSH
30105: LD_INT 5
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 5
30115: NEG
30116: PUSH
30117: LD_INT 4
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 5
30127: NEG
30128: PUSH
30129: LD_INT 5
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 5
30139: NEG
30140: PUSH
30141: LD_INT 6
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 6
30151: NEG
30152: PUSH
30153: LD_INT 5
30155: NEG
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PUSH
30161: LD_INT 6
30163: NEG
30164: PUSH
30165: LD_INT 6
30167: NEG
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30187: LD_ADDR_VAR 0 41
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 1
30217: PUSH
30218: LD_INT 2
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30231: LD_ADDR_VAR 0 42
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: LD_INT 1
30251: NEG
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 3
30259: PUSH
30260: LD_INT 1
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
30272: LD_ADDR_VAR 0 43
30276: PUSH
30277: LD_INT 2
30279: PUSH
30280: LD_INT 2
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: LD_INT 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 2
30299: PUSH
30300: LD_INT 3
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
30312: LD_ADDR_VAR 0 44
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: LD_INT 1
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: LD_INT 2
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30353: LD_ADDR_VAR 0 45
30357: PUSH
30358: LD_INT 2
30360: NEG
30361: PUSH
30362: LD_INT 0
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: LD_INT 1
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 3
30382: NEG
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: LIST
30396: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
30397: LD_ADDR_VAR 0 46
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: LD_INT 2
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 2
30416: NEG
30417: PUSH
30418: LD_INT 3
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 3
30428: NEG
30429: PUSH
30430: LD_INT 2
30432: NEG
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: LIST
30442: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
30443: LD_ADDR_VAR 0 47
30447: PUSH
30448: LD_INT 2
30450: NEG
30451: PUSH
30452: LD_INT 3
30454: NEG
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 1
30462: NEG
30463: PUSH
30464: LD_INT 3
30466: NEG
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
30476: LD_ADDR_VAR 0 48
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: LD_INT 1
30497: NEG
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
30507: LD_ADDR_VAR 0 49
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
30536: LD_ADDR_VAR 0 50
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: LD_INT 3
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
30565: LD_ADDR_VAR 0 51
30569: PUSH
30570: LD_INT 1
30572: NEG
30573: PUSH
30574: LD_INT 2
30576: PUSH
30577: EMPTY
30578: LIST
30579: LIST
30580: PUSH
30581: LD_INT 2
30583: NEG
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
30596: LD_ADDR_VAR 0 52
30600: PUSH
30601: LD_INT 3
30603: NEG
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 3
30615: NEG
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30629: LD_ADDR_VAR 0 53
30633: PUSH
30634: LD_INT 1
30636: NEG
30637: PUSH
30638: LD_INT 3
30640: NEG
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: LD_INT 3
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: LD_INT 2
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30673: LD_ADDR_VAR 0 54
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 1
30683: NEG
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: LD_INT 3
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: PUSH
30699: LD_INT 3
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: EMPTY
30706: LIST
30707: LIST
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: LIST
30713: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30714: LD_ADDR_VAR 0 55
30718: PUSH
30719: LD_INT 3
30721: PUSH
30722: LD_INT 2
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 3
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 3
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: LIST
30753: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30754: LD_ADDR_VAR 0 56
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: LD_INT 3
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 3
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: NEG
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: LIST
30794: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30795: LD_ADDR_VAR 0 57
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 3
30813: NEG
30814: PUSH
30815: LD_INT 0
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 3
30824: NEG
30825: PUSH
30826: LD_INT 1
30828: NEG
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: LIST
30838: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30839: LD_ADDR_VAR 0 58
30843: PUSH
30844: LD_INT 2
30846: NEG
30847: PUSH
30848: LD_INT 3
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 3
30858: NEG
30859: PUSH
30860: LD_INT 2
30862: NEG
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 3
30870: NEG
30871: PUSH
30872: LD_INT 3
30874: NEG
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: LIST
30884: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
30885: LD_ADDR_VAR 0 59
30889: PUSH
30890: LD_INT 1
30892: NEG
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: EMPTY
30899: LIST
30900: LIST
30901: PUSH
30902: LD_INT 0
30904: PUSH
30905: LD_INT 2
30907: NEG
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: LD_INT 1
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: LIST
30928: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30929: LD_ADDR_VAR 0 60
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: LD_INT 1
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: LD_INT 0
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: LIST
30969: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30970: LD_ADDR_VAR 0 61
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 2
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31010: LD_ADDR_VAR 0 62
31014: PUSH
31015: LD_INT 1
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 0
31027: PUSH
31028: LD_INT 2
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: LD_INT 1
31037: NEG
31038: PUSH
31039: LD_INT 1
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31051: LD_ADDR_VAR 0 63
31055: PUSH
31056: LD_INT 1
31058: NEG
31059: PUSH
31060: LD_INT 1
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: PUSH
31067: LD_INT 2
31069: NEG
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 2
31080: NEG
31081: PUSH
31082: LD_INT 1
31084: NEG
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: LIST
31094: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31095: LD_ADDR_VAR 0 64
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// end ; 2 :
31141: GO 34407
31143: LD_INT 2
31145: DOUBLE
31146: EQUAL
31147: IFTRUE 31151
31149: GO 34406
31151: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31152: LD_ADDR_VAR 0 29
31156: PUSH
31157: LD_INT 4
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 4
31169: PUSH
31170: LD_INT 1
31172: NEG
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 5
31180: PUSH
31181: LD_INT 0
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 5
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 4
31200: PUSH
31201: LD_INT 1
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 3
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 3
31220: PUSH
31221: LD_INT 1
31223: NEG
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 3
31231: PUSH
31232: LD_INT 2
31234: NEG
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: PUSH
31240: LD_INT 5
31242: PUSH
31243: LD_INT 2
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: LD_INT 2
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 4
31272: PUSH
31273: LD_INT 3
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 4
31282: PUSH
31283: LD_INT 4
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: LD_INT 4
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: LD_INT 3
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 4
31322: PUSH
31323: LD_INT 2
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: PUSH
31333: LD_INT 4
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: LD_INT 4
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 0
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 4
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: PUSH
31373: LD_INT 5
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 5
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: LD_INT 4
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: NEG
31404: PUSH
31405: LD_INT 3
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: LD_INT 5
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: LD_INT 3
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 3
31435: NEG
31436: PUSH
31437: LD_INT 0
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 3
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 2
31458: NEG
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: NEG
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 3
31480: NEG
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 4
31491: NEG
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 4
31502: NEG
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 4
31514: NEG
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 2
31526: NEG
31527: PUSH
31528: LD_INT 2
31530: PUSH
31531: EMPTY
31532: LIST
31533: LIST
31534: PUSH
31535: LD_INT 4
31537: NEG
31538: PUSH
31539: LD_INT 4
31541: NEG
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 4
31549: NEG
31550: PUSH
31551: LD_INT 5
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 3
31561: NEG
31562: PUSH
31563: LD_INT 4
31565: NEG
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 3
31573: NEG
31574: PUSH
31575: LD_INT 3
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 4
31585: NEG
31586: PUSH
31587: LD_INT 3
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 5
31597: NEG
31598: PUSH
31599: LD_INT 4
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 5
31609: NEG
31610: PUSH
31611: LD_INT 5
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 3
31621: NEG
31622: PUSH
31623: LD_INT 5
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 5
31633: NEG
31634: PUSH
31635: LD_INT 3
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
31690: LD_ADDR_VAR 0 30
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 4
31700: PUSH
31701: EMPTY
31702: LIST
31703: LIST
31704: PUSH
31705: LD_INT 4
31707: PUSH
31708: LD_INT 3
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 5
31717: PUSH
31718: LD_INT 4
31720: PUSH
31721: EMPTY
31722: LIST
31723: LIST
31724: PUSH
31725: LD_INT 5
31727: PUSH
31728: LD_INT 5
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_INT 4
31737: PUSH
31738: LD_INT 5
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: PUSH
31745: LD_INT 3
31747: PUSH
31748: LD_INT 4
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 3
31757: PUSH
31758: LD_INT 3
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 5
31767: PUSH
31768: LD_INT 3
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 3
31777: PUSH
31778: LD_INT 5
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 0
31787: PUSH
31788: LD_INT 3
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 2
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: PUSH
31808: LD_INT 3
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: PUSH
31818: LD_INT 4
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 4
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: NEG
31838: PUSH
31839: LD_INT 3
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: NEG
31849: PUSH
31850: LD_INT 2
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: PUSH
31857: LD_INT 2
31859: PUSH
31860: LD_INT 4
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: LD_INT 2
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 4
31880: NEG
31881: PUSH
31882: LD_INT 0
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 4
31891: NEG
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 3
31903: NEG
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 3
31914: NEG
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: PUSH
31923: LD_INT 4
31925: NEG
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 5
31936: NEG
31937: PUSH
31938: LD_INT 0
31940: PUSH
31941: EMPTY
31942: LIST
31943: LIST
31944: PUSH
31945: LD_INT 5
31947: NEG
31948: PUSH
31949: LD_INT 1
31951: NEG
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 5
31959: NEG
31960: PUSH
31961: LD_INT 2
31963: NEG
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 3
31971: NEG
31972: PUSH
31973: LD_INT 2
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: PUSH
31980: LD_INT 3
31982: NEG
31983: PUSH
31984: LD_INT 3
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 3
31994: NEG
31995: PUSH
31996: LD_INT 4
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 3
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: LD_INT 2
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 3
32030: NEG
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 4
32042: NEG
32043: PUSH
32044: LD_INT 3
32046: NEG
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 4
32054: NEG
32055: PUSH
32056: LD_INT 4
32058: NEG
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 2
32066: NEG
32067: PUSH
32068: LD_INT 4
32070: NEG
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PUSH
32076: LD_INT 4
32078: NEG
32079: PUSH
32080: LD_INT 2
32082: NEG
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 0
32090: PUSH
32091: LD_INT 4
32093: NEG
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: PUSH
32099: LD_INT 0
32101: PUSH
32102: LD_INT 5
32104: NEG
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 1
32112: PUSH
32113: LD_INT 4
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 1
32123: PUSH
32124: LD_INT 3
32126: NEG
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: LD_INT 3
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 4
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: LD_INT 5
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: PUSH
32170: LD_INT 3
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: NEG
32181: PUSH
32182: LD_INT 5
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
32237: LD_ADDR_VAR 0 31
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: LD_INT 4
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 3
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 4
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: LD_INT 5
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: LD_INT 5
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 1
32294: NEG
32295: PUSH
32296: LD_INT 4
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 1
32305: NEG
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 2
32316: PUSH
32317: LD_INT 5
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 2
32326: NEG
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 3
32337: NEG
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 3
32348: NEG
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 2
32360: NEG
32361: PUSH
32362: LD_INT 0
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 2
32371: NEG
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 4
32393: NEG
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 4
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 4
32416: NEG
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 2
32428: NEG
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 4
32439: NEG
32440: PUSH
32441: LD_INT 4
32443: NEG
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 4
32451: NEG
32452: PUSH
32453: LD_INT 5
32455: NEG
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: LD_INT 4
32467: NEG
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: LD_INT 3
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 4
32487: NEG
32488: PUSH
32489: LD_INT 3
32491: NEG
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 5
32499: NEG
32500: PUSH
32501: LD_INT 4
32503: NEG
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 5
32511: NEG
32512: PUSH
32513: LD_INT 5
32515: NEG
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 3
32523: NEG
32524: PUSH
32525: LD_INT 5
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: LD_INT 5
32535: NEG
32536: PUSH
32537: LD_INT 3
32539: NEG
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 3
32550: NEG
32551: PUSH
32552: EMPTY
32553: LIST
32554: LIST
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: LD_INT 4
32561: NEG
32562: PUSH
32563: EMPTY
32564: LIST
32565: LIST
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: LD_INT 3
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 2
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: LD_INT 2
32594: NEG
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: PUSH
32600: LD_INT 1
32602: NEG
32603: PUSH
32604: LD_INT 3
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: NEG
32615: PUSH
32616: LD_INT 4
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 2
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 2
32637: NEG
32638: PUSH
32639: LD_INT 4
32641: NEG
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 4
32649: PUSH
32650: LD_INT 0
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 4
32659: PUSH
32660: LD_INT 1
32662: NEG
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 5
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 5
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 4
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 3
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 3
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 3
32721: PUSH
32722: LD_INT 2
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 5
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
32787: LD_ADDR_VAR 0 32
32791: PUSH
32792: LD_INT 4
32794: NEG
32795: PUSH
32796: LD_INT 0
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 4
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 3
32817: NEG
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 3
32828: NEG
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 4
32839: NEG
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 5
32850: NEG
32851: PUSH
32852: LD_INT 0
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 5
32861: NEG
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 5
32873: NEG
32874: PUSH
32875: LD_INT 2
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 3
32896: NEG
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 3
32908: NEG
32909: PUSH
32910: LD_INT 4
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: NEG
32921: PUSH
32922: LD_INT 3
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: LD_INT 2
32936: NEG
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 3
32944: NEG
32945: PUSH
32946: LD_INT 2
32948: NEG
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 4
32956: NEG
32957: PUSH
32958: LD_INT 3
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 4
32968: NEG
32969: PUSH
32970: LD_INT 4
32972: NEG
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: NEG
32981: PUSH
32982: LD_INT 4
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 4
32992: NEG
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 0
33004: PUSH
33005: LD_INT 4
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 5
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: LD_INT 4
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 3
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: LD_INT 3
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: LD_INT 4
33063: NEG
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: NEG
33072: PUSH
33073: LD_INT 5
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: LD_INT 3
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: LD_INT 5
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: PUSH
33125: LD_INT 4
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 3
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 1
33170: NEG
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 2
33181: NEG
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: LD_INT 4
33189: PUSH
33190: LD_INT 2
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 4
33199: PUSH
33200: LD_INT 4
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: LD_INT 4
33209: PUSH
33210: LD_INT 3
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 5
33219: PUSH
33220: LD_INT 4
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 5
33229: PUSH
33230: LD_INT 5
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: LD_INT 5
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: LD_INT 4
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 3
33259: PUSH
33260: LD_INT 3
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: LD_INT 3
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: LD_INT 5
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
33334: LD_ADDR_VAR 0 33
33338: PUSH
33339: LD_INT 4
33341: NEG
33342: PUSH
33343: LD_INT 4
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 4
33353: NEG
33354: PUSH
33355: LD_INT 5
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 3
33365: NEG
33366: PUSH
33367: LD_INT 4
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 3
33377: NEG
33378: PUSH
33379: LD_INT 3
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 4
33389: NEG
33390: PUSH
33391: LD_INT 3
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 5
33401: NEG
33402: PUSH
33403: LD_INT 4
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 5
33413: NEG
33414: PUSH
33415: LD_INT 5
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 3
33425: NEG
33426: PUSH
33427: LD_INT 5
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 5
33437: NEG
33438: PUSH
33439: LD_INT 3
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 4
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 1
33471: PUSH
33472: LD_INT 3
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: LD_INT 2
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 0
33493: PUSH
33494: LD_INT 2
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 1
33504: NEG
33505: PUSH
33506: LD_INT 3
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: LD_INT 4
33520: NEG
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 2
33528: PUSH
33529: LD_INT 2
33531: NEG
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 2
33539: NEG
33540: PUSH
33541: LD_INT 4
33543: NEG
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 4
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 4
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 5
33572: PUSH
33573: LD_INT 0
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: LD_INT 5
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 4
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 3
33602: PUSH
33603: LD_INT 0
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 3
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 3
33623: PUSH
33624: LD_INT 2
33626: NEG
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: LD_INT 2
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 3
33644: PUSH
33645: LD_INT 3
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: EMPTY
33659: LIST
33660: LIST
33661: PUSH
33662: LD_INT 4
33664: PUSH
33665: LD_INT 3
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 4
33674: PUSH
33675: LD_INT 4
33677: PUSH
33678: EMPTY
33679: LIST
33680: LIST
33681: PUSH
33682: LD_INT 3
33684: PUSH
33685: LD_INT 4
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 2
33694: PUSH
33695: LD_INT 3
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: PUSH
33705: LD_INT 2
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 4
33714: PUSH
33715: LD_INT 2
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: LD_INT 4
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: LD_INT 4
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 0
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 1
33754: PUSH
33755: LD_INT 4
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: PUSH
33765: LD_INT 5
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 0
33774: PUSH
33775: LD_INT 5
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 1
33784: NEG
33785: PUSH
33786: LD_INT 4
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 5
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: EMPTY
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
33872: LD_ADDR_VAR 0 34
33876: PUSH
33877: LD_INT 0
33879: PUSH
33880: LD_INT 4
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 5
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 4
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 3
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 3
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: LD_INT 4
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: NEG
33947: PUSH
33948: LD_INT 5
33950: NEG
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: LD_INT 3
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: LD_INT 5
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 3
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 4
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 3
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: LD_INT 1
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: PUSH
34054: LD_INT 2
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 4
34064: PUSH
34065: LD_INT 2
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 4
34074: PUSH
34075: LD_INT 4
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 4
34084: PUSH
34085: LD_INT 3
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 5
34094: PUSH
34095: LD_INT 4
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 5
34104: PUSH
34105: LD_INT 5
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 4
34114: PUSH
34115: LD_INT 5
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 3
34124: PUSH
34125: LD_INT 4
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 3
34134: PUSH
34135: LD_INT 3
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 5
34144: PUSH
34145: LD_INT 3
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 3
34154: PUSH
34155: LD_INT 5
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: LD_INT 3
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 0
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 1
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 4
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: LD_INT 4
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: LD_INT 3
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 1
34225: NEG
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 2
34236: PUSH
34237: LD_INT 4
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: NEG
34247: PUSH
34248: LD_INT 2
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 4
34257: NEG
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 4
34268: NEG
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 3
34280: NEG
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: NEG
34292: PUSH
34293: LD_INT 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 4
34302: NEG
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 5
34313: NEG
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 5
34324: NEG
34325: PUSH
34326: LD_INT 1
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 5
34336: NEG
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 3
34348: NEG
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: ST_TO_ADDR
// end ; end ;
34404: GO 34407
34406: POP
// case btype of b_depot , b_warehouse :
34407: LD_VAR 0 1
34411: PUSH
34412: LD_INT 0
34414: DOUBLE
34415: EQUAL
34416: IFTRUE 34426
34418: LD_INT 1
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34627
34426: POP
// case nation of nation_american :
34427: LD_VAR 0 5
34431: PUSH
34432: LD_INT 1
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34496
34440: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
34441: LD_ADDR_VAR 0 9
34445: PUSH
34446: LD_VAR 0 11
34450: PUSH
34451: LD_VAR 0 12
34455: PUSH
34456: LD_VAR 0 13
34460: PUSH
34461: LD_VAR 0 14
34465: PUSH
34466: LD_VAR 0 15
34470: PUSH
34471: LD_VAR 0 16
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: PUSH
34484: LD_VAR 0 4
34488: PUSH
34489: LD_INT 1
34491: PLUS
34492: ARRAY
34493: ST_TO_ADDR
34494: GO 34625
34496: LD_INT 2
34498: DOUBLE
34499: EQUAL
34500: IFTRUE 34504
34502: GO 34560
34504: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
34505: LD_ADDR_VAR 0 9
34509: PUSH
34510: LD_VAR 0 17
34514: PUSH
34515: LD_VAR 0 18
34519: PUSH
34520: LD_VAR 0 19
34524: PUSH
34525: LD_VAR 0 20
34529: PUSH
34530: LD_VAR 0 21
34534: PUSH
34535: LD_VAR 0 22
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: PUSH
34548: LD_VAR 0 4
34552: PUSH
34553: LD_INT 1
34555: PLUS
34556: ARRAY
34557: ST_TO_ADDR
34558: GO 34625
34560: LD_INT 3
34562: DOUBLE
34563: EQUAL
34564: IFTRUE 34568
34566: GO 34624
34568: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
34569: LD_ADDR_VAR 0 9
34573: PUSH
34574: LD_VAR 0 23
34578: PUSH
34579: LD_VAR 0 24
34583: PUSH
34584: LD_VAR 0 25
34588: PUSH
34589: LD_VAR 0 26
34593: PUSH
34594: LD_VAR 0 27
34598: PUSH
34599: LD_VAR 0 28
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: PUSH
34612: LD_VAR 0 4
34616: PUSH
34617: LD_INT 1
34619: PLUS
34620: ARRAY
34621: ST_TO_ADDR
34622: GO 34625
34624: POP
34625: GO 35180
34627: LD_INT 2
34629: DOUBLE
34630: EQUAL
34631: IFTRUE 34641
34633: LD_INT 3
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34641
34639: GO 34697
34641: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
34642: LD_ADDR_VAR 0 9
34646: PUSH
34647: LD_VAR 0 29
34651: PUSH
34652: LD_VAR 0 30
34656: PUSH
34657: LD_VAR 0 31
34661: PUSH
34662: LD_VAR 0 32
34666: PUSH
34667: LD_VAR 0 33
34671: PUSH
34672: LD_VAR 0 34
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: PUSH
34685: LD_VAR 0 4
34689: PUSH
34690: LD_INT 1
34692: PLUS
34693: ARRAY
34694: ST_TO_ADDR
34695: GO 35180
34697: LD_INT 16
34699: DOUBLE
34700: EQUAL
34701: IFTRUE 34759
34703: LD_INT 17
34705: DOUBLE
34706: EQUAL
34707: IFTRUE 34759
34709: LD_INT 18
34711: DOUBLE
34712: EQUAL
34713: IFTRUE 34759
34715: LD_INT 19
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34759
34721: LD_INT 22
34723: DOUBLE
34724: EQUAL
34725: IFTRUE 34759
34727: LD_INT 20
34729: DOUBLE
34730: EQUAL
34731: IFTRUE 34759
34733: LD_INT 21
34735: DOUBLE
34736: EQUAL
34737: IFTRUE 34759
34739: LD_INT 23
34741: DOUBLE
34742: EQUAL
34743: IFTRUE 34759
34745: LD_INT 24
34747: DOUBLE
34748: EQUAL
34749: IFTRUE 34759
34751: LD_INT 25
34753: DOUBLE
34754: EQUAL
34755: IFTRUE 34759
34757: GO 34815
34759: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
34760: LD_ADDR_VAR 0 9
34764: PUSH
34765: LD_VAR 0 35
34769: PUSH
34770: LD_VAR 0 36
34774: PUSH
34775: LD_VAR 0 37
34779: PUSH
34780: LD_VAR 0 38
34784: PUSH
34785: LD_VAR 0 39
34789: PUSH
34790: LD_VAR 0 40
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: PUSH
34803: LD_VAR 0 4
34807: PUSH
34808: LD_INT 1
34810: PLUS
34811: ARRAY
34812: ST_TO_ADDR
34813: GO 35180
34815: LD_INT 6
34817: DOUBLE
34818: EQUAL
34819: IFTRUE 34871
34821: LD_INT 7
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34871
34827: LD_INT 8
34829: DOUBLE
34830: EQUAL
34831: IFTRUE 34871
34833: LD_INT 13
34835: DOUBLE
34836: EQUAL
34837: IFTRUE 34871
34839: LD_INT 12
34841: DOUBLE
34842: EQUAL
34843: IFTRUE 34871
34845: LD_INT 15
34847: DOUBLE
34848: EQUAL
34849: IFTRUE 34871
34851: LD_INT 11
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34871
34857: LD_INT 14
34859: DOUBLE
34860: EQUAL
34861: IFTRUE 34871
34863: LD_INT 10
34865: DOUBLE
34866: EQUAL
34867: IFTRUE 34871
34869: GO 34927
34871: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
34872: LD_ADDR_VAR 0 9
34876: PUSH
34877: LD_VAR 0 41
34881: PUSH
34882: LD_VAR 0 42
34886: PUSH
34887: LD_VAR 0 43
34891: PUSH
34892: LD_VAR 0 44
34896: PUSH
34897: LD_VAR 0 45
34901: PUSH
34902: LD_VAR 0 46
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: PUSH
34915: LD_VAR 0 4
34919: PUSH
34920: LD_INT 1
34922: PLUS
34923: ARRAY
34924: ST_TO_ADDR
34925: GO 35180
34927: LD_INT 36
34929: DOUBLE
34930: EQUAL
34931: IFTRUE 34935
34933: GO 34991
34935: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
34936: LD_ADDR_VAR 0 9
34940: PUSH
34941: LD_VAR 0 47
34945: PUSH
34946: LD_VAR 0 48
34950: PUSH
34951: LD_VAR 0 49
34955: PUSH
34956: LD_VAR 0 50
34960: PUSH
34961: LD_VAR 0 51
34965: PUSH
34966: LD_VAR 0 52
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: LIST
34977: LIST
34978: PUSH
34979: LD_VAR 0 4
34983: PUSH
34984: LD_INT 1
34986: PLUS
34987: ARRAY
34988: ST_TO_ADDR
34989: GO 35180
34991: LD_INT 4
34993: DOUBLE
34994: EQUAL
34995: IFTRUE 35017
34997: LD_INT 5
34999: DOUBLE
35000: EQUAL
35001: IFTRUE 35017
35003: LD_INT 34
35005: DOUBLE
35006: EQUAL
35007: IFTRUE 35017
35009: LD_INT 37
35011: DOUBLE
35012: EQUAL
35013: IFTRUE 35017
35015: GO 35073
35017: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35018: LD_ADDR_VAR 0 9
35022: PUSH
35023: LD_VAR 0 53
35027: PUSH
35028: LD_VAR 0 54
35032: PUSH
35033: LD_VAR 0 55
35037: PUSH
35038: LD_VAR 0 56
35042: PUSH
35043: LD_VAR 0 57
35047: PUSH
35048: LD_VAR 0 58
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: PUSH
35061: LD_VAR 0 4
35065: PUSH
35066: LD_INT 1
35068: PLUS
35069: ARRAY
35070: ST_TO_ADDR
35071: GO 35180
35073: LD_INT 31
35075: DOUBLE
35076: EQUAL
35077: IFTRUE 35123
35079: LD_INT 32
35081: DOUBLE
35082: EQUAL
35083: IFTRUE 35123
35085: LD_INT 33
35087: DOUBLE
35088: EQUAL
35089: IFTRUE 35123
35091: LD_INT 27
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35123
35097: LD_INT 26
35099: DOUBLE
35100: EQUAL
35101: IFTRUE 35123
35103: LD_INT 28
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35123
35109: LD_INT 29
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35123
35115: LD_INT 30
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35123
35121: GO 35179
35123: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35124: LD_ADDR_VAR 0 9
35128: PUSH
35129: LD_VAR 0 59
35133: PUSH
35134: LD_VAR 0 60
35138: PUSH
35139: LD_VAR 0 61
35143: PUSH
35144: LD_VAR 0 62
35148: PUSH
35149: LD_VAR 0 63
35153: PUSH
35154: LD_VAR 0 64
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: PUSH
35167: LD_VAR 0 4
35171: PUSH
35172: LD_INT 1
35174: PLUS
35175: ARRAY
35176: ST_TO_ADDR
35177: GO 35180
35179: POP
// temp_list2 = [ ] ;
35180: LD_ADDR_VAR 0 10
35184: PUSH
35185: EMPTY
35186: ST_TO_ADDR
// for i in temp_list do
35187: LD_ADDR_VAR 0 8
35191: PUSH
35192: LD_VAR 0 9
35196: PUSH
35197: FOR_IN
35198: IFFALSE 35250
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35200: LD_ADDR_VAR 0 10
35204: PUSH
35205: LD_VAR 0 10
35209: PUSH
35210: LD_VAR 0 8
35214: PUSH
35215: LD_INT 1
35217: ARRAY
35218: PUSH
35219: LD_VAR 0 2
35223: PLUS
35224: PUSH
35225: LD_VAR 0 8
35229: PUSH
35230: LD_INT 2
35232: ARRAY
35233: PUSH
35234: LD_VAR 0 3
35238: PLUS
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: ADD
35247: ST_TO_ADDR
35248: GO 35197
35250: POP
35251: POP
// result = temp_list2 ;
35252: LD_ADDR_VAR 0 7
35256: PUSH
35257: LD_VAR 0 10
35261: ST_TO_ADDR
// end ;
35262: LD_VAR 0 7
35266: RET
// export function EnemyInRange ( unit , dist ) ; begin
35267: LD_INT 0
35269: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_VAR 0 1
35279: PPUSH
35280: CALL_OW 255
35284: PPUSH
35285: LD_VAR 0 1
35289: PPUSH
35290: CALL_OW 250
35294: PPUSH
35295: LD_VAR 0 1
35299: PPUSH
35300: CALL_OW 251
35304: PPUSH
35305: LD_VAR 0 2
35309: PPUSH
35310: CALL 8663 0 4
35314: PUSH
35315: LD_INT 4
35317: ARRAY
35318: ST_TO_ADDR
// end ;
35319: LD_VAR 0 3
35323: RET
// export function PlayerSeeMe ( unit ) ; begin
35324: LD_INT 0
35326: PPUSH
// result := See ( your_side , unit ) ;
35327: LD_ADDR_VAR 0 2
35331: PUSH
35332: LD_OWVAR 2
35336: PPUSH
35337: LD_VAR 0 1
35341: PPUSH
35342: CALL_OW 292
35346: ST_TO_ADDR
// end ;
35347: LD_VAR 0 2
35351: RET
// export function ReverseDir ( unit ) ; begin
35352: LD_INT 0
35354: PPUSH
// if not unit then
35355: LD_VAR 0 1
35359: NOT
35360: IFFALSE 35364
// exit ;
35362: GO 35387
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
35364: LD_ADDR_VAR 0 2
35368: PUSH
35369: LD_VAR 0 1
35373: PPUSH
35374: CALL_OW 254
35378: PUSH
35379: LD_INT 3
35381: PLUS
35382: PUSH
35383: LD_INT 6
35385: MOD
35386: ST_TO_ADDR
// end ;
35387: LD_VAR 0 2
35391: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
35392: LD_INT 0
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
35398: PPUSH
// if not hexes then
35399: LD_VAR 0 2
35403: NOT
35404: IFFALSE 35408
// exit ;
35406: GO 35556
// dist := 9999 ;
35408: LD_ADDR_VAR 0 5
35412: PUSH
35413: LD_INT 9999
35415: ST_TO_ADDR
// for i = 1 to hexes do
35416: LD_ADDR_VAR 0 4
35420: PUSH
35421: DOUBLE
35422: LD_INT 1
35424: DEC
35425: ST_TO_ADDR
35426: LD_VAR 0 2
35430: PUSH
35431: FOR_TO
35432: IFFALSE 35544
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
35434: LD_VAR 0 1
35438: PPUSH
35439: LD_VAR 0 2
35443: PUSH
35444: LD_VAR 0 4
35448: ARRAY
35449: PUSH
35450: LD_INT 1
35452: ARRAY
35453: PPUSH
35454: LD_VAR 0 2
35458: PUSH
35459: LD_VAR 0 4
35463: ARRAY
35464: PUSH
35465: LD_INT 2
35467: ARRAY
35468: PPUSH
35469: CALL_OW 297
35473: PUSH
35474: LD_VAR 0 5
35478: LESS
35479: IFFALSE 35542
// begin hex := hexes [ i ] ;
35481: LD_ADDR_VAR 0 7
35485: PUSH
35486: LD_VAR 0 2
35490: PUSH
35491: LD_VAR 0 4
35495: ARRAY
35496: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35497: LD_ADDR_VAR 0 5
35501: PUSH
35502: LD_VAR 0 1
35506: PPUSH
35507: LD_VAR 0 2
35511: PUSH
35512: LD_VAR 0 4
35516: ARRAY
35517: PUSH
35518: LD_INT 1
35520: ARRAY
35521: PPUSH
35522: LD_VAR 0 2
35526: PUSH
35527: LD_VAR 0 4
35531: ARRAY
35532: PUSH
35533: LD_INT 2
35535: ARRAY
35536: PPUSH
35537: CALL_OW 297
35541: ST_TO_ADDR
// end ; end ;
35542: GO 35431
35544: POP
35545: POP
// result := hex ;
35546: LD_ADDR_VAR 0 3
35550: PUSH
35551: LD_VAR 0 7
35555: ST_TO_ADDR
// end ;
35556: LD_VAR 0 3
35560: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
35561: LD_INT 0
35563: PPUSH
35564: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
35565: LD_VAR 0 1
35569: NOT
35570: PUSH
35571: LD_VAR 0 1
35575: PUSH
35576: LD_INT 21
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 23
35588: PUSH
35589: LD_INT 2
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PPUSH
35600: CALL_OW 69
35604: IN
35605: NOT
35606: OR
35607: IFFALSE 35611
// exit ;
35609: GO 35658
// for i = 1 to 3 do
35611: LD_ADDR_VAR 0 3
35615: PUSH
35616: DOUBLE
35617: LD_INT 1
35619: DEC
35620: ST_TO_ADDR
35621: LD_INT 3
35623: PUSH
35624: FOR_TO
35625: IFFALSE 35656
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
35627: LD_VAR 0 1
35631: PPUSH
35632: CALL_OW 250
35636: PPUSH
35637: LD_VAR 0 1
35641: PPUSH
35642: CALL_OW 251
35646: PPUSH
35647: LD_INT 1
35649: PPUSH
35650: CALL_OW 453
35654: GO 35624
35656: POP
35657: POP
// end ;
35658: LD_VAR 0 2
35662: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
35663: LD_INT 0
35665: PPUSH
35666: PPUSH
35667: PPUSH
35668: PPUSH
35669: PPUSH
35670: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
35671: LD_VAR 0 1
35675: NOT
35676: PUSH
35677: LD_VAR 0 2
35681: NOT
35682: OR
35683: PUSH
35684: LD_VAR 0 1
35688: PPUSH
35689: CALL_OW 314
35693: OR
35694: IFFALSE 35698
// exit ;
35696: GO 36139
// x := GetX ( enemy_unit ) ;
35698: LD_ADDR_VAR 0 7
35702: PUSH
35703: LD_VAR 0 2
35707: PPUSH
35708: CALL_OW 250
35712: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
35713: LD_ADDR_VAR 0 8
35717: PUSH
35718: LD_VAR 0 2
35722: PPUSH
35723: CALL_OW 251
35727: ST_TO_ADDR
// if not x or not y then
35728: LD_VAR 0 7
35732: NOT
35733: PUSH
35734: LD_VAR 0 8
35738: NOT
35739: OR
35740: IFFALSE 35744
// exit ;
35742: GO 36139
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
35744: LD_ADDR_VAR 0 6
35748: PUSH
35749: LD_VAR 0 7
35753: PPUSH
35754: LD_INT 0
35756: PPUSH
35757: LD_INT 4
35759: PPUSH
35760: CALL_OW 272
35764: PUSH
35765: LD_VAR 0 8
35769: PPUSH
35770: LD_INT 0
35772: PPUSH
35773: LD_INT 4
35775: PPUSH
35776: CALL_OW 273
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_VAR 0 7
35789: PPUSH
35790: LD_INT 1
35792: PPUSH
35793: LD_INT 4
35795: PPUSH
35796: CALL_OW 272
35800: PUSH
35801: LD_VAR 0 8
35805: PPUSH
35806: LD_INT 1
35808: PPUSH
35809: LD_INT 4
35811: PPUSH
35812: CALL_OW 273
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_VAR 0 7
35825: PPUSH
35826: LD_INT 2
35828: PPUSH
35829: LD_INT 4
35831: PPUSH
35832: CALL_OW 272
35836: PUSH
35837: LD_VAR 0 8
35841: PPUSH
35842: LD_INT 2
35844: PPUSH
35845: LD_INT 4
35847: PPUSH
35848: CALL_OW 273
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_VAR 0 7
35861: PPUSH
35862: LD_INT 3
35864: PPUSH
35865: LD_INT 4
35867: PPUSH
35868: CALL_OW 272
35872: PUSH
35873: LD_VAR 0 8
35877: PPUSH
35878: LD_INT 3
35880: PPUSH
35881: LD_INT 4
35883: PPUSH
35884: CALL_OW 273
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_VAR 0 7
35897: PPUSH
35898: LD_INT 4
35900: PPUSH
35901: LD_INT 4
35903: PPUSH
35904: CALL_OW 272
35908: PUSH
35909: LD_VAR 0 8
35913: PPUSH
35914: LD_INT 4
35916: PPUSH
35917: LD_INT 4
35919: PPUSH
35920: CALL_OW 273
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_VAR 0 7
35933: PPUSH
35934: LD_INT 5
35936: PPUSH
35937: LD_INT 4
35939: PPUSH
35940: CALL_OW 272
35944: PUSH
35945: LD_VAR 0 8
35949: PPUSH
35950: LD_INT 5
35952: PPUSH
35953: LD_INT 4
35955: PPUSH
35956: CALL_OW 273
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
// for i = tmp downto 1 do
35973: LD_ADDR_VAR 0 4
35977: PUSH
35978: DOUBLE
35979: LD_VAR 0 6
35983: INC
35984: ST_TO_ADDR
35985: LD_INT 1
35987: PUSH
35988: FOR_DOWNTO
35989: IFFALSE 36090
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
35991: LD_VAR 0 6
35995: PUSH
35996: LD_VAR 0 4
36000: ARRAY
36001: PUSH
36002: LD_INT 1
36004: ARRAY
36005: PPUSH
36006: LD_VAR 0 6
36010: PUSH
36011: LD_VAR 0 4
36015: ARRAY
36016: PUSH
36017: LD_INT 2
36019: ARRAY
36020: PPUSH
36021: CALL_OW 488
36025: NOT
36026: PUSH
36027: LD_VAR 0 6
36031: PUSH
36032: LD_VAR 0 4
36036: ARRAY
36037: PUSH
36038: LD_INT 1
36040: ARRAY
36041: PPUSH
36042: LD_VAR 0 6
36046: PUSH
36047: LD_VAR 0 4
36051: ARRAY
36052: PUSH
36053: LD_INT 2
36055: ARRAY
36056: PPUSH
36057: CALL_OW 428
36061: PUSH
36062: LD_INT 0
36064: NONEQUAL
36065: OR
36066: IFFALSE 36088
// tmp := Delete ( tmp , i ) ;
36068: LD_ADDR_VAR 0 6
36072: PUSH
36073: LD_VAR 0 6
36077: PPUSH
36078: LD_VAR 0 4
36082: PPUSH
36083: CALL_OW 3
36087: ST_TO_ADDR
36088: GO 35988
36090: POP
36091: POP
// j := GetClosestHex ( unit , tmp ) ;
36092: LD_ADDR_VAR 0 5
36096: PUSH
36097: LD_VAR 0 1
36101: PPUSH
36102: LD_VAR 0 6
36106: PPUSH
36107: CALL 35392 0 2
36111: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36112: LD_VAR 0 1
36116: PPUSH
36117: LD_VAR 0 5
36121: PUSH
36122: LD_INT 1
36124: ARRAY
36125: PPUSH
36126: LD_VAR 0 5
36130: PUSH
36131: LD_INT 2
36133: ARRAY
36134: PPUSH
36135: CALL_OW 111
// end ;
36139: LD_VAR 0 3
36143: RET
// export function PrepareApemanSoldier ( ) ; begin
36144: LD_INT 0
36146: PPUSH
// uc_nation := 0 ;
36147: LD_ADDR_OWVAR 21
36151: PUSH
36152: LD_INT 0
36154: ST_TO_ADDR
// hc_sex := sex_male ;
36155: LD_ADDR_OWVAR 27
36159: PUSH
36160: LD_INT 1
36162: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
36163: LD_ADDR_OWVAR 28
36167: PUSH
36168: LD_INT 15
36170: ST_TO_ADDR
// hc_gallery :=  ;
36171: LD_ADDR_OWVAR 33
36175: PUSH
36176: LD_STRING 
36178: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36179: LD_ADDR_OWVAR 31
36183: PUSH
36184: LD_INT 0
36186: PPUSH
36187: LD_INT 3
36189: PPUSH
36190: CALL_OW 12
36194: PUSH
36195: LD_INT 0
36197: PPUSH
36198: LD_INT 3
36200: PPUSH
36201: CALL_OW 12
36205: PUSH
36206: LD_INT 0
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
// end ;
36218: LD_VAR 0 1
36222: RET
// export function PrepareApemanEngineer ( ) ; begin
36223: LD_INT 0
36225: PPUSH
// uc_nation := 0 ;
36226: LD_ADDR_OWVAR 21
36230: PUSH
36231: LD_INT 0
36233: ST_TO_ADDR
// hc_sex := sex_male ;
36234: LD_ADDR_OWVAR 27
36238: PUSH
36239: LD_INT 1
36241: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
36242: LD_ADDR_OWVAR 28
36246: PUSH
36247: LD_INT 16
36249: ST_TO_ADDR
// hc_gallery :=  ;
36250: LD_ADDR_OWVAR 33
36254: PUSH
36255: LD_STRING 
36257: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36258: LD_ADDR_OWVAR 31
36262: PUSH
36263: LD_INT 0
36265: PPUSH
36266: LD_INT 3
36268: PPUSH
36269: CALL_OW 12
36273: PUSH
36274: LD_INT 0
36276: PPUSH
36277: LD_INT 3
36279: PPUSH
36280: CALL_OW 12
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: ST_TO_ADDR
// end ;
36297: LD_VAR 0 1
36301: RET
// export function PrepareApeman ( agressivity ) ; begin
36302: LD_INT 0
36304: PPUSH
// uc_side := 0 ;
36305: LD_ADDR_OWVAR 20
36309: PUSH
36310: LD_INT 0
36312: ST_TO_ADDR
// uc_nation := 0 ;
36313: LD_ADDR_OWVAR 21
36317: PUSH
36318: LD_INT 0
36320: ST_TO_ADDR
// hc_sex := sex_male ;
36321: LD_ADDR_OWVAR 27
36325: PUSH
36326: LD_INT 1
36328: ST_TO_ADDR
// hc_class := class_apeman ;
36329: LD_ADDR_OWVAR 28
36333: PUSH
36334: LD_INT 12
36336: ST_TO_ADDR
// hc_gallery :=  ;
36337: LD_ADDR_OWVAR 33
36341: PUSH
36342: LD_STRING 
36344: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36345: LD_ADDR_OWVAR 35
36349: PUSH
36350: LD_VAR 0 1
36354: NEG
36355: PPUSH
36356: LD_VAR 0 1
36360: PPUSH
36361: CALL_OW 12
36365: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
36366: LD_ADDR_OWVAR 31
36370: PUSH
36371: LD_INT 0
36373: PPUSH
36374: LD_INT 3
36376: PPUSH
36377: CALL_OW 12
36381: PUSH
36382: LD_INT 0
36384: PPUSH
36385: LD_INT 3
36387: PPUSH
36388: CALL_OW 12
36392: PUSH
36393: LD_INT 0
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: ST_TO_ADDR
// end ;
36405: LD_VAR 0 2
36409: RET
// export function PrepareTiger ( agressivity ) ; begin
36410: LD_INT 0
36412: PPUSH
// uc_side := 0 ;
36413: LD_ADDR_OWVAR 20
36417: PUSH
36418: LD_INT 0
36420: ST_TO_ADDR
// uc_nation := 0 ;
36421: LD_ADDR_OWVAR 21
36425: PUSH
36426: LD_INT 0
36428: ST_TO_ADDR
// hc_class := class_tiger ;
36429: LD_ADDR_OWVAR 28
36433: PUSH
36434: LD_INT 14
36436: ST_TO_ADDR
// hc_gallery :=  ;
36437: LD_ADDR_OWVAR 33
36441: PUSH
36442: LD_STRING 
36444: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
36445: LD_ADDR_OWVAR 35
36449: PUSH
36450: LD_VAR 0 1
36454: NEG
36455: PPUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 12
36465: ST_TO_ADDR
// end ;
36466: LD_VAR 0 2
36470: RET
// export function PrepareEnchidna ( ) ; begin
36471: LD_INT 0
36473: PPUSH
// uc_side := 0 ;
36474: LD_ADDR_OWVAR 20
36478: PUSH
36479: LD_INT 0
36481: ST_TO_ADDR
// uc_nation := 0 ;
36482: LD_ADDR_OWVAR 21
36486: PUSH
36487: LD_INT 0
36489: ST_TO_ADDR
// hc_class := class_baggie ;
36490: LD_ADDR_OWVAR 28
36494: PUSH
36495: LD_INT 13
36497: ST_TO_ADDR
// hc_gallery :=  ;
36498: LD_ADDR_OWVAR 33
36502: PUSH
36503: LD_STRING 
36505: ST_TO_ADDR
// end ;
36506: LD_VAR 0 1
36510: RET
// export function PrepareFrog ( ) ; begin
36511: LD_INT 0
36513: PPUSH
// uc_side := 0 ;
36514: LD_ADDR_OWVAR 20
36518: PUSH
36519: LD_INT 0
36521: ST_TO_ADDR
// uc_nation := 0 ;
36522: LD_ADDR_OWVAR 21
36526: PUSH
36527: LD_INT 0
36529: ST_TO_ADDR
// hc_class := class_frog ;
36530: LD_ADDR_OWVAR 28
36534: PUSH
36535: LD_INT 19
36537: ST_TO_ADDR
// hc_gallery :=  ;
36538: LD_ADDR_OWVAR 33
36542: PUSH
36543: LD_STRING 
36545: ST_TO_ADDR
// end ;
36546: LD_VAR 0 1
36550: RET
// export function PrepareFish ( ) ; begin
36551: LD_INT 0
36553: PPUSH
// uc_side := 0 ;
36554: LD_ADDR_OWVAR 20
36558: PUSH
36559: LD_INT 0
36561: ST_TO_ADDR
// uc_nation := 0 ;
36562: LD_ADDR_OWVAR 21
36566: PUSH
36567: LD_INT 0
36569: ST_TO_ADDR
// hc_class := class_fish ;
36570: LD_ADDR_OWVAR 28
36574: PUSH
36575: LD_INT 20
36577: ST_TO_ADDR
// hc_gallery :=  ;
36578: LD_ADDR_OWVAR 33
36582: PUSH
36583: LD_STRING 
36585: ST_TO_ADDR
// end ;
36586: LD_VAR 0 1
36590: RET
// export function PrepareBird ( ) ; begin
36591: LD_INT 0
36593: PPUSH
// uc_side := 0 ;
36594: LD_ADDR_OWVAR 20
36598: PUSH
36599: LD_INT 0
36601: ST_TO_ADDR
// uc_nation := 0 ;
36602: LD_ADDR_OWVAR 21
36606: PUSH
36607: LD_INT 0
36609: ST_TO_ADDR
// hc_class := class_phororhacos ;
36610: LD_ADDR_OWVAR 28
36614: PUSH
36615: LD_INT 18
36617: ST_TO_ADDR
// hc_gallery :=  ;
36618: LD_ADDR_OWVAR 33
36622: PUSH
36623: LD_STRING 
36625: ST_TO_ADDR
// end ;
36626: LD_VAR 0 1
36630: RET
// export function PrepareHorse ( ) ; begin
36631: LD_INT 0
36633: PPUSH
// uc_side := 0 ;
36634: LD_ADDR_OWVAR 20
36638: PUSH
36639: LD_INT 0
36641: ST_TO_ADDR
// uc_nation := 0 ;
36642: LD_ADDR_OWVAR 21
36646: PUSH
36647: LD_INT 0
36649: ST_TO_ADDR
// hc_class := class_horse ;
36650: LD_ADDR_OWVAR 28
36654: PUSH
36655: LD_INT 21
36657: ST_TO_ADDR
// hc_gallery :=  ;
36658: LD_ADDR_OWVAR 33
36662: PUSH
36663: LD_STRING 
36665: ST_TO_ADDR
// end ;
36666: LD_VAR 0 1
36670: RET
// export function PrepareMastodont ( ) ; begin
36671: LD_INT 0
36673: PPUSH
// uc_side := 0 ;
36674: LD_ADDR_OWVAR 20
36678: PUSH
36679: LD_INT 0
36681: ST_TO_ADDR
// uc_nation := 0 ;
36682: LD_ADDR_OWVAR 21
36686: PUSH
36687: LD_INT 0
36689: ST_TO_ADDR
// vc_chassis := class_mastodont ;
36690: LD_ADDR_OWVAR 37
36694: PUSH
36695: LD_INT 31
36697: ST_TO_ADDR
// vc_control := control_rider ;
36698: LD_ADDR_OWVAR 38
36702: PUSH
36703: LD_INT 4
36705: ST_TO_ADDR
// end ;
36706: LD_VAR 0 1
36710: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
36711: LD_INT 0
36713: PPUSH
36714: PPUSH
36715: PPUSH
// uc_side = 0 ;
36716: LD_ADDR_OWVAR 20
36720: PUSH
36721: LD_INT 0
36723: ST_TO_ADDR
// uc_nation = 0 ;
36724: LD_ADDR_OWVAR 21
36728: PUSH
36729: LD_INT 0
36731: ST_TO_ADDR
// InitHc_All ( ) ;
36732: CALL_OW 584
// InitVc ;
36736: CALL_OW 20
// if mastodonts then
36740: LD_VAR 0 6
36744: IFFALSE 36811
// for i = 1 to mastodonts do
36746: LD_ADDR_VAR 0 11
36750: PUSH
36751: DOUBLE
36752: LD_INT 1
36754: DEC
36755: ST_TO_ADDR
36756: LD_VAR 0 6
36760: PUSH
36761: FOR_TO
36762: IFFALSE 36809
// begin vc_chassis := 31 ;
36764: LD_ADDR_OWVAR 37
36768: PUSH
36769: LD_INT 31
36771: ST_TO_ADDR
// vc_control := control_rider ;
36772: LD_ADDR_OWVAR 38
36776: PUSH
36777: LD_INT 4
36779: ST_TO_ADDR
// animal := CreateVehicle ;
36780: LD_ADDR_VAR 0 12
36784: PUSH
36785: CALL_OW 45
36789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36790: LD_VAR 0 12
36794: PPUSH
36795: LD_VAR 0 8
36799: PPUSH
36800: LD_INT 0
36802: PPUSH
36803: CALL 38946 0 3
// end ;
36807: GO 36761
36809: POP
36810: POP
// if horses then
36811: LD_VAR 0 5
36815: IFFALSE 36882
// for i = 1 to horses do
36817: LD_ADDR_VAR 0 11
36821: PUSH
36822: DOUBLE
36823: LD_INT 1
36825: DEC
36826: ST_TO_ADDR
36827: LD_VAR 0 5
36831: PUSH
36832: FOR_TO
36833: IFFALSE 36880
// begin hc_class := 21 ;
36835: LD_ADDR_OWVAR 28
36839: PUSH
36840: LD_INT 21
36842: ST_TO_ADDR
// hc_gallery :=  ;
36843: LD_ADDR_OWVAR 33
36847: PUSH
36848: LD_STRING 
36850: ST_TO_ADDR
// animal := CreateHuman ;
36851: LD_ADDR_VAR 0 12
36855: PUSH
36856: CALL_OW 44
36860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36861: LD_VAR 0 12
36865: PPUSH
36866: LD_VAR 0 8
36870: PPUSH
36871: LD_INT 0
36873: PPUSH
36874: CALL 38946 0 3
// end ;
36878: GO 36832
36880: POP
36881: POP
// if birds then
36882: LD_VAR 0 1
36886: IFFALSE 36953
// for i = 1 to birds do
36888: LD_ADDR_VAR 0 11
36892: PUSH
36893: DOUBLE
36894: LD_INT 1
36896: DEC
36897: ST_TO_ADDR
36898: LD_VAR 0 1
36902: PUSH
36903: FOR_TO
36904: IFFALSE 36951
// begin hc_class = 18 ;
36906: LD_ADDR_OWVAR 28
36910: PUSH
36911: LD_INT 18
36913: ST_TO_ADDR
// hc_gallery =  ;
36914: LD_ADDR_OWVAR 33
36918: PUSH
36919: LD_STRING 
36921: ST_TO_ADDR
// animal := CreateHuman ;
36922: LD_ADDR_VAR 0 12
36926: PUSH
36927: CALL_OW 44
36931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
36932: LD_VAR 0 12
36936: PPUSH
36937: LD_VAR 0 8
36941: PPUSH
36942: LD_INT 0
36944: PPUSH
36945: CALL 38946 0 3
// end ;
36949: GO 36903
36951: POP
36952: POP
// if tigers then
36953: LD_VAR 0 2
36957: IFFALSE 37041
// for i = 1 to tigers do
36959: LD_ADDR_VAR 0 11
36963: PUSH
36964: DOUBLE
36965: LD_INT 1
36967: DEC
36968: ST_TO_ADDR
36969: LD_VAR 0 2
36973: PUSH
36974: FOR_TO
36975: IFFALSE 37039
// begin hc_class = class_tiger ;
36977: LD_ADDR_OWVAR 28
36981: PUSH
36982: LD_INT 14
36984: ST_TO_ADDR
// hc_gallery =  ;
36985: LD_ADDR_OWVAR 33
36989: PUSH
36990: LD_STRING 
36992: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
36993: LD_ADDR_OWVAR 35
36997: PUSH
36998: LD_INT 7
37000: NEG
37001: PPUSH
37002: LD_INT 7
37004: PPUSH
37005: CALL_OW 12
37009: ST_TO_ADDR
// animal := CreateHuman ;
37010: LD_ADDR_VAR 0 12
37014: PUSH
37015: CALL_OW 44
37019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37020: LD_VAR 0 12
37024: PPUSH
37025: LD_VAR 0 8
37029: PPUSH
37030: LD_INT 0
37032: PPUSH
37033: CALL 38946 0 3
// end ;
37037: GO 36974
37039: POP
37040: POP
// if apemans then
37041: LD_VAR 0 3
37045: IFFALSE 37168
// for i = 1 to apemans do
37047: LD_ADDR_VAR 0 11
37051: PUSH
37052: DOUBLE
37053: LD_INT 1
37055: DEC
37056: ST_TO_ADDR
37057: LD_VAR 0 3
37061: PUSH
37062: FOR_TO
37063: IFFALSE 37166
// begin hc_class = class_apeman ;
37065: LD_ADDR_OWVAR 28
37069: PUSH
37070: LD_INT 12
37072: ST_TO_ADDR
// hc_gallery =  ;
37073: LD_ADDR_OWVAR 33
37077: PUSH
37078: LD_STRING 
37080: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
37081: LD_ADDR_OWVAR 35
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PPUSH
37090: LD_INT 2
37092: PPUSH
37093: CALL_OW 12
37097: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
37098: LD_ADDR_OWVAR 31
37102: PUSH
37103: LD_INT 1
37105: PPUSH
37106: LD_INT 3
37108: PPUSH
37109: CALL_OW 12
37113: PUSH
37114: LD_INT 1
37116: PPUSH
37117: LD_INT 3
37119: PPUSH
37120: CALL_OW 12
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: ST_TO_ADDR
// animal := CreateHuman ;
37137: LD_ADDR_VAR 0 12
37141: PUSH
37142: CALL_OW 44
37146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37147: LD_VAR 0 12
37151: PPUSH
37152: LD_VAR 0 8
37156: PPUSH
37157: LD_INT 0
37159: PPUSH
37160: CALL 38946 0 3
// end ;
37164: GO 37062
37166: POP
37167: POP
// if enchidnas then
37168: LD_VAR 0 4
37172: IFFALSE 37239
// for i = 1 to enchidnas do
37174: LD_ADDR_VAR 0 11
37178: PUSH
37179: DOUBLE
37180: LD_INT 1
37182: DEC
37183: ST_TO_ADDR
37184: LD_VAR 0 4
37188: PUSH
37189: FOR_TO
37190: IFFALSE 37237
// begin hc_class = 13 ;
37192: LD_ADDR_OWVAR 28
37196: PUSH
37197: LD_INT 13
37199: ST_TO_ADDR
// hc_gallery =  ;
37200: LD_ADDR_OWVAR 33
37204: PUSH
37205: LD_STRING 
37207: ST_TO_ADDR
// animal := CreateHuman ;
37208: LD_ADDR_VAR 0 12
37212: PUSH
37213: CALL_OW 44
37217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37218: LD_VAR 0 12
37222: PPUSH
37223: LD_VAR 0 8
37227: PPUSH
37228: LD_INT 0
37230: PPUSH
37231: CALL 38946 0 3
// end ;
37235: GO 37189
37237: POP
37238: POP
// if fishes then
37239: LD_VAR 0 7
37243: IFFALSE 37310
// for i = 1 to fishes do
37245: LD_ADDR_VAR 0 11
37249: PUSH
37250: DOUBLE
37251: LD_INT 1
37253: DEC
37254: ST_TO_ADDR
37255: LD_VAR 0 7
37259: PUSH
37260: FOR_TO
37261: IFFALSE 37308
// begin hc_class = 20 ;
37263: LD_ADDR_OWVAR 28
37267: PUSH
37268: LD_INT 20
37270: ST_TO_ADDR
// hc_gallery =  ;
37271: LD_ADDR_OWVAR 33
37275: PUSH
37276: LD_STRING 
37278: ST_TO_ADDR
// animal := CreateHuman ;
37279: LD_ADDR_VAR 0 12
37283: PUSH
37284: CALL_OW 44
37288: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
37289: LD_VAR 0 12
37293: PPUSH
37294: LD_VAR 0 9
37298: PPUSH
37299: LD_INT 0
37301: PPUSH
37302: CALL 38946 0 3
// end ;
37306: GO 37260
37308: POP
37309: POP
// end ;
37310: LD_VAR 0 10
37314: RET
// export function WantHeal ( sci , unit ) ; begin
37315: LD_INT 0
37317: PPUSH
// if GetTaskList ( sci ) > 0 then
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 437
37327: PUSH
37328: LD_INT 0
37330: GREATER
37331: IFFALSE 37401
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
37333: LD_VAR 0 1
37337: PPUSH
37338: CALL_OW 437
37342: PUSH
37343: LD_INT 1
37345: ARRAY
37346: PUSH
37347: LD_INT 1
37349: ARRAY
37350: PUSH
37351: LD_STRING l
37353: EQUAL
37354: PUSH
37355: LD_VAR 0 1
37359: PPUSH
37360: CALL_OW 437
37364: PUSH
37365: LD_INT 1
37367: ARRAY
37368: PUSH
37369: LD_INT 4
37371: ARRAY
37372: PUSH
37373: LD_VAR 0 2
37377: EQUAL
37378: AND
37379: IFFALSE 37391
// result := true else
37381: LD_ADDR_VAR 0 3
37385: PUSH
37386: LD_INT 1
37388: ST_TO_ADDR
37389: GO 37399
// result := false ;
37391: LD_ADDR_VAR 0 3
37395: PUSH
37396: LD_INT 0
37398: ST_TO_ADDR
// end else
37399: GO 37409
// result := false ;
37401: LD_ADDR_VAR 0 3
37405: PUSH
37406: LD_INT 0
37408: ST_TO_ADDR
// end ;
37409: LD_VAR 0 3
37413: RET
// export function HealTarget ( sci ) ; begin
37414: LD_INT 0
37416: PPUSH
// if not sci then
37417: LD_VAR 0 1
37421: NOT
37422: IFFALSE 37426
// exit ;
37424: GO 37491
// result := 0 ;
37426: LD_ADDR_VAR 0 2
37430: PUSH
37431: LD_INT 0
37433: ST_TO_ADDR
// if GetTaskList ( sci ) then
37434: LD_VAR 0 1
37438: PPUSH
37439: CALL_OW 437
37443: IFFALSE 37491
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
37445: LD_VAR 0 1
37449: PPUSH
37450: CALL_OW 437
37454: PUSH
37455: LD_INT 1
37457: ARRAY
37458: PUSH
37459: LD_INT 1
37461: ARRAY
37462: PUSH
37463: LD_STRING l
37465: EQUAL
37466: IFFALSE 37491
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
37468: LD_ADDR_VAR 0 2
37472: PUSH
37473: LD_VAR 0 1
37477: PPUSH
37478: CALL_OW 437
37482: PUSH
37483: LD_INT 1
37485: ARRAY
37486: PUSH
37487: LD_INT 4
37489: ARRAY
37490: ST_TO_ADDR
// end ;
37491: LD_VAR 0 2
37495: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
37496: LD_INT 0
37498: PPUSH
37499: PPUSH
37500: PPUSH
37501: PPUSH
// if not base_units then
37502: LD_VAR 0 1
37506: NOT
37507: IFFALSE 37511
// exit ;
37509: GO 37598
// result := false ;
37511: LD_ADDR_VAR 0 2
37515: PUSH
37516: LD_INT 0
37518: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
37519: LD_ADDR_VAR 0 5
37523: PUSH
37524: LD_VAR 0 1
37528: PPUSH
37529: LD_INT 21
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PPUSH
37539: CALL_OW 72
37543: ST_TO_ADDR
// if not tmp then
37544: LD_VAR 0 5
37548: NOT
37549: IFFALSE 37553
// exit ;
37551: GO 37598
// for i in tmp do
37553: LD_ADDR_VAR 0 3
37557: PUSH
37558: LD_VAR 0 5
37562: PUSH
37563: FOR_IN
37564: IFFALSE 37596
// begin result := EnemyInRange ( i , 22 ) ;
37566: LD_ADDR_VAR 0 2
37570: PUSH
37571: LD_VAR 0 3
37575: PPUSH
37576: LD_INT 22
37578: PPUSH
37579: CALL 35267 0 2
37583: ST_TO_ADDR
// if result then
37584: LD_VAR 0 2
37588: IFFALSE 37594
// exit ;
37590: POP
37591: POP
37592: GO 37598
// end ;
37594: GO 37563
37596: POP
37597: POP
// end ;
37598: LD_VAR 0 2
37602: RET
// export function FilterByTag ( units , tag ) ; begin
37603: LD_INT 0
37605: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
37606: LD_ADDR_VAR 0 3
37610: PUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: LD_INT 120
37618: PUSH
37619: LD_VAR 0 2
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PPUSH
37628: CALL_OW 72
37632: ST_TO_ADDR
// end ;
37633: LD_VAR 0 3
37637: RET
// export function IsDriver ( un ) ; begin
37638: LD_INT 0
37640: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
37641: LD_ADDR_VAR 0 2
37645: PUSH
37646: LD_VAR 0 1
37650: PUSH
37651: LD_INT 55
37653: PUSH
37654: EMPTY
37655: LIST
37656: PPUSH
37657: CALL_OW 69
37661: IN
37662: ST_TO_ADDR
// end ;
37663: LD_VAR 0 2
37667: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
37668: LD_INT 0
37670: PPUSH
37671: PPUSH
// list := [ ] ;
37672: LD_ADDR_VAR 0 5
37676: PUSH
37677: EMPTY
37678: ST_TO_ADDR
// case d of 0 :
37679: LD_VAR 0 3
37683: PUSH
37684: LD_INT 0
37686: DOUBLE
37687: EQUAL
37688: IFTRUE 37692
37690: GO 37825
37692: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
37693: LD_ADDR_VAR 0 5
37697: PUSH
37698: LD_VAR 0 1
37702: PUSH
37703: LD_INT 4
37705: MINUS
37706: PUSH
37707: LD_VAR 0 2
37711: PUSH
37712: LD_INT 4
37714: MINUS
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: PUSH
37724: LD_VAR 0 1
37728: PUSH
37729: LD_INT 3
37731: MINUS
37732: PUSH
37733: LD_VAR 0 2
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: LIST
37745: PUSH
37746: LD_VAR 0 1
37750: PUSH
37751: LD_INT 4
37753: PLUS
37754: PUSH
37755: LD_VAR 0 2
37759: PUSH
37760: LD_INT 4
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: LIST
37767: PUSH
37768: LD_VAR 0 1
37772: PUSH
37773: LD_INT 3
37775: PLUS
37776: PUSH
37777: LD_VAR 0 2
37781: PUSH
37782: LD_INT 3
37784: PLUS
37785: PUSH
37786: LD_INT 5
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: LIST
37793: PUSH
37794: LD_VAR 0 1
37798: PUSH
37799: LD_VAR 0 2
37803: PUSH
37804: LD_INT 4
37806: PLUS
37807: PUSH
37808: LD_INT 0
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: LIST
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// end ; 1 :
37823: GO 38523
37825: LD_INT 1
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 37966
37833: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
37834: LD_ADDR_VAR 0 5
37838: PUSH
37839: LD_VAR 0 1
37843: PUSH
37844: LD_VAR 0 2
37848: PUSH
37849: LD_INT 4
37851: MINUS
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: LIST
37860: PUSH
37861: LD_VAR 0 1
37865: PUSH
37866: LD_INT 3
37868: MINUS
37869: PUSH
37870: LD_VAR 0 2
37874: PUSH
37875: LD_INT 3
37877: MINUS
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: LIST
37886: PUSH
37887: LD_VAR 0 1
37891: PUSH
37892: LD_INT 4
37894: MINUS
37895: PUSH
37896: LD_VAR 0 2
37900: PUSH
37901: LD_INT 1
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: PUSH
37909: LD_VAR 0 1
37913: PUSH
37914: LD_VAR 0 2
37918: PUSH
37919: LD_INT 3
37921: PLUS
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: LD_VAR 0 1
37935: PUSH
37936: LD_INT 4
37938: PLUS
37939: PUSH
37940: LD_VAR 0 2
37944: PUSH
37945: LD_INT 4
37947: PLUS
37948: PUSH
37949: LD_INT 5
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: ST_TO_ADDR
// end ; 2 :
37964: GO 38523
37966: LD_INT 2
37968: DOUBLE
37969: EQUAL
37970: IFTRUE 37974
37972: GO 38103
37974: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
37975: LD_ADDR_VAR 0 5
37979: PUSH
37980: LD_VAR 0 1
37984: PUSH
37985: LD_VAR 0 2
37989: PUSH
37990: LD_INT 3
37992: MINUS
37993: PUSH
37994: LD_INT 3
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: PUSH
38002: LD_VAR 0 1
38006: PUSH
38007: LD_INT 4
38009: PLUS
38010: PUSH
38011: LD_VAR 0 2
38015: PUSH
38016: LD_INT 4
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: PUSH
38024: LD_VAR 0 1
38028: PUSH
38029: LD_VAR 0 2
38033: PUSH
38034: LD_INT 4
38036: PLUS
38037: PUSH
38038: LD_INT 0
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: PUSH
38046: LD_VAR 0 1
38050: PUSH
38051: LD_INT 3
38053: MINUS
38054: PUSH
38055: LD_VAR 0 2
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: LIST
38067: PUSH
38068: LD_VAR 0 1
38072: PUSH
38073: LD_INT 4
38075: MINUS
38076: PUSH
38077: LD_VAR 0 2
38081: PUSH
38082: LD_INT 4
38084: MINUS
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: ST_TO_ADDR
// end ; 3 :
38101: GO 38523
38103: LD_INT 3
38105: DOUBLE
38106: EQUAL
38107: IFTRUE 38111
38109: GO 38244
38111: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
38112: LD_ADDR_VAR 0 5
38116: PUSH
38117: LD_VAR 0 1
38121: PUSH
38122: LD_INT 3
38124: PLUS
38125: PUSH
38126: LD_VAR 0 2
38130: PUSH
38131: LD_INT 4
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: PUSH
38139: LD_VAR 0 1
38143: PUSH
38144: LD_INT 4
38146: PLUS
38147: PUSH
38148: LD_VAR 0 2
38152: PUSH
38153: LD_INT 4
38155: PLUS
38156: PUSH
38157: LD_INT 5
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: LIST
38164: PUSH
38165: LD_VAR 0 1
38169: PUSH
38170: LD_INT 4
38172: MINUS
38173: PUSH
38174: LD_VAR 0 2
38178: PUSH
38179: LD_INT 1
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: PUSH
38187: LD_VAR 0 1
38191: PUSH
38192: LD_VAR 0 2
38196: PUSH
38197: LD_INT 4
38199: MINUS
38200: PUSH
38201: LD_INT 3
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: PUSH
38209: LD_VAR 0 1
38213: PUSH
38214: LD_INT 3
38216: MINUS
38217: PUSH
38218: LD_VAR 0 2
38222: PUSH
38223: LD_INT 3
38225: MINUS
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: LIST
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
// end ; 4 :
38242: GO 38523
38244: LD_INT 4
38246: DOUBLE
38247: EQUAL
38248: IFTRUE 38252
38250: GO 38385
38252: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
38253: LD_ADDR_VAR 0 5
38257: PUSH
38258: LD_VAR 0 1
38262: PUSH
38263: LD_VAR 0 2
38267: PUSH
38268: LD_INT 4
38270: PLUS
38271: PUSH
38272: LD_INT 0
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: PUSH
38280: LD_VAR 0 1
38284: PUSH
38285: LD_INT 3
38287: PLUS
38288: PUSH
38289: LD_VAR 0 2
38293: PUSH
38294: LD_INT 3
38296: PLUS
38297: PUSH
38298: LD_INT 5
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: PUSH
38306: LD_VAR 0 1
38310: PUSH
38311: LD_INT 4
38313: PLUS
38314: PUSH
38315: LD_VAR 0 2
38319: PUSH
38320: LD_INT 4
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: LIST
38327: PUSH
38328: LD_VAR 0 1
38332: PUSH
38333: LD_VAR 0 2
38337: PUSH
38338: LD_INT 3
38340: MINUS
38341: PUSH
38342: LD_INT 3
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: PUSH
38350: LD_VAR 0 1
38354: PUSH
38355: LD_INT 4
38357: MINUS
38358: PUSH
38359: LD_VAR 0 2
38363: PUSH
38364: LD_INT 4
38366: MINUS
38367: PUSH
38368: LD_INT 2
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
// end ; 5 :
38383: GO 38523
38385: LD_INT 5
38387: DOUBLE
38388: EQUAL
38389: IFTRUE 38393
38391: GO 38522
38393: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
38394: LD_ADDR_VAR 0 5
38398: PUSH
38399: LD_VAR 0 1
38403: PUSH
38404: LD_INT 4
38406: MINUS
38407: PUSH
38408: LD_VAR 0 2
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: PUSH
38421: LD_VAR 0 1
38425: PUSH
38426: LD_VAR 0 2
38430: PUSH
38431: LD_INT 4
38433: MINUS
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: PUSH
38443: LD_VAR 0 1
38447: PUSH
38448: LD_INT 4
38450: PLUS
38451: PUSH
38452: LD_VAR 0 2
38456: PUSH
38457: LD_INT 4
38459: PLUS
38460: PUSH
38461: LD_INT 5
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: PUSH
38469: LD_VAR 0 1
38473: PUSH
38474: LD_INT 3
38476: PLUS
38477: PUSH
38478: LD_VAR 0 2
38482: PUSH
38483: LD_INT 4
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: PUSH
38491: LD_VAR 0 1
38495: PUSH
38496: LD_VAR 0 2
38500: PUSH
38501: LD_INT 3
38503: PLUS
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// end ; end ;
38520: GO 38523
38522: POP
// result := list ;
38523: LD_ADDR_VAR 0 4
38527: PUSH
38528: LD_VAR 0 5
38532: ST_TO_ADDR
// end ;
38533: LD_VAR 0 4
38537: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
38538: LD_INT 0
38540: PPUSH
38541: PPUSH
38542: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
38543: LD_VAR 0 1
38547: NOT
38548: PUSH
38549: LD_VAR 0 2
38553: PUSH
38554: LD_INT 1
38556: PUSH
38557: LD_INT 2
38559: PUSH
38560: LD_INT 3
38562: PUSH
38563: LD_INT 4
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: IN
38572: NOT
38573: OR
38574: IFFALSE 38578
// exit ;
38576: GO 38670
// tmp := [ ] ;
38578: LD_ADDR_VAR 0 5
38582: PUSH
38583: EMPTY
38584: ST_TO_ADDR
// for i in units do
38585: LD_ADDR_VAR 0 4
38589: PUSH
38590: LD_VAR 0 1
38594: PUSH
38595: FOR_IN
38596: IFFALSE 38639
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
38598: LD_ADDR_VAR 0 5
38602: PUSH
38603: LD_VAR 0 5
38607: PPUSH
38608: LD_VAR 0 5
38612: PUSH
38613: LD_INT 1
38615: PLUS
38616: PPUSH
38617: LD_VAR 0 4
38621: PPUSH
38622: LD_VAR 0 2
38626: PPUSH
38627: CALL_OW 259
38631: PPUSH
38632: CALL_OW 2
38636: ST_TO_ADDR
38637: GO 38595
38639: POP
38640: POP
// if not tmp then
38641: LD_VAR 0 5
38645: NOT
38646: IFFALSE 38650
// exit ;
38648: GO 38670
// result := SortListByListDesc ( units , tmp ) ;
38650: LD_ADDR_VAR 0 3
38654: PUSH
38655: LD_VAR 0 1
38659: PPUSH
38660: LD_VAR 0 5
38664: PPUSH
38665: CALL_OW 77
38669: ST_TO_ADDR
// end ;
38670: LD_VAR 0 3
38674: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
38675: LD_INT 0
38677: PPUSH
38678: PPUSH
38679: PPUSH
// result := false ;
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: LD_INT 0
38687: ST_TO_ADDR
// x := GetX ( building ) ;
38688: LD_ADDR_VAR 0 4
38692: PUSH
38693: LD_VAR 0 2
38697: PPUSH
38698: CALL_OW 250
38702: ST_TO_ADDR
// y := GetY ( building ) ;
38703: LD_ADDR_VAR 0 5
38707: PUSH
38708: LD_VAR 0 2
38712: PPUSH
38713: CALL_OW 251
38717: ST_TO_ADDR
// if not building or not x or not y then
38718: LD_VAR 0 2
38722: NOT
38723: PUSH
38724: LD_VAR 0 4
38728: NOT
38729: OR
38730: PUSH
38731: LD_VAR 0 5
38735: NOT
38736: OR
38737: IFFALSE 38741
// exit ;
38739: GO 38833
// if GetTaskList ( unit ) then
38741: LD_VAR 0 1
38745: PPUSH
38746: CALL_OW 437
38750: IFFALSE 38833
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38752: LD_STRING e
38754: PUSH
38755: LD_VAR 0 1
38759: PPUSH
38760: CALL_OW 437
38764: PUSH
38765: LD_INT 1
38767: ARRAY
38768: PUSH
38769: LD_INT 1
38771: ARRAY
38772: EQUAL
38773: PUSH
38774: LD_VAR 0 4
38778: PUSH
38779: LD_VAR 0 1
38783: PPUSH
38784: CALL_OW 437
38788: PUSH
38789: LD_INT 1
38791: ARRAY
38792: PUSH
38793: LD_INT 2
38795: ARRAY
38796: EQUAL
38797: AND
38798: PUSH
38799: LD_VAR 0 5
38803: PUSH
38804: LD_VAR 0 1
38808: PPUSH
38809: CALL_OW 437
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: PUSH
38818: LD_INT 3
38820: ARRAY
38821: EQUAL
38822: AND
38823: IFFALSE 38833
// result := true end ;
38825: LD_ADDR_VAR 0 3
38829: PUSH
38830: LD_INT 1
38832: ST_TO_ADDR
// end ;
38833: LD_VAR 0 3
38837: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
38838: LD_INT 0
38840: PPUSH
// result := false ;
38841: LD_ADDR_VAR 0 4
38845: PUSH
38846: LD_INT 0
38848: ST_TO_ADDR
// if GetTaskList ( unit ) then
38849: LD_VAR 0 1
38853: PPUSH
38854: CALL_OW 437
38858: IFFALSE 38941
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
38860: LD_STRING M
38862: PUSH
38863: LD_VAR 0 1
38867: PPUSH
38868: CALL_OW 437
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PUSH
38877: LD_INT 1
38879: ARRAY
38880: EQUAL
38881: PUSH
38882: LD_VAR 0 2
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: CALL_OW 437
38896: PUSH
38897: LD_INT 1
38899: ARRAY
38900: PUSH
38901: LD_INT 2
38903: ARRAY
38904: EQUAL
38905: AND
38906: PUSH
38907: LD_VAR 0 3
38911: PUSH
38912: LD_VAR 0 1
38916: PPUSH
38917: CALL_OW 437
38921: PUSH
38922: LD_INT 1
38924: ARRAY
38925: PUSH
38926: LD_INT 3
38928: ARRAY
38929: EQUAL
38930: AND
38931: IFFALSE 38941
// result := true ;
38933: LD_ADDR_VAR 0 4
38937: PUSH
38938: LD_INT 1
38940: ST_TO_ADDR
// end ; end ;
38941: LD_VAR 0 4
38945: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
38946: LD_INT 0
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
// if not unit or not area then
38952: LD_VAR 0 1
38956: NOT
38957: PUSH
38958: LD_VAR 0 2
38962: NOT
38963: OR
38964: IFFALSE 38968
// exit ;
38966: GO 39132
// tmp := AreaToList ( area , i ) ;
38968: LD_ADDR_VAR 0 6
38972: PUSH
38973: LD_VAR 0 2
38977: PPUSH
38978: LD_VAR 0 5
38982: PPUSH
38983: CALL_OW 517
38987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
38988: LD_ADDR_VAR 0 5
38992: PUSH
38993: DOUBLE
38994: LD_INT 1
38996: DEC
38997: ST_TO_ADDR
38998: LD_VAR 0 6
39002: PUSH
39003: LD_INT 1
39005: ARRAY
39006: PUSH
39007: FOR_TO
39008: IFFALSE 39130
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
39010: LD_ADDR_VAR 0 7
39014: PUSH
39015: LD_VAR 0 6
39019: PUSH
39020: LD_INT 1
39022: ARRAY
39023: PUSH
39024: LD_VAR 0 5
39028: ARRAY
39029: PUSH
39030: LD_VAR 0 6
39034: PUSH
39035: LD_INT 2
39037: ARRAY
39038: PUSH
39039: LD_VAR 0 5
39043: ARRAY
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
39049: LD_VAR 0 7
39053: PUSH
39054: LD_INT 1
39056: ARRAY
39057: PPUSH
39058: LD_VAR 0 7
39062: PUSH
39063: LD_INT 2
39065: ARRAY
39066: PPUSH
39067: CALL_OW 428
39071: PUSH
39072: LD_INT 0
39074: EQUAL
39075: IFFALSE 39128
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
39077: LD_VAR 0 1
39081: PPUSH
39082: LD_VAR 0 7
39086: PUSH
39087: LD_INT 1
39089: ARRAY
39090: PPUSH
39091: LD_VAR 0 7
39095: PUSH
39096: LD_INT 2
39098: ARRAY
39099: PPUSH
39100: LD_VAR 0 3
39104: PPUSH
39105: CALL_OW 48
// result := IsPlaced ( unit ) ;
39109: LD_ADDR_VAR 0 4
39113: PUSH
39114: LD_VAR 0 1
39118: PPUSH
39119: CALL_OW 305
39123: ST_TO_ADDR
// exit ;
39124: POP
39125: POP
39126: GO 39132
// end ; end ;
39128: GO 39007
39130: POP
39131: POP
// end ;
39132: LD_VAR 0 4
39136: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
39137: LD_INT 0
39139: PPUSH
39140: PPUSH
39141: PPUSH
// if not side or side > 8 then
39142: LD_VAR 0 1
39146: NOT
39147: PUSH
39148: LD_VAR 0 1
39152: PUSH
39153: LD_INT 8
39155: GREATER
39156: OR
39157: IFFALSE 39161
// exit ;
39159: GO 39348
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
39161: LD_ADDR_VAR 0 4
39165: PUSH
39166: LD_INT 22
39168: PUSH
39169: LD_VAR 0 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 21
39180: PUSH
39181: LD_INT 3
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PPUSH
39192: CALL_OW 69
39196: ST_TO_ADDR
// if not tmp then
39197: LD_VAR 0 4
39201: NOT
39202: IFFALSE 39206
// exit ;
39204: GO 39348
// enable_addtolog := true ;
39206: LD_ADDR_OWVAR 81
39210: PUSH
39211: LD_INT 1
39213: ST_TO_ADDR
// AddToLog ( [ ) ;
39214: LD_STRING [
39216: PPUSH
39217: CALL_OW 561
// for i in tmp do
39221: LD_ADDR_VAR 0 3
39225: PUSH
39226: LD_VAR 0 4
39230: PUSH
39231: FOR_IN
39232: IFFALSE 39339
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
39234: LD_STRING [
39236: PUSH
39237: LD_VAR 0 3
39241: PPUSH
39242: CALL_OW 266
39246: STR
39247: PUSH
39248: LD_STRING , 
39250: STR
39251: PUSH
39252: LD_VAR 0 3
39256: PPUSH
39257: CALL_OW 250
39261: STR
39262: PUSH
39263: LD_STRING , 
39265: STR
39266: PUSH
39267: LD_VAR 0 3
39271: PPUSH
39272: CALL_OW 251
39276: STR
39277: PUSH
39278: LD_STRING , 
39280: STR
39281: PUSH
39282: LD_VAR 0 3
39286: PPUSH
39287: CALL_OW 254
39291: STR
39292: PUSH
39293: LD_STRING , 
39295: STR
39296: PUSH
39297: LD_VAR 0 3
39301: PPUSH
39302: LD_INT 1
39304: PPUSH
39305: CALL_OW 268
39309: STR
39310: PUSH
39311: LD_STRING , 
39313: STR
39314: PUSH
39315: LD_VAR 0 3
39319: PPUSH
39320: LD_INT 2
39322: PPUSH
39323: CALL_OW 268
39327: STR
39328: PUSH
39329: LD_STRING ],
39331: STR
39332: PPUSH
39333: CALL_OW 561
// end ;
39337: GO 39231
39339: POP
39340: POP
// AddToLog ( ]; ) ;
39341: LD_STRING ];
39343: PPUSH
39344: CALL_OW 561
// end ;
39348: LD_VAR 0 2
39352: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
39353: LD_INT 0
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
// if not area or not rate or not max then
39360: LD_VAR 0 1
39364: NOT
39365: PUSH
39366: LD_VAR 0 2
39370: NOT
39371: OR
39372: PUSH
39373: LD_VAR 0 4
39377: NOT
39378: OR
39379: IFFALSE 39383
// exit ;
39381: GO 39572
// while 1 do
39383: LD_INT 1
39385: IFFALSE 39572
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
39387: LD_ADDR_VAR 0 9
39391: PUSH
39392: LD_VAR 0 1
39396: PPUSH
39397: LD_INT 1
39399: PPUSH
39400: CALL_OW 287
39404: PUSH
39405: LD_INT 10
39407: MUL
39408: ST_TO_ADDR
// r := rate / 10 ;
39409: LD_ADDR_VAR 0 7
39413: PUSH
39414: LD_VAR 0 2
39418: PUSH
39419: LD_INT 10
39421: DIVREAL
39422: ST_TO_ADDR
// time := 1 1$00 ;
39423: LD_ADDR_VAR 0 8
39427: PUSH
39428: LD_INT 2100
39430: ST_TO_ADDR
// if amount < min then
39431: LD_VAR 0 9
39435: PUSH
39436: LD_VAR 0 3
39440: LESS
39441: IFFALSE 39459
// r := r * 2 else
39443: LD_ADDR_VAR 0 7
39447: PUSH
39448: LD_VAR 0 7
39452: PUSH
39453: LD_INT 2
39455: MUL
39456: ST_TO_ADDR
39457: GO 39485
// if amount > max then
39459: LD_VAR 0 9
39463: PUSH
39464: LD_VAR 0 4
39468: GREATER
39469: IFFALSE 39485
// r := r / 2 ;
39471: LD_ADDR_VAR 0 7
39475: PUSH
39476: LD_VAR 0 7
39480: PUSH
39481: LD_INT 2
39483: DIVREAL
39484: ST_TO_ADDR
// time := time / r ;
39485: LD_ADDR_VAR 0 8
39489: PUSH
39490: LD_VAR 0 8
39494: PUSH
39495: LD_VAR 0 7
39499: DIVREAL
39500: ST_TO_ADDR
// if time < 0 then
39501: LD_VAR 0 8
39505: PUSH
39506: LD_INT 0
39508: LESS
39509: IFFALSE 39526
// time := time * - 1 ;
39511: LD_ADDR_VAR 0 8
39515: PUSH
39516: LD_VAR 0 8
39520: PUSH
39521: LD_INT 1
39523: NEG
39524: MUL
39525: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
39526: LD_VAR 0 8
39530: PUSH
39531: LD_INT 35
39533: PPUSH
39534: LD_INT 875
39536: PPUSH
39537: CALL_OW 12
39541: PLUS
39542: PPUSH
39543: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
39547: LD_INT 1
39549: PPUSH
39550: LD_INT 5
39552: PPUSH
39553: CALL_OW 12
39557: PPUSH
39558: LD_VAR 0 1
39562: PPUSH
39563: LD_INT 1
39565: PPUSH
39566: CALL_OW 55
// end ;
39570: GO 39383
// end ;
39572: LD_VAR 0 5
39576: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
39577: LD_INT 0
39579: PPUSH
39580: PPUSH
39581: PPUSH
39582: PPUSH
39583: PPUSH
39584: PPUSH
39585: PPUSH
39586: PPUSH
// if not turrets or not factories then
39587: LD_VAR 0 1
39591: NOT
39592: PUSH
39593: LD_VAR 0 2
39597: NOT
39598: OR
39599: IFFALSE 39603
// exit ;
39601: GO 39910
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
39603: LD_ADDR_VAR 0 10
39607: PUSH
39608: LD_INT 5
39610: PUSH
39611: LD_INT 6
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: LD_INT 4
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 3
39630: PUSH
39631: LD_INT 5
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 24
39645: PUSH
39646: LD_INT 25
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 23
39655: PUSH
39656: LD_INT 27
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 42
39669: PUSH
39670: LD_INT 43
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 44
39679: PUSH
39680: LD_INT 46
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 45
39689: PUSH
39690: LD_INT 47
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: ST_TO_ADDR
// result := [ ] ;
39707: LD_ADDR_VAR 0 3
39711: PUSH
39712: EMPTY
39713: ST_TO_ADDR
// for i in turrets do
39714: LD_ADDR_VAR 0 4
39718: PUSH
39719: LD_VAR 0 1
39723: PUSH
39724: FOR_IN
39725: IFFALSE 39908
// begin nat := GetNation ( i ) ;
39727: LD_ADDR_VAR 0 7
39731: PUSH
39732: LD_VAR 0 4
39736: PPUSH
39737: CALL_OW 248
39741: ST_TO_ADDR
// weapon := 0 ;
39742: LD_ADDR_VAR 0 8
39746: PUSH
39747: LD_INT 0
39749: ST_TO_ADDR
// if not nat then
39750: LD_VAR 0 7
39754: NOT
39755: IFFALSE 39759
// continue ;
39757: GO 39724
// for j in list [ nat ] do
39759: LD_ADDR_VAR 0 5
39763: PUSH
39764: LD_VAR 0 10
39768: PUSH
39769: LD_VAR 0 7
39773: ARRAY
39774: PUSH
39775: FOR_IN
39776: IFFALSE 39817
// if GetBWeapon ( i ) = j [ 1 ] then
39778: LD_VAR 0 4
39782: PPUSH
39783: CALL_OW 269
39787: PUSH
39788: LD_VAR 0 5
39792: PUSH
39793: LD_INT 1
39795: ARRAY
39796: EQUAL
39797: IFFALSE 39815
// begin weapon := j [ 2 ] ;
39799: LD_ADDR_VAR 0 8
39803: PUSH
39804: LD_VAR 0 5
39808: PUSH
39809: LD_INT 2
39811: ARRAY
39812: ST_TO_ADDR
// break ;
39813: GO 39817
// end ;
39815: GO 39775
39817: POP
39818: POP
// if not weapon then
39819: LD_VAR 0 8
39823: NOT
39824: IFFALSE 39828
// continue ;
39826: GO 39724
// for k in factories do
39828: LD_ADDR_VAR 0 6
39832: PUSH
39833: LD_VAR 0 2
39837: PUSH
39838: FOR_IN
39839: IFFALSE 39904
// begin weapons := AvailableWeaponList ( k ) ;
39841: LD_ADDR_VAR 0 9
39845: PUSH
39846: LD_VAR 0 6
39850: PPUSH
39851: CALL_OW 478
39855: ST_TO_ADDR
// if not weapons then
39856: LD_VAR 0 9
39860: NOT
39861: IFFALSE 39865
// continue ;
39863: GO 39838
// if weapon in weapons then
39865: LD_VAR 0 8
39869: PUSH
39870: LD_VAR 0 9
39874: IN
39875: IFFALSE 39902
// begin result := [ i , weapon ] ;
39877: LD_ADDR_VAR 0 3
39881: PUSH
39882: LD_VAR 0 4
39886: PUSH
39887: LD_VAR 0 8
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: ST_TO_ADDR
// exit ;
39896: POP
39897: POP
39898: POP
39899: POP
39900: GO 39910
// end ; end ;
39902: GO 39838
39904: POP
39905: POP
// end ;
39906: GO 39724
39908: POP
39909: POP
// end ;
39910: LD_VAR 0 3
39914: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
39915: LD_INT 0
39917: PPUSH
// if not side or side > 8 then
39918: LD_VAR 0 3
39922: NOT
39923: PUSH
39924: LD_VAR 0 3
39928: PUSH
39929: LD_INT 8
39931: GREATER
39932: OR
39933: IFFALSE 39937
// exit ;
39935: GO 39996
// if not range then
39937: LD_VAR 0 4
39941: NOT
39942: IFFALSE 39953
// range := - 12 ;
39944: LD_ADDR_VAR 0 4
39948: PUSH
39949: LD_INT 12
39951: NEG
39952: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
39953: LD_VAR 0 1
39957: PPUSH
39958: LD_VAR 0 2
39962: PPUSH
39963: LD_VAR 0 3
39967: PPUSH
39968: LD_VAR 0 4
39972: PPUSH
39973: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
39977: LD_VAR 0 1
39981: PPUSH
39982: LD_VAR 0 2
39986: PPUSH
39987: LD_VAR 0 3
39991: PPUSH
39992: CALL_OW 331
// end ;
39996: LD_VAR 0 5
40000: RET
// export function Video ( mode ) ; begin
40001: LD_INT 0
40003: PPUSH
// ingame_video = mode ;
40004: LD_ADDR_OWVAR 52
40008: PUSH
40009: LD_VAR 0 1
40013: ST_TO_ADDR
// interface_hidden = mode ;
40014: LD_ADDR_OWVAR 54
40018: PUSH
40019: LD_VAR 0 1
40023: ST_TO_ADDR
// end ;
40024: LD_VAR 0 2
40028: RET
// export function Join ( array , element ) ; begin
40029: LD_INT 0
40031: PPUSH
// result := Replace ( array , array + 1 , element ) ;
40032: LD_ADDR_VAR 0 3
40036: PUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: LD_VAR 0 1
40046: PUSH
40047: LD_INT 1
40049: PLUS
40050: PPUSH
40051: LD_VAR 0 2
40055: PPUSH
40056: CALL_OW 1
40060: ST_TO_ADDR
// end ;
40061: LD_VAR 0 3
40065: RET
// export function JoinUnion ( array , element ) ; begin
40066: LD_INT 0
40068: PPUSH
// result := array union element ;
40069: LD_ADDR_VAR 0 3
40073: PUSH
40074: LD_VAR 0 1
40078: PUSH
40079: LD_VAR 0 2
40083: UNION
40084: ST_TO_ADDR
// end ;
40085: LD_VAR 0 3
40089: RET
// export function GetBehemoths ( side ) ; begin
40090: LD_INT 0
40092: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
40093: LD_ADDR_VAR 0 2
40097: PUSH
40098: LD_INT 22
40100: PUSH
40101: LD_VAR 0 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 31
40112: PUSH
40113: LD_INT 25
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PPUSH
40124: CALL_OW 69
40128: ST_TO_ADDR
// end ;
40129: LD_VAR 0 2
40133: RET
// export function Shuffle ( array ) ; var i , index ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
40138: PPUSH
// result := [ ] ;
40139: LD_ADDR_VAR 0 2
40143: PUSH
40144: EMPTY
40145: ST_TO_ADDR
// if not array then
40146: LD_VAR 0 1
40150: NOT
40151: IFFALSE 40155
// exit ;
40153: GO 40254
// Randomize ;
40155: CALL_OW 10
// for i = array downto 1 do
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: DOUBLE
40165: LD_VAR 0 1
40169: INC
40170: ST_TO_ADDR
40171: LD_INT 1
40173: PUSH
40174: FOR_DOWNTO
40175: IFFALSE 40252
// begin index := rand ( 1 , array ) ;
40177: LD_ADDR_VAR 0 4
40181: PUSH
40182: LD_INT 1
40184: PPUSH
40185: LD_VAR 0 1
40189: PPUSH
40190: CALL_OW 12
40194: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
40195: LD_ADDR_VAR 0 2
40199: PUSH
40200: LD_VAR 0 2
40204: PPUSH
40205: LD_VAR 0 2
40209: PUSH
40210: LD_INT 1
40212: PLUS
40213: PPUSH
40214: LD_VAR 0 1
40218: PUSH
40219: LD_VAR 0 4
40223: ARRAY
40224: PPUSH
40225: CALL_OW 2
40229: ST_TO_ADDR
// array := Delete ( array , index ) ;
40230: LD_ADDR_VAR 0 1
40234: PUSH
40235: LD_VAR 0 1
40239: PPUSH
40240: LD_VAR 0 4
40244: PPUSH
40245: CALL_OW 3
40249: ST_TO_ADDR
// end ;
40250: GO 40174
40252: POP
40253: POP
// end ;
40254: LD_VAR 0 2
40258: RET
// export function GetBaseMaterials ( base ) ; begin
40259: LD_INT 0
40261: PPUSH
// result := [ 0 , 0 , 0 ] ;
40262: LD_ADDR_VAR 0 2
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: ST_TO_ADDR
// if not base then
40281: LD_VAR 0 1
40285: NOT
40286: IFFALSE 40290
// exit ;
40288: GO 40339
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
40290: LD_ADDR_VAR 0 2
40294: PUSH
40295: LD_VAR 0 1
40299: PPUSH
40300: LD_INT 1
40302: PPUSH
40303: CALL_OW 275
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: LD_INT 2
40315: PPUSH
40316: CALL_OW 275
40320: PUSH
40321: LD_VAR 0 1
40325: PPUSH
40326: LD_INT 3
40328: PPUSH
40329: CALL_OW 275
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: LIST
40338: ST_TO_ADDR
// end ;
40339: LD_VAR 0 2
40343: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
40344: LD_INT 0
40346: PPUSH
40347: PPUSH
// result := array ;
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: LD_VAR 0 1
40357: ST_TO_ADDR
// if size >= result then
40358: LD_VAR 0 2
40362: PUSH
40363: LD_VAR 0 3
40367: GREATEREQUAL
40368: IFFALSE 40372
// exit ;
40370: GO 40422
// if size then
40372: LD_VAR 0 2
40376: IFFALSE 40422
// for i := array downto size do
40378: LD_ADDR_VAR 0 4
40382: PUSH
40383: DOUBLE
40384: LD_VAR 0 1
40388: INC
40389: ST_TO_ADDR
40390: LD_VAR 0 2
40394: PUSH
40395: FOR_DOWNTO
40396: IFFALSE 40420
// result := Delete ( result , result ) ;
40398: LD_ADDR_VAR 0 3
40402: PUSH
40403: LD_VAR 0 3
40407: PPUSH
40408: LD_VAR 0 3
40412: PPUSH
40413: CALL_OW 3
40417: ST_TO_ADDR
40418: GO 40395
40420: POP
40421: POP
// end ;
40422: LD_VAR 0 3
40426: RET
// export function ComExit ( unit ) ; var tmp ; begin
40427: LD_INT 0
40429: PPUSH
40430: PPUSH
// if not IsInUnit ( unit ) then
40431: LD_VAR 0 1
40435: PPUSH
40436: CALL_OW 310
40440: NOT
40441: IFFALSE 40445
// exit ;
40443: GO 40505
// tmp := IsInUnit ( unit ) ;
40445: LD_ADDR_VAR 0 3
40449: PUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 310
40459: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
40460: LD_VAR 0 3
40464: PPUSH
40465: CALL_OW 247
40469: PUSH
40470: LD_INT 2
40472: EQUAL
40473: IFFALSE 40486
// ComExitVehicle ( unit ) else
40475: LD_VAR 0 1
40479: PPUSH
40480: CALL_OW 121
40484: GO 40495
// ComExitBuilding ( unit ) ;
40486: LD_VAR 0 1
40490: PPUSH
40491: CALL_OW 122
// result := tmp ;
40495: LD_ADDR_VAR 0 2
40499: PUSH
40500: LD_VAR 0 3
40504: ST_TO_ADDR
// end ;
40505: LD_VAR 0 2
40509: RET
// export function ComExitAll ( units ) ; var i ; begin
40510: LD_INT 0
40512: PPUSH
40513: PPUSH
// if not units then
40514: LD_VAR 0 1
40518: NOT
40519: IFFALSE 40523
// exit ;
40521: GO 40549
// for i in units do
40523: LD_ADDR_VAR 0 3
40527: PUSH
40528: LD_VAR 0 1
40532: PUSH
40533: FOR_IN
40534: IFFALSE 40547
// ComExit ( i ) ;
40536: LD_VAR 0 3
40540: PPUSH
40541: CALL 40427 0 1
40545: GO 40533
40547: POP
40548: POP
// end ;
40549: LD_VAR 0 2
40553: RET
// export function ResetHc ; begin
40554: LD_INT 0
40556: PPUSH
// InitHc ;
40557: CALL_OW 19
// hc_importance := 0 ;
40561: LD_ADDR_OWVAR 32
40565: PUSH
40566: LD_INT 0
40568: ST_TO_ADDR
// end ;
40569: LD_VAR 0 1
40573: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
40574: LD_INT 0
40576: PPUSH
40577: PPUSH
40578: PPUSH
// _x := ( x1 + x2 ) div 2 ;
40579: LD_ADDR_VAR 0 6
40583: PUSH
40584: LD_VAR 0 1
40588: PUSH
40589: LD_VAR 0 3
40593: PLUS
40594: PUSH
40595: LD_INT 2
40597: DIV
40598: ST_TO_ADDR
// if _x < 0 then
40599: LD_VAR 0 6
40603: PUSH
40604: LD_INT 0
40606: LESS
40607: IFFALSE 40624
// _x := _x * - 1 ;
40609: LD_ADDR_VAR 0 6
40613: PUSH
40614: LD_VAR 0 6
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: MUL
40623: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
40624: LD_ADDR_VAR 0 7
40628: PUSH
40629: LD_VAR 0 2
40633: PUSH
40634: LD_VAR 0 4
40638: PLUS
40639: PUSH
40640: LD_INT 2
40642: DIV
40643: ST_TO_ADDR
// if _y < 0 then
40644: LD_VAR 0 7
40648: PUSH
40649: LD_INT 0
40651: LESS
40652: IFFALSE 40669
// _y := _y * - 1 ;
40654: LD_ADDR_VAR 0 7
40658: PUSH
40659: LD_VAR 0 7
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: MUL
40668: ST_TO_ADDR
// result := [ _x , _y ] ;
40669: LD_ADDR_VAR 0 5
40673: PUSH
40674: LD_VAR 0 6
40678: PUSH
40679: LD_VAR 0 7
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: ST_TO_ADDR
// end ;
40688: LD_VAR 0 5
40692: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
40693: LD_INT 0
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
// task := GetTaskList ( unit ) ;
40699: LD_ADDR_VAR 0 7
40703: PUSH
40704: LD_VAR 0 1
40708: PPUSH
40709: CALL_OW 437
40713: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
40714: LD_VAR 0 7
40718: NOT
40719: PUSH
40720: LD_VAR 0 1
40724: PPUSH
40725: LD_VAR 0 2
40729: PPUSH
40730: CALL_OW 308
40734: NOT
40735: AND
40736: IFFALSE 40740
// exit ;
40738: GO 40858
// if IsInArea ( unit , area ) then
40740: LD_VAR 0 1
40744: PPUSH
40745: LD_VAR 0 2
40749: PPUSH
40750: CALL_OW 308
40754: IFFALSE 40772
// begin ComMoveToArea ( unit , goAway ) ;
40756: LD_VAR 0 1
40760: PPUSH
40761: LD_VAR 0 3
40765: PPUSH
40766: CALL_OW 113
// exit ;
40770: GO 40858
// end ; if task [ 1 ] [ 1 ] <> M then
40772: LD_VAR 0 7
40776: PUSH
40777: LD_INT 1
40779: ARRAY
40780: PUSH
40781: LD_INT 1
40783: ARRAY
40784: PUSH
40785: LD_STRING M
40787: NONEQUAL
40788: IFFALSE 40792
// exit ;
40790: GO 40858
// x := task [ 1 ] [ 2 ] ;
40792: LD_ADDR_VAR 0 5
40796: PUSH
40797: LD_VAR 0 7
40801: PUSH
40802: LD_INT 1
40804: ARRAY
40805: PUSH
40806: LD_INT 2
40808: ARRAY
40809: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
40810: LD_ADDR_VAR 0 6
40814: PUSH
40815: LD_VAR 0 7
40819: PUSH
40820: LD_INT 1
40822: ARRAY
40823: PUSH
40824: LD_INT 3
40826: ARRAY
40827: ST_TO_ADDR
// if InArea ( x , y , area ) then
40828: LD_VAR 0 5
40832: PPUSH
40833: LD_VAR 0 6
40837: PPUSH
40838: LD_VAR 0 2
40842: PPUSH
40843: CALL_OW 309
40847: IFFALSE 40858
// ComStop ( unit ) ;
40849: LD_VAR 0 1
40853: PPUSH
40854: CALL_OW 141
// end ;
40858: LD_VAR 0 4
40862: RET
// export function Abs ( value ) ; begin
40863: LD_INT 0
40865: PPUSH
// result := value ;
40866: LD_ADDR_VAR 0 2
40870: PUSH
40871: LD_VAR 0 1
40875: ST_TO_ADDR
// if value < 0 then
40876: LD_VAR 0 1
40880: PUSH
40881: LD_INT 0
40883: LESS
40884: IFFALSE 40901
// result := value * - 1 ;
40886: LD_ADDR_VAR 0 2
40890: PUSH
40891: LD_VAR 0 1
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: MUL
40900: ST_TO_ADDR
// end ;
40901: LD_VAR 0 2
40905: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
40906: LD_INT 0
40908: PPUSH
40909: PPUSH
40910: PPUSH
40911: PPUSH
40912: PPUSH
40913: PPUSH
40914: PPUSH
40915: PPUSH
// if not unit or not building then
40916: LD_VAR 0 1
40920: NOT
40921: PUSH
40922: LD_VAR 0 2
40926: NOT
40927: OR
40928: IFFALSE 40932
// exit ;
40930: GO 41158
// x := GetX ( building ) ;
40932: LD_ADDR_VAR 0 4
40936: PUSH
40937: LD_VAR 0 2
40941: PPUSH
40942: CALL_OW 250
40946: ST_TO_ADDR
// y := GetY ( building ) ;
40947: LD_ADDR_VAR 0 6
40951: PUSH
40952: LD_VAR 0 2
40956: PPUSH
40957: CALL_OW 251
40961: ST_TO_ADDR
// d := GetDir ( building ) ;
40962: LD_ADDR_VAR 0 8
40966: PUSH
40967: LD_VAR 0 2
40971: PPUSH
40972: CALL_OW 254
40976: ST_TO_ADDR
// r := 4 ;
40977: LD_ADDR_VAR 0 9
40981: PUSH
40982: LD_INT 4
40984: ST_TO_ADDR
// for i := 1 to 5 do
40985: LD_ADDR_VAR 0 10
40989: PUSH
40990: DOUBLE
40991: LD_INT 1
40993: DEC
40994: ST_TO_ADDR
40995: LD_INT 5
40997: PUSH
40998: FOR_TO
40999: IFFALSE 41156
// begin _x := ShiftX ( x , d , r + i ) ;
41001: LD_ADDR_VAR 0 5
41005: PUSH
41006: LD_VAR 0 4
41010: PPUSH
41011: LD_VAR 0 8
41015: PPUSH
41016: LD_VAR 0 9
41020: PUSH
41021: LD_VAR 0 10
41025: PLUS
41026: PPUSH
41027: CALL_OW 272
41031: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
41032: LD_ADDR_VAR 0 7
41036: PUSH
41037: LD_VAR 0 6
41041: PPUSH
41042: LD_VAR 0 8
41046: PPUSH
41047: LD_VAR 0 9
41051: PUSH
41052: LD_VAR 0 10
41056: PLUS
41057: PPUSH
41058: CALL_OW 273
41062: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
41063: LD_VAR 0 5
41067: PPUSH
41068: LD_VAR 0 7
41072: PPUSH
41073: CALL_OW 488
41077: PUSH
41078: LD_VAR 0 5
41082: PPUSH
41083: LD_VAR 0 7
41087: PPUSH
41088: CALL_OW 428
41092: PPUSH
41093: CALL_OW 247
41097: PUSH
41098: LD_INT 3
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: IN
41108: NOT
41109: AND
41110: IFFALSE 41154
// begin ComMoveXY ( unit , _x , _y ) ;
41112: LD_VAR 0 1
41116: PPUSH
41117: LD_VAR 0 5
41121: PPUSH
41122: LD_VAR 0 7
41126: PPUSH
41127: CALL_OW 111
// result := [ _x , _y ] ;
41131: LD_ADDR_VAR 0 3
41135: PUSH
41136: LD_VAR 0 5
41140: PUSH
41141: LD_VAR 0 7
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: ST_TO_ADDR
// exit ;
41150: POP
41151: POP
41152: GO 41158
// end ; end ;
41154: GO 40998
41156: POP
41157: POP
// end ;
41158: LD_VAR 0 3
41162: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
41163: LD_INT 0
41165: PPUSH
41166: PPUSH
41167: PPUSH
// result := 0 ;
41168: LD_ADDR_VAR 0 3
41172: PUSH
41173: LD_INT 0
41175: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
41176: LD_VAR 0 1
41180: PUSH
41181: LD_INT 0
41183: LESS
41184: PUSH
41185: LD_VAR 0 1
41189: PUSH
41190: LD_INT 8
41192: GREATER
41193: OR
41194: PUSH
41195: LD_VAR 0 2
41199: PUSH
41200: LD_INT 0
41202: LESS
41203: OR
41204: PUSH
41205: LD_VAR 0 2
41209: PUSH
41210: LD_INT 8
41212: GREATER
41213: OR
41214: IFFALSE 41218
// exit ;
41216: GO 41293
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
41218: LD_ADDR_VAR 0 4
41222: PUSH
41223: LD_INT 22
41225: PUSH
41226: LD_VAR 0 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PPUSH
41235: CALL_OW 69
41239: PUSH
41240: FOR_IN
41241: IFFALSE 41291
// begin un := UnitShoot ( i ) ;
41243: LD_ADDR_VAR 0 5
41247: PUSH
41248: LD_VAR 0 4
41252: PPUSH
41253: CALL_OW 504
41257: ST_TO_ADDR
// if GetSide ( un ) = side1 then
41258: LD_VAR 0 5
41262: PPUSH
41263: CALL_OW 255
41267: PUSH
41268: LD_VAR 0 1
41272: EQUAL
41273: IFFALSE 41289
// begin result := un ;
41275: LD_ADDR_VAR 0 3
41279: PUSH
41280: LD_VAR 0 5
41284: ST_TO_ADDR
// exit ;
41285: POP
41286: POP
41287: GO 41293
// end ; end ;
41289: GO 41240
41291: POP
41292: POP
// end ;
41293: LD_VAR 0 3
41297: RET
// export function GetCargoBay ( units ) ; begin
41298: LD_INT 0
41300: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
41301: LD_ADDR_VAR 0 2
41305: PUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 34
41316: PUSH
41317: LD_INT 12
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 34
41326: PUSH
41327: LD_INT 51
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 34
41336: PUSH
41337: LD_INT 32
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 34
41346: PUSH
41347: LD_EXP 22
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: PPUSH
41363: CALL_OW 72
41367: ST_TO_ADDR
// end ;
41368: LD_VAR 0 2
41372: RET
// export function Negate ( value ) ; begin
41373: LD_INT 0
41375: PPUSH
// result := not value ;
41376: LD_ADDR_VAR 0 2
41380: PUSH
41381: LD_VAR 0 1
41385: NOT
41386: ST_TO_ADDR
// end ;
41387: LD_VAR 0 2
41391: RET
// export function Inc ( value ) ; begin
41392: LD_INT 0
41394: PPUSH
// result := value + 1 ;
41395: LD_ADDR_VAR 0 2
41399: PUSH
41400: LD_VAR 0 1
41404: PUSH
41405: LD_INT 1
41407: PLUS
41408: ST_TO_ADDR
// end ;
41409: LD_VAR 0 2
41413: RET
// export function Dec ( value ) ; begin
41414: LD_INT 0
41416: PPUSH
// result := value - 1 ;
41417: LD_ADDR_VAR 0 2
41421: PUSH
41422: LD_VAR 0 1
41426: PUSH
41427: LD_INT 1
41429: MINUS
41430: ST_TO_ADDR
// end ;
41431: LD_VAR 0 2
41435: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
41436: LD_INT 0
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
41446: LD_VAR 0 1
41450: PPUSH
41451: LD_VAR 0 2
41455: PPUSH
41456: CALL_OW 488
41460: NOT
41461: PUSH
41462: LD_VAR 0 3
41466: PPUSH
41467: LD_VAR 0 4
41471: PPUSH
41472: CALL_OW 488
41476: NOT
41477: OR
41478: IFFALSE 41491
// begin result := - 1 ;
41480: LD_ADDR_VAR 0 5
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: ST_TO_ADDR
// exit ;
41489: GO 41726
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
41491: LD_ADDR_VAR 0 12
41495: PUSH
41496: LD_VAR 0 1
41500: PPUSH
41501: LD_VAR 0 2
41505: PPUSH
41506: LD_VAR 0 3
41510: PPUSH
41511: LD_VAR 0 4
41515: PPUSH
41516: CALL 40574 0 4
41520: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
41521: LD_ADDR_VAR 0 11
41525: PUSH
41526: LD_VAR 0 1
41530: PPUSH
41531: LD_VAR 0 2
41535: PPUSH
41536: LD_VAR 0 12
41540: PUSH
41541: LD_INT 1
41543: ARRAY
41544: PPUSH
41545: LD_VAR 0 12
41549: PUSH
41550: LD_INT 2
41552: ARRAY
41553: PPUSH
41554: CALL_OW 298
41558: ST_TO_ADDR
// distance := 9999 ;
41559: LD_ADDR_VAR 0 10
41563: PUSH
41564: LD_INT 9999
41566: ST_TO_ADDR
// for i := 0 to 5 do
41567: LD_ADDR_VAR 0 6
41571: PUSH
41572: DOUBLE
41573: LD_INT 0
41575: DEC
41576: ST_TO_ADDR
41577: LD_INT 5
41579: PUSH
41580: FOR_TO
41581: IFFALSE 41724
// begin _x := ShiftX ( x1 , i , centerDist ) ;
41583: LD_ADDR_VAR 0 7
41587: PUSH
41588: LD_VAR 0 1
41592: PPUSH
41593: LD_VAR 0 6
41597: PPUSH
41598: LD_VAR 0 11
41602: PPUSH
41603: CALL_OW 272
41607: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
41608: LD_ADDR_VAR 0 8
41612: PUSH
41613: LD_VAR 0 2
41617: PPUSH
41618: LD_VAR 0 6
41622: PPUSH
41623: LD_VAR 0 11
41627: PPUSH
41628: CALL_OW 273
41632: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41633: LD_VAR 0 7
41637: PPUSH
41638: LD_VAR 0 8
41642: PPUSH
41643: CALL_OW 488
41647: NOT
41648: IFFALSE 41652
// continue ;
41650: GO 41580
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
41652: LD_ADDR_VAR 0 9
41656: PUSH
41657: LD_VAR 0 12
41661: PUSH
41662: LD_INT 1
41664: ARRAY
41665: PPUSH
41666: LD_VAR 0 12
41670: PUSH
41671: LD_INT 2
41673: ARRAY
41674: PPUSH
41675: LD_VAR 0 7
41679: PPUSH
41680: LD_VAR 0 8
41684: PPUSH
41685: CALL_OW 298
41689: ST_TO_ADDR
// if tmp < distance then
41690: LD_VAR 0 9
41694: PUSH
41695: LD_VAR 0 10
41699: LESS
41700: IFFALSE 41722
// begin result := i ;
41702: LD_ADDR_VAR 0 5
41706: PUSH
41707: LD_VAR 0 6
41711: ST_TO_ADDR
// distance := tmp ;
41712: LD_ADDR_VAR 0 10
41716: PUSH
41717: LD_VAR 0 9
41721: ST_TO_ADDR
// end ; end ;
41722: GO 41580
41724: POP
41725: POP
// end ;
41726: LD_VAR 0 5
41730: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
// if not driver or not IsInUnit ( driver ) then
41735: LD_VAR 0 1
41739: NOT
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 310
41750: NOT
41751: OR
41752: IFFALSE 41756
// exit ;
41754: GO 41846
// vehicle := IsInUnit ( driver ) ;
41756: LD_ADDR_VAR 0 3
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 310
41770: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41771: LD_VAR 0 1
41775: PPUSH
41776: LD_STRING \
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: PUSH
41806: LD_STRING E
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_VAR 0 3
41819: PUSH
41820: LD_INT 0
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PPUSH
41842: CALL_OW 446
// end ;
41846: LD_VAR 0 2
41850: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
41851: LD_INT 0
41853: PPUSH
41854: PPUSH
// if not driver or not IsInUnit ( driver ) then
41855: LD_VAR 0 1
41859: NOT
41860: PUSH
41861: LD_VAR 0 1
41865: PPUSH
41866: CALL_OW 310
41870: NOT
41871: OR
41872: IFFALSE 41876
// exit ;
41874: GO 41966
// vehicle := IsInUnit ( driver ) ;
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_VAR 0 1
41885: PPUSH
41886: CALL_OW 310
41890: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
41891: LD_VAR 0 1
41895: PPUSH
41896: LD_STRING \
41898: PUSH
41899: LD_INT 0
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: PUSH
41926: LD_STRING E
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_VAR 0 3
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PPUSH
41962: CALL_OW 447
// end ;
41966: LD_VAR 0 2
41970: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
41971: LD_INT 0
41973: PPUSH
41974: PPUSH
41975: PPUSH
// tmp := [ ] ;
41976: LD_ADDR_VAR 0 5
41980: PUSH
41981: EMPTY
41982: ST_TO_ADDR
// for i in units do
41983: LD_ADDR_VAR 0 4
41987: PUSH
41988: LD_VAR 0 1
41992: PUSH
41993: FOR_IN
41994: IFFALSE 42032
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
41996: LD_ADDR_VAR 0 5
42000: PUSH
42001: LD_VAR 0 5
42005: PPUSH
42006: LD_VAR 0 5
42010: PUSH
42011: LD_INT 1
42013: PLUS
42014: PPUSH
42015: LD_VAR 0 4
42019: PPUSH
42020: CALL_OW 256
42024: PPUSH
42025: CALL_OW 2
42029: ST_TO_ADDR
42030: GO 41993
42032: POP
42033: POP
// if not tmp then
42034: LD_VAR 0 5
42038: NOT
42039: IFFALSE 42043
// exit ;
42041: GO 42091
// if asc then
42043: LD_VAR 0 2
42047: IFFALSE 42071
// result := SortListByListAsc ( units , tmp ) else
42049: LD_ADDR_VAR 0 3
42053: PUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: LD_VAR 0 5
42063: PPUSH
42064: CALL_OW 76
42068: ST_TO_ADDR
42069: GO 42091
// result := SortListByListDesc ( units , tmp ) ;
42071: LD_ADDR_VAR 0 3
42075: PUSH
42076: LD_VAR 0 1
42080: PPUSH
42081: LD_VAR 0 5
42085: PPUSH
42086: CALL_OW 77
42090: ST_TO_ADDR
// end ;
42091: LD_VAR 0 3
42095: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
42096: LD_INT 0
42098: PPUSH
42099: PPUSH
// task := GetTaskList ( mech ) ;
42100: LD_ADDR_VAR 0 4
42104: PUSH
42105: LD_VAR 0 1
42109: PPUSH
42110: CALL_OW 437
42114: ST_TO_ADDR
// if not task then
42115: LD_VAR 0 4
42119: NOT
42120: IFFALSE 42124
// exit ;
42122: GO 42166
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: LD_VAR 0 4
42133: PUSH
42134: LD_INT 1
42136: ARRAY
42137: PUSH
42138: LD_INT 1
42140: ARRAY
42141: PUSH
42142: LD_STRING r
42144: EQUAL
42145: PUSH
42146: LD_VAR 0 4
42150: PUSH
42151: LD_INT 1
42153: ARRAY
42154: PUSH
42155: LD_INT 4
42157: ARRAY
42158: PUSH
42159: LD_VAR 0 2
42163: EQUAL
42164: AND
42165: ST_TO_ADDR
// end ;
42166: LD_VAR 0 3
42170: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
42171: LD_INT 0
42173: PPUSH
// SetDir ( unit , d ) ;
42174: LD_VAR 0 1
42178: PPUSH
42179: LD_VAR 0 4
42183: PPUSH
42184: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
42188: LD_VAR 0 1
42192: PPUSH
42193: LD_VAR 0 2
42197: PPUSH
42198: LD_VAR 0 3
42202: PPUSH
42203: LD_VAR 0 5
42207: PPUSH
42208: CALL_OW 48
// end ;
42212: LD_VAR 0 6
42216: RET
// export function ToNaturalNumber ( number ) ; begin
42217: LD_INT 0
42219: PPUSH
// result := number div 1 ;
42220: LD_ADDR_VAR 0 2
42224: PUSH
42225: LD_VAR 0 1
42229: PUSH
42230: LD_INT 1
42232: DIV
42233: ST_TO_ADDR
// if number < 0 then
42234: LD_VAR 0 1
42238: PUSH
42239: LD_INT 0
42241: LESS
42242: IFFALSE 42252
// result := 0 ;
42244: LD_ADDR_VAR 0 2
42248: PUSH
42249: LD_INT 0
42251: ST_TO_ADDR
// end ;
42252: LD_VAR 0 2
42256: RET
// export function SortByClass ( units , class ) ; var un ; begin
42257: LD_INT 0
42259: PPUSH
42260: PPUSH
// if not units or not class then
42261: LD_VAR 0 1
42265: NOT
42266: PUSH
42267: LD_VAR 0 2
42271: NOT
42272: OR
42273: IFFALSE 42277
// exit ;
42275: GO 42372
// result := [ ] ;
42277: LD_ADDR_VAR 0 3
42281: PUSH
42282: EMPTY
42283: ST_TO_ADDR
// for un in units do
42284: LD_ADDR_VAR 0 4
42288: PUSH
42289: LD_VAR 0 1
42293: PUSH
42294: FOR_IN
42295: IFFALSE 42370
// if GetClass ( un ) = class then
42297: LD_VAR 0 4
42301: PPUSH
42302: CALL_OW 257
42306: PUSH
42307: LD_VAR 0 2
42311: EQUAL
42312: IFFALSE 42339
// result := Insert ( result , 1 , un ) else
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_VAR 0 3
42323: PPUSH
42324: LD_INT 1
42326: PPUSH
42327: LD_VAR 0 4
42331: PPUSH
42332: CALL_OW 2
42336: ST_TO_ADDR
42337: GO 42368
// result := Replace ( result , result + 1 , un ) ;
42339: LD_ADDR_VAR 0 3
42343: PUSH
42344: LD_VAR 0 3
42348: PPUSH
42349: LD_VAR 0 3
42353: PUSH
42354: LD_INT 1
42356: PLUS
42357: PPUSH
42358: LD_VAR 0 4
42362: PPUSH
42363: CALL_OW 1
42367: ST_TO_ADDR
42368: GO 42294
42370: POP
42371: POP
// end ;
42372: LD_VAR 0 3
42376: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
42377: LD_INT 0
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
42384: PPUSH
42385: PPUSH
// result := [ ] ;
42386: LD_ADDR_VAR 0 4
42390: PUSH
42391: EMPTY
42392: ST_TO_ADDR
// if x - r < 0 then
42393: LD_VAR 0 1
42397: PUSH
42398: LD_VAR 0 3
42402: MINUS
42403: PUSH
42404: LD_INT 0
42406: LESS
42407: IFFALSE 42419
// min_x := 0 else
42409: LD_ADDR_VAR 0 8
42413: PUSH
42414: LD_INT 0
42416: ST_TO_ADDR
42417: GO 42435
// min_x := x - r ;
42419: LD_ADDR_VAR 0 8
42423: PUSH
42424: LD_VAR 0 1
42428: PUSH
42429: LD_VAR 0 3
42433: MINUS
42434: ST_TO_ADDR
// if y - r < 0 then
42435: LD_VAR 0 2
42439: PUSH
42440: LD_VAR 0 3
42444: MINUS
42445: PUSH
42446: LD_INT 0
42448: LESS
42449: IFFALSE 42461
// min_y := 0 else
42451: LD_ADDR_VAR 0 7
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
42459: GO 42477
// min_y := y - r ;
42461: LD_ADDR_VAR 0 7
42465: PUSH
42466: LD_VAR 0 2
42470: PUSH
42471: LD_VAR 0 3
42475: MINUS
42476: ST_TO_ADDR
// max_x := x + r ;
42477: LD_ADDR_VAR 0 9
42481: PUSH
42482: LD_VAR 0 1
42486: PUSH
42487: LD_VAR 0 3
42491: PLUS
42492: ST_TO_ADDR
// max_y := y + r ;
42493: LD_ADDR_VAR 0 10
42497: PUSH
42498: LD_VAR 0 2
42502: PUSH
42503: LD_VAR 0 3
42507: PLUS
42508: ST_TO_ADDR
// for _x = min_x to max_x do
42509: LD_ADDR_VAR 0 5
42513: PUSH
42514: DOUBLE
42515: LD_VAR 0 8
42519: DEC
42520: ST_TO_ADDR
42521: LD_VAR 0 9
42525: PUSH
42526: FOR_TO
42527: IFFALSE 42628
// for _y = min_y to max_y do
42529: LD_ADDR_VAR 0 6
42533: PUSH
42534: DOUBLE
42535: LD_VAR 0 7
42539: DEC
42540: ST_TO_ADDR
42541: LD_VAR 0 10
42545: PUSH
42546: FOR_TO
42547: IFFALSE 42624
// begin if not ValidHex ( _x , _y ) then
42549: LD_VAR 0 5
42553: PPUSH
42554: LD_VAR 0 6
42558: PPUSH
42559: CALL_OW 488
42563: NOT
42564: IFFALSE 42568
// continue ;
42566: GO 42546
// if GetResourceTypeXY ( _x , _y ) then
42568: LD_VAR 0 5
42572: PPUSH
42573: LD_VAR 0 6
42577: PPUSH
42578: CALL_OW 283
42582: IFFALSE 42622
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
42584: LD_ADDR_VAR 0 4
42588: PUSH
42589: LD_VAR 0 4
42593: PPUSH
42594: LD_VAR 0 4
42598: PUSH
42599: LD_INT 1
42601: PLUS
42602: PPUSH
42603: LD_VAR 0 5
42607: PUSH
42608: LD_VAR 0 6
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PPUSH
42617: CALL_OW 1
42621: ST_TO_ADDR
// end ;
42622: GO 42546
42624: POP
42625: POP
42626: GO 42526
42628: POP
42629: POP
// end ;
42630: LD_VAR 0 4
42634: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
42635: LD_INT 0
42637: PPUSH
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
42642: PPUSH
42643: PPUSH
42644: PPUSH
// if not units then
42645: LD_VAR 0 1
42649: NOT
42650: IFFALSE 42654
// exit ;
42652: GO 43180
// result := UnitFilter ( units , [ f_ok ] ) ;
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_VAR 0 1
42663: PPUSH
42664: LD_INT 50
42666: PUSH
42667: EMPTY
42668: LIST
42669: PPUSH
42670: CALL_OW 72
42674: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
42675: LD_ADDR_VAR 0 8
42679: PUSH
42680: LD_VAR 0 1
42684: PUSH
42685: LD_INT 1
42687: ARRAY
42688: PPUSH
42689: CALL_OW 255
42693: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
42694: LD_ADDR_VAR 0 10
42698: PUSH
42699: LD_INT 29
42701: PUSH
42702: LD_EXP 25
42706: PUSH
42707: LD_INT 49
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: LIST
42714: ST_TO_ADDR
// if not result then
42715: LD_VAR 0 3
42719: NOT
42720: IFFALSE 42724
// exit ;
42722: GO 43180
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
42724: LD_ADDR_VAR 0 5
42728: PUSH
42729: LD_INT 81
42731: PUSH
42732: LD_VAR 0 8
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PPUSH
42741: CALL_OW 69
42745: ST_TO_ADDR
// for i in result do
42746: LD_ADDR_VAR 0 4
42750: PUSH
42751: LD_VAR 0 3
42755: PUSH
42756: FOR_IN
42757: IFFALSE 43178
// begin tag := GetTag ( i ) + 1 ;
42759: LD_ADDR_VAR 0 9
42763: PUSH
42764: LD_VAR 0 4
42768: PPUSH
42769: CALL_OW 110
42773: PUSH
42774: LD_INT 1
42776: PLUS
42777: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
42778: LD_ADDR_VAR 0 7
42782: PUSH
42783: LD_VAR 0 4
42787: PPUSH
42788: CALL_OW 250
42792: PPUSH
42793: LD_VAR 0 4
42797: PPUSH
42798: CALL_OW 251
42802: PPUSH
42803: LD_INT 6
42805: PPUSH
42806: CALL 42377 0 3
42810: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
42811: LD_VAR 0 4
42815: PPUSH
42816: CALL_OW 247
42820: PUSH
42821: LD_INT 2
42823: EQUAL
42824: PUSH
42825: LD_VAR 0 7
42829: AND
42830: PUSH
42831: LD_VAR 0 4
42835: PPUSH
42836: CALL_OW 264
42840: PUSH
42841: LD_VAR 0 10
42845: IN
42846: NOT
42847: AND
42848: IFFALSE 42887
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
42850: LD_VAR 0 4
42854: PPUSH
42855: LD_VAR 0 7
42859: PUSH
42860: LD_INT 1
42862: ARRAY
42863: PUSH
42864: LD_INT 1
42866: ARRAY
42867: PPUSH
42868: LD_VAR 0 7
42872: PUSH
42873: LD_INT 1
42875: ARRAY
42876: PUSH
42877: LD_INT 2
42879: ARRAY
42880: PPUSH
42881: CALL_OW 116
42885: GO 43176
// if path > tag then
42887: LD_VAR 0 2
42891: PUSH
42892: LD_VAR 0 9
42896: GREATER
42897: IFFALSE 43105
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
42899: LD_ADDR_VAR 0 6
42903: PUSH
42904: LD_VAR 0 5
42908: PPUSH
42909: LD_INT 91
42911: PUSH
42912: LD_VAR 0 4
42916: PUSH
42917: LD_INT 8
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: LIST
42924: PPUSH
42925: CALL_OW 72
42929: ST_TO_ADDR
// if nearEnemy then
42930: LD_VAR 0 6
42934: IFFALSE 43003
// begin if GetWeapon ( i ) = ru_time_lapser then
42936: LD_VAR 0 4
42940: PPUSH
42941: CALL_OW 264
42945: PUSH
42946: LD_INT 49
42948: EQUAL
42949: IFFALSE 42977
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
42951: LD_VAR 0 4
42955: PPUSH
42956: LD_VAR 0 6
42960: PPUSH
42961: LD_VAR 0 4
42965: PPUSH
42966: CALL_OW 74
42970: PPUSH
42971: CALL_OW 112
42975: GO 43001
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
42977: LD_VAR 0 4
42981: PPUSH
42982: LD_VAR 0 6
42986: PPUSH
42987: LD_VAR 0 4
42991: PPUSH
42992: CALL_OW 74
42996: PPUSH
42997: CALL_OW 115
// end else
43001: GO 43103
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
43003: LD_VAR 0 4
43007: PPUSH
43008: LD_VAR 0 2
43012: PUSH
43013: LD_VAR 0 9
43017: ARRAY
43018: PUSH
43019: LD_INT 1
43021: ARRAY
43022: PPUSH
43023: LD_VAR 0 2
43027: PUSH
43028: LD_VAR 0 9
43032: ARRAY
43033: PUSH
43034: LD_INT 2
43036: ARRAY
43037: PPUSH
43038: CALL_OW 297
43042: PUSH
43043: LD_INT 6
43045: GREATER
43046: IFFALSE 43089
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
43048: LD_VAR 0 4
43052: PPUSH
43053: LD_VAR 0 2
43057: PUSH
43058: LD_VAR 0 9
43062: ARRAY
43063: PUSH
43064: LD_INT 1
43066: ARRAY
43067: PPUSH
43068: LD_VAR 0 2
43072: PUSH
43073: LD_VAR 0 9
43077: ARRAY
43078: PUSH
43079: LD_INT 2
43081: ARRAY
43082: PPUSH
43083: CALL_OW 114
43087: GO 43103
// SetTag ( i , tag ) ;
43089: LD_VAR 0 4
43093: PPUSH
43094: LD_VAR 0 9
43098: PPUSH
43099: CALL_OW 109
// end else
43103: GO 43176
// if enemy then
43105: LD_VAR 0 5
43109: IFFALSE 43176
// begin if GetWeapon ( i ) = ru_time_lapser then
43111: LD_VAR 0 4
43115: PPUSH
43116: CALL_OW 264
43120: PUSH
43121: LD_INT 49
43123: EQUAL
43124: IFFALSE 43152
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
43126: LD_VAR 0 4
43130: PPUSH
43131: LD_VAR 0 5
43135: PPUSH
43136: LD_VAR 0 4
43140: PPUSH
43141: CALL_OW 74
43145: PPUSH
43146: CALL_OW 112
43150: GO 43176
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
43152: LD_VAR 0 4
43156: PPUSH
43157: LD_VAR 0 5
43161: PPUSH
43162: LD_VAR 0 4
43166: PPUSH
43167: CALL_OW 74
43171: PPUSH
43172: CALL_OW 115
// end ; end ;
43176: GO 42756
43178: POP
43179: POP
// end ;
43180: LD_VAR 0 3
43184: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
43185: LD_INT 0
43187: PPUSH
43188: PPUSH
43189: PPUSH
// if not unit or IsInUnit ( unit ) then
43190: LD_VAR 0 1
43194: NOT
43195: PUSH
43196: LD_VAR 0 1
43200: PPUSH
43201: CALL_OW 310
43205: OR
43206: IFFALSE 43210
// exit ;
43208: GO 43301
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
43210: LD_ADDR_VAR 0 4
43214: PUSH
43215: LD_VAR 0 1
43219: PPUSH
43220: CALL_OW 250
43224: PPUSH
43225: LD_VAR 0 2
43229: PPUSH
43230: LD_INT 1
43232: PPUSH
43233: CALL_OW 272
43237: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
43238: LD_ADDR_VAR 0 5
43242: PUSH
43243: LD_VAR 0 1
43247: PPUSH
43248: CALL_OW 251
43252: PPUSH
43253: LD_VAR 0 2
43257: PPUSH
43258: LD_INT 1
43260: PPUSH
43261: CALL_OW 273
43265: ST_TO_ADDR
// if ValidHex ( x , y ) then
43266: LD_VAR 0 4
43270: PPUSH
43271: LD_VAR 0 5
43275: PPUSH
43276: CALL_OW 488
43280: IFFALSE 43301
// ComTurnXY ( unit , x , y ) ;
43282: LD_VAR 0 1
43286: PPUSH
43287: LD_VAR 0 4
43291: PPUSH
43292: LD_VAR 0 5
43296: PPUSH
43297: CALL_OW 118
// end ;
43301: LD_VAR 0 3
43305: RET
// export function SeeUnits ( side , units ) ; var i ; begin
43306: LD_INT 0
43308: PPUSH
43309: PPUSH
// result := false ;
43310: LD_ADDR_VAR 0 3
43314: PUSH
43315: LD_INT 0
43317: ST_TO_ADDR
// if not units then
43318: LD_VAR 0 2
43322: NOT
43323: IFFALSE 43327
// exit ;
43325: GO 43372
// for i in units do
43327: LD_ADDR_VAR 0 4
43331: PUSH
43332: LD_VAR 0 2
43336: PUSH
43337: FOR_IN
43338: IFFALSE 43370
// if See ( side , i ) then
43340: LD_VAR 0 1
43344: PPUSH
43345: LD_VAR 0 4
43349: PPUSH
43350: CALL_OW 292
43354: IFFALSE 43368
// begin result := true ;
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_INT 1
43363: ST_TO_ADDR
// exit ;
43364: POP
43365: POP
43366: GO 43372
// end ;
43368: GO 43337
43370: POP
43371: POP
// end ;
43372: LD_VAR 0 3
43376: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
43377: LD_INT 0
43379: PPUSH
43380: PPUSH
43381: PPUSH
43382: PPUSH
// if not unit or not points then
43383: LD_VAR 0 1
43387: NOT
43388: PUSH
43389: LD_VAR 0 2
43393: NOT
43394: OR
43395: IFFALSE 43399
// exit ;
43397: GO 43489
// dist := 99999 ;
43399: LD_ADDR_VAR 0 5
43403: PUSH
43404: LD_INT 99999
43406: ST_TO_ADDR
// for i in points do
43407: LD_ADDR_VAR 0 4
43411: PUSH
43412: LD_VAR 0 2
43416: PUSH
43417: FOR_IN
43418: IFFALSE 43487
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
43420: LD_ADDR_VAR 0 6
43424: PUSH
43425: LD_VAR 0 1
43429: PPUSH
43430: LD_VAR 0 4
43434: PUSH
43435: LD_INT 1
43437: ARRAY
43438: PPUSH
43439: LD_VAR 0 4
43443: PUSH
43444: LD_INT 2
43446: ARRAY
43447: PPUSH
43448: CALL_OW 297
43452: ST_TO_ADDR
// if tmpDist < dist then
43453: LD_VAR 0 6
43457: PUSH
43458: LD_VAR 0 5
43462: LESS
43463: IFFALSE 43485
// begin result := i ;
43465: LD_ADDR_VAR 0 3
43469: PUSH
43470: LD_VAR 0 4
43474: ST_TO_ADDR
// dist := tmpDist ;
43475: LD_ADDR_VAR 0 5
43479: PUSH
43480: LD_VAR 0 6
43484: ST_TO_ADDR
// end ; end ;
43485: GO 43417
43487: POP
43488: POP
// end ;
43489: LD_VAR 0 3
43493: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
43494: LD_INT 0
43496: PPUSH
// uc_side := side ;
43497: LD_ADDR_OWVAR 20
43501: PUSH
43502: LD_VAR 0 1
43506: ST_TO_ADDR
// uc_nation := 3 ;
43507: LD_ADDR_OWVAR 21
43511: PUSH
43512: LD_INT 3
43514: ST_TO_ADDR
// vc_chassis := 25 ;
43515: LD_ADDR_OWVAR 37
43519: PUSH
43520: LD_INT 25
43522: ST_TO_ADDR
// vc_engine := engine_siberite ;
43523: LD_ADDR_OWVAR 39
43527: PUSH
43528: LD_INT 3
43530: ST_TO_ADDR
// vc_control := control_computer ;
43531: LD_ADDR_OWVAR 38
43535: PUSH
43536: LD_INT 3
43538: ST_TO_ADDR
// vc_weapon := 59 ;
43539: LD_ADDR_OWVAR 40
43543: PUSH
43544: LD_INT 59
43546: ST_TO_ADDR
// result := CreateVehicle ;
43547: LD_ADDR_VAR 0 5
43551: PUSH
43552: CALL_OW 45
43556: ST_TO_ADDR
// SetDir ( result , d ) ;
43557: LD_VAR 0 5
43561: PPUSH
43562: LD_VAR 0 4
43566: PPUSH
43567: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
43571: LD_VAR 0 5
43575: PPUSH
43576: LD_VAR 0 2
43580: PPUSH
43581: LD_VAR 0 3
43585: PPUSH
43586: LD_INT 0
43588: PPUSH
43589: CALL_OW 48
// end ;
43593: LD_VAR 0 5
43597: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
43598: LD_INT 0
43600: PPUSH
43601: PPUSH
43602: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
43603: LD_ADDR_VAR 0 2
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
43626: LD_VAR 0 1
43630: NOT
43631: PUSH
43632: LD_VAR 0 1
43636: PPUSH
43637: CALL_OW 264
43641: PUSH
43642: LD_INT 12
43644: PUSH
43645: LD_INT 51
43647: PUSH
43648: LD_INT 32
43650: PUSH
43651: LD_EXP 22
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: IN
43662: NOT
43663: OR
43664: IFFALSE 43668
// exit ;
43666: GO 43766
// for i := 1 to 3 do
43668: LD_ADDR_VAR 0 3
43672: PUSH
43673: DOUBLE
43674: LD_INT 1
43676: DEC
43677: ST_TO_ADDR
43678: LD_INT 3
43680: PUSH
43681: FOR_TO
43682: IFFALSE 43764
// begin tmp := GetCargo ( cargo , i ) ;
43684: LD_ADDR_VAR 0 4
43688: PUSH
43689: LD_VAR 0 1
43693: PPUSH
43694: LD_VAR 0 3
43698: PPUSH
43699: CALL_OW 289
43703: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
43704: LD_ADDR_VAR 0 2
43708: PUSH
43709: LD_VAR 0 2
43713: PPUSH
43714: LD_VAR 0 3
43718: PPUSH
43719: LD_VAR 0 4
43723: PPUSH
43724: CALL_OW 1
43728: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
43729: LD_ADDR_VAR 0 2
43733: PUSH
43734: LD_VAR 0 2
43738: PPUSH
43739: LD_INT 4
43741: PPUSH
43742: LD_VAR 0 2
43746: PUSH
43747: LD_INT 4
43749: ARRAY
43750: PUSH
43751: LD_VAR 0 4
43755: PLUS
43756: PPUSH
43757: CALL_OW 1
43761: ST_TO_ADDR
// end ;
43762: GO 43681
43764: POP
43765: POP
// end ;
43766: LD_VAR 0 2
43770: RET
// export function Length ( array ) ; begin
43771: LD_INT 0
43773: PPUSH
// result := array + 0 ;
43774: LD_ADDR_VAR 0 2
43778: PUSH
43779: LD_VAR 0 1
43783: PUSH
43784: LD_INT 0
43786: PLUS
43787: ST_TO_ADDR
// end ;
43788: LD_VAR 0 2
43792: RET
// export function PrepareArray ( array ) ; begin
43793: LD_INT 0
43795: PPUSH
// result := array diff 0 ;
43796: LD_ADDR_VAR 0 2
43800: PUSH
43801: LD_VAR 0 1
43805: PUSH
43806: LD_INT 0
43808: DIFF
43809: ST_TO_ADDR
// if not result [ 1 ] then
43810: LD_VAR 0 2
43814: PUSH
43815: LD_INT 1
43817: ARRAY
43818: NOT
43819: IFFALSE 43839
// result := Delete ( result , 1 ) ;
43821: LD_ADDR_VAR 0 2
43825: PUSH
43826: LD_VAR 0 2
43830: PPUSH
43831: LD_INT 1
43833: PPUSH
43834: CALL_OW 3
43838: ST_TO_ADDR
// end ; end_of_file
43839: LD_VAR 0 2
43843: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
43844: LD_INT 0
43846: PPUSH
// ar_miner := 81 ;
43847: LD_ADDR_EXP 28
43851: PUSH
43852: LD_INT 81
43854: ST_TO_ADDR
// ar_crane := 88 ;
43855: LD_ADDR_EXP 27
43859: PUSH
43860: LD_INT 88
43862: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
43863: LD_ADDR_EXP 22
43867: PUSH
43868: LD_INT 89
43870: ST_TO_ADDR
// us_hack := 99 ;
43871: LD_ADDR_EXP 23
43875: PUSH
43876: LD_INT 99
43878: ST_TO_ADDR
// us_artillery := 97 ;
43879: LD_ADDR_EXP 24
43883: PUSH
43884: LD_INT 97
43886: ST_TO_ADDR
// ar_bio_bomb := 91 ;
43887: LD_ADDR_EXP 25
43891: PUSH
43892: LD_INT 91
43894: ST_TO_ADDR
// ar_mortar := 92 ;
43895: LD_ADDR_EXP 26
43899: PUSH
43900: LD_INT 92
43902: ST_TO_ADDR
// ru_flamethrower := 93 ;
43903: LD_ADDR_EXP 29
43907: PUSH
43908: LD_INT 93
43910: ST_TO_ADDR
// ru_radar := 98 ;
43911: LD_ADDR_EXP 21
43915: PUSH
43916: LD_INT 98
43918: ST_TO_ADDR
// tech_Artillery := 80 ;
43919: LD_ADDR_EXP 30
43923: PUSH
43924: LD_INT 80
43926: ST_TO_ADDR
// tech_RadMat := 81 ;
43927: LD_ADDR_EXP 31
43931: PUSH
43932: LD_INT 81
43934: ST_TO_ADDR
// tech_BasicTools := 82 ;
43935: LD_ADDR_EXP 32
43939: PUSH
43940: LD_INT 82
43942: ST_TO_ADDR
// tech_Cargo := 83 ;
43943: LD_ADDR_EXP 33
43947: PUSH
43948: LD_INT 83
43950: ST_TO_ADDR
// tech_Track := 84 ;
43951: LD_ADDR_EXP 34
43955: PUSH
43956: LD_INT 84
43958: ST_TO_ADDR
// tech_Crane := 85 ;
43959: LD_ADDR_EXP 35
43963: PUSH
43964: LD_INT 85
43966: ST_TO_ADDR
// tech_Bulldozer := 86 ;
43967: LD_ADDR_EXP 36
43971: PUSH
43972: LD_INT 86
43974: ST_TO_ADDR
// tech_Hovercraft := 87 ;
43975: LD_ADDR_EXP 37
43979: PUSH
43980: LD_INT 87
43982: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
43983: LD_ADDR_EXP 38
43987: PUSH
43988: LD_INT 88
43990: ST_TO_ADDR
// end ;
43991: LD_VAR 0 1
43995: RET
// every 1 do
43996: GO 43998
43998: DISABLE
// InitGlobalVariables ; end_of_file
43999: CALL 43844 0 0
44003: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
44004: LD_VAR 0 1
44008: PPUSH
44009: LD_VAR 0 2
44013: PPUSH
44014: LD_VAR 0 3
44018: PPUSH
44019: LD_VAR 0 4
44023: PPUSH
44024: LD_VAR 0 5
44028: PPUSH
44029: LD_VAR 0 6
44033: PPUSH
44034: CALL 44114 0 6
// end ;
44038: PPOPN 6
44040: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
44041: LD_INT 0
44043: PPUSH
// begin if not units then
44044: LD_VAR 0 1
44048: NOT
44049: IFFALSE 44053
// exit ;
44051: GO 44053
// end ;
44053: PPOPN 7
44055: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
44056: CALL 44085 0 0
// end ; end_of_file
44060: PPOPN 1
44062: END
// every 0 0$1 do
44063: GO 44065
44065: DISABLE
// begin enable ;
44066: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
44067: LD_STRING updateTimer(
44069: PUSH
44070: LD_OWVAR 1
44074: STR
44075: PUSH
44076: LD_STRING );
44078: STR
44079: PPUSH
44080: CALL_OW 559
// end ;
44084: END
// export function SOS_MapStart ( ) ; begin
44085: LD_INT 0
44087: PPUSH
// if streamModeActive then
44088: LD_EXP 39
44092: IFFALSE 44101
// DefineStreamItems ( true ) ;
44094: LD_INT 1
44096: PPUSH
44097: CALL 45755 0 1
// UpdateFactoryWaypoints ( ) ;
44101: CALL 58616 0 0
// UpdateWarehouseGatheringPoints ( ) ;
44105: CALL 58873 0 0
// end ;
44109: LD_VAR 0 1
44113: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
44114: LD_INT 0
44116: PPUSH
// if p2 = 100 then
44117: LD_VAR 0 2
44121: PUSH
44122: LD_INT 100
44124: EQUAL
44125: IFFALSE 45128
// begin if not StreamModeActive then
44127: LD_EXP 39
44131: NOT
44132: IFFALSE 44142
// StreamModeActive := true ;
44134: LD_ADDR_EXP 39
44138: PUSH
44139: LD_INT 1
44141: ST_TO_ADDR
// if p3 = 0 then
44142: LD_VAR 0 3
44146: PUSH
44147: LD_INT 0
44149: EQUAL
44150: IFFALSE 44156
// InitStreamMode ;
44152: CALL 45291 0 0
// if p3 = 1 then
44156: LD_VAR 0 3
44160: PUSH
44161: LD_INT 1
44163: EQUAL
44164: IFFALSE 44174
// sRocket := true ;
44166: LD_ADDR_EXP 44
44170: PUSH
44171: LD_INT 1
44173: ST_TO_ADDR
// if p3 = 2 then
44174: LD_VAR 0 3
44178: PUSH
44179: LD_INT 2
44181: EQUAL
44182: IFFALSE 44192
// sSpeed := true ;
44184: LD_ADDR_EXP 43
44188: PUSH
44189: LD_INT 1
44191: ST_TO_ADDR
// if p3 = 3 then
44192: LD_VAR 0 3
44196: PUSH
44197: LD_INT 3
44199: EQUAL
44200: IFFALSE 44210
// sEngine := true ;
44202: LD_ADDR_EXP 45
44206: PUSH
44207: LD_INT 1
44209: ST_TO_ADDR
// if p3 = 4 then
44210: LD_VAR 0 3
44214: PUSH
44215: LD_INT 4
44217: EQUAL
44218: IFFALSE 44228
// sSpec := true ;
44220: LD_ADDR_EXP 42
44224: PUSH
44225: LD_INT 1
44227: ST_TO_ADDR
// if p3 = 5 then
44228: LD_VAR 0 3
44232: PUSH
44233: LD_INT 5
44235: EQUAL
44236: IFFALSE 44246
// sLevel := true ;
44238: LD_ADDR_EXP 46
44242: PUSH
44243: LD_INT 1
44245: ST_TO_ADDR
// if p3 = 6 then
44246: LD_VAR 0 3
44250: PUSH
44251: LD_INT 6
44253: EQUAL
44254: IFFALSE 44264
// sArmoury := true ;
44256: LD_ADDR_EXP 47
44260: PUSH
44261: LD_INT 1
44263: ST_TO_ADDR
// if p3 = 7 then
44264: LD_VAR 0 3
44268: PUSH
44269: LD_INT 7
44271: EQUAL
44272: IFFALSE 44282
// sRadar := true ;
44274: LD_ADDR_EXP 48
44278: PUSH
44279: LD_INT 1
44281: ST_TO_ADDR
// if p3 = 8 then
44282: LD_VAR 0 3
44286: PUSH
44287: LD_INT 8
44289: EQUAL
44290: IFFALSE 44300
// sBunker := true ;
44292: LD_ADDR_EXP 49
44296: PUSH
44297: LD_INT 1
44299: ST_TO_ADDR
// if p3 = 9 then
44300: LD_VAR 0 3
44304: PUSH
44305: LD_INT 9
44307: EQUAL
44308: IFFALSE 44318
// sHack := true ;
44310: LD_ADDR_EXP 50
44314: PUSH
44315: LD_INT 1
44317: ST_TO_ADDR
// if p3 = 10 then
44318: LD_VAR 0 3
44322: PUSH
44323: LD_INT 10
44325: EQUAL
44326: IFFALSE 44336
// sFire := true ;
44328: LD_ADDR_EXP 51
44332: PUSH
44333: LD_INT 1
44335: ST_TO_ADDR
// if p3 = 11 then
44336: LD_VAR 0 3
44340: PUSH
44341: LD_INT 11
44343: EQUAL
44344: IFFALSE 44354
// sRefresh := true ;
44346: LD_ADDR_EXP 52
44350: PUSH
44351: LD_INT 1
44353: ST_TO_ADDR
// if p3 = 12 then
44354: LD_VAR 0 3
44358: PUSH
44359: LD_INT 12
44361: EQUAL
44362: IFFALSE 44372
// sExp := true ;
44364: LD_ADDR_EXP 53
44368: PUSH
44369: LD_INT 1
44371: ST_TO_ADDR
// if p3 = 13 then
44372: LD_VAR 0 3
44376: PUSH
44377: LD_INT 13
44379: EQUAL
44380: IFFALSE 44390
// sDepot := true ;
44382: LD_ADDR_EXP 54
44386: PUSH
44387: LD_INT 1
44389: ST_TO_ADDR
// if p3 = 14 then
44390: LD_VAR 0 3
44394: PUSH
44395: LD_INT 14
44397: EQUAL
44398: IFFALSE 44408
// sFlag := true ;
44400: LD_ADDR_EXP 55
44404: PUSH
44405: LD_INT 1
44407: ST_TO_ADDR
// if p3 = 15 then
44408: LD_VAR 0 3
44412: PUSH
44413: LD_INT 15
44415: EQUAL
44416: IFFALSE 44426
// sKamikadze := true ;
44418: LD_ADDR_EXP 63
44422: PUSH
44423: LD_INT 1
44425: ST_TO_ADDR
// if p3 = 16 then
44426: LD_VAR 0 3
44430: PUSH
44431: LD_INT 16
44433: EQUAL
44434: IFFALSE 44444
// sTroll := true ;
44436: LD_ADDR_EXP 64
44440: PUSH
44441: LD_INT 1
44443: ST_TO_ADDR
// if p3 = 17 then
44444: LD_VAR 0 3
44448: PUSH
44449: LD_INT 17
44451: EQUAL
44452: IFFALSE 44462
// sSlow := true ;
44454: LD_ADDR_EXP 65
44458: PUSH
44459: LD_INT 1
44461: ST_TO_ADDR
// if p3 = 18 then
44462: LD_VAR 0 3
44466: PUSH
44467: LD_INT 18
44469: EQUAL
44470: IFFALSE 44480
// sLack := true ;
44472: LD_ADDR_EXP 66
44476: PUSH
44477: LD_INT 1
44479: ST_TO_ADDR
// if p3 = 19 then
44480: LD_VAR 0 3
44484: PUSH
44485: LD_INT 19
44487: EQUAL
44488: IFFALSE 44498
// sTank := true ;
44490: LD_ADDR_EXP 68
44494: PUSH
44495: LD_INT 1
44497: ST_TO_ADDR
// if p3 = 20 then
44498: LD_VAR 0 3
44502: PUSH
44503: LD_INT 20
44505: EQUAL
44506: IFFALSE 44516
// sRemote := true ;
44508: LD_ADDR_EXP 69
44512: PUSH
44513: LD_INT 1
44515: ST_TO_ADDR
// if p3 = 21 then
44516: LD_VAR 0 3
44520: PUSH
44521: LD_INT 21
44523: EQUAL
44524: IFFALSE 44534
// sPowell := true ;
44526: LD_ADDR_EXP 70
44530: PUSH
44531: LD_INT 1
44533: ST_TO_ADDR
// if p3 = 22 then
44534: LD_VAR 0 3
44538: PUSH
44539: LD_INT 22
44541: EQUAL
44542: IFFALSE 44552
// sTeleport := true ;
44544: LD_ADDR_EXP 73
44548: PUSH
44549: LD_INT 1
44551: ST_TO_ADDR
// if p3 = 23 then
44552: LD_VAR 0 3
44556: PUSH
44557: LD_INT 23
44559: EQUAL
44560: IFFALSE 44570
// sOilTower := true ;
44562: LD_ADDR_EXP 75
44566: PUSH
44567: LD_INT 1
44569: ST_TO_ADDR
// if p3 = 24 then
44570: LD_VAR 0 3
44574: PUSH
44575: LD_INT 24
44577: EQUAL
44578: IFFALSE 44588
// sShovel := true ;
44580: LD_ADDR_EXP 76
44584: PUSH
44585: LD_INT 1
44587: ST_TO_ADDR
// if p3 = 25 then
44588: LD_VAR 0 3
44592: PUSH
44593: LD_INT 25
44595: EQUAL
44596: IFFALSE 44606
// sSheik := true ;
44598: LD_ADDR_EXP 77
44602: PUSH
44603: LD_INT 1
44605: ST_TO_ADDR
// if p3 = 26 then
44606: LD_VAR 0 3
44610: PUSH
44611: LD_INT 26
44613: EQUAL
44614: IFFALSE 44624
// sEarthquake := true ;
44616: LD_ADDR_EXP 79
44620: PUSH
44621: LD_INT 1
44623: ST_TO_ADDR
// if p3 = 27 then
44624: LD_VAR 0 3
44628: PUSH
44629: LD_INT 27
44631: EQUAL
44632: IFFALSE 44642
// sAI := true ;
44634: LD_ADDR_EXP 80
44638: PUSH
44639: LD_INT 1
44641: ST_TO_ADDR
// if p3 = 28 then
44642: LD_VAR 0 3
44646: PUSH
44647: LD_INT 28
44649: EQUAL
44650: IFFALSE 44660
// sCargo := true ;
44652: LD_ADDR_EXP 83
44656: PUSH
44657: LD_INT 1
44659: ST_TO_ADDR
// if p3 = 29 then
44660: LD_VAR 0 3
44664: PUSH
44665: LD_INT 29
44667: EQUAL
44668: IFFALSE 44678
// sDLaser := true ;
44670: LD_ADDR_EXP 84
44674: PUSH
44675: LD_INT 1
44677: ST_TO_ADDR
// if p3 = 30 then
44678: LD_VAR 0 3
44682: PUSH
44683: LD_INT 30
44685: EQUAL
44686: IFFALSE 44696
// sExchange := true ;
44688: LD_ADDR_EXP 85
44692: PUSH
44693: LD_INT 1
44695: ST_TO_ADDR
// if p3 = 31 then
44696: LD_VAR 0 3
44700: PUSH
44701: LD_INT 31
44703: EQUAL
44704: IFFALSE 44714
// sFac := true ;
44706: LD_ADDR_EXP 86
44710: PUSH
44711: LD_INT 1
44713: ST_TO_ADDR
// if p3 = 32 then
44714: LD_VAR 0 3
44718: PUSH
44719: LD_INT 32
44721: EQUAL
44722: IFFALSE 44732
// sPower := true ;
44724: LD_ADDR_EXP 87
44728: PUSH
44729: LD_INT 1
44731: ST_TO_ADDR
// if p3 = 33 then
44732: LD_VAR 0 3
44736: PUSH
44737: LD_INT 33
44739: EQUAL
44740: IFFALSE 44750
// sRandom := true ;
44742: LD_ADDR_EXP 88
44746: PUSH
44747: LD_INT 1
44749: ST_TO_ADDR
// if p3 = 34 then
44750: LD_VAR 0 3
44754: PUSH
44755: LD_INT 34
44757: EQUAL
44758: IFFALSE 44768
// sShield := true ;
44760: LD_ADDR_EXP 89
44764: PUSH
44765: LD_INT 1
44767: ST_TO_ADDR
// if p3 = 35 then
44768: LD_VAR 0 3
44772: PUSH
44773: LD_INT 35
44775: EQUAL
44776: IFFALSE 44786
// sTime := true ;
44778: LD_ADDR_EXP 90
44782: PUSH
44783: LD_INT 1
44785: ST_TO_ADDR
// if p3 = 36 then
44786: LD_VAR 0 3
44790: PUSH
44791: LD_INT 36
44793: EQUAL
44794: IFFALSE 44804
// sTools := true ;
44796: LD_ADDR_EXP 91
44800: PUSH
44801: LD_INT 1
44803: ST_TO_ADDR
// if p3 = 101 then
44804: LD_VAR 0 3
44808: PUSH
44809: LD_INT 101
44811: EQUAL
44812: IFFALSE 44822
// sSold := true ;
44814: LD_ADDR_EXP 56
44818: PUSH
44819: LD_INT 1
44821: ST_TO_ADDR
// if p3 = 102 then
44822: LD_VAR 0 3
44826: PUSH
44827: LD_INT 102
44829: EQUAL
44830: IFFALSE 44840
// sDiff := true ;
44832: LD_ADDR_EXP 57
44836: PUSH
44837: LD_INT 1
44839: ST_TO_ADDR
// if p3 = 103 then
44840: LD_VAR 0 3
44844: PUSH
44845: LD_INT 103
44847: EQUAL
44848: IFFALSE 44858
// sFog := true ;
44850: LD_ADDR_EXP 60
44854: PUSH
44855: LD_INT 1
44857: ST_TO_ADDR
// if p3 = 104 then
44858: LD_VAR 0 3
44862: PUSH
44863: LD_INT 104
44865: EQUAL
44866: IFFALSE 44876
// sReset := true ;
44868: LD_ADDR_EXP 61
44872: PUSH
44873: LD_INT 1
44875: ST_TO_ADDR
// if p3 = 105 then
44876: LD_VAR 0 3
44880: PUSH
44881: LD_INT 105
44883: EQUAL
44884: IFFALSE 44894
// sSun := true ;
44886: LD_ADDR_EXP 62
44890: PUSH
44891: LD_INT 1
44893: ST_TO_ADDR
// if p3 = 106 then
44894: LD_VAR 0 3
44898: PUSH
44899: LD_INT 106
44901: EQUAL
44902: IFFALSE 44912
// sTiger := true ;
44904: LD_ADDR_EXP 58
44908: PUSH
44909: LD_INT 1
44911: ST_TO_ADDR
// if p3 = 107 then
44912: LD_VAR 0 3
44916: PUSH
44917: LD_INT 107
44919: EQUAL
44920: IFFALSE 44930
// sBomb := true ;
44922: LD_ADDR_EXP 59
44926: PUSH
44927: LD_INT 1
44929: ST_TO_ADDR
// if p3 = 108 then
44930: LD_VAR 0 3
44934: PUSH
44935: LD_INT 108
44937: EQUAL
44938: IFFALSE 44948
// sWound := true ;
44940: LD_ADDR_EXP 67
44944: PUSH
44945: LD_INT 1
44947: ST_TO_ADDR
// if p3 = 109 then
44948: LD_VAR 0 3
44952: PUSH
44953: LD_INT 109
44955: EQUAL
44956: IFFALSE 44966
// sBetray := true ;
44958: LD_ADDR_EXP 71
44962: PUSH
44963: LD_INT 1
44965: ST_TO_ADDR
// if p3 = 110 then
44966: LD_VAR 0 3
44970: PUSH
44971: LD_INT 110
44973: EQUAL
44974: IFFALSE 44984
// sContamin := true ;
44976: LD_ADDR_EXP 72
44980: PUSH
44981: LD_INT 1
44983: ST_TO_ADDR
// if p3 = 111 then
44984: LD_VAR 0 3
44988: PUSH
44989: LD_INT 111
44991: EQUAL
44992: IFFALSE 45002
// sOil := true ;
44994: LD_ADDR_EXP 74
44998: PUSH
44999: LD_INT 1
45001: ST_TO_ADDR
// if p3 = 112 then
45002: LD_VAR 0 3
45006: PUSH
45007: LD_INT 112
45009: EQUAL
45010: IFFALSE 45020
// sStu := true ;
45012: LD_ADDR_EXP 78
45016: PUSH
45017: LD_INT 1
45019: ST_TO_ADDR
// if p3 = 113 then
45020: LD_VAR 0 3
45024: PUSH
45025: LD_INT 113
45027: EQUAL
45028: IFFALSE 45038
// sBazooka := true ;
45030: LD_ADDR_EXP 81
45034: PUSH
45035: LD_INT 1
45037: ST_TO_ADDR
// if p3 = 114 then
45038: LD_VAR 0 3
45042: PUSH
45043: LD_INT 114
45045: EQUAL
45046: IFFALSE 45056
// sMortar := true ;
45048: LD_ADDR_EXP 82
45052: PUSH
45053: LD_INT 1
45055: ST_TO_ADDR
// if p3 = 115 then
45056: LD_VAR 0 3
45060: PUSH
45061: LD_INT 115
45063: EQUAL
45064: IFFALSE 45074
// sRanger := true ;
45066: LD_ADDR_EXP 92
45070: PUSH
45071: LD_INT 1
45073: ST_TO_ADDR
// if p3 = 116 then
45074: LD_VAR 0 3
45078: PUSH
45079: LD_INT 116
45081: EQUAL
45082: IFFALSE 45092
// sComputer := true ;
45084: LD_ADDR_EXP 93
45088: PUSH
45089: LD_INT 1
45091: ST_TO_ADDR
// if p3 = 117 then
45092: LD_VAR 0 3
45096: PUSH
45097: LD_INT 117
45099: EQUAL
45100: IFFALSE 45110
// s30 := true ;
45102: LD_ADDR_EXP 94
45106: PUSH
45107: LD_INT 1
45109: ST_TO_ADDR
// if p3 = 118 then
45110: LD_VAR 0 3
45114: PUSH
45115: LD_INT 118
45117: EQUAL
45118: IFFALSE 45128
// s60 := true ;
45120: LD_ADDR_EXP 95
45124: PUSH
45125: LD_INT 1
45127: ST_TO_ADDR
// end ; if p2 = 101 then
45128: LD_VAR 0 2
45132: PUSH
45133: LD_INT 101
45135: EQUAL
45136: IFFALSE 45264
// begin case p3 of 1 :
45138: LD_VAR 0 3
45142: PUSH
45143: LD_INT 1
45145: DOUBLE
45146: EQUAL
45147: IFTRUE 45151
45149: GO 45158
45151: POP
// hHackUnlimitedResources ; 2 :
45152: CALL 57362 0 0
45156: GO 45264
45158: LD_INT 2
45160: DOUBLE
45161: EQUAL
45162: IFTRUE 45166
45164: GO 45173
45166: POP
// hHackSetLevel10 ; 3 :
45167: CALL 57495 0 0
45171: GO 45264
45173: LD_INT 3
45175: DOUBLE
45176: EQUAL
45177: IFTRUE 45181
45179: GO 45188
45181: POP
// hHackSetLevel10YourUnits ; 4 :
45182: CALL 57580 0 0
45186: GO 45264
45188: LD_INT 4
45190: DOUBLE
45191: EQUAL
45192: IFTRUE 45196
45194: GO 45203
45196: POP
// hHackInvincible ; 5 :
45197: CALL 58028 0 0
45201: GO 45264
45203: LD_INT 5
45205: DOUBLE
45206: EQUAL
45207: IFTRUE 45211
45209: GO 45218
45211: POP
// hHackInvisible ; 6 :
45212: CALL 58139 0 0
45216: GO 45264
45218: LD_INT 6
45220: DOUBLE
45221: EQUAL
45222: IFTRUE 45226
45224: GO 45233
45226: POP
// hHackChangeYourSide ; 7 :
45227: CALL 58196 0 0
45231: GO 45264
45233: LD_INT 7
45235: DOUBLE
45236: EQUAL
45237: IFTRUE 45241
45239: GO 45248
45241: POP
// hHackChangeUnitSide ; 8 :
45242: CALL 58238 0 0
45246: GO 45264
45248: LD_INT 8
45250: DOUBLE
45251: EQUAL
45252: IFTRUE 45256
45254: GO 45263
45256: POP
// hHackFog ; end ;
45257: CALL 58339 0 0
45261: GO 45264
45263: POP
// end ; end ;
45264: LD_VAR 0 7
45268: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
45269: GO 45271
45271: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
45272: LD_STRING initStreamRollete();
45274: PPUSH
45275: CALL_OW 559
// InitStreamMode ;
45279: CALL 45291 0 0
// DefineStreamItems ( false ) ;
45283: LD_INT 0
45285: PPUSH
45286: CALL 45755 0 1
// end ;
45290: END
// function InitStreamMode ; begin
45291: LD_INT 0
45293: PPUSH
// streamModeActive := false ;
45294: LD_ADDR_EXP 39
45298: PUSH
45299: LD_INT 0
45301: ST_TO_ADDR
// normalCounter := 36 ;
45302: LD_ADDR_EXP 40
45306: PUSH
45307: LD_INT 36
45309: ST_TO_ADDR
// hardcoreCounter := 18 ;
45310: LD_ADDR_EXP 41
45314: PUSH
45315: LD_INT 18
45317: ST_TO_ADDR
// sRocket := false ;
45318: LD_ADDR_EXP 44
45322: PUSH
45323: LD_INT 0
45325: ST_TO_ADDR
// sSpeed := false ;
45326: LD_ADDR_EXP 43
45330: PUSH
45331: LD_INT 0
45333: ST_TO_ADDR
// sEngine := false ;
45334: LD_ADDR_EXP 45
45338: PUSH
45339: LD_INT 0
45341: ST_TO_ADDR
// sSpec := false ;
45342: LD_ADDR_EXP 42
45346: PUSH
45347: LD_INT 0
45349: ST_TO_ADDR
// sLevel := false ;
45350: LD_ADDR_EXP 46
45354: PUSH
45355: LD_INT 0
45357: ST_TO_ADDR
// sArmoury := false ;
45358: LD_ADDR_EXP 47
45362: PUSH
45363: LD_INT 0
45365: ST_TO_ADDR
// sRadar := false ;
45366: LD_ADDR_EXP 48
45370: PUSH
45371: LD_INT 0
45373: ST_TO_ADDR
// sBunker := false ;
45374: LD_ADDR_EXP 49
45378: PUSH
45379: LD_INT 0
45381: ST_TO_ADDR
// sHack := false ;
45382: LD_ADDR_EXP 50
45386: PUSH
45387: LD_INT 0
45389: ST_TO_ADDR
// sFire := false ;
45390: LD_ADDR_EXP 51
45394: PUSH
45395: LD_INT 0
45397: ST_TO_ADDR
// sRefresh := false ;
45398: LD_ADDR_EXP 52
45402: PUSH
45403: LD_INT 0
45405: ST_TO_ADDR
// sExp := false ;
45406: LD_ADDR_EXP 53
45410: PUSH
45411: LD_INT 0
45413: ST_TO_ADDR
// sDepot := false ;
45414: LD_ADDR_EXP 54
45418: PUSH
45419: LD_INT 0
45421: ST_TO_ADDR
// sFlag := false ;
45422: LD_ADDR_EXP 55
45426: PUSH
45427: LD_INT 0
45429: ST_TO_ADDR
// sKamikadze := false ;
45430: LD_ADDR_EXP 63
45434: PUSH
45435: LD_INT 0
45437: ST_TO_ADDR
// sTroll := false ;
45438: LD_ADDR_EXP 64
45442: PUSH
45443: LD_INT 0
45445: ST_TO_ADDR
// sSlow := false ;
45446: LD_ADDR_EXP 65
45450: PUSH
45451: LD_INT 0
45453: ST_TO_ADDR
// sLack := false ;
45454: LD_ADDR_EXP 66
45458: PUSH
45459: LD_INT 0
45461: ST_TO_ADDR
// sTank := false ;
45462: LD_ADDR_EXP 68
45466: PUSH
45467: LD_INT 0
45469: ST_TO_ADDR
// sRemote := false ;
45470: LD_ADDR_EXP 69
45474: PUSH
45475: LD_INT 0
45477: ST_TO_ADDR
// sPowell := false ;
45478: LD_ADDR_EXP 70
45482: PUSH
45483: LD_INT 0
45485: ST_TO_ADDR
// sTeleport := false ;
45486: LD_ADDR_EXP 73
45490: PUSH
45491: LD_INT 0
45493: ST_TO_ADDR
// sOilTower := false ;
45494: LD_ADDR_EXP 75
45498: PUSH
45499: LD_INT 0
45501: ST_TO_ADDR
// sShovel := false ;
45502: LD_ADDR_EXP 76
45506: PUSH
45507: LD_INT 0
45509: ST_TO_ADDR
// sSheik := false ;
45510: LD_ADDR_EXP 77
45514: PUSH
45515: LD_INT 0
45517: ST_TO_ADDR
// sEarthquake := false ;
45518: LD_ADDR_EXP 79
45522: PUSH
45523: LD_INT 0
45525: ST_TO_ADDR
// sAI := false ;
45526: LD_ADDR_EXP 80
45530: PUSH
45531: LD_INT 0
45533: ST_TO_ADDR
// sCargo := false ;
45534: LD_ADDR_EXP 83
45538: PUSH
45539: LD_INT 0
45541: ST_TO_ADDR
// sDLaser := false ;
45542: LD_ADDR_EXP 84
45546: PUSH
45547: LD_INT 0
45549: ST_TO_ADDR
// sExchange := false ;
45550: LD_ADDR_EXP 85
45554: PUSH
45555: LD_INT 0
45557: ST_TO_ADDR
// sFac := false ;
45558: LD_ADDR_EXP 86
45562: PUSH
45563: LD_INT 0
45565: ST_TO_ADDR
// sPower := false ;
45566: LD_ADDR_EXP 87
45570: PUSH
45571: LD_INT 0
45573: ST_TO_ADDR
// sRandom := false ;
45574: LD_ADDR_EXP 88
45578: PUSH
45579: LD_INT 0
45581: ST_TO_ADDR
// sShield := false ;
45582: LD_ADDR_EXP 89
45586: PUSH
45587: LD_INT 0
45589: ST_TO_ADDR
// sTime := false ;
45590: LD_ADDR_EXP 90
45594: PUSH
45595: LD_INT 0
45597: ST_TO_ADDR
// sTools := false ;
45598: LD_ADDR_EXP 91
45602: PUSH
45603: LD_INT 0
45605: ST_TO_ADDR
// sSold := false ;
45606: LD_ADDR_EXP 56
45610: PUSH
45611: LD_INT 0
45613: ST_TO_ADDR
// sDiff := false ;
45614: LD_ADDR_EXP 57
45618: PUSH
45619: LD_INT 0
45621: ST_TO_ADDR
// sFog := false ;
45622: LD_ADDR_EXP 60
45626: PUSH
45627: LD_INT 0
45629: ST_TO_ADDR
// sReset := false ;
45630: LD_ADDR_EXP 61
45634: PUSH
45635: LD_INT 0
45637: ST_TO_ADDR
// sSun := false ;
45638: LD_ADDR_EXP 62
45642: PUSH
45643: LD_INT 0
45645: ST_TO_ADDR
// sTiger := false ;
45646: LD_ADDR_EXP 58
45650: PUSH
45651: LD_INT 0
45653: ST_TO_ADDR
// sBomb := false ;
45654: LD_ADDR_EXP 59
45658: PUSH
45659: LD_INT 0
45661: ST_TO_ADDR
// sWound := false ;
45662: LD_ADDR_EXP 67
45666: PUSH
45667: LD_INT 0
45669: ST_TO_ADDR
// sBetray := false ;
45670: LD_ADDR_EXP 71
45674: PUSH
45675: LD_INT 0
45677: ST_TO_ADDR
// sContamin := false ;
45678: LD_ADDR_EXP 72
45682: PUSH
45683: LD_INT 0
45685: ST_TO_ADDR
// sOil := false ;
45686: LD_ADDR_EXP 74
45690: PUSH
45691: LD_INT 0
45693: ST_TO_ADDR
// sStu := false ;
45694: LD_ADDR_EXP 78
45698: PUSH
45699: LD_INT 0
45701: ST_TO_ADDR
// sBazooka := false ;
45702: LD_ADDR_EXP 81
45706: PUSH
45707: LD_INT 0
45709: ST_TO_ADDR
// sMortar := false ;
45710: LD_ADDR_EXP 82
45714: PUSH
45715: LD_INT 0
45717: ST_TO_ADDR
// sRanger := false ;
45718: LD_ADDR_EXP 92
45722: PUSH
45723: LD_INT 0
45725: ST_TO_ADDR
// sComputer := false ;
45726: LD_ADDR_EXP 93
45730: PUSH
45731: LD_INT 0
45733: ST_TO_ADDR
// s30 := false ;
45734: LD_ADDR_EXP 94
45738: PUSH
45739: LD_INT 0
45741: ST_TO_ADDR
// s60 := false ;
45742: LD_ADDR_EXP 95
45746: PUSH
45747: LD_INT 0
45749: ST_TO_ADDR
// end ;
45750: LD_VAR 0 1
45754: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
45755: LD_INT 0
45757: PPUSH
45758: PPUSH
45759: PPUSH
45760: PPUSH
45761: PPUSH
45762: PPUSH
45763: PPUSH
// result := [ ] ;
45764: LD_ADDR_VAR 0 2
45768: PUSH
45769: EMPTY
45770: ST_TO_ADDR
// if campaign_id = 1 then
45771: LD_OWVAR 69
45775: PUSH
45776: LD_INT 1
45778: EQUAL
45779: IFFALSE 48945
// begin case mission_number of 1 :
45781: LD_OWVAR 70
45785: PUSH
45786: LD_INT 1
45788: DOUBLE
45789: EQUAL
45790: IFTRUE 45794
45792: GO 45870
45794: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
45795: LD_ADDR_VAR 0 2
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: LD_INT 4
45805: PUSH
45806: LD_INT 11
45808: PUSH
45809: LD_INT 12
45811: PUSH
45812: LD_INT 15
45814: PUSH
45815: LD_INT 16
45817: PUSH
45818: LD_INT 22
45820: PUSH
45821: LD_INT 23
45823: PUSH
45824: LD_INT 26
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 101
45840: PUSH
45841: LD_INT 102
45843: PUSH
45844: LD_INT 106
45846: PUSH
45847: LD_INT 116
45849: PUSH
45850: LD_INT 117
45852: PUSH
45853: LD_INT 118
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: ST_TO_ADDR
45868: GO 48943
45870: LD_INT 2
45872: DOUBLE
45873: EQUAL
45874: IFTRUE 45878
45876: GO 45962
45878: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
45879: LD_ADDR_VAR 0 2
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 4
45889: PUSH
45890: LD_INT 11
45892: PUSH
45893: LD_INT 12
45895: PUSH
45896: LD_INT 15
45898: PUSH
45899: LD_INT 16
45901: PUSH
45902: LD_INT 22
45904: PUSH
45905: LD_INT 23
45907: PUSH
45908: LD_INT 26
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 101
45924: PUSH
45925: LD_INT 102
45927: PUSH
45928: LD_INT 105
45930: PUSH
45931: LD_INT 106
45933: PUSH
45934: LD_INT 108
45936: PUSH
45937: LD_INT 116
45939: PUSH
45940: LD_INT 117
45942: PUSH
45943: LD_INT 118
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: ST_TO_ADDR
45960: GO 48943
45962: LD_INT 3
45964: DOUBLE
45965: EQUAL
45966: IFTRUE 45970
45968: GO 46058
45970: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
45971: LD_ADDR_VAR 0 2
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 4
45981: PUSH
45982: LD_INT 5
45984: PUSH
45985: LD_INT 11
45987: PUSH
45988: LD_INT 12
45990: PUSH
45991: LD_INT 15
45993: PUSH
45994: LD_INT 16
45996: PUSH
45997: LD_INT 22
45999: PUSH
46000: LD_INT 26
46002: PUSH
46003: LD_INT 36
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 101
46020: PUSH
46021: LD_INT 102
46023: PUSH
46024: LD_INT 105
46026: PUSH
46027: LD_INT 106
46029: PUSH
46030: LD_INT 108
46032: PUSH
46033: LD_INT 116
46035: PUSH
46036: LD_INT 117
46038: PUSH
46039: LD_INT 118
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: ST_TO_ADDR
46056: GO 48943
46058: LD_INT 4
46060: DOUBLE
46061: EQUAL
46062: IFTRUE 46066
46064: GO 46162
46066: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
46067: LD_ADDR_VAR 0 2
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 4
46077: PUSH
46078: LD_INT 5
46080: PUSH
46081: LD_INT 8
46083: PUSH
46084: LD_INT 11
46086: PUSH
46087: LD_INT 12
46089: PUSH
46090: LD_INT 15
46092: PUSH
46093: LD_INT 16
46095: PUSH
46096: LD_INT 22
46098: PUSH
46099: LD_INT 23
46101: PUSH
46102: LD_INT 26
46104: PUSH
46105: LD_INT 36
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 101
46124: PUSH
46125: LD_INT 102
46127: PUSH
46128: LD_INT 105
46130: PUSH
46131: LD_INT 106
46133: PUSH
46134: LD_INT 108
46136: PUSH
46137: LD_INT 116
46139: PUSH
46140: LD_INT 117
46142: PUSH
46143: LD_INT 118
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: ST_TO_ADDR
46160: GO 48943
46162: LD_INT 5
46164: DOUBLE
46165: EQUAL
46166: IFTRUE 46170
46168: GO 46282
46170: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
46171: LD_ADDR_VAR 0 2
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 4
46181: PUSH
46182: LD_INT 5
46184: PUSH
46185: LD_INT 6
46187: PUSH
46188: LD_INT 8
46190: PUSH
46191: LD_INT 11
46193: PUSH
46194: LD_INT 12
46196: PUSH
46197: LD_INT 15
46199: PUSH
46200: LD_INT 16
46202: PUSH
46203: LD_INT 22
46205: PUSH
46206: LD_INT 23
46208: PUSH
46209: LD_INT 25
46211: PUSH
46212: LD_INT 26
46214: PUSH
46215: LD_INT 36
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 101
46236: PUSH
46237: LD_INT 102
46239: PUSH
46240: LD_INT 105
46242: PUSH
46243: LD_INT 106
46245: PUSH
46246: LD_INT 108
46248: PUSH
46249: LD_INT 109
46251: PUSH
46252: LD_INT 112
46254: PUSH
46255: LD_INT 116
46257: PUSH
46258: LD_INT 117
46260: PUSH
46261: LD_INT 118
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: ST_TO_ADDR
46280: GO 48943
46282: LD_INT 6
46284: DOUBLE
46285: EQUAL
46286: IFTRUE 46290
46288: GO 46422
46290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
46291: LD_ADDR_VAR 0 2
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: LD_INT 4
46301: PUSH
46302: LD_INT 5
46304: PUSH
46305: LD_INT 6
46307: PUSH
46308: LD_INT 8
46310: PUSH
46311: LD_INT 11
46313: PUSH
46314: LD_INT 12
46316: PUSH
46317: LD_INT 15
46319: PUSH
46320: LD_INT 16
46322: PUSH
46323: LD_INT 20
46325: PUSH
46326: LD_INT 21
46328: PUSH
46329: LD_INT 22
46331: PUSH
46332: LD_INT 23
46334: PUSH
46335: LD_INT 25
46337: PUSH
46338: LD_INT 26
46340: PUSH
46341: LD_INT 30
46343: PUSH
46344: LD_INT 31
46346: PUSH
46347: LD_INT 32
46349: PUSH
46350: LD_INT 36
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 101
46376: PUSH
46377: LD_INT 102
46379: PUSH
46380: LD_INT 105
46382: PUSH
46383: LD_INT 106
46385: PUSH
46386: LD_INT 108
46388: PUSH
46389: LD_INT 109
46391: PUSH
46392: LD_INT 112
46394: PUSH
46395: LD_INT 116
46397: PUSH
46398: LD_INT 117
46400: PUSH
46401: LD_INT 118
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: ST_TO_ADDR
46420: GO 48943
46422: LD_INT 7
46424: DOUBLE
46425: EQUAL
46426: IFTRUE 46430
46428: GO 46542
46430: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
46431: LD_ADDR_VAR 0 2
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 4
46441: PUSH
46442: LD_INT 5
46444: PUSH
46445: LD_INT 7
46447: PUSH
46448: LD_INT 11
46450: PUSH
46451: LD_INT 12
46453: PUSH
46454: LD_INT 15
46456: PUSH
46457: LD_INT 16
46459: PUSH
46460: LD_INT 20
46462: PUSH
46463: LD_INT 21
46465: PUSH
46466: LD_INT 22
46468: PUSH
46469: LD_INT 23
46471: PUSH
46472: LD_INT 25
46474: PUSH
46475: LD_INT 26
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 101
46496: PUSH
46497: LD_INT 102
46499: PUSH
46500: LD_INT 103
46502: PUSH
46503: LD_INT 105
46505: PUSH
46506: LD_INT 106
46508: PUSH
46509: LD_INT 108
46511: PUSH
46512: LD_INT 112
46514: PUSH
46515: LD_INT 116
46517: PUSH
46518: LD_INT 117
46520: PUSH
46521: LD_INT 118
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: ST_TO_ADDR
46540: GO 48943
46542: LD_INT 8
46544: DOUBLE
46545: EQUAL
46546: IFTRUE 46550
46548: GO 46690
46550: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
46551: LD_ADDR_VAR 0 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: LD_INT 4
46561: PUSH
46562: LD_INT 5
46564: PUSH
46565: LD_INT 6
46567: PUSH
46568: LD_INT 7
46570: PUSH
46571: LD_INT 8
46573: PUSH
46574: LD_INT 11
46576: PUSH
46577: LD_INT 12
46579: PUSH
46580: LD_INT 15
46582: PUSH
46583: LD_INT 16
46585: PUSH
46586: LD_INT 20
46588: PUSH
46589: LD_INT 21
46591: PUSH
46592: LD_INT 22
46594: PUSH
46595: LD_INT 23
46597: PUSH
46598: LD_INT 25
46600: PUSH
46601: LD_INT 26
46603: PUSH
46604: LD_INT 30
46606: PUSH
46607: LD_INT 31
46609: PUSH
46610: LD_INT 32
46612: PUSH
46613: LD_INT 36
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 101
46640: PUSH
46641: LD_INT 102
46643: PUSH
46644: LD_INT 103
46646: PUSH
46647: LD_INT 105
46649: PUSH
46650: LD_INT 106
46652: PUSH
46653: LD_INT 108
46655: PUSH
46656: LD_INT 109
46658: PUSH
46659: LD_INT 112
46661: PUSH
46662: LD_INT 116
46664: PUSH
46665: LD_INT 117
46667: PUSH
46668: LD_INT 118
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: ST_TO_ADDR
46688: GO 48943
46690: LD_INT 9
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46846
46698: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
46699: LD_ADDR_VAR 0 2
46703: PUSH
46704: LD_INT 2
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: LD_INT 5
46712: PUSH
46713: LD_INT 6
46715: PUSH
46716: LD_INT 7
46718: PUSH
46719: LD_INT 8
46721: PUSH
46722: LD_INT 11
46724: PUSH
46725: LD_INT 12
46727: PUSH
46728: LD_INT 15
46730: PUSH
46731: LD_INT 16
46733: PUSH
46734: LD_INT 20
46736: PUSH
46737: LD_INT 21
46739: PUSH
46740: LD_INT 22
46742: PUSH
46743: LD_INT 23
46745: PUSH
46746: LD_INT 25
46748: PUSH
46749: LD_INT 26
46751: PUSH
46752: LD_INT 28
46754: PUSH
46755: LD_INT 30
46757: PUSH
46758: LD_INT 31
46760: PUSH
46761: LD_INT 32
46763: PUSH
46764: LD_INT 36
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 101
46792: PUSH
46793: LD_INT 102
46795: PUSH
46796: LD_INT 103
46798: PUSH
46799: LD_INT 105
46801: PUSH
46802: LD_INT 106
46804: PUSH
46805: LD_INT 108
46807: PUSH
46808: LD_INT 109
46810: PUSH
46811: LD_INT 112
46813: PUSH
46814: LD_INT 114
46816: PUSH
46817: LD_INT 116
46819: PUSH
46820: LD_INT 117
46822: PUSH
46823: LD_INT 118
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: ST_TO_ADDR
46844: GO 48943
46846: LD_INT 10
46848: DOUBLE
46849: EQUAL
46850: IFTRUE 46854
46852: GO 47050
46854: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
46855: LD_ADDR_VAR 0 2
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 4
46865: PUSH
46866: LD_INT 5
46868: PUSH
46869: LD_INT 6
46871: PUSH
46872: LD_INT 7
46874: PUSH
46875: LD_INT 8
46877: PUSH
46878: LD_INT 9
46880: PUSH
46881: LD_INT 10
46883: PUSH
46884: LD_INT 11
46886: PUSH
46887: LD_INT 12
46889: PUSH
46890: LD_INT 13
46892: PUSH
46893: LD_INT 14
46895: PUSH
46896: LD_INT 15
46898: PUSH
46899: LD_INT 16
46901: PUSH
46902: LD_INT 17
46904: PUSH
46905: LD_INT 18
46907: PUSH
46908: LD_INT 19
46910: PUSH
46911: LD_INT 20
46913: PUSH
46914: LD_INT 21
46916: PUSH
46917: LD_INT 22
46919: PUSH
46920: LD_INT 23
46922: PUSH
46923: LD_INT 24
46925: PUSH
46926: LD_INT 25
46928: PUSH
46929: LD_INT 26
46931: PUSH
46932: LD_INT 28
46934: PUSH
46935: LD_INT 30
46937: PUSH
46938: LD_INT 31
46940: PUSH
46941: LD_INT 32
46943: PUSH
46944: LD_INT 36
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 101
46980: PUSH
46981: LD_INT 102
46983: PUSH
46984: LD_INT 103
46986: PUSH
46987: LD_INT 104
46989: PUSH
46990: LD_INT 105
46992: PUSH
46993: LD_INT 106
46995: PUSH
46996: LD_INT 107
46998: PUSH
46999: LD_INT 108
47001: PUSH
47002: LD_INT 109
47004: PUSH
47005: LD_INT 110
47007: PUSH
47008: LD_INT 111
47010: PUSH
47011: LD_INT 112
47013: PUSH
47014: LD_INT 114
47016: PUSH
47017: LD_INT 116
47019: PUSH
47020: LD_INT 117
47022: PUSH
47023: LD_INT 118
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: ST_TO_ADDR
47048: GO 48943
47050: LD_INT 11
47052: DOUBLE
47053: EQUAL
47054: IFTRUE 47058
47056: GO 47262
47058: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
47059: LD_ADDR_VAR 0 2
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 4
47072: PUSH
47073: LD_INT 5
47075: PUSH
47076: LD_INT 6
47078: PUSH
47079: LD_INT 7
47081: PUSH
47082: LD_INT 8
47084: PUSH
47085: LD_INT 9
47087: PUSH
47088: LD_INT 10
47090: PUSH
47091: LD_INT 11
47093: PUSH
47094: LD_INT 12
47096: PUSH
47097: LD_INT 13
47099: PUSH
47100: LD_INT 14
47102: PUSH
47103: LD_INT 15
47105: PUSH
47106: LD_INT 16
47108: PUSH
47109: LD_INT 17
47111: PUSH
47112: LD_INT 18
47114: PUSH
47115: LD_INT 19
47117: PUSH
47118: LD_INT 20
47120: PUSH
47121: LD_INT 21
47123: PUSH
47124: LD_INT 22
47126: PUSH
47127: LD_INT 23
47129: PUSH
47130: LD_INT 24
47132: PUSH
47133: LD_INT 25
47135: PUSH
47136: LD_INT 26
47138: PUSH
47139: LD_INT 28
47141: PUSH
47142: LD_INT 30
47144: PUSH
47145: LD_INT 31
47147: PUSH
47148: LD_INT 32
47150: PUSH
47151: LD_INT 34
47153: PUSH
47154: LD_INT 36
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 101
47192: PUSH
47193: LD_INT 102
47195: PUSH
47196: LD_INT 103
47198: PUSH
47199: LD_INT 104
47201: PUSH
47202: LD_INT 105
47204: PUSH
47205: LD_INT 106
47207: PUSH
47208: LD_INT 107
47210: PUSH
47211: LD_INT 108
47213: PUSH
47214: LD_INT 109
47216: PUSH
47217: LD_INT 110
47219: PUSH
47220: LD_INT 111
47222: PUSH
47223: LD_INT 112
47225: PUSH
47226: LD_INT 114
47228: PUSH
47229: LD_INT 116
47231: PUSH
47232: LD_INT 117
47234: PUSH
47235: LD_INT 118
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: ST_TO_ADDR
47260: GO 48943
47262: LD_INT 12
47264: DOUBLE
47265: EQUAL
47266: IFTRUE 47270
47268: GO 47490
47270: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
47271: LD_ADDR_VAR 0 2
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 2
47281: PUSH
47282: LD_INT 3
47284: PUSH
47285: LD_INT 4
47287: PUSH
47288: LD_INT 5
47290: PUSH
47291: LD_INT 6
47293: PUSH
47294: LD_INT 7
47296: PUSH
47297: LD_INT 8
47299: PUSH
47300: LD_INT 9
47302: PUSH
47303: LD_INT 10
47305: PUSH
47306: LD_INT 11
47308: PUSH
47309: LD_INT 12
47311: PUSH
47312: LD_INT 13
47314: PUSH
47315: LD_INT 14
47317: PUSH
47318: LD_INT 15
47320: PUSH
47321: LD_INT 16
47323: PUSH
47324: LD_INT 17
47326: PUSH
47327: LD_INT 18
47329: PUSH
47330: LD_INT 19
47332: PUSH
47333: LD_INT 20
47335: PUSH
47336: LD_INT 21
47338: PUSH
47339: LD_INT 22
47341: PUSH
47342: LD_INT 23
47344: PUSH
47345: LD_INT 24
47347: PUSH
47348: LD_INT 25
47350: PUSH
47351: LD_INT 26
47353: PUSH
47354: LD_INT 27
47356: PUSH
47357: LD_INT 28
47359: PUSH
47360: LD_INT 30
47362: PUSH
47363: LD_INT 31
47365: PUSH
47366: LD_INT 32
47368: PUSH
47369: LD_INT 33
47371: PUSH
47372: LD_INT 34
47374: PUSH
47375: LD_INT 36
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 101
47416: PUSH
47417: LD_INT 102
47419: PUSH
47420: LD_INT 103
47422: PUSH
47423: LD_INT 104
47425: PUSH
47426: LD_INT 105
47428: PUSH
47429: LD_INT 106
47431: PUSH
47432: LD_INT 107
47434: PUSH
47435: LD_INT 108
47437: PUSH
47438: LD_INT 109
47440: PUSH
47441: LD_INT 110
47443: PUSH
47444: LD_INT 111
47446: PUSH
47447: LD_INT 112
47449: PUSH
47450: LD_INT 113
47452: PUSH
47453: LD_INT 114
47455: PUSH
47456: LD_INT 116
47458: PUSH
47459: LD_INT 117
47461: PUSH
47462: LD_INT 118
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: ST_TO_ADDR
47488: GO 48943
47490: LD_INT 13
47492: DOUBLE
47493: EQUAL
47494: IFTRUE 47498
47496: GO 47706
47498: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
47499: LD_ADDR_VAR 0 2
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 3
47512: PUSH
47513: LD_INT 4
47515: PUSH
47516: LD_INT 5
47518: PUSH
47519: LD_INT 8
47521: PUSH
47522: LD_INT 9
47524: PUSH
47525: LD_INT 10
47527: PUSH
47528: LD_INT 11
47530: PUSH
47531: LD_INT 12
47533: PUSH
47534: LD_INT 14
47536: PUSH
47537: LD_INT 15
47539: PUSH
47540: LD_INT 16
47542: PUSH
47543: LD_INT 17
47545: PUSH
47546: LD_INT 18
47548: PUSH
47549: LD_INT 19
47551: PUSH
47552: LD_INT 20
47554: PUSH
47555: LD_INT 21
47557: PUSH
47558: LD_INT 22
47560: PUSH
47561: LD_INT 23
47563: PUSH
47564: LD_INT 24
47566: PUSH
47567: LD_INT 25
47569: PUSH
47570: LD_INT 26
47572: PUSH
47573: LD_INT 27
47575: PUSH
47576: LD_INT 28
47578: PUSH
47579: LD_INT 30
47581: PUSH
47582: LD_INT 31
47584: PUSH
47585: LD_INT 32
47587: PUSH
47588: LD_INT 33
47590: PUSH
47591: LD_INT 34
47593: PUSH
47594: LD_INT 36
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 101
47632: PUSH
47633: LD_INT 102
47635: PUSH
47636: LD_INT 103
47638: PUSH
47639: LD_INT 104
47641: PUSH
47642: LD_INT 105
47644: PUSH
47645: LD_INT 106
47647: PUSH
47648: LD_INT 107
47650: PUSH
47651: LD_INT 108
47653: PUSH
47654: LD_INT 109
47656: PUSH
47657: LD_INT 110
47659: PUSH
47660: LD_INT 111
47662: PUSH
47663: LD_INT 112
47665: PUSH
47666: LD_INT 113
47668: PUSH
47669: LD_INT 114
47671: PUSH
47672: LD_INT 116
47674: PUSH
47675: LD_INT 117
47677: PUSH
47678: LD_INT 118
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: ST_TO_ADDR
47704: GO 48943
47706: LD_INT 14
47708: DOUBLE
47709: EQUAL
47710: IFTRUE 47714
47712: GO 47938
47714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
47715: LD_ADDR_VAR 0 2
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: LD_INT 4
47731: PUSH
47732: LD_INT 5
47734: PUSH
47735: LD_INT 6
47737: PUSH
47738: LD_INT 7
47740: PUSH
47741: LD_INT 8
47743: PUSH
47744: LD_INT 9
47746: PUSH
47747: LD_INT 10
47749: PUSH
47750: LD_INT 11
47752: PUSH
47753: LD_INT 12
47755: PUSH
47756: LD_INT 13
47758: PUSH
47759: LD_INT 14
47761: PUSH
47762: LD_INT 15
47764: PUSH
47765: LD_INT 16
47767: PUSH
47768: LD_INT 17
47770: PUSH
47771: LD_INT 18
47773: PUSH
47774: LD_INT 19
47776: PUSH
47777: LD_INT 20
47779: PUSH
47780: LD_INT 21
47782: PUSH
47783: LD_INT 22
47785: PUSH
47786: LD_INT 23
47788: PUSH
47789: LD_INT 24
47791: PUSH
47792: LD_INT 25
47794: PUSH
47795: LD_INT 26
47797: PUSH
47798: LD_INT 27
47800: PUSH
47801: LD_INT 28
47803: PUSH
47804: LD_INT 29
47806: PUSH
47807: LD_INT 30
47809: PUSH
47810: LD_INT 31
47812: PUSH
47813: LD_INT 32
47815: PUSH
47816: LD_INT 33
47818: PUSH
47819: LD_INT 34
47821: PUSH
47822: LD_INT 36
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 101
47864: PUSH
47865: LD_INT 102
47867: PUSH
47868: LD_INT 103
47870: PUSH
47871: LD_INT 104
47873: PUSH
47874: LD_INT 105
47876: PUSH
47877: LD_INT 106
47879: PUSH
47880: LD_INT 107
47882: PUSH
47883: LD_INT 108
47885: PUSH
47886: LD_INT 109
47888: PUSH
47889: LD_INT 110
47891: PUSH
47892: LD_INT 111
47894: PUSH
47895: LD_INT 112
47897: PUSH
47898: LD_INT 113
47900: PUSH
47901: LD_INT 114
47903: PUSH
47904: LD_INT 116
47906: PUSH
47907: LD_INT 117
47909: PUSH
47910: LD_INT 118
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: ST_TO_ADDR
47936: GO 48943
47938: LD_INT 15
47940: DOUBLE
47941: EQUAL
47942: IFTRUE 47946
47944: GO 48170
47946: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
47947: LD_ADDR_VAR 0 2
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 2
47957: PUSH
47958: LD_INT 3
47960: PUSH
47961: LD_INT 4
47963: PUSH
47964: LD_INT 5
47966: PUSH
47967: LD_INT 6
47969: PUSH
47970: LD_INT 7
47972: PUSH
47973: LD_INT 8
47975: PUSH
47976: LD_INT 9
47978: PUSH
47979: LD_INT 10
47981: PUSH
47982: LD_INT 11
47984: PUSH
47985: LD_INT 12
47987: PUSH
47988: LD_INT 13
47990: PUSH
47991: LD_INT 14
47993: PUSH
47994: LD_INT 15
47996: PUSH
47997: LD_INT 16
47999: PUSH
48000: LD_INT 17
48002: PUSH
48003: LD_INT 18
48005: PUSH
48006: LD_INT 19
48008: PUSH
48009: LD_INT 20
48011: PUSH
48012: LD_INT 21
48014: PUSH
48015: LD_INT 22
48017: PUSH
48018: LD_INT 23
48020: PUSH
48021: LD_INT 24
48023: PUSH
48024: LD_INT 25
48026: PUSH
48027: LD_INT 26
48029: PUSH
48030: LD_INT 27
48032: PUSH
48033: LD_INT 28
48035: PUSH
48036: LD_INT 29
48038: PUSH
48039: LD_INT 30
48041: PUSH
48042: LD_INT 31
48044: PUSH
48045: LD_INT 32
48047: PUSH
48048: LD_INT 33
48050: PUSH
48051: LD_INT 34
48053: PUSH
48054: LD_INT 36
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 101
48096: PUSH
48097: LD_INT 102
48099: PUSH
48100: LD_INT 103
48102: PUSH
48103: LD_INT 104
48105: PUSH
48106: LD_INT 105
48108: PUSH
48109: LD_INT 106
48111: PUSH
48112: LD_INT 107
48114: PUSH
48115: LD_INT 108
48117: PUSH
48118: LD_INT 109
48120: PUSH
48121: LD_INT 110
48123: PUSH
48124: LD_INT 111
48126: PUSH
48127: LD_INT 112
48129: PUSH
48130: LD_INT 113
48132: PUSH
48133: LD_INT 114
48135: PUSH
48136: LD_INT 116
48138: PUSH
48139: LD_INT 117
48141: PUSH
48142: LD_INT 118
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: ST_TO_ADDR
48168: GO 48943
48170: LD_INT 16
48172: DOUBLE
48173: EQUAL
48174: IFTRUE 48178
48176: GO 48314
48178: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
48179: LD_ADDR_VAR 0 2
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 4
48189: PUSH
48190: LD_INT 5
48192: PUSH
48193: LD_INT 7
48195: PUSH
48196: LD_INT 11
48198: PUSH
48199: LD_INT 12
48201: PUSH
48202: LD_INT 15
48204: PUSH
48205: LD_INT 16
48207: PUSH
48208: LD_INT 20
48210: PUSH
48211: LD_INT 21
48213: PUSH
48214: LD_INT 22
48216: PUSH
48217: LD_INT 23
48219: PUSH
48220: LD_INT 25
48222: PUSH
48223: LD_INT 26
48225: PUSH
48226: LD_INT 30
48228: PUSH
48229: LD_INT 31
48231: PUSH
48232: LD_INT 32
48234: PUSH
48235: LD_INT 33
48237: PUSH
48238: LD_INT 34
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 101
48264: PUSH
48265: LD_INT 102
48267: PUSH
48268: LD_INT 103
48270: PUSH
48271: LD_INT 106
48273: PUSH
48274: LD_INT 108
48276: PUSH
48277: LD_INT 112
48279: PUSH
48280: LD_INT 113
48282: PUSH
48283: LD_INT 114
48285: PUSH
48286: LD_INT 116
48288: PUSH
48289: LD_INT 117
48291: PUSH
48292: LD_INT 118
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: LIST
48299: LIST
48300: LIST
48301: LIST
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: ST_TO_ADDR
48312: GO 48943
48314: LD_INT 17
48316: DOUBLE
48317: EQUAL
48318: IFTRUE 48322
48320: GO 48546
48322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
48323: LD_ADDR_VAR 0 2
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: LD_INT 4
48339: PUSH
48340: LD_INT 5
48342: PUSH
48343: LD_INT 6
48345: PUSH
48346: LD_INT 7
48348: PUSH
48349: LD_INT 8
48351: PUSH
48352: LD_INT 9
48354: PUSH
48355: LD_INT 10
48357: PUSH
48358: LD_INT 11
48360: PUSH
48361: LD_INT 12
48363: PUSH
48364: LD_INT 13
48366: PUSH
48367: LD_INT 14
48369: PUSH
48370: LD_INT 15
48372: PUSH
48373: LD_INT 16
48375: PUSH
48376: LD_INT 17
48378: PUSH
48379: LD_INT 18
48381: PUSH
48382: LD_INT 19
48384: PUSH
48385: LD_INT 20
48387: PUSH
48388: LD_INT 21
48390: PUSH
48391: LD_INT 22
48393: PUSH
48394: LD_INT 23
48396: PUSH
48397: LD_INT 24
48399: PUSH
48400: LD_INT 25
48402: PUSH
48403: LD_INT 26
48405: PUSH
48406: LD_INT 27
48408: PUSH
48409: LD_INT 28
48411: PUSH
48412: LD_INT 29
48414: PUSH
48415: LD_INT 30
48417: PUSH
48418: LD_INT 31
48420: PUSH
48421: LD_INT 32
48423: PUSH
48424: LD_INT 33
48426: PUSH
48427: LD_INT 34
48429: PUSH
48430: LD_INT 36
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 101
48472: PUSH
48473: LD_INT 102
48475: PUSH
48476: LD_INT 103
48478: PUSH
48479: LD_INT 104
48481: PUSH
48482: LD_INT 105
48484: PUSH
48485: LD_INT 106
48487: PUSH
48488: LD_INT 107
48490: PUSH
48491: LD_INT 108
48493: PUSH
48494: LD_INT 109
48496: PUSH
48497: LD_INT 110
48499: PUSH
48500: LD_INT 111
48502: PUSH
48503: LD_INT 112
48505: PUSH
48506: LD_INT 113
48508: PUSH
48509: LD_INT 114
48511: PUSH
48512: LD_INT 116
48514: PUSH
48515: LD_INT 117
48517: PUSH
48518: LD_INT 118
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: ST_TO_ADDR
48544: GO 48943
48546: LD_INT 18
48548: DOUBLE
48549: EQUAL
48550: IFTRUE 48554
48552: GO 48702
48554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
48555: LD_ADDR_VAR 0 2
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: LD_INT 4
48565: PUSH
48566: LD_INT 5
48568: PUSH
48569: LD_INT 7
48571: PUSH
48572: LD_INT 11
48574: PUSH
48575: LD_INT 12
48577: PUSH
48578: LD_INT 15
48580: PUSH
48581: LD_INT 16
48583: PUSH
48584: LD_INT 20
48586: PUSH
48587: LD_INT 21
48589: PUSH
48590: LD_INT 22
48592: PUSH
48593: LD_INT 23
48595: PUSH
48596: LD_INT 25
48598: PUSH
48599: LD_INT 26
48601: PUSH
48602: LD_INT 30
48604: PUSH
48605: LD_INT 31
48607: PUSH
48608: LD_INT 32
48610: PUSH
48611: LD_INT 33
48613: PUSH
48614: LD_INT 34
48616: PUSH
48617: LD_INT 35
48619: PUSH
48620: LD_INT 36
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 101
48648: PUSH
48649: LD_INT 102
48651: PUSH
48652: LD_INT 103
48654: PUSH
48655: LD_INT 106
48657: PUSH
48658: LD_INT 108
48660: PUSH
48661: LD_INT 112
48663: PUSH
48664: LD_INT 113
48666: PUSH
48667: LD_INT 114
48669: PUSH
48670: LD_INT 115
48672: PUSH
48673: LD_INT 116
48675: PUSH
48676: LD_INT 117
48678: PUSH
48679: LD_INT 118
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: ST_TO_ADDR
48700: GO 48943
48702: LD_INT 19
48704: DOUBLE
48705: EQUAL
48706: IFTRUE 48710
48708: GO 48942
48710: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
48711: LD_ADDR_VAR 0 2
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: LD_INT 4
48727: PUSH
48728: LD_INT 5
48730: PUSH
48731: LD_INT 6
48733: PUSH
48734: LD_INT 7
48736: PUSH
48737: LD_INT 8
48739: PUSH
48740: LD_INT 9
48742: PUSH
48743: LD_INT 10
48745: PUSH
48746: LD_INT 11
48748: PUSH
48749: LD_INT 12
48751: PUSH
48752: LD_INT 13
48754: PUSH
48755: LD_INT 14
48757: PUSH
48758: LD_INT 15
48760: PUSH
48761: LD_INT 16
48763: PUSH
48764: LD_INT 17
48766: PUSH
48767: LD_INT 18
48769: PUSH
48770: LD_INT 19
48772: PUSH
48773: LD_INT 20
48775: PUSH
48776: LD_INT 21
48778: PUSH
48779: LD_INT 22
48781: PUSH
48782: LD_INT 23
48784: PUSH
48785: LD_INT 24
48787: PUSH
48788: LD_INT 25
48790: PUSH
48791: LD_INT 26
48793: PUSH
48794: LD_INT 27
48796: PUSH
48797: LD_INT 28
48799: PUSH
48800: LD_INT 29
48802: PUSH
48803: LD_INT 30
48805: PUSH
48806: LD_INT 31
48808: PUSH
48809: LD_INT 32
48811: PUSH
48812: LD_INT 33
48814: PUSH
48815: LD_INT 34
48817: PUSH
48818: LD_INT 35
48820: PUSH
48821: LD_INT 36
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 101
48864: PUSH
48865: LD_INT 102
48867: PUSH
48868: LD_INT 103
48870: PUSH
48871: LD_INT 104
48873: PUSH
48874: LD_INT 105
48876: PUSH
48877: LD_INT 106
48879: PUSH
48880: LD_INT 107
48882: PUSH
48883: LD_INT 108
48885: PUSH
48886: LD_INT 109
48888: PUSH
48889: LD_INT 110
48891: PUSH
48892: LD_INT 111
48894: PUSH
48895: LD_INT 112
48897: PUSH
48898: LD_INT 113
48900: PUSH
48901: LD_INT 114
48903: PUSH
48904: LD_INT 115
48906: PUSH
48907: LD_INT 116
48909: PUSH
48910: LD_INT 117
48912: PUSH
48913: LD_INT 118
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: ST_TO_ADDR
48940: GO 48943
48942: POP
// end else
48943: GO 49174
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
48945: LD_ADDR_VAR 0 2
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 3
48958: PUSH
48959: LD_INT 4
48961: PUSH
48962: LD_INT 5
48964: PUSH
48965: LD_INT 6
48967: PUSH
48968: LD_INT 7
48970: PUSH
48971: LD_INT 8
48973: PUSH
48974: LD_INT 9
48976: PUSH
48977: LD_INT 10
48979: PUSH
48980: LD_INT 11
48982: PUSH
48983: LD_INT 12
48985: PUSH
48986: LD_INT 13
48988: PUSH
48989: LD_INT 14
48991: PUSH
48992: LD_INT 15
48994: PUSH
48995: LD_INT 16
48997: PUSH
48998: LD_INT 17
49000: PUSH
49001: LD_INT 18
49003: PUSH
49004: LD_INT 19
49006: PUSH
49007: LD_INT 20
49009: PUSH
49010: LD_INT 21
49012: PUSH
49013: LD_INT 22
49015: PUSH
49016: LD_INT 23
49018: PUSH
49019: LD_INT 24
49021: PUSH
49022: LD_INT 25
49024: PUSH
49025: LD_INT 26
49027: PUSH
49028: LD_INT 27
49030: PUSH
49031: LD_INT 28
49033: PUSH
49034: LD_INT 29
49036: PUSH
49037: LD_INT 30
49039: PUSH
49040: LD_INT 31
49042: PUSH
49043: LD_INT 32
49045: PUSH
49046: LD_INT 33
49048: PUSH
49049: LD_INT 34
49051: PUSH
49052: LD_INT 35
49054: PUSH
49055: LD_INT 36
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 101
49098: PUSH
49099: LD_INT 102
49101: PUSH
49102: LD_INT 103
49104: PUSH
49105: LD_INT 104
49107: PUSH
49108: LD_INT 105
49110: PUSH
49111: LD_INT 106
49113: PUSH
49114: LD_INT 107
49116: PUSH
49117: LD_INT 108
49119: PUSH
49120: LD_INT 109
49122: PUSH
49123: LD_INT 110
49125: PUSH
49126: LD_INT 111
49128: PUSH
49129: LD_INT 112
49131: PUSH
49132: LD_INT 113
49134: PUSH
49135: LD_INT 114
49137: PUSH
49138: LD_INT 115
49140: PUSH
49141: LD_INT 116
49143: PUSH
49144: LD_INT 117
49146: PUSH
49147: LD_INT 118
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// if result then
49174: LD_VAR 0 2
49178: IFFALSE 49964
// begin normal :=  ;
49180: LD_ADDR_VAR 0 5
49184: PUSH
49185: LD_STRING 
49187: ST_TO_ADDR
// hardcore :=  ;
49188: LD_ADDR_VAR 0 6
49192: PUSH
49193: LD_STRING 
49195: ST_TO_ADDR
// active :=  ;
49196: LD_ADDR_VAR 0 7
49200: PUSH
49201: LD_STRING 
49203: ST_TO_ADDR
// for i = 1 to normalCounter do
49204: LD_ADDR_VAR 0 8
49208: PUSH
49209: DOUBLE
49210: LD_INT 1
49212: DEC
49213: ST_TO_ADDR
49214: LD_EXP 40
49218: PUSH
49219: FOR_TO
49220: IFFALSE 49321
// begin tmp := 0 ;
49222: LD_ADDR_VAR 0 3
49226: PUSH
49227: LD_STRING 0
49229: ST_TO_ADDR
// if result [ 1 ] then
49230: LD_VAR 0 2
49234: PUSH
49235: LD_INT 1
49237: ARRAY
49238: IFFALSE 49303
// if result [ 1 ] [ 1 ] = i then
49240: LD_VAR 0 2
49244: PUSH
49245: LD_INT 1
49247: ARRAY
49248: PUSH
49249: LD_INT 1
49251: ARRAY
49252: PUSH
49253: LD_VAR 0 8
49257: EQUAL
49258: IFFALSE 49303
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
49260: LD_ADDR_VAR 0 2
49264: PUSH
49265: LD_VAR 0 2
49269: PPUSH
49270: LD_INT 1
49272: PPUSH
49273: LD_VAR 0 2
49277: PUSH
49278: LD_INT 1
49280: ARRAY
49281: PPUSH
49282: LD_INT 1
49284: PPUSH
49285: CALL_OW 3
49289: PPUSH
49290: CALL_OW 1
49294: ST_TO_ADDR
// tmp := 1 ;
49295: LD_ADDR_VAR 0 3
49299: PUSH
49300: LD_STRING 1
49302: ST_TO_ADDR
// end ; normal := normal & tmp ;
49303: LD_ADDR_VAR 0 5
49307: PUSH
49308: LD_VAR 0 5
49312: PUSH
49313: LD_VAR 0 3
49317: STR
49318: ST_TO_ADDR
// end ;
49319: GO 49219
49321: POP
49322: POP
// for i = 1 to hardcoreCounter do
49323: LD_ADDR_VAR 0 8
49327: PUSH
49328: DOUBLE
49329: LD_INT 1
49331: DEC
49332: ST_TO_ADDR
49333: LD_EXP 41
49337: PUSH
49338: FOR_TO
49339: IFFALSE 49444
// begin tmp := 0 ;
49341: LD_ADDR_VAR 0 3
49345: PUSH
49346: LD_STRING 0
49348: ST_TO_ADDR
// if result [ 2 ] then
49349: LD_VAR 0 2
49353: PUSH
49354: LD_INT 2
49356: ARRAY
49357: IFFALSE 49426
// if result [ 2 ] [ 1 ] = 100 + i then
49359: LD_VAR 0 2
49363: PUSH
49364: LD_INT 2
49366: ARRAY
49367: PUSH
49368: LD_INT 1
49370: ARRAY
49371: PUSH
49372: LD_INT 100
49374: PUSH
49375: LD_VAR 0 8
49379: PLUS
49380: EQUAL
49381: IFFALSE 49426
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
49383: LD_ADDR_VAR 0 2
49387: PUSH
49388: LD_VAR 0 2
49392: PPUSH
49393: LD_INT 2
49395: PPUSH
49396: LD_VAR 0 2
49400: PUSH
49401: LD_INT 2
49403: ARRAY
49404: PPUSH
49405: LD_INT 1
49407: PPUSH
49408: CALL_OW 3
49412: PPUSH
49413: CALL_OW 1
49417: ST_TO_ADDR
// tmp := 1 ;
49418: LD_ADDR_VAR 0 3
49422: PUSH
49423: LD_STRING 1
49425: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
49426: LD_ADDR_VAR 0 6
49430: PUSH
49431: LD_VAR 0 6
49435: PUSH
49436: LD_VAR 0 3
49440: STR
49441: ST_TO_ADDR
// end ;
49442: GO 49338
49444: POP
49445: POP
// if isGameLoad then
49446: LD_VAR 0 1
49450: IFFALSE 49925
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
49452: LD_ADDR_VAR 0 4
49456: PUSH
49457: LD_EXP 44
49461: PUSH
49462: LD_EXP 43
49466: PUSH
49467: LD_EXP 45
49471: PUSH
49472: LD_EXP 42
49476: PUSH
49477: LD_EXP 46
49481: PUSH
49482: LD_EXP 47
49486: PUSH
49487: LD_EXP 48
49491: PUSH
49492: LD_EXP 49
49496: PUSH
49497: LD_EXP 50
49501: PUSH
49502: LD_EXP 51
49506: PUSH
49507: LD_EXP 52
49511: PUSH
49512: LD_EXP 53
49516: PUSH
49517: LD_EXP 54
49521: PUSH
49522: LD_EXP 55
49526: PUSH
49527: LD_EXP 63
49531: PUSH
49532: LD_EXP 64
49536: PUSH
49537: LD_EXP 65
49541: PUSH
49542: LD_EXP 66
49546: PUSH
49547: LD_EXP 68
49551: PUSH
49552: LD_EXP 69
49556: PUSH
49557: LD_EXP 70
49561: PUSH
49562: LD_EXP 73
49566: PUSH
49567: LD_EXP 75
49571: PUSH
49572: LD_EXP 76
49576: PUSH
49577: LD_EXP 77
49581: PUSH
49582: LD_EXP 79
49586: PUSH
49587: LD_EXP 80
49591: PUSH
49592: LD_EXP 83
49596: PUSH
49597: LD_EXP 84
49601: PUSH
49602: LD_EXP 85
49606: PUSH
49607: LD_EXP 86
49611: PUSH
49612: LD_EXP 87
49616: PUSH
49617: LD_EXP 88
49621: PUSH
49622: LD_EXP 89
49626: PUSH
49627: LD_EXP 90
49631: PUSH
49632: LD_EXP 91
49636: PUSH
49637: LD_EXP 56
49641: PUSH
49642: LD_EXP 57
49646: PUSH
49647: LD_EXP 60
49651: PUSH
49652: LD_EXP 61
49656: PUSH
49657: LD_EXP 62
49661: PUSH
49662: LD_EXP 58
49666: PUSH
49667: LD_EXP 59
49671: PUSH
49672: LD_EXP 67
49676: PUSH
49677: LD_EXP 71
49681: PUSH
49682: LD_EXP 72
49686: PUSH
49687: LD_EXP 74
49691: PUSH
49692: LD_EXP 78
49696: PUSH
49697: LD_EXP 81
49701: PUSH
49702: LD_EXP 82
49706: PUSH
49707: LD_EXP 92
49711: PUSH
49712: LD_EXP 93
49716: PUSH
49717: LD_EXP 94
49721: PUSH
49722: LD_EXP 95
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: ST_TO_ADDR
// tmp :=  ;
49783: LD_ADDR_VAR 0 3
49787: PUSH
49788: LD_STRING 
49790: ST_TO_ADDR
// for i = 1 to normalCounter do
49791: LD_ADDR_VAR 0 8
49795: PUSH
49796: DOUBLE
49797: LD_INT 1
49799: DEC
49800: ST_TO_ADDR
49801: LD_EXP 40
49805: PUSH
49806: FOR_TO
49807: IFFALSE 49843
// begin if flags [ i ] then
49809: LD_VAR 0 4
49813: PUSH
49814: LD_VAR 0 8
49818: ARRAY
49819: IFFALSE 49841
// tmp := tmp & i & ; ;
49821: LD_ADDR_VAR 0 3
49825: PUSH
49826: LD_VAR 0 3
49830: PUSH
49831: LD_VAR 0 8
49835: STR
49836: PUSH
49837: LD_STRING ;
49839: STR
49840: ST_TO_ADDR
// end ;
49841: GO 49806
49843: POP
49844: POP
// for i = 1 to hardcoreCounter do
49845: LD_ADDR_VAR 0 8
49849: PUSH
49850: DOUBLE
49851: LD_INT 1
49853: DEC
49854: ST_TO_ADDR
49855: LD_EXP 41
49859: PUSH
49860: FOR_TO
49861: IFFALSE 49907
// begin if flags [ normalCounter + i ] then
49863: LD_VAR 0 4
49867: PUSH
49868: LD_EXP 40
49872: PUSH
49873: LD_VAR 0 8
49877: PLUS
49878: ARRAY
49879: IFFALSE 49905
// tmp := tmp & ( 100 + i ) & ; ;
49881: LD_ADDR_VAR 0 3
49885: PUSH
49886: LD_VAR 0 3
49890: PUSH
49891: LD_INT 100
49893: PUSH
49894: LD_VAR 0 8
49898: PLUS
49899: STR
49900: PUSH
49901: LD_STRING ;
49903: STR
49904: ST_TO_ADDR
// end ;
49905: GO 49860
49907: POP
49908: POP
// if tmp then
49909: LD_VAR 0 3
49913: IFFALSE 49925
// active := tmp ;
49915: LD_ADDR_VAR 0 7
49919: PUSH
49920: LD_VAR 0 3
49924: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
49925: LD_STRING getStreamItemsFromMission("
49927: PUSH
49928: LD_VAR 0 5
49932: STR
49933: PUSH
49934: LD_STRING ","
49936: STR
49937: PUSH
49938: LD_VAR 0 6
49942: STR
49943: PUSH
49944: LD_STRING ","
49946: STR
49947: PUSH
49948: LD_VAR 0 7
49952: STR
49953: PUSH
49954: LD_STRING ")
49956: STR
49957: PPUSH
49958: CALL_OW 559
// end else
49962: GO 49971
// ToLua ( getStreamItemsFromMission("","","") ) ;
49964: LD_STRING getStreamItemsFromMission("","","")
49966: PPUSH
49967: CALL_OW 559
// end ;
49971: LD_VAR 0 2
49975: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
49976: LD_EXP 39
49980: PUSH
49981: LD_EXP 44
49985: AND
49986: IFFALSE 50110
49988: GO 49990
49990: DISABLE
49991: LD_INT 0
49993: PPUSH
49994: PPUSH
// begin enable ;
49995: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
49996: LD_ADDR_VAR 0 2
50000: PUSH
50001: LD_INT 22
50003: PUSH
50004: LD_OWVAR 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 34
50018: PUSH
50019: LD_INT 7
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 34
50028: PUSH
50029: LD_INT 45
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 34
50038: PUSH
50039: LD_INT 28
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 34
50048: PUSH
50049: LD_INT 47
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PPUSH
50067: CALL_OW 69
50071: ST_TO_ADDR
// if not tmp then
50072: LD_VAR 0 2
50076: NOT
50077: IFFALSE 50081
// exit ;
50079: GO 50110
// for i in tmp do
50081: LD_ADDR_VAR 0 1
50085: PUSH
50086: LD_VAR 0 2
50090: PUSH
50091: FOR_IN
50092: IFFALSE 50108
// begin SetLives ( i , 0 ) ;
50094: LD_VAR 0 1
50098: PPUSH
50099: LD_INT 0
50101: PPUSH
50102: CALL_OW 234
// end ;
50106: GO 50091
50108: POP
50109: POP
// end ;
50110: PPOPN 2
50112: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
50113: LD_EXP 39
50117: PUSH
50118: LD_EXP 45
50122: AND
50123: IFFALSE 50207
50125: GO 50127
50127: DISABLE
50128: LD_INT 0
50130: PPUSH
50131: PPUSH
// begin enable ;
50132: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
50133: LD_ADDR_VAR 0 2
50137: PUSH
50138: LD_INT 22
50140: PUSH
50141: LD_OWVAR 2
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 32
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PPUSH
50164: CALL_OW 69
50168: ST_TO_ADDR
// if not tmp then
50169: LD_VAR 0 2
50173: NOT
50174: IFFALSE 50178
// exit ;
50176: GO 50207
// for i in tmp do
50178: LD_ADDR_VAR 0 1
50182: PUSH
50183: LD_VAR 0 2
50187: PUSH
50188: FOR_IN
50189: IFFALSE 50205
// begin SetLives ( i , 0 ) ;
50191: LD_VAR 0 1
50195: PPUSH
50196: LD_INT 0
50198: PPUSH
50199: CALL_OW 234
// end ;
50203: GO 50188
50205: POP
50206: POP
// end ;
50207: PPOPN 2
50209: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
50210: LD_EXP 39
50214: PUSH
50215: LD_EXP 42
50219: AND
50220: IFFALSE 50313
50222: GO 50224
50224: DISABLE
50225: LD_INT 0
50227: PPUSH
// begin enable ;
50228: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
50229: LD_ADDR_VAR 0 1
50233: PUSH
50234: LD_INT 22
50236: PUSH
50237: LD_OWVAR 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: LD_INT 25
50251: PUSH
50252: LD_INT 5
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 25
50261: PUSH
50262: LD_INT 9
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 25
50271: PUSH
50272: LD_INT 8
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PPUSH
50289: CALL_OW 69
50293: PUSH
50294: FOR_IN
50295: IFFALSE 50311
// begin SetClass ( i , 1 ) ;
50297: LD_VAR 0 1
50301: PPUSH
50302: LD_INT 1
50304: PPUSH
50305: CALL_OW 336
// end ;
50309: GO 50294
50311: POP
50312: POP
// end ;
50313: PPOPN 1
50315: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
50316: LD_EXP 39
50320: PUSH
50321: LD_EXP 43
50325: AND
50326: PUSH
50327: LD_OWVAR 65
50331: PUSH
50332: LD_INT 7
50334: LESS
50335: AND
50336: IFFALSE 50350
50338: GO 50340
50340: DISABLE
// begin enable ;
50341: ENABLE
// game_speed := 7 ;
50342: LD_ADDR_OWVAR 65
50346: PUSH
50347: LD_INT 7
50349: ST_TO_ADDR
// end ;
50350: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
50351: LD_EXP 39
50355: PUSH
50356: LD_EXP 46
50360: AND
50361: IFFALSE 50563
50363: GO 50365
50365: DISABLE
50366: LD_INT 0
50368: PPUSH
50369: PPUSH
50370: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
50371: LD_ADDR_VAR 0 3
50375: PUSH
50376: LD_INT 81
50378: PUSH
50379: LD_OWVAR 2
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 21
50390: PUSH
50391: LD_INT 1
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PPUSH
50402: CALL_OW 69
50406: ST_TO_ADDR
// if not tmp then
50407: LD_VAR 0 3
50411: NOT
50412: IFFALSE 50416
// exit ;
50414: GO 50563
// if tmp > 5 then
50416: LD_VAR 0 3
50420: PUSH
50421: LD_INT 5
50423: GREATER
50424: IFFALSE 50436
// k := 5 else
50426: LD_ADDR_VAR 0 2
50430: PUSH
50431: LD_INT 5
50433: ST_TO_ADDR
50434: GO 50446
// k := tmp ;
50436: LD_ADDR_VAR 0 2
50440: PUSH
50441: LD_VAR 0 3
50445: ST_TO_ADDR
// for i := 1 to k do
50446: LD_ADDR_VAR 0 1
50450: PUSH
50451: DOUBLE
50452: LD_INT 1
50454: DEC
50455: ST_TO_ADDR
50456: LD_VAR 0 2
50460: PUSH
50461: FOR_TO
50462: IFFALSE 50561
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
50464: LD_VAR 0 3
50468: PUSH
50469: LD_VAR 0 1
50473: ARRAY
50474: PPUSH
50475: LD_VAR 0 1
50479: PUSH
50480: LD_INT 4
50482: MOD
50483: PUSH
50484: LD_INT 1
50486: PLUS
50487: PPUSH
50488: CALL_OW 259
50492: PUSH
50493: LD_INT 10
50495: LESS
50496: IFFALSE 50559
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
50498: LD_VAR 0 3
50502: PUSH
50503: LD_VAR 0 1
50507: ARRAY
50508: PPUSH
50509: LD_VAR 0 1
50513: PUSH
50514: LD_INT 4
50516: MOD
50517: PUSH
50518: LD_INT 1
50520: PLUS
50521: PPUSH
50522: LD_VAR 0 3
50526: PUSH
50527: LD_VAR 0 1
50531: ARRAY
50532: PPUSH
50533: LD_VAR 0 1
50537: PUSH
50538: LD_INT 4
50540: MOD
50541: PUSH
50542: LD_INT 1
50544: PLUS
50545: PPUSH
50546: CALL_OW 259
50550: PUSH
50551: LD_INT 1
50553: PLUS
50554: PPUSH
50555: CALL_OW 237
50559: GO 50461
50561: POP
50562: POP
// end ;
50563: PPOPN 3
50565: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
50566: LD_EXP 39
50570: PUSH
50571: LD_EXP 47
50575: AND
50576: IFFALSE 50596
50578: GO 50580
50580: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
50581: LD_INT 4
50583: PPUSH
50584: LD_OWVAR 2
50588: PPUSH
50589: LD_INT 0
50591: PPUSH
50592: CALL_OW 324
50596: END
// every 0 0$1 trigger StreamModeActive and sShovel do
50597: LD_EXP 39
50601: PUSH
50602: LD_EXP 76
50606: AND
50607: IFFALSE 50627
50609: GO 50611
50611: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
50612: LD_INT 19
50614: PPUSH
50615: LD_OWVAR 2
50619: PPUSH
50620: LD_INT 0
50622: PPUSH
50623: CALL_OW 324
50627: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
50628: LD_EXP 39
50632: PUSH
50633: LD_EXP 48
50637: AND
50638: IFFALSE 50740
50640: GO 50642
50642: DISABLE
50643: LD_INT 0
50645: PPUSH
50646: PPUSH
// begin enable ;
50647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
50648: LD_ADDR_VAR 0 2
50652: PUSH
50653: LD_INT 22
50655: PUSH
50656: LD_OWVAR 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 2
50667: PUSH
50668: LD_INT 34
50670: PUSH
50671: LD_INT 11
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 34
50680: PUSH
50681: LD_INT 30
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PPUSH
50697: CALL_OW 69
50701: ST_TO_ADDR
// if not tmp then
50702: LD_VAR 0 2
50706: NOT
50707: IFFALSE 50711
// exit ;
50709: GO 50740
// for i in tmp do
50711: LD_ADDR_VAR 0 1
50715: PUSH
50716: LD_VAR 0 2
50720: PUSH
50721: FOR_IN
50722: IFFALSE 50738
// begin SetLives ( i , 0 ) ;
50724: LD_VAR 0 1
50728: PPUSH
50729: LD_INT 0
50731: PPUSH
50732: CALL_OW 234
// end ;
50736: GO 50721
50738: POP
50739: POP
// end ;
50740: PPOPN 2
50742: END
// every 0 0$1 trigger StreamModeActive and sBunker do
50743: LD_EXP 39
50747: PUSH
50748: LD_EXP 49
50752: AND
50753: IFFALSE 50773
50755: GO 50757
50757: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
50758: LD_INT 32
50760: PPUSH
50761: LD_OWVAR 2
50765: PPUSH
50766: LD_INT 0
50768: PPUSH
50769: CALL_OW 324
50773: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
50774: LD_EXP 39
50778: PUSH
50779: LD_EXP 50
50783: AND
50784: IFFALSE 50965
50786: GO 50788
50788: DISABLE
50789: LD_INT 0
50791: PPUSH
50792: PPUSH
50793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
50794: LD_ADDR_VAR 0 2
50798: PUSH
50799: LD_INT 22
50801: PUSH
50802: LD_OWVAR 2
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 33
50813: PUSH
50814: LD_INT 3
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PPUSH
50825: CALL_OW 69
50829: ST_TO_ADDR
// if not tmp then
50830: LD_VAR 0 2
50834: NOT
50835: IFFALSE 50839
// exit ;
50837: GO 50965
// side := 0 ;
50839: LD_ADDR_VAR 0 3
50843: PUSH
50844: LD_INT 0
50846: ST_TO_ADDR
// for i := 1 to 8 do
50847: LD_ADDR_VAR 0 1
50851: PUSH
50852: DOUBLE
50853: LD_INT 1
50855: DEC
50856: ST_TO_ADDR
50857: LD_INT 8
50859: PUSH
50860: FOR_TO
50861: IFFALSE 50909
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
50863: LD_OWVAR 2
50867: PUSH
50868: LD_VAR 0 1
50872: NONEQUAL
50873: PUSH
50874: LD_OWVAR 2
50878: PPUSH
50879: LD_VAR 0 1
50883: PPUSH
50884: CALL_OW 81
50888: PUSH
50889: LD_INT 2
50891: EQUAL
50892: AND
50893: IFFALSE 50907
// begin side := i ;
50895: LD_ADDR_VAR 0 3
50899: PUSH
50900: LD_VAR 0 1
50904: ST_TO_ADDR
// break ;
50905: GO 50909
// end ;
50907: GO 50860
50909: POP
50910: POP
// if not side then
50911: LD_VAR 0 3
50915: NOT
50916: IFFALSE 50920
// exit ;
50918: GO 50965
// for i := 1 to tmp do
50920: LD_ADDR_VAR 0 1
50924: PUSH
50925: DOUBLE
50926: LD_INT 1
50928: DEC
50929: ST_TO_ADDR
50930: LD_VAR 0 2
50934: PUSH
50935: FOR_TO
50936: IFFALSE 50963
// if Prob ( 60 ) then
50938: LD_INT 60
50940: PPUSH
50941: CALL_OW 13
50945: IFFALSE 50961
// SetSide ( i , side ) ;
50947: LD_VAR 0 1
50951: PPUSH
50952: LD_VAR 0 3
50956: PPUSH
50957: CALL_OW 235
50961: GO 50935
50963: POP
50964: POP
// end ;
50965: PPOPN 3
50967: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
50968: LD_EXP 39
50972: PUSH
50973: LD_EXP 52
50977: AND
50978: IFFALSE 51097
50980: GO 50982
50982: DISABLE
50983: LD_INT 0
50985: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
50986: LD_ADDR_VAR 0 1
50990: PUSH
50991: LD_INT 22
50993: PUSH
50994: LD_OWVAR 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 21
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: LD_INT 23
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: LIST
51034: PPUSH
51035: CALL_OW 69
51039: PUSH
51040: FOR_IN
51041: IFFALSE 51095
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
51043: LD_VAR 0 1
51047: PPUSH
51048: CALL_OW 257
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: LD_INT 3
51061: PUSH
51062: LD_INT 4
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: IN
51071: IFFALSE 51093
// SetClass ( un , rand ( 1 , 4 ) ) ;
51073: LD_VAR 0 1
51077: PPUSH
51078: LD_INT 1
51080: PPUSH
51081: LD_INT 4
51083: PPUSH
51084: CALL_OW 12
51088: PPUSH
51089: CALL_OW 336
51093: GO 51040
51095: POP
51096: POP
// end ;
51097: PPOPN 1
51099: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
51100: LD_EXP 39
51104: PUSH
51105: LD_EXP 51
51109: AND
51110: IFFALSE 51189
51112: GO 51114
51114: DISABLE
51115: LD_INT 0
51117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51118: LD_ADDR_VAR 0 1
51122: PUSH
51123: LD_INT 22
51125: PUSH
51126: LD_OWVAR 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 21
51137: PUSH
51138: LD_INT 3
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PPUSH
51149: CALL_OW 69
51153: ST_TO_ADDR
// if not tmp then
51154: LD_VAR 0 1
51158: NOT
51159: IFFALSE 51163
// exit ;
51161: GO 51189
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
51163: LD_VAR 0 1
51167: PUSH
51168: LD_INT 1
51170: PPUSH
51171: LD_VAR 0 1
51175: PPUSH
51176: CALL_OW 12
51180: ARRAY
51181: PPUSH
51182: LD_INT 100
51184: PPUSH
51185: CALL_OW 234
// end ;
51189: PPOPN 1
51191: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
51192: LD_EXP 39
51196: PUSH
51197: LD_EXP 53
51201: AND
51202: IFFALSE 51300
51204: GO 51206
51206: DISABLE
51207: LD_INT 0
51209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
51210: LD_ADDR_VAR 0 1
51214: PUSH
51215: LD_INT 22
51217: PUSH
51218: LD_OWVAR 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 21
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PPUSH
51241: CALL_OW 69
51245: ST_TO_ADDR
// if not tmp then
51246: LD_VAR 0 1
51250: NOT
51251: IFFALSE 51255
// exit ;
51253: GO 51300
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
51255: LD_VAR 0 1
51259: PUSH
51260: LD_INT 1
51262: PPUSH
51263: LD_VAR 0 1
51267: PPUSH
51268: CALL_OW 12
51272: ARRAY
51273: PPUSH
51274: LD_INT 1
51276: PPUSH
51277: LD_INT 4
51279: PPUSH
51280: CALL_OW 12
51284: PPUSH
51285: LD_INT 3000
51287: PPUSH
51288: LD_INT 9000
51290: PPUSH
51291: CALL_OW 12
51295: PPUSH
51296: CALL_OW 492
// end ;
51300: PPOPN 1
51302: END
// every 0 0$1 trigger StreamModeActive and sDepot do
51303: LD_EXP 39
51307: PUSH
51308: LD_EXP 54
51312: AND
51313: IFFALSE 51333
51315: GO 51317
51317: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
51318: LD_INT 1
51320: PPUSH
51321: LD_OWVAR 2
51325: PPUSH
51326: LD_INT 0
51328: PPUSH
51329: CALL_OW 324
51333: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
51334: LD_EXP 39
51338: PUSH
51339: LD_EXP 55
51343: AND
51344: IFFALSE 51427
51346: GO 51348
51348: DISABLE
51349: LD_INT 0
51351: PPUSH
51352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
51353: LD_ADDR_VAR 0 2
51357: PUSH
51358: LD_INT 22
51360: PUSH
51361: LD_OWVAR 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 21
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PPUSH
51384: CALL_OW 69
51388: ST_TO_ADDR
// if not tmp then
51389: LD_VAR 0 2
51393: NOT
51394: IFFALSE 51398
// exit ;
51396: GO 51427
// for i in tmp do
51398: LD_ADDR_VAR 0 1
51402: PUSH
51403: LD_VAR 0 2
51407: PUSH
51408: FOR_IN
51409: IFFALSE 51425
// SetBLevel ( i , 10 ) ;
51411: LD_VAR 0 1
51415: PPUSH
51416: LD_INT 10
51418: PPUSH
51419: CALL_OW 241
51423: GO 51408
51425: POP
51426: POP
// end ;
51427: PPOPN 2
51429: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
51430: LD_EXP 39
51434: PUSH
51435: LD_EXP 56
51439: AND
51440: IFFALSE 51551
51442: GO 51444
51444: DISABLE
51445: LD_INT 0
51447: PPUSH
51448: PPUSH
51449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
51450: LD_ADDR_VAR 0 3
51454: PUSH
51455: LD_INT 22
51457: PUSH
51458: LD_OWVAR 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 25
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PPUSH
51481: CALL_OW 69
51485: ST_TO_ADDR
// if not tmp then
51486: LD_VAR 0 3
51490: NOT
51491: IFFALSE 51495
// exit ;
51493: GO 51551
// un := tmp [ rand ( 1 , tmp ) ] ;
51495: LD_ADDR_VAR 0 2
51499: PUSH
51500: LD_VAR 0 3
51504: PUSH
51505: LD_INT 1
51507: PPUSH
51508: LD_VAR 0 3
51512: PPUSH
51513: CALL_OW 12
51517: ARRAY
51518: ST_TO_ADDR
// if Crawls ( un ) then
51519: LD_VAR 0 2
51523: PPUSH
51524: CALL_OW 318
51528: IFFALSE 51539
// ComWalk ( un ) ;
51530: LD_VAR 0 2
51534: PPUSH
51535: CALL_OW 138
// SetClass ( un , class_sniper ) ;
51539: LD_VAR 0 2
51543: PPUSH
51544: LD_INT 5
51546: PPUSH
51547: CALL_OW 336
// end ;
51551: PPOPN 3
51553: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
51554: LD_EXP 39
51558: PUSH
51559: LD_EXP 57
51563: AND
51564: PUSH
51565: LD_OWVAR 67
51569: PUSH
51570: LD_INT 4
51572: LESS
51573: AND
51574: IFFALSE 51593
51576: GO 51578
51578: DISABLE
// begin Difficulty := Difficulty + 1 ;
51579: LD_ADDR_OWVAR 67
51583: PUSH
51584: LD_OWVAR 67
51588: PUSH
51589: LD_INT 1
51591: PLUS
51592: ST_TO_ADDR
// end ;
51593: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
51594: LD_EXP 39
51598: PUSH
51599: LD_EXP 58
51603: AND
51604: IFFALSE 51707
51606: GO 51608
51608: DISABLE
51609: LD_INT 0
51611: PPUSH
// begin for i := 1 to 5 do
51612: LD_ADDR_VAR 0 1
51616: PUSH
51617: DOUBLE
51618: LD_INT 1
51620: DEC
51621: ST_TO_ADDR
51622: LD_INT 5
51624: PUSH
51625: FOR_TO
51626: IFFALSE 51705
// begin uc_nation := nation_nature ;
51628: LD_ADDR_OWVAR 21
51632: PUSH
51633: LD_INT 0
51635: ST_TO_ADDR
// uc_side := 0 ;
51636: LD_ADDR_OWVAR 20
51640: PUSH
51641: LD_INT 0
51643: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51644: LD_ADDR_OWVAR 29
51648: PUSH
51649: LD_INT 12
51651: PUSH
51652: LD_INT 12
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: ST_TO_ADDR
// hc_agressivity := 20 ;
51659: LD_ADDR_OWVAR 35
51663: PUSH
51664: LD_INT 20
51666: ST_TO_ADDR
// hc_class := class_tiger ;
51667: LD_ADDR_OWVAR 28
51671: PUSH
51672: LD_INT 14
51674: ST_TO_ADDR
// hc_gallery :=  ;
51675: LD_ADDR_OWVAR 33
51679: PUSH
51680: LD_STRING 
51682: ST_TO_ADDR
// hc_name :=  ;
51683: LD_ADDR_OWVAR 26
51687: PUSH
51688: LD_STRING 
51690: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
51691: CALL_OW 44
51695: PPUSH
51696: LD_INT 0
51698: PPUSH
51699: CALL_OW 51
// end ;
51703: GO 51625
51705: POP
51706: POP
// end ;
51707: PPOPN 1
51709: END
// every 0 0$1 trigger StreamModeActive and sBomb do
51710: LD_EXP 39
51714: PUSH
51715: LD_EXP 59
51719: AND
51720: IFFALSE 51729
51722: GO 51724
51724: DISABLE
// StreamSibBomb ;
51725: CALL 51730 0 0
51729: END
// export function StreamSibBomb ; var i , x , y ; begin
51730: LD_INT 0
51732: PPUSH
51733: PPUSH
51734: PPUSH
51735: PPUSH
// result := false ;
51736: LD_ADDR_VAR 0 1
51740: PUSH
51741: LD_INT 0
51743: ST_TO_ADDR
// for i := 1 to 16 do
51744: LD_ADDR_VAR 0 2
51748: PUSH
51749: DOUBLE
51750: LD_INT 1
51752: DEC
51753: ST_TO_ADDR
51754: LD_INT 16
51756: PUSH
51757: FOR_TO
51758: IFFALSE 51957
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51760: LD_ADDR_VAR 0 3
51764: PUSH
51765: LD_INT 10
51767: PUSH
51768: LD_INT 20
51770: PUSH
51771: LD_INT 30
51773: PUSH
51774: LD_INT 40
51776: PUSH
51777: LD_INT 50
51779: PUSH
51780: LD_INT 60
51782: PUSH
51783: LD_INT 70
51785: PUSH
51786: LD_INT 80
51788: PUSH
51789: LD_INT 90
51791: PUSH
51792: LD_INT 100
51794: PUSH
51795: LD_INT 110
51797: PUSH
51798: LD_INT 120
51800: PUSH
51801: LD_INT 130
51803: PUSH
51804: LD_INT 140
51806: PUSH
51807: LD_INT 150
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: PPUSH
51830: LD_INT 15
51832: PPUSH
51833: CALL_OW 12
51837: ARRAY
51838: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
51839: LD_ADDR_VAR 0 4
51843: PUSH
51844: LD_INT 10
51846: PUSH
51847: LD_INT 20
51849: PUSH
51850: LD_INT 30
51852: PUSH
51853: LD_INT 40
51855: PUSH
51856: LD_INT 50
51858: PUSH
51859: LD_INT 60
51861: PUSH
51862: LD_INT 70
51864: PUSH
51865: LD_INT 80
51867: PUSH
51868: LD_INT 90
51870: PUSH
51871: LD_INT 100
51873: PUSH
51874: LD_INT 110
51876: PUSH
51877: LD_INT 120
51879: PUSH
51880: LD_INT 130
51882: PUSH
51883: LD_INT 140
51885: PUSH
51886: LD_INT 150
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PPUSH
51909: LD_INT 15
51911: PPUSH
51912: CALL_OW 12
51916: ARRAY
51917: ST_TO_ADDR
// if ValidHex ( x , y ) then
51918: LD_VAR 0 3
51922: PPUSH
51923: LD_VAR 0 4
51927: PPUSH
51928: CALL_OW 488
51932: IFFALSE 51955
// begin result := [ x , y ] ;
51934: LD_ADDR_VAR 0 1
51938: PUSH
51939: LD_VAR 0 3
51943: PUSH
51944: LD_VAR 0 4
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: ST_TO_ADDR
// break ;
51953: GO 51957
// end ; end ;
51955: GO 51757
51957: POP
51958: POP
// if result then
51959: LD_VAR 0 1
51963: IFFALSE 52023
// begin ToLua ( playSibBomb() ) ;
51965: LD_STRING playSibBomb()
51967: PPUSH
51968: CALL_OW 559
// wait ( 0 0$14 ) ;
51972: LD_INT 490
51974: PPUSH
51975: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
51979: LD_VAR 0 1
51983: PUSH
51984: LD_INT 1
51986: ARRAY
51987: PPUSH
51988: LD_VAR 0 1
51992: PUSH
51993: LD_INT 2
51995: ARRAY
51996: PPUSH
51997: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 1
52008: ARRAY
52009: PPUSH
52010: LD_VAR 0 1
52014: PUSH
52015: LD_INT 2
52017: ARRAY
52018: PPUSH
52019: CALL_OW 429
// end ; end ;
52023: LD_VAR 0 1
52027: RET
// every 0 0$1 trigger StreamModeActive and sReset do
52028: LD_EXP 39
52032: PUSH
52033: LD_EXP 61
52037: AND
52038: IFFALSE 52050
52040: GO 52042
52042: DISABLE
// YouLost (  ) ;
52043: LD_STRING 
52045: PPUSH
52046: CALL_OW 104
52050: END
// every 0 0$1 trigger StreamModeActive and sFog do
52051: LD_EXP 39
52055: PUSH
52056: LD_EXP 60
52060: AND
52061: IFFALSE 52075
52063: GO 52065
52065: DISABLE
// FogOff ( your_side ) ;
52066: LD_OWVAR 2
52070: PPUSH
52071: CALL_OW 344
52075: END
// every 0 0$1 trigger StreamModeActive and sSun do
52076: LD_EXP 39
52080: PUSH
52081: LD_EXP 62
52085: AND
52086: IFFALSE 52114
52088: GO 52090
52090: DISABLE
// begin solar_recharge_percent := 0 ;
52091: LD_ADDR_OWVAR 79
52095: PUSH
52096: LD_INT 0
52098: ST_TO_ADDR
// wait ( 5 5$00 ) ;
52099: LD_INT 10500
52101: PPUSH
52102: CALL_OW 67
// solar_recharge_percent := 100 ;
52106: LD_ADDR_OWVAR 79
52110: PUSH
52111: LD_INT 100
52113: ST_TO_ADDR
// end ;
52114: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
52115: LD_EXP 39
52119: PUSH
52120: LD_EXP 63
52124: AND
52125: IFFALSE 52364
52127: GO 52129
52129: DISABLE
52130: LD_INT 0
52132: PPUSH
52133: PPUSH
52134: PPUSH
// begin tmp := [ ] ;
52135: LD_ADDR_VAR 0 3
52139: PUSH
52140: EMPTY
52141: ST_TO_ADDR
// for i := 1 to 6 do
52142: LD_ADDR_VAR 0 1
52146: PUSH
52147: DOUBLE
52148: LD_INT 1
52150: DEC
52151: ST_TO_ADDR
52152: LD_INT 6
52154: PUSH
52155: FOR_TO
52156: IFFALSE 52261
// begin uc_nation := nation_nature ;
52158: LD_ADDR_OWVAR 21
52162: PUSH
52163: LD_INT 0
52165: ST_TO_ADDR
// uc_side := 0 ;
52166: LD_ADDR_OWVAR 20
52170: PUSH
52171: LD_INT 0
52173: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
52174: LD_ADDR_OWVAR 29
52178: PUSH
52179: LD_INT 12
52181: PUSH
52182: LD_INT 12
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: ST_TO_ADDR
// hc_agressivity := 20 ;
52189: LD_ADDR_OWVAR 35
52193: PUSH
52194: LD_INT 20
52196: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
52197: LD_ADDR_OWVAR 28
52201: PUSH
52202: LD_INT 17
52204: ST_TO_ADDR
// hc_gallery :=  ;
52205: LD_ADDR_OWVAR 33
52209: PUSH
52210: LD_STRING 
52212: ST_TO_ADDR
// hc_name :=  ;
52213: LD_ADDR_OWVAR 26
52217: PUSH
52218: LD_STRING 
52220: ST_TO_ADDR
// un := CreateHuman ;
52221: LD_ADDR_VAR 0 2
52225: PUSH
52226: CALL_OW 44
52230: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
52231: LD_VAR 0 2
52235: PPUSH
52236: LD_INT 1
52238: PPUSH
52239: CALL_OW 51
// tmp := tmp ^ un ;
52243: LD_ADDR_VAR 0 3
52247: PUSH
52248: LD_VAR 0 3
52252: PUSH
52253: LD_VAR 0 2
52257: ADD
52258: ST_TO_ADDR
// end ;
52259: GO 52155
52261: POP
52262: POP
// repeat wait ( 0 0$1 ) ;
52263: LD_INT 35
52265: PPUSH
52266: CALL_OW 67
// for un in tmp do
52270: LD_ADDR_VAR 0 2
52274: PUSH
52275: LD_VAR 0 3
52279: PUSH
52280: FOR_IN
52281: IFFALSE 52355
// begin if IsDead ( un ) then
52283: LD_VAR 0 2
52287: PPUSH
52288: CALL_OW 301
52292: IFFALSE 52312
// begin tmp := tmp diff un ;
52294: LD_ADDR_VAR 0 3
52298: PUSH
52299: LD_VAR 0 3
52303: PUSH
52304: LD_VAR 0 2
52308: DIFF
52309: ST_TO_ADDR
// continue ;
52310: GO 52280
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
52312: LD_VAR 0 2
52316: PPUSH
52317: LD_INT 3
52319: PUSH
52320: LD_INT 22
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PPUSH
52334: CALL_OW 69
52338: PPUSH
52339: LD_VAR 0 2
52343: PPUSH
52344: CALL_OW 74
52348: PPUSH
52349: CALL_OW 115
// end ;
52353: GO 52280
52355: POP
52356: POP
// until not tmp ;
52357: LD_VAR 0 3
52361: NOT
52362: IFFALSE 52263
// end ;
52364: PPOPN 3
52366: END
// every 0 0$1 trigger StreamModeActive and sTroll do
52367: LD_EXP 39
52371: PUSH
52372: LD_EXP 64
52376: AND
52377: IFFALSE 52431
52379: GO 52381
52381: DISABLE
// begin ToLua ( displayTroll(); ) ;
52382: LD_STRING displayTroll();
52384: PPUSH
52385: CALL_OW 559
// wait ( 3 3$00 ) ;
52389: LD_INT 6300
52391: PPUSH
52392: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52396: LD_STRING hideTroll();
52398: PPUSH
52399: CALL_OW 559
// wait ( 1 1$00 ) ;
52403: LD_INT 2100
52405: PPUSH
52406: CALL_OW 67
// ToLua ( displayTroll(); ) ;
52410: LD_STRING displayTroll();
52412: PPUSH
52413: CALL_OW 559
// wait ( 1 1$00 ) ;
52417: LD_INT 2100
52419: PPUSH
52420: CALL_OW 67
// ToLua ( hideTroll(); ) ;
52424: LD_STRING hideTroll();
52426: PPUSH
52427: CALL_OW 559
// end ;
52431: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
52432: LD_EXP 39
52436: PUSH
52437: LD_EXP 65
52441: AND
52442: IFFALSE 52505
52444: GO 52446
52446: DISABLE
52447: LD_INT 0
52449: PPUSH
// begin p := 0 ;
52450: LD_ADDR_VAR 0 1
52454: PUSH
52455: LD_INT 0
52457: ST_TO_ADDR
// repeat game_speed := 1 ;
52458: LD_ADDR_OWVAR 65
52462: PUSH
52463: LD_INT 1
52465: ST_TO_ADDR
// wait ( 0 0$1 ) ;
52466: LD_INT 35
52468: PPUSH
52469: CALL_OW 67
// p := p + 1 ;
52473: LD_ADDR_VAR 0 1
52477: PUSH
52478: LD_VAR 0 1
52482: PUSH
52483: LD_INT 1
52485: PLUS
52486: ST_TO_ADDR
// until p >= 60 ;
52487: LD_VAR 0 1
52491: PUSH
52492: LD_INT 60
52494: GREATEREQUAL
52495: IFFALSE 52458
// game_speed := 4 ;
52497: LD_ADDR_OWVAR 65
52501: PUSH
52502: LD_INT 4
52504: ST_TO_ADDR
// end ;
52505: PPOPN 1
52507: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
52508: LD_EXP 39
52512: PUSH
52513: LD_EXP 66
52517: AND
52518: IFFALSE 52664
52520: GO 52522
52522: DISABLE
52523: LD_INT 0
52525: PPUSH
52526: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52527: LD_ADDR_VAR 0 1
52531: PUSH
52532: LD_INT 22
52534: PUSH
52535: LD_OWVAR 2
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: PUSH
52547: LD_INT 30
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 30
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PPUSH
52576: CALL_OW 69
52580: ST_TO_ADDR
// if not depot then
52581: LD_VAR 0 1
52585: NOT
52586: IFFALSE 52590
// exit ;
52588: GO 52664
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
52590: LD_ADDR_VAR 0 2
52594: PUSH
52595: LD_VAR 0 1
52599: PUSH
52600: LD_INT 1
52602: PPUSH
52603: LD_VAR 0 1
52607: PPUSH
52608: CALL_OW 12
52612: ARRAY
52613: PPUSH
52614: CALL_OW 274
52618: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
52619: LD_VAR 0 2
52623: PPUSH
52624: LD_INT 1
52626: PPUSH
52627: LD_INT 0
52629: PPUSH
52630: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
52634: LD_VAR 0 2
52638: PPUSH
52639: LD_INT 2
52641: PPUSH
52642: LD_INT 0
52644: PPUSH
52645: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
52649: LD_VAR 0 2
52653: PPUSH
52654: LD_INT 3
52656: PPUSH
52657: LD_INT 0
52659: PPUSH
52660: CALL_OW 277
// end ;
52664: PPOPN 2
52666: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
52667: LD_EXP 39
52671: PUSH
52672: LD_EXP 67
52676: AND
52677: IFFALSE 52774
52679: GO 52681
52681: DISABLE
52682: LD_INT 0
52684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
52685: LD_ADDR_VAR 0 1
52689: PUSH
52690: LD_INT 22
52692: PUSH
52693: LD_OWVAR 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 21
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 23
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: PPUSH
52734: CALL_OW 69
52738: ST_TO_ADDR
// if not tmp then
52739: LD_VAR 0 1
52743: NOT
52744: IFFALSE 52748
// exit ;
52746: GO 52774
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
52748: LD_VAR 0 1
52752: PUSH
52753: LD_INT 1
52755: PPUSH
52756: LD_VAR 0 1
52760: PPUSH
52761: CALL_OW 12
52765: ARRAY
52766: PPUSH
52767: LD_INT 200
52769: PPUSH
52770: CALL_OW 234
// end ;
52774: PPOPN 1
52776: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
52777: LD_EXP 39
52781: PUSH
52782: LD_EXP 68
52786: AND
52787: IFFALSE 52866
52789: GO 52791
52791: DISABLE
52792: LD_INT 0
52794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
52795: LD_ADDR_VAR 0 1
52799: PUSH
52800: LD_INT 22
52802: PUSH
52803: LD_OWVAR 2
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 21
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PPUSH
52826: CALL_OW 69
52830: ST_TO_ADDR
// if not tmp then
52831: LD_VAR 0 1
52835: NOT
52836: IFFALSE 52840
// exit ;
52838: GO 52866
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
52840: LD_VAR 0 1
52844: PUSH
52845: LD_INT 1
52847: PPUSH
52848: LD_VAR 0 1
52852: PPUSH
52853: CALL_OW 12
52857: ARRAY
52858: PPUSH
52859: LD_INT 60
52861: PPUSH
52862: CALL_OW 234
// end ;
52866: PPOPN 1
52868: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
52869: LD_EXP 39
52873: PUSH
52874: LD_EXP 69
52878: AND
52879: IFFALSE 52978
52881: GO 52883
52883: DISABLE
52884: LD_INT 0
52886: PPUSH
52887: PPUSH
// begin enable ;
52888: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
52889: LD_ADDR_VAR 0 1
52893: PUSH
52894: LD_INT 22
52896: PUSH
52897: LD_OWVAR 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 61
52908: PUSH
52909: EMPTY
52910: LIST
52911: PUSH
52912: LD_INT 33
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: LIST
52926: PPUSH
52927: CALL_OW 69
52931: ST_TO_ADDR
// if not tmp then
52932: LD_VAR 0 1
52936: NOT
52937: IFFALSE 52941
// exit ;
52939: GO 52978
// for i in tmp do
52941: LD_ADDR_VAR 0 2
52945: PUSH
52946: LD_VAR 0 1
52950: PUSH
52951: FOR_IN
52952: IFFALSE 52976
// if IsControledBy ( i ) then
52954: LD_VAR 0 2
52958: PPUSH
52959: CALL_OW 312
52963: IFFALSE 52974
// ComUnlink ( i ) ;
52965: LD_VAR 0 2
52969: PPUSH
52970: CALL_OW 136
52974: GO 52951
52976: POP
52977: POP
// end ;
52978: PPOPN 2
52980: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
52981: LD_EXP 39
52985: PUSH
52986: LD_EXP 70
52990: AND
52991: IFFALSE 53131
52993: GO 52995
52995: DISABLE
52996: LD_INT 0
52998: PPUSH
52999: PPUSH
// begin ToLua ( displayPowell(); ) ;
53000: LD_STRING displayPowell();
53002: PPUSH
53003: CALL_OW 559
// uc_side := 0 ;
53007: LD_ADDR_OWVAR 20
53011: PUSH
53012: LD_INT 0
53014: ST_TO_ADDR
// uc_nation := 2 ;
53015: LD_ADDR_OWVAR 21
53019: PUSH
53020: LD_INT 2
53022: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
53023: LD_ADDR_OWVAR 37
53027: PUSH
53028: LD_INT 14
53030: ST_TO_ADDR
// vc_engine := engine_siberite ;
53031: LD_ADDR_OWVAR 39
53035: PUSH
53036: LD_INT 3
53038: ST_TO_ADDR
// vc_control := control_apeman ;
53039: LD_ADDR_OWVAR 38
53043: PUSH
53044: LD_INT 5
53046: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
53047: LD_ADDR_OWVAR 40
53051: PUSH
53052: LD_INT 29
53054: ST_TO_ADDR
// un := CreateVehicle ;
53055: LD_ADDR_VAR 0 2
53059: PUSH
53060: CALL_OW 45
53064: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53065: LD_VAR 0 2
53069: PPUSH
53070: LD_INT 1
53072: PPUSH
53073: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53077: LD_INT 35
53079: PPUSH
53080: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53084: LD_VAR 0 2
53088: PPUSH
53089: LD_INT 22
53091: PUSH
53092: LD_OWVAR 2
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PPUSH
53101: CALL_OW 69
53105: PPUSH
53106: LD_VAR 0 2
53110: PPUSH
53111: CALL_OW 74
53115: PPUSH
53116: CALL_OW 115
// until IsDead ( un ) ;
53120: LD_VAR 0 2
53124: PPUSH
53125: CALL_OW 301
53129: IFFALSE 53077
// end ;
53131: PPOPN 2
53133: END
// every 0 0$1 trigger StreamModeActive and sStu do
53134: LD_EXP 39
53138: PUSH
53139: LD_EXP 78
53143: AND
53144: IFFALSE 53160
53146: GO 53148
53148: DISABLE
// begin ToLua ( displayStucuk(); ) ;
53149: LD_STRING displayStucuk();
53151: PPUSH
53152: CALL_OW 559
// ResetFog ;
53156: CALL_OW 335
// end ;
53160: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
53161: LD_EXP 39
53165: PUSH
53166: LD_EXP 71
53170: AND
53171: IFFALSE 53312
53173: GO 53175
53175: DISABLE
53176: LD_INT 0
53178: PPUSH
53179: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53180: LD_ADDR_VAR 0 2
53184: PUSH
53185: LD_INT 22
53187: PUSH
53188: LD_OWVAR 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 21
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PPUSH
53211: CALL_OW 69
53215: ST_TO_ADDR
// if not tmp then
53216: LD_VAR 0 2
53220: NOT
53221: IFFALSE 53225
// exit ;
53223: GO 53312
// un := tmp [ rand ( 1 , tmp ) ] ;
53225: LD_ADDR_VAR 0 1
53229: PUSH
53230: LD_VAR 0 2
53234: PUSH
53235: LD_INT 1
53237: PPUSH
53238: LD_VAR 0 2
53242: PPUSH
53243: CALL_OW 12
53247: ARRAY
53248: ST_TO_ADDR
// SetSide ( un , 0 ) ;
53249: LD_VAR 0 1
53253: PPUSH
53254: LD_INT 0
53256: PPUSH
53257: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
53261: LD_VAR 0 1
53265: PPUSH
53266: LD_OWVAR 3
53270: PUSH
53271: LD_VAR 0 1
53275: DIFF
53276: PPUSH
53277: LD_VAR 0 1
53281: PPUSH
53282: CALL_OW 74
53286: PPUSH
53287: CALL_OW 115
// wait ( 0 0$20 ) ;
53291: LD_INT 700
53293: PPUSH
53294: CALL_OW 67
// SetSide ( un , your_side ) ;
53298: LD_VAR 0 1
53302: PPUSH
53303: LD_OWVAR 2
53307: PPUSH
53308: CALL_OW 235
// end ;
53312: PPOPN 2
53314: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
53315: LD_EXP 39
53319: PUSH
53320: LD_EXP 72
53324: AND
53325: IFFALSE 53431
53327: GO 53329
53329: DISABLE
53330: LD_INT 0
53332: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53333: LD_ADDR_VAR 0 1
53337: PUSH
53338: LD_INT 22
53340: PUSH
53341: LD_OWVAR 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 30
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 30
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PPUSH
53382: CALL_OW 69
53386: ST_TO_ADDR
// if not depot then
53387: LD_VAR 0 1
53391: NOT
53392: IFFALSE 53396
// exit ;
53394: GO 53431
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
53396: LD_VAR 0 1
53400: PUSH
53401: LD_INT 1
53403: ARRAY
53404: PPUSH
53405: CALL_OW 250
53409: PPUSH
53410: LD_VAR 0 1
53414: PUSH
53415: LD_INT 1
53417: ARRAY
53418: PPUSH
53419: CALL_OW 251
53423: PPUSH
53424: LD_INT 70
53426: PPUSH
53427: CALL_OW 495
// end ;
53431: PPOPN 1
53433: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
53434: LD_EXP 39
53438: PUSH
53439: LD_EXP 73
53443: AND
53444: IFFALSE 53655
53446: GO 53448
53448: DISABLE
53449: LD_INT 0
53451: PPUSH
53452: PPUSH
53453: PPUSH
53454: PPUSH
53455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
53456: LD_ADDR_VAR 0 5
53460: PUSH
53461: LD_INT 22
53463: PUSH
53464: LD_OWVAR 2
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 21
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PPUSH
53487: CALL_OW 69
53491: ST_TO_ADDR
// if not tmp then
53492: LD_VAR 0 5
53496: NOT
53497: IFFALSE 53501
// exit ;
53499: GO 53655
// for i in tmp do
53501: LD_ADDR_VAR 0 1
53505: PUSH
53506: LD_VAR 0 5
53510: PUSH
53511: FOR_IN
53512: IFFALSE 53653
// begin d := rand ( 0 , 5 ) ;
53514: LD_ADDR_VAR 0 4
53518: PUSH
53519: LD_INT 0
53521: PPUSH
53522: LD_INT 5
53524: PPUSH
53525: CALL_OW 12
53529: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
53530: LD_ADDR_VAR 0 2
53534: PUSH
53535: LD_VAR 0 1
53539: PPUSH
53540: CALL_OW 250
53544: PPUSH
53545: LD_VAR 0 4
53549: PPUSH
53550: LD_INT 3
53552: PPUSH
53553: LD_INT 12
53555: PPUSH
53556: CALL_OW 12
53560: PPUSH
53561: CALL_OW 272
53565: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
53566: LD_ADDR_VAR 0 3
53570: PUSH
53571: LD_VAR 0 1
53575: PPUSH
53576: CALL_OW 251
53580: PPUSH
53581: LD_VAR 0 4
53585: PPUSH
53586: LD_INT 3
53588: PPUSH
53589: LD_INT 12
53591: PPUSH
53592: CALL_OW 12
53596: PPUSH
53597: CALL_OW 273
53601: ST_TO_ADDR
// if ValidHex ( x , y ) then
53602: LD_VAR 0 2
53606: PPUSH
53607: LD_VAR 0 3
53611: PPUSH
53612: CALL_OW 488
53616: IFFALSE 53651
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
53618: LD_VAR 0 1
53622: PPUSH
53623: LD_VAR 0 2
53627: PPUSH
53628: LD_VAR 0 3
53632: PPUSH
53633: LD_INT 3
53635: PPUSH
53636: LD_INT 6
53638: PPUSH
53639: CALL_OW 12
53643: PPUSH
53644: LD_INT 1
53646: PPUSH
53647: CALL_OW 483
// end ;
53651: GO 53511
53653: POP
53654: POP
// end ;
53655: PPOPN 5
53657: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
53658: LD_EXP 39
53662: PUSH
53663: LD_EXP 74
53667: AND
53668: IFFALSE 53762
53670: GO 53672
53672: DISABLE
53673: LD_INT 0
53675: PPUSH
53676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
53677: LD_ADDR_VAR 0 2
53681: PUSH
53682: LD_INT 22
53684: PUSH
53685: LD_OWVAR 2
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 32
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 21
53706: PUSH
53707: LD_INT 2
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: LIST
53718: PPUSH
53719: CALL_OW 69
53723: ST_TO_ADDR
// if not tmp then
53724: LD_VAR 0 2
53728: NOT
53729: IFFALSE 53733
// exit ;
53731: GO 53762
// for i in tmp do
53733: LD_ADDR_VAR 0 1
53737: PUSH
53738: LD_VAR 0 2
53742: PUSH
53743: FOR_IN
53744: IFFALSE 53760
// SetFuel ( i , 0 ) ;
53746: LD_VAR 0 1
53750: PPUSH
53751: LD_INT 0
53753: PPUSH
53754: CALL_OW 240
53758: GO 53743
53760: POP
53761: POP
// end ;
53762: PPOPN 2
53764: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
53765: LD_EXP 39
53769: PUSH
53770: LD_EXP 75
53774: AND
53775: IFFALSE 53841
53777: GO 53779
53779: DISABLE
53780: LD_INT 0
53782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
53783: LD_ADDR_VAR 0 1
53787: PUSH
53788: LD_INT 22
53790: PUSH
53791: LD_OWVAR 2
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 30
53802: PUSH
53803: LD_INT 29
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PPUSH
53814: CALL_OW 69
53818: ST_TO_ADDR
// if not tmp then
53819: LD_VAR 0 1
53823: NOT
53824: IFFALSE 53828
// exit ;
53826: GO 53841
// DestroyUnit ( tmp [ 1 ] ) ;
53828: LD_VAR 0 1
53832: PUSH
53833: LD_INT 1
53835: ARRAY
53836: PPUSH
53837: CALL_OW 65
// end ;
53841: PPOPN 1
53843: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
53844: LD_EXP 39
53848: PUSH
53849: LD_EXP 77
53853: AND
53854: IFFALSE 53983
53856: GO 53858
53858: DISABLE
53859: LD_INT 0
53861: PPUSH
// begin uc_side := 0 ;
53862: LD_ADDR_OWVAR 20
53866: PUSH
53867: LD_INT 0
53869: ST_TO_ADDR
// uc_nation := nation_arabian ;
53870: LD_ADDR_OWVAR 21
53874: PUSH
53875: LD_INT 2
53877: ST_TO_ADDR
// hc_gallery :=  ;
53878: LD_ADDR_OWVAR 33
53882: PUSH
53883: LD_STRING 
53885: ST_TO_ADDR
// hc_name :=  ;
53886: LD_ADDR_OWVAR 26
53890: PUSH
53891: LD_STRING 
53893: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
53894: LD_INT 1
53896: PPUSH
53897: LD_INT 11
53899: PPUSH
53900: LD_INT 10
53902: PPUSH
53903: CALL_OW 380
// un := CreateHuman ;
53907: LD_ADDR_VAR 0 1
53911: PUSH
53912: CALL_OW 44
53916: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
53917: LD_VAR 0 1
53921: PPUSH
53922: LD_INT 1
53924: PPUSH
53925: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
53929: LD_INT 35
53931: PPUSH
53932: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
53936: LD_VAR 0 1
53940: PPUSH
53941: LD_INT 22
53943: PUSH
53944: LD_OWVAR 2
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PPUSH
53953: CALL_OW 69
53957: PPUSH
53958: LD_VAR 0 1
53962: PPUSH
53963: CALL_OW 74
53967: PPUSH
53968: CALL_OW 115
// until IsDead ( un ) ;
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 301
53981: IFFALSE 53929
// end ;
53983: PPOPN 1
53985: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
53986: LD_EXP 39
53990: PUSH
53991: LD_EXP 79
53995: AND
53996: IFFALSE 54008
53998: GO 54000
54000: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
54001: LD_STRING earthquake(getX(game), 0, 32)
54003: PPUSH
54004: CALL_OW 559
54008: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
54009: LD_EXP 39
54013: PUSH
54014: LD_EXP 80
54018: AND
54019: IFFALSE 54110
54021: GO 54023
54023: DISABLE
54024: LD_INT 0
54026: PPUSH
// begin enable ;
54027: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
54028: LD_ADDR_VAR 0 1
54032: PUSH
54033: LD_INT 22
54035: PUSH
54036: LD_OWVAR 2
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 21
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 33
54057: PUSH
54058: LD_INT 3
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: PPUSH
54070: CALL_OW 69
54074: ST_TO_ADDR
// if not tmp then
54075: LD_VAR 0 1
54079: NOT
54080: IFFALSE 54084
// exit ;
54082: GO 54110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
54084: LD_VAR 0 1
54088: PUSH
54089: LD_INT 1
54091: PPUSH
54092: LD_VAR 0 1
54096: PPUSH
54097: CALL_OW 12
54101: ARRAY
54102: PPUSH
54103: LD_INT 1
54105: PPUSH
54106: CALL_OW 234
// end ;
54110: PPOPN 1
54112: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
54113: LD_EXP 39
54117: PUSH
54118: LD_EXP 81
54122: AND
54123: IFFALSE 54264
54125: GO 54127
54127: DISABLE
54128: LD_INT 0
54130: PPUSH
54131: PPUSH
54132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54133: LD_ADDR_VAR 0 3
54137: PUSH
54138: LD_INT 22
54140: PUSH
54141: LD_OWVAR 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 25
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PPUSH
54164: CALL_OW 69
54168: ST_TO_ADDR
// if not tmp then
54169: LD_VAR 0 3
54173: NOT
54174: IFFALSE 54178
// exit ;
54176: GO 54264
// un := tmp [ rand ( 1 , tmp ) ] ;
54178: LD_ADDR_VAR 0 2
54182: PUSH
54183: LD_VAR 0 3
54187: PUSH
54188: LD_INT 1
54190: PPUSH
54191: LD_VAR 0 3
54195: PPUSH
54196: CALL_OW 12
54200: ARRAY
54201: ST_TO_ADDR
// if Crawls ( un ) then
54202: LD_VAR 0 2
54206: PPUSH
54207: CALL_OW 318
54211: IFFALSE 54222
// ComWalk ( un ) ;
54213: LD_VAR 0 2
54217: PPUSH
54218: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
54222: LD_VAR 0 2
54226: PPUSH
54227: LD_INT 9
54229: PPUSH
54230: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
54234: LD_INT 28
54236: PPUSH
54237: LD_OWVAR 2
54241: PPUSH
54242: LD_INT 2
54244: PPUSH
54245: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
54249: LD_INT 29
54251: PPUSH
54252: LD_OWVAR 2
54256: PPUSH
54257: LD_INT 2
54259: PPUSH
54260: CALL_OW 322
// end ;
54264: PPOPN 3
54266: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
54267: LD_EXP 39
54271: PUSH
54272: LD_EXP 82
54276: AND
54277: IFFALSE 54388
54279: GO 54281
54281: DISABLE
54282: LD_INT 0
54284: PPUSH
54285: PPUSH
54286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_INT 22
54294: PUSH
54295: LD_OWVAR 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 25
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PPUSH
54318: CALL_OW 69
54322: ST_TO_ADDR
// if not tmp then
54323: LD_VAR 0 3
54327: NOT
54328: IFFALSE 54332
// exit ;
54330: GO 54388
// un := tmp [ rand ( 1 , tmp ) ] ;
54332: LD_ADDR_VAR 0 2
54336: PUSH
54337: LD_VAR 0 3
54341: PUSH
54342: LD_INT 1
54344: PPUSH
54345: LD_VAR 0 3
54349: PPUSH
54350: CALL_OW 12
54354: ARRAY
54355: ST_TO_ADDR
// if Crawls ( un ) then
54356: LD_VAR 0 2
54360: PPUSH
54361: CALL_OW 318
54365: IFFALSE 54376
// ComWalk ( un ) ;
54367: LD_VAR 0 2
54371: PPUSH
54372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
54376: LD_VAR 0 2
54380: PPUSH
54381: LD_INT 8
54383: PPUSH
54384: CALL_OW 336
// end ;
54388: PPOPN 3
54390: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
54391: LD_EXP 39
54395: PUSH
54396: LD_EXP 83
54400: AND
54401: IFFALSE 54545
54403: GO 54405
54405: DISABLE
54406: LD_INT 0
54408: PPUSH
54409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
54410: LD_ADDR_VAR 0 2
54414: PUSH
54415: LD_INT 22
54417: PUSH
54418: LD_OWVAR 2
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 21
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 34
54442: PUSH
54443: LD_INT 12
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 34
54452: PUSH
54453: LD_INT 51
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 34
54462: PUSH
54463: LD_INT 32
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: PPUSH
54481: CALL_OW 69
54485: ST_TO_ADDR
// if not tmp then
54486: LD_VAR 0 2
54490: NOT
54491: IFFALSE 54495
// exit ;
54493: GO 54545
// for i in tmp do
54495: LD_ADDR_VAR 0 1
54499: PUSH
54500: LD_VAR 0 2
54504: PUSH
54505: FOR_IN
54506: IFFALSE 54543
// if GetCargo ( i , mat_artifact ) = 0 then
54508: LD_VAR 0 1
54512: PPUSH
54513: LD_INT 4
54515: PPUSH
54516: CALL_OW 289
54520: PUSH
54521: LD_INT 0
54523: EQUAL
54524: IFFALSE 54541
// SetCargo ( i , mat_siberit , 100 ) ;
54526: LD_VAR 0 1
54530: PPUSH
54531: LD_INT 3
54533: PPUSH
54534: LD_INT 100
54536: PPUSH
54537: CALL_OW 290
54541: GO 54505
54543: POP
54544: POP
// end ;
54545: PPOPN 2
54547: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
54548: LD_EXP 39
54552: PUSH
54553: LD_EXP 84
54557: AND
54558: IFFALSE 54741
54560: GO 54562
54562: DISABLE
54563: LD_INT 0
54565: PPUSH
54566: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
54567: LD_ADDR_VAR 0 2
54571: PUSH
54572: LD_INT 22
54574: PUSH
54575: LD_OWVAR 2
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PPUSH
54584: CALL_OW 69
54588: ST_TO_ADDR
// if not tmp then
54589: LD_VAR 0 2
54593: NOT
54594: IFFALSE 54598
// exit ;
54596: GO 54741
// for i := 1 to 2 do
54598: LD_ADDR_VAR 0 1
54602: PUSH
54603: DOUBLE
54604: LD_INT 1
54606: DEC
54607: ST_TO_ADDR
54608: LD_INT 2
54610: PUSH
54611: FOR_TO
54612: IFFALSE 54739
// begin uc_side := your_side ;
54614: LD_ADDR_OWVAR 20
54618: PUSH
54619: LD_OWVAR 2
54623: ST_TO_ADDR
// uc_nation := nation_american ;
54624: LD_ADDR_OWVAR 21
54628: PUSH
54629: LD_INT 1
54631: ST_TO_ADDR
// vc_chassis := us_morphling ;
54632: LD_ADDR_OWVAR 37
54636: PUSH
54637: LD_INT 5
54639: ST_TO_ADDR
// vc_engine := engine_siberite ;
54640: LD_ADDR_OWVAR 39
54644: PUSH
54645: LD_INT 3
54647: ST_TO_ADDR
// vc_control := control_computer ;
54648: LD_ADDR_OWVAR 38
54652: PUSH
54653: LD_INT 3
54655: ST_TO_ADDR
// vc_weapon := us_double_laser ;
54656: LD_ADDR_OWVAR 40
54660: PUSH
54661: LD_INT 10
54663: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
54664: LD_VAR 0 2
54668: PUSH
54669: LD_INT 1
54671: ARRAY
54672: PPUSH
54673: CALL_OW 310
54677: NOT
54678: IFFALSE 54725
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
54680: CALL_OW 45
54684: PPUSH
54685: LD_VAR 0 2
54689: PUSH
54690: LD_INT 1
54692: ARRAY
54693: PPUSH
54694: CALL_OW 250
54698: PPUSH
54699: LD_VAR 0 2
54703: PUSH
54704: LD_INT 1
54706: ARRAY
54707: PPUSH
54708: CALL_OW 251
54712: PPUSH
54713: LD_INT 12
54715: PPUSH
54716: LD_INT 1
54718: PPUSH
54719: CALL_OW 50
54723: GO 54737
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
54725: CALL_OW 45
54729: PPUSH
54730: LD_INT 1
54732: PPUSH
54733: CALL_OW 51
// end ;
54737: GO 54611
54739: POP
54740: POP
// end ;
54741: PPOPN 2
54743: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
54744: LD_EXP 39
54748: PUSH
54749: LD_EXP 85
54753: AND
54754: IFFALSE 54976
54756: GO 54758
54758: DISABLE
54759: LD_INT 0
54761: PPUSH
54762: PPUSH
54763: PPUSH
54764: PPUSH
54765: PPUSH
54766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
54767: LD_ADDR_VAR 0 6
54771: PUSH
54772: LD_INT 22
54774: PUSH
54775: LD_OWVAR 2
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 21
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: PUSH
54797: LD_INT 23
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: PPUSH
54816: CALL_OW 69
54820: ST_TO_ADDR
// if not tmp then
54821: LD_VAR 0 6
54825: NOT
54826: IFFALSE 54830
// exit ;
54828: GO 54976
// s1 := rand ( 1 , 4 ) ;
54830: LD_ADDR_VAR 0 2
54834: PUSH
54835: LD_INT 1
54837: PPUSH
54838: LD_INT 4
54840: PPUSH
54841: CALL_OW 12
54845: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
54846: LD_ADDR_VAR 0 4
54850: PUSH
54851: LD_VAR 0 6
54855: PUSH
54856: LD_INT 1
54858: ARRAY
54859: PPUSH
54860: LD_VAR 0 2
54864: PPUSH
54865: CALL_OW 259
54869: ST_TO_ADDR
// if s1 = 1 then
54870: LD_VAR 0 2
54874: PUSH
54875: LD_INT 1
54877: EQUAL
54878: IFFALSE 54898
// s2 := rand ( 2 , 4 ) else
54880: LD_ADDR_VAR 0 3
54884: PUSH
54885: LD_INT 2
54887: PPUSH
54888: LD_INT 4
54890: PPUSH
54891: CALL_OW 12
54895: ST_TO_ADDR
54896: GO 54906
// s2 := 1 ;
54898: LD_ADDR_VAR 0 3
54902: PUSH
54903: LD_INT 1
54905: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
54906: LD_ADDR_VAR 0 5
54910: PUSH
54911: LD_VAR 0 6
54915: PUSH
54916: LD_INT 1
54918: ARRAY
54919: PPUSH
54920: LD_VAR 0 3
54924: PPUSH
54925: CALL_OW 259
54929: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
54930: LD_VAR 0 6
54934: PUSH
54935: LD_INT 1
54937: ARRAY
54938: PPUSH
54939: LD_VAR 0 2
54943: PPUSH
54944: LD_VAR 0 5
54948: PPUSH
54949: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
54953: LD_VAR 0 6
54957: PUSH
54958: LD_INT 1
54960: ARRAY
54961: PPUSH
54962: LD_VAR 0 3
54966: PPUSH
54967: LD_VAR 0 4
54971: PPUSH
54972: CALL_OW 237
// end ;
54976: PPOPN 6
54978: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
54979: LD_EXP 39
54983: PUSH
54984: LD_EXP 86
54988: AND
54989: IFFALSE 55068
54991: GO 54993
54993: DISABLE
54994: LD_INT 0
54996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
54997: LD_ADDR_VAR 0 1
55001: PUSH
55002: LD_INT 22
55004: PUSH
55005: LD_OWVAR 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 30
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PPUSH
55028: CALL_OW 69
55032: ST_TO_ADDR
// if not tmp then
55033: LD_VAR 0 1
55037: NOT
55038: IFFALSE 55042
// exit ;
55040: GO 55068
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
55042: LD_VAR 0 1
55046: PUSH
55047: LD_INT 1
55049: PPUSH
55050: LD_VAR 0 1
55054: PPUSH
55055: CALL_OW 12
55059: ARRAY
55060: PPUSH
55061: LD_INT 1
55063: PPUSH
55064: CALL_OW 234
// end ;
55068: PPOPN 1
55070: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
55071: LD_EXP 39
55075: PUSH
55076: LD_EXP 87
55080: AND
55081: IFFALSE 55193
55083: GO 55085
55085: DISABLE
55086: LD_INT 0
55088: PPUSH
55089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
55090: LD_ADDR_VAR 0 2
55094: PUSH
55095: LD_INT 22
55097: PUSH
55098: LD_OWVAR 2
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: LD_INT 30
55112: PUSH
55113: LD_INT 27
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 30
55122: PUSH
55123: LD_INT 26
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 30
55132: PUSH
55133: LD_INT 28
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PPUSH
55150: CALL_OW 69
55154: ST_TO_ADDR
// if not tmp then
55155: LD_VAR 0 2
55159: NOT
55160: IFFALSE 55164
// exit ;
55162: GO 55193
// for i in tmp do
55164: LD_ADDR_VAR 0 1
55168: PUSH
55169: LD_VAR 0 2
55173: PUSH
55174: FOR_IN
55175: IFFALSE 55191
// SetLives ( i , 1 ) ;
55177: LD_VAR 0 1
55181: PPUSH
55182: LD_INT 1
55184: PPUSH
55185: CALL_OW 234
55189: GO 55174
55191: POP
55192: POP
// end ;
55193: PPOPN 2
55195: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
55196: LD_EXP 39
55200: PUSH
55201: LD_EXP 88
55205: AND
55206: IFFALSE 55493
55208: GO 55210
55210: DISABLE
55211: LD_INT 0
55213: PPUSH
55214: PPUSH
55215: PPUSH
// begin i := rand ( 1 , 7 ) ;
55216: LD_ADDR_VAR 0 1
55220: PUSH
55221: LD_INT 1
55223: PPUSH
55224: LD_INT 7
55226: PPUSH
55227: CALL_OW 12
55231: ST_TO_ADDR
// case i of 1 :
55232: LD_VAR 0 1
55236: PUSH
55237: LD_INT 1
55239: DOUBLE
55240: EQUAL
55241: IFTRUE 55245
55243: GO 55255
55245: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
55246: LD_STRING earthquake(getX(game), 0, 32)
55248: PPUSH
55249: CALL_OW 559
55253: GO 55493
55255: LD_INT 2
55257: DOUBLE
55258: EQUAL
55259: IFTRUE 55263
55261: GO 55277
55263: POP
// begin ToLua ( displayStucuk(); ) ;
55264: LD_STRING displayStucuk();
55266: PPUSH
55267: CALL_OW 559
// ResetFog ;
55271: CALL_OW 335
// end ; 3 :
55275: GO 55493
55277: LD_INT 3
55279: DOUBLE
55280: EQUAL
55281: IFTRUE 55285
55283: GO 55389
55285: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55286: LD_ADDR_VAR 0 2
55290: PUSH
55291: LD_INT 22
55293: PUSH
55294: LD_OWVAR 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 25
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PPUSH
55317: CALL_OW 69
55321: ST_TO_ADDR
// if not tmp then
55322: LD_VAR 0 2
55326: NOT
55327: IFFALSE 55331
// exit ;
55329: GO 55493
// un := tmp [ rand ( 1 , tmp ) ] ;
55331: LD_ADDR_VAR 0 3
55335: PUSH
55336: LD_VAR 0 2
55340: PUSH
55341: LD_INT 1
55343: PPUSH
55344: LD_VAR 0 2
55348: PPUSH
55349: CALL_OW 12
55353: ARRAY
55354: ST_TO_ADDR
// if Crawls ( un ) then
55355: LD_VAR 0 3
55359: PPUSH
55360: CALL_OW 318
55364: IFFALSE 55375
// ComWalk ( un ) ;
55366: LD_VAR 0 3
55370: PPUSH
55371: CALL_OW 138
// SetClass ( un , class_mortar ) ;
55375: LD_VAR 0 3
55379: PPUSH
55380: LD_INT 8
55382: PPUSH
55383: CALL_OW 336
// end ; 4 :
55387: GO 55493
55389: LD_INT 4
55391: DOUBLE
55392: EQUAL
55393: IFTRUE 55397
55395: GO 55471
55397: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
55398: LD_ADDR_VAR 0 2
55402: PUSH
55403: LD_INT 22
55405: PUSH
55406: LD_OWVAR 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 30
55417: PUSH
55418: LD_INT 29
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PPUSH
55429: CALL_OW 69
55433: ST_TO_ADDR
// if not tmp then
55434: LD_VAR 0 2
55438: NOT
55439: IFFALSE 55443
// exit ;
55441: GO 55493
// CenterNowOnUnits ( tmp [ 1 ] ) ;
55443: LD_VAR 0 2
55447: PUSH
55448: LD_INT 1
55450: ARRAY
55451: PPUSH
55452: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
55456: LD_VAR 0 2
55460: PUSH
55461: LD_INT 1
55463: ARRAY
55464: PPUSH
55465: CALL_OW 65
// end ; 5 .. 7 :
55469: GO 55493
55471: LD_INT 5
55473: DOUBLE
55474: GREATEREQUAL
55475: IFFALSE 55483
55477: LD_INT 7
55479: DOUBLE
55480: LESSEQUAL
55481: IFTRUE 55485
55483: GO 55492
55485: POP
// StreamSibBomb ; end ;
55486: CALL 51730 0 0
55490: GO 55493
55492: POP
// end ;
55493: PPOPN 3
55495: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
55496: LD_EXP 39
55500: PUSH
55501: LD_EXP 89
55505: AND
55506: IFFALSE 55662
55508: GO 55510
55510: DISABLE
55511: LD_INT 0
55513: PPUSH
55514: PPUSH
55515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
55516: LD_ADDR_VAR 0 2
55520: PUSH
55521: LD_INT 81
55523: PUSH
55524: LD_OWVAR 2
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 21
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 21
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PPUSH
55565: CALL_OW 69
55569: ST_TO_ADDR
// if not tmp then
55570: LD_VAR 0 2
55574: NOT
55575: IFFALSE 55579
// exit ;
55577: GO 55662
// p := 0 ;
55579: LD_ADDR_VAR 0 3
55583: PUSH
55584: LD_INT 0
55586: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
55587: LD_INT 35
55589: PPUSH
55590: CALL_OW 67
// p := p + 1 ;
55594: LD_ADDR_VAR 0 3
55598: PUSH
55599: LD_VAR 0 3
55603: PUSH
55604: LD_INT 1
55606: PLUS
55607: ST_TO_ADDR
// for i in tmp do
55608: LD_ADDR_VAR 0 1
55612: PUSH
55613: LD_VAR 0 2
55617: PUSH
55618: FOR_IN
55619: IFFALSE 55650
// if GetLives ( i ) < 1000 then
55621: LD_VAR 0 1
55625: PPUSH
55626: CALL_OW 256
55630: PUSH
55631: LD_INT 1000
55633: LESS
55634: IFFALSE 55648
// SetLives ( i , 1000 ) ;
55636: LD_VAR 0 1
55640: PPUSH
55641: LD_INT 1000
55643: PPUSH
55644: CALL_OW 234
55648: GO 55618
55650: POP
55651: POP
// until p > 20 ;
55652: LD_VAR 0 3
55656: PUSH
55657: LD_INT 20
55659: GREATER
55660: IFFALSE 55587
// end ;
55662: PPOPN 3
55664: END
// every 0 0$1 trigger StreamModeActive and sTime do
55665: LD_EXP 39
55669: PUSH
55670: LD_EXP 90
55674: AND
55675: IFFALSE 55710
55677: GO 55679
55679: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
55680: LD_INT 28
55682: PPUSH
55683: LD_OWVAR 2
55687: PPUSH
55688: LD_INT 2
55690: PPUSH
55691: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
55695: LD_INT 30
55697: PPUSH
55698: LD_OWVAR 2
55702: PPUSH
55703: LD_INT 2
55705: PPUSH
55706: CALL_OW 322
// end ;
55710: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
55711: LD_EXP 39
55715: PUSH
55716: LD_EXP 91
55720: AND
55721: IFFALSE 55842
55723: GO 55725
55725: DISABLE
55726: LD_INT 0
55728: PPUSH
55729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
55730: LD_ADDR_VAR 0 2
55734: PUSH
55735: LD_INT 22
55737: PUSH
55738: LD_OWVAR 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 21
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: PUSH
55760: LD_INT 23
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: LIST
55778: PPUSH
55779: CALL_OW 69
55783: ST_TO_ADDR
// if not tmp then
55784: LD_VAR 0 2
55788: NOT
55789: IFFALSE 55793
// exit ;
55791: GO 55842
// for i in tmp do
55793: LD_ADDR_VAR 0 1
55797: PUSH
55798: LD_VAR 0 2
55802: PUSH
55803: FOR_IN
55804: IFFALSE 55840
// begin if Crawls ( i ) then
55806: LD_VAR 0 1
55810: PPUSH
55811: CALL_OW 318
55815: IFFALSE 55826
// ComWalk ( i ) ;
55817: LD_VAR 0 1
55821: PPUSH
55822: CALL_OW 138
// SetClass ( i , 2 ) ;
55826: LD_VAR 0 1
55830: PPUSH
55831: LD_INT 2
55833: PPUSH
55834: CALL_OW 336
// end ;
55838: GO 55803
55840: POP
55841: POP
// end ;
55842: PPOPN 2
55844: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
55845: LD_EXP 39
55849: PUSH
55850: LD_EXP 92
55854: AND
55855: IFFALSE 56143
55857: GO 55859
55859: DISABLE
55860: LD_INT 0
55862: PPUSH
55863: PPUSH
55864: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
55865: LD_OWVAR 2
55869: PPUSH
55870: LD_INT 9
55872: PPUSH
55873: LD_INT 1
55875: PPUSH
55876: LD_INT 1
55878: PPUSH
55879: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
55883: LD_INT 9
55885: PPUSH
55886: LD_OWVAR 2
55890: PPUSH
55891: CALL_OW 343
// uc_side := 9 ;
55895: LD_ADDR_OWVAR 20
55899: PUSH
55900: LD_INT 9
55902: ST_TO_ADDR
// uc_nation := 2 ;
55903: LD_ADDR_OWVAR 21
55907: PUSH
55908: LD_INT 2
55910: ST_TO_ADDR
// hc_name := Dark Warrior ;
55911: LD_ADDR_OWVAR 26
55915: PUSH
55916: LD_STRING Dark Warrior
55918: ST_TO_ADDR
// hc_gallery :=  ;
55919: LD_ADDR_OWVAR 33
55923: PUSH
55924: LD_STRING 
55926: ST_TO_ADDR
// hc_noskilllimit := true ;
55927: LD_ADDR_OWVAR 76
55931: PUSH
55932: LD_INT 1
55934: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
55935: LD_ADDR_OWVAR 31
55939: PUSH
55940: LD_INT 30
55942: PUSH
55943: LD_INT 30
55945: PUSH
55946: LD_INT 30
55948: PUSH
55949: LD_INT 30
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: ST_TO_ADDR
// un := CreateHuman ;
55958: LD_ADDR_VAR 0 3
55962: PUSH
55963: CALL_OW 44
55967: ST_TO_ADDR
// hc_noskilllimit := false ;
55968: LD_ADDR_OWVAR 76
55972: PUSH
55973: LD_INT 0
55975: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
55976: LD_VAR 0 3
55980: PPUSH
55981: LD_INT 1
55983: PPUSH
55984: CALL_OW 51
// ToLua ( playRanger() ) ;
55988: LD_STRING playRanger()
55990: PPUSH
55991: CALL_OW 559
// p := 0 ;
55995: LD_ADDR_VAR 0 2
55999: PUSH
56000: LD_INT 0
56002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
56003: LD_INT 35
56005: PPUSH
56006: CALL_OW 67
// p := p + 1 ;
56010: LD_ADDR_VAR 0 2
56014: PUSH
56015: LD_VAR 0 2
56019: PUSH
56020: LD_INT 1
56022: PLUS
56023: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
56024: LD_VAR 0 3
56028: PPUSH
56029: CALL_OW 256
56033: PUSH
56034: LD_INT 1000
56036: LESS
56037: IFFALSE 56051
// SetLives ( un , 1000 ) ;
56039: LD_VAR 0 3
56043: PPUSH
56044: LD_INT 1000
56046: PPUSH
56047: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
56051: LD_VAR 0 3
56055: PPUSH
56056: LD_INT 81
56058: PUSH
56059: LD_OWVAR 2
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 91
56070: PUSH
56071: LD_VAR 0 3
56075: PUSH
56076: LD_INT 30
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PPUSH
56088: CALL_OW 69
56092: PPUSH
56093: LD_VAR 0 3
56097: PPUSH
56098: CALL_OW 74
56102: PPUSH
56103: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
56107: LD_VAR 0 2
56111: PUSH
56112: LD_INT 80
56114: GREATER
56115: PUSH
56116: LD_VAR 0 3
56120: PPUSH
56121: CALL_OW 301
56125: OR
56126: IFFALSE 56003
// if un then
56128: LD_VAR 0 3
56132: IFFALSE 56143
// RemoveUnit ( un ) ;
56134: LD_VAR 0 3
56138: PPUSH
56139: CALL_OW 64
// end ;
56143: PPOPN 3
56145: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
56146: LD_EXP 93
56150: IFFALSE 56266
56152: GO 56154
56154: DISABLE
56155: LD_INT 0
56157: PPUSH
56158: PPUSH
56159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56160: LD_ADDR_VAR 0 2
56164: PUSH
56165: LD_INT 81
56167: PUSH
56168: LD_OWVAR 2
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 21
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PPUSH
56191: CALL_OW 69
56195: ST_TO_ADDR
// ToLua ( playComputer() ) ;
56196: LD_STRING playComputer()
56198: PPUSH
56199: CALL_OW 559
// if not tmp then
56203: LD_VAR 0 2
56207: NOT
56208: IFFALSE 56212
// exit ;
56210: GO 56266
// for i in tmp do
56212: LD_ADDR_VAR 0 1
56216: PUSH
56217: LD_VAR 0 2
56221: PUSH
56222: FOR_IN
56223: IFFALSE 56264
// for j := 1 to 4 do
56225: LD_ADDR_VAR 0 3
56229: PUSH
56230: DOUBLE
56231: LD_INT 1
56233: DEC
56234: ST_TO_ADDR
56235: LD_INT 4
56237: PUSH
56238: FOR_TO
56239: IFFALSE 56260
// SetSkill ( i , j , 10 ) ;
56241: LD_VAR 0 1
56245: PPUSH
56246: LD_VAR 0 3
56250: PPUSH
56251: LD_INT 10
56253: PPUSH
56254: CALL_OW 237
56258: GO 56238
56260: POP
56261: POP
56262: GO 56222
56264: POP
56265: POP
// end ;
56266: PPOPN 3
56268: END
// every 0 0$1 trigger s30 do var i , tmp ;
56269: LD_EXP 94
56273: IFFALSE 56342
56275: GO 56277
56277: DISABLE
56278: LD_INT 0
56280: PPUSH
56281: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56282: LD_ADDR_VAR 0 2
56286: PUSH
56287: LD_INT 22
56289: PUSH
56290: LD_OWVAR 2
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PPUSH
56299: CALL_OW 69
56303: ST_TO_ADDR
// if not tmp then
56304: LD_VAR 0 2
56308: NOT
56309: IFFALSE 56313
// exit ;
56311: GO 56342
// for i in tmp do
56313: LD_ADDR_VAR 0 1
56317: PUSH
56318: LD_VAR 0 2
56322: PUSH
56323: FOR_IN
56324: IFFALSE 56340
// SetLives ( i , 300 ) ;
56326: LD_VAR 0 1
56330: PPUSH
56331: LD_INT 300
56333: PPUSH
56334: CALL_OW 234
56338: GO 56323
56340: POP
56341: POP
// end ;
56342: PPOPN 2
56344: END
// every 0 0$1 trigger s60 do var i , tmp ;
56345: LD_EXP 95
56349: IFFALSE 56418
56351: GO 56353
56353: DISABLE
56354: LD_INT 0
56356: PPUSH
56357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
56358: LD_ADDR_VAR 0 2
56362: PUSH
56363: LD_INT 22
56365: PUSH
56366: LD_OWVAR 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PPUSH
56375: CALL_OW 69
56379: ST_TO_ADDR
// if not tmp then
56380: LD_VAR 0 2
56384: NOT
56385: IFFALSE 56389
// exit ;
56387: GO 56418
// for i in tmp do
56389: LD_ADDR_VAR 0 1
56393: PUSH
56394: LD_VAR 0 2
56398: PUSH
56399: FOR_IN
56400: IFFALSE 56416
// SetLives ( i , 600 ) ;
56402: LD_VAR 0 1
56406: PPUSH
56407: LD_INT 600
56409: PPUSH
56410: CALL_OW 234
56414: GO 56399
56416: POP
56417: POP
// end ;
56418: PPOPN 2
56420: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56421: LD_INT 0
56423: PPUSH
// case cmd of 301 :
56424: LD_VAR 0 1
56428: PUSH
56429: LD_INT 301
56431: DOUBLE
56432: EQUAL
56433: IFTRUE 56437
56435: GO 56469
56437: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
56438: LD_VAR 0 6
56442: PPUSH
56443: LD_VAR 0 7
56447: PPUSH
56448: LD_VAR 0 8
56452: PPUSH
56453: LD_VAR 0 4
56457: PPUSH
56458: LD_VAR 0 5
56462: PPUSH
56463: CALL 57670 0 5
56467: GO 56590
56469: LD_INT 302
56471: DOUBLE
56472: EQUAL
56473: IFTRUE 56477
56475: GO 56514
56477: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
56478: LD_VAR 0 6
56482: PPUSH
56483: LD_VAR 0 7
56487: PPUSH
56488: LD_VAR 0 8
56492: PPUSH
56493: LD_VAR 0 9
56497: PPUSH
56498: LD_VAR 0 4
56502: PPUSH
56503: LD_VAR 0 5
56507: PPUSH
56508: CALL 57761 0 6
56512: GO 56590
56514: LD_INT 303
56516: DOUBLE
56517: EQUAL
56518: IFTRUE 56522
56520: GO 56559
56522: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
56523: LD_VAR 0 6
56527: PPUSH
56528: LD_VAR 0 7
56532: PPUSH
56533: LD_VAR 0 8
56537: PPUSH
56538: LD_VAR 0 9
56542: PPUSH
56543: LD_VAR 0 4
56547: PPUSH
56548: LD_VAR 0 5
56552: PPUSH
56553: CALL 56595 0 6
56557: GO 56590
56559: LD_INT 304
56561: DOUBLE
56562: EQUAL
56563: IFTRUE 56567
56565: GO 56589
56567: POP
// hHackTeleport ( unit , x , y ) ; end ;
56568: LD_VAR 0 2
56572: PPUSH
56573: LD_VAR 0 4
56577: PPUSH
56578: LD_VAR 0 5
56582: PPUSH
56583: CALL 58354 0 3
56587: GO 56590
56589: POP
// end ;
56590: LD_VAR 0 12
56594: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
56595: LD_INT 0
56597: PPUSH
56598: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
56599: LD_VAR 0 1
56603: PUSH
56604: LD_INT 1
56606: LESS
56607: PUSH
56608: LD_VAR 0 1
56612: PUSH
56613: LD_INT 3
56615: GREATER
56616: OR
56617: PUSH
56618: LD_VAR 0 5
56622: PPUSH
56623: LD_VAR 0 6
56627: PPUSH
56628: CALL_OW 428
56632: OR
56633: IFFALSE 56637
// exit ;
56635: GO 57357
// uc_side := your_side ;
56637: LD_ADDR_OWVAR 20
56641: PUSH
56642: LD_OWVAR 2
56646: ST_TO_ADDR
// uc_nation := nation ;
56647: LD_ADDR_OWVAR 21
56651: PUSH
56652: LD_VAR 0 1
56656: ST_TO_ADDR
// bc_level = 1 ;
56657: LD_ADDR_OWVAR 43
56661: PUSH
56662: LD_INT 1
56664: ST_TO_ADDR
// case btype of 1 :
56665: LD_VAR 0 2
56669: PUSH
56670: LD_INT 1
56672: DOUBLE
56673: EQUAL
56674: IFTRUE 56678
56676: GO 56689
56678: POP
// bc_type := b_depot ; 2 :
56679: LD_ADDR_OWVAR 42
56683: PUSH
56684: LD_INT 0
56686: ST_TO_ADDR
56687: GO 57301
56689: LD_INT 2
56691: DOUBLE
56692: EQUAL
56693: IFTRUE 56697
56695: GO 56708
56697: POP
// bc_type := b_warehouse ; 3 :
56698: LD_ADDR_OWVAR 42
56702: PUSH
56703: LD_INT 1
56705: ST_TO_ADDR
56706: GO 57301
56708: LD_INT 3
56710: DOUBLE
56711: EQUAL
56712: IFTRUE 56716
56714: GO 56727
56716: POP
// bc_type := b_lab ; 4 .. 9 :
56717: LD_ADDR_OWVAR 42
56721: PUSH
56722: LD_INT 6
56724: ST_TO_ADDR
56725: GO 57301
56727: LD_INT 4
56729: DOUBLE
56730: GREATEREQUAL
56731: IFFALSE 56739
56733: LD_INT 9
56735: DOUBLE
56736: LESSEQUAL
56737: IFTRUE 56741
56739: GO 56793
56741: POP
// begin bc_type := b_lab_half ;
56742: LD_ADDR_OWVAR 42
56746: PUSH
56747: LD_INT 7
56749: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
56750: LD_ADDR_OWVAR 44
56754: PUSH
56755: LD_INT 10
56757: PUSH
56758: LD_INT 11
56760: PUSH
56761: LD_INT 12
56763: PUSH
56764: LD_INT 15
56766: PUSH
56767: LD_INT 14
56769: PUSH
56770: LD_INT 13
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: PUSH
56781: LD_VAR 0 2
56785: PUSH
56786: LD_INT 3
56788: MINUS
56789: ARRAY
56790: ST_TO_ADDR
// end ; 10 .. 13 :
56791: GO 57301
56793: LD_INT 10
56795: DOUBLE
56796: GREATEREQUAL
56797: IFFALSE 56805
56799: LD_INT 13
56801: DOUBLE
56802: LESSEQUAL
56803: IFTRUE 56807
56805: GO 56884
56807: POP
// begin bc_type := b_lab_full ;
56808: LD_ADDR_OWVAR 42
56812: PUSH
56813: LD_INT 8
56815: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
56816: LD_ADDR_OWVAR 44
56820: PUSH
56821: LD_INT 10
56823: PUSH
56824: LD_INT 12
56826: PUSH
56827: LD_INT 14
56829: PUSH
56830: LD_INT 13
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: PUSH
56839: LD_VAR 0 2
56843: PUSH
56844: LD_INT 9
56846: MINUS
56847: ARRAY
56848: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
56849: LD_ADDR_OWVAR 45
56853: PUSH
56854: LD_INT 11
56856: PUSH
56857: LD_INT 15
56859: PUSH
56860: LD_INT 12
56862: PUSH
56863: LD_INT 15
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: PUSH
56872: LD_VAR 0 2
56876: PUSH
56877: LD_INT 9
56879: MINUS
56880: ARRAY
56881: ST_TO_ADDR
// end ; 14 :
56882: GO 57301
56884: LD_INT 14
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56892
56890: GO 56903
56892: POP
// bc_type := b_workshop ; 15 :
56893: LD_ADDR_OWVAR 42
56897: PUSH
56898: LD_INT 2
56900: ST_TO_ADDR
56901: GO 57301
56903: LD_INT 15
56905: DOUBLE
56906: EQUAL
56907: IFTRUE 56911
56909: GO 56922
56911: POP
// bc_type := b_factory ; 16 :
56912: LD_ADDR_OWVAR 42
56916: PUSH
56917: LD_INT 3
56919: ST_TO_ADDR
56920: GO 57301
56922: LD_INT 16
56924: DOUBLE
56925: EQUAL
56926: IFTRUE 56930
56928: GO 56941
56930: POP
// bc_type := b_ext_gun ; 17 :
56931: LD_ADDR_OWVAR 42
56935: PUSH
56936: LD_INT 17
56938: ST_TO_ADDR
56939: GO 57301
56941: LD_INT 17
56943: DOUBLE
56944: EQUAL
56945: IFTRUE 56949
56947: GO 56977
56949: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
56950: LD_ADDR_OWVAR 42
56954: PUSH
56955: LD_INT 19
56957: PUSH
56958: LD_INT 23
56960: PUSH
56961: LD_INT 19
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: PUSH
56969: LD_VAR 0 1
56973: ARRAY
56974: ST_TO_ADDR
56975: GO 57301
56977: LD_INT 18
56979: DOUBLE
56980: EQUAL
56981: IFTRUE 56985
56983: GO 56996
56985: POP
// bc_type := b_ext_radar ; 19 :
56986: LD_ADDR_OWVAR 42
56990: PUSH
56991: LD_INT 20
56993: ST_TO_ADDR
56994: GO 57301
56996: LD_INT 19
56998: DOUBLE
56999: EQUAL
57000: IFTRUE 57004
57002: GO 57015
57004: POP
// bc_type := b_ext_radio ; 20 :
57005: LD_ADDR_OWVAR 42
57009: PUSH
57010: LD_INT 22
57012: ST_TO_ADDR
57013: GO 57301
57015: LD_INT 20
57017: DOUBLE
57018: EQUAL
57019: IFTRUE 57023
57021: GO 57034
57023: POP
// bc_type := b_ext_siberium ; 21 :
57024: LD_ADDR_OWVAR 42
57028: PUSH
57029: LD_INT 21
57031: ST_TO_ADDR
57032: GO 57301
57034: LD_INT 21
57036: DOUBLE
57037: EQUAL
57038: IFTRUE 57042
57040: GO 57053
57042: POP
// bc_type := b_ext_computer ; 22 :
57043: LD_ADDR_OWVAR 42
57047: PUSH
57048: LD_INT 24
57050: ST_TO_ADDR
57051: GO 57301
57053: LD_INT 22
57055: DOUBLE
57056: EQUAL
57057: IFTRUE 57061
57059: GO 57072
57061: POP
// bc_type := b_ext_track ; 23 :
57062: LD_ADDR_OWVAR 42
57066: PUSH
57067: LD_INT 16
57069: ST_TO_ADDR
57070: GO 57301
57072: LD_INT 23
57074: DOUBLE
57075: EQUAL
57076: IFTRUE 57080
57078: GO 57091
57080: POP
// bc_type := b_ext_laser ; 24 :
57081: LD_ADDR_OWVAR 42
57085: PUSH
57086: LD_INT 25
57088: ST_TO_ADDR
57089: GO 57301
57091: LD_INT 24
57093: DOUBLE
57094: EQUAL
57095: IFTRUE 57099
57097: GO 57110
57099: POP
// bc_type := b_control_tower ; 25 :
57100: LD_ADDR_OWVAR 42
57104: PUSH
57105: LD_INT 36
57107: ST_TO_ADDR
57108: GO 57301
57110: LD_INT 25
57112: DOUBLE
57113: EQUAL
57114: IFTRUE 57118
57116: GO 57129
57118: POP
// bc_type := b_breastwork ; 26 :
57119: LD_ADDR_OWVAR 42
57123: PUSH
57124: LD_INT 31
57126: ST_TO_ADDR
57127: GO 57301
57129: LD_INT 26
57131: DOUBLE
57132: EQUAL
57133: IFTRUE 57137
57135: GO 57148
57137: POP
// bc_type := b_bunker ; 27 :
57138: LD_ADDR_OWVAR 42
57142: PUSH
57143: LD_INT 32
57145: ST_TO_ADDR
57146: GO 57301
57148: LD_INT 27
57150: DOUBLE
57151: EQUAL
57152: IFTRUE 57156
57154: GO 57167
57156: POP
// bc_type := b_turret ; 28 :
57157: LD_ADDR_OWVAR 42
57161: PUSH
57162: LD_INT 33
57164: ST_TO_ADDR
57165: GO 57301
57167: LD_INT 28
57169: DOUBLE
57170: EQUAL
57171: IFTRUE 57175
57173: GO 57186
57175: POP
// bc_type := b_armoury ; 29 :
57176: LD_ADDR_OWVAR 42
57180: PUSH
57181: LD_INT 4
57183: ST_TO_ADDR
57184: GO 57301
57186: LD_INT 29
57188: DOUBLE
57189: EQUAL
57190: IFTRUE 57194
57192: GO 57205
57194: POP
// bc_type := b_barracks ; 30 :
57195: LD_ADDR_OWVAR 42
57199: PUSH
57200: LD_INT 5
57202: ST_TO_ADDR
57203: GO 57301
57205: LD_INT 30
57207: DOUBLE
57208: EQUAL
57209: IFTRUE 57213
57211: GO 57224
57213: POP
// bc_type := b_solar_power ; 31 :
57214: LD_ADDR_OWVAR 42
57218: PUSH
57219: LD_INT 27
57221: ST_TO_ADDR
57222: GO 57301
57224: LD_INT 31
57226: DOUBLE
57227: EQUAL
57228: IFTRUE 57232
57230: GO 57243
57232: POP
// bc_type := b_oil_power ; 32 :
57233: LD_ADDR_OWVAR 42
57237: PUSH
57238: LD_INT 26
57240: ST_TO_ADDR
57241: GO 57301
57243: LD_INT 32
57245: DOUBLE
57246: EQUAL
57247: IFTRUE 57251
57249: GO 57262
57251: POP
// bc_type := b_siberite_power ; 33 :
57252: LD_ADDR_OWVAR 42
57256: PUSH
57257: LD_INT 28
57259: ST_TO_ADDR
57260: GO 57301
57262: LD_INT 33
57264: DOUBLE
57265: EQUAL
57266: IFTRUE 57270
57268: GO 57281
57270: POP
// bc_type := b_oil_mine ; 34 :
57271: LD_ADDR_OWVAR 42
57275: PUSH
57276: LD_INT 29
57278: ST_TO_ADDR
57279: GO 57301
57281: LD_INT 34
57283: DOUBLE
57284: EQUAL
57285: IFTRUE 57289
57287: GO 57300
57289: POP
// bc_type := b_siberite_mine ; end ;
57290: LD_ADDR_OWVAR 42
57294: PUSH
57295: LD_INT 30
57297: ST_TO_ADDR
57298: GO 57301
57300: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
57301: LD_ADDR_VAR 0 8
57305: PUSH
57306: LD_VAR 0 5
57310: PPUSH
57311: LD_VAR 0 6
57315: PPUSH
57316: LD_VAR 0 3
57320: PPUSH
57321: CALL_OW 47
57325: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
57326: LD_OWVAR 42
57330: PUSH
57331: LD_INT 32
57333: PUSH
57334: LD_INT 33
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: IN
57341: IFFALSE 57357
// PlaceWeaponTurret ( b , weapon ) ;
57343: LD_VAR 0 8
57347: PPUSH
57348: LD_VAR 0 4
57352: PPUSH
57353: CALL_OW 431
// end ;
57357: LD_VAR 0 7
57361: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
57362: LD_INT 0
57364: PPUSH
57365: PPUSH
57366: PPUSH
57367: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57368: LD_ADDR_VAR 0 4
57372: PUSH
57373: LD_INT 22
57375: PUSH
57376: LD_OWVAR 2
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: LD_INT 30
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 30
57400: PUSH
57401: LD_INT 1
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PPUSH
57417: CALL_OW 69
57421: ST_TO_ADDR
// if not tmp then
57422: LD_VAR 0 4
57426: NOT
57427: IFFALSE 57431
// exit ;
57429: GO 57490
// for i in tmp do
57431: LD_ADDR_VAR 0 2
57435: PUSH
57436: LD_VAR 0 4
57440: PUSH
57441: FOR_IN
57442: IFFALSE 57488
// for j = 1 to 3 do
57444: LD_ADDR_VAR 0 3
57448: PUSH
57449: DOUBLE
57450: LD_INT 1
57452: DEC
57453: ST_TO_ADDR
57454: LD_INT 3
57456: PUSH
57457: FOR_TO
57458: IFFALSE 57484
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
57460: LD_VAR 0 2
57464: PPUSH
57465: CALL_OW 274
57469: PPUSH
57470: LD_VAR 0 3
57474: PPUSH
57475: LD_INT 99999
57477: PPUSH
57478: CALL_OW 277
57482: GO 57457
57484: POP
57485: POP
57486: GO 57441
57488: POP
57489: POP
// end ;
57490: LD_VAR 0 1
57494: RET
// export function hHackSetLevel10 ; var i , j ; begin
57495: LD_INT 0
57497: PPUSH
57498: PPUSH
57499: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
57500: LD_ADDR_VAR 0 2
57504: PUSH
57505: LD_INT 21
57507: PUSH
57508: LD_INT 1
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PPUSH
57515: CALL_OW 69
57519: PUSH
57520: FOR_IN
57521: IFFALSE 57573
// if IsSelected ( i ) then
57523: LD_VAR 0 2
57527: PPUSH
57528: CALL_OW 306
57532: IFFALSE 57571
// begin for j := 1 to 4 do
57534: LD_ADDR_VAR 0 3
57538: PUSH
57539: DOUBLE
57540: LD_INT 1
57542: DEC
57543: ST_TO_ADDR
57544: LD_INT 4
57546: PUSH
57547: FOR_TO
57548: IFFALSE 57569
// SetSkill ( i , j , 10 ) ;
57550: LD_VAR 0 2
57554: PPUSH
57555: LD_VAR 0 3
57559: PPUSH
57560: LD_INT 10
57562: PPUSH
57563: CALL_OW 237
57567: GO 57547
57569: POP
57570: POP
// end ;
57571: GO 57520
57573: POP
57574: POP
// end ;
57575: LD_VAR 0 1
57579: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
57580: LD_INT 0
57582: PPUSH
57583: PPUSH
57584: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
57585: LD_ADDR_VAR 0 2
57589: PUSH
57590: LD_INT 22
57592: PUSH
57593: LD_OWVAR 2
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 21
57604: PUSH
57605: LD_INT 1
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PPUSH
57616: CALL_OW 69
57620: PUSH
57621: FOR_IN
57622: IFFALSE 57663
// begin for j := 1 to 4 do
57624: LD_ADDR_VAR 0 3
57628: PUSH
57629: DOUBLE
57630: LD_INT 1
57632: DEC
57633: ST_TO_ADDR
57634: LD_INT 4
57636: PUSH
57637: FOR_TO
57638: IFFALSE 57659
// SetSkill ( i , j , 10 ) ;
57640: LD_VAR 0 2
57644: PPUSH
57645: LD_VAR 0 3
57649: PPUSH
57650: LD_INT 10
57652: PPUSH
57653: CALL_OW 237
57657: GO 57637
57659: POP
57660: POP
// end ;
57661: GO 57621
57663: POP
57664: POP
// end ;
57665: LD_VAR 0 1
57669: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
57670: LD_INT 0
57672: PPUSH
// uc_side := your_side ;
57673: LD_ADDR_OWVAR 20
57677: PUSH
57678: LD_OWVAR 2
57682: ST_TO_ADDR
// uc_nation := nation ;
57683: LD_ADDR_OWVAR 21
57687: PUSH
57688: LD_VAR 0 1
57692: ST_TO_ADDR
// InitHc ;
57693: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
57697: LD_INT 0
57699: PPUSH
57700: LD_VAR 0 2
57704: PPUSH
57705: LD_VAR 0 3
57709: PPUSH
57710: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
57714: LD_VAR 0 4
57718: PPUSH
57719: LD_VAR 0 5
57723: PPUSH
57724: CALL_OW 428
57728: PUSH
57729: LD_INT 0
57731: EQUAL
57732: IFFALSE 57756
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
57734: CALL_OW 44
57738: PPUSH
57739: LD_VAR 0 4
57743: PPUSH
57744: LD_VAR 0 5
57748: PPUSH
57749: LD_INT 1
57751: PPUSH
57752: CALL_OW 48
// end ;
57756: LD_VAR 0 6
57760: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
57761: LD_INT 0
57763: PPUSH
57764: PPUSH
// uc_side := your_side ;
57765: LD_ADDR_OWVAR 20
57769: PUSH
57770: LD_OWVAR 2
57774: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
57775: LD_VAR 0 1
57779: PUSH
57780: LD_INT 1
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: LD_INT 3
57788: PUSH
57789: LD_INT 4
57791: PUSH
57792: LD_INT 5
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: IN
57802: IFFALSE 57814
// uc_nation := nation_american else
57804: LD_ADDR_OWVAR 21
57808: PUSH
57809: LD_INT 1
57811: ST_TO_ADDR
57812: GO 57857
// if chassis in [ 11 , 12 , 13 , 14 ] then
57814: LD_VAR 0 1
57818: PUSH
57819: LD_INT 11
57821: PUSH
57822: LD_INT 12
57824: PUSH
57825: LD_INT 13
57827: PUSH
57828: LD_INT 14
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: IN
57837: IFFALSE 57849
// uc_nation := nation_arabian else
57839: LD_ADDR_OWVAR 21
57843: PUSH
57844: LD_INT 2
57846: ST_TO_ADDR
57847: GO 57857
// uc_nation := nation_russian ;
57849: LD_ADDR_OWVAR 21
57853: PUSH
57854: LD_INT 3
57856: ST_TO_ADDR
// vc_chassis := chassis ;
57857: LD_ADDR_OWVAR 37
57861: PUSH
57862: LD_VAR 0 1
57866: ST_TO_ADDR
// vc_engine := engine ;
57867: LD_ADDR_OWVAR 39
57871: PUSH
57872: LD_VAR 0 2
57876: ST_TO_ADDR
// vc_control := control ;
57877: LD_ADDR_OWVAR 38
57881: PUSH
57882: LD_VAR 0 3
57886: ST_TO_ADDR
// vc_weapon := weapon ;
57887: LD_ADDR_OWVAR 40
57891: PUSH
57892: LD_VAR 0 4
57896: ST_TO_ADDR
// un := CreateVehicle ;
57897: LD_ADDR_VAR 0 8
57901: PUSH
57902: CALL_OW 45
57906: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
57907: LD_VAR 0 8
57911: PPUSH
57912: LD_INT 0
57914: PPUSH
57915: LD_INT 5
57917: PPUSH
57918: CALL_OW 12
57922: PPUSH
57923: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
57927: LD_VAR 0 8
57931: PPUSH
57932: LD_VAR 0 5
57936: PPUSH
57937: LD_VAR 0 6
57941: PPUSH
57942: LD_INT 1
57944: PPUSH
57945: CALL_OW 48
// end ;
57949: LD_VAR 0 7
57953: RET
// export hInvincible ; every 1 do
57954: GO 57956
57956: DISABLE
// hInvincible := [ ] ;
57957: LD_ADDR_EXP 96
57961: PUSH
57962: EMPTY
57963: ST_TO_ADDR
57964: END
// every 10 do var i ;
57965: GO 57967
57967: DISABLE
57968: LD_INT 0
57970: PPUSH
// begin enable ;
57971: ENABLE
// if not hInvincible then
57972: LD_EXP 96
57976: NOT
57977: IFFALSE 57981
// exit ;
57979: GO 58025
// for i in hInvincible do
57981: LD_ADDR_VAR 0 1
57985: PUSH
57986: LD_EXP 96
57990: PUSH
57991: FOR_IN
57992: IFFALSE 58023
// if GetLives ( i ) < 1000 then
57994: LD_VAR 0 1
57998: PPUSH
57999: CALL_OW 256
58003: PUSH
58004: LD_INT 1000
58006: LESS
58007: IFFALSE 58021
// SetLives ( i , 1000 ) ;
58009: LD_VAR 0 1
58013: PPUSH
58014: LD_INT 1000
58016: PPUSH
58017: CALL_OW 234
58021: GO 57991
58023: POP
58024: POP
// end ;
58025: PPOPN 1
58027: END
// export function hHackInvincible ; var i ; begin
58028: LD_INT 0
58030: PPUSH
58031: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
58032: LD_ADDR_VAR 0 2
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 21
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 21
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: PPUSH
58065: CALL_OW 69
58069: PUSH
58070: FOR_IN
58071: IFFALSE 58132
// if IsSelected ( i ) then
58073: LD_VAR 0 2
58077: PPUSH
58078: CALL_OW 306
58082: IFFALSE 58130
// begin if i in hInvincible then
58084: LD_VAR 0 2
58088: PUSH
58089: LD_EXP 96
58093: IN
58094: IFFALSE 58114
// hInvincible := hInvincible diff i else
58096: LD_ADDR_EXP 96
58100: PUSH
58101: LD_EXP 96
58105: PUSH
58106: LD_VAR 0 2
58110: DIFF
58111: ST_TO_ADDR
58112: GO 58130
// hInvincible := hInvincible union i ;
58114: LD_ADDR_EXP 96
58118: PUSH
58119: LD_EXP 96
58123: PUSH
58124: LD_VAR 0 2
58128: UNION
58129: ST_TO_ADDR
// end ;
58130: GO 58070
58132: POP
58133: POP
// end ;
58134: LD_VAR 0 1
58138: RET
// export function hHackInvisible ; var i , j ; begin
58139: LD_INT 0
58141: PPUSH
58142: PPUSH
58143: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
58144: LD_ADDR_VAR 0 2
58148: PUSH
58149: LD_INT 21
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PPUSH
58159: CALL_OW 69
58163: PUSH
58164: FOR_IN
58165: IFFALSE 58189
// if IsSelected ( i ) then
58167: LD_VAR 0 2
58171: PPUSH
58172: CALL_OW 306
58176: IFFALSE 58187
// ComForceInvisible ( i ) ;
58178: LD_VAR 0 2
58182: PPUSH
58183: CALL_OW 496
58187: GO 58164
58189: POP
58190: POP
// end ;
58191: LD_VAR 0 1
58195: RET
// export function hHackChangeYourSide ; begin
58196: LD_INT 0
58198: PPUSH
// if your_side = 8 then
58199: LD_OWVAR 2
58203: PUSH
58204: LD_INT 8
58206: EQUAL
58207: IFFALSE 58219
// your_side := 0 else
58209: LD_ADDR_OWVAR 2
58213: PUSH
58214: LD_INT 0
58216: ST_TO_ADDR
58217: GO 58233
// your_side := your_side + 1 ;
58219: LD_ADDR_OWVAR 2
58223: PUSH
58224: LD_OWVAR 2
58228: PUSH
58229: LD_INT 1
58231: PLUS
58232: ST_TO_ADDR
// end ;
58233: LD_VAR 0 1
58237: RET
// export function hHackChangeUnitSide ; var i , j ; begin
58238: LD_INT 0
58240: PPUSH
58241: PPUSH
58242: PPUSH
// for i in all_units do
58243: LD_ADDR_VAR 0 2
58247: PUSH
58248: LD_OWVAR 3
58252: PUSH
58253: FOR_IN
58254: IFFALSE 58332
// if IsSelected ( i ) then
58256: LD_VAR 0 2
58260: PPUSH
58261: CALL_OW 306
58265: IFFALSE 58330
// begin j := GetSide ( i ) ;
58267: LD_ADDR_VAR 0 3
58271: PUSH
58272: LD_VAR 0 2
58276: PPUSH
58277: CALL_OW 255
58281: ST_TO_ADDR
// if j = 8 then
58282: LD_VAR 0 3
58286: PUSH
58287: LD_INT 8
58289: EQUAL
58290: IFFALSE 58302
// j := 0 else
58292: LD_ADDR_VAR 0 3
58296: PUSH
58297: LD_INT 0
58299: ST_TO_ADDR
58300: GO 58316
// j := j + 1 ;
58302: LD_ADDR_VAR 0 3
58306: PUSH
58307: LD_VAR 0 3
58311: PUSH
58312: LD_INT 1
58314: PLUS
58315: ST_TO_ADDR
// SetSide ( i , j ) ;
58316: LD_VAR 0 2
58320: PPUSH
58321: LD_VAR 0 3
58325: PPUSH
58326: CALL_OW 235
// end ;
58330: GO 58253
58332: POP
58333: POP
// end ;
58334: LD_VAR 0 1
58338: RET
// export function hHackFog ; begin
58339: LD_INT 0
58341: PPUSH
// FogOff ( true ) ;
58342: LD_INT 1
58344: PPUSH
58345: CALL_OW 344
// end ;
58349: LD_VAR 0 1
58353: RET
// export function hHackTeleport ( unit , x , y ) ; begin
58354: LD_INT 0
58356: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
58357: LD_VAR 0 1
58361: PPUSH
58362: LD_VAR 0 2
58366: PPUSH
58367: LD_VAR 0 3
58371: PPUSH
58372: LD_INT 1
58374: PPUSH
58375: LD_INT 1
58377: PPUSH
58378: CALL_OW 483
// CenterOnXY ( x , y ) ;
58382: LD_VAR 0 2
58386: PPUSH
58387: LD_VAR 0 3
58391: PPUSH
58392: CALL_OW 84
// end ;
58396: LD_VAR 0 4
58400: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
58401: LD_INT 0
58403: PPUSH
58404: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
58405: LD_VAR 0 1
58409: NOT
58410: PUSH
58411: LD_VAR 0 2
58415: PPUSH
58416: LD_VAR 0 3
58420: PPUSH
58421: CALL_OW 488
58425: NOT
58426: OR
58427: PUSH
58428: LD_VAR 0 1
58432: PPUSH
58433: CALL_OW 266
58437: PUSH
58438: LD_INT 3
58440: NONEQUAL
58441: PUSH
58442: LD_VAR 0 1
58446: PPUSH
58447: CALL_OW 247
58451: PUSH
58452: LD_INT 1
58454: EQUAL
58455: NOT
58456: AND
58457: OR
58458: IFFALSE 58462
// exit ;
58460: GO 58611
// if GetType ( factory ) = unit_human then
58462: LD_VAR 0 1
58466: PPUSH
58467: CALL_OW 247
58471: PUSH
58472: LD_INT 1
58474: EQUAL
58475: IFFALSE 58492
// factory := IsInUnit ( factory ) ;
58477: LD_ADDR_VAR 0 1
58481: PUSH
58482: LD_VAR 0 1
58486: PPUSH
58487: CALL_OW 310
58491: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
58492: LD_VAR 0 1
58496: PPUSH
58497: CALL_OW 266
58501: PUSH
58502: LD_INT 3
58504: NONEQUAL
58505: IFFALSE 58509
// exit ;
58507: GO 58611
// if HexInfo ( x , y ) = factory then
58509: LD_VAR 0 2
58513: PPUSH
58514: LD_VAR 0 3
58518: PPUSH
58519: CALL_OW 428
58523: PUSH
58524: LD_VAR 0 1
58528: EQUAL
58529: IFFALSE 58556
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
58531: LD_ADDR_EXP 97
58535: PUSH
58536: LD_EXP 97
58540: PPUSH
58541: LD_VAR 0 1
58545: PPUSH
58546: LD_INT 0
58548: PPUSH
58549: CALL_OW 1
58553: ST_TO_ADDR
58554: GO 58607
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
58556: LD_ADDR_EXP 97
58560: PUSH
58561: LD_EXP 97
58565: PPUSH
58566: LD_VAR 0 1
58570: PPUSH
58571: LD_VAR 0 1
58575: PPUSH
58576: CALL_OW 255
58580: PUSH
58581: LD_VAR 0 1
58585: PUSH
58586: LD_VAR 0 2
58590: PUSH
58591: LD_VAR 0 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: PPUSH
58602: CALL_OW 1
58606: ST_TO_ADDR
// UpdateFactoryWaypoints ;
58607: CALL 58616 0 0
// end ;
58611: LD_VAR 0 4
58615: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
58616: LD_INT 0
58618: PPUSH
58619: PPUSH
58620: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
58621: LD_STRING resetFactoryWaypoint();
58623: PPUSH
58624: CALL_OW 559
// if factoryWaypoints then
58628: LD_EXP 97
58632: IFFALSE 58758
// begin list := PrepareArray ( factoryWaypoints ) ;
58634: LD_ADDR_VAR 0 3
58638: PUSH
58639: LD_EXP 97
58643: PPUSH
58644: CALL 43793 0 1
58648: ST_TO_ADDR
// for i := 1 to list do
58649: LD_ADDR_VAR 0 2
58653: PUSH
58654: DOUBLE
58655: LD_INT 1
58657: DEC
58658: ST_TO_ADDR
58659: LD_VAR 0 3
58663: PUSH
58664: FOR_TO
58665: IFFALSE 58756
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
58667: LD_STRING setFactoryWaypointXY(
58669: PUSH
58670: LD_VAR 0 3
58674: PUSH
58675: LD_VAR 0 2
58679: ARRAY
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: STR
58685: PUSH
58686: LD_STRING ,
58688: STR
58689: PUSH
58690: LD_VAR 0 3
58694: PUSH
58695: LD_VAR 0 2
58699: ARRAY
58700: PUSH
58701: LD_INT 2
58703: ARRAY
58704: STR
58705: PUSH
58706: LD_STRING ,
58708: STR
58709: PUSH
58710: LD_VAR 0 3
58714: PUSH
58715: LD_VAR 0 2
58719: ARRAY
58720: PUSH
58721: LD_INT 3
58723: ARRAY
58724: STR
58725: PUSH
58726: LD_STRING ,
58728: STR
58729: PUSH
58730: LD_VAR 0 3
58734: PUSH
58735: LD_VAR 0 2
58739: ARRAY
58740: PUSH
58741: LD_INT 4
58743: ARRAY
58744: STR
58745: PUSH
58746: LD_STRING )
58748: STR
58749: PPUSH
58750: CALL_OW 559
58754: GO 58664
58756: POP
58757: POP
// end ; end ;
58758: LD_VAR 0 1
58762: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
58763: LD_INT 0
58765: PPUSH
// if HexInfo ( x , y ) = warehouse then
58766: LD_VAR 0 2
58770: PPUSH
58771: LD_VAR 0 3
58775: PPUSH
58776: CALL_OW 428
58780: PUSH
58781: LD_VAR 0 1
58785: EQUAL
58786: IFFALSE 58813
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
58788: LD_ADDR_EXP 98
58792: PUSH
58793: LD_EXP 98
58797: PPUSH
58798: LD_VAR 0 1
58802: PPUSH
58803: LD_INT 0
58805: PPUSH
58806: CALL_OW 1
58810: ST_TO_ADDR
58811: GO 58864
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
58813: LD_ADDR_EXP 98
58817: PUSH
58818: LD_EXP 98
58822: PPUSH
58823: LD_VAR 0 1
58827: PPUSH
58828: LD_VAR 0 1
58832: PPUSH
58833: CALL_OW 255
58837: PUSH
58838: LD_VAR 0 1
58842: PUSH
58843: LD_VAR 0 2
58847: PUSH
58848: LD_VAR 0 3
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: PPUSH
58859: CALL_OW 1
58863: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
58864: CALL 58873 0 0
// end ;
58868: LD_VAR 0 4
58872: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
58873: LD_INT 0
58875: PPUSH
58876: PPUSH
58877: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
58878: LD_STRING resetWarehouseGatheringPoints();
58880: PPUSH
58881: CALL_OW 559
// if warehouseGatheringPoints then
58885: LD_EXP 98
58889: IFFALSE 59015
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
58891: LD_ADDR_VAR 0 3
58895: PUSH
58896: LD_EXP 98
58900: PPUSH
58901: CALL 43793 0 1
58905: ST_TO_ADDR
// for i := 1 to list do
58906: LD_ADDR_VAR 0 2
58910: PUSH
58911: DOUBLE
58912: LD_INT 1
58914: DEC
58915: ST_TO_ADDR
58916: LD_VAR 0 3
58920: PUSH
58921: FOR_TO
58922: IFFALSE 59013
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
58924: LD_STRING setWarehouseGatheringPointXY(
58926: PUSH
58927: LD_VAR 0 3
58931: PUSH
58932: LD_VAR 0 2
58936: ARRAY
58937: PUSH
58938: LD_INT 1
58940: ARRAY
58941: STR
58942: PUSH
58943: LD_STRING ,
58945: STR
58946: PUSH
58947: LD_VAR 0 3
58951: PUSH
58952: LD_VAR 0 2
58956: ARRAY
58957: PUSH
58958: LD_INT 2
58960: ARRAY
58961: STR
58962: PUSH
58963: LD_STRING ,
58965: STR
58966: PUSH
58967: LD_VAR 0 3
58971: PUSH
58972: LD_VAR 0 2
58976: ARRAY
58977: PUSH
58978: LD_INT 3
58980: ARRAY
58981: STR
58982: PUSH
58983: LD_STRING ,
58985: STR
58986: PUSH
58987: LD_VAR 0 3
58991: PUSH
58992: LD_VAR 0 2
58996: ARRAY
58997: PUSH
58998: LD_INT 4
59000: ARRAY
59001: STR
59002: PUSH
59003: LD_STRING )
59005: STR
59006: PPUSH
59007: CALL_OW 559
59011: GO 58921
59013: POP
59014: POP
// end ; end ;
59015: LD_VAR 0 1
59019: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
59020: LD_EXP 98
59024: IFFALSE 59711
59026: GO 59028
59028: DISABLE
59029: LD_INT 0
59031: PPUSH
59032: PPUSH
59033: PPUSH
59034: PPUSH
59035: PPUSH
59036: PPUSH
59037: PPUSH
59038: PPUSH
59039: PPUSH
// begin enable ;
59040: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
59041: LD_ADDR_VAR 0 3
59045: PUSH
59046: LD_EXP 98
59050: PPUSH
59051: CALL 43793 0 1
59055: ST_TO_ADDR
// if not list then
59056: LD_VAR 0 3
59060: NOT
59061: IFFALSE 59065
// exit ;
59063: GO 59711
// for i := 1 to list do
59065: LD_ADDR_VAR 0 1
59069: PUSH
59070: DOUBLE
59071: LD_INT 1
59073: DEC
59074: ST_TO_ADDR
59075: LD_VAR 0 3
59079: PUSH
59080: FOR_TO
59081: IFFALSE 59709
// begin depot := list [ i ] [ 2 ] ;
59083: LD_ADDR_VAR 0 8
59087: PUSH
59088: LD_VAR 0 3
59092: PUSH
59093: LD_VAR 0 1
59097: ARRAY
59098: PUSH
59099: LD_INT 2
59101: ARRAY
59102: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
59103: LD_ADDR_VAR 0 5
59107: PUSH
59108: LD_VAR 0 3
59112: PUSH
59113: LD_VAR 0 1
59117: ARRAY
59118: PUSH
59119: LD_INT 1
59121: ARRAY
59122: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
59123: LD_VAR 0 8
59127: PPUSH
59128: CALL_OW 301
59132: PUSH
59133: LD_VAR 0 5
59137: PUSH
59138: LD_VAR 0 8
59142: PPUSH
59143: CALL_OW 255
59147: NONEQUAL
59148: OR
59149: IFFALSE 59178
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
59151: LD_ADDR_EXP 98
59155: PUSH
59156: LD_EXP 98
59160: PPUSH
59161: LD_VAR 0 8
59165: PPUSH
59166: LD_INT 0
59168: PPUSH
59169: CALL_OW 1
59173: ST_TO_ADDR
// exit ;
59174: POP
59175: POP
59176: GO 59711
// end ; x := list [ i ] [ 3 ] ;
59178: LD_ADDR_VAR 0 6
59182: PUSH
59183: LD_VAR 0 3
59187: PUSH
59188: LD_VAR 0 1
59192: ARRAY
59193: PUSH
59194: LD_INT 3
59196: ARRAY
59197: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
59198: LD_ADDR_VAR 0 7
59202: PUSH
59203: LD_VAR 0 3
59207: PUSH
59208: LD_VAR 0 1
59212: ARRAY
59213: PUSH
59214: LD_INT 4
59216: ARRAY
59217: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
59218: LD_ADDR_VAR 0 9
59222: PUSH
59223: LD_VAR 0 6
59227: PPUSH
59228: LD_VAR 0 7
59232: PPUSH
59233: LD_INT 16
59235: PPUSH
59236: CALL 42377 0 3
59240: ST_TO_ADDR
// if not cratesNearbyPoint then
59241: LD_VAR 0 9
59245: NOT
59246: IFFALSE 59252
// exit ;
59248: POP
59249: POP
59250: GO 59711
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
59252: LD_ADDR_VAR 0 4
59256: PUSH
59257: LD_INT 22
59259: PUSH
59260: LD_VAR 0 5
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: LD_INT 60
59274: PUSH
59275: EMPTY
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 91
59284: PUSH
59285: LD_VAR 0 8
59289: PUSH
59290: LD_INT 6
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 25
59303: PUSH
59304: LD_INT 2
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 25
59313: PUSH
59314: LD_INT 16
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: PPUSH
59332: CALL_OW 69
59336: PUSH
59337: LD_VAR 0 8
59341: PPUSH
59342: CALL_OW 313
59346: PPUSH
59347: LD_INT 3
59349: PUSH
59350: LD_INT 60
59352: PUSH
59353: EMPTY
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 2
59362: PUSH
59363: LD_INT 25
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 25
59375: PUSH
59376: LD_INT 16
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PPUSH
59392: CALL_OW 72
59396: UNION
59397: ST_TO_ADDR
// if tmp then
59398: LD_VAR 0 4
59402: IFFALSE 59482
// begin tmp := ShrinkArray ( tmp , 3 ) ;
59404: LD_ADDR_VAR 0 4
59408: PUSH
59409: LD_VAR 0 4
59413: PPUSH
59414: LD_INT 3
59416: PPUSH
59417: CALL 40344 0 2
59421: ST_TO_ADDR
// for j in tmp do
59422: LD_ADDR_VAR 0 2
59426: PUSH
59427: LD_VAR 0 4
59431: PUSH
59432: FOR_IN
59433: IFFALSE 59476
// begin if IsInUnit ( j ) then
59435: LD_VAR 0 2
59439: PPUSH
59440: CALL_OW 310
59444: IFFALSE 59455
// ComExit ( j ) ;
59446: LD_VAR 0 2
59450: PPUSH
59451: CALL 40427 0 1
// AddComCollect ( j , x , y ) ;
59455: LD_VAR 0 2
59459: PPUSH
59460: LD_VAR 0 6
59464: PPUSH
59465: LD_VAR 0 7
59469: PPUSH
59470: CALL_OW 177
// end ;
59474: GO 59432
59476: POP
59477: POP
// exit ;
59478: POP
59479: POP
59480: GO 59711
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
59482: LD_ADDR_VAR 0 4
59486: PUSH
59487: LD_INT 22
59489: PUSH
59490: LD_VAR 0 5
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 91
59501: PUSH
59502: LD_VAR 0 8
59506: PUSH
59507: LD_INT 8
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: LD_INT 34
59520: PUSH
59521: LD_INT 12
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 34
59530: PUSH
59531: LD_INT 51
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 34
59540: PUSH
59541: LD_INT 32
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 34
59550: PUSH
59551: LD_EXP 22
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: LIST
59571: PPUSH
59572: CALL_OW 69
59576: ST_TO_ADDR
// if tmp then
59577: LD_VAR 0 4
59581: IFFALSE 59707
// begin for j in tmp do
59583: LD_ADDR_VAR 0 2
59587: PUSH
59588: LD_VAR 0 4
59592: PUSH
59593: FOR_IN
59594: IFFALSE 59705
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
59596: LD_VAR 0 2
59600: PPUSH
59601: CALL_OW 262
59605: PUSH
59606: LD_INT 3
59608: EQUAL
59609: PUSH
59610: LD_VAR 0 2
59614: PPUSH
59615: CALL_OW 261
59619: PUSH
59620: LD_INT 20
59622: GREATER
59623: OR
59624: PUSH
59625: LD_VAR 0 2
59629: PPUSH
59630: CALL_OW 314
59634: NOT
59635: AND
59636: PUSH
59637: LD_VAR 0 2
59641: PPUSH
59642: CALL_OW 263
59646: PUSH
59647: LD_INT 1
59649: NONEQUAL
59650: PUSH
59651: LD_VAR 0 2
59655: PPUSH
59656: CALL_OW 311
59660: OR
59661: AND
59662: IFFALSE 59703
// begin ComCollect ( j , x , y ) ;
59664: LD_VAR 0 2
59668: PPUSH
59669: LD_VAR 0 6
59673: PPUSH
59674: LD_VAR 0 7
59678: PPUSH
59679: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
59683: LD_VAR 0 2
59687: PPUSH
59688: LD_VAR 0 8
59692: PPUSH
59693: CALL_OW 172
// exit ;
59697: POP
59698: POP
59699: POP
59700: POP
59701: GO 59711
// end ;
59703: GO 59593
59705: POP
59706: POP
// end ; end ;
59707: GO 59080
59709: POP
59710: POP
// end ; end_of_file
59711: PPOPN 9
59713: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
59714: LD_VAR 0 1
59718: PUSH
59719: LD_INT 200
59721: DOUBLE
59722: GREATEREQUAL
59723: IFFALSE 59731
59725: LD_INT 299
59727: DOUBLE
59728: LESSEQUAL
59729: IFTRUE 59733
59731: GO 59765
59733: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
59734: LD_VAR 0 1
59738: PPUSH
59739: LD_VAR 0 2
59743: PPUSH
59744: LD_VAR 0 3
59748: PPUSH
59749: LD_VAR 0 4
59753: PPUSH
59754: LD_VAR 0 5
59758: PPUSH
59759: CALL 60255 0 5
59763: GO 59842
59765: LD_INT 300
59767: DOUBLE
59768: GREATEREQUAL
59769: IFFALSE 59777
59771: LD_INT 399
59773: DOUBLE
59774: LESSEQUAL
59775: IFTRUE 59779
59777: GO 59841
59779: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
59780: LD_VAR 0 1
59784: PPUSH
59785: LD_VAR 0 2
59789: PPUSH
59790: LD_VAR 0 3
59794: PPUSH
59795: LD_VAR 0 4
59799: PPUSH
59800: LD_VAR 0 5
59804: PPUSH
59805: LD_VAR 0 6
59809: PPUSH
59810: LD_VAR 0 7
59814: PPUSH
59815: LD_VAR 0 8
59819: PPUSH
59820: LD_VAR 0 9
59824: PPUSH
59825: LD_VAR 0 10
59829: PPUSH
59830: LD_VAR 0 11
59834: PPUSH
59835: CALL 56421 0 11
59839: GO 59842
59841: POP
// end ;
59842: PPOPN 11
59844: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
59845: LD_VAR 0 1
59849: PPUSH
59850: LD_VAR 0 2
59854: PPUSH
59855: LD_VAR 0 3
59859: PPUSH
59860: LD_VAR 0 4
59864: PPUSH
59865: LD_VAR 0 5
59869: PPUSH
59870: CALL 59991 0 5
// end ; end_of_file
59874: PPOPN 5
59876: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59877: LD_INT 0
59879: PPUSH
59880: PPUSH
59881: PPUSH
59882: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59883: LD_VAR 0 1
59887: PPUSH
59888: CALL_OW 264
59892: PUSH
59893: LD_EXP 25
59897: EQUAL
59898: IFFALSE 59970
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59900: LD_INT 68
59902: PPUSH
59903: LD_VAR 0 1
59907: PPUSH
59908: CALL_OW 255
59912: PPUSH
59913: CALL_OW 321
59917: PUSH
59918: LD_INT 2
59920: EQUAL
59921: IFFALSE 59933
// eff := 70 else
59923: LD_ADDR_VAR 0 4
59927: PUSH
59928: LD_INT 70
59930: ST_TO_ADDR
59931: GO 59941
// eff := 30 ;
59933: LD_ADDR_VAR 0 4
59937: PUSH
59938: LD_INT 30
59940: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59941: LD_VAR 0 1
59945: PPUSH
59946: CALL_OW 250
59950: PPUSH
59951: LD_VAR 0 1
59955: PPUSH
59956: CALL_OW 251
59960: PPUSH
59961: LD_VAR 0 4
59965: PPUSH
59966: CALL_OW 495
// end ; end ;
59970: LD_VAR 0 2
59974: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59975: LD_INT 0
59977: PPUSH
// end ;
59978: LD_VAR 0 4
59982: RET
// export function SOS_Command ( cmd ) ; begin
59983: LD_INT 0
59985: PPUSH
// end ;
59986: LD_VAR 0 2
59990: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59991: LD_INT 0
59993: PPUSH
// end ;
59994: LD_VAR 0 6
59998: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59999: LD_INT 0
60001: PPUSH
60002: PPUSH
// if not vehicle or not factory then
60003: LD_VAR 0 1
60007: NOT
60008: PUSH
60009: LD_VAR 0 2
60013: NOT
60014: OR
60015: IFFALSE 60019
// exit ;
60017: GO 60250
// if factoryWaypoints >= factory then
60019: LD_EXP 97
60023: PUSH
60024: LD_VAR 0 2
60028: GREATEREQUAL
60029: IFFALSE 60250
// if factoryWaypoints [ factory ] then
60031: LD_EXP 97
60035: PUSH
60036: LD_VAR 0 2
60040: ARRAY
60041: IFFALSE 60250
// begin if GetControl ( vehicle ) = control_manual then
60043: LD_VAR 0 1
60047: PPUSH
60048: CALL_OW 263
60052: PUSH
60053: LD_INT 1
60055: EQUAL
60056: IFFALSE 60137
// begin driver := IsDrivenBy ( vehicle ) ;
60058: LD_ADDR_VAR 0 4
60062: PUSH
60063: LD_VAR 0 1
60067: PPUSH
60068: CALL_OW 311
60072: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60073: LD_VAR 0 4
60077: PPUSH
60078: LD_EXP 97
60082: PUSH
60083: LD_VAR 0 2
60087: ARRAY
60088: PUSH
60089: LD_INT 3
60091: ARRAY
60092: PPUSH
60093: LD_EXP 97
60097: PUSH
60098: LD_VAR 0 2
60102: ARRAY
60103: PUSH
60104: LD_INT 4
60106: ARRAY
60107: PPUSH
60108: CALL_OW 171
// AddComExitVehicle ( driver ) ;
60112: LD_VAR 0 4
60116: PPUSH
60117: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
60121: LD_VAR 0 4
60125: PPUSH
60126: LD_VAR 0 2
60130: PPUSH
60131: CALL_OW 180
// end else
60135: GO 60250
// if GetControl ( vehicle ) = control_remote then
60137: LD_VAR 0 1
60141: PPUSH
60142: CALL_OW 263
60146: PUSH
60147: LD_INT 2
60149: EQUAL
60150: IFFALSE 60211
// begin wait ( 0 0$2 ) ;
60152: LD_INT 70
60154: PPUSH
60155: CALL_OW 67
// if Connect ( vehicle ) then
60159: LD_VAR 0 1
60163: PPUSH
60164: CALL 10738 0 1
60168: IFFALSE 60209
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60170: LD_VAR 0 1
60174: PPUSH
60175: LD_EXP 97
60179: PUSH
60180: LD_VAR 0 2
60184: ARRAY
60185: PUSH
60186: LD_INT 3
60188: ARRAY
60189: PPUSH
60190: LD_EXP 97
60194: PUSH
60195: LD_VAR 0 2
60199: ARRAY
60200: PUSH
60201: LD_INT 4
60203: ARRAY
60204: PPUSH
60205: CALL_OW 171
// end else
60209: GO 60250
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
60211: LD_VAR 0 1
60215: PPUSH
60216: LD_EXP 97
60220: PUSH
60221: LD_VAR 0 2
60225: ARRAY
60226: PUSH
60227: LD_INT 3
60229: ARRAY
60230: PPUSH
60231: LD_EXP 97
60235: PUSH
60236: LD_VAR 0 2
60240: ARRAY
60241: PUSH
60242: LD_INT 4
60244: ARRAY
60245: PPUSH
60246: CALL_OW 171
// end ; end ;
60250: LD_VAR 0 3
60254: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60255: LD_INT 0
60257: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60258: LD_VAR 0 1
60262: PUSH
60263: LD_INT 250
60265: EQUAL
60266: PUSH
60267: LD_VAR 0 2
60271: PPUSH
60272: CALL_OW 264
60276: PUSH
60277: LD_EXP 28
60281: EQUAL
60282: AND
60283: IFFALSE 60304
// MinerPlaceMine ( unit , x , y ) ;
60285: LD_VAR 0 2
60289: PPUSH
60290: LD_VAR 0 4
60294: PPUSH
60295: LD_VAR 0 5
60299: PPUSH
60300: CALL 62703 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60304: LD_VAR 0 1
60308: PUSH
60309: LD_INT 251
60311: EQUAL
60312: PUSH
60313: LD_VAR 0 2
60317: PPUSH
60318: CALL_OW 264
60322: PUSH
60323: LD_EXP 28
60327: EQUAL
60328: AND
60329: IFFALSE 60350
// MinerDetonateMine ( unit , x , y ) ;
60331: LD_VAR 0 2
60335: PPUSH
60336: LD_VAR 0 4
60340: PPUSH
60341: LD_VAR 0 5
60345: PPUSH
60346: CALL 62980 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60350: LD_VAR 0 1
60354: PUSH
60355: LD_INT 252
60357: EQUAL
60358: PUSH
60359: LD_VAR 0 2
60363: PPUSH
60364: CALL_OW 264
60368: PUSH
60369: LD_EXP 28
60373: EQUAL
60374: AND
60375: IFFALSE 60396
// MinerCreateMinefield ( unit , x , y ) ;
60377: LD_VAR 0 2
60381: PPUSH
60382: LD_VAR 0 4
60386: PPUSH
60387: LD_VAR 0 5
60391: PPUSH
60392: CALL 63397 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60396: LD_VAR 0 1
60400: PUSH
60401: LD_INT 253
60403: EQUAL
60404: PUSH
60405: LD_VAR 0 2
60409: PPUSH
60410: CALL_OW 257
60414: PUSH
60415: LD_INT 5
60417: EQUAL
60418: AND
60419: IFFALSE 60440
// ComBinocular ( unit , x , y ) ;
60421: LD_VAR 0 2
60425: PPUSH
60426: LD_VAR 0 4
60430: PPUSH
60431: LD_VAR 0 5
60435: PPUSH
60436: CALL 63768 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60440: LD_VAR 0 1
60444: PUSH
60445: LD_INT 254
60447: EQUAL
60448: PUSH
60449: LD_VAR 0 2
60453: PPUSH
60454: CALL_OW 264
60458: PUSH
60459: LD_EXP 23
60463: EQUAL
60464: AND
60465: PUSH
60466: LD_VAR 0 3
60470: PPUSH
60471: CALL_OW 263
60475: PUSH
60476: LD_INT 3
60478: EQUAL
60479: AND
60480: IFFALSE 60496
// HackDestroyVehicle ( unit , selectedUnit ) ;
60482: LD_VAR 0 2
60486: PPUSH
60487: LD_VAR 0 3
60491: PPUSH
60492: CALL 62063 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60496: LD_VAR 0 1
60500: PUSH
60501: LD_INT 255
60503: EQUAL
60504: PUSH
60505: LD_VAR 0 2
60509: PPUSH
60510: CALL_OW 264
60514: PUSH
60515: LD_INT 14
60517: PUSH
60518: LD_INT 53
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: IN
60525: AND
60526: PUSH
60527: LD_VAR 0 4
60531: PPUSH
60532: LD_VAR 0 5
60536: PPUSH
60537: CALL_OW 488
60541: AND
60542: IFFALSE 60566
// CutTreeXYR ( unit , x , y , 12 ) ;
60544: LD_VAR 0 2
60548: PPUSH
60549: LD_VAR 0 4
60553: PPUSH
60554: LD_VAR 0 5
60558: PPUSH
60559: LD_INT 12
60561: PPUSH
60562: CALL 60629 0 4
// if cmd = 256 then
60566: LD_VAR 0 1
60570: PUSH
60571: LD_INT 256
60573: EQUAL
60574: IFFALSE 60595
// SetFactoryWaypoint ( unit , x , y ) ;
60576: LD_VAR 0 2
60580: PPUSH
60581: LD_VAR 0 4
60585: PPUSH
60586: LD_VAR 0 5
60590: PPUSH
60591: CALL 58401 0 3
// if cmd = 257 then
60595: LD_VAR 0 1
60599: PUSH
60600: LD_INT 257
60602: EQUAL
60603: IFFALSE 60624
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60605: LD_VAR 0 2
60609: PPUSH
60610: LD_VAR 0 4
60614: PPUSH
60615: LD_VAR 0 5
60619: PPUSH
60620: CALL 58763 0 3
// end ;
60624: LD_VAR 0 6
60628: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60629: LD_INT 0
60631: PPUSH
60632: PPUSH
60633: PPUSH
60634: PPUSH
60635: PPUSH
60636: PPUSH
60637: PPUSH
60638: PPUSH
60639: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
60640: LD_VAR 0 1
60644: NOT
60645: PUSH
60646: LD_VAR 0 2
60650: PPUSH
60651: LD_VAR 0 3
60655: PPUSH
60656: CALL_OW 488
60660: NOT
60661: OR
60662: PUSH
60663: LD_VAR 0 4
60667: NOT
60668: OR
60669: IFFALSE 60673
// exit ;
60671: GO 61013
// list := [ ] ;
60673: LD_ADDR_VAR 0 13
60677: PUSH
60678: EMPTY
60679: ST_TO_ADDR
// if x - r < 0 then
60680: LD_VAR 0 2
60684: PUSH
60685: LD_VAR 0 4
60689: MINUS
60690: PUSH
60691: LD_INT 0
60693: LESS
60694: IFFALSE 60706
// min_x := 0 else
60696: LD_ADDR_VAR 0 7
60700: PUSH
60701: LD_INT 0
60703: ST_TO_ADDR
60704: GO 60722
// min_x := x - r ;
60706: LD_ADDR_VAR 0 7
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_VAR 0 4
60720: MINUS
60721: ST_TO_ADDR
// if y - r < 0 then
60722: LD_VAR 0 3
60726: PUSH
60727: LD_VAR 0 4
60731: MINUS
60732: PUSH
60733: LD_INT 0
60735: LESS
60736: IFFALSE 60748
// min_y := 0 else
60738: LD_ADDR_VAR 0 8
60742: PUSH
60743: LD_INT 0
60745: ST_TO_ADDR
60746: GO 60764
// min_y := y - r ;
60748: LD_ADDR_VAR 0 8
60752: PUSH
60753: LD_VAR 0 3
60757: PUSH
60758: LD_VAR 0 4
60762: MINUS
60763: ST_TO_ADDR
// max_x := x + r ;
60764: LD_ADDR_VAR 0 9
60768: PUSH
60769: LD_VAR 0 2
60773: PUSH
60774: LD_VAR 0 4
60778: PLUS
60779: ST_TO_ADDR
// max_y := y + r ;
60780: LD_ADDR_VAR 0 10
60784: PUSH
60785: LD_VAR 0 3
60789: PUSH
60790: LD_VAR 0 4
60794: PLUS
60795: ST_TO_ADDR
// for _x = min_x to max_x do
60796: LD_ADDR_VAR 0 11
60800: PUSH
60801: DOUBLE
60802: LD_VAR 0 7
60806: DEC
60807: ST_TO_ADDR
60808: LD_VAR 0 9
60812: PUSH
60813: FOR_TO
60814: IFFALSE 60931
// for _y = min_y to max_y do
60816: LD_ADDR_VAR 0 12
60820: PUSH
60821: DOUBLE
60822: LD_VAR 0 8
60826: DEC
60827: ST_TO_ADDR
60828: LD_VAR 0 10
60832: PUSH
60833: FOR_TO
60834: IFFALSE 60927
// begin if not ValidHex ( _x , _y ) then
60836: LD_VAR 0 11
60840: PPUSH
60841: LD_VAR 0 12
60845: PPUSH
60846: CALL_OW 488
60850: NOT
60851: IFFALSE 60855
// continue ;
60853: GO 60833
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60855: LD_VAR 0 11
60859: PPUSH
60860: LD_VAR 0 12
60864: PPUSH
60865: CALL_OW 351
60869: PUSH
60870: LD_VAR 0 11
60874: PPUSH
60875: LD_VAR 0 12
60879: PPUSH
60880: CALL_OW 554
60884: AND
60885: IFFALSE 60925
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60887: LD_ADDR_VAR 0 13
60891: PUSH
60892: LD_VAR 0 13
60896: PPUSH
60897: LD_VAR 0 13
60901: PUSH
60902: LD_INT 1
60904: PLUS
60905: PPUSH
60906: LD_VAR 0 11
60910: PUSH
60911: LD_VAR 0 12
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PPUSH
60920: CALL_OW 2
60924: ST_TO_ADDR
// end ;
60925: GO 60833
60927: POP
60928: POP
60929: GO 60813
60931: POP
60932: POP
// if not list then
60933: LD_VAR 0 13
60937: NOT
60938: IFFALSE 60942
// exit ;
60940: GO 61013
// for i in list do
60942: LD_ADDR_VAR 0 6
60946: PUSH
60947: LD_VAR 0 13
60951: PUSH
60952: FOR_IN
60953: IFFALSE 61011
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60955: LD_VAR 0 1
60959: PPUSH
60960: LD_STRING M
60962: PUSH
60963: LD_VAR 0 6
60967: PUSH
60968: LD_INT 1
60970: ARRAY
60971: PUSH
60972: LD_VAR 0 6
60976: PUSH
60977: LD_INT 2
60979: ARRAY
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 0
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: PUSH
61002: EMPTY
61003: LIST
61004: PPUSH
61005: CALL_OW 447
61009: GO 60952
61011: POP
61012: POP
// end ;
61013: LD_VAR 0 5
61017: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61018: LD_EXP 100
61022: NOT
61023: IFFALSE 61073
61025: GO 61027
61027: DISABLE
// begin initHack := true ;
61028: LD_ADDR_EXP 100
61032: PUSH
61033: LD_INT 1
61035: ST_TO_ADDR
// hackTanks := [ ] ;
61036: LD_ADDR_EXP 101
61040: PUSH
61041: EMPTY
61042: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61043: LD_ADDR_EXP 102
61047: PUSH
61048: EMPTY
61049: ST_TO_ADDR
// hackLimit := 3 ;
61050: LD_ADDR_EXP 103
61054: PUSH
61055: LD_INT 3
61057: ST_TO_ADDR
// hackDist := 12 ;
61058: LD_ADDR_EXP 104
61062: PUSH
61063: LD_INT 12
61065: ST_TO_ADDR
// hackCounter := [ ] ;
61066: LD_ADDR_EXP 105
61070: PUSH
61071: EMPTY
61072: ST_TO_ADDR
// end ;
61073: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61074: LD_EXP 100
61078: PUSH
61079: LD_INT 34
61081: PUSH
61082: LD_EXP 23
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PPUSH
61091: CALL_OW 69
61095: AND
61096: IFFALSE 61351
61098: GO 61100
61100: DISABLE
61101: LD_INT 0
61103: PPUSH
61104: PPUSH
// begin enable ;
61105: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61106: LD_ADDR_VAR 0 1
61110: PUSH
61111: LD_INT 34
61113: PUSH
61114: LD_EXP 23
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PPUSH
61123: CALL_OW 69
61127: PUSH
61128: FOR_IN
61129: IFFALSE 61349
// begin if not i in hackTanks then
61131: LD_VAR 0 1
61135: PUSH
61136: LD_EXP 101
61140: IN
61141: NOT
61142: IFFALSE 61225
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61144: LD_ADDR_EXP 101
61148: PUSH
61149: LD_EXP 101
61153: PPUSH
61154: LD_EXP 101
61158: PUSH
61159: LD_INT 1
61161: PLUS
61162: PPUSH
61163: LD_VAR 0 1
61167: PPUSH
61168: CALL_OW 1
61172: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61173: LD_ADDR_EXP 102
61177: PUSH
61178: LD_EXP 102
61182: PPUSH
61183: LD_EXP 102
61187: PUSH
61188: LD_INT 1
61190: PLUS
61191: PPUSH
61192: EMPTY
61193: PPUSH
61194: CALL_OW 1
61198: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61199: LD_ADDR_EXP 105
61203: PUSH
61204: LD_EXP 105
61208: PPUSH
61209: LD_EXP 105
61213: PUSH
61214: LD_INT 1
61216: PLUS
61217: PPUSH
61218: EMPTY
61219: PPUSH
61220: CALL_OW 1
61224: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61225: LD_VAR 0 1
61229: PPUSH
61230: CALL_OW 302
61234: NOT
61235: IFFALSE 61248
// begin HackUnlinkAll ( i ) ;
61237: LD_VAR 0 1
61241: PPUSH
61242: CALL 61354 0 1
// continue ;
61246: GO 61128
// end ; HackCheckCapturedStatus ( i ) ;
61248: LD_VAR 0 1
61252: PPUSH
61253: CALL 61797 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61257: LD_ADDR_VAR 0 2
61261: PUSH
61262: LD_INT 81
61264: PUSH
61265: LD_VAR 0 1
61269: PPUSH
61270: CALL_OW 255
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 33
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 91
61291: PUSH
61292: LD_VAR 0 1
61296: PUSH
61297: LD_EXP 104
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 50
61309: PUSH
61310: EMPTY
61311: LIST
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: LIST
61317: LIST
61318: PPUSH
61319: CALL_OW 69
61323: ST_TO_ADDR
// if not tmp then
61324: LD_VAR 0 2
61328: NOT
61329: IFFALSE 61333
// continue ;
61331: GO 61128
// HackLink ( i , tmp ) ;
61333: LD_VAR 0 1
61337: PPUSH
61338: LD_VAR 0 2
61342: PPUSH
61343: CALL 61490 0 2
// end ;
61347: GO 61128
61349: POP
61350: POP
// end ;
61351: PPOPN 2
61353: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61354: LD_INT 0
61356: PPUSH
61357: PPUSH
61358: PPUSH
// if not hack in hackTanks then
61359: LD_VAR 0 1
61363: PUSH
61364: LD_EXP 101
61368: IN
61369: NOT
61370: IFFALSE 61374
// exit ;
61372: GO 61485
// index := GetElementIndex ( hackTanks , hack ) ;
61374: LD_ADDR_VAR 0 4
61378: PUSH
61379: LD_EXP 101
61383: PPUSH
61384: LD_VAR 0 1
61388: PPUSH
61389: CALL 7552 0 2
61393: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61394: LD_EXP 102
61398: PUSH
61399: LD_VAR 0 4
61403: ARRAY
61404: IFFALSE 61485
// begin for i in hackTanksCaptured [ index ] do
61406: LD_ADDR_VAR 0 3
61410: PUSH
61411: LD_EXP 102
61415: PUSH
61416: LD_VAR 0 4
61420: ARRAY
61421: PUSH
61422: FOR_IN
61423: IFFALSE 61449
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61425: LD_VAR 0 3
61429: PUSH
61430: LD_INT 1
61432: ARRAY
61433: PPUSH
61434: LD_VAR 0 3
61438: PUSH
61439: LD_INT 2
61441: ARRAY
61442: PPUSH
61443: CALL_OW 235
61447: GO 61422
61449: POP
61450: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61451: LD_ADDR_EXP 102
61455: PUSH
61456: LD_EXP 102
61460: PPUSH
61461: LD_VAR 0 4
61465: PPUSH
61466: EMPTY
61467: PPUSH
61468: CALL_OW 1
61472: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61473: LD_VAR 0 1
61477: PPUSH
61478: LD_INT 0
61480: PPUSH
61481: CALL_OW 505
// end ; end ;
61485: LD_VAR 0 2
61489: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61490: LD_INT 0
61492: PPUSH
61493: PPUSH
61494: PPUSH
// if not hack in hackTanks or not vehicles then
61495: LD_VAR 0 1
61499: PUSH
61500: LD_EXP 101
61504: IN
61505: NOT
61506: PUSH
61507: LD_VAR 0 2
61511: NOT
61512: OR
61513: IFFALSE 61517
// exit ;
61515: GO 61792
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61517: LD_ADDR_VAR 0 2
61521: PUSH
61522: LD_VAR 0 1
61526: PPUSH
61527: LD_VAR 0 2
61531: PPUSH
61532: LD_INT 1
61534: PPUSH
61535: LD_INT 1
61537: PPUSH
61538: CALL 8202 0 4
61542: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61543: LD_ADDR_VAR 0 5
61547: PUSH
61548: LD_EXP 101
61552: PPUSH
61553: LD_VAR 0 1
61557: PPUSH
61558: CALL 7552 0 2
61562: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61563: LD_EXP 102
61567: PUSH
61568: LD_VAR 0 5
61572: ARRAY
61573: PUSH
61574: LD_EXP 103
61578: LESS
61579: IFFALSE 61768
// begin for i := 1 to vehicles do
61581: LD_ADDR_VAR 0 4
61585: PUSH
61586: DOUBLE
61587: LD_INT 1
61589: DEC
61590: ST_TO_ADDR
61591: LD_VAR 0 2
61595: PUSH
61596: FOR_TO
61597: IFFALSE 61766
// begin if hackTanksCaptured [ index ] = hackLimit then
61599: LD_EXP 102
61603: PUSH
61604: LD_VAR 0 5
61608: ARRAY
61609: PUSH
61610: LD_EXP 103
61614: EQUAL
61615: IFFALSE 61619
// break ;
61617: GO 61766
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61619: LD_ADDR_EXP 105
61623: PUSH
61624: LD_EXP 105
61628: PPUSH
61629: LD_VAR 0 5
61633: PPUSH
61634: LD_EXP 105
61638: PUSH
61639: LD_VAR 0 5
61643: ARRAY
61644: PUSH
61645: LD_INT 1
61647: PLUS
61648: PPUSH
61649: CALL_OW 1
61653: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61654: LD_ADDR_EXP 102
61658: PUSH
61659: LD_EXP 102
61663: PPUSH
61664: LD_VAR 0 5
61668: PUSH
61669: LD_EXP 102
61673: PUSH
61674: LD_VAR 0 5
61678: ARRAY
61679: PUSH
61680: LD_INT 1
61682: PLUS
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PPUSH
61688: LD_VAR 0 2
61692: PUSH
61693: LD_VAR 0 4
61697: ARRAY
61698: PUSH
61699: LD_VAR 0 2
61703: PUSH
61704: LD_VAR 0 4
61708: ARRAY
61709: PPUSH
61710: CALL_OW 255
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PPUSH
61719: CALL 7767 0 3
61723: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61724: LD_VAR 0 2
61728: PUSH
61729: LD_VAR 0 4
61733: ARRAY
61734: PPUSH
61735: LD_VAR 0 1
61739: PPUSH
61740: CALL_OW 255
61744: PPUSH
61745: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61749: LD_VAR 0 2
61753: PUSH
61754: LD_VAR 0 4
61758: ARRAY
61759: PPUSH
61760: CALL_OW 141
// end ;
61764: GO 61596
61766: POP
61767: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61768: LD_VAR 0 1
61772: PPUSH
61773: LD_EXP 102
61777: PUSH
61778: LD_VAR 0 5
61782: ARRAY
61783: PUSH
61784: LD_INT 0
61786: PLUS
61787: PPUSH
61788: CALL_OW 505
// end ;
61792: LD_VAR 0 3
61796: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61797: LD_INT 0
61799: PPUSH
61800: PPUSH
61801: PPUSH
61802: PPUSH
// if not hack in hackTanks then
61803: LD_VAR 0 1
61807: PUSH
61808: LD_EXP 101
61812: IN
61813: NOT
61814: IFFALSE 61818
// exit ;
61816: GO 62058
// index := GetElementIndex ( hackTanks , hack ) ;
61818: LD_ADDR_VAR 0 4
61822: PUSH
61823: LD_EXP 101
61827: PPUSH
61828: LD_VAR 0 1
61832: PPUSH
61833: CALL 7552 0 2
61837: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61838: LD_ADDR_VAR 0 3
61842: PUSH
61843: DOUBLE
61844: LD_EXP 102
61848: PUSH
61849: LD_VAR 0 4
61853: ARRAY
61854: INC
61855: ST_TO_ADDR
61856: LD_INT 1
61858: PUSH
61859: FOR_DOWNTO
61860: IFFALSE 62032
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61862: LD_ADDR_VAR 0 5
61866: PUSH
61867: LD_EXP 102
61871: PUSH
61872: LD_VAR 0 4
61876: ARRAY
61877: PUSH
61878: LD_VAR 0 3
61882: ARRAY
61883: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61884: LD_VAR 0 5
61888: PUSH
61889: LD_INT 1
61891: ARRAY
61892: PPUSH
61893: CALL_OW 302
61897: NOT
61898: PUSH
61899: LD_VAR 0 5
61903: PUSH
61904: LD_INT 1
61906: ARRAY
61907: PPUSH
61908: CALL_OW 255
61912: PUSH
61913: LD_VAR 0 1
61917: PPUSH
61918: CALL_OW 255
61922: NONEQUAL
61923: OR
61924: IFFALSE 62030
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61926: LD_VAR 0 5
61930: PUSH
61931: LD_INT 1
61933: ARRAY
61934: PPUSH
61935: CALL_OW 305
61939: PUSH
61940: LD_VAR 0 5
61944: PUSH
61945: LD_INT 1
61947: ARRAY
61948: PPUSH
61949: CALL_OW 255
61953: PUSH
61954: LD_VAR 0 1
61958: PPUSH
61959: CALL_OW 255
61963: EQUAL
61964: AND
61965: IFFALSE 61989
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61967: LD_VAR 0 5
61971: PUSH
61972: LD_INT 1
61974: ARRAY
61975: PPUSH
61976: LD_VAR 0 5
61980: PUSH
61981: LD_INT 2
61983: ARRAY
61984: PPUSH
61985: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61989: LD_ADDR_EXP 102
61993: PUSH
61994: LD_EXP 102
61998: PPUSH
61999: LD_VAR 0 4
62003: PPUSH
62004: LD_EXP 102
62008: PUSH
62009: LD_VAR 0 4
62013: ARRAY
62014: PPUSH
62015: LD_VAR 0 3
62019: PPUSH
62020: CALL_OW 3
62024: PPUSH
62025: CALL_OW 1
62029: ST_TO_ADDR
// end ; end ;
62030: GO 61859
62032: POP
62033: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62034: LD_VAR 0 1
62038: PPUSH
62039: LD_EXP 102
62043: PUSH
62044: LD_VAR 0 4
62048: ARRAY
62049: PUSH
62050: LD_INT 0
62052: PLUS
62053: PPUSH
62054: CALL_OW 505
// end ;
62058: LD_VAR 0 2
62062: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62063: LD_INT 0
62065: PPUSH
62066: PPUSH
62067: PPUSH
62068: PPUSH
// if not hack in hackTanks then
62069: LD_VAR 0 1
62073: PUSH
62074: LD_EXP 101
62078: IN
62079: NOT
62080: IFFALSE 62084
// exit ;
62082: GO 62169
// index := GetElementIndex ( hackTanks , hack ) ;
62084: LD_ADDR_VAR 0 5
62088: PUSH
62089: LD_EXP 101
62093: PPUSH
62094: LD_VAR 0 1
62098: PPUSH
62099: CALL 7552 0 2
62103: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62104: LD_ADDR_VAR 0 4
62108: PUSH
62109: DOUBLE
62110: LD_INT 1
62112: DEC
62113: ST_TO_ADDR
62114: LD_EXP 102
62118: PUSH
62119: LD_VAR 0 5
62123: ARRAY
62124: PUSH
62125: FOR_TO
62126: IFFALSE 62167
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62128: LD_EXP 102
62132: PUSH
62133: LD_VAR 0 5
62137: ARRAY
62138: PUSH
62139: LD_VAR 0 4
62143: ARRAY
62144: PUSH
62145: LD_INT 1
62147: ARRAY
62148: PUSH
62149: LD_VAR 0 2
62153: EQUAL
62154: IFFALSE 62165
// KillUnit ( vehicle ) ;
62156: LD_VAR 0 2
62160: PPUSH
62161: CALL_OW 66
62165: GO 62125
62167: POP
62168: POP
// end ;
62169: LD_VAR 0 3
62173: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62174: LD_EXP 106
62178: NOT
62179: IFFALSE 62214
62181: GO 62183
62183: DISABLE
// begin initMiner := true ;
62184: LD_ADDR_EXP 106
62188: PUSH
62189: LD_INT 1
62191: ST_TO_ADDR
// minersList := [ ] ;
62192: LD_ADDR_EXP 107
62196: PUSH
62197: EMPTY
62198: ST_TO_ADDR
// minerMinesList := [ ] ;
62199: LD_ADDR_EXP 108
62203: PUSH
62204: EMPTY
62205: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62206: LD_ADDR_EXP 109
62210: PUSH
62211: LD_INT 5
62213: ST_TO_ADDR
// end ;
62214: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62215: LD_EXP 106
62219: PUSH
62220: LD_INT 34
62222: PUSH
62223: LD_EXP 28
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PPUSH
62232: CALL_OW 69
62236: AND
62237: IFFALSE 62700
62239: GO 62241
62241: DISABLE
62242: LD_INT 0
62244: PPUSH
62245: PPUSH
62246: PPUSH
62247: PPUSH
// begin enable ;
62248: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62249: LD_ADDR_VAR 0 1
62253: PUSH
62254: LD_INT 34
62256: PUSH
62257: LD_EXP 28
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PPUSH
62266: CALL_OW 69
62270: PUSH
62271: FOR_IN
62272: IFFALSE 62344
// begin if not i in minersList then
62274: LD_VAR 0 1
62278: PUSH
62279: LD_EXP 107
62283: IN
62284: NOT
62285: IFFALSE 62342
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62287: LD_ADDR_EXP 107
62291: PUSH
62292: LD_EXP 107
62296: PPUSH
62297: LD_EXP 107
62301: PUSH
62302: LD_INT 1
62304: PLUS
62305: PPUSH
62306: LD_VAR 0 1
62310: PPUSH
62311: CALL_OW 1
62315: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62316: LD_ADDR_EXP 108
62320: PUSH
62321: LD_EXP 108
62325: PPUSH
62326: LD_EXP 108
62330: PUSH
62331: LD_INT 1
62333: PLUS
62334: PPUSH
62335: EMPTY
62336: PPUSH
62337: CALL_OW 1
62341: ST_TO_ADDR
// end end ;
62342: GO 62271
62344: POP
62345: POP
// for i := minerMinesList downto 1 do
62346: LD_ADDR_VAR 0 1
62350: PUSH
62351: DOUBLE
62352: LD_EXP 108
62356: INC
62357: ST_TO_ADDR
62358: LD_INT 1
62360: PUSH
62361: FOR_DOWNTO
62362: IFFALSE 62698
// begin if IsLive ( minersList [ i ] ) then
62364: LD_EXP 107
62368: PUSH
62369: LD_VAR 0 1
62373: ARRAY
62374: PPUSH
62375: CALL_OW 300
62379: IFFALSE 62407
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62381: LD_EXP 107
62385: PUSH
62386: LD_VAR 0 1
62390: ARRAY
62391: PPUSH
62392: LD_EXP 108
62396: PUSH
62397: LD_VAR 0 1
62401: ARRAY
62402: PPUSH
62403: CALL_OW 505
// if not minerMinesList [ i ] then
62407: LD_EXP 108
62411: PUSH
62412: LD_VAR 0 1
62416: ARRAY
62417: NOT
62418: IFFALSE 62422
// continue ;
62420: GO 62361
// for j := minerMinesList [ i ] downto 1 do
62422: LD_ADDR_VAR 0 2
62426: PUSH
62427: DOUBLE
62428: LD_EXP 108
62432: PUSH
62433: LD_VAR 0 1
62437: ARRAY
62438: INC
62439: ST_TO_ADDR
62440: LD_INT 1
62442: PUSH
62443: FOR_DOWNTO
62444: IFFALSE 62694
// begin side := GetSide ( minersList [ i ] ) ;
62446: LD_ADDR_VAR 0 3
62450: PUSH
62451: LD_EXP 107
62455: PUSH
62456: LD_VAR 0 1
62460: ARRAY
62461: PPUSH
62462: CALL_OW 255
62466: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62467: LD_ADDR_VAR 0 4
62471: PUSH
62472: LD_EXP 108
62476: PUSH
62477: LD_VAR 0 1
62481: ARRAY
62482: PUSH
62483: LD_VAR 0 2
62487: ARRAY
62488: PUSH
62489: LD_INT 1
62491: ARRAY
62492: PPUSH
62493: LD_EXP 108
62497: PUSH
62498: LD_VAR 0 1
62502: ARRAY
62503: PUSH
62504: LD_VAR 0 2
62508: ARRAY
62509: PUSH
62510: LD_INT 2
62512: ARRAY
62513: PPUSH
62514: CALL_OW 428
62518: ST_TO_ADDR
// if not tmp then
62519: LD_VAR 0 4
62523: NOT
62524: IFFALSE 62528
// continue ;
62526: GO 62443
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62528: LD_VAR 0 4
62532: PUSH
62533: LD_INT 81
62535: PUSH
62536: LD_VAR 0 3
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PPUSH
62545: CALL_OW 69
62549: IN
62550: PUSH
62551: LD_EXP 108
62555: PUSH
62556: LD_VAR 0 1
62560: ARRAY
62561: PUSH
62562: LD_VAR 0 2
62566: ARRAY
62567: PUSH
62568: LD_INT 1
62570: ARRAY
62571: PPUSH
62572: LD_EXP 108
62576: PUSH
62577: LD_VAR 0 1
62581: ARRAY
62582: PUSH
62583: LD_VAR 0 2
62587: ARRAY
62588: PUSH
62589: LD_INT 2
62591: ARRAY
62592: PPUSH
62593: CALL_OW 458
62597: AND
62598: IFFALSE 62692
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62600: LD_EXP 108
62604: PUSH
62605: LD_VAR 0 1
62609: ARRAY
62610: PUSH
62611: LD_VAR 0 2
62615: ARRAY
62616: PUSH
62617: LD_INT 1
62619: ARRAY
62620: PPUSH
62621: LD_EXP 108
62625: PUSH
62626: LD_VAR 0 1
62630: ARRAY
62631: PUSH
62632: LD_VAR 0 2
62636: ARRAY
62637: PUSH
62638: LD_INT 2
62640: ARRAY
62641: PPUSH
62642: LD_VAR 0 3
62646: PPUSH
62647: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62651: LD_ADDR_EXP 108
62655: PUSH
62656: LD_EXP 108
62660: PPUSH
62661: LD_VAR 0 1
62665: PPUSH
62666: LD_EXP 108
62670: PUSH
62671: LD_VAR 0 1
62675: ARRAY
62676: PPUSH
62677: LD_VAR 0 2
62681: PPUSH
62682: CALL_OW 3
62686: PPUSH
62687: CALL_OW 1
62691: ST_TO_ADDR
// end ; end ;
62692: GO 62443
62694: POP
62695: POP
// end ;
62696: GO 62361
62698: POP
62699: POP
// end ;
62700: PPOPN 4
62702: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62703: LD_INT 0
62705: PPUSH
62706: PPUSH
// result := false ;
62707: LD_ADDR_VAR 0 4
62711: PUSH
62712: LD_INT 0
62714: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62715: LD_VAR 0 1
62719: PPUSH
62720: CALL_OW 264
62724: PUSH
62725: LD_EXP 28
62729: EQUAL
62730: NOT
62731: IFFALSE 62735
// exit ;
62733: GO 62975
// index := GetElementIndex ( minersList , unit ) ;
62735: LD_ADDR_VAR 0 5
62739: PUSH
62740: LD_EXP 107
62744: PPUSH
62745: LD_VAR 0 1
62749: PPUSH
62750: CALL 7552 0 2
62754: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62755: LD_EXP 108
62759: PUSH
62760: LD_VAR 0 5
62764: ARRAY
62765: PUSH
62766: LD_EXP 109
62770: GREATEREQUAL
62771: IFFALSE 62775
// exit ;
62773: GO 62975
// ComMoveXY ( unit , x , y ) ;
62775: LD_VAR 0 1
62779: PPUSH
62780: LD_VAR 0 2
62784: PPUSH
62785: LD_VAR 0 3
62789: PPUSH
62790: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62794: LD_INT 35
62796: PPUSH
62797: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62801: LD_VAR 0 1
62805: PPUSH
62806: LD_VAR 0 2
62810: PPUSH
62811: LD_VAR 0 3
62815: PPUSH
62816: CALL 38838 0 3
62820: NOT
62821: PUSH
62822: LD_VAR 0 1
62826: PPUSH
62827: CALL_OW 314
62831: AND
62832: IFFALSE 62836
// exit ;
62834: GO 62975
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62836: LD_VAR 0 2
62840: PPUSH
62841: LD_VAR 0 3
62845: PPUSH
62846: CALL_OW 428
62850: PUSH
62851: LD_VAR 0 1
62855: EQUAL
62856: PUSH
62857: LD_VAR 0 1
62861: PPUSH
62862: CALL_OW 314
62866: NOT
62867: AND
62868: IFFALSE 62794
// PlaySoundXY ( x , y , PlantMine ) ;
62870: LD_VAR 0 2
62874: PPUSH
62875: LD_VAR 0 3
62879: PPUSH
62880: LD_STRING PlantMine
62882: PPUSH
62883: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62887: LD_VAR 0 2
62891: PPUSH
62892: LD_VAR 0 3
62896: PPUSH
62897: LD_VAR 0 1
62901: PPUSH
62902: CALL_OW 255
62906: PPUSH
62907: LD_INT 0
62909: PPUSH
62910: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62914: LD_ADDR_EXP 108
62918: PUSH
62919: LD_EXP 108
62923: PPUSH
62924: LD_VAR 0 5
62928: PUSH
62929: LD_EXP 108
62933: PUSH
62934: LD_VAR 0 5
62938: ARRAY
62939: PUSH
62940: LD_INT 1
62942: PLUS
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PPUSH
62948: LD_VAR 0 2
62952: PUSH
62953: LD_VAR 0 3
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PPUSH
62962: CALL 7767 0 3
62966: ST_TO_ADDR
// result := true ;
62967: LD_ADDR_VAR 0 4
62971: PUSH
62972: LD_INT 1
62974: ST_TO_ADDR
// end ;
62975: LD_VAR 0 4
62979: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62980: LD_INT 0
62982: PPUSH
62983: PPUSH
62984: PPUSH
// if not unit in minersList then
62985: LD_VAR 0 1
62989: PUSH
62990: LD_EXP 107
62994: IN
62995: NOT
62996: IFFALSE 63000
// exit ;
62998: GO 63392
// index := GetElementIndex ( minersList , unit ) ;
63000: LD_ADDR_VAR 0 6
63004: PUSH
63005: LD_EXP 107
63009: PPUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: CALL 7552 0 2
63019: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63020: LD_ADDR_VAR 0 5
63024: PUSH
63025: DOUBLE
63026: LD_EXP 108
63030: PUSH
63031: LD_VAR 0 6
63035: ARRAY
63036: INC
63037: ST_TO_ADDR
63038: LD_INT 1
63040: PUSH
63041: FOR_DOWNTO
63042: IFFALSE 63203
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63044: LD_EXP 108
63048: PUSH
63049: LD_VAR 0 6
63053: ARRAY
63054: PUSH
63055: LD_VAR 0 5
63059: ARRAY
63060: PUSH
63061: LD_INT 1
63063: ARRAY
63064: PUSH
63065: LD_VAR 0 2
63069: EQUAL
63070: PUSH
63071: LD_EXP 108
63075: PUSH
63076: LD_VAR 0 6
63080: ARRAY
63081: PUSH
63082: LD_VAR 0 5
63086: ARRAY
63087: PUSH
63088: LD_INT 2
63090: ARRAY
63091: PUSH
63092: LD_VAR 0 3
63096: EQUAL
63097: AND
63098: IFFALSE 63201
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63100: LD_EXP 108
63104: PUSH
63105: LD_VAR 0 6
63109: ARRAY
63110: PUSH
63111: LD_VAR 0 5
63115: ARRAY
63116: PUSH
63117: LD_INT 1
63119: ARRAY
63120: PPUSH
63121: LD_EXP 108
63125: PUSH
63126: LD_VAR 0 6
63130: ARRAY
63131: PUSH
63132: LD_VAR 0 5
63136: ARRAY
63137: PUSH
63138: LD_INT 2
63140: ARRAY
63141: PPUSH
63142: LD_VAR 0 1
63146: PPUSH
63147: CALL_OW 255
63151: PPUSH
63152: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63156: LD_ADDR_EXP 108
63160: PUSH
63161: LD_EXP 108
63165: PPUSH
63166: LD_VAR 0 6
63170: PPUSH
63171: LD_EXP 108
63175: PUSH
63176: LD_VAR 0 6
63180: ARRAY
63181: PPUSH
63182: LD_VAR 0 5
63186: PPUSH
63187: CALL_OW 3
63191: PPUSH
63192: CALL_OW 1
63196: ST_TO_ADDR
// exit ;
63197: POP
63198: POP
63199: GO 63392
// end ; end ;
63201: GO 63041
63203: POP
63204: POP
// for i := minerMinesList [ index ] downto 1 do
63205: LD_ADDR_VAR 0 5
63209: PUSH
63210: DOUBLE
63211: LD_EXP 108
63215: PUSH
63216: LD_VAR 0 6
63220: ARRAY
63221: INC
63222: ST_TO_ADDR
63223: LD_INT 1
63225: PUSH
63226: FOR_DOWNTO
63227: IFFALSE 63390
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63229: LD_EXP 108
63233: PUSH
63234: LD_VAR 0 6
63238: ARRAY
63239: PUSH
63240: LD_VAR 0 5
63244: ARRAY
63245: PUSH
63246: LD_INT 1
63248: ARRAY
63249: PPUSH
63250: LD_EXP 108
63254: PUSH
63255: LD_VAR 0 6
63259: ARRAY
63260: PUSH
63261: LD_VAR 0 5
63265: ARRAY
63266: PUSH
63267: LD_INT 2
63269: ARRAY
63270: PPUSH
63271: LD_VAR 0 2
63275: PPUSH
63276: LD_VAR 0 3
63280: PPUSH
63281: CALL_OW 298
63285: PUSH
63286: LD_INT 6
63288: LESS
63289: IFFALSE 63388
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63291: LD_EXP 108
63295: PUSH
63296: LD_VAR 0 6
63300: ARRAY
63301: PUSH
63302: LD_VAR 0 5
63306: ARRAY
63307: PUSH
63308: LD_INT 1
63310: ARRAY
63311: PPUSH
63312: LD_EXP 108
63316: PUSH
63317: LD_VAR 0 6
63321: ARRAY
63322: PUSH
63323: LD_VAR 0 5
63327: ARRAY
63328: PUSH
63329: LD_INT 2
63331: ARRAY
63332: PPUSH
63333: LD_VAR 0 1
63337: PPUSH
63338: CALL_OW 255
63342: PPUSH
63343: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63347: LD_ADDR_EXP 108
63351: PUSH
63352: LD_EXP 108
63356: PPUSH
63357: LD_VAR 0 6
63361: PPUSH
63362: LD_EXP 108
63366: PUSH
63367: LD_VAR 0 6
63371: ARRAY
63372: PPUSH
63373: LD_VAR 0 5
63377: PPUSH
63378: CALL_OW 3
63382: PPUSH
63383: CALL_OW 1
63387: ST_TO_ADDR
// end ; end ;
63388: GO 63226
63390: POP
63391: POP
// end ;
63392: LD_VAR 0 4
63396: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63397: LD_INT 0
63399: PPUSH
63400: PPUSH
63401: PPUSH
63402: PPUSH
63403: PPUSH
63404: PPUSH
63405: PPUSH
63406: PPUSH
63407: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63408: LD_VAR 0 1
63412: PPUSH
63413: CALL_OW 264
63417: PUSH
63418: LD_EXP 28
63422: EQUAL
63423: NOT
63424: PUSH
63425: LD_VAR 0 1
63429: PUSH
63430: LD_EXP 107
63434: IN
63435: NOT
63436: OR
63437: IFFALSE 63441
// exit ;
63439: GO 63763
// index := GetElementIndex ( minersList , unit ) ;
63441: LD_ADDR_VAR 0 6
63445: PUSH
63446: LD_EXP 107
63450: PPUSH
63451: LD_VAR 0 1
63455: PPUSH
63456: CALL 7552 0 2
63460: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63461: LD_ADDR_VAR 0 8
63465: PUSH
63466: LD_EXP 109
63470: PUSH
63471: LD_EXP 108
63475: PUSH
63476: LD_VAR 0 6
63480: ARRAY
63481: MINUS
63482: ST_TO_ADDR
// if not minesFreeAmount then
63483: LD_VAR 0 8
63487: NOT
63488: IFFALSE 63492
// exit ;
63490: GO 63763
// tmp := [ ] ;
63492: LD_ADDR_VAR 0 7
63496: PUSH
63497: EMPTY
63498: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63499: LD_ADDR_VAR 0 5
63503: PUSH
63504: DOUBLE
63505: LD_INT 1
63507: DEC
63508: ST_TO_ADDR
63509: LD_VAR 0 8
63513: PUSH
63514: FOR_TO
63515: IFFALSE 63710
// begin _d := rand ( 0 , 5 ) ;
63517: LD_ADDR_VAR 0 11
63521: PUSH
63522: LD_INT 0
63524: PPUSH
63525: LD_INT 5
63527: PPUSH
63528: CALL_OW 12
63532: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63533: LD_ADDR_VAR 0 12
63537: PUSH
63538: LD_INT 2
63540: PPUSH
63541: LD_INT 6
63543: PPUSH
63544: CALL_OW 12
63548: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63549: LD_ADDR_VAR 0 9
63553: PUSH
63554: LD_VAR 0 2
63558: PPUSH
63559: LD_VAR 0 11
63563: PPUSH
63564: LD_VAR 0 12
63568: PPUSH
63569: CALL_OW 272
63573: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63574: LD_ADDR_VAR 0 10
63578: PUSH
63579: LD_VAR 0 3
63583: PPUSH
63584: LD_VAR 0 11
63588: PPUSH
63589: LD_VAR 0 12
63593: PPUSH
63594: CALL_OW 273
63598: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63599: LD_VAR 0 9
63603: PPUSH
63604: LD_VAR 0 10
63608: PPUSH
63609: CALL_OW 488
63613: PUSH
63614: LD_VAR 0 9
63618: PUSH
63619: LD_VAR 0 10
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_VAR 0 7
63632: IN
63633: NOT
63634: AND
63635: PUSH
63636: LD_VAR 0 9
63640: PPUSH
63641: LD_VAR 0 10
63645: PPUSH
63646: CALL_OW 458
63650: NOT
63651: AND
63652: IFFALSE 63694
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63654: LD_ADDR_VAR 0 7
63658: PUSH
63659: LD_VAR 0 7
63663: PPUSH
63664: LD_VAR 0 7
63668: PUSH
63669: LD_INT 1
63671: PLUS
63672: PPUSH
63673: LD_VAR 0 9
63677: PUSH
63678: LD_VAR 0 10
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PPUSH
63687: CALL_OW 1
63691: ST_TO_ADDR
63692: GO 63708
// i := i - 1 ;
63694: LD_ADDR_VAR 0 5
63698: PUSH
63699: LD_VAR 0 5
63703: PUSH
63704: LD_INT 1
63706: MINUS
63707: ST_TO_ADDR
// end ;
63708: GO 63514
63710: POP
63711: POP
// for i in tmp do
63712: LD_ADDR_VAR 0 5
63716: PUSH
63717: LD_VAR 0 7
63721: PUSH
63722: FOR_IN
63723: IFFALSE 63761
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63725: LD_VAR 0 1
63729: PPUSH
63730: LD_VAR 0 5
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: PPUSH
63739: LD_VAR 0 5
63743: PUSH
63744: LD_INT 2
63746: ARRAY
63747: PPUSH
63748: CALL 62703 0 3
63752: NOT
63753: IFFALSE 63759
// exit ;
63755: POP
63756: POP
63757: GO 63763
63759: GO 63722
63761: POP
63762: POP
// end ;
63763: LD_VAR 0 4
63767: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63768: LD_INT 0
63770: PPUSH
63771: PPUSH
63772: PPUSH
63773: PPUSH
63774: PPUSH
63775: PPUSH
63776: PPUSH
// if not GetClass ( unit ) = class_sniper then
63777: LD_VAR 0 1
63781: PPUSH
63782: CALL_OW 257
63786: PUSH
63787: LD_INT 5
63789: EQUAL
63790: NOT
63791: IFFALSE 63795
// exit ;
63793: GO 64183
// dist := 8 ;
63795: LD_ADDR_VAR 0 5
63799: PUSH
63800: LD_INT 8
63802: ST_TO_ADDR
// viewRange := 12 ;
63803: LD_ADDR_VAR 0 7
63807: PUSH
63808: LD_INT 12
63810: ST_TO_ADDR
// side := GetSide ( unit ) ;
63811: LD_ADDR_VAR 0 6
63815: PUSH
63816: LD_VAR 0 1
63820: PPUSH
63821: CALL_OW 255
63825: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63826: LD_INT 61
63828: PPUSH
63829: LD_VAR 0 6
63833: PPUSH
63834: CALL_OW 321
63838: PUSH
63839: LD_INT 2
63841: EQUAL
63842: IFFALSE 63852
// viewRange := 16 ;
63844: LD_ADDR_VAR 0 7
63848: PUSH
63849: LD_INT 16
63851: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63852: LD_VAR 0 1
63856: PPUSH
63857: LD_VAR 0 2
63861: PPUSH
63862: LD_VAR 0 3
63866: PPUSH
63867: CALL_OW 297
63871: PUSH
63872: LD_VAR 0 5
63876: GREATER
63877: IFFALSE 63956
// begin ComMoveXY ( unit , x , y ) ;
63879: LD_VAR 0 1
63883: PPUSH
63884: LD_VAR 0 2
63888: PPUSH
63889: LD_VAR 0 3
63893: PPUSH
63894: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63898: LD_INT 35
63900: PPUSH
63901: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63905: LD_VAR 0 1
63909: PPUSH
63910: LD_VAR 0 2
63914: PPUSH
63915: LD_VAR 0 3
63919: PPUSH
63920: CALL 38838 0 3
63924: NOT
63925: IFFALSE 63929
// exit ;
63927: GO 64183
// until GetDistUnitXY ( unit , x , y ) < dist ;
63929: LD_VAR 0 1
63933: PPUSH
63934: LD_VAR 0 2
63938: PPUSH
63939: LD_VAR 0 3
63943: PPUSH
63944: CALL_OW 297
63948: PUSH
63949: LD_VAR 0 5
63953: LESS
63954: IFFALSE 63898
// end ; ComTurnXY ( unit , x , y ) ;
63956: LD_VAR 0 1
63960: PPUSH
63961: LD_VAR 0 2
63965: PPUSH
63966: LD_VAR 0 3
63970: PPUSH
63971: CALL_OW 118
// wait ( 5 ) ;
63975: LD_INT 5
63977: PPUSH
63978: CALL_OW 67
// _d := GetDir ( unit ) ;
63982: LD_ADDR_VAR 0 10
63986: PUSH
63987: LD_VAR 0 1
63991: PPUSH
63992: CALL_OW 254
63996: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63997: LD_ADDR_VAR 0 8
64001: PUSH
64002: LD_VAR 0 1
64006: PPUSH
64007: CALL_OW 250
64011: PPUSH
64012: LD_VAR 0 10
64016: PPUSH
64017: LD_VAR 0 5
64021: PPUSH
64022: CALL_OW 272
64026: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64027: LD_ADDR_VAR 0 9
64031: PUSH
64032: LD_VAR 0 1
64036: PPUSH
64037: CALL_OW 251
64041: PPUSH
64042: LD_VAR 0 10
64046: PPUSH
64047: LD_VAR 0 5
64051: PPUSH
64052: CALL_OW 273
64056: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64057: LD_VAR 0 8
64061: PPUSH
64062: LD_VAR 0 9
64066: PPUSH
64067: CALL_OW 488
64071: NOT
64072: IFFALSE 64076
// exit ;
64074: GO 64183
// ComAnimCustom ( unit , 1 ) ;
64076: LD_VAR 0 1
64080: PPUSH
64081: LD_INT 1
64083: PPUSH
64084: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64088: LD_VAR 0 8
64092: PPUSH
64093: LD_VAR 0 9
64097: PPUSH
64098: LD_VAR 0 6
64102: PPUSH
64103: LD_VAR 0 7
64107: PPUSH
64108: CALL_OW 330
// repeat wait ( 1 ) ;
64112: LD_INT 1
64114: PPUSH
64115: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64119: LD_VAR 0 1
64123: PPUSH
64124: CALL_OW 316
64128: PUSH
64129: LD_VAR 0 1
64133: PPUSH
64134: CALL_OW 314
64138: OR
64139: PUSH
64140: LD_VAR 0 1
64144: PPUSH
64145: CALL_OW 302
64149: NOT
64150: OR
64151: PUSH
64152: LD_VAR 0 1
64156: PPUSH
64157: CALL_OW 301
64161: OR
64162: IFFALSE 64112
// RemoveSeeing ( _x , _y , side ) ;
64164: LD_VAR 0 8
64168: PPUSH
64169: LD_VAR 0 9
64173: PPUSH
64174: LD_VAR 0 6
64178: PPUSH
64179: CALL_OW 331
// end ;
64183: LD_VAR 0 4
64187: RET
