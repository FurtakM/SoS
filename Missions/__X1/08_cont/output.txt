// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 18805 0 0
// PrepareRussian ;
  12: CALL 1919 0 0
// PrepareArabian ;
  16: CALL 370 0 0
// Action ;
  20: CALL 3533 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// enable ( entranceEvent ) ;
 359: LD_INT 1
 361: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 362: LD_INT 2
 364: DISABLE_MARKED
// end ; end_of_file
 365: LD_VAR 0 1
 369: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 370: LD_INT 0
 372: PPUSH
 373: PPUSH
// uc_side := 4 ;
 374: LD_ADDR_OWVAR 20
 378: PUSH
 379: LD_INT 4
 381: ST_TO_ADDR
// uc_nation := 1 ;
 382: LD_ADDR_OWVAR 21
 386: PUSH
 387: LD_INT 1
 389: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 390: LD_ADDR_EXP 50
 394: PUSH
 395: LD_STRING 07_Americans
 397: PPUSH
 398: CALL_OW 31
 402: ST_TO_ADDR
// if americanSquad < 5 then
 403: LD_EXP 50
 407: PUSH
 408: LD_INT 5
 410: LESS
 411: IFFALSE 505
// begin if not americanSquad then
 413: LD_EXP 50
 417: NOT
 418: IFFALSE 427
// americanSquad := [ ] ;
 420: LD_ADDR_EXP 50
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 427: LD_ADDR_VAR 0 2
 431: PUSH
 432: DOUBLE
 433: LD_EXP 50
 437: DEC
 438: ST_TO_ADDR
 439: LD_INT 2
 441: PUSH
 442: LD_INT 3
 444: PUSH
 445: LD_INT 4
 447: PUSH
 448: LD_INT 4
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: LD_OWVAR 67
 461: ARRAY
 462: PUSH
 463: FOR_TO
 464: IFFALSE 501
// begin PrepareHuman ( false , 2 , 6 ) ;
 466: LD_INT 0
 468: PPUSH
 469: LD_INT 2
 471: PPUSH
 472: LD_INT 6
 474: PPUSH
 475: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 479: LD_ADDR_EXP 50
 483: PUSH
 484: LD_EXP 50
 488: PPUSH
 489: CALL_OW 44
 493: PPUSH
 494: CALL 64181 0 2
 498: ST_TO_ADDR
// end ;
 499: GO 463
 501: POP
 502: POP
// end else
 503: GO 552
// for i := Count ( americanSquad ) downto 5 do
 505: LD_ADDR_VAR 0 2
 509: PUSH
 510: DOUBLE
 511: LD_EXP 50
 515: PPUSH
 516: CALL 28834 0 1
 520: INC
 521: ST_TO_ADDR
 522: LD_INT 5
 524: PUSH
 525: FOR_DOWNTO
 526: IFFALSE 550
// americanSquad := Delete ( americanSquad , i ) ;
 528: LD_ADDR_EXP 50
 532: PUSH
 533: LD_EXP 50
 537: PPUSH
 538: LD_VAR 0 2
 542: PPUSH
 543: CALL_OW 3
 547: ST_TO_ADDR
 548: GO 525
 550: POP
 551: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 552: LD_ADDR_EXP 52
 556: PUSH
 557: LD_STRING UsCommander
 559: PPUSH
 560: LD_EXP 1
 564: NOT
 565: PPUSH
 566: LD_STRING 07_
 568: PPUSH
 569: CALL 26732 0 3
 573: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 574: LD_INT 1
 576: PPUSH
 577: LD_INT 6
 579: PPUSH
 580: CALL_OW 381
// Jerry := CreateHuman ;
 584: LD_ADDR_EXP 53
 588: PUSH
 589: CALL_OW 44
 593: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 594: LD_EXP 53
 598: PPUSH
 599: LD_INT 33
 601: PPUSH
 602: CALL_OW 336
// if not Doug then
 606: LD_EXP 52
 610: NOT
 611: IFFALSE 633
// begin PrepareSoldier ( sex_male , 6 ) ;
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 6
 618: PPUSH
 619: CALL_OW 381
// Doug := CreateHuman ;
 623: LD_ADDR_EXP 52
 627: PUSH
 628: CALL_OW 44
 632: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 633: LD_EXP 52
 637: PPUSH
 638: LD_INT 33
 640: PPUSH
 641: CALL_OW 336
// if true or johnnySaved or debug then
 645: LD_INT 1
 647: PUSH
 648: LD_EXP 3
 652: OR
 653: PUSH
 654: LD_EXP 1
 658: OR
 659: IFFALSE 686
// begin Harris := NewCharacter ( Harris ) ;
 661: LD_ADDR_EXP 51
 665: PUSH
 666: LD_STRING Harris
 668: PPUSH
 669: CALL_OW 25
 673: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 674: LD_EXP 51
 678: PPUSH
 679: LD_INT 33
 681: PPUSH
 682: CALL_OW 336
// end ; uc_side := 2 ;
 686: LD_ADDR_OWVAR 20
 690: PUSH
 691: LD_INT 2
 693: ST_TO_ADDR
// uc_nation := 2 ;
 694: LD_ADDR_OWVAR 21
 698: PUSH
 699: LD_INT 2
 701: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 702: LD_ADDR_EXP 38
 706: PUSH
 707: LD_STRING Heike
 709: PPUSH
 710: LD_EXP 1
 714: NOT
 715: PPUSH
 716: LD_EXP 2
 720: PPUSH
 721: CALL 26732 0 3
 725: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 726: LD_ADDR_EXP 41
 730: PUSH
 731: LD_STRING Ibrahim
 733: PPUSH
 734: LD_EXP 1
 738: NOT
 739: PPUSH
 740: LD_EXP 2
 744: PPUSH
 745: CALL 26732 0 3
 749: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 750: LD_ADDR_EXP 39
 754: PUSH
 755: LD_STRING Givi
 757: PPUSH
 758: LD_EXP 1
 762: NOT
 763: PPUSH
 764: LD_EXP 2
 768: PPUSH
 769: CALL 26732 0 3
 773: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 42
 778: PUSH
 779: LD_STRING Kamil
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 26732 0 3
 797: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 43
 802: PUSH
 803: LD_STRING Kaia
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 26732 0 3
 821: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 44
 826: PUSH
 827: LD_STRING Sophia
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 26732 0 3
 845: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 45
 850: PUSH
 851: LD_STRING Markov
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 26732 0 3
 869: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 48
 874: PUSH
 875: LD_STRING Aviradze
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 26732 0 3
 893: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 47
 898: PUSH
 899: LD_STRING Kurt
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 26732 0 3
 917: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 40
 922: PUSH
 923: LD_STRING Mike
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 26732 0 3
 941: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
 942: LD_ADDR_EXP 46
 946: PUSH
 947: LD_STRING Olaf
 949: PPUSH
 950: CALL_OW 25
 954: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 955: LD_ADDR_EXP 49
 959: PUSH
 960: LD_STRING 07_others
 962: PPUSH
 963: CALL_OW 31
 967: ST_TO_ADDR
// end ;
 968: LD_VAR 0 1
 972: RET
// export function PrepareGame ; var i ; begin
 973: LD_INT 0
 975: PPUSH
 976: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 977: LD_EXP 38
 981: PPUSH
 982: LD_INT 23
 984: PPUSH
 985: CALL_OW 52
// if Givi then
 989: LD_EXP 39
 993: IFFALSE 1031
// begin SetSide ( Givi , 5 ) ;
 995: LD_EXP 39
 999: PPUSH
1000: LD_INT 5
1002: PPUSH
1003: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1007: LD_EXP 39
1011: PPUSH
1012: LD_INT 9
1014: PPUSH
1015: LD_INT 0
1017: PPUSH
1018: CALL_OW 49
// ComHold ( Givi ) ;
1022: LD_EXP 39
1026: PPUSH
1027: CALL_OW 140
// end ; if Markov then
1031: LD_EXP 45
1035: IFFALSE 1073
// begin SetSide ( Markov , 5 ) ;
1037: LD_EXP 45
1041: PPUSH
1042: LD_INT 5
1044: PPUSH
1045: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1049: LD_EXP 45
1053: PPUSH
1054: LD_INT 3
1056: PPUSH
1057: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1061: LD_EXP 45
1065: PPUSH
1066: LD_INT 61
1068: PPUSH
1069: CALL_OW 52
// end ; if Mike then
1073: LD_EXP 40
1077: IFFALSE 1115
// begin SetSide ( Mike , 5 ) ;
1079: LD_EXP 40
1083: PPUSH
1084: LD_INT 5
1086: PPUSH
1087: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1091: LD_EXP 40
1095: PPUSH
1096: LD_INT 17
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL_OW 49
// ComHold ( Mike ) ;
1106: LD_EXP 40
1110: PPUSH
1111: CALL_OW 140
// end ; if Olaf then
1115: LD_EXP 46
1119: IFFALSE 1160
// begin SetSide ( Olaf , 5 ) ;
1121: LD_EXP 46
1125: PPUSH
1126: LD_INT 5
1128: PPUSH
1129: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1133: LD_EXP 46
1137: PPUSH
1138: LD_INT 16
1140: PPUSH
1141: LD_INT 0
1143: PPUSH
1144: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1148: LD_EXP 46
1152: PPUSH
1153: LD_INT 3
1155: PPUSH
1156: CALL 67333 0 2
// end ; if Kamil then
1160: LD_EXP 42
1164: IFFALSE 1190
// begin SetSide ( Kamil , 5 ) ;
1166: LD_EXP 42
1170: PPUSH
1171: LD_INT 5
1173: PPUSH
1174: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1178: LD_EXP 42
1182: PPUSH
1183: LD_INT 109
1185: PPUSH
1186: CALL_OW 52
// end ; if Kurt then
1190: LD_EXP 47
1194: IFFALSE 1220
// begin SetSide ( Kurt , 5 ) ;
1196: LD_EXP 47
1200: PPUSH
1201: LD_INT 5
1203: PPUSH
1204: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1208: LD_EXP 47
1212: PPUSH
1213: LD_INT 169
1215: PPUSH
1216: CALL_OW 52
// end ; if Kaia then
1220: LD_EXP 43
1224: IFFALSE 1250
// begin SetSide ( Kaia , 5 ) ;
1226: LD_EXP 43
1230: PPUSH
1231: LD_INT 5
1233: PPUSH
1234: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1238: LD_EXP 43
1242: PPUSH
1243: LD_INT 147
1245: PPUSH
1246: CALL_OW 52
// end ; if Sophia then
1250: LD_EXP 44
1254: IFFALSE 1295
// begin SetSide ( Sophia , 5 ) ;
1256: LD_EXP 44
1260: PPUSH
1261: LD_INT 5
1263: PPUSH
1264: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1268: LD_EXP 44
1272: PPUSH
1273: LD_INT 142
1275: PPUSH
1276: LD_INT 96
1278: PPUSH
1279: LD_INT 0
1281: PPUSH
1282: CALL_OW 48
// ComHold ( Sophia ) ;
1286: LD_EXP 44
1290: PPUSH
1291: CALL_OW 140
// end ; if Harris then
1295: LD_EXP 51
1299: IFFALSE 1337
// begin SetSide ( Harris , 4 ) ;
1301: LD_EXP 51
1305: PPUSH
1306: LD_INT 4
1308: PPUSH
1309: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1313: LD_EXP 51
1317: PPUSH
1318: LD_INT 20
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL_OW 49
// ComHold ( i ) ;
1328: LD_VAR 0 2
1332: PPUSH
1333: CALL_OW 140
// end ; if Doug then
1337: LD_EXP 52
1341: IFFALSE 1367
// begin SetSide ( Doug , 4 ) ;
1343: LD_EXP 52
1347: PPUSH
1348: LD_INT 4
1350: PPUSH
1351: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1355: LD_EXP 52
1359: PPUSH
1360: LD_INT 106
1362: PPUSH
1363: CALL_OW 52
// end ; if Aviradze then
1367: LD_EXP 48
1371: IFFALSE 1397
// begin SetSide ( Aviradze , 5 ) ;
1373: LD_EXP 48
1377: PPUSH
1378: LD_INT 5
1380: PPUSH
1381: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1385: LD_EXP 48
1389: PPUSH
1390: LD_INT 119
1392: PPUSH
1393: CALL_OW 52
// end ; if Ibrahim then
1397: LD_EXP 41
1401: IFFALSE 1427
// begin SetSide ( Ibrahim , 5 ) ;
1403: LD_EXP 41
1407: PPUSH
1408: LD_INT 5
1410: PPUSH
1411: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1415: LD_EXP 41
1419: PPUSH
1420: LD_INT 119
1422: PPUSH
1423: CALL_OW 52
// end ; if Jerry then
1427: LD_EXP 53
1431: IFFALSE 1472
// begin SetSide ( Jerry , 4 ) ;
1433: LD_EXP 53
1437: PPUSH
1438: LD_INT 4
1440: PPUSH
1441: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1445: LD_EXP 53
1449: PPUSH
1450: LD_INT 119
1452: PPUSH
1453: LD_INT 59
1455: PPUSH
1456: LD_INT 0
1458: PPUSH
1459: CALL_OW 48
// ComHold ( Jerry ) ;
1463: LD_EXP 53
1467: PPUSH
1468: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1472: LD_EXP 57
1476: PPUSH
1477: LD_INT 119
1479: PPUSH
1480: CALL_OW 52
// for i in americanSquad do
1484: LD_ADDR_VAR 0 2
1488: PUSH
1489: LD_EXP 50
1493: PUSH
1494: FOR_IN
1495: IFFALSE 1523
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1497: LD_VAR 0 2
1501: PPUSH
1502: LD_INT 21
1504: PPUSH
1505: LD_INT 0
1507: PPUSH
1508: CALL_OW 49
// ComHold ( i ) ;
1512: LD_VAR 0 2
1516: PPUSH
1517: CALL_OW 140
// end ;
1521: GO 1494
1523: POP
1524: POP
// for i in heikeSecondSquad do
1525: LD_ADDR_VAR 0 2
1529: PUSH
1530: LD_EXP 49
1534: PUSH
1535: FOR_IN
1536: IFFALSE 1576
// begin SetSide ( i , 5 ) ;
1538: LD_VAR 0 2
1542: PPUSH
1543: LD_INT 5
1545: PPUSH
1546: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1550: LD_VAR 0 2
1554: PPUSH
1555: LD_INT 22
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL_OW 49
// ComHold ( i ) ;
1565: LD_VAR 0 2
1569: PPUSH
1570: CALL_OW 140
// end ;
1574: GO 1535
1576: POP
1577: POP
// if not hasVodka then
1578: LD_EXP 4
1582: NOT
1583: IFFALSE 1642
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1585: LD_ADDR_VAR 0 2
1589: PUSH
1590: LD_INT 2
1592: PUSH
1593: LD_INT 22
1595: PUSH
1596: LD_INT 2
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: LD_INT 22
1605: PUSH
1606: LD_INT 5
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: PUSH
1613: EMPTY
1614: LIST
1615: LIST
1616: LIST
1617: PPUSH
1618: CALL_OW 69
1622: PUSH
1623: FOR_IN
1624: IFFALSE 1640
// SetLives ( i , 500 ) ;
1626: LD_VAR 0 2
1630: PPUSH
1631: LD_INT 500
1633: PPUSH
1634: CALL_OW 234
1638: GO 1623
1640: POP
1641: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1642: LD_ADDR_VAR 0 2
1646: PUSH
1647: LD_INT 22
1649: PUSH
1650: LD_INT 4
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 69
1661: PUSH
1662: FOR_IN
1663: IFFALSE 1679
// SetLives ( i , 500 ) ;
1665: LD_VAR 0 2
1669: PPUSH
1670: LD_INT 500
1672: PPUSH
1673: CALL_OW 234
1677: GO 1662
1679: POP
1680: POP
// end ;
1681: LD_VAR 0 1
1685: RET
// export function SetClassKaiaRevolver ; begin
1686: LD_INT 0
1688: PPUSH
// if IsOk ( Kaia ) then
1689: LD_EXP 43
1693: PPUSH
1694: CALL_OW 302
1698: IFFALSE 1712
// SetClass ( Kaia , class_revolver ) ;
1700: LD_EXP 43
1704: PPUSH
1705: LD_INT 34
1707: PPUSH
1708: CALL_OW 336
// end ;
1712: LD_VAR 0 1
1716: RET
// export function SpawnHeikeAsRussian ; begin
1717: LD_INT 0
1719: PPUSH
// RemoveUnit ( Heike ) ;
1720: LD_EXP 38
1724: PPUSH
1725: CALL_OW 64
// heikeTmp := Heike ;
1729: LD_ADDR_EXP 54
1733: PUSH
1734: LD_EXP 38
1738: ST_TO_ADDR
// uc_side := 2 ;
1739: LD_ADDR_OWVAR 20
1743: PUSH
1744: LD_INT 2
1746: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1747: LD_ADDR_EXP 38
1751: PUSH
1752: LD_STRING HeikeRu
1754: PPUSH
1755: CALL_OW 25
1759: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1760: LD_EXP 54
1764: PPUSH
1765: LD_EXP 38
1769: PPUSH
1770: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1774: LD_EXP 38
1778: PPUSH
1779: LD_INT 165
1781: PPUSH
1782: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1786: LD_EXP 38
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: CALL_OW 336
// heikeAsRussian := true ;
1798: LD_ADDR_EXP 27
1802: PUSH
1803: LD_INT 1
1805: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1806: LD_STRING M1-laundry-out
1808: PPUSH
1809: CALL_OW 604
// end ;
1813: LD_VAR 0 1
1817: RET
// export function SpawnGiviAsRussian ; begin
1818: LD_INT 0
1820: PPUSH
// RemoveUnit ( Givi ) ;
1821: LD_EXP 39
1825: PPUSH
1826: CALL_OW 64
// giviTmp := Givi ;
1830: LD_ADDR_EXP 55
1834: PUSH
1835: LD_EXP 39
1839: ST_TO_ADDR
// uc_side := 2 ;
1840: LD_ADDR_OWVAR 20
1844: PUSH
1845: LD_INT 2
1847: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1848: LD_ADDR_EXP 39
1852: PUSH
1853: LD_STRING GiviRu
1855: PPUSH
1856: CALL_OW 25
1860: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1861: LD_EXP 55
1865: PPUSH
1866: LD_EXP 39
1870: PPUSH
1871: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1875: LD_EXP 39
1879: PPUSH
1880: LD_INT 165
1882: PPUSH
1883: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1887: LD_EXP 39
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL_OW 336
// giviAsRussian := true ;
1899: LD_ADDR_EXP 28
1903: PUSH
1904: LD_INT 1
1906: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1907: LD_STRING M1-laundry-out
1909: PPUSH
1910: CALL_OW 604
// end ; end_of_file
1914: LD_VAR 0 1
1918: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , tmp ; begin
1919: LD_INT 0
1921: PPUSH
1922: PPUSH
1923: PPUSH
1924: PPUSH
// uc_side := 3 ;
1925: LD_ADDR_OWVAR 20
1929: PUSH
1930: LD_INT 3
1932: ST_TO_ADDR
// uc_nation := 3 ;
1933: LD_ADDR_OWVAR 21
1937: PUSH
1938: LD_INT 3
1940: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1941: LD_INT 192
1943: PPUSH
1944: LD_STRING kitchen
1946: PPUSH
1947: CALL_OW 500
// SetBName ( laundry , laundry ) ;
1951: LD_INT 165
1953: PPUSH
1954: LD_STRING laundry
1956: PPUSH
1957: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
1961: LD_INT 54
1963: PPUSH
1964: LD_STRING adminSection
1966: PPUSH
1967: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1971: LD_ADDR_VAR 0 2
1975: PUSH
1976: LD_INT 21
1978: PUSH
1979: LD_INT 3
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PPUSH
1986: CALL_OW 69
1990: PUSH
1991: FOR_IN
1992: IFFALSE 2008
// SetBLevel ( i , 7 ) ;
1994: LD_VAR 0 2
1998: PPUSH
1999: LD_INT 7
2001: PPUSH
2002: CALL_OW 241
2006: GO 1991
2008: POP
2009: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: LD_INT 22
2017: PUSH
2018: LD_INT 3
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: LD_INT 2
2027: PUSH
2028: LD_INT 30
2030: PUSH
2031: LD_INT 0
2033: PUSH
2034: EMPTY
2035: LIST
2036: LIST
2037: PUSH
2038: LD_INT 30
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: PPUSH
2057: CALL_OW 69
2061: PUSH
2062: FOR_IN
2063: IFFALSE 2127
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: CALL_OW 274
2074: PPUSH
2075: LD_INT 1
2077: PPUSH
2078: LD_INT 1000
2080: PPUSH
2081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2085: LD_VAR 0 2
2089: PPUSH
2090: CALL_OW 274
2094: PPUSH
2095: LD_INT 2
2097: PPUSH
2098: LD_INT 1000
2100: PPUSH
2101: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2105: LD_VAR 0 2
2109: PPUSH
2110: CALL_OW 274
2114: PPUSH
2115: LD_INT 3
2117: PPUSH
2118: LD_INT 100
2120: PPUSH
2121: CALL_OW 277
// end ;
2125: GO 2062
2127: POP
2128: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2129: LD_ADDR_VAR 0 2
2133: PUSH
2134: LD_INT 22
2136: PUSH
2137: LD_INT 3
2139: PUSH
2140: EMPTY
2141: LIST
2142: LIST
2143: PUSH
2144: LD_INT 30
2146: PUSH
2147: LD_INT 32
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 69
2162: PUSH
2163: FOR_IN
2164: IFFALSE 2198
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2166: LD_INT 0
2168: PPUSH
2169: LD_INT 5
2171: PUSH
2172: LD_OWVAR 67
2176: PLUS
2177: PPUSH
2178: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2182: CALL_OW 44
2186: PPUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: CALL_OW 52
// end ;
2196: GO 2163
2198: POP
2199: POP
// for i := 1 to 2 do
2200: LD_ADDR_VAR 0 2
2204: PUSH
2205: DOUBLE
2206: LD_INT 1
2208: DEC
2209: ST_TO_ADDR
2210: LD_INT 2
2212: PUSH
2213: FOR_TO
2214: IFFALSE 2266
// begin PrepareMechanic ( false , 8 ) ;
2216: LD_INT 0
2218: PPUSH
2219: LD_INT 8
2221: PPUSH
2222: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2226: LD_ADDR_EXP 59
2230: PUSH
2231: LD_EXP 59
2235: PPUSH
2236: CALL_OW 44
2240: PPUSH
2241: CALL 64181 0 2
2245: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2246: LD_EXP 59
2250: PUSH
2251: LD_EXP 59
2255: ARRAY
2256: PPUSH
2257: LD_INT 61
2259: PPUSH
2260: CALL_OW 52
// end ;
2264: GO 2213
2266: POP
2267: POP
// PrepareMechanic ( sex_male , 8 ) ;
2268: LD_INT 1
2270: PPUSH
2271: LD_INT 8
2273: PPUSH
2274: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2278: LD_ADDR_EXP 60
2282: PUSH
2283: LD_EXP 60
2287: PPUSH
2288: CALL_OW 44
2292: PPUSH
2293: CALL 64181 0 2
2297: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2298: LD_EXP 60
2302: PUSH
2303: LD_EXP 60
2307: ARRAY
2308: PPUSH
2309: LD_INT 196
2311: PPUSH
2312: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2316: LD_INT 1
2318: PPUSH
2319: LD_INT 8
2321: PPUSH
2322: CALL_OW 383
// hc_name := Stiepan Simonov ;
2326: LD_ADDR_OWVAR 26
2330: PUSH
2331: LD_STRING Stiepan Simonov
2333: ST_TO_ADDR
// Stiopa := CreateHuman ;
2334: LD_ADDR_EXP 61
2338: PUSH
2339: CALL_OW 44
2343: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2344: LD_INT 2
2346: PPUSH
2347: LD_INT 8
2349: PPUSH
2350: CALL_OW 383
// hc_name := Laura Dragunov ;
2354: LD_ADDR_OWVAR 26
2358: PUSH
2359: LD_STRING Laura Dragunov
2361: ST_TO_ADDR
// Laura := CreateHuman ;
2362: LD_ADDR_EXP 62
2366: PUSH
2367: CALL_OW 44
2371: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2372: LD_EXP 62
2376: PPUSH
2377: LD_INT 196
2379: PPUSH
2380: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2384: LD_INT 1
2386: PPUSH
2387: LD_INT 8
2389: PPUSH
2390: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2394: LD_ADDR_EXP 59
2398: PUSH
2399: LD_EXP 59
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: CALL_OW 44
2411: PPUSH
2412: CALL_OW 2
2416: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2417: LD_EXP 59
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: LD_INT 61
2428: PPUSH
2429: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2433: LD_INT 1
2435: PPUSH
2436: LD_INT 8
2438: PPUSH
2439: CALL_OW 381
// hc_name := Pavel Muchin ;
2443: LD_ADDR_OWVAR 26
2447: PUSH
2448: LD_STRING Pavel Muchin
2450: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2451: LD_ADDR_OWVAR 29
2455: PUSH
2456: LD_INT 13
2458: PUSH
2459: LD_INT 13
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2466: LD_ADDR_EXP 58
2470: PUSH
2471: CALL_OW 44
2475: ST_TO_ADDR
// InitHC_All ( ) ;
2476: CALL_OW 584
// uc_side := 6 ;
2480: LD_ADDR_OWVAR 20
2484: PUSH
2485: LD_INT 6
2487: ST_TO_ADDR
// uc_nation := 3 ;
2488: LD_ADDR_OWVAR 21
2492: PUSH
2493: LD_INT 3
2495: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2496: LD_ADDR_VAR 0 4
2500: PUSH
2501: LD_INT 14
2503: PUSH
2504: LD_INT 15
2506: PUSH
2507: LD_INT 48
2509: PUSH
2510: LD_INT 24
2512: PUSH
2513: LD_INT 149
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: LIST
2522: ST_TO_ADDR
// for i in tmp do
2523: LD_ADDR_VAR 0 2
2527: PUSH
2528: LD_VAR 0 4
2532: PUSH
2533: FOR_IN
2534: IFFALSE 2582
// begin for j := 1 to 2 do
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: DOUBLE
2542: LD_INT 1
2544: DEC
2545: ST_TO_ADDR
2546: LD_INT 2
2548: PUSH
2549: FOR_TO
2550: IFFALSE 2578
// begin PrepareSoldier ( false , 7 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 7
2557: PPUSH
2558: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2562: CALL_OW 44
2566: PPUSH
2567: LD_VAR 0 2
2571: PPUSH
2572: CALL_OW 52
// end ;
2576: GO 2549
2578: POP
2579: POP
// end ;
2580: GO 2533
2582: POP
2583: POP
// end ;
2584: LD_VAR 0 1
2588: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2589: LD_INT 0
2591: PPUSH
2592: PPUSH
2593: PPUSH
2594: PPUSH
// uc_side := 3 ;
2595: LD_ADDR_OWVAR 20
2599: PUSH
2600: LD_INT 3
2602: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2603: LD_ADDR_OWVAR 21
2607: PUSH
2608: LD_INT 1
2610: PPUSH
2611: LD_INT 3
2613: PPUSH
2614: CALL_OW 12
2618: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2619: LD_ADDR_VAR 0 4
2623: PUSH
2624: LD_INT 5
2626: PPUSH
2627: LD_INT 0
2629: PPUSH
2630: CALL_OW 517
2634: ST_TO_ADDR
// for i := 1 to 3 do
2635: LD_ADDR_VAR 0 2
2639: PUSH
2640: DOUBLE
2641: LD_INT 1
2643: DEC
2644: ST_TO_ADDR
2645: LD_INT 3
2647: PUSH
2648: FOR_TO
2649: IFFALSE 2718
// begin PrepareHuman ( false , 33 , 0 ) ;
2651: LD_INT 0
2653: PPUSH
2654: LD_INT 33
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 380
// un := CreateHuman ;
2664: LD_ADDR_VAR 0 3
2668: PUSH
2669: CALL_OW 44
2673: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2674: LD_VAR 0 3
2678: PPUSH
2679: LD_VAR 0 4
2683: PUSH
2684: LD_INT 1
2686: ARRAY
2687: PUSH
2688: LD_VAR 0 2
2692: ARRAY
2693: PPUSH
2694: LD_VAR 0 4
2698: PUSH
2699: LD_INT 2
2701: ARRAY
2702: PUSH
2703: LD_VAR 0 2
2707: ARRAY
2708: PPUSH
2709: LD_INT 1
2711: PPUSH
2712: CALL_OW 601
// end ;
2716: GO 2648
2718: POP
2719: POP
// end ;
2720: LD_VAR 0 1
2724: RET
// export function PrepareFirstScene ; var i , un ; begin
2725: LD_INT 0
2727: PPUSH
2728: PPUSH
2729: PPUSH
// uc_side := 4 ;
2730: LD_ADDR_OWVAR 20
2734: PUSH
2735: LD_INT 4
2737: ST_TO_ADDR
// uc_nation := 1 ;
2738: LD_ADDR_OWVAR 21
2742: PUSH
2743: LD_INT 1
2745: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2746: LD_INT 0
2748: PPUSH
2749: LD_INT 33
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL_OW 380
// for i := 1 to 2 do
2759: LD_ADDR_VAR 0 2
2763: PUSH
2764: DOUBLE
2765: LD_INT 1
2767: DEC
2768: ST_TO_ADDR
2769: LD_INT 2
2771: PUSH
2772: FOR_TO
2773: IFFALSE 2838
// begin un := CreateHuman ;
2775: LD_ADDR_VAR 0 3
2779: PUSH
2780: CALL_OW 44
2784: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2785: LD_VAR 0 3
2789: PPUSH
2790: LD_INT 1
2792: PPUSH
2793: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2797: LD_VAR 0 3
2801: PPUSH
2802: LD_INT 6
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2812: LD_VAR 0 3
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: CALL 67333 0 2
// SetLives ( un , 300 ) ;
2824: LD_VAR 0 3
2828: PPUSH
2829: LD_INT 300
2831: PPUSH
2832: CALL_OW 234
// end ;
2836: GO 2772
2838: POP
2839: POP
// uc_side := 3 ;
2840: LD_ADDR_OWVAR 20
2844: PUSH
2845: LD_INT 3
2847: ST_TO_ADDR
// uc_nation := 3 ;
2848: LD_ADDR_OWVAR 21
2852: PUSH
2853: LD_INT 3
2855: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2856: LD_INT 1
2858: PPUSH
2859: LD_INT 5
2861: PPUSH
2862: CALL_OW 381
// for i := 1 to 3 do
2866: LD_ADDR_VAR 0 2
2870: PUSH
2871: DOUBLE
2872: LD_INT 1
2874: DEC
2875: ST_TO_ADDR
2876: LD_INT 3
2878: PUSH
2879: FOR_TO
2880: IFFALSE 2953
// begin un := CreateHuman ;
2882: LD_ADDR_VAR 0 3
2886: PUSH
2887: CALL_OW 44
2891: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2892: LD_ADDR_EXP 56
2896: PUSH
2897: LD_EXP 56
2901: PPUSH
2902: LD_VAR 0 3
2906: PPUSH
2907: CALL 64181 0 2
2911: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2912: LD_VAR 0 3
2916: PPUSH
2917: LD_INT 4
2919: PPUSH
2920: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_INT 7
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 4
2946: PPUSH
2947: CALL 67333 0 2
// end ;
2951: GO 2879
2953: POP
2954: POP
// ruCommisar := CreateHuman ;
2955: LD_ADDR_EXP 57
2959: PUSH
2960: CALL_OW 44
2964: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2965: LD_EXP 57
2969: PPUSH
2970: LD_INT 124
2972: PPUSH
2973: LD_INT 37
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2983: LD_EXP 57
2987: PPUSH
2988: LD_INT 3
2990: PPUSH
2991: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2995: LD_EXP 57
2999: PPUSH
3000: LD_INT 3
3002: PPUSH
3003: CALL 67333 0 2
// end ;
3007: LD_VAR 0 1
3011: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3012: LD_INT 0
3014: PPUSH
3015: PPUSH
3016: PPUSH
3017: PPUSH
// uc_side := 6 ;
3018: LD_ADDR_OWVAR 20
3022: PUSH
3023: LD_INT 6
3025: ST_TO_ADDR
// uc_nation := 3 ;
3026: LD_ADDR_OWVAR 21
3030: PUSH
3031: LD_INT 3
3033: ST_TO_ADDR
// ruPatrol := [ ] ;
3034: LD_ADDR_EXP 63
3038: PUSH
3039: EMPTY
3040: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3041: LD_ADDR_VAR 0 4
3045: PUSH
3046: LD_INT 26
3048: PUSH
3049: LD_INT 30
3051: PUSH
3052: LD_INT 39
3054: PUSH
3055: LD_INT 43
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: ST_TO_ADDR
// for i := 1 to spawn do
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_VAR 0 4
3078: PUSH
3079: FOR_TO
3080: IFFALSE 3191
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3082: LD_INT 0
3084: PPUSH
3085: LD_INT 4
3087: PUSH
3088: LD_INT 5
3090: PUSH
3091: LD_INT 6
3093: PUSH
3094: LD_INT 7
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: PUSH
3103: LD_OWVAR 67
3107: ARRAY
3108: PPUSH
3109: CALL_OW 381
// un := CreateHuman ;
3113: LD_ADDR_VAR 0 3
3117: PUSH
3118: CALL_OW 44
3122: ST_TO_ADDR
// SetTag ( un , i ) ;
3123: LD_VAR 0 3
3127: PPUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3137: LD_ADDR_EXP 63
3141: PUSH
3142: LD_EXP 63
3146: PPUSH
3147: LD_VAR 0 3
3151: PPUSH
3152: CALL 64181 0 2
3156: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3157: LD_VAR 0 3
3161: PPUSH
3162: LD_VAR 0 4
3166: PUSH
3167: LD_VAR 0 2
3171: ARRAY
3172: PPUSH
3173: LD_INT 0
3175: PPUSH
3176: CALL_OW 49
// ComHold ( un ) ;
3180: LD_VAR 0 3
3184: PPUSH
3185: CALL_OW 140
// end ;
3189: GO 3079
3191: POP
3192: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3193: LD_ADDR_VAR 0 4
3197: PUSH
3198: LD_INT 48
3200: PUSH
3201: LD_INT 49
3203: PUSH
3204: LD_INT 50
3206: PUSH
3207: LD_INT 51
3209: PUSH
3210: LD_INT 52
3212: PUSH
3213: LD_INT 53
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: LIST
3220: LIST
3221: LIST
3222: LIST
3223: ST_TO_ADDR
// for i := 1 to spawn do
3224: LD_ADDR_VAR 0 2
3228: PUSH
3229: DOUBLE
3230: LD_INT 1
3232: DEC
3233: ST_TO_ADDR
3234: LD_VAR 0 4
3238: PUSH
3239: FOR_TO
3240: IFFALSE 3349
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3242: LD_INT 0
3244: PPUSH
3245: LD_INT 4
3247: PUSH
3248: LD_INT 5
3250: PUSH
3251: LD_INT 6
3253: PUSH
3254: LD_INT 7
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: PPUSH
3269: CALL_OW 381
// un := CreateHuman ;
3273: LD_ADDR_VAR 0 3
3277: PUSH
3278: CALL_OW 44
3282: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3283: LD_VAR 0 3
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3295: LD_ADDR_EXP 63
3299: PUSH
3300: LD_EXP 63
3304: PPUSH
3305: LD_VAR 0 3
3309: PPUSH
3310: CALL 64181 0 2
3314: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_VAR 0 4
3324: PUSH
3325: LD_VAR 0 2
3329: ARRAY
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 49
// ComHold ( un ) ;
3338: LD_VAR 0 3
3342: PPUSH
3343: CALL_OW 140
// end ;
3347: GO 3239
3349: POP
3350: POP
// end ;
3351: LD_VAR 0 1
3355: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3356: LD_INT 0
3358: PPUSH
3359: PPUSH
3360: PPUSH
3361: PPUSH
// uc_side := 6 ;
3362: LD_ADDR_OWVAR 20
3366: PUSH
3367: LD_INT 6
3369: ST_TO_ADDR
// uc_nation := nation_russian ;
3370: LD_ADDR_OWVAR 21
3374: PUSH
3375: LD_INT 3
3377: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3378: LD_ADDR_VAR 0 4
3382: PUSH
3383: LD_INT 54
3385: PUSH
3386: LD_INT 55
3388: PUSH
3389: LD_INT 56
3391: PUSH
3392: LD_INT 57
3394: PUSH
3395: EMPTY
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: ST_TO_ADDR
// for i := 1 to spawn do
3401: LD_ADDR_VAR 0 2
3405: PUSH
3406: DOUBLE
3407: LD_INT 1
3409: DEC
3410: ST_TO_ADDR
3411: LD_VAR 0 4
3415: PUSH
3416: FOR_TO
3417: IFFALSE 3526
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3419: LD_INT 0
3421: PPUSH
3422: LD_INT 4
3424: PUSH
3425: LD_INT 5
3427: PUSH
3428: LD_INT 6
3430: PUSH
3431: LD_INT 7
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_OWVAR 67
3444: ARRAY
3445: PPUSH
3446: CALL_OW 381
// un := CreateHuman ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: CALL_OW 44
3459: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_INT 0
3467: PPUSH
3468: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3472: LD_ADDR_EXP 63
3476: PUSH
3477: LD_EXP 63
3481: PPUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: CALL 64181 0 2
3491: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3492: LD_VAR 0 3
3496: PPUSH
3497: LD_VAR 0 4
3501: PUSH
3502: LD_VAR 0 2
3506: ARRAY
3507: PPUSH
3508: LD_INT 0
3510: PPUSH
3511: CALL_OW 49
// ComHold ( un ) ;
3515: LD_VAR 0 3
3519: PPUSH
3520: CALL_OW 140
// end ;
3524: GO 3416
3526: POP
3527: POP
// end ; end_of_file
3528: LD_VAR 0 1
3532: RET
// export function Action ; var speaker , i , tmp ; begin
3533: LD_INT 0
3535: PPUSH
3536: PPUSH
3537: PPUSH
3538: PPUSH
// Video ( true ) ;
3539: LD_INT 1
3541: PPUSH
3542: CALL 64153 0 1
// hasNormalScene := Kaia or Givi ;
3546: LD_ADDR_EXP 5
3550: PUSH
3551: LD_EXP 43
3555: PUSH
3556: LD_EXP 39
3560: OR
3561: ST_TO_ADDR
// if hasNormalScene then
3562: LD_EXP 5
3566: IFFALSE 3807
// begin for i in americanSquad do
3568: LD_ADDR_VAR 0 3
3572: PUSH
3573: LD_EXP 50
3577: PUSH
3578: FOR_IN
3579: IFFALSE 3625
// begin SetClass ( i , class_prison ) ;
3581: LD_VAR 0 3
3585: PPUSH
3586: LD_INT 33
3588: PPUSH
3589: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3593: LD_VAR 0 3
3597: PPUSH
3598: LD_INT 78
3600: PPUSH
3601: LD_INT 16
3603: PPUSH
3604: LD_INT 5
3606: PPUSH
3607: LD_INT 0
3609: PPUSH
3610: CALL_OW 50
// ComHold ( i ) ;
3614: LD_VAR 0 3
3618: PPUSH
3619: CALL_OW 140
// end ;
3623: GO 3578
3625: POP
3626: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3627: LD_ADDR_VAR 0 4
3631: PUSH
3632: LD_EXP 40
3636: PUSH
3637: LD_EXP 41
3641: PUSH
3642: LD_EXP 42
3646: PUSH
3647: LD_EXP 43
3651: PUSH
3652: LD_EXP 44
3656: PUSH
3657: LD_EXP 45
3661: PUSH
3662: LD_EXP 46
3666: PUSH
3667: LD_EXP 47
3671: PUSH
3672: LD_EXP 39
3676: PUSH
3677: LD_EXP 48
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: LIST
3686: LIST
3687: LIST
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: LIST
3693: PUSH
3694: LD_EXP 49
3698: UNION
3699: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3700: LD_EXP 38
3704: PPUSH
3705: LD_INT 33
3707: PPUSH
3708: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3712: LD_EXP 38
3716: PPUSH
3717: LD_INT 117
3719: PPUSH
3720: LD_INT 24
3722: PPUSH
3723: LD_INT 3
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL 66321 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3733: LD_EXP 38
3737: PPUSH
3738: LD_INT 123
3740: PPUSH
3741: LD_INT 39
3743: PPUSH
3744: CALL_OW 118
// for i in tmp do
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: LD_VAR 0 4
3757: PUSH
3758: FOR_IN
3759: IFFALSE 3805
// begin SetClass ( i , class_prison ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_INT 33
3768: PPUSH
3769: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3773: LD_VAR 0 3
3777: PPUSH
3778: LD_INT 3
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3788: LD_VAR 0 3
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 16
3798: PPUSH
3799: CALL_OW 118
// end ;
3803: GO 3758
3805: POP
3806: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3807: LD_INT 124
3809: PPUSH
3810: LD_INT 39
3812: PPUSH
3813: CALL_OW 86
// PrepareDeadBodies ;
3817: CALL 2589 0 0
// PrepareFirstScene ;
3821: CALL 2725 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3825: LD_INT 152
3827: PPUSH
3828: LD_INT 65
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 70
3836: NEG
3837: PPUSH
3838: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3842: LD_INT 152
3844: PPUSH
3845: LD_INT 65
3847: PPUSH
3848: LD_INT 2
3850: PPUSH
3851: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3855: LD_INT 122
3857: PPUSH
3858: LD_INT 40
3860: PPUSH
3861: LD_INT 2
3863: PPUSH
3864: LD_INT 8
3866: NEG
3867: PPUSH
3868: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
3872: LD_INT 124
3874: PPUSH
3875: LD_INT 37
3877: PPUSH
3878: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
3882: LD_EXP 57
3886: PPUSH
3887: LD_STRING DRum-Execution-1
3889: PPUSH
3890: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
3894: LD_EXP 57
3898: PPUSH
3899: LD_STRING DRum-Execution-2
3901: PPUSH
3902: CALL_OW 88
// wait ( 0 0$01 ) ;
3906: LD_INT 35
3908: PPUSH
3909: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
3913: LD_EXP 57
3917: PPUSH
3918: LD_STRING DRum-Execution-3
3920: PPUSH
3921: CALL_OW 88
// wait ( 0 0$1 ) ;
3925: LD_INT 35
3927: PPUSH
3928: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
3932: LD_EXP 57
3936: PPUSH
3937: LD_STRING DRum-Execution-4
3939: PPUSH
3940: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
3944: LD_EXP 56
3948: PUSH
3949: LD_INT 1
3951: ARRAY
3952: PPUSH
3953: LD_INT 122
3955: PPUSH
3956: LD_INT 39
3958: PPUSH
3959: CALL_OW 428
3963: PPUSH
3964: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
3968: LD_EXP 56
3972: PUSH
3973: LD_INT 2
3975: ARRAY
3976: PPUSH
3977: LD_INT 123
3979: PPUSH
3980: LD_INT 41
3982: PPUSH
3983: CALL_OW 428
3987: PPUSH
3988: CALL_OW 115
// AddComHold ( russianKillers ) ;
3992: LD_EXP 56
3996: PPUSH
3997: CALL_OW 200
// wait ( 0 0$1 ) ;
4001: LD_INT 35
4003: PPUSH
4004: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4008: LD_INT 122
4010: PPUSH
4011: LD_INT 40
4013: PPUSH
4014: LD_INT 2
4016: PPUSH
4017: CALL_OW 331
// for i in russianKillers union ruCommisar do
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_EXP 56
4030: PUSH
4031: LD_EXP 57
4035: UNION
4036: PUSH
4037: FOR_IN
4038: IFFALSE 4051
// RemoveUnit ( i ) ;
4040: LD_VAR 0 3
4044: PPUSH
4045: CALL_OW 64
4049: GO 4037
4051: POP
4052: POP
// if hasNormalScene then
4053: LD_EXP 5
4057: IFFALSE 4065
// ActionNormal else
4059: CALL 4074 0 0
4063: GO 4069
// ActionAdditional ;
4065: CALL 5899 0 0
// end ;
4069: LD_VAR 0 1
4073: RET
// function ActionNormal ; var i , tmp ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// CenterNowOnUnits ( Heike ) ;
4079: LD_EXP 38
4083: PPUSH
4084: CALL_OW 87
// wait ( 0 0$1 ) ;
4088: LD_INT 35
4090: PPUSH
4091: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4095: LD_EXP 38
4099: PPUSH
4100: LD_INT 115
4102: PPUSH
4103: LD_INT 19
4105: PPUSH
4106: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4110: LD_EXP 38
4114: PPUSH
4115: LD_INT 113
4117: PPUSH
4118: LD_INT 16
4120: PPUSH
4121: CALL_OW 178
// wait ( 0 0$2 ) ;
4125: LD_INT 70
4127: PPUSH
4128: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4132: LD_EXP 38
4136: PPUSH
4137: LD_STRING DH-Conspiracy-1
4139: PPUSH
4140: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4144: LD_EXP 43
4148: PPUSH
4149: LD_STRING DK-Conspiracy-2
4151: PPUSH
4152: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4156: LD_EXP 39
4160: PPUSH
4161: LD_STRING DG-Conspiracy-3
4163: PPUSH
4164: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4168: LD_EXP 39
4172: PPUSH
4173: LD_STRING DG-Conspiracy-4
4175: PPUSH
4176: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4180: LD_EXP 38
4184: PPUSH
4185: LD_STRING DH-Conspiracy-5
4187: PPUSH
4188: CALL_OW 88
// if IsOk ( Kamil ) then
4192: LD_EXP 42
4196: PPUSH
4197: CALL_OW 302
4201: IFFALSE 4259
// begin hasVodka := true ;
4203: LD_ADDR_EXP 4
4207: PUSH
4208: LD_INT 1
4210: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4211: LD_EXP 42
4215: PPUSH
4216: LD_STRING DKam-Conspiracy-6
4218: PPUSH
4219: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4223: LD_EXP 42
4227: PPUSH
4228: LD_STRING DKam-Conspiracy-7
4230: PPUSH
4231: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4235: LD_EXP 42
4239: PPUSH
4240: LD_STRING DKam-Conspiracy-8
4242: PPUSH
4243: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4247: LD_EXP 42
4251: PPUSH
4252: LD_STRING DKam-Conspiracy-9
4254: PPUSH
4255: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4259: LD_EXP 44
4263: PPUSH
4264: CALL_OW 302
4268: IFFALSE 4449
// begin americanContact := true ;
4270: LD_ADDR_EXP 10
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4278: LD_STRING M1-american
4280: PPUSH
4281: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4285: LD_EXP 44
4289: PPUSH
4290: LD_STRING DS-Conspiracy-10
4292: PPUSH
4293: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4297: LD_EXP 45
4301: PPUSH
4302: LD_STRING DM-Conspiracy-11
4304: PPUSH
4305: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4309: LD_EXP 44
4313: PPUSH
4314: LD_STRING DS-Conspiracy-12
4316: PPUSH
4317: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4321: LD_INT 84
4323: PPUSH
4324: LD_INT 19
4326: PPUSH
4327: LD_INT 105
4329: PPUSH
4330: CALL 18440 0 3
// if johnnySaved then
4334: LD_EXP 3
4338: IFFALSE 4378
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4340: LD_EXP 44
4344: PPUSH
4345: LD_STRING DS-Conspiracy-13
4347: PPUSH
4348: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4352: LD_EXP 38
4356: PPUSH
4357: LD_STRING DH-Conspiracy-14
4359: PPUSH
4360: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4364: LD_EXP 44
4368: PPUSH
4369: LD_STRING DH-Conspiracy-15
4371: PPUSH
4372: CALL_OW 88
// end else
4376: GO 4414
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4378: LD_EXP 44
4382: PPUSH
4383: LD_STRING DS-Conspiracy-a-13
4385: PPUSH
4386: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4390: LD_EXP 38
4394: PPUSH
4395: LD_STRING DH-Conspiracy-a-14
4397: PPUSH
4398: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4402: LD_EXP 44
4406: PPUSH
4407: LD_STRING DH-Conspiracy-a-15
4409: PPUSH
4410: CALL_OW 88
// end ; if IsOk ( Givi ) then
4414: LD_EXP 39
4418: PPUSH
4419: CALL_OW 302
4423: IFFALSE 4449
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4425: LD_EXP 39
4429: PPUSH
4430: LD_STRING DG-Conspiracy-a-16
4432: PPUSH
4433: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4437: LD_EXP 38
4441: PPUSH
4442: LD_STRING DH-Conspiracy-a-17
4444: PPUSH
4445: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4449: LD_EXP 38
4453: PPUSH
4454: LD_STRING DH-Conspiracy-16
4456: PPUSH
4457: CALL_OW 88
// if IsOk ( Givi ) then
4461: LD_EXP 39
4465: PPUSH
4466: CALL_OW 302
4470: IFFALSE 4742
// begin hasStimDrugs := true ;
4472: LD_ADDR_EXP 9
4476: PUSH
4477: LD_INT 1
4479: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4480: LD_STRING M1-drugs
4482: PPUSH
4483: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4487: LD_EXP 39
4491: PPUSH
4492: LD_STRING DG-Conspiracy-17
4494: PPUSH
4495: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4499: LD_INT 162
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4509: LD_INT 194
4511: PPUSH
4512: LD_INT 98
4514: PPUSH
4515: LD_INT 105
4517: PPUSH
4518: CALL 18440 0 3
// SetSide ( drugsLab , 3 ) ;
4522: LD_INT 162
4524: PPUSH
4525: LD_INT 3
4527: PPUSH
4528: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4532: LD_EXP 39
4536: PPUSH
4537: LD_STRING DG-Conspiracy-18
4539: PPUSH
4540: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4544: LD_EXP 39
4548: PPUSH
4549: LD_STRING DG-Conspiracy-19
4551: PPUSH
4552: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4556: LD_EXP 39
4560: PPUSH
4561: LD_STRING DG-Conspiracy-20
4563: PPUSH
4564: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4568: LD_EXP 38
4572: PPUSH
4573: LD_STRING DH-Conspiracy-21
4575: PPUSH
4576: CALL_OW 88
// if IsOk ( Kaia ) then
4580: LD_EXP 43
4584: PPUSH
4585: CALL_OW 302
4589: IFFALSE 4663
// begin hasExplosions := true ;
4591: LD_ADDR_EXP 6
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4599: LD_STRING M1-explosive
4601: PPUSH
4602: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4606: LD_EXP 43
4610: PPUSH
4611: LD_STRING DK-Conspiracy-22
4613: PPUSH
4614: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4618: LD_INT 73
4620: PPUSH
4621: LD_INT 2
4623: PPUSH
4624: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4628: LD_INT 170
4630: PPUSH
4631: LD_INT 104
4633: PPUSH
4634: LD_INT 105
4636: PPUSH
4637: CALL 18440 0 3
// SetSide ( barExplosion , 3 ) ;
4641: LD_INT 73
4643: PPUSH
4644: LD_INT 3
4646: PPUSH
4647: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4651: LD_EXP 43
4655: PPUSH
4656: LD_STRING DK-Conspiracy-23
4658: PPUSH
4659: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4663: LD_EXP 46
4667: PPUSH
4668: CALL_OW 302
4672: IFFALSE 4742
// begin hasExplosionsInFactory := true ;
4674: LD_ADDR_EXP 7
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4682: LD_EXP 46
4686: PPUSH
4687: LD_STRING DO-Conspiracy-24
4689: PPUSH
4690: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4694: LD_INT 175
4696: PPUSH
4697: LD_INT 54
4699: PPUSH
4700: LD_INT 70
4702: PPUSH
4703: CALL 18440 0 3
// if IsOk ( Markov ) then
4707: LD_EXP 45
4711: PPUSH
4712: CALL_OW 302
4716: IFFALSE 4742
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4718: LD_EXP 45
4722: PPUSH
4723: LD_STRING DMar-Conspiracy-25
4725: PPUSH
4726: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4730: LD_EXP 45
4734: PPUSH
4735: LD_STRING DMar-Conspiracy-26
4737: PPUSH
4738: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4742: LD_EXP 47
4746: PPUSH
4747: CALL_OW 302
4751: PUSH
4752: LD_EXP 43
4756: PPUSH
4757: CALL_OW 302
4761: AND
4762: IFFALSE 5222
// begin hasWeapons := true ;
4764: LD_ADDR_EXP 19
4768: PUSH
4769: LD_INT 1
4771: ST_TO_ADDR
// hasRevolver := true ;
4772: LD_ADDR_EXP 8
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4780: LD_STRING M1-weapons
4782: PPUSH
4783: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4787: LD_EXP 47
4791: PPUSH
4792: LD_STRING DKs-Conspiracy-27
4794: PPUSH
4795: CALL_OW 88
// if IsOk ( Givi ) then
4799: LD_EXP 39
4803: PPUSH
4804: CALL_OW 302
4808: IFFALSE 4824
// Say ( Givi , DG-Conspiracy-28 ) else
4810: LD_EXP 39
4814: PPUSH
4815: LD_STRING DG-Conspiracy-28
4817: PPUSH
4818: CALL_OW 88
4822: GO 4889
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4824: LD_EXP 49
4828: PPUSH
4829: LD_INT 26
4831: PUSH
4832: LD_INT 1
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: PPUSH
4839: CALL_OW 72
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: LD_STRING DArm-Conspiracy-a-28
4850: PPUSH
4851: CALL_OW 88
4855: NOT
4856: IFFALSE 4889
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
4858: LD_EXP 49
4862: PPUSH
4863: LD_INT 26
4865: PUSH
4866: LD_INT 2
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 72
4877: PUSH
4878: LD_INT 1
4880: ARRAY
4881: PPUSH
4882: LD_STRING DArf-Conspiracy-a-28
4884: PPUSH
4885: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
4889: LD_EXP 47
4893: PPUSH
4894: LD_STRING DKs-Conspiracy-29
4896: PPUSH
4897: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
4901: LD_INT 192
4903: PPUSH
4904: LD_INT 122
4906: PPUSH
4907: LD_INT 105
4909: PPUSH
4910: CALL 18440 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
4914: LD_EXP 47
4918: PPUSH
4919: LD_STRING DKs-Conspiracy-30
4921: PPUSH
4922: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
4926: LD_EXP 43
4930: PPUSH
4931: LD_STRING DK-Conspiracy-31
4933: PPUSH
4934: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
4938: LD_EXP 45
4942: PPUSH
4943: LD_STRING DMar-Conspiracy-33
4945: PPUSH
4946: CALL_OW 88
4950: NOT
4951: PUSH
4952: LD_EXP 49
4956: AND
4957: IFFALSE 5024
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
4959: LD_EXP 49
4963: PPUSH
4964: LD_INT 26
4966: PUSH
4967: LD_INT 1
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 72
4978: PUSH
4979: LD_INT 1
4981: ARRAY
4982: PPUSH
4983: LD_STRING DArm-Conspiracy-a-34
4985: PPUSH
4986: CALL_OW 88
4990: NOT
4991: IFFALSE 5024
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
4993: LD_EXP 49
4997: PPUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 2
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PPUSH
5008: CALL_OW 72
5012: PUSH
5013: LD_INT 1
5015: ARRAY
5016: PPUSH
5017: LD_STRING DArf-Conspiracy-a-34
5019: PPUSH
5020: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5024: LD_EXP 43
5028: PPUSH
5029: LD_STRING DK-Conspiracy-34
5031: PPUSH
5032: CALL_OW 88
// if IsOk ( Markov ) then
5036: LD_EXP 45
5040: PPUSH
5041: CALL_OW 302
5045: IFFALSE 5130
// begin hasSniperRifle := true ;
5047: LD_ADDR_EXP 11
5051: PUSH
5052: LD_INT 1
5054: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5055: LD_EXP 45
5059: PPUSH
5060: LD_STRING DMar-Conspiracy-35
5062: PPUSH
5063: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5067: LD_EXP 43
5071: PPUSH
5072: LD_STRING DK-Conspiracy-36
5074: PPUSH
5075: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5079: LD_EXP 45
5083: PPUSH
5084: LD_STRING DMar-Conspiracy-37
5086: PPUSH
5087: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5091: LD_EXP 45
5095: PPUSH
5096: LD_STRING DMar-Conspiracy-38
5098: PPUSH
5099: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5103: LD_INT 137
5105: PPUSH
5106: LD_INT 98
5108: PPUSH
5109: LD_INT 105
5111: PPUSH
5112: CALL 18440 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5116: LD_EXP 45
5120: PPUSH
5121: LD_STRING DMar-Conspiracy-39
5123: PPUSH
5124: CALL_OW 88
// end else
5128: GO 5222
// if heikeSecondSquad then
5130: LD_EXP 49
5134: IFFALSE 5222
// begin hasSniperRifle := true ;
5136: LD_ADDR_EXP 11
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5144: LD_INT 137
5146: PPUSH
5147: LD_INT 98
5149: PPUSH
5150: LD_INT 105
5152: PPUSH
5153: CALL 18440 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5157: LD_EXP 49
5161: PPUSH
5162: LD_INT 26
5164: PUSH
5165: LD_INT 1
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 72
5176: PUSH
5177: LD_INT 1
5179: ARRAY
5180: PPUSH
5181: LD_STRING DArm-Conspiracy-a-35
5183: PPUSH
5184: CALL_OW 88
5188: NOT
5189: IFFALSE 5222
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5191: LD_EXP 49
5195: PPUSH
5196: LD_INT 26
5198: PUSH
5199: LD_INT 2
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PPUSH
5206: CALL_OW 72
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_STRING DArf-Conspiracy-a-35
5217: PPUSH
5218: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5222: LD_EXP 38
5226: PPUSH
5227: LD_STRING DH-Conspiracy-40
5229: PPUSH
5230: CALL_OW 88
// if IsOk ( Mike ) then
5234: LD_EXP 40
5238: PPUSH
5239: CALL_OW 302
5243: IFFALSE 5302
// begin hasScout := true ;
5245: LD_ADDR_EXP 12
5249: PUSH
5250: LD_INT 1
5252: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5253: LD_EXP 40
5257: PPUSH
5258: LD_STRING DM-Conspiracy-41
5260: PPUSH
5261: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5265: LD_EXP 40
5269: PPUSH
5270: LD_STRING DM-Conspiracy-42
5272: PPUSH
5273: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5277: LD_INT 73
5279: PPUSH
5280: LD_INT 102
5282: PPUSH
5283: LD_INT 105
5285: PPUSH
5286: CALL 18440 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5290: LD_EXP 40
5294: PPUSH
5295: LD_STRING DM-Conspiracy-43
5297: PPUSH
5298: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5302: LD_EXP 4
5306: PUSH
5307: LD_EXP 43
5311: PPUSH
5312: CALL_OW 302
5316: AND
5317: PUSH
5318: LD_EXP 47
5322: PPUSH
5323: CALL_OW 302
5327: AND
5328: IFFALSE 5374
// begin hasMethanol := true ;
5330: LD_ADDR_EXP 13
5334: PUSH
5335: LD_INT 1
5337: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5338: LD_EXP 43
5342: PPUSH
5343: LD_STRING DK-Conspiracy-44
5345: PPUSH
5346: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5350: LD_EXP 43
5354: PPUSH
5355: LD_STRING DK-Conspiracy-45
5357: PPUSH
5358: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5362: LD_EXP 42
5366: PPUSH
5367: LD_STRING DKam-Conspiracy-46
5369: PPUSH
5370: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5374: LD_EXP 38
5378: PPUSH
5379: LD_STRING DH-Conspiracy-47
5381: PPUSH
5382: CALL_OW 88
// wait ( 0 0$1 ) ;
5386: LD_INT 35
5388: PPUSH
5389: CALL_OW 67
// your_side := 8 ;
5393: LD_ADDR_OWVAR 2
5397: PUSH
5398: LD_INT 8
5400: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5401: LD_INT 1
5403: PPUSH
5404: LD_INT 1
5406: PPUSH
5407: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_INT 2
5418: PUSH
5419: LD_INT 22
5421: PUSH
5422: LD_INT 2
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 22
5431: PUSH
5432: LD_INT 4
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 1
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: FOR_IN
5464: IFFALSE 5477
// RemoveUnit ( i ) ;
5466: LD_VAR 0 2
5470: PPUSH
5471: CALL_OW 64
5475: GO 5463
5477: POP
5478: POP
// wait ( 0 0$0.3 ) ;
5479: LD_INT 10
5481: PPUSH
5482: CALL_OW 67
// Query ( StartInfo1 ) ;
5486: LD_STRING StartInfo1
5488: PPUSH
5489: CALL_OW 97
// wait ( 0 0$1 ) ;
5493: LD_INT 35
5495: PPUSH
5496: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5500: LD_STRING colors_night.txt
5502: PPUSH
5503: CALL_OW 544
// Query ( StartInfo2 ) ;
5507: LD_STRING StartInfo2
5509: PPUSH
5510: CALL_OW 97
// PrepareGame ;
5514: CALL 973 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5518: LD_INT 152
5520: PPUSH
5521: LD_INT 65
5523: PPUSH
5524: LD_INT 2
5526: PPUSH
5527: LD_INT 70
5529: NEG
5530: PPUSH
5531: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5535: LD_INT 152
5537: PPUSH
5538: LD_INT 65
5540: PPUSH
5541: LD_INT 2
5543: PPUSH
5544: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5548: LD_INT 133
5550: PPUSH
5551: LD_INT 76
5553: PPUSH
5554: LD_INT 2
5556: PPUSH
5557: LD_INT 6
5559: NEG
5560: PPUSH
5561: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5565: LD_INT 152
5567: PPUSH
5568: LD_INT 65
5570: PPUSH
5571: LD_INT 8
5573: PPUSH
5574: LD_INT 70
5576: NEG
5577: PPUSH
5578: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5582: LD_INT 152
5584: PPUSH
5585: LD_INT 65
5587: PPUSH
5588: LD_INT 8
5590: PPUSH
5591: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5595: LD_INT 133
5597: PPUSH
5598: LD_INT 76
5600: PPUSH
5601: LD_INT 8
5603: PPUSH
5604: LD_INT 6
5606: NEG
5607: PPUSH
5608: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5612: LD_INT 23
5614: PPUSH
5615: CALL_OW 87
// dialogue_skipped := false ;
5619: LD_ADDR_OWVAR 59
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// InitRuPatrols ;
5627: CALL 3012 0 0
// Say ( Heike , DH-Escape-1 ) ;
5631: LD_EXP 38
5635: PPUSH
5636: LD_STRING DH-Escape-1
5638: PPUSH
5639: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5643: LD_EXP 38
5647: PPUSH
5648: LD_STRING DH-Escape-2
5650: PPUSH
5651: CALL_OW 88
// if not debug then
5655: LD_EXP 1
5659: NOT
5660: IFFALSE 5666
// StartLockerMinigame ;
5662: CALL 18951 0 0
// wait ( 0 0$1 ) ;
5666: LD_INT 35
5668: PPUSH
5669: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5673: LD_EXP 38
5677: PPUSH
5678: LD_STRING DH-Escape-4
5680: PPUSH
5681: CALL_OW 88
// wait ( 0 0$3 ) ;
5685: LD_INT 105
5687: PPUSH
5688: CALL_OW 67
// your_side := 2 ;
5692: LD_ADDR_OWVAR 2
5696: PUSH
5697: LD_INT 2
5699: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5700: LD_EXP 38
5704: PPUSH
5705: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5709: LD_INT 152
5711: PPUSH
5712: LD_INT 65
5714: PPUSH
5715: LD_INT 2
5717: PPUSH
5718: LD_INT 70
5720: NEG
5721: PPUSH
5722: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5726: LD_INT 152
5728: PPUSH
5729: LD_INT 65
5731: PPUSH
5732: LD_INT 2
5734: PPUSH
5735: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5739: LD_INT 133
5741: PPUSH
5742: LD_INT 76
5744: PPUSH
5745: LD_INT 8
5747: PPUSH
5748: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5752: LD_EXP 38
5756: PPUSH
5757: LD_INT 128
5759: PPUSH
5760: LD_INT 64
5762: PPUSH
5763: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5767: LD_INT 35
5769: PPUSH
5770: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5774: LD_EXP 38
5778: PPUSH
5779: LD_INT 128
5781: PPUSH
5782: LD_INT 64
5784: PPUSH
5785: CALL_OW 307
5789: IFFALSE 5767
// ComHold ( Heike ) ;
5791: LD_EXP 38
5795: PPUSH
5796: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5800: LD_EXP 38
5804: PPUSH
5805: LD_STRING DH-Start-1
5807: PPUSH
5808: CALL_OW 88
// if not americanContact then
5812: LD_EXP 10
5816: NOT
5817: IFFALSE 5833
// Say ( Heike , DH-Start-c-2 ) else
5819: LD_EXP 38
5823: PPUSH
5824: LD_STRING DH-Start-c-2
5826: PPUSH
5827: CALL_OW 88
5831: GO 5865
// if johnnySaved then
5833: LD_EXP 3
5837: IFFALSE 5853
// Say ( Heike , DH-Start-a-2 ) else
5839: LD_EXP 38
5843: PPUSH
5844: LD_STRING DH-Start-a-2
5846: PPUSH
5847: CALL_OW 88
5851: GO 5865
// Say ( Heike , DH-Start-b-2 ) ;
5853: LD_EXP 38
5857: PPUSH
5858: LD_STRING DH-Start-b-2
5860: PPUSH
5861: CALL_OW 88
// Video ( false ) ;
5865: LD_INT 0
5867: PPUSH
5868: CALL 64153 0 1
// tick := 0 ;
5872: LD_ADDR_OWVAR 1
5876: PUSH
5877: LD_INT 0
5879: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
5880: LD_STRING M1
5882: PPUSH
5883: CALL_OW 337
// enable ( gameStartEvent ) ;
5887: LD_INT 2
5889: ENABLE_MARKED
// SaveForQuickRestart ;
5890: CALL_OW 22
// end ;
5894: LD_VAR 0 1
5898: RET
// function ActionAdditional ; var i , un , tmp ; begin
5899: LD_INT 0
5901: PPUSH
5902: PPUSH
5903: PPUSH
5904: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
5905: LD_INT 115
5907: PPUSH
5908: LD_INT 27
5910: PPUSH
5911: LD_INT 2
5913: PPUSH
5914: LD_INT 6
5916: NEG
5917: PPUSH
5918: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
5922: LD_EXP 38
5926: PPUSH
5927: LD_INT 115
5929: PPUSH
5930: LD_INT 27
5932: PPUSH
5933: CALL_OW 428
5937: PPUSH
5938: CALL_OW 52
// SetClass ( Heike , 33 ) ;
5942: LD_EXP 38
5946: PPUSH
5947: LD_INT 33
5949: PPUSH
5950: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
5954: LD_INT 124
5956: PPUSH
5957: LD_INT 39
5959: PPUSH
5960: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
5964: LD_EXP 38
5968: PPUSH
5969: LD_STRING DH-Fail-1
5971: PPUSH
5972: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
5976: LD_INT 3
5978: PPUSH
5979: CALL_OW 427
// ComExit ( Heike ) ;
5983: LD_EXP 38
5987: PPUSH
5988: CALL 64579 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
5992: LD_EXP 38
5996: PPUSH
5997: LD_INT 109
5999: PPUSH
6000: LD_INT 33
6002: PPUSH
6003: CALL_OW 171
// AddComHold ( Heike ) ;
6007: LD_EXP 38
6011: PPUSH
6012: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6016: LD_INT 115
6018: PPUSH
6019: LD_INT 27
6021: PPUSH
6022: LD_INT 2
6024: PPUSH
6025: CALL_OW 331
// wait ( 0 0$2 ) ;
6029: LD_INT 70
6031: PPUSH
6032: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6036: LD_INT 35
6038: PPUSH
6039: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6043: LD_EXP 38
6047: PPUSH
6048: LD_INT 109
6050: PPUSH
6051: LD_INT 33
6053: PPUSH
6054: CALL_OW 307
6058: IFFALSE 6036
// Say ( Heike , DH-Fail-2 ) ;
6060: LD_EXP 38
6064: PPUSH
6065: LD_STRING DH-Fail-2
6067: PPUSH
6068: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6072: LD_EXP 38
6076: PPUSH
6077: LD_INT 111
6079: PPUSH
6080: LD_INT 48
6082: PPUSH
6083: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6087: LD_INT 35
6089: PPUSH
6090: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6094: LD_EXP 38
6098: PPUSH
6099: LD_INT 111
6101: PPUSH
6102: LD_INT 48
6104: PPUSH
6105: CALL_OW 297
6109: PUSH
6110: LD_INT 4
6112: LESS
6113: IFFALSE 6087
// AddComMoveXY ( Heike , 106 , 72 ) ;
6115: LD_EXP 38
6119: PPUSH
6120: LD_INT 106
6122: PPUSH
6123: LD_INT 72
6125: PPUSH
6126: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6130: LD_EXP 38
6134: PPUSH
6135: LD_INT 103
6137: PPUSH
6138: LD_INT 80
6140: PPUSH
6141: CALL_OW 171
// uc_side := 3 ;
6145: LD_ADDR_OWVAR 20
6149: PUSH
6150: LD_INT 3
6152: ST_TO_ADDR
// uc_nation := 3 ;
6153: LD_ADDR_OWVAR 21
6157: PUSH
6158: LD_INT 3
6160: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6161: LD_INT 1
6163: PPUSH
6164: LD_INT 1
6166: PPUSH
6167: LD_INT 6
6169: PPUSH
6170: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6174: LD_ADDR_OWVAR 29
6178: PUSH
6179: LD_INT 12
6181: PUSH
6182: LD_INT 12
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: ST_TO_ADDR
// un := CreateHuman ;
6189: LD_ADDR_VAR 0 3
6193: PUSH
6194: CALL_OW 44
6198: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6199: LD_VAR 0 3
6203: PPUSH
6204: LD_INT 134
6206: PPUSH
6207: LD_INT 52
6209: PPUSH
6210: LD_INT 4
6212: PPUSH
6213: LD_INT 0
6215: PPUSH
6216: CALL 66321 0 5
// ComTurnUnit ( un , Heike ) ;
6220: LD_VAR 0 3
6224: PPUSH
6225: LD_EXP 38
6229: PPUSH
6230: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6234: LD_VAR 0 3
6238: PPUSH
6239: LD_EXP 38
6243: PPUSH
6244: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6248: LD_VAR 0 3
6252: PPUSH
6253: LD_STRING DRum-Fail-3
6255: PPUSH
6256: CALL_OW 88
// for i := 1 to 3 do
6260: LD_ADDR_VAR 0 2
6264: PUSH
6265: DOUBLE
6266: LD_INT 1
6268: DEC
6269: ST_TO_ADDR
6270: LD_INT 3
6272: PUSH
6273: FOR_TO
6274: IFFALSE 6347
// begin PrepareSoldier ( false , 10 ) ;
6276: LD_INT 0
6278: PPUSH
6279: LD_INT 10
6281: PPUSH
6282: CALL_OW 381
// un := CreateHuman ;
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: CALL_OW 44
6295: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6296: LD_ADDR_VAR 0 4
6300: PUSH
6301: LD_VAR 0 4
6305: PPUSH
6306: LD_VAR 0 3
6310: PPUSH
6311: CALL 64181 0 2
6315: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6316: LD_VAR 0 3
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 0
6326: PPUSH
6327: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6331: LD_VAR 0 3
6335: PPUSH
6336: LD_EXP 38
6340: PPUSH
6341: CALL_OW 119
// end ;
6345: GO 6273
6347: POP
6348: POP
// repeat wait ( 0 0$1 ) ;
6349: LD_INT 35
6351: PPUSH
6352: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6356: LD_VAR 0 4
6360: PPUSH
6361: LD_INT 101
6363: PUSH
6364: LD_INT 2
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 72
6375: PUSH
6376: LD_INT 1
6378: GREATER
6379: IFFALSE 6349
// wait ( 0 0$1 ) ;
6381: LD_INT 35
6383: PPUSH
6384: CALL_OW 67
// DialogueOn ;
6388: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6392: LD_EXP 38
6396: PPUSH
6397: LD_STRING DH-Fail-4
6399: PPUSH
6400: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6404: LD_EXP 38
6408: PPUSH
6409: LD_STRING DH-Fail-5
6411: PPUSH
6412: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6416: LD_EXP 38
6420: PPUSH
6421: LD_STRING DH-Fail-6
6423: PPUSH
6424: CALL_OW 88
// DialogueOff ;
6428: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6432: LD_VAR 0 4
6436: PPUSH
6437: LD_EXP 38
6441: PPUSH
6442: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6446: LD_INT 35
6448: PPUSH
6449: CALL_OW 67
// until IsDying ( Heike ) ;
6453: LD_EXP 38
6457: PPUSH
6458: CALL_OW 303
6462: IFFALSE 6446
// KillUnit ( Heike ) ;
6464: LD_EXP 38
6468: PPUSH
6469: CALL_OW 66
// wait ( 0 0$4 ) ;
6473: LD_INT 140
6475: PPUSH
6476: CALL_OW 67
// ResetFog ;
6480: CALL_OW 335
// DialogueOn ;
6484: CALL_OW 6
// dwait ( 0 0$1 ) ;
6488: LD_INT 35
6490: PPUSH
6491: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6495: LD_ADDR_EXP 38
6499: PUSH
6500: LD_STRING Heike
6502: PPUSH
6503: LD_EXP 1
6507: NOT
6508: PPUSH
6509: LD_EXP 2
6513: PPUSH
6514: CALL 26732 0 3
6518: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6519: LD_EXP 38
6523: PPUSH
6524: LD_STRING DH-Fail-7
6526: PPUSH
6527: CALL_OW 89
// DialogueOff ;
6531: CALL_OW 7
// YouLost ( Fail ) ;
6535: LD_STRING Fail
6537: PPUSH
6538: CALL_OW 104
// end ;
6542: LD_VAR 0 1
6546: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6547: LD_INT 2
6549: PPUSH
6550: LD_INT 173
6552: PPUSH
6553: LD_INT 29
6555: PPUSH
6556: CALL_OW 293
6560: PUSH
6561: LD_EXP 38
6565: PPUSH
6566: LD_INT 173
6568: PPUSH
6569: LD_INT 29
6571: PPUSH
6572: CALL_OW 297
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: AND
6581: IFFALSE 6598
6583: GO 6585
6585: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6586: LD_EXP 38
6590: PPUSH
6591: LD_STRING DH-EastRoad
6593: PPUSH
6594: CALL_OW 88
6598: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6599: LD_INT 2
6601: PPUSH
6602: LD_INT 149
6604: PPUSH
6605: LD_INT 3
6607: PPUSH
6608: CALL_OW 293
6612: PUSH
6613: LD_EXP 38
6617: PPUSH
6618: LD_INT 149
6620: PPUSH
6621: LD_INT 3
6623: PPUSH
6624: CALL_OW 297
6628: PUSH
6629: LD_INT 6
6631: LESS
6632: AND
6633: IFFALSE 6650
6635: GO 6637
6637: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6638: LD_EXP 38
6642: PPUSH
6643: LD_STRING DH-EastRoad
6645: PPUSH
6646: CALL_OW 88
6650: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6651: LD_INT 2
6653: PPUSH
6654: LD_INT 217
6656: PPUSH
6657: LD_INT 120
6659: PPUSH
6660: CALL_OW 293
6664: PUSH
6665: LD_EXP 38
6669: PPUSH
6670: LD_INT 217
6672: PPUSH
6673: LD_INT 120
6675: PPUSH
6676: CALL_OW 297
6680: PUSH
6681: LD_INT 6
6683: LESS
6684: AND
6685: IFFALSE 6702
6687: GO 6689
6689: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6690: LD_EXP 38
6694: PPUSH
6695: LD_STRING DH-EastEnd
6697: PPUSH
6698: CALL_OW 88
6702: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6703: LD_EXP 38
6707: PPUSH
6708: LD_INT 11
6710: PPUSH
6711: CALL_OW 308
6715: IFFALSE 6753
6717: GO 6719
6719: DISABLE
// begin if not heikeSquad then
6720: LD_EXP 14
6724: NOT
6725: IFFALSE 6741
// Say ( Heike , DH-Hill ) else
6727: LD_EXP 38
6731: PPUSH
6732: LD_STRING DH-Hill
6734: PPUSH
6735: CALL_OW 88
6739: GO 6753
// Say ( Heike , DH-Hill-a ) ;
6741: LD_EXP 38
6745: PPUSH
6746: LD_STRING DH-Hill-a
6748: PPUSH
6749: CALL_OW 88
// end ;
6753: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6754: LD_EXP 38
6758: PPUSH
6759: LD_INT 12
6761: PPUSH
6762: CALL_OW 308
6766: IFFALSE 6948
6768: GO 6770
6770: DISABLE
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
// begin DialogueOn ;
6776: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6780: LD_EXP 38
6784: PPUSH
6785: CALL_OW 87
// x := GetX ( Heike ) ;
6789: LD_ADDR_VAR 0 1
6793: PUSH
6794: LD_EXP 38
6798: PPUSH
6799: CALL_OW 250
6803: ST_TO_ADDR
// y := GetY ( Heike ) ;
6804: LD_ADDR_VAR 0 2
6808: PUSH
6809: LD_EXP 38
6813: PPUSH
6814: CALL_OW 251
6818: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6819: LD_VAR 0 1
6823: PPUSH
6824: LD_VAR 0 2
6828: PPUSH
6829: LD_INT 2
6831: PPUSH
6832: LD_INT 12
6834: NEG
6835: PPUSH
6836: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_VAR 0 2
6849: PPUSH
6850: LD_INT 2
6852: PPUSH
6853: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6857: LD_INT 2
6859: PUSH
6860: LD_INT 30
6862: PUSH
6863: LD_INT 32
6865: PUSH
6866: EMPTY
6867: LIST
6868: LIST
6869: PUSH
6870: LD_INT 30
6872: PUSH
6873: LD_INT 33
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: PPUSH
6885: CALL_OW 69
6889: IFFALSE 6901
// v := 3 else
6891: LD_ADDR_VAR 0 3
6895: PUSH
6896: LD_INT 3
6898: ST_TO_ADDR
6899: GO 6909
// v := 2 ;
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: LD_INT 2
6908: ST_TO_ADDR
// disable ;
6909: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
6910: LD_EXP 38
6914: PPUSH
6915: LD_STRING DH-Outpost-
6917: PUSH
6918: LD_INT 1
6920: PPUSH
6921: LD_VAR 0 3
6925: PPUSH
6926: CALL_OW 12
6930: STR
6931: PPUSH
6932: CALL_OW 88
// DialogueOff ;
6936: CALL_OW 7
// wait ( 0 0$10 ) ;
6940: LD_INT 350
6942: PPUSH
6943: CALL_OW 67
// enable ;
6947: ENABLE
// end ;
6948: PPOPN 3
6950: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
6951: LD_EXP 38
6955: PPUSH
6956: LD_INT 19
6958: PPUSH
6959: CALL_OW 308
6963: PUSH
6964: LD_EXP 22
6968: NOT
6969: AND
6970: PUSH
6971: LD_EXP 30
6975: NOT
6976: AND
6977: IFFALSE 7050
6979: GO 6981
6981: DISABLE
// begin DialogueOn ;
6982: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
6986: LD_INT 152
6988: PPUSH
6989: LD_INT 115
6991: PPUSH
6992: LD_INT 2
6994: PPUSH
6995: LD_INT 16
6997: NEG
6998: PPUSH
6999: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7003: LD_INT 152
7005: PPUSH
7006: LD_INT 115
7008: PPUSH
7009: LD_INT 2
7011: PPUSH
7012: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7016: LD_INT 152
7018: PPUSH
7019: LD_INT 115
7021: PPUSH
7022: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7026: LD_EXP 38
7030: PPUSH
7031: LD_STRING DH-Stealth-1
7033: PPUSH
7034: CALL_OW 88
// DialogueOff ;
7038: CALL_OW 7
// adminAreaDiscovered := true ;
7042: LD_ADDR_EXP 22
7046: PUSH
7047: LD_INT 1
7049: ST_TO_ADDR
// end ;
7050: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7051: LD_INT 2
7053: PPUSH
7054: LD_EXP 39
7058: PPUSH
7059: CALL_OW 292
7063: PUSH
7064: LD_EXP 38
7068: PPUSH
7069: LD_EXP 39
7073: PPUSH
7074: CALL_OW 296
7078: PUSH
7079: LD_INT 6
7081: LESS
7082: AND
7083: PUSH
7084: LD_EXP 17
7088: NOT
7089: AND
7090: PUSH
7091: LD_EXP 30
7095: NOT
7096: AND
7097: IFFALSE 7203
7099: GO 7101
7101: DISABLE
// begin DialogueOn ;
7102: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7106: LD_EXP 39
7110: PPUSH
7111: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7115: LD_EXP 39
7119: PPUSH
7120: LD_EXP 38
7124: PPUSH
7125: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7129: LD_EXP 38
7133: PPUSH
7134: LD_EXP 39
7138: PPUSH
7139: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7143: LD_EXP 38
7147: PPUSH
7148: LD_STRING DH-Givi-1
7150: PPUSH
7151: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7155: LD_EXP 39
7159: PPUSH
7160: LD_STRING DG-Givi-2
7162: PPUSH
7163: CALL_OW 88
// DialogueOff ;
7167: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7171: LD_EXP 39
7175: PPUSH
7176: LD_INT 2
7178: PPUSH
7179: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7183: LD_ADDR_EXP 14
7187: PUSH
7188: LD_EXP 14
7192: PPUSH
7193: LD_EXP 39
7197: PPUSH
7198: CALL 64181 0 2
7202: ST_TO_ADDR
// end ;
7203: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7204: LD_INT 2
7206: PPUSH
7207: LD_EXP 44
7211: PPUSH
7212: CALL_OW 292
7216: PUSH
7217: LD_EXP 38
7221: PPUSH
7222: LD_EXP 44
7226: PPUSH
7227: CALL_OW 296
7231: PUSH
7232: LD_INT 6
7234: LESS
7235: AND
7236: PUSH
7237: LD_EXP 17
7241: NOT
7242: AND
7243: PUSH
7244: LD_EXP 30
7248: NOT
7249: AND
7250: IFFALSE 7356
7252: GO 7254
7254: DISABLE
// begin DialogueOn ;
7255: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7259: LD_EXP 44
7263: PPUSH
7264: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7268: LD_EXP 44
7272: PPUSH
7273: LD_EXP 38
7277: PPUSH
7278: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7282: LD_EXP 38
7286: PPUSH
7287: LD_EXP 44
7291: PPUSH
7292: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7296: LD_EXP 38
7300: PPUSH
7301: LD_STRING DH-Sophia-1
7303: PPUSH
7304: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7308: LD_EXP 44
7312: PPUSH
7313: LD_STRING DS-Sophia-2
7315: PPUSH
7316: CALL_OW 88
// DialogueOff ;
7320: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7324: LD_EXP 44
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7336: LD_ADDR_EXP 14
7340: PUSH
7341: LD_EXP 14
7345: PPUSH
7346: LD_EXP 44
7350: PPUSH
7351: CALL 64181 0 2
7355: ST_TO_ADDR
// end ;
7356: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7357: LD_INT 2
7359: PPUSH
7360: LD_EXP 46
7364: PPUSH
7365: CALL_OW 292
7369: PUSH
7370: LD_EXP 38
7374: PPUSH
7375: LD_EXP 46
7379: PPUSH
7380: CALL_OW 296
7384: PUSH
7385: LD_INT 6
7387: LESS
7388: AND
7389: PUSH
7390: LD_EXP 17
7394: NOT
7395: AND
7396: PUSH
7397: LD_EXP 30
7401: NOT
7402: AND
7403: IFFALSE 7499
7405: GO 7407
7407: DISABLE
// begin DialogueOn ;
7408: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7412: LD_EXP 46
7416: PPUSH
7417: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7421: LD_EXP 38
7425: PPUSH
7426: LD_STRING DH-Olaf-1
7428: PPUSH
7429: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7433: LD_EXP 46
7437: PPUSH
7438: LD_STRING DO-Olaf-2
7440: PPUSH
7441: CALL_OW 88
// if explosionsTakenByRussians then
7445: LD_EXP 21
7449: IFFALSE 7463
// Say ( Olaf , DO-Olaf-a-3 ) ;
7451: LD_EXP 46
7455: PPUSH
7456: LD_STRING DO-Olaf-a-3
7458: PPUSH
7459: CALL_OW 88
// DialogueOff ;
7463: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7467: LD_EXP 46
7471: PPUSH
7472: LD_INT 2
7474: PPUSH
7475: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7479: LD_ADDR_EXP 14
7483: PUSH
7484: LD_EXP 14
7488: PPUSH
7489: LD_EXP 46
7493: PPUSH
7494: CALL 64181 0 2
7498: ST_TO_ADDR
// end ;
7499: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 40
7507: PPUSH
7508: CALL_OW 292
7512: PUSH
7513: LD_EXP 38
7517: PPUSH
7518: LD_EXP 40
7522: PPUSH
7523: CALL_OW 296
7527: PUSH
7528: LD_INT 6
7530: LESS
7531: AND
7532: PUSH
7533: LD_EXP 17
7537: NOT
7538: AND
7539: PUSH
7540: LD_EXP 30
7544: NOT
7545: AND
7546: IFFALSE 7774
7548: GO 7550
7550: DISABLE
7551: LD_INT 0
7553: PPUSH
7554: PPUSH
// begin DialogueOn ;
7555: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7559: LD_EXP 40
7563: PPUSH
7564: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7568: LD_ADDR_VAR 0 2
7572: PUSH
7573: LD_INT 18
7575: PPUSH
7576: LD_INT 0
7578: PPUSH
7579: CALL_OW 517
7583: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7584: LD_ADDR_VAR 0 1
7588: PUSH
7589: DOUBLE
7590: LD_INT 1
7592: DEC
7593: ST_TO_ADDR
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 1
7601: ARRAY
7602: PUSH
7603: FOR_TO
7604: IFFALSE 7686
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7606: LD_VAR 0 2
7610: PUSH
7611: LD_INT 1
7613: ARRAY
7614: PUSH
7615: LD_VAR 0 1
7619: ARRAY
7620: PPUSH
7621: LD_VAR 0 2
7625: PUSH
7626: LD_INT 2
7628: ARRAY
7629: PUSH
7630: LD_VAR 0 1
7634: ARRAY
7635: PPUSH
7636: LD_INT 2
7638: PPUSH
7639: LD_INT 3
7641: NEG
7642: PPUSH
7643: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
7647: LD_VAR 0 2
7651: PUSH
7652: LD_INT 1
7654: ARRAY
7655: PUSH
7656: LD_VAR 0 1
7660: ARRAY
7661: PPUSH
7662: LD_VAR 0 2
7666: PUSH
7667: LD_INT 2
7669: ARRAY
7670: PUSH
7671: LD_VAR 0 1
7675: ARRAY
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 331
// end ;
7684: GO 7603
7686: POP
7687: POP
// Say ( Mike , DM-Mike-1 ) ;
7688: LD_EXP 40
7692: PPUSH
7693: LD_STRING DM-Mike-1
7695: PPUSH
7696: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
7700: LD_EXP 38
7704: PPUSH
7705: LD_STRING DH-Mike-2
7707: PPUSH
7708: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
7712: LD_INT 78
7714: PPUSH
7715: LD_INT 104
7717: PPUSH
7718: CALL_OW 84
// dwait ( 0 0$1 ) ;
7722: LD_INT 35
7724: PPUSH
7725: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7729: LD_EXP 38
7733: PPUSH
7734: CALL_OW 87
// DialogueOff ;
7738: CALL_OW 7
// SetSide ( Mike , 2 ) ;
7742: LD_EXP 40
7746: PPUSH
7747: LD_INT 2
7749: PPUSH
7750: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
7754: LD_ADDR_EXP 14
7758: PUSH
7759: LD_EXP 14
7763: PPUSH
7764: LD_EXP 40
7768: PPUSH
7769: CALL 64181 0 2
7773: ST_TO_ADDR
// end ;
7774: PPOPN 2
7776: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
7777: LD_EXP 38
7781: PPUSH
7782: LD_EXP 43
7786: PPUSH
7787: CALL_OW 296
7791: PUSH
7792: LD_INT 6
7794: LESS
7795: PUSH
7796: LD_EXP 43
7800: PPUSH
7801: CALL_OW 257
7805: PUSH
7806: LD_INT 33
7808: EQUAL
7809: AND
7810: PUSH
7811: LD_EXP 17
7815: NOT
7816: AND
7817: PUSH
7818: LD_EXP 43
7822: PPUSH
7823: CALL_OW 302
7827: AND
7828: PUSH
7829: LD_EXP 20
7833: AND
7834: PUSH
7835: LD_EXP 43
7839: PUSH
7840: LD_EXP 14
7844: IN
7845: AND
7846: PUSH
7847: LD_EXP 43
7851: PPUSH
7852: CALL_OW 255
7856: PUSH
7857: LD_INT 2
7859: EQUAL
7860: AND
7861: IFFALSE 7890
7863: GO 7865
7865: DISABLE
// begin DialogueOn ;
7866: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
7870: LD_EXP 38
7874: PPUSH
7875: LD_STRING DH-Kaia-Revolver-2
7877: PPUSH
7878: CALL_OW 88
// SetClassKaiaRevolver ;
7882: CALL 1686 0 0
// DialogueOff ;
7886: CALL_OW 7
// end ;
7890: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
7891: LD_EXP 41
7895: PUSH
7896: LD_EXP 48
7900: AND
7901: PUSH
7902: LD_EXP 48
7906: PPUSH
7907: CALL_OW 255
7911: PUSH
7912: LD_INT 2
7914: NONEQUAL
7915: AND
7916: PUSH
7917: LD_EXP 41
7921: PPUSH
7922: CALL_OW 255
7926: PUSH
7927: LD_INT 2
7929: NONEQUAL
7930: AND
7931: PUSH
7932: LD_EXP 14
7936: PPUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 2
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 72
7951: PUSH
7952: LD_INT 5
7954: GREATER
7955: AND
7956: PUSH
7957: LD_EXP 17
7961: NOT
7962: AND
7963: PUSH
7964: LD_EXP 30
7968: NOT
7969: AND
7970: IFFALSE 8687
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
7978: PPUSH
// begin DialogueOn ;
7979: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
7983: LD_ADDR_VAR 0 2
7987: PUSH
7988: LD_EXP 39
7992: PPUSH
7993: CALL_OW 302
7997: PUSH
7998: LD_EXP 39
8002: PUSH
8003: LD_EXP 14
8007: IN
8008: AND
8009: PUSH
8010: LD_EXP 39
8014: PPUSH
8015: CALL_OW 255
8019: PUSH
8020: LD_INT 2
8022: EQUAL
8023: AND
8024: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8025: LD_EXP 38
8029: PPUSH
8030: LD_STRING DH-Med-1
8032: PPUSH
8033: CALL_OW 88
// if hasGivi then
8037: LD_VAR 0 2
8041: IFFALSE 8057
// Say ( Givi , DG-Med-2 ) else
8043: LD_EXP 39
8047: PPUSH
8048: LD_STRING DG-Med-2
8050: PPUSH
8051: CALL_OW 88
8055: GO 8162
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8057: LD_EXP 14
8061: PUSH
8062: LD_EXP 49
8066: ISECT
8067: PPUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 2
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 26
8080: PUSH
8081: LD_INT 1
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PPUSH
8092: CALL_OW 72
8096: PUSH
8097: LD_INT 1
8099: ARRAY
8100: PPUSH
8101: LD_STRING DArm-Med-e-2
8103: PPUSH
8104: CALL_OW 88
8108: NOT
8109: IFFALSE 8162
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8111: LD_EXP 14
8115: PUSH
8116: LD_EXP 49
8120: ISECT
8121: PPUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 2
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 26
8134: PUSH
8135: LD_INT 2
8137: PUSH
8138: EMPTY
8139: LIST
8140: LIST
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PPUSH
8146: CALL_OW 72
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: PPUSH
8155: LD_STRING DArf-Med-e-2
8157: PPUSH
8158: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8162: LD_INT 154
8164: PPUSH
8165: LD_INT 119
8167: PPUSH
8168: LD_INT 70
8170: PPUSH
8171: CALL 18440 0 3
// Say ( Heike , DH-Med-3 ) ;
8175: LD_EXP 38
8179: PPUSH
8180: LD_STRING DH-Med-3
8182: PPUSH
8183: CALL_OW 88
// if hasGivi then
8187: LD_VAR 0 2
8191: IFFALSE 8207
// Say ( Givi , DG-Med-4 ) else
8193: LD_EXP 39
8197: PPUSH
8198: LD_STRING DG-Med-4
8200: PPUSH
8201: CALL_OW 88
8205: GO 8312
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8207: LD_EXP 14
8211: PUSH
8212: LD_EXP 49
8216: ISECT
8217: PPUSH
8218: LD_INT 22
8220: PUSH
8221: LD_INT 2
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: PUSH
8228: LD_INT 26
8230: PUSH
8231: LD_INT 1
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PPUSH
8242: CALL_OW 72
8246: PUSH
8247: LD_INT 1
8249: ARRAY
8250: PPUSH
8251: LD_STRING DArm-Med-e-4
8253: PPUSH
8254: CALL_OW 88
8258: NOT
8259: IFFALSE 8312
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8261: LD_EXP 14
8265: PUSH
8266: LD_EXP 49
8270: ISECT
8271: PPUSH
8272: LD_INT 22
8274: PUSH
8275: LD_INT 2
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: PUSH
8282: LD_INT 26
8284: PUSH
8285: LD_INT 2
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: PPUSH
8296: CALL_OW 72
8300: PUSH
8301: LD_INT 1
8303: ARRAY
8304: PPUSH
8305: LD_STRING DArf-Med-e-4
8307: PPUSH
8308: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8312: LD_ADDR_VAR 0 1
8316: PUSH
8317: LD_EXP 43
8321: PPUSH
8322: CALL_OW 302
8326: PUSH
8327: LD_EXP 43
8331: PUSH
8332: LD_EXP 14
8336: IN
8337: AND
8338: PUSH
8339: LD_EXP 43
8343: PPUSH
8344: CALL_OW 255
8348: PUSH
8349: LD_INT 2
8351: EQUAL
8352: AND
8353: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8354: LD_EXP 40
8358: PPUSH
8359: CALL_OW 302
8363: PUSH
8364: LD_EXP 40
8368: PUSH
8369: LD_EXP 14
8373: IN
8374: AND
8375: PUSH
8376: LD_EXP 43
8380: PPUSH
8381: CALL_OW 255
8385: PUSH
8386: LD_INT 2
8388: EQUAL
8389: AND
8390: IFFALSE 8422
// begin Say ( Mike , DM-Med-5 ) ;
8392: LD_EXP 40
8396: PPUSH
8397: LD_STRING DM-Med-5
8399: PPUSH
8400: CALL_OW 88
// if hasKaia then
8404: LD_VAR 0 1
8408: IFFALSE 8422
// Say ( Kaia , DK-Med-6 ) ;
8410: LD_EXP 43
8414: PPUSH
8415: LD_STRING DK-Med-6
8417: PPUSH
8418: CALL_OW 88
// end ; if hasKaia then
8422: LD_VAR 0 1
8426: IFFALSE 8667
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8428: LD_INT 175
8430: PPUSH
8431: LD_INT 123
8433: PPUSH
8434: LD_INT 2
8436: PPUSH
8437: LD_INT 8
8439: NEG
8440: PPUSH
8441: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8445: LD_INT 175
8447: PPUSH
8448: LD_INT 123
8450: PPUSH
8451: LD_INT 2
8453: PPUSH
8454: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8458: LD_INT 175
8460: PPUSH
8461: LD_INT 123
8463: PPUSH
8464: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8468: LD_EXP 43
8472: PPUSH
8473: LD_STRING DK-Med-7
8475: PPUSH
8476: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8480: LD_EXP 43
8484: PPUSH
8485: LD_STRING DK-Med-8
8487: PPUSH
8488: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8492: LD_EXP 45
8496: PPUSH
8497: CALL_OW 302
8501: PUSH
8502: LD_EXP 45
8506: PUSH
8507: LD_EXP 14
8511: IN
8512: AND
8513: PUSH
8514: LD_EXP 45
8518: PPUSH
8519: CALL_OW 255
8523: PUSH
8524: LD_INT 2
8526: EQUAL
8527: AND
8528: IFFALSE 8586
// begin Say ( Markov , DMar-Med-9 ) ;
8530: LD_EXP 45
8534: PPUSH
8535: LD_STRING DMar-Med-9
8537: PPUSH
8538: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8542: LD_EXP 43
8546: PPUSH
8547: LD_STRING DK-Med-10
8549: PPUSH
8550: CALL_OW 88
// if hasGivi then
8554: LD_VAR 0 2
8558: IFFALSE 8574
// Say ( Kaia , DK-Med-11 ) else
8560: LD_EXP 43
8564: PPUSH
8565: LD_STRING DK-Med-11
8567: PPUSH
8568: CALL_OW 88
8572: GO 8586
// Say ( Kaia , DK-Med-a-11 ) ;
8574: LD_EXP 43
8578: PPUSH
8579: LD_STRING DK-Med-a-11
8581: PPUSH
8582: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8586: LD_EXP 42
8590: PPUSH
8591: CALL_OW 302
8595: PUSH
8596: LD_EXP 42
8600: PUSH
8601: LD_EXP 14
8605: IN
8606: AND
8607: PUSH
8608: LD_EXP 42
8612: PPUSH
8613: CALL_OW 255
8617: PUSH
8618: LD_INT 2
8620: EQUAL
8621: AND
8622: IFFALSE 8667
// begin Say ( Kamil , DKam-Med-12 ) ;
8624: LD_EXP 42
8628: PPUSH
8629: LD_STRING DKam-Med-12
8631: PPUSH
8632: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8636: LD_EXP 42
8640: PPUSH
8641: LD_STRING DKam-Med-13
8643: PPUSH
8644: CALL_OW 88
// if not hasExplosionCollected then
8648: LD_EXP 23
8652: NOT
8653: IFFALSE 8667
// Say ( Heike , DH-Med-d-14 ) ;
8655: LD_EXP 38
8659: PPUSH
8660: LD_STRING DH-Med-d-14
8662: PPUSH
8663: CALL_OW 88
// end ; end ; DialogueOff ;
8667: CALL_OW 7
// adminAreaDiscovered := true ;
8671: LD_ADDR_EXP 22
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// laundryAllowed := true ;
8679: LD_ADDR_EXP 26
8683: PUSH
8684: LD_INT 1
8686: ST_TO_ADDR
// end ;
8687: PPOPN 2
8689: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
8690: LD_EXP 41
8694: NOT
8695: PUSH
8696: LD_EXP 48
8700: AND
8701: PUSH
8702: LD_EXP 48
8706: PUSH
8707: LD_EXP 14
8711: IN
8712: NOT
8713: AND
8714: PUSH
8715: LD_EXP 14
8719: PPUSH
8720: LD_INT 22
8722: PUSH
8723: LD_INT 2
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PPUSH
8730: CALL_OW 72
8734: PUSH
8735: LD_INT 4
8737: GREATER
8738: AND
8739: PUSH
8740: LD_EXP 17
8744: NOT
8745: AND
8746: PUSH
8747: LD_EXP 30
8751: NOT
8752: AND
8753: IFFALSE 9470
8755: GO 8757
8757: DISABLE
8758: LD_INT 0
8760: PPUSH
8761: PPUSH
// begin DialogueOn ;
8762: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8766: LD_ADDR_VAR 0 1
8770: PUSH
8771: LD_EXP 39
8775: PPUSH
8776: CALL_OW 302
8780: PUSH
8781: LD_EXP 39
8785: PUSH
8786: LD_EXP 14
8790: IN
8791: AND
8792: PUSH
8793: LD_EXP 39
8797: PPUSH
8798: CALL_OW 255
8802: PUSH
8803: LD_INT 2
8805: EQUAL
8806: AND
8807: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
8808: LD_EXP 38
8812: PPUSH
8813: LD_STRING DH-Med-a-1
8815: PPUSH
8816: CALL_OW 88
// if hasGivi then
8820: LD_VAR 0 1
8824: IFFALSE 8840
// Say ( Givi , DG-Med-a-2 ) else
8826: LD_EXP 39
8830: PPUSH
8831: LD_STRING DG-Med-a-2
8833: PPUSH
8834: CALL_OW 88
8838: GO 8945
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
8840: LD_EXP 14
8844: PUSH
8845: LD_EXP 49
8849: ISECT
8850: PPUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 2
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 26
8863: PUSH
8864: LD_INT 1
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PPUSH
8875: CALL_OW 72
8879: PUSH
8880: LD_INT 1
8882: ARRAY
8883: PPUSH
8884: LD_STRING DArm-Med-f-2
8886: PPUSH
8887: CALL_OW 88
8891: NOT
8892: IFFALSE 8945
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
8894: LD_EXP 14
8898: PUSH
8899: LD_EXP 49
8903: ISECT
8904: PPUSH
8905: LD_INT 22
8907: PUSH
8908: LD_INT 2
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: LD_INT 26
8917: PUSH
8918: LD_INT 2
8920: PUSH
8921: EMPTY
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: PPUSH
8929: CALL_OW 72
8933: PUSH
8934: LD_INT 1
8936: ARRAY
8937: PPUSH
8938: LD_STRING DArf-Med-f-2
8940: PPUSH
8941: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8945: LD_INT 154
8947: PPUSH
8948: LD_INT 119
8950: PPUSH
8951: LD_INT 70
8953: PPUSH
8954: CALL 18440 0 3
// Say ( Heike , DH-Med-a-3 ) ;
8958: LD_EXP 38
8962: PPUSH
8963: LD_STRING DH-Med-a-3
8965: PPUSH
8966: CALL_OW 88
// if hasGivi then
8970: LD_VAR 0 1
8974: IFFALSE 8990
// Say ( Givi , DG-Med-a-4 ) else
8976: LD_EXP 39
8980: PPUSH
8981: LD_STRING DG-Med-a-4
8983: PPUSH
8984: CALL_OW 88
8988: GO 9095
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
8990: LD_EXP 14
8994: PUSH
8995: LD_EXP 49
8999: ISECT
9000: PPUSH
9001: LD_INT 22
9003: PUSH
9004: LD_INT 2
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PUSH
9011: LD_INT 26
9013: PUSH
9014: LD_INT 1
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PPUSH
9025: CALL_OW 72
9029: PUSH
9030: LD_INT 1
9032: ARRAY
9033: PPUSH
9034: LD_STRING DArm-Med-f-4
9036: PPUSH
9037: CALL_OW 88
9041: NOT
9042: IFFALSE 9095
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9044: LD_EXP 14
9048: PUSH
9049: LD_EXP 49
9053: ISECT
9054: PPUSH
9055: LD_INT 22
9057: PUSH
9058: LD_INT 2
9060: PUSH
9061: EMPTY
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 26
9067: PUSH
9068: LD_INT 2
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PPUSH
9079: CALL_OW 72
9083: PUSH
9084: LD_INT 1
9086: ARRAY
9087: PPUSH
9088: LD_STRING DArf-Med-f-4
9090: PPUSH
9091: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9095: LD_ADDR_VAR 0 2
9099: PUSH
9100: LD_EXP 43
9104: PPUSH
9105: CALL_OW 302
9109: PUSH
9110: LD_EXP 43
9114: PUSH
9115: LD_EXP 14
9119: IN
9120: AND
9121: PUSH
9122: LD_EXP 43
9126: PPUSH
9127: CALL_OW 255
9131: PUSH
9132: LD_INT 2
9134: EQUAL
9135: AND
9136: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9137: LD_EXP 40
9141: PPUSH
9142: CALL_OW 302
9146: PUSH
9147: LD_EXP 40
9151: PUSH
9152: LD_EXP 14
9156: IN
9157: AND
9158: PUSH
9159: LD_EXP 40
9163: PPUSH
9164: CALL_OW 255
9168: PUSH
9169: LD_INT 2
9171: EQUAL
9172: AND
9173: IFFALSE 9205
// begin Say ( Mike , DM-Med-5 ) ;
9175: LD_EXP 40
9179: PPUSH
9180: LD_STRING DM-Med-5
9182: PPUSH
9183: CALL_OW 88
// if hasKaia then
9187: LD_VAR 0 2
9191: IFFALSE 9205
// Say ( Kaia , DK-Med-6 ) ;
9193: LD_EXP 43
9197: PPUSH
9198: LD_STRING DK-Med-6
9200: PPUSH
9201: CALL_OW 88
// end ; if hasKaia then
9205: LD_VAR 0 2
9209: IFFALSE 9450
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9211: LD_INT 175
9213: PPUSH
9214: LD_INT 123
9216: PPUSH
9217: LD_INT 2
9219: PPUSH
9220: LD_INT 8
9222: NEG
9223: PPUSH
9224: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9228: LD_INT 175
9230: PPUSH
9231: LD_INT 123
9233: PPUSH
9234: LD_INT 2
9236: PPUSH
9237: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9241: LD_INT 175
9243: PPUSH
9244: LD_INT 123
9246: PPUSH
9247: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9251: LD_EXP 43
9255: PPUSH
9256: LD_STRING DK-Med-7
9258: PPUSH
9259: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9263: LD_EXP 43
9267: PPUSH
9268: LD_STRING DK-Med-8
9270: PPUSH
9271: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9275: LD_EXP 45
9279: PPUSH
9280: CALL_OW 302
9284: PUSH
9285: LD_EXP 45
9289: PUSH
9290: LD_EXP 14
9294: IN
9295: AND
9296: PUSH
9297: LD_EXP 45
9301: PPUSH
9302: CALL_OW 255
9306: PUSH
9307: LD_INT 2
9309: EQUAL
9310: AND
9311: IFFALSE 9369
// begin Say ( Markov , DMar-Med-9 ) ;
9313: LD_EXP 45
9317: PPUSH
9318: LD_STRING DMar-Med-9
9320: PPUSH
9321: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9325: LD_EXP 43
9329: PPUSH
9330: LD_STRING DK-Med-10
9332: PPUSH
9333: CALL_OW 88
// if hasGivi then
9337: LD_VAR 0 1
9341: IFFALSE 9357
// Say ( Kaia , DK-Med-11 ) else
9343: LD_EXP 43
9347: PPUSH
9348: LD_STRING DK-Med-11
9350: PPUSH
9351: CALL_OW 88
9355: GO 9369
// Say ( Kaia , DK-Med-a-11 ) ;
9357: LD_EXP 43
9361: PPUSH
9362: LD_STRING DK-Med-a-11
9364: PPUSH
9365: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9369: LD_EXP 42
9373: PPUSH
9374: CALL_OW 302
9378: PUSH
9379: LD_EXP 42
9383: PUSH
9384: LD_EXP 14
9388: IN
9389: AND
9390: PUSH
9391: LD_EXP 42
9395: PPUSH
9396: CALL_OW 255
9400: PUSH
9401: LD_INT 2
9403: EQUAL
9404: AND
9405: IFFALSE 9450
// begin Say ( Kamil , DKam-Med-12 ) ;
9407: LD_EXP 42
9411: PPUSH
9412: LD_STRING DKam-Med-12
9414: PPUSH
9415: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9419: LD_EXP 42
9423: PPUSH
9424: LD_STRING DKam-Med-13
9426: PPUSH
9427: CALL_OW 88
// if not hasExplosionCollected then
9431: LD_EXP 23
9435: NOT
9436: IFFALSE 9450
// Say ( Heike , DH-Med-d-14 ) ;
9438: LD_EXP 38
9442: PPUSH
9443: LD_STRING DH-Med-d-14
9445: PPUSH
9446: CALL_OW 88
// end ; end ; DialogueOff ;
9450: CALL_OW 7
// adminAreaDiscovered := true ;
9454: LD_ADDR_EXP 22
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// laundryAllowed := true ;
9462: LD_ADDR_EXP 26
9466: PUSH
9467: LD_INT 1
9469: ST_TO_ADDR
// end ;
9470: PPOPN 2
9472: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9473: LD_EXP 41
9477: PUSH
9478: LD_EXP 48
9482: NOT
9483: AND
9484: PUSH
9485: LD_EXP 41
9489: PUSH
9490: LD_EXP 14
9494: IN
9495: NOT
9496: AND
9497: PUSH
9498: LD_EXP 14
9502: PPUSH
9503: LD_INT 22
9505: PUSH
9506: LD_INT 2
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: PPUSH
9513: CALL_OW 72
9517: PUSH
9518: LD_INT 4
9520: GREATER
9521: AND
9522: PUSH
9523: LD_EXP 17
9527: NOT
9528: AND
9529: PUSH
9530: LD_EXP 30
9534: NOT
9535: AND
9536: IFFALSE 10253
9538: GO 9540
9540: DISABLE
9541: LD_INT 0
9543: PPUSH
9544: PPUSH
// begin DialogueOn ;
9545: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9549: LD_ADDR_VAR 0 1
9553: PUSH
9554: LD_EXP 39
9558: PPUSH
9559: CALL_OW 302
9563: PUSH
9564: LD_EXP 39
9568: PUSH
9569: LD_EXP 14
9573: IN
9574: AND
9575: PUSH
9576: LD_EXP 39
9580: PPUSH
9581: CALL_OW 255
9585: PUSH
9586: LD_INT 2
9588: EQUAL
9589: AND
9590: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9591: LD_EXP 38
9595: PPUSH
9596: LD_STRING DH-Med-b-1
9598: PPUSH
9599: CALL_OW 88
// if hasGivi then
9603: LD_VAR 0 1
9607: IFFALSE 9623
// Say ( Givi , DG-Med-a-2 ) else
9609: LD_EXP 39
9613: PPUSH
9614: LD_STRING DG-Med-a-2
9616: PPUSH
9617: CALL_OW 88
9621: GO 9728
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9623: LD_EXP 14
9627: PUSH
9628: LD_EXP 49
9632: ISECT
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 2
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 26
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 72
9662: PUSH
9663: LD_INT 1
9665: ARRAY
9666: PPUSH
9667: LD_STRING DArm-Med-f-2
9669: PPUSH
9670: CALL_OW 88
9674: NOT
9675: IFFALSE 9728
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9677: LD_EXP 14
9681: PUSH
9682: LD_EXP 49
9686: ISECT
9687: PPUSH
9688: LD_INT 22
9690: PUSH
9691: LD_INT 2
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 26
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PPUSH
9712: CALL_OW 72
9716: PUSH
9717: LD_INT 1
9719: ARRAY
9720: PPUSH
9721: LD_STRING DArf-Med-f-2
9723: PPUSH
9724: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9728: LD_INT 154
9730: PPUSH
9731: LD_INT 119
9733: PPUSH
9734: LD_INT 70
9736: PPUSH
9737: CALL 18440 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9741: LD_EXP 38
9745: PPUSH
9746: LD_STRING DH-Med-a-3
9748: PPUSH
9749: CALL_OW 88
// if hasGivi then
9753: LD_VAR 0 1
9757: IFFALSE 9773
// Say ( Givi , DG-Med-a-4 ) else
9759: LD_EXP 39
9763: PPUSH
9764: LD_STRING DG-Med-a-4
9766: PPUSH
9767: CALL_OW 88
9771: GO 9878
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9773: LD_EXP 14
9777: PUSH
9778: LD_EXP 49
9782: ISECT
9783: PPUSH
9784: LD_INT 22
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 26
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 72
9812: PUSH
9813: LD_INT 1
9815: ARRAY
9816: PPUSH
9817: LD_STRING DArm-Med-f-4
9819: PPUSH
9820: CALL_OW 88
9824: NOT
9825: IFFALSE 9878
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9827: LD_EXP 14
9831: PUSH
9832: LD_EXP 49
9836: ISECT
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_INT 2
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 26
9850: PUSH
9851: LD_INT 2
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 72
9866: PUSH
9867: LD_INT 1
9869: ARRAY
9870: PPUSH
9871: LD_STRING DArf-Med-f-4
9873: PPUSH
9874: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9878: LD_ADDR_VAR 0 2
9882: PUSH
9883: LD_EXP 43
9887: PPUSH
9888: CALL_OW 302
9892: PUSH
9893: LD_EXP 43
9897: PUSH
9898: LD_EXP 14
9902: IN
9903: AND
9904: PUSH
9905: LD_EXP 43
9909: PPUSH
9910: CALL_OW 255
9914: PUSH
9915: LD_INT 2
9917: EQUAL
9918: AND
9919: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9920: LD_EXP 40
9924: PPUSH
9925: CALL_OW 302
9929: PUSH
9930: LD_EXP 40
9934: PUSH
9935: LD_EXP 14
9939: IN
9940: AND
9941: PUSH
9942: LD_EXP 40
9946: PPUSH
9947: CALL_OW 255
9951: PUSH
9952: LD_INT 2
9954: EQUAL
9955: AND
9956: IFFALSE 9988
// begin Say ( Mike , DM-Med-5 ) ;
9958: LD_EXP 40
9962: PPUSH
9963: LD_STRING DM-Med-5
9965: PPUSH
9966: CALL_OW 88
// if hasKaia then
9970: LD_VAR 0 2
9974: IFFALSE 9988
// Say ( Kaia , DK-Med-6 ) ;
9976: LD_EXP 43
9980: PPUSH
9981: LD_STRING DK-Med-6
9983: PPUSH
9984: CALL_OW 88
// end ; if hasKaia then
9988: LD_VAR 0 2
9992: IFFALSE 10233
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9994: LD_INT 175
9996: PPUSH
9997: LD_INT 123
9999: PPUSH
10000: LD_INT 2
10002: PPUSH
10003: LD_INT 8
10005: NEG
10006: PPUSH
10007: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10011: LD_INT 175
10013: PPUSH
10014: LD_INT 123
10016: PPUSH
10017: LD_INT 2
10019: PPUSH
10020: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10024: LD_INT 175
10026: PPUSH
10027: LD_INT 123
10029: PPUSH
10030: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10034: LD_EXP 43
10038: PPUSH
10039: LD_STRING DK-Med-7
10041: PPUSH
10042: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10046: LD_EXP 43
10050: PPUSH
10051: LD_STRING DK-Med-8
10053: PPUSH
10054: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10058: LD_EXP 45
10062: PPUSH
10063: CALL_OW 302
10067: PUSH
10068: LD_EXP 45
10072: PUSH
10073: LD_EXP 14
10077: IN
10078: AND
10079: PUSH
10080: LD_EXP 45
10084: PPUSH
10085: CALL_OW 255
10089: PUSH
10090: LD_INT 2
10092: EQUAL
10093: AND
10094: IFFALSE 10152
// begin Say ( Markov , DMar-Med-9 ) ;
10096: LD_EXP 45
10100: PPUSH
10101: LD_STRING DMar-Med-9
10103: PPUSH
10104: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10108: LD_EXP 43
10112: PPUSH
10113: LD_STRING DK-Med-10
10115: PPUSH
10116: CALL_OW 88
// if hasGivi then
10120: LD_VAR 0 1
10124: IFFALSE 10140
// Say ( Kaia , DK-Med-11 ) else
10126: LD_EXP 43
10130: PPUSH
10131: LD_STRING DK-Med-11
10133: PPUSH
10134: CALL_OW 88
10138: GO 10152
// Say ( Kaia , DK-Med-a-11 ) ;
10140: LD_EXP 43
10144: PPUSH
10145: LD_STRING DK-Med-a-11
10147: PPUSH
10148: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10152: LD_EXP 42
10156: PPUSH
10157: CALL_OW 302
10161: PUSH
10162: LD_EXP 42
10166: PUSH
10167: LD_EXP 14
10171: IN
10172: AND
10173: PUSH
10174: LD_EXP 42
10178: PPUSH
10179: CALL_OW 255
10183: PUSH
10184: LD_INT 2
10186: EQUAL
10187: AND
10188: IFFALSE 10233
// begin Say ( Kamil , DKam-Med-12 ) ;
10190: LD_EXP 42
10194: PPUSH
10195: LD_STRING DKam-Med-12
10197: PPUSH
10198: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10202: LD_EXP 42
10206: PPUSH
10207: LD_STRING DKam-Med-13
10209: PPUSH
10210: CALL_OW 88
// if not hasExplosionCollected then
10214: LD_EXP 23
10218: NOT
10219: IFFALSE 10233
// Say ( Heike , DH-Med-d-14 ) ;
10221: LD_EXP 38
10225: PPUSH
10226: LD_STRING DH-Med-d-14
10228: PPUSH
10229: CALL_OW 88
// end ; end ; DialogueOff ;
10233: CALL_OW 7
// adminAreaDiscovered := true ;
10237: LD_ADDR_EXP 22
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
// laundryAllowed := true ;
10245: LD_ADDR_EXP 26
10249: PUSH
10250: LD_INT 1
10252: ST_TO_ADDR
// end ;
10253: PPOPN 2
10255: END
// every 0 0$1 trigger laundryAllowed do
10256: LD_EXP 26
10260: IFFALSE 10272
10262: GO 10264
10264: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10265: LD_STRING M1-laundry
10267: PPUSH
10268: CALL_OW 337
10272: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10273: LD_EXP 41
10277: NOT
10278: PUSH
10279: LD_EXP 48
10283: NOT
10284: AND
10285: PUSH
10286: LD_EXP 46
10290: PPUSH
10291: CALL_OW 302
10295: AND
10296: PUSH
10297: LD_EXP 46
10301: PUSH
10302: LD_EXP 14
10306: IN
10307: AND
10308: PUSH
10309: LD_EXP 46
10313: PPUSH
10314: CALL_OW 255
10318: PUSH
10319: LD_INT 2
10321: EQUAL
10322: AND
10323: PUSH
10324: LD_EXP 17
10328: NOT
10329: AND
10330: PUSH
10331: LD_EXP 30
10335: NOT
10336: AND
10337: IFFALSE 10493
10339: GO 10341
10341: DISABLE
// begin DialogueOn ;
10342: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10346: LD_INT 152
10348: PPUSH
10349: LD_INT 115
10351: PPUSH
10352: LD_INT 2
10354: PPUSH
10355: LD_INT 16
10357: NEG
10358: PPUSH
10359: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10363: LD_INT 152
10365: PPUSH
10366: LD_INT 115
10368: PPUSH
10369: LD_INT 2
10371: PPUSH
10372: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10376: LD_INT 152
10378: PPUSH
10379: LD_INT 115
10381: PPUSH
10382: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10386: LD_EXP 46
10390: PPUSH
10391: LD_STRING DO-Med-c-1
10393: PPUSH
10394: CALL_OW 88
// if not hasExplosionCollected then
10398: LD_EXP 23
10402: NOT
10403: IFFALSE 10419
// Say ( Heike , DH-Med-d-14 ) else
10405: LD_EXP 38
10409: PPUSH
10410: LD_STRING DH-Med-d-14
10412: PPUSH
10413: CALL_OW 88
10417: GO 10481
// begin Say ( Heike , DH-Med-c-2 ) ;
10419: LD_EXP 38
10423: PPUSH
10424: LD_STRING DH-Med-c-2
10426: PPUSH
10427: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10431: LD_EXP 43
10435: PPUSH
10436: CALL_OW 302
10440: PUSH
10441: LD_EXP 43
10445: PUSH
10446: LD_EXP 14
10450: IN
10451: AND
10452: PUSH
10453: LD_EXP 43
10457: PPUSH
10458: CALL_OW 255
10462: PUSH
10463: LD_INT 2
10465: EQUAL
10466: AND
10467: IFFALSE 10481
// Say ( Kaia , DK-Med-c-3 ) ;
10469: LD_EXP 43
10473: PPUSH
10474: LD_STRING DK-Med-c-3
10476: PPUSH
10477: CALL_OW 88
// end ; DialogueOff ;
10481: CALL_OW 7
// adminAreaDiscovered := true ;
10485: LD_ADDR_EXP 22
10489: PUSH
10490: LD_INT 1
10492: ST_TO_ADDR
// end ;
10493: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10494: LD_EXP 43
10498: PPUSH
10499: CALL_OW 256
10503: PUSH
10504: LD_INT 250
10506: LESS
10507: PUSH
10508: LD_EXP 43
10512: PUSH
10513: LD_EXP 14
10517: IN
10518: AND
10519: PUSH
10520: LD_EXP 17
10524: AND
10525: PUSH
10526: LD_EXP 24
10530: AND
10531: IFFALSE 10660
10533: GO 10535
10535: DISABLE
// begin DialogueOn ;
10536: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10540: LD_EXP 43
10544: PPUSH
10545: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10549: LD_EXP 43
10553: PPUSH
10554: LD_STRING DK-death-1
10556: PPUSH
10557: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10561: LD_EXP 38
10565: PPUSH
10566: LD_STRING DH-death-2
10568: PPUSH
10569: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10573: LD_EXP 43
10577: PPUSH
10578: LD_STRING DK-death-3
10580: PPUSH
10581: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10585: LD_EXP 43
10589: PPUSH
10590: LD_STRING DK-death-4
10592: PPUSH
10593: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10597: LD_EXP 43
10601: PPUSH
10602: LD_INT 8
10604: PPUSH
10605: CALL_OW 235
// ComStop ( Kaia ) ;
10609: LD_EXP 43
10613: PPUSH
10614: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
10618: LD_INT 8
10620: PPUSH
10621: LD_INT 2
10623: PPUSH
10624: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
10628: LD_ADDR_EXP 14
10632: PUSH
10633: LD_EXP 14
10637: PUSH
10638: LD_EXP 43
10642: DIFF
10643: ST_TO_ADDR
// DialogueOff ;
10644: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
10648: LD_EXP 40
10652: PPUSH
10653: LD_STRING DM-death-5
10655: PPUSH
10656: CALL_OW 88
// end ;
10660: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10661: LD_EXP 25
10665: NOT
10666: PUSH
10667: LD_EXP 30
10671: NOT
10672: AND
10673: PUSH
10674: LD_EXP 51
10678: PUSH
10679: LD_EXP 14
10683: IN
10684: NOT
10685: AND
10686: PUSH
10687: LD_INT 2
10689: PPUSH
10690: LD_EXP 51
10694: PPUSH
10695: CALL_OW 292
10699: AND
10700: PUSH
10701: LD_EXP 38
10705: PPUSH
10706: LD_EXP 51
10710: PPUSH
10711: CALL_OW 296
10715: PUSH
10716: LD_INT 6
10718: LESS
10719: AND
10720: PUSH
10721: LD_EXP 17
10725: NOT
10726: AND
10727: IFFALSE 10951
10729: GO 10731
10731: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
10732: LD_EXP 51
10736: PPUSH
10737: LD_EXP 38
10741: PPUSH
10742: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
10746: LD_EXP 38
10750: PPUSH
10751: LD_EXP 51
10755: PPUSH
10756: CALL_OW 119
// wait ( 0 0$0.3 ) ;
10760: LD_INT 10
10762: PPUSH
10763: CALL_OW 67
// DialogueOn ;
10767: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
10771: LD_EXP 51
10775: PPUSH
10776: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
10780: LD_EXP 38
10784: PPUSH
10785: LD_STRING DH-Deal-1
10787: PPUSH
10788: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
10792: LD_EXP 51
10796: PPUSH
10797: LD_STRING DJ-Deal-2
10799: PPUSH
10800: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
10804: LD_EXP 38
10808: PPUSH
10809: LD_STRING DH-Deal-3
10811: PPUSH
10812: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
10816: LD_EXP 51
10820: PPUSH
10821: LD_STRING DJ-Deal-4
10823: PPUSH
10824: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
10828: LD_EXP 51
10832: PPUSH
10833: LD_STRING DJ-Deal-5
10835: PPUSH
10836: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
10840: LD_EXP 51
10844: PPUSH
10845: LD_STRING DJ-Deal-6
10847: PPUSH
10848: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
10852: LD_EXP 51
10856: PPUSH
10857: LD_STRING DJ-Deal-7
10859: PPUSH
10860: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
10864: LD_EXP 38
10868: PPUSH
10869: LD_STRING DH-Deal-8
10871: PPUSH
10872: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
10876: LD_EXP 38
10880: PPUSH
10881: LD_STRING DH-Deal-9
10883: PPUSH
10884: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
10888: LD_EXP 51
10892: PPUSH
10893: LD_STRING DJ-Deal-10
10895: PPUSH
10896: CALL_OW 88
// DialogueOff ;
10900: CALL_OW 7
// contactWithAmerican := true ;
10904: LD_ADDR_EXP 25
10908: PUSH
10909: LD_INT 1
10911: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
10912: LD_STRING M1-american-out
10914: PPUSH
10915: CALL_OW 604
// SetSide ( Harris , 2 ) ;
10919: LD_EXP 51
10923: PPUSH
10924: LD_INT 2
10926: PPUSH
10927: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
10931: LD_ADDR_EXP 14
10935: PUSH
10936: LD_EXP 14
10940: PPUSH
10941: LD_EXP 51
10945: PPUSH
10946: CALL 64181 0 2
10950: ST_TO_ADDR
// end ;
10951: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10952: LD_EXP 25
10956: PUSH
10957: LD_EXP 30
10961: NOT
10962: AND
10963: PUSH
10964: LD_EXP 51
10968: PUSH
10969: LD_EXP 14
10973: IN
10974: NOT
10975: AND
10976: PUSH
10977: LD_INT 2
10979: PPUSH
10980: LD_EXP 51
10984: PPUSH
10985: CALL_OW 292
10989: AND
10990: PUSH
10991: LD_EXP 38
10995: PPUSH
10996: LD_EXP 51
11000: PPUSH
11001: CALL_OW 296
11005: PUSH
11006: LD_INT 6
11008: LESS
11009: AND
11010: PUSH
11011: LD_EXP 17
11015: NOT
11016: AND
11017: IFFALSE 11142
11019: GO 11021
11021: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11022: LD_EXP 51
11026: PPUSH
11027: LD_EXP 38
11031: PPUSH
11032: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11036: LD_EXP 38
11040: PPUSH
11041: LD_EXP 51
11045: PPUSH
11046: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11050: LD_INT 10
11052: PPUSH
11053: CALL_OW 67
// DialogueOn ;
11057: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11061: LD_EXP 51
11065: PPUSH
11066: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11070: LD_EXP 51
11074: PPUSH
11075: LD_STRING DJ-Escort-1
11077: PPUSH
11078: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11082: LD_EXP 38
11086: PPUSH
11087: LD_STRING DH-Escort-2
11089: PPUSH
11090: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11094: LD_EXP 51
11098: PPUSH
11099: LD_STRING DJ-Escort-3
11101: PPUSH
11102: CALL_OW 88
// DialogueOff ;
11106: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11110: LD_EXP 51
11114: PPUSH
11115: LD_INT 2
11117: PPUSH
11118: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11122: LD_ADDR_EXP 14
11126: PUSH
11127: LD_EXP 14
11131: PPUSH
11132: LD_EXP 51
11136: PPUSH
11137: CALL 64181 0 2
11141: ST_TO_ADDR
// end ;
11142: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11143: LD_EXP 25
11147: PUSH
11148: LD_EXP 30
11152: NOT
11153: AND
11154: PUSH
11155: LD_EXP 50
11159: PUSH
11160: LD_EXP 14
11164: DIFF
11165: PPUSH
11166: LD_INT 22
11168: PUSH
11169: LD_INT 4
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: LD_INT 120
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 101
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 72
11212: AND
11213: PUSH
11214: LD_EXP 17
11218: NOT
11219: AND
11220: IFFALSE 11435
11222: GO 11224
11224: DISABLE
11225: LD_INT 0
11227: PPUSH
// begin enable ;
11228: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11229: LD_ADDR_VAR 0 1
11233: PUSH
11234: LD_EXP 50
11238: PUSH
11239: LD_EXP 14
11243: DIFF
11244: PPUSH
11245: LD_INT 22
11247: PUSH
11248: LD_INT 4
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 91
11257: PUSH
11258: LD_EXP 38
11262: PUSH
11263: LD_INT 6
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 101
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: PPUSH
11286: CALL_OW 72
11290: PPUSH
11291: LD_EXP 38
11295: PPUSH
11296: CALL_OW 74
11300: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11301: LD_VAR 0 1
11305: PPUSH
11306: LD_EXP 38
11310: PPUSH
11311: CALL_OW 296
11315: PUSH
11316: LD_INT 6
11318: LESS
11319: IFFALSE 11435
// begin DialogueOn ;
11321: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11325: LD_VAR 0 1
11329: PPUSH
11330: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11334: LD_EXP 38
11338: PPUSH
11339: LD_STRING DH-USsol-1
11341: PPUSH
11342: CALL_OW 88
// if GetSex ( un ) = sex_male then
11346: LD_VAR 0 1
11350: PPUSH
11351: CALL_OW 258
11355: PUSH
11356: LD_INT 1
11358: EQUAL
11359: IFFALSE 11375
// Say ( un , DUSM-USsol-2 ) else
11361: LD_VAR 0 1
11365: PPUSH
11366: LD_STRING DUSM-USsol-2
11368: PPUSH
11369: CALL_OW 88
11373: GO 11387
// Say ( un , DUSF-USsol-2 ) ;
11375: LD_VAR 0 1
11379: PPUSH
11380: LD_STRING DUSF-USsol-2
11382: PPUSH
11383: CALL_OW 88
// DialogueOff ;
11387: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11391: LD_ADDR_EXP 14
11395: PUSH
11396: LD_EXP 14
11400: PPUSH
11401: LD_VAR 0 1
11405: PPUSH
11406: CALL 64181 0 2
11410: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11411: LD_VAR 0 1
11415: PPUSH
11416: LD_INT 1
11418: PPUSH
11419: CALL_OW 109
// SetSide ( un , 2 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 2
11430: PPUSH
11431: CALL_OW 235
// end ; end ;
11435: PPOPN 1
11437: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11438: LD_EXP 49
11442: PUSH
11443: LD_EXP 30
11447: NOT
11448: AND
11449: PUSH
11450: LD_EXP 49
11454: PUSH
11455: LD_EXP 14
11459: DIFF
11460: PPUSH
11461: LD_INT 3
11463: PUSH
11464: LD_INT 120
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 91
11480: PUSH
11481: LD_EXP 38
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 101
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: PPUSH
11509: CALL_OW 72
11513: AND
11514: PUSH
11515: LD_EXP 17
11519: NOT
11520: AND
11521: IFFALSE 11736
11523: GO 11525
11525: DISABLE
11526: LD_INT 0
11528: PPUSH
// begin enable ;
11529: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11530: LD_ADDR_VAR 0 1
11534: PUSH
11535: LD_EXP 49
11539: PUSH
11540: LD_EXP 14
11544: DIFF
11545: PPUSH
11546: LD_INT 22
11548: PUSH
11549: LD_INT 5
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 91
11558: PUSH
11559: LD_EXP 38
11563: PUSH
11564: LD_INT 6
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 101
11574: PUSH
11575: LD_INT 2
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 72
11591: PPUSH
11592: LD_EXP 38
11596: PPUSH
11597: CALL_OW 74
11601: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_EXP 38
11611: PPUSH
11612: CALL_OW 296
11616: PUSH
11617: LD_INT 6
11619: LESS
11620: IFFALSE 11736
// begin DialogueOn ;
11622: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11635: LD_EXP 38
11639: PPUSH
11640: LD_STRING DH-USsol-1
11642: PPUSH
11643: CALL_OW 88
// if GetSex ( un ) = sex_male then
11647: LD_VAR 0 1
11651: PPUSH
11652: CALL_OW 258
11656: PUSH
11657: LD_INT 1
11659: EQUAL
11660: IFFALSE 11676
// Say ( un , DArm-USsol-2 ) else
11662: LD_VAR 0 1
11666: PPUSH
11667: LD_STRING DArm-USsol-2
11669: PPUSH
11670: CALL_OW 88
11674: GO 11688
// Say ( un , DArf-USsol-3 ) ;
11676: LD_VAR 0 1
11680: PPUSH
11681: LD_STRING DArf-USsol-3
11683: PPUSH
11684: CALL_OW 88
// DialogueOff ;
11688: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11692: LD_ADDR_EXP 14
11696: PUSH
11697: LD_EXP 14
11701: PPUSH
11702: LD_VAR 0 1
11706: PPUSH
11707: CALL 64181 0 2
11711: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11712: LD_VAR 0 1
11716: PPUSH
11717: LD_INT 1
11719: PPUSH
11720: CALL_OW 109
// SetSide ( un , 2 ) ;
11724: LD_VAR 0 1
11728: PPUSH
11729: LD_INT 2
11731: PPUSH
11732: CALL_OW 235
// end ; end ;
11736: PPOPN 1
11738: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
11739: LD_EXP 50
11743: PPUSH
11744: LD_INT 101
11746: PUSH
11747: LD_INT 2
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: PPUSH
11754: CALL_OW 72
11758: PUSH
11759: LD_EXP 14
11763: PPUSH
11764: LD_INT 22
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 72
11778: PUSH
11779: LD_INT 5
11781: GREATER
11782: AND
11783: PUSH
11784: LD_EXP 10
11788: NOT
11789: AND
11790: PUSH
11791: LD_EXP 30
11795: NOT
11796: AND
11797: PUSH
11798: LD_EXP 25
11802: NOT
11803: AND
11804: PUSH
11805: LD_EXP 17
11809: NOT
11810: AND
11811: IFFALSE 11926
11813: GO 11815
11815: DISABLE
11816: LD_INT 0
11818: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: LD_EXP 50
11828: PPUSH
11829: LD_INT 22
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 101
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PPUSH
11853: CALL_OW 72
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: ST_TO_ADDR
// DialogueOn ;
11862: CALL_OW 6
// if GetSex ( un ) = sex_male then
11866: LD_VAR 0 1
11870: PPUSH
11871: CALL_OW 258
11875: PUSH
11876: LD_INT 1
11878: EQUAL
11879: IFFALSE 11895
// Say ( un , DUSm-USsol-a-2 ) else
11881: LD_VAR 0 1
11885: PPUSH
11886: LD_STRING DUSm-USsol-a-2
11888: PPUSH
11889: CALL_OW 88
11893: GO 11907
// Say ( un , DUSf-USsol-a-2 ) ;
11895: LD_VAR 0 1
11899: PPUSH
11900: LD_STRING DUSf-USsol-a-2
11902: PPUSH
11903: CALL_OW 88
// DialogueOff ;
11907: CALL_OW 7
// wait ( 0 0$2 ) ;
11911: LD_INT 70
11913: PPUSH
11914: CALL_OW 67
// isAlarm := true ;
11918: LD_ADDR_EXP 17
11922: PUSH
11923: LD_INT 1
11925: ST_TO_ADDR
// end ;
11926: PPOPN 1
11928: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
11929: LD_EXP 17
11933: NOT
11934: PUSH
11935: LD_EXP 39
11939: PPUSH
11940: CALL_OW 302
11944: AND
11945: PUSH
11946: LD_EXP 39
11950: PPUSH
11951: CALL_OW 255
11955: PUSH
11956: LD_INT 2
11958: EQUAL
11959: AND
11960: PUSH
11961: LD_EXP 26
11965: AND
11966: PUSH
11967: LD_EXP 28
11971: NOT
11972: AND
11973: PUSH
11974: LD_EXP 27
11978: NOT
11979: AND
11980: PUSH
11981: LD_EXP 30
11985: NOT
11986: AND
11987: PUSH
11988: LD_EXP 39
11992: PPUSH
11993: LD_INT 165
11995: PPUSH
11996: CALL 18479 0 2
12000: AND
12001: IFFALSE 12133
12003: GO 12005
12005: DISABLE
// begin enable ;
12006: ENABLE
// InGameOn ;
12007: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12011: LD_EXP 39
12015: PPUSH
12016: LD_INT 5
12018: PPUSH
12019: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12023: LD_INT 165
12025: PPUSH
12026: LD_INT 5
12028: PPUSH
12029: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12033: LD_EXP 39
12037: PPUSH
12038: LD_INT 165
12040: PPUSH
12041: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12045: LD_INT 35
12047: PPUSH
12048: CALL_OW 67
// until IsInUnit ( Givi ) ;
12052: LD_EXP 39
12056: PPUSH
12057: CALL_OW 310
12061: IFFALSE 12045
// case Query ( GiviInLaundry ) of 1 :
12063: LD_STRING GiviInLaundry
12065: PPUSH
12066: CALL_OW 97
12070: PUSH
12071: LD_INT 1
12073: DOUBLE
12074: EQUAL
12075: IFTRUE 12079
12077: GO 12086
12079: POP
// SpawnGiviAsRussian ; 2 :
12080: CALL 1818 0 0
12084: GO 12098
12086: LD_INT 2
12088: DOUBLE
12089: EQUAL
12090: IFTRUE 12094
12092: GO 12097
12094: POP
// ; end ;
12095: GO 12098
12097: POP
// ComExitBuilding ( Givi ) ;
12098: LD_EXP 39
12102: PPUSH
12103: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12107: LD_EXP 39
12111: PPUSH
12112: LD_INT 2
12114: PPUSH
12115: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12119: LD_INT 165
12121: PPUSH
12122: LD_INT 3
12124: PPUSH
12125: CALL_OW 235
// InGameOff ;
12129: CALL_OW 9
// end ;
12133: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12134: LD_EXP 17
12138: NOT
12139: PUSH
12140: LD_EXP 28
12144: AND
12145: PUSH
12146: LD_EXP 39
12150: PPUSH
12151: CALL_OW 255
12155: PUSH
12156: LD_INT 2
12158: EQUAL
12159: AND
12160: PUSH
12161: LD_EXP 39
12165: PPUSH
12166: CALL_OW 248
12170: PUSH
12171: LD_INT 3
12173: EQUAL
12174: AND
12175: PUSH
12176: LD_EXP 39
12180: PPUSH
12181: LD_INT 119
12183: PPUSH
12184: CALL 18479 0 2
12188: AND
12189: PUSH
12190: LD_EXP 30
12194: NOT
12195: AND
12196: IFFALSE 12420
12198: GO 12200
12200: DISABLE
// begin InGameOn ;
12201: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12205: LD_EXP 39
12209: PPUSH
12210: LD_INT 3
12212: PPUSH
12213: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12217: LD_EXP 39
12221: PPUSH
12222: LD_INT 119
12224: PPUSH
12225: CALL_OW 120
// wait ( 0 0$1 ) ;
12229: LD_INT 35
12231: PPUSH
12232: CALL_OW 67
// DialogueOn ;
12236: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12240: LD_EXP 39
12244: PPUSH
12245: LD_STRING DG-Captive-1
12247: PPUSH
12248: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12252: LD_EXP 57
12256: PPUSH
12257: LD_STRING DCom-Captive-2
12259: PPUSH
12260: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12264: LD_EXP 39
12268: PPUSH
12269: LD_STRING DG-Captive-3
12271: PPUSH
12272: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12276: LD_EXP 57
12280: PPUSH
12281: LD_STRING DCom-Captive-4
12283: PPUSH
12284: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12288: LD_EXP 57
12292: PPUSH
12293: CALL_OW 64
// DialogueOff ;
12297: CALL_OW 7
// InGameOff ;
12301: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12305: LD_EXP 39
12309: PPUSH
12310: LD_INT 2
12312: PPUSH
12313: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12317: LD_EXP 39
12321: PPUSH
12322: CALL_OW 122
// if Aviradze then
12326: LD_EXP 48
12330: IFFALSE 12373
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12332: LD_ADDR_EXP 14
12336: PUSH
12337: LD_EXP 14
12341: PPUSH
12342: LD_EXP 48
12346: PPUSH
12347: CALL 64181 0 2
12351: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12352: LD_EXP 48
12356: PPUSH
12357: LD_INT 2
12359: PPUSH
12360: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12364: LD_EXP 48
12368: PPUSH
12369: CALL_OW 122
// end ; if Ibrahim then
12373: LD_EXP 41
12377: IFFALSE 12420
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12379: LD_ADDR_EXP 14
12383: PUSH
12384: LD_EXP 14
12388: PPUSH
12389: LD_EXP 41
12393: PPUSH
12394: CALL 64181 0 2
12398: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12399: LD_EXP 41
12403: PPUSH
12404: LD_INT 2
12406: PPUSH
12407: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12411: LD_EXP 41
12415: PPUSH
12416: CALL_OW 122
// end ; end ;
12420: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12421: LD_EXP 17
12425: NOT
12426: PUSH
12427: LD_EXP 27
12431: AND
12432: PUSH
12433: LD_EXP 38
12437: PPUSH
12438: CALL_OW 248
12442: PUSH
12443: LD_INT 3
12445: EQUAL
12446: AND
12447: PUSH
12448: LD_EXP 38
12452: PPUSH
12453: LD_INT 119
12455: PPUSH
12456: CALL 18479 0 2
12460: AND
12461: PUSH
12462: LD_EXP 30
12466: NOT
12467: AND
12468: IFFALSE 12742
12470: GO 12472
12472: DISABLE
// begin InGameOn ;
12473: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12477: LD_EXP 38
12481: PPUSH
12482: LD_INT 3
12484: PPUSH
12485: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12489: LD_EXP 38
12493: PPUSH
12494: LD_INT 119
12496: PPUSH
12497: CALL_OW 120
// wait ( 0 0$1 ) ;
12501: LD_INT 35
12503: PPUSH
12504: CALL_OW 67
// DialogueOn ;
12508: CALL_OW 6
// if Aviradze and Ibrahim then
12512: LD_EXP 48
12516: PUSH
12517: LD_EXP 41
12521: AND
12522: IFFALSE 12538
// Say ( Heike , DH-Captive-a-1 ) else
12524: LD_EXP 38
12528: PPUSH
12529: LD_STRING DH-Captive-a-1
12531: PPUSH
12532: CALL_OW 88
12536: GO 12550
// Say ( Heike , DH-Captive-a-b-1 ) ;
12538: LD_EXP 38
12542: PPUSH
12543: LD_STRING DH-Captive-a-b-1
12545: PPUSH
12546: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12550: LD_EXP 57
12554: PPUSH
12555: LD_STRING DCom-Captive-a-2
12557: PPUSH
12558: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12562: LD_EXP 38
12566: PPUSH
12567: LD_STRING DH-Captive-a-3
12569: PPUSH
12570: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12574: LD_EXP 57
12578: PPUSH
12579: LD_STRING DCom-Captive-a-4
12581: PPUSH
12582: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12586: LD_EXP 38
12590: PPUSH
12591: LD_STRING DH-Captive-a-5
12593: PPUSH
12594: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-6 ) ;
12598: LD_EXP 57
12602: PPUSH
12603: LD_STRING DCom-Captive-a-6
12605: PPUSH
12606: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12610: LD_EXP 57
12614: PPUSH
12615: CALL_OW 64
// DialogueOff ;
12619: CALL_OW 7
// InGameOff ;
12623: CALL_OW 9
// SetSide ( Heike , 2 ) ;
12627: LD_EXP 38
12631: PPUSH
12632: LD_INT 2
12634: PPUSH
12635: CALL_OW 235
// ComExitBuilding ( Heike ) ;
12639: LD_EXP 38
12643: PPUSH
12644: CALL_OW 122
// if Aviradze then
12648: LD_EXP 48
12652: IFFALSE 12695
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12654: LD_ADDR_EXP 14
12658: PUSH
12659: LD_EXP 14
12663: PPUSH
12664: LD_EXP 48
12668: PPUSH
12669: CALL 64181 0 2
12673: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12674: LD_EXP 48
12678: PPUSH
12679: LD_INT 2
12681: PPUSH
12682: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12686: LD_EXP 48
12690: PPUSH
12691: CALL_OW 122
// end ; if Ibrahim then
12695: LD_EXP 41
12699: IFFALSE 12742
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12701: LD_ADDR_EXP 14
12705: PUSH
12706: LD_EXP 14
12710: PPUSH
12711: LD_EXP 41
12715: PPUSH
12716: CALL 64181 0 2
12720: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12721: LD_EXP 41
12725: PPUSH
12726: LD_INT 2
12728: PPUSH
12729: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12733: LD_EXP 41
12737: PPUSH
12738: CALL_OW 122
// end ; end ;
12742: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
12743: LD_INT 2
12745: PUSH
12746: LD_INT 25
12748: PUSH
12749: LD_INT 32
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: PUSH
12756: LD_INT 25
12758: PUSH
12759: LD_INT 34
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: PPUSH
12771: CALL_OW 69
12775: IFFALSE 12787
12777: GO 12779
12779: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
12780: LD_STRING M1-weapons-out
12782: PPUSH
12783: CALL_OW 604
12787: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
12788: LD_INT 2
12790: PPUSH
12791: LD_EXP 53
12795: PPUSH
12796: CALL_OW 292
12800: PUSH
12801: LD_EXP 38
12805: PPUSH
12806: LD_EXP 53
12810: PPUSH
12811: CALL_OW 296
12815: AND
12816: PUSH
12817: LD_EXP 25
12821: NOT
12822: AND
12823: PUSH
12824: LD_EXP 17
12828: NOT
12829: AND
12830: PUSH
12831: LD_EXP 30
12835: NOT
12836: AND
12837: IFFALSE 13636
12839: GO 12841
12841: DISABLE
12842: LD_INT 0
12844: PPUSH
12845: PPUSH
// begin DialogueOn ;
12846: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
12850: LD_EXP 53
12854: PPUSH
12855: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
12859: LD_EXP 53
12863: PPUSH
12864: LD_STRING DJy-Food-1
12866: PPUSH
12867: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
12871: LD_EXP 38
12875: PPUSH
12876: LD_STRING DH-Food-2
12878: PPUSH
12879: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
12883: LD_EXP 53
12887: PPUSH
12888: LD_STRING DJy-Food-3
12890: PPUSH
12891: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
12895: LD_EXP 53
12899: PPUSH
12900: LD_STRING DJy-Food-4
12902: PPUSH
12903: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
12907: LD_EXP 38
12911: PPUSH
12912: LD_STRING DH-Food-5
12914: PPUSH
12915: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
12919: LD_EXP 53
12923: PPUSH
12924: LD_STRING DJy-Food-6
12926: PPUSH
12927: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
12931: LD_EXP 53
12935: PPUSH
12936: LD_STRING DJy-Food-7
12938: PPUSH
12939: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
12943: LD_EXP 53
12947: PPUSH
12948: LD_STRING DJy-Food-8
12950: PPUSH
12951: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
12955: LD_EXP 38
12959: PPUSH
12960: LD_STRING DH-Food-9
12962: PPUSH
12963: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
12967: LD_EXP 53
12971: PPUSH
12972: LD_STRING DJy-Food-10
12974: PPUSH
12975: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
12979: LD_EXP 38
12983: PPUSH
12984: LD_STRING DH-Food-11
12986: PPUSH
12987: CALL_OW 88
// DialogueOff ;
12991: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12995: LD_STRING M3
12997: PPUSH
12998: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13002: LD_INT 5
13004: PPUSH
13005: LD_INT 215
13007: PPUSH
13008: LD_INT 117
13010: PPUSH
13011: LD_INT 0
13013: PPUSH
13014: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13018: LD_INT 215
13020: PPUSH
13021: LD_INT 118
13023: PPUSH
13024: LD_INT 2
13026: PPUSH
13027: LD_INT 6
13029: NEG
13030: PPUSH
13031: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13035: LD_INT 215
13037: PPUSH
13038: LD_INT 118
13040: PPUSH
13041: LD_INT 2
13043: PPUSH
13044: CALL_OW 331
// foodDelivered := false ;
13048: LD_ADDR_VAR 0 2
13052: PUSH
13053: LD_INT 0
13055: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13056: LD_INT 35
13058: PPUSH
13059: CALL_OW 67
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13063: LD_ADDR_VAR 0 1
13067: PUSH
13068: LD_EXP 14
13072: PUSH
13073: LD_EXP 38
13077: UNION
13078: PPUSH
13079: LD_INT 91
13081: PUSH
13082: LD_EXP 53
13086: PUSH
13087: LD_INT 6
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 25
13097: PUSH
13098: LD_INT 33
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PUSH
13114: FOR_IN
13115: IFFALSE 13365
// if Carry ( i ) then
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 281
13126: IFFALSE 13363
// begin DialogueOn ;
13128: CALL_OW 6
// foodDelivered := true ;
13132: LD_ADDR_VAR 0 2
13136: PUSH
13137: LD_INT 1
13139: ST_TO_ADDR
// case i of Heike :
13140: LD_VAR 0 1
13144: PUSH
13145: LD_EXP 38
13149: DOUBLE
13150: EQUAL
13151: IFTRUE 13155
13153: GO 13170
13155: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13156: LD_EXP 38
13160: PPUSH
13161: LD_STRING DH-Food-12
13163: PPUSH
13164: CALL_OW 88
13168: GO 13346
13170: LD_EXP 43
13174: DOUBLE
13175: EQUAL
13176: IFTRUE 13180
13178: GO 13195
13180: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13181: LD_EXP 43
13185: PPUSH
13186: LD_STRING DK-Food-a-12
13188: PPUSH
13189: CALL_OW 88
13193: GO 13346
13195: LD_EXP 45
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13220
13205: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13206: LD_EXP 45
13210: PPUSH
13211: LD_STRING DMar-Food-a-12
13213: PPUSH
13214: CALL_OW 88
13218: GO 13346
13220: LD_EXP 39
13224: DOUBLE
13225: EQUAL
13226: IFTRUE 13230
13228: GO 13245
13230: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13231: LD_EXP 39
13235: PPUSH
13236: LD_STRING DG-Food-a-14
13238: PPUSH
13239: CALL_OW 88
13243: GO 13346
13245: LD_EXP 40
13249: DOUBLE
13250: EQUAL
13251: IFTRUE 13255
13253: GO 13270
13255: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13256: LD_EXP 40
13260: PPUSH
13261: LD_STRING DM-Food-a-15
13263: PPUSH
13264: CALL_OW 88
13268: GO 13346
13270: LD_EXP 42
13274: DOUBLE
13275: EQUAL
13276: IFTRUE 13280
13278: GO 13295
13280: POP
// Say ( Kamil , DKam-Food-a-16 ) ; Sophia :
13281: LD_EXP 42
13285: PPUSH
13286: LD_STRING DKam-Food-a-16
13288: PPUSH
13289: CALL_OW 88
13293: GO 13346
13295: LD_EXP 44
13299: DOUBLE
13300: EQUAL
13301: IFTRUE 13305
13303: GO 13320
13305: POP
// Say ( Sophia , DS-Food-a-17 ) ; Kurt :
13306: LD_EXP 44
13310: PPUSH
13311: LD_STRING DS-Food-a-17
13313: PPUSH
13314: CALL_OW 88
13318: GO 13346
13320: LD_EXP 47
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13345
13330: POP
// Say ( Kurt , DKs-Food-a-18 ) ; end ;
13331: LD_EXP 47
13335: PPUSH
13336: LD_STRING DKs-Food-a-18
13338: PPUSH
13339: CALL_OW 88
13343: GO 13346
13345: POP
// SetCargo ( i , mat_cans , 0 ) ;
13346: LD_VAR 0 1
13350: PPUSH
13351: LD_INT 1
13353: PPUSH
13354: LD_INT 0
13356: PPUSH
13357: CALL_OW 290
// break ;
13361: GO 13365
// end ;
13363: GO 13114
13365: POP
13366: POP
// until foodDelivered ;
13367: LD_VAR 0 2
13371: IFFALSE 13056
// givenFood := true ;
13373: LD_ADDR_EXP 33
13377: PUSH
13378: LD_INT 1
13380: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13381: LD_EXP 53
13385: PPUSH
13386: LD_STRING DJy-Food-13
13388: PPUSH
13389: CALL_OW 88
// hasVirus := true ;
13393: LD_ADDR_EXP 31
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// if not americanContact then
13401: LD_EXP 10
13405: NOT
13406: IFFALSE 13456
// begin Say ( Heike , DH-Food-14 ) ;
13408: LD_EXP 38
13412: PPUSH
13413: LD_STRING DH-Food-14
13415: PPUSH
13416: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13420: LD_EXP 53
13424: PPUSH
13425: LD_STRING DJy-Food-15
13427: PPUSH
13428: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13432: LD_EXP 53
13436: PPUSH
13437: LD_STRING DJy-Food-16
13439: PPUSH
13440: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13444: LD_EXP 53
13448: PPUSH
13449: LD_STRING DJy-Food-17
13451: PPUSH
13452: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13456: LD_STRING M3-out
13458: PPUSH
13459: CALL_OW 337
// DialogueOff ;
13463: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13467: LD_EXP 53
13471: PPUSH
13472: LD_INT 1
13474: PPUSH
13475: LD_INT 10
13477: PPUSH
13478: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13482: LD_EXP 53
13486: PPUSH
13487: LD_INT 95
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13497: LD_INT 35
13499: PPUSH
13500: CALL_OW 67
// if not HasTask ( Jerry ) then
13504: LD_EXP 53
13508: PPUSH
13509: CALL_OW 314
13513: NOT
13514: IFFALSE 13531
// ComMoveXY ( Jerry , 95 , 17 ) ;
13516: LD_EXP 53
13520: PPUSH
13521: LD_INT 95
13523: PPUSH
13524: LD_INT 17
13526: PPUSH
13527: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13531: LD_EXP 53
13535: PPUSH
13536: LD_INT 95
13538: PPUSH
13539: LD_INT 17
13541: PPUSH
13542: CALL_OW 307
13546: IFFALSE 13497
// SetCargo ( Jerry , mat_cans , 0 ) ;
13548: LD_EXP 53
13552: PPUSH
13553: LD_INT 1
13555: PPUSH
13556: LD_INT 0
13558: PPUSH
13559: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13563: LD_ADDR_EXP 50
13567: PUSH
13568: LD_EXP 50
13572: PPUSH
13573: LD_EXP 53
13577: PPUSH
13578: CALL 64181 0 2
13582: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_INT 4
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 23
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PPUSH
13612: CALL_OW 69
13616: PUSH
13617: FOR_IN
13618: IFFALSE 13634
// SetLives ( i , 1000 ) ;
13620: LD_VAR 0 1
13624: PPUSH
13625: LD_INT 1000
13627: PPUSH
13628: CALL_OW 234
13632: GO 13617
13634: POP
13635: POP
// end ;
13636: PPOPN 2
13638: END
// every 0 0$2 trigger hasExplosions marked gameStartEvent do var un , tmp ;
13639: LD_EXP 6
13643: IFFALSE 14074
13645: GO 13647
13647: DISABLE
13648: LD_INT 0
13650: PPUSH
13651: PPUSH
// begin tmp := [ ] ;
13652: LD_ADDR_VAR 0 2
13656: PUSH
13657: EMPTY
13658: ST_TO_ADDR
// uc_side := 3 ;
13659: LD_ADDR_OWVAR 20
13663: PUSH
13664: LD_INT 3
13666: ST_TO_ADDR
// uc_nation := 3 ;
13667: LD_ADDR_OWVAR 21
13671: PUSH
13672: LD_INT 3
13674: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
13675: LD_INT 1
13677: PPUSH
13678: LD_INT 8
13680: PPUSH
13681: CALL_OW 381
// un := CreateHuman ;
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: CALL_OW 44
13694: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
13695: LD_VAR 0 1
13699: PPUSH
13700: LD_INT 173
13702: PPUSH
13703: LD_INT 104
13705: PPUSH
13706: LD_INT 0
13708: PPUSH
13709: CALL_OW 48
// tmp := Join ( tmp , un ) ;
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: LD_VAR 0 2
13722: PPUSH
13723: LD_VAR 0 1
13727: PPUSH
13728: CALL 64181 0 2
13732: ST_TO_ADDR
// un := CreateHuman ;
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: CALL_OW 44
13742: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
13743: LD_VAR 0 1
13747: PPUSH
13748: LD_INT 73
13750: PPUSH
13751: CALL_OW 52
// tmp := Join ( tmp , un ) ;
13755: LD_ADDR_VAR 0 2
13759: PUSH
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_VAR 0 1
13769: PPUSH
13770: CALL 64181 0 2
13774: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13775: LD_INT 35
13777: PPUSH
13778: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
13782: LD_EXP 43
13786: PPUSH
13787: CALL_OW 255
13791: PUSH
13792: LD_INT 2
13794: EQUAL
13795: PUSH
13796: LD_EXP 43
13800: PPUSH
13801: LD_INT 73
13803: PPUSH
13804: CALL_OW 296
13808: PUSH
13809: LD_INT 8
13811: LESS
13812: AND
13813: PUSH
13814: LD_VAR 0 2
13818: PPUSH
13819: LD_INT 101
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PPUSH
13829: CALL_OW 72
13833: AND
13834: IFFALSE 13775
// InGameOn ;
13836: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
13840: LD_INT 73
13842: PPUSH
13843: CALL_OW 250
13847: PPUSH
13848: LD_INT 73
13850: PPUSH
13851: CALL_OW 251
13855: PPUSH
13856: LD_INT 2
13858: PPUSH
13859: LD_INT 9
13861: NEG
13862: PPUSH
13863: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
13867: LD_INT 73
13869: PPUSH
13870: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
13874: LD_EXP 43
13878: PPUSH
13879: LD_INT 73
13881: PPUSH
13882: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
13886: LD_EXP 43
13890: PPUSH
13891: LD_STRING DK-Plastic-1
13893: PPUSH
13894: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
13898: LD_EXP 43
13902: PPUSH
13903: LD_STRING DK-Plastic-2
13905: PPUSH
13906: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
13910: LD_EXP 43
13914: PPUSH
13915: LD_INT 73
13917: PPUSH
13918: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13922: LD_INT 35
13924: PPUSH
13925: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
13929: LD_EXP 43
13933: PPUSH
13934: LD_INT 73
13936: PPUSH
13937: CALL_OW 296
13941: PUSH
13942: LD_INT 6
13944: LESS
13945: IFFALSE 13922
// ComHold ( Kaia ) ;
13947: LD_EXP 43
13951: PPUSH
13952: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
13956: LD_VAR 0 2
13960: PUSH
13961: LD_INT 1
13963: ARRAY
13964: PPUSH
13965: LD_STRING DRum-Plastic-3
13967: PPUSH
13968: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
13972: LD_VAR 0 2
13976: PUSH
13977: LD_INT 2
13979: ARRAY
13980: PPUSH
13981: LD_STRING DRum2-Plastic-4
13983: PPUSH
13984: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
13988: LD_VAR 0 2
13992: PUSH
13993: LD_INT 1
13995: ARRAY
13996: PPUSH
13997: LD_STRING DRum-Plastic-5
13999: PPUSH
14000: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14004: LD_VAR 0 2
14008: PUSH
14009: LD_INT 2
14011: ARRAY
14012: PPUSH
14013: LD_STRING DRum2-Plastic-6
14015: PPUSH
14016: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14020: LD_EXP 43
14024: PPUSH
14025: LD_STRING DK-Plastic-7
14027: PPUSH
14028: CALL_OW 88
// InGameOff ;
14032: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14036: LD_INT 73
14038: PPUSH
14039: CALL_OW 250
14043: PPUSH
14044: LD_INT 73
14046: PPUSH
14047: CALL_OW 251
14051: PPUSH
14052: LD_INT 2
14054: PPUSH
14055: CALL_OW 331
// explosionsTakenByRussians := true ;
14059: LD_ADDR_EXP 21
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14067: LD_STRING ExplosivesInfo
14069: PPUSH
14070: CALL_OW 97
// end ;
14074: PPOPN 2
14076: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14077: LD_EXP 21
14081: PUSH
14082: LD_EXP 43
14086: PPUSH
14087: CALL_OW 255
14091: PUSH
14092: LD_INT 2
14094: EQUAL
14095: AND
14096: PUSH
14097: LD_EXP 43
14101: PPUSH
14102: LD_INT 61
14104: PPUSH
14105: CALL 18479 0 2
14109: AND
14110: PUSH
14111: LD_EXP 17
14115: NOT
14116: AND
14117: PUSH
14118: LD_EXP 30
14122: NOT
14123: AND
14124: IFFALSE 14280
14126: GO 14128
14128: DISABLE
// begin InGameOn ;
14129: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14133: LD_INT 61
14135: PPUSH
14136: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14140: LD_EXP 43
14144: PPUSH
14145: LD_INT 3
14147: PPUSH
14148: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14152: LD_EXP 43
14156: PPUSH
14157: LD_INT 61
14159: PPUSH
14160: CALL_OW 120
// wait ( 0 0$2 ) ;
14164: LD_INT 70
14166: PPUSH
14167: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14171: LD_EXP 43
14175: PPUSH
14176: LD_STRING DK-Plastic-8
14178: PPUSH
14179: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14183: LD_EXP 59
14187: PUSH
14188: LD_INT 1
14190: ARRAY
14191: PPUSH
14192: LD_STRING DRuMch-Plastic-9
14194: PPUSH
14195: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14199: LD_EXP 43
14203: PPUSH
14204: LD_STRING DK-Plastic-10
14206: PPUSH
14207: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14211: LD_EXP 59
14215: PUSH
14216: LD_INT 1
14218: ARRAY
14219: PPUSH
14220: LD_STRING DRuMch-Plastic-a-11
14222: PPUSH
14223: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14227: LD_EXP 43
14231: PPUSH
14232: LD_STRING DK-Plastic-a-12
14234: PPUSH
14235: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14239: LD_EXP 59
14243: PUSH
14244: LD_INT 1
14246: ARRAY
14247: PPUSH
14248: LD_STRING DRuMch-Plastic-a-13
14250: PPUSH
14251: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14255: LD_EXP 43
14259: PPUSH
14260: LD_INT 2
14262: PPUSH
14263: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14267: LD_EXP 43
14271: PPUSH
14272: CALL_OW 122
// InGameOff ;
14276: CALL_OW 9
// end ;
14280: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14281: LD_EXP 21
14285: PUSH
14286: LD_EXP 43
14290: PPUSH
14291: CALL_OW 255
14295: PUSH
14296: LD_INT 2
14298: EQUAL
14299: AND
14300: PUSH
14301: LD_EXP 43
14305: PPUSH
14306: LD_INT 196
14308: PPUSH
14309: CALL 18479 0 2
14313: AND
14314: PUSH
14315: LD_EXP 17
14319: NOT
14320: AND
14321: PUSH
14322: LD_EXP 30
14326: NOT
14327: AND
14328: IFFALSE 14660
14330: GO 14332
14332: DISABLE
// begin InGameOn ;
14333: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14337: LD_INT 196
14339: PPUSH
14340: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14344: LD_EXP 43
14348: PPUSH
14349: LD_INT 3
14351: PPUSH
14352: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14356: LD_EXP 43
14360: PPUSH
14361: LD_INT 196
14363: PPUSH
14364: CALL_OW 120
// wait ( 0 0$2 ) ;
14368: LD_INT 70
14370: PPUSH
14371: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14375: LD_EXP 43
14379: PPUSH
14380: LD_STRING DK-Plastic-8
14382: PPUSH
14383: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14387: LD_EXP 60
14391: PUSH
14392: LD_INT 1
14394: ARRAY
14395: PPUSH
14396: LD_STRING DRuMch-Plastic-9
14398: PPUSH
14399: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14403: LD_EXP 43
14407: PPUSH
14408: LD_STRING DK-Plastic-10
14410: PPUSH
14411: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14415: LD_EXP 60
14419: PUSH
14420: LD_INT 1
14422: ARRAY
14423: PPUSH
14424: LD_STRING DRuMch-Plastic-11
14426: PPUSH
14427: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14431: LD_EXP 43
14435: PPUSH
14436: LD_STRING DK-Plastic-12
14438: PPUSH
14439: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14443: LD_EXP 43
14447: PPUSH
14448: LD_STRING DK-Plastic-13
14450: PPUSH
14451: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14455: LD_EXP 60
14459: PUSH
14460: LD_INT 1
14462: ARRAY
14463: PPUSH
14464: LD_STRING DRuMch-Plastic-14
14466: PPUSH
14467: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14471: LD_EXP 61
14475: PPUSH
14476: LD_INT 167
14478: PPUSH
14479: LD_INT 34
14481: PPUSH
14482: LD_INT 3
14484: PPUSH
14485: LD_INT 0
14487: PPUSH
14488: CALL 66321 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14492: LD_EXP 61
14496: PPUSH
14497: LD_INT 196
14499: PPUSH
14500: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14504: LD_INT 35
14506: PPUSH
14507: CALL_OW 67
// if not HasTask ( Stiopa ) then
14511: LD_EXP 61
14515: PPUSH
14516: CALL_OW 314
14520: NOT
14521: IFFALSE 14535
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14523: LD_EXP 61
14527: PPUSH
14528: LD_INT 196
14530: PPUSH
14531: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14535: LD_EXP 61
14539: PPUSH
14540: CALL_OW 310
14544: IFFALSE 14504
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14546: LD_EXP 61
14550: PPUSH
14551: LD_STRING DSpn-Plastic-15
14553: PPUSH
14554: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14558: LD_EXP 62
14562: PPUSH
14563: LD_STRING DLr-Plastic-16
14565: PPUSH
14566: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14570: LD_EXP 43
14574: PPUSH
14575: LD_STRING DK-Plastic-17
14577: PPUSH
14578: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14582: LD_INT 10
14584: PPUSH
14585: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14589: LD_EXP 43
14593: PPUSH
14594: LD_INT 2
14596: PPUSH
14597: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14601: LD_EXP 43
14605: PPUSH
14606: CALL_OW 122
// InGameOff ;
14610: CALL_OW 9
// explosionsTakenByRussians := false ;
14614: LD_ADDR_EXP 21
14618: PUSH
14619: LD_INT 0
14621: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14622: LD_INT 170
14624: PPUSH
14625: LD_INT 28
14627: PPUSH
14628: LD_INT 2
14630: PPUSH
14631: LD_INT 6
14633: NEG
14634: PPUSH
14635: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14639: LD_INT 170
14641: PPUSH
14642: LD_INT 28
14644: PPUSH
14645: LD_INT 2
14647: PPUSH
14648: CALL_OW 331
// knowWhereExplosivesAre := true ;
14652: LD_ADDR_EXP 34
14656: PUSH
14657: LD_INT 1
14659: ST_TO_ADDR
// end ;
14660: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
14661: LD_EXP 34
14665: PUSH
14666: LD_EXP 43
14670: PPUSH
14671: CALL_OW 255
14675: PUSH
14676: LD_INT 2
14678: EQUAL
14679: AND
14680: PUSH
14681: LD_EXP 43
14685: PPUSH
14686: LD_INT 195
14688: PPUSH
14689: CALL 18479 0 2
14693: AND
14694: PUSH
14695: LD_EXP 17
14699: NOT
14700: AND
14701: PUSH
14702: LD_EXP 30
14706: NOT
14707: AND
14708: IFFALSE 14807
14710: GO 14712
14712: DISABLE
// begin InGameOn ;
14713: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
14717: LD_EXP 43
14721: PPUSH
14722: LD_INT 3
14724: PPUSH
14725: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
14729: LD_EXP 43
14733: PPUSH
14734: LD_INT 195
14736: PPUSH
14737: CALL_OW 120
// wait ( 0 0$1 ) ;
14741: LD_INT 35
14743: PPUSH
14744: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
14748: LD_EXP 43
14752: PPUSH
14753: LD_STRING DK-Plastic-18
14755: PPUSH
14756: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
14760: LD_STRING ExplosivesInfoUsage
14762: PPUSH
14763: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
14767: LD_EXP 43
14771: PPUSH
14772: LD_INT 2
14774: PPUSH
14775: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14779: LD_EXP 43
14783: PPUSH
14784: CALL_OW 122
// InGameOff ;
14788: CALL_OW 9
// hasExplosionCollected := true ;
14792: LD_ADDR_EXP 23
14796: PUSH
14797: LD_INT 1
14799: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
14800: LD_STRING M1-explosive-out
14802: PPUSH
14803: CALL_OW 337
// end ;
14807: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
14808: LD_EXP 23
14812: PUSH
14813: LD_EXP 17
14817: NOT
14818: AND
14819: PUSH
14820: LD_EXP 30
14824: NOT
14825: AND
14826: IFFALSE 15001
14828: GO 14830
14830: DISABLE
14831: LD_INT 0
14833: PPUSH
14834: PPUSH
// begin for i in importantBuildingsList do
14835: LD_ADDR_VAR 0 1
14839: PUSH
14840: LD_EXP 35
14844: PUSH
14845: FOR_IN
14846: IFFALSE 14862
// MarkBuilding ( i , true ) ;
14848: LD_VAR 0 1
14852: PPUSH
14853: LD_INT 1
14855: PPUSH
14856: CALL 18853 0 2
14860: GO 14845
14862: POP
14863: POP
// repeat wait ( 0 0$1 ) ;
14864: LD_INT 35
14866: PPUSH
14867: CALL_OW 67
// for i in importantBuildingsList do
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_EXP 35
14880: PUSH
14881: FOR_IN
14882: IFFALSE 14992
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
14884: LD_EXP 38
14888: PUSH
14889: LD_EXP 14
14893: UNION
14894: PPUSH
14895: LD_INT 22
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PUSH
14905: LD_INT 21
14907: PUSH
14908: LD_INT 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 91
14917: PUSH
14918: LD_VAR 0 1
14922: PUSH
14923: LD_INT 6
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: PPUSH
14936: CALL_OW 72
14940: IFFALSE 14990
// begin CenterNowOnUnits ( i ) ;
14942: LD_VAR 0 1
14946: PPUSH
14947: CALL_OW 87
// PlaceExplosives ( i ) ;
14951: LD_VAR 0 1
14955: PPUSH
14956: CALL 18750 0 1
// MarkBuilding ( i , false ) ;
14960: LD_VAR 0 1
14964: PPUSH
14965: LD_INT 0
14967: PPUSH
14968: CALL 18853 0 2
// importantBuildingsList := importantBuildingsList diff i ;
14972: LD_ADDR_EXP 35
14976: PUSH
14977: LD_EXP 35
14981: PUSH
14982: LD_VAR 0 1
14986: DIFF
14987: ST_TO_ADDR
// continue ;
14988: GO 14881
// end ; end ;
14990: GO 14881
14992: POP
14993: POP
// until not importantBuildingsList ;
14994: LD_EXP 35
14998: NOT
14999: IFFALSE 14864
// end ;
15001: PPOPN 2
15003: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15004: LD_EXP 14
15008: PPUSH
15009: LD_INT 22
15011: PUSH
15012: LD_INT 2
15014: PUSH
15015: EMPTY
15016: LIST
15017: LIST
15018: PUSH
15019: LD_INT 95
15021: PUSH
15022: LD_INT 23
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PPUSH
15033: CALL_OW 72
15037: PUSH
15038: LD_EXP 38
15042: PPUSH
15043: CALL_OW 302
15047: AND
15048: PUSH
15049: LD_EXP 30
15053: NOT
15054: AND
15055: IFFALSE 15083
15057: GO 15059
15059: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15060: LD_EXP 38
15064: PPUSH
15065: LD_STRING DH-End-1
15067: PPUSH
15068: CALL_OW 88
// if not activeExplosives then
15072: LD_EXP 36
15076: NOT
15077: IFFALSE 15083
// Explode ;
15079: CALL 21337 0 0
// end ;
15083: END
// function SayHEmpty ( ) ; begin
15084: LD_INT 0
15086: PPUSH
// case rand ( 1 , 3 ) of 1 :
15087: LD_INT 1
15089: PPUSH
15090: LD_INT 3
15092: PPUSH
15093: CALL_OW 12
15097: PUSH
15098: LD_INT 1
15100: DOUBLE
15101: EQUAL
15102: IFTRUE 15106
15104: GO 15121
15106: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15107: LD_EXP 38
15111: PPUSH
15112: LD_STRING DH-Empty-1
15114: PPUSH
15115: CALL_OW 88
15119: GO 15168
15121: LD_INT 2
15123: DOUBLE
15124: EQUAL
15125: IFTRUE 15129
15127: GO 15144
15129: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15130: LD_EXP 38
15134: PPUSH
15135: LD_STRING DH-Empty-2
15137: PPUSH
15138: CALL_OW 88
15142: GO 15168
15144: LD_INT 3
15146: DOUBLE
15147: EQUAL
15148: IFTRUE 15152
15150: GO 15167
15152: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15153: LD_EXP 38
15157: PPUSH
15158: LD_STRING DH-Empty-3
15160: PPUSH
15161: CALL_OW 88
15165: GO 15168
15167: POP
// end ;
15168: LD_VAR 0 1
15172: RET
// function SayHVisited ( ) ; begin
15173: LD_INT 0
15175: PPUSH
// case rand ( 1 , 3 ) of 1 :
15176: LD_INT 1
15178: PPUSH
15179: LD_INT 3
15181: PPUSH
15182: CALL_OW 12
15186: PUSH
15187: LD_INT 1
15189: DOUBLE
15190: EQUAL
15191: IFTRUE 15195
15193: GO 15210
15195: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15196: LD_EXP 38
15200: PPUSH
15201: LD_STRING DH-Visited-1
15203: PPUSH
15204: CALL_OW 88
15208: GO 15257
15210: LD_INT 2
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15233
15218: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15219: LD_EXP 38
15223: PPUSH
15224: LD_STRING DH-Visited-2
15226: PPUSH
15227: CALL_OW 88
15231: GO 15257
15233: LD_INT 3
15235: DOUBLE
15236: EQUAL
15237: IFTRUE 15241
15239: GO 15256
15241: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15242: LD_EXP 38
15246: PPUSH
15247: LD_STRING DH-Visited-3
15249: PPUSH
15250: CALL_OW 88
15254: GO 15257
15256: POP
// end ;
15257: LD_VAR 0 1
15261: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15262: LD_EXP 17
15266: NOT
15267: PUSH
15268: LD_EXP 15
15272: AND
15273: PUSH
15274: LD_EXP 38
15278: PPUSH
15279: CALL_OW 255
15283: PUSH
15284: LD_INT 2
15286: EQUAL
15287: AND
15288: PUSH
15289: LD_EXP 38
15293: PPUSH
15294: CALL_OW 302
15298: AND
15299: PUSH
15300: LD_EXP 38
15304: PPUSH
15305: CALL_OW 316
15309: AND
15310: PUSH
15311: LD_EXP 30
15315: NOT
15316: AND
15317: IFFALSE 15383
15319: GO 15321
15321: DISABLE
15322: LD_INT 0
15324: PPUSH
// begin enable ;
15325: ENABLE
// for i in entranceAllowedList do
15326: LD_ADDR_VAR 0 1
15330: PUSH
15331: LD_EXP 15
15335: PUSH
15336: FOR_IN
15337: IFFALSE 15381
// if InEntrance ( Heike , i ) then
15339: LD_EXP 38
15343: PPUSH
15344: LD_VAR 0 1
15348: PPUSH
15349: CALL 18479 0 2
15353: IFFALSE 15379
// begin disable ( entranceEvent ) ;
15355: LD_INT 1
15357: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL 15386 0 1
// wait ( 0 0$3 ) ;
15367: LD_INT 105
15369: PPUSH
15370: CALL_OW 67
// enable ( entranceEvent ) ;
15374: LD_INT 1
15376: ENABLE_MARKED
// break ;
15377: GO 15381
// end ;
15379: GO 15336
15381: POP
15382: POP
// end ;
15383: PPOPN 1
15385: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
15386: LD_INT 0
15388: PPUSH
15389: PPUSH
// if not building then
15390: LD_VAR 0 1
15394: NOT
15395: IFFALSE 15399
// exit ;
15397: GO 17976
// if building in entranceVisitedList then
15399: LD_VAR 0 1
15403: PUSH
15404: LD_EXP 16
15408: IN
15409: IFFALSE 15417
// begin SayHVisited ( ) ;
15411: CALL 15173 0 0
// exit ;
15415: GO 17976
// end ; case Query ( EnterBuilding ) of 1 :
15417: LD_STRING EnterBuilding
15419: PPUSH
15420: CALL_OW 97
15424: PUSH
15425: LD_INT 1
15427: DOUBLE
15428: EQUAL
15429: IFTRUE 15433
15431: GO 15436
15433: POP
// ; 2 :
15434: GO 15450
15436: LD_INT 2
15438: DOUBLE
15439: EQUAL
15440: IFTRUE 15444
15442: GO 15449
15444: POP
// exit ; end ;
15445: GO 17976
15447: GO 15450
15449: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15450: LD_ADDR_EXP 16
15454: PUSH
15455: LD_EXP 16
15459: PPUSH
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL 64181 0 2
15469: ST_TO_ADDR
// InGameOn ;
15470: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15474: LD_EXP 38
15478: PPUSH
15479: LD_INT 5
15481: PPUSH
15482: CALL_OW 235
// SetSide ( building , 5 ) ;
15486: LD_VAR 0 1
15490: PPUSH
15491: LD_INT 5
15493: PPUSH
15494: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15498: LD_EXP 38
15502: PPUSH
15503: LD_VAR 0 1
15507: PPUSH
15508: CALL_OW 120
// wait ( 0 0$3 ) ;
15512: LD_INT 105
15514: PPUSH
15515: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15519: LD_ADDR_VAR 0 3
15523: PUSH
15524: LD_INT 165
15526: PUSH
15527: LD_INT 106
15529: PUSH
15530: LD_INT 135
15532: PUSH
15533: LD_INT 162
15535: PUSH
15536: LD_INT 61
15538: PUSH
15539: LD_INT 109
15541: PUSH
15542: LD_INT 169
15544: PUSH
15545: LD_INT 13
15547: PUSH
15548: LD_INT 147
15550: PUSH
15551: LD_INT 137
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: ST_TO_ADDR
// if not building in tmp then
15566: LD_VAR 0 1
15570: PUSH
15571: LD_VAR 0 3
15575: IN
15576: NOT
15577: IFFALSE 15585
// SayHEmpty ( ) else
15579: CALL 15084 0 0
15583: GO 17939
// case building of laundry :
15585: LD_VAR 0 1
15589: PUSH
15590: LD_INT 165
15592: DOUBLE
15593: EQUAL
15594: IFTRUE 15598
15596: GO 15702
15598: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15599: LD_EXP 26
15603: PUSH
15604: LD_EXP 27
15608: NOT
15609: AND
15610: PUSH
15611: LD_EXP 28
15615: NOT
15616: AND
15617: IFFALSE 15672
// begin case Query ( HeikeInLaundry ) of 1 :
15619: LD_STRING HeikeInLaundry
15621: PPUSH
15622: CALL_OW 97
15626: PUSH
15627: LD_INT 1
15629: DOUBLE
15630: EQUAL
15631: IFTRUE 15635
15633: GO 15642
15635: POP
// SpawnHeikeAsRussian ; 2 :
15636: CALL 1717 0 0
15640: GO 15670
15642: LD_INT 2
15644: DOUBLE
15645: EQUAL
15646: IFTRUE 15650
15648: GO 15669
15650: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
15651: LD_ADDR_EXP 16
15655: PUSH
15656: LD_EXP 16
15660: PUSH
15661: LD_VAR 0 1
15665: DIFF
15666: ST_TO_ADDR
15667: GO 15670
15669: POP
// end else
15670: GO 15700
// begin entranceVisitedList := entranceVisitedList diff building ;
15672: LD_ADDR_EXP 16
15676: PUSH
15677: LD_EXP 16
15681: PUSH
15682: LD_VAR 0 1
15686: DIFF
15687: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
15688: LD_EXP 38
15692: PPUSH
15693: LD_STRING DH-Locked
15695: PPUSH
15696: CALL_OW 88
// end ; end ; dougBar :
15700: GO 17939
15702: LD_INT 106
15704: DOUBLE
15705: EQUAL
15706: IFTRUE 15710
15708: GO 16062
15710: POP
// begin if contactWithAmerican and americanContact then
15711: LD_EXP 25
15715: PUSH
15716: LD_EXP 10
15720: AND
15721: IFFALSE 15785
// begin Say ( Heike , DH-Escort-a-1 ) ;
15723: LD_EXP 38
15727: PPUSH
15728: LD_STRING DH-Escort-a-1
15730: PPUSH
15731: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
15735: LD_EXP 52
15739: PPUSH
15740: LD_STRING DCa-Escort-a-2
15742: PPUSH
15743: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
15747: LD_EXP 52
15751: PPUSH
15752: LD_STRING DCa-Escort-a-3
15754: PPUSH
15755: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
15759: LD_EXP 38
15763: PPUSH
15764: LD_STRING DH-Escort-a-4
15766: PPUSH
15767: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
15771: LD_EXP 38
15775: PPUSH
15776: LD_STRING DH-Escort-a-5
15778: PPUSH
15779: CALL_OW 88
// end else
15783: GO 16019
// if contactWithAmerican then
15785: LD_EXP 25
15789: IFFALSE 15829
// begin Say ( Heike , DH-Escort-b-1 ) ;
15791: LD_EXP 38
15795: PPUSH
15796: LD_STRING DH-Escort-b-1
15798: PPUSH
15799: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
15803: LD_EXP 52
15807: PPUSH
15808: LD_STRING DCa-Escort-b-2
15810: PPUSH
15811: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
15815: LD_EXP 52
15819: PPUSH
15820: LD_STRING DCa-Escort-b-3
15822: PPUSH
15823: CALL_OW 88
// end else
15827: GO 16019
// begin Say ( Doug , DCa-Deal-a-1 ) ;
15829: LD_EXP 52
15833: PPUSH
15834: LD_STRING DCa-Deal-a-1
15836: PPUSH
15837: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
15841: LD_EXP 52
15845: PPUSH
15846: LD_STRING DCa-Deal-a-2
15848: PPUSH
15849: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
15853: LD_EXP 38
15857: PPUSH
15858: LD_STRING DH-Deal-a-3
15860: PPUSH
15861: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
15865: LD_EXP 52
15869: PPUSH
15870: LD_STRING DCa-Deal-a-4
15872: PPUSH
15873: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
15877: LD_EXP 38
15881: PPUSH
15882: LD_STRING DH-Deal-a-5
15884: PPUSH
15885: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
15889: LD_EXP 52
15893: PPUSH
15894: LD_STRING DCa-Deal-a-6
15896: PPUSH
15897: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
15901: LD_EXP 52
15905: PPUSH
15906: LD_STRING DCa-Deal-a-7
15908: PPUSH
15909: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
15913: LD_EXP 52
15917: PPUSH
15918: LD_STRING DCa-Deal-a-8
15920: PPUSH
15921: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
15925: LD_EXP 52
15929: PPUSH
15930: LD_STRING DCa-Deal-a-9
15932: PPUSH
15933: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
15937: LD_EXP 52
15941: PPUSH
15942: LD_STRING DCa-Deal-a-10
15944: PPUSH
15945: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
15949: LD_EXP 52
15953: PPUSH
15954: LD_STRING DCa-Deal-a-11
15956: PPUSH
15957: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15961: LD_INT 10
15963: PPUSH
15964: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
15968: LD_EXP 52
15972: PPUSH
15973: LD_STRING DCa-Deal-a-12
15975: PPUSH
15976: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
15980: LD_EXP 38
15984: PPUSH
15985: LD_STRING DH-Deal-a-13
15987: PPUSH
15988: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
15992: LD_EXP 38
15996: PPUSH
15997: LD_STRING DH-Deal-a-14
15999: PPUSH
16000: CALL_OW 88
// contactWithAmerican := true ;
16004: LD_ADDR_EXP 25
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16012: LD_STRING M1-american-out
16014: PPUSH
16015: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16019: LD_EXP 52
16023: PPUSH
16024: LD_INT 2
16026: PPUSH
16027: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16031: LD_ADDR_EXP 14
16035: PUSH
16036: LD_EXP 14
16040: PPUSH
16041: LD_EXP 52
16045: PPUSH
16046: CALL 64181 0 2
16050: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16051: LD_EXP 52
16055: PPUSH
16056: CALL_OW 122
// end ; usLab :
16060: GO 17939
16062: LD_INT 135
16064: DOUBLE
16065: EQUAL
16066: IFTRUE 16070
16068: GO 16386
16070: POP
// begin if hasSniperRifle then
16071: LD_EXP 11
16075: IFFALSE 16384
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16077: LD_EXP 43
16081: PPUSH
16082: CALL_OW 302
16086: PUSH
16087: LD_EXP 43
16091: PUSH
16092: LD_EXP 14
16096: IN
16097: AND
16098: PUSH
16099: LD_EXP 43
16103: PPUSH
16104: CALL_OW 255
16108: PUSH
16109: LD_INT 2
16111: EQUAL
16112: AND
16113: IFFALSE 16358
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16115: LD_EXP 38
16119: PPUSH
16120: LD_EXP 43
16124: PPUSH
16125: CALL_OW 296
16129: PUSH
16130: LD_INT 10
16132: GREATER
16133: IFFALSE 16158
// begin Query ( KaiaDistance ) ;
16135: LD_STRING KaiaDistance
16137: PPUSH
16138: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16142: LD_ADDR_EXP 16
16146: PUSH
16147: LD_EXP 16
16151: PUSH
16152: LD_INT 135
16154: DIFF
16155: ST_TO_ADDR
// end else
16156: GO 16356
// begin SetSide ( Kaia , 5 ) ;
16158: LD_EXP 43
16162: PPUSH
16163: LD_INT 5
16165: PPUSH
16166: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16170: LD_EXP 43
16174: PPUSH
16175: LD_INT 135
16177: PPUSH
16178: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16182: LD_INT 35
16184: PPUSH
16185: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16189: LD_EXP 43
16193: PPUSH
16194: CALL_OW 310
16198: IFFALSE 16182
// Say ( Kaia , DK-Sniper-1 ) ;
16200: LD_EXP 43
16204: PPUSH
16205: LD_STRING DK-Sniper-1
16207: PPUSH
16208: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16212: LD_EXP 43
16216: PPUSH
16217: CALL_OW 257
16221: PUSH
16222: LD_INT 34
16224: EQUAL
16225: PUSH
16226: LD_EXP 40
16230: PUSH
16231: LD_EXP 14
16235: IN
16236: AND
16237: PUSH
16238: LD_EXP 40
16242: PPUSH
16243: CALL_OW 302
16247: AND
16248: IFFALSE 16276
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16250: LD_EXP 43
16254: PPUSH
16255: LD_STRING DK-Sniper-a-2
16257: PPUSH
16258: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16262: LD_EXP 40
16266: PPUSH
16267: LD_INT 32
16269: PPUSH
16270: CALL_OW 336
// end else
16274: GO 16335
// begin Say ( Kaia , DK-Sniper-2 ) ;
16276: LD_EXP 43
16280: PPUSH
16281: LD_STRING DK-Sniper-2
16283: PPUSH
16284: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16288: LD_EXP 43
16292: PPUSH
16293: LD_INT 32
16295: PPUSH
16296: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16300: LD_EXP 45
16304: PPUSH
16305: CALL_OW 302
16309: PUSH
16310: LD_EXP 45
16314: PUSH
16315: LD_EXP 14
16319: IN
16320: AND
16321: IFFALSE 16335
// Say ( Markov , DMar-Sniper-3 ) ;
16323: LD_EXP 45
16327: PPUSH
16328: LD_STRING DMar-Sniper-3
16330: PPUSH
16331: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16335: LD_EXP 43
16339: PPUSH
16340: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16344: LD_EXP 43
16348: PPUSH
16349: LD_INT 2
16351: PPUSH
16352: CALL_OW 235
// end ; end else
16356: GO 16384
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16358: LD_ADDR_EXP 16
16362: PUSH
16363: LD_EXP 16
16367: PUSH
16368: LD_INT 135
16370: DIFF
16371: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16372: LD_EXP 38
16376: PPUSH
16377: LD_STRING DH-Locked
16379: PPUSH
16380: CALL_OW 88
// end ; end ; end ; drugsLab :
16384: GO 17939
16386: LD_INT 162
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16527
16394: POP
// begin if hasStimDrugs then
16395: LD_EXP 9
16399: IFFALSE 16513
// begin wait ( 0 0$1 ) ;
16401: LD_INT 35
16403: PPUSH
16404: CALL_OW 67
// if not hasStimDrugsCollected then
16408: LD_EXP 24
16412: NOT
16413: IFFALSE 16455
// begin Say ( Heike , DH-Lab-1 ) ;
16415: LD_EXP 38
16419: PPUSH
16420: LD_STRING DH-Lab-1
16422: PPUSH
16423: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16427: LD_INT 5
16429: PPUSH
16430: LD_INT 2
16432: PPUSH
16433: LD_INT 2
16435: PPUSH
16436: CALL_OW 322
// hasStimDrugsCollected := true ;
16440: LD_ADDR_EXP 24
16444: PUSH
16445: LD_INT 1
16447: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16448: LD_STRING M1-drugs-out
16450: PPUSH
16451: CALL_OW 604
// end ; if not hasExplosionCollected then
16455: LD_EXP 23
16459: NOT
16460: IFFALSE 16478
// entranceVisitedList := entranceVisitedList diff drugsLab else
16462: LD_ADDR_EXP 16
16466: PUSH
16467: LD_EXP 16
16471: PUSH
16472: LD_INT 162
16474: DIFF
16475: ST_TO_ADDR
16476: GO 16511
// begin wait ( 0 0$3 ) ;
16478: LD_INT 105
16480: PPUSH
16481: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16485: LD_EXP 38
16489: PPUSH
16490: LD_STRING DH-Lab-2
16492: PPUSH
16493: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16497: LD_STRING M1-drugsLab-out
16499: PPUSH
16500: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16504: LD_INT 162
16506: PPUSH
16507: CALL 18750 0 1
// end ; end else
16511: GO 16525
// Say ( Heike , DH-Locked ) ;
16513: LD_EXP 38
16517: PPUSH
16518: LD_STRING DH-Locked
16520: PPUSH
16521: CALL_OW 88
// end ; ruFac :
16525: GO 17939
16527: LD_INT 61
16529: DOUBLE
16530: EQUAL
16531: IFTRUE 16535
16533: GO 16645
16535: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16536: LD_EXP 45
16540: PPUSH
16541: CALL_OW 302
16545: PUSH
16546: LD_EXP 45
16550: PUSH
16551: LD_EXP 14
16555: IN
16556: NOT
16557: AND
16558: IFFALSE 16639
// begin Say ( Heike , DH-Krastyo-1 ) ;
16560: LD_EXP 38
16564: PPUSH
16565: LD_STRING DH-Krastyo-1
16567: PPUSH
16568: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16572: LD_EXP 45
16576: PPUSH
16577: LD_STRING DMar-Krastyo-2
16579: PPUSH
16580: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16584: LD_EXP 45
16588: PPUSH
16589: LD_STRING DMar-Krastyo-3
16591: PPUSH
16592: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16596: LD_EXP 45
16600: PPUSH
16601: LD_INT 2
16603: PPUSH
16604: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16608: LD_ADDR_EXP 14
16612: PUSH
16613: LD_EXP 14
16617: PPUSH
16618: LD_EXP 45
16622: PPUSH
16623: CALL 64181 0 2
16627: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16628: LD_EXP 45
16632: PPUSH
16633: CALL_OW 122
// end else
16637: GO 16643
// SayHEmpty ( ) ;
16639: CALL 15084 0 0
// end ; ruBarKam :
16643: GO 17939
16645: LD_INT 109
16647: DOUBLE
16648: EQUAL
16649: IFTRUE 16653
16651: GO 16800
16653: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
16654: LD_EXP 42
16658: PPUSH
16659: CALL_OW 302
16663: PUSH
16664: LD_EXP 42
16668: PUSH
16669: LD_EXP 14
16673: IN
16674: NOT
16675: AND
16676: IFFALSE 16794
// begin Say ( Heike , DH-Kamil-1 ) ;
16678: LD_EXP 38
16682: PPUSH
16683: LD_STRING DH-Kamil-1
16685: PPUSH
16686: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
16690: LD_EXP 42
16694: PPUSH
16695: LD_STRING DKam-Kamil-2
16697: PPUSH
16698: CALL_OW 88
// if IsOk ( Sophia ) then
16702: LD_EXP 44
16706: PPUSH
16707: CALL_OW 302
16711: IFFALSE 16751
// if Sophia in heikeSquad then
16713: LD_EXP 44
16717: PUSH
16718: LD_EXP 14
16722: IN
16723: IFFALSE 16739
// Say ( Kamil , DKam-Kamil-a-3 ) else
16725: LD_EXP 42
16729: PPUSH
16730: LD_STRING DKam-Kamil-a-3
16732: PPUSH
16733: CALL_OW 88
16737: GO 16751
// Say ( Kamil , DKam-Kamil-3 ) ;
16739: LD_EXP 42
16743: PPUSH
16744: LD_STRING DKam-Kamil-3
16746: PPUSH
16747: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
16751: LD_EXP 42
16755: PPUSH
16756: LD_INT 2
16758: PPUSH
16759: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
16763: LD_ADDR_EXP 14
16767: PUSH
16768: LD_EXP 14
16772: PPUSH
16773: LD_EXP 42
16777: PPUSH
16778: CALL 64181 0 2
16782: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
16783: LD_EXP 42
16787: PPUSH
16788: CALL_OW 122
// end else
16792: GO 16798
// SayHEmpty ( ) ;
16794: CALL 15084 0 0
// end ; ruOutpost1 :
16798: GO 17939
16800: LD_INT 169
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 17150
16808: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
16809: LD_EXP 47
16813: PPUSH
16814: CALL_OW 302
16818: PUSH
16819: LD_EXP 47
16823: PUSH
16824: LD_EXP 14
16828: IN
16829: NOT
16830: AND
16831: IFFALSE 17144
// begin if hasMethanol then
16833: LD_EXP 13
16837: IFFALSE 17073
// begin Say ( Heike , DH-Kurt-1 ) ;
16839: LD_EXP 38
16843: PPUSH
16844: LD_STRING DH-Kurt-1
16846: PPUSH
16847: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16851: LD_EXP 47
16855: PPUSH
16856: LD_STRING DKs-Kurt-2
16858: PPUSH
16859: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
16863: LD_EXP 39
16867: PPUSH
16868: LD_INT 169
16870: PPUSH
16871: CALL_OW 296
16875: PUSH
16876: LD_INT 10
16878: LESS
16879: PUSH
16880: LD_EXP 39
16884: PUSH
16885: LD_EXP 14
16889: IN
16890: AND
16891: IFFALSE 16968
// begin ComMoveXY ( Givi , 100 , 37 ) ;
16893: LD_EXP 39
16897: PPUSH
16898: LD_INT 100
16900: PPUSH
16901: LD_INT 37
16903: PPUSH
16904: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
16908: LD_EXP 39
16912: PPUSH
16913: LD_INT 169
16915: PPUSH
16916: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
16920: LD_INT 35
16922: PPUSH
16923: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
16927: LD_EXP 39
16931: PPUSH
16932: LD_INT 169
16934: PPUSH
16935: CALL_OW 296
16939: PUSH
16940: LD_INT 7
16942: LESS
16943: IFFALSE 16920
// Say ( Givi , DG-Kurt-3 ) ;
16945: LD_EXP 39
16949: PPUSH
16950: LD_STRING DG-Kurt-3
16952: PPUSH
16953: CALL_OW 88
// ComStop ( Givi ) ;
16957: LD_EXP 39
16961: PPUSH
16962: CALL_OW 141
// end else
16966: GO 17071
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
16968: LD_EXP 46
16972: PPUSH
16973: LD_INT 169
16975: PPUSH
16976: CALL_OW 296
16980: PUSH
16981: LD_INT 10
16983: LESS
16984: PUSH
16985: LD_EXP 46
16989: PUSH
16990: LD_EXP 14
16994: IN
16995: AND
16996: IFFALSE 17071
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
16998: LD_EXP 46
17002: PPUSH
17003: LD_INT 100
17005: PPUSH
17006: LD_INT 37
17008: PPUSH
17009: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
17013: LD_EXP 46
17017: PPUSH
17018: LD_INT 169
17020: PPUSH
17021: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17025: LD_INT 35
17027: PPUSH
17028: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
17032: LD_EXP 46
17036: PPUSH
17037: LD_INT 169
17039: PPUSH
17040: CALL_OW 296
17044: PUSH
17045: LD_INT 7
17047: LESS
17048: IFFALSE 17025
// Say ( Olaf , DO-Kurt-a-3 ) ;
17050: LD_EXP 46
17054: PPUSH
17055: LD_STRING DO-Kurt-a-3
17057: PPUSH
17058: CALL_OW 88
// ComStop ( Olaf ) ;
17062: LD_EXP 46
17066: PPUSH
17067: CALL_OW 141
// end ; end else
17071: GO 17101
// begin Say ( Heike , DH-Kurt-1 ) ;
17073: LD_EXP 38
17077: PPUSH
17078: LD_STRING DH-Kurt-1
17080: PPUSH
17081: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17085: LD_EXP 47
17089: PPUSH
17090: LD_STRING DKs-Kurt-2
17092: PPUSH
17093: CALL_OW 88
// SpawnAdditionalRuGuards ;
17097: CALL 3356 0 0
// end ; SetSide ( Kurt , 2 ) ;
17101: LD_EXP 47
17105: PPUSH
17106: LD_INT 2
17108: PPUSH
17109: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17113: LD_ADDR_EXP 14
17117: PUSH
17118: LD_EXP 14
17122: PPUSH
17123: LD_EXP 47
17127: PPUSH
17128: CALL 64181 0 2
17132: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17133: LD_EXP 47
17137: PPUSH
17138: CALL_OW 122
// end else
17142: GO 17148
// SayHEmpty ( ) ;
17144: CALL 15084 0 0
// end ; ruOutpostBar :
17148: GO 17939
17150: LD_INT 13
17152: DOUBLE
17153: EQUAL
17154: IFTRUE 17158
17156: GO 17204
17158: POP
// begin if not hasGuardPatrolPlan then
17159: LD_EXP 18
17163: NOT
17164: IFFALSE 17198
// begin Say ( Heike , DH-PatrolPlan ) ;
17166: LD_EXP 38
17170: PPUSH
17171: LD_STRING DH-PatrolPlan
17173: PPUSH
17174: CALL_OW 88
// hasGuardPatrolPlan := true ;
17178: LD_ADDR_EXP 18
17182: PUSH
17183: LD_INT 1
17185: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17186: LD_INT 6
17188: PPUSH
17189: LD_INT 2
17191: PPUSH
17192: CALL_OW 343
// end else
17196: GO 17202
// SayHEmpty ( ) ;
17198: CALL 15084 0 0
// end ; ruKaiaBar :
17202: GO 17939
17204: LD_INT 147
17206: DOUBLE
17207: EQUAL
17208: IFTRUE 17212
17210: GO 17359
17212: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17213: LD_EXP 43
17217: PPUSH
17218: CALL_OW 302
17222: PUSH
17223: LD_EXP 43
17227: PUSH
17228: LD_EXP 14
17232: IN
17233: NOT
17234: AND
17235: IFFALSE 17357
// begin Say ( Heike , DH-Kaia-1 ) ;
17237: LD_EXP 38
17241: PPUSH
17242: LD_STRING DH-Kaia-1
17244: PPUSH
17245: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17249: LD_EXP 43
17253: PPUSH
17254: LD_STRING DK-Kaia-2
17256: PPUSH
17257: CALL_OW 88
// if hasSniperRifle then
17261: LD_EXP 11
17265: IFFALSE 17316
// begin if IsOk ( Markov ) then
17267: LD_EXP 45
17271: PPUSH
17272: CALL_OW 302
17276: IFFALSE 17292
// Say ( Kaia , DK-Kaia-3 ) else
17278: LD_EXP 43
17282: PPUSH
17283: LD_STRING DK-Kaia-3
17285: PPUSH
17286: CALL_OW 88
17290: GO 17304
// Say ( Kaia , DK-Kaia-a-3 ) ;
17292: LD_EXP 43
17296: PPUSH
17297: LD_STRING DK-Kaia-a-3
17299: PPUSH
17300: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17304: LD_EXP 38
17308: PPUSH
17309: LD_STRING DH-Kaia-4
17311: PPUSH
17312: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17316: LD_EXP 43
17320: PPUSH
17321: LD_INT 2
17323: PPUSH
17324: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17328: LD_ADDR_EXP 14
17332: PUSH
17333: LD_EXP 14
17337: PPUSH
17338: LD_EXP 43
17342: PPUSH
17343: CALL 64181 0 2
17347: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17348: LD_EXP 43
17352: PPUSH
17353: CALL_OW 122
// end ; end ; ruWeaponsBar :
17357: GO 17939
17359: LD_INT 137
17361: DOUBLE
17362: EQUAL
17363: IFTRUE 17367
17365: GO 17938
17367: POP
// begin if hasWeapons then
17368: LD_EXP 19
17372: IFFALSE 17924
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17374: LD_ADDR_EXP 16
17378: PUSH
17379: LD_EXP 16
17383: PUSH
17384: LD_INT 137
17386: DIFF
17387: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: LD_EXP 14
17397: PPUSH
17398: LD_INT 91
17400: PUSH
17401: LD_EXP 38
17405: PUSH
17406: LD_INT 8
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: PPUSH
17414: CALL_OW 72
17418: ST_TO_ADDR
// if not heikeSquad or not tmp then
17419: LD_EXP 14
17423: NOT
17424: PUSH
17425: LD_VAR 0 3
17429: NOT
17430: OR
17431: IFFALSE 17447
// Say ( Heike , DH-Weapons-Alone ) else
17433: LD_EXP 38
17437: PPUSH
17438: LD_STRING DH-Weapons-Alone
17440: PPUSH
17441: CALL_OW 88
17445: GO 17922
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
17447: LD_ADDR_EXP 16
17451: PUSH
17452: LD_EXP 16
17456: PPUSH
17457: LD_INT 137
17459: PPUSH
17460: CALL 64181 0 2
17464: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
17465: LD_EXP 38
17469: PPUSH
17470: LD_STRING DH-Weapons-1
17472: PPUSH
17473: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17477: LD_EXP 38
17481: PPUSH
17482: LD_STRING DH-Weapons-2
17484: PPUSH
17485: CALL_OW 88
// if hasRevolver and Kaia in tmp then
17489: LD_EXP 8
17493: PUSH
17494: LD_EXP 43
17498: PUSH
17499: LD_VAR 0 3
17503: IN
17504: AND
17505: IFFALSE 17594
// begin SetSide ( Kaia , 5 ) ;
17507: LD_EXP 43
17511: PPUSH
17512: LD_INT 5
17514: PPUSH
17515: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17519: LD_EXP 43
17523: PPUSH
17524: LD_INT 137
17526: PPUSH
17527: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17531: LD_INT 35
17533: PPUSH
17534: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17538: LD_EXP 43
17542: PPUSH
17543: CALL_OW 310
17547: IFFALSE 17531
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17549: LD_EXP 38
17553: PPUSH
17554: LD_STRING DH-Kaia-Revolver-2
17556: PPUSH
17557: CALL_OW 88
// SetClassKaiaRevolver ;
17561: CALL 1686 0 0
// hasRevolver := false ;
17565: LD_ADDR_EXP 8
17569: PUSH
17570: LD_INT 0
17572: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17573: LD_EXP 43
17577: PPUSH
17578: LD_INT 2
17580: PPUSH
17581: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17585: LD_EXP 43
17589: PPUSH
17590: CALL_OW 122
// end ; if Givi in tmp then
17594: LD_EXP 39
17598: PUSH
17599: LD_VAR 0 3
17603: IN
17604: IFFALSE 17745
// begin SetSide ( Givi , 5 ) ;
17606: LD_EXP 39
17610: PPUSH
17611: LD_INT 5
17613: PPUSH
17614: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
17618: LD_EXP 39
17622: PPUSH
17623: LD_INT 137
17625: PPUSH
17626: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17630: LD_INT 35
17632: PPUSH
17633: CALL_OW 67
// until IsInUnit ( Givi ) ;
17637: LD_EXP 39
17641: PPUSH
17642: CALL_OW 310
17646: IFFALSE 17630
// Say ( Givi , DG-Weapons-3 ) ;
17648: LD_EXP 39
17652: PPUSH
17653: LD_STRING DG-Weapons-3
17655: PPUSH
17656: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
17660: LD_EXP 38
17664: PPUSH
17665: LD_STRING DH-Weapons-4
17667: PPUSH
17668: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
17672: LD_EXP 39
17676: PPUSH
17677: LD_STRING DG-Weapons-5
17679: PPUSH
17680: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
17684: LD_EXP 39
17688: PPUSH
17689: LD_INT 11
17691: PPUSH
17692: CALL_OW 336
// ComExitBuilding ( Givi ) ;
17696: LD_EXP 39
17700: PPUSH
17701: CALL_OW 122
// SetSide ( Givi , 2 ) ;
17705: LD_EXP 39
17709: PPUSH
17710: LD_INT 2
17712: PPUSH
17713: CALL_OW 235
// if hasRevolver then
17717: LD_EXP 8
17721: IFFALSE 17743
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17723: LD_EXP 38
17727: PPUSH
17728: LD_STRING DH-Kaia-Revolver-1
17730: PPUSH
17731: CALL_OW 88
// heikeHasRevolver := true ;
17735: LD_ADDR_EXP 20
17739: PUSH
17740: LD_INT 1
17742: ST_TO_ADDR
// end ; end else
17743: GO 17922
// if Kamil in tmp then
17745: LD_EXP 42
17749: PUSH
17750: LD_VAR 0 3
17754: IN
17755: IFFALSE 17884
// begin SetSide ( Kamil , 5 ) ;
17757: LD_EXP 42
17761: PPUSH
17762: LD_INT 5
17764: PPUSH
17765: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
17769: LD_EXP 42
17773: PPUSH
17774: LD_INT 137
17776: PPUSH
17777: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17781: LD_INT 35
17783: PPUSH
17784: CALL_OW 67
// until IsInUnit ( Kamil ) ;
17788: LD_EXP 42
17792: PPUSH
17793: CALL_OW 310
17797: IFFALSE 17781
// Say ( Kamil , DKam-Weapons-a-3 ) ;
17799: LD_EXP 42
17803: PPUSH
17804: LD_STRING DKam-Weapons-a-3
17806: PPUSH
17807: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
17811: LD_EXP 38
17815: PPUSH
17816: LD_STRING DH-Weapons-a-4
17818: PPUSH
17819: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
17823: LD_EXP 42
17827: PPUSH
17828: LD_INT 11
17830: PPUSH
17831: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
17835: LD_EXP 42
17839: PPUSH
17840: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
17844: LD_EXP 42
17848: PPUSH
17849: LD_INT 2
17851: PPUSH
17852: CALL_OW 235
// if hasRevolver then
17856: LD_EXP 8
17860: IFFALSE 17882
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17862: LD_EXP 38
17866: PPUSH
17867: LD_STRING DH-Kaia-Revolver-1
17869: PPUSH
17870: CALL_OW 88
// heikeHasRevolver := true ;
17874: LD_ADDR_EXP 20
17878: PUSH
17879: LD_INT 1
17881: ST_TO_ADDR
// end ; end else
17882: GO 17922
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
17884: LD_EXP 38
17888: PPUSH
17889: LD_STRING DH-Weapons-Alone-2
17891: PPUSH
17892: CALL_OW 88
// if hasRevolver then
17896: LD_EXP 8
17900: IFFALSE 17922
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
17902: LD_EXP 38
17906: PPUSH
17907: LD_STRING DH-Kaia-Revolver-1a
17909: PPUSH
17910: CALL_OW 88
// heikeHasRevolver := true ;
17914: LD_ADDR_EXP 20
17918: PUSH
17919: LD_INT 1
17921: ST_TO_ADDR
// end ; end ; end ; end else
17922: GO 17936
// Say ( Heike , DH-Locked ) ;
17924: LD_EXP 38
17928: PPUSH
17929: LD_STRING DH-Locked
17931: PPUSH
17932: CALL_OW 88
// end ; end ;
17936: GO 17939
17938: POP
// ComExitBuilding ( Heike ) ;
17939: LD_EXP 38
17943: PPUSH
17944: CALL_OW 122
// SetSide ( Heike , 2 ) ;
17948: LD_EXP 38
17952: PPUSH
17953: LD_INT 2
17955: PPUSH
17956: CALL_OW 235
// SetSide ( building , 3 ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: LD_INT 3
17967: PPUSH
17968: CALL_OW 235
// InGameOff ;
17972: CALL_OW 9
// end ;
17976: LD_VAR 0 2
17980: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
17981: LD_EXP 30
17985: NOT
17986: PUSH
17987: LD_EXP 17
17991: NOT
17992: AND
17993: PUSH
17994: LD_INT 22
17996: PUSH
17997: LD_INT 5
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 21
18006: PUSH
18007: LD_INT 1
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PPUSH
18018: CALL_OW 69
18022: PUSH
18023: LD_INT 0
18025: EQUAL
18026: AND
18027: PUSH
18028: LD_INT 22
18030: PUSH
18031: LD_INT 4
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 21
18040: PUSH
18041: LD_INT 1
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PPUSH
18052: CALL_OW 69
18056: PUSH
18057: LD_INT 0
18059: EQUAL
18060: PUSH
18061: LD_EXP 25
18065: AND
18066: PUSH
18067: LD_EXP 25
18071: NOT
18072: OR
18073: AND
18074: IFFALSE 18106
18076: GO 18078
18078: DISABLE
// begin DialogueOn ;
18079: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18083: LD_EXP 38
18087: PPUSH
18088: LD_STRING DH-Alarm-2
18090: PPUSH
18091: CALL_OW 88
// DialogueOff ;
18095: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18099: LD_STRING M1-people-out
18101: PPUSH
18102: CALL_OW 337
// end ; end_of_file
18106: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18107: LD_VAR 0 1
18111: PUSH
18112: LD_INT 3
18114: DOUBLE
18115: EQUAL
18116: IFTRUE 18120
18118: GO 18150
18120: POP
// begin repeat wait ( 0 0$1 ) ;
18121: LD_INT 35
18123: PPUSH
18124: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18128: LD_EXP 38
18132: PPUSH
18133: CALL_OW 85
// until IsDying ( Heike ) ;
18137: LD_EXP 38
18141: PPUSH
18142: CALL_OW 303
18146: IFFALSE 18121
// end ; end ;
18148: GO 18151
18150: POP
// end ;
18151: PPOPN 1
18153: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
18154: LD_OWVAR 59
18158: IFFALSE 18162
// exit ;
18160: GO 18236
// if showPlaceEvent then
18162: LD_INT 4
18164: IFFALSE 18236
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
18166: LD_VAR 0 2
18170: PPUSH
18171: LD_VAR 0 3
18175: PPUSH
18176: LD_INT 2
18178: PPUSH
18179: LD_INT 6
18181: NEG
18182: PPUSH
18183: CALL_OW 330
// CenterOnXY ( x , y ) ;
18187: LD_VAR 0 2
18191: PPUSH
18192: LD_VAR 0 3
18196: PPUSH
18197: CALL_OW 84
// wait ( time ) ;
18201: LD_VAR 0 4
18205: PPUSH
18206: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18210: LD_EXP 38
18214: PPUSH
18215: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18219: LD_VAR 0 2
18223: PPUSH
18224: LD_VAR 0 3
18228: PPUSH
18229: LD_INT 2
18231: PPUSH
18232: CALL_OW 331
// end ; end ;
18236: PPOPN 7
18238: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18239: LD_VAR 0 1
18243: PUSH
18244: LD_EXP 38
18248: EQUAL
18249: PUSH
18250: LD_EXP 5
18254: AND
18255: IFFALSE 18279
// if loseCounter then
18257: LD_EXP 32
18261: IFFALSE 18272
// YouLost ( HeikeNoSurrender ) else
18263: LD_STRING HeikeNoSurrender
18265: PPUSH
18266: CALL_OW 104
18270: GO 18279
// YouLost ( Heike ) ;
18272: LD_STRING Heike
18274: PPUSH
18275: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18279: LD_VAR 0 1
18283: PPUSH
18284: CALL_OW 255
18288: PUSH
18289: LD_INT 2
18291: EQUAL
18292: PUSH
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 247
18302: PUSH
18303: LD_INT 1
18305: EQUAL
18306: AND
18307: IFFALSE 18324
// loseCounter := Inc ( loseCounter ) ;
18309: LD_ADDR_EXP 32
18313: PUSH
18314: LD_EXP 32
18318: PPUSH
18319: CALL 65542 0 1
18323: ST_TO_ADDR
// end ;
18324: PPOPN 1
18326: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18327: LD_VAR 0 1
18331: PUSH
18332: LD_INT 2
18334: EQUAL
18335: PUSH
18336: LD_VAR 0 2
18340: PUSH
18341: LD_INT 3
18343: EQUAL
18344: AND
18345: PUSH
18346: LD_VAR 0 1
18350: PUSH
18351: LD_INT 3
18353: EQUAL
18354: PUSH
18355: LD_VAR 0 2
18359: PUSH
18360: LD_INT 2
18362: EQUAL
18363: AND
18364: OR
18365: IFFALSE 18375
// isAlarm := true ;
18367: LD_ADDR_EXP 17
18371: PUSH
18372: LD_INT 1
18374: ST_TO_ADDR
// end ; end_of_file
18375: PPOPN 2
18377: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18378: LD_INT 0
18380: PPUSH
18381: PPUSH
18382: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18383: LD_ADDR_VAR 0 4
18387: PUSH
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 310
18397: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18398: LD_ADDR_VAR 0 5
18402: PUSH
18403: LD_VAR 0 2
18407: PPUSH
18408: CALL_OW 310
18412: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18413: LD_ADDR_VAR 0 3
18417: PUSH
18418: LD_VAR 0 4
18422: PUSH
18423: LD_VAR 0 4
18427: PUSH
18428: LD_VAR 0 5
18432: EQUAL
18433: AND
18434: ST_TO_ADDR
// end ;
18435: LD_VAR 0 3
18439: RET
// export function ShowPlace ( x , y , time ) ; begin
18440: LD_INT 0
18442: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18443: LD_INT 4
18445: PPUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: LD_VAR 0 2
18455: PPUSH
18456: LD_VAR 0 3
18460: PPUSH
18461: LD_INT 0
18463: PPUSH
18464: LD_INT 0
18466: PPUSH
18467: LD_INT 0
18469: PPUSH
18470: CALL_OW 595
// end ;
18474: LD_VAR 0 4
18478: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
18484: PPUSH
18485: PPUSH
18486: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 302
18496: NOT
18497: PUSH
18498: LD_VAR 0 2
18502: PPUSH
18503: CALL_OW 302
18507: NOT
18508: OR
18509: PUSH
18510: LD_VAR 0 2
18514: PPUSH
18515: CALL_OW 313
18519: PUSH
18520: LD_INT 6
18522: EQUAL
18523: OR
18524: IFFALSE 18528
// exit ;
18526: GO 18745
// btype := GetBType ( building ) ;
18528: LD_ADDR_VAR 0 8
18532: PUSH
18533: LD_VAR 0 2
18537: PPUSH
18538: CALL_OW 266
18542: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
18543: LD_VAR 0 8
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: LD_INT 2
18556: PUSH
18557: LD_INT 4
18559: PUSH
18560: LD_INT 5
18562: PUSH
18563: LD_INT 3
18565: PUSH
18566: LD_INT 6
18568: PUSH
18569: LD_INT 7
18571: PUSH
18572: LD_INT 8
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: IN
18586: NOT
18587: IFFALSE 18591
// exit ;
18589: GO 18745
// x := GetX ( building ) ;
18591: LD_ADDR_VAR 0 4
18595: PUSH
18596: LD_VAR 0 2
18600: PPUSH
18601: CALL_OW 250
18605: ST_TO_ADDR
// y := GetY ( building ) ;
18606: LD_ADDR_VAR 0 5
18610: PUSH
18611: LD_VAR 0 2
18615: PPUSH
18616: CALL_OW 251
18620: ST_TO_ADDR
// d := GetDir ( building ) ;
18621: LD_ADDR_VAR 0 6
18625: PUSH
18626: LD_VAR 0 2
18630: PPUSH
18631: CALL_OW 254
18635: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
18636: LD_ADDR_VAR 0 7
18640: PUSH
18641: LD_VAR 0 4
18645: PPUSH
18646: LD_VAR 0 6
18650: PPUSH
18651: LD_INT 3
18653: PPUSH
18654: CALL_OW 272
18658: PUSH
18659: LD_VAR 0 5
18663: PPUSH
18664: LD_VAR 0 6
18668: PPUSH
18669: LD_INT 3
18671: PPUSH
18672: CALL_OW 273
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
18681: LD_VAR 0 7
18685: PUSH
18686: LD_INT 1
18688: ARRAY
18689: PPUSH
18690: LD_VAR 0 7
18694: PUSH
18695: LD_INT 2
18697: ARRAY
18698: PPUSH
18699: CALL_OW 488
18703: NOT
18704: IFFALSE 18708
// exit ;
18706: GO 18745
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
18708: LD_ADDR_VAR 0 3
18712: PUSH
18713: LD_VAR 0 1
18717: PPUSH
18718: LD_VAR 0 7
18722: PUSH
18723: LD_INT 1
18725: ARRAY
18726: PPUSH
18727: LD_VAR 0 7
18731: PUSH
18732: LD_INT 2
18734: ARRAY
18735: PPUSH
18736: CALL_OW 297
18740: PUSH
18741: LD_INT 4
18743: LESS
18744: ST_TO_ADDR
// end ;
18745: LD_VAR 0 3
18749: RET
// export function PlaceExplosives ( building ) ; begin
18750: LD_INT 0
18752: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
18753: LD_ADDR_EXP 29
18757: PUSH
18758: LD_EXP 29
18762: PPUSH
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL 64181 0 2
18772: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 250
18782: PPUSH
18783: LD_VAR 0 1
18787: PPUSH
18788: CALL_OW 251
18792: PPUSH
18793: LD_STRING PlantBomb
18795: PPUSH
18796: CALL_OW 366
// end ;
18800: LD_VAR 0 2
18804: RET
// export function CreateNature ; var i ; begin
18805: LD_INT 0
18807: PPUSH
18808: PPUSH
// PrepareFrog ;
18809: CALL 60663 0 0
// for i := 1 to 3 do
18813: LD_ADDR_VAR 0 2
18817: PUSH
18818: DOUBLE
18819: LD_INT 1
18821: DEC
18822: ST_TO_ADDR
18823: LD_INT 3
18825: PUSH
18826: FOR_TO
18827: IFFALSE 18846
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
18829: CALL_OW 44
18833: PPUSH
18834: LD_INT 24
18836: PPUSH
18837: LD_INT 0
18839: PPUSH
18840: CALL_OW 49
18844: GO 18826
18846: POP
18847: POP
// end ;
18848: LD_VAR 0 1
18852: RET
// export function MarkBuilding ( building , marker ) ; begin
18853: LD_INT 0
18855: PPUSH
// if marker then
18856: LD_VAR 0 2
18860: IFFALSE 18907
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 250
18871: PPUSH
18872: LD_VAR 0 1
18876: PPUSH
18877: CALL_OW 251
18881: PPUSH
18882: LD_INT 2
18884: PPUSH
18885: LD_INT 3
18887: NEG
18888: PPUSH
18889: CALL_OW 330
// SetBName ( building , target ) ;
18893: LD_VAR 0 1
18897: PPUSH
18898: LD_STRING target
18900: PPUSH
18901: CALL_OW 500
// end else
18905: GO 18946
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
18907: LD_VAR 0 1
18911: PPUSH
18912: CALL_OW 250
18916: PPUSH
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL_OW 251
18926: PPUSH
18927: LD_INT 2
18929: PPUSH
18930: CALL_OW 331
// SetBName ( building ,  ) ;
18934: LD_VAR 0 1
18938: PPUSH
18939: LD_STRING 
18941: PPUSH
18942: CALL_OW 500
// end ; end ; end_of_file
18946: LD_VAR 0 3
18950: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
18951: LD_INT 0
18953: PPUSH
// lockerCodeValid := false ;
18954: LD_ADDR_EXP 64
18958: PUSH
18959: LD_INT 0
18961: ST_TO_ADDR
// if not step then
18962: LD_LOC 1
18966: NOT
18967: IFFALSE 18977
// step := 1 ;
18969: LD_ADDR_LOC 1
18973: PUSH
18974: LD_INT 1
18976: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
18977: LD_STRING HEscape
18979: PUSH
18980: LD_LOC 1
18984: STR
18985: PPUSH
18986: CALL_OW 97
18990: PUSH
18991: LD_INT 1
18993: DOUBLE
18994: EQUAL
18995: IFTRUE 18999
18997: GO 19006
18999: POP
// LockerMinigameSearch ; 2 :
19000: CALL 19039 0 0
19004: GO 19022
19006: LD_INT 2
19008: DOUBLE
19009: EQUAL
19010: IFTRUE 19014
19012: GO 19021
19014: POP
// LockerMinigameSetCode ; end ;
19015: CALL 19113 0 0
19019: GO 19022
19021: POP
// if lockerCodeValid then
19022: LD_EXP 64
19026: IFFALSE 19030
// exit ;
19028: GO 19034
// StartLockerMinigame ;
19030: CALL 18951 0 0
// end ;
19034: LD_VAR 0 1
19038: RET
// function LockerMinigameSearch ; begin
19039: LD_INT 0
19041: PPUSH
// if code then
19042: LD_LOC 2
19046: IFFALSE 19062
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
19048: LD_EXP 38
19052: PPUSH
19053: LD_STRING DH-Escape-3-Hint-0
19055: PPUSH
19056: CALL_OW 88
// exit ;
19060: GO 19108
// end ; Randomize ;
19062: CALL_OW 10
// code := rand ( 1 , 5 ) ;
19066: LD_ADDR_LOC 2
19070: PUSH
19071: LD_INT 1
19073: PPUSH
19074: LD_INT 5
19076: PPUSH
19077: CALL_OW 12
19081: ST_TO_ADDR
// step := 2 ;
19082: LD_ADDR_LOC 1
19086: PUSH
19087: LD_INT 2
19089: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
19090: LD_EXP 38
19094: PPUSH
19095: LD_STRING DH-Escape-3-Hint-
19097: PUSH
19098: LD_LOC 2
19102: STR
19103: PPUSH
19104: CALL_OW 88
// end ;
19108: LD_VAR 0 1
19112: RET
// function LockerMinigameSetCode ; begin
19113: LD_INT 0
19115: PPUSH
// if not code then
19116: LD_LOC 2
19120: NOT
19121: IFFALSE 19131
// code := 0 ;
19123: LD_ADDR_LOC 2
19127: PUSH
19128: LD_INT 0
19130: ST_TO_ADDR
// lockerBusy := true ;
19131: LD_ADDR_EXP 65
19135: PUSH
19136: LD_INT 1
19138: ST_TO_ADDR
// InGameOff ;
19139: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
19143: LD_STRING initLockerMinigame("
19145: PUSH
19146: LD_LOC 2
19150: STR
19151: PUSH
19152: LD_STRING ")
19154: STR
19155: PPUSH
19156: CALL_OW 559
// step := 3 ;
19160: LD_ADDR_LOC 1
19164: PUSH
19165: LD_INT 3
19167: ST_TO_ADDR
// repeat wait ( 1 ) ;
19168: LD_INT 1
19170: PPUSH
19171: CALL_OW 67
// until not lockerBusy ;
19175: LD_EXP 65
19179: NOT
19180: IFFALSE 19168
// InGameOn ;
19182: CALL_OW 8
// if not lockerCodeValid then
19186: LD_EXP 64
19190: NOT
19191: IFFALSE 19217
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19193: LD_EXP 38
19197: PPUSH
19198: LD_STRING DH-Escape-3-Fail-
19200: PUSH
19201: LD_INT 1
19203: PPUSH
19204: LD_INT 2
19206: PPUSH
19207: CALL_OW 12
19211: STR
19212: PPUSH
19213: CALL_OW 88
// end ; end_of_file
19217: LD_VAR 0 1
19221: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19222: LD_VAR 0 2
19226: PUSH
19227: LD_INT 102
19229: EQUAL
19230: IFFALSE 19252
// begin lockerBusy := false ;
19232: LD_ADDR_EXP 65
19236: PUSH
19237: LD_INT 0
19239: ST_TO_ADDR
// lockerCodeValid := p3 ;
19240: LD_ADDR_EXP 64
19244: PUSH
19245: LD_VAR 0 3
19249: ST_TO_ADDR
// end else
19250: GO 19306
// if p2 = 103 then
19252: LD_VAR 0 2
19256: PUSH
19257: LD_INT 103
19259: EQUAL
19260: IFFALSE 19272
// begin weatherBusy := false ;
19262: LD_ADDR_EXP 37
19266: PUSH
19267: LD_INT 0
19269: ST_TO_ADDR
// end else
19270: GO 19306
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19272: LD_VAR 0 1
19276: PPUSH
19277: LD_VAR 0 2
19281: PPUSH
19282: LD_VAR 0 3
19286: PPUSH
19287: LD_VAR 0 4
19291: PPUSH
19292: LD_VAR 0 5
19296: PPUSH
19297: LD_VAR 0 6
19301: PPUSH
19302: CALL 68151 0 6
// end ;
19306: PPOPN 6
19308: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
19309: LD_STRING killGameMusic();
19311: PPUSH
19312: CALL_OW 559
// SOS_MapStart ( ) ;
19316: CALL 68122 0 0
// end ; end_of_file
19320: PPOPN 1
19322: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
19323: LD_EXP 17
19327: NOT
19328: PUSH
19329: LD_EXP 63
19333: AND
19334: IFFALSE 19738
19336: GO 19338
19338: DISABLE
19339: LD_INT 0
19341: PPUSH
19342: PPUSH
19343: PPUSH
19344: PPUSH
19345: PPUSH
// begin enable ;
19346: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19347: LD_ADDR_VAR 0 3
19351: PUSH
19352: LD_INT 26
19354: PUSH
19355: LD_INT 27
19357: PUSH
19358: LD_INT 28
19360: PUSH
19361: LD_INT 29
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 31
19375: PUSH
19376: LD_INT 32
19378: PUSH
19379: LD_INT 33
19381: PUSH
19382: LD_INT 34
19384: PUSH
19385: LD_INT 35
19387: PUSH
19388: LD_INT 36
19390: PUSH
19391: LD_INT 37
19393: PUSH
19394: LD_INT 38
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 39
19410: PUSH
19411: LD_INT 40
19413: PUSH
19414: LD_INT 41
19416: PUSH
19417: LD_INT 42
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 43
19428: PUSH
19429: LD_INT 44
19431: PUSH
19432: LD_INT 45
19434: PUSH
19435: LD_INT 46
19437: PUSH
19438: LD_INT 47
19440: PUSH
19441: LD_INT 46
19443: PUSH
19444: LD_INT 45
19446: PUSH
19447: LD_INT 44
19449: PUSH
19450: LD_INT 43
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: ST_TO_ADDR
// for i in ruPatrol do
19470: LD_ADDR_VAR 0 1
19474: PUSH
19475: LD_EXP 63
19479: PUSH
19480: FOR_IN
19481: IFFALSE 19736
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
19483: LD_ADDR_VAR 0 5
19487: PUSH
19488: LD_INT 22
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: LD_INT 21
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 91
19510: PUSH
19511: LD_VAR 0 1
19515: PUSH
19516: LD_INT 7
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
19534: LD_INT 2
19536: PPUSH
19537: LD_VAR 0 1
19541: PPUSH
19542: CALL_OW 292
19546: PUSH
19547: LD_VAR 0 5
19551: AND
19552: IFFALSE 19622
// begin if hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 then
19554: LD_EXP 30
19558: PUSH
19559: LD_VAR 0 1
19563: PPUSH
19564: LD_EXP 58
19568: PPUSH
19569: CALL_OW 296
19573: PUSH
19574: LD_INT 16
19576: LESS
19577: AND
19578: IFFALSE 19582
// continue ;
19580: GO 19480
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
19582: LD_VAR 0 1
19586: PPUSH
19587: LD_VAR 0 5
19591: PPUSH
19592: LD_VAR 0 1
19596: PPUSH
19597: CALL_OW 74
19601: PPUSH
19602: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
19606: LD_VAR 0 1
19610: PPUSH
19611: LD_VAR 0 5
19615: PPUSH
19616: CALL 19741 0 2
// continue ;
19620: GO 19480
// end ; if HasTask ( i ) then
19622: LD_VAR 0 1
19626: PPUSH
19627: CALL_OW 314
19631: IFFALSE 19635
// continue ;
19633: GO 19480
// tag := GetTag ( i ) ;
19635: LD_ADDR_VAR 0 4
19639: PUSH
19640: LD_VAR 0 1
19644: PPUSH
19645: CALL_OW 110
19649: ST_TO_ADDR
// if not tag then
19650: LD_VAR 0 4
19654: NOT
19655: IFFALSE 19668
// begin ComHold ( i ) ;
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 140
// continue ;
19666: GO 19480
// end ; for j := 1 to points [ tag ] do
19668: LD_ADDR_VAR 0 2
19672: PUSH
19673: DOUBLE
19674: LD_INT 1
19676: DEC
19677: ST_TO_ADDR
19678: LD_VAR 0 3
19682: PUSH
19683: LD_VAR 0 4
19687: ARRAY
19688: PUSH
19689: FOR_TO
19690: IFFALSE 19732
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
19692: LD_VAR 0 1
19696: PPUSH
19697: LD_VAR 0 3
19701: PUSH
19702: LD_VAR 0 4
19706: ARRAY
19707: PUSH
19708: LD_VAR 0 2
19712: ARRAY
19713: PPUSH
19714: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
19718: LD_VAR 0 1
19722: PPUSH
19723: LD_INT 70
19725: PPUSH
19726: CALL_OW 202
// end ;
19730: GO 19689
19732: POP
19733: POP
// end ;
19734: GO 19480
19736: POP
19737: POP
// end ;
19738: PPOPN 5
19740: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
19741: LD_INT 0
19743: PPUSH
19744: PPUSH
19745: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
19746: LD_VAR 0 2
19750: PPUSH
19751: LD_INT 23
19753: PUSH
19754: LD_INT 3
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PPUSH
19761: CALL_OW 72
19765: PUSH
19766: LD_VAR 0 2
19770: PPUSH
19771: LD_INT 95
19773: PUSH
19774: LD_INT 61
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PPUSH
19781: CALL_OW 72
19785: OR
19786: IFFALSE 19790
// exit ;
19788: GO 20833
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
19790: LD_VAR 0 2
19794: PPUSH
19795: LD_INT 2
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 1
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 25
19810: PUSH
19811: LD_INT 11
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 34
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 25
19830: PUSH
19831: LD_INT 32
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: PUSH
19845: EMPTY
19846: LIST
19847: PPUSH
19848: CALL_OW 72
19852: IFFALSE 19936
// begin DialogueOn ;
19854: CALL_OW 6
// case GetSex ( guard ) of sex_male :
19858: LD_VAR 0 1
19862: PPUSH
19863: CALL_OW 258
19867: PUSH
19868: LD_INT 1
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 19891
19876: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
19877: LD_VAR 0 1
19881: PPUSH
19882: LD_STRING DRum-Fail-3
19884: PPUSH
19885: CALL_OW 88
19889: GO 19915
19891: LD_INT 2
19893: DOUBLE
19894: EQUAL
19895: IFTRUE 19899
19897: GO 19914
19899: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
19900: LD_VAR 0 1
19904: PPUSH
19905: LD_STRING DRum-Fail-3
19907: PPUSH
19908: CALL_OW 88
19912: GO 19915
19914: POP
// DialogueOff ;
19915: CALL_OW 7
// wait ( 0 0$5 ) ;
19919: LD_INT 175
19921: PPUSH
19922: CALL_OW 67
// isAlarm := true ;
19926: LD_ADDR_EXP 17
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// exit ;
19934: GO 20833
// end ; DialogueOn ;
19936: CALL_OW 6
// CenterNowOnUnits ( guard ) ;
19940: LD_VAR 0 1
19944: PPUSH
19945: CALL_OW 87
// if not Heike in units then
19949: LD_EXP 38
19953: PUSH
19954: LD_VAR 0 2
19958: IN
19959: NOT
19960: IFFALSE 20310
// begin case GetSex ( guard ) of sex_male :
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 258
19971: PUSH
19972: LD_INT 1
19974: DOUBLE
19975: EQUAL
19976: IFTRUE 19980
19978: GO 19995
19980: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
19981: LD_VAR 0 1
19985: PPUSH
19986: LD_STRING DRum-Guard-1
19988: PPUSH
19989: CALL_OW 88
19993: GO 20019
19995: LD_INT 2
19997: DOUBLE
19998: EQUAL
19999: IFTRUE 20003
20001: GO 20018
20003: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
20004: LD_VAR 0 1
20008: PPUSH
20009: LD_STRING DRuf-Guard-1
20011: PPUSH
20012: CALL_OW 88
20016: GO 20019
20018: POP
// case Query ( SurrenderInfoPeople ) of 1 :
20019: LD_STRING SurrenderInfoPeople
20021: PPUSH
20022: CALL_OW 97
20026: PUSH
20027: LD_INT 1
20029: DOUBLE
20030: EQUAL
20031: IFTRUE 20035
20033: GO 20136
20035: POP
// begin Query ( CaughtSquadInfo ) ;
20036: LD_STRING CaughtSquadInfo
20038: PPUSH
20039: CALL_OW 97
// for i in units do
20043: LD_ADDR_VAR 0 4
20047: PUSH
20048: LD_VAR 0 2
20052: PUSH
20053: FOR_IN
20054: IFFALSE 20111
// begin if Carry ( i ) then
20056: LD_VAR 0 4
20060: PPUSH
20061: CALL_OW 281
20065: IFFALSE 20082
// SetCargo ( i , mat_cans , 0 ) ;
20067: LD_VAR 0 4
20071: PPUSH
20072: LD_INT 1
20074: PPUSH
20075: LD_INT 0
20077: PPUSH
20078: CALL_OW 290
// SetSide ( i , 5 ) ;
20082: LD_VAR 0 4
20086: PPUSH
20087: LD_INT 5
20089: PPUSH
20090: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20094: LD_VAR 0 4
20098: PPUSH
20099: LD_INT 113
20101: PPUSH
20102: LD_INT 17
20104: PPUSH
20105: CALL_OW 111
// end ;
20109: GO 20053
20111: POP
20112: POP
// ComMoveXY ( guard , 113 , 17 ) ;
20113: LD_VAR 0 1
20117: PPUSH
20118: LD_INT 113
20120: PPUSH
20121: LD_INT 17
20123: PPUSH
20124: CALL_OW 111
// DialogueOff ;
20128: CALL_OW 7
// exit ;
20132: GO 20833
// end ; 2 :
20134: GO 20310
20136: LD_INT 2
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20309
20144: POP
// begin DialogueOff ;
20145: CALL_OW 7
// wait ( 0 0$2 ) ;
20149: LD_INT 70
20151: PPUSH
20152: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20156: LD_INT 6
20158: PPUSH
20159: LD_INT 2
20161: PPUSH
20162: LD_INT 2
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
20172: LD_VAR 0 1
20176: PPUSH
20177: LD_VAR 0 2
20181: PUSH
20182: LD_INT 1
20184: ARRAY
20185: PPUSH
20186: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 258
20199: PUSH
20200: LD_INT 1
20202: DOUBLE
20203: EQUAL
20204: IFTRUE 20208
20206: GO 20223
20208: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20209: LD_VAR 0 1
20213: PPUSH
20214: LD_STRING DRum-Fail-3
20216: PPUSH
20217: CALL_OW 88
20221: GO 20247
20223: LD_INT 2
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20246
20231: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20232: LD_VAR 0 1
20236: PPUSH
20237: LD_STRING DRum-Fail-3
20239: PPUSH
20240: CALL_OW 88
20244: GO 20247
20246: POP
// wait ( 0 0$5 ) ;
20247: LD_INT 175
20249: PPUSH
20250: CALL_OW 67
// if IsOk ( guard ) then
20254: LD_VAR 0 1
20258: PPUSH
20259: CALL_OW 302
20263: IFFALSE 20275
// isAlarm := true else
20265: LD_ADDR_EXP 17
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
20273: GO 20307
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20275: LD_INT 6
20277: PPUSH
20278: LD_INT 2
20280: PPUSH
20281: LD_INT 0
20283: PPUSH
20284: LD_INT 1
20286: PPUSH
20287: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20291: LD_INT 3
20293: PPUSH
20294: LD_INT 2
20296: PPUSH
20297: LD_INT 0
20299: PPUSH
20300: LD_INT 1
20302: PPUSH
20303: CALL_OW 80
// end ; end ; end ;
20307: GO 20310
20309: POP
// end ; if Carry ( Heike ) then
20310: LD_EXP 38
20314: PPUSH
20315: CALL_OW 281
20319: IFFALSE 20395
// begin case GetSex ( guard ) of sex_male :
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 258
20330: PUSH
20331: LD_INT 1
20333: DOUBLE
20334: EQUAL
20335: IFTRUE 20339
20337: GO 20354
20339: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
20340: LD_VAR 0 1
20344: PPUSH
20345: LD_STRING DRum-FoodFail-1
20347: PPUSH
20348: CALL_OW 88
20352: GO 20378
20354: LD_INT 2
20356: DOUBLE
20357: EQUAL
20358: IFTRUE 20362
20360: GO 20377
20362: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
20363: LD_VAR 0 1
20367: PPUSH
20368: LD_STRING DRuf-FoodFail-2
20370: PPUSH
20371: CALL_OW 88
20375: GO 20378
20377: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
20378: LD_EXP 38
20382: PPUSH
20383: LD_INT 1
20385: PPUSH
20386: LD_INT 0
20388: PPUSH
20389: CALL_OW 290
// end else
20393: GO 20452
// begin case GetSex ( guard ) of sex_male :
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 258
20404: PUSH
20405: LD_INT 1
20407: DOUBLE
20408: EQUAL
20409: IFTRUE 20413
20411: GO 20428
20413: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
20414: LD_VAR 0 1
20418: PPUSH
20419: LD_STRING DRum-Seen-1
20421: PPUSH
20422: CALL_OW 88
20426: GO 20452
20428: LD_INT 2
20430: DOUBLE
20431: EQUAL
20432: IFTRUE 20436
20434: GO 20451
20436: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
20437: LD_VAR 0 1
20441: PPUSH
20442: LD_STRING DRuf-Seen-1
20444: PPUSH
20445: CALL_OW 88
20449: GO 20452
20451: POP
// end ; alone := ( units = 1 ) ;
20452: LD_ADDR_VAR 0 5
20456: PUSH
20457: LD_VAR 0 2
20461: PUSH
20462: LD_INT 1
20464: EQUAL
20465: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
20466: LD_STRING SurrenderInfo
20468: PPUSH
20469: CALL_OW 97
20473: PUSH
20474: LD_INT 1
20476: DOUBLE
20477: EQUAL
20478: IFTRUE 20482
20480: GO 20651
20482: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
20483: LD_INT 23
20485: PPUSH
20486: CALL_OW 87
// RemoveUnit ( Heike ) ;
20490: LD_EXP 38
20494: PPUSH
20495: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
20499: LD_EXP 38
20503: PPUSH
20504: LD_INT 23
20506: PPUSH
20507: CALL_OW 52
// if not alone then
20511: LD_VAR 0 5
20515: NOT
20516: IFFALSE 20571
// for i in units diff Heike do
20518: LD_ADDR_VAR 0 4
20522: PUSH
20523: LD_VAR 0 2
20527: PUSH
20528: LD_EXP 38
20532: DIFF
20533: PUSH
20534: FOR_IN
20535: IFFALSE 20569
// begin RemoveUnit ( i ) ;
20537: LD_VAR 0 4
20541: PPUSH
20542: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
20546: LD_VAR 0 4
20550: PPUSH
20551: LD_INT 114
20553: PPUSH
20554: LD_INT 17
20556: PPUSH
20557: LD_INT 10
20559: PPUSH
20560: LD_INT 0
20562: PPUSH
20563: CALL_OW 50
// end ;
20567: GO 20534
20569: POP
20570: POP
// wait ( 0 0$0.3 ) ;
20571: LD_INT 10
20573: PPUSH
20574: CALL_OW 67
// if alone then
20578: LD_VAR 0 5
20582: IFFALSE 20593
// Query ( CaughtInfoAlone ) else
20584: LD_STRING CaughtInfoAlone
20586: PPUSH
20587: CALL_OW 97
20591: GO 20600
// Query ( CaughtInfo ) ;
20593: LD_STRING CaughtInfo
20595: PPUSH
20596: CALL_OW 97
// wait ( 0 0$1 ) ;
20600: LD_INT 35
20602: PPUSH
20603: CALL_OW 67
// StartLockerMinigame ;
20607: CALL 18951 0 0
// Say ( Heike , DH-Reset ) ;
20611: LD_EXP 38
20615: PPUSH
20616: LD_STRING DH-Reset
20618: PPUSH
20619: CALL_OW 88
// DialogueOff ;
20623: CALL_OW 7
// InGameOff ;
20627: CALL_OW 9
// ComExitBuilding ( Heike ) ;
20631: LD_EXP 38
20635: PPUSH
20636: CALL_OW 122
// ComFree ( guard ) ;
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 139
// end ; 2 :
20649: GO 20833
20651: LD_INT 2
20653: DOUBLE
20654: EQUAL
20655: IFTRUE 20659
20657: GO 20832
20659: POP
// begin Say ( Heike , DH-Guard-2 ) ;
20660: LD_EXP 38
20664: PPUSH
20665: LD_STRING DH-Guard-2
20667: PPUSH
20668: CALL_OW 88
// DialogueOff ;
20672: CALL_OW 7
// wait ( 0 0$2 ) ;
20676: LD_INT 70
20678: PPUSH
20679: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20683: LD_INT 6
20685: PPUSH
20686: LD_INT 2
20688: PPUSH
20689: LD_INT 2
20691: PPUSH
20692: LD_INT 1
20694: PPUSH
20695: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_EXP 38
20708: PPUSH
20709: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20713: LD_VAR 0 1
20717: PPUSH
20718: CALL_OW 258
20722: PUSH
20723: LD_INT 1
20725: DOUBLE
20726: EQUAL
20727: IFTRUE 20731
20729: GO 20746
20731: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20732: LD_VAR 0 1
20736: PPUSH
20737: LD_STRING DRum-Fail-3
20739: PPUSH
20740: CALL_OW 88
20744: GO 20770
20746: LD_INT 2
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20769
20754: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20755: LD_VAR 0 1
20759: PPUSH
20760: LD_STRING DRum-Fail-3
20762: PPUSH
20763: CALL_OW 88
20767: GO 20770
20769: POP
// wait ( 0 0$5 ) ;
20770: LD_INT 175
20772: PPUSH
20773: CALL_OW 67
// if IsOk ( guard ) then
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 302
20786: IFFALSE 20798
// isAlarm := true else
20788: LD_ADDR_EXP 17
20792: PUSH
20793: LD_INT 1
20795: ST_TO_ADDR
20796: GO 20830
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20798: LD_INT 6
20800: PPUSH
20801: LD_INT 2
20803: PPUSH
20804: LD_INT 0
20806: PPUSH
20807: LD_INT 1
20809: PPUSH
20810: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20814: LD_INT 3
20816: PPUSH
20817: LD_INT 2
20819: PPUSH
20820: LD_INT 0
20822: PPUSH
20823: LD_INT 1
20825: PPUSH
20826: CALL_OW 80
// end ; end ; end ;
20830: GO 20833
20832: POP
// end ;
20833: LD_VAR 0 3
20837: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
20838: LD_EXP 14
20842: PPUSH
20843: LD_INT 22
20845: PUSH
20846: LD_INT 5
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 3
20855: PUSH
20856: LD_INT 101
20858: PUSH
20859: LD_INT 6
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 92
20872: PUSH
20873: LD_INT 113
20875: PUSH
20876: LD_INT 16
20878: PUSH
20879: LD_INT 12
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: PUSH
20888: LD_INT 91
20890: PUSH
20891: LD_EXP 38
20895: PUSH
20896: LD_INT 6
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: PPUSH
20910: CALL_OW 72
20914: PUSH
20915: LD_EXP 30
20919: NOT
20920: AND
20921: IFFALSE 21026
20923: GO 20925
20925: DISABLE
20926: LD_INT 0
20928: PPUSH
// begin enable ;
20929: ENABLE
// DialogueOn ;
20930: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
20934: LD_EXP 38
20938: PPUSH
20939: LD_STRING DH-Join-
20941: PUSH
20942: LD_INT 1
20944: PPUSH
20945: LD_INT 3
20947: PPUSH
20948: CALL_OW 12
20952: STR
20953: PPUSH
20954: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
20958: LD_ADDR_VAR 0 1
20962: PUSH
20963: LD_EXP 14
20967: PPUSH
20968: LD_INT 22
20970: PUSH
20971: LD_INT 5
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 91
20980: PUSH
20981: LD_EXP 38
20985: PUSH
20986: LD_INT 10
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PPUSH
20998: CALL_OW 72
21002: PUSH
21003: FOR_IN
21004: IFFALSE 21020
// SetSide ( i , 2 ) ;
21006: LD_VAR 0 1
21010: PPUSH
21011: LD_INT 2
21013: PPUSH
21014: CALL_OW 235
21018: GO 21003
21020: POP
21021: POP
// DialogueOff ;
21022: CALL_OW 7
// end ; end_of_file
21026: PPOPN 1
21028: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
21029: LD_EXP 17
21033: IFFALSE 21334
21035: GO 21037
21037: DISABLE
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
21042: PPUSH
// begin DialogueOn ;
21043: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
21047: LD_EXP 38
21051: PPUSH
21052: LD_STRING DH-Alarm-1
21054: PPUSH
21055: CALL_OW 88
// DialogueOff ;
21059: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
21063: LD_INT 1
21065: NEG
21066: PPUSH
21067: LD_INT 1
21069: NEG
21070: PPUSH
21071: LD_STRING alarm
21073: PPUSH
21074: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
21078: LD_INT 3
21080: PPUSH
21081: LD_INT 2
21083: PPUSH
21084: LD_INT 2
21086: PPUSH
21087: LD_INT 1
21089: PPUSH
21090: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21094: LD_INT 6
21096: PPUSH
21097: LD_INT 2
21099: PPUSH
21100: LD_INT 2
21102: PPUSH
21103: LD_INT 1
21105: PPUSH
21106: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
21110: LD_ADDR_VAR 0 2
21114: PUSH
21115: LD_INT 107
21117: PUSH
21118: LD_INT 39
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 143
21127: PUSH
21128: LD_INT 33
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 180
21137: PUSH
21138: LD_INT 115
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 96
21147: PUSH
21148: LD_INT 90
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 59
21157: PUSH
21158: LD_INT 52
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 16
21167: PUSH
21168: LD_INT 15
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 90
21177: PUSH
21178: LD_INT 120
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: LD_INT 22
21201: PUSH
21202: LD_INT 6
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 25
21211: PUSH
21212: LD_INT 1
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PPUSH
21223: CALL_OW 69
21227: ST_TO_ADDR
// for i in tmp do
21228: LD_ADDR_VAR 0 1
21232: PUSH
21233: LD_VAR 0 3
21237: PUSH
21238: FOR_IN
21239: IFFALSE 21307
// begin ComExit ( i ) ;
21241: LD_VAR 0 1
21245: PPUSH
21246: CALL 64579 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
21250: LD_VAR 0 1
21254: PPUSH
21255: LD_VAR 0 2
21259: PUSH
21260: LD_VAR 0 1
21264: PUSH
21265: LD_INT 7
21267: MOD
21268: PUSH
21269: LD_INT 1
21271: PLUS
21272: ARRAY
21273: PUSH
21274: LD_INT 1
21276: ARRAY
21277: PPUSH
21278: LD_VAR 0 2
21282: PUSH
21283: LD_VAR 0 1
21287: PUSH
21288: LD_INT 7
21290: MOD
21291: PUSH
21292: LD_INT 1
21294: PLUS
21295: ARRAY
21296: PUSH
21297: LD_INT 2
21299: ARRAY
21300: PPUSH
21301: CALL_OW 174
// end ;
21305: GO 21238
21307: POP
21308: POP
// Explode ;
21309: CALL 21337 0 0
// wait ( 0 0$45 ) ;
21313: LD_INT 1575
21315: PPUSH
21316: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
21320: LD_VAR 0 3
21324: PPUSH
21325: LD_EXP 38
21329: PPUSH
21330: CALL_OW 175
// end ;
21334: PPOPN 3
21336: END
// export function Explode ; var i , x , y , j ; begin
21337: LD_INT 0
21339: PPUSH
21340: PPUSH
21341: PPUSH
21342: PPUSH
21343: PPUSH
// if hasExplosionsInFactory then
21344: LD_EXP 7
21348: IFFALSE 21368
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
21350: LD_ADDR_EXP 29
21354: PUSH
21355: LD_EXP 29
21359: PPUSH
21360: LD_INT 61
21362: PPUSH
21363: CALL 64181 0 2
21367: ST_TO_ADDR
// if explosivePlantedList then
21368: LD_EXP 29
21372: IFFALSE 21520
// begin for i in explosivePlantedList do
21374: LD_ADDR_VAR 0 2
21378: PUSH
21379: LD_EXP 29
21383: PUSH
21384: FOR_IN
21385: IFFALSE 21488
// begin x := GetX ( i ) ;
21387: LD_ADDR_VAR 0 3
21391: PUSH
21392: LD_VAR 0 2
21396: PPUSH
21397: CALL_OW 250
21401: ST_TO_ADDR
// y := GetY ( i ) ;
21402: LD_ADDR_VAR 0 4
21406: PUSH
21407: LD_VAR 0 2
21411: PPUSH
21412: CALL_OW 251
21416: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
21417: LD_ADDR_VAR 0 5
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: LD_INT 5
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: PUSH
21436: FOR_IN
21437: IFFALSE 21484
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
21439: LD_VAR 0 3
21443: PPUSH
21444: LD_VAR 0 5
21448: PPUSH
21449: LD_INT 2
21451: PPUSH
21452: CALL_OW 272
21456: PPUSH
21457: LD_VAR 0 4
21461: PPUSH
21462: LD_VAR 0 5
21466: PPUSH
21467: LD_INT 2
21469: PPUSH
21470: CALL_OW 273
21474: PPUSH
21475: LD_INT 1
21477: PPUSH
21478: CALL_OW 453
21482: GO 21436
21484: POP
21485: POP
// end ;
21486: GO 21384
21488: POP
21489: POP
// Say ( Heike , DH-End-2 ) ;
21490: LD_EXP 38
21494: PPUSH
21495: LD_STRING DH-End-2
21497: PPUSH
21498: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
21502: LD_INT 175
21504: PUSH
21505: LD_EXP 29
21509: PPUSH
21510: CALL 28834 0 1
21514: MUL
21515: PPUSH
21516: CALL_OW 67
// end ; if not isAlarm then
21520: LD_EXP 17
21524: NOT
21525: IFFALSE 21535
// isAlarm := true ;
21527: LD_ADDR_EXP 17
21531: PUSH
21532: LD_INT 1
21534: ST_TO_ADDR
// end ;
21535: LD_VAR 0 1
21539: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
21540: LD_INT 22
21542: PUSH
21543: LD_INT 2
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PUSH
21550: LD_INT 21
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 2
21562: PUSH
21563: LD_INT 101
21565: PUSH
21566: LD_INT 3
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 101
21575: PUSH
21576: LD_INT 6
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: PPUSH
21593: CALL_OW 69
21597: IFFALSE 21610
21599: GO 21601
21601: DISABLE
// isAlarm := true ; end_of_file
21602: LD_ADDR_EXP 17
21606: PUSH
21607: LD_INT 1
21609: ST_TO_ADDR
21610: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
21611: LD_EXP 14
21615: PPUSH
21616: LD_INT 22
21618: PUSH
21619: LD_INT 2
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PPUSH
21626: CALL_OW 72
21630: PUSH
21631: LD_INT 3
21633: GREATER
21634: PUSH
21635: LD_EXP 17
21639: NOT
21640: AND
21641: IFFALSE 25493
21643: GO 21645
21645: DISABLE
21646: LD_INT 0
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
21652: LD_EXP 58
21656: PPUSH
21657: LD_INT 155
21659: PPUSH
21660: LD_INT 68
21662: PPUSH
21663: LD_INT 0
21665: PPUSH
21666: CALL_OW 48
// wait ( 0 0$1 ) ;
21670: LD_INT 35
21672: PPUSH
21673: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21677: LD_INT 35
21679: PPUSH
21680: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21684: LD_EXP 58
21688: PPUSH
21689: CALL_OW 314
21693: NOT
21694: IFFALSE 21710
// ComMoveUnit ( ruDisturb , Heike ) ;
21696: LD_EXP 58
21700: PPUSH
21701: LD_EXP 38
21705: PPUSH
21706: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21710: LD_EXP 38
21714: PPUSH
21715: LD_EXP 58
21719: PPUSH
21720: CALL_OW 296
21724: PUSH
21725: LD_INT 6
21727: LESS
21728: PUSH
21729: LD_EXP 58
21733: PPUSH
21734: CALL_OW 302
21738: AND
21739: IFFALSE 21677
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21741: LD_EXP 14
21745: PPUSH
21746: LD_INT 22
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 91
21758: PUSH
21759: LD_EXP 58
21763: PUSH
21764: LD_INT 8
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 2
21774: PUSH
21775: LD_INT 25
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 25
21787: PUSH
21788: LD_INT 11
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 25
21797: PUSH
21798: LD_INT 32
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 25
21807: PUSH
21808: LD_INT 34
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: LIST
21826: PPUSH
21827: CALL_OW 72
21831: IFFALSE 21841
// isAlarm := true ;
21833: LD_ADDR_EXP 17
21837: PUSH
21838: LD_INT 1
21840: ST_TO_ADDR
// if isAlarm then
21841: LD_EXP 17
21845: IFFALSE 21849
// exit ;
21847: GO 25493
// DialogueOn ;
21849: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
21853: LD_EXP 58
21857: PPUSH
21858: LD_STRING DMcn-Interrupt-1
21860: PPUSH
21861: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
21865: LD_EXP 58
21869: PPUSH
21870: LD_STRING DMcn-Interrupt-2
21872: PPUSH
21873: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
21877: LD_EXP 58
21881: PPUSH
21882: LD_STRING DMcn-Interrupt-3
21884: PPUSH
21885: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
21889: LD_EXP 38
21893: PPUSH
21894: LD_STRING DH-Interrupt-a-4
21896: PPUSH
21897: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
21901: LD_EXP 58
21905: PPUSH
21906: LD_STRING DMcn-Interrupt-a-5
21908: PPUSH
21909: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
21913: LD_EXP 38
21917: PPUSH
21918: LD_STRING DH-Interrupt-a-6
21920: PPUSH
21921: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
21925: LD_EXP 58
21929: PPUSH
21930: LD_STRING DMcn-Interrupt-a-7
21932: PPUSH
21933: CALL_OW 88
// DialogueOff ;
21937: CALL_OW 7
// hasMuchin := true ;
21941: LD_ADDR_EXP 30
21945: PUSH
21946: LD_INT 1
21948: ST_TO_ADDR
// Query ( MuchinInfo ) ;
21949: LD_STRING MuchinInfo
21951: PPUSH
21952: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
21956: LD_STRING M2a
21958: PPUSH
21959: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
21963: LD_INT 105
21965: PPUSH
21966: LD_INT 55
21968: PPUSH
21969: CALL_OW 428
21973: PPUSH
21974: LD_INT 2
21976: PPUSH
21977: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
21981: LD_INT 115
21983: PPUSH
21984: LD_INT 65
21986: PPUSH
21987: CALL_OW 428
21991: PPUSH
21992: LD_INT 2
21994: PPUSH
21995: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
21999: LD_INT 109
22001: PPUSH
22002: LD_INT 59
22004: PPUSH
22005: LD_INT 2
22007: PPUSH
22008: LD_INT 10
22010: NEG
22011: PPUSH
22012: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
22016: LD_INT 109
22018: PPUSH
22019: LD_INT 59
22021: PPUSH
22022: CALL_OW 84
// wait ( 0 0$2 ) ;
22026: LD_INT 70
22028: PPUSH
22029: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
22033: LD_INT 109
22035: PPUSH
22036: LD_INT 59
22038: PPUSH
22039: LD_INT 2
22041: PPUSH
22042: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
22046: LD_INT 35
22048: PPUSH
22049: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22053: LD_EXP 58
22057: PPUSH
22058: LD_EXP 38
22062: PPUSH
22063: CALL_OW 296
22067: PUSH
22068: LD_INT 6
22070: GREATER
22071: IFFALSE 22087
// ComMoveUnit ( ruDisturb , Heike ) ;
22073: LD_EXP 58
22077: PPUSH
22078: LD_EXP 38
22082: PPUSH
22083: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22087: LD_EXP 14
22091: PPUSH
22092: LD_INT 22
22094: PUSH
22095: LD_INT 2
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 91
22104: PUSH
22105: LD_EXP 58
22109: PUSH
22110: LD_INT 8
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 2
22120: PUSH
22121: LD_INT 25
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 25
22133: PUSH
22134: LD_INT 11
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 25
22143: PUSH
22144: LD_INT 32
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 25
22153: PUSH
22154: LD_INT 34
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: LIST
22172: PPUSH
22173: CALL_OW 72
22177: IFFALSE 22189
// begin isAlarm := true ;
22179: LD_ADDR_EXP 17
22183: PUSH
22184: LD_INT 1
22186: ST_TO_ADDR
// exit ;
22187: GO 25493
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
22189: LD_INT 105
22191: PPUSH
22192: LD_INT 55
22194: PPUSH
22195: CALL_OW 428
22199: NOT
22200: PUSH
22201: LD_INT 115
22203: PPUSH
22204: LD_INT 65
22206: PPUSH
22207: CALL_OW 428
22211: NOT
22212: OR
22213: IFFALSE 22225
// begin isAlarm := true ;
22215: LD_ADDR_EXP 17
22219: PUSH
22220: LD_INT 1
22222: ST_TO_ADDR
// exit ;
22223: GO 25493
// end ; until not BuildingsInProgress ( 2 ) ;
22225: LD_INT 2
22227: PPUSH
22228: CALL_OW 345
22232: NOT
22233: IFFALSE 22046
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
22235: LD_INT 105
22237: PPUSH
22238: LD_INT 55
22240: PPUSH
22241: CALL_OW 428
22245: PPUSH
22246: LD_INT 3
22248: PPUSH
22249: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
22253: LD_INT 115
22255: PPUSH
22256: LD_INT 65
22258: PPUSH
22259: CALL_OW 428
22263: PPUSH
22264: LD_INT 3
22266: PPUSH
22267: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
22271: LD_STRING M2a-out
22273: PPUSH
22274: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22278: LD_EXP 58
22282: PPUSH
22283: LD_INT 2
22285: PPUSH
22286: CALL_OW 120
// wait ( 0 0$3 ) ;
22290: LD_INT 105
22292: PPUSH
22293: CALL_OW 67
// hasMuchin := false ;
22297: LD_ADDR_EXP 30
22301: PUSH
22302: LD_INT 0
22304: ST_TO_ADDR
// wait ( 2 2$00 ) ;
22305: LD_INT 4200
22307: PPUSH
22308: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22312: LD_INT 35
22314: PPUSH
22315: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22319: LD_EXP 58
22323: PPUSH
22324: CALL_OW 314
22328: NOT
22329: IFFALSE 22345
// ComMoveUnit ( ruDisturb , Heike ) ;
22331: LD_EXP 58
22335: PPUSH
22336: LD_EXP 38
22340: PPUSH
22341: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22345: LD_EXP 38
22349: PPUSH
22350: LD_EXP 58
22354: PPUSH
22355: CALL_OW 296
22359: PUSH
22360: LD_INT 6
22362: LESS
22363: PUSH
22364: LD_EXP 58
22368: PPUSH
22369: CALL_OW 302
22373: AND
22374: IFFALSE 22312
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22376: LD_EXP 14
22380: PPUSH
22381: LD_INT 22
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 91
22393: PUSH
22394: LD_EXP 58
22398: PUSH
22399: LD_INT 8
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 25
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 25
22422: PUSH
22423: LD_INT 11
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 25
22432: PUSH
22433: LD_INT 32
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 34
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: LIST
22461: PPUSH
22462: CALL_OW 72
22466: IFFALSE 22476
// isAlarm := true ;
22468: LD_ADDR_EXP 17
22472: PUSH
22473: LD_INT 1
22475: ST_TO_ADDR
// if isAlarm then
22476: LD_EXP 17
22480: IFFALSE 22484
// exit ;
22482: GO 25493
// DialogueOn ;
22484: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22488: LD_EXP 58
22492: PPUSH
22493: LD_STRING DMcn-Interrupt-1
22495: PPUSH
22496: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22500: LD_EXP 58
22504: PPUSH
22505: LD_STRING DMcn-Interrupt-2
22507: PPUSH
22508: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
22512: LD_INT 176
22514: PPUSH
22515: LD_INT 54
22517: PPUSH
22518: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
22522: LD_INT 176
22524: PPUSH
22525: LD_INT 54
22527: PPUSH
22528: LD_INT 2
22530: PPUSH
22531: LD_INT 6
22533: NEG
22534: PPUSH
22535: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
22539: LD_INT 10
22541: PPUSH
22542: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
22546: LD_EXP 58
22550: PPUSH
22551: LD_STRING DMcn-Interrupt-b-3
22553: PPUSH
22554: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
22558: LD_EXP 38
22562: PPUSH
22563: LD_STRING DH-Interrupt-b-4
22565: PPUSH
22566: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
22570: LD_EXP 58
22574: PPUSH
22575: LD_STRING DMcn-Interrupt-b-5
22577: PPUSH
22578: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
22582: LD_EXP 38
22586: PPUSH
22587: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
22591: LD_INT 176
22593: PPUSH
22594: LD_INT 54
22596: PPUSH
22597: LD_INT 2
22599: PPUSH
22600: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
22604: LD_EXP 58
22608: PPUSH
22609: LD_STRING DMcn-Interrupt-b-6
22611: PPUSH
22612: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
22616: LD_EXP 38
22620: PPUSH
22621: LD_STRING DH-Interrupt-b-7
22623: PPUSH
22624: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
22628: LD_EXP 58
22632: PPUSH
22633: LD_STRING DMcn-Interrupt-b-8
22635: PPUSH
22636: CALL_OW 88
// DialogueOff ;
22640: CALL_OW 7
// Query ( MuchinInfo ) ;
22644: LD_STRING MuchinInfo
22646: PPUSH
22647: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
22651: LD_STRING M2b
22653: PPUSH
22654: CALL_OW 337
// hasMuchin := true ;
22658: LD_ADDR_EXP 30
22662: PUSH
22663: LD_INT 1
22665: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22666: LD_INT 35
22668: PPUSH
22669: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22673: LD_EXP 58
22677: PPUSH
22678: LD_EXP 38
22682: PPUSH
22683: CALL_OW 296
22687: PUSH
22688: LD_INT 6
22690: GREATER
22691: IFFALSE 22707
// ComMoveUnit ( ruDisturb , Heike ) ;
22693: LD_EXP 58
22697: PPUSH
22698: LD_EXP 38
22702: PPUSH
22703: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22707: LD_EXP 14
22711: PPUSH
22712: LD_INT 22
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: PUSH
22722: LD_INT 91
22724: PUSH
22725: LD_EXP 58
22729: PUSH
22730: LD_INT 8
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 2
22740: PUSH
22741: LD_INT 25
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 25
22753: PUSH
22754: LD_INT 11
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 25
22763: PUSH
22764: LD_INT 32
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 25
22773: PUSH
22774: LD_INT 34
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: PPUSH
22793: CALL_OW 72
22797: IFFALSE 22809
// begin isAlarm := true ;
22799: LD_ADDR_EXP 17
22803: PUSH
22804: LD_INT 1
22806: ST_TO_ADDR
// exit ;
22807: GO 25493
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
22809: LD_EXP 38
22813: PPUSH
22814: LD_INT 61
22816: PPUSH
22817: CALL_OW 296
22821: PUSH
22822: LD_INT 4
22824: LESS
22825: IFFALSE 22666
// InGameOn ;
22827: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
22831: LD_INT 173
22833: PPUSH
22834: LD_INT 54
22836: PPUSH
22837: LD_INT 2
22839: PPUSH
22840: LD_INT 8
22842: NEG
22843: PPUSH
22844: CALL_OW 330
// SetSide ( Heike , 3 ) ;
22848: LD_EXP 38
22852: PPUSH
22853: LD_INT 3
22855: PPUSH
22856: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
22860: LD_EXP 38
22864: PPUSH
22865: LD_INT 61
22867: PPUSH
22868: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
22872: LD_EXP 58
22876: PPUSH
22877: LD_INT 61
22879: PPUSH
22880: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
22884: LD_EXP 45
22888: PUSH
22889: LD_EXP 14
22893: IN
22894: PUSH
22895: LD_EXP 45
22899: PPUSH
22900: LD_INT 61
22902: PPUSH
22903: CALL_OW 296
22907: PUSH
22908: LD_INT 12
22910: LESS
22911: AND
22912: IFFALSE 22956
// begin SetSide ( Markov , 3 ) ;
22914: LD_EXP 45
22918: PPUSH
22919: LD_INT 3
22921: PPUSH
22922: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
22926: LD_EXP 45
22930: PPUSH
22931: LD_INT 61
22933: PPUSH
22934: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
22938: LD_INT 35
22940: PPUSH
22941: CALL_OW 67
// until IsInUnit ( Markov ) ;
22945: LD_EXP 45
22949: PPUSH
22950: CALL_OW 310
22954: IFFALSE 22938
// end ; repeat wait ( 0 0$1 ) ;
22956: LD_INT 35
22958: PPUSH
22959: CALL_OW 67
// until IsInUnit ( Heike ) ;
22963: LD_EXP 38
22967: PPUSH
22968: CALL_OW 310
22972: IFFALSE 22956
// SetClass ( Heike , class_mechanic ) ;
22974: LD_EXP 38
22978: PPUSH
22979: LD_INT 3
22981: PPUSH
22982: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
22986: LD_INT 61
22988: PPUSH
22989: LD_INT 21
22991: PPUSH
22992: LD_INT 3
22994: PPUSH
22995: LD_INT 3
22997: PPUSH
22998: LD_INT 43
23000: PPUSH
23001: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
23005: LD_EXP 31
23009: PUSH
23010: LD_EXP 45
23014: PUSH
23015: LD_EXP 14
23019: IN
23020: PUSH
23021: LD_EXP 45
23025: PPUSH
23026: CALL_OW 310
23030: PUSH
23031: LD_INT 61
23033: EQUAL
23034: OR
23035: AND
23036: IFFALSE 23504
// begin wait ( 0 0$5 ) ;
23038: LD_INT 175
23040: PPUSH
23041: CALL_OW 67
// SetSide ( Heike , 2 ) ;
23045: LD_EXP 38
23049: PPUSH
23050: LD_INT 2
23052: PPUSH
23053: CALL_OW 235
// SetSide ( Markov , 2 ) ;
23057: LD_EXP 45
23061: PPUSH
23062: LD_INT 2
23064: PPUSH
23065: CALL_OW 235
// if not Markov in heikeSquad then
23069: LD_EXP 45
23073: PUSH
23074: LD_EXP 14
23078: IN
23079: NOT
23080: IFFALSE 23102
// heikeSquad := Join ( heikeSquad , Markov ) ;
23082: LD_ADDR_EXP 14
23086: PUSH
23087: LD_EXP 14
23091: PPUSH
23092: LD_EXP 45
23096: PPUSH
23097: CALL 64181 0 2
23101: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
23102: LD_EXP 45
23106: PPUSH
23107: LD_STRING DMar-Factory-1
23109: PPUSH
23110: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
23114: LD_INT 61
23116: PPUSH
23117: LD_INT 99
23119: PPUSH
23120: CALL_OW 329
// game_speed := 4 ;
23124: LD_ADDR_OWVAR 65
23128: PUSH
23129: LD_INT 4
23131: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
23132: LD_EXP 58
23136: PPUSH
23137: CALL_OW 122
// ComExitBuilding ( Markov ) ;
23141: LD_EXP 45
23145: PPUSH
23146: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
23150: LD_EXP 58
23154: PPUSH
23155: LD_INT 171
23157: PPUSH
23158: LD_INT 51
23160: PPUSH
23161: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
23165: LD_EXP 45
23169: PPUSH
23170: LD_INT 167
23172: PPUSH
23173: LD_INT 50
23175: PPUSH
23176: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
23180: LD_EXP 45
23184: PPUSH
23185: LD_EXP 58
23189: PPUSH
23190: CALL_OW 179
// wait ( 0 0$5 ) ;
23194: LD_INT 175
23196: PPUSH
23197: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
23201: LD_EXP 45
23205: PPUSH
23206: LD_STRING DMar-Factory-2
23208: PPUSH
23209: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
23213: LD_ADDR_VAR 0 2
23217: PUSH
23218: LD_INT 22
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 33
23230: PUSH
23231: LD_INT 3
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PPUSH
23242: CALL_OW 69
23246: PUSH
23247: LD_INT 1
23249: ARRAY
23250: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
23251: LD_EXP 58
23255: PPUSH
23256: LD_VAR 0 2
23260: PPUSH
23261: CALL_OW 119
// async ;
23265: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
23266: LD_EXP 58
23270: PPUSH
23271: LD_STRING DMcn-Factory-3
23273: PPUSH
23274: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
23278: LD_VAR 0 2
23282: PPUSH
23283: LD_EXP 58
23287: PPUSH
23288: CALL_OW 115
// sync ;
23292: SYNC
// wait ( 0 0$1 ) ;
23293: LD_INT 35
23295: PPUSH
23296: CALL_OW 67
// KillUnit ( ruDisturb ) ;
23300: LD_EXP 58
23304: PPUSH
23305: CALL_OW 66
// SetSide ( veh , 7 ) ;
23309: LD_VAR 0 2
23313: PPUSH
23314: LD_INT 7
23316: PPUSH
23317: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
23321: LD_VAR 0 2
23325: PPUSH
23326: LD_INT 84
23328: PPUSH
23329: LD_INT 38
23331: PPUSH
23332: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
23336: LD_EXP 59
23340: PUSH
23341: LD_INT 1
23343: ARRAY
23344: PPUSH
23345: CALL_OW 258
23349: PUSH
23350: LD_INT 1
23352: EQUAL
23353: IFFALSE 23373
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
23355: LD_EXP 59
23359: PUSH
23360: LD_INT 1
23362: ARRAY
23363: PPUSH
23364: LD_STRING DRum-Factory-4
23366: PPUSH
23367: CALL_OW 88
23371: GO 23389
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
23373: LD_EXP 59
23377: PUSH
23378: LD_INT 1
23380: ARRAY
23381: PPUSH
23382: LD_STRING DRuf-Factory-4
23384: PPUSH
23385: CALL_OW 88
// wait ( 0 0$1 ) ;
23389: LD_INT 35
23391: PPUSH
23392: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
23396: LD_EXP 59
23400: PPUSH
23401: LD_INT 26
23403: PUSH
23404: LD_INT 1
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PPUSH
23411: CALL_OW 72
23415: PUSH
23416: LD_INT 1
23418: ARRAY
23419: PPUSH
23420: LD_STRING DRum-Factory-6
23422: PPUSH
23423: CALL_OW 88
// wait ( 0 0$2 ) ;
23427: LD_INT 70
23429: PPUSH
23430: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
23434: LD_EXP 38
23438: PPUSH
23439: LD_INT 33
23441: PPUSH
23442: CALL_OW 336
// ComExitBuilding ( Heike ) ;
23446: LD_EXP 38
23450: PPUSH
23451: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23455: LD_EXP 38
23459: PPUSH
23460: LD_INT 168
23462: PPUSH
23463: LD_INT 54
23465: PPUSH
23466: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23470: LD_INT 173
23472: PPUSH
23473: LD_INT 54
23475: PPUSH
23476: LD_INT 2
23478: PPUSH
23479: CALL_OW 331
// InGameOff ;
23483: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
23487: LD_STRING M2b-out
23489: PPUSH
23490: CALL_OW 337
// hasMuchin := false ;
23494: LD_ADDR_EXP 30
23498: PUSH
23499: LD_INT 0
23501: ST_TO_ADDR
// exit ;
23502: GO 25493
// end ; wait ( 0 0$5 ) ;
23504: LD_INT 175
23506: PPUSH
23507: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
23511: LD_INT 61
23513: PPUSH
23514: LD_INT 99
23516: PPUSH
23517: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
23521: LD_EXP 45
23525: PUSH
23526: LD_EXP 14
23530: IN
23531: PUSH
23532: LD_EXP 45
23536: PPUSH
23537: CALL_OW 255
23541: PUSH
23542: LD_INT 3
23544: EQUAL
23545: AND
23546: IFFALSE 23569
// begin SetSide ( Markov , 2 ) ;
23548: LD_EXP 45
23552: PPUSH
23553: LD_INT 2
23555: PPUSH
23556: CALL_OW 235
// ComExitBuilding ( Markov ) ;
23560: LD_EXP 45
23564: PPUSH
23565: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
23569: LD_EXP 38
23573: PPUSH
23574: LD_INT 2
23576: PPUSH
23577: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
23581: LD_EXP 38
23585: PPUSH
23586: LD_INT 33
23588: PPUSH
23589: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
23593: LD_EXP 58
23597: PPUSH
23598: CALL_OW 122
// ComExitBuilding ( Heike ) ;
23602: LD_EXP 38
23606: PPUSH
23607: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
23611: LD_EXP 38
23615: PPUSH
23616: LD_INT 168
23618: PPUSH
23619: LD_INT 54
23621: PPUSH
23622: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
23626: LD_INT 173
23628: PPUSH
23629: LD_INT 54
23631: PPUSH
23632: LD_INT 2
23634: PPUSH
23635: CALL_OW 331
// InGameOff ;
23639: CALL_OW 9
// wait ( 3 ) ;
23643: LD_INT 3
23645: PPUSH
23646: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
23650: LD_EXP 58
23654: PPUSH
23655: LD_INT 2
23657: PPUSH
23658: CALL_OW 120
// wait ( 0 0$3 ) ;
23662: LD_INT 105
23664: PPUSH
23665: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
23669: LD_STRING M2b-out
23671: PPUSH
23672: CALL_OW 337
// hasMuchin := false ;
23676: LD_ADDR_EXP 30
23680: PUSH
23681: LD_INT 0
23683: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23684: LD_INT 4200
23686: PPUSH
23687: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23691: LD_INT 35
23693: PPUSH
23694: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23698: LD_EXP 58
23702: PPUSH
23703: CALL_OW 314
23707: NOT
23708: IFFALSE 23724
// ComMoveUnit ( ruDisturb , Heike ) ;
23710: LD_EXP 58
23714: PPUSH
23715: LD_EXP 38
23719: PPUSH
23720: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
23724: LD_EXP 38
23728: PPUSH
23729: LD_EXP 58
23733: PPUSH
23734: CALL_OW 296
23738: PUSH
23739: LD_INT 2
23741: LESS
23742: PUSH
23743: LD_EXP 58
23747: PPUSH
23748: CALL_OW 302
23752: AND
23753: IFFALSE 23691
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23755: LD_EXP 14
23759: PPUSH
23760: LD_INT 22
23762: PUSH
23763: LD_INT 2
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 91
23772: PUSH
23773: LD_EXP 58
23777: PUSH
23778: LD_INT 8
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 25
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 25
23801: PUSH
23802: LD_INT 11
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 25
23811: PUSH
23812: LD_INT 32
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: PUSH
23819: LD_INT 25
23821: PUSH
23822: LD_INT 34
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: LIST
23840: PPUSH
23841: CALL_OW 72
23845: IFFALSE 23855
// isAlarm := true ;
23847: LD_ADDR_EXP 17
23851: PUSH
23852: LD_INT 1
23854: ST_TO_ADDR
// if isAlarm then
23855: LD_EXP 17
23859: IFFALSE 23863
// exit ;
23861: GO 25493
// ComTurnUnit ( Heike , ruDisturb ) ;
23863: LD_EXP 38
23867: PPUSH
23868: LD_EXP 58
23872: PPUSH
23873: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
23877: LD_EXP 58
23881: PPUSH
23882: LD_EXP 38
23886: PPUSH
23887: CALL_OW 119
// wait ( 3 ) ;
23891: LD_INT 3
23893: PPUSH
23894: CALL_OW 67
// for i := 1 to 3 do
23898: LD_ADDR_VAR 0 1
23902: PUSH
23903: DOUBLE
23904: LD_INT 1
23906: DEC
23907: ST_TO_ADDR
23908: LD_INT 3
23910: PUSH
23911: FOR_TO
23912: IFFALSE 23929
// CreateCratesArea ( 5 , cratesArea , false ) ;
23914: LD_INT 5
23916: PPUSH
23917: LD_INT 58
23919: PPUSH
23920: LD_INT 0
23922: PPUSH
23923: CALL_OW 55
23927: GO 23911
23929: POP
23930: POP
// uc_side := 3 ;
23931: LD_ADDR_OWVAR 20
23935: PUSH
23936: LD_INT 3
23938: ST_TO_ADDR
// uc_nation := nation_russian ;
23939: LD_ADDR_OWVAR 21
23943: PUSH
23944: LD_INT 3
23946: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
23947: LD_INT 21
23949: PPUSH
23950: LD_INT 3
23952: PPUSH
23953: LD_INT 1
23955: PPUSH
23956: LD_INT 51
23958: PPUSH
23959: LD_INT 100
23961: PPUSH
23962: CALL 31747 0 5
// veh := CreateVehicle ;
23966: LD_ADDR_VAR 0 2
23970: PUSH
23971: CALL_OW 45
23975: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
23976: LD_VAR 0 2
23980: PPUSH
23981: LD_INT 104
23983: PPUSH
23984: LD_INT 41
23986: PPUSH
23987: LD_INT 3
23989: PPUSH
23990: LD_INT 0
23992: PPUSH
23993: CALL 66321 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
23997: LD_VAR 0 2
24001: PPUSH
24002: LD_INT 1
24004: PPUSH
24005: LD_INT 100
24007: PPUSH
24008: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
24012: CALL_OW 44
24016: PPUSH
24017: LD_VAR 0 2
24021: PPUSH
24022: CALL_OW 52
// DialogueOn ;
24026: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24030: LD_EXP 58
24034: PPUSH
24035: LD_STRING DMcn-Interrupt-1
24037: PPUSH
24038: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24042: LD_EXP 58
24046: PPUSH
24047: LD_STRING DMcn-Interrupt-2
24049: PPUSH
24050: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
24054: LD_EXP 58
24058: PPUSH
24059: LD_STRING DMcn-Interrupt-c-3
24061: PPUSH
24062: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
24066: LD_INT 101
24068: PPUSH
24069: LD_INT 38
24071: PPUSH
24072: LD_INT 2
24074: PPUSH
24075: LD_INT 10
24077: NEG
24078: PPUSH
24079: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
24083: LD_INT 101
24085: PPUSH
24086: LD_INT 38
24088: PPUSH
24089: CALL_OW 84
// wait ( 0 0$2 ) ;
24093: LD_INT 70
24095: PPUSH
24096: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
24100: LD_INT 101
24102: PPUSH
24103: LD_INT 38
24105: PPUSH
24106: LD_INT 2
24108: PPUSH
24109: CALL_OW 331
// RemoveUnit ( veh ) ;
24113: LD_VAR 0 2
24117: PPUSH
24118: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
24122: LD_EXP 58
24126: PPUSH
24127: LD_STRING DMcn-Interrupt-c-4
24129: PPUSH
24130: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
24134: LD_EXP 38
24138: PPUSH
24139: LD_STRING DH-Interrupt-c-5
24141: PPUSH
24142: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
24146: LD_EXP 58
24150: PPUSH
24151: LD_STRING DMcn-Interrupt-c-6
24153: PPUSH
24154: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
24158: LD_EXP 38
24162: PPUSH
24163: LD_STRING DH-Interrupt-c-7
24165: PPUSH
24166: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
24170: LD_EXP 58
24174: PPUSH
24175: LD_STRING DMcn-Interrupt-c-8
24177: PPUSH
24178: CALL_OW 88
// DialogueOff ;
24182: CALL_OW 7
// hasMuchin := true ;
24186: LD_ADDR_EXP 30
24190: PUSH
24191: LD_INT 1
24193: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24194: LD_STRING MuchinInfo
24196: PPUSH
24197: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
24201: LD_STRING M2c
24203: PPUSH
24204: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
24208: LD_INT 35
24210: PPUSH
24211: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24215: LD_EXP 58
24219: PPUSH
24220: LD_EXP 38
24224: PPUSH
24225: CALL_OW 296
24229: PUSH
24230: LD_INT 6
24232: GREATER
24233: IFFALSE 24249
// ComMoveUnit ( ruDisturb , Heike ) ;
24235: LD_EXP 58
24239: PPUSH
24240: LD_EXP 38
24244: PPUSH
24245: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24249: LD_EXP 14
24253: PPUSH
24254: LD_INT 22
24256: PUSH
24257: LD_INT 2
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 91
24266: PUSH
24267: LD_EXP 58
24271: PUSH
24272: LD_INT 8
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 25
24285: PUSH
24286: LD_INT 1
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 25
24295: PUSH
24296: LD_INT 11
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: LD_INT 25
24305: PUSH
24306: LD_INT 32
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 25
24315: PUSH
24316: LD_INT 34
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: PPUSH
24335: CALL_OW 72
24339: IFFALSE 24351
// begin isAlarm := true ;
24341: LD_ADDR_EXP 17
24345: PUSH
24346: LD_INT 1
24348: ST_TO_ADDR
// exit ;
24349: GO 25493
// end ; until UnitFilter ( heikeSquad , [ f_dist , ruOutpost0 , 6 ] ) and GetDistUnits ( Heike , ruOutpost0 ) < 6 ;
24351: LD_EXP 14
24355: PPUSH
24356: LD_INT 91
24358: PUSH
24359: LD_INT 6
24361: PUSH
24362: LD_INT 6
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: PPUSH
24370: CALL_OW 72
24374: PUSH
24375: LD_EXP 38
24379: PPUSH
24380: LD_INT 6
24382: PPUSH
24383: CALL_OW 296
24387: PUSH
24388: LD_INT 6
24390: LESS
24391: AND
24392: IFFALSE 24208
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
24394: LD_ADDR_VAR 0 3
24398: PUSH
24399: LD_EXP 14
24403: PUSH
24404: LD_EXP 38
24408: UNION
24409: PPUSH
24410: LD_INT 25
24412: PUSH
24413: LD_INT 33
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 91
24422: PUSH
24423: LD_INT 6
24425: PUSH
24426: LD_INT 12
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PPUSH
24438: CALL_OW 72
24442: ST_TO_ADDR
// for i in tmp do
24443: LD_ADDR_VAR 0 1
24447: PUSH
24448: LD_VAR 0 3
24452: PUSH
24453: FOR_IN
24454: IFFALSE 24485
// begin SetSide ( i , 3 ) ;
24456: LD_VAR 0 1
24460: PPUSH
24461: LD_INT 3
24463: PPUSH
24464: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
24468: LD_VAR 0 1
24472: PPUSH
24473: LD_INT 101
24475: PPUSH
24476: LD_INT 38
24478: PPUSH
24479: CALL_OW 111
// end ;
24483: GO 24453
24485: POP
24486: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
24487: LD_EXP 58
24491: PPUSH
24492: LD_INT 104
24494: PPUSH
24495: LD_INT 37
24497: PPUSH
24498: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24502: LD_EXP 58
24506: PPUSH
24507: LD_EXP 38
24511: PPUSH
24512: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
24516: LD_INT 35
24518: PPUSH
24519: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
24523: LD_ADDR_VAR 0 4
24527: PUSH
24528: LD_INT 58
24530: PPUSH
24531: CALL_OW 435
24535: ST_TO_ADDR
// for i in tmp do
24536: LD_ADDR_VAR 0 1
24540: PUSH
24541: LD_VAR 0 3
24545: PUSH
24546: FOR_IN
24547: IFFALSE 24590
// if not HasTask ( i ) then
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 314
24558: NOT
24559: IFFALSE 24588
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
24561: LD_VAR 0 1
24565: PPUSH
24566: LD_VAR 0 4
24570: PUSH
24571: LD_INT 1
24573: ARRAY
24574: PPUSH
24575: LD_VAR 0 4
24579: PUSH
24580: LD_INT 2
24582: ARRAY
24583: PPUSH
24584: CALL_OW 117
24588: GO 24546
24590: POP
24591: POP
// until not cr ;
24592: LD_VAR 0 4
24596: NOT
24597: IFFALSE 24516
// wait ( 0 0$2 ) ;
24599: LD_INT 70
24601: PPUSH
24602: CALL_OW 67
// for i in tmp do
24606: LD_ADDR_VAR 0 1
24610: PUSH
24611: LD_VAR 0 3
24615: PUSH
24616: FOR_IN
24617: IFFALSE 24633
// SetSide ( i , 2 ) ;
24619: LD_VAR 0 1
24623: PPUSH
24624: LD_INT 2
24626: PPUSH
24627: CALL_OW 235
24631: GO 24616
24633: POP
24634: POP
// if Kaia in tmp then
24635: LD_EXP 43
24639: PUSH
24640: LD_VAR 0 3
24644: IN
24645: IFFALSE 24915
// begin InGameOn ;
24647: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
24651: LD_EXP 43
24655: PPUSH
24656: LD_EXP 58
24660: PPUSH
24661: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
24665: LD_EXP 58
24669: PPUSH
24670: LD_EXP 43
24674: PPUSH
24675: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
24679: LD_EXP 43
24683: PPUSH
24684: LD_EXP 58
24688: PPUSH
24689: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
24693: LD_EXP 43
24697: PPUSH
24698: LD_STRING DK-Assassin-1
24700: PPUSH
24701: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
24705: LD_EXP 58
24709: PPUSH
24710: LD_STRING DMcn-Assassin-2
24712: PPUSH
24713: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
24717: LD_EXP 43
24721: PPUSH
24722: LD_STRING DK-Assassin-3
24724: PPUSH
24725: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
24729: LD_EXP 58
24733: PPUSH
24734: LD_STRING DMcn-Assassin-4
24736: PPUSH
24737: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
24741: LD_EXP 43
24745: PPUSH
24746: LD_STRING DK-Assassin-5
24748: PPUSH
24749: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
24753: LD_EXP 58
24757: PPUSH
24758: LD_STRING DMcn-Assassin-6
24760: PPUSH
24761: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
24765: LD_EXP 43
24769: PUSH
24770: LD_EXP 58
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PPUSH
24779: LD_INT 6
24781: PPUSH
24782: CALL_OW 120
// wait ( 0 0$5 ) ;
24786: LD_INT 175
24788: PPUSH
24789: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
24793: LD_EXP 43
24797: PPUSH
24798: LD_STRING DK-Assassin-7
24800: PPUSH
24801: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
24805: LD_EXP 58
24809: PPUSH
24810: LD_STRING DMcn-Assassin-8
24812: PPUSH
24813: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24817: LD_INT 10
24819: PPUSH
24820: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
24824: LD_EXP 43
24828: PPUSH
24829: LD_STRING DK-Assassin-9
24831: PPUSH
24832: CALL_OW 88
// wait ( 0 0$2 ) ;
24836: LD_INT 70
24838: PPUSH
24839: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
24843: LD_EXP 43
24847: PPUSH
24848: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
24852: LD_EXP 58
24856: PPUSH
24857: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
24861: LD_EXP 43
24865: PPUSH
24866: LD_EXP 38
24870: PPUSH
24871: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
24875: LD_EXP 43
24879: PPUSH
24880: LD_STRING DK-Assasin-10
24882: PPUSH
24883: CALL_OW 88
// InGameOff ;
24887: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
24891: LD_STRING M2c-out
24893: PPUSH
24894: CALL_OW 337
// wait ( 0 0$3 ) ;
24898: LD_INT 105
24900: PPUSH
24901: CALL_OW 67
// hasMuchin := false ;
24905: LD_ADDR_EXP 30
24909: PUSH
24910: LD_INT 0
24912: ST_TO_ADDR
// exit ;
24913: GO 25493
// end ; ChangeMissionObjectives ( M2c-out ) ;
24915: LD_STRING M2c-out
24917: PPUSH
24918: CALL_OW 337
// InGameOn ;
24922: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
24926: LD_EXP 58
24930: PPUSH
24931: LD_STRING DMcn-Fail-1
24933: PPUSH
24934: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
24938: LD_VAR 0 3
24942: PPUSH
24943: LD_INT 114
24945: PPUSH
24946: LD_INT 17
24948: PPUSH
24949: CALL_OW 111
// wait ( 0 0$1 ) ;
24953: LD_INT 35
24955: PPUSH
24956: CALL_OW 67
// async ;
24960: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
24961: LD_EXP 58
24965: PPUSH
24966: LD_EXP 38
24970: PPUSH
24971: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
24975: LD_EXP 58
24979: PPUSH
24980: LD_STRING DMcn-Fail-2
24982: PPUSH
24983: CALL_OW 88
// ComStop ( Heike ) ;
24987: LD_EXP 38
24991: PPUSH
24992: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
24996: LD_EXP 38
25000: PPUSH
25001: LD_EXP 58
25005: PPUSH
25006: CALL_OW 179
// sync ;
25010: SYNC
// Say ( Heike , DH-Fail-3 ) ;
25011: LD_EXP 38
25015: PPUSH
25016: LD_STRING DH-Fail-3
25018: PPUSH
25019: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
25023: LD_EXP 58
25027: PPUSH
25028: LD_STRING DMcn-Fail-4
25030: PPUSH
25031: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
25035: LD_EXP 38
25039: PUSH
25040: LD_EXP 58
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PPUSH
25049: LD_INT 41
25051: PPUSH
25052: LD_INT 19
25054: PPUSH
25055: CALL_OW 111
// wait ( 0 0$2 ) ;
25059: LD_INT 70
25061: PPUSH
25062: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
25066: LD_EXP 58
25070: PPUSH
25071: LD_INT 40
25073: PPUSH
25074: LD_INT 19
25076: PPUSH
25077: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
25081: LD_EXP 38
25085: PPUSH
25086: LD_INT 43
25088: PPUSH
25089: LD_INT 21
25091: PPUSH
25092: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25096: LD_EXP 58
25100: PPUSH
25101: LD_EXP 38
25105: PPUSH
25106: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
25110: LD_EXP 38
25114: PPUSH
25115: LD_EXP 58
25119: PPUSH
25120: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
25124: LD_INT 3
25126: PPUSH
25127: CALL_OW 427
// wait ( 0 0$2 ) ;
25131: LD_INT 70
25133: PPUSH
25134: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
25138: LD_EXP 58
25142: PPUSH
25143: LD_STRING DMcn-Fail-5
25145: PPUSH
25146: CALL_OW 88
// wait ( 0 0$2 ) ;
25150: LD_INT 70
25152: PPUSH
25153: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
25157: LD_EXP 58
25161: PPUSH
25162: LD_STRING DMcn-Fail-6
25164: PPUSH
25165: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25169: LD_INT 35
25171: PPUSH
25172: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
25176: LD_EXP 38
25180: PPUSH
25181: LD_INT 43
25183: PPUSH
25184: LD_INT 21
25186: PPUSH
25187: CALL_OW 307
25191: IFFALSE 25169
// case Query ( MuchinQuestion ) of 1 :
25193: LD_STRING MuchinQuestion
25195: PPUSH
25196: CALL_OW 97
25200: PUSH
25201: LD_INT 1
25203: DOUBLE
25204: EQUAL
25205: IFTRUE 25209
25207: GO 25309
25209: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
25210: LD_EXP 58
25214: PPUSH
25215: LD_STRING DMcn-Fail-7
25217: PPUSH
25218: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
25222: LD_EXP 38
25226: PPUSH
25227: LD_STRING DH-Fail-8
25229: PPUSH
25230: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25234: LD_INT 10
25236: PPUSH
25237: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
25241: LD_EXP 38
25245: PPUSH
25246: LD_STRING DH-Fail-9
25248: PPUSH
25249: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
25253: LD_EXP 38
25257: PPUSH
25258: LD_STRING DH-Fail-10
25260: PPUSH
25261: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
25265: LD_EXP 58
25269: PPUSH
25270: LD_STRING DMcn-Fail-11
25272: PPUSH
25273: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
25277: LD_EXP 58
25281: PPUSH
25282: LD_EXP 38
25286: PPUSH
25287: CALL_OW 115
// wait ( 0 0$2 ) ;
25291: LD_INT 70
25293: PPUSH
25294: CALL_OW 67
// KillUnit ( Heike ) ;
25298: LD_EXP 38
25302: PPUSH
25303: CALL_OW 66
// end ; 2 :
25307: GO 25489
25309: LD_INT 2
25311: DOUBLE
25312: EQUAL
25313: IFTRUE 25317
25315: GO 25488
25317: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
25318: LD_EXP 38
25322: PPUSH
25323: LD_STRING DH-Fail-a-8
25325: PPUSH
25326: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
25330: LD_EXP 38
25334: PPUSH
25335: LD_STRING DH-Fail-a-9
25337: PPUSH
25338: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
25342: LD_EXP 58
25346: PPUSH
25347: LD_STRING DH-Fail-10
25349: PPUSH
25350: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
25354: LD_EXP 38
25358: PPUSH
25359: LD_STRING DH-Fail-a-11
25361: PPUSH
25362: CALL_OW 88
// async ;
25366: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25367: LD_EXP 58
25371: PPUSH
25372: LD_EXP 38
25376: PPUSH
25377: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
25381: LD_EXP 58
25385: PPUSH
25386: LD_EXP 38
25390: PPUSH
25391: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
25395: LD_EXP 58
25399: PPUSH
25400: LD_STRING DH-Fail-12
25402: PPUSH
25403: CALL_OW 88
// sync ;
25407: SYNC
// wait ( 0 0$1 ) ;
25408: LD_INT 35
25410: PPUSH
25411: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
25415: LD_EXP 38
25419: PPUSH
25420: LD_STRING DH-Fail-a-13
25422: PPUSH
25423: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
25427: LD_EXP 58
25431: PPUSH
25432: LD_INT 100
25434: PPUSH
25435: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
25439: LD_EXP 58
25443: PPUSH
25444: LD_STRING DMcn-Fail-a-14
25446: PPUSH
25447: CALL_OW 91
// KillUnit ( ruDisturb ) ;
25451: LD_EXP 58
25455: PPUSH
25456: CALL_OW 66
// wait ( 0 0$1 ) ;
25460: LD_INT 35
25462: PPUSH
25463: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
25467: LD_EXP 38
25471: PPUSH
25472: LD_STRING DH-Fail-a-15
25474: PPUSH
25475: CALL_OW 88
// YouLost ( FailMuchin ) ;
25479: LD_STRING FailMuchin
25481: PPUSH
25482: CALL_OW 104
// end ; end ;
25486: GO 25489
25488: POP
// InGameOff ;
25489: CALL_OW 9
// end ; end_of_file
25493: PPOPN 4
25495: END
// every 0 0$1 marked gameStartEvent do
25496: GO 25498
25498: DISABLE
// begin enable ;
25499: ENABLE
// if not contactWithAmerican then
25500: LD_EXP 25
25504: NOT
25505: IFFALSE 25550
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
25507: LD_ADDR_OWVAR 47
25511: PUSH
25512: LD_STRING #X108-1
25514: PUSH
25515: LD_INT 22
25517: PUSH
25518: LD_INT 5
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 21
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: EMPTY
25536: LIST
25537: LIST
25538: PPUSH
25539: CALL_OW 69
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: ST_TO_ADDR
25548: GO 25630
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
25550: LD_ADDR_OWVAR 47
25554: PUSH
25555: LD_STRING #X108-1
25557: PUSH
25558: LD_INT 22
25560: PUSH
25561: LD_INT 5
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 21
25570: PUSH
25571: LD_INT 1
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 69
25586: PUSH
25587: LD_STRING #X108-2
25589: PUSH
25590: LD_EXP 50
25594: PPUSH
25595: LD_INT 22
25597: PUSH
25598: LD_INT 4
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 21
25607: PUSH
25608: LD_INT 1
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PPUSH
25619: CALL_OW 72
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: ST_TO_ADDR
// end ; end_of_file
25630: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
25631: LD_EXP 38
25635: PPUSH
25636: LD_INT 59
25638: PPUSH
25639: CALL_OW 308
25643: IFFALSE 25765
25645: GO 25647
25647: DISABLE
// begin Query ( FinalInfo ) ;
25648: LD_STRING FinalInfo
25650: PPUSH
25651: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
25655: LD_INT 59
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: CALL_OW 424
// end_the_mission_allowed := true ;
25665: LD_ADDR_OWVAR 57
25669: PUSH
25670: LD_INT 1
25672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25673: LD_INT 35
25675: PPUSH
25676: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
25680: LD_INT 22
25682: PUSH
25683: LD_INT 2
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 21
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 95
25702: PUSH
25703: LD_INT 59
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: LIST
25714: PPUSH
25715: CALL_OW 69
25719: PPUSH
25720: CALL 28834 0 1
25724: PUSH
25725: LD_INT 22
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 21
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PPUSH
25749: CALL_OW 69
25753: PPUSH
25754: CALL 28834 0 1
25758: EQUAL
25759: IFFALSE 25673
// EndMission ;
25761: CALL 25773 0 0
// end ;
25765: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
25766: CALL 25773 0 0
// end ;
25770: PPOPN 1
25772: END
// function EndMission ; begin
25773: LD_INT 0
25775: PPUSH
// if not IsInArea ( Heike , finalArea ) then
25776: LD_EXP 38
25780: PPUSH
25781: LD_INT 59
25783: PPUSH
25784: CALL_OW 308
25788: NOT
25789: IFFALSE 25800
// begin Query ( HeikeOutOfArea ) ;
25791: LD_STRING HeikeOutOfArea
25793: PPUSH
25794: CALL_OW 97
// exit ;
25798: GO 26541
// end ; if not IsOk ( Heike ) then
25800: LD_EXP 38
25804: PPUSH
25805: CALL_OW 302
25809: NOT
25810: IFFALSE 25821
// begin Query ( HeikeIsHurt ) ;
25812: LD_STRING HeikeIsHurt
25814: PPUSH
25815: CALL_OW 97
// exit ;
25819: GO 26541
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
25821: LD_INT 22
25823: PUSH
25824: LD_INT 5
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 21
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PPUSH
25845: CALL_OW 69
25849: PUSH
25850: LD_INT 0
25852: EQUAL
25853: PUSH
25854: LD_EXP 32
25858: PUSH
25859: LD_INT 0
25861: EQUAL
25862: AND
25863: IFFALSE 25877
// AddMedal ( med1 , 1 ) else
25865: LD_STRING med1
25867: PPUSH
25868: LD_INT 1
25870: PPUSH
25871: CALL_OW 101
25875: GO 25888
// AddMedal ( med1 , - 1 ) ;
25877: LD_STRING med1
25879: PPUSH
25880: LD_INT 1
25882: NEG
25883: PPUSH
25884: CALL_OW 101
// if explosivePlantedList >= 3 then
25888: LD_EXP 29
25892: PUSH
25893: LD_INT 3
25895: GREATEREQUAL
25896: IFFALSE 25910
// AddMedal ( med2 , 1 ) else
25898: LD_STRING med2
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: CALL_OW 101
25908: GO 25944
// if explosivePlantedList < 3 then
25910: LD_EXP 29
25914: PUSH
25915: LD_INT 3
25917: LESS
25918: IFFALSE 25933
// AddMedal ( med2 , - 2 ) else
25920: LD_STRING med2
25922: PPUSH
25923: LD_INT 2
25925: NEG
25926: PPUSH
25927: CALL_OW 101
25931: GO 25944
// AddMedal ( med2 , - 1 ) ;
25933: LD_STRING med2
25935: PPUSH
25936: LD_INT 1
25938: NEG
25939: PPUSH
25940: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
25944: LD_INT 5
25946: PPUSH
25947: LD_INT 2
25949: PPUSH
25950: CALL_OW 321
25954: PUSH
25955: LD_INT 2
25957: EQUAL
25958: IFFALSE 25972
// AddMedal ( med3 , 1 ) else
25960: LD_STRING med3
25962: PPUSH
25963: LD_INT 1
25965: PPUSH
25966: CALL_OW 101
25970: GO 25983
// AddMedal ( med3 , - 1 ) ;
25972: LD_STRING med3
25974: PPUSH
25975: LD_INT 1
25977: NEG
25978: PPUSH
25979: CALL_OW 101
// GiveMedals ( MAIN ) ;
25983: LD_STRING MAIN
25985: PPUSH
25986: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25990: LD_INT 22
25992: PUSH
25993: LD_INT 2
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 23
26002: PUSH
26003: LD_INT 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 21
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: LIST
26024: PPUSH
26025: CALL_OW 69
26029: PPUSH
26030: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
26034: LD_EXP 52
26038: PUSH
26039: LD_EXP 52
26043: PPUSH
26044: CALL_OW 255
26048: PUSH
26049: LD_INT 2
26051: EQUAL
26052: AND
26053: IFFALSE 26067
// SaveCharacters ( Doug , 08_UsCommander ) ;
26055: LD_EXP 52
26059: PPUSH
26060: LD_STRING 08_UsCommander
26062: PPUSH
26063: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff Doug , 08_Americans ) ;
26067: LD_INT 22
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 23
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 21
26089: PUSH
26090: LD_INT 1
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: LIST
26101: PPUSH
26102: CALL_OW 69
26106: PUSH
26107: LD_EXP 52
26111: DIFF
26112: PPUSH
26113: LD_STRING 08_Americans
26115: PPUSH
26116: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
26120: LD_EXP 38
26124: PPUSH
26125: CALL_OW 248
26129: PUSH
26130: LD_INT 3
26132: EQUAL
26133: IFFALSE 26163
// begin CopySkills ( Heike , HeikeTmp ) ;
26135: LD_EXP 38
26139: PPUSH
26140: LD_EXP 54
26144: PPUSH
26145: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
26149: LD_EXP 54
26153: PPUSH
26154: LD_STRING 08_Heike
26156: PPUSH
26157: CALL_OW 38
// end else
26161: GO 26175
// SaveCharacters ( Heike , 08_Heike ) ;
26163: LD_EXP 38
26167: PPUSH
26168: LD_STRING 08_Heike
26170: PPUSH
26171: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
26175: LD_EXP 48
26179: PUSH
26180: LD_EXP 48
26184: PPUSH
26185: CALL_OW 255
26189: PUSH
26190: LD_INT 2
26192: EQUAL
26193: AND
26194: IFFALSE 26208
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
26196: LD_EXP 48
26200: PPUSH
26201: LD_STRING 08_Aviradze
26203: PPUSH
26204: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
26208: LD_EXP 41
26212: PUSH
26213: LD_EXP 41
26217: PPUSH
26218: CALL_OW 255
26222: PUSH
26223: LD_INT 2
26225: EQUAL
26226: AND
26227: IFFALSE 26241
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
26229: LD_EXP 41
26233: PPUSH
26234: LD_STRING 08_Ibrahim
26236: PPUSH
26237: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
26241: LD_EXP 42
26245: PUSH
26246: LD_EXP 42
26250: PPUSH
26251: CALL_OW 255
26255: PUSH
26256: LD_INT 2
26258: EQUAL
26259: AND
26260: IFFALSE 26274
// SaveCharacters ( Kamil , 08_Kamil ) ;
26262: LD_EXP 42
26266: PPUSH
26267: LD_STRING 08_Kamil
26269: PPUSH
26270: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
26274: LD_EXP 44
26278: PUSH
26279: LD_EXP 44
26283: PPUSH
26284: CALL_OW 255
26288: PUSH
26289: LD_INT 2
26291: EQUAL
26292: AND
26293: IFFALSE 26307
// SaveCharacters ( Sophia , 08_Sophia ) ;
26295: LD_EXP 44
26299: PPUSH
26300: LD_STRING 08_Sophia
26302: PPUSH
26303: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
26307: LD_EXP 43
26311: PUSH
26312: LD_EXP 48
26316: PPUSH
26317: CALL_OW 255
26321: PUSH
26322: LD_INT 2
26324: EQUAL
26325: AND
26326: IFFALSE 26340
// SaveCharacters ( Kaia , 08_Kaia ) ;
26328: LD_EXP 43
26332: PPUSH
26333: LD_STRING 08_Kaia
26335: PPUSH
26336: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
26340: LD_EXP 39
26344: PUSH
26345: LD_EXP 39
26349: PPUSH
26350: CALL_OW 255
26354: PUSH
26355: LD_INT 2
26357: EQUAL
26358: AND
26359: IFFALSE 26416
// if GetNation ( Givi ) = nation_russian then
26361: LD_EXP 39
26365: PPUSH
26366: CALL_OW 248
26370: PUSH
26371: LD_INT 3
26373: EQUAL
26374: IFFALSE 26404
// begin CopySkills ( Givi , GiviTmp ) ;
26376: LD_EXP 39
26380: PPUSH
26381: LD_EXP 55
26385: PPUSH
26386: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
26390: LD_EXP 55
26394: PPUSH
26395: LD_STRING 08_Givi
26397: PPUSH
26398: CALL_OW 38
// end else
26402: GO 26416
// SaveCharacters ( Givi , 08_Givi ) ;
26404: LD_EXP 39
26408: PPUSH
26409: LD_STRING 08_Givi
26411: PPUSH
26412: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
26416: LD_EXP 40
26420: PUSH
26421: LD_EXP 40
26425: PPUSH
26426: CALL_OW 255
26430: PUSH
26431: LD_INT 2
26433: EQUAL
26434: AND
26435: IFFALSE 26449
// SaveCharacters ( Mike , 08_Mike ) ;
26437: LD_EXP 40
26441: PPUSH
26442: LD_STRING 08_Mike
26444: PPUSH
26445: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
26449: LD_EXP 45
26453: PUSH
26454: LD_EXP 45
26458: PPUSH
26459: CALL_OW 255
26463: PUSH
26464: LD_INT 2
26466: EQUAL
26467: AND
26468: IFFALSE 26482
// SaveCharacters ( Markov , 08_Markov ) ;
26470: LD_EXP 45
26474: PPUSH
26475: LD_STRING 08_Markov
26477: PPUSH
26478: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
26482: LD_EXP 47
26486: PUSH
26487: LD_EXP 47
26491: PPUSH
26492: CALL_OW 255
26496: PUSH
26497: LD_INT 2
26499: EQUAL
26500: AND
26501: IFFALSE 26515
// SaveCharacters ( Kurt , 08_Kurt ) ;
26503: LD_EXP 47
26507: PPUSH
26508: LD_STRING 08_Kurt
26510: PPUSH
26511: CALL_OW 38
// if heikeSecondSquad then
26515: LD_EXP 49
26519: IFFALSE 26533
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
26521: LD_EXP 49
26525: PPUSH
26526: LD_STRING 08_others
26528: PPUSH
26529: CALL_OW 38
// YouWin ;
26533: CALL_OW 103
// DialogueOff ;
26537: CALL_OW 7
// end ; end_of_file
26541: LD_VAR 0 1
26545: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
26546: LD_EXP 5
26550: IFFALSE 26729
26552: GO 26554
26554: DISABLE
26555: LD_INT 0
26557: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
26558: LD_INT 35
26560: PPUSH
26561: LD_INT 2100
26563: PPUSH
26564: CALL_OW 12
26568: PPUSH
26569: CALL_OW 67
// StopOriginalMusic ;
26573: CALL 88201 0 0
// weatherBusy := true ;
26577: LD_ADDR_EXP 37
26581: PUSH
26582: LD_INT 1
26584: ST_TO_ADDR
// for i := 1 to 3 do
26585: LD_ADDR_VAR 0 1
26589: PUSH
26590: DOUBLE
26591: LD_INT 1
26593: DEC
26594: ST_TO_ADDR
26595: LD_INT 3
26597: PUSH
26598: FOR_TO
26599: IFFALSE 26633
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
26601: LD_INT 1
26603: PPUSH
26604: LD_INT 100
26606: PUSH
26607: LD_INT 100
26609: PUSH
26610: LD_VAR 0 1
26614: MUL
26615: PLUS
26616: PPUSH
26617: LD_INT 60
26619: PPUSH
26620: CALL_OW 550
// wait ( 0 0$2 ) ;
26624: LD_INT 70
26626: PPUSH
26627: CALL_OW 67
// end ;
26631: GO 26598
26633: POP
26634: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
26635: LD_STRING ArStormRain.wav
26637: PPUSH
26638: LD_STRING OW_CUSTOM_COMMAND(103);
26640: PPUSH
26641: CALL 88231 0 2
// wait ( 0 0$3 ) ;
26645: LD_INT 105
26647: PPUSH
26648: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
26652: LD_INT 1
26654: PPUSH
26655: LD_INT 900
26657: PPUSH
26658: LD_INT 120
26660: PPUSH
26661: CALL_OW 550
// wait ( 0 0$10 ) ;
26665: LD_INT 350
26667: PPUSH
26668: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
26672: LD_INT 1
26674: PPUSH
26675: LD_INT 1500
26677: PPUSH
26678: LD_INT 300
26680: PPUSH
26681: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
26685: LD_INT 35
26687: PPUSH
26688: CALL_OW 67
// until not weatherBusy ;
26692: LD_EXP 37
26696: NOT
26697: IFFALSE 26685
// SetWeather ( 0 , 0 , 0 ) ;
26699: LD_INT 0
26701: PPUSH
26702: LD_INT 0
26704: PPUSH
26705: LD_INT 0
26707: PPUSH
26708: CALL_OW 550
// wait ( 5 5$00 ) ;
26712: LD_INT 10500
26714: PPUSH
26715: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
26719: LD_STRING ArStormNormal.wav
26721: PPUSH
26722: LD_STRING OW_CUSTOM_COMMAND(103);
26724: PPUSH
26725: CALL 88231 0 2
// end ; end_of_file
26729: PPOPN 1
26731: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26732: LD_INT 0
26734: PPUSH
26735: PPUSH
// if exist_mode then
26736: LD_VAR 0 2
26740: IFFALSE 26765
// unit := CreateCharacter ( prefix & ident ) else
26742: LD_ADDR_VAR 0 5
26746: PUSH
26747: LD_VAR 0 3
26751: PUSH
26752: LD_VAR 0 1
26756: STR
26757: PPUSH
26758: CALL_OW 34
26762: ST_TO_ADDR
26763: GO 26780
// unit := NewCharacter ( ident ) ;
26765: LD_ADDR_VAR 0 5
26769: PUSH
26770: LD_VAR 0 1
26774: PPUSH
26775: CALL_OW 25
26779: ST_TO_ADDR
// result := unit ;
26780: LD_ADDR_VAR 0 4
26784: PUSH
26785: LD_VAR 0 5
26789: ST_TO_ADDR
// end ;
26790: LD_VAR 0 4
26794: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26795: LD_INT 0
26797: PPUSH
26798: PPUSH
// if not side or not nation then
26799: LD_VAR 0 1
26803: NOT
26804: PUSH
26805: LD_VAR 0 2
26809: NOT
26810: OR
26811: IFFALSE 26815
// exit ;
26813: GO 27583
// case nation of nation_american :
26815: LD_VAR 0 2
26819: PUSH
26820: LD_INT 1
26822: DOUBLE
26823: EQUAL
26824: IFTRUE 26828
26826: GO 27042
26828: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26829: LD_ADDR_VAR 0 4
26833: PUSH
26834: LD_INT 35
26836: PUSH
26837: LD_INT 45
26839: PUSH
26840: LD_INT 46
26842: PUSH
26843: LD_INT 47
26845: PUSH
26846: LD_INT 82
26848: PUSH
26849: LD_INT 83
26851: PUSH
26852: LD_INT 84
26854: PUSH
26855: LD_INT 85
26857: PUSH
26858: LD_INT 86
26860: PUSH
26861: LD_INT 1
26863: PUSH
26864: LD_INT 2
26866: PUSH
26867: LD_INT 6
26869: PUSH
26870: LD_INT 15
26872: PUSH
26873: LD_INT 16
26875: PUSH
26876: LD_INT 7
26878: PUSH
26879: LD_INT 12
26881: PUSH
26882: LD_INT 13
26884: PUSH
26885: LD_INT 10
26887: PUSH
26888: LD_INT 14
26890: PUSH
26891: LD_INT 20
26893: PUSH
26894: LD_INT 21
26896: PUSH
26897: LD_INT 22
26899: PUSH
26900: LD_INT 25
26902: PUSH
26903: LD_INT 32
26905: PUSH
26906: LD_INT 27
26908: PUSH
26909: LD_INT 36
26911: PUSH
26912: LD_INT 69
26914: PUSH
26915: LD_INT 39
26917: PUSH
26918: LD_INT 34
26920: PUSH
26921: LD_INT 40
26923: PUSH
26924: LD_INT 48
26926: PUSH
26927: LD_INT 49
26929: PUSH
26930: LD_INT 50
26932: PUSH
26933: LD_INT 51
26935: PUSH
26936: LD_INT 52
26938: PUSH
26939: LD_INT 53
26941: PUSH
26942: LD_INT 54
26944: PUSH
26945: LD_INT 55
26947: PUSH
26948: LD_INT 56
26950: PUSH
26951: LD_INT 57
26953: PUSH
26954: LD_INT 58
26956: PUSH
26957: LD_INT 59
26959: PUSH
26960: LD_INT 60
26962: PUSH
26963: LD_INT 61
26965: PUSH
26966: LD_INT 62
26968: PUSH
26969: LD_INT 80
26971: PUSH
26972: LD_INT 82
26974: PUSH
26975: LD_INT 83
26977: PUSH
26978: LD_INT 84
26980: PUSH
26981: LD_INT 85
26983: PUSH
26984: LD_INT 86
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: LIST
27002: LIST
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
27040: GO 27507
27042: LD_INT 2
27044: DOUBLE
27045: EQUAL
27046: IFTRUE 27050
27048: GO 27276
27050: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27051: LD_ADDR_VAR 0 4
27055: PUSH
27056: LD_INT 35
27058: PUSH
27059: LD_INT 45
27061: PUSH
27062: LD_INT 46
27064: PUSH
27065: LD_INT 47
27067: PUSH
27068: LD_INT 82
27070: PUSH
27071: LD_INT 83
27073: PUSH
27074: LD_INT 84
27076: PUSH
27077: LD_INT 85
27079: PUSH
27080: LD_INT 87
27082: PUSH
27083: LD_INT 70
27085: PUSH
27086: LD_INT 1
27088: PUSH
27089: LD_INT 11
27091: PUSH
27092: LD_INT 3
27094: PUSH
27095: LD_INT 4
27097: PUSH
27098: LD_INT 5
27100: PUSH
27101: LD_INT 6
27103: PUSH
27104: LD_INT 15
27106: PUSH
27107: LD_INT 18
27109: PUSH
27110: LD_INT 7
27112: PUSH
27113: LD_INT 17
27115: PUSH
27116: LD_INT 8
27118: PUSH
27119: LD_INT 20
27121: PUSH
27122: LD_INT 21
27124: PUSH
27125: LD_INT 22
27127: PUSH
27128: LD_INT 72
27130: PUSH
27131: LD_INT 26
27133: PUSH
27134: LD_INT 69
27136: PUSH
27137: LD_INT 39
27139: PUSH
27140: LD_INT 40
27142: PUSH
27143: LD_INT 41
27145: PUSH
27146: LD_INT 42
27148: PUSH
27149: LD_INT 43
27151: PUSH
27152: LD_INT 48
27154: PUSH
27155: LD_INT 49
27157: PUSH
27158: LD_INT 50
27160: PUSH
27161: LD_INT 51
27163: PUSH
27164: LD_INT 52
27166: PUSH
27167: LD_INT 53
27169: PUSH
27170: LD_INT 54
27172: PUSH
27173: LD_INT 55
27175: PUSH
27176: LD_INT 56
27178: PUSH
27179: LD_INT 60
27181: PUSH
27182: LD_INT 61
27184: PUSH
27185: LD_INT 62
27187: PUSH
27188: LD_INT 66
27190: PUSH
27191: LD_INT 67
27193: PUSH
27194: LD_INT 68
27196: PUSH
27197: LD_INT 81
27199: PUSH
27200: LD_INT 82
27202: PUSH
27203: LD_INT 83
27205: PUSH
27206: LD_INT 84
27208: PUSH
27209: LD_INT 85
27211: PUSH
27212: LD_INT 87
27214: PUSH
27215: LD_INT 88
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: ST_TO_ADDR
27274: GO 27507
27276: LD_INT 3
27278: DOUBLE
27279: EQUAL
27280: IFTRUE 27284
27282: GO 27506
27284: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27285: LD_ADDR_VAR 0 4
27289: PUSH
27290: LD_INT 46
27292: PUSH
27293: LD_INT 47
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: LD_INT 2
27301: PUSH
27302: LD_INT 82
27304: PUSH
27305: LD_INT 83
27307: PUSH
27308: LD_INT 84
27310: PUSH
27311: LD_INT 85
27313: PUSH
27314: LD_INT 86
27316: PUSH
27317: LD_INT 11
27319: PUSH
27320: LD_INT 9
27322: PUSH
27323: LD_INT 20
27325: PUSH
27326: LD_INT 19
27328: PUSH
27329: LD_INT 21
27331: PUSH
27332: LD_INT 24
27334: PUSH
27335: LD_INT 22
27337: PUSH
27338: LD_INT 25
27340: PUSH
27341: LD_INT 28
27343: PUSH
27344: LD_INT 29
27346: PUSH
27347: LD_INT 30
27349: PUSH
27350: LD_INT 31
27352: PUSH
27353: LD_INT 37
27355: PUSH
27356: LD_INT 38
27358: PUSH
27359: LD_INT 32
27361: PUSH
27362: LD_INT 27
27364: PUSH
27365: LD_INT 33
27367: PUSH
27368: LD_INT 69
27370: PUSH
27371: LD_INT 39
27373: PUSH
27374: LD_INT 34
27376: PUSH
27377: LD_INT 40
27379: PUSH
27380: LD_INT 71
27382: PUSH
27383: LD_INT 23
27385: PUSH
27386: LD_INT 44
27388: PUSH
27389: LD_INT 48
27391: PUSH
27392: LD_INT 49
27394: PUSH
27395: LD_INT 50
27397: PUSH
27398: LD_INT 51
27400: PUSH
27401: LD_INT 52
27403: PUSH
27404: LD_INT 53
27406: PUSH
27407: LD_INT 54
27409: PUSH
27410: LD_INT 55
27412: PUSH
27413: LD_INT 56
27415: PUSH
27416: LD_INT 57
27418: PUSH
27419: LD_INT 58
27421: PUSH
27422: LD_INT 59
27424: PUSH
27425: LD_INT 63
27427: PUSH
27428: LD_INT 64
27430: PUSH
27431: LD_INT 65
27433: PUSH
27434: LD_INT 82
27436: PUSH
27437: LD_INT 83
27439: PUSH
27440: LD_INT 84
27442: PUSH
27443: LD_INT 85
27445: PUSH
27446: LD_INT 86
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: LIST
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: LIST
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: ST_TO_ADDR
27504: GO 27507
27506: POP
// if state > - 1 and state < 3 then
27507: LD_VAR 0 3
27511: PUSH
27512: LD_INT 1
27514: NEG
27515: GREATER
27516: PUSH
27517: LD_VAR 0 3
27521: PUSH
27522: LD_INT 3
27524: LESS
27525: AND
27526: IFFALSE 27583
// for i in result do
27528: LD_ADDR_VAR 0 5
27532: PUSH
27533: LD_VAR 0 4
27537: PUSH
27538: FOR_IN
27539: IFFALSE 27581
// if GetTech ( i , side ) <> state then
27541: LD_VAR 0 5
27545: PPUSH
27546: LD_VAR 0 1
27550: PPUSH
27551: CALL_OW 321
27555: PUSH
27556: LD_VAR 0 3
27560: NONEQUAL
27561: IFFALSE 27579
// result := result diff i ;
27563: LD_ADDR_VAR 0 4
27567: PUSH
27568: LD_VAR 0 4
27572: PUSH
27573: LD_VAR 0 5
27577: DIFF
27578: ST_TO_ADDR
27579: GO 27538
27581: POP
27582: POP
// end ;
27583: LD_VAR 0 4
27587: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27588: LD_INT 0
27590: PPUSH
27591: PPUSH
27592: PPUSH
// result := true ;
27593: LD_ADDR_VAR 0 3
27597: PUSH
27598: LD_INT 1
27600: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27601: LD_ADDR_VAR 0 5
27605: PUSH
27606: LD_VAR 0 2
27610: PPUSH
27611: CALL_OW 480
27615: ST_TO_ADDR
// if not tmp then
27616: LD_VAR 0 5
27620: NOT
27621: IFFALSE 27625
// exit ;
27623: GO 27674
// for i in tmp do
27625: LD_ADDR_VAR 0 4
27629: PUSH
27630: LD_VAR 0 5
27634: PUSH
27635: FOR_IN
27636: IFFALSE 27672
// if GetTech ( i , side ) <> state_researched then
27638: LD_VAR 0 4
27642: PPUSH
27643: LD_VAR 0 1
27647: PPUSH
27648: CALL_OW 321
27652: PUSH
27653: LD_INT 2
27655: NONEQUAL
27656: IFFALSE 27670
// begin result := false ;
27658: LD_ADDR_VAR 0 3
27662: PUSH
27663: LD_INT 0
27665: ST_TO_ADDR
// exit ;
27666: POP
27667: POP
27668: GO 27674
// end ;
27670: GO 27635
27672: POP
27673: POP
// end ;
27674: LD_VAR 0 3
27678: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27679: LD_INT 0
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
27686: PPUSH
27687: PPUSH
27688: PPUSH
27689: PPUSH
27690: PPUSH
27691: PPUSH
27692: PPUSH
27693: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27694: LD_VAR 0 1
27698: NOT
27699: PUSH
27700: LD_VAR 0 1
27704: PPUSH
27705: CALL_OW 257
27709: PUSH
27710: LD_INT 9
27712: NONEQUAL
27713: OR
27714: IFFALSE 27718
// exit ;
27716: GO 28291
// side := GetSide ( unit ) ;
27718: LD_ADDR_VAR 0 9
27722: PUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 255
27732: ST_TO_ADDR
// tech_space := tech_spacanom ;
27733: LD_ADDR_VAR 0 12
27737: PUSH
27738: LD_INT 29
27740: ST_TO_ADDR
// tech_time := tech_taurad ;
27741: LD_ADDR_VAR 0 13
27745: PUSH
27746: LD_INT 28
27748: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27749: LD_ADDR_VAR 0 11
27753: PUSH
27754: LD_VAR 0 1
27758: PPUSH
27759: CALL_OW 310
27763: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27764: LD_VAR 0 11
27768: PPUSH
27769: CALL_OW 247
27773: PUSH
27774: LD_INT 2
27776: EQUAL
27777: IFFALSE 27781
// exit ;
27779: GO 28291
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27781: LD_ADDR_VAR 0 8
27785: PUSH
27786: LD_INT 81
27788: PUSH
27789: LD_VAR 0 9
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: LD_INT 21
27803: PUSH
27804: LD_INT 3
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PPUSH
27819: CALL_OW 69
27823: ST_TO_ADDR
// if not tmp then
27824: LD_VAR 0 8
27828: NOT
27829: IFFALSE 27833
// exit ;
27831: GO 28291
// if in_unit then
27833: LD_VAR 0 11
27837: IFFALSE 27861
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27839: LD_ADDR_VAR 0 10
27843: PUSH
27844: LD_VAR 0 8
27848: PPUSH
27849: LD_VAR 0 11
27853: PPUSH
27854: CALL_OW 74
27858: ST_TO_ADDR
27859: GO 27881
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27861: LD_ADDR_VAR 0 10
27865: PUSH
27866: LD_VAR 0 8
27870: PPUSH
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL_OW 74
27880: ST_TO_ADDR
// if not enemy then
27881: LD_VAR 0 10
27885: NOT
27886: IFFALSE 27890
// exit ;
27888: GO 28291
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27890: LD_VAR 0 11
27894: PUSH
27895: LD_VAR 0 11
27899: PPUSH
27900: LD_VAR 0 10
27904: PPUSH
27905: CALL_OW 296
27909: PUSH
27910: LD_INT 13
27912: GREATER
27913: AND
27914: PUSH
27915: LD_VAR 0 1
27919: PPUSH
27920: LD_VAR 0 10
27924: PPUSH
27925: CALL_OW 296
27929: PUSH
27930: LD_INT 12
27932: GREATER
27933: OR
27934: IFFALSE 27938
// exit ;
27936: GO 28291
// missile := [ 1 ] ;
27938: LD_ADDR_VAR 0 14
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27949: LD_VAR 0 9
27953: PPUSH
27954: LD_VAR 0 12
27958: PPUSH
27959: CALL_OW 325
27963: IFFALSE 27992
// missile := Replace ( missile , missile + 1 , 2 ) ;
27965: LD_ADDR_VAR 0 14
27969: PUSH
27970: LD_VAR 0 14
27974: PPUSH
27975: LD_VAR 0 14
27979: PUSH
27980: LD_INT 1
27982: PLUS
27983: PPUSH
27984: LD_INT 2
27986: PPUSH
27987: CALL_OW 1
27991: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27992: LD_VAR 0 9
27996: PPUSH
27997: LD_VAR 0 13
28001: PPUSH
28002: CALL_OW 325
28006: PUSH
28007: LD_VAR 0 10
28011: PPUSH
28012: CALL_OW 255
28016: PPUSH
28017: LD_VAR 0 13
28021: PPUSH
28022: CALL_OW 325
28026: NOT
28027: AND
28028: IFFALSE 28057
// missile := Replace ( missile , missile + 1 , 3 ) ;
28030: LD_ADDR_VAR 0 14
28034: PUSH
28035: LD_VAR 0 14
28039: PPUSH
28040: LD_VAR 0 14
28044: PUSH
28045: LD_INT 1
28047: PLUS
28048: PPUSH
28049: LD_INT 3
28051: PPUSH
28052: CALL_OW 1
28056: ST_TO_ADDR
// if missile < 2 then
28057: LD_VAR 0 14
28061: PUSH
28062: LD_INT 2
28064: LESS
28065: IFFALSE 28069
// exit ;
28067: GO 28291
// x := GetX ( enemy ) ;
28069: LD_ADDR_VAR 0 4
28073: PUSH
28074: LD_VAR 0 10
28078: PPUSH
28079: CALL_OW 250
28083: ST_TO_ADDR
// y := GetY ( enemy ) ;
28084: LD_ADDR_VAR 0 5
28088: PUSH
28089: LD_VAR 0 10
28093: PPUSH
28094: CALL_OW 251
28098: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28099: LD_ADDR_VAR 0 6
28103: PUSH
28104: LD_VAR 0 4
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PPUSH
28113: LD_INT 1
28115: PPUSH
28116: CALL_OW 12
28120: PLUS
28121: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28122: LD_ADDR_VAR 0 7
28126: PUSH
28127: LD_VAR 0 5
28131: PUSH
28132: LD_INT 1
28134: NEG
28135: PPUSH
28136: LD_INT 1
28138: PPUSH
28139: CALL_OW 12
28143: PLUS
28144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28145: LD_VAR 0 6
28149: PPUSH
28150: LD_VAR 0 7
28154: PPUSH
28155: CALL_OW 488
28159: NOT
28160: IFFALSE 28182
// begin _x := x ;
28162: LD_ADDR_VAR 0 6
28166: PUSH
28167: LD_VAR 0 4
28171: ST_TO_ADDR
// _y := y ;
28172: LD_ADDR_VAR 0 7
28176: PUSH
28177: LD_VAR 0 5
28181: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28182: LD_ADDR_VAR 0 3
28186: PUSH
28187: LD_INT 1
28189: PPUSH
28190: LD_VAR 0 14
28194: PPUSH
28195: CALL_OW 12
28199: ST_TO_ADDR
// case i of 1 :
28200: LD_VAR 0 3
28204: PUSH
28205: LD_INT 1
28207: DOUBLE
28208: EQUAL
28209: IFTRUE 28213
28211: GO 28230
28213: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28214: LD_VAR 0 1
28218: PPUSH
28219: LD_VAR 0 10
28223: PPUSH
28224: CALL_OW 115
28228: GO 28291
28230: LD_INT 2
28232: DOUBLE
28233: EQUAL
28234: IFTRUE 28238
28236: GO 28260
28238: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28239: LD_VAR 0 1
28243: PPUSH
28244: LD_VAR 0 6
28248: PPUSH
28249: LD_VAR 0 7
28253: PPUSH
28254: CALL_OW 153
28258: GO 28291
28260: LD_INT 3
28262: DOUBLE
28263: EQUAL
28264: IFTRUE 28268
28266: GO 28290
28268: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28269: LD_VAR 0 1
28273: PPUSH
28274: LD_VAR 0 6
28278: PPUSH
28279: LD_VAR 0 7
28283: PPUSH
28284: CALL_OW 154
28288: GO 28291
28290: POP
// end ;
28291: LD_VAR 0 2
28295: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28296: LD_INT 0
28298: PPUSH
28299: PPUSH
28300: PPUSH
28301: PPUSH
28302: PPUSH
28303: PPUSH
// if not unit or not building then
28304: LD_VAR 0 1
28308: NOT
28309: PUSH
28310: LD_VAR 0 2
28314: NOT
28315: OR
28316: IFFALSE 28320
// exit ;
28318: GO 28478
// x := GetX ( building ) ;
28320: LD_ADDR_VAR 0 5
28324: PUSH
28325: LD_VAR 0 2
28329: PPUSH
28330: CALL_OW 250
28334: ST_TO_ADDR
// y := GetY ( building ) ;
28335: LD_ADDR_VAR 0 6
28339: PUSH
28340: LD_VAR 0 2
28344: PPUSH
28345: CALL_OW 251
28349: ST_TO_ADDR
// for i = 0 to 5 do
28350: LD_ADDR_VAR 0 4
28354: PUSH
28355: DOUBLE
28356: LD_INT 0
28358: DEC
28359: ST_TO_ADDR
28360: LD_INT 5
28362: PUSH
28363: FOR_TO
28364: IFFALSE 28476
// begin _x := ShiftX ( x , i , 3 ) ;
28366: LD_ADDR_VAR 0 7
28370: PUSH
28371: LD_VAR 0 5
28375: PPUSH
28376: LD_VAR 0 4
28380: PPUSH
28381: LD_INT 3
28383: PPUSH
28384: CALL_OW 272
28388: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28389: LD_ADDR_VAR 0 8
28393: PUSH
28394: LD_VAR 0 6
28398: PPUSH
28399: LD_VAR 0 4
28403: PPUSH
28404: LD_INT 3
28406: PPUSH
28407: CALL_OW 273
28411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28412: LD_VAR 0 7
28416: PPUSH
28417: LD_VAR 0 8
28421: PPUSH
28422: CALL_OW 488
28426: NOT
28427: IFFALSE 28431
// continue ;
28429: GO 28363
// if HexInfo ( _x , _y ) = 0 then
28431: LD_VAR 0 7
28435: PPUSH
28436: LD_VAR 0 8
28440: PPUSH
28441: CALL_OW 428
28445: PUSH
28446: LD_INT 0
28448: EQUAL
28449: IFFALSE 28474
// begin ComMoveXY ( unit , _x , _y ) ;
28451: LD_VAR 0 1
28455: PPUSH
28456: LD_VAR 0 7
28460: PPUSH
28461: LD_VAR 0 8
28465: PPUSH
28466: CALL_OW 111
// exit ;
28470: POP
28471: POP
28472: GO 28478
// end ; end ;
28474: GO 28363
28476: POP
28477: POP
// end ;
28478: LD_VAR 0 3
28482: RET
// export function ScanBase ( side , base_area ) ; begin
28483: LD_INT 0
28485: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_VAR 0 2
28495: PPUSH
28496: LD_INT 81
28498: PUSH
28499: LD_VAR 0 1
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PPUSH
28508: CALL_OW 70
28512: ST_TO_ADDR
// end ;
28513: LD_VAR 0 3
28517: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28518: LD_INT 0
28520: PPUSH
28521: PPUSH
28522: PPUSH
28523: PPUSH
// result := false ;
28524: LD_ADDR_VAR 0 2
28528: PUSH
28529: LD_INT 0
28531: ST_TO_ADDR
// side := GetSide ( unit ) ;
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_VAR 0 1
28541: PPUSH
28542: CALL_OW 255
28546: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28547: LD_ADDR_VAR 0 4
28551: PUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 248
28561: ST_TO_ADDR
// case nat of 1 :
28562: LD_VAR 0 4
28566: PUSH
28567: LD_INT 1
28569: DOUBLE
28570: EQUAL
28571: IFTRUE 28575
28573: GO 28586
28575: POP
// tech := tech_lassight ; 2 :
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: LD_INT 12
28583: ST_TO_ADDR
28584: GO 28625
28586: LD_INT 2
28588: DOUBLE
28589: EQUAL
28590: IFTRUE 28594
28592: GO 28605
28594: POP
// tech := tech_mortar ; 3 :
28595: LD_ADDR_VAR 0 5
28599: PUSH
28600: LD_INT 41
28602: ST_TO_ADDR
28603: GO 28625
28605: LD_INT 3
28607: DOUBLE
28608: EQUAL
28609: IFTRUE 28613
28611: GO 28624
28613: POP
// tech := tech_bazooka ; end ;
28614: LD_ADDR_VAR 0 5
28618: PUSH
28619: LD_INT 44
28621: ST_TO_ADDR
28622: GO 28625
28624: POP
// if Researched ( side , tech ) then
28625: LD_VAR 0 3
28629: PPUSH
28630: LD_VAR 0 5
28634: PPUSH
28635: CALL_OW 325
28639: IFFALSE 28666
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28641: LD_ADDR_VAR 0 2
28645: PUSH
28646: LD_INT 5
28648: PUSH
28649: LD_INT 8
28651: PUSH
28652: LD_INT 9
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: PUSH
28660: LD_VAR 0 4
28664: ARRAY
28665: ST_TO_ADDR
// end ;
28666: LD_VAR 0 2
28670: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28671: LD_INT 0
28673: PPUSH
28674: PPUSH
28675: PPUSH
// if not mines then
28676: LD_VAR 0 2
28680: NOT
28681: IFFALSE 28685
// exit ;
28683: GO 28829
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28685: LD_ADDR_VAR 0 5
28689: PUSH
28690: LD_INT 81
28692: PUSH
28693: LD_VAR 0 1
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 21
28707: PUSH
28708: LD_INT 3
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PPUSH
28723: CALL_OW 69
28727: ST_TO_ADDR
// for i in mines do
28728: LD_ADDR_VAR 0 4
28732: PUSH
28733: LD_VAR 0 2
28737: PUSH
28738: FOR_IN
28739: IFFALSE 28827
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28741: LD_VAR 0 4
28745: PUSH
28746: LD_INT 1
28748: ARRAY
28749: PPUSH
28750: LD_VAR 0 4
28754: PUSH
28755: LD_INT 2
28757: ARRAY
28758: PPUSH
28759: CALL_OW 458
28763: NOT
28764: IFFALSE 28768
// continue ;
28766: GO 28738
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28768: LD_VAR 0 4
28772: PUSH
28773: LD_INT 1
28775: ARRAY
28776: PPUSH
28777: LD_VAR 0 4
28781: PUSH
28782: LD_INT 2
28784: ARRAY
28785: PPUSH
28786: CALL_OW 428
28790: PUSH
28791: LD_VAR 0 5
28795: IN
28796: IFFALSE 28825
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28798: LD_VAR 0 4
28802: PUSH
28803: LD_INT 1
28805: ARRAY
28806: PPUSH
28807: LD_VAR 0 4
28811: PUSH
28812: LD_INT 2
28814: ARRAY
28815: PPUSH
28816: LD_VAR 0 1
28820: PPUSH
28821: CALL_OW 456
// end ;
28825: GO 28738
28827: POP
28828: POP
// end ;
28829: LD_VAR 0 3
28833: RET
// export function Count ( array ) ; var i ; begin
28834: LD_INT 0
28836: PPUSH
28837: PPUSH
// result := 0 ;
28838: LD_ADDR_VAR 0 2
28842: PUSH
28843: LD_INT 0
28845: ST_TO_ADDR
// for i in array do
28846: LD_ADDR_VAR 0 3
28850: PUSH
28851: LD_VAR 0 1
28855: PUSH
28856: FOR_IN
28857: IFFALSE 28881
// if i then
28859: LD_VAR 0 3
28863: IFFALSE 28879
// result := result + 1 ;
28865: LD_ADDR_VAR 0 2
28869: PUSH
28870: LD_VAR 0 2
28874: PUSH
28875: LD_INT 1
28877: PLUS
28878: ST_TO_ADDR
28879: GO 28856
28881: POP
28882: POP
// end ;
28883: LD_VAR 0 2
28887: RET
// export function IsEmpty ( building ) ; begin
28888: LD_INT 0
28890: PPUSH
// if not building then
28891: LD_VAR 0 1
28895: NOT
28896: IFFALSE 28900
// exit ;
28898: GO 28943
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28900: LD_ADDR_VAR 0 2
28904: PUSH
28905: LD_VAR 0 1
28909: PUSH
28910: LD_INT 22
28912: PUSH
28913: LD_VAR 0 1
28917: PPUSH
28918: CALL_OW 255
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 58
28929: PUSH
28930: EMPTY
28931: LIST
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PPUSH
28937: CALL_OW 69
28941: IN
28942: ST_TO_ADDR
// end ;
28943: LD_VAR 0 2
28947: RET
// export function IsNotFull ( building ) ; var places ; begin
28948: LD_INT 0
28950: PPUSH
28951: PPUSH
// if not building then
28952: LD_VAR 0 1
28956: NOT
28957: IFFALSE 28961
// exit ;
28959: GO 29132
// result := false ;
28961: LD_ADDR_VAR 0 2
28965: PUSH
28966: LD_INT 0
28968: ST_TO_ADDR
// places := 0 ;
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 0
28976: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28977: LD_VAR 0 1
28981: PPUSH
28982: CALL_OW 266
28986: PUSH
28987: LD_INT 0
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 29049
28993: LD_INT 1
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29049
28999: LD_INT 6
29001: DOUBLE
29002: EQUAL
29003: IFTRUE 29049
29005: LD_INT 7
29007: DOUBLE
29008: EQUAL
29009: IFTRUE 29049
29011: LD_INT 8
29013: DOUBLE
29014: EQUAL
29015: IFTRUE 29049
29017: LD_INT 4
29019: DOUBLE
29020: EQUAL
29021: IFTRUE 29049
29023: LD_INT 5
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29049
29029: LD_INT 2
29031: DOUBLE
29032: EQUAL
29033: IFTRUE 29049
29035: LD_INT 3
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29049
29041: LD_INT 35
29043: DOUBLE
29044: EQUAL
29045: IFTRUE 29049
29047: GO 29060
29049: POP
// places := 6 ; b_bunker , b_breastwork :
29050: LD_ADDR_VAR 0 3
29054: PUSH
29055: LD_INT 6
29057: ST_TO_ADDR
29058: GO 29105
29060: LD_INT 32
29062: DOUBLE
29063: EQUAL
29064: IFTRUE 29074
29066: LD_INT 31
29068: DOUBLE
29069: EQUAL
29070: IFTRUE 29074
29072: GO 29085
29074: POP
// places := 1 ; b_control_tower :
29075: LD_ADDR_VAR 0 3
29079: PUSH
29080: LD_INT 1
29082: ST_TO_ADDR
29083: GO 29105
29085: LD_INT 36
29087: DOUBLE
29088: EQUAL
29089: IFTRUE 29093
29091: GO 29104
29093: POP
// places := 3 ; end ;
29094: LD_ADDR_VAR 0 3
29098: PUSH
29099: LD_INT 3
29101: ST_TO_ADDR
29102: GO 29105
29104: POP
// if places then
29105: LD_VAR 0 3
29109: IFFALSE 29132
// result := UnitsInside ( building ) < places ;
29111: LD_ADDR_VAR 0 2
29115: PUSH
29116: LD_VAR 0 1
29120: PPUSH
29121: CALL_OW 313
29125: PUSH
29126: LD_VAR 0 3
29130: LESS
29131: ST_TO_ADDR
// end ;
29132: LD_VAR 0 2
29136: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29137: LD_INT 0
29139: PPUSH
29140: PPUSH
29141: PPUSH
29142: PPUSH
// tmp := [ ] ;
29143: LD_ADDR_VAR 0 3
29147: PUSH
29148: EMPTY
29149: ST_TO_ADDR
// list := [ ] ;
29150: LD_ADDR_VAR 0 5
29154: PUSH
29155: EMPTY
29156: ST_TO_ADDR
// for i = 16 to 25 do
29157: LD_ADDR_VAR 0 4
29161: PUSH
29162: DOUBLE
29163: LD_INT 16
29165: DEC
29166: ST_TO_ADDR
29167: LD_INT 25
29169: PUSH
29170: FOR_TO
29171: IFFALSE 29244
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_VAR 0 3
29182: PUSH
29183: LD_INT 22
29185: PUSH
29186: LD_VAR 0 1
29190: PPUSH
29191: CALL_OW 255
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 91
29202: PUSH
29203: LD_VAR 0 1
29207: PUSH
29208: LD_INT 6
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 30
29218: PUSH
29219: LD_VAR 0 4
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: LIST
29232: PUSH
29233: EMPTY
29234: LIST
29235: PPUSH
29236: CALL_OW 69
29240: ADD
29241: ST_TO_ADDR
29242: GO 29170
29244: POP
29245: POP
// for i = 1 to tmp do
29246: LD_ADDR_VAR 0 4
29250: PUSH
29251: DOUBLE
29252: LD_INT 1
29254: DEC
29255: ST_TO_ADDR
29256: LD_VAR 0 3
29260: PUSH
29261: FOR_TO
29262: IFFALSE 29350
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29264: LD_ADDR_VAR 0 5
29268: PUSH
29269: LD_VAR 0 5
29273: PUSH
29274: LD_VAR 0 3
29278: PUSH
29279: LD_VAR 0 4
29283: ARRAY
29284: PPUSH
29285: CALL_OW 266
29289: PUSH
29290: LD_VAR 0 3
29294: PUSH
29295: LD_VAR 0 4
29299: ARRAY
29300: PPUSH
29301: CALL_OW 250
29305: PUSH
29306: LD_VAR 0 3
29310: PUSH
29311: LD_VAR 0 4
29315: ARRAY
29316: PPUSH
29317: CALL_OW 251
29321: PUSH
29322: LD_VAR 0 3
29326: PUSH
29327: LD_VAR 0 4
29331: ARRAY
29332: PPUSH
29333: CALL_OW 254
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: ADD
29347: ST_TO_ADDR
29348: GO 29261
29350: POP
29351: POP
// result := list ;
29352: LD_ADDR_VAR 0 2
29356: PUSH
29357: LD_VAR 0 5
29361: ST_TO_ADDR
// end ;
29362: LD_VAR 0 2
29366: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29367: LD_INT 0
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
// if not factory then
29376: LD_VAR 0 1
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 29978
// if control = control_apeman then
29385: LD_VAR 0 4
29389: PUSH
29390: LD_INT 5
29392: EQUAL
29393: IFFALSE 29502
// begin tmp := UnitsInside ( factory ) ;
29395: LD_ADDR_VAR 0 8
29399: PUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 313
29409: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29410: LD_VAR 0 8
29414: PPUSH
29415: LD_INT 25
29417: PUSH
29418: LD_INT 12
29420: PUSH
29421: EMPTY
29422: LIST
29423: LIST
29424: PPUSH
29425: CALL_OW 72
29429: NOT
29430: IFFALSE 29440
// control := control_manual ;
29432: LD_ADDR_VAR 0 4
29436: PUSH
29437: LD_INT 1
29439: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29440: LD_ADDR_VAR 0 8
29444: PUSH
29445: LD_VAR 0 1
29449: PPUSH
29450: CALL 29137 0 1
29454: ST_TO_ADDR
// if tmp then
29455: LD_VAR 0 8
29459: IFFALSE 29502
// begin for i in tmp do
29461: LD_ADDR_VAR 0 7
29465: PUSH
29466: LD_VAR 0 8
29470: PUSH
29471: FOR_IN
29472: IFFALSE 29500
// if i [ 1 ] = b_ext_radio then
29474: LD_VAR 0 7
29478: PUSH
29479: LD_INT 1
29481: ARRAY
29482: PUSH
29483: LD_INT 22
29485: EQUAL
29486: IFFALSE 29498
// begin control := control_remote ;
29488: LD_ADDR_VAR 0 4
29492: PUSH
29493: LD_INT 2
29495: ST_TO_ADDR
// break ;
29496: GO 29500
// end ;
29498: GO 29471
29500: POP
29501: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29502: LD_VAR 0 1
29506: PPUSH
29507: LD_VAR 0 2
29511: PPUSH
29512: LD_VAR 0 3
29516: PPUSH
29517: LD_VAR 0 4
29521: PPUSH
29522: LD_VAR 0 5
29526: PPUSH
29527: CALL_OW 448
29531: IFFALSE 29566
// begin result := [ chassis , engine , control , weapon ] ;
29533: LD_ADDR_VAR 0 6
29537: PUSH
29538: LD_VAR 0 2
29542: PUSH
29543: LD_VAR 0 3
29547: PUSH
29548: LD_VAR 0 4
29552: PUSH
29553: LD_VAR 0 5
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: ST_TO_ADDR
// exit ;
29564: GO 29978
// end ; _chassis := AvailableChassisList ( factory ) ;
29566: LD_ADDR_VAR 0 9
29570: PUSH
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 475
29580: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29581: LD_ADDR_VAR 0 11
29585: PUSH
29586: LD_VAR 0 1
29590: PPUSH
29591: CALL_OW 476
29595: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29596: LD_ADDR_VAR 0 12
29600: PUSH
29601: LD_VAR 0 1
29605: PPUSH
29606: CALL_OW 477
29610: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29611: LD_ADDR_VAR 0 10
29615: PUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 478
29625: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29626: LD_VAR 0 9
29630: NOT
29631: PUSH
29632: LD_VAR 0 11
29636: NOT
29637: OR
29638: PUSH
29639: LD_VAR 0 12
29643: NOT
29644: OR
29645: PUSH
29646: LD_VAR 0 10
29650: NOT
29651: OR
29652: IFFALSE 29687
// begin result := [ chassis , engine , control , weapon ] ;
29654: LD_ADDR_VAR 0 6
29658: PUSH
29659: LD_VAR 0 2
29663: PUSH
29664: LD_VAR 0 3
29668: PUSH
29669: LD_VAR 0 4
29673: PUSH
29674: LD_VAR 0 5
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: ST_TO_ADDR
// exit ;
29685: GO 29978
// end ; if not chassis in _chassis then
29687: LD_VAR 0 2
29691: PUSH
29692: LD_VAR 0 9
29696: IN
29697: NOT
29698: IFFALSE 29724
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29700: LD_ADDR_VAR 0 2
29704: PUSH
29705: LD_VAR 0 9
29709: PUSH
29710: LD_INT 1
29712: PPUSH
29713: LD_VAR 0 9
29717: PPUSH
29718: CALL_OW 12
29722: ARRAY
29723: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29724: LD_VAR 0 2
29728: PPUSH
29729: LD_VAR 0 3
29733: PPUSH
29734: CALL 29983 0 2
29738: NOT
29739: IFFALSE 29798
// repeat engine := _engine [ 1 ] ;
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_VAR 0 11
29750: PUSH
29751: LD_INT 1
29753: ARRAY
29754: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29755: LD_ADDR_VAR 0 11
29759: PUSH
29760: LD_VAR 0 11
29764: PPUSH
29765: LD_INT 1
29767: PPUSH
29768: CALL_OW 3
29772: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29773: LD_VAR 0 2
29777: PPUSH
29778: LD_VAR 0 3
29782: PPUSH
29783: CALL 29983 0 2
29787: PUSH
29788: LD_VAR 0 11
29792: PUSH
29793: EMPTY
29794: EQUAL
29795: OR
29796: IFFALSE 29741
// if not control in _control then
29798: LD_VAR 0 4
29802: PUSH
29803: LD_VAR 0 12
29807: IN
29808: NOT
29809: IFFALSE 29835
// control := _control [ rand ( 1 , _control ) ] ;
29811: LD_ADDR_VAR 0 4
29815: PUSH
29816: LD_VAR 0 12
29820: PUSH
29821: LD_INT 1
29823: PPUSH
29824: LD_VAR 0 12
29828: PPUSH
29829: CALL_OW 12
29833: ARRAY
29834: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29835: LD_VAR 0 2
29839: PPUSH
29840: LD_VAR 0 5
29844: PPUSH
29845: CALL 30203 0 2
29849: NOT
29850: IFFALSE 29909
// repeat weapon := _weapon [ 1 ] ;
29852: LD_ADDR_VAR 0 5
29856: PUSH
29857: LD_VAR 0 10
29861: PUSH
29862: LD_INT 1
29864: ARRAY
29865: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29866: LD_ADDR_VAR 0 10
29870: PUSH
29871: LD_VAR 0 10
29875: PPUSH
29876: LD_INT 1
29878: PPUSH
29879: CALL_OW 3
29883: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29884: LD_VAR 0 2
29888: PPUSH
29889: LD_VAR 0 5
29893: PPUSH
29894: CALL 30203 0 2
29898: PUSH
29899: LD_VAR 0 10
29903: PUSH
29904: EMPTY
29905: EQUAL
29906: OR
29907: IFFALSE 29852
// result := [ ] ;
29909: LD_ADDR_VAR 0 6
29913: PUSH
29914: EMPTY
29915: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29916: LD_VAR 0 1
29920: PPUSH
29921: LD_VAR 0 2
29925: PPUSH
29926: LD_VAR 0 3
29930: PPUSH
29931: LD_VAR 0 4
29935: PPUSH
29936: LD_VAR 0 5
29940: PPUSH
29941: CALL_OW 448
29945: IFFALSE 29978
// result := [ chassis , engine , control , weapon ] ;
29947: LD_ADDR_VAR 0 6
29951: PUSH
29952: LD_VAR 0 2
29956: PUSH
29957: LD_VAR 0 3
29961: PUSH
29962: LD_VAR 0 4
29966: PUSH
29967: LD_VAR 0 5
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: LIST
29977: ST_TO_ADDR
// end ;
29978: LD_VAR 0 6
29982: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29983: LD_INT 0
29985: PPUSH
// if not chassis or not engine then
29986: LD_VAR 0 1
29990: NOT
29991: PUSH
29992: LD_VAR 0 2
29996: NOT
29997: OR
29998: IFFALSE 30002
// exit ;
30000: GO 30198
// case engine of engine_solar :
30002: LD_VAR 0 2
30006: PUSH
30007: LD_INT 2
30009: DOUBLE
30010: EQUAL
30011: IFTRUE 30015
30013: GO 30053
30015: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30016: LD_ADDR_VAR 0 3
30020: PUSH
30021: LD_INT 11
30023: PUSH
30024: LD_INT 12
30026: PUSH
30027: LD_INT 13
30029: PUSH
30030: LD_INT 14
30032: PUSH
30033: LD_INT 1
30035: PUSH
30036: LD_INT 2
30038: PUSH
30039: LD_INT 3
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: ST_TO_ADDR
30051: GO 30182
30053: LD_INT 1
30055: DOUBLE
30056: EQUAL
30057: IFTRUE 30061
30059: GO 30123
30061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_INT 11
30069: PUSH
30070: LD_INT 12
30072: PUSH
30073: LD_INT 13
30075: PUSH
30076: LD_INT 14
30078: PUSH
30079: LD_INT 1
30081: PUSH
30082: LD_INT 2
30084: PUSH
30085: LD_INT 3
30087: PUSH
30088: LD_INT 4
30090: PUSH
30091: LD_INT 5
30093: PUSH
30094: LD_INT 21
30096: PUSH
30097: LD_INT 23
30099: PUSH
30100: LD_INT 22
30102: PUSH
30103: LD_INT 24
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: ST_TO_ADDR
30121: GO 30182
30123: LD_INT 3
30125: DOUBLE
30126: EQUAL
30127: IFTRUE 30131
30129: GO 30181
30131: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30132: LD_ADDR_VAR 0 3
30136: PUSH
30137: LD_INT 13
30139: PUSH
30140: LD_INT 14
30142: PUSH
30143: LD_INT 2
30145: PUSH
30146: LD_INT 3
30148: PUSH
30149: LD_INT 4
30151: PUSH
30152: LD_INT 5
30154: PUSH
30155: LD_INT 21
30157: PUSH
30158: LD_INT 22
30160: PUSH
30161: LD_INT 23
30163: PUSH
30164: LD_INT 24
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: ST_TO_ADDR
30179: GO 30182
30181: POP
// result := ( chassis in result ) ;
30182: LD_ADDR_VAR 0 3
30186: PUSH
30187: LD_VAR 0 1
30191: PUSH
30192: LD_VAR 0 3
30196: IN
30197: ST_TO_ADDR
// end ;
30198: LD_VAR 0 3
30202: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30203: LD_INT 0
30205: PPUSH
// if not chassis or not weapon then
30206: LD_VAR 0 1
30210: NOT
30211: PUSH
30212: LD_VAR 0 2
30216: NOT
30217: OR
30218: IFFALSE 30222
// exit ;
30220: GO 31282
// case weapon of us_machine_gun :
30222: LD_VAR 0 2
30226: PUSH
30227: LD_INT 2
30229: DOUBLE
30230: EQUAL
30231: IFTRUE 30235
30233: GO 30265
30235: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30236: LD_ADDR_VAR 0 3
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: LD_INT 3
30249: PUSH
30250: LD_INT 4
30252: PUSH
30253: LD_INT 5
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: ST_TO_ADDR
30263: GO 31266
30265: LD_INT 3
30267: DOUBLE
30268: EQUAL
30269: IFTRUE 30273
30271: GO 30303
30273: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30274: LD_ADDR_VAR 0 3
30278: PUSH
30279: LD_INT 1
30281: PUSH
30282: LD_INT 2
30284: PUSH
30285: LD_INT 3
30287: PUSH
30288: LD_INT 4
30290: PUSH
30291: LD_INT 5
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: ST_TO_ADDR
30301: GO 31266
30303: LD_INT 11
30305: DOUBLE
30306: EQUAL
30307: IFTRUE 30311
30309: GO 30341
30311: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30312: LD_ADDR_VAR 0 3
30316: PUSH
30317: LD_INT 1
30319: PUSH
30320: LD_INT 2
30322: PUSH
30323: LD_INT 3
30325: PUSH
30326: LD_INT 4
30328: PUSH
30329: LD_INT 5
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: ST_TO_ADDR
30339: GO 31266
30341: LD_INT 4
30343: DOUBLE
30344: EQUAL
30345: IFTRUE 30349
30347: GO 30375
30349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30350: LD_ADDR_VAR 0 3
30354: PUSH
30355: LD_INT 2
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: LD_INT 4
30363: PUSH
30364: LD_INT 5
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: ST_TO_ADDR
30373: GO 31266
30375: LD_INT 5
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30409
30383: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30384: LD_ADDR_VAR 0 3
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: LD_INT 3
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: LD_INT 5
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
30407: GO 31266
30409: LD_INT 9
30411: DOUBLE
30412: EQUAL
30413: IFTRUE 30417
30415: GO 30443
30417: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30418: LD_ADDR_VAR 0 3
30422: PUSH
30423: LD_INT 2
30425: PUSH
30426: LD_INT 3
30428: PUSH
30429: LD_INT 4
30431: PUSH
30432: LD_INT 5
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: ST_TO_ADDR
30441: GO 31266
30443: LD_INT 7
30445: DOUBLE
30446: EQUAL
30447: IFTRUE 30451
30449: GO 30477
30451: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30452: LD_ADDR_VAR 0 3
30456: PUSH
30457: LD_INT 2
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: LD_INT 4
30465: PUSH
30466: LD_INT 5
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: ST_TO_ADDR
30475: GO 31266
30477: LD_INT 12
30479: DOUBLE
30480: EQUAL
30481: IFTRUE 30485
30483: GO 30511
30485: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30486: LD_ADDR_VAR 0 3
30490: PUSH
30491: LD_INT 2
30493: PUSH
30494: LD_INT 3
30496: PUSH
30497: LD_INT 4
30499: PUSH
30500: LD_INT 5
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: ST_TO_ADDR
30509: GO 31266
30511: LD_INT 13
30513: DOUBLE
30514: EQUAL
30515: IFTRUE 30519
30517: GO 30545
30519: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30520: LD_ADDR_VAR 0 3
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 3
30530: PUSH
30531: LD_INT 4
30533: PUSH
30534: LD_INT 5
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: ST_TO_ADDR
30543: GO 31266
30545: LD_INT 14
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30571
30553: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30554: LD_ADDR_VAR 0 3
30558: PUSH
30559: LD_INT 4
30561: PUSH
30562: LD_INT 5
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: ST_TO_ADDR
30569: GO 31266
30571: LD_INT 6
30573: DOUBLE
30574: EQUAL
30575: IFTRUE 30579
30577: GO 30597
30579: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30580: LD_ADDR_VAR 0 3
30584: PUSH
30585: LD_INT 4
30587: PUSH
30588: LD_INT 5
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: ST_TO_ADDR
30595: GO 31266
30597: LD_INT 10
30599: DOUBLE
30600: EQUAL
30601: IFTRUE 30605
30603: GO 30623
30605: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30606: LD_ADDR_VAR 0 3
30610: PUSH
30611: LD_INT 4
30613: PUSH
30614: LD_INT 5
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: ST_TO_ADDR
30621: GO 31266
30623: LD_INT 22
30625: DOUBLE
30626: EQUAL
30627: IFTRUE 30631
30629: GO 30657
30631: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30632: LD_ADDR_VAR 0 3
30636: PUSH
30637: LD_INT 11
30639: PUSH
30640: LD_INT 12
30642: PUSH
30643: LD_INT 13
30645: PUSH
30646: LD_INT 14
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
30655: GO 31266
30657: LD_INT 23
30659: DOUBLE
30660: EQUAL
30661: IFTRUE 30665
30663: GO 30691
30665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30666: LD_ADDR_VAR 0 3
30670: PUSH
30671: LD_INT 11
30673: PUSH
30674: LD_INT 12
30676: PUSH
30677: LD_INT 13
30679: PUSH
30680: LD_INT 14
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: ST_TO_ADDR
30689: GO 31266
30691: LD_INT 24
30693: DOUBLE
30694: EQUAL
30695: IFTRUE 30699
30697: GO 30725
30699: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30700: LD_ADDR_VAR 0 3
30704: PUSH
30705: LD_INT 11
30707: PUSH
30708: LD_INT 12
30710: PUSH
30711: LD_INT 13
30713: PUSH
30714: LD_INT 14
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: ST_TO_ADDR
30723: GO 31266
30725: LD_INT 30
30727: DOUBLE
30728: EQUAL
30729: IFTRUE 30733
30731: GO 30759
30733: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 11
30741: PUSH
30742: LD_INT 12
30744: PUSH
30745: LD_INT 13
30747: PUSH
30748: LD_INT 14
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: ST_TO_ADDR
30757: GO 31266
30759: LD_INT 25
30761: DOUBLE
30762: EQUAL
30763: IFTRUE 30767
30765: GO 30785
30767: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30768: LD_ADDR_VAR 0 3
30772: PUSH
30773: LD_INT 13
30775: PUSH
30776: LD_INT 14
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: ST_TO_ADDR
30783: GO 31266
30785: LD_INT 27
30787: DOUBLE
30788: EQUAL
30789: IFTRUE 30793
30791: GO 30811
30793: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30794: LD_ADDR_VAR 0 3
30798: PUSH
30799: LD_INT 13
30801: PUSH
30802: LD_INT 14
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: ST_TO_ADDR
30809: GO 31266
30811: LD_INT 92
30813: DOUBLE
30814: EQUAL
30815: IFTRUE 30819
30817: GO 30845
30819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30820: LD_ADDR_VAR 0 3
30824: PUSH
30825: LD_INT 11
30827: PUSH
30828: LD_INT 12
30830: PUSH
30831: LD_INT 13
30833: PUSH
30834: LD_INT 14
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
30843: GO 31266
30845: LD_INT 28
30847: DOUBLE
30848: EQUAL
30849: IFTRUE 30853
30851: GO 30871
30853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30854: LD_ADDR_VAR 0 3
30858: PUSH
30859: LD_INT 13
30861: PUSH
30862: LD_INT 14
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: ST_TO_ADDR
30869: GO 31266
30871: LD_INT 29
30873: DOUBLE
30874: EQUAL
30875: IFTRUE 30879
30877: GO 30897
30879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30880: LD_ADDR_VAR 0 3
30884: PUSH
30885: LD_INT 13
30887: PUSH
30888: LD_INT 14
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: ST_TO_ADDR
30895: GO 31266
30897: LD_INT 31
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30923
30905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30906: LD_ADDR_VAR 0 3
30910: PUSH
30911: LD_INT 13
30913: PUSH
30914: LD_INT 14
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: ST_TO_ADDR
30921: GO 31266
30923: LD_INT 26
30925: DOUBLE
30926: EQUAL
30927: IFTRUE 30931
30929: GO 30949
30931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30932: LD_ADDR_VAR 0 3
30936: PUSH
30937: LD_INT 13
30939: PUSH
30940: LD_INT 14
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: ST_TO_ADDR
30947: GO 31266
30949: LD_INT 42
30951: DOUBLE
30952: EQUAL
30953: IFTRUE 30957
30955: GO 30983
30957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30958: LD_ADDR_VAR 0 3
30962: PUSH
30963: LD_INT 21
30965: PUSH
30966: LD_INT 22
30968: PUSH
30969: LD_INT 23
30971: PUSH
30972: LD_INT 24
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: ST_TO_ADDR
30981: GO 31266
30983: LD_INT 43
30985: DOUBLE
30986: EQUAL
30987: IFTRUE 30991
30989: GO 31017
30991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30992: LD_ADDR_VAR 0 3
30996: PUSH
30997: LD_INT 21
30999: PUSH
31000: LD_INT 22
31002: PUSH
31003: LD_INT 23
31005: PUSH
31006: LD_INT 24
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: ST_TO_ADDR
31015: GO 31266
31017: LD_INT 44
31019: DOUBLE
31020: EQUAL
31021: IFTRUE 31025
31023: GO 31051
31025: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_INT 21
31033: PUSH
31034: LD_INT 22
31036: PUSH
31037: LD_INT 23
31039: PUSH
31040: LD_INT 24
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: ST_TO_ADDR
31049: GO 31266
31051: LD_INT 45
31053: DOUBLE
31054: EQUAL
31055: IFTRUE 31059
31057: GO 31085
31059: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31060: LD_ADDR_VAR 0 3
31064: PUSH
31065: LD_INT 21
31067: PUSH
31068: LD_INT 22
31070: PUSH
31071: LD_INT 23
31073: PUSH
31074: LD_INT 24
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: ST_TO_ADDR
31083: GO 31266
31085: LD_INT 49
31087: DOUBLE
31088: EQUAL
31089: IFTRUE 31093
31091: GO 31119
31093: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31094: LD_ADDR_VAR 0 3
31098: PUSH
31099: LD_INT 21
31101: PUSH
31102: LD_INT 22
31104: PUSH
31105: LD_INT 23
31107: PUSH
31108: LD_INT 24
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: ST_TO_ADDR
31117: GO 31266
31119: LD_INT 51
31121: DOUBLE
31122: EQUAL
31123: IFTRUE 31127
31125: GO 31153
31127: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31128: LD_ADDR_VAR 0 3
31132: PUSH
31133: LD_INT 21
31135: PUSH
31136: LD_INT 22
31138: PUSH
31139: LD_INT 23
31141: PUSH
31142: LD_INT 24
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
31151: GO 31266
31153: LD_INT 52
31155: DOUBLE
31156: EQUAL
31157: IFTRUE 31161
31159: GO 31187
31161: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31162: LD_ADDR_VAR 0 3
31166: PUSH
31167: LD_INT 21
31169: PUSH
31170: LD_INT 22
31172: PUSH
31173: LD_INT 23
31175: PUSH
31176: LD_INT 24
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: ST_TO_ADDR
31185: GO 31266
31187: LD_INT 53
31189: DOUBLE
31190: EQUAL
31191: IFTRUE 31195
31193: GO 31213
31195: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31196: LD_ADDR_VAR 0 3
31200: PUSH
31201: LD_INT 23
31203: PUSH
31204: LD_INT 24
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: ST_TO_ADDR
31211: GO 31266
31213: LD_INT 46
31215: DOUBLE
31216: EQUAL
31217: IFTRUE 31221
31219: GO 31239
31221: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31222: LD_ADDR_VAR 0 3
31226: PUSH
31227: LD_INT 23
31229: PUSH
31230: LD_INT 24
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: ST_TO_ADDR
31237: GO 31266
31239: LD_INT 47
31241: DOUBLE
31242: EQUAL
31243: IFTRUE 31247
31245: GO 31265
31247: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31248: LD_ADDR_VAR 0 3
31252: PUSH
31253: LD_INT 23
31255: PUSH
31256: LD_INT 24
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: ST_TO_ADDR
31263: GO 31266
31265: POP
// result := ( chassis in result ) ;
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_VAR 0 1
31275: PUSH
31276: LD_VAR 0 3
31280: IN
31281: ST_TO_ADDR
// end ;
31282: LD_VAR 0 3
31286: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31287: LD_INT 0
31289: PPUSH
31290: PPUSH
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
31295: PPUSH
// result := array ;
31296: LD_ADDR_VAR 0 5
31300: PUSH
31301: LD_VAR 0 1
31305: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31306: LD_VAR 0 1
31310: NOT
31311: PUSH
31312: LD_VAR 0 2
31316: NOT
31317: OR
31318: PUSH
31319: LD_VAR 0 3
31323: NOT
31324: OR
31325: PUSH
31326: LD_VAR 0 2
31330: PUSH
31331: LD_VAR 0 1
31335: GREATER
31336: OR
31337: PUSH
31338: LD_VAR 0 3
31342: PUSH
31343: LD_VAR 0 1
31347: GREATER
31348: OR
31349: IFFALSE 31353
// exit ;
31351: GO 31649
// if direction then
31353: LD_VAR 0 4
31357: IFFALSE 31421
// begin d := 1 ;
31359: LD_ADDR_VAR 0 9
31363: PUSH
31364: LD_INT 1
31366: ST_TO_ADDR
// if i_from > i_to then
31367: LD_VAR 0 2
31371: PUSH
31372: LD_VAR 0 3
31376: GREATER
31377: IFFALSE 31403
// length := ( array - i_from ) + i_to else
31379: LD_ADDR_VAR 0 11
31383: PUSH
31384: LD_VAR 0 1
31388: PUSH
31389: LD_VAR 0 2
31393: MINUS
31394: PUSH
31395: LD_VAR 0 3
31399: PLUS
31400: ST_TO_ADDR
31401: GO 31419
// length := i_to - i_from ;
31403: LD_ADDR_VAR 0 11
31407: PUSH
31408: LD_VAR 0 3
31412: PUSH
31413: LD_VAR 0 2
31417: MINUS
31418: ST_TO_ADDR
// end else
31419: GO 31482
// begin d := - 1 ;
31421: LD_ADDR_VAR 0 9
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: ST_TO_ADDR
// if i_from > i_to then
31430: LD_VAR 0 2
31434: PUSH
31435: LD_VAR 0 3
31439: GREATER
31440: IFFALSE 31460
// length := i_from - i_to else
31442: LD_ADDR_VAR 0 11
31446: PUSH
31447: LD_VAR 0 2
31451: PUSH
31452: LD_VAR 0 3
31456: MINUS
31457: ST_TO_ADDR
31458: GO 31482
// length := ( array - i_to ) + i_from ;
31460: LD_ADDR_VAR 0 11
31464: PUSH
31465: LD_VAR 0 1
31469: PUSH
31470: LD_VAR 0 3
31474: MINUS
31475: PUSH
31476: LD_VAR 0 2
31480: PLUS
31481: ST_TO_ADDR
// end ; if not length then
31482: LD_VAR 0 11
31486: NOT
31487: IFFALSE 31491
// exit ;
31489: GO 31649
// tmp := array ;
31491: LD_ADDR_VAR 0 10
31495: PUSH
31496: LD_VAR 0 1
31500: ST_TO_ADDR
// for i = 1 to length do
31501: LD_ADDR_VAR 0 6
31505: PUSH
31506: DOUBLE
31507: LD_INT 1
31509: DEC
31510: ST_TO_ADDR
31511: LD_VAR 0 11
31515: PUSH
31516: FOR_TO
31517: IFFALSE 31637
// begin for j = 1 to array do
31519: LD_ADDR_VAR 0 7
31523: PUSH
31524: DOUBLE
31525: LD_INT 1
31527: DEC
31528: ST_TO_ADDR
31529: LD_VAR 0 1
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31623
// begin k := j + d ;
31537: LD_ADDR_VAR 0 8
31541: PUSH
31542: LD_VAR 0 7
31546: PUSH
31547: LD_VAR 0 9
31551: PLUS
31552: ST_TO_ADDR
// if k > array then
31553: LD_VAR 0 8
31557: PUSH
31558: LD_VAR 0 1
31562: GREATER
31563: IFFALSE 31573
// k := 1 ;
31565: LD_ADDR_VAR 0 8
31569: PUSH
31570: LD_INT 1
31572: ST_TO_ADDR
// if not k then
31573: LD_VAR 0 8
31577: NOT
31578: IFFALSE 31590
// k := array ;
31580: LD_ADDR_VAR 0 8
31584: PUSH
31585: LD_VAR 0 1
31589: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31590: LD_ADDR_VAR 0 10
31594: PUSH
31595: LD_VAR 0 10
31599: PPUSH
31600: LD_VAR 0 8
31604: PPUSH
31605: LD_VAR 0 1
31609: PUSH
31610: LD_VAR 0 7
31614: ARRAY
31615: PPUSH
31616: CALL_OW 1
31620: ST_TO_ADDR
// end ;
31621: GO 31534
31623: POP
31624: POP
// array := tmp ;
31625: LD_ADDR_VAR 0 1
31629: PUSH
31630: LD_VAR 0 10
31634: ST_TO_ADDR
// end ;
31635: GO 31516
31637: POP
31638: POP
// result := array ;
31639: LD_ADDR_VAR 0 5
31643: PUSH
31644: LD_VAR 0 1
31648: ST_TO_ADDR
// end ;
31649: LD_VAR 0 5
31653: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31654: LD_INT 0
31656: PPUSH
31657: PPUSH
// result := 0 ;
31658: LD_ADDR_VAR 0 3
31662: PUSH
31663: LD_INT 0
31665: ST_TO_ADDR
// if not array or not value in array then
31666: LD_VAR 0 1
31670: NOT
31671: PUSH
31672: LD_VAR 0 2
31676: PUSH
31677: LD_VAR 0 1
31681: IN
31682: NOT
31683: OR
31684: IFFALSE 31688
// exit ;
31686: GO 31742
// for i = 1 to array do
31688: LD_ADDR_VAR 0 4
31692: PUSH
31693: DOUBLE
31694: LD_INT 1
31696: DEC
31697: ST_TO_ADDR
31698: LD_VAR 0 1
31702: PUSH
31703: FOR_TO
31704: IFFALSE 31740
// if value = array [ i ] then
31706: LD_VAR 0 2
31710: PUSH
31711: LD_VAR 0 1
31715: PUSH
31716: LD_VAR 0 4
31720: ARRAY
31721: EQUAL
31722: IFFALSE 31738
// begin result := i ;
31724: LD_ADDR_VAR 0 3
31728: PUSH
31729: LD_VAR 0 4
31733: ST_TO_ADDR
// exit ;
31734: POP
31735: POP
31736: GO 31742
// end ;
31738: GO 31703
31740: POP
31741: POP
// end ;
31742: LD_VAR 0 3
31746: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31747: LD_INT 0
31749: PPUSH
// vc_chassis := chassis ;
31750: LD_ADDR_OWVAR 37
31754: PUSH
31755: LD_VAR 0 1
31759: ST_TO_ADDR
// vc_engine := engine ;
31760: LD_ADDR_OWVAR 39
31764: PUSH
31765: LD_VAR 0 2
31769: ST_TO_ADDR
// vc_control := control ;
31770: LD_ADDR_OWVAR 38
31774: PUSH
31775: LD_VAR 0 3
31779: ST_TO_ADDR
// vc_weapon := weapon ;
31780: LD_ADDR_OWVAR 40
31784: PUSH
31785: LD_VAR 0 4
31789: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31790: LD_ADDR_OWVAR 41
31794: PUSH
31795: LD_VAR 0 5
31799: ST_TO_ADDR
// end ;
31800: LD_VAR 0 6
31804: RET
// export function WantPlant ( unit ) ; var task ; begin
31805: LD_INT 0
31807: PPUSH
31808: PPUSH
// result := false ;
31809: LD_ADDR_VAR 0 2
31813: PUSH
31814: LD_INT 0
31816: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_VAR 0 1
31826: PPUSH
31827: CALL_OW 437
31831: ST_TO_ADDR
// if task then
31832: LD_VAR 0 3
31836: IFFALSE 31864
// if task [ 1 ] [ 1 ] = p then
31838: LD_VAR 0 3
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PUSH
31847: LD_INT 1
31849: ARRAY
31850: PUSH
31851: LD_STRING p
31853: EQUAL
31854: IFFALSE 31864
// result := true ;
31856: LD_ADDR_VAR 0 2
31860: PUSH
31861: LD_INT 1
31863: ST_TO_ADDR
// end ;
31864: LD_VAR 0 2
31868: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31869: LD_INT 0
31871: PPUSH
31872: PPUSH
31873: PPUSH
31874: PPUSH
// if pos < 1 then
31875: LD_VAR 0 2
31879: PUSH
31880: LD_INT 1
31882: LESS
31883: IFFALSE 31887
// exit ;
31885: GO 32190
// if pos = 1 then
31887: LD_VAR 0 2
31891: PUSH
31892: LD_INT 1
31894: EQUAL
31895: IFFALSE 31928
// result := Replace ( arr , pos [ 1 ] , value ) else
31897: LD_ADDR_VAR 0 4
31901: PUSH
31902: LD_VAR 0 1
31906: PPUSH
31907: LD_VAR 0 2
31911: PUSH
31912: LD_INT 1
31914: ARRAY
31915: PPUSH
31916: LD_VAR 0 3
31920: PPUSH
31921: CALL_OW 1
31925: ST_TO_ADDR
31926: GO 32190
// begin tmp := arr ;
31928: LD_ADDR_VAR 0 6
31932: PUSH
31933: LD_VAR 0 1
31937: ST_TO_ADDR
// s_arr := [ tmp ] ;
31938: LD_ADDR_VAR 0 7
31942: PUSH
31943: LD_VAR 0 6
31947: PUSH
31948: EMPTY
31949: LIST
31950: ST_TO_ADDR
// for i = 1 to pos - 1 do
31951: LD_ADDR_VAR 0 5
31955: PUSH
31956: DOUBLE
31957: LD_INT 1
31959: DEC
31960: ST_TO_ADDR
31961: LD_VAR 0 2
31965: PUSH
31966: LD_INT 1
31968: MINUS
31969: PUSH
31970: FOR_TO
31971: IFFALSE 32016
// begin tmp := tmp [ pos [ i ] ] ;
31973: LD_ADDR_VAR 0 6
31977: PUSH
31978: LD_VAR 0 6
31982: PUSH
31983: LD_VAR 0 2
31987: PUSH
31988: LD_VAR 0 5
31992: ARRAY
31993: ARRAY
31994: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31995: LD_ADDR_VAR 0 7
31999: PUSH
32000: LD_VAR 0 7
32004: PUSH
32005: LD_VAR 0 6
32009: PUSH
32010: EMPTY
32011: LIST
32012: ADD
32013: ST_TO_ADDR
// end ;
32014: GO 31970
32016: POP
32017: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32018: LD_ADDR_VAR 0 6
32022: PUSH
32023: LD_VAR 0 6
32027: PPUSH
32028: LD_VAR 0 2
32032: PUSH
32033: LD_VAR 0 2
32037: ARRAY
32038: PPUSH
32039: LD_VAR 0 3
32043: PPUSH
32044: CALL_OW 1
32048: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32049: LD_ADDR_VAR 0 7
32053: PUSH
32054: LD_VAR 0 7
32058: PPUSH
32059: LD_VAR 0 7
32063: PPUSH
32064: LD_VAR 0 6
32068: PPUSH
32069: CALL_OW 1
32073: ST_TO_ADDR
// for i = s_arr downto 2 do
32074: LD_ADDR_VAR 0 5
32078: PUSH
32079: DOUBLE
32080: LD_VAR 0 7
32084: INC
32085: ST_TO_ADDR
32086: LD_INT 2
32088: PUSH
32089: FOR_DOWNTO
32090: IFFALSE 32174
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32092: LD_ADDR_VAR 0 6
32096: PUSH
32097: LD_VAR 0 7
32101: PUSH
32102: LD_VAR 0 5
32106: PUSH
32107: LD_INT 1
32109: MINUS
32110: ARRAY
32111: PPUSH
32112: LD_VAR 0 2
32116: PUSH
32117: LD_VAR 0 5
32121: PUSH
32122: LD_INT 1
32124: MINUS
32125: ARRAY
32126: PPUSH
32127: LD_VAR 0 7
32131: PUSH
32132: LD_VAR 0 5
32136: ARRAY
32137: PPUSH
32138: CALL_OW 1
32142: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32143: LD_ADDR_VAR 0 7
32147: PUSH
32148: LD_VAR 0 7
32152: PPUSH
32153: LD_VAR 0 5
32157: PUSH
32158: LD_INT 1
32160: MINUS
32161: PPUSH
32162: LD_VAR 0 6
32166: PPUSH
32167: CALL_OW 1
32171: ST_TO_ADDR
// end ;
32172: GO 32089
32174: POP
32175: POP
// result := s_arr [ 1 ] ;
32176: LD_ADDR_VAR 0 4
32180: PUSH
32181: LD_VAR 0 7
32185: PUSH
32186: LD_INT 1
32188: ARRAY
32189: ST_TO_ADDR
// end ; end ;
32190: LD_VAR 0 4
32194: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32195: LD_INT 0
32197: PPUSH
32198: PPUSH
// if not list then
32199: LD_VAR 0 1
32203: NOT
32204: IFFALSE 32208
// exit ;
32206: GO 32299
// i := list [ pos1 ] ;
32208: LD_ADDR_VAR 0 5
32212: PUSH
32213: LD_VAR 0 1
32217: PUSH
32218: LD_VAR 0 2
32222: ARRAY
32223: ST_TO_ADDR
// if not i then
32224: LD_VAR 0 5
32228: NOT
32229: IFFALSE 32233
// exit ;
32231: GO 32299
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32233: LD_ADDR_VAR 0 1
32237: PUSH
32238: LD_VAR 0 1
32242: PPUSH
32243: LD_VAR 0 2
32247: PPUSH
32248: LD_VAR 0 1
32252: PUSH
32253: LD_VAR 0 3
32257: ARRAY
32258: PPUSH
32259: CALL_OW 1
32263: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32264: LD_ADDR_VAR 0 1
32268: PUSH
32269: LD_VAR 0 1
32273: PPUSH
32274: LD_VAR 0 3
32278: PPUSH
32279: LD_VAR 0 5
32283: PPUSH
32284: CALL_OW 1
32288: ST_TO_ADDR
// result := list ;
32289: LD_ADDR_VAR 0 4
32293: PUSH
32294: LD_VAR 0 1
32298: ST_TO_ADDR
// end ;
32299: LD_VAR 0 4
32303: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32304: LD_INT 0
32306: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32307: LD_ADDR_VAR 0 5
32311: PUSH
32312: LD_VAR 0 1
32316: PPUSH
32317: CALL_OW 250
32321: PPUSH
32322: LD_VAR 0 1
32326: PPUSH
32327: CALL_OW 251
32331: PPUSH
32332: LD_VAR 0 2
32336: PPUSH
32337: LD_VAR 0 3
32341: PPUSH
32342: LD_VAR 0 4
32346: PPUSH
32347: CALL 32357 0 5
32351: ST_TO_ADDR
// end ;
32352: LD_VAR 0 5
32356: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32357: LD_INT 0
32359: PPUSH
32360: PPUSH
32361: PPUSH
32362: PPUSH
// if not list then
32363: LD_VAR 0 3
32367: NOT
32368: IFFALSE 32372
// exit ;
32370: GO 32760
// result := [ ] ;
32372: LD_ADDR_VAR 0 6
32376: PUSH
32377: EMPTY
32378: ST_TO_ADDR
// for i in list do
32379: LD_ADDR_VAR 0 7
32383: PUSH
32384: LD_VAR 0 3
32388: PUSH
32389: FOR_IN
32390: IFFALSE 32592
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32392: LD_ADDR_VAR 0 9
32396: PUSH
32397: LD_VAR 0 7
32401: PPUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: LD_VAR 0 2
32411: PPUSH
32412: CALL_OW 297
32416: ST_TO_ADDR
// if not result then
32417: LD_VAR 0 6
32421: NOT
32422: IFFALSE 32448
// result := [ [ i , tmp ] ] else
32424: LD_ADDR_VAR 0 6
32428: PUSH
32429: LD_VAR 0 7
32433: PUSH
32434: LD_VAR 0 9
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: EMPTY
32444: LIST
32445: ST_TO_ADDR
32446: GO 32590
// begin if result [ result ] [ 2 ] < tmp then
32448: LD_VAR 0 6
32452: PUSH
32453: LD_VAR 0 6
32457: ARRAY
32458: PUSH
32459: LD_INT 2
32461: ARRAY
32462: PUSH
32463: LD_VAR 0 9
32467: LESS
32468: IFFALSE 32510
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32470: LD_ADDR_VAR 0 6
32474: PUSH
32475: LD_VAR 0 6
32479: PPUSH
32480: LD_VAR 0 6
32484: PUSH
32485: LD_INT 1
32487: PLUS
32488: PPUSH
32489: LD_VAR 0 7
32493: PUSH
32494: LD_VAR 0 9
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PPUSH
32503: CALL_OW 2
32507: ST_TO_ADDR
32508: GO 32590
// for j = 1 to result do
32510: LD_ADDR_VAR 0 8
32514: PUSH
32515: DOUBLE
32516: LD_INT 1
32518: DEC
32519: ST_TO_ADDR
32520: LD_VAR 0 6
32524: PUSH
32525: FOR_TO
32526: IFFALSE 32588
// begin if tmp < result [ j ] [ 2 ] then
32528: LD_VAR 0 9
32532: PUSH
32533: LD_VAR 0 6
32537: PUSH
32538: LD_VAR 0 8
32542: ARRAY
32543: PUSH
32544: LD_INT 2
32546: ARRAY
32547: LESS
32548: IFFALSE 32586
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32550: LD_ADDR_VAR 0 6
32554: PUSH
32555: LD_VAR 0 6
32559: PPUSH
32560: LD_VAR 0 8
32564: PPUSH
32565: LD_VAR 0 7
32569: PUSH
32570: LD_VAR 0 9
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PPUSH
32579: CALL_OW 2
32583: ST_TO_ADDR
// break ;
32584: GO 32588
// end ; end ;
32586: GO 32525
32588: POP
32589: POP
// end ; end ;
32590: GO 32389
32592: POP
32593: POP
// if result and not asc then
32594: LD_VAR 0 6
32598: PUSH
32599: LD_VAR 0 4
32603: NOT
32604: AND
32605: IFFALSE 32680
// begin tmp := result ;
32607: LD_ADDR_VAR 0 9
32611: PUSH
32612: LD_VAR 0 6
32616: ST_TO_ADDR
// for i = tmp downto 1 do
32617: LD_ADDR_VAR 0 7
32621: PUSH
32622: DOUBLE
32623: LD_VAR 0 9
32627: INC
32628: ST_TO_ADDR
32629: LD_INT 1
32631: PUSH
32632: FOR_DOWNTO
32633: IFFALSE 32678
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32635: LD_ADDR_VAR 0 6
32639: PUSH
32640: LD_VAR 0 6
32644: PPUSH
32645: LD_VAR 0 9
32649: PUSH
32650: LD_VAR 0 7
32654: MINUS
32655: PUSH
32656: LD_INT 1
32658: PLUS
32659: PPUSH
32660: LD_VAR 0 9
32664: PUSH
32665: LD_VAR 0 7
32669: ARRAY
32670: PPUSH
32671: CALL_OW 1
32675: ST_TO_ADDR
32676: GO 32632
32678: POP
32679: POP
// end ; tmp := [ ] ;
32680: LD_ADDR_VAR 0 9
32684: PUSH
32685: EMPTY
32686: ST_TO_ADDR
// if mode then
32687: LD_VAR 0 5
32691: IFFALSE 32760
// begin for i = 1 to result do
32693: LD_ADDR_VAR 0 7
32697: PUSH
32698: DOUBLE
32699: LD_INT 1
32701: DEC
32702: ST_TO_ADDR
32703: LD_VAR 0 6
32707: PUSH
32708: FOR_TO
32709: IFFALSE 32748
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32711: LD_ADDR_VAR 0 9
32715: PUSH
32716: LD_VAR 0 9
32720: PPUSH
32721: LD_VAR 0 7
32725: PPUSH
32726: LD_VAR 0 6
32730: PUSH
32731: LD_VAR 0 7
32735: ARRAY
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: PPUSH
32741: CALL_OW 1
32745: ST_TO_ADDR
32746: GO 32708
32748: POP
32749: POP
// result := tmp ;
32750: LD_ADDR_VAR 0 6
32754: PUSH
32755: LD_VAR 0 9
32759: ST_TO_ADDR
// end ; end ;
32760: LD_VAR 0 6
32764: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32765: LD_INT 0
32767: PPUSH
32768: PPUSH
32769: PPUSH
32770: PPUSH
32771: PPUSH
32772: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32773: LD_ADDR_VAR 0 5
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 0
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
// if not x or not y then
32795: LD_VAR 0 2
32799: NOT
32800: PUSH
32801: LD_VAR 0 3
32805: NOT
32806: OR
32807: IFFALSE 32811
// exit ;
32809: GO 34461
// if not range then
32811: LD_VAR 0 4
32815: NOT
32816: IFFALSE 32826
// range := 10 ;
32818: LD_ADDR_VAR 0 4
32822: PUSH
32823: LD_INT 10
32825: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32826: LD_ADDR_VAR 0 8
32830: PUSH
32831: LD_INT 81
32833: PUSH
32834: LD_VAR 0 1
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 92
32845: PUSH
32846: LD_VAR 0 2
32850: PUSH
32851: LD_VAR 0 3
32855: PUSH
32856: LD_VAR 0 4
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 3
32869: PUSH
32870: LD_INT 21
32872: PUSH
32873: LD_INT 3
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: LIST
32888: PPUSH
32889: CALL_OW 69
32893: ST_TO_ADDR
// if not tmp then
32894: LD_VAR 0 8
32898: NOT
32899: IFFALSE 32903
// exit ;
32901: GO 34461
// for i in tmp do
32903: LD_ADDR_VAR 0 6
32907: PUSH
32908: LD_VAR 0 8
32912: PUSH
32913: FOR_IN
32914: IFFALSE 34436
// begin points := [ 0 , 0 , 0 ] ;
32916: LD_ADDR_VAR 0 9
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: ST_TO_ADDR
// bpoints := 1 ;
32935: LD_ADDR_VAR 0 10
32939: PUSH
32940: LD_INT 1
32942: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32943: LD_VAR 0 6
32947: PPUSH
32948: CALL_OW 247
32952: PUSH
32953: LD_INT 1
32955: DOUBLE
32956: EQUAL
32957: IFTRUE 32961
32959: GO 33539
32961: POP
// begin if GetClass ( i ) = 1 then
32962: LD_VAR 0 6
32966: PPUSH
32967: CALL_OW 257
32971: PUSH
32972: LD_INT 1
32974: EQUAL
32975: IFFALSE 32996
// points := [ 10 , 5 , 3 ] ;
32977: LD_ADDR_VAR 0 9
32981: PUSH
32982: LD_INT 10
32984: PUSH
32985: LD_INT 5
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32996: LD_VAR 0 6
33000: PPUSH
33001: CALL_OW 257
33005: PUSH
33006: LD_INT 2
33008: PUSH
33009: LD_INT 3
33011: PUSH
33012: LD_INT 4
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: IN
33020: IFFALSE 33041
// points := [ 3 , 2 , 1 ] ;
33022: LD_ADDR_VAR 0 9
33026: PUSH
33027: LD_INT 3
33029: PUSH
33030: LD_INT 2
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33041: LD_VAR 0 6
33045: PPUSH
33046: CALL_OW 257
33050: PUSH
33051: LD_INT 5
33053: EQUAL
33054: IFFALSE 33075
// points := [ 130 , 5 , 2 ] ;
33056: LD_ADDR_VAR 0 9
33060: PUSH
33061: LD_INT 130
33063: PUSH
33064: LD_INT 5
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33075: LD_VAR 0 6
33079: PPUSH
33080: CALL_OW 257
33084: PUSH
33085: LD_INT 8
33087: EQUAL
33088: IFFALSE 33109
// points := [ 35 , 35 , 30 ] ;
33090: LD_ADDR_VAR 0 9
33094: PUSH
33095: LD_INT 35
33097: PUSH
33098: LD_INT 35
33100: PUSH
33101: LD_INT 30
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33109: LD_VAR 0 6
33113: PPUSH
33114: CALL_OW 257
33118: PUSH
33119: LD_INT 9
33121: EQUAL
33122: IFFALSE 33143
// points := [ 20 , 55 , 40 ] ;
33124: LD_ADDR_VAR 0 9
33128: PUSH
33129: LD_INT 20
33131: PUSH
33132: LD_INT 55
33134: PUSH
33135: LD_INT 40
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33143: LD_VAR 0 6
33147: PPUSH
33148: CALL_OW 257
33152: PUSH
33153: LD_INT 12
33155: PUSH
33156: LD_INT 16
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: IN
33163: IFFALSE 33184
// points := [ 5 , 3 , 2 ] ;
33165: LD_ADDR_VAR 0 9
33169: PUSH
33170: LD_INT 5
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: LIST
33183: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33184: LD_VAR 0 6
33188: PPUSH
33189: CALL_OW 257
33193: PUSH
33194: LD_INT 17
33196: EQUAL
33197: IFFALSE 33218
// points := [ 100 , 50 , 75 ] ;
33199: LD_ADDR_VAR 0 9
33203: PUSH
33204: LD_INT 100
33206: PUSH
33207: LD_INT 50
33209: PUSH
33210: LD_INT 75
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33218: LD_VAR 0 6
33222: PPUSH
33223: CALL_OW 257
33227: PUSH
33228: LD_INT 15
33230: EQUAL
33231: IFFALSE 33252
// points := [ 10 , 5 , 3 ] ;
33233: LD_ADDR_VAR 0 9
33237: PUSH
33238: LD_INT 10
33240: PUSH
33241: LD_INT 5
33243: PUSH
33244: LD_INT 3
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: LIST
33251: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33252: LD_VAR 0 6
33256: PPUSH
33257: CALL_OW 257
33261: PUSH
33262: LD_INT 14
33264: EQUAL
33265: IFFALSE 33286
// points := [ 10 , 0 , 0 ] ;
33267: LD_ADDR_VAR 0 9
33271: PUSH
33272: LD_INT 10
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: LIST
33285: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33286: LD_VAR 0 6
33290: PPUSH
33291: CALL_OW 257
33295: PUSH
33296: LD_INT 11
33298: EQUAL
33299: IFFALSE 33320
// points := [ 30 , 10 , 5 ] ;
33301: LD_ADDR_VAR 0 9
33305: PUSH
33306: LD_INT 30
33308: PUSH
33309: LD_INT 10
33311: PUSH
33312: LD_INT 5
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33320: LD_VAR 0 1
33324: PPUSH
33325: LD_INT 5
33327: PPUSH
33328: CALL_OW 321
33332: PUSH
33333: LD_INT 2
33335: EQUAL
33336: IFFALSE 33353
// bpoints := bpoints * 1.8 ;
33338: LD_ADDR_VAR 0 10
33342: PUSH
33343: LD_VAR 0 10
33347: PUSH
33348: LD_REAL  1.80000000000000E+0000
33351: MUL
33352: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33353: LD_VAR 0 6
33357: PPUSH
33358: CALL_OW 257
33362: PUSH
33363: LD_INT 1
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: LD_INT 4
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: IN
33381: PUSH
33382: LD_VAR 0 1
33386: PPUSH
33387: LD_INT 51
33389: PPUSH
33390: CALL_OW 321
33394: PUSH
33395: LD_INT 2
33397: EQUAL
33398: AND
33399: IFFALSE 33416
// bpoints := bpoints * 1.2 ;
33401: LD_ADDR_VAR 0 10
33405: PUSH
33406: LD_VAR 0 10
33410: PUSH
33411: LD_REAL  1.20000000000000E+0000
33414: MUL
33415: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33416: LD_VAR 0 6
33420: PPUSH
33421: CALL_OW 257
33425: PUSH
33426: LD_INT 5
33428: PUSH
33429: LD_INT 7
33431: PUSH
33432: LD_INT 9
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: LIST
33439: IN
33440: PUSH
33441: LD_VAR 0 1
33445: PPUSH
33446: LD_INT 52
33448: PPUSH
33449: CALL_OW 321
33453: PUSH
33454: LD_INT 2
33456: EQUAL
33457: AND
33458: IFFALSE 33475
// bpoints := bpoints * 1.5 ;
33460: LD_ADDR_VAR 0 10
33464: PUSH
33465: LD_VAR 0 10
33469: PUSH
33470: LD_REAL  1.50000000000000E+0000
33473: MUL
33474: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33475: LD_VAR 0 1
33479: PPUSH
33480: LD_INT 66
33482: PPUSH
33483: CALL_OW 321
33487: PUSH
33488: LD_INT 2
33490: EQUAL
33491: IFFALSE 33508
// bpoints := bpoints * 1.1 ;
33493: LD_ADDR_VAR 0 10
33497: PUSH
33498: LD_VAR 0 10
33502: PUSH
33503: LD_REAL  1.10000000000000E+0000
33506: MUL
33507: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33508: LD_ADDR_VAR 0 10
33512: PUSH
33513: LD_VAR 0 10
33517: PUSH
33518: LD_VAR 0 6
33522: PPUSH
33523: LD_INT 1
33525: PPUSH
33526: CALL_OW 259
33530: PUSH
33531: LD_REAL  1.15000000000000E+0000
33534: MUL
33535: MUL
33536: ST_TO_ADDR
// end ; unit_vehicle :
33537: GO 34365
33539: LD_INT 2
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 34353
33547: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33548: LD_VAR 0 6
33552: PPUSH
33553: CALL_OW 264
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: LD_INT 42
33563: PUSH
33564: LD_INT 24
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: IN
33572: IFFALSE 33593
// points := [ 25 , 5 , 3 ] ;
33574: LD_ADDR_VAR 0 9
33578: PUSH
33579: LD_INT 25
33581: PUSH
33582: LD_INT 5
33584: PUSH
33585: LD_INT 3
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33593: LD_VAR 0 6
33597: PPUSH
33598: CALL_OW 264
33602: PUSH
33603: LD_INT 4
33605: PUSH
33606: LD_INT 43
33608: PUSH
33609: LD_INT 25
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: IN
33617: IFFALSE 33638
// points := [ 40 , 15 , 5 ] ;
33619: LD_ADDR_VAR 0 9
33623: PUSH
33624: LD_INT 40
33626: PUSH
33627: LD_INT 15
33629: PUSH
33630: LD_INT 5
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33638: LD_VAR 0 6
33642: PPUSH
33643: CALL_OW 264
33647: PUSH
33648: LD_INT 3
33650: PUSH
33651: LD_INT 23
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: IN
33658: IFFALSE 33679
// points := [ 7 , 25 , 8 ] ;
33660: LD_ADDR_VAR 0 9
33664: PUSH
33665: LD_INT 7
33667: PUSH
33668: LD_INT 25
33670: PUSH
33671: LD_INT 8
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: LIST
33678: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33679: LD_VAR 0 6
33683: PPUSH
33684: CALL_OW 264
33688: PUSH
33689: LD_INT 5
33691: PUSH
33692: LD_INT 27
33694: PUSH
33695: LD_INT 44
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: IN
33703: IFFALSE 33724
// points := [ 14 , 50 , 16 ] ;
33705: LD_ADDR_VAR 0 9
33709: PUSH
33710: LD_INT 14
33712: PUSH
33713: LD_INT 50
33715: PUSH
33716: LD_INT 16
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33724: LD_VAR 0 6
33728: PPUSH
33729: CALL_OW 264
33733: PUSH
33734: LD_INT 6
33736: PUSH
33737: LD_INT 46
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: IN
33744: IFFALSE 33765
// points := [ 32 , 120 , 70 ] ;
33746: LD_ADDR_VAR 0 9
33750: PUSH
33751: LD_INT 32
33753: PUSH
33754: LD_INT 120
33756: PUSH
33757: LD_INT 70
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33765: LD_VAR 0 6
33769: PPUSH
33770: CALL_OW 264
33774: PUSH
33775: LD_INT 7
33777: PUSH
33778: LD_INT 28
33780: PUSH
33781: LD_INT 45
33783: PUSH
33784: LD_INT 92
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: IN
33793: IFFALSE 33814
// points := [ 35 , 20 , 45 ] ;
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: LD_INT 35
33802: PUSH
33803: LD_INT 20
33805: PUSH
33806: LD_INT 45
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: LIST
33813: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33814: LD_VAR 0 6
33818: PPUSH
33819: CALL_OW 264
33823: PUSH
33824: LD_INT 47
33826: PUSH
33827: EMPTY
33828: LIST
33829: IN
33830: IFFALSE 33851
// points := [ 67 , 45 , 75 ] ;
33832: LD_ADDR_VAR 0 9
33836: PUSH
33837: LD_INT 67
33839: PUSH
33840: LD_INT 45
33842: PUSH
33843: LD_INT 75
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33851: LD_VAR 0 6
33855: PPUSH
33856: CALL_OW 264
33860: PUSH
33861: LD_INT 26
33863: PUSH
33864: EMPTY
33865: LIST
33866: IN
33867: IFFALSE 33888
// points := [ 120 , 30 , 80 ] ;
33869: LD_ADDR_VAR 0 9
33873: PUSH
33874: LD_INT 120
33876: PUSH
33877: LD_INT 30
33879: PUSH
33880: LD_INT 80
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33888: LD_VAR 0 6
33892: PPUSH
33893: CALL_OW 264
33897: PUSH
33898: LD_INT 22
33900: PUSH
33901: EMPTY
33902: LIST
33903: IN
33904: IFFALSE 33925
// points := [ 40 , 1 , 1 ] ;
33906: LD_ADDR_VAR 0 9
33910: PUSH
33911: LD_INT 40
33913: PUSH
33914: LD_INT 1
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: LIST
33924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33925: LD_VAR 0 6
33929: PPUSH
33930: CALL_OW 264
33934: PUSH
33935: LD_INT 29
33937: PUSH
33938: EMPTY
33939: LIST
33940: IN
33941: IFFALSE 33962
// points := [ 70 , 200 , 400 ] ;
33943: LD_ADDR_VAR 0 9
33947: PUSH
33948: LD_INT 70
33950: PUSH
33951: LD_INT 200
33953: PUSH
33954: LD_INT 400
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: LIST
33961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33962: LD_VAR 0 6
33966: PPUSH
33967: CALL_OW 264
33971: PUSH
33972: LD_INT 14
33974: PUSH
33975: LD_INT 53
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: IN
33982: IFFALSE 34003
// points := [ 40 , 10 , 20 ] ;
33984: LD_ADDR_VAR 0 9
33988: PUSH
33989: LD_INT 40
33991: PUSH
33992: LD_INT 10
33994: PUSH
33995: LD_INT 20
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34003: LD_VAR 0 6
34007: PPUSH
34008: CALL_OW 264
34012: PUSH
34013: LD_INT 9
34015: PUSH
34016: EMPTY
34017: LIST
34018: IN
34019: IFFALSE 34040
// points := [ 5 , 70 , 20 ] ;
34021: LD_ADDR_VAR 0 9
34025: PUSH
34026: LD_INT 5
34028: PUSH
34029: LD_INT 70
34031: PUSH
34032: LD_INT 20
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: LIST
34039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34040: LD_VAR 0 6
34044: PPUSH
34045: CALL_OW 264
34049: PUSH
34050: LD_INT 10
34052: PUSH
34053: EMPTY
34054: LIST
34055: IN
34056: IFFALSE 34077
// points := [ 35 , 110 , 70 ] ;
34058: LD_ADDR_VAR 0 9
34062: PUSH
34063: LD_INT 35
34065: PUSH
34066: LD_INT 110
34068: PUSH
34069: LD_INT 70
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: LIST
34076: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34077: LD_VAR 0 6
34081: PPUSH
34082: CALL_OW 265
34086: PUSH
34087: LD_INT 25
34089: EQUAL
34090: IFFALSE 34111
// points := [ 80 , 65 , 100 ] ;
34092: LD_ADDR_VAR 0 9
34096: PUSH
34097: LD_INT 80
34099: PUSH
34100: LD_INT 65
34102: PUSH
34103: LD_INT 100
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34111: LD_VAR 0 6
34115: PPUSH
34116: CALL_OW 263
34120: PUSH
34121: LD_INT 1
34123: EQUAL
34124: IFFALSE 34159
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34126: LD_ADDR_VAR 0 10
34130: PUSH
34131: LD_VAR 0 10
34135: PUSH
34136: LD_VAR 0 6
34140: PPUSH
34141: CALL_OW 311
34145: PPUSH
34146: LD_INT 3
34148: PPUSH
34149: CALL_OW 259
34153: PUSH
34154: LD_INT 4
34156: MUL
34157: MUL
34158: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34159: LD_VAR 0 6
34163: PPUSH
34164: CALL_OW 263
34168: PUSH
34169: LD_INT 2
34171: EQUAL
34172: IFFALSE 34223
// begin j := IsControledBy ( i ) ;
34174: LD_ADDR_VAR 0 7
34178: PUSH
34179: LD_VAR 0 6
34183: PPUSH
34184: CALL_OW 312
34188: ST_TO_ADDR
// if j then
34189: LD_VAR 0 7
34193: IFFALSE 34223
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34195: LD_ADDR_VAR 0 10
34199: PUSH
34200: LD_VAR 0 10
34204: PUSH
34205: LD_VAR 0 7
34209: PPUSH
34210: LD_INT 3
34212: PPUSH
34213: CALL_OW 259
34217: PUSH
34218: LD_INT 3
34220: MUL
34221: MUL
34222: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34223: LD_VAR 0 6
34227: PPUSH
34228: CALL_OW 264
34232: PUSH
34233: LD_INT 5
34235: PUSH
34236: LD_INT 6
34238: PUSH
34239: LD_INT 46
34241: PUSH
34242: LD_INT 44
34244: PUSH
34245: LD_INT 47
34247: PUSH
34248: LD_INT 45
34250: PUSH
34251: LD_INT 28
34253: PUSH
34254: LD_INT 7
34256: PUSH
34257: LD_INT 27
34259: PUSH
34260: LD_INT 29
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: IN
34275: PUSH
34276: LD_VAR 0 1
34280: PPUSH
34281: LD_INT 52
34283: PPUSH
34284: CALL_OW 321
34288: PUSH
34289: LD_INT 2
34291: EQUAL
34292: AND
34293: IFFALSE 34310
// bpoints := bpoints * 1.2 ;
34295: LD_ADDR_VAR 0 10
34299: PUSH
34300: LD_VAR 0 10
34304: PUSH
34305: LD_REAL  1.20000000000000E+0000
34308: MUL
34309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34310: LD_VAR 0 6
34314: PPUSH
34315: CALL_OW 264
34319: PUSH
34320: LD_INT 6
34322: PUSH
34323: LD_INT 46
34325: PUSH
34326: LD_INT 47
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: LIST
34333: IN
34334: IFFALSE 34351
// bpoints := bpoints * 1.2 ;
34336: LD_ADDR_VAR 0 10
34340: PUSH
34341: LD_VAR 0 10
34345: PUSH
34346: LD_REAL  1.20000000000000E+0000
34349: MUL
34350: ST_TO_ADDR
// end ; unit_building :
34351: GO 34365
34353: LD_INT 3
34355: DOUBLE
34356: EQUAL
34357: IFTRUE 34361
34359: GO 34364
34361: POP
// ; end ;
34362: GO 34365
34364: POP
// for j = 1 to 3 do
34365: LD_ADDR_VAR 0 7
34369: PUSH
34370: DOUBLE
34371: LD_INT 1
34373: DEC
34374: ST_TO_ADDR
34375: LD_INT 3
34377: PUSH
34378: FOR_TO
34379: IFFALSE 34432
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34381: LD_ADDR_VAR 0 5
34385: PUSH
34386: LD_VAR 0 5
34390: PPUSH
34391: LD_VAR 0 7
34395: PPUSH
34396: LD_VAR 0 5
34400: PUSH
34401: LD_VAR 0 7
34405: ARRAY
34406: PUSH
34407: LD_VAR 0 9
34411: PUSH
34412: LD_VAR 0 7
34416: ARRAY
34417: PUSH
34418: LD_VAR 0 10
34422: MUL
34423: PLUS
34424: PPUSH
34425: CALL_OW 1
34429: ST_TO_ADDR
34430: GO 34378
34432: POP
34433: POP
// end ;
34434: GO 32913
34436: POP
34437: POP
// result := Replace ( result , 4 , tmp ) ;
34438: LD_ADDR_VAR 0 5
34442: PUSH
34443: LD_VAR 0 5
34447: PPUSH
34448: LD_INT 4
34450: PPUSH
34451: LD_VAR 0 8
34455: PPUSH
34456: CALL_OW 1
34460: ST_TO_ADDR
// end ;
34461: LD_VAR 0 5
34465: RET
// export function DangerAtRange ( unit , range ) ; begin
34466: LD_INT 0
34468: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34469: LD_ADDR_VAR 0 3
34473: PUSH
34474: LD_VAR 0 1
34478: PPUSH
34479: CALL_OW 255
34483: PPUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 250
34493: PPUSH
34494: LD_VAR 0 1
34498: PPUSH
34499: CALL_OW 251
34503: PPUSH
34504: LD_VAR 0 2
34508: PPUSH
34509: CALL 32765 0 4
34513: ST_TO_ADDR
// end ;
34514: LD_VAR 0 3
34518: RET
// export function DangerInArea ( side , area ) ; begin
34519: LD_INT 0
34521: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: LD_VAR 0 2
34531: PPUSH
34532: LD_INT 81
34534: PUSH
34535: LD_VAR 0 1
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PPUSH
34544: CALL_OW 70
34548: ST_TO_ADDR
// end ;
34549: LD_VAR 0 3
34553: RET
// export function IsExtension ( b ) ; begin
34554: LD_INT 0
34556: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34557: LD_ADDR_VAR 0 2
34561: PUSH
34562: LD_VAR 0 1
34566: PUSH
34567: LD_INT 23
34569: PUSH
34570: LD_INT 20
34572: PUSH
34573: LD_INT 22
34575: PUSH
34576: LD_INT 17
34578: PUSH
34579: LD_INT 24
34581: PUSH
34582: LD_INT 21
34584: PUSH
34585: LD_INT 19
34587: PUSH
34588: LD_INT 16
34590: PUSH
34591: LD_INT 25
34593: PUSH
34594: LD_INT 18
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: IN
34609: ST_TO_ADDR
// end ;
34610: LD_VAR 0 2
34614: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34615: LD_INT 0
34617: PPUSH
34618: PPUSH
34619: PPUSH
// result := [ ] ;
34620: LD_ADDR_VAR 0 4
34624: PUSH
34625: EMPTY
34626: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34627: LD_ADDR_VAR 0 5
34631: PUSH
34632: LD_VAR 0 2
34636: PPUSH
34637: LD_INT 21
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PPUSH
34647: CALL_OW 70
34651: ST_TO_ADDR
// if not tmp then
34652: LD_VAR 0 5
34656: NOT
34657: IFFALSE 34661
// exit ;
34659: GO 34725
// if checkLink then
34661: LD_VAR 0 3
34665: IFFALSE 34715
// begin for i in tmp do
34667: LD_ADDR_VAR 0 6
34671: PUSH
34672: LD_VAR 0 5
34676: PUSH
34677: FOR_IN
34678: IFFALSE 34713
// if GetBase ( i ) <> base then
34680: LD_VAR 0 6
34684: PPUSH
34685: CALL_OW 274
34689: PUSH
34690: LD_VAR 0 1
34694: NONEQUAL
34695: IFFALSE 34711
// ComLinkToBase ( base , i ) ;
34697: LD_VAR 0 1
34701: PPUSH
34702: LD_VAR 0 6
34706: PPUSH
34707: CALL_OW 169
34711: GO 34677
34713: POP
34714: POP
// end ; result := tmp ;
34715: LD_ADDR_VAR 0 4
34719: PUSH
34720: LD_VAR 0 5
34724: ST_TO_ADDR
// end ;
34725: LD_VAR 0 4
34729: RET
// export function ComComplete ( units , b ) ; var i ; begin
34730: LD_INT 0
34732: PPUSH
34733: PPUSH
// if not units then
34734: LD_VAR 0 1
34738: NOT
34739: IFFALSE 34743
// exit ;
34741: GO 34833
// for i in units do
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_VAR 0 1
34752: PUSH
34753: FOR_IN
34754: IFFALSE 34831
// if BuildingStatus ( b ) = bs_build then
34756: LD_VAR 0 2
34760: PPUSH
34761: CALL_OW 461
34765: PUSH
34766: LD_INT 1
34768: EQUAL
34769: IFFALSE 34829
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34771: LD_VAR 0 4
34775: PPUSH
34776: LD_STRING h
34778: PUSH
34779: LD_VAR 0 2
34783: PPUSH
34784: CALL_OW 250
34788: PUSH
34789: LD_VAR 0 2
34793: PPUSH
34794: CALL_OW 251
34798: PUSH
34799: LD_VAR 0 2
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: PPUSH
34825: CALL_OW 446
34829: GO 34753
34831: POP
34832: POP
// end ;
34833: LD_VAR 0 3
34837: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34838: LD_INT 0
34840: PPUSH
34841: PPUSH
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34846: LD_VAR 0 1
34850: NOT
34851: PUSH
34852: LD_VAR 0 1
34856: PPUSH
34857: CALL_OW 263
34861: PUSH
34862: LD_INT 2
34864: NONEQUAL
34865: OR
34866: IFFALSE 34870
// exit ;
34868: GO 35186
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34870: LD_ADDR_VAR 0 6
34874: PUSH
34875: LD_INT 22
34877: PUSH
34878: LD_VAR 0 1
34882: PPUSH
34883: CALL_OW 255
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 2
34894: PUSH
34895: LD_INT 30
34897: PUSH
34898: LD_INT 36
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 34
34907: PUSH
34908: LD_INT 31
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PPUSH
34924: CALL_OW 69
34928: ST_TO_ADDR
// if not tmp then
34929: LD_VAR 0 6
34933: NOT
34934: IFFALSE 34938
// exit ;
34936: GO 35186
// result := [ ] ;
34938: LD_ADDR_VAR 0 2
34942: PUSH
34943: EMPTY
34944: ST_TO_ADDR
// for i in tmp do
34945: LD_ADDR_VAR 0 3
34949: PUSH
34950: LD_VAR 0 6
34954: PUSH
34955: FOR_IN
34956: IFFALSE 35027
// begin t := UnitsInside ( i ) ;
34958: LD_ADDR_VAR 0 4
34962: PUSH
34963: LD_VAR 0 3
34967: PPUSH
34968: CALL_OW 313
34972: ST_TO_ADDR
// if t then
34973: LD_VAR 0 4
34977: IFFALSE 35025
// for j in t do
34979: LD_ADDR_VAR 0 7
34983: PUSH
34984: LD_VAR 0 4
34988: PUSH
34989: FOR_IN
34990: IFFALSE 35023
// result := Replace ( result , result + 1 , j ) ;
34992: LD_ADDR_VAR 0 2
34996: PUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: LD_VAR 0 2
35006: PUSH
35007: LD_INT 1
35009: PLUS
35010: PPUSH
35011: LD_VAR 0 7
35015: PPUSH
35016: CALL_OW 1
35020: ST_TO_ADDR
35021: GO 34989
35023: POP
35024: POP
// end ;
35025: GO 34955
35027: POP
35028: POP
// if not result then
35029: LD_VAR 0 2
35033: NOT
35034: IFFALSE 35038
// exit ;
35036: GO 35186
// mech := result [ 1 ] ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_VAR 0 2
35047: PUSH
35048: LD_INT 1
35050: ARRAY
35051: ST_TO_ADDR
// if result > 1 then
35052: LD_VAR 0 2
35056: PUSH
35057: LD_INT 1
35059: GREATER
35060: IFFALSE 35172
// begin for i = 2 to result do
35062: LD_ADDR_VAR 0 3
35066: PUSH
35067: DOUBLE
35068: LD_INT 2
35070: DEC
35071: ST_TO_ADDR
35072: LD_VAR 0 2
35076: PUSH
35077: FOR_TO
35078: IFFALSE 35170
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35080: LD_ADDR_VAR 0 4
35084: PUSH
35085: LD_VAR 0 2
35089: PUSH
35090: LD_VAR 0 3
35094: ARRAY
35095: PPUSH
35096: LD_INT 3
35098: PPUSH
35099: CALL_OW 259
35103: PUSH
35104: LD_VAR 0 2
35108: PUSH
35109: LD_VAR 0 3
35113: ARRAY
35114: PPUSH
35115: CALL_OW 432
35119: MINUS
35120: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35121: LD_VAR 0 4
35125: PUSH
35126: LD_VAR 0 5
35130: PPUSH
35131: LD_INT 3
35133: PPUSH
35134: CALL_OW 259
35138: PUSH
35139: LD_VAR 0 5
35143: PPUSH
35144: CALL_OW 432
35148: MINUS
35149: GREATEREQUAL
35150: IFFALSE 35168
// mech := result [ i ] ;
35152: LD_ADDR_VAR 0 5
35156: PUSH
35157: LD_VAR 0 2
35161: PUSH
35162: LD_VAR 0 3
35166: ARRAY
35167: ST_TO_ADDR
// end ;
35168: GO 35077
35170: POP
35171: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_VAR 0 5
35181: PPUSH
35182: CALL_OW 135
// end ;
35186: LD_VAR 0 2
35190: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35191: LD_INT 0
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
// result := [ ] ;
35206: LD_ADDR_VAR 0 7
35210: PUSH
35211: EMPTY
35212: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35213: LD_VAR 0 1
35217: PPUSH
35218: CALL_OW 266
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: IN
35233: NOT
35234: IFFALSE 35238
// exit ;
35236: GO 36872
// if name then
35238: LD_VAR 0 3
35242: IFFALSE 35258
// SetBName ( base_dep , name ) ;
35244: LD_VAR 0 1
35248: PPUSH
35249: LD_VAR 0 3
35253: PPUSH
35254: CALL_OW 500
// base := GetBase ( base_dep ) ;
35258: LD_ADDR_VAR 0 15
35262: PUSH
35263: LD_VAR 0 1
35267: PPUSH
35268: CALL_OW 274
35272: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35273: LD_ADDR_VAR 0 16
35277: PUSH
35278: LD_VAR 0 1
35282: PPUSH
35283: CALL_OW 255
35287: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35288: LD_ADDR_VAR 0 17
35292: PUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 248
35302: ST_TO_ADDR
// if sources then
35303: LD_VAR 0 5
35307: IFFALSE 35354
// for i = 1 to 3 do
35309: LD_ADDR_VAR 0 8
35313: PUSH
35314: DOUBLE
35315: LD_INT 1
35317: DEC
35318: ST_TO_ADDR
35319: LD_INT 3
35321: PUSH
35322: FOR_TO
35323: IFFALSE 35352
// AddResourceType ( base , i , sources [ i ] ) ;
35325: LD_VAR 0 15
35329: PPUSH
35330: LD_VAR 0 8
35334: PPUSH
35335: LD_VAR 0 5
35339: PUSH
35340: LD_VAR 0 8
35344: ARRAY
35345: PPUSH
35346: CALL_OW 276
35350: GO 35322
35352: POP
35353: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35354: LD_ADDR_VAR 0 18
35358: PUSH
35359: LD_VAR 0 15
35363: PPUSH
35364: LD_VAR 0 2
35368: PPUSH
35369: LD_INT 1
35371: PPUSH
35372: CALL 34615 0 3
35376: ST_TO_ADDR
// InitHc ;
35377: CALL_OW 19
// InitUc ;
35381: CALL_OW 18
// uc_side := side ;
35385: LD_ADDR_OWVAR 20
35389: PUSH
35390: LD_VAR 0 16
35394: ST_TO_ADDR
// uc_nation := nation ;
35395: LD_ADDR_OWVAR 21
35399: PUSH
35400: LD_VAR 0 17
35404: ST_TO_ADDR
// if buildings then
35405: LD_VAR 0 18
35409: IFFALSE 36731
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35411: LD_ADDR_VAR 0 19
35415: PUSH
35416: LD_VAR 0 18
35420: PPUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 30
35426: PUSH
35427: LD_INT 29
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 30
35436: PUSH
35437: LD_INT 30
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: PPUSH
35449: CALL_OW 72
35453: ST_TO_ADDR
// if tmp then
35454: LD_VAR 0 19
35458: IFFALSE 35506
// for i in tmp do
35460: LD_ADDR_VAR 0 8
35464: PUSH
35465: LD_VAR 0 19
35469: PUSH
35470: FOR_IN
35471: IFFALSE 35504
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35473: LD_VAR 0 8
35477: PPUSH
35478: CALL_OW 250
35482: PPUSH
35483: LD_VAR 0 8
35487: PPUSH
35488: CALL_OW 251
35492: PPUSH
35493: LD_VAR 0 16
35497: PPUSH
35498: CALL_OW 441
35502: GO 35470
35504: POP
35505: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35506: LD_VAR 0 18
35510: PPUSH
35511: LD_INT 2
35513: PUSH
35514: LD_INT 30
35516: PUSH
35517: LD_INT 32
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 30
35526: PUSH
35527: LD_INT 33
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: PPUSH
35539: CALL_OW 72
35543: IFFALSE 35631
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35545: LD_ADDR_VAR 0 8
35549: PUSH
35550: LD_VAR 0 18
35554: PPUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 30
35560: PUSH
35561: LD_INT 32
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 30
35570: PUSH
35571: LD_INT 33
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: PPUSH
35583: CALL_OW 72
35587: PUSH
35588: FOR_IN
35589: IFFALSE 35629
// begin if not GetBWeapon ( i ) then
35591: LD_VAR 0 8
35595: PPUSH
35596: CALL_OW 269
35600: NOT
35601: IFFALSE 35627
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35603: LD_VAR 0 8
35607: PPUSH
35608: LD_VAR 0 8
35612: PPUSH
35613: LD_VAR 0 2
35617: PPUSH
35618: CALL 36877 0 2
35622: PPUSH
35623: CALL_OW 431
// end ;
35627: GO 35588
35629: POP
35630: POP
// end ; for i = 1 to personel do
35631: LD_ADDR_VAR 0 8
35635: PUSH
35636: DOUBLE
35637: LD_INT 1
35639: DEC
35640: ST_TO_ADDR
35641: LD_VAR 0 6
35645: PUSH
35646: FOR_TO
35647: IFFALSE 36711
// begin if i > 4 then
35649: LD_VAR 0 8
35653: PUSH
35654: LD_INT 4
35656: GREATER
35657: IFFALSE 35661
// break ;
35659: GO 36711
// case i of 1 :
35661: LD_VAR 0 8
35665: PUSH
35666: LD_INT 1
35668: DOUBLE
35669: EQUAL
35670: IFTRUE 35674
35672: GO 35754
35674: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35675: LD_ADDR_VAR 0 12
35679: PUSH
35680: LD_VAR 0 18
35684: PPUSH
35685: LD_INT 22
35687: PUSH
35688: LD_VAR 0 16
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 58
35699: PUSH
35700: EMPTY
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: PUSH
35706: LD_INT 30
35708: PUSH
35709: LD_INT 32
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 30
35718: PUSH
35719: LD_INT 4
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 30
35728: PUSH
35729: LD_INT 5
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: PPUSH
35747: CALL_OW 72
35751: ST_TO_ADDR
35752: GO 35976
35754: LD_INT 2
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35762
35760: GO 35824
35762: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35763: LD_ADDR_VAR 0 12
35767: PUSH
35768: LD_VAR 0 18
35772: PPUSH
35773: LD_INT 22
35775: PUSH
35776: LD_VAR 0 16
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 30
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PPUSH
35817: CALL_OW 72
35821: ST_TO_ADDR
35822: GO 35976
35824: LD_INT 3
35826: DOUBLE
35827: EQUAL
35828: IFTRUE 35832
35830: GO 35894
35832: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35833: LD_ADDR_VAR 0 12
35837: PUSH
35838: LD_VAR 0 18
35842: PPUSH
35843: LD_INT 22
35845: PUSH
35846: LD_VAR 0 16
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: LD_INT 30
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 30
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: LIST
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PPUSH
35887: CALL_OW 72
35891: ST_TO_ADDR
35892: GO 35976
35894: LD_INT 4
35896: DOUBLE
35897: EQUAL
35898: IFTRUE 35902
35900: GO 35975
35902: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35903: LD_ADDR_VAR 0 12
35907: PUSH
35908: LD_VAR 0 18
35912: PPUSH
35913: LD_INT 22
35915: PUSH
35916: LD_VAR 0 16
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 2
35927: PUSH
35928: LD_INT 30
35930: PUSH
35931: LD_INT 6
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 30
35940: PUSH
35941: LD_INT 7
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 30
35950: PUSH
35951: LD_INT 8
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PPUSH
35968: CALL_OW 72
35972: ST_TO_ADDR
35973: GO 35976
35975: POP
// if i = 1 then
35976: LD_VAR 0 8
35980: PUSH
35981: LD_INT 1
35983: EQUAL
35984: IFFALSE 36095
// begin tmp := [ ] ;
35986: LD_ADDR_VAR 0 19
35990: PUSH
35991: EMPTY
35992: ST_TO_ADDR
// for j in f do
35993: LD_ADDR_VAR 0 9
35997: PUSH
35998: LD_VAR 0 12
36002: PUSH
36003: FOR_IN
36004: IFFALSE 36077
// if GetBType ( j ) = b_bunker then
36006: LD_VAR 0 9
36010: PPUSH
36011: CALL_OW 266
36015: PUSH
36016: LD_INT 32
36018: EQUAL
36019: IFFALSE 36046
// tmp := Insert ( tmp , 1 , j ) else
36021: LD_ADDR_VAR 0 19
36025: PUSH
36026: LD_VAR 0 19
36030: PPUSH
36031: LD_INT 1
36033: PPUSH
36034: LD_VAR 0 9
36038: PPUSH
36039: CALL_OW 2
36043: ST_TO_ADDR
36044: GO 36075
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36046: LD_ADDR_VAR 0 19
36050: PUSH
36051: LD_VAR 0 19
36055: PPUSH
36056: LD_VAR 0 19
36060: PUSH
36061: LD_INT 1
36063: PLUS
36064: PPUSH
36065: LD_VAR 0 9
36069: PPUSH
36070: CALL_OW 2
36074: ST_TO_ADDR
36075: GO 36003
36077: POP
36078: POP
// if tmp then
36079: LD_VAR 0 19
36083: IFFALSE 36095
// f := tmp ;
36085: LD_ADDR_VAR 0 12
36089: PUSH
36090: LD_VAR 0 19
36094: ST_TO_ADDR
// end ; x := personel [ i ] ;
36095: LD_ADDR_VAR 0 13
36099: PUSH
36100: LD_VAR 0 6
36104: PUSH
36105: LD_VAR 0 8
36109: ARRAY
36110: ST_TO_ADDR
// if x = - 1 then
36111: LD_VAR 0 13
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: EQUAL
36120: IFFALSE 36329
// begin for j in f do
36122: LD_ADDR_VAR 0 9
36126: PUSH
36127: LD_VAR 0 12
36131: PUSH
36132: FOR_IN
36133: IFFALSE 36325
// repeat InitHc ;
36135: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36139: LD_VAR 0 9
36143: PPUSH
36144: CALL_OW 266
36148: PUSH
36149: LD_INT 5
36151: EQUAL
36152: IFFALSE 36222
// begin if UnitsInside ( j ) < 3 then
36154: LD_VAR 0 9
36158: PPUSH
36159: CALL_OW 313
36163: PUSH
36164: LD_INT 3
36166: LESS
36167: IFFALSE 36203
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36169: LD_INT 0
36171: PPUSH
36172: LD_INT 5
36174: PUSH
36175: LD_INT 8
36177: PUSH
36178: LD_INT 9
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: PUSH
36186: LD_VAR 0 17
36190: ARRAY
36191: PPUSH
36192: LD_VAR 0 4
36196: PPUSH
36197: CALL_OW 380
36201: GO 36220
// PrepareHuman ( false , i , skill ) ;
36203: LD_INT 0
36205: PPUSH
36206: LD_VAR 0 8
36210: PPUSH
36211: LD_VAR 0 4
36215: PPUSH
36216: CALL_OW 380
// end else
36220: GO 36239
// PrepareHuman ( false , i , skill ) ;
36222: LD_INT 0
36224: PPUSH
36225: LD_VAR 0 8
36229: PPUSH
36230: LD_VAR 0 4
36234: PPUSH
36235: CALL_OW 380
// un := CreateHuman ;
36239: LD_ADDR_VAR 0 14
36243: PUSH
36244: CALL_OW 44
36248: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36249: LD_ADDR_VAR 0 7
36253: PUSH
36254: LD_VAR 0 7
36258: PPUSH
36259: LD_INT 1
36261: PPUSH
36262: LD_VAR 0 14
36266: PPUSH
36267: CALL_OW 2
36271: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36272: LD_VAR 0 14
36276: PPUSH
36277: LD_VAR 0 9
36281: PPUSH
36282: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36286: LD_VAR 0 9
36290: PPUSH
36291: CALL_OW 313
36295: PUSH
36296: LD_INT 6
36298: EQUAL
36299: PUSH
36300: LD_VAR 0 9
36304: PPUSH
36305: CALL_OW 266
36309: PUSH
36310: LD_INT 32
36312: PUSH
36313: LD_INT 31
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: IN
36320: OR
36321: IFFALSE 36135
36323: GO 36132
36325: POP
36326: POP
// end else
36327: GO 36709
// for j = 1 to x do
36329: LD_ADDR_VAR 0 9
36333: PUSH
36334: DOUBLE
36335: LD_INT 1
36337: DEC
36338: ST_TO_ADDR
36339: LD_VAR 0 13
36343: PUSH
36344: FOR_TO
36345: IFFALSE 36707
// begin InitHc ;
36347: CALL_OW 19
// if not f then
36351: LD_VAR 0 12
36355: NOT
36356: IFFALSE 36445
// begin PrepareHuman ( false , i , skill ) ;
36358: LD_INT 0
36360: PPUSH
36361: LD_VAR 0 8
36365: PPUSH
36366: LD_VAR 0 4
36370: PPUSH
36371: CALL_OW 380
// un := CreateHuman ;
36375: LD_ADDR_VAR 0 14
36379: PUSH
36380: CALL_OW 44
36384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36385: LD_ADDR_VAR 0 7
36389: PUSH
36390: LD_VAR 0 7
36394: PPUSH
36395: LD_INT 1
36397: PPUSH
36398: LD_VAR 0 14
36402: PPUSH
36403: CALL_OW 2
36407: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36408: LD_VAR 0 14
36412: PPUSH
36413: LD_VAR 0 1
36417: PPUSH
36418: CALL_OW 250
36422: PPUSH
36423: LD_VAR 0 1
36427: PPUSH
36428: CALL_OW 251
36432: PPUSH
36433: LD_INT 10
36435: PPUSH
36436: LD_INT 0
36438: PPUSH
36439: CALL_OW 50
// continue ;
36443: GO 36344
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36445: LD_VAR 0 12
36449: PUSH
36450: LD_INT 1
36452: ARRAY
36453: PPUSH
36454: CALL_OW 313
36458: PUSH
36459: LD_VAR 0 12
36463: PUSH
36464: LD_INT 1
36466: ARRAY
36467: PPUSH
36468: CALL_OW 266
36472: PUSH
36473: LD_INT 32
36475: PUSH
36476: LD_INT 31
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: IN
36483: AND
36484: PUSH
36485: LD_VAR 0 12
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: PPUSH
36494: CALL_OW 313
36498: PUSH
36499: LD_INT 6
36501: EQUAL
36502: OR
36503: IFFALSE 36523
// f := Delete ( f , 1 ) ;
36505: LD_ADDR_VAR 0 12
36509: PUSH
36510: LD_VAR 0 12
36514: PPUSH
36515: LD_INT 1
36517: PPUSH
36518: CALL_OW 3
36522: ST_TO_ADDR
// if not f then
36523: LD_VAR 0 12
36527: NOT
36528: IFFALSE 36546
// begin x := x + 2 ;
36530: LD_ADDR_VAR 0 13
36534: PUSH
36535: LD_VAR 0 13
36539: PUSH
36540: LD_INT 2
36542: PLUS
36543: ST_TO_ADDR
// continue ;
36544: GO 36344
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36546: LD_VAR 0 12
36550: PUSH
36551: LD_INT 1
36553: ARRAY
36554: PPUSH
36555: CALL_OW 266
36559: PUSH
36560: LD_INT 5
36562: EQUAL
36563: IFFALSE 36637
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36565: LD_VAR 0 12
36569: PUSH
36570: LD_INT 1
36572: ARRAY
36573: PPUSH
36574: CALL_OW 313
36578: PUSH
36579: LD_INT 3
36581: LESS
36582: IFFALSE 36618
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36584: LD_INT 0
36586: PPUSH
36587: LD_INT 5
36589: PUSH
36590: LD_INT 8
36592: PUSH
36593: LD_INT 9
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: LIST
36600: PUSH
36601: LD_VAR 0 17
36605: ARRAY
36606: PPUSH
36607: LD_VAR 0 4
36611: PPUSH
36612: CALL_OW 380
36616: GO 36635
// PrepareHuman ( false , i , skill ) ;
36618: LD_INT 0
36620: PPUSH
36621: LD_VAR 0 8
36625: PPUSH
36626: LD_VAR 0 4
36630: PPUSH
36631: CALL_OW 380
// end else
36635: GO 36654
// PrepareHuman ( false , i , skill ) ;
36637: LD_INT 0
36639: PPUSH
36640: LD_VAR 0 8
36644: PPUSH
36645: LD_VAR 0 4
36649: PPUSH
36650: CALL_OW 380
// un := CreateHuman ;
36654: LD_ADDR_VAR 0 14
36658: PUSH
36659: CALL_OW 44
36663: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36664: LD_ADDR_VAR 0 7
36668: PUSH
36669: LD_VAR 0 7
36673: PPUSH
36674: LD_INT 1
36676: PPUSH
36677: LD_VAR 0 14
36681: PPUSH
36682: CALL_OW 2
36686: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36687: LD_VAR 0 14
36691: PPUSH
36692: LD_VAR 0 12
36696: PUSH
36697: LD_INT 1
36699: ARRAY
36700: PPUSH
36701: CALL_OW 52
// end ;
36705: GO 36344
36707: POP
36708: POP
// end ;
36709: GO 35646
36711: POP
36712: POP
// result := result ^ buildings ;
36713: LD_ADDR_VAR 0 7
36717: PUSH
36718: LD_VAR 0 7
36722: PUSH
36723: LD_VAR 0 18
36727: ADD
36728: ST_TO_ADDR
// end else
36729: GO 36872
// begin for i = 1 to personel do
36731: LD_ADDR_VAR 0 8
36735: PUSH
36736: DOUBLE
36737: LD_INT 1
36739: DEC
36740: ST_TO_ADDR
36741: LD_VAR 0 6
36745: PUSH
36746: FOR_TO
36747: IFFALSE 36870
// begin if i > 4 then
36749: LD_VAR 0 8
36753: PUSH
36754: LD_INT 4
36756: GREATER
36757: IFFALSE 36761
// break ;
36759: GO 36870
// x := personel [ i ] ;
36761: LD_ADDR_VAR 0 13
36765: PUSH
36766: LD_VAR 0 6
36770: PUSH
36771: LD_VAR 0 8
36775: ARRAY
36776: ST_TO_ADDR
// if x = - 1 then
36777: LD_VAR 0 13
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: EQUAL
36786: IFFALSE 36790
// continue ;
36788: GO 36746
// PrepareHuman ( false , i , skill ) ;
36790: LD_INT 0
36792: PPUSH
36793: LD_VAR 0 8
36797: PPUSH
36798: LD_VAR 0 4
36802: PPUSH
36803: CALL_OW 380
// un := CreateHuman ;
36807: LD_ADDR_VAR 0 14
36811: PUSH
36812: CALL_OW 44
36816: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36817: LD_VAR 0 14
36821: PPUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 250
36831: PPUSH
36832: LD_VAR 0 1
36836: PPUSH
36837: CALL_OW 251
36841: PPUSH
36842: LD_INT 10
36844: PPUSH
36845: LD_INT 0
36847: PPUSH
36848: CALL_OW 50
// result := result ^ un ;
36852: LD_ADDR_VAR 0 7
36856: PUSH
36857: LD_VAR 0 7
36861: PUSH
36862: LD_VAR 0 14
36866: ADD
36867: ST_TO_ADDR
// end ;
36868: GO 36746
36870: POP
36871: POP
// end ; end ;
36872: LD_VAR 0 7
36876: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36877: LD_INT 0
36879: PPUSH
36880: PPUSH
36881: PPUSH
36882: PPUSH
36883: PPUSH
36884: PPUSH
36885: PPUSH
36886: PPUSH
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
36894: PPUSH
// result := false ;
36895: LD_ADDR_VAR 0 3
36899: PUSH
36900: LD_INT 0
36902: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36903: LD_VAR 0 1
36907: NOT
36908: PUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 266
36918: PUSH
36919: LD_INT 32
36921: PUSH
36922: LD_INT 33
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: IN
36929: NOT
36930: OR
36931: IFFALSE 36935
// exit ;
36933: GO 38044
// nat := GetNation ( tower ) ;
36935: LD_ADDR_VAR 0 12
36939: PUSH
36940: LD_VAR 0 1
36944: PPUSH
36945: CALL_OW 248
36949: ST_TO_ADDR
// side := GetSide ( tower ) ;
36950: LD_ADDR_VAR 0 16
36954: PUSH
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 255
36964: ST_TO_ADDR
// x := GetX ( tower ) ;
36965: LD_ADDR_VAR 0 10
36969: PUSH
36970: LD_VAR 0 1
36974: PPUSH
36975: CALL_OW 250
36979: ST_TO_ADDR
// y := GetY ( tower ) ;
36980: LD_ADDR_VAR 0 11
36984: PUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL_OW 251
36994: ST_TO_ADDR
// if not x or not y then
36995: LD_VAR 0 10
36999: NOT
37000: PUSH
37001: LD_VAR 0 11
37005: NOT
37006: OR
37007: IFFALSE 37011
// exit ;
37009: GO 38044
// weapon := 0 ;
37011: LD_ADDR_VAR 0 18
37015: PUSH
37016: LD_INT 0
37018: ST_TO_ADDR
// fac_list := [ ] ;
37019: LD_ADDR_VAR 0 17
37023: PUSH
37024: EMPTY
37025: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37026: LD_ADDR_VAR 0 6
37030: PUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL_OW 274
37040: PPUSH
37041: LD_VAR 0 2
37045: PPUSH
37046: LD_INT 0
37048: PPUSH
37049: CALL 34615 0 3
37053: PPUSH
37054: LD_INT 30
37056: PUSH
37057: LD_INT 3
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PPUSH
37064: CALL_OW 72
37068: ST_TO_ADDR
// if not factories then
37069: LD_VAR 0 6
37073: NOT
37074: IFFALSE 37078
// exit ;
37076: GO 38044
// for i in factories do
37078: LD_ADDR_VAR 0 8
37082: PUSH
37083: LD_VAR 0 6
37087: PUSH
37088: FOR_IN
37089: IFFALSE 37114
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37091: LD_ADDR_VAR 0 17
37095: PUSH
37096: LD_VAR 0 17
37100: PUSH
37101: LD_VAR 0 8
37105: PPUSH
37106: CALL_OW 478
37110: UNION
37111: ST_TO_ADDR
37112: GO 37088
37114: POP
37115: POP
// if not fac_list then
37116: LD_VAR 0 17
37120: NOT
37121: IFFALSE 37125
// exit ;
37123: GO 38044
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37125: LD_ADDR_VAR 0 5
37129: PUSH
37130: LD_INT 4
37132: PUSH
37133: LD_INT 5
37135: PUSH
37136: LD_INT 9
37138: PUSH
37139: LD_INT 10
37141: PUSH
37142: LD_INT 6
37144: PUSH
37145: LD_INT 7
37147: PUSH
37148: LD_INT 11
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 27
37162: PUSH
37163: LD_INT 28
37165: PUSH
37166: LD_INT 26
37168: PUSH
37169: LD_INT 30
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 43
37180: PUSH
37181: LD_INT 44
37183: PUSH
37184: LD_INT 46
37186: PUSH
37187: LD_INT 45
37189: PUSH
37190: LD_INT 47
37192: PUSH
37193: LD_INT 49
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: PUSH
37209: LD_VAR 0 12
37213: ARRAY
37214: ST_TO_ADDR
// list := list isect fac_list ;
37215: LD_ADDR_VAR 0 5
37219: PUSH
37220: LD_VAR 0 5
37224: PUSH
37225: LD_VAR 0 17
37229: ISECT
37230: ST_TO_ADDR
// if not list then
37231: LD_VAR 0 5
37235: NOT
37236: IFFALSE 37240
// exit ;
37238: GO 38044
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37240: LD_VAR 0 12
37244: PUSH
37245: LD_INT 3
37247: EQUAL
37248: PUSH
37249: LD_INT 49
37251: PUSH
37252: LD_VAR 0 5
37256: IN
37257: AND
37258: PUSH
37259: LD_INT 31
37261: PPUSH
37262: LD_VAR 0 16
37266: PPUSH
37267: CALL_OW 321
37271: PUSH
37272: LD_INT 2
37274: EQUAL
37275: AND
37276: IFFALSE 37336
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37278: LD_INT 22
37280: PUSH
37281: LD_VAR 0 16
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 35
37292: PUSH
37293: LD_INT 49
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 91
37302: PUSH
37303: LD_VAR 0 1
37307: PUSH
37308: LD_INT 10
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: PPUSH
37321: CALL_OW 69
37325: NOT
37326: IFFALSE 37336
// weapon := ru_time_lapser ;
37328: LD_ADDR_VAR 0 18
37332: PUSH
37333: LD_INT 49
37335: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37336: LD_VAR 0 12
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: IN
37351: PUSH
37352: LD_INT 11
37354: PUSH
37355: LD_VAR 0 5
37359: IN
37360: PUSH
37361: LD_INT 30
37363: PUSH
37364: LD_VAR 0 5
37368: IN
37369: OR
37370: AND
37371: PUSH
37372: LD_INT 6
37374: PPUSH
37375: LD_VAR 0 16
37379: PPUSH
37380: CALL_OW 321
37384: PUSH
37385: LD_INT 2
37387: EQUAL
37388: AND
37389: IFFALSE 37554
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37391: LD_INT 22
37393: PUSH
37394: LD_VAR 0 16
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 2
37405: PUSH
37406: LD_INT 35
37408: PUSH
37409: LD_INT 11
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 35
37418: PUSH
37419: LD_INT 30
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 91
37433: PUSH
37434: LD_VAR 0 1
37438: PUSH
37439: LD_INT 18
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: LIST
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: LIST
37451: PPUSH
37452: CALL_OW 69
37456: NOT
37457: PUSH
37458: LD_INT 22
37460: PUSH
37461: LD_VAR 0 16
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 30
37475: PUSH
37476: LD_INT 32
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: LD_INT 30
37485: PUSH
37486: LD_INT 33
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 91
37500: PUSH
37501: LD_VAR 0 1
37505: PUSH
37506: LD_INT 12
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: LIST
37513: PUSH
37514: EMPTY
37515: LIST
37516: LIST
37517: LIST
37518: PUSH
37519: EMPTY
37520: LIST
37521: PPUSH
37522: CALL_OW 69
37526: PUSH
37527: LD_INT 2
37529: GREATER
37530: AND
37531: IFFALSE 37554
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37533: LD_ADDR_VAR 0 18
37537: PUSH
37538: LD_INT 11
37540: PUSH
37541: LD_INT 30
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_VAR 0 12
37552: ARRAY
37553: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37554: LD_VAR 0 18
37558: NOT
37559: PUSH
37560: LD_INT 40
37562: PPUSH
37563: LD_VAR 0 16
37567: PPUSH
37568: CALL_OW 321
37572: PUSH
37573: LD_INT 2
37575: EQUAL
37576: AND
37577: PUSH
37578: LD_INT 7
37580: PUSH
37581: LD_VAR 0 5
37585: IN
37586: PUSH
37587: LD_INT 28
37589: PUSH
37590: LD_VAR 0 5
37594: IN
37595: OR
37596: PUSH
37597: LD_INT 45
37599: PUSH
37600: LD_VAR 0 5
37604: IN
37605: OR
37606: AND
37607: IFFALSE 37861
// begin hex := GetHexInfo ( x , y ) ;
37609: LD_ADDR_VAR 0 4
37613: PUSH
37614: LD_VAR 0 10
37618: PPUSH
37619: LD_VAR 0 11
37623: PPUSH
37624: CALL_OW 546
37628: ST_TO_ADDR
// if hex [ 1 ] then
37629: LD_VAR 0 4
37633: PUSH
37634: LD_INT 1
37636: ARRAY
37637: IFFALSE 37641
// exit ;
37639: GO 38044
// height := hex [ 2 ] ;
37641: LD_ADDR_VAR 0 15
37645: PUSH
37646: LD_VAR 0 4
37650: PUSH
37651: LD_INT 2
37653: ARRAY
37654: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37655: LD_ADDR_VAR 0 14
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 2
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: LD_INT 5
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: ST_TO_ADDR
// for i in tmp do
37678: LD_ADDR_VAR 0 8
37682: PUSH
37683: LD_VAR 0 14
37687: PUSH
37688: FOR_IN
37689: IFFALSE 37859
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37691: LD_ADDR_VAR 0 9
37695: PUSH
37696: LD_VAR 0 10
37700: PPUSH
37701: LD_VAR 0 8
37705: PPUSH
37706: LD_INT 5
37708: PPUSH
37709: CALL_OW 272
37713: PUSH
37714: LD_VAR 0 11
37718: PPUSH
37719: LD_VAR 0 8
37723: PPUSH
37724: LD_INT 5
37726: PPUSH
37727: CALL_OW 273
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37736: LD_VAR 0 9
37740: PUSH
37741: LD_INT 1
37743: ARRAY
37744: PPUSH
37745: LD_VAR 0 9
37749: PUSH
37750: LD_INT 2
37752: ARRAY
37753: PPUSH
37754: CALL_OW 488
37758: IFFALSE 37857
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37760: LD_ADDR_VAR 0 4
37764: PUSH
37765: LD_VAR 0 9
37769: PUSH
37770: LD_INT 1
37772: ARRAY
37773: PPUSH
37774: LD_VAR 0 9
37778: PUSH
37779: LD_INT 2
37781: ARRAY
37782: PPUSH
37783: CALL_OW 546
37787: ST_TO_ADDR
// if hex [ 1 ] then
37788: LD_VAR 0 4
37792: PUSH
37793: LD_INT 1
37795: ARRAY
37796: IFFALSE 37800
// continue ;
37798: GO 37688
// h := hex [ 2 ] ;
37800: LD_ADDR_VAR 0 13
37804: PUSH
37805: LD_VAR 0 4
37809: PUSH
37810: LD_INT 2
37812: ARRAY
37813: ST_TO_ADDR
// if h + 7 < height then
37814: LD_VAR 0 13
37818: PUSH
37819: LD_INT 7
37821: PLUS
37822: PUSH
37823: LD_VAR 0 15
37827: LESS
37828: IFFALSE 37857
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37830: LD_ADDR_VAR 0 18
37834: PUSH
37835: LD_INT 7
37837: PUSH
37838: LD_INT 28
37840: PUSH
37841: LD_INT 45
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: PUSH
37849: LD_VAR 0 12
37853: ARRAY
37854: ST_TO_ADDR
// break ;
37855: GO 37859
// end ; end ; end ;
37857: GO 37688
37859: POP
37860: POP
// end ; if not weapon then
37861: LD_VAR 0 18
37865: NOT
37866: IFFALSE 37926
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37868: LD_ADDR_VAR 0 5
37872: PUSH
37873: LD_VAR 0 5
37877: PUSH
37878: LD_INT 11
37880: PUSH
37881: LD_INT 30
37883: PUSH
37884: LD_INT 49
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: LIST
37891: DIFF
37892: ST_TO_ADDR
// if not list then
37893: LD_VAR 0 5
37897: NOT
37898: IFFALSE 37902
// exit ;
37900: GO 38044
// weapon := list [ rand ( 1 , list ) ] ;
37902: LD_ADDR_VAR 0 18
37906: PUSH
37907: LD_VAR 0 5
37911: PUSH
37912: LD_INT 1
37914: PPUSH
37915: LD_VAR 0 5
37919: PPUSH
37920: CALL_OW 12
37924: ARRAY
37925: ST_TO_ADDR
// end ; if weapon then
37926: LD_VAR 0 18
37930: IFFALSE 38044
// begin tmp := CostOfWeapon ( weapon ) ;
37932: LD_ADDR_VAR 0 14
37936: PUSH
37937: LD_VAR 0 18
37941: PPUSH
37942: CALL_OW 451
37946: ST_TO_ADDR
// j := GetBase ( tower ) ;
37947: LD_ADDR_VAR 0 9
37951: PUSH
37952: LD_VAR 0 1
37956: PPUSH
37957: CALL_OW 274
37961: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37962: LD_VAR 0 9
37966: PPUSH
37967: LD_INT 1
37969: PPUSH
37970: CALL_OW 275
37974: PUSH
37975: LD_VAR 0 14
37979: PUSH
37980: LD_INT 1
37982: ARRAY
37983: GREATEREQUAL
37984: PUSH
37985: LD_VAR 0 9
37989: PPUSH
37990: LD_INT 2
37992: PPUSH
37993: CALL_OW 275
37997: PUSH
37998: LD_VAR 0 14
38002: PUSH
38003: LD_INT 2
38005: ARRAY
38006: GREATEREQUAL
38007: AND
38008: PUSH
38009: LD_VAR 0 9
38013: PPUSH
38014: LD_INT 3
38016: PPUSH
38017: CALL_OW 275
38021: PUSH
38022: LD_VAR 0 14
38026: PUSH
38027: LD_INT 3
38029: ARRAY
38030: GREATEREQUAL
38031: AND
38032: IFFALSE 38044
// result := weapon ;
38034: LD_ADDR_VAR 0 3
38038: PUSH
38039: LD_VAR 0 18
38043: ST_TO_ADDR
// end ; end ;
38044: LD_VAR 0 3
38048: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38049: LD_INT 0
38051: PPUSH
38052: PPUSH
// result := true ;
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: LD_INT 1
38060: ST_TO_ADDR
// if array1 = array2 then
38061: LD_VAR 0 1
38065: PUSH
38066: LD_VAR 0 2
38070: EQUAL
38071: IFFALSE 38131
// begin for i = 1 to array1 do
38073: LD_ADDR_VAR 0 4
38077: PUSH
38078: DOUBLE
38079: LD_INT 1
38081: DEC
38082: ST_TO_ADDR
38083: LD_VAR 0 1
38087: PUSH
38088: FOR_TO
38089: IFFALSE 38127
// if array1 [ i ] <> array2 [ i ] then
38091: LD_VAR 0 1
38095: PUSH
38096: LD_VAR 0 4
38100: ARRAY
38101: PUSH
38102: LD_VAR 0 2
38106: PUSH
38107: LD_VAR 0 4
38111: ARRAY
38112: NONEQUAL
38113: IFFALSE 38125
// begin result := false ;
38115: LD_ADDR_VAR 0 3
38119: PUSH
38120: LD_INT 0
38122: ST_TO_ADDR
// break ;
38123: GO 38127
// end ;
38125: GO 38088
38127: POP
38128: POP
// end else
38129: GO 38139
// result := false ;
38131: LD_ADDR_VAR 0 3
38135: PUSH
38136: LD_INT 0
38138: ST_TO_ADDR
// end ;
38139: LD_VAR 0 3
38143: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38144: LD_INT 0
38146: PPUSH
38147: PPUSH
// if not array1 or not array2 then
38148: LD_VAR 0 1
38152: NOT
38153: PUSH
38154: LD_VAR 0 2
38158: NOT
38159: OR
38160: IFFALSE 38164
// exit ;
38162: GO 38228
// result := true ;
38164: LD_ADDR_VAR 0 3
38168: PUSH
38169: LD_INT 1
38171: ST_TO_ADDR
// for i = 1 to array1 do
38172: LD_ADDR_VAR 0 4
38176: PUSH
38177: DOUBLE
38178: LD_INT 1
38180: DEC
38181: ST_TO_ADDR
38182: LD_VAR 0 1
38186: PUSH
38187: FOR_TO
38188: IFFALSE 38226
// if array1 [ i ] <> array2 [ i ] then
38190: LD_VAR 0 1
38194: PUSH
38195: LD_VAR 0 4
38199: ARRAY
38200: PUSH
38201: LD_VAR 0 2
38205: PUSH
38206: LD_VAR 0 4
38210: ARRAY
38211: NONEQUAL
38212: IFFALSE 38224
// begin result := false ;
38214: LD_ADDR_VAR 0 3
38218: PUSH
38219: LD_INT 0
38221: ST_TO_ADDR
// break ;
38222: GO 38226
// end ;
38224: GO 38187
38226: POP
38227: POP
// end ;
38228: LD_VAR 0 3
38232: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38233: LD_INT 0
38235: PPUSH
38236: PPUSH
38237: PPUSH
// pom := GetBase ( fac ) ;
38238: LD_ADDR_VAR 0 5
38242: PUSH
38243: LD_VAR 0 1
38247: PPUSH
38248: CALL_OW 274
38252: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38253: LD_ADDR_VAR 0 4
38257: PUSH
38258: LD_VAR 0 2
38262: PUSH
38263: LD_INT 1
38265: ARRAY
38266: PPUSH
38267: LD_VAR 0 2
38271: PUSH
38272: LD_INT 2
38274: ARRAY
38275: PPUSH
38276: LD_VAR 0 2
38280: PUSH
38281: LD_INT 3
38283: ARRAY
38284: PPUSH
38285: LD_VAR 0 2
38289: PUSH
38290: LD_INT 4
38292: ARRAY
38293: PPUSH
38294: CALL_OW 449
38298: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38299: LD_ADDR_VAR 0 3
38303: PUSH
38304: LD_VAR 0 5
38308: PPUSH
38309: LD_INT 1
38311: PPUSH
38312: CALL_OW 275
38316: PUSH
38317: LD_VAR 0 4
38321: PUSH
38322: LD_INT 1
38324: ARRAY
38325: GREATEREQUAL
38326: PUSH
38327: LD_VAR 0 5
38331: PPUSH
38332: LD_INT 2
38334: PPUSH
38335: CALL_OW 275
38339: PUSH
38340: LD_VAR 0 4
38344: PUSH
38345: LD_INT 2
38347: ARRAY
38348: GREATEREQUAL
38349: AND
38350: PUSH
38351: LD_VAR 0 5
38355: PPUSH
38356: LD_INT 3
38358: PPUSH
38359: CALL_OW 275
38363: PUSH
38364: LD_VAR 0 4
38368: PUSH
38369: LD_INT 3
38371: ARRAY
38372: GREATEREQUAL
38373: AND
38374: ST_TO_ADDR
// end ;
38375: LD_VAR 0 3
38379: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38380: LD_INT 0
38382: PPUSH
38383: PPUSH
38384: PPUSH
38385: PPUSH
// pom := GetBase ( building ) ;
38386: LD_ADDR_VAR 0 3
38390: PUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 274
38400: ST_TO_ADDR
// if not pom then
38401: LD_VAR 0 3
38405: NOT
38406: IFFALSE 38410
// exit ;
38408: GO 38580
// btype := GetBType ( building ) ;
38410: LD_ADDR_VAR 0 5
38414: PUSH
38415: LD_VAR 0 1
38419: PPUSH
38420: CALL_OW 266
38424: ST_TO_ADDR
// if btype = b_armoury then
38425: LD_VAR 0 5
38429: PUSH
38430: LD_INT 4
38432: EQUAL
38433: IFFALSE 38443
// btype := b_barracks ;
38435: LD_ADDR_VAR 0 5
38439: PUSH
38440: LD_INT 5
38442: ST_TO_ADDR
// if btype = b_depot then
38443: LD_VAR 0 5
38447: PUSH
38448: LD_INT 0
38450: EQUAL
38451: IFFALSE 38461
// btype := b_warehouse ;
38453: LD_ADDR_VAR 0 5
38457: PUSH
38458: LD_INT 1
38460: ST_TO_ADDR
// if btype = b_workshop then
38461: LD_VAR 0 5
38465: PUSH
38466: LD_INT 2
38468: EQUAL
38469: IFFALSE 38479
// btype := b_factory ;
38471: LD_ADDR_VAR 0 5
38475: PUSH
38476: LD_INT 3
38478: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38479: LD_ADDR_VAR 0 4
38483: PUSH
38484: LD_VAR 0 5
38488: PPUSH
38489: LD_VAR 0 1
38493: PPUSH
38494: CALL_OW 248
38498: PPUSH
38499: CALL_OW 450
38503: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38504: LD_ADDR_VAR 0 2
38508: PUSH
38509: LD_VAR 0 3
38513: PPUSH
38514: LD_INT 1
38516: PPUSH
38517: CALL_OW 275
38521: PUSH
38522: LD_VAR 0 4
38526: PUSH
38527: LD_INT 1
38529: ARRAY
38530: GREATEREQUAL
38531: PUSH
38532: LD_VAR 0 3
38536: PPUSH
38537: LD_INT 2
38539: PPUSH
38540: CALL_OW 275
38544: PUSH
38545: LD_VAR 0 4
38549: PUSH
38550: LD_INT 2
38552: ARRAY
38553: GREATEREQUAL
38554: AND
38555: PUSH
38556: LD_VAR 0 3
38560: PPUSH
38561: LD_INT 3
38563: PPUSH
38564: CALL_OW 275
38568: PUSH
38569: LD_VAR 0 4
38573: PUSH
38574: LD_INT 3
38576: ARRAY
38577: GREATEREQUAL
38578: AND
38579: ST_TO_ADDR
// end ;
38580: LD_VAR 0 2
38584: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38585: LD_INT 0
38587: PPUSH
38588: PPUSH
38589: PPUSH
// pom := GetBase ( building ) ;
38590: LD_ADDR_VAR 0 4
38594: PUSH
38595: LD_VAR 0 1
38599: PPUSH
38600: CALL_OW 274
38604: ST_TO_ADDR
// if not pom then
38605: LD_VAR 0 4
38609: NOT
38610: IFFALSE 38614
// exit ;
38612: GO 38715
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38614: LD_ADDR_VAR 0 5
38618: PUSH
38619: LD_VAR 0 2
38623: PPUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 248
38633: PPUSH
38634: CALL_OW 450
38638: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38639: LD_ADDR_VAR 0 3
38643: PUSH
38644: LD_VAR 0 4
38648: PPUSH
38649: LD_INT 1
38651: PPUSH
38652: CALL_OW 275
38656: PUSH
38657: LD_VAR 0 5
38661: PUSH
38662: LD_INT 1
38664: ARRAY
38665: GREATEREQUAL
38666: PUSH
38667: LD_VAR 0 4
38671: PPUSH
38672: LD_INT 2
38674: PPUSH
38675: CALL_OW 275
38679: PUSH
38680: LD_VAR 0 5
38684: PUSH
38685: LD_INT 2
38687: ARRAY
38688: GREATEREQUAL
38689: AND
38690: PUSH
38691: LD_VAR 0 4
38695: PPUSH
38696: LD_INT 3
38698: PPUSH
38699: CALL_OW 275
38703: PUSH
38704: LD_VAR 0 5
38708: PUSH
38709: LD_INT 3
38711: ARRAY
38712: GREATEREQUAL
38713: AND
38714: ST_TO_ADDR
// end ;
38715: LD_VAR 0 3
38719: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38720: LD_INT 0
38722: PPUSH
38723: PPUSH
38724: PPUSH
38725: PPUSH
38726: PPUSH
38727: PPUSH
38728: PPUSH
38729: PPUSH
38730: PPUSH
38731: PPUSH
38732: PPUSH
// result := false ;
38733: LD_ADDR_VAR 0 8
38737: PUSH
38738: LD_INT 0
38740: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38741: LD_VAR 0 5
38745: NOT
38746: PUSH
38747: LD_VAR 0 1
38751: NOT
38752: OR
38753: PUSH
38754: LD_VAR 0 2
38758: NOT
38759: OR
38760: PUSH
38761: LD_VAR 0 3
38765: NOT
38766: OR
38767: IFFALSE 38771
// exit ;
38769: GO 39585
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38771: LD_ADDR_VAR 0 14
38775: PUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: LD_VAR 0 2
38785: PPUSH
38786: LD_VAR 0 3
38790: PPUSH
38791: LD_VAR 0 4
38795: PPUSH
38796: LD_VAR 0 5
38800: PUSH
38801: LD_INT 1
38803: ARRAY
38804: PPUSH
38805: CALL_OW 248
38809: PPUSH
38810: LD_INT 0
38812: PPUSH
38813: CALL 40818 0 6
38817: ST_TO_ADDR
// if not hexes then
38818: LD_VAR 0 14
38822: NOT
38823: IFFALSE 38827
// exit ;
38825: GO 39585
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38827: LD_ADDR_VAR 0 17
38831: PUSH
38832: LD_VAR 0 5
38836: PPUSH
38837: LD_INT 22
38839: PUSH
38840: LD_VAR 0 13
38844: PPUSH
38845: CALL_OW 255
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: LD_INT 30
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 30
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PPUSH
38886: CALL_OW 72
38890: ST_TO_ADDR
// for i = 1 to hexes do
38891: LD_ADDR_VAR 0 9
38895: PUSH
38896: DOUBLE
38897: LD_INT 1
38899: DEC
38900: ST_TO_ADDR
38901: LD_VAR 0 14
38905: PUSH
38906: FOR_TO
38907: IFFALSE 39583
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38909: LD_ADDR_VAR 0 13
38913: PUSH
38914: LD_VAR 0 14
38918: PUSH
38919: LD_VAR 0 9
38923: ARRAY
38924: PUSH
38925: LD_INT 1
38927: ARRAY
38928: PPUSH
38929: LD_VAR 0 14
38933: PUSH
38934: LD_VAR 0 9
38938: ARRAY
38939: PUSH
38940: LD_INT 2
38942: ARRAY
38943: PPUSH
38944: CALL_OW 428
38948: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38949: LD_VAR 0 14
38953: PUSH
38954: LD_VAR 0 9
38958: ARRAY
38959: PUSH
38960: LD_INT 1
38962: ARRAY
38963: PPUSH
38964: LD_VAR 0 14
38968: PUSH
38969: LD_VAR 0 9
38973: ARRAY
38974: PUSH
38975: LD_INT 2
38977: ARRAY
38978: PPUSH
38979: CALL_OW 351
38983: PUSH
38984: LD_VAR 0 14
38988: PUSH
38989: LD_VAR 0 9
38993: ARRAY
38994: PUSH
38995: LD_INT 1
38997: ARRAY
38998: PPUSH
38999: LD_VAR 0 14
39003: PUSH
39004: LD_VAR 0 9
39008: ARRAY
39009: PUSH
39010: LD_INT 2
39012: ARRAY
39013: PPUSH
39014: CALL_OW 488
39018: NOT
39019: OR
39020: PUSH
39021: LD_VAR 0 13
39025: PPUSH
39026: CALL_OW 247
39030: PUSH
39031: LD_INT 3
39033: EQUAL
39034: OR
39035: IFFALSE 39041
// exit ;
39037: POP
39038: POP
39039: GO 39585
// if not tmp then
39041: LD_VAR 0 13
39045: NOT
39046: IFFALSE 39050
// continue ;
39048: GO 38906
// result := true ;
39050: LD_ADDR_VAR 0 8
39054: PUSH
39055: LD_INT 1
39057: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39058: LD_VAR 0 6
39062: PUSH
39063: LD_VAR 0 13
39067: PPUSH
39068: CALL_OW 247
39072: PUSH
39073: LD_INT 2
39075: EQUAL
39076: AND
39077: PUSH
39078: LD_VAR 0 13
39082: PPUSH
39083: CALL_OW 263
39087: PUSH
39088: LD_INT 1
39090: EQUAL
39091: AND
39092: IFFALSE 39256
// begin if IsDrivenBy ( tmp ) then
39094: LD_VAR 0 13
39098: PPUSH
39099: CALL_OW 311
39103: IFFALSE 39107
// continue ;
39105: GO 38906
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39107: LD_VAR 0 6
39111: PPUSH
39112: LD_INT 3
39114: PUSH
39115: LD_INT 60
39117: PUSH
39118: EMPTY
39119: LIST
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 3
39127: PUSH
39128: LD_INT 55
39130: PUSH
39131: EMPTY
39132: LIST
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PPUSH
39142: CALL_OW 72
39146: IFFALSE 39254
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39148: LD_ADDR_VAR 0 18
39152: PUSH
39153: LD_VAR 0 6
39157: PPUSH
39158: LD_INT 3
39160: PUSH
39161: LD_INT 60
39163: PUSH
39164: EMPTY
39165: LIST
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 3
39173: PUSH
39174: LD_INT 55
39176: PUSH
39177: EMPTY
39178: LIST
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PPUSH
39188: CALL_OW 72
39192: PUSH
39193: LD_INT 1
39195: ARRAY
39196: ST_TO_ADDR
// if IsInUnit ( driver ) then
39197: LD_VAR 0 18
39201: PPUSH
39202: CALL_OW 310
39206: IFFALSE 39217
// ComExit ( driver ) ;
39208: LD_VAR 0 18
39212: PPUSH
39213: CALL 64579 0 1
// AddComEnterUnit ( driver , tmp ) ;
39217: LD_VAR 0 18
39221: PPUSH
39222: LD_VAR 0 13
39226: PPUSH
39227: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39231: LD_VAR 0 18
39235: PPUSH
39236: LD_VAR 0 7
39240: PPUSH
39241: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39245: LD_VAR 0 18
39249: PPUSH
39250: CALL_OW 181
// end ; continue ;
39254: GO 38906
// end ; if not cleaners or not tmp in cleaners then
39256: LD_VAR 0 6
39260: NOT
39261: PUSH
39262: LD_VAR 0 13
39266: PUSH
39267: LD_VAR 0 6
39271: IN
39272: NOT
39273: OR
39274: IFFALSE 39581
// begin if dep then
39276: LD_VAR 0 17
39280: IFFALSE 39416
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39282: LD_ADDR_VAR 0 16
39286: PUSH
39287: LD_VAR 0 17
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PPUSH
39296: CALL_OW 250
39300: PPUSH
39301: LD_VAR 0 17
39305: PUSH
39306: LD_INT 1
39308: ARRAY
39309: PPUSH
39310: CALL_OW 254
39314: PPUSH
39315: LD_INT 5
39317: PPUSH
39318: CALL_OW 272
39322: PUSH
39323: LD_VAR 0 17
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: PPUSH
39332: CALL_OW 251
39336: PPUSH
39337: LD_VAR 0 17
39341: PUSH
39342: LD_INT 1
39344: ARRAY
39345: PPUSH
39346: CALL_OW 254
39350: PPUSH
39351: LD_INT 5
39353: PPUSH
39354: CALL_OW 273
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39363: LD_VAR 0 16
39367: PUSH
39368: LD_INT 1
39370: ARRAY
39371: PPUSH
39372: LD_VAR 0 16
39376: PUSH
39377: LD_INT 2
39379: ARRAY
39380: PPUSH
39381: CALL_OW 488
39385: IFFALSE 39416
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39387: LD_VAR 0 13
39391: PPUSH
39392: LD_VAR 0 16
39396: PUSH
39397: LD_INT 1
39399: ARRAY
39400: PPUSH
39401: LD_VAR 0 16
39405: PUSH
39406: LD_INT 2
39408: ARRAY
39409: PPUSH
39410: CALL_OW 111
// continue ;
39414: GO 38906
// end ; end ; r := GetDir ( tmp ) ;
39416: LD_ADDR_VAR 0 15
39420: PUSH
39421: LD_VAR 0 13
39425: PPUSH
39426: CALL_OW 254
39430: ST_TO_ADDR
// if r = 5 then
39431: LD_VAR 0 15
39435: PUSH
39436: LD_INT 5
39438: EQUAL
39439: IFFALSE 39449
// r := 0 ;
39441: LD_ADDR_VAR 0 15
39445: PUSH
39446: LD_INT 0
39448: ST_TO_ADDR
// for j = r to 5 do
39449: LD_ADDR_VAR 0 10
39453: PUSH
39454: DOUBLE
39455: LD_VAR 0 15
39459: DEC
39460: ST_TO_ADDR
39461: LD_INT 5
39463: PUSH
39464: FOR_TO
39465: IFFALSE 39579
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39467: LD_ADDR_VAR 0 11
39471: PUSH
39472: LD_VAR 0 13
39476: PPUSH
39477: CALL_OW 250
39481: PPUSH
39482: LD_VAR 0 10
39486: PPUSH
39487: LD_INT 2
39489: PPUSH
39490: CALL_OW 272
39494: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39495: LD_ADDR_VAR 0 12
39499: PUSH
39500: LD_VAR 0 13
39504: PPUSH
39505: CALL_OW 251
39509: PPUSH
39510: LD_VAR 0 10
39514: PPUSH
39515: LD_INT 2
39517: PPUSH
39518: CALL_OW 273
39522: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39523: LD_VAR 0 11
39527: PPUSH
39528: LD_VAR 0 12
39532: PPUSH
39533: CALL_OW 488
39537: PUSH
39538: LD_VAR 0 11
39542: PPUSH
39543: LD_VAR 0 12
39547: PPUSH
39548: CALL_OW 428
39552: NOT
39553: AND
39554: IFFALSE 39577
// begin ComMoveXY ( tmp , _x , _y ) ;
39556: LD_VAR 0 13
39560: PPUSH
39561: LD_VAR 0 11
39565: PPUSH
39566: LD_VAR 0 12
39570: PPUSH
39571: CALL_OW 111
// break ;
39575: GO 39579
// end ; end ;
39577: GO 39464
39579: POP
39580: POP
// end ; end ;
39581: GO 38906
39583: POP
39584: POP
// end ;
39585: LD_VAR 0 8
39589: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39590: LD_INT 0
39592: PPUSH
// result := true ;
39593: LD_ADDR_VAR 0 3
39597: PUSH
39598: LD_INT 1
39600: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39601: LD_VAR 0 2
39605: PUSH
39606: LD_INT 24
39608: DOUBLE
39609: EQUAL
39610: IFTRUE 39620
39612: LD_INT 33
39614: DOUBLE
39615: EQUAL
39616: IFTRUE 39620
39618: GO 39645
39620: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39621: LD_ADDR_VAR 0 3
39625: PUSH
39626: LD_INT 32
39628: PPUSH
39629: LD_VAR 0 1
39633: PPUSH
39634: CALL_OW 321
39638: PUSH
39639: LD_INT 2
39641: EQUAL
39642: ST_TO_ADDR
39643: GO 39961
39645: LD_INT 20
39647: DOUBLE
39648: EQUAL
39649: IFTRUE 39653
39651: GO 39678
39653: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39654: LD_ADDR_VAR 0 3
39658: PUSH
39659: LD_INT 6
39661: PPUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 321
39671: PUSH
39672: LD_INT 2
39674: EQUAL
39675: ST_TO_ADDR
39676: GO 39961
39678: LD_INT 22
39680: DOUBLE
39681: EQUAL
39682: IFTRUE 39692
39684: LD_INT 36
39686: DOUBLE
39687: EQUAL
39688: IFTRUE 39692
39690: GO 39717
39692: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39693: LD_ADDR_VAR 0 3
39697: PUSH
39698: LD_INT 15
39700: PPUSH
39701: LD_VAR 0 1
39705: PPUSH
39706: CALL_OW 321
39710: PUSH
39711: LD_INT 2
39713: EQUAL
39714: ST_TO_ADDR
39715: GO 39961
39717: LD_INT 30
39719: DOUBLE
39720: EQUAL
39721: IFTRUE 39725
39723: GO 39750
39725: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39726: LD_ADDR_VAR 0 3
39730: PUSH
39731: LD_INT 20
39733: PPUSH
39734: LD_VAR 0 1
39738: PPUSH
39739: CALL_OW 321
39743: PUSH
39744: LD_INT 2
39746: EQUAL
39747: ST_TO_ADDR
39748: GO 39961
39750: LD_INT 28
39752: DOUBLE
39753: EQUAL
39754: IFTRUE 39764
39756: LD_INT 21
39758: DOUBLE
39759: EQUAL
39760: IFTRUE 39764
39762: GO 39789
39764: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_INT 21
39772: PPUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 321
39782: PUSH
39783: LD_INT 2
39785: EQUAL
39786: ST_TO_ADDR
39787: GO 39961
39789: LD_INT 16
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39822
39797: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 84
39805: PPUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: CALL_OW 321
39815: PUSH
39816: LD_INT 2
39818: EQUAL
39819: ST_TO_ADDR
39820: GO 39961
39822: LD_INT 19
39824: DOUBLE
39825: EQUAL
39826: IFTRUE 39836
39828: LD_INT 23
39830: DOUBLE
39831: EQUAL
39832: IFTRUE 39836
39834: GO 39861
39836: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_INT 83
39844: PPUSH
39845: LD_VAR 0 1
39849: PPUSH
39850: CALL_OW 321
39854: PUSH
39855: LD_INT 2
39857: EQUAL
39858: ST_TO_ADDR
39859: GO 39961
39861: LD_INT 17
39863: DOUBLE
39864: EQUAL
39865: IFTRUE 39869
39867: GO 39894
39869: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_INT 39
39877: PPUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 321
39887: PUSH
39888: LD_INT 2
39890: EQUAL
39891: ST_TO_ADDR
39892: GO 39961
39894: LD_INT 18
39896: DOUBLE
39897: EQUAL
39898: IFTRUE 39902
39900: GO 39927
39902: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39903: LD_ADDR_VAR 0 3
39907: PUSH
39908: LD_INT 40
39910: PPUSH
39911: LD_VAR 0 1
39915: PPUSH
39916: CALL_OW 321
39920: PUSH
39921: LD_INT 2
39923: EQUAL
39924: ST_TO_ADDR
39925: GO 39961
39927: LD_INT 27
39929: DOUBLE
39930: EQUAL
39931: IFTRUE 39935
39933: GO 39960
39935: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39936: LD_ADDR_VAR 0 3
39940: PUSH
39941: LD_INT 35
39943: PPUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 321
39953: PUSH
39954: LD_INT 2
39956: EQUAL
39957: ST_TO_ADDR
39958: GO 39961
39960: POP
// end ;
39961: LD_VAR 0 3
39965: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39966: LD_INT 0
39968: PPUSH
39969: PPUSH
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
39978: PPUSH
// result := false ;
39979: LD_ADDR_VAR 0 6
39983: PUSH
39984: LD_INT 0
39986: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39987: LD_VAR 0 1
39991: NOT
39992: PUSH
39993: LD_VAR 0 1
39997: PPUSH
39998: CALL_OW 266
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 1
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: IN
40013: NOT
40014: OR
40015: PUSH
40016: LD_VAR 0 2
40020: NOT
40021: OR
40022: PUSH
40023: LD_VAR 0 5
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: LD_INT 3
40039: PUSH
40040: LD_INT 4
40042: PUSH
40043: LD_INT 5
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: IN
40054: NOT
40055: OR
40056: PUSH
40057: LD_VAR 0 3
40061: PPUSH
40062: LD_VAR 0 4
40066: PPUSH
40067: CALL_OW 488
40071: NOT
40072: OR
40073: IFFALSE 40077
// exit ;
40075: GO 40813
// side := GetSide ( depot ) ;
40077: LD_ADDR_VAR 0 9
40081: PUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 255
40091: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40092: LD_VAR 0 9
40096: PPUSH
40097: LD_VAR 0 2
40101: PPUSH
40102: CALL 39590 0 2
40106: NOT
40107: IFFALSE 40111
// exit ;
40109: GO 40813
// pom := GetBase ( depot ) ;
40111: LD_ADDR_VAR 0 10
40115: PUSH
40116: LD_VAR 0 1
40120: PPUSH
40121: CALL_OW 274
40125: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40126: LD_ADDR_VAR 0 11
40130: PUSH
40131: LD_VAR 0 2
40135: PPUSH
40136: LD_VAR 0 1
40140: PPUSH
40141: CALL_OW 248
40145: PPUSH
40146: CALL_OW 450
40150: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40151: LD_VAR 0 10
40155: PPUSH
40156: LD_INT 1
40158: PPUSH
40159: CALL_OW 275
40163: PUSH
40164: LD_VAR 0 11
40168: PUSH
40169: LD_INT 1
40171: ARRAY
40172: GREATEREQUAL
40173: PUSH
40174: LD_VAR 0 10
40178: PPUSH
40179: LD_INT 2
40181: PPUSH
40182: CALL_OW 275
40186: PUSH
40187: LD_VAR 0 11
40191: PUSH
40192: LD_INT 2
40194: ARRAY
40195: GREATEREQUAL
40196: AND
40197: PUSH
40198: LD_VAR 0 10
40202: PPUSH
40203: LD_INT 3
40205: PPUSH
40206: CALL_OW 275
40210: PUSH
40211: LD_VAR 0 11
40215: PUSH
40216: LD_INT 3
40218: ARRAY
40219: GREATEREQUAL
40220: AND
40221: NOT
40222: IFFALSE 40226
// exit ;
40224: GO 40813
// if GetBType ( depot ) = b_depot then
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 266
40235: PUSH
40236: LD_INT 0
40238: EQUAL
40239: IFFALSE 40251
// dist := 28 else
40241: LD_ADDR_VAR 0 14
40245: PUSH
40246: LD_INT 28
40248: ST_TO_ADDR
40249: GO 40259
// dist := 36 ;
40251: LD_ADDR_VAR 0 14
40255: PUSH
40256: LD_INT 36
40258: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40259: LD_VAR 0 1
40263: PPUSH
40264: LD_VAR 0 3
40268: PPUSH
40269: LD_VAR 0 4
40273: PPUSH
40274: CALL_OW 297
40278: PUSH
40279: LD_VAR 0 14
40283: GREATER
40284: IFFALSE 40288
// exit ;
40286: GO 40813
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40288: LD_ADDR_VAR 0 12
40292: PUSH
40293: LD_VAR 0 2
40297: PPUSH
40298: LD_VAR 0 3
40302: PPUSH
40303: LD_VAR 0 4
40307: PPUSH
40308: LD_VAR 0 5
40312: PPUSH
40313: LD_VAR 0 1
40317: PPUSH
40318: CALL_OW 248
40322: PPUSH
40323: LD_INT 0
40325: PPUSH
40326: CALL 40818 0 6
40330: ST_TO_ADDR
// if not hexes then
40331: LD_VAR 0 12
40335: NOT
40336: IFFALSE 40340
// exit ;
40338: GO 40813
// hex := GetHexInfo ( x , y ) ;
40340: LD_ADDR_VAR 0 15
40344: PUSH
40345: LD_VAR 0 3
40349: PPUSH
40350: LD_VAR 0 4
40354: PPUSH
40355: CALL_OW 546
40359: ST_TO_ADDR
// if hex [ 1 ] then
40360: LD_VAR 0 15
40364: PUSH
40365: LD_INT 1
40367: ARRAY
40368: IFFALSE 40372
// exit ;
40370: GO 40813
// height := hex [ 2 ] ;
40372: LD_ADDR_VAR 0 13
40376: PUSH
40377: LD_VAR 0 15
40381: PUSH
40382: LD_INT 2
40384: ARRAY
40385: ST_TO_ADDR
// for i = 1 to hexes do
40386: LD_ADDR_VAR 0 7
40390: PUSH
40391: DOUBLE
40392: LD_INT 1
40394: DEC
40395: ST_TO_ADDR
40396: LD_VAR 0 12
40400: PUSH
40401: FOR_TO
40402: IFFALSE 40732
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40404: LD_VAR 0 12
40408: PUSH
40409: LD_VAR 0 7
40413: ARRAY
40414: PUSH
40415: LD_INT 1
40417: ARRAY
40418: PPUSH
40419: LD_VAR 0 12
40423: PUSH
40424: LD_VAR 0 7
40428: ARRAY
40429: PUSH
40430: LD_INT 2
40432: ARRAY
40433: PPUSH
40434: CALL_OW 488
40438: NOT
40439: PUSH
40440: LD_VAR 0 12
40444: PUSH
40445: LD_VAR 0 7
40449: ARRAY
40450: PUSH
40451: LD_INT 1
40453: ARRAY
40454: PPUSH
40455: LD_VAR 0 12
40459: PUSH
40460: LD_VAR 0 7
40464: ARRAY
40465: PUSH
40466: LD_INT 2
40468: ARRAY
40469: PPUSH
40470: CALL_OW 428
40474: PUSH
40475: LD_INT 0
40477: GREATER
40478: OR
40479: PUSH
40480: LD_VAR 0 12
40484: PUSH
40485: LD_VAR 0 7
40489: ARRAY
40490: PUSH
40491: LD_INT 1
40493: ARRAY
40494: PPUSH
40495: LD_VAR 0 12
40499: PUSH
40500: LD_VAR 0 7
40504: ARRAY
40505: PUSH
40506: LD_INT 2
40508: ARRAY
40509: PPUSH
40510: CALL_OW 351
40514: OR
40515: IFFALSE 40521
// exit ;
40517: POP
40518: POP
40519: GO 40813
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40521: LD_ADDR_VAR 0 8
40525: PUSH
40526: LD_VAR 0 12
40530: PUSH
40531: LD_VAR 0 7
40535: ARRAY
40536: PUSH
40537: LD_INT 1
40539: ARRAY
40540: PPUSH
40541: LD_VAR 0 12
40545: PUSH
40546: LD_VAR 0 7
40550: ARRAY
40551: PUSH
40552: LD_INT 2
40554: ARRAY
40555: PPUSH
40556: CALL_OW 546
40560: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40561: LD_VAR 0 8
40565: PUSH
40566: LD_INT 1
40568: ARRAY
40569: PUSH
40570: LD_VAR 0 8
40574: PUSH
40575: LD_INT 2
40577: ARRAY
40578: PUSH
40579: LD_VAR 0 13
40583: PUSH
40584: LD_INT 2
40586: PLUS
40587: GREATER
40588: OR
40589: PUSH
40590: LD_VAR 0 8
40594: PUSH
40595: LD_INT 2
40597: ARRAY
40598: PUSH
40599: LD_VAR 0 13
40603: PUSH
40604: LD_INT 2
40606: MINUS
40607: LESS
40608: OR
40609: PUSH
40610: LD_VAR 0 8
40614: PUSH
40615: LD_INT 3
40617: ARRAY
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 8
40624: PUSH
40625: LD_INT 9
40627: PUSH
40628: LD_INT 10
40630: PUSH
40631: LD_INT 11
40633: PUSH
40634: LD_INT 12
40636: PUSH
40637: LD_INT 13
40639: PUSH
40640: LD_INT 16
40642: PUSH
40643: LD_INT 17
40645: PUSH
40646: LD_INT 18
40648: PUSH
40649: LD_INT 19
40651: PUSH
40652: LD_INT 20
40654: PUSH
40655: LD_INT 21
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: IN
40673: NOT
40674: OR
40675: PUSH
40676: LD_VAR 0 8
40680: PUSH
40681: LD_INT 5
40683: ARRAY
40684: NOT
40685: OR
40686: PUSH
40687: LD_VAR 0 8
40691: PUSH
40692: LD_INT 6
40694: ARRAY
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 7
40704: PUSH
40705: LD_INT 9
40707: PUSH
40708: LD_INT 10
40710: PUSH
40711: LD_INT 11
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: IN
40722: NOT
40723: OR
40724: IFFALSE 40730
// exit ;
40726: POP
40727: POP
40728: GO 40813
// end ;
40730: GO 40401
40732: POP
40733: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40734: LD_VAR 0 9
40738: PPUSH
40739: LD_VAR 0 3
40743: PPUSH
40744: LD_VAR 0 4
40748: PPUSH
40749: LD_INT 20
40751: PPUSH
40752: CALL 32765 0 4
40756: PUSH
40757: LD_INT 4
40759: ARRAY
40760: IFFALSE 40764
// exit ;
40762: GO 40813
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40764: LD_VAR 0 2
40768: PUSH
40769: LD_INT 29
40771: PUSH
40772: LD_INT 30
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: IN
40779: PUSH
40780: LD_VAR 0 3
40784: PPUSH
40785: LD_VAR 0 4
40789: PPUSH
40790: LD_VAR 0 9
40794: PPUSH
40795: CALL_OW 440
40799: NOT
40800: AND
40801: IFFALSE 40805
// exit ;
40803: GO 40813
// result := true ;
40805: LD_ADDR_VAR 0 6
40809: PUSH
40810: LD_INT 1
40812: ST_TO_ADDR
// end ;
40813: LD_VAR 0 6
40817: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40818: LD_INT 0
40820: PPUSH
40821: PPUSH
40822: PPUSH
40823: PPUSH
40824: PPUSH
40825: PPUSH
40826: PPUSH
40827: PPUSH
40828: PPUSH
40829: PPUSH
40830: PPUSH
40831: PPUSH
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
40839: PPUSH
40840: PPUSH
40841: PPUSH
40842: PPUSH
40843: PPUSH
40844: PPUSH
40845: PPUSH
40846: PPUSH
40847: PPUSH
40848: PPUSH
40849: PPUSH
40850: PPUSH
40851: PPUSH
40852: PPUSH
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
40860: PPUSH
40861: PPUSH
40862: PPUSH
40863: PPUSH
40864: PPUSH
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
40871: PPUSH
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
// result = [ ] ;
40878: LD_ADDR_VAR 0 7
40882: PUSH
40883: EMPTY
40884: ST_TO_ADDR
// temp_list = [ ] ;
40885: LD_ADDR_VAR 0 9
40889: PUSH
40890: EMPTY
40891: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40892: LD_VAR 0 4
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 2
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 4
40911: PUSH
40912: LD_INT 5
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: IN
40923: NOT
40924: PUSH
40925: LD_VAR 0 1
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: IN
40940: PUSH
40941: LD_VAR 0 5
40945: PUSH
40946: LD_INT 1
40948: PUSH
40949: LD_INT 2
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: LIST
40959: IN
40960: NOT
40961: AND
40962: OR
40963: IFFALSE 40967
// exit ;
40965: GO 59358
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40967: LD_VAR 0 1
40971: PUSH
40972: LD_INT 6
40974: PUSH
40975: LD_INT 7
40977: PUSH
40978: LD_INT 8
40980: PUSH
40981: LD_INT 13
40983: PUSH
40984: LD_INT 12
40986: PUSH
40987: LD_INT 15
40989: PUSH
40990: LD_INT 11
40992: PUSH
40993: LD_INT 14
40995: PUSH
40996: LD_INT 10
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: IN
41010: IFFALSE 41020
// btype = b_lab ;
41012: LD_ADDR_VAR 0 1
41016: PUSH
41017: LD_INT 6
41019: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41020: LD_VAR 0 6
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 2
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: LIST
41038: IN
41039: NOT
41040: PUSH
41041: LD_VAR 0 1
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 3
41057: PUSH
41058: LD_INT 6
41060: PUSH
41061: LD_INT 36
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: LD_INT 5
41069: PUSH
41070: LD_INT 31
41072: PUSH
41073: LD_INT 32
41075: PUSH
41076: LD_INT 33
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: IN
41092: NOT
41093: PUSH
41094: LD_VAR 0 6
41098: PUSH
41099: LD_INT 1
41101: EQUAL
41102: AND
41103: OR
41104: PUSH
41105: LD_VAR 0 1
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 3
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: IN
41120: NOT
41121: PUSH
41122: LD_VAR 0 6
41126: PUSH
41127: LD_INT 2
41129: EQUAL
41130: AND
41131: OR
41132: IFFALSE 41142
// mode = 0 ;
41134: LD_ADDR_VAR 0 6
41138: PUSH
41139: LD_INT 0
41141: ST_TO_ADDR
// case mode of 0 :
41142: LD_VAR 0 6
41146: PUSH
41147: LD_INT 0
41149: DOUBLE
41150: EQUAL
41151: IFTRUE 41155
41153: GO 52608
41155: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41156: LD_ADDR_VAR 0 11
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 3
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 3
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: NEG
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41349: LD_ADDR_VAR 0 12
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 2
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 2
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: NEG
41473: PUSH
41474: LD_INT 0
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 2
41483: NEG
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 3
41506: NEG
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: NEG
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41545: LD_ADDR_VAR 0 13
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 2
41692: NEG
41693: PUSH
41694: LD_INT 3
41696: NEG
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: LD_INT 2
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 3
41716: NEG
41717: PUSH
41718: LD_INT 3
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41744: LD_ADDR_VAR 0 14
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 1
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: NEG
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 1
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: LD_INT 3
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 3
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 1
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41940: LD_ADDR_VAR 0 15
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 0
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: NEG
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 1
42078: NEG
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 3
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42133: LD_ADDR_VAR 0 16
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 2
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 2
42256: NEG
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: LD_INT 2
42272: NEG
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 3
42280: PUSH
42281: LD_INT 2
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: LD_INT 3
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: LIST
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42326: LD_ADDR_VAR 0 17
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 0
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 0
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 0
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 1
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 2
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 0
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 2
42502: NEG
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: NEG
42526: PUSH
42527: LD_INT 2
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42556: LD_ADDR_VAR 0 18
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: LD_INT 1
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 2
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 1
42701: PUSH
42702: LD_INT 2
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: LD_INT 2
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: LD_INT 0
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 2
42755: NEG
42756: PUSH
42757: LD_INT 2
42759: NEG
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42786: LD_ADDR_VAR 0 19
42790: PUSH
42791: LD_INT 0
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: NEG
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: LD_INT 2
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43016: LD_ADDR_VAR 0 20
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43246: LD_ADDR_VAR 0 21
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 2
43381: PUSH
43382: LD_INT 2
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43476: LD_ADDR_VAR 0 22
43480: PUSH
43481: LD_INT 0
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: LD_INT 0
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43706: LD_ADDR_VAR 0 23
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 2
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: LD_INT 1
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 0
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: LD_INT 1
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: NEG
43906: PUSH
43907: LD_INT 2
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: LD_INT 3
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 1
43929: NEG
43930: PUSH
43931: LD_INT 3
43933: NEG
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43986: LD_ADDR_VAR 0 24
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_INT 0
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: NEG
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: NEG
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 2
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 2
44111: PUSH
44112: LD_INT 1
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: LD_INT 2
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 2
44162: NEG
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: LD_INT 2
44189: NEG
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 2
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: LD_INT 2
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44262: LD_ADDR_VAR 0 25
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: LD_INT 0
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: NEG
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 2
44387: PUSH
44388: LD_INT 1
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: LD_INT 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 1
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 2
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 3
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44536: LD_ADDR_VAR 0 26
44540: PUSH
44541: LD_INT 0
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: NEG
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 2
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 2
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 2
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 1
44701: NEG
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 3
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: PUSH
44758: LD_INT 3
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44812: LD_ADDR_VAR 0 27
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 1
44870: NEG
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: LD_INT 2
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 2
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 1
44919: NEG
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: LD_INT 1
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: LD_INT 2
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: LD_INT 2
44970: PUSH
44971: EMPTY
44972: LIST
44973: LIST
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: LD_INT 1
45003: NEG
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: NEG
45024: PUSH
45025: LD_INT 2
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 3
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45092: LD_ADDR_VAR 0 28
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 2
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 2
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 2
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 2
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: LD_INT 2
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 2
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: NEG
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: LD_INT 0
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: LD_INT 2
45295: NEG
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: LD_INT 3
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 3
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 3
45339: NEG
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45374: LD_ADDR_VAR 0 29
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 1
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: LD_INT 2
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 1
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: NEG
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 2
45576: PUSH
45577: LD_INT 1
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: LD_INT 1
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 3
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 1
45607: NEG
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45653: LD_ADDR_VAR 0 30
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 2
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 3
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: LD_INT 2
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 3
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 3
45896: NEG
45897: PUSH
45898: LD_INT 1
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45931: LD_ADDR_VAR 0 31
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: NEG
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: LD_INT 2
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 2
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: LD_INT 2
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: LD_INT 2
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 3
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 2
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 3
46174: NEG
46175: PUSH
46176: LD_INT 2
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46209: LD_ADDR_VAR 0 32
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 0
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 0
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: EMPTY
46359: LIST
46360: LIST
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 2
46375: NEG
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: LD_INT 3
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 2
46441: NEG
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 3
46452: NEG
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46487: LD_ADDR_VAR 0 33
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 0
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: NEG
46678: PUSH
46679: LD_INT 3
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 3
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 3
46731: NEG
46732: PUSH
46733: LD_INT 2
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46766: LD_ADDR_VAR 0 34
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 2
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 2
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 2
47000: NEG
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 3
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47046: LD_ADDR_VAR 0 35
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: PUSH
47128: LD_INT 1
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47158: LD_ADDR_VAR 0 36
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: LD_INT 0
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47270: LD_ADDR_VAR 0 37
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 1
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: LD_INT 1
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 1
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: NEG
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47382: LD_ADDR_VAR 0 38
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 1
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 2
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47494: LD_ADDR_VAR 0 39
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 2
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47606: LD_ADDR_VAR 0 40
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 1
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47718: LD_ADDR_VAR 0 41
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 1
47787: NEG
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 3
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 1
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 3
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 3
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 3
47951: PUSH
47952: LD_INT 2
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 3
47961: PUSH
47962: LD_INT 3
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 3
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48068: LD_ADDR_VAR 0 42
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 2
48258: NEG
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 2
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: LD_INT 2
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 3
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: PUSH
48325: LD_INT 3
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 0
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: LD_INT 3
48381: NEG
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48418: LD_ADDR_VAR 0 43
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 3
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: LD_INT 3
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 3
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: LD_INT 2
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: NEG
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48766: LD_ADDR_VAR 0 44
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 1
48862: NEG
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: LD_INT 1
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: LD_INT 2
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 2
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: LD_INT 3
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 3
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 3
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 3
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 1
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 3
49040: NEG
49041: PUSH
49042: LD_INT 0
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: NEG
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: NEG
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: NEG
49076: PUSH
49077: LD_INT 3
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49116: LD_ADDR_VAR 0 45
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 2
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 2
49306: NEG
49307: PUSH
49308: LD_INT 3
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 3
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 2
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 3
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: LD_INT 2
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 3
49425: NEG
49426: PUSH
49427: LD_INT 3
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49466: LD_ADDR_VAR 0 46
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 2
49551: NEG
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 2
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: NEG
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 2
49643: NEG
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 3
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 3
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 3
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 3
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: NEG
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 3
49762: NEG
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: LD_INT 1
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49814: LD_ADDR_VAR 0 47
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 2
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49965: LD_ADDR_VAR 0 48
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: PUSH
50004: LD_INT 1
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 2
50061: NEG
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50112: LD_ADDR_VAR 0 49
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 1
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 2
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50256: LD_ADDR_VAR 0 50
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: PUSH
50285: LD_INT 0
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 0
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: LD_INT 2
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 2
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50400: LD_ADDR_VAR 0 51
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 1
50458: NEG
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 2
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50547: LD_ADDR_VAR 0 52
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: NEG
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50698: LD_ADDR_VAR 0 53
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 2
50833: PUSH
50834: LD_INT 2
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 2
50874: NEG
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: NEG
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50928: LD_ADDR_VAR 0 54
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51158: LD_ADDR_VAR 0 55
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 2
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 2
51293: PUSH
51294: LD_INT 2
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 2
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51388: LD_ADDR_VAR 0 56
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: LD_INT 0
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 2
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 2
51523: PUSH
51524: LD_INT 2
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: LD_INT 2
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51618: LD_ADDR_VAR 0 57
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 2
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 2
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51848: LD_ADDR_VAR 0 58
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 0
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 2
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 1
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 2
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52078: LD_ADDR_VAR 0 59
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52166: LD_ADDR_VAR 0 60
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 0
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: LD_INT 1
52186: NEG
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 1
52204: PUSH
52205: LD_INT 1
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52254: LD_ADDR_VAR 0 61
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 1
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52342: LD_ADDR_VAR 0 62
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 0
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52430: LD_ADDR_VAR 0 63
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: NEG
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52518: LD_ADDR_VAR 0 64
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 1
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: ST_TO_ADDR
// end ; 1 :
52606: GO 58503
52608: LD_INT 1
52610: DOUBLE
52611: EQUAL
52612: IFTRUE 52616
52614: GO 55239
52616: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52617: LD_ADDR_VAR 0 11
52621: PUSH
52622: LD_INT 1
52624: NEG
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: LIST
52660: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52661: LD_ADDR_VAR 0 12
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 1
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 3
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52702: LD_ADDR_VAR 0 13
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: LD_INT 2
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 3
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: LIST
52741: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52742: LD_ADDR_VAR 0 14
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: LIST
52782: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52783: LD_ADDR_VAR 0 15
52787: PUSH
52788: LD_INT 2
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 3
52801: NEG
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: LIST
52826: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52827: LD_ADDR_VAR 0 16
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: LD_INT 3
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: LD_INT 3
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52873: LD_ADDR_VAR 0 17
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: LD_INT 3
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 1
52903: PUSH
52904: LD_INT 2
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52917: LD_ADDR_VAR 0 18
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52958: LD_ADDR_VAR 0 19
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 3
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: LIST
52997: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52998: LD_ADDR_VAR 0 20
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53039: LD_ADDR_VAR 0 21
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 3
53057: NEG
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 3
53068: NEG
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: LIST
53082: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53083: LD_ADDR_VAR 0 22
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 3
53102: NEG
53103: PUSH
53104: LD_INT 2
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: NEG
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53129: LD_ADDR_VAR 0 23
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 4
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 1
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53173: LD_ADDR_VAR 0 24
53177: PUSH
53178: LD_INT 3
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 3
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 4
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53214: LD_ADDR_VAR 0 25
53218: PUSH
53219: LD_INT 3
53221: PUSH
53222: LD_INT 3
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 4
53231: PUSH
53232: LD_INT 3
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: PUSH
53242: LD_INT 4
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: LIST
53253: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53254: LD_ADDR_VAR 0 26
53258: PUSH
53259: LD_INT 0
53261: PUSH
53262: LD_INT 3
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 4
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: LD_INT 3
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53295: LD_ADDR_VAR 0 27
53299: PUSH
53300: LD_INT 3
53302: NEG
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: LIST
53338: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53339: LD_ADDR_VAR 0 28
53343: PUSH
53344: LD_INT 3
53346: NEG
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 3
53358: NEG
53359: PUSH
53360: LD_INT 4
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 4
53370: NEG
53371: PUSH
53372: LD_INT 3
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: LIST
53384: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53385: LD_ADDR_VAR 0 29
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: LD_INT 3
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 3
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 4
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: LD_INT 4
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 5
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 5
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: LD_INT 4
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 6
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 6
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 5
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53540: LD_ADDR_VAR 0 30
53544: PUSH
53545: LD_INT 2
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 3
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 4
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 4
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 4
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 5
53620: PUSH
53621: LD_INT 0
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 5
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 5
53640: PUSH
53641: LD_INT 1
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 6
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 6
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53683: LD_ADDR_VAR 0 31
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 3
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: LD_INT 3
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 4
53720: PUSH
53721: LD_INT 3
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 4
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 3
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 5
53750: PUSH
53751: LD_INT 4
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: LD_INT 5
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: LD_INT 5
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 6
53780: PUSH
53781: LD_INT 5
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 6
53790: PUSH
53791: LD_INT 6
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 5
53800: PUSH
53801: LD_INT 6
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53822: LD_ADDR_VAR 0 32
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 4
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 4
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 5
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 5
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 1
53911: NEG
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 6
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 6
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 5
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53965: LD_ADDR_VAR 0 33
53969: PUSH
53970: LD_INT 2
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 3
53983: NEG
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 4
54017: NEG
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 4
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 4
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 5
54051: NEG
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 5
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 5
54074: NEG
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 6
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 6
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54120: LD_ADDR_VAR 0 34
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 3
54151: NEG
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 3
54163: NEG
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 4
54175: NEG
54176: PUSH
54177: LD_INT 3
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 4
54187: NEG
54188: PUSH
54189: LD_INT 4
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 4
54199: NEG
54200: PUSH
54201: LD_INT 5
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: LD_INT 4
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: LD_INT 5
54223: NEG
54224: PUSH
54225: LD_INT 5
54227: NEG
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 5
54235: NEG
54236: PUSH
54237: LD_INT 6
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 6
54247: NEG
54248: PUSH
54249: LD_INT 5
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 6
54259: NEG
54260: PUSH
54261: LD_INT 6
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54283: LD_ADDR_VAR 0 41
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: LD_INT 3
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: LD_INT 2
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54327: LD_ADDR_VAR 0 42
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54368: LD_ADDR_VAR 0 43
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: LD_INT 3
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54408: LD_ADDR_VAR 0 44
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: LIST
54448: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54449: LD_ADDR_VAR 0 45
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 3
54478: NEG
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54493: LD_ADDR_VAR 0 46
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54539: LD_ADDR_VAR 0 47
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 3
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54572: LD_ADDR_VAR 0 48
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54603: LD_ADDR_VAR 0 49
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: LD_INT 2
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54632: LD_ADDR_VAR 0 50
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: LD_INT 3
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 1
54649: PUSH
54650: LD_INT 3
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54661: LD_ADDR_VAR 0 51
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54692: LD_ADDR_VAR 0 52
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 3
54711: NEG
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54725: LD_ADDR_VAR 0 53
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54769: LD_ADDR_VAR 0 54
54773: PUSH
54774: LD_INT 2
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 3
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 3
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: LIST
54809: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54810: LD_ADDR_VAR 0 55
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54850: LD_ADDR_VAR 0 56
54854: PUSH
54855: LD_INT 1
54857: PUSH
54858: LD_INT 3
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 0
54867: PUSH
54868: LD_INT 3
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: LIST
54890: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54891: LD_ADDR_VAR 0 57
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 3
54909: NEG
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: LIST
54934: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54935: LD_ADDR_VAR 0 58
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: NEG
54967: PUSH
54968: LD_INT 3
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54981: LD_ADDR_VAR 0 59
54985: PUSH
54986: LD_INT 1
54988: NEG
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 2
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 1
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: LIST
55024: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55025: LD_ADDR_VAR 0 60
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 2
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 2
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: LIST
55065: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55066: LD_ADDR_VAR 0 61
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55106: LD_ADDR_VAR 0 62
55110: PUSH
55111: LD_INT 1
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 2
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55147: LD_ADDR_VAR 0 63
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: LD_INT 1
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 2
55165: NEG
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55191: LD_ADDR_VAR 0 64
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: LIST
55236: ST_TO_ADDR
// end ; 2 :
55237: GO 58503
55239: LD_INT 2
55241: DOUBLE
55242: EQUAL
55243: IFTRUE 55247
55245: GO 58502
55247: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55248: LD_ADDR_VAR 0 29
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 4
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 5
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 5
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 5
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: LD_INT 2
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 4
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: LD_INT 4
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: LD_INT 4
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 4
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 2
55428: PUSH
55429: LD_INT 4
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 4
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 4
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 5
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 5
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: NEG
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 5
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 3
55531: NEG
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 2
55554: NEG
55555: PUSH
55556: LD_INT 0
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: LD_INT 1
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: NEG
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 4
55587: NEG
55588: PUSH
55589: LD_INT 0
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 4
55598: NEG
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 4
55610: NEG
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: LD_INT 2
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 4
55633: NEG
55634: PUSH
55635: LD_INT 4
55637: NEG
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 4
55645: NEG
55646: PUSH
55647: LD_INT 5
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: LD_INT 4
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 3
55669: NEG
55670: PUSH
55671: LD_INT 3
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 4
55681: NEG
55682: PUSH
55683: LD_INT 3
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 5
55693: NEG
55694: PUSH
55695: LD_INT 4
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 5
55705: NEG
55706: PUSH
55707: LD_INT 5
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: LD_INT 5
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 5
55729: NEG
55730: PUSH
55731: LD_INT 3
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55786: LD_ADDR_VAR 0 30
55790: PUSH
55791: LD_INT 4
55793: PUSH
55794: LD_INT 4
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 5
55813: PUSH
55814: LD_INT 4
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 5
55823: PUSH
55824: LD_INT 5
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 4
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 3
55843: PUSH
55844: LD_INT 4
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 3
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 5
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 3
55873: PUSH
55874: LD_INT 5
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 1
55903: PUSH
55904: LD_INT 3
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PUSH
55914: LD_INT 4
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: LD_INT 4
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: LD_INT 4
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 4
55976: NEG
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 4
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: NEG
56011: PUSH
56012: LD_INT 1
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 4
56021: NEG
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 5
56032: NEG
56033: PUSH
56034: LD_INT 0
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 5
56043: NEG
56044: PUSH
56045: LD_INT 1
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 5
56055: NEG
56056: PUSH
56057: LD_INT 2
56059: NEG
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: LD_INT 3
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: LD_INT 4
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: LD_INT 2
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 4
56138: NEG
56139: PUSH
56140: LD_INT 3
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 4
56150: NEG
56151: PUSH
56152: LD_INT 4
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 2
56162: NEG
56163: PUSH
56164: LD_INT 4
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: LD_INT 2
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 0
56197: PUSH
56198: LD_INT 5
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 1
56208: PUSH
56209: LD_INT 4
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 0
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 4
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 1
56253: NEG
56254: PUSH
56255: LD_INT 5
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 2
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: LD_INT 5
56280: NEG
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56333: LD_ADDR_VAR 0 31
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 4
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: LD_INT 4
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: LD_INT 5
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: LD_INT 5
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 5
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 2
56422: NEG
56423: PUSH
56424: LD_INT 3
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 3
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: NEG
56468: PUSH
56469: LD_INT 1
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 3
56478: NEG
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 4
56489: NEG
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: LD_INT 1
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 4
56512: NEG
56513: PUSH
56514: LD_INT 2
56516: NEG
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 2
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 4
56535: NEG
56536: PUSH
56537: LD_INT 4
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 4
56547: NEG
56548: PUSH
56549: LD_INT 5
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: LD_INT 4
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 5
56595: NEG
56596: PUSH
56597: LD_INT 4
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 5
56607: NEG
56608: PUSH
56609: LD_INT 5
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: LD_INT 5
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 5
56631: NEG
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 3
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 4
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 3
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 3
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 4
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 2
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 4
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 4
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 5
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 5
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 4
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 3
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: LD_INT 2
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56883: LD_ADDR_VAR 0 32
56887: PUSH
56888: LD_INT 4
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: NEG
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: NEG
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 5
56946: NEG
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 5
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: NEG
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 5
56969: NEG
56970: PUSH
56971: LD_INT 2
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 3
56981: NEG
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 3
57004: NEG
57005: PUSH
57006: LD_INT 4
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 2
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: LD_INT 2
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 4
57052: NEG
57053: PUSH
57054: LD_INT 3
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 4
57064: NEG
57065: PUSH
57066: LD_INT 4
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: NEG
57077: PUSH
57078: LD_INT 4
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 4
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 4
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 5
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 3
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: LD_INT 3
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 4
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: NEG
57168: PUSH
57169: LD_INT 5
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 5
57194: NEG
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: LD_INT 1
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: LD_INT 1
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 2
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 4
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 4
57305: PUSH
57306: LD_INT 3
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 5
57315: PUSH
57316: LD_INT 4
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 5
57325: PUSH
57326: LD_INT 5
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 4
57335: PUSH
57336: LD_INT 5
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 3
57345: PUSH
57346: LD_INT 4
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 5
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: LD_INT 5
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57430: LD_ADDR_VAR 0 33
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 4
57449: NEG
57450: PUSH
57451: LD_INT 5
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: LD_INT 4
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: LD_INT 3
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 5
57497: NEG
57498: PUSH
57499: LD_INT 4
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 5
57509: NEG
57510: PUSH
57511: LD_INT 5
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 3
57521: NEG
57522: PUSH
57523: LD_INT 5
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 5
57533: NEG
57534: PUSH
57535: LD_INT 3
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 4
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 3
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 1
57578: PUSH
57579: LD_INT 2
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 2
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: LD_INT 3
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 4
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 4
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 4
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 4
57657: PUSH
57658: LD_INT 1
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 5
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 5
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 4
57688: PUSH
57689: LD_INT 1
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 5
57730: PUSH
57731: LD_INT 2
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 3
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 4
57760: PUSH
57761: LD_INT 3
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: LD_INT 4
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 3
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: LD_INT 4
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 4
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 5
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: LD_INT 4
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 5
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57968: LD_ADDR_VAR 0 34
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 4
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 0
57986: PUSH
57987: LD_INT 5
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 1
57997: PUSH
57998: LD_INT 4
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 3
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: LD_INT 3
58022: NEG
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 4
58034: NEG
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: NEG
58043: PUSH
58044: LD_INT 5
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 3
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: LD_INT 5
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 4
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 4
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 3
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 2
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 2
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 4
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 4
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 5
58190: PUSH
58191: LD_INT 4
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 5
58200: PUSH
58201: LD_INT 5
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 4
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 4
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 3
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 5
58240: PUSH
58241: LD_INT 3
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: LD_INT 5
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 2
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 4
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 4
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: NEG
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: NEG
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: NEG
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 5
58409: NEG
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 5
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 5
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: ST_TO_ADDR
// end ; end ;
58500: GO 58503
58502: POP
// case btype of b_depot , b_warehouse :
58503: LD_VAR 0 1
58507: PUSH
58508: LD_INT 0
58510: DOUBLE
58511: EQUAL
58512: IFTRUE 58522
58514: LD_INT 1
58516: DOUBLE
58517: EQUAL
58518: IFTRUE 58522
58520: GO 58723
58522: POP
// case nation of nation_american :
58523: LD_VAR 0 5
58527: PUSH
58528: LD_INT 1
58530: DOUBLE
58531: EQUAL
58532: IFTRUE 58536
58534: GO 58592
58536: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58537: LD_ADDR_VAR 0 9
58541: PUSH
58542: LD_VAR 0 11
58546: PUSH
58547: LD_VAR 0 12
58551: PUSH
58552: LD_VAR 0 13
58556: PUSH
58557: LD_VAR 0 14
58561: PUSH
58562: LD_VAR 0 15
58566: PUSH
58567: LD_VAR 0 16
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: PUSH
58580: LD_VAR 0 4
58584: PUSH
58585: LD_INT 1
58587: PLUS
58588: ARRAY
58589: ST_TO_ADDR
58590: GO 58721
58592: LD_INT 2
58594: DOUBLE
58595: EQUAL
58596: IFTRUE 58600
58598: GO 58656
58600: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58601: LD_ADDR_VAR 0 9
58605: PUSH
58606: LD_VAR 0 17
58610: PUSH
58611: LD_VAR 0 18
58615: PUSH
58616: LD_VAR 0 19
58620: PUSH
58621: LD_VAR 0 20
58625: PUSH
58626: LD_VAR 0 21
58630: PUSH
58631: LD_VAR 0 22
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: PUSH
58644: LD_VAR 0 4
58648: PUSH
58649: LD_INT 1
58651: PLUS
58652: ARRAY
58653: ST_TO_ADDR
58654: GO 58721
58656: LD_INT 3
58658: DOUBLE
58659: EQUAL
58660: IFTRUE 58664
58662: GO 58720
58664: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58665: LD_ADDR_VAR 0 9
58669: PUSH
58670: LD_VAR 0 23
58674: PUSH
58675: LD_VAR 0 24
58679: PUSH
58680: LD_VAR 0 25
58684: PUSH
58685: LD_VAR 0 26
58689: PUSH
58690: LD_VAR 0 27
58694: PUSH
58695: LD_VAR 0 28
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: PUSH
58708: LD_VAR 0 4
58712: PUSH
58713: LD_INT 1
58715: PLUS
58716: ARRAY
58717: ST_TO_ADDR
58718: GO 58721
58720: POP
58721: GO 59276
58723: LD_INT 2
58725: DOUBLE
58726: EQUAL
58727: IFTRUE 58737
58729: LD_INT 3
58731: DOUBLE
58732: EQUAL
58733: IFTRUE 58737
58735: GO 58793
58737: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58738: LD_ADDR_VAR 0 9
58742: PUSH
58743: LD_VAR 0 29
58747: PUSH
58748: LD_VAR 0 30
58752: PUSH
58753: LD_VAR 0 31
58757: PUSH
58758: LD_VAR 0 32
58762: PUSH
58763: LD_VAR 0 33
58767: PUSH
58768: LD_VAR 0 34
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: PUSH
58781: LD_VAR 0 4
58785: PUSH
58786: LD_INT 1
58788: PLUS
58789: ARRAY
58790: ST_TO_ADDR
58791: GO 59276
58793: LD_INT 16
58795: DOUBLE
58796: EQUAL
58797: IFTRUE 58855
58799: LD_INT 17
58801: DOUBLE
58802: EQUAL
58803: IFTRUE 58855
58805: LD_INT 18
58807: DOUBLE
58808: EQUAL
58809: IFTRUE 58855
58811: LD_INT 19
58813: DOUBLE
58814: EQUAL
58815: IFTRUE 58855
58817: LD_INT 22
58819: DOUBLE
58820: EQUAL
58821: IFTRUE 58855
58823: LD_INT 20
58825: DOUBLE
58826: EQUAL
58827: IFTRUE 58855
58829: LD_INT 21
58831: DOUBLE
58832: EQUAL
58833: IFTRUE 58855
58835: LD_INT 23
58837: DOUBLE
58838: EQUAL
58839: IFTRUE 58855
58841: LD_INT 24
58843: DOUBLE
58844: EQUAL
58845: IFTRUE 58855
58847: LD_INT 25
58849: DOUBLE
58850: EQUAL
58851: IFTRUE 58855
58853: GO 58911
58855: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58856: LD_ADDR_VAR 0 9
58860: PUSH
58861: LD_VAR 0 35
58865: PUSH
58866: LD_VAR 0 36
58870: PUSH
58871: LD_VAR 0 37
58875: PUSH
58876: LD_VAR 0 38
58880: PUSH
58881: LD_VAR 0 39
58885: PUSH
58886: LD_VAR 0 40
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: PUSH
58899: LD_VAR 0 4
58903: PUSH
58904: LD_INT 1
58906: PLUS
58907: ARRAY
58908: ST_TO_ADDR
58909: GO 59276
58911: LD_INT 6
58913: DOUBLE
58914: EQUAL
58915: IFTRUE 58967
58917: LD_INT 7
58919: DOUBLE
58920: EQUAL
58921: IFTRUE 58967
58923: LD_INT 8
58925: DOUBLE
58926: EQUAL
58927: IFTRUE 58967
58929: LD_INT 13
58931: DOUBLE
58932: EQUAL
58933: IFTRUE 58967
58935: LD_INT 12
58937: DOUBLE
58938: EQUAL
58939: IFTRUE 58967
58941: LD_INT 15
58943: DOUBLE
58944: EQUAL
58945: IFTRUE 58967
58947: LD_INT 11
58949: DOUBLE
58950: EQUAL
58951: IFTRUE 58967
58953: LD_INT 14
58955: DOUBLE
58956: EQUAL
58957: IFTRUE 58967
58959: LD_INT 10
58961: DOUBLE
58962: EQUAL
58963: IFTRUE 58967
58965: GO 59023
58967: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58968: LD_ADDR_VAR 0 9
58972: PUSH
58973: LD_VAR 0 41
58977: PUSH
58978: LD_VAR 0 42
58982: PUSH
58983: LD_VAR 0 43
58987: PUSH
58988: LD_VAR 0 44
58992: PUSH
58993: LD_VAR 0 45
58997: PUSH
58998: LD_VAR 0 46
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: PUSH
59011: LD_VAR 0 4
59015: PUSH
59016: LD_INT 1
59018: PLUS
59019: ARRAY
59020: ST_TO_ADDR
59021: GO 59276
59023: LD_INT 36
59025: DOUBLE
59026: EQUAL
59027: IFTRUE 59031
59029: GO 59087
59031: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59032: LD_ADDR_VAR 0 9
59036: PUSH
59037: LD_VAR 0 47
59041: PUSH
59042: LD_VAR 0 48
59046: PUSH
59047: LD_VAR 0 49
59051: PUSH
59052: LD_VAR 0 50
59056: PUSH
59057: LD_VAR 0 51
59061: PUSH
59062: LD_VAR 0 52
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: PUSH
59075: LD_VAR 0 4
59079: PUSH
59080: LD_INT 1
59082: PLUS
59083: ARRAY
59084: ST_TO_ADDR
59085: GO 59276
59087: LD_INT 4
59089: DOUBLE
59090: EQUAL
59091: IFTRUE 59113
59093: LD_INT 5
59095: DOUBLE
59096: EQUAL
59097: IFTRUE 59113
59099: LD_INT 34
59101: DOUBLE
59102: EQUAL
59103: IFTRUE 59113
59105: LD_INT 37
59107: DOUBLE
59108: EQUAL
59109: IFTRUE 59113
59111: GO 59169
59113: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59114: LD_ADDR_VAR 0 9
59118: PUSH
59119: LD_VAR 0 53
59123: PUSH
59124: LD_VAR 0 54
59128: PUSH
59129: LD_VAR 0 55
59133: PUSH
59134: LD_VAR 0 56
59138: PUSH
59139: LD_VAR 0 57
59143: PUSH
59144: LD_VAR 0 58
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: PUSH
59157: LD_VAR 0 4
59161: PUSH
59162: LD_INT 1
59164: PLUS
59165: ARRAY
59166: ST_TO_ADDR
59167: GO 59276
59169: LD_INT 31
59171: DOUBLE
59172: EQUAL
59173: IFTRUE 59219
59175: LD_INT 32
59177: DOUBLE
59178: EQUAL
59179: IFTRUE 59219
59181: LD_INT 33
59183: DOUBLE
59184: EQUAL
59185: IFTRUE 59219
59187: LD_INT 27
59189: DOUBLE
59190: EQUAL
59191: IFTRUE 59219
59193: LD_INT 26
59195: DOUBLE
59196: EQUAL
59197: IFTRUE 59219
59199: LD_INT 28
59201: DOUBLE
59202: EQUAL
59203: IFTRUE 59219
59205: LD_INT 29
59207: DOUBLE
59208: EQUAL
59209: IFTRUE 59219
59211: LD_INT 30
59213: DOUBLE
59214: EQUAL
59215: IFTRUE 59219
59217: GO 59275
59219: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59220: LD_ADDR_VAR 0 9
59224: PUSH
59225: LD_VAR 0 59
59229: PUSH
59230: LD_VAR 0 60
59234: PUSH
59235: LD_VAR 0 61
59239: PUSH
59240: LD_VAR 0 62
59244: PUSH
59245: LD_VAR 0 63
59249: PUSH
59250: LD_VAR 0 64
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: PUSH
59263: LD_VAR 0 4
59267: PUSH
59268: LD_INT 1
59270: PLUS
59271: ARRAY
59272: ST_TO_ADDR
59273: GO 59276
59275: POP
// temp_list2 = [ ] ;
59276: LD_ADDR_VAR 0 10
59280: PUSH
59281: EMPTY
59282: ST_TO_ADDR
// for i in temp_list do
59283: LD_ADDR_VAR 0 8
59287: PUSH
59288: LD_VAR 0 9
59292: PUSH
59293: FOR_IN
59294: IFFALSE 59346
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59296: LD_ADDR_VAR 0 10
59300: PUSH
59301: LD_VAR 0 10
59305: PUSH
59306: LD_VAR 0 8
59310: PUSH
59311: LD_INT 1
59313: ARRAY
59314: PUSH
59315: LD_VAR 0 2
59319: PLUS
59320: PUSH
59321: LD_VAR 0 8
59325: PUSH
59326: LD_INT 2
59328: ARRAY
59329: PUSH
59330: LD_VAR 0 3
59334: PLUS
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: EMPTY
59341: LIST
59342: ADD
59343: ST_TO_ADDR
59344: GO 59293
59346: POP
59347: POP
// result = temp_list2 ;
59348: LD_ADDR_VAR 0 7
59352: PUSH
59353: LD_VAR 0 10
59357: ST_TO_ADDR
// end ;
59358: LD_VAR 0 7
59362: RET
// export function EnemyInRange ( unit , dist ) ; begin
59363: LD_INT 0
59365: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59366: LD_ADDR_VAR 0 3
59370: PUSH
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 255
59380: PPUSH
59381: LD_VAR 0 1
59385: PPUSH
59386: CALL_OW 250
59390: PPUSH
59391: LD_VAR 0 1
59395: PPUSH
59396: CALL_OW 251
59400: PPUSH
59401: LD_VAR 0 2
59405: PPUSH
59406: CALL 32765 0 4
59410: PUSH
59411: LD_INT 4
59413: ARRAY
59414: ST_TO_ADDR
// end ;
59415: LD_VAR 0 3
59419: RET
// export function PlayerSeeMe ( unit ) ; begin
59420: LD_INT 0
59422: PPUSH
// result := See ( your_side , unit ) ;
59423: LD_ADDR_VAR 0 2
59427: PUSH
59428: LD_OWVAR 2
59432: PPUSH
59433: LD_VAR 0 1
59437: PPUSH
59438: CALL_OW 292
59442: ST_TO_ADDR
// end ;
59443: LD_VAR 0 2
59447: RET
// export function ReverseDir ( unit ) ; begin
59448: LD_INT 0
59450: PPUSH
// if not unit then
59451: LD_VAR 0 1
59455: NOT
59456: IFFALSE 59460
// exit ;
59458: GO 59483
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59460: LD_ADDR_VAR 0 2
59464: PUSH
59465: LD_VAR 0 1
59469: PPUSH
59470: CALL_OW 254
59474: PUSH
59475: LD_INT 3
59477: PLUS
59478: PUSH
59479: LD_INT 6
59481: MOD
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 2
59487: RET
// export function ReverseArray ( array ) ; var i ; begin
59488: LD_INT 0
59490: PPUSH
59491: PPUSH
// if not array then
59492: LD_VAR 0 1
59496: NOT
59497: IFFALSE 59501
// exit ;
59499: GO 59556
// result := [ ] ;
59501: LD_ADDR_VAR 0 2
59505: PUSH
59506: EMPTY
59507: ST_TO_ADDR
// for i := array downto 1 do
59508: LD_ADDR_VAR 0 3
59512: PUSH
59513: DOUBLE
59514: LD_VAR 0 1
59518: INC
59519: ST_TO_ADDR
59520: LD_INT 1
59522: PUSH
59523: FOR_DOWNTO
59524: IFFALSE 59554
// result := Join ( result , array [ i ] ) ;
59526: LD_ADDR_VAR 0 2
59530: PUSH
59531: LD_VAR 0 2
59535: PPUSH
59536: LD_VAR 0 1
59540: PUSH
59541: LD_VAR 0 3
59545: ARRAY
59546: PPUSH
59547: CALL 64181 0 2
59551: ST_TO_ADDR
59552: GO 59523
59554: POP
59555: POP
// end ;
59556: LD_VAR 0 2
59560: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59561: LD_INT 0
59563: PPUSH
59564: PPUSH
59565: PPUSH
59566: PPUSH
59567: PPUSH
59568: PPUSH
// if not unit or not hexes then
59569: LD_VAR 0 1
59573: NOT
59574: PUSH
59575: LD_VAR 0 2
59579: NOT
59580: OR
59581: IFFALSE 59585
// exit ;
59583: GO 59708
// dist := 9999 ;
59585: LD_ADDR_VAR 0 5
59589: PUSH
59590: LD_INT 9999
59592: ST_TO_ADDR
// for i = 1 to hexes do
59593: LD_ADDR_VAR 0 4
59597: PUSH
59598: DOUBLE
59599: LD_INT 1
59601: DEC
59602: ST_TO_ADDR
59603: LD_VAR 0 2
59607: PUSH
59608: FOR_TO
59609: IFFALSE 59696
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59611: LD_ADDR_VAR 0 6
59615: PUSH
59616: LD_VAR 0 1
59620: PPUSH
59621: LD_VAR 0 2
59625: PUSH
59626: LD_VAR 0 4
59630: ARRAY
59631: PUSH
59632: LD_INT 1
59634: ARRAY
59635: PPUSH
59636: LD_VAR 0 2
59640: PUSH
59641: LD_VAR 0 4
59645: ARRAY
59646: PUSH
59647: LD_INT 2
59649: ARRAY
59650: PPUSH
59651: CALL_OW 297
59655: ST_TO_ADDR
// if tdist < dist then
59656: LD_VAR 0 6
59660: PUSH
59661: LD_VAR 0 5
59665: LESS
59666: IFFALSE 59694
// begin hex := hexes [ i ] ;
59668: LD_ADDR_VAR 0 8
59672: PUSH
59673: LD_VAR 0 2
59677: PUSH
59678: LD_VAR 0 4
59682: ARRAY
59683: ST_TO_ADDR
// dist := tdist ;
59684: LD_ADDR_VAR 0 5
59688: PUSH
59689: LD_VAR 0 6
59693: ST_TO_ADDR
// end ; end ;
59694: GO 59608
59696: POP
59697: POP
// result := hex ;
59698: LD_ADDR_VAR 0 3
59702: PUSH
59703: LD_VAR 0 8
59707: ST_TO_ADDR
// end ;
59708: LD_VAR 0 3
59712: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59713: LD_INT 0
59715: PPUSH
59716: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59717: LD_VAR 0 1
59721: NOT
59722: PUSH
59723: LD_VAR 0 1
59727: PUSH
59728: LD_INT 21
59730: PUSH
59731: LD_INT 2
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 23
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PPUSH
59752: CALL_OW 69
59756: IN
59757: NOT
59758: OR
59759: IFFALSE 59763
// exit ;
59761: GO 59810
// for i = 1 to 3 do
59763: LD_ADDR_VAR 0 3
59767: PUSH
59768: DOUBLE
59769: LD_INT 1
59771: DEC
59772: ST_TO_ADDR
59773: LD_INT 3
59775: PUSH
59776: FOR_TO
59777: IFFALSE 59808
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59779: LD_VAR 0 1
59783: PPUSH
59784: CALL_OW 250
59788: PPUSH
59789: LD_VAR 0 1
59793: PPUSH
59794: CALL_OW 251
59798: PPUSH
59799: LD_INT 1
59801: PPUSH
59802: CALL_OW 453
59806: GO 59776
59808: POP
59809: POP
// end ;
59810: LD_VAR 0 2
59814: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59815: LD_INT 0
59817: PPUSH
59818: PPUSH
59819: PPUSH
59820: PPUSH
59821: PPUSH
59822: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59823: LD_VAR 0 1
59827: NOT
59828: PUSH
59829: LD_VAR 0 2
59833: NOT
59834: OR
59835: PUSH
59836: LD_VAR 0 1
59840: PPUSH
59841: CALL_OW 314
59845: OR
59846: IFFALSE 59850
// exit ;
59848: GO 60291
// x := GetX ( enemy_unit ) ;
59850: LD_ADDR_VAR 0 7
59854: PUSH
59855: LD_VAR 0 2
59859: PPUSH
59860: CALL_OW 250
59864: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59865: LD_ADDR_VAR 0 8
59869: PUSH
59870: LD_VAR 0 2
59874: PPUSH
59875: CALL_OW 251
59879: ST_TO_ADDR
// if not x or not y then
59880: LD_VAR 0 7
59884: NOT
59885: PUSH
59886: LD_VAR 0 8
59890: NOT
59891: OR
59892: IFFALSE 59896
// exit ;
59894: GO 60291
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59896: LD_ADDR_VAR 0 6
59900: PUSH
59901: LD_VAR 0 7
59905: PPUSH
59906: LD_INT 0
59908: PPUSH
59909: LD_INT 4
59911: PPUSH
59912: CALL_OW 272
59916: PUSH
59917: LD_VAR 0 8
59921: PPUSH
59922: LD_INT 0
59924: PPUSH
59925: LD_INT 4
59927: PPUSH
59928: CALL_OW 273
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_VAR 0 7
59941: PPUSH
59942: LD_INT 1
59944: PPUSH
59945: LD_INT 4
59947: PPUSH
59948: CALL_OW 272
59952: PUSH
59953: LD_VAR 0 8
59957: PPUSH
59958: LD_INT 1
59960: PPUSH
59961: LD_INT 4
59963: PPUSH
59964: CALL_OW 273
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_VAR 0 7
59977: PPUSH
59978: LD_INT 2
59980: PPUSH
59981: LD_INT 4
59983: PPUSH
59984: CALL_OW 272
59988: PUSH
59989: LD_VAR 0 8
59993: PPUSH
59994: LD_INT 2
59996: PPUSH
59997: LD_INT 4
59999: PPUSH
60000: CALL_OW 273
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_VAR 0 7
60013: PPUSH
60014: LD_INT 3
60016: PPUSH
60017: LD_INT 4
60019: PPUSH
60020: CALL_OW 272
60024: PUSH
60025: LD_VAR 0 8
60029: PPUSH
60030: LD_INT 3
60032: PPUSH
60033: LD_INT 4
60035: PPUSH
60036: CALL_OW 273
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_VAR 0 7
60049: PPUSH
60050: LD_INT 4
60052: PPUSH
60053: LD_INT 4
60055: PPUSH
60056: CALL_OW 272
60060: PUSH
60061: LD_VAR 0 8
60065: PPUSH
60066: LD_INT 4
60068: PPUSH
60069: LD_INT 4
60071: PPUSH
60072: CALL_OW 273
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_VAR 0 7
60085: PPUSH
60086: LD_INT 5
60088: PPUSH
60089: LD_INT 4
60091: PPUSH
60092: CALL_OW 272
60096: PUSH
60097: LD_VAR 0 8
60101: PPUSH
60102: LD_INT 5
60104: PPUSH
60105: LD_INT 4
60107: PPUSH
60108: CALL_OW 273
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: ST_TO_ADDR
// for i = tmp downto 1 do
60125: LD_ADDR_VAR 0 4
60129: PUSH
60130: DOUBLE
60131: LD_VAR 0 6
60135: INC
60136: ST_TO_ADDR
60137: LD_INT 1
60139: PUSH
60140: FOR_DOWNTO
60141: IFFALSE 60242
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60143: LD_VAR 0 6
60147: PUSH
60148: LD_VAR 0 4
60152: ARRAY
60153: PUSH
60154: LD_INT 1
60156: ARRAY
60157: PPUSH
60158: LD_VAR 0 6
60162: PUSH
60163: LD_VAR 0 4
60167: ARRAY
60168: PUSH
60169: LD_INT 2
60171: ARRAY
60172: PPUSH
60173: CALL_OW 488
60177: NOT
60178: PUSH
60179: LD_VAR 0 6
60183: PUSH
60184: LD_VAR 0 4
60188: ARRAY
60189: PUSH
60190: LD_INT 1
60192: ARRAY
60193: PPUSH
60194: LD_VAR 0 6
60198: PUSH
60199: LD_VAR 0 4
60203: ARRAY
60204: PUSH
60205: LD_INT 2
60207: ARRAY
60208: PPUSH
60209: CALL_OW 428
60213: PUSH
60214: LD_INT 0
60216: NONEQUAL
60217: OR
60218: IFFALSE 60240
// tmp := Delete ( tmp , i ) ;
60220: LD_ADDR_VAR 0 6
60224: PUSH
60225: LD_VAR 0 6
60229: PPUSH
60230: LD_VAR 0 4
60234: PPUSH
60235: CALL_OW 3
60239: ST_TO_ADDR
60240: GO 60140
60242: POP
60243: POP
// j := GetClosestHex ( unit , tmp ) ;
60244: LD_ADDR_VAR 0 5
60248: PUSH
60249: LD_VAR 0 1
60253: PPUSH
60254: LD_VAR 0 6
60258: PPUSH
60259: CALL 59561 0 2
60263: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60264: LD_VAR 0 1
60268: PPUSH
60269: LD_VAR 0 5
60273: PUSH
60274: LD_INT 1
60276: ARRAY
60277: PPUSH
60278: LD_VAR 0 5
60282: PUSH
60283: LD_INT 2
60285: ARRAY
60286: PPUSH
60287: CALL_OW 111
// end ;
60291: LD_VAR 0 3
60295: RET
// export function PrepareApemanSoldier ( ) ; begin
60296: LD_INT 0
60298: PPUSH
// uc_nation := 0 ;
60299: LD_ADDR_OWVAR 21
60303: PUSH
60304: LD_INT 0
60306: ST_TO_ADDR
// hc_sex := sex_male ;
60307: LD_ADDR_OWVAR 27
60311: PUSH
60312: LD_INT 1
60314: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60315: LD_ADDR_OWVAR 28
60319: PUSH
60320: LD_INT 15
60322: ST_TO_ADDR
// hc_gallery :=  ;
60323: LD_ADDR_OWVAR 33
60327: PUSH
60328: LD_STRING 
60330: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60331: LD_ADDR_OWVAR 31
60335: PUSH
60336: LD_INT 0
60338: PPUSH
60339: LD_INT 3
60341: PPUSH
60342: CALL_OW 12
60346: PUSH
60347: LD_INT 0
60349: PPUSH
60350: LD_INT 3
60352: PPUSH
60353: CALL_OW 12
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: ST_TO_ADDR
// end ;
60370: LD_VAR 0 1
60374: RET
// export function PrepareApemanEngineer ( ) ; begin
60375: LD_INT 0
60377: PPUSH
// uc_nation := 0 ;
60378: LD_ADDR_OWVAR 21
60382: PUSH
60383: LD_INT 0
60385: ST_TO_ADDR
// hc_sex := sex_male ;
60386: LD_ADDR_OWVAR 27
60390: PUSH
60391: LD_INT 1
60393: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60394: LD_ADDR_OWVAR 28
60398: PUSH
60399: LD_INT 16
60401: ST_TO_ADDR
// hc_gallery :=  ;
60402: LD_ADDR_OWVAR 33
60406: PUSH
60407: LD_STRING 
60409: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60410: LD_ADDR_OWVAR 31
60414: PUSH
60415: LD_INT 0
60417: PPUSH
60418: LD_INT 3
60420: PPUSH
60421: CALL_OW 12
60425: PUSH
60426: LD_INT 0
60428: PPUSH
60429: LD_INT 3
60431: PPUSH
60432: CALL_OW 12
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// end ;
60449: LD_VAR 0 1
60453: RET
// export function PrepareApeman ( agressivity ) ; begin
60454: LD_INT 0
60456: PPUSH
// uc_side := 0 ;
60457: LD_ADDR_OWVAR 20
60461: PUSH
60462: LD_INT 0
60464: ST_TO_ADDR
// uc_nation := 0 ;
60465: LD_ADDR_OWVAR 21
60469: PUSH
60470: LD_INT 0
60472: ST_TO_ADDR
// hc_sex := sex_male ;
60473: LD_ADDR_OWVAR 27
60477: PUSH
60478: LD_INT 1
60480: ST_TO_ADDR
// hc_class := class_apeman ;
60481: LD_ADDR_OWVAR 28
60485: PUSH
60486: LD_INT 12
60488: ST_TO_ADDR
// hc_gallery :=  ;
60489: LD_ADDR_OWVAR 33
60493: PUSH
60494: LD_STRING 
60496: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60497: LD_ADDR_OWVAR 35
60501: PUSH
60502: LD_VAR 0 1
60506: NEG
60507: PPUSH
60508: LD_VAR 0 1
60512: PPUSH
60513: CALL_OW 12
60517: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60518: LD_ADDR_OWVAR 31
60522: PUSH
60523: LD_INT 0
60525: PPUSH
60526: LD_INT 3
60528: PPUSH
60529: CALL_OW 12
60533: PUSH
60534: LD_INT 0
60536: PPUSH
60537: LD_INT 3
60539: PPUSH
60540: CALL_OW 12
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// end ;
60557: LD_VAR 0 2
60561: RET
// export function PrepareTiger ( agressivity ) ; begin
60562: LD_INT 0
60564: PPUSH
// uc_side := 0 ;
60565: LD_ADDR_OWVAR 20
60569: PUSH
60570: LD_INT 0
60572: ST_TO_ADDR
// uc_nation := 0 ;
60573: LD_ADDR_OWVAR 21
60577: PUSH
60578: LD_INT 0
60580: ST_TO_ADDR
// hc_class := class_tiger ;
60581: LD_ADDR_OWVAR 28
60585: PUSH
60586: LD_INT 14
60588: ST_TO_ADDR
// hc_gallery :=  ;
60589: LD_ADDR_OWVAR 33
60593: PUSH
60594: LD_STRING 
60596: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60597: LD_ADDR_OWVAR 35
60601: PUSH
60602: LD_VAR 0 1
60606: NEG
60607: PPUSH
60608: LD_VAR 0 1
60612: PPUSH
60613: CALL_OW 12
60617: ST_TO_ADDR
// end ;
60618: LD_VAR 0 2
60622: RET
// export function PrepareEnchidna ( ) ; begin
60623: LD_INT 0
60625: PPUSH
// uc_side := 0 ;
60626: LD_ADDR_OWVAR 20
60630: PUSH
60631: LD_INT 0
60633: ST_TO_ADDR
// uc_nation := 0 ;
60634: LD_ADDR_OWVAR 21
60638: PUSH
60639: LD_INT 0
60641: ST_TO_ADDR
// hc_class := class_baggie ;
60642: LD_ADDR_OWVAR 28
60646: PUSH
60647: LD_INT 13
60649: ST_TO_ADDR
// hc_gallery :=  ;
60650: LD_ADDR_OWVAR 33
60654: PUSH
60655: LD_STRING 
60657: ST_TO_ADDR
// end ;
60658: LD_VAR 0 1
60662: RET
// export function PrepareFrog ( ) ; begin
60663: LD_INT 0
60665: PPUSH
// uc_side := 0 ;
60666: LD_ADDR_OWVAR 20
60670: PUSH
60671: LD_INT 0
60673: ST_TO_ADDR
// uc_nation := 0 ;
60674: LD_ADDR_OWVAR 21
60678: PUSH
60679: LD_INT 0
60681: ST_TO_ADDR
// hc_class := class_frog ;
60682: LD_ADDR_OWVAR 28
60686: PUSH
60687: LD_INT 19
60689: ST_TO_ADDR
// hc_gallery :=  ;
60690: LD_ADDR_OWVAR 33
60694: PUSH
60695: LD_STRING 
60697: ST_TO_ADDR
// end ;
60698: LD_VAR 0 1
60702: RET
// export function PrepareFish ( ) ; begin
60703: LD_INT 0
60705: PPUSH
// uc_side := 0 ;
60706: LD_ADDR_OWVAR 20
60710: PUSH
60711: LD_INT 0
60713: ST_TO_ADDR
// uc_nation := 0 ;
60714: LD_ADDR_OWVAR 21
60718: PUSH
60719: LD_INT 0
60721: ST_TO_ADDR
// hc_class := class_fish ;
60722: LD_ADDR_OWVAR 28
60726: PUSH
60727: LD_INT 20
60729: ST_TO_ADDR
// hc_gallery :=  ;
60730: LD_ADDR_OWVAR 33
60734: PUSH
60735: LD_STRING 
60737: ST_TO_ADDR
// end ;
60738: LD_VAR 0 1
60742: RET
// export function PrepareBird ( ) ; begin
60743: LD_INT 0
60745: PPUSH
// uc_side := 0 ;
60746: LD_ADDR_OWVAR 20
60750: PUSH
60751: LD_INT 0
60753: ST_TO_ADDR
// uc_nation := 0 ;
60754: LD_ADDR_OWVAR 21
60758: PUSH
60759: LD_INT 0
60761: ST_TO_ADDR
// hc_class := class_phororhacos ;
60762: LD_ADDR_OWVAR 28
60766: PUSH
60767: LD_INT 18
60769: ST_TO_ADDR
// hc_gallery :=  ;
60770: LD_ADDR_OWVAR 33
60774: PUSH
60775: LD_STRING 
60777: ST_TO_ADDR
// end ;
60778: LD_VAR 0 1
60782: RET
// export function PrepareHorse ( ) ; begin
60783: LD_INT 0
60785: PPUSH
// uc_side := 0 ;
60786: LD_ADDR_OWVAR 20
60790: PUSH
60791: LD_INT 0
60793: ST_TO_ADDR
// uc_nation := 0 ;
60794: LD_ADDR_OWVAR 21
60798: PUSH
60799: LD_INT 0
60801: ST_TO_ADDR
// hc_class := class_horse ;
60802: LD_ADDR_OWVAR 28
60806: PUSH
60807: LD_INT 21
60809: ST_TO_ADDR
// hc_gallery :=  ;
60810: LD_ADDR_OWVAR 33
60814: PUSH
60815: LD_STRING 
60817: ST_TO_ADDR
// end ;
60818: LD_VAR 0 1
60822: RET
// export function PrepareMastodont ( ) ; begin
60823: LD_INT 0
60825: PPUSH
// uc_side := 0 ;
60826: LD_ADDR_OWVAR 20
60830: PUSH
60831: LD_INT 0
60833: ST_TO_ADDR
// uc_nation := 0 ;
60834: LD_ADDR_OWVAR 21
60838: PUSH
60839: LD_INT 0
60841: ST_TO_ADDR
// vc_chassis := class_mastodont ;
60842: LD_ADDR_OWVAR 37
60846: PUSH
60847: LD_INT 31
60849: ST_TO_ADDR
// vc_control := control_rider ;
60850: LD_ADDR_OWVAR 38
60854: PUSH
60855: LD_INT 4
60857: ST_TO_ADDR
// end ;
60858: LD_VAR 0 1
60862: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60863: LD_INT 0
60865: PPUSH
60866: PPUSH
60867: PPUSH
// uc_side = 0 ;
60868: LD_ADDR_OWVAR 20
60872: PUSH
60873: LD_INT 0
60875: ST_TO_ADDR
// uc_nation = 0 ;
60876: LD_ADDR_OWVAR 21
60880: PUSH
60881: LD_INT 0
60883: ST_TO_ADDR
// InitHc_All ( ) ;
60884: CALL_OW 584
// InitVc ;
60888: CALL_OW 20
// if mastodonts then
60892: LD_VAR 0 6
60896: IFFALSE 60963
// for i = 1 to mastodonts do
60898: LD_ADDR_VAR 0 11
60902: PUSH
60903: DOUBLE
60904: LD_INT 1
60906: DEC
60907: ST_TO_ADDR
60908: LD_VAR 0 6
60912: PUSH
60913: FOR_TO
60914: IFFALSE 60961
// begin vc_chassis := 31 ;
60916: LD_ADDR_OWVAR 37
60920: PUSH
60921: LD_INT 31
60923: ST_TO_ADDR
// vc_control := control_rider ;
60924: LD_ADDR_OWVAR 38
60928: PUSH
60929: LD_INT 4
60931: ST_TO_ADDR
// animal := CreateVehicle ;
60932: LD_ADDR_VAR 0 12
60936: PUSH
60937: CALL_OW 45
60941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60942: LD_VAR 0 12
60946: PPUSH
60947: LD_VAR 0 8
60951: PPUSH
60952: LD_INT 0
60954: PPUSH
60955: CALL 63098 0 3
// end ;
60959: GO 60913
60961: POP
60962: POP
// if horses then
60963: LD_VAR 0 5
60967: IFFALSE 61034
// for i = 1 to horses do
60969: LD_ADDR_VAR 0 11
60973: PUSH
60974: DOUBLE
60975: LD_INT 1
60977: DEC
60978: ST_TO_ADDR
60979: LD_VAR 0 5
60983: PUSH
60984: FOR_TO
60985: IFFALSE 61032
// begin hc_class := 21 ;
60987: LD_ADDR_OWVAR 28
60991: PUSH
60992: LD_INT 21
60994: ST_TO_ADDR
// hc_gallery :=  ;
60995: LD_ADDR_OWVAR 33
60999: PUSH
61000: LD_STRING 
61002: ST_TO_ADDR
// animal := CreateHuman ;
61003: LD_ADDR_VAR 0 12
61007: PUSH
61008: CALL_OW 44
61012: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61013: LD_VAR 0 12
61017: PPUSH
61018: LD_VAR 0 8
61022: PPUSH
61023: LD_INT 0
61025: PPUSH
61026: CALL 63098 0 3
// end ;
61030: GO 60984
61032: POP
61033: POP
// if birds then
61034: LD_VAR 0 1
61038: IFFALSE 61105
// for i = 1 to birds do
61040: LD_ADDR_VAR 0 11
61044: PUSH
61045: DOUBLE
61046: LD_INT 1
61048: DEC
61049: ST_TO_ADDR
61050: LD_VAR 0 1
61054: PUSH
61055: FOR_TO
61056: IFFALSE 61103
// begin hc_class = 18 ;
61058: LD_ADDR_OWVAR 28
61062: PUSH
61063: LD_INT 18
61065: ST_TO_ADDR
// hc_gallery =  ;
61066: LD_ADDR_OWVAR 33
61070: PUSH
61071: LD_STRING 
61073: ST_TO_ADDR
// animal := CreateHuman ;
61074: LD_ADDR_VAR 0 12
61078: PUSH
61079: CALL_OW 44
61083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61084: LD_VAR 0 12
61088: PPUSH
61089: LD_VAR 0 8
61093: PPUSH
61094: LD_INT 0
61096: PPUSH
61097: CALL 63098 0 3
// end ;
61101: GO 61055
61103: POP
61104: POP
// if tigers then
61105: LD_VAR 0 2
61109: IFFALSE 61193
// for i = 1 to tigers do
61111: LD_ADDR_VAR 0 11
61115: PUSH
61116: DOUBLE
61117: LD_INT 1
61119: DEC
61120: ST_TO_ADDR
61121: LD_VAR 0 2
61125: PUSH
61126: FOR_TO
61127: IFFALSE 61191
// begin hc_class = class_tiger ;
61129: LD_ADDR_OWVAR 28
61133: PUSH
61134: LD_INT 14
61136: ST_TO_ADDR
// hc_gallery =  ;
61137: LD_ADDR_OWVAR 33
61141: PUSH
61142: LD_STRING 
61144: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61145: LD_ADDR_OWVAR 35
61149: PUSH
61150: LD_INT 7
61152: NEG
61153: PPUSH
61154: LD_INT 7
61156: PPUSH
61157: CALL_OW 12
61161: ST_TO_ADDR
// animal := CreateHuman ;
61162: LD_ADDR_VAR 0 12
61166: PUSH
61167: CALL_OW 44
61171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61172: LD_VAR 0 12
61176: PPUSH
61177: LD_VAR 0 8
61181: PPUSH
61182: LD_INT 0
61184: PPUSH
61185: CALL 63098 0 3
// end ;
61189: GO 61126
61191: POP
61192: POP
// if apemans then
61193: LD_VAR 0 3
61197: IFFALSE 61320
// for i = 1 to apemans do
61199: LD_ADDR_VAR 0 11
61203: PUSH
61204: DOUBLE
61205: LD_INT 1
61207: DEC
61208: ST_TO_ADDR
61209: LD_VAR 0 3
61213: PUSH
61214: FOR_TO
61215: IFFALSE 61318
// begin hc_class = class_apeman ;
61217: LD_ADDR_OWVAR 28
61221: PUSH
61222: LD_INT 12
61224: ST_TO_ADDR
// hc_gallery =  ;
61225: LD_ADDR_OWVAR 33
61229: PUSH
61230: LD_STRING 
61232: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61233: LD_ADDR_OWVAR 35
61237: PUSH
61238: LD_INT 2
61240: NEG
61241: PPUSH
61242: LD_INT 2
61244: PPUSH
61245: CALL_OW 12
61249: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61250: LD_ADDR_OWVAR 31
61254: PUSH
61255: LD_INT 1
61257: PPUSH
61258: LD_INT 3
61260: PPUSH
61261: CALL_OW 12
61265: PUSH
61266: LD_INT 1
61268: PPUSH
61269: LD_INT 3
61271: PPUSH
61272: CALL_OW 12
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// animal := CreateHuman ;
61289: LD_ADDR_VAR 0 12
61293: PUSH
61294: CALL_OW 44
61298: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61299: LD_VAR 0 12
61303: PPUSH
61304: LD_VAR 0 8
61308: PPUSH
61309: LD_INT 0
61311: PPUSH
61312: CALL 63098 0 3
// end ;
61316: GO 61214
61318: POP
61319: POP
// if enchidnas then
61320: LD_VAR 0 4
61324: IFFALSE 61391
// for i = 1 to enchidnas do
61326: LD_ADDR_VAR 0 11
61330: PUSH
61331: DOUBLE
61332: LD_INT 1
61334: DEC
61335: ST_TO_ADDR
61336: LD_VAR 0 4
61340: PUSH
61341: FOR_TO
61342: IFFALSE 61389
// begin hc_class = 13 ;
61344: LD_ADDR_OWVAR 28
61348: PUSH
61349: LD_INT 13
61351: ST_TO_ADDR
// hc_gallery =  ;
61352: LD_ADDR_OWVAR 33
61356: PUSH
61357: LD_STRING 
61359: ST_TO_ADDR
// animal := CreateHuman ;
61360: LD_ADDR_VAR 0 12
61364: PUSH
61365: CALL_OW 44
61369: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61370: LD_VAR 0 12
61374: PPUSH
61375: LD_VAR 0 8
61379: PPUSH
61380: LD_INT 0
61382: PPUSH
61383: CALL 63098 0 3
// end ;
61387: GO 61341
61389: POP
61390: POP
// if fishes then
61391: LD_VAR 0 7
61395: IFFALSE 61462
// for i = 1 to fishes do
61397: LD_ADDR_VAR 0 11
61401: PUSH
61402: DOUBLE
61403: LD_INT 1
61405: DEC
61406: ST_TO_ADDR
61407: LD_VAR 0 7
61411: PUSH
61412: FOR_TO
61413: IFFALSE 61460
// begin hc_class = 20 ;
61415: LD_ADDR_OWVAR 28
61419: PUSH
61420: LD_INT 20
61422: ST_TO_ADDR
// hc_gallery =  ;
61423: LD_ADDR_OWVAR 33
61427: PUSH
61428: LD_STRING 
61430: ST_TO_ADDR
// animal := CreateHuman ;
61431: LD_ADDR_VAR 0 12
61435: PUSH
61436: CALL_OW 44
61440: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61441: LD_VAR 0 12
61445: PPUSH
61446: LD_VAR 0 9
61450: PPUSH
61451: LD_INT 0
61453: PPUSH
61454: CALL 63098 0 3
// end ;
61458: GO 61412
61460: POP
61461: POP
// end ;
61462: LD_VAR 0 10
61466: RET
// export function WantHeal ( sci , unit ) ; begin
61467: LD_INT 0
61469: PPUSH
// if GetTaskList ( sci ) > 0 then
61470: LD_VAR 0 1
61474: PPUSH
61475: CALL_OW 437
61479: PUSH
61480: LD_INT 0
61482: GREATER
61483: IFFALSE 61553
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61485: LD_VAR 0 1
61489: PPUSH
61490: CALL_OW 437
61494: PUSH
61495: LD_INT 1
61497: ARRAY
61498: PUSH
61499: LD_INT 1
61501: ARRAY
61502: PUSH
61503: LD_STRING l
61505: EQUAL
61506: PUSH
61507: LD_VAR 0 1
61511: PPUSH
61512: CALL_OW 437
61516: PUSH
61517: LD_INT 1
61519: ARRAY
61520: PUSH
61521: LD_INT 4
61523: ARRAY
61524: PUSH
61525: LD_VAR 0 2
61529: EQUAL
61530: AND
61531: IFFALSE 61543
// result := true else
61533: LD_ADDR_VAR 0 3
61537: PUSH
61538: LD_INT 1
61540: ST_TO_ADDR
61541: GO 61551
// result := false ;
61543: LD_ADDR_VAR 0 3
61547: PUSH
61548: LD_INT 0
61550: ST_TO_ADDR
// end else
61551: GO 61561
// result := false ;
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: LD_INT 0
61560: ST_TO_ADDR
// end ;
61561: LD_VAR 0 3
61565: RET
// export function HealTarget ( sci ) ; begin
61566: LD_INT 0
61568: PPUSH
// if not sci then
61569: LD_VAR 0 1
61573: NOT
61574: IFFALSE 61578
// exit ;
61576: GO 61643
// result := 0 ;
61578: LD_ADDR_VAR 0 2
61582: PUSH
61583: LD_INT 0
61585: ST_TO_ADDR
// if GetTaskList ( sci ) then
61586: LD_VAR 0 1
61590: PPUSH
61591: CALL_OW 437
61595: IFFALSE 61643
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61597: LD_VAR 0 1
61601: PPUSH
61602: CALL_OW 437
61606: PUSH
61607: LD_INT 1
61609: ARRAY
61610: PUSH
61611: LD_INT 1
61613: ARRAY
61614: PUSH
61615: LD_STRING l
61617: EQUAL
61618: IFFALSE 61643
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61620: LD_ADDR_VAR 0 2
61624: PUSH
61625: LD_VAR 0 1
61629: PPUSH
61630: CALL_OW 437
61634: PUSH
61635: LD_INT 1
61637: ARRAY
61638: PUSH
61639: LD_INT 4
61641: ARRAY
61642: ST_TO_ADDR
// end ;
61643: LD_VAR 0 2
61647: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61648: LD_INT 0
61650: PPUSH
61651: PPUSH
61652: PPUSH
61653: PPUSH
// if not base_units then
61654: LD_VAR 0 1
61658: NOT
61659: IFFALSE 61663
// exit ;
61661: GO 61750
// result := false ;
61663: LD_ADDR_VAR 0 2
61667: PUSH
61668: LD_INT 0
61670: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61671: LD_ADDR_VAR 0 5
61675: PUSH
61676: LD_VAR 0 1
61680: PPUSH
61681: LD_INT 21
61683: PUSH
61684: LD_INT 3
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PPUSH
61691: CALL_OW 72
61695: ST_TO_ADDR
// if not tmp then
61696: LD_VAR 0 5
61700: NOT
61701: IFFALSE 61705
// exit ;
61703: GO 61750
// for i in tmp do
61705: LD_ADDR_VAR 0 3
61709: PUSH
61710: LD_VAR 0 5
61714: PUSH
61715: FOR_IN
61716: IFFALSE 61748
// begin result := EnemyInRange ( i , 22 ) ;
61718: LD_ADDR_VAR 0 2
61722: PUSH
61723: LD_VAR 0 3
61727: PPUSH
61728: LD_INT 22
61730: PPUSH
61731: CALL 59363 0 2
61735: ST_TO_ADDR
// if result then
61736: LD_VAR 0 2
61740: IFFALSE 61746
// exit ;
61742: POP
61743: POP
61744: GO 61750
// end ;
61746: GO 61715
61748: POP
61749: POP
// end ;
61750: LD_VAR 0 2
61754: RET
// export function FilterByTag ( units , tag ) ; begin
61755: LD_INT 0
61757: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
61758: LD_ADDR_VAR 0 3
61762: PUSH
61763: LD_VAR 0 1
61767: PPUSH
61768: LD_INT 120
61770: PUSH
61771: LD_VAR 0 2
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PPUSH
61780: CALL_OW 72
61784: ST_TO_ADDR
// end ;
61785: LD_VAR 0 3
61789: RET
// export function IsDriver ( un ) ; begin
61790: LD_INT 0
61792: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61793: LD_ADDR_VAR 0 2
61797: PUSH
61798: LD_VAR 0 1
61802: PUSH
61803: LD_INT 55
61805: PUSH
61806: EMPTY
61807: LIST
61808: PPUSH
61809: CALL_OW 69
61813: IN
61814: ST_TO_ADDR
// end ;
61815: LD_VAR 0 2
61819: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61820: LD_INT 0
61822: PPUSH
61823: PPUSH
// list := [ ] ;
61824: LD_ADDR_VAR 0 5
61828: PUSH
61829: EMPTY
61830: ST_TO_ADDR
// case d of 0 :
61831: LD_VAR 0 3
61835: PUSH
61836: LD_INT 0
61838: DOUBLE
61839: EQUAL
61840: IFTRUE 61844
61842: GO 61977
61844: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61845: LD_ADDR_VAR 0 5
61849: PUSH
61850: LD_VAR 0 1
61854: PUSH
61855: LD_INT 4
61857: MINUS
61858: PUSH
61859: LD_VAR 0 2
61863: PUSH
61864: LD_INT 4
61866: MINUS
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: LIST
61875: PUSH
61876: LD_VAR 0 1
61880: PUSH
61881: LD_INT 3
61883: MINUS
61884: PUSH
61885: LD_VAR 0 2
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: LIST
61897: PUSH
61898: LD_VAR 0 1
61902: PUSH
61903: LD_INT 4
61905: PLUS
61906: PUSH
61907: LD_VAR 0 2
61911: PUSH
61912: LD_INT 4
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: LIST
61919: PUSH
61920: LD_VAR 0 1
61924: PUSH
61925: LD_INT 3
61927: PLUS
61928: PUSH
61929: LD_VAR 0 2
61933: PUSH
61934: LD_INT 3
61936: PLUS
61937: PUSH
61938: LD_INT 5
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: LIST
61945: PUSH
61946: LD_VAR 0 1
61950: PUSH
61951: LD_VAR 0 2
61955: PUSH
61956: LD_INT 4
61958: PLUS
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: ST_TO_ADDR
// end ; 1 :
61975: GO 62675
61977: LD_INT 1
61979: DOUBLE
61980: EQUAL
61981: IFTRUE 61985
61983: GO 62118
61985: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61986: LD_ADDR_VAR 0 5
61990: PUSH
61991: LD_VAR 0 1
61995: PUSH
61996: LD_VAR 0 2
62000: PUSH
62001: LD_INT 4
62003: MINUS
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: LIST
62012: PUSH
62013: LD_VAR 0 1
62017: PUSH
62018: LD_INT 3
62020: MINUS
62021: PUSH
62022: LD_VAR 0 2
62026: PUSH
62027: LD_INT 3
62029: MINUS
62030: PUSH
62031: LD_INT 2
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: LIST
62038: PUSH
62039: LD_VAR 0 1
62043: PUSH
62044: LD_INT 4
62046: MINUS
62047: PUSH
62048: LD_VAR 0 2
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: LIST
62060: PUSH
62061: LD_VAR 0 1
62065: PUSH
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 3
62073: PLUS
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: LD_VAR 0 1
62087: PUSH
62088: LD_INT 4
62090: PLUS
62091: PUSH
62092: LD_VAR 0 2
62096: PUSH
62097: LD_INT 4
62099: PLUS
62100: PUSH
62101: LD_INT 5
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: LIST
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: ST_TO_ADDR
// end ; 2 :
62116: GO 62675
62118: LD_INT 2
62120: DOUBLE
62121: EQUAL
62122: IFTRUE 62126
62124: GO 62255
62126: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62127: LD_ADDR_VAR 0 5
62131: PUSH
62132: LD_VAR 0 1
62136: PUSH
62137: LD_VAR 0 2
62141: PUSH
62142: LD_INT 3
62144: MINUS
62145: PUSH
62146: LD_INT 3
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: LIST
62153: PUSH
62154: LD_VAR 0 1
62158: PUSH
62159: LD_INT 4
62161: PLUS
62162: PUSH
62163: LD_VAR 0 2
62167: PUSH
62168: LD_INT 4
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: PUSH
62176: LD_VAR 0 1
62180: PUSH
62181: LD_VAR 0 2
62185: PUSH
62186: LD_INT 4
62188: PLUS
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_VAR 0 1
62202: PUSH
62203: LD_INT 3
62205: MINUS
62206: PUSH
62207: LD_VAR 0 2
62211: PUSH
62212: LD_INT 1
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: PUSH
62220: LD_VAR 0 1
62224: PUSH
62225: LD_INT 4
62227: MINUS
62228: PUSH
62229: LD_VAR 0 2
62233: PUSH
62234: LD_INT 4
62236: MINUS
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: LIST
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: ST_TO_ADDR
// end ; 3 :
62253: GO 62675
62255: LD_INT 3
62257: DOUBLE
62258: EQUAL
62259: IFTRUE 62263
62261: GO 62396
62263: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62264: LD_ADDR_VAR 0 5
62268: PUSH
62269: LD_VAR 0 1
62273: PUSH
62274: LD_INT 3
62276: PLUS
62277: PUSH
62278: LD_VAR 0 2
62282: PUSH
62283: LD_INT 4
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: LIST
62290: PUSH
62291: LD_VAR 0 1
62295: PUSH
62296: LD_INT 4
62298: PLUS
62299: PUSH
62300: LD_VAR 0 2
62304: PUSH
62305: LD_INT 4
62307: PLUS
62308: PUSH
62309: LD_INT 5
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: LIST
62316: PUSH
62317: LD_VAR 0 1
62321: PUSH
62322: LD_INT 4
62324: MINUS
62325: PUSH
62326: LD_VAR 0 2
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: PUSH
62339: LD_VAR 0 1
62343: PUSH
62344: LD_VAR 0 2
62348: PUSH
62349: LD_INT 4
62351: MINUS
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: LIST
62360: PUSH
62361: LD_VAR 0 1
62365: PUSH
62366: LD_INT 3
62368: MINUS
62369: PUSH
62370: LD_VAR 0 2
62374: PUSH
62375: LD_INT 3
62377: MINUS
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: ST_TO_ADDR
// end ; 4 :
62394: GO 62675
62396: LD_INT 4
62398: DOUBLE
62399: EQUAL
62400: IFTRUE 62404
62402: GO 62537
62404: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62405: LD_ADDR_VAR 0 5
62409: PUSH
62410: LD_VAR 0 1
62414: PUSH
62415: LD_VAR 0 2
62419: PUSH
62420: LD_INT 4
62422: PLUS
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: LIST
62431: PUSH
62432: LD_VAR 0 1
62436: PUSH
62437: LD_INT 3
62439: PLUS
62440: PUSH
62441: LD_VAR 0 2
62445: PUSH
62446: LD_INT 3
62448: PLUS
62449: PUSH
62450: LD_INT 5
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: LIST
62457: PUSH
62458: LD_VAR 0 1
62462: PUSH
62463: LD_INT 4
62465: PLUS
62466: PUSH
62467: LD_VAR 0 2
62471: PUSH
62472: LD_INT 4
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: LIST
62479: PUSH
62480: LD_VAR 0 1
62484: PUSH
62485: LD_VAR 0 2
62489: PUSH
62490: LD_INT 3
62492: MINUS
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: LIST
62501: PUSH
62502: LD_VAR 0 1
62506: PUSH
62507: LD_INT 4
62509: MINUS
62510: PUSH
62511: LD_VAR 0 2
62515: PUSH
62516: LD_INT 4
62518: MINUS
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: LIST
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: ST_TO_ADDR
// end ; 5 :
62535: GO 62675
62537: LD_INT 5
62539: DOUBLE
62540: EQUAL
62541: IFTRUE 62545
62543: GO 62674
62545: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62546: LD_ADDR_VAR 0 5
62550: PUSH
62551: LD_VAR 0 1
62555: PUSH
62556: LD_INT 4
62558: MINUS
62559: PUSH
62560: LD_VAR 0 2
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: LIST
62572: PUSH
62573: LD_VAR 0 1
62577: PUSH
62578: LD_VAR 0 2
62582: PUSH
62583: LD_INT 4
62585: MINUS
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: LIST
62594: PUSH
62595: LD_VAR 0 1
62599: PUSH
62600: LD_INT 4
62602: PLUS
62603: PUSH
62604: LD_VAR 0 2
62608: PUSH
62609: LD_INT 4
62611: PLUS
62612: PUSH
62613: LD_INT 5
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: LIST
62620: PUSH
62621: LD_VAR 0 1
62625: PUSH
62626: LD_INT 3
62628: PLUS
62629: PUSH
62630: LD_VAR 0 2
62634: PUSH
62635: LD_INT 4
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: LIST
62642: PUSH
62643: LD_VAR 0 1
62647: PUSH
62648: LD_VAR 0 2
62652: PUSH
62653: LD_INT 3
62655: PLUS
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: LIST
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// end ; end ;
62672: GO 62675
62674: POP
// result := list ;
62675: LD_ADDR_VAR 0 4
62679: PUSH
62680: LD_VAR 0 5
62684: ST_TO_ADDR
// end ;
62685: LD_VAR 0 4
62689: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62690: LD_INT 0
62692: PPUSH
62693: PPUSH
62694: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62695: LD_VAR 0 1
62699: NOT
62700: PUSH
62701: LD_VAR 0 2
62705: PUSH
62706: LD_INT 1
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: LD_INT 3
62714: PUSH
62715: LD_INT 4
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: IN
62724: NOT
62725: OR
62726: IFFALSE 62730
// exit ;
62728: GO 62822
// tmp := [ ] ;
62730: LD_ADDR_VAR 0 5
62734: PUSH
62735: EMPTY
62736: ST_TO_ADDR
// for i in units do
62737: LD_ADDR_VAR 0 4
62741: PUSH
62742: LD_VAR 0 1
62746: PUSH
62747: FOR_IN
62748: IFFALSE 62791
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62750: LD_ADDR_VAR 0 5
62754: PUSH
62755: LD_VAR 0 5
62759: PPUSH
62760: LD_VAR 0 5
62764: PUSH
62765: LD_INT 1
62767: PLUS
62768: PPUSH
62769: LD_VAR 0 4
62773: PPUSH
62774: LD_VAR 0 2
62778: PPUSH
62779: CALL_OW 259
62783: PPUSH
62784: CALL_OW 2
62788: ST_TO_ADDR
62789: GO 62747
62791: POP
62792: POP
// if not tmp then
62793: LD_VAR 0 5
62797: NOT
62798: IFFALSE 62802
// exit ;
62800: GO 62822
// result := SortListByListDesc ( units , tmp ) ;
62802: LD_ADDR_VAR 0 3
62806: PUSH
62807: LD_VAR 0 1
62811: PPUSH
62812: LD_VAR 0 5
62816: PPUSH
62817: CALL_OW 77
62821: ST_TO_ADDR
// end ;
62822: LD_VAR 0 3
62826: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62827: LD_INT 0
62829: PPUSH
62830: PPUSH
62831: PPUSH
// result := false ;
62832: LD_ADDR_VAR 0 3
62836: PUSH
62837: LD_INT 0
62839: ST_TO_ADDR
// x := GetX ( building ) ;
62840: LD_ADDR_VAR 0 4
62844: PUSH
62845: LD_VAR 0 2
62849: PPUSH
62850: CALL_OW 250
62854: ST_TO_ADDR
// y := GetY ( building ) ;
62855: LD_ADDR_VAR 0 5
62859: PUSH
62860: LD_VAR 0 2
62864: PPUSH
62865: CALL_OW 251
62869: ST_TO_ADDR
// if not building or not x or not y then
62870: LD_VAR 0 2
62874: NOT
62875: PUSH
62876: LD_VAR 0 4
62880: NOT
62881: OR
62882: PUSH
62883: LD_VAR 0 5
62887: NOT
62888: OR
62889: IFFALSE 62893
// exit ;
62891: GO 62985
// if GetTaskList ( unit ) then
62893: LD_VAR 0 1
62897: PPUSH
62898: CALL_OW 437
62902: IFFALSE 62985
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62904: LD_STRING e
62906: PUSH
62907: LD_VAR 0 1
62911: PPUSH
62912: CALL_OW 437
62916: PUSH
62917: LD_INT 1
62919: ARRAY
62920: PUSH
62921: LD_INT 1
62923: ARRAY
62924: EQUAL
62925: PUSH
62926: LD_VAR 0 4
62930: PUSH
62931: LD_VAR 0 1
62935: PPUSH
62936: CALL_OW 437
62940: PUSH
62941: LD_INT 1
62943: ARRAY
62944: PUSH
62945: LD_INT 2
62947: ARRAY
62948: EQUAL
62949: AND
62950: PUSH
62951: LD_VAR 0 5
62955: PUSH
62956: LD_VAR 0 1
62960: PPUSH
62961: CALL_OW 437
62965: PUSH
62966: LD_INT 1
62968: ARRAY
62969: PUSH
62970: LD_INT 3
62972: ARRAY
62973: EQUAL
62974: AND
62975: IFFALSE 62985
// result := true end ;
62977: LD_ADDR_VAR 0 3
62981: PUSH
62982: LD_INT 1
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 3
62989: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62990: LD_INT 0
62992: PPUSH
// result := false ;
62993: LD_ADDR_VAR 0 4
62997: PUSH
62998: LD_INT 0
63000: ST_TO_ADDR
// if GetTaskList ( unit ) then
63001: LD_VAR 0 1
63005: PPUSH
63006: CALL_OW 437
63010: IFFALSE 63093
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63012: LD_STRING M
63014: PUSH
63015: LD_VAR 0 1
63019: PPUSH
63020: CALL_OW 437
63024: PUSH
63025: LD_INT 1
63027: ARRAY
63028: PUSH
63029: LD_INT 1
63031: ARRAY
63032: EQUAL
63033: PUSH
63034: LD_VAR 0 2
63038: PUSH
63039: LD_VAR 0 1
63043: PPUSH
63044: CALL_OW 437
63048: PUSH
63049: LD_INT 1
63051: ARRAY
63052: PUSH
63053: LD_INT 2
63055: ARRAY
63056: EQUAL
63057: AND
63058: PUSH
63059: LD_VAR 0 3
63063: PUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: CALL_OW 437
63073: PUSH
63074: LD_INT 1
63076: ARRAY
63077: PUSH
63078: LD_INT 3
63080: ARRAY
63081: EQUAL
63082: AND
63083: IFFALSE 63093
// result := true ;
63085: LD_ADDR_VAR 0 4
63089: PUSH
63090: LD_INT 1
63092: ST_TO_ADDR
// end ; end ;
63093: LD_VAR 0 4
63097: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63098: LD_INT 0
63100: PPUSH
63101: PPUSH
63102: PPUSH
63103: PPUSH
// if not unit or not area then
63104: LD_VAR 0 1
63108: NOT
63109: PUSH
63110: LD_VAR 0 2
63114: NOT
63115: OR
63116: IFFALSE 63120
// exit ;
63118: GO 63284
// tmp := AreaToList ( area , i ) ;
63120: LD_ADDR_VAR 0 6
63124: PUSH
63125: LD_VAR 0 2
63129: PPUSH
63130: LD_VAR 0 5
63134: PPUSH
63135: CALL_OW 517
63139: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63140: LD_ADDR_VAR 0 5
63144: PUSH
63145: DOUBLE
63146: LD_INT 1
63148: DEC
63149: ST_TO_ADDR
63150: LD_VAR 0 6
63154: PUSH
63155: LD_INT 1
63157: ARRAY
63158: PUSH
63159: FOR_TO
63160: IFFALSE 63282
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63162: LD_ADDR_VAR 0 7
63166: PUSH
63167: LD_VAR 0 6
63171: PUSH
63172: LD_INT 1
63174: ARRAY
63175: PUSH
63176: LD_VAR 0 5
63180: ARRAY
63181: PUSH
63182: LD_VAR 0 6
63186: PUSH
63187: LD_INT 2
63189: ARRAY
63190: PUSH
63191: LD_VAR 0 5
63195: ARRAY
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63201: LD_VAR 0 7
63205: PUSH
63206: LD_INT 1
63208: ARRAY
63209: PPUSH
63210: LD_VAR 0 7
63214: PUSH
63215: LD_INT 2
63217: ARRAY
63218: PPUSH
63219: CALL_OW 428
63223: PUSH
63224: LD_INT 0
63226: EQUAL
63227: IFFALSE 63280
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63229: LD_VAR 0 1
63233: PPUSH
63234: LD_VAR 0 7
63238: PUSH
63239: LD_INT 1
63241: ARRAY
63242: PPUSH
63243: LD_VAR 0 7
63247: PUSH
63248: LD_INT 2
63250: ARRAY
63251: PPUSH
63252: LD_VAR 0 3
63256: PPUSH
63257: CALL_OW 48
// result := IsPlaced ( unit ) ;
63261: LD_ADDR_VAR 0 4
63265: PUSH
63266: LD_VAR 0 1
63270: PPUSH
63271: CALL_OW 305
63275: ST_TO_ADDR
// exit ;
63276: POP
63277: POP
63278: GO 63284
// end ; end ;
63280: GO 63159
63282: POP
63283: POP
// end ;
63284: LD_VAR 0 4
63288: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63289: LD_INT 0
63291: PPUSH
63292: PPUSH
63293: PPUSH
// if not side or side > 8 then
63294: LD_VAR 0 1
63298: NOT
63299: PUSH
63300: LD_VAR 0 1
63304: PUSH
63305: LD_INT 8
63307: GREATER
63308: OR
63309: IFFALSE 63313
// exit ;
63311: GO 63500
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63313: LD_ADDR_VAR 0 4
63317: PUSH
63318: LD_INT 22
63320: PUSH
63321: LD_VAR 0 1
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 21
63332: PUSH
63333: LD_INT 3
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PPUSH
63344: CALL_OW 69
63348: ST_TO_ADDR
// if not tmp then
63349: LD_VAR 0 4
63353: NOT
63354: IFFALSE 63358
// exit ;
63356: GO 63500
// enable_addtolog := true ;
63358: LD_ADDR_OWVAR 81
63362: PUSH
63363: LD_INT 1
63365: ST_TO_ADDR
// AddToLog ( [ ) ;
63366: LD_STRING [
63368: PPUSH
63369: CALL_OW 561
// for i in tmp do
63373: LD_ADDR_VAR 0 3
63377: PUSH
63378: LD_VAR 0 4
63382: PUSH
63383: FOR_IN
63384: IFFALSE 63491
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63386: LD_STRING [
63388: PUSH
63389: LD_VAR 0 3
63393: PPUSH
63394: CALL_OW 266
63398: STR
63399: PUSH
63400: LD_STRING , 
63402: STR
63403: PUSH
63404: LD_VAR 0 3
63408: PPUSH
63409: CALL_OW 250
63413: STR
63414: PUSH
63415: LD_STRING , 
63417: STR
63418: PUSH
63419: LD_VAR 0 3
63423: PPUSH
63424: CALL_OW 251
63428: STR
63429: PUSH
63430: LD_STRING , 
63432: STR
63433: PUSH
63434: LD_VAR 0 3
63438: PPUSH
63439: CALL_OW 254
63443: STR
63444: PUSH
63445: LD_STRING , 
63447: STR
63448: PUSH
63449: LD_VAR 0 3
63453: PPUSH
63454: LD_INT 1
63456: PPUSH
63457: CALL_OW 268
63461: STR
63462: PUSH
63463: LD_STRING , 
63465: STR
63466: PUSH
63467: LD_VAR 0 3
63471: PPUSH
63472: LD_INT 2
63474: PPUSH
63475: CALL_OW 268
63479: STR
63480: PUSH
63481: LD_STRING ],
63483: STR
63484: PPUSH
63485: CALL_OW 561
// end ;
63489: GO 63383
63491: POP
63492: POP
// AddToLog ( ]; ) ;
63493: LD_STRING ];
63495: PPUSH
63496: CALL_OW 561
// end ;
63500: LD_VAR 0 2
63504: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63505: LD_INT 0
63507: PPUSH
63508: PPUSH
63509: PPUSH
63510: PPUSH
63511: PPUSH
// if not area or not rate or not max then
63512: LD_VAR 0 1
63516: NOT
63517: PUSH
63518: LD_VAR 0 2
63522: NOT
63523: OR
63524: PUSH
63525: LD_VAR 0 4
63529: NOT
63530: OR
63531: IFFALSE 63535
// exit ;
63533: GO 63724
// while 1 do
63535: LD_INT 1
63537: IFFALSE 63724
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63539: LD_ADDR_VAR 0 9
63543: PUSH
63544: LD_VAR 0 1
63548: PPUSH
63549: LD_INT 1
63551: PPUSH
63552: CALL_OW 287
63556: PUSH
63557: LD_INT 10
63559: MUL
63560: ST_TO_ADDR
// r := rate / 10 ;
63561: LD_ADDR_VAR 0 7
63565: PUSH
63566: LD_VAR 0 2
63570: PUSH
63571: LD_INT 10
63573: DIVREAL
63574: ST_TO_ADDR
// time := 1 1$00 ;
63575: LD_ADDR_VAR 0 8
63579: PUSH
63580: LD_INT 2100
63582: ST_TO_ADDR
// if amount < min then
63583: LD_VAR 0 9
63587: PUSH
63588: LD_VAR 0 3
63592: LESS
63593: IFFALSE 63611
// r := r * 2 else
63595: LD_ADDR_VAR 0 7
63599: PUSH
63600: LD_VAR 0 7
63604: PUSH
63605: LD_INT 2
63607: MUL
63608: ST_TO_ADDR
63609: GO 63637
// if amount > max then
63611: LD_VAR 0 9
63615: PUSH
63616: LD_VAR 0 4
63620: GREATER
63621: IFFALSE 63637
// r := r / 2 ;
63623: LD_ADDR_VAR 0 7
63627: PUSH
63628: LD_VAR 0 7
63632: PUSH
63633: LD_INT 2
63635: DIVREAL
63636: ST_TO_ADDR
// time := time / r ;
63637: LD_ADDR_VAR 0 8
63641: PUSH
63642: LD_VAR 0 8
63646: PUSH
63647: LD_VAR 0 7
63651: DIVREAL
63652: ST_TO_ADDR
// if time < 0 then
63653: LD_VAR 0 8
63657: PUSH
63658: LD_INT 0
63660: LESS
63661: IFFALSE 63678
// time := time * - 1 ;
63663: LD_ADDR_VAR 0 8
63667: PUSH
63668: LD_VAR 0 8
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: MUL
63677: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
63678: LD_VAR 0 8
63682: PUSH
63683: LD_INT 35
63685: PPUSH
63686: LD_INT 875
63688: PPUSH
63689: CALL_OW 12
63693: PLUS
63694: PPUSH
63695: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63699: LD_INT 1
63701: PPUSH
63702: LD_INT 5
63704: PPUSH
63705: CALL_OW 12
63709: PPUSH
63710: LD_VAR 0 1
63714: PPUSH
63715: LD_INT 1
63717: PPUSH
63718: CALL_OW 55
// end ;
63722: GO 63535
// end ;
63724: LD_VAR 0 5
63728: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63729: LD_INT 0
63731: PPUSH
63732: PPUSH
63733: PPUSH
63734: PPUSH
63735: PPUSH
63736: PPUSH
63737: PPUSH
63738: PPUSH
// if not turrets or not factories then
63739: LD_VAR 0 1
63743: NOT
63744: PUSH
63745: LD_VAR 0 2
63749: NOT
63750: OR
63751: IFFALSE 63755
// exit ;
63753: GO 64062
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63755: LD_ADDR_VAR 0 10
63759: PUSH
63760: LD_INT 5
63762: PUSH
63763: LD_INT 6
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: LD_INT 4
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: LD_INT 5
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 24
63797: PUSH
63798: LD_INT 25
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 23
63807: PUSH
63808: LD_INT 27
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 42
63821: PUSH
63822: LD_INT 43
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 44
63831: PUSH
63832: LD_INT 46
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 45
63841: PUSH
63842: LD_INT 47
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: LIST
63858: ST_TO_ADDR
// result := [ ] ;
63859: LD_ADDR_VAR 0 3
63863: PUSH
63864: EMPTY
63865: ST_TO_ADDR
// for i in turrets do
63866: LD_ADDR_VAR 0 4
63870: PUSH
63871: LD_VAR 0 1
63875: PUSH
63876: FOR_IN
63877: IFFALSE 64060
// begin nat := GetNation ( i ) ;
63879: LD_ADDR_VAR 0 7
63883: PUSH
63884: LD_VAR 0 4
63888: PPUSH
63889: CALL_OW 248
63893: ST_TO_ADDR
// weapon := 0 ;
63894: LD_ADDR_VAR 0 8
63898: PUSH
63899: LD_INT 0
63901: ST_TO_ADDR
// if not nat then
63902: LD_VAR 0 7
63906: NOT
63907: IFFALSE 63911
// continue ;
63909: GO 63876
// for j in list [ nat ] do
63911: LD_ADDR_VAR 0 5
63915: PUSH
63916: LD_VAR 0 10
63920: PUSH
63921: LD_VAR 0 7
63925: ARRAY
63926: PUSH
63927: FOR_IN
63928: IFFALSE 63969
// if GetBWeapon ( i ) = j [ 1 ] then
63930: LD_VAR 0 4
63934: PPUSH
63935: CALL_OW 269
63939: PUSH
63940: LD_VAR 0 5
63944: PUSH
63945: LD_INT 1
63947: ARRAY
63948: EQUAL
63949: IFFALSE 63967
// begin weapon := j [ 2 ] ;
63951: LD_ADDR_VAR 0 8
63955: PUSH
63956: LD_VAR 0 5
63960: PUSH
63961: LD_INT 2
63963: ARRAY
63964: ST_TO_ADDR
// break ;
63965: GO 63969
// end ;
63967: GO 63927
63969: POP
63970: POP
// if not weapon then
63971: LD_VAR 0 8
63975: NOT
63976: IFFALSE 63980
// continue ;
63978: GO 63876
// for k in factories do
63980: LD_ADDR_VAR 0 6
63984: PUSH
63985: LD_VAR 0 2
63989: PUSH
63990: FOR_IN
63991: IFFALSE 64056
// begin weapons := AvailableWeaponList ( k ) ;
63993: LD_ADDR_VAR 0 9
63997: PUSH
63998: LD_VAR 0 6
64002: PPUSH
64003: CALL_OW 478
64007: ST_TO_ADDR
// if not weapons then
64008: LD_VAR 0 9
64012: NOT
64013: IFFALSE 64017
// continue ;
64015: GO 63990
// if weapon in weapons then
64017: LD_VAR 0 8
64021: PUSH
64022: LD_VAR 0 9
64026: IN
64027: IFFALSE 64054
// begin result := [ i , weapon ] ;
64029: LD_ADDR_VAR 0 3
64033: PUSH
64034: LD_VAR 0 4
64038: PUSH
64039: LD_VAR 0 8
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: ST_TO_ADDR
// exit ;
64048: POP
64049: POP
64050: POP
64051: POP
64052: GO 64062
// end ; end ;
64054: GO 63990
64056: POP
64057: POP
// end ;
64058: GO 63876
64060: POP
64061: POP
// end ;
64062: LD_VAR 0 3
64066: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64067: LD_INT 0
64069: PPUSH
// if not side or side > 8 then
64070: LD_VAR 0 3
64074: NOT
64075: PUSH
64076: LD_VAR 0 3
64080: PUSH
64081: LD_INT 8
64083: GREATER
64084: OR
64085: IFFALSE 64089
// exit ;
64087: GO 64148
// if not range then
64089: LD_VAR 0 4
64093: NOT
64094: IFFALSE 64105
// range := - 12 ;
64096: LD_ADDR_VAR 0 4
64100: PUSH
64101: LD_INT 12
64103: NEG
64104: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64105: LD_VAR 0 1
64109: PPUSH
64110: LD_VAR 0 2
64114: PPUSH
64115: LD_VAR 0 3
64119: PPUSH
64120: LD_VAR 0 4
64124: PPUSH
64125: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64129: LD_VAR 0 1
64133: PPUSH
64134: LD_VAR 0 2
64138: PPUSH
64139: LD_VAR 0 3
64143: PPUSH
64144: CALL_OW 331
// end ;
64148: LD_VAR 0 5
64152: RET
// export function Video ( mode ) ; begin
64153: LD_INT 0
64155: PPUSH
// ingame_video = mode ;
64156: LD_ADDR_OWVAR 52
64160: PUSH
64161: LD_VAR 0 1
64165: ST_TO_ADDR
// interface_hidden = mode ;
64166: LD_ADDR_OWVAR 54
64170: PUSH
64171: LD_VAR 0 1
64175: ST_TO_ADDR
// end ;
64176: LD_VAR 0 2
64180: RET
// export function Join ( array , element ) ; begin
64181: LD_INT 0
64183: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64184: LD_ADDR_VAR 0 3
64188: PUSH
64189: LD_VAR 0 1
64193: PPUSH
64194: LD_VAR 0 1
64198: PUSH
64199: LD_INT 1
64201: PLUS
64202: PPUSH
64203: LD_VAR 0 2
64207: PPUSH
64208: CALL_OW 1
64212: ST_TO_ADDR
// end ;
64213: LD_VAR 0 3
64217: RET
// export function JoinUnion ( array , element ) ; begin
64218: LD_INT 0
64220: PPUSH
// result := array union element ;
64221: LD_ADDR_VAR 0 3
64225: PUSH
64226: LD_VAR 0 1
64230: PUSH
64231: LD_VAR 0 2
64235: UNION
64236: ST_TO_ADDR
// end ;
64237: LD_VAR 0 3
64241: RET
// export function GetBehemoths ( side ) ; begin
64242: LD_INT 0
64244: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64245: LD_ADDR_VAR 0 2
64249: PUSH
64250: LD_INT 22
64252: PUSH
64253: LD_VAR 0 1
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 31
64264: PUSH
64265: LD_INT 25
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PPUSH
64276: CALL_OW 69
64280: ST_TO_ADDR
// end ;
64281: LD_VAR 0 2
64285: RET
// export function Shuffle ( array ) ; var i , index ; begin
64286: LD_INT 0
64288: PPUSH
64289: PPUSH
64290: PPUSH
// result := [ ] ;
64291: LD_ADDR_VAR 0 2
64295: PUSH
64296: EMPTY
64297: ST_TO_ADDR
// if not array then
64298: LD_VAR 0 1
64302: NOT
64303: IFFALSE 64307
// exit ;
64305: GO 64406
// Randomize ;
64307: CALL_OW 10
// for i = array downto 1 do
64311: LD_ADDR_VAR 0 3
64315: PUSH
64316: DOUBLE
64317: LD_VAR 0 1
64321: INC
64322: ST_TO_ADDR
64323: LD_INT 1
64325: PUSH
64326: FOR_DOWNTO
64327: IFFALSE 64404
// begin index := rand ( 1 , array ) ;
64329: LD_ADDR_VAR 0 4
64333: PUSH
64334: LD_INT 1
64336: PPUSH
64337: LD_VAR 0 1
64341: PPUSH
64342: CALL_OW 12
64346: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64347: LD_ADDR_VAR 0 2
64351: PUSH
64352: LD_VAR 0 2
64356: PPUSH
64357: LD_VAR 0 2
64361: PUSH
64362: LD_INT 1
64364: PLUS
64365: PPUSH
64366: LD_VAR 0 1
64370: PUSH
64371: LD_VAR 0 4
64375: ARRAY
64376: PPUSH
64377: CALL_OW 2
64381: ST_TO_ADDR
// array := Delete ( array , index ) ;
64382: LD_ADDR_VAR 0 1
64386: PUSH
64387: LD_VAR 0 1
64391: PPUSH
64392: LD_VAR 0 4
64396: PPUSH
64397: CALL_OW 3
64401: ST_TO_ADDR
// end ;
64402: GO 64326
64404: POP
64405: POP
// end ;
64406: LD_VAR 0 2
64410: RET
// export function GetBaseMaterials ( base ) ; begin
64411: LD_INT 0
64413: PPUSH
// result := [ 0 , 0 , 0 ] ;
64414: LD_ADDR_VAR 0 2
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// if not base then
64433: LD_VAR 0 1
64437: NOT
64438: IFFALSE 64442
// exit ;
64440: GO 64491
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64442: LD_ADDR_VAR 0 2
64446: PUSH
64447: LD_VAR 0 1
64451: PPUSH
64452: LD_INT 1
64454: PPUSH
64455: CALL_OW 275
64459: PUSH
64460: LD_VAR 0 1
64464: PPUSH
64465: LD_INT 2
64467: PPUSH
64468: CALL_OW 275
64472: PUSH
64473: LD_VAR 0 1
64477: PPUSH
64478: LD_INT 3
64480: PPUSH
64481: CALL_OW 275
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: LIST
64490: ST_TO_ADDR
// end ;
64491: LD_VAR 0 2
64495: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64496: LD_INT 0
64498: PPUSH
64499: PPUSH
// result := array ;
64500: LD_ADDR_VAR 0 3
64504: PUSH
64505: LD_VAR 0 1
64509: ST_TO_ADDR
// if size >= result then
64510: LD_VAR 0 2
64514: PUSH
64515: LD_VAR 0 3
64519: GREATEREQUAL
64520: IFFALSE 64524
// exit ;
64522: GO 64574
// if size then
64524: LD_VAR 0 2
64528: IFFALSE 64574
// for i := array downto size do
64530: LD_ADDR_VAR 0 4
64534: PUSH
64535: DOUBLE
64536: LD_VAR 0 1
64540: INC
64541: ST_TO_ADDR
64542: LD_VAR 0 2
64546: PUSH
64547: FOR_DOWNTO
64548: IFFALSE 64572
// result := Delete ( result , result ) ;
64550: LD_ADDR_VAR 0 3
64554: PUSH
64555: LD_VAR 0 3
64559: PPUSH
64560: LD_VAR 0 3
64564: PPUSH
64565: CALL_OW 3
64569: ST_TO_ADDR
64570: GO 64547
64572: POP
64573: POP
// end ;
64574: LD_VAR 0 3
64578: RET
// export function ComExit ( unit ) ; var tmp ; begin
64579: LD_INT 0
64581: PPUSH
64582: PPUSH
// if not IsInUnit ( unit ) then
64583: LD_VAR 0 1
64587: PPUSH
64588: CALL_OW 310
64592: NOT
64593: IFFALSE 64597
// exit ;
64595: GO 64657
// tmp := IsInUnit ( unit ) ;
64597: LD_ADDR_VAR 0 3
64601: PUSH
64602: LD_VAR 0 1
64606: PPUSH
64607: CALL_OW 310
64611: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64612: LD_VAR 0 3
64616: PPUSH
64617: CALL_OW 247
64621: PUSH
64622: LD_INT 2
64624: EQUAL
64625: IFFALSE 64638
// ComExitVehicle ( unit ) else
64627: LD_VAR 0 1
64631: PPUSH
64632: CALL_OW 121
64636: GO 64647
// ComExitBuilding ( unit ) ;
64638: LD_VAR 0 1
64642: PPUSH
64643: CALL_OW 122
// result := tmp ;
64647: LD_ADDR_VAR 0 2
64651: PUSH
64652: LD_VAR 0 3
64656: ST_TO_ADDR
// end ;
64657: LD_VAR 0 2
64661: RET
// export function ComExitAll ( units ) ; var i ; begin
64662: LD_INT 0
64664: PPUSH
64665: PPUSH
// if not units then
64666: LD_VAR 0 1
64670: NOT
64671: IFFALSE 64675
// exit ;
64673: GO 64701
// for i in units do
64675: LD_ADDR_VAR 0 3
64679: PUSH
64680: LD_VAR 0 1
64684: PUSH
64685: FOR_IN
64686: IFFALSE 64699
// ComExit ( i ) ;
64688: LD_VAR 0 3
64692: PPUSH
64693: CALL 64579 0 1
64697: GO 64685
64699: POP
64700: POP
// end ;
64701: LD_VAR 0 2
64705: RET
// export function ResetHc ; begin
64706: LD_INT 0
64708: PPUSH
// InitHc ;
64709: CALL_OW 19
// hc_importance := 0 ;
64713: LD_ADDR_OWVAR 32
64717: PUSH
64718: LD_INT 0
64720: ST_TO_ADDR
// end ;
64721: LD_VAR 0 1
64725: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64726: LD_INT 0
64728: PPUSH
64729: PPUSH
64730: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64731: LD_ADDR_VAR 0 6
64735: PUSH
64736: LD_VAR 0 1
64740: PUSH
64741: LD_VAR 0 3
64745: PLUS
64746: PUSH
64747: LD_INT 2
64749: DIV
64750: ST_TO_ADDR
// if _x < 0 then
64751: LD_VAR 0 6
64755: PUSH
64756: LD_INT 0
64758: LESS
64759: IFFALSE 64776
// _x := _x * - 1 ;
64761: LD_ADDR_VAR 0 6
64765: PUSH
64766: LD_VAR 0 6
64770: PUSH
64771: LD_INT 1
64773: NEG
64774: MUL
64775: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64776: LD_ADDR_VAR 0 7
64780: PUSH
64781: LD_VAR 0 2
64785: PUSH
64786: LD_VAR 0 4
64790: PLUS
64791: PUSH
64792: LD_INT 2
64794: DIV
64795: ST_TO_ADDR
// if _y < 0 then
64796: LD_VAR 0 7
64800: PUSH
64801: LD_INT 0
64803: LESS
64804: IFFALSE 64821
// _y := _y * - 1 ;
64806: LD_ADDR_VAR 0 7
64810: PUSH
64811: LD_VAR 0 7
64815: PUSH
64816: LD_INT 1
64818: NEG
64819: MUL
64820: ST_TO_ADDR
// result := [ _x , _y ] ;
64821: LD_ADDR_VAR 0 5
64825: PUSH
64826: LD_VAR 0 6
64830: PUSH
64831: LD_VAR 0 7
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: ST_TO_ADDR
// end ;
64840: LD_VAR 0 5
64844: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64845: LD_INT 0
64847: PPUSH
64848: PPUSH
64849: PPUSH
64850: PPUSH
// task := GetTaskList ( unit ) ;
64851: LD_ADDR_VAR 0 7
64855: PUSH
64856: LD_VAR 0 1
64860: PPUSH
64861: CALL_OW 437
64865: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64866: LD_VAR 0 7
64870: NOT
64871: PUSH
64872: LD_VAR 0 1
64876: PPUSH
64877: LD_VAR 0 2
64881: PPUSH
64882: CALL_OW 308
64886: NOT
64887: AND
64888: IFFALSE 64892
// exit ;
64890: GO 65010
// if IsInArea ( unit , area ) then
64892: LD_VAR 0 1
64896: PPUSH
64897: LD_VAR 0 2
64901: PPUSH
64902: CALL_OW 308
64906: IFFALSE 64924
// begin ComMoveToArea ( unit , goAway ) ;
64908: LD_VAR 0 1
64912: PPUSH
64913: LD_VAR 0 3
64917: PPUSH
64918: CALL_OW 113
// exit ;
64922: GO 65010
// end ; if task [ 1 ] [ 1 ] <> M then
64924: LD_VAR 0 7
64928: PUSH
64929: LD_INT 1
64931: ARRAY
64932: PUSH
64933: LD_INT 1
64935: ARRAY
64936: PUSH
64937: LD_STRING M
64939: NONEQUAL
64940: IFFALSE 64944
// exit ;
64942: GO 65010
// x := task [ 1 ] [ 2 ] ;
64944: LD_ADDR_VAR 0 5
64948: PUSH
64949: LD_VAR 0 7
64953: PUSH
64954: LD_INT 1
64956: ARRAY
64957: PUSH
64958: LD_INT 2
64960: ARRAY
64961: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64962: LD_ADDR_VAR 0 6
64966: PUSH
64967: LD_VAR 0 7
64971: PUSH
64972: LD_INT 1
64974: ARRAY
64975: PUSH
64976: LD_INT 3
64978: ARRAY
64979: ST_TO_ADDR
// if InArea ( x , y , area ) then
64980: LD_VAR 0 5
64984: PPUSH
64985: LD_VAR 0 6
64989: PPUSH
64990: LD_VAR 0 2
64994: PPUSH
64995: CALL_OW 309
64999: IFFALSE 65010
// ComStop ( unit ) ;
65001: LD_VAR 0 1
65005: PPUSH
65006: CALL_OW 141
// end ;
65010: LD_VAR 0 4
65014: RET
// export function Abs ( value ) ; begin
65015: LD_INT 0
65017: PPUSH
// result := value ;
65018: LD_ADDR_VAR 0 2
65022: PUSH
65023: LD_VAR 0 1
65027: ST_TO_ADDR
// if value < 0 then
65028: LD_VAR 0 1
65032: PUSH
65033: LD_INT 0
65035: LESS
65036: IFFALSE 65053
// result := value * - 1 ;
65038: LD_ADDR_VAR 0 2
65042: PUSH
65043: LD_VAR 0 1
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: MUL
65052: ST_TO_ADDR
// end ;
65053: LD_VAR 0 2
65057: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65058: LD_INT 0
65060: PPUSH
65061: PPUSH
65062: PPUSH
65063: PPUSH
65064: PPUSH
65065: PPUSH
65066: PPUSH
65067: PPUSH
// if not unit or not building then
65068: LD_VAR 0 1
65072: NOT
65073: PUSH
65074: LD_VAR 0 2
65078: NOT
65079: OR
65080: IFFALSE 65084
// exit ;
65082: GO 65310
// x := GetX ( building ) ;
65084: LD_ADDR_VAR 0 4
65088: PUSH
65089: LD_VAR 0 2
65093: PPUSH
65094: CALL_OW 250
65098: ST_TO_ADDR
// y := GetY ( building ) ;
65099: LD_ADDR_VAR 0 6
65103: PUSH
65104: LD_VAR 0 2
65108: PPUSH
65109: CALL_OW 251
65113: ST_TO_ADDR
// d := GetDir ( building ) ;
65114: LD_ADDR_VAR 0 8
65118: PUSH
65119: LD_VAR 0 2
65123: PPUSH
65124: CALL_OW 254
65128: ST_TO_ADDR
// r := 4 ;
65129: LD_ADDR_VAR 0 9
65133: PUSH
65134: LD_INT 4
65136: ST_TO_ADDR
// for i := 1 to 5 do
65137: LD_ADDR_VAR 0 10
65141: PUSH
65142: DOUBLE
65143: LD_INT 1
65145: DEC
65146: ST_TO_ADDR
65147: LD_INT 5
65149: PUSH
65150: FOR_TO
65151: IFFALSE 65308
// begin _x := ShiftX ( x , d , r + i ) ;
65153: LD_ADDR_VAR 0 5
65157: PUSH
65158: LD_VAR 0 4
65162: PPUSH
65163: LD_VAR 0 8
65167: PPUSH
65168: LD_VAR 0 9
65172: PUSH
65173: LD_VAR 0 10
65177: PLUS
65178: PPUSH
65179: CALL_OW 272
65183: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65184: LD_ADDR_VAR 0 7
65188: PUSH
65189: LD_VAR 0 6
65193: PPUSH
65194: LD_VAR 0 8
65198: PPUSH
65199: LD_VAR 0 9
65203: PUSH
65204: LD_VAR 0 10
65208: PLUS
65209: PPUSH
65210: CALL_OW 273
65214: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65215: LD_VAR 0 5
65219: PPUSH
65220: LD_VAR 0 7
65224: PPUSH
65225: CALL_OW 488
65229: PUSH
65230: LD_VAR 0 5
65234: PPUSH
65235: LD_VAR 0 7
65239: PPUSH
65240: CALL_OW 428
65244: PPUSH
65245: CALL_OW 247
65249: PUSH
65250: LD_INT 3
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: IN
65260: NOT
65261: AND
65262: IFFALSE 65306
// begin ComMoveXY ( unit , _x , _y ) ;
65264: LD_VAR 0 1
65268: PPUSH
65269: LD_VAR 0 5
65273: PPUSH
65274: LD_VAR 0 7
65278: PPUSH
65279: CALL_OW 111
// result := [ _x , _y ] ;
65283: LD_ADDR_VAR 0 3
65287: PUSH
65288: LD_VAR 0 5
65292: PUSH
65293: LD_VAR 0 7
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: ST_TO_ADDR
// exit ;
65302: POP
65303: POP
65304: GO 65310
// end ; end ;
65306: GO 65150
65308: POP
65309: POP
// end ;
65310: LD_VAR 0 3
65314: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65315: LD_INT 0
65317: PPUSH
65318: PPUSH
65319: PPUSH
// result := 0 ;
65320: LD_ADDR_VAR 0 3
65324: PUSH
65325: LD_INT 0
65327: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65328: LD_VAR 0 1
65332: PUSH
65333: LD_INT 0
65335: LESS
65336: PUSH
65337: LD_VAR 0 1
65341: PUSH
65342: LD_INT 8
65344: GREATER
65345: OR
65346: PUSH
65347: LD_VAR 0 2
65351: PUSH
65352: LD_INT 0
65354: LESS
65355: OR
65356: PUSH
65357: LD_VAR 0 2
65361: PUSH
65362: LD_INT 8
65364: GREATER
65365: OR
65366: IFFALSE 65370
// exit ;
65368: GO 65445
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65370: LD_ADDR_VAR 0 4
65374: PUSH
65375: LD_INT 22
65377: PUSH
65378: LD_VAR 0 2
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: PPUSH
65387: CALL_OW 69
65391: PUSH
65392: FOR_IN
65393: IFFALSE 65443
// begin un := UnitShoot ( i ) ;
65395: LD_ADDR_VAR 0 5
65399: PUSH
65400: LD_VAR 0 4
65404: PPUSH
65405: CALL_OW 504
65409: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65410: LD_VAR 0 5
65414: PPUSH
65415: CALL_OW 255
65419: PUSH
65420: LD_VAR 0 1
65424: EQUAL
65425: IFFALSE 65441
// begin result := un ;
65427: LD_ADDR_VAR 0 3
65431: PUSH
65432: LD_VAR 0 5
65436: ST_TO_ADDR
// exit ;
65437: POP
65438: POP
65439: GO 65445
// end ; end ;
65441: GO 65392
65443: POP
65444: POP
// end ;
65445: LD_VAR 0 3
65449: RET
// export function GetCargoBay ( units ) ; begin
65450: LD_INT 0
65452: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65453: LD_ADDR_VAR 0 2
65457: PUSH
65458: LD_VAR 0 1
65462: PPUSH
65463: LD_INT 2
65465: PUSH
65466: LD_INT 34
65468: PUSH
65469: LD_INT 12
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 34
65478: PUSH
65479: LD_INT 51
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 34
65488: PUSH
65489: LD_INT 32
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 34
65498: PUSH
65499: LD_INT 89
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: PPUSH
65513: CALL_OW 72
65517: ST_TO_ADDR
// end ;
65518: LD_VAR 0 2
65522: RET
// export function Negate ( value ) ; begin
65523: LD_INT 0
65525: PPUSH
// result := not value ;
65526: LD_ADDR_VAR 0 2
65530: PUSH
65531: LD_VAR 0 1
65535: NOT
65536: ST_TO_ADDR
// end ;
65537: LD_VAR 0 2
65541: RET
// export function Inc ( value ) ; begin
65542: LD_INT 0
65544: PPUSH
// result := value + 1 ;
65545: LD_ADDR_VAR 0 2
65549: PUSH
65550: LD_VAR 0 1
65554: PUSH
65555: LD_INT 1
65557: PLUS
65558: ST_TO_ADDR
// end ;
65559: LD_VAR 0 2
65563: RET
// export function Dec ( value ) ; begin
65564: LD_INT 0
65566: PPUSH
// result := value - 1 ;
65567: LD_ADDR_VAR 0 2
65571: PUSH
65572: LD_VAR 0 1
65576: PUSH
65577: LD_INT 1
65579: MINUS
65580: ST_TO_ADDR
// end ;
65581: LD_VAR 0 2
65585: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65586: LD_INT 0
65588: PPUSH
65589: PPUSH
65590: PPUSH
65591: PPUSH
65592: PPUSH
65593: PPUSH
65594: PPUSH
65595: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65596: LD_VAR 0 1
65600: PPUSH
65601: LD_VAR 0 2
65605: PPUSH
65606: CALL_OW 488
65610: NOT
65611: PUSH
65612: LD_VAR 0 3
65616: PPUSH
65617: LD_VAR 0 4
65621: PPUSH
65622: CALL_OW 488
65626: NOT
65627: OR
65628: IFFALSE 65641
// begin result := - 1 ;
65630: LD_ADDR_VAR 0 5
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: ST_TO_ADDR
// exit ;
65639: GO 65876
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65641: LD_ADDR_VAR 0 12
65645: PUSH
65646: LD_VAR 0 1
65650: PPUSH
65651: LD_VAR 0 2
65655: PPUSH
65656: LD_VAR 0 3
65660: PPUSH
65661: LD_VAR 0 4
65665: PPUSH
65666: CALL 64726 0 4
65670: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65671: LD_ADDR_VAR 0 11
65675: PUSH
65676: LD_VAR 0 1
65680: PPUSH
65681: LD_VAR 0 2
65685: PPUSH
65686: LD_VAR 0 12
65690: PUSH
65691: LD_INT 1
65693: ARRAY
65694: PPUSH
65695: LD_VAR 0 12
65699: PUSH
65700: LD_INT 2
65702: ARRAY
65703: PPUSH
65704: CALL_OW 298
65708: ST_TO_ADDR
// distance := 9999 ;
65709: LD_ADDR_VAR 0 10
65713: PUSH
65714: LD_INT 9999
65716: ST_TO_ADDR
// for i := 0 to 5 do
65717: LD_ADDR_VAR 0 6
65721: PUSH
65722: DOUBLE
65723: LD_INT 0
65725: DEC
65726: ST_TO_ADDR
65727: LD_INT 5
65729: PUSH
65730: FOR_TO
65731: IFFALSE 65874
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65733: LD_ADDR_VAR 0 7
65737: PUSH
65738: LD_VAR 0 1
65742: PPUSH
65743: LD_VAR 0 6
65747: PPUSH
65748: LD_VAR 0 11
65752: PPUSH
65753: CALL_OW 272
65757: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65758: LD_ADDR_VAR 0 8
65762: PUSH
65763: LD_VAR 0 2
65767: PPUSH
65768: LD_VAR 0 6
65772: PPUSH
65773: LD_VAR 0 11
65777: PPUSH
65778: CALL_OW 273
65782: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65783: LD_VAR 0 7
65787: PPUSH
65788: LD_VAR 0 8
65792: PPUSH
65793: CALL_OW 488
65797: NOT
65798: IFFALSE 65802
// continue ;
65800: GO 65730
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65802: LD_ADDR_VAR 0 9
65806: PUSH
65807: LD_VAR 0 12
65811: PUSH
65812: LD_INT 1
65814: ARRAY
65815: PPUSH
65816: LD_VAR 0 12
65820: PUSH
65821: LD_INT 2
65823: ARRAY
65824: PPUSH
65825: LD_VAR 0 7
65829: PPUSH
65830: LD_VAR 0 8
65834: PPUSH
65835: CALL_OW 298
65839: ST_TO_ADDR
// if tmp < distance then
65840: LD_VAR 0 9
65844: PUSH
65845: LD_VAR 0 10
65849: LESS
65850: IFFALSE 65872
// begin result := i ;
65852: LD_ADDR_VAR 0 5
65856: PUSH
65857: LD_VAR 0 6
65861: ST_TO_ADDR
// distance := tmp ;
65862: LD_ADDR_VAR 0 10
65866: PUSH
65867: LD_VAR 0 9
65871: ST_TO_ADDR
// end ; end ;
65872: GO 65730
65874: POP
65875: POP
// end ;
65876: LD_VAR 0 5
65880: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65881: LD_INT 0
65883: PPUSH
65884: PPUSH
// if not driver or not IsInUnit ( driver ) then
65885: LD_VAR 0 1
65889: NOT
65890: PUSH
65891: LD_VAR 0 1
65895: PPUSH
65896: CALL_OW 310
65900: NOT
65901: OR
65902: IFFALSE 65906
// exit ;
65904: GO 65996
// vehicle := IsInUnit ( driver ) ;
65906: LD_ADDR_VAR 0 3
65910: PUSH
65911: LD_VAR 0 1
65915: PPUSH
65916: CALL_OW 310
65920: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65921: LD_VAR 0 1
65925: PPUSH
65926: LD_STRING \
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 0
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: LD_INT 0
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: PUSH
65956: LD_STRING E
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_VAR 0 3
65969: PUSH
65970: LD_INT 0
65972: PUSH
65973: LD_INT 0
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: LIST
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PPUSH
65992: CALL_OW 446
// end ;
65996: LD_VAR 0 2
66000: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66001: LD_INT 0
66003: PPUSH
66004: PPUSH
// if not driver or not IsInUnit ( driver ) then
66005: LD_VAR 0 1
66009: NOT
66010: PUSH
66011: LD_VAR 0 1
66015: PPUSH
66016: CALL_OW 310
66020: NOT
66021: OR
66022: IFFALSE 66026
// exit ;
66024: GO 66116
// vehicle := IsInUnit ( driver ) ;
66026: LD_ADDR_VAR 0 3
66030: PUSH
66031: LD_VAR 0 1
66035: PPUSH
66036: CALL_OW 310
66040: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66041: LD_VAR 0 1
66045: PPUSH
66046: LD_STRING \
66048: PUSH
66049: LD_INT 0
66051: PUSH
66052: LD_INT 0
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: PUSH
66076: LD_STRING E
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_VAR 0 3
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: LD_INT 0
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PPUSH
66112: CALL_OW 447
// end ;
66116: LD_VAR 0 2
66120: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66121: LD_INT 0
66123: PPUSH
66124: PPUSH
66125: PPUSH
// tmp := [ ] ;
66126: LD_ADDR_VAR 0 5
66130: PUSH
66131: EMPTY
66132: ST_TO_ADDR
// for i in units do
66133: LD_ADDR_VAR 0 4
66137: PUSH
66138: LD_VAR 0 1
66142: PUSH
66143: FOR_IN
66144: IFFALSE 66182
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66146: LD_ADDR_VAR 0 5
66150: PUSH
66151: LD_VAR 0 5
66155: PPUSH
66156: LD_VAR 0 5
66160: PUSH
66161: LD_INT 1
66163: PLUS
66164: PPUSH
66165: LD_VAR 0 4
66169: PPUSH
66170: CALL_OW 256
66174: PPUSH
66175: CALL_OW 2
66179: ST_TO_ADDR
66180: GO 66143
66182: POP
66183: POP
// if not tmp then
66184: LD_VAR 0 5
66188: NOT
66189: IFFALSE 66193
// exit ;
66191: GO 66241
// if asc then
66193: LD_VAR 0 2
66197: IFFALSE 66221
// result := SortListByListAsc ( units , tmp ) else
66199: LD_ADDR_VAR 0 3
66203: PUSH
66204: LD_VAR 0 1
66208: PPUSH
66209: LD_VAR 0 5
66213: PPUSH
66214: CALL_OW 76
66218: ST_TO_ADDR
66219: GO 66241
// result := SortListByListDesc ( units , tmp ) ;
66221: LD_ADDR_VAR 0 3
66225: PUSH
66226: LD_VAR 0 1
66230: PPUSH
66231: LD_VAR 0 5
66235: PPUSH
66236: CALL_OW 77
66240: ST_TO_ADDR
// end ;
66241: LD_VAR 0 3
66245: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66246: LD_INT 0
66248: PPUSH
66249: PPUSH
// task := GetTaskList ( mech ) ;
66250: LD_ADDR_VAR 0 4
66254: PUSH
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL_OW 437
66264: ST_TO_ADDR
// if not task then
66265: LD_VAR 0 4
66269: NOT
66270: IFFALSE 66274
// exit ;
66272: GO 66316
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66274: LD_ADDR_VAR 0 3
66278: PUSH
66279: LD_VAR 0 4
66283: PUSH
66284: LD_INT 1
66286: ARRAY
66287: PUSH
66288: LD_INT 1
66290: ARRAY
66291: PUSH
66292: LD_STRING r
66294: EQUAL
66295: PUSH
66296: LD_VAR 0 4
66300: PUSH
66301: LD_INT 1
66303: ARRAY
66304: PUSH
66305: LD_INT 4
66307: ARRAY
66308: PUSH
66309: LD_VAR 0 2
66313: EQUAL
66314: AND
66315: ST_TO_ADDR
// end ;
66316: LD_VAR 0 3
66320: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66321: LD_INT 0
66323: PPUSH
// SetDir ( unit , d ) ;
66324: LD_VAR 0 1
66328: PPUSH
66329: LD_VAR 0 4
66333: PPUSH
66334: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66338: LD_VAR 0 1
66342: PPUSH
66343: LD_VAR 0 2
66347: PPUSH
66348: LD_VAR 0 3
66352: PPUSH
66353: LD_VAR 0 5
66357: PPUSH
66358: CALL_OW 48
// end ;
66362: LD_VAR 0 6
66366: RET
// export function ToNaturalNumber ( number ) ; begin
66367: LD_INT 0
66369: PPUSH
// result := number div 1 ;
66370: LD_ADDR_VAR 0 2
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_INT 1
66382: DIV
66383: ST_TO_ADDR
// if number < 0 then
66384: LD_VAR 0 1
66388: PUSH
66389: LD_INT 0
66391: LESS
66392: IFFALSE 66402
// result := 0 ;
66394: LD_ADDR_VAR 0 2
66398: PUSH
66399: LD_INT 0
66401: ST_TO_ADDR
// end ;
66402: LD_VAR 0 2
66406: RET
// export function SortByClass ( units , class ) ; var un ; begin
66407: LD_INT 0
66409: PPUSH
66410: PPUSH
// if not units or not class then
66411: LD_VAR 0 1
66415: NOT
66416: PUSH
66417: LD_VAR 0 2
66421: NOT
66422: OR
66423: IFFALSE 66427
// exit ;
66425: GO 66522
// result := [ ] ;
66427: LD_ADDR_VAR 0 3
66431: PUSH
66432: EMPTY
66433: ST_TO_ADDR
// for un in units do
66434: LD_ADDR_VAR 0 4
66438: PUSH
66439: LD_VAR 0 1
66443: PUSH
66444: FOR_IN
66445: IFFALSE 66520
// if GetClass ( un ) = class then
66447: LD_VAR 0 4
66451: PPUSH
66452: CALL_OW 257
66456: PUSH
66457: LD_VAR 0 2
66461: EQUAL
66462: IFFALSE 66489
// result := Insert ( result , 1 , un ) else
66464: LD_ADDR_VAR 0 3
66468: PUSH
66469: LD_VAR 0 3
66473: PPUSH
66474: LD_INT 1
66476: PPUSH
66477: LD_VAR 0 4
66481: PPUSH
66482: CALL_OW 2
66486: ST_TO_ADDR
66487: GO 66518
// result := Replace ( result , result + 1 , un ) ;
66489: LD_ADDR_VAR 0 3
66493: PUSH
66494: LD_VAR 0 3
66498: PPUSH
66499: LD_VAR 0 3
66503: PUSH
66504: LD_INT 1
66506: PLUS
66507: PPUSH
66508: LD_VAR 0 4
66512: PPUSH
66513: CALL_OW 1
66517: ST_TO_ADDR
66518: GO 66444
66520: POP
66521: POP
// end ;
66522: LD_VAR 0 3
66526: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66527: LD_INT 0
66529: PPUSH
66530: PPUSH
66531: PPUSH
66532: PPUSH
66533: PPUSH
66534: PPUSH
66535: PPUSH
// result := [ ] ;
66536: LD_ADDR_VAR 0 4
66540: PUSH
66541: EMPTY
66542: ST_TO_ADDR
// if x - r < 0 then
66543: LD_VAR 0 1
66547: PUSH
66548: LD_VAR 0 3
66552: MINUS
66553: PUSH
66554: LD_INT 0
66556: LESS
66557: IFFALSE 66569
// min_x := 0 else
66559: LD_ADDR_VAR 0 8
66563: PUSH
66564: LD_INT 0
66566: ST_TO_ADDR
66567: GO 66585
// min_x := x - r ;
66569: LD_ADDR_VAR 0 8
66573: PUSH
66574: LD_VAR 0 1
66578: PUSH
66579: LD_VAR 0 3
66583: MINUS
66584: ST_TO_ADDR
// if y - r < 0 then
66585: LD_VAR 0 2
66589: PUSH
66590: LD_VAR 0 3
66594: MINUS
66595: PUSH
66596: LD_INT 0
66598: LESS
66599: IFFALSE 66611
// min_y := 0 else
66601: LD_ADDR_VAR 0 7
66605: PUSH
66606: LD_INT 0
66608: ST_TO_ADDR
66609: GO 66627
// min_y := y - r ;
66611: LD_ADDR_VAR 0 7
66615: PUSH
66616: LD_VAR 0 2
66620: PUSH
66621: LD_VAR 0 3
66625: MINUS
66626: ST_TO_ADDR
// max_x := x + r ;
66627: LD_ADDR_VAR 0 9
66631: PUSH
66632: LD_VAR 0 1
66636: PUSH
66637: LD_VAR 0 3
66641: PLUS
66642: ST_TO_ADDR
// max_y := y + r ;
66643: LD_ADDR_VAR 0 10
66647: PUSH
66648: LD_VAR 0 2
66652: PUSH
66653: LD_VAR 0 3
66657: PLUS
66658: ST_TO_ADDR
// for _x = min_x to max_x do
66659: LD_ADDR_VAR 0 5
66663: PUSH
66664: DOUBLE
66665: LD_VAR 0 8
66669: DEC
66670: ST_TO_ADDR
66671: LD_VAR 0 9
66675: PUSH
66676: FOR_TO
66677: IFFALSE 66778
// for _y = min_y to max_y do
66679: LD_ADDR_VAR 0 6
66683: PUSH
66684: DOUBLE
66685: LD_VAR 0 7
66689: DEC
66690: ST_TO_ADDR
66691: LD_VAR 0 10
66695: PUSH
66696: FOR_TO
66697: IFFALSE 66774
// begin if not ValidHex ( _x , _y ) then
66699: LD_VAR 0 5
66703: PPUSH
66704: LD_VAR 0 6
66708: PPUSH
66709: CALL_OW 488
66713: NOT
66714: IFFALSE 66718
// continue ;
66716: GO 66696
// if GetResourceTypeXY ( _x , _y ) then
66718: LD_VAR 0 5
66722: PPUSH
66723: LD_VAR 0 6
66727: PPUSH
66728: CALL_OW 283
66732: IFFALSE 66772
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66734: LD_ADDR_VAR 0 4
66738: PUSH
66739: LD_VAR 0 4
66743: PPUSH
66744: LD_VAR 0 4
66748: PUSH
66749: LD_INT 1
66751: PLUS
66752: PPUSH
66753: LD_VAR 0 5
66757: PUSH
66758: LD_VAR 0 6
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PPUSH
66767: CALL_OW 1
66771: ST_TO_ADDR
// end ;
66772: GO 66696
66774: POP
66775: POP
66776: GO 66676
66778: POP
66779: POP
// end ;
66780: LD_VAR 0 4
66784: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66785: LD_INT 0
66787: PPUSH
66788: PPUSH
66789: PPUSH
66790: PPUSH
66791: PPUSH
66792: PPUSH
66793: PPUSH
66794: PPUSH
// if not units then
66795: LD_VAR 0 1
66799: NOT
66800: IFFALSE 66804
// exit ;
66802: GO 67328
// result := UnitFilter ( units , [ f_ok ] ) ;
66804: LD_ADDR_VAR 0 3
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: LD_INT 50
66816: PUSH
66817: EMPTY
66818: LIST
66819: PPUSH
66820: CALL_OW 72
66824: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66825: LD_ADDR_VAR 0 8
66829: PUSH
66830: LD_VAR 0 1
66834: PUSH
66835: LD_INT 1
66837: ARRAY
66838: PPUSH
66839: CALL_OW 255
66843: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
66844: LD_ADDR_VAR 0 10
66848: PUSH
66849: LD_INT 29
66851: PUSH
66852: LD_INT 91
66854: PUSH
66855: LD_INT 49
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: LIST
66862: ST_TO_ADDR
// if not result then
66863: LD_VAR 0 3
66867: NOT
66868: IFFALSE 66872
// exit ;
66870: GO 67328
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66872: LD_ADDR_VAR 0 5
66876: PUSH
66877: LD_INT 81
66879: PUSH
66880: LD_VAR 0 8
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PPUSH
66889: CALL_OW 69
66893: ST_TO_ADDR
// for i in result do
66894: LD_ADDR_VAR 0 4
66898: PUSH
66899: LD_VAR 0 3
66903: PUSH
66904: FOR_IN
66905: IFFALSE 67326
// begin tag := GetTag ( i ) + 1 ;
66907: LD_ADDR_VAR 0 9
66911: PUSH
66912: LD_VAR 0 4
66916: PPUSH
66917: CALL_OW 110
66921: PUSH
66922: LD_INT 1
66924: PLUS
66925: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66926: LD_ADDR_VAR 0 7
66930: PUSH
66931: LD_VAR 0 4
66935: PPUSH
66936: CALL_OW 250
66940: PPUSH
66941: LD_VAR 0 4
66945: PPUSH
66946: CALL_OW 251
66950: PPUSH
66951: LD_INT 6
66953: PPUSH
66954: CALL 66527 0 3
66958: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66959: LD_VAR 0 4
66963: PPUSH
66964: CALL_OW 247
66968: PUSH
66969: LD_INT 2
66971: EQUAL
66972: PUSH
66973: LD_VAR 0 7
66977: AND
66978: PUSH
66979: LD_VAR 0 4
66983: PPUSH
66984: CALL_OW 264
66988: PUSH
66989: LD_VAR 0 10
66993: IN
66994: NOT
66995: AND
66996: IFFALSE 67035
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66998: LD_VAR 0 4
67002: PPUSH
67003: LD_VAR 0 7
67007: PUSH
67008: LD_INT 1
67010: ARRAY
67011: PUSH
67012: LD_INT 1
67014: ARRAY
67015: PPUSH
67016: LD_VAR 0 7
67020: PUSH
67021: LD_INT 1
67023: ARRAY
67024: PUSH
67025: LD_INT 2
67027: ARRAY
67028: PPUSH
67029: CALL_OW 116
67033: GO 67324
// if path > tag then
67035: LD_VAR 0 2
67039: PUSH
67040: LD_VAR 0 9
67044: GREATER
67045: IFFALSE 67253
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67047: LD_ADDR_VAR 0 6
67051: PUSH
67052: LD_VAR 0 5
67056: PPUSH
67057: LD_INT 91
67059: PUSH
67060: LD_VAR 0 4
67064: PUSH
67065: LD_INT 8
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: LIST
67072: PPUSH
67073: CALL_OW 72
67077: ST_TO_ADDR
// if nearEnemy then
67078: LD_VAR 0 6
67082: IFFALSE 67151
// begin if GetWeapon ( i ) = ru_time_lapser then
67084: LD_VAR 0 4
67088: PPUSH
67089: CALL_OW 264
67093: PUSH
67094: LD_INT 49
67096: EQUAL
67097: IFFALSE 67125
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67099: LD_VAR 0 4
67103: PPUSH
67104: LD_VAR 0 6
67108: PPUSH
67109: LD_VAR 0 4
67113: PPUSH
67114: CALL_OW 74
67118: PPUSH
67119: CALL_OW 112
67123: GO 67149
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67125: LD_VAR 0 4
67129: PPUSH
67130: LD_VAR 0 6
67134: PPUSH
67135: LD_VAR 0 4
67139: PPUSH
67140: CALL_OW 74
67144: PPUSH
67145: CALL_OW 115
// end else
67149: GO 67251
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67151: LD_VAR 0 4
67155: PPUSH
67156: LD_VAR 0 2
67160: PUSH
67161: LD_VAR 0 9
67165: ARRAY
67166: PUSH
67167: LD_INT 1
67169: ARRAY
67170: PPUSH
67171: LD_VAR 0 2
67175: PUSH
67176: LD_VAR 0 9
67180: ARRAY
67181: PUSH
67182: LD_INT 2
67184: ARRAY
67185: PPUSH
67186: CALL_OW 297
67190: PUSH
67191: LD_INT 6
67193: GREATER
67194: IFFALSE 67237
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67196: LD_VAR 0 4
67200: PPUSH
67201: LD_VAR 0 2
67205: PUSH
67206: LD_VAR 0 9
67210: ARRAY
67211: PUSH
67212: LD_INT 1
67214: ARRAY
67215: PPUSH
67216: LD_VAR 0 2
67220: PUSH
67221: LD_VAR 0 9
67225: ARRAY
67226: PUSH
67227: LD_INT 2
67229: ARRAY
67230: PPUSH
67231: CALL_OW 114
67235: GO 67251
// SetTag ( i , tag ) ;
67237: LD_VAR 0 4
67241: PPUSH
67242: LD_VAR 0 9
67246: PPUSH
67247: CALL_OW 109
// end else
67251: GO 67324
// if enemy then
67253: LD_VAR 0 5
67257: IFFALSE 67324
// begin if GetWeapon ( i ) = ru_time_lapser then
67259: LD_VAR 0 4
67263: PPUSH
67264: CALL_OW 264
67268: PUSH
67269: LD_INT 49
67271: EQUAL
67272: IFFALSE 67300
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67274: LD_VAR 0 4
67278: PPUSH
67279: LD_VAR 0 5
67283: PPUSH
67284: LD_VAR 0 4
67288: PPUSH
67289: CALL_OW 74
67293: PPUSH
67294: CALL_OW 112
67298: GO 67324
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67300: LD_VAR 0 4
67304: PPUSH
67305: LD_VAR 0 5
67309: PPUSH
67310: LD_VAR 0 4
67314: PPUSH
67315: CALL_OW 74
67319: PPUSH
67320: CALL_OW 115
// end ; end ;
67324: GO 66904
67326: POP
67327: POP
// end ;
67328: LD_VAR 0 3
67332: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67333: LD_INT 0
67335: PPUSH
67336: PPUSH
67337: PPUSH
// if not unit or IsInUnit ( unit ) then
67338: LD_VAR 0 1
67342: NOT
67343: PUSH
67344: LD_VAR 0 1
67348: PPUSH
67349: CALL_OW 310
67353: OR
67354: IFFALSE 67358
// exit ;
67356: GO 67449
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67358: LD_ADDR_VAR 0 4
67362: PUSH
67363: LD_VAR 0 1
67367: PPUSH
67368: CALL_OW 250
67372: PPUSH
67373: LD_VAR 0 2
67377: PPUSH
67378: LD_INT 1
67380: PPUSH
67381: CALL_OW 272
67385: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67386: LD_ADDR_VAR 0 5
67390: PUSH
67391: LD_VAR 0 1
67395: PPUSH
67396: CALL_OW 251
67400: PPUSH
67401: LD_VAR 0 2
67405: PPUSH
67406: LD_INT 1
67408: PPUSH
67409: CALL_OW 273
67413: ST_TO_ADDR
// if ValidHex ( x , y ) then
67414: LD_VAR 0 4
67418: PPUSH
67419: LD_VAR 0 5
67423: PPUSH
67424: CALL_OW 488
67428: IFFALSE 67449
// ComTurnXY ( unit , x , y ) ;
67430: LD_VAR 0 1
67434: PPUSH
67435: LD_VAR 0 4
67439: PPUSH
67440: LD_VAR 0 5
67444: PPUSH
67445: CALL_OW 118
// end ;
67449: LD_VAR 0 3
67453: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67454: LD_INT 0
67456: PPUSH
67457: PPUSH
// result := false ;
67458: LD_ADDR_VAR 0 3
67462: PUSH
67463: LD_INT 0
67465: ST_TO_ADDR
// if not units then
67466: LD_VAR 0 2
67470: NOT
67471: IFFALSE 67475
// exit ;
67473: GO 67520
// for i in units do
67475: LD_ADDR_VAR 0 4
67479: PUSH
67480: LD_VAR 0 2
67484: PUSH
67485: FOR_IN
67486: IFFALSE 67518
// if See ( side , i ) then
67488: LD_VAR 0 1
67492: PPUSH
67493: LD_VAR 0 4
67497: PPUSH
67498: CALL_OW 292
67502: IFFALSE 67516
// begin result := true ;
67504: LD_ADDR_VAR 0 3
67508: PUSH
67509: LD_INT 1
67511: ST_TO_ADDR
// exit ;
67512: POP
67513: POP
67514: GO 67520
// end ;
67516: GO 67485
67518: POP
67519: POP
// end ;
67520: LD_VAR 0 3
67524: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
67525: LD_INT 0
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
// if not unit or not points then
67531: LD_VAR 0 1
67535: NOT
67536: PUSH
67537: LD_VAR 0 2
67541: NOT
67542: OR
67543: IFFALSE 67547
// exit ;
67545: GO 67637
// dist := 99999 ;
67547: LD_ADDR_VAR 0 5
67551: PUSH
67552: LD_INT 99999
67554: ST_TO_ADDR
// for i in points do
67555: LD_ADDR_VAR 0 4
67559: PUSH
67560: LD_VAR 0 2
67564: PUSH
67565: FOR_IN
67566: IFFALSE 67635
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67568: LD_ADDR_VAR 0 6
67572: PUSH
67573: LD_VAR 0 1
67577: PPUSH
67578: LD_VAR 0 4
67582: PUSH
67583: LD_INT 1
67585: ARRAY
67586: PPUSH
67587: LD_VAR 0 4
67591: PUSH
67592: LD_INT 2
67594: ARRAY
67595: PPUSH
67596: CALL_OW 297
67600: ST_TO_ADDR
// if tmpDist < dist then
67601: LD_VAR 0 6
67605: PUSH
67606: LD_VAR 0 5
67610: LESS
67611: IFFALSE 67633
// begin result := i ;
67613: LD_ADDR_VAR 0 3
67617: PUSH
67618: LD_VAR 0 4
67622: ST_TO_ADDR
// dist := tmpDist ;
67623: LD_ADDR_VAR 0 5
67627: PUSH
67628: LD_VAR 0 6
67632: ST_TO_ADDR
// end ; end ;
67633: GO 67565
67635: POP
67636: POP
// end ;
67637: LD_VAR 0 3
67641: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
67642: LD_INT 0
67644: PPUSH
// uc_side := side ;
67645: LD_ADDR_OWVAR 20
67649: PUSH
67650: LD_VAR 0 1
67654: ST_TO_ADDR
// uc_nation := 3 ;
67655: LD_ADDR_OWVAR 21
67659: PUSH
67660: LD_INT 3
67662: ST_TO_ADDR
// vc_chassis := 25 ;
67663: LD_ADDR_OWVAR 37
67667: PUSH
67668: LD_INT 25
67670: ST_TO_ADDR
// vc_engine := engine_siberite ;
67671: LD_ADDR_OWVAR 39
67675: PUSH
67676: LD_INT 3
67678: ST_TO_ADDR
// vc_control := control_computer ;
67679: LD_ADDR_OWVAR 38
67683: PUSH
67684: LD_INT 3
67686: ST_TO_ADDR
// vc_weapon := 59 ;
67687: LD_ADDR_OWVAR 40
67691: PUSH
67692: LD_INT 59
67694: ST_TO_ADDR
// result := CreateVehicle ;
67695: LD_ADDR_VAR 0 5
67699: PUSH
67700: CALL_OW 45
67704: ST_TO_ADDR
// SetDir ( result , d ) ;
67705: LD_VAR 0 5
67709: PPUSH
67710: LD_VAR 0 4
67714: PPUSH
67715: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
67719: LD_VAR 0 5
67723: PPUSH
67724: LD_VAR 0 2
67728: PPUSH
67729: LD_VAR 0 3
67733: PPUSH
67734: LD_INT 0
67736: PPUSH
67737: CALL_OW 48
// end ;
67741: LD_VAR 0 5
67745: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
67746: LD_INT 0
67748: PPUSH
67749: PPUSH
67750: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
67751: LD_ADDR_VAR 0 2
67755: PUSH
67756: LD_INT 0
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: LD_INT 0
67764: PUSH
67765: LD_INT 0
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
67774: LD_VAR 0 1
67778: NOT
67779: PUSH
67780: LD_VAR 0 1
67784: PPUSH
67785: CALL_OW 264
67789: PUSH
67790: LD_INT 12
67792: PUSH
67793: LD_INT 51
67795: PUSH
67796: LD_INT 32
67798: PUSH
67799: LD_INT 89
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: IN
67808: NOT
67809: OR
67810: IFFALSE 67814
// exit ;
67812: GO 67912
// for i := 1 to 3 do
67814: LD_ADDR_VAR 0 3
67818: PUSH
67819: DOUBLE
67820: LD_INT 1
67822: DEC
67823: ST_TO_ADDR
67824: LD_INT 3
67826: PUSH
67827: FOR_TO
67828: IFFALSE 67910
// begin tmp := GetCargo ( cargo , i ) ;
67830: LD_ADDR_VAR 0 4
67834: PUSH
67835: LD_VAR 0 1
67839: PPUSH
67840: LD_VAR 0 3
67844: PPUSH
67845: CALL_OW 289
67849: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
67850: LD_ADDR_VAR 0 2
67854: PUSH
67855: LD_VAR 0 2
67859: PPUSH
67860: LD_VAR 0 3
67864: PPUSH
67865: LD_VAR 0 4
67869: PPUSH
67870: CALL_OW 1
67874: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
67875: LD_ADDR_VAR 0 2
67879: PUSH
67880: LD_VAR 0 2
67884: PPUSH
67885: LD_INT 4
67887: PPUSH
67888: LD_VAR 0 2
67892: PUSH
67893: LD_INT 4
67895: ARRAY
67896: PUSH
67897: LD_VAR 0 4
67901: PLUS
67902: PPUSH
67903: CALL_OW 1
67907: ST_TO_ADDR
// end ;
67908: GO 67827
67910: POP
67911: POP
// end ;
67912: LD_VAR 0 2
67916: RET
// export function Length ( array ) ; begin
67917: LD_INT 0
67919: PPUSH
// result := array + 0 ;
67920: LD_ADDR_VAR 0 2
67924: PUSH
67925: LD_VAR 0 1
67929: PUSH
67930: LD_INT 0
67932: PLUS
67933: ST_TO_ADDR
// end ;
67934: LD_VAR 0 2
67938: RET
// export function PrepareArray ( array ) ; begin
67939: LD_INT 0
67941: PPUSH
// result := array diff 0 ;
67942: LD_ADDR_VAR 0 2
67946: PUSH
67947: LD_VAR 0 1
67951: PUSH
67952: LD_INT 0
67954: DIFF
67955: ST_TO_ADDR
// if not result [ 1 ] then
67956: LD_VAR 0 2
67960: PUSH
67961: LD_INT 1
67963: ARRAY
67964: NOT
67965: IFFALSE 67985
// result := Delete ( result , 1 ) ;
67967: LD_ADDR_VAR 0 2
67971: PUSH
67972: LD_VAR 0 2
67976: PPUSH
67977: LD_INT 1
67979: PPUSH
67980: CALL_OW 3
67984: ST_TO_ADDR
// end ;
67985: LD_VAR 0 2
67989: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67990: LD_INT 0
67992: PPUSH
67993: PPUSH
67994: PPUSH
67995: PPUSH
// sibRocketRange := 25 ;
67996: LD_ADDR_VAR 0 6
68000: PUSH
68001: LD_INT 25
68003: ST_TO_ADDR
// result := false ;
68004: LD_ADDR_VAR 0 4
68008: PUSH
68009: LD_INT 0
68011: ST_TO_ADDR
// for i := 0 to 5 do
68012: LD_ADDR_VAR 0 5
68016: PUSH
68017: DOUBLE
68018: LD_INT 0
68020: DEC
68021: ST_TO_ADDR
68022: LD_INT 5
68024: PUSH
68025: FOR_TO
68026: IFFALSE 68093
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68028: LD_VAR 0 1
68032: PPUSH
68033: LD_VAR 0 5
68037: PPUSH
68038: LD_VAR 0 6
68042: PPUSH
68043: CALL_OW 272
68047: PPUSH
68048: LD_VAR 0 2
68052: PPUSH
68053: LD_VAR 0 5
68057: PPUSH
68058: LD_VAR 0 6
68062: PPUSH
68063: CALL_OW 273
68067: PPUSH
68068: LD_VAR 0 3
68072: PPUSH
68073: CALL_OW 309
68077: IFFALSE 68091
// begin result := true ;
68079: LD_ADDR_VAR 0 4
68083: PUSH
68084: LD_INT 1
68086: ST_TO_ADDR
// exit ;
68087: POP
68088: POP
68089: GO 68095
// end ;
68091: GO 68025
68093: POP
68094: POP
// end ; end_of_file
68095: LD_VAR 0 4
68099: RET
// every 0 0$1 do
68100: GO 68102
68102: DISABLE
// begin enable ;
68103: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
68104: LD_STRING updateTimer(
68106: PUSH
68107: LD_OWVAR 1
68111: STR
68112: PUSH
68113: LD_STRING );
68115: STR
68116: PPUSH
68117: CALL_OW 559
// end ;
68121: END
// export function SOS_MapStart ( ) ; begin
68122: LD_INT 0
68124: PPUSH
// if streamModeActive then
68125: LD_EXP 66
68129: IFFALSE 68138
// DefineStreamItems ( true ) ;
68131: LD_INT 1
68133: PPUSH
68134: CALL 69792 0 1
// UpdateFactoryWaypoints ( ) ;
68138: CALL 82653 0 0
// UpdateWarehouseGatheringPoints ( ) ;
68142: CALL 82910 0 0
// end ;
68146: LD_VAR 0 1
68150: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68151: LD_INT 0
68153: PPUSH
// if p2 = hack_mode then
68154: LD_VAR 0 2
68158: PUSH
68159: LD_INT 100
68161: EQUAL
68162: IFFALSE 69165
// begin if not StreamModeActive then
68164: LD_EXP 66
68168: NOT
68169: IFFALSE 68179
// StreamModeActive := true ;
68171: LD_ADDR_EXP 66
68175: PUSH
68176: LD_INT 1
68178: ST_TO_ADDR
// if p3 = 0 then
68179: LD_VAR 0 3
68183: PUSH
68184: LD_INT 0
68186: EQUAL
68187: IFFALSE 68193
// InitStreamMode ;
68189: CALL 69328 0 0
// if p3 = 1 then
68193: LD_VAR 0 3
68197: PUSH
68198: LD_INT 1
68200: EQUAL
68201: IFFALSE 68211
// sRocket := true ;
68203: LD_ADDR_EXP 71
68207: PUSH
68208: LD_INT 1
68210: ST_TO_ADDR
// if p3 = 2 then
68211: LD_VAR 0 3
68215: PUSH
68216: LD_INT 2
68218: EQUAL
68219: IFFALSE 68229
// sSpeed := true ;
68221: LD_ADDR_EXP 70
68225: PUSH
68226: LD_INT 1
68228: ST_TO_ADDR
// if p3 = 3 then
68229: LD_VAR 0 3
68233: PUSH
68234: LD_INT 3
68236: EQUAL
68237: IFFALSE 68247
// sEngine := true ;
68239: LD_ADDR_EXP 72
68243: PUSH
68244: LD_INT 1
68246: ST_TO_ADDR
// if p3 = 4 then
68247: LD_VAR 0 3
68251: PUSH
68252: LD_INT 4
68254: EQUAL
68255: IFFALSE 68265
// sSpec := true ;
68257: LD_ADDR_EXP 69
68261: PUSH
68262: LD_INT 1
68264: ST_TO_ADDR
// if p3 = 5 then
68265: LD_VAR 0 3
68269: PUSH
68270: LD_INT 5
68272: EQUAL
68273: IFFALSE 68283
// sLevel := true ;
68275: LD_ADDR_EXP 73
68279: PUSH
68280: LD_INT 1
68282: ST_TO_ADDR
// if p3 = 6 then
68283: LD_VAR 0 3
68287: PUSH
68288: LD_INT 6
68290: EQUAL
68291: IFFALSE 68301
// sArmoury := true ;
68293: LD_ADDR_EXP 74
68297: PUSH
68298: LD_INT 1
68300: ST_TO_ADDR
// if p3 = 7 then
68301: LD_VAR 0 3
68305: PUSH
68306: LD_INT 7
68308: EQUAL
68309: IFFALSE 68319
// sRadar := true ;
68311: LD_ADDR_EXP 75
68315: PUSH
68316: LD_INT 1
68318: ST_TO_ADDR
// if p3 = 8 then
68319: LD_VAR 0 3
68323: PUSH
68324: LD_INT 8
68326: EQUAL
68327: IFFALSE 68337
// sBunker := true ;
68329: LD_ADDR_EXP 76
68333: PUSH
68334: LD_INT 1
68336: ST_TO_ADDR
// if p3 = 9 then
68337: LD_VAR 0 3
68341: PUSH
68342: LD_INT 9
68344: EQUAL
68345: IFFALSE 68355
// sHack := true ;
68347: LD_ADDR_EXP 77
68351: PUSH
68352: LD_INT 1
68354: ST_TO_ADDR
// if p3 = 10 then
68355: LD_VAR 0 3
68359: PUSH
68360: LD_INT 10
68362: EQUAL
68363: IFFALSE 68373
// sFire := true ;
68365: LD_ADDR_EXP 78
68369: PUSH
68370: LD_INT 1
68372: ST_TO_ADDR
// if p3 = 11 then
68373: LD_VAR 0 3
68377: PUSH
68378: LD_INT 11
68380: EQUAL
68381: IFFALSE 68391
// sRefresh := true ;
68383: LD_ADDR_EXP 79
68387: PUSH
68388: LD_INT 1
68390: ST_TO_ADDR
// if p3 = 12 then
68391: LD_VAR 0 3
68395: PUSH
68396: LD_INT 12
68398: EQUAL
68399: IFFALSE 68409
// sExp := true ;
68401: LD_ADDR_EXP 80
68405: PUSH
68406: LD_INT 1
68408: ST_TO_ADDR
// if p3 = 13 then
68409: LD_VAR 0 3
68413: PUSH
68414: LD_INT 13
68416: EQUAL
68417: IFFALSE 68427
// sDepot := true ;
68419: LD_ADDR_EXP 81
68423: PUSH
68424: LD_INT 1
68426: ST_TO_ADDR
// if p3 = 14 then
68427: LD_VAR 0 3
68431: PUSH
68432: LD_INT 14
68434: EQUAL
68435: IFFALSE 68445
// sFlag := true ;
68437: LD_ADDR_EXP 82
68441: PUSH
68442: LD_INT 1
68444: ST_TO_ADDR
// if p3 = 15 then
68445: LD_VAR 0 3
68449: PUSH
68450: LD_INT 15
68452: EQUAL
68453: IFFALSE 68463
// sKamikadze := true ;
68455: LD_ADDR_EXP 90
68459: PUSH
68460: LD_INT 1
68462: ST_TO_ADDR
// if p3 = 16 then
68463: LD_VAR 0 3
68467: PUSH
68468: LD_INT 16
68470: EQUAL
68471: IFFALSE 68481
// sTroll := true ;
68473: LD_ADDR_EXP 91
68477: PUSH
68478: LD_INT 1
68480: ST_TO_ADDR
// if p3 = 17 then
68481: LD_VAR 0 3
68485: PUSH
68486: LD_INT 17
68488: EQUAL
68489: IFFALSE 68499
// sSlow := true ;
68491: LD_ADDR_EXP 92
68495: PUSH
68496: LD_INT 1
68498: ST_TO_ADDR
// if p3 = 18 then
68499: LD_VAR 0 3
68503: PUSH
68504: LD_INT 18
68506: EQUAL
68507: IFFALSE 68517
// sLack := true ;
68509: LD_ADDR_EXP 93
68513: PUSH
68514: LD_INT 1
68516: ST_TO_ADDR
// if p3 = 19 then
68517: LD_VAR 0 3
68521: PUSH
68522: LD_INT 19
68524: EQUAL
68525: IFFALSE 68535
// sTank := true ;
68527: LD_ADDR_EXP 95
68531: PUSH
68532: LD_INT 1
68534: ST_TO_ADDR
// if p3 = 20 then
68535: LD_VAR 0 3
68539: PUSH
68540: LD_INT 20
68542: EQUAL
68543: IFFALSE 68553
// sRemote := true ;
68545: LD_ADDR_EXP 96
68549: PUSH
68550: LD_INT 1
68552: ST_TO_ADDR
// if p3 = 21 then
68553: LD_VAR 0 3
68557: PUSH
68558: LD_INT 21
68560: EQUAL
68561: IFFALSE 68571
// sPowell := true ;
68563: LD_ADDR_EXP 97
68567: PUSH
68568: LD_INT 1
68570: ST_TO_ADDR
// if p3 = 22 then
68571: LD_VAR 0 3
68575: PUSH
68576: LD_INT 22
68578: EQUAL
68579: IFFALSE 68589
// sTeleport := true ;
68581: LD_ADDR_EXP 100
68585: PUSH
68586: LD_INT 1
68588: ST_TO_ADDR
// if p3 = 23 then
68589: LD_VAR 0 3
68593: PUSH
68594: LD_INT 23
68596: EQUAL
68597: IFFALSE 68607
// sOilTower := true ;
68599: LD_ADDR_EXP 102
68603: PUSH
68604: LD_INT 1
68606: ST_TO_ADDR
// if p3 = 24 then
68607: LD_VAR 0 3
68611: PUSH
68612: LD_INT 24
68614: EQUAL
68615: IFFALSE 68625
// sShovel := true ;
68617: LD_ADDR_EXP 103
68621: PUSH
68622: LD_INT 1
68624: ST_TO_ADDR
// if p3 = 25 then
68625: LD_VAR 0 3
68629: PUSH
68630: LD_INT 25
68632: EQUAL
68633: IFFALSE 68643
// sSheik := true ;
68635: LD_ADDR_EXP 104
68639: PUSH
68640: LD_INT 1
68642: ST_TO_ADDR
// if p3 = 26 then
68643: LD_VAR 0 3
68647: PUSH
68648: LD_INT 26
68650: EQUAL
68651: IFFALSE 68661
// sEarthquake := true ;
68653: LD_ADDR_EXP 106
68657: PUSH
68658: LD_INT 1
68660: ST_TO_ADDR
// if p3 = 27 then
68661: LD_VAR 0 3
68665: PUSH
68666: LD_INT 27
68668: EQUAL
68669: IFFALSE 68679
// sAI := true ;
68671: LD_ADDR_EXP 107
68675: PUSH
68676: LD_INT 1
68678: ST_TO_ADDR
// if p3 = 28 then
68679: LD_VAR 0 3
68683: PUSH
68684: LD_INT 28
68686: EQUAL
68687: IFFALSE 68697
// sCargo := true ;
68689: LD_ADDR_EXP 110
68693: PUSH
68694: LD_INT 1
68696: ST_TO_ADDR
// if p3 = 29 then
68697: LD_VAR 0 3
68701: PUSH
68702: LD_INT 29
68704: EQUAL
68705: IFFALSE 68715
// sDLaser := true ;
68707: LD_ADDR_EXP 111
68711: PUSH
68712: LD_INT 1
68714: ST_TO_ADDR
// if p3 = 30 then
68715: LD_VAR 0 3
68719: PUSH
68720: LD_INT 30
68722: EQUAL
68723: IFFALSE 68733
// sExchange := true ;
68725: LD_ADDR_EXP 112
68729: PUSH
68730: LD_INT 1
68732: ST_TO_ADDR
// if p3 = 31 then
68733: LD_VAR 0 3
68737: PUSH
68738: LD_INT 31
68740: EQUAL
68741: IFFALSE 68751
// sFac := true ;
68743: LD_ADDR_EXP 113
68747: PUSH
68748: LD_INT 1
68750: ST_TO_ADDR
// if p3 = 32 then
68751: LD_VAR 0 3
68755: PUSH
68756: LD_INT 32
68758: EQUAL
68759: IFFALSE 68769
// sPower := true ;
68761: LD_ADDR_EXP 114
68765: PUSH
68766: LD_INT 1
68768: ST_TO_ADDR
// if p3 = 33 then
68769: LD_VAR 0 3
68773: PUSH
68774: LD_INT 33
68776: EQUAL
68777: IFFALSE 68787
// sRandom := true ;
68779: LD_ADDR_EXP 115
68783: PUSH
68784: LD_INT 1
68786: ST_TO_ADDR
// if p3 = 34 then
68787: LD_VAR 0 3
68791: PUSH
68792: LD_INT 34
68794: EQUAL
68795: IFFALSE 68805
// sShield := true ;
68797: LD_ADDR_EXP 116
68801: PUSH
68802: LD_INT 1
68804: ST_TO_ADDR
// if p3 = 35 then
68805: LD_VAR 0 3
68809: PUSH
68810: LD_INT 35
68812: EQUAL
68813: IFFALSE 68823
// sTime := true ;
68815: LD_ADDR_EXP 117
68819: PUSH
68820: LD_INT 1
68822: ST_TO_ADDR
// if p3 = 36 then
68823: LD_VAR 0 3
68827: PUSH
68828: LD_INT 36
68830: EQUAL
68831: IFFALSE 68841
// sTools := true ;
68833: LD_ADDR_EXP 118
68837: PUSH
68838: LD_INT 1
68840: ST_TO_ADDR
// if p3 = 101 then
68841: LD_VAR 0 3
68845: PUSH
68846: LD_INT 101
68848: EQUAL
68849: IFFALSE 68859
// sSold := true ;
68851: LD_ADDR_EXP 83
68855: PUSH
68856: LD_INT 1
68858: ST_TO_ADDR
// if p3 = 102 then
68859: LD_VAR 0 3
68863: PUSH
68864: LD_INT 102
68866: EQUAL
68867: IFFALSE 68877
// sDiff := true ;
68869: LD_ADDR_EXP 84
68873: PUSH
68874: LD_INT 1
68876: ST_TO_ADDR
// if p3 = 103 then
68877: LD_VAR 0 3
68881: PUSH
68882: LD_INT 103
68884: EQUAL
68885: IFFALSE 68895
// sFog := true ;
68887: LD_ADDR_EXP 87
68891: PUSH
68892: LD_INT 1
68894: ST_TO_ADDR
// if p3 = 104 then
68895: LD_VAR 0 3
68899: PUSH
68900: LD_INT 104
68902: EQUAL
68903: IFFALSE 68913
// sReset := true ;
68905: LD_ADDR_EXP 88
68909: PUSH
68910: LD_INT 1
68912: ST_TO_ADDR
// if p3 = 105 then
68913: LD_VAR 0 3
68917: PUSH
68918: LD_INT 105
68920: EQUAL
68921: IFFALSE 68931
// sSun := true ;
68923: LD_ADDR_EXP 89
68927: PUSH
68928: LD_INT 1
68930: ST_TO_ADDR
// if p3 = 106 then
68931: LD_VAR 0 3
68935: PUSH
68936: LD_INT 106
68938: EQUAL
68939: IFFALSE 68949
// sTiger := true ;
68941: LD_ADDR_EXP 85
68945: PUSH
68946: LD_INT 1
68948: ST_TO_ADDR
// if p3 = 107 then
68949: LD_VAR 0 3
68953: PUSH
68954: LD_INT 107
68956: EQUAL
68957: IFFALSE 68967
// sBomb := true ;
68959: LD_ADDR_EXP 86
68963: PUSH
68964: LD_INT 1
68966: ST_TO_ADDR
// if p3 = 108 then
68967: LD_VAR 0 3
68971: PUSH
68972: LD_INT 108
68974: EQUAL
68975: IFFALSE 68985
// sWound := true ;
68977: LD_ADDR_EXP 94
68981: PUSH
68982: LD_INT 1
68984: ST_TO_ADDR
// if p3 = 109 then
68985: LD_VAR 0 3
68989: PUSH
68990: LD_INT 109
68992: EQUAL
68993: IFFALSE 69003
// sBetray := true ;
68995: LD_ADDR_EXP 98
68999: PUSH
69000: LD_INT 1
69002: ST_TO_ADDR
// if p3 = 110 then
69003: LD_VAR 0 3
69007: PUSH
69008: LD_INT 110
69010: EQUAL
69011: IFFALSE 69021
// sContamin := true ;
69013: LD_ADDR_EXP 99
69017: PUSH
69018: LD_INT 1
69020: ST_TO_ADDR
// if p3 = 111 then
69021: LD_VAR 0 3
69025: PUSH
69026: LD_INT 111
69028: EQUAL
69029: IFFALSE 69039
// sOil := true ;
69031: LD_ADDR_EXP 101
69035: PUSH
69036: LD_INT 1
69038: ST_TO_ADDR
// if p3 = 112 then
69039: LD_VAR 0 3
69043: PUSH
69044: LD_INT 112
69046: EQUAL
69047: IFFALSE 69057
// sStu := true ;
69049: LD_ADDR_EXP 105
69053: PUSH
69054: LD_INT 1
69056: ST_TO_ADDR
// if p3 = 113 then
69057: LD_VAR 0 3
69061: PUSH
69062: LD_INT 113
69064: EQUAL
69065: IFFALSE 69075
// sBazooka := true ;
69067: LD_ADDR_EXP 108
69071: PUSH
69072: LD_INT 1
69074: ST_TO_ADDR
// if p3 = 114 then
69075: LD_VAR 0 3
69079: PUSH
69080: LD_INT 114
69082: EQUAL
69083: IFFALSE 69093
// sMortar := true ;
69085: LD_ADDR_EXP 109
69089: PUSH
69090: LD_INT 1
69092: ST_TO_ADDR
// if p3 = 115 then
69093: LD_VAR 0 3
69097: PUSH
69098: LD_INT 115
69100: EQUAL
69101: IFFALSE 69111
// sRanger := true ;
69103: LD_ADDR_EXP 119
69107: PUSH
69108: LD_INT 1
69110: ST_TO_ADDR
// if p3 = 116 then
69111: LD_VAR 0 3
69115: PUSH
69116: LD_INT 116
69118: EQUAL
69119: IFFALSE 69129
// sComputer := true ;
69121: LD_ADDR_EXP 120
69125: PUSH
69126: LD_INT 1
69128: ST_TO_ADDR
// if p3 = 117 then
69129: LD_VAR 0 3
69133: PUSH
69134: LD_INT 117
69136: EQUAL
69137: IFFALSE 69147
// s30 := true ;
69139: LD_ADDR_EXP 121
69143: PUSH
69144: LD_INT 1
69146: ST_TO_ADDR
// if p3 = 118 then
69147: LD_VAR 0 3
69151: PUSH
69152: LD_INT 118
69154: EQUAL
69155: IFFALSE 69165
// s60 := true ;
69157: LD_ADDR_EXP 122
69161: PUSH
69162: LD_INT 1
69164: ST_TO_ADDR
// end ; if p2 = stream_mode then
69165: LD_VAR 0 2
69169: PUSH
69170: LD_INT 101
69172: EQUAL
69173: IFFALSE 69301
// begin case p3 of 1 :
69175: LD_VAR 0 3
69179: PUSH
69180: LD_INT 1
69182: DOUBLE
69183: EQUAL
69184: IFTRUE 69188
69186: GO 69195
69188: POP
// hHackUnlimitedResources ; 2 :
69189: CALL 81399 0 0
69193: GO 69301
69195: LD_INT 2
69197: DOUBLE
69198: EQUAL
69199: IFTRUE 69203
69201: GO 69210
69203: POP
// hHackSetLevel10 ; 3 :
69204: CALL 81532 0 0
69208: GO 69301
69210: LD_INT 3
69212: DOUBLE
69213: EQUAL
69214: IFTRUE 69218
69216: GO 69225
69218: POP
// hHackSetLevel10YourUnits ; 4 :
69219: CALL 81617 0 0
69223: GO 69301
69225: LD_INT 4
69227: DOUBLE
69228: EQUAL
69229: IFTRUE 69233
69231: GO 69240
69233: POP
// hHackInvincible ; 5 :
69234: CALL 82065 0 0
69238: GO 69301
69240: LD_INT 5
69242: DOUBLE
69243: EQUAL
69244: IFTRUE 69248
69246: GO 69255
69248: POP
// hHackInvisible ; 6 :
69249: CALL 82176 0 0
69253: GO 69301
69255: LD_INT 6
69257: DOUBLE
69258: EQUAL
69259: IFTRUE 69263
69261: GO 69270
69263: POP
// hHackChangeYourSide ; 7 :
69264: CALL 82233 0 0
69268: GO 69301
69270: LD_INT 7
69272: DOUBLE
69273: EQUAL
69274: IFTRUE 69278
69276: GO 69285
69278: POP
// hHackChangeUnitSide ; 8 :
69279: CALL 82275 0 0
69283: GO 69301
69285: LD_INT 8
69287: DOUBLE
69288: EQUAL
69289: IFTRUE 69293
69291: GO 69300
69293: POP
// hHackFog ; end ;
69294: CALL 82376 0 0
69298: GO 69301
69300: POP
// end ; end ;
69301: LD_VAR 0 7
69305: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
69306: GO 69308
69308: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
69309: LD_STRING initStreamRollete();
69311: PPUSH
69312: CALL_OW 559
// InitStreamMode ;
69316: CALL 69328 0 0
// DefineStreamItems ( false ) ;
69320: LD_INT 0
69322: PPUSH
69323: CALL 69792 0 1
// end ;
69327: END
// function InitStreamMode ; begin
69328: LD_INT 0
69330: PPUSH
// streamModeActive := false ;
69331: LD_ADDR_EXP 66
69335: PUSH
69336: LD_INT 0
69338: ST_TO_ADDR
// normalCounter := 36 ;
69339: LD_ADDR_EXP 67
69343: PUSH
69344: LD_INT 36
69346: ST_TO_ADDR
// hardcoreCounter := 18 ;
69347: LD_ADDR_EXP 68
69351: PUSH
69352: LD_INT 18
69354: ST_TO_ADDR
// sRocket := false ;
69355: LD_ADDR_EXP 71
69359: PUSH
69360: LD_INT 0
69362: ST_TO_ADDR
// sSpeed := false ;
69363: LD_ADDR_EXP 70
69367: PUSH
69368: LD_INT 0
69370: ST_TO_ADDR
// sEngine := false ;
69371: LD_ADDR_EXP 72
69375: PUSH
69376: LD_INT 0
69378: ST_TO_ADDR
// sSpec := false ;
69379: LD_ADDR_EXP 69
69383: PUSH
69384: LD_INT 0
69386: ST_TO_ADDR
// sLevel := false ;
69387: LD_ADDR_EXP 73
69391: PUSH
69392: LD_INT 0
69394: ST_TO_ADDR
// sArmoury := false ;
69395: LD_ADDR_EXP 74
69399: PUSH
69400: LD_INT 0
69402: ST_TO_ADDR
// sRadar := false ;
69403: LD_ADDR_EXP 75
69407: PUSH
69408: LD_INT 0
69410: ST_TO_ADDR
// sBunker := false ;
69411: LD_ADDR_EXP 76
69415: PUSH
69416: LD_INT 0
69418: ST_TO_ADDR
// sHack := false ;
69419: LD_ADDR_EXP 77
69423: PUSH
69424: LD_INT 0
69426: ST_TO_ADDR
// sFire := false ;
69427: LD_ADDR_EXP 78
69431: PUSH
69432: LD_INT 0
69434: ST_TO_ADDR
// sRefresh := false ;
69435: LD_ADDR_EXP 79
69439: PUSH
69440: LD_INT 0
69442: ST_TO_ADDR
// sExp := false ;
69443: LD_ADDR_EXP 80
69447: PUSH
69448: LD_INT 0
69450: ST_TO_ADDR
// sDepot := false ;
69451: LD_ADDR_EXP 81
69455: PUSH
69456: LD_INT 0
69458: ST_TO_ADDR
// sFlag := false ;
69459: LD_ADDR_EXP 82
69463: PUSH
69464: LD_INT 0
69466: ST_TO_ADDR
// sKamikadze := false ;
69467: LD_ADDR_EXP 90
69471: PUSH
69472: LD_INT 0
69474: ST_TO_ADDR
// sTroll := false ;
69475: LD_ADDR_EXP 91
69479: PUSH
69480: LD_INT 0
69482: ST_TO_ADDR
// sSlow := false ;
69483: LD_ADDR_EXP 92
69487: PUSH
69488: LD_INT 0
69490: ST_TO_ADDR
// sLack := false ;
69491: LD_ADDR_EXP 93
69495: PUSH
69496: LD_INT 0
69498: ST_TO_ADDR
// sTank := false ;
69499: LD_ADDR_EXP 95
69503: PUSH
69504: LD_INT 0
69506: ST_TO_ADDR
// sRemote := false ;
69507: LD_ADDR_EXP 96
69511: PUSH
69512: LD_INT 0
69514: ST_TO_ADDR
// sPowell := false ;
69515: LD_ADDR_EXP 97
69519: PUSH
69520: LD_INT 0
69522: ST_TO_ADDR
// sTeleport := false ;
69523: LD_ADDR_EXP 100
69527: PUSH
69528: LD_INT 0
69530: ST_TO_ADDR
// sOilTower := false ;
69531: LD_ADDR_EXP 102
69535: PUSH
69536: LD_INT 0
69538: ST_TO_ADDR
// sShovel := false ;
69539: LD_ADDR_EXP 103
69543: PUSH
69544: LD_INT 0
69546: ST_TO_ADDR
// sSheik := false ;
69547: LD_ADDR_EXP 104
69551: PUSH
69552: LD_INT 0
69554: ST_TO_ADDR
// sEarthquake := false ;
69555: LD_ADDR_EXP 106
69559: PUSH
69560: LD_INT 0
69562: ST_TO_ADDR
// sAI := false ;
69563: LD_ADDR_EXP 107
69567: PUSH
69568: LD_INT 0
69570: ST_TO_ADDR
// sCargo := false ;
69571: LD_ADDR_EXP 110
69575: PUSH
69576: LD_INT 0
69578: ST_TO_ADDR
// sDLaser := false ;
69579: LD_ADDR_EXP 111
69583: PUSH
69584: LD_INT 0
69586: ST_TO_ADDR
// sExchange := false ;
69587: LD_ADDR_EXP 112
69591: PUSH
69592: LD_INT 0
69594: ST_TO_ADDR
// sFac := false ;
69595: LD_ADDR_EXP 113
69599: PUSH
69600: LD_INT 0
69602: ST_TO_ADDR
// sPower := false ;
69603: LD_ADDR_EXP 114
69607: PUSH
69608: LD_INT 0
69610: ST_TO_ADDR
// sRandom := false ;
69611: LD_ADDR_EXP 115
69615: PUSH
69616: LD_INT 0
69618: ST_TO_ADDR
// sShield := false ;
69619: LD_ADDR_EXP 116
69623: PUSH
69624: LD_INT 0
69626: ST_TO_ADDR
// sTime := false ;
69627: LD_ADDR_EXP 117
69631: PUSH
69632: LD_INT 0
69634: ST_TO_ADDR
// sTools := false ;
69635: LD_ADDR_EXP 118
69639: PUSH
69640: LD_INT 0
69642: ST_TO_ADDR
// sSold := false ;
69643: LD_ADDR_EXP 83
69647: PUSH
69648: LD_INT 0
69650: ST_TO_ADDR
// sDiff := false ;
69651: LD_ADDR_EXP 84
69655: PUSH
69656: LD_INT 0
69658: ST_TO_ADDR
// sFog := false ;
69659: LD_ADDR_EXP 87
69663: PUSH
69664: LD_INT 0
69666: ST_TO_ADDR
// sReset := false ;
69667: LD_ADDR_EXP 88
69671: PUSH
69672: LD_INT 0
69674: ST_TO_ADDR
// sSun := false ;
69675: LD_ADDR_EXP 89
69679: PUSH
69680: LD_INT 0
69682: ST_TO_ADDR
// sTiger := false ;
69683: LD_ADDR_EXP 85
69687: PUSH
69688: LD_INT 0
69690: ST_TO_ADDR
// sBomb := false ;
69691: LD_ADDR_EXP 86
69695: PUSH
69696: LD_INT 0
69698: ST_TO_ADDR
// sWound := false ;
69699: LD_ADDR_EXP 94
69703: PUSH
69704: LD_INT 0
69706: ST_TO_ADDR
// sBetray := false ;
69707: LD_ADDR_EXP 98
69711: PUSH
69712: LD_INT 0
69714: ST_TO_ADDR
// sContamin := false ;
69715: LD_ADDR_EXP 99
69719: PUSH
69720: LD_INT 0
69722: ST_TO_ADDR
// sOil := false ;
69723: LD_ADDR_EXP 101
69727: PUSH
69728: LD_INT 0
69730: ST_TO_ADDR
// sStu := false ;
69731: LD_ADDR_EXP 105
69735: PUSH
69736: LD_INT 0
69738: ST_TO_ADDR
// sBazooka := false ;
69739: LD_ADDR_EXP 108
69743: PUSH
69744: LD_INT 0
69746: ST_TO_ADDR
// sMortar := false ;
69747: LD_ADDR_EXP 109
69751: PUSH
69752: LD_INT 0
69754: ST_TO_ADDR
// sRanger := false ;
69755: LD_ADDR_EXP 119
69759: PUSH
69760: LD_INT 0
69762: ST_TO_ADDR
// sComputer := false ;
69763: LD_ADDR_EXP 120
69767: PUSH
69768: LD_INT 0
69770: ST_TO_ADDR
// s30 := false ;
69771: LD_ADDR_EXP 121
69775: PUSH
69776: LD_INT 0
69778: ST_TO_ADDR
// s60 := false ;
69779: LD_ADDR_EXP 122
69783: PUSH
69784: LD_INT 0
69786: ST_TO_ADDR
// end ;
69787: LD_VAR 0 1
69791: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
69792: LD_INT 0
69794: PPUSH
69795: PPUSH
69796: PPUSH
69797: PPUSH
69798: PPUSH
69799: PPUSH
69800: PPUSH
// result := [ ] ;
69801: LD_ADDR_VAR 0 2
69805: PUSH
69806: EMPTY
69807: ST_TO_ADDR
// if campaign_id = 1 then
69808: LD_OWVAR 69
69812: PUSH
69813: LD_INT 1
69815: EQUAL
69816: IFFALSE 72982
// begin case mission_number of 1 :
69818: LD_OWVAR 70
69822: PUSH
69823: LD_INT 1
69825: DOUBLE
69826: EQUAL
69827: IFTRUE 69831
69829: GO 69907
69831: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
69832: LD_ADDR_VAR 0 2
69836: PUSH
69837: LD_INT 2
69839: PUSH
69840: LD_INT 4
69842: PUSH
69843: LD_INT 11
69845: PUSH
69846: LD_INT 12
69848: PUSH
69849: LD_INT 15
69851: PUSH
69852: LD_INT 16
69854: PUSH
69855: LD_INT 22
69857: PUSH
69858: LD_INT 23
69860: PUSH
69861: LD_INT 26
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 101
69877: PUSH
69878: LD_INT 102
69880: PUSH
69881: LD_INT 106
69883: PUSH
69884: LD_INT 116
69886: PUSH
69887: LD_INT 117
69889: PUSH
69890: LD_INT 118
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: ST_TO_ADDR
69905: GO 72980
69907: LD_INT 2
69909: DOUBLE
69910: EQUAL
69911: IFTRUE 69915
69913: GO 69999
69915: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
69916: LD_ADDR_VAR 0 2
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: LD_INT 4
69926: PUSH
69927: LD_INT 11
69929: PUSH
69930: LD_INT 12
69932: PUSH
69933: LD_INT 15
69935: PUSH
69936: LD_INT 16
69938: PUSH
69939: LD_INT 22
69941: PUSH
69942: LD_INT 23
69944: PUSH
69945: LD_INT 26
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 101
69961: PUSH
69962: LD_INT 102
69964: PUSH
69965: LD_INT 105
69967: PUSH
69968: LD_INT 106
69970: PUSH
69971: LD_INT 108
69973: PUSH
69974: LD_INT 116
69976: PUSH
69977: LD_INT 117
69979: PUSH
69980: LD_INT 118
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: ST_TO_ADDR
69997: GO 72980
69999: LD_INT 3
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70007
70005: GO 70095
70007: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
70008: LD_ADDR_VAR 0 2
70012: PUSH
70013: LD_INT 2
70015: PUSH
70016: LD_INT 4
70018: PUSH
70019: LD_INT 5
70021: PUSH
70022: LD_INT 11
70024: PUSH
70025: LD_INT 12
70027: PUSH
70028: LD_INT 15
70030: PUSH
70031: LD_INT 16
70033: PUSH
70034: LD_INT 22
70036: PUSH
70037: LD_INT 26
70039: PUSH
70040: LD_INT 36
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 101
70057: PUSH
70058: LD_INT 102
70060: PUSH
70061: LD_INT 105
70063: PUSH
70064: LD_INT 106
70066: PUSH
70067: LD_INT 108
70069: PUSH
70070: LD_INT 116
70072: PUSH
70073: LD_INT 117
70075: PUSH
70076: LD_INT 118
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: ST_TO_ADDR
70093: GO 72980
70095: LD_INT 4
70097: DOUBLE
70098: EQUAL
70099: IFTRUE 70103
70101: GO 70199
70103: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
70104: LD_ADDR_VAR 0 2
70108: PUSH
70109: LD_INT 2
70111: PUSH
70112: LD_INT 4
70114: PUSH
70115: LD_INT 5
70117: PUSH
70118: LD_INT 8
70120: PUSH
70121: LD_INT 11
70123: PUSH
70124: LD_INT 12
70126: PUSH
70127: LD_INT 15
70129: PUSH
70130: LD_INT 16
70132: PUSH
70133: LD_INT 22
70135: PUSH
70136: LD_INT 23
70138: PUSH
70139: LD_INT 26
70141: PUSH
70142: LD_INT 36
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 101
70161: PUSH
70162: LD_INT 102
70164: PUSH
70165: LD_INT 105
70167: PUSH
70168: LD_INT 106
70170: PUSH
70171: LD_INT 108
70173: PUSH
70174: LD_INT 116
70176: PUSH
70177: LD_INT 117
70179: PUSH
70180: LD_INT 118
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: ST_TO_ADDR
70197: GO 72980
70199: LD_INT 5
70201: DOUBLE
70202: EQUAL
70203: IFTRUE 70207
70205: GO 70319
70207: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70208: LD_ADDR_VAR 0 2
70212: PUSH
70213: LD_INT 2
70215: PUSH
70216: LD_INT 4
70218: PUSH
70219: LD_INT 5
70221: PUSH
70222: LD_INT 6
70224: PUSH
70225: LD_INT 8
70227: PUSH
70228: LD_INT 11
70230: PUSH
70231: LD_INT 12
70233: PUSH
70234: LD_INT 15
70236: PUSH
70237: LD_INT 16
70239: PUSH
70240: LD_INT 22
70242: PUSH
70243: LD_INT 23
70245: PUSH
70246: LD_INT 25
70248: PUSH
70249: LD_INT 26
70251: PUSH
70252: LD_INT 36
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 101
70273: PUSH
70274: LD_INT 102
70276: PUSH
70277: LD_INT 105
70279: PUSH
70280: LD_INT 106
70282: PUSH
70283: LD_INT 108
70285: PUSH
70286: LD_INT 109
70288: PUSH
70289: LD_INT 112
70291: PUSH
70292: LD_INT 116
70294: PUSH
70295: LD_INT 117
70297: PUSH
70298: LD_INT 118
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: ST_TO_ADDR
70317: GO 72980
70319: LD_INT 6
70321: DOUBLE
70322: EQUAL
70323: IFTRUE 70327
70325: GO 70459
70327: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
70328: LD_ADDR_VAR 0 2
70332: PUSH
70333: LD_INT 2
70335: PUSH
70336: LD_INT 4
70338: PUSH
70339: LD_INT 5
70341: PUSH
70342: LD_INT 6
70344: PUSH
70345: LD_INT 8
70347: PUSH
70348: LD_INT 11
70350: PUSH
70351: LD_INT 12
70353: PUSH
70354: LD_INT 15
70356: PUSH
70357: LD_INT 16
70359: PUSH
70360: LD_INT 20
70362: PUSH
70363: LD_INT 21
70365: PUSH
70366: LD_INT 22
70368: PUSH
70369: LD_INT 23
70371: PUSH
70372: LD_INT 25
70374: PUSH
70375: LD_INT 26
70377: PUSH
70378: LD_INT 30
70380: PUSH
70381: LD_INT 31
70383: PUSH
70384: LD_INT 32
70386: PUSH
70387: LD_INT 36
70389: PUSH
70390: EMPTY
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 101
70413: PUSH
70414: LD_INT 102
70416: PUSH
70417: LD_INT 105
70419: PUSH
70420: LD_INT 106
70422: PUSH
70423: LD_INT 108
70425: PUSH
70426: LD_INT 109
70428: PUSH
70429: LD_INT 112
70431: PUSH
70432: LD_INT 116
70434: PUSH
70435: LD_INT 117
70437: PUSH
70438: LD_INT 118
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: ST_TO_ADDR
70457: GO 72980
70459: LD_INT 7
70461: DOUBLE
70462: EQUAL
70463: IFTRUE 70467
70465: GO 70579
70467: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
70468: LD_ADDR_VAR 0 2
70472: PUSH
70473: LD_INT 2
70475: PUSH
70476: LD_INT 4
70478: PUSH
70479: LD_INT 5
70481: PUSH
70482: LD_INT 7
70484: PUSH
70485: LD_INT 11
70487: PUSH
70488: LD_INT 12
70490: PUSH
70491: LD_INT 15
70493: PUSH
70494: LD_INT 16
70496: PUSH
70497: LD_INT 20
70499: PUSH
70500: LD_INT 21
70502: PUSH
70503: LD_INT 22
70505: PUSH
70506: LD_INT 23
70508: PUSH
70509: LD_INT 25
70511: PUSH
70512: LD_INT 26
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: LIST
70529: LIST
70530: PUSH
70531: LD_INT 101
70533: PUSH
70534: LD_INT 102
70536: PUSH
70537: LD_INT 103
70539: PUSH
70540: LD_INT 105
70542: PUSH
70543: LD_INT 106
70545: PUSH
70546: LD_INT 108
70548: PUSH
70549: LD_INT 112
70551: PUSH
70552: LD_INT 116
70554: PUSH
70555: LD_INT 117
70557: PUSH
70558: LD_INT 118
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: ST_TO_ADDR
70577: GO 72980
70579: LD_INT 8
70581: DOUBLE
70582: EQUAL
70583: IFTRUE 70587
70585: GO 70727
70587: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
70588: LD_ADDR_VAR 0 2
70592: PUSH
70593: LD_INT 2
70595: PUSH
70596: LD_INT 4
70598: PUSH
70599: LD_INT 5
70601: PUSH
70602: LD_INT 6
70604: PUSH
70605: LD_INT 7
70607: PUSH
70608: LD_INT 8
70610: PUSH
70611: LD_INT 11
70613: PUSH
70614: LD_INT 12
70616: PUSH
70617: LD_INT 15
70619: PUSH
70620: LD_INT 16
70622: PUSH
70623: LD_INT 20
70625: PUSH
70626: LD_INT 21
70628: PUSH
70629: LD_INT 22
70631: PUSH
70632: LD_INT 23
70634: PUSH
70635: LD_INT 25
70637: PUSH
70638: LD_INT 26
70640: PUSH
70641: LD_INT 30
70643: PUSH
70644: LD_INT 31
70646: PUSH
70647: LD_INT 32
70649: PUSH
70650: LD_INT 36
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: PUSH
70675: LD_INT 101
70677: PUSH
70678: LD_INT 102
70680: PUSH
70681: LD_INT 103
70683: PUSH
70684: LD_INT 105
70686: PUSH
70687: LD_INT 106
70689: PUSH
70690: LD_INT 108
70692: PUSH
70693: LD_INT 109
70695: PUSH
70696: LD_INT 112
70698: PUSH
70699: LD_INT 116
70701: PUSH
70702: LD_INT 117
70704: PUSH
70705: LD_INT 118
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: ST_TO_ADDR
70725: GO 72980
70727: LD_INT 9
70729: DOUBLE
70730: EQUAL
70731: IFTRUE 70735
70733: GO 70883
70735: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
70736: LD_ADDR_VAR 0 2
70740: PUSH
70741: LD_INT 2
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: LD_INT 5
70749: PUSH
70750: LD_INT 6
70752: PUSH
70753: LD_INT 7
70755: PUSH
70756: LD_INT 8
70758: PUSH
70759: LD_INT 11
70761: PUSH
70762: LD_INT 12
70764: PUSH
70765: LD_INT 15
70767: PUSH
70768: LD_INT 16
70770: PUSH
70771: LD_INT 20
70773: PUSH
70774: LD_INT 21
70776: PUSH
70777: LD_INT 22
70779: PUSH
70780: LD_INT 23
70782: PUSH
70783: LD_INT 25
70785: PUSH
70786: LD_INT 26
70788: PUSH
70789: LD_INT 28
70791: PUSH
70792: LD_INT 30
70794: PUSH
70795: LD_INT 31
70797: PUSH
70798: LD_INT 32
70800: PUSH
70801: LD_INT 36
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 101
70829: PUSH
70830: LD_INT 102
70832: PUSH
70833: LD_INT 103
70835: PUSH
70836: LD_INT 105
70838: PUSH
70839: LD_INT 106
70841: PUSH
70842: LD_INT 108
70844: PUSH
70845: LD_INT 109
70847: PUSH
70848: LD_INT 112
70850: PUSH
70851: LD_INT 114
70853: PUSH
70854: LD_INT 116
70856: PUSH
70857: LD_INT 117
70859: PUSH
70860: LD_INT 118
70862: PUSH
70863: EMPTY
70864: LIST
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: ST_TO_ADDR
70881: GO 72980
70883: LD_INT 10
70885: DOUBLE
70886: EQUAL
70887: IFTRUE 70891
70889: GO 71087
70891: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
70892: LD_ADDR_VAR 0 2
70896: PUSH
70897: LD_INT 2
70899: PUSH
70900: LD_INT 4
70902: PUSH
70903: LD_INT 5
70905: PUSH
70906: LD_INT 6
70908: PUSH
70909: LD_INT 7
70911: PUSH
70912: LD_INT 8
70914: PUSH
70915: LD_INT 9
70917: PUSH
70918: LD_INT 10
70920: PUSH
70921: LD_INT 11
70923: PUSH
70924: LD_INT 12
70926: PUSH
70927: LD_INT 13
70929: PUSH
70930: LD_INT 14
70932: PUSH
70933: LD_INT 15
70935: PUSH
70936: LD_INT 16
70938: PUSH
70939: LD_INT 17
70941: PUSH
70942: LD_INT 18
70944: PUSH
70945: LD_INT 19
70947: PUSH
70948: LD_INT 20
70950: PUSH
70951: LD_INT 21
70953: PUSH
70954: LD_INT 22
70956: PUSH
70957: LD_INT 23
70959: PUSH
70960: LD_INT 24
70962: PUSH
70963: LD_INT 25
70965: PUSH
70966: LD_INT 26
70968: PUSH
70969: LD_INT 28
70971: PUSH
70972: LD_INT 30
70974: PUSH
70975: LD_INT 31
70977: PUSH
70978: LD_INT 32
70980: PUSH
70981: LD_INT 36
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 101
71017: PUSH
71018: LD_INT 102
71020: PUSH
71021: LD_INT 103
71023: PUSH
71024: LD_INT 104
71026: PUSH
71027: LD_INT 105
71029: PUSH
71030: LD_INT 106
71032: PUSH
71033: LD_INT 107
71035: PUSH
71036: LD_INT 108
71038: PUSH
71039: LD_INT 109
71041: PUSH
71042: LD_INT 110
71044: PUSH
71045: LD_INT 111
71047: PUSH
71048: LD_INT 112
71050: PUSH
71051: LD_INT 114
71053: PUSH
71054: LD_INT 116
71056: PUSH
71057: LD_INT 117
71059: PUSH
71060: LD_INT 118
71062: PUSH
71063: EMPTY
71064: LIST
71065: LIST
71066: LIST
71067: LIST
71068: LIST
71069: LIST
71070: LIST
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: ST_TO_ADDR
71085: GO 72980
71087: LD_INT 11
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71095
71093: GO 71299
71095: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
71096: LD_ADDR_VAR 0 2
71100: PUSH
71101: LD_INT 2
71103: PUSH
71104: LD_INT 3
71106: PUSH
71107: LD_INT 4
71109: PUSH
71110: LD_INT 5
71112: PUSH
71113: LD_INT 6
71115: PUSH
71116: LD_INT 7
71118: PUSH
71119: LD_INT 8
71121: PUSH
71122: LD_INT 9
71124: PUSH
71125: LD_INT 10
71127: PUSH
71128: LD_INT 11
71130: PUSH
71131: LD_INT 12
71133: PUSH
71134: LD_INT 13
71136: PUSH
71137: LD_INT 14
71139: PUSH
71140: LD_INT 15
71142: PUSH
71143: LD_INT 16
71145: PUSH
71146: LD_INT 17
71148: PUSH
71149: LD_INT 18
71151: PUSH
71152: LD_INT 19
71154: PUSH
71155: LD_INT 20
71157: PUSH
71158: LD_INT 21
71160: PUSH
71161: LD_INT 22
71163: PUSH
71164: LD_INT 23
71166: PUSH
71167: LD_INT 24
71169: PUSH
71170: LD_INT 25
71172: PUSH
71173: LD_INT 26
71175: PUSH
71176: LD_INT 28
71178: PUSH
71179: LD_INT 30
71181: PUSH
71182: LD_INT 31
71184: PUSH
71185: LD_INT 32
71187: PUSH
71188: LD_INT 34
71190: PUSH
71191: LD_INT 36
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 101
71229: PUSH
71230: LD_INT 102
71232: PUSH
71233: LD_INT 103
71235: PUSH
71236: LD_INT 104
71238: PUSH
71239: LD_INT 105
71241: PUSH
71242: LD_INT 106
71244: PUSH
71245: LD_INT 107
71247: PUSH
71248: LD_INT 108
71250: PUSH
71251: LD_INT 109
71253: PUSH
71254: LD_INT 110
71256: PUSH
71257: LD_INT 111
71259: PUSH
71260: LD_INT 112
71262: PUSH
71263: LD_INT 114
71265: PUSH
71266: LD_INT 116
71268: PUSH
71269: LD_INT 117
71271: PUSH
71272: LD_INT 118
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: LIST
71287: LIST
71288: LIST
71289: LIST
71290: LIST
71291: LIST
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: ST_TO_ADDR
71297: GO 72980
71299: LD_INT 12
71301: DOUBLE
71302: EQUAL
71303: IFTRUE 71307
71305: GO 71527
71307: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
71308: LD_ADDR_VAR 0 2
71312: PUSH
71313: LD_INT 1
71315: PUSH
71316: LD_INT 2
71318: PUSH
71319: LD_INT 3
71321: PUSH
71322: LD_INT 4
71324: PUSH
71325: LD_INT 5
71327: PUSH
71328: LD_INT 6
71330: PUSH
71331: LD_INT 7
71333: PUSH
71334: LD_INT 8
71336: PUSH
71337: LD_INT 9
71339: PUSH
71340: LD_INT 10
71342: PUSH
71343: LD_INT 11
71345: PUSH
71346: LD_INT 12
71348: PUSH
71349: LD_INT 13
71351: PUSH
71352: LD_INT 14
71354: PUSH
71355: LD_INT 15
71357: PUSH
71358: LD_INT 16
71360: PUSH
71361: LD_INT 17
71363: PUSH
71364: LD_INT 18
71366: PUSH
71367: LD_INT 19
71369: PUSH
71370: LD_INT 20
71372: PUSH
71373: LD_INT 21
71375: PUSH
71376: LD_INT 22
71378: PUSH
71379: LD_INT 23
71381: PUSH
71382: LD_INT 24
71384: PUSH
71385: LD_INT 25
71387: PUSH
71388: LD_INT 26
71390: PUSH
71391: LD_INT 27
71393: PUSH
71394: LD_INT 28
71396: PUSH
71397: LD_INT 30
71399: PUSH
71400: LD_INT 31
71402: PUSH
71403: LD_INT 32
71405: PUSH
71406: LD_INT 33
71408: PUSH
71409: LD_INT 34
71411: PUSH
71412: LD_INT 36
71414: PUSH
71415: EMPTY
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 101
71453: PUSH
71454: LD_INT 102
71456: PUSH
71457: LD_INT 103
71459: PUSH
71460: LD_INT 104
71462: PUSH
71463: LD_INT 105
71465: PUSH
71466: LD_INT 106
71468: PUSH
71469: LD_INT 107
71471: PUSH
71472: LD_INT 108
71474: PUSH
71475: LD_INT 109
71477: PUSH
71478: LD_INT 110
71480: PUSH
71481: LD_INT 111
71483: PUSH
71484: LD_INT 112
71486: PUSH
71487: LD_INT 113
71489: PUSH
71490: LD_INT 114
71492: PUSH
71493: LD_INT 116
71495: PUSH
71496: LD_INT 117
71498: PUSH
71499: LD_INT 118
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: ST_TO_ADDR
71525: GO 72980
71527: LD_INT 13
71529: DOUBLE
71530: EQUAL
71531: IFTRUE 71535
71533: GO 71743
71535: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
71536: LD_ADDR_VAR 0 2
71540: PUSH
71541: LD_INT 1
71543: PUSH
71544: LD_INT 2
71546: PUSH
71547: LD_INT 3
71549: PUSH
71550: LD_INT 4
71552: PUSH
71553: LD_INT 5
71555: PUSH
71556: LD_INT 8
71558: PUSH
71559: LD_INT 9
71561: PUSH
71562: LD_INT 10
71564: PUSH
71565: LD_INT 11
71567: PUSH
71568: LD_INT 12
71570: PUSH
71571: LD_INT 14
71573: PUSH
71574: LD_INT 15
71576: PUSH
71577: LD_INT 16
71579: PUSH
71580: LD_INT 17
71582: PUSH
71583: LD_INT 18
71585: PUSH
71586: LD_INT 19
71588: PUSH
71589: LD_INT 20
71591: PUSH
71592: LD_INT 21
71594: PUSH
71595: LD_INT 22
71597: PUSH
71598: LD_INT 23
71600: PUSH
71601: LD_INT 24
71603: PUSH
71604: LD_INT 25
71606: PUSH
71607: LD_INT 26
71609: PUSH
71610: LD_INT 27
71612: PUSH
71613: LD_INT 28
71615: PUSH
71616: LD_INT 30
71618: PUSH
71619: LD_INT 31
71621: PUSH
71622: LD_INT 32
71624: PUSH
71625: LD_INT 33
71627: PUSH
71628: LD_INT 34
71630: PUSH
71631: LD_INT 36
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: LIST
71638: LIST
71639: LIST
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 101
71669: PUSH
71670: LD_INT 102
71672: PUSH
71673: LD_INT 103
71675: PUSH
71676: LD_INT 104
71678: PUSH
71679: LD_INT 105
71681: PUSH
71682: LD_INT 106
71684: PUSH
71685: LD_INT 107
71687: PUSH
71688: LD_INT 108
71690: PUSH
71691: LD_INT 109
71693: PUSH
71694: LD_INT 110
71696: PUSH
71697: LD_INT 111
71699: PUSH
71700: LD_INT 112
71702: PUSH
71703: LD_INT 113
71705: PUSH
71706: LD_INT 114
71708: PUSH
71709: LD_INT 116
71711: PUSH
71712: LD_INT 117
71714: PUSH
71715: LD_INT 118
71717: PUSH
71718: EMPTY
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: PUSH
71737: EMPTY
71738: LIST
71739: LIST
71740: ST_TO_ADDR
71741: GO 72980
71743: LD_INT 14
71745: DOUBLE
71746: EQUAL
71747: IFTRUE 71751
71749: GO 71975
71751: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
71752: LD_ADDR_VAR 0 2
71756: PUSH
71757: LD_INT 1
71759: PUSH
71760: LD_INT 2
71762: PUSH
71763: LD_INT 3
71765: PUSH
71766: LD_INT 4
71768: PUSH
71769: LD_INT 5
71771: PUSH
71772: LD_INT 6
71774: PUSH
71775: LD_INT 7
71777: PUSH
71778: LD_INT 8
71780: PUSH
71781: LD_INT 9
71783: PUSH
71784: LD_INT 10
71786: PUSH
71787: LD_INT 11
71789: PUSH
71790: LD_INT 12
71792: PUSH
71793: LD_INT 13
71795: PUSH
71796: LD_INT 14
71798: PUSH
71799: LD_INT 15
71801: PUSH
71802: LD_INT 16
71804: PUSH
71805: LD_INT 17
71807: PUSH
71808: LD_INT 18
71810: PUSH
71811: LD_INT 19
71813: PUSH
71814: LD_INT 20
71816: PUSH
71817: LD_INT 21
71819: PUSH
71820: LD_INT 22
71822: PUSH
71823: LD_INT 23
71825: PUSH
71826: LD_INT 24
71828: PUSH
71829: LD_INT 25
71831: PUSH
71832: LD_INT 26
71834: PUSH
71835: LD_INT 27
71837: PUSH
71838: LD_INT 28
71840: PUSH
71841: LD_INT 29
71843: PUSH
71844: LD_INT 30
71846: PUSH
71847: LD_INT 31
71849: PUSH
71850: LD_INT 32
71852: PUSH
71853: LD_INT 33
71855: PUSH
71856: LD_INT 34
71858: PUSH
71859: LD_INT 36
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: PUSH
71899: LD_INT 101
71901: PUSH
71902: LD_INT 102
71904: PUSH
71905: LD_INT 103
71907: PUSH
71908: LD_INT 104
71910: PUSH
71911: LD_INT 105
71913: PUSH
71914: LD_INT 106
71916: PUSH
71917: LD_INT 107
71919: PUSH
71920: LD_INT 108
71922: PUSH
71923: LD_INT 109
71925: PUSH
71926: LD_INT 110
71928: PUSH
71929: LD_INT 111
71931: PUSH
71932: LD_INT 112
71934: PUSH
71935: LD_INT 113
71937: PUSH
71938: LD_INT 114
71940: PUSH
71941: LD_INT 116
71943: PUSH
71944: LD_INT 117
71946: PUSH
71947: LD_INT 118
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: PUSH
71969: EMPTY
71970: LIST
71971: LIST
71972: ST_TO_ADDR
71973: GO 72980
71975: LD_INT 15
71977: DOUBLE
71978: EQUAL
71979: IFTRUE 71983
71981: GO 72207
71983: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
71984: LD_ADDR_VAR 0 2
71988: PUSH
71989: LD_INT 1
71991: PUSH
71992: LD_INT 2
71994: PUSH
71995: LD_INT 3
71997: PUSH
71998: LD_INT 4
72000: PUSH
72001: LD_INT 5
72003: PUSH
72004: LD_INT 6
72006: PUSH
72007: LD_INT 7
72009: PUSH
72010: LD_INT 8
72012: PUSH
72013: LD_INT 9
72015: PUSH
72016: LD_INT 10
72018: PUSH
72019: LD_INT 11
72021: PUSH
72022: LD_INT 12
72024: PUSH
72025: LD_INT 13
72027: PUSH
72028: LD_INT 14
72030: PUSH
72031: LD_INT 15
72033: PUSH
72034: LD_INT 16
72036: PUSH
72037: LD_INT 17
72039: PUSH
72040: LD_INT 18
72042: PUSH
72043: LD_INT 19
72045: PUSH
72046: LD_INT 20
72048: PUSH
72049: LD_INT 21
72051: PUSH
72052: LD_INT 22
72054: PUSH
72055: LD_INT 23
72057: PUSH
72058: LD_INT 24
72060: PUSH
72061: LD_INT 25
72063: PUSH
72064: LD_INT 26
72066: PUSH
72067: LD_INT 27
72069: PUSH
72070: LD_INT 28
72072: PUSH
72073: LD_INT 29
72075: PUSH
72076: LD_INT 30
72078: PUSH
72079: LD_INT 31
72081: PUSH
72082: LD_INT 32
72084: PUSH
72085: LD_INT 33
72087: PUSH
72088: LD_INT 34
72090: PUSH
72091: LD_INT 36
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 101
72133: PUSH
72134: LD_INT 102
72136: PUSH
72137: LD_INT 103
72139: PUSH
72140: LD_INT 104
72142: PUSH
72143: LD_INT 105
72145: PUSH
72146: LD_INT 106
72148: PUSH
72149: LD_INT 107
72151: PUSH
72152: LD_INT 108
72154: PUSH
72155: LD_INT 109
72157: PUSH
72158: LD_INT 110
72160: PUSH
72161: LD_INT 111
72163: PUSH
72164: LD_INT 112
72166: PUSH
72167: LD_INT 113
72169: PUSH
72170: LD_INT 114
72172: PUSH
72173: LD_INT 116
72175: PUSH
72176: LD_INT 117
72178: PUSH
72179: LD_INT 118
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: ST_TO_ADDR
72205: GO 72980
72207: LD_INT 16
72209: DOUBLE
72210: EQUAL
72211: IFTRUE 72215
72213: GO 72351
72215: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72216: LD_ADDR_VAR 0 2
72220: PUSH
72221: LD_INT 2
72223: PUSH
72224: LD_INT 4
72226: PUSH
72227: LD_INT 5
72229: PUSH
72230: LD_INT 7
72232: PUSH
72233: LD_INT 11
72235: PUSH
72236: LD_INT 12
72238: PUSH
72239: LD_INT 15
72241: PUSH
72242: LD_INT 16
72244: PUSH
72245: LD_INT 20
72247: PUSH
72248: LD_INT 21
72250: PUSH
72251: LD_INT 22
72253: PUSH
72254: LD_INT 23
72256: PUSH
72257: LD_INT 25
72259: PUSH
72260: LD_INT 26
72262: PUSH
72263: LD_INT 30
72265: PUSH
72266: LD_INT 31
72268: PUSH
72269: LD_INT 32
72271: PUSH
72272: LD_INT 33
72274: PUSH
72275: LD_INT 34
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 101
72301: PUSH
72302: LD_INT 102
72304: PUSH
72305: LD_INT 103
72307: PUSH
72308: LD_INT 106
72310: PUSH
72311: LD_INT 108
72313: PUSH
72314: LD_INT 112
72316: PUSH
72317: LD_INT 113
72319: PUSH
72320: LD_INT 114
72322: PUSH
72323: LD_INT 116
72325: PUSH
72326: LD_INT 117
72328: PUSH
72329: LD_INT 118
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: ST_TO_ADDR
72349: GO 72980
72351: LD_INT 17
72353: DOUBLE
72354: EQUAL
72355: IFTRUE 72359
72357: GO 72583
72359: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
72360: LD_ADDR_VAR 0 2
72364: PUSH
72365: LD_INT 1
72367: PUSH
72368: LD_INT 2
72370: PUSH
72371: LD_INT 3
72373: PUSH
72374: LD_INT 4
72376: PUSH
72377: LD_INT 5
72379: PUSH
72380: LD_INT 6
72382: PUSH
72383: LD_INT 7
72385: PUSH
72386: LD_INT 8
72388: PUSH
72389: LD_INT 9
72391: PUSH
72392: LD_INT 10
72394: PUSH
72395: LD_INT 11
72397: PUSH
72398: LD_INT 12
72400: PUSH
72401: LD_INT 13
72403: PUSH
72404: LD_INT 14
72406: PUSH
72407: LD_INT 15
72409: PUSH
72410: LD_INT 16
72412: PUSH
72413: LD_INT 17
72415: PUSH
72416: LD_INT 18
72418: PUSH
72419: LD_INT 19
72421: PUSH
72422: LD_INT 20
72424: PUSH
72425: LD_INT 21
72427: PUSH
72428: LD_INT 22
72430: PUSH
72431: LD_INT 23
72433: PUSH
72434: LD_INT 24
72436: PUSH
72437: LD_INT 25
72439: PUSH
72440: LD_INT 26
72442: PUSH
72443: LD_INT 27
72445: PUSH
72446: LD_INT 28
72448: PUSH
72449: LD_INT 29
72451: PUSH
72452: LD_INT 30
72454: PUSH
72455: LD_INT 31
72457: PUSH
72458: LD_INT 32
72460: PUSH
72461: LD_INT 33
72463: PUSH
72464: LD_INT 34
72466: PUSH
72467: LD_INT 36
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 101
72509: PUSH
72510: LD_INT 102
72512: PUSH
72513: LD_INT 103
72515: PUSH
72516: LD_INT 104
72518: PUSH
72519: LD_INT 105
72521: PUSH
72522: LD_INT 106
72524: PUSH
72525: LD_INT 107
72527: PUSH
72528: LD_INT 108
72530: PUSH
72531: LD_INT 109
72533: PUSH
72534: LD_INT 110
72536: PUSH
72537: LD_INT 111
72539: PUSH
72540: LD_INT 112
72542: PUSH
72543: LD_INT 113
72545: PUSH
72546: LD_INT 114
72548: PUSH
72549: LD_INT 116
72551: PUSH
72552: LD_INT 117
72554: PUSH
72555: LD_INT 118
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: ST_TO_ADDR
72581: GO 72980
72583: LD_INT 18
72585: DOUBLE
72586: EQUAL
72587: IFTRUE 72591
72589: GO 72739
72591: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
72592: LD_ADDR_VAR 0 2
72596: PUSH
72597: LD_INT 2
72599: PUSH
72600: LD_INT 4
72602: PUSH
72603: LD_INT 5
72605: PUSH
72606: LD_INT 7
72608: PUSH
72609: LD_INT 11
72611: PUSH
72612: LD_INT 12
72614: PUSH
72615: LD_INT 15
72617: PUSH
72618: LD_INT 16
72620: PUSH
72621: LD_INT 20
72623: PUSH
72624: LD_INT 21
72626: PUSH
72627: LD_INT 22
72629: PUSH
72630: LD_INT 23
72632: PUSH
72633: LD_INT 25
72635: PUSH
72636: LD_INT 26
72638: PUSH
72639: LD_INT 30
72641: PUSH
72642: LD_INT 31
72644: PUSH
72645: LD_INT 32
72647: PUSH
72648: LD_INT 33
72650: PUSH
72651: LD_INT 34
72653: PUSH
72654: LD_INT 35
72656: PUSH
72657: LD_INT 36
72659: PUSH
72660: EMPTY
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 101
72685: PUSH
72686: LD_INT 102
72688: PUSH
72689: LD_INT 103
72691: PUSH
72692: LD_INT 106
72694: PUSH
72695: LD_INT 108
72697: PUSH
72698: LD_INT 112
72700: PUSH
72701: LD_INT 113
72703: PUSH
72704: LD_INT 114
72706: PUSH
72707: LD_INT 115
72709: PUSH
72710: LD_INT 116
72712: PUSH
72713: LD_INT 117
72715: PUSH
72716: LD_INT 118
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: ST_TO_ADDR
72737: GO 72980
72739: LD_INT 19
72741: DOUBLE
72742: EQUAL
72743: IFTRUE 72747
72745: GO 72979
72747: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
72748: LD_ADDR_VAR 0 2
72752: PUSH
72753: LD_INT 1
72755: PUSH
72756: LD_INT 2
72758: PUSH
72759: LD_INT 3
72761: PUSH
72762: LD_INT 4
72764: PUSH
72765: LD_INT 5
72767: PUSH
72768: LD_INT 6
72770: PUSH
72771: LD_INT 7
72773: PUSH
72774: LD_INT 8
72776: PUSH
72777: LD_INT 9
72779: PUSH
72780: LD_INT 10
72782: PUSH
72783: LD_INT 11
72785: PUSH
72786: LD_INT 12
72788: PUSH
72789: LD_INT 13
72791: PUSH
72792: LD_INT 14
72794: PUSH
72795: LD_INT 15
72797: PUSH
72798: LD_INT 16
72800: PUSH
72801: LD_INT 17
72803: PUSH
72804: LD_INT 18
72806: PUSH
72807: LD_INT 19
72809: PUSH
72810: LD_INT 20
72812: PUSH
72813: LD_INT 21
72815: PUSH
72816: LD_INT 22
72818: PUSH
72819: LD_INT 23
72821: PUSH
72822: LD_INT 24
72824: PUSH
72825: LD_INT 25
72827: PUSH
72828: LD_INT 26
72830: PUSH
72831: LD_INT 27
72833: PUSH
72834: LD_INT 28
72836: PUSH
72837: LD_INT 29
72839: PUSH
72840: LD_INT 30
72842: PUSH
72843: LD_INT 31
72845: PUSH
72846: LD_INT 32
72848: PUSH
72849: LD_INT 33
72851: PUSH
72852: LD_INT 34
72854: PUSH
72855: LD_INT 35
72857: PUSH
72858: LD_INT 36
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 101
72901: PUSH
72902: LD_INT 102
72904: PUSH
72905: LD_INT 103
72907: PUSH
72908: LD_INT 104
72910: PUSH
72911: LD_INT 105
72913: PUSH
72914: LD_INT 106
72916: PUSH
72917: LD_INT 107
72919: PUSH
72920: LD_INT 108
72922: PUSH
72923: LD_INT 109
72925: PUSH
72926: LD_INT 110
72928: PUSH
72929: LD_INT 111
72931: PUSH
72932: LD_INT 112
72934: PUSH
72935: LD_INT 113
72937: PUSH
72938: LD_INT 114
72940: PUSH
72941: LD_INT 115
72943: PUSH
72944: LD_INT 116
72946: PUSH
72947: LD_INT 117
72949: PUSH
72950: LD_INT 118
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: LIST
72969: LIST
72970: LIST
72971: LIST
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: ST_TO_ADDR
72977: GO 72980
72979: POP
// end else
72980: GO 73211
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
72982: LD_ADDR_VAR 0 2
72986: PUSH
72987: LD_INT 1
72989: PUSH
72990: LD_INT 2
72992: PUSH
72993: LD_INT 3
72995: PUSH
72996: LD_INT 4
72998: PUSH
72999: LD_INT 5
73001: PUSH
73002: LD_INT 6
73004: PUSH
73005: LD_INT 7
73007: PUSH
73008: LD_INT 8
73010: PUSH
73011: LD_INT 9
73013: PUSH
73014: LD_INT 10
73016: PUSH
73017: LD_INT 11
73019: PUSH
73020: LD_INT 12
73022: PUSH
73023: LD_INT 13
73025: PUSH
73026: LD_INT 14
73028: PUSH
73029: LD_INT 15
73031: PUSH
73032: LD_INT 16
73034: PUSH
73035: LD_INT 17
73037: PUSH
73038: LD_INT 18
73040: PUSH
73041: LD_INT 19
73043: PUSH
73044: LD_INT 20
73046: PUSH
73047: LD_INT 21
73049: PUSH
73050: LD_INT 22
73052: PUSH
73053: LD_INT 23
73055: PUSH
73056: LD_INT 24
73058: PUSH
73059: LD_INT 25
73061: PUSH
73062: LD_INT 26
73064: PUSH
73065: LD_INT 27
73067: PUSH
73068: LD_INT 28
73070: PUSH
73071: LD_INT 29
73073: PUSH
73074: LD_INT 30
73076: PUSH
73077: LD_INT 31
73079: PUSH
73080: LD_INT 32
73082: PUSH
73083: LD_INT 33
73085: PUSH
73086: LD_INT 34
73088: PUSH
73089: LD_INT 35
73091: PUSH
73092: LD_INT 36
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: LIST
73123: LIST
73124: LIST
73125: LIST
73126: LIST
73127: LIST
73128: LIST
73129: LIST
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 101
73135: PUSH
73136: LD_INT 102
73138: PUSH
73139: LD_INT 103
73141: PUSH
73142: LD_INT 104
73144: PUSH
73145: LD_INT 105
73147: PUSH
73148: LD_INT 106
73150: PUSH
73151: LD_INT 107
73153: PUSH
73154: LD_INT 108
73156: PUSH
73157: LD_INT 109
73159: PUSH
73160: LD_INT 110
73162: PUSH
73163: LD_INT 111
73165: PUSH
73166: LD_INT 112
73168: PUSH
73169: LD_INT 113
73171: PUSH
73172: LD_INT 114
73174: PUSH
73175: LD_INT 115
73177: PUSH
73178: LD_INT 116
73180: PUSH
73181: LD_INT 117
73183: PUSH
73184: LD_INT 118
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: ST_TO_ADDR
// if result then
73211: LD_VAR 0 2
73215: IFFALSE 74001
// begin normal :=  ;
73217: LD_ADDR_VAR 0 5
73221: PUSH
73222: LD_STRING 
73224: ST_TO_ADDR
// hardcore :=  ;
73225: LD_ADDR_VAR 0 6
73229: PUSH
73230: LD_STRING 
73232: ST_TO_ADDR
// active :=  ;
73233: LD_ADDR_VAR 0 7
73237: PUSH
73238: LD_STRING 
73240: ST_TO_ADDR
// for i = 1 to normalCounter do
73241: LD_ADDR_VAR 0 8
73245: PUSH
73246: DOUBLE
73247: LD_INT 1
73249: DEC
73250: ST_TO_ADDR
73251: LD_EXP 67
73255: PUSH
73256: FOR_TO
73257: IFFALSE 73358
// begin tmp := 0 ;
73259: LD_ADDR_VAR 0 3
73263: PUSH
73264: LD_STRING 0
73266: ST_TO_ADDR
// if result [ 1 ] then
73267: LD_VAR 0 2
73271: PUSH
73272: LD_INT 1
73274: ARRAY
73275: IFFALSE 73340
// if result [ 1 ] [ 1 ] = i then
73277: LD_VAR 0 2
73281: PUSH
73282: LD_INT 1
73284: ARRAY
73285: PUSH
73286: LD_INT 1
73288: ARRAY
73289: PUSH
73290: LD_VAR 0 8
73294: EQUAL
73295: IFFALSE 73340
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73297: LD_ADDR_VAR 0 2
73301: PUSH
73302: LD_VAR 0 2
73306: PPUSH
73307: LD_INT 1
73309: PPUSH
73310: LD_VAR 0 2
73314: PUSH
73315: LD_INT 1
73317: ARRAY
73318: PPUSH
73319: LD_INT 1
73321: PPUSH
73322: CALL_OW 3
73326: PPUSH
73327: CALL_OW 1
73331: ST_TO_ADDR
// tmp := 1 ;
73332: LD_ADDR_VAR 0 3
73336: PUSH
73337: LD_STRING 1
73339: ST_TO_ADDR
// end ; normal := normal & tmp ;
73340: LD_ADDR_VAR 0 5
73344: PUSH
73345: LD_VAR 0 5
73349: PUSH
73350: LD_VAR 0 3
73354: STR
73355: ST_TO_ADDR
// end ;
73356: GO 73256
73358: POP
73359: POP
// for i = 1 to hardcoreCounter do
73360: LD_ADDR_VAR 0 8
73364: PUSH
73365: DOUBLE
73366: LD_INT 1
73368: DEC
73369: ST_TO_ADDR
73370: LD_EXP 68
73374: PUSH
73375: FOR_TO
73376: IFFALSE 73481
// begin tmp := 0 ;
73378: LD_ADDR_VAR 0 3
73382: PUSH
73383: LD_STRING 0
73385: ST_TO_ADDR
// if result [ 2 ] then
73386: LD_VAR 0 2
73390: PUSH
73391: LD_INT 2
73393: ARRAY
73394: IFFALSE 73463
// if result [ 2 ] [ 1 ] = 100 + i then
73396: LD_VAR 0 2
73400: PUSH
73401: LD_INT 2
73403: ARRAY
73404: PUSH
73405: LD_INT 1
73407: ARRAY
73408: PUSH
73409: LD_INT 100
73411: PUSH
73412: LD_VAR 0 8
73416: PLUS
73417: EQUAL
73418: IFFALSE 73463
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
73420: LD_ADDR_VAR 0 2
73424: PUSH
73425: LD_VAR 0 2
73429: PPUSH
73430: LD_INT 2
73432: PPUSH
73433: LD_VAR 0 2
73437: PUSH
73438: LD_INT 2
73440: ARRAY
73441: PPUSH
73442: LD_INT 1
73444: PPUSH
73445: CALL_OW 3
73449: PPUSH
73450: CALL_OW 1
73454: ST_TO_ADDR
// tmp := 1 ;
73455: LD_ADDR_VAR 0 3
73459: PUSH
73460: LD_STRING 1
73462: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
73463: LD_ADDR_VAR 0 6
73467: PUSH
73468: LD_VAR 0 6
73472: PUSH
73473: LD_VAR 0 3
73477: STR
73478: ST_TO_ADDR
// end ;
73479: GO 73375
73481: POP
73482: POP
// if isGameLoad then
73483: LD_VAR 0 1
73487: IFFALSE 73962
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
73489: LD_ADDR_VAR 0 4
73493: PUSH
73494: LD_EXP 71
73498: PUSH
73499: LD_EXP 70
73503: PUSH
73504: LD_EXP 72
73508: PUSH
73509: LD_EXP 69
73513: PUSH
73514: LD_EXP 73
73518: PUSH
73519: LD_EXP 74
73523: PUSH
73524: LD_EXP 75
73528: PUSH
73529: LD_EXP 76
73533: PUSH
73534: LD_EXP 77
73538: PUSH
73539: LD_EXP 78
73543: PUSH
73544: LD_EXP 79
73548: PUSH
73549: LD_EXP 80
73553: PUSH
73554: LD_EXP 81
73558: PUSH
73559: LD_EXP 82
73563: PUSH
73564: LD_EXP 90
73568: PUSH
73569: LD_EXP 91
73573: PUSH
73574: LD_EXP 92
73578: PUSH
73579: LD_EXP 93
73583: PUSH
73584: LD_EXP 95
73588: PUSH
73589: LD_EXP 96
73593: PUSH
73594: LD_EXP 97
73598: PUSH
73599: LD_EXP 100
73603: PUSH
73604: LD_EXP 102
73608: PUSH
73609: LD_EXP 103
73613: PUSH
73614: LD_EXP 104
73618: PUSH
73619: LD_EXP 106
73623: PUSH
73624: LD_EXP 107
73628: PUSH
73629: LD_EXP 110
73633: PUSH
73634: LD_EXP 111
73638: PUSH
73639: LD_EXP 112
73643: PUSH
73644: LD_EXP 113
73648: PUSH
73649: LD_EXP 114
73653: PUSH
73654: LD_EXP 115
73658: PUSH
73659: LD_EXP 116
73663: PUSH
73664: LD_EXP 117
73668: PUSH
73669: LD_EXP 118
73673: PUSH
73674: LD_EXP 83
73678: PUSH
73679: LD_EXP 84
73683: PUSH
73684: LD_EXP 87
73688: PUSH
73689: LD_EXP 88
73693: PUSH
73694: LD_EXP 89
73698: PUSH
73699: LD_EXP 85
73703: PUSH
73704: LD_EXP 86
73708: PUSH
73709: LD_EXP 94
73713: PUSH
73714: LD_EXP 98
73718: PUSH
73719: LD_EXP 99
73723: PUSH
73724: LD_EXP 101
73728: PUSH
73729: LD_EXP 105
73733: PUSH
73734: LD_EXP 108
73738: PUSH
73739: LD_EXP 109
73743: PUSH
73744: LD_EXP 119
73748: PUSH
73749: LD_EXP 120
73753: PUSH
73754: LD_EXP 121
73758: PUSH
73759: LD_EXP 122
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: ST_TO_ADDR
// tmp :=  ;
73820: LD_ADDR_VAR 0 3
73824: PUSH
73825: LD_STRING 
73827: ST_TO_ADDR
// for i = 1 to normalCounter do
73828: LD_ADDR_VAR 0 8
73832: PUSH
73833: DOUBLE
73834: LD_INT 1
73836: DEC
73837: ST_TO_ADDR
73838: LD_EXP 67
73842: PUSH
73843: FOR_TO
73844: IFFALSE 73880
// begin if flags [ i ] then
73846: LD_VAR 0 4
73850: PUSH
73851: LD_VAR 0 8
73855: ARRAY
73856: IFFALSE 73878
// tmp := tmp & i & ; ;
73858: LD_ADDR_VAR 0 3
73862: PUSH
73863: LD_VAR 0 3
73867: PUSH
73868: LD_VAR 0 8
73872: STR
73873: PUSH
73874: LD_STRING ;
73876: STR
73877: ST_TO_ADDR
// end ;
73878: GO 73843
73880: POP
73881: POP
// for i = 1 to hardcoreCounter do
73882: LD_ADDR_VAR 0 8
73886: PUSH
73887: DOUBLE
73888: LD_INT 1
73890: DEC
73891: ST_TO_ADDR
73892: LD_EXP 68
73896: PUSH
73897: FOR_TO
73898: IFFALSE 73944
// begin if flags [ normalCounter + i ] then
73900: LD_VAR 0 4
73904: PUSH
73905: LD_EXP 67
73909: PUSH
73910: LD_VAR 0 8
73914: PLUS
73915: ARRAY
73916: IFFALSE 73942
// tmp := tmp & ( 100 + i ) & ; ;
73918: LD_ADDR_VAR 0 3
73922: PUSH
73923: LD_VAR 0 3
73927: PUSH
73928: LD_INT 100
73930: PUSH
73931: LD_VAR 0 8
73935: PLUS
73936: STR
73937: PUSH
73938: LD_STRING ;
73940: STR
73941: ST_TO_ADDR
// end ;
73942: GO 73897
73944: POP
73945: POP
// if tmp then
73946: LD_VAR 0 3
73950: IFFALSE 73962
// active := tmp ;
73952: LD_ADDR_VAR 0 7
73956: PUSH
73957: LD_VAR 0 3
73961: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
73962: LD_STRING getStreamItemsFromMission("
73964: PUSH
73965: LD_VAR 0 5
73969: STR
73970: PUSH
73971: LD_STRING ","
73973: STR
73974: PUSH
73975: LD_VAR 0 6
73979: STR
73980: PUSH
73981: LD_STRING ","
73983: STR
73984: PUSH
73985: LD_VAR 0 7
73989: STR
73990: PUSH
73991: LD_STRING ")
73993: STR
73994: PPUSH
73995: CALL_OW 559
// end else
73999: GO 74008
// ToLua ( getStreamItemsFromMission("","","") ) ;
74001: LD_STRING getStreamItemsFromMission("","","")
74003: PPUSH
74004: CALL_OW 559
// end ;
74008: LD_VAR 0 2
74012: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
74013: LD_EXP 66
74017: PUSH
74018: LD_EXP 71
74022: AND
74023: IFFALSE 74147
74025: GO 74027
74027: DISABLE
74028: LD_INT 0
74030: PPUSH
74031: PPUSH
// begin enable ;
74032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
74033: LD_ADDR_VAR 0 2
74037: PUSH
74038: LD_INT 22
74040: PUSH
74041: LD_OWVAR 2
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 2
74052: PUSH
74053: LD_INT 34
74055: PUSH
74056: LD_INT 7
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PUSH
74063: LD_INT 34
74065: PUSH
74066: LD_INT 45
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 34
74075: PUSH
74076: LD_INT 28
74078: PUSH
74079: EMPTY
74080: LIST
74081: LIST
74082: PUSH
74083: LD_INT 34
74085: PUSH
74086: LD_INT 47
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: PUSH
74100: EMPTY
74101: LIST
74102: LIST
74103: PPUSH
74104: CALL_OW 69
74108: ST_TO_ADDR
// if not tmp then
74109: LD_VAR 0 2
74113: NOT
74114: IFFALSE 74118
// exit ;
74116: GO 74147
// for i in tmp do
74118: LD_ADDR_VAR 0 1
74122: PUSH
74123: LD_VAR 0 2
74127: PUSH
74128: FOR_IN
74129: IFFALSE 74145
// begin SetLives ( i , 0 ) ;
74131: LD_VAR 0 1
74135: PPUSH
74136: LD_INT 0
74138: PPUSH
74139: CALL_OW 234
// end ;
74143: GO 74128
74145: POP
74146: POP
// end ;
74147: PPOPN 2
74149: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74150: LD_EXP 66
74154: PUSH
74155: LD_EXP 72
74159: AND
74160: IFFALSE 74244
74162: GO 74164
74164: DISABLE
74165: LD_INT 0
74167: PPUSH
74168: PPUSH
// begin enable ;
74169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74170: LD_ADDR_VAR 0 2
74174: PUSH
74175: LD_INT 22
74177: PUSH
74178: LD_OWVAR 2
74182: PUSH
74183: EMPTY
74184: LIST
74185: LIST
74186: PUSH
74187: LD_INT 32
74189: PUSH
74190: LD_INT 3
74192: PUSH
74193: EMPTY
74194: LIST
74195: LIST
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PPUSH
74201: CALL_OW 69
74205: ST_TO_ADDR
// if not tmp then
74206: LD_VAR 0 2
74210: NOT
74211: IFFALSE 74215
// exit ;
74213: GO 74244
// for i in tmp do
74215: LD_ADDR_VAR 0 1
74219: PUSH
74220: LD_VAR 0 2
74224: PUSH
74225: FOR_IN
74226: IFFALSE 74242
// begin SetLives ( i , 0 ) ;
74228: LD_VAR 0 1
74232: PPUSH
74233: LD_INT 0
74235: PPUSH
74236: CALL_OW 234
// end ;
74240: GO 74225
74242: POP
74243: POP
// end ;
74244: PPOPN 2
74246: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74247: LD_EXP 66
74251: PUSH
74252: LD_EXP 69
74256: AND
74257: IFFALSE 74350
74259: GO 74261
74261: DISABLE
74262: LD_INT 0
74264: PPUSH
// begin enable ;
74265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74266: LD_ADDR_VAR 0 1
74270: PUSH
74271: LD_INT 22
74273: PUSH
74274: LD_OWVAR 2
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: PUSH
74283: LD_INT 2
74285: PUSH
74286: LD_INT 25
74288: PUSH
74289: LD_INT 5
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: PUSH
74296: LD_INT 25
74298: PUSH
74299: LD_INT 9
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 25
74308: PUSH
74309: LD_INT 8
74311: PUSH
74312: EMPTY
74313: LIST
74314: LIST
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PPUSH
74326: CALL_OW 69
74330: PUSH
74331: FOR_IN
74332: IFFALSE 74348
// begin SetClass ( i , 1 ) ;
74334: LD_VAR 0 1
74338: PPUSH
74339: LD_INT 1
74341: PPUSH
74342: CALL_OW 336
// end ;
74346: GO 74331
74348: POP
74349: POP
// end ;
74350: PPOPN 1
74352: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
74353: LD_EXP 66
74357: PUSH
74358: LD_EXP 70
74362: AND
74363: PUSH
74364: LD_OWVAR 65
74368: PUSH
74369: LD_INT 7
74371: LESS
74372: AND
74373: IFFALSE 74387
74375: GO 74377
74377: DISABLE
// begin enable ;
74378: ENABLE
// game_speed := 7 ;
74379: LD_ADDR_OWVAR 65
74383: PUSH
74384: LD_INT 7
74386: ST_TO_ADDR
// end ;
74387: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
74388: LD_EXP 66
74392: PUSH
74393: LD_EXP 73
74397: AND
74398: IFFALSE 74600
74400: GO 74402
74402: DISABLE
74403: LD_INT 0
74405: PPUSH
74406: PPUSH
74407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
74408: LD_ADDR_VAR 0 3
74412: PUSH
74413: LD_INT 81
74415: PUSH
74416: LD_OWVAR 2
74420: PUSH
74421: EMPTY
74422: LIST
74423: LIST
74424: PUSH
74425: LD_INT 21
74427: PUSH
74428: LD_INT 1
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PPUSH
74439: CALL_OW 69
74443: ST_TO_ADDR
// if not tmp then
74444: LD_VAR 0 3
74448: NOT
74449: IFFALSE 74453
// exit ;
74451: GO 74600
// if tmp > 5 then
74453: LD_VAR 0 3
74457: PUSH
74458: LD_INT 5
74460: GREATER
74461: IFFALSE 74473
// k := 5 else
74463: LD_ADDR_VAR 0 2
74467: PUSH
74468: LD_INT 5
74470: ST_TO_ADDR
74471: GO 74483
// k := tmp ;
74473: LD_ADDR_VAR 0 2
74477: PUSH
74478: LD_VAR 0 3
74482: ST_TO_ADDR
// for i := 1 to k do
74483: LD_ADDR_VAR 0 1
74487: PUSH
74488: DOUBLE
74489: LD_INT 1
74491: DEC
74492: ST_TO_ADDR
74493: LD_VAR 0 2
74497: PUSH
74498: FOR_TO
74499: IFFALSE 74598
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
74501: LD_VAR 0 3
74505: PUSH
74506: LD_VAR 0 1
74510: ARRAY
74511: PPUSH
74512: LD_VAR 0 1
74516: PUSH
74517: LD_INT 4
74519: MOD
74520: PUSH
74521: LD_INT 1
74523: PLUS
74524: PPUSH
74525: CALL_OW 259
74529: PUSH
74530: LD_INT 10
74532: LESS
74533: IFFALSE 74596
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
74535: LD_VAR 0 3
74539: PUSH
74540: LD_VAR 0 1
74544: ARRAY
74545: PPUSH
74546: LD_VAR 0 1
74550: PUSH
74551: LD_INT 4
74553: MOD
74554: PUSH
74555: LD_INT 1
74557: PLUS
74558: PPUSH
74559: LD_VAR 0 3
74563: PUSH
74564: LD_VAR 0 1
74568: ARRAY
74569: PPUSH
74570: LD_VAR 0 1
74574: PUSH
74575: LD_INT 4
74577: MOD
74578: PUSH
74579: LD_INT 1
74581: PLUS
74582: PPUSH
74583: CALL_OW 259
74587: PUSH
74588: LD_INT 1
74590: PLUS
74591: PPUSH
74592: CALL_OW 237
74596: GO 74498
74598: POP
74599: POP
// end ;
74600: PPOPN 3
74602: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
74603: LD_EXP 66
74607: PUSH
74608: LD_EXP 74
74612: AND
74613: IFFALSE 74633
74615: GO 74617
74617: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
74618: LD_INT 4
74620: PPUSH
74621: LD_OWVAR 2
74625: PPUSH
74626: LD_INT 0
74628: PPUSH
74629: CALL_OW 324
74633: END
// every 0 0$1 trigger StreamModeActive and sShovel do
74634: LD_EXP 66
74638: PUSH
74639: LD_EXP 103
74643: AND
74644: IFFALSE 74664
74646: GO 74648
74648: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
74649: LD_INT 19
74651: PPUSH
74652: LD_OWVAR 2
74656: PPUSH
74657: LD_INT 0
74659: PPUSH
74660: CALL_OW 324
74664: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
74665: LD_EXP 66
74669: PUSH
74670: LD_EXP 75
74674: AND
74675: IFFALSE 74777
74677: GO 74679
74679: DISABLE
74680: LD_INT 0
74682: PPUSH
74683: PPUSH
// begin enable ;
74684: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
74685: LD_ADDR_VAR 0 2
74689: PUSH
74690: LD_INT 22
74692: PUSH
74693: LD_OWVAR 2
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 2
74704: PUSH
74705: LD_INT 34
74707: PUSH
74708: LD_INT 11
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 34
74717: PUSH
74718: LD_INT 30
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: LIST
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PPUSH
74734: CALL_OW 69
74738: ST_TO_ADDR
// if not tmp then
74739: LD_VAR 0 2
74743: NOT
74744: IFFALSE 74748
// exit ;
74746: GO 74777
// for i in tmp do
74748: LD_ADDR_VAR 0 1
74752: PUSH
74753: LD_VAR 0 2
74757: PUSH
74758: FOR_IN
74759: IFFALSE 74775
// begin SetLives ( i , 0 ) ;
74761: LD_VAR 0 1
74765: PPUSH
74766: LD_INT 0
74768: PPUSH
74769: CALL_OW 234
// end ;
74773: GO 74758
74775: POP
74776: POP
// end ;
74777: PPOPN 2
74779: END
// every 0 0$1 trigger StreamModeActive and sBunker do
74780: LD_EXP 66
74784: PUSH
74785: LD_EXP 76
74789: AND
74790: IFFALSE 74810
74792: GO 74794
74794: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
74795: LD_INT 32
74797: PPUSH
74798: LD_OWVAR 2
74802: PPUSH
74803: LD_INT 0
74805: PPUSH
74806: CALL_OW 324
74810: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
74811: LD_EXP 66
74815: PUSH
74816: LD_EXP 77
74820: AND
74821: IFFALSE 75002
74823: GO 74825
74825: DISABLE
74826: LD_INT 0
74828: PPUSH
74829: PPUSH
74830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
74831: LD_ADDR_VAR 0 2
74835: PUSH
74836: LD_INT 22
74838: PUSH
74839: LD_OWVAR 2
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 33
74850: PUSH
74851: LD_INT 3
74853: PUSH
74854: EMPTY
74855: LIST
74856: LIST
74857: PUSH
74858: EMPTY
74859: LIST
74860: LIST
74861: PPUSH
74862: CALL_OW 69
74866: ST_TO_ADDR
// if not tmp then
74867: LD_VAR 0 2
74871: NOT
74872: IFFALSE 74876
// exit ;
74874: GO 75002
// side := 0 ;
74876: LD_ADDR_VAR 0 3
74880: PUSH
74881: LD_INT 0
74883: ST_TO_ADDR
// for i := 1 to 8 do
74884: LD_ADDR_VAR 0 1
74888: PUSH
74889: DOUBLE
74890: LD_INT 1
74892: DEC
74893: ST_TO_ADDR
74894: LD_INT 8
74896: PUSH
74897: FOR_TO
74898: IFFALSE 74946
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
74900: LD_OWVAR 2
74904: PUSH
74905: LD_VAR 0 1
74909: NONEQUAL
74910: PUSH
74911: LD_OWVAR 2
74915: PPUSH
74916: LD_VAR 0 1
74920: PPUSH
74921: CALL_OW 81
74925: PUSH
74926: LD_INT 2
74928: EQUAL
74929: AND
74930: IFFALSE 74944
// begin side := i ;
74932: LD_ADDR_VAR 0 3
74936: PUSH
74937: LD_VAR 0 1
74941: ST_TO_ADDR
// break ;
74942: GO 74946
// end ;
74944: GO 74897
74946: POP
74947: POP
// if not side then
74948: LD_VAR 0 3
74952: NOT
74953: IFFALSE 74957
// exit ;
74955: GO 75002
// for i := 1 to tmp do
74957: LD_ADDR_VAR 0 1
74961: PUSH
74962: DOUBLE
74963: LD_INT 1
74965: DEC
74966: ST_TO_ADDR
74967: LD_VAR 0 2
74971: PUSH
74972: FOR_TO
74973: IFFALSE 75000
// if Prob ( 60 ) then
74975: LD_INT 60
74977: PPUSH
74978: CALL_OW 13
74982: IFFALSE 74998
// SetSide ( i , side ) ;
74984: LD_VAR 0 1
74988: PPUSH
74989: LD_VAR 0 3
74993: PPUSH
74994: CALL_OW 235
74998: GO 74972
75000: POP
75001: POP
// end ;
75002: PPOPN 3
75004: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
75005: LD_EXP 66
75009: PUSH
75010: LD_EXP 79
75014: AND
75015: IFFALSE 75134
75017: GO 75019
75019: DISABLE
75020: LD_INT 0
75022: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
75023: LD_ADDR_VAR 0 1
75027: PUSH
75028: LD_INT 22
75030: PUSH
75031: LD_OWVAR 2
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 21
75042: PUSH
75043: LD_INT 1
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 3
75052: PUSH
75053: LD_INT 23
75055: PUSH
75056: LD_INT 0
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: LIST
75071: PPUSH
75072: CALL_OW 69
75076: PUSH
75077: FOR_IN
75078: IFFALSE 75132
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
75080: LD_VAR 0 1
75084: PPUSH
75085: CALL_OW 257
75089: PUSH
75090: LD_INT 1
75092: PUSH
75093: LD_INT 2
75095: PUSH
75096: LD_INT 3
75098: PUSH
75099: LD_INT 4
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: IN
75108: IFFALSE 75130
// SetClass ( un , rand ( 1 , 4 ) ) ;
75110: LD_VAR 0 1
75114: PPUSH
75115: LD_INT 1
75117: PPUSH
75118: LD_INT 4
75120: PPUSH
75121: CALL_OW 12
75125: PPUSH
75126: CALL_OW 336
75130: GO 75077
75132: POP
75133: POP
// end ;
75134: PPOPN 1
75136: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75137: LD_EXP 66
75141: PUSH
75142: LD_EXP 78
75146: AND
75147: IFFALSE 75226
75149: GO 75151
75151: DISABLE
75152: LD_INT 0
75154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75155: LD_ADDR_VAR 0 1
75159: PUSH
75160: LD_INT 22
75162: PUSH
75163: LD_OWVAR 2
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 21
75174: PUSH
75175: LD_INT 3
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: EMPTY
75183: LIST
75184: LIST
75185: PPUSH
75186: CALL_OW 69
75190: ST_TO_ADDR
// if not tmp then
75191: LD_VAR 0 1
75195: NOT
75196: IFFALSE 75200
// exit ;
75198: GO 75226
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75200: LD_VAR 0 1
75204: PUSH
75205: LD_INT 1
75207: PPUSH
75208: LD_VAR 0 1
75212: PPUSH
75213: CALL_OW 12
75217: ARRAY
75218: PPUSH
75219: LD_INT 100
75221: PPUSH
75222: CALL_OW 234
// end ;
75226: PPOPN 1
75228: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75229: LD_EXP 66
75233: PUSH
75234: LD_EXP 80
75238: AND
75239: IFFALSE 75337
75241: GO 75243
75243: DISABLE
75244: LD_INT 0
75246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75247: LD_ADDR_VAR 0 1
75251: PUSH
75252: LD_INT 22
75254: PUSH
75255: LD_OWVAR 2
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: PUSH
75264: LD_INT 21
75266: PUSH
75267: LD_INT 1
75269: PUSH
75270: EMPTY
75271: LIST
75272: LIST
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PPUSH
75278: CALL_OW 69
75282: ST_TO_ADDR
// if not tmp then
75283: LD_VAR 0 1
75287: NOT
75288: IFFALSE 75292
// exit ;
75290: GO 75337
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75292: LD_VAR 0 1
75296: PUSH
75297: LD_INT 1
75299: PPUSH
75300: LD_VAR 0 1
75304: PPUSH
75305: CALL_OW 12
75309: ARRAY
75310: PPUSH
75311: LD_INT 1
75313: PPUSH
75314: LD_INT 4
75316: PPUSH
75317: CALL_OW 12
75321: PPUSH
75322: LD_INT 3000
75324: PPUSH
75325: LD_INT 9000
75327: PPUSH
75328: CALL_OW 12
75332: PPUSH
75333: CALL_OW 492
// end ;
75337: PPOPN 1
75339: END
// every 0 0$1 trigger StreamModeActive and sDepot do
75340: LD_EXP 66
75344: PUSH
75345: LD_EXP 81
75349: AND
75350: IFFALSE 75370
75352: GO 75354
75354: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
75355: LD_INT 1
75357: PPUSH
75358: LD_OWVAR 2
75362: PPUSH
75363: LD_INT 0
75365: PPUSH
75366: CALL_OW 324
75370: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
75371: LD_EXP 66
75375: PUSH
75376: LD_EXP 82
75380: AND
75381: IFFALSE 75464
75383: GO 75385
75385: DISABLE
75386: LD_INT 0
75388: PPUSH
75389: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75390: LD_ADDR_VAR 0 2
75394: PUSH
75395: LD_INT 22
75397: PUSH
75398: LD_OWVAR 2
75402: PUSH
75403: EMPTY
75404: LIST
75405: LIST
75406: PUSH
75407: LD_INT 21
75409: PUSH
75410: LD_INT 3
75412: PUSH
75413: EMPTY
75414: LIST
75415: LIST
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PPUSH
75421: CALL_OW 69
75425: ST_TO_ADDR
// if not tmp then
75426: LD_VAR 0 2
75430: NOT
75431: IFFALSE 75435
// exit ;
75433: GO 75464
// for i in tmp do
75435: LD_ADDR_VAR 0 1
75439: PUSH
75440: LD_VAR 0 2
75444: PUSH
75445: FOR_IN
75446: IFFALSE 75462
// SetBLevel ( i , 10 ) ;
75448: LD_VAR 0 1
75452: PPUSH
75453: LD_INT 10
75455: PPUSH
75456: CALL_OW 241
75460: GO 75445
75462: POP
75463: POP
// end ;
75464: PPOPN 2
75466: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
75467: LD_EXP 66
75471: PUSH
75472: LD_EXP 83
75476: AND
75477: IFFALSE 75588
75479: GO 75481
75481: DISABLE
75482: LD_INT 0
75484: PPUSH
75485: PPUSH
75486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75487: LD_ADDR_VAR 0 3
75491: PUSH
75492: LD_INT 22
75494: PUSH
75495: LD_OWVAR 2
75499: PUSH
75500: EMPTY
75501: LIST
75502: LIST
75503: PUSH
75504: LD_INT 25
75506: PUSH
75507: LD_INT 1
75509: PUSH
75510: EMPTY
75511: LIST
75512: LIST
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PPUSH
75518: CALL_OW 69
75522: ST_TO_ADDR
// if not tmp then
75523: LD_VAR 0 3
75527: NOT
75528: IFFALSE 75532
// exit ;
75530: GO 75588
// un := tmp [ rand ( 1 , tmp ) ] ;
75532: LD_ADDR_VAR 0 2
75536: PUSH
75537: LD_VAR 0 3
75541: PUSH
75542: LD_INT 1
75544: PPUSH
75545: LD_VAR 0 3
75549: PPUSH
75550: CALL_OW 12
75554: ARRAY
75555: ST_TO_ADDR
// if Crawls ( un ) then
75556: LD_VAR 0 2
75560: PPUSH
75561: CALL_OW 318
75565: IFFALSE 75576
// ComWalk ( un ) ;
75567: LD_VAR 0 2
75571: PPUSH
75572: CALL_OW 138
// SetClass ( un , class_sniper ) ;
75576: LD_VAR 0 2
75580: PPUSH
75581: LD_INT 5
75583: PPUSH
75584: CALL_OW 336
// end ;
75588: PPOPN 3
75590: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
75591: LD_EXP 66
75595: PUSH
75596: LD_EXP 84
75600: AND
75601: PUSH
75602: LD_OWVAR 67
75606: PUSH
75607: LD_INT 4
75609: LESS
75610: AND
75611: IFFALSE 75630
75613: GO 75615
75615: DISABLE
// begin Difficulty := Difficulty + 1 ;
75616: LD_ADDR_OWVAR 67
75620: PUSH
75621: LD_OWVAR 67
75625: PUSH
75626: LD_INT 1
75628: PLUS
75629: ST_TO_ADDR
// end ;
75630: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
75631: LD_EXP 66
75635: PUSH
75636: LD_EXP 85
75640: AND
75641: IFFALSE 75744
75643: GO 75645
75645: DISABLE
75646: LD_INT 0
75648: PPUSH
// begin for i := 1 to 5 do
75649: LD_ADDR_VAR 0 1
75653: PUSH
75654: DOUBLE
75655: LD_INT 1
75657: DEC
75658: ST_TO_ADDR
75659: LD_INT 5
75661: PUSH
75662: FOR_TO
75663: IFFALSE 75742
// begin uc_nation := nation_nature ;
75665: LD_ADDR_OWVAR 21
75669: PUSH
75670: LD_INT 0
75672: ST_TO_ADDR
// uc_side := 0 ;
75673: LD_ADDR_OWVAR 20
75677: PUSH
75678: LD_INT 0
75680: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75681: LD_ADDR_OWVAR 29
75685: PUSH
75686: LD_INT 12
75688: PUSH
75689: LD_INT 12
75691: PUSH
75692: EMPTY
75693: LIST
75694: LIST
75695: ST_TO_ADDR
// hc_agressivity := 20 ;
75696: LD_ADDR_OWVAR 35
75700: PUSH
75701: LD_INT 20
75703: ST_TO_ADDR
// hc_class := class_tiger ;
75704: LD_ADDR_OWVAR 28
75708: PUSH
75709: LD_INT 14
75711: ST_TO_ADDR
// hc_gallery :=  ;
75712: LD_ADDR_OWVAR 33
75716: PUSH
75717: LD_STRING 
75719: ST_TO_ADDR
// hc_name :=  ;
75720: LD_ADDR_OWVAR 26
75724: PUSH
75725: LD_STRING 
75727: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
75728: CALL_OW 44
75732: PPUSH
75733: LD_INT 0
75735: PPUSH
75736: CALL_OW 51
// end ;
75740: GO 75662
75742: POP
75743: POP
// end ;
75744: PPOPN 1
75746: END
// every 0 0$1 trigger StreamModeActive and sBomb do
75747: LD_EXP 66
75751: PUSH
75752: LD_EXP 86
75756: AND
75757: IFFALSE 75766
75759: GO 75761
75761: DISABLE
// StreamSibBomb ;
75762: CALL 75767 0 0
75766: END
// export function StreamSibBomb ; var i , x , y ; begin
75767: LD_INT 0
75769: PPUSH
75770: PPUSH
75771: PPUSH
75772: PPUSH
// result := false ;
75773: LD_ADDR_VAR 0 1
75777: PUSH
75778: LD_INT 0
75780: ST_TO_ADDR
// for i := 1 to 16 do
75781: LD_ADDR_VAR 0 2
75785: PUSH
75786: DOUBLE
75787: LD_INT 1
75789: DEC
75790: ST_TO_ADDR
75791: LD_INT 16
75793: PUSH
75794: FOR_TO
75795: IFFALSE 75994
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75797: LD_ADDR_VAR 0 3
75801: PUSH
75802: LD_INT 10
75804: PUSH
75805: LD_INT 20
75807: PUSH
75808: LD_INT 30
75810: PUSH
75811: LD_INT 40
75813: PUSH
75814: LD_INT 50
75816: PUSH
75817: LD_INT 60
75819: PUSH
75820: LD_INT 70
75822: PUSH
75823: LD_INT 80
75825: PUSH
75826: LD_INT 90
75828: PUSH
75829: LD_INT 100
75831: PUSH
75832: LD_INT 110
75834: PUSH
75835: LD_INT 120
75837: PUSH
75838: LD_INT 130
75840: PUSH
75841: LD_INT 140
75843: PUSH
75844: LD_INT 150
75846: PUSH
75847: EMPTY
75848: LIST
75849: LIST
75850: LIST
75851: LIST
75852: LIST
75853: LIST
75854: LIST
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: PUSH
75864: LD_INT 1
75866: PPUSH
75867: LD_INT 15
75869: PPUSH
75870: CALL_OW 12
75874: ARRAY
75875: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
75876: LD_ADDR_VAR 0 4
75880: PUSH
75881: LD_INT 10
75883: PUSH
75884: LD_INT 20
75886: PUSH
75887: LD_INT 30
75889: PUSH
75890: LD_INT 40
75892: PUSH
75893: LD_INT 50
75895: PUSH
75896: LD_INT 60
75898: PUSH
75899: LD_INT 70
75901: PUSH
75902: LD_INT 80
75904: PUSH
75905: LD_INT 90
75907: PUSH
75908: LD_INT 100
75910: PUSH
75911: LD_INT 110
75913: PUSH
75914: LD_INT 120
75916: PUSH
75917: LD_INT 130
75919: PUSH
75920: LD_INT 140
75922: PUSH
75923: LD_INT 150
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: LIST
75935: LIST
75936: LIST
75937: LIST
75938: LIST
75939: LIST
75940: LIST
75941: LIST
75942: PUSH
75943: LD_INT 1
75945: PPUSH
75946: LD_INT 15
75948: PPUSH
75949: CALL_OW 12
75953: ARRAY
75954: ST_TO_ADDR
// if ValidHex ( x , y ) then
75955: LD_VAR 0 3
75959: PPUSH
75960: LD_VAR 0 4
75964: PPUSH
75965: CALL_OW 488
75969: IFFALSE 75992
// begin result := [ x , y ] ;
75971: LD_ADDR_VAR 0 1
75975: PUSH
75976: LD_VAR 0 3
75980: PUSH
75981: LD_VAR 0 4
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: ST_TO_ADDR
// break ;
75990: GO 75994
// end ; end ;
75992: GO 75794
75994: POP
75995: POP
// if result then
75996: LD_VAR 0 1
76000: IFFALSE 76060
// begin ToLua ( playSibBomb() ) ;
76002: LD_STRING playSibBomb()
76004: PPUSH
76005: CALL_OW 559
// wait ( 0 0$14 ) ;
76009: LD_INT 490
76011: PPUSH
76012: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
76016: LD_VAR 0 1
76020: PUSH
76021: LD_INT 1
76023: ARRAY
76024: PPUSH
76025: LD_VAR 0 1
76029: PUSH
76030: LD_INT 2
76032: ARRAY
76033: PPUSH
76034: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
76038: LD_VAR 0 1
76042: PUSH
76043: LD_INT 1
76045: ARRAY
76046: PPUSH
76047: LD_VAR 0 1
76051: PUSH
76052: LD_INT 2
76054: ARRAY
76055: PPUSH
76056: CALL_OW 429
// end ; end ;
76060: LD_VAR 0 1
76064: RET
// every 0 0$1 trigger StreamModeActive and sReset do
76065: LD_EXP 66
76069: PUSH
76070: LD_EXP 88
76074: AND
76075: IFFALSE 76087
76077: GO 76079
76079: DISABLE
// YouLost (  ) ;
76080: LD_STRING 
76082: PPUSH
76083: CALL_OW 104
76087: END
// every 0 0$1 trigger StreamModeActive and sFog do
76088: LD_EXP 66
76092: PUSH
76093: LD_EXP 87
76097: AND
76098: IFFALSE 76112
76100: GO 76102
76102: DISABLE
// FogOff ( your_side ) ;
76103: LD_OWVAR 2
76107: PPUSH
76108: CALL_OW 344
76112: END
// every 0 0$1 trigger StreamModeActive and sSun do
76113: LD_EXP 66
76117: PUSH
76118: LD_EXP 89
76122: AND
76123: IFFALSE 76151
76125: GO 76127
76127: DISABLE
// begin solar_recharge_percent := 0 ;
76128: LD_ADDR_OWVAR 79
76132: PUSH
76133: LD_INT 0
76135: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76136: LD_INT 10500
76138: PPUSH
76139: CALL_OW 67
// solar_recharge_percent := 100 ;
76143: LD_ADDR_OWVAR 79
76147: PUSH
76148: LD_INT 100
76150: ST_TO_ADDR
// end ;
76151: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76152: LD_EXP 66
76156: PUSH
76157: LD_EXP 90
76161: AND
76162: IFFALSE 76401
76164: GO 76166
76166: DISABLE
76167: LD_INT 0
76169: PPUSH
76170: PPUSH
76171: PPUSH
// begin tmp := [ ] ;
76172: LD_ADDR_VAR 0 3
76176: PUSH
76177: EMPTY
76178: ST_TO_ADDR
// for i := 1 to 6 do
76179: LD_ADDR_VAR 0 1
76183: PUSH
76184: DOUBLE
76185: LD_INT 1
76187: DEC
76188: ST_TO_ADDR
76189: LD_INT 6
76191: PUSH
76192: FOR_TO
76193: IFFALSE 76298
// begin uc_nation := nation_nature ;
76195: LD_ADDR_OWVAR 21
76199: PUSH
76200: LD_INT 0
76202: ST_TO_ADDR
// uc_side := 0 ;
76203: LD_ADDR_OWVAR 20
76207: PUSH
76208: LD_INT 0
76210: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76211: LD_ADDR_OWVAR 29
76215: PUSH
76216: LD_INT 12
76218: PUSH
76219: LD_INT 12
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: ST_TO_ADDR
// hc_agressivity := 20 ;
76226: LD_ADDR_OWVAR 35
76230: PUSH
76231: LD_INT 20
76233: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76234: LD_ADDR_OWVAR 28
76238: PUSH
76239: LD_INT 17
76241: ST_TO_ADDR
// hc_gallery :=  ;
76242: LD_ADDR_OWVAR 33
76246: PUSH
76247: LD_STRING 
76249: ST_TO_ADDR
// hc_name :=  ;
76250: LD_ADDR_OWVAR 26
76254: PUSH
76255: LD_STRING 
76257: ST_TO_ADDR
// un := CreateHuman ;
76258: LD_ADDR_VAR 0 2
76262: PUSH
76263: CALL_OW 44
76267: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76268: LD_VAR 0 2
76272: PPUSH
76273: LD_INT 1
76275: PPUSH
76276: CALL_OW 51
// tmp := tmp ^ un ;
76280: LD_ADDR_VAR 0 3
76284: PUSH
76285: LD_VAR 0 3
76289: PUSH
76290: LD_VAR 0 2
76294: ADD
76295: ST_TO_ADDR
// end ;
76296: GO 76192
76298: POP
76299: POP
// repeat wait ( 0 0$1 ) ;
76300: LD_INT 35
76302: PPUSH
76303: CALL_OW 67
// for un in tmp do
76307: LD_ADDR_VAR 0 2
76311: PUSH
76312: LD_VAR 0 3
76316: PUSH
76317: FOR_IN
76318: IFFALSE 76392
// begin if IsDead ( un ) then
76320: LD_VAR 0 2
76324: PPUSH
76325: CALL_OW 301
76329: IFFALSE 76349
// begin tmp := tmp diff un ;
76331: LD_ADDR_VAR 0 3
76335: PUSH
76336: LD_VAR 0 3
76340: PUSH
76341: LD_VAR 0 2
76345: DIFF
76346: ST_TO_ADDR
// continue ;
76347: GO 76317
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
76349: LD_VAR 0 2
76353: PPUSH
76354: LD_INT 3
76356: PUSH
76357: LD_INT 22
76359: PUSH
76360: LD_INT 0
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: PUSH
76367: EMPTY
76368: LIST
76369: LIST
76370: PPUSH
76371: CALL_OW 69
76375: PPUSH
76376: LD_VAR 0 2
76380: PPUSH
76381: CALL_OW 74
76385: PPUSH
76386: CALL_OW 115
// end ;
76390: GO 76317
76392: POP
76393: POP
// until not tmp ;
76394: LD_VAR 0 3
76398: NOT
76399: IFFALSE 76300
// end ;
76401: PPOPN 3
76403: END
// every 0 0$1 trigger StreamModeActive and sTroll do
76404: LD_EXP 66
76408: PUSH
76409: LD_EXP 91
76413: AND
76414: IFFALSE 76468
76416: GO 76418
76418: DISABLE
// begin ToLua ( displayTroll(); ) ;
76419: LD_STRING displayTroll();
76421: PPUSH
76422: CALL_OW 559
// wait ( 3 3$00 ) ;
76426: LD_INT 6300
76428: PPUSH
76429: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76433: LD_STRING hideTroll();
76435: PPUSH
76436: CALL_OW 559
// wait ( 1 1$00 ) ;
76440: LD_INT 2100
76442: PPUSH
76443: CALL_OW 67
// ToLua ( displayTroll(); ) ;
76447: LD_STRING displayTroll();
76449: PPUSH
76450: CALL_OW 559
// wait ( 1 1$00 ) ;
76454: LD_INT 2100
76456: PPUSH
76457: CALL_OW 67
// ToLua ( hideTroll(); ) ;
76461: LD_STRING hideTroll();
76463: PPUSH
76464: CALL_OW 559
// end ;
76468: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
76469: LD_EXP 66
76473: PUSH
76474: LD_EXP 92
76478: AND
76479: IFFALSE 76542
76481: GO 76483
76483: DISABLE
76484: LD_INT 0
76486: PPUSH
// begin p := 0 ;
76487: LD_ADDR_VAR 0 1
76491: PUSH
76492: LD_INT 0
76494: ST_TO_ADDR
// repeat game_speed := 1 ;
76495: LD_ADDR_OWVAR 65
76499: PUSH
76500: LD_INT 1
76502: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76503: LD_INT 35
76505: PPUSH
76506: CALL_OW 67
// p := p + 1 ;
76510: LD_ADDR_VAR 0 1
76514: PUSH
76515: LD_VAR 0 1
76519: PUSH
76520: LD_INT 1
76522: PLUS
76523: ST_TO_ADDR
// until p >= 60 ;
76524: LD_VAR 0 1
76528: PUSH
76529: LD_INT 60
76531: GREATEREQUAL
76532: IFFALSE 76495
// game_speed := 4 ;
76534: LD_ADDR_OWVAR 65
76538: PUSH
76539: LD_INT 4
76541: ST_TO_ADDR
// end ;
76542: PPOPN 1
76544: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
76545: LD_EXP 66
76549: PUSH
76550: LD_EXP 93
76554: AND
76555: IFFALSE 76701
76557: GO 76559
76559: DISABLE
76560: LD_INT 0
76562: PPUSH
76563: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76564: LD_ADDR_VAR 0 1
76568: PUSH
76569: LD_INT 22
76571: PUSH
76572: LD_OWVAR 2
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 2
76583: PUSH
76584: LD_INT 30
76586: PUSH
76587: LD_INT 0
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 30
76596: PUSH
76597: LD_INT 1
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: LIST
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PPUSH
76613: CALL_OW 69
76617: ST_TO_ADDR
// if not depot then
76618: LD_VAR 0 1
76622: NOT
76623: IFFALSE 76627
// exit ;
76625: GO 76701
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
76627: LD_ADDR_VAR 0 2
76631: PUSH
76632: LD_VAR 0 1
76636: PUSH
76637: LD_INT 1
76639: PPUSH
76640: LD_VAR 0 1
76644: PPUSH
76645: CALL_OW 12
76649: ARRAY
76650: PPUSH
76651: CALL_OW 274
76655: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
76656: LD_VAR 0 2
76660: PPUSH
76661: LD_INT 1
76663: PPUSH
76664: LD_INT 0
76666: PPUSH
76667: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
76671: LD_VAR 0 2
76675: PPUSH
76676: LD_INT 2
76678: PPUSH
76679: LD_INT 0
76681: PPUSH
76682: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
76686: LD_VAR 0 2
76690: PPUSH
76691: LD_INT 3
76693: PPUSH
76694: LD_INT 0
76696: PPUSH
76697: CALL_OW 277
// end ;
76701: PPOPN 2
76703: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
76704: LD_EXP 66
76708: PUSH
76709: LD_EXP 94
76713: AND
76714: IFFALSE 76811
76716: GO 76718
76718: DISABLE
76719: LD_INT 0
76721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76722: LD_ADDR_VAR 0 1
76726: PUSH
76727: LD_INT 22
76729: PUSH
76730: LD_OWVAR 2
76734: PUSH
76735: EMPTY
76736: LIST
76737: LIST
76738: PUSH
76739: LD_INT 21
76741: PUSH
76742: LD_INT 1
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 3
76751: PUSH
76752: LD_INT 23
76754: PUSH
76755: LD_INT 0
76757: PUSH
76758: EMPTY
76759: LIST
76760: LIST
76761: PUSH
76762: EMPTY
76763: LIST
76764: LIST
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: LIST
76770: PPUSH
76771: CALL_OW 69
76775: ST_TO_ADDR
// if not tmp then
76776: LD_VAR 0 1
76780: NOT
76781: IFFALSE 76785
// exit ;
76783: GO 76811
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
76785: LD_VAR 0 1
76789: PUSH
76790: LD_INT 1
76792: PPUSH
76793: LD_VAR 0 1
76797: PPUSH
76798: CALL_OW 12
76802: ARRAY
76803: PPUSH
76804: LD_INT 200
76806: PPUSH
76807: CALL_OW 234
// end ;
76811: PPOPN 1
76813: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
76814: LD_EXP 66
76818: PUSH
76819: LD_EXP 95
76823: AND
76824: IFFALSE 76903
76826: GO 76828
76828: DISABLE
76829: LD_INT 0
76831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
76832: LD_ADDR_VAR 0 1
76836: PUSH
76837: LD_INT 22
76839: PUSH
76840: LD_OWVAR 2
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PUSH
76849: LD_INT 21
76851: PUSH
76852: LD_INT 2
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PPUSH
76863: CALL_OW 69
76867: ST_TO_ADDR
// if not tmp then
76868: LD_VAR 0 1
76872: NOT
76873: IFFALSE 76877
// exit ;
76875: GO 76903
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
76877: LD_VAR 0 1
76881: PUSH
76882: LD_INT 1
76884: PPUSH
76885: LD_VAR 0 1
76889: PPUSH
76890: CALL_OW 12
76894: ARRAY
76895: PPUSH
76896: LD_INT 60
76898: PPUSH
76899: CALL_OW 234
// end ;
76903: PPOPN 1
76905: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
76906: LD_EXP 66
76910: PUSH
76911: LD_EXP 96
76915: AND
76916: IFFALSE 77015
76918: GO 76920
76920: DISABLE
76921: LD_INT 0
76923: PPUSH
76924: PPUSH
// begin enable ;
76925: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
76926: LD_ADDR_VAR 0 1
76930: PUSH
76931: LD_INT 22
76933: PUSH
76934: LD_OWVAR 2
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: PUSH
76943: LD_INT 61
76945: PUSH
76946: EMPTY
76947: LIST
76948: PUSH
76949: LD_INT 33
76951: PUSH
76952: LD_INT 2
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: PUSH
76959: EMPTY
76960: LIST
76961: LIST
76962: LIST
76963: PPUSH
76964: CALL_OW 69
76968: ST_TO_ADDR
// if not tmp then
76969: LD_VAR 0 1
76973: NOT
76974: IFFALSE 76978
// exit ;
76976: GO 77015
// for i in tmp do
76978: LD_ADDR_VAR 0 2
76982: PUSH
76983: LD_VAR 0 1
76987: PUSH
76988: FOR_IN
76989: IFFALSE 77013
// if IsControledBy ( i ) then
76991: LD_VAR 0 2
76995: PPUSH
76996: CALL_OW 312
77000: IFFALSE 77011
// ComUnlink ( i ) ;
77002: LD_VAR 0 2
77006: PPUSH
77007: CALL_OW 136
77011: GO 76988
77013: POP
77014: POP
// end ;
77015: PPOPN 2
77017: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
77018: LD_EXP 66
77022: PUSH
77023: LD_EXP 97
77027: AND
77028: IFFALSE 77168
77030: GO 77032
77032: DISABLE
77033: LD_INT 0
77035: PPUSH
77036: PPUSH
// begin ToLua ( displayPowell(); ) ;
77037: LD_STRING displayPowell();
77039: PPUSH
77040: CALL_OW 559
// uc_side := 0 ;
77044: LD_ADDR_OWVAR 20
77048: PUSH
77049: LD_INT 0
77051: ST_TO_ADDR
// uc_nation := 2 ;
77052: LD_ADDR_OWVAR 21
77056: PUSH
77057: LD_INT 2
77059: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
77060: LD_ADDR_OWVAR 37
77064: PUSH
77065: LD_INT 14
77067: ST_TO_ADDR
// vc_engine := engine_siberite ;
77068: LD_ADDR_OWVAR 39
77072: PUSH
77073: LD_INT 3
77075: ST_TO_ADDR
// vc_control := control_apeman ;
77076: LD_ADDR_OWVAR 38
77080: PUSH
77081: LD_INT 5
77083: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
77084: LD_ADDR_OWVAR 40
77088: PUSH
77089: LD_INT 29
77091: ST_TO_ADDR
// un := CreateVehicle ;
77092: LD_ADDR_VAR 0 2
77096: PUSH
77097: CALL_OW 45
77101: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77102: LD_VAR 0 2
77106: PPUSH
77107: LD_INT 1
77109: PPUSH
77110: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77114: LD_INT 35
77116: PPUSH
77117: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77121: LD_VAR 0 2
77125: PPUSH
77126: LD_INT 22
77128: PUSH
77129: LD_OWVAR 2
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: PPUSH
77138: CALL_OW 69
77142: PPUSH
77143: LD_VAR 0 2
77147: PPUSH
77148: CALL_OW 74
77152: PPUSH
77153: CALL_OW 115
// until IsDead ( un ) ;
77157: LD_VAR 0 2
77161: PPUSH
77162: CALL_OW 301
77166: IFFALSE 77114
// end ;
77168: PPOPN 2
77170: END
// every 0 0$1 trigger StreamModeActive and sStu do
77171: LD_EXP 66
77175: PUSH
77176: LD_EXP 105
77180: AND
77181: IFFALSE 77197
77183: GO 77185
77185: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77186: LD_STRING displayStucuk();
77188: PPUSH
77189: CALL_OW 559
// ResetFog ;
77193: CALL_OW 335
// end ;
77197: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77198: LD_EXP 66
77202: PUSH
77203: LD_EXP 98
77207: AND
77208: IFFALSE 77349
77210: GO 77212
77212: DISABLE
77213: LD_INT 0
77215: PPUSH
77216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77217: LD_ADDR_VAR 0 2
77221: PUSH
77222: LD_INT 22
77224: PUSH
77225: LD_OWVAR 2
77229: PUSH
77230: EMPTY
77231: LIST
77232: LIST
77233: PUSH
77234: LD_INT 21
77236: PUSH
77237: LD_INT 1
77239: PUSH
77240: EMPTY
77241: LIST
77242: LIST
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PPUSH
77248: CALL_OW 69
77252: ST_TO_ADDR
// if not tmp then
77253: LD_VAR 0 2
77257: NOT
77258: IFFALSE 77262
// exit ;
77260: GO 77349
// un := tmp [ rand ( 1 , tmp ) ] ;
77262: LD_ADDR_VAR 0 1
77266: PUSH
77267: LD_VAR 0 2
77271: PUSH
77272: LD_INT 1
77274: PPUSH
77275: LD_VAR 0 2
77279: PPUSH
77280: CALL_OW 12
77284: ARRAY
77285: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77286: LD_VAR 0 1
77290: PPUSH
77291: LD_INT 0
77293: PPUSH
77294: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77298: LD_VAR 0 1
77302: PPUSH
77303: LD_OWVAR 3
77307: PUSH
77308: LD_VAR 0 1
77312: DIFF
77313: PPUSH
77314: LD_VAR 0 1
77318: PPUSH
77319: CALL_OW 74
77323: PPUSH
77324: CALL_OW 115
// wait ( 0 0$20 ) ;
77328: LD_INT 700
77330: PPUSH
77331: CALL_OW 67
// SetSide ( un , your_side ) ;
77335: LD_VAR 0 1
77339: PPUSH
77340: LD_OWVAR 2
77344: PPUSH
77345: CALL_OW 235
// end ;
77349: PPOPN 2
77351: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
77352: LD_EXP 66
77356: PUSH
77357: LD_EXP 99
77361: AND
77362: IFFALSE 77468
77364: GO 77366
77366: DISABLE
77367: LD_INT 0
77369: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77370: LD_ADDR_VAR 0 1
77374: PUSH
77375: LD_INT 22
77377: PUSH
77378: LD_OWVAR 2
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: LD_INT 2
77389: PUSH
77390: LD_INT 30
77392: PUSH
77393: LD_INT 0
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: PUSH
77400: LD_INT 30
77402: PUSH
77403: LD_INT 1
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: EMPTY
77411: LIST
77412: LIST
77413: LIST
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PPUSH
77419: CALL_OW 69
77423: ST_TO_ADDR
// if not depot then
77424: LD_VAR 0 1
77428: NOT
77429: IFFALSE 77433
// exit ;
77431: GO 77468
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
77433: LD_VAR 0 1
77437: PUSH
77438: LD_INT 1
77440: ARRAY
77441: PPUSH
77442: CALL_OW 250
77446: PPUSH
77447: LD_VAR 0 1
77451: PUSH
77452: LD_INT 1
77454: ARRAY
77455: PPUSH
77456: CALL_OW 251
77460: PPUSH
77461: LD_INT 70
77463: PPUSH
77464: CALL_OW 495
// end ;
77468: PPOPN 1
77470: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
77471: LD_EXP 66
77475: PUSH
77476: LD_EXP 100
77480: AND
77481: IFFALSE 77692
77483: GO 77485
77485: DISABLE
77486: LD_INT 0
77488: PPUSH
77489: PPUSH
77490: PPUSH
77491: PPUSH
77492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77493: LD_ADDR_VAR 0 5
77497: PUSH
77498: LD_INT 22
77500: PUSH
77501: LD_OWVAR 2
77505: PUSH
77506: EMPTY
77507: LIST
77508: LIST
77509: PUSH
77510: LD_INT 21
77512: PUSH
77513: LD_INT 1
77515: PUSH
77516: EMPTY
77517: LIST
77518: LIST
77519: PUSH
77520: EMPTY
77521: LIST
77522: LIST
77523: PPUSH
77524: CALL_OW 69
77528: ST_TO_ADDR
// if not tmp then
77529: LD_VAR 0 5
77533: NOT
77534: IFFALSE 77538
// exit ;
77536: GO 77692
// for i in tmp do
77538: LD_ADDR_VAR 0 1
77542: PUSH
77543: LD_VAR 0 5
77547: PUSH
77548: FOR_IN
77549: IFFALSE 77690
// begin d := rand ( 0 , 5 ) ;
77551: LD_ADDR_VAR 0 4
77555: PUSH
77556: LD_INT 0
77558: PPUSH
77559: LD_INT 5
77561: PPUSH
77562: CALL_OW 12
77566: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
77567: LD_ADDR_VAR 0 2
77571: PUSH
77572: LD_VAR 0 1
77576: PPUSH
77577: CALL_OW 250
77581: PPUSH
77582: LD_VAR 0 4
77586: PPUSH
77587: LD_INT 3
77589: PPUSH
77590: LD_INT 12
77592: PPUSH
77593: CALL_OW 12
77597: PPUSH
77598: CALL_OW 272
77602: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
77603: LD_ADDR_VAR 0 3
77607: PUSH
77608: LD_VAR 0 1
77612: PPUSH
77613: CALL_OW 251
77617: PPUSH
77618: LD_VAR 0 4
77622: PPUSH
77623: LD_INT 3
77625: PPUSH
77626: LD_INT 12
77628: PPUSH
77629: CALL_OW 12
77633: PPUSH
77634: CALL_OW 273
77638: ST_TO_ADDR
// if ValidHex ( x , y ) then
77639: LD_VAR 0 2
77643: PPUSH
77644: LD_VAR 0 3
77648: PPUSH
77649: CALL_OW 488
77653: IFFALSE 77688
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
77655: LD_VAR 0 1
77659: PPUSH
77660: LD_VAR 0 2
77664: PPUSH
77665: LD_VAR 0 3
77669: PPUSH
77670: LD_INT 3
77672: PPUSH
77673: LD_INT 6
77675: PPUSH
77676: CALL_OW 12
77680: PPUSH
77681: LD_INT 1
77683: PPUSH
77684: CALL_OW 483
// end ;
77688: GO 77548
77690: POP
77691: POP
// end ;
77692: PPOPN 5
77694: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
77695: LD_EXP 66
77699: PUSH
77700: LD_EXP 101
77704: AND
77705: IFFALSE 77799
77707: GO 77709
77709: DISABLE
77710: LD_INT 0
77712: PPUSH
77713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
77714: LD_ADDR_VAR 0 2
77718: PUSH
77719: LD_INT 22
77721: PUSH
77722: LD_OWVAR 2
77726: PUSH
77727: EMPTY
77728: LIST
77729: LIST
77730: PUSH
77731: LD_INT 32
77733: PUSH
77734: LD_INT 1
77736: PUSH
77737: EMPTY
77738: LIST
77739: LIST
77740: PUSH
77741: LD_INT 21
77743: PUSH
77744: LD_INT 2
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: LIST
77755: PPUSH
77756: CALL_OW 69
77760: ST_TO_ADDR
// if not tmp then
77761: LD_VAR 0 2
77765: NOT
77766: IFFALSE 77770
// exit ;
77768: GO 77799
// for i in tmp do
77770: LD_ADDR_VAR 0 1
77774: PUSH
77775: LD_VAR 0 2
77779: PUSH
77780: FOR_IN
77781: IFFALSE 77797
// SetFuel ( i , 0 ) ;
77783: LD_VAR 0 1
77787: PPUSH
77788: LD_INT 0
77790: PPUSH
77791: CALL_OW 240
77795: GO 77780
77797: POP
77798: POP
// end ;
77799: PPOPN 2
77801: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
77802: LD_EXP 66
77806: PUSH
77807: LD_EXP 102
77811: AND
77812: IFFALSE 77878
77814: GO 77816
77816: DISABLE
77817: LD_INT 0
77819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77820: LD_ADDR_VAR 0 1
77824: PUSH
77825: LD_INT 22
77827: PUSH
77828: LD_OWVAR 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 30
77839: PUSH
77840: LD_INT 29
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: PPUSH
77851: CALL_OW 69
77855: ST_TO_ADDR
// if not tmp then
77856: LD_VAR 0 1
77860: NOT
77861: IFFALSE 77865
// exit ;
77863: GO 77878
// DestroyUnit ( tmp [ 1 ] ) ;
77865: LD_VAR 0 1
77869: PUSH
77870: LD_INT 1
77872: ARRAY
77873: PPUSH
77874: CALL_OW 65
// end ;
77878: PPOPN 1
77880: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
77881: LD_EXP 66
77885: PUSH
77886: LD_EXP 104
77890: AND
77891: IFFALSE 78020
77893: GO 77895
77895: DISABLE
77896: LD_INT 0
77898: PPUSH
// begin uc_side := 0 ;
77899: LD_ADDR_OWVAR 20
77903: PUSH
77904: LD_INT 0
77906: ST_TO_ADDR
// uc_nation := nation_arabian ;
77907: LD_ADDR_OWVAR 21
77911: PUSH
77912: LD_INT 2
77914: ST_TO_ADDR
// hc_gallery :=  ;
77915: LD_ADDR_OWVAR 33
77919: PUSH
77920: LD_STRING 
77922: ST_TO_ADDR
// hc_name :=  ;
77923: LD_ADDR_OWVAR 26
77927: PUSH
77928: LD_STRING 
77930: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
77931: LD_INT 1
77933: PPUSH
77934: LD_INT 11
77936: PPUSH
77937: LD_INT 10
77939: PPUSH
77940: CALL_OW 380
// un := CreateHuman ;
77944: LD_ADDR_VAR 0 1
77948: PUSH
77949: CALL_OW 44
77953: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77954: LD_VAR 0 1
77958: PPUSH
77959: LD_INT 1
77961: PPUSH
77962: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77966: LD_INT 35
77968: PPUSH
77969: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77973: LD_VAR 0 1
77977: PPUSH
77978: LD_INT 22
77980: PUSH
77981: LD_OWVAR 2
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: PPUSH
77990: CALL_OW 69
77994: PPUSH
77995: LD_VAR 0 1
77999: PPUSH
78000: CALL_OW 74
78004: PPUSH
78005: CALL_OW 115
// until IsDead ( un ) ;
78009: LD_VAR 0 1
78013: PPUSH
78014: CALL_OW 301
78018: IFFALSE 77966
// end ;
78020: PPOPN 1
78022: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
78023: LD_EXP 66
78027: PUSH
78028: LD_EXP 106
78032: AND
78033: IFFALSE 78045
78035: GO 78037
78037: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
78038: LD_STRING earthquake(getX(game), 0, 32)
78040: PPUSH
78041: CALL_OW 559
78045: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
78046: LD_EXP 66
78050: PUSH
78051: LD_EXP 107
78055: AND
78056: IFFALSE 78147
78058: GO 78060
78060: DISABLE
78061: LD_INT 0
78063: PPUSH
// begin enable ;
78064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
78065: LD_ADDR_VAR 0 1
78069: PUSH
78070: LD_INT 22
78072: PUSH
78073: LD_OWVAR 2
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PUSH
78082: LD_INT 21
78084: PUSH
78085: LD_INT 2
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: PUSH
78092: LD_INT 33
78094: PUSH
78095: LD_INT 3
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: LIST
78106: PPUSH
78107: CALL_OW 69
78111: ST_TO_ADDR
// if not tmp then
78112: LD_VAR 0 1
78116: NOT
78117: IFFALSE 78121
// exit ;
78119: GO 78147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78121: LD_VAR 0 1
78125: PUSH
78126: LD_INT 1
78128: PPUSH
78129: LD_VAR 0 1
78133: PPUSH
78134: CALL_OW 12
78138: ARRAY
78139: PPUSH
78140: LD_INT 1
78142: PPUSH
78143: CALL_OW 234
// end ;
78147: PPOPN 1
78149: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78150: LD_EXP 66
78154: PUSH
78155: LD_EXP 108
78159: AND
78160: IFFALSE 78301
78162: GO 78164
78164: DISABLE
78165: LD_INT 0
78167: PPUSH
78168: PPUSH
78169: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78170: LD_ADDR_VAR 0 3
78174: PUSH
78175: LD_INT 22
78177: PUSH
78178: LD_OWVAR 2
78182: PUSH
78183: EMPTY
78184: LIST
78185: LIST
78186: PUSH
78187: LD_INT 25
78189: PUSH
78190: LD_INT 1
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PPUSH
78201: CALL_OW 69
78205: ST_TO_ADDR
// if not tmp then
78206: LD_VAR 0 3
78210: NOT
78211: IFFALSE 78215
// exit ;
78213: GO 78301
// un := tmp [ rand ( 1 , tmp ) ] ;
78215: LD_ADDR_VAR 0 2
78219: PUSH
78220: LD_VAR 0 3
78224: PUSH
78225: LD_INT 1
78227: PPUSH
78228: LD_VAR 0 3
78232: PPUSH
78233: CALL_OW 12
78237: ARRAY
78238: ST_TO_ADDR
// if Crawls ( un ) then
78239: LD_VAR 0 2
78243: PPUSH
78244: CALL_OW 318
78248: IFFALSE 78259
// ComWalk ( un ) ;
78250: LD_VAR 0 2
78254: PPUSH
78255: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78259: LD_VAR 0 2
78263: PPUSH
78264: LD_INT 9
78266: PPUSH
78267: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78271: LD_INT 28
78273: PPUSH
78274: LD_OWVAR 2
78278: PPUSH
78279: LD_INT 2
78281: PPUSH
78282: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78286: LD_INT 29
78288: PPUSH
78289: LD_OWVAR 2
78293: PPUSH
78294: LD_INT 2
78296: PPUSH
78297: CALL_OW 322
// end ;
78301: PPOPN 3
78303: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
78304: LD_EXP 66
78308: PUSH
78309: LD_EXP 109
78313: AND
78314: IFFALSE 78425
78316: GO 78318
78318: DISABLE
78319: LD_INT 0
78321: PPUSH
78322: PPUSH
78323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78324: LD_ADDR_VAR 0 3
78328: PUSH
78329: LD_INT 22
78331: PUSH
78332: LD_OWVAR 2
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: PUSH
78341: LD_INT 25
78343: PUSH
78344: LD_INT 1
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: PUSH
78351: EMPTY
78352: LIST
78353: LIST
78354: PPUSH
78355: CALL_OW 69
78359: ST_TO_ADDR
// if not tmp then
78360: LD_VAR 0 3
78364: NOT
78365: IFFALSE 78369
// exit ;
78367: GO 78425
// un := tmp [ rand ( 1 , tmp ) ] ;
78369: LD_ADDR_VAR 0 2
78373: PUSH
78374: LD_VAR 0 3
78378: PUSH
78379: LD_INT 1
78381: PPUSH
78382: LD_VAR 0 3
78386: PPUSH
78387: CALL_OW 12
78391: ARRAY
78392: ST_TO_ADDR
// if Crawls ( un ) then
78393: LD_VAR 0 2
78397: PPUSH
78398: CALL_OW 318
78402: IFFALSE 78413
// ComWalk ( un ) ;
78404: LD_VAR 0 2
78408: PPUSH
78409: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78413: LD_VAR 0 2
78417: PPUSH
78418: LD_INT 8
78420: PPUSH
78421: CALL_OW 336
// end ;
78425: PPOPN 3
78427: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
78428: LD_EXP 66
78432: PUSH
78433: LD_EXP 110
78437: AND
78438: IFFALSE 78582
78440: GO 78442
78442: DISABLE
78443: LD_INT 0
78445: PPUSH
78446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
78447: LD_ADDR_VAR 0 2
78451: PUSH
78452: LD_INT 22
78454: PUSH
78455: LD_OWVAR 2
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 21
78466: PUSH
78467: LD_INT 2
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: LD_INT 2
78476: PUSH
78477: LD_INT 34
78479: PUSH
78480: LD_INT 12
78482: PUSH
78483: EMPTY
78484: LIST
78485: LIST
78486: PUSH
78487: LD_INT 34
78489: PUSH
78490: LD_INT 51
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PUSH
78497: LD_INT 34
78499: PUSH
78500: LD_INT 32
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: LIST
78511: LIST
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: LIST
78517: PPUSH
78518: CALL_OW 69
78522: ST_TO_ADDR
// if not tmp then
78523: LD_VAR 0 2
78527: NOT
78528: IFFALSE 78532
// exit ;
78530: GO 78582
// for i in tmp do
78532: LD_ADDR_VAR 0 1
78536: PUSH
78537: LD_VAR 0 2
78541: PUSH
78542: FOR_IN
78543: IFFALSE 78580
// if GetCargo ( i , mat_artifact ) = 0 then
78545: LD_VAR 0 1
78549: PPUSH
78550: LD_INT 4
78552: PPUSH
78553: CALL_OW 289
78557: PUSH
78558: LD_INT 0
78560: EQUAL
78561: IFFALSE 78578
// SetCargo ( i , mat_siberit , 100 ) ;
78563: LD_VAR 0 1
78567: PPUSH
78568: LD_INT 3
78570: PPUSH
78571: LD_INT 100
78573: PPUSH
78574: CALL_OW 290
78578: GO 78542
78580: POP
78581: POP
// end ;
78582: PPOPN 2
78584: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
78585: LD_EXP 66
78589: PUSH
78590: LD_EXP 111
78594: AND
78595: IFFALSE 78778
78597: GO 78599
78599: DISABLE
78600: LD_INT 0
78602: PPUSH
78603: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78604: LD_ADDR_VAR 0 2
78608: PUSH
78609: LD_INT 22
78611: PUSH
78612: LD_OWVAR 2
78616: PUSH
78617: EMPTY
78618: LIST
78619: LIST
78620: PPUSH
78621: CALL_OW 69
78625: ST_TO_ADDR
// if not tmp then
78626: LD_VAR 0 2
78630: NOT
78631: IFFALSE 78635
// exit ;
78633: GO 78778
// for i := 1 to 2 do
78635: LD_ADDR_VAR 0 1
78639: PUSH
78640: DOUBLE
78641: LD_INT 1
78643: DEC
78644: ST_TO_ADDR
78645: LD_INT 2
78647: PUSH
78648: FOR_TO
78649: IFFALSE 78776
// begin uc_side := your_side ;
78651: LD_ADDR_OWVAR 20
78655: PUSH
78656: LD_OWVAR 2
78660: ST_TO_ADDR
// uc_nation := nation_american ;
78661: LD_ADDR_OWVAR 21
78665: PUSH
78666: LD_INT 1
78668: ST_TO_ADDR
// vc_chassis := us_morphling ;
78669: LD_ADDR_OWVAR 37
78673: PUSH
78674: LD_INT 5
78676: ST_TO_ADDR
// vc_engine := engine_siberite ;
78677: LD_ADDR_OWVAR 39
78681: PUSH
78682: LD_INT 3
78684: ST_TO_ADDR
// vc_control := control_computer ;
78685: LD_ADDR_OWVAR 38
78689: PUSH
78690: LD_INT 3
78692: ST_TO_ADDR
// vc_weapon := us_double_laser ;
78693: LD_ADDR_OWVAR 40
78697: PUSH
78698: LD_INT 10
78700: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
78701: LD_VAR 0 2
78705: PUSH
78706: LD_INT 1
78708: ARRAY
78709: PPUSH
78710: CALL_OW 310
78714: NOT
78715: IFFALSE 78762
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
78717: CALL_OW 45
78721: PPUSH
78722: LD_VAR 0 2
78726: PUSH
78727: LD_INT 1
78729: ARRAY
78730: PPUSH
78731: CALL_OW 250
78735: PPUSH
78736: LD_VAR 0 2
78740: PUSH
78741: LD_INT 1
78743: ARRAY
78744: PPUSH
78745: CALL_OW 251
78749: PPUSH
78750: LD_INT 12
78752: PPUSH
78753: LD_INT 1
78755: PPUSH
78756: CALL_OW 50
78760: GO 78774
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
78762: CALL_OW 45
78766: PPUSH
78767: LD_INT 1
78769: PPUSH
78770: CALL_OW 51
// end ;
78774: GO 78648
78776: POP
78777: POP
// end ;
78778: PPOPN 2
78780: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
78781: LD_EXP 66
78785: PUSH
78786: LD_EXP 112
78790: AND
78791: IFFALSE 79013
78793: GO 78795
78795: DISABLE
78796: LD_INT 0
78798: PPUSH
78799: PPUSH
78800: PPUSH
78801: PPUSH
78802: PPUSH
78803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78804: LD_ADDR_VAR 0 6
78808: PUSH
78809: LD_INT 22
78811: PUSH
78812: LD_OWVAR 2
78816: PUSH
78817: EMPTY
78818: LIST
78819: LIST
78820: PUSH
78821: LD_INT 21
78823: PUSH
78824: LD_INT 1
78826: PUSH
78827: EMPTY
78828: LIST
78829: LIST
78830: PUSH
78831: LD_INT 3
78833: PUSH
78834: LD_INT 23
78836: PUSH
78837: LD_INT 0
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: LIST
78852: PPUSH
78853: CALL_OW 69
78857: ST_TO_ADDR
// if not tmp then
78858: LD_VAR 0 6
78862: NOT
78863: IFFALSE 78867
// exit ;
78865: GO 79013
// s1 := rand ( 1 , 4 ) ;
78867: LD_ADDR_VAR 0 2
78871: PUSH
78872: LD_INT 1
78874: PPUSH
78875: LD_INT 4
78877: PPUSH
78878: CALL_OW 12
78882: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
78883: LD_ADDR_VAR 0 4
78887: PUSH
78888: LD_VAR 0 6
78892: PUSH
78893: LD_INT 1
78895: ARRAY
78896: PPUSH
78897: LD_VAR 0 2
78901: PPUSH
78902: CALL_OW 259
78906: ST_TO_ADDR
// if s1 = 1 then
78907: LD_VAR 0 2
78911: PUSH
78912: LD_INT 1
78914: EQUAL
78915: IFFALSE 78935
// s2 := rand ( 2 , 4 ) else
78917: LD_ADDR_VAR 0 3
78921: PUSH
78922: LD_INT 2
78924: PPUSH
78925: LD_INT 4
78927: PPUSH
78928: CALL_OW 12
78932: ST_TO_ADDR
78933: GO 78943
// s2 := 1 ;
78935: LD_ADDR_VAR 0 3
78939: PUSH
78940: LD_INT 1
78942: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
78943: LD_ADDR_VAR 0 5
78947: PUSH
78948: LD_VAR 0 6
78952: PUSH
78953: LD_INT 1
78955: ARRAY
78956: PPUSH
78957: LD_VAR 0 3
78961: PPUSH
78962: CALL_OW 259
78966: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78967: LD_VAR 0 6
78971: PUSH
78972: LD_INT 1
78974: ARRAY
78975: PPUSH
78976: LD_VAR 0 2
78980: PPUSH
78981: LD_VAR 0 5
78985: PPUSH
78986: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78990: LD_VAR 0 6
78994: PUSH
78995: LD_INT 1
78997: ARRAY
78998: PPUSH
78999: LD_VAR 0 3
79003: PPUSH
79004: LD_VAR 0 4
79008: PPUSH
79009: CALL_OW 237
// end ;
79013: PPOPN 6
79015: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
79016: LD_EXP 66
79020: PUSH
79021: LD_EXP 113
79025: AND
79026: IFFALSE 79105
79028: GO 79030
79030: DISABLE
79031: LD_INT 0
79033: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
79034: LD_ADDR_VAR 0 1
79038: PUSH
79039: LD_INT 22
79041: PUSH
79042: LD_OWVAR 2
79046: PUSH
79047: EMPTY
79048: LIST
79049: LIST
79050: PUSH
79051: LD_INT 30
79053: PUSH
79054: LD_INT 3
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: PUSH
79061: EMPTY
79062: LIST
79063: LIST
79064: PPUSH
79065: CALL_OW 69
79069: ST_TO_ADDR
// if not tmp then
79070: LD_VAR 0 1
79074: NOT
79075: IFFALSE 79079
// exit ;
79077: GO 79105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79079: LD_VAR 0 1
79083: PUSH
79084: LD_INT 1
79086: PPUSH
79087: LD_VAR 0 1
79091: PPUSH
79092: CALL_OW 12
79096: ARRAY
79097: PPUSH
79098: LD_INT 1
79100: PPUSH
79101: CALL_OW 234
// end ;
79105: PPOPN 1
79107: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79108: LD_EXP 66
79112: PUSH
79113: LD_EXP 114
79117: AND
79118: IFFALSE 79230
79120: GO 79122
79122: DISABLE
79123: LD_INT 0
79125: PPUSH
79126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79127: LD_ADDR_VAR 0 2
79131: PUSH
79132: LD_INT 22
79134: PUSH
79135: LD_OWVAR 2
79139: PUSH
79140: EMPTY
79141: LIST
79142: LIST
79143: PUSH
79144: LD_INT 2
79146: PUSH
79147: LD_INT 30
79149: PUSH
79150: LD_INT 27
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 30
79159: PUSH
79160: LD_INT 26
79162: PUSH
79163: EMPTY
79164: LIST
79165: LIST
79166: PUSH
79167: LD_INT 30
79169: PUSH
79170: LD_INT 28
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: PUSH
79183: EMPTY
79184: LIST
79185: LIST
79186: PPUSH
79187: CALL_OW 69
79191: ST_TO_ADDR
// if not tmp then
79192: LD_VAR 0 2
79196: NOT
79197: IFFALSE 79201
// exit ;
79199: GO 79230
// for i in tmp do
79201: LD_ADDR_VAR 0 1
79205: PUSH
79206: LD_VAR 0 2
79210: PUSH
79211: FOR_IN
79212: IFFALSE 79228
// SetLives ( i , 1 ) ;
79214: LD_VAR 0 1
79218: PPUSH
79219: LD_INT 1
79221: PPUSH
79222: CALL_OW 234
79226: GO 79211
79228: POP
79229: POP
// end ;
79230: PPOPN 2
79232: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79233: LD_EXP 66
79237: PUSH
79238: LD_EXP 115
79242: AND
79243: IFFALSE 79530
79245: GO 79247
79247: DISABLE
79248: LD_INT 0
79250: PPUSH
79251: PPUSH
79252: PPUSH
// begin i := rand ( 1 , 7 ) ;
79253: LD_ADDR_VAR 0 1
79257: PUSH
79258: LD_INT 1
79260: PPUSH
79261: LD_INT 7
79263: PPUSH
79264: CALL_OW 12
79268: ST_TO_ADDR
// case i of 1 :
79269: LD_VAR 0 1
79273: PUSH
79274: LD_INT 1
79276: DOUBLE
79277: EQUAL
79278: IFTRUE 79282
79280: GO 79292
79282: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79283: LD_STRING earthquake(getX(game), 0, 32)
79285: PPUSH
79286: CALL_OW 559
79290: GO 79530
79292: LD_INT 2
79294: DOUBLE
79295: EQUAL
79296: IFTRUE 79300
79298: GO 79314
79300: POP
// begin ToLua ( displayStucuk(); ) ;
79301: LD_STRING displayStucuk();
79303: PPUSH
79304: CALL_OW 559
// ResetFog ;
79308: CALL_OW 335
// end ; 3 :
79312: GO 79530
79314: LD_INT 3
79316: DOUBLE
79317: EQUAL
79318: IFTRUE 79322
79320: GO 79426
79322: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79323: LD_ADDR_VAR 0 2
79327: PUSH
79328: LD_INT 22
79330: PUSH
79331: LD_OWVAR 2
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: PUSH
79340: LD_INT 25
79342: PUSH
79343: LD_INT 1
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: PUSH
79350: EMPTY
79351: LIST
79352: LIST
79353: PPUSH
79354: CALL_OW 69
79358: ST_TO_ADDR
// if not tmp then
79359: LD_VAR 0 2
79363: NOT
79364: IFFALSE 79368
// exit ;
79366: GO 79530
// un := tmp [ rand ( 1 , tmp ) ] ;
79368: LD_ADDR_VAR 0 3
79372: PUSH
79373: LD_VAR 0 2
79377: PUSH
79378: LD_INT 1
79380: PPUSH
79381: LD_VAR 0 2
79385: PPUSH
79386: CALL_OW 12
79390: ARRAY
79391: ST_TO_ADDR
// if Crawls ( un ) then
79392: LD_VAR 0 3
79396: PPUSH
79397: CALL_OW 318
79401: IFFALSE 79412
// ComWalk ( un ) ;
79403: LD_VAR 0 3
79407: PPUSH
79408: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79412: LD_VAR 0 3
79416: PPUSH
79417: LD_INT 8
79419: PPUSH
79420: CALL_OW 336
// end ; 4 :
79424: GO 79530
79426: LD_INT 4
79428: DOUBLE
79429: EQUAL
79430: IFTRUE 79434
79432: GO 79508
79434: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
79435: LD_ADDR_VAR 0 2
79439: PUSH
79440: LD_INT 22
79442: PUSH
79443: LD_OWVAR 2
79447: PUSH
79448: EMPTY
79449: LIST
79450: LIST
79451: PUSH
79452: LD_INT 30
79454: PUSH
79455: LD_INT 29
79457: PUSH
79458: EMPTY
79459: LIST
79460: LIST
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: PPUSH
79466: CALL_OW 69
79470: ST_TO_ADDR
// if not tmp then
79471: LD_VAR 0 2
79475: NOT
79476: IFFALSE 79480
// exit ;
79478: GO 79530
// CenterNowOnUnits ( tmp [ 1 ] ) ;
79480: LD_VAR 0 2
79484: PUSH
79485: LD_INT 1
79487: ARRAY
79488: PPUSH
79489: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
79493: LD_VAR 0 2
79497: PUSH
79498: LD_INT 1
79500: ARRAY
79501: PPUSH
79502: CALL_OW 65
// end ; 5 .. 7 :
79506: GO 79530
79508: LD_INT 5
79510: DOUBLE
79511: GREATEREQUAL
79512: IFFALSE 79520
79514: LD_INT 7
79516: DOUBLE
79517: LESSEQUAL
79518: IFTRUE 79522
79520: GO 79529
79522: POP
// StreamSibBomb ; end ;
79523: CALL 75767 0 0
79527: GO 79530
79529: POP
// end ;
79530: PPOPN 3
79532: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
79533: LD_EXP 66
79537: PUSH
79538: LD_EXP 116
79542: AND
79543: IFFALSE 79699
79545: GO 79547
79547: DISABLE
79548: LD_INT 0
79550: PPUSH
79551: PPUSH
79552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
79553: LD_ADDR_VAR 0 2
79557: PUSH
79558: LD_INT 81
79560: PUSH
79561: LD_OWVAR 2
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 2
79572: PUSH
79573: LD_INT 21
79575: PUSH
79576: LD_INT 1
79578: PUSH
79579: EMPTY
79580: LIST
79581: LIST
79582: PUSH
79583: LD_INT 21
79585: PUSH
79586: LD_INT 2
79588: PUSH
79589: EMPTY
79590: LIST
79591: LIST
79592: PUSH
79593: EMPTY
79594: LIST
79595: LIST
79596: LIST
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PPUSH
79602: CALL_OW 69
79606: ST_TO_ADDR
// if not tmp then
79607: LD_VAR 0 2
79611: NOT
79612: IFFALSE 79616
// exit ;
79614: GO 79699
// p := 0 ;
79616: LD_ADDR_VAR 0 3
79620: PUSH
79621: LD_INT 0
79623: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79624: LD_INT 35
79626: PPUSH
79627: CALL_OW 67
// p := p + 1 ;
79631: LD_ADDR_VAR 0 3
79635: PUSH
79636: LD_VAR 0 3
79640: PUSH
79641: LD_INT 1
79643: PLUS
79644: ST_TO_ADDR
// for i in tmp do
79645: LD_ADDR_VAR 0 1
79649: PUSH
79650: LD_VAR 0 2
79654: PUSH
79655: FOR_IN
79656: IFFALSE 79687
// if GetLives ( i ) < 1000 then
79658: LD_VAR 0 1
79662: PPUSH
79663: CALL_OW 256
79667: PUSH
79668: LD_INT 1000
79670: LESS
79671: IFFALSE 79685
// SetLives ( i , 1000 ) ;
79673: LD_VAR 0 1
79677: PPUSH
79678: LD_INT 1000
79680: PPUSH
79681: CALL_OW 234
79685: GO 79655
79687: POP
79688: POP
// until p > 20 ;
79689: LD_VAR 0 3
79693: PUSH
79694: LD_INT 20
79696: GREATER
79697: IFFALSE 79624
// end ;
79699: PPOPN 3
79701: END
// every 0 0$1 trigger StreamModeActive and sTime do
79702: LD_EXP 66
79706: PUSH
79707: LD_EXP 117
79711: AND
79712: IFFALSE 79747
79714: GO 79716
79716: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
79717: LD_INT 28
79719: PPUSH
79720: LD_OWVAR 2
79724: PPUSH
79725: LD_INT 2
79727: PPUSH
79728: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
79732: LD_INT 30
79734: PPUSH
79735: LD_OWVAR 2
79739: PPUSH
79740: LD_INT 2
79742: PPUSH
79743: CALL_OW 322
// end ;
79747: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
79748: LD_EXP 66
79752: PUSH
79753: LD_EXP 118
79757: AND
79758: IFFALSE 79879
79760: GO 79762
79762: DISABLE
79763: LD_INT 0
79765: PPUSH
79766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79767: LD_ADDR_VAR 0 2
79771: PUSH
79772: LD_INT 22
79774: PUSH
79775: LD_OWVAR 2
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: PUSH
79784: LD_INT 21
79786: PUSH
79787: LD_INT 1
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 3
79796: PUSH
79797: LD_INT 23
79799: PUSH
79800: LD_INT 0
79802: PUSH
79803: EMPTY
79804: LIST
79805: LIST
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PUSH
79811: EMPTY
79812: LIST
79813: LIST
79814: LIST
79815: PPUSH
79816: CALL_OW 69
79820: ST_TO_ADDR
// if not tmp then
79821: LD_VAR 0 2
79825: NOT
79826: IFFALSE 79830
// exit ;
79828: GO 79879
// for i in tmp do
79830: LD_ADDR_VAR 0 1
79834: PUSH
79835: LD_VAR 0 2
79839: PUSH
79840: FOR_IN
79841: IFFALSE 79877
// begin if Crawls ( i ) then
79843: LD_VAR 0 1
79847: PPUSH
79848: CALL_OW 318
79852: IFFALSE 79863
// ComWalk ( i ) ;
79854: LD_VAR 0 1
79858: PPUSH
79859: CALL_OW 138
// SetClass ( i , 2 ) ;
79863: LD_VAR 0 1
79867: PPUSH
79868: LD_INT 2
79870: PPUSH
79871: CALL_OW 336
// end ;
79875: GO 79840
79877: POP
79878: POP
// end ;
79879: PPOPN 2
79881: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
79882: LD_EXP 66
79886: PUSH
79887: LD_EXP 119
79891: AND
79892: IFFALSE 80180
79894: GO 79896
79896: DISABLE
79897: LD_INT 0
79899: PPUSH
79900: PPUSH
79901: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
79902: LD_OWVAR 2
79906: PPUSH
79907: LD_INT 9
79909: PPUSH
79910: LD_INT 1
79912: PPUSH
79913: LD_INT 1
79915: PPUSH
79916: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
79920: LD_INT 9
79922: PPUSH
79923: LD_OWVAR 2
79927: PPUSH
79928: CALL_OW 343
// uc_side := 9 ;
79932: LD_ADDR_OWVAR 20
79936: PUSH
79937: LD_INT 9
79939: ST_TO_ADDR
// uc_nation := 2 ;
79940: LD_ADDR_OWVAR 21
79944: PUSH
79945: LD_INT 2
79947: ST_TO_ADDR
// hc_name := Dark Warrior ;
79948: LD_ADDR_OWVAR 26
79952: PUSH
79953: LD_STRING Dark Warrior
79955: ST_TO_ADDR
// hc_gallery :=  ;
79956: LD_ADDR_OWVAR 33
79960: PUSH
79961: LD_STRING 
79963: ST_TO_ADDR
// hc_noskilllimit := true ;
79964: LD_ADDR_OWVAR 76
79968: PUSH
79969: LD_INT 1
79971: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79972: LD_ADDR_OWVAR 31
79976: PUSH
79977: LD_INT 30
79979: PUSH
79980: LD_INT 30
79982: PUSH
79983: LD_INT 30
79985: PUSH
79986: LD_INT 30
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: ST_TO_ADDR
// un := CreateHuman ;
79995: LD_ADDR_VAR 0 3
79999: PUSH
80000: CALL_OW 44
80004: ST_TO_ADDR
// hc_noskilllimit := false ;
80005: LD_ADDR_OWVAR 76
80009: PUSH
80010: LD_INT 0
80012: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80013: LD_VAR 0 3
80017: PPUSH
80018: LD_INT 1
80020: PPUSH
80021: CALL_OW 51
// ToLua ( playRanger() ) ;
80025: LD_STRING playRanger()
80027: PPUSH
80028: CALL_OW 559
// p := 0 ;
80032: LD_ADDR_VAR 0 2
80036: PUSH
80037: LD_INT 0
80039: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80040: LD_INT 35
80042: PPUSH
80043: CALL_OW 67
// p := p + 1 ;
80047: LD_ADDR_VAR 0 2
80051: PUSH
80052: LD_VAR 0 2
80056: PUSH
80057: LD_INT 1
80059: PLUS
80060: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
80061: LD_VAR 0 3
80065: PPUSH
80066: CALL_OW 256
80070: PUSH
80071: LD_INT 1000
80073: LESS
80074: IFFALSE 80088
// SetLives ( un , 1000 ) ;
80076: LD_VAR 0 3
80080: PPUSH
80081: LD_INT 1000
80083: PPUSH
80084: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
80088: LD_VAR 0 3
80092: PPUSH
80093: LD_INT 81
80095: PUSH
80096: LD_OWVAR 2
80100: PUSH
80101: EMPTY
80102: LIST
80103: LIST
80104: PUSH
80105: LD_INT 91
80107: PUSH
80108: LD_VAR 0 3
80112: PUSH
80113: LD_INT 30
80115: PUSH
80116: EMPTY
80117: LIST
80118: LIST
80119: LIST
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: PPUSH
80125: CALL_OW 69
80129: PPUSH
80130: LD_VAR 0 3
80134: PPUSH
80135: CALL_OW 74
80139: PPUSH
80140: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
80144: LD_VAR 0 2
80148: PUSH
80149: LD_INT 80
80151: GREATER
80152: PUSH
80153: LD_VAR 0 3
80157: PPUSH
80158: CALL_OW 301
80162: OR
80163: IFFALSE 80040
// if un then
80165: LD_VAR 0 3
80169: IFFALSE 80180
// RemoveUnit ( un ) ;
80171: LD_VAR 0 3
80175: PPUSH
80176: CALL_OW 64
// end ;
80180: PPOPN 3
80182: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80183: LD_EXP 120
80187: IFFALSE 80303
80189: GO 80191
80191: DISABLE
80192: LD_INT 0
80194: PPUSH
80195: PPUSH
80196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80197: LD_ADDR_VAR 0 2
80201: PUSH
80202: LD_INT 81
80204: PUSH
80205: LD_OWVAR 2
80209: PUSH
80210: EMPTY
80211: LIST
80212: LIST
80213: PUSH
80214: LD_INT 21
80216: PUSH
80217: LD_INT 1
80219: PUSH
80220: EMPTY
80221: LIST
80222: LIST
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PPUSH
80228: CALL_OW 69
80232: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80233: LD_STRING playComputer()
80235: PPUSH
80236: CALL_OW 559
// if not tmp then
80240: LD_VAR 0 2
80244: NOT
80245: IFFALSE 80249
// exit ;
80247: GO 80303
// for i in tmp do
80249: LD_ADDR_VAR 0 1
80253: PUSH
80254: LD_VAR 0 2
80258: PUSH
80259: FOR_IN
80260: IFFALSE 80301
// for j := 1 to 4 do
80262: LD_ADDR_VAR 0 3
80266: PUSH
80267: DOUBLE
80268: LD_INT 1
80270: DEC
80271: ST_TO_ADDR
80272: LD_INT 4
80274: PUSH
80275: FOR_TO
80276: IFFALSE 80297
// SetSkill ( i , j , 10 ) ;
80278: LD_VAR 0 1
80282: PPUSH
80283: LD_VAR 0 3
80287: PPUSH
80288: LD_INT 10
80290: PPUSH
80291: CALL_OW 237
80295: GO 80275
80297: POP
80298: POP
80299: GO 80259
80301: POP
80302: POP
// end ;
80303: PPOPN 3
80305: END
// every 0 0$1 trigger s30 do var i , tmp ;
80306: LD_EXP 121
80310: IFFALSE 80379
80312: GO 80314
80314: DISABLE
80315: LD_INT 0
80317: PPUSH
80318: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80319: LD_ADDR_VAR 0 2
80323: PUSH
80324: LD_INT 22
80326: PUSH
80327: LD_OWVAR 2
80331: PUSH
80332: EMPTY
80333: LIST
80334: LIST
80335: PPUSH
80336: CALL_OW 69
80340: ST_TO_ADDR
// if not tmp then
80341: LD_VAR 0 2
80345: NOT
80346: IFFALSE 80350
// exit ;
80348: GO 80379
// for i in tmp do
80350: LD_ADDR_VAR 0 1
80354: PUSH
80355: LD_VAR 0 2
80359: PUSH
80360: FOR_IN
80361: IFFALSE 80377
// SetLives ( i , 300 ) ;
80363: LD_VAR 0 1
80367: PPUSH
80368: LD_INT 300
80370: PPUSH
80371: CALL_OW 234
80375: GO 80360
80377: POP
80378: POP
// end ;
80379: PPOPN 2
80381: END
// every 0 0$1 trigger s60 do var i , tmp ;
80382: LD_EXP 122
80386: IFFALSE 80455
80388: GO 80390
80390: DISABLE
80391: LD_INT 0
80393: PPUSH
80394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
80395: LD_ADDR_VAR 0 2
80399: PUSH
80400: LD_INT 22
80402: PUSH
80403: LD_OWVAR 2
80407: PUSH
80408: EMPTY
80409: LIST
80410: LIST
80411: PPUSH
80412: CALL_OW 69
80416: ST_TO_ADDR
// if not tmp then
80417: LD_VAR 0 2
80421: NOT
80422: IFFALSE 80426
// exit ;
80424: GO 80455
// for i in tmp do
80426: LD_ADDR_VAR 0 1
80430: PUSH
80431: LD_VAR 0 2
80435: PUSH
80436: FOR_IN
80437: IFFALSE 80453
// SetLives ( i , 600 ) ;
80439: LD_VAR 0 1
80443: PPUSH
80444: LD_INT 600
80446: PPUSH
80447: CALL_OW 234
80451: GO 80436
80453: POP
80454: POP
// end ;
80455: PPOPN 2
80457: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
80458: LD_INT 0
80460: PPUSH
// case cmd of 301 :
80461: LD_VAR 0 1
80465: PUSH
80466: LD_INT 301
80468: DOUBLE
80469: EQUAL
80470: IFTRUE 80474
80472: GO 80506
80474: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
80475: LD_VAR 0 6
80479: PPUSH
80480: LD_VAR 0 7
80484: PPUSH
80485: LD_VAR 0 8
80489: PPUSH
80490: LD_VAR 0 4
80494: PPUSH
80495: LD_VAR 0 5
80499: PPUSH
80500: CALL 81707 0 5
80504: GO 80627
80506: LD_INT 302
80508: DOUBLE
80509: EQUAL
80510: IFTRUE 80514
80512: GO 80551
80514: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
80515: LD_VAR 0 6
80519: PPUSH
80520: LD_VAR 0 7
80524: PPUSH
80525: LD_VAR 0 8
80529: PPUSH
80530: LD_VAR 0 9
80534: PPUSH
80535: LD_VAR 0 4
80539: PPUSH
80540: LD_VAR 0 5
80544: PPUSH
80545: CALL 81798 0 6
80549: GO 80627
80551: LD_INT 303
80553: DOUBLE
80554: EQUAL
80555: IFTRUE 80559
80557: GO 80596
80559: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
80560: LD_VAR 0 6
80564: PPUSH
80565: LD_VAR 0 7
80569: PPUSH
80570: LD_VAR 0 8
80574: PPUSH
80575: LD_VAR 0 9
80579: PPUSH
80580: LD_VAR 0 4
80584: PPUSH
80585: LD_VAR 0 5
80589: PPUSH
80590: CALL 80632 0 6
80594: GO 80627
80596: LD_INT 304
80598: DOUBLE
80599: EQUAL
80600: IFTRUE 80604
80602: GO 80626
80604: POP
// hHackTeleport ( unit , x , y ) ; end ;
80605: LD_VAR 0 2
80609: PPUSH
80610: LD_VAR 0 4
80614: PPUSH
80615: LD_VAR 0 5
80619: PPUSH
80620: CALL 82391 0 3
80624: GO 80627
80626: POP
// end ;
80627: LD_VAR 0 12
80631: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
80632: LD_INT 0
80634: PPUSH
80635: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
80636: LD_VAR 0 1
80640: PUSH
80641: LD_INT 1
80643: LESS
80644: PUSH
80645: LD_VAR 0 1
80649: PUSH
80650: LD_INT 3
80652: GREATER
80653: OR
80654: PUSH
80655: LD_VAR 0 5
80659: PPUSH
80660: LD_VAR 0 6
80664: PPUSH
80665: CALL_OW 428
80669: OR
80670: IFFALSE 80674
// exit ;
80672: GO 81394
// uc_side := your_side ;
80674: LD_ADDR_OWVAR 20
80678: PUSH
80679: LD_OWVAR 2
80683: ST_TO_ADDR
// uc_nation := nation ;
80684: LD_ADDR_OWVAR 21
80688: PUSH
80689: LD_VAR 0 1
80693: ST_TO_ADDR
// bc_level = 1 ;
80694: LD_ADDR_OWVAR 43
80698: PUSH
80699: LD_INT 1
80701: ST_TO_ADDR
// case btype of 1 :
80702: LD_VAR 0 2
80706: PUSH
80707: LD_INT 1
80709: DOUBLE
80710: EQUAL
80711: IFTRUE 80715
80713: GO 80726
80715: POP
// bc_type := b_depot ; 2 :
80716: LD_ADDR_OWVAR 42
80720: PUSH
80721: LD_INT 0
80723: ST_TO_ADDR
80724: GO 81338
80726: LD_INT 2
80728: DOUBLE
80729: EQUAL
80730: IFTRUE 80734
80732: GO 80745
80734: POP
// bc_type := b_warehouse ; 3 :
80735: LD_ADDR_OWVAR 42
80739: PUSH
80740: LD_INT 1
80742: ST_TO_ADDR
80743: GO 81338
80745: LD_INT 3
80747: DOUBLE
80748: EQUAL
80749: IFTRUE 80753
80751: GO 80764
80753: POP
// bc_type := b_lab ; 4 .. 9 :
80754: LD_ADDR_OWVAR 42
80758: PUSH
80759: LD_INT 6
80761: ST_TO_ADDR
80762: GO 81338
80764: LD_INT 4
80766: DOUBLE
80767: GREATEREQUAL
80768: IFFALSE 80776
80770: LD_INT 9
80772: DOUBLE
80773: LESSEQUAL
80774: IFTRUE 80778
80776: GO 80830
80778: POP
// begin bc_type := b_lab_half ;
80779: LD_ADDR_OWVAR 42
80783: PUSH
80784: LD_INT 7
80786: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
80787: LD_ADDR_OWVAR 44
80791: PUSH
80792: LD_INT 10
80794: PUSH
80795: LD_INT 11
80797: PUSH
80798: LD_INT 12
80800: PUSH
80801: LD_INT 15
80803: PUSH
80804: LD_INT 14
80806: PUSH
80807: LD_INT 13
80809: PUSH
80810: EMPTY
80811: LIST
80812: LIST
80813: LIST
80814: LIST
80815: LIST
80816: LIST
80817: PUSH
80818: LD_VAR 0 2
80822: PUSH
80823: LD_INT 3
80825: MINUS
80826: ARRAY
80827: ST_TO_ADDR
// end ; 10 .. 13 :
80828: GO 81338
80830: LD_INT 10
80832: DOUBLE
80833: GREATEREQUAL
80834: IFFALSE 80842
80836: LD_INT 13
80838: DOUBLE
80839: LESSEQUAL
80840: IFTRUE 80844
80842: GO 80921
80844: POP
// begin bc_type := b_lab_full ;
80845: LD_ADDR_OWVAR 42
80849: PUSH
80850: LD_INT 8
80852: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
80853: LD_ADDR_OWVAR 44
80857: PUSH
80858: LD_INT 10
80860: PUSH
80861: LD_INT 12
80863: PUSH
80864: LD_INT 14
80866: PUSH
80867: LD_INT 13
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: LIST
80874: LIST
80875: PUSH
80876: LD_VAR 0 2
80880: PUSH
80881: LD_INT 9
80883: MINUS
80884: ARRAY
80885: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
80886: LD_ADDR_OWVAR 45
80890: PUSH
80891: LD_INT 11
80893: PUSH
80894: LD_INT 15
80896: PUSH
80897: LD_INT 12
80899: PUSH
80900: LD_INT 15
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: LIST
80907: LIST
80908: PUSH
80909: LD_VAR 0 2
80913: PUSH
80914: LD_INT 9
80916: MINUS
80917: ARRAY
80918: ST_TO_ADDR
// end ; 14 :
80919: GO 81338
80921: LD_INT 14
80923: DOUBLE
80924: EQUAL
80925: IFTRUE 80929
80927: GO 80940
80929: POP
// bc_type := b_workshop ; 15 :
80930: LD_ADDR_OWVAR 42
80934: PUSH
80935: LD_INT 2
80937: ST_TO_ADDR
80938: GO 81338
80940: LD_INT 15
80942: DOUBLE
80943: EQUAL
80944: IFTRUE 80948
80946: GO 80959
80948: POP
// bc_type := b_factory ; 16 :
80949: LD_ADDR_OWVAR 42
80953: PUSH
80954: LD_INT 3
80956: ST_TO_ADDR
80957: GO 81338
80959: LD_INT 16
80961: DOUBLE
80962: EQUAL
80963: IFTRUE 80967
80965: GO 80978
80967: POP
// bc_type := b_ext_gun ; 17 :
80968: LD_ADDR_OWVAR 42
80972: PUSH
80973: LD_INT 17
80975: ST_TO_ADDR
80976: GO 81338
80978: LD_INT 17
80980: DOUBLE
80981: EQUAL
80982: IFTRUE 80986
80984: GO 81014
80986: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
80987: LD_ADDR_OWVAR 42
80991: PUSH
80992: LD_INT 19
80994: PUSH
80995: LD_INT 23
80997: PUSH
80998: LD_INT 19
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: LIST
81005: PUSH
81006: LD_VAR 0 1
81010: ARRAY
81011: ST_TO_ADDR
81012: GO 81338
81014: LD_INT 18
81016: DOUBLE
81017: EQUAL
81018: IFTRUE 81022
81020: GO 81033
81022: POP
// bc_type := b_ext_radar ; 19 :
81023: LD_ADDR_OWVAR 42
81027: PUSH
81028: LD_INT 20
81030: ST_TO_ADDR
81031: GO 81338
81033: LD_INT 19
81035: DOUBLE
81036: EQUAL
81037: IFTRUE 81041
81039: GO 81052
81041: POP
// bc_type := b_ext_radio ; 20 :
81042: LD_ADDR_OWVAR 42
81046: PUSH
81047: LD_INT 22
81049: ST_TO_ADDR
81050: GO 81338
81052: LD_INT 20
81054: DOUBLE
81055: EQUAL
81056: IFTRUE 81060
81058: GO 81071
81060: POP
// bc_type := b_ext_siberium ; 21 :
81061: LD_ADDR_OWVAR 42
81065: PUSH
81066: LD_INT 21
81068: ST_TO_ADDR
81069: GO 81338
81071: LD_INT 21
81073: DOUBLE
81074: EQUAL
81075: IFTRUE 81079
81077: GO 81090
81079: POP
// bc_type := b_ext_computer ; 22 :
81080: LD_ADDR_OWVAR 42
81084: PUSH
81085: LD_INT 24
81087: ST_TO_ADDR
81088: GO 81338
81090: LD_INT 22
81092: DOUBLE
81093: EQUAL
81094: IFTRUE 81098
81096: GO 81109
81098: POP
// bc_type := b_ext_track ; 23 :
81099: LD_ADDR_OWVAR 42
81103: PUSH
81104: LD_INT 16
81106: ST_TO_ADDR
81107: GO 81338
81109: LD_INT 23
81111: DOUBLE
81112: EQUAL
81113: IFTRUE 81117
81115: GO 81128
81117: POP
// bc_type := b_ext_laser ; 24 :
81118: LD_ADDR_OWVAR 42
81122: PUSH
81123: LD_INT 25
81125: ST_TO_ADDR
81126: GO 81338
81128: LD_INT 24
81130: DOUBLE
81131: EQUAL
81132: IFTRUE 81136
81134: GO 81147
81136: POP
// bc_type := b_control_tower ; 25 :
81137: LD_ADDR_OWVAR 42
81141: PUSH
81142: LD_INT 36
81144: ST_TO_ADDR
81145: GO 81338
81147: LD_INT 25
81149: DOUBLE
81150: EQUAL
81151: IFTRUE 81155
81153: GO 81166
81155: POP
// bc_type := b_breastwork ; 26 :
81156: LD_ADDR_OWVAR 42
81160: PUSH
81161: LD_INT 31
81163: ST_TO_ADDR
81164: GO 81338
81166: LD_INT 26
81168: DOUBLE
81169: EQUAL
81170: IFTRUE 81174
81172: GO 81185
81174: POP
// bc_type := b_bunker ; 27 :
81175: LD_ADDR_OWVAR 42
81179: PUSH
81180: LD_INT 32
81182: ST_TO_ADDR
81183: GO 81338
81185: LD_INT 27
81187: DOUBLE
81188: EQUAL
81189: IFTRUE 81193
81191: GO 81204
81193: POP
// bc_type := b_turret ; 28 :
81194: LD_ADDR_OWVAR 42
81198: PUSH
81199: LD_INT 33
81201: ST_TO_ADDR
81202: GO 81338
81204: LD_INT 28
81206: DOUBLE
81207: EQUAL
81208: IFTRUE 81212
81210: GO 81223
81212: POP
// bc_type := b_armoury ; 29 :
81213: LD_ADDR_OWVAR 42
81217: PUSH
81218: LD_INT 4
81220: ST_TO_ADDR
81221: GO 81338
81223: LD_INT 29
81225: DOUBLE
81226: EQUAL
81227: IFTRUE 81231
81229: GO 81242
81231: POP
// bc_type := b_barracks ; 30 :
81232: LD_ADDR_OWVAR 42
81236: PUSH
81237: LD_INT 5
81239: ST_TO_ADDR
81240: GO 81338
81242: LD_INT 30
81244: DOUBLE
81245: EQUAL
81246: IFTRUE 81250
81248: GO 81261
81250: POP
// bc_type := b_solar_power ; 31 :
81251: LD_ADDR_OWVAR 42
81255: PUSH
81256: LD_INT 27
81258: ST_TO_ADDR
81259: GO 81338
81261: LD_INT 31
81263: DOUBLE
81264: EQUAL
81265: IFTRUE 81269
81267: GO 81280
81269: POP
// bc_type := b_oil_power ; 32 :
81270: LD_ADDR_OWVAR 42
81274: PUSH
81275: LD_INT 26
81277: ST_TO_ADDR
81278: GO 81338
81280: LD_INT 32
81282: DOUBLE
81283: EQUAL
81284: IFTRUE 81288
81286: GO 81299
81288: POP
// bc_type := b_siberite_power ; 33 :
81289: LD_ADDR_OWVAR 42
81293: PUSH
81294: LD_INT 28
81296: ST_TO_ADDR
81297: GO 81338
81299: LD_INT 33
81301: DOUBLE
81302: EQUAL
81303: IFTRUE 81307
81305: GO 81318
81307: POP
// bc_type := b_oil_mine ; 34 :
81308: LD_ADDR_OWVAR 42
81312: PUSH
81313: LD_INT 29
81315: ST_TO_ADDR
81316: GO 81338
81318: LD_INT 34
81320: DOUBLE
81321: EQUAL
81322: IFTRUE 81326
81324: GO 81337
81326: POP
// bc_type := b_siberite_mine ; end ;
81327: LD_ADDR_OWVAR 42
81331: PUSH
81332: LD_INT 30
81334: ST_TO_ADDR
81335: GO 81338
81337: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
81338: LD_ADDR_VAR 0 8
81342: PUSH
81343: LD_VAR 0 5
81347: PPUSH
81348: LD_VAR 0 6
81352: PPUSH
81353: LD_VAR 0 3
81357: PPUSH
81358: CALL_OW 47
81362: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
81363: LD_OWVAR 42
81367: PUSH
81368: LD_INT 32
81370: PUSH
81371: LD_INT 33
81373: PUSH
81374: EMPTY
81375: LIST
81376: LIST
81377: IN
81378: IFFALSE 81394
// PlaceWeaponTurret ( b , weapon ) ;
81380: LD_VAR 0 8
81384: PPUSH
81385: LD_VAR 0 4
81389: PPUSH
81390: CALL_OW 431
// end ;
81394: LD_VAR 0 7
81398: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
81399: LD_INT 0
81401: PPUSH
81402: PPUSH
81403: PPUSH
81404: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81405: LD_ADDR_VAR 0 4
81409: PUSH
81410: LD_INT 22
81412: PUSH
81413: LD_OWVAR 2
81417: PUSH
81418: EMPTY
81419: LIST
81420: LIST
81421: PUSH
81422: LD_INT 2
81424: PUSH
81425: LD_INT 30
81427: PUSH
81428: LD_INT 0
81430: PUSH
81431: EMPTY
81432: LIST
81433: LIST
81434: PUSH
81435: LD_INT 30
81437: PUSH
81438: LD_INT 1
81440: PUSH
81441: EMPTY
81442: LIST
81443: LIST
81444: PUSH
81445: EMPTY
81446: LIST
81447: LIST
81448: LIST
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: PPUSH
81454: CALL_OW 69
81458: ST_TO_ADDR
// if not tmp then
81459: LD_VAR 0 4
81463: NOT
81464: IFFALSE 81468
// exit ;
81466: GO 81527
// for i in tmp do
81468: LD_ADDR_VAR 0 2
81472: PUSH
81473: LD_VAR 0 4
81477: PUSH
81478: FOR_IN
81479: IFFALSE 81525
// for j = 1 to 3 do
81481: LD_ADDR_VAR 0 3
81485: PUSH
81486: DOUBLE
81487: LD_INT 1
81489: DEC
81490: ST_TO_ADDR
81491: LD_INT 3
81493: PUSH
81494: FOR_TO
81495: IFFALSE 81521
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
81497: LD_VAR 0 2
81501: PPUSH
81502: CALL_OW 274
81506: PPUSH
81507: LD_VAR 0 3
81511: PPUSH
81512: LD_INT 99999
81514: PPUSH
81515: CALL_OW 277
81519: GO 81494
81521: POP
81522: POP
81523: GO 81478
81525: POP
81526: POP
// end ;
81527: LD_VAR 0 1
81531: RET
// export function hHackSetLevel10 ; var i , j ; begin
81532: LD_INT 0
81534: PPUSH
81535: PPUSH
81536: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81537: LD_ADDR_VAR 0 2
81541: PUSH
81542: LD_INT 21
81544: PUSH
81545: LD_INT 1
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: PPUSH
81552: CALL_OW 69
81556: PUSH
81557: FOR_IN
81558: IFFALSE 81610
// if IsSelected ( i ) then
81560: LD_VAR 0 2
81564: PPUSH
81565: CALL_OW 306
81569: IFFALSE 81608
// begin for j := 1 to 4 do
81571: LD_ADDR_VAR 0 3
81575: PUSH
81576: DOUBLE
81577: LD_INT 1
81579: DEC
81580: ST_TO_ADDR
81581: LD_INT 4
81583: PUSH
81584: FOR_TO
81585: IFFALSE 81606
// SetSkill ( i , j , 10 ) ;
81587: LD_VAR 0 2
81591: PPUSH
81592: LD_VAR 0 3
81596: PPUSH
81597: LD_INT 10
81599: PPUSH
81600: CALL_OW 237
81604: GO 81584
81606: POP
81607: POP
// end ;
81608: GO 81557
81610: POP
81611: POP
// end ;
81612: LD_VAR 0 1
81616: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
81617: LD_INT 0
81619: PPUSH
81620: PPUSH
81621: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
81622: LD_ADDR_VAR 0 2
81626: PUSH
81627: LD_INT 22
81629: PUSH
81630: LD_OWVAR 2
81634: PUSH
81635: EMPTY
81636: LIST
81637: LIST
81638: PUSH
81639: LD_INT 21
81641: PUSH
81642: LD_INT 1
81644: PUSH
81645: EMPTY
81646: LIST
81647: LIST
81648: PUSH
81649: EMPTY
81650: LIST
81651: LIST
81652: PPUSH
81653: CALL_OW 69
81657: PUSH
81658: FOR_IN
81659: IFFALSE 81700
// begin for j := 1 to 4 do
81661: LD_ADDR_VAR 0 3
81665: PUSH
81666: DOUBLE
81667: LD_INT 1
81669: DEC
81670: ST_TO_ADDR
81671: LD_INT 4
81673: PUSH
81674: FOR_TO
81675: IFFALSE 81696
// SetSkill ( i , j , 10 ) ;
81677: LD_VAR 0 2
81681: PPUSH
81682: LD_VAR 0 3
81686: PPUSH
81687: LD_INT 10
81689: PPUSH
81690: CALL_OW 237
81694: GO 81674
81696: POP
81697: POP
// end ;
81698: GO 81658
81700: POP
81701: POP
// end ;
81702: LD_VAR 0 1
81706: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
81707: LD_INT 0
81709: PPUSH
// uc_side := your_side ;
81710: LD_ADDR_OWVAR 20
81714: PUSH
81715: LD_OWVAR 2
81719: ST_TO_ADDR
// uc_nation := nation ;
81720: LD_ADDR_OWVAR 21
81724: PUSH
81725: LD_VAR 0 1
81729: ST_TO_ADDR
// InitHc ;
81730: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
81734: LD_INT 0
81736: PPUSH
81737: LD_VAR 0 2
81741: PPUSH
81742: LD_VAR 0 3
81746: PPUSH
81747: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
81751: LD_VAR 0 4
81755: PPUSH
81756: LD_VAR 0 5
81760: PPUSH
81761: CALL_OW 428
81765: PUSH
81766: LD_INT 0
81768: EQUAL
81769: IFFALSE 81793
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
81771: CALL_OW 44
81775: PPUSH
81776: LD_VAR 0 4
81780: PPUSH
81781: LD_VAR 0 5
81785: PPUSH
81786: LD_INT 1
81788: PPUSH
81789: CALL_OW 48
// end ;
81793: LD_VAR 0 6
81797: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
81798: LD_INT 0
81800: PPUSH
81801: PPUSH
// uc_side := your_side ;
81802: LD_ADDR_OWVAR 20
81806: PUSH
81807: LD_OWVAR 2
81811: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
81812: LD_VAR 0 1
81816: PUSH
81817: LD_INT 1
81819: PUSH
81820: LD_INT 2
81822: PUSH
81823: LD_INT 3
81825: PUSH
81826: LD_INT 4
81828: PUSH
81829: LD_INT 5
81831: PUSH
81832: EMPTY
81833: LIST
81834: LIST
81835: LIST
81836: LIST
81837: LIST
81838: IN
81839: IFFALSE 81851
// uc_nation := nation_american else
81841: LD_ADDR_OWVAR 21
81845: PUSH
81846: LD_INT 1
81848: ST_TO_ADDR
81849: GO 81894
// if chassis in [ 11 , 12 , 13 , 14 ] then
81851: LD_VAR 0 1
81855: PUSH
81856: LD_INT 11
81858: PUSH
81859: LD_INT 12
81861: PUSH
81862: LD_INT 13
81864: PUSH
81865: LD_INT 14
81867: PUSH
81868: EMPTY
81869: LIST
81870: LIST
81871: LIST
81872: LIST
81873: IN
81874: IFFALSE 81886
// uc_nation := nation_arabian else
81876: LD_ADDR_OWVAR 21
81880: PUSH
81881: LD_INT 2
81883: ST_TO_ADDR
81884: GO 81894
// uc_nation := nation_russian ;
81886: LD_ADDR_OWVAR 21
81890: PUSH
81891: LD_INT 3
81893: ST_TO_ADDR
// vc_chassis := chassis ;
81894: LD_ADDR_OWVAR 37
81898: PUSH
81899: LD_VAR 0 1
81903: ST_TO_ADDR
// vc_engine := engine ;
81904: LD_ADDR_OWVAR 39
81908: PUSH
81909: LD_VAR 0 2
81913: ST_TO_ADDR
// vc_control := control ;
81914: LD_ADDR_OWVAR 38
81918: PUSH
81919: LD_VAR 0 3
81923: ST_TO_ADDR
// vc_weapon := weapon ;
81924: LD_ADDR_OWVAR 40
81928: PUSH
81929: LD_VAR 0 4
81933: ST_TO_ADDR
// un := CreateVehicle ;
81934: LD_ADDR_VAR 0 8
81938: PUSH
81939: CALL_OW 45
81943: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
81944: LD_VAR 0 8
81948: PPUSH
81949: LD_INT 0
81951: PPUSH
81952: LD_INT 5
81954: PPUSH
81955: CALL_OW 12
81959: PPUSH
81960: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
81964: LD_VAR 0 8
81968: PPUSH
81969: LD_VAR 0 5
81973: PPUSH
81974: LD_VAR 0 6
81978: PPUSH
81979: LD_INT 1
81981: PPUSH
81982: CALL_OW 48
// end ;
81986: LD_VAR 0 7
81990: RET
// export hInvincible ; every 1 do
81991: GO 81993
81993: DISABLE
// hInvincible := [ ] ;
81994: LD_ADDR_EXP 123
81998: PUSH
81999: EMPTY
82000: ST_TO_ADDR
82001: END
// every 10 do var i ;
82002: GO 82004
82004: DISABLE
82005: LD_INT 0
82007: PPUSH
// begin enable ;
82008: ENABLE
// if not hInvincible then
82009: LD_EXP 123
82013: NOT
82014: IFFALSE 82018
// exit ;
82016: GO 82062
// for i in hInvincible do
82018: LD_ADDR_VAR 0 1
82022: PUSH
82023: LD_EXP 123
82027: PUSH
82028: FOR_IN
82029: IFFALSE 82060
// if GetLives ( i ) < 1000 then
82031: LD_VAR 0 1
82035: PPUSH
82036: CALL_OW 256
82040: PUSH
82041: LD_INT 1000
82043: LESS
82044: IFFALSE 82058
// SetLives ( i , 1000 ) ;
82046: LD_VAR 0 1
82050: PPUSH
82051: LD_INT 1000
82053: PPUSH
82054: CALL_OW 234
82058: GO 82028
82060: POP
82061: POP
// end ;
82062: PPOPN 1
82064: END
// export function hHackInvincible ; var i ; begin
82065: LD_INT 0
82067: PPUSH
82068: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82069: LD_ADDR_VAR 0 2
82073: PUSH
82074: LD_INT 2
82076: PUSH
82077: LD_INT 21
82079: PUSH
82080: LD_INT 1
82082: PUSH
82083: EMPTY
82084: LIST
82085: LIST
82086: PUSH
82087: LD_INT 21
82089: PUSH
82090: LD_INT 2
82092: PUSH
82093: EMPTY
82094: LIST
82095: LIST
82096: PUSH
82097: EMPTY
82098: LIST
82099: LIST
82100: LIST
82101: PPUSH
82102: CALL_OW 69
82106: PUSH
82107: FOR_IN
82108: IFFALSE 82169
// if IsSelected ( i ) then
82110: LD_VAR 0 2
82114: PPUSH
82115: CALL_OW 306
82119: IFFALSE 82167
// begin if i in hInvincible then
82121: LD_VAR 0 2
82125: PUSH
82126: LD_EXP 123
82130: IN
82131: IFFALSE 82151
// hInvincible := hInvincible diff i else
82133: LD_ADDR_EXP 123
82137: PUSH
82138: LD_EXP 123
82142: PUSH
82143: LD_VAR 0 2
82147: DIFF
82148: ST_TO_ADDR
82149: GO 82167
// hInvincible := hInvincible union i ;
82151: LD_ADDR_EXP 123
82155: PUSH
82156: LD_EXP 123
82160: PUSH
82161: LD_VAR 0 2
82165: UNION
82166: ST_TO_ADDR
// end ;
82167: GO 82107
82169: POP
82170: POP
// end ;
82171: LD_VAR 0 1
82175: RET
// export function hHackInvisible ; var i , j ; begin
82176: LD_INT 0
82178: PPUSH
82179: PPUSH
82180: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82181: LD_ADDR_VAR 0 2
82185: PUSH
82186: LD_INT 21
82188: PUSH
82189: LD_INT 1
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PPUSH
82196: CALL_OW 69
82200: PUSH
82201: FOR_IN
82202: IFFALSE 82226
// if IsSelected ( i ) then
82204: LD_VAR 0 2
82208: PPUSH
82209: CALL_OW 306
82213: IFFALSE 82224
// ComForceInvisible ( i ) ;
82215: LD_VAR 0 2
82219: PPUSH
82220: CALL_OW 496
82224: GO 82201
82226: POP
82227: POP
// end ;
82228: LD_VAR 0 1
82232: RET
// export function hHackChangeYourSide ; begin
82233: LD_INT 0
82235: PPUSH
// if your_side = 8 then
82236: LD_OWVAR 2
82240: PUSH
82241: LD_INT 8
82243: EQUAL
82244: IFFALSE 82256
// your_side := 0 else
82246: LD_ADDR_OWVAR 2
82250: PUSH
82251: LD_INT 0
82253: ST_TO_ADDR
82254: GO 82270
// your_side := your_side + 1 ;
82256: LD_ADDR_OWVAR 2
82260: PUSH
82261: LD_OWVAR 2
82265: PUSH
82266: LD_INT 1
82268: PLUS
82269: ST_TO_ADDR
// end ;
82270: LD_VAR 0 1
82274: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82275: LD_INT 0
82277: PPUSH
82278: PPUSH
82279: PPUSH
// for i in all_units do
82280: LD_ADDR_VAR 0 2
82284: PUSH
82285: LD_OWVAR 3
82289: PUSH
82290: FOR_IN
82291: IFFALSE 82369
// if IsSelected ( i ) then
82293: LD_VAR 0 2
82297: PPUSH
82298: CALL_OW 306
82302: IFFALSE 82367
// begin j := GetSide ( i ) ;
82304: LD_ADDR_VAR 0 3
82308: PUSH
82309: LD_VAR 0 2
82313: PPUSH
82314: CALL_OW 255
82318: ST_TO_ADDR
// if j = 8 then
82319: LD_VAR 0 3
82323: PUSH
82324: LD_INT 8
82326: EQUAL
82327: IFFALSE 82339
// j := 0 else
82329: LD_ADDR_VAR 0 3
82333: PUSH
82334: LD_INT 0
82336: ST_TO_ADDR
82337: GO 82353
// j := j + 1 ;
82339: LD_ADDR_VAR 0 3
82343: PUSH
82344: LD_VAR 0 3
82348: PUSH
82349: LD_INT 1
82351: PLUS
82352: ST_TO_ADDR
// SetSide ( i , j ) ;
82353: LD_VAR 0 2
82357: PPUSH
82358: LD_VAR 0 3
82362: PPUSH
82363: CALL_OW 235
// end ;
82367: GO 82290
82369: POP
82370: POP
// end ;
82371: LD_VAR 0 1
82375: RET
// export function hHackFog ; begin
82376: LD_INT 0
82378: PPUSH
// FogOff ( true ) ;
82379: LD_INT 1
82381: PPUSH
82382: CALL_OW 344
// end ;
82386: LD_VAR 0 1
82390: RET
// export function hHackTeleport ( unit , x , y ) ; begin
82391: LD_INT 0
82393: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
82394: LD_VAR 0 1
82398: PPUSH
82399: LD_VAR 0 2
82403: PPUSH
82404: LD_VAR 0 3
82408: PPUSH
82409: LD_INT 1
82411: PPUSH
82412: LD_INT 1
82414: PPUSH
82415: CALL_OW 483
// CenterOnXY ( x , y ) ;
82419: LD_VAR 0 2
82423: PPUSH
82424: LD_VAR 0 3
82428: PPUSH
82429: CALL_OW 84
// end ;
82433: LD_VAR 0 4
82437: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
82438: LD_INT 0
82440: PPUSH
82441: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
82442: LD_VAR 0 1
82446: NOT
82447: PUSH
82448: LD_VAR 0 2
82452: PPUSH
82453: LD_VAR 0 3
82457: PPUSH
82458: CALL_OW 488
82462: NOT
82463: OR
82464: PUSH
82465: LD_VAR 0 1
82469: PPUSH
82470: CALL_OW 266
82474: PUSH
82475: LD_INT 3
82477: NONEQUAL
82478: PUSH
82479: LD_VAR 0 1
82483: PPUSH
82484: CALL_OW 247
82488: PUSH
82489: LD_INT 1
82491: EQUAL
82492: NOT
82493: AND
82494: OR
82495: IFFALSE 82499
// exit ;
82497: GO 82648
// if GetType ( factory ) = unit_human then
82499: LD_VAR 0 1
82503: PPUSH
82504: CALL_OW 247
82508: PUSH
82509: LD_INT 1
82511: EQUAL
82512: IFFALSE 82529
// factory := IsInUnit ( factory ) ;
82514: LD_ADDR_VAR 0 1
82518: PUSH
82519: LD_VAR 0 1
82523: PPUSH
82524: CALL_OW 310
82528: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
82529: LD_VAR 0 1
82533: PPUSH
82534: CALL_OW 266
82538: PUSH
82539: LD_INT 3
82541: NONEQUAL
82542: IFFALSE 82546
// exit ;
82544: GO 82648
// if HexInfo ( x , y ) = factory then
82546: LD_VAR 0 2
82550: PPUSH
82551: LD_VAR 0 3
82555: PPUSH
82556: CALL_OW 428
82560: PUSH
82561: LD_VAR 0 1
82565: EQUAL
82566: IFFALSE 82593
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
82568: LD_ADDR_EXP 124
82572: PUSH
82573: LD_EXP 124
82577: PPUSH
82578: LD_VAR 0 1
82582: PPUSH
82583: LD_INT 0
82585: PPUSH
82586: CALL_OW 1
82590: ST_TO_ADDR
82591: GO 82644
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
82593: LD_ADDR_EXP 124
82597: PUSH
82598: LD_EXP 124
82602: PPUSH
82603: LD_VAR 0 1
82607: PPUSH
82608: LD_VAR 0 1
82612: PPUSH
82613: CALL_OW 255
82617: PUSH
82618: LD_VAR 0 1
82622: PUSH
82623: LD_VAR 0 2
82627: PUSH
82628: LD_VAR 0 3
82632: PUSH
82633: EMPTY
82634: LIST
82635: LIST
82636: LIST
82637: LIST
82638: PPUSH
82639: CALL_OW 1
82643: ST_TO_ADDR
// UpdateFactoryWaypoints ;
82644: CALL 82653 0 0
// end ;
82648: LD_VAR 0 4
82652: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
82653: LD_INT 0
82655: PPUSH
82656: PPUSH
82657: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
82658: LD_STRING resetFactoryWaypoint();
82660: PPUSH
82661: CALL_OW 559
// if factoryWaypoints then
82665: LD_EXP 124
82669: IFFALSE 82795
// begin list := PrepareArray ( factoryWaypoints ) ;
82671: LD_ADDR_VAR 0 3
82675: PUSH
82676: LD_EXP 124
82680: PPUSH
82681: CALL 67939 0 1
82685: ST_TO_ADDR
// for i := 1 to list do
82686: LD_ADDR_VAR 0 2
82690: PUSH
82691: DOUBLE
82692: LD_INT 1
82694: DEC
82695: ST_TO_ADDR
82696: LD_VAR 0 3
82700: PUSH
82701: FOR_TO
82702: IFFALSE 82793
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82704: LD_STRING setFactoryWaypointXY(
82706: PUSH
82707: LD_VAR 0 3
82711: PUSH
82712: LD_VAR 0 2
82716: ARRAY
82717: PUSH
82718: LD_INT 1
82720: ARRAY
82721: STR
82722: PUSH
82723: LD_STRING ,
82725: STR
82726: PUSH
82727: LD_VAR 0 3
82731: PUSH
82732: LD_VAR 0 2
82736: ARRAY
82737: PUSH
82738: LD_INT 2
82740: ARRAY
82741: STR
82742: PUSH
82743: LD_STRING ,
82745: STR
82746: PUSH
82747: LD_VAR 0 3
82751: PUSH
82752: LD_VAR 0 2
82756: ARRAY
82757: PUSH
82758: LD_INT 3
82760: ARRAY
82761: STR
82762: PUSH
82763: LD_STRING ,
82765: STR
82766: PUSH
82767: LD_VAR 0 3
82771: PUSH
82772: LD_VAR 0 2
82776: ARRAY
82777: PUSH
82778: LD_INT 4
82780: ARRAY
82781: STR
82782: PUSH
82783: LD_STRING )
82785: STR
82786: PPUSH
82787: CALL_OW 559
82791: GO 82701
82793: POP
82794: POP
// end ; end ;
82795: LD_VAR 0 1
82799: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
82800: LD_INT 0
82802: PPUSH
// if HexInfo ( x , y ) = warehouse then
82803: LD_VAR 0 2
82807: PPUSH
82808: LD_VAR 0 3
82812: PPUSH
82813: CALL_OW 428
82817: PUSH
82818: LD_VAR 0 1
82822: EQUAL
82823: IFFALSE 82850
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
82825: LD_ADDR_EXP 125
82829: PUSH
82830: LD_EXP 125
82834: PPUSH
82835: LD_VAR 0 1
82839: PPUSH
82840: LD_INT 0
82842: PPUSH
82843: CALL_OW 1
82847: ST_TO_ADDR
82848: GO 82901
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
82850: LD_ADDR_EXP 125
82854: PUSH
82855: LD_EXP 125
82859: PPUSH
82860: LD_VAR 0 1
82864: PPUSH
82865: LD_VAR 0 1
82869: PPUSH
82870: CALL_OW 255
82874: PUSH
82875: LD_VAR 0 1
82879: PUSH
82880: LD_VAR 0 2
82884: PUSH
82885: LD_VAR 0 3
82889: PUSH
82890: EMPTY
82891: LIST
82892: LIST
82893: LIST
82894: LIST
82895: PPUSH
82896: CALL_OW 1
82900: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
82901: CALL 82910 0 0
// end ;
82905: LD_VAR 0 4
82909: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
82910: LD_INT 0
82912: PPUSH
82913: PPUSH
82914: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
82915: LD_STRING resetWarehouseGatheringPoints();
82917: PPUSH
82918: CALL_OW 559
// if warehouseGatheringPoints then
82922: LD_EXP 125
82926: IFFALSE 83052
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
82928: LD_ADDR_VAR 0 3
82932: PUSH
82933: LD_EXP 125
82937: PPUSH
82938: CALL 67939 0 1
82942: ST_TO_ADDR
// for i := 1 to list do
82943: LD_ADDR_VAR 0 2
82947: PUSH
82948: DOUBLE
82949: LD_INT 1
82951: DEC
82952: ST_TO_ADDR
82953: LD_VAR 0 3
82957: PUSH
82958: FOR_TO
82959: IFFALSE 83050
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82961: LD_STRING setWarehouseGatheringPointXY(
82963: PUSH
82964: LD_VAR 0 3
82968: PUSH
82969: LD_VAR 0 2
82973: ARRAY
82974: PUSH
82975: LD_INT 1
82977: ARRAY
82978: STR
82979: PUSH
82980: LD_STRING ,
82982: STR
82983: PUSH
82984: LD_VAR 0 3
82988: PUSH
82989: LD_VAR 0 2
82993: ARRAY
82994: PUSH
82995: LD_INT 2
82997: ARRAY
82998: STR
82999: PUSH
83000: LD_STRING ,
83002: STR
83003: PUSH
83004: LD_VAR 0 3
83008: PUSH
83009: LD_VAR 0 2
83013: ARRAY
83014: PUSH
83015: LD_INT 3
83017: ARRAY
83018: STR
83019: PUSH
83020: LD_STRING ,
83022: STR
83023: PUSH
83024: LD_VAR 0 3
83028: PUSH
83029: LD_VAR 0 2
83033: ARRAY
83034: PUSH
83035: LD_INT 4
83037: ARRAY
83038: STR
83039: PUSH
83040: LD_STRING )
83042: STR
83043: PPUSH
83044: CALL_OW 559
83048: GO 82958
83050: POP
83051: POP
// end ; end ;
83052: LD_VAR 0 1
83056: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
83057: LD_EXP 125
83061: IFFALSE 83746
83063: GO 83065
83065: DISABLE
83066: LD_INT 0
83068: PPUSH
83069: PPUSH
83070: PPUSH
83071: PPUSH
83072: PPUSH
83073: PPUSH
83074: PPUSH
83075: PPUSH
83076: PPUSH
// begin enable ;
83077: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
83078: LD_ADDR_VAR 0 3
83082: PUSH
83083: LD_EXP 125
83087: PPUSH
83088: CALL 67939 0 1
83092: ST_TO_ADDR
// if not list then
83093: LD_VAR 0 3
83097: NOT
83098: IFFALSE 83102
// exit ;
83100: GO 83746
// for i := 1 to list do
83102: LD_ADDR_VAR 0 1
83106: PUSH
83107: DOUBLE
83108: LD_INT 1
83110: DEC
83111: ST_TO_ADDR
83112: LD_VAR 0 3
83116: PUSH
83117: FOR_TO
83118: IFFALSE 83744
// begin depot := list [ i ] [ 2 ] ;
83120: LD_ADDR_VAR 0 8
83124: PUSH
83125: LD_VAR 0 3
83129: PUSH
83130: LD_VAR 0 1
83134: ARRAY
83135: PUSH
83136: LD_INT 2
83138: ARRAY
83139: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
83140: LD_ADDR_VAR 0 5
83144: PUSH
83145: LD_VAR 0 3
83149: PUSH
83150: LD_VAR 0 1
83154: ARRAY
83155: PUSH
83156: LD_INT 1
83158: ARRAY
83159: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
83160: LD_VAR 0 8
83164: PPUSH
83165: CALL_OW 301
83169: PUSH
83170: LD_VAR 0 5
83174: PUSH
83175: LD_VAR 0 8
83179: PPUSH
83180: CALL_OW 255
83184: NONEQUAL
83185: OR
83186: IFFALSE 83215
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83188: LD_ADDR_EXP 125
83192: PUSH
83193: LD_EXP 125
83197: PPUSH
83198: LD_VAR 0 8
83202: PPUSH
83203: LD_INT 0
83205: PPUSH
83206: CALL_OW 1
83210: ST_TO_ADDR
// exit ;
83211: POP
83212: POP
83213: GO 83746
// end ; x := list [ i ] [ 3 ] ;
83215: LD_ADDR_VAR 0 6
83219: PUSH
83220: LD_VAR 0 3
83224: PUSH
83225: LD_VAR 0 1
83229: ARRAY
83230: PUSH
83231: LD_INT 3
83233: ARRAY
83234: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83235: LD_ADDR_VAR 0 7
83239: PUSH
83240: LD_VAR 0 3
83244: PUSH
83245: LD_VAR 0 1
83249: ARRAY
83250: PUSH
83251: LD_INT 4
83253: ARRAY
83254: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83255: LD_ADDR_VAR 0 9
83259: PUSH
83260: LD_VAR 0 6
83264: PPUSH
83265: LD_VAR 0 7
83269: PPUSH
83270: LD_INT 16
83272: PPUSH
83273: CALL 66527 0 3
83277: ST_TO_ADDR
// if not cratesNearbyPoint then
83278: LD_VAR 0 9
83282: NOT
83283: IFFALSE 83289
// exit ;
83285: POP
83286: POP
83287: GO 83746
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83289: LD_ADDR_VAR 0 4
83293: PUSH
83294: LD_INT 22
83296: PUSH
83297: LD_VAR 0 5
83301: PUSH
83302: EMPTY
83303: LIST
83304: LIST
83305: PUSH
83306: LD_INT 3
83308: PUSH
83309: LD_INT 60
83311: PUSH
83312: EMPTY
83313: LIST
83314: PUSH
83315: EMPTY
83316: LIST
83317: LIST
83318: PUSH
83319: LD_INT 91
83321: PUSH
83322: LD_VAR 0 8
83326: PUSH
83327: LD_INT 6
83329: PUSH
83330: EMPTY
83331: LIST
83332: LIST
83333: LIST
83334: PUSH
83335: LD_INT 2
83337: PUSH
83338: LD_INT 25
83340: PUSH
83341: LD_INT 2
83343: PUSH
83344: EMPTY
83345: LIST
83346: LIST
83347: PUSH
83348: LD_INT 25
83350: PUSH
83351: LD_INT 16
83353: PUSH
83354: EMPTY
83355: LIST
83356: LIST
83357: PUSH
83358: EMPTY
83359: LIST
83360: LIST
83361: LIST
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: LIST
83367: LIST
83368: PPUSH
83369: CALL_OW 69
83373: PUSH
83374: LD_VAR 0 8
83378: PPUSH
83379: CALL_OW 313
83383: PPUSH
83384: LD_INT 3
83386: PUSH
83387: LD_INT 60
83389: PUSH
83390: EMPTY
83391: LIST
83392: PUSH
83393: EMPTY
83394: LIST
83395: LIST
83396: PUSH
83397: LD_INT 2
83399: PUSH
83400: LD_INT 25
83402: PUSH
83403: LD_INT 2
83405: PUSH
83406: EMPTY
83407: LIST
83408: LIST
83409: PUSH
83410: LD_INT 25
83412: PUSH
83413: LD_INT 16
83415: PUSH
83416: EMPTY
83417: LIST
83418: LIST
83419: PUSH
83420: EMPTY
83421: LIST
83422: LIST
83423: LIST
83424: PUSH
83425: EMPTY
83426: LIST
83427: LIST
83428: PPUSH
83429: CALL_OW 72
83433: UNION
83434: ST_TO_ADDR
// if tmp then
83435: LD_VAR 0 4
83439: IFFALSE 83519
// begin tmp := ShrinkArray ( tmp , 3 ) ;
83441: LD_ADDR_VAR 0 4
83445: PUSH
83446: LD_VAR 0 4
83450: PPUSH
83451: LD_INT 3
83453: PPUSH
83454: CALL 64496 0 2
83458: ST_TO_ADDR
// for j in tmp do
83459: LD_ADDR_VAR 0 2
83463: PUSH
83464: LD_VAR 0 4
83468: PUSH
83469: FOR_IN
83470: IFFALSE 83513
// begin if IsInUnit ( j ) then
83472: LD_VAR 0 2
83476: PPUSH
83477: CALL_OW 310
83481: IFFALSE 83492
// ComExit ( j ) ;
83483: LD_VAR 0 2
83487: PPUSH
83488: CALL 64579 0 1
// AddComCollect ( j , x , y ) ;
83492: LD_VAR 0 2
83496: PPUSH
83497: LD_VAR 0 6
83501: PPUSH
83502: LD_VAR 0 7
83506: PPUSH
83507: CALL_OW 177
// end ;
83511: GO 83469
83513: POP
83514: POP
// exit ;
83515: POP
83516: POP
83517: GO 83746
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
83519: LD_ADDR_VAR 0 4
83523: PUSH
83524: LD_INT 22
83526: PUSH
83527: LD_VAR 0 5
83531: PUSH
83532: EMPTY
83533: LIST
83534: LIST
83535: PUSH
83536: LD_INT 91
83538: PUSH
83539: LD_VAR 0 8
83543: PUSH
83544: LD_INT 8
83546: PUSH
83547: EMPTY
83548: LIST
83549: LIST
83550: LIST
83551: PUSH
83552: LD_INT 2
83554: PUSH
83555: LD_INT 34
83557: PUSH
83558: LD_INT 12
83560: PUSH
83561: EMPTY
83562: LIST
83563: LIST
83564: PUSH
83565: LD_INT 34
83567: PUSH
83568: LD_INT 51
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: PUSH
83575: LD_INT 34
83577: PUSH
83578: LD_INT 32
83580: PUSH
83581: EMPTY
83582: LIST
83583: LIST
83584: PUSH
83585: LD_INT 34
83587: PUSH
83588: LD_INT 89
83590: PUSH
83591: EMPTY
83592: LIST
83593: LIST
83594: PUSH
83595: EMPTY
83596: LIST
83597: LIST
83598: LIST
83599: LIST
83600: LIST
83601: PUSH
83602: EMPTY
83603: LIST
83604: LIST
83605: LIST
83606: PPUSH
83607: CALL_OW 69
83611: ST_TO_ADDR
// if tmp then
83612: LD_VAR 0 4
83616: IFFALSE 83742
// begin for j in tmp do
83618: LD_ADDR_VAR 0 2
83622: PUSH
83623: LD_VAR 0 4
83627: PUSH
83628: FOR_IN
83629: IFFALSE 83740
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
83631: LD_VAR 0 2
83635: PPUSH
83636: CALL_OW 262
83640: PUSH
83641: LD_INT 3
83643: EQUAL
83644: PUSH
83645: LD_VAR 0 2
83649: PPUSH
83650: CALL_OW 261
83654: PUSH
83655: LD_INT 20
83657: GREATER
83658: OR
83659: PUSH
83660: LD_VAR 0 2
83664: PPUSH
83665: CALL_OW 314
83669: NOT
83670: AND
83671: PUSH
83672: LD_VAR 0 2
83676: PPUSH
83677: CALL_OW 263
83681: PUSH
83682: LD_INT 1
83684: NONEQUAL
83685: PUSH
83686: LD_VAR 0 2
83690: PPUSH
83691: CALL_OW 311
83695: OR
83696: AND
83697: IFFALSE 83738
// begin ComCollect ( j , x , y ) ;
83699: LD_VAR 0 2
83703: PPUSH
83704: LD_VAR 0 6
83708: PPUSH
83709: LD_VAR 0 7
83713: PPUSH
83714: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
83718: LD_VAR 0 2
83722: PPUSH
83723: LD_VAR 0 8
83727: PPUSH
83728: CALL_OW 172
// exit ;
83732: POP
83733: POP
83734: POP
83735: POP
83736: GO 83746
// end ;
83738: GO 83628
83740: POP
83741: POP
// end ; end ;
83742: GO 83117
83744: POP
83745: POP
// end ; end_of_file
83746: PPOPN 9
83748: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83749: LD_VAR 0 1
83753: PUSH
83754: LD_INT 200
83756: DOUBLE
83757: GREATEREQUAL
83758: IFFALSE 83766
83760: LD_INT 299
83762: DOUBLE
83763: LESSEQUAL
83764: IFTRUE 83768
83766: GO 83800
83768: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83769: LD_VAR 0 1
83773: PPUSH
83774: LD_VAR 0 2
83778: PPUSH
83779: LD_VAR 0 3
83783: PPUSH
83784: LD_VAR 0 4
83788: PPUSH
83789: LD_VAR 0 5
83793: PPUSH
83794: CALL 84288 0 5
83798: GO 83877
83800: LD_INT 300
83802: DOUBLE
83803: GREATEREQUAL
83804: IFFALSE 83812
83806: LD_INT 399
83808: DOUBLE
83809: LESSEQUAL
83810: IFTRUE 83814
83812: GO 83876
83814: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83815: LD_VAR 0 1
83819: PPUSH
83820: LD_VAR 0 2
83824: PPUSH
83825: LD_VAR 0 3
83829: PPUSH
83830: LD_VAR 0 4
83834: PPUSH
83835: LD_VAR 0 5
83839: PPUSH
83840: LD_VAR 0 6
83844: PPUSH
83845: LD_VAR 0 7
83849: PPUSH
83850: LD_VAR 0 8
83854: PPUSH
83855: LD_VAR 0 9
83859: PPUSH
83860: LD_VAR 0 10
83864: PPUSH
83865: LD_VAR 0 11
83869: PPUSH
83870: CALL 80458 0 11
83874: GO 83877
83876: POP
// end ;
83877: PPOPN 11
83879: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83880: LD_VAR 0 1
83884: PPUSH
83885: LD_VAR 0 2
83889: PPUSH
83890: LD_VAR 0 3
83894: PPUSH
83895: LD_VAR 0 4
83899: PPUSH
83900: LD_VAR 0 5
83904: PPUSH
83905: CALL 84024 0 5
// end ; end_of_file
83909: PPOPN 5
83911: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
83912: LD_INT 0
83914: PPUSH
83915: PPUSH
83916: PPUSH
83917: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
83918: LD_VAR 0 1
83922: PPUSH
83923: CALL_OW 264
83927: PUSH
83928: LD_INT 91
83930: EQUAL
83931: IFFALSE 84003
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
83933: LD_INT 68
83935: PPUSH
83936: LD_VAR 0 1
83940: PPUSH
83941: CALL_OW 255
83945: PPUSH
83946: CALL_OW 321
83950: PUSH
83951: LD_INT 2
83953: EQUAL
83954: IFFALSE 83966
// eff := 70 else
83956: LD_ADDR_VAR 0 4
83960: PUSH
83961: LD_INT 70
83963: ST_TO_ADDR
83964: GO 83974
// eff := 30 ;
83966: LD_ADDR_VAR 0 4
83970: PUSH
83971: LD_INT 30
83973: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83974: LD_VAR 0 1
83978: PPUSH
83979: CALL_OW 250
83983: PPUSH
83984: LD_VAR 0 1
83988: PPUSH
83989: CALL_OW 251
83993: PPUSH
83994: LD_VAR 0 4
83998: PPUSH
83999: CALL_OW 495
// end ; end ;
84003: LD_VAR 0 2
84007: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84008: LD_INT 0
84010: PPUSH
// end ;
84011: LD_VAR 0 4
84015: RET
// export function SOS_Command ( cmd ) ; begin
84016: LD_INT 0
84018: PPUSH
// end ;
84019: LD_VAR 0 2
84023: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84024: LD_INT 0
84026: PPUSH
// end ;
84027: LD_VAR 0 6
84031: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84032: LD_INT 0
84034: PPUSH
84035: PPUSH
// if not vehicle or not factory then
84036: LD_VAR 0 1
84040: NOT
84041: PUSH
84042: LD_VAR 0 2
84046: NOT
84047: OR
84048: IFFALSE 84052
// exit ;
84050: GO 84283
// if factoryWaypoints >= factory then
84052: LD_EXP 124
84056: PUSH
84057: LD_VAR 0 2
84061: GREATEREQUAL
84062: IFFALSE 84283
// if factoryWaypoints [ factory ] then
84064: LD_EXP 124
84068: PUSH
84069: LD_VAR 0 2
84073: ARRAY
84074: IFFALSE 84283
// begin if GetControl ( vehicle ) = control_manual then
84076: LD_VAR 0 1
84080: PPUSH
84081: CALL_OW 263
84085: PUSH
84086: LD_INT 1
84088: EQUAL
84089: IFFALSE 84170
// begin driver := IsDrivenBy ( vehicle ) ;
84091: LD_ADDR_VAR 0 4
84095: PUSH
84096: LD_VAR 0 1
84100: PPUSH
84101: CALL_OW 311
84105: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84106: LD_VAR 0 4
84110: PPUSH
84111: LD_EXP 124
84115: PUSH
84116: LD_VAR 0 2
84120: ARRAY
84121: PUSH
84122: LD_INT 3
84124: ARRAY
84125: PPUSH
84126: LD_EXP 124
84130: PUSH
84131: LD_VAR 0 2
84135: ARRAY
84136: PUSH
84137: LD_INT 4
84139: ARRAY
84140: PPUSH
84141: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84145: LD_VAR 0 4
84149: PPUSH
84150: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84154: LD_VAR 0 4
84158: PPUSH
84159: LD_VAR 0 2
84163: PPUSH
84164: CALL_OW 180
// end else
84168: GO 84283
// if GetControl ( vehicle ) = control_remote then
84170: LD_VAR 0 1
84174: PPUSH
84175: CALL_OW 263
84179: PUSH
84180: LD_INT 2
84182: EQUAL
84183: IFFALSE 84244
// begin wait ( 0 0$2 ) ;
84185: LD_INT 70
84187: PPUSH
84188: CALL_OW 67
// if Connect ( vehicle ) then
84192: LD_VAR 0 1
84196: PPUSH
84197: CALL 34838 0 1
84201: IFFALSE 84242
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84203: LD_VAR 0 1
84207: PPUSH
84208: LD_EXP 124
84212: PUSH
84213: LD_VAR 0 2
84217: ARRAY
84218: PUSH
84219: LD_INT 3
84221: ARRAY
84222: PPUSH
84223: LD_EXP 124
84227: PUSH
84228: LD_VAR 0 2
84232: ARRAY
84233: PUSH
84234: LD_INT 4
84236: ARRAY
84237: PPUSH
84238: CALL_OW 171
// end else
84242: GO 84283
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84244: LD_VAR 0 1
84248: PPUSH
84249: LD_EXP 124
84253: PUSH
84254: LD_VAR 0 2
84258: ARRAY
84259: PUSH
84260: LD_INT 3
84262: ARRAY
84263: PPUSH
84264: LD_EXP 124
84268: PUSH
84269: LD_VAR 0 2
84273: ARRAY
84274: PUSH
84275: LD_INT 4
84277: ARRAY
84278: PPUSH
84279: CALL_OW 171
// end ; end ;
84283: LD_VAR 0 3
84287: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84288: LD_INT 0
84290: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84291: LD_VAR 0 1
84295: PUSH
84296: LD_INT 250
84298: EQUAL
84299: PUSH
84300: LD_VAR 0 2
84304: PPUSH
84305: CALL_OW 264
84309: PUSH
84310: LD_INT 81
84312: EQUAL
84313: AND
84314: IFFALSE 84335
// MinerPlaceMine ( unit , x , y ) ;
84316: LD_VAR 0 2
84320: PPUSH
84321: LD_VAR 0 4
84325: PPUSH
84326: LD_VAR 0 5
84330: PPUSH
84331: CALL 86720 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
84335: LD_VAR 0 1
84339: PUSH
84340: LD_INT 251
84342: EQUAL
84343: PUSH
84344: LD_VAR 0 2
84348: PPUSH
84349: CALL_OW 264
84353: PUSH
84354: LD_INT 81
84356: EQUAL
84357: AND
84358: IFFALSE 84379
// MinerDetonateMine ( unit , x , y ) ;
84360: LD_VAR 0 2
84364: PPUSH
84365: LD_VAR 0 4
84369: PPUSH
84370: LD_VAR 0 5
84374: PPUSH
84375: CALL 86995 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
84379: LD_VAR 0 1
84383: PUSH
84384: LD_INT 252
84386: EQUAL
84387: PUSH
84388: LD_VAR 0 2
84392: PPUSH
84393: CALL_OW 264
84397: PUSH
84398: LD_INT 81
84400: EQUAL
84401: AND
84402: IFFALSE 84423
// MinerCreateMinefield ( unit , x , y ) ;
84404: LD_VAR 0 2
84408: PPUSH
84409: LD_VAR 0 4
84413: PPUSH
84414: LD_VAR 0 5
84418: PPUSH
84419: CALL 87412 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
84423: LD_VAR 0 1
84427: PUSH
84428: LD_INT 253
84430: EQUAL
84431: PUSH
84432: LD_VAR 0 2
84436: PPUSH
84437: CALL_OW 257
84441: PUSH
84442: LD_INT 5
84444: EQUAL
84445: AND
84446: IFFALSE 84467
// ComBinocular ( unit , x , y ) ;
84448: LD_VAR 0 2
84452: PPUSH
84453: LD_VAR 0 4
84457: PPUSH
84458: LD_VAR 0 5
84462: PPUSH
84463: CALL 87781 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
84467: LD_VAR 0 1
84471: PUSH
84472: LD_INT 254
84474: EQUAL
84475: PUSH
84476: LD_VAR 0 2
84480: PPUSH
84481: CALL_OW 264
84485: PUSH
84486: LD_INT 99
84488: EQUAL
84489: AND
84490: PUSH
84491: LD_VAR 0 3
84495: PPUSH
84496: CALL_OW 263
84500: PUSH
84501: LD_INT 3
84503: EQUAL
84504: AND
84505: IFFALSE 84521
// HackDestroyVehicle ( unit , selectedUnit ) ;
84507: LD_VAR 0 2
84511: PPUSH
84512: LD_VAR 0 3
84516: PPUSH
84517: CALL 86084 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
84521: LD_VAR 0 1
84525: PUSH
84526: LD_INT 255
84528: EQUAL
84529: PUSH
84530: LD_VAR 0 2
84534: PPUSH
84535: CALL_OW 264
84539: PUSH
84540: LD_INT 14
84542: PUSH
84543: LD_INT 53
84545: PUSH
84546: EMPTY
84547: LIST
84548: LIST
84549: IN
84550: AND
84551: PUSH
84552: LD_VAR 0 4
84556: PPUSH
84557: LD_VAR 0 5
84561: PPUSH
84562: CALL_OW 488
84566: AND
84567: IFFALSE 84591
// CutTreeXYR ( unit , x , y , 12 ) ;
84569: LD_VAR 0 2
84573: PPUSH
84574: LD_VAR 0 4
84578: PPUSH
84579: LD_VAR 0 5
84583: PPUSH
84584: LD_INT 12
84586: PPUSH
84587: CALL 84654 0 4
// if cmd = 256 then
84591: LD_VAR 0 1
84595: PUSH
84596: LD_INT 256
84598: EQUAL
84599: IFFALSE 84620
// SetFactoryWaypoint ( unit , x , y ) ;
84601: LD_VAR 0 2
84605: PPUSH
84606: LD_VAR 0 4
84610: PPUSH
84611: LD_VAR 0 5
84615: PPUSH
84616: CALL 82438 0 3
// if cmd = 257 then
84620: LD_VAR 0 1
84624: PUSH
84625: LD_INT 257
84627: EQUAL
84628: IFFALSE 84649
// SetWarehouseGatheringPoint ( unit , x , y ) ;
84630: LD_VAR 0 2
84634: PPUSH
84635: LD_VAR 0 4
84639: PPUSH
84640: LD_VAR 0 5
84644: PPUSH
84645: CALL 82800 0 3
// end ;
84649: LD_VAR 0 6
84653: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
84654: LD_INT 0
84656: PPUSH
84657: PPUSH
84658: PPUSH
84659: PPUSH
84660: PPUSH
84661: PPUSH
84662: PPUSH
84663: PPUSH
84664: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
84665: LD_VAR 0 1
84669: NOT
84670: PUSH
84671: LD_VAR 0 2
84675: PPUSH
84676: LD_VAR 0 3
84680: PPUSH
84681: CALL_OW 488
84685: NOT
84686: OR
84687: PUSH
84688: LD_VAR 0 4
84692: NOT
84693: OR
84694: IFFALSE 84698
// exit ;
84696: GO 85038
// list := [ ] ;
84698: LD_ADDR_VAR 0 13
84702: PUSH
84703: EMPTY
84704: ST_TO_ADDR
// if x - r < 0 then
84705: LD_VAR 0 2
84709: PUSH
84710: LD_VAR 0 4
84714: MINUS
84715: PUSH
84716: LD_INT 0
84718: LESS
84719: IFFALSE 84731
// min_x := 0 else
84721: LD_ADDR_VAR 0 7
84725: PUSH
84726: LD_INT 0
84728: ST_TO_ADDR
84729: GO 84747
// min_x := x - r ;
84731: LD_ADDR_VAR 0 7
84735: PUSH
84736: LD_VAR 0 2
84740: PUSH
84741: LD_VAR 0 4
84745: MINUS
84746: ST_TO_ADDR
// if y - r < 0 then
84747: LD_VAR 0 3
84751: PUSH
84752: LD_VAR 0 4
84756: MINUS
84757: PUSH
84758: LD_INT 0
84760: LESS
84761: IFFALSE 84773
// min_y := 0 else
84763: LD_ADDR_VAR 0 8
84767: PUSH
84768: LD_INT 0
84770: ST_TO_ADDR
84771: GO 84789
// min_y := y - r ;
84773: LD_ADDR_VAR 0 8
84777: PUSH
84778: LD_VAR 0 3
84782: PUSH
84783: LD_VAR 0 4
84787: MINUS
84788: ST_TO_ADDR
// max_x := x + r ;
84789: LD_ADDR_VAR 0 9
84793: PUSH
84794: LD_VAR 0 2
84798: PUSH
84799: LD_VAR 0 4
84803: PLUS
84804: ST_TO_ADDR
// max_y := y + r ;
84805: LD_ADDR_VAR 0 10
84809: PUSH
84810: LD_VAR 0 3
84814: PUSH
84815: LD_VAR 0 4
84819: PLUS
84820: ST_TO_ADDR
// for _x = min_x to max_x do
84821: LD_ADDR_VAR 0 11
84825: PUSH
84826: DOUBLE
84827: LD_VAR 0 7
84831: DEC
84832: ST_TO_ADDR
84833: LD_VAR 0 9
84837: PUSH
84838: FOR_TO
84839: IFFALSE 84956
// for _y = min_y to max_y do
84841: LD_ADDR_VAR 0 12
84845: PUSH
84846: DOUBLE
84847: LD_VAR 0 8
84851: DEC
84852: ST_TO_ADDR
84853: LD_VAR 0 10
84857: PUSH
84858: FOR_TO
84859: IFFALSE 84952
// begin if not ValidHex ( _x , _y ) then
84861: LD_VAR 0 11
84865: PPUSH
84866: LD_VAR 0 12
84870: PPUSH
84871: CALL_OW 488
84875: NOT
84876: IFFALSE 84880
// continue ;
84878: GO 84858
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
84880: LD_VAR 0 11
84884: PPUSH
84885: LD_VAR 0 12
84889: PPUSH
84890: CALL_OW 351
84894: PUSH
84895: LD_VAR 0 11
84899: PPUSH
84900: LD_VAR 0 12
84904: PPUSH
84905: CALL_OW 554
84909: AND
84910: IFFALSE 84950
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
84912: LD_ADDR_VAR 0 13
84916: PUSH
84917: LD_VAR 0 13
84921: PPUSH
84922: LD_VAR 0 13
84926: PUSH
84927: LD_INT 1
84929: PLUS
84930: PPUSH
84931: LD_VAR 0 11
84935: PUSH
84936: LD_VAR 0 12
84940: PUSH
84941: EMPTY
84942: LIST
84943: LIST
84944: PPUSH
84945: CALL_OW 2
84949: ST_TO_ADDR
// end ;
84950: GO 84858
84952: POP
84953: POP
84954: GO 84838
84956: POP
84957: POP
// if not list then
84958: LD_VAR 0 13
84962: NOT
84963: IFFALSE 84967
// exit ;
84965: GO 85038
// for i in list do
84967: LD_ADDR_VAR 0 6
84971: PUSH
84972: LD_VAR 0 13
84976: PUSH
84977: FOR_IN
84978: IFFALSE 85036
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84980: LD_VAR 0 1
84984: PPUSH
84985: LD_STRING M
84987: PUSH
84988: LD_VAR 0 6
84992: PUSH
84993: LD_INT 1
84995: ARRAY
84996: PUSH
84997: LD_VAR 0 6
85001: PUSH
85002: LD_INT 2
85004: ARRAY
85005: PUSH
85006: LD_INT 0
85008: PUSH
85009: LD_INT 0
85011: PUSH
85012: LD_INT 0
85014: PUSH
85015: LD_INT 0
85017: PUSH
85018: EMPTY
85019: LIST
85020: LIST
85021: LIST
85022: LIST
85023: LIST
85024: LIST
85025: LIST
85026: PUSH
85027: EMPTY
85028: LIST
85029: PPUSH
85030: CALL_OW 447
85034: GO 84977
85036: POP
85037: POP
// end ;
85038: LD_VAR 0 5
85042: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85043: LD_EXP 127
85047: NOT
85048: IFFALSE 85098
85050: GO 85052
85052: DISABLE
// begin initHack := true ;
85053: LD_ADDR_EXP 127
85057: PUSH
85058: LD_INT 1
85060: ST_TO_ADDR
// hackTanks := [ ] ;
85061: LD_ADDR_EXP 128
85065: PUSH
85066: EMPTY
85067: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85068: LD_ADDR_EXP 129
85072: PUSH
85073: EMPTY
85074: ST_TO_ADDR
// hackLimit := 3 ;
85075: LD_ADDR_EXP 130
85079: PUSH
85080: LD_INT 3
85082: ST_TO_ADDR
// hackDist := 12 ;
85083: LD_ADDR_EXP 131
85087: PUSH
85088: LD_INT 12
85090: ST_TO_ADDR
// hackCounter := [ ] ;
85091: LD_ADDR_EXP 132
85095: PUSH
85096: EMPTY
85097: ST_TO_ADDR
// end ;
85098: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85099: LD_EXP 127
85103: PUSH
85104: LD_INT 34
85106: PUSH
85107: LD_INT 99
85109: PUSH
85110: EMPTY
85111: LIST
85112: LIST
85113: PPUSH
85114: CALL_OW 69
85118: AND
85119: IFFALSE 85372
85121: GO 85123
85123: DISABLE
85124: LD_INT 0
85126: PPUSH
85127: PPUSH
// begin enable ;
85128: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85129: LD_ADDR_VAR 0 1
85133: PUSH
85134: LD_INT 34
85136: PUSH
85137: LD_INT 99
85139: PUSH
85140: EMPTY
85141: LIST
85142: LIST
85143: PPUSH
85144: CALL_OW 69
85148: PUSH
85149: FOR_IN
85150: IFFALSE 85370
// begin if not i in hackTanks then
85152: LD_VAR 0 1
85156: PUSH
85157: LD_EXP 128
85161: IN
85162: NOT
85163: IFFALSE 85246
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85165: LD_ADDR_EXP 128
85169: PUSH
85170: LD_EXP 128
85174: PPUSH
85175: LD_EXP 128
85179: PUSH
85180: LD_INT 1
85182: PLUS
85183: PPUSH
85184: LD_VAR 0 1
85188: PPUSH
85189: CALL_OW 1
85193: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85194: LD_ADDR_EXP 129
85198: PUSH
85199: LD_EXP 129
85203: PPUSH
85204: LD_EXP 129
85208: PUSH
85209: LD_INT 1
85211: PLUS
85212: PPUSH
85213: EMPTY
85214: PPUSH
85215: CALL_OW 1
85219: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85220: LD_ADDR_EXP 132
85224: PUSH
85225: LD_EXP 132
85229: PPUSH
85230: LD_EXP 132
85234: PUSH
85235: LD_INT 1
85237: PLUS
85238: PPUSH
85239: EMPTY
85240: PPUSH
85241: CALL_OW 1
85245: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85246: LD_VAR 0 1
85250: PPUSH
85251: CALL_OW 302
85255: NOT
85256: IFFALSE 85269
// begin HackUnlinkAll ( i ) ;
85258: LD_VAR 0 1
85262: PPUSH
85263: CALL 85375 0 1
// continue ;
85267: GO 85149
// end ; HackCheckCapturedStatus ( i ) ;
85269: LD_VAR 0 1
85273: PPUSH
85274: CALL 85818 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85278: LD_ADDR_VAR 0 2
85282: PUSH
85283: LD_INT 81
85285: PUSH
85286: LD_VAR 0 1
85290: PPUSH
85291: CALL_OW 255
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: PUSH
85300: LD_INT 33
85302: PUSH
85303: LD_INT 3
85305: PUSH
85306: EMPTY
85307: LIST
85308: LIST
85309: PUSH
85310: LD_INT 91
85312: PUSH
85313: LD_VAR 0 1
85317: PUSH
85318: LD_EXP 131
85322: PUSH
85323: EMPTY
85324: LIST
85325: LIST
85326: LIST
85327: PUSH
85328: LD_INT 50
85330: PUSH
85331: EMPTY
85332: LIST
85333: PUSH
85334: EMPTY
85335: LIST
85336: LIST
85337: LIST
85338: LIST
85339: PPUSH
85340: CALL_OW 69
85344: ST_TO_ADDR
// if not tmp then
85345: LD_VAR 0 2
85349: NOT
85350: IFFALSE 85354
// continue ;
85352: GO 85149
// HackLink ( i , tmp ) ;
85354: LD_VAR 0 1
85358: PPUSH
85359: LD_VAR 0 2
85363: PPUSH
85364: CALL 85511 0 2
// end ;
85368: GO 85149
85370: POP
85371: POP
// end ;
85372: PPOPN 2
85374: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
85375: LD_INT 0
85377: PPUSH
85378: PPUSH
85379: PPUSH
// if not hack in hackTanks then
85380: LD_VAR 0 1
85384: PUSH
85385: LD_EXP 128
85389: IN
85390: NOT
85391: IFFALSE 85395
// exit ;
85393: GO 85506
// index := GetElementIndex ( hackTanks , hack ) ;
85395: LD_ADDR_VAR 0 4
85399: PUSH
85400: LD_EXP 128
85404: PPUSH
85405: LD_VAR 0 1
85409: PPUSH
85410: CALL 31654 0 2
85414: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
85415: LD_EXP 129
85419: PUSH
85420: LD_VAR 0 4
85424: ARRAY
85425: IFFALSE 85506
// begin for i in hackTanksCaptured [ index ] do
85427: LD_ADDR_VAR 0 3
85431: PUSH
85432: LD_EXP 129
85436: PUSH
85437: LD_VAR 0 4
85441: ARRAY
85442: PUSH
85443: FOR_IN
85444: IFFALSE 85470
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
85446: LD_VAR 0 3
85450: PUSH
85451: LD_INT 1
85453: ARRAY
85454: PPUSH
85455: LD_VAR 0 3
85459: PUSH
85460: LD_INT 2
85462: ARRAY
85463: PPUSH
85464: CALL_OW 235
85468: GO 85443
85470: POP
85471: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
85472: LD_ADDR_EXP 129
85476: PUSH
85477: LD_EXP 129
85481: PPUSH
85482: LD_VAR 0 4
85486: PPUSH
85487: EMPTY
85488: PPUSH
85489: CALL_OW 1
85493: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
85494: LD_VAR 0 1
85498: PPUSH
85499: LD_INT 0
85501: PPUSH
85502: CALL_OW 505
// end ; end ;
85506: LD_VAR 0 2
85510: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
85511: LD_INT 0
85513: PPUSH
85514: PPUSH
85515: PPUSH
// if not hack in hackTanks or not vehicles then
85516: LD_VAR 0 1
85520: PUSH
85521: LD_EXP 128
85525: IN
85526: NOT
85527: PUSH
85528: LD_VAR 0 2
85532: NOT
85533: OR
85534: IFFALSE 85538
// exit ;
85536: GO 85813
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
85538: LD_ADDR_VAR 0 2
85542: PUSH
85543: LD_VAR 0 1
85547: PPUSH
85548: LD_VAR 0 2
85552: PPUSH
85553: LD_INT 1
85555: PPUSH
85556: LD_INT 1
85558: PPUSH
85559: CALL 32304 0 4
85563: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
85564: LD_ADDR_VAR 0 5
85568: PUSH
85569: LD_EXP 128
85573: PPUSH
85574: LD_VAR 0 1
85578: PPUSH
85579: CALL 31654 0 2
85583: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
85584: LD_EXP 129
85588: PUSH
85589: LD_VAR 0 5
85593: ARRAY
85594: PUSH
85595: LD_EXP 130
85599: LESS
85600: IFFALSE 85789
// begin for i := 1 to vehicles do
85602: LD_ADDR_VAR 0 4
85606: PUSH
85607: DOUBLE
85608: LD_INT 1
85610: DEC
85611: ST_TO_ADDR
85612: LD_VAR 0 2
85616: PUSH
85617: FOR_TO
85618: IFFALSE 85787
// begin if hackTanksCaptured [ index ] = hackLimit then
85620: LD_EXP 129
85624: PUSH
85625: LD_VAR 0 5
85629: ARRAY
85630: PUSH
85631: LD_EXP 130
85635: EQUAL
85636: IFFALSE 85640
// break ;
85638: GO 85787
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
85640: LD_ADDR_EXP 132
85644: PUSH
85645: LD_EXP 132
85649: PPUSH
85650: LD_VAR 0 5
85654: PPUSH
85655: LD_EXP 132
85659: PUSH
85660: LD_VAR 0 5
85664: ARRAY
85665: PUSH
85666: LD_INT 1
85668: PLUS
85669: PPUSH
85670: CALL_OW 1
85674: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
85675: LD_ADDR_EXP 129
85679: PUSH
85680: LD_EXP 129
85684: PPUSH
85685: LD_VAR 0 5
85689: PUSH
85690: LD_EXP 129
85694: PUSH
85695: LD_VAR 0 5
85699: ARRAY
85700: PUSH
85701: LD_INT 1
85703: PLUS
85704: PUSH
85705: EMPTY
85706: LIST
85707: LIST
85708: PPUSH
85709: LD_VAR 0 2
85713: PUSH
85714: LD_VAR 0 4
85718: ARRAY
85719: PUSH
85720: LD_VAR 0 2
85724: PUSH
85725: LD_VAR 0 4
85729: ARRAY
85730: PPUSH
85731: CALL_OW 255
85735: PUSH
85736: EMPTY
85737: LIST
85738: LIST
85739: PPUSH
85740: CALL 31869 0 3
85744: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
85745: LD_VAR 0 2
85749: PUSH
85750: LD_VAR 0 4
85754: ARRAY
85755: PPUSH
85756: LD_VAR 0 1
85760: PPUSH
85761: CALL_OW 255
85765: PPUSH
85766: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
85770: LD_VAR 0 2
85774: PUSH
85775: LD_VAR 0 4
85779: ARRAY
85780: PPUSH
85781: CALL_OW 141
// end ;
85785: GO 85617
85787: POP
85788: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85789: LD_VAR 0 1
85793: PPUSH
85794: LD_EXP 129
85798: PUSH
85799: LD_VAR 0 5
85803: ARRAY
85804: PUSH
85805: LD_INT 0
85807: PLUS
85808: PPUSH
85809: CALL_OW 505
// end ;
85813: LD_VAR 0 3
85817: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
85818: LD_INT 0
85820: PPUSH
85821: PPUSH
85822: PPUSH
85823: PPUSH
// if not hack in hackTanks then
85824: LD_VAR 0 1
85828: PUSH
85829: LD_EXP 128
85833: IN
85834: NOT
85835: IFFALSE 85839
// exit ;
85837: GO 86079
// index := GetElementIndex ( hackTanks , hack ) ;
85839: LD_ADDR_VAR 0 4
85843: PUSH
85844: LD_EXP 128
85848: PPUSH
85849: LD_VAR 0 1
85853: PPUSH
85854: CALL 31654 0 2
85858: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
85859: LD_ADDR_VAR 0 3
85863: PUSH
85864: DOUBLE
85865: LD_EXP 129
85869: PUSH
85870: LD_VAR 0 4
85874: ARRAY
85875: INC
85876: ST_TO_ADDR
85877: LD_INT 1
85879: PUSH
85880: FOR_DOWNTO
85881: IFFALSE 86053
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
85883: LD_ADDR_VAR 0 5
85887: PUSH
85888: LD_EXP 129
85892: PUSH
85893: LD_VAR 0 4
85897: ARRAY
85898: PUSH
85899: LD_VAR 0 3
85903: ARRAY
85904: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
85905: LD_VAR 0 5
85909: PUSH
85910: LD_INT 1
85912: ARRAY
85913: PPUSH
85914: CALL_OW 302
85918: NOT
85919: PUSH
85920: LD_VAR 0 5
85924: PUSH
85925: LD_INT 1
85927: ARRAY
85928: PPUSH
85929: CALL_OW 255
85933: PUSH
85934: LD_VAR 0 1
85938: PPUSH
85939: CALL_OW 255
85943: NONEQUAL
85944: OR
85945: IFFALSE 86051
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
85947: LD_VAR 0 5
85951: PUSH
85952: LD_INT 1
85954: ARRAY
85955: PPUSH
85956: CALL_OW 305
85960: PUSH
85961: LD_VAR 0 5
85965: PUSH
85966: LD_INT 1
85968: ARRAY
85969: PPUSH
85970: CALL_OW 255
85974: PUSH
85975: LD_VAR 0 1
85979: PPUSH
85980: CALL_OW 255
85984: EQUAL
85985: AND
85986: IFFALSE 86010
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
85988: LD_VAR 0 5
85992: PUSH
85993: LD_INT 1
85995: ARRAY
85996: PPUSH
85997: LD_VAR 0 5
86001: PUSH
86002: LD_INT 2
86004: ARRAY
86005: PPUSH
86006: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86010: LD_ADDR_EXP 129
86014: PUSH
86015: LD_EXP 129
86019: PPUSH
86020: LD_VAR 0 4
86024: PPUSH
86025: LD_EXP 129
86029: PUSH
86030: LD_VAR 0 4
86034: ARRAY
86035: PPUSH
86036: LD_VAR 0 3
86040: PPUSH
86041: CALL_OW 3
86045: PPUSH
86046: CALL_OW 1
86050: ST_TO_ADDR
// end ; end ;
86051: GO 85880
86053: POP
86054: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86055: LD_VAR 0 1
86059: PPUSH
86060: LD_EXP 129
86064: PUSH
86065: LD_VAR 0 4
86069: ARRAY
86070: PUSH
86071: LD_INT 0
86073: PLUS
86074: PPUSH
86075: CALL_OW 505
// end ;
86079: LD_VAR 0 2
86083: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86084: LD_INT 0
86086: PPUSH
86087: PPUSH
86088: PPUSH
86089: PPUSH
// if not hack in hackTanks then
86090: LD_VAR 0 1
86094: PUSH
86095: LD_EXP 128
86099: IN
86100: NOT
86101: IFFALSE 86105
// exit ;
86103: GO 86190
// index := GetElementIndex ( hackTanks , hack ) ;
86105: LD_ADDR_VAR 0 5
86109: PUSH
86110: LD_EXP 128
86114: PPUSH
86115: LD_VAR 0 1
86119: PPUSH
86120: CALL 31654 0 2
86124: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86125: LD_ADDR_VAR 0 4
86129: PUSH
86130: DOUBLE
86131: LD_INT 1
86133: DEC
86134: ST_TO_ADDR
86135: LD_EXP 129
86139: PUSH
86140: LD_VAR 0 5
86144: ARRAY
86145: PUSH
86146: FOR_TO
86147: IFFALSE 86188
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86149: LD_EXP 129
86153: PUSH
86154: LD_VAR 0 5
86158: ARRAY
86159: PUSH
86160: LD_VAR 0 4
86164: ARRAY
86165: PUSH
86166: LD_INT 1
86168: ARRAY
86169: PUSH
86170: LD_VAR 0 2
86174: EQUAL
86175: IFFALSE 86186
// KillUnit ( vehicle ) ;
86177: LD_VAR 0 2
86181: PPUSH
86182: CALL_OW 66
86186: GO 86146
86188: POP
86189: POP
// end ;
86190: LD_VAR 0 3
86194: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86195: LD_EXP 133
86199: NOT
86200: IFFALSE 86235
86202: GO 86204
86204: DISABLE
// begin initMiner := true ;
86205: LD_ADDR_EXP 133
86209: PUSH
86210: LD_INT 1
86212: ST_TO_ADDR
// minersList := [ ] ;
86213: LD_ADDR_EXP 134
86217: PUSH
86218: EMPTY
86219: ST_TO_ADDR
// minerMinesList := [ ] ;
86220: LD_ADDR_EXP 135
86224: PUSH
86225: EMPTY
86226: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86227: LD_ADDR_EXP 136
86231: PUSH
86232: LD_INT 5
86234: ST_TO_ADDR
// end ;
86235: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86236: LD_EXP 133
86240: PUSH
86241: LD_INT 34
86243: PUSH
86244: LD_INT 81
86246: PUSH
86247: EMPTY
86248: LIST
86249: LIST
86250: PPUSH
86251: CALL_OW 69
86255: AND
86256: IFFALSE 86717
86258: GO 86260
86260: DISABLE
86261: LD_INT 0
86263: PPUSH
86264: PPUSH
86265: PPUSH
86266: PPUSH
// begin enable ;
86267: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86268: LD_ADDR_VAR 0 1
86272: PUSH
86273: LD_INT 34
86275: PUSH
86276: LD_INT 81
86278: PUSH
86279: EMPTY
86280: LIST
86281: LIST
86282: PPUSH
86283: CALL_OW 69
86287: PUSH
86288: FOR_IN
86289: IFFALSE 86361
// begin if not i in minersList then
86291: LD_VAR 0 1
86295: PUSH
86296: LD_EXP 134
86300: IN
86301: NOT
86302: IFFALSE 86359
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
86304: LD_ADDR_EXP 134
86308: PUSH
86309: LD_EXP 134
86313: PPUSH
86314: LD_EXP 134
86318: PUSH
86319: LD_INT 1
86321: PLUS
86322: PPUSH
86323: LD_VAR 0 1
86327: PPUSH
86328: CALL_OW 1
86332: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
86333: LD_ADDR_EXP 135
86337: PUSH
86338: LD_EXP 135
86342: PPUSH
86343: LD_EXP 135
86347: PUSH
86348: LD_INT 1
86350: PLUS
86351: PPUSH
86352: EMPTY
86353: PPUSH
86354: CALL_OW 1
86358: ST_TO_ADDR
// end end ;
86359: GO 86288
86361: POP
86362: POP
// for i := minerMinesList downto 1 do
86363: LD_ADDR_VAR 0 1
86367: PUSH
86368: DOUBLE
86369: LD_EXP 135
86373: INC
86374: ST_TO_ADDR
86375: LD_INT 1
86377: PUSH
86378: FOR_DOWNTO
86379: IFFALSE 86715
// begin if IsLive ( minersList [ i ] ) then
86381: LD_EXP 134
86385: PUSH
86386: LD_VAR 0 1
86390: ARRAY
86391: PPUSH
86392: CALL_OW 300
86396: IFFALSE 86424
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
86398: LD_EXP 134
86402: PUSH
86403: LD_VAR 0 1
86407: ARRAY
86408: PPUSH
86409: LD_EXP 135
86413: PUSH
86414: LD_VAR 0 1
86418: ARRAY
86419: PPUSH
86420: CALL_OW 505
// if not minerMinesList [ i ] then
86424: LD_EXP 135
86428: PUSH
86429: LD_VAR 0 1
86433: ARRAY
86434: NOT
86435: IFFALSE 86439
// continue ;
86437: GO 86378
// for j := minerMinesList [ i ] downto 1 do
86439: LD_ADDR_VAR 0 2
86443: PUSH
86444: DOUBLE
86445: LD_EXP 135
86449: PUSH
86450: LD_VAR 0 1
86454: ARRAY
86455: INC
86456: ST_TO_ADDR
86457: LD_INT 1
86459: PUSH
86460: FOR_DOWNTO
86461: IFFALSE 86711
// begin side := GetSide ( minersList [ i ] ) ;
86463: LD_ADDR_VAR 0 3
86467: PUSH
86468: LD_EXP 134
86472: PUSH
86473: LD_VAR 0 1
86477: ARRAY
86478: PPUSH
86479: CALL_OW 255
86483: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
86484: LD_ADDR_VAR 0 4
86488: PUSH
86489: LD_EXP 135
86493: PUSH
86494: LD_VAR 0 1
86498: ARRAY
86499: PUSH
86500: LD_VAR 0 2
86504: ARRAY
86505: PUSH
86506: LD_INT 1
86508: ARRAY
86509: PPUSH
86510: LD_EXP 135
86514: PUSH
86515: LD_VAR 0 1
86519: ARRAY
86520: PUSH
86521: LD_VAR 0 2
86525: ARRAY
86526: PUSH
86527: LD_INT 2
86529: ARRAY
86530: PPUSH
86531: CALL_OW 428
86535: ST_TO_ADDR
// if not tmp then
86536: LD_VAR 0 4
86540: NOT
86541: IFFALSE 86545
// continue ;
86543: GO 86460
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
86545: LD_VAR 0 4
86549: PUSH
86550: LD_INT 81
86552: PUSH
86553: LD_VAR 0 3
86557: PUSH
86558: EMPTY
86559: LIST
86560: LIST
86561: PPUSH
86562: CALL_OW 69
86566: IN
86567: PUSH
86568: LD_EXP 135
86572: PUSH
86573: LD_VAR 0 1
86577: ARRAY
86578: PUSH
86579: LD_VAR 0 2
86583: ARRAY
86584: PUSH
86585: LD_INT 1
86587: ARRAY
86588: PPUSH
86589: LD_EXP 135
86593: PUSH
86594: LD_VAR 0 1
86598: ARRAY
86599: PUSH
86600: LD_VAR 0 2
86604: ARRAY
86605: PUSH
86606: LD_INT 2
86608: ARRAY
86609: PPUSH
86610: CALL_OW 458
86614: AND
86615: IFFALSE 86709
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
86617: LD_EXP 135
86621: PUSH
86622: LD_VAR 0 1
86626: ARRAY
86627: PUSH
86628: LD_VAR 0 2
86632: ARRAY
86633: PUSH
86634: LD_INT 1
86636: ARRAY
86637: PPUSH
86638: LD_EXP 135
86642: PUSH
86643: LD_VAR 0 1
86647: ARRAY
86648: PUSH
86649: LD_VAR 0 2
86653: ARRAY
86654: PUSH
86655: LD_INT 2
86657: ARRAY
86658: PPUSH
86659: LD_VAR 0 3
86663: PPUSH
86664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
86668: LD_ADDR_EXP 135
86672: PUSH
86673: LD_EXP 135
86677: PPUSH
86678: LD_VAR 0 1
86682: PPUSH
86683: LD_EXP 135
86687: PUSH
86688: LD_VAR 0 1
86692: ARRAY
86693: PPUSH
86694: LD_VAR 0 2
86698: PPUSH
86699: CALL_OW 3
86703: PPUSH
86704: CALL_OW 1
86708: ST_TO_ADDR
// end ; end ;
86709: GO 86460
86711: POP
86712: POP
// end ;
86713: GO 86378
86715: POP
86716: POP
// end ;
86717: PPOPN 4
86719: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
86720: LD_INT 0
86722: PPUSH
86723: PPUSH
// result := false ;
86724: LD_ADDR_VAR 0 4
86728: PUSH
86729: LD_INT 0
86731: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
86732: LD_VAR 0 1
86736: PPUSH
86737: CALL_OW 264
86741: PUSH
86742: LD_INT 81
86744: EQUAL
86745: NOT
86746: IFFALSE 86750
// exit ;
86748: GO 86990
// index := GetElementIndex ( minersList , unit ) ;
86750: LD_ADDR_VAR 0 5
86754: PUSH
86755: LD_EXP 134
86759: PPUSH
86760: LD_VAR 0 1
86764: PPUSH
86765: CALL 31654 0 2
86769: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
86770: LD_EXP 135
86774: PUSH
86775: LD_VAR 0 5
86779: ARRAY
86780: PUSH
86781: LD_EXP 136
86785: GREATEREQUAL
86786: IFFALSE 86790
// exit ;
86788: GO 86990
// ComMoveXY ( unit , x , y ) ;
86790: LD_VAR 0 1
86794: PPUSH
86795: LD_VAR 0 2
86799: PPUSH
86800: LD_VAR 0 3
86804: PPUSH
86805: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86809: LD_INT 35
86811: PPUSH
86812: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
86816: LD_VAR 0 1
86820: PPUSH
86821: LD_VAR 0 2
86825: PPUSH
86826: LD_VAR 0 3
86830: PPUSH
86831: CALL 62990 0 3
86835: NOT
86836: PUSH
86837: LD_VAR 0 1
86841: PPUSH
86842: CALL_OW 314
86846: AND
86847: IFFALSE 86851
// exit ;
86849: GO 86990
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
86851: LD_VAR 0 2
86855: PPUSH
86856: LD_VAR 0 3
86860: PPUSH
86861: CALL_OW 428
86865: PUSH
86866: LD_VAR 0 1
86870: EQUAL
86871: PUSH
86872: LD_VAR 0 1
86876: PPUSH
86877: CALL_OW 314
86881: NOT
86882: AND
86883: IFFALSE 86809
// PlaySoundXY ( x , y , PlantMine ) ;
86885: LD_VAR 0 2
86889: PPUSH
86890: LD_VAR 0 3
86894: PPUSH
86895: LD_STRING PlantMine
86897: PPUSH
86898: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
86902: LD_VAR 0 2
86906: PPUSH
86907: LD_VAR 0 3
86911: PPUSH
86912: LD_VAR 0 1
86916: PPUSH
86917: CALL_OW 255
86921: PPUSH
86922: LD_INT 0
86924: PPUSH
86925: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
86929: LD_ADDR_EXP 135
86933: PUSH
86934: LD_EXP 135
86938: PPUSH
86939: LD_VAR 0 5
86943: PUSH
86944: LD_EXP 135
86948: PUSH
86949: LD_VAR 0 5
86953: ARRAY
86954: PUSH
86955: LD_INT 1
86957: PLUS
86958: PUSH
86959: EMPTY
86960: LIST
86961: LIST
86962: PPUSH
86963: LD_VAR 0 2
86967: PUSH
86968: LD_VAR 0 3
86972: PUSH
86973: EMPTY
86974: LIST
86975: LIST
86976: PPUSH
86977: CALL 31869 0 3
86981: ST_TO_ADDR
// result := true ;
86982: LD_ADDR_VAR 0 4
86986: PUSH
86987: LD_INT 1
86989: ST_TO_ADDR
// end ;
86990: LD_VAR 0 4
86994: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
86995: LD_INT 0
86997: PPUSH
86998: PPUSH
86999: PPUSH
// if not unit in minersList then
87000: LD_VAR 0 1
87004: PUSH
87005: LD_EXP 134
87009: IN
87010: NOT
87011: IFFALSE 87015
// exit ;
87013: GO 87407
// index := GetElementIndex ( minersList , unit ) ;
87015: LD_ADDR_VAR 0 6
87019: PUSH
87020: LD_EXP 134
87024: PPUSH
87025: LD_VAR 0 1
87029: PPUSH
87030: CALL 31654 0 2
87034: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87035: LD_ADDR_VAR 0 5
87039: PUSH
87040: DOUBLE
87041: LD_EXP 135
87045: PUSH
87046: LD_VAR 0 6
87050: ARRAY
87051: INC
87052: ST_TO_ADDR
87053: LD_INT 1
87055: PUSH
87056: FOR_DOWNTO
87057: IFFALSE 87218
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87059: LD_EXP 135
87063: PUSH
87064: LD_VAR 0 6
87068: ARRAY
87069: PUSH
87070: LD_VAR 0 5
87074: ARRAY
87075: PUSH
87076: LD_INT 1
87078: ARRAY
87079: PUSH
87080: LD_VAR 0 2
87084: EQUAL
87085: PUSH
87086: LD_EXP 135
87090: PUSH
87091: LD_VAR 0 6
87095: ARRAY
87096: PUSH
87097: LD_VAR 0 5
87101: ARRAY
87102: PUSH
87103: LD_INT 2
87105: ARRAY
87106: PUSH
87107: LD_VAR 0 3
87111: EQUAL
87112: AND
87113: IFFALSE 87216
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87115: LD_EXP 135
87119: PUSH
87120: LD_VAR 0 6
87124: ARRAY
87125: PUSH
87126: LD_VAR 0 5
87130: ARRAY
87131: PUSH
87132: LD_INT 1
87134: ARRAY
87135: PPUSH
87136: LD_EXP 135
87140: PUSH
87141: LD_VAR 0 6
87145: ARRAY
87146: PUSH
87147: LD_VAR 0 5
87151: ARRAY
87152: PUSH
87153: LD_INT 2
87155: ARRAY
87156: PPUSH
87157: LD_VAR 0 1
87161: PPUSH
87162: CALL_OW 255
87166: PPUSH
87167: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87171: LD_ADDR_EXP 135
87175: PUSH
87176: LD_EXP 135
87180: PPUSH
87181: LD_VAR 0 6
87185: PPUSH
87186: LD_EXP 135
87190: PUSH
87191: LD_VAR 0 6
87195: ARRAY
87196: PPUSH
87197: LD_VAR 0 5
87201: PPUSH
87202: CALL_OW 3
87206: PPUSH
87207: CALL_OW 1
87211: ST_TO_ADDR
// exit ;
87212: POP
87213: POP
87214: GO 87407
// end ; end ;
87216: GO 87056
87218: POP
87219: POP
// for i := minerMinesList [ index ] downto 1 do
87220: LD_ADDR_VAR 0 5
87224: PUSH
87225: DOUBLE
87226: LD_EXP 135
87230: PUSH
87231: LD_VAR 0 6
87235: ARRAY
87236: INC
87237: ST_TO_ADDR
87238: LD_INT 1
87240: PUSH
87241: FOR_DOWNTO
87242: IFFALSE 87405
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87244: LD_EXP 135
87248: PUSH
87249: LD_VAR 0 6
87253: ARRAY
87254: PUSH
87255: LD_VAR 0 5
87259: ARRAY
87260: PUSH
87261: LD_INT 1
87263: ARRAY
87264: PPUSH
87265: LD_EXP 135
87269: PUSH
87270: LD_VAR 0 6
87274: ARRAY
87275: PUSH
87276: LD_VAR 0 5
87280: ARRAY
87281: PUSH
87282: LD_INT 2
87284: ARRAY
87285: PPUSH
87286: LD_VAR 0 2
87290: PPUSH
87291: LD_VAR 0 3
87295: PPUSH
87296: CALL_OW 298
87300: PUSH
87301: LD_INT 6
87303: LESS
87304: IFFALSE 87403
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87306: LD_EXP 135
87310: PUSH
87311: LD_VAR 0 6
87315: ARRAY
87316: PUSH
87317: LD_VAR 0 5
87321: ARRAY
87322: PUSH
87323: LD_INT 1
87325: ARRAY
87326: PPUSH
87327: LD_EXP 135
87331: PUSH
87332: LD_VAR 0 6
87336: ARRAY
87337: PUSH
87338: LD_VAR 0 5
87342: ARRAY
87343: PUSH
87344: LD_INT 2
87346: ARRAY
87347: PPUSH
87348: LD_VAR 0 1
87352: PPUSH
87353: CALL_OW 255
87357: PPUSH
87358: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87362: LD_ADDR_EXP 135
87366: PUSH
87367: LD_EXP 135
87371: PPUSH
87372: LD_VAR 0 6
87376: PPUSH
87377: LD_EXP 135
87381: PUSH
87382: LD_VAR 0 6
87386: ARRAY
87387: PPUSH
87388: LD_VAR 0 5
87392: PPUSH
87393: CALL_OW 3
87397: PPUSH
87398: CALL_OW 1
87402: ST_TO_ADDR
// end ; end ;
87403: GO 87241
87405: POP
87406: POP
// end ;
87407: LD_VAR 0 4
87411: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
87412: LD_INT 0
87414: PPUSH
87415: PPUSH
87416: PPUSH
87417: PPUSH
87418: PPUSH
87419: PPUSH
87420: PPUSH
87421: PPUSH
87422: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
87423: LD_VAR 0 1
87427: PPUSH
87428: CALL_OW 264
87432: PUSH
87433: LD_INT 81
87435: EQUAL
87436: NOT
87437: PUSH
87438: LD_VAR 0 1
87442: PUSH
87443: LD_EXP 134
87447: IN
87448: NOT
87449: OR
87450: IFFALSE 87454
// exit ;
87452: GO 87776
// index := GetElementIndex ( minersList , unit ) ;
87454: LD_ADDR_VAR 0 6
87458: PUSH
87459: LD_EXP 134
87463: PPUSH
87464: LD_VAR 0 1
87468: PPUSH
87469: CALL 31654 0 2
87473: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
87474: LD_ADDR_VAR 0 8
87478: PUSH
87479: LD_EXP 136
87483: PUSH
87484: LD_EXP 135
87488: PUSH
87489: LD_VAR 0 6
87493: ARRAY
87494: MINUS
87495: ST_TO_ADDR
// if not minesFreeAmount then
87496: LD_VAR 0 8
87500: NOT
87501: IFFALSE 87505
// exit ;
87503: GO 87776
// tmp := [ ] ;
87505: LD_ADDR_VAR 0 7
87509: PUSH
87510: EMPTY
87511: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
87512: LD_ADDR_VAR 0 5
87516: PUSH
87517: DOUBLE
87518: LD_INT 1
87520: DEC
87521: ST_TO_ADDR
87522: LD_VAR 0 8
87526: PUSH
87527: FOR_TO
87528: IFFALSE 87723
// begin _d := rand ( 0 , 5 ) ;
87530: LD_ADDR_VAR 0 11
87534: PUSH
87535: LD_INT 0
87537: PPUSH
87538: LD_INT 5
87540: PPUSH
87541: CALL_OW 12
87545: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
87546: LD_ADDR_VAR 0 12
87550: PUSH
87551: LD_INT 2
87553: PPUSH
87554: LD_INT 6
87556: PPUSH
87557: CALL_OW 12
87561: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
87562: LD_ADDR_VAR 0 9
87566: PUSH
87567: LD_VAR 0 2
87571: PPUSH
87572: LD_VAR 0 11
87576: PPUSH
87577: LD_VAR 0 12
87581: PPUSH
87582: CALL_OW 272
87586: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
87587: LD_ADDR_VAR 0 10
87591: PUSH
87592: LD_VAR 0 3
87596: PPUSH
87597: LD_VAR 0 11
87601: PPUSH
87602: LD_VAR 0 12
87606: PPUSH
87607: CALL_OW 273
87611: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
87612: LD_VAR 0 9
87616: PPUSH
87617: LD_VAR 0 10
87621: PPUSH
87622: CALL_OW 488
87626: PUSH
87627: LD_VAR 0 9
87631: PUSH
87632: LD_VAR 0 10
87636: PUSH
87637: EMPTY
87638: LIST
87639: LIST
87640: PUSH
87641: LD_VAR 0 7
87645: IN
87646: NOT
87647: AND
87648: PUSH
87649: LD_VAR 0 9
87653: PPUSH
87654: LD_VAR 0 10
87658: PPUSH
87659: CALL_OW 458
87663: NOT
87664: AND
87665: IFFALSE 87707
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
87667: LD_ADDR_VAR 0 7
87671: PUSH
87672: LD_VAR 0 7
87676: PPUSH
87677: LD_VAR 0 7
87681: PUSH
87682: LD_INT 1
87684: PLUS
87685: PPUSH
87686: LD_VAR 0 9
87690: PUSH
87691: LD_VAR 0 10
87695: PUSH
87696: EMPTY
87697: LIST
87698: LIST
87699: PPUSH
87700: CALL_OW 1
87704: ST_TO_ADDR
87705: GO 87721
// i := i - 1 ;
87707: LD_ADDR_VAR 0 5
87711: PUSH
87712: LD_VAR 0 5
87716: PUSH
87717: LD_INT 1
87719: MINUS
87720: ST_TO_ADDR
// end ;
87721: GO 87527
87723: POP
87724: POP
// for i in tmp do
87725: LD_ADDR_VAR 0 5
87729: PUSH
87730: LD_VAR 0 7
87734: PUSH
87735: FOR_IN
87736: IFFALSE 87774
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
87738: LD_VAR 0 1
87742: PPUSH
87743: LD_VAR 0 5
87747: PUSH
87748: LD_INT 1
87750: ARRAY
87751: PPUSH
87752: LD_VAR 0 5
87756: PUSH
87757: LD_INT 2
87759: ARRAY
87760: PPUSH
87761: CALL 86720 0 3
87765: NOT
87766: IFFALSE 87772
// exit ;
87768: POP
87769: POP
87770: GO 87776
87772: GO 87735
87774: POP
87775: POP
// end ;
87776: LD_VAR 0 4
87780: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
87781: LD_INT 0
87783: PPUSH
87784: PPUSH
87785: PPUSH
87786: PPUSH
87787: PPUSH
87788: PPUSH
87789: PPUSH
// if not GetClass ( unit ) = class_sniper then
87790: LD_VAR 0 1
87794: PPUSH
87795: CALL_OW 257
87799: PUSH
87800: LD_INT 5
87802: EQUAL
87803: NOT
87804: IFFALSE 87808
// exit ;
87806: GO 88196
// dist := 8 ;
87808: LD_ADDR_VAR 0 5
87812: PUSH
87813: LD_INT 8
87815: ST_TO_ADDR
// viewRange := 12 ;
87816: LD_ADDR_VAR 0 7
87820: PUSH
87821: LD_INT 12
87823: ST_TO_ADDR
// side := GetSide ( unit ) ;
87824: LD_ADDR_VAR 0 6
87828: PUSH
87829: LD_VAR 0 1
87833: PPUSH
87834: CALL_OW 255
87838: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
87839: LD_INT 61
87841: PPUSH
87842: LD_VAR 0 6
87846: PPUSH
87847: CALL_OW 321
87851: PUSH
87852: LD_INT 2
87854: EQUAL
87855: IFFALSE 87865
// viewRange := 16 ;
87857: LD_ADDR_VAR 0 7
87861: PUSH
87862: LD_INT 16
87864: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
87865: LD_VAR 0 1
87869: PPUSH
87870: LD_VAR 0 2
87874: PPUSH
87875: LD_VAR 0 3
87879: PPUSH
87880: CALL_OW 297
87884: PUSH
87885: LD_VAR 0 5
87889: GREATER
87890: IFFALSE 87969
// begin ComMoveXY ( unit , x , y ) ;
87892: LD_VAR 0 1
87896: PPUSH
87897: LD_VAR 0 2
87901: PPUSH
87902: LD_VAR 0 3
87906: PPUSH
87907: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87911: LD_INT 35
87913: PPUSH
87914: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
87918: LD_VAR 0 1
87922: PPUSH
87923: LD_VAR 0 2
87927: PPUSH
87928: LD_VAR 0 3
87932: PPUSH
87933: CALL 62990 0 3
87937: NOT
87938: IFFALSE 87942
// exit ;
87940: GO 88196
// until GetDistUnitXY ( unit , x , y ) < dist ;
87942: LD_VAR 0 1
87946: PPUSH
87947: LD_VAR 0 2
87951: PPUSH
87952: LD_VAR 0 3
87956: PPUSH
87957: CALL_OW 297
87961: PUSH
87962: LD_VAR 0 5
87966: LESS
87967: IFFALSE 87911
// end ; ComTurnXY ( unit , x , y ) ;
87969: LD_VAR 0 1
87973: PPUSH
87974: LD_VAR 0 2
87978: PPUSH
87979: LD_VAR 0 3
87983: PPUSH
87984: CALL_OW 118
// wait ( 5 ) ;
87988: LD_INT 5
87990: PPUSH
87991: CALL_OW 67
// _d := GetDir ( unit ) ;
87995: LD_ADDR_VAR 0 10
87999: PUSH
88000: LD_VAR 0 1
88004: PPUSH
88005: CALL_OW 254
88009: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88010: LD_ADDR_VAR 0 8
88014: PUSH
88015: LD_VAR 0 1
88019: PPUSH
88020: CALL_OW 250
88024: PPUSH
88025: LD_VAR 0 10
88029: PPUSH
88030: LD_VAR 0 5
88034: PPUSH
88035: CALL_OW 272
88039: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88040: LD_ADDR_VAR 0 9
88044: PUSH
88045: LD_VAR 0 1
88049: PPUSH
88050: CALL_OW 251
88054: PPUSH
88055: LD_VAR 0 10
88059: PPUSH
88060: LD_VAR 0 5
88064: PPUSH
88065: CALL_OW 273
88069: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88070: LD_VAR 0 8
88074: PPUSH
88075: LD_VAR 0 9
88079: PPUSH
88080: CALL_OW 488
88084: NOT
88085: IFFALSE 88089
// exit ;
88087: GO 88196
// ComAnimCustom ( unit , 1 ) ;
88089: LD_VAR 0 1
88093: PPUSH
88094: LD_INT 1
88096: PPUSH
88097: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88101: LD_VAR 0 8
88105: PPUSH
88106: LD_VAR 0 9
88110: PPUSH
88111: LD_VAR 0 6
88115: PPUSH
88116: LD_VAR 0 7
88120: PPUSH
88121: CALL_OW 330
// repeat wait ( 1 ) ;
88125: LD_INT 1
88127: PPUSH
88128: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88132: LD_VAR 0 1
88136: PPUSH
88137: CALL_OW 316
88141: PUSH
88142: LD_VAR 0 1
88146: PPUSH
88147: CALL_OW 314
88151: OR
88152: PUSH
88153: LD_VAR 0 1
88157: PPUSH
88158: CALL_OW 302
88162: NOT
88163: OR
88164: PUSH
88165: LD_VAR 0 1
88169: PPUSH
88170: CALL_OW 301
88174: OR
88175: IFFALSE 88125
// RemoveSeeing ( _x , _y , side ) ;
88177: LD_VAR 0 8
88181: PPUSH
88182: LD_VAR 0 9
88186: PPUSH
88187: LD_VAR 0 6
88191: PPUSH
88192: CALL_OW 331
// end ; end_of_file
88196: LD_VAR 0 4
88200: RET
// export function StopOriginalMusic ; begin
88201: LD_INT 0
88203: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
88204: LD_STRING OW_FORCEMUSICDISABLE(true);
88206: PPUSH
88207: CALL_OW 559
// end ;
88211: LD_VAR 0 1
88215: RET
// export function PlayOriginalMusic ; begin
88216: LD_INT 0
88218: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
88219: LD_STRING OW_FORCEMUSICDISABLE(false);
88221: PPUSH
88222: CALL_OW 559
// end ;
88226: LD_VAR 0 1
88230: RET
// export function PlayCustomMusic ( track , callback ) ; begin
88231: LD_INT 0
88233: PPUSH
// StopOriginalMusic ;
88234: CALL 88201 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
88238: LD_STRING playMusic("
88240: PUSH
88241: LD_VAR 0 1
88245: STR
88246: PUSH
88247: LD_STRING ", "
88249: STR
88250: PUSH
88251: LD_VAR 0 2
88255: STR
88256: PUSH
88257: LD_STRING ")
88259: STR
88260: PPUSH
88261: CALL_OW 559
// end ;
88265: LD_VAR 0 3
88269: RET
