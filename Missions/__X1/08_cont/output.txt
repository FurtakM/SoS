// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 19348 0 0
// PrepareRussian ;
  12: CALL 1971 0 0
// PrepareArabian ;
  16: CALL 415 0 0
// Action ;
  20: CALL 3714 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 375: LD_ADDR_EXP 40
 379: PUSH
 380: LD_INT 6
 382: PUSH
 383: LD_INT 5
 385: PUSH
 386: LD_INT 4
 388: PUSH
 389: LD_INT 3
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: LD_OWVAR 67
 402: ARRAY
 403: ST_TO_ADDR
// enable ( entranceEvent ) ;
 404: LD_INT 1
 406: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 407: LD_INT 2
 409: DISABLE_MARKED
// end ; end_of_file
 410: LD_VAR 0 1
 414: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 415: LD_INT 0
 417: PPUSH
 418: PPUSH
// uc_side := 4 ;
 419: LD_ADDR_OWVAR 20
 423: PUSH
 424: LD_INT 4
 426: ST_TO_ADDR
// uc_nation := 1 ;
 427: LD_ADDR_OWVAR 21
 431: PUSH
 432: LD_INT 1
 434: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 435: LD_ADDR_EXP 53
 439: PUSH
 440: LD_STRING 07_Americans
 442: PPUSH
 443: CALL_OW 31
 447: ST_TO_ADDR
// if americanSquad < 5 then
 448: LD_EXP 53
 452: PUSH
 453: LD_INT 5
 455: LESS
 456: IFFALSE 550
// begin if not americanSquad then
 458: LD_EXP 53
 462: NOT
 463: IFFALSE 472
// americanSquad := [ ] ;
 465: LD_ADDR_EXP 53
 469: PUSH
 470: EMPTY
 471: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 472: LD_ADDR_VAR 0 2
 476: PUSH
 477: DOUBLE
 478: LD_EXP 53
 482: DEC
 483: ST_TO_ADDR
 484: LD_INT 2
 486: PUSH
 487: LD_INT 3
 489: PUSH
 490: LD_INT 4
 492: PUSH
 493: LD_INT 4
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_OWVAR 67
 506: ARRAY
 507: PUSH
 508: FOR_TO
 509: IFFALSE 546
// begin PrepareHuman ( false , 2 , 6 ) ;
 511: LD_INT 0
 513: PPUSH
 514: LD_INT 2
 516: PPUSH
 517: LD_INT 6
 519: PPUSH
 520: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 524: LD_ADDR_EXP 53
 528: PUSH
 529: LD_EXP 53
 533: PPUSH
 534: CALL_OW 44
 538: PPUSH
 539: CALL 64845 0 2
 543: ST_TO_ADDR
// end ;
 544: GO 508
 546: POP
 547: POP
// end else
 548: GO 597
// for i := Count ( americanSquad ) downto 5 do
 550: LD_ADDR_VAR 0 2
 554: PUSH
 555: DOUBLE
 556: LD_EXP 53
 560: PPUSH
 561: CALL 29498 0 1
 565: INC
 566: ST_TO_ADDR
 567: LD_INT 5
 569: PUSH
 570: FOR_DOWNTO
 571: IFFALSE 595
// americanSquad := Delete ( americanSquad , i ) ;
 573: LD_ADDR_EXP 53
 577: PUSH
 578: LD_EXP 53
 582: PPUSH
 583: LD_VAR 0 2
 587: PPUSH
 588: CALL_OW 3
 592: ST_TO_ADDR
 593: GO 570
 595: POP
 596: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 597: LD_ADDR_EXP 55
 601: PUSH
 602: LD_STRING UsCommander
 604: PPUSH
 605: LD_EXP 1
 609: NOT
 610: PPUSH
 611: LD_STRING 07_
 613: PPUSH
 614: CALL 27396 0 3
 618: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 619: LD_INT 1
 621: PPUSH
 622: LD_INT 6
 624: PPUSH
 625: CALL_OW 381
// Jerry := CreateHuman ;
 629: LD_ADDR_EXP 56
 633: PUSH
 634: CALL_OW 44
 638: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 639: LD_EXP 56
 643: PPUSH
 644: LD_INT 33
 646: PPUSH
 647: CALL_OW 336
// if not Doug then
 651: LD_EXP 55
 655: NOT
 656: IFFALSE 678
// begin PrepareSoldier ( sex_male , 6 ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 6
 663: PPUSH
 664: CALL_OW 381
// Doug := CreateHuman ;
 668: LD_ADDR_EXP 55
 672: PUSH
 673: CALL_OW 44
 677: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 678: LD_EXP 55
 682: PPUSH
 683: LD_INT 33
 685: PPUSH
 686: CALL_OW 336
// if johnnySaved or debug then
 690: LD_EXP 3
 694: PUSH
 695: LD_EXP 1
 699: OR
 700: IFFALSE 727
// begin Harris := NewCharacter ( Harris ) ;
 702: LD_ADDR_EXP 54
 706: PUSH
 707: LD_STRING Harris
 709: PPUSH
 710: CALL_OW 25
 714: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 715: LD_EXP 54
 719: PPUSH
 720: LD_INT 33
 722: PPUSH
 723: CALL_OW 336
// end ; uc_side := 2 ;
 727: LD_ADDR_OWVAR 20
 731: PUSH
 732: LD_INT 2
 734: ST_TO_ADDR
// uc_nation := 2 ;
 735: LD_ADDR_OWVAR 21
 739: PUSH
 740: LD_INT 2
 742: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 743: LD_ADDR_EXP 41
 747: PUSH
 748: LD_STRING Heike
 750: PPUSH
 751: LD_EXP 1
 755: NOT
 756: PPUSH
 757: LD_EXP 2
 761: PPUSH
 762: CALL 27396 0 3
 766: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 767: LD_ADDR_EXP 44
 771: PUSH
 772: LD_STRING Ibrahim
 774: PPUSH
 775: LD_EXP 1
 779: NOT
 780: PPUSH
 781: LD_EXP 2
 785: PPUSH
 786: CALL 27396 0 3
 790: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 791: LD_ADDR_EXP 42
 795: PUSH
 796: LD_STRING Givi
 798: PPUSH
 799: LD_EXP 1
 803: NOT
 804: PPUSH
 805: LD_EXP 2
 809: PPUSH
 810: CALL 27396 0 3
 814: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 815: LD_ADDR_EXP 45
 819: PUSH
 820: LD_STRING Kamil
 822: PPUSH
 823: LD_EXP 1
 827: NOT
 828: PPUSH
 829: LD_EXP 2
 833: PPUSH
 834: CALL 27396 0 3
 838: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 839: LD_ADDR_EXP 46
 843: PUSH
 844: LD_STRING Kaia
 846: PPUSH
 847: LD_EXP 1
 851: NOT
 852: PPUSH
 853: LD_EXP 2
 857: PPUSH
 858: CALL 27396 0 3
 862: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 863: LD_ADDR_EXP 47
 867: PUSH
 868: LD_STRING Sophia
 870: PPUSH
 871: LD_EXP 1
 875: NOT
 876: PPUSH
 877: LD_EXP 2
 881: PPUSH
 882: CALL 27396 0 3
 886: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 887: LD_ADDR_EXP 48
 891: PUSH
 892: LD_STRING Markov
 894: PPUSH
 895: LD_EXP 1
 899: NOT
 900: PPUSH
 901: LD_EXP 2
 905: PPUSH
 906: CALL 27396 0 3
 910: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 911: LD_ADDR_EXP 51
 915: PUSH
 916: LD_STRING Aviradze
 918: PPUSH
 919: LD_EXP 1
 923: NOT
 924: PPUSH
 925: LD_EXP 2
 929: PPUSH
 930: CALL 27396 0 3
 934: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 935: LD_ADDR_EXP 50
 939: PUSH
 940: LD_STRING Kurt
 942: PPUSH
 943: LD_EXP 1
 947: NOT
 948: PPUSH
 949: LD_EXP 2
 953: PPUSH
 954: CALL 27396 0 3
 958: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 959: LD_ADDR_EXP 43
 963: PUSH
 964: LD_STRING Mike
 966: PPUSH
 967: LD_EXP 1
 971: NOT
 972: PPUSH
 973: LD_EXP 2
 977: PPUSH
 978: CALL 27396 0 3
 982: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 983: LD_ADDR_EXP 49
 987: PUSH
 988: LD_STRING Olaf
 990: PPUSH
 991: LD_EXP 1
 995: NOT
 996: PPUSH
 997: LD_EXP 2
1001: PPUSH
1002: CALL 27396 0 3
1006: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1007: LD_ADDR_EXP 52
1011: PUSH
1012: LD_STRING 07_others
1014: PPUSH
1015: CALL_OW 31
1019: ST_TO_ADDR
// end ;
1020: LD_VAR 0 1
1024: RET
// export function PrepareGame ; var i ; begin
1025: LD_INT 0
1027: PPUSH
1028: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1029: LD_EXP 41
1033: PPUSH
1034: LD_INT 23
1036: PPUSH
1037: CALL_OW 52
// if Givi then
1041: LD_EXP 42
1045: IFFALSE 1083
// begin SetSide ( Givi , 5 ) ;
1047: LD_EXP 42
1051: PPUSH
1052: LD_INT 5
1054: PPUSH
1055: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1059: LD_EXP 42
1063: PPUSH
1064: LD_INT 9
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL_OW 49
// ComHold ( Givi ) ;
1074: LD_EXP 42
1078: PPUSH
1079: CALL_OW 140
// end ; if Markov then
1083: LD_EXP 48
1087: IFFALSE 1125
// begin SetSide ( Markov , 5 ) ;
1089: LD_EXP 48
1093: PPUSH
1094: LD_INT 5
1096: PPUSH
1097: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1101: LD_EXP 48
1105: PPUSH
1106: LD_INT 3
1108: PPUSH
1109: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1113: LD_EXP 48
1117: PPUSH
1118: LD_INT 61
1120: PPUSH
1121: CALL_OW 52
// end ; if Mike then
1125: LD_EXP 43
1129: IFFALSE 1167
// begin SetSide ( Mike , 5 ) ;
1131: LD_EXP 43
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1143: LD_EXP 43
1147: PPUSH
1148: LD_INT 17
1150: PPUSH
1151: LD_INT 0
1153: PPUSH
1154: CALL_OW 49
// ComHold ( Mike ) ;
1158: LD_EXP 43
1162: PPUSH
1163: CALL_OW 140
// end ; if Olaf then
1167: LD_EXP 49
1171: IFFALSE 1212
// begin SetSide ( Olaf , 5 ) ;
1173: LD_EXP 49
1177: PPUSH
1178: LD_INT 5
1180: PPUSH
1181: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1185: LD_EXP 49
1189: PPUSH
1190: LD_INT 16
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1200: LD_EXP 49
1204: PPUSH
1205: LD_INT 3
1207: PPUSH
1208: CALL 67997 0 2
// end ; if Kamil then
1212: LD_EXP 45
1216: IFFALSE 1242
// begin SetSide ( Kamil , 5 ) ;
1218: LD_EXP 45
1222: PPUSH
1223: LD_INT 5
1225: PPUSH
1226: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1230: LD_EXP 45
1234: PPUSH
1235: LD_INT 109
1237: PPUSH
1238: CALL_OW 52
// end ; if Kurt then
1242: LD_EXP 50
1246: IFFALSE 1272
// begin SetSide ( Kurt , 5 ) ;
1248: LD_EXP 50
1252: PPUSH
1253: LD_INT 5
1255: PPUSH
1256: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1260: LD_EXP 50
1264: PPUSH
1265: LD_INT 169
1267: PPUSH
1268: CALL_OW 52
// end ; if Kaia then
1272: LD_EXP 46
1276: IFFALSE 1302
// begin SetSide ( Kaia , 5 ) ;
1278: LD_EXP 46
1282: PPUSH
1283: LD_INT 5
1285: PPUSH
1286: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1290: LD_EXP 46
1294: PPUSH
1295: LD_INT 147
1297: PPUSH
1298: CALL_OW 52
// end ; if Sophia then
1302: LD_EXP 47
1306: IFFALSE 1347
// begin SetSide ( Sophia , 5 ) ;
1308: LD_EXP 47
1312: PPUSH
1313: LD_INT 5
1315: PPUSH
1316: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1320: LD_EXP 47
1324: PPUSH
1325: LD_INT 142
1327: PPUSH
1328: LD_INT 96
1330: PPUSH
1331: LD_INT 0
1333: PPUSH
1334: CALL_OW 48
// ComHold ( Sophia ) ;
1338: LD_EXP 47
1342: PPUSH
1343: CALL_OW 140
// end ; if Harris then
1347: LD_EXP 54
1351: IFFALSE 1389
// begin SetSide ( Harris , 4 ) ;
1353: LD_EXP 54
1357: PPUSH
1358: LD_INT 4
1360: PPUSH
1361: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1365: LD_EXP 54
1369: PPUSH
1370: LD_INT 20
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: CALL_OW 49
// ComHold ( i ) ;
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 140
// end ; if Doug then
1389: LD_EXP 55
1393: IFFALSE 1419
// begin SetSide ( Doug , 4 ) ;
1395: LD_EXP 55
1399: PPUSH
1400: LD_INT 4
1402: PPUSH
1403: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1407: LD_EXP 55
1411: PPUSH
1412: LD_INT 106
1414: PPUSH
1415: CALL_OW 52
// end ; if Aviradze then
1419: LD_EXP 51
1423: IFFALSE 1449
// begin SetSide ( Aviradze , 5 ) ;
1425: LD_EXP 51
1429: PPUSH
1430: LD_INT 5
1432: PPUSH
1433: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1437: LD_EXP 51
1441: PPUSH
1442: LD_INT 119
1444: PPUSH
1445: CALL_OW 52
// end ; if Ibrahim then
1449: LD_EXP 44
1453: IFFALSE 1479
// begin SetSide ( Ibrahim , 5 ) ;
1455: LD_EXP 44
1459: PPUSH
1460: LD_INT 5
1462: PPUSH
1463: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1467: LD_EXP 44
1471: PPUSH
1472: LD_INT 119
1474: PPUSH
1475: CALL_OW 52
// end ; if Jerry then
1479: LD_EXP 56
1483: IFFALSE 1524
// begin SetSide ( Jerry , 4 ) ;
1485: LD_EXP 56
1489: PPUSH
1490: LD_INT 4
1492: PPUSH
1493: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1497: LD_EXP 56
1501: PPUSH
1502: LD_INT 119
1504: PPUSH
1505: LD_INT 59
1507: PPUSH
1508: LD_INT 0
1510: PPUSH
1511: CALL_OW 48
// ComHold ( Jerry ) ;
1515: LD_EXP 56
1519: PPUSH
1520: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1524: LD_EXP 60
1528: PPUSH
1529: LD_INT 119
1531: PPUSH
1532: CALL_OW 52
// for i in americanSquad do
1536: LD_ADDR_VAR 0 2
1540: PUSH
1541: LD_EXP 53
1545: PUSH
1546: FOR_IN
1547: IFFALSE 1575
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1549: LD_VAR 0 2
1553: PPUSH
1554: LD_INT 21
1556: PPUSH
1557: LD_INT 0
1559: PPUSH
1560: CALL_OW 49
// ComHold ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 140
// end ;
1573: GO 1546
1575: POP
1576: POP
// for i in heikeSecondSquad do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: LD_EXP 52
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1628
// begin SetSide ( i , 5 ) ;
1590: LD_VAR 0 2
1594: PPUSH
1595: LD_INT 5
1597: PPUSH
1598: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1602: LD_VAR 0 2
1606: PPUSH
1607: LD_INT 22
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL_OW 49
// ComHold ( i ) ;
1617: LD_VAR 0 2
1621: PPUSH
1622: CALL_OW 140
// end ;
1626: GO 1587
1628: POP
1629: POP
// if not hasVodka then
1630: LD_EXP 4
1634: NOT
1635: IFFALSE 1694
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1637: LD_ADDR_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: PUSH
1645: LD_INT 22
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PUSH
1655: LD_INT 22
1657: PUSH
1658: LD_INT 5
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: PPUSH
1670: CALL_OW 69
1674: PUSH
1675: FOR_IN
1676: IFFALSE 1692
// SetLives ( i , 500 ) ;
1678: LD_VAR 0 2
1682: PPUSH
1683: LD_INT 500
1685: PPUSH
1686: CALL_OW 234
1690: GO 1675
1692: POP
1693: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1694: LD_ADDR_VAR 0 2
1698: PUSH
1699: LD_INT 22
1701: PUSH
1702: LD_INT 4
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PPUSH
1709: CALL_OW 69
1713: PUSH
1714: FOR_IN
1715: IFFALSE 1731
// SetLives ( i , 500 ) ;
1717: LD_VAR 0 2
1721: PPUSH
1722: LD_INT 500
1724: PPUSH
1725: CALL_OW 234
1729: GO 1714
1731: POP
1732: POP
// end ;
1733: LD_VAR 0 1
1737: RET
// export function SetClassKaiaRevolver ; begin
1738: LD_INT 0
1740: PPUSH
// if IsOk ( Kaia ) then
1741: LD_EXP 46
1745: PPUSH
1746: CALL_OW 302
1750: IFFALSE 1764
// SetClass ( Kaia , class_revolver ) ;
1752: LD_EXP 46
1756: PPUSH
1757: LD_INT 34
1759: PPUSH
1760: CALL_OW 336
// end ;
1764: LD_VAR 0 1
1768: RET
// export function SpawnHeikeAsRussian ; begin
1769: LD_INT 0
1771: PPUSH
// RemoveUnit ( Heike ) ;
1772: LD_EXP 41
1776: PPUSH
1777: CALL_OW 64
// heikeTmp := Heike ;
1781: LD_ADDR_EXP 57
1785: PUSH
1786: LD_EXP 41
1790: ST_TO_ADDR
// uc_side := 2 ;
1791: LD_ADDR_OWVAR 20
1795: PUSH
1796: LD_INT 2
1798: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1799: LD_ADDR_EXP 41
1803: PUSH
1804: LD_STRING HeikeRu
1806: PPUSH
1807: CALL_OW 25
1811: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1812: LD_EXP 57
1816: PPUSH
1817: LD_EXP 41
1821: PPUSH
1822: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1826: LD_EXP 41
1830: PPUSH
1831: LD_INT 165
1833: PPUSH
1834: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1838: LD_EXP 41
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 336
// heikeAsRussian := true ;
1850: LD_ADDR_EXP 27
1854: PUSH
1855: LD_INT 1
1857: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1858: LD_STRING M1-laundry-out
1860: PPUSH
1861: CALL_OW 604
// end ;
1865: LD_VAR 0 1
1869: RET
// export function SpawnGiviAsRussian ; begin
1870: LD_INT 0
1872: PPUSH
// RemoveUnit ( Givi ) ;
1873: LD_EXP 42
1877: PPUSH
1878: CALL_OW 64
// giviTmp := Givi ;
1882: LD_ADDR_EXP 58
1886: PUSH
1887: LD_EXP 42
1891: ST_TO_ADDR
// uc_side := 2 ;
1892: LD_ADDR_OWVAR 20
1896: PUSH
1897: LD_INT 2
1899: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1900: LD_ADDR_EXP 42
1904: PUSH
1905: LD_STRING GiviRu
1907: PPUSH
1908: CALL_OW 25
1912: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1913: LD_EXP 58
1917: PPUSH
1918: LD_EXP 42
1922: PPUSH
1923: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1927: LD_EXP 42
1931: PPUSH
1932: LD_INT 165
1934: PPUSH
1935: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1939: LD_EXP 42
1943: PPUSH
1944: LD_INT 1
1946: PPUSH
1947: CALL_OW 336
// giviAsRussian := true ;
1951: LD_ADDR_EXP 28
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1959: LD_STRING M1-laundry-out
1961: PPUSH
1962: CALL_OW 604
// end ; end_of_file
1966: LD_VAR 0 1
1970: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
1971: LD_INT 0
1973: PPUSH
1974: PPUSH
1975: PPUSH
1976: PPUSH
1977: PPUSH
// uc_side := 3 ;
1978: LD_ADDR_OWVAR 20
1982: PUSH
1983: LD_INT 3
1985: ST_TO_ADDR
// uc_nation := 3 ;
1986: LD_ADDR_OWVAR 21
1990: PUSH
1991: LD_INT 3
1993: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1994: LD_INT 192
1996: PPUSH
1997: LD_STRING kitchen
1999: PPUSH
2000: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2004: LD_INT 165
2006: PPUSH
2007: LD_STRING laundry
2009: PPUSH
2010: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2014: LD_INT 54
2016: PPUSH
2017: LD_STRING adminSection
2019: PPUSH
2020: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2024: LD_ADDR_VAR 0 2
2028: PUSH
2029: LD_INT 21
2031: PUSH
2032: LD_INT 3
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PPUSH
2039: CALL_OW 69
2043: PUSH
2044: FOR_IN
2045: IFFALSE 2061
// SetBLevel ( i , 7 ) ;
2047: LD_VAR 0 2
2051: PPUSH
2052: LD_INT 7
2054: PPUSH
2055: CALL_OW 241
2059: GO 2044
2061: POP
2062: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2063: LD_ADDR_VAR 0 2
2067: PUSH
2068: LD_INT 22
2070: PUSH
2071: LD_INT 3
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: LD_INT 30
2083: PUSH
2084: LD_INT 0
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: PUSH
2091: LD_INT 30
2093: PUSH
2094: LD_INT 1
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: EMPTY
2102: LIST
2103: LIST
2104: LIST
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PPUSH
2110: CALL_OW 69
2114: PUSH
2115: FOR_IN
2116: IFFALSE 2180
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2118: LD_VAR 0 2
2122: PPUSH
2123: CALL_OW 274
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1000
2133: PPUSH
2134: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2138: LD_VAR 0 2
2142: PPUSH
2143: CALL_OW 274
2147: PPUSH
2148: LD_INT 2
2150: PPUSH
2151: LD_INT 1000
2153: PPUSH
2154: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2158: LD_VAR 0 2
2162: PPUSH
2163: CALL_OW 274
2167: PPUSH
2168: LD_INT 3
2170: PPUSH
2171: LD_INT 100
2173: PPUSH
2174: CALL_OW 277
// end ;
2178: GO 2115
2180: POP
2181: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2182: LD_ADDR_VAR 0 2
2186: PUSH
2187: LD_INT 22
2189: PUSH
2190: LD_INT 3
2192: PUSH
2193: EMPTY
2194: LIST
2195: LIST
2196: PUSH
2197: LD_INT 30
2199: PUSH
2200: LD_INT 32
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PPUSH
2211: CALL_OW 69
2215: PUSH
2216: FOR_IN
2217: IFFALSE 2251
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2219: LD_INT 0
2221: PPUSH
2222: LD_INT 5
2224: PUSH
2225: LD_OWVAR 67
2229: PLUS
2230: PPUSH
2231: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2235: CALL_OW 44
2239: PPUSH
2240: LD_VAR 0 2
2244: PPUSH
2245: CALL_OW 52
// end ;
2249: GO 2216
2251: POP
2252: POP
// for i := 1 to 2 do
2253: LD_ADDR_VAR 0 2
2257: PUSH
2258: DOUBLE
2259: LD_INT 1
2261: DEC
2262: ST_TO_ADDR
2263: LD_INT 2
2265: PUSH
2266: FOR_TO
2267: IFFALSE 2319
// begin PrepareMechanic ( false , 8 ) ;
2269: LD_INT 0
2271: PPUSH
2272: LD_INT 8
2274: PPUSH
2275: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2279: LD_ADDR_EXP 62
2283: PUSH
2284: LD_EXP 62
2288: PPUSH
2289: CALL_OW 44
2293: PPUSH
2294: CALL 64845 0 2
2298: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2299: LD_EXP 62
2303: PUSH
2304: LD_EXP 62
2308: ARRAY
2309: PPUSH
2310: LD_INT 61
2312: PPUSH
2313: CALL_OW 52
// end ;
2317: GO 2266
2319: POP
2320: POP
// PrepareMechanic ( sex_male , 8 ) ;
2321: LD_INT 1
2323: PPUSH
2324: LD_INT 8
2326: PPUSH
2327: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2331: LD_ADDR_EXP 63
2335: PUSH
2336: LD_EXP 63
2340: PPUSH
2341: CALL_OW 44
2345: PPUSH
2346: CALL 64845 0 2
2350: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2351: LD_EXP 63
2355: PUSH
2356: LD_EXP 63
2360: ARRAY
2361: PPUSH
2362: LD_INT 196
2364: PPUSH
2365: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2369: LD_INT 1
2371: PPUSH
2372: LD_INT 8
2374: PPUSH
2375: CALL_OW 383
// hc_name := Stiepan Simonov ;
2379: LD_ADDR_OWVAR 26
2383: PUSH
2384: LD_STRING Stiepan Simonov
2386: ST_TO_ADDR
// Stiopa := CreateHuman ;
2387: LD_ADDR_EXP 64
2391: PUSH
2392: CALL_OW 44
2396: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2397: LD_INT 2
2399: PPUSH
2400: LD_INT 8
2402: PPUSH
2403: CALL_OW 383
// hc_name := Laura Dragunov ;
2407: LD_ADDR_OWVAR 26
2411: PUSH
2412: LD_STRING Laura Dragunov
2414: ST_TO_ADDR
// Laura := CreateHuman ;
2415: LD_ADDR_EXP 65
2419: PUSH
2420: CALL_OW 44
2424: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2425: LD_EXP 65
2429: PPUSH
2430: LD_INT 196
2432: PPUSH
2433: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2437: LD_INT 1
2439: PPUSH
2440: LD_INT 8
2442: PPUSH
2443: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2447: LD_ADDR_EXP 62
2451: PUSH
2452: LD_EXP 62
2456: PPUSH
2457: LD_INT 1
2459: PPUSH
2460: CALL_OW 44
2464: PPUSH
2465: CALL_OW 2
2469: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2470: LD_EXP 62
2474: PUSH
2475: LD_INT 1
2477: ARRAY
2478: PPUSH
2479: LD_INT 61
2481: PPUSH
2482: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2486: LD_INT 1
2488: PPUSH
2489: LD_INT 8
2491: PPUSH
2492: CALL_OW 381
// hc_name := Pavel Muchin ;
2496: LD_ADDR_OWVAR 26
2500: PUSH
2501: LD_STRING Pavel Muchin
2503: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2504: LD_ADDR_OWVAR 29
2508: PUSH
2509: LD_INT 13
2511: PUSH
2512: LD_INT 13
2514: PUSH
2515: EMPTY
2516: LIST
2517: LIST
2518: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2519: LD_ADDR_EXP 61
2523: PUSH
2524: CALL_OW 44
2528: ST_TO_ADDR
// InitHC_All ( ) ;
2529: CALL_OW 584
// if Difficulty > 1 then
2533: LD_OWVAR 67
2537: PUSH
2538: LD_INT 1
2540: GREATER
2541: IFFALSE 2661
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2543: LD_ADDR_VAR 0 2
2547: PUSH
2548: DOUBLE
2549: LD_INT 1
2551: DEC
2552: ST_TO_ADDR
2553: LD_INT 3
2555: PUSH
2556: LD_INT 4
2558: PUSH
2559: LD_INT 5
2561: PUSH
2562: EMPTY
2563: LIST
2564: LIST
2565: LIST
2566: PUSH
2567: LD_OWVAR 67
2571: PUSH
2572: LD_INT 1
2574: PLUS
2575: ARRAY
2576: PUSH
2577: FOR_TO
2578: IFFALSE 2659
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2580: LD_INT 0
2582: PPUSH
2583: LD_INT 5
2585: PUSH
2586: LD_INT 6
2588: PUSH
2589: LD_INT 7
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: LD_OWVAR 67
2601: PUSH
2602: LD_INT 1
2604: PLUS
2605: ARRAY
2606: PPUSH
2607: CALL_OW 381
// un := CreateHuman ;
2611: LD_ADDR_VAR 0 4
2615: PUSH
2616: CALL_OW 44
2620: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2621: LD_VAR 0 4
2625: PPUSH
2626: LD_INT 62
2628: PUSH
2629: LD_INT 63
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: LD_VAR 0 2
2640: PUSH
2641: LD_INT 2
2643: MOD
2644: PUSH
2645: LD_INT 1
2647: PLUS
2648: ARRAY
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 49
// end ;
2657: GO 2577
2659: POP
2660: POP
// end ; uc_side := 6 ;
2661: LD_ADDR_OWVAR 20
2665: PUSH
2666: LD_INT 6
2668: ST_TO_ADDR
// uc_nation := 3 ;
2669: LD_ADDR_OWVAR 21
2673: PUSH
2674: LD_INT 3
2676: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2677: LD_ADDR_VAR 0 5
2681: PUSH
2682: LD_INT 14
2684: PUSH
2685: LD_INT 15
2687: PUSH
2688: LD_INT 48
2690: PUSH
2691: LD_INT 24
2693: PUSH
2694: LD_INT 149
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: LIST
2702: LIST
2703: ST_TO_ADDR
// for i in tmp do
2704: LD_ADDR_VAR 0 2
2708: PUSH
2709: LD_VAR 0 5
2713: PUSH
2714: FOR_IN
2715: IFFALSE 2763
// begin for j := 1 to 2 do
2717: LD_ADDR_VAR 0 3
2721: PUSH
2722: DOUBLE
2723: LD_INT 1
2725: DEC
2726: ST_TO_ADDR
2727: LD_INT 2
2729: PUSH
2730: FOR_TO
2731: IFFALSE 2759
// begin PrepareSoldier ( false , 7 ) ;
2733: LD_INT 0
2735: PPUSH
2736: LD_INT 7
2738: PPUSH
2739: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2743: CALL_OW 44
2747: PPUSH
2748: LD_VAR 0 2
2752: PPUSH
2753: CALL_OW 52
// end ;
2757: GO 2730
2759: POP
2760: POP
// end ;
2761: GO 2714
2763: POP
2764: POP
// end ;
2765: LD_VAR 0 1
2769: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2770: LD_INT 0
2772: PPUSH
2773: PPUSH
2774: PPUSH
2775: PPUSH
// uc_side := 3 ;
2776: LD_ADDR_OWVAR 20
2780: PUSH
2781: LD_INT 3
2783: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2784: LD_ADDR_OWVAR 21
2788: PUSH
2789: LD_INT 1
2791: PPUSH
2792: LD_INT 3
2794: PPUSH
2795: CALL_OW 12
2799: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2800: LD_ADDR_VAR 0 4
2804: PUSH
2805: LD_INT 5
2807: PPUSH
2808: LD_INT 0
2810: PPUSH
2811: CALL_OW 517
2815: ST_TO_ADDR
// for i := 1 to 3 do
2816: LD_ADDR_VAR 0 2
2820: PUSH
2821: DOUBLE
2822: LD_INT 1
2824: DEC
2825: ST_TO_ADDR
2826: LD_INT 3
2828: PUSH
2829: FOR_TO
2830: IFFALSE 2899
// begin PrepareHuman ( false , 33 , 0 ) ;
2832: LD_INT 0
2834: PPUSH
2835: LD_INT 33
2837: PPUSH
2838: LD_INT 0
2840: PPUSH
2841: CALL_OW 380
// un := CreateHuman ;
2845: LD_ADDR_VAR 0 3
2849: PUSH
2850: CALL_OW 44
2854: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2855: LD_VAR 0 3
2859: PPUSH
2860: LD_VAR 0 4
2864: PUSH
2865: LD_INT 1
2867: ARRAY
2868: PUSH
2869: LD_VAR 0 2
2873: ARRAY
2874: PPUSH
2875: LD_VAR 0 4
2879: PUSH
2880: LD_INT 2
2882: ARRAY
2883: PUSH
2884: LD_VAR 0 2
2888: ARRAY
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 601
// end ;
2897: GO 2829
2899: POP
2900: POP
// end ;
2901: LD_VAR 0 1
2905: RET
// export function PrepareFirstScene ; var i , un ; begin
2906: LD_INT 0
2908: PPUSH
2909: PPUSH
2910: PPUSH
// uc_side := 4 ;
2911: LD_ADDR_OWVAR 20
2915: PUSH
2916: LD_INT 4
2918: ST_TO_ADDR
// uc_nation := 1 ;
2919: LD_ADDR_OWVAR 21
2923: PUSH
2924: LD_INT 1
2926: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2927: LD_INT 0
2929: PPUSH
2930: LD_INT 33
2932: PPUSH
2933: LD_INT 0
2935: PPUSH
2936: CALL_OW 380
// for i := 1 to 2 do
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: DOUBLE
2946: LD_INT 1
2948: DEC
2949: ST_TO_ADDR
2950: LD_INT 2
2952: PUSH
2953: FOR_TO
2954: IFFALSE 3019
// begin un := CreateHuman ;
2956: LD_ADDR_VAR 0 3
2960: PUSH
2961: CALL_OW 44
2965: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2966: LD_VAR 0 3
2970: PPUSH
2971: LD_INT 1
2973: PPUSH
2974: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2978: LD_VAR 0 3
2982: PPUSH
2983: LD_INT 6
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2993: LD_VAR 0 3
2997: PPUSH
2998: LD_INT 1
3000: PPUSH
3001: CALL 67997 0 2
// SetLives ( un , 300 ) ;
3005: LD_VAR 0 3
3009: PPUSH
3010: LD_INT 300
3012: PPUSH
3013: CALL_OW 234
// end ;
3017: GO 2953
3019: POP
3020: POP
// uc_side := 3 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 3
3028: ST_TO_ADDR
// uc_nation := 3 ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 3
3036: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3037: LD_INT 1
3039: PPUSH
3040: LD_INT 5
3042: PPUSH
3043: CALL_OW 381
// for i := 1 to 3 do
3047: LD_ADDR_VAR 0 2
3051: PUSH
3052: DOUBLE
3053: LD_INT 1
3055: DEC
3056: ST_TO_ADDR
3057: LD_INT 3
3059: PUSH
3060: FOR_TO
3061: IFFALSE 3134
// begin un := CreateHuman ;
3063: LD_ADDR_VAR 0 3
3067: PUSH
3068: CALL_OW 44
3072: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3073: LD_ADDR_EXP 59
3077: PUSH
3078: LD_EXP 59
3082: PPUSH
3083: LD_VAR 0 3
3087: PPUSH
3088: CALL 64845 0 2
3092: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3093: LD_VAR 0 3
3097: PPUSH
3098: LD_INT 4
3100: PPUSH
3101: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3105: LD_VAR 0 3
3109: PPUSH
3110: LD_INT 7
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3120: LD_VAR 0 3
3124: PPUSH
3125: LD_INT 4
3127: PPUSH
3128: CALL 67997 0 2
// end ;
3132: GO 3060
3134: POP
3135: POP
// ruCommisar := CreateHuman ;
3136: LD_ADDR_EXP 60
3140: PUSH
3141: CALL_OW 44
3145: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3146: LD_EXP 60
3150: PPUSH
3151: LD_INT 124
3153: PPUSH
3154: LD_INT 37
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3164: LD_EXP 60
3168: PPUSH
3169: LD_INT 3
3171: PPUSH
3172: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3176: LD_EXP 60
3180: PPUSH
3181: LD_INT 3
3183: PPUSH
3184: CALL 67997 0 2
// end ;
3188: LD_VAR 0 1
3192: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3193: LD_INT 0
3195: PPUSH
3196: PPUSH
3197: PPUSH
3198: PPUSH
// uc_side := 6 ;
3199: LD_ADDR_OWVAR 20
3203: PUSH
3204: LD_INT 6
3206: ST_TO_ADDR
// uc_nation := 3 ;
3207: LD_ADDR_OWVAR 21
3211: PUSH
3212: LD_INT 3
3214: ST_TO_ADDR
// ruPatrol := [ ] ;
3215: LD_ADDR_EXP 66
3219: PUSH
3220: EMPTY
3221: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3222: LD_ADDR_VAR 0 4
3226: PUSH
3227: LD_INT 26
3229: PUSH
3230: LD_INT 30
3232: PUSH
3233: LD_INT 39
3235: PUSH
3236: LD_INT 43
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: ST_TO_ADDR
// for i := 1 to spawn do
3245: LD_ADDR_VAR 0 2
3249: PUSH
3250: DOUBLE
3251: LD_INT 1
3253: DEC
3254: ST_TO_ADDR
3255: LD_VAR 0 4
3259: PUSH
3260: FOR_TO
3261: IFFALSE 3372
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3263: LD_INT 0
3265: PPUSH
3266: LD_INT 4
3268: PUSH
3269: LD_INT 5
3271: PUSH
3272: LD_INT 6
3274: PUSH
3275: LD_INT 7
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: PUSH
3284: LD_OWVAR 67
3288: ARRAY
3289: PPUSH
3290: CALL_OW 381
// un := CreateHuman ;
3294: LD_ADDR_VAR 0 3
3298: PUSH
3299: CALL_OW 44
3303: ST_TO_ADDR
// SetTag ( un , i ) ;
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_VAR 0 2
3313: PPUSH
3314: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3318: LD_ADDR_EXP 66
3322: PUSH
3323: LD_EXP 66
3327: PPUSH
3328: LD_VAR 0 3
3332: PPUSH
3333: CALL 64845 0 2
3337: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3338: LD_VAR 0 3
3342: PPUSH
3343: LD_VAR 0 4
3347: PUSH
3348: LD_VAR 0 2
3352: ARRAY
3353: PPUSH
3354: LD_INT 0
3356: PPUSH
3357: CALL_OW 49
// ComHold ( un ) ;
3361: LD_VAR 0 3
3365: PPUSH
3366: CALL_OW 140
// end ;
3370: GO 3260
3372: POP
3373: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3374: LD_ADDR_VAR 0 4
3378: PUSH
3379: LD_INT 48
3381: PUSH
3382: LD_INT 49
3384: PUSH
3385: LD_INT 50
3387: PUSH
3388: LD_INT 51
3390: PUSH
3391: LD_INT 52
3393: PUSH
3394: LD_INT 53
3396: PUSH
3397: EMPTY
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: ST_TO_ADDR
// for i := 1 to spawn do
3405: LD_ADDR_VAR 0 2
3409: PUSH
3410: DOUBLE
3411: LD_INT 1
3413: DEC
3414: ST_TO_ADDR
3415: LD_VAR 0 4
3419: PUSH
3420: FOR_TO
3421: IFFALSE 3530
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3423: LD_INT 0
3425: PPUSH
3426: LD_INT 4
3428: PUSH
3429: LD_INT 5
3431: PUSH
3432: LD_INT 6
3434: PUSH
3435: LD_INT 7
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: LIST
3442: LIST
3443: PUSH
3444: LD_OWVAR 67
3448: ARRAY
3449: PPUSH
3450: CALL_OW 381
// un := CreateHuman ;
3454: LD_ADDR_VAR 0 3
3458: PUSH
3459: CALL_OW 44
3463: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3464: LD_VAR 0 3
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3476: LD_ADDR_EXP 66
3480: PUSH
3481: LD_EXP 66
3485: PPUSH
3486: LD_VAR 0 3
3490: PPUSH
3491: CALL 64845 0 2
3495: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3496: LD_VAR 0 3
3500: PPUSH
3501: LD_VAR 0 4
3505: PUSH
3506: LD_VAR 0 2
3510: ARRAY
3511: PPUSH
3512: LD_INT 0
3514: PPUSH
3515: CALL_OW 49
// ComHold ( un ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: CALL_OW 140
// end ;
3528: GO 3420
3530: POP
3531: POP
// end ;
3532: LD_VAR 0 1
3536: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3537: LD_INT 0
3539: PPUSH
3540: PPUSH
3541: PPUSH
3542: PPUSH
// uc_side := 6 ;
3543: LD_ADDR_OWVAR 20
3547: PUSH
3548: LD_INT 6
3550: ST_TO_ADDR
// uc_nation := nation_russian ;
3551: LD_ADDR_OWVAR 21
3555: PUSH
3556: LD_INT 3
3558: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3559: LD_ADDR_VAR 0 4
3563: PUSH
3564: LD_INT 54
3566: PUSH
3567: LD_INT 55
3569: PUSH
3570: LD_INT 56
3572: PUSH
3573: LD_INT 57
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: LIST
3581: ST_TO_ADDR
// for i := 1 to spawn do
3582: LD_ADDR_VAR 0 2
3586: PUSH
3587: DOUBLE
3588: LD_INT 1
3590: DEC
3591: ST_TO_ADDR
3592: LD_VAR 0 4
3596: PUSH
3597: FOR_TO
3598: IFFALSE 3707
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 4
3605: PUSH
3606: LD_INT 5
3608: PUSH
3609: LD_INT 6
3611: PUSH
3612: LD_INT 7
3614: PUSH
3615: EMPTY
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: PUSH
3621: LD_OWVAR 67
3625: ARRAY
3626: PPUSH
3627: CALL_OW 381
// un := CreateHuman ;
3631: LD_ADDR_VAR 0 3
3635: PUSH
3636: CALL_OW 44
3640: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3641: LD_VAR 0 3
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3653: LD_ADDR_EXP 66
3657: PUSH
3658: LD_EXP 66
3662: PPUSH
3663: LD_VAR 0 3
3667: PPUSH
3668: CALL 64845 0 2
3672: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3673: LD_VAR 0 3
3677: PPUSH
3678: LD_VAR 0 4
3682: PUSH
3683: LD_VAR 0 2
3687: ARRAY
3688: PPUSH
3689: LD_INT 0
3691: PPUSH
3692: CALL_OW 49
// ComHold ( un ) ;
3696: LD_VAR 0 3
3700: PPUSH
3701: CALL_OW 140
// end ;
3705: GO 3597
3707: POP
3708: POP
// end ; end_of_file
3709: LD_VAR 0 1
3713: RET
// export function Action ; var speaker , i , tmp ; begin
3714: LD_INT 0
3716: PPUSH
3717: PPUSH
3718: PPUSH
3719: PPUSH
// Video ( true ) ;
3720: LD_INT 1
3722: PPUSH
3723: CALL 64817 0 1
// hasNormalScene := Kaia or Givi ;
3727: LD_ADDR_EXP 5
3731: PUSH
3732: LD_EXP 46
3736: PUSH
3737: LD_EXP 42
3741: OR
3742: ST_TO_ADDR
// if hasNormalScene then
3743: LD_EXP 5
3747: IFFALSE 3988
// begin for i in americanSquad do
3749: LD_ADDR_VAR 0 3
3753: PUSH
3754: LD_EXP 53
3758: PUSH
3759: FOR_IN
3760: IFFALSE 3806
// begin SetClass ( i , class_prison ) ;
3762: LD_VAR 0 3
3766: PPUSH
3767: LD_INT 33
3769: PPUSH
3770: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3774: LD_VAR 0 3
3778: PPUSH
3779: LD_INT 78
3781: PPUSH
3782: LD_INT 16
3784: PPUSH
3785: LD_INT 5
3787: PPUSH
3788: LD_INT 0
3790: PPUSH
3791: CALL_OW 50
// ComHold ( i ) ;
3795: LD_VAR 0 3
3799: PPUSH
3800: CALL_OW 140
// end ;
3804: GO 3759
3806: POP
3807: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3808: LD_ADDR_VAR 0 4
3812: PUSH
3813: LD_EXP 43
3817: PUSH
3818: LD_EXP 44
3822: PUSH
3823: LD_EXP 45
3827: PUSH
3828: LD_EXP 46
3832: PUSH
3833: LD_EXP 47
3837: PUSH
3838: LD_EXP 48
3842: PUSH
3843: LD_EXP 49
3847: PUSH
3848: LD_EXP 50
3852: PUSH
3853: LD_EXP 42
3857: PUSH
3858: LD_EXP 51
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: PUSH
3875: LD_EXP 52
3879: UNION
3880: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3881: LD_EXP 41
3885: PPUSH
3886: LD_INT 33
3888: PPUSH
3889: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3893: LD_EXP 41
3897: PPUSH
3898: LD_INT 117
3900: PPUSH
3901: LD_INT 24
3903: PPUSH
3904: LD_INT 3
3906: PPUSH
3907: LD_INT 0
3909: PPUSH
3910: CALL 66985 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3914: LD_EXP 41
3918: PPUSH
3919: LD_INT 123
3921: PPUSH
3922: LD_INT 39
3924: PPUSH
3925: CALL_OW 118
// for i in tmp do
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: LD_VAR 0 4
3938: PUSH
3939: FOR_IN
3940: IFFALSE 3986
// begin SetClass ( i , class_prison ) ;
3942: LD_VAR 0 3
3946: PPUSH
3947: LD_INT 33
3949: PPUSH
3950: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3954: LD_VAR 0 3
3958: PPUSH
3959: LD_INT 3
3961: PPUSH
3962: LD_INT 0
3964: PPUSH
3965: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3969: LD_VAR 0 3
3973: PPUSH
3974: LD_INT 113
3976: PPUSH
3977: LD_INT 16
3979: PPUSH
3980: CALL_OW 118
// end ;
3984: GO 3939
3986: POP
3987: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3988: LD_INT 124
3990: PPUSH
3991: LD_INT 39
3993: PPUSH
3994: CALL_OW 86
// PrepareDeadBodies ;
3998: CALL 2770 0 0
// PrepareFirstScene ;
4002: CALL 2906 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4006: LD_INT 152
4008: PPUSH
4009: LD_INT 65
4011: PPUSH
4012: LD_INT 2
4014: PPUSH
4015: LD_INT 70
4017: NEG
4018: PPUSH
4019: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4023: LD_INT 152
4025: PPUSH
4026: LD_INT 65
4028: PPUSH
4029: LD_INT 2
4031: PPUSH
4032: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4036: LD_INT 122
4038: PPUSH
4039: LD_INT 40
4041: PPUSH
4042: LD_INT 2
4044: PPUSH
4045: LD_INT 8
4047: NEG
4048: PPUSH
4049: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4053: LD_INT 124
4055: PPUSH
4056: LD_INT 37
4058: PPUSH
4059: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4063: LD_EXP 60
4067: PPUSH
4068: LD_STRING DRum-Execution-1
4070: PPUSH
4071: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4075: LD_EXP 60
4079: PPUSH
4080: LD_STRING DRum-Execution-2
4082: PPUSH
4083: CALL_OW 88
// wait ( 0 0$01 ) ;
4087: LD_INT 35
4089: PPUSH
4090: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4094: LD_EXP 60
4098: PPUSH
4099: LD_STRING DRum-Execution-3
4101: PPUSH
4102: CALL_OW 88
// wait ( 0 0$1 ) ;
4106: LD_INT 35
4108: PPUSH
4109: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4113: LD_EXP 60
4117: PPUSH
4118: LD_STRING DRum-Execution-4
4120: PPUSH
4121: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4125: LD_EXP 59
4129: PUSH
4130: LD_INT 1
4132: ARRAY
4133: PPUSH
4134: LD_INT 122
4136: PPUSH
4137: LD_INT 39
4139: PPUSH
4140: CALL_OW 428
4144: PPUSH
4145: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4149: LD_EXP 59
4153: PUSH
4154: LD_INT 2
4156: ARRAY
4157: PPUSH
4158: LD_INT 123
4160: PPUSH
4161: LD_INT 41
4163: PPUSH
4164: CALL_OW 428
4168: PPUSH
4169: CALL_OW 115
// AddComHold ( russianKillers ) ;
4173: LD_EXP 59
4177: PPUSH
4178: CALL_OW 200
// wait ( 0 0$1 ) ;
4182: LD_INT 35
4184: PPUSH
4185: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4189: LD_INT 122
4191: PPUSH
4192: LD_INT 40
4194: PPUSH
4195: LD_INT 2
4197: PPUSH
4198: CALL_OW 331
// for i in russianKillers union ruCommisar do
4202: LD_ADDR_VAR 0 3
4206: PUSH
4207: LD_EXP 59
4211: PUSH
4212: LD_EXP 60
4216: UNION
4217: PUSH
4218: FOR_IN
4219: IFFALSE 4232
// RemoveUnit ( i ) ;
4221: LD_VAR 0 3
4225: PPUSH
4226: CALL_OW 64
4230: GO 4218
4232: POP
4233: POP
// if hasNormalScene then
4234: LD_EXP 5
4238: IFFALSE 4246
// ActionNormal else
4240: CALL 4255 0 0
4244: GO 4250
// ActionAdditional ;
4246: CALL 6080 0 0
// end ;
4250: LD_VAR 0 1
4254: RET
// function ActionNormal ; var i , tmp ; begin
4255: LD_INT 0
4257: PPUSH
4258: PPUSH
4259: PPUSH
// CenterNowOnUnits ( Heike ) ;
4260: LD_EXP 41
4264: PPUSH
4265: CALL_OW 87
// wait ( 0 0$1 ) ;
4269: LD_INT 35
4271: PPUSH
4272: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4276: LD_EXP 41
4280: PPUSH
4281: LD_INT 115
4283: PPUSH
4284: LD_INT 19
4286: PPUSH
4287: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4291: LD_EXP 41
4295: PPUSH
4296: LD_INT 113
4298: PPUSH
4299: LD_INT 16
4301: PPUSH
4302: CALL_OW 178
// wait ( 0 0$2 ) ;
4306: LD_INT 70
4308: PPUSH
4309: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4313: LD_EXP 41
4317: PPUSH
4318: LD_STRING DH-Conspiracy-1
4320: PPUSH
4321: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4325: LD_EXP 46
4329: PPUSH
4330: LD_STRING DK-Conspiracy-2
4332: PPUSH
4333: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4337: LD_EXP 42
4341: PPUSH
4342: LD_STRING DG-Conspiracy-3
4344: PPUSH
4345: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4349: LD_EXP 42
4353: PPUSH
4354: LD_STRING DG-Conspiracy-4
4356: PPUSH
4357: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4361: LD_EXP 41
4365: PPUSH
4366: LD_STRING DH-Conspiracy-5
4368: PPUSH
4369: CALL_OW 88
// if IsOk ( Kamil ) then
4373: LD_EXP 45
4377: PPUSH
4378: CALL_OW 302
4382: IFFALSE 4440
// begin hasVodka := true ;
4384: LD_ADDR_EXP 4
4388: PUSH
4389: LD_INT 1
4391: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4392: LD_EXP 45
4396: PPUSH
4397: LD_STRING DKam-Conspiracy-6
4399: PPUSH
4400: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4404: LD_EXP 45
4408: PPUSH
4409: LD_STRING DKam-Conspiracy-7
4411: PPUSH
4412: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4416: LD_EXP 45
4420: PPUSH
4421: LD_STRING DKam-Conspiracy-8
4423: PPUSH
4424: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4428: LD_EXP 45
4432: PPUSH
4433: LD_STRING DKam-Conspiracy-9
4435: PPUSH
4436: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4440: LD_EXP 47
4444: PPUSH
4445: CALL_OW 302
4449: IFFALSE 4630
// begin americanContact := true ;
4451: LD_ADDR_EXP 10
4455: PUSH
4456: LD_INT 1
4458: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4459: LD_STRING M1-american
4461: PPUSH
4462: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4466: LD_EXP 47
4470: PPUSH
4471: LD_STRING DS-Conspiracy-10
4473: PPUSH
4474: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4478: LD_EXP 48
4482: PPUSH
4483: LD_STRING DM-Conspiracy-11
4485: PPUSH
4486: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4490: LD_EXP 47
4494: PPUSH
4495: LD_STRING DS-Conspiracy-12
4497: PPUSH
4498: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4502: LD_INT 84
4504: PPUSH
4505: LD_INT 19
4507: PPUSH
4508: LD_INT 105
4510: PPUSH
4511: CALL 18983 0 3
// if johnnySaved then
4515: LD_EXP 3
4519: IFFALSE 4559
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4521: LD_EXP 47
4525: PPUSH
4526: LD_STRING DS-Conspiracy-13
4528: PPUSH
4529: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4533: LD_EXP 41
4537: PPUSH
4538: LD_STRING DH-Conspiracy-14
4540: PPUSH
4541: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4545: LD_EXP 47
4549: PPUSH
4550: LD_STRING DH-Conspiracy-15
4552: PPUSH
4553: CALL_OW 88
// end else
4557: GO 4595
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4559: LD_EXP 47
4563: PPUSH
4564: LD_STRING DS-Conspiracy-a-13
4566: PPUSH
4567: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4571: LD_EXP 41
4575: PPUSH
4576: LD_STRING DH-Conspiracy-a-14
4578: PPUSH
4579: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4583: LD_EXP 47
4587: PPUSH
4588: LD_STRING DH-Conspiracy-a-15
4590: PPUSH
4591: CALL_OW 88
// end ; if IsOk ( Givi ) then
4595: LD_EXP 42
4599: PPUSH
4600: CALL_OW 302
4604: IFFALSE 4630
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4606: LD_EXP 42
4610: PPUSH
4611: LD_STRING DG-Conspiracy-a-16
4613: PPUSH
4614: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4618: LD_EXP 41
4622: PPUSH
4623: LD_STRING DH-Conspiracy-a-17
4625: PPUSH
4626: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4630: LD_EXP 41
4634: PPUSH
4635: LD_STRING DH-Conspiracy-16
4637: PPUSH
4638: CALL_OW 88
// if IsOk ( Givi ) then
4642: LD_EXP 42
4646: PPUSH
4647: CALL_OW 302
4651: IFFALSE 4923
// begin hasStimDrugs := true ;
4653: LD_ADDR_EXP 9
4657: PUSH
4658: LD_INT 1
4660: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4661: LD_STRING M1-drugs
4663: PPUSH
4664: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4668: LD_EXP 42
4672: PPUSH
4673: LD_STRING DG-Conspiracy-17
4675: PPUSH
4676: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4680: LD_INT 162
4682: PPUSH
4683: LD_INT 2
4685: PPUSH
4686: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4690: LD_INT 194
4692: PPUSH
4693: LD_INT 98
4695: PPUSH
4696: LD_INT 105
4698: PPUSH
4699: CALL 18983 0 3
// SetSide ( drugsLab , 3 ) ;
4703: LD_INT 162
4705: PPUSH
4706: LD_INT 3
4708: PPUSH
4709: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4713: LD_EXP 42
4717: PPUSH
4718: LD_STRING DG-Conspiracy-18
4720: PPUSH
4721: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4725: LD_EXP 42
4729: PPUSH
4730: LD_STRING DG-Conspiracy-19
4732: PPUSH
4733: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4737: LD_EXP 42
4741: PPUSH
4742: LD_STRING DG-Conspiracy-20
4744: PPUSH
4745: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4749: LD_EXP 41
4753: PPUSH
4754: LD_STRING DH-Conspiracy-21
4756: PPUSH
4757: CALL_OW 88
// if IsOk ( Kaia ) then
4761: LD_EXP 46
4765: PPUSH
4766: CALL_OW 302
4770: IFFALSE 4844
// begin hasExplosions := true ;
4772: LD_ADDR_EXP 6
4776: PUSH
4777: LD_INT 1
4779: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4780: LD_STRING M1-explosive
4782: PPUSH
4783: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4787: LD_EXP 46
4791: PPUSH
4792: LD_STRING DK-Conspiracy-22
4794: PPUSH
4795: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4799: LD_INT 73
4801: PPUSH
4802: LD_INT 2
4804: PPUSH
4805: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4809: LD_INT 170
4811: PPUSH
4812: LD_INT 104
4814: PPUSH
4815: LD_INT 105
4817: PPUSH
4818: CALL 18983 0 3
// SetSide ( barExplosion , 3 ) ;
4822: LD_INT 73
4824: PPUSH
4825: LD_INT 3
4827: PPUSH
4828: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4832: LD_EXP 46
4836: PPUSH
4837: LD_STRING DK-Conspiracy-23
4839: PPUSH
4840: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4844: LD_EXP 49
4848: PPUSH
4849: CALL_OW 302
4853: IFFALSE 4923
// begin hasExplosionsInFactory := true ;
4855: LD_ADDR_EXP 7
4859: PUSH
4860: LD_INT 1
4862: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4863: LD_EXP 49
4867: PPUSH
4868: LD_STRING DO-Conspiracy-24
4870: PPUSH
4871: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4875: LD_INT 175
4877: PPUSH
4878: LD_INT 54
4880: PPUSH
4881: LD_INT 70
4883: PPUSH
4884: CALL 18983 0 3
// if IsOk ( Markov ) then
4888: LD_EXP 48
4892: PPUSH
4893: CALL_OW 302
4897: IFFALSE 4923
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4899: LD_EXP 48
4903: PPUSH
4904: LD_STRING DMar-Conspiracy-25
4906: PPUSH
4907: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4911: LD_EXP 48
4915: PPUSH
4916: LD_STRING DMar-Conspiracy-26
4918: PPUSH
4919: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4923: LD_EXP 50
4927: PPUSH
4928: CALL_OW 302
4932: PUSH
4933: LD_EXP 46
4937: PPUSH
4938: CALL_OW 302
4942: AND
4943: IFFALSE 5403
// begin hasWeapons := true ;
4945: LD_ADDR_EXP 19
4949: PUSH
4950: LD_INT 1
4952: ST_TO_ADDR
// hasRevolver := true ;
4953: LD_ADDR_EXP 8
4957: PUSH
4958: LD_INT 1
4960: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4961: LD_STRING M1-weapons
4963: PPUSH
4964: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4968: LD_EXP 50
4972: PPUSH
4973: LD_STRING DKs-Conspiracy-27
4975: PPUSH
4976: CALL_OW 88
// if IsOk ( Givi ) then
4980: LD_EXP 42
4984: PPUSH
4985: CALL_OW 302
4989: IFFALSE 5005
// Say ( Givi , DG-Conspiracy-28 ) else
4991: LD_EXP 42
4995: PPUSH
4996: LD_STRING DG-Conspiracy-28
4998: PPUSH
4999: CALL_OW 88
5003: GO 5070
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5005: LD_EXP 52
5009: PPUSH
5010: LD_INT 26
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PPUSH
5020: CALL_OW 72
5024: PUSH
5025: LD_INT 1
5027: ARRAY
5028: PPUSH
5029: LD_STRING DArm-Conspiracy-a-28
5031: PPUSH
5032: CALL_OW 88
5036: NOT
5037: IFFALSE 5070
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5039: LD_EXP 52
5043: PPUSH
5044: LD_INT 26
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PPUSH
5054: CALL_OW 72
5058: PUSH
5059: LD_INT 1
5061: ARRAY
5062: PPUSH
5063: LD_STRING DArf-Conspiracy-a-28
5065: PPUSH
5066: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5070: LD_EXP 50
5074: PPUSH
5075: LD_STRING DKs-Conspiracy-29
5077: PPUSH
5078: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5082: LD_INT 192
5084: PPUSH
5085: LD_INT 122
5087: PPUSH
5088: LD_INT 105
5090: PPUSH
5091: CALL 18983 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5095: LD_EXP 50
5099: PPUSH
5100: LD_STRING DKs-Conspiracy-30
5102: PPUSH
5103: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5107: LD_EXP 46
5111: PPUSH
5112: LD_STRING DK-Conspiracy-31
5114: PPUSH
5115: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5119: LD_EXP 48
5123: PPUSH
5124: LD_STRING DMar-Conspiracy-33
5126: PPUSH
5127: CALL_OW 88
5131: NOT
5132: PUSH
5133: LD_EXP 52
5137: AND
5138: IFFALSE 5205
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5140: LD_EXP 52
5144: PPUSH
5145: LD_INT 26
5147: PUSH
5148: LD_INT 1
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: PUSH
5160: LD_INT 1
5162: ARRAY
5163: PPUSH
5164: LD_STRING DArm-Conspiracy-a-34
5166: PPUSH
5167: CALL_OW 88
5171: NOT
5172: IFFALSE 5205
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5174: LD_EXP 52
5178: PPUSH
5179: LD_INT 26
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PPUSH
5189: CALL_OW 72
5193: PUSH
5194: LD_INT 1
5196: ARRAY
5197: PPUSH
5198: LD_STRING DArf-Conspiracy-a-34
5200: PPUSH
5201: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5205: LD_EXP 46
5209: PPUSH
5210: LD_STRING DK-Conspiracy-34
5212: PPUSH
5213: CALL_OW 88
// if IsOk ( Markov ) then
5217: LD_EXP 48
5221: PPUSH
5222: CALL_OW 302
5226: IFFALSE 5311
// begin hasSniperRifle := true ;
5228: LD_ADDR_EXP 11
5232: PUSH
5233: LD_INT 1
5235: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5236: LD_EXP 48
5240: PPUSH
5241: LD_STRING DMar-Conspiracy-35
5243: PPUSH
5244: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5248: LD_EXP 46
5252: PPUSH
5253: LD_STRING DK-Conspiracy-36
5255: PPUSH
5256: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5260: LD_EXP 48
5264: PPUSH
5265: LD_STRING DMar-Conspiracy-37
5267: PPUSH
5268: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5272: LD_EXP 48
5276: PPUSH
5277: LD_STRING DMar-Conspiracy-38
5279: PPUSH
5280: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5284: LD_INT 137
5286: PPUSH
5287: LD_INT 98
5289: PPUSH
5290: LD_INT 105
5292: PPUSH
5293: CALL 18983 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5297: LD_EXP 48
5301: PPUSH
5302: LD_STRING DMar-Conspiracy-39
5304: PPUSH
5305: CALL_OW 88
// end else
5309: GO 5403
// if heikeSecondSquad then
5311: LD_EXP 52
5315: IFFALSE 5403
// begin hasSniperRifle := true ;
5317: LD_ADDR_EXP 11
5321: PUSH
5322: LD_INT 1
5324: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5325: LD_INT 137
5327: PPUSH
5328: LD_INT 98
5330: PPUSH
5331: LD_INT 105
5333: PPUSH
5334: CALL 18983 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5338: LD_EXP 52
5342: PPUSH
5343: LD_INT 26
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL_OW 72
5357: PUSH
5358: LD_INT 1
5360: ARRAY
5361: PPUSH
5362: LD_STRING DArm-Conspiracy-a-35
5364: PPUSH
5365: CALL_OW 88
5369: NOT
5370: IFFALSE 5403
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5372: LD_EXP 52
5376: PPUSH
5377: LD_INT 26
5379: PUSH
5380: LD_INT 2
5382: PUSH
5383: EMPTY
5384: LIST
5385: LIST
5386: PPUSH
5387: CALL_OW 72
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: LD_STRING DArf-Conspiracy-a-35
5398: PPUSH
5399: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5403: LD_EXP 41
5407: PPUSH
5408: LD_STRING DH-Conspiracy-40
5410: PPUSH
5411: CALL_OW 88
// if IsOk ( Mike ) then
5415: LD_EXP 43
5419: PPUSH
5420: CALL_OW 302
5424: IFFALSE 5483
// begin hasScout := true ;
5426: LD_ADDR_EXP 12
5430: PUSH
5431: LD_INT 1
5433: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5434: LD_EXP 43
5438: PPUSH
5439: LD_STRING DM-Conspiracy-41
5441: PPUSH
5442: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5446: LD_EXP 43
5450: PPUSH
5451: LD_STRING DM-Conspiracy-42
5453: PPUSH
5454: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5458: LD_INT 73
5460: PPUSH
5461: LD_INT 102
5463: PPUSH
5464: LD_INT 105
5466: PPUSH
5467: CALL 18983 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5471: LD_EXP 43
5475: PPUSH
5476: LD_STRING DM-Conspiracy-43
5478: PPUSH
5479: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5483: LD_EXP 4
5487: PUSH
5488: LD_EXP 46
5492: PPUSH
5493: CALL_OW 302
5497: AND
5498: PUSH
5499: LD_EXP 50
5503: PPUSH
5504: CALL_OW 302
5508: AND
5509: IFFALSE 5555
// begin hasMethanol := true ;
5511: LD_ADDR_EXP 13
5515: PUSH
5516: LD_INT 1
5518: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5519: LD_EXP 46
5523: PPUSH
5524: LD_STRING DK-Conspiracy-44
5526: PPUSH
5527: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5531: LD_EXP 46
5535: PPUSH
5536: LD_STRING DK-Conspiracy-45
5538: PPUSH
5539: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5543: LD_EXP 45
5547: PPUSH
5548: LD_STRING DKam-Conspiracy-46
5550: PPUSH
5551: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5555: LD_EXP 41
5559: PPUSH
5560: LD_STRING DH-Conspiracy-47
5562: PPUSH
5563: CALL_OW 88
// wait ( 0 0$1 ) ;
5567: LD_INT 35
5569: PPUSH
5570: CALL_OW 67
// your_side := 8 ;
5574: LD_ADDR_OWVAR 2
5578: PUSH
5579: LD_INT 8
5581: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5582: LD_INT 1
5584: PPUSH
5585: LD_INT 1
5587: PPUSH
5588: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5592: LD_ADDR_VAR 0 2
5596: PUSH
5597: LD_INT 2
5599: PUSH
5600: LD_INT 22
5602: PUSH
5603: LD_INT 2
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PUSH
5610: LD_INT 22
5612: PUSH
5613: LD_INT 4
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: PUSH
5620: EMPTY
5621: LIST
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 21
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: EMPTY
5636: LIST
5637: LIST
5638: PPUSH
5639: CALL_OW 69
5643: PUSH
5644: FOR_IN
5645: IFFALSE 5658
// RemoveUnit ( i ) ;
5647: LD_VAR 0 2
5651: PPUSH
5652: CALL_OW 64
5656: GO 5644
5658: POP
5659: POP
// wait ( 0 0$0.3 ) ;
5660: LD_INT 10
5662: PPUSH
5663: CALL_OW 67
// Query ( StartInfo1 ) ;
5667: LD_STRING StartInfo1
5669: PPUSH
5670: CALL_OW 97
// wait ( 0 0$1 ) ;
5674: LD_INT 35
5676: PPUSH
5677: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5681: LD_STRING colors_night.txt
5683: PPUSH
5684: CALL_OW 544
// Query ( StartInfo2 ) ;
5688: LD_STRING StartInfo2
5690: PPUSH
5691: CALL_OW 97
// PrepareGame ;
5695: CALL 1025 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5699: LD_INT 152
5701: PPUSH
5702: LD_INT 65
5704: PPUSH
5705: LD_INT 2
5707: PPUSH
5708: LD_INT 70
5710: NEG
5711: PPUSH
5712: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5716: LD_INT 152
5718: PPUSH
5719: LD_INT 65
5721: PPUSH
5722: LD_INT 2
5724: PPUSH
5725: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5729: LD_INT 133
5731: PPUSH
5732: LD_INT 76
5734: PPUSH
5735: LD_INT 2
5737: PPUSH
5738: LD_INT 6
5740: NEG
5741: PPUSH
5742: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5746: LD_INT 152
5748: PPUSH
5749: LD_INT 65
5751: PPUSH
5752: LD_INT 8
5754: PPUSH
5755: LD_INT 70
5757: NEG
5758: PPUSH
5759: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5763: LD_INT 152
5765: PPUSH
5766: LD_INT 65
5768: PPUSH
5769: LD_INT 8
5771: PPUSH
5772: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5776: LD_INT 133
5778: PPUSH
5779: LD_INT 76
5781: PPUSH
5782: LD_INT 8
5784: PPUSH
5785: LD_INT 6
5787: NEG
5788: PPUSH
5789: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5793: LD_INT 23
5795: PPUSH
5796: CALL_OW 87
// dialogue_skipped := false ;
5800: LD_ADDR_OWVAR 59
5804: PUSH
5805: LD_INT 0
5807: ST_TO_ADDR
// InitRuPatrols ;
5808: CALL 3193 0 0
// Say ( Heike , DH-Escape-1 ) ;
5812: LD_EXP 41
5816: PPUSH
5817: LD_STRING DH-Escape-1
5819: PPUSH
5820: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5824: LD_EXP 41
5828: PPUSH
5829: LD_STRING DH-Escape-2
5831: PPUSH
5832: CALL_OW 88
// if not debug then
5836: LD_EXP 1
5840: NOT
5841: IFFALSE 5847
// StartLockerMinigame ;
5843: CALL 19494 0 0
// wait ( 0 0$1 ) ;
5847: LD_INT 35
5849: PPUSH
5850: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5854: LD_EXP 41
5858: PPUSH
5859: LD_STRING DH-Escape-4
5861: PPUSH
5862: CALL_OW 88
// wait ( 0 0$3 ) ;
5866: LD_INT 105
5868: PPUSH
5869: CALL_OW 67
// your_side := 2 ;
5873: LD_ADDR_OWVAR 2
5877: PUSH
5878: LD_INT 2
5880: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5881: LD_EXP 41
5885: PPUSH
5886: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5890: LD_INT 152
5892: PPUSH
5893: LD_INT 65
5895: PPUSH
5896: LD_INT 2
5898: PPUSH
5899: LD_INT 70
5901: NEG
5902: PPUSH
5903: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5907: LD_INT 152
5909: PPUSH
5910: LD_INT 65
5912: PPUSH
5913: LD_INT 2
5915: PPUSH
5916: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5920: LD_INT 133
5922: PPUSH
5923: LD_INT 76
5925: PPUSH
5926: LD_INT 8
5928: PPUSH
5929: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5933: LD_EXP 41
5937: PPUSH
5938: LD_INT 128
5940: PPUSH
5941: LD_INT 64
5943: PPUSH
5944: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5948: LD_INT 35
5950: PPUSH
5951: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5955: LD_EXP 41
5959: PPUSH
5960: LD_INT 128
5962: PPUSH
5963: LD_INT 64
5965: PPUSH
5966: CALL_OW 307
5970: IFFALSE 5948
// ComHold ( Heike ) ;
5972: LD_EXP 41
5976: PPUSH
5977: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5981: LD_EXP 41
5985: PPUSH
5986: LD_STRING DH-Start-1
5988: PPUSH
5989: CALL_OW 88
// if not americanContact then
5993: LD_EXP 10
5997: NOT
5998: IFFALSE 6014
// Say ( Heike , DH-Start-c-2 ) else
6000: LD_EXP 41
6004: PPUSH
6005: LD_STRING DH-Start-c-2
6007: PPUSH
6008: CALL_OW 88
6012: GO 6046
// if johnnySaved then
6014: LD_EXP 3
6018: IFFALSE 6034
// Say ( Heike , DH-Start-a-2 ) else
6020: LD_EXP 41
6024: PPUSH
6025: LD_STRING DH-Start-a-2
6027: PPUSH
6028: CALL_OW 88
6032: GO 6046
// Say ( Heike , DH-Start-b-2 ) ;
6034: LD_EXP 41
6038: PPUSH
6039: LD_STRING DH-Start-b-2
6041: PPUSH
6042: CALL_OW 88
// Video ( false ) ;
6046: LD_INT 0
6048: PPUSH
6049: CALL 64817 0 1
// tick := 0 ;
6053: LD_ADDR_OWVAR 1
6057: PUSH
6058: LD_INT 0
6060: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6061: LD_STRING M1
6063: PPUSH
6064: CALL_OW 337
// enable ( gameStartEvent ) ;
6068: LD_INT 2
6070: ENABLE_MARKED
// SaveForQuickRestart ;
6071: CALL_OW 22
// end ;
6075: LD_VAR 0 1
6079: RET
// function ActionAdditional ; var i , un , tmp ; begin
6080: LD_INT 0
6082: PPUSH
6083: PPUSH
6084: PPUSH
6085: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6086: LD_INT 115
6088: PPUSH
6089: LD_INT 27
6091: PPUSH
6092: LD_INT 2
6094: PPUSH
6095: LD_INT 6
6097: NEG
6098: PPUSH
6099: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6103: LD_EXP 41
6107: PPUSH
6108: LD_INT 115
6110: PPUSH
6111: LD_INT 27
6113: PPUSH
6114: CALL_OW 428
6118: PPUSH
6119: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6123: LD_EXP 41
6127: PPUSH
6128: LD_INT 33
6130: PPUSH
6131: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6135: LD_INT 124
6137: PPUSH
6138: LD_INT 39
6140: PPUSH
6141: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6145: LD_EXP 41
6149: PPUSH
6150: LD_STRING DH-Fail-1
6152: PPUSH
6153: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6157: LD_INT 3
6159: PPUSH
6160: CALL_OW 427
// ComExit ( Heike ) ;
6164: LD_EXP 41
6168: PPUSH
6169: CALL 65243 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6173: LD_EXP 41
6177: PPUSH
6178: LD_INT 109
6180: PPUSH
6181: LD_INT 33
6183: PPUSH
6184: CALL_OW 171
// AddComHold ( Heike ) ;
6188: LD_EXP 41
6192: PPUSH
6193: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6197: LD_INT 115
6199: PPUSH
6200: LD_INT 27
6202: PPUSH
6203: LD_INT 2
6205: PPUSH
6206: CALL_OW 331
// wait ( 0 0$2 ) ;
6210: LD_INT 70
6212: PPUSH
6213: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6217: LD_INT 35
6219: PPUSH
6220: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6224: LD_EXP 41
6228: PPUSH
6229: LD_INT 109
6231: PPUSH
6232: LD_INT 33
6234: PPUSH
6235: CALL_OW 307
6239: IFFALSE 6217
// Say ( Heike , DH-Fail-2 ) ;
6241: LD_EXP 41
6245: PPUSH
6246: LD_STRING DH-Fail-2
6248: PPUSH
6249: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6253: LD_EXP 41
6257: PPUSH
6258: LD_INT 111
6260: PPUSH
6261: LD_INT 48
6263: PPUSH
6264: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6268: LD_INT 35
6270: PPUSH
6271: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6275: LD_EXP 41
6279: PPUSH
6280: LD_INT 111
6282: PPUSH
6283: LD_INT 48
6285: PPUSH
6286: CALL_OW 297
6290: PUSH
6291: LD_INT 4
6293: LESS
6294: IFFALSE 6268
// AddComMoveXY ( Heike , 106 , 72 ) ;
6296: LD_EXP 41
6300: PPUSH
6301: LD_INT 106
6303: PPUSH
6304: LD_INT 72
6306: PPUSH
6307: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6311: LD_EXP 41
6315: PPUSH
6316: LD_INT 103
6318: PPUSH
6319: LD_INT 80
6321: PPUSH
6322: CALL_OW 171
// uc_side := 3 ;
6326: LD_ADDR_OWVAR 20
6330: PUSH
6331: LD_INT 3
6333: ST_TO_ADDR
// uc_nation := 3 ;
6334: LD_ADDR_OWVAR 21
6338: PUSH
6339: LD_INT 3
6341: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6342: LD_INT 1
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: LD_INT 6
6350: PPUSH
6351: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6355: LD_ADDR_OWVAR 29
6359: PUSH
6360: LD_INT 12
6362: PUSH
6363: LD_INT 12
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: ST_TO_ADDR
// un := CreateHuman ;
6370: LD_ADDR_VAR 0 3
6374: PUSH
6375: CALL_OW 44
6379: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6380: LD_VAR 0 3
6384: PPUSH
6385: LD_INT 134
6387: PPUSH
6388: LD_INT 52
6390: PPUSH
6391: LD_INT 4
6393: PPUSH
6394: LD_INT 0
6396: PPUSH
6397: CALL 66985 0 5
// ComTurnUnit ( un , Heike ) ;
6401: LD_VAR 0 3
6405: PPUSH
6406: LD_EXP 41
6410: PPUSH
6411: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6415: LD_VAR 0 3
6419: PPUSH
6420: LD_EXP 41
6424: PPUSH
6425: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6429: LD_VAR 0 3
6433: PPUSH
6434: LD_STRING DRum-Fail-3
6436: PPUSH
6437: CALL_OW 88
// for i := 1 to 3 do
6441: LD_ADDR_VAR 0 2
6445: PUSH
6446: DOUBLE
6447: LD_INT 1
6449: DEC
6450: ST_TO_ADDR
6451: LD_INT 3
6453: PUSH
6454: FOR_TO
6455: IFFALSE 6528
// begin PrepareSoldier ( false , 10 ) ;
6457: LD_INT 0
6459: PPUSH
6460: LD_INT 10
6462: PPUSH
6463: CALL_OW 381
// un := CreateHuman ;
6467: LD_ADDR_VAR 0 3
6471: PUSH
6472: CALL_OW 44
6476: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6477: LD_ADDR_VAR 0 4
6481: PUSH
6482: LD_VAR 0 4
6486: PPUSH
6487: LD_VAR 0 3
6491: PPUSH
6492: CALL 64845 0 2
6496: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6497: LD_VAR 0 3
6501: PPUSH
6502: LD_INT 8
6504: PPUSH
6505: LD_INT 0
6507: PPUSH
6508: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6512: LD_VAR 0 3
6516: PPUSH
6517: LD_EXP 41
6521: PPUSH
6522: CALL_OW 119
// end ;
6526: GO 6454
6528: POP
6529: POP
// repeat wait ( 0 0$1 ) ;
6530: LD_INT 35
6532: PPUSH
6533: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6537: LD_VAR 0 4
6541: PPUSH
6542: LD_INT 101
6544: PUSH
6545: LD_INT 2
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 72
6556: PUSH
6557: LD_INT 1
6559: GREATER
6560: IFFALSE 6530
// wait ( 0 0$1 ) ;
6562: LD_INT 35
6564: PPUSH
6565: CALL_OW 67
// DialogueOn ;
6569: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6573: LD_EXP 41
6577: PPUSH
6578: LD_STRING DH-Fail-4
6580: PPUSH
6581: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6585: LD_EXP 41
6589: PPUSH
6590: LD_STRING DH-Fail-5
6592: PPUSH
6593: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6597: LD_EXP 41
6601: PPUSH
6602: LD_STRING DH-Fail-6
6604: PPUSH
6605: CALL_OW 88
// DialogueOff ;
6609: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6613: LD_VAR 0 4
6617: PPUSH
6618: LD_EXP 41
6622: PPUSH
6623: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6627: LD_INT 35
6629: PPUSH
6630: CALL_OW 67
// until IsDying ( Heike ) ;
6634: LD_EXP 41
6638: PPUSH
6639: CALL_OW 303
6643: IFFALSE 6627
// KillUnit ( Heike ) ;
6645: LD_EXP 41
6649: PPUSH
6650: CALL_OW 66
// wait ( 0 0$4 ) ;
6654: LD_INT 140
6656: PPUSH
6657: CALL_OW 67
// ResetFog ;
6661: CALL_OW 335
// DialogueOn ;
6665: CALL_OW 6
// dwait ( 0 0$1 ) ;
6669: LD_INT 35
6671: PPUSH
6672: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6676: LD_ADDR_EXP 41
6680: PUSH
6681: LD_STRING Heike
6683: PPUSH
6684: LD_EXP 1
6688: NOT
6689: PPUSH
6690: LD_EXP 2
6694: PPUSH
6695: CALL 27396 0 3
6699: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6700: LD_EXP 41
6704: PPUSH
6705: LD_STRING DH-Fail-7
6707: PPUSH
6708: CALL_OW 89
// DialogueOff ;
6712: CALL_OW 7
// YouLost ( Fail ) ;
6716: LD_STRING Fail
6718: PPUSH
6719: CALL_OW 104
// end ;
6723: LD_VAR 0 1
6727: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6728: LD_INT 2
6730: PPUSH
6731: LD_INT 173
6733: PPUSH
6734: LD_INT 29
6736: PPUSH
6737: CALL_OW 293
6741: PUSH
6742: LD_EXP 41
6746: PPUSH
6747: LD_INT 173
6749: PPUSH
6750: LD_INT 29
6752: PPUSH
6753: CALL_OW 297
6757: PUSH
6758: LD_INT 6
6760: LESS
6761: AND
6762: IFFALSE 6779
6764: GO 6766
6766: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6767: LD_EXP 41
6771: PPUSH
6772: LD_STRING DH-EastRoad
6774: PPUSH
6775: CALL_OW 88
6779: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6780: LD_INT 2
6782: PPUSH
6783: LD_INT 149
6785: PPUSH
6786: LD_INT 3
6788: PPUSH
6789: CALL_OW 293
6793: PUSH
6794: LD_EXP 41
6798: PPUSH
6799: LD_INT 149
6801: PPUSH
6802: LD_INT 3
6804: PPUSH
6805: CALL_OW 297
6809: PUSH
6810: LD_INT 6
6812: LESS
6813: AND
6814: IFFALSE 6831
6816: GO 6818
6818: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6819: LD_EXP 41
6823: PPUSH
6824: LD_STRING DH-EastRoad
6826: PPUSH
6827: CALL_OW 88
6831: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6832: LD_INT 2
6834: PPUSH
6835: LD_INT 217
6837: PPUSH
6838: LD_INT 120
6840: PPUSH
6841: CALL_OW 293
6845: PUSH
6846: LD_EXP 41
6850: PPUSH
6851: LD_INT 217
6853: PPUSH
6854: LD_INT 120
6856: PPUSH
6857: CALL_OW 297
6861: PUSH
6862: LD_INT 6
6864: LESS
6865: AND
6866: IFFALSE 6883
6868: GO 6870
6870: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6871: LD_EXP 41
6875: PPUSH
6876: LD_STRING DH-EastEnd
6878: PPUSH
6879: CALL_OW 88
6883: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6884: LD_EXP 41
6888: PPUSH
6889: LD_INT 11
6891: PPUSH
6892: CALL_OW 308
6896: IFFALSE 6934
6898: GO 6900
6900: DISABLE
// begin if not heikeSquad then
6901: LD_EXP 14
6905: NOT
6906: IFFALSE 6922
// Say ( Heike , DH-Hill ) else
6908: LD_EXP 41
6912: PPUSH
6913: LD_STRING DH-Hill
6915: PPUSH
6916: CALL_OW 88
6920: GO 6934
// Say ( Heike , DH-Hill-a ) ;
6922: LD_EXP 41
6926: PPUSH
6927: LD_STRING DH-Hill-a
6929: PPUSH
6930: CALL_OW 88
// end ;
6934: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6935: LD_EXP 41
6939: PPUSH
6940: LD_INT 12
6942: PPUSH
6943: CALL_OW 308
6947: IFFALSE 7134
6949: GO 6951
6951: DISABLE
6952: LD_INT 0
6954: PPUSH
6955: PPUSH
6956: PPUSH
// begin DialogueOn ;
6957: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6961: LD_EXP 41
6965: PPUSH
6966: CALL_OW 87
// x := GetX ( Heike ) ;
6970: LD_ADDR_VAR 0 1
6974: PUSH
6975: LD_EXP 41
6979: PPUSH
6980: CALL_OW 250
6984: ST_TO_ADDR
// y := GetY ( Heike ) ;
6985: LD_ADDR_VAR 0 2
6989: PUSH
6990: LD_EXP 41
6994: PPUSH
6995: CALL_OW 251
6999: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7000: LD_VAR 0 1
7004: PPUSH
7005: LD_VAR 0 2
7009: PPUSH
7010: LD_INT 2
7012: PPUSH
7013: LD_INT 12
7015: NEG
7016: PPUSH
7017: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7021: LD_VAR 0 1
7025: PPUSH
7026: LD_VAR 0 2
7030: PPUSH
7031: LD_INT 2
7033: PPUSH
7034: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7038: LD_INT 101
7040: PUSH
7041: LD_INT 2
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 30
7053: PUSH
7054: LD_INT 32
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: PUSH
7061: LD_INT 30
7063: PUSH
7064: LD_INT 33
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PPUSH
7080: CALL_OW 69
7084: IFFALSE 7096
// v := 3 else
7086: LD_ADDR_VAR 0 3
7090: PUSH
7091: LD_INT 3
7093: ST_TO_ADDR
7094: GO 7104
// v := 2 ;
7096: LD_ADDR_VAR 0 3
7100: PUSH
7101: LD_INT 2
7103: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7104: LD_EXP 41
7108: PPUSH
7109: LD_STRING DH-Outpost-
7111: PUSH
7112: LD_INT 1
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: CALL_OW 12
7124: STR
7125: PPUSH
7126: CALL_OW 88
// DialogueOff ;
7130: CALL_OW 7
// end ;
7134: PPOPN 3
7136: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7137: LD_EXP 41
7141: PPUSH
7142: LD_INT 64
7144: PPUSH
7145: CALL_OW 308
7149: IFFALSE 7336
7151: GO 7153
7153: DISABLE
7154: LD_INT 0
7156: PPUSH
7157: PPUSH
7158: PPUSH
// begin DialogueOn ;
7159: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7163: LD_EXP 41
7167: PPUSH
7168: CALL_OW 87
// x := GetX ( Heike ) ;
7172: LD_ADDR_VAR 0 1
7176: PUSH
7177: LD_EXP 41
7181: PPUSH
7182: CALL_OW 250
7186: ST_TO_ADDR
// y := GetY ( Heike ) ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_EXP 41
7196: PPUSH
7197: CALL_OW 251
7201: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7202: LD_VAR 0 1
7206: PPUSH
7207: LD_VAR 0 2
7211: PPUSH
7212: LD_INT 2
7214: PPUSH
7215: LD_INT 12
7217: NEG
7218: PPUSH
7219: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7223: LD_VAR 0 1
7227: PPUSH
7228: LD_VAR 0 2
7232: PPUSH
7233: LD_INT 2
7235: PPUSH
7236: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7240: LD_INT 101
7242: PUSH
7243: LD_INT 2
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: LD_INT 2
7252: PUSH
7253: LD_INT 30
7255: PUSH
7256: LD_INT 32
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 30
7265: PUSH
7266: LD_INT 33
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 69
7286: IFFALSE 7298
// v := 3 else
7288: LD_ADDR_VAR 0 3
7292: PUSH
7293: LD_INT 3
7295: ST_TO_ADDR
7296: GO 7306
// v := 2 ;
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 2
7305: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7306: LD_EXP 41
7310: PPUSH
7311: LD_STRING DH-Outpost-
7313: PUSH
7314: LD_INT 1
7316: PPUSH
7317: LD_VAR 0 3
7321: PPUSH
7322: CALL_OW 12
7326: STR
7327: PPUSH
7328: CALL_OW 88
// DialogueOff ;
7332: CALL_OW 7
// end ;
7336: PPOPN 3
7338: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7339: LD_EXP 41
7343: PPUSH
7344: LD_INT 19
7346: PPUSH
7347: CALL_OW 308
7351: PUSH
7352: LD_EXP 22
7356: NOT
7357: AND
7358: PUSH
7359: LD_EXP 30
7363: NOT
7364: AND
7365: IFFALSE 7438
7367: GO 7369
7369: DISABLE
// begin DialogueOn ;
7370: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7374: LD_INT 152
7376: PPUSH
7377: LD_INT 115
7379: PPUSH
7380: LD_INT 2
7382: PPUSH
7383: LD_INT 16
7385: NEG
7386: PPUSH
7387: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7391: LD_INT 152
7393: PPUSH
7394: LD_INT 115
7396: PPUSH
7397: LD_INT 2
7399: PPUSH
7400: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7404: LD_INT 152
7406: PPUSH
7407: LD_INT 115
7409: PPUSH
7410: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7414: LD_EXP 41
7418: PPUSH
7419: LD_STRING DH-Stealth-1
7421: PPUSH
7422: CALL_OW 88
// DialogueOff ;
7426: CALL_OW 7
// adminAreaDiscovered := true ;
7430: LD_ADDR_EXP 22
7434: PUSH
7435: LD_INT 1
7437: ST_TO_ADDR
// end ;
7438: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7439: LD_INT 2
7441: PPUSH
7442: LD_EXP 42
7446: PPUSH
7447: CALL_OW 292
7451: PUSH
7452: LD_EXP 41
7456: PPUSH
7457: LD_EXP 42
7461: PPUSH
7462: CALL_OW 296
7466: PUSH
7467: LD_INT 6
7469: LESS
7470: AND
7471: PUSH
7472: LD_EXP 17
7476: NOT
7477: AND
7478: PUSH
7479: LD_EXP 30
7483: NOT
7484: AND
7485: IFFALSE 7591
7487: GO 7489
7489: DISABLE
// begin DialogueOn ;
7490: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7494: LD_EXP 42
7498: PPUSH
7499: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7503: LD_EXP 42
7507: PPUSH
7508: LD_EXP 41
7512: PPUSH
7513: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7517: LD_EXP 41
7521: PPUSH
7522: LD_EXP 42
7526: PPUSH
7527: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7531: LD_EXP 41
7535: PPUSH
7536: LD_STRING DH-Givi-1
7538: PPUSH
7539: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7543: LD_EXP 42
7547: PPUSH
7548: LD_STRING DG-Givi-2
7550: PPUSH
7551: CALL_OW 88
// DialogueOff ;
7555: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7559: LD_EXP 42
7563: PPUSH
7564: LD_INT 2
7566: PPUSH
7567: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7571: LD_ADDR_EXP 14
7575: PUSH
7576: LD_EXP 14
7580: PPUSH
7581: LD_EXP 42
7585: PPUSH
7586: CALL 64845 0 2
7590: ST_TO_ADDR
// end ;
7591: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7592: LD_INT 2
7594: PPUSH
7595: LD_EXP 47
7599: PPUSH
7600: CALL_OW 292
7604: PUSH
7605: LD_EXP 41
7609: PPUSH
7610: LD_EXP 47
7614: PPUSH
7615: CALL_OW 296
7619: PUSH
7620: LD_INT 6
7622: LESS
7623: AND
7624: PUSH
7625: LD_EXP 17
7629: NOT
7630: AND
7631: PUSH
7632: LD_EXP 30
7636: NOT
7637: AND
7638: IFFALSE 7744
7640: GO 7642
7642: DISABLE
// begin DialogueOn ;
7643: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7647: LD_EXP 47
7651: PPUSH
7652: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7656: LD_EXP 47
7660: PPUSH
7661: LD_EXP 41
7665: PPUSH
7666: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7670: LD_EXP 41
7674: PPUSH
7675: LD_EXP 47
7679: PPUSH
7680: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7684: LD_EXP 41
7688: PPUSH
7689: LD_STRING DH-Sophia-1
7691: PPUSH
7692: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7696: LD_EXP 47
7700: PPUSH
7701: LD_STRING DS-Sophia-2
7703: PPUSH
7704: CALL_OW 88
// DialogueOff ;
7708: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7712: LD_EXP 47
7716: PPUSH
7717: LD_INT 2
7719: PPUSH
7720: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7724: LD_ADDR_EXP 14
7728: PUSH
7729: LD_EXP 14
7733: PPUSH
7734: LD_EXP 47
7738: PPUSH
7739: CALL 64845 0 2
7743: ST_TO_ADDR
// end ;
7744: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7745: LD_INT 2
7747: PPUSH
7748: LD_EXP 49
7752: PPUSH
7753: CALL_OW 292
7757: PUSH
7758: LD_EXP 41
7762: PPUSH
7763: LD_EXP 49
7767: PPUSH
7768: CALL_OW 296
7772: PUSH
7773: LD_INT 6
7775: LESS
7776: AND
7777: PUSH
7778: LD_EXP 17
7782: NOT
7783: AND
7784: PUSH
7785: LD_EXP 30
7789: NOT
7790: AND
7791: IFFALSE 7887
7793: GO 7795
7795: DISABLE
// begin DialogueOn ;
7796: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7800: LD_EXP 49
7804: PPUSH
7805: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7809: LD_EXP 41
7813: PPUSH
7814: LD_STRING DH-Olaf-1
7816: PPUSH
7817: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7821: LD_EXP 49
7825: PPUSH
7826: LD_STRING DO-Olaf-2
7828: PPUSH
7829: CALL_OW 88
// if explosionsTakenByRussians then
7833: LD_EXP 21
7837: IFFALSE 7851
// Say ( Olaf , DO-Olaf-a-3 ) ;
7839: LD_EXP 49
7843: PPUSH
7844: LD_STRING DO-Olaf-a-3
7846: PPUSH
7847: CALL_OW 88
// DialogueOff ;
7851: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7855: LD_EXP 49
7859: PPUSH
7860: LD_INT 2
7862: PPUSH
7863: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7867: LD_ADDR_EXP 14
7871: PUSH
7872: LD_EXP 14
7876: PPUSH
7877: LD_EXP 49
7881: PPUSH
7882: CALL 64845 0 2
7886: ST_TO_ADDR
// end ;
7887: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7888: LD_INT 2
7890: PPUSH
7891: LD_EXP 43
7895: PPUSH
7896: CALL_OW 292
7900: PUSH
7901: LD_EXP 41
7905: PPUSH
7906: LD_EXP 43
7910: PPUSH
7911: CALL_OW 296
7915: PUSH
7916: LD_INT 6
7918: LESS
7919: AND
7920: PUSH
7921: LD_EXP 17
7925: NOT
7926: AND
7927: PUSH
7928: LD_EXP 30
7932: NOT
7933: AND
7934: IFFALSE 8162
7936: GO 7938
7938: DISABLE
7939: LD_INT 0
7941: PPUSH
7942: PPUSH
// begin DialogueOn ;
7943: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7947: LD_EXP 43
7951: PPUSH
7952: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7956: LD_ADDR_VAR 0 2
7960: PUSH
7961: LD_INT 18
7963: PPUSH
7964: LD_INT 0
7966: PPUSH
7967: CALL_OW 517
7971: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7972: LD_ADDR_VAR 0 1
7976: PUSH
7977: DOUBLE
7978: LD_INT 1
7980: DEC
7981: ST_TO_ADDR
7982: LD_VAR 0 2
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: FOR_TO
7992: IFFALSE 8074
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7994: LD_VAR 0 2
7998: PUSH
7999: LD_INT 1
8001: ARRAY
8002: PUSH
8003: LD_VAR 0 1
8007: ARRAY
8008: PPUSH
8009: LD_VAR 0 2
8013: PUSH
8014: LD_INT 2
8016: ARRAY
8017: PUSH
8018: LD_VAR 0 1
8022: ARRAY
8023: PPUSH
8024: LD_INT 2
8026: PPUSH
8027: LD_INT 3
8029: NEG
8030: PPUSH
8031: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8035: LD_VAR 0 2
8039: PUSH
8040: LD_INT 1
8042: ARRAY
8043: PUSH
8044: LD_VAR 0 1
8048: ARRAY
8049: PPUSH
8050: LD_VAR 0 2
8054: PUSH
8055: LD_INT 2
8057: ARRAY
8058: PUSH
8059: LD_VAR 0 1
8063: ARRAY
8064: PPUSH
8065: LD_INT 2
8067: PPUSH
8068: CALL_OW 331
// end ;
8072: GO 7991
8074: POP
8075: POP
// Say ( Mike , DM-Mike-1 ) ;
8076: LD_EXP 43
8080: PPUSH
8081: LD_STRING DM-Mike-1
8083: PPUSH
8084: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8088: LD_EXP 41
8092: PPUSH
8093: LD_STRING DH-Mike-2
8095: PPUSH
8096: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8100: LD_INT 78
8102: PPUSH
8103: LD_INT 104
8105: PPUSH
8106: CALL_OW 84
// dwait ( 0 0$1 ) ;
8110: LD_INT 35
8112: PPUSH
8113: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8117: LD_EXP 41
8121: PPUSH
8122: CALL_OW 87
// DialogueOff ;
8126: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8130: LD_EXP 43
8134: PPUSH
8135: LD_INT 2
8137: PPUSH
8138: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8142: LD_ADDR_EXP 14
8146: PUSH
8147: LD_EXP 14
8151: PPUSH
8152: LD_EXP 43
8156: PPUSH
8157: CALL 64845 0 2
8161: ST_TO_ADDR
// end ;
8162: PPOPN 2
8164: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8165: LD_EXP 41
8169: PPUSH
8170: LD_EXP 46
8174: PPUSH
8175: CALL_OW 296
8179: PUSH
8180: LD_INT 6
8182: LESS
8183: PUSH
8184: LD_EXP 46
8188: PPUSH
8189: CALL_OW 257
8193: PUSH
8194: LD_INT 33
8196: EQUAL
8197: AND
8198: PUSH
8199: LD_EXP 17
8203: NOT
8204: AND
8205: PUSH
8206: LD_EXP 30
8210: NOT
8211: AND
8212: PUSH
8213: LD_EXP 46
8217: PPUSH
8218: CALL_OW 302
8222: AND
8223: PUSH
8224: LD_EXP 20
8228: AND
8229: PUSH
8230: LD_EXP 46
8234: PUSH
8235: LD_EXP 14
8239: IN
8240: AND
8241: PUSH
8242: LD_EXP 46
8246: PPUSH
8247: CALL_OW 255
8251: PUSH
8252: LD_INT 2
8254: EQUAL
8255: AND
8256: IFFALSE 8285
8258: GO 8260
8260: DISABLE
// begin DialogueOn ;
8261: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8265: LD_EXP 41
8269: PPUSH
8270: LD_STRING DH-Kaia-Revolver-2
8272: PPUSH
8273: CALL_OW 88
// SetClassKaiaRevolver ;
8277: CALL 1738 0 0
// DialogueOff ;
8281: CALL_OW 7
// end ;
8285: END
// every 0 0$3 trigger not Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8286: LD_EXP 44
8290: NOT
8291: PUSH
8292: LD_EXP 51
8296: AND
8297: PUSH
8298: LD_EXP 51
8302: PPUSH
8303: CALL_OW 255
8307: PUSH
8308: LD_INT 2
8310: NONEQUAL
8311: AND
8312: PUSH
8313: LD_EXP 44
8317: PPUSH
8318: CALL_OW 255
8322: PUSH
8323: LD_INT 2
8325: NONEQUAL
8326: AND
8327: PUSH
8328: LD_EXP 14
8332: PPUSH
8333: LD_INT 22
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PPUSH
8343: CALL_OW 72
8347: PUSH
8348: LD_INT 5
8350: GREATER
8351: AND
8352: PUSH
8353: LD_EXP 17
8357: NOT
8358: AND
8359: PUSH
8360: LD_EXP 30
8364: NOT
8365: AND
8366: IFFALSE 9083
8368: GO 8370
8370: DISABLE
8371: LD_INT 0
8373: PPUSH
8374: PPUSH
// begin DialogueOn ;
8375: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8379: LD_ADDR_VAR 0 2
8383: PUSH
8384: LD_EXP 42
8388: PPUSH
8389: CALL_OW 302
8393: PUSH
8394: LD_EXP 42
8398: PUSH
8399: LD_EXP 14
8403: IN
8404: AND
8405: PUSH
8406: LD_EXP 42
8410: PPUSH
8411: CALL_OW 255
8415: PUSH
8416: LD_INT 2
8418: EQUAL
8419: AND
8420: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8421: LD_EXP 41
8425: PPUSH
8426: LD_STRING DH-Med-1
8428: PPUSH
8429: CALL_OW 88
// if hasGivi then
8433: LD_VAR 0 2
8437: IFFALSE 8453
// Say ( Givi , DG-Med-2 ) else
8439: LD_EXP 42
8443: PPUSH
8444: LD_STRING DG-Med-2
8446: PPUSH
8447: CALL_OW 88
8451: GO 8558
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8453: LD_EXP 14
8457: PUSH
8458: LD_EXP 52
8462: ISECT
8463: PPUSH
8464: LD_INT 22
8466: PUSH
8467: LD_INT 2
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: LD_INT 26
8476: PUSH
8477: LD_INT 1
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 72
8492: PUSH
8493: LD_INT 1
8495: ARRAY
8496: PPUSH
8497: LD_STRING DArm-Med-e-2
8499: PPUSH
8500: CALL_OW 88
8504: NOT
8505: IFFALSE 8558
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8507: LD_EXP 14
8511: PUSH
8512: LD_EXP 52
8516: ISECT
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_INT 2
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 26
8530: PUSH
8531: LD_INT 2
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PPUSH
8542: CALL_OW 72
8546: PUSH
8547: LD_INT 1
8549: ARRAY
8550: PPUSH
8551: LD_STRING DArf-Med-e-2
8553: PPUSH
8554: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8558: LD_INT 154
8560: PPUSH
8561: LD_INT 119
8563: PPUSH
8564: LD_INT 70
8566: PPUSH
8567: CALL 18983 0 3
// Say ( Heike , DH-Med-3 ) ;
8571: LD_EXP 41
8575: PPUSH
8576: LD_STRING DH-Med-3
8578: PPUSH
8579: CALL_OW 88
// if hasGivi then
8583: LD_VAR 0 2
8587: IFFALSE 8603
// Say ( Givi , DG-Med-4 ) else
8589: LD_EXP 42
8593: PPUSH
8594: LD_STRING DG-Med-4
8596: PPUSH
8597: CALL_OW 88
8601: GO 8708
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8603: LD_EXP 14
8607: PUSH
8608: LD_EXP 52
8612: ISECT
8613: PPUSH
8614: LD_INT 22
8616: PUSH
8617: LD_INT 2
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 26
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: EMPTY
8635: LIST
8636: LIST
8637: PPUSH
8638: CALL_OW 72
8642: PUSH
8643: LD_INT 1
8645: ARRAY
8646: PPUSH
8647: LD_STRING DArm-Med-e-4
8649: PPUSH
8650: CALL_OW 88
8654: NOT
8655: IFFALSE 8708
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8657: LD_EXP 14
8661: PUSH
8662: LD_EXP 52
8666: ISECT
8667: PPUSH
8668: LD_INT 22
8670: PUSH
8671: LD_INT 2
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: PUSH
8678: LD_INT 26
8680: PUSH
8681: LD_INT 2
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: PPUSH
8692: CALL_OW 72
8696: PUSH
8697: LD_INT 1
8699: ARRAY
8700: PPUSH
8701: LD_STRING DArf-Med-e-4
8703: PPUSH
8704: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8708: LD_ADDR_VAR 0 1
8712: PUSH
8713: LD_EXP 46
8717: PPUSH
8718: CALL_OW 302
8722: PUSH
8723: LD_EXP 46
8727: PUSH
8728: LD_EXP 14
8732: IN
8733: AND
8734: PUSH
8735: LD_EXP 46
8739: PPUSH
8740: CALL_OW 255
8744: PUSH
8745: LD_INT 2
8747: EQUAL
8748: AND
8749: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8750: LD_EXP 43
8754: PPUSH
8755: CALL_OW 302
8759: PUSH
8760: LD_EXP 43
8764: PUSH
8765: LD_EXP 14
8769: IN
8770: AND
8771: PUSH
8772: LD_EXP 46
8776: PPUSH
8777: CALL_OW 255
8781: PUSH
8782: LD_INT 2
8784: EQUAL
8785: AND
8786: IFFALSE 8818
// begin Say ( Mike , DM-Med-5 ) ;
8788: LD_EXP 43
8792: PPUSH
8793: LD_STRING DM-Med-5
8795: PPUSH
8796: CALL_OW 88
// if hasKaia then
8800: LD_VAR 0 1
8804: IFFALSE 8818
// Say ( Kaia , DK-Med-6 ) ;
8806: LD_EXP 46
8810: PPUSH
8811: LD_STRING DK-Med-6
8813: PPUSH
8814: CALL_OW 88
// end ; if hasKaia then
8818: LD_VAR 0 1
8822: IFFALSE 9063
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8824: LD_INT 175
8826: PPUSH
8827: LD_INT 123
8829: PPUSH
8830: LD_INT 2
8832: PPUSH
8833: LD_INT 8
8835: NEG
8836: PPUSH
8837: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8841: LD_INT 175
8843: PPUSH
8844: LD_INT 123
8846: PPUSH
8847: LD_INT 2
8849: PPUSH
8850: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8854: LD_INT 175
8856: PPUSH
8857: LD_INT 123
8859: PPUSH
8860: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8864: LD_EXP 46
8868: PPUSH
8869: LD_STRING DK-Med-7
8871: PPUSH
8872: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8876: LD_EXP 46
8880: PPUSH
8881: LD_STRING DK-Med-8
8883: PPUSH
8884: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8888: LD_EXP 48
8892: PPUSH
8893: CALL_OW 302
8897: PUSH
8898: LD_EXP 48
8902: PUSH
8903: LD_EXP 14
8907: IN
8908: AND
8909: PUSH
8910: LD_EXP 48
8914: PPUSH
8915: CALL_OW 255
8919: PUSH
8920: LD_INT 2
8922: EQUAL
8923: AND
8924: IFFALSE 8982
// begin Say ( Markov , DMar-Med-9 ) ;
8926: LD_EXP 48
8930: PPUSH
8931: LD_STRING DMar-Med-9
8933: PPUSH
8934: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8938: LD_EXP 46
8942: PPUSH
8943: LD_STRING DK-Med-10
8945: PPUSH
8946: CALL_OW 88
// if hasGivi then
8950: LD_VAR 0 2
8954: IFFALSE 8970
// Say ( Kaia , DK-Med-11 ) else
8956: LD_EXP 46
8960: PPUSH
8961: LD_STRING DK-Med-11
8963: PPUSH
8964: CALL_OW 88
8968: GO 8982
// Say ( Kaia , DK-Med-a-11 ) ;
8970: LD_EXP 46
8974: PPUSH
8975: LD_STRING DK-Med-a-11
8977: PPUSH
8978: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8982: LD_EXP 45
8986: PPUSH
8987: CALL_OW 302
8991: PUSH
8992: LD_EXP 45
8996: PUSH
8997: LD_EXP 14
9001: IN
9002: AND
9003: PUSH
9004: LD_EXP 45
9008: PPUSH
9009: CALL_OW 255
9013: PUSH
9014: LD_INT 2
9016: EQUAL
9017: AND
9018: IFFALSE 9063
// begin Say ( Kamil , DKam-Med-12 ) ;
9020: LD_EXP 45
9024: PPUSH
9025: LD_STRING DKam-Med-12
9027: PPUSH
9028: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9032: LD_EXP 45
9036: PPUSH
9037: LD_STRING DKam-Med-13
9039: PPUSH
9040: CALL_OW 88
// if not hasExplosionCollected then
9044: LD_EXP 23
9048: NOT
9049: IFFALSE 9063
// Say ( Heike , DH-Med-d-14 ) ;
9051: LD_EXP 41
9055: PPUSH
9056: LD_STRING DH-Med-d-14
9058: PPUSH
9059: CALL_OW 88
// end ; end ; DialogueOff ;
9063: CALL_OW 7
// adminAreaDiscovered := true ;
9067: LD_ADDR_EXP 22
9071: PUSH
9072: LD_INT 1
9074: ST_TO_ADDR
// laundryAllowed := true ;
9075: LD_ADDR_EXP 26
9079: PUSH
9080: LD_INT 1
9082: ST_TO_ADDR
// end ;
9083: PPOPN 2
9085: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9086: LD_EXP 44
9090: NOT
9091: PUSH
9092: LD_EXP 51
9096: AND
9097: PUSH
9098: LD_EXP 51
9102: PUSH
9103: LD_EXP 14
9107: IN
9108: NOT
9109: AND
9110: PUSH
9111: LD_EXP 14
9115: PPUSH
9116: LD_INT 22
9118: PUSH
9119: LD_INT 2
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: PPUSH
9126: CALL_OW 72
9130: PUSH
9131: LD_INT 4
9133: GREATER
9134: AND
9135: PUSH
9136: LD_EXP 17
9140: NOT
9141: AND
9142: PUSH
9143: LD_EXP 30
9147: NOT
9148: AND
9149: IFFALSE 9866
9151: GO 9153
9153: DISABLE
9154: LD_INT 0
9156: PPUSH
9157: PPUSH
// begin DialogueOn ;
9158: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9162: LD_ADDR_VAR 0 1
9166: PUSH
9167: LD_EXP 42
9171: PPUSH
9172: CALL_OW 302
9176: PUSH
9177: LD_EXP 42
9181: PUSH
9182: LD_EXP 14
9186: IN
9187: AND
9188: PUSH
9189: LD_EXP 42
9193: PPUSH
9194: CALL_OW 255
9198: PUSH
9199: LD_INT 2
9201: EQUAL
9202: AND
9203: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9204: LD_EXP 41
9208: PPUSH
9209: LD_STRING DH-Med-a-1
9211: PPUSH
9212: CALL_OW 88
// if hasGivi then
9216: LD_VAR 0 1
9220: IFFALSE 9236
// Say ( Givi , DG-Med-a-2 ) else
9222: LD_EXP 42
9226: PPUSH
9227: LD_STRING DG-Med-a-2
9229: PPUSH
9230: CALL_OW 88
9234: GO 9341
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9236: LD_EXP 14
9240: PUSH
9241: LD_EXP 52
9245: ISECT
9246: PPUSH
9247: LD_INT 22
9249: PUSH
9250: LD_INT 2
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: PUSH
9257: LD_INT 26
9259: PUSH
9260: LD_INT 1
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PPUSH
9271: CALL_OW 72
9275: PUSH
9276: LD_INT 1
9278: ARRAY
9279: PPUSH
9280: LD_STRING DArm-Med-f-2
9282: PPUSH
9283: CALL_OW 88
9287: NOT
9288: IFFALSE 9341
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9290: LD_EXP 14
9294: PUSH
9295: LD_EXP 52
9299: ISECT
9300: PPUSH
9301: LD_INT 22
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: PUSH
9311: LD_INT 26
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: PUSH
9321: EMPTY
9322: LIST
9323: LIST
9324: PPUSH
9325: CALL_OW 72
9329: PUSH
9330: LD_INT 1
9332: ARRAY
9333: PPUSH
9334: LD_STRING DArf-Med-f-2
9336: PPUSH
9337: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9341: LD_INT 154
9343: PPUSH
9344: LD_INT 119
9346: PPUSH
9347: LD_INT 70
9349: PPUSH
9350: CALL 18983 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9354: LD_EXP 41
9358: PPUSH
9359: LD_STRING DH-Med-a-3
9361: PPUSH
9362: CALL_OW 88
// if hasGivi then
9366: LD_VAR 0 1
9370: IFFALSE 9386
// Say ( Givi , DG-Med-a-4 ) else
9372: LD_EXP 42
9376: PPUSH
9377: LD_STRING DG-Med-a-4
9379: PPUSH
9380: CALL_OW 88
9384: GO 9491
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9386: LD_EXP 14
9390: PUSH
9391: LD_EXP 52
9395: ISECT
9396: PPUSH
9397: LD_INT 22
9399: PUSH
9400: LD_INT 2
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 26
9409: PUSH
9410: LD_INT 1
9412: PUSH
9413: EMPTY
9414: LIST
9415: LIST
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: PPUSH
9421: CALL_OW 72
9425: PUSH
9426: LD_INT 1
9428: ARRAY
9429: PPUSH
9430: LD_STRING DArm-Med-f-4
9432: PPUSH
9433: CALL_OW 88
9437: NOT
9438: IFFALSE 9491
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9440: LD_EXP 14
9444: PUSH
9445: LD_EXP 52
9449: ISECT
9450: PPUSH
9451: LD_INT 22
9453: PUSH
9454: LD_INT 2
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 26
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: PPUSH
9475: CALL_OW 72
9479: PUSH
9480: LD_INT 1
9482: ARRAY
9483: PPUSH
9484: LD_STRING DArf-Med-f-4
9486: PPUSH
9487: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9491: LD_ADDR_VAR 0 2
9495: PUSH
9496: LD_EXP 46
9500: PPUSH
9501: CALL_OW 302
9505: PUSH
9506: LD_EXP 46
9510: PUSH
9511: LD_EXP 14
9515: IN
9516: AND
9517: PUSH
9518: LD_EXP 46
9522: PPUSH
9523: CALL_OW 255
9527: PUSH
9528: LD_INT 2
9530: EQUAL
9531: AND
9532: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9533: LD_EXP 43
9537: PPUSH
9538: CALL_OW 302
9542: PUSH
9543: LD_EXP 43
9547: PUSH
9548: LD_EXP 14
9552: IN
9553: AND
9554: PUSH
9555: LD_EXP 43
9559: PPUSH
9560: CALL_OW 255
9564: PUSH
9565: LD_INT 2
9567: EQUAL
9568: AND
9569: IFFALSE 9601
// begin Say ( Mike , DM-Med-5 ) ;
9571: LD_EXP 43
9575: PPUSH
9576: LD_STRING DM-Med-5
9578: PPUSH
9579: CALL_OW 88
// if hasKaia then
9583: LD_VAR 0 2
9587: IFFALSE 9601
// Say ( Kaia , DK-Med-6 ) ;
9589: LD_EXP 46
9593: PPUSH
9594: LD_STRING DK-Med-6
9596: PPUSH
9597: CALL_OW 88
// end ; if hasKaia then
9601: LD_VAR 0 2
9605: IFFALSE 9846
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9607: LD_INT 175
9609: PPUSH
9610: LD_INT 123
9612: PPUSH
9613: LD_INT 2
9615: PPUSH
9616: LD_INT 8
9618: NEG
9619: PPUSH
9620: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9624: LD_INT 175
9626: PPUSH
9627: LD_INT 123
9629: PPUSH
9630: LD_INT 2
9632: PPUSH
9633: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9637: LD_INT 175
9639: PPUSH
9640: LD_INT 123
9642: PPUSH
9643: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9647: LD_EXP 46
9651: PPUSH
9652: LD_STRING DK-Med-7
9654: PPUSH
9655: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9659: LD_EXP 46
9663: PPUSH
9664: LD_STRING DK-Med-8
9666: PPUSH
9667: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9671: LD_EXP 48
9675: PPUSH
9676: CALL_OW 302
9680: PUSH
9681: LD_EXP 48
9685: PUSH
9686: LD_EXP 14
9690: IN
9691: AND
9692: PUSH
9693: LD_EXP 48
9697: PPUSH
9698: CALL_OW 255
9702: PUSH
9703: LD_INT 2
9705: EQUAL
9706: AND
9707: IFFALSE 9765
// begin Say ( Markov , DMar-Med-9 ) ;
9709: LD_EXP 48
9713: PPUSH
9714: LD_STRING DMar-Med-9
9716: PPUSH
9717: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9721: LD_EXP 46
9725: PPUSH
9726: LD_STRING DK-Med-10
9728: PPUSH
9729: CALL_OW 88
// if hasGivi then
9733: LD_VAR 0 1
9737: IFFALSE 9753
// Say ( Kaia , DK-Med-11 ) else
9739: LD_EXP 46
9743: PPUSH
9744: LD_STRING DK-Med-11
9746: PPUSH
9747: CALL_OW 88
9751: GO 9765
// Say ( Kaia , DK-Med-a-11 ) ;
9753: LD_EXP 46
9757: PPUSH
9758: LD_STRING DK-Med-a-11
9760: PPUSH
9761: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9765: LD_EXP 45
9769: PPUSH
9770: CALL_OW 302
9774: PUSH
9775: LD_EXP 45
9779: PUSH
9780: LD_EXP 14
9784: IN
9785: AND
9786: PUSH
9787: LD_EXP 45
9791: PPUSH
9792: CALL_OW 255
9796: PUSH
9797: LD_INT 2
9799: EQUAL
9800: AND
9801: IFFALSE 9846
// begin Say ( Kamil , DKam-Med-12 ) ;
9803: LD_EXP 45
9807: PPUSH
9808: LD_STRING DKam-Med-12
9810: PPUSH
9811: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9815: LD_EXP 45
9819: PPUSH
9820: LD_STRING DKam-Med-13
9822: PPUSH
9823: CALL_OW 88
// if not hasExplosionCollected then
9827: LD_EXP 23
9831: NOT
9832: IFFALSE 9846
// Say ( Heike , DH-Med-d-14 ) ;
9834: LD_EXP 41
9838: PPUSH
9839: LD_STRING DH-Med-d-14
9841: PPUSH
9842: CALL_OW 88
// end ; end ; DialogueOff ;
9846: CALL_OW 7
// adminAreaDiscovered := true ;
9850: LD_ADDR_EXP 22
9854: PUSH
9855: LD_INT 1
9857: ST_TO_ADDR
// laundryAllowed := true ;
9858: LD_ADDR_EXP 26
9862: PUSH
9863: LD_INT 1
9865: ST_TO_ADDR
// end ;
9866: PPOPN 2
9868: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9869: LD_EXP 44
9873: PUSH
9874: LD_EXP 51
9878: NOT
9879: AND
9880: PUSH
9881: LD_EXP 44
9885: PUSH
9886: LD_EXP 14
9890: IN
9891: NOT
9892: AND
9893: PUSH
9894: LD_EXP 14
9898: PPUSH
9899: LD_INT 22
9901: PUSH
9902: LD_INT 2
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PPUSH
9909: CALL_OW 72
9913: PUSH
9914: LD_INT 4
9916: GREATER
9917: AND
9918: PUSH
9919: LD_EXP 17
9923: NOT
9924: AND
9925: PUSH
9926: LD_EXP 30
9930: NOT
9931: AND
9932: IFFALSE 10649
9934: GO 9936
9936: DISABLE
9937: LD_INT 0
9939: PPUSH
9940: PPUSH
// begin DialogueOn ;
9941: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9945: LD_ADDR_VAR 0 1
9949: PUSH
9950: LD_EXP 42
9954: PPUSH
9955: CALL_OW 302
9959: PUSH
9960: LD_EXP 42
9964: PUSH
9965: LD_EXP 14
9969: IN
9970: AND
9971: PUSH
9972: LD_EXP 42
9976: PPUSH
9977: CALL_OW 255
9981: PUSH
9982: LD_INT 2
9984: EQUAL
9985: AND
9986: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9987: LD_EXP 41
9991: PPUSH
9992: LD_STRING DH-Med-b-1
9994: PPUSH
9995: CALL_OW 88
// if hasGivi then
9999: LD_VAR 0 1
10003: IFFALSE 10019
// Say ( Givi , DG-Med-a-2 ) else
10005: LD_EXP 42
10009: PPUSH
10010: LD_STRING DG-Med-a-2
10012: PPUSH
10013: CALL_OW 88
10017: GO 10124
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10019: LD_EXP 14
10023: PUSH
10024: LD_EXP 52
10028: ISECT
10029: PPUSH
10030: LD_INT 22
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 26
10042: PUSH
10043: LD_INT 1
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PPUSH
10054: CALL_OW 72
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PPUSH
10063: LD_STRING DArm-Med-f-2
10065: PPUSH
10066: CALL_OW 88
10070: NOT
10071: IFFALSE 10124
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10073: LD_EXP 14
10077: PUSH
10078: LD_EXP 52
10082: ISECT
10083: PPUSH
10084: LD_INT 22
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 26
10096: PUSH
10097: LD_INT 2
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PPUSH
10108: CALL_OW 72
10112: PUSH
10113: LD_INT 1
10115: ARRAY
10116: PPUSH
10117: LD_STRING DArf-Med-f-2
10119: PPUSH
10120: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10124: LD_INT 154
10126: PPUSH
10127: LD_INT 119
10129: PPUSH
10130: LD_INT 70
10132: PPUSH
10133: CALL 18983 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10137: LD_EXP 41
10141: PPUSH
10142: LD_STRING DH-Med-a-3
10144: PPUSH
10145: CALL_OW 88
// if hasGivi then
10149: LD_VAR 0 1
10153: IFFALSE 10169
// Say ( Givi , DG-Med-a-4 ) else
10155: LD_EXP 42
10159: PPUSH
10160: LD_STRING DG-Med-a-4
10162: PPUSH
10163: CALL_OW 88
10167: GO 10274
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10169: LD_EXP 14
10173: PUSH
10174: LD_EXP 52
10178: ISECT
10179: PPUSH
10180: LD_INT 22
10182: PUSH
10183: LD_INT 2
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 26
10192: PUSH
10193: LD_INT 1
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PPUSH
10204: CALL_OW 72
10208: PUSH
10209: LD_INT 1
10211: ARRAY
10212: PPUSH
10213: LD_STRING DArm-Med-f-4
10215: PPUSH
10216: CALL_OW 88
10220: NOT
10221: IFFALSE 10274
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10223: LD_EXP 14
10227: PUSH
10228: LD_EXP 52
10232: ISECT
10233: PPUSH
10234: LD_INT 22
10236: PUSH
10237: LD_INT 2
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 26
10246: PUSH
10247: LD_INT 2
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PPUSH
10258: CALL_OW 72
10262: PUSH
10263: LD_INT 1
10265: ARRAY
10266: PPUSH
10267: LD_STRING DArf-Med-f-4
10269: PPUSH
10270: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10274: LD_ADDR_VAR 0 2
10278: PUSH
10279: LD_EXP 46
10283: PPUSH
10284: CALL_OW 302
10288: PUSH
10289: LD_EXP 46
10293: PUSH
10294: LD_EXP 14
10298: IN
10299: AND
10300: PUSH
10301: LD_EXP 46
10305: PPUSH
10306: CALL_OW 255
10310: PUSH
10311: LD_INT 2
10313: EQUAL
10314: AND
10315: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10316: LD_EXP 43
10320: PPUSH
10321: CALL_OW 302
10325: PUSH
10326: LD_EXP 43
10330: PUSH
10331: LD_EXP 14
10335: IN
10336: AND
10337: PUSH
10338: LD_EXP 43
10342: PPUSH
10343: CALL_OW 255
10347: PUSH
10348: LD_INT 2
10350: EQUAL
10351: AND
10352: IFFALSE 10384
// begin Say ( Mike , DM-Med-5 ) ;
10354: LD_EXP 43
10358: PPUSH
10359: LD_STRING DM-Med-5
10361: PPUSH
10362: CALL_OW 88
// if hasKaia then
10366: LD_VAR 0 2
10370: IFFALSE 10384
// Say ( Kaia , DK-Med-6 ) ;
10372: LD_EXP 46
10376: PPUSH
10377: LD_STRING DK-Med-6
10379: PPUSH
10380: CALL_OW 88
// end ; if hasKaia then
10384: LD_VAR 0 2
10388: IFFALSE 10629
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10390: LD_INT 175
10392: PPUSH
10393: LD_INT 123
10395: PPUSH
10396: LD_INT 2
10398: PPUSH
10399: LD_INT 8
10401: NEG
10402: PPUSH
10403: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10407: LD_INT 175
10409: PPUSH
10410: LD_INT 123
10412: PPUSH
10413: LD_INT 2
10415: PPUSH
10416: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10420: LD_INT 175
10422: PPUSH
10423: LD_INT 123
10425: PPUSH
10426: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10430: LD_EXP 46
10434: PPUSH
10435: LD_STRING DK-Med-7
10437: PPUSH
10438: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10442: LD_EXP 46
10446: PPUSH
10447: LD_STRING DK-Med-8
10449: PPUSH
10450: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10454: LD_EXP 48
10458: PPUSH
10459: CALL_OW 302
10463: PUSH
10464: LD_EXP 48
10468: PUSH
10469: LD_EXP 14
10473: IN
10474: AND
10475: PUSH
10476: LD_EXP 48
10480: PPUSH
10481: CALL_OW 255
10485: PUSH
10486: LD_INT 2
10488: EQUAL
10489: AND
10490: IFFALSE 10548
// begin Say ( Markov , DMar-Med-9 ) ;
10492: LD_EXP 48
10496: PPUSH
10497: LD_STRING DMar-Med-9
10499: PPUSH
10500: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10504: LD_EXP 46
10508: PPUSH
10509: LD_STRING DK-Med-10
10511: PPUSH
10512: CALL_OW 88
// if hasGivi then
10516: LD_VAR 0 1
10520: IFFALSE 10536
// Say ( Kaia , DK-Med-11 ) else
10522: LD_EXP 46
10526: PPUSH
10527: LD_STRING DK-Med-11
10529: PPUSH
10530: CALL_OW 88
10534: GO 10548
// Say ( Kaia , DK-Med-a-11 ) ;
10536: LD_EXP 46
10540: PPUSH
10541: LD_STRING DK-Med-a-11
10543: PPUSH
10544: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10548: LD_EXP 45
10552: PPUSH
10553: CALL_OW 302
10557: PUSH
10558: LD_EXP 45
10562: PUSH
10563: LD_EXP 14
10567: IN
10568: AND
10569: PUSH
10570: LD_EXP 45
10574: PPUSH
10575: CALL_OW 255
10579: PUSH
10580: LD_INT 2
10582: EQUAL
10583: AND
10584: IFFALSE 10629
// begin Say ( Kamil , DKam-Med-12 ) ;
10586: LD_EXP 45
10590: PPUSH
10591: LD_STRING DKam-Med-12
10593: PPUSH
10594: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10598: LD_EXP 45
10602: PPUSH
10603: LD_STRING DKam-Med-13
10605: PPUSH
10606: CALL_OW 88
// if not hasExplosionCollected then
10610: LD_EXP 23
10614: NOT
10615: IFFALSE 10629
// Say ( Heike , DH-Med-d-14 ) ;
10617: LD_EXP 41
10621: PPUSH
10622: LD_STRING DH-Med-d-14
10624: PPUSH
10625: CALL_OW 88
// end ; end ; DialogueOff ;
10629: CALL_OW 7
// adminAreaDiscovered := true ;
10633: LD_ADDR_EXP 22
10637: PUSH
10638: LD_INT 1
10640: ST_TO_ADDR
// laundryAllowed := true ;
10641: LD_ADDR_EXP 26
10645: PUSH
10646: LD_INT 1
10648: ST_TO_ADDR
// end ;
10649: PPOPN 2
10651: END
// every 0 0$1 trigger laundryAllowed do
10652: LD_EXP 26
10656: IFFALSE 10668
10658: GO 10660
10660: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10661: LD_STRING M1-laundry
10663: PPUSH
10664: CALL_OW 337
10668: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10669: LD_EXP 44
10673: NOT
10674: PUSH
10675: LD_EXP 51
10679: NOT
10680: AND
10681: PUSH
10682: LD_EXP 49
10686: PPUSH
10687: CALL_OW 302
10691: AND
10692: PUSH
10693: LD_EXP 49
10697: PUSH
10698: LD_EXP 14
10702: IN
10703: AND
10704: PUSH
10705: LD_EXP 49
10709: PPUSH
10710: CALL_OW 255
10714: PUSH
10715: LD_INT 2
10717: EQUAL
10718: AND
10719: PUSH
10720: LD_EXP 17
10724: NOT
10725: AND
10726: PUSH
10727: LD_EXP 30
10731: NOT
10732: AND
10733: IFFALSE 10889
10735: GO 10737
10737: DISABLE
// begin DialogueOn ;
10738: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10742: LD_INT 152
10744: PPUSH
10745: LD_INT 115
10747: PPUSH
10748: LD_INT 2
10750: PPUSH
10751: LD_INT 16
10753: NEG
10754: PPUSH
10755: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10759: LD_INT 152
10761: PPUSH
10762: LD_INT 115
10764: PPUSH
10765: LD_INT 2
10767: PPUSH
10768: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10772: LD_INT 152
10774: PPUSH
10775: LD_INT 115
10777: PPUSH
10778: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10782: LD_EXP 49
10786: PPUSH
10787: LD_STRING DO-Med-c-1
10789: PPUSH
10790: CALL_OW 88
// if not hasExplosionCollected then
10794: LD_EXP 23
10798: NOT
10799: IFFALSE 10815
// Say ( Heike , DH-Med-d-14 ) else
10801: LD_EXP 41
10805: PPUSH
10806: LD_STRING DH-Med-d-14
10808: PPUSH
10809: CALL_OW 88
10813: GO 10877
// begin Say ( Heike , DH-Med-c-2 ) ;
10815: LD_EXP 41
10819: PPUSH
10820: LD_STRING DH-Med-c-2
10822: PPUSH
10823: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10827: LD_EXP 46
10831: PPUSH
10832: CALL_OW 302
10836: PUSH
10837: LD_EXP 46
10841: PUSH
10842: LD_EXP 14
10846: IN
10847: AND
10848: PUSH
10849: LD_EXP 46
10853: PPUSH
10854: CALL_OW 255
10858: PUSH
10859: LD_INT 2
10861: EQUAL
10862: AND
10863: IFFALSE 10877
// Say ( Kaia , DK-Med-c-3 ) ;
10865: LD_EXP 46
10869: PPUSH
10870: LD_STRING DK-Med-c-3
10872: PPUSH
10873: CALL_OW 88
// end ; DialogueOff ;
10877: CALL_OW 7
// adminAreaDiscovered := true ;
10881: LD_ADDR_EXP 22
10885: PUSH
10886: LD_INT 1
10888: ST_TO_ADDR
// end ;
10889: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10890: LD_EXP 46
10894: PPUSH
10895: CALL_OW 256
10899: PUSH
10900: LD_INT 250
10902: LESS
10903: PUSH
10904: LD_EXP 46
10908: PUSH
10909: LD_EXP 14
10913: IN
10914: AND
10915: PUSH
10916: LD_EXP 17
10920: AND
10921: PUSH
10922: LD_EXP 24
10926: AND
10927: IFFALSE 11056
10929: GO 10931
10931: DISABLE
// begin DialogueOn ;
10932: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10936: LD_EXP 46
10940: PPUSH
10941: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10945: LD_EXP 46
10949: PPUSH
10950: LD_STRING DK-death-1
10952: PPUSH
10953: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10957: LD_EXP 41
10961: PPUSH
10962: LD_STRING DH-death-2
10964: PPUSH
10965: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10969: LD_EXP 46
10973: PPUSH
10974: LD_STRING DK-death-3
10976: PPUSH
10977: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10981: LD_EXP 46
10985: PPUSH
10986: LD_STRING DK-death-4
10988: PPUSH
10989: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10993: LD_EXP 46
10997: PPUSH
10998: LD_INT 8
11000: PPUSH
11001: CALL_OW 235
// ComStop ( Kaia ) ;
11005: LD_EXP 46
11009: PPUSH
11010: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11014: LD_INT 8
11016: PPUSH
11017: LD_INT 2
11019: PPUSH
11020: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11024: LD_ADDR_EXP 14
11028: PUSH
11029: LD_EXP 14
11033: PUSH
11034: LD_EXP 46
11038: DIFF
11039: ST_TO_ADDR
// DialogueOff ;
11040: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11044: LD_EXP 43
11048: PPUSH
11049: LD_STRING DM-death-5
11051: PPUSH
11052: CALL_OW 88
// end ;
11056: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11057: LD_EXP 25
11061: NOT
11062: PUSH
11063: LD_EXP 30
11067: NOT
11068: AND
11069: PUSH
11070: LD_EXP 54
11074: PUSH
11075: LD_EXP 14
11079: IN
11080: NOT
11081: AND
11082: PUSH
11083: LD_INT 2
11085: PPUSH
11086: LD_EXP 54
11090: PPUSH
11091: CALL_OW 292
11095: AND
11096: PUSH
11097: LD_EXP 41
11101: PPUSH
11102: LD_EXP 54
11106: PPUSH
11107: CALL_OW 296
11111: PUSH
11112: LD_INT 6
11114: LESS
11115: AND
11116: PUSH
11117: LD_EXP 17
11121: NOT
11122: AND
11123: IFFALSE 11347
11125: GO 11127
11127: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11128: LD_EXP 54
11132: PPUSH
11133: LD_EXP 41
11137: PPUSH
11138: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11142: LD_EXP 41
11146: PPUSH
11147: LD_EXP 54
11151: PPUSH
11152: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11156: LD_INT 10
11158: PPUSH
11159: CALL_OW 67
// DialogueOn ;
11163: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11167: LD_EXP 54
11171: PPUSH
11172: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11176: LD_EXP 41
11180: PPUSH
11181: LD_STRING DH-Deal-1
11183: PPUSH
11184: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11188: LD_EXP 54
11192: PPUSH
11193: LD_STRING DJ-Deal-2
11195: PPUSH
11196: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11200: LD_EXP 41
11204: PPUSH
11205: LD_STRING DH-Deal-3
11207: PPUSH
11208: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11212: LD_EXP 54
11216: PPUSH
11217: LD_STRING DJ-Deal-4
11219: PPUSH
11220: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11224: LD_EXP 54
11228: PPUSH
11229: LD_STRING DJ-Deal-5
11231: PPUSH
11232: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11236: LD_EXP 54
11240: PPUSH
11241: LD_STRING DJ-Deal-6
11243: PPUSH
11244: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11248: LD_EXP 54
11252: PPUSH
11253: LD_STRING DJ-Deal-7
11255: PPUSH
11256: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11260: LD_EXP 41
11264: PPUSH
11265: LD_STRING DH-Deal-8
11267: PPUSH
11268: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11272: LD_EXP 41
11276: PPUSH
11277: LD_STRING DH-Deal-9
11279: PPUSH
11280: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11284: LD_EXP 54
11288: PPUSH
11289: LD_STRING DJ-Deal-10
11291: PPUSH
11292: CALL_OW 88
// DialogueOff ;
11296: CALL_OW 7
// contactWithAmerican := true ;
11300: LD_ADDR_EXP 25
11304: PUSH
11305: LD_INT 1
11307: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11308: LD_STRING M1-american-out
11310: PPUSH
11311: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11315: LD_EXP 54
11319: PPUSH
11320: LD_INT 2
11322: PPUSH
11323: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11327: LD_ADDR_EXP 14
11331: PUSH
11332: LD_EXP 14
11336: PPUSH
11337: LD_EXP 54
11341: PPUSH
11342: CALL 64845 0 2
11346: ST_TO_ADDR
// end ;
11347: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11348: LD_EXP 25
11352: PUSH
11353: LD_EXP 30
11357: NOT
11358: AND
11359: PUSH
11360: LD_EXP 54
11364: PUSH
11365: LD_EXP 14
11369: IN
11370: NOT
11371: AND
11372: PUSH
11373: LD_INT 2
11375: PPUSH
11376: LD_EXP 54
11380: PPUSH
11381: CALL_OW 292
11385: AND
11386: PUSH
11387: LD_EXP 41
11391: PPUSH
11392: LD_EXP 54
11396: PPUSH
11397: CALL_OW 296
11401: PUSH
11402: LD_INT 6
11404: LESS
11405: AND
11406: PUSH
11407: LD_EXP 17
11411: NOT
11412: AND
11413: IFFALSE 11538
11415: GO 11417
11417: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11418: LD_EXP 54
11422: PPUSH
11423: LD_EXP 41
11427: PPUSH
11428: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11432: LD_EXP 41
11436: PPUSH
11437: LD_EXP 54
11441: PPUSH
11442: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11446: LD_INT 10
11448: PPUSH
11449: CALL_OW 67
// DialogueOn ;
11453: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11457: LD_EXP 54
11461: PPUSH
11462: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11466: LD_EXP 54
11470: PPUSH
11471: LD_STRING DJ-Escort-1
11473: PPUSH
11474: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11478: LD_EXP 41
11482: PPUSH
11483: LD_STRING DH-Escort-2
11485: PPUSH
11486: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11490: LD_EXP 54
11494: PPUSH
11495: LD_STRING DJ-Escort-3
11497: PPUSH
11498: CALL_OW 88
// DialogueOff ;
11502: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11506: LD_EXP 54
11510: PPUSH
11511: LD_INT 2
11513: PPUSH
11514: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11518: LD_ADDR_EXP 14
11522: PUSH
11523: LD_EXP 14
11527: PPUSH
11528: LD_EXP 54
11532: PPUSH
11533: CALL 64845 0 2
11537: ST_TO_ADDR
// end ;
11538: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11539: LD_EXP 25
11543: PUSH
11544: LD_EXP 30
11548: NOT
11549: AND
11550: PUSH
11551: LD_EXP 53
11555: PUSH
11556: LD_EXP 14
11560: DIFF
11561: PPUSH
11562: LD_INT 22
11564: PUSH
11565: LD_INT 4
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 3
11574: PUSH
11575: LD_INT 120
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 101
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: PPUSH
11604: CALL_OW 72
11608: AND
11609: PUSH
11610: LD_EXP 17
11614: NOT
11615: AND
11616: IFFALSE 11831
11618: GO 11620
11620: DISABLE
11621: LD_INT 0
11623: PPUSH
// begin enable ;
11624: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11625: LD_ADDR_VAR 0 1
11629: PUSH
11630: LD_EXP 53
11634: PUSH
11635: LD_EXP 14
11639: DIFF
11640: PPUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 4
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 91
11653: PUSH
11654: LD_EXP 41
11658: PUSH
11659: LD_INT 6
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: LIST
11666: PUSH
11667: LD_INT 101
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 72
11686: PPUSH
11687: LD_EXP 41
11691: PPUSH
11692: CALL_OW 74
11696: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11697: LD_VAR 0 1
11701: PPUSH
11702: LD_EXP 41
11706: PPUSH
11707: CALL_OW 296
11711: PUSH
11712: LD_INT 6
11714: LESS
11715: IFFALSE 11831
// begin DialogueOn ;
11717: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11721: LD_VAR 0 1
11725: PPUSH
11726: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11730: LD_EXP 41
11734: PPUSH
11735: LD_STRING DH-USsol-1
11737: PPUSH
11738: CALL_OW 88
// if GetSex ( un ) = sex_male then
11742: LD_VAR 0 1
11746: PPUSH
11747: CALL_OW 258
11751: PUSH
11752: LD_INT 1
11754: EQUAL
11755: IFFALSE 11771
// Say ( un , DUSM-USsol-2 ) else
11757: LD_VAR 0 1
11761: PPUSH
11762: LD_STRING DUSM-USsol-2
11764: PPUSH
11765: CALL_OW 88
11769: GO 11783
// Say ( un , DUSF-USsol-2 ) ;
11771: LD_VAR 0 1
11775: PPUSH
11776: LD_STRING DUSF-USsol-2
11778: PPUSH
11779: CALL_OW 88
// DialogueOff ;
11783: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11787: LD_ADDR_EXP 14
11791: PUSH
11792: LD_EXP 14
11796: PPUSH
11797: LD_VAR 0 1
11801: PPUSH
11802: CALL 64845 0 2
11806: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11807: LD_VAR 0 1
11811: PPUSH
11812: LD_INT 1
11814: PPUSH
11815: CALL_OW 109
// SetSide ( un , 2 ) ;
11819: LD_VAR 0 1
11823: PPUSH
11824: LD_INT 2
11826: PPUSH
11827: CALL_OW 235
// end ; end ;
11831: PPOPN 1
11833: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11834: LD_EXP 52
11838: PUSH
11839: LD_EXP 30
11843: NOT
11844: AND
11845: PUSH
11846: LD_EXP 52
11850: PUSH
11851: LD_EXP 14
11855: DIFF
11856: PPUSH
11857: LD_INT 3
11859: PUSH
11860: LD_INT 120
11862: PUSH
11863: LD_INT 1
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 91
11876: PUSH
11877: LD_EXP 41
11881: PUSH
11882: LD_INT 6
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 101
11892: PUSH
11893: LD_INT 2
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: LIST
11904: PPUSH
11905: CALL_OW 72
11909: AND
11910: PUSH
11911: LD_EXP 17
11915: NOT
11916: AND
11917: IFFALSE 12132
11919: GO 11921
11921: DISABLE
11922: LD_INT 0
11924: PPUSH
// begin enable ;
11925: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_EXP 52
11935: PUSH
11936: LD_EXP 14
11940: DIFF
11941: PPUSH
11942: LD_INT 22
11944: PUSH
11945: LD_INT 5
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 91
11954: PUSH
11955: LD_EXP 41
11959: PUSH
11960: LD_INT 6
11962: PUSH
11963: EMPTY
11964: LIST
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 101
11970: PUSH
11971: LD_INT 2
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: PPUSH
11983: CALL_OW 72
11987: PPUSH
11988: LD_EXP 41
11992: PPUSH
11993: CALL_OW 74
11997: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11998: LD_VAR 0 1
12002: PPUSH
12003: LD_EXP 41
12007: PPUSH
12008: CALL_OW 296
12012: PUSH
12013: LD_INT 6
12015: LESS
12016: IFFALSE 12132
// begin DialogueOn ;
12018: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12031: LD_EXP 41
12035: PPUSH
12036: LD_STRING DH-USsol-1
12038: PPUSH
12039: CALL_OW 88
// if GetSex ( un ) = sex_male then
12043: LD_VAR 0 1
12047: PPUSH
12048: CALL_OW 258
12052: PUSH
12053: LD_INT 1
12055: EQUAL
12056: IFFALSE 12072
// Say ( un , DArm-USsol-2 ) else
12058: LD_VAR 0 1
12062: PPUSH
12063: LD_STRING DArm-USsol-2
12065: PPUSH
12066: CALL_OW 88
12070: GO 12084
// Say ( un , DArf-USsol-3 ) ;
12072: LD_VAR 0 1
12076: PPUSH
12077: LD_STRING DArf-USsol-3
12079: PPUSH
12080: CALL_OW 88
// DialogueOff ;
12084: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12088: LD_ADDR_EXP 14
12092: PUSH
12093: LD_EXP 14
12097: PPUSH
12098: LD_VAR 0 1
12102: PPUSH
12103: CALL 64845 0 2
12107: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12108: LD_VAR 0 1
12112: PPUSH
12113: LD_INT 1
12115: PPUSH
12116: CALL_OW 109
// SetSide ( un , 2 ) ;
12120: LD_VAR 0 1
12124: PPUSH
12125: LD_INT 2
12127: PPUSH
12128: CALL_OW 235
// end ; end ;
12132: PPOPN 1
12134: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12135: LD_EXP 53
12139: PPUSH
12140: LD_INT 101
12142: PUSH
12143: LD_INT 2
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 72
12154: PUSH
12155: LD_EXP 14
12159: PPUSH
12160: LD_INT 22
12162: PUSH
12163: LD_INT 2
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 72
12174: PUSH
12175: LD_INT 5
12177: GREATER
12178: AND
12179: PUSH
12180: LD_EXP 10
12184: NOT
12185: AND
12186: PUSH
12187: LD_EXP 30
12191: NOT
12192: AND
12193: PUSH
12194: LD_EXP 25
12198: NOT
12199: AND
12200: PUSH
12201: LD_EXP 17
12205: NOT
12206: AND
12207: IFFALSE 12322
12209: GO 12211
12211: DISABLE
12212: LD_INT 0
12214: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12215: LD_ADDR_VAR 0 1
12219: PUSH
12220: LD_EXP 53
12224: PPUSH
12225: LD_INT 22
12227: PUSH
12228: LD_INT 4
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: LD_INT 101
12237: PUSH
12238: LD_INT 2
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PPUSH
12249: CALL_OW 72
12253: PUSH
12254: LD_INT 1
12256: ARRAY
12257: ST_TO_ADDR
// DialogueOn ;
12258: CALL_OW 6
// if GetSex ( un ) = sex_male then
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 258
12271: PUSH
12272: LD_INT 1
12274: EQUAL
12275: IFFALSE 12291
// Say ( un , DUSm-USsol-a-2 ) else
12277: LD_VAR 0 1
12281: PPUSH
12282: LD_STRING DUSm-USsol-a-2
12284: PPUSH
12285: CALL_OW 88
12289: GO 12303
// Say ( un , DUSf-USsol-a-2 ) ;
12291: LD_VAR 0 1
12295: PPUSH
12296: LD_STRING DUSf-USsol-a-2
12298: PPUSH
12299: CALL_OW 88
// DialogueOff ;
12303: CALL_OW 7
// wait ( 0 0$2 ) ;
12307: LD_INT 70
12309: PPUSH
12310: CALL_OW 67
// isAlarm := true ;
12314: LD_ADDR_EXP 17
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// end ;
12322: PPOPN 1
12324: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12325: LD_EXP 17
12329: NOT
12330: PUSH
12331: LD_EXP 42
12335: PPUSH
12336: CALL_OW 302
12340: AND
12341: PUSH
12342: LD_EXP 42
12346: PPUSH
12347: CALL_OW 255
12351: PUSH
12352: LD_INT 2
12354: EQUAL
12355: AND
12356: PUSH
12357: LD_EXP 26
12361: AND
12362: PUSH
12363: LD_EXP 28
12367: NOT
12368: AND
12369: PUSH
12370: LD_EXP 27
12374: NOT
12375: AND
12376: PUSH
12377: LD_EXP 30
12381: NOT
12382: AND
12383: PUSH
12384: LD_EXP 42
12388: PPUSH
12389: LD_INT 165
12391: PPUSH
12392: CALL 19022 0 2
12396: AND
12397: IFFALSE 12529
12399: GO 12401
12401: DISABLE
// begin enable ;
12402: ENABLE
// InGameOn ;
12403: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12407: LD_EXP 42
12411: PPUSH
12412: LD_INT 5
12414: PPUSH
12415: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12419: LD_INT 165
12421: PPUSH
12422: LD_INT 5
12424: PPUSH
12425: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12429: LD_EXP 42
12433: PPUSH
12434: LD_INT 165
12436: PPUSH
12437: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12441: LD_INT 35
12443: PPUSH
12444: CALL_OW 67
// until IsInUnit ( Givi ) ;
12448: LD_EXP 42
12452: PPUSH
12453: CALL_OW 310
12457: IFFALSE 12441
// case Query ( GiviInLaundry ) of 1 :
12459: LD_STRING GiviInLaundry
12461: PPUSH
12462: CALL_OW 97
12466: PUSH
12467: LD_INT 1
12469: DOUBLE
12470: EQUAL
12471: IFTRUE 12475
12473: GO 12482
12475: POP
// SpawnGiviAsRussian ; 2 :
12476: CALL 1870 0 0
12480: GO 12494
12482: LD_INT 2
12484: DOUBLE
12485: EQUAL
12486: IFTRUE 12490
12488: GO 12493
12490: POP
// ; end ;
12491: GO 12494
12493: POP
// ComExitBuilding ( Givi ) ;
12494: LD_EXP 42
12498: PPUSH
12499: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12503: LD_EXP 42
12507: PPUSH
12508: LD_INT 2
12510: PPUSH
12511: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12515: LD_INT 165
12517: PPUSH
12518: LD_INT 3
12520: PPUSH
12521: CALL_OW 235
// InGameOff ;
12525: CALL_OW 9
// end ;
12529: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12530: LD_EXP 17
12534: NOT
12535: PUSH
12536: LD_EXP 28
12540: AND
12541: PUSH
12542: LD_EXP 42
12546: PPUSH
12547: CALL_OW 255
12551: PUSH
12552: LD_INT 2
12554: EQUAL
12555: AND
12556: PUSH
12557: LD_EXP 42
12561: PPUSH
12562: CALL_OW 248
12566: PUSH
12567: LD_INT 3
12569: EQUAL
12570: AND
12571: PUSH
12572: LD_EXP 42
12576: PPUSH
12577: LD_INT 119
12579: PPUSH
12580: CALL 19022 0 2
12584: AND
12585: PUSH
12586: LD_EXP 30
12590: NOT
12591: AND
12592: IFFALSE 12816
12594: GO 12596
12596: DISABLE
// begin InGameOn ;
12597: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12601: LD_EXP 42
12605: PPUSH
12606: LD_INT 3
12608: PPUSH
12609: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12613: LD_EXP 42
12617: PPUSH
12618: LD_INT 119
12620: PPUSH
12621: CALL_OW 120
// wait ( 0 0$1 ) ;
12625: LD_INT 35
12627: PPUSH
12628: CALL_OW 67
// DialogueOn ;
12632: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12636: LD_EXP 42
12640: PPUSH
12641: LD_STRING DG-Captive-1
12643: PPUSH
12644: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12648: LD_EXP 60
12652: PPUSH
12653: LD_STRING DCom-Captive-2
12655: PPUSH
12656: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12660: LD_EXP 42
12664: PPUSH
12665: LD_STRING DG-Captive-3
12667: PPUSH
12668: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12672: LD_EXP 60
12676: PPUSH
12677: LD_STRING DCom-Captive-4
12679: PPUSH
12680: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12684: LD_EXP 60
12688: PPUSH
12689: CALL_OW 64
// DialogueOff ;
12693: CALL_OW 7
// InGameOff ;
12697: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12701: LD_EXP 42
12705: PPUSH
12706: LD_INT 2
12708: PPUSH
12709: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12713: LD_EXP 42
12717: PPUSH
12718: CALL_OW 122
// if Aviradze then
12722: LD_EXP 51
12726: IFFALSE 12769
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12728: LD_ADDR_EXP 14
12732: PUSH
12733: LD_EXP 14
12737: PPUSH
12738: LD_EXP 51
12742: PPUSH
12743: CALL 64845 0 2
12747: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12748: LD_EXP 51
12752: PPUSH
12753: LD_INT 2
12755: PPUSH
12756: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12760: LD_EXP 51
12764: PPUSH
12765: CALL_OW 122
// end ; if Ibrahim then
12769: LD_EXP 44
12773: IFFALSE 12816
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12775: LD_ADDR_EXP 14
12779: PUSH
12780: LD_EXP 14
12784: PPUSH
12785: LD_EXP 44
12789: PPUSH
12790: CALL 64845 0 2
12794: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12795: LD_EXP 44
12799: PPUSH
12800: LD_INT 2
12802: PPUSH
12803: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12807: LD_EXP 44
12811: PPUSH
12812: CALL_OW 122
// end ; end ;
12816: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12817: LD_EXP 17
12821: NOT
12822: PUSH
12823: LD_EXP 27
12827: AND
12828: PUSH
12829: LD_EXP 41
12833: PPUSH
12834: CALL_OW 248
12838: PUSH
12839: LD_INT 3
12841: EQUAL
12842: AND
12843: PUSH
12844: LD_EXP 41
12848: PPUSH
12849: LD_INT 119
12851: PPUSH
12852: CALL 19022 0 2
12856: AND
12857: PUSH
12858: LD_EXP 30
12862: NOT
12863: AND
12864: IFFALSE 13126
12866: GO 12868
12868: DISABLE
// begin InGameOn ;
12869: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12873: LD_EXP 41
12877: PPUSH
12878: LD_INT 3
12880: PPUSH
12881: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12885: LD_EXP 41
12889: PPUSH
12890: LD_INT 119
12892: PPUSH
12893: CALL_OW 120
// wait ( 0 0$1 ) ;
12897: LD_INT 35
12899: PPUSH
12900: CALL_OW 67
// DialogueOn ;
12904: CALL_OW 6
// if Aviradze and Ibrahim then
12908: LD_EXP 51
12912: PUSH
12913: LD_EXP 44
12917: AND
12918: IFFALSE 12934
// Say ( Heike , DH-Captive-a-1 ) else
12920: LD_EXP 41
12924: PPUSH
12925: LD_STRING DH-Captive-a-1
12927: PPUSH
12928: CALL_OW 88
12932: GO 12946
// Say ( Heike , DH-Captive-a-b-1 ) ;
12934: LD_EXP 41
12938: PPUSH
12939: LD_STRING DH-Captive-a-b-1
12941: PPUSH
12942: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12946: LD_EXP 60
12950: PPUSH
12951: LD_STRING DCom-Captive-a-2
12953: PPUSH
12954: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12958: LD_EXP 41
12962: PPUSH
12963: LD_STRING DH-Captive-a-3
12965: PPUSH
12966: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12970: LD_EXP 60
12974: PPUSH
12975: LD_STRING DCom-Captive-a-4
12977: PPUSH
12978: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12982: LD_EXP 41
12986: PPUSH
12987: LD_STRING DH-Captive-a-5
12989: PPUSH
12990: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12994: LD_EXP 60
12998: PPUSH
12999: CALL_OW 64
// DialogueOff ;
13003: CALL_OW 7
// InGameOff ;
13007: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13011: LD_EXP 41
13015: PPUSH
13016: LD_INT 2
13018: PPUSH
13019: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13023: LD_EXP 41
13027: PPUSH
13028: CALL_OW 122
// if Aviradze then
13032: LD_EXP 51
13036: IFFALSE 13079
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13038: LD_ADDR_EXP 14
13042: PUSH
13043: LD_EXP 14
13047: PPUSH
13048: LD_EXP 51
13052: PPUSH
13053: CALL 64845 0 2
13057: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13058: LD_EXP 51
13062: PPUSH
13063: LD_INT 2
13065: PPUSH
13066: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13070: LD_EXP 51
13074: PPUSH
13075: CALL_OW 122
// end ; if Ibrahim then
13079: LD_EXP 44
13083: IFFALSE 13126
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13085: LD_ADDR_EXP 14
13089: PUSH
13090: LD_EXP 14
13094: PPUSH
13095: LD_EXP 44
13099: PPUSH
13100: CALL 64845 0 2
13104: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13105: LD_EXP 44
13109: PPUSH
13110: LD_INT 2
13112: PPUSH
13113: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13117: LD_EXP 44
13121: PPUSH
13122: CALL_OW 122
// end ; end ;
13126: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13127: LD_INT 2
13129: PUSH
13130: LD_INT 25
13132: PUSH
13133: LD_INT 32
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 25
13142: PUSH
13143: LD_INT 34
13145: PUSH
13146: EMPTY
13147: LIST
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: IFFALSE 13171
13161: GO 13163
13163: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13164: LD_STRING M1-weapons-out
13166: PPUSH
13167: CALL_OW 604
13171: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13172: LD_INT 2
13174: PPUSH
13175: LD_EXP 56
13179: PPUSH
13180: CALL_OW 292
13184: PUSH
13185: LD_EXP 41
13189: PPUSH
13190: LD_EXP 56
13194: PPUSH
13195: CALL_OW 296
13199: AND
13200: PUSH
13201: LD_EXP 25
13205: NOT
13206: AND
13207: PUSH
13208: LD_EXP 17
13212: NOT
13213: AND
13214: PUSH
13215: LD_EXP 30
13219: NOT
13220: AND
13221: IFFALSE 13978
13223: GO 13225
13225: DISABLE
13226: LD_INT 0
13228: PPUSH
13229: PPUSH
// begin DialogueOn ;
13230: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13234: LD_EXP 56
13238: PPUSH
13239: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13243: LD_EXP 56
13247: PPUSH
13248: LD_STRING DJy-Food-1
13250: PPUSH
13251: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13255: LD_EXP 41
13259: PPUSH
13260: LD_STRING DH-Food-2
13262: PPUSH
13263: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13267: LD_EXP 56
13271: PPUSH
13272: LD_STRING DJy-Food-3
13274: PPUSH
13275: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13279: LD_EXP 56
13283: PPUSH
13284: LD_STRING DJy-Food-4
13286: PPUSH
13287: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13291: LD_EXP 41
13295: PPUSH
13296: LD_STRING DH-Food-5
13298: PPUSH
13299: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13303: LD_EXP 56
13307: PPUSH
13308: LD_STRING DJy-Food-6
13310: PPUSH
13311: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13315: LD_EXP 56
13319: PPUSH
13320: LD_STRING DJy-Food-7
13322: PPUSH
13323: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13327: LD_EXP 56
13331: PPUSH
13332: LD_STRING DJy-Food-8
13334: PPUSH
13335: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13339: LD_EXP 41
13343: PPUSH
13344: LD_STRING DH-Food-9
13346: PPUSH
13347: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13351: LD_EXP 56
13355: PPUSH
13356: LD_STRING DJy-Food-10
13358: PPUSH
13359: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13363: LD_EXP 41
13367: PPUSH
13368: LD_STRING DH-Food-11
13370: PPUSH
13371: CALL_OW 88
// DialogueOff ;
13375: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13379: LD_STRING M3
13381: PPUSH
13382: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13386: LD_INT 5
13388: PPUSH
13389: LD_INT 215
13391: PPUSH
13392: LD_INT 117
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13402: LD_INT 215
13404: PPUSH
13405: LD_INT 118
13407: PPUSH
13408: LD_INT 2
13410: PPUSH
13411: LD_INT 6
13413: NEG
13414: PPUSH
13415: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13419: LD_INT 215
13421: PPUSH
13422: LD_INT 118
13424: PPUSH
13425: LD_INT 2
13427: PPUSH
13428: CALL_OW 331
// foodDelivered := false ;
13432: LD_ADDR_VAR 0 2
13436: PUSH
13437: LD_INT 0
13439: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13440: LD_INT 35
13442: PPUSH
13443: CALL_OW 67
// if hasMuchin then
13447: LD_EXP 30
13451: IFFALSE 13455
// continue ;
13453: GO 13440
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13455: LD_ADDR_VAR 0 1
13459: PUSH
13460: LD_EXP 14
13464: PUSH
13465: LD_EXP 41
13469: UNION
13470: PPUSH
13471: LD_INT 91
13473: PUSH
13474: LD_EXP 56
13478: PUSH
13479: LD_INT 6
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 25
13489: PUSH
13490: LD_INT 33
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PPUSH
13501: CALL_OW 72
13505: PUSH
13506: FOR_IN
13507: IFFALSE 13707
// if Carry ( i ) then
13509: LD_VAR 0 1
13513: PPUSH
13514: CALL_OW 281
13518: IFFALSE 13705
// begin DialogueOn ;
13520: CALL_OW 6
// foodDelivered := true ;
13524: LD_ADDR_VAR 0 2
13528: PUSH
13529: LD_INT 1
13531: ST_TO_ADDR
// case i of Heike :
13532: LD_VAR 0 1
13536: PUSH
13537: LD_EXP 41
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13562
13547: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13548: LD_EXP 41
13552: PPUSH
13553: LD_STRING DH-Food-12
13555: PPUSH
13556: CALL_OW 88
13560: GO 13688
13562: LD_EXP 46
13566: DOUBLE
13567: EQUAL
13568: IFTRUE 13572
13570: GO 13587
13572: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13573: LD_EXP 46
13577: PPUSH
13578: LD_STRING DK-Food-a-12
13580: PPUSH
13581: CALL_OW 88
13585: GO 13688
13587: LD_EXP 48
13591: DOUBLE
13592: EQUAL
13593: IFTRUE 13597
13595: GO 13612
13597: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13598: LD_EXP 48
13602: PPUSH
13603: LD_STRING DMar-Food-a-12
13605: PPUSH
13606: CALL_OW 88
13610: GO 13688
13612: LD_EXP 42
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13637
13622: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13623: LD_EXP 42
13627: PPUSH
13628: LD_STRING DG-Food-a-14
13630: PPUSH
13631: CALL_OW 88
13635: GO 13688
13637: LD_EXP 43
13641: DOUBLE
13642: EQUAL
13643: IFTRUE 13647
13645: GO 13662
13647: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13648: LD_EXP 43
13652: PPUSH
13653: LD_STRING DM-Food-a-15
13655: PPUSH
13656: CALL_OW 88
13660: GO 13688
13662: LD_EXP 45
13666: DOUBLE
13667: EQUAL
13668: IFTRUE 13672
13670: GO 13687
13672: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13673: LD_EXP 45
13677: PPUSH
13678: LD_STRING DKam-Food-a-16
13680: PPUSH
13681: CALL_OW 88
13685: GO 13688
13687: POP
// SetCargo ( i , mat_cans , 0 ) ;
13688: LD_VAR 0 1
13692: PPUSH
13693: LD_INT 1
13695: PPUSH
13696: LD_INT 0
13698: PPUSH
13699: CALL_OW 290
// break ;
13703: GO 13707
// end ;
13705: GO 13506
13707: POP
13708: POP
// until foodDelivered ;
13709: LD_VAR 0 2
13713: IFFALSE 13440
// givenFood := true ;
13715: LD_ADDR_EXP 33
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13723: LD_EXP 56
13727: PPUSH
13728: LD_STRING DJy-Food-13
13730: PPUSH
13731: CALL_OW 88
// hasVirus := true ;
13735: LD_ADDR_EXP 31
13739: PUSH
13740: LD_INT 1
13742: ST_TO_ADDR
// if not americanContact then
13743: LD_EXP 10
13747: NOT
13748: IFFALSE 13798
// begin Say ( Heike , DH-Food-14 ) ;
13750: LD_EXP 41
13754: PPUSH
13755: LD_STRING DH-Food-14
13757: PPUSH
13758: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13762: LD_EXP 56
13766: PPUSH
13767: LD_STRING DJy-Food-15
13769: PPUSH
13770: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13774: LD_EXP 56
13778: PPUSH
13779: LD_STRING DJy-Food-16
13781: PPUSH
13782: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13786: LD_EXP 56
13790: PPUSH
13791: LD_STRING DJy-Food-17
13793: PPUSH
13794: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13798: LD_STRING M3-out
13800: PPUSH
13801: CALL_OW 337
// DialogueOff ;
13805: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13809: LD_EXP 56
13813: PPUSH
13814: LD_INT 1
13816: PPUSH
13817: LD_INT 10
13819: PPUSH
13820: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13824: LD_EXP 56
13828: PPUSH
13829: LD_INT 95
13831: PPUSH
13832: LD_INT 17
13834: PPUSH
13835: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13839: LD_INT 35
13841: PPUSH
13842: CALL_OW 67
// if not HasTask ( Jerry ) then
13846: LD_EXP 56
13850: PPUSH
13851: CALL_OW 314
13855: NOT
13856: IFFALSE 13873
// ComMoveXY ( Jerry , 95 , 17 ) ;
13858: LD_EXP 56
13862: PPUSH
13863: LD_INT 95
13865: PPUSH
13866: LD_INT 17
13868: PPUSH
13869: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13873: LD_EXP 56
13877: PPUSH
13878: LD_INT 95
13880: PPUSH
13881: LD_INT 17
13883: PPUSH
13884: CALL_OW 307
13888: IFFALSE 13839
// SetCargo ( Jerry , mat_cans , 0 ) ;
13890: LD_EXP 56
13894: PPUSH
13895: LD_INT 1
13897: PPUSH
13898: LD_INT 0
13900: PPUSH
13901: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13905: LD_ADDR_EXP 53
13909: PUSH
13910: LD_EXP 53
13914: PPUSH
13915: LD_EXP 56
13919: PPUSH
13920: CALL 64845 0 2
13924: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13925: LD_ADDR_VAR 0 1
13929: PUSH
13930: LD_INT 22
13932: PUSH
13933: LD_INT 4
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: LD_INT 23
13942: PUSH
13943: LD_INT 1
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PPUSH
13954: CALL_OW 69
13958: PUSH
13959: FOR_IN
13960: IFFALSE 13976
// SetLives ( i , 1000 ) ;
13962: LD_VAR 0 1
13966: PPUSH
13967: LD_INT 1000
13969: PPUSH
13970: CALL_OW 234
13974: GO 13959
13976: POP
13977: POP
// end ;
13978: PPOPN 2
13980: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
13981: LD_EXP 30
13985: NOT
13986: PUSH
13987: LD_EXP 6
13991: AND
13992: IFFALSE 14423
13994: GO 13996
13996: DISABLE
13997: LD_INT 0
13999: PPUSH
14000: PPUSH
// begin tmp := [ ] ;
14001: LD_ADDR_VAR 0 2
14005: PUSH
14006: EMPTY
14007: ST_TO_ADDR
// uc_side := 3 ;
14008: LD_ADDR_OWVAR 20
14012: PUSH
14013: LD_INT 3
14015: ST_TO_ADDR
// uc_nation := 3 ;
14016: LD_ADDR_OWVAR 21
14020: PUSH
14021: LD_INT 3
14023: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14024: LD_INT 1
14026: PPUSH
14027: LD_INT 8
14029: PPUSH
14030: CALL_OW 381
// un := CreateHuman ;
14034: LD_ADDR_VAR 0 1
14038: PUSH
14039: CALL_OW 44
14043: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14044: LD_VAR 0 1
14048: PPUSH
14049: LD_INT 173
14051: PPUSH
14052: LD_INT 104
14054: PPUSH
14055: LD_INT 0
14057: PPUSH
14058: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14062: LD_ADDR_VAR 0 2
14066: PUSH
14067: LD_VAR 0 2
14071: PPUSH
14072: LD_VAR 0 1
14076: PPUSH
14077: CALL 64845 0 2
14081: ST_TO_ADDR
// un := CreateHuman ;
14082: LD_ADDR_VAR 0 1
14086: PUSH
14087: CALL_OW 44
14091: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14092: LD_VAR 0 1
14096: PPUSH
14097: LD_INT 73
14099: PPUSH
14100: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14104: LD_ADDR_VAR 0 2
14108: PUSH
14109: LD_VAR 0 2
14113: PPUSH
14114: LD_VAR 0 1
14118: PPUSH
14119: CALL 64845 0 2
14123: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14124: LD_INT 35
14126: PPUSH
14127: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
14131: LD_EXP 46
14135: PPUSH
14136: CALL_OW 255
14140: PUSH
14141: LD_INT 2
14143: EQUAL
14144: PUSH
14145: LD_EXP 46
14149: PPUSH
14150: LD_INT 73
14152: PPUSH
14153: CALL_OW 296
14157: PUSH
14158: LD_INT 8
14160: LESS
14161: AND
14162: PUSH
14163: LD_VAR 0 2
14167: PPUSH
14168: LD_INT 101
14170: PUSH
14171: LD_INT 2
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 72
14182: AND
14183: IFFALSE 14124
// InGameOn ;
14185: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14189: LD_INT 73
14191: PPUSH
14192: CALL_OW 250
14196: PPUSH
14197: LD_INT 73
14199: PPUSH
14200: CALL_OW 251
14204: PPUSH
14205: LD_INT 2
14207: PPUSH
14208: LD_INT 9
14210: NEG
14211: PPUSH
14212: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14216: LD_INT 73
14218: PPUSH
14219: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14223: LD_EXP 46
14227: PPUSH
14228: LD_INT 73
14230: PPUSH
14231: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14235: LD_EXP 46
14239: PPUSH
14240: LD_STRING DK-Plastic-1
14242: PPUSH
14243: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14247: LD_EXP 46
14251: PPUSH
14252: LD_STRING DK-Plastic-2
14254: PPUSH
14255: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14259: LD_EXP 46
14263: PPUSH
14264: LD_INT 73
14266: PPUSH
14267: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14271: LD_INT 35
14273: PPUSH
14274: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
14278: LD_EXP 46
14282: PPUSH
14283: LD_INT 73
14285: PPUSH
14286: CALL_OW 296
14290: PUSH
14291: LD_INT 6
14293: LESS
14294: IFFALSE 14271
// ComHold ( Kaia ) ;
14296: LD_EXP 46
14300: PPUSH
14301: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14305: LD_VAR 0 2
14309: PUSH
14310: LD_INT 1
14312: ARRAY
14313: PPUSH
14314: LD_STRING DRum-Plastic-3
14316: PPUSH
14317: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14321: LD_VAR 0 2
14325: PUSH
14326: LD_INT 2
14328: ARRAY
14329: PPUSH
14330: LD_STRING DRum2-Plastic-4
14332: PPUSH
14333: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14337: LD_VAR 0 2
14341: PUSH
14342: LD_INT 1
14344: ARRAY
14345: PPUSH
14346: LD_STRING DRum-Plastic-5
14348: PPUSH
14349: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14353: LD_VAR 0 2
14357: PUSH
14358: LD_INT 2
14360: ARRAY
14361: PPUSH
14362: LD_STRING DRum2-Plastic-6
14364: PPUSH
14365: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14369: LD_EXP 46
14373: PPUSH
14374: LD_STRING DK-Plastic-7
14376: PPUSH
14377: CALL_OW 88
// InGameOff ;
14381: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14385: LD_INT 73
14387: PPUSH
14388: CALL_OW 250
14392: PPUSH
14393: LD_INT 73
14395: PPUSH
14396: CALL_OW 251
14400: PPUSH
14401: LD_INT 2
14403: PPUSH
14404: CALL_OW 331
// explosionsTakenByRussians := true ;
14408: LD_ADDR_EXP 21
14412: PUSH
14413: LD_INT 1
14415: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14416: LD_STRING ExplosivesInfo
14418: PPUSH
14419: CALL_OW 97
// end ;
14423: PPOPN 2
14425: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
14426: LD_EXP 21
14430: PUSH
14431: LD_EXP 46
14435: PPUSH
14436: CALL_OW 255
14440: PUSH
14441: LD_INT 2
14443: EQUAL
14444: AND
14445: PUSH
14446: LD_EXP 46
14450: PPUSH
14451: LD_INT 61
14453: PPUSH
14454: CALL 19022 0 2
14458: AND
14459: PUSH
14460: LD_EXP 17
14464: NOT
14465: AND
14466: PUSH
14467: LD_EXP 30
14471: NOT
14472: AND
14473: IFFALSE 14629
14475: GO 14477
14477: DISABLE
// begin InGameOn ;
14478: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14482: LD_INT 61
14484: PPUSH
14485: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14489: LD_EXP 46
14493: PPUSH
14494: LD_INT 3
14496: PPUSH
14497: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14501: LD_EXP 46
14505: PPUSH
14506: LD_INT 61
14508: PPUSH
14509: CALL_OW 120
// wait ( 0 0$2 ) ;
14513: LD_INT 70
14515: PPUSH
14516: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14520: LD_EXP 46
14524: PPUSH
14525: LD_STRING DK-Plastic-8
14527: PPUSH
14528: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14532: LD_EXP 62
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_STRING DRuMch-Plastic-9
14543: PPUSH
14544: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14548: LD_EXP 46
14552: PPUSH
14553: LD_STRING DK-Plastic-10
14555: PPUSH
14556: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14560: LD_EXP 62
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: LD_STRING DRuMch-Plastic-a-11
14571: PPUSH
14572: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14576: LD_EXP 46
14580: PPUSH
14581: LD_STRING DK-Plastic-a-12
14583: PPUSH
14584: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14588: LD_EXP 62
14592: PUSH
14593: LD_INT 1
14595: ARRAY
14596: PPUSH
14597: LD_STRING DRuMch-Plastic-a-13
14599: PPUSH
14600: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14604: LD_EXP 46
14608: PPUSH
14609: LD_INT 2
14611: PPUSH
14612: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14616: LD_EXP 46
14620: PPUSH
14621: CALL_OW 122
// InGameOff ;
14625: CALL_OW 9
// end ;
14629: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14630: LD_EXP 21
14634: PUSH
14635: LD_EXP 46
14639: PPUSH
14640: CALL_OW 255
14644: PUSH
14645: LD_INT 2
14647: EQUAL
14648: AND
14649: PUSH
14650: LD_EXP 46
14654: PPUSH
14655: LD_INT 196
14657: PPUSH
14658: CALL 19022 0 2
14662: AND
14663: PUSH
14664: LD_EXP 17
14668: NOT
14669: AND
14670: PUSH
14671: LD_EXP 30
14675: NOT
14676: AND
14677: IFFALSE 15009
14679: GO 14681
14681: DISABLE
// begin InGameOn ;
14682: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14686: LD_INT 196
14688: PPUSH
14689: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14693: LD_EXP 46
14697: PPUSH
14698: LD_INT 3
14700: PPUSH
14701: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14705: LD_EXP 46
14709: PPUSH
14710: LD_INT 196
14712: PPUSH
14713: CALL_OW 120
// wait ( 0 0$2 ) ;
14717: LD_INT 70
14719: PPUSH
14720: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14724: LD_EXP 46
14728: PPUSH
14729: LD_STRING DK-Plastic-8
14731: PPUSH
14732: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14736: LD_EXP 63
14740: PUSH
14741: LD_INT 1
14743: ARRAY
14744: PPUSH
14745: LD_STRING DRuMch-Plastic-9
14747: PPUSH
14748: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14752: LD_EXP 46
14756: PPUSH
14757: LD_STRING DK-Plastic-10
14759: PPUSH
14760: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14764: LD_EXP 63
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: LD_STRING DRuMch-Plastic-11
14775: PPUSH
14776: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14780: LD_EXP 46
14784: PPUSH
14785: LD_STRING DK-Plastic-12
14787: PPUSH
14788: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14792: LD_EXP 46
14796: PPUSH
14797: LD_STRING DK-Plastic-13
14799: PPUSH
14800: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14804: LD_EXP 63
14808: PUSH
14809: LD_INT 1
14811: ARRAY
14812: PPUSH
14813: LD_STRING DRuMch-Plastic-14
14815: PPUSH
14816: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
14820: LD_EXP 64
14824: PPUSH
14825: LD_INT 167
14827: PPUSH
14828: LD_INT 34
14830: PPUSH
14831: LD_INT 3
14833: PPUSH
14834: LD_INT 0
14836: PPUSH
14837: CALL 66985 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14841: LD_EXP 64
14845: PPUSH
14846: LD_INT 196
14848: PPUSH
14849: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
14853: LD_INT 35
14855: PPUSH
14856: CALL_OW 67
// if not HasTask ( Stiopa ) then
14860: LD_EXP 64
14864: PPUSH
14865: CALL_OW 314
14869: NOT
14870: IFFALSE 14884
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14872: LD_EXP 64
14876: PPUSH
14877: LD_INT 196
14879: PPUSH
14880: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14884: LD_EXP 64
14888: PPUSH
14889: CALL_OW 310
14893: IFFALSE 14853
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14895: LD_EXP 64
14899: PPUSH
14900: LD_STRING DSpn-Plastic-15
14902: PPUSH
14903: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14907: LD_EXP 65
14911: PPUSH
14912: LD_STRING DLr-Plastic-16
14914: PPUSH
14915: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14919: LD_EXP 46
14923: PPUSH
14924: LD_STRING DK-Plastic-17
14926: PPUSH
14927: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14931: LD_INT 10
14933: PPUSH
14934: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14938: LD_EXP 46
14942: PPUSH
14943: LD_INT 2
14945: PPUSH
14946: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14950: LD_EXP 46
14954: PPUSH
14955: CALL_OW 122
// InGameOff ;
14959: CALL_OW 9
// explosionsTakenByRussians := false ;
14963: LD_ADDR_EXP 21
14967: PUSH
14968: LD_INT 0
14970: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14971: LD_INT 170
14973: PPUSH
14974: LD_INT 28
14976: PPUSH
14977: LD_INT 2
14979: PPUSH
14980: LD_INT 6
14982: NEG
14983: PPUSH
14984: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14988: LD_INT 170
14990: PPUSH
14991: LD_INT 28
14993: PPUSH
14994: LD_INT 2
14996: PPUSH
14997: CALL_OW 331
// knowWhereExplosivesAre := true ;
15001: LD_ADDR_EXP 34
15005: PUSH
15006: LD_INT 1
15008: ST_TO_ADDR
// end ;
15009: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15010: LD_EXP 34
15014: PUSH
15015: LD_EXP 46
15019: PPUSH
15020: CALL_OW 255
15024: PUSH
15025: LD_INT 2
15027: EQUAL
15028: AND
15029: PUSH
15030: LD_EXP 46
15034: PPUSH
15035: LD_INT 195
15037: PPUSH
15038: CALL 19022 0 2
15042: AND
15043: PUSH
15044: LD_EXP 17
15048: NOT
15049: AND
15050: PUSH
15051: LD_EXP 30
15055: NOT
15056: AND
15057: IFFALSE 15156
15059: GO 15061
15061: DISABLE
// begin InGameOn ;
15062: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15066: LD_EXP 46
15070: PPUSH
15071: LD_INT 3
15073: PPUSH
15074: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15078: LD_EXP 46
15082: PPUSH
15083: LD_INT 195
15085: PPUSH
15086: CALL_OW 120
// wait ( 0 0$1 ) ;
15090: LD_INT 35
15092: PPUSH
15093: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15097: LD_EXP 46
15101: PPUSH
15102: LD_STRING DK-Plastic-18
15104: PPUSH
15105: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15109: LD_STRING ExplosivesInfoUsage
15111: PPUSH
15112: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
15116: LD_EXP 46
15120: PPUSH
15121: LD_INT 2
15123: PPUSH
15124: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15128: LD_EXP 46
15132: PPUSH
15133: CALL_OW 122
// InGameOff ;
15137: CALL_OW 9
// hasExplosionCollected := true ;
15141: LD_ADDR_EXP 23
15145: PUSH
15146: LD_INT 1
15148: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15149: LD_STRING M1-explosive-out
15151: PPUSH
15152: CALL_OW 337
// end ;
15156: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15157: LD_EXP 23
15161: PUSH
15162: LD_EXP 17
15166: NOT
15167: AND
15168: PUSH
15169: LD_EXP 30
15173: NOT
15174: AND
15175: IFFALSE 15350
15177: GO 15179
15179: DISABLE
15180: LD_INT 0
15182: PPUSH
15183: PPUSH
// begin for i in importantBuildingsList do
15184: LD_ADDR_VAR 0 1
15188: PUSH
15189: LD_EXP 35
15193: PUSH
15194: FOR_IN
15195: IFFALSE 15211
// MarkBuilding ( i , true ) ;
15197: LD_VAR 0 1
15201: PPUSH
15202: LD_INT 1
15204: PPUSH
15205: CALL 19396 0 2
15209: GO 15194
15211: POP
15212: POP
// repeat wait ( 0 0$1 ) ;
15213: LD_INT 35
15215: PPUSH
15216: CALL_OW 67
// for i in importantBuildingsList do
15220: LD_ADDR_VAR 0 1
15224: PUSH
15225: LD_EXP 35
15229: PUSH
15230: FOR_IN
15231: IFFALSE 15341
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15233: LD_EXP 41
15237: PUSH
15238: LD_EXP 14
15242: UNION
15243: PPUSH
15244: LD_INT 22
15246: PUSH
15247: LD_INT 2
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: LD_INT 21
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 91
15266: PUSH
15267: LD_VAR 0 1
15271: PUSH
15272: LD_INT 6
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: PPUSH
15285: CALL_OW 72
15289: IFFALSE 15339
// begin CenterNowOnUnits ( i ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: CALL_OW 87
// PlaceExplosives ( i ) ;
15300: LD_VAR 0 1
15304: PPUSH
15305: CALL 19293 0 1
// MarkBuilding ( i , false ) ;
15309: LD_VAR 0 1
15313: PPUSH
15314: LD_INT 0
15316: PPUSH
15317: CALL 19396 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15321: LD_ADDR_EXP 35
15325: PUSH
15326: LD_EXP 35
15330: PUSH
15331: LD_VAR 0 1
15335: DIFF
15336: ST_TO_ADDR
// continue ;
15337: GO 15230
// end ; end ;
15339: GO 15230
15341: POP
15342: POP
// until not importantBuildingsList ;
15343: LD_EXP 35
15347: NOT
15348: IFFALSE 15213
// end ;
15350: PPOPN 2
15352: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15353: LD_EXP 14
15357: PPUSH
15358: LD_INT 22
15360: PUSH
15361: LD_INT 2
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 95
15370: PUSH
15371: LD_INT 23
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 72
15386: PUSH
15387: LD_EXP 41
15391: PPUSH
15392: CALL_OW 302
15396: AND
15397: PUSH
15398: LD_EXP 30
15402: NOT
15403: AND
15404: IFFALSE 15432
15406: GO 15408
15408: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15409: LD_EXP 41
15413: PPUSH
15414: LD_STRING DH-End-1
15416: PPUSH
15417: CALL_OW 88
// if not activeExplosives then
15421: LD_EXP 36
15425: NOT
15426: IFFALSE 15432
// Explode ;
15428: CALL 21937 0 0
// end ;
15432: END
// function SayHEmpty ( ) ; begin
15433: LD_INT 0
15435: PPUSH
// case rand ( 1 , 3 ) of 1 :
15436: LD_INT 1
15438: PPUSH
15439: LD_INT 3
15441: PPUSH
15442: CALL_OW 12
15446: PUSH
15447: LD_INT 1
15449: DOUBLE
15450: EQUAL
15451: IFTRUE 15455
15453: GO 15470
15455: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15456: LD_EXP 41
15460: PPUSH
15461: LD_STRING DH-Empty-1
15463: PPUSH
15464: CALL_OW 88
15468: GO 15517
15470: LD_INT 2
15472: DOUBLE
15473: EQUAL
15474: IFTRUE 15478
15476: GO 15493
15478: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15479: LD_EXP 41
15483: PPUSH
15484: LD_STRING DH-Empty-2
15486: PPUSH
15487: CALL_OW 88
15491: GO 15517
15493: LD_INT 3
15495: DOUBLE
15496: EQUAL
15497: IFTRUE 15501
15499: GO 15516
15501: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15502: LD_EXP 41
15506: PPUSH
15507: LD_STRING DH-Empty-3
15509: PPUSH
15510: CALL_OW 88
15514: GO 15517
15516: POP
// end ;
15517: LD_VAR 0 1
15521: RET
// function SayHVisited ( ) ; begin
15522: LD_INT 0
15524: PPUSH
// case rand ( 1 , 3 ) of 1 :
15525: LD_INT 1
15527: PPUSH
15528: LD_INT 3
15530: PPUSH
15531: CALL_OW 12
15535: PUSH
15536: LD_INT 1
15538: DOUBLE
15539: EQUAL
15540: IFTRUE 15544
15542: GO 15559
15544: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15545: LD_EXP 41
15549: PPUSH
15550: LD_STRING DH-Visited-1
15552: PPUSH
15553: CALL_OW 88
15557: GO 15606
15559: LD_INT 2
15561: DOUBLE
15562: EQUAL
15563: IFTRUE 15567
15565: GO 15582
15567: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15568: LD_EXP 41
15572: PPUSH
15573: LD_STRING DH-Visited-2
15575: PPUSH
15576: CALL_OW 88
15580: GO 15606
15582: LD_INT 3
15584: DOUBLE
15585: EQUAL
15586: IFTRUE 15590
15588: GO 15605
15590: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15591: LD_EXP 41
15595: PPUSH
15596: LD_STRING DH-Visited-3
15598: PPUSH
15599: CALL_OW 88
15603: GO 15606
15605: POP
// end ;
15606: LD_VAR 0 1
15610: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15611: LD_EXP 17
15615: NOT
15616: PUSH
15617: LD_EXP 15
15621: AND
15622: PUSH
15623: LD_EXP 41
15627: PPUSH
15628: CALL_OW 255
15632: PUSH
15633: LD_INT 2
15635: EQUAL
15636: AND
15637: PUSH
15638: LD_EXP 41
15642: PPUSH
15643: CALL_OW 302
15647: AND
15648: PUSH
15649: LD_EXP 41
15653: PPUSH
15654: CALL_OW 316
15658: AND
15659: PUSH
15660: LD_EXP 30
15664: NOT
15665: AND
15666: IFFALSE 15732
15668: GO 15670
15670: DISABLE
15671: LD_INT 0
15673: PPUSH
// begin enable ;
15674: ENABLE
// for i in entranceAllowedList do
15675: LD_ADDR_VAR 0 1
15679: PUSH
15680: LD_EXP 15
15684: PUSH
15685: FOR_IN
15686: IFFALSE 15730
// if InEntrance ( Heike , i ) then
15688: LD_EXP 41
15692: PPUSH
15693: LD_VAR 0 1
15697: PPUSH
15698: CALL 19022 0 2
15702: IFFALSE 15728
// begin disable ( entranceEvent ) ;
15704: LD_INT 1
15706: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: CALL 15735 0 1
// wait ( 0 0$3 ) ;
15716: LD_INT 105
15718: PPUSH
15719: CALL_OW 67
// enable ( entranceEvent ) ;
15723: LD_INT 1
15725: ENABLE_MARKED
// break ;
15726: GO 15730
// end ;
15728: GO 15685
15730: POP
15731: POP
// end ;
15732: PPOPN 1
15734: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
15735: LD_INT 0
15737: PPUSH
15738: PPUSH
15739: PPUSH
15740: PPUSH
// if not building then
15741: LD_VAR 0 1
15745: NOT
15746: IFFALSE 15750
// exit ;
15748: GO 18519
// if building in entranceVisitedList then
15750: LD_VAR 0 1
15754: PUSH
15755: LD_EXP 16
15759: IN
15760: IFFALSE 15768
// begin SayHVisited ( ) ;
15762: CALL 15522 0 0
// exit ;
15766: GO 18519
// end ; case Query ( EnterBuilding ) of 1 :
15768: LD_STRING EnterBuilding
15770: PPUSH
15771: CALL_OW 97
15775: PUSH
15776: LD_INT 1
15778: DOUBLE
15779: EQUAL
15780: IFTRUE 15784
15782: GO 15787
15784: POP
// ; 2 :
15785: GO 15801
15787: LD_INT 2
15789: DOUBLE
15790: EQUAL
15791: IFTRUE 15795
15793: GO 15800
15795: POP
// exit ; end ;
15796: GO 18519
15798: GO 15801
15800: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15801: LD_ADDR_EXP 16
15805: PUSH
15806: LD_EXP 16
15810: PPUSH
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL 64845 0 2
15820: ST_TO_ADDR
// InGameOn ;
15821: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15825: LD_EXP 41
15829: PPUSH
15830: LD_INT 5
15832: PPUSH
15833: CALL_OW 235
// SetSide ( building , 5 ) ;
15837: LD_VAR 0 1
15841: PPUSH
15842: LD_INT 5
15844: PPUSH
15845: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15849: LD_EXP 41
15853: PPUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 120
// wait ( 0 0$3 ) ;
15863: LD_INT 105
15865: PPUSH
15866: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15870: LD_ADDR_VAR 0 4
15874: PUSH
15875: LD_INT 165
15877: PUSH
15878: LD_INT 106
15880: PUSH
15881: LD_INT 135
15883: PUSH
15884: LD_INT 162
15886: PUSH
15887: LD_INT 61
15889: PUSH
15890: LD_INT 109
15892: PUSH
15893: LD_INT 169
15895: PUSH
15896: LD_INT 13
15898: PUSH
15899: LD_INT 147
15901: PUSH
15902: LD_INT 137
15904: PUSH
15905: EMPTY
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: ST_TO_ADDR
// if not building in tmp then
15917: LD_VAR 0 1
15921: PUSH
15922: LD_VAR 0 4
15926: IN
15927: NOT
15928: IFFALSE 15936
// SayHEmpty ( ) else
15930: CALL 15433 0 0
15934: GO 18482
// case building of laundry :
15936: LD_VAR 0 1
15940: PUSH
15941: LD_INT 165
15943: DOUBLE
15944: EQUAL
15945: IFTRUE 15949
15947: GO 16053
15949: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15950: LD_EXP 26
15954: PUSH
15955: LD_EXP 27
15959: NOT
15960: AND
15961: PUSH
15962: LD_EXP 28
15966: NOT
15967: AND
15968: IFFALSE 16023
// begin case Query ( HeikeInLaundry ) of 1 :
15970: LD_STRING HeikeInLaundry
15972: PPUSH
15973: CALL_OW 97
15977: PUSH
15978: LD_INT 1
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15993
15986: POP
// SpawnHeikeAsRussian ; 2 :
15987: CALL 1769 0 0
15991: GO 16021
15993: LD_INT 2
15995: DOUBLE
15996: EQUAL
15997: IFTRUE 16001
15999: GO 16020
16001: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16002: LD_ADDR_EXP 16
16006: PUSH
16007: LD_EXP 16
16011: PUSH
16012: LD_VAR 0 1
16016: DIFF
16017: ST_TO_ADDR
16018: GO 16021
16020: POP
// end else
16021: GO 16051
// begin entranceVisitedList := entranceVisitedList diff building ;
16023: LD_ADDR_EXP 16
16027: PUSH
16028: LD_EXP 16
16032: PUSH
16033: LD_VAR 0 1
16037: DIFF
16038: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16039: LD_EXP 41
16043: PPUSH
16044: LD_STRING DH-Locked
16046: PPUSH
16047: CALL_OW 88
// end ; end ; dougBar :
16051: GO 18482
16053: LD_INT 106
16055: DOUBLE
16056: EQUAL
16057: IFTRUE 16061
16059: GO 16413
16061: POP
// begin if contactWithAmerican and americanContact then
16062: LD_EXP 25
16066: PUSH
16067: LD_EXP 10
16071: AND
16072: IFFALSE 16136
// begin Say ( Heike , DH-Escort-a-1 ) ;
16074: LD_EXP 41
16078: PPUSH
16079: LD_STRING DH-Escort-a-1
16081: PPUSH
16082: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16086: LD_EXP 55
16090: PPUSH
16091: LD_STRING DCa-Escort-a-2
16093: PPUSH
16094: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16098: LD_EXP 55
16102: PPUSH
16103: LD_STRING DCa-Escort-a-3
16105: PPUSH
16106: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16110: LD_EXP 41
16114: PPUSH
16115: LD_STRING DH-Escort-a-4
16117: PPUSH
16118: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16122: LD_EXP 41
16126: PPUSH
16127: LD_STRING DH-Escort-a-5
16129: PPUSH
16130: CALL_OW 88
// end else
16134: GO 16370
// if contactWithAmerican then
16136: LD_EXP 25
16140: IFFALSE 16180
// begin Say ( Heike , DH-Escort-b-1 ) ;
16142: LD_EXP 41
16146: PPUSH
16147: LD_STRING DH-Escort-b-1
16149: PPUSH
16150: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16154: LD_EXP 55
16158: PPUSH
16159: LD_STRING DCa-Escort-b-2
16161: PPUSH
16162: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16166: LD_EXP 55
16170: PPUSH
16171: LD_STRING DCa-Escort-b-3
16173: PPUSH
16174: CALL_OW 88
// end else
16178: GO 16370
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16180: LD_EXP 55
16184: PPUSH
16185: LD_STRING DCa-Deal-a-1
16187: PPUSH
16188: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16192: LD_EXP 55
16196: PPUSH
16197: LD_STRING DCa-Deal-a-2
16199: PPUSH
16200: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16204: LD_EXP 41
16208: PPUSH
16209: LD_STRING DH-Deal-a-3
16211: PPUSH
16212: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16216: LD_EXP 55
16220: PPUSH
16221: LD_STRING DCa-Deal-a-4
16223: PPUSH
16224: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16228: LD_EXP 41
16232: PPUSH
16233: LD_STRING DH-Deal-a-5
16235: PPUSH
16236: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16240: LD_EXP 55
16244: PPUSH
16245: LD_STRING DCa-Deal-a-6
16247: PPUSH
16248: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16252: LD_EXP 55
16256: PPUSH
16257: LD_STRING DCa-Deal-a-7
16259: PPUSH
16260: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16264: LD_EXP 55
16268: PPUSH
16269: LD_STRING DCa-Deal-a-8
16271: PPUSH
16272: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16276: LD_EXP 55
16280: PPUSH
16281: LD_STRING DCa-Deal-a-9
16283: PPUSH
16284: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16288: LD_EXP 55
16292: PPUSH
16293: LD_STRING DCa-Deal-a-10
16295: PPUSH
16296: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16300: LD_EXP 55
16304: PPUSH
16305: LD_STRING DCa-Deal-a-11
16307: PPUSH
16308: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16312: LD_INT 10
16314: PPUSH
16315: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16319: LD_EXP 55
16323: PPUSH
16324: LD_STRING DCa-Deal-a-12
16326: PPUSH
16327: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16331: LD_EXP 41
16335: PPUSH
16336: LD_STRING DH-Deal-a-13
16338: PPUSH
16339: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16343: LD_EXP 41
16347: PPUSH
16348: LD_STRING DH-Deal-a-14
16350: PPUSH
16351: CALL_OW 88
// contactWithAmerican := true ;
16355: LD_ADDR_EXP 25
16359: PUSH
16360: LD_INT 1
16362: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16363: LD_STRING M1-american-out
16365: PPUSH
16366: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16370: LD_EXP 55
16374: PPUSH
16375: LD_INT 2
16377: PPUSH
16378: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16382: LD_ADDR_EXP 14
16386: PUSH
16387: LD_EXP 14
16391: PPUSH
16392: LD_EXP 55
16396: PPUSH
16397: CALL 64845 0 2
16401: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16402: LD_EXP 55
16406: PPUSH
16407: CALL_OW 122
// end ; usLab :
16411: GO 18482
16413: LD_INT 135
16415: DOUBLE
16416: EQUAL
16417: IFTRUE 16421
16419: GO 16737
16421: POP
// begin if hasSniperRifle then
16422: LD_EXP 11
16426: IFFALSE 16735
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
16428: LD_EXP 46
16432: PPUSH
16433: CALL_OW 302
16437: PUSH
16438: LD_EXP 46
16442: PUSH
16443: LD_EXP 14
16447: IN
16448: AND
16449: PUSH
16450: LD_EXP 46
16454: PPUSH
16455: CALL_OW 255
16459: PUSH
16460: LD_INT 2
16462: EQUAL
16463: AND
16464: IFFALSE 16709
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16466: LD_EXP 41
16470: PPUSH
16471: LD_EXP 46
16475: PPUSH
16476: CALL_OW 296
16480: PUSH
16481: LD_INT 10
16483: GREATER
16484: IFFALSE 16509
// begin Query ( KaiaDistance ) ;
16486: LD_STRING KaiaDistance
16488: PPUSH
16489: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16493: LD_ADDR_EXP 16
16497: PUSH
16498: LD_EXP 16
16502: PUSH
16503: LD_INT 135
16505: DIFF
16506: ST_TO_ADDR
// end else
16507: GO 16707
// begin SetSide ( Kaia , 5 ) ;
16509: LD_EXP 46
16513: PPUSH
16514: LD_INT 5
16516: PPUSH
16517: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16521: LD_EXP 46
16525: PPUSH
16526: LD_INT 135
16528: PPUSH
16529: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16533: LD_INT 35
16535: PPUSH
16536: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16540: LD_EXP 46
16544: PPUSH
16545: CALL_OW 310
16549: IFFALSE 16533
// Say ( Kaia , DK-Sniper-1 ) ;
16551: LD_EXP 46
16555: PPUSH
16556: LD_STRING DK-Sniper-1
16558: PPUSH
16559: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16563: LD_EXP 46
16567: PPUSH
16568: CALL_OW 257
16572: PUSH
16573: LD_INT 34
16575: EQUAL
16576: PUSH
16577: LD_EXP 43
16581: PUSH
16582: LD_EXP 14
16586: IN
16587: AND
16588: PUSH
16589: LD_EXP 43
16593: PPUSH
16594: CALL_OW 302
16598: AND
16599: IFFALSE 16627
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16601: LD_EXP 46
16605: PPUSH
16606: LD_STRING DK-Sniper-a-2
16608: PPUSH
16609: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16613: LD_EXP 43
16617: PPUSH
16618: LD_INT 32
16620: PPUSH
16621: CALL_OW 336
// end else
16625: GO 16686
// begin Say ( Kaia , DK-Sniper-2 ) ;
16627: LD_EXP 46
16631: PPUSH
16632: LD_STRING DK-Sniper-2
16634: PPUSH
16635: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16639: LD_EXP 46
16643: PPUSH
16644: LD_INT 32
16646: PPUSH
16647: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16651: LD_EXP 48
16655: PPUSH
16656: CALL_OW 302
16660: PUSH
16661: LD_EXP 48
16665: PUSH
16666: LD_EXP 14
16670: IN
16671: AND
16672: IFFALSE 16686
// Say ( Markov , DMar-Sniper-3 ) ;
16674: LD_EXP 48
16678: PPUSH
16679: LD_STRING DMar-Sniper-3
16681: PPUSH
16682: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16686: LD_EXP 46
16690: PPUSH
16691: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16695: LD_EXP 46
16699: PPUSH
16700: LD_INT 2
16702: PPUSH
16703: CALL_OW 235
// end ; end else
16707: GO 16735
// begin entranceVisitedList := entranceVisitedList diff usLab ;
16709: LD_ADDR_EXP 16
16713: PUSH
16714: LD_EXP 16
16718: PUSH
16719: LD_INT 135
16721: DIFF
16722: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16723: LD_EXP 41
16727: PPUSH
16728: LD_STRING DH-Locked
16730: PPUSH
16731: CALL_OW 88
// end ; end ; end ; drugsLab :
16735: GO 18482
16737: LD_INT 162
16739: DOUBLE
16740: EQUAL
16741: IFTRUE 16745
16743: GO 16878
16745: POP
// begin if hasStimDrugs then
16746: LD_EXP 9
16750: IFFALSE 16864
// begin wait ( 0 0$1 ) ;
16752: LD_INT 35
16754: PPUSH
16755: CALL_OW 67
// if not hasStimDrugsCollected then
16759: LD_EXP 24
16763: NOT
16764: IFFALSE 16806
// begin Say ( Heike , DH-Lab-1 ) ;
16766: LD_EXP 41
16770: PPUSH
16771: LD_STRING DH-Lab-1
16773: PPUSH
16774: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16778: LD_INT 5
16780: PPUSH
16781: LD_INT 2
16783: PPUSH
16784: LD_INT 2
16786: PPUSH
16787: CALL_OW 322
// hasStimDrugsCollected := true ;
16791: LD_ADDR_EXP 24
16795: PUSH
16796: LD_INT 1
16798: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16799: LD_STRING M1-drugs-out
16801: PPUSH
16802: CALL_OW 604
// end ; if not hasExplosionCollected then
16806: LD_EXP 23
16810: NOT
16811: IFFALSE 16829
// entranceVisitedList := entranceVisitedList diff drugsLab else
16813: LD_ADDR_EXP 16
16817: PUSH
16818: LD_EXP 16
16822: PUSH
16823: LD_INT 162
16825: DIFF
16826: ST_TO_ADDR
16827: GO 16862
// begin wait ( 0 0$3 ) ;
16829: LD_INT 105
16831: PPUSH
16832: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16836: LD_EXP 41
16840: PPUSH
16841: LD_STRING DH-Lab-2
16843: PPUSH
16844: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16848: LD_STRING M1-drugsLab-out
16850: PPUSH
16851: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16855: LD_INT 162
16857: PPUSH
16858: CALL 19293 0 1
// end ; end else
16862: GO 16876
// Say ( Heike , DH-Locked ) ;
16864: LD_EXP 41
16868: PPUSH
16869: LD_STRING DH-Locked
16871: PPUSH
16872: CALL_OW 88
// end ; ruFac :
16876: GO 18482
16878: LD_INT 61
16880: DOUBLE
16881: EQUAL
16882: IFTRUE 16886
16884: GO 16996
16886: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16887: LD_EXP 48
16891: PPUSH
16892: CALL_OW 302
16896: PUSH
16897: LD_EXP 48
16901: PUSH
16902: LD_EXP 14
16906: IN
16907: NOT
16908: AND
16909: IFFALSE 16990
// begin Say ( Heike , DH-Krastyo-1 ) ;
16911: LD_EXP 41
16915: PPUSH
16916: LD_STRING DH-Krastyo-1
16918: PPUSH
16919: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16923: LD_EXP 48
16927: PPUSH
16928: LD_STRING DMar-Krastyo-2
16930: PPUSH
16931: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16935: LD_EXP 48
16939: PPUSH
16940: LD_STRING DMar-Krastyo-3
16942: PPUSH
16943: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16947: LD_EXP 48
16951: PPUSH
16952: LD_INT 2
16954: PPUSH
16955: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16959: LD_ADDR_EXP 14
16963: PUSH
16964: LD_EXP 14
16968: PPUSH
16969: LD_EXP 48
16973: PPUSH
16974: CALL 64845 0 2
16978: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16979: LD_EXP 48
16983: PPUSH
16984: CALL_OW 122
// end else
16988: GO 16994
// SayHEmpty ( ) ;
16990: CALL 15433 0 0
// end ; ruBarKam :
16994: GO 18482
16996: LD_INT 109
16998: DOUBLE
16999: EQUAL
17000: IFTRUE 17004
17002: GO 17151
17004: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17005: LD_EXP 45
17009: PPUSH
17010: CALL_OW 302
17014: PUSH
17015: LD_EXP 45
17019: PUSH
17020: LD_EXP 14
17024: IN
17025: NOT
17026: AND
17027: IFFALSE 17145
// begin Say ( Heike , DH-Kamil-1 ) ;
17029: LD_EXP 41
17033: PPUSH
17034: LD_STRING DH-Kamil-1
17036: PPUSH
17037: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17041: LD_EXP 45
17045: PPUSH
17046: LD_STRING DKam-Kamil-2
17048: PPUSH
17049: CALL_OW 88
// if IsOk ( Sophia ) then
17053: LD_EXP 47
17057: PPUSH
17058: CALL_OW 302
17062: IFFALSE 17102
// if Sophia in heikeSquad then
17064: LD_EXP 47
17068: PUSH
17069: LD_EXP 14
17073: IN
17074: IFFALSE 17090
// Say ( Kamil , DKam-Kamil-a-3 ) else
17076: LD_EXP 45
17080: PPUSH
17081: LD_STRING DKam-Kamil-a-3
17083: PPUSH
17084: CALL_OW 88
17088: GO 17102
// Say ( Kamil , DKam-Kamil-3 ) ;
17090: LD_EXP 45
17094: PPUSH
17095: LD_STRING DKam-Kamil-3
17097: PPUSH
17098: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17102: LD_EXP 45
17106: PPUSH
17107: LD_INT 2
17109: PPUSH
17110: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17114: LD_ADDR_EXP 14
17118: PUSH
17119: LD_EXP 14
17123: PPUSH
17124: LD_EXP 45
17128: PPUSH
17129: CALL 64845 0 2
17133: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17134: LD_EXP 45
17138: PPUSH
17139: CALL_OW 122
// end else
17143: GO 17149
// SayHEmpty ( ) ;
17145: CALL 15433 0 0
// end ; ruOutpost1 :
17149: GO 18482
17151: LD_INT 169
17153: DOUBLE
17154: EQUAL
17155: IFTRUE 17159
17157: GO 17396
17159: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17160: LD_EXP 50
17164: PPUSH
17165: CALL_OW 302
17169: PUSH
17170: LD_EXP 50
17174: PUSH
17175: LD_EXP 14
17179: IN
17180: NOT
17181: AND
17182: IFFALSE 17390
// begin if hasMethanol then
17184: LD_EXP 13
17188: IFFALSE 17319
// begin Say ( Heike , DH-Kurt-1 ) ;
17190: LD_EXP 41
17194: PPUSH
17195: LD_STRING DH-Kurt-1
17197: PPUSH
17198: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17202: LD_EXP 50
17206: PPUSH
17207: LD_STRING DKs-Kurt-2
17209: PPUSH
17210: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17214: LD_EXP 42
17218: PPUSH
17219: LD_INT 169
17221: PPUSH
17222: CALL_OW 296
17226: PUSH
17227: LD_INT 10
17229: LESS
17230: PUSH
17231: LD_EXP 42
17235: PUSH
17236: LD_EXP 14
17240: IN
17241: AND
17242: IFFALSE 17317
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17244: LD_EXP 42
17248: PPUSH
17249: LD_INT 100
17251: PPUSH
17252: LD_INT 37
17254: PPUSH
17255: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17259: LD_EXP 42
17263: PPUSH
17264: LD_INT 169
17266: PPUSH
17267: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17271: LD_INT 35
17273: PPUSH
17274: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17278: LD_EXP 42
17282: PPUSH
17283: LD_INT 169
17285: PPUSH
17286: CALL_OW 296
17290: PUSH
17291: LD_INT 7
17293: LESS
17294: IFFALSE 17271
// Say ( Givi , DG-Kurt-3 ) ;
17296: LD_EXP 42
17300: PPUSH
17301: LD_STRING DG-Kurt-3
17303: PPUSH
17304: CALL_OW 88
// ComStop ( Givi ) ;
17308: LD_EXP 42
17312: PPUSH
17313: CALL_OW 141
// end ; end else
17317: GO 17347
// begin Say ( Heike , DH-Kurt-1 ) ;
17319: LD_EXP 41
17323: PPUSH
17324: LD_STRING DH-Kurt-1
17326: PPUSH
17327: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17331: LD_EXP 50
17335: PPUSH
17336: LD_STRING DKs-Kurt-2
17338: PPUSH
17339: CALL_OW 88
// SpawnAdditionalRuGuards ;
17343: CALL 3537 0 0
// end ; SetSide ( Kurt , 2 ) ;
17347: LD_EXP 50
17351: PPUSH
17352: LD_INT 2
17354: PPUSH
17355: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17359: LD_ADDR_EXP 14
17363: PUSH
17364: LD_EXP 14
17368: PPUSH
17369: LD_EXP 50
17373: PPUSH
17374: CALL 64845 0 2
17378: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17379: LD_EXP 50
17383: PPUSH
17384: CALL_OW 122
// end else
17388: GO 17394
// SayHEmpty ( ) ;
17390: CALL 15433 0 0
// end ; ruOutpostBar :
17394: GO 18482
17396: LD_INT 13
17398: DOUBLE
17399: EQUAL
17400: IFTRUE 17404
17402: GO 17450
17404: POP
// begin if not hasGuardPatrolPlan then
17405: LD_EXP 18
17409: NOT
17410: IFFALSE 17444
// begin Say ( Heike , DH-PatrolPlan ) ;
17412: LD_EXP 41
17416: PPUSH
17417: LD_STRING DH-PatrolPlan
17419: PPUSH
17420: CALL_OW 88
// hasGuardPatrolPlan := true ;
17424: LD_ADDR_EXP 18
17428: PUSH
17429: LD_INT 1
17431: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17432: LD_INT 6
17434: PPUSH
17435: LD_INT 2
17437: PPUSH
17438: CALL_OW 343
// end else
17442: GO 17448
// SayHEmpty ( ) ;
17444: CALL 15433 0 0
// end ; ruKaiaBar :
17448: GO 18482
17450: LD_INT 147
17452: DOUBLE
17453: EQUAL
17454: IFTRUE 17458
17456: GO 17605
17458: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17459: LD_EXP 46
17463: PPUSH
17464: CALL_OW 302
17468: PUSH
17469: LD_EXP 46
17473: PUSH
17474: LD_EXP 14
17478: IN
17479: NOT
17480: AND
17481: IFFALSE 17603
// begin Say ( Heike , DH-Kaia-1 ) ;
17483: LD_EXP 41
17487: PPUSH
17488: LD_STRING DH-Kaia-1
17490: PPUSH
17491: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17495: LD_EXP 46
17499: PPUSH
17500: LD_STRING DK-Kaia-2
17502: PPUSH
17503: CALL_OW 88
// if hasSniperRifle then
17507: LD_EXP 11
17511: IFFALSE 17562
// begin if IsOk ( Markov ) then
17513: LD_EXP 48
17517: PPUSH
17518: CALL_OW 302
17522: IFFALSE 17538
// Say ( Kaia , DK-Kaia-3 ) else
17524: LD_EXP 46
17528: PPUSH
17529: LD_STRING DK-Kaia-3
17531: PPUSH
17532: CALL_OW 88
17536: GO 17550
// Say ( Kaia , DK-Kaia-a-3 ) ;
17538: LD_EXP 46
17542: PPUSH
17543: LD_STRING DK-Kaia-a-3
17545: PPUSH
17546: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17550: LD_EXP 41
17554: PPUSH
17555: LD_STRING DH-Kaia-4
17557: PPUSH
17558: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17562: LD_EXP 46
17566: PPUSH
17567: LD_INT 2
17569: PPUSH
17570: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17574: LD_ADDR_EXP 14
17578: PUSH
17579: LD_EXP 14
17583: PPUSH
17584: LD_EXP 46
17588: PPUSH
17589: CALL 64845 0 2
17593: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17594: LD_EXP 46
17598: PPUSH
17599: CALL_OW 122
// end ; end ; ruWeaponsBar :
17603: GO 18482
17605: LD_INT 137
17607: DOUBLE
17608: EQUAL
17609: IFTRUE 17613
17611: GO 18481
17613: POP
// begin if hasWeapons then
17614: LD_EXP 19
17618: IFFALSE 18467
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17620: LD_ADDR_EXP 16
17624: PUSH
17625: LD_EXP 16
17629: PUSH
17630: LD_INT 137
17632: DIFF
17633: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17634: LD_ADDR_VAR 0 4
17638: PUSH
17639: LD_EXP 14
17643: PPUSH
17644: LD_INT 91
17646: PUSH
17647: LD_EXP 41
17651: PUSH
17652: LD_INT 8
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: PPUSH
17660: CALL_OW 72
17664: ST_TO_ADDR
// if not heikeSquad or not tmp then
17665: LD_EXP 14
17669: NOT
17670: PUSH
17671: LD_VAR 0 4
17675: NOT
17676: OR
17677: IFFALSE 17693
// Say ( Heike , DH-Weapons-Alone ) else
17679: LD_EXP 41
17683: PPUSH
17684: LD_STRING DH-Weapons-Alone
17686: PPUSH
17687: CALL_OW 88
17691: GO 18465
// begin if not firstArmouryDialog then
17693: LD_EXP 39
17697: NOT
17698: IFFALSE 17731
// begin Say ( Heike , DH-Weapons-1 ) ;
17700: LD_EXP 41
17704: PPUSH
17705: LD_STRING DH-Weapons-1
17707: PPUSH
17708: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17712: LD_EXP 41
17716: PPUSH
17717: LD_STRING DH-Weapons-2
17719: PPUSH
17720: CALL_OW 88
// Query ( Weapons ) ;
17724: LD_STRING Weapons
17726: PPUSH
17727: CALL_OW 97
// end ; tmp2 := UnitFilter ( tmp , [ f_class , class_prison ] ) diff [ Heike , Kaia , Kamil , Mike , Givi ] ;
17731: LD_ADDR_VAR 0 5
17735: PUSH
17736: LD_VAR 0 4
17740: PPUSH
17741: LD_INT 25
17743: PUSH
17744: LD_INT 33
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PPUSH
17751: CALL_OW 72
17755: PUSH
17756: LD_EXP 41
17760: PUSH
17761: LD_EXP 46
17765: PUSH
17766: LD_EXP 45
17770: PUSH
17771: LD_EXP 43
17775: PUSH
17776: LD_EXP 42
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: DIFF
17788: ST_TO_ADDR
// if tmp2 and weaponsAmount then
17789: LD_VAR 0 5
17793: PUSH
17794: LD_EXP 40
17798: AND
17799: IFFALSE 17948
// begin if Query ( QWeapons ) = 1 then
17801: LD_STRING QWeapons
17803: PPUSH
17804: CALL_OW 97
17808: PUSH
17809: LD_INT 1
17811: EQUAL
17812: IFFALSE 17948
// begin for i in tmp2 do
17814: LD_ADDR_VAR 0 3
17818: PUSH
17819: LD_VAR 0 5
17823: PUSH
17824: FOR_IN
17825: IFFALSE 17946
// begin SetSide ( i , 3 ) ;
17827: LD_VAR 0 3
17831: PPUSH
17832: LD_INT 3
17834: PPUSH
17835: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
17839: LD_VAR 0 3
17843: PPUSH
17844: LD_INT 137
17846: PPUSH
17847: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
17851: LD_ADDR_EXP 40
17855: PUSH
17856: LD_EXP 40
17860: PPUSH
17861: CALL 66228 0 1
17865: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
17866: LD_INT 10
17868: PPUSH
17869: CALL_OW 67
// until IsInUnit ( i ) ;
17873: LD_VAR 0 3
17877: PPUSH
17878: CALL_OW 310
17882: IFFALSE 17866
// SetClass ( i , class_soldier ) ;
17884: LD_VAR 0 3
17888: PPUSH
17889: LD_INT 1
17891: PPUSH
17892: CALL_OW 336
// SetSide ( i , 2 ) ;
17896: LD_VAR 0 3
17900: PPUSH
17901: LD_INT 2
17903: PPUSH
17904: CALL_OW 235
// ComExitBuilding ( i ) ;
17908: LD_VAR 0 3
17912: PPUSH
17913: CALL_OW 122
// AddComMoveXY ( i , 191 , 126 ) ;
17917: LD_VAR 0 3
17921: PPUSH
17922: LD_INT 191
17924: PPUSH
17925: LD_INT 126
17927: PPUSH
17928: CALL_OW 171
// if weaponsAmount = 0 then
17932: LD_EXP 40
17936: PUSH
17937: LD_INT 0
17939: EQUAL
17940: IFFALSE 17944
// break ;
17942: GO 17946
// end ;
17944: GO 17824
17946: POP
17947: POP
// end ; end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
17948: LD_EXP 8
17952: PUSH
17953: LD_EXP 46
17957: PUSH
17958: LD_VAR 0 4
17962: IN
17963: AND
17964: PUSH
17965: LD_EXP 46
17969: PPUSH
17970: CALL_OW 257
17974: PUSH
17975: LD_INT 34
17977: NONEQUAL
17978: AND
17979: IFFALSE 18107
// begin SetSide ( Kaia , 5 ) ;
17981: LD_EXP 46
17985: PPUSH
17986: LD_INT 5
17988: PPUSH
17989: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17993: LD_EXP 46
17997: PPUSH
17998: LD_INT 137
18000: PPUSH
18001: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18005: LD_INT 35
18007: PPUSH
18008: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18012: LD_EXP 46
18016: PPUSH
18017: CALL_OW 310
18021: IFFALSE 18005
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18023: LD_EXP 41
18027: PPUSH
18028: LD_STRING DH-Kaia-Revolver-2
18030: PPUSH
18031: CALL_OW 88
// SetClassKaiaRevolver ;
18035: CALL 1738 0 0
// hasRevolver := false ;
18039: LD_ADDR_EXP 8
18043: PUSH
18044: LD_INT 0
18046: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18047: LD_EXP 46
18051: PPUSH
18052: LD_INT 2
18054: PPUSH
18055: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18059: LD_EXP 46
18063: PPUSH
18064: CALL_OW 122
// if Mike in heikeSquad and GetSide ( Mike ) = 2 then
18068: LD_EXP 43
18072: PUSH
18073: LD_EXP 14
18077: IN
18078: PUSH
18079: LD_EXP 43
18083: PPUSH
18084: CALL_OW 255
18088: PUSH
18089: LD_INT 2
18091: EQUAL
18092: AND
18093: IFFALSE 18107
// SetClass ( Mike , class_hunter ) ;
18095: LD_EXP 43
18099: PPUSH
18100: LD_INT 32
18102: PPUSH
18103: CALL_OW 336
// end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18107: LD_EXP 42
18111: PUSH
18112: LD_VAR 0 4
18116: IN
18117: PUSH
18118: LD_EXP 42
18122: PPUSH
18123: CALL_OW 257
18127: PUSH
18128: LD_INT 33
18130: EQUAL
18131: AND
18132: IFFALSE 18273
// begin SetSide ( Givi , 5 ) ;
18134: LD_EXP 42
18138: PPUSH
18139: LD_INT 5
18141: PPUSH
18142: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18146: LD_EXP 42
18150: PPUSH
18151: LD_INT 137
18153: PPUSH
18154: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18158: LD_INT 35
18160: PPUSH
18161: CALL_OW 67
// until IsInUnit ( Givi ) ;
18165: LD_EXP 42
18169: PPUSH
18170: CALL_OW 310
18174: IFFALSE 18158
// Say ( Givi , DG-Weapons-3 ) ;
18176: LD_EXP 42
18180: PPUSH
18181: LD_STRING DG-Weapons-3
18183: PPUSH
18184: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18188: LD_EXP 41
18192: PPUSH
18193: LD_STRING DH-Weapons-4
18195: PPUSH
18196: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18200: LD_EXP 42
18204: PPUSH
18205: LD_STRING DG-Weapons-5
18207: PPUSH
18208: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18212: LD_EXP 42
18216: PPUSH
18217: LD_INT 11
18219: PPUSH
18220: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18224: LD_EXP 42
18228: PPUSH
18229: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18233: LD_EXP 42
18237: PPUSH
18238: LD_INT 2
18240: PPUSH
18241: CALL_OW 235
// if hasRevolver then
18245: LD_EXP 8
18249: IFFALSE 18271
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18251: LD_EXP 41
18255: PPUSH
18256: LD_STRING DH-Kaia-Revolver-1
18258: PPUSH
18259: CALL_OW 88
// heikeHasRevolver := true ;
18263: LD_ADDR_EXP 20
18267: PUSH
18268: LD_INT 1
18270: ST_TO_ADDR
// end ; end else
18271: GO 18465
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18273: LD_EXP 45
18277: PUSH
18278: LD_VAR 0 4
18282: IN
18283: PUSH
18284: LD_EXP 45
18288: PPUSH
18289: CALL_OW 257
18293: PUSH
18294: LD_INT 33
18296: EQUAL
18297: AND
18298: IFFALSE 18427
// begin SetSide ( Kamil , 5 ) ;
18300: LD_EXP 45
18304: PPUSH
18305: LD_INT 5
18307: PPUSH
18308: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18312: LD_EXP 45
18316: PPUSH
18317: LD_INT 137
18319: PPUSH
18320: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18324: LD_INT 35
18326: PPUSH
18327: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18331: LD_EXP 45
18335: PPUSH
18336: CALL_OW 310
18340: IFFALSE 18324
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18342: LD_EXP 45
18346: PPUSH
18347: LD_STRING DKam-Weapons-a-3
18349: PPUSH
18350: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18354: LD_EXP 41
18358: PPUSH
18359: LD_STRING DH-Weapons-a-4
18361: PPUSH
18362: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18366: LD_EXP 45
18370: PPUSH
18371: LD_INT 11
18373: PPUSH
18374: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18378: LD_EXP 45
18382: PPUSH
18383: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18387: LD_EXP 45
18391: PPUSH
18392: LD_INT 2
18394: PPUSH
18395: CALL_OW 235
// if hasRevolver then
18399: LD_EXP 8
18403: IFFALSE 18425
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18405: LD_EXP 41
18409: PPUSH
18410: LD_STRING DH-Kaia-Revolver-1
18412: PPUSH
18413: CALL_OW 88
// heikeHasRevolver := true ;
18417: LD_ADDR_EXP 20
18421: PUSH
18422: LD_INT 1
18424: ST_TO_ADDR
// end ; end else
18425: GO 18465
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18427: LD_EXP 41
18431: PPUSH
18432: LD_STRING DH-Weapons-Alone-2
18434: PPUSH
18435: CALL_OW 88
// if hasRevolver then
18439: LD_EXP 8
18443: IFFALSE 18465
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18445: LD_EXP 41
18449: PPUSH
18450: LD_STRING DH-Kaia-Revolver-1a
18452: PPUSH
18453: CALL_OW 88
// heikeHasRevolver := true ;
18457: LD_ADDR_EXP 20
18461: PUSH
18462: LD_INT 1
18464: ST_TO_ADDR
// end ; end ; end ; end else
18465: GO 18479
// Say ( Heike , DH-Locked ) ;
18467: LD_EXP 41
18471: PPUSH
18472: LD_STRING DH-Locked
18474: PPUSH
18475: CALL_OW 88
// end ; end ;
18479: GO 18482
18481: POP
// ComExitBuilding ( Heike ) ;
18482: LD_EXP 41
18486: PPUSH
18487: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18491: LD_EXP 41
18495: PPUSH
18496: LD_INT 2
18498: PPUSH
18499: CALL_OW 235
// SetSide ( building , 3 ) ;
18503: LD_VAR 0 1
18507: PPUSH
18508: LD_INT 3
18510: PPUSH
18511: CALL_OW 235
// InGameOff ;
18515: CALL_OW 9
// end ;
18519: LD_VAR 0 2
18523: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18524: LD_EXP 30
18528: NOT
18529: PUSH
18530: LD_EXP 17
18534: NOT
18535: AND
18536: PUSH
18537: LD_INT 22
18539: PUSH
18540: LD_INT 5
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 21
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PPUSH
18561: CALL_OW 69
18565: PUSH
18566: LD_INT 0
18568: EQUAL
18569: AND
18570: PUSH
18571: LD_INT 22
18573: PUSH
18574: LD_INT 4
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 21
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: PUSH
18600: LD_INT 0
18602: EQUAL
18603: PUSH
18604: LD_EXP 25
18608: AND
18609: PUSH
18610: LD_EXP 25
18614: NOT
18615: OR
18616: AND
18617: IFFALSE 18649
18619: GO 18621
18621: DISABLE
// begin DialogueOn ;
18622: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18626: LD_EXP 41
18630: PPUSH
18631: LD_STRING DH-Alarm-2
18633: PPUSH
18634: CALL_OW 88
// DialogueOff ;
18638: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18642: LD_STRING M1-people-out
18644: PPUSH
18645: CALL_OW 337
// end ; end_of_file
18649: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18650: LD_VAR 0 1
18654: PUSH
18655: LD_INT 3
18657: DOUBLE
18658: EQUAL
18659: IFTRUE 18663
18661: GO 18693
18663: POP
// begin repeat wait ( 0 0$1 ) ;
18664: LD_INT 35
18666: PPUSH
18667: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18671: LD_EXP 41
18675: PPUSH
18676: CALL_OW 85
// until IsDying ( Heike ) ;
18680: LD_EXP 41
18684: PPUSH
18685: CALL_OW 303
18689: IFFALSE 18664
// end ; end ;
18691: GO 18694
18693: POP
// end ;
18694: PPOPN 1
18696: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
18697: LD_OWVAR 59
18701: IFFALSE 18705
// exit ;
18703: GO 18779
// if showPlaceEvent then
18705: LD_INT 4
18707: IFFALSE 18779
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
18709: LD_VAR 0 2
18713: PPUSH
18714: LD_VAR 0 3
18718: PPUSH
18719: LD_INT 2
18721: PPUSH
18722: LD_INT 6
18724: NEG
18725: PPUSH
18726: CALL_OW 330
// CenterOnXY ( x , y ) ;
18730: LD_VAR 0 2
18734: PPUSH
18735: LD_VAR 0 3
18739: PPUSH
18740: CALL_OW 84
// wait ( time ) ;
18744: LD_VAR 0 4
18748: PPUSH
18749: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18753: LD_EXP 41
18757: PPUSH
18758: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18762: LD_VAR 0 2
18766: PPUSH
18767: LD_VAR 0 3
18771: PPUSH
18772: LD_INT 2
18774: PPUSH
18775: CALL_OW 331
// end ; end ;
18779: PPOPN 7
18781: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18782: LD_VAR 0 1
18786: PUSH
18787: LD_EXP 41
18791: EQUAL
18792: PUSH
18793: LD_EXP 5
18797: AND
18798: IFFALSE 18822
// if loseCounter then
18800: LD_EXP 32
18804: IFFALSE 18815
// YouLost ( HeikeNoSurrender ) else
18806: LD_STRING HeikeNoSurrender
18808: PPUSH
18809: CALL_OW 104
18813: GO 18822
// YouLost ( Heike ) ;
18815: LD_STRING Heike
18817: PPUSH
18818: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 255
18831: PUSH
18832: LD_INT 2
18834: EQUAL
18835: PUSH
18836: LD_VAR 0 1
18840: PPUSH
18841: CALL_OW 247
18845: PUSH
18846: LD_INT 1
18848: EQUAL
18849: AND
18850: IFFALSE 18867
// loseCounter := Inc ( loseCounter ) ;
18852: LD_ADDR_EXP 32
18856: PUSH
18857: LD_EXP 32
18861: PPUSH
18862: CALL 66206 0 1
18866: ST_TO_ADDR
// end ;
18867: PPOPN 1
18869: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18870: LD_VAR 0 1
18874: PUSH
18875: LD_INT 2
18877: EQUAL
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: LD_INT 3
18886: EQUAL
18887: AND
18888: PUSH
18889: LD_VAR 0 1
18893: PUSH
18894: LD_INT 3
18896: EQUAL
18897: PUSH
18898: LD_VAR 0 2
18902: PUSH
18903: LD_INT 2
18905: EQUAL
18906: AND
18907: OR
18908: IFFALSE 18918
// isAlarm := true ;
18910: LD_ADDR_EXP 17
18914: PUSH
18915: LD_INT 1
18917: ST_TO_ADDR
// end ; end_of_file
18918: PPOPN 2
18920: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18921: LD_INT 0
18923: PPUSH
18924: PPUSH
18925: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18926: LD_ADDR_VAR 0 4
18930: PUSH
18931: LD_VAR 0 1
18935: PPUSH
18936: CALL_OW 310
18940: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18941: LD_ADDR_VAR 0 5
18945: PUSH
18946: LD_VAR 0 2
18950: PPUSH
18951: CALL_OW 310
18955: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: LD_VAR 0 4
18965: PUSH
18966: LD_VAR 0 4
18970: PUSH
18971: LD_VAR 0 5
18975: EQUAL
18976: AND
18977: ST_TO_ADDR
// end ;
18978: LD_VAR 0 3
18982: RET
// export function ShowPlace ( x , y , time ) ; begin
18983: LD_INT 0
18985: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18986: LD_INT 4
18988: PPUSH
18989: LD_VAR 0 1
18993: PPUSH
18994: LD_VAR 0 2
18998: PPUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: LD_INT 0
19006: PPUSH
19007: LD_INT 0
19009: PPUSH
19010: LD_INT 0
19012: PPUSH
19013: CALL_OW 595
// end ;
19017: LD_VAR 0 4
19021: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
19022: LD_INT 0
19024: PPUSH
19025: PPUSH
19026: PPUSH
19027: PPUSH
19028: PPUSH
19029: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
19030: LD_VAR 0 1
19034: PPUSH
19035: CALL_OW 302
19039: NOT
19040: PUSH
19041: LD_VAR 0 2
19045: PPUSH
19046: CALL_OW 302
19050: NOT
19051: OR
19052: PUSH
19053: LD_VAR 0 2
19057: PPUSH
19058: CALL_OW 313
19062: PUSH
19063: LD_INT 6
19065: EQUAL
19066: OR
19067: IFFALSE 19071
// exit ;
19069: GO 19288
// btype := GetBType ( building ) ;
19071: LD_ADDR_VAR 0 8
19075: PUSH
19076: LD_VAR 0 2
19080: PPUSH
19081: CALL_OW 266
19085: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
19086: LD_VAR 0 8
19090: PUSH
19091: LD_INT 0
19093: PUSH
19094: LD_INT 1
19096: PUSH
19097: LD_INT 2
19099: PUSH
19100: LD_INT 4
19102: PUSH
19103: LD_INT 5
19105: PUSH
19106: LD_INT 3
19108: PUSH
19109: LD_INT 6
19111: PUSH
19112: LD_INT 7
19114: PUSH
19115: LD_INT 8
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: IN
19129: NOT
19130: IFFALSE 19134
// exit ;
19132: GO 19288
// x := GetX ( building ) ;
19134: LD_ADDR_VAR 0 4
19138: PUSH
19139: LD_VAR 0 2
19143: PPUSH
19144: CALL_OW 250
19148: ST_TO_ADDR
// y := GetY ( building ) ;
19149: LD_ADDR_VAR 0 5
19153: PUSH
19154: LD_VAR 0 2
19158: PPUSH
19159: CALL_OW 251
19163: ST_TO_ADDR
// d := GetDir ( building ) ;
19164: LD_ADDR_VAR 0 6
19168: PUSH
19169: LD_VAR 0 2
19173: PPUSH
19174: CALL_OW 254
19178: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
19179: LD_ADDR_VAR 0 7
19183: PUSH
19184: LD_VAR 0 4
19188: PPUSH
19189: LD_VAR 0 6
19193: PPUSH
19194: LD_INT 3
19196: PPUSH
19197: CALL_OW 272
19201: PUSH
19202: LD_VAR 0 5
19206: PPUSH
19207: LD_VAR 0 6
19211: PPUSH
19212: LD_INT 3
19214: PPUSH
19215: CALL_OW 273
19219: PUSH
19220: EMPTY
19221: LIST
19222: LIST
19223: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
19224: LD_VAR 0 7
19228: PUSH
19229: LD_INT 1
19231: ARRAY
19232: PPUSH
19233: LD_VAR 0 7
19237: PUSH
19238: LD_INT 2
19240: ARRAY
19241: PPUSH
19242: CALL_OW 488
19246: NOT
19247: IFFALSE 19251
// exit ;
19249: GO 19288
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
19251: LD_ADDR_VAR 0 3
19255: PUSH
19256: LD_VAR 0 1
19260: PPUSH
19261: LD_VAR 0 7
19265: PUSH
19266: LD_INT 1
19268: ARRAY
19269: PPUSH
19270: LD_VAR 0 7
19274: PUSH
19275: LD_INT 2
19277: ARRAY
19278: PPUSH
19279: CALL_OW 297
19283: PUSH
19284: LD_INT 4
19286: LESS
19287: ST_TO_ADDR
// end ;
19288: LD_VAR 0 3
19292: RET
// export function PlaceExplosives ( building ) ; begin
19293: LD_INT 0
19295: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
19296: LD_ADDR_EXP 29
19300: PUSH
19301: LD_EXP 29
19305: PPUSH
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL 64845 0 2
19315: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
19316: LD_VAR 0 1
19320: PPUSH
19321: CALL_OW 250
19325: PPUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 251
19335: PPUSH
19336: LD_STRING PlantBomb
19338: PPUSH
19339: CALL_OW 366
// end ;
19343: LD_VAR 0 2
19347: RET
// export function CreateNature ; var i ; begin
19348: LD_INT 0
19350: PPUSH
19351: PPUSH
// PrepareFrog ;
19352: CALL 61327 0 0
// for i := 1 to 3 do
19356: LD_ADDR_VAR 0 2
19360: PUSH
19361: DOUBLE
19362: LD_INT 1
19364: DEC
19365: ST_TO_ADDR
19366: LD_INT 3
19368: PUSH
19369: FOR_TO
19370: IFFALSE 19389
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
19372: CALL_OW 44
19376: PPUSH
19377: LD_INT 24
19379: PPUSH
19380: LD_INT 0
19382: PPUSH
19383: CALL_OW 49
19387: GO 19369
19389: POP
19390: POP
// end ;
19391: LD_VAR 0 1
19395: RET
// export function MarkBuilding ( building , marker ) ; begin
19396: LD_INT 0
19398: PPUSH
// if marker then
19399: LD_VAR 0 2
19403: IFFALSE 19450
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 250
19414: PPUSH
19415: LD_VAR 0 1
19419: PPUSH
19420: CALL_OW 251
19424: PPUSH
19425: LD_INT 2
19427: PPUSH
19428: LD_INT 3
19430: NEG
19431: PPUSH
19432: CALL_OW 330
// SetBName ( building , target ) ;
19436: LD_VAR 0 1
19440: PPUSH
19441: LD_STRING target
19443: PPUSH
19444: CALL_OW 500
// end else
19448: GO 19489
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 250
19459: PPUSH
19460: LD_VAR 0 1
19464: PPUSH
19465: CALL_OW 251
19469: PPUSH
19470: LD_INT 2
19472: PPUSH
19473: CALL_OW 331
// SetBName ( building ,  ) ;
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_STRING 
19484: PPUSH
19485: CALL_OW 500
// end ; end ; end_of_file
19489: LD_VAR 0 3
19493: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
19494: LD_INT 0
19496: PPUSH
// lockerCodeValid := false ;
19497: LD_ADDR_EXP 67
19501: PUSH
19502: LD_INT 0
19504: ST_TO_ADDR
// if not step then
19505: LD_LOC 1
19509: NOT
19510: IFFALSE 19520
// step := 1 ;
19512: LD_ADDR_LOC 1
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
19520: LD_STRING HEscape
19522: PUSH
19523: LD_LOC 1
19527: STR
19528: PPUSH
19529: CALL_OW 97
19533: PUSH
19534: LD_INT 1
19536: DOUBLE
19537: EQUAL
19538: IFTRUE 19542
19540: GO 19549
19542: POP
// LockerMinigameSearch ; 2 :
19543: CALL 19582 0 0
19547: GO 19565
19549: LD_INT 2
19551: DOUBLE
19552: EQUAL
19553: IFTRUE 19557
19555: GO 19564
19557: POP
// LockerMinigameSetCode ; end ;
19558: CALL 19656 0 0
19562: GO 19565
19564: POP
// if lockerCodeValid then
19565: LD_EXP 67
19569: IFFALSE 19573
// exit ;
19571: GO 19577
// StartLockerMinigame ;
19573: CALL 19494 0 0
// end ;
19577: LD_VAR 0 1
19581: RET
// function LockerMinigameSearch ; begin
19582: LD_INT 0
19584: PPUSH
// if code then
19585: LD_LOC 2
19589: IFFALSE 19605
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
19591: LD_EXP 41
19595: PPUSH
19596: LD_STRING DH-Escape-3-Hint-0
19598: PPUSH
19599: CALL_OW 88
// exit ;
19603: GO 19651
// end ; Randomize ;
19605: CALL_OW 10
// code := rand ( 1 , 5 ) ;
19609: LD_ADDR_LOC 2
19613: PUSH
19614: LD_INT 1
19616: PPUSH
19617: LD_INT 5
19619: PPUSH
19620: CALL_OW 12
19624: ST_TO_ADDR
// step := 2 ;
19625: LD_ADDR_LOC 1
19629: PUSH
19630: LD_INT 2
19632: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
19633: LD_EXP 41
19637: PPUSH
19638: LD_STRING DH-Escape-3-Hint-
19640: PUSH
19641: LD_LOC 2
19645: STR
19646: PPUSH
19647: CALL_OW 88
// end ;
19651: LD_VAR 0 1
19655: RET
// function LockerMinigameSetCode ; begin
19656: LD_INT 0
19658: PPUSH
// if not code then
19659: LD_LOC 2
19663: NOT
19664: IFFALSE 19674
// code := 0 ;
19666: LD_ADDR_LOC 2
19670: PUSH
19671: LD_INT 0
19673: ST_TO_ADDR
// lockerBusy := true ;
19674: LD_ADDR_EXP 68
19678: PUSH
19679: LD_INT 1
19681: ST_TO_ADDR
// InGameOff ;
19682: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
19686: LD_STRING initLockerMinigame("
19688: PUSH
19689: LD_LOC 2
19693: STR
19694: PUSH
19695: LD_STRING ")
19697: STR
19698: PPUSH
19699: CALL_OW 559
// step := 3 ;
19703: LD_ADDR_LOC 1
19707: PUSH
19708: LD_INT 3
19710: ST_TO_ADDR
// repeat wait ( 1 ) ;
19711: LD_INT 1
19713: PPUSH
19714: CALL_OW 67
// until not lockerBusy ;
19718: LD_EXP 68
19722: NOT
19723: IFFALSE 19711
// InGameOn ;
19725: CALL_OW 8
// if not lockerCodeValid then
19729: LD_EXP 67
19733: NOT
19734: IFFALSE 19760
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19736: LD_EXP 41
19740: PPUSH
19741: LD_STRING DH-Escape-3-Fail-
19743: PUSH
19744: LD_INT 1
19746: PPUSH
19747: LD_INT 2
19749: PPUSH
19750: CALL_OW 12
19754: STR
19755: PPUSH
19756: CALL_OW 88
// end ; end_of_file
19760: LD_VAR 0 1
19764: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19765: LD_VAR 0 2
19769: PUSH
19770: LD_INT 102
19772: EQUAL
19773: IFFALSE 19795
// begin lockerBusy := false ;
19775: LD_ADDR_EXP 68
19779: PUSH
19780: LD_INT 0
19782: ST_TO_ADDR
// lockerCodeValid := p3 ;
19783: LD_ADDR_EXP 67
19787: PUSH
19788: LD_VAR 0 3
19792: ST_TO_ADDR
// end else
19793: GO 19849
// if p2 = 103 then
19795: LD_VAR 0 2
19799: PUSH
19800: LD_INT 103
19802: EQUAL
19803: IFFALSE 19815
// begin weatherBusy := false ;
19805: LD_ADDR_EXP 37
19809: PUSH
19810: LD_INT 0
19812: ST_TO_ADDR
// end else
19813: GO 19849
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19815: LD_VAR 0 1
19819: PPUSH
19820: LD_VAR 0 2
19824: PPUSH
19825: LD_VAR 0 3
19829: PPUSH
19830: LD_VAR 0 4
19834: PPUSH
19835: LD_VAR 0 5
19839: PPUSH
19840: LD_VAR 0 6
19844: PPUSH
19845: CALL 68849 0 6
// end ;
19849: PPOPN 6
19851: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
19852: LD_STRING killGameMusic();
19854: PPUSH
19855: CALL_OW 559
// SOS_MapStart ( ) ;
19859: CALL 68820 0 0
// end ; end_of_file
19863: PPOPN 1
19865: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
19866: LD_EXP 17
19870: NOT
19871: PUSH
19872: LD_EXP 66
19876: AND
19877: IFFALSE 20287
19879: GO 19881
19881: DISABLE
19882: LD_INT 0
19884: PPUSH
19885: PPUSH
19886: PPUSH
19887: PPUSH
19888: PPUSH
// begin enable ;
19889: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19890: LD_ADDR_VAR 0 3
19894: PUSH
19895: LD_INT 26
19897: PUSH
19898: LD_INT 27
19900: PUSH
19901: LD_INT 28
19903: PUSH
19904: LD_INT 29
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 30
19915: PUSH
19916: LD_INT 31
19918: PUSH
19919: LD_INT 32
19921: PUSH
19922: LD_INT 33
19924: PUSH
19925: LD_INT 34
19927: PUSH
19928: LD_INT 35
19930: PUSH
19931: LD_INT 36
19933: PUSH
19934: LD_INT 37
19936: PUSH
19937: LD_INT 38
19939: PUSH
19940: EMPTY
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: PUSH
19951: LD_INT 39
19953: PUSH
19954: LD_INT 40
19956: PUSH
19957: LD_INT 41
19959: PUSH
19960: LD_INT 42
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 43
19971: PUSH
19972: LD_INT 44
19974: PUSH
19975: LD_INT 45
19977: PUSH
19978: LD_INT 46
19980: PUSH
19981: LD_INT 47
19983: PUSH
19984: LD_INT 46
19986: PUSH
19987: LD_INT 45
19989: PUSH
19990: LD_INT 44
19992: PUSH
19993: LD_INT 43
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: ST_TO_ADDR
// for i in ruPatrol do
20013: LD_ADDR_VAR 0 1
20017: PUSH
20018: LD_EXP 66
20022: PUSH
20023: FOR_IN
20024: IFFALSE 20285
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
20026: LD_ADDR_VAR 0 5
20030: PUSH
20031: LD_INT 22
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 21
20043: PUSH
20044: LD_INT 1
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 91
20053: PUSH
20054: LD_VAR 0 1
20058: PUSH
20059: LD_INT 7
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: PPUSH
20072: CALL_OW 69
20076: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
20077: LD_INT 2
20079: PPUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 292
20089: PUSH
20090: LD_VAR 0 5
20094: AND
20095: IFFALSE 20171
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
20097: LD_EXP 30
20101: PUSH
20102: LD_VAR 0 1
20106: PPUSH
20107: LD_EXP 61
20111: PPUSH
20112: CALL_OW 296
20116: PUSH
20117: LD_INT 16
20119: LESS
20120: AND
20121: PUSH
20122: LD_EXP 38
20126: OR
20127: IFFALSE 20131
// continue ;
20129: GO 20023
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
20131: LD_VAR 0 1
20135: PPUSH
20136: LD_VAR 0 5
20140: PPUSH
20141: LD_VAR 0 1
20145: PPUSH
20146: CALL_OW 74
20150: PPUSH
20151: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
20155: LD_VAR 0 1
20159: PPUSH
20160: LD_VAR 0 5
20164: PPUSH
20165: CALL 20290 0 2
// continue ;
20169: GO 20023
// end ; if HasTask ( i ) then
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL_OW 314
20180: IFFALSE 20184
// continue ;
20182: GO 20023
// tag := GetTag ( i ) ;
20184: LD_ADDR_VAR 0 4
20188: PUSH
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 110
20198: ST_TO_ADDR
// if not tag then
20199: LD_VAR 0 4
20203: NOT
20204: IFFALSE 20217
// begin ComHold ( i ) ;
20206: LD_VAR 0 1
20210: PPUSH
20211: CALL_OW 140
// continue ;
20215: GO 20023
// end ; for j := 1 to points [ tag ] do
20217: LD_ADDR_VAR 0 2
20221: PUSH
20222: DOUBLE
20223: LD_INT 1
20225: DEC
20226: ST_TO_ADDR
20227: LD_VAR 0 3
20231: PUSH
20232: LD_VAR 0 4
20236: ARRAY
20237: PUSH
20238: FOR_TO
20239: IFFALSE 20281
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
20241: LD_VAR 0 1
20245: PPUSH
20246: LD_VAR 0 3
20250: PUSH
20251: LD_VAR 0 4
20255: ARRAY
20256: PUSH
20257: LD_VAR 0 2
20261: ARRAY
20262: PPUSH
20263: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
20267: LD_VAR 0 1
20271: PPUSH
20272: LD_INT 70
20274: PPUSH
20275: CALL_OW 202
// end ;
20279: GO 20238
20281: POP
20282: POP
// end ;
20283: GO 20023
20285: POP
20286: POP
// end ;
20287: PPOPN 5
20289: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
20290: LD_INT 0
20292: PPUSH
20293: PPUSH
20294: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
20295: LD_VAR 0 2
20299: PPUSH
20300: LD_INT 23
20302: PUSH
20303: LD_INT 3
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PPUSH
20310: CALL_OW 72
20314: PUSH
20315: LD_VAR 0 2
20319: PPUSH
20320: LD_INT 95
20322: PUSH
20323: LD_INT 61
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PPUSH
20330: CALL_OW 72
20334: OR
20335: IFFALSE 20339
// exit ;
20337: GO 21427
// if UnitFilter ( units , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
20339: LD_VAR 0 2
20343: PPUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 25
20349: PUSH
20350: LD_INT 1
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 25
20359: PUSH
20360: LD_INT 11
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 25
20369: PUSH
20370: LD_INT 34
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 25
20379: PUSH
20380: LD_INT 32
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: PPUSH
20397: CALL_OW 72
20401: IFFALSE 20514
// begin blockPatrolThread := true ;
20403: LD_ADDR_EXP 38
20407: PUSH
20408: LD_INT 1
20410: ST_TO_ADDR
// DialogueOn ;
20411: CALL_OW 6
// case GetSex ( guard ) of sex_male :
20415: LD_VAR 0 1
20419: PPUSH
20420: CALL_OW 258
20424: PUSH
20425: LD_INT 1
20427: DOUBLE
20428: EQUAL
20429: IFTRUE 20433
20431: GO 20448
20433: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20434: LD_VAR 0 1
20438: PPUSH
20439: LD_STRING DRum-Fail-3
20441: PPUSH
20442: CALL_OW 88
20446: GO 20472
20448: LD_INT 2
20450: DOUBLE
20451: EQUAL
20452: IFTRUE 20456
20454: GO 20471
20456: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20457: LD_VAR 0 1
20461: PPUSH
20462: LD_STRING DRum-Fail-3
20464: PPUSH
20465: CALL_OW 88
20469: GO 20472
20471: POP
// DialogueOff ;
20472: CALL_OW 7
// wait ( 0 0$5 ) ;
20476: LD_INT 175
20478: PPUSH
20479: CALL_OW 67
// if IsOk ( guard ) then
20483: LD_VAR 0 1
20487: PPUSH
20488: CALL_OW 302
20492: IFFALSE 20504
// isAlarm := true else
20494: LD_ADDR_EXP 17
20498: PUSH
20499: LD_INT 1
20501: ST_TO_ADDR
20502: GO 20512
// blockPatrolThread := false ;
20504: LD_ADDR_EXP 38
20508: PUSH
20509: LD_INT 0
20511: ST_TO_ADDR
// exit ;
20512: GO 21427
// end ; DialogueOn ;
20514: CALL_OW 6
// blockPatrolThread := true ;
20518: LD_ADDR_EXP 38
20522: PUSH
20523: LD_INT 1
20525: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL_OW 87
// if not Heike in units then
20535: LD_EXP 41
20539: PUSH
20540: LD_VAR 0 2
20544: IN
20545: NOT
20546: IFFALSE 20896
// begin case GetSex ( guard ) of sex_male :
20548: LD_VAR 0 1
20552: PPUSH
20553: CALL_OW 258
20557: PUSH
20558: LD_INT 1
20560: DOUBLE
20561: EQUAL
20562: IFTRUE 20566
20564: GO 20581
20566: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
20567: LD_VAR 0 1
20571: PPUSH
20572: LD_STRING DRum-Guard-1
20574: PPUSH
20575: CALL_OW 88
20579: GO 20605
20581: LD_INT 2
20583: DOUBLE
20584: EQUAL
20585: IFTRUE 20589
20587: GO 20604
20589: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
20590: LD_VAR 0 1
20594: PPUSH
20595: LD_STRING DRuf-Guard-1
20597: PPUSH
20598: CALL_OW 88
20602: GO 20605
20604: POP
// case Query ( SurrenderInfoPeople ) of 1 :
20605: LD_STRING SurrenderInfoPeople
20607: PPUSH
20608: CALL_OW 97
20612: PUSH
20613: LD_INT 1
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20722
20621: POP
// begin Query ( CaughtSquadInfo ) ;
20622: LD_STRING CaughtSquadInfo
20624: PPUSH
20625: CALL_OW 97
// for i in units do
20629: LD_ADDR_VAR 0 4
20633: PUSH
20634: LD_VAR 0 2
20638: PUSH
20639: FOR_IN
20640: IFFALSE 20697
// begin if Carry ( i ) then
20642: LD_VAR 0 4
20646: PPUSH
20647: CALL_OW 281
20651: IFFALSE 20668
// SetCargo ( i , mat_cans , 0 ) ;
20653: LD_VAR 0 4
20657: PPUSH
20658: LD_INT 1
20660: PPUSH
20661: LD_INT 0
20663: PPUSH
20664: CALL_OW 290
// SetSide ( i , 5 ) ;
20668: LD_VAR 0 4
20672: PPUSH
20673: LD_INT 5
20675: PPUSH
20676: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
20680: LD_VAR 0 4
20684: PPUSH
20685: LD_INT 113
20687: PPUSH
20688: LD_INT 17
20690: PPUSH
20691: CALL_OW 111
// end ;
20695: GO 20639
20697: POP
20698: POP
// ComMoveXY ( guard , 113 , 17 ) ;
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_INT 113
20706: PPUSH
20707: LD_INT 17
20709: PPUSH
20710: CALL_OW 111
// DialogueOff ;
20714: CALL_OW 7
// exit ;
20718: GO 21427
// end ; 2 :
20720: GO 20896
20722: LD_INT 2
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20895
20730: POP
// begin DialogueOff ;
20731: CALL_OW 7
// wait ( 0 0$2 ) ;
20735: LD_INT 70
20737: PPUSH
20738: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20742: LD_INT 6
20744: PPUSH
20745: LD_INT 2
20747: PPUSH
20748: LD_INT 2
20750: PPUSH
20751: LD_INT 1
20753: PPUSH
20754: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
20758: LD_VAR 0 1
20762: PPUSH
20763: LD_VAR 0 2
20767: PUSH
20768: LD_INT 1
20770: ARRAY
20771: PPUSH
20772: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20776: LD_VAR 0 1
20780: PPUSH
20781: CALL_OW 258
20785: PUSH
20786: LD_INT 1
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 20809
20794: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20795: LD_VAR 0 1
20799: PPUSH
20800: LD_STRING DRum-Fail-3
20802: PPUSH
20803: CALL_OW 88
20807: GO 20833
20809: LD_INT 2
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 20832
20817: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20818: LD_VAR 0 1
20822: PPUSH
20823: LD_STRING DRum-Fail-3
20825: PPUSH
20826: CALL_OW 88
20830: GO 20833
20832: POP
// wait ( 0 0$5 ) ;
20833: LD_INT 175
20835: PPUSH
20836: CALL_OW 67
// if IsOk ( guard ) then
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 302
20849: IFFALSE 20861
// isAlarm := true else
20851: LD_ADDR_EXP 17
20855: PUSH
20856: LD_INT 1
20858: ST_TO_ADDR
20859: GO 20893
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20861: LD_INT 6
20863: PPUSH
20864: LD_INT 2
20866: PPUSH
20867: LD_INT 0
20869: PPUSH
20870: LD_INT 1
20872: PPUSH
20873: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20877: LD_INT 3
20879: PPUSH
20880: LD_INT 2
20882: PPUSH
20883: LD_INT 0
20885: PPUSH
20886: LD_INT 1
20888: PPUSH
20889: CALL_OW 80
// end ; end ; end ;
20893: GO 20896
20895: POP
// end ; if Carry ( Heike ) then
20896: LD_EXP 41
20900: PPUSH
20901: CALL_OW 281
20905: IFFALSE 20981
// begin case GetSex ( guard ) of sex_male :
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL_OW 258
20916: PUSH
20917: LD_INT 1
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20940
20925: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
20926: LD_VAR 0 1
20930: PPUSH
20931: LD_STRING DRum-FoodFail-1
20933: PPUSH
20934: CALL_OW 88
20938: GO 20964
20940: LD_INT 2
20942: DOUBLE
20943: EQUAL
20944: IFTRUE 20948
20946: GO 20963
20948: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
20949: LD_VAR 0 1
20953: PPUSH
20954: LD_STRING DRuf-FoodFail-2
20956: PPUSH
20957: CALL_OW 88
20961: GO 20964
20963: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
20964: LD_EXP 41
20968: PPUSH
20969: LD_INT 1
20971: PPUSH
20972: LD_INT 0
20974: PPUSH
20975: CALL_OW 290
// end else
20979: GO 21038
// begin case GetSex ( guard ) of sex_male :
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 258
20990: PUSH
20991: LD_INT 1
20993: DOUBLE
20994: EQUAL
20995: IFTRUE 20999
20997: GO 21014
20999: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
21000: LD_VAR 0 1
21004: PPUSH
21005: LD_STRING DRum-Seen-1
21007: PPUSH
21008: CALL_OW 88
21012: GO 21038
21014: LD_INT 2
21016: DOUBLE
21017: EQUAL
21018: IFTRUE 21022
21020: GO 21037
21022: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
21023: LD_VAR 0 1
21027: PPUSH
21028: LD_STRING DRuf-Seen-1
21030: PPUSH
21031: CALL_OW 88
21035: GO 21038
21037: POP
// end ; alone := ( units = 1 ) ;
21038: LD_ADDR_VAR 0 5
21042: PUSH
21043: LD_VAR 0 2
21047: PUSH
21048: LD_INT 1
21050: EQUAL
21051: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
21052: LD_STRING SurrenderInfo
21054: PPUSH
21055: CALL_OW 97
21059: PUSH
21060: LD_INT 1
21062: DOUBLE
21063: EQUAL
21064: IFTRUE 21068
21066: GO 21237
21068: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
21069: LD_INT 23
21071: PPUSH
21072: CALL_OW 87
// RemoveUnit ( Heike ) ;
21076: LD_EXP 41
21080: PPUSH
21081: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
21085: LD_EXP 41
21089: PPUSH
21090: LD_INT 23
21092: PPUSH
21093: CALL_OW 52
// if not alone then
21097: LD_VAR 0 5
21101: NOT
21102: IFFALSE 21157
// for i in units diff Heike do
21104: LD_ADDR_VAR 0 4
21108: PUSH
21109: LD_VAR 0 2
21113: PUSH
21114: LD_EXP 41
21118: DIFF
21119: PUSH
21120: FOR_IN
21121: IFFALSE 21155
// begin RemoveUnit ( i ) ;
21123: LD_VAR 0 4
21127: PPUSH
21128: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
21132: LD_VAR 0 4
21136: PPUSH
21137: LD_INT 114
21139: PPUSH
21140: LD_INT 17
21142: PPUSH
21143: LD_INT 10
21145: PPUSH
21146: LD_INT 0
21148: PPUSH
21149: CALL_OW 50
// end ;
21153: GO 21120
21155: POP
21156: POP
// wait ( 0 0$0.3 ) ;
21157: LD_INT 10
21159: PPUSH
21160: CALL_OW 67
// if alone then
21164: LD_VAR 0 5
21168: IFFALSE 21179
// Query ( CaughtInfoAlone ) else
21170: LD_STRING CaughtInfoAlone
21172: PPUSH
21173: CALL_OW 97
21177: GO 21186
// Query ( CaughtInfo ) ;
21179: LD_STRING CaughtInfo
21181: PPUSH
21182: CALL_OW 97
// wait ( 0 0$1 ) ;
21186: LD_INT 35
21188: PPUSH
21189: CALL_OW 67
// StartLockerMinigame ;
21193: CALL 19494 0 0
// Say ( Heike , DH-Reset ) ;
21197: LD_EXP 41
21201: PPUSH
21202: LD_STRING DH-Reset
21204: PPUSH
21205: CALL_OW 88
// DialogueOff ;
21209: CALL_OW 7
// InGameOff ;
21213: CALL_OW 9
// ComExitBuilding ( Heike ) ;
21217: LD_EXP 41
21221: PPUSH
21222: CALL_OW 122
// ComFree ( guard ) ;
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 139
// end ; 2 :
21235: GO 21419
21237: LD_INT 2
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21418
21245: POP
// begin Say ( Heike , DH-Guard-2 ) ;
21246: LD_EXP 41
21250: PPUSH
21251: LD_STRING DH-Guard-2
21253: PPUSH
21254: CALL_OW 88
// DialogueOff ;
21258: CALL_OW 7
// wait ( 0 0$2 ) ;
21262: LD_INT 70
21264: PPUSH
21265: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21269: LD_INT 6
21271: PPUSH
21272: LD_INT 2
21274: PPUSH
21275: LD_INT 2
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
21285: LD_VAR 0 1
21289: PPUSH
21290: LD_EXP 41
21294: PPUSH
21295: CALL_OW 115
// case GetSex ( guard ) of sex_male :
21299: LD_VAR 0 1
21303: PPUSH
21304: CALL_OW 258
21308: PUSH
21309: LD_INT 1
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 21332
21317: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21318: LD_VAR 0 1
21322: PPUSH
21323: LD_STRING DRum-Fail-3
21325: PPUSH
21326: CALL_OW 88
21330: GO 21356
21332: LD_INT 2
21334: DOUBLE
21335: EQUAL
21336: IFTRUE 21340
21338: GO 21355
21340: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
21341: LD_VAR 0 1
21345: PPUSH
21346: LD_STRING DRum-Fail-3
21348: PPUSH
21349: CALL_OW 88
21353: GO 21356
21355: POP
// wait ( 0 0$5 ) ;
21356: LD_INT 175
21358: PPUSH
21359: CALL_OW 67
// if IsOk ( guard ) then
21363: LD_VAR 0 1
21367: PPUSH
21368: CALL_OW 302
21372: IFFALSE 21384
// isAlarm := true else
21374: LD_ADDR_EXP 17
21378: PUSH
21379: LD_INT 1
21381: ST_TO_ADDR
21382: GO 21416
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
21384: LD_INT 6
21386: PPUSH
21387: LD_INT 2
21389: PPUSH
21390: LD_INT 0
21392: PPUSH
21393: LD_INT 1
21395: PPUSH
21396: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
21400: LD_INT 3
21402: PPUSH
21403: LD_INT 2
21405: PPUSH
21406: LD_INT 0
21408: PPUSH
21409: LD_INT 1
21411: PPUSH
21412: CALL_OW 80
// end ; end ; end ;
21416: GO 21419
21418: POP
// blockPatrolThread := false ;
21419: LD_ADDR_EXP 38
21423: PUSH
21424: LD_INT 0
21426: ST_TO_ADDR
// end ;
21427: LD_VAR 0 3
21431: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
21432: LD_EXP 14
21436: PPUSH
21437: LD_INT 22
21439: PUSH
21440: LD_INT 5
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 3
21449: PUSH
21450: LD_INT 101
21452: PUSH
21453: LD_INT 6
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: LD_INT 92
21466: PUSH
21467: LD_INT 113
21469: PUSH
21470: LD_INT 16
21472: PUSH
21473: LD_INT 12
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: PUSH
21482: LD_INT 91
21484: PUSH
21485: LD_EXP 41
21489: PUSH
21490: LD_INT 6
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: PPUSH
21504: CALL_OW 72
21508: PUSH
21509: LD_EXP 30
21513: NOT
21514: AND
21515: IFFALSE 21620
21517: GO 21519
21519: DISABLE
21520: LD_INT 0
21522: PPUSH
// begin enable ;
21523: ENABLE
// DialogueOn ;
21524: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
21528: LD_EXP 41
21532: PPUSH
21533: LD_STRING DH-Join-
21535: PUSH
21536: LD_INT 1
21538: PPUSH
21539: LD_INT 3
21541: PPUSH
21542: CALL_OW 12
21546: STR
21547: PPUSH
21548: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
21552: LD_ADDR_VAR 0 1
21556: PUSH
21557: LD_EXP 14
21561: PPUSH
21562: LD_INT 22
21564: PUSH
21565: LD_INT 5
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 91
21574: PUSH
21575: LD_EXP 41
21579: PUSH
21580: LD_INT 10
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PPUSH
21592: CALL_OW 72
21596: PUSH
21597: FOR_IN
21598: IFFALSE 21614
// SetSide ( i , 2 ) ;
21600: LD_VAR 0 1
21604: PPUSH
21605: LD_INT 2
21607: PPUSH
21608: CALL_OW 235
21612: GO 21597
21614: POP
21615: POP
// DialogueOff ;
21616: CALL_OW 7
// end ; end_of_file
21620: PPOPN 1
21622: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
21623: LD_EXP 17
21627: PUSH
21628: LD_EXP 5
21632: AND
21633: IFFALSE 21934
21635: GO 21637
21637: DISABLE
21638: LD_INT 0
21640: PPUSH
21641: PPUSH
21642: PPUSH
// begin DialogueOn ;
21643: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
21647: LD_EXP 41
21651: PPUSH
21652: LD_STRING DH-Alarm-1
21654: PPUSH
21655: CALL_OW 88
// DialogueOff ;
21659: CALL_OW 7
// PlaySoundXY ( - 1 , - 1 , alarm ) ;
21663: LD_INT 1
21665: NEG
21666: PPUSH
21667: LD_INT 1
21669: NEG
21670: PPUSH
21671: LD_STRING alarm
21673: PPUSH
21674: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
21678: LD_INT 3
21680: PPUSH
21681: LD_INT 2
21683: PPUSH
21684: LD_INT 2
21686: PPUSH
21687: LD_INT 1
21689: PPUSH
21690: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
21694: LD_INT 6
21696: PPUSH
21697: LD_INT 2
21699: PPUSH
21700: LD_INT 2
21702: PPUSH
21703: LD_INT 1
21705: PPUSH
21706: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
21710: LD_ADDR_VAR 0 2
21714: PUSH
21715: LD_INT 107
21717: PUSH
21718: LD_INT 39
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PUSH
21725: LD_INT 143
21727: PUSH
21728: LD_INT 33
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 180
21737: PUSH
21738: LD_INT 115
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: PUSH
21745: LD_INT 96
21747: PUSH
21748: LD_INT 90
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 59
21757: PUSH
21758: LD_INT 52
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 16
21767: PUSH
21768: LD_INT 15
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 90
21777: PUSH
21778: LD_INT 120
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
21794: LD_ADDR_VAR 0 3
21798: PUSH
21799: LD_INT 22
21801: PUSH
21802: LD_INT 6
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 25
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// for i in tmp do
21828: LD_ADDR_VAR 0 1
21832: PUSH
21833: LD_VAR 0 3
21837: PUSH
21838: FOR_IN
21839: IFFALSE 21907
// begin ComExit ( i ) ;
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL 65243 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
21850: LD_VAR 0 1
21854: PPUSH
21855: LD_VAR 0 2
21859: PUSH
21860: LD_VAR 0 1
21864: PUSH
21865: LD_INT 7
21867: MOD
21868: PUSH
21869: LD_INT 1
21871: PLUS
21872: ARRAY
21873: PUSH
21874: LD_INT 1
21876: ARRAY
21877: PPUSH
21878: LD_VAR 0 2
21882: PUSH
21883: LD_VAR 0 1
21887: PUSH
21888: LD_INT 7
21890: MOD
21891: PUSH
21892: LD_INT 1
21894: PLUS
21895: ARRAY
21896: PUSH
21897: LD_INT 2
21899: ARRAY
21900: PPUSH
21901: CALL_OW 174
// end ;
21905: GO 21838
21907: POP
21908: POP
// Explode ;
21909: CALL 21937 0 0
// wait ( 0 0$45 ) ;
21913: LD_INT 1575
21915: PPUSH
21916: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
21920: LD_VAR 0 3
21924: PPUSH
21925: LD_EXP 41
21929: PPUSH
21930: CALL_OW 175
// end ;
21934: PPOPN 3
21936: END
// export function Explode ; var i , x , y , j ; begin
21937: LD_INT 0
21939: PPUSH
21940: PPUSH
21941: PPUSH
21942: PPUSH
21943: PPUSH
// if hasExplosionsInFactory then
21944: LD_EXP 7
21948: IFFALSE 21968
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
21950: LD_ADDR_EXP 29
21954: PUSH
21955: LD_EXP 29
21959: PPUSH
21960: LD_INT 61
21962: PPUSH
21963: CALL 64845 0 2
21967: ST_TO_ADDR
// if explosivePlantedList then
21968: LD_EXP 29
21972: IFFALSE 22120
// begin for i in explosivePlantedList do
21974: LD_ADDR_VAR 0 2
21978: PUSH
21979: LD_EXP 29
21983: PUSH
21984: FOR_IN
21985: IFFALSE 22088
// begin x := GetX ( i ) ;
21987: LD_ADDR_VAR 0 3
21991: PUSH
21992: LD_VAR 0 2
21996: PPUSH
21997: CALL_OW 250
22001: ST_TO_ADDR
// y := GetY ( i ) ;
22002: LD_ADDR_VAR 0 4
22006: PUSH
22007: LD_VAR 0 2
22011: PPUSH
22012: CALL_OW 251
22016: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
22017: LD_ADDR_VAR 0 5
22021: PUSH
22022: LD_INT 1
22024: PUSH
22025: LD_INT 3
22027: PUSH
22028: LD_INT 5
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: PUSH
22036: FOR_IN
22037: IFFALSE 22084
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
22039: LD_VAR 0 3
22043: PPUSH
22044: LD_VAR 0 5
22048: PPUSH
22049: LD_INT 2
22051: PPUSH
22052: CALL_OW 272
22056: PPUSH
22057: LD_VAR 0 4
22061: PPUSH
22062: LD_VAR 0 5
22066: PPUSH
22067: LD_INT 2
22069: PPUSH
22070: CALL_OW 273
22074: PPUSH
22075: LD_INT 1
22077: PPUSH
22078: CALL_OW 453
22082: GO 22036
22084: POP
22085: POP
// end ;
22086: GO 21984
22088: POP
22089: POP
// Say ( Heike , DH-End-2 ) ;
22090: LD_EXP 41
22094: PPUSH
22095: LD_STRING DH-End-2
22097: PPUSH
22098: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
22102: LD_INT 175
22104: PUSH
22105: LD_EXP 29
22109: PPUSH
22110: CALL 29498 0 1
22114: MUL
22115: PPUSH
22116: CALL_OW 67
// end ; if not isAlarm then
22120: LD_EXP 17
22124: NOT
22125: IFFALSE 22135
// isAlarm := true ;
22127: LD_ADDR_EXP 17
22131: PUSH
22132: LD_INT 1
22134: ST_TO_ADDR
// end ;
22135: LD_VAR 0 1
22139: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
22140: LD_INT 22
22142: PUSH
22143: LD_INT 2
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: LD_INT 21
22152: PUSH
22153: LD_INT 2
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: LD_INT 101
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 101
22175: PUSH
22176: LD_INT 6
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: LIST
22192: PPUSH
22193: CALL_OW 69
22197: IFFALSE 22210
22199: GO 22201
22201: DISABLE
// isAlarm := true ; end_of_file
22202: LD_ADDR_EXP 17
22206: PUSH
22207: LD_INT 1
22209: ST_TO_ADDR
22210: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
22211: LD_EXP 14
22215: PPUSH
22216: LD_INT 22
22218: PUSH
22219: LD_INT 2
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: PPUSH
22226: CALL_OW 72
22230: PUSH
22231: LD_INT 3
22233: GREATER
22234: PUSH
22235: LD_EXP 17
22239: NOT
22240: AND
22241: IFFALSE 26115
22243: GO 22245
22245: DISABLE
22246: LD_INT 0
22248: PPUSH
22249: PPUSH
22250: PPUSH
22251: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
22252: LD_EXP 61
22256: PPUSH
22257: LD_INT 155
22259: PPUSH
22260: LD_INT 68
22262: PPUSH
22263: LD_INT 0
22265: PPUSH
22266: CALL_OW 48
// wait ( 0 0$1 ) ;
22270: LD_INT 35
22272: PPUSH
22273: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22277: LD_INT 35
22279: PPUSH
22280: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22284: LD_EXP 61
22288: PPUSH
22289: CALL_OW 314
22293: NOT
22294: IFFALSE 22310
// ComMoveUnit ( ruDisturb , Heike ) ;
22296: LD_EXP 61
22300: PPUSH
22301: LD_EXP 41
22305: PPUSH
22306: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22310: LD_EXP 41
22314: PPUSH
22315: LD_EXP 61
22319: PPUSH
22320: CALL_OW 296
22324: PUSH
22325: LD_INT 6
22327: LESS
22328: PUSH
22329: LD_EXP 61
22333: PPUSH
22334: CALL_OW 302
22338: AND
22339: IFFALSE 22277
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22341: LD_EXP 14
22345: PPUSH
22346: LD_INT 22
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 91
22358: PUSH
22359: LD_EXP 61
22363: PUSH
22364: LD_INT 8
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 2
22374: PUSH
22375: LD_INT 25
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 25
22387: PUSH
22388: LD_INT 11
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 25
22397: PUSH
22398: LD_INT 32
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 25
22407: PUSH
22408: LD_INT 34
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: PPUSH
22427: CALL_OW 72
22431: IFFALSE 22441
// isAlarm := true ;
22433: LD_ADDR_EXP 17
22437: PUSH
22438: LD_INT 1
22440: ST_TO_ADDR
// if isAlarm then
22441: LD_EXP 17
22445: IFFALSE 22449
// exit ;
22447: GO 26115
// DialogueOn ;
22449: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
22453: LD_EXP 61
22457: PPUSH
22458: LD_STRING DMcn-Interrupt-1
22460: PPUSH
22461: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
22465: LD_EXP 61
22469: PPUSH
22470: LD_STRING DMcn-Interrupt-2
22472: PPUSH
22473: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
22477: LD_EXP 61
22481: PPUSH
22482: LD_STRING DMcn-Interrupt-3
22484: PPUSH
22485: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
22489: LD_EXP 41
22493: PPUSH
22494: LD_STRING DH-Interrupt-a-4
22496: PPUSH
22497: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
22501: LD_EXP 61
22505: PPUSH
22506: LD_STRING DMcn-Interrupt-a-5
22508: PPUSH
22509: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
22513: LD_EXP 41
22517: PPUSH
22518: LD_STRING DH-Interrupt-a-6
22520: PPUSH
22521: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
22525: LD_EXP 61
22529: PPUSH
22530: LD_STRING DMcn-Interrupt-a-7
22532: PPUSH
22533: CALL_OW 88
// DialogueOff ;
22537: CALL_OW 7
// hasMuchin := true ;
22541: LD_ADDR_EXP 30
22545: PUSH
22546: LD_INT 1
22548: ST_TO_ADDR
// Query ( MuchinInfo ) ;
22549: LD_STRING MuchinInfo
22551: PPUSH
22552: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
22556: LD_STRING M2a
22558: PPUSH
22559: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
22563: LD_INT 105
22565: PPUSH
22566: LD_INT 55
22568: PPUSH
22569: CALL_OW 428
22573: PPUSH
22574: LD_INT 2
22576: PPUSH
22577: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
22581: LD_INT 115
22583: PPUSH
22584: LD_INT 65
22586: PPUSH
22587: CALL_OW 428
22591: PPUSH
22592: LD_INT 2
22594: PPUSH
22595: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
22599: LD_INT 109
22601: PPUSH
22602: LD_INT 59
22604: PPUSH
22605: LD_INT 2
22607: PPUSH
22608: LD_INT 10
22610: NEG
22611: PPUSH
22612: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
22616: LD_INT 109
22618: PPUSH
22619: LD_INT 59
22621: PPUSH
22622: CALL_OW 84
// wait ( 0 0$2 ) ;
22626: LD_INT 70
22628: PPUSH
22629: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
22633: LD_INT 109
22635: PPUSH
22636: LD_INT 59
22638: PPUSH
22639: LD_INT 2
22641: PPUSH
22642: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
22646: LD_INT 35
22648: PPUSH
22649: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22653: LD_EXP 61
22657: PPUSH
22658: LD_EXP 41
22662: PPUSH
22663: CALL_OW 296
22667: PUSH
22668: LD_INT 6
22670: GREATER
22671: IFFALSE 22687
// ComMoveUnit ( ruDisturb , Heike ) ;
22673: LD_EXP 61
22677: PPUSH
22678: LD_EXP 41
22682: PPUSH
22683: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22687: LD_EXP 14
22691: PPUSH
22692: LD_INT 22
22694: PUSH
22695: LD_INT 2
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 91
22704: PUSH
22705: LD_EXP 61
22709: PUSH
22710: LD_INT 8
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 25
22733: PUSH
22734: LD_INT 11
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 25
22743: PUSH
22744: LD_INT 32
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 25
22753: PUSH
22754: LD_INT 34
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: LIST
22772: PPUSH
22773: CALL_OW 72
22777: IFFALSE 22789
// begin isAlarm := true ;
22779: LD_ADDR_EXP 17
22783: PUSH
22784: LD_INT 1
22786: ST_TO_ADDR
// exit ;
22787: GO 26115
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
22789: LD_INT 105
22791: PPUSH
22792: LD_INT 55
22794: PPUSH
22795: CALL_OW 428
22799: NOT
22800: PUSH
22801: LD_INT 115
22803: PPUSH
22804: LD_INT 65
22806: PPUSH
22807: CALL_OW 428
22811: NOT
22812: OR
22813: IFFALSE 22825
// begin isAlarm := true ;
22815: LD_ADDR_EXP 17
22819: PUSH
22820: LD_INT 1
22822: ST_TO_ADDR
// exit ;
22823: GO 26115
// end ; until not BuildingsInProgress ( 2 ) ;
22825: LD_INT 2
22827: PPUSH
22828: CALL_OW 345
22832: NOT
22833: IFFALSE 22646
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
22835: LD_INT 105
22837: PPUSH
22838: LD_INT 55
22840: PPUSH
22841: CALL_OW 428
22845: PPUSH
22846: LD_INT 3
22848: PPUSH
22849: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
22853: LD_INT 115
22855: PPUSH
22856: LD_INT 65
22858: PPUSH
22859: CALL_OW 428
22863: PPUSH
22864: LD_INT 3
22866: PPUSH
22867: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
22871: LD_STRING M2a-out
22873: PPUSH
22874: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22878: LD_EXP 61
22882: PPUSH
22883: LD_INT 2
22885: PPUSH
22886: CALL_OW 120
// wait ( 0 0$3 ) ;
22890: LD_INT 105
22892: PPUSH
22893: CALL_OW 67
// hasMuchin := false ;
22897: LD_ADDR_EXP 30
22901: PUSH
22902: LD_INT 0
22904: ST_TO_ADDR
// wait ( 2 2$00 ) ;
22905: LD_INT 4200
22907: PPUSH
22908: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22912: LD_INT 35
22914: PPUSH
22915: CALL_OW 67
// if not HasTask ( ruDisturb ) then
22919: LD_EXP 61
22923: PPUSH
22924: CALL_OW 314
22928: NOT
22929: IFFALSE 22945
// ComMoveUnit ( ruDisturb , Heike ) ;
22931: LD_EXP 61
22935: PPUSH
22936: LD_EXP 41
22940: PPUSH
22941: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
22945: LD_EXP 41
22949: PPUSH
22950: LD_EXP 61
22954: PPUSH
22955: CALL_OW 296
22959: PUSH
22960: LD_INT 6
22962: LESS
22963: PUSH
22964: LD_EXP 61
22968: PPUSH
22969: CALL_OW 302
22973: AND
22974: IFFALSE 22912
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22976: LD_EXP 14
22980: PPUSH
22981: LD_INT 22
22983: PUSH
22984: LD_INT 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 91
22993: PUSH
22994: LD_EXP 61
22998: PUSH
22999: LD_INT 8
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: LD_INT 2
23009: PUSH
23010: LD_INT 25
23012: PUSH
23013: LD_INT 1
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: LD_INT 25
23022: PUSH
23023: LD_INT 11
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 25
23032: PUSH
23033: LD_INT 32
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 25
23042: PUSH
23043: LD_INT 34
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: LIST
23061: PPUSH
23062: CALL_OW 72
23066: IFFALSE 23076
// isAlarm := true ;
23068: LD_ADDR_EXP 17
23072: PUSH
23073: LD_INT 1
23075: ST_TO_ADDR
// if isAlarm then
23076: LD_EXP 17
23080: IFFALSE 23084
// exit ;
23082: GO 26115
// DialogueOn ;
23084: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23088: LD_EXP 61
23092: PPUSH
23093: LD_STRING DMcn-Interrupt-1
23095: PPUSH
23096: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23100: LD_EXP 61
23104: PPUSH
23105: LD_STRING DMcn-Interrupt-2
23107: PPUSH
23108: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
23112: LD_INT 176
23114: PPUSH
23115: LD_INT 54
23117: PPUSH
23118: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
23122: LD_INT 176
23124: PPUSH
23125: LD_INT 54
23127: PPUSH
23128: LD_INT 2
23130: PPUSH
23131: LD_INT 6
23133: NEG
23134: PPUSH
23135: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
23139: LD_INT 10
23141: PPUSH
23142: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
23146: LD_EXP 61
23150: PPUSH
23151: LD_STRING DMcn-Interrupt-b-3
23153: PPUSH
23154: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
23158: LD_EXP 41
23162: PPUSH
23163: LD_STRING DH-Interrupt-b-4
23165: PPUSH
23166: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
23170: LD_EXP 61
23174: PPUSH
23175: LD_STRING DMcn-Interrupt-b-5
23177: PPUSH
23178: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
23182: LD_EXP 41
23186: PPUSH
23187: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
23191: LD_INT 176
23193: PPUSH
23194: LD_INT 54
23196: PPUSH
23197: LD_INT 2
23199: PPUSH
23200: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
23204: LD_EXP 61
23208: PPUSH
23209: LD_STRING DMcn-Interrupt-b-6
23211: PPUSH
23212: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
23216: LD_EXP 41
23220: PPUSH
23221: LD_STRING DH-Interrupt-b-7
23223: PPUSH
23224: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
23228: LD_EXP 61
23232: PPUSH
23233: LD_STRING DMcn-Interrupt-b-8
23235: PPUSH
23236: CALL_OW 88
// DialogueOff ;
23240: CALL_OW 7
// Query ( MuchinInfo ) ;
23244: LD_STRING MuchinInfo
23246: PPUSH
23247: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
23251: LD_STRING M2b
23253: PPUSH
23254: CALL_OW 337
// hasMuchin := true ;
23258: LD_ADDR_EXP 30
23262: PUSH
23263: LD_INT 1
23265: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23266: LD_INT 35
23268: PPUSH
23269: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23273: LD_EXP 61
23277: PPUSH
23278: LD_EXP 41
23282: PPUSH
23283: CALL_OW 296
23287: PUSH
23288: LD_INT 6
23290: GREATER
23291: IFFALSE 23307
// ComMoveUnit ( ruDisturb , Heike ) ;
23293: LD_EXP 61
23297: PPUSH
23298: LD_EXP 41
23302: PPUSH
23303: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23307: LD_EXP 14
23311: PPUSH
23312: LD_INT 22
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: LD_INT 91
23324: PUSH
23325: LD_EXP 61
23329: PUSH
23330: LD_INT 8
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: LD_INT 25
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: LD_INT 25
23353: PUSH
23354: LD_INT 11
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: PUSH
23361: LD_INT 25
23363: PUSH
23364: LD_INT 32
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 25
23373: PUSH
23374: LD_INT 34
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: PPUSH
23393: CALL_OW 72
23397: IFFALSE 23409
// begin isAlarm := true ;
23399: LD_ADDR_EXP 17
23403: PUSH
23404: LD_INT 1
23406: ST_TO_ADDR
// exit ;
23407: GO 26115
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
23409: LD_EXP 41
23413: PPUSH
23414: LD_INT 61
23416: PPUSH
23417: CALL_OW 296
23421: PUSH
23422: LD_INT 4
23424: LESS
23425: IFFALSE 23266
// InGameOn ;
23427: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
23431: LD_INT 173
23433: PPUSH
23434: LD_INT 54
23436: PPUSH
23437: LD_INT 2
23439: PPUSH
23440: LD_INT 8
23442: NEG
23443: PPUSH
23444: CALL_OW 330
// SetSide ( Heike , 3 ) ;
23448: LD_EXP 41
23452: PPUSH
23453: LD_INT 3
23455: PPUSH
23456: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
23460: LD_EXP 41
23464: PPUSH
23465: LD_INT 61
23467: PPUSH
23468: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
23472: LD_EXP 61
23476: PPUSH
23477: LD_INT 61
23479: PPUSH
23480: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
23484: LD_EXP 48
23488: PUSH
23489: LD_EXP 14
23493: IN
23494: PUSH
23495: LD_EXP 48
23499: PPUSH
23500: LD_INT 61
23502: PPUSH
23503: CALL_OW 296
23507: PUSH
23508: LD_INT 12
23510: LESS
23511: AND
23512: IFFALSE 23556
// begin SetSide ( Markov , 3 ) ;
23514: LD_EXP 48
23518: PPUSH
23519: LD_INT 3
23521: PPUSH
23522: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
23526: LD_EXP 48
23530: PPUSH
23531: LD_INT 61
23533: PPUSH
23534: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
23538: LD_INT 35
23540: PPUSH
23541: CALL_OW 67
// until IsInUnit ( Markov ) ;
23545: LD_EXP 48
23549: PPUSH
23550: CALL_OW 310
23554: IFFALSE 23538
// end ; repeat wait ( 0 0$1 ) ;
23556: LD_INT 35
23558: PPUSH
23559: CALL_OW 67
// until IsInUnit ( Heike ) ;
23563: LD_EXP 41
23567: PPUSH
23568: CALL_OW 310
23572: IFFALSE 23556
// SetClass ( Heike , class_mechanic ) ;
23574: LD_EXP 41
23578: PPUSH
23579: LD_INT 3
23581: PPUSH
23582: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
23586: LD_INT 61
23588: PPUSH
23589: LD_INT 21
23591: PPUSH
23592: LD_INT 3
23594: PPUSH
23595: LD_INT 3
23597: PPUSH
23598: LD_INT 43
23600: PPUSH
23601: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
23605: LD_EXP 31
23609: PUSH
23610: LD_EXP 48
23614: PUSH
23615: LD_EXP 14
23619: IN
23620: PUSH
23621: LD_EXP 48
23625: PPUSH
23626: CALL_OW 310
23630: PUSH
23631: LD_INT 61
23633: EQUAL
23634: OR
23635: AND
23636: IFFALSE 24104
// begin wait ( 0 0$5 ) ;
23638: LD_INT 175
23640: PPUSH
23641: CALL_OW 67
// SetSide ( Heike , 2 ) ;
23645: LD_EXP 41
23649: PPUSH
23650: LD_INT 2
23652: PPUSH
23653: CALL_OW 235
// SetSide ( Markov , 2 ) ;
23657: LD_EXP 48
23661: PPUSH
23662: LD_INT 2
23664: PPUSH
23665: CALL_OW 235
// if not Markov in heikeSquad then
23669: LD_EXP 48
23673: PUSH
23674: LD_EXP 14
23678: IN
23679: NOT
23680: IFFALSE 23702
// heikeSquad := Join ( heikeSquad , Markov ) ;
23682: LD_ADDR_EXP 14
23686: PUSH
23687: LD_EXP 14
23691: PPUSH
23692: LD_EXP 48
23696: PPUSH
23697: CALL 64845 0 2
23701: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
23702: LD_EXP 48
23706: PPUSH
23707: LD_STRING DMar-Factory-1
23709: PPUSH
23710: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
23714: LD_INT 61
23716: PPUSH
23717: LD_INT 99
23719: PPUSH
23720: CALL_OW 329
// game_speed := 4 ;
23724: LD_ADDR_OWVAR 65
23728: PUSH
23729: LD_INT 4
23731: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
23732: LD_EXP 61
23736: PPUSH
23737: CALL_OW 122
// ComExitBuilding ( Markov ) ;
23741: LD_EXP 48
23745: PPUSH
23746: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
23750: LD_EXP 61
23754: PPUSH
23755: LD_INT 171
23757: PPUSH
23758: LD_INT 51
23760: PPUSH
23761: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
23765: LD_EXP 48
23769: PPUSH
23770: LD_INT 167
23772: PPUSH
23773: LD_INT 50
23775: PPUSH
23776: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
23780: LD_EXP 48
23784: PPUSH
23785: LD_EXP 61
23789: PPUSH
23790: CALL_OW 179
// wait ( 0 0$5 ) ;
23794: LD_INT 175
23796: PPUSH
23797: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
23801: LD_EXP 48
23805: PPUSH
23806: LD_STRING DMar-Factory-2
23808: PPUSH
23809: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_INT 22
23820: PUSH
23821: LD_INT 3
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PUSH
23828: LD_INT 33
23830: PUSH
23831: LD_INT 3
23833: PUSH
23834: EMPTY
23835: LIST
23836: LIST
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PPUSH
23842: CALL_OW 69
23846: PUSH
23847: LD_INT 1
23849: ARRAY
23850: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
23851: LD_EXP 61
23855: PPUSH
23856: LD_VAR 0 2
23860: PPUSH
23861: CALL_OW 119
// async ;
23865: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
23866: LD_EXP 61
23870: PPUSH
23871: LD_STRING DMcn-Factory-3
23873: PPUSH
23874: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
23878: LD_VAR 0 2
23882: PPUSH
23883: LD_EXP 61
23887: PPUSH
23888: CALL_OW 115
// sync ;
23892: SYNC
// wait ( 0 0$1 ) ;
23893: LD_INT 35
23895: PPUSH
23896: CALL_OW 67
// KillUnit ( ruDisturb ) ;
23900: LD_EXP 61
23904: PPUSH
23905: CALL_OW 66
// SetSide ( veh , 7 ) ;
23909: LD_VAR 0 2
23913: PPUSH
23914: LD_INT 7
23916: PPUSH
23917: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_INT 84
23928: PPUSH
23929: LD_INT 38
23931: PPUSH
23932: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
23936: LD_EXP 62
23940: PUSH
23941: LD_INT 1
23943: ARRAY
23944: PPUSH
23945: CALL_OW 258
23949: PUSH
23950: LD_INT 1
23952: EQUAL
23953: IFFALSE 23973
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
23955: LD_EXP 62
23959: PUSH
23960: LD_INT 1
23962: ARRAY
23963: PPUSH
23964: LD_STRING DRum-Factory-4
23966: PPUSH
23967: CALL_OW 88
23971: GO 23989
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
23973: LD_EXP 62
23977: PUSH
23978: LD_INT 1
23980: ARRAY
23981: PPUSH
23982: LD_STRING DRuf-Factory-4
23984: PPUSH
23985: CALL_OW 88
// wait ( 0 0$1 ) ;
23989: LD_INT 35
23991: PPUSH
23992: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
23996: LD_EXP 62
24000: PPUSH
24001: LD_INT 26
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PPUSH
24011: CALL_OW 72
24015: PUSH
24016: LD_INT 1
24018: ARRAY
24019: PPUSH
24020: LD_STRING DRum-Factory-6
24022: PPUSH
24023: CALL_OW 88
// wait ( 0 0$2 ) ;
24027: LD_INT 70
24029: PPUSH
24030: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
24034: LD_EXP 41
24038: PPUSH
24039: LD_INT 33
24041: PPUSH
24042: CALL_OW 336
// ComExitBuilding ( Heike ) ;
24046: LD_EXP 41
24050: PPUSH
24051: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
24055: LD_EXP 41
24059: PPUSH
24060: LD_INT 168
24062: PPUSH
24063: LD_INT 54
24065: PPUSH
24066: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
24070: LD_INT 173
24072: PPUSH
24073: LD_INT 54
24075: PPUSH
24076: LD_INT 2
24078: PPUSH
24079: CALL_OW 331
// InGameOff ;
24083: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
24087: LD_STRING M2b-out
24089: PPUSH
24090: CALL_OW 337
// hasMuchin := false ;
24094: LD_ADDR_EXP 30
24098: PUSH
24099: LD_INT 0
24101: ST_TO_ADDR
// exit ;
24102: GO 26115
// end ; wait ( 0 0$5 ) ;
24104: LD_INT 175
24106: PPUSH
24107: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
24111: LD_INT 61
24113: PPUSH
24114: LD_INT 99
24116: PPUSH
24117: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
24121: LD_EXP 48
24125: PUSH
24126: LD_EXP 14
24130: IN
24131: PUSH
24132: LD_EXP 48
24136: PPUSH
24137: CALL_OW 255
24141: PUSH
24142: LD_INT 3
24144: EQUAL
24145: AND
24146: IFFALSE 24169
// begin SetSide ( Markov , 2 ) ;
24148: LD_EXP 48
24152: PPUSH
24153: LD_INT 2
24155: PPUSH
24156: CALL_OW 235
// ComExitBuilding ( Markov ) ;
24160: LD_EXP 48
24164: PPUSH
24165: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
24169: LD_EXP 41
24173: PPUSH
24174: LD_INT 2
24176: PPUSH
24177: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
24181: LD_EXP 41
24185: PPUSH
24186: LD_INT 33
24188: PPUSH
24189: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
24193: LD_EXP 61
24197: PPUSH
24198: CALL_OW 122
// ComExitBuilding ( Heike ) ;
24202: LD_EXP 41
24206: PPUSH
24207: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
24211: LD_EXP 41
24215: PPUSH
24216: LD_INT 168
24218: PPUSH
24219: LD_INT 54
24221: PPUSH
24222: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
24226: LD_INT 173
24228: PPUSH
24229: LD_INT 54
24231: PPUSH
24232: LD_INT 2
24234: PPUSH
24235: CALL_OW 331
// InGameOff ;
24239: CALL_OW 9
// wait ( 3 ) ;
24243: LD_INT 3
24245: PPUSH
24246: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24250: LD_EXP 61
24254: PPUSH
24255: LD_INT 2
24257: PPUSH
24258: CALL_OW 120
// wait ( 0 0$3 ) ;
24262: LD_INT 105
24264: PPUSH
24265: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
24269: LD_STRING M2b-out
24271: PPUSH
24272: CALL_OW 337
// hasMuchin := false ;
24276: LD_ADDR_EXP 30
24280: PUSH
24281: LD_INT 0
24283: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24284: LD_INT 4200
24286: PPUSH
24287: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24291: LD_INT 35
24293: PPUSH
24294: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24298: LD_EXP 61
24302: PPUSH
24303: CALL_OW 314
24307: NOT
24308: IFFALSE 24324
// ComMoveUnit ( ruDisturb , Heike ) ;
24310: LD_EXP 61
24314: PPUSH
24315: LD_EXP 41
24319: PPUSH
24320: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
24324: LD_EXP 41
24328: PPUSH
24329: LD_EXP 61
24333: PPUSH
24334: CALL_OW 296
24338: PUSH
24339: LD_INT 2
24341: LESS
24342: PUSH
24343: LD_EXP 61
24347: PPUSH
24348: CALL_OW 302
24352: AND
24353: IFFALSE 24291
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24355: LD_EXP 14
24359: PPUSH
24360: LD_INT 22
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 91
24372: PUSH
24373: LD_EXP 61
24377: PUSH
24378: LD_INT 8
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 2
24388: PUSH
24389: LD_INT 25
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 25
24401: PUSH
24402: LD_INT 11
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 25
24411: PUSH
24412: LD_INT 32
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 25
24421: PUSH
24422: LD_INT 34
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: PPUSH
24441: CALL_OW 72
24445: IFFALSE 24455
// isAlarm := true ;
24447: LD_ADDR_EXP 17
24451: PUSH
24452: LD_INT 1
24454: ST_TO_ADDR
// if isAlarm then
24455: LD_EXP 17
24459: IFFALSE 24463
// exit ;
24461: GO 26115
// ComTurnUnit ( Heike , ruDisturb ) ;
24463: LD_EXP 41
24467: PPUSH
24468: LD_EXP 61
24472: PPUSH
24473: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
24477: LD_EXP 61
24481: PPUSH
24482: LD_EXP 41
24486: PPUSH
24487: CALL_OW 119
// wait ( 3 ) ;
24491: LD_INT 3
24493: PPUSH
24494: CALL_OW 67
// for i := 1 to 3 do
24498: LD_ADDR_VAR 0 1
24502: PUSH
24503: DOUBLE
24504: LD_INT 1
24506: DEC
24507: ST_TO_ADDR
24508: LD_INT 3
24510: PUSH
24511: FOR_TO
24512: IFFALSE 24529
// CreateCratesArea ( 5 , cratesArea , false ) ;
24514: LD_INT 5
24516: PPUSH
24517: LD_INT 58
24519: PPUSH
24520: LD_INT 0
24522: PPUSH
24523: CALL_OW 55
24527: GO 24511
24529: POP
24530: POP
// uc_side := 3 ;
24531: LD_ADDR_OWVAR 20
24535: PUSH
24536: LD_INT 3
24538: ST_TO_ADDR
// uc_nation := nation_russian ;
24539: LD_ADDR_OWVAR 21
24543: PUSH
24544: LD_INT 3
24546: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
24547: LD_INT 21
24549: PPUSH
24550: LD_INT 3
24552: PPUSH
24553: LD_INT 1
24555: PPUSH
24556: LD_INT 51
24558: PPUSH
24559: LD_INT 100
24561: PPUSH
24562: CALL 32411 0 5
// veh := CreateVehicle ;
24566: LD_ADDR_VAR 0 2
24570: PUSH
24571: CALL_OW 45
24575: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
24576: LD_VAR 0 2
24580: PPUSH
24581: LD_INT 104
24583: PPUSH
24584: LD_INT 41
24586: PPUSH
24587: LD_INT 3
24589: PPUSH
24590: LD_INT 0
24592: PPUSH
24593: CALL 66985 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
24597: LD_VAR 0 2
24601: PPUSH
24602: LD_INT 1
24604: PPUSH
24605: LD_INT 100
24607: PPUSH
24608: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
24612: CALL_OW 44
24616: PPUSH
24617: LD_VAR 0 2
24621: PPUSH
24622: CALL_OW 52
// DialogueOn ;
24626: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24630: LD_EXP 61
24634: PPUSH
24635: LD_STRING DMcn-Interrupt-1
24637: PPUSH
24638: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24642: LD_EXP 61
24646: PPUSH
24647: LD_STRING DMcn-Interrupt-2
24649: PPUSH
24650: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
24654: LD_EXP 61
24658: PPUSH
24659: LD_STRING DMcn-Interrupt-c-3
24661: PPUSH
24662: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
24666: LD_INT 101
24668: PPUSH
24669: LD_INT 38
24671: PPUSH
24672: LD_INT 2
24674: PPUSH
24675: LD_INT 10
24677: NEG
24678: PPUSH
24679: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
24683: LD_INT 101
24685: PPUSH
24686: LD_INT 38
24688: PPUSH
24689: CALL_OW 84
// wait ( 0 0$2 ) ;
24693: LD_INT 70
24695: PPUSH
24696: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
24700: LD_INT 101
24702: PPUSH
24703: LD_INT 38
24705: PPUSH
24706: LD_INT 2
24708: PPUSH
24709: CALL_OW 331
// RemoveUnit ( veh ) ;
24713: LD_VAR 0 2
24717: PPUSH
24718: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
24722: LD_EXP 61
24726: PPUSH
24727: LD_STRING DMcn-Interrupt-c-4
24729: PPUSH
24730: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
24734: LD_EXP 41
24738: PPUSH
24739: LD_STRING DH-Interrupt-c-5
24741: PPUSH
24742: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
24746: LD_EXP 61
24750: PPUSH
24751: LD_STRING DMcn-Interrupt-c-6
24753: PPUSH
24754: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
24758: LD_EXP 41
24762: PPUSH
24763: LD_STRING DH-Interrupt-c-7
24765: PPUSH
24766: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
24770: LD_EXP 61
24774: PPUSH
24775: LD_STRING DMcn-Interrupt-c-8
24777: PPUSH
24778: CALL_OW 88
// DialogueOff ;
24782: CALL_OW 7
// hasMuchin := true ;
24786: LD_ADDR_EXP 30
24790: PUSH
24791: LD_INT 1
24793: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24794: LD_STRING MuchinInfo
24796: PPUSH
24797: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
24801: LD_STRING M2c
24803: PPUSH
24804: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
24808: LD_INT 35
24810: PPUSH
24811: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24815: LD_EXP 61
24819: PPUSH
24820: LD_EXP 41
24824: PPUSH
24825: CALL_OW 296
24829: PUSH
24830: LD_INT 6
24832: GREATER
24833: IFFALSE 24849
// ComMoveUnit ( ruDisturb , Heike ) ;
24835: LD_EXP 61
24839: PPUSH
24840: LD_EXP 41
24844: PPUSH
24845: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24849: LD_EXP 14
24853: PPUSH
24854: LD_INT 22
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 91
24866: PUSH
24867: LD_EXP 61
24871: PUSH
24872: LD_INT 8
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 25
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 25
24895: PUSH
24896: LD_INT 11
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 25
24905: PUSH
24906: LD_INT 32
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 25
24915: PUSH
24916: LD_INT 34
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 72
24939: IFFALSE 24951
// begin isAlarm := true ;
24941: LD_ADDR_EXP 17
24945: PUSH
24946: LD_INT 1
24948: ST_TO_ADDR
// exit ;
24949: GO 26115
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
24951: LD_EXP 14
24955: PUSH
24956: LD_EXP 41
24960: UNION
24961: PPUSH
24962: LD_INT 92
24964: PUSH
24965: LD_INT 100
24967: PUSH
24968: LD_INT 37
24970: PUSH
24971: LD_INT 6
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: PPUSH
24980: CALL_OW 72
24984: IFFALSE 24808
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
24986: LD_INT 100
24988: PPUSH
24989: LD_INT 37
24991: PPUSH
24992: LD_INT 3
24994: PPUSH
24995: LD_INT 10
24997: NEG
24998: PPUSH
24999: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
25003: LD_ADDR_VAR 0 3
25007: PUSH
25008: LD_EXP 14
25012: PUSH
25013: LD_EXP 41
25017: UNION
25018: PPUSH
25019: LD_INT 25
25021: PUSH
25022: LD_INT 33
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 91
25031: PUSH
25032: LD_INT 6
25034: PUSH
25035: LD_INT 12
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PPUSH
25047: CALL_OW 72
25051: ST_TO_ADDR
// for i in tmp do
25052: LD_ADDR_VAR 0 1
25056: PUSH
25057: LD_VAR 0 3
25061: PUSH
25062: FOR_IN
25063: IFFALSE 25094
// begin SetSide ( i , 3 ) ;
25065: LD_VAR 0 1
25069: PPUSH
25070: LD_INT 3
25072: PPUSH
25073: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
25077: LD_VAR 0 1
25081: PPUSH
25082: LD_INT 101
25084: PPUSH
25085: LD_INT 38
25087: PPUSH
25088: CALL_OW 111
// end ;
25092: GO 25062
25094: POP
25095: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
25096: LD_EXP 61
25100: PPUSH
25101: LD_INT 104
25103: PPUSH
25104: LD_INT 37
25106: PPUSH
25107: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25111: LD_EXP 61
25115: PPUSH
25116: LD_EXP 41
25120: PPUSH
25121: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
25125: LD_INT 35
25127: PPUSH
25128: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
25132: LD_ADDR_VAR 0 4
25136: PUSH
25137: LD_INT 58
25139: PPUSH
25140: CALL_OW 435
25144: ST_TO_ADDR
// for i in tmp do
25145: LD_ADDR_VAR 0 1
25149: PUSH
25150: LD_VAR 0 3
25154: PUSH
25155: FOR_IN
25156: IFFALSE 25199
// if not HasTask ( i ) then
25158: LD_VAR 0 1
25162: PPUSH
25163: CALL_OW 314
25167: NOT
25168: IFFALSE 25197
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
25170: LD_VAR 0 1
25174: PPUSH
25175: LD_VAR 0 4
25179: PUSH
25180: LD_INT 1
25182: ARRAY
25183: PPUSH
25184: LD_VAR 0 4
25188: PUSH
25189: LD_INT 2
25191: ARRAY
25192: PPUSH
25193: CALL_OW 117
25197: GO 25155
25199: POP
25200: POP
// until not cr ;
25201: LD_VAR 0 4
25205: NOT
25206: IFFALSE 25125
// wait ( 0 0$2 ) ;
25208: LD_INT 70
25210: PPUSH
25211: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
25215: LD_INT 100
25217: PPUSH
25218: LD_INT 37
25220: PPUSH
25221: LD_INT 3
25223: PPUSH
25224: CALL_OW 331
// for i in tmp do
25228: LD_ADDR_VAR 0 1
25232: PUSH
25233: LD_VAR 0 3
25237: PUSH
25238: FOR_IN
25239: IFFALSE 25255
// SetSide ( i , 2 ) ;
25241: LD_VAR 0 1
25245: PPUSH
25246: LD_INT 2
25248: PPUSH
25249: CALL_OW 235
25253: GO 25238
25255: POP
25256: POP
// if Kaia in tmp then
25257: LD_EXP 46
25261: PUSH
25262: LD_VAR 0 3
25266: IN
25267: IFFALSE 25537
// begin InGameOn ;
25269: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
25273: LD_EXP 46
25277: PPUSH
25278: LD_EXP 61
25282: PPUSH
25283: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
25287: LD_EXP 61
25291: PPUSH
25292: LD_EXP 46
25296: PPUSH
25297: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
25301: LD_EXP 46
25305: PPUSH
25306: LD_EXP 61
25310: PPUSH
25311: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
25315: LD_EXP 46
25319: PPUSH
25320: LD_STRING DK-Assassin-1
25322: PPUSH
25323: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
25327: LD_EXP 61
25331: PPUSH
25332: LD_STRING DMcn-Assassin-2
25334: PPUSH
25335: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
25339: LD_EXP 46
25343: PPUSH
25344: LD_STRING DK-Assassin-3
25346: PPUSH
25347: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
25351: LD_EXP 61
25355: PPUSH
25356: LD_STRING DMcn-Assassin-4
25358: PPUSH
25359: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
25363: LD_EXP 46
25367: PPUSH
25368: LD_STRING DK-Assassin-5
25370: PPUSH
25371: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
25375: LD_EXP 61
25379: PPUSH
25380: LD_STRING DMcn-Assassin-6
25382: PPUSH
25383: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
25387: LD_EXP 46
25391: PUSH
25392: LD_EXP 61
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PPUSH
25401: LD_INT 6
25403: PPUSH
25404: CALL_OW 120
// wait ( 0 0$5 ) ;
25408: LD_INT 175
25410: PPUSH
25411: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
25415: LD_EXP 46
25419: PPUSH
25420: LD_STRING DK-Assassin-7
25422: PPUSH
25423: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
25427: LD_EXP 61
25431: PPUSH
25432: LD_STRING DMcn-Assassin-8
25434: PPUSH
25435: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25439: LD_INT 10
25441: PPUSH
25442: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
25446: LD_EXP 46
25450: PPUSH
25451: LD_STRING DK-Assassin-9
25453: PPUSH
25454: CALL_OW 88
// wait ( 0 0$2 ) ;
25458: LD_INT 70
25460: PPUSH
25461: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
25465: LD_EXP 46
25469: PPUSH
25470: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
25474: LD_EXP 61
25478: PPUSH
25479: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
25483: LD_EXP 46
25487: PPUSH
25488: LD_EXP 41
25492: PPUSH
25493: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
25497: LD_EXP 46
25501: PPUSH
25502: LD_STRING DK-Assasin-10
25504: PPUSH
25505: CALL_OW 88
// InGameOff ;
25509: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
25513: LD_STRING M2c-out
25515: PPUSH
25516: CALL_OW 337
// wait ( 0 0$3 ) ;
25520: LD_INT 105
25522: PPUSH
25523: CALL_OW 67
// hasMuchin := false ;
25527: LD_ADDR_EXP 30
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
// exit ;
25535: GO 26115
// end ; ChangeMissionObjectives ( M2c-out ) ;
25537: LD_STRING M2c-out
25539: PPUSH
25540: CALL_OW 337
// InGameOn ;
25544: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
25548: LD_EXP 61
25552: PPUSH
25553: LD_STRING DMcn-Fail-1
25555: PPUSH
25556: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
25560: LD_VAR 0 3
25564: PPUSH
25565: LD_INT 114
25567: PPUSH
25568: LD_INT 17
25570: PPUSH
25571: CALL_OW 111
// wait ( 0 0$1 ) ;
25575: LD_INT 35
25577: PPUSH
25578: CALL_OW 67
// async ;
25582: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25583: LD_EXP 61
25587: PPUSH
25588: LD_EXP 41
25592: PPUSH
25593: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
25597: LD_EXP 61
25601: PPUSH
25602: LD_STRING DMcn-Fail-2
25604: PPUSH
25605: CALL_OW 88
// ComStop ( Heike ) ;
25609: LD_EXP 41
25613: PPUSH
25614: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
25618: LD_EXP 41
25622: PPUSH
25623: LD_EXP 61
25627: PPUSH
25628: CALL_OW 179
// sync ;
25632: SYNC
// Say ( Heike , DH-Fail-3 ) ;
25633: LD_EXP 41
25637: PPUSH
25638: LD_STRING DH-Fail-3
25640: PPUSH
25641: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
25645: LD_EXP 61
25649: PPUSH
25650: LD_STRING DMcn-Fail-4
25652: PPUSH
25653: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
25657: LD_EXP 41
25661: PUSH
25662: LD_EXP 61
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: PPUSH
25671: LD_INT 41
25673: PPUSH
25674: LD_INT 19
25676: PPUSH
25677: CALL_OW 111
// wait ( 0 0$2 ) ;
25681: LD_INT 70
25683: PPUSH
25684: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
25688: LD_EXP 61
25692: PPUSH
25693: LD_INT 40
25695: PPUSH
25696: LD_INT 19
25698: PPUSH
25699: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
25703: LD_EXP 41
25707: PPUSH
25708: LD_INT 43
25710: PPUSH
25711: LD_INT 21
25713: PPUSH
25714: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
25718: LD_EXP 61
25722: PPUSH
25723: LD_EXP 41
25727: PPUSH
25728: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
25732: LD_EXP 41
25736: PPUSH
25737: LD_EXP 61
25741: PPUSH
25742: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
25746: LD_INT 3
25748: PPUSH
25749: CALL_OW 427
// wait ( 0 0$2 ) ;
25753: LD_INT 70
25755: PPUSH
25756: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
25760: LD_EXP 61
25764: PPUSH
25765: LD_STRING DMcn-Fail-5
25767: PPUSH
25768: CALL_OW 88
// wait ( 0 0$2 ) ;
25772: LD_INT 70
25774: PPUSH
25775: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
25779: LD_EXP 61
25783: PPUSH
25784: LD_STRING DMcn-Fail-6
25786: PPUSH
25787: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
25791: LD_INT 35
25793: PPUSH
25794: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
25798: LD_EXP 41
25802: PPUSH
25803: LD_INT 43
25805: PPUSH
25806: LD_INT 21
25808: PPUSH
25809: CALL_OW 307
25813: IFFALSE 25791
// case Query ( MuchinQuestion ) of 1 :
25815: LD_STRING MuchinQuestion
25817: PPUSH
25818: CALL_OW 97
25822: PUSH
25823: LD_INT 1
25825: DOUBLE
25826: EQUAL
25827: IFTRUE 25831
25829: GO 25931
25831: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
25832: LD_EXP 61
25836: PPUSH
25837: LD_STRING DMcn-Fail-7
25839: PPUSH
25840: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
25844: LD_EXP 41
25848: PPUSH
25849: LD_STRING DH-Fail-8
25851: PPUSH
25852: CALL_OW 88
// wait ( 0 0$0.3 ) ;
25856: LD_INT 10
25858: PPUSH
25859: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
25863: LD_EXP 41
25867: PPUSH
25868: LD_STRING DH-Fail-9
25870: PPUSH
25871: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
25875: LD_EXP 41
25879: PPUSH
25880: LD_STRING DH-Fail-10
25882: PPUSH
25883: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
25887: LD_EXP 61
25891: PPUSH
25892: LD_STRING DMcn-Fail-11
25894: PPUSH
25895: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
25899: LD_EXP 61
25903: PPUSH
25904: LD_EXP 41
25908: PPUSH
25909: CALL_OW 115
// wait ( 0 0$2 ) ;
25913: LD_INT 70
25915: PPUSH
25916: CALL_OW 67
// KillUnit ( Heike ) ;
25920: LD_EXP 41
25924: PPUSH
25925: CALL_OW 66
// end ; 2 :
25929: GO 26111
25931: LD_INT 2
25933: DOUBLE
25934: EQUAL
25935: IFTRUE 25939
25937: GO 26110
25939: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
25940: LD_EXP 41
25944: PPUSH
25945: LD_STRING DH-Fail-a-8
25947: PPUSH
25948: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
25952: LD_EXP 41
25956: PPUSH
25957: LD_STRING DH-Fail-a-9
25959: PPUSH
25960: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
25964: LD_EXP 61
25968: PPUSH
25969: LD_STRING DH-Fail-10
25971: PPUSH
25972: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
25976: LD_EXP 41
25980: PPUSH
25981: LD_STRING DH-Fail-a-11
25983: PPUSH
25984: CALL_OW 88
// async ;
25988: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
25989: LD_EXP 61
25993: PPUSH
25994: LD_EXP 41
25998: PPUSH
25999: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
26003: LD_EXP 61
26007: PPUSH
26008: LD_EXP 41
26012: PPUSH
26013: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
26017: LD_EXP 61
26021: PPUSH
26022: LD_STRING DH-Fail-12
26024: PPUSH
26025: CALL_OW 88
// sync ;
26029: SYNC
// wait ( 0 0$1 ) ;
26030: LD_INT 35
26032: PPUSH
26033: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
26037: LD_EXP 41
26041: PPUSH
26042: LD_STRING DH-Fail-a-13
26044: PPUSH
26045: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
26049: LD_EXP 61
26053: PPUSH
26054: LD_INT 100
26056: PPUSH
26057: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
26061: LD_EXP 61
26065: PPUSH
26066: LD_STRING DMcn-Fail-a-14
26068: PPUSH
26069: CALL_OW 91
// KillUnit ( ruDisturb ) ;
26073: LD_EXP 61
26077: PPUSH
26078: CALL_OW 66
// wait ( 0 0$1 ) ;
26082: LD_INT 35
26084: PPUSH
26085: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
26089: LD_EXP 41
26093: PPUSH
26094: LD_STRING DH-Fail-a-15
26096: PPUSH
26097: CALL_OW 88
// YouLost ( FailMuchin ) ;
26101: LD_STRING FailMuchin
26103: PPUSH
26104: CALL_OW 104
// end ; end ;
26108: GO 26111
26110: POP
// InGameOff ;
26111: CALL_OW 9
// end ; end_of_file
26115: PPOPN 4
26117: END
// every 0 0$1 marked gameStartEvent do
26118: GO 26120
26120: DISABLE
// begin enable ;
26121: ENABLE
// if not contactWithAmerican then
26122: LD_EXP 25
26126: NOT
26127: IFFALSE 26172
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
26129: LD_ADDR_OWVAR 47
26133: PUSH
26134: LD_STRING #X108-1
26136: PUSH
26137: LD_INT 22
26139: PUSH
26140: LD_INT 5
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 21
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PPUSH
26161: CALL_OW 69
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: ST_TO_ADDR
26170: GO 26252
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
26172: LD_ADDR_OWVAR 47
26176: PUSH
26177: LD_STRING #X108-1
26179: PUSH
26180: LD_INT 22
26182: PUSH
26183: LD_INT 5
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 21
26192: PUSH
26193: LD_INT 1
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PPUSH
26204: CALL_OW 69
26208: PUSH
26209: LD_STRING #X108-2
26211: PUSH
26212: LD_EXP 53
26216: PPUSH
26217: LD_INT 22
26219: PUSH
26220: LD_INT 4
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 21
26229: PUSH
26230: LD_INT 1
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PPUSH
26241: CALL_OW 72
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: ST_TO_ADDR
// end ; end_of_file
26252: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
26253: LD_EXP 41
26257: PPUSH
26258: LD_INT 59
26260: PPUSH
26261: CALL_OW 308
26265: IFFALSE 26387
26267: GO 26269
26269: DISABLE
// begin Query ( FinalInfo ) ;
26270: LD_STRING FinalInfo
26272: PPUSH
26273: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
26277: LD_INT 59
26279: PPUSH
26280: LD_INT 1
26282: PPUSH
26283: CALL_OW 424
// end_the_mission_allowed := true ;
26287: LD_ADDR_OWVAR 57
26291: PUSH
26292: LD_INT 1
26294: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26295: LD_INT 35
26297: PPUSH
26298: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
26302: LD_INT 22
26304: PUSH
26305: LD_INT 2
26307: PUSH
26308: EMPTY
26309: LIST
26310: LIST
26311: PUSH
26312: LD_INT 21
26314: PUSH
26315: LD_INT 1
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: PUSH
26322: LD_INT 95
26324: PUSH
26325: LD_INT 59
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: PPUSH
26342: CALL 29498 0 1
26346: PUSH
26347: LD_INT 22
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 21
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PPUSH
26371: CALL_OW 69
26375: PPUSH
26376: CALL 29498 0 1
26380: EQUAL
26381: IFFALSE 26295
// EndMission ;
26383: CALL 26395 0 0
// end ;
26387: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
26388: CALL 26395 0 0
// end ;
26392: PPOPN 1
26394: END
// function EndMission ; begin
26395: LD_INT 0
26397: PPUSH
// if not IsInArea ( Heike , finalArea ) then
26398: LD_EXP 41
26402: PPUSH
26403: LD_INT 59
26405: PPUSH
26406: CALL_OW 308
26410: NOT
26411: IFFALSE 26422
// begin Query ( HeikeOutOfArea ) ;
26413: LD_STRING HeikeOutOfArea
26415: PPUSH
26416: CALL_OW 97
// exit ;
26420: GO 27205
// end ; if not IsOk ( Heike ) then
26422: LD_EXP 41
26426: PPUSH
26427: CALL_OW 302
26431: NOT
26432: IFFALSE 26443
// begin Query ( HeikeIsHurt ) ;
26434: LD_STRING HeikeIsHurt
26436: PPUSH
26437: CALL_OW 97
// exit ;
26441: GO 27205
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
26443: LD_INT 22
26445: PUSH
26446: LD_INT 5
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 21
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PPUSH
26467: CALL_OW 69
26471: PUSH
26472: LD_INT 0
26474: EQUAL
26475: PUSH
26476: LD_EXP 32
26480: PUSH
26481: LD_INT 0
26483: EQUAL
26484: AND
26485: IFFALSE 26499
// AddMedal ( med1 , 1 ) else
26487: LD_STRING med1
26489: PPUSH
26490: LD_INT 1
26492: PPUSH
26493: CALL_OW 101
26497: GO 26510
// AddMedal ( med1 , - 1 ) ;
26499: LD_STRING med1
26501: PPUSH
26502: LD_INT 1
26504: NEG
26505: PPUSH
26506: CALL_OW 101
// if explosivePlantedList >= 3 then
26510: LD_EXP 29
26514: PUSH
26515: LD_INT 3
26517: GREATEREQUAL
26518: IFFALSE 26532
// AddMedal ( med2 , 1 ) else
26520: LD_STRING med2
26522: PPUSH
26523: LD_INT 1
26525: PPUSH
26526: CALL_OW 101
26530: GO 26566
// if explosivePlantedList < 3 then
26532: LD_EXP 29
26536: PUSH
26537: LD_INT 3
26539: LESS
26540: IFFALSE 26555
// AddMedal ( med2 , - 2 ) else
26542: LD_STRING med2
26544: PPUSH
26545: LD_INT 2
26547: NEG
26548: PPUSH
26549: CALL_OW 101
26553: GO 26566
// AddMedal ( med2 , - 1 ) ;
26555: LD_STRING med2
26557: PPUSH
26558: LD_INT 1
26560: NEG
26561: PPUSH
26562: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
26566: LD_INT 5
26568: PPUSH
26569: LD_INT 2
26571: PPUSH
26572: CALL_OW 321
26576: PUSH
26577: LD_INT 2
26579: EQUAL
26580: IFFALSE 26594
// AddMedal ( med3 , 1 ) else
26582: LD_STRING med3
26584: PPUSH
26585: LD_INT 1
26587: PPUSH
26588: CALL_OW 101
26592: GO 26605
// AddMedal ( med3 , - 1 ) ;
26594: LD_STRING med3
26596: PPUSH
26597: LD_INT 1
26599: NEG
26600: PPUSH
26601: CALL_OW 101
// GiveMedals ( MAIN ) ;
26605: LD_STRING MAIN
26607: PPUSH
26608: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
26612: LD_INT 22
26614: PUSH
26615: LD_INT 2
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: LD_INT 23
26624: PUSH
26625: LD_INT 2
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 21
26634: PUSH
26635: LD_INT 1
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 69
26651: PPUSH
26652: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
26656: LD_EXP 55
26660: PUSH
26661: LD_EXP 55
26665: PPUSH
26666: CALL_OW 255
26670: PUSH
26671: LD_INT 2
26673: EQUAL
26674: AND
26675: IFFALSE 26689
// SaveCharacters ( Doug , 08_UsCommander ) ;
26677: LD_EXP 55
26681: PPUSH
26682: LD_STRING 08_UsCommander
26684: PPUSH
26685: CALL_OW 38
// if Harris and GetSide ( Harris ) = 2 then
26689: LD_EXP 54
26693: PUSH
26694: LD_EXP 54
26698: PPUSH
26699: CALL_OW 255
26703: PUSH
26704: LD_INT 2
26706: EQUAL
26707: AND
26708: IFFALSE 26722
// SaveCharacters ( Harris , 08_Harris ) ;
26710: LD_EXP 54
26714: PPUSH
26715: LD_STRING 08_Harris
26717: PPUSH
26718: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff [ Doug , Harris ] , 08_Americans ) ;
26722: LD_INT 22
26724: PUSH
26725: LD_INT 2
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 23
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 21
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: PPUSH
26757: CALL_OW 69
26761: PUSH
26762: LD_EXP 55
26766: PUSH
26767: LD_EXP 54
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: DIFF
26776: PPUSH
26777: LD_STRING 08_Americans
26779: PPUSH
26780: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
26784: LD_EXP 41
26788: PPUSH
26789: CALL_OW 248
26793: PUSH
26794: LD_INT 3
26796: EQUAL
26797: IFFALSE 26827
// begin CopySkills ( Heike , HeikeTmp ) ;
26799: LD_EXP 41
26803: PPUSH
26804: LD_EXP 57
26808: PPUSH
26809: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
26813: LD_EXP 57
26817: PPUSH
26818: LD_STRING 08_Heike
26820: PPUSH
26821: CALL_OW 38
// end else
26825: GO 26839
// SaveCharacters ( Heike , 08_Heike ) ;
26827: LD_EXP 41
26831: PPUSH
26832: LD_STRING 08_Heike
26834: PPUSH
26835: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
26839: LD_EXP 51
26843: PUSH
26844: LD_EXP 51
26848: PPUSH
26849: CALL_OW 255
26853: PUSH
26854: LD_INT 2
26856: EQUAL
26857: AND
26858: IFFALSE 26872
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
26860: LD_EXP 51
26864: PPUSH
26865: LD_STRING 08_Aviradze
26867: PPUSH
26868: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
26872: LD_EXP 44
26876: PUSH
26877: LD_EXP 44
26881: PPUSH
26882: CALL_OW 255
26886: PUSH
26887: LD_INT 2
26889: EQUAL
26890: AND
26891: IFFALSE 26905
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
26893: LD_EXP 44
26897: PPUSH
26898: LD_STRING 08_Ibrahim
26900: PPUSH
26901: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
26905: LD_EXP 45
26909: PUSH
26910: LD_EXP 45
26914: PPUSH
26915: CALL_OW 255
26919: PUSH
26920: LD_INT 2
26922: EQUAL
26923: AND
26924: IFFALSE 26938
// SaveCharacters ( Kamil , 08_Kamil ) ;
26926: LD_EXP 45
26930: PPUSH
26931: LD_STRING 08_Kamil
26933: PPUSH
26934: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
26938: LD_EXP 47
26942: PUSH
26943: LD_EXP 47
26947: PPUSH
26948: CALL_OW 255
26952: PUSH
26953: LD_INT 2
26955: EQUAL
26956: AND
26957: IFFALSE 26971
// SaveCharacters ( Sophia , 08_Sophia ) ;
26959: LD_EXP 47
26963: PPUSH
26964: LD_STRING 08_Sophia
26966: PPUSH
26967: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
26971: LD_EXP 46
26975: PUSH
26976: LD_EXP 51
26980: PPUSH
26981: CALL_OW 255
26985: PUSH
26986: LD_INT 2
26988: EQUAL
26989: AND
26990: IFFALSE 27004
// SaveCharacters ( Kaia , 08_Kaia ) ;
26992: LD_EXP 46
26996: PPUSH
26997: LD_STRING 08_Kaia
26999: PPUSH
27000: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
27004: LD_EXP 42
27008: PUSH
27009: LD_EXP 42
27013: PPUSH
27014: CALL_OW 255
27018: PUSH
27019: LD_INT 2
27021: EQUAL
27022: AND
27023: IFFALSE 27080
// if GetNation ( Givi ) = nation_russian then
27025: LD_EXP 42
27029: PPUSH
27030: CALL_OW 248
27034: PUSH
27035: LD_INT 3
27037: EQUAL
27038: IFFALSE 27068
// begin CopySkills ( Givi , GiviTmp ) ;
27040: LD_EXP 42
27044: PPUSH
27045: LD_EXP 58
27049: PPUSH
27050: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
27054: LD_EXP 58
27058: PPUSH
27059: LD_STRING 08_Givi
27061: PPUSH
27062: CALL_OW 38
// end else
27066: GO 27080
// SaveCharacters ( Givi , 08_Givi ) ;
27068: LD_EXP 42
27072: PPUSH
27073: LD_STRING 08_Givi
27075: PPUSH
27076: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
27080: LD_EXP 43
27084: PUSH
27085: LD_EXP 43
27089: PPUSH
27090: CALL_OW 255
27094: PUSH
27095: LD_INT 2
27097: EQUAL
27098: AND
27099: IFFALSE 27113
// SaveCharacters ( Mike , 08_Mike ) ;
27101: LD_EXP 43
27105: PPUSH
27106: LD_STRING 08_Mike
27108: PPUSH
27109: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
27113: LD_EXP 48
27117: PUSH
27118: LD_EXP 48
27122: PPUSH
27123: CALL_OW 255
27127: PUSH
27128: LD_INT 2
27130: EQUAL
27131: AND
27132: IFFALSE 27146
// SaveCharacters ( Markov , 08_Markov ) ;
27134: LD_EXP 48
27138: PPUSH
27139: LD_STRING 08_Markov
27141: PPUSH
27142: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
27146: LD_EXP 50
27150: PUSH
27151: LD_EXP 50
27155: PPUSH
27156: CALL_OW 255
27160: PUSH
27161: LD_INT 2
27163: EQUAL
27164: AND
27165: IFFALSE 27179
// SaveCharacters ( Kurt , 08_Kurt ) ;
27167: LD_EXP 50
27171: PPUSH
27172: LD_STRING 08_Kurt
27174: PPUSH
27175: CALL_OW 38
// if heikeSecondSquad then
27179: LD_EXP 52
27183: IFFALSE 27197
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
27185: LD_EXP 52
27189: PPUSH
27190: LD_STRING 08_others
27192: PPUSH
27193: CALL_OW 38
// YouWin ;
27197: CALL_OW 103
// DialogueOff ;
27201: CALL_OW 7
// end ; end_of_file
27205: LD_VAR 0 1
27209: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
27210: LD_EXP 5
27214: IFFALSE 27393
27216: GO 27218
27218: DISABLE
27219: LD_INT 0
27221: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
27222: LD_INT 35
27224: PPUSH
27225: LD_INT 2100
27227: PPUSH
27228: CALL_OW 12
27232: PPUSH
27233: CALL_OW 67
// StopOriginalMusic ;
27237: CALL 88899 0 0
// weatherBusy := true ;
27241: LD_ADDR_EXP 37
27245: PUSH
27246: LD_INT 1
27248: ST_TO_ADDR
// for i := 1 to 3 do
27249: LD_ADDR_VAR 0 1
27253: PUSH
27254: DOUBLE
27255: LD_INT 1
27257: DEC
27258: ST_TO_ADDR
27259: LD_INT 3
27261: PUSH
27262: FOR_TO
27263: IFFALSE 27297
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
27265: LD_INT 1
27267: PPUSH
27268: LD_INT 100
27270: PUSH
27271: LD_INT 100
27273: PUSH
27274: LD_VAR 0 1
27278: MUL
27279: PLUS
27280: PPUSH
27281: LD_INT 60
27283: PPUSH
27284: CALL_OW 550
// wait ( 0 0$2 ) ;
27288: LD_INT 70
27290: PPUSH
27291: CALL_OW 67
// end ;
27295: GO 27262
27297: POP
27298: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
27299: LD_STRING ArStormRain.wav
27301: PPUSH
27302: LD_STRING OW_CUSTOM_COMMAND(103);
27304: PPUSH
27305: CALL 88929 0 2
// wait ( 0 0$3 ) ;
27309: LD_INT 105
27311: PPUSH
27312: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
27316: LD_INT 1
27318: PPUSH
27319: LD_INT 900
27321: PPUSH
27322: LD_INT 120
27324: PPUSH
27325: CALL_OW 550
// wait ( 0 0$10 ) ;
27329: LD_INT 350
27331: PPUSH
27332: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
27336: LD_INT 1
27338: PPUSH
27339: LD_INT 1500
27341: PPUSH
27342: LD_INT 300
27344: PPUSH
27345: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
27349: LD_INT 35
27351: PPUSH
27352: CALL_OW 67
// until not weatherBusy ;
27356: LD_EXP 37
27360: NOT
27361: IFFALSE 27349
// SetWeather ( 0 , 0 , 0 ) ;
27363: LD_INT 0
27365: PPUSH
27366: LD_INT 0
27368: PPUSH
27369: LD_INT 0
27371: PPUSH
27372: CALL_OW 550
// wait ( 5 5$00 ) ;
27376: LD_INT 10500
27378: PPUSH
27379: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
27383: LD_STRING ArStormNormal.wav
27385: PPUSH
27386: LD_STRING OW_CUSTOM_COMMAND(103);
27388: PPUSH
27389: CALL 88929 0 2
// end ; end_of_file
27393: PPOPN 1
27395: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
// if exist_mode then
27400: LD_VAR 0 2
27404: IFFALSE 27429
// unit := CreateCharacter ( prefix & ident ) else
27406: LD_ADDR_VAR 0 5
27410: PUSH
27411: LD_VAR 0 3
27415: PUSH
27416: LD_VAR 0 1
27420: STR
27421: PPUSH
27422: CALL_OW 34
27426: ST_TO_ADDR
27427: GO 27444
// unit := NewCharacter ( ident ) ;
27429: LD_ADDR_VAR 0 5
27433: PUSH
27434: LD_VAR 0 1
27438: PPUSH
27439: CALL_OW 25
27443: ST_TO_ADDR
// result := unit ;
27444: LD_ADDR_VAR 0 4
27448: PUSH
27449: LD_VAR 0 5
27453: ST_TO_ADDR
// end ;
27454: LD_VAR 0 4
27458: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
// if not side or not nation then
27463: LD_VAR 0 1
27467: NOT
27468: PUSH
27469: LD_VAR 0 2
27473: NOT
27474: OR
27475: IFFALSE 27479
// exit ;
27477: GO 28247
// case nation of nation_american :
27479: LD_VAR 0 2
27483: PUSH
27484: LD_INT 1
27486: DOUBLE
27487: EQUAL
27488: IFTRUE 27492
27490: GO 27706
27492: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27493: LD_ADDR_VAR 0 4
27497: PUSH
27498: LD_INT 35
27500: PUSH
27501: LD_INT 45
27503: PUSH
27504: LD_INT 46
27506: PUSH
27507: LD_INT 47
27509: PUSH
27510: LD_INT 82
27512: PUSH
27513: LD_INT 83
27515: PUSH
27516: LD_INT 84
27518: PUSH
27519: LD_INT 85
27521: PUSH
27522: LD_INT 86
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: LD_INT 6
27533: PUSH
27534: LD_INT 15
27536: PUSH
27537: LD_INT 16
27539: PUSH
27540: LD_INT 7
27542: PUSH
27543: LD_INT 12
27545: PUSH
27546: LD_INT 13
27548: PUSH
27549: LD_INT 10
27551: PUSH
27552: LD_INT 14
27554: PUSH
27555: LD_INT 20
27557: PUSH
27558: LD_INT 21
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_INT 25
27566: PUSH
27567: LD_INT 32
27569: PUSH
27570: LD_INT 27
27572: PUSH
27573: LD_INT 36
27575: PUSH
27576: LD_INT 69
27578: PUSH
27579: LD_INT 39
27581: PUSH
27582: LD_INT 34
27584: PUSH
27585: LD_INT 40
27587: PUSH
27588: LD_INT 48
27590: PUSH
27591: LD_INT 49
27593: PUSH
27594: LD_INT 50
27596: PUSH
27597: LD_INT 51
27599: PUSH
27600: LD_INT 52
27602: PUSH
27603: LD_INT 53
27605: PUSH
27606: LD_INT 54
27608: PUSH
27609: LD_INT 55
27611: PUSH
27612: LD_INT 56
27614: PUSH
27615: LD_INT 57
27617: PUSH
27618: LD_INT 58
27620: PUSH
27621: LD_INT 59
27623: PUSH
27624: LD_INT 60
27626: PUSH
27627: LD_INT 61
27629: PUSH
27630: LD_INT 62
27632: PUSH
27633: LD_INT 80
27635: PUSH
27636: LD_INT 82
27638: PUSH
27639: LD_INT 83
27641: PUSH
27642: LD_INT 84
27644: PUSH
27645: LD_INT 85
27647: PUSH
27648: LD_INT 86
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: ST_TO_ADDR
27704: GO 28171
27706: LD_INT 2
27708: DOUBLE
27709: EQUAL
27710: IFTRUE 27714
27712: GO 27940
27714: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27715: LD_ADDR_VAR 0 4
27719: PUSH
27720: LD_INT 35
27722: PUSH
27723: LD_INT 45
27725: PUSH
27726: LD_INT 46
27728: PUSH
27729: LD_INT 47
27731: PUSH
27732: LD_INT 82
27734: PUSH
27735: LD_INT 83
27737: PUSH
27738: LD_INT 84
27740: PUSH
27741: LD_INT 85
27743: PUSH
27744: LD_INT 87
27746: PUSH
27747: LD_INT 70
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: LD_INT 11
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: LD_INT 4
27761: PUSH
27762: LD_INT 5
27764: PUSH
27765: LD_INT 6
27767: PUSH
27768: LD_INT 15
27770: PUSH
27771: LD_INT 18
27773: PUSH
27774: LD_INT 7
27776: PUSH
27777: LD_INT 17
27779: PUSH
27780: LD_INT 8
27782: PUSH
27783: LD_INT 20
27785: PUSH
27786: LD_INT 21
27788: PUSH
27789: LD_INT 22
27791: PUSH
27792: LD_INT 72
27794: PUSH
27795: LD_INT 26
27797: PUSH
27798: LD_INT 69
27800: PUSH
27801: LD_INT 39
27803: PUSH
27804: LD_INT 40
27806: PUSH
27807: LD_INT 41
27809: PUSH
27810: LD_INT 42
27812: PUSH
27813: LD_INT 43
27815: PUSH
27816: LD_INT 48
27818: PUSH
27819: LD_INT 49
27821: PUSH
27822: LD_INT 50
27824: PUSH
27825: LD_INT 51
27827: PUSH
27828: LD_INT 52
27830: PUSH
27831: LD_INT 53
27833: PUSH
27834: LD_INT 54
27836: PUSH
27837: LD_INT 55
27839: PUSH
27840: LD_INT 56
27842: PUSH
27843: LD_INT 60
27845: PUSH
27846: LD_INT 61
27848: PUSH
27849: LD_INT 62
27851: PUSH
27852: LD_INT 66
27854: PUSH
27855: LD_INT 67
27857: PUSH
27858: LD_INT 68
27860: PUSH
27861: LD_INT 81
27863: PUSH
27864: LD_INT 82
27866: PUSH
27867: LD_INT 83
27869: PUSH
27870: LD_INT 84
27872: PUSH
27873: LD_INT 85
27875: PUSH
27876: LD_INT 87
27878: PUSH
27879: LD_INT 88
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: ST_TO_ADDR
27938: GO 28171
27940: LD_INT 3
27942: DOUBLE
27943: EQUAL
27944: IFTRUE 27948
27946: GO 28170
27948: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27949: LD_ADDR_VAR 0 4
27953: PUSH
27954: LD_INT 46
27956: PUSH
27957: LD_INT 47
27959: PUSH
27960: LD_INT 1
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: LD_INT 82
27968: PUSH
27969: LD_INT 83
27971: PUSH
27972: LD_INT 84
27974: PUSH
27975: LD_INT 85
27977: PUSH
27978: LD_INT 86
27980: PUSH
27981: LD_INT 11
27983: PUSH
27984: LD_INT 9
27986: PUSH
27987: LD_INT 20
27989: PUSH
27990: LD_INT 19
27992: PUSH
27993: LD_INT 21
27995: PUSH
27996: LD_INT 24
27998: PUSH
27999: LD_INT 22
28001: PUSH
28002: LD_INT 25
28004: PUSH
28005: LD_INT 28
28007: PUSH
28008: LD_INT 29
28010: PUSH
28011: LD_INT 30
28013: PUSH
28014: LD_INT 31
28016: PUSH
28017: LD_INT 37
28019: PUSH
28020: LD_INT 38
28022: PUSH
28023: LD_INT 32
28025: PUSH
28026: LD_INT 27
28028: PUSH
28029: LD_INT 33
28031: PUSH
28032: LD_INT 69
28034: PUSH
28035: LD_INT 39
28037: PUSH
28038: LD_INT 34
28040: PUSH
28041: LD_INT 40
28043: PUSH
28044: LD_INT 71
28046: PUSH
28047: LD_INT 23
28049: PUSH
28050: LD_INT 44
28052: PUSH
28053: LD_INT 48
28055: PUSH
28056: LD_INT 49
28058: PUSH
28059: LD_INT 50
28061: PUSH
28062: LD_INT 51
28064: PUSH
28065: LD_INT 52
28067: PUSH
28068: LD_INT 53
28070: PUSH
28071: LD_INT 54
28073: PUSH
28074: LD_INT 55
28076: PUSH
28077: LD_INT 56
28079: PUSH
28080: LD_INT 57
28082: PUSH
28083: LD_INT 58
28085: PUSH
28086: LD_INT 59
28088: PUSH
28089: LD_INT 63
28091: PUSH
28092: LD_INT 64
28094: PUSH
28095: LD_INT 65
28097: PUSH
28098: LD_INT 82
28100: PUSH
28101: LD_INT 83
28103: PUSH
28104: LD_INT 84
28106: PUSH
28107: LD_INT 85
28109: PUSH
28110: LD_INT 86
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: ST_TO_ADDR
28168: GO 28171
28170: POP
// if state > - 1 and state < 3 then
28171: LD_VAR 0 3
28175: PUSH
28176: LD_INT 1
28178: NEG
28179: GREATER
28180: PUSH
28181: LD_VAR 0 3
28185: PUSH
28186: LD_INT 3
28188: LESS
28189: AND
28190: IFFALSE 28247
// for i in result do
28192: LD_ADDR_VAR 0 5
28196: PUSH
28197: LD_VAR 0 4
28201: PUSH
28202: FOR_IN
28203: IFFALSE 28245
// if GetTech ( i , side ) <> state then
28205: LD_VAR 0 5
28209: PPUSH
28210: LD_VAR 0 1
28214: PPUSH
28215: CALL_OW 321
28219: PUSH
28220: LD_VAR 0 3
28224: NONEQUAL
28225: IFFALSE 28243
// result := result diff i ;
28227: LD_ADDR_VAR 0 4
28231: PUSH
28232: LD_VAR 0 4
28236: PUSH
28237: LD_VAR 0 5
28241: DIFF
28242: ST_TO_ADDR
28243: GO 28202
28245: POP
28246: POP
// end ;
28247: LD_VAR 0 4
28251: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28252: LD_INT 0
28254: PPUSH
28255: PPUSH
28256: PPUSH
// result := true ;
28257: LD_ADDR_VAR 0 3
28261: PUSH
28262: LD_INT 1
28264: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28265: LD_ADDR_VAR 0 5
28269: PUSH
28270: LD_VAR 0 2
28274: PPUSH
28275: CALL_OW 480
28279: ST_TO_ADDR
// if not tmp then
28280: LD_VAR 0 5
28284: NOT
28285: IFFALSE 28289
// exit ;
28287: GO 28338
// for i in tmp do
28289: LD_ADDR_VAR 0 4
28293: PUSH
28294: LD_VAR 0 5
28298: PUSH
28299: FOR_IN
28300: IFFALSE 28336
// if GetTech ( i , side ) <> state_researched then
28302: LD_VAR 0 4
28306: PPUSH
28307: LD_VAR 0 1
28311: PPUSH
28312: CALL_OW 321
28316: PUSH
28317: LD_INT 2
28319: NONEQUAL
28320: IFFALSE 28334
// begin result := false ;
28322: LD_ADDR_VAR 0 3
28326: PUSH
28327: LD_INT 0
28329: ST_TO_ADDR
// exit ;
28330: POP
28331: POP
28332: GO 28338
// end ;
28334: GO 28299
28336: POP
28337: POP
// end ;
28338: LD_VAR 0 3
28342: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28343: LD_INT 0
28345: PPUSH
28346: PPUSH
28347: PPUSH
28348: PPUSH
28349: PPUSH
28350: PPUSH
28351: PPUSH
28352: PPUSH
28353: PPUSH
28354: PPUSH
28355: PPUSH
28356: PPUSH
28357: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28358: LD_VAR 0 1
28362: NOT
28363: PUSH
28364: LD_VAR 0 1
28368: PPUSH
28369: CALL_OW 257
28373: PUSH
28374: LD_INT 9
28376: NONEQUAL
28377: OR
28378: IFFALSE 28382
// exit ;
28380: GO 28955
// side := GetSide ( unit ) ;
28382: LD_ADDR_VAR 0 9
28386: PUSH
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 255
28396: ST_TO_ADDR
// tech_space := tech_spacanom ;
28397: LD_ADDR_VAR 0 12
28401: PUSH
28402: LD_INT 29
28404: ST_TO_ADDR
// tech_time := tech_taurad ;
28405: LD_ADDR_VAR 0 13
28409: PUSH
28410: LD_INT 28
28412: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28413: LD_ADDR_VAR 0 11
28417: PUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 310
28427: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28428: LD_VAR 0 11
28432: PPUSH
28433: CALL_OW 247
28437: PUSH
28438: LD_INT 2
28440: EQUAL
28441: IFFALSE 28445
// exit ;
28443: GO 28955
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28445: LD_ADDR_VAR 0 8
28449: PUSH
28450: LD_INT 81
28452: PUSH
28453: LD_VAR 0 9
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: LD_INT 21
28467: PUSH
28468: LD_INT 3
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PPUSH
28483: CALL_OW 69
28487: ST_TO_ADDR
// if not tmp then
28488: LD_VAR 0 8
28492: NOT
28493: IFFALSE 28497
// exit ;
28495: GO 28955
// if in_unit then
28497: LD_VAR 0 11
28501: IFFALSE 28525
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28503: LD_ADDR_VAR 0 10
28507: PUSH
28508: LD_VAR 0 8
28512: PPUSH
28513: LD_VAR 0 11
28517: PPUSH
28518: CALL_OW 74
28522: ST_TO_ADDR
28523: GO 28545
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28525: LD_ADDR_VAR 0 10
28529: PUSH
28530: LD_VAR 0 8
28534: PPUSH
28535: LD_VAR 0 1
28539: PPUSH
28540: CALL_OW 74
28544: ST_TO_ADDR
// if not enemy then
28545: LD_VAR 0 10
28549: NOT
28550: IFFALSE 28554
// exit ;
28552: GO 28955
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28554: LD_VAR 0 11
28558: PUSH
28559: LD_VAR 0 11
28563: PPUSH
28564: LD_VAR 0 10
28568: PPUSH
28569: CALL_OW 296
28573: PUSH
28574: LD_INT 13
28576: GREATER
28577: AND
28578: PUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: LD_VAR 0 10
28588: PPUSH
28589: CALL_OW 296
28593: PUSH
28594: LD_INT 12
28596: GREATER
28597: OR
28598: IFFALSE 28602
// exit ;
28600: GO 28955
// missile := [ 1 ] ;
28602: LD_ADDR_VAR 0 14
28606: PUSH
28607: LD_INT 1
28609: PUSH
28610: EMPTY
28611: LIST
28612: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28613: LD_VAR 0 9
28617: PPUSH
28618: LD_VAR 0 12
28622: PPUSH
28623: CALL_OW 325
28627: IFFALSE 28656
// missile := Replace ( missile , missile + 1 , 2 ) ;
28629: LD_ADDR_VAR 0 14
28633: PUSH
28634: LD_VAR 0 14
28638: PPUSH
28639: LD_VAR 0 14
28643: PUSH
28644: LD_INT 1
28646: PLUS
28647: PPUSH
28648: LD_INT 2
28650: PPUSH
28651: CALL_OW 1
28655: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28656: LD_VAR 0 9
28660: PPUSH
28661: LD_VAR 0 13
28665: PPUSH
28666: CALL_OW 325
28670: PUSH
28671: LD_VAR 0 10
28675: PPUSH
28676: CALL_OW 255
28680: PPUSH
28681: LD_VAR 0 13
28685: PPUSH
28686: CALL_OW 325
28690: NOT
28691: AND
28692: IFFALSE 28721
// missile := Replace ( missile , missile + 1 , 3 ) ;
28694: LD_ADDR_VAR 0 14
28698: PUSH
28699: LD_VAR 0 14
28703: PPUSH
28704: LD_VAR 0 14
28708: PUSH
28709: LD_INT 1
28711: PLUS
28712: PPUSH
28713: LD_INT 3
28715: PPUSH
28716: CALL_OW 1
28720: ST_TO_ADDR
// if missile < 2 then
28721: LD_VAR 0 14
28725: PUSH
28726: LD_INT 2
28728: LESS
28729: IFFALSE 28733
// exit ;
28731: GO 28955
// x := GetX ( enemy ) ;
28733: LD_ADDR_VAR 0 4
28737: PUSH
28738: LD_VAR 0 10
28742: PPUSH
28743: CALL_OW 250
28747: ST_TO_ADDR
// y := GetY ( enemy ) ;
28748: LD_ADDR_VAR 0 5
28752: PUSH
28753: LD_VAR 0 10
28757: PPUSH
28758: CALL_OW 251
28762: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28763: LD_ADDR_VAR 0 6
28767: PUSH
28768: LD_VAR 0 4
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PPUSH
28777: LD_INT 1
28779: PPUSH
28780: CALL_OW 12
28784: PLUS
28785: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28786: LD_ADDR_VAR 0 7
28790: PUSH
28791: LD_VAR 0 5
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PPUSH
28800: LD_INT 1
28802: PPUSH
28803: CALL_OW 12
28807: PLUS
28808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28809: LD_VAR 0 6
28813: PPUSH
28814: LD_VAR 0 7
28818: PPUSH
28819: CALL_OW 488
28823: NOT
28824: IFFALSE 28846
// begin _x := x ;
28826: LD_ADDR_VAR 0 6
28830: PUSH
28831: LD_VAR 0 4
28835: ST_TO_ADDR
// _y := y ;
28836: LD_ADDR_VAR 0 7
28840: PUSH
28841: LD_VAR 0 5
28845: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28846: LD_ADDR_VAR 0 3
28850: PUSH
28851: LD_INT 1
28853: PPUSH
28854: LD_VAR 0 14
28858: PPUSH
28859: CALL_OW 12
28863: ST_TO_ADDR
// case i of 1 :
28864: LD_VAR 0 3
28868: PUSH
28869: LD_INT 1
28871: DOUBLE
28872: EQUAL
28873: IFTRUE 28877
28875: GO 28894
28877: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28878: LD_VAR 0 1
28882: PPUSH
28883: LD_VAR 0 10
28887: PPUSH
28888: CALL_OW 115
28892: GO 28955
28894: LD_INT 2
28896: DOUBLE
28897: EQUAL
28898: IFTRUE 28902
28900: GO 28924
28902: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28903: LD_VAR 0 1
28907: PPUSH
28908: LD_VAR 0 6
28912: PPUSH
28913: LD_VAR 0 7
28917: PPUSH
28918: CALL_OW 153
28922: GO 28955
28924: LD_INT 3
28926: DOUBLE
28927: EQUAL
28928: IFTRUE 28932
28930: GO 28954
28932: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28933: LD_VAR 0 1
28937: PPUSH
28938: LD_VAR 0 6
28942: PPUSH
28943: LD_VAR 0 7
28947: PPUSH
28948: CALL_OW 154
28952: GO 28955
28954: POP
// end ;
28955: LD_VAR 0 2
28959: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28960: LD_INT 0
28962: PPUSH
28963: PPUSH
28964: PPUSH
28965: PPUSH
28966: PPUSH
28967: PPUSH
// if not unit or not building then
28968: LD_VAR 0 1
28972: NOT
28973: PUSH
28974: LD_VAR 0 2
28978: NOT
28979: OR
28980: IFFALSE 28984
// exit ;
28982: GO 29142
// x := GetX ( building ) ;
28984: LD_ADDR_VAR 0 5
28988: PUSH
28989: LD_VAR 0 2
28993: PPUSH
28994: CALL_OW 250
28998: ST_TO_ADDR
// y := GetY ( building ) ;
28999: LD_ADDR_VAR 0 6
29003: PUSH
29004: LD_VAR 0 2
29008: PPUSH
29009: CALL_OW 251
29013: ST_TO_ADDR
// for i = 0 to 5 do
29014: LD_ADDR_VAR 0 4
29018: PUSH
29019: DOUBLE
29020: LD_INT 0
29022: DEC
29023: ST_TO_ADDR
29024: LD_INT 5
29026: PUSH
29027: FOR_TO
29028: IFFALSE 29140
// begin _x := ShiftX ( x , i , 3 ) ;
29030: LD_ADDR_VAR 0 7
29034: PUSH
29035: LD_VAR 0 5
29039: PPUSH
29040: LD_VAR 0 4
29044: PPUSH
29045: LD_INT 3
29047: PPUSH
29048: CALL_OW 272
29052: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29053: LD_ADDR_VAR 0 8
29057: PUSH
29058: LD_VAR 0 6
29062: PPUSH
29063: LD_VAR 0 4
29067: PPUSH
29068: LD_INT 3
29070: PPUSH
29071: CALL_OW 273
29075: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29076: LD_VAR 0 7
29080: PPUSH
29081: LD_VAR 0 8
29085: PPUSH
29086: CALL_OW 488
29090: NOT
29091: IFFALSE 29095
// continue ;
29093: GO 29027
// if HexInfo ( _x , _y ) = 0 then
29095: LD_VAR 0 7
29099: PPUSH
29100: LD_VAR 0 8
29104: PPUSH
29105: CALL_OW 428
29109: PUSH
29110: LD_INT 0
29112: EQUAL
29113: IFFALSE 29138
// begin ComMoveXY ( unit , _x , _y ) ;
29115: LD_VAR 0 1
29119: PPUSH
29120: LD_VAR 0 7
29124: PPUSH
29125: LD_VAR 0 8
29129: PPUSH
29130: CALL_OW 111
// exit ;
29134: POP
29135: POP
29136: GO 29142
// end ; end ;
29138: GO 29027
29140: POP
29141: POP
// end ;
29142: LD_VAR 0 3
29146: RET
// export function ScanBase ( side , base_area ) ; begin
29147: LD_INT 0
29149: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29150: LD_ADDR_VAR 0 3
29154: PUSH
29155: LD_VAR 0 2
29159: PPUSH
29160: LD_INT 81
29162: PUSH
29163: LD_VAR 0 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PPUSH
29172: CALL_OW 70
29176: ST_TO_ADDR
// end ;
29177: LD_VAR 0 3
29181: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29182: LD_INT 0
29184: PPUSH
29185: PPUSH
29186: PPUSH
29187: PPUSH
// result := false ;
29188: LD_ADDR_VAR 0 2
29192: PUSH
29193: LD_INT 0
29195: ST_TO_ADDR
// side := GetSide ( unit ) ;
29196: LD_ADDR_VAR 0 3
29200: PUSH
29201: LD_VAR 0 1
29205: PPUSH
29206: CALL_OW 255
29210: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29211: LD_ADDR_VAR 0 4
29215: PUSH
29216: LD_VAR 0 1
29220: PPUSH
29221: CALL_OW 248
29225: ST_TO_ADDR
// case nat of 1 :
29226: LD_VAR 0 4
29230: PUSH
29231: LD_INT 1
29233: DOUBLE
29234: EQUAL
29235: IFTRUE 29239
29237: GO 29250
29239: POP
// tech := tech_lassight ; 2 :
29240: LD_ADDR_VAR 0 5
29244: PUSH
29245: LD_INT 12
29247: ST_TO_ADDR
29248: GO 29289
29250: LD_INT 2
29252: DOUBLE
29253: EQUAL
29254: IFTRUE 29258
29256: GO 29269
29258: POP
// tech := tech_mortar ; 3 :
29259: LD_ADDR_VAR 0 5
29263: PUSH
29264: LD_INT 41
29266: ST_TO_ADDR
29267: GO 29289
29269: LD_INT 3
29271: DOUBLE
29272: EQUAL
29273: IFTRUE 29277
29275: GO 29288
29277: POP
// tech := tech_bazooka ; end ;
29278: LD_ADDR_VAR 0 5
29282: PUSH
29283: LD_INT 44
29285: ST_TO_ADDR
29286: GO 29289
29288: POP
// if Researched ( side , tech ) then
29289: LD_VAR 0 3
29293: PPUSH
29294: LD_VAR 0 5
29298: PPUSH
29299: CALL_OW 325
29303: IFFALSE 29330
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29305: LD_ADDR_VAR 0 2
29309: PUSH
29310: LD_INT 5
29312: PUSH
29313: LD_INT 8
29315: PUSH
29316: LD_INT 9
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: LIST
29323: PUSH
29324: LD_VAR 0 4
29328: ARRAY
29329: ST_TO_ADDR
// end ;
29330: LD_VAR 0 2
29334: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29335: LD_INT 0
29337: PPUSH
29338: PPUSH
29339: PPUSH
// if not mines then
29340: LD_VAR 0 2
29344: NOT
29345: IFFALSE 29349
// exit ;
29347: GO 29493
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29349: LD_ADDR_VAR 0 5
29353: PUSH
29354: LD_INT 81
29356: PUSH
29357: LD_VAR 0 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: PUSH
29369: LD_INT 21
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 69
29391: ST_TO_ADDR
// for i in mines do
29392: LD_ADDR_VAR 0 4
29396: PUSH
29397: LD_VAR 0 2
29401: PUSH
29402: FOR_IN
29403: IFFALSE 29491
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29405: LD_VAR 0 4
29409: PUSH
29410: LD_INT 1
29412: ARRAY
29413: PPUSH
29414: LD_VAR 0 4
29418: PUSH
29419: LD_INT 2
29421: ARRAY
29422: PPUSH
29423: CALL_OW 458
29427: NOT
29428: IFFALSE 29432
// continue ;
29430: GO 29402
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29432: LD_VAR 0 4
29436: PUSH
29437: LD_INT 1
29439: ARRAY
29440: PPUSH
29441: LD_VAR 0 4
29445: PUSH
29446: LD_INT 2
29448: ARRAY
29449: PPUSH
29450: CALL_OW 428
29454: PUSH
29455: LD_VAR 0 5
29459: IN
29460: IFFALSE 29489
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29462: LD_VAR 0 4
29466: PUSH
29467: LD_INT 1
29469: ARRAY
29470: PPUSH
29471: LD_VAR 0 4
29475: PUSH
29476: LD_INT 2
29478: ARRAY
29479: PPUSH
29480: LD_VAR 0 1
29484: PPUSH
29485: CALL_OW 456
// end ;
29489: GO 29402
29491: POP
29492: POP
// end ;
29493: LD_VAR 0 3
29497: RET
// export function Count ( array ) ; var i ; begin
29498: LD_INT 0
29500: PPUSH
29501: PPUSH
// result := 0 ;
29502: LD_ADDR_VAR 0 2
29506: PUSH
29507: LD_INT 0
29509: ST_TO_ADDR
// for i in array do
29510: LD_ADDR_VAR 0 3
29514: PUSH
29515: LD_VAR 0 1
29519: PUSH
29520: FOR_IN
29521: IFFALSE 29545
// if i then
29523: LD_VAR 0 3
29527: IFFALSE 29543
// result := result + 1 ;
29529: LD_ADDR_VAR 0 2
29533: PUSH
29534: LD_VAR 0 2
29538: PUSH
29539: LD_INT 1
29541: PLUS
29542: ST_TO_ADDR
29543: GO 29520
29545: POP
29546: POP
// end ;
29547: LD_VAR 0 2
29551: RET
// export function IsEmpty ( building ) ; begin
29552: LD_INT 0
29554: PPUSH
// if not building then
29555: LD_VAR 0 1
29559: NOT
29560: IFFALSE 29564
// exit ;
29562: GO 29607
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29564: LD_ADDR_VAR 0 2
29568: PUSH
29569: LD_VAR 0 1
29573: PUSH
29574: LD_INT 22
29576: PUSH
29577: LD_VAR 0 1
29581: PPUSH
29582: CALL_OW 255
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 58
29593: PUSH
29594: EMPTY
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 69
29605: IN
29606: ST_TO_ADDR
// end ;
29607: LD_VAR 0 2
29611: RET
// export function IsNotFull ( building ) ; var places ; begin
29612: LD_INT 0
29614: PPUSH
29615: PPUSH
// if not building then
29616: LD_VAR 0 1
29620: NOT
29621: IFFALSE 29625
// exit ;
29623: GO 29796
// result := false ;
29625: LD_ADDR_VAR 0 2
29629: PUSH
29630: LD_INT 0
29632: ST_TO_ADDR
// places := 0 ;
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_INT 0
29640: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29641: LD_VAR 0 1
29645: PPUSH
29646: CALL_OW 266
29650: PUSH
29651: LD_INT 0
29653: DOUBLE
29654: EQUAL
29655: IFTRUE 29713
29657: LD_INT 1
29659: DOUBLE
29660: EQUAL
29661: IFTRUE 29713
29663: LD_INT 6
29665: DOUBLE
29666: EQUAL
29667: IFTRUE 29713
29669: LD_INT 7
29671: DOUBLE
29672: EQUAL
29673: IFTRUE 29713
29675: LD_INT 8
29677: DOUBLE
29678: EQUAL
29679: IFTRUE 29713
29681: LD_INT 4
29683: DOUBLE
29684: EQUAL
29685: IFTRUE 29713
29687: LD_INT 5
29689: DOUBLE
29690: EQUAL
29691: IFTRUE 29713
29693: LD_INT 2
29695: DOUBLE
29696: EQUAL
29697: IFTRUE 29713
29699: LD_INT 3
29701: DOUBLE
29702: EQUAL
29703: IFTRUE 29713
29705: LD_INT 35
29707: DOUBLE
29708: EQUAL
29709: IFTRUE 29713
29711: GO 29724
29713: POP
// places := 6 ; b_bunker , b_breastwork :
29714: LD_ADDR_VAR 0 3
29718: PUSH
29719: LD_INT 6
29721: ST_TO_ADDR
29722: GO 29769
29724: LD_INT 32
29726: DOUBLE
29727: EQUAL
29728: IFTRUE 29738
29730: LD_INT 31
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29749
29738: POP
// places := 1 ; b_control_tower :
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_INT 1
29746: ST_TO_ADDR
29747: GO 29769
29749: LD_INT 36
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29757
29755: GO 29768
29757: POP
// places := 3 ; end ;
29758: LD_ADDR_VAR 0 3
29762: PUSH
29763: LD_INT 3
29765: ST_TO_ADDR
29766: GO 29769
29768: POP
// if places then
29769: LD_VAR 0 3
29773: IFFALSE 29796
// result := UnitsInside ( building ) < places ;
29775: LD_ADDR_VAR 0 2
29779: PUSH
29780: LD_VAR 0 1
29784: PPUSH
29785: CALL_OW 313
29789: PUSH
29790: LD_VAR 0 3
29794: LESS
29795: ST_TO_ADDR
// end ;
29796: LD_VAR 0 2
29800: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29801: LD_INT 0
29803: PPUSH
29804: PPUSH
29805: PPUSH
29806: PPUSH
// tmp := [ ] ;
29807: LD_ADDR_VAR 0 3
29811: PUSH
29812: EMPTY
29813: ST_TO_ADDR
// list := [ ] ;
29814: LD_ADDR_VAR 0 5
29818: PUSH
29819: EMPTY
29820: ST_TO_ADDR
// for i = 16 to 25 do
29821: LD_ADDR_VAR 0 4
29825: PUSH
29826: DOUBLE
29827: LD_INT 16
29829: DEC
29830: ST_TO_ADDR
29831: LD_INT 25
29833: PUSH
29834: FOR_TO
29835: IFFALSE 29908
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29837: LD_ADDR_VAR 0 3
29841: PUSH
29842: LD_VAR 0 3
29846: PUSH
29847: LD_INT 22
29849: PUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 255
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 91
29866: PUSH
29867: LD_VAR 0 1
29871: PUSH
29872: LD_INT 6
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 30
29882: PUSH
29883: LD_VAR 0 4
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: LIST
29896: PUSH
29897: EMPTY
29898: LIST
29899: PPUSH
29900: CALL_OW 69
29904: ADD
29905: ST_TO_ADDR
29906: GO 29834
29908: POP
29909: POP
// for i = 1 to tmp do
29910: LD_ADDR_VAR 0 4
29914: PUSH
29915: DOUBLE
29916: LD_INT 1
29918: DEC
29919: ST_TO_ADDR
29920: LD_VAR 0 3
29924: PUSH
29925: FOR_TO
29926: IFFALSE 30014
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29928: LD_ADDR_VAR 0 5
29932: PUSH
29933: LD_VAR 0 5
29937: PUSH
29938: LD_VAR 0 3
29942: PUSH
29943: LD_VAR 0 4
29947: ARRAY
29948: PPUSH
29949: CALL_OW 266
29953: PUSH
29954: LD_VAR 0 3
29958: PUSH
29959: LD_VAR 0 4
29963: ARRAY
29964: PPUSH
29965: CALL_OW 250
29969: PUSH
29970: LD_VAR 0 3
29974: PUSH
29975: LD_VAR 0 4
29979: ARRAY
29980: PPUSH
29981: CALL_OW 251
29985: PUSH
29986: LD_VAR 0 3
29990: PUSH
29991: LD_VAR 0 4
29995: ARRAY
29996: PPUSH
29997: CALL_OW 254
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: PUSH
30008: EMPTY
30009: LIST
30010: ADD
30011: ST_TO_ADDR
30012: GO 29925
30014: POP
30015: POP
// result := list ;
30016: LD_ADDR_VAR 0 2
30020: PUSH
30021: LD_VAR 0 5
30025: ST_TO_ADDR
// end ;
30026: LD_VAR 0 2
30030: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30031: LD_INT 0
30033: PPUSH
30034: PPUSH
30035: PPUSH
30036: PPUSH
30037: PPUSH
30038: PPUSH
30039: PPUSH
// if not factory then
30040: LD_VAR 0 1
30044: NOT
30045: IFFALSE 30049
// exit ;
30047: GO 30642
// if control = control_apeman then
30049: LD_VAR 0 4
30053: PUSH
30054: LD_INT 5
30056: EQUAL
30057: IFFALSE 30166
// begin tmp := UnitsInside ( factory ) ;
30059: LD_ADDR_VAR 0 8
30063: PUSH
30064: LD_VAR 0 1
30068: PPUSH
30069: CALL_OW 313
30073: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30074: LD_VAR 0 8
30078: PPUSH
30079: LD_INT 25
30081: PUSH
30082: LD_INT 12
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PPUSH
30089: CALL_OW 72
30093: NOT
30094: IFFALSE 30104
// control := control_manual ;
30096: LD_ADDR_VAR 0 4
30100: PUSH
30101: LD_INT 1
30103: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30104: LD_ADDR_VAR 0 8
30108: PUSH
30109: LD_VAR 0 1
30113: PPUSH
30114: CALL 29801 0 1
30118: ST_TO_ADDR
// if tmp then
30119: LD_VAR 0 8
30123: IFFALSE 30166
// begin for i in tmp do
30125: LD_ADDR_VAR 0 7
30129: PUSH
30130: LD_VAR 0 8
30134: PUSH
30135: FOR_IN
30136: IFFALSE 30164
// if i [ 1 ] = b_ext_radio then
30138: LD_VAR 0 7
30142: PUSH
30143: LD_INT 1
30145: ARRAY
30146: PUSH
30147: LD_INT 22
30149: EQUAL
30150: IFFALSE 30162
// begin control := control_remote ;
30152: LD_ADDR_VAR 0 4
30156: PUSH
30157: LD_INT 2
30159: ST_TO_ADDR
// break ;
30160: GO 30164
// end ;
30162: GO 30135
30164: POP
30165: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30166: LD_VAR 0 1
30170: PPUSH
30171: LD_VAR 0 2
30175: PPUSH
30176: LD_VAR 0 3
30180: PPUSH
30181: LD_VAR 0 4
30185: PPUSH
30186: LD_VAR 0 5
30190: PPUSH
30191: CALL_OW 448
30195: IFFALSE 30230
// begin result := [ chassis , engine , control , weapon ] ;
30197: LD_ADDR_VAR 0 6
30201: PUSH
30202: LD_VAR 0 2
30206: PUSH
30207: LD_VAR 0 3
30211: PUSH
30212: LD_VAR 0 4
30216: PUSH
30217: LD_VAR 0 5
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: ST_TO_ADDR
// exit ;
30228: GO 30642
// end ; _chassis := AvailableChassisList ( factory ) ;
30230: LD_ADDR_VAR 0 9
30234: PUSH
30235: LD_VAR 0 1
30239: PPUSH
30240: CALL_OW 475
30244: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30245: LD_ADDR_VAR 0 11
30249: PUSH
30250: LD_VAR 0 1
30254: PPUSH
30255: CALL_OW 476
30259: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30260: LD_ADDR_VAR 0 12
30264: PUSH
30265: LD_VAR 0 1
30269: PPUSH
30270: CALL_OW 477
30274: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30275: LD_ADDR_VAR 0 10
30279: PUSH
30280: LD_VAR 0 1
30284: PPUSH
30285: CALL_OW 478
30289: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30290: LD_VAR 0 9
30294: NOT
30295: PUSH
30296: LD_VAR 0 11
30300: NOT
30301: OR
30302: PUSH
30303: LD_VAR 0 12
30307: NOT
30308: OR
30309: PUSH
30310: LD_VAR 0 10
30314: NOT
30315: OR
30316: IFFALSE 30351
// begin result := [ chassis , engine , control , weapon ] ;
30318: LD_ADDR_VAR 0 6
30322: PUSH
30323: LD_VAR 0 2
30327: PUSH
30328: LD_VAR 0 3
30332: PUSH
30333: LD_VAR 0 4
30337: PUSH
30338: LD_VAR 0 5
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// exit ;
30349: GO 30642
// end ; if not chassis in _chassis then
30351: LD_VAR 0 2
30355: PUSH
30356: LD_VAR 0 9
30360: IN
30361: NOT
30362: IFFALSE 30388
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30364: LD_ADDR_VAR 0 2
30368: PUSH
30369: LD_VAR 0 9
30373: PUSH
30374: LD_INT 1
30376: PPUSH
30377: LD_VAR 0 9
30381: PPUSH
30382: CALL_OW 12
30386: ARRAY
30387: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30388: LD_VAR 0 2
30392: PPUSH
30393: LD_VAR 0 3
30397: PPUSH
30398: CALL 30647 0 2
30402: NOT
30403: IFFALSE 30462
// repeat engine := _engine [ 1 ] ;
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_VAR 0 11
30414: PUSH
30415: LD_INT 1
30417: ARRAY
30418: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30419: LD_ADDR_VAR 0 11
30423: PUSH
30424: LD_VAR 0 11
30428: PPUSH
30429: LD_INT 1
30431: PPUSH
30432: CALL_OW 3
30436: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30437: LD_VAR 0 2
30441: PPUSH
30442: LD_VAR 0 3
30446: PPUSH
30447: CALL 30647 0 2
30451: PUSH
30452: LD_VAR 0 11
30456: PUSH
30457: EMPTY
30458: EQUAL
30459: OR
30460: IFFALSE 30405
// if not control in _control then
30462: LD_VAR 0 4
30466: PUSH
30467: LD_VAR 0 12
30471: IN
30472: NOT
30473: IFFALSE 30499
// control := _control [ rand ( 1 , _control ) ] ;
30475: LD_ADDR_VAR 0 4
30479: PUSH
30480: LD_VAR 0 12
30484: PUSH
30485: LD_INT 1
30487: PPUSH
30488: LD_VAR 0 12
30492: PPUSH
30493: CALL_OW 12
30497: ARRAY
30498: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30499: LD_VAR 0 2
30503: PPUSH
30504: LD_VAR 0 5
30508: PPUSH
30509: CALL 30867 0 2
30513: NOT
30514: IFFALSE 30573
// repeat weapon := _weapon [ 1 ] ;
30516: LD_ADDR_VAR 0 5
30520: PUSH
30521: LD_VAR 0 10
30525: PUSH
30526: LD_INT 1
30528: ARRAY
30529: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30530: LD_ADDR_VAR 0 10
30534: PUSH
30535: LD_VAR 0 10
30539: PPUSH
30540: LD_INT 1
30542: PPUSH
30543: CALL_OW 3
30547: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30548: LD_VAR 0 2
30552: PPUSH
30553: LD_VAR 0 5
30557: PPUSH
30558: CALL 30867 0 2
30562: PUSH
30563: LD_VAR 0 10
30567: PUSH
30568: EMPTY
30569: EQUAL
30570: OR
30571: IFFALSE 30516
// result := [ ] ;
30573: LD_ADDR_VAR 0 6
30577: PUSH
30578: EMPTY
30579: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30580: LD_VAR 0 1
30584: PPUSH
30585: LD_VAR 0 2
30589: PPUSH
30590: LD_VAR 0 3
30594: PPUSH
30595: LD_VAR 0 4
30599: PPUSH
30600: LD_VAR 0 5
30604: PPUSH
30605: CALL_OW 448
30609: IFFALSE 30642
// result := [ chassis , engine , control , weapon ] ;
30611: LD_ADDR_VAR 0 6
30615: PUSH
30616: LD_VAR 0 2
30620: PUSH
30621: LD_VAR 0 3
30625: PUSH
30626: LD_VAR 0 4
30630: PUSH
30631: LD_VAR 0 5
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: ST_TO_ADDR
// end ;
30642: LD_VAR 0 6
30646: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30647: LD_INT 0
30649: PPUSH
// if not chassis or not engine then
30650: LD_VAR 0 1
30654: NOT
30655: PUSH
30656: LD_VAR 0 2
30660: NOT
30661: OR
30662: IFFALSE 30666
// exit ;
30664: GO 30862
// case engine of engine_solar :
30666: LD_VAR 0 2
30670: PUSH
30671: LD_INT 2
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30717
30679: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_INT 11
30687: PUSH
30688: LD_INT 12
30690: PUSH
30691: LD_INT 13
30693: PUSH
30694: LD_INT 14
30696: PUSH
30697: LD_INT 1
30699: PUSH
30700: LD_INT 2
30702: PUSH
30703: LD_INT 3
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
30715: GO 30846
30717: LD_INT 1
30719: DOUBLE
30720: EQUAL
30721: IFTRUE 30725
30723: GO 30787
30725: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30726: LD_ADDR_VAR 0 3
30730: PUSH
30731: LD_INT 11
30733: PUSH
30734: LD_INT 12
30736: PUSH
30737: LD_INT 13
30739: PUSH
30740: LD_INT 14
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 3
30751: PUSH
30752: LD_INT 4
30754: PUSH
30755: LD_INT 5
30757: PUSH
30758: LD_INT 21
30760: PUSH
30761: LD_INT 23
30763: PUSH
30764: LD_INT 22
30766: PUSH
30767: LD_INT 24
30769: PUSH
30770: EMPTY
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: ST_TO_ADDR
30785: GO 30846
30787: LD_INT 3
30789: DOUBLE
30790: EQUAL
30791: IFTRUE 30795
30793: GO 30845
30795: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30796: LD_ADDR_VAR 0 3
30800: PUSH
30801: LD_INT 13
30803: PUSH
30804: LD_INT 14
30806: PUSH
30807: LD_INT 2
30809: PUSH
30810: LD_INT 3
30812: PUSH
30813: LD_INT 4
30815: PUSH
30816: LD_INT 5
30818: PUSH
30819: LD_INT 21
30821: PUSH
30822: LD_INT 22
30824: PUSH
30825: LD_INT 23
30827: PUSH
30828: LD_INT 24
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
30843: GO 30846
30845: POP
// result := ( chassis in result ) ;
30846: LD_ADDR_VAR 0 3
30850: PUSH
30851: LD_VAR 0 1
30855: PUSH
30856: LD_VAR 0 3
30860: IN
30861: ST_TO_ADDR
// end ;
30862: LD_VAR 0 3
30866: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30867: LD_INT 0
30869: PPUSH
// if not chassis or not weapon then
30870: LD_VAR 0 1
30874: NOT
30875: PUSH
30876: LD_VAR 0 2
30880: NOT
30881: OR
30882: IFFALSE 30886
// exit ;
30884: GO 31946
// case weapon of us_machine_gun :
30886: LD_VAR 0 2
30890: PUSH
30891: LD_INT 2
30893: DOUBLE
30894: EQUAL
30895: IFTRUE 30899
30897: GO 30929
30899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30900: LD_ADDR_VAR 0 3
30904: PUSH
30905: LD_INT 1
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 4
30916: PUSH
30917: LD_INT 5
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
30927: GO 31930
30929: LD_INT 3
30931: DOUBLE
30932: EQUAL
30933: IFTRUE 30937
30935: GO 30967
30937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30938: LD_ADDR_VAR 0 3
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: LD_INT 2
30948: PUSH
30949: LD_INT 3
30951: PUSH
30952: LD_INT 4
30954: PUSH
30955: LD_INT 5
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: ST_TO_ADDR
30965: GO 31930
30967: LD_INT 11
30969: DOUBLE
30970: EQUAL
30971: IFTRUE 30975
30973: GO 31005
30975: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: LD_INT 3
30989: PUSH
30990: LD_INT 4
30992: PUSH
30993: LD_INT 5
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
31003: GO 31930
31005: LD_INT 4
31007: DOUBLE
31008: EQUAL
31009: IFTRUE 31013
31011: GO 31039
31013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31014: LD_ADDR_VAR 0 3
31018: PUSH
31019: LD_INT 2
31021: PUSH
31022: LD_INT 3
31024: PUSH
31025: LD_INT 4
31027: PUSH
31028: LD_INT 5
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: ST_TO_ADDR
31037: GO 31930
31039: LD_INT 5
31041: DOUBLE
31042: EQUAL
31043: IFTRUE 31047
31045: GO 31073
31047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31048: LD_ADDR_VAR 0 3
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 4
31061: PUSH
31062: LD_INT 5
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: ST_TO_ADDR
31071: GO 31930
31073: LD_INT 9
31075: DOUBLE
31076: EQUAL
31077: IFTRUE 31081
31079: GO 31107
31081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31082: LD_ADDR_VAR 0 3
31086: PUSH
31087: LD_INT 2
31089: PUSH
31090: LD_INT 3
31092: PUSH
31093: LD_INT 4
31095: PUSH
31096: LD_INT 5
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: ST_TO_ADDR
31105: GO 31930
31107: LD_INT 7
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31141
31115: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 3
31126: PUSH
31127: LD_INT 4
31129: PUSH
31130: LD_INT 5
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: ST_TO_ADDR
31139: GO 31930
31141: LD_INT 12
31143: DOUBLE
31144: EQUAL
31145: IFTRUE 31149
31147: GO 31175
31149: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31150: LD_ADDR_VAR 0 3
31154: PUSH
31155: LD_INT 2
31157: PUSH
31158: LD_INT 3
31160: PUSH
31161: LD_INT 4
31163: PUSH
31164: LD_INT 5
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: ST_TO_ADDR
31173: GO 31930
31175: LD_INT 13
31177: DOUBLE
31178: EQUAL
31179: IFTRUE 31183
31181: GO 31209
31183: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31184: LD_ADDR_VAR 0 3
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: LD_INT 3
31194: PUSH
31195: LD_INT 4
31197: PUSH
31198: LD_INT 5
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: ST_TO_ADDR
31207: GO 31930
31209: LD_INT 14
31211: DOUBLE
31212: EQUAL
31213: IFTRUE 31217
31215: GO 31235
31217: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31218: LD_ADDR_VAR 0 3
31222: PUSH
31223: LD_INT 4
31225: PUSH
31226: LD_INT 5
31228: PUSH
31229: EMPTY
31230: LIST
31231: LIST
31232: ST_TO_ADDR
31233: GO 31930
31235: LD_INT 6
31237: DOUBLE
31238: EQUAL
31239: IFTRUE 31243
31241: GO 31261
31243: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31244: LD_ADDR_VAR 0 3
31248: PUSH
31249: LD_INT 4
31251: PUSH
31252: LD_INT 5
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: ST_TO_ADDR
31259: GO 31930
31261: LD_INT 10
31263: DOUBLE
31264: EQUAL
31265: IFTRUE 31269
31267: GO 31287
31269: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31270: LD_ADDR_VAR 0 3
31274: PUSH
31275: LD_INT 4
31277: PUSH
31278: LD_INT 5
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: ST_TO_ADDR
31285: GO 31930
31287: LD_INT 22
31289: DOUBLE
31290: EQUAL
31291: IFTRUE 31295
31293: GO 31321
31295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31296: LD_ADDR_VAR 0 3
31300: PUSH
31301: LD_INT 11
31303: PUSH
31304: LD_INT 12
31306: PUSH
31307: LD_INT 13
31309: PUSH
31310: LD_INT 14
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: ST_TO_ADDR
31319: GO 31930
31321: LD_INT 23
31323: DOUBLE
31324: EQUAL
31325: IFTRUE 31329
31327: GO 31355
31329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31330: LD_ADDR_VAR 0 3
31334: PUSH
31335: LD_INT 11
31337: PUSH
31338: LD_INT 12
31340: PUSH
31341: LD_INT 13
31343: PUSH
31344: LD_INT 14
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: ST_TO_ADDR
31353: GO 31930
31355: LD_INT 24
31357: DOUBLE
31358: EQUAL
31359: IFTRUE 31363
31361: GO 31389
31363: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31364: LD_ADDR_VAR 0 3
31368: PUSH
31369: LD_INT 11
31371: PUSH
31372: LD_INT 12
31374: PUSH
31375: LD_INT 13
31377: PUSH
31378: LD_INT 14
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: ST_TO_ADDR
31387: GO 31930
31389: LD_INT 30
31391: DOUBLE
31392: EQUAL
31393: IFTRUE 31397
31395: GO 31423
31397: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31398: LD_ADDR_VAR 0 3
31402: PUSH
31403: LD_INT 11
31405: PUSH
31406: LD_INT 12
31408: PUSH
31409: LD_INT 13
31411: PUSH
31412: LD_INT 14
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
31421: GO 31930
31423: LD_INT 25
31425: DOUBLE
31426: EQUAL
31427: IFTRUE 31431
31429: GO 31449
31431: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31432: LD_ADDR_VAR 0 3
31436: PUSH
31437: LD_INT 13
31439: PUSH
31440: LD_INT 14
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: ST_TO_ADDR
31447: GO 31930
31449: LD_INT 27
31451: DOUBLE
31452: EQUAL
31453: IFTRUE 31457
31455: GO 31475
31457: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: LD_INT 13
31465: PUSH
31466: LD_INT 14
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: ST_TO_ADDR
31473: GO 31930
31475: LD_INT 92
31477: DOUBLE
31478: EQUAL
31479: IFTRUE 31483
31481: GO 31509
31483: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31484: LD_ADDR_VAR 0 3
31488: PUSH
31489: LD_INT 11
31491: PUSH
31492: LD_INT 12
31494: PUSH
31495: LD_INT 13
31497: PUSH
31498: LD_INT 14
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
31507: GO 31930
31509: LD_INT 28
31511: DOUBLE
31512: EQUAL
31513: IFTRUE 31517
31515: GO 31535
31517: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31518: LD_ADDR_VAR 0 3
31522: PUSH
31523: LD_INT 13
31525: PUSH
31526: LD_INT 14
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: ST_TO_ADDR
31533: GO 31930
31535: LD_INT 29
31537: DOUBLE
31538: EQUAL
31539: IFTRUE 31543
31541: GO 31561
31543: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31544: LD_ADDR_VAR 0 3
31548: PUSH
31549: LD_INT 13
31551: PUSH
31552: LD_INT 14
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: ST_TO_ADDR
31559: GO 31930
31561: LD_INT 31
31563: DOUBLE
31564: EQUAL
31565: IFTRUE 31569
31567: GO 31587
31569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31570: LD_ADDR_VAR 0 3
31574: PUSH
31575: LD_INT 13
31577: PUSH
31578: LD_INT 14
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: ST_TO_ADDR
31585: GO 31930
31587: LD_INT 26
31589: DOUBLE
31590: EQUAL
31591: IFTRUE 31595
31593: GO 31613
31595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31596: LD_ADDR_VAR 0 3
31600: PUSH
31601: LD_INT 13
31603: PUSH
31604: LD_INT 14
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: ST_TO_ADDR
31611: GO 31930
31613: LD_INT 42
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31647
31621: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31622: LD_ADDR_VAR 0 3
31626: PUSH
31627: LD_INT 21
31629: PUSH
31630: LD_INT 22
31632: PUSH
31633: LD_INT 23
31635: PUSH
31636: LD_INT 24
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
31645: GO 31930
31647: LD_INT 43
31649: DOUBLE
31650: EQUAL
31651: IFTRUE 31655
31653: GO 31681
31655: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31656: LD_ADDR_VAR 0 3
31660: PUSH
31661: LD_INT 21
31663: PUSH
31664: LD_INT 22
31666: PUSH
31667: LD_INT 23
31669: PUSH
31670: LD_INT 24
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: ST_TO_ADDR
31679: GO 31930
31681: LD_INT 44
31683: DOUBLE
31684: EQUAL
31685: IFTRUE 31689
31687: GO 31715
31689: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31690: LD_ADDR_VAR 0 3
31694: PUSH
31695: LD_INT 21
31697: PUSH
31698: LD_INT 22
31700: PUSH
31701: LD_INT 23
31703: PUSH
31704: LD_INT 24
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: ST_TO_ADDR
31713: GO 31930
31715: LD_INT 45
31717: DOUBLE
31718: EQUAL
31719: IFTRUE 31723
31721: GO 31749
31723: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31724: LD_ADDR_VAR 0 3
31728: PUSH
31729: LD_INT 21
31731: PUSH
31732: LD_INT 22
31734: PUSH
31735: LD_INT 23
31737: PUSH
31738: LD_INT 24
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: ST_TO_ADDR
31747: GO 31930
31749: LD_INT 49
31751: DOUBLE
31752: EQUAL
31753: IFTRUE 31757
31755: GO 31783
31757: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31758: LD_ADDR_VAR 0 3
31762: PUSH
31763: LD_INT 21
31765: PUSH
31766: LD_INT 22
31768: PUSH
31769: LD_INT 23
31771: PUSH
31772: LD_INT 24
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: ST_TO_ADDR
31781: GO 31930
31783: LD_INT 51
31785: DOUBLE
31786: EQUAL
31787: IFTRUE 31791
31789: GO 31817
31791: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31792: LD_ADDR_VAR 0 3
31796: PUSH
31797: LD_INT 21
31799: PUSH
31800: LD_INT 22
31802: PUSH
31803: LD_INT 23
31805: PUSH
31806: LD_INT 24
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
31815: GO 31930
31817: LD_INT 52
31819: DOUBLE
31820: EQUAL
31821: IFTRUE 31825
31823: GO 31851
31825: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31826: LD_ADDR_VAR 0 3
31830: PUSH
31831: LD_INT 21
31833: PUSH
31834: LD_INT 22
31836: PUSH
31837: LD_INT 23
31839: PUSH
31840: LD_INT 24
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
31849: GO 31930
31851: LD_INT 53
31853: DOUBLE
31854: EQUAL
31855: IFTRUE 31859
31857: GO 31877
31859: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: LD_INT 23
31867: PUSH
31868: LD_INT 24
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: ST_TO_ADDR
31875: GO 31930
31877: LD_INT 46
31879: DOUBLE
31880: EQUAL
31881: IFTRUE 31885
31883: GO 31903
31885: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31886: LD_ADDR_VAR 0 3
31890: PUSH
31891: LD_INT 23
31893: PUSH
31894: LD_INT 24
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: ST_TO_ADDR
31901: GO 31930
31903: LD_INT 47
31905: DOUBLE
31906: EQUAL
31907: IFTRUE 31911
31909: GO 31929
31911: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31912: LD_ADDR_VAR 0 3
31916: PUSH
31917: LD_INT 23
31919: PUSH
31920: LD_INT 24
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: ST_TO_ADDR
31927: GO 31930
31929: POP
// result := ( chassis in result ) ;
31930: LD_ADDR_VAR 0 3
31934: PUSH
31935: LD_VAR 0 1
31939: PUSH
31940: LD_VAR 0 3
31944: IN
31945: ST_TO_ADDR
// end ;
31946: LD_VAR 0 3
31950: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31951: LD_INT 0
31953: PPUSH
31954: PPUSH
31955: PPUSH
31956: PPUSH
31957: PPUSH
31958: PPUSH
31959: PPUSH
// result := array ;
31960: LD_ADDR_VAR 0 5
31964: PUSH
31965: LD_VAR 0 1
31969: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31970: LD_VAR 0 1
31974: NOT
31975: PUSH
31976: LD_VAR 0 2
31980: NOT
31981: OR
31982: PUSH
31983: LD_VAR 0 3
31987: NOT
31988: OR
31989: PUSH
31990: LD_VAR 0 2
31994: PUSH
31995: LD_VAR 0 1
31999: GREATER
32000: OR
32001: PUSH
32002: LD_VAR 0 3
32006: PUSH
32007: LD_VAR 0 1
32011: GREATER
32012: OR
32013: IFFALSE 32017
// exit ;
32015: GO 32313
// if direction then
32017: LD_VAR 0 4
32021: IFFALSE 32085
// begin d := 1 ;
32023: LD_ADDR_VAR 0 9
32027: PUSH
32028: LD_INT 1
32030: ST_TO_ADDR
// if i_from > i_to then
32031: LD_VAR 0 2
32035: PUSH
32036: LD_VAR 0 3
32040: GREATER
32041: IFFALSE 32067
// length := ( array - i_from ) + i_to else
32043: LD_ADDR_VAR 0 11
32047: PUSH
32048: LD_VAR 0 1
32052: PUSH
32053: LD_VAR 0 2
32057: MINUS
32058: PUSH
32059: LD_VAR 0 3
32063: PLUS
32064: ST_TO_ADDR
32065: GO 32083
// length := i_to - i_from ;
32067: LD_ADDR_VAR 0 11
32071: PUSH
32072: LD_VAR 0 3
32076: PUSH
32077: LD_VAR 0 2
32081: MINUS
32082: ST_TO_ADDR
// end else
32083: GO 32146
// begin d := - 1 ;
32085: LD_ADDR_VAR 0 9
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: ST_TO_ADDR
// if i_from > i_to then
32094: LD_VAR 0 2
32098: PUSH
32099: LD_VAR 0 3
32103: GREATER
32104: IFFALSE 32124
// length := i_from - i_to else
32106: LD_ADDR_VAR 0 11
32110: PUSH
32111: LD_VAR 0 2
32115: PUSH
32116: LD_VAR 0 3
32120: MINUS
32121: ST_TO_ADDR
32122: GO 32146
// length := ( array - i_to ) + i_from ;
32124: LD_ADDR_VAR 0 11
32128: PUSH
32129: LD_VAR 0 1
32133: PUSH
32134: LD_VAR 0 3
32138: MINUS
32139: PUSH
32140: LD_VAR 0 2
32144: PLUS
32145: ST_TO_ADDR
// end ; if not length then
32146: LD_VAR 0 11
32150: NOT
32151: IFFALSE 32155
// exit ;
32153: GO 32313
// tmp := array ;
32155: LD_ADDR_VAR 0 10
32159: PUSH
32160: LD_VAR 0 1
32164: ST_TO_ADDR
// for i = 1 to length do
32165: LD_ADDR_VAR 0 6
32169: PUSH
32170: DOUBLE
32171: LD_INT 1
32173: DEC
32174: ST_TO_ADDR
32175: LD_VAR 0 11
32179: PUSH
32180: FOR_TO
32181: IFFALSE 32301
// begin for j = 1 to array do
32183: LD_ADDR_VAR 0 7
32187: PUSH
32188: DOUBLE
32189: LD_INT 1
32191: DEC
32192: ST_TO_ADDR
32193: LD_VAR 0 1
32197: PUSH
32198: FOR_TO
32199: IFFALSE 32287
// begin k := j + d ;
32201: LD_ADDR_VAR 0 8
32205: PUSH
32206: LD_VAR 0 7
32210: PUSH
32211: LD_VAR 0 9
32215: PLUS
32216: ST_TO_ADDR
// if k > array then
32217: LD_VAR 0 8
32221: PUSH
32222: LD_VAR 0 1
32226: GREATER
32227: IFFALSE 32237
// k := 1 ;
32229: LD_ADDR_VAR 0 8
32233: PUSH
32234: LD_INT 1
32236: ST_TO_ADDR
// if not k then
32237: LD_VAR 0 8
32241: NOT
32242: IFFALSE 32254
// k := array ;
32244: LD_ADDR_VAR 0 8
32248: PUSH
32249: LD_VAR 0 1
32253: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32254: LD_ADDR_VAR 0 10
32258: PUSH
32259: LD_VAR 0 10
32263: PPUSH
32264: LD_VAR 0 8
32268: PPUSH
32269: LD_VAR 0 1
32273: PUSH
32274: LD_VAR 0 7
32278: ARRAY
32279: PPUSH
32280: CALL_OW 1
32284: ST_TO_ADDR
// end ;
32285: GO 32198
32287: POP
32288: POP
// array := tmp ;
32289: LD_ADDR_VAR 0 1
32293: PUSH
32294: LD_VAR 0 10
32298: ST_TO_ADDR
// end ;
32299: GO 32180
32301: POP
32302: POP
// result := array ;
32303: LD_ADDR_VAR 0 5
32307: PUSH
32308: LD_VAR 0 1
32312: ST_TO_ADDR
// end ;
32313: LD_VAR 0 5
32317: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32318: LD_INT 0
32320: PPUSH
32321: PPUSH
// result := 0 ;
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_INT 0
32329: ST_TO_ADDR
// if not array or not value in array then
32330: LD_VAR 0 1
32334: NOT
32335: PUSH
32336: LD_VAR 0 2
32340: PUSH
32341: LD_VAR 0 1
32345: IN
32346: NOT
32347: OR
32348: IFFALSE 32352
// exit ;
32350: GO 32406
// for i = 1 to array do
32352: LD_ADDR_VAR 0 4
32356: PUSH
32357: DOUBLE
32358: LD_INT 1
32360: DEC
32361: ST_TO_ADDR
32362: LD_VAR 0 1
32366: PUSH
32367: FOR_TO
32368: IFFALSE 32404
// if value = array [ i ] then
32370: LD_VAR 0 2
32374: PUSH
32375: LD_VAR 0 1
32379: PUSH
32380: LD_VAR 0 4
32384: ARRAY
32385: EQUAL
32386: IFFALSE 32402
// begin result := i ;
32388: LD_ADDR_VAR 0 3
32392: PUSH
32393: LD_VAR 0 4
32397: ST_TO_ADDR
// exit ;
32398: POP
32399: POP
32400: GO 32406
// end ;
32402: GO 32367
32404: POP
32405: POP
// end ;
32406: LD_VAR 0 3
32410: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32411: LD_INT 0
32413: PPUSH
// vc_chassis := chassis ;
32414: LD_ADDR_OWVAR 37
32418: PUSH
32419: LD_VAR 0 1
32423: ST_TO_ADDR
// vc_engine := engine ;
32424: LD_ADDR_OWVAR 39
32428: PUSH
32429: LD_VAR 0 2
32433: ST_TO_ADDR
// vc_control := control ;
32434: LD_ADDR_OWVAR 38
32438: PUSH
32439: LD_VAR 0 3
32443: ST_TO_ADDR
// vc_weapon := weapon ;
32444: LD_ADDR_OWVAR 40
32448: PUSH
32449: LD_VAR 0 4
32453: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32454: LD_ADDR_OWVAR 41
32458: PUSH
32459: LD_VAR 0 5
32463: ST_TO_ADDR
// end ;
32464: LD_VAR 0 6
32468: RET
// export function WantPlant ( unit ) ; var task ; begin
32469: LD_INT 0
32471: PPUSH
32472: PPUSH
// result := false ;
32473: LD_ADDR_VAR 0 2
32477: PUSH
32478: LD_INT 0
32480: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32481: LD_ADDR_VAR 0 3
32485: PUSH
32486: LD_VAR 0 1
32490: PPUSH
32491: CALL_OW 437
32495: ST_TO_ADDR
// if task then
32496: LD_VAR 0 3
32500: IFFALSE 32528
// if task [ 1 ] [ 1 ] = p then
32502: LD_VAR 0 3
32506: PUSH
32507: LD_INT 1
32509: ARRAY
32510: PUSH
32511: LD_INT 1
32513: ARRAY
32514: PUSH
32515: LD_STRING p
32517: EQUAL
32518: IFFALSE 32528
// result := true ;
32520: LD_ADDR_VAR 0 2
32524: PUSH
32525: LD_INT 1
32527: ST_TO_ADDR
// end ;
32528: LD_VAR 0 2
32532: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32533: LD_INT 0
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
// if pos < 1 then
32539: LD_VAR 0 2
32543: PUSH
32544: LD_INT 1
32546: LESS
32547: IFFALSE 32551
// exit ;
32549: GO 32854
// if pos = 1 then
32551: LD_VAR 0 2
32555: PUSH
32556: LD_INT 1
32558: EQUAL
32559: IFFALSE 32592
// result := Replace ( arr , pos [ 1 ] , value ) else
32561: LD_ADDR_VAR 0 4
32565: PUSH
32566: LD_VAR 0 1
32570: PPUSH
32571: LD_VAR 0 2
32575: PUSH
32576: LD_INT 1
32578: ARRAY
32579: PPUSH
32580: LD_VAR 0 3
32584: PPUSH
32585: CALL_OW 1
32589: ST_TO_ADDR
32590: GO 32854
// begin tmp := arr ;
32592: LD_ADDR_VAR 0 6
32596: PUSH
32597: LD_VAR 0 1
32601: ST_TO_ADDR
// s_arr := [ tmp ] ;
32602: LD_ADDR_VAR 0 7
32606: PUSH
32607: LD_VAR 0 6
32611: PUSH
32612: EMPTY
32613: LIST
32614: ST_TO_ADDR
// for i = 1 to pos - 1 do
32615: LD_ADDR_VAR 0 5
32619: PUSH
32620: DOUBLE
32621: LD_INT 1
32623: DEC
32624: ST_TO_ADDR
32625: LD_VAR 0 2
32629: PUSH
32630: LD_INT 1
32632: MINUS
32633: PUSH
32634: FOR_TO
32635: IFFALSE 32680
// begin tmp := tmp [ pos [ i ] ] ;
32637: LD_ADDR_VAR 0 6
32641: PUSH
32642: LD_VAR 0 6
32646: PUSH
32647: LD_VAR 0 2
32651: PUSH
32652: LD_VAR 0 5
32656: ARRAY
32657: ARRAY
32658: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32659: LD_ADDR_VAR 0 7
32663: PUSH
32664: LD_VAR 0 7
32668: PUSH
32669: LD_VAR 0 6
32673: PUSH
32674: EMPTY
32675: LIST
32676: ADD
32677: ST_TO_ADDR
// end ;
32678: GO 32634
32680: POP
32681: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32682: LD_ADDR_VAR 0 6
32686: PUSH
32687: LD_VAR 0 6
32691: PPUSH
32692: LD_VAR 0 2
32696: PUSH
32697: LD_VAR 0 2
32701: ARRAY
32702: PPUSH
32703: LD_VAR 0 3
32707: PPUSH
32708: CALL_OW 1
32712: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32713: LD_ADDR_VAR 0 7
32717: PUSH
32718: LD_VAR 0 7
32722: PPUSH
32723: LD_VAR 0 7
32727: PPUSH
32728: LD_VAR 0 6
32732: PPUSH
32733: CALL_OW 1
32737: ST_TO_ADDR
// for i = s_arr downto 2 do
32738: LD_ADDR_VAR 0 5
32742: PUSH
32743: DOUBLE
32744: LD_VAR 0 7
32748: INC
32749: ST_TO_ADDR
32750: LD_INT 2
32752: PUSH
32753: FOR_DOWNTO
32754: IFFALSE 32838
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32756: LD_ADDR_VAR 0 6
32760: PUSH
32761: LD_VAR 0 7
32765: PUSH
32766: LD_VAR 0 5
32770: PUSH
32771: LD_INT 1
32773: MINUS
32774: ARRAY
32775: PPUSH
32776: LD_VAR 0 2
32780: PUSH
32781: LD_VAR 0 5
32785: PUSH
32786: LD_INT 1
32788: MINUS
32789: ARRAY
32790: PPUSH
32791: LD_VAR 0 7
32795: PUSH
32796: LD_VAR 0 5
32800: ARRAY
32801: PPUSH
32802: CALL_OW 1
32806: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32807: LD_ADDR_VAR 0 7
32811: PUSH
32812: LD_VAR 0 7
32816: PPUSH
32817: LD_VAR 0 5
32821: PUSH
32822: LD_INT 1
32824: MINUS
32825: PPUSH
32826: LD_VAR 0 6
32830: PPUSH
32831: CALL_OW 1
32835: ST_TO_ADDR
// end ;
32836: GO 32753
32838: POP
32839: POP
// result := s_arr [ 1 ] ;
32840: LD_ADDR_VAR 0 4
32844: PUSH
32845: LD_VAR 0 7
32849: PUSH
32850: LD_INT 1
32852: ARRAY
32853: ST_TO_ADDR
// end ; end ;
32854: LD_VAR 0 4
32858: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32859: LD_INT 0
32861: PPUSH
32862: PPUSH
// if not list then
32863: LD_VAR 0 1
32867: NOT
32868: IFFALSE 32872
// exit ;
32870: GO 32963
// i := list [ pos1 ] ;
32872: LD_ADDR_VAR 0 5
32876: PUSH
32877: LD_VAR 0 1
32881: PUSH
32882: LD_VAR 0 2
32886: ARRAY
32887: ST_TO_ADDR
// if not i then
32888: LD_VAR 0 5
32892: NOT
32893: IFFALSE 32897
// exit ;
32895: GO 32963
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32897: LD_ADDR_VAR 0 1
32901: PUSH
32902: LD_VAR 0 1
32906: PPUSH
32907: LD_VAR 0 2
32911: PPUSH
32912: LD_VAR 0 1
32916: PUSH
32917: LD_VAR 0 3
32921: ARRAY
32922: PPUSH
32923: CALL_OW 1
32927: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32928: LD_ADDR_VAR 0 1
32932: PUSH
32933: LD_VAR 0 1
32937: PPUSH
32938: LD_VAR 0 3
32942: PPUSH
32943: LD_VAR 0 5
32947: PPUSH
32948: CALL_OW 1
32952: ST_TO_ADDR
// result := list ;
32953: LD_ADDR_VAR 0 4
32957: PUSH
32958: LD_VAR 0 1
32962: ST_TO_ADDR
// end ;
32963: LD_VAR 0 4
32967: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32968: LD_INT 0
32970: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32971: LD_ADDR_VAR 0 5
32975: PUSH
32976: LD_VAR 0 1
32980: PPUSH
32981: CALL_OW 250
32985: PPUSH
32986: LD_VAR 0 1
32990: PPUSH
32991: CALL_OW 251
32995: PPUSH
32996: LD_VAR 0 2
33000: PPUSH
33001: LD_VAR 0 3
33005: PPUSH
33006: LD_VAR 0 4
33010: PPUSH
33011: CALL 33021 0 5
33015: ST_TO_ADDR
// end ;
33016: LD_VAR 0 5
33020: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33021: LD_INT 0
33023: PPUSH
33024: PPUSH
33025: PPUSH
33026: PPUSH
// if not list then
33027: LD_VAR 0 3
33031: NOT
33032: IFFALSE 33036
// exit ;
33034: GO 33424
// result := [ ] ;
33036: LD_ADDR_VAR 0 6
33040: PUSH
33041: EMPTY
33042: ST_TO_ADDR
// for i in list do
33043: LD_ADDR_VAR 0 7
33047: PUSH
33048: LD_VAR 0 3
33052: PUSH
33053: FOR_IN
33054: IFFALSE 33256
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33056: LD_ADDR_VAR 0 9
33060: PUSH
33061: LD_VAR 0 7
33065: PPUSH
33066: LD_VAR 0 1
33070: PPUSH
33071: LD_VAR 0 2
33075: PPUSH
33076: CALL_OW 297
33080: ST_TO_ADDR
// if not result then
33081: LD_VAR 0 6
33085: NOT
33086: IFFALSE 33112
// result := [ [ i , tmp ] ] else
33088: LD_ADDR_VAR 0 6
33092: PUSH
33093: LD_VAR 0 7
33097: PUSH
33098: LD_VAR 0 9
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: EMPTY
33108: LIST
33109: ST_TO_ADDR
33110: GO 33254
// begin if result [ result ] [ 2 ] < tmp then
33112: LD_VAR 0 6
33116: PUSH
33117: LD_VAR 0 6
33121: ARRAY
33122: PUSH
33123: LD_INT 2
33125: ARRAY
33126: PUSH
33127: LD_VAR 0 9
33131: LESS
33132: IFFALSE 33174
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33134: LD_ADDR_VAR 0 6
33138: PUSH
33139: LD_VAR 0 6
33143: PPUSH
33144: LD_VAR 0 6
33148: PUSH
33149: LD_INT 1
33151: PLUS
33152: PPUSH
33153: LD_VAR 0 7
33157: PUSH
33158: LD_VAR 0 9
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PPUSH
33167: CALL_OW 2
33171: ST_TO_ADDR
33172: GO 33254
// for j = 1 to result do
33174: LD_ADDR_VAR 0 8
33178: PUSH
33179: DOUBLE
33180: LD_INT 1
33182: DEC
33183: ST_TO_ADDR
33184: LD_VAR 0 6
33188: PUSH
33189: FOR_TO
33190: IFFALSE 33252
// begin if tmp < result [ j ] [ 2 ] then
33192: LD_VAR 0 9
33196: PUSH
33197: LD_VAR 0 6
33201: PUSH
33202: LD_VAR 0 8
33206: ARRAY
33207: PUSH
33208: LD_INT 2
33210: ARRAY
33211: LESS
33212: IFFALSE 33250
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33214: LD_ADDR_VAR 0 6
33218: PUSH
33219: LD_VAR 0 6
33223: PPUSH
33224: LD_VAR 0 8
33228: PPUSH
33229: LD_VAR 0 7
33233: PUSH
33234: LD_VAR 0 9
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PPUSH
33243: CALL_OW 2
33247: ST_TO_ADDR
// break ;
33248: GO 33252
// end ; end ;
33250: GO 33189
33252: POP
33253: POP
// end ; end ;
33254: GO 33053
33256: POP
33257: POP
// if result and not asc then
33258: LD_VAR 0 6
33262: PUSH
33263: LD_VAR 0 4
33267: NOT
33268: AND
33269: IFFALSE 33344
// begin tmp := result ;
33271: LD_ADDR_VAR 0 9
33275: PUSH
33276: LD_VAR 0 6
33280: ST_TO_ADDR
// for i = tmp downto 1 do
33281: LD_ADDR_VAR 0 7
33285: PUSH
33286: DOUBLE
33287: LD_VAR 0 9
33291: INC
33292: ST_TO_ADDR
33293: LD_INT 1
33295: PUSH
33296: FOR_DOWNTO
33297: IFFALSE 33342
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33299: LD_ADDR_VAR 0 6
33303: PUSH
33304: LD_VAR 0 6
33308: PPUSH
33309: LD_VAR 0 9
33313: PUSH
33314: LD_VAR 0 7
33318: MINUS
33319: PUSH
33320: LD_INT 1
33322: PLUS
33323: PPUSH
33324: LD_VAR 0 9
33328: PUSH
33329: LD_VAR 0 7
33333: ARRAY
33334: PPUSH
33335: CALL_OW 1
33339: ST_TO_ADDR
33340: GO 33296
33342: POP
33343: POP
// end ; tmp := [ ] ;
33344: LD_ADDR_VAR 0 9
33348: PUSH
33349: EMPTY
33350: ST_TO_ADDR
// if mode then
33351: LD_VAR 0 5
33355: IFFALSE 33424
// begin for i = 1 to result do
33357: LD_ADDR_VAR 0 7
33361: PUSH
33362: DOUBLE
33363: LD_INT 1
33365: DEC
33366: ST_TO_ADDR
33367: LD_VAR 0 6
33371: PUSH
33372: FOR_TO
33373: IFFALSE 33412
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33375: LD_ADDR_VAR 0 9
33379: PUSH
33380: LD_VAR 0 9
33384: PPUSH
33385: LD_VAR 0 7
33389: PPUSH
33390: LD_VAR 0 6
33394: PUSH
33395: LD_VAR 0 7
33399: ARRAY
33400: PUSH
33401: LD_INT 1
33403: ARRAY
33404: PPUSH
33405: CALL_OW 1
33409: ST_TO_ADDR
33410: GO 33372
33412: POP
33413: POP
// result := tmp ;
33414: LD_ADDR_VAR 0 6
33418: PUSH
33419: LD_VAR 0 9
33423: ST_TO_ADDR
// end ; end ;
33424: LD_VAR 0 6
33428: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33429: LD_INT 0
33431: PPUSH
33432: PPUSH
33433: PPUSH
33434: PPUSH
33435: PPUSH
33436: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33437: LD_ADDR_VAR 0 5
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: EMPTY
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: ST_TO_ADDR
// if not x or not y then
33459: LD_VAR 0 2
33463: NOT
33464: PUSH
33465: LD_VAR 0 3
33469: NOT
33470: OR
33471: IFFALSE 33475
// exit ;
33473: GO 35125
// if not range then
33475: LD_VAR 0 4
33479: NOT
33480: IFFALSE 33490
// range := 10 ;
33482: LD_ADDR_VAR 0 4
33486: PUSH
33487: LD_INT 10
33489: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33490: LD_ADDR_VAR 0 8
33494: PUSH
33495: LD_INT 81
33497: PUSH
33498: LD_VAR 0 1
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 92
33509: PUSH
33510: LD_VAR 0 2
33514: PUSH
33515: LD_VAR 0 3
33519: PUSH
33520: LD_VAR 0 4
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: PUSH
33534: LD_INT 21
33536: PUSH
33537: LD_INT 3
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: LIST
33552: PPUSH
33553: CALL_OW 69
33557: ST_TO_ADDR
// if not tmp then
33558: LD_VAR 0 8
33562: NOT
33563: IFFALSE 33567
// exit ;
33565: GO 35125
// for i in tmp do
33567: LD_ADDR_VAR 0 6
33571: PUSH
33572: LD_VAR 0 8
33576: PUSH
33577: FOR_IN
33578: IFFALSE 35100
// begin points := [ 0 , 0 , 0 ] ;
33580: LD_ADDR_VAR 0 9
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: LIST
33598: ST_TO_ADDR
// bpoints := 1 ;
33599: LD_ADDR_VAR 0 10
33603: PUSH
33604: LD_INT 1
33606: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33607: LD_VAR 0 6
33611: PPUSH
33612: CALL_OW 247
33616: PUSH
33617: LD_INT 1
33619: DOUBLE
33620: EQUAL
33621: IFTRUE 33625
33623: GO 34203
33625: POP
// begin if GetClass ( i ) = 1 then
33626: LD_VAR 0 6
33630: PPUSH
33631: CALL_OW 257
33635: PUSH
33636: LD_INT 1
33638: EQUAL
33639: IFFALSE 33660
// points := [ 10 , 5 , 3 ] ;
33641: LD_ADDR_VAR 0 9
33645: PUSH
33646: LD_INT 10
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: LD_INT 3
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: LIST
33659: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33660: LD_VAR 0 6
33664: PPUSH
33665: CALL_OW 257
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: LD_INT 3
33675: PUSH
33676: LD_INT 4
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: IN
33684: IFFALSE 33705
// points := [ 3 , 2 , 1 ] ;
33686: LD_ADDR_VAR 0 9
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33705: LD_VAR 0 6
33709: PPUSH
33710: CALL_OW 257
33714: PUSH
33715: LD_INT 5
33717: EQUAL
33718: IFFALSE 33739
// points := [ 130 , 5 , 2 ] ;
33720: LD_ADDR_VAR 0 9
33724: PUSH
33725: LD_INT 130
33727: PUSH
33728: LD_INT 5
33730: PUSH
33731: LD_INT 2
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33739: LD_VAR 0 6
33743: PPUSH
33744: CALL_OW 257
33748: PUSH
33749: LD_INT 8
33751: EQUAL
33752: IFFALSE 33773
// points := [ 35 , 35 , 30 ] ;
33754: LD_ADDR_VAR 0 9
33758: PUSH
33759: LD_INT 35
33761: PUSH
33762: LD_INT 35
33764: PUSH
33765: LD_INT 30
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33773: LD_VAR 0 6
33777: PPUSH
33778: CALL_OW 257
33782: PUSH
33783: LD_INT 9
33785: EQUAL
33786: IFFALSE 33807
// points := [ 20 , 55 , 40 ] ;
33788: LD_ADDR_VAR 0 9
33792: PUSH
33793: LD_INT 20
33795: PUSH
33796: LD_INT 55
33798: PUSH
33799: LD_INT 40
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33807: LD_VAR 0 6
33811: PPUSH
33812: CALL_OW 257
33816: PUSH
33817: LD_INT 12
33819: PUSH
33820: LD_INT 16
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: IN
33827: IFFALSE 33848
// points := [ 5 , 3 , 2 ] ;
33829: LD_ADDR_VAR 0 9
33833: PUSH
33834: LD_INT 5
33836: PUSH
33837: LD_INT 3
33839: PUSH
33840: LD_INT 2
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33848: LD_VAR 0 6
33852: PPUSH
33853: CALL_OW 257
33857: PUSH
33858: LD_INT 17
33860: EQUAL
33861: IFFALSE 33882
// points := [ 100 , 50 , 75 ] ;
33863: LD_ADDR_VAR 0 9
33867: PUSH
33868: LD_INT 100
33870: PUSH
33871: LD_INT 50
33873: PUSH
33874: LD_INT 75
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: LIST
33881: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33882: LD_VAR 0 6
33886: PPUSH
33887: CALL_OW 257
33891: PUSH
33892: LD_INT 15
33894: EQUAL
33895: IFFALSE 33916
// points := [ 10 , 5 , 3 ] ;
33897: LD_ADDR_VAR 0 9
33901: PUSH
33902: LD_INT 10
33904: PUSH
33905: LD_INT 5
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33916: LD_VAR 0 6
33920: PPUSH
33921: CALL_OW 257
33925: PUSH
33926: LD_INT 14
33928: EQUAL
33929: IFFALSE 33950
// points := [ 10 , 0 , 0 ] ;
33931: LD_ADDR_VAR 0 9
33935: PUSH
33936: LD_INT 10
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 0
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: LIST
33949: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33950: LD_VAR 0 6
33954: PPUSH
33955: CALL_OW 257
33959: PUSH
33960: LD_INT 11
33962: EQUAL
33963: IFFALSE 33984
// points := [ 30 , 10 , 5 ] ;
33965: LD_ADDR_VAR 0 9
33969: PUSH
33970: LD_INT 30
33972: PUSH
33973: LD_INT 10
33975: PUSH
33976: LD_INT 5
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: LIST
33983: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33984: LD_VAR 0 1
33988: PPUSH
33989: LD_INT 5
33991: PPUSH
33992: CALL_OW 321
33996: PUSH
33997: LD_INT 2
33999: EQUAL
34000: IFFALSE 34017
// bpoints := bpoints * 1.8 ;
34002: LD_ADDR_VAR 0 10
34006: PUSH
34007: LD_VAR 0 10
34011: PUSH
34012: LD_REAL  1.80000000000000E+0000
34015: MUL
34016: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34017: LD_VAR 0 6
34021: PPUSH
34022: CALL_OW 257
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: LD_INT 4
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: IN
34045: PUSH
34046: LD_VAR 0 1
34050: PPUSH
34051: LD_INT 51
34053: PPUSH
34054: CALL_OW 321
34058: PUSH
34059: LD_INT 2
34061: EQUAL
34062: AND
34063: IFFALSE 34080
// bpoints := bpoints * 1.2 ;
34065: LD_ADDR_VAR 0 10
34069: PUSH
34070: LD_VAR 0 10
34074: PUSH
34075: LD_REAL  1.20000000000000E+0000
34078: MUL
34079: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34080: LD_VAR 0 6
34084: PPUSH
34085: CALL_OW 257
34089: PUSH
34090: LD_INT 5
34092: PUSH
34093: LD_INT 7
34095: PUSH
34096: LD_INT 9
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: LIST
34103: IN
34104: PUSH
34105: LD_VAR 0 1
34109: PPUSH
34110: LD_INT 52
34112: PPUSH
34113: CALL_OW 321
34117: PUSH
34118: LD_INT 2
34120: EQUAL
34121: AND
34122: IFFALSE 34139
// bpoints := bpoints * 1.5 ;
34124: LD_ADDR_VAR 0 10
34128: PUSH
34129: LD_VAR 0 10
34133: PUSH
34134: LD_REAL  1.50000000000000E+0000
34137: MUL
34138: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34139: LD_VAR 0 1
34143: PPUSH
34144: LD_INT 66
34146: PPUSH
34147: CALL_OW 321
34151: PUSH
34152: LD_INT 2
34154: EQUAL
34155: IFFALSE 34172
// bpoints := bpoints * 1.1 ;
34157: LD_ADDR_VAR 0 10
34161: PUSH
34162: LD_VAR 0 10
34166: PUSH
34167: LD_REAL  1.10000000000000E+0000
34170: MUL
34171: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34172: LD_ADDR_VAR 0 10
34176: PUSH
34177: LD_VAR 0 10
34181: PUSH
34182: LD_VAR 0 6
34186: PPUSH
34187: LD_INT 1
34189: PPUSH
34190: CALL_OW 259
34194: PUSH
34195: LD_REAL  1.15000000000000E+0000
34198: MUL
34199: MUL
34200: ST_TO_ADDR
// end ; unit_vehicle :
34201: GO 35029
34203: LD_INT 2
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34211
34209: GO 35017
34211: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34212: LD_VAR 0 6
34216: PPUSH
34217: CALL_OW 264
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 42
34227: PUSH
34228: LD_INT 24
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: IN
34236: IFFALSE 34257
// points := [ 25 , 5 , 3 ] ;
34238: LD_ADDR_VAR 0 9
34242: PUSH
34243: LD_INT 25
34245: PUSH
34246: LD_INT 5
34248: PUSH
34249: LD_INT 3
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34257: LD_VAR 0 6
34261: PPUSH
34262: CALL_OW 264
34266: PUSH
34267: LD_INT 4
34269: PUSH
34270: LD_INT 43
34272: PUSH
34273: LD_INT 25
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: LIST
34280: IN
34281: IFFALSE 34302
// points := [ 40 , 15 , 5 ] ;
34283: LD_ADDR_VAR 0 9
34287: PUSH
34288: LD_INT 40
34290: PUSH
34291: LD_INT 15
34293: PUSH
34294: LD_INT 5
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: LIST
34301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34302: LD_VAR 0 6
34306: PPUSH
34307: CALL_OW 264
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: LD_INT 23
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: IN
34322: IFFALSE 34343
// points := [ 7 , 25 , 8 ] ;
34324: LD_ADDR_VAR 0 9
34328: PUSH
34329: LD_INT 7
34331: PUSH
34332: LD_INT 25
34334: PUSH
34335: LD_INT 8
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34343: LD_VAR 0 6
34347: PPUSH
34348: CALL_OW 264
34352: PUSH
34353: LD_INT 5
34355: PUSH
34356: LD_INT 27
34358: PUSH
34359: LD_INT 44
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: LIST
34366: IN
34367: IFFALSE 34388
// points := [ 14 , 50 , 16 ] ;
34369: LD_ADDR_VAR 0 9
34373: PUSH
34374: LD_INT 14
34376: PUSH
34377: LD_INT 50
34379: PUSH
34380: LD_INT 16
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34388: LD_VAR 0 6
34392: PPUSH
34393: CALL_OW 264
34397: PUSH
34398: LD_INT 6
34400: PUSH
34401: LD_INT 46
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: IN
34408: IFFALSE 34429
// points := [ 32 , 120 , 70 ] ;
34410: LD_ADDR_VAR 0 9
34414: PUSH
34415: LD_INT 32
34417: PUSH
34418: LD_INT 120
34420: PUSH
34421: LD_INT 70
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34429: LD_VAR 0 6
34433: PPUSH
34434: CALL_OW 264
34438: PUSH
34439: LD_INT 7
34441: PUSH
34442: LD_INT 28
34444: PUSH
34445: LD_INT 45
34447: PUSH
34448: LD_INT 92
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: IN
34457: IFFALSE 34478
// points := [ 35 , 20 , 45 ] ;
34459: LD_ADDR_VAR 0 9
34463: PUSH
34464: LD_INT 35
34466: PUSH
34467: LD_INT 20
34469: PUSH
34470: LD_INT 45
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34478: LD_VAR 0 6
34482: PPUSH
34483: CALL_OW 264
34487: PUSH
34488: LD_INT 47
34490: PUSH
34491: EMPTY
34492: LIST
34493: IN
34494: IFFALSE 34515
// points := [ 67 , 45 , 75 ] ;
34496: LD_ADDR_VAR 0 9
34500: PUSH
34501: LD_INT 67
34503: PUSH
34504: LD_INT 45
34506: PUSH
34507: LD_INT 75
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34515: LD_VAR 0 6
34519: PPUSH
34520: CALL_OW 264
34524: PUSH
34525: LD_INT 26
34527: PUSH
34528: EMPTY
34529: LIST
34530: IN
34531: IFFALSE 34552
// points := [ 120 , 30 , 80 ] ;
34533: LD_ADDR_VAR 0 9
34537: PUSH
34538: LD_INT 120
34540: PUSH
34541: LD_INT 30
34543: PUSH
34544: LD_INT 80
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: LIST
34551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34552: LD_VAR 0 6
34556: PPUSH
34557: CALL_OW 264
34561: PUSH
34562: LD_INT 22
34564: PUSH
34565: EMPTY
34566: LIST
34567: IN
34568: IFFALSE 34589
// points := [ 40 , 1 , 1 ] ;
34570: LD_ADDR_VAR 0 9
34574: PUSH
34575: LD_INT 40
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: LD_INT 1
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34589: LD_VAR 0 6
34593: PPUSH
34594: CALL_OW 264
34598: PUSH
34599: LD_INT 29
34601: PUSH
34602: EMPTY
34603: LIST
34604: IN
34605: IFFALSE 34626
// points := [ 70 , 200 , 400 ] ;
34607: LD_ADDR_VAR 0 9
34611: PUSH
34612: LD_INT 70
34614: PUSH
34615: LD_INT 200
34617: PUSH
34618: LD_INT 400
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: LIST
34625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34626: LD_VAR 0 6
34630: PPUSH
34631: CALL_OW 264
34635: PUSH
34636: LD_INT 14
34638: PUSH
34639: LD_INT 53
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: IN
34646: IFFALSE 34667
// points := [ 40 , 10 , 20 ] ;
34648: LD_ADDR_VAR 0 9
34652: PUSH
34653: LD_INT 40
34655: PUSH
34656: LD_INT 10
34658: PUSH
34659: LD_INT 20
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: LIST
34666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34667: LD_VAR 0 6
34671: PPUSH
34672: CALL_OW 264
34676: PUSH
34677: LD_INT 9
34679: PUSH
34680: EMPTY
34681: LIST
34682: IN
34683: IFFALSE 34704
// points := [ 5 , 70 , 20 ] ;
34685: LD_ADDR_VAR 0 9
34689: PUSH
34690: LD_INT 5
34692: PUSH
34693: LD_INT 70
34695: PUSH
34696: LD_INT 20
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34704: LD_VAR 0 6
34708: PPUSH
34709: CALL_OW 264
34713: PUSH
34714: LD_INT 10
34716: PUSH
34717: EMPTY
34718: LIST
34719: IN
34720: IFFALSE 34741
// points := [ 35 , 110 , 70 ] ;
34722: LD_ADDR_VAR 0 9
34726: PUSH
34727: LD_INT 35
34729: PUSH
34730: LD_INT 110
34732: PUSH
34733: LD_INT 70
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: LIST
34740: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34741: LD_VAR 0 6
34745: PPUSH
34746: CALL_OW 265
34750: PUSH
34751: LD_INT 25
34753: EQUAL
34754: IFFALSE 34775
// points := [ 80 , 65 , 100 ] ;
34756: LD_ADDR_VAR 0 9
34760: PUSH
34761: LD_INT 80
34763: PUSH
34764: LD_INT 65
34766: PUSH
34767: LD_INT 100
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: LIST
34774: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34775: LD_VAR 0 6
34779: PPUSH
34780: CALL_OW 263
34784: PUSH
34785: LD_INT 1
34787: EQUAL
34788: IFFALSE 34823
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34790: LD_ADDR_VAR 0 10
34794: PUSH
34795: LD_VAR 0 10
34799: PUSH
34800: LD_VAR 0 6
34804: PPUSH
34805: CALL_OW 311
34809: PPUSH
34810: LD_INT 3
34812: PPUSH
34813: CALL_OW 259
34817: PUSH
34818: LD_INT 4
34820: MUL
34821: MUL
34822: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34823: LD_VAR 0 6
34827: PPUSH
34828: CALL_OW 263
34832: PUSH
34833: LD_INT 2
34835: EQUAL
34836: IFFALSE 34887
// begin j := IsControledBy ( i ) ;
34838: LD_ADDR_VAR 0 7
34842: PUSH
34843: LD_VAR 0 6
34847: PPUSH
34848: CALL_OW 312
34852: ST_TO_ADDR
// if j then
34853: LD_VAR 0 7
34857: IFFALSE 34887
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34859: LD_ADDR_VAR 0 10
34863: PUSH
34864: LD_VAR 0 10
34868: PUSH
34869: LD_VAR 0 7
34873: PPUSH
34874: LD_INT 3
34876: PPUSH
34877: CALL_OW 259
34881: PUSH
34882: LD_INT 3
34884: MUL
34885: MUL
34886: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34887: LD_VAR 0 6
34891: PPUSH
34892: CALL_OW 264
34896: PUSH
34897: LD_INT 5
34899: PUSH
34900: LD_INT 6
34902: PUSH
34903: LD_INT 46
34905: PUSH
34906: LD_INT 44
34908: PUSH
34909: LD_INT 47
34911: PUSH
34912: LD_INT 45
34914: PUSH
34915: LD_INT 28
34917: PUSH
34918: LD_INT 7
34920: PUSH
34921: LD_INT 27
34923: PUSH
34924: LD_INT 29
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: IN
34939: PUSH
34940: LD_VAR 0 1
34944: PPUSH
34945: LD_INT 52
34947: PPUSH
34948: CALL_OW 321
34952: PUSH
34953: LD_INT 2
34955: EQUAL
34956: AND
34957: IFFALSE 34974
// bpoints := bpoints * 1.2 ;
34959: LD_ADDR_VAR 0 10
34963: PUSH
34964: LD_VAR 0 10
34968: PUSH
34969: LD_REAL  1.20000000000000E+0000
34972: MUL
34973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34974: LD_VAR 0 6
34978: PPUSH
34979: CALL_OW 264
34983: PUSH
34984: LD_INT 6
34986: PUSH
34987: LD_INT 46
34989: PUSH
34990: LD_INT 47
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: IN
34998: IFFALSE 35015
// bpoints := bpoints * 1.2 ;
35000: LD_ADDR_VAR 0 10
35004: PUSH
35005: LD_VAR 0 10
35009: PUSH
35010: LD_REAL  1.20000000000000E+0000
35013: MUL
35014: ST_TO_ADDR
// end ; unit_building :
35015: GO 35029
35017: LD_INT 3
35019: DOUBLE
35020: EQUAL
35021: IFTRUE 35025
35023: GO 35028
35025: POP
// ; end ;
35026: GO 35029
35028: POP
// for j = 1 to 3 do
35029: LD_ADDR_VAR 0 7
35033: PUSH
35034: DOUBLE
35035: LD_INT 1
35037: DEC
35038: ST_TO_ADDR
35039: LD_INT 3
35041: PUSH
35042: FOR_TO
35043: IFFALSE 35096
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35045: LD_ADDR_VAR 0 5
35049: PUSH
35050: LD_VAR 0 5
35054: PPUSH
35055: LD_VAR 0 7
35059: PPUSH
35060: LD_VAR 0 5
35064: PUSH
35065: LD_VAR 0 7
35069: ARRAY
35070: PUSH
35071: LD_VAR 0 9
35075: PUSH
35076: LD_VAR 0 7
35080: ARRAY
35081: PUSH
35082: LD_VAR 0 10
35086: MUL
35087: PLUS
35088: PPUSH
35089: CALL_OW 1
35093: ST_TO_ADDR
35094: GO 35042
35096: POP
35097: POP
// end ;
35098: GO 33577
35100: POP
35101: POP
// result := Replace ( result , 4 , tmp ) ;
35102: LD_ADDR_VAR 0 5
35106: PUSH
35107: LD_VAR 0 5
35111: PPUSH
35112: LD_INT 4
35114: PPUSH
35115: LD_VAR 0 8
35119: PPUSH
35120: CALL_OW 1
35124: ST_TO_ADDR
// end ;
35125: LD_VAR 0 5
35129: RET
// export function DangerAtRange ( unit , range ) ; begin
35130: LD_INT 0
35132: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35133: LD_ADDR_VAR 0 3
35137: PUSH
35138: LD_VAR 0 1
35142: PPUSH
35143: CALL_OW 255
35147: PPUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL_OW 250
35157: PPUSH
35158: LD_VAR 0 1
35162: PPUSH
35163: CALL_OW 251
35167: PPUSH
35168: LD_VAR 0 2
35172: PPUSH
35173: CALL 33429 0 4
35177: ST_TO_ADDR
// end ;
35178: LD_VAR 0 3
35182: RET
// export function DangerInArea ( side , area ) ; begin
35183: LD_INT 0
35185: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35186: LD_ADDR_VAR 0 3
35190: PUSH
35191: LD_VAR 0 2
35195: PPUSH
35196: LD_INT 81
35198: PUSH
35199: LD_VAR 0 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PPUSH
35208: CALL_OW 70
35212: ST_TO_ADDR
// end ;
35213: LD_VAR 0 3
35217: RET
// export function IsExtension ( b ) ; begin
35218: LD_INT 0
35220: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35221: LD_ADDR_VAR 0 2
35225: PUSH
35226: LD_VAR 0 1
35230: PUSH
35231: LD_INT 23
35233: PUSH
35234: LD_INT 20
35236: PUSH
35237: LD_INT 22
35239: PUSH
35240: LD_INT 17
35242: PUSH
35243: LD_INT 24
35245: PUSH
35246: LD_INT 21
35248: PUSH
35249: LD_INT 19
35251: PUSH
35252: LD_INT 16
35254: PUSH
35255: LD_INT 25
35257: PUSH
35258: LD_INT 18
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: IN
35273: ST_TO_ADDR
// end ;
35274: LD_VAR 0 2
35278: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35279: LD_INT 0
35281: PPUSH
35282: PPUSH
35283: PPUSH
// result := [ ] ;
35284: LD_ADDR_VAR 0 4
35288: PUSH
35289: EMPTY
35290: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35291: LD_ADDR_VAR 0 5
35295: PUSH
35296: LD_VAR 0 2
35300: PPUSH
35301: LD_INT 21
35303: PUSH
35304: LD_INT 3
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 70
35315: ST_TO_ADDR
// if not tmp then
35316: LD_VAR 0 5
35320: NOT
35321: IFFALSE 35325
// exit ;
35323: GO 35389
// if checkLink then
35325: LD_VAR 0 3
35329: IFFALSE 35379
// begin for i in tmp do
35331: LD_ADDR_VAR 0 6
35335: PUSH
35336: LD_VAR 0 5
35340: PUSH
35341: FOR_IN
35342: IFFALSE 35377
// if GetBase ( i ) <> base then
35344: LD_VAR 0 6
35348: PPUSH
35349: CALL_OW 274
35353: PUSH
35354: LD_VAR 0 1
35358: NONEQUAL
35359: IFFALSE 35375
// ComLinkToBase ( base , i ) ;
35361: LD_VAR 0 1
35365: PPUSH
35366: LD_VAR 0 6
35370: PPUSH
35371: CALL_OW 169
35375: GO 35341
35377: POP
35378: POP
// end ; result := tmp ;
35379: LD_ADDR_VAR 0 4
35383: PUSH
35384: LD_VAR 0 5
35388: ST_TO_ADDR
// end ;
35389: LD_VAR 0 4
35393: RET
// export function ComComplete ( units , b ) ; var i ; begin
35394: LD_INT 0
35396: PPUSH
35397: PPUSH
// if not units then
35398: LD_VAR 0 1
35402: NOT
35403: IFFALSE 35407
// exit ;
35405: GO 35497
// for i in units do
35407: LD_ADDR_VAR 0 4
35411: PUSH
35412: LD_VAR 0 1
35416: PUSH
35417: FOR_IN
35418: IFFALSE 35495
// if BuildingStatus ( b ) = bs_build then
35420: LD_VAR 0 2
35424: PPUSH
35425: CALL_OW 461
35429: PUSH
35430: LD_INT 1
35432: EQUAL
35433: IFFALSE 35493
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35435: LD_VAR 0 4
35439: PPUSH
35440: LD_STRING h
35442: PUSH
35443: LD_VAR 0 2
35447: PPUSH
35448: CALL_OW 250
35452: PUSH
35453: LD_VAR 0 2
35457: PPUSH
35458: CALL_OW 251
35462: PUSH
35463: LD_VAR 0 2
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: PUSH
35486: EMPTY
35487: LIST
35488: PPUSH
35489: CALL_OW 446
35493: GO 35417
35495: POP
35496: POP
// end ;
35497: LD_VAR 0 3
35501: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35502: LD_INT 0
35504: PPUSH
35505: PPUSH
35506: PPUSH
35507: PPUSH
35508: PPUSH
35509: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35510: LD_VAR 0 1
35514: NOT
35515: PUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 263
35525: PUSH
35526: LD_INT 2
35528: NONEQUAL
35529: OR
35530: IFFALSE 35534
// exit ;
35532: GO 35850
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35534: LD_ADDR_VAR 0 6
35538: PUSH
35539: LD_INT 22
35541: PUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: CALL_OW 255
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 30
35561: PUSH
35562: LD_INT 36
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 34
35571: PUSH
35572: LD_INT 31
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PPUSH
35588: CALL_OW 69
35592: ST_TO_ADDR
// if not tmp then
35593: LD_VAR 0 6
35597: NOT
35598: IFFALSE 35602
// exit ;
35600: GO 35850
// result := [ ] ;
35602: LD_ADDR_VAR 0 2
35606: PUSH
35607: EMPTY
35608: ST_TO_ADDR
// for i in tmp do
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_VAR 0 6
35618: PUSH
35619: FOR_IN
35620: IFFALSE 35691
// begin t := UnitsInside ( i ) ;
35622: LD_ADDR_VAR 0 4
35626: PUSH
35627: LD_VAR 0 3
35631: PPUSH
35632: CALL_OW 313
35636: ST_TO_ADDR
// if t then
35637: LD_VAR 0 4
35641: IFFALSE 35689
// for j in t do
35643: LD_ADDR_VAR 0 7
35647: PUSH
35648: LD_VAR 0 4
35652: PUSH
35653: FOR_IN
35654: IFFALSE 35687
// result := Replace ( result , result + 1 , j ) ;
35656: LD_ADDR_VAR 0 2
35660: PUSH
35661: LD_VAR 0 2
35665: PPUSH
35666: LD_VAR 0 2
35670: PUSH
35671: LD_INT 1
35673: PLUS
35674: PPUSH
35675: LD_VAR 0 7
35679: PPUSH
35680: CALL_OW 1
35684: ST_TO_ADDR
35685: GO 35653
35687: POP
35688: POP
// end ;
35689: GO 35619
35691: POP
35692: POP
// if not result then
35693: LD_VAR 0 2
35697: NOT
35698: IFFALSE 35702
// exit ;
35700: GO 35850
// mech := result [ 1 ] ;
35702: LD_ADDR_VAR 0 5
35706: PUSH
35707: LD_VAR 0 2
35711: PUSH
35712: LD_INT 1
35714: ARRAY
35715: ST_TO_ADDR
// if result > 1 then
35716: LD_VAR 0 2
35720: PUSH
35721: LD_INT 1
35723: GREATER
35724: IFFALSE 35836
// begin for i = 2 to result do
35726: LD_ADDR_VAR 0 3
35730: PUSH
35731: DOUBLE
35732: LD_INT 2
35734: DEC
35735: ST_TO_ADDR
35736: LD_VAR 0 2
35740: PUSH
35741: FOR_TO
35742: IFFALSE 35834
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35744: LD_ADDR_VAR 0 4
35748: PUSH
35749: LD_VAR 0 2
35753: PUSH
35754: LD_VAR 0 3
35758: ARRAY
35759: PPUSH
35760: LD_INT 3
35762: PPUSH
35763: CALL_OW 259
35767: PUSH
35768: LD_VAR 0 2
35772: PUSH
35773: LD_VAR 0 3
35777: ARRAY
35778: PPUSH
35779: CALL_OW 432
35783: MINUS
35784: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35785: LD_VAR 0 4
35789: PUSH
35790: LD_VAR 0 5
35794: PPUSH
35795: LD_INT 3
35797: PPUSH
35798: CALL_OW 259
35802: PUSH
35803: LD_VAR 0 5
35807: PPUSH
35808: CALL_OW 432
35812: MINUS
35813: GREATEREQUAL
35814: IFFALSE 35832
// mech := result [ i ] ;
35816: LD_ADDR_VAR 0 5
35820: PUSH
35821: LD_VAR 0 2
35825: PUSH
35826: LD_VAR 0 3
35830: ARRAY
35831: ST_TO_ADDR
// end ;
35832: GO 35741
35834: POP
35835: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35836: LD_VAR 0 1
35840: PPUSH
35841: LD_VAR 0 5
35845: PPUSH
35846: CALL_OW 135
// end ;
35850: LD_VAR 0 2
35854: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35855: LD_INT 0
35857: PPUSH
35858: PPUSH
35859: PPUSH
35860: PPUSH
35861: PPUSH
35862: PPUSH
35863: PPUSH
35864: PPUSH
35865: PPUSH
35866: PPUSH
35867: PPUSH
35868: PPUSH
35869: PPUSH
// result := [ ] ;
35870: LD_ADDR_VAR 0 7
35874: PUSH
35875: EMPTY
35876: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35877: LD_VAR 0 1
35881: PPUSH
35882: CALL_OW 266
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 1
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: IN
35897: NOT
35898: IFFALSE 35902
// exit ;
35900: GO 37536
// if name then
35902: LD_VAR 0 3
35906: IFFALSE 35922
// SetBName ( base_dep , name ) ;
35908: LD_VAR 0 1
35912: PPUSH
35913: LD_VAR 0 3
35917: PPUSH
35918: CALL_OW 500
// base := GetBase ( base_dep ) ;
35922: LD_ADDR_VAR 0 15
35926: PUSH
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL_OW 274
35936: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35937: LD_ADDR_VAR 0 16
35941: PUSH
35942: LD_VAR 0 1
35946: PPUSH
35947: CALL_OW 255
35951: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35952: LD_ADDR_VAR 0 17
35956: PUSH
35957: LD_VAR 0 1
35961: PPUSH
35962: CALL_OW 248
35966: ST_TO_ADDR
// if sources then
35967: LD_VAR 0 5
35971: IFFALSE 36018
// for i = 1 to 3 do
35973: LD_ADDR_VAR 0 8
35977: PUSH
35978: DOUBLE
35979: LD_INT 1
35981: DEC
35982: ST_TO_ADDR
35983: LD_INT 3
35985: PUSH
35986: FOR_TO
35987: IFFALSE 36016
// AddResourceType ( base , i , sources [ i ] ) ;
35989: LD_VAR 0 15
35993: PPUSH
35994: LD_VAR 0 8
35998: PPUSH
35999: LD_VAR 0 5
36003: PUSH
36004: LD_VAR 0 8
36008: ARRAY
36009: PPUSH
36010: CALL_OW 276
36014: GO 35986
36016: POP
36017: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36018: LD_ADDR_VAR 0 18
36022: PUSH
36023: LD_VAR 0 15
36027: PPUSH
36028: LD_VAR 0 2
36032: PPUSH
36033: LD_INT 1
36035: PPUSH
36036: CALL 35279 0 3
36040: ST_TO_ADDR
// InitHc ;
36041: CALL_OW 19
// InitUc ;
36045: CALL_OW 18
// uc_side := side ;
36049: LD_ADDR_OWVAR 20
36053: PUSH
36054: LD_VAR 0 16
36058: ST_TO_ADDR
// uc_nation := nation ;
36059: LD_ADDR_OWVAR 21
36063: PUSH
36064: LD_VAR 0 17
36068: ST_TO_ADDR
// if buildings then
36069: LD_VAR 0 18
36073: IFFALSE 37395
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36075: LD_ADDR_VAR 0 19
36079: PUSH
36080: LD_VAR 0 18
36084: PPUSH
36085: LD_INT 2
36087: PUSH
36088: LD_INT 30
36090: PUSH
36091: LD_INT 29
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 30
36100: PUSH
36101: LD_INT 30
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: PPUSH
36113: CALL_OW 72
36117: ST_TO_ADDR
// if tmp then
36118: LD_VAR 0 19
36122: IFFALSE 36170
// for i in tmp do
36124: LD_ADDR_VAR 0 8
36128: PUSH
36129: LD_VAR 0 19
36133: PUSH
36134: FOR_IN
36135: IFFALSE 36168
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36137: LD_VAR 0 8
36141: PPUSH
36142: CALL_OW 250
36146: PPUSH
36147: LD_VAR 0 8
36151: PPUSH
36152: CALL_OW 251
36156: PPUSH
36157: LD_VAR 0 16
36161: PPUSH
36162: CALL_OW 441
36166: GO 36134
36168: POP
36169: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36170: LD_VAR 0 18
36174: PPUSH
36175: LD_INT 2
36177: PUSH
36178: LD_INT 30
36180: PUSH
36181: LD_INT 32
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 30
36190: PUSH
36191: LD_INT 33
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: PPUSH
36203: CALL_OW 72
36207: IFFALSE 36295
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36209: LD_ADDR_VAR 0 8
36213: PUSH
36214: LD_VAR 0 18
36218: PPUSH
36219: LD_INT 2
36221: PUSH
36222: LD_INT 30
36224: PUSH
36225: LD_INT 32
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 30
36234: PUSH
36235: LD_INT 33
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: PPUSH
36247: CALL_OW 72
36251: PUSH
36252: FOR_IN
36253: IFFALSE 36293
// begin if not GetBWeapon ( i ) then
36255: LD_VAR 0 8
36259: PPUSH
36260: CALL_OW 269
36264: NOT
36265: IFFALSE 36291
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36267: LD_VAR 0 8
36271: PPUSH
36272: LD_VAR 0 8
36276: PPUSH
36277: LD_VAR 0 2
36281: PPUSH
36282: CALL 37541 0 2
36286: PPUSH
36287: CALL_OW 431
// end ;
36291: GO 36252
36293: POP
36294: POP
// end ; for i = 1 to personel do
36295: LD_ADDR_VAR 0 8
36299: PUSH
36300: DOUBLE
36301: LD_INT 1
36303: DEC
36304: ST_TO_ADDR
36305: LD_VAR 0 6
36309: PUSH
36310: FOR_TO
36311: IFFALSE 37375
// begin if i > 4 then
36313: LD_VAR 0 8
36317: PUSH
36318: LD_INT 4
36320: GREATER
36321: IFFALSE 36325
// break ;
36323: GO 37375
// case i of 1 :
36325: LD_VAR 0 8
36329: PUSH
36330: LD_INT 1
36332: DOUBLE
36333: EQUAL
36334: IFTRUE 36338
36336: GO 36418
36338: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36339: LD_ADDR_VAR 0 12
36343: PUSH
36344: LD_VAR 0 18
36348: PPUSH
36349: LD_INT 22
36351: PUSH
36352: LD_VAR 0 16
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 58
36363: PUSH
36364: EMPTY
36365: LIST
36366: PUSH
36367: LD_INT 2
36369: PUSH
36370: LD_INT 30
36372: PUSH
36373: LD_INT 32
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 30
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 30
36392: PUSH
36393: LD_INT 5
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: PPUSH
36411: CALL_OW 72
36415: ST_TO_ADDR
36416: GO 36640
36418: LD_INT 2
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36426
36424: GO 36488
36426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36427: LD_ADDR_VAR 0 12
36431: PUSH
36432: LD_VAR 0 18
36436: PPUSH
36437: LD_INT 22
36439: PUSH
36440: LD_VAR 0 16
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 2
36451: PUSH
36452: LD_INT 30
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 30
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PPUSH
36481: CALL_OW 72
36485: ST_TO_ADDR
36486: GO 36640
36488: LD_INT 3
36490: DOUBLE
36491: EQUAL
36492: IFTRUE 36496
36494: GO 36558
36496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36497: LD_ADDR_VAR 0 12
36501: PUSH
36502: LD_VAR 0 18
36506: PPUSH
36507: LD_INT 22
36509: PUSH
36510: LD_VAR 0 16
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 30
36524: PUSH
36525: LD_INT 2
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 30
36534: PUSH
36535: LD_INT 3
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PPUSH
36551: CALL_OW 72
36555: ST_TO_ADDR
36556: GO 36640
36558: LD_INT 4
36560: DOUBLE
36561: EQUAL
36562: IFTRUE 36566
36564: GO 36639
36566: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36567: LD_ADDR_VAR 0 12
36571: PUSH
36572: LD_VAR 0 18
36576: PPUSH
36577: LD_INT 22
36579: PUSH
36580: LD_VAR 0 16
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: LD_INT 30
36594: PUSH
36595: LD_INT 6
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 30
36604: PUSH
36605: LD_INT 7
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 30
36614: PUSH
36615: LD_INT 8
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PPUSH
36632: CALL_OW 72
36636: ST_TO_ADDR
36637: GO 36640
36639: POP
// if i = 1 then
36640: LD_VAR 0 8
36644: PUSH
36645: LD_INT 1
36647: EQUAL
36648: IFFALSE 36759
// begin tmp := [ ] ;
36650: LD_ADDR_VAR 0 19
36654: PUSH
36655: EMPTY
36656: ST_TO_ADDR
// for j in f do
36657: LD_ADDR_VAR 0 9
36661: PUSH
36662: LD_VAR 0 12
36666: PUSH
36667: FOR_IN
36668: IFFALSE 36741
// if GetBType ( j ) = b_bunker then
36670: LD_VAR 0 9
36674: PPUSH
36675: CALL_OW 266
36679: PUSH
36680: LD_INT 32
36682: EQUAL
36683: IFFALSE 36710
// tmp := Insert ( tmp , 1 , j ) else
36685: LD_ADDR_VAR 0 19
36689: PUSH
36690: LD_VAR 0 19
36694: PPUSH
36695: LD_INT 1
36697: PPUSH
36698: LD_VAR 0 9
36702: PPUSH
36703: CALL_OW 2
36707: ST_TO_ADDR
36708: GO 36739
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36710: LD_ADDR_VAR 0 19
36714: PUSH
36715: LD_VAR 0 19
36719: PPUSH
36720: LD_VAR 0 19
36724: PUSH
36725: LD_INT 1
36727: PLUS
36728: PPUSH
36729: LD_VAR 0 9
36733: PPUSH
36734: CALL_OW 2
36738: ST_TO_ADDR
36739: GO 36667
36741: POP
36742: POP
// if tmp then
36743: LD_VAR 0 19
36747: IFFALSE 36759
// f := tmp ;
36749: LD_ADDR_VAR 0 12
36753: PUSH
36754: LD_VAR 0 19
36758: ST_TO_ADDR
// end ; x := personel [ i ] ;
36759: LD_ADDR_VAR 0 13
36763: PUSH
36764: LD_VAR 0 6
36768: PUSH
36769: LD_VAR 0 8
36773: ARRAY
36774: ST_TO_ADDR
// if x = - 1 then
36775: LD_VAR 0 13
36779: PUSH
36780: LD_INT 1
36782: NEG
36783: EQUAL
36784: IFFALSE 36993
// begin for j in f do
36786: LD_ADDR_VAR 0 9
36790: PUSH
36791: LD_VAR 0 12
36795: PUSH
36796: FOR_IN
36797: IFFALSE 36989
// repeat InitHc ;
36799: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36803: LD_VAR 0 9
36807: PPUSH
36808: CALL_OW 266
36812: PUSH
36813: LD_INT 5
36815: EQUAL
36816: IFFALSE 36886
// begin if UnitsInside ( j ) < 3 then
36818: LD_VAR 0 9
36822: PPUSH
36823: CALL_OW 313
36827: PUSH
36828: LD_INT 3
36830: LESS
36831: IFFALSE 36867
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36833: LD_INT 0
36835: PPUSH
36836: LD_INT 5
36838: PUSH
36839: LD_INT 8
36841: PUSH
36842: LD_INT 9
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: PUSH
36850: LD_VAR 0 17
36854: ARRAY
36855: PPUSH
36856: LD_VAR 0 4
36860: PPUSH
36861: CALL_OW 380
36865: GO 36884
// PrepareHuman ( false , i , skill ) ;
36867: LD_INT 0
36869: PPUSH
36870: LD_VAR 0 8
36874: PPUSH
36875: LD_VAR 0 4
36879: PPUSH
36880: CALL_OW 380
// end else
36884: GO 36903
// PrepareHuman ( false , i , skill ) ;
36886: LD_INT 0
36888: PPUSH
36889: LD_VAR 0 8
36893: PPUSH
36894: LD_VAR 0 4
36898: PPUSH
36899: CALL_OW 380
// un := CreateHuman ;
36903: LD_ADDR_VAR 0 14
36907: PUSH
36908: CALL_OW 44
36912: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36913: LD_ADDR_VAR 0 7
36917: PUSH
36918: LD_VAR 0 7
36922: PPUSH
36923: LD_INT 1
36925: PPUSH
36926: LD_VAR 0 14
36930: PPUSH
36931: CALL_OW 2
36935: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36936: LD_VAR 0 14
36940: PPUSH
36941: LD_VAR 0 9
36945: PPUSH
36946: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36950: LD_VAR 0 9
36954: PPUSH
36955: CALL_OW 313
36959: PUSH
36960: LD_INT 6
36962: EQUAL
36963: PUSH
36964: LD_VAR 0 9
36968: PPUSH
36969: CALL_OW 266
36973: PUSH
36974: LD_INT 32
36976: PUSH
36977: LD_INT 31
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: IN
36984: OR
36985: IFFALSE 36799
36987: GO 36796
36989: POP
36990: POP
// end else
36991: GO 37373
// for j = 1 to x do
36993: LD_ADDR_VAR 0 9
36997: PUSH
36998: DOUBLE
36999: LD_INT 1
37001: DEC
37002: ST_TO_ADDR
37003: LD_VAR 0 13
37007: PUSH
37008: FOR_TO
37009: IFFALSE 37371
// begin InitHc ;
37011: CALL_OW 19
// if not f then
37015: LD_VAR 0 12
37019: NOT
37020: IFFALSE 37109
// begin PrepareHuman ( false , i , skill ) ;
37022: LD_INT 0
37024: PPUSH
37025: LD_VAR 0 8
37029: PPUSH
37030: LD_VAR 0 4
37034: PPUSH
37035: CALL_OW 380
// un := CreateHuman ;
37039: LD_ADDR_VAR 0 14
37043: PUSH
37044: CALL_OW 44
37048: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37049: LD_ADDR_VAR 0 7
37053: PUSH
37054: LD_VAR 0 7
37058: PPUSH
37059: LD_INT 1
37061: PPUSH
37062: LD_VAR 0 14
37066: PPUSH
37067: CALL_OW 2
37071: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37072: LD_VAR 0 14
37076: PPUSH
37077: LD_VAR 0 1
37081: PPUSH
37082: CALL_OW 250
37086: PPUSH
37087: LD_VAR 0 1
37091: PPUSH
37092: CALL_OW 251
37096: PPUSH
37097: LD_INT 10
37099: PPUSH
37100: LD_INT 0
37102: PPUSH
37103: CALL_OW 50
// continue ;
37107: GO 37008
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37109: LD_VAR 0 12
37113: PUSH
37114: LD_INT 1
37116: ARRAY
37117: PPUSH
37118: CALL_OW 313
37122: PUSH
37123: LD_VAR 0 12
37127: PUSH
37128: LD_INT 1
37130: ARRAY
37131: PPUSH
37132: CALL_OW 266
37136: PUSH
37137: LD_INT 32
37139: PUSH
37140: LD_INT 31
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: IN
37147: AND
37148: PUSH
37149: LD_VAR 0 12
37153: PUSH
37154: LD_INT 1
37156: ARRAY
37157: PPUSH
37158: CALL_OW 313
37162: PUSH
37163: LD_INT 6
37165: EQUAL
37166: OR
37167: IFFALSE 37187
// f := Delete ( f , 1 ) ;
37169: LD_ADDR_VAR 0 12
37173: PUSH
37174: LD_VAR 0 12
37178: PPUSH
37179: LD_INT 1
37181: PPUSH
37182: CALL_OW 3
37186: ST_TO_ADDR
// if not f then
37187: LD_VAR 0 12
37191: NOT
37192: IFFALSE 37210
// begin x := x + 2 ;
37194: LD_ADDR_VAR 0 13
37198: PUSH
37199: LD_VAR 0 13
37203: PUSH
37204: LD_INT 2
37206: PLUS
37207: ST_TO_ADDR
// continue ;
37208: GO 37008
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37210: LD_VAR 0 12
37214: PUSH
37215: LD_INT 1
37217: ARRAY
37218: PPUSH
37219: CALL_OW 266
37223: PUSH
37224: LD_INT 5
37226: EQUAL
37227: IFFALSE 37301
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37229: LD_VAR 0 12
37233: PUSH
37234: LD_INT 1
37236: ARRAY
37237: PPUSH
37238: CALL_OW 313
37242: PUSH
37243: LD_INT 3
37245: LESS
37246: IFFALSE 37282
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37248: LD_INT 0
37250: PPUSH
37251: LD_INT 5
37253: PUSH
37254: LD_INT 8
37256: PUSH
37257: LD_INT 9
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: LIST
37264: PUSH
37265: LD_VAR 0 17
37269: ARRAY
37270: PPUSH
37271: LD_VAR 0 4
37275: PPUSH
37276: CALL_OW 380
37280: GO 37299
// PrepareHuman ( false , i , skill ) ;
37282: LD_INT 0
37284: PPUSH
37285: LD_VAR 0 8
37289: PPUSH
37290: LD_VAR 0 4
37294: PPUSH
37295: CALL_OW 380
// end else
37299: GO 37318
// PrepareHuman ( false , i , skill ) ;
37301: LD_INT 0
37303: PPUSH
37304: LD_VAR 0 8
37308: PPUSH
37309: LD_VAR 0 4
37313: PPUSH
37314: CALL_OW 380
// un := CreateHuman ;
37318: LD_ADDR_VAR 0 14
37322: PUSH
37323: CALL_OW 44
37327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37328: LD_ADDR_VAR 0 7
37332: PUSH
37333: LD_VAR 0 7
37337: PPUSH
37338: LD_INT 1
37340: PPUSH
37341: LD_VAR 0 14
37345: PPUSH
37346: CALL_OW 2
37350: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37351: LD_VAR 0 14
37355: PPUSH
37356: LD_VAR 0 12
37360: PUSH
37361: LD_INT 1
37363: ARRAY
37364: PPUSH
37365: CALL_OW 52
// end ;
37369: GO 37008
37371: POP
37372: POP
// end ;
37373: GO 36310
37375: POP
37376: POP
// result := result ^ buildings ;
37377: LD_ADDR_VAR 0 7
37381: PUSH
37382: LD_VAR 0 7
37386: PUSH
37387: LD_VAR 0 18
37391: ADD
37392: ST_TO_ADDR
// end else
37393: GO 37536
// begin for i = 1 to personel do
37395: LD_ADDR_VAR 0 8
37399: PUSH
37400: DOUBLE
37401: LD_INT 1
37403: DEC
37404: ST_TO_ADDR
37405: LD_VAR 0 6
37409: PUSH
37410: FOR_TO
37411: IFFALSE 37534
// begin if i > 4 then
37413: LD_VAR 0 8
37417: PUSH
37418: LD_INT 4
37420: GREATER
37421: IFFALSE 37425
// break ;
37423: GO 37534
// x := personel [ i ] ;
37425: LD_ADDR_VAR 0 13
37429: PUSH
37430: LD_VAR 0 6
37434: PUSH
37435: LD_VAR 0 8
37439: ARRAY
37440: ST_TO_ADDR
// if x = - 1 then
37441: LD_VAR 0 13
37445: PUSH
37446: LD_INT 1
37448: NEG
37449: EQUAL
37450: IFFALSE 37454
// continue ;
37452: GO 37410
// PrepareHuman ( false , i , skill ) ;
37454: LD_INT 0
37456: PPUSH
37457: LD_VAR 0 8
37461: PPUSH
37462: LD_VAR 0 4
37466: PPUSH
37467: CALL_OW 380
// un := CreateHuman ;
37471: LD_ADDR_VAR 0 14
37475: PUSH
37476: CALL_OW 44
37480: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37481: LD_VAR 0 14
37485: PPUSH
37486: LD_VAR 0 1
37490: PPUSH
37491: CALL_OW 250
37495: PPUSH
37496: LD_VAR 0 1
37500: PPUSH
37501: CALL_OW 251
37505: PPUSH
37506: LD_INT 10
37508: PPUSH
37509: LD_INT 0
37511: PPUSH
37512: CALL_OW 50
// result := result ^ un ;
37516: LD_ADDR_VAR 0 7
37520: PUSH
37521: LD_VAR 0 7
37525: PUSH
37526: LD_VAR 0 14
37530: ADD
37531: ST_TO_ADDR
// end ;
37532: GO 37410
37534: POP
37535: POP
// end ; end ;
37536: LD_VAR 0 7
37540: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37541: LD_INT 0
37543: PPUSH
37544: PPUSH
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
// result := false ;
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_INT 0
37566: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37567: LD_VAR 0 1
37571: NOT
37572: PUSH
37573: LD_VAR 0 1
37577: PPUSH
37578: CALL_OW 266
37582: PUSH
37583: LD_INT 32
37585: PUSH
37586: LD_INT 33
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: IN
37593: NOT
37594: OR
37595: IFFALSE 37599
// exit ;
37597: GO 38708
// nat := GetNation ( tower ) ;
37599: LD_ADDR_VAR 0 12
37603: PUSH
37604: LD_VAR 0 1
37608: PPUSH
37609: CALL_OW 248
37613: ST_TO_ADDR
// side := GetSide ( tower ) ;
37614: LD_ADDR_VAR 0 16
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL_OW 255
37628: ST_TO_ADDR
// x := GetX ( tower ) ;
37629: LD_ADDR_VAR 0 10
37633: PUSH
37634: LD_VAR 0 1
37638: PPUSH
37639: CALL_OW 250
37643: ST_TO_ADDR
// y := GetY ( tower ) ;
37644: LD_ADDR_VAR 0 11
37648: PUSH
37649: LD_VAR 0 1
37653: PPUSH
37654: CALL_OW 251
37658: ST_TO_ADDR
// if not x or not y then
37659: LD_VAR 0 10
37663: NOT
37664: PUSH
37665: LD_VAR 0 11
37669: NOT
37670: OR
37671: IFFALSE 37675
// exit ;
37673: GO 38708
// weapon := 0 ;
37675: LD_ADDR_VAR 0 18
37679: PUSH
37680: LD_INT 0
37682: ST_TO_ADDR
// fac_list := [ ] ;
37683: LD_ADDR_VAR 0 17
37687: PUSH
37688: EMPTY
37689: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37690: LD_ADDR_VAR 0 6
37694: PUSH
37695: LD_VAR 0 1
37699: PPUSH
37700: CALL_OW 274
37704: PPUSH
37705: LD_VAR 0 2
37709: PPUSH
37710: LD_INT 0
37712: PPUSH
37713: CALL 35279 0 3
37717: PPUSH
37718: LD_INT 30
37720: PUSH
37721: LD_INT 3
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PPUSH
37728: CALL_OW 72
37732: ST_TO_ADDR
// if not factories then
37733: LD_VAR 0 6
37737: NOT
37738: IFFALSE 37742
// exit ;
37740: GO 38708
// for i in factories do
37742: LD_ADDR_VAR 0 8
37746: PUSH
37747: LD_VAR 0 6
37751: PUSH
37752: FOR_IN
37753: IFFALSE 37778
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37755: LD_ADDR_VAR 0 17
37759: PUSH
37760: LD_VAR 0 17
37764: PUSH
37765: LD_VAR 0 8
37769: PPUSH
37770: CALL_OW 478
37774: UNION
37775: ST_TO_ADDR
37776: GO 37752
37778: POP
37779: POP
// if not fac_list then
37780: LD_VAR 0 17
37784: NOT
37785: IFFALSE 37789
// exit ;
37787: GO 38708
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37789: LD_ADDR_VAR 0 5
37793: PUSH
37794: LD_INT 4
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: LD_INT 9
37802: PUSH
37803: LD_INT 10
37805: PUSH
37806: LD_INT 6
37808: PUSH
37809: LD_INT 7
37811: PUSH
37812: LD_INT 11
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 27
37826: PUSH
37827: LD_INT 28
37829: PUSH
37830: LD_INT 26
37832: PUSH
37833: LD_INT 30
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 43
37844: PUSH
37845: LD_INT 44
37847: PUSH
37848: LD_INT 46
37850: PUSH
37851: LD_INT 45
37853: PUSH
37854: LD_INT 47
37856: PUSH
37857: LD_INT 49
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: PUSH
37873: LD_VAR 0 12
37877: ARRAY
37878: ST_TO_ADDR
// list := list isect fac_list ;
37879: LD_ADDR_VAR 0 5
37883: PUSH
37884: LD_VAR 0 5
37888: PUSH
37889: LD_VAR 0 17
37893: ISECT
37894: ST_TO_ADDR
// if not list then
37895: LD_VAR 0 5
37899: NOT
37900: IFFALSE 37904
// exit ;
37902: GO 38708
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37904: LD_VAR 0 12
37908: PUSH
37909: LD_INT 3
37911: EQUAL
37912: PUSH
37913: LD_INT 49
37915: PUSH
37916: LD_VAR 0 5
37920: IN
37921: AND
37922: PUSH
37923: LD_INT 31
37925: PPUSH
37926: LD_VAR 0 16
37930: PPUSH
37931: CALL_OW 321
37935: PUSH
37936: LD_INT 2
37938: EQUAL
37939: AND
37940: IFFALSE 38000
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37942: LD_INT 22
37944: PUSH
37945: LD_VAR 0 16
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 35
37956: PUSH
37957: LD_INT 49
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 91
37966: PUSH
37967: LD_VAR 0 1
37971: PUSH
37972: LD_INT 10
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: PPUSH
37985: CALL_OW 69
37989: NOT
37990: IFFALSE 38000
// weapon := ru_time_lapser ;
37992: LD_ADDR_VAR 0 18
37996: PUSH
37997: LD_INT 49
37999: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38000: LD_VAR 0 12
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: IN
38015: PUSH
38016: LD_INT 11
38018: PUSH
38019: LD_VAR 0 5
38023: IN
38024: PUSH
38025: LD_INT 30
38027: PUSH
38028: LD_VAR 0 5
38032: IN
38033: OR
38034: AND
38035: PUSH
38036: LD_INT 6
38038: PPUSH
38039: LD_VAR 0 16
38043: PPUSH
38044: CALL_OW 321
38048: PUSH
38049: LD_INT 2
38051: EQUAL
38052: AND
38053: IFFALSE 38218
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38055: LD_INT 22
38057: PUSH
38058: LD_VAR 0 16
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 35
38072: PUSH
38073: LD_INT 11
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 35
38082: PUSH
38083: LD_INT 30
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 91
38097: PUSH
38098: LD_VAR 0 1
38102: PUSH
38103: LD_INT 18
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: LIST
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: PPUSH
38116: CALL_OW 69
38120: NOT
38121: PUSH
38122: LD_INT 22
38124: PUSH
38125: LD_VAR 0 16
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: PUSH
38137: LD_INT 30
38139: PUSH
38140: LD_INT 32
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 30
38149: PUSH
38150: LD_INT 33
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 91
38164: PUSH
38165: LD_VAR 0 1
38169: PUSH
38170: LD_INT 12
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: PPUSH
38186: CALL_OW 69
38190: PUSH
38191: LD_INT 2
38193: GREATER
38194: AND
38195: IFFALSE 38218
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38197: LD_ADDR_VAR 0 18
38201: PUSH
38202: LD_INT 11
38204: PUSH
38205: LD_INT 30
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_VAR 0 12
38216: ARRAY
38217: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38218: LD_VAR 0 18
38222: NOT
38223: PUSH
38224: LD_INT 40
38226: PPUSH
38227: LD_VAR 0 16
38231: PPUSH
38232: CALL_OW 321
38236: PUSH
38237: LD_INT 2
38239: EQUAL
38240: AND
38241: PUSH
38242: LD_INT 7
38244: PUSH
38245: LD_VAR 0 5
38249: IN
38250: PUSH
38251: LD_INT 28
38253: PUSH
38254: LD_VAR 0 5
38258: IN
38259: OR
38260: PUSH
38261: LD_INT 45
38263: PUSH
38264: LD_VAR 0 5
38268: IN
38269: OR
38270: AND
38271: IFFALSE 38525
// begin hex := GetHexInfo ( x , y ) ;
38273: LD_ADDR_VAR 0 4
38277: PUSH
38278: LD_VAR 0 10
38282: PPUSH
38283: LD_VAR 0 11
38287: PPUSH
38288: CALL_OW 546
38292: ST_TO_ADDR
// if hex [ 1 ] then
38293: LD_VAR 0 4
38297: PUSH
38298: LD_INT 1
38300: ARRAY
38301: IFFALSE 38305
// exit ;
38303: GO 38708
// height := hex [ 2 ] ;
38305: LD_ADDR_VAR 0 15
38309: PUSH
38310: LD_VAR 0 4
38314: PUSH
38315: LD_INT 2
38317: ARRAY
38318: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38319: LD_ADDR_VAR 0 14
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 3
38332: PUSH
38333: LD_INT 5
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: ST_TO_ADDR
// for i in tmp do
38342: LD_ADDR_VAR 0 8
38346: PUSH
38347: LD_VAR 0 14
38351: PUSH
38352: FOR_IN
38353: IFFALSE 38523
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38355: LD_ADDR_VAR 0 9
38359: PUSH
38360: LD_VAR 0 10
38364: PPUSH
38365: LD_VAR 0 8
38369: PPUSH
38370: LD_INT 5
38372: PPUSH
38373: CALL_OW 272
38377: PUSH
38378: LD_VAR 0 11
38382: PPUSH
38383: LD_VAR 0 8
38387: PPUSH
38388: LD_INT 5
38390: PPUSH
38391: CALL_OW 273
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38400: LD_VAR 0 9
38404: PUSH
38405: LD_INT 1
38407: ARRAY
38408: PPUSH
38409: LD_VAR 0 9
38413: PUSH
38414: LD_INT 2
38416: ARRAY
38417: PPUSH
38418: CALL_OW 488
38422: IFFALSE 38521
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38424: LD_ADDR_VAR 0 4
38428: PUSH
38429: LD_VAR 0 9
38433: PUSH
38434: LD_INT 1
38436: ARRAY
38437: PPUSH
38438: LD_VAR 0 9
38442: PUSH
38443: LD_INT 2
38445: ARRAY
38446: PPUSH
38447: CALL_OW 546
38451: ST_TO_ADDR
// if hex [ 1 ] then
38452: LD_VAR 0 4
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: IFFALSE 38464
// continue ;
38462: GO 38352
// h := hex [ 2 ] ;
38464: LD_ADDR_VAR 0 13
38468: PUSH
38469: LD_VAR 0 4
38473: PUSH
38474: LD_INT 2
38476: ARRAY
38477: ST_TO_ADDR
// if h + 7 < height then
38478: LD_VAR 0 13
38482: PUSH
38483: LD_INT 7
38485: PLUS
38486: PUSH
38487: LD_VAR 0 15
38491: LESS
38492: IFFALSE 38521
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38494: LD_ADDR_VAR 0 18
38498: PUSH
38499: LD_INT 7
38501: PUSH
38502: LD_INT 28
38504: PUSH
38505: LD_INT 45
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: PUSH
38513: LD_VAR 0 12
38517: ARRAY
38518: ST_TO_ADDR
// break ;
38519: GO 38523
// end ; end ; end ;
38521: GO 38352
38523: POP
38524: POP
// end ; if not weapon then
38525: LD_VAR 0 18
38529: NOT
38530: IFFALSE 38590
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38532: LD_ADDR_VAR 0 5
38536: PUSH
38537: LD_VAR 0 5
38541: PUSH
38542: LD_INT 11
38544: PUSH
38545: LD_INT 30
38547: PUSH
38548: LD_INT 49
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: DIFF
38556: ST_TO_ADDR
// if not list then
38557: LD_VAR 0 5
38561: NOT
38562: IFFALSE 38566
// exit ;
38564: GO 38708
// weapon := list [ rand ( 1 , list ) ] ;
38566: LD_ADDR_VAR 0 18
38570: PUSH
38571: LD_VAR 0 5
38575: PUSH
38576: LD_INT 1
38578: PPUSH
38579: LD_VAR 0 5
38583: PPUSH
38584: CALL_OW 12
38588: ARRAY
38589: ST_TO_ADDR
// end ; if weapon then
38590: LD_VAR 0 18
38594: IFFALSE 38708
// begin tmp := CostOfWeapon ( weapon ) ;
38596: LD_ADDR_VAR 0 14
38600: PUSH
38601: LD_VAR 0 18
38605: PPUSH
38606: CALL_OW 451
38610: ST_TO_ADDR
// j := GetBase ( tower ) ;
38611: LD_ADDR_VAR 0 9
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 274
38625: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38626: LD_VAR 0 9
38630: PPUSH
38631: LD_INT 1
38633: PPUSH
38634: CALL_OW 275
38638: PUSH
38639: LD_VAR 0 14
38643: PUSH
38644: LD_INT 1
38646: ARRAY
38647: GREATEREQUAL
38648: PUSH
38649: LD_VAR 0 9
38653: PPUSH
38654: LD_INT 2
38656: PPUSH
38657: CALL_OW 275
38661: PUSH
38662: LD_VAR 0 14
38666: PUSH
38667: LD_INT 2
38669: ARRAY
38670: GREATEREQUAL
38671: AND
38672: PUSH
38673: LD_VAR 0 9
38677: PPUSH
38678: LD_INT 3
38680: PPUSH
38681: CALL_OW 275
38685: PUSH
38686: LD_VAR 0 14
38690: PUSH
38691: LD_INT 3
38693: ARRAY
38694: GREATEREQUAL
38695: AND
38696: IFFALSE 38708
// result := weapon ;
38698: LD_ADDR_VAR 0 3
38702: PUSH
38703: LD_VAR 0 18
38707: ST_TO_ADDR
// end ; end ;
38708: LD_VAR 0 3
38712: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38713: LD_INT 0
38715: PPUSH
38716: PPUSH
// result := true ;
38717: LD_ADDR_VAR 0 3
38721: PUSH
38722: LD_INT 1
38724: ST_TO_ADDR
// if array1 = array2 then
38725: LD_VAR 0 1
38729: PUSH
38730: LD_VAR 0 2
38734: EQUAL
38735: IFFALSE 38795
// begin for i = 1 to array1 do
38737: LD_ADDR_VAR 0 4
38741: PUSH
38742: DOUBLE
38743: LD_INT 1
38745: DEC
38746: ST_TO_ADDR
38747: LD_VAR 0 1
38751: PUSH
38752: FOR_TO
38753: IFFALSE 38791
// if array1 [ i ] <> array2 [ i ] then
38755: LD_VAR 0 1
38759: PUSH
38760: LD_VAR 0 4
38764: ARRAY
38765: PUSH
38766: LD_VAR 0 2
38770: PUSH
38771: LD_VAR 0 4
38775: ARRAY
38776: NONEQUAL
38777: IFFALSE 38789
// begin result := false ;
38779: LD_ADDR_VAR 0 3
38783: PUSH
38784: LD_INT 0
38786: ST_TO_ADDR
// break ;
38787: GO 38791
// end ;
38789: GO 38752
38791: POP
38792: POP
// end else
38793: GO 38803
// result := false ;
38795: LD_ADDR_VAR 0 3
38799: PUSH
38800: LD_INT 0
38802: ST_TO_ADDR
// end ;
38803: LD_VAR 0 3
38807: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38808: LD_INT 0
38810: PPUSH
38811: PPUSH
// if not array1 or not array2 then
38812: LD_VAR 0 1
38816: NOT
38817: PUSH
38818: LD_VAR 0 2
38822: NOT
38823: OR
38824: IFFALSE 38828
// exit ;
38826: GO 38892
// result := true ;
38828: LD_ADDR_VAR 0 3
38832: PUSH
38833: LD_INT 1
38835: ST_TO_ADDR
// for i = 1 to array1 do
38836: LD_ADDR_VAR 0 4
38840: PUSH
38841: DOUBLE
38842: LD_INT 1
38844: DEC
38845: ST_TO_ADDR
38846: LD_VAR 0 1
38850: PUSH
38851: FOR_TO
38852: IFFALSE 38890
// if array1 [ i ] <> array2 [ i ] then
38854: LD_VAR 0 1
38858: PUSH
38859: LD_VAR 0 4
38863: ARRAY
38864: PUSH
38865: LD_VAR 0 2
38869: PUSH
38870: LD_VAR 0 4
38874: ARRAY
38875: NONEQUAL
38876: IFFALSE 38888
// begin result := false ;
38878: LD_ADDR_VAR 0 3
38882: PUSH
38883: LD_INT 0
38885: ST_TO_ADDR
// break ;
38886: GO 38890
// end ;
38888: GO 38851
38890: POP
38891: POP
// end ;
38892: LD_VAR 0 3
38896: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38897: LD_INT 0
38899: PPUSH
38900: PPUSH
38901: PPUSH
// pom := GetBase ( fac ) ;
38902: LD_ADDR_VAR 0 5
38906: PUSH
38907: LD_VAR 0 1
38911: PPUSH
38912: CALL_OW 274
38916: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38917: LD_ADDR_VAR 0 4
38921: PUSH
38922: LD_VAR 0 2
38926: PUSH
38927: LD_INT 1
38929: ARRAY
38930: PPUSH
38931: LD_VAR 0 2
38935: PUSH
38936: LD_INT 2
38938: ARRAY
38939: PPUSH
38940: LD_VAR 0 2
38944: PUSH
38945: LD_INT 3
38947: ARRAY
38948: PPUSH
38949: LD_VAR 0 2
38953: PUSH
38954: LD_INT 4
38956: ARRAY
38957: PPUSH
38958: CALL_OW 449
38962: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38963: LD_ADDR_VAR 0 3
38967: PUSH
38968: LD_VAR 0 5
38972: PPUSH
38973: LD_INT 1
38975: PPUSH
38976: CALL_OW 275
38980: PUSH
38981: LD_VAR 0 4
38985: PUSH
38986: LD_INT 1
38988: ARRAY
38989: GREATEREQUAL
38990: PUSH
38991: LD_VAR 0 5
38995: PPUSH
38996: LD_INT 2
38998: PPUSH
38999: CALL_OW 275
39003: PUSH
39004: LD_VAR 0 4
39008: PUSH
39009: LD_INT 2
39011: ARRAY
39012: GREATEREQUAL
39013: AND
39014: PUSH
39015: LD_VAR 0 5
39019: PPUSH
39020: LD_INT 3
39022: PPUSH
39023: CALL_OW 275
39027: PUSH
39028: LD_VAR 0 4
39032: PUSH
39033: LD_INT 3
39035: ARRAY
39036: GREATEREQUAL
39037: AND
39038: ST_TO_ADDR
// end ;
39039: LD_VAR 0 3
39043: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39044: LD_INT 0
39046: PPUSH
39047: PPUSH
39048: PPUSH
39049: PPUSH
// pom := GetBase ( building ) ;
39050: LD_ADDR_VAR 0 3
39054: PUSH
39055: LD_VAR 0 1
39059: PPUSH
39060: CALL_OW 274
39064: ST_TO_ADDR
// if not pom then
39065: LD_VAR 0 3
39069: NOT
39070: IFFALSE 39074
// exit ;
39072: GO 39244
// btype := GetBType ( building ) ;
39074: LD_ADDR_VAR 0 5
39078: PUSH
39079: LD_VAR 0 1
39083: PPUSH
39084: CALL_OW 266
39088: ST_TO_ADDR
// if btype = b_armoury then
39089: LD_VAR 0 5
39093: PUSH
39094: LD_INT 4
39096: EQUAL
39097: IFFALSE 39107
// btype := b_barracks ;
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: LD_INT 5
39106: ST_TO_ADDR
// if btype = b_depot then
39107: LD_VAR 0 5
39111: PUSH
39112: LD_INT 0
39114: EQUAL
39115: IFFALSE 39125
// btype := b_warehouse ;
39117: LD_ADDR_VAR 0 5
39121: PUSH
39122: LD_INT 1
39124: ST_TO_ADDR
// if btype = b_workshop then
39125: LD_VAR 0 5
39129: PUSH
39130: LD_INT 2
39132: EQUAL
39133: IFFALSE 39143
// btype := b_factory ;
39135: LD_ADDR_VAR 0 5
39139: PUSH
39140: LD_INT 3
39142: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39143: LD_ADDR_VAR 0 4
39147: PUSH
39148: LD_VAR 0 5
39152: PPUSH
39153: LD_VAR 0 1
39157: PPUSH
39158: CALL_OW 248
39162: PPUSH
39163: CALL_OW 450
39167: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39168: LD_ADDR_VAR 0 2
39172: PUSH
39173: LD_VAR 0 3
39177: PPUSH
39178: LD_INT 1
39180: PPUSH
39181: CALL_OW 275
39185: PUSH
39186: LD_VAR 0 4
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: GREATEREQUAL
39195: PUSH
39196: LD_VAR 0 3
39200: PPUSH
39201: LD_INT 2
39203: PPUSH
39204: CALL_OW 275
39208: PUSH
39209: LD_VAR 0 4
39213: PUSH
39214: LD_INT 2
39216: ARRAY
39217: GREATEREQUAL
39218: AND
39219: PUSH
39220: LD_VAR 0 3
39224: PPUSH
39225: LD_INT 3
39227: PPUSH
39228: CALL_OW 275
39232: PUSH
39233: LD_VAR 0 4
39237: PUSH
39238: LD_INT 3
39240: ARRAY
39241: GREATEREQUAL
39242: AND
39243: ST_TO_ADDR
// end ;
39244: LD_VAR 0 2
39248: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39249: LD_INT 0
39251: PPUSH
39252: PPUSH
39253: PPUSH
// pom := GetBase ( building ) ;
39254: LD_ADDR_VAR 0 4
39258: PUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: CALL_OW 274
39268: ST_TO_ADDR
// if not pom then
39269: LD_VAR 0 4
39273: NOT
39274: IFFALSE 39278
// exit ;
39276: GO 39379
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39278: LD_ADDR_VAR 0 5
39282: PUSH
39283: LD_VAR 0 2
39287: PPUSH
39288: LD_VAR 0 1
39292: PPUSH
39293: CALL_OW 248
39297: PPUSH
39298: CALL_OW 450
39302: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39303: LD_ADDR_VAR 0 3
39307: PUSH
39308: LD_VAR 0 4
39312: PPUSH
39313: LD_INT 1
39315: PPUSH
39316: CALL_OW 275
39320: PUSH
39321: LD_VAR 0 5
39325: PUSH
39326: LD_INT 1
39328: ARRAY
39329: GREATEREQUAL
39330: PUSH
39331: LD_VAR 0 4
39335: PPUSH
39336: LD_INT 2
39338: PPUSH
39339: CALL_OW 275
39343: PUSH
39344: LD_VAR 0 5
39348: PUSH
39349: LD_INT 2
39351: ARRAY
39352: GREATEREQUAL
39353: AND
39354: PUSH
39355: LD_VAR 0 4
39359: PPUSH
39360: LD_INT 3
39362: PPUSH
39363: CALL_OW 275
39367: PUSH
39368: LD_VAR 0 5
39372: PUSH
39373: LD_INT 3
39375: ARRAY
39376: GREATEREQUAL
39377: AND
39378: ST_TO_ADDR
// end ;
39379: LD_VAR 0 3
39383: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39384: LD_INT 0
39386: PPUSH
39387: PPUSH
39388: PPUSH
39389: PPUSH
39390: PPUSH
39391: PPUSH
39392: PPUSH
39393: PPUSH
39394: PPUSH
39395: PPUSH
39396: PPUSH
// result := false ;
39397: LD_ADDR_VAR 0 8
39401: PUSH
39402: LD_INT 0
39404: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39405: LD_VAR 0 5
39409: NOT
39410: PUSH
39411: LD_VAR 0 1
39415: NOT
39416: OR
39417: PUSH
39418: LD_VAR 0 2
39422: NOT
39423: OR
39424: PUSH
39425: LD_VAR 0 3
39429: NOT
39430: OR
39431: IFFALSE 39435
// exit ;
39433: GO 40249
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39435: LD_ADDR_VAR 0 14
39439: PUSH
39440: LD_VAR 0 1
39444: PPUSH
39445: LD_VAR 0 2
39449: PPUSH
39450: LD_VAR 0 3
39454: PPUSH
39455: LD_VAR 0 4
39459: PPUSH
39460: LD_VAR 0 5
39464: PUSH
39465: LD_INT 1
39467: ARRAY
39468: PPUSH
39469: CALL_OW 248
39473: PPUSH
39474: LD_INT 0
39476: PPUSH
39477: CALL 41482 0 6
39481: ST_TO_ADDR
// if not hexes then
39482: LD_VAR 0 14
39486: NOT
39487: IFFALSE 39491
// exit ;
39489: GO 40249
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39491: LD_ADDR_VAR 0 17
39495: PUSH
39496: LD_VAR 0 5
39500: PPUSH
39501: LD_INT 22
39503: PUSH
39504: LD_VAR 0 13
39508: PPUSH
39509: CALL_OW 255
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: LD_INT 30
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 30
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: LIST
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PPUSH
39550: CALL_OW 72
39554: ST_TO_ADDR
// for i = 1 to hexes do
39555: LD_ADDR_VAR 0 9
39559: PUSH
39560: DOUBLE
39561: LD_INT 1
39563: DEC
39564: ST_TO_ADDR
39565: LD_VAR 0 14
39569: PUSH
39570: FOR_TO
39571: IFFALSE 40247
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39573: LD_ADDR_VAR 0 13
39577: PUSH
39578: LD_VAR 0 14
39582: PUSH
39583: LD_VAR 0 9
39587: ARRAY
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PPUSH
39593: LD_VAR 0 14
39597: PUSH
39598: LD_VAR 0 9
39602: ARRAY
39603: PUSH
39604: LD_INT 2
39606: ARRAY
39607: PPUSH
39608: CALL_OW 428
39612: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39613: LD_VAR 0 14
39617: PUSH
39618: LD_VAR 0 9
39622: ARRAY
39623: PUSH
39624: LD_INT 1
39626: ARRAY
39627: PPUSH
39628: LD_VAR 0 14
39632: PUSH
39633: LD_VAR 0 9
39637: ARRAY
39638: PUSH
39639: LD_INT 2
39641: ARRAY
39642: PPUSH
39643: CALL_OW 351
39647: PUSH
39648: LD_VAR 0 14
39652: PUSH
39653: LD_VAR 0 9
39657: ARRAY
39658: PUSH
39659: LD_INT 1
39661: ARRAY
39662: PPUSH
39663: LD_VAR 0 14
39667: PUSH
39668: LD_VAR 0 9
39672: ARRAY
39673: PUSH
39674: LD_INT 2
39676: ARRAY
39677: PPUSH
39678: CALL_OW 488
39682: NOT
39683: OR
39684: PUSH
39685: LD_VAR 0 13
39689: PPUSH
39690: CALL_OW 247
39694: PUSH
39695: LD_INT 3
39697: EQUAL
39698: OR
39699: IFFALSE 39705
// exit ;
39701: POP
39702: POP
39703: GO 40249
// if not tmp then
39705: LD_VAR 0 13
39709: NOT
39710: IFFALSE 39714
// continue ;
39712: GO 39570
// result := true ;
39714: LD_ADDR_VAR 0 8
39718: PUSH
39719: LD_INT 1
39721: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39722: LD_VAR 0 6
39726: PUSH
39727: LD_VAR 0 13
39731: PPUSH
39732: CALL_OW 247
39736: PUSH
39737: LD_INT 2
39739: EQUAL
39740: AND
39741: PUSH
39742: LD_VAR 0 13
39746: PPUSH
39747: CALL_OW 263
39751: PUSH
39752: LD_INT 1
39754: EQUAL
39755: AND
39756: IFFALSE 39920
// begin if IsDrivenBy ( tmp ) then
39758: LD_VAR 0 13
39762: PPUSH
39763: CALL_OW 311
39767: IFFALSE 39771
// continue ;
39769: GO 39570
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39771: LD_VAR 0 6
39775: PPUSH
39776: LD_INT 3
39778: PUSH
39779: LD_INT 60
39781: PUSH
39782: EMPTY
39783: LIST
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 3
39791: PUSH
39792: LD_INT 55
39794: PUSH
39795: EMPTY
39796: LIST
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PPUSH
39806: CALL_OW 72
39810: IFFALSE 39918
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39812: LD_ADDR_VAR 0 18
39816: PUSH
39817: LD_VAR 0 6
39821: PPUSH
39822: LD_INT 3
39824: PUSH
39825: LD_INT 60
39827: PUSH
39828: EMPTY
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: LD_INT 55
39840: PUSH
39841: EMPTY
39842: LIST
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PPUSH
39852: CALL_OW 72
39856: PUSH
39857: LD_INT 1
39859: ARRAY
39860: ST_TO_ADDR
// if IsInUnit ( driver ) then
39861: LD_VAR 0 18
39865: PPUSH
39866: CALL_OW 310
39870: IFFALSE 39881
// ComExit ( driver ) ;
39872: LD_VAR 0 18
39876: PPUSH
39877: CALL 65243 0 1
// AddComEnterUnit ( driver , tmp ) ;
39881: LD_VAR 0 18
39885: PPUSH
39886: LD_VAR 0 13
39890: PPUSH
39891: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39895: LD_VAR 0 18
39899: PPUSH
39900: LD_VAR 0 7
39904: PPUSH
39905: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39909: LD_VAR 0 18
39913: PPUSH
39914: CALL_OW 181
// end ; continue ;
39918: GO 39570
// end ; if not cleaners or not tmp in cleaners then
39920: LD_VAR 0 6
39924: NOT
39925: PUSH
39926: LD_VAR 0 13
39930: PUSH
39931: LD_VAR 0 6
39935: IN
39936: NOT
39937: OR
39938: IFFALSE 40245
// begin if dep then
39940: LD_VAR 0 17
39944: IFFALSE 40080
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39946: LD_ADDR_VAR 0 16
39950: PUSH
39951: LD_VAR 0 17
39955: PUSH
39956: LD_INT 1
39958: ARRAY
39959: PPUSH
39960: CALL_OW 250
39964: PPUSH
39965: LD_VAR 0 17
39969: PUSH
39970: LD_INT 1
39972: ARRAY
39973: PPUSH
39974: CALL_OW 254
39978: PPUSH
39979: LD_INT 5
39981: PPUSH
39982: CALL_OW 272
39986: PUSH
39987: LD_VAR 0 17
39991: PUSH
39992: LD_INT 1
39994: ARRAY
39995: PPUSH
39996: CALL_OW 251
40000: PPUSH
40001: LD_VAR 0 17
40005: PUSH
40006: LD_INT 1
40008: ARRAY
40009: PPUSH
40010: CALL_OW 254
40014: PPUSH
40015: LD_INT 5
40017: PPUSH
40018: CALL_OW 273
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40027: LD_VAR 0 16
40031: PUSH
40032: LD_INT 1
40034: ARRAY
40035: PPUSH
40036: LD_VAR 0 16
40040: PUSH
40041: LD_INT 2
40043: ARRAY
40044: PPUSH
40045: CALL_OW 488
40049: IFFALSE 40080
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40051: LD_VAR 0 13
40055: PPUSH
40056: LD_VAR 0 16
40060: PUSH
40061: LD_INT 1
40063: ARRAY
40064: PPUSH
40065: LD_VAR 0 16
40069: PUSH
40070: LD_INT 2
40072: ARRAY
40073: PPUSH
40074: CALL_OW 111
// continue ;
40078: GO 39570
// end ; end ; r := GetDir ( tmp ) ;
40080: LD_ADDR_VAR 0 15
40084: PUSH
40085: LD_VAR 0 13
40089: PPUSH
40090: CALL_OW 254
40094: ST_TO_ADDR
// if r = 5 then
40095: LD_VAR 0 15
40099: PUSH
40100: LD_INT 5
40102: EQUAL
40103: IFFALSE 40113
// r := 0 ;
40105: LD_ADDR_VAR 0 15
40109: PUSH
40110: LD_INT 0
40112: ST_TO_ADDR
// for j = r to 5 do
40113: LD_ADDR_VAR 0 10
40117: PUSH
40118: DOUBLE
40119: LD_VAR 0 15
40123: DEC
40124: ST_TO_ADDR
40125: LD_INT 5
40127: PUSH
40128: FOR_TO
40129: IFFALSE 40243
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40131: LD_ADDR_VAR 0 11
40135: PUSH
40136: LD_VAR 0 13
40140: PPUSH
40141: CALL_OW 250
40145: PPUSH
40146: LD_VAR 0 10
40150: PPUSH
40151: LD_INT 2
40153: PPUSH
40154: CALL_OW 272
40158: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40159: LD_ADDR_VAR 0 12
40163: PUSH
40164: LD_VAR 0 13
40168: PPUSH
40169: CALL_OW 251
40173: PPUSH
40174: LD_VAR 0 10
40178: PPUSH
40179: LD_INT 2
40181: PPUSH
40182: CALL_OW 273
40186: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40187: LD_VAR 0 11
40191: PPUSH
40192: LD_VAR 0 12
40196: PPUSH
40197: CALL_OW 488
40201: PUSH
40202: LD_VAR 0 11
40206: PPUSH
40207: LD_VAR 0 12
40211: PPUSH
40212: CALL_OW 428
40216: NOT
40217: AND
40218: IFFALSE 40241
// begin ComMoveXY ( tmp , _x , _y ) ;
40220: LD_VAR 0 13
40224: PPUSH
40225: LD_VAR 0 11
40229: PPUSH
40230: LD_VAR 0 12
40234: PPUSH
40235: CALL_OW 111
// break ;
40239: GO 40243
// end ; end ;
40241: GO 40128
40243: POP
40244: POP
// end ; end ;
40245: GO 39570
40247: POP
40248: POP
// end ;
40249: LD_VAR 0 8
40253: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40254: LD_INT 0
40256: PPUSH
// result := true ;
40257: LD_ADDR_VAR 0 3
40261: PUSH
40262: LD_INT 1
40264: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40265: LD_VAR 0 2
40269: PUSH
40270: LD_INT 24
40272: DOUBLE
40273: EQUAL
40274: IFTRUE 40284
40276: LD_INT 33
40278: DOUBLE
40279: EQUAL
40280: IFTRUE 40284
40282: GO 40309
40284: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40285: LD_ADDR_VAR 0 3
40289: PUSH
40290: LD_INT 32
40292: PPUSH
40293: LD_VAR 0 1
40297: PPUSH
40298: CALL_OW 321
40302: PUSH
40303: LD_INT 2
40305: EQUAL
40306: ST_TO_ADDR
40307: GO 40625
40309: LD_INT 20
40311: DOUBLE
40312: EQUAL
40313: IFTRUE 40317
40315: GO 40342
40317: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40318: LD_ADDR_VAR 0 3
40322: PUSH
40323: LD_INT 6
40325: PPUSH
40326: LD_VAR 0 1
40330: PPUSH
40331: CALL_OW 321
40335: PUSH
40336: LD_INT 2
40338: EQUAL
40339: ST_TO_ADDR
40340: GO 40625
40342: LD_INT 22
40344: DOUBLE
40345: EQUAL
40346: IFTRUE 40356
40348: LD_INT 36
40350: DOUBLE
40351: EQUAL
40352: IFTRUE 40356
40354: GO 40381
40356: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40357: LD_ADDR_VAR 0 3
40361: PUSH
40362: LD_INT 15
40364: PPUSH
40365: LD_VAR 0 1
40369: PPUSH
40370: CALL_OW 321
40374: PUSH
40375: LD_INT 2
40377: EQUAL
40378: ST_TO_ADDR
40379: GO 40625
40381: LD_INT 30
40383: DOUBLE
40384: EQUAL
40385: IFTRUE 40389
40387: GO 40414
40389: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40390: LD_ADDR_VAR 0 3
40394: PUSH
40395: LD_INT 20
40397: PPUSH
40398: LD_VAR 0 1
40402: PPUSH
40403: CALL_OW 321
40407: PUSH
40408: LD_INT 2
40410: EQUAL
40411: ST_TO_ADDR
40412: GO 40625
40414: LD_INT 28
40416: DOUBLE
40417: EQUAL
40418: IFTRUE 40428
40420: LD_INT 21
40422: DOUBLE
40423: EQUAL
40424: IFTRUE 40428
40426: GO 40453
40428: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40429: LD_ADDR_VAR 0 3
40433: PUSH
40434: LD_INT 21
40436: PPUSH
40437: LD_VAR 0 1
40441: PPUSH
40442: CALL_OW 321
40446: PUSH
40447: LD_INT 2
40449: EQUAL
40450: ST_TO_ADDR
40451: GO 40625
40453: LD_INT 16
40455: DOUBLE
40456: EQUAL
40457: IFTRUE 40461
40459: GO 40486
40461: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40462: LD_ADDR_VAR 0 3
40466: PUSH
40467: LD_INT 84
40469: PPUSH
40470: LD_VAR 0 1
40474: PPUSH
40475: CALL_OW 321
40479: PUSH
40480: LD_INT 2
40482: EQUAL
40483: ST_TO_ADDR
40484: GO 40625
40486: LD_INT 19
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40500
40492: LD_INT 23
40494: DOUBLE
40495: EQUAL
40496: IFTRUE 40500
40498: GO 40525
40500: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_INT 83
40508: PPUSH
40509: LD_VAR 0 1
40513: PPUSH
40514: CALL_OW 321
40518: PUSH
40519: LD_INT 2
40521: EQUAL
40522: ST_TO_ADDR
40523: GO 40625
40525: LD_INT 17
40527: DOUBLE
40528: EQUAL
40529: IFTRUE 40533
40531: GO 40558
40533: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40534: LD_ADDR_VAR 0 3
40538: PUSH
40539: LD_INT 39
40541: PPUSH
40542: LD_VAR 0 1
40546: PPUSH
40547: CALL_OW 321
40551: PUSH
40552: LD_INT 2
40554: EQUAL
40555: ST_TO_ADDR
40556: GO 40625
40558: LD_INT 18
40560: DOUBLE
40561: EQUAL
40562: IFTRUE 40566
40564: GO 40591
40566: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40567: LD_ADDR_VAR 0 3
40571: PUSH
40572: LD_INT 40
40574: PPUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 321
40584: PUSH
40585: LD_INT 2
40587: EQUAL
40588: ST_TO_ADDR
40589: GO 40625
40591: LD_INT 27
40593: DOUBLE
40594: EQUAL
40595: IFTRUE 40599
40597: GO 40624
40599: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40600: LD_ADDR_VAR 0 3
40604: PUSH
40605: LD_INT 35
40607: PPUSH
40608: LD_VAR 0 1
40612: PPUSH
40613: CALL_OW 321
40617: PUSH
40618: LD_INT 2
40620: EQUAL
40621: ST_TO_ADDR
40622: GO 40625
40624: POP
// end ;
40625: LD_VAR 0 3
40629: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40630: LD_INT 0
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
40636: PPUSH
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
40641: PPUSH
40642: PPUSH
// result := false ;
40643: LD_ADDR_VAR 0 6
40647: PUSH
40648: LD_INT 0
40650: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40651: LD_VAR 0 1
40655: NOT
40656: PUSH
40657: LD_VAR 0 1
40661: PPUSH
40662: CALL_OW 266
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: IN
40677: NOT
40678: OR
40679: PUSH
40680: LD_VAR 0 2
40684: NOT
40685: OR
40686: PUSH
40687: LD_VAR 0 5
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: LD_INT 4
40706: PUSH
40707: LD_INT 5
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: IN
40718: NOT
40719: OR
40720: PUSH
40721: LD_VAR 0 3
40725: PPUSH
40726: LD_VAR 0 4
40730: PPUSH
40731: CALL_OW 488
40735: NOT
40736: OR
40737: IFFALSE 40741
// exit ;
40739: GO 41477
// side := GetSide ( depot ) ;
40741: LD_ADDR_VAR 0 9
40745: PUSH
40746: LD_VAR 0 1
40750: PPUSH
40751: CALL_OW 255
40755: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40756: LD_VAR 0 9
40760: PPUSH
40761: LD_VAR 0 2
40765: PPUSH
40766: CALL 40254 0 2
40770: NOT
40771: IFFALSE 40775
// exit ;
40773: GO 41477
// pom := GetBase ( depot ) ;
40775: LD_ADDR_VAR 0 10
40779: PUSH
40780: LD_VAR 0 1
40784: PPUSH
40785: CALL_OW 274
40789: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40790: LD_ADDR_VAR 0 11
40794: PUSH
40795: LD_VAR 0 2
40799: PPUSH
40800: LD_VAR 0 1
40804: PPUSH
40805: CALL_OW 248
40809: PPUSH
40810: CALL_OW 450
40814: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40815: LD_VAR 0 10
40819: PPUSH
40820: LD_INT 1
40822: PPUSH
40823: CALL_OW 275
40827: PUSH
40828: LD_VAR 0 11
40832: PUSH
40833: LD_INT 1
40835: ARRAY
40836: GREATEREQUAL
40837: PUSH
40838: LD_VAR 0 10
40842: PPUSH
40843: LD_INT 2
40845: PPUSH
40846: CALL_OW 275
40850: PUSH
40851: LD_VAR 0 11
40855: PUSH
40856: LD_INT 2
40858: ARRAY
40859: GREATEREQUAL
40860: AND
40861: PUSH
40862: LD_VAR 0 10
40866: PPUSH
40867: LD_INT 3
40869: PPUSH
40870: CALL_OW 275
40874: PUSH
40875: LD_VAR 0 11
40879: PUSH
40880: LD_INT 3
40882: ARRAY
40883: GREATEREQUAL
40884: AND
40885: NOT
40886: IFFALSE 40890
// exit ;
40888: GO 41477
// if GetBType ( depot ) = b_depot then
40890: LD_VAR 0 1
40894: PPUSH
40895: CALL_OW 266
40899: PUSH
40900: LD_INT 0
40902: EQUAL
40903: IFFALSE 40915
// dist := 28 else
40905: LD_ADDR_VAR 0 14
40909: PUSH
40910: LD_INT 28
40912: ST_TO_ADDR
40913: GO 40923
// dist := 36 ;
40915: LD_ADDR_VAR 0 14
40919: PUSH
40920: LD_INT 36
40922: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40923: LD_VAR 0 1
40927: PPUSH
40928: LD_VAR 0 3
40932: PPUSH
40933: LD_VAR 0 4
40937: PPUSH
40938: CALL_OW 297
40942: PUSH
40943: LD_VAR 0 14
40947: GREATER
40948: IFFALSE 40952
// exit ;
40950: GO 41477
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40952: LD_ADDR_VAR 0 12
40956: PUSH
40957: LD_VAR 0 2
40961: PPUSH
40962: LD_VAR 0 3
40966: PPUSH
40967: LD_VAR 0 4
40971: PPUSH
40972: LD_VAR 0 5
40976: PPUSH
40977: LD_VAR 0 1
40981: PPUSH
40982: CALL_OW 248
40986: PPUSH
40987: LD_INT 0
40989: PPUSH
40990: CALL 41482 0 6
40994: ST_TO_ADDR
// if not hexes then
40995: LD_VAR 0 12
40999: NOT
41000: IFFALSE 41004
// exit ;
41002: GO 41477
// hex := GetHexInfo ( x , y ) ;
41004: LD_ADDR_VAR 0 15
41008: PUSH
41009: LD_VAR 0 3
41013: PPUSH
41014: LD_VAR 0 4
41018: PPUSH
41019: CALL_OW 546
41023: ST_TO_ADDR
// if hex [ 1 ] then
41024: LD_VAR 0 15
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: IFFALSE 41036
// exit ;
41034: GO 41477
// height := hex [ 2 ] ;
41036: LD_ADDR_VAR 0 13
41040: PUSH
41041: LD_VAR 0 15
41045: PUSH
41046: LD_INT 2
41048: ARRAY
41049: ST_TO_ADDR
// for i = 1 to hexes do
41050: LD_ADDR_VAR 0 7
41054: PUSH
41055: DOUBLE
41056: LD_INT 1
41058: DEC
41059: ST_TO_ADDR
41060: LD_VAR 0 12
41064: PUSH
41065: FOR_TO
41066: IFFALSE 41396
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41068: LD_VAR 0 12
41072: PUSH
41073: LD_VAR 0 7
41077: ARRAY
41078: PUSH
41079: LD_INT 1
41081: ARRAY
41082: PPUSH
41083: LD_VAR 0 12
41087: PUSH
41088: LD_VAR 0 7
41092: ARRAY
41093: PUSH
41094: LD_INT 2
41096: ARRAY
41097: PPUSH
41098: CALL_OW 488
41102: NOT
41103: PUSH
41104: LD_VAR 0 12
41108: PUSH
41109: LD_VAR 0 7
41113: ARRAY
41114: PUSH
41115: LD_INT 1
41117: ARRAY
41118: PPUSH
41119: LD_VAR 0 12
41123: PUSH
41124: LD_VAR 0 7
41128: ARRAY
41129: PUSH
41130: LD_INT 2
41132: ARRAY
41133: PPUSH
41134: CALL_OW 428
41138: PUSH
41139: LD_INT 0
41141: GREATER
41142: OR
41143: PUSH
41144: LD_VAR 0 12
41148: PUSH
41149: LD_VAR 0 7
41153: ARRAY
41154: PUSH
41155: LD_INT 1
41157: ARRAY
41158: PPUSH
41159: LD_VAR 0 12
41163: PUSH
41164: LD_VAR 0 7
41168: ARRAY
41169: PUSH
41170: LD_INT 2
41172: ARRAY
41173: PPUSH
41174: CALL_OW 351
41178: OR
41179: IFFALSE 41185
// exit ;
41181: POP
41182: POP
41183: GO 41477
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41185: LD_ADDR_VAR 0 8
41189: PUSH
41190: LD_VAR 0 12
41194: PUSH
41195: LD_VAR 0 7
41199: ARRAY
41200: PUSH
41201: LD_INT 1
41203: ARRAY
41204: PPUSH
41205: LD_VAR 0 12
41209: PUSH
41210: LD_VAR 0 7
41214: ARRAY
41215: PUSH
41216: LD_INT 2
41218: ARRAY
41219: PPUSH
41220: CALL_OW 546
41224: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41225: LD_VAR 0 8
41229: PUSH
41230: LD_INT 1
41232: ARRAY
41233: PUSH
41234: LD_VAR 0 8
41238: PUSH
41239: LD_INT 2
41241: ARRAY
41242: PUSH
41243: LD_VAR 0 13
41247: PUSH
41248: LD_INT 2
41250: PLUS
41251: GREATER
41252: OR
41253: PUSH
41254: LD_VAR 0 8
41258: PUSH
41259: LD_INT 2
41261: ARRAY
41262: PUSH
41263: LD_VAR 0 13
41267: PUSH
41268: LD_INT 2
41270: MINUS
41271: LESS
41272: OR
41273: PUSH
41274: LD_VAR 0 8
41278: PUSH
41279: LD_INT 3
41281: ARRAY
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 8
41288: PUSH
41289: LD_INT 9
41291: PUSH
41292: LD_INT 10
41294: PUSH
41295: LD_INT 11
41297: PUSH
41298: LD_INT 12
41300: PUSH
41301: LD_INT 13
41303: PUSH
41304: LD_INT 16
41306: PUSH
41307: LD_INT 17
41309: PUSH
41310: LD_INT 18
41312: PUSH
41313: LD_INT 19
41315: PUSH
41316: LD_INT 20
41318: PUSH
41319: LD_INT 21
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: IN
41337: NOT
41338: OR
41339: PUSH
41340: LD_VAR 0 8
41344: PUSH
41345: LD_INT 5
41347: ARRAY
41348: NOT
41349: OR
41350: PUSH
41351: LD_VAR 0 8
41355: PUSH
41356: LD_INT 6
41358: ARRAY
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: LD_INT 7
41368: PUSH
41369: LD_INT 9
41371: PUSH
41372: LD_INT 10
41374: PUSH
41375: LD_INT 11
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: IN
41386: NOT
41387: OR
41388: IFFALSE 41394
// exit ;
41390: POP
41391: POP
41392: GO 41477
// end ;
41394: GO 41065
41396: POP
41397: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41398: LD_VAR 0 9
41402: PPUSH
41403: LD_VAR 0 3
41407: PPUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: LD_INT 20
41415: PPUSH
41416: CALL 33429 0 4
41420: PUSH
41421: LD_INT 4
41423: ARRAY
41424: IFFALSE 41428
// exit ;
41426: GO 41477
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41428: LD_VAR 0 2
41432: PUSH
41433: LD_INT 29
41435: PUSH
41436: LD_INT 30
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: IN
41443: PUSH
41444: LD_VAR 0 3
41448: PPUSH
41449: LD_VAR 0 4
41453: PPUSH
41454: LD_VAR 0 9
41458: PPUSH
41459: CALL_OW 440
41463: NOT
41464: AND
41465: IFFALSE 41469
// exit ;
41467: GO 41477
// result := true ;
41469: LD_ADDR_VAR 0 6
41473: PUSH
41474: LD_INT 1
41476: ST_TO_ADDR
// end ;
41477: LD_VAR 0 6
41481: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41482: LD_INT 0
41484: PPUSH
41485: PPUSH
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
41493: PPUSH
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
41511: PPUSH
41512: PPUSH
41513: PPUSH
41514: PPUSH
41515: PPUSH
41516: PPUSH
41517: PPUSH
41518: PPUSH
41519: PPUSH
41520: PPUSH
41521: PPUSH
41522: PPUSH
41523: PPUSH
41524: PPUSH
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
41539: PPUSH
41540: PPUSH
41541: PPUSH
// result = [ ] ;
41542: LD_ADDR_VAR 0 7
41546: PUSH
41547: EMPTY
41548: ST_TO_ADDR
// temp_list = [ ] ;
41549: LD_ADDR_VAR 0 9
41553: PUSH
41554: EMPTY
41555: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41556: LD_VAR 0 4
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 2
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: LD_INT 4
41575: PUSH
41576: LD_INT 5
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: IN
41587: NOT
41588: PUSH
41589: LD_VAR 0 1
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: LD_INT 1
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: IN
41604: PUSH
41605: LD_VAR 0 5
41609: PUSH
41610: LD_INT 1
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: LIST
41623: IN
41624: NOT
41625: AND
41626: OR
41627: IFFALSE 41631
// exit ;
41629: GO 60022
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41631: LD_VAR 0 1
41635: PUSH
41636: LD_INT 6
41638: PUSH
41639: LD_INT 7
41641: PUSH
41642: LD_INT 8
41644: PUSH
41645: LD_INT 13
41647: PUSH
41648: LD_INT 12
41650: PUSH
41651: LD_INT 15
41653: PUSH
41654: LD_INT 11
41656: PUSH
41657: LD_INT 14
41659: PUSH
41660: LD_INT 10
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: IN
41674: IFFALSE 41684
// btype = b_lab ;
41676: LD_ADDR_VAR 0 1
41680: PUSH
41681: LD_INT 6
41683: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41684: LD_VAR 0 6
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: IN
41703: NOT
41704: PUSH
41705: LD_VAR 0 1
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: LD_INT 2
41718: PUSH
41719: LD_INT 3
41721: PUSH
41722: LD_INT 6
41724: PUSH
41725: LD_INT 36
41727: PUSH
41728: LD_INT 4
41730: PUSH
41731: LD_INT 5
41733: PUSH
41734: LD_INT 31
41736: PUSH
41737: LD_INT 32
41739: PUSH
41740: LD_INT 33
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: IN
41756: NOT
41757: PUSH
41758: LD_VAR 0 6
41762: PUSH
41763: LD_INT 1
41765: EQUAL
41766: AND
41767: OR
41768: PUSH
41769: LD_VAR 0 1
41773: PUSH
41774: LD_INT 2
41776: PUSH
41777: LD_INT 3
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: IN
41784: NOT
41785: PUSH
41786: LD_VAR 0 6
41790: PUSH
41791: LD_INT 2
41793: EQUAL
41794: AND
41795: OR
41796: IFFALSE 41806
// mode = 0 ;
41798: LD_ADDR_VAR 0 6
41802: PUSH
41803: LD_INT 0
41805: ST_TO_ADDR
// case mode of 0 :
41806: LD_VAR 0 6
41810: PUSH
41811: LD_INT 0
41813: DOUBLE
41814: EQUAL
41815: IFTRUE 41819
41817: GO 53272
41819: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41820: LD_ADDR_VAR 0 11
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: LD_INT 1
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: LD_INT 0
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: NEG
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: NEG
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 2
41905: NEG
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: LD_INT 2
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 2
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 3
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42013: LD_ADDR_VAR 0 12
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 1
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 1
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 2
42115: PUSH
42116: LD_INT 1
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: LD_INT 0
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 2
42147: NEG
42148: PUSH
42149: LD_INT 1
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: NEG
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: NEG
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42209: LD_ADDR_VAR 0 13
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: LD_INT 0
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: LD_INT 1
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: LD_INT 1
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 2
42302: PUSH
42303: LD_INT 1
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 2
42312: PUSH
42313: LD_INT 2
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: NEG
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: LD_INT 2
42348: NEG
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: LD_INT 3
42360: NEG
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 3
42368: NEG
42369: PUSH
42370: LD_INT 2
42372: NEG
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 3
42380: NEG
42381: PUSH
42382: LD_INT 3
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42408: LD_ADDR_VAR 0 14
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 0
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 0
42425: PUSH
42426: LD_INT 1
42428: NEG
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 1
42477: NEG
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: NEG
42490: PUSH
42491: LD_INT 2
42493: NEG
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 2
42504: NEG
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 1
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 2
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 3
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 2
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42604: LD_ADDR_VAR 0 15
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 1
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: LD_INT 1
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: PUSH
42762: LD_INT 0
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42797: LD_ADDR_VAR 0 16
42801: PUSH
42802: LD_INT 0
42804: PUSH
42805: LD_INT 0
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 1
42835: PUSH
42836: LD_INT 1
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 1
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 0
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: NEG
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 2
42932: NEG
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 3
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 3
42954: PUSH
42955: LD_INT 3
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: LD_INT 3
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42990: LD_ADDR_VAR 0 17
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 0
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 1
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 1
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: NEG
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 2
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: PUSH
43106: LD_INT 0
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 2
43125: PUSH
43126: LD_INT 2
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: NEG
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: NEG
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43220: LD_ADDR_VAR 0 18
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: LD_INT 0
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 0
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: NEG
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43450: LD_ADDR_VAR 0 19
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: NEG
43509: PUSH
43510: LD_INT 0
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 2
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 0
43605: PUSH
43606: LD_INT 2
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: NEG
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: NEG
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43680: LD_ADDR_VAR 0 20
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: LD_INT 1
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: NEG
43739: PUSH
43740: LD_INT 0
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 1
43749: NEG
43750: PUSH
43751: LD_INT 1
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 1
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: PUSH
43806: LD_INT 1
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 2
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 2
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: NEG
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43910: LD_ADDR_VAR 0 21
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 1
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 2
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 2
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 0
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: LD_INT 0
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 2
44097: NEG
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44140: LD_ADDR_VAR 0 22
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44370: LD_ADDR_VAR 0 23
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: NEG
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: LD_INT 1
44477: NEG
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 2
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: NEG
44558: PUSH
44559: LD_INT 1
44561: NEG
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: LD_INT 3
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 2
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44650: LD_ADDR_VAR 0 24
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: LD_INT 1
44670: NEG
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: PUSH
44689: LD_INT 1
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 1
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 1
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 2
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 2
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: EMPTY
44770: LIST
44771: LIST
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 2
44849: NEG
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 3
44883: PUSH
44884: LD_INT 1
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 3
44893: PUSH
44894: LD_INT 2
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44926: LD_ADDR_VAR 0 25
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 1
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 1
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 1
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: LD_INT 2
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 3
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 3
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: LD_INT 3
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 1
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45200: LD_ADDR_VAR 0 26
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: NEG
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 2
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 1
45307: NEG
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 2
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 2
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: NEG
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 3
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 3
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45476: LD_ADDR_VAR 0 27
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 2
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 2
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: LD_INT 1
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 3
45721: NEG
45722: PUSH
45723: LD_INT 2
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45756: LD_ADDR_VAR 0 28
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 1
45837: NEG
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: PUSH
45902: LD_INT 2
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 0
45911: PUSH
45912: LD_INT 2
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 3
45971: NEG
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 3
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46038: LD_ADDR_VAR 0 29
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: LD_INT 1
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: NEG
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: LD_INT 2
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 1
46193: NEG
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 1
46243: NEG
46244: PUSH
46245: EMPTY
46246: LIST
46247: LIST
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: LD_INT 3
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 1
46271: NEG
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 3
46282: NEG
46283: PUSH
46284: LD_INT 2
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46317: LD_ADDR_VAR 0 30
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: LD_INT 2
46402: NEG
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 1
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 2
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 3
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 3
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 3
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46595: LD_ADDR_VAR 0 31
46599: PUSH
46600: LD_INT 0
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: LD_INT 0
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 2
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 2
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: LD_INT 2
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 2
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 3
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: LD_INT 2
46842: NEG
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46873: LD_ADDR_VAR 0 32
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 1
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 1
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 2
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: NEG
47063: PUSH
47064: LD_INT 3
47066: NEG
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 3
47085: PUSH
47086: LD_INT 2
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 3
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47151: LD_ADDR_VAR 0 33
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 0
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 2
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 2
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: NEG
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 3
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: LD_INT 3
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 3
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47430: LD_ADDR_VAR 0 34
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 2
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 2
47609: NEG
47610: PUSH
47611: LD_INT 2
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 3
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 3
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47710: LD_ADDR_VAR 0 35
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: NEG
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47822: LD_ADDR_VAR 0 36
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 1
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47934: LD_ADDR_VAR 0 37
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 0
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: NEG
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48046: LD_ADDR_VAR 0 38
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 2
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48158: LD_ADDR_VAR 0 39
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 1
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 2
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 2
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48270: LD_ADDR_VAR 0 40
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 1
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48382: LD_ADDR_VAR 0 41
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 1
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: LD_INT 1
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: LD_INT 0
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 2
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: LD_INT 3
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 3
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: LD_INT 3
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: LD_INT 3
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 3
48667: NEG
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: LD_INT 3
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48732: LD_ADDR_VAR 0 42
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 1
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: PUSH
48858: LD_INT 2
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 2
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 2
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: LD_INT 2
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 3
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 3
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 3
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: PUSH
48969: LD_INT 2
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 3
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: LD_INT 3
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 3
49029: NEG
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: LD_INT 3
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49082: LD_ADDR_VAR 0 43
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 3
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 3
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 3
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: NEG
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 3
49378: NEG
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 3
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49430: LD_ADDR_VAR 0 44
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 1
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 3
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 3
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: LD_INT 1
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 3
49704: NEG
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: LD_INT 3
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49780: LD_ADDR_VAR 0 45
49784: PUSH
49785: LD_INT 0
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 1
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 2
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 2
49958: NEG
49959: PUSH
49960: LD_INT 2
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: LD_INT 3
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 3
50026: PUSH
50027: LD_INT 3
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: PUSH
50037: LD_INT 3
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 3
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: LD_INT 3
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: LD_INT 3
50093: NEG
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50130: LD_ADDR_VAR 0 46
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 0
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: LD_INT 3
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 0
50331: PUSH
50332: LD_INT 3
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 3
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 0
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 3
50426: NEG
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50478: LD_ADDR_VAR 0 47
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: LD_INT 0
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 1
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: LD_INT 0
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 2
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 0
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: NEG
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50629: LD_ADDR_VAR 0 48
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50776: LD_ADDR_VAR 0 49
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 0
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 2
50878: PUSH
50879: LD_INT 1
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 2
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50920: LD_ADDR_VAR 0 50
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 0
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51064: LD_ADDR_VAR 0 51
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51211: LD_ADDR_VAR 0 52
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51362: LD_ADDR_VAR 0 53
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 0
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 1
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 0
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 1
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 2
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51592: LD_ADDR_VAR 0 54
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 0
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 2
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: LD_INT 0
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: NEG
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: NEG
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51822: LD_ADDR_VAR 0 55
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 0
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 1
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: NEG
51892: PUSH
51893: LD_INT 1
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 2
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 2
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 2
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: NEG
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: NEG
52022: PUSH
52023: LD_INT 2
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52052: LD_ADDR_VAR 0 56
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 0
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 0
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: LD_INT 2
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52282: LD_ADDR_VAR 0 57
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: LD_INT 0
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: NEG
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: LD_INT 2
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 0
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: NEG
52482: PUSH
52483: LD_INT 2
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52512: LD_ADDR_VAR 0 58
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 1
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 1
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: NEG
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 2
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 2
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 2
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 2
52647: PUSH
52648: LD_INT 2
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 2
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52742: LD_ADDR_VAR 0 59
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 1
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52830: LD_ADDR_VAR 0 60
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: NEG
52900: PUSH
52901: LD_INT 1
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52918: LD_ADDR_VAR 0 61
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: LD_INT 0
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 0
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 1
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53006: LD_ADDR_VAR 0 62
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 1
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53094: LD_ADDR_VAR 0 63
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 0
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 0
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: NEG
53153: PUSH
53154: LD_INT 0
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53182: LD_ADDR_VAR 0 64
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 1
53240: NEG
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// end ; 1 :
53270: GO 59167
53272: LD_INT 1
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53280
53278: GO 55903
53280: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53281: LD_ADDR_VAR 0 11
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53325: LD_ADDR_VAR 0 12
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: LIST
53365: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53366: LD_ADDR_VAR 0 13
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 3
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: LIST
53405: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53406: LD_ADDR_VAR 0 14
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 3
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53447: LD_ADDR_VAR 0 15
53451: PUSH
53452: LD_INT 2
53454: NEG
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: LIST
53490: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53491: LD_ADDR_VAR 0 16
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 3
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: LD_INT 3
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53537: LD_ADDR_VAR 0 17
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53581: LD_ADDR_VAR 0 18
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 0
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: PUSH
53610: LD_INT 1
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: LIST
53621: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53622: LD_ADDR_VAR 0 19
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: LD_INT 3
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 3
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53662: LD_ADDR_VAR 0 20
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53703: LD_ADDR_VAR 0 21
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53747: LD_ADDR_VAR 0 22
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: LD_INT 3
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 3
53766: NEG
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 3
53778: NEG
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53793: LD_ADDR_VAR 0 23
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 3
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 4
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53837: LD_ADDR_VAR 0 24
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: LD_INT 1
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: LIST
53877: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53878: LD_ADDR_VAR 0 25
53882: PUSH
53883: LD_INT 3
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 4
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: PUSH
53906: LD_INT 4
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53918: LD_ADDR_VAR 0 26
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: LD_INT 3
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 4
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: LD_INT 3
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53959: LD_ADDR_VAR 0 27
53963: PUSH
53964: LD_INT 3
53966: NEG
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 3
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 4
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54003: LD_ADDR_VAR 0 28
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: NEG
54023: PUSH
54024: LD_INT 4
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 4
54034: NEG
54035: PUSH
54036: LD_INT 3
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: LIST
54048: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54049: LD_ADDR_VAR 0 29
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 4
54094: NEG
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 4
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 5
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 5
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 4
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: LD_INT 6
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 0
54170: PUSH
54171: LD_INT 6
54173: NEG
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 5
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54204: LD_ADDR_VAR 0 30
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 4
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 4
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 4
54273: PUSH
54274: LD_INT 1
54276: NEG
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 5
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 5
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 5
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 6
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 6
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54347: LD_ADDR_VAR 0 31
54351: PUSH
54352: LD_INT 3
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 4
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 4
54394: PUSH
54395: LD_INT 4
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: LD_INT 4
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 5
54414: PUSH
54415: LD_INT 4
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 5
54424: PUSH
54425: LD_INT 5
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 4
54434: PUSH
54435: LD_INT 5
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 6
54444: PUSH
54445: LD_INT 5
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 6
54454: PUSH
54455: LD_INT 6
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 5
54464: PUSH
54465: LD_INT 6
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54486: LD_ADDR_VAR 0 32
54490: PUSH
54491: LD_INT 1
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 3
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 4
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 4
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 3
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 5
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 5
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: NEG
54576: PUSH
54577: LD_INT 4
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 1
54586: PUSH
54587: LD_INT 6
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 6
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: LD_INT 5
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54629: LD_ADDR_VAR 0 33
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 3
54658: NEG
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: NEG
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 4
54681: NEG
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 4
54692: NEG
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 4
54704: NEG
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 5
54715: NEG
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 5
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 5
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 6
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 6
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54784: LD_ADDR_VAR 0 34
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: LD_INT 3
54795: NEG
54796: PUSH
54797: EMPTY
54798: LIST
54799: LIST
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: NEG
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 3
54827: NEG
54828: PUSH
54829: LD_INT 4
54831: NEG
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 4
54839: NEG
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 4
54851: NEG
54852: PUSH
54853: LD_INT 4
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 4
54863: NEG
54864: PUSH
54865: LD_INT 5
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 5
54875: NEG
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 5
54887: NEG
54888: PUSH
54889: LD_INT 5
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 5
54899: NEG
54900: PUSH
54901: LD_INT 6
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 6
54911: NEG
54912: PUSH
54913: LD_INT 5
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 6
54923: NEG
54924: PUSH
54925: LD_INT 6
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54947: LD_ADDR_VAR 0 41
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 3
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: LD_INT 2
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54991: LD_ADDR_VAR 0 42
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: LIST
55031: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55032: LD_ADDR_VAR 0 43
55036: PUSH
55037: LD_INT 2
55039: PUSH
55040: LD_INT 2
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 3
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: LD_INT 3
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55072: LD_ADDR_VAR 0 44
55076: PUSH
55077: LD_INT 0
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: LIST
55112: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55113: LD_ADDR_VAR 0 45
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: LD_INT 1
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55157: LD_ADDR_VAR 0 46
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: LD_INT 2
55192: NEG
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55203: LD_ADDR_VAR 0 47
55207: PUSH
55208: LD_INT 2
55210: NEG
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55236: LD_ADDR_VAR 0 48
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 2
55246: NEG
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55267: LD_ADDR_VAR 0 49
55271: PUSH
55272: LD_INT 3
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55296: LD_ADDR_VAR 0 50
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: LD_INT 3
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55325: LD_ADDR_VAR 0 51
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55356: LD_ADDR_VAR 0 52
55360: PUSH
55361: LD_INT 3
55363: NEG
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55389: LD_ADDR_VAR 0 53
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55433: LD_ADDR_VAR 0 54
55437: PUSH
55438: LD_INT 2
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 3
55451: PUSH
55452: LD_INT 0
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 3
55461: PUSH
55462: LD_INT 1
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: LIST
55473: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55474: LD_ADDR_VAR 0 55
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: LD_INT 3
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: LIST
55513: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55514: LD_ADDR_VAR 0 56
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: LD_INT 3
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 3
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: NEG
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: LIST
55554: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55555: LD_ADDR_VAR 0 57
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55599: LD_ADDR_VAR 0 58
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 3
55630: NEG
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55645: LD_ADDR_VAR 0 59
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55689: LD_ADDR_VAR 0 60
55693: PUSH
55694: LD_INT 1
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 2
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: LIST
55729: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55730: LD_ADDR_VAR 0 61
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: LIST
55769: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55770: LD_ADDR_VAR 0 62
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55811: LD_ADDR_VAR 0 63
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: LD_INT 2
55840: NEG
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55855: LD_ADDR_VAR 0 64
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 2
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: NEG
55875: PUSH
55876: LD_INT 1
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 2
55886: NEG
55887: PUSH
55888: LD_INT 2
55890: NEG
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: ST_TO_ADDR
// end ; 2 :
55901: GO 59167
55903: LD_INT 2
55905: DOUBLE
55906: EQUAL
55907: IFTRUE 55911
55909: GO 59166
55911: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55912: LD_ADDR_VAR 0 29
55916: PUSH
55917: LD_INT 4
55919: PUSH
55920: LD_INT 0
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 4
55929: PUSH
55930: LD_INT 1
55932: NEG
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 5
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 5
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: PUSH
55961: LD_INT 1
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 3
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 3
55991: PUSH
55992: LD_INT 2
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 5
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 4
56032: PUSH
56033: LD_INT 3
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 4
56042: PUSH
56043: LD_INT 4
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 3
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 2
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 4
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 4
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 4
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 3
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: LD_INT 4
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: LD_INT 5
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 5
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 4
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 1
56163: NEG
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: PUSH
56175: LD_INT 5
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: LD_INT 3
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 3
56195: NEG
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: NEG
56207: PUSH
56208: LD_INT 1
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: LD_INT 1
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 4
56251: NEG
56252: PUSH
56253: LD_INT 0
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 4
56262: NEG
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 4
56274: NEG
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 4
56297: NEG
56298: PUSH
56299: LD_INT 4
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 4
56309: NEG
56310: PUSH
56311: LD_INT 5
56313: NEG
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 3
56321: NEG
56322: PUSH
56323: LD_INT 4
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 3
56333: NEG
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 4
56345: NEG
56346: PUSH
56347: LD_INT 3
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 5
56357: NEG
56358: PUSH
56359: LD_INT 4
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 5
56369: NEG
56370: PUSH
56371: LD_INT 5
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 3
56381: NEG
56382: PUSH
56383: LD_INT 5
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 5
56393: NEG
56394: PUSH
56395: LD_INT 3
56397: NEG
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56450: LD_ADDR_VAR 0 30
56454: PUSH
56455: LD_INT 4
56457: PUSH
56458: LD_INT 4
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 4
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 5
56477: PUSH
56478: LD_INT 4
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 5
56487: PUSH
56488: LD_INT 5
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 4
56497: PUSH
56498: LD_INT 5
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: LD_INT 3
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 5
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 3
56537: PUSH
56538: LD_INT 5
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 3
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 3
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: LD_INT 4
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: LD_INT 4
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: NEG
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 2
56619: PUSH
56620: LD_INT 4
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 4
56640: NEG
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 3
56663: NEG
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 3
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 4
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 5
56696: NEG
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 5
56707: NEG
56708: PUSH
56709: LD_INT 1
56711: NEG
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 5
56719: NEG
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 3
56742: NEG
56743: PUSH
56744: LD_INT 3
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 3
56754: NEG
56755: PUSH
56756: LD_INT 4
56758: NEG
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 2
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 4
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 4
56814: NEG
56815: PUSH
56816: LD_INT 4
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 2
56826: NEG
56827: PUSH
56828: LD_INT 4
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: LD_INT 2
56842: NEG
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 4
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: LD_INT 5
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: LD_INT 4
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 3
56886: NEG
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: LD_INT 3
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 4
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 5
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: LD_INT 5
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56997: LD_ADDR_VAR 0 31
57001: PUSH
57002: LD_INT 0
57004: PUSH
57005: LD_INT 4
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 4
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: LD_INT 5
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: LD_INT 5
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: LD_INT 4
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 3
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 2
57076: PUSH
57077: LD_INT 5
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: LD_INT 3
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 3
57097: NEG
57098: PUSH
57099: LD_INT 0
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 3
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 2
57120: NEG
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 4
57153: NEG
57154: PUSH
57155: LD_INT 0
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 4
57164: NEG
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 4
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: NEG
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 4
57199: NEG
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 4
57211: NEG
57212: PUSH
57213: LD_INT 5
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 3
57223: NEG
57224: PUSH
57225: LD_INT 4
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 4
57247: NEG
57248: PUSH
57249: LD_INT 3
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 5
57259: NEG
57260: PUSH
57261: LD_INT 4
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 5
57271: NEG
57272: PUSH
57273: LD_INT 5
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 3
57283: NEG
57284: PUSH
57285: LD_INT 5
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 5
57295: NEG
57296: PUSH
57297: LD_INT 3
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 4
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 3
57332: NEG
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: NEG
57363: PUSH
57364: LD_INT 3
57366: NEG
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 4
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 2
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: NEG
57398: PUSH
57399: LD_INT 4
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 4
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 4
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 5
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 5
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 4
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 3
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 3
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 2
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 5
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57547: LD_ADDR_VAR 0 32
57551: PUSH
57552: LD_INT 4
57554: NEG
57555: PUSH
57556: LD_INT 0
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 4
57565: NEG
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: NEG
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 5
57610: NEG
57611: PUSH
57612: LD_INT 0
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 5
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 5
57633: NEG
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: LD_INT 4
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 3
57704: NEG
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 4
57716: NEG
57717: PUSH
57718: LD_INT 3
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 4
57728: NEG
57729: PUSH
57730: LD_INT 4
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 4
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 4
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 0
57764: PUSH
57765: LD_INT 4
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 5
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 4
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: LD_INT 3
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: LD_INT 3
57811: NEG
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: LD_INT 4
57823: NEG
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 5
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: NEG
57855: PUSH
57856: LD_INT 5
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: EMPTY
57871: LIST
57872: LIST
57873: PUSH
57874: LD_INT 3
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 4
57887: PUSH
57888: LD_INT 0
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 4
57897: PUSH
57898: LD_INT 1
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 3
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 2
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 4
57959: PUSH
57960: LD_INT 4
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 4
57969: PUSH
57970: LD_INT 3
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 5
57979: PUSH
57980: LD_INT 4
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 5
57989: PUSH
57990: LD_INT 5
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 4
57999: PUSH
58000: LD_INT 5
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: LD_INT 4
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: LD_INT 3
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 5
58029: PUSH
58030: LD_INT 3
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: PUSH
58040: LD_INT 5
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58094: LD_ADDR_VAR 0 33
58098: PUSH
58099: LD_INT 4
58101: NEG
58102: PUSH
58103: LD_INT 4
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 4
58113: NEG
58114: PUSH
58115: LD_INT 5
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: NEG
58126: PUSH
58127: LD_INT 4
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 3
58137: NEG
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 4
58149: NEG
58150: PUSH
58151: LD_INT 3
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 5
58161: NEG
58162: PUSH
58163: LD_INT 4
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 5
58173: NEG
58174: PUSH
58175: LD_INT 5
58177: NEG
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 3
58185: NEG
58186: PUSH
58187: LD_INT 5
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 5
58197: NEG
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 4
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 3
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: NEG
58277: PUSH
58278: LD_INT 4
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 4
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 4
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 5
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 5
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 4
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 3
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: LD_INT 1
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: LD_INT 2
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 5
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 2
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: LD_INT 3
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 4
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 4
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 4
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 3
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 4
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 5
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 5
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 4
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 5
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: LD_INT 3
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58632: LD_ADDR_VAR 0 34
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: LD_INT 4
58642: NEG
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: LD_INT 5
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 4
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 3
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 4
58698: NEG
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: NEG
58707: PUSH
58708: LD_INT 5
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 5
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: PUSH
58752: LD_INT 1
58754: NEG
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 4
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 3
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 1
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: LD_INT 2
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 4
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: LD_INT 4
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 4
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 5
58854: PUSH
58855: LD_INT 4
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 5
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: LD_INT 5
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 5
58904: PUSH
58905: LD_INT 3
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: LD_INT 5
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 3
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 2
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 3
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 4
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: LD_INT 4
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: LD_INT 4
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 4
59017: NEG
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 4
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: NEG
59041: PUSH
59042: LD_INT 0
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 4
59062: NEG
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 5
59073: NEG
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 5
59084: NEG
59085: PUSH
59086: LD_INT 1
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 5
59096: NEG
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 3
59108: NEG
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: ST_TO_ADDR
// end ; end ;
59164: GO 59167
59166: POP
// case btype of b_depot , b_warehouse :
59167: LD_VAR 0 1
59171: PUSH
59172: LD_INT 0
59174: DOUBLE
59175: EQUAL
59176: IFTRUE 59186
59178: LD_INT 1
59180: DOUBLE
59181: EQUAL
59182: IFTRUE 59186
59184: GO 59387
59186: POP
// case nation of nation_american :
59187: LD_VAR 0 5
59191: PUSH
59192: LD_INT 1
59194: DOUBLE
59195: EQUAL
59196: IFTRUE 59200
59198: GO 59256
59200: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59201: LD_ADDR_VAR 0 9
59205: PUSH
59206: LD_VAR 0 11
59210: PUSH
59211: LD_VAR 0 12
59215: PUSH
59216: LD_VAR 0 13
59220: PUSH
59221: LD_VAR 0 14
59225: PUSH
59226: LD_VAR 0 15
59230: PUSH
59231: LD_VAR 0 16
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: PUSH
59244: LD_VAR 0 4
59248: PUSH
59249: LD_INT 1
59251: PLUS
59252: ARRAY
59253: ST_TO_ADDR
59254: GO 59385
59256: LD_INT 2
59258: DOUBLE
59259: EQUAL
59260: IFTRUE 59264
59262: GO 59320
59264: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59265: LD_ADDR_VAR 0 9
59269: PUSH
59270: LD_VAR 0 17
59274: PUSH
59275: LD_VAR 0 18
59279: PUSH
59280: LD_VAR 0 19
59284: PUSH
59285: LD_VAR 0 20
59289: PUSH
59290: LD_VAR 0 21
59294: PUSH
59295: LD_VAR 0 22
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: PUSH
59308: LD_VAR 0 4
59312: PUSH
59313: LD_INT 1
59315: PLUS
59316: ARRAY
59317: ST_TO_ADDR
59318: GO 59385
59320: LD_INT 3
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59328
59326: GO 59384
59328: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59329: LD_ADDR_VAR 0 9
59333: PUSH
59334: LD_VAR 0 23
59338: PUSH
59339: LD_VAR 0 24
59343: PUSH
59344: LD_VAR 0 25
59348: PUSH
59349: LD_VAR 0 26
59353: PUSH
59354: LD_VAR 0 27
59358: PUSH
59359: LD_VAR 0 28
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: PUSH
59372: LD_VAR 0 4
59376: PUSH
59377: LD_INT 1
59379: PLUS
59380: ARRAY
59381: ST_TO_ADDR
59382: GO 59385
59384: POP
59385: GO 59940
59387: LD_INT 2
59389: DOUBLE
59390: EQUAL
59391: IFTRUE 59401
59393: LD_INT 3
59395: DOUBLE
59396: EQUAL
59397: IFTRUE 59401
59399: GO 59457
59401: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59402: LD_ADDR_VAR 0 9
59406: PUSH
59407: LD_VAR 0 29
59411: PUSH
59412: LD_VAR 0 30
59416: PUSH
59417: LD_VAR 0 31
59421: PUSH
59422: LD_VAR 0 32
59426: PUSH
59427: LD_VAR 0 33
59431: PUSH
59432: LD_VAR 0 34
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: PUSH
59445: LD_VAR 0 4
59449: PUSH
59450: LD_INT 1
59452: PLUS
59453: ARRAY
59454: ST_TO_ADDR
59455: GO 59940
59457: LD_INT 16
59459: DOUBLE
59460: EQUAL
59461: IFTRUE 59519
59463: LD_INT 17
59465: DOUBLE
59466: EQUAL
59467: IFTRUE 59519
59469: LD_INT 18
59471: DOUBLE
59472: EQUAL
59473: IFTRUE 59519
59475: LD_INT 19
59477: DOUBLE
59478: EQUAL
59479: IFTRUE 59519
59481: LD_INT 22
59483: DOUBLE
59484: EQUAL
59485: IFTRUE 59519
59487: LD_INT 20
59489: DOUBLE
59490: EQUAL
59491: IFTRUE 59519
59493: LD_INT 21
59495: DOUBLE
59496: EQUAL
59497: IFTRUE 59519
59499: LD_INT 23
59501: DOUBLE
59502: EQUAL
59503: IFTRUE 59519
59505: LD_INT 24
59507: DOUBLE
59508: EQUAL
59509: IFTRUE 59519
59511: LD_INT 25
59513: DOUBLE
59514: EQUAL
59515: IFTRUE 59519
59517: GO 59575
59519: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59520: LD_ADDR_VAR 0 9
59524: PUSH
59525: LD_VAR 0 35
59529: PUSH
59530: LD_VAR 0 36
59534: PUSH
59535: LD_VAR 0 37
59539: PUSH
59540: LD_VAR 0 38
59544: PUSH
59545: LD_VAR 0 39
59549: PUSH
59550: LD_VAR 0 40
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: PUSH
59563: LD_VAR 0 4
59567: PUSH
59568: LD_INT 1
59570: PLUS
59571: ARRAY
59572: ST_TO_ADDR
59573: GO 59940
59575: LD_INT 6
59577: DOUBLE
59578: EQUAL
59579: IFTRUE 59631
59581: LD_INT 7
59583: DOUBLE
59584: EQUAL
59585: IFTRUE 59631
59587: LD_INT 8
59589: DOUBLE
59590: EQUAL
59591: IFTRUE 59631
59593: LD_INT 13
59595: DOUBLE
59596: EQUAL
59597: IFTRUE 59631
59599: LD_INT 12
59601: DOUBLE
59602: EQUAL
59603: IFTRUE 59631
59605: LD_INT 15
59607: DOUBLE
59608: EQUAL
59609: IFTRUE 59631
59611: LD_INT 11
59613: DOUBLE
59614: EQUAL
59615: IFTRUE 59631
59617: LD_INT 14
59619: DOUBLE
59620: EQUAL
59621: IFTRUE 59631
59623: LD_INT 10
59625: DOUBLE
59626: EQUAL
59627: IFTRUE 59631
59629: GO 59687
59631: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59632: LD_ADDR_VAR 0 9
59636: PUSH
59637: LD_VAR 0 41
59641: PUSH
59642: LD_VAR 0 42
59646: PUSH
59647: LD_VAR 0 43
59651: PUSH
59652: LD_VAR 0 44
59656: PUSH
59657: LD_VAR 0 45
59661: PUSH
59662: LD_VAR 0 46
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: PUSH
59675: LD_VAR 0 4
59679: PUSH
59680: LD_INT 1
59682: PLUS
59683: ARRAY
59684: ST_TO_ADDR
59685: GO 59940
59687: LD_INT 36
59689: DOUBLE
59690: EQUAL
59691: IFTRUE 59695
59693: GO 59751
59695: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59696: LD_ADDR_VAR 0 9
59700: PUSH
59701: LD_VAR 0 47
59705: PUSH
59706: LD_VAR 0 48
59710: PUSH
59711: LD_VAR 0 49
59715: PUSH
59716: LD_VAR 0 50
59720: PUSH
59721: LD_VAR 0 51
59725: PUSH
59726: LD_VAR 0 52
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: PUSH
59739: LD_VAR 0 4
59743: PUSH
59744: LD_INT 1
59746: PLUS
59747: ARRAY
59748: ST_TO_ADDR
59749: GO 59940
59751: LD_INT 4
59753: DOUBLE
59754: EQUAL
59755: IFTRUE 59777
59757: LD_INT 5
59759: DOUBLE
59760: EQUAL
59761: IFTRUE 59777
59763: LD_INT 34
59765: DOUBLE
59766: EQUAL
59767: IFTRUE 59777
59769: LD_INT 37
59771: DOUBLE
59772: EQUAL
59773: IFTRUE 59777
59775: GO 59833
59777: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59778: LD_ADDR_VAR 0 9
59782: PUSH
59783: LD_VAR 0 53
59787: PUSH
59788: LD_VAR 0 54
59792: PUSH
59793: LD_VAR 0 55
59797: PUSH
59798: LD_VAR 0 56
59802: PUSH
59803: LD_VAR 0 57
59807: PUSH
59808: LD_VAR 0 58
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: PUSH
59821: LD_VAR 0 4
59825: PUSH
59826: LD_INT 1
59828: PLUS
59829: ARRAY
59830: ST_TO_ADDR
59831: GO 59940
59833: LD_INT 31
59835: DOUBLE
59836: EQUAL
59837: IFTRUE 59883
59839: LD_INT 32
59841: DOUBLE
59842: EQUAL
59843: IFTRUE 59883
59845: LD_INT 33
59847: DOUBLE
59848: EQUAL
59849: IFTRUE 59883
59851: LD_INT 27
59853: DOUBLE
59854: EQUAL
59855: IFTRUE 59883
59857: LD_INT 26
59859: DOUBLE
59860: EQUAL
59861: IFTRUE 59883
59863: LD_INT 28
59865: DOUBLE
59866: EQUAL
59867: IFTRUE 59883
59869: LD_INT 29
59871: DOUBLE
59872: EQUAL
59873: IFTRUE 59883
59875: LD_INT 30
59877: DOUBLE
59878: EQUAL
59879: IFTRUE 59883
59881: GO 59939
59883: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59884: LD_ADDR_VAR 0 9
59888: PUSH
59889: LD_VAR 0 59
59893: PUSH
59894: LD_VAR 0 60
59898: PUSH
59899: LD_VAR 0 61
59903: PUSH
59904: LD_VAR 0 62
59908: PUSH
59909: LD_VAR 0 63
59913: PUSH
59914: LD_VAR 0 64
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: PUSH
59927: LD_VAR 0 4
59931: PUSH
59932: LD_INT 1
59934: PLUS
59935: ARRAY
59936: ST_TO_ADDR
59937: GO 59940
59939: POP
// temp_list2 = [ ] ;
59940: LD_ADDR_VAR 0 10
59944: PUSH
59945: EMPTY
59946: ST_TO_ADDR
// for i in temp_list do
59947: LD_ADDR_VAR 0 8
59951: PUSH
59952: LD_VAR 0 9
59956: PUSH
59957: FOR_IN
59958: IFFALSE 60010
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59960: LD_ADDR_VAR 0 10
59964: PUSH
59965: LD_VAR 0 10
59969: PUSH
59970: LD_VAR 0 8
59974: PUSH
59975: LD_INT 1
59977: ARRAY
59978: PUSH
59979: LD_VAR 0 2
59983: PLUS
59984: PUSH
59985: LD_VAR 0 8
59989: PUSH
59990: LD_INT 2
59992: ARRAY
59993: PUSH
59994: LD_VAR 0 3
59998: PLUS
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: EMPTY
60005: LIST
60006: ADD
60007: ST_TO_ADDR
60008: GO 59957
60010: POP
60011: POP
// result = temp_list2 ;
60012: LD_ADDR_VAR 0 7
60016: PUSH
60017: LD_VAR 0 10
60021: ST_TO_ADDR
// end ;
60022: LD_VAR 0 7
60026: RET
// export function EnemyInRange ( unit , dist ) ; begin
60027: LD_INT 0
60029: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60030: LD_ADDR_VAR 0 3
60034: PUSH
60035: LD_VAR 0 1
60039: PPUSH
60040: CALL_OW 255
60044: PPUSH
60045: LD_VAR 0 1
60049: PPUSH
60050: CALL_OW 250
60054: PPUSH
60055: LD_VAR 0 1
60059: PPUSH
60060: CALL_OW 251
60064: PPUSH
60065: LD_VAR 0 2
60069: PPUSH
60070: CALL 33429 0 4
60074: PUSH
60075: LD_INT 4
60077: ARRAY
60078: ST_TO_ADDR
// end ;
60079: LD_VAR 0 3
60083: RET
// export function PlayerSeeMe ( unit ) ; begin
60084: LD_INT 0
60086: PPUSH
// result := See ( your_side , unit ) ;
60087: LD_ADDR_VAR 0 2
60091: PUSH
60092: LD_OWVAR 2
60096: PPUSH
60097: LD_VAR 0 1
60101: PPUSH
60102: CALL_OW 292
60106: ST_TO_ADDR
// end ;
60107: LD_VAR 0 2
60111: RET
// export function ReverseDir ( unit ) ; begin
60112: LD_INT 0
60114: PPUSH
// if not unit then
60115: LD_VAR 0 1
60119: NOT
60120: IFFALSE 60124
// exit ;
60122: GO 60147
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60124: LD_ADDR_VAR 0 2
60128: PUSH
60129: LD_VAR 0 1
60133: PPUSH
60134: CALL_OW 254
60138: PUSH
60139: LD_INT 3
60141: PLUS
60142: PUSH
60143: LD_INT 6
60145: MOD
60146: ST_TO_ADDR
// end ;
60147: LD_VAR 0 2
60151: RET
// export function ReverseArray ( array ) ; var i ; begin
60152: LD_INT 0
60154: PPUSH
60155: PPUSH
// if not array then
60156: LD_VAR 0 1
60160: NOT
60161: IFFALSE 60165
// exit ;
60163: GO 60220
// result := [ ] ;
60165: LD_ADDR_VAR 0 2
60169: PUSH
60170: EMPTY
60171: ST_TO_ADDR
// for i := array downto 1 do
60172: LD_ADDR_VAR 0 3
60176: PUSH
60177: DOUBLE
60178: LD_VAR 0 1
60182: INC
60183: ST_TO_ADDR
60184: LD_INT 1
60186: PUSH
60187: FOR_DOWNTO
60188: IFFALSE 60218
// result := Join ( result , array [ i ] ) ;
60190: LD_ADDR_VAR 0 2
60194: PUSH
60195: LD_VAR 0 2
60199: PPUSH
60200: LD_VAR 0 1
60204: PUSH
60205: LD_VAR 0 3
60209: ARRAY
60210: PPUSH
60211: CALL 64845 0 2
60215: ST_TO_ADDR
60216: GO 60187
60218: POP
60219: POP
// end ;
60220: LD_VAR 0 2
60224: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60225: LD_INT 0
60227: PPUSH
60228: PPUSH
60229: PPUSH
60230: PPUSH
60231: PPUSH
60232: PPUSH
// if not unit or not hexes then
60233: LD_VAR 0 1
60237: NOT
60238: PUSH
60239: LD_VAR 0 2
60243: NOT
60244: OR
60245: IFFALSE 60249
// exit ;
60247: GO 60372
// dist := 9999 ;
60249: LD_ADDR_VAR 0 5
60253: PUSH
60254: LD_INT 9999
60256: ST_TO_ADDR
// for i = 1 to hexes do
60257: LD_ADDR_VAR 0 4
60261: PUSH
60262: DOUBLE
60263: LD_INT 1
60265: DEC
60266: ST_TO_ADDR
60267: LD_VAR 0 2
60271: PUSH
60272: FOR_TO
60273: IFFALSE 60360
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60275: LD_ADDR_VAR 0 6
60279: PUSH
60280: LD_VAR 0 1
60284: PPUSH
60285: LD_VAR 0 2
60289: PUSH
60290: LD_VAR 0 4
60294: ARRAY
60295: PUSH
60296: LD_INT 1
60298: ARRAY
60299: PPUSH
60300: LD_VAR 0 2
60304: PUSH
60305: LD_VAR 0 4
60309: ARRAY
60310: PUSH
60311: LD_INT 2
60313: ARRAY
60314: PPUSH
60315: CALL_OW 297
60319: ST_TO_ADDR
// if tdist < dist then
60320: LD_VAR 0 6
60324: PUSH
60325: LD_VAR 0 5
60329: LESS
60330: IFFALSE 60358
// begin hex := hexes [ i ] ;
60332: LD_ADDR_VAR 0 8
60336: PUSH
60337: LD_VAR 0 2
60341: PUSH
60342: LD_VAR 0 4
60346: ARRAY
60347: ST_TO_ADDR
// dist := tdist ;
60348: LD_ADDR_VAR 0 5
60352: PUSH
60353: LD_VAR 0 6
60357: ST_TO_ADDR
// end ; end ;
60358: GO 60272
60360: POP
60361: POP
// result := hex ;
60362: LD_ADDR_VAR 0 3
60366: PUSH
60367: LD_VAR 0 8
60371: ST_TO_ADDR
// end ;
60372: LD_VAR 0 3
60376: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60377: LD_INT 0
60379: PPUSH
60380: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60381: LD_VAR 0 1
60385: NOT
60386: PUSH
60387: LD_VAR 0 1
60391: PUSH
60392: LD_INT 21
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 23
60404: PUSH
60405: LD_INT 2
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PPUSH
60416: CALL_OW 69
60420: IN
60421: NOT
60422: OR
60423: IFFALSE 60427
// exit ;
60425: GO 60474
// for i = 1 to 3 do
60427: LD_ADDR_VAR 0 3
60431: PUSH
60432: DOUBLE
60433: LD_INT 1
60435: DEC
60436: ST_TO_ADDR
60437: LD_INT 3
60439: PUSH
60440: FOR_TO
60441: IFFALSE 60472
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60443: LD_VAR 0 1
60447: PPUSH
60448: CALL_OW 250
60452: PPUSH
60453: LD_VAR 0 1
60457: PPUSH
60458: CALL_OW 251
60462: PPUSH
60463: LD_INT 1
60465: PPUSH
60466: CALL_OW 453
60470: GO 60440
60472: POP
60473: POP
// end ;
60474: LD_VAR 0 2
60478: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60479: LD_INT 0
60481: PPUSH
60482: PPUSH
60483: PPUSH
60484: PPUSH
60485: PPUSH
60486: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60487: LD_VAR 0 1
60491: NOT
60492: PUSH
60493: LD_VAR 0 2
60497: NOT
60498: OR
60499: PUSH
60500: LD_VAR 0 1
60504: PPUSH
60505: CALL_OW 314
60509: OR
60510: IFFALSE 60514
// exit ;
60512: GO 60955
// x := GetX ( enemy_unit ) ;
60514: LD_ADDR_VAR 0 7
60518: PUSH
60519: LD_VAR 0 2
60523: PPUSH
60524: CALL_OW 250
60528: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60529: LD_ADDR_VAR 0 8
60533: PUSH
60534: LD_VAR 0 2
60538: PPUSH
60539: CALL_OW 251
60543: ST_TO_ADDR
// if not x or not y then
60544: LD_VAR 0 7
60548: NOT
60549: PUSH
60550: LD_VAR 0 8
60554: NOT
60555: OR
60556: IFFALSE 60560
// exit ;
60558: GO 60955
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60560: LD_ADDR_VAR 0 6
60564: PUSH
60565: LD_VAR 0 7
60569: PPUSH
60570: LD_INT 0
60572: PPUSH
60573: LD_INT 4
60575: PPUSH
60576: CALL_OW 272
60580: PUSH
60581: LD_VAR 0 8
60585: PPUSH
60586: LD_INT 0
60588: PPUSH
60589: LD_INT 4
60591: PPUSH
60592: CALL_OW 273
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_VAR 0 7
60605: PPUSH
60606: LD_INT 1
60608: PPUSH
60609: LD_INT 4
60611: PPUSH
60612: CALL_OW 272
60616: PUSH
60617: LD_VAR 0 8
60621: PPUSH
60622: LD_INT 1
60624: PPUSH
60625: LD_INT 4
60627: PPUSH
60628: CALL_OW 273
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_VAR 0 7
60641: PPUSH
60642: LD_INT 2
60644: PPUSH
60645: LD_INT 4
60647: PPUSH
60648: CALL_OW 272
60652: PUSH
60653: LD_VAR 0 8
60657: PPUSH
60658: LD_INT 2
60660: PPUSH
60661: LD_INT 4
60663: PPUSH
60664: CALL_OW 273
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_VAR 0 7
60677: PPUSH
60678: LD_INT 3
60680: PPUSH
60681: LD_INT 4
60683: PPUSH
60684: CALL_OW 272
60688: PUSH
60689: LD_VAR 0 8
60693: PPUSH
60694: LD_INT 3
60696: PPUSH
60697: LD_INT 4
60699: PPUSH
60700: CALL_OW 273
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_VAR 0 7
60713: PPUSH
60714: LD_INT 4
60716: PPUSH
60717: LD_INT 4
60719: PPUSH
60720: CALL_OW 272
60724: PUSH
60725: LD_VAR 0 8
60729: PPUSH
60730: LD_INT 4
60732: PPUSH
60733: LD_INT 4
60735: PPUSH
60736: CALL_OW 273
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_VAR 0 7
60749: PPUSH
60750: LD_INT 5
60752: PPUSH
60753: LD_INT 4
60755: PPUSH
60756: CALL_OW 272
60760: PUSH
60761: LD_VAR 0 8
60765: PPUSH
60766: LD_INT 5
60768: PPUSH
60769: LD_INT 4
60771: PPUSH
60772: CALL_OW 273
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: ST_TO_ADDR
// for i = tmp downto 1 do
60789: LD_ADDR_VAR 0 4
60793: PUSH
60794: DOUBLE
60795: LD_VAR 0 6
60799: INC
60800: ST_TO_ADDR
60801: LD_INT 1
60803: PUSH
60804: FOR_DOWNTO
60805: IFFALSE 60906
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60807: LD_VAR 0 6
60811: PUSH
60812: LD_VAR 0 4
60816: ARRAY
60817: PUSH
60818: LD_INT 1
60820: ARRAY
60821: PPUSH
60822: LD_VAR 0 6
60826: PUSH
60827: LD_VAR 0 4
60831: ARRAY
60832: PUSH
60833: LD_INT 2
60835: ARRAY
60836: PPUSH
60837: CALL_OW 488
60841: NOT
60842: PUSH
60843: LD_VAR 0 6
60847: PUSH
60848: LD_VAR 0 4
60852: ARRAY
60853: PUSH
60854: LD_INT 1
60856: ARRAY
60857: PPUSH
60858: LD_VAR 0 6
60862: PUSH
60863: LD_VAR 0 4
60867: ARRAY
60868: PUSH
60869: LD_INT 2
60871: ARRAY
60872: PPUSH
60873: CALL_OW 428
60877: PUSH
60878: LD_INT 0
60880: NONEQUAL
60881: OR
60882: IFFALSE 60904
// tmp := Delete ( tmp , i ) ;
60884: LD_ADDR_VAR 0 6
60888: PUSH
60889: LD_VAR 0 6
60893: PPUSH
60894: LD_VAR 0 4
60898: PPUSH
60899: CALL_OW 3
60903: ST_TO_ADDR
60904: GO 60804
60906: POP
60907: POP
// j := GetClosestHex ( unit , tmp ) ;
60908: LD_ADDR_VAR 0 5
60912: PUSH
60913: LD_VAR 0 1
60917: PPUSH
60918: LD_VAR 0 6
60922: PPUSH
60923: CALL 60225 0 2
60927: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60928: LD_VAR 0 1
60932: PPUSH
60933: LD_VAR 0 5
60937: PUSH
60938: LD_INT 1
60940: ARRAY
60941: PPUSH
60942: LD_VAR 0 5
60946: PUSH
60947: LD_INT 2
60949: ARRAY
60950: PPUSH
60951: CALL_OW 111
// end ;
60955: LD_VAR 0 3
60959: RET
// export function PrepareApemanSoldier ( ) ; begin
60960: LD_INT 0
60962: PPUSH
// uc_nation := 0 ;
60963: LD_ADDR_OWVAR 21
60967: PUSH
60968: LD_INT 0
60970: ST_TO_ADDR
// hc_sex := sex_male ;
60971: LD_ADDR_OWVAR 27
60975: PUSH
60976: LD_INT 1
60978: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60979: LD_ADDR_OWVAR 28
60983: PUSH
60984: LD_INT 15
60986: ST_TO_ADDR
// hc_gallery :=  ;
60987: LD_ADDR_OWVAR 33
60991: PUSH
60992: LD_STRING 
60994: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60995: LD_ADDR_OWVAR 31
60999: PUSH
61000: LD_INT 0
61002: PPUSH
61003: LD_INT 3
61005: PPUSH
61006: CALL_OW 12
61010: PUSH
61011: LD_INT 0
61013: PPUSH
61014: LD_INT 3
61016: PPUSH
61017: CALL_OW 12
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: ST_TO_ADDR
// end ;
61034: LD_VAR 0 1
61038: RET
// export function PrepareApemanEngineer ( ) ; begin
61039: LD_INT 0
61041: PPUSH
// uc_nation := 0 ;
61042: LD_ADDR_OWVAR 21
61046: PUSH
61047: LD_INT 0
61049: ST_TO_ADDR
// hc_sex := sex_male ;
61050: LD_ADDR_OWVAR 27
61054: PUSH
61055: LD_INT 1
61057: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61058: LD_ADDR_OWVAR 28
61062: PUSH
61063: LD_INT 16
61065: ST_TO_ADDR
// hc_gallery :=  ;
61066: LD_ADDR_OWVAR 33
61070: PUSH
61071: LD_STRING 
61073: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61074: LD_ADDR_OWVAR 31
61078: PUSH
61079: LD_INT 0
61081: PPUSH
61082: LD_INT 3
61084: PPUSH
61085: CALL_OW 12
61089: PUSH
61090: LD_INT 0
61092: PPUSH
61093: LD_INT 3
61095: PPUSH
61096: CALL_OW 12
61100: PUSH
61101: LD_INT 0
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: ST_TO_ADDR
// end ;
61113: LD_VAR 0 1
61117: RET
// export function PrepareApeman ( agressivity ) ; begin
61118: LD_INT 0
61120: PPUSH
// uc_side := 0 ;
61121: LD_ADDR_OWVAR 20
61125: PUSH
61126: LD_INT 0
61128: ST_TO_ADDR
// uc_nation := 0 ;
61129: LD_ADDR_OWVAR 21
61133: PUSH
61134: LD_INT 0
61136: ST_TO_ADDR
// hc_sex := sex_male ;
61137: LD_ADDR_OWVAR 27
61141: PUSH
61142: LD_INT 1
61144: ST_TO_ADDR
// hc_class := class_apeman ;
61145: LD_ADDR_OWVAR 28
61149: PUSH
61150: LD_INT 12
61152: ST_TO_ADDR
// hc_gallery :=  ;
61153: LD_ADDR_OWVAR 33
61157: PUSH
61158: LD_STRING 
61160: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61161: LD_ADDR_OWVAR 35
61165: PUSH
61166: LD_VAR 0 1
61170: NEG
61171: PPUSH
61172: LD_VAR 0 1
61176: PPUSH
61177: CALL_OW 12
61181: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61182: LD_ADDR_OWVAR 31
61186: PUSH
61187: LD_INT 0
61189: PPUSH
61190: LD_INT 3
61192: PPUSH
61193: CALL_OW 12
61197: PUSH
61198: LD_INT 0
61200: PPUSH
61201: LD_INT 3
61203: PPUSH
61204: CALL_OW 12
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: ST_TO_ADDR
// end ;
61221: LD_VAR 0 2
61225: RET
// export function PrepareTiger ( agressivity ) ; begin
61226: LD_INT 0
61228: PPUSH
// uc_side := 0 ;
61229: LD_ADDR_OWVAR 20
61233: PUSH
61234: LD_INT 0
61236: ST_TO_ADDR
// uc_nation := 0 ;
61237: LD_ADDR_OWVAR 21
61241: PUSH
61242: LD_INT 0
61244: ST_TO_ADDR
// hc_class := class_tiger ;
61245: LD_ADDR_OWVAR 28
61249: PUSH
61250: LD_INT 14
61252: ST_TO_ADDR
// hc_gallery :=  ;
61253: LD_ADDR_OWVAR 33
61257: PUSH
61258: LD_STRING 
61260: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61261: LD_ADDR_OWVAR 35
61265: PUSH
61266: LD_VAR 0 1
61270: NEG
61271: PPUSH
61272: LD_VAR 0 1
61276: PPUSH
61277: CALL_OW 12
61281: ST_TO_ADDR
// end ;
61282: LD_VAR 0 2
61286: RET
// export function PrepareEnchidna ( ) ; begin
61287: LD_INT 0
61289: PPUSH
// uc_side := 0 ;
61290: LD_ADDR_OWVAR 20
61294: PUSH
61295: LD_INT 0
61297: ST_TO_ADDR
// uc_nation := 0 ;
61298: LD_ADDR_OWVAR 21
61302: PUSH
61303: LD_INT 0
61305: ST_TO_ADDR
// hc_class := class_baggie ;
61306: LD_ADDR_OWVAR 28
61310: PUSH
61311: LD_INT 13
61313: ST_TO_ADDR
// hc_gallery :=  ;
61314: LD_ADDR_OWVAR 33
61318: PUSH
61319: LD_STRING 
61321: ST_TO_ADDR
// end ;
61322: LD_VAR 0 1
61326: RET
// export function PrepareFrog ( ) ; begin
61327: LD_INT 0
61329: PPUSH
// uc_side := 0 ;
61330: LD_ADDR_OWVAR 20
61334: PUSH
61335: LD_INT 0
61337: ST_TO_ADDR
// uc_nation := 0 ;
61338: LD_ADDR_OWVAR 21
61342: PUSH
61343: LD_INT 0
61345: ST_TO_ADDR
// hc_class := class_frog ;
61346: LD_ADDR_OWVAR 28
61350: PUSH
61351: LD_INT 19
61353: ST_TO_ADDR
// hc_gallery :=  ;
61354: LD_ADDR_OWVAR 33
61358: PUSH
61359: LD_STRING 
61361: ST_TO_ADDR
// end ;
61362: LD_VAR 0 1
61366: RET
// export function PrepareFish ( ) ; begin
61367: LD_INT 0
61369: PPUSH
// uc_side := 0 ;
61370: LD_ADDR_OWVAR 20
61374: PUSH
61375: LD_INT 0
61377: ST_TO_ADDR
// uc_nation := 0 ;
61378: LD_ADDR_OWVAR 21
61382: PUSH
61383: LD_INT 0
61385: ST_TO_ADDR
// hc_class := class_fish ;
61386: LD_ADDR_OWVAR 28
61390: PUSH
61391: LD_INT 20
61393: ST_TO_ADDR
// hc_gallery :=  ;
61394: LD_ADDR_OWVAR 33
61398: PUSH
61399: LD_STRING 
61401: ST_TO_ADDR
// end ;
61402: LD_VAR 0 1
61406: RET
// export function PrepareBird ( ) ; begin
61407: LD_INT 0
61409: PPUSH
// uc_side := 0 ;
61410: LD_ADDR_OWVAR 20
61414: PUSH
61415: LD_INT 0
61417: ST_TO_ADDR
// uc_nation := 0 ;
61418: LD_ADDR_OWVAR 21
61422: PUSH
61423: LD_INT 0
61425: ST_TO_ADDR
// hc_class := class_phororhacos ;
61426: LD_ADDR_OWVAR 28
61430: PUSH
61431: LD_INT 18
61433: ST_TO_ADDR
// hc_gallery :=  ;
61434: LD_ADDR_OWVAR 33
61438: PUSH
61439: LD_STRING 
61441: ST_TO_ADDR
// end ;
61442: LD_VAR 0 1
61446: RET
// export function PrepareHorse ( ) ; begin
61447: LD_INT 0
61449: PPUSH
// uc_side := 0 ;
61450: LD_ADDR_OWVAR 20
61454: PUSH
61455: LD_INT 0
61457: ST_TO_ADDR
// uc_nation := 0 ;
61458: LD_ADDR_OWVAR 21
61462: PUSH
61463: LD_INT 0
61465: ST_TO_ADDR
// hc_class := class_horse ;
61466: LD_ADDR_OWVAR 28
61470: PUSH
61471: LD_INT 21
61473: ST_TO_ADDR
// hc_gallery :=  ;
61474: LD_ADDR_OWVAR 33
61478: PUSH
61479: LD_STRING 
61481: ST_TO_ADDR
// end ;
61482: LD_VAR 0 1
61486: RET
// export function PrepareMastodont ( ) ; begin
61487: LD_INT 0
61489: PPUSH
// uc_side := 0 ;
61490: LD_ADDR_OWVAR 20
61494: PUSH
61495: LD_INT 0
61497: ST_TO_ADDR
// uc_nation := 0 ;
61498: LD_ADDR_OWVAR 21
61502: PUSH
61503: LD_INT 0
61505: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61506: LD_ADDR_OWVAR 37
61510: PUSH
61511: LD_INT 31
61513: ST_TO_ADDR
// vc_control := control_rider ;
61514: LD_ADDR_OWVAR 38
61518: PUSH
61519: LD_INT 4
61521: ST_TO_ADDR
// end ;
61522: LD_VAR 0 1
61526: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61527: LD_INT 0
61529: PPUSH
61530: PPUSH
61531: PPUSH
// uc_side = 0 ;
61532: LD_ADDR_OWVAR 20
61536: PUSH
61537: LD_INT 0
61539: ST_TO_ADDR
// uc_nation = 0 ;
61540: LD_ADDR_OWVAR 21
61544: PUSH
61545: LD_INT 0
61547: ST_TO_ADDR
// InitHc_All ( ) ;
61548: CALL_OW 584
// InitVc ;
61552: CALL_OW 20
// if mastodonts then
61556: LD_VAR 0 6
61560: IFFALSE 61627
// for i = 1 to mastodonts do
61562: LD_ADDR_VAR 0 11
61566: PUSH
61567: DOUBLE
61568: LD_INT 1
61570: DEC
61571: ST_TO_ADDR
61572: LD_VAR 0 6
61576: PUSH
61577: FOR_TO
61578: IFFALSE 61625
// begin vc_chassis := 31 ;
61580: LD_ADDR_OWVAR 37
61584: PUSH
61585: LD_INT 31
61587: ST_TO_ADDR
// vc_control := control_rider ;
61588: LD_ADDR_OWVAR 38
61592: PUSH
61593: LD_INT 4
61595: ST_TO_ADDR
// animal := CreateVehicle ;
61596: LD_ADDR_VAR 0 12
61600: PUSH
61601: CALL_OW 45
61605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61606: LD_VAR 0 12
61610: PPUSH
61611: LD_VAR 0 8
61615: PPUSH
61616: LD_INT 0
61618: PPUSH
61619: CALL 63762 0 3
// end ;
61623: GO 61577
61625: POP
61626: POP
// if horses then
61627: LD_VAR 0 5
61631: IFFALSE 61698
// for i = 1 to horses do
61633: LD_ADDR_VAR 0 11
61637: PUSH
61638: DOUBLE
61639: LD_INT 1
61641: DEC
61642: ST_TO_ADDR
61643: LD_VAR 0 5
61647: PUSH
61648: FOR_TO
61649: IFFALSE 61696
// begin hc_class := 21 ;
61651: LD_ADDR_OWVAR 28
61655: PUSH
61656: LD_INT 21
61658: ST_TO_ADDR
// hc_gallery :=  ;
61659: LD_ADDR_OWVAR 33
61663: PUSH
61664: LD_STRING 
61666: ST_TO_ADDR
// animal := CreateHuman ;
61667: LD_ADDR_VAR 0 12
61671: PUSH
61672: CALL_OW 44
61676: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61677: LD_VAR 0 12
61681: PPUSH
61682: LD_VAR 0 8
61686: PPUSH
61687: LD_INT 0
61689: PPUSH
61690: CALL 63762 0 3
// end ;
61694: GO 61648
61696: POP
61697: POP
// if birds then
61698: LD_VAR 0 1
61702: IFFALSE 61769
// for i = 1 to birds do
61704: LD_ADDR_VAR 0 11
61708: PUSH
61709: DOUBLE
61710: LD_INT 1
61712: DEC
61713: ST_TO_ADDR
61714: LD_VAR 0 1
61718: PUSH
61719: FOR_TO
61720: IFFALSE 61767
// begin hc_class = 18 ;
61722: LD_ADDR_OWVAR 28
61726: PUSH
61727: LD_INT 18
61729: ST_TO_ADDR
// hc_gallery =  ;
61730: LD_ADDR_OWVAR 33
61734: PUSH
61735: LD_STRING 
61737: ST_TO_ADDR
// animal := CreateHuman ;
61738: LD_ADDR_VAR 0 12
61742: PUSH
61743: CALL_OW 44
61747: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61748: LD_VAR 0 12
61752: PPUSH
61753: LD_VAR 0 8
61757: PPUSH
61758: LD_INT 0
61760: PPUSH
61761: CALL 63762 0 3
// end ;
61765: GO 61719
61767: POP
61768: POP
// if tigers then
61769: LD_VAR 0 2
61773: IFFALSE 61857
// for i = 1 to tigers do
61775: LD_ADDR_VAR 0 11
61779: PUSH
61780: DOUBLE
61781: LD_INT 1
61783: DEC
61784: ST_TO_ADDR
61785: LD_VAR 0 2
61789: PUSH
61790: FOR_TO
61791: IFFALSE 61855
// begin hc_class = class_tiger ;
61793: LD_ADDR_OWVAR 28
61797: PUSH
61798: LD_INT 14
61800: ST_TO_ADDR
// hc_gallery =  ;
61801: LD_ADDR_OWVAR 33
61805: PUSH
61806: LD_STRING 
61808: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61809: LD_ADDR_OWVAR 35
61813: PUSH
61814: LD_INT 7
61816: NEG
61817: PPUSH
61818: LD_INT 7
61820: PPUSH
61821: CALL_OW 12
61825: ST_TO_ADDR
// animal := CreateHuman ;
61826: LD_ADDR_VAR 0 12
61830: PUSH
61831: CALL_OW 44
61835: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61836: LD_VAR 0 12
61840: PPUSH
61841: LD_VAR 0 8
61845: PPUSH
61846: LD_INT 0
61848: PPUSH
61849: CALL 63762 0 3
// end ;
61853: GO 61790
61855: POP
61856: POP
// if apemans then
61857: LD_VAR 0 3
61861: IFFALSE 61984
// for i = 1 to apemans do
61863: LD_ADDR_VAR 0 11
61867: PUSH
61868: DOUBLE
61869: LD_INT 1
61871: DEC
61872: ST_TO_ADDR
61873: LD_VAR 0 3
61877: PUSH
61878: FOR_TO
61879: IFFALSE 61982
// begin hc_class = class_apeman ;
61881: LD_ADDR_OWVAR 28
61885: PUSH
61886: LD_INT 12
61888: ST_TO_ADDR
// hc_gallery =  ;
61889: LD_ADDR_OWVAR 33
61893: PUSH
61894: LD_STRING 
61896: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61897: LD_ADDR_OWVAR 35
61901: PUSH
61902: LD_INT 2
61904: NEG
61905: PPUSH
61906: LD_INT 2
61908: PPUSH
61909: CALL_OW 12
61913: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61914: LD_ADDR_OWVAR 31
61918: PUSH
61919: LD_INT 1
61921: PPUSH
61922: LD_INT 3
61924: PPUSH
61925: CALL_OW 12
61929: PUSH
61930: LD_INT 1
61932: PPUSH
61933: LD_INT 3
61935: PPUSH
61936: CALL_OW 12
61940: PUSH
61941: LD_INT 0
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// animal := CreateHuman ;
61953: LD_ADDR_VAR 0 12
61957: PUSH
61958: CALL_OW 44
61962: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61963: LD_VAR 0 12
61967: PPUSH
61968: LD_VAR 0 8
61972: PPUSH
61973: LD_INT 0
61975: PPUSH
61976: CALL 63762 0 3
// end ;
61980: GO 61878
61982: POP
61983: POP
// if enchidnas then
61984: LD_VAR 0 4
61988: IFFALSE 62055
// for i = 1 to enchidnas do
61990: LD_ADDR_VAR 0 11
61994: PUSH
61995: DOUBLE
61996: LD_INT 1
61998: DEC
61999: ST_TO_ADDR
62000: LD_VAR 0 4
62004: PUSH
62005: FOR_TO
62006: IFFALSE 62053
// begin hc_class = 13 ;
62008: LD_ADDR_OWVAR 28
62012: PUSH
62013: LD_INT 13
62015: ST_TO_ADDR
// hc_gallery =  ;
62016: LD_ADDR_OWVAR 33
62020: PUSH
62021: LD_STRING 
62023: ST_TO_ADDR
// animal := CreateHuman ;
62024: LD_ADDR_VAR 0 12
62028: PUSH
62029: CALL_OW 44
62033: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62034: LD_VAR 0 12
62038: PPUSH
62039: LD_VAR 0 8
62043: PPUSH
62044: LD_INT 0
62046: PPUSH
62047: CALL 63762 0 3
// end ;
62051: GO 62005
62053: POP
62054: POP
// if fishes then
62055: LD_VAR 0 7
62059: IFFALSE 62126
// for i = 1 to fishes do
62061: LD_ADDR_VAR 0 11
62065: PUSH
62066: DOUBLE
62067: LD_INT 1
62069: DEC
62070: ST_TO_ADDR
62071: LD_VAR 0 7
62075: PUSH
62076: FOR_TO
62077: IFFALSE 62124
// begin hc_class = 20 ;
62079: LD_ADDR_OWVAR 28
62083: PUSH
62084: LD_INT 20
62086: ST_TO_ADDR
// hc_gallery =  ;
62087: LD_ADDR_OWVAR 33
62091: PUSH
62092: LD_STRING 
62094: ST_TO_ADDR
// animal := CreateHuman ;
62095: LD_ADDR_VAR 0 12
62099: PUSH
62100: CALL_OW 44
62104: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62105: LD_VAR 0 12
62109: PPUSH
62110: LD_VAR 0 9
62114: PPUSH
62115: LD_INT 0
62117: PPUSH
62118: CALL 63762 0 3
// end ;
62122: GO 62076
62124: POP
62125: POP
// end ;
62126: LD_VAR 0 10
62130: RET
// export function WantHeal ( sci , unit ) ; begin
62131: LD_INT 0
62133: PPUSH
// if GetTaskList ( sci ) > 0 then
62134: LD_VAR 0 1
62138: PPUSH
62139: CALL_OW 437
62143: PUSH
62144: LD_INT 0
62146: GREATER
62147: IFFALSE 62217
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62149: LD_VAR 0 1
62153: PPUSH
62154: CALL_OW 437
62158: PUSH
62159: LD_INT 1
62161: ARRAY
62162: PUSH
62163: LD_INT 1
62165: ARRAY
62166: PUSH
62167: LD_STRING l
62169: EQUAL
62170: PUSH
62171: LD_VAR 0 1
62175: PPUSH
62176: CALL_OW 437
62180: PUSH
62181: LD_INT 1
62183: ARRAY
62184: PUSH
62185: LD_INT 4
62187: ARRAY
62188: PUSH
62189: LD_VAR 0 2
62193: EQUAL
62194: AND
62195: IFFALSE 62207
// result := true else
62197: LD_ADDR_VAR 0 3
62201: PUSH
62202: LD_INT 1
62204: ST_TO_ADDR
62205: GO 62215
// result := false ;
62207: LD_ADDR_VAR 0 3
62211: PUSH
62212: LD_INT 0
62214: ST_TO_ADDR
// end else
62215: GO 62225
// result := false ;
62217: LD_ADDR_VAR 0 3
62221: PUSH
62222: LD_INT 0
62224: ST_TO_ADDR
// end ;
62225: LD_VAR 0 3
62229: RET
// export function HealTarget ( sci ) ; begin
62230: LD_INT 0
62232: PPUSH
// if not sci then
62233: LD_VAR 0 1
62237: NOT
62238: IFFALSE 62242
// exit ;
62240: GO 62307
// result := 0 ;
62242: LD_ADDR_VAR 0 2
62246: PUSH
62247: LD_INT 0
62249: ST_TO_ADDR
// if GetTaskList ( sci ) then
62250: LD_VAR 0 1
62254: PPUSH
62255: CALL_OW 437
62259: IFFALSE 62307
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62261: LD_VAR 0 1
62265: PPUSH
62266: CALL_OW 437
62270: PUSH
62271: LD_INT 1
62273: ARRAY
62274: PUSH
62275: LD_INT 1
62277: ARRAY
62278: PUSH
62279: LD_STRING l
62281: EQUAL
62282: IFFALSE 62307
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62284: LD_ADDR_VAR 0 2
62288: PUSH
62289: LD_VAR 0 1
62293: PPUSH
62294: CALL_OW 437
62298: PUSH
62299: LD_INT 1
62301: ARRAY
62302: PUSH
62303: LD_INT 4
62305: ARRAY
62306: ST_TO_ADDR
// end ;
62307: LD_VAR 0 2
62311: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62312: LD_INT 0
62314: PPUSH
62315: PPUSH
62316: PPUSH
62317: PPUSH
// if not base_units then
62318: LD_VAR 0 1
62322: NOT
62323: IFFALSE 62327
// exit ;
62325: GO 62414
// result := false ;
62327: LD_ADDR_VAR 0 2
62331: PUSH
62332: LD_INT 0
62334: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62335: LD_ADDR_VAR 0 5
62339: PUSH
62340: LD_VAR 0 1
62344: PPUSH
62345: LD_INT 21
62347: PUSH
62348: LD_INT 3
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PPUSH
62355: CALL_OW 72
62359: ST_TO_ADDR
// if not tmp then
62360: LD_VAR 0 5
62364: NOT
62365: IFFALSE 62369
// exit ;
62367: GO 62414
// for i in tmp do
62369: LD_ADDR_VAR 0 3
62373: PUSH
62374: LD_VAR 0 5
62378: PUSH
62379: FOR_IN
62380: IFFALSE 62412
// begin result := EnemyInRange ( i , 22 ) ;
62382: LD_ADDR_VAR 0 2
62386: PUSH
62387: LD_VAR 0 3
62391: PPUSH
62392: LD_INT 22
62394: PPUSH
62395: CALL 60027 0 2
62399: ST_TO_ADDR
// if result then
62400: LD_VAR 0 2
62404: IFFALSE 62410
// exit ;
62406: POP
62407: POP
62408: GO 62414
// end ;
62410: GO 62379
62412: POP
62413: POP
// end ;
62414: LD_VAR 0 2
62418: RET
// export function FilterByTag ( units , tag ) ; begin
62419: LD_INT 0
62421: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62422: LD_ADDR_VAR 0 3
62426: PUSH
62427: LD_VAR 0 1
62431: PPUSH
62432: LD_INT 120
62434: PUSH
62435: LD_VAR 0 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PPUSH
62444: CALL_OW 72
62448: ST_TO_ADDR
// end ;
62449: LD_VAR 0 3
62453: RET
// export function IsDriver ( un ) ; begin
62454: LD_INT 0
62456: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62457: LD_ADDR_VAR 0 2
62461: PUSH
62462: LD_VAR 0 1
62466: PUSH
62467: LD_INT 55
62469: PUSH
62470: EMPTY
62471: LIST
62472: PPUSH
62473: CALL_OW 69
62477: IN
62478: ST_TO_ADDR
// end ;
62479: LD_VAR 0 2
62483: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62484: LD_INT 0
62486: PPUSH
62487: PPUSH
// list := [ ] ;
62488: LD_ADDR_VAR 0 5
62492: PUSH
62493: EMPTY
62494: ST_TO_ADDR
// case d of 0 :
62495: LD_VAR 0 3
62499: PUSH
62500: LD_INT 0
62502: DOUBLE
62503: EQUAL
62504: IFTRUE 62508
62506: GO 62641
62508: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62509: LD_ADDR_VAR 0 5
62513: PUSH
62514: LD_VAR 0 1
62518: PUSH
62519: LD_INT 4
62521: MINUS
62522: PUSH
62523: LD_VAR 0 2
62527: PUSH
62528: LD_INT 4
62530: MINUS
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: PUSH
62540: LD_VAR 0 1
62544: PUSH
62545: LD_INT 3
62547: MINUS
62548: PUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_INT 1
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: LIST
62561: PUSH
62562: LD_VAR 0 1
62566: PUSH
62567: LD_INT 4
62569: PLUS
62570: PUSH
62571: LD_VAR 0 2
62575: PUSH
62576: LD_INT 4
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: PUSH
62584: LD_VAR 0 1
62588: PUSH
62589: LD_INT 3
62591: PLUS
62592: PUSH
62593: LD_VAR 0 2
62597: PUSH
62598: LD_INT 3
62600: PLUS
62601: PUSH
62602: LD_INT 5
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: PUSH
62610: LD_VAR 0 1
62614: PUSH
62615: LD_VAR 0 2
62619: PUSH
62620: LD_INT 4
62622: PLUS
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: LIST
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: ST_TO_ADDR
// end ; 1 :
62639: GO 63339
62641: LD_INT 1
62643: DOUBLE
62644: EQUAL
62645: IFTRUE 62649
62647: GO 62782
62649: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62650: LD_ADDR_VAR 0 5
62654: PUSH
62655: LD_VAR 0 1
62659: PUSH
62660: LD_VAR 0 2
62664: PUSH
62665: LD_INT 4
62667: MINUS
62668: PUSH
62669: LD_INT 3
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: PUSH
62677: LD_VAR 0 1
62681: PUSH
62682: LD_INT 3
62684: MINUS
62685: PUSH
62686: LD_VAR 0 2
62690: PUSH
62691: LD_INT 3
62693: MINUS
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: PUSH
62703: LD_VAR 0 1
62707: PUSH
62708: LD_INT 4
62710: MINUS
62711: PUSH
62712: LD_VAR 0 2
62716: PUSH
62717: LD_INT 1
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: LIST
62724: PUSH
62725: LD_VAR 0 1
62729: PUSH
62730: LD_VAR 0 2
62734: PUSH
62735: LD_INT 3
62737: PLUS
62738: PUSH
62739: LD_INT 0
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: PUSH
62747: LD_VAR 0 1
62751: PUSH
62752: LD_INT 4
62754: PLUS
62755: PUSH
62756: LD_VAR 0 2
62760: PUSH
62761: LD_INT 4
62763: PLUS
62764: PUSH
62765: LD_INT 5
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// end ; 2 :
62780: GO 63339
62782: LD_INT 2
62784: DOUBLE
62785: EQUAL
62786: IFTRUE 62790
62788: GO 62919
62790: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62791: LD_ADDR_VAR 0 5
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: LD_VAR 0 2
62805: PUSH
62806: LD_INT 3
62808: MINUS
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: PUSH
62818: LD_VAR 0 1
62822: PUSH
62823: LD_INT 4
62825: PLUS
62826: PUSH
62827: LD_VAR 0 2
62831: PUSH
62832: LD_INT 4
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: PUSH
62840: LD_VAR 0 1
62844: PUSH
62845: LD_VAR 0 2
62849: PUSH
62850: LD_INT 4
62852: PLUS
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: LIST
62861: PUSH
62862: LD_VAR 0 1
62866: PUSH
62867: LD_INT 3
62869: MINUS
62870: PUSH
62871: LD_VAR 0 2
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: LIST
62883: PUSH
62884: LD_VAR 0 1
62888: PUSH
62889: LD_INT 4
62891: MINUS
62892: PUSH
62893: LD_VAR 0 2
62897: PUSH
62898: LD_INT 4
62900: MINUS
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: LIST
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: ST_TO_ADDR
// end ; 3 :
62917: GO 63339
62919: LD_INT 3
62921: DOUBLE
62922: EQUAL
62923: IFTRUE 62927
62925: GO 63060
62927: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62928: LD_ADDR_VAR 0 5
62932: PUSH
62933: LD_VAR 0 1
62937: PUSH
62938: LD_INT 3
62940: PLUS
62941: PUSH
62942: LD_VAR 0 2
62946: PUSH
62947: LD_INT 4
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: LIST
62954: PUSH
62955: LD_VAR 0 1
62959: PUSH
62960: LD_INT 4
62962: PLUS
62963: PUSH
62964: LD_VAR 0 2
62968: PUSH
62969: LD_INT 4
62971: PLUS
62972: PUSH
62973: LD_INT 5
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: PUSH
62981: LD_VAR 0 1
62985: PUSH
62986: LD_INT 4
62988: MINUS
62989: PUSH
62990: LD_VAR 0 2
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: LIST
63002: PUSH
63003: LD_VAR 0 1
63007: PUSH
63008: LD_VAR 0 2
63012: PUSH
63013: LD_INT 4
63015: MINUS
63016: PUSH
63017: LD_INT 3
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: PUSH
63025: LD_VAR 0 1
63029: PUSH
63030: LD_INT 3
63032: MINUS
63033: PUSH
63034: LD_VAR 0 2
63038: PUSH
63039: LD_INT 3
63041: MINUS
63042: PUSH
63043: LD_INT 2
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: ST_TO_ADDR
// end ; 4 :
63058: GO 63339
63060: LD_INT 4
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63068
63066: GO 63201
63068: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63069: LD_ADDR_VAR 0 5
63073: PUSH
63074: LD_VAR 0 1
63078: PUSH
63079: LD_VAR 0 2
63083: PUSH
63084: LD_INT 4
63086: PLUS
63087: PUSH
63088: LD_INT 0
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: LIST
63095: PUSH
63096: LD_VAR 0 1
63100: PUSH
63101: LD_INT 3
63103: PLUS
63104: PUSH
63105: LD_VAR 0 2
63109: PUSH
63110: LD_INT 3
63112: PLUS
63113: PUSH
63114: LD_INT 5
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: PUSH
63122: LD_VAR 0 1
63126: PUSH
63127: LD_INT 4
63129: PLUS
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: LD_INT 4
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: PUSH
63144: LD_VAR 0 1
63148: PUSH
63149: LD_VAR 0 2
63153: PUSH
63154: LD_INT 3
63156: MINUS
63157: PUSH
63158: LD_INT 3
63160: PUSH
63161: EMPTY
63162: LIST
63163: LIST
63164: LIST
63165: PUSH
63166: LD_VAR 0 1
63170: PUSH
63171: LD_INT 4
63173: MINUS
63174: PUSH
63175: LD_VAR 0 2
63179: PUSH
63180: LD_INT 4
63182: MINUS
63183: PUSH
63184: LD_INT 2
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: LIST
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: ST_TO_ADDR
// end ; 5 :
63199: GO 63339
63201: LD_INT 5
63203: DOUBLE
63204: EQUAL
63205: IFTRUE 63209
63207: GO 63338
63209: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63210: LD_ADDR_VAR 0 5
63214: PUSH
63215: LD_VAR 0 1
63219: PUSH
63220: LD_INT 4
63222: MINUS
63223: PUSH
63224: LD_VAR 0 2
63228: PUSH
63229: LD_INT 1
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: LIST
63236: PUSH
63237: LD_VAR 0 1
63241: PUSH
63242: LD_VAR 0 2
63246: PUSH
63247: LD_INT 4
63249: MINUS
63250: PUSH
63251: LD_INT 3
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: LIST
63258: PUSH
63259: LD_VAR 0 1
63263: PUSH
63264: LD_INT 4
63266: PLUS
63267: PUSH
63268: LD_VAR 0 2
63272: PUSH
63273: LD_INT 4
63275: PLUS
63276: PUSH
63277: LD_INT 5
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: PUSH
63285: LD_VAR 0 1
63289: PUSH
63290: LD_INT 3
63292: PLUS
63293: PUSH
63294: LD_VAR 0 2
63298: PUSH
63299: LD_INT 4
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: PUSH
63307: LD_VAR 0 1
63311: PUSH
63312: LD_VAR 0 2
63316: PUSH
63317: LD_INT 3
63319: PLUS
63320: PUSH
63321: LD_INT 0
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: LIST
63328: PUSH
63329: EMPTY
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// end ; end ;
63336: GO 63339
63338: POP
// result := list ;
63339: LD_ADDR_VAR 0 4
63343: PUSH
63344: LD_VAR 0 5
63348: ST_TO_ADDR
// end ;
63349: LD_VAR 0 4
63353: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63354: LD_INT 0
63356: PPUSH
63357: PPUSH
63358: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63359: LD_VAR 0 1
63363: NOT
63364: PUSH
63365: LD_VAR 0 2
63369: PUSH
63370: LD_INT 1
63372: PUSH
63373: LD_INT 2
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: LD_INT 4
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: IN
63388: NOT
63389: OR
63390: IFFALSE 63394
// exit ;
63392: GO 63486
// tmp := [ ] ;
63394: LD_ADDR_VAR 0 5
63398: PUSH
63399: EMPTY
63400: ST_TO_ADDR
// for i in units do
63401: LD_ADDR_VAR 0 4
63405: PUSH
63406: LD_VAR 0 1
63410: PUSH
63411: FOR_IN
63412: IFFALSE 63455
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63414: LD_ADDR_VAR 0 5
63418: PUSH
63419: LD_VAR 0 5
63423: PPUSH
63424: LD_VAR 0 5
63428: PUSH
63429: LD_INT 1
63431: PLUS
63432: PPUSH
63433: LD_VAR 0 4
63437: PPUSH
63438: LD_VAR 0 2
63442: PPUSH
63443: CALL_OW 259
63447: PPUSH
63448: CALL_OW 2
63452: ST_TO_ADDR
63453: GO 63411
63455: POP
63456: POP
// if not tmp then
63457: LD_VAR 0 5
63461: NOT
63462: IFFALSE 63466
// exit ;
63464: GO 63486
// result := SortListByListDesc ( units , tmp ) ;
63466: LD_ADDR_VAR 0 3
63470: PUSH
63471: LD_VAR 0 1
63475: PPUSH
63476: LD_VAR 0 5
63480: PPUSH
63481: CALL_OW 77
63485: ST_TO_ADDR
// end ;
63486: LD_VAR 0 3
63490: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63491: LD_INT 0
63493: PPUSH
63494: PPUSH
63495: PPUSH
// result := false ;
63496: LD_ADDR_VAR 0 3
63500: PUSH
63501: LD_INT 0
63503: ST_TO_ADDR
// x := GetX ( building ) ;
63504: LD_ADDR_VAR 0 4
63508: PUSH
63509: LD_VAR 0 2
63513: PPUSH
63514: CALL_OW 250
63518: ST_TO_ADDR
// y := GetY ( building ) ;
63519: LD_ADDR_VAR 0 5
63523: PUSH
63524: LD_VAR 0 2
63528: PPUSH
63529: CALL_OW 251
63533: ST_TO_ADDR
// if not building or not x or not y then
63534: LD_VAR 0 2
63538: NOT
63539: PUSH
63540: LD_VAR 0 4
63544: NOT
63545: OR
63546: PUSH
63547: LD_VAR 0 5
63551: NOT
63552: OR
63553: IFFALSE 63557
// exit ;
63555: GO 63649
// if GetTaskList ( unit ) then
63557: LD_VAR 0 1
63561: PPUSH
63562: CALL_OW 437
63566: IFFALSE 63649
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63568: LD_STRING e
63570: PUSH
63571: LD_VAR 0 1
63575: PPUSH
63576: CALL_OW 437
63580: PUSH
63581: LD_INT 1
63583: ARRAY
63584: PUSH
63585: LD_INT 1
63587: ARRAY
63588: EQUAL
63589: PUSH
63590: LD_VAR 0 4
63594: PUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: CALL_OW 437
63604: PUSH
63605: LD_INT 1
63607: ARRAY
63608: PUSH
63609: LD_INT 2
63611: ARRAY
63612: EQUAL
63613: AND
63614: PUSH
63615: LD_VAR 0 5
63619: PUSH
63620: LD_VAR 0 1
63624: PPUSH
63625: CALL_OW 437
63629: PUSH
63630: LD_INT 1
63632: ARRAY
63633: PUSH
63634: LD_INT 3
63636: ARRAY
63637: EQUAL
63638: AND
63639: IFFALSE 63649
// result := true end ;
63641: LD_ADDR_VAR 0 3
63645: PUSH
63646: LD_INT 1
63648: ST_TO_ADDR
// end ;
63649: LD_VAR 0 3
63653: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63654: LD_INT 0
63656: PPUSH
// result := false ;
63657: LD_ADDR_VAR 0 4
63661: PUSH
63662: LD_INT 0
63664: ST_TO_ADDR
// if GetTaskList ( unit ) then
63665: LD_VAR 0 1
63669: PPUSH
63670: CALL_OW 437
63674: IFFALSE 63757
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63676: LD_STRING M
63678: PUSH
63679: LD_VAR 0 1
63683: PPUSH
63684: CALL_OW 437
63688: PUSH
63689: LD_INT 1
63691: ARRAY
63692: PUSH
63693: LD_INT 1
63695: ARRAY
63696: EQUAL
63697: PUSH
63698: LD_VAR 0 2
63702: PUSH
63703: LD_VAR 0 1
63707: PPUSH
63708: CALL_OW 437
63712: PUSH
63713: LD_INT 1
63715: ARRAY
63716: PUSH
63717: LD_INT 2
63719: ARRAY
63720: EQUAL
63721: AND
63722: PUSH
63723: LD_VAR 0 3
63727: PUSH
63728: LD_VAR 0 1
63732: PPUSH
63733: CALL_OW 437
63737: PUSH
63738: LD_INT 1
63740: ARRAY
63741: PUSH
63742: LD_INT 3
63744: ARRAY
63745: EQUAL
63746: AND
63747: IFFALSE 63757
// result := true ;
63749: LD_ADDR_VAR 0 4
63753: PUSH
63754: LD_INT 1
63756: ST_TO_ADDR
// end ; end ;
63757: LD_VAR 0 4
63761: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63762: LD_INT 0
63764: PPUSH
63765: PPUSH
63766: PPUSH
63767: PPUSH
// if not unit or not area then
63768: LD_VAR 0 1
63772: NOT
63773: PUSH
63774: LD_VAR 0 2
63778: NOT
63779: OR
63780: IFFALSE 63784
// exit ;
63782: GO 63948
// tmp := AreaToList ( area , i ) ;
63784: LD_ADDR_VAR 0 6
63788: PUSH
63789: LD_VAR 0 2
63793: PPUSH
63794: LD_VAR 0 5
63798: PPUSH
63799: CALL_OW 517
63803: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63804: LD_ADDR_VAR 0 5
63808: PUSH
63809: DOUBLE
63810: LD_INT 1
63812: DEC
63813: ST_TO_ADDR
63814: LD_VAR 0 6
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PUSH
63823: FOR_TO
63824: IFFALSE 63946
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63826: LD_ADDR_VAR 0 7
63830: PUSH
63831: LD_VAR 0 6
63835: PUSH
63836: LD_INT 1
63838: ARRAY
63839: PUSH
63840: LD_VAR 0 5
63844: ARRAY
63845: PUSH
63846: LD_VAR 0 6
63850: PUSH
63851: LD_INT 2
63853: ARRAY
63854: PUSH
63855: LD_VAR 0 5
63859: ARRAY
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63865: LD_VAR 0 7
63869: PUSH
63870: LD_INT 1
63872: ARRAY
63873: PPUSH
63874: LD_VAR 0 7
63878: PUSH
63879: LD_INT 2
63881: ARRAY
63882: PPUSH
63883: CALL_OW 428
63887: PUSH
63888: LD_INT 0
63890: EQUAL
63891: IFFALSE 63944
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63893: LD_VAR 0 1
63897: PPUSH
63898: LD_VAR 0 7
63902: PUSH
63903: LD_INT 1
63905: ARRAY
63906: PPUSH
63907: LD_VAR 0 7
63911: PUSH
63912: LD_INT 2
63914: ARRAY
63915: PPUSH
63916: LD_VAR 0 3
63920: PPUSH
63921: CALL_OW 48
// result := IsPlaced ( unit ) ;
63925: LD_ADDR_VAR 0 4
63929: PUSH
63930: LD_VAR 0 1
63934: PPUSH
63935: CALL_OW 305
63939: ST_TO_ADDR
// exit ;
63940: POP
63941: POP
63942: GO 63948
// end ; end ;
63944: GO 63823
63946: POP
63947: POP
// end ;
63948: LD_VAR 0 4
63952: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63953: LD_INT 0
63955: PPUSH
63956: PPUSH
63957: PPUSH
// if not side or side > 8 then
63958: LD_VAR 0 1
63962: NOT
63963: PUSH
63964: LD_VAR 0 1
63968: PUSH
63969: LD_INT 8
63971: GREATER
63972: OR
63973: IFFALSE 63977
// exit ;
63975: GO 64164
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63977: LD_ADDR_VAR 0 4
63981: PUSH
63982: LD_INT 22
63984: PUSH
63985: LD_VAR 0 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 21
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PPUSH
64008: CALL_OW 69
64012: ST_TO_ADDR
// if not tmp then
64013: LD_VAR 0 4
64017: NOT
64018: IFFALSE 64022
// exit ;
64020: GO 64164
// enable_addtolog := true ;
64022: LD_ADDR_OWVAR 81
64026: PUSH
64027: LD_INT 1
64029: ST_TO_ADDR
// AddToLog ( [ ) ;
64030: LD_STRING [
64032: PPUSH
64033: CALL_OW 561
// for i in tmp do
64037: LD_ADDR_VAR 0 3
64041: PUSH
64042: LD_VAR 0 4
64046: PUSH
64047: FOR_IN
64048: IFFALSE 64155
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64050: LD_STRING [
64052: PUSH
64053: LD_VAR 0 3
64057: PPUSH
64058: CALL_OW 266
64062: STR
64063: PUSH
64064: LD_STRING , 
64066: STR
64067: PUSH
64068: LD_VAR 0 3
64072: PPUSH
64073: CALL_OW 250
64077: STR
64078: PUSH
64079: LD_STRING , 
64081: STR
64082: PUSH
64083: LD_VAR 0 3
64087: PPUSH
64088: CALL_OW 251
64092: STR
64093: PUSH
64094: LD_STRING , 
64096: STR
64097: PUSH
64098: LD_VAR 0 3
64102: PPUSH
64103: CALL_OW 254
64107: STR
64108: PUSH
64109: LD_STRING , 
64111: STR
64112: PUSH
64113: LD_VAR 0 3
64117: PPUSH
64118: LD_INT 1
64120: PPUSH
64121: CALL_OW 268
64125: STR
64126: PUSH
64127: LD_STRING , 
64129: STR
64130: PUSH
64131: LD_VAR 0 3
64135: PPUSH
64136: LD_INT 2
64138: PPUSH
64139: CALL_OW 268
64143: STR
64144: PUSH
64145: LD_STRING ],
64147: STR
64148: PPUSH
64149: CALL_OW 561
// end ;
64153: GO 64047
64155: POP
64156: POP
// AddToLog ( ]; ) ;
64157: LD_STRING ];
64159: PPUSH
64160: CALL_OW 561
// end ;
64164: LD_VAR 0 2
64168: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64169: LD_INT 0
64171: PPUSH
64172: PPUSH
64173: PPUSH
64174: PPUSH
64175: PPUSH
// if not area or not rate or not max then
64176: LD_VAR 0 1
64180: NOT
64181: PUSH
64182: LD_VAR 0 2
64186: NOT
64187: OR
64188: PUSH
64189: LD_VAR 0 4
64193: NOT
64194: OR
64195: IFFALSE 64199
// exit ;
64197: GO 64388
// while 1 do
64199: LD_INT 1
64201: IFFALSE 64388
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64203: LD_ADDR_VAR 0 9
64207: PUSH
64208: LD_VAR 0 1
64212: PPUSH
64213: LD_INT 1
64215: PPUSH
64216: CALL_OW 287
64220: PUSH
64221: LD_INT 10
64223: MUL
64224: ST_TO_ADDR
// r := rate / 10 ;
64225: LD_ADDR_VAR 0 7
64229: PUSH
64230: LD_VAR 0 2
64234: PUSH
64235: LD_INT 10
64237: DIVREAL
64238: ST_TO_ADDR
// time := 1 1$00 ;
64239: LD_ADDR_VAR 0 8
64243: PUSH
64244: LD_INT 2100
64246: ST_TO_ADDR
// if amount < min then
64247: LD_VAR 0 9
64251: PUSH
64252: LD_VAR 0 3
64256: LESS
64257: IFFALSE 64275
// r := r * 2 else
64259: LD_ADDR_VAR 0 7
64263: PUSH
64264: LD_VAR 0 7
64268: PUSH
64269: LD_INT 2
64271: MUL
64272: ST_TO_ADDR
64273: GO 64301
// if amount > max then
64275: LD_VAR 0 9
64279: PUSH
64280: LD_VAR 0 4
64284: GREATER
64285: IFFALSE 64301
// r := r / 2 ;
64287: LD_ADDR_VAR 0 7
64291: PUSH
64292: LD_VAR 0 7
64296: PUSH
64297: LD_INT 2
64299: DIVREAL
64300: ST_TO_ADDR
// time := time / r ;
64301: LD_ADDR_VAR 0 8
64305: PUSH
64306: LD_VAR 0 8
64310: PUSH
64311: LD_VAR 0 7
64315: DIVREAL
64316: ST_TO_ADDR
// if time < 0 then
64317: LD_VAR 0 8
64321: PUSH
64322: LD_INT 0
64324: LESS
64325: IFFALSE 64342
// time := time * - 1 ;
64327: LD_ADDR_VAR 0 8
64331: PUSH
64332: LD_VAR 0 8
64336: PUSH
64337: LD_INT 1
64339: NEG
64340: MUL
64341: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64342: LD_VAR 0 8
64346: PUSH
64347: LD_INT 35
64349: PPUSH
64350: LD_INT 875
64352: PPUSH
64353: CALL_OW 12
64357: PLUS
64358: PPUSH
64359: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64363: LD_INT 1
64365: PPUSH
64366: LD_INT 5
64368: PPUSH
64369: CALL_OW 12
64373: PPUSH
64374: LD_VAR 0 1
64378: PPUSH
64379: LD_INT 1
64381: PPUSH
64382: CALL_OW 55
// end ;
64386: GO 64199
// end ;
64388: LD_VAR 0 5
64392: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64393: LD_INT 0
64395: PPUSH
64396: PPUSH
64397: PPUSH
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
// if not turrets or not factories then
64403: LD_VAR 0 1
64407: NOT
64408: PUSH
64409: LD_VAR 0 2
64413: NOT
64414: OR
64415: IFFALSE 64419
// exit ;
64417: GO 64726
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64419: LD_ADDR_VAR 0 10
64423: PUSH
64424: LD_INT 5
64426: PUSH
64427: LD_INT 6
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 4
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: LD_INT 5
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 24
64461: PUSH
64462: LD_INT 25
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 23
64471: PUSH
64472: LD_INT 27
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 42
64485: PUSH
64486: LD_INT 43
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 44
64495: PUSH
64496: LD_INT 46
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 45
64505: PUSH
64506: LD_INT 47
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// result := [ ] ;
64523: LD_ADDR_VAR 0 3
64527: PUSH
64528: EMPTY
64529: ST_TO_ADDR
// for i in turrets do
64530: LD_ADDR_VAR 0 4
64534: PUSH
64535: LD_VAR 0 1
64539: PUSH
64540: FOR_IN
64541: IFFALSE 64724
// begin nat := GetNation ( i ) ;
64543: LD_ADDR_VAR 0 7
64547: PUSH
64548: LD_VAR 0 4
64552: PPUSH
64553: CALL_OW 248
64557: ST_TO_ADDR
// weapon := 0 ;
64558: LD_ADDR_VAR 0 8
64562: PUSH
64563: LD_INT 0
64565: ST_TO_ADDR
// if not nat then
64566: LD_VAR 0 7
64570: NOT
64571: IFFALSE 64575
// continue ;
64573: GO 64540
// for j in list [ nat ] do
64575: LD_ADDR_VAR 0 5
64579: PUSH
64580: LD_VAR 0 10
64584: PUSH
64585: LD_VAR 0 7
64589: ARRAY
64590: PUSH
64591: FOR_IN
64592: IFFALSE 64633
// if GetBWeapon ( i ) = j [ 1 ] then
64594: LD_VAR 0 4
64598: PPUSH
64599: CALL_OW 269
64603: PUSH
64604: LD_VAR 0 5
64608: PUSH
64609: LD_INT 1
64611: ARRAY
64612: EQUAL
64613: IFFALSE 64631
// begin weapon := j [ 2 ] ;
64615: LD_ADDR_VAR 0 8
64619: PUSH
64620: LD_VAR 0 5
64624: PUSH
64625: LD_INT 2
64627: ARRAY
64628: ST_TO_ADDR
// break ;
64629: GO 64633
// end ;
64631: GO 64591
64633: POP
64634: POP
// if not weapon then
64635: LD_VAR 0 8
64639: NOT
64640: IFFALSE 64644
// continue ;
64642: GO 64540
// for k in factories do
64644: LD_ADDR_VAR 0 6
64648: PUSH
64649: LD_VAR 0 2
64653: PUSH
64654: FOR_IN
64655: IFFALSE 64720
// begin weapons := AvailableWeaponList ( k ) ;
64657: LD_ADDR_VAR 0 9
64661: PUSH
64662: LD_VAR 0 6
64666: PPUSH
64667: CALL_OW 478
64671: ST_TO_ADDR
// if not weapons then
64672: LD_VAR 0 9
64676: NOT
64677: IFFALSE 64681
// continue ;
64679: GO 64654
// if weapon in weapons then
64681: LD_VAR 0 8
64685: PUSH
64686: LD_VAR 0 9
64690: IN
64691: IFFALSE 64718
// begin result := [ i , weapon ] ;
64693: LD_ADDR_VAR 0 3
64697: PUSH
64698: LD_VAR 0 4
64702: PUSH
64703: LD_VAR 0 8
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// exit ;
64712: POP
64713: POP
64714: POP
64715: POP
64716: GO 64726
// end ; end ;
64718: GO 64654
64720: POP
64721: POP
// end ;
64722: GO 64540
64724: POP
64725: POP
// end ;
64726: LD_VAR 0 3
64730: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64731: LD_INT 0
64733: PPUSH
// if not side or side > 8 then
64734: LD_VAR 0 3
64738: NOT
64739: PUSH
64740: LD_VAR 0 3
64744: PUSH
64745: LD_INT 8
64747: GREATER
64748: OR
64749: IFFALSE 64753
// exit ;
64751: GO 64812
// if not range then
64753: LD_VAR 0 4
64757: NOT
64758: IFFALSE 64769
// range := - 12 ;
64760: LD_ADDR_VAR 0 4
64764: PUSH
64765: LD_INT 12
64767: NEG
64768: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64769: LD_VAR 0 1
64773: PPUSH
64774: LD_VAR 0 2
64778: PPUSH
64779: LD_VAR 0 3
64783: PPUSH
64784: LD_VAR 0 4
64788: PPUSH
64789: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64793: LD_VAR 0 1
64797: PPUSH
64798: LD_VAR 0 2
64802: PPUSH
64803: LD_VAR 0 3
64807: PPUSH
64808: CALL_OW 331
// end ;
64812: LD_VAR 0 5
64816: RET
// export function Video ( mode ) ; begin
64817: LD_INT 0
64819: PPUSH
// ingame_video = mode ;
64820: LD_ADDR_OWVAR 52
64824: PUSH
64825: LD_VAR 0 1
64829: ST_TO_ADDR
// interface_hidden = mode ;
64830: LD_ADDR_OWVAR 54
64834: PUSH
64835: LD_VAR 0 1
64839: ST_TO_ADDR
// end ;
64840: LD_VAR 0 2
64844: RET
// export function Join ( array , element ) ; begin
64845: LD_INT 0
64847: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64848: LD_ADDR_VAR 0 3
64852: PUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: LD_VAR 0 1
64862: PUSH
64863: LD_INT 1
64865: PLUS
64866: PPUSH
64867: LD_VAR 0 2
64871: PPUSH
64872: CALL_OW 1
64876: ST_TO_ADDR
// end ;
64877: LD_VAR 0 3
64881: RET
// export function JoinUnion ( array , element ) ; begin
64882: LD_INT 0
64884: PPUSH
// result := array union element ;
64885: LD_ADDR_VAR 0 3
64889: PUSH
64890: LD_VAR 0 1
64894: PUSH
64895: LD_VAR 0 2
64899: UNION
64900: ST_TO_ADDR
// end ;
64901: LD_VAR 0 3
64905: RET
// export function GetBehemoths ( side ) ; begin
64906: LD_INT 0
64908: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64909: LD_ADDR_VAR 0 2
64913: PUSH
64914: LD_INT 22
64916: PUSH
64917: LD_VAR 0 1
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 31
64928: PUSH
64929: LD_INT 25
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PPUSH
64940: CALL_OW 69
64944: ST_TO_ADDR
// end ;
64945: LD_VAR 0 2
64949: RET
// export function Shuffle ( array ) ; var i , index ; begin
64950: LD_INT 0
64952: PPUSH
64953: PPUSH
64954: PPUSH
// result := [ ] ;
64955: LD_ADDR_VAR 0 2
64959: PUSH
64960: EMPTY
64961: ST_TO_ADDR
// if not array then
64962: LD_VAR 0 1
64966: NOT
64967: IFFALSE 64971
// exit ;
64969: GO 65070
// Randomize ;
64971: CALL_OW 10
// for i = array downto 1 do
64975: LD_ADDR_VAR 0 3
64979: PUSH
64980: DOUBLE
64981: LD_VAR 0 1
64985: INC
64986: ST_TO_ADDR
64987: LD_INT 1
64989: PUSH
64990: FOR_DOWNTO
64991: IFFALSE 65068
// begin index := rand ( 1 , array ) ;
64993: LD_ADDR_VAR 0 4
64997: PUSH
64998: LD_INT 1
65000: PPUSH
65001: LD_VAR 0 1
65005: PPUSH
65006: CALL_OW 12
65010: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65011: LD_ADDR_VAR 0 2
65015: PUSH
65016: LD_VAR 0 2
65020: PPUSH
65021: LD_VAR 0 2
65025: PUSH
65026: LD_INT 1
65028: PLUS
65029: PPUSH
65030: LD_VAR 0 1
65034: PUSH
65035: LD_VAR 0 4
65039: ARRAY
65040: PPUSH
65041: CALL_OW 2
65045: ST_TO_ADDR
// array := Delete ( array , index ) ;
65046: LD_ADDR_VAR 0 1
65050: PUSH
65051: LD_VAR 0 1
65055: PPUSH
65056: LD_VAR 0 4
65060: PPUSH
65061: CALL_OW 3
65065: ST_TO_ADDR
// end ;
65066: GO 64990
65068: POP
65069: POP
// end ;
65070: LD_VAR 0 2
65074: RET
// export function GetBaseMaterials ( base ) ; begin
65075: LD_INT 0
65077: PPUSH
// result := [ 0 , 0 , 0 ] ;
65078: LD_ADDR_VAR 0 2
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: LD_INT 0
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// if not base then
65097: LD_VAR 0 1
65101: NOT
65102: IFFALSE 65106
// exit ;
65104: GO 65155
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65106: LD_ADDR_VAR 0 2
65110: PUSH
65111: LD_VAR 0 1
65115: PPUSH
65116: LD_INT 1
65118: PPUSH
65119: CALL_OW 275
65123: PUSH
65124: LD_VAR 0 1
65128: PPUSH
65129: LD_INT 2
65131: PPUSH
65132: CALL_OW 275
65136: PUSH
65137: LD_VAR 0 1
65141: PPUSH
65142: LD_INT 3
65144: PPUSH
65145: CALL_OW 275
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: ST_TO_ADDR
// end ;
65155: LD_VAR 0 2
65159: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65160: LD_INT 0
65162: PPUSH
65163: PPUSH
// result := array ;
65164: LD_ADDR_VAR 0 3
65168: PUSH
65169: LD_VAR 0 1
65173: ST_TO_ADDR
// if size >= result then
65174: LD_VAR 0 2
65178: PUSH
65179: LD_VAR 0 3
65183: GREATEREQUAL
65184: IFFALSE 65188
// exit ;
65186: GO 65238
// if size then
65188: LD_VAR 0 2
65192: IFFALSE 65238
// for i := array downto size do
65194: LD_ADDR_VAR 0 4
65198: PUSH
65199: DOUBLE
65200: LD_VAR 0 1
65204: INC
65205: ST_TO_ADDR
65206: LD_VAR 0 2
65210: PUSH
65211: FOR_DOWNTO
65212: IFFALSE 65236
// result := Delete ( result , result ) ;
65214: LD_ADDR_VAR 0 3
65218: PUSH
65219: LD_VAR 0 3
65223: PPUSH
65224: LD_VAR 0 3
65228: PPUSH
65229: CALL_OW 3
65233: ST_TO_ADDR
65234: GO 65211
65236: POP
65237: POP
// end ;
65238: LD_VAR 0 3
65242: RET
// export function ComExit ( unit ) ; var tmp ; begin
65243: LD_INT 0
65245: PPUSH
65246: PPUSH
// if not IsInUnit ( unit ) then
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 310
65256: NOT
65257: IFFALSE 65261
// exit ;
65259: GO 65321
// tmp := IsInUnit ( unit ) ;
65261: LD_ADDR_VAR 0 3
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 310
65275: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65276: LD_VAR 0 3
65280: PPUSH
65281: CALL_OW 247
65285: PUSH
65286: LD_INT 2
65288: EQUAL
65289: IFFALSE 65302
// ComExitVehicle ( unit ) else
65291: LD_VAR 0 1
65295: PPUSH
65296: CALL_OW 121
65300: GO 65311
// ComExitBuilding ( unit ) ;
65302: LD_VAR 0 1
65306: PPUSH
65307: CALL_OW 122
// result := tmp ;
65311: LD_ADDR_VAR 0 2
65315: PUSH
65316: LD_VAR 0 3
65320: ST_TO_ADDR
// end ;
65321: LD_VAR 0 2
65325: RET
// export function ComExitAll ( units ) ; var i ; begin
65326: LD_INT 0
65328: PPUSH
65329: PPUSH
// if not units then
65330: LD_VAR 0 1
65334: NOT
65335: IFFALSE 65339
// exit ;
65337: GO 65365
// for i in units do
65339: LD_ADDR_VAR 0 3
65343: PUSH
65344: LD_VAR 0 1
65348: PUSH
65349: FOR_IN
65350: IFFALSE 65363
// ComExit ( i ) ;
65352: LD_VAR 0 3
65356: PPUSH
65357: CALL 65243 0 1
65361: GO 65349
65363: POP
65364: POP
// end ;
65365: LD_VAR 0 2
65369: RET
// export function ResetHc ; begin
65370: LD_INT 0
65372: PPUSH
// InitHc ;
65373: CALL_OW 19
// hc_importance := 0 ;
65377: LD_ADDR_OWVAR 32
65381: PUSH
65382: LD_INT 0
65384: ST_TO_ADDR
// end ;
65385: LD_VAR 0 1
65389: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65390: LD_INT 0
65392: PPUSH
65393: PPUSH
65394: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65395: LD_ADDR_VAR 0 6
65399: PUSH
65400: LD_VAR 0 1
65404: PUSH
65405: LD_VAR 0 3
65409: PLUS
65410: PUSH
65411: LD_INT 2
65413: DIV
65414: ST_TO_ADDR
// if _x < 0 then
65415: LD_VAR 0 6
65419: PUSH
65420: LD_INT 0
65422: LESS
65423: IFFALSE 65440
// _x := _x * - 1 ;
65425: LD_ADDR_VAR 0 6
65429: PUSH
65430: LD_VAR 0 6
65434: PUSH
65435: LD_INT 1
65437: NEG
65438: MUL
65439: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65440: LD_ADDR_VAR 0 7
65444: PUSH
65445: LD_VAR 0 2
65449: PUSH
65450: LD_VAR 0 4
65454: PLUS
65455: PUSH
65456: LD_INT 2
65458: DIV
65459: ST_TO_ADDR
// if _y < 0 then
65460: LD_VAR 0 7
65464: PUSH
65465: LD_INT 0
65467: LESS
65468: IFFALSE 65485
// _y := _y * - 1 ;
65470: LD_ADDR_VAR 0 7
65474: PUSH
65475: LD_VAR 0 7
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: MUL
65484: ST_TO_ADDR
// result := [ _x , _y ] ;
65485: LD_ADDR_VAR 0 5
65489: PUSH
65490: LD_VAR 0 6
65494: PUSH
65495: LD_VAR 0 7
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// end ;
65504: LD_VAR 0 5
65508: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65509: LD_INT 0
65511: PPUSH
65512: PPUSH
65513: PPUSH
65514: PPUSH
// task := GetTaskList ( unit ) ;
65515: LD_ADDR_VAR 0 7
65519: PUSH
65520: LD_VAR 0 1
65524: PPUSH
65525: CALL_OW 437
65529: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65530: LD_VAR 0 7
65534: NOT
65535: PUSH
65536: LD_VAR 0 1
65540: PPUSH
65541: LD_VAR 0 2
65545: PPUSH
65546: CALL_OW 308
65550: NOT
65551: AND
65552: IFFALSE 65556
// exit ;
65554: GO 65674
// if IsInArea ( unit , area ) then
65556: LD_VAR 0 1
65560: PPUSH
65561: LD_VAR 0 2
65565: PPUSH
65566: CALL_OW 308
65570: IFFALSE 65588
// begin ComMoveToArea ( unit , goAway ) ;
65572: LD_VAR 0 1
65576: PPUSH
65577: LD_VAR 0 3
65581: PPUSH
65582: CALL_OW 113
// exit ;
65586: GO 65674
// end ; if task [ 1 ] [ 1 ] <> M then
65588: LD_VAR 0 7
65592: PUSH
65593: LD_INT 1
65595: ARRAY
65596: PUSH
65597: LD_INT 1
65599: ARRAY
65600: PUSH
65601: LD_STRING M
65603: NONEQUAL
65604: IFFALSE 65608
// exit ;
65606: GO 65674
// x := task [ 1 ] [ 2 ] ;
65608: LD_ADDR_VAR 0 5
65612: PUSH
65613: LD_VAR 0 7
65617: PUSH
65618: LD_INT 1
65620: ARRAY
65621: PUSH
65622: LD_INT 2
65624: ARRAY
65625: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65626: LD_ADDR_VAR 0 6
65630: PUSH
65631: LD_VAR 0 7
65635: PUSH
65636: LD_INT 1
65638: ARRAY
65639: PUSH
65640: LD_INT 3
65642: ARRAY
65643: ST_TO_ADDR
// if InArea ( x , y , area ) then
65644: LD_VAR 0 5
65648: PPUSH
65649: LD_VAR 0 6
65653: PPUSH
65654: LD_VAR 0 2
65658: PPUSH
65659: CALL_OW 309
65663: IFFALSE 65674
// ComStop ( unit ) ;
65665: LD_VAR 0 1
65669: PPUSH
65670: CALL_OW 141
// end ;
65674: LD_VAR 0 4
65678: RET
// export function Abs ( value ) ; begin
65679: LD_INT 0
65681: PPUSH
// result := value ;
65682: LD_ADDR_VAR 0 2
65686: PUSH
65687: LD_VAR 0 1
65691: ST_TO_ADDR
// if value < 0 then
65692: LD_VAR 0 1
65696: PUSH
65697: LD_INT 0
65699: LESS
65700: IFFALSE 65717
// result := value * - 1 ;
65702: LD_ADDR_VAR 0 2
65706: PUSH
65707: LD_VAR 0 1
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: MUL
65716: ST_TO_ADDR
// end ;
65717: LD_VAR 0 2
65721: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65722: LD_INT 0
65724: PPUSH
65725: PPUSH
65726: PPUSH
65727: PPUSH
65728: PPUSH
65729: PPUSH
65730: PPUSH
65731: PPUSH
// if not unit or not building then
65732: LD_VAR 0 1
65736: NOT
65737: PUSH
65738: LD_VAR 0 2
65742: NOT
65743: OR
65744: IFFALSE 65748
// exit ;
65746: GO 65974
// x := GetX ( building ) ;
65748: LD_ADDR_VAR 0 4
65752: PUSH
65753: LD_VAR 0 2
65757: PPUSH
65758: CALL_OW 250
65762: ST_TO_ADDR
// y := GetY ( building ) ;
65763: LD_ADDR_VAR 0 6
65767: PUSH
65768: LD_VAR 0 2
65772: PPUSH
65773: CALL_OW 251
65777: ST_TO_ADDR
// d := GetDir ( building ) ;
65778: LD_ADDR_VAR 0 8
65782: PUSH
65783: LD_VAR 0 2
65787: PPUSH
65788: CALL_OW 254
65792: ST_TO_ADDR
// r := 4 ;
65793: LD_ADDR_VAR 0 9
65797: PUSH
65798: LD_INT 4
65800: ST_TO_ADDR
// for i := 1 to 5 do
65801: LD_ADDR_VAR 0 10
65805: PUSH
65806: DOUBLE
65807: LD_INT 1
65809: DEC
65810: ST_TO_ADDR
65811: LD_INT 5
65813: PUSH
65814: FOR_TO
65815: IFFALSE 65972
// begin _x := ShiftX ( x , d , r + i ) ;
65817: LD_ADDR_VAR 0 5
65821: PUSH
65822: LD_VAR 0 4
65826: PPUSH
65827: LD_VAR 0 8
65831: PPUSH
65832: LD_VAR 0 9
65836: PUSH
65837: LD_VAR 0 10
65841: PLUS
65842: PPUSH
65843: CALL_OW 272
65847: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65848: LD_ADDR_VAR 0 7
65852: PUSH
65853: LD_VAR 0 6
65857: PPUSH
65858: LD_VAR 0 8
65862: PPUSH
65863: LD_VAR 0 9
65867: PUSH
65868: LD_VAR 0 10
65872: PLUS
65873: PPUSH
65874: CALL_OW 273
65878: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65879: LD_VAR 0 5
65883: PPUSH
65884: LD_VAR 0 7
65888: PPUSH
65889: CALL_OW 488
65893: PUSH
65894: LD_VAR 0 5
65898: PPUSH
65899: LD_VAR 0 7
65903: PPUSH
65904: CALL_OW 428
65908: PPUSH
65909: CALL_OW 247
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: LD_INT 2
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: IN
65924: NOT
65925: AND
65926: IFFALSE 65970
// begin ComMoveXY ( unit , _x , _y ) ;
65928: LD_VAR 0 1
65932: PPUSH
65933: LD_VAR 0 5
65937: PPUSH
65938: LD_VAR 0 7
65942: PPUSH
65943: CALL_OW 111
// result := [ _x , _y ] ;
65947: LD_ADDR_VAR 0 3
65951: PUSH
65952: LD_VAR 0 5
65956: PUSH
65957: LD_VAR 0 7
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: ST_TO_ADDR
// exit ;
65966: POP
65967: POP
65968: GO 65974
// end ; end ;
65970: GO 65814
65972: POP
65973: POP
// end ;
65974: LD_VAR 0 3
65978: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65979: LD_INT 0
65981: PPUSH
65982: PPUSH
65983: PPUSH
// result := 0 ;
65984: LD_ADDR_VAR 0 3
65988: PUSH
65989: LD_INT 0
65991: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65992: LD_VAR 0 1
65996: PUSH
65997: LD_INT 0
65999: LESS
66000: PUSH
66001: LD_VAR 0 1
66005: PUSH
66006: LD_INT 8
66008: GREATER
66009: OR
66010: PUSH
66011: LD_VAR 0 2
66015: PUSH
66016: LD_INT 0
66018: LESS
66019: OR
66020: PUSH
66021: LD_VAR 0 2
66025: PUSH
66026: LD_INT 8
66028: GREATER
66029: OR
66030: IFFALSE 66034
// exit ;
66032: GO 66109
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66034: LD_ADDR_VAR 0 4
66038: PUSH
66039: LD_INT 22
66041: PUSH
66042: LD_VAR 0 2
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PPUSH
66051: CALL_OW 69
66055: PUSH
66056: FOR_IN
66057: IFFALSE 66107
// begin un := UnitShoot ( i ) ;
66059: LD_ADDR_VAR 0 5
66063: PUSH
66064: LD_VAR 0 4
66068: PPUSH
66069: CALL_OW 504
66073: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66074: LD_VAR 0 5
66078: PPUSH
66079: CALL_OW 255
66083: PUSH
66084: LD_VAR 0 1
66088: EQUAL
66089: IFFALSE 66105
// begin result := un ;
66091: LD_ADDR_VAR 0 3
66095: PUSH
66096: LD_VAR 0 5
66100: ST_TO_ADDR
// exit ;
66101: POP
66102: POP
66103: GO 66109
// end ; end ;
66105: GO 66056
66107: POP
66108: POP
// end ;
66109: LD_VAR 0 3
66113: RET
// export function GetCargoBay ( units ) ; begin
66114: LD_INT 0
66116: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66117: LD_ADDR_VAR 0 2
66121: PUSH
66122: LD_VAR 0 1
66126: PPUSH
66127: LD_INT 2
66129: PUSH
66130: LD_INT 34
66132: PUSH
66133: LD_INT 12
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 34
66142: PUSH
66143: LD_INT 51
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 34
66152: PUSH
66153: LD_INT 32
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 34
66162: PUSH
66163: LD_INT 89
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: PPUSH
66177: CALL_OW 72
66181: ST_TO_ADDR
// end ;
66182: LD_VAR 0 2
66186: RET
// export function Negate ( value ) ; begin
66187: LD_INT 0
66189: PPUSH
// result := not value ;
66190: LD_ADDR_VAR 0 2
66194: PUSH
66195: LD_VAR 0 1
66199: NOT
66200: ST_TO_ADDR
// end ;
66201: LD_VAR 0 2
66205: RET
// export function Inc ( value ) ; begin
66206: LD_INT 0
66208: PPUSH
// result := value + 1 ;
66209: LD_ADDR_VAR 0 2
66213: PUSH
66214: LD_VAR 0 1
66218: PUSH
66219: LD_INT 1
66221: PLUS
66222: ST_TO_ADDR
// end ;
66223: LD_VAR 0 2
66227: RET
// export function Dec ( value ) ; begin
66228: LD_INT 0
66230: PPUSH
// result := value - 1 ;
66231: LD_ADDR_VAR 0 2
66235: PUSH
66236: LD_VAR 0 1
66240: PUSH
66241: LD_INT 1
66243: MINUS
66244: ST_TO_ADDR
// end ;
66245: LD_VAR 0 2
66249: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66250: LD_INT 0
66252: PPUSH
66253: PPUSH
66254: PPUSH
66255: PPUSH
66256: PPUSH
66257: PPUSH
66258: PPUSH
66259: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66260: LD_VAR 0 1
66264: PPUSH
66265: LD_VAR 0 2
66269: PPUSH
66270: CALL_OW 488
66274: NOT
66275: PUSH
66276: LD_VAR 0 3
66280: PPUSH
66281: LD_VAR 0 4
66285: PPUSH
66286: CALL_OW 488
66290: NOT
66291: OR
66292: IFFALSE 66305
// begin result := - 1 ;
66294: LD_ADDR_VAR 0 5
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: ST_TO_ADDR
// exit ;
66303: GO 66540
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66305: LD_ADDR_VAR 0 12
66309: PUSH
66310: LD_VAR 0 1
66314: PPUSH
66315: LD_VAR 0 2
66319: PPUSH
66320: LD_VAR 0 3
66324: PPUSH
66325: LD_VAR 0 4
66329: PPUSH
66330: CALL 65390 0 4
66334: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66335: LD_ADDR_VAR 0 11
66339: PUSH
66340: LD_VAR 0 1
66344: PPUSH
66345: LD_VAR 0 2
66349: PPUSH
66350: LD_VAR 0 12
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PPUSH
66359: LD_VAR 0 12
66363: PUSH
66364: LD_INT 2
66366: ARRAY
66367: PPUSH
66368: CALL_OW 298
66372: ST_TO_ADDR
// distance := 9999 ;
66373: LD_ADDR_VAR 0 10
66377: PUSH
66378: LD_INT 9999
66380: ST_TO_ADDR
// for i := 0 to 5 do
66381: LD_ADDR_VAR 0 6
66385: PUSH
66386: DOUBLE
66387: LD_INT 0
66389: DEC
66390: ST_TO_ADDR
66391: LD_INT 5
66393: PUSH
66394: FOR_TO
66395: IFFALSE 66538
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66397: LD_ADDR_VAR 0 7
66401: PUSH
66402: LD_VAR 0 1
66406: PPUSH
66407: LD_VAR 0 6
66411: PPUSH
66412: LD_VAR 0 11
66416: PPUSH
66417: CALL_OW 272
66421: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66422: LD_ADDR_VAR 0 8
66426: PUSH
66427: LD_VAR 0 2
66431: PPUSH
66432: LD_VAR 0 6
66436: PPUSH
66437: LD_VAR 0 11
66441: PPUSH
66442: CALL_OW 273
66446: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66447: LD_VAR 0 7
66451: PPUSH
66452: LD_VAR 0 8
66456: PPUSH
66457: CALL_OW 488
66461: NOT
66462: IFFALSE 66466
// continue ;
66464: GO 66394
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66466: LD_ADDR_VAR 0 9
66470: PUSH
66471: LD_VAR 0 12
66475: PUSH
66476: LD_INT 1
66478: ARRAY
66479: PPUSH
66480: LD_VAR 0 12
66484: PUSH
66485: LD_INT 2
66487: ARRAY
66488: PPUSH
66489: LD_VAR 0 7
66493: PPUSH
66494: LD_VAR 0 8
66498: PPUSH
66499: CALL_OW 298
66503: ST_TO_ADDR
// if tmp < distance then
66504: LD_VAR 0 9
66508: PUSH
66509: LD_VAR 0 10
66513: LESS
66514: IFFALSE 66536
// begin result := i ;
66516: LD_ADDR_VAR 0 5
66520: PUSH
66521: LD_VAR 0 6
66525: ST_TO_ADDR
// distance := tmp ;
66526: LD_ADDR_VAR 0 10
66530: PUSH
66531: LD_VAR 0 9
66535: ST_TO_ADDR
// end ; end ;
66536: GO 66394
66538: POP
66539: POP
// end ;
66540: LD_VAR 0 5
66544: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66545: LD_INT 0
66547: PPUSH
66548: PPUSH
// if not driver or not IsInUnit ( driver ) then
66549: LD_VAR 0 1
66553: NOT
66554: PUSH
66555: LD_VAR 0 1
66559: PPUSH
66560: CALL_OW 310
66564: NOT
66565: OR
66566: IFFALSE 66570
// exit ;
66568: GO 66660
// vehicle := IsInUnit ( driver ) ;
66570: LD_ADDR_VAR 0 3
66574: PUSH
66575: LD_VAR 0 1
66579: PPUSH
66580: CALL_OW 310
66584: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66585: LD_VAR 0 1
66589: PPUSH
66590: LD_STRING \
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: LD_INT 0
66601: PUSH
66602: LD_INT 0
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 0
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: PUSH
66620: LD_STRING E
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_VAR 0 3
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 0
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PPUSH
66656: CALL_OW 446
// end ;
66660: LD_VAR 0 2
66664: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66665: LD_INT 0
66667: PPUSH
66668: PPUSH
// if not driver or not IsInUnit ( driver ) then
66669: LD_VAR 0 1
66673: NOT
66674: PUSH
66675: LD_VAR 0 1
66679: PPUSH
66680: CALL_OW 310
66684: NOT
66685: OR
66686: IFFALSE 66690
// exit ;
66688: GO 66780
// vehicle := IsInUnit ( driver ) ;
66690: LD_ADDR_VAR 0 3
66694: PUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: CALL_OW 310
66704: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66705: LD_VAR 0 1
66709: PPUSH
66710: LD_STRING \
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: LD_INT 0
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: LD_INT 0
66724: PUSH
66725: LD_INT 0
66727: PUSH
66728: LD_INT 0
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: PUSH
66740: LD_STRING E
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_VAR 0 3
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PPUSH
66776: CALL_OW 447
// end ;
66780: LD_VAR 0 2
66784: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66785: LD_INT 0
66787: PPUSH
66788: PPUSH
66789: PPUSH
// tmp := [ ] ;
66790: LD_ADDR_VAR 0 5
66794: PUSH
66795: EMPTY
66796: ST_TO_ADDR
// for i in units do
66797: LD_ADDR_VAR 0 4
66801: PUSH
66802: LD_VAR 0 1
66806: PUSH
66807: FOR_IN
66808: IFFALSE 66846
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66810: LD_ADDR_VAR 0 5
66814: PUSH
66815: LD_VAR 0 5
66819: PPUSH
66820: LD_VAR 0 5
66824: PUSH
66825: LD_INT 1
66827: PLUS
66828: PPUSH
66829: LD_VAR 0 4
66833: PPUSH
66834: CALL_OW 256
66838: PPUSH
66839: CALL_OW 2
66843: ST_TO_ADDR
66844: GO 66807
66846: POP
66847: POP
// if not tmp then
66848: LD_VAR 0 5
66852: NOT
66853: IFFALSE 66857
// exit ;
66855: GO 66905
// if asc then
66857: LD_VAR 0 2
66861: IFFALSE 66885
// result := SortListByListAsc ( units , tmp ) else
66863: LD_ADDR_VAR 0 3
66867: PUSH
66868: LD_VAR 0 1
66872: PPUSH
66873: LD_VAR 0 5
66877: PPUSH
66878: CALL_OW 76
66882: ST_TO_ADDR
66883: GO 66905
// result := SortListByListDesc ( units , tmp ) ;
66885: LD_ADDR_VAR 0 3
66889: PUSH
66890: LD_VAR 0 1
66894: PPUSH
66895: LD_VAR 0 5
66899: PPUSH
66900: CALL_OW 77
66904: ST_TO_ADDR
// end ;
66905: LD_VAR 0 3
66909: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66910: LD_INT 0
66912: PPUSH
66913: PPUSH
// task := GetTaskList ( mech ) ;
66914: LD_ADDR_VAR 0 4
66918: PUSH
66919: LD_VAR 0 1
66923: PPUSH
66924: CALL_OW 437
66928: ST_TO_ADDR
// if not task then
66929: LD_VAR 0 4
66933: NOT
66934: IFFALSE 66938
// exit ;
66936: GO 66980
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66938: LD_ADDR_VAR 0 3
66942: PUSH
66943: LD_VAR 0 4
66947: PUSH
66948: LD_INT 1
66950: ARRAY
66951: PUSH
66952: LD_INT 1
66954: ARRAY
66955: PUSH
66956: LD_STRING r
66958: EQUAL
66959: PUSH
66960: LD_VAR 0 4
66964: PUSH
66965: LD_INT 1
66967: ARRAY
66968: PUSH
66969: LD_INT 4
66971: ARRAY
66972: PUSH
66973: LD_VAR 0 2
66977: EQUAL
66978: AND
66979: ST_TO_ADDR
// end ;
66980: LD_VAR 0 3
66984: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66985: LD_INT 0
66987: PPUSH
// SetDir ( unit , d ) ;
66988: LD_VAR 0 1
66992: PPUSH
66993: LD_VAR 0 4
66997: PPUSH
66998: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67002: LD_VAR 0 1
67006: PPUSH
67007: LD_VAR 0 2
67011: PPUSH
67012: LD_VAR 0 3
67016: PPUSH
67017: LD_VAR 0 5
67021: PPUSH
67022: CALL_OW 48
// end ;
67026: LD_VAR 0 6
67030: RET
// export function ToNaturalNumber ( number ) ; begin
67031: LD_INT 0
67033: PPUSH
// result := number div 1 ;
67034: LD_ADDR_VAR 0 2
67038: PUSH
67039: LD_VAR 0 1
67043: PUSH
67044: LD_INT 1
67046: DIV
67047: ST_TO_ADDR
// if number < 0 then
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 0
67055: LESS
67056: IFFALSE 67066
// result := 0 ;
67058: LD_ADDR_VAR 0 2
67062: PUSH
67063: LD_INT 0
67065: ST_TO_ADDR
// end ;
67066: LD_VAR 0 2
67070: RET
// export function SortByClass ( units , class ) ; var un ; begin
67071: LD_INT 0
67073: PPUSH
67074: PPUSH
// if not units or not class then
67075: LD_VAR 0 1
67079: NOT
67080: PUSH
67081: LD_VAR 0 2
67085: NOT
67086: OR
67087: IFFALSE 67091
// exit ;
67089: GO 67186
// result := [ ] ;
67091: LD_ADDR_VAR 0 3
67095: PUSH
67096: EMPTY
67097: ST_TO_ADDR
// for un in units do
67098: LD_ADDR_VAR 0 4
67102: PUSH
67103: LD_VAR 0 1
67107: PUSH
67108: FOR_IN
67109: IFFALSE 67184
// if GetClass ( un ) = class then
67111: LD_VAR 0 4
67115: PPUSH
67116: CALL_OW 257
67120: PUSH
67121: LD_VAR 0 2
67125: EQUAL
67126: IFFALSE 67153
// result := Insert ( result , 1 , un ) else
67128: LD_ADDR_VAR 0 3
67132: PUSH
67133: LD_VAR 0 3
67137: PPUSH
67138: LD_INT 1
67140: PPUSH
67141: LD_VAR 0 4
67145: PPUSH
67146: CALL_OW 2
67150: ST_TO_ADDR
67151: GO 67182
// result := Replace ( result , result + 1 , un ) ;
67153: LD_ADDR_VAR 0 3
67157: PUSH
67158: LD_VAR 0 3
67162: PPUSH
67163: LD_VAR 0 3
67167: PUSH
67168: LD_INT 1
67170: PLUS
67171: PPUSH
67172: LD_VAR 0 4
67176: PPUSH
67177: CALL_OW 1
67181: ST_TO_ADDR
67182: GO 67108
67184: POP
67185: POP
// end ;
67186: LD_VAR 0 3
67190: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67191: LD_INT 0
67193: PPUSH
67194: PPUSH
67195: PPUSH
67196: PPUSH
67197: PPUSH
67198: PPUSH
67199: PPUSH
// result := [ ] ;
67200: LD_ADDR_VAR 0 4
67204: PUSH
67205: EMPTY
67206: ST_TO_ADDR
// if x - r < 0 then
67207: LD_VAR 0 1
67211: PUSH
67212: LD_VAR 0 3
67216: MINUS
67217: PUSH
67218: LD_INT 0
67220: LESS
67221: IFFALSE 67233
// min_x := 0 else
67223: LD_ADDR_VAR 0 8
67227: PUSH
67228: LD_INT 0
67230: ST_TO_ADDR
67231: GO 67249
// min_x := x - r ;
67233: LD_ADDR_VAR 0 8
67237: PUSH
67238: LD_VAR 0 1
67242: PUSH
67243: LD_VAR 0 3
67247: MINUS
67248: ST_TO_ADDR
// if y - r < 0 then
67249: LD_VAR 0 2
67253: PUSH
67254: LD_VAR 0 3
67258: MINUS
67259: PUSH
67260: LD_INT 0
67262: LESS
67263: IFFALSE 67275
// min_y := 0 else
67265: LD_ADDR_VAR 0 7
67269: PUSH
67270: LD_INT 0
67272: ST_TO_ADDR
67273: GO 67291
// min_y := y - r ;
67275: LD_ADDR_VAR 0 7
67279: PUSH
67280: LD_VAR 0 2
67284: PUSH
67285: LD_VAR 0 3
67289: MINUS
67290: ST_TO_ADDR
// max_x := x + r ;
67291: LD_ADDR_VAR 0 9
67295: PUSH
67296: LD_VAR 0 1
67300: PUSH
67301: LD_VAR 0 3
67305: PLUS
67306: ST_TO_ADDR
// max_y := y + r ;
67307: LD_ADDR_VAR 0 10
67311: PUSH
67312: LD_VAR 0 2
67316: PUSH
67317: LD_VAR 0 3
67321: PLUS
67322: ST_TO_ADDR
// for _x = min_x to max_x do
67323: LD_ADDR_VAR 0 5
67327: PUSH
67328: DOUBLE
67329: LD_VAR 0 8
67333: DEC
67334: ST_TO_ADDR
67335: LD_VAR 0 9
67339: PUSH
67340: FOR_TO
67341: IFFALSE 67442
// for _y = min_y to max_y do
67343: LD_ADDR_VAR 0 6
67347: PUSH
67348: DOUBLE
67349: LD_VAR 0 7
67353: DEC
67354: ST_TO_ADDR
67355: LD_VAR 0 10
67359: PUSH
67360: FOR_TO
67361: IFFALSE 67438
// begin if not ValidHex ( _x , _y ) then
67363: LD_VAR 0 5
67367: PPUSH
67368: LD_VAR 0 6
67372: PPUSH
67373: CALL_OW 488
67377: NOT
67378: IFFALSE 67382
// continue ;
67380: GO 67360
// if GetResourceTypeXY ( _x , _y ) then
67382: LD_VAR 0 5
67386: PPUSH
67387: LD_VAR 0 6
67391: PPUSH
67392: CALL_OW 283
67396: IFFALSE 67436
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67398: LD_ADDR_VAR 0 4
67402: PUSH
67403: LD_VAR 0 4
67407: PPUSH
67408: LD_VAR 0 4
67412: PUSH
67413: LD_INT 1
67415: PLUS
67416: PPUSH
67417: LD_VAR 0 5
67421: PUSH
67422: LD_VAR 0 6
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PPUSH
67431: CALL_OW 1
67435: ST_TO_ADDR
// end ;
67436: GO 67360
67438: POP
67439: POP
67440: GO 67340
67442: POP
67443: POP
// end ;
67444: LD_VAR 0 4
67448: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67449: LD_INT 0
67451: PPUSH
67452: PPUSH
67453: PPUSH
67454: PPUSH
67455: PPUSH
67456: PPUSH
67457: PPUSH
67458: PPUSH
// if not units then
67459: LD_VAR 0 1
67463: NOT
67464: IFFALSE 67468
// exit ;
67466: GO 67992
// result := UnitFilter ( units , [ f_ok ] ) ;
67468: LD_ADDR_VAR 0 3
67472: PUSH
67473: LD_VAR 0 1
67477: PPUSH
67478: LD_INT 50
67480: PUSH
67481: EMPTY
67482: LIST
67483: PPUSH
67484: CALL_OW 72
67488: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67489: LD_ADDR_VAR 0 8
67493: PUSH
67494: LD_VAR 0 1
67498: PUSH
67499: LD_INT 1
67501: ARRAY
67502: PPUSH
67503: CALL_OW 255
67507: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67508: LD_ADDR_VAR 0 10
67512: PUSH
67513: LD_INT 29
67515: PUSH
67516: LD_INT 91
67518: PUSH
67519: LD_INT 49
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: LIST
67526: ST_TO_ADDR
// if not result then
67527: LD_VAR 0 3
67531: NOT
67532: IFFALSE 67536
// exit ;
67534: GO 67992
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67536: LD_ADDR_VAR 0 5
67540: PUSH
67541: LD_INT 81
67543: PUSH
67544: LD_VAR 0 8
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PPUSH
67553: CALL_OW 69
67557: ST_TO_ADDR
// for i in result do
67558: LD_ADDR_VAR 0 4
67562: PUSH
67563: LD_VAR 0 3
67567: PUSH
67568: FOR_IN
67569: IFFALSE 67990
// begin tag := GetTag ( i ) + 1 ;
67571: LD_ADDR_VAR 0 9
67575: PUSH
67576: LD_VAR 0 4
67580: PPUSH
67581: CALL_OW 110
67585: PUSH
67586: LD_INT 1
67588: PLUS
67589: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67590: LD_ADDR_VAR 0 7
67594: PUSH
67595: LD_VAR 0 4
67599: PPUSH
67600: CALL_OW 250
67604: PPUSH
67605: LD_VAR 0 4
67609: PPUSH
67610: CALL_OW 251
67614: PPUSH
67615: LD_INT 6
67617: PPUSH
67618: CALL 67191 0 3
67622: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67623: LD_VAR 0 4
67627: PPUSH
67628: CALL_OW 247
67632: PUSH
67633: LD_INT 2
67635: EQUAL
67636: PUSH
67637: LD_VAR 0 7
67641: AND
67642: PUSH
67643: LD_VAR 0 4
67647: PPUSH
67648: CALL_OW 264
67652: PUSH
67653: LD_VAR 0 10
67657: IN
67658: NOT
67659: AND
67660: IFFALSE 67699
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67662: LD_VAR 0 4
67666: PPUSH
67667: LD_VAR 0 7
67671: PUSH
67672: LD_INT 1
67674: ARRAY
67675: PUSH
67676: LD_INT 1
67678: ARRAY
67679: PPUSH
67680: LD_VAR 0 7
67684: PUSH
67685: LD_INT 1
67687: ARRAY
67688: PUSH
67689: LD_INT 2
67691: ARRAY
67692: PPUSH
67693: CALL_OW 116
67697: GO 67988
// if path > tag then
67699: LD_VAR 0 2
67703: PUSH
67704: LD_VAR 0 9
67708: GREATER
67709: IFFALSE 67917
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67711: LD_ADDR_VAR 0 6
67715: PUSH
67716: LD_VAR 0 5
67720: PPUSH
67721: LD_INT 91
67723: PUSH
67724: LD_VAR 0 4
67728: PUSH
67729: LD_INT 8
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: LIST
67736: PPUSH
67737: CALL_OW 72
67741: ST_TO_ADDR
// if nearEnemy then
67742: LD_VAR 0 6
67746: IFFALSE 67815
// begin if GetWeapon ( i ) = ru_time_lapser then
67748: LD_VAR 0 4
67752: PPUSH
67753: CALL_OW 264
67757: PUSH
67758: LD_INT 49
67760: EQUAL
67761: IFFALSE 67789
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67763: LD_VAR 0 4
67767: PPUSH
67768: LD_VAR 0 6
67772: PPUSH
67773: LD_VAR 0 4
67777: PPUSH
67778: CALL_OW 74
67782: PPUSH
67783: CALL_OW 112
67787: GO 67813
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67789: LD_VAR 0 4
67793: PPUSH
67794: LD_VAR 0 6
67798: PPUSH
67799: LD_VAR 0 4
67803: PPUSH
67804: CALL_OW 74
67808: PPUSH
67809: CALL_OW 115
// end else
67813: GO 67915
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67815: LD_VAR 0 4
67819: PPUSH
67820: LD_VAR 0 2
67824: PUSH
67825: LD_VAR 0 9
67829: ARRAY
67830: PUSH
67831: LD_INT 1
67833: ARRAY
67834: PPUSH
67835: LD_VAR 0 2
67839: PUSH
67840: LD_VAR 0 9
67844: ARRAY
67845: PUSH
67846: LD_INT 2
67848: ARRAY
67849: PPUSH
67850: CALL_OW 297
67854: PUSH
67855: LD_INT 6
67857: GREATER
67858: IFFALSE 67901
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67860: LD_VAR 0 4
67864: PPUSH
67865: LD_VAR 0 2
67869: PUSH
67870: LD_VAR 0 9
67874: ARRAY
67875: PUSH
67876: LD_INT 1
67878: ARRAY
67879: PPUSH
67880: LD_VAR 0 2
67884: PUSH
67885: LD_VAR 0 9
67889: ARRAY
67890: PUSH
67891: LD_INT 2
67893: ARRAY
67894: PPUSH
67895: CALL_OW 114
67899: GO 67915
// SetTag ( i , tag ) ;
67901: LD_VAR 0 4
67905: PPUSH
67906: LD_VAR 0 9
67910: PPUSH
67911: CALL_OW 109
// end else
67915: GO 67988
// if enemy then
67917: LD_VAR 0 5
67921: IFFALSE 67988
// begin if GetWeapon ( i ) = ru_time_lapser then
67923: LD_VAR 0 4
67927: PPUSH
67928: CALL_OW 264
67932: PUSH
67933: LD_INT 49
67935: EQUAL
67936: IFFALSE 67964
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67938: LD_VAR 0 4
67942: PPUSH
67943: LD_VAR 0 5
67947: PPUSH
67948: LD_VAR 0 4
67952: PPUSH
67953: CALL_OW 74
67957: PPUSH
67958: CALL_OW 112
67962: GO 67988
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67964: LD_VAR 0 4
67968: PPUSH
67969: LD_VAR 0 5
67973: PPUSH
67974: LD_VAR 0 4
67978: PPUSH
67979: CALL_OW 74
67983: PPUSH
67984: CALL_OW 115
// end ; end ;
67988: GO 67568
67990: POP
67991: POP
// end ;
67992: LD_VAR 0 3
67996: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67997: LD_INT 0
67999: PPUSH
68000: PPUSH
68001: PPUSH
// if not unit or IsInUnit ( unit ) then
68002: LD_VAR 0 1
68006: NOT
68007: PUSH
68008: LD_VAR 0 1
68012: PPUSH
68013: CALL_OW 310
68017: OR
68018: IFFALSE 68022
// exit ;
68020: GO 68113
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68022: LD_ADDR_VAR 0 4
68026: PUSH
68027: LD_VAR 0 1
68031: PPUSH
68032: CALL_OW 250
68036: PPUSH
68037: LD_VAR 0 2
68041: PPUSH
68042: LD_INT 1
68044: PPUSH
68045: CALL_OW 272
68049: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68050: LD_ADDR_VAR 0 5
68054: PUSH
68055: LD_VAR 0 1
68059: PPUSH
68060: CALL_OW 251
68064: PPUSH
68065: LD_VAR 0 2
68069: PPUSH
68070: LD_INT 1
68072: PPUSH
68073: CALL_OW 273
68077: ST_TO_ADDR
// if ValidHex ( x , y ) then
68078: LD_VAR 0 4
68082: PPUSH
68083: LD_VAR 0 5
68087: PPUSH
68088: CALL_OW 488
68092: IFFALSE 68113
// ComTurnXY ( unit , x , y ) ;
68094: LD_VAR 0 1
68098: PPUSH
68099: LD_VAR 0 4
68103: PPUSH
68104: LD_VAR 0 5
68108: PPUSH
68109: CALL_OW 118
// end ;
68113: LD_VAR 0 3
68117: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68118: LD_INT 0
68120: PPUSH
68121: PPUSH
// result := false ;
68122: LD_ADDR_VAR 0 3
68126: PUSH
68127: LD_INT 0
68129: ST_TO_ADDR
// if not units then
68130: LD_VAR 0 2
68134: NOT
68135: IFFALSE 68139
// exit ;
68137: GO 68184
// for i in units do
68139: LD_ADDR_VAR 0 4
68143: PUSH
68144: LD_VAR 0 2
68148: PUSH
68149: FOR_IN
68150: IFFALSE 68182
// if See ( side , i ) then
68152: LD_VAR 0 1
68156: PPUSH
68157: LD_VAR 0 4
68161: PPUSH
68162: CALL_OW 292
68166: IFFALSE 68180
// begin result := true ;
68168: LD_ADDR_VAR 0 3
68172: PUSH
68173: LD_INT 1
68175: ST_TO_ADDR
// exit ;
68176: POP
68177: POP
68178: GO 68184
// end ;
68180: GO 68149
68182: POP
68183: POP
// end ;
68184: LD_VAR 0 3
68188: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68189: LD_INT 0
68191: PPUSH
68192: PPUSH
68193: PPUSH
68194: PPUSH
// if not unit or not points then
68195: LD_VAR 0 1
68199: NOT
68200: PUSH
68201: LD_VAR 0 2
68205: NOT
68206: OR
68207: IFFALSE 68211
// exit ;
68209: GO 68301
// dist := 99999 ;
68211: LD_ADDR_VAR 0 5
68215: PUSH
68216: LD_INT 99999
68218: ST_TO_ADDR
// for i in points do
68219: LD_ADDR_VAR 0 4
68223: PUSH
68224: LD_VAR 0 2
68228: PUSH
68229: FOR_IN
68230: IFFALSE 68299
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68232: LD_ADDR_VAR 0 6
68236: PUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: LD_VAR 0 4
68246: PUSH
68247: LD_INT 1
68249: ARRAY
68250: PPUSH
68251: LD_VAR 0 4
68255: PUSH
68256: LD_INT 2
68258: ARRAY
68259: PPUSH
68260: CALL_OW 297
68264: ST_TO_ADDR
// if tmpDist < dist then
68265: LD_VAR 0 6
68269: PUSH
68270: LD_VAR 0 5
68274: LESS
68275: IFFALSE 68297
// begin result := i ;
68277: LD_ADDR_VAR 0 3
68281: PUSH
68282: LD_VAR 0 4
68286: ST_TO_ADDR
// dist := tmpDist ;
68287: LD_ADDR_VAR 0 5
68291: PUSH
68292: LD_VAR 0 6
68296: ST_TO_ADDR
// end ; end ;
68297: GO 68229
68299: POP
68300: POP
// end ;
68301: LD_VAR 0 3
68305: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68306: LD_INT 0
68308: PPUSH
// uc_side := side ;
68309: LD_ADDR_OWVAR 20
68313: PUSH
68314: LD_VAR 0 1
68318: ST_TO_ADDR
// uc_nation := 3 ;
68319: LD_ADDR_OWVAR 21
68323: PUSH
68324: LD_INT 3
68326: ST_TO_ADDR
// vc_chassis := 25 ;
68327: LD_ADDR_OWVAR 37
68331: PUSH
68332: LD_INT 25
68334: ST_TO_ADDR
// vc_engine := engine_siberite ;
68335: LD_ADDR_OWVAR 39
68339: PUSH
68340: LD_INT 3
68342: ST_TO_ADDR
// vc_control := control_computer ;
68343: LD_ADDR_OWVAR 38
68347: PUSH
68348: LD_INT 3
68350: ST_TO_ADDR
// vc_weapon := 59 ;
68351: LD_ADDR_OWVAR 40
68355: PUSH
68356: LD_INT 59
68358: ST_TO_ADDR
// result := CreateVehicle ;
68359: LD_ADDR_VAR 0 5
68363: PUSH
68364: CALL_OW 45
68368: ST_TO_ADDR
// SetDir ( result , d ) ;
68369: LD_VAR 0 5
68373: PPUSH
68374: LD_VAR 0 4
68378: PPUSH
68379: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68383: LD_VAR 0 5
68387: PPUSH
68388: LD_VAR 0 2
68392: PPUSH
68393: LD_VAR 0 3
68397: PPUSH
68398: LD_INT 0
68400: PPUSH
68401: CALL_OW 48
// end ;
68405: LD_VAR 0 5
68409: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68410: LD_INT 0
68412: PPUSH
68413: PPUSH
68414: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68415: LD_ADDR_VAR 0 2
68419: PUSH
68420: LD_INT 0
68422: PUSH
68423: LD_INT 0
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_INT 0
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68438: LD_VAR 0 1
68442: NOT
68443: PUSH
68444: LD_VAR 0 1
68448: PPUSH
68449: CALL_OW 264
68453: PUSH
68454: LD_INT 12
68456: PUSH
68457: LD_INT 51
68459: PUSH
68460: LD_INT 32
68462: PUSH
68463: LD_INT 89
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: IN
68472: NOT
68473: OR
68474: IFFALSE 68478
// exit ;
68476: GO 68576
// for i := 1 to 3 do
68478: LD_ADDR_VAR 0 3
68482: PUSH
68483: DOUBLE
68484: LD_INT 1
68486: DEC
68487: ST_TO_ADDR
68488: LD_INT 3
68490: PUSH
68491: FOR_TO
68492: IFFALSE 68574
// begin tmp := GetCargo ( cargo , i ) ;
68494: LD_ADDR_VAR 0 4
68498: PUSH
68499: LD_VAR 0 1
68503: PPUSH
68504: LD_VAR 0 3
68508: PPUSH
68509: CALL_OW 289
68513: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68514: LD_ADDR_VAR 0 2
68518: PUSH
68519: LD_VAR 0 2
68523: PPUSH
68524: LD_VAR 0 3
68528: PPUSH
68529: LD_VAR 0 4
68533: PPUSH
68534: CALL_OW 1
68538: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68539: LD_ADDR_VAR 0 2
68543: PUSH
68544: LD_VAR 0 2
68548: PPUSH
68549: LD_INT 4
68551: PPUSH
68552: LD_VAR 0 2
68556: PUSH
68557: LD_INT 4
68559: ARRAY
68560: PUSH
68561: LD_VAR 0 4
68565: PLUS
68566: PPUSH
68567: CALL_OW 1
68571: ST_TO_ADDR
// end ;
68572: GO 68491
68574: POP
68575: POP
// end ;
68576: LD_VAR 0 2
68580: RET
// export function Length ( array ) ; begin
68581: LD_INT 0
68583: PPUSH
// result := array + 0 ;
68584: LD_ADDR_VAR 0 2
68588: PUSH
68589: LD_VAR 0 1
68593: PUSH
68594: LD_INT 0
68596: PLUS
68597: ST_TO_ADDR
// end ;
68598: LD_VAR 0 2
68602: RET
// export function PrepareArray ( array ) ; begin
68603: LD_INT 0
68605: PPUSH
// result := array diff 0 ;
68606: LD_ADDR_VAR 0 2
68610: PUSH
68611: LD_VAR 0 1
68615: PUSH
68616: LD_INT 0
68618: DIFF
68619: ST_TO_ADDR
// if not result [ 1 ] then
68620: LD_VAR 0 2
68624: PUSH
68625: LD_INT 1
68627: ARRAY
68628: NOT
68629: IFFALSE 68649
// result := Delete ( result , 1 ) ;
68631: LD_ADDR_VAR 0 2
68635: PUSH
68636: LD_VAR 0 2
68640: PPUSH
68641: LD_INT 1
68643: PPUSH
68644: CALL_OW 3
68648: ST_TO_ADDR
// end ;
68649: LD_VAR 0 2
68653: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68654: LD_INT 0
68656: PPUSH
68657: PPUSH
68658: PPUSH
68659: PPUSH
// sibRocketRange := 25 ;
68660: LD_ADDR_VAR 0 6
68664: PUSH
68665: LD_INT 25
68667: ST_TO_ADDR
// result := false ;
68668: LD_ADDR_VAR 0 4
68672: PUSH
68673: LD_INT 0
68675: ST_TO_ADDR
// for i := 0 to 5 do
68676: LD_ADDR_VAR 0 5
68680: PUSH
68681: DOUBLE
68682: LD_INT 0
68684: DEC
68685: ST_TO_ADDR
68686: LD_INT 5
68688: PUSH
68689: FOR_TO
68690: IFFALSE 68757
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68692: LD_VAR 0 1
68696: PPUSH
68697: LD_VAR 0 5
68701: PPUSH
68702: LD_VAR 0 6
68706: PPUSH
68707: CALL_OW 272
68711: PPUSH
68712: LD_VAR 0 2
68716: PPUSH
68717: LD_VAR 0 5
68721: PPUSH
68722: LD_VAR 0 6
68726: PPUSH
68727: CALL_OW 273
68731: PPUSH
68732: LD_VAR 0 3
68736: PPUSH
68737: CALL_OW 309
68741: IFFALSE 68755
// begin result := true ;
68743: LD_ADDR_VAR 0 4
68747: PUSH
68748: LD_INT 1
68750: ST_TO_ADDR
// exit ;
68751: POP
68752: POP
68753: GO 68759
// end ;
68755: GO 68689
68757: POP
68758: POP
// end ;
68759: LD_VAR 0 4
68763: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68764: LD_INT 0
68766: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68767: LD_VAR 0 1
68771: PPUSH
68772: LD_VAR 0 2
68776: PPUSH
68777: LD_INT 0
68779: PPUSH
68780: LD_INT 0
68782: PPUSH
68783: LD_INT 1
68785: PPUSH
68786: LD_INT 0
68788: PPUSH
68789: CALL_OW 587
// end ; end_of_file
68793: LD_VAR 0 3
68797: RET
// every 0 0$1 do
68798: GO 68800
68800: DISABLE
// begin enable ;
68801: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
68802: LD_STRING updateTimer(
68804: PUSH
68805: LD_OWVAR 1
68809: STR
68810: PUSH
68811: LD_STRING );
68813: STR
68814: PPUSH
68815: CALL_OW 559
// end ;
68819: END
// export function SOS_MapStart ( ) ; begin
68820: LD_INT 0
68822: PPUSH
// if streamModeActive then
68823: LD_EXP 69
68827: IFFALSE 68836
// DefineStreamItems ( true ) ;
68829: LD_INT 1
68831: PPUSH
68832: CALL 70490 0 1
// UpdateFactoryWaypoints ( ) ;
68836: CALL 83351 0 0
// UpdateWarehouseGatheringPoints ( ) ;
68840: CALL 83608 0 0
// end ;
68844: LD_VAR 0 1
68848: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68849: LD_INT 0
68851: PPUSH
// if p2 = hack_mode then
68852: LD_VAR 0 2
68856: PUSH
68857: LD_INT 100
68859: EQUAL
68860: IFFALSE 69863
// begin if not StreamModeActive then
68862: LD_EXP 69
68866: NOT
68867: IFFALSE 68877
// StreamModeActive := true ;
68869: LD_ADDR_EXP 69
68873: PUSH
68874: LD_INT 1
68876: ST_TO_ADDR
// if p3 = 0 then
68877: LD_VAR 0 3
68881: PUSH
68882: LD_INT 0
68884: EQUAL
68885: IFFALSE 68891
// InitStreamMode ;
68887: CALL 70026 0 0
// if p3 = 1 then
68891: LD_VAR 0 3
68895: PUSH
68896: LD_INT 1
68898: EQUAL
68899: IFFALSE 68909
// sRocket := true ;
68901: LD_ADDR_EXP 74
68905: PUSH
68906: LD_INT 1
68908: ST_TO_ADDR
// if p3 = 2 then
68909: LD_VAR 0 3
68913: PUSH
68914: LD_INT 2
68916: EQUAL
68917: IFFALSE 68927
// sSpeed := true ;
68919: LD_ADDR_EXP 73
68923: PUSH
68924: LD_INT 1
68926: ST_TO_ADDR
// if p3 = 3 then
68927: LD_VAR 0 3
68931: PUSH
68932: LD_INT 3
68934: EQUAL
68935: IFFALSE 68945
// sEngine := true ;
68937: LD_ADDR_EXP 75
68941: PUSH
68942: LD_INT 1
68944: ST_TO_ADDR
// if p3 = 4 then
68945: LD_VAR 0 3
68949: PUSH
68950: LD_INT 4
68952: EQUAL
68953: IFFALSE 68963
// sSpec := true ;
68955: LD_ADDR_EXP 72
68959: PUSH
68960: LD_INT 1
68962: ST_TO_ADDR
// if p3 = 5 then
68963: LD_VAR 0 3
68967: PUSH
68968: LD_INT 5
68970: EQUAL
68971: IFFALSE 68981
// sLevel := true ;
68973: LD_ADDR_EXP 76
68977: PUSH
68978: LD_INT 1
68980: ST_TO_ADDR
// if p3 = 6 then
68981: LD_VAR 0 3
68985: PUSH
68986: LD_INT 6
68988: EQUAL
68989: IFFALSE 68999
// sArmoury := true ;
68991: LD_ADDR_EXP 77
68995: PUSH
68996: LD_INT 1
68998: ST_TO_ADDR
// if p3 = 7 then
68999: LD_VAR 0 3
69003: PUSH
69004: LD_INT 7
69006: EQUAL
69007: IFFALSE 69017
// sRadar := true ;
69009: LD_ADDR_EXP 78
69013: PUSH
69014: LD_INT 1
69016: ST_TO_ADDR
// if p3 = 8 then
69017: LD_VAR 0 3
69021: PUSH
69022: LD_INT 8
69024: EQUAL
69025: IFFALSE 69035
// sBunker := true ;
69027: LD_ADDR_EXP 79
69031: PUSH
69032: LD_INT 1
69034: ST_TO_ADDR
// if p3 = 9 then
69035: LD_VAR 0 3
69039: PUSH
69040: LD_INT 9
69042: EQUAL
69043: IFFALSE 69053
// sHack := true ;
69045: LD_ADDR_EXP 80
69049: PUSH
69050: LD_INT 1
69052: ST_TO_ADDR
// if p3 = 10 then
69053: LD_VAR 0 3
69057: PUSH
69058: LD_INT 10
69060: EQUAL
69061: IFFALSE 69071
// sFire := true ;
69063: LD_ADDR_EXP 81
69067: PUSH
69068: LD_INT 1
69070: ST_TO_ADDR
// if p3 = 11 then
69071: LD_VAR 0 3
69075: PUSH
69076: LD_INT 11
69078: EQUAL
69079: IFFALSE 69089
// sRefresh := true ;
69081: LD_ADDR_EXP 82
69085: PUSH
69086: LD_INT 1
69088: ST_TO_ADDR
// if p3 = 12 then
69089: LD_VAR 0 3
69093: PUSH
69094: LD_INT 12
69096: EQUAL
69097: IFFALSE 69107
// sExp := true ;
69099: LD_ADDR_EXP 83
69103: PUSH
69104: LD_INT 1
69106: ST_TO_ADDR
// if p3 = 13 then
69107: LD_VAR 0 3
69111: PUSH
69112: LD_INT 13
69114: EQUAL
69115: IFFALSE 69125
// sDepot := true ;
69117: LD_ADDR_EXP 84
69121: PUSH
69122: LD_INT 1
69124: ST_TO_ADDR
// if p3 = 14 then
69125: LD_VAR 0 3
69129: PUSH
69130: LD_INT 14
69132: EQUAL
69133: IFFALSE 69143
// sFlag := true ;
69135: LD_ADDR_EXP 85
69139: PUSH
69140: LD_INT 1
69142: ST_TO_ADDR
// if p3 = 15 then
69143: LD_VAR 0 3
69147: PUSH
69148: LD_INT 15
69150: EQUAL
69151: IFFALSE 69161
// sKamikadze := true ;
69153: LD_ADDR_EXP 93
69157: PUSH
69158: LD_INT 1
69160: ST_TO_ADDR
// if p3 = 16 then
69161: LD_VAR 0 3
69165: PUSH
69166: LD_INT 16
69168: EQUAL
69169: IFFALSE 69179
// sTroll := true ;
69171: LD_ADDR_EXP 94
69175: PUSH
69176: LD_INT 1
69178: ST_TO_ADDR
// if p3 = 17 then
69179: LD_VAR 0 3
69183: PUSH
69184: LD_INT 17
69186: EQUAL
69187: IFFALSE 69197
// sSlow := true ;
69189: LD_ADDR_EXP 95
69193: PUSH
69194: LD_INT 1
69196: ST_TO_ADDR
// if p3 = 18 then
69197: LD_VAR 0 3
69201: PUSH
69202: LD_INT 18
69204: EQUAL
69205: IFFALSE 69215
// sLack := true ;
69207: LD_ADDR_EXP 96
69211: PUSH
69212: LD_INT 1
69214: ST_TO_ADDR
// if p3 = 19 then
69215: LD_VAR 0 3
69219: PUSH
69220: LD_INT 19
69222: EQUAL
69223: IFFALSE 69233
// sTank := true ;
69225: LD_ADDR_EXP 98
69229: PUSH
69230: LD_INT 1
69232: ST_TO_ADDR
// if p3 = 20 then
69233: LD_VAR 0 3
69237: PUSH
69238: LD_INT 20
69240: EQUAL
69241: IFFALSE 69251
// sRemote := true ;
69243: LD_ADDR_EXP 99
69247: PUSH
69248: LD_INT 1
69250: ST_TO_ADDR
// if p3 = 21 then
69251: LD_VAR 0 3
69255: PUSH
69256: LD_INT 21
69258: EQUAL
69259: IFFALSE 69269
// sPowell := true ;
69261: LD_ADDR_EXP 100
69265: PUSH
69266: LD_INT 1
69268: ST_TO_ADDR
// if p3 = 22 then
69269: LD_VAR 0 3
69273: PUSH
69274: LD_INT 22
69276: EQUAL
69277: IFFALSE 69287
// sTeleport := true ;
69279: LD_ADDR_EXP 103
69283: PUSH
69284: LD_INT 1
69286: ST_TO_ADDR
// if p3 = 23 then
69287: LD_VAR 0 3
69291: PUSH
69292: LD_INT 23
69294: EQUAL
69295: IFFALSE 69305
// sOilTower := true ;
69297: LD_ADDR_EXP 105
69301: PUSH
69302: LD_INT 1
69304: ST_TO_ADDR
// if p3 = 24 then
69305: LD_VAR 0 3
69309: PUSH
69310: LD_INT 24
69312: EQUAL
69313: IFFALSE 69323
// sShovel := true ;
69315: LD_ADDR_EXP 106
69319: PUSH
69320: LD_INT 1
69322: ST_TO_ADDR
// if p3 = 25 then
69323: LD_VAR 0 3
69327: PUSH
69328: LD_INT 25
69330: EQUAL
69331: IFFALSE 69341
// sSheik := true ;
69333: LD_ADDR_EXP 107
69337: PUSH
69338: LD_INT 1
69340: ST_TO_ADDR
// if p3 = 26 then
69341: LD_VAR 0 3
69345: PUSH
69346: LD_INT 26
69348: EQUAL
69349: IFFALSE 69359
// sEarthquake := true ;
69351: LD_ADDR_EXP 109
69355: PUSH
69356: LD_INT 1
69358: ST_TO_ADDR
// if p3 = 27 then
69359: LD_VAR 0 3
69363: PUSH
69364: LD_INT 27
69366: EQUAL
69367: IFFALSE 69377
// sAI := true ;
69369: LD_ADDR_EXP 110
69373: PUSH
69374: LD_INT 1
69376: ST_TO_ADDR
// if p3 = 28 then
69377: LD_VAR 0 3
69381: PUSH
69382: LD_INT 28
69384: EQUAL
69385: IFFALSE 69395
// sCargo := true ;
69387: LD_ADDR_EXP 113
69391: PUSH
69392: LD_INT 1
69394: ST_TO_ADDR
// if p3 = 29 then
69395: LD_VAR 0 3
69399: PUSH
69400: LD_INT 29
69402: EQUAL
69403: IFFALSE 69413
// sDLaser := true ;
69405: LD_ADDR_EXP 114
69409: PUSH
69410: LD_INT 1
69412: ST_TO_ADDR
// if p3 = 30 then
69413: LD_VAR 0 3
69417: PUSH
69418: LD_INT 30
69420: EQUAL
69421: IFFALSE 69431
// sExchange := true ;
69423: LD_ADDR_EXP 115
69427: PUSH
69428: LD_INT 1
69430: ST_TO_ADDR
// if p3 = 31 then
69431: LD_VAR 0 3
69435: PUSH
69436: LD_INT 31
69438: EQUAL
69439: IFFALSE 69449
// sFac := true ;
69441: LD_ADDR_EXP 116
69445: PUSH
69446: LD_INT 1
69448: ST_TO_ADDR
// if p3 = 32 then
69449: LD_VAR 0 3
69453: PUSH
69454: LD_INT 32
69456: EQUAL
69457: IFFALSE 69467
// sPower := true ;
69459: LD_ADDR_EXP 117
69463: PUSH
69464: LD_INT 1
69466: ST_TO_ADDR
// if p3 = 33 then
69467: LD_VAR 0 3
69471: PUSH
69472: LD_INT 33
69474: EQUAL
69475: IFFALSE 69485
// sRandom := true ;
69477: LD_ADDR_EXP 118
69481: PUSH
69482: LD_INT 1
69484: ST_TO_ADDR
// if p3 = 34 then
69485: LD_VAR 0 3
69489: PUSH
69490: LD_INT 34
69492: EQUAL
69493: IFFALSE 69503
// sShield := true ;
69495: LD_ADDR_EXP 119
69499: PUSH
69500: LD_INT 1
69502: ST_TO_ADDR
// if p3 = 35 then
69503: LD_VAR 0 3
69507: PUSH
69508: LD_INT 35
69510: EQUAL
69511: IFFALSE 69521
// sTime := true ;
69513: LD_ADDR_EXP 120
69517: PUSH
69518: LD_INT 1
69520: ST_TO_ADDR
// if p3 = 36 then
69521: LD_VAR 0 3
69525: PUSH
69526: LD_INT 36
69528: EQUAL
69529: IFFALSE 69539
// sTools := true ;
69531: LD_ADDR_EXP 121
69535: PUSH
69536: LD_INT 1
69538: ST_TO_ADDR
// if p3 = 101 then
69539: LD_VAR 0 3
69543: PUSH
69544: LD_INT 101
69546: EQUAL
69547: IFFALSE 69557
// sSold := true ;
69549: LD_ADDR_EXP 86
69553: PUSH
69554: LD_INT 1
69556: ST_TO_ADDR
// if p3 = 102 then
69557: LD_VAR 0 3
69561: PUSH
69562: LD_INT 102
69564: EQUAL
69565: IFFALSE 69575
// sDiff := true ;
69567: LD_ADDR_EXP 87
69571: PUSH
69572: LD_INT 1
69574: ST_TO_ADDR
// if p3 = 103 then
69575: LD_VAR 0 3
69579: PUSH
69580: LD_INT 103
69582: EQUAL
69583: IFFALSE 69593
// sFog := true ;
69585: LD_ADDR_EXP 90
69589: PUSH
69590: LD_INT 1
69592: ST_TO_ADDR
// if p3 = 104 then
69593: LD_VAR 0 3
69597: PUSH
69598: LD_INT 104
69600: EQUAL
69601: IFFALSE 69611
// sReset := true ;
69603: LD_ADDR_EXP 91
69607: PUSH
69608: LD_INT 1
69610: ST_TO_ADDR
// if p3 = 105 then
69611: LD_VAR 0 3
69615: PUSH
69616: LD_INT 105
69618: EQUAL
69619: IFFALSE 69629
// sSun := true ;
69621: LD_ADDR_EXP 92
69625: PUSH
69626: LD_INT 1
69628: ST_TO_ADDR
// if p3 = 106 then
69629: LD_VAR 0 3
69633: PUSH
69634: LD_INT 106
69636: EQUAL
69637: IFFALSE 69647
// sTiger := true ;
69639: LD_ADDR_EXP 88
69643: PUSH
69644: LD_INT 1
69646: ST_TO_ADDR
// if p3 = 107 then
69647: LD_VAR 0 3
69651: PUSH
69652: LD_INT 107
69654: EQUAL
69655: IFFALSE 69665
// sBomb := true ;
69657: LD_ADDR_EXP 89
69661: PUSH
69662: LD_INT 1
69664: ST_TO_ADDR
// if p3 = 108 then
69665: LD_VAR 0 3
69669: PUSH
69670: LD_INT 108
69672: EQUAL
69673: IFFALSE 69683
// sWound := true ;
69675: LD_ADDR_EXP 97
69679: PUSH
69680: LD_INT 1
69682: ST_TO_ADDR
// if p3 = 109 then
69683: LD_VAR 0 3
69687: PUSH
69688: LD_INT 109
69690: EQUAL
69691: IFFALSE 69701
// sBetray := true ;
69693: LD_ADDR_EXP 101
69697: PUSH
69698: LD_INT 1
69700: ST_TO_ADDR
// if p3 = 110 then
69701: LD_VAR 0 3
69705: PUSH
69706: LD_INT 110
69708: EQUAL
69709: IFFALSE 69719
// sContamin := true ;
69711: LD_ADDR_EXP 102
69715: PUSH
69716: LD_INT 1
69718: ST_TO_ADDR
// if p3 = 111 then
69719: LD_VAR 0 3
69723: PUSH
69724: LD_INT 111
69726: EQUAL
69727: IFFALSE 69737
// sOil := true ;
69729: LD_ADDR_EXP 104
69733: PUSH
69734: LD_INT 1
69736: ST_TO_ADDR
// if p3 = 112 then
69737: LD_VAR 0 3
69741: PUSH
69742: LD_INT 112
69744: EQUAL
69745: IFFALSE 69755
// sStu := true ;
69747: LD_ADDR_EXP 108
69751: PUSH
69752: LD_INT 1
69754: ST_TO_ADDR
// if p3 = 113 then
69755: LD_VAR 0 3
69759: PUSH
69760: LD_INT 113
69762: EQUAL
69763: IFFALSE 69773
// sBazooka := true ;
69765: LD_ADDR_EXP 111
69769: PUSH
69770: LD_INT 1
69772: ST_TO_ADDR
// if p3 = 114 then
69773: LD_VAR 0 3
69777: PUSH
69778: LD_INT 114
69780: EQUAL
69781: IFFALSE 69791
// sMortar := true ;
69783: LD_ADDR_EXP 112
69787: PUSH
69788: LD_INT 1
69790: ST_TO_ADDR
// if p3 = 115 then
69791: LD_VAR 0 3
69795: PUSH
69796: LD_INT 115
69798: EQUAL
69799: IFFALSE 69809
// sRanger := true ;
69801: LD_ADDR_EXP 122
69805: PUSH
69806: LD_INT 1
69808: ST_TO_ADDR
// if p3 = 116 then
69809: LD_VAR 0 3
69813: PUSH
69814: LD_INT 116
69816: EQUAL
69817: IFFALSE 69827
// sComputer := true ;
69819: LD_ADDR_EXP 123
69823: PUSH
69824: LD_INT 1
69826: ST_TO_ADDR
// if p3 = 117 then
69827: LD_VAR 0 3
69831: PUSH
69832: LD_INT 117
69834: EQUAL
69835: IFFALSE 69845
// s30 := true ;
69837: LD_ADDR_EXP 124
69841: PUSH
69842: LD_INT 1
69844: ST_TO_ADDR
// if p3 = 118 then
69845: LD_VAR 0 3
69849: PUSH
69850: LD_INT 118
69852: EQUAL
69853: IFFALSE 69863
// s60 := true ;
69855: LD_ADDR_EXP 125
69859: PUSH
69860: LD_INT 1
69862: ST_TO_ADDR
// end ; if p2 = stream_mode then
69863: LD_VAR 0 2
69867: PUSH
69868: LD_INT 101
69870: EQUAL
69871: IFFALSE 69999
// begin case p3 of 1 :
69873: LD_VAR 0 3
69877: PUSH
69878: LD_INT 1
69880: DOUBLE
69881: EQUAL
69882: IFTRUE 69886
69884: GO 69893
69886: POP
// hHackUnlimitedResources ; 2 :
69887: CALL 82097 0 0
69891: GO 69999
69893: LD_INT 2
69895: DOUBLE
69896: EQUAL
69897: IFTRUE 69901
69899: GO 69908
69901: POP
// hHackSetLevel10 ; 3 :
69902: CALL 82230 0 0
69906: GO 69999
69908: LD_INT 3
69910: DOUBLE
69911: EQUAL
69912: IFTRUE 69916
69914: GO 69923
69916: POP
// hHackSetLevel10YourUnits ; 4 :
69917: CALL 82315 0 0
69921: GO 69999
69923: LD_INT 4
69925: DOUBLE
69926: EQUAL
69927: IFTRUE 69931
69929: GO 69938
69931: POP
// hHackInvincible ; 5 :
69932: CALL 82763 0 0
69936: GO 69999
69938: LD_INT 5
69940: DOUBLE
69941: EQUAL
69942: IFTRUE 69946
69944: GO 69953
69946: POP
// hHackInvisible ; 6 :
69947: CALL 82874 0 0
69951: GO 69999
69953: LD_INT 6
69955: DOUBLE
69956: EQUAL
69957: IFTRUE 69961
69959: GO 69968
69961: POP
// hHackChangeYourSide ; 7 :
69962: CALL 82931 0 0
69966: GO 69999
69968: LD_INT 7
69970: DOUBLE
69971: EQUAL
69972: IFTRUE 69976
69974: GO 69983
69976: POP
// hHackChangeUnitSide ; 8 :
69977: CALL 82973 0 0
69981: GO 69999
69983: LD_INT 8
69985: DOUBLE
69986: EQUAL
69987: IFTRUE 69991
69989: GO 69998
69991: POP
// hHackFog ; end ;
69992: CALL 83074 0 0
69996: GO 69999
69998: POP
// end ; end ;
69999: LD_VAR 0 7
70003: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
70004: GO 70006
70006: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
70007: LD_STRING initStreamRollete();
70009: PPUSH
70010: CALL_OW 559
// InitStreamMode ;
70014: CALL 70026 0 0
// DefineStreamItems ( false ) ;
70018: LD_INT 0
70020: PPUSH
70021: CALL 70490 0 1
// end ;
70025: END
// function InitStreamMode ; begin
70026: LD_INT 0
70028: PPUSH
// streamModeActive := false ;
70029: LD_ADDR_EXP 69
70033: PUSH
70034: LD_INT 0
70036: ST_TO_ADDR
// normalCounter := 36 ;
70037: LD_ADDR_EXP 70
70041: PUSH
70042: LD_INT 36
70044: ST_TO_ADDR
// hardcoreCounter := 18 ;
70045: LD_ADDR_EXP 71
70049: PUSH
70050: LD_INT 18
70052: ST_TO_ADDR
// sRocket := false ;
70053: LD_ADDR_EXP 74
70057: PUSH
70058: LD_INT 0
70060: ST_TO_ADDR
// sSpeed := false ;
70061: LD_ADDR_EXP 73
70065: PUSH
70066: LD_INT 0
70068: ST_TO_ADDR
// sEngine := false ;
70069: LD_ADDR_EXP 75
70073: PUSH
70074: LD_INT 0
70076: ST_TO_ADDR
// sSpec := false ;
70077: LD_ADDR_EXP 72
70081: PUSH
70082: LD_INT 0
70084: ST_TO_ADDR
// sLevel := false ;
70085: LD_ADDR_EXP 76
70089: PUSH
70090: LD_INT 0
70092: ST_TO_ADDR
// sArmoury := false ;
70093: LD_ADDR_EXP 77
70097: PUSH
70098: LD_INT 0
70100: ST_TO_ADDR
// sRadar := false ;
70101: LD_ADDR_EXP 78
70105: PUSH
70106: LD_INT 0
70108: ST_TO_ADDR
// sBunker := false ;
70109: LD_ADDR_EXP 79
70113: PUSH
70114: LD_INT 0
70116: ST_TO_ADDR
// sHack := false ;
70117: LD_ADDR_EXP 80
70121: PUSH
70122: LD_INT 0
70124: ST_TO_ADDR
// sFire := false ;
70125: LD_ADDR_EXP 81
70129: PUSH
70130: LD_INT 0
70132: ST_TO_ADDR
// sRefresh := false ;
70133: LD_ADDR_EXP 82
70137: PUSH
70138: LD_INT 0
70140: ST_TO_ADDR
// sExp := false ;
70141: LD_ADDR_EXP 83
70145: PUSH
70146: LD_INT 0
70148: ST_TO_ADDR
// sDepot := false ;
70149: LD_ADDR_EXP 84
70153: PUSH
70154: LD_INT 0
70156: ST_TO_ADDR
// sFlag := false ;
70157: LD_ADDR_EXP 85
70161: PUSH
70162: LD_INT 0
70164: ST_TO_ADDR
// sKamikadze := false ;
70165: LD_ADDR_EXP 93
70169: PUSH
70170: LD_INT 0
70172: ST_TO_ADDR
// sTroll := false ;
70173: LD_ADDR_EXP 94
70177: PUSH
70178: LD_INT 0
70180: ST_TO_ADDR
// sSlow := false ;
70181: LD_ADDR_EXP 95
70185: PUSH
70186: LD_INT 0
70188: ST_TO_ADDR
// sLack := false ;
70189: LD_ADDR_EXP 96
70193: PUSH
70194: LD_INT 0
70196: ST_TO_ADDR
// sTank := false ;
70197: LD_ADDR_EXP 98
70201: PUSH
70202: LD_INT 0
70204: ST_TO_ADDR
// sRemote := false ;
70205: LD_ADDR_EXP 99
70209: PUSH
70210: LD_INT 0
70212: ST_TO_ADDR
// sPowell := false ;
70213: LD_ADDR_EXP 100
70217: PUSH
70218: LD_INT 0
70220: ST_TO_ADDR
// sTeleport := false ;
70221: LD_ADDR_EXP 103
70225: PUSH
70226: LD_INT 0
70228: ST_TO_ADDR
// sOilTower := false ;
70229: LD_ADDR_EXP 105
70233: PUSH
70234: LD_INT 0
70236: ST_TO_ADDR
// sShovel := false ;
70237: LD_ADDR_EXP 106
70241: PUSH
70242: LD_INT 0
70244: ST_TO_ADDR
// sSheik := false ;
70245: LD_ADDR_EXP 107
70249: PUSH
70250: LD_INT 0
70252: ST_TO_ADDR
// sEarthquake := false ;
70253: LD_ADDR_EXP 109
70257: PUSH
70258: LD_INT 0
70260: ST_TO_ADDR
// sAI := false ;
70261: LD_ADDR_EXP 110
70265: PUSH
70266: LD_INT 0
70268: ST_TO_ADDR
// sCargo := false ;
70269: LD_ADDR_EXP 113
70273: PUSH
70274: LD_INT 0
70276: ST_TO_ADDR
// sDLaser := false ;
70277: LD_ADDR_EXP 114
70281: PUSH
70282: LD_INT 0
70284: ST_TO_ADDR
// sExchange := false ;
70285: LD_ADDR_EXP 115
70289: PUSH
70290: LD_INT 0
70292: ST_TO_ADDR
// sFac := false ;
70293: LD_ADDR_EXP 116
70297: PUSH
70298: LD_INT 0
70300: ST_TO_ADDR
// sPower := false ;
70301: LD_ADDR_EXP 117
70305: PUSH
70306: LD_INT 0
70308: ST_TO_ADDR
// sRandom := false ;
70309: LD_ADDR_EXP 118
70313: PUSH
70314: LD_INT 0
70316: ST_TO_ADDR
// sShield := false ;
70317: LD_ADDR_EXP 119
70321: PUSH
70322: LD_INT 0
70324: ST_TO_ADDR
// sTime := false ;
70325: LD_ADDR_EXP 120
70329: PUSH
70330: LD_INT 0
70332: ST_TO_ADDR
// sTools := false ;
70333: LD_ADDR_EXP 121
70337: PUSH
70338: LD_INT 0
70340: ST_TO_ADDR
// sSold := false ;
70341: LD_ADDR_EXP 86
70345: PUSH
70346: LD_INT 0
70348: ST_TO_ADDR
// sDiff := false ;
70349: LD_ADDR_EXP 87
70353: PUSH
70354: LD_INT 0
70356: ST_TO_ADDR
// sFog := false ;
70357: LD_ADDR_EXP 90
70361: PUSH
70362: LD_INT 0
70364: ST_TO_ADDR
// sReset := false ;
70365: LD_ADDR_EXP 91
70369: PUSH
70370: LD_INT 0
70372: ST_TO_ADDR
// sSun := false ;
70373: LD_ADDR_EXP 92
70377: PUSH
70378: LD_INT 0
70380: ST_TO_ADDR
// sTiger := false ;
70381: LD_ADDR_EXP 88
70385: PUSH
70386: LD_INT 0
70388: ST_TO_ADDR
// sBomb := false ;
70389: LD_ADDR_EXP 89
70393: PUSH
70394: LD_INT 0
70396: ST_TO_ADDR
// sWound := false ;
70397: LD_ADDR_EXP 97
70401: PUSH
70402: LD_INT 0
70404: ST_TO_ADDR
// sBetray := false ;
70405: LD_ADDR_EXP 101
70409: PUSH
70410: LD_INT 0
70412: ST_TO_ADDR
// sContamin := false ;
70413: LD_ADDR_EXP 102
70417: PUSH
70418: LD_INT 0
70420: ST_TO_ADDR
// sOil := false ;
70421: LD_ADDR_EXP 104
70425: PUSH
70426: LD_INT 0
70428: ST_TO_ADDR
// sStu := false ;
70429: LD_ADDR_EXP 108
70433: PUSH
70434: LD_INT 0
70436: ST_TO_ADDR
// sBazooka := false ;
70437: LD_ADDR_EXP 111
70441: PUSH
70442: LD_INT 0
70444: ST_TO_ADDR
// sMortar := false ;
70445: LD_ADDR_EXP 112
70449: PUSH
70450: LD_INT 0
70452: ST_TO_ADDR
// sRanger := false ;
70453: LD_ADDR_EXP 122
70457: PUSH
70458: LD_INT 0
70460: ST_TO_ADDR
// sComputer := false ;
70461: LD_ADDR_EXP 123
70465: PUSH
70466: LD_INT 0
70468: ST_TO_ADDR
// s30 := false ;
70469: LD_ADDR_EXP 124
70473: PUSH
70474: LD_INT 0
70476: ST_TO_ADDR
// s60 := false ;
70477: LD_ADDR_EXP 125
70481: PUSH
70482: LD_INT 0
70484: ST_TO_ADDR
// end ;
70485: LD_VAR 0 1
70489: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
70490: LD_INT 0
70492: PPUSH
70493: PPUSH
70494: PPUSH
70495: PPUSH
70496: PPUSH
70497: PPUSH
70498: PPUSH
// result := [ ] ;
70499: LD_ADDR_VAR 0 2
70503: PUSH
70504: EMPTY
70505: ST_TO_ADDR
// if campaign_id = 1 then
70506: LD_OWVAR 69
70510: PUSH
70511: LD_INT 1
70513: EQUAL
70514: IFFALSE 73680
// begin case mission_number of 1 :
70516: LD_OWVAR 70
70520: PUSH
70521: LD_INT 1
70523: DOUBLE
70524: EQUAL
70525: IFTRUE 70529
70527: GO 70605
70529: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
70530: LD_ADDR_VAR 0 2
70534: PUSH
70535: LD_INT 2
70537: PUSH
70538: LD_INT 4
70540: PUSH
70541: LD_INT 11
70543: PUSH
70544: LD_INT 12
70546: PUSH
70547: LD_INT 15
70549: PUSH
70550: LD_INT 16
70552: PUSH
70553: LD_INT 22
70555: PUSH
70556: LD_INT 23
70558: PUSH
70559: LD_INT 26
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 101
70575: PUSH
70576: LD_INT 102
70578: PUSH
70579: LD_INT 106
70581: PUSH
70582: LD_INT 116
70584: PUSH
70585: LD_INT 117
70587: PUSH
70588: LD_INT 118
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: ST_TO_ADDR
70603: GO 73678
70605: LD_INT 2
70607: DOUBLE
70608: EQUAL
70609: IFTRUE 70613
70611: GO 70697
70613: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
70614: LD_ADDR_VAR 0 2
70618: PUSH
70619: LD_INT 2
70621: PUSH
70622: LD_INT 4
70624: PUSH
70625: LD_INT 11
70627: PUSH
70628: LD_INT 12
70630: PUSH
70631: LD_INT 15
70633: PUSH
70634: LD_INT 16
70636: PUSH
70637: LD_INT 22
70639: PUSH
70640: LD_INT 23
70642: PUSH
70643: LD_INT 26
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 101
70659: PUSH
70660: LD_INT 102
70662: PUSH
70663: LD_INT 105
70665: PUSH
70666: LD_INT 106
70668: PUSH
70669: LD_INT 108
70671: PUSH
70672: LD_INT 116
70674: PUSH
70675: LD_INT 117
70677: PUSH
70678: LD_INT 118
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: ST_TO_ADDR
70695: GO 73678
70697: LD_INT 3
70699: DOUBLE
70700: EQUAL
70701: IFTRUE 70705
70703: GO 70793
70705: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
70706: LD_ADDR_VAR 0 2
70710: PUSH
70711: LD_INT 2
70713: PUSH
70714: LD_INT 4
70716: PUSH
70717: LD_INT 5
70719: PUSH
70720: LD_INT 11
70722: PUSH
70723: LD_INT 12
70725: PUSH
70726: LD_INT 15
70728: PUSH
70729: LD_INT 16
70731: PUSH
70732: LD_INT 22
70734: PUSH
70735: LD_INT 26
70737: PUSH
70738: LD_INT 36
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 101
70755: PUSH
70756: LD_INT 102
70758: PUSH
70759: LD_INT 105
70761: PUSH
70762: LD_INT 106
70764: PUSH
70765: LD_INT 108
70767: PUSH
70768: LD_INT 116
70770: PUSH
70771: LD_INT 117
70773: PUSH
70774: LD_INT 118
70776: PUSH
70777: EMPTY
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: LIST
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: ST_TO_ADDR
70791: GO 73678
70793: LD_INT 4
70795: DOUBLE
70796: EQUAL
70797: IFTRUE 70801
70799: GO 70897
70801: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
70802: LD_ADDR_VAR 0 2
70806: PUSH
70807: LD_INT 2
70809: PUSH
70810: LD_INT 4
70812: PUSH
70813: LD_INT 5
70815: PUSH
70816: LD_INT 8
70818: PUSH
70819: LD_INT 11
70821: PUSH
70822: LD_INT 12
70824: PUSH
70825: LD_INT 15
70827: PUSH
70828: LD_INT 16
70830: PUSH
70831: LD_INT 22
70833: PUSH
70834: LD_INT 23
70836: PUSH
70837: LD_INT 26
70839: PUSH
70840: LD_INT 36
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: PUSH
70857: LD_INT 101
70859: PUSH
70860: LD_INT 102
70862: PUSH
70863: LD_INT 105
70865: PUSH
70866: LD_INT 106
70868: PUSH
70869: LD_INT 108
70871: PUSH
70872: LD_INT 116
70874: PUSH
70875: LD_INT 117
70877: PUSH
70878: LD_INT 118
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: ST_TO_ADDR
70895: GO 73678
70897: LD_INT 5
70899: DOUBLE
70900: EQUAL
70901: IFTRUE 70905
70903: GO 71017
70905: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
70906: LD_ADDR_VAR 0 2
70910: PUSH
70911: LD_INT 2
70913: PUSH
70914: LD_INT 4
70916: PUSH
70917: LD_INT 5
70919: PUSH
70920: LD_INT 6
70922: PUSH
70923: LD_INT 8
70925: PUSH
70926: LD_INT 11
70928: PUSH
70929: LD_INT 12
70931: PUSH
70932: LD_INT 15
70934: PUSH
70935: LD_INT 16
70937: PUSH
70938: LD_INT 22
70940: PUSH
70941: LD_INT 23
70943: PUSH
70944: LD_INT 25
70946: PUSH
70947: LD_INT 26
70949: PUSH
70950: LD_INT 36
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 101
70971: PUSH
70972: LD_INT 102
70974: PUSH
70975: LD_INT 105
70977: PUSH
70978: LD_INT 106
70980: PUSH
70981: LD_INT 108
70983: PUSH
70984: LD_INT 109
70986: PUSH
70987: LD_INT 112
70989: PUSH
70990: LD_INT 116
70992: PUSH
70993: LD_INT 117
70995: PUSH
70996: LD_INT 118
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: ST_TO_ADDR
71015: GO 73678
71017: LD_INT 6
71019: DOUBLE
71020: EQUAL
71021: IFTRUE 71025
71023: GO 71157
71025: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
71026: LD_ADDR_VAR 0 2
71030: PUSH
71031: LD_INT 2
71033: PUSH
71034: LD_INT 4
71036: PUSH
71037: LD_INT 5
71039: PUSH
71040: LD_INT 6
71042: PUSH
71043: LD_INT 8
71045: PUSH
71046: LD_INT 11
71048: PUSH
71049: LD_INT 12
71051: PUSH
71052: LD_INT 15
71054: PUSH
71055: LD_INT 16
71057: PUSH
71058: LD_INT 20
71060: PUSH
71061: LD_INT 21
71063: PUSH
71064: LD_INT 22
71066: PUSH
71067: LD_INT 23
71069: PUSH
71070: LD_INT 25
71072: PUSH
71073: LD_INT 26
71075: PUSH
71076: LD_INT 30
71078: PUSH
71079: LD_INT 31
71081: PUSH
71082: LD_INT 32
71084: PUSH
71085: LD_INT 36
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: LIST
71099: LIST
71100: LIST
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: PUSH
71109: LD_INT 101
71111: PUSH
71112: LD_INT 102
71114: PUSH
71115: LD_INT 105
71117: PUSH
71118: LD_INT 106
71120: PUSH
71121: LD_INT 108
71123: PUSH
71124: LD_INT 109
71126: PUSH
71127: LD_INT 112
71129: PUSH
71130: LD_INT 116
71132: PUSH
71133: LD_INT 117
71135: PUSH
71136: LD_INT 118
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: ST_TO_ADDR
71155: GO 73678
71157: LD_INT 7
71159: DOUBLE
71160: EQUAL
71161: IFTRUE 71165
71163: GO 71277
71165: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
71166: LD_ADDR_VAR 0 2
71170: PUSH
71171: LD_INT 2
71173: PUSH
71174: LD_INT 4
71176: PUSH
71177: LD_INT 5
71179: PUSH
71180: LD_INT 7
71182: PUSH
71183: LD_INT 11
71185: PUSH
71186: LD_INT 12
71188: PUSH
71189: LD_INT 15
71191: PUSH
71192: LD_INT 16
71194: PUSH
71195: LD_INT 20
71197: PUSH
71198: LD_INT 21
71200: PUSH
71201: LD_INT 22
71203: PUSH
71204: LD_INT 23
71206: PUSH
71207: LD_INT 25
71209: PUSH
71210: LD_INT 26
71212: PUSH
71213: EMPTY
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: LIST
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: PUSH
71229: LD_INT 101
71231: PUSH
71232: LD_INT 102
71234: PUSH
71235: LD_INT 103
71237: PUSH
71238: LD_INT 105
71240: PUSH
71241: LD_INT 106
71243: PUSH
71244: LD_INT 108
71246: PUSH
71247: LD_INT 112
71249: PUSH
71250: LD_INT 116
71252: PUSH
71253: LD_INT 117
71255: PUSH
71256: LD_INT 118
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: ST_TO_ADDR
71275: GO 73678
71277: LD_INT 8
71279: DOUBLE
71280: EQUAL
71281: IFTRUE 71285
71283: GO 71425
71285: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
71286: LD_ADDR_VAR 0 2
71290: PUSH
71291: LD_INT 2
71293: PUSH
71294: LD_INT 4
71296: PUSH
71297: LD_INT 5
71299: PUSH
71300: LD_INT 6
71302: PUSH
71303: LD_INT 7
71305: PUSH
71306: LD_INT 8
71308: PUSH
71309: LD_INT 11
71311: PUSH
71312: LD_INT 12
71314: PUSH
71315: LD_INT 15
71317: PUSH
71318: LD_INT 16
71320: PUSH
71321: LD_INT 20
71323: PUSH
71324: LD_INT 21
71326: PUSH
71327: LD_INT 22
71329: PUSH
71330: LD_INT 23
71332: PUSH
71333: LD_INT 25
71335: PUSH
71336: LD_INT 26
71338: PUSH
71339: LD_INT 30
71341: PUSH
71342: LD_INT 31
71344: PUSH
71345: LD_INT 32
71347: PUSH
71348: LD_INT 36
71350: PUSH
71351: EMPTY
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 101
71375: PUSH
71376: LD_INT 102
71378: PUSH
71379: LD_INT 103
71381: PUSH
71382: LD_INT 105
71384: PUSH
71385: LD_INT 106
71387: PUSH
71388: LD_INT 108
71390: PUSH
71391: LD_INT 109
71393: PUSH
71394: LD_INT 112
71396: PUSH
71397: LD_INT 116
71399: PUSH
71400: LD_INT 117
71402: PUSH
71403: LD_INT 118
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: ST_TO_ADDR
71423: GO 73678
71425: LD_INT 9
71427: DOUBLE
71428: EQUAL
71429: IFTRUE 71433
71431: GO 71581
71433: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
71434: LD_ADDR_VAR 0 2
71438: PUSH
71439: LD_INT 2
71441: PUSH
71442: LD_INT 4
71444: PUSH
71445: LD_INT 5
71447: PUSH
71448: LD_INT 6
71450: PUSH
71451: LD_INT 7
71453: PUSH
71454: LD_INT 8
71456: PUSH
71457: LD_INT 11
71459: PUSH
71460: LD_INT 12
71462: PUSH
71463: LD_INT 15
71465: PUSH
71466: LD_INT 16
71468: PUSH
71469: LD_INT 20
71471: PUSH
71472: LD_INT 21
71474: PUSH
71475: LD_INT 22
71477: PUSH
71478: LD_INT 23
71480: PUSH
71481: LD_INT 25
71483: PUSH
71484: LD_INT 26
71486: PUSH
71487: LD_INT 28
71489: PUSH
71490: LD_INT 30
71492: PUSH
71493: LD_INT 31
71495: PUSH
71496: LD_INT 32
71498: PUSH
71499: LD_INT 36
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 101
71527: PUSH
71528: LD_INT 102
71530: PUSH
71531: LD_INT 103
71533: PUSH
71534: LD_INT 105
71536: PUSH
71537: LD_INT 106
71539: PUSH
71540: LD_INT 108
71542: PUSH
71543: LD_INT 109
71545: PUSH
71546: LD_INT 112
71548: PUSH
71549: LD_INT 114
71551: PUSH
71552: LD_INT 116
71554: PUSH
71555: LD_INT 117
71557: PUSH
71558: LD_INT 118
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: ST_TO_ADDR
71579: GO 73678
71581: LD_INT 10
71583: DOUBLE
71584: EQUAL
71585: IFTRUE 71589
71587: GO 71785
71589: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
71590: LD_ADDR_VAR 0 2
71594: PUSH
71595: LD_INT 2
71597: PUSH
71598: LD_INT 4
71600: PUSH
71601: LD_INT 5
71603: PUSH
71604: LD_INT 6
71606: PUSH
71607: LD_INT 7
71609: PUSH
71610: LD_INT 8
71612: PUSH
71613: LD_INT 9
71615: PUSH
71616: LD_INT 10
71618: PUSH
71619: LD_INT 11
71621: PUSH
71622: LD_INT 12
71624: PUSH
71625: LD_INT 13
71627: PUSH
71628: LD_INT 14
71630: PUSH
71631: LD_INT 15
71633: PUSH
71634: LD_INT 16
71636: PUSH
71637: LD_INT 17
71639: PUSH
71640: LD_INT 18
71642: PUSH
71643: LD_INT 19
71645: PUSH
71646: LD_INT 20
71648: PUSH
71649: LD_INT 21
71651: PUSH
71652: LD_INT 22
71654: PUSH
71655: LD_INT 23
71657: PUSH
71658: LD_INT 24
71660: PUSH
71661: LD_INT 25
71663: PUSH
71664: LD_INT 26
71666: PUSH
71667: LD_INT 28
71669: PUSH
71670: LD_INT 30
71672: PUSH
71673: LD_INT 31
71675: PUSH
71676: LD_INT 32
71678: PUSH
71679: LD_INT 36
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 101
71715: PUSH
71716: LD_INT 102
71718: PUSH
71719: LD_INT 103
71721: PUSH
71722: LD_INT 104
71724: PUSH
71725: LD_INT 105
71727: PUSH
71728: LD_INT 106
71730: PUSH
71731: LD_INT 107
71733: PUSH
71734: LD_INT 108
71736: PUSH
71737: LD_INT 109
71739: PUSH
71740: LD_INT 110
71742: PUSH
71743: LD_INT 111
71745: PUSH
71746: LD_INT 112
71748: PUSH
71749: LD_INT 114
71751: PUSH
71752: LD_INT 116
71754: PUSH
71755: LD_INT 117
71757: PUSH
71758: LD_INT 118
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: LIST
71765: LIST
71766: LIST
71767: LIST
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: ST_TO_ADDR
71783: GO 73678
71785: LD_INT 11
71787: DOUBLE
71788: EQUAL
71789: IFTRUE 71793
71791: GO 71997
71793: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
71794: LD_ADDR_VAR 0 2
71798: PUSH
71799: LD_INT 2
71801: PUSH
71802: LD_INT 3
71804: PUSH
71805: LD_INT 4
71807: PUSH
71808: LD_INT 5
71810: PUSH
71811: LD_INT 6
71813: PUSH
71814: LD_INT 7
71816: PUSH
71817: LD_INT 8
71819: PUSH
71820: LD_INT 9
71822: PUSH
71823: LD_INT 10
71825: PUSH
71826: LD_INT 11
71828: PUSH
71829: LD_INT 12
71831: PUSH
71832: LD_INT 13
71834: PUSH
71835: LD_INT 14
71837: PUSH
71838: LD_INT 15
71840: PUSH
71841: LD_INT 16
71843: PUSH
71844: LD_INT 17
71846: PUSH
71847: LD_INT 18
71849: PUSH
71850: LD_INT 19
71852: PUSH
71853: LD_INT 20
71855: PUSH
71856: LD_INT 21
71858: PUSH
71859: LD_INT 22
71861: PUSH
71862: LD_INT 23
71864: PUSH
71865: LD_INT 24
71867: PUSH
71868: LD_INT 25
71870: PUSH
71871: LD_INT 26
71873: PUSH
71874: LD_INT 28
71876: PUSH
71877: LD_INT 30
71879: PUSH
71880: LD_INT 31
71882: PUSH
71883: LD_INT 32
71885: PUSH
71886: LD_INT 34
71888: PUSH
71889: LD_INT 36
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: PUSH
71925: LD_INT 101
71927: PUSH
71928: LD_INT 102
71930: PUSH
71931: LD_INT 103
71933: PUSH
71934: LD_INT 104
71936: PUSH
71937: LD_INT 105
71939: PUSH
71940: LD_INT 106
71942: PUSH
71943: LD_INT 107
71945: PUSH
71946: LD_INT 108
71948: PUSH
71949: LD_INT 109
71951: PUSH
71952: LD_INT 110
71954: PUSH
71955: LD_INT 111
71957: PUSH
71958: LD_INT 112
71960: PUSH
71961: LD_INT 114
71963: PUSH
71964: LD_INT 116
71966: PUSH
71967: LD_INT 117
71969: PUSH
71970: LD_INT 118
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: LIST
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: ST_TO_ADDR
71995: GO 73678
71997: LD_INT 12
71999: DOUBLE
72000: EQUAL
72001: IFTRUE 72005
72003: GO 72225
72005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
72006: LD_ADDR_VAR 0 2
72010: PUSH
72011: LD_INT 1
72013: PUSH
72014: LD_INT 2
72016: PUSH
72017: LD_INT 3
72019: PUSH
72020: LD_INT 4
72022: PUSH
72023: LD_INT 5
72025: PUSH
72026: LD_INT 6
72028: PUSH
72029: LD_INT 7
72031: PUSH
72032: LD_INT 8
72034: PUSH
72035: LD_INT 9
72037: PUSH
72038: LD_INT 10
72040: PUSH
72041: LD_INT 11
72043: PUSH
72044: LD_INT 12
72046: PUSH
72047: LD_INT 13
72049: PUSH
72050: LD_INT 14
72052: PUSH
72053: LD_INT 15
72055: PUSH
72056: LD_INT 16
72058: PUSH
72059: LD_INT 17
72061: PUSH
72062: LD_INT 18
72064: PUSH
72065: LD_INT 19
72067: PUSH
72068: LD_INT 20
72070: PUSH
72071: LD_INT 21
72073: PUSH
72074: LD_INT 22
72076: PUSH
72077: LD_INT 23
72079: PUSH
72080: LD_INT 24
72082: PUSH
72083: LD_INT 25
72085: PUSH
72086: LD_INT 26
72088: PUSH
72089: LD_INT 27
72091: PUSH
72092: LD_INT 28
72094: PUSH
72095: LD_INT 30
72097: PUSH
72098: LD_INT 31
72100: PUSH
72101: LD_INT 32
72103: PUSH
72104: LD_INT 33
72106: PUSH
72107: LD_INT 34
72109: PUSH
72110: LD_INT 36
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 101
72151: PUSH
72152: LD_INT 102
72154: PUSH
72155: LD_INT 103
72157: PUSH
72158: LD_INT 104
72160: PUSH
72161: LD_INT 105
72163: PUSH
72164: LD_INT 106
72166: PUSH
72167: LD_INT 107
72169: PUSH
72170: LD_INT 108
72172: PUSH
72173: LD_INT 109
72175: PUSH
72176: LD_INT 110
72178: PUSH
72179: LD_INT 111
72181: PUSH
72182: LD_INT 112
72184: PUSH
72185: LD_INT 113
72187: PUSH
72188: LD_INT 114
72190: PUSH
72191: LD_INT 116
72193: PUSH
72194: LD_INT 117
72196: PUSH
72197: LD_INT 118
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: PUSH
72219: EMPTY
72220: LIST
72221: LIST
72222: ST_TO_ADDR
72223: GO 73678
72225: LD_INT 13
72227: DOUBLE
72228: EQUAL
72229: IFTRUE 72233
72231: GO 72441
72233: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
72234: LD_ADDR_VAR 0 2
72238: PUSH
72239: LD_INT 1
72241: PUSH
72242: LD_INT 2
72244: PUSH
72245: LD_INT 3
72247: PUSH
72248: LD_INT 4
72250: PUSH
72251: LD_INT 5
72253: PUSH
72254: LD_INT 8
72256: PUSH
72257: LD_INT 9
72259: PUSH
72260: LD_INT 10
72262: PUSH
72263: LD_INT 11
72265: PUSH
72266: LD_INT 12
72268: PUSH
72269: LD_INT 14
72271: PUSH
72272: LD_INT 15
72274: PUSH
72275: LD_INT 16
72277: PUSH
72278: LD_INT 17
72280: PUSH
72281: LD_INT 18
72283: PUSH
72284: LD_INT 19
72286: PUSH
72287: LD_INT 20
72289: PUSH
72290: LD_INT 21
72292: PUSH
72293: LD_INT 22
72295: PUSH
72296: LD_INT 23
72298: PUSH
72299: LD_INT 24
72301: PUSH
72302: LD_INT 25
72304: PUSH
72305: LD_INT 26
72307: PUSH
72308: LD_INT 27
72310: PUSH
72311: LD_INT 28
72313: PUSH
72314: LD_INT 30
72316: PUSH
72317: LD_INT 31
72319: PUSH
72320: LD_INT 32
72322: PUSH
72323: LD_INT 33
72325: PUSH
72326: LD_INT 34
72328: PUSH
72329: LD_INT 36
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 101
72367: PUSH
72368: LD_INT 102
72370: PUSH
72371: LD_INT 103
72373: PUSH
72374: LD_INT 104
72376: PUSH
72377: LD_INT 105
72379: PUSH
72380: LD_INT 106
72382: PUSH
72383: LD_INT 107
72385: PUSH
72386: LD_INT 108
72388: PUSH
72389: LD_INT 109
72391: PUSH
72392: LD_INT 110
72394: PUSH
72395: LD_INT 111
72397: PUSH
72398: LD_INT 112
72400: PUSH
72401: LD_INT 113
72403: PUSH
72404: LD_INT 114
72406: PUSH
72407: LD_INT 116
72409: PUSH
72410: LD_INT 117
72412: PUSH
72413: LD_INT 118
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: LIST
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: LIST
72425: LIST
72426: LIST
72427: LIST
72428: LIST
72429: LIST
72430: LIST
72431: LIST
72432: LIST
72433: LIST
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: ST_TO_ADDR
72439: GO 73678
72441: LD_INT 14
72443: DOUBLE
72444: EQUAL
72445: IFTRUE 72449
72447: GO 72673
72449: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
72450: LD_ADDR_VAR 0 2
72454: PUSH
72455: LD_INT 1
72457: PUSH
72458: LD_INT 2
72460: PUSH
72461: LD_INT 3
72463: PUSH
72464: LD_INT 4
72466: PUSH
72467: LD_INT 5
72469: PUSH
72470: LD_INT 6
72472: PUSH
72473: LD_INT 7
72475: PUSH
72476: LD_INT 8
72478: PUSH
72479: LD_INT 9
72481: PUSH
72482: LD_INT 10
72484: PUSH
72485: LD_INT 11
72487: PUSH
72488: LD_INT 12
72490: PUSH
72491: LD_INT 13
72493: PUSH
72494: LD_INT 14
72496: PUSH
72497: LD_INT 15
72499: PUSH
72500: LD_INT 16
72502: PUSH
72503: LD_INT 17
72505: PUSH
72506: LD_INT 18
72508: PUSH
72509: LD_INT 19
72511: PUSH
72512: LD_INT 20
72514: PUSH
72515: LD_INT 21
72517: PUSH
72518: LD_INT 22
72520: PUSH
72521: LD_INT 23
72523: PUSH
72524: LD_INT 24
72526: PUSH
72527: LD_INT 25
72529: PUSH
72530: LD_INT 26
72532: PUSH
72533: LD_INT 27
72535: PUSH
72536: LD_INT 28
72538: PUSH
72539: LD_INT 29
72541: PUSH
72542: LD_INT 30
72544: PUSH
72545: LD_INT 31
72547: PUSH
72548: LD_INT 32
72550: PUSH
72551: LD_INT 33
72553: PUSH
72554: LD_INT 34
72556: PUSH
72557: LD_INT 36
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: LIST
72568: LIST
72569: LIST
72570: LIST
72571: LIST
72572: LIST
72573: LIST
72574: LIST
72575: LIST
72576: LIST
72577: LIST
72578: LIST
72579: LIST
72580: LIST
72581: LIST
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: PUSH
72597: LD_INT 101
72599: PUSH
72600: LD_INT 102
72602: PUSH
72603: LD_INT 103
72605: PUSH
72606: LD_INT 104
72608: PUSH
72609: LD_INT 105
72611: PUSH
72612: LD_INT 106
72614: PUSH
72615: LD_INT 107
72617: PUSH
72618: LD_INT 108
72620: PUSH
72621: LD_INT 109
72623: PUSH
72624: LD_INT 110
72626: PUSH
72627: LD_INT 111
72629: PUSH
72630: LD_INT 112
72632: PUSH
72633: LD_INT 113
72635: PUSH
72636: LD_INT 114
72638: PUSH
72639: LD_INT 116
72641: PUSH
72642: LD_INT 117
72644: PUSH
72645: LD_INT 118
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: ST_TO_ADDR
72671: GO 73678
72673: LD_INT 15
72675: DOUBLE
72676: EQUAL
72677: IFTRUE 72681
72679: GO 72905
72681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
72682: LD_ADDR_VAR 0 2
72686: PUSH
72687: LD_INT 1
72689: PUSH
72690: LD_INT 2
72692: PUSH
72693: LD_INT 3
72695: PUSH
72696: LD_INT 4
72698: PUSH
72699: LD_INT 5
72701: PUSH
72702: LD_INT 6
72704: PUSH
72705: LD_INT 7
72707: PUSH
72708: LD_INT 8
72710: PUSH
72711: LD_INT 9
72713: PUSH
72714: LD_INT 10
72716: PUSH
72717: LD_INT 11
72719: PUSH
72720: LD_INT 12
72722: PUSH
72723: LD_INT 13
72725: PUSH
72726: LD_INT 14
72728: PUSH
72729: LD_INT 15
72731: PUSH
72732: LD_INT 16
72734: PUSH
72735: LD_INT 17
72737: PUSH
72738: LD_INT 18
72740: PUSH
72741: LD_INT 19
72743: PUSH
72744: LD_INT 20
72746: PUSH
72747: LD_INT 21
72749: PUSH
72750: LD_INT 22
72752: PUSH
72753: LD_INT 23
72755: PUSH
72756: LD_INT 24
72758: PUSH
72759: LD_INT 25
72761: PUSH
72762: LD_INT 26
72764: PUSH
72765: LD_INT 27
72767: PUSH
72768: LD_INT 28
72770: PUSH
72771: LD_INT 29
72773: PUSH
72774: LD_INT 30
72776: PUSH
72777: LD_INT 31
72779: PUSH
72780: LD_INT 32
72782: PUSH
72783: LD_INT 33
72785: PUSH
72786: LD_INT 34
72788: PUSH
72789: LD_INT 36
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 101
72831: PUSH
72832: LD_INT 102
72834: PUSH
72835: LD_INT 103
72837: PUSH
72838: LD_INT 104
72840: PUSH
72841: LD_INT 105
72843: PUSH
72844: LD_INT 106
72846: PUSH
72847: LD_INT 107
72849: PUSH
72850: LD_INT 108
72852: PUSH
72853: LD_INT 109
72855: PUSH
72856: LD_INT 110
72858: PUSH
72859: LD_INT 111
72861: PUSH
72862: LD_INT 112
72864: PUSH
72865: LD_INT 113
72867: PUSH
72868: LD_INT 114
72870: PUSH
72871: LD_INT 116
72873: PUSH
72874: LD_INT 117
72876: PUSH
72877: LD_INT 118
72879: PUSH
72880: EMPTY
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: ST_TO_ADDR
72903: GO 73678
72905: LD_INT 16
72907: DOUBLE
72908: EQUAL
72909: IFTRUE 72913
72911: GO 73049
72913: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
72914: LD_ADDR_VAR 0 2
72918: PUSH
72919: LD_INT 2
72921: PUSH
72922: LD_INT 4
72924: PUSH
72925: LD_INT 5
72927: PUSH
72928: LD_INT 7
72930: PUSH
72931: LD_INT 11
72933: PUSH
72934: LD_INT 12
72936: PUSH
72937: LD_INT 15
72939: PUSH
72940: LD_INT 16
72942: PUSH
72943: LD_INT 20
72945: PUSH
72946: LD_INT 21
72948: PUSH
72949: LD_INT 22
72951: PUSH
72952: LD_INT 23
72954: PUSH
72955: LD_INT 25
72957: PUSH
72958: LD_INT 26
72960: PUSH
72961: LD_INT 30
72963: PUSH
72964: LD_INT 31
72966: PUSH
72967: LD_INT 32
72969: PUSH
72970: LD_INT 33
72972: PUSH
72973: LD_INT 34
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: LIST
72980: LIST
72981: LIST
72982: LIST
72983: LIST
72984: LIST
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 101
72999: PUSH
73000: LD_INT 102
73002: PUSH
73003: LD_INT 103
73005: PUSH
73006: LD_INT 106
73008: PUSH
73009: LD_INT 108
73011: PUSH
73012: LD_INT 112
73014: PUSH
73015: LD_INT 113
73017: PUSH
73018: LD_INT 114
73020: PUSH
73021: LD_INT 116
73023: PUSH
73024: LD_INT 117
73026: PUSH
73027: LD_INT 118
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: LIST
73034: LIST
73035: LIST
73036: LIST
73037: LIST
73038: LIST
73039: LIST
73040: LIST
73041: LIST
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: ST_TO_ADDR
73047: GO 73678
73049: LD_INT 17
73051: DOUBLE
73052: EQUAL
73053: IFTRUE 73057
73055: GO 73281
73057: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
73058: LD_ADDR_VAR 0 2
73062: PUSH
73063: LD_INT 1
73065: PUSH
73066: LD_INT 2
73068: PUSH
73069: LD_INT 3
73071: PUSH
73072: LD_INT 4
73074: PUSH
73075: LD_INT 5
73077: PUSH
73078: LD_INT 6
73080: PUSH
73081: LD_INT 7
73083: PUSH
73084: LD_INT 8
73086: PUSH
73087: LD_INT 9
73089: PUSH
73090: LD_INT 10
73092: PUSH
73093: LD_INT 11
73095: PUSH
73096: LD_INT 12
73098: PUSH
73099: LD_INT 13
73101: PUSH
73102: LD_INT 14
73104: PUSH
73105: LD_INT 15
73107: PUSH
73108: LD_INT 16
73110: PUSH
73111: LD_INT 17
73113: PUSH
73114: LD_INT 18
73116: PUSH
73117: LD_INT 19
73119: PUSH
73120: LD_INT 20
73122: PUSH
73123: LD_INT 21
73125: PUSH
73126: LD_INT 22
73128: PUSH
73129: LD_INT 23
73131: PUSH
73132: LD_INT 24
73134: PUSH
73135: LD_INT 25
73137: PUSH
73138: LD_INT 26
73140: PUSH
73141: LD_INT 27
73143: PUSH
73144: LD_INT 28
73146: PUSH
73147: LD_INT 29
73149: PUSH
73150: LD_INT 30
73152: PUSH
73153: LD_INT 31
73155: PUSH
73156: LD_INT 32
73158: PUSH
73159: LD_INT 33
73161: PUSH
73162: LD_INT 34
73164: PUSH
73165: LD_INT 36
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: PUSH
73205: LD_INT 101
73207: PUSH
73208: LD_INT 102
73210: PUSH
73211: LD_INT 103
73213: PUSH
73214: LD_INT 104
73216: PUSH
73217: LD_INT 105
73219: PUSH
73220: LD_INT 106
73222: PUSH
73223: LD_INT 107
73225: PUSH
73226: LD_INT 108
73228: PUSH
73229: LD_INT 109
73231: PUSH
73232: LD_INT 110
73234: PUSH
73235: LD_INT 111
73237: PUSH
73238: LD_INT 112
73240: PUSH
73241: LD_INT 113
73243: PUSH
73244: LD_INT 114
73246: PUSH
73247: LD_INT 116
73249: PUSH
73250: LD_INT 117
73252: PUSH
73253: LD_INT 118
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: LIST
73260: LIST
73261: LIST
73262: LIST
73263: LIST
73264: LIST
73265: LIST
73266: LIST
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: LIST
73272: LIST
73273: LIST
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: ST_TO_ADDR
73279: GO 73678
73281: LD_INT 18
73283: DOUBLE
73284: EQUAL
73285: IFTRUE 73289
73287: GO 73437
73289: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
73290: LD_ADDR_VAR 0 2
73294: PUSH
73295: LD_INT 2
73297: PUSH
73298: LD_INT 4
73300: PUSH
73301: LD_INT 5
73303: PUSH
73304: LD_INT 7
73306: PUSH
73307: LD_INT 11
73309: PUSH
73310: LD_INT 12
73312: PUSH
73313: LD_INT 15
73315: PUSH
73316: LD_INT 16
73318: PUSH
73319: LD_INT 20
73321: PUSH
73322: LD_INT 21
73324: PUSH
73325: LD_INT 22
73327: PUSH
73328: LD_INT 23
73330: PUSH
73331: LD_INT 25
73333: PUSH
73334: LD_INT 26
73336: PUSH
73337: LD_INT 30
73339: PUSH
73340: LD_INT 31
73342: PUSH
73343: LD_INT 32
73345: PUSH
73346: LD_INT 33
73348: PUSH
73349: LD_INT 34
73351: PUSH
73352: LD_INT 35
73354: PUSH
73355: LD_INT 36
73357: PUSH
73358: EMPTY
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 101
73383: PUSH
73384: LD_INT 102
73386: PUSH
73387: LD_INT 103
73389: PUSH
73390: LD_INT 106
73392: PUSH
73393: LD_INT 108
73395: PUSH
73396: LD_INT 112
73398: PUSH
73399: LD_INT 113
73401: PUSH
73402: LD_INT 114
73404: PUSH
73405: LD_INT 115
73407: PUSH
73408: LD_INT 116
73410: PUSH
73411: LD_INT 117
73413: PUSH
73414: LD_INT 118
73416: PUSH
73417: EMPTY
73418: LIST
73419: LIST
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: LIST
73425: LIST
73426: LIST
73427: LIST
73428: LIST
73429: LIST
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: ST_TO_ADDR
73435: GO 73678
73437: LD_INT 19
73439: DOUBLE
73440: EQUAL
73441: IFTRUE 73445
73443: GO 73677
73445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
73446: LD_ADDR_VAR 0 2
73450: PUSH
73451: LD_INT 1
73453: PUSH
73454: LD_INT 2
73456: PUSH
73457: LD_INT 3
73459: PUSH
73460: LD_INT 4
73462: PUSH
73463: LD_INT 5
73465: PUSH
73466: LD_INT 6
73468: PUSH
73469: LD_INT 7
73471: PUSH
73472: LD_INT 8
73474: PUSH
73475: LD_INT 9
73477: PUSH
73478: LD_INT 10
73480: PUSH
73481: LD_INT 11
73483: PUSH
73484: LD_INT 12
73486: PUSH
73487: LD_INT 13
73489: PUSH
73490: LD_INT 14
73492: PUSH
73493: LD_INT 15
73495: PUSH
73496: LD_INT 16
73498: PUSH
73499: LD_INT 17
73501: PUSH
73502: LD_INT 18
73504: PUSH
73505: LD_INT 19
73507: PUSH
73508: LD_INT 20
73510: PUSH
73511: LD_INT 21
73513: PUSH
73514: LD_INT 22
73516: PUSH
73517: LD_INT 23
73519: PUSH
73520: LD_INT 24
73522: PUSH
73523: LD_INT 25
73525: PUSH
73526: LD_INT 26
73528: PUSH
73529: LD_INT 27
73531: PUSH
73532: LD_INT 28
73534: PUSH
73535: LD_INT 29
73537: PUSH
73538: LD_INT 30
73540: PUSH
73541: LD_INT 31
73543: PUSH
73544: LD_INT 32
73546: PUSH
73547: LD_INT 33
73549: PUSH
73550: LD_INT 34
73552: PUSH
73553: LD_INT 35
73555: PUSH
73556: LD_INT 36
73558: PUSH
73559: EMPTY
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: LIST
73579: LIST
73580: LIST
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: PUSH
73597: LD_INT 101
73599: PUSH
73600: LD_INT 102
73602: PUSH
73603: LD_INT 103
73605: PUSH
73606: LD_INT 104
73608: PUSH
73609: LD_INT 105
73611: PUSH
73612: LD_INT 106
73614: PUSH
73615: LD_INT 107
73617: PUSH
73618: LD_INT 108
73620: PUSH
73621: LD_INT 109
73623: PUSH
73624: LD_INT 110
73626: PUSH
73627: LD_INT 111
73629: PUSH
73630: LD_INT 112
73632: PUSH
73633: LD_INT 113
73635: PUSH
73636: LD_INT 114
73638: PUSH
73639: LD_INT 115
73641: PUSH
73642: LD_INT 116
73644: PUSH
73645: LD_INT 117
73647: PUSH
73648: LD_INT 118
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: LIST
73655: LIST
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: ST_TO_ADDR
73675: GO 73678
73677: POP
// end else
73678: GO 73909
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
73680: LD_ADDR_VAR 0 2
73684: PUSH
73685: LD_INT 1
73687: PUSH
73688: LD_INT 2
73690: PUSH
73691: LD_INT 3
73693: PUSH
73694: LD_INT 4
73696: PUSH
73697: LD_INT 5
73699: PUSH
73700: LD_INT 6
73702: PUSH
73703: LD_INT 7
73705: PUSH
73706: LD_INT 8
73708: PUSH
73709: LD_INT 9
73711: PUSH
73712: LD_INT 10
73714: PUSH
73715: LD_INT 11
73717: PUSH
73718: LD_INT 12
73720: PUSH
73721: LD_INT 13
73723: PUSH
73724: LD_INT 14
73726: PUSH
73727: LD_INT 15
73729: PUSH
73730: LD_INT 16
73732: PUSH
73733: LD_INT 17
73735: PUSH
73736: LD_INT 18
73738: PUSH
73739: LD_INT 19
73741: PUSH
73742: LD_INT 20
73744: PUSH
73745: LD_INT 21
73747: PUSH
73748: LD_INT 22
73750: PUSH
73751: LD_INT 23
73753: PUSH
73754: LD_INT 24
73756: PUSH
73757: LD_INT 25
73759: PUSH
73760: LD_INT 26
73762: PUSH
73763: LD_INT 27
73765: PUSH
73766: LD_INT 28
73768: PUSH
73769: LD_INT 29
73771: PUSH
73772: LD_INT 30
73774: PUSH
73775: LD_INT 31
73777: PUSH
73778: LD_INT 32
73780: PUSH
73781: LD_INT 33
73783: PUSH
73784: LD_INT 34
73786: PUSH
73787: LD_INT 35
73789: PUSH
73790: LD_INT 36
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: LIST
73826: LIST
73827: LIST
73828: LIST
73829: LIST
73830: PUSH
73831: LD_INT 101
73833: PUSH
73834: LD_INT 102
73836: PUSH
73837: LD_INT 103
73839: PUSH
73840: LD_INT 104
73842: PUSH
73843: LD_INT 105
73845: PUSH
73846: LD_INT 106
73848: PUSH
73849: LD_INT 107
73851: PUSH
73852: LD_INT 108
73854: PUSH
73855: LD_INT 109
73857: PUSH
73858: LD_INT 110
73860: PUSH
73861: LD_INT 111
73863: PUSH
73864: LD_INT 112
73866: PUSH
73867: LD_INT 113
73869: PUSH
73870: LD_INT 114
73872: PUSH
73873: LD_INT 115
73875: PUSH
73876: LD_INT 116
73878: PUSH
73879: LD_INT 117
73881: PUSH
73882: LD_INT 118
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: ST_TO_ADDR
// if result then
73909: LD_VAR 0 2
73913: IFFALSE 74699
// begin normal :=  ;
73915: LD_ADDR_VAR 0 5
73919: PUSH
73920: LD_STRING 
73922: ST_TO_ADDR
// hardcore :=  ;
73923: LD_ADDR_VAR 0 6
73927: PUSH
73928: LD_STRING 
73930: ST_TO_ADDR
// active :=  ;
73931: LD_ADDR_VAR 0 7
73935: PUSH
73936: LD_STRING 
73938: ST_TO_ADDR
// for i = 1 to normalCounter do
73939: LD_ADDR_VAR 0 8
73943: PUSH
73944: DOUBLE
73945: LD_INT 1
73947: DEC
73948: ST_TO_ADDR
73949: LD_EXP 70
73953: PUSH
73954: FOR_TO
73955: IFFALSE 74056
// begin tmp := 0 ;
73957: LD_ADDR_VAR 0 3
73961: PUSH
73962: LD_STRING 0
73964: ST_TO_ADDR
// if result [ 1 ] then
73965: LD_VAR 0 2
73969: PUSH
73970: LD_INT 1
73972: ARRAY
73973: IFFALSE 74038
// if result [ 1 ] [ 1 ] = i then
73975: LD_VAR 0 2
73979: PUSH
73980: LD_INT 1
73982: ARRAY
73983: PUSH
73984: LD_INT 1
73986: ARRAY
73987: PUSH
73988: LD_VAR 0 8
73992: EQUAL
73993: IFFALSE 74038
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
73995: LD_ADDR_VAR 0 2
73999: PUSH
74000: LD_VAR 0 2
74004: PPUSH
74005: LD_INT 1
74007: PPUSH
74008: LD_VAR 0 2
74012: PUSH
74013: LD_INT 1
74015: ARRAY
74016: PPUSH
74017: LD_INT 1
74019: PPUSH
74020: CALL_OW 3
74024: PPUSH
74025: CALL_OW 1
74029: ST_TO_ADDR
// tmp := 1 ;
74030: LD_ADDR_VAR 0 3
74034: PUSH
74035: LD_STRING 1
74037: ST_TO_ADDR
// end ; normal := normal & tmp ;
74038: LD_ADDR_VAR 0 5
74042: PUSH
74043: LD_VAR 0 5
74047: PUSH
74048: LD_VAR 0 3
74052: STR
74053: ST_TO_ADDR
// end ;
74054: GO 73954
74056: POP
74057: POP
// for i = 1 to hardcoreCounter do
74058: LD_ADDR_VAR 0 8
74062: PUSH
74063: DOUBLE
74064: LD_INT 1
74066: DEC
74067: ST_TO_ADDR
74068: LD_EXP 71
74072: PUSH
74073: FOR_TO
74074: IFFALSE 74179
// begin tmp := 0 ;
74076: LD_ADDR_VAR 0 3
74080: PUSH
74081: LD_STRING 0
74083: ST_TO_ADDR
// if result [ 2 ] then
74084: LD_VAR 0 2
74088: PUSH
74089: LD_INT 2
74091: ARRAY
74092: IFFALSE 74161
// if result [ 2 ] [ 1 ] = 100 + i then
74094: LD_VAR 0 2
74098: PUSH
74099: LD_INT 2
74101: ARRAY
74102: PUSH
74103: LD_INT 1
74105: ARRAY
74106: PUSH
74107: LD_INT 100
74109: PUSH
74110: LD_VAR 0 8
74114: PLUS
74115: EQUAL
74116: IFFALSE 74161
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
74118: LD_ADDR_VAR 0 2
74122: PUSH
74123: LD_VAR 0 2
74127: PPUSH
74128: LD_INT 2
74130: PPUSH
74131: LD_VAR 0 2
74135: PUSH
74136: LD_INT 2
74138: ARRAY
74139: PPUSH
74140: LD_INT 1
74142: PPUSH
74143: CALL_OW 3
74147: PPUSH
74148: CALL_OW 1
74152: ST_TO_ADDR
// tmp := 1 ;
74153: LD_ADDR_VAR 0 3
74157: PUSH
74158: LD_STRING 1
74160: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
74161: LD_ADDR_VAR 0 6
74165: PUSH
74166: LD_VAR 0 6
74170: PUSH
74171: LD_VAR 0 3
74175: STR
74176: ST_TO_ADDR
// end ;
74177: GO 74073
74179: POP
74180: POP
// if isGameLoad then
74181: LD_VAR 0 1
74185: IFFALSE 74660
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
74187: LD_ADDR_VAR 0 4
74191: PUSH
74192: LD_EXP 74
74196: PUSH
74197: LD_EXP 73
74201: PUSH
74202: LD_EXP 75
74206: PUSH
74207: LD_EXP 72
74211: PUSH
74212: LD_EXP 76
74216: PUSH
74217: LD_EXP 77
74221: PUSH
74222: LD_EXP 78
74226: PUSH
74227: LD_EXP 79
74231: PUSH
74232: LD_EXP 80
74236: PUSH
74237: LD_EXP 81
74241: PUSH
74242: LD_EXP 82
74246: PUSH
74247: LD_EXP 83
74251: PUSH
74252: LD_EXP 84
74256: PUSH
74257: LD_EXP 85
74261: PUSH
74262: LD_EXP 93
74266: PUSH
74267: LD_EXP 94
74271: PUSH
74272: LD_EXP 95
74276: PUSH
74277: LD_EXP 96
74281: PUSH
74282: LD_EXP 98
74286: PUSH
74287: LD_EXP 99
74291: PUSH
74292: LD_EXP 100
74296: PUSH
74297: LD_EXP 103
74301: PUSH
74302: LD_EXP 105
74306: PUSH
74307: LD_EXP 106
74311: PUSH
74312: LD_EXP 107
74316: PUSH
74317: LD_EXP 109
74321: PUSH
74322: LD_EXP 110
74326: PUSH
74327: LD_EXP 113
74331: PUSH
74332: LD_EXP 114
74336: PUSH
74337: LD_EXP 115
74341: PUSH
74342: LD_EXP 116
74346: PUSH
74347: LD_EXP 117
74351: PUSH
74352: LD_EXP 118
74356: PUSH
74357: LD_EXP 119
74361: PUSH
74362: LD_EXP 120
74366: PUSH
74367: LD_EXP 121
74371: PUSH
74372: LD_EXP 86
74376: PUSH
74377: LD_EXP 87
74381: PUSH
74382: LD_EXP 90
74386: PUSH
74387: LD_EXP 91
74391: PUSH
74392: LD_EXP 92
74396: PUSH
74397: LD_EXP 88
74401: PUSH
74402: LD_EXP 89
74406: PUSH
74407: LD_EXP 97
74411: PUSH
74412: LD_EXP 101
74416: PUSH
74417: LD_EXP 102
74421: PUSH
74422: LD_EXP 104
74426: PUSH
74427: LD_EXP 108
74431: PUSH
74432: LD_EXP 111
74436: PUSH
74437: LD_EXP 112
74441: PUSH
74442: LD_EXP 122
74446: PUSH
74447: LD_EXP 123
74451: PUSH
74452: LD_EXP 124
74456: PUSH
74457: LD_EXP 125
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: LIST
74506: LIST
74507: LIST
74508: LIST
74509: LIST
74510: LIST
74511: LIST
74512: LIST
74513: LIST
74514: LIST
74515: LIST
74516: LIST
74517: ST_TO_ADDR
// tmp :=  ;
74518: LD_ADDR_VAR 0 3
74522: PUSH
74523: LD_STRING 
74525: ST_TO_ADDR
// for i = 1 to normalCounter do
74526: LD_ADDR_VAR 0 8
74530: PUSH
74531: DOUBLE
74532: LD_INT 1
74534: DEC
74535: ST_TO_ADDR
74536: LD_EXP 70
74540: PUSH
74541: FOR_TO
74542: IFFALSE 74578
// begin if flags [ i ] then
74544: LD_VAR 0 4
74548: PUSH
74549: LD_VAR 0 8
74553: ARRAY
74554: IFFALSE 74576
// tmp := tmp & i & ; ;
74556: LD_ADDR_VAR 0 3
74560: PUSH
74561: LD_VAR 0 3
74565: PUSH
74566: LD_VAR 0 8
74570: STR
74571: PUSH
74572: LD_STRING ;
74574: STR
74575: ST_TO_ADDR
// end ;
74576: GO 74541
74578: POP
74579: POP
// for i = 1 to hardcoreCounter do
74580: LD_ADDR_VAR 0 8
74584: PUSH
74585: DOUBLE
74586: LD_INT 1
74588: DEC
74589: ST_TO_ADDR
74590: LD_EXP 71
74594: PUSH
74595: FOR_TO
74596: IFFALSE 74642
// begin if flags [ normalCounter + i ] then
74598: LD_VAR 0 4
74602: PUSH
74603: LD_EXP 70
74607: PUSH
74608: LD_VAR 0 8
74612: PLUS
74613: ARRAY
74614: IFFALSE 74640
// tmp := tmp & ( 100 + i ) & ; ;
74616: LD_ADDR_VAR 0 3
74620: PUSH
74621: LD_VAR 0 3
74625: PUSH
74626: LD_INT 100
74628: PUSH
74629: LD_VAR 0 8
74633: PLUS
74634: STR
74635: PUSH
74636: LD_STRING ;
74638: STR
74639: ST_TO_ADDR
// end ;
74640: GO 74595
74642: POP
74643: POP
// if tmp then
74644: LD_VAR 0 3
74648: IFFALSE 74660
// active := tmp ;
74650: LD_ADDR_VAR 0 7
74654: PUSH
74655: LD_VAR 0 3
74659: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
74660: LD_STRING getStreamItemsFromMission("
74662: PUSH
74663: LD_VAR 0 5
74667: STR
74668: PUSH
74669: LD_STRING ","
74671: STR
74672: PUSH
74673: LD_VAR 0 6
74677: STR
74678: PUSH
74679: LD_STRING ","
74681: STR
74682: PUSH
74683: LD_VAR 0 7
74687: STR
74688: PUSH
74689: LD_STRING ")
74691: STR
74692: PPUSH
74693: CALL_OW 559
// end else
74697: GO 74706
// ToLua ( getStreamItemsFromMission("","","") ) ;
74699: LD_STRING getStreamItemsFromMission("","","")
74701: PPUSH
74702: CALL_OW 559
// end ;
74706: LD_VAR 0 2
74710: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
74711: LD_EXP 69
74715: PUSH
74716: LD_EXP 74
74720: AND
74721: IFFALSE 74845
74723: GO 74725
74725: DISABLE
74726: LD_INT 0
74728: PPUSH
74729: PPUSH
// begin enable ;
74730: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
74731: LD_ADDR_VAR 0 2
74735: PUSH
74736: LD_INT 22
74738: PUSH
74739: LD_OWVAR 2
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 2
74750: PUSH
74751: LD_INT 34
74753: PUSH
74754: LD_INT 7
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: PUSH
74761: LD_INT 34
74763: PUSH
74764: LD_INT 45
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 34
74773: PUSH
74774: LD_INT 28
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 34
74783: PUSH
74784: LD_INT 47
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: PPUSH
74802: CALL_OW 69
74806: ST_TO_ADDR
// if not tmp then
74807: LD_VAR 0 2
74811: NOT
74812: IFFALSE 74816
// exit ;
74814: GO 74845
// for i in tmp do
74816: LD_ADDR_VAR 0 1
74820: PUSH
74821: LD_VAR 0 2
74825: PUSH
74826: FOR_IN
74827: IFFALSE 74843
// begin SetLives ( i , 0 ) ;
74829: LD_VAR 0 1
74833: PPUSH
74834: LD_INT 0
74836: PPUSH
74837: CALL_OW 234
// end ;
74841: GO 74826
74843: POP
74844: POP
// end ;
74845: PPOPN 2
74847: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
74848: LD_EXP 69
74852: PUSH
74853: LD_EXP 75
74857: AND
74858: IFFALSE 74942
74860: GO 74862
74862: DISABLE
74863: LD_INT 0
74865: PPUSH
74866: PPUSH
// begin enable ;
74867: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
74868: LD_ADDR_VAR 0 2
74872: PUSH
74873: LD_INT 22
74875: PUSH
74876: LD_OWVAR 2
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PUSH
74885: LD_INT 32
74887: PUSH
74888: LD_INT 3
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PPUSH
74899: CALL_OW 69
74903: ST_TO_ADDR
// if not tmp then
74904: LD_VAR 0 2
74908: NOT
74909: IFFALSE 74913
// exit ;
74911: GO 74942
// for i in tmp do
74913: LD_ADDR_VAR 0 1
74917: PUSH
74918: LD_VAR 0 2
74922: PUSH
74923: FOR_IN
74924: IFFALSE 74940
// begin SetLives ( i , 0 ) ;
74926: LD_VAR 0 1
74930: PPUSH
74931: LD_INT 0
74933: PPUSH
74934: CALL_OW 234
// end ;
74938: GO 74923
74940: POP
74941: POP
// end ;
74942: PPOPN 2
74944: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
74945: LD_EXP 69
74949: PUSH
74950: LD_EXP 72
74954: AND
74955: IFFALSE 75048
74957: GO 74959
74959: DISABLE
74960: LD_INT 0
74962: PPUSH
// begin enable ;
74963: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
74964: LD_ADDR_VAR 0 1
74968: PUSH
74969: LD_INT 22
74971: PUSH
74972: LD_OWVAR 2
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: LD_INT 2
74983: PUSH
74984: LD_INT 25
74986: PUSH
74987: LD_INT 5
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 25
74996: PUSH
74997: LD_INT 9
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: LD_INT 25
75006: PUSH
75007: LD_INT 8
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: LIST
75018: LIST
75019: PUSH
75020: EMPTY
75021: LIST
75022: LIST
75023: PPUSH
75024: CALL_OW 69
75028: PUSH
75029: FOR_IN
75030: IFFALSE 75046
// begin SetClass ( i , 1 ) ;
75032: LD_VAR 0 1
75036: PPUSH
75037: LD_INT 1
75039: PPUSH
75040: CALL_OW 336
// end ;
75044: GO 75029
75046: POP
75047: POP
// end ;
75048: PPOPN 1
75050: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
75051: LD_EXP 69
75055: PUSH
75056: LD_EXP 73
75060: AND
75061: PUSH
75062: LD_OWVAR 65
75066: PUSH
75067: LD_INT 7
75069: LESS
75070: AND
75071: IFFALSE 75085
75073: GO 75075
75075: DISABLE
// begin enable ;
75076: ENABLE
// game_speed := 7 ;
75077: LD_ADDR_OWVAR 65
75081: PUSH
75082: LD_INT 7
75084: ST_TO_ADDR
// end ;
75085: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
75086: LD_EXP 69
75090: PUSH
75091: LD_EXP 76
75095: AND
75096: IFFALSE 75298
75098: GO 75100
75100: DISABLE
75101: LD_INT 0
75103: PPUSH
75104: PPUSH
75105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
75106: LD_ADDR_VAR 0 3
75110: PUSH
75111: LD_INT 81
75113: PUSH
75114: LD_OWVAR 2
75118: PUSH
75119: EMPTY
75120: LIST
75121: LIST
75122: PUSH
75123: LD_INT 21
75125: PUSH
75126: LD_INT 1
75128: PUSH
75129: EMPTY
75130: LIST
75131: LIST
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PPUSH
75137: CALL_OW 69
75141: ST_TO_ADDR
// if not tmp then
75142: LD_VAR 0 3
75146: NOT
75147: IFFALSE 75151
// exit ;
75149: GO 75298
// if tmp > 5 then
75151: LD_VAR 0 3
75155: PUSH
75156: LD_INT 5
75158: GREATER
75159: IFFALSE 75171
// k := 5 else
75161: LD_ADDR_VAR 0 2
75165: PUSH
75166: LD_INT 5
75168: ST_TO_ADDR
75169: GO 75181
// k := tmp ;
75171: LD_ADDR_VAR 0 2
75175: PUSH
75176: LD_VAR 0 3
75180: ST_TO_ADDR
// for i := 1 to k do
75181: LD_ADDR_VAR 0 1
75185: PUSH
75186: DOUBLE
75187: LD_INT 1
75189: DEC
75190: ST_TO_ADDR
75191: LD_VAR 0 2
75195: PUSH
75196: FOR_TO
75197: IFFALSE 75296
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
75199: LD_VAR 0 3
75203: PUSH
75204: LD_VAR 0 1
75208: ARRAY
75209: PPUSH
75210: LD_VAR 0 1
75214: PUSH
75215: LD_INT 4
75217: MOD
75218: PUSH
75219: LD_INT 1
75221: PLUS
75222: PPUSH
75223: CALL_OW 259
75227: PUSH
75228: LD_INT 10
75230: LESS
75231: IFFALSE 75294
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
75233: LD_VAR 0 3
75237: PUSH
75238: LD_VAR 0 1
75242: ARRAY
75243: PPUSH
75244: LD_VAR 0 1
75248: PUSH
75249: LD_INT 4
75251: MOD
75252: PUSH
75253: LD_INT 1
75255: PLUS
75256: PPUSH
75257: LD_VAR 0 3
75261: PUSH
75262: LD_VAR 0 1
75266: ARRAY
75267: PPUSH
75268: LD_VAR 0 1
75272: PUSH
75273: LD_INT 4
75275: MOD
75276: PUSH
75277: LD_INT 1
75279: PLUS
75280: PPUSH
75281: CALL_OW 259
75285: PUSH
75286: LD_INT 1
75288: PLUS
75289: PPUSH
75290: CALL_OW 237
75294: GO 75196
75296: POP
75297: POP
// end ;
75298: PPOPN 3
75300: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
75301: LD_EXP 69
75305: PUSH
75306: LD_EXP 77
75310: AND
75311: IFFALSE 75331
75313: GO 75315
75315: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
75316: LD_INT 4
75318: PPUSH
75319: LD_OWVAR 2
75323: PPUSH
75324: LD_INT 0
75326: PPUSH
75327: CALL_OW 324
75331: END
// every 0 0$1 trigger StreamModeActive and sShovel do
75332: LD_EXP 69
75336: PUSH
75337: LD_EXP 106
75341: AND
75342: IFFALSE 75362
75344: GO 75346
75346: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
75347: LD_INT 19
75349: PPUSH
75350: LD_OWVAR 2
75354: PPUSH
75355: LD_INT 0
75357: PPUSH
75358: CALL_OW 324
75362: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
75363: LD_EXP 69
75367: PUSH
75368: LD_EXP 78
75372: AND
75373: IFFALSE 75475
75375: GO 75377
75377: DISABLE
75378: LD_INT 0
75380: PPUSH
75381: PPUSH
// begin enable ;
75382: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
75383: LD_ADDR_VAR 0 2
75387: PUSH
75388: LD_INT 22
75390: PUSH
75391: LD_OWVAR 2
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: PUSH
75400: LD_INT 2
75402: PUSH
75403: LD_INT 34
75405: PUSH
75406: LD_INT 11
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PUSH
75413: LD_INT 34
75415: PUSH
75416: LD_INT 30
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: LIST
75427: PUSH
75428: EMPTY
75429: LIST
75430: LIST
75431: PPUSH
75432: CALL_OW 69
75436: ST_TO_ADDR
// if not tmp then
75437: LD_VAR 0 2
75441: NOT
75442: IFFALSE 75446
// exit ;
75444: GO 75475
// for i in tmp do
75446: LD_ADDR_VAR 0 1
75450: PUSH
75451: LD_VAR 0 2
75455: PUSH
75456: FOR_IN
75457: IFFALSE 75473
// begin SetLives ( i , 0 ) ;
75459: LD_VAR 0 1
75463: PPUSH
75464: LD_INT 0
75466: PPUSH
75467: CALL_OW 234
// end ;
75471: GO 75456
75473: POP
75474: POP
// end ;
75475: PPOPN 2
75477: END
// every 0 0$1 trigger StreamModeActive and sBunker do
75478: LD_EXP 69
75482: PUSH
75483: LD_EXP 79
75487: AND
75488: IFFALSE 75508
75490: GO 75492
75492: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
75493: LD_INT 32
75495: PPUSH
75496: LD_OWVAR 2
75500: PPUSH
75501: LD_INT 0
75503: PPUSH
75504: CALL_OW 324
75508: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
75509: LD_EXP 69
75513: PUSH
75514: LD_EXP 80
75518: AND
75519: IFFALSE 75700
75521: GO 75523
75523: DISABLE
75524: LD_INT 0
75526: PPUSH
75527: PPUSH
75528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
75529: LD_ADDR_VAR 0 2
75533: PUSH
75534: LD_INT 22
75536: PUSH
75537: LD_OWVAR 2
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: PUSH
75546: LD_INT 33
75548: PUSH
75549: LD_INT 3
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PPUSH
75560: CALL_OW 69
75564: ST_TO_ADDR
// if not tmp then
75565: LD_VAR 0 2
75569: NOT
75570: IFFALSE 75574
// exit ;
75572: GO 75700
// side := 0 ;
75574: LD_ADDR_VAR 0 3
75578: PUSH
75579: LD_INT 0
75581: ST_TO_ADDR
// for i := 1 to 8 do
75582: LD_ADDR_VAR 0 1
75586: PUSH
75587: DOUBLE
75588: LD_INT 1
75590: DEC
75591: ST_TO_ADDR
75592: LD_INT 8
75594: PUSH
75595: FOR_TO
75596: IFFALSE 75644
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
75598: LD_OWVAR 2
75602: PUSH
75603: LD_VAR 0 1
75607: NONEQUAL
75608: PUSH
75609: LD_OWVAR 2
75613: PPUSH
75614: LD_VAR 0 1
75618: PPUSH
75619: CALL_OW 81
75623: PUSH
75624: LD_INT 2
75626: EQUAL
75627: AND
75628: IFFALSE 75642
// begin side := i ;
75630: LD_ADDR_VAR 0 3
75634: PUSH
75635: LD_VAR 0 1
75639: ST_TO_ADDR
// break ;
75640: GO 75644
// end ;
75642: GO 75595
75644: POP
75645: POP
// if not side then
75646: LD_VAR 0 3
75650: NOT
75651: IFFALSE 75655
// exit ;
75653: GO 75700
// for i := 1 to tmp do
75655: LD_ADDR_VAR 0 1
75659: PUSH
75660: DOUBLE
75661: LD_INT 1
75663: DEC
75664: ST_TO_ADDR
75665: LD_VAR 0 2
75669: PUSH
75670: FOR_TO
75671: IFFALSE 75698
// if Prob ( 60 ) then
75673: LD_INT 60
75675: PPUSH
75676: CALL_OW 13
75680: IFFALSE 75696
// SetSide ( i , side ) ;
75682: LD_VAR 0 1
75686: PPUSH
75687: LD_VAR 0 3
75691: PPUSH
75692: CALL_OW 235
75696: GO 75670
75698: POP
75699: POP
// end ;
75700: PPOPN 3
75702: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
75703: LD_EXP 69
75707: PUSH
75708: LD_EXP 82
75712: AND
75713: IFFALSE 75832
75715: GO 75717
75717: DISABLE
75718: LD_INT 0
75720: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
75721: LD_ADDR_VAR 0 1
75725: PUSH
75726: LD_INT 22
75728: PUSH
75729: LD_OWVAR 2
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 21
75740: PUSH
75741: LD_INT 1
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_INT 3
75750: PUSH
75751: LD_INT 23
75753: PUSH
75754: LD_INT 0
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: LIST
75769: PPUSH
75770: CALL_OW 69
75774: PUSH
75775: FOR_IN
75776: IFFALSE 75830
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
75778: LD_VAR 0 1
75782: PPUSH
75783: CALL_OW 257
75787: PUSH
75788: LD_INT 1
75790: PUSH
75791: LD_INT 2
75793: PUSH
75794: LD_INT 3
75796: PUSH
75797: LD_INT 4
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: IN
75806: IFFALSE 75828
// SetClass ( un , rand ( 1 , 4 ) ) ;
75808: LD_VAR 0 1
75812: PPUSH
75813: LD_INT 1
75815: PPUSH
75816: LD_INT 4
75818: PPUSH
75819: CALL_OW 12
75823: PPUSH
75824: CALL_OW 336
75828: GO 75775
75830: POP
75831: POP
// end ;
75832: PPOPN 1
75834: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
75835: LD_EXP 69
75839: PUSH
75840: LD_EXP 81
75844: AND
75845: IFFALSE 75924
75847: GO 75849
75849: DISABLE
75850: LD_INT 0
75852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
75853: LD_ADDR_VAR 0 1
75857: PUSH
75858: LD_INT 22
75860: PUSH
75861: LD_OWVAR 2
75865: PUSH
75866: EMPTY
75867: LIST
75868: LIST
75869: PUSH
75870: LD_INT 21
75872: PUSH
75873: LD_INT 3
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PPUSH
75884: CALL_OW 69
75888: ST_TO_ADDR
// if not tmp then
75889: LD_VAR 0 1
75893: NOT
75894: IFFALSE 75898
// exit ;
75896: GO 75924
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
75898: LD_VAR 0 1
75902: PUSH
75903: LD_INT 1
75905: PPUSH
75906: LD_VAR 0 1
75910: PPUSH
75911: CALL_OW 12
75915: ARRAY
75916: PPUSH
75917: LD_INT 100
75919: PPUSH
75920: CALL_OW 234
// end ;
75924: PPOPN 1
75926: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
75927: LD_EXP 69
75931: PUSH
75932: LD_EXP 83
75936: AND
75937: IFFALSE 76035
75939: GO 75941
75941: DISABLE
75942: LD_INT 0
75944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75945: LD_ADDR_VAR 0 1
75949: PUSH
75950: LD_INT 22
75952: PUSH
75953: LD_OWVAR 2
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 21
75964: PUSH
75965: LD_INT 1
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PPUSH
75976: CALL_OW 69
75980: ST_TO_ADDR
// if not tmp then
75981: LD_VAR 0 1
75985: NOT
75986: IFFALSE 75990
// exit ;
75988: GO 76035
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
75990: LD_VAR 0 1
75994: PUSH
75995: LD_INT 1
75997: PPUSH
75998: LD_VAR 0 1
76002: PPUSH
76003: CALL_OW 12
76007: ARRAY
76008: PPUSH
76009: LD_INT 1
76011: PPUSH
76012: LD_INT 4
76014: PPUSH
76015: CALL_OW 12
76019: PPUSH
76020: LD_INT 3000
76022: PPUSH
76023: LD_INT 9000
76025: PPUSH
76026: CALL_OW 12
76030: PPUSH
76031: CALL_OW 492
// end ;
76035: PPOPN 1
76037: END
// every 0 0$1 trigger StreamModeActive and sDepot do
76038: LD_EXP 69
76042: PUSH
76043: LD_EXP 84
76047: AND
76048: IFFALSE 76068
76050: GO 76052
76052: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
76053: LD_INT 1
76055: PPUSH
76056: LD_OWVAR 2
76060: PPUSH
76061: LD_INT 0
76063: PPUSH
76064: CALL_OW 324
76068: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
76069: LD_EXP 69
76073: PUSH
76074: LD_EXP 85
76078: AND
76079: IFFALSE 76162
76081: GO 76083
76083: DISABLE
76084: LD_INT 0
76086: PPUSH
76087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
76088: LD_ADDR_VAR 0 2
76092: PUSH
76093: LD_INT 22
76095: PUSH
76096: LD_OWVAR 2
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: PUSH
76105: LD_INT 21
76107: PUSH
76108: LD_INT 3
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: PPUSH
76119: CALL_OW 69
76123: ST_TO_ADDR
// if not tmp then
76124: LD_VAR 0 2
76128: NOT
76129: IFFALSE 76133
// exit ;
76131: GO 76162
// for i in tmp do
76133: LD_ADDR_VAR 0 1
76137: PUSH
76138: LD_VAR 0 2
76142: PUSH
76143: FOR_IN
76144: IFFALSE 76160
// SetBLevel ( i , 10 ) ;
76146: LD_VAR 0 1
76150: PPUSH
76151: LD_INT 10
76153: PPUSH
76154: CALL_OW 241
76158: GO 76143
76160: POP
76161: POP
// end ;
76162: PPOPN 2
76164: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
76165: LD_EXP 69
76169: PUSH
76170: LD_EXP 86
76174: AND
76175: IFFALSE 76286
76177: GO 76179
76179: DISABLE
76180: LD_INT 0
76182: PPUSH
76183: PPUSH
76184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76185: LD_ADDR_VAR 0 3
76189: PUSH
76190: LD_INT 22
76192: PUSH
76193: LD_OWVAR 2
76197: PUSH
76198: EMPTY
76199: LIST
76200: LIST
76201: PUSH
76202: LD_INT 25
76204: PUSH
76205: LD_INT 1
76207: PUSH
76208: EMPTY
76209: LIST
76210: LIST
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: PPUSH
76216: CALL_OW 69
76220: ST_TO_ADDR
// if not tmp then
76221: LD_VAR 0 3
76225: NOT
76226: IFFALSE 76230
// exit ;
76228: GO 76286
// un := tmp [ rand ( 1 , tmp ) ] ;
76230: LD_ADDR_VAR 0 2
76234: PUSH
76235: LD_VAR 0 3
76239: PUSH
76240: LD_INT 1
76242: PPUSH
76243: LD_VAR 0 3
76247: PPUSH
76248: CALL_OW 12
76252: ARRAY
76253: ST_TO_ADDR
// if Crawls ( un ) then
76254: LD_VAR 0 2
76258: PPUSH
76259: CALL_OW 318
76263: IFFALSE 76274
// ComWalk ( un ) ;
76265: LD_VAR 0 2
76269: PPUSH
76270: CALL_OW 138
// SetClass ( un , class_sniper ) ;
76274: LD_VAR 0 2
76278: PPUSH
76279: LD_INT 5
76281: PPUSH
76282: CALL_OW 336
// end ;
76286: PPOPN 3
76288: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
76289: LD_EXP 69
76293: PUSH
76294: LD_EXP 87
76298: AND
76299: PUSH
76300: LD_OWVAR 67
76304: PUSH
76305: LD_INT 4
76307: LESS
76308: AND
76309: IFFALSE 76328
76311: GO 76313
76313: DISABLE
// begin Difficulty := Difficulty + 1 ;
76314: LD_ADDR_OWVAR 67
76318: PUSH
76319: LD_OWVAR 67
76323: PUSH
76324: LD_INT 1
76326: PLUS
76327: ST_TO_ADDR
// end ;
76328: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
76329: LD_EXP 69
76333: PUSH
76334: LD_EXP 88
76338: AND
76339: IFFALSE 76442
76341: GO 76343
76343: DISABLE
76344: LD_INT 0
76346: PPUSH
// begin for i := 1 to 5 do
76347: LD_ADDR_VAR 0 1
76351: PUSH
76352: DOUBLE
76353: LD_INT 1
76355: DEC
76356: ST_TO_ADDR
76357: LD_INT 5
76359: PUSH
76360: FOR_TO
76361: IFFALSE 76440
// begin uc_nation := nation_nature ;
76363: LD_ADDR_OWVAR 21
76367: PUSH
76368: LD_INT 0
76370: ST_TO_ADDR
// uc_side := 0 ;
76371: LD_ADDR_OWVAR 20
76375: PUSH
76376: LD_INT 0
76378: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76379: LD_ADDR_OWVAR 29
76383: PUSH
76384: LD_INT 12
76386: PUSH
76387: LD_INT 12
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: ST_TO_ADDR
// hc_agressivity := 20 ;
76394: LD_ADDR_OWVAR 35
76398: PUSH
76399: LD_INT 20
76401: ST_TO_ADDR
// hc_class := class_tiger ;
76402: LD_ADDR_OWVAR 28
76406: PUSH
76407: LD_INT 14
76409: ST_TO_ADDR
// hc_gallery :=  ;
76410: LD_ADDR_OWVAR 33
76414: PUSH
76415: LD_STRING 
76417: ST_TO_ADDR
// hc_name :=  ;
76418: LD_ADDR_OWVAR 26
76422: PUSH
76423: LD_STRING 
76425: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
76426: CALL_OW 44
76430: PPUSH
76431: LD_INT 0
76433: PPUSH
76434: CALL_OW 51
// end ;
76438: GO 76360
76440: POP
76441: POP
// end ;
76442: PPOPN 1
76444: END
// every 0 0$1 trigger StreamModeActive and sBomb do
76445: LD_EXP 69
76449: PUSH
76450: LD_EXP 89
76454: AND
76455: IFFALSE 76464
76457: GO 76459
76459: DISABLE
// StreamSibBomb ;
76460: CALL 76465 0 0
76464: END
// export function StreamSibBomb ; var i , x , y ; begin
76465: LD_INT 0
76467: PPUSH
76468: PPUSH
76469: PPUSH
76470: PPUSH
// result := false ;
76471: LD_ADDR_VAR 0 1
76475: PUSH
76476: LD_INT 0
76478: ST_TO_ADDR
// for i := 1 to 16 do
76479: LD_ADDR_VAR 0 2
76483: PUSH
76484: DOUBLE
76485: LD_INT 1
76487: DEC
76488: ST_TO_ADDR
76489: LD_INT 16
76491: PUSH
76492: FOR_TO
76493: IFFALSE 76692
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76495: LD_ADDR_VAR 0 3
76499: PUSH
76500: LD_INT 10
76502: PUSH
76503: LD_INT 20
76505: PUSH
76506: LD_INT 30
76508: PUSH
76509: LD_INT 40
76511: PUSH
76512: LD_INT 50
76514: PUSH
76515: LD_INT 60
76517: PUSH
76518: LD_INT 70
76520: PUSH
76521: LD_INT 80
76523: PUSH
76524: LD_INT 90
76526: PUSH
76527: LD_INT 100
76529: PUSH
76530: LD_INT 110
76532: PUSH
76533: LD_INT 120
76535: PUSH
76536: LD_INT 130
76538: PUSH
76539: LD_INT 140
76541: PUSH
76542: LD_INT 150
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: LIST
76549: LIST
76550: LIST
76551: LIST
76552: LIST
76553: LIST
76554: LIST
76555: LIST
76556: LIST
76557: LIST
76558: LIST
76559: LIST
76560: LIST
76561: PUSH
76562: LD_INT 1
76564: PPUSH
76565: LD_INT 15
76567: PPUSH
76568: CALL_OW 12
76572: ARRAY
76573: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
76574: LD_ADDR_VAR 0 4
76578: PUSH
76579: LD_INT 10
76581: PUSH
76582: LD_INT 20
76584: PUSH
76585: LD_INT 30
76587: PUSH
76588: LD_INT 40
76590: PUSH
76591: LD_INT 50
76593: PUSH
76594: LD_INT 60
76596: PUSH
76597: LD_INT 70
76599: PUSH
76600: LD_INT 80
76602: PUSH
76603: LD_INT 90
76605: PUSH
76606: LD_INT 100
76608: PUSH
76609: LD_INT 110
76611: PUSH
76612: LD_INT 120
76614: PUSH
76615: LD_INT 130
76617: PUSH
76618: LD_INT 140
76620: PUSH
76621: LD_INT 150
76623: PUSH
76624: EMPTY
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: PUSH
76641: LD_INT 1
76643: PPUSH
76644: LD_INT 15
76646: PPUSH
76647: CALL_OW 12
76651: ARRAY
76652: ST_TO_ADDR
// if ValidHex ( x , y ) then
76653: LD_VAR 0 3
76657: PPUSH
76658: LD_VAR 0 4
76662: PPUSH
76663: CALL_OW 488
76667: IFFALSE 76690
// begin result := [ x , y ] ;
76669: LD_ADDR_VAR 0 1
76673: PUSH
76674: LD_VAR 0 3
76678: PUSH
76679: LD_VAR 0 4
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: ST_TO_ADDR
// break ;
76688: GO 76692
// end ; end ;
76690: GO 76492
76692: POP
76693: POP
// if result then
76694: LD_VAR 0 1
76698: IFFALSE 76758
// begin ToLua ( playSibBomb() ) ;
76700: LD_STRING playSibBomb()
76702: PPUSH
76703: CALL_OW 559
// wait ( 0 0$14 ) ;
76707: LD_INT 490
76709: PPUSH
76710: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
76714: LD_VAR 0 1
76718: PUSH
76719: LD_INT 1
76721: ARRAY
76722: PPUSH
76723: LD_VAR 0 1
76727: PUSH
76728: LD_INT 2
76730: ARRAY
76731: PPUSH
76732: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
76736: LD_VAR 0 1
76740: PUSH
76741: LD_INT 1
76743: ARRAY
76744: PPUSH
76745: LD_VAR 0 1
76749: PUSH
76750: LD_INT 2
76752: ARRAY
76753: PPUSH
76754: CALL_OW 429
// end ; end ;
76758: LD_VAR 0 1
76762: RET
// every 0 0$1 trigger StreamModeActive and sReset do
76763: LD_EXP 69
76767: PUSH
76768: LD_EXP 91
76772: AND
76773: IFFALSE 76785
76775: GO 76777
76777: DISABLE
// YouLost (  ) ;
76778: LD_STRING 
76780: PPUSH
76781: CALL_OW 104
76785: END
// every 0 0$1 trigger StreamModeActive and sFog do
76786: LD_EXP 69
76790: PUSH
76791: LD_EXP 90
76795: AND
76796: IFFALSE 76810
76798: GO 76800
76800: DISABLE
// FogOff ( your_side ) ;
76801: LD_OWVAR 2
76805: PPUSH
76806: CALL_OW 344
76810: END
// every 0 0$1 trigger StreamModeActive and sSun do
76811: LD_EXP 69
76815: PUSH
76816: LD_EXP 92
76820: AND
76821: IFFALSE 76849
76823: GO 76825
76825: DISABLE
// begin solar_recharge_percent := 0 ;
76826: LD_ADDR_OWVAR 79
76830: PUSH
76831: LD_INT 0
76833: ST_TO_ADDR
// wait ( 5 5$00 ) ;
76834: LD_INT 10500
76836: PPUSH
76837: CALL_OW 67
// solar_recharge_percent := 100 ;
76841: LD_ADDR_OWVAR 79
76845: PUSH
76846: LD_INT 100
76848: ST_TO_ADDR
// end ;
76849: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
76850: LD_EXP 69
76854: PUSH
76855: LD_EXP 93
76859: AND
76860: IFFALSE 77099
76862: GO 76864
76864: DISABLE
76865: LD_INT 0
76867: PPUSH
76868: PPUSH
76869: PPUSH
// begin tmp := [ ] ;
76870: LD_ADDR_VAR 0 3
76874: PUSH
76875: EMPTY
76876: ST_TO_ADDR
// for i := 1 to 6 do
76877: LD_ADDR_VAR 0 1
76881: PUSH
76882: DOUBLE
76883: LD_INT 1
76885: DEC
76886: ST_TO_ADDR
76887: LD_INT 6
76889: PUSH
76890: FOR_TO
76891: IFFALSE 76996
// begin uc_nation := nation_nature ;
76893: LD_ADDR_OWVAR 21
76897: PUSH
76898: LD_INT 0
76900: ST_TO_ADDR
// uc_side := 0 ;
76901: LD_ADDR_OWVAR 20
76905: PUSH
76906: LD_INT 0
76908: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
76909: LD_ADDR_OWVAR 29
76913: PUSH
76914: LD_INT 12
76916: PUSH
76917: LD_INT 12
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: ST_TO_ADDR
// hc_agressivity := 20 ;
76924: LD_ADDR_OWVAR 35
76928: PUSH
76929: LD_INT 20
76931: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
76932: LD_ADDR_OWVAR 28
76936: PUSH
76937: LD_INT 17
76939: ST_TO_ADDR
// hc_gallery :=  ;
76940: LD_ADDR_OWVAR 33
76944: PUSH
76945: LD_STRING 
76947: ST_TO_ADDR
// hc_name :=  ;
76948: LD_ADDR_OWVAR 26
76952: PUSH
76953: LD_STRING 
76955: ST_TO_ADDR
// un := CreateHuman ;
76956: LD_ADDR_VAR 0 2
76960: PUSH
76961: CALL_OW 44
76965: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
76966: LD_VAR 0 2
76970: PPUSH
76971: LD_INT 1
76973: PPUSH
76974: CALL_OW 51
// tmp := tmp ^ un ;
76978: LD_ADDR_VAR 0 3
76982: PUSH
76983: LD_VAR 0 3
76987: PUSH
76988: LD_VAR 0 2
76992: ADD
76993: ST_TO_ADDR
// end ;
76994: GO 76890
76996: POP
76997: POP
// repeat wait ( 0 0$1 ) ;
76998: LD_INT 35
77000: PPUSH
77001: CALL_OW 67
// for un in tmp do
77005: LD_ADDR_VAR 0 2
77009: PUSH
77010: LD_VAR 0 3
77014: PUSH
77015: FOR_IN
77016: IFFALSE 77090
// begin if IsDead ( un ) then
77018: LD_VAR 0 2
77022: PPUSH
77023: CALL_OW 301
77027: IFFALSE 77047
// begin tmp := tmp diff un ;
77029: LD_ADDR_VAR 0 3
77033: PUSH
77034: LD_VAR 0 3
77038: PUSH
77039: LD_VAR 0 2
77043: DIFF
77044: ST_TO_ADDR
// continue ;
77045: GO 77015
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
77047: LD_VAR 0 2
77051: PPUSH
77052: LD_INT 3
77054: PUSH
77055: LD_INT 22
77057: PUSH
77058: LD_INT 0
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: PPUSH
77069: CALL_OW 69
77073: PPUSH
77074: LD_VAR 0 2
77078: PPUSH
77079: CALL_OW 74
77083: PPUSH
77084: CALL_OW 115
// end ;
77088: GO 77015
77090: POP
77091: POP
// until not tmp ;
77092: LD_VAR 0 3
77096: NOT
77097: IFFALSE 76998
// end ;
77099: PPOPN 3
77101: END
// every 0 0$1 trigger StreamModeActive and sTroll do
77102: LD_EXP 69
77106: PUSH
77107: LD_EXP 94
77111: AND
77112: IFFALSE 77166
77114: GO 77116
77116: DISABLE
// begin ToLua ( displayTroll(); ) ;
77117: LD_STRING displayTroll();
77119: PPUSH
77120: CALL_OW 559
// wait ( 3 3$00 ) ;
77124: LD_INT 6300
77126: PPUSH
77127: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77131: LD_STRING hideTroll();
77133: PPUSH
77134: CALL_OW 559
// wait ( 1 1$00 ) ;
77138: LD_INT 2100
77140: PPUSH
77141: CALL_OW 67
// ToLua ( displayTroll(); ) ;
77145: LD_STRING displayTroll();
77147: PPUSH
77148: CALL_OW 559
// wait ( 1 1$00 ) ;
77152: LD_INT 2100
77154: PPUSH
77155: CALL_OW 67
// ToLua ( hideTroll(); ) ;
77159: LD_STRING hideTroll();
77161: PPUSH
77162: CALL_OW 559
// end ;
77166: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
77167: LD_EXP 69
77171: PUSH
77172: LD_EXP 95
77176: AND
77177: IFFALSE 77240
77179: GO 77181
77181: DISABLE
77182: LD_INT 0
77184: PPUSH
// begin p := 0 ;
77185: LD_ADDR_VAR 0 1
77189: PUSH
77190: LD_INT 0
77192: ST_TO_ADDR
// repeat game_speed := 1 ;
77193: LD_ADDR_OWVAR 65
77197: PUSH
77198: LD_INT 1
77200: ST_TO_ADDR
// wait ( 0 0$1 ) ;
77201: LD_INT 35
77203: PPUSH
77204: CALL_OW 67
// p := p + 1 ;
77208: LD_ADDR_VAR 0 1
77212: PUSH
77213: LD_VAR 0 1
77217: PUSH
77218: LD_INT 1
77220: PLUS
77221: ST_TO_ADDR
// until p >= 60 ;
77222: LD_VAR 0 1
77226: PUSH
77227: LD_INT 60
77229: GREATEREQUAL
77230: IFFALSE 77193
// game_speed := 4 ;
77232: LD_ADDR_OWVAR 65
77236: PUSH
77237: LD_INT 4
77239: ST_TO_ADDR
// end ;
77240: PPOPN 1
77242: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
77243: LD_EXP 69
77247: PUSH
77248: LD_EXP 96
77252: AND
77253: IFFALSE 77399
77255: GO 77257
77257: DISABLE
77258: LD_INT 0
77260: PPUSH
77261: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77262: LD_ADDR_VAR 0 1
77266: PUSH
77267: LD_INT 22
77269: PUSH
77270: LD_OWVAR 2
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: LD_INT 2
77281: PUSH
77282: LD_INT 30
77284: PUSH
77285: LD_INT 0
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PUSH
77292: LD_INT 30
77294: PUSH
77295: LD_INT 1
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: LIST
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PPUSH
77311: CALL_OW 69
77315: ST_TO_ADDR
// if not depot then
77316: LD_VAR 0 1
77320: NOT
77321: IFFALSE 77325
// exit ;
77323: GO 77399
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
77325: LD_ADDR_VAR 0 2
77329: PUSH
77330: LD_VAR 0 1
77334: PUSH
77335: LD_INT 1
77337: PPUSH
77338: LD_VAR 0 1
77342: PPUSH
77343: CALL_OW 12
77347: ARRAY
77348: PPUSH
77349: CALL_OW 274
77353: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
77354: LD_VAR 0 2
77358: PPUSH
77359: LD_INT 1
77361: PPUSH
77362: LD_INT 0
77364: PPUSH
77365: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
77369: LD_VAR 0 2
77373: PPUSH
77374: LD_INT 2
77376: PPUSH
77377: LD_INT 0
77379: PPUSH
77380: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
77384: LD_VAR 0 2
77388: PPUSH
77389: LD_INT 3
77391: PPUSH
77392: LD_INT 0
77394: PPUSH
77395: CALL_OW 277
// end ;
77399: PPOPN 2
77401: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
77402: LD_EXP 69
77406: PUSH
77407: LD_EXP 97
77411: AND
77412: IFFALSE 77509
77414: GO 77416
77416: DISABLE
77417: LD_INT 0
77419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77420: LD_ADDR_VAR 0 1
77424: PUSH
77425: LD_INT 22
77427: PUSH
77428: LD_OWVAR 2
77432: PUSH
77433: EMPTY
77434: LIST
77435: LIST
77436: PUSH
77437: LD_INT 21
77439: PUSH
77440: LD_INT 1
77442: PUSH
77443: EMPTY
77444: LIST
77445: LIST
77446: PUSH
77447: LD_INT 3
77449: PUSH
77450: LD_INT 23
77452: PUSH
77453: LD_INT 0
77455: PUSH
77456: EMPTY
77457: LIST
77458: LIST
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: LIST
77468: PPUSH
77469: CALL_OW 69
77473: ST_TO_ADDR
// if not tmp then
77474: LD_VAR 0 1
77478: NOT
77479: IFFALSE 77483
// exit ;
77481: GO 77509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
77483: LD_VAR 0 1
77487: PUSH
77488: LD_INT 1
77490: PPUSH
77491: LD_VAR 0 1
77495: PPUSH
77496: CALL_OW 12
77500: ARRAY
77501: PPUSH
77502: LD_INT 200
77504: PPUSH
77505: CALL_OW 234
// end ;
77509: PPOPN 1
77511: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
77512: LD_EXP 69
77516: PUSH
77517: LD_EXP 98
77521: AND
77522: IFFALSE 77601
77524: GO 77526
77526: DISABLE
77527: LD_INT 0
77529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
77530: LD_ADDR_VAR 0 1
77534: PUSH
77535: LD_INT 22
77537: PUSH
77538: LD_OWVAR 2
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: PUSH
77547: LD_INT 21
77549: PUSH
77550: LD_INT 2
77552: PUSH
77553: EMPTY
77554: LIST
77555: LIST
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: PPUSH
77561: CALL_OW 69
77565: ST_TO_ADDR
// if not tmp then
77566: LD_VAR 0 1
77570: NOT
77571: IFFALSE 77575
// exit ;
77573: GO 77601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
77575: LD_VAR 0 1
77579: PUSH
77580: LD_INT 1
77582: PPUSH
77583: LD_VAR 0 1
77587: PPUSH
77588: CALL_OW 12
77592: ARRAY
77593: PPUSH
77594: LD_INT 60
77596: PPUSH
77597: CALL_OW 234
// end ;
77601: PPOPN 1
77603: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
77604: LD_EXP 69
77608: PUSH
77609: LD_EXP 99
77613: AND
77614: IFFALSE 77713
77616: GO 77618
77618: DISABLE
77619: LD_INT 0
77621: PPUSH
77622: PPUSH
// begin enable ;
77623: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
77624: LD_ADDR_VAR 0 1
77628: PUSH
77629: LD_INT 22
77631: PUSH
77632: LD_OWVAR 2
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: LD_INT 61
77643: PUSH
77644: EMPTY
77645: LIST
77646: PUSH
77647: LD_INT 33
77649: PUSH
77650: LD_INT 2
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: LIST
77661: PPUSH
77662: CALL_OW 69
77666: ST_TO_ADDR
// if not tmp then
77667: LD_VAR 0 1
77671: NOT
77672: IFFALSE 77676
// exit ;
77674: GO 77713
// for i in tmp do
77676: LD_ADDR_VAR 0 2
77680: PUSH
77681: LD_VAR 0 1
77685: PUSH
77686: FOR_IN
77687: IFFALSE 77711
// if IsControledBy ( i ) then
77689: LD_VAR 0 2
77693: PPUSH
77694: CALL_OW 312
77698: IFFALSE 77709
// ComUnlink ( i ) ;
77700: LD_VAR 0 2
77704: PPUSH
77705: CALL_OW 136
77709: GO 77686
77711: POP
77712: POP
// end ;
77713: PPOPN 2
77715: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
77716: LD_EXP 69
77720: PUSH
77721: LD_EXP 100
77725: AND
77726: IFFALSE 77866
77728: GO 77730
77730: DISABLE
77731: LD_INT 0
77733: PPUSH
77734: PPUSH
// begin ToLua ( displayPowell(); ) ;
77735: LD_STRING displayPowell();
77737: PPUSH
77738: CALL_OW 559
// uc_side := 0 ;
77742: LD_ADDR_OWVAR 20
77746: PUSH
77747: LD_INT 0
77749: ST_TO_ADDR
// uc_nation := 2 ;
77750: LD_ADDR_OWVAR 21
77754: PUSH
77755: LD_INT 2
77757: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
77758: LD_ADDR_OWVAR 37
77762: PUSH
77763: LD_INT 14
77765: ST_TO_ADDR
// vc_engine := engine_siberite ;
77766: LD_ADDR_OWVAR 39
77770: PUSH
77771: LD_INT 3
77773: ST_TO_ADDR
// vc_control := control_apeman ;
77774: LD_ADDR_OWVAR 38
77778: PUSH
77779: LD_INT 5
77781: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
77782: LD_ADDR_OWVAR 40
77786: PUSH
77787: LD_INT 29
77789: ST_TO_ADDR
// un := CreateVehicle ;
77790: LD_ADDR_VAR 0 2
77794: PUSH
77795: CALL_OW 45
77799: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77800: LD_VAR 0 2
77804: PPUSH
77805: LD_INT 1
77807: PPUSH
77808: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77812: LD_INT 35
77814: PPUSH
77815: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77819: LD_VAR 0 2
77823: PPUSH
77824: LD_INT 22
77826: PUSH
77827: LD_OWVAR 2
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PPUSH
77836: CALL_OW 69
77840: PPUSH
77841: LD_VAR 0 2
77845: PPUSH
77846: CALL_OW 74
77850: PPUSH
77851: CALL_OW 115
// until IsDead ( un ) ;
77855: LD_VAR 0 2
77859: PPUSH
77860: CALL_OW 301
77864: IFFALSE 77812
// end ;
77866: PPOPN 2
77868: END
// every 0 0$1 trigger StreamModeActive and sStu do
77869: LD_EXP 69
77873: PUSH
77874: LD_EXP 108
77878: AND
77879: IFFALSE 77895
77881: GO 77883
77883: DISABLE
// begin ToLua ( displayStucuk(); ) ;
77884: LD_STRING displayStucuk();
77886: PPUSH
77887: CALL_OW 559
// ResetFog ;
77891: CALL_OW 335
// end ;
77895: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
77896: LD_EXP 69
77900: PUSH
77901: LD_EXP 101
77905: AND
77906: IFFALSE 78047
77908: GO 77910
77910: DISABLE
77911: LD_INT 0
77913: PPUSH
77914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
77915: LD_ADDR_VAR 0 2
77919: PUSH
77920: LD_INT 22
77922: PUSH
77923: LD_OWVAR 2
77927: PUSH
77928: EMPTY
77929: LIST
77930: LIST
77931: PUSH
77932: LD_INT 21
77934: PUSH
77935: LD_INT 1
77937: PUSH
77938: EMPTY
77939: LIST
77940: LIST
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PPUSH
77946: CALL_OW 69
77950: ST_TO_ADDR
// if not tmp then
77951: LD_VAR 0 2
77955: NOT
77956: IFFALSE 77960
// exit ;
77958: GO 78047
// un := tmp [ rand ( 1 , tmp ) ] ;
77960: LD_ADDR_VAR 0 1
77964: PUSH
77965: LD_VAR 0 2
77969: PUSH
77970: LD_INT 1
77972: PPUSH
77973: LD_VAR 0 2
77977: PPUSH
77978: CALL_OW 12
77982: ARRAY
77983: ST_TO_ADDR
// SetSide ( un , 0 ) ;
77984: LD_VAR 0 1
77988: PPUSH
77989: LD_INT 0
77991: PPUSH
77992: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
77996: LD_VAR 0 1
78000: PPUSH
78001: LD_OWVAR 3
78005: PUSH
78006: LD_VAR 0 1
78010: DIFF
78011: PPUSH
78012: LD_VAR 0 1
78016: PPUSH
78017: CALL_OW 74
78021: PPUSH
78022: CALL_OW 115
// wait ( 0 0$20 ) ;
78026: LD_INT 700
78028: PPUSH
78029: CALL_OW 67
// SetSide ( un , your_side ) ;
78033: LD_VAR 0 1
78037: PPUSH
78038: LD_OWVAR 2
78042: PPUSH
78043: CALL_OW 235
// end ;
78047: PPOPN 2
78049: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
78050: LD_EXP 69
78054: PUSH
78055: LD_EXP 102
78059: AND
78060: IFFALSE 78166
78062: GO 78064
78064: DISABLE
78065: LD_INT 0
78067: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
78068: LD_ADDR_VAR 0 1
78072: PUSH
78073: LD_INT 22
78075: PUSH
78076: LD_OWVAR 2
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 2
78087: PUSH
78088: LD_INT 30
78090: PUSH
78091: LD_INT 0
78093: PUSH
78094: EMPTY
78095: LIST
78096: LIST
78097: PUSH
78098: LD_INT 30
78100: PUSH
78101: LD_INT 1
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: LIST
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PPUSH
78117: CALL_OW 69
78121: ST_TO_ADDR
// if not depot then
78122: LD_VAR 0 1
78126: NOT
78127: IFFALSE 78131
// exit ;
78129: GO 78166
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
78131: LD_VAR 0 1
78135: PUSH
78136: LD_INT 1
78138: ARRAY
78139: PPUSH
78140: CALL_OW 250
78144: PPUSH
78145: LD_VAR 0 1
78149: PUSH
78150: LD_INT 1
78152: ARRAY
78153: PPUSH
78154: CALL_OW 251
78158: PPUSH
78159: LD_INT 70
78161: PPUSH
78162: CALL_OW 495
// end ;
78166: PPOPN 1
78168: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
78169: LD_EXP 69
78173: PUSH
78174: LD_EXP 103
78178: AND
78179: IFFALSE 78390
78181: GO 78183
78183: DISABLE
78184: LD_INT 0
78186: PPUSH
78187: PPUSH
78188: PPUSH
78189: PPUSH
78190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
78191: LD_ADDR_VAR 0 5
78195: PUSH
78196: LD_INT 22
78198: PUSH
78199: LD_OWVAR 2
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: LD_INT 21
78210: PUSH
78211: LD_INT 1
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: PPUSH
78222: CALL_OW 69
78226: ST_TO_ADDR
// if not tmp then
78227: LD_VAR 0 5
78231: NOT
78232: IFFALSE 78236
// exit ;
78234: GO 78390
// for i in tmp do
78236: LD_ADDR_VAR 0 1
78240: PUSH
78241: LD_VAR 0 5
78245: PUSH
78246: FOR_IN
78247: IFFALSE 78388
// begin d := rand ( 0 , 5 ) ;
78249: LD_ADDR_VAR 0 4
78253: PUSH
78254: LD_INT 0
78256: PPUSH
78257: LD_INT 5
78259: PPUSH
78260: CALL_OW 12
78264: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
78265: LD_ADDR_VAR 0 2
78269: PUSH
78270: LD_VAR 0 1
78274: PPUSH
78275: CALL_OW 250
78279: PPUSH
78280: LD_VAR 0 4
78284: PPUSH
78285: LD_INT 3
78287: PPUSH
78288: LD_INT 12
78290: PPUSH
78291: CALL_OW 12
78295: PPUSH
78296: CALL_OW 272
78300: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
78301: LD_ADDR_VAR 0 3
78305: PUSH
78306: LD_VAR 0 1
78310: PPUSH
78311: CALL_OW 251
78315: PPUSH
78316: LD_VAR 0 4
78320: PPUSH
78321: LD_INT 3
78323: PPUSH
78324: LD_INT 12
78326: PPUSH
78327: CALL_OW 12
78331: PPUSH
78332: CALL_OW 273
78336: ST_TO_ADDR
// if ValidHex ( x , y ) then
78337: LD_VAR 0 2
78341: PPUSH
78342: LD_VAR 0 3
78346: PPUSH
78347: CALL_OW 488
78351: IFFALSE 78386
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
78353: LD_VAR 0 1
78357: PPUSH
78358: LD_VAR 0 2
78362: PPUSH
78363: LD_VAR 0 3
78367: PPUSH
78368: LD_INT 3
78370: PPUSH
78371: LD_INT 6
78373: PPUSH
78374: CALL_OW 12
78378: PPUSH
78379: LD_INT 1
78381: PPUSH
78382: CALL_OW 483
// end ;
78386: GO 78246
78388: POP
78389: POP
// end ;
78390: PPOPN 5
78392: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
78393: LD_EXP 69
78397: PUSH
78398: LD_EXP 104
78402: AND
78403: IFFALSE 78497
78405: GO 78407
78407: DISABLE
78408: LD_INT 0
78410: PPUSH
78411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
78412: LD_ADDR_VAR 0 2
78416: PUSH
78417: LD_INT 22
78419: PUSH
78420: LD_OWVAR 2
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 32
78431: PUSH
78432: LD_INT 1
78434: PUSH
78435: EMPTY
78436: LIST
78437: LIST
78438: PUSH
78439: LD_INT 21
78441: PUSH
78442: LD_INT 2
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: LIST
78453: PPUSH
78454: CALL_OW 69
78458: ST_TO_ADDR
// if not tmp then
78459: LD_VAR 0 2
78463: NOT
78464: IFFALSE 78468
// exit ;
78466: GO 78497
// for i in tmp do
78468: LD_ADDR_VAR 0 1
78472: PUSH
78473: LD_VAR 0 2
78477: PUSH
78478: FOR_IN
78479: IFFALSE 78495
// SetFuel ( i , 0 ) ;
78481: LD_VAR 0 1
78485: PPUSH
78486: LD_INT 0
78488: PPUSH
78489: CALL_OW 240
78493: GO 78478
78495: POP
78496: POP
// end ;
78497: PPOPN 2
78499: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
78500: LD_EXP 69
78504: PUSH
78505: LD_EXP 105
78509: AND
78510: IFFALSE 78576
78512: GO 78514
78514: DISABLE
78515: LD_INT 0
78517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78518: LD_ADDR_VAR 0 1
78522: PUSH
78523: LD_INT 22
78525: PUSH
78526: LD_OWVAR 2
78530: PUSH
78531: EMPTY
78532: LIST
78533: LIST
78534: PUSH
78535: LD_INT 30
78537: PUSH
78538: LD_INT 29
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: PPUSH
78549: CALL_OW 69
78553: ST_TO_ADDR
// if not tmp then
78554: LD_VAR 0 1
78558: NOT
78559: IFFALSE 78563
// exit ;
78561: GO 78576
// DestroyUnit ( tmp [ 1 ] ) ;
78563: LD_VAR 0 1
78567: PUSH
78568: LD_INT 1
78570: ARRAY
78571: PPUSH
78572: CALL_OW 65
// end ;
78576: PPOPN 1
78578: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
78579: LD_EXP 69
78583: PUSH
78584: LD_EXP 107
78588: AND
78589: IFFALSE 78718
78591: GO 78593
78593: DISABLE
78594: LD_INT 0
78596: PPUSH
// begin uc_side := 0 ;
78597: LD_ADDR_OWVAR 20
78601: PUSH
78602: LD_INT 0
78604: ST_TO_ADDR
// uc_nation := nation_arabian ;
78605: LD_ADDR_OWVAR 21
78609: PUSH
78610: LD_INT 2
78612: ST_TO_ADDR
// hc_gallery :=  ;
78613: LD_ADDR_OWVAR 33
78617: PUSH
78618: LD_STRING 
78620: ST_TO_ADDR
// hc_name :=  ;
78621: LD_ADDR_OWVAR 26
78625: PUSH
78626: LD_STRING 
78628: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
78629: LD_INT 1
78631: PPUSH
78632: LD_INT 11
78634: PPUSH
78635: LD_INT 10
78637: PPUSH
78638: CALL_OW 380
// un := CreateHuman ;
78642: LD_ADDR_VAR 0 1
78646: PUSH
78647: CALL_OW 44
78651: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78652: LD_VAR 0 1
78656: PPUSH
78657: LD_INT 1
78659: PPUSH
78660: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
78664: LD_INT 35
78666: PPUSH
78667: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
78671: LD_VAR 0 1
78675: PPUSH
78676: LD_INT 22
78678: PUSH
78679: LD_OWVAR 2
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PPUSH
78688: CALL_OW 69
78692: PPUSH
78693: LD_VAR 0 1
78697: PPUSH
78698: CALL_OW 74
78702: PPUSH
78703: CALL_OW 115
// until IsDead ( un ) ;
78707: LD_VAR 0 1
78711: PPUSH
78712: CALL_OW 301
78716: IFFALSE 78664
// end ;
78718: PPOPN 1
78720: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
78721: LD_EXP 69
78725: PUSH
78726: LD_EXP 109
78730: AND
78731: IFFALSE 78743
78733: GO 78735
78735: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
78736: LD_STRING earthquake(getX(game), 0, 32)
78738: PPUSH
78739: CALL_OW 559
78743: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
78744: LD_EXP 69
78748: PUSH
78749: LD_EXP 110
78753: AND
78754: IFFALSE 78845
78756: GO 78758
78758: DISABLE
78759: LD_INT 0
78761: PPUSH
// begin enable ;
78762: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
78763: LD_ADDR_VAR 0 1
78767: PUSH
78768: LD_INT 22
78770: PUSH
78771: LD_OWVAR 2
78775: PUSH
78776: EMPTY
78777: LIST
78778: LIST
78779: PUSH
78780: LD_INT 21
78782: PUSH
78783: LD_INT 2
78785: PUSH
78786: EMPTY
78787: LIST
78788: LIST
78789: PUSH
78790: LD_INT 33
78792: PUSH
78793: LD_INT 3
78795: PUSH
78796: EMPTY
78797: LIST
78798: LIST
78799: PUSH
78800: EMPTY
78801: LIST
78802: LIST
78803: LIST
78804: PPUSH
78805: CALL_OW 69
78809: ST_TO_ADDR
// if not tmp then
78810: LD_VAR 0 1
78814: NOT
78815: IFFALSE 78819
// exit ;
78817: GO 78845
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78819: LD_VAR 0 1
78823: PUSH
78824: LD_INT 1
78826: PPUSH
78827: LD_VAR 0 1
78831: PPUSH
78832: CALL_OW 12
78836: ARRAY
78837: PPUSH
78838: LD_INT 1
78840: PPUSH
78841: CALL_OW 234
// end ;
78845: PPOPN 1
78847: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
78848: LD_EXP 69
78852: PUSH
78853: LD_EXP 111
78857: AND
78858: IFFALSE 78999
78860: GO 78862
78862: DISABLE
78863: LD_INT 0
78865: PPUSH
78866: PPUSH
78867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78868: LD_ADDR_VAR 0 3
78872: PUSH
78873: LD_INT 22
78875: PUSH
78876: LD_OWVAR 2
78880: PUSH
78881: EMPTY
78882: LIST
78883: LIST
78884: PUSH
78885: LD_INT 25
78887: PUSH
78888: LD_INT 1
78890: PUSH
78891: EMPTY
78892: LIST
78893: LIST
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: PPUSH
78899: CALL_OW 69
78903: ST_TO_ADDR
// if not tmp then
78904: LD_VAR 0 3
78908: NOT
78909: IFFALSE 78913
// exit ;
78911: GO 78999
// un := tmp [ rand ( 1 , tmp ) ] ;
78913: LD_ADDR_VAR 0 2
78917: PUSH
78918: LD_VAR 0 3
78922: PUSH
78923: LD_INT 1
78925: PPUSH
78926: LD_VAR 0 3
78930: PPUSH
78931: CALL_OW 12
78935: ARRAY
78936: ST_TO_ADDR
// if Crawls ( un ) then
78937: LD_VAR 0 2
78941: PPUSH
78942: CALL_OW 318
78946: IFFALSE 78957
// ComWalk ( un ) ;
78948: LD_VAR 0 2
78952: PPUSH
78953: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
78957: LD_VAR 0 2
78961: PPUSH
78962: LD_INT 9
78964: PPUSH
78965: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
78969: LD_INT 28
78971: PPUSH
78972: LD_OWVAR 2
78976: PPUSH
78977: LD_INT 2
78979: PPUSH
78980: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
78984: LD_INT 29
78986: PPUSH
78987: LD_OWVAR 2
78991: PPUSH
78992: LD_INT 2
78994: PPUSH
78995: CALL_OW 322
// end ;
78999: PPOPN 3
79001: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
79002: LD_EXP 69
79006: PUSH
79007: LD_EXP 112
79011: AND
79012: IFFALSE 79123
79014: GO 79016
79016: DISABLE
79017: LD_INT 0
79019: PPUSH
79020: PPUSH
79021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79022: LD_ADDR_VAR 0 3
79026: PUSH
79027: LD_INT 22
79029: PUSH
79030: LD_OWVAR 2
79034: PUSH
79035: EMPTY
79036: LIST
79037: LIST
79038: PUSH
79039: LD_INT 25
79041: PUSH
79042: LD_INT 1
79044: PUSH
79045: EMPTY
79046: LIST
79047: LIST
79048: PUSH
79049: EMPTY
79050: LIST
79051: LIST
79052: PPUSH
79053: CALL_OW 69
79057: ST_TO_ADDR
// if not tmp then
79058: LD_VAR 0 3
79062: NOT
79063: IFFALSE 79067
// exit ;
79065: GO 79123
// un := tmp [ rand ( 1 , tmp ) ] ;
79067: LD_ADDR_VAR 0 2
79071: PUSH
79072: LD_VAR 0 3
79076: PUSH
79077: LD_INT 1
79079: PPUSH
79080: LD_VAR 0 3
79084: PPUSH
79085: CALL_OW 12
79089: ARRAY
79090: ST_TO_ADDR
// if Crawls ( un ) then
79091: LD_VAR 0 2
79095: PPUSH
79096: CALL_OW 318
79100: IFFALSE 79111
// ComWalk ( un ) ;
79102: LD_VAR 0 2
79106: PPUSH
79107: CALL_OW 138
// SetClass ( un , class_mortar ) ;
79111: LD_VAR 0 2
79115: PPUSH
79116: LD_INT 8
79118: PPUSH
79119: CALL_OW 336
// end ;
79123: PPOPN 3
79125: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
79126: LD_EXP 69
79130: PUSH
79131: LD_EXP 113
79135: AND
79136: IFFALSE 79280
79138: GO 79140
79140: DISABLE
79141: LD_INT 0
79143: PPUSH
79144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
79145: LD_ADDR_VAR 0 2
79149: PUSH
79150: LD_INT 22
79152: PUSH
79153: LD_OWVAR 2
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 21
79164: PUSH
79165: LD_INT 2
79167: PUSH
79168: EMPTY
79169: LIST
79170: LIST
79171: PUSH
79172: LD_INT 2
79174: PUSH
79175: LD_INT 34
79177: PUSH
79178: LD_INT 12
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: LD_INT 34
79187: PUSH
79188: LD_INT 51
79190: PUSH
79191: EMPTY
79192: LIST
79193: LIST
79194: PUSH
79195: LD_INT 34
79197: PUSH
79198: LD_INT 32
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: LIST
79209: LIST
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: LIST
79215: PPUSH
79216: CALL_OW 69
79220: ST_TO_ADDR
// if not tmp then
79221: LD_VAR 0 2
79225: NOT
79226: IFFALSE 79230
// exit ;
79228: GO 79280
// for i in tmp do
79230: LD_ADDR_VAR 0 1
79234: PUSH
79235: LD_VAR 0 2
79239: PUSH
79240: FOR_IN
79241: IFFALSE 79278
// if GetCargo ( i , mat_artifact ) = 0 then
79243: LD_VAR 0 1
79247: PPUSH
79248: LD_INT 4
79250: PPUSH
79251: CALL_OW 289
79255: PUSH
79256: LD_INT 0
79258: EQUAL
79259: IFFALSE 79276
// SetCargo ( i , mat_siberit , 100 ) ;
79261: LD_VAR 0 1
79265: PPUSH
79266: LD_INT 3
79268: PPUSH
79269: LD_INT 100
79271: PPUSH
79272: CALL_OW 290
79276: GO 79240
79278: POP
79279: POP
// end ;
79280: PPOPN 2
79282: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
79283: LD_EXP 69
79287: PUSH
79288: LD_EXP 114
79292: AND
79293: IFFALSE 79476
79295: GO 79297
79297: DISABLE
79298: LD_INT 0
79300: PPUSH
79301: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79302: LD_ADDR_VAR 0 2
79306: PUSH
79307: LD_INT 22
79309: PUSH
79310: LD_OWVAR 2
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PPUSH
79319: CALL_OW 69
79323: ST_TO_ADDR
// if not tmp then
79324: LD_VAR 0 2
79328: NOT
79329: IFFALSE 79333
// exit ;
79331: GO 79476
// for i := 1 to 2 do
79333: LD_ADDR_VAR 0 1
79337: PUSH
79338: DOUBLE
79339: LD_INT 1
79341: DEC
79342: ST_TO_ADDR
79343: LD_INT 2
79345: PUSH
79346: FOR_TO
79347: IFFALSE 79474
// begin uc_side := your_side ;
79349: LD_ADDR_OWVAR 20
79353: PUSH
79354: LD_OWVAR 2
79358: ST_TO_ADDR
// uc_nation := nation_american ;
79359: LD_ADDR_OWVAR 21
79363: PUSH
79364: LD_INT 1
79366: ST_TO_ADDR
// vc_chassis := us_morphling ;
79367: LD_ADDR_OWVAR 37
79371: PUSH
79372: LD_INT 5
79374: ST_TO_ADDR
// vc_engine := engine_siberite ;
79375: LD_ADDR_OWVAR 39
79379: PUSH
79380: LD_INT 3
79382: ST_TO_ADDR
// vc_control := control_computer ;
79383: LD_ADDR_OWVAR 38
79387: PUSH
79388: LD_INT 3
79390: ST_TO_ADDR
// vc_weapon := us_double_laser ;
79391: LD_ADDR_OWVAR 40
79395: PUSH
79396: LD_INT 10
79398: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
79399: LD_VAR 0 2
79403: PUSH
79404: LD_INT 1
79406: ARRAY
79407: PPUSH
79408: CALL_OW 310
79412: NOT
79413: IFFALSE 79460
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
79415: CALL_OW 45
79419: PPUSH
79420: LD_VAR 0 2
79424: PUSH
79425: LD_INT 1
79427: ARRAY
79428: PPUSH
79429: CALL_OW 250
79433: PPUSH
79434: LD_VAR 0 2
79438: PUSH
79439: LD_INT 1
79441: ARRAY
79442: PPUSH
79443: CALL_OW 251
79447: PPUSH
79448: LD_INT 12
79450: PPUSH
79451: LD_INT 1
79453: PPUSH
79454: CALL_OW 50
79458: GO 79472
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
79460: CALL_OW 45
79464: PPUSH
79465: LD_INT 1
79467: PPUSH
79468: CALL_OW 51
// end ;
79472: GO 79346
79474: POP
79475: POP
// end ;
79476: PPOPN 2
79478: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
79479: LD_EXP 69
79483: PUSH
79484: LD_EXP 115
79488: AND
79489: IFFALSE 79711
79491: GO 79493
79493: DISABLE
79494: LD_INT 0
79496: PPUSH
79497: PPUSH
79498: PPUSH
79499: PPUSH
79500: PPUSH
79501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
79502: LD_ADDR_VAR 0 6
79506: PUSH
79507: LD_INT 22
79509: PUSH
79510: LD_OWVAR 2
79514: PUSH
79515: EMPTY
79516: LIST
79517: LIST
79518: PUSH
79519: LD_INT 21
79521: PUSH
79522: LD_INT 1
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 3
79531: PUSH
79532: LD_INT 23
79534: PUSH
79535: LD_INT 0
79537: PUSH
79538: EMPTY
79539: LIST
79540: LIST
79541: PUSH
79542: EMPTY
79543: LIST
79544: LIST
79545: PUSH
79546: EMPTY
79547: LIST
79548: LIST
79549: LIST
79550: PPUSH
79551: CALL_OW 69
79555: ST_TO_ADDR
// if not tmp then
79556: LD_VAR 0 6
79560: NOT
79561: IFFALSE 79565
// exit ;
79563: GO 79711
// s1 := rand ( 1 , 4 ) ;
79565: LD_ADDR_VAR 0 2
79569: PUSH
79570: LD_INT 1
79572: PPUSH
79573: LD_INT 4
79575: PPUSH
79576: CALL_OW 12
79580: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
79581: LD_ADDR_VAR 0 4
79585: PUSH
79586: LD_VAR 0 6
79590: PUSH
79591: LD_INT 1
79593: ARRAY
79594: PPUSH
79595: LD_VAR 0 2
79599: PPUSH
79600: CALL_OW 259
79604: ST_TO_ADDR
// if s1 = 1 then
79605: LD_VAR 0 2
79609: PUSH
79610: LD_INT 1
79612: EQUAL
79613: IFFALSE 79633
// s2 := rand ( 2 , 4 ) else
79615: LD_ADDR_VAR 0 3
79619: PUSH
79620: LD_INT 2
79622: PPUSH
79623: LD_INT 4
79625: PPUSH
79626: CALL_OW 12
79630: ST_TO_ADDR
79631: GO 79641
// s2 := 1 ;
79633: LD_ADDR_VAR 0 3
79637: PUSH
79638: LD_INT 1
79640: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
79641: LD_ADDR_VAR 0 5
79645: PUSH
79646: LD_VAR 0 6
79650: PUSH
79651: LD_INT 1
79653: ARRAY
79654: PPUSH
79655: LD_VAR 0 3
79659: PPUSH
79660: CALL_OW 259
79664: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
79665: LD_VAR 0 6
79669: PUSH
79670: LD_INT 1
79672: ARRAY
79673: PPUSH
79674: LD_VAR 0 2
79678: PPUSH
79679: LD_VAR 0 5
79683: PPUSH
79684: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
79688: LD_VAR 0 6
79692: PUSH
79693: LD_INT 1
79695: ARRAY
79696: PPUSH
79697: LD_VAR 0 3
79701: PPUSH
79702: LD_VAR 0 4
79706: PPUSH
79707: CALL_OW 237
// end ;
79711: PPOPN 6
79713: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
79714: LD_EXP 69
79718: PUSH
79719: LD_EXP 116
79723: AND
79724: IFFALSE 79803
79726: GO 79728
79728: DISABLE
79729: LD_INT 0
79731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
79732: LD_ADDR_VAR 0 1
79736: PUSH
79737: LD_INT 22
79739: PUSH
79740: LD_OWVAR 2
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 30
79751: PUSH
79752: LD_INT 3
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: PUSH
79759: EMPTY
79760: LIST
79761: LIST
79762: PPUSH
79763: CALL_OW 69
79767: ST_TO_ADDR
// if not tmp then
79768: LD_VAR 0 1
79772: NOT
79773: IFFALSE 79777
// exit ;
79775: GO 79803
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
79777: LD_VAR 0 1
79781: PUSH
79782: LD_INT 1
79784: PPUSH
79785: LD_VAR 0 1
79789: PPUSH
79790: CALL_OW 12
79794: ARRAY
79795: PPUSH
79796: LD_INT 1
79798: PPUSH
79799: CALL_OW 234
// end ;
79803: PPOPN 1
79805: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
79806: LD_EXP 69
79810: PUSH
79811: LD_EXP 117
79815: AND
79816: IFFALSE 79928
79818: GO 79820
79820: DISABLE
79821: LD_INT 0
79823: PPUSH
79824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
79825: LD_ADDR_VAR 0 2
79829: PUSH
79830: LD_INT 22
79832: PUSH
79833: LD_OWVAR 2
79837: PUSH
79838: EMPTY
79839: LIST
79840: LIST
79841: PUSH
79842: LD_INT 2
79844: PUSH
79845: LD_INT 30
79847: PUSH
79848: LD_INT 27
79850: PUSH
79851: EMPTY
79852: LIST
79853: LIST
79854: PUSH
79855: LD_INT 30
79857: PUSH
79858: LD_INT 26
79860: PUSH
79861: EMPTY
79862: LIST
79863: LIST
79864: PUSH
79865: LD_INT 30
79867: PUSH
79868: LD_INT 28
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: EMPTY
79876: LIST
79877: LIST
79878: LIST
79879: LIST
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PPUSH
79885: CALL_OW 69
79889: ST_TO_ADDR
// if not tmp then
79890: LD_VAR 0 2
79894: NOT
79895: IFFALSE 79899
// exit ;
79897: GO 79928
// for i in tmp do
79899: LD_ADDR_VAR 0 1
79903: PUSH
79904: LD_VAR 0 2
79908: PUSH
79909: FOR_IN
79910: IFFALSE 79926
// SetLives ( i , 1 ) ;
79912: LD_VAR 0 1
79916: PPUSH
79917: LD_INT 1
79919: PPUSH
79920: CALL_OW 234
79924: GO 79909
79926: POP
79927: POP
// end ;
79928: PPOPN 2
79930: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
79931: LD_EXP 69
79935: PUSH
79936: LD_EXP 118
79940: AND
79941: IFFALSE 80228
79943: GO 79945
79945: DISABLE
79946: LD_INT 0
79948: PPUSH
79949: PPUSH
79950: PPUSH
// begin i := rand ( 1 , 7 ) ;
79951: LD_ADDR_VAR 0 1
79955: PUSH
79956: LD_INT 1
79958: PPUSH
79959: LD_INT 7
79961: PPUSH
79962: CALL_OW 12
79966: ST_TO_ADDR
// case i of 1 :
79967: LD_VAR 0 1
79971: PUSH
79972: LD_INT 1
79974: DOUBLE
79975: EQUAL
79976: IFTRUE 79980
79978: GO 79990
79980: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
79981: LD_STRING earthquake(getX(game), 0, 32)
79983: PPUSH
79984: CALL_OW 559
79988: GO 80228
79990: LD_INT 2
79992: DOUBLE
79993: EQUAL
79994: IFTRUE 79998
79996: GO 80012
79998: POP
// begin ToLua ( displayStucuk(); ) ;
79999: LD_STRING displayStucuk();
80001: PPUSH
80002: CALL_OW 559
// ResetFog ;
80006: CALL_OW 335
// end ; 3 :
80010: GO 80228
80012: LD_INT 3
80014: DOUBLE
80015: EQUAL
80016: IFTRUE 80020
80018: GO 80124
80020: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
80021: LD_ADDR_VAR 0 2
80025: PUSH
80026: LD_INT 22
80028: PUSH
80029: LD_OWVAR 2
80033: PUSH
80034: EMPTY
80035: LIST
80036: LIST
80037: PUSH
80038: LD_INT 25
80040: PUSH
80041: LD_INT 1
80043: PUSH
80044: EMPTY
80045: LIST
80046: LIST
80047: PUSH
80048: EMPTY
80049: LIST
80050: LIST
80051: PPUSH
80052: CALL_OW 69
80056: ST_TO_ADDR
// if not tmp then
80057: LD_VAR 0 2
80061: NOT
80062: IFFALSE 80066
// exit ;
80064: GO 80228
// un := tmp [ rand ( 1 , tmp ) ] ;
80066: LD_ADDR_VAR 0 3
80070: PUSH
80071: LD_VAR 0 2
80075: PUSH
80076: LD_INT 1
80078: PPUSH
80079: LD_VAR 0 2
80083: PPUSH
80084: CALL_OW 12
80088: ARRAY
80089: ST_TO_ADDR
// if Crawls ( un ) then
80090: LD_VAR 0 3
80094: PPUSH
80095: CALL_OW 318
80099: IFFALSE 80110
// ComWalk ( un ) ;
80101: LD_VAR 0 3
80105: PPUSH
80106: CALL_OW 138
// SetClass ( un , class_mortar ) ;
80110: LD_VAR 0 3
80114: PPUSH
80115: LD_INT 8
80117: PPUSH
80118: CALL_OW 336
// end ; 4 :
80122: GO 80228
80124: LD_INT 4
80126: DOUBLE
80127: EQUAL
80128: IFTRUE 80132
80130: GO 80206
80132: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
80133: LD_ADDR_VAR 0 2
80137: PUSH
80138: LD_INT 22
80140: PUSH
80141: LD_OWVAR 2
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PUSH
80150: LD_INT 30
80152: PUSH
80153: LD_INT 29
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: PPUSH
80164: CALL_OW 69
80168: ST_TO_ADDR
// if not tmp then
80169: LD_VAR 0 2
80173: NOT
80174: IFFALSE 80178
// exit ;
80176: GO 80228
// CenterNowOnUnits ( tmp [ 1 ] ) ;
80178: LD_VAR 0 2
80182: PUSH
80183: LD_INT 1
80185: ARRAY
80186: PPUSH
80187: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
80191: LD_VAR 0 2
80195: PUSH
80196: LD_INT 1
80198: ARRAY
80199: PPUSH
80200: CALL_OW 65
// end ; 5 .. 7 :
80204: GO 80228
80206: LD_INT 5
80208: DOUBLE
80209: GREATEREQUAL
80210: IFFALSE 80218
80212: LD_INT 7
80214: DOUBLE
80215: LESSEQUAL
80216: IFTRUE 80220
80218: GO 80227
80220: POP
// StreamSibBomb ; end ;
80221: CALL 76465 0 0
80225: GO 80228
80227: POP
// end ;
80228: PPOPN 3
80230: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
80231: LD_EXP 69
80235: PUSH
80236: LD_EXP 119
80240: AND
80241: IFFALSE 80397
80243: GO 80245
80245: DISABLE
80246: LD_INT 0
80248: PPUSH
80249: PPUSH
80250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
80251: LD_ADDR_VAR 0 2
80255: PUSH
80256: LD_INT 81
80258: PUSH
80259: LD_OWVAR 2
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: PUSH
80268: LD_INT 2
80270: PUSH
80271: LD_INT 21
80273: PUSH
80274: LD_INT 1
80276: PUSH
80277: EMPTY
80278: LIST
80279: LIST
80280: PUSH
80281: LD_INT 21
80283: PUSH
80284: LD_INT 2
80286: PUSH
80287: EMPTY
80288: LIST
80289: LIST
80290: PUSH
80291: EMPTY
80292: LIST
80293: LIST
80294: LIST
80295: PUSH
80296: EMPTY
80297: LIST
80298: LIST
80299: PPUSH
80300: CALL_OW 69
80304: ST_TO_ADDR
// if not tmp then
80305: LD_VAR 0 2
80309: NOT
80310: IFFALSE 80314
// exit ;
80312: GO 80397
// p := 0 ;
80314: LD_ADDR_VAR 0 3
80318: PUSH
80319: LD_INT 0
80321: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80322: LD_INT 35
80324: PPUSH
80325: CALL_OW 67
// p := p + 1 ;
80329: LD_ADDR_VAR 0 3
80333: PUSH
80334: LD_VAR 0 3
80338: PUSH
80339: LD_INT 1
80341: PLUS
80342: ST_TO_ADDR
// for i in tmp do
80343: LD_ADDR_VAR 0 1
80347: PUSH
80348: LD_VAR 0 2
80352: PUSH
80353: FOR_IN
80354: IFFALSE 80385
// if GetLives ( i ) < 1000 then
80356: LD_VAR 0 1
80360: PPUSH
80361: CALL_OW 256
80365: PUSH
80366: LD_INT 1000
80368: LESS
80369: IFFALSE 80383
// SetLives ( i , 1000 ) ;
80371: LD_VAR 0 1
80375: PPUSH
80376: LD_INT 1000
80378: PPUSH
80379: CALL_OW 234
80383: GO 80353
80385: POP
80386: POP
// until p > 20 ;
80387: LD_VAR 0 3
80391: PUSH
80392: LD_INT 20
80394: GREATER
80395: IFFALSE 80322
// end ;
80397: PPOPN 3
80399: END
// every 0 0$1 trigger StreamModeActive and sTime do
80400: LD_EXP 69
80404: PUSH
80405: LD_EXP 120
80409: AND
80410: IFFALSE 80445
80412: GO 80414
80414: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
80415: LD_INT 28
80417: PPUSH
80418: LD_OWVAR 2
80422: PPUSH
80423: LD_INT 2
80425: PPUSH
80426: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
80430: LD_INT 30
80432: PPUSH
80433: LD_OWVAR 2
80437: PPUSH
80438: LD_INT 2
80440: PPUSH
80441: CALL_OW 322
// end ;
80445: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
80446: LD_EXP 69
80450: PUSH
80451: LD_EXP 121
80455: AND
80456: IFFALSE 80577
80458: GO 80460
80460: DISABLE
80461: LD_INT 0
80463: PPUSH
80464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80465: LD_ADDR_VAR 0 2
80469: PUSH
80470: LD_INT 22
80472: PUSH
80473: LD_OWVAR 2
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: PUSH
80482: LD_INT 21
80484: PUSH
80485: LD_INT 1
80487: PUSH
80488: EMPTY
80489: LIST
80490: LIST
80491: PUSH
80492: LD_INT 3
80494: PUSH
80495: LD_INT 23
80497: PUSH
80498: LD_INT 0
80500: PUSH
80501: EMPTY
80502: LIST
80503: LIST
80504: PUSH
80505: EMPTY
80506: LIST
80507: LIST
80508: PUSH
80509: EMPTY
80510: LIST
80511: LIST
80512: LIST
80513: PPUSH
80514: CALL_OW 69
80518: ST_TO_ADDR
// if not tmp then
80519: LD_VAR 0 2
80523: NOT
80524: IFFALSE 80528
// exit ;
80526: GO 80577
// for i in tmp do
80528: LD_ADDR_VAR 0 1
80532: PUSH
80533: LD_VAR 0 2
80537: PUSH
80538: FOR_IN
80539: IFFALSE 80575
// begin if Crawls ( i ) then
80541: LD_VAR 0 1
80545: PPUSH
80546: CALL_OW 318
80550: IFFALSE 80561
// ComWalk ( i ) ;
80552: LD_VAR 0 1
80556: PPUSH
80557: CALL_OW 138
// SetClass ( i , 2 ) ;
80561: LD_VAR 0 1
80565: PPUSH
80566: LD_INT 2
80568: PPUSH
80569: CALL_OW 336
// end ;
80573: GO 80538
80575: POP
80576: POP
// end ;
80577: PPOPN 2
80579: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
80580: LD_EXP 69
80584: PUSH
80585: LD_EXP 122
80589: AND
80590: IFFALSE 80878
80592: GO 80594
80594: DISABLE
80595: LD_INT 0
80597: PPUSH
80598: PPUSH
80599: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
80600: LD_OWVAR 2
80604: PPUSH
80605: LD_INT 9
80607: PPUSH
80608: LD_INT 1
80610: PPUSH
80611: LD_INT 1
80613: PPUSH
80614: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
80618: LD_INT 9
80620: PPUSH
80621: LD_OWVAR 2
80625: PPUSH
80626: CALL_OW 343
// uc_side := 9 ;
80630: LD_ADDR_OWVAR 20
80634: PUSH
80635: LD_INT 9
80637: ST_TO_ADDR
// uc_nation := 2 ;
80638: LD_ADDR_OWVAR 21
80642: PUSH
80643: LD_INT 2
80645: ST_TO_ADDR
// hc_name := Dark Warrior ;
80646: LD_ADDR_OWVAR 26
80650: PUSH
80651: LD_STRING Dark Warrior
80653: ST_TO_ADDR
// hc_gallery :=  ;
80654: LD_ADDR_OWVAR 33
80658: PUSH
80659: LD_STRING 
80661: ST_TO_ADDR
// hc_noskilllimit := true ;
80662: LD_ADDR_OWVAR 76
80666: PUSH
80667: LD_INT 1
80669: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
80670: LD_ADDR_OWVAR 31
80674: PUSH
80675: LD_INT 30
80677: PUSH
80678: LD_INT 30
80680: PUSH
80681: LD_INT 30
80683: PUSH
80684: LD_INT 30
80686: PUSH
80687: EMPTY
80688: LIST
80689: LIST
80690: LIST
80691: LIST
80692: ST_TO_ADDR
// un := CreateHuman ;
80693: LD_ADDR_VAR 0 3
80697: PUSH
80698: CALL_OW 44
80702: ST_TO_ADDR
// hc_noskilllimit := false ;
80703: LD_ADDR_OWVAR 76
80707: PUSH
80708: LD_INT 0
80710: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
80711: LD_VAR 0 3
80715: PPUSH
80716: LD_INT 1
80718: PPUSH
80719: CALL_OW 51
// ToLua ( playRanger() ) ;
80723: LD_STRING playRanger()
80725: PPUSH
80726: CALL_OW 559
// p := 0 ;
80730: LD_ADDR_VAR 0 2
80734: PUSH
80735: LD_INT 0
80737: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80738: LD_INT 35
80740: PPUSH
80741: CALL_OW 67
// p := p + 1 ;
80745: LD_ADDR_VAR 0 2
80749: PUSH
80750: LD_VAR 0 2
80754: PUSH
80755: LD_INT 1
80757: PLUS
80758: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
80759: LD_VAR 0 3
80763: PPUSH
80764: CALL_OW 256
80768: PUSH
80769: LD_INT 1000
80771: LESS
80772: IFFALSE 80786
// SetLives ( un , 1000 ) ;
80774: LD_VAR 0 3
80778: PPUSH
80779: LD_INT 1000
80781: PPUSH
80782: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
80786: LD_VAR 0 3
80790: PPUSH
80791: LD_INT 81
80793: PUSH
80794: LD_OWVAR 2
80798: PUSH
80799: EMPTY
80800: LIST
80801: LIST
80802: PUSH
80803: LD_INT 91
80805: PUSH
80806: LD_VAR 0 3
80810: PUSH
80811: LD_INT 30
80813: PUSH
80814: EMPTY
80815: LIST
80816: LIST
80817: LIST
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PPUSH
80823: CALL_OW 69
80827: PPUSH
80828: LD_VAR 0 3
80832: PPUSH
80833: CALL_OW 74
80837: PPUSH
80838: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
80842: LD_VAR 0 2
80846: PUSH
80847: LD_INT 80
80849: GREATER
80850: PUSH
80851: LD_VAR 0 3
80855: PPUSH
80856: CALL_OW 301
80860: OR
80861: IFFALSE 80738
// if un then
80863: LD_VAR 0 3
80867: IFFALSE 80878
// RemoveUnit ( un ) ;
80869: LD_VAR 0 3
80873: PPUSH
80874: CALL_OW 64
// end ;
80878: PPOPN 3
80880: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
80881: LD_EXP 123
80885: IFFALSE 81001
80887: GO 80889
80889: DISABLE
80890: LD_INT 0
80892: PPUSH
80893: PPUSH
80894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
80895: LD_ADDR_VAR 0 2
80899: PUSH
80900: LD_INT 81
80902: PUSH
80903: LD_OWVAR 2
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: LD_INT 21
80914: PUSH
80915: LD_INT 1
80917: PUSH
80918: EMPTY
80919: LIST
80920: LIST
80921: PUSH
80922: EMPTY
80923: LIST
80924: LIST
80925: PPUSH
80926: CALL_OW 69
80930: ST_TO_ADDR
// ToLua ( playComputer() ) ;
80931: LD_STRING playComputer()
80933: PPUSH
80934: CALL_OW 559
// if not tmp then
80938: LD_VAR 0 2
80942: NOT
80943: IFFALSE 80947
// exit ;
80945: GO 81001
// for i in tmp do
80947: LD_ADDR_VAR 0 1
80951: PUSH
80952: LD_VAR 0 2
80956: PUSH
80957: FOR_IN
80958: IFFALSE 80999
// for j := 1 to 4 do
80960: LD_ADDR_VAR 0 3
80964: PUSH
80965: DOUBLE
80966: LD_INT 1
80968: DEC
80969: ST_TO_ADDR
80970: LD_INT 4
80972: PUSH
80973: FOR_TO
80974: IFFALSE 80995
// SetSkill ( i , j , 10 ) ;
80976: LD_VAR 0 1
80980: PPUSH
80981: LD_VAR 0 3
80985: PPUSH
80986: LD_INT 10
80988: PPUSH
80989: CALL_OW 237
80993: GO 80973
80995: POP
80996: POP
80997: GO 80957
80999: POP
81000: POP
// end ;
81001: PPOPN 3
81003: END
// every 0 0$1 trigger s30 do var i , tmp ;
81004: LD_EXP 124
81008: IFFALSE 81077
81010: GO 81012
81012: DISABLE
81013: LD_INT 0
81015: PPUSH
81016: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81017: LD_ADDR_VAR 0 2
81021: PUSH
81022: LD_INT 22
81024: PUSH
81025: LD_OWVAR 2
81029: PUSH
81030: EMPTY
81031: LIST
81032: LIST
81033: PPUSH
81034: CALL_OW 69
81038: ST_TO_ADDR
// if not tmp then
81039: LD_VAR 0 2
81043: NOT
81044: IFFALSE 81048
// exit ;
81046: GO 81077
// for i in tmp do
81048: LD_ADDR_VAR 0 1
81052: PUSH
81053: LD_VAR 0 2
81057: PUSH
81058: FOR_IN
81059: IFFALSE 81075
// SetLives ( i , 300 ) ;
81061: LD_VAR 0 1
81065: PPUSH
81066: LD_INT 300
81068: PPUSH
81069: CALL_OW 234
81073: GO 81058
81075: POP
81076: POP
// end ;
81077: PPOPN 2
81079: END
// every 0 0$1 trigger s60 do var i , tmp ;
81080: LD_EXP 125
81084: IFFALSE 81153
81086: GO 81088
81088: DISABLE
81089: LD_INT 0
81091: PPUSH
81092: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
81093: LD_ADDR_VAR 0 2
81097: PUSH
81098: LD_INT 22
81100: PUSH
81101: LD_OWVAR 2
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: PPUSH
81110: CALL_OW 69
81114: ST_TO_ADDR
// if not tmp then
81115: LD_VAR 0 2
81119: NOT
81120: IFFALSE 81124
// exit ;
81122: GO 81153
// for i in tmp do
81124: LD_ADDR_VAR 0 1
81128: PUSH
81129: LD_VAR 0 2
81133: PUSH
81134: FOR_IN
81135: IFFALSE 81151
// SetLives ( i , 600 ) ;
81137: LD_VAR 0 1
81141: PPUSH
81142: LD_INT 600
81144: PPUSH
81145: CALL_OW 234
81149: GO 81134
81151: POP
81152: POP
// end ;
81153: PPOPN 2
81155: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
81156: LD_INT 0
81158: PPUSH
// case cmd of 301 :
81159: LD_VAR 0 1
81163: PUSH
81164: LD_INT 301
81166: DOUBLE
81167: EQUAL
81168: IFTRUE 81172
81170: GO 81204
81172: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
81173: LD_VAR 0 6
81177: PPUSH
81178: LD_VAR 0 7
81182: PPUSH
81183: LD_VAR 0 8
81187: PPUSH
81188: LD_VAR 0 4
81192: PPUSH
81193: LD_VAR 0 5
81197: PPUSH
81198: CALL 82405 0 5
81202: GO 81325
81204: LD_INT 302
81206: DOUBLE
81207: EQUAL
81208: IFTRUE 81212
81210: GO 81249
81212: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
81213: LD_VAR 0 6
81217: PPUSH
81218: LD_VAR 0 7
81222: PPUSH
81223: LD_VAR 0 8
81227: PPUSH
81228: LD_VAR 0 9
81232: PPUSH
81233: LD_VAR 0 4
81237: PPUSH
81238: LD_VAR 0 5
81242: PPUSH
81243: CALL 82496 0 6
81247: GO 81325
81249: LD_INT 303
81251: DOUBLE
81252: EQUAL
81253: IFTRUE 81257
81255: GO 81294
81257: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
81258: LD_VAR 0 6
81262: PPUSH
81263: LD_VAR 0 7
81267: PPUSH
81268: LD_VAR 0 8
81272: PPUSH
81273: LD_VAR 0 9
81277: PPUSH
81278: LD_VAR 0 4
81282: PPUSH
81283: LD_VAR 0 5
81287: PPUSH
81288: CALL 81330 0 6
81292: GO 81325
81294: LD_INT 304
81296: DOUBLE
81297: EQUAL
81298: IFTRUE 81302
81300: GO 81324
81302: POP
// hHackTeleport ( unit , x , y ) ; end ;
81303: LD_VAR 0 2
81307: PPUSH
81308: LD_VAR 0 4
81312: PPUSH
81313: LD_VAR 0 5
81317: PPUSH
81318: CALL 83089 0 3
81322: GO 81325
81324: POP
// end ;
81325: LD_VAR 0 12
81329: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
81330: LD_INT 0
81332: PPUSH
81333: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
81334: LD_VAR 0 1
81338: PUSH
81339: LD_INT 1
81341: LESS
81342: PUSH
81343: LD_VAR 0 1
81347: PUSH
81348: LD_INT 3
81350: GREATER
81351: OR
81352: PUSH
81353: LD_VAR 0 5
81357: PPUSH
81358: LD_VAR 0 6
81362: PPUSH
81363: CALL_OW 428
81367: OR
81368: IFFALSE 81372
// exit ;
81370: GO 82092
// uc_side := your_side ;
81372: LD_ADDR_OWVAR 20
81376: PUSH
81377: LD_OWVAR 2
81381: ST_TO_ADDR
// uc_nation := nation ;
81382: LD_ADDR_OWVAR 21
81386: PUSH
81387: LD_VAR 0 1
81391: ST_TO_ADDR
// bc_level = 1 ;
81392: LD_ADDR_OWVAR 43
81396: PUSH
81397: LD_INT 1
81399: ST_TO_ADDR
// case btype of 1 :
81400: LD_VAR 0 2
81404: PUSH
81405: LD_INT 1
81407: DOUBLE
81408: EQUAL
81409: IFTRUE 81413
81411: GO 81424
81413: POP
// bc_type := b_depot ; 2 :
81414: LD_ADDR_OWVAR 42
81418: PUSH
81419: LD_INT 0
81421: ST_TO_ADDR
81422: GO 82036
81424: LD_INT 2
81426: DOUBLE
81427: EQUAL
81428: IFTRUE 81432
81430: GO 81443
81432: POP
// bc_type := b_warehouse ; 3 :
81433: LD_ADDR_OWVAR 42
81437: PUSH
81438: LD_INT 1
81440: ST_TO_ADDR
81441: GO 82036
81443: LD_INT 3
81445: DOUBLE
81446: EQUAL
81447: IFTRUE 81451
81449: GO 81462
81451: POP
// bc_type := b_lab ; 4 .. 9 :
81452: LD_ADDR_OWVAR 42
81456: PUSH
81457: LD_INT 6
81459: ST_TO_ADDR
81460: GO 82036
81462: LD_INT 4
81464: DOUBLE
81465: GREATEREQUAL
81466: IFFALSE 81474
81468: LD_INT 9
81470: DOUBLE
81471: LESSEQUAL
81472: IFTRUE 81476
81474: GO 81528
81476: POP
// begin bc_type := b_lab_half ;
81477: LD_ADDR_OWVAR 42
81481: PUSH
81482: LD_INT 7
81484: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
81485: LD_ADDR_OWVAR 44
81489: PUSH
81490: LD_INT 10
81492: PUSH
81493: LD_INT 11
81495: PUSH
81496: LD_INT 12
81498: PUSH
81499: LD_INT 15
81501: PUSH
81502: LD_INT 14
81504: PUSH
81505: LD_INT 13
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: PUSH
81516: LD_VAR 0 2
81520: PUSH
81521: LD_INT 3
81523: MINUS
81524: ARRAY
81525: ST_TO_ADDR
// end ; 10 .. 13 :
81526: GO 82036
81528: LD_INT 10
81530: DOUBLE
81531: GREATEREQUAL
81532: IFFALSE 81540
81534: LD_INT 13
81536: DOUBLE
81537: LESSEQUAL
81538: IFTRUE 81542
81540: GO 81619
81542: POP
// begin bc_type := b_lab_full ;
81543: LD_ADDR_OWVAR 42
81547: PUSH
81548: LD_INT 8
81550: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
81551: LD_ADDR_OWVAR 44
81555: PUSH
81556: LD_INT 10
81558: PUSH
81559: LD_INT 12
81561: PUSH
81562: LD_INT 14
81564: PUSH
81565: LD_INT 13
81567: PUSH
81568: EMPTY
81569: LIST
81570: LIST
81571: LIST
81572: LIST
81573: PUSH
81574: LD_VAR 0 2
81578: PUSH
81579: LD_INT 9
81581: MINUS
81582: ARRAY
81583: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
81584: LD_ADDR_OWVAR 45
81588: PUSH
81589: LD_INT 11
81591: PUSH
81592: LD_INT 15
81594: PUSH
81595: LD_INT 12
81597: PUSH
81598: LD_INT 15
81600: PUSH
81601: EMPTY
81602: LIST
81603: LIST
81604: LIST
81605: LIST
81606: PUSH
81607: LD_VAR 0 2
81611: PUSH
81612: LD_INT 9
81614: MINUS
81615: ARRAY
81616: ST_TO_ADDR
// end ; 14 :
81617: GO 82036
81619: LD_INT 14
81621: DOUBLE
81622: EQUAL
81623: IFTRUE 81627
81625: GO 81638
81627: POP
// bc_type := b_workshop ; 15 :
81628: LD_ADDR_OWVAR 42
81632: PUSH
81633: LD_INT 2
81635: ST_TO_ADDR
81636: GO 82036
81638: LD_INT 15
81640: DOUBLE
81641: EQUAL
81642: IFTRUE 81646
81644: GO 81657
81646: POP
// bc_type := b_factory ; 16 :
81647: LD_ADDR_OWVAR 42
81651: PUSH
81652: LD_INT 3
81654: ST_TO_ADDR
81655: GO 82036
81657: LD_INT 16
81659: DOUBLE
81660: EQUAL
81661: IFTRUE 81665
81663: GO 81676
81665: POP
// bc_type := b_ext_gun ; 17 :
81666: LD_ADDR_OWVAR 42
81670: PUSH
81671: LD_INT 17
81673: ST_TO_ADDR
81674: GO 82036
81676: LD_INT 17
81678: DOUBLE
81679: EQUAL
81680: IFTRUE 81684
81682: GO 81712
81684: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
81685: LD_ADDR_OWVAR 42
81689: PUSH
81690: LD_INT 19
81692: PUSH
81693: LD_INT 23
81695: PUSH
81696: LD_INT 19
81698: PUSH
81699: EMPTY
81700: LIST
81701: LIST
81702: LIST
81703: PUSH
81704: LD_VAR 0 1
81708: ARRAY
81709: ST_TO_ADDR
81710: GO 82036
81712: LD_INT 18
81714: DOUBLE
81715: EQUAL
81716: IFTRUE 81720
81718: GO 81731
81720: POP
// bc_type := b_ext_radar ; 19 :
81721: LD_ADDR_OWVAR 42
81725: PUSH
81726: LD_INT 20
81728: ST_TO_ADDR
81729: GO 82036
81731: LD_INT 19
81733: DOUBLE
81734: EQUAL
81735: IFTRUE 81739
81737: GO 81750
81739: POP
// bc_type := b_ext_radio ; 20 :
81740: LD_ADDR_OWVAR 42
81744: PUSH
81745: LD_INT 22
81747: ST_TO_ADDR
81748: GO 82036
81750: LD_INT 20
81752: DOUBLE
81753: EQUAL
81754: IFTRUE 81758
81756: GO 81769
81758: POP
// bc_type := b_ext_siberium ; 21 :
81759: LD_ADDR_OWVAR 42
81763: PUSH
81764: LD_INT 21
81766: ST_TO_ADDR
81767: GO 82036
81769: LD_INT 21
81771: DOUBLE
81772: EQUAL
81773: IFTRUE 81777
81775: GO 81788
81777: POP
// bc_type := b_ext_computer ; 22 :
81778: LD_ADDR_OWVAR 42
81782: PUSH
81783: LD_INT 24
81785: ST_TO_ADDR
81786: GO 82036
81788: LD_INT 22
81790: DOUBLE
81791: EQUAL
81792: IFTRUE 81796
81794: GO 81807
81796: POP
// bc_type := b_ext_track ; 23 :
81797: LD_ADDR_OWVAR 42
81801: PUSH
81802: LD_INT 16
81804: ST_TO_ADDR
81805: GO 82036
81807: LD_INT 23
81809: DOUBLE
81810: EQUAL
81811: IFTRUE 81815
81813: GO 81826
81815: POP
// bc_type := b_ext_laser ; 24 :
81816: LD_ADDR_OWVAR 42
81820: PUSH
81821: LD_INT 25
81823: ST_TO_ADDR
81824: GO 82036
81826: LD_INT 24
81828: DOUBLE
81829: EQUAL
81830: IFTRUE 81834
81832: GO 81845
81834: POP
// bc_type := b_control_tower ; 25 :
81835: LD_ADDR_OWVAR 42
81839: PUSH
81840: LD_INT 36
81842: ST_TO_ADDR
81843: GO 82036
81845: LD_INT 25
81847: DOUBLE
81848: EQUAL
81849: IFTRUE 81853
81851: GO 81864
81853: POP
// bc_type := b_breastwork ; 26 :
81854: LD_ADDR_OWVAR 42
81858: PUSH
81859: LD_INT 31
81861: ST_TO_ADDR
81862: GO 82036
81864: LD_INT 26
81866: DOUBLE
81867: EQUAL
81868: IFTRUE 81872
81870: GO 81883
81872: POP
// bc_type := b_bunker ; 27 :
81873: LD_ADDR_OWVAR 42
81877: PUSH
81878: LD_INT 32
81880: ST_TO_ADDR
81881: GO 82036
81883: LD_INT 27
81885: DOUBLE
81886: EQUAL
81887: IFTRUE 81891
81889: GO 81902
81891: POP
// bc_type := b_turret ; 28 :
81892: LD_ADDR_OWVAR 42
81896: PUSH
81897: LD_INT 33
81899: ST_TO_ADDR
81900: GO 82036
81902: LD_INT 28
81904: DOUBLE
81905: EQUAL
81906: IFTRUE 81910
81908: GO 81921
81910: POP
// bc_type := b_armoury ; 29 :
81911: LD_ADDR_OWVAR 42
81915: PUSH
81916: LD_INT 4
81918: ST_TO_ADDR
81919: GO 82036
81921: LD_INT 29
81923: DOUBLE
81924: EQUAL
81925: IFTRUE 81929
81927: GO 81940
81929: POP
// bc_type := b_barracks ; 30 :
81930: LD_ADDR_OWVAR 42
81934: PUSH
81935: LD_INT 5
81937: ST_TO_ADDR
81938: GO 82036
81940: LD_INT 30
81942: DOUBLE
81943: EQUAL
81944: IFTRUE 81948
81946: GO 81959
81948: POP
// bc_type := b_solar_power ; 31 :
81949: LD_ADDR_OWVAR 42
81953: PUSH
81954: LD_INT 27
81956: ST_TO_ADDR
81957: GO 82036
81959: LD_INT 31
81961: DOUBLE
81962: EQUAL
81963: IFTRUE 81967
81965: GO 81978
81967: POP
// bc_type := b_oil_power ; 32 :
81968: LD_ADDR_OWVAR 42
81972: PUSH
81973: LD_INT 26
81975: ST_TO_ADDR
81976: GO 82036
81978: LD_INT 32
81980: DOUBLE
81981: EQUAL
81982: IFTRUE 81986
81984: GO 81997
81986: POP
// bc_type := b_siberite_power ; 33 :
81987: LD_ADDR_OWVAR 42
81991: PUSH
81992: LD_INT 28
81994: ST_TO_ADDR
81995: GO 82036
81997: LD_INT 33
81999: DOUBLE
82000: EQUAL
82001: IFTRUE 82005
82003: GO 82016
82005: POP
// bc_type := b_oil_mine ; 34 :
82006: LD_ADDR_OWVAR 42
82010: PUSH
82011: LD_INT 29
82013: ST_TO_ADDR
82014: GO 82036
82016: LD_INT 34
82018: DOUBLE
82019: EQUAL
82020: IFTRUE 82024
82022: GO 82035
82024: POP
// bc_type := b_siberite_mine ; end ;
82025: LD_ADDR_OWVAR 42
82029: PUSH
82030: LD_INT 30
82032: ST_TO_ADDR
82033: GO 82036
82035: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
82036: LD_ADDR_VAR 0 8
82040: PUSH
82041: LD_VAR 0 5
82045: PPUSH
82046: LD_VAR 0 6
82050: PPUSH
82051: LD_VAR 0 3
82055: PPUSH
82056: CALL_OW 47
82060: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
82061: LD_OWVAR 42
82065: PUSH
82066: LD_INT 32
82068: PUSH
82069: LD_INT 33
82071: PUSH
82072: EMPTY
82073: LIST
82074: LIST
82075: IN
82076: IFFALSE 82092
// PlaceWeaponTurret ( b , weapon ) ;
82078: LD_VAR 0 8
82082: PPUSH
82083: LD_VAR 0 4
82087: PPUSH
82088: CALL_OW 431
// end ;
82092: LD_VAR 0 7
82096: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
82097: LD_INT 0
82099: PPUSH
82100: PPUSH
82101: PPUSH
82102: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
82103: LD_ADDR_VAR 0 4
82107: PUSH
82108: LD_INT 22
82110: PUSH
82111: LD_OWVAR 2
82115: PUSH
82116: EMPTY
82117: LIST
82118: LIST
82119: PUSH
82120: LD_INT 2
82122: PUSH
82123: LD_INT 30
82125: PUSH
82126: LD_INT 0
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: PUSH
82133: LD_INT 30
82135: PUSH
82136: LD_INT 1
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: PUSH
82143: EMPTY
82144: LIST
82145: LIST
82146: LIST
82147: PUSH
82148: EMPTY
82149: LIST
82150: LIST
82151: PPUSH
82152: CALL_OW 69
82156: ST_TO_ADDR
// if not tmp then
82157: LD_VAR 0 4
82161: NOT
82162: IFFALSE 82166
// exit ;
82164: GO 82225
// for i in tmp do
82166: LD_ADDR_VAR 0 2
82170: PUSH
82171: LD_VAR 0 4
82175: PUSH
82176: FOR_IN
82177: IFFALSE 82223
// for j = 1 to 3 do
82179: LD_ADDR_VAR 0 3
82183: PUSH
82184: DOUBLE
82185: LD_INT 1
82187: DEC
82188: ST_TO_ADDR
82189: LD_INT 3
82191: PUSH
82192: FOR_TO
82193: IFFALSE 82219
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
82195: LD_VAR 0 2
82199: PPUSH
82200: CALL_OW 274
82204: PPUSH
82205: LD_VAR 0 3
82209: PPUSH
82210: LD_INT 99999
82212: PPUSH
82213: CALL_OW 277
82217: GO 82192
82219: POP
82220: POP
82221: GO 82176
82223: POP
82224: POP
// end ;
82225: LD_VAR 0 1
82229: RET
// export function hHackSetLevel10 ; var i , j ; begin
82230: LD_INT 0
82232: PPUSH
82233: PPUSH
82234: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82235: LD_ADDR_VAR 0 2
82239: PUSH
82240: LD_INT 21
82242: PUSH
82243: LD_INT 1
82245: PUSH
82246: EMPTY
82247: LIST
82248: LIST
82249: PPUSH
82250: CALL_OW 69
82254: PUSH
82255: FOR_IN
82256: IFFALSE 82308
// if IsSelected ( i ) then
82258: LD_VAR 0 2
82262: PPUSH
82263: CALL_OW 306
82267: IFFALSE 82306
// begin for j := 1 to 4 do
82269: LD_ADDR_VAR 0 3
82273: PUSH
82274: DOUBLE
82275: LD_INT 1
82277: DEC
82278: ST_TO_ADDR
82279: LD_INT 4
82281: PUSH
82282: FOR_TO
82283: IFFALSE 82304
// SetSkill ( i , j , 10 ) ;
82285: LD_VAR 0 2
82289: PPUSH
82290: LD_VAR 0 3
82294: PPUSH
82295: LD_INT 10
82297: PPUSH
82298: CALL_OW 237
82302: GO 82282
82304: POP
82305: POP
// end ;
82306: GO 82255
82308: POP
82309: POP
// end ;
82310: LD_VAR 0 1
82314: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
82315: LD_INT 0
82317: PPUSH
82318: PPUSH
82319: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
82320: LD_ADDR_VAR 0 2
82324: PUSH
82325: LD_INT 22
82327: PUSH
82328: LD_OWVAR 2
82332: PUSH
82333: EMPTY
82334: LIST
82335: LIST
82336: PUSH
82337: LD_INT 21
82339: PUSH
82340: LD_INT 1
82342: PUSH
82343: EMPTY
82344: LIST
82345: LIST
82346: PUSH
82347: EMPTY
82348: LIST
82349: LIST
82350: PPUSH
82351: CALL_OW 69
82355: PUSH
82356: FOR_IN
82357: IFFALSE 82398
// begin for j := 1 to 4 do
82359: LD_ADDR_VAR 0 3
82363: PUSH
82364: DOUBLE
82365: LD_INT 1
82367: DEC
82368: ST_TO_ADDR
82369: LD_INT 4
82371: PUSH
82372: FOR_TO
82373: IFFALSE 82394
// SetSkill ( i , j , 10 ) ;
82375: LD_VAR 0 2
82379: PPUSH
82380: LD_VAR 0 3
82384: PPUSH
82385: LD_INT 10
82387: PPUSH
82388: CALL_OW 237
82392: GO 82372
82394: POP
82395: POP
// end ;
82396: GO 82356
82398: POP
82399: POP
// end ;
82400: LD_VAR 0 1
82404: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
82405: LD_INT 0
82407: PPUSH
// uc_side := your_side ;
82408: LD_ADDR_OWVAR 20
82412: PUSH
82413: LD_OWVAR 2
82417: ST_TO_ADDR
// uc_nation := nation ;
82418: LD_ADDR_OWVAR 21
82422: PUSH
82423: LD_VAR 0 1
82427: ST_TO_ADDR
// InitHc ;
82428: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
82432: LD_INT 0
82434: PPUSH
82435: LD_VAR 0 2
82439: PPUSH
82440: LD_VAR 0 3
82444: PPUSH
82445: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
82449: LD_VAR 0 4
82453: PPUSH
82454: LD_VAR 0 5
82458: PPUSH
82459: CALL_OW 428
82463: PUSH
82464: LD_INT 0
82466: EQUAL
82467: IFFALSE 82491
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
82469: CALL_OW 44
82473: PPUSH
82474: LD_VAR 0 4
82478: PPUSH
82479: LD_VAR 0 5
82483: PPUSH
82484: LD_INT 1
82486: PPUSH
82487: CALL_OW 48
// end ;
82491: LD_VAR 0 6
82495: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
82496: LD_INT 0
82498: PPUSH
82499: PPUSH
// uc_side := your_side ;
82500: LD_ADDR_OWVAR 20
82504: PUSH
82505: LD_OWVAR 2
82509: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
82510: LD_VAR 0 1
82514: PUSH
82515: LD_INT 1
82517: PUSH
82518: LD_INT 2
82520: PUSH
82521: LD_INT 3
82523: PUSH
82524: LD_INT 4
82526: PUSH
82527: LD_INT 5
82529: PUSH
82530: EMPTY
82531: LIST
82532: LIST
82533: LIST
82534: LIST
82535: LIST
82536: IN
82537: IFFALSE 82549
// uc_nation := nation_american else
82539: LD_ADDR_OWVAR 21
82543: PUSH
82544: LD_INT 1
82546: ST_TO_ADDR
82547: GO 82592
// if chassis in [ 11 , 12 , 13 , 14 ] then
82549: LD_VAR 0 1
82553: PUSH
82554: LD_INT 11
82556: PUSH
82557: LD_INT 12
82559: PUSH
82560: LD_INT 13
82562: PUSH
82563: LD_INT 14
82565: PUSH
82566: EMPTY
82567: LIST
82568: LIST
82569: LIST
82570: LIST
82571: IN
82572: IFFALSE 82584
// uc_nation := nation_arabian else
82574: LD_ADDR_OWVAR 21
82578: PUSH
82579: LD_INT 2
82581: ST_TO_ADDR
82582: GO 82592
// uc_nation := nation_russian ;
82584: LD_ADDR_OWVAR 21
82588: PUSH
82589: LD_INT 3
82591: ST_TO_ADDR
// vc_chassis := chassis ;
82592: LD_ADDR_OWVAR 37
82596: PUSH
82597: LD_VAR 0 1
82601: ST_TO_ADDR
// vc_engine := engine ;
82602: LD_ADDR_OWVAR 39
82606: PUSH
82607: LD_VAR 0 2
82611: ST_TO_ADDR
// vc_control := control ;
82612: LD_ADDR_OWVAR 38
82616: PUSH
82617: LD_VAR 0 3
82621: ST_TO_ADDR
// vc_weapon := weapon ;
82622: LD_ADDR_OWVAR 40
82626: PUSH
82627: LD_VAR 0 4
82631: ST_TO_ADDR
// un := CreateVehicle ;
82632: LD_ADDR_VAR 0 8
82636: PUSH
82637: CALL_OW 45
82641: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
82642: LD_VAR 0 8
82646: PPUSH
82647: LD_INT 0
82649: PPUSH
82650: LD_INT 5
82652: PPUSH
82653: CALL_OW 12
82657: PPUSH
82658: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
82662: LD_VAR 0 8
82666: PPUSH
82667: LD_VAR 0 5
82671: PPUSH
82672: LD_VAR 0 6
82676: PPUSH
82677: LD_INT 1
82679: PPUSH
82680: CALL_OW 48
// end ;
82684: LD_VAR 0 7
82688: RET
// export hInvincible ; every 1 do
82689: GO 82691
82691: DISABLE
// hInvincible := [ ] ;
82692: LD_ADDR_EXP 126
82696: PUSH
82697: EMPTY
82698: ST_TO_ADDR
82699: END
// every 10 do var i ;
82700: GO 82702
82702: DISABLE
82703: LD_INT 0
82705: PPUSH
// begin enable ;
82706: ENABLE
// if not hInvincible then
82707: LD_EXP 126
82711: NOT
82712: IFFALSE 82716
// exit ;
82714: GO 82760
// for i in hInvincible do
82716: LD_ADDR_VAR 0 1
82720: PUSH
82721: LD_EXP 126
82725: PUSH
82726: FOR_IN
82727: IFFALSE 82758
// if GetLives ( i ) < 1000 then
82729: LD_VAR 0 1
82733: PPUSH
82734: CALL_OW 256
82738: PUSH
82739: LD_INT 1000
82741: LESS
82742: IFFALSE 82756
// SetLives ( i , 1000 ) ;
82744: LD_VAR 0 1
82748: PPUSH
82749: LD_INT 1000
82751: PPUSH
82752: CALL_OW 234
82756: GO 82726
82758: POP
82759: POP
// end ;
82760: PPOPN 1
82762: END
// export function hHackInvincible ; var i ; begin
82763: LD_INT 0
82765: PPUSH
82766: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
82767: LD_ADDR_VAR 0 2
82771: PUSH
82772: LD_INT 2
82774: PUSH
82775: LD_INT 21
82777: PUSH
82778: LD_INT 1
82780: PUSH
82781: EMPTY
82782: LIST
82783: LIST
82784: PUSH
82785: LD_INT 21
82787: PUSH
82788: LD_INT 2
82790: PUSH
82791: EMPTY
82792: LIST
82793: LIST
82794: PUSH
82795: EMPTY
82796: LIST
82797: LIST
82798: LIST
82799: PPUSH
82800: CALL_OW 69
82804: PUSH
82805: FOR_IN
82806: IFFALSE 82867
// if IsSelected ( i ) then
82808: LD_VAR 0 2
82812: PPUSH
82813: CALL_OW 306
82817: IFFALSE 82865
// begin if i in hInvincible then
82819: LD_VAR 0 2
82823: PUSH
82824: LD_EXP 126
82828: IN
82829: IFFALSE 82849
// hInvincible := hInvincible diff i else
82831: LD_ADDR_EXP 126
82835: PUSH
82836: LD_EXP 126
82840: PUSH
82841: LD_VAR 0 2
82845: DIFF
82846: ST_TO_ADDR
82847: GO 82865
// hInvincible := hInvincible union i ;
82849: LD_ADDR_EXP 126
82853: PUSH
82854: LD_EXP 126
82858: PUSH
82859: LD_VAR 0 2
82863: UNION
82864: ST_TO_ADDR
// end ;
82865: GO 82805
82867: POP
82868: POP
// end ;
82869: LD_VAR 0 1
82873: RET
// export function hHackInvisible ; var i , j ; begin
82874: LD_INT 0
82876: PPUSH
82877: PPUSH
82878: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
82879: LD_ADDR_VAR 0 2
82883: PUSH
82884: LD_INT 21
82886: PUSH
82887: LD_INT 1
82889: PUSH
82890: EMPTY
82891: LIST
82892: LIST
82893: PPUSH
82894: CALL_OW 69
82898: PUSH
82899: FOR_IN
82900: IFFALSE 82924
// if IsSelected ( i ) then
82902: LD_VAR 0 2
82906: PPUSH
82907: CALL_OW 306
82911: IFFALSE 82922
// ComForceInvisible ( i ) ;
82913: LD_VAR 0 2
82917: PPUSH
82918: CALL_OW 496
82922: GO 82899
82924: POP
82925: POP
// end ;
82926: LD_VAR 0 1
82930: RET
// export function hHackChangeYourSide ; begin
82931: LD_INT 0
82933: PPUSH
// if your_side = 8 then
82934: LD_OWVAR 2
82938: PUSH
82939: LD_INT 8
82941: EQUAL
82942: IFFALSE 82954
// your_side := 0 else
82944: LD_ADDR_OWVAR 2
82948: PUSH
82949: LD_INT 0
82951: ST_TO_ADDR
82952: GO 82968
// your_side := your_side + 1 ;
82954: LD_ADDR_OWVAR 2
82958: PUSH
82959: LD_OWVAR 2
82963: PUSH
82964: LD_INT 1
82966: PLUS
82967: ST_TO_ADDR
// end ;
82968: LD_VAR 0 1
82972: RET
// export function hHackChangeUnitSide ; var i , j ; begin
82973: LD_INT 0
82975: PPUSH
82976: PPUSH
82977: PPUSH
// for i in all_units do
82978: LD_ADDR_VAR 0 2
82982: PUSH
82983: LD_OWVAR 3
82987: PUSH
82988: FOR_IN
82989: IFFALSE 83067
// if IsSelected ( i ) then
82991: LD_VAR 0 2
82995: PPUSH
82996: CALL_OW 306
83000: IFFALSE 83065
// begin j := GetSide ( i ) ;
83002: LD_ADDR_VAR 0 3
83006: PUSH
83007: LD_VAR 0 2
83011: PPUSH
83012: CALL_OW 255
83016: ST_TO_ADDR
// if j = 8 then
83017: LD_VAR 0 3
83021: PUSH
83022: LD_INT 8
83024: EQUAL
83025: IFFALSE 83037
// j := 0 else
83027: LD_ADDR_VAR 0 3
83031: PUSH
83032: LD_INT 0
83034: ST_TO_ADDR
83035: GO 83051
// j := j + 1 ;
83037: LD_ADDR_VAR 0 3
83041: PUSH
83042: LD_VAR 0 3
83046: PUSH
83047: LD_INT 1
83049: PLUS
83050: ST_TO_ADDR
// SetSide ( i , j ) ;
83051: LD_VAR 0 2
83055: PPUSH
83056: LD_VAR 0 3
83060: PPUSH
83061: CALL_OW 235
// end ;
83065: GO 82988
83067: POP
83068: POP
// end ;
83069: LD_VAR 0 1
83073: RET
// export function hHackFog ; begin
83074: LD_INT 0
83076: PPUSH
// FogOff ( true ) ;
83077: LD_INT 1
83079: PPUSH
83080: CALL_OW 344
// end ;
83084: LD_VAR 0 1
83088: RET
// export function hHackTeleport ( unit , x , y ) ; begin
83089: LD_INT 0
83091: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
83092: LD_VAR 0 1
83096: PPUSH
83097: LD_VAR 0 2
83101: PPUSH
83102: LD_VAR 0 3
83106: PPUSH
83107: LD_INT 1
83109: PPUSH
83110: LD_INT 1
83112: PPUSH
83113: CALL_OW 483
// CenterOnXY ( x , y ) ;
83117: LD_VAR 0 2
83121: PPUSH
83122: LD_VAR 0 3
83126: PPUSH
83127: CALL_OW 84
// end ;
83131: LD_VAR 0 4
83135: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
83136: LD_INT 0
83138: PPUSH
83139: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
83140: LD_VAR 0 1
83144: NOT
83145: PUSH
83146: LD_VAR 0 2
83150: PPUSH
83151: LD_VAR 0 3
83155: PPUSH
83156: CALL_OW 488
83160: NOT
83161: OR
83162: PUSH
83163: LD_VAR 0 1
83167: PPUSH
83168: CALL_OW 266
83172: PUSH
83173: LD_INT 3
83175: NONEQUAL
83176: PUSH
83177: LD_VAR 0 1
83181: PPUSH
83182: CALL_OW 247
83186: PUSH
83187: LD_INT 1
83189: EQUAL
83190: NOT
83191: AND
83192: OR
83193: IFFALSE 83197
// exit ;
83195: GO 83346
// if GetType ( factory ) = unit_human then
83197: LD_VAR 0 1
83201: PPUSH
83202: CALL_OW 247
83206: PUSH
83207: LD_INT 1
83209: EQUAL
83210: IFFALSE 83227
// factory := IsInUnit ( factory ) ;
83212: LD_ADDR_VAR 0 1
83216: PUSH
83217: LD_VAR 0 1
83221: PPUSH
83222: CALL_OW 310
83226: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
83227: LD_VAR 0 1
83231: PPUSH
83232: CALL_OW 266
83236: PUSH
83237: LD_INT 3
83239: NONEQUAL
83240: IFFALSE 83244
// exit ;
83242: GO 83346
// if HexInfo ( x , y ) = factory then
83244: LD_VAR 0 2
83248: PPUSH
83249: LD_VAR 0 3
83253: PPUSH
83254: CALL_OW 428
83258: PUSH
83259: LD_VAR 0 1
83263: EQUAL
83264: IFFALSE 83291
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
83266: LD_ADDR_EXP 127
83270: PUSH
83271: LD_EXP 127
83275: PPUSH
83276: LD_VAR 0 1
83280: PPUSH
83281: LD_INT 0
83283: PPUSH
83284: CALL_OW 1
83288: ST_TO_ADDR
83289: GO 83342
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
83291: LD_ADDR_EXP 127
83295: PUSH
83296: LD_EXP 127
83300: PPUSH
83301: LD_VAR 0 1
83305: PPUSH
83306: LD_VAR 0 1
83310: PPUSH
83311: CALL_OW 255
83315: PUSH
83316: LD_VAR 0 1
83320: PUSH
83321: LD_VAR 0 2
83325: PUSH
83326: LD_VAR 0 3
83330: PUSH
83331: EMPTY
83332: LIST
83333: LIST
83334: LIST
83335: LIST
83336: PPUSH
83337: CALL_OW 1
83341: ST_TO_ADDR
// UpdateFactoryWaypoints ;
83342: CALL 83351 0 0
// end ;
83346: LD_VAR 0 4
83350: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
83351: LD_INT 0
83353: PPUSH
83354: PPUSH
83355: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
83356: LD_STRING resetFactoryWaypoint();
83358: PPUSH
83359: CALL_OW 559
// if factoryWaypoints then
83363: LD_EXP 127
83367: IFFALSE 83493
// begin list := PrepareArray ( factoryWaypoints ) ;
83369: LD_ADDR_VAR 0 3
83373: PUSH
83374: LD_EXP 127
83378: PPUSH
83379: CALL 68603 0 1
83383: ST_TO_ADDR
// for i := 1 to list do
83384: LD_ADDR_VAR 0 2
83388: PUSH
83389: DOUBLE
83390: LD_INT 1
83392: DEC
83393: ST_TO_ADDR
83394: LD_VAR 0 3
83398: PUSH
83399: FOR_TO
83400: IFFALSE 83491
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83402: LD_STRING setFactoryWaypointXY(
83404: PUSH
83405: LD_VAR 0 3
83409: PUSH
83410: LD_VAR 0 2
83414: ARRAY
83415: PUSH
83416: LD_INT 1
83418: ARRAY
83419: STR
83420: PUSH
83421: LD_STRING ,
83423: STR
83424: PUSH
83425: LD_VAR 0 3
83429: PUSH
83430: LD_VAR 0 2
83434: ARRAY
83435: PUSH
83436: LD_INT 2
83438: ARRAY
83439: STR
83440: PUSH
83441: LD_STRING ,
83443: STR
83444: PUSH
83445: LD_VAR 0 3
83449: PUSH
83450: LD_VAR 0 2
83454: ARRAY
83455: PUSH
83456: LD_INT 3
83458: ARRAY
83459: STR
83460: PUSH
83461: LD_STRING ,
83463: STR
83464: PUSH
83465: LD_VAR 0 3
83469: PUSH
83470: LD_VAR 0 2
83474: ARRAY
83475: PUSH
83476: LD_INT 4
83478: ARRAY
83479: STR
83480: PUSH
83481: LD_STRING )
83483: STR
83484: PPUSH
83485: CALL_OW 559
83489: GO 83399
83491: POP
83492: POP
// end ; end ;
83493: LD_VAR 0 1
83497: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
83498: LD_INT 0
83500: PPUSH
// if HexInfo ( x , y ) = warehouse then
83501: LD_VAR 0 2
83505: PPUSH
83506: LD_VAR 0 3
83510: PPUSH
83511: CALL_OW 428
83515: PUSH
83516: LD_VAR 0 1
83520: EQUAL
83521: IFFALSE 83548
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
83523: LD_ADDR_EXP 128
83527: PUSH
83528: LD_EXP 128
83532: PPUSH
83533: LD_VAR 0 1
83537: PPUSH
83538: LD_INT 0
83540: PPUSH
83541: CALL_OW 1
83545: ST_TO_ADDR
83546: GO 83599
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
83548: LD_ADDR_EXP 128
83552: PUSH
83553: LD_EXP 128
83557: PPUSH
83558: LD_VAR 0 1
83562: PPUSH
83563: LD_VAR 0 1
83567: PPUSH
83568: CALL_OW 255
83572: PUSH
83573: LD_VAR 0 1
83577: PUSH
83578: LD_VAR 0 2
83582: PUSH
83583: LD_VAR 0 3
83587: PUSH
83588: EMPTY
83589: LIST
83590: LIST
83591: LIST
83592: LIST
83593: PPUSH
83594: CALL_OW 1
83598: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
83599: CALL 83608 0 0
// end ;
83603: LD_VAR 0 4
83607: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
83608: LD_INT 0
83610: PPUSH
83611: PPUSH
83612: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
83613: LD_STRING resetWarehouseGatheringPoints();
83615: PPUSH
83616: CALL_OW 559
// if warehouseGatheringPoints then
83620: LD_EXP 128
83624: IFFALSE 83750
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
83626: LD_ADDR_VAR 0 3
83630: PUSH
83631: LD_EXP 128
83635: PPUSH
83636: CALL 68603 0 1
83640: ST_TO_ADDR
// for i := 1 to list do
83641: LD_ADDR_VAR 0 2
83645: PUSH
83646: DOUBLE
83647: LD_INT 1
83649: DEC
83650: ST_TO_ADDR
83651: LD_VAR 0 3
83655: PUSH
83656: FOR_TO
83657: IFFALSE 83748
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
83659: LD_STRING setWarehouseGatheringPointXY(
83661: PUSH
83662: LD_VAR 0 3
83666: PUSH
83667: LD_VAR 0 2
83671: ARRAY
83672: PUSH
83673: LD_INT 1
83675: ARRAY
83676: STR
83677: PUSH
83678: LD_STRING ,
83680: STR
83681: PUSH
83682: LD_VAR 0 3
83686: PUSH
83687: LD_VAR 0 2
83691: ARRAY
83692: PUSH
83693: LD_INT 2
83695: ARRAY
83696: STR
83697: PUSH
83698: LD_STRING ,
83700: STR
83701: PUSH
83702: LD_VAR 0 3
83706: PUSH
83707: LD_VAR 0 2
83711: ARRAY
83712: PUSH
83713: LD_INT 3
83715: ARRAY
83716: STR
83717: PUSH
83718: LD_STRING ,
83720: STR
83721: PUSH
83722: LD_VAR 0 3
83726: PUSH
83727: LD_VAR 0 2
83731: ARRAY
83732: PUSH
83733: LD_INT 4
83735: ARRAY
83736: STR
83737: PUSH
83738: LD_STRING )
83740: STR
83741: PPUSH
83742: CALL_OW 559
83746: GO 83656
83748: POP
83749: POP
// end ; end ;
83750: LD_VAR 0 1
83754: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
83755: LD_EXP 128
83759: IFFALSE 84444
83761: GO 83763
83763: DISABLE
83764: LD_INT 0
83766: PPUSH
83767: PPUSH
83768: PPUSH
83769: PPUSH
83770: PPUSH
83771: PPUSH
83772: PPUSH
83773: PPUSH
83774: PPUSH
// begin enable ;
83775: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
83776: LD_ADDR_VAR 0 3
83780: PUSH
83781: LD_EXP 128
83785: PPUSH
83786: CALL 68603 0 1
83790: ST_TO_ADDR
// if not list then
83791: LD_VAR 0 3
83795: NOT
83796: IFFALSE 83800
// exit ;
83798: GO 84444
// for i := 1 to list do
83800: LD_ADDR_VAR 0 1
83804: PUSH
83805: DOUBLE
83806: LD_INT 1
83808: DEC
83809: ST_TO_ADDR
83810: LD_VAR 0 3
83814: PUSH
83815: FOR_TO
83816: IFFALSE 84442
// begin depot := list [ i ] [ 2 ] ;
83818: LD_ADDR_VAR 0 8
83822: PUSH
83823: LD_VAR 0 3
83827: PUSH
83828: LD_VAR 0 1
83832: ARRAY
83833: PUSH
83834: LD_INT 2
83836: ARRAY
83837: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
83838: LD_ADDR_VAR 0 5
83842: PUSH
83843: LD_VAR 0 3
83847: PUSH
83848: LD_VAR 0 1
83852: ARRAY
83853: PUSH
83854: LD_INT 1
83856: ARRAY
83857: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
83858: LD_VAR 0 8
83862: PPUSH
83863: CALL_OW 301
83867: PUSH
83868: LD_VAR 0 5
83872: PUSH
83873: LD_VAR 0 8
83877: PPUSH
83878: CALL_OW 255
83882: NONEQUAL
83883: OR
83884: IFFALSE 83913
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
83886: LD_ADDR_EXP 128
83890: PUSH
83891: LD_EXP 128
83895: PPUSH
83896: LD_VAR 0 8
83900: PPUSH
83901: LD_INT 0
83903: PPUSH
83904: CALL_OW 1
83908: ST_TO_ADDR
// exit ;
83909: POP
83910: POP
83911: GO 84444
// end ; x := list [ i ] [ 3 ] ;
83913: LD_ADDR_VAR 0 6
83917: PUSH
83918: LD_VAR 0 3
83922: PUSH
83923: LD_VAR 0 1
83927: ARRAY
83928: PUSH
83929: LD_INT 3
83931: ARRAY
83932: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
83933: LD_ADDR_VAR 0 7
83937: PUSH
83938: LD_VAR 0 3
83942: PUSH
83943: LD_VAR 0 1
83947: ARRAY
83948: PUSH
83949: LD_INT 4
83951: ARRAY
83952: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
83953: LD_ADDR_VAR 0 9
83957: PUSH
83958: LD_VAR 0 6
83962: PPUSH
83963: LD_VAR 0 7
83967: PPUSH
83968: LD_INT 16
83970: PPUSH
83971: CALL 67191 0 3
83975: ST_TO_ADDR
// if not cratesNearbyPoint then
83976: LD_VAR 0 9
83980: NOT
83981: IFFALSE 83987
// exit ;
83983: POP
83984: POP
83985: GO 84444
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
83987: LD_ADDR_VAR 0 4
83991: PUSH
83992: LD_INT 22
83994: PUSH
83995: LD_VAR 0 5
83999: PUSH
84000: EMPTY
84001: LIST
84002: LIST
84003: PUSH
84004: LD_INT 3
84006: PUSH
84007: LD_INT 60
84009: PUSH
84010: EMPTY
84011: LIST
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: PUSH
84017: LD_INT 91
84019: PUSH
84020: LD_VAR 0 8
84024: PUSH
84025: LD_INT 6
84027: PUSH
84028: EMPTY
84029: LIST
84030: LIST
84031: LIST
84032: PUSH
84033: LD_INT 2
84035: PUSH
84036: LD_INT 25
84038: PUSH
84039: LD_INT 2
84041: PUSH
84042: EMPTY
84043: LIST
84044: LIST
84045: PUSH
84046: LD_INT 25
84048: PUSH
84049: LD_INT 16
84051: PUSH
84052: EMPTY
84053: LIST
84054: LIST
84055: PUSH
84056: EMPTY
84057: LIST
84058: LIST
84059: LIST
84060: PUSH
84061: EMPTY
84062: LIST
84063: LIST
84064: LIST
84065: LIST
84066: PPUSH
84067: CALL_OW 69
84071: PUSH
84072: LD_VAR 0 8
84076: PPUSH
84077: CALL_OW 313
84081: PPUSH
84082: LD_INT 3
84084: PUSH
84085: LD_INT 60
84087: PUSH
84088: EMPTY
84089: LIST
84090: PUSH
84091: EMPTY
84092: LIST
84093: LIST
84094: PUSH
84095: LD_INT 2
84097: PUSH
84098: LD_INT 25
84100: PUSH
84101: LD_INT 2
84103: PUSH
84104: EMPTY
84105: LIST
84106: LIST
84107: PUSH
84108: LD_INT 25
84110: PUSH
84111: LD_INT 16
84113: PUSH
84114: EMPTY
84115: LIST
84116: LIST
84117: PUSH
84118: EMPTY
84119: LIST
84120: LIST
84121: LIST
84122: PUSH
84123: EMPTY
84124: LIST
84125: LIST
84126: PPUSH
84127: CALL_OW 72
84131: UNION
84132: ST_TO_ADDR
// if tmp then
84133: LD_VAR 0 4
84137: IFFALSE 84217
// begin tmp := ShrinkArray ( tmp , 3 ) ;
84139: LD_ADDR_VAR 0 4
84143: PUSH
84144: LD_VAR 0 4
84148: PPUSH
84149: LD_INT 3
84151: PPUSH
84152: CALL 65160 0 2
84156: ST_TO_ADDR
// for j in tmp do
84157: LD_ADDR_VAR 0 2
84161: PUSH
84162: LD_VAR 0 4
84166: PUSH
84167: FOR_IN
84168: IFFALSE 84211
// begin if IsInUnit ( j ) then
84170: LD_VAR 0 2
84174: PPUSH
84175: CALL_OW 310
84179: IFFALSE 84190
// ComExit ( j ) ;
84181: LD_VAR 0 2
84185: PPUSH
84186: CALL 65243 0 1
// AddComCollect ( j , x , y ) ;
84190: LD_VAR 0 2
84194: PPUSH
84195: LD_VAR 0 6
84199: PPUSH
84200: LD_VAR 0 7
84204: PPUSH
84205: CALL_OW 177
// end ;
84209: GO 84167
84211: POP
84212: POP
// exit ;
84213: POP
84214: POP
84215: GO 84444
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
84217: LD_ADDR_VAR 0 4
84221: PUSH
84222: LD_INT 22
84224: PUSH
84225: LD_VAR 0 5
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: PUSH
84234: LD_INT 91
84236: PUSH
84237: LD_VAR 0 8
84241: PUSH
84242: LD_INT 8
84244: PUSH
84245: EMPTY
84246: LIST
84247: LIST
84248: LIST
84249: PUSH
84250: LD_INT 2
84252: PUSH
84253: LD_INT 34
84255: PUSH
84256: LD_INT 12
84258: PUSH
84259: EMPTY
84260: LIST
84261: LIST
84262: PUSH
84263: LD_INT 34
84265: PUSH
84266: LD_INT 51
84268: PUSH
84269: EMPTY
84270: LIST
84271: LIST
84272: PUSH
84273: LD_INT 34
84275: PUSH
84276: LD_INT 32
84278: PUSH
84279: EMPTY
84280: LIST
84281: LIST
84282: PUSH
84283: LD_INT 34
84285: PUSH
84286: LD_INT 89
84288: PUSH
84289: EMPTY
84290: LIST
84291: LIST
84292: PUSH
84293: EMPTY
84294: LIST
84295: LIST
84296: LIST
84297: LIST
84298: LIST
84299: PUSH
84300: EMPTY
84301: LIST
84302: LIST
84303: LIST
84304: PPUSH
84305: CALL_OW 69
84309: ST_TO_ADDR
// if tmp then
84310: LD_VAR 0 4
84314: IFFALSE 84440
// begin for j in tmp do
84316: LD_ADDR_VAR 0 2
84320: PUSH
84321: LD_VAR 0 4
84325: PUSH
84326: FOR_IN
84327: IFFALSE 84438
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
84329: LD_VAR 0 2
84333: PPUSH
84334: CALL_OW 262
84338: PUSH
84339: LD_INT 3
84341: EQUAL
84342: PUSH
84343: LD_VAR 0 2
84347: PPUSH
84348: CALL_OW 261
84352: PUSH
84353: LD_INT 20
84355: GREATER
84356: OR
84357: PUSH
84358: LD_VAR 0 2
84362: PPUSH
84363: CALL_OW 314
84367: NOT
84368: AND
84369: PUSH
84370: LD_VAR 0 2
84374: PPUSH
84375: CALL_OW 263
84379: PUSH
84380: LD_INT 1
84382: NONEQUAL
84383: PUSH
84384: LD_VAR 0 2
84388: PPUSH
84389: CALL_OW 311
84393: OR
84394: AND
84395: IFFALSE 84436
// begin ComCollect ( j , x , y ) ;
84397: LD_VAR 0 2
84401: PPUSH
84402: LD_VAR 0 6
84406: PPUSH
84407: LD_VAR 0 7
84411: PPUSH
84412: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
84416: LD_VAR 0 2
84420: PPUSH
84421: LD_VAR 0 8
84425: PPUSH
84426: CALL_OW 172
// exit ;
84430: POP
84431: POP
84432: POP
84433: POP
84434: GO 84444
// end ;
84436: GO 84326
84438: POP
84439: POP
// end ; end ;
84440: GO 83815
84442: POP
84443: POP
// end ; end_of_file
84444: PPOPN 9
84446: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84447: LD_VAR 0 1
84451: PUSH
84452: LD_INT 200
84454: DOUBLE
84455: GREATEREQUAL
84456: IFFALSE 84464
84458: LD_INT 299
84460: DOUBLE
84461: LESSEQUAL
84462: IFTRUE 84466
84464: GO 84498
84466: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84467: LD_VAR 0 1
84471: PPUSH
84472: LD_VAR 0 2
84476: PPUSH
84477: LD_VAR 0 3
84481: PPUSH
84482: LD_VAR 0 4
84486: PPUSH
84487: LD_VAR 0 5
84491: PPUSH
84492: CALL 84986 0 5
84496: GO 84575
84498: LD_INT 300
84500: DOUBLE
84501: GREATEREQUAL
84502: IFFALSE 84510
84504: LD_INT 399
84506: DOUBLE
84507: LESSEQUAL
84508: IFTRUE 84512
84510: GO 84574
84512: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84513: LD_VAR 0 1
84517: PPUSH
84518: LD_VAR 0 2
84522: PPUSH
84523: LD_VAR 0 3
84527: PPUSH
84528: LD_VAR 0 4
84532: PPUSH
84533: LD_VAR 0 5
84537: PPUSH
84538: LD_VAR 0 6
84542: PPUSH
84543: LD_VAR 0 7
84547: PPUSH
84548: LD_VAR 0 8
84552: PPUSH
84553: LD_VAR 0 9
84557: PPUSH
84558: LD_VAR 0 10
84562: PPUSH
84563: LD_VAR 0 11
84567: PPUSH
84568: CALL 81156 0 11
84572: GO 84575
84574: POP
// end ;
84575: PPOPN 11
84577: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
84578: LD_VAR 0 1
84582: PPUSH
84583: LD_VAR 0 2
84587: PPUSH
84588: LD_VAR 0 3
84592: PPUSH
84593: LD_VAR 0 4
84597: PPUSH
84598: LD_VAR 0 5
84602: PPUSH
84603: CALL 84722 0 5
// end ; end_of_file
84607: PPOPN 5
84609: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
84610: LD_INT 0
84612: PPUSH
84613: PPUSH
84614: PPUSH
84615: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84616: LD_VAR 0 1
84620: PPUSH
84621: CALL_OW 264
84625: PUSH
84626: LD_INT 91
84628: EQUAL
84629: IFFALSE 84701
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84631: LD_INT 68
84633: PPUSH
84634: LD_VAR 0 1
84638: PPUSH
84639: CALL_OW 255
84643: PPUSH
84644: CALL_OW 321
84648: PUSH
84649: LD_INT 2
84651: EQUAL
84652: IFFALSE 84664
// eff := 70 else
84654: LD_ADDR_VAR 0 4
84658: PUSH
84659: LD_INT 70
84661: ST_TO_ADDR
84662: GO 84672
// eff := 30 ;
84664: LD_ADDR_VAR 0 4
84668: PUSH
84669: LD_INT 30
84671: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84672: LD_VAR 0 1
84676: PPUSH
84677: CALL_OW 250
84681: PPUSH
84682: LD_VAR 0 1
84686: PPUSH
84687: CALL_OW 251
84691: PPUSH
84692: LD_VAR 0 4
84696: PPUSH
84697: CALL_OW 495
// end ; end ;
84701: LD_VAR 0 2
84705: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84706: LD_INT 0
84708: PPUSH
// end ;
84709: LD_VAR 0 4
84713: RET
// export function SOS_Command ( cmd ) ; begin
84714: LD_INT 0
84716: PPUSH
// end ;
84717: LD_VAR 0 2
84721: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84722: LD_INT 0
84724: PPUSH
// end ;
84725: LD_VAR 0 6
84729: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84730: LD_INT 0
84732: PPUSH
84733: PPUSH
// if not vehicle or not factory then
84734: LD_VAR 0 1
84738: NOT
84739: PUSH
84740: LD_VAR 0 2
84744: NOT
84745: OR
84746: IFFALSE 84750
// exit ;
84748: GO 84981
// if factoryWaypoints >= factory then
84750: LD_EXP 127
84754: PUSH
84755: LD_VAR 0 2
84759: GREATEREQUAL
84760: IFFALSE 84981
// if factoryWaypoints [ factory ] then
84762: LD_EXP 127
84766: PUSH
84767: LD_VAR 0 2
84771: ARRAY
84772: IFFALSE 84981
// begin if GetControl ( vehicle ) = control_manual then
84774: LD_VAR 0 1
84778: PPUSH
84779: CALL_OW 263
84783: PUSH
84784: LD_INT 1
84786: EQUAL
84787: IFFALSE 84868
// begin driver := IsDrivenBy ( vehicle ) ;
84789: LD_ADDR_VAR 0 4
84793: PUSH
84794: LD_VAR 0 1
84798: PPUSH
84799: CALL_OW 311
84803: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84804: LD_VAR 0 4
84808: PPUSH
84809: LD_EXP 127
84813: PUSH
84814: LD_VAR 0 2
84818: ARRAY
84819: PUSH
84820: LD_INT 3
84822: ARRAY
84823: PPUSH
84824: LD_EXP 127
84828: PUSH
84829: LD_VAR 0 2
84833: ARRAY
84834: PUSH
84835: LD_INT 4
84837: ARRAY
84838: PPUSH
84839: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84843: LD_VAR 0 4
84847: PPUSH
84848: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84852: LD_VAR 0 4
84856: PPUSH
84857: LD_VAR 0 2
84861: PPUSH
84862: CALL_OW 180
// end else
84866: GO 84981
// if GetControl ( vehicle ) = control_remote then
84868: LD_VAR 0 1
84872: PPUSH
84873: CALL_OW 263
84877: PUSH
84878: LD_INT 2
84880: EQUAL
84881: IFFALSE 84942
// begin wait ( 0 0$2 ) ;
84883: LD_INT 70
84885: PPUSH
84886: CALL_OW 67
// if Connect ( vehicle ) then
84890: LD_VAR 0 1
84894: PPUSH
84895: CALL 35502 0 1
84899: IFFALSE 84940
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84901: LD_VAR 0 1
84905: PPUSH
84906: LD_EXP 127
84910: PUSH
84911: LD_VAR 0 2
84915: ARRAY
84916: PUSH
84917: LD_INT 3
84919: ARRAY
84920: PPUSH
84921: LD_EXP 127
84925: PUSH
84926: LD_VAR 0 2
84930: ARRAY
84931: PUSH
84932: LD_INT 4
84934: ARRAY
84935: PPUSH
84936: CALL_OW 171
// end else
84940: GO 84981
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84942: LD_VAR 0 1
84946: PPUSH
84947: LD_EXP 127
84951: PUSH
84952: LD_VAR 0 2
84956: ARRAY
84957: PUSH
84958: LD_INT 3
84960: ARRAY
84961: PPUSH
84962: LD_EXP 127
84966: PUSH
84967: LD_VAR 0 2
84971: ARRAY
84972: PUSH
84973: LD_INT 4
84975: ARRAY
84976: PPUSH
84977: CALL_OW 171
// end ; end ;
84981: LD_VAR 0 3
84985: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84986: LD_INT 0
84988: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
84989: LD_VAR 0 1
84993: PUSH
84994: LD_INT 250
84996: EQUAL
84997: PUSH
84998: LD_VAR 0 2
85002: PPUSH
85003: CALL_OW 264
85007: PUSH
85008: LD_INT 81
85010: EQUAL
85011: AND
85012: IFFALSE 85033
// MinerPlaceMine ( unit , x , y ) ;
85014: LD_VAR 0 2
85018: PPUSH
85019: LD_VAR 0 4
85023: PPUSH
85024: LD_VAR 0 5
85028: PPUSH
85029: CALL 87418 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85033: LD_VAR 0 1
85037: PUSH
85038: LD_INT 251
85040: EQUAL
85041: PUSH
85042: LD_VAR 0 2
85046: PPUSH
85047: CALL_OW 264
85051: PUSH
85052: LD_INT 81
85054: EQUAL
85055: AND
85056: IFFALSE 85077
// MinerDetonateMine ( unit , x , y ) ;
85058: LD_VAR 0 2
85062: PPUSH
85063: LD_VAR 0 4
85067: PPUSH
85068: LD_VAR 0 5
85072: PPUSH
85073: CALL 87693 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85077: LD_VAR 0 1
85081: PUSH
85082: LD_INT 252
85084: EQUAL
85085: PUSH
85086: LD_VAR 0 2
85090: PPUSH
85091: CALL_OW 264
85095: PUSH
85096: LD_INT 81
85098: EQUAL
85099: AND
85100: IFFALSE 85121
// MinerCreateMinefield ( unit , x , y ) ;
85102: LD_VAR 0 2
85106: PPUSH
85107: LD_VAR 0 4
85111: PPUSH
85112: LD_VAR 0 5
85116: PPUSH
85117: CALL 88110 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
85121: LD_VAR 0 1
85125: PUSH
85126: LD_INT 253
85128: EQUAL
85129: PUSH
85130: LD_VAR 0 2
85134: PPUSH
85135: CALL_OW 257
85139: PUSH
85140: LD_INT 5
85142: EQUAL
85143: AND
85144: IFFALSE 85165
// ComBinocular ( unit , x , y ) ;
85146: LD_VAR 0 2
85150: PPUSH
85151: LD_VAR 0 4
85155: PPUSH
85156: LD_VAR 0 5
85160: PPUSH
85161: CALL 88479 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
85165: LD_VAR 0 1
85169: PUSH
85170: LD_INT 254
85172: EQUAL
85173: PUSH
85174: LD_VAR 0 2
85178: PPUSH
85179: CALL_OW 264
85183: PUSH
85184: LD_INT 99
85186: EQUAL
85187: AND
85188: PUSH
85189: LD_VAR 0 3
85193: PPUSH
85194: CALL_OW 263
85198: PUSH
85199: LD_INT 3
85201: EQUAL
85202: AND
85203: IFFALSE 85219
// HackDestroyVehicle ( unit , selectedUnit ) ;
85205: LD_VAR 0 2
85209: PPUSH
85210: LD_VAR 0 3
85214: PPUSH
85215: CALL 86782 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
85219: LD_VAR 0 1
85223: PUSH
85224: LD_INT 255
85226: EQUAL
85227: PUSH
85228: LD_VAR 0 2
85232: PPUSH
85233: CALL_OW 264
85237: PUSH
85238: LD_INT 14
85240: PUSH
85241: LD_INT 53
85243: PUSH
85244: EMPTY
85245: LIST
85246: LIST
85247: IN
85248: AND
85249: PUSH
85250: LD_VAR 0 4
85254: PPUSH
85255: LD_VAR 0 5
85259: PPUSH
85260: CALL_OW 488
85264: AND
85265: IFFALSE 85289
// CutTreeXYR ( unit , x , y , 12 ) ;
85267: LD_VAR 0 2
85271: PPUSH
85272: LD_VAR 0 4
85276: PPUSH
85277: LD_VAR 0 5
85281: PPUSH
85282: LD_INT 12
85284: PPUSH
85285: CALL 85352 0 4
// if cmd = 256 then
85289: LD_VAR 0 1
85293: PUSH
85294: LD_INT 256
85296: EQUAL
85297: IFFALSE 85318
// SetFactoryWaypoint ( unit , x , y ) ;
85299: LD_VAR 0 2
85303: PPUSH
85304: LD_VAR 0 4
85308: PPUSH
85309: LD_VAR 0 5
85313: PPUSH
85314: CALL 83136 0 3
// if cmd = 257 then
85318: LD_VAR 0 1
85322: PUSH
85323: LD_INT 257
85325: EQUAL
85326: IFFALSE 85347
// SetWarehouseGatheringPoint ( unit , x , y ) ;
85328: LD_VAR 0 2
85332: PPUSH
85333: LD_VAR 0 4
85337: PPUSH
85338: LD_VAR 0 5
85342: PPUSH
85343: CALL 83498 0 3
// end ;
85347: LD_VAR 0 6
85351: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
85352: LD_INT 0
85354: PPUSH
85355: PPUSH
85356: PPUSH
85357: PPUSH
85358: PPUSH
85359: PPUSH
85360: PPUSH
85361: PPUSH
85362: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
85363: LD_VAR 0 1
85367: NOT
85368: PUSH
85369: LD_VAR 0 2
85373: PPUSH
85374: LD_VAR 0 3
85378: PPUSH
85379: CALL_OW 488
85383: NOT
85384: OR
85385: PUSH
85386: LD_VAR 0 4
85390: NOT
85391: OR
85392: IFFALSE 85396
// exit ;
85394: GO 85736
// list := [ ] ;
85396: LD_ADDR_VAR 0 13
85400: PUSH
85401: EMPTY
85402: ST_TO_ADDR
// if x - r < 0 then
85403: LD_VAR 0 2
85407: PUSH
85408: LD_VAR 0 4
85412: MINUS
85413: PUSH
85414: LD_INT 0
85416: LESS
85417: IFFALSE 85429
// min_x := 0 else
85419: LD_ADDR_VAR 0 7
85423: PUSH
85424: LD_INT 0
85426: ST_TO_ADDR
85427: GO 85445
// min_x := x - r ;
85429: LD_ADDR_VAR 0 7
85433: PUSH
85434: LD_VAR 0 2
85438: PUSH
85439: LD_VAR 0 4
85443: MINUS
85444: ST_TO_ADDR
// if y - r < 0 then
85445: LD_VAR 0 3
85449: PUSH
85450: LD_VAR 0 4
85454: MINUS
85455: PUSH
85456: LD_INT 0
85458: LESS
85459: IFFALSE 85471
// min_y := 0 else
85461: LD_ADDR_VAR 0 8
85465: PUSH
85466: LD_INT 0
85468: ST_TO_ADDR
85469: GO 85487
// min_y := y - r ;
85471: LD_ADDR_VAR 0 8
85475: PUSH
85476: LD_VAR 0 3
85480: PUSH
85481: LD_VAR 0 4
85485: MINUS
85486: ST_TO_ADDR
// max_x := x + r ;
85487: LD_ADDR_VAR 0 9
85491: PUSH
85492: LD_VAR 0 2
85496: PUSH
85497: LD_VAR 0 4
85501: PLUS
85502: ST_TO_ADDR
// max_y := y + r ;
85503: LD_ADDR_VAR 0 10
85507: PUSH
85508: LD_VAR 0 3
85512: PUSH
85513: LD_VAR 0 4
85517: PLUS
85518: ST_TO_ADDR
// for _x = min_x to max_x do
85519: LD_ADDR_VAR 0 11
85523: PUSH
85524: DOUBLE
85525: LD_VAR 0 7
85529: DEC
85530: ST_TO_ADDR
85531: LD_VAR 0 9
85535: PUSH
85536: FOR_TO
85537: IFFALSE 85654
// for _y = min_y to max_y do
85539: LD_ADDR_VAR 0 12
85543: PUSH
85544: DOUBLE
85545: LD_VAR 0 8
85549: DEC
85550: ST_TO_ADDR
85551: LD_VAR 0 10
85555: PUSH
85556: FOR_TO
85557: IFFALSE 85650
// begin if not ValidHex ( _x , _y ) then
85559: LD_VAR 0 11
85563: PPUSH
85564: LD_VAR 0 12
85568: PPUSH
85569: CALL_OW 488
85573: NOT
85574: IFFALSE 85578
// continue ;
85576: GO 85556
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85578: LD_VAR 0 11
85582: PPUSH
85583: LD_VAR 0 12
85587: PPUSH
85588: CALL_OW 351
85592: PUSH
85593: LD_VAR 0 11
85597: PPUSH
85598: LD_VAR 0 12
85602: PPUSH
85603: CALL_OW 554
85607: AND
85608: IFFALSE 85648
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85610: LD_ADDR_VAR 0 13
85614: PUSH
85615: LD_VAR 0 13
85619: PPUSH
85620: LD_VAR 0 13
85624: PUSH
85625: LD_INT 1
85627: PLUS
85628: PPUSH
85629: LD_VAR 0 11
85633: PUSH
85634: LD_VAR 0 12
85638: PUSH
85639: EMPTY
85640: LIST
85641: LIST
85642: PPUSH
85643: CALL_OW 2
85647: ST_TO_ADDR
// end ;
85648: GO 85556
85650: POP
85651: POP
85652: GO 85536
85654: POP
85655: POP
// if not list then
85656: LD_VAR 0 13
85660: NOT
85661: IFFALSE 85665
// exit ;
85663: GO 85736
// for i in list do
85665: LD_ADDR_VAR 0 6
85669: PUSH
85670: LD_VAR 0 13
85674: PUSH
85675: FOR_IN
85676: IFFALSE 85734
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85678: LD_VAR 0 1
85682: PPUSH
85683: LD_STRING M
85685: PUSH
85686: LD_VAR 0 6
85690: PUSH
85691: LD_INT 1
85693: ARRAY
85694: PUSH
85695: LD_VAR 0 6
85699: PUSH
85700: LD_INT 2
85702: ARRAY
85703: PUSH
85704: LD_INT 0
85706: PUSH
85707: LD_INT 0
85709: PUSH
85710: LD_INT 0
85712: PUSH
85713: LD_INT 0
85715: PUSH
85716: EMPTY
85717: LIST
85718: LIST
85719: LIST
85720: LIST
85721: LIST
85722: LIST
85723: LIST
85724: PUSH
85725: EMPTY
85726: LIST
85727: PPUSH
85728: CALL_OW 447
85732: GO 85675
85734: POP
85735: POP
// end ;
85736: LD_VAR 0 5
85740: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85741: LD_EXP 130
85745: NOT
85746: IFFALSE 85796
85748: GO 85750
85750: DISABLE
// begin initHack := true ;
85751: LD_ADDR_EXP 130
85755: PUSH
85756: LD_INT 1
85758: ST_TO_ADDR
// hackTanks := [ ] ;
85759: LD_ADDR_EXP 131
85763: PUSH
85764: EMPTY
85765: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85766: LD_ADDR_EXP 132
85770: PUSH
85771: EMPTY
85772: ST_TO_ADDR
// hackLimit := 3 ;
85773: LD_ADDR_EXP 133
85777: PUSH
85778: LD_INT 3
85780: ST_TO_ADDR
// hackDist := 12 ;
85781: LD_ADDR_EXP 134
85785: PUSH
85786: LD_INT 12
85788: ST_TO_ADDR
// hackCounter := [ ] ;
85789: LD_ADDR_EXP 135
85793: PUSH
85794: EMPTY
85795: ST_TO_ADDR
// end ;
85796: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85797: LD_EXP 130
85801: PUSH
85802: LD_INT 34
85804: PUSH
85805: LD_INT 99
85807: PUSH
85808: EMPTY
85809: LIST
85810: LIST
85811: PPUSH
85812: CALL_OW 69
85816: AND
85817: IFFALSE 86070
85819: GO 85821
85821: DISABLE
85822: LD_INT 0
85824: PPUSH
85825: PPUSH
// begin enable ;
85826: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85827: LD_ADDR_VAR 0 1
85831: PUSH
85832: LD_INT 34
85834: PUSH
85835: LD_INT 99
85837: PUSH
85838: EMPTY
85839: LIST
85840: LIST
85841: PPUSH
85842: CALL_OW 69
85846: PUSH
85847: FOR_IN
85848: IFFALSE 86068
// begin if not i in hackTanks then
85850: LD_VAR 0 1
85854: PUSH
85855: LD_EXP 131
85859: IN
85860: NOT
85861: IFFALSE 85944
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85863: LD_ADDR_EXP 131
85867: PUSH
85868: LD_EXP 131
85872: PPUSH
85873: LD_EXP 131
85877: PUSH
85878: LD_INT 1
85880: PLUS
85881: PPUSH
85882: LD_VAR 0 1
85886: PPUSH
85887: CALL_OW 1
85891: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85892: LD_ADDR_EXP 132
85896: PUSH
85897: LD_EXP 132
85901: PPUSH
85902: LD_EXP 132
85906: PUSH
85907: LD_INT 1
85909: PLUS
85910: PPUSH
85911: EMPTY
85912: PPUSH
85913: CALL_OW 1
85917: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85918: LD_ADDR_EXP 135
85922: PUSH
85923: LD_EXP 135
85927: PPUSH
85928: LD_EXP 135
85932: PUSH
85933: LD_INT 1
85935: PLUS
85936: PPUSH
85937: EMPTY
85938: PPUSH
85939: CALL_OW 1
85943: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85944: LD_VAR 0 1
85948: PPUSH
85949: CALL_OW 302
85953: NOT
85954: IFFALSE 85967
// begin HackUnlinkAll ( i ) ;
85956: LD_VAR 0 1
85960: PPUSH
85961: CALL 86073 0 1
// continue ;
85965: GO 85847
// end ; HackCheckCapturedStatus ( i ) ;
85967: LD_VAR 0 1
85971: PPUSH
85972: CALL 86516 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85976: LD_ADDR_VAR 0 2
85980: PUSH
85981: LD_INT 81
85983: PUSH
85984: LD_VAR 0 1
85988: PPUSH
85989: CALL_OW 255
85993: PUSH
85994: EMPTY
85995: LIST
85996: LIST
85997: PUSH
85998: LD_INT 33
86000: PUSH
86001: LD_INT 3
86003: PUSH
86004: EMPTY
86005: LIST
86006: LIST
86007: PUSH
86008: LD_INT 91
86010: PUSH
86011: LD_VAR 0 1
86015: PUSH
86016: LD_EXP 134
86020: PUSH
86021: EMPTY
86022: LIST
86023: LIST
86024: LIST
86025: PUSH
86026: LD_INT 50
86028: PUSH
86029: EMPTY
86030: LIST
86031: PUSH
86032: EMPTY
86033: LIST
86034: LIST
86035: LIST
86036: LIST
86037: PPUSH
86038: CALL_OW 69
86042: ST_TO_ADDR
// if not tmp then
86043: LD_VAR 0 2
86047: NOT
86048: IFFALSE 86052
// continue ;
86050: GO 85847
// HackLink ( i , tmp ) ;
86052: LD_VAR 0 1
86056: PPUSH
86057: LD_VAR 0 2
86061: PPUSH
86062: CALL 86209 0 2
// end ;
86066: GO 85847
86068: POP
86069: POP
// end ;
86070: PPOPN 2
86072: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86073: LD_INT 0
86075: PPUSH
86076: PPUSH
86077: PPUSH
// if not hack in hackTanks then
86078: LD_VAR 0 1
86082: PUSH
86083: LD_EXP 131
86087: IN
86088: NOT
86089: IFFALSE 86093
// exit ;
86091: GO 86204
// index := GetElementIndex ( hackTanks , hack ) ;
86093: LD_ADDR_VAR 0 4
86097: PUSH
86098: LD_EXP 131
86102: PPUSH
86103: LD_VAR 0 1
86107: PPUSH
86108: CALL 32318 0 2
86112: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86113: LD_EXP 132
86117: PUSH
86118: LD_VAR 0 4
86122: ARRAY
86123: IFFALSE 86204
// begin for i in hackTanksCaptured [ index ] do
86125: LD_ADDR_VAR 0 3
86129: PUSH
86130: LD_EXP 132
86134: PUSH
86135: LD_VAR 0 4
86139: ARRAY
86140: PUSH
86141: FOR_IN
86142: IFFALSE 86168
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
86144: LD_VAR 0 3
86148: PUSH
86149: LD_INT 1
86151: ARRAY
86152: PPUSH
86153: LD_VAR 0 3
86157: PUSH
86158: LD_INT 2
86160: ARRAY
86161: PPUSH
86162: CALL_OW 235
86166: GO 86141
86168: POP
86169: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
86170: LD_ADDR_EXP 132
86174: PUSH
86175: LD_EXP 132
86179: PPUSH
86180: LD_VAR 0 4
86184: PPUSH
86185: EMPTY
86186: PPUSH
86187: CALL_OW 1
86191: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
86192: LD_VAR 0 1
86196: PPUSH
86197: LD_INT 0
86199: PPUSH
86200: CALL_OW 505
// end ; end ;
86204: LD_VAR 0 2
86208: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
86209: LD_INT 0
86211: PPUSH
86212: PPUSH
86213: PPUSH
// if not hack in hackTanks or not vehicles then
86214: LD_VAR 0 1
86218: PUSH
86219: LD_EXP 131
86223: IN
86224: NOT
86225: PUSH
86226: LD_VAR 0 2
86230: NOT
86231: OR
86232: IFFALSE 86236
// exit ;
86234: GO 86511
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
86236: LD_ADDR_VAR 0 2
86240: PUSH
86241: LD_VAR 0 1
86245: PPUSH
86246: LD_VAR 0 2
86250: PPUSH
86251: LD_INT 1
86253: PPUSH
86254: LD_INT 1
86256: PPUSH
86257: CALL 32968 0 4
86261: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
86262: LD_ADDR_VAR 0 5
86266: PUSH
86267: LD_EXP 131
86271: PPUSH
86272: LD_VAR 0 1
86276: PPUSH
86277: CALL 32318 0 2
86281: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
86282: LD_EXP 132
86286: PUSH
86287: LD_VAR 0 5
86291: ARRAY
86292: PUSH
86293: LD_EXP 133
86297: LESS
86298: IFFALSE 86487
// begin for i := 1 to vehicles do
86300: LD_ADDR_VAR 0 4
86304: PUSH
86305: DOUBLE
86306: LD_INT 1
86308: DEC
86309: ST_TO_ADDR
86310: LD_VAR 0 2
86314: PUSH
86315: FOR_TO
86316: IFFALSE 86485
// begin if hackTanksCaptured [ index ] = hackLimit then
86318: LD_EXP 132
86322: PUSH
86323: LD_VAR 0 5
86327: ARRAY
86328: PUSH
86329: LD_EXP 133
86333: EQUAL
86334: IFFALSE 86338
// break ;
86336: GO 86485
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
86338: LD_ADDR_EXP 135
86342: PUSH
86343: LD_EXP 135
86347: PPUSH
86348: LD_VAR 0 5
86352: PPUSH
86353: LD_EXP 135
86357: PUSH
86358: LD_VAR 0 5
86362: ARRAY
86363: PUSH
86364: LD_INT 1
86366: PLUS
86367: PPUSH
86368: CALL_OW 1
86372: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
86373: LD_ADDR_EXP 132
86377: PUSH
86378: LD_EXP 132
86382: PPUSH
86383: LD_VAR 0 5
86387: PUSH
86388: LD_EXP 132
86392: PUSH
86393: LD_VAR 0 5
86397: ARRAY
86398: PUSH
86399: LD_INT 1
86401: PLUS
86402: PUSH
86403: EMPTY
86404: LIST
86405: LIST
86406: PPUSH
86407: LD_VAR 0 2
86411: PUSH
86412: LD_VAR 0 4
86416: ARRAY
86417: PUSH
86418: LD_VAR 0 2
86422: PUSH
86423: LD_VAR 0 4
86427: ARRAY
86428: PPUSH
86429: CALL_OW 255
86433: PUSH
86434: EMPTY
86435: LIST
86436: LIST
86437: PPUSH
86438: CALL 32533 0 3
86442: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86443: LD_VAR 0 2
86447: PUSH
86448: LD_VAR 0 4
86452: ARRAY
86453: PPUSH
86454: LD_VAR 0 1
86458: PPUSH
86459: CALL_OW 255
86463: PPUSH
86464: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86468: LD_VAR 0 2
86472: PUSH
86473: LD_VAR 0 4
86477: ARRAY
86478: PPUSH
86479: CALL_OW 141
// end ;
86483: GO 86315
86485: POP
86486: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86487: LD_VAR 0 1
86491: PPUSH
86492: LD_EXP 132
86496: PUSH
86497: LD_VAR 0 5
86501: ARRAY
86502: PUSH
86503: LD_INT 0
86505: PLUS
86506: PPUSH
86507: CALL_OW 505
// end ;
86511: LD_VAR 0 3
86515: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86516: LD_INT 0
86518: PPUSH
86519: PPUSH
86520: PPUSH
86521: PPUSH
// if not hack in hackTanks then
86522: LD_VAR 0 1
86526: PUSH
86527: LD_EXP 131
86531: IN
86532: NOT
86533: IFFALSE 86537
// exit ;
86535: GO 86777
// index := GetElementIndex ( hackTanks , hack ) ;
86537: LD_ADDR_VAR 0 4
86541: PUSH
86542: LD_EXP 131
86546: PPUSH
86547: LD_VAR 0 1
86551: PPUSH
86552: CALL 32318 0 2
86556: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86557: LD_ADDR_VAR 0 3
86561: PUSH
86562: DOUBLE
86563: LD_EXP 132
86567: PUSH
86568: LD_VAR 0 4
86572: ARRAY
86573: INC
86574: ST_TO_ADDR
86575: LD_INT 1
86577: PUSH
86578: FOR_DOWNTO
86579: IFFALSE 86751
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86581: LD_ADDR_VAR 0 5
86585: PUSH
86586: LD_EXP 132
86590: PUSH
86591: LD_VAR 0 4
86595: ARRAY
86596: PUSH
86597: LD_VAR 0 3
86601: ARRAY
86602: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86603: LD_VAR 0 5
86607: PUSH
86608: LD_INT 1
86610: ARRAY
86611: PPUSH
86612: CALL_OW 302
86616: NOT
86617: PUSH
86618: LD_VAR 0 5
86622: PUSH
86623: LD_INT 1
86625: ARRAY
86626: PPUSH
86627: CALL_OW 255
86631: PUSH
86632: LD_VAR 0 1
86636: PPUSH
86637: CALL_OW 255
86641: NONEQUAL
86642: OR
86643: IFFALSE 86749
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86645: LD_VAR 0 5
86649: PUSH
86650: LD_INT 1
86652: ARRAY
86653: PPUSH
86654: CALL_OW 305
86658: PUSH
86659: LD_VAR 0 5
86663: PUSH
86664: LD_INT 1
86666: ARRAY
86667: PPUSH
86668: CALL_OW 255
86672: PUSH
86673: LD_VAR 0 1
86677: PPUSH
86678: CALL_OW 255
86682: EQUAL
86683: AND
86684: IFFALSE 86708
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86686: LD_VAR 0 5
86690: PUSH
86691: LD_INT 1
86693: ARRAY
86694: PPUSH
86695: LD_VAR 0 5
86699: PUSH
86700: LD_INT 2
86702: ARRAY
86703: PPUSH
86704: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86708: LD_ADDR_EXP 132
86712: PUSH
86713: LD_EXP 132
86717: PPUSH
86718: LD_VAR 0 4
86722: PPUSH
86723: LD_EXP 132
86727: PUSH
86728: LD_VAR 0 4
86732: ARRAY
86733: PPUSH
86734: LD_VAR 0 3
86738: PPUSH
86739: CALL_OW 3
86743: PPUSH
86744: CALL_OW 1
86748: ST_TO_ADDR
// end ; end ;
86749: GO 86578
86751: POP
86752: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86753: LD_VAR 0 1
86757: PPUSH
86758: LD_EXP 132
86762: PUSH
86763: LD_VAR 0 4
86767: ARRAY
86768: PUSH
86769: LD_INT 0
86771: PLUS
86772: PPUSH
86773: CALL_OW 505
// end ;
86777: LD_VAR 0 2
86781: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86782: LD_INT 0
86784: PPUSH
86785: PPUSH
86786: PPUSH
86787: PPUSH
// if not hack in hackTanks then
86788: LD_VAR 0 1
86792: PUSH
86793: LD_EXP 131
86797: IN
86798: NOT
86799: IFFALSE 86803
// exit ;
86801: GO 86888
// index := GetElementIndex ( hackTanks , hack ) ;
86803: LD_ADDR_VAR 0 5
86807: PUSH
86808: LD_EXP 131
86812: PPUSH
86813: LD_VAR 0 1
86817: PPUSH
86818: CALL 32318 0 2
86822: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86823: LD_ADDR_VAR 0 4
86827: PUSH
86828: DOUBLE
86829: LD_INT 1
86831: DEC
86832: ST_TO_ADDR
86833: LD_EXP 132
86837: PUSH
86838: LD_VAR 0 5
86842: ARRAY
86843: PUSH
86844: FOR_TO
86845: IFFALSE 86886
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86847: LD_EXP 132
86851: PUSH
86852: LD_VAR 0 5
86856: ARRAY
86857: PUSH
86858: LD_VAR 0 4
86862: ARRAY
86863: PUSH
86864: LD_INT 1
86866: ARRAY
86867: PUSH
86868: LD_VAR 0 2
86872: EQUAL
86873: IFFALSE 86884
// KillUnit ( vehicle ) ;
86875: LD_VAR 0 2
86879: PPUSH
86880: CALL_OW 66
86884: GO 86844
86886: POP
86887: POP
// end ;
86888: LD_VAR 0 3
86892: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86893: LD_EXP 136
86897: NOT
86898: IFFALSE 86933
86900: GO 86902
86902: DISABLE
// begin initMiner := true ;
86903: LD_ADDR_EXP 136
86907: PUSH
86908: LD_INT 1
86910: ST_TO_ADDR
// minersList := [ ] ;
86911: LD_ADDR_EXP 137
86915: PUSH
86916: EMPTY
86917: ST_TO_ADDR
// minerMinesList := [ ] ;
86918: LD_ADDR_EXP 138
86922: PUSH
86923: EMPTY
86924: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86925: LD_ADDR_EXP 139
86929: PUSH
86930: LD_INT 5
86932: ST_TO_ADDR
// end ;
86933: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86934: LD_EXP 136
86938: PUSH
86939: LD_INT 34
86941: PUSH
86942: LD_INT 81
86944: PUSH
86945: EMPTY
86946: LIST
86947: LIST
86948: PPUSH
86949: CALL_OW 69
86953: AND
86954: IFFALSE 87415
86956: GO 86958
86958: DISABLE
86959: LD_INT 0
86961: PPUSH
86962: PPUSH
86963: PPUSH
86964: PPUSH
// begin enable ;
86965: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86966: LD_ADDR_VAR 0 1
86970: PUSH
86971: LD_INT 34
86973: PUSH
86974: LD_INT 81
86976: PUSH
86977: EMPTY
86978: LIST
86979: LIST
86980: PPUSH
86981: CALL_OW 69
86985: PUSH
86986: FOR_IN
86987: IFFALSE 87059
// begin if not i in minersList then
86989: LD_VAR 0 1
86993: PUSH
86994: LD_EXP 137
86998: IN
86999: NOT
87000: IFFALSE 87057
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87002: LD_ADDR_EXP 137
87006: PUSH
87007: LD_EXP 137
87011: PPUSH
87012: LD_EXP 137
87016: PUSH
87017: LD_INT 1
87019: PLUS
87020: PPUSH
87021: LD_VAR 0 1
87025: PPUSH
87026: CALL_OW 1
87030: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87031: LD_ADDR_EXP 138
87035: PUSH
87036: LD_EXP 138
87040: PPUSH
87041: LD_EXP 138
87045: PUSH
87046: LD_INT 1
87048: PLUS
87049: PPUSH
87050: EMPTY
87051: PPUSH
87052: CALL_OW 1
87056: ST_TO_ADDR
// end end ;
87057: GO 86986
87059: POP
87060: POP
// for i := minerMinesList downto 1 do
87061: LD_ADDR_VAR 0 1
87065: PUSH
87066: DOUBLE
87067: LD_EXP 138
87071: INC
87072: ST_TO_ADDR
87073: LD_INT 1
87075: PUSH
87076: FOR_DOWNTO
87077: IFFALSE 87413
// begin if IsLive ( minersList [ i ] ) then
87079: LD_EXP 137
87083: PUSH
87084: LD_VAR 0 1
87088: ARRAY
87089: PPUSH
87090: CALL_OW 300
87094: IFFALSE 87122
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87096: LD_EXP 137
87100: PUSH
87101: LD_VAR 0 1
87105: ARRAY
87106: PPUSH
87107: LD_EXP 138
87111: PUSH
87112: LD_VAR 0 1
87116: ARRAY
87117: PPUSH
87118: CALL_OW 505
// if not minerMinesList [ i ] then
87122: LD_EXP 138
87126: PUSH
87127: LD_VAR 0 1
87131: ARRAY
87132: NOT
87133: IFFALSE 87137
// continue ;
87135: GO 87076
// for j := minerMinesList [ i ] downto 1 do
87137: LD_ADDR_VAR 0 2
87141: PUSH
87142: DOUBLE
87143: LD_EXP 138
87147: PUSH
87148: LD_VAR 0 1
87152: ARRAY
87153: INC
87154: ST_TO_ADDR
87155: LD_INT 1
87157: PUSH
87158: FOR_DOWNTO
87159: IFFALSE 87409
// begin side := GetSide ( minersList [ i ] ) ;
87161: LD_ADDR_VAR 0 3
87165: PUSH
87166: LD_EXP 137
87170: PUSH
87171: LD_VAR 0 1
87175: ARRAY
87176: PPUSH
87177: CALL_OW 255
87181: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
87182: LD_ADDR_VAR 0 4
87186: PUSH
87187: LD_EXP 138
87191: PUSH
87192: LD_VAR 0 1
87196: ARRAY
87197: PUSH
87198: LD_VAR 0 2
87202: ARRAY
87203: PUSH
87204: LD_INT 1
87206: ARRAY
87207: PPUSH
87208: LD_EXP 138
87212: PUSH
87213: LD_VAR 0 1
87217: ARRAY
87218: PUSH
87219: LD_VAR 0 2
87223: ARRAY
87224: PUSH
87225: LD_INT 2
87227: ARRAY
87228: PPUSH
87229: CALL_OW 428
87233: ST_TO_ADDR
// if not tmp then
87234: LD_VAR 0 4
87238: NOT
87239: IFFALSE 87243
// continue ;
87241: GO 87158
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
87243: LD_VAR 0 4
87247: PUSH
87248: LD_INT 81
87250: PUSH
87251: LD_VAR 0 3
87255: PUSH
87256: EMPTY
87257: LIST
87258: LIST
87259: PPUSH
87260: CALL_OW 69
87264: IN
87265: PUSH
87266: LD_EXP 138
87270: PUSH
87271: LD_VAR 0 1
87275: ARRAY
87276: PUSH
87277: LD_VAR 0 2
87281: ARRAY
87282: PUSH
87283: LD_INT 1
87285: ARRAY
87286: PPUSH
87287: LD_EXP 138
87291: PUSH
87292: LD_VAR 0 1
87296: ARRAY
87297: PUSH
87298: LD_VAR 0 2
87302: ARRAY
87303: PUSH
87304: LD_INT 2
87306: ARRAY
87307: PPUSH
87308: CALL_OW 458
87312: AND
87313: IFFALSE 87407
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
87315: LD_EXP 138
87319: PUSH
87320: LD_VAR 0 1
87324: ARRAY
87325: PUSH
87326: LD_VAR 0 2
87330: ARRAY
87331: PUSH
87332: LD_INT 1
87334: ARRAY
87335: PPUSH
87336: LD_EXP 138
87340: PUSH
87341: LD_VAR 0 1
87345: ARRAY
87346: PUSH
87347: LD_VAR 0 2
87351: ARRAY
87352: PUSH
87353: LD_INT 2
87355: ARRAY
87356: PPUSH
87357: LD_VAR 0 3
87361: PPUSH
87362: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
87366: LD_ADDR_EXP 138
87370: PUSH
87371: LD_EXP 138
87375: PPUSH
87376: LD_VAR 0 1
87380: PPUSH
87381: LD_EXP 138
87385: PUSH
87386: LD_VAR 0 1
87390: ARRAY
87391: PPUSH
87392: LD_VAR 0 2
87396: PPUSH
87397: CALL_OW 3
87401: PPUSH
87402: CALL_OW 1
87406: ST_TO_ADDR
// end ; end ;
87407: GO 87158
87409: POP
87410: POP
// end ;
87411: GO 87076
87413: POP
87414: POP
// end ;
87415: PPOPN 4
87417: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87418: LD_INT 0
87420: PPUSH
87421: PPUSH
// result := false ;
87422: LD_ADDR_VAR 0 4
87426: PUSH
87427: LD_INT 0
87429: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87430: LD_VAR 0 1
87434: PPUSH
87435: CALL_OW 264
87439: PUSH
87440: LD_INT 81
87442: EQUAL
87443: NOT
87444: IFFALSE 87448
// exit ;
87446: GO 87688
// index := GetElementIndex ( minersList , unit ) ;
87448: LD_ADDR_VAR 0 5
87452: PUSH
87453: LD_EXP 137
87457: PPUSH
87458: LD_VAR 0 1
87462: PPUSH
87463: CALL 32318 0 2
87467: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87468: LD_EXP 138
87472: PUSH
87473: LD_VAR 0 5
87477: ARRAY
87478: PUSH
87479: LD_EXP 139
87483: GREATEREQUAL
87484: IFFALSE 87488
// exit ;
87486: GO 87688
// ComMoveXY ( unit , x , y ) ;
87488: LD_VAR 0 1
87492: PPUSH
87493: LD_VAR 0 2
87497: PPUSH
87498: LD_VAR 0 3
87502: PPUSH
87503: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87507: LD_INT 35
87509: PPUSH
87510: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87514: LD_VAR 0 1
87518: PPUSH
87519: LD_VAR 0 2
87523: PPUSH
87524: LD_VAR 0 3
87528: PPUSH
87529: CALL 63654 0 3
87533: NOT
87534: PUSH
87535: LD_VAR 0 1
87539: PPUSH
87540: CALL_OW 314
87544: AND
87545: IFFALSE 87549
// exit ;
87547: GO 87688
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87549: LD_VAR 0 2
87553: PPUSH
87554: LD_VAR 0 3
87558: PPUSH
87559: CALL_OW 428
87563: PUSH
87564: LD_VAR 0 1
87568: EQUAL
87569: PUSH
87570: LD_VAR 0 1
87574: PPUSH
87575: CALL_OW 314
87579: NOT
87580: AND
87581: IFFALSE 87507
// PlaySoundXY ( x , y , PlantMine ) ;
87583: LD_VAR 0 2
87587: PPUSH
87588: LD_VAR 0 3
87592: PPUSH
87593: LD_STRING PlantMine
87595: PPUSH
87596: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87600: LD_VAR 0 2
87604: PPUSH
87605: LD_VAR 0 3
87609: PPUSH
87610: LD_VAR 0 1
87614: PPUSH
87615: CALL_OW 255
87619: PPUSH
87620: LD_INT 0
87622: PPUSH
87623: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87627: LD_ADDR_EXP 138
87631: PUSH
87632: LD_EXP 138
87636: PPUSH
87637: LD_VAR 0 5
87641: PUSH
87642: LD_EXP 138
87646: PUSH
87647: LD_VAR 0 5
87651: ARRAY
87652: PUSH
87653: LD_INT 1
87655: PLUS
87656: PUSH
87657: EMPTY
87658: LIST
87659: LIST
87660: PPUSH
87661: LD_VAR 0 2
87665: PUSH
87666: LD_VAR 0 3
87670: PUSH
87671: EMPTY
87672: LIST
87673: LIST
87674: PPUSH
87675: CALL 32533 0 3
87679: ST_TO_ADDR
// result := true ;
87680: LD_ADDR_VAR 0 4
87684: PUSH
87685: LD_INT 1
87687: ST_TO_ADDR
// end ;
87688: LD_VAR 0 4
87692: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87693: LD_INT 0
87695: PPUSH
87696: PPUSH
87697: PPUSH
// if not unit in minersList then
87698: LD_VAR 0 1
87702: PUSH
87703: LD_EXP 137
87707: IN
87708: NOT
87709: IFFALSE 87713
// exit ;
87711: GO 88105
// index := GetElementIndex ( minersList , unit ) ;
87713: LD_ADDR_VAR 0 6
87717: PUSH
87718: LD_EXP 137
87722: PPUSH
87723: LD_VAR 0 1
87727: PPUSH
87728: CALL 32318 0 2
87732: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87733: LD_ADDR_VAR 0 5
87737: PUSH
87738: DOUBLE
87739: LD_EXP 138
87743: PUSH
87744: LD_VAR 0 6
87748: ARRAY
87749: INC
87750: ST_TO_ADDR
87751: LD_INT 1
87753: PUSH
87754: FOR_DOWNTO
87755: IFFALSE 87916
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87757: LD_EXP 138
87761: PUSH
87762: LD_VAR 0 6
87766: ARRAY
87767: PUSH
87768: LD_VAR 0 5
87772: ARRAY
87773: PUSH
87774: LD_INT 1
87776: ARRAY
87777: PUSH
87778: LD_VAR 0 2
87782: EQUAL
87783: PUSH
87784: LD_EXP 138
87788: PUSH
87789: LD_VAR 0 6
87793: ARRAY
87794: PUSH
87795: LD_VAR 0 5
87799: ARRAY
87800: PUSH
87801: LD_INT 2
87803: ARRAY
87804: PUSH
87805: LD_VAR 0 3
87809: EQUAL
87810: AND
87811: IFFALSE 87914
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87813: LD_EXP 138
87817: PUSH
87818: LD_VAR 0 6
87822: ARRAY
87823: PUSH
87824: LD_VAR 0 5
87828: ARRAY
87829: PUSH
87830: LD_INT 1
87832: ARRAY
87833: PPUSH
87834: LD_EXP 138
87838: PUSH
87839: LD_VAR 0 6
87843: ARRAY
87844: PUSH
87845: LD_VAR 0 5
87849: ARRAY
87850: PUSH
87851: LD_INT 2
87853: ARRAY
87854: PPUSH
87855: LD_VAR 0 1
87859: PPUSH
87860: CALL_OW 255
87864: PPUSH
87865: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87869: LD_ADDR_EXP 138
87873: PUSH
87874: LD_EXP 138
87878: PPUSH
87879: LD_VAR 0 6
87883: PPUSH
87884: LD_EXP 138
87888: PUSH
87889: LD_VAR 0 6
87893: ARRAY
87894: PPUSH
87895: LD_VAR 0 5
87899: PPUSH
87900: CALL_OW 3
87904: PPUSH
87905: CALL_OW 1
87909: ST_TO_ADDR
// exit ;
87910: POP
87911: POP
87912: GO 88105
// end ; end ;
87914: GO 87754
87916: POP
87917: POP
// for i := minerMinesList [ index ] downto 1 do
87918: LD_ADDR_VAR 0 5
87922: PUSH
87923: DOUBLE
87924: LD_EXP 138
87928: PUSH
87929: LD_VAR 0 6
87933: ARRAY
87934: INC
87935: ST_TO_ADDR
87936: LD_INT 1
87938: PUSH
87939: FOR_DOWNTO
87940: IFFALSE 88103
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87942: LD_EXP 138
87946: PUSH
87947: LD_VAR 0 6
87951: ARRAY
87952: PUSH
87953: LD_VAR 0 5
87957: ARRAY
87958: PUSH
87959: LD_INT 1
87961: ARRAY
87962: PPUSH
87963: LD_EXP 138
87967: PUSH
87968: LD_VAR 0 6
87972: ARRAY
87973: PUSH
87974: LD_VAR 0 5
87978: ARRAY
87979: PUSH
87980: LD_INT 2
87982: ARRAY
87983: PPUSH
87984: LD_VAR 0 2
87988: PPUSH
87989: LD_VAR 0 3
87993: PPUSH
87994: CALL_OW 298
87998: PUSH
87999: LD_INT 6
88001: LESS
88002: IFFALSE 88101
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88004: LD_EXP 138
88008: PUSH
88009: LD_VAR 0 6
88013: ARRAY
88014: PUSH
88015: LD_VAR 0 5
88019: ARRAY
88020: PUSH
88021: LD_INT 1
88023: ARRAY
88024: PPUSH
88025: LD_EXP 138
88029: PUSH
88030: LD_VAR 0 6
88034: ARRAY
88035: PUSH
88036: LD_VAR 0 5
88040: ARRAY
88041: PUSH
88042: LD_INT 2
88044: ARRAY
88045: PPUSH
88046: LD_VAR 0 1
88050: PPUSH
88051: CALL_OW 255
88055: PPUSH
88056: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88060: LD_ADDR_EXP 138
88064: PUSH
88065: LD_EXP 138
88069: PPUSH
88070: LD_VAR 0 6
88074: PPUSH
88075: LD_EXP 138
88079: PUSH
88080: LD_VAR 0 6
88084: ARRAY
88085: PPUSH
88086: LD_VAR 0 5
88090: PPUSH
88091: CALL_OW 3
88095: PPUSH
88096: CALL_OW 1
88100: ST_TO_ADDR
// end ; end ;
88101: GO 87939
88103: POP
88104: POP
// end ;
88105: LD_VAR 0 4
88109: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88110: LD_INT 0
88112: PPUSH
88113: PPUSH
88114: PPUSH
88115: PPUSH
88116: PPUSH
88117: PPUSH
88118: PPUSH
88119: PPUSH
88120: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
88121: LD_VAR 0 1
88125: PPUSH
88126: CALL_OW 264
88130: PUSH
88131: LD_INT 81
88133: EQUAL
88134: NOT
88135: PUSH
88136: LD_VAR 0 1
88140: PUSH
88141: LD_EXP 137
88145: IN
88146: NOT
88147: OR
88148: IFFALSE 88152
// exit ;
88150: GO 88474
// index := GetElementIndex ( minersList , unit ) ;
88152: LD_ADDR_VAR 0 6
88156: PUSH
88157: LD_EXP 137
88161: PPUSH
88162: LD_VAR 0 1
88166: PPUSH
88167: CALL 32318 0 2
88171: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
88172: LD_ADDR_VAR 0 8
88176: PUSH
88177: LD_EXP 139
88181: PUSH
88182: LD_EXP 138
88186: PUSH
88187: LD_VAR 0 6
88191: ARRAY
88192: MINUS
88193: ST_TO_ADDR
// if not minesFreeAmount then
88194: LD_VAR 0 8
88198: NOT
88199: IFFALSE 88203
// exit ;
88201: GO 88474
// tmp := [ ] ;
88203: LD_ADDR_VAR 0 7
88207: PUSH
88208: EMPTY
88209: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
88210: LD_ADDR_VAR 0 5
88214: PUSH
88215: DOUBLE
88216: LD_INT 1
88218: DEC
88219: ST_TO_ADDR
88220: LD_VAR 0 8
88224: PUSH
88225: FOR_TO
88226: IFFALSE 88421
// begin _d := rand ( 0 , 5 ) ;
88228: LD_ADDR_VAR 0 11
88232: PUSH
88233: LD_INT 0
88235: PPUSH
88236: LD_INT 5
88238: PPUSH
88239: CALL_OW 12
88243: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
88244: LD_ADDR_VAR 0 12
88248: PUSH
88249: LD_INT 2
88251: PPUSH
88252: LD_INT 6
88254: PPUSH
88255: CALL_OW 12
88259: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
88260: LD_ADDR_VAR 0 9
88264: PUSH
88265: LD_VAR 0 2
88269: PPUSH
88270: LD_VAR 0 11
88274: PPUSH
88275: LD_VAR 0 12
88279: PPUSH
88280: CALL_OW 272
88284: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
88285: LD_ADDR_VAR 0 10
88289: PUSH
88290: LD_VAR 0 3
88294: PPUSH
88295: LD_VAR 0 11
88299: PPUSH
88300: LD_VAR 0 12
88304: PPUSH
88305: CALL_OW 273
88309: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
88310: LD_VAR 0 9
88314: PPUSH
88315: LD_VAR 0 10
88319: PPUSH
88320: CALL_OW 488
88324: PUSH
88325: LD_VAR 0 9
88329: PUSH
88330: LD_VAR 0 10
88334: PUSH
88335: EMPTY
88336: LIST
88337: LIST
88338: PUSH
88339: LD_VAR 0 7
88343: IN
88344: NOT
88345: AND
88346: PUSH
88347: LD_VAR 0 9
88351: PPUSH
88352: LD_VAR 0 10
88356: PPUSH
88357: CALL_OW 458
88361: NOT
88362: AND
88363: IFFALSE 88405
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
88365: LD_ADDR_VAR 0 7
88369: PUSH
88370: LD_VAR 0 7
88374: PPUSH
88375: LD_VAR 0 7
88379: PUSH
88380: LD_INT 1
88382: PLUS
88383: PPUSH
88384: LD_VAR 0 9
88388: PUSH
88389: LD_VAR 0 10
88393: PUSH
88394: EMPTY
88395: LIST
88396: LIST
88397: PPUSH
88398: CALL_OW 1
88402: ST_TO_ADDR
88403: GO 88419
// i := i - 1 ;
88405: LD_ADDR_VAR 0 5
88409: PUSH
88410: LD_VAR 0 5
88414: PUSH
88415: LD_INT 1
88417: MINUS
88418: ST_TO_ADDR
// end ;
88419: GO 88225
88421: POP
88422: POP
// for i in tmp do
88423: LD_ADDR_VAR 0 5
88427: PUSH
88428: LD_VAR 0 7
88432: PUSH
88433: FOR_IN
88434: IFFALSE 88472
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88436: LD_VAR 0 1
88440: PPUSH
88441: LD_VAR 0 5
88445: PUSH
88446: LD_INT 1
88448: ARRAY
88449: PPUSH
88450: LD_VAR 0 5
88454: PUSH
88455: LD_INT 2
88457: ARRAY
88458: PPUSH
88459: CALL 87418 0 3
88463: NOT
88464: IFFALSE 88470
// exit ;
88466: POP
88467: POP
88468: GO 88474
88470: GO 88433
88472: POP
88473: POP
// end ;
88474: LD_VAR 0 4
88478: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88479: LD_INT 0
88481: PPUSH
88482: PPUSH
88483: PPUSH
88484: PPUSH
88485: PPUSH
88486: PPUSH
88487: PPUSH
// if not GetClass ( unit ) = class_sniper then
88488: LD_VAR 0 1
88492: PPUSH
88493: CALL_OW 257
88497: PUSH
88498: LD_INT 5
88500: EQUAL
88501: NOT
88502: IFFALSE 88506
// exit ;
88504: GO 88894
// dist := 8 ;
88506: LD_ADDR_VAR 0 5
88510: PUSH
88511: LD_INT 8
88513: ST_TO_ADDR
// viewRange := 12 ;
88514: LD_ADDR_VAR 0 7
88518: PUSH
88519: LD_INT 12
88521: ST_TO_ADDR
// side := GetSide ( unit ) ;
88522: LD_ADDR_VAR 0 6
88526: PUSH
88527: LD_VAR 0 1
88531: PPUSH
88532: CALL_OW 255
88536: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88537: LD_INT 61
88539: PPUSH
88540: LD_VAR 0 6
88544: PPUSH
88545: CALL_OW 321
88549: PUSH
88550: LD_INT 2
88552: EQUAL
88553: IFFALSE 88563
// viewRange := 16 ;
88555: LD_ADDR_VAR 0 7
88559: PUSH
88560: LD_INT 16
88562: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88563: LD_VAR 0 1
88567: PPUSH
88568: LD_VAR 0 2
88572: PPUSH
88573: LD_VAR 0 3
88577: PPUSH
88578: CALL_OW 297
88582: PUSH
88583: LD_VAR 0 5
88587: GREATER
88588: IFFALSE 88667
// begin ComMoveXY ( unit , x , y ) ;
88590: LD_VAR 0 1
88594: PPUSH
88595: LD_VAR 0 2
88599: PPUSH
88600: LD_VAR 0 3
88604: PPUSH
88605: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88609: LD_INT 35
88611: PPUSH
88612: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88616: LD_VAR 0 1
88620: PPUSH
88621: LD_VAR 0 2
88625: PPUSH
88626: LD_VAR 0 3
88630: PPUSH
88631: CALL 63654 0 3
88635: NOT
88636: IFFALSE 88640
// exit ;
88638: GO 88894
// until GetDistUnitXY ( unit , x , y ) < dist ;
88640: LD_VAR 0 1
88644: PPUSH
88645: LD_VAR 0 2
88649: PPUSH
88650: LD_VAR 0 3
88654: PPUSH
88655: CALL_OW 297
88659: PUSH
88660: LD_VAR 0 5
88664: LESS
88665: IFFALSE 88609
// end ; ComTurnXY ( unit , x , y ) ;
88667: LD_VAR 0 1
88671: PPUSH
88672: LD_VAR 0 2
88676: PPUSH
88677: LD_VAR 0 3
88681: PPUSH
88682: CALL_OW 118
// wait ( 5 ) ;
88686: LD_INT 5
88688: PPUSH
88689: CALL_OW 67
// _d := GetDir ( unit ) ;
88693: LD_ADDR_VAR 0 10
88697: PUSH
88698: LD_VAR 0 1
88702: PPUSH
88703: CALL_OW 254
88707: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88708: LD_ADDR_VAR 0 8
88712: PUSH
88713: LD_VAR 0 1
88717: PPUSH
88718: CALL_OW 250
88722: PPUSH
88723: LD_VAR 0 10
88727: PPUSH
88728: LD_VAR 0 5
88732: PPUSH
88733: CALL_OW 272
88737: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88738: LD_ADDR_VAR 0 9
88742: PUSH
88743: LD_VAR 0 1
88747: PPUSH
88748: CALL_OW 251
88752: PPUSH
88753: LD_VAR 0 10
88757: PPUSH
88758: LD_VAR 0 5
88762: PPUSH
88763: CALL_OW 273
88767: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88768: LD_VAR 0 8
88772: PPUSH
88773: LD_VAR 0 9
88777: PPUSH
88778: CALL_OW 488
88782: NOT
88783: IFFALSE 88787
// exit ;
88785: GO 88894
// ComAnimCustom ( unit , 1 ) ;
88787: LD_VAR 0 1
88791: PPUSH
88792: LD_INT 1
88794: PPUSH
88795: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88799: LD_VAR 0 8
88803: PPUSH
88804: LD_VAR 0 9
88808: PPUSH
88809: LD_VAR 0 6
88813: PPUSH
88814: LD_VAR 0 7
88818: PPUSH
88819: CALL_OW 330
// repeat wait ( 1 ) ;
88823: LD_INT 1
88825: PPUSH
88826: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88830: LD_VAR 0 1
88834: PPUSH
88835: CALL_OW 316
88839: PUSH
88840: LD_VAR 0 1
88844: PPUSH
88845: CALL_OW 314
88849: OR
88850: PUSH
88851: LD_VAR 0 1
88855: PPUSH
88856: CALL_OW 302
88860: NOT
88861: OR
88862: PUSH
88863: LD_VAR 0 1
88867: PPUSH
88868: CALL_OW 301
88872: OR
88873: IFFALSE 88823
// RemoveSeeing ( _x , _y , side ) ;
88875: LD_VAR 0 8
88879: PPUSH
88880: LD_VAR 0 9
88884: PPUSH
88885: LD_VAR 0 6
88889: PPUSH
88890: CALL_OW 331
// end ; end_of_file
88894: LD_VAR 0 4
88898: RET
// export function StopOriginalMusic ; begin
88899: LD_INT 0
88901: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
88902: LD_STRING OW_FORCEMUSICDISABLE(true);
88904: PPUSH
88905: CALL_OW 559
// end ;
88909: LD_VAR 0 1
88913: RET
// export function PlayOriginalMusic ; begin
88914: LD_INT 0
88916: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
88917: LD_STRING OW_FORCEMUSICDISABLE(false);
88919: PPUSH
88920: CALL_OW 559
// end ;
88924: LD_VAR 0 1
88928: RET
// export function PlayCustomMusic ( track , callback ) ; begin
88929: LD_INT 0
88931: PPUSH
// StopOriginalMusic ;
88932: CALL 88899 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
88936: LD_STRING playMusic("
88938: PUSH
88939: LD_VAR 0 1
88943: STR
88944: PUSH
88945: LD_STRING ", "
88947: STR
88948: PUSH
88949: LD_VAR 0 2
88953: STR
88954: PUSH
88955: LD_STRING ")
88957: STR
88958: PPUSH
88959: CALL_OW 559
// end ;
88963: LD_VAR 0 3
88967: RET
