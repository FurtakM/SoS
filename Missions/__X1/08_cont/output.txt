// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 18744 0 0
// PrepareRussian ;
  12: CALL 1820 0 0
// PrepareArabian ;
  16: CALL 354 0 0
// Action ;
  20: CALL 3434 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// enable ( entranceEvent ) ;
 343: LD_INT 1
 345: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 346: LD_INT 2
 348: DISABLE_MARKED
// end ; end_of_file
 349: LD_VAR 0 1
 353: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 354: LD_INT 0
 356: PPUSH
 357: PPUSH
// uc_side := 4 ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_INT 4
 365: ST_TO_ADDR
// uc_nation := 1 ;
 366: LD_ADDR_OWVAR 21
 370: PUSH
 371: LD_INT 1
 373: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 374: LD_ADDR_EXP 48
 378: PUSH
 379: LD_STRING 07_Americans
 381: PPUSH
 382: CALL_OW 31
 386: ST_TO_ADDR
// if americanSquad < 5 then
 387: LD_EXP 48
 391: PUSH
 392: LD_INT 5
 394: LESS
 395: IFFALSE 487
// begin if not americanSquad then
 397: LD_EXP 48
 401: NOT
 402: IFFALSE 411
// americanSquad := [ ] ;
 404: LD_ADDR_EXP 48
 408: PUSH
 409: EMPTY
 410: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 411: LD_ADDR_VAR 0 2
 415: PUSH
 416: DOUBLE
 417: LD_EXP 48
 421: DEC
 422: ST_TO_ADDR
 423: LD_INT 2
 425: PUSH
 426: LD_INT 3
 428: PUSH
 429: LD_INT 4
 431: PUSH
 432: LD_INT 4
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: LIST
 440: PUSH
 441: LD_OWVAR 67
 445: ARRAY
 446: PUSH
 447: FOR_TO
 448: IFFALSE 485
// begin PrepareHuman ( false , 2 , 6 ) ;
 450: LD_INT 0
 452: PPUSH
 453: LD_INT 2
 455: PPUSH
 456: LD_INT 6
 458: PPUSH
 459: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 463: LD_ADDR_EXP 48
 467: PUSH
 468: LD_EXP 48
 472: PPUSH
 473: CALL_OW 44
 477: PPUSH
 478: CALL 63230 0 2
 482: ST_TO_ADDR
// end ;
 483: GO 447
 485: POP
 486: POP
// end ; Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 487: LD_ADDR_EXP 50
 491: PUSH
 492: LD_STRING UsCommander
 494: PPUSH
 495: LD_EXP 1
 499: NOT
 500: PPUSH
 501: LD_STRING 07_
 503: PPUSH
 504: CALL 25781 0 3
 508: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 509: LD_INT 1
 511: PPUSH
 512: LD_INT 6
 514: PPUSH
 515: CALL_OW 381
// Jerry := CreateHuman ;
 519: LD_ADDR_EXP 51
 523: PUSH
 524: CALL_OW 44
 528: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 529: LD_EXP 51
 533: PPUSH
 534: LD_INT 33
 536: PPUSH
 537: CALL_OW 336
// if not Doug then
 541: LD_EXP 50
 545: NOT
 546: IFFALSE 580
// begin PrepareSoldier ( sex_male , 6 ) ;
 548: LD_INT 1
 550: PPUSH
 551: LD_INT 6
 553: PPUSH
 554: CALL_OW 381
// Doug := CreateHuman ;
 558: LD_ADDR_EXP 50
 562: PUSH
 563: CALL_OW 44
 567: ST_TO_ADDR
// SetClass ( Doug , class_prison ) ;
 568: LD_EXP 50
 572: PPUSH
 573: LD_INT 33
 575: PPUSH
 576: CALL_OW 336
// end ; if johnnySaved or debug then
 580: LD_EXP 3
 584: PUSH
 585: LD_EXP 1
 589: OR
 590: IFFALSE 617
// begin Harris := NewCharacter ( Harris ) ;
 592: LD_ADDR_EXP 49
 596: PUSH
 597: LD_STRING Harris
 599: PPUSH
 600: CALL_OW 25
 604: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 605: LD_EXP 49
 609: PPUSH
 610: LD_INT 33
 612: PPUSH
 613: CALL_OW 336
// end ; uc_side := 2 ;
 617: LD_ADDR_OWVAR 20
 621: PUSH
 622: LD_INT 2
 624: ST_TO_ADDR
// uc_nation := 2 ;
 625: LD_ADDR_OWVAR 21
 629: PUSH
 630: LD_INT 2
 632: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 633: LD_ADDR_EXP 36
 637: PUSH
 638: LD_STRING Heike
 640: PPUSH
 641: LD_EXP 1
 645: NOT
 646: PPUSH
 647: LD_EXP 2
 651: PPUSH
 652: CALL 25781 0 3
 656: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 657: LD_ADDR_EXP 39
 661: PUSH
 662: LD_STRING Ibrahim
 664: PPUSH
 665: LD_EXP 1
 669: NOT
 670: PPUSH
 671: LD_EXP 2
 675: PPUSH
 676: CALL 25781 0 3
 680: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 681: LD_ADDR_EXP 37
 685: PUSH
 686: LD_STRING Givi
 688: PPUSH
 689: LD_EXP 1
 693: NOT
 694: PPUSH
 695: LD_EXP 2
 699: PPUSH
 700: CALL 25781 0 3
 704: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 705: LD_ADDR_EXP 40
 709: PUSH
 710: LD_STRING Kamil
 712: PPUSH
 713: LD_EXP 1
 717: NOT
 718: PPUSH
 719: LD_EXP 2
 723: PPUSH
 724: CALL 25781 0 3
 728: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 729: LD_ADDR_EXP 41
 733: PUSH
 734: LD_STRING Kaia
 736: PPUSH
 737: LD_EXP 1
 741: NOT
 742: PPUSH
 743: LD_EXP 2
 747: PPUSH
 748: CALL 25781 0 3
 752: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 753: LD_ADDR_EXP 42
 757: PUSH
 758: LD_STRING Sophia
 760: PPUSH
 761: LD_EXP 1
 765: NOT
 766: PPUSH
 767: LD_EXP 2
 771: PPUSH
 772: CALL 25781 0 3
 776: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 777: LD_ADDR_EXP 43
 781: PUSH
 782: LD_STRING Markov
 784: PPUSH
 785: LD_EXP 1
 789: NOT
 790: PPUSH
 791: LD_EXP 2
 795: PPUSH
 796: CALL 25781 0 3
 800: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 801: LD_ADDR_EXP 46
 805: PUSH
 806: LD_STRING Aviradze
 808: PPUSH
 809: LD_EXP 1
 813: NOT
 814: PPUSH
 815: LD_EXP 2
 819: PPUSH
 820: CALL 25781 0 3
 824: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 825: LD_ADDR_EXP 45
 829: PUSH
 830: LD_STRING Kurt
 832: PPUSH
 833: LD_EXP 1
 837: NOT
 838: PPUSH
 839: LD_EXP 2
 843: PPUSH
 844: CALL 25781 0 3
 848: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 849: LD_ADDR_EXP 38
 853: PUSH
 854: LD_STRING Mike
 856: PPUSH
 857: LD_EXP 1
 861: NOT
 862: PPUSH
 863: LD_EXP 2
 867: PPUSH
 868: CALL 25781 0 3
 872: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , false ,  ) ;
 873: LD_ADDR_EXP 44
 877: PUSH
 878: LD_STRING Olaf
 880: PPUSH
 881: LD_INT 0
 883: PPUSH
 884: LD_STRING 
 886: PPUSH
 887: CALL 25781 0 3
 891: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
 892: LD_ADDR_EXP 47
 896: PUSH
 897: LD_STRING 07_others
 899: PPUSH
 900: CALL_OW 31
 904: ST_TO_ADDR
// end ;
 905: LD_VAR 0 1
 909: RET
// export function PrepareGame ; var i ; begin
 910: LD_INT 0
 912: PPUSH
 913: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
 914: LD_EXP 36
 918: PPUSH
 919: LD_INT 23
 921: PPUSH
 922: CALL_OW 52
// if Givi then
 926: LD_EXP 37
 930: IFFALSE 968
// begin SetSide ( Givi , 5 ) ;
 932: LD_EXP 37
 936: PPUSH
 937: LD_INT 5
 939: PPUSH
 940: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
 944: LD_EXP 37
 948: PPUSH
 949: LD_INT 9
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: CALL_OW 49
// ComHold ( Givi ) ;
 959: LD_EXP 37
 963: PPUSH
 964: CALL_OW 140
// end ; if Markov then
 968: LD_EXP 43
 972: IFFALSE 1010
// begin SetSide ( Markov , 5 ) ;
 974: LD_EXP 43
 978: PPUSH
 979: LD_INT 5
 981: PPUSH
 982: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
 986: LD_EXP 43
 990: PPUSH
 991: LD_INT 3
 993: PPUSH
 994: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
 998: LD_EXP 43
1002: PPUSH
1003: LD_INT 61
1005: PPUSH
1006: CALL_OW 52
// end ; if Mike then
1010: LD_EXP 38
1014: IFFALSE 1052
// begin SetSide ( Mike , 5 ) ;
1016: LD_EXP 38
1020: PPUSH
1021: LD_INT 5
1023: PPUSH
1024: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1028: LD_EXP 38
1032: PPUSH
1033: LD_INT 17
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL_OW 49
// ComHold ( Mike ) ;
1043: LD_EXP 38
1047: PPUSH
1048: CALL_OW 140
// end ; if Olaf then
1052: LD_EXP 44
1056: IFFALSE 1097
// begin SetSide ( Olaf , 5 ) ;
1058: LD_EXP 44
1062: PPUSH
1063: LD_INT 5
1065: PPUSH
1066: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1070: LD_EXP 44
1074: PPUSH
1075: LD_INT 16
1077: PPUSH
1078: LD_INT 0
1080: PPUSH
1081: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1085: LD_EXP 44
1089: PPUSH
1090: LD_INT 3
1092: PPUSH
1093: CALL 66382 0 2
// end ; if Kamil then
1097: LD_EXP 40
1101: IFFALSE 1127
// begin SetSide ( Kamil , 5 ) ;
1103: LD_EXP 40
1107: PPUSH
1108: LD_INT 5
1110: PPUSH
1111: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1115: LD_EXP 40
1119: PPUSH
1120: LD_INT 109
1122: PPUSH
1123: CALL_OW 52
// end ; if Kurt then
1127: LD_EXP 45
1131: IFFALSE 1157
// begin SetSide ( Kurt , 5 ) ;
1133: LD_EXP 45
1137: PPUSH
1138: LD_INT 5
1140: PPUSH
1141: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1145: LD_EXP 45
1149: PPUSH
1150: LD_INT 169
1152: PPUSH
1153: CALL_OW 52
// end ; if Kaia then
1157: LD_EXP 41
1161: IFFALSE 1187
// begin SetSide ( Kaia , 5 ) ;
1163: LD_EXP 41
1167: PPUSH
1168: LD_INT 5
1170: PPUSH
1171: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1175: LD_EXP 41
1179: PPUSH
1180: LD_INT 147
1182: PPUSH
1183: CALL_OW 52
// end ; if Sophia then
1187: LD_EXP 42
1191: IFFALSE 1232
// begin SetSide ( Sophia , 5 ) ;
1193: LD_EXP 42
1197: PPUSH
1198: LD_INT 5
1200: PPUSH
1201: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1205: LD_EXP 42
1209: PPUSH
1210: LD_INT 142
1212: PPUSH
1213: LD_INT 96
1215: PPUSH
1216: LD_INT 0
1218: PPUSH
1219: CALL_OW 48
// ComHold ( Sophia ) ;
1223: LD_EXP 42
1227: PPUSH
1228: CALL_OW 140
// end ; if Harris then
1232: LD_EXP 49
1236: IFFALSE 1274
// begin SetSide ( Harris , 4 ) ;
1238: LD_EXP 49
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1250: LD_EXP 49
1254: PPUSH
1255: LD_INT 20
1257: PPUSH
1258: LD_INT 0
1260: PPUSH
1261: CALL_OW 49
// ComHold ( i ) ;
1265: LD_VAR 0 2
1269: PPUSH
1270: CALL_OW 140
// end ; if Doug then
1274: LD_EXP 50
1278: IFFALSE 1304
// begin SetSide ( Doug , 4 ) ;
1280: LD_EXP 50
1284: PPUSH
1285: LD_INT 4
1287: PPUSH
1288: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1292: LD_EXP 50
1296: PPUSH
1297: LD_INT 106
1299: PPUSH
1300: CALL_OW 52
// end ; if Aviradze then
1304: LD_EXP 46
1308: IFFALSE 1334
// begin SetSide ( Aviradze , 5 ) ;
1310: LD_EXP 46
1314: PPUSH
1315: LD_INT 5
1317: PPUSH
1318: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1322: LD_EXP 46
1326: PPUSH
1327: LD_INT 119
1329: PPUSH
1330: CALL_OW 52
// end ; if Ibrahim then
1334: LD_EXP 39
1338: IFFALSE 1364
// begin SetSide ( Ibrahim , 5 ) ;
1340: LD_EXP 39
1344: PPUSH
1345: LD_INT 5
1347: PPUSH
1348: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1352: LD_EXP 39
1356: PPUSH
1357: LD_INT 119
1359: PPUSH
1360: CALL_OW 52
// end ; if Jerry then
1364: LD_EXP 51
1368: IFFALSE 1409
// begin SetSide ( Jerry , 4 ) ;
1370: LD_EXP 51
1374: PPUSH
1375: LD_INT 4
1377: PPUSH
1378: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1382: LD_EXP 51
1386: PPUSH
1387: LD_INT 119
1389: PPUSH
1390: LD_INT 59
1392: PPUSH
1393: LD_INT 0
1395: PPUSH
1396: CALL_OW 48
// ComHold ( Jerry ) ;
1400: LD_EXP 51
1404: PPUSH
1405: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1409: LD_EXP 55
1413: PPUSH
1414: LD_INT 119
1416: PPUSH
1417: CALL_OW 52
// for i in americanSquad do
1421: LD_ADDR_VAR 0 2
1425: PUSH
1426: LD_EXP 48
1430: PUSH
1431: FOR_IN
1432: IFFALSE 1460
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1434: LD_VAR 0 2
1438: PPUSH
1439: LD_INT 21
1441: PPUSH
1442: LD_INT 0
1444: PPUSH
1445: CALL_OW 49
// ComHold ( i ) ;
1449: LD_VAR 0 2
1453: PPUSH
1454: CALL_OW 140
// end ;
1458: GO 1431
1460: POP
1461: POP
// for i in heikeSecondSquad do
1462: LD_ADDR_VAR 0 2
1466: PUSH
1467: LD_EXP 47
1471: PUSH
1472: FOR_IN
1473: IFFALSE 1501
// begin PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1475: LD_VAR 0 2
1479: PPUSH
1480: LD_INT 22
1482: PPUSH
1483: LD_INT 0
1485: PPUSH
1486: CALL_OW 49
// ComHold ( i ) ;
1490: LD_VAR 0 2
1494: PPUSH
1495: CALL_OW 140
// end ;
1499: GO 1472
1501: POP
1502: POP
// if not hasVodka then
1503: LD_EXP 4
1507: NOT
1508: IFFALSE 1567
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1510: LD_ADDR_VAR 0 2
1514: PUSH
1515: LD_INT 2
1517: PUSH
1518: LD_INT 22
1520: PUSH
1521: LD_INT 2
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: LD_INT 22
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: LIST
1542: PPUSH
1543: CALL_OW 69
1547: PUSH
1548: FOR_IN
1549: IFFALSE 1565
// SetLives ( i , 500 ) ;
1551: LD_VAR 0 2
1555: PPUSH
1556: LD_INT 500
1558: PPUSH
1559: CALL_OW 234
1563: GO 1548
1565: POP
1566: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_INT 22
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PPUSH
1582: CALL_OW 69
1586: PUSH
1587: FOR_IN
1588: IFFALSE 1604
// SetLives ( i , 500 ) ;
1590: LD_VAR 0 2
1594: PPUSH
1595: LD_INT 500
1597: PPUSH
1598: CALL_OW 234
1602: GO 1587
1604: POP
1605: POP
// end ;
1606: LD_VAR 0 1
1610: RET
// export function SetClassKaiaRevolver ; begin
1611: LD_INT 0
1613: PPUSH
// if IsOk ( Kaia ) then
1614: LD_EXP 41
1618: PPUSH
1619: CALL_OW 302
1623: IFFALSE 1637
// SetClass ( Kaia , class_revolver ) ;
1625: LD_EXP 41
1629: PPUSH
1630: LD_INT 34
1632: PPUSH
1633: CALL_OW 336
// end ;
1637: LD_VAR 0 1
1641: RET
// export function SpawnHeikeAsRussian ; begin
1642: LD_INT 0
1644: PPUSH
// RemoveUnit ( Heike ) ;
1645: LD_EXP 36
1649: PPUSH
1650: CALL_OW 64
// heikeTmp := Heike ;
1654: LD_ADDR_EXP 52
1658: PUSH
1659: LD_EXP 36
1663: ST_TO_ADDR
// uc_side := 2 ;
1664: LD_ADDR_OWVAR 20
1668: PUSH
1669: LD_INT 2
1671: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1672: LD_ADDR_EXP 36
1676: PUSH
1677: LD_STRING HeikeRu
1679: PPUSH
1680: CALL_OW 25
1684: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1685: LD_EXP 52
1689: PPUSH
1690: LD_EXP 36
1694: PPUSH
1695: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1699: LD_EXP 36
1703: PPUSH
1704: LD_INT 165
1706: PPUSH
1707: CALL_OW 52
// heikeAsRussian := true ;
1711: LD_ADDR_EXP 27
1715: PUSH
1716: LD_INT 1
1718: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1719: LD_STRING M1-laundry-out
1721: PPUSH
1722: CALL_OW 604
// end ;
1726: LD_VAR 0 1
1730: RET
// export function SpawnGiviAsRussian ; begin
1731: LD_INT 0
1733: PPUSH
// RemoveUnit ( Givi ) ;
1734: LD_EXP 37
1738: PPUSH
1739: CALL_OW 64
// giviTmp := Givi ;
1743: LD_ADDR_EXP 53
1747: PUSH
1748: LD_EXP 37
1752: ST_TO_ADDR
// uc_side := 2 ;
1753: LD_ADDR_OWVAR 20
1757: PUSH
1758: LD_INT 2
1760: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1761: LD_ADDR_EXP 37
1765: PUSH
1766: LD_STRING GiviRu
1768: PPUSH
1769: CALL_OW 25
1773: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1774: LD_EXP 53
1778: PPUSH
1779: LD_EXP 37
1783: PPUSH
1784: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1788: LD_EXP 37
1792: PPUSH
1793: LD_INT 165
1795: PPUSH
1796: CALL_OW 52
// giviAsRussian := true ;
1800: LD_ADDR_EXP 28
1804: PUSH
1805: LD_INT 1
1807: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1808: LD_STRING M1-laundry-out
1810: PPUSH
1811: CALL_OW 604
// end ; end_of_file
1815: LD_VAR 0 1
1819: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , tmp ; begin
1820: LD_INT 0
1822: PPUSH
1823: PPUSH
1824: PPUSH
1825: PPUSH
// uc_side := 3 ;
1826: LD_ADDR_OWVAR 20
1830: PUSH
1831: LD_INT 3
1833: ST_TO_ADDR
// uc_nation := 3 ;
1834: LD_ADDR_OWVAR 21
1838: PUSH
1839: LD_INT 3
1841: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
1842: LD_INT 192
1844: PPUSH
1845: LD_STRING kitchen
1847: PPUSH
1848: CALL_OW 500
// SetBName ( laundry , laundry ) ;
1852: LD_INT 165
1854: PPUSH
1855: LD_STRING laundry
1857: PPUSH
1858: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
1862: LD_INT 54
1864: PPUSH
1865: LD_STRING adminSection
1867: PPUSH
1868: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
1872: LD_ADDR_VAR 0 2
1876: PUSH
1877: LD_INT 21
1879: PUSH
1880: LD_INT 3
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PPUSH
1887: CALL_OW 69
1891: PUSH
1892: FOR_IN
1893: IFFALSE 1909
// SetBLevel ( i , 7 ) ;
1895: LD_VAR 0 2
1899: PPUSH
1900: LD_INT 7
1902: PPUSH
1903: CALL_OW 241
1907: GO 1892
1909: POP
1910: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1911: LD_ADDR_VAR 0 2
1915: PUSH
1916: LD_INT 22
1918: PUSH
1919: LD_INT 3
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: PUSH
1926: LD_INT 2
1928: PUSH
1929: LD_INT 30
1931: PUSH
1932: LD_INT 0
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: LD_INT 30
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PPUSH
1958: CALL_OW 69
1962: PUSH
1963: FOR_IN
1964: IFFALSE 2028
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
1966: LD_VAR 0 2
1970: PPUSH
1971: CALL_OW 274
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 1000
1981: PPUSH
1982: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
1986: LD_VAR 0 2
1990: PPUSH
1991: CALL_OW 274
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: LD_INT 1000
2001: PPUSH
2002: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2006: LD_VAR 0 2
2010: PPUSH
2011: CALL_OW 274
2015: PPUSH
2016: LD_INT 3
2018: PPUSH
2019: LD_INT 100
2021: PPUSH
2022: CALL_OW 277
// end ;
2026: GO 1963
2028: POP
2029: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_INT 22
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 30
2047: PUSH
2048: LD_INT 32
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 69
2063: PUSH
2064: FOR_IN
2065: IFFALSE 2099
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2067: LD_INT 0
2069: PPUSH
2070: LD_INT 5
2072: PUSH
2073: LD_OWVAR 67
2077: PLUS
2078: PPUSH
2079: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2083: CALL_OW 44
2087: PPUSH
2088: LD_VAR 0 2
2092: PPUSH
2093: CALL_OW 52
// end ;
2097: GO 2064
2099: POP
2100: POP
// for i := 1 to 2 do
2101: LD_ADDR_VAR 0 2
2105: PUSH
2106: DOUBLE
2107: LD_INT 1
2109: DEC
2110: ST_TO_ADDR
2111: LD_INT 2
2113: PUSH
2114: FOR_TO
2115: IFFALSE 2167
// begin PrepareMechanic ( false , 8 ) ;
2117: LD_INT 0
2119: PPUSH
2120: LD_INT 8
2122: PPUSH
2123: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2127: LD_ADDR_EXP 57
2131: PUSH
2132: LD_EXP 57
2136: PPUSH
2137: CALL_OW 44
2141: PPUSH
2142: CALL 63230 0 2
2146: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2147: LD_EXP 57
2151: PUSH
2152: LD_EXP 57
2156: ARRAY
2157: PPUSH
2158: LD_INT 61
2160: PPUSH
2161: CALL_OW 52
// end ;
2165: GO 2114
2167: POP
2168: POP
// PrepareMechanic ( sex_male , 8 ) ;
2169: LD_INT 1
2171: PPUSH
2172: LD_INT 8
2174: PPUSH
2175: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2179: LD_ADDR_EXP 58
2183: PUSH
2184: LD_EXP 58
2188: PPUSH
2189: CALL_OW 44
2193: PPUSH
2194: CALL 63230 0 2
2198: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2199: LD_EXP 58
2203: PUSH
2204: LD_EXP 58
2208: ARRAY
2209: PPUSH
2210: LD_INT 196
2212: PPUSH
2213: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2217: LD_INT 1
2219: PPUSH
2220: LD_INT 8
2222: PPUSH
2223: CALL_OW 383
// hc_name := Stiepan Simonov ;
2227: LD_ADDR_OWVAR 26
2231: PUSH
2232: LD_STRING Stiepan Simonov
2234: ST_TO_ADDR
// Stiopa := CreateHuman ;
2235: LD_ADDR_EXP 59
2239: PUSH
2240: CALL_OW 44
2244: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2245: LD_INT 2
2247: PPUSH
2248: LD_INT 8
2250: PPUSH
2251: CALL_OW 383
// hc_name := Laura Dragunov ;
2255: LD_ADDR_OWVAR 26
2259: PUSH
2260: LD_STRING Laura Dragunov
2262: ST_TO_ADDR
// Laura := CreateHuman ;
2263: LD_ADDR_EXP 60
2267: PUSH
2268: CALL_OW 44
2272: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2273: LD_EXP 60
2277: PPUSH
2278: LD_INT 196
2280: PPUSH
2281: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2285: LD_INT 1
2287: PPUSH
2288: LD_INT 8
2290: PPUSH
2291: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2295: LD_ADDR_EXP 57
2299: PUSH
2300: LD_EXP 57
2304: PPUSH
2305: LD_INT 1
2307: PPUSH
2308: CALL_OW 44
2312: PPUSH
2313: CALL_OW 2
2317: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2318: LD_EXP 57
2322: PUSH
2323: LD_INT 1
2325: ARRAY
2326: PPUSH
2327: LD_INT 61
2329: PPUSH
2330: CALL_OW 52
// PrepareSoldier ( sex_male , 8 ) ;
2334: LD_INT 1
2336: PPUSH
2337: LD_INT 8
2339: PPUSH
2340: CALL_OW 381
// hc_name := Pavel Muchin ;
2344: LD_ADDR_OWVAR 26
2348: PUSH
2349: LD_STRING Pavel Muchin
2351: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
2352: LD_ADDR_OWVAR 29
2356: PUSH
2357: LD_INT 12
2359: PUSH
2360: LD_INT 12
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2367: LD_ADDR_EXP 56
2371: PUSH
2372: CALL_OW 44
2376: ST_TO_ADDR
// InitHC_All ( ) ;
2377: CALL_OW 584
// uc_side := 6 ;
2381: LD_ADDR_OWVAR 20
2385: PUSH
2386: LD_INT 6
2388: ST_TO_ADDR
// uc_nation := 3 ;
2389: LD_ADDR_OWVAR 21
2393: PUSH
2394: LD_INT 3
2396: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2397: LD_ADDR_VAR 0 4
2401: PUSH
2402: LD_INT 14
2404: PUSH
2405: LD_INT 15
2407: PUSH
2408: LD_INT 48
2410: PUSH
2411: LD_INT 24
2413: PUSH
2414: LD_INT 149
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: ST_TO_ADDR
// for i in tmp do
2424: LD_ADDR_VAR 0 2
2428: PUSH
2429: LD_VAR 0 4
2433: PUSH
2434: FOR_IN
2435: IFFALSE 2483
// begin for j := 1 to 2 do
2437: LD_ADDR_VAR 0 3
2441: PUSH
2442: DOUBLE
2443: LD_INT 1
2445: DEC
2446: ST_TO_ADDR
2447: LD_INT 2
2449: PUSH
2450: FOR_TO
2451: IFFALSE 2479
// begin PrepareSoldier ( false , 7 ) ;
2453: LD_INT 0
2455: PPUSH
2456: LD_INT 7
2458: PPUSH
2459: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2463: CALL_OW 44
2467: PPUSH
2468: LD_VAR 0 2
2472: PPUSH
2473: CALL_OW 52
// end ;
2477: GO 2450
2479: POP
2480: POP
// end ;
2481: GO 2434
2483: POP
2484: POP
// end ;
2485: LD_VAR 0 1
2489: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
2495: PPUSH
// uc_side := 3 ;
2496: LD_ADDR_OWVAR 20
2500: PUSH
2501: LD_INT 3
2503: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2504: LD_ADDR_OWVAR 21
2508: PUSH
2509: LD_INT 1
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: CALL_OW 12
2519: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2520: LD_ADDR_VAR 0 4
2524: PUSH
2525: LD_INT 5
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 517
2535: ST_TO_ADDR
// for i := 1 to 3 do
2536: LD_ADDR_VAR 0 2
2540: PUSH
2541: DOUBLE
2542: LD_INT 1
2544: DEC
2545: ST_TO_ADDR
2546: LD_INT 3
2548: PUSH
2549: FOR_TO
2550: IFFALSE 2619
// begin PrepareHuman ( false , 33 , 0 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 33
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: CALL_OW 380
// un := CreateHuman ;
2565: LD_ADDR_VAR 0 3
2569: PUSH
2570: CALL_OW 44
2574: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2575: LD_VAR 0 3
2579: PPUSH
2580: LD_VAR 0 4
2584: PUSH
2585: LD_INT 1
2587: ARRAY
2588: PUSH
2589: LD_VAR 0 2
2593: ARRAY
2594: PPUSH
2595: LD_VAR 0 4
2599: PUSH
2600: LD_INT 2
2602: ARRAY
2603: PUSH
2604: LD_VAR 0 2
2608: ARRAY
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: CALL_OW 601
// end ;
2617: GO 2549
2619: POP
2620: POP
// end ;
2621: LD_VAR 0 1
2625: RET
// export function PrepareFirstScene ; var i , un ; begin
2626: LD_INT 0
2628: PPUSH
2629: PPUSH
2630: PPUSH
// uc_side := 4 ;
2631: LD_ADDR_OWVAR 20
2635: PUSH
2636: LD_INT 4
2638: ST_TO_ADDR
// uc_nation := 1 ;
2639: LD_ADDR_OWVAR 21
2643: PUSH
2644: LD_INT 1
2646: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 33
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 380
// for i := 1 to 2 do
2660: LD_ADDR_VAR 0 2
2664: PUSH
2665: DOUBLE
2666: LD_INT 1
2668: DEC
2669: ST_TO_ADDR
2670: LD_INT 2
2672: PUSH
2673: FOR_TO
2674: IFFALSE 2739
// begin un := CreateHuman ;
2676: LD_ADDR_VAR 0 3
2680: PUSH
2681: CALL_OW 44
2685: ST_TO_ADDR
// SetDir ( un , 1 ) ;
2686: LD_VAR 0 3
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
2698: LD_VAR 0 3
2702: PPUSH
2703: LD_INT 6
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
2713: LD_VAR 0 3
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: CALL 66382 0 2
// SetLives ( un , 300 ) ;
2725: LD_VAR 0 3
2729: PPUSH
2730: LD_INT 300
2732: PPUSH
2733: CALL_OW 234
// end ;
2737: GO 2673
2739: POP
2740: POP
// uc_side := 3 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// uc_nation := 3 ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_INT 3
2756: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
2757: LD_INT 1
2759: PPUSH
2760: LD_INT 5
2762: PPUSH
2763: CALL_OW 381
// for i := 1 to 3 do
2767: LD_ADDR_VAR 0 2
2771: PUSH
2772: DOUBLE
2773: LD_INT 1
2775: DEC
2776: ST_TO_ADDR
2777: LD_INT 3
2779: PUSH
2780: FOR_TO
2781: IFFALSE 2854
// begin un := CreateHuman ;
2783: LD_ADDR_VAR 0 3
2787: PUSH
2788: CALL_OW 44
2792: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
2793: LD_ADDR_EXP 54
2797: PUSH
2798: LD_EXP 54
2802: PPUSH
2803: LD_VAR 0 3
2807: PPUSH
2808: CALL 63230 0 2
2812: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2813: LD_VAR 0 3
2817: PPUSH
2818: LD_INT 4
2820: PPUSH
2821: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
2825: LD_VAR 0 3
2829: PPUSH
2830: LD_INT 7
2832: PPUSH
2833: LD_INT 0
2835: PPUSH
2836: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
2840: LD_VAR 0 3
2844: PPUSH
2845: LD_INT 4
2847: PPUSH
2848: CALL 66382 0 2
// end ;
2852: GO 2780
2854: POP
2855: POP
// ruCommisar := CreateHuman ;
2856: LD_ADDR_EXP 55
2860: PUSH
2861: CALL_OW 44
2865: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
2866: LD_EXP 55
2870: PPUSH
2871: LD_INT 124
2873: PPUSH
2874: LD_INT 37
2876: PPUSH
2877: LD_INT 0
2879: PPUSH
2880: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
2884: LD_EXP 55
2888: PPUSH
2889: LD_INT 3
2891: PPUSH
2892: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
2896: LD_EXP 55
2900: PPUSH
2901: LD_INT 3
2903: PPUSH
2904: CALL 66382 0 2
// end ;
2908: LD_VAR 0 1
2912: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
2913: LD_INT 0
2915: PPUSH
2916: PPUSH
2917: PPUSH
2918: PPUSH
// uc_side := 6 ;
2919: LD_ADDR_OWVAR 20
2923: PUSH
2924: LD_INT 6
2926: ST_TO_ADDR
// uc_nation := 3 ;
2927: LD_ADDR_OWVAR 21
2931: PUSH
2932: LD_INT 3
2934: ST_TO_ADDR
// ruPatrol := [ ] ;
2935: LD_ADDR_EXP 61
2939: PUSH
2940: EMPTY
2941: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
2942: LD_ADDR_VAR 0 4
2946: PUSH
2947: LD_INT 26
2949: PUSH
2950: LD_INT 30
2952: PUSH
2953: LD_INT 39
2955: PUSH
2956: LD_INT 43
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: ST_TO_ADDR
// for i := 1 to spawn do
2965: LD_ADDR_VAR 0 2
2969: PUSH
2970: DOUBLE
2971: LD_INT 1
2973: DEC
2974: ST_TO_ADDR
2975: LD_VAR 0 4
2979: PUSH
2980: FOR_TO
2981: IFFALSE 3092
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
2983: LD_INT 0
2985: PPUSH
2986: LD_INT 4
2988: PUSH
2989: LD_INT 5
2991: PUSH
2992: LD_INT 6
2994: PUSH
2995: LD_INT 7
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: PUSH
3004: LD_OWVAR 67
3008: ARRAY
3009: PPUSH
3010: CALL_OW 381
// un := CreateHuman ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: CALL_OW 44
3023: ST_TO_ADDR
// SetTag ( un , i ) ;
3024: LD_VAR 0 3
3028: PPUSH
3029: LD_VAR 0 2
3033: PPUSH
3034: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3038: LD_ADDR_EXP 61
3042: PUSH
3043: LD_EXP 61
3047: PPUSH
3048: LD_VAR 0 3
3052: PPUSH
3053: CALL 63230 0 2
3057: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3058: LD_VAR 0 3
3062: PPUSH
3063: LD_VAR 0 4
3067: PUSH
3068: LD_VAR 0 2
3072: ARRAY
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 49
// ComHold ( un ) ;
3081: LD_VAR 0 3
3085: PPUSH
3086: CALL_OW 140
// end ;
3090: GO 2980
3092: POP
3093: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3094: LD_ADDR_VAR 0 4
3098: PUSH
3099: LD_INT 48
3101: PUSH
3102: LD_INT 49
3104: PUSH
3105: LD_INT 50
3107: PUSH
3108: LD_INT 51
3110: PUSH
3111: LD_INT 52
3113: PUSH
3114: LD_INT 53
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: ST_TO_ADDR
// for i := 1 to spawn do
3125: LD_ADDR_VAR 0 2
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_VAR 0 4
3139: PUSH
3140: FOR_TO
3141: IFFALSE 3250
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3143: LD_INT 0
3145: PPUSH
3146: LD_INT 4
3148: PUSH
3149: LD_INT 5
3151: PUSH
3152: LD_INT 6
3154: PUSH
3155: LD_INT 7
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: LIST
3162: LIST
3163: PUSH
3164: LD_OWVAR 67
3168: ARRAY
3169: PPUSH
3170: CALL_OW 381
// un := CreateHuman ;
3174: LD_ADDR_VAR 0 3
3178: PUSH
3179: CALL_OW 44
3183: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3184: LD_VAR 0 3
3188: PPUSH
3189: LD_INT 0
3191: PPUSH
3192: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3196: LD_ADDR_EXP 61
3200: PUSH
3201: LD_EXP 61
3205: PPUSH
3206: LD_VAR 0 3
3210: PPUSH
3211: CALL 63230 0 2
3215: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3216: LD_VAR 0 3
3220: PPUSH
3221: LD_VAR 0 4
3225: PUSH
3226: LD_VAR 0 2
3230: ARRAY
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL_OW 49
// ComHold ( un ) ;
3239: LD_VAR 0 3
3243: PPUSH
3244: CALL_OW 140
// end ;
3248: GO 3140
3250: POP
3251: POP
// end ;
3252: LD_VAR 0 1
3256: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3257: LD_INT 0
3259: PPUSH
3260: PPUSH
3261: PPUSH
3262: PPUSH
// uc_side := 6 ;
3263: LD_ADDR_OWVAR 20
3267: PUSH
3268: LD_INT 6
3270: ST_TO_ADDR
// uc_nation := nation_russian ;
3271: LD_ADDR_OWVAR 21
3275: PUSH
3276: LD_INT 3
3278: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3279: LD_ADDR_VAR 0 4
3283: PUSH
3284: LD_INT 54
3286: PUSH
3287: LD_INT 55
3289: PUSH
3290: LD_INT 56
3292: PUSH
3293: LD_INT 57
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: ST_TO_ADDR
// for i := 1 to spawn do
3302: LD_ADDR_VAR 0 2
3306: PUSH
3307: DOUBLE
3308: LD_INT 1
3310: DEC
3311: ST_TO_ADDR
3312: LD_VAR 0 4
3316: PUSH
3317: FOR_TO
3318: IFFALSE 3427
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3320: LD_INT 0
3322: PPUSH
3323: LD_INT 4
3325: PUSH
3326: LD_INT 5
3328: PUSH
3329: LD_INT 6
3331: PUSH
3332: LD_INT 7
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: PUSH
3341: LD_OWVAR 67
3345: ARRAY
3346: PPUSH
3347: CALL_OW 381
// un := CreateHuman ;
3351: LD_ADDR_VAR 0 3
3355: PUSH
3356: CALL_OW 44
3360: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3361: LD_VAR 0 3
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3373: LD_ADDR_EXP 61
3377: PUSH
3378: LD_EXP 61
3382: PPUSH
3383: LD_VAR 0 3
3387: PPUSH
3388: CALL 63230 0 2
3392: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3393: LD_VAR 0 3
3397: PPUSH
3398: LD_VAR 0 4
3402: PUSH
3403: LD_VAR 0 2
3407: ARRAY
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: CALL_OW 49
// ComHold ( un ) ;
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 140
// end ;
3425: GO 3317
3427: POP
3428: POP
// end ; end_of_file
3429: LD_VAR 0 1
3433: RET
// export function Action ; var speaker , i , tmp ; begin
3434: LD_INT 0
3436: PPUSH
3437: PPUSH
3438: PPUSH
3439: PPUSH
// Video ( true ) ;
3440: LD_INT 1
3442: PPUSH
3443: CALL 63202 0 1
// hasNormalScene := Kaia or Givi ;
3447: LD_ADDR_EXP 5
3451: PUSH
3452: LD_EXP 41
3456: PUSH
3457: LD_EXP 37
3461: OR
3462: ST_TO_ADDR
// if hasNormalScene then
3463: LD_EXP 5
3467: IFFALSE 3702
// begin for i in americanSquad do
3469: LD_ADDR_VAR 0 3
3473: PUSH
3474: LD_EXP 48
3478: PUSH
3479: FOR_IN
3480: IFFALSE 3526
// begin SetClass ( i , 33 ) ;
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_INT 33
3489: PPUSH
3490: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3494: LD_VAR 0 3
3498: PPUSH
3499: LD_INT 78
3501: PPUSH
3502: LD_INT 16
3504: PPUSH
3505: LD_INT 5
3507: PPUSH
3508: LD_INT 0
3510: PPUSH
3511: CALL_OW 50
// ComHold ( i ) ;
3515: LD_VAR 0 3
3519: PPUSH
3520: CALL_OW 140
// end ;
3524: GO 3479
3526: POP
3527: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi ] union heikeSecondSquad ;
3528: LD_ADDR_VAR 0 4
3532: PUSH
3533: LD_EXP 38
3537: PUSH
3538: LD_EXP 39
3542: PUSH
3543: LD_EXP 40
3547: PUSH
3548: LD_EXP 41
3552: PUSH
3553: LD_EXP 42
3557: PUSH
3558: LD_EXP 43
3562: PUSH
3563: LD_EXP 44
3567: PUSH
3568: LD_EXP 45
3572: PUSH
3573: LD_EXP 37
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: PUSH
3589: LD_EXP 47
3593: UNION
3594: ST_TO_ADDR
// SetClass ( Heike , 33 ) ;
3595: LD_EXP 36
3599: PPUSH
3600: LD_INT 33
3602: PPUSH
3603: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3607: LD_EXP 36
3611: PPUSH
3612: LD_INT 117
3614: PPUSH
3615: LD_INT 24
3617: PPUSH
3618: LD_INT 3
3620: PPUSH
3621: LD_INT 0
3623: PPUSH
3624: CALL 65370 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
3628: LD_EXP 36
3632: PPUSH
3633: LD_INT 123
3635: PPUSH
3636: LD_INT 39
3638: PPUSH
3639: CALL_OW 118
// for i in tmp do
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: LD_VAR 0 4
3652: PUSH
3653: FOR_IN
3654: IFFALSE 3700
// begin SetClass ( i , 33 ) ;
3656: LD_VAR 0 3
3660: PPUSH
3661: LD_INT 33
3663: PPUSH
3664: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: LD_INT 3
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
3683: LD_VAR 0 3
3687: PPUSH
3688: LD_INT 113
3690: PPUSH
3691: LD_INT 16
3693: PPUSH
3694: CALL_OW 118
// end ;
3698: GO 3653
3700: POP
3701: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
3702: LD_INT 124
3704: PPUSH
3705: LD_INT 39
3707: PPUSH
3708: CALL_OW 86
// PrepareDeadBodies ;
3712: CALL 2490 0 0
// PrepareFirstScene ;
3716: CALL 2626 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
3720: LD_INT 152
3722: PPUSH
3723: LD_INT 65
3725: PPUSH
3726: LD_INT 2
3728: PPUSH
3729: LD_INT 70
3731: NEG
3732: PPUSH
3733: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
3737: LD_INT 152
3739: PPUSH
3740: LD_INT 65
3742: PPUSH
3743: LD_INT 2
3745: PPUSH
3746: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
3750: LD_INT 122
3752: PPUSH
3753: LD_INT 40
3755: PPUSH
3756: LD_INT 2
3758: PPUSH
3759: LD_INT 8
3761: NEG
3762: PPUSH
3763: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
3767: LD_INT 124
3769: PPUSH
3770: LD_INT 37
3772: PPUSH
3773: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
3777: LD_EXP 55
3781: PPUSH
3782: LD_STRING DRum-Execution-1
3784: PPUSH
3785: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
3789: LD_EXP 55
3793: PPUSH
3794: LD_STRING DRum-Execution-2
3796: PPUSH
3797: CALL_OW 88
// wait ( 0 0$01 ) ;
3801: LD_INT 35
3803: PPUSH
3804: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
3808: LD_EXP 55
3812: PPUSH
3813: LD_STRING DRum-Execution-3
3815: PPUSH
3816: CALL_OW 88
// wait ( 0 0$1 ) ;
3820: LD_INT 35
3822: PPUSH
3823: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
3827: LD_EXP 55
3831: PPUSH
3832: LD_STRING DRum-Execution-4
3834: PPUSH
3835: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
3839: LD_EXP 54
3843: PUSH
3844: LD_INT 1
3846: ARRAY
3847: PPUSH
3848: LD_INT 122
3850: PPUSH
3851: LD_INT 39
3853: PPUSH
3854: CALL_OW 428
3858: PPUSH
3859: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
3863: LD_EXP 54
3867: PUSH
3868: LD_INT 2
3870: ARRAY
3871: PPUSH
3872: LD_INT 123
3874: PPUSH
3875: LD_INT 41
3877: PPUSH
3878: CALL_OW 428
3882: PPUSH
3883: CALL_OW 115
// AddComHold ( russianKillers ) ;
3887: LD_EXP 54
3891: PPUSH
3892: CALL_OW 200
// wait ( 0 0$1 ) ;
3896: LD_INT 35
3898: PPUSH
3899: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
3903: LD_INT 122
3905: PPUSH
3906: LD_INT 40
3908: PPUSH
3909: LD_INT 2
3911: PPUSH
3912: CALL_OW 331
// for i in russianKillers union ruCommisar do
3916: LD_ADDR_VAR 0 3
3920: PUSH
3921: LD_EXP 54
3925: PUSH
3926: LD_EXP 55
3930: UNION
3931: PUSH
3932: FOR_IN
3933: IFFALSE 3946
// RemoveUnit ( i ) ;
3935: LD_VAR 0 3
3939: PPUSH
3940: CALL_OW 64
3944: GO 3932
3946: POP
3947: POP
// if hasNormalScene then
3948: LD_EXP 5
3952: IFFALSE 3960
// ActionNormal else
3954: CALL 3969 0 0
3958: GO 3964
// ActionAdditional ;
3960: CALL 5794 0 0
// end ;
3964: LD_VAR 0 1
3968: RET
// function ActionNormal ; var i , tmp ; begin
3969: LD_INT 0
3971: PPUSH
3972: PPUSH
3973: PPUSH
// CenterNowOnUnits ( Heike ) ;
3974: LD_EXP 36
3978: PPUSH
3979: CALL_OW 87
// wait ( 0 0$1 ) ;
3983: LD_INT 35
3985: PPUSH
3986: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
3990: LD_EXP 36
3994: PPUSH
3995: LD_INT 115
3997: PPUSH
3998: LD_INT 19
4000: PPUSH
4001: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4005: LD_EXP 36
4009: PPUSH
4010: LD_INT 113
4012: PPUSH
4013: LD_INT 16
4015: PPUSH
4016: CALL_OW 178
// wait ( 0 0$2 ) ;
4020: LD_INT 70
4022: PPUSH
4023: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4027: LD_EXP 36
4031: PPUSH
4032: LD_STRING DH-Conspiracy-1
4034: PPUSH
4035: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4039: LD_EXP 41
4043: PPUSH
4044: LD_STRING DK-Conspiracy-2
4046: PPUSH
4047: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4051: LD_EXP 37
4055: PPUSH
4056: LD_STRING DG-Conspiracy-3
4058: PPUSH
4059: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4063: LD_EXP 37
4067: PPUSH
4068: LD_STRING DG-Conspiracy-4
4070: PPUSH
4071: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4075: LD_EXP 36
4079: PPUSH
4080: LD_STRING DH-Conspiracy-5
4082: PPUSH
4083: CALL_OW 88
// if IsOk ( Kamil ) then
4087: LD_EXP 40
4091: PPUSH
4092: CALL_OW 302
4096: IFFALSE 4154
// begin hasVodka := true ;
4098: LD_ADDR_EXP 4
4102: PUSH
4103: LD_INT 1
4105: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4106: LD_EXP 40
4110: PPUSH
4111: LD_STRING DKam-Conspiracy-6
4113: PPUSH
4114: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4118: LD_EXP 40
4122: PPUSH
4123: LD_STRING DKam-Conspiracy-7
4125: PPUSH
4126: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4130: LD_EXP 40
4134: PPUSH
4135: LD_STRING DKam-Conspiracy-8
4137: PPUSH
4138: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4142: LD_EXP 40
4146: PPUSH
4147: LD_STRING DKam-Conspiracy-9
4149: PPUSH
4150: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4154: LD_EXP 42
4158: PPUSH
4159: CALL_OW 302
4163: IFFALSE 4344
// begin americanContact := true ;
4165: LD_ADDR_EXP 10
4169: PUSH
4170: LD_INT 1
4172: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4173: LD_STRING M1-american
4175: PPUSH
4176: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4180: LD_EXP 42
4184: PPUSH
4185: LD_STRING DS-Conspiracy-10
4187: PPUSH
4188: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4192: LD_EXP 43
4196: PPUSH
4197: LD_STRING DM-Conspiracy-11
4199: PPUSH
4200: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4204: LD_EXP 42
4208: PPUSH
4209: LD_STRING DS-Conspiracy-12
4211: PPUSH
4212: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4216: LD_INT 84
4218: PPUSH
4219: LD_INT 19
4221: PPUSH
4222: LD_INT 105
4224: PPUSH
4225: CALL 18383 0 3
// if johnnySaved then
4229: LD_EXP 3
4233: IFFALSE 4273
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4235: LD_EXP 42
4239: PPUSH
4240: LD_STRING DS-Conspiracy-13
4242: PPUSH
4243: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4247: LD_EXP 36
4251: PPUSH
4252: LD_STRING DH-Conspiracy-14
4254: PPUSH
4255: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-15 ) ;
4259: LD_EXP 42
4263: PPUSH
4264: LD_STRING DH-Conspiracy-15
4266: PPUSH
4267: CALL_OW 88
// end else
4271: GO 4309
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4273: LD_EXP 42
4277: PPUSH
4278: LD_STRING DS-Conspiracy-a-13
4280: PPUSH
4281: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4285: LD_EXP 36
4289: PPUSH
4290: LD_STRING DH-Conspiracy-a-14
4292: PPUSH
4293: CALL_OW 88
// Say ( Sophia , DH-Conspiracy-a-15 ) ;
4297: LD_EXP 42
4301: PPUSH
4302: LD_STRING DH-Conspiracy-a-15
4304: PPUSH
4305: CALL_OW 88
// end ; if IsOk ( Givi ) then
4309: LD_EXP 37
4313: PPUSH
4314: CALL_OW 302
4318: IFFALSE 4344
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4320: LD_EXP 37
4324: PPUSH
4325: LD_STRING DG-Conspiracy-a-16
4327: PPUSH
4328: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4332: LD_EXP 36
4336: PPUSH
4337: LD_STRING DH-Conspiracy-a-17
4339: PPUSH
4340: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4344: LD_EXP 36
4348: PPUSH
4349: LD_STRING DH-Conspiracy-16
4351: PPUSH
4352: CALL_OW 88
// if IsOk ( Givi ) then
4356: LD_EXP 37
4360: PPUSH
4361: CALL_OW 302
4365: IFFALSE 4637
// begin hasStimDrugs := true ;
4367: LD_ADDR_EXP 9
4371: PUSH
4372: LD_INT 1
4374: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4375: LD_STRING M1-drugs
4377: PPUSH
4378: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4382: LD_EXP 37
4386: PPUSH
4387: LD_STRING DG-Conspiracy-17
4389: PPUSH
4390: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4394: LD_INT 162
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 235
// ShowPlace ( 184 , 95 , 0 0$3 ) ;
4404: LD_INT 184
4406: PPUSH
4407: LD_INT 95
4409: PPUSH
4410: LD_INT 105
4412: PPUSH
4413: CALL 18383 0 3
// SetSide ( drugsLab , 3 ) ;
4417: LD_INT 162
4419: PPUSH
4420: LD_INT 3
4422: PPUSH
4423: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4427: LD_EXP 37
4431: PPUSH
4432: LD_STRING DG-Conspiracy-18
4434: PPUSH
4435: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4439: LD_EXP 37
4443: PPUSH
4444: LD_STRING DG-Conspiracy-19
4446: PPUSH
4447: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4451: LD_EXP 37
4455: PPUSH
4456: LD_STRING DG-Conspiracy-20
4458: PPUSH
4459: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4463: LD_EXP 36
4467: PPUSH
4468: LD_STRING DH-Conspiracy-21
4470: PPUSH
4471: CALL_OW 88
// if IsOk ( Kaia ) then
4475: LD_EXP 41
4479: PPUSH
4480: CALL_OW 302
4484: IFFALSE 4558
// begin hasExplosions := true ;
4486: LD_ADDR_EXP 6
4490: PUSH
4491: LD_INT 1
4493: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4494: LD_STRING M1-explosive
4496: PPUSH
4497: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4501: LD_EXP 41
4505: PPUSH
4506: LD_STRING DK-Conspiracy-22
4508: PPUSH
4509: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4513: LD_INT 73
4515: PPUSH
4516: LD_INT 2
4518: PPUSH
4519: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4523: LD_INT 170
4525: PPUSH
4526: LD_INT 104
4528: PPUSH
4529: LD_INT 105
4531: PPUSH
4532: CALL 18383 0 3
// SetSide ( barExplosion , 3 ) ;
4536: LD_INT 73
4538: PPUSH
4539: LD_INT 3
4541: PPUSH
4542: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4546: LD_EXP 41
4550: PPUSH
4551: LD_STRING DK-Conspiracy-23
4553: PPUSH
4554: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4558: LD_EXP 44
4562: PPUSH
4563: CALL_OW 302
4567: IFFALSE 4637
// begin hasExplosionsInFactory := true ;
4569: LD_ADDR_EXP 7
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4577: LD_EXP 44
4581: PPUSH
4582: LD_STRING DO-Conspiracy-24
4584: PPUSH
4585: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4589: LD_INT 175
4591: PPUSH
4592: LD_INT 54
4594: PPUSH
4595: LD_INT 70
4597: PPUSH
4598: CALL 18383 0 3
// if IsOk ( Markov ) then
4602: LD_EXP 43
4606: PPUSH
4607: CALL_OW 302
4611: IFFALSE 4637
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4613: LD_EXP 43
4617: PPUSH
4618: LD_STRING DMar-Conspiracy-25
4620: PPUSH
4621: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
4625: LD_EXP 43
4629: PPUSH
4630: LD_STRING DMar-Conspiracy-26
4632: PPUSH
4633: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
4637: LD_EXP 45
4641: PPUSH
4642: CALL_OW 302
4646: PUSH
4647: LD_EXP 41
4651: PPUSH
4652: CALL_OW 302
4656: AND
4657: IFFALSE 5117
// begin hasWeapons := true ;
4659: LD_ADDR_EXP 19
4663: PUSH
4664: LD_INT 1
4666: ST_TO_ADDR
// hasRevolver := true ;
4667: LD_ADDR_EXP 8
4671: PUSH
4672: LD_INT 1
4674: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
4675: LD_STRING M1-weapons
4677: PPUSH
4678: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
4682: LD_EXP 45
4686: PPUSH
4687: LD_STRING DKs-Conspiracy-27
4689: PPUSH
4690: CALL_OW 88
// if IsOk ( Givi ) then
4694: LD_EXP 37
4698: PPUSH
4699: CALL_OW 302
4703: IFFALSE 4719
// Say ( Givi , DG-Conspiracy-28 ) else
4705: LD_EXP 37
4709: PPUSH
4710: LD_STRING DG-Conspiracy-28
4712: PPUSH
4713: CALL_OW 88
4717: GO 4784
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
4719: LD_EXP 47
4723: PPUSH
4724: LD_INT 26
4726: PUSH
4727: LD_INT 1
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PPUSH
4734: CALL_OW 72
4738: PUSH
4739: LD_INT 1
4741: ARRAY
4742: PPUSH
4743: LD_STRING DArm-Conspiracy-a-28
4745: PPUSH
4746: CALL_OW 88
4750: NOT
4751: IFFALSE 4784
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
4753: LD_EXP 47
4757: PPUSH
4758: LD_INT 26
4760: PUSH
4761: LD_INT 2
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 72
4772: PUSH
4773: LD_INT 1
4775: ARRAY
4776: PPUSH
4777: LD_STRING DArf-Conspiracy-a-28
4779: PPUSH
4780: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
4784: LD_EXP 45
4788: PPUSH
4789: LD_STRING DKs-Conspiracy-29
4791: PPUSH
4792: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
4796: LD_INT 192
4798: PPUSH
4799: LD_INT 122
4801: PPUSH
4802: LD_INT 105
4804: PPUSH
4805: CALL 18383 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
4809: LD_EXP 45
4813: PPUSH
4814: LD_STRING DKs-Conspiracy-30
4816: PPUSH
4817: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
4821: LD_EXP 41
4825: PPUSH
4826: LD_STRING DK-Conspiracy-31
4828: PPUSH
4829: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
4833: LD_EXP 43
4837: PPUSH
4838: LD_STRING DMar-Conspiracy-33
4840: PPUSH
4841: CALL_OW 88
4845: NOT
4846: PUSH
4847: LD_EXP 47
4851: AND
4852: IFFALSE 4919
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
4854: LD_EXP 47
4858: PPUSH
4859: LD_INT 26
4861: PUSH
4862: LD_INT 1
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PPUSH
4869: CALL_OW 72
4873: PUSH
4874: LD_INT 1
4876: ARRAY
4877: PPUSH
4878: LD_STRING DArm-Conspiracy-a-34
4880: PPUSH
4881: CALL_OW 88
4885: NOT
4886: IFFALSE 4919
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
4888: LD_EXP 47
4892: PPUSH
4893: LD_INT 26
4895: PUSH
4896: LD_INT 2
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PPUSH
4903: CALL_OW 72
4907: PUSH
4908: LD_INT 1
4910: ARRAY
4911: PPUSH
4912: LD_STRING DArf-Conspiracy-a-34
4914: PPUSH
4915: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
4919: LD_EXP 41
4923: PPUSH
4924: LD_STRING DK-Conspiracy-34
4926: PPUSH
4927: CALL_OW 88
// if IsOk ( Markov ) then
4931: LD_EXP 43
4935: PPUSH
4936: CALL_OW 302
4940: IFFALSE 5025
// begin hasSniperRifle := true ;
4942: LD_ADDR_EXP 11
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
4950: LD_EXP 43
4954: PPUSH
4955: LD_STRING DMar-Conspiracy-35
4957: PPUSH
4958: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
4962: LD_EXP 41
4966: PPUSH
4967: LD_STRING DK-Conspiracy-36
4969: PPUSH
4970: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
4974: LD_EXP 43
4978: PPUSH
4979: LD_STRING DMar-Conspiracy-37
4981: PPUSH
4982: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
4986: LD_EXP 43
4990: PPUSH
4991: LD_STRING DMar-Conspiracy-38
4993: PPUSH
4994: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
4998: LD_INT 137
5000: PPUSH
5001: LD_INT 98
5003: PPUSH
5004: LD_INT 105
5006: PPUSH
5007: CALL 18383 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5011: LD_EXP 43
5015: PPUSH
5016: LD_STRING DMar-Conspiracy-39
5018: PPUSH
5019: CALL_OW 88
// end else
5023: GO 5117
// if heikeSecondSquad then
5025: LD_EXP 47
5029: IFFALSE 5117
// begin hasSniperRifle := true ;
5031: LD_ADDR_EXP 11
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5039: LD_INT 137
5041: PPUSH
5042: LD_INT 98
5044: PPUSH
5045: LD_INT 105
5047: PPUSH
5048: CALL 18383 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5052: LD_EXP 47
5056: PPUSH
5057: LD_INT 26
5059: PUSH
5060: LD_INT 1
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: PPUSH
5067: CALL_OW 72
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PPUSH
5076: LD_STRING DArm-Conspiracy-a-35
5078: PPUSH
5079: CALL_OW 88
5083: NOT
5084: IFFALSE 5117
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5086: LD_EXP 47
5090: PPUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 72
5105: PUSH
5106: LD_INT 1
5108: ARRAY
5109: PPUSH
5110: LD_STRING DArf-Conspiracy-a-35
5112: PPUSH
5113: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5117: LD_EXP 36
5121: PPUSH
5122: LD_STRING DH-Conspiracy-40
5124: PPUSH
5125: CALL_OW 88
// if IsOk ( Mike ) then
5129: LD_EXP 38
5133: PPUSH
5134: CALL_OW 302
5138: IFFALSE 5197
// begin hasScout := true ;
5140: LD_ADDR_EXP 12
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5148: LD_EXP 38
5152: PPUSH
5153: LD_STRING DM-Conspiracy-41
5155: PPUSH
5156: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5160: LD_EXP 38
5164: PPUSH
5165: LD_STRING DM-Conspiracy-42
5167: PPUSH
5168: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5172: LD_INT 73
5174: PPUSH
5175: LD_INT 102
5177: PPUSH
5178: LD_INT 105
5180: PPUSH
5181: CALL 18383 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5185: LD_EXP 38
5189: PPUSH
5190: LD_STRING DM-Conspiracy-43
5192: PPUSH
5193: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5197: LD_EXP 4
5201: PUSH
5202: LD_EXP 41
5206: PPUSH
5207: CALL_OW 302
5211: AND
5212: PUSH
5213: LD_EXP 45
5217: PPUSH
5218: CALL_OW 302
5222: AND
5223: IFFALSE 5269
// begin hasMethanol := true ;
5225: LD_ADDR_EXP 13
5229: PUSH
5230: LD_INT 1
5232: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5233: LD_EXP 41
5237: PPUSH
5238: LD_STRING DK-Conspiracy-44
5240: PPUSH
5241: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5245: LD_EXP 41
5249: PPUSH
5250: LD_STRING DK-Conspiracy-45
5252: PPUSH
5253: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5257: LD_EXP 40
5261: PPUSH
5262: LD_STRING DKam-Conspiracy-46
5264: PPUSH
5265: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5269: LD_EXP 36
5273: PPUSH
5274: LD_STRING DH-Conspiracy-47
5276: PPUSH
5277: CALL_OW 88
// wait ( 0 0$1 ) ;
5281: LD_INT 35
5283: PPUSH
5284: CALL_OW 67
// your_side := 8 ;
5288: LD_ADDR_OWVAR 2
5292: PUSH
5293: LD_INT 8
5295: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 1
5301: PPUSH
5302: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5306: LD_ADDR_VAR 0 2
5310: PUSH
5311: LD_INT 2
5313: PUSH
5314: LD_INT 22
5316: PUSH
5317: LD_INT 2
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: LD_INT 22
5326: PUSH
5327: LD_INT 4
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: PUSH
5339: LD_INT 21
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: EMPTY
5346: LIST
5347: LIST
5348: PUSH
5349: EMPTY
5350: LIST
5351: LIST
5352: PPUSH
5353: CALL_OW 69
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5372
// RemoveUnit ( i ) ;
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL_OW 64
5370: GO 5358
5372: POP
5373: POP
// wait ( 0 0$0.3 ) ;
5374: LD_INT 10
5376: PPUSH
5377: CALL_OW 67
// Query ( StartInfo1 ) ;
5381: LD_STRING StartInfo1
5383: PPUSH
5384: CALL_OW 97
// wait ( 0 0$1 ) ;
5388: LD_INT 35
5390: PPUSH
5391: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5395: LD_STRING colors_night.txt
5397: PPUSH
5398: CALL_OW 544
// Query ( StartInfo2 ) ;
5402: LD_STRING StartInfo2
5404: PPUSH
5405: CALL_OW 97
// PrepareGame ;
5409: CALL 910 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5413: LD_INT 152
5415: PPUSH
5416: LD_INT 65
5418: PPUSH
5419: LD_INT 2
5421: PPUSH
5422: LD_INT 70
5424: NEG
5425: PPUSH
5426: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5430: LD_INT 152
5432: PPUSH
5433: LD_INT 65
5435: PPUSH
5436: LD_INT 2
5438: PPUSH
5439: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5443: LD_INT 133
5445: PPUSH
5446: LD_INT 76
5448: PPUSH
5449: LD_INT 2
5451: PPUSH
5452: LD_INT 6
5454: NEG
5455: PPUSH
5456: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5460: LD_INT 152
5462: PPUSH
5463: LD_INT 65
5465: PPUSH
5466: LD_INT 8
5468: PPUSH
5469: LD_INT 70
5471: NEG
5472: PPUSH
5473: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5477: LD_INT 152
5479: PPUSH
5480: LD_INT 65
5482: PPUSH
5483: LD_INT 8
5485: PPUSH
5486: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5490: LD_INT 133
5492: PPUSH
5493: LD_INT 76
5495: PPUSH
5496: LD_INT 8
5498: PPUSH
5499: LD_INT 6
5501: NEG
5502: PPUSH
5503: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5507: LD_INT 23
5509: PPUSH
5510: CALL_OW 87
// dialogue_skipped := false ;
5514: LD_ADDR_OWVAR 59
5518: PUSH
5519: LD_INT 0
5521: ST_TO_ADDR
// InitRuPatrols ;
5522: CALL 2913 0 0
// Say ( Heike , DH-Escape-1 ) ;
5526: LD_EXP 36
5530: PPUSH
5531: LD_STRING DH-Escape-1
5533: PPUSH
5534: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5538: LD_EXP 36
5542: PPUSH
5543: LD_STRING DH-Escape-2
5545: PPUSH
5546: CALL_OW 88
// if not debug then
5550: LD_EXP 1
5554: NOT
5555: IFFALSE 5561
// StartLockerMinigame ;
5557: CALL 18890 0 0
// wait ( 0 0$1 ) ;
5561: LD_INT 35
5563: PPUSH
5564: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5568: LD_EXP 36
5572: PPUSH
5573: LD_STRING DH-Escape-4
5575: PPUSH
5576: CALL_OW 88
// wait ( 0 0$3 ) ;
5580: LD_INT 105
5582: PPUSH
5583: CALL_OW 67
// your_side := 2 ;
5587: LD_ADDR_OWVAR 2
5591: PUSH
5592: LD_INT 2
5594: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5595: LD_EXP 36
5599: PPUSH
5600: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5604: LD_INT 152
5606: PPUSH
5607: LD_INT 65
5609: PPUSH
5610: LD_INT 2
5612: PPUSH
5613: LD_INT 70
5615: NEG
5616: PPUSH
5617: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5621: LD_INT 152
5623: PPUSH
5624: LD_INT 65
5626: PPUSH
5627: LD_INT 2
5629: PPUSH
5630: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
5634: LD_INT 133
5636: PPUSH
5637: LD_INT 76
5639: PPUSH
5640: LD_INT 8
5642: PPUSH
5643: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
5647: LD_EXP 36
5651: PPUSH
5652: LD_INT 128
5654: PPUSH
5655: LD_INT 64
5657: PPUSH
5658: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5662: LD_INT 35
5664: PPUSH
5665: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
5669: LD_EXP 36
5673: PPUSH
5674: LD_INT 128
5676: PPUSH
5677: LD_INT 64
5679: PPUSH
5680: CALL_OW 307
5684: IFFALSE 5662
// ComHold ( Heike ) ;
5686: LD_EXP 36
5690: PPUSH
5691: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
5695: LD_EXP 36
5699: PPUSH
5700: LD_STRING DH-Start-1
5702: PPUSH
5703: CALL_OW 88
// if not americanContact then
5707: LD_EXP 10
5711: NOT
5712: IFFALSE 5728
// Say ( Heike , DH-Start-c-2 ) else
5714: LD_EXP 36
5718: PPUSH
5719: LD_STRING DH-Start-c-2
5721: PPUSH
5722: CALL_OW 88
5726: GO 5760
// if johnnySaved then
5728: LD_EXP 3
5732: IFFALSE 5748
// Say ( Heike , DH-Start-a-2 ) else
5734: LD_EXP 36
5738: PPUSH
5739: LD_STRING DH-Start-a-2
5741: PPUSH
5742: CALL_OW 88
5746: GO 5760
// Say ( Heike , DH-Start-b-2 ) ;
5748: LD_EXP 36
5752: PPUSH
5753: LD_STRING DH-Start-b-2
5755: PPUSH
5756: CALL_OW 88
// Video ( false ) ;
5760: LD_INT 0
5762: PPUSH
5763: CALL 63202 0 1
// tick := 0 ;
5767: LD_ADDR_OWVAR 1
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
5775: LD_STRING M1
5777: PPUSH
5778: CALL_OW 337
// enable ( gameStartEvent ) ;
5782: LD_INT 2
5784: ENABLE_MARKED
// SaveForQuickRestart ;
5785: CALL_OW 22
// end ;
5789: LD_VAR 0 1
5793: RET
// function ActionAdditional ; var i , un , tmp ; begin
5794: LD_INT 0
5796: PPUSH
5797: PPUSH
5798: PPUSH
5799: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
5800: LD_INT 115
5802: PPUSH
5803: LD_INT 27
5805: PPUSH
5806: LD_INT 2
5808: PPUSH
5809: LD_INT 6
5811: NEG
5812: PPUSH
5813: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
5817: LD_EXP 36
5821: PPUSH
5822: LD_INT 115
5824: PPUSH
5825: LD_INT 27
5827: PPUSH
5828: CALL_OW 428
5832: PPUSH
5833: CALL_OW 52
// SetClass ( Heike , 33 ) ;
5837: LD_EXP 36
5841: PPUSH
5842: LD_INT 33
5844: PPUSH
5845: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
5849: LD_INT 124
5851: PPUSH
5852: LD_INT 39
5854: PPUSH
5855: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
5859: LD_EXP 36
5863: PPUSH
5864: LD_STRING DH-Fail-1
5866: PPUSH
5867: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
5871: LD_INT 3
5873: PPUSH
5874: CALL_OW 427
// ComExit ( Heike ) ;
5878: LD_EXP 36
5882: PPUSH
5883: CALL 63628 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
5887: LD_EXP 36
5891: PPUSH
5892: LD_INT 109
5894: PPUSH
5895: LD_INT 33
5897: PPUSH
5898: CALL_OW 171
// AddComHold ( Heike ) ;
5902: LD_EXP 36
5906: PPUSH
5907: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
5911: LD_INT 115
5913: PPUSH
5914: LD_INT 27
5916: PPUSH
5917: LD_INT 2
5919: PPUSH
5920: CALL_OW 331
// wait ( 0 0$2 ) ;
5924: LD_INT 70
5926: PPUSH
5927: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5931: LD_INT 35
5933: PPUSH
5934: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
5938: LD_EXP 36
5942: PPUSH
5943: LD_INT 109
5945: PPUSH
5946: LD_INT 33
5948: PPUSH
5949: CALL_OW 307
5953: IFFALSE 5931
// Say ( Heike , DH-Fail-2 ) ;
5955: LD_EXP 36
5959: PPUSH
5960: LD_STRING DH-Fail-2
5962: PPUSH
5963: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
5967: LD_EXP 36
5971: PPUSH
5972: LD_INT 111
5974: PPUSH
5975: LD_INT 48
5977: PPUSH
5978: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5982: LD_INT 35
5984: PPUSH
5985: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
5989: LD_EXP 36
5993: PPUSH
5994: LD_INT 111
5996: PPUSH
5997: LD_INT 48
5999: PPUSH
6000: CALL_OW 297
6004: PUSH
6005: LD_INT 4
6007: LESS
6008: IFFALSE 5982
// AddComMoveXY ( Heike , 106 , 72 ) ;
6010: LD_EXP 36
6014: PPUSH
6015: LD_INT 106
6017: PPUSH
6018: LD_INT 72
6020: PPUSH
6021: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6025: LD_EXP 36
6029: PPUSH
6030: LD_INT 103
6032: PPUSH
6033: LD_INT 80
6035: PPUSH
6036: CALL_OW 171
// uc_side := 3 ;
6040: LD_ADDR_OWVAR 20
6044: PUSH
6045: LD_INT 3
6047: ST_TO_ADDR
// uc_nation := 3 ;
6048: LD_ADDR_OWVAR 21
6052: PUSH
6053: LD_INT 3
6055: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6056: LD_INT 1
6058: PPUSH
6059: LD_INT 1
6061: PPUSH
6062: LD_INT 6
6064: PPUSH
6065: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6069: LD_ADDR_OWVAR 29
6073: PUSH
6074: LD_INT 12
6076: PUSH
6077: LD_INT 12
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: ST_TO_ADDR
// un := CreateHuman ;
6084: LD_ADDR_VAR 0 3
6088: PUSH
6089: CALL_OW 44
6093: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6094: LD_VAR 0 3
6098: PPUSH
6099: LD_INT 134
6101: PPUSH
6102: LD_INT 52
6104: PPUSH
6105: LD_INT 4
6107: PPUSH
6108: LD_INT 0
6110: PPUSH
6111: CALL 65370 0 5
// ComTurnUnit ( un , Heike ) ;
6115: LD_VAR 0 3
6119: PPUSH
6120: LD_EXP 36
6124: PPUSH
6125: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6129: LD_VAR 0 3
6133: PPUSH
6134: LD_EXP 36
6138: PPUSH
6139: CALL_OW 112
// Say ( un , DRum-Fail-3 ) ;
6143: LD_VAR 0 3
6147: PPUSH
6148: LD_STRING DRum-Fail-3
6150: PPUSH
6151: CALL_OW 88
// for i := 1 to 3 do
6155: LD_ADDR_VAR 0 2
6159: PUSH
6160: DOUBLE
6161: LD_INT 1
6163: DEC
6164: ST_TO_ADDR
6165: LD_INT 3
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6242
// begin PrepareSoldier ( false , 10 ) ;
6171: LD_INT 0
6173: PPUSH
6174: LD_INT 10
6176: PPUSH
6177: CALL_OW 381
// un := CreateHuman ;
6181: LD_ADDR_VAR 0 3
6185: PUSH
6186: CALL_OW 44
6190: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_VAR 0 4
6200: PPUSH
6201: LD_VAR 0 3
6205: PPUSH
6206: CALL 63230 0 2
6210: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6211: LD_VAR 0 3
6215: PPUSH
6216: LD_INT 8
6218: PPUSH
6219: LD_INT 0
6221: PPUSH
6222: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6226: LD_VAR 0 3
6230: PPUSH
6231: LD_EXP 36
6235: PPUSH
6236: CALL_OW 119
// end ;
6240: GO 6168
6242: POP
6243: POP
// repeat wait ( 0 0$1 ) ;
6244: LD_INT 35
6246: PPUSH
6247: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6251: LD_VAR 0 4
6255: PPUSH
6256: LD_INT 101
6258: PUSH
6259: LD_INT 2
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PPUSH
6266: CALL_OW 72
6270: PUSH
6271: LD_INT 1
6273: GREATER
6274: IFFALSE 6244
// wait ( 0 0$1 ) ;
6276: LD_INT 35
6278: PPUSH
6279: CALL_OW 67
// DialogueOn ;
6283: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6287: LD_EXP 36
6291: PPUSH
6292: LD_STRING DH-Fail-4
6294: PPUSH
6295: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6299: LD_EXP 36
6303: PPUSH
6304: LD_STRING DH-Fail-5
6306: PPUSH
6307: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6311: LD_EXP 36
6315: PPUSH
6316: LD_STRING DH-Fail-6
6318: PPUSH
6319: CALL_OW 88
// DialogueOff ;
6323: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6327: LD_VAR 0 4
6331: PPUSH
6332: LD_EXP 36
6336: PPUSH
6337: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6341: LD_INT 35
6343: PPUSH
6344: CALL_OW 67
// until IsDying ( Heike ) ;
6348: LD_EXP 36
6352: PPUSH
6353: CALL_OW 303
6357: IFFALSE 6341
// KillUnit ( Heike ) ;
6359: LD_EXP 36
6363: PPUSH
6364: CALL_OW 66
// wait ( 0 0$4 ) ;
6368: LD_INT 140
6370: PPUSH
6371: CALL_OW 67
// ResetFog ;
6375: CALL_OW 335
// DialogueOn ;
6379: CALL_OW 6
// dwait ( 0 0$1 ) ;
6383: LD_INT 35
6385: PPUSH
6386: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6390: LD_ADDR_EXP 36
6394: PUSH
6395: LD_STRING Heike
6397: PPUSH
6398: LD_EXP 1
6402: NOT
6403: PPUSH
6404: LD_EXP 2
6408: PPUSH
6409: CALL 25781 0 3
6413: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6414: LD_EXP 36
6418: PPUSH
6419: LD_STRING DH-Fail-7
6421: PPUSH
6422: CALL_OW 89
// DialogueOff ;
6426: CALL_OW 7
// YouLost ( Fail ) ;
6430: LD_STRING Fail
6432: PPUSH
6433: CALL_OW 104
// end ;
6437: LD_VAR 0 1
6441: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6442: LD_INT 2
6444: PPUSH
6445: LD_INT 173
6447: PPUSH
6448: LD_INT 29
6450: PPUSH
6451: CALL_OW 293
6455: PUSH
6456: LD_EXP 36
6460: PPUSH
6461: LD_INT 173
6463: PPUSH
6464: LD_INT 29
6466: PPUSH
6467: CALL_OW 297
6471: PUSH
6472: LD_INT 6
6474: LESS
6475: AND
6476: IFFALSE 6493
6478: GO 6480
6480: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6481: LD_EXP 36
6485: PPUSH
6486: LD_STRING DH-EastRoad
6488: PPUSH
6489: CALL_OW 88
6493: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6494: LD_INT 2
6496: PPUSH
6497: LD_INT 149
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 293
6507: PUSH
6508: LD_EXP 36
6512: PPUSH
6513: LD_INT 149
6515: PPUSH
6516: LD_INT 3
6518: PPUSH
6519: CALL_OW 297
6523: PUSH
6524: LD_INT 6
6526: LESS
6527: AND
6528: IFFALSE 6545
6530: GO 6532
6532: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6533: LD_EXP 36
6537: PPUSH
6538: LD_STRING DH-EastRoad
6540: PPUSH
6541: CALL_OW 88
6545: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6546: LD_INT 2
6548: PPUSH
6549: LD_INT 217
6551: PPUSH
6552: LD_INT 120
6554: PPUSH
6555: CALL_OW 293
6559: PUSH
6560: LD_EXP 36
6564: PPUSH
6565: LD_INT 217
6567: PPUSH
6568: LD_INT 120
6570: PPUSH
6571: CALL_OW 297
6575: PUSH
6576: LD_INT 6
6578: LESS
6579: AND
6580: IFFALSE 6597
6582: GO 6584
6584: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6585: LD_EXP 36
6589: PPUSH
6590: LD_STRING DH-EastEnd
6592: PPUSH
6593: CALL_OW 88
6597: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6598: LD_EXP 36
6602: PPUSH
6603: LD_INT 11
6605: PPUSH
6606: CALL_OW 308
6610: IFFALSE 6648
6612: GO 6614
6614: DISABLE
// begin if not heikeSquad then
6615: LD_EXP 14
6619: NOT
6620: IFFALSE 6636
// Say ( Heike , DH-Hill ) else
6622: LD_EXP 36
6626: PPUSH
6627: LD_STRING DH-Hill
6629: PPUSH
6630: CALL_OW 88
6634: GO 6648
// Say ( Heike , DH-Hill-a ) ;
6636: LD_EXP 36
6640: PPUSH
6641: LD_STRING DH-Hill-a
6643: PPUSH
6644: CALL_OW 88
// end ;
6648: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
6649: LD_EXP 36
6653: PPUSH
6654: LD_INT 12
6656: PPUSH
6657: CALL_OW 308
6661: IFFALSE 6843
6663: GO 6665
6665: DISABLE
6666: LD_INT 0
6668: PPUSH
6669: PPUSH
6670: PPUSH
// begin DialogueOn ;
6671: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
6675: LD_EXP 36
6679: PPUSH
6680: CALL_OW 87
// x := GetX ( Heike ) ;
6684: LD_ADDR_VAR 0 1
6688: PUSH
6689: LD_EXP 36
6693: PPUSH
6694: CALL_OW 250
6698: ST_TO_ADDR
// y := GetY ( Heike ) ;
6699: LD_ADDR_VAR 0 2
6703: PUSH
6704: LD_EXP 36
6708: PPUSH
6709: CALL_OW 251
6713: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
6714: LD_VAR 0 1
6718: PPUSH
6719: LD_VAR 0 2
6723: PPUSH
6724: LD_INT 2
6726: PPUSH
6727: LD_INT 12
6729: NEG
6730: PPUSH
6731: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_VAR 0 2
6744: PPUSH
6745: LD_INT 2
6747: PPUSH
6748: CALL_OW 331
// if FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6752: LD_INT 2
6754: PUSH
6755: LD_INT 30
6757: PUSH
6758: LD_INT 32
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: LD_INT 30
6767: PUSH
6768: LD_INT 33
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: IFFALSE 6796
// v := 3 else
6786: LD_ADDR_VAR 0 3
6790: PUSH
6791: LD_INT 3
6793: ST_TO_ADDR
6794: GO 6804
// v := 2 ;
6796: LD_ADDR_VAR 0 3
6800: PUSH
6801: LD_INT 2
6803: ST_TO_ADDR
// disable ;
6804: DISABLE
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
6805: LD_EXP 36
6809: PPUSH
6810: LD_STRING DH-Outpost-
6812: PUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_VAR 0 3
6820: PPUSH
6821: CALL_OW 12
6825: STR
6826: PPUSH
6827: CALL_OW 88
// DialogueOff ;
6831: CALL_OW 7
// wait ( 0 0$10 ) ;
6835: LD_INT 350
6837: PPUSH
6838: CALL_OW 67
// enable ;
6842: ENABLE
// end ;
6843: PPOPN 3
6845: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
6846: LD_EXP 36
6850: PPUSH
6851: LD_INT 19
6853: PPUSH
6854: CALL_OW 308
6858: PUSH
6859: LD_EXP 22
6863: NOT
6864: AND
6865: PUSH
6866: LD_EXP 30
6870: NOT
6871: AND
6872: IFFALSE 6945
6874: GO 6876
6876: DISABLE
// begin DialogueOn ;
6877: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
6881: LD_INT 152
6883: PPUSH
6884: LD_INT 115
6886: PPUSH
6887: LD_INT 2
6889: PPUSH
6890: LD_INT 16
6892: NEG
6893: PPUSH
6894: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
6898: LD_INT 152
6900: PPUSH
6901: LD_INT 115
6903: PPUSH
6904: LD_INT 2
6906: PPUSH
6907: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
6911: LD_INT 152
6913: PPUSH
6914: LD_INT 115
6916: PPUSH
6917: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
6921: LD_EXP 36
6925: PPUSH
6926: LD_STRING DH-Stealth-1
6928: PPUSH
6929: CALL_OW 88
// DialogueOff ;
6933: CALL_OW 7
// adminAreaDiscovered := true ;
6937: LD_ADDR_EXP 22
6941: PUSH
6942: LD_INT 1
6944: ST_TO_ADDR
// end ;
6945: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
6946: LD_INT 2
6948: PPUSH
6949: LD_EXP 37
6953: PPUSH
6954: CALL_OW 292
6958: PUSH
6959: LD_EXP 36
6963: PPUSH
6964: LD_EXP 37
6968: PPUSH
6969: CALL_OW 296
6973: PUSH
6974: LD_INT 6
6976: LESS
6977: AND
6978: PUSH
6979: LD_EXP 17
6983: NOT
6984: AND
6985: PUSH
6986: LD_EXP 30
6990: NOT
6991: AND
6992: IFFALSE 7098
6994: GO 6996
6996: DISABLE
// begin DialogueOn ;
6997: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7001: LD_EXP 37
7005: PPUSH
7006: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7010: LD_EXP 37
7014: PPUSH
7015: LD_EXP 36
7019: PPUSH
7020: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7024: LD_EXP 36
7028: PPUSH
7029: LD_EXP 37
7033: PPUSH
7034: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7038: LD_EXP 36
7042: PPUSH
7043: LD_STRING DH-Givi-1
7045: PPUSH
7046: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7050: LD_EXP 37
7054: PPUSH
7055: LD_STRING DG-Givi-2
7057: PPUSH
7058: CALL_OW 88
// DialogueOff ;
7062: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7066: LD_EXP 37
7070: PPUSH
7071: LD_INT 2
7073: PPUSH
7074: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7078: LD_ADDR_EXP 14
7082: PUSH
7083: LD_EXP 14
7087: PPUSH
7088: LD_EXP 37
7092: PPUSH
7093: CALL 63230 0 2
7097: ST_TO_ADDR
// end ;
7098: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7099: LD_INT 2
7101: PPUSH
7102: LD_EXP 42
7106: PPUSH
7107: CALL_OW 292
7111: PUSH
7112: LD_EXP 36
7116: PPUSH
7117: LD_EXP 42
7121: PPUSH
7122: CALL_OW 296
7126: PUSH
7127: LD_INT 6
7129: LESS
7130: AND
7131: PUSH
7132: LD_EXP 17
7136: NOT
7137: AND
7138: PUSH
7139: LD_EXP 30
7143: NOT
7144: AND
7145: IFFALSE 7251
7147: GO 7149
7149: DISABLE
// begin DialogueOn ;
7150: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7154: LD_EXP 42
7158: PPUSH
7159: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7163: LD_EXP 42
7167: PPUSH
7168: LD_EXP 36
7172: PPUSH
7173: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7177: LD_EXP 36
7181: PPUSH
7182: LD_EXP 42
7186: PPUSH
7187: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7191: LD_EXP 36
7195: PPUSH
7196: LD_STRING DH-Sophia-1
7198: PPUSH
7199: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7203: LD_EXP 42
7207: PPUSH
7208: LD_STRING DS-Sophia-2
7210: PPUSH
7211: CALL_OW 88
// DialogueOff ;
7215: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7219: LD_EXP 42
7223: PPUSH
7224: LD_INT 2
7226: PPUSH
7227: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7231: LD_ADDR_EXP 14
7235: PUSH
7236: LD_EXP 14
7240: PPUSH
7241: LD_EXP 42
7245: PPUSH
7246: CALL 63230 0 2
7250: ST_TO_ADDR
// end ;
7251: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7252: LD_INT 2
7254: PPUSH
7255: LD_EXP 44
7259: PPUSH
7260: CALL_OW 292
7264: PUSH
7265: LD_EXP 36
7269: PPUSH
7270: LD_EXP 44
7274: PPUSH
7275: CALL_OW 296
7279: PUSH
7280: LD_INT 6
7282: LESS
7283: AND
7284: PUSH
7285: LD_EXP 17
7289: NOT
7290: AND
7291: PUSH
7292: LD_EXP 30
7296: NOT
7297: AND
7298: IFFALSE 7394
7300: GO 7302
7302: DISABLE
// begin DialogueOn ;
7303: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7307: LD_EXP 44
7311: PPUSH
7312: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7316: LD_EXP 36
7320: PPUSH
7321: LD_STRING DH-Olaf-1
7323: PPUSH
7324: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7328: LD_EXP 44
7332: PPUSH
7333: LD_STRING DO-Olaf-2
7335: PPUSH
7336: CALL_OW 88
// if explosionsTakenByRussians then
7340: LD_EXP 21
7344: IFFALSE 7358
// Say ( Olaf , DO-Olaf-a-3 ) ;
7346: LD_EXP 44
7350: PPUSH
7351: LD_STRING DO-Olaf-a-3
7353: PPUSH
7354: CALL_OW 88
// DialogueOff ;
7358: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7362: LD_EXP 44
7366: PPUSH
7367: LD_INT 2
7369: PPUSH
7370: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7374: LD_ADDR_EXP 14
7378: PUSH
7379: LD_EXP 14
7383: PPUSH
7384: LD_EXP 44
7388: PPUSH
7389: CALL 63230 0 2
7393: ST_TO_ADDR
// end ;
7394: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
7395: LD_INT 2
7397: PPUSH
7398: LD_EXP 38
7402: PPUSH
7403: CALL_OW 292
7407: PUSH
7408: LD_EXP 36
7412: PPUSH
7413: LD_EXP 38
7417: PPUSH
7418: CALL_OW 296
7422: PUSH
7423: LD_INT 6
7425: LESS
7426: AND
7427: PUSH
7428: LD_EXP 17
7432: NOT
7433: AND
7434: PUSH
7435: LD_EXP 30
7439: NOT
7440: AND
7441: IFFALSE 7669
7443: GO 7445
7445: DISABLE
7446: LD_INT 0
7448: PPUSH
7449: PPUSH
// begin DialogueOn ;
7450: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
7454: LD_EXP 38
7458: PPUSH
7459: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
7463: LD_ADDR_VAR 0 2
7467: PUSH
7468: LD_INT 18
7470: PPUSH
7471: LD_INT 0
7473: PPUSH
7474: CALL_OW 517
7478: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
7479: LD_ADDR_VAR 0 1
7483: PUSH
7484: DOUBLE
7485: LD_INT 1
7487: DEC
7488: ST_TO_ADDR
7489: LD_VAR 0 2
7493: PUSH
7494: LD_INT 1
7496: ARRAY
7497: PUSH
7498: FOR_TO
7499: IFFALSE 7581
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
7501: LD_VAR 0 2
7505: PUSH
7506: LD_INT 1
7508: ARRAY
7509: PUSH
7510: LD_VAR 0 1
7514: ARRAY
7515: PPUSH
7516: LD_VAR 0 2
7520: PUSH
7521: LD_INT 2
7523: ARRAY
7524: PUSH
7525: LD_VAR 0 1
7529: ARRAY
7530: PPUSH
7531: LD_INT 2
7533: PPUSH
7534: LD_INT 3
7536: NEG
7537: PPUSH
7538: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
7542: LD_VAR 0 2
7546: PUSH
7547: LD_INT 1
7549: ARRAY
7550: PUSH
7551: LD_VAR 0 1
7555: ARRAY
7556: PPUSH
7557: LD_VAR 0 2
7561: PUSH
7562: LD_INT 2
7564: ARRAY
7565: PUSH
7566: LD_VAR 0 1
7570: ARRAY
7571: PPUSH
7572: LD_INT 2
7574: PPUSH
7575: CALL_OW 331
// end ;
7579: GO 7498
7581: POP
7582: POP
// Say ( Mike , DM-Mike-1 ) ;
7583: LD_EXP 38
7587: PPUSH
7588: LD_STRING DM-Mike-1
7590: PPUSH
7591: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
7595: LD_EXP 36
7599: PPUSH
7600: LD_STRING DH-Mike-2
7602: PPUSH
7603: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
7607: LD_INT 78
7609: PPUSH
7610: LD_INT 104
7612: PPUSH
7613: CALL_OW 84
// dwait ( 0 0$1 ) ;
7617: LD_INT 35
7619: PPUSH
7620: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7624: LD_EXP 36
7628: PPUSH
7629: CALL_OW 87
// DialogueOff ;
7633: CALL_OW 7
// SetSide ( Mike , 2 ) ;
7637: LD_EXP 38
7641: PPUSH
7642: LD_INT 2
7644: PPUSH
7645: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
7649: LD_ADDR_EXP 14
7653: PUSH
7654: LD_EXP 14
7658: PPUSH
7659: LD_EXP 38
7663: PPUSH
7664: CALL 63230 0 2
7668: ST_TO_ADDR
// end ;
7669: PPOPN 2
7671: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
7672: LD_EXP 36
7676: PPUSH
7677: LD_EXP 41
7681: PPUSH
7682: CALL_OW 296
7686: PUSH
7687: LD_INT 6
7689: LESS
7690: PUSH
7691: LD_EXP 41
7695: PPUSH
7696: CALL_OW 257
7700: PUSH
7701: LD_INT 33
7703: EQUAL
7704: AND
7705: PUSH
7706: LD_EXP 17
7710: NOT
7711: AND
7712: PUSH
7713: LD_EXP 41
7717: PPUSH
7718: CALL_OW 302
7722: AND
7723: PUSH
7724: LD_EXP 20
7728: AND
7729: PUSH
7730: LD_EXP 41
7734: PUSH
7735: LD_EXP 14
7739: IN
7740: AND
7741: PUSH
7742: LD_EXP 41
7746: PPUSH
7747: CALL_OW 255
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: AND
7756: IFFALSE 7785
7758: GO 7760
7760: DISABLE
// begin DialogueOn ;
7761: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
7765: LD_EXP 36
7769: PPUSH
7770: LD_STRING DH-Kaia-Revolver-2
7772: PPUSH
7773: CALL_OW 88
// SetClassKaiaRevolver ;
7777: CALL 1611 0 0
// DialogueOff ;
7781: CALL_OW 7
// end ;
7785: END
// every 0 0$3 trigger Ibrahim and Aviradze and not [ Ibrahim , Aviradze ] in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
7786: LD_EXP 39
7790: PUSH
7791: LD_EXP 46
7795: AND
7796: PUSH
7797: LD_EXP 39
7801: PUSH
7802: LD_EXP 46
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_EXP 14
7815: IN
7816: NOT
7817: AND
7818: PUSH
7819: LD_EXP 14
7823: PPUSH
7824: LD_INT 22
7826: PUSH
7827: LD_INT 2
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PPUSH
7834: CALL_OW 72
7838: PUSH
7839: LD_INT 5
7841: GREATER
7842: AND
7843: PUSH
7844: LD_EXP 17
7848: NOT
7849: AND
7850: PUSH
7851: LD_EXP 30
7855: NOT
7856: AND
7857: IFFALSE 8572
7859: GO 7861
7861: DISABLE
7862: LD_INT 0
7864: PPUSH
7865: PPUSH
// begin DialogueOn ;
7866: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
7870: LD_ADDR_VAR 0 2
7874: PUSH
7875: LD_EXP 37
7879: PPUSH
7880: CALL_OW 302
7884: PUSH
7885: LD_EXP 37
7889: PUSH
7890: LD_EXP 14
7894: IN
7895: AND
7896: PUSH
7897: LD_EXP 37
7901: PPUSH
7902: CALL_OW 255
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: AND
7911: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
7912: LD_EXP 36
7916: PPUSH
7917: LD_STRING DH-Med-1
7919: PPUSH
7920: CALL_OW 88
// if hasGivi then
7924: LD_VAR 0 2
7928: IFFALSE 7944
// Say ( Givi , DG-Med-2 ) else
7930: LD_EXP 37
7934: PPUSH
7935: LD_STRING DG-Med-2
7937: PPUSH
7938: CALL_OW 88
7942: GO 8048
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
7944: LD_EXP 14
7948: PUSH
7949: LD_EXP 47
7953: ISECT
7954: PPUSH
7955: LD_INT 22
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 26
7967: PUSH
7968: LD_INT 1
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PPUSH
7979: CALL_OW 72
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: LD_STRING DArm-Med-e-2
7990: PPUSH
7991: CALL_OW 88
7995: IFFALSE 8048
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
7997: LD_EXP 14
8001: PUSH
8002: LD_EXP 47
8006: ISECT
8007: PPUSH
8008: LD_INT 22
8010: PUSH
8011: LD_INT 2
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: PUSH
8018: LD_INT 26
8020: PUSH
8021: LD_INT 2
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PPUSH
8032: CALL_OW 72
8036: PUSH
8037: LD_INT 1
8039: ARRAY
8040: PPUSH
8041: LD_STRING DArf-Med-e-2
8043: PPUSH
8044: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8048: LD_INT 154
8050: PPUSH
8051: LD_INT 119
8053: PPUSH
8054: LD_INT 70
8056: PPUSH
8057: CALL 18383 0 3
// Say ( Heike , DH-Med-3 ) ;
8061: LD_EXP 36
8065: PPUSH
8066: LD_STRING DH-Med-3
8068: PPUSH
8069: CALL_OW 88
// if hasGivi then
8073: LD_VAR 0 2
8077: IFFALSE 8093
// Say ( Givi , DG-Med-4 ) else
8079: LD_EXP 37
8083: PPUSH
8084: LD_STRING DG-Med-4
8086: PPUSH
8087: CALL_OW 88
8091: GO 8197
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8093: LD_EXP 14
8097: PUSH
8098: LD_EXP 47
8102: ISECT
8103: PPUSH
8104: LD_INT 22
8106: PUSH
8107: LD_INT 2
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 26
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PPUSH
8128: CALL_OW 72
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: PPUSH
8137: LD_STRING DArm-Med-e-4
8139: PPUSH
8140: CALL_OW 88
8144: IFFALSE 8197
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8146: LD_EXP 14
8150: PUSH
8151: LD_EXP 47
8155: ISECT
8156: PPUSH
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 26
8169: PUSH
8170: LD_INT 2
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 72
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: PPUSH
8190: LD_STRING DArf-Med-e-4
8192: PPUSH
8193: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8197: LD_ADDR_VAR 0 1
8201: PUSH
8202: LD_EXP 41
8206: PPUSH
8207: CALL_OW 302
8211: PUSH
8212: LD_EXP 41
8216: PUSH
8217: LD_EXP 14
8221: IN
8222: AND
8223: PUSH
8224: LD_EXP 41
8228: PPUSH
8229: CALL_OW 255
8233: PUSH
8234: LD_INT 2
8236: EQUAL
8237: AND
8238: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8239: LD_EXP 38
8243: PPUSH
8244: CALL_OW 302
8248: PUSH
8249: LD_EXP 38
8253: PUSH
8254: LD_EXP 14
8258: IN
8259: AND
8260: PUSH
8261: LD_EXP 41
8265: PPUSH
8266: CALL_OW 255
8270: PUSH
8271: LD_INT 2
8273: EQUAL
8274: AND
8275: IFFALSE 8307
// begin Say ( Mike , DM-Med-5 ) ;
8277: LD_EXP 38
8281: PPUSH
8282: LD_STRING DM-Med-5
8284: PPUSH
8285: CALL_OW 88
// if hasKaia then
8289: LD_VAR 0 1
8293: IFFALSE 8307
// Say ( Kaia , DK-Med-6 ) ;
8295: LD_EXP 41
8299: PPUSH
8300: LD_STRING DK-Med-6
8302: PPUSH
8303: CALL_OW 88
// end ; if hasKaia then
8307: LD_VAR 0 1
8311: IFFALSE 8560
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8313: LD_INT 175
8315: PPUSH
8316: LD_INT 123
8318: PPUSH
8319: LD_INT 2
8321: PPUSH
8322: LD_INT 8
8324: NEG
8325: PPUSH
8326: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8330: LD_INT 175
8332: PPUSH
8333: LD_INT 123
8335: PPUSH
8336: LD_INT 2
8338: PPUSH
8339: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8343: LD_INT 175
8345: PPUSH
8346: LD_INT 123
8348: PPUSH
8349: CALL_OW 86
// laundryAllowed := true ;
8353: LD_ADDR_EXP 26
8357: PUSH
8358: LD_INT 1
8360: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
8361: LD_EXP 41
8365: PPUSH
8366: LD_STRING DK-Med-7
8368: PPUSH
8369: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8373: LD_EXP 41
8377: PPUSH
8378: LD_STRING DK-Med-8
8380: PPUSH
8381: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
8385: LD_EXP 43
8389: PPUSH
8390: CALL_OW 302
8394: PUSH
8395: LD_EXP 43
8399: PUSH
8400: LD_EXP 14
8404: IN
8405: AND
8406: PUSH
8407: LD_EXP 43
8411: PPUSH
8412: CALL_OW 255
8416: PUSH
8417: LD_INT 2
8419: EQUAL
8420: AND
8421: IFFALSE 8479
// begin Say ( Markov , DMar-Med-9 ) ;
8423: LD_EXP 43
8427: PPUSH
8428: LD_STRING DMar-Med-9
8430: PPUSH
8431: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
8435: LD_EXP 41
8439: PPUSH
8440: LD_STRING DK-Med-10
8442: PPUSH
8443: CALL_OW 88
// if hasGivi then
8447: LD_VAR 0 2
8451: IFFALSE 8467
// Say ( Kaia , DK-Med-11 ) else
8453: LD_EXP 41
8457: PPUSH
8458: LD_STRING DK-Med-11
8460: PPUSH
8461: CALL_OW 88
8465: GO 8479
// Say ( Kaia , DK-Med-a-11 ) ;
8467: LD_EXP 41
8471: PPUSH
8472: LD_STRING DK-Med-a-11
8474: PPUSH
8475: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
8479: LD_EXP 40
8483: PPUSH
8484: CALL_OW 302
8488: PUSH
8489: LD_EXP 40
8493: PUSH
8494: LD_EXP 14
8498: IN
8499: AND
8500: PUSH
8501: LD_EXP 40
8505: PPUSH
8506: CALL_OW 255
8510: PUSH
8511: LD_INT 2
8513: EQUAL
8514: AND
8515: IFFALSE 8560
// begin Say ( Kamil , DKam-Med-12 ) ;
8517: LD_EXP 40
8521: PPUSH
8522: LD_STRING DKam-Med-12
8524: PPUSH
8525: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
8529: LD_EXP 40
8533: PPUSH
8534: LD_STRING DKam-Med-13
8536: PPUSH
8537: CALL_OW 88
// if not hasExplosionCollected then
8541: LD_EXP 23
8545: NOT
8546: IFFALSE 8560
// Say ( Heike , DH-Med-d-14 ) ;
8548: LD_EXP 36
8552: PPUSH
8553: LD_STRING DH-Med-d-14
8555: PPUSH
8556: CALL_OW 88
// end ; end ; DialogueOff ;
8560: CALL_OW 7
// adminAreaDiscovered := true ;
8564: LD_ADDR_EXP 22
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// end ;
8572: PPOPN 2
8574: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
8575: LD_EXP 39
8579: NOT
8580: PUSH
8581: LD_EXP 46
8585: AND
8586: PUSH
8587: LD_EXP 46
8591: PUSH
8592: LD_EXP 14
8596: IN
8597: NOT
8598: AND
8599: PUSH
8600: LD_EXP 14
8604: PPUSH
8605: LD_INT 22
8607: PUSH
8608: LD_INT 2
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 72
8619: PUSH
8620: LD_INT 4
8622: GREATER
8623: AND
8624: PUSH
8625: LD_EXP 17
8629: NOT
8630: AND
8631: PUSH
8632: LD_EXP 30
8636: NOT
8637: AND
8638: IFFALSE 9353
8640: GO 8642
8642: DISABLE
8643: LD_INT 0
8645: PPUSH
8646: PPUSH
// begin DialogueOn ;
8647: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8651: LD_ADDR_VAR 0 1
8655: PUSH
8656: LD_EXP 37
8660: PPUSH
8661: CALL_OW 302
8665: PUSH
8666: LD_EXP 37
8670: PUSH
8671: LD_EXP 14
8675: IN
8676: AND
8677: PUSH
8678: LD_EXP 37
8682: PPUSH
8683: CALL_OW 255
8687: PUSH
8688: LD_INT 2
8690: EQUAL
8691: AND
8692: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
8693: LD_EXP 36
8697: PPUSH
8698: LD_STRING DH-Med-a-1
8700: PPUSH
8701: CALL_OW 88
// if hasGivi then
8705: LD_VAR 0 1
8709: IFFALSE 8725
// Say ( Givi , DG-Med-a-2 ) else
8711: LD_EXP 37
8715: PPUSH
8716: LD_STRING DG-Med-a-2
8718: PPUSH
8719: CALL_OW 88
8723: GO 8829
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
8725: LD_EXP 14
8729: PUSH
8730: LD_EXP 47
8734: ISECT
8735: PPUSH
8736: LD_INT 22
8738: PUSH
8739: LD_INT 2
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 26
8748: PUSH
8749: LD_INT 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PPUSH
8760: CALL_OW 72
8764: PUSH
8765: LD_INT 1
8767: ARRAY
8768: PPUSH
8769: LD_STRING DArm-Med-f-2
8771: PPUSH
8772: CALL_OW 88
8776: IFFALSE 8829
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
8778: LD_EXP 14
8782: PUSH
8783: LD_EXP 47
8787: ISECT
8788: PPUSH
8789: LD_INT 22
8791: PUSH
8792: LD_INT 2
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 26
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 72
8817: PUSH
8818: LD_INT 1
8820: ARRAY
8821: PPUSH
8822: LD_STRING DArf-Med-f-2
8824: PPUSH
8825: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8829: LD_INT 154
8831: PPUSH
8832: LD_INT 119
8834: PPUSH
8835: LD_INT 70
8837: PPUSH
8838: CALL 18383 0 3
// Say ( Heike , DH-Med-a-3 ) ;
8842: LD_EXP 36
8846: PPUSH
8847: LD_STRING DH-Med-a-3
8849: PPUSH
8850: CALL_OW 88
// if hasGivi then
8854: LD_VAR 0 1
8858: IFFALSE 8874
// Say ( Givi , DG-Med-a-4 ) else
8860: LD_EXP 37
8864: PPUSH
8865: LD_STRING DG-Med-a-4
8867: PPUSH
8868: CALL_OW 88
8872: GO 8978
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
8874: LD_EXP 14
8878: PUSH
8879: LD_EXP 47
8883: ISECT
8884: PPUSH
8885: LD_INT 22
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 26
8897: PUSH
8898: LD_INT 1
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL_OW 72
8913: PUSH
8914: LD_INT 1
8916: ARRAY
8917: PPUSH
8918: LD_STRING DArm-Med-f-4
8920: PPUSH
8921: CALL_OW 88
8925: IFFALSE 8978
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
8927: LD_EXP 14
8931: PUSH
8932: LD_EXP 47
8936: ISECT
8937: PPUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 26
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 72
8966: PUSH
8967: LD_INT 1
8969: ARRAY
8970: PPUSH
8971: LD_STRING DArf-Med-f-4
8973: PPUSH
8974: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_EXP 41
8987: PPUSH
8988: CALL_OW 302
8992: PUSH
8993: LD_EXP 41
8997: PUSH
8998: LD_EXP 14
9002: IN
9003: AND
9004: PUSH
9005: LD_EXP 41
9009: PPUSH
9010: CALL_OW 255
9014: PUSH
9015: LD_INT 2
9017: EQUAL
9018: AND
9019: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9020: LD_EXP 38
9024: PPUSH
9025: CALL_OW 302
9029: PUSH
9030: LD_EXP 38
9034: PUSH
9035: LD_EXP 14
9039: IN
9040: AND
9041: PUSH
9042: LD_EXP 38
9046: PPUSH
9047: CALL_OW 255
9051: PUSH
9052: LD_INT 2
9054: EQUAL
9055: AND
9056: IFFALSE 9088
// begin Say ( Mike , DM-Med-5 ) ;
9058: LD_EXP 38
9062: PPUSH
9063: LD_STRING DM-Med-5
9065: PPUSH
9066: CALL_OW 88
// if hasKaia then
9070: LD_VAR 0 2
9074: IFFALSE 9088
// Say ( Kaia , DK-Med-6 ) ;
9076: LD_EXP 41
9080: PPUSH
9081: LD_STRING DK-Med-6
9083: PPUSH
9084: CALL_OW 88
// end ; if hasKaia then
9088: LD_VAR 0 2
9092: IFFALSE 9341
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9094: LD_INT 175
9096: PPUSH
9097: LD_INT 123
9099: PPUSH
9100: LD_INT 2
9102: PPUSH
9103: LD_INT 8
9105: NEG
9106: PPUSH
9107: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9111: LD_INT 175
9113: PPUSH
9114: LD_INT 123
9116: PPUSH
9117: LD_INT 2
9119: PPUSH
9120: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9124: LD_INT 175
9126: PPUSH
9127: LD_INT 123
9129: PPUSH
9130: CALL_OW 86
// laundryAllowed := true ;
9134: LD_ADDR_EXP 26
9138: PUSH
9139: LD_INT 1
9141: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
9142: LD_EXP 41
9146: PPUSH
9147: LD_STRING DK-Med-7
9149: PPUSH
9150: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9154: LD_EXP 41
9158: PPUSH
9159: LD_STRING DK-Med-8
9161: PPUSH
9162: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9166: LD_EXP 43
9170: PPUSH
9171: CALL_OW 302
9175: PUSH
9176: LD_EXP 43
9180: PUSH
9181: LD_EXP 14
9185: IN
9186: AND
9187: PUSH
9188: LD_EXP 43
9192: PPUSH
9193: CALL_OW 255
9197: PUSH
9198: LD_INT 2
9200: EQUAL
9201: AND
9202: IFFALSE 9260
// begin Say ( Markov , DMar-Med-9 ) ;
9204: LD_EXP 43
9208: PPUSH
9209: LD_STRING DMar-Med-9
9211: PPUSH
9212: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9216: LD_EXP 41
9220: PPUSH
9221: LD_STRING DK-Med-10
9223: PPUSH
9224: CALL_OW 88
// if hasGivi then
9228: LD_VAR 0 1
9232: IFFALSE 9248
// Say ( Kaia , DK-Med-11 ) else
9234: LD_EXP 41
9238: PPUSH
9239: LD_STRING DK-Med-11
9241: PPUSH
9242: CALL_OW 88
9246: GO 9260
// Say ( Kaia , DK-Med-a-11 ) ;
9248: LD_EXP 41
9252: PPUSH
9253: LD_STRING DK-Med-a-11
9255: PPUSH
9256: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9260: LD_EXP 40
9264: PPUSH
9265: CALL_OW 302
9269: PUSH
9270: LD_EXP 40
9274: PUSH
9275: LD_EXP 14
9279: IN
9280: AND
9281: PUSH
9282: LD_EXP 40
9286: PPUSH
9287: CALL_OW 255
9291: PUSH
9292: LD_INT 2
9294: EQUAL
9295: AND
9296: IFFALSE 9341
// begin Say ( Kamil , DKam-Med-12 ) ;
9298: LD_EXP 40
9302: PPUSH
9303: LD_STRING DKam-Med-12
9305: PPUSH
9306: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9310: LD_EXP 40
9314: PPUSH
9315: LD_STRING DKam-Med-13
9317: PPUSH
9318: CALL_OW 88
// if not hasExplosionCollected then
9322: LD_EXP 23
9326: NOT
9327: IFFALSE 9341
// Say ( Heike , DH-Med-d-14 ) ;
9329: LD_EXP 36
9333: PPUSH
9334: LD_STRING DH-Med-d-14
9336: PPUSH
9337: CALL_OW 88
// end ; end ; DialogueOff ;
9341: CALL_OW 7
// adminAreaDiscovered := true ;
9345: LD_ADDR_EXP 22
9349: PUSH
9350: LD_INT 1
9352: ST_TO_ADDR
// end ;
9353: PPOPN 2
9355: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9356: LD_EXP 39
9360: PUSH
9361: LD_EXP 46
9365: NOT
9366: AND
9367: PUSH
9368: LD_EXP 39
9372: PUSH
9373: LD_EXP 14
9377: IN
9378: NOT
9379: AND
9380: PUSH
9381: LD_EXP 14
9385: PPUSH
9386: LD_INT 22
9388: PUSH
9389: LD_INT 2
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PPUSH
9396: CALL_OW 72
9400: PUSH
9401: LD_INT 4
9403: GREATER
9404: AND
9405: PUSH
9406: LD_EXP 17
9410: NOT
9411: AND
9412: PUSH
9413: LD_EXP 30
9417: NOT
9418: AND
9419: IFFALSE 10134
9421: GO 9423
9423: DISABLE
9424: LD_INT 0
9426: PPUSH
9427: PPUSH
// begin DialogueOn ;
9428: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9432: LD_ADDR_VAR 0 1
9436: PUSH
9437: LD_EXP 37
9441: PPUSH
9442: CALL_OW 302
9446: PUSH
9447: LD_EXP 37
9451: PUSH
9452: LD_EXP 14
9456: IN
9457: AND
9458: PUSH
9459: LD_EXP 37
9463: PPUSH
9464: CALL_OW 255
9468: PUSH
9469: LD_INT 2
9471: EQUAL
9472: AND
9473: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
9474: LD_EXP 36
9478: PPUSH
9479: LD_STRING DH-Med-b-1
9481: PPUSH
9482: CALL_OW 88
// if hasGivi then
9486: LD_VAR 0 1
9490: IFFALSE 9506
// Say ( Givi , DG-Med-a-2 ) else
9492: LD_EXP 37
9496: PPUSH
9497: LD_STRING DG-Med-a-2
9499: PPUSH
9500: CALL_OW 88
9504: GO 9610
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9506: LD_EXP 14
9510: PUSH
9511: LD_EXP 47
9515: ISECT
9516: PPUSH
9517: LD_INT 22
9519: PUSH
9520: LD_INT 2
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 26
9529: PUSH
9530: LD_INT 1
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PPUSH
9541: CALL_OW 72
9545: PUSH
9546: LD_INT 1
9548: ARRAY
9549: PPUSH
9550: LD_STRING DArm-Med-f-2
9552: PPUSH
9553: CALL_OW 88
9557: IFFALSE 9610
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9559: LD_EXP 14
9563: PUSH
9564: LD_EXP 47
9568: ISECT
9569: PPUSH
9570: LD_INT 22
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 26
9582: PUSH
9583: LD_INT 2
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: PUSH
9590: EMPTY
9591: LIST
9592: LIST
9593: PPUSH
9594: CALL_OW 72
9598: PUSH
9599: LD_INT 1
9601: ARRAY
9602: PPUSH
9603: LD_STRING DArf-Med-f-2
9605: PPUSH
9606: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9610: LD_INT 154
9612: PPUSH
9613: LD_INT 119
9615: PPUSH
9616: LD_INT 70
9618: PPUSH
9619: CALL 18383 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9623: LD_EXP 36
9627: PPUSH
9628: LD_STRING DH-Med-a-3
9630: PPUSH
9631: CALL_OW 88
// if hasGivi then
9635: LD_VAR 0 1
9639: IFFALSE 9655
// Say ( Givi , DG-Med-a-4 ) else
9641: LD_EXP 37
9645: PPUSH
9646: LD_STRING DG-Med-a-4
9648: PPUSH
9649: CALL_OW 88
9653: GO 9759
// if Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9655: LD_EXP 14
9659: PUSH
9660: LD_EXP 47
9664: ISECT
9665: PPUSH
9666: LD_INT 22
9668: PUSH
9669: LD_INT 2
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PUSH
9676: LD_INT 26
9678: PUSH
9679: LD_INT 1
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 72
9694: PUSH
9695: LD_INT 1
9697: ARRAY
9698: PPUSH
9699: LD_STRING DArm-Med-f-4
9701: PPUSH
9702: CALL_OW 88
9706: IFFALSE 9759
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9708: LD_EXP 14
9712: PUSH
9713: LD_EXP 47
9717: ISECT
9718: PPUSH
9719: LD_INT 22
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 26
9731: PUSH
9732: LD_INT 2
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 72
9747: PUSH
9748: LD_INT 1
9750: ARRAY
9751: PPUSH
9752: LD_STRING DArf-Med-f-4
9754: PPUSH
9755: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9759: LD_ADDR_VAR 0 2
9763: PUSH
9764: LD_EXP 41
9768: PPUSH
9769: CALL_OW 302
9773: PUSH
9774: LD_EXP 41
9778: PUSH
9779: LD_EXP 14
9783: IN
9784: AND
9785: PUSH
9786: LD_EXP 41
9790: PPUSH
9791: CALL_OW 255
9795: PUSH
9796: LD_INT 2
9798: EQUAL
9799: AND
9800: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9801: LD_EXP 38
9805: PPUSH
9806: CALL_OW 302
9810: PUSH
9811: LD_EXP 38
9815: PUSH
9816: LD_EXP 14
9820: IN
9821: AND
9822: PUSH
9823: LD_EXP 38
9827: PPUSH
9828: CALL_OW 255
9832: PUSH
9833: LD_INT 2
9835: EQUAL
9836: AND
9837: IFFALSE 9869
// begin Say ( Mike , DM-Med-5 ) ;
9839: LD_EXP 38
9843: PPUSH
9844: LD_STRING DM-Med-5
9846: PPUSH
9847: CALL_OW 88
// if hasKaia then
9851: LD_VAR 0 2
9855: IFFALSE 9869
// Say ( Kaia , DK-Med-6 ) ;
9857: LD_EXP 41
9861: PPUSH
9862: LD_STRING DK-Med-6
9864: PPUSH
9865: CALL_OW 88
// end ; if hasKaia then
9869: LD_VAR 0 2
9873: IFFALSE 10122
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9875: LD_INT 175
9877: PPUSH
9878: LD_INT 123
9880: PPUSH
9881: LD_INT 2
9883: PPUSH
9884: LD_INT 8
9886: NEG
9887: PPUSH
9888: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9892: LD_INT 175
9894: PPUSH
9895: LD_INT 123
9897: PPUSH
9898: LD_INT 2
9900: PPUSH
9901: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9905: LD_INT 175
9907: PPUSH
9908: LD_INT 123
9910: PPUSH
9911: CALL_OW 86
// laundryAllowed := true ;
9915: LD_ADDR_EXP 26
9919: PUSH
9920: LD_INT 1
9922: ST_TO_ADDR
// Say ( Kaia , DK-Med-7 ) ;
9923: LD_EXP 41
9927: PPUSH
9928: LD_STRING DK-Med-7
9930: PPUSH
9931: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9935: LD_EXP 41
9939: PPUSH
9940: LD_STRING DK-Med-8
9942: PPUSH
9943: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9947: LD_EXP 43
9951: PPUSH
9952: CALL_OW 302
9956: PUSH
9957: LD_EXP 43
9961: PUSH
9962: LD_EXP 14
9966: IN
9967: AND
9968: PUSH
9969: LD_EXP 43
9973: PPUSH
9974: CALL_OW 255
9978: PUSH
9979: LD_INT 2
9981: EQUAL
9982: AND
9983: IFFALSE 10041
// begin Say ( Markov , DMar-Med-9 ) ;
9985: LD_EXP 43
9989: PPUSH
9990: LD_STRING DMar-Med-9
9992: PPUSH
9993: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9997: LD_EXP 41
10001: PPUSH
10002: LD_STRING DK-Med-10
10004: PPUSH
10005: CALL_OW 88
// if hasGivi then
10009: LD_VAR 0 1
10013: IFFALSE 10029
// Say ( Kaia , DK-Med-11 ) else
10015: LD_EXP 41
10019: PPUSH
10020: LD_STRING DK-Med-11
10022: PPUSH
10023: CALL_OW 88
10027: GO 10041
// Say ( Kaia , DK-Med-a-11 ) ;
10029: LD_EXP 41
10033: PPUSH
10034: LD_STRING DK-Med-a-11
10036: PPUSH
10037: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10041: LD_EXP 40
10045: PPUSH
10046: CALL_OW 302
10050: PUSH
10051: LD_EXP 40
10055: PUSH
10056: LD_EXP 14
10060: IN
10061: AND
10062: PUSH
10063: LD_EXP 40
10067: PPUSH
10068: CALL_OW 255
10072: PUSH
10073: LD_INT 2
10075: EQUAL
10076: AND
10077: IFFALSE 10122
// begin Say ( Kamil , DKam-Med-12 ) ;
10079: LD_EXP 40
10083: PPUSH
10084: LD_STRING DKam-Med-12
10086: PPUSH
10087: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10091: LD_EXP 40
10095: PPUSH
10096: LD_STRING DKam-Med-13
10098: PPUSH
10099: CALL_OW 88
// if not hasExplosionCollected then
10103: LD_EXP 23
10107: NOT
10108: IFFALSE 10122
// Say ( Heike , DH-Med-d-14 ) ;
10110: LD_EXP 36
10114: PPUSH
10115: LD_STRING DH-Med-d-14
10117: PPUSH
10118: CALL_OW 88
// end ; end ; DialogueOff ;
10122: CALL_OW 7
// adminAreaDiscovered := true ;
10126: LD_ADDR_EXP 22
10130: PUSH
10131: LD_INT 1
10133: ST_TO_ADDR
// end ;
10134: PPOPN 2
10136: END
// every 0 0$1 trigger laundryAllowed do
10137: LD_EXP 26
10141: IFFALSE 10153
10143: GO 10145
10145: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10146: LD_STRING M1-laundry
10148: PPUSH
10149: CALL_OW 337
10153: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10154: LD_EXP 39
10158: NOT
10159: PUSH
10160: LD_EXP 46
10164: NOT
10165: AND
10166: PUSH
10167: LD_EXP 44
10171: PPUSH
10172: CALL_OW 302
10176: AND
10177: PUSH
10178: LD_EXP 44
10182: PUSH
10183: LD_EXP 14
10187: IN
10188: AND
10189: PUSH
10190: LD_EXP 44
10194: PPUSH
10195: CALL_OW 255
10199: PUSH
10200: LD_INT 2
10202: EQUAL
10203: AND
10204: PUSH
10205: LD_EXP 17
10209: NOT
10210: AND
10211: PUSH
10212: LD_EXP 30
10216: NOT
10217: AND
10218: IFFALSE 10374
10220: GO 10222
10222: DISABLE
// begin DialogueOn ;
10223: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10227: LD_INT 152
10229: PPUSH
10230: LD_INT 115
10232: PPUSH
10233: LD_INT 2
10235: PPUSH
10236: LD_INT 16
10238: NEG
10239: PPUSH
10240: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10244: LD_INT 152
10246: PPUSH
10247: LD_INT 115
10249: PPUSH
10250: LD_INT 2
10252: PPUSH
10253: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10257: LD_INT 152
10259: PPUSH
10260: LD_INT 115
10262: PPUSH
10263: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10267: LD_EXP 44
10271: PPUSH
10272: LD_STRING DO-Med-c-1
10274: PPUSH
10275: CALL_OW 88
// if not hasExplosionCollected then
10279: LD_EXP 23
10283: NOT
10284: IFFALSE 10300
// Say ( Heike , DH-Med-d-14 ) else
10286: LD_EXP 36
10290: PPUSH
10291: LD_STRING DH-Med-d-14
10293: PPUSH
10294: CALL_OW 88
10298: GO 10362
// begin Say ( Heike , DH-Med-c-2 ) ;
10300: LD_EXP 36
10304: PPUSH
10305: LD_STRING DH-Med-c-2
10307: PPUSH
10308: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10312: LD_EXP 41
10316: PPUSH
10317: CALL_OW 302
10321: PUSH
10322: LD_EXP 41
10326: PUSH
10327: LD_EXP 14
10331: IN
10332: AND
10333: PUSH
10334: LD_EXP 41
10338: PPUSH
10339: CALL_OW 255
10343: PUSH
10344: LD_INT 2
10346: EQUAL
10347: AND
10348: IFFALSE 10362
// Say ( Kaia , DK-Med-c-3 ) ;
10350: LD_EXP 41
10354: PPUSH
10355: LD_STRING DK-Med-c-3
10357: PPUSH
10358: CALL_OW 88
// end ; DialogueOff ;
10362: CALL_OW 7
// adminAreaDiscovered := true ;
10366: LD_ADDR_EXP 22
10370: PUSH
10371: LD_INT 1
10373: ST_TO_ADDR
// end ;
10374: END
// every 0 0$1 trigger IsDying ( Kaia ) and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
10375: LD_EXP 41
10379: PPUSH
10380: CALL_OW 303
10384: PUSH
10385: LD_EXP 41
10389: PUSH
10390: LD_EXP 14
10394: IN
10395: AND
10396: PUSH
10397: LD_EXP 17
10401: AND
10402: PUSH
10403: LD_EXP 24
10407: AND
10408: IFFALSE 10537
10410: GO 10412
10412: DISABLE
// begin DialogueOn ;
10413: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10417: LD_EXP 41
10421: PPUSH
10422: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
10426: LD_EXP 41
10430: PPUSH
10431: LD_STRING DK-death-1
10433: PPUSH
10434: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
10438: LD_EXP 36
10442: PPUSH
10443: LD_STRING DH-death-2
10445: PPUSH
10446: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
10450: LD_EXP 41
10454: PPUSH
10455: LD_STRING DK-death-3
10457: PPUSH
10458: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
10462: LD_EXP 41
10466: PPUSH
10467: LD_STRING DK-death-4
10469: PPUSH
10470: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
10474: LD_EXP 41
10478: PPUSH
10479: LD_INT 8
10481: PPUSH
10482: CALL_OW 235
// ComStop ( Kaia ) ;
10486: LD_EXP 41
10490: PPUSH
10491: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
10495: LD_INT 8
10497: PPUSH
10498: LD_INT 2
10500: PPUSH
10501: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
10505: LD_ADDR_EXP 14
10509: PUSH
10510: LD_EXP 14
10514: PUSH
10515: LD_EXP 41
10519: DIFF
10520: ST_TO_ADDR
// DialogueOff ;
10521: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
10525: LD_EXP 38
10529: PPUSH
10530: LD_STRING DM-death-5
10532: PPUSH
10533: CALL_OW 88
// end ;
10537: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10538: LD_EXP 25
10542: NOT
10543: PUSH
10544: LD_EXP 30
10548: NOT
10549: AND
10550: PUSH
10551: LD_EXP 49
10555: PUSH
10556: LD_EXP 14
10560: IN
10561: NOT
10562: AND
10563: PUSH
10564: LD_INT 2
10566: PPUSH
10567: LD_EXP 49
10571: PPUSH
10572: CALL_OW 292
10576: AND
10577: PUSH
10578: LD_EXP 36
10582: PPUSH
10583: LD_EXP 49
10587: PPUSH
10588: CALL_OW 296
10592: PUSH
10593: LD_INT 6
10595: LESS
10596: AND
10597: PUSH
10598: LD_EXP 17
10602: NOT
10603: AND
10604: IFFALSE 10828
10606: GO 10608
10608: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
10609: LD_EXP 49
10613: PPUSH
10614: LD_EXP 36
10618: PPUSH
10619: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
10623: LD_EXP 36
10627: PPUSH
10628: LD_EXP 49
10632: PPUSH
10633: CALL_OW 119
// wait ( 0 0$0.3 ) ;
10637: LD_INT 10
10639: PPUSH
10640: CALL_OW 67
// DialogueOn ;
10644: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
10648: LD_EXP 49
10652: PPUSH
10653: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
10657: LD_EXP 36
10661: PPUSH
10662: LD_STRING DH-Deal-1
10664: PPUSH
10665: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
10669: LD_EXP 49
10673: PPUSH
10674: LD_STRING DJ-Deal-2
10676: PPUSH
10677: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
10681: LD_EXP 36
10685: PPUSH
10686: LD_STRING DH-Deal-3
10688: PPUSH
10689: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
10693: LD_EXP 49
10697: PPUSH
10698: LD_STRING DJ-Deal-4
10700: PPUSH
10701: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
10705: LD_EXP 49
10709: PPUSH
10710: LD_STRING DJ-Deal-5
10712: PPUSH
10713: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
10717: LD_EXP 49
10721: PPUSH
10722: LD_STRING DJ-Deal-6
10724: PPUSH
10725: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
10729: LD_EXP 49
10733: PPUSH
10734: LD_STRING DJ-Deal-7
10736: PPUSH
10737: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
10741: LD_EXP 36
10745: PPUSH
10746: LD_STRING DH-Deal-8
10748: PPUSH
10749: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
10753: LD_EXP 36
10757: PPUSH
10758: LD_STRING DH-Deal-9
10760: PPUSH
10761: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
10765: LD_EXP 49
10769: PPUSH
10770: LD_STRING DJ-Deal-10
10772: PPUSH
10773: CALL_OW 88
// DialogueOff ;
10777: CALL_OW 7
// contactWithAmerican := true ;
10781: LD_ADDR_EXP 25
10785: PUSH
10786: LD_INT 1
10788: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
10789: LD_STRING M1-american-out
10791: PPUSH
10792: CALL_OW 604
// SetSide ( Harris , 2 ) ;
10796: LD_EXP 49
10800: PPUSH
10801: LD_INT 2
10803: PPUSH
10804: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
10808: LD_ADDR_EXP 14
10812: PUSH
10813: LD_EXP 14
10817: PPUSH
10818: LD_EXP 49
10822: PPUSH
10823: CALL 63230 0 2
10827: ST_TO_ADDR
// end ;
10828: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
10829: LD_EXP 25
10833: PUSH
10834: LD_EXP 30
10838: NOT
10839: AND
10840: PUSH
10841: LD_EXP 49
10845: PUSH
10846: LD_EXP 14
10850: IN
10851: NOT
10852: AND
10853: PUSH
10854: LD_INT 2
10856: PPUSH
10857: LD_EXP 49
10861: PPUSH
10862: CALL_OW 292
10866: AND
10867: PUSH
10868: LD_EXP 36
10872: PPUSH
10873: LD_EXP 49
10877: PPUSH
10878: CALL_OW 296
10882: PUSH
10883: LD_INT 6
10885: LESS
10886: AND
10887: PUSH
10888: LD_EXP 17
10892: NOT
10893: AND
10894: IFFALSE 11019
10896: GO 10898
10898: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
10899: LD_EXP 49
10903: PPUSH
10904: LD_EXP 36
10908: PPUSH
10909: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
10913: LD_EXP 36
10917: PPUSH
10918: LD_EXP 49
10922: PPUSH
10923: CALL_OW 119
// wait ( 0 0$0.3 ) ;
10927: LD_INT 10
10929: PPUSH
10930: CALL_OW 67
// DialogueOn ;
10934: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
10938: LD_EXP 49
10942: PPUSH
10943: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
10947: LD_EXP 49
10951: PPUSH
10952: LD_STRING DJ-Escort-1
10954: PPUSH
10955: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
10959: LD_EXP 36
10963: PPUSH
10964: LD_STRING DH-Escort-2
10966: PPUSH
10967: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
10971: LD_EXP 49
10975: PPUSH
10976: LD_STRING DJ-Escort-3
10978: PPUSH
10979: CALL_OW 88
// DialogueOff ;
10983: CALL_OW 7
// SetSide ( Harris , 2 ) ;
10987: LD_EXP 49
10991: PPUSH
10992: LD_INT 2
10994: PPUSH
10995: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
10999: LD_ADDR_EXP 14
11003: PUSH
11004: LD_EXP 14
11008: PPUSH
11009: LD_EXP 49
11013: PPUSH
11014: CALL 63230 0 2
11018: ST_TO_ADDR
// end ;
11019: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11020: LD_EXP 25
11024: PUSH
11025: LD_EXP 30
11029: NOT
11030: AND
11031: PUSH
11032: LD_EXP 48
11036: PUSH
11037: LD_EXP 14
11041: DIFF
11042: PPUSH
11043: LD_INT 22
11045: PUSH
11046: LD_INT 4
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 3
11055: PUSH
11056: LD_INT 120
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 101
11072: PUSH
11073: LD_INT 2
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: PPUSH
11085: CALL_OW 72
11089: AND
11090: PUSH
11091: LD_EXP 17
11095: NOT
11096: AND
11097: IFFALSE 11312
11099: GO 11101
11101: DISABLE
11102: LD_INT 0
11104: PPUSH
// begin enable ;
11105: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11106: LD_ADDR_VAR 0 1
11110: PUSH
11111: LD_EXP 48
11115: PUSH
11116: LD_EXP 14
11120: DIFF
11121: PPUSH
11122: LD_INT 22
11124: PUSH
11125: LD_INT 4
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 91
11134: PUSH
11135: LD_EXP 36
11139: PUSH
11140: LD_INT 6
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 101
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: LIST
11162: PPUSH
11163: CALL_OW 72
11167: PPUSH
11168: LD_EXP 36
11172: PPUSH
11173: CALL_OW 74
11177: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11178: LD_VAR 0 1
11182: PPUSH
11183: LD_EXP 36
11187: PPUSH
11188: CALL_OW 296
11192: PUSH
11193: LD_INT 6
11195: LESS
11196: IFFALSE 11312
// begin DialogueOn ;
11198: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11202: LD_VAR 0 1
11206: PPUSH
11207: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11211: LD_EXP 36
11215: PPUSH
11216: LD_STRING DH-USsol-1
11218: PPUSH
11219: CALL_OW 88
// if GetSex ( un ) = sex_male then
11223: LD_VAR 0 1
11227: PPUSH
11228: CALL_OW 258
11232: PUSH
11233: LD_INT 1
11235: EQUAL
11236: IFFALSE 11252
// Say ( un , DUSM-USsol-2 ) else
11238: LD_VAR 0 1
11242: PPUSH
11243: LD_STRING DUSM-USsol-2
11245: PPUSH
11246: CALL_OW 88
11250: GO 11264
// Say ( un , DUSF-USsol-2 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_STRING DUSF-USsol-2
11259: PPUSH
11260: CALL_OW 88
// DialogueOff ;
11264: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
11268: LD_ADDR_VAR 0 1
11272: PUSH
11273: LD_EXP 14
11277: PPUSH
11278: LD_VAR 0 1
11282: PPUSH
11283: CALL 63230 0 2
11287: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11288: LD_VAR 0 1
11292: PPUSH
11293: LD_INT 1
11295: PPUSH
11296: CALL_OW 109
// SetSide ( un , 2 ) ;
11300: LD_VAR 0 1
11304: PPUSH
11305: LD_INT 2
11307: PPUSH
11308: CALL_OW 235
// end ; end ;
11312: PPOPN 1
11314: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11315: LD_EXP 47
11319: PUSH
11320: LD_EXP 30
11324: NOT
11325: AND
11326: PUSH
11327: LD_EXP 47
11331: PUSH
11332: LD_EXP 14
11336: DIFF
11337: PPUSH
11338: LD_INT 3
11340: PUSH
11341: LD_INT 120
11343: PUSH
11344: LD_INT 1
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 91
11357: PUSH
11358: LD_EXP 36
11362: PUSH
11363: LD_INT 6
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 101
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: PPUSH
11386: CALL_OW 72
11390: AND
11391: PUSH
11392: LD_EXP 17
11396: NOT
11397: AND
11398: IFFALSE 11613
11400: GO 11402
11402: DISABLE
11403: LD_INT 0
11405: PPUSH
// begin enable ;
11406: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11407: LD_ADDR_VAR 0 1
11411: PUSH
11412: LD_EXP 47
11416: PUSH
11417: LD_EXP 14
11421: DIFF
11422: PPUSH
11423: LD_INT 22
11425: PUSH
11426: LD_INT 5
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 91
11435: PUSH
11436: LD_EXP 36
11440: PUSH
11441: LD_INT 6
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 101
11451: PUSH
11452: LD_INT 2
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 72
11468: PPUSH
11469: LD_EXP 36
11473: PPUSH
11474: CALL_OW 74
11478: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11479: LD_VAR 0 1
11483: PPUSH
11484: LD_EXP 36
11488: PPUSH
11489: CALL_OW 296
11493: PUSH
11494: LD_INT 6
11496: LESS
11497: IFFALSE 11613
// begin DialogueOn ;
11499: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11503: LD_VAR 0 1
11507: PPUSH
11508: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11512: LD_EXP 36
11516: PPUSH
11517: LD_STRING DH-USsol-1
11519: PPUSH
11520: CALL_OW 88
// if GetSex ( un ) = sex_male then
11524: LD_VAR 0 1
11528: PPUSH
11529: CALL_OW 258
11533: PUSH
11534: LD_INT 1
11536: EQUAL
11537: IFFALSE 11553
// Say ( un , DArm-USsol-2 ) else
11539: LD_VAR 0 1
11543: PPUSH
11544: LD_STRING DArm-USsol-2
11546: PPUSH
11547: CALL_OW 88
11551: GO 11565
// Say ( un , DArf-USsol-3 ) ;
11553: LD_VAR 0 1
11557: PPUSH
11558: LD_STRING DArf-USsol-3
11560: PPUSH
11561: CALL_OW 88
// DialogueOff ;
11565: CALL_OW 7
// un := Join ( heikeSquad , un ) ;
11569: LD_ADDR_VAR 0 1
11573: PUSH
11574: LD_EXP 14
11578: PPUSH
11579: LD_VAR 0 1
11583: PPUSH
11584: CALL 63230 0 2
11588: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11589: LD_VAR 0 1
11593: PPUSH
11594: LD_INT 1
11596: PPUSH
11597: CALL_OW 109
// SetSide ( un , 2 ) ;
11601: LD_VAR 0 1
11605: PPUSH
11606: LD_INT 2
11608: PPUSH
11609: CALL_OW 235
// end ; end ;
11613: PPOPN 1
11615: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
11616: LD_EXP 48
11620: PPUSH
11621: LD_INT 101
11623: PUSH
11624: LD_INT 2
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: PPUSH
11631: CALL_OW 72
11635: PUSH
11636: LD_EXP 14
11640: PPUSH
11641: LD_INT 22
11643: PUSH
11644: LD_INT 2
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: PPUSH
11651: CALL_OW 72
11655: PUSH
11656: LD_INT 5
11658: GREATER
11659: AND
11660: PUSH
11661: LD_EXP 10
11665: NOT
11666: AND
11667: PUSH
11668: LD_EXP 30
11672: NOT
11673: AND
11674: PUSH
11675: LD_EXP 25
11679: NOT
11680: AND
11681: PUSH
11682: LD_EXP 17
11686: NOT
11687: AND
11688: IFFALSE 11803
11690: GO 11692
11692: DISABLE
11693: LD_INT 0
11695: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
11696: LD_ADDR_VAR 0 1
11700: PUSH
11701: LD_EXP 48
11705: PPUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 4
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 101
11718: PUSH
11719: LD_INT 2
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 72
11734: PUSH
11735: LD_INT 1
11737: ARRAY
11738: ST_TO_ADDR
// DialogueOn ;
11739: CALL_OW 6
// if GetSex ( un ) = sex_male then
11743: LD_VAR 0 1
11747: PPUSH
11748: CALL_OW 258
11752: PUSH
11753: LD_INT 1
11755: EQUAL
11756: IFFALSE 11772
// Say ( un , DUSm-USsol-a-2 ) else
11758: LD_VAR 0 1
11762: PPUSH
11763: LD_STRING DUSm-USsol-a-2
11765: PPUSH
11766: CALL_OW 88
11770: GO 11784
// Say ( un , DUSf-USsol-a-2 ) ;
11772: LD_VAR 0 1
11776: PPUSH
11777: LD_STRING DUSf-USsol-a-2
11779: PPUSH
11780: CALL_OW 88
// DialogueOff ;
11784: CALL_OW 7
// wait ( 0 0$2 ) ;
11788: LD_INT 70
11790: PPUSH
11791: CALL_OW 67
// isAlarm := true ;
11795: LD_ADDR_EXP 17
11799: PUSH
11800: LD_INT 1
11802: ST_TO_ADDR
// end ;
11803: PPOPN 1
11805: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
11806: LD_EXP 17
11810: NOT
11811: PUSH
11812: LD_EXP 37
11816: PPUSH
11817: CALL_OW 302
11821: AND
11822: PUSH
11823: LD_EXP 37
11827: PPUSH
11828: CALL_OW 255
11832: PUSH
11833: LD_INT 2
11835: EQUAL
11836: AND
11837: PUSH
11838: LD_EXP 26
11842: AND
11843: PUSH
11844: LD_EXP 28
11848: NOT
11849: AND
11850: PUSH
11851: LD_EXP 27
11855: NOT
11856: AND
11857: PUSH
11858: LD_EXP 30
11862: NOT
11863: AND
11864: PUSH
11865: LD_EXP 37
11869: PPUSH
11870: LD_INT 165
11872: PPUSH
11873: CALL 18422 0 2
11877: AND
11878: IFFALSE 12010
11880: GO 11882
11882: DISABLE
// begin enable ;
11883: ENABLE
// InGameOn ;
11884: CALL_OW 8
// SetSide ( Givi , 5 ) ;
11888: LD_EXP 37
11892: PPUSH
11893: LD_INT 5
11895: PPUSH
11896: CALL_OW 235
// SetSide ( laundry , 5 ) ;
11900: LD_INT 165
11902: PPUSH
11903: LD_INT 5
11905: PPUSH
11906: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
11910: LD_EXP 37
11914: PPUSH
11915: LD_INT 165
11917: PPUSH
11918: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
11922: LD_INT 35
11924: PPUSH
11925: CALL_OW 67
// until IsInUnit ( Givi ) ;
11929: LD_EXP 37
11933: PPUSH
11934: CALL_OW 310
11938: IFFALSE 11922
// case Query ( HeikeInLaundry ) of 1 :
11940: LD_STRING HeikeInLaundry
11942: PPUSH
11943: CALL_OW 97
11947: PUSH
11948: LD_INT 1
11950: DOUBLE
11951: EQUAL
11952: IFTRUE 11956
11954: GO 11963
11956: POP
// SpawnGiviAsRussian ; 2 :
11957: CALL 1731 0 0
11961: GO 11975
11963: LD_INT 2
11965: DOUBLE
11966: EQUAL
11967: IFTRUE 11971
11969: GO 11974
11971: POP
// ; end ;
11972: GO 11975
11974: POP
// ComExitBuilding ( Givi ) ;
11975: LD_EXP 37
11979: PPUSH
11980: CALL_OW 122
// SetSide ( Givi , 2 ) ;
11984: LD_EXP 37
11988: PPUSH
11989: LD_INT 2
11991: PPUSH
11992: CALL_OW 235
// SetSide ( laundry , 3 ) ;
11996: LD_INT 165
11998: PPUSH
11999: LD_INT 3
12001: PPUSH
12002: CALL_OW 235
// InGameOff ;
12006: CALL_OW 9
// end ;
12010: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12011: LD_EXP 17
12015: NOT
12016: PUSH
12017: LD_EXP 28
12021: AND
12022: PUSH
12023: LD_EXP 37
12027: PPUSH
12028: CALL_OW 255
12032: PUSH
12033: LD_INT 2
12035: EQUAL
12036: AND
12037: PUSH
12038: LD_EXP 37
12042: PPUSH
12043: CALL_OW 248
12047: PUSH
12048: LD_INT 3
12050: EQUAL
12051: AND
12052: PUSH
12053: LD_EXP 37
12057: PPUSH
12058: LD_INT 119
12060: PPUSH
12061: CALL 18422 0 2
12065: AND
12066: PUSH
12067: LD_EXP 30
12071: NOT
12072: AND
12073: IFFALSE 12297
12075: GO 12077
12077: DISABLE
// begin InGameOn ;
12078: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12082: LD_EXP 37
12086: PPUSH
12087: LD_INT 3
12089: PPUSH
12090: CALL_OW 235
// ComEnterUnit ( Givi , ruLab ) ;
12094: LD_EXP 37
12098: PPUSH
12099: LD_INT 119
12101: PPUSH
12102: CALL_OW 120
// wait ( 0 0$1 ) ;
12106: LD_INT 35
12108: PPUSH
12109: CALL_OW 67
// DialogueOn ;
12113: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12117: LD_EXP 37
12121: PPUSH
12122: LD_STRING DG-Captive-1
12124: PPUSH
12125: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12129: LD_EXP 55
12133: PPUSH
12134: LD_STRING DCom-Captive-2
12136: PPUSH
12137: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12141: LD_EXP 37
12145: PPUSH
12146: LD_STRING DG-Captive-3
12148: PPUSH
12149: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12153: LD_EXP 55
12157: PPUSH
12158: LD_STRING DCom-Captive-4
12160: PPUSH
12161: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12165: LD_EXP 55
12169: PPUSH
12170: CALL_OW 64
// DialogueOff ;
12174: CALL_OW 7
// InGameOff ;
12178: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12182: LD_EXP 37
12186: PPUSH
12187: LD_INT 2
12189: PPUSH
12190: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12194: LD_EXP 37
12198: PPUSH
12199: CALL_OW 122
// if Aviradze then
12203: LD_EXP 46
12207: IFFALSE 12250
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12209: LD_ADDR_EXP 14
12213: PUSH
12214: LD_EXP 14
12218: PPUSH
12219: LD_EXP 46
12223: PPUSH
12224: CALL 63230 0 2
12228: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12229: LD_EXP 46
12233: PPUSH
12234: LD_INT 2
12236: PPUSH
12237: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12241: LD_EXP 46
12245: PPUSH
12246: CALL_OW 122
// end ; if Ibrahim then
12250: LD_EXP 39
12254: IFFALSE 12297
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12256: LD_ADDR_EXP 14
12260: PUSH
12261: LD_EXP 14
12265: PPUSH
12266: LD_EXP 39
12270: PPUSH
12271: CALL 63230 0 2
12275: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12276: LD_EXP 39
12280: PPUSH
12281: LD_INT 2
12283: PPUSH
12284: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12288: LD_EXP 39
12292: PPUSH
12293: CALL_OW 122
// end ; end ;
12297: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12298: LD_EXP 17
12302: NOT
12303: PUSH
12304: LD_EXP 27
12308: AND
12309: PUSH
12310: LD_EXP 36
12314: PPUSH
12315: CALL_OW 248
12319: PUSH
12320: LD_INT 3
12322: EQUAL
12323: AND
12324: PUSH
12325: LD_EXP 36
12329: PPUSH
12330: LD_INT 119
12332: PPUSH
12333: CALL 18422 0 2
12337: AND
12338: PUSH
12339: LD_EXP 30
12343: NOT
12344: AND
12345: IFFALSE 12619
12347: GO 12349
12349: DISABLE
// begin InGameOn ;
12350: CALL_OW 8
// SetSide ( Heike , 3 ) ;
12354: LD_EXP 36
12358: PPUSH
12359: LD_INT 3
12361: PPUSH
12362: CALL_OW 235
// ComEnterUnit ( Heike , ruLab ) ;
12366: LD_EXP 36
12370: PPUSH
12371: LD_INT 119
12373: PPUSH
12374: CALL_OW 120
// wait ( 0 0$1 ) ;
12378: LD_INT 35
12380: PPUSH
12381: CALL_OW 67
// DialogueOn ;
12385: CALL_OW 6
// if Aviradze and Ibrahim then
12389: LD_EXP 46
12393: PUSH
12394: LD_EXP 39
12398: AND
12399: IFFALSE 12415
// Say ( Heike , DH-Captive-a-1 ) else
12401: LD_EXP 36
12405: PPUSH
12406: LD_STRING DH-Captive-a-1
12408: PPUSH
12409: CALL_OW 88
12413: GO 12427
// Say ( Heike , DH-Captive-a-b-1 ) ;
12415: LD_EXP 36
12419: PPUSH
12420: LD_STRING DH-Captive-a-b-1
12422: PPUSH
12423: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
12427: LD_EXP 55
12431: PPUSH
12432: LD_STRING DCom-Captive-a-2
12434: PPUSH
12435: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
12439: LD_EXP 36
12443: PPUSH
12444: LD_STRING DH-Captive-a-3
12446: PPUSH
12447: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
12451: LD_EXP 55
12455: PPUSH
12456: LD_STRING DCom-Captive-a-4
12458: PPUSH
12459: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
12463: LD_EXP 36
12467: PPUSH
12468: LD_STRING DH-Captive-a-5
12470: PPUSH
12471: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-6 ) ;
12475: LD_EXP 55
12479: PPUSH
12480: LD_STRING DCom-Captive-a-6
12482: PPUSH
12483: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12487: LD_EXP 55
12491: PPUSH
12492: CALL_OW 64
// DialogueOff ;
12496: CALL_OW 7
// InGameOff ;
12500: CALL_OW 9
// SetSide ( Heike , 2 ) ;
12504: LD_EXP 36
12508: PPUSH
12509: LD_INT 2
12511: PPUSH
12512: CALL_OW 235
// ComExitBuilding ( Heike ) ;
12516: LD_EXP 36
12520: PPUSH
12521: CALL_OW 122
// if Aviradze then
12525: LD_EXP 46
12529: IFFALSE 12572
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12531: LD_ADDR_EXP 14
12535: PUSH
12536: LD_EXP 14
12540: PPUSH
12541: LD_EXP 46
12545: PPUSH
12546: CALL 63230 0 2
12550: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12551: LD_EXP 46
12555: PPUSH
12556: LD_INT 2
12558: PPUSH
12559: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12563: LD_EXP 46
12567: PPUSH
12568: CALL_OW 122
// end ; if Ibrahim then
12572: LD_EXP 39
12576: IFFALSE 12619
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12578: LD_ADDR_EXP 14
12582: PUSH
12583: LD_EXP 14
12587: PPUSH
12588: LD_EXP 39
12592: PPUSH
12593: CALL 63230 0 2
12597: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12598: LD_EXP 39
12602: PPUSH
12603: LD_INT 2
12605: PPUSH
12606: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12610: LD_EXP 39
12614: PPUSH
12615: CALL_OW 122
// end ; end ;
12619: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
12620: LD_INT 2
12622: PUSH
12623: LD_INT 25
12625: PUSH
12626: LD_INT 32
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 25
12635: PUSH
12636: LD_INT 34
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: PPUSH
12648: CALL_OW 69
12652: IFFALSE 12664
12654: GO 12656
12656: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
12657: LD_STRING M1-weapons-out
12659: PPUSH
12660: CALL_OW 604
12664: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not contactWithAmerican do var i , foodDelivered ;
12665: LD_INT 2
12667: PPUSH
12668: LD_EXP 51
12672: PPUSH
12673: CALL_OW 292
12677: PUSH
12678: LD_EXP 36
12682: PPUSH
12683: LD_EXP 51
12687: PPUSH
12688: CALL_OW 296
12692: AND
12693: PUSH
12694: LD_EXP 25
12698: NOT
12699: AND
12700: IFFALSE 13479
12702: GO 12704
12704: DISABLE
12705: LD_INT 0
12707: PPUSH
12708: PPUSH
// begin DialogueOn ;
12709: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
12713: LD_EXP 51
12717: PPUSH
12718: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
12722: LD_EXP 51
12726: PPUSH
12727: LD_STRING DJy-Food-1
12729: PPUSH
12730: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
12734: LD_EXP 36
12738: PPUSH
12739: LD_STRING DH-Food-2
12741: PPUSH
12742: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
12746: LD_EXP 51
12750: PPUSH
12751: LD_STRING DJy-Food-3
12753: PPUSH
12754: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
12758: LD_EXP 51
12762: PPUSH
12763: LD_STRING DJy-Food-4
12765: PPUSH
12766: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
12770: LD_EXP 36
12774: PPUSH
12775: LD_STRING DH-Food-5
12777: PPUSH
12778: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
12782: LD_EXP 51
12786: PPUSH
12787: LD_STRING DJy-Food-6
12789: PPUSH
12790: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
12794: LD_EXP 51
12798: PPUSH
12799: LD_STRING DJy-Food-7
12801: PPUSH
12802: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
12806: LD_EXP 51
12810: PPUSH
12811: LD_STRING DJy-Food-8
12813: PPUSH
12814: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
12818: LD_EXP 36
12822: PPUSH
12823: LD_STRING DH-Food-9
12825: PPUSH
12826: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
12830: LD_EXP 51
12834: PPUSH
12835: LD_STRING DJy-Food-10
12837: PPUSH
12838: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
12842: LD_EXP 36
12846: PPUSH
12847: LD_STRING DH-Food-11
12849: PPUSH
12850: CALL_OW 88
// DialogueOff ;
12854: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
12858: LD_STRING M3
12860: PPUSH
12861: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
12865: LD_INT 5
12867: PPUSH
12868: LD_INT 215
12870: PPUSH
12871: LD_INT 117
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
12881: LD_INT 215
12883: PPUSH
12884: LD_INT 118
12886: PPUSH
12887: LD_INT 2
12889: PPUSH
12890: LD_INT 6
12892: NEG
12893: PPUSH
12894: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
12898: LD_INT 215
12900: PPUSH
12901: LD_INT 118
12903: PPUSH
12904: LD_INT 2
12906: PPUSH
12907: CALL_OW 331
// foodDelivered := false ;
12911: LD_ADDR_VAR 0 2
12915: PUSH
12916: LD_INT 0
12918: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12919: LD_INT 35
12921: PPUSH
12922: CALL_OW 67
// for i in UnitFilter ( heikeSquad union Heike , [ f_class , class_prison ] ) do
12926: LD_ADDR_VAR 0 1
12930: PUSH
12931: LD_EXP 14
12935: PUSH
12936: LD_EXP 36
12940: UNION
12941: PPUSH
12942: LD_INT 25
12944: PUSH
12945: LD_INT 33
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PPUSH
12952: CALL_OW 72
12956: PUSH
12957: FOR_IN
12958: IFFALSE 13208
// if Carry ( i ) then
12960: LD_VAR 0 1
12964: PPUSH
12965: CALL_OW 281
12969: IFFALSE 13206
// begin DialogueOn ;
12971: CALL_OW 6
// foodDelivered := true ;
12975: LD_ADDR_VAR 0 2
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// case i of Heike :
12983: LD_VAR 0 1
12987: PUSH
12988: LD_EXP 36
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13013
12998: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
12999: LD_EXP 36
13003: PPUSH
13004: LD_STRING DH-Food-12
13006: PPUSH
13007: CALL_OW 88
13011: GO 13189
13013: LD_EXP 41
13017: DOUBLE
13018: EQUAL
13019: IFTRUE 13023
13021: GO 13038
13023: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13024: LD_EXP 41
13028: PPUSH
13029: LD_STRING DK-Food-a-12
13031: PPUSH
13032: CALL_OW 88
13036: GO 13189
13038: LD_EXP 43
13042: DOUBLE
13043: EQUAL
13044: IFTRUE 13048
13046: GO 13063
13048: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13049: LD_EXP 43
13053: PPUSH
13054: LD_STRING DMar-Food-a-12
13056: PPUSH
13057: CALL_OW 88
13061: GO 13189
13063: LD_EXP 37
13067: DOUBLE
13068: EQUAL
13069: IFTRUE 13073
13071: GO 13088
13073: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13074: LD_EXP 37
13078: PPUSH
13079: LD_STRING DG-Food-a-14
13081: PPUSH
13082: CALL_OW 88
13086: GO 13189
13088: LD_EXP 38
13092: DOUBLE
13093: EQUAL
13094: IFTRUE 13098
13096: GO 13113
13098: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13099: LD_EXP 38
13103: PPUSH
13104: LD_STRING DM-Food-a-15
13106: PPUSH
13107: CALL_OW 88
13111: GO 13189
13113: LD_EXP 40
13117: DOUBLE
13118: EQUAL
13119: IFTRUE 13123
13121: GO 13138
13123: POP
// Say ( Kamil , DKam-Food-a-16 ) ; Sophia :
13124: LD_EXP 40
13128: PPUSH
13129: LD_STRING DKam-Food-a-16
13131: PPUSH
13132: CALL_OW 88
13136: GO 13189
13138: LD_EXP 42
13142: DOUBLE
13143: EQUAL
13144: IFTRUE 13148
13146: GO 13163
13148: POP
// Say ( Sophia , DS-Food-a-17 ) ; Kurt :
13149: LD_EXP 42
13153: PPUSH
13154: LD_STRING DS-Food-a-17
13156: PPUSH
13157: CALL_OW 88
13161: GO 13189
13163: LD_EXP 45
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 13188
13173: POP
// Say ( Kurt , DKs-Food-a-18 ) ; end ;
13174: LD_EXP 45
13178: PPUSH
13179: LD_STRING DKs-Food-a-18
13181: PPUSH
13182: CALL_OW 88
13186: GO 13189
13188: POP
// SetCargo ( i , mat_cans , 0 ) ;
13189: LD_VAR 0 1
13193: PPUSH
13194: LD_INT 1
13196: PPUSH
13197: LD_INT 0
13199: PPUSH
13200: CALL_OW 290
// break ;
13204: GO 13208
// end ;
13206: GO 12957
13208: POP
13209: POP
// until foodDelivered ;
13210: LD_VAR 0 2
13214: IFFALSE 12919
// givenFood := true ;
13216: LD_ADDR_EXP 33
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
13224: LD_EXP 51
13228: PPUSH
13229: LD_STRING DJy-Food-13
13231: PPUSH
13232: CALL_OW 88
// hasVirus := true ;
13236: LD_ADDR_EXP 31
13240: PUSH
13241: LD_INT 1
13243: ST_TO_ADDR
// if not americanContact then
13244: LD_EXP 10
13248: NOT
13249: IFFALSE 13299
// begin Say ( Heike , DH-Food-14 ) ;
13251: LD_EXP 36
13255: PPUSH
13256: LD_STRING DH-Food-14
13258: PPUSH
13259: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
13263: LD_EXP 51
13267: PPUSH
13268: LD_STRING DJy-Food-15
13270: PPUSH
13271: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
13275: LD_EXP 51
13279: PPUSH
13280: LD_STRING DJy-Food-16
13282: PPUSH
13283: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
13287: LD_EXP 51
13291: PPUSH
13292: LD_STRING DJy-Food-17
13294: PPUSH
13295: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
13299: LD_STRING M3-out
13301: PPUSH
13302: CALL_OW 337
// DialogueOff ;
13306: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
13310: LD_EXP 51
13314: PPUSH
13315: LD_INT 1
13317: PPUSH
13318: LD_INT 10
13320: PPUSH
13321: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
13325: LD_EXP 51
13329: PPUSH
13330: LD_INT 95
13332: PPUSH
13333: LD_INT 17
13335: PPUSH
13336: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
13340: LD_INT 35
13342: PPUSH
13343: CALL_OW 67
// if not HasTask ( Jerry ) then
13347: LD_EXP 51
13351: PPUSH
13352: CALL_OW 314
13356: NOT
13357: IFFALSE 13374
// ComMoveXY ( Jerry , 95 , 17 ) ;
13359: LD_EXP 51
13363: PPUSH
13364: LD_INT 95
13366: PPUSH
13367: LD_INT 17
13369: PPUSH
13370: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
13374: LD_EXP 51
13378: PPUSH
13379: LD_INT 95
13381: PPUSH
13382: LD_INT 17
13384: PPUSH
13385: CALL_OW 307
13389: IFFALSE 13340
// SetCargo ( Jerry , mat_cans , 0 ) ;
13391: LD_EXP 51
13395: PPUSH
13396: LD_INT 1
13398: PPUSH
13399: LD_INT 0
13401: PPUSH
13402: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
13406: LD_ADDR_EXP 48
13410: PUSH
13411: LD_EXP 48
13415: PPUSH
13416: LD_EXP 51
13420: PPUSH
13421: CALL 63230 0 2
13425: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_INT 4
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 23
13443: PUSH
13444: LD_INT 1
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PPUSH
13455: CALL_OW 69
13459: PUSH
13460: FOR_IN
13461: IFFALSE 13477
// SetLives ( i , 1000 ) ;
13463: LD_VAR 0 1
13467: PPUSH
13468: LD_INT 1000
13470: PPUSH
13471: CALL_OW 234
13475: GO 13460
13477: POP
13478: POP
// end ;
13479: PPOPN 2
13481: END
// every 0 0$2 trigger hasExplosions marked gameStartEvent do var un , tmp ;
13482: LD_EXP 6
13486: IFFALSE 13917
13488: GO 13490
13490: DISABLE
13491: LD_INT 0
13493: PPUSH
13494: PPUSH
// begin tmp := [ ] ;
13495: LD_ADDR_VAR 0 2
13499: PUSH
13500: EMPTY
13501: ST_TO_ADDR
// uc_side := 3 ;
13502: LD_ADDR_OWVAR 20
13506: PUSH
13507: LD_INT 3
13509: ST_TO_ADDR
// uc_nation := 3 ;
13510: LD_ADDR_OWVAR 21
13514: PUSH
13515: LD_INT 3
13517: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
13518: LD_INT 1
13520: PPUSH
13521: LD_INT 8
13523: PPUSH
13524: CALL_OW 381
// un := CreateHuman ;
13528: LD_ADDR_VAR 0 1
13532: PUSH
13533: CALL_OW 44
13537: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
13538: LD_VAR 0 1
13542: PPUSH
13543: LD_INT 173
13545: PPUSH
13546: LD_INT 104
13548: PPUSH
13549: LD_INT 0
13551: PPUSH
13552: CALL_OW 48
// tmp := Join ( tmp , un ) ;
13556: LD_ADDR_VAR 0 2
13560: PUSH
13561: LD_VAR 0 2
13565: PPUSH
13566: LD_VAR 0 1
13570: PPUSH
13571: CALL 63230 0 2
13575: ST_TO_ADDR
// un := CreateHuman ;
13576: LD_ADDR_VAR 0 1
13580: PUSH
13581: CALL_OW 44
13585: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
13586: LD_VAR 0 1
13590: PPUSH
13591: LD_INT 73
13593: PPUSH
13594: CALL_OW 52
// tmp := Join ( tmp , un ) ;
13598: LD_ADDR_VAR 0 2
13602: PUSH
13603: LD_VAR 0 2
13607: PPUSH
13608: LD_VAR 0 1
13612: PPUSH
13613: CALL 63230 0 2
13617: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13618: LD_INT 35
13620: PPUSH
13621: CALL_OW 67
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 8 and UnitFilter ( tmp , [ f_see , 2 ] ) ;
13625: LD_EXP 41
13629: PPUSH
13630: CALL_OW 255
13634: PUSH
13635: LD_INT 2
13637: EQUAL
13638: PUSH
13639: LD_EXP 41
13643: PPUSH
13644: LD_INT 73
13646: PPUSH
13647: CALL_OW 296
13651: PUSH
13652: LD_INT 8
13654: LESS
13655: AND
13656: PUSH
13657: LD_VAR 0 2
13661: PPUSH
13662: LD_INT 101
13664: PUSH
13665: LD_INT 2
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: PPUSH
13672: CALL_OW 72
13676: AND
13677: IFFALSE 13618
// InGameOn ;
13679: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
13683: LD_INT 73
13685: PPUSH
13686: CALL_OW 250
13690: PPUSH
13691: LD_INT 73
13693: PPUSH
13694: CALL_OW 251
13698: PPUSH
13699: LD_INT 2
13701: PPUSH
13702: LD_INT 9
13704: NEG
13705: PPUSH
13706: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
13710: LD_INT 73
13712: PPUSH
13713: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
13717: LD_EXP 41
13721: PPUSH
13722: LD_INT 73
13724: PPUSH
13725: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
13729: LD_EXP 41
13733: PPUSH
13734: LD_STRING DK-Plastic-1
13736: PPUSH
13737: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
13741: LD_EXP 41
13745: PPUSH
13746: LD_STRING DK-Plastic-2
13748: PPUSH
13749: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
13753: LD_EXP 41
13757: PPUSH
13758: LD_INT 73
13760: PPUSH
13761: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
13765: LD_INT 35
13767: PPUSH
13768: CALL_OW 67
// until GetDistUnits ( Kaia , barExplosion ) < 6 ;
13772: LD_EXP 41
13776: PPUSH
13777: LD_INT 73
13779: PPUSH
13780: CALL_OW 296
13784: PUSH
13785: LD_INT 6
13787: LESS
13788: IFFALSE 13765
// ComHold ( Kaia ) ;
13790: LD_EXP 41
13794: PPUSH
13795: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
13799: LD_VAR 0 2
13803: PUSH
13804: LD_INT 1
13806: ARRAY
13807: PPUSH
13808: LD_STRING DRum-Plastic-3
13810: PPUSH
13811: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
13815: LD_VAR 0 2
13819: PUSH
13820: LD_INT 2
13822: ARRAY
13823: PPUSH
13824: LD_STRING DRum2-Plastic-4
13826: PPUSH
13827: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
13831: LD_VAR 0 2
13835: PUSH
13836: LD_INT 1
13838: ARRAY
13839: PPUSH
13840: LD_STRING DRum-Plastic-5
13842: PPUSH
13843: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
13847: LD_VAR 0 2
13851: PUSH
13852: LD_INT 2
13854: ARRAY
13855: PPUSH
13856: LD_STRING DRum2-Plastic-6
13858: PPUSH
13859: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
13863: LD_EXP 41
13867: PPUSH
13868: LD_STRING DK-Plastic-7
13870: PPUSH
13871: CALL_OW 88
// InGameOff ;
13875: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
13879: LD_INT 73
13881: PPUSH
13882: CALL_OW 250
13886: PPUSH
13887: LD_INT 73
13889: PPUSH
13890: CALL_OW 251
13894: PPUSH
13895: LD_INT 2
13897: PPUSH
13898: CALL_OW 331
// explosionsTakenByRussians := true ;
13902: LD_ADDR_EXP 21
13906: PUSH
13907: LD_INT 1
13909: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
13910: LD_STRING ExplosivesInfo
13912: PPUSH
13913: CALL_OW 97
// end ;
13917: PPOPN 2
13919: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do
13920: LD_EXP 21
13924: PUSH
13925: LD_EXP 41
13929: PPUSH
13930: CALL_OW 255
13934: PUSH
13935: LD_INT 2
13937: EQUAL
13938: AND
13939: PUSH
13940: LD_EXP 41
13944: PPUSH
13945: LD_INT 61
13947: PPUSH
13948: CALL 18422 0 2
13952: AND
13953: PUSH
13954: LD_EXP 17
13958: NOT
13959: AND
13960: PUSH
13961: LD_EXP 30
13965: NOT
13966: AND
13967: IFFALSE 14123
13969: GO 13971
13971: DISABLE
// begin InGameOn ;
13972: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
13976: LD_INT 61
13978: PPUSH
13979: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
13983: LD_EXP 41
13987: PPUSH
13988: LD_INT 3
13990: PPUSH
13991: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
13995: LD_EXP 41
13999: PPUSH
14000: LD_INT 61
14002: PPUSH
14003: CALL_OW 120
// wait ( 0 0$2 ) ;
14007: LD_INT 70
14009: PPUSH
14010: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14014: LD_EXP 41
14018: PPUSH
14019: LD_STRING DK-Plastic-8
14021: PPUSH
14022: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14026: LD_EXP 57
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: LD_STRING DRuMch-Plastic-9
14037: PPUSH
14038: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14042: LD_EXP 41
14046: PPUSH
14047: LD_STRING DK-Plastic-10
14049: PPUSH
14050: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14054: LD_EXP 57
14058: PUSH
14059: LD_INT 1
14061: ARRAY
14062: PPUSH
14063: LD_STRING DRuMch-Plastic-a-11
14065: PPUSH
14066: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14070: LD_EXP 41
14074: PPUSH
14075: LD_STRING DK-Plastic-a-12
14077: PPUSH
14078: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14082: LD_EXP 57
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_STRING DRuMch-Plastic-a-13
14093: PPUSH
14094: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
14098: LD_EXP 41
14102: PPUSH
14103: LD_INT 2
14105: PPUSH
14106: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14110: LD_EXP 41
14114: PPUSH
14115: CALL_OW 122
// InGameOff ;
14119: CALL_OW 9
// end ;
14123: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do
14124: LD_EXP 21
14128: PUSH
14129: LD_EXP 41
14133: PPUSH
14134: CALL_OW 255
14138: PUSH
14139: LD_INT 2
14141: EQUAL
14142: AND
14143: PUSH
14144: LD_EXP 41
14148: PPUSH
14149: LD_INT 196
14151: PPUSH
14152: CALL 18422 0 2
14156: AND
14157: PUSH
14158: LD_EXP 17
14162: NOT
14163: AND
14164: PUSH
14165: LD_EXP 30
14169: NOT
14170: AND
14171: IFFALSE 14476
14173: GO 14175
14175: DISABLE
// begin InGameOn ;
14176: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
14180: LD_INT 196
14182: PPUSH
14183: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14187: LD_EXP 41
14191: PPUSH
14192: LD_INT 3
14194: PPUSH
14195: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
14199: LD_EXP 41
14203: PPUSH
14204: LD_INT 196
14206: PPUSH
14207: CALL_OW 120
// wait ( 0 0$2 ) ;
14211: LD_INT 70
14213: PPUSH
14214: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14218: LD_EXP 41
14222: PPUSH
14223: LD_STRING DK-Plastic-8
14225: PPUSH
14226: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
14230: LD_EXP 58
14234: PUSH
14235: LD_INT 1
14237: ARRAY
14238: PPUSH
14239: LD_STRING DRuMch-Plastic-9
14241: PPUSH
14242: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14246: LD_EXP 41
14250: PPUSH
14251: LD_STRING DK-Plastic-10
14253: PPUSH
14254: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
14258: LD_EXP 58
14262: PUSH
14263: LD_INT 1
14265: ARRAY
14266: PPUSH
14267: LD_STRING DRuMch-Plastic-11
14269: PPUSH
14270: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
14274: LD_EXP 41
14278: PPUSH
14279: LD_STRING DK-Plastic-12
14281: PPUSH
14282: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
14286: LD_EXP 41
14290: PPUSH
14291: LD_STRING DK-Plastic-13
14293: PPUSH
14294: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
14298: LD_EXP 58
14302: PUSH
14303: LD_INT 1
14305: ARRAY
14306: PPUSH
14307: LD_STRING DRuMch-Plastic-14
14309: PPUSH
14310: CALL_OW 88
// PlaceUnitXY ( Stiopa , 175 , 32 , false ) ;
14314: LD_EXP 59
14318: PPUSH
14319: LD_INT 175
14321: PPUSH
14322: LD_INT 32
14324: PPUSH
14325: LD_INT 0
14327: PPUSH
14328: CALL_OW 48
// repeat wait ( 0 0$1 ) ;
14332: LD_INT 35
14334: PPUSH
14335: CALL_OW 67
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
14339: LD_EXP 59
14343: PPUSH
14344: LD_INT 196
14346: PPUSH
14347: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
14351: LD_EXP 59
14355: PPUSH
14356: CALL_OW 310
14360: IFFALSE 14332
// Say ( Stiopa , DSpn-Plastic-15 ) ;
14362: LD_EXP 59
14366: PPUSH
14367: LD_STRING DSpn-Plastic-15
14369: PPUSH
14370: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
14374: LD_EXP 60
14378: PPUSH
14379: LD_STRING DLr-Plastic-16
14381: PPUSH
14382: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
14386: LD_EXP 41
14390: PPUSH
14391: LD_STRING DK-Plastic-17
14393: PPUSH
14394: CALL_OW 88
// wait ( 0 0$0.3 ) ;
14398: LD_INT 10
14400: PPUSH
14401: CALL_OW 67
// SetSide ( Kaia , 2 ) ;
14405: LD_EXP 41
14409: PPUSH
14410: LD_INT 2
14412: PPUSH
14413: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14417: LD_EXP 41
14421: PPUSH
14422: CALL_OW 122
// InGameOff ;
14426: CALL_OW 9
// explosionsTakenByRussians := false ;
14430: LD_ADDR_EXP 21
14434: PUSH
14435: LD_INT 0
14437: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
14438: LD_INT 170
14440: PPUSH
14441: LD_INT 28
14443: PPUSH
14444: LD_INT 2
14446: PPUSH
14447: LD_INT 6
14449: NEG
14450: PPUSH
14451: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
14455: LD_INT 170
14457: PPUSH
14458: LD_INT 28
14460: PPUSH
14461: LD_INT 2
14463: PPUSH
14464: CALL_OW 331
// knowWhereExplosivesAre := true ;
14468: LD_ADDR_EXP 34
14472: PUSH
14473: LD_INT 1
14475: ST_TO_ADDR
// end ;
14476: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
14477: LD_EXP 34
14481: PUSH
14482: LD_EXP 41
14486: PPUSH
14487: CALL_OW 255
14491: PUSH
14492: LD_INT 2
14494: EQUAL
14495: AND
14496: PUSH
14497: LD_EXP 41
14501: PPUSH
14502: LD_INT 195
14504: PPUSH
14505: CALL 18422 0 2
14509: AND
14510: PUSH
14511: LD_EXP 17
14515: NOT
14516: AND
14517: PUSH
14518: LD_EXP 30
14522: NOT
14523: AND
14524: IFFALSE 14604
14526: GO 14528
14528: DISABLE
// begin InGameOn ;
14529: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
14533: LD_EXP 41
14537: PPUSH
14538: LD_INT 3
14540: PPUSH
14541: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
14545: LD_EXP 41
14549: PPUSH
14550: LD_INT 195
14552: PPUSH
14553: CALL_OW 120
// Query ( ExplosivesInfoUsage ) ;
14557: LD_STRING ExplosivesInfoUsage
14559: PPUSH
14560: CALL_OW 97
// SetSide ( Kaia , 2 ) ;
14564: LD_EXP 41
14568: PPUSH
14569: LD_INT 2
14571: PPUSH
14572: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
14576: LD_EXP 41
14580: PPUSH
14581: CALL_OW 122
// InGameOff ;
14585: CALL_OW 9
// hasExplosionCollected := true ;
14589: LD_ADDR_EXP 23
14593: PUSH
14594: LD_INT 1
14596: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
14597: LD_STRING M1-explosive-out
14599: PPUSH
14600: CALL_OW 337
// end ;
14604: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
14605: LD_EXP 23
14609: PUSH
14610: LD_EXP 17
14614: NOT
14615: AND
14616: PUSH
14617: LD_EXP 30
14621: NOT
14622: AND
14623: IFFALSE 14798
14625: GO 14627
14627: DISABLE
14628: LD_INT 0
14630: PPUSH
14631: PPUSH
// begin for i in importantBuildingsList do
14632: LD_ADDR_VAR 0 1
14636: PUSH
14637: LD_EXP 35
14641: PUSH
14642: FOR_IN
14643: IFFALSE 14659
// MarkBuilding ( i , true ) ;
14645: LD_VAR 0 1
14649: PPUSH
14650: LD_INT 1
14652: PPUSH
14653: CALL 18792 0 2
14657: GO 14642
14659: POP
14660: POP
// repeat wait ( 0 0$1 ) ;
14661: LD_INT 35
14663: PPUSH
14664: CALL_OW 67
// for i in importantBuildingsList do
14668: LD_ADDR_VAR 0 1
14672: PUSH
14673: LD_EXP 35
14677: PUSH
14678: FOR_IN
14679: IFFALSE 14789
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
14681: LD_EXP 36
14685: PUSH
14686: LD_EXP 14
14690: UNION
14691: PPUSH
14692: LD_INT 22
14694: PUSH
14695: LD_INT 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 91
14714: PUSH
14715: LD_VAR 0 1
14719: PUSH
14720: LD_INT 6
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: PPUSH
14733: CALL_OW 72
14737: IFFALSE 14787
// begin CenterNowOnUnits ( i ) ;
14739: LD_VAR 0 1
14743: PPUSH
14744: CALL_OW 87
// PlaceExplosives ( i ) ;
14748: LD_VAR 0 1
14752: PPUSH
14753: CALL 18689 0 1
// MarkBuilding ( i , false ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: LD_INT 0
14764: PPUSH
14765: CALL 18792 0 2
// importantBuildingsList := importantBuildingsList diff i ;
14769: LD_ADDR_EXP 35
14773: PUSH
14774: LD_EXP 35
14778: PUSH
14779: LD_VAR 0 1
14783: DIFF
14784: ST_TO_ADDR
// continue ;
14785: GO 14678
// end ; end ;
14787: GO 14678
14789: POP
14790: POP
// until not importantBuildingsList ;
14791: LD_EXP 35
14795: NOT
14796: IFFALSE 14661
// end ;
14798: PPOPN 2
14800: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do var i , j , x , y ;
14801: LD_EXP 14
14805: PPUSH
14806: LD_INT 22
14808: PUSH
14809: LD_INT 2
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 95
14818: PUSH
14819: LD_INT 23
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PPUSH
14830: CALL_OW 72
14834: PUSH
14835: LD_EXP 36
14839: PPUSH
14840: CALL_OW 302
14844: AND
14845: PUSH
14846: LD_EXP 30
14850: NOT
14851: AND
14852: IFFALSE 15055
14854: GO 14856
14856: DISABLE
14857: LD_INT 0
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
// begin Say ( Heike , DH-End-1 ) ;
14863: LD_EXP 36
14867: PPUSH
14868: LD_STRING DH-End-1
14870: PPUSH
14871: CALL_OW 88
// if hasExplosionsInFactory then
14875: LD_EXP 7
14879: IFFALSE 14899
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
14881: LD_ADDR_EXP 29
14885: PUSH
14886: LD_EXP 29
14890: PPUSH
14891: LD_INT 61
14893: PPUSH
14894: CALL 63230 0 2
14898: ST_TO_ADDR
// if explosivePlantedList then
14899: LD_EXP 29
14903: IFFALSE 15040
// begin for i in explosivePlantedList do
14905: LD_ADDR_VAR 0 1
14909: PUSH
14910: LD_EXP 29
14914: PUSH
14915: FOR_IN
14916: IFFALSE 15019
// begin x := GetX ( i ) ;
14918: LD_ADDR_VAR 0 3
14922: PUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 250
14932: ST_TO_ADDR
// y := GetY ( i ) ;
14933: LD_ADDR_VAR 0 4
14937: PUSH
14938: LD_VAR 0 1
14942: PPUSH
14943: CALL_OW 251
14947: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
14948: LD_ADDR_VAR 0 2
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: LD_INT 5
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: PUSH
14967: FOR_IN
14968: IFFALSE 15015
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
14970: LD_VAR 0 3
14974: PPUSH
14975: LD_VAR 0 2
14979: PPUSH
14980: LD_INT 2
14982: PPUSH
14983: CALL_OW 272
14987: PPUSH
14988: LD_VAR 0 4
14992: PPUSH
14993: LD_VAR 0 2
14997: PPUSH
14998: LD_INT 2
15000: PPUSH
15001: CALL_OW 273
15005: PPUSH
15006: LD_INT 1
15008: PPUSH
15009: CALL_OW 453
15013: GO 14967
15015: POP
15016: POP
// end ;
15017: GO 14915
15019: POP
15020: POP
// Say ( Heike , DH-End-2 ) ;
15021: LD_EXP 36
15025: PPUSH
15026: LD_STRING DH-End-2
15028: PPUSH
15029: CALL_OW 88
// wait ( 0 0$5 ) ;
15033: LD_INT 175
15035: PPUSH
15036: CALL_OW 67
// end ; if not isAlarm then
15040: LD_EXP 17
15044: NOT
15045: IFFALSE 15055
// isAlarm := true ;
15047: LD_ADDR_EXP 17
15051: PUSH
15052: LD_INT 1
15054: ST_TO_ADDR
// end ;
15055: PPOPN 4
15057: END
// function SayHEmpty ( ) ; begin
15058: LD_INT 0
15060: PPUSH
// case rand ( 1 , 3 ) of 1 :
15061: LD_INT 1
15063: PPUSH
15064: LD_INT 3
15066: PPUSH
15067: CALL_OW 12
15071: PUSH
15072: LD_INT 1
15074: DOUBLE
15075: EQUAL
15076: IFTRUE 15080
15078: GO 15095
15080: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
15081: LD_EXP 36
15085: PPUSH
15086: LD_STRING DH-Empty-1
15088: PPUSH
15089: CALL_OW 88
15093: GO 15142
15095: LD_INT 2
15097: DOUBLE
15098: EQUAL
15099: IFTRUE 15103
15101: GO 15118
15103: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
15104: LD_EXP 36
15108: PPUSH
15109: LD_STRING DH-Empty-2
15111: PPUSH
15112: CALL_OW 88
15116: GO 15142
15118: LD_INT 3
15120: DOUBLE
15121: EQUAL
15122: IFTRUE 15126
15124: GO 15141
15126: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
15127: LD_EXP 36
15131: PPUSH
15132: LD_STRING DH-Empty-3
15134: PPUSH
15135: CALL_OW 88
15139: GO 15142
15141: POP
// end ;
15142: LD_VAR 0 1
15146: RET
// function SayHVisited ( ) ; begin
15147: LD_INT 0
15149: PPUSH
// case rand ( 1 , 3 ) of 1 :
15150: LD_INT 1
15152: PPUSH
15153: LD_INT 3
15155: PPUSH
15156: CALL_OW 12
15160: PUSH
15161: LD_INT 1
15163: DOUBLE
15164: EQUAL
15165: IFTRUE 15169
15167: GO 15184
15169: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
15170: LD_EXP 36
15174: PPUSH
15175: LD_STRING DH-Visited-1
15177: PPUSH
15178: CALL_OW 88
15182: GO 15231
15184: LD_INT 2
15186: DOUBLE
15187: EQUAL
15188: IFTRUE 15192
15190: GO 15207
15192: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
15193: LD_EXP 36
15197: PPUSH
15198: LD_STRING DH-Visited-2
15200: PPUSH
15201: CALL_OW 88
15205: GO 15231
15207: LD_INT 3
15209: DOUBLE
15210: EQUAL
15211: IFTRUE 15215
15213: GO 15230
15215: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
15216: LD_EXP 36
15220: PPUSH
15221: LD_STRING DH-Visited-3
15223: PPUSH
15224: CALL_OW 88
15228: GO 15231
15230: POP
// end ;
15231: LD_VAR 0 1
15235: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
15236: LD_EXP 17
15240: NOT
15241: PUSH
15242: LD_EXP 15
15246: AND
15247: PUSH
15248: LD_EXP 36
15252: PPUSH
15253: CALL_OW 255
15257: PUSH
15258: LD_INT 2
15260: EQUAL
15261: AND
15262: PUSH
15263: LD_EXP 36
15267: PPUSH
15268: CALL_OW 302
15272: AND
15273: PUSH
15274: LD_EXP 36
15278: PPUSH
15279: CALL_OW 316
15283: AND
15284: PUSH
15285: LD_EXP 30
15289: NOT
15290: AND
15291: IFFALSE 15357
15293: GO 15295
15295: DISABLE
15296: LD_INT 0
15298: PPUSH
// begin enable ;
15299: ENABLE
// for i in entranceAllowedList do
15300: LD_ADDR_VAR 0 1
15304: PUSH
15305: LD_EXP 15
15309: PUSH
15310: FOR_IN
15311: IFFALSE 15355
// if InEntrance ( Heike , i ) then
15313: LD_EXP 36
15317: PPUSH
15318: LD_VAR 0 1
15322: PPUSH
15323: CALL 18422 0 2
15327: IFFALSE 15353
// begin disable ( entranceEvent ) ;
15329: LD_INT 1
15331: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
15332: LD_VAR 0 1
15336: PPUSH
15337: CALL 15360 0 1
// wait ( 0 0$3 ) ;
15341: LD_INT 105
15343: PPUSH
15344: CALL_OW 67
// enable ( entranceEvent ) ;
15348: LD_INT 1
15350: ENABLE_MARKED
// break ;
15351: GO 15355
// end ;
15353: GO 15310
15355: POP
15356: POP
// end ;
15357: PPOPN 1
15359: END
// function HeikeEnterBuilding ( building ) ; var tmp ; begin
15360: LD_INT 0
15362: PPUSH
15363: PPUSH
// if not building then
15364: LD_VAR 0 1
15368: NOT
15369: IFFALSE 15373
// exit ;
15371: GO 17919
// if building in entranceVisitedList then
15373: LD_VAR 0 1
15377: PUSH
15378: LD_EXP 16
15382: IN
15383: IFFALSE 15391
// begin SayHVisited ( ) ;
15385: CALL 15147 0 0
// exit ;
15389: GO 17919
// end ; case Query ( EnterBuilding ) of 1 :
15391: LD_STRING EnterBuilding
15393: PPUSH
15394: CALL_OW 97
15398: PUSH
15399: LD_INT 1
15401: DOUBLE
15402: EQUAL
15403: IFTRUE 15407
15405: GO 15410
15407: POP
// ; 2 :
15408: GO 15424
15410: LD_INT 2
15412: DOUBLE
15413: EQUAL
15414: IFTRUE 15418
15416: GO 15423
15418: POP
// exit ; end ;
15419: GO 17919
15421: GO 15424
15423: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
15424: LD_ADDR_EXP 16
15428: PUSH
15429: LD_EXP 16
15433: PPUSH
15434: LD_VAR 0 1
15438: PPUSH
15439: CALL 63230 0 2
15443: ST_TO_ADDR
// InGameOn ;
15444: CALL_OW 8
// SetSide ( Heike , 5 ) ;
15448: LD_EXP 36
15452: PPUSH
15453: LD_INT 5
15455: PPUSH
15456: CALL_OW 235
// SetSide ( building , 5 ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: LD_INT 5
15467: PPUSH
15468: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
15472: LD_EXP 36
15476: PPUSH
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 120
// wait ( 0 0$3 ) ;
15486: LD_INT 105
15488: PPUSH
15489: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
15493: LD_ADDR_VAR 0 3
15497: PUSH
15498: LD_INT 165
15500: PUSH
15501: LD_INT 106
15503: PUSH
15504: LD_INT 135
15506: PUSH
15507: LD_INT 162
15509: PUSH
15510: LD_INT 61
15512: PUSH
15513: LD_INT 109
15515: PUSH
15516: LD_INT 169
15518: PUSH
15519: LD_INT 13
15521: PUSH
15522: LD_INT 147
15524: PUSH
15525: LD_INT 137
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: ST_TO_ADDR
// if not building in tmp then
15540: LD_VAR 0 1
15544: PUSH
15545: LD_VAR 0 3
15549: IN
15550: NOT
15551: IFFALSE 15559
// SayHEmpty ( ) else
15553: CALL 15058 0 0
15557: GO 17882
// case building of laundry :
15559: LD_VAR 0 1
15563: PUSH
15564: LD_INT 165
15566: DOUBLE
15567: EQUAL
15568: IFTRUE 15572
15570: GO 15660
15572: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
15573: LD_EXP 26
15577: PUSH
15578: LD_EXP 27
15582: NOT
15583: AND
15584: PUSH
15585: LD_EXP 28
15589: NOT
15590: AND
15591: IFFALSE 15646
// begin case Query ( HeikeInLaundry ) of 1 :
15593: LD_STRING HeikeInLaundry
15595: PPUSH
15596: CALL_OW 97
15600: PUSH
15601: LD_INT 1
15603: DOUBLE
15604: EQUAL
15605: IFTRUE 15609
15607: GO 15616
15609: POP
// SpawnHeikeAsRussian ; 2 :
15610: CALL 1642 0 0
15614: GO 15644
15616: LD_INT 2
15618: DOUBLE
15619: EQUAL
15620: IFTRUE 15624
15622: GO 15643
15624: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
15625: LD_ADDR_EXP 16
15629: PUSH
15630: LD_EXP 16
15634: PUSH
15635: LD_VAR 0 1
15639: DIFF
15640: ST_TO_ADDR
15641: GO 15644
15643: POP
// end else
15644: GO 15658
// Say ( Heike , DH-Locked ) ;
15646: LD_EXP 36
15650: PPUSH
15651: LD_STRING DH-Locked
15653: PPUSH
15654: CALL_OW 88
// end ; dougBar :
15658: GO 17882
15660: LD_INT 106
15662: DOUBLE
15663: EQUAL
15664: IFTRUE 15668
15666: GO 16020
15668: POP
// begin if contactWithAmerican and americanContact then
15669: LD_EXP 25
15673: PUSH
15674: LD_EXP 10
15678: AND
15679: IFFALSE 15743
// begin Say ( Heike , DH-Escort-a-1 ) ;
15681: LD_EXP 36
15685: PPUSH
15686: LD_STRING DH-Escort-a-1
15688: PPUSH
15689: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
15693: LD_EXP 50
15697: PPUSH
15698: LD_STRING DCa-Escort-a-2
15700: PPUSH
15701: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
15705: LD_EXP 50
15709: PPUSH
15710: LD_STRING DCa-Escort-a-3
15712: PPUSH
15713: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
15717: LD_EXP 36
15721: PPUSH
15722: LD_STRING DH-Escort-a-4
15724: PPUSH
15725: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
15729: LD_EXP 36
15733: PPUSH
15734: LD_STRING DH-Escort-a-5
15736: PPUSH
15737: CALL_OW 88
// end else
15741: GO 15977
// if contactWithAmerican then
15743: LD_EXP 25
15747: IFFALSE 15787
// begin Say ( Heike , DH-Escort-b-1 ) ;
15749: LD_EXP 36
15753: PPUSH
15754: LD_STRING DH-Escort-b-1
15756: PPUSH
15757: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
15761: LD_EXP 50
15765: PPUSH
15766: LD_STRING DCa-Escort-b-2
15768: PPUSH
15769: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
15773: LD_EXP 50
15777: PPUSH
15778: LD_STRING DCa-Escort-b-3
15780: PPUSH
15781: CALL_OW 88
// end else
15785: GO 15977
// begin Say ( Doug , DCa-Deal-a-1 ) ;
15787: LD_EXP 50
15791: PPUSH
15792: LD_STRING DCa-Deal-a-1
15794: PPUSH
15795: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
15799: LD_EXP 50
15803: PPUSH
15804: LD_STRING DCa-Deal-a-2
15806: PPUSH
15807: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
15811: LD_EXP 36
15815: PPUSH
15816: LD_STRING DH-Deal-a-3
15818: PPUSH
15819: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
15823: LD_EXP 50
15827: PPUSH
15828: LD_STRING DCa-Deal-a-4
15830: PPUSH
15831: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
15835: LD_EXP 36
15839: PPUSH
15840: LD_STRING DH-Deal-a-5
15842: PPUSH
15843: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
15847: LD_EXP 50
15851: PPUSH
15852: LD_STRING DCa-Deal-a-6
15854: PPUSH
15855: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
15859: LD_EXP 50
15863: PPUSH
15864: LD_STRING DCa-Deal-a-7
15866: PPUSH
15867: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
15871: LD_EXP 50
15875: PPUSH
15876: LD_STRING DCa-Deal-a-8
15878: PPUSH
15879: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
15883: LD_EXP 50
15887: PPUSH
15888: LD_STRING DCa-Deal-a-9
15890: PPUSH
15891: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
15895: LD_EXP 50
15899: PPUSH
15900: LD_STRING DCa-Deal-a-10
15902: PPUSH
15903: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
15907: LD_EXP 50
15911: PPUSH
15912: LD_STRING DCa-Deal-a-11
15914: PPUSH
15915: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15919: LD_INT 10
15921: PPUSH
15922: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
15926: LD_EXP 50
15930: PPUSH
15931: LD_STRING DCa-Deal-a-12
15933: PPUSH
15934: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
15938: LD_EXP 36
15942: PPUSH
15943: LD_STRING DH-Deal-a-13
15945: PPUSH
15946: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
15950: LD_EXP 36
15954: PPUSH
15955: LD_STRING DH-Deal-a-14
15957: PPUSH
15958: CALL_OW 88
// contactWithAmerican := true ;
15962: LD_ADDR_EXP 25
15966: PUSH
15967: LD_INT 1
15969: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
15970: LD_STRING M1-american-out
15972: PPUSH
15973: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
15977: LD_EXP 50
15981: PPUSH
15982: LD_INT 2
15984: PPUSH
15985: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
15989: LD_ADDR_EXP 14
15993: PUSH
15994: LD_EXP 14
15998: PPUSH
15999: LD_EXP 50
16003: PPUSH
16004: CALL 63230 0 2
16008: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16009: LD_EXP 50
16013: PPUSH
16014: CALL_OW 122
// end ; usLab :
16018: GO 17882
16020: LD_INT 135
16022: DOUBLE
16023: EQUAL
16024: IFTRUE 16028
16026: GO 16329
16028: POP
// begin if hasSniperRifle then
16029: LD_EXP 11
16033: IFFALSE 16327
// begin if IsOK ( Kaia ) and Kaia in heikeSquad then
16035: LD_EXP 41
16039: PPUSH
16040: CALL_OW 302
16044: PUSH
16045: LD_EXP 41
16049: PUSH
16050: LD_EXP 14
16054: IN
16055: AND
16056: IFFALSE 16301
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
16058: LD_EXP 36
16062: PPUSH
16063: LD_EXP 41
16067: PPUSH
16068: CALL_OW 296
16072: PUSH
16073: LD_INT 10
16075: GREATER
16076: IFFALSE 16101
// begin Query ( KaiaDistance ) ;
16078: LD_STRING KaiaDistance
16080: PPUSH
16081: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
16085: LD_ADDR_EXP 16
16089: PUSH
16090: LD_EXP 16
16094: PUSH
16095: LD_INT 135
16097: DIFF
16098: ST_TO_ADDR
// end else
16099: GO 16299
// begin SetSide ( Kaia , 5 ) ;
16101: LD_EXP 41
16105: PPUSH
16106: LD_INT 5
16108: PPUSH
16109: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
16113: LD_EXP 41
16117: PPUSH
16118: LD_INT 135
16120: PPUSH
16121: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
16125: LD_INT 35
16127: PPUSH
16128: CALL_OW 67
// until IsInUnit ( Kaia ) ;
16132: LD_EXP 41
16136: PPUSH
16137: CALL_OW 310
16141: IFFALSE 16125
// Say ( Kaia , DK-Sniper-1 ) ;
16143: LD_EXP 41
16147: PPUSH
16148: LD_STRING DK-Sniper-1
16150: PPUSH
16151: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
16155: LD_EXP 41
16159: PPUSH
16160: CALL_OW 257
16164: PUSH
16165: LD_INT 34
16167: EQUAL
16168: PUSH
16169: LD_EXP 38
16173: PUSH
16174: LD_EXP 14
16178: IN
16179: AND
16180: PUSH
16181: LD_EXP 38
16185: PPUSH
16186: CALL_OW 302
16190: AND
16191: IFFALSE 16219
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
16193: LD_EXP 41
16197: PPUSH
16198: LD_STRING DK-Sniper-a-2
16200: PPUSH
16201: CALL_OW 88
// SetClass ( Mike , class_hunter ) ;
16205: LD_EXP 38
16209: PPUSH
16210: LD_INT 32
16212: PPUSH
16213: CALL_OW 336
// end else
16217: GO 16278
// begin Say ( Kaia , DK-Sniper-2 ) ;
16219: LD_EXP 41
16223: PPUSH
16224: LD_STRING DK-Sniper-2
16226: PPUSH
16227: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
16231: LD_EXP 41
16235: PPUSH
16236: LD_INT 32
16238: PPUSH
16239: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
16243: LD_EXP 43
16247: PPUSH
16248: CALL_OW 302
16252: PUSH
16253: LD_EXP 43
16257: PUSH
16258: LD_EXP 14
16262: IN
16263: AND
16264: IFFALSE 16278
// Say ( Markov , DMar-Sniper-3 ) ;
16266: LD_EXP 43
16270: PPUSH
16271: LD_STRING DMar-Sniper-3
16273: PPUSH
16274: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
16278: LD_EXP 41
16282: PPUSH
16283: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
16287: LD_EXP 41
16291: PPUSH
16292: LD_INT 2
16294: PPUSH
16295: CALL_OW 235
// end ; end else
16299: GO 16327
// begin Say ( Heike , DH-Locked ) ;
16301: LD_EXP 36
16305: PPUSH
16306: LD_STRING DH-Locked
16308: PPUSH
16309: CALL_OW 88
// entranceVisitedList := entranceVisitedList diff usLab ;
16313: LD_ADDR_EXP 16
16317: PUSH
16318: LD_EXP 16
16322: PUSH
16323: LD_INT 135
16325: DIFF
16326: ST_TO_ADDR
// end ; end ; end ; drugsLab :
16327: GO 17882
16329: LD_INT 162
16331: DOUBLE
16332: EQUAL
16333: IFTRUE 16337
16335: GO 16470
16337: POP
// begin if hasStimDrugs then
16338: LD_EXP 9
16342: IFFALSE 16456
// begin wait ( 0 0$1 ) ;
16344: LD_INT 35
16346: PPUSH
16347: CALL_OW 67
// if not hasStimDrugsCollected then
16351: LD_EXP 24
16355: NOT
16356: IFFALSE 16398
// begin Say ( Heike , DH-Lab-1 ) ;
16358: LD_EXP 36
16362: PPUSH
16363: LD_STRING DH-Lab-1
16365: PPUSH
16366: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
16370: LD_INT 5
16372: PPUSH
16373: LD_INT 2
16375: PPUSH
16376: LD_INT 2
16378: PPUSH
16379: CALL_OW 322
// hasStimDrugsCollected := true ;
16383: LD_ADDR_EXP 24
16387: PUSH
16388: LD_INT 1
16390: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
16391: LD_STRING M1-drugs-out
16393: PPUSH
16394: CALL_OW 604
// end ; if not hasExplosionCollected then
16398: LD_EXP 23
16402: NOT
16403: IFFALSE 16421
// entranceVisitedList := entranceVisitedList diff drugsLab else
16405: LD_ADDR_EXP 16
16409: PUSH
16410: LD_EXP 16
16414: PUSH
16415: LD_INT 162
16417: DIFF
16418: ST_TO_ADDR
16419: GO 16454
// begin wait ( 0 0$3 ) ;
16421: LD_INT 105
16423: PPUSH
16424: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
16428: LD_EXP 36
16432: PPUSH
16433: LD_STRING DH-Lab-2
16435: PPUSH
16436: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
16440: LD_STRING M1-drugsLab-out
16442: PPUSH
16443: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
16447: LD_INT 162
16449: PPUSH
16450: CALL 18689 0 1
// end ; end else
16454: GO 16468
// Say ( Heike , DH-Locked ) ;
16456: LD_EXP 36
16460: PPUSH
16461: LD_STRING DH-Locked
16463: PPUSH
16464: CALL_OW 88
// end ; ruFac :
16468: GO 17882
16470: LD_INT 61
16472: DOUBLE
16473: EQUAL
16474: IFTRUE 16478
16476: GO 16588
16478: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
16479: LD_EXP 43
16483: PPUSH
16484: CALL_OW 302
16488: PUSH
16489: LD_EXP 43
16493: PUSH
16494: LD_EXP 14
16498: IN
16499: NOT
16500: AND
16501: IFFALSE 16582
// begin Say ( Heike , DH-Krastyo-1 ) ;
16503: LD_EXP 36
16507: PPUSH
16508: LD_STRING DH-Krastyo-1
16510: PPUSH
16511: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
16515: LD_EXP 43
16519: PPUSH
16520: LD_STRING DMar-Krastyo-2
16522: PPUSH
16523: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
16527: LD_EXP 43
16531: PPUSH
16532: LD_STRING DMar-Krastyo-3
16534: PPUSH
16535: CALL_OW 88
// SetSide ( Markov , 2 ) ;
16539: LD_EXP 43
16543: PPUSH
16544: LD_INT 2
16546: PPUSH
16547: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
16551: LD_ADDR_EXP 14
16555: PUSH
16556: LD_EXP 14
16560: PPUSH
16561: LD_EXP 43
16565: PPUSH
16566: CALL 63230 0 2
16570: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
16571: LD_EXP 43
16575: PPUSH
16576: CALL_OW 122
// end else
16580: GO 16586
// SayHEmpty ( ) ;
16582: CALL 15058 0 0
// end ; ruBarKam :
16586: GO 17882
16588: LD_INT 109
16590: DOUBLE
16591: EQUAL
16592: IFTRUE 16596
16594: GO 16743
16596: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
16597: LD_EXP 40
16601: PPUSH
16602: CALL_OW 302
16606: PUSH
16607: LD_EXP 40
16611: PUSH
16612: LD_EXP 14
16616: IN
16617: NOT
16618: AND
16619: IFFALSE 16737
// begin Say ( Heike , DH-Kamil-1 ) ;
16621: LD_EXP 36
16625: PPUSH
16626: LD_STRING DH-Kamil-1
16628: PPUSH
16629: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
16633: LD_EXP 40
16637: PPUSH
16638: LD_STRING DKam-Kamil-2
16640: PPUSH
16641: CALL_OW 88
// if IsOk ( Sophia ) then
16645: LD_EXP 42
16649: PPUSH
16650: CALL_OW 302
16654: IFFALSE 16694
// if Sophia in heikeSquad then
16656: LD_EXP 42
16660: PUSH
16661: LD_EXP 14
16665: IN
16666: IFFALSE 16682
// Say ( Kamil , DKam-Kamil-a-3 ) else
16668: LD_EXP 40
16672: PPUSH
16673: LD_STRING DKam-Kamil-a-3
16675: PPUSH
16676: CALL_OW 88
16680: GO 16694
// Say ( Kamil , DKam-Kamil-3 ) ;
16682: LD_EXP 40
16686: PPUSH
16687: LD_STRING DKam-Kamil-3
16689: PPUSH
16690: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
16694: LD_EXP 40
16698: PPUSH
16699: LD_INT 2
16701: PPUSH
16702: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
16706: LD_ADDR_EXP 14
16710: PUSH
16711: LD_EXP 14
16715: PPUSH
16716: LD_EXP 40
16720: PPUSH
16721: CALL 63230 0 2
16725: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
16726: LD_EXP 40
16730: PPUSH
16731: CALL_OW 122
// end else
16735: GO 16741
// SayHEmpty ( ) ;
16737: CALL 15058 0 0
// end ; ruOutpost1 :
16741: GO 17882
16743: LD_INT 169
16745: DOUBLE
16746: EQUAL
16747: IFTRUE 16751
16749: GO 17093
16751: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
16752: LD_EXP 45
16756: PPUSH
16757: CALL_OW 302
16761: PUSH
16762: LD_EXP 45
16766: PUSH
16767: LD_EXP 14
16771: IN
16772: NOT
16773: AND
16774: IFFALSE 17087
// begin if hasMethanol then
16776: LD_EXP 13
16780: IFFALSE 17016
// begin Say ( Heike , DH-Kurt-1 ) ;
16782: LD_EXP 36
16786: PPUSH
16787: LD_STRING DH-Kurt-1
16789: PPUSH
16790: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
16794: LD_EXP 45
16798: PPUSH
16799: LD_STRING DKs-Kurt-2
16801: PPUSH
16802: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
16806: LD_EXP 37
16810: PPUSH
16811: LD_INT 169
16813: PPUSH
16814: CALL_OW 296
16818: PUSH
16819: LD_INT 10
16821: LESS
16822: PUSH
16823: LD_EXP 37
16827: PUSH
16828: LD_EXP 14
16832: IN
16833: AND
16834: IFFALSE 16911
// begin ComMoveXY ( Givi , 100 , 37 ) ;
16836: LD_EXP 37
16840: PPUSH
16841: LD_INT 100
16843: PPUSH
16844: LD_INT 37
16846: PPUSH
16847: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
16851: LD_EXP 37
16855: PPUSH
16856: LD_INT 169
16858: PPUSH
16859: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
16863: LD_INT 35
16865: PPUSH
16866: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
16870: LD_EXP 37
16874: PPUSH
16875: LD_INT 169
16877: PPUSH
16878: CALL_OW 296
16882: PUSH
16883: LD_INT 7
16885: LESS
16886: IFFALSE 16863
// Say ( Givi , DG-Kurt-3 ) ;
16888: LD_EXP 37
16892: PPUSH
16893: LD_STRING DG-Kurt-3
16895: PPUSH
16896: CALL_OW 88
// ComStop ( Givi ) ;
16900: LD_EXP 37
16904: PPUSH
16905: CALL_OW 141
// end else
16909: GO 17014
// if GetDistUnits ( Olaf , ruOutpost1 ) < 10 and Olaf in heikeSquad then
16911: LD_EXP 44
16915: PPUSH
16916: LD_INT 169
16918: PPUSH
16919: CALL_OW 296
16923: PUSH
16924: LD_INT 10
16926: LESS
16927: PUSH
16928: LD_EXP 44
16932: PUSH
16933: LD_EXP 14
16937: IN
16938: AND
16939: IFFALSE 17014
// begin ComMoveXY ( Olaf , 100 , 37 ) ;
16941: LD_EXP 44
16945: PPUSH
16946: LD_INT 100
16948: PPUSH
16949: LD_INT 37
16951: PPUSH
16952: CALL_OW 111
// AddComTurnUnit ( Olaf , ruOutpost1 ) ;
16956: LD_EXP 44
16960: PPUSH
16961: LD_INT 169
16963: PPUSH
16964: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
16968: LD_INT 35
16970: PPUSH
16971: CALL_OW 67
// until GetDistUnits ( Olaf , ruOutpost1 ) < 7 ;
16975: LD_EXP 44
16979: PPUSH
16980: LD_INT 169
16982: PPUSH
16983: CALL_OW 296
16987: PUSH
16988: LD_INT 7
16990: LESS
16991: IFFALSE 16968
// Say ( Olaf , DO-Kurt-a-3 ) ;
16993: LD_EXP 44
16997: PPUSH
16998: LD_STRING DO-Kurt-a-3
17000: PPUSH
17001: CALL_OW 88
// ComStop ( Olaf ) ;
17005: LD_EXP 44
17009: PPUSH
17010: CALL_OW 141
// end ; end else
17014: GO 17044
// begin Say ( Heike , DH-Kurt-1 ) ;
17016: LD_EXP 36
17020: PPUSH
17021: LD_STRING DH-Kurt-1
17023: PPUSH
17024: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17028: LD_EXP 45
17032: PPUSH
17033: LD_STRING DKs-Kurt-2
17035: PPUSH
17036: CALL_OW 88
// SpawnAdditionalRuGuards ;
17040: CALL 3257 0 0
// end ; SetSide ( Kurt , 2 ) ;
17044: LD_EXP 45
17048: PPUSH
17049: LD_INT 2
17051: PPUSH
17052: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17056: LD_ADDR_EXP 14
17060: PUSH
17061: LD_EXP 14
17065: PPUSH
17066: LD_EXP 45
17070: PPUSH
17071: CALL 63230 0 2
17075: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17076: LD_EXP 45
17080: PPUSH
17081: CALL_OW 122
// end else
17085: GO 17091
// SayHEmpty ( ) ;
17087: CALL 15058 0 0
// end ; ruOutpostBar :
17091: GO 17882
17093: LD_INT 13
17095: DOUBLE
17096: EQUAL
17097: IFTRUE 17101
17099: GO 17147
17101: POP
// begin if not hasGuardPatrolPlan then
17102: LD_EXP 18
17106: NOT
17107: IFFALSE 17141
// begin Say ( Heike , DH-PatrolPlan ) ;
17109: LD_EXP 36
17113: PPUSH
17114: LD_STRING DH-PatrolPlan
17116: PPUSH
17117: CALL_OW 88
// hasGuardPatrolPlan := true ;
17121: LD_ADDR_EXP 18
17125: PUSH
17126: LD_INT 1
17128: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
17129: LD_INT 6
17131: PPUSH
17132: LD_INT 2
17134: PPUSH
17135: CALL_OW 343
// end else
17139: GO 17145
// SayHEmpty ( ) ;
17141: CALL 15058 0 0
// end ; ruKaiaBar :
17145: GO 17882
17147: LD_INT 147
17149: DOUBLE
17150: EQUAL
17151: IFTRUE 17155
17153: GO 17302
17155: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
17156: LD_EXP 41
17160: PPUSH
17161: CALL_OW 302
17165: PUSH
17166: LD_EXP 41
17170: PUSH
17171: LD_EXP 14
17175: IN
17176: NOT
17177: AND
17178: IFFALSE 17300
// begin Say ( Heike , DH-Kaia-1 ) ;
17180: LD_EXP 36
17184: PPUSH
17185: LD_STRING DH-Kaia-1
17187: PPUSH
17188: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
17192: LD_EXP 41
17196: PPUSH
17197: LD_STRING DK-Kaia-2
17199: PPUSH
17200: CALL_OW 88
// if hasSniperRifle then
17204: LD_EXP 11
17208: IFFALSE 17259
// begin if IsOk ( Markov ) then
17210: LD_EXP 43
17214: PPUSH
17215: CALL_OW 302
17219: IFFALSE 17235
// Say ( Kaia , DK-Kaia-3 ) else
17221: LD_EXP 41
17225: PPUSH
17226: LD_STRING DK-Kaia-3
17228: PPUSH
17229: CALL_OW 88
17233: GO 17247
// Say ( Kaia , DK-Kaia-a-3 ) ;
17235: LD_EXP 41
17239: PPUSH
17240: LD_STRING DK-Kaia-a-3
17242: PPUSH
17243: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
17247: LD_EXP 36
17251: PPUSH
17252: LD_STRING DH-Kaia-4
17254: PPUSH
17255: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
17259: LD_EXP 41
17263: PPUSH
17264: LD_INT 2
17266: PPUSH
17267: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
17271: LD_ADDR_EXP 14
17275: PUSH
17276: LD_EXP 14
17280: PPUSH
17281: LD_EXP 41
17285: PPUSH
17286: CALL 63230 0 2
17290: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
17291: LD_EXP 41
17295: PPUSH
17296: CALL_OW 122
// end ; end ; ruWeaponsBar :
17300: GO 17882
17302: LD_INT 137
17304: DOUBLE
17305: EQUAL
17306: IFTRUE 17310
17308: GO 17881
17310: POP
// begin if hasWeapons then
17311: LD_EXP 19
17315: IFFALSE 17867
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
17317: LD_ADDR_EXP 16
17321: PUSH
17322: LD_EXP 16
17326: PUSH
17327: LD_INT 137
17329: DIFF
17330: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
17331: LD_ADDR_VAR 0 3
17335: PUSH
17336: LD_EXP 14
17340: PPUSH
17341: LD_INT 91
17343: PUSH
17344: LD_EXP 36
17348: PUSH
17349: LD_INT 8
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: LIST
17356: PPUSH
17357: CALL_OW 72
17361: ST_TO_ADDR
// if not heikeSquad or not tmp then
17362: LD_EXP 14
17366: NOT
17367: PUSH
17368: LD_VAR 0 3
17372: NOT
17373: OR
17374: IFFALSE 17390
// Say ( Heike , DH-Weapons-Alone ) else
17376: LD_EXP 36
17380: PPUSH
17381: LD_STRING DH-Weapons-Alone
17383: PPUSH
17384: CALL_OW 88
17388: GO 17865
// begin entranceVisitedList := Join ( entranceVisitedList , ruWeaponsBar ) ;
17390: LD_ADDR_EXP 16
17394: PUSH
17395: LD_EXP 16
17399: PPUSH
17400: LD_INT 137
17402: PPUSH
17403: CALL 63230 0 2
17407: ST_TO_ADDR
// Say ( Heike , DH-Weapons-1 ) ;
17408: LD_EXP 36
17412: PPUSH
17413: LD_STRING DH-Weapons-1
17415: PPUSH
17416: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
17420: LD_EXP 36
17424: PPUSH
17425: LD_STRING DH-Weapons-2
17427: PPUSH
17428: CALL_OW 88
// if hasRevolver and Kaia in tmp then
17432: LD_EXP 8
17436: PUSH
17437: LD_EXP 41
17441: PUSH
17442: LD_VAR 0 3
17446: IN
17447: AND
17448: IFFALSE 17537
// begin SetSide ( Kaia , 5 ) ;
17450: LD_EXP 41
17454: PPUSH
17455: LD_INT 5
17457: PPUSH
17458: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
17462: LD_EXP 41
17466: PPUSH
17467: LD_INT 137
17469: PPUSH
17470: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17474: LD_INT 35
17476: PPUSH
17477: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17481: LD_EXP 41
17485: PPUSH
17486: CALL_OW 310
17490: IFFALSE 17474
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
17492: LD_EXP 36
17496: PPUSH
17497: LD_STRING DH-Kaia-Revolver-2
17499: PPUSH
17500: CALL_OW 88
// SetClassKaiaRevolver ;
17504: CALL 1611 0 0
// hasRevolver := false ;
17508: LD_ADDR_EXP 8
17512: PUSH
17513: LD_INT 0
17515: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
17516: LD_EXP 41
17520: PPUSH
17521: LD_INT 2
17523: PPUSH
17524: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
17528: LD_EXP 41
17532: PPUSH
17533: CALL_OW 122
// end ; if Givi in tmp then
17537: LD_EXP 37
17541: PUSH
17542: LD_VAR 0 3
17546: IN
17547: IFFALSE 17688
// begin SetSide ( Givi , 5 ) ;
17549: LD_EXP 37
17553: PPUSH
17554: LD_INT 5
17556: PPUSH
17557: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
17561: LD_EXP 37
17565: PPUSH
17566: LD_INT 137
17568: PPUSH
17569: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17573: LD_INT 35
17575: PPUSH
17576: CALL_OW 67
// until IsInUnit ( Givi ) ;
17580: LD_EXP 37
17584: PPUSH
17585: CALL_OW 310
17589: IFFALSE 17573
// Say ( Givi , DG-Weapons-3 ) ;
17591: LD_EXP 37
17595: PPUSH
17596: LD_STRING DG-Weapons-3
17598: PPUSH
17599: CALL_OW 88
// Say ( Givi , DH-Weapons-4 ) ;
17603: LD_EXP 37
17607: PPUSH
17608: LD_STRING DH-Weapons-4
17610: PPUSH
17611: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
17615: LD_EXP 37
17619: PPUSH
17620: LD_STRING DG-Weapons-5
17622: PPUSH
17623: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
17627: LD_EXP 37
17631: PPUSH
17632: LD_INT 11
17634: PPUSH
17635: CALL_OW 336
// ComExitBuilding ( Givi ) ;
17639: LD_EXP 37
17643: PPUSH
17644: CALL_OW 122
// SetSide ( Givi , 2 ) ;
17648: LD_EXP 37
17652: PPUSH
17653: LD_INT 2
17655: PPUSH
17656: CALL_OW 235
// if hasRevolver then
17660: LD_EXP 8
17664: IFFALSE 17686
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17666: LD_EXP 36
17670: PPUSH
17671: LD_STRING DH-Kaia-Revolver-1
17673: PPUSH
17674: CALL_OW 88
// heikeHasRevolver := true ;
17678: LD_ADDR_EXP 20
17682: PUSH
17683: LD_INT 1
17685: ST_TO_ADDR
// end ; end else
17686: GO 17865
// if Kamil in tmp then
17688: LD_EXP 40
17692: PUSH
17693: LD_VAR 0 3
17697: IN
17698: IFFALSE 17827
// begin SetSide ( Kamil , 5 ) ;
17700: LD_EXP 40
17704: PPUSH
17705: LD_INT 5
17707: PPUSH
17708: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
17712: LD_EXP 40
17716: PPUSH
17717: LD_INT 137
17719: PPUSH
17720: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17724: LD_INT 35
17726: PPUSH
17727: CALL_OW 67
// until IsInUnit ( Kamil ) ;
17731: LD_EXP 40
17735: PPUSH
17736: CALL_OW 310
17740: IFFALSE 17724
// Say ( Kamil , DKam-Weapons-a-3 ) ;
17742: LD_EXP 40
17746: PPUSH
17747: LD_STRING DKam-Weapons-a-3
17749: PPUSH
17750: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
17754: LD_EXP 36
17758: PPUSH
17759: LD_STRING DH-Weapons-a-4
17761: PPUSH
17762: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
17766: LD_EXP 40
17770: PPUSH
17771: LD_INT 11
17773: PPUSH
17774: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
17778: LD_EXP 40
17782: PPUSH
17783: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
17787: LD_EXP 40
17791: PPUSH
17792: LD_INT 2
17794: PPUSH
17795: CALL_OW 235
// if hasRevolver then
17799: LD_EXP 8
17803: IFFALSE 17825
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
17805: LD_EXP 36
17809: PPUSH
17810: LD_STRING DH-Kaia-Revolver-1
17812: PPUSH
17813: CALL_OW 88
// heikeHasRevolver := true ;
17817: LD_ADDR_EXP 20
17821: PUSH
17822: LD_INT 1
17824: ST_TO_ADDR
// end ; end else
17825: GO 17865
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
17827: LD_EXP 36
17831: PPUSH
17832: LD_STRING DH-Weapons-Alone-2
17834: PPUSH
17835: CALL_OW 88
// if hasRevolver then
17839: LD_EXP 8
17843: IFFALSE 17865
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
17845: LD_EXP 36
17849: PPUSH
17850: LD_STRING DH-Kaia-Revolver-1a
17852: PPUSH
17853: CALL_OW 88
// heikeHasRevolver := true ;
17857: LD_ADDR_EXP 20
17861: PUSH
17862: LD_INT 1
17864: ST_TO_ADDR
// end ; end ; end ; end else
17865: GO 17879
// Say ( Heike , DH-Locked ) ;
17867: LD_EXP 36
17871: PPUSH
17872: LD_STRING DH-Locked
17874: PPUSH
17875: CALL_OW 88
// end ; end ;
17879: GO 17882
17881: POP
// ComExitBuilding ( Heike ) ;
17882: LD_EXP 36
17886: PPUSH
17887: CALL_OW 122
// SetSide ( Heike , 2 ) ;
17891: LD_EXP 36
17895: PPUSH
17896: LD_INT 2
17898: PPUSH
17899: CALL_OW 235
// SetSide ( building , 3 ) ;
17903: LD_VAR 0 1
17907: PPUSH
17908: LD_INT 3
17910: PPUSH
17911: CALL_OW 235
// InGameOff ;
17915: CALL_OW 9
// end ;
17919: LD_VAR 0 2
17923: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
17924: LD_EXP 30
17928: NOT
17929: PUSH
17930: LD_EXP 17
17934: NOT
17935: AND
17936: PUSH
17937: LD_INT 22
17939: PUSH
17940: LD_INT 5
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: LD_INT 21
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PPUSH
17961: CALL_OW 69
17965: PUSH
17966: LD_INT 0
17968: EQUAL
17969: AND
17970: PUSH
17971: LD_INT 22
17973: PUSH
17974: LD_INT 4
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 21
17983: PUSH
17984: LD_INT 1
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PPUSH
17995: CALL_OW 69
17999: PUSH
18000: LD_INT 0
18002: EQUAL
18003: PUSH
18004: LD_EXP 25
18008: AND
18009: PUSH
18010: LD_EXP 25
18014: NOT
18015: OR
18016: AND
18017: IFFALSE 18049
18019: GO 18021
18021: DISABLE
// begin DialogueOn ;
18022: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
18026: LD_EXP 36
18030: PPUSH
18031: LD_STRING DH-Alarm-2
18033: PPUSH
18034: CALL_OW 88
// DialogueOff ;
18038: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
18042: LD_STRING M1-people-out
18044: PPUSH
18045: CALL_OW 337
// end ; end_of_file
18049: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
18050: LD_VAR 0 1
18054: PUSH
18055: LD_INT 3
18057: DOUBLE
18058: EQUAL
18059: IFTRUE 18063
18061: GO 18093
18063: POP
// begin repeat wait ( 0 0$1 ) ;
18064: LD_INT 35
18066: PPUSH
18067: CALL_OW 67
// CenterOnUnits ( Heike ) ;
18071: LD_EXP 36
18075: PPUSH
18076: CALL_OW 85
// until IsDying ( Heike ) ;
18080: LD_EXP 36
18084: PPUSH
18085: CALL_OW 303
18089: IFFALSE 18064
// end ; end ;
18091: GO 18094
18093: POP
// end ;
18094: PPOPN 1
18096: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
18097: LD_OWVAR 59
18101: IFFALSE 18105
// exit ;
18103: GO 18179
// if showPlaceEvent then
18105: LD_INT 4
18107: IFFALSE 18179
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
18109: LD_VAR 0 2
18113: PPUSH
18114: LD_VAR 0 3
18118: PPUSH
18119: LD_INT 2
18121: PPUSH
18122: LD_INT 6
18124: NEG
18125: PPUSH
18126: CALL_OW 330
// CenterOnXY ( x , y ) ;
18130: LD_VAR 0 2
18134: PPUSH
18135: LD_VAR 0 3
18139: PPUSH
18140: CALL_OW 84
// wait ( time ) ;
18144: LD_VAR 0 4
18148: PPUSH
18149: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
18153: LD_EXP 36
18157: PPUSH
18158: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
18162: LD_VAR 0 2
18166: PPUSH
18167: LD_VAR 0 3
18171: PPUSH
18172: LD_INT 2
18174: PPUSH
18175: CALL_OW 331
// end ; end ;
18179: PPOPN 7
18181: END
// on UnitDestroyed ( un ) do begin if un = Heike and hasNormalScene then
18182: LD_VAR 0 1
18186: PUSH
18187: LD_EXP 36
18191: EQUAL
18192: PUSH
18193: LD_EXP 5
18197: AND
18198: IFFALSE 18222
// if loseCounter then
18200: LD_EXP 32
18204: IFFALSE 18215
// YouLost ( HeikeNoSurrender ) else
18206: LD_STRING HeikeNoSurrender
18208: PPUSH
18209: CALL_OW 104
18213: GO 18222
// YouLost ( Heike ) ;
18215: LD_STRING Heike
18217: PPUSH
18218: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 255
18231: PUSH
18232: LD_INT 2
18234: EQUAL
18235: PUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 247
18245: PUSH
18246: LD_INT 1
18248: EQUAL
18249: AND
18250: IFFALSE 18267
// loseCounter := Inc ( loseCounter ) ;
18252: LD_ADDR_EXP 32
18256: PUSH
18257: LD_EXP 32
18261: PPUSH
18262: CALL 64591 0 1
18266: ST_TO_ADDR
// end ;
18267: PPOPN 1
18269: END
// on Contact ( s1 , s2 ) do begin if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
18270: LD_VAR 0 1
18274: PUSH
18275: LD_INT 2
18277: EQUAL
18278: PUSH
18279: LD_VAR 0 2
18283: PUSH
18284: LD_INT 3
18286: EQUAL
18287: AND
18288: PUSH
18289: LD_VAR 0 1
18293: PUSH
18294: LD_INT 3
18296: EQUAL
18297: PUSH
18298: LD_VAR 0 2
18302: PUSH
18303: LD_INT 2
18305: EQUAL
18306: AND
18307: OR
18308: IFFALSE 18318
// isAlarm := true ;
18310: LD_ADDR_EXP 17
18314: PUSH
18315: LD_INT 1
18317: ST_TO_ADDR
// end ; end_of_file
18318: PPOPN 2
18320: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
18321: LD_INT 0
18323: PPUSH
18324: PPUSH
18325: PPUSH
// u1 := IsInUnit ( unit1 ) ;
18326: LD_ADDR_VAR 0 4
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 310
18340: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
18341: LD_ADDR_VAR 0 5
18345: PUSH
18346: LD_VAR 0 2
18350: PPUSH
18351: CALL_OW 310
18355: ST_TO_ADDR
// result := u1 and u1 = u2 ;
18356: LD_ADDR_VAR 0 3
18360: PUSH
18361: LD_VAR 0 4
18365: PUSH
18366: LD_VAR 0 4
18370: PUSH
18371: LD_VAR 0 5
18375: EQUAL
18376: AND
18377: ST_TO_ADDR
// end ;
18378: LD_VAR 0 3
18382: RET
// export function ShowPlace ( x , y , time ) ; begin
18383: LD_INT 0
18385: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
18386: LD_INT 4
18388: PPUSH
18389: LD_VAR 0 1
18393: PPUSH
18394: LD_VAR 0 2
18398: PPUSH
18399: LD_VAR 0 3
18403: PPUSH
18404: LD_INT 0
18406: PPUSH
18407: LD_INT 0
18409: PPUSH
18410: LD_INT 0
18412: PPUSH
18413: CALL_OW 595
// end ;
18417: LD_VAR 0 4
18421: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
18422: LD_INT 0
18424: PPUSH
18425: PPUSH
18426: PPUSH
18427: PPUSH
18428: PPUSH
18429: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
18430: LD_VAR 0 1
18434: PPUSH
18435: CALL_OW 302
18439: NOT
18440: PUSH
18441: LD_VAR 0 2
18445: PPUSH
18446: CALL_OW 302
18450: NOT
18451: OR
18452: PUSH
18453: LD_VAR 0 2
18457: PPUSH
18458: CALL_OW 313
18462: PUSH
18463: LD_INT 6
18465: EQUAL
18466: OR
18467: IFFALSE 18471
// exit ;
18469: GO 18684
// btype := GetBType ( building ) ;
18471: LD_ADDR_VAR 0 8
18475: PUSH
18476: LD_VAR 0 2
18480: PPUSH
18481: CALL_OW 266
18485: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
18486: LD_VAR 0 8
18490: PUSH
18491: LD_INT 0
18493: PUSH
18494: LD_INT 1
18496: PUSH
18497: LD_INT 4
18499: PUSH
18500: LD_INT 5
18502: PUSH
18503: LD_INT 3
18505: PUSH
18506: LD_INT 6
18508: PUSH
18509: LD_INT 7
18511: PUSH
18512: LD_INT 8
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: IN
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18684
// x := GetX ( building ) ;
18530: LD_ADDR_VAR 0 4
18534: PUSH
18535: LD_VAR 0 2
18539: PPUSH
18540: CALL_OW 250
18544: ST_TO_ADDR
// y := GetY ( building ) ;
18545: LD_ADDR_VAR 0 5
18549: PUSH
18550: LD_VAR 0 2
18554: PPUSH
18555: CALL_OW 251
18559: ST_TO_ADDR
// d := GetDir ( building ) ;
18560: LD_ADDR_VAR 0 6
18564: PUSH
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL_OW 254
18574: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
18575: LD_ADDR_VAR 0 7
18579: PUSH
18580: LD_VAR 0 4
18584: PPUSH
18585: LD_VAR 0 6
18589: PPUSH
18590: LD_INT 3
18592: PPUSH
18593: CALL_OW 272
18597: PUSH
18598: LD_VAR 0 5
18602: PPUSH
18603: LD_VAR 0 6
18607: PPUSH
18608: LD_INT 3
18610: PPUSH
18611: CALL_OW 273
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
18620: LD_VAR 0 7
18624: PUSH
18625: LD_INT 1
18627: ARRAY
18628: PPUSH
18629: LD_VAR 0 7
18633: PUSH
18634: LD_INT 2
18636: ARRAY
18637: PPUSH
18638: CALL_OW 488
18642: NOT
18643: IFFALSE 18647
// exit ;
18645: GO 18684
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
18647: LD_ADDR_VAR 0 3
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: LD_VAR 0 7
18661: PUSH
18662: LD_INT 1
18664: ARRAY
18665: PPUSH
18666: LD_VAR 0 7
18670: PUSH
18671: LD_INT 2
18673: ARRAY
18674: PPUSH
18675: CALL_OW 297
18679: PUSH
18680: LD_INT 4
18682: LESS
18683: ST_TO_ADDR
// end ;
18684: LD_VAR 0 3
18688: RET
// export function PlaceExplosives ( building ) ; begin
18689: LD_INT 0
18691: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
18692: LD_ADDR_EXP 29
18696: PUSH
18697: LD_EXP 29
18701: PPUSH
18702: LD_VAR 0 1
18706: PPUSH
18707: CALL 63230 0 2
18711: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
18712: LD_VAR 0 1
18716: PPUSH
18717: CALL_OW 250
18721: PPUSH
18722: LD_VAR 0 1
18726: PPUSH
18727: CALL_OW 251
18731: PPUSH
18732: LD_STRING PlantBomb
18734: PPUSH
18735: CALL_OW 366
// end ;
18739: LD_VAR 0 2
18743: RET
// export function CreateNature ; var i ; begin
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// PrepareFrog ;
18748: CALL 59712 0 0
// for i := 1 to 3 do
18752: LD_ADDR_VAR 0 2
18756: PUSH
18757: DOUBLE
18758: LD_INT 1
18760: DEC
18761: ST_TO_ADDR
18762: LD_INT 3
18764: PUSH
18765: FOR_TO
18766: IFFALSE 18785
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
18768: CALL_OW 44
18772: PPUSH
18773: LD_INT 24
18775: PPUSH
18776: LD_INT 0
18778: PPUSH
18779: CALL_OW 49
18783: GO 18765
18785: POP
18786: POP
// end ;
18787: LD_VAR 0 1
18791: RET
// export function MarkBuilding ( building , marker ) ; begin
18792: LD_INT 0
18794: PPUSH
// if marker then
18795: LD_VAR 0 2
18799: IFFALSE 18846
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
18801: LD_VAR 0 1
18805: PPUSH
18806: CALL_OW 250
18810: PPUSH
18811: LD_VAR 0 1
18815: PPUSH
18816: CALL_OW 251
18820: PPUSH
18821: LD_INT 2
18823: PPUSH
18824: LD_INT 3
18826: NEG
18827: PPUSH
18828: CALL_OW 330
// SetBName ( building , target ) ;
18832: LD_VAR 0 1
18836: PPUSH
18837: LD_STRING target
18839: PPUSH
18840: CALL_OW 500
// end else
18844: GO 18885
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
18846: LD_VAR 0 1
18850: PPUSH
18851: CALL_OW 250
18855: PPUSH
18856: LD_VAR 0 1
18860: PPUSH
18861: CALL_OW 251
18865: PPUSH
18866: LD_INT 2
18868: PPUSH
18869: CALL_OW 331
// SetBName ( building ,  ) ;
18873: LD_VAR 0 1
18877: PPUSH
18878: LD_STRING 
18880: PPUSH
18881: CALL_OW 500
// end ; end ; end_of_file
18885: LD_VAR 0 3
18889: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
18890: LD_INT 0
18892: PPUSH
// if not step then
18893: LD_LOC 1
18897: NOT
18898: IFFALSE 18908
// step := 1 ;
18900: LD_ADDR_LOC 1
18904: PUSH
18905: LD_INT 1
18907: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
18908: LD_STRING HEscape
18910: PUSH
18911: LD_LOC 1
18915: STR
18916: PPUSH
18917: CALL_OW 97
18921: PUSH
18922: LD_INT 1
18924: DOUBLE
18925: EQUAL
18926: IFTRUE 18930
18928: GO 18937
18930: POP
// LockerMinigameSearch ; 2 :
18931: CALL 18970 0 0
18935: GO 18953
18937: LD_INT 2
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 18952
18945: POP
// LockerMinigameSetCode ; end ;
18946: CALL 19044 0 0
18950: GO 18953
18952: POP
// if lockerCodeValid then
18953: LD_EXP 62
18957: IFFALSE 18961
// exit ;
18959: GO 18965
// StartLockerMinigame ;
18961: CALL 18890 0 0
// end ;
18965: LD_VAR 0 1
18969: RET
// function LockerMinigameSearch ; begin
18970: LD_INT 0
18972: PPUSH
// if code then
18973: LD_LOC 2
18977: IFFALSE 18993
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
18979: LD_EXP 36
18983: PPUSH
18984: LD_STRING DH-Escape-3-Hint-0
18986: PPUSH
18987: CALL_OW 88
// exit ;
18991: GO 19039
// end ; Randomize ;
18993: CALL_OW 10
// code := rand ( 1 , 5 ) ;
18997: LD_ADDR_LOC 2
19001: PUSH
19002: LD_INT 1
19004: PPUSH
19005: LD_INT 5
19007: PPUSH
19008: CALL_OW 12
19012: ST_TO_ADDR
// step := 2 ;
19013: LD_ADDR_LOC 1
19017: PUSH
19018: LD_INT 2
19020: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
19021: LD_EXP 36
19025: PPUSH
19026: LD_STRING DH-Escape-3-Hint-
19028: PUSH
19029: LD_LOC 2
19033: STR
19034: PPUSH
19035: CALL_OW 88
// end ;
19039: LD_VAR 0 1
19043: RET
// function LockerMinigameSetCode ; begin
19044: LD_INT 0
19046: PPUSH
// if not code then
19047: LD_LOC 2
19051: NOT
19052: IFFALSE 19062
// code := 0 ;
19054: LD_ADDR_LOC 2
19058: PUSH
19059: LD_INT 0
19061: ST_TO_ADDR
// lockerBusy := true ;
19062: LD_ADDR_EXP 63
19066: PUSH
19067: LD_INT 1
19069: ST_TO_ADDR
// InGameOff ;
19070: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
19074: LD_STRING initLockerMinigame("
19076: PUSH
19077: LD_LOC 2
19081: STR
19082: PUSH
19083: LD_STRING ")
19085: STR
19086: PPUSH
19087: CALL_OW 559
// step := 3 ;
19091: LD_ADDR_LOC 1
19095: PUSH
19096: LD_INT 3
19098: ST_TO_ADDR
// repeat wait ( 1 ) ;
19099: LD_INT 1
19101: PPUSH
19102: CALL_OW 67
// until not lockerBusy ;
19106: LD_EXP 63
19110: NOT
19111: IFFALSE 19099
// InGameOn ;
19113: CALL_OW 8
// if not lockerCodeValid then
19117: LD_EXP 62
19121: NOT
19122: IFFALSE 19148
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
19124: LD_EXP 36
19128: PPUSH
19129: LD_STRING DH-Escape-3-Fail-
19131: PUSH
19132: LD_INT 1
19134: PPUSH
19135: LD_INT 2
19137: PPUSH
19138: CALL_OW 12
19142: STR
19143: PPUSH
19144: CALL_OW 88
// end ; end_of_file
19148: LD_VAR 0 1
19152: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
19153: LD_VAR 0 2
19157: PUSH
19158: LD_INT 102
19160: EQUAL
19161: IFFALSE 19183
// begin lockerBusy := false ;
19163: LD_ADDR_EXP 63
19167: PUSH
19168: LD_INT 0
19170: ST_TO_ADDR
// lockerCodeValid := p3 ;
19171: LD_ADDR_EXP 62
19175: PUSH
19176: LD_VAR 0 3
19180: ST_TO_ADDR
// end else
19181: GO 19217
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
19183: LD_VAR 0 1
19187: PPUSH
19188: LD_VAR 0 2
19192: PPUSH
19193: LD_VAR 0 3
19197: PPUSH
19198: LD_VAR 0 4
19202: PPUSH
19203: LD_VAR 0 5
19207: PPUSH
19208: LD_VAR 0 6
19212: PPUSH
19213: CALL 67200 0 6
// end ;
19217: PPOPN 6
19219: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
19220: CALL 67171 0 0
// end ; end_of_file
19224: PPOPN 1
19226: END
// every 0 0$2 trigger not isAlarm marked gameStartEvent do var i , j , points , tag , tmp ;
19227: LD_EXP 17
19231: NOT
19232: IFFALSE 19636
19234: GO 19236
19236: DISABLE
19237: LD_INT 0
19239: PPUSH
19240: PPUSH
19241: PPUSH
19242: PPUSH
19243: PPUSH
// begin enable ;
19244: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_INT 26
19252: PUSH
19253: LD_INT 27
19255: PUSH
19256: LD_INT 28
19258: PUSH
19259: LD_INT 29
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 30
19270: PUSH
19271: LD_INT 31
19273: PUSH
19274: LD_INT 32
19276: PUSH
19277: LD_INT 33
19279: PUSH
19280: LD_INT 34
19282: PUSH
19283: LD_INT 35
19285: PUSH
19286: LD_INT 36
19288: PUSH
19289: LD_INT 37
19291: PUSH
19292: LD_INT 38
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: PUSH
19306: LD_INT 39
19308: PUSH
19309: LD_INT 40
19311: PUSH
19312: LD_INT 41
19314: PUSH
19315: LD_INT 42
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 43
19326: PUSH
19327: LD_INT 44
19329: PUSH
19330: LD_INT 45
19332: PUSH
19333: LD_INT 46
19335: PUSH
19336: LD_INT 47
19338: PUSH
19339: LD_INT 46
19341: PUSH
19342: LD_INT 45
19344: PUSH
19345: LD_INT 44
19347: PUSH
19348: LD_INT 43
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: ST_TO_ADDR
// for i in ruPatrol do
19368: LD_ADDR_VAR 0 1
19372: PUSH
19373: LD_EXP 61
19377: PUSH
19378: FOR_IN
19379: IFFALSE 19634
// begin tmp := UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_dist , i , 7 ] ] ) ;
19381: LD_ADDR_VAR 0 5
19385: PUSH
19386: LD_EXP 36
19390: PUSH
19391: LD_EXP 14
19395: UNION
19396: PPUSH
19397: LD_INT 22
19399: PUSH
19400: LD_INT 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 91
19409: PUSH
19410: LD_VAR 0 1
19414: PUSH
19415: LD_INT 7
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 72
19431: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
19432: LD_INT 2
19434: PPUSH
19435: LD_VAR 0 1
19439: PPUSH
19440: CALL_OW 292
19444: PUSH
19445: LD_VAR 0 5
19449: AND
19450: IFFALSE 19520
// begin if hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 then
19452: LD_EXP 30
19456: PUSH
19457: LD_VAR 0 1
19461: PPUSH
19462: LD_EXP 56
19466: PPUSH
19467: CALL_OW 296
19471: PUSH
19472: LD_INT 16
19474: LESS
19475: AND
19476: IFFALSE 19480
// continue ;
19478: GO 19378
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_VAR 0 5
19489: PPUSH
19490: LD_VAR 0 1
19494: PPUSH
19495: CALL_OW 74
19499: PPUSH
19500: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
19504: LD_VAR 0 1
19508: PPUSH
19509: LD_VAR 0 5
19513: PPUSH
19514: CALL 19639 0 2
// break ;
19518: GO 19634
// end ; if HasTask ( i ) then
19520: LD_VAR 0 1
19524: PPUSH
19525: CALL_OW 314
19529: IFFALSE 19533
// continue ;
19531: GO 19378
// tag := GetTag ( i ) ;
19533: LD_ADDR_VAR 0 4
19537: PUSH
19538: LD_VAR 0 1
19542: PPUSH
19543: CALL_OW 110
19547: ST_TO_ADDR
// if not tag then
19548: LD_VAR 0 4
19552: NOT
19553: IFFALSE 19566
// begin ComHold ( i ) ;
19555: LD_VAR 0 1
19559: PPUSH
19560: CALL_OW 140
// continue ;
19564: GO 19378
// end ; for j := 1 to points [ tag ] do
19566: LD_ADDR_VAR 0 2
19570: PUSH
19571: DOUBLE
19572: LD_INT 1
19574: DEC
19575: ST_TO_ADDR
19576: LD_VAR 0 3
19580: PUSH
19581: LD_VAR 0 4
19585: ARRAY
19586: PUSH
19587: FOR_TO
19588: IFFALSE 19630
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
19590: LD_VAR 0 1
19594: PPUSH
19595: LD_VAR 0 3
19599: PUSH
19600: LD_VAR 0 4
19604: ARRAY
19605: PUSH
19606: LD_VAR 0 2
19610: ARRAY
19611: PPUSH
19612: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
19616: LD_VAR 0 1
19620: PPUSH
19621: LD_INT 70
19623: PPUSH
19624: CALL_OW 202
// end ;
19628: GO 19587
19630: POP
19631: POP
// end ;
19632: GO 19378
19634: POP
19635: POP
// end ;
19636: PPOPN 5
19638: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
19639: LD_INT 0
19641: PPUSH
19642: PPUSH
19643: PPUSH
// if UnitFilter ( units , [ f_nation , nation_russian ] ) then
19644: LD_VAR 0 2
19648: PPUSH
19649: LD_INT 23
19651: PUSH
19652: LD_INT 3
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 72
19663: IFFALSE 19667
// exit ;
19665: GO 20371
// DialogueOn ;
19667: CALL_OW 6
// CenterNowOnUnits ( guard ) ;
19671: LD_VAR 0 1
19675: PPUSH
19676: CALL_OW 87
// if not Heike in units then
19680: LD_EXP 36
19684: PUSH
19685: LD_VAR 0 2
19689: IN
19690: NOT
19691: IFFALSE 19848
// begin case GetSex ( guard ) of sex_male :
19693: LD_VAR 0 1
19697: PPUSH
19698: CALL_OW 258
19702: PUSH
19703: LD_INT 1
19705: DOUBLE
19706: EQUAL
19707: IFTRUE 19711
19709: GO 19726
19711: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
19712: LD_VAR 0 1
19716: PPUSH
19717: LD_STRING DRum-Guard-1
19719: PPUSH
19720: CALL_OW 88
19724: GO 19750
19726: LD_INT 2
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19749
19734: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
19735: LD_VAR 0 1
19739: PPUSH
19740: LD_STRING DRuf-Guard-1
19742: PPUSH
19743: CALL_OW 88
19747: GO 19750
19749: POP
// Query ( CaughtSquadInfo ) ;
19750: LD_STRING CaughtSquadInfo
19752: PPUSH
19753: CALL_OW 97
// for i in units do
19757: LD_ADDR_VAR 0 4
19761: PUSH
19762: LD_VAR 0 2
19766: PUSH
19767: FOR_IN
19768: IFFALSE 19825
// begin if Carry ( i ) then
19770: LD_VAR 0 4
19774: PPUSH
19775: CALL_OW 281
19779: IFFALSE 19796
// SetCargo ( i , mat_cans , 0 ) ;
19781: LD_VAR 0 4
19785: PPUSH
19786: LD_INT 1
19788: PPUSH
19789: LD_INT 0
19791: PPUSH
19792: CALL_OW 290
// SetSide ( i , 5 ) ;
19796: LD_VAR 0 4
19800: PPUSH
19801: LD_INT 5
19803: PPUSH
19804: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
19808: LD_VAR 0 4
19812: PPUSH
19813: LD_INT 113
19815: PPUSH
19816: LD_INT 17
19818: PPUSH
19819: CALL_OW 111
// end ;
19823: GO 19767
19825: POP
19826: POP
// ComMoveXY ( guard , 113 , 17 ) ;
19827: LD_VAR 0 1
19831: PPUSH
19832: LD_INT 113
19834: PPUSH
19835: LD_INT 17
19837: PPUSH
19838: CALL_OW 111
// DialogueOff ;
19842: CALL_OW 7
// exit ;
19846: GO 20371
// end ; if Carry ( Heike ) then
19848: LD_EXP 36
19852: PPUSH
19853: CALL_OW 281
19857: IFFALSE 19933
// begin case GetSex ( guard ) of sex_male :
19859: LD_VAR 0 1
19863: PPUSH
19864: CALL_OW 258
19868: PUSH
19869: LD_INT 1
19871: DOUBLE
19872: EQUAL
19873: IFTRUE 19877
19875: GO 19892
19877: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
19878: LD_VAR 0 1
19882: PPUSH
19883: LD_STRING DRum-FoodFail-1
19885: PPUSH
19886: CALL_OW 88
19890: GO 19916
19892: LD_INT 2
19894: DOUBLE
19895: EQUAL
19896: IFTRUE 19900
19898: GO 19915
19900: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
19901: LD_VAR 0 1
19905: PPUSH
19906: LD_STRING DRuf-FoodFail-2
19908: PPUSH
19909: CALL_OW 88
19913: GO 19916
19915: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
19916: LD_EXP 36
19920: PPUSH
19921: LD_INT 1
19923: PPUSH
19924: LD_INT 0
19926: PPUSH
19927: CALL_OW 290
// end else
19931: GO 19990
// begin case GetSex ( guard ) of sex_male :
19933: LD_VAR 0 1
19937: PPUSH
19938: CALL_OW 258
19942: PUSH
19943: LD_INT 1
19945: DOUBLE
19946: EQUAL
19947: IFTRUE 19951
19949: GO 19966
19951: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
19952: LD_VAR 0 1
19956: PPUSH
19957: LD_STRING DRum-Seen-1
19959: PPUSH
19960: CALL_OW 88
19964: GO 19990
19966: LD_INT 2
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 19989
19974: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
19975: LD_VAR 0 1
19979: PPUSH
19980: LD_STRING DRuf-Seen-1
19982: PPUSH
19983: CALL_OW 88
19987: GO 19990
19989: POP
// end ; alone := ( units = 1 ) ;
19990: LD_ADDR_VAR 0 5
19994: PUSH
19995: LD_VAR 0 2
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
20004: LD_STRING SurrenderInfo
20006: PPUSH
20007: CALL_OW 97
20011: PUSH
20012: LD_INT 1
20014: DOUBLE
20015: EQUAL
20016: IFTRUE 20020
20018: GO 20189
20020: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
20021: LD_INT 23
20023: PPUSH
20024: CALL_OW 87
// RemoveUnit ( Heike ) ;
20028: LD_EXP 36
20032: PPUSH
20033: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
20037: LD_EXP 36
20041: PPUSH
20042: LD_INT 23
20044: PPUSH
20045: CALL_OW 52
// if not alone then
20049: LD_VAR 0 5
20053: NOT
20054: IFFALSE 20109
// for i in units diff Heike do
20056: LD_ADDR_VAR 0 4
20060: PUSH
20061: LD_VAR 0 2
20065: PUSH
20066: LD_EXP 36
20070: DIFF
20071: PUSH
20072: FOR_IN
20073: IFFALSE 20107
// begin RemoveUnit ( i ) ;
20075: LD_VAR 0 4
20079: PPUSH
20080: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
20084: LD_VAR 0 4
20088: PPUSH
20089: LD_INT 114
20091: PPUSH
20092: LD_INT 17
20094: PPUSH
20095: LD_INT 10
20097: PPUSH
20098: LD_INT 0
20100: PPUSH
20101: CALL_OW 50
// end ;
20105: GO 20072
20107: POP
20108: POP
// wait ( 0 0$0.3 ) ;
20109: LD_INT 10
20111: PPUSH
20112: CALL_OW 67
// if alone then
20116: LD_VAR 0 5
20120: IFFALSE 20131
// Query ( CaughtInfoAlone ) else
20122: LD_STRING CaughtInfoAlone
20124: PPUSH
20125: CALL_OW 97
20129: GO 20138
// Query ( CaughtInfo ) ;
20131: LD_STRING CaughtInfo
20133: PPUSH
20134: CALL_OW 97
// wait ( 0 0$1 ) ;
20138: LD_INT 35
20140: PPUSH
20141: CALL_OW 67
// StartLockerMinigame ;
20145: CALL 18890 0 0
// Say ( Heike , DH-Reset ) ;
20149: LD_EXP 36
20153: PPUSH
20154: LD_STRING DH-Reset
20156: PPUSH
20157: CALL_OW 88
// DialogueOff ;
20161: CALL_OW 7
// InGameOff ;
20165: CALL_OW 9
// ComExitBuilding ( Heike ) ;
20169: LD_EXP 36
20173: PPUSH
20174: CALL_OW 122
// ComFree ( guard ) ;
20178: LD_VAR 0 1
20182: PPUSH
20183: CALL_OW 139
// end ; 2 :
20187: GO 20371
20189: LD_INT 2
20191: DOUBLE
20192: EQUAL
20193: IFTRUE 20197
20195: GO 20370
20197: POP
// begin Say ( Heike , DH-Guard-2 ) ;
20198: LD_EXP 36
20202: PPUSH
20203: LD_STRING DH-Guard-2
20205: PPUSH
20206: CALL_OW 88
// DialogueOff ;
20210: CALL_OW 7
// wait ( 0 0$2 ) ;
20214: LD_INT 70
20216: PPUSH
20217: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20221: LD_INT 6
20223: PPUSH
20224: LD_INT 2
20226: PPUSH
20227: LD_INT 2
20229: PPUSH
20230: LD_INT 1
20232: PPUSH
20233: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
20237: LD_VAR 0 1
20241: PPUSH
20242: LD_EXP 36
20246: PPUSH
20247: CALL_OW 115
// case GetSex ( guard ) of sex_male :
20251: LD_VAR 0 1
20255: PPUSH
20256: CALL_OW 258
20260: PUSH
20261: LD_INT 1
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20284
20269: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
20270: LD_VAR 0 1
20274: PPUSH
20275: LD_STRING DRum-Fail-3
20277: PPUSH
20278: CALL_OW 88
20282: GO 20308
20284: LD_INT 2
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20307
20292: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
20293: LD_VAR 0 1
20297: PPUSH
20298: LD_STRING DRum-Fail-3
20300: PPUSH
20301: CALL_OW 88
20305: GO 20308
20307: POP
// wait ( 0 0$5 ) ;
20308: LD_INT 175
20310: PPUSH
20311: CALL_OW 67
// if IsOk ( guard ) then
20315: LD_VAR 0 1
20319: PPUSH
20320: CALL_OW 302
20324: IFFALSE 20336
// isAlarm := true else
20326: LD_ADDR_EXP 17
20330: PUSH
20331: LD_INT 1
20333: ST_TO_ADDR
20334: GO 20368
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
20336: LD_INT 6
20338: PPUSH
20339: LD_INT 2
20341: PPUSH
20342: LD_INT 0
20344: PPUSH
20345: LD_INT 1
20347: PPUSH
20348: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
20352: LD_INT 3
20354: PPUSH
20355: LD_INT 2
20357: PPUSH
20358: LD_INT 0
20360: PPUSH
20361: LD_INT 1
20363: PPUSH
20364: CALL_OW 80
// end ; end ; end ;
20368: GO 20371
20370: POP
// end ;
20371: LD_VAR 0 3
20375: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
20376: LD_EXP 14
20380: PPUSH
20381: LD_INT 22
20383: PUSH
20384: LD_INT 5
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 3
20393: PUSH
20394: LD_INT 101
20396: PUSH
20397: LD_INT 6
20399: PUSH
20400: EMPTY
20401: LIST
20402: LIST
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: PUSH
20408: LD_INT 92
20410: PUSH
20411: LD_INT 113
20413: PUSH
20414: LD_INT 16
20416: PUSH
20417: LD_INT 12
20419: PUSH
20420: EMPTY
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 91
20428: PUSH
20429: LD_EXP 36
20433: PUSH
20434: LD_INT 6
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: LIST
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: LIST
20447: PPUSH
20448: CALL_OW 72
20452: PUSH
20453: LD_EXP 30
20457: NOT
20458: AND
20459: IFFALSE 20564
20461: GO 20463
20463: DISABLE
20464: LD_INT 0
20466: PPUSH
// begin enable ;
20467: ENABLE
// DialogueOn ;
20468: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
20472: LD_EXP 36
20476: PPUSH
20477: LD_STRING DH-Join-
20479: PUSH
20480: LD_INT 1
20482: PPUSH
20483: LD_INT 3
20485: PPUSH
20486: CALL_OW 12
20490: STR
20491: PPUSH
20492: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
20496: LD_ADDR_VAR 0 1
20500: PUSH
20501: LD_EXP 14
20505: PPUSH
20506: LD_INT 22
20508: PUSH
20509: LD_INT 5
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 91
20518: PUSH
20519: LD_EXP 36
20523: PUSH
20524: LD_INT 10
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PPUSH
20536: CALL_OW 72
20540: PUSH
20541: FOR_IN
20542: IFFALSE 20558
// SetSide ( i , 2 ) ;
20544: LD_VAR 0 1
20548: PPUSH
20549: LD_INT 2
20551: PPUSH
20552: CALL_OW 235
20556: GO 20541
20558: POP
20559: POP
// DialogueOff ;
20560: CALL_OW 7
// end ; end_of_file
20564: PPOPN 1
20566: END
// every 0 0$2 trigger isAlarm do var i , points , tmp ;
20567: LD_EXP 17
20571: IFFALSE 20866
20573: GO 20575
20575: DISABLE
20576: LD_INT 0
20578: PPUSH
20579: PPUSH
20580: PPUSH
// begin DialogueOn ;
20581: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
20585: LD_EXP 36
20589: PPUSH
20590: LD_STRING DH-Alarm-1
20592: PPUSH
20593: CALL_OW 88
// DialogueOff ;
20597: CALL_OW 7
// PlaySoundXY ( 157 , 68 , alarm ) ;
20601: LD_INT 157
20603: PPUSH
20604: LD_INT 68
20606: PPUSH
20607: LD_STRING alarm
20609: PPUSH
20610: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
20614: LD_INT 3
20616: PPUSH
20617: LD_INT 2
20619: PPUSH
20620: LD_INT 2
20622: PPUSH
20623: LD_INT 1
20625: PPUSH
20626: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
20630: LD_INT 6
20632: PPUSH
20633: LD_INT 2
20635: PPUSH
20636: LD_INT 2
20638: PPUSH
20639: LD_INT 1
20641: PPUSH
20642: CALL_OW 80
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
20646: LD_ADDR_VAR 0 2
20650: PUSH
20651: LD_INT 107
20653: PUSH
20654: LD_INT 39
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 143
20663: PUSH
20664: LD_INT 33
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 180
20673: PUSH
20674: LD_INT 115
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 96
20683: PUSH
20684: LD_INT 90
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 59
20693: PUSH
20694: LD_INT 52
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 16
20703: PUSH
20704: LD_INT 15
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 90
20713: PUSH
20714: LD_INT 120
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
20730: LD_ADDR_VAR 0 3
20734: PUSH
20735: LD_INT 22
20737: PUSH
20738: LD_INT 6
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: LD_INT 25
20747: PUSH
20748: LD_INT 1
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: EMPTY
20756: LIST
20757: LIST
20758: PPUSH
20759: CALL_OW 69
20763: ST_TO_ADDR
// for i in tmp do
20764: LD_ADDR_VAR 0 1
20768: PUSH
20769: LD_VAR 0 3
20773: PUSH
20774: FOR_IN
20775: IFFALSE 20843
// begin ComExit ( i ) ;
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL 63628 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
20786: LD_VAR 0 1
20790: PPUSH
20791: LD_VAR 0 2
20795: PUSH
20796: LD_VAR 0 1
20800: PUSH
20801: LD_INT 7
20803: MOD
20804: PUSH
20805: LD_INT 1
20807: PLUS
20808: ARRAY
20809: PUSH
20810: LD_INT 1
20812: ARRAY
20813: PPUSH
20814: LD_VAR 0 2
20818: PUSH
20819: LD_VAR 0 1
20823: PUSH
20824: LD_INT 7
20826: MOD
20827: PUSH
20828: LD_INT 1
20830: PLUS
20831: ARRAY
20832: PUSH
20833: LD_INT 2
20835: ARRAY
20836: PPUSH
20837: CALL_OW 174
// end ;
20841: GO 20774
20843: POP
20844: POP
// wait ( 0 0$35 ) ;
20845: LD_INT 1225
20847: PPUSH
20848: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
20852: LD_VAR 0 3
20856: PPUSH
20857: LD_EXP 36
20861: PPUSH
20862: CALL_OW 175
// end ;
20866: PPOPN 3
20868: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
20869: LD_INT 22
20871: PUSH
20872: LD_INT 2
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 21
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 2
20891: PUSH
20892: LD_INT 101
20894: PUSH
20895: LD_INT 3
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 101
20904: PUSH
20905: LD_INT 6
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: PPUSH
20922: CALL_OW 69
20926: IFFALSE 20939
20928: GO 20930
20930: DISABLE
// isAlarm := true ; end_of_file
20931: LD_ADDR_EXP 17
20935: PUSH
20936: LD_INT 1
20938: ST_TO_ADDR
20939: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
20940: LD_EXP 14
20944: PPUSH
20945: LD_INT 22
20947: PUSH
20948: LD_INT 2
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 72
20959: PUSH
20960: LD_INT 3
20962: GREATER
20963: PUSH
20964: LD_EXP 17
20968: NOT
20969: AND
20970: IFFALSE 24814
20972: GO 20974
20974: DISABLE
20975: LD_INT 0
20977: PPUSH
20978: PPUSH
20979: PPUSH
20980: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
20981: LD_EXP 56
20985: PPUSH
20986: LD_INT 155
20988: PPUSH
20989: LD_INT 68
20991: PPUSH
20992: LD_INT 0
20994: PPUSH
20995: CALL_OW 48
// wait ( 0 0$1 ) ;
20999: LD_INT 35
21001: PPUSH
21002: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21006: LD_INT 35
21008: PPUSH
21009: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21013: LD_EXP 56
21017: PPUSH
21018: CALL_OW 314
21022: NOT
21023: IFFALSE 21039
// ComMoveUnit ( ruDisturb , Heike ) ;
21025: LD_EXP 56
21029: PPUSH
21030: LD_EXP 36
21034: PPUSH
21035: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21039: LD_EXP 36
21043: PPUSH
21044: LD_EXP 56
21048: PPUSH
21049: CALL_OW 296
21053: PUSH
21054: LD_INT 6
21056: LESS
21057: PUSH
21058: LD_EXP 56
21062: PPUSH
21063: CALL_OW 302
21067: AND
21068: IFFALSE 21006
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21070: LD_EXP 14
21074: PPUSH
21075: LD_INT 22
21077: PUSH
21078: LD_INT 2
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: PUSH
21085: LD_INT 91
21087: PUSH
21088: LD_EXP 56
21092: PUSH
21093: LD_INT 8
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: LIST
21100: PUSH
21101: LD_INT 2
21103: PUSH
21104: LD_INT 25
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 25
21116: PUSH
21117: LD_INT 11
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 25
21126: PUSH
21127: LD_INT 32
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 25
21136: PUSH
21137: LD_INT 34
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: PPUSH
21156: CALL_OW 72
21160: IFFALSE 21170
// isAlarm := true ;
21162: LD_ADDR_EXP 17
21166: PUSH
21167: LD_INT 1
21169: ST_TO_ADDR
// if isAlarm then
21170: LD_EXP 17
21174: IFFALSE 21178
// exit ;
21176: GO 24814
// DialogueOn ;
21178: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
21182: LD_EXP 56
21186: PPUSH
21187: LD_STRING DMcn-Interrupt-1
21189: PPUSH
21190: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
21194: LD_EXP 56
21198: PPUSH
21199: LD_STRING DMcn-Interrupt-2
21201: PPUSH
21202: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
21206: LD_EXP 56
21210: PPUSH
21211: LD_STRING DMcn-Interrupt-3
21213: PPUSH
21214: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
21218: LD_EXP 36
21222: PPUSH
21223: LD_STRING DH-Interrupt-a-4
21225: PPUSH
21226: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
21230: LD_EXP 56
21234: PPUSH
21235: LD_STRING DMcn-Interrupt-a-5
21237: PPUSH
21238: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
21242: LD_EXP 36
21246: PPUSH
21247: LD_STRING DH-Interrupt-a-6
21249: PPUSH
21250: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
21254: LD_EXP 56
21258: PPUSH
21259: LD_STRING DMcn-Interrupt-a-7
21261: PPUSH
21262: CALL_OW 88
// DialogueOff ;
21266: CALL_OW 7
// hasMuchin := true ;
21270: LD_ADDR_EXP 30
21274: PUSH
21275: LD_INT 1
21277: ST_TO_ADDR
// Query ( MuchinInfo ) ;
21278: LD_STRING MuchinInfo
21280: PPUSH
21281: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
21285: LD_STRING M2a
21287: PPUSH
21288: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
21292: LD_INT 105
21294: PPUSH
21295: LD_INT 55
21297: PPUSH
21298: CALL_OW 428
21302: PPUSH
21303: LD_INT 2
21305: PPUSH
21306: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
21310: LD_INT 115
21312: PPUSH
21313: LD_INT 65
21315: PPUSH
21316: CALL_OW 428
21320: PPUSH
21321: LD_INT 2
21323: PPUSH
21324: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
21328: LD_INT 109
21330: PPUSH
21331: LD_INT 59
21333: PPUSH
21334: LD_INT 2
21336: PPUSH
21337: LD_INT 10
21339: NEG
21340: PPUSH
21341: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
21345: LD_INT 109
21347: PPUSH
21348: LD_INT 59
21350: PPUSH
21351: CALL_OW 84
// wait ( 0 0$2 ) ;
21355: LD_INT 70
21357: PPUSH
21358: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
21362: LD_INT 109
21364: PPUSH
21365: LD_INT 59
21367: PPUSH
21368: LD_INT 2
21370: PPUSH
21371: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
21375: LD_INT 35
21377: PPUSH
21378: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
21382: LD_EXP 56
21386: PPUSH
21387: LD_EXP 36
21391: PPUSH
21392: CALL_OW 296
21396: PUSH
21397: LD_INT 6
21399: GREATER
21400: IFFALSE 21416
// ComMoveUnit ( ruDisturb , Heike ) ;
21402: LD_EXP 56
21406: PPUSH
21407: LD_EXP 36
21411: PPUSH
21412: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21416: LD_EXP 14
21420: PPUSH
21421: LD_INT 22
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 91
21433: PUSH
21434: LD_EXP 56
21438: PUSH
21439: LD_INT 8
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 25
21452: PUSH
21453: LD_INT 1
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 25
21462: PUSH
21463: LD_INT 11
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 25
21472: PUSH
21473: LD_INT 32
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 25
21482: PUSH
21483: LD_INT 34
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: LIST
21501: PPUSH
21502: CALL_OW 72
21506: IFFALSE 21518
// begin isAlarm := true ;
21508: LD_ADDR_EXP 17
21512: PUSH
21513: LD_INT 1
21515: ST_TO_ADDR
// exit ;
21516: GO 24814
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
21518: LD_INT 105
21520: PPUSH
21521: LD_INT 55
21523: PPUSH
21524: CALL_OW 428
21528: NOT
21529: PUSH
21530: LD_INT 115
21532: PPUSH
21533: LD_INT 65
21535: PPUSH
21536: CALL_OW 428
21540: NOT
21541: OR
21542: IFFALSE 21554
// begin isAlarm := true ;
21544: LD_ADDR_EXP 17
21548: PUSH
21549: LD_INT 1
21551: ST_TO_ADDR
// exit ;
21552: GO 24814
// end ; until not BuildingsInProgress ( 2 ) ;
21554: LD_INT 2
21556: PPUSH
21557: CALL_OW 345
21561: NOT
21562: IFFALSE 21375
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
21564: LD_INT 105
21566: PPUSH
21567: LD_INT 55
21569: PPUSH
21570: CALL_OW 428
21574: PPUSH
21575: LD_INT 3
21577: PPUSH
21578: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
21582: LD_INT 115
21584: PPUSH
21585: LD_INT 65
21587: PPUSH
21588: CALL_OW 428
21592: PPUSH
21593: LD_INT 3
21595: PPUSH
21596: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
21600: LD_STRING M2a-out
21602: PPUSH
21603: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
21607: LD_EXP 56
21611: PPUSH
21612: LD_INT 2
21614: PPUSH
21615: CALL_OW 120
// wait ( 0 0$3 ) ;
21619: LD_INT 105
21621: PPUSH
21622: CALL_OW 67
// hasMuchin := false ;
21626: LD_ADDR_EXP 30
21630: PUSH
21631: LD_INT 0
21633: ST_TO_ADDR
// wait ( 2 2$00 ) ;
21634: LD_INT 4200
21636: PPUSH
21637: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
21641: LD_INT 35
21643: PPUSH
21644: CALL_OW 67
// if not HasTask ( ruDisturb ) then
21648: LD_EXP 56
21652: PPUSH
21653: CALL_OW 314
21657: NOT
21658: IFFALSE 21674
// ComMoveUnit ( ruDisturb , Heike ) ;
21660: LD_EXP 56
21664: PPUSH
21665: LD_EXP 36
21669: PPUSH
21670: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
21674: LD_EXP 36
21678: PPUSH
21679: LD_EXP 56
21683: PPUSH
21684: CALL_OW 296
21688: PUSH
21689: LD_INT 6
21691: LESS
21692: PUSH
21693: LD_EXP 56
21697: PPUSH
21698: CALL_OW 302
21702: AND
21703: IFFALSE 21641
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
21705: LD_EXP 14
21709: PPUSH
21710: LD_INT 22
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: LD_INT 91
21722: PUSH
21723: LD_EXP 56
21727: PUSH
21728: LD_INT 8
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 25
21741: PUSH
21742: LD_INT 1
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 25
21751: PUSH
21752: LD_INT 11
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 25
21761: PUSH
21762: LD_INT 32
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: LD_INT 25
21771: PUSH
21772: LD_INT 34
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: LIST
21790: PPUSH
21791: CALL_OW 72
21795: IFFALSE 21805
// isAlarm := true ;
21797: LD_ADDR_EXP 17
21801: PUSH
21802: LD_INT 1
21804: ST_TO_ADDR
// if isAlarm then
21805: LD_EXP 17
21809: IFFALSE 21813
// exit ;
21811: GO 24814
// DialogueOn ;
21813: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
21817: LD_EXP 56
21821: PPUSH
21822: LD_STRING DMcn-Interrupt-1
21824: PPUSH
21825: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
21829: LD_EXP 56
21833: PPUSH
21834: LD_STRING DMcn-Interrupt-2
21836: PPUSH
21837: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
21841: LD_INT 176
21843: PPUSH
21844: LD_INT 54
21846: PPUSH
21847: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
21851: LD_INT 176
21853: PPUSH
21854: LD_INT 54
21856: PPUSH
21857: LD_INT 2
21859: PPUSH
21860: LD_INT 6
21862: NEG
21863: PPUSH
21864: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
21868: LD_INT 10
21870: PPUSH
21871: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
21875: LD_EXP 56
21879: PPUSH
21880: LD_STRING DMcn-Interrupt-b-3
21882: PPUSH
21883: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
21887: LD_EXP 36
21891: PPUSH
21892: LD_STRING DH-Interrupt-b-4
21894: PPUSH
21895: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
21899: LD_EXP 56
21903: PPUSH
21904: LD_STRING DMcn-Interrupt-b-5
21906: PPUSH
21907: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
21911: LD_EXP 36
21915: PPUSH
21916: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
21920: LD_INT 176
21922: PPUSH
21923: LD_INT 54
21925: PPUSH
21926: LD_INT 2
21928: PPUSH
21929: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
21933: LD_EXP 56
21937: PPUSH
21938: LD_STRING DMcn-Interrupt-b-6
21940: PPUSH
21941: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
21945: LD_EXP 36
21949: PPUSH
21950: LD_STRING DH-Interrupt-b-7
21952: PPUSH
21953: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
21957: LD_EXP 56
21961: PPUSH
21962: LD_STRING DMcn-Interrupt-b-8
21964: PPUSH
21965: CALL_OW 88
// DialogueOff ;
21969: CALL_OW 7
// Query ( MuchinInfo ) ;
21973: LD_STRING MuchinInfo
21975: PPUSH
21976: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
21980: LD_STRING M2b
21982: PPUSH
21983: CALL_OW 337
// hasMuchin := true ;
21987: LD_ADDR_EXP 30
21991: PUSH
21992: LD_INT 1
21994: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
21995: LD_INT 35
21997: PPUSH
21998: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
22002: LD_EXP 56
22006: PPUSH
22007: LD_EXP 36
22011: PPUSH
22012: CALL_OW 296
22016: PUSH
22017: LD_INT 6
22019: GREATER
22020: IFFALSE 22036
// ComMoveUnit ( ruDisturb , Heike ) ;
22022: LD_EXP 56
22026: PPUSH
22027: LD_EXP 36
22031: PPUSH
22032: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
22036: LD_EXP 14
22040: PPUSH
22041: LD_INT 22
22043: PUSH
22044: LD_INT 2
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: LD_INT 91
22053: PUSH
22054: LD_EXP 56
22058: PUSH
22059: LD_INT 8
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: LD_INT 25
22072: PUSH
22073: LD_INT 1
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 25
22082: PUSH
22083: LD_INT 11
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 25
22092: PUSH
22093: LD_INT 32
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 25
22102: PUSH
22103: LD_INT 34
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: PPUSH
22122: CALL_OW 72
22126: IFFALSE 22138
// begin isAlarm := true ;
22128: LD_ADDR_EXP 17
22132: PUSH
22133: LD_INT 1
22135: ST_TO_ADDR
// exit ;
22136: GO 24814
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
22138: LD_EXP 36
22142: PPUSH
22143: LD_INT 61
22145: PPUSH
22146: CALL_OW 296
22150: PUSH
22151: LD_INT 4
22153: LESS
22154: IFFALSE 21995
// InGameOn ;
22156: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
22160: LD_INT 173
22162: PPUSH
22163: LD_INT 54
22165: PPUSH
22166: LD_INT 2
22168: PPUSH
22169: LD_INT 8
22171: NEG
22172: PPUSH
22173: CALL_OW 330
// SetSide ( Heike , 3 ) ;
22177: LD_EXP 36
22181: PPUSH
22182: LD_INT 3
22184: PPUSH
22185: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
22189: LD_EXP 36
22193: PPUSH
22194: LD_INT 61
22196: PPUSH
22197: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
22201: LD_EXP 56
22205: PPUSH
22206: LD_INT 61
22208: PPUSH
22209: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
22213: LD_EXP 43
22217: PUSH
22218: LD_EXP 14
22222: IN
22223: PUSH
22224: LD_EXP 43
22228: PPUSH
22229: LD_INT 61
22231: PPUSH
22232: CALL_OW 296
22236: PUSH
22237: LD_INT 12
22239: LESS
22240: AND
22241: IFFALSE 22285
// begin SetSide ( Markov , 3 ) ;
22243: LD_EXP 43
22247: PPUSH
22248: LD_INT 3
22250: PPUSH
22251: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
22255: LD_EXP 43
22259: PPUSH
22260: LD_INT 61
22262: PPUSH
22263: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
22267: LD_INT 35
22269: PPUSH
22270: CALL_OW 67
// until IsInUnit ( Markov ) ;
22274: LD_EXP 43
22278: PPUSH
22279: CALL_OW 310
22283: IFFALSE 22267
// end ; repeat wait ( 0 0$1 ) ;
22285: LD_INT 35
22287: PPUSH
22288: CALL_OW 67
// until IsInUnit ( Heike ) ;
22292: LD_EXP 36
22296: PPUSH
22297: CALL_OW 310
22301: IFFALSE 22285
// SetClass ( Heike , class_mechanic ) ;
22303: LD_EXP 36
22307: PPUSH
22308: LD_INT 3
22310: PPUSH
22311: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
22315: LD_INT 61
22317: PPUSH
22318: LD_INT 21
22320: PPUSH
22321: LD_INT 3
22323: PPUSH
22324: LD_INT 3
22326: PPUSH
22327: LD_INT 43
22329: PPUSH
22330: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
22334: LD_EXP 31
22338: PUSH
22339: LD_EXP 43
22343: PUSH
22344: LD_EXP 14
22348: IN
22349: PUSH
22350: LD_EXP 43
22354: PPUSH
22355: CALL_OW 310
22359: PUSH
22360: LD_INT 61
22362: EQUAL
22363: OR
22364: AND
22365: IFFALSE 22825
// begin wait ( 0 0$5 ) ;
22367: LD_INT 175
22369: PPUSH
22370: CALL_OW 67
// SetSide ( Heike , 2 ) ;
22374: LD_EXP 36
22378: PPUSH
22379: LD_INT 2
22381: PPUSH
22382: CALL_OW 235
// SetSide ( Markov , 2 ) ;
22386: LD_EXP 43
22390: PPUSH
22391: LD_INT 2
22393: PPUSH
22394: CALL_OW 235
// if not Markov in heikeSquad then
22398: LD_EXP 43
22402: PUSH
22403: LD_EXP 14
22407: IN
22408: NOT
22409: IFFALSE 22431
// heikeSquad := Join ( heikeSquad , Markov ) ;
22411: LD_ADDR_EXP 14
22415: PUSH
22416: LD_EXP 14
22420: PPUSH
22421: LD_EXP 43
22425: PPUSH
22426: CALL 63230 0 2
22430: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
22431: LD_EXP 43
22435: PPUSH
22436: LD_STRING DMar-Factory-1
22438: PPUSH
22439: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
22443: LD_INT 61
22445: PPUSH
22446: LD_INT 99
22448: PPUSH
22449: CALL_OW 329
// ComExitBuilding ( ruDisturb ) ;
22453: LD_EXP 56
22457: PPUSH
22458: CALL_OW 122
// ComExitBuilding ( Markov ) ;
22462: LD_EXP 43
22466: PPUSH
22467: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
22471: LD_EXP 56
22475: PPUSH
22476: LD_INT 171
22478: PPUSH
22479: LD_INT 51
22481: PPUSH
22482: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
22486: LD_EXP 43
22490: PPUSH
22491: LD_INT 167
22493: PPUSH
22494: LD_INT 50
22496: PPUSH
22497: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
22501: LD_EXP 43
22505: PPUSH
22506: LD_EXP 56
22510: PPUSH
22511: CALL_OW 179
// wait ( 0 0$5 ) ;
22515: LD_INT 175
22517: PPUSH
22518: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
22522: LD_EXP 43
22526: PPUSH
22527: LD_STRING DMar-Factory-2
22529: PPUSH
22530: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
22534: LD_ADDR_VAR 0 2
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_INT 3
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 33
22551: PUSH
22552: LD_INT 3
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PPUSH
22563: CALL_OW 69
22567: PUSH
22568: LD_INT 1
22570: ARRAY
22571: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
22572: LD_EXP 56
22576: PPUSH
22577: LD_VAR 0 2
22581: PPUSH
22582: CALL_OW 119
// async ;
22586: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
22587: LD_EXP 56
22591: PPUSH
22592: LD_STRING DMcn-Factory-3
22594: PPUSH
22595: CALL_OW 88
// ComAttackUnit ( veh , ruDisturb ) ;
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_EXP 56
22608: PPUSH
22609: CALL_OW 115
// sync ;
22613: SYNC
// wait ( 0 0$1 ) ;
22614: LD_INT 35
22616: PPUSH
22617: CALL_OW 67
// KillUnit ( ruDisturb ) ;
22621: LD_EXP 56
22625: PPUSH
22626: CALL_OW 66
// SetSide ( veh , 7 ) ;
22630: LD_VAR 0 2
22634: PPUSH
22635: LD_INT 7
22637: PPUSH
22638: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
22642: LD_VAR 0 2
22646: PPUSH
22647: LD_INT 84
22649: PPUSH
22650: LD_INT 38
22652: PPUSH
22653: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
22657: LD_EXP 57
22661: PUSH
22662: LD_INT 1
22664: ARRAY
22665: PPUSH
22666: CALL_OW 258
22670: PUSH
22671: LD_INT 1
22673: EQUAL
22674: IFFALSE 22694
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
22676: LD_EXP 57
22680: PUSH
22681: LD_INT 1
22683: ARRAY
22684: PPUSH
22685: LD_STRING DRum-Factory-4
22687: PPUSH
22688: CALL_OW 88
22692: GO 22710
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
22694: LD_EXP 57
22698: PUSH
22699: LD_INT 1
22701: ARRAY
22702: PPUSH
22703: LD_STRING DRuf-Factory-4
22705: PPUSH
22706: CALL_OW 88
// wait ( 0 0$1 ) ;
22710: LD_INT 35
22712: PPUSH
22713: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
22717: LD_EXP 57
22721: PPUSH
22722: LD_INT 26
22724: PUSH
22725: LD_INT 1
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PPUSH
22732: CALL_OW 72
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PPUSH
22741: LD_STRING DRum-Factory-6
22743: PPUSH
22744: CALL_OW 88
// wait ( 0 0$2 ) ;
22748: LD_INT 70
22750: PPUSH
22751: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
22755: LD_EXP 36
22759: PPUSH
22760: LD_INT 33
22762: PPUSH
22763: CALL_OW 336
// ComExitBuilding ( Heike ) ;
22767: LD_EXP 36
22771: PPUSH
22772: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
22776: LD_EXP 36
22780: PPUSH
22781: LD_INT 168
22783: PPUSH
22784: LD_INT 54
22786: PPUSH
22787: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
22791: LD_INT 173
22793: PPUSH
22794: LD_INT 54
22796: PPUSH
22797: LD_INT 2
22799: PPUSH
22800: CALL_OW 331
// InGameOff ;
22804: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
22808: LD_STRING M2b-out
22810: PPUSH
22811: CALL_OW 337
// hasMuchin := false ;
22815: LD_ADDR_EXP 30
22819: PUSH
22820: LD_INT 0
22822: ST_TO_ADDR
// exit ;
22823: GO 24814
// end ; wait ( 0 0$5 ) ;
22825: LD_INT 175
22827: PPUSH
22828: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
22832: LD_INT 61
22834: PPUSH
22835: LD_INT 99
22837: PPUSH
22838: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
22842: LD_EXP 43
22846: PUSH
22847: LD_EXP 14
22851: IN
22852: PUSH
22853: LD_EXP 43
22857: PPUSH
22858: CALL_OW 255
22862: PUSH
22863: LD_INT 3
22865: EQUAL
22866: AND
22867: IFFALSE 22890
// begin SetSide ( Markov , 2 ) ;
22869: LD_EXP 43
22873: PPUSH
22874: LD_INT 2
22876: PPUSH
22877: CALL_OW 235
// ComExitBuilding ( Markov ) ;
22881: LD_EXP 43
22885: PPUSH
22886: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
22890: LD_EXP 36
22894: PPUSH
22895: LD_INT 2
22897: PPUSH
22898: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
22902: LD_EXP 36
22906: PPUSH
22907: LD_INT 33
22909: PPUSH
22910: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
22914: LD_EXP 56
22918: PPUSH
22919: CALL_OW 122
// ComExitBuilding ( Heike ) ;
22923: LD_EXP 36
22927: PPUSH
22928: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
22932: LD_EXP 36
22936: PPUSH
22937: LD_INT 168
22939: PPUSH
22940: LD_INT 54
22942: PPUSH
22943: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
22947: LD_INT 173
22949: PPUSH
22950: LD_INT 54
22952: PPUSH
22953: LD_INT 2
22955: PPUSH
22956: CALL_OW 331
// InGameOff ;
22960: CALL_OW 9
// wait ( 3 ) ;
22964: LD_INT 3
22966: PPUSH
22967: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
22971: LD_EXP 56
22975: PPUSH
22976: LD_INT 2
22978: PPUSH
22979: CALL_OW 120
// wait ( 0 0$3 ) ;
22983: LD_INT 105
22985: PPUSH
22986: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
22990: LD_STRING M2b-out
22992: PPUSH
22993: CALL_OW 337
// hasMuchin := false ;
22997: LD_ADDR_EXP 30
23001: PUSH
23002: LD_INT 0
23004: ST_TO_ADDR
// wait ( 2 2$00 ) ;
23005: LD_INT 4200
23007: PPUSH
23008: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23012: LD_INT 35
23014: PPUSH
23015: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23019: LD_EXP 56
23023: PPUSH
23024: CALL_OW 314
23028: NOT
23029: IFFALSE 23045
// ComMoveUnit ( ruDisturb , Heike ) ;
23031: LD_EXP 56
23035: PPUSH
23036: LD_EXP 36
23040: PPUSH
23041: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
23045: LD_EXP 36
23049: PPUSH
23050: LD_EXP 56
23054: PPUSH
23055: CALL_OW 296
23059: PUSH
23060: LD_INT 2
23062: LESS
23063: PUSH
23064: LD_EXP 56
23068: PPUSH
23069: CALL_OW 302
23073: AND
23074: IFFALSE 23012
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23076: LD_EXP 14
23080: PPUSH
23081: LD_INT 22
23083: PUSH
23084: LD_INT 2
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: PUSH
23091: LD_INT 91
23093: PUSH
23094: LD_EXP 56
23098: PUSH
23099: LD_INT 8
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: PUSH
23107: LD_INT 2
23109: PUSH
23110: LD_INT 25
23112: PUSH
23113: LD_INT 1
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 25
23122: PUSH
23123: LD_INT 11
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 25
23132: PUSH
23133: LD_INT 32
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 25
23142: PUSH
23143: LD_INT 34
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 72
23166: IFFALSE 23176
// isAlarm := true ;
23168: LD_ADDR_EXP 17
23172: PUSH
23173: LD_INT 1
23175: ST_TO_ADDR
// if isAlarm then
23176: LD_EXP 17
23180: IFFALSE 23184
// exit ;
23182: GO 24814
// ComTurnUnit ( Heike , ruDisturb ) ;
23184: LD_EXP 36
23188: PPUSH
23189: LD_EXP 56
23193: PPUSH
23194: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
23198: LD_EXP 56
23202: PPUSH
23203: LD_EXP 36
23207: PPUSH
23208: CALL_OW 119
// wait ( 3 ) ;
23212: LD_INT 3
23214: PPUSH
23215: CALL_OW 67
// for i := 1 to 3 do
23219: LD_ADDR_VAR 0 1
23223: PUSH
23224: DOUBLE
23225: LD_INT 1
23227: DEC
23228: ST_TO_ADDR
23229: LD_INT 3
23231: PUSH
23232: FOR_TO
23233: IFFALSE 23250
// CreateCratesArea ( 5 , cratesArea , false ) ;
23235: LD_INT 5
23237: PPUSH
23238: LD_INT 58
23240: PPUSH
23241: LD_INT 0
23243: PPUSH
23244: CALL_OW 55
23248: GO 23232
23250: POP
23251: POP
// uc_side := 3 ;
23252: LD_ADDR_OWVAR 20
23256: PUSH
23257: LD_INT 3
23259: ST_TO_ADDR
// uc_nation := nation_russian ;
23260: LD_ADDR_OWVAR 21
23264: PUSH
23265: LD_INT 3
23267: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
23268: LD_INT 21
23270: PPUSH
23271: LD_INT 3
23273: PPUSH
23274: LD_INT 1
23276: PPUSH
23277: LD_INT 51
23279: PPUSH
23280: LD_INT 100
23282: PPUSH
23283: CALL 30796 0 5
// veh := CreateVehicle ;
23287: LD_ADDR_VAR 0 2
23291: PUSH
23292: CALL_OW 45
23296: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
23297: LD_VAR 0 2
23301: PPUSH
23302: LD_INT 104
23304: PPUSH
23305: LD_INT 41
23307: PPUSH
23308: LD_INT 3
23310: PPUSH
23311: LD_INT 0
23313: PPUSH
23314: CALL 65370 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
23318: LD_VAR 0 2
23322: PPUSH
23323: LD_INT 1
23325: PPUSH
23326: LD_INT 100
23328: PPUSH
23329: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
23333: CALL_OW 44
23337: PPUSH
23338: LD_VAR 0 2
23342: PPUSH
23343: CALL_OW 52
// DialogueOn ;
23347: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
23351: LD_EXP 56
23355: PPUSH
23356: LD_STRING DMcn-Interrupt-1
23358: PPUSH
23359: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
23363: LD_EXP 56
23367: PPUSH
23368: LD_STRING DMcn-Interrupt-2
23370: PPUSH
23371: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
23375: LD_EXP 56
23379: PPUSH
23380: LD_STRING DMcn-Interrupt-c-3
23382: PPUSH
23383: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
23387: LD_INT 101
23389: PPUSH
23390: LD_INT 38
23392: PPUSH
23393: LD_INT 2
23395: PPUSH
23396: LD_INT 10
23398: NEG
23399: PPUSH
23400: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
23404: LD_INT 101
23406: PPUSH
23407: LD_INT 38
23409: PPUSH
23410: CALL_OW 84
// wait ( 0 0$2 ) ;
23414: LD_INT 70
23416: PPUSH
23417: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
23421: LD_INT 101
23423: PPUSH
23424: LD_INT 38
23426: PPUSH
23427: LD_INT 2
23429: PPUSH
23430: CALL_OW 331
// RemoveUnit ( veh ) ;
23434: LD_VAR 0 2
23438: PPUSH
23439: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
23443: LD_EXP 56
23447: PPUSH
23448: LD_STRING DMcn-Interrupt-c-4
23450: PPUSH
23451: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
23455: LD_EXP 36
23459: PPUSH
23460: LD_STRING DH-Interrupt-c-5
23462: PPUSH
23463: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
23467: LD_EXP 56
23471: PPUSH
23472: LD_STRING DMcn-Interrupt-c-6
23474: PPUSH
23475: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
23479: LD_EXP 36
23483: PPUSH
23484: LD_STRING DH-Interrupt-c-7
23486: PPUSH
23487: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
23491: LD_EXP 56
23495: PPUSH
23496: LD_STRING DMcn-Interrupt-c-8
23498: PPUSH
23499: CALL_OW 88
// DialogueOff ;
23503: CALL_OW 7
// hasMuchin := true ;
23507: LD_ADDR_EXP 30
23511: PUSH
23512: LD_INT 1
23514: ST_TO_ADDR
// Query ( MuchinInfo ) ;
23515: LD_STRING MuchinInfo
23517: PPUSH
23518: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
23522: LD_STRING M2c
23524: PPUSH
23525: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
23529: LD_INT 35
23531: PPUSH
23532: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
23536: LD_EXP 56
23540: PPUSH
23541: LD_EXP 36
23545: PPUSH
23546: CALL_OW 296
23550: PUSH
23551: LD_INT 6
23553: GREATER
23554: IFFALSE 23570
// ComMoveUnit ( ruDisturb , Heike ) ;
23556: LD_EXP 56
23560: PPUSH
23561: LD_EXP 36
23565: PPUSH
23566: CALL_OW 112
// if UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23570: LD_EXP 14
23574: PPUSH
23575: LD_INT 22
23577: PUSH
23578: LD_INT 2
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 91
23587: PUSH
23588: LD_EXP 56
23592: PUSH
23593: LD_INT 8
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: LIST
23600: PUSH
23601: LD_INT 2
23603: PUSH
23604: LD_INT 25
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: LD_INT 25
23616: PUSH
23617: LD_INT 11
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 25
23626: PUSH
23627: LD_INT 32
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 25
23636: PUSH
23637: LD_INT 34
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: LIST
23655: PPUSH
23656: CALL_OW 72
23660: IFFALSE 23672
// begin isAlarm := true ;
23662: LD_ADDR_EXP 17
23666: PUSH
23667: LD_INT 1
23669: ST_TO_ADDR
// exit ;
23670: GO 24814
// end ; until UnitFilter ( heikeSquad , [ f_dist , ruOutpost0 , 6 ] ) and GetDistUnits ( Heike , ruOutpost0 ) < 6 ;
23672: LD_EXP 14
23676: PPUSH
23677: LD_INT 91
23679: PUSH
23680: LD_INT 6
23682: PUSH
23683: LD_INT 6
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: PPUSH
23691: CALL_OW 72
23695: PUSH
23696: LD_EXP 36
23700: PPUSH
23701: LD_INT 6
23703: PPUSH
23704: CALL_OW 296
23708: PUSH
23709: LD_INT 6
23711: LESS
23712: AND
23713: IFFALSE 23529
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_EXP 14
23724: PUSH
23725: LD_EXP 36
23729: UNION
23730: PPUSH
23731: LD_INT 25
23733: PUSH
23734: LD_INT 33
23736: PUSH
23737: EMPTY
23738: LIST
23739: LIST
23740: PUSH
23741: LD_INT 91
23743: PUSH
23744: LD_INT 6
23746: PUSH
23747: LD_INT 12
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PPUSH
23759: CALL_OW 72
23763: ST_TO_ADDR
// for i in tmp do
23764: LD_ADDR_VAR 0 1
23768: PUSH
23769: LD_VAR 0 3
23773: PUSH
23774: FOR_IN
23775: IFFALSE 23806
// begin SetSide ( i , 3 ) ;
23777: LD_VAR 0 1
23781: PPUSH
23782: LD_INT 3
23784: PPUSH
23785: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
23789: LD_VAR 0 1
23793: PPUSH
23794: LD_INT 101
23796: PPUSH
23797: LD_INT 38
23799: PPUSH
23800: CALL_OW 111
// end ;
23804: GO 23774
23806: POP
23807: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
23808: LD_EXP 56
23812: PPUSH
23813: LD_INT 104
23815: PPUSH
23816: LD_INT 37
23818: PPUSH
23819: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
23823: LD_EXP 56
23827: PPUSH
23828: LD_EXP 36
23832: PPUSH
23833: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
23837: LD_INT 35
23839: PPUSH
23840: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
23844: LD_ADDR_VAR 0 4
23848: PUSH
23849: LD_INT 58
23851: PPUSH
23852: CALL_OW 435
23856: ST_TO_ADDR
// for i in tmp do
23857: LD_ADDR_VAR 0 1
23861: PUSH
23862: LD_VAR 0 3
23866: PUSH
23867: FOR_IN
23868: IFFALSE 23911
// if not HasTask ( i ) then
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 314
23879: NOT
23880: IFFALSE 23909
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
23882: LD_VAR 0 1
23886: PPUSH
23887: LD_VAR 0 4
23891: PUSH
23892: LD_INT 1
23894: ARRAY
23895: PPUSH
23896: LD_VAR 0 4
23900: PUSH
23901: LD_INT 2
23903: ARRAY
23904: PPUSH
23905: CALL_OW 117
23909: GO 23867
23911: POP
23912: POP
// until not cr ;
23913: LD_VAR 0 4
23917: NOT
23918: IFFALSE 23837
// wait ( 0 0$2 ) ;
23920: LD_INT 70
23922: PPUSH
23923: CALL_OW 67
// for i in tmp do
23927: LD_ADDR_VAR 0 1
23931: PUSH
23932: LD_VAR 0 3
23936: PUSH
23937: FOR_IN
23938: IFFALSE 23954
// SetSide ( i , 2 ) ;
23940: LD_VAR 0 1
23944: PPUSH
23945: LD_INT 2
23947: PPUSH
23948: CALL_OW 235
23952: GO 23937
23954: POP
23955: POP
// if Kaia in tmp then
23956: LD_EXP 41
23960: PUSH
23961: LD_VAR 0 3
23965: IN
23966: IFFALSE 24236
// begin InGameOn ;
23968: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
23972: LD_EXP 41
23976: PPUSH
23977: LD_EXP 56
23981: PPUSH
23982: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
23986: LD_EXP 56
23990: PPUSH
23991: LD_EXP 41
23995: PPUSH
23996: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
24000: LD_EXP 41
24004: PPUSH
24005: LD_EXP 56
24009: PPUSH
24010: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
24014: LD_EXP 41
24018: PPUSH
24019: LD_STRING DK-Assassin-1
24021: PPUSH
24022: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
24026: LD_EXP 56
24030: PPUSH
24031: LD_STRING DMcn-Assassin-2
24033: PPUSH
24034: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
24038: LD_EXP 41
24042: PPUSH
24043: LD_STRING DK-Assassin-3
24045: PPUSH
24046: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
24050: LD_EXP 56
24054: PPUSH
24055: LD_STRING DMcn-Assassin-4
24057: PPUSH
24058: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
24062: LD_EXP 41
24066: PPUSH
24067: LD_STRING DK-Assassin-5
24069: PPUSH
24070: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
24074: LD_EXP 56
24078: PPUSH
24079: LD_STRING DMcn-Assassin-6
24081: PPUSH
24082: CALL_OW 88
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
24086: LD_EXP 41
24090: PUSH
24091: LD_EXP 56
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PPUSH
24100: LD_INT 6
24102: PPUSH
24103: CALL_OW 120
// wait ( 0 0$5 ) ;
24107: LD_INT 175
24109: PPUSH
24110: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
24114: LD_EXP 41
24118: PPUSH
24119: LD_STRING DK-Assassin-7
24121: PPUSH
24122: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
24126: LD_EXP 56
24130: PPUSH
24131: LD_STRING DMcn-Assassin-8
24133: PPUSH
24134: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24138: LD_INT 10
24140: PPUSH
24141: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
24145: LD_EXP 41
24149: PPUSH
24150: LD_STRING DK-Assassin-9
24152: PPUSH
24153: CALL_OW 88
// wait ( 0 0$2 ) ;
24157: LD_INT 70
24159: PPUSH
24160: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
24164: LD_EXP 41
24168: PPUSH
24169: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
24173: LD_EXP 56
24177: PPUSH
24178: CALL_OW 64
// AddComMoveUnit ( Kaia , Heike ) ;
24182: LD_EXP 41
24186: PPUSH
24187: LD_EXP 36
24191: PPUSH
24192: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
24196: LD_EXP 41
24200: PPUSH
24201: LD_STRING DK-Assasin-10
24203: PPUSH
24204: CALL_OW 88
// InGameOff ;
24208: CALL_OW 9
// ChangeMissionObjectives ( M2c-out ) ;
24212: LD_STRING M2c-out
24214: PPUSH
24215: CALL_OW 337
// wait ( 0 0$3 ) ;
24219: LD_INT 105
24221: PPUSH
24222: CALL_OW 67
// hasMuchin := false ;
24226: LD_ADDR_EXP 30
24230: PUSH
24231: LD_INT 0
24233: ST_TO_ADDR
// exit ;
24234: GO 24814
// end ; ChangeMissionObjectives ( M2c-out ) ;
24236: LD_STRING M2c-out
24238: PPUSH
24239: CALL_OW 337
// InGameOn ;
24243: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
24247: LD_EXP 56
24251: PPUSH
24252: LD_STRING DMcn-Fail-1
24254: PPUSH
24255: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
24259: LD_VAR 0 3
24263: PPUSH
24264: LD_INT 114
24266: PPUSH
24267: LD_INT 17
24269: PPUSH
24270: CALL_OW 111
// wait ( 0 0$1 ) ;
24274: LD_INT 35
24276: PPUSH
24277: CALL_OW 67
// async ;
24281: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
24282: LD_EXP 56
24286: PPUSH
24287: LD_EXP 36
24291: PPUSH
24292: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
24296: LD_EXP 56
24300: PPUSH
24301: LD_STRING DMcn-Fail-2
24303: PPUSH
24304: CALL_OW 88
// ComStop ( Heike ) ;
24308: LD_EXP 36
24312: PPUSH
24313: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
24317: LD_EXP 36
24321: PPUSH
24322: LD_EXP 56
24326: PPUSH
24327: CALL_OW 179
// sync ;
24331: SYNC
// Say ( Heike , DH-Fail-3 ) ;
24332: LD_EXP 36
24336: PPUSH
24337: LD_STRING DH-Fail-3
24339: PPUSH
24340: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
24344: LD_EXP 56
24348: PPUSH
24349: LD_STRING DMcn-Fail-4
24351: PPUSH
24352: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
24356: LD_EXP 36
24360: PUSH
24361: LD_EXP 56
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PPUSH
24370: LD_INT 41
24372: PPUSH
24373: LD_INT 19
24375: PPUSH
24376: CALL_OW 111
// wait ( 0 0$2 ) ;
24380: LD_INT 70
24382: PPUSH
24383: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
24387: LD_EXP 56
24391: PPUSH
24392: LD_INT 40
24394: PPUSH
24395: LD_INT 19
24397: PPUSH
24398: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
24402: LD_EXP 36
24406: PPUSH
24407: LD_INT 43
24409: PPUSH
24410: LD_INT 21
24412: PPUSH
24413: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
24417: LD_EXP 56
24421: PPUSH
24422: LD_EXP 36
24426: PPUSH
24427: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
24431: LD_EXP 36
24435: PPUSH
24436: LD_EXP 56
24440: PPUSH
24441: CALL_OW 179
// RaiseSailEvent ( centerCamEvent ) ;
24445: LD_INT 3
24447: PPUSH
24448: CALL_OW 427
// wait ( 0 0$2 ) ;
24452: LD_INT 70
24454: PPUSH
24455: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
24459: LD_EXP 56
24463: PPUSH
24464: LD_STRING DMcn-Fail-5
24466: PPUSH
24467: CALL_OW 88
// wait ( 0 0$2 ) ;
24471: LD_INT 70
24473: PPUSH
24474: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
24478: LD_EXP 56
24482: PPUSH
24483: LD_STRING DMcn-Fail-6
24485: PPUSH
24486: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
24490: LD_INT 35
24492: PPUSH
24493: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
24497: LD_EXP 36
24501: PPUSH
24502: LD_INT 43
24504: PPUSH
24505: LD_INT 21
24507: PPUSH
24508: CALL_OW 307
24512: IFFALSE 24490
// case Query ( MuchinQuestion ) of 1 :
24514: LD_STRING MuchinQuestion
24516: PPUSH
24517: CALL_OW 97
24521: PUSH
24522: LD_INT 1
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24630
24530: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
24531: LD_EXP 56
24535: PPUSH
24536: LD_STRING DMcn-Fail-7
24538: PPUSH
24539: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
24543: LD_EXP 36
24547: PPUSH
24548: LD_STRING DH-Fail-8
24550: PPUSH
24551: CALL_OW 88
// wait ( 0 0$0.3 ) ;
24555: LD_INT 10
24557: PPUSH
24558: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
24562: LD_EXP 36
24566: PPUSH
24567: LD_STRING DH-Fail-9
24569: PPUSH
24570: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
24574: LD_EXP 36
24578: PPUSH
24579: LD_STRING DH-Fail-10
24581: PPUSH
24582: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
24586: LD_EXP 56
24590: PPUSH
24591: LD_STRING DMcn-Fail-11
24593: PPUSH
24594: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
24598: LD_EXP 56
24602: PPUSH
24603: LD_EXP 36
24607: PPUSH
24608: CALL_OW 115
// wait ( 0 0$2 ) ;
24612: LD_INT 70
24614: PPUSH
24615: CALL_OW 67
// KillUnit ( Heike ) ;
24619: LD_EXP 36
24623: PPUSH
24624: CALL_OW 66
// end ; 2 :
24628: GO 24810
24630: LD_INT 2
24632: DOUBLE
24633: EQUAL
24634: IFTRUE 24638
24636: GO 24809
24638: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
24639: LD_EXP 36
24643: PPUSH
24644: LD_STRING DH-Fail-a-8
24646: PPUSH
24647: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
24651: LD_EXP 36
24655: PPUSH
24656: LD_STRING DH-Fail-a-9
24658: PPUSH
24659: CALL_OW 88
// Say ( ruDisturb , DH-Fail-10 ) ;
24663: LD_EXP 56
24667: PPUSH
24668: LD_STRING DH-Fail-10
24670: PPUSH
24671: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
24675: LD_EXP 36
24679: PPUSH
24680: LD_STRING DH-Fail-a-11
24682: PPUSH
24683: CALL_OW 88
// async ;
24687: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
24688: LD_EXP 56
24692: PPUSH
24693: LD_EXP 36
24697: PPUSH
24698: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
24702: LD_EXP 56
24706: PPUSH
24707: LD_EXP 36
24711: PPUSH
24712: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
24716: LD_EXP 56
24720: PPUSH
24721: LD_STRING DH-Fail-12
24723: PPUSH
24724: CALL_OW 88
// sync ;
24728: SYNC
// wait ( 0 0$1 ) ;
24729: LD_INT 35
24731: PPUSH
24732: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
24736: LD_EXP 36
24740: PPUSH
24741: LD_STRING DH-Fail-a-13
24743: PPUSH
24744: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
24748: LD_EXP 56
24752: PPUSH
24753: LD_INT 100
24755: PPUSH
24756: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
24760: LD_EXP 56
24764: PPUSH
24765: LD_STRING DMcn-Fail-a-14
24767: PPUSH
24768: CALL_OW 91
// KillUnit ( ruDisturb ) ;
24772: LD_EXP 56
24776: PPUSH
24777: CALL_OW 66
// wait ( 0 0$1 ) ;
24781: LD_INT 35
24783: PPUSH
24784: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
24788: LD_EXP 36
24792: PPUSH
24793: LD_STRING DH-Fail-a-15
24795: PPUSH
24796: CALL_OW 88
// YouLost ( FailMuchin ) ;
24800: LD_STRING FailMuchin
24802: PPUSH
24803: CALL_OW 104
// end ; end ;
24807: GO 24810
24809: POP
// InGameOff ;
24810: CALL_OW 9
// end ; end_of_file
24814: PPOPN 4
24816: END
// every 0 0$1 marked gameStartEvent do
24817: GO 24819
24819: DISABLE
// begin enable ;
24820: ENABLE
// if not contactWithAmerican then
24821: LD_EXP 25
24825: NOT
24826: IFFALSE 24871
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
24828: LD_ADDR_OWVAR 47
24832: PUSH
24833: LD_STRING #X108-1
24835: PUSH
24836: LD_INT 22
24838: PUSH
24839: LD_INT 5
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 21
24848: PUSH
24849: LD_INT 1
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PPUSH
24860: CALL_OW 69
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: ST_TO_ADDR
24869: GO 24951
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , #X108-2 , UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ] ;
24871: LD_ADDR_OWVAR 47
24875: PUSH
24876: LD_STRING #X108-1
24878: PUSH
24879: LD_INT 22
24881: PUSH
24882: LD_INT 5
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 21
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: PUSH
24908: LD_STRING #X108-2
24910: PUSH
24911: LD_EXP 48
24915: PPUSH
24916: LD_INT 22
24918: PUSH
24919: LD_INT 4
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 21
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PPUSH
24940: CALL_OW 72
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: ST_TO_ADDR
// end ; end_of_file
24951: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
24952: LD_EXP 36
24956: PPUSH
24957: LD_INT 59
24959: PPUSH
24960: CALL_OW 308
24964: IFFALSE 25086
24966: GO 24968
24968: DISABLE
// begin Query ( FinalInfo ) ;
24969: LD_STRING FinalInfo
24971: PPUSH
24972: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
24976: LD_INT 59
24978: PPUSH
24979: LD_INT 1
24981: PPUSH
24982: CALL_OW 424
// end_the_mission_allowed := true ;
24986: LD_ADDR_OWVAR 57
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24994: LD_INT 35
24996: PPUSH
24997: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
25001: LD_INT 22
25003: PUSH
25004: LD_INT 2
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 21
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 95
25023: PUSH
25024: LD_INT 59
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: PPUSH
25036: CALL_OW 69
25040: PPUSH
25041: CALL 27883 0 1
25045: PUSH
25046: LD_INT 22
25048: PUSH
25049: LD_INT 2
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 21
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: PPUSH
25070: CALL_OW 69
25074: PPUSH
25075: CALL 27883 0 1
25079: EQUAL
25080: IFFALSE 24994
// EndMission ;
25082: CALL 25094 0 0
// end ;
25086: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
25087: CALL 25094 0 0
// end ;
25091: PPOPN 1
25093: END
// function EndMission ; begin
25094: LD_INT 0
25096: PPUSH
// if not IsInArea ( Heike , finalArea ) then
25097: LD_EXP 36
25101: PPUSH
25102: LD_INT 59
25104: PPUSH
25105: CALL_OW 308
25109: NOT
25110: IFFALSE 25121
// begin Query ( HeikeOutOfArea ) ;
25112: LD_STRING HeikeOutOfArea
25114: PPUSH
25115: CALL_OW 97
// exit ;
25119: GO 25776
// end ; if not IsOk ( Heike ) then
25121: LD_EXP 36
25125: PPUSH
25126: CALL_OW 302
25130: NOT
25131: IFFALSE 25142
// begin Query ( HeikeIsHurt ) ;
25133: LD_STRING HeikeIsHurt
25135: PPUSH
25136: CALL_OW 97
// exit ;
25140: GO 25776
// end ; if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
25142: LD_INT 22
25144: PUSH
25145: LD_INT 5
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 21
25154: PUSH
25155: LD_INT 1
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PPUSH
25166: CALL_OW 69
25170: PUSH
25171: LD_INT 0
25173: EQUAL
25174: PUSH
25175: LD_EXP 32
25179: PUSH
25180: LD_INT 0
25182: EQUAL
25183: AND
25184: IFFALSE 25198
// AddMedal ( med1 , 1 ) else
25186: LD_STRING med1
25188: PPUSH
25189: LD_INT 1
25191: PPUSH
25192: CALL_OW 101
25196: GO 25209
// AddMedal ( med1 , - 1 ) ;
25198: LD_STRING med1
25200: PPUSH
25201: LD_INT 1
25203: NEG
25204: PPUSH
25205: CALL_OW 101
// if explosivePlantedList >= 3 then
25209: LD_EXP 29
25213: PUSH
25214: LD_INT 3
25216: GREATEREQUAL
25217: IFFALSE 25231
// AddMedal ( med2 , 1 ) else
25219: LD_STRING med2
25221: PPUSH
25222: LD_INT 1
25224: PPUSH
25225: CALL_OW 101
25229: GO 25265
// if explosivePlantedList < 3 then
25231: LD_EXP 29
25235: PUSH
25236: LD_INT 3
25238: LESS
25239: IFFALSE 25254
// AddMedal ( med2 , - 2 ) else
25241: LD_STRING med2
25243: PPUSH
25244: LD_INT 2
25246: NEG
25247: PPUSH
25248: CALL_OW 101
25252: GO 25265
// AddMedal ( med2 , - 1 ) ;
25254: LD_STRING med2
25256: PPUSH
25257: LD_INT 1
25259: NEG
25260: PPUSH
25261: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
25265: LD_INT 5
25267: PPUSH
25268: LD_INT 2
25270: PPUSH
25271: CALL_OW 321
25275: PUSH
25276: LD_INT 2
25278: EQUAL
25279: IFFALSE 25293
// AddMedal ( med3 , 1 ) else
25281: LD_STRING med3
25283: PPUSH
25284: LD_INT 1
25286: PPUSH
25287: CALL_OW 101
25291: GO 25304
// AddMedal ( med3 , - 1 ) ;
25293: LD_STRING med3
25295: PPUSH
25296: LD_INT 1
25298: NEG
25299: PPUSH
25300: CALL_OW 101
// GiveMedals ( MAIN ) ;
25304: LD_STRING MAIN
25306: PPUSH
25307: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ) ;
25311: LD_INT 22
25313: PUSH
25314: LD_INT 2
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 23
25323: PUSH
25324: LD_INT 2
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 21
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: PPUSH
25346: CALL_OW 69
25350: PPUSH
25351: CALL_OW 43
// if Doug and GetSide ( Doug ) = 2 then
25355: LD_EXP 50
25359: PUSH
25360: LD_EXP 50
25364: PPUSH
25365: CALL_OW 255
25369: PUSH
25370: LD_INT 2
25372: EQUAL
25373: AND
25374: IFFALSE 25388
// SaveCharacters ( Doug , 08_UsCommander ) ;
25376: LD_EXP 50
25380: PPUSH
25381: LD_STRING 08_UsCommander
25383: PPUSH
25384: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) diff Doug , 08_Americans ) ;
25388: LD_INT 22
25390: PUSH
25391: LD_INT 2
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 23
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 21
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: PPUSH
25423: CALL_OW 69
25427: PUSH
25428: LD_EXP 50
25432: DIFF
25433: PPUSH
25434: LD_STRING 08_Americans
25436: PPUSH
25437: CALL_OW 38
// SaveCharacters ( Heike , 08_Heike ) ;
25441: LD_EXP 36
25445: PPUSH
25446: LD_STRING 08_Heike
25448: PPUSH
25449: CALL_OW 38
// if Aviradze and GetSide ( Aviradze ) = 2 then
25453: LD_EXP 46
25457: PUSH
25458: LD_EXP 46
25462: PPUSH
25463: CALL_OW 255
25467: PUSH
25468: LD_INT 2
25470: EQUAL
25471: AND
25472: IFFALSE 25486
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
25474: LD_EXP 46
25478: PPUSH
25479: LD_STRING 08_Aviradze
25481: PPUSH
25482: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
25486: LD_EXP 39
25490: PUSH
25491: LD_EXP 39
25495: PPUSH
25496: CALL_OW 255
25500: PUSH
25501: LD_INT 2
25503: EQUAL
25504: AND
25505: IFFALSE 25519
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
25507: LD_EXP 39
25511: PPUSH
25512: LD_STRING 08_Ibrahim
25514: PPUSH
25515: CALL_OW 38
// if Kamil and GetSide ( Kamil ) = 2 then
25519: LD_EXP 40
25523: PUSH
25524: LD_EXP 40
25528: PPUSH
25529: CALL_OW 255
25533: PUSH
25534: LD_INT 2
25536: EQUAL
25537: AND
25538: IFFALSE 25552
// SaveCharacters ( Kamil , 08_Kamil ) ;
25540: LD_EXP 40
25544: PPUSH
25545: LD_STRING 08_Kamil
25547: PPUSH
25548: CALL_OW 38
// if Sophia and GetSide ( Sophia ) = 2 then
25552: LD_EXP 42
25556: PUSH
25557: LD_EXP 42
25561: PPUSH
25562: CALL_OW 255
25566: PUSH
25567: LD_INT 2
25569: EQUAL
25570: AND
25571: IFFALSE 25585
// SaveCharacters ( Sophia , 08_Sophia ) ;
25573: LD_EXP 42
25577: PPUSH
25578: LD_STRING 08_Sophia
25580: PPUSH
25581: CALL_OW 38
// if Kaia and GetSide ( Aviradze ) = 2 then
25585: LD_EXP 41
25589: PUSH
25590: LD_EXP 46
25594: PPUSH
25595: CALL_OW 255
25599: PUSH
25600: LD_INT 2
25602: EQUAL
25603: AND
25604: IFFALSE 25618
// SaveCharacters ( Kaia , 08_Kaia ) ;
25606: LD_EXP 41
25610: PPUSH
25611: LD_STRING 08_Kaia
25613: PPUSH
25614: CALL_OW 38
// if Givi and GetSide ( Givi ) = 2 then
25618: LD_EXP 37
25622: PUSH
25623: LD_EXP 37
25627: PPUSH
25628: CALL_OW 255
25632: PUSH
25633: LD_INT 2
25635: EQUAL
25636: AND
25637: IFFALSE 25651
// SaveCharacters ( Givi , 08_Givi ) ;
25639: LD_EXP 37
25643: PPUSH
25644: LD_STRING 08_Givi
25646: PPUSH
25647: CALL_OW 38
// if Mike and GetSide ( Mike ) = 2 then
25651: LD_EXP 38
25655: PUSH
25656: LD_EXP 38
25660: PPUSH
25661: CALL_OW 255
25665: PUSH
25666: LD_INT 2
25668: EQUAL
25669: AND
25670: IFFALSE 25684
// SaveCharacters ( Mike , 08_Mike ) ;
25672: LD_EXP 38
25676: PPUSH
25677: LD_STRING 08_Mike
25679: PPUSH
25680: CALL_OW 38
// if Markov and GetSide ( Markov ) = 2 then
25684: LD_EXP 43
25688: PUSH
25689: LD_EXP 43
25693: PPUSH
25694: CALL_OW 255
25698: PUSH
25699: LD_INT 2
25701: EQUAL
25702: AND
25703: IFFALSE 25717
// SaveCharacters ( Markov , 08_Markov ) ;
25705: LD_EXP 43
25709: PPUSH
25710: LD_STRING 08_Markov
25712: PPUSH
25713: CALL_OW 38
// if Kurt and GetSide ( Kurt ) = 2 then
25717: LD_EXP 45
25721: PUSH
25722: LD_EXP 45
25726: PPUSH
25727: CALL_OW 255
25731: PUSH
25732: LD_INT 2
25734: EQUAL
25735: AND
25736: IFFALSE 25750
// SaveCharacters ( Kurt , 08_Kurt ) ;
25738: LD_EXP 45
25742: PPUSH
25743: LD_STRING 08_Kurt
25745: PPUSH
25746: CALL_OW 38
// if heikeSecondSquad then
25750: LD_EXP 47
25754: IFFALSE 25768
// SaveCharacters ( heikeSecondSquad , 08_others ) ;
25756: LD_EXP 47
25760: PPUSH
25761: LD_STRING 08_others
25763: PPUSH
25764: CALL_OW 38
// YouWin ;
25768: CALL_OW 103
// DialogueOff ;
25772: CALL_OW 7
// end ; end_of_file
25776: LD_VAR 0 1
25780: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25781: LD_INT 0
25783: PPUSH
25784: PPUSH
// if exist_mode then
25785: LD_VAR 0 2
25789: IFFALSE 25814
// unit := CreateCharacter ( prefix & ident ) else
25791: LD_ADDR_VAR 0 5
25795: PUSH
25796: LD_VAR 0 3
25800: PUSH
25801: LD_VAR 0 1
25805: STR
25806: PPUSH
25807: CALL_OW 34
25811: ST_TO_ADDR
25812: GO 25829
// unit := NewCharacter ( ident ) ;
25814: LD_ADDR_VAR 0 5
25818: PUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 25
25828: ST_TO_ADDR
// result := unit ;
25829: LD_ADDR_VAR 0 4
25833: PUSH
25834: LD_VAR 0 5
25838: ST_TO_ADDR
// end ;
25839: LD_VAR 0 4
25843: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25844: LD_INT 0
25846: PPUSH
25847: PPUSH
// if not side or not nation then
25848: LD_VAR 0 1
25852: NOT
25853: PUSH
25854: LD_VAR 0 2
25858: NOT
25859: OR
25860: IFFALSE 25864
// exit ;
25862: GO 26632
// case nation of nation_american :
25864: LD_VAR 0 2
25868: PUSH
25869: LD_INT 1
25871: DOUBLE
25872: EQUAL
25873: IFTRUE 25877
25875: GO 26091
25877: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25878: LD_ADDR_VAR 0 4
25882: PUSH
25883: LD_INT 35
25885: PUSH
25886: LD_INT 45
25888: PUSH
25889: LD_INT 46
25891: PUSH
25892: LD_INT 47
25894: PUSH
25895: LD_INT 82
25897: PUSH
25898: LD_INT 83
25900: PUSH
25901: LD_INT 84
25903: PUSH
25904: LD_INT 85
25906: PUSH
25907: LD_INT 86
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 2
25915: PUSH
25916: LD_INT 6
25918: PUSH
25919: LD_INT 15
25921: PUSH
25922: LD_INT 16
25924: PUSH
25925: LD_INT 7
25927: PUSH
25928: LD_INT 12
25930: PUSH
25931: LD_INT 13
25933: PUSH
25934: LD_INT 10
25936: PUSH
25937: LD_INT 14
25939: PUSH
25940: LD_INT 20
25942: PUSH
25943: LD_INT 21
25945: PUSH
25946: LD_INT 22
25948: PUSH
25949: LD_INT 25
25951: PUSH
25952: LD_INT 32
25954: PUSH
25955: LD_INT 27
25957: PUSH
25958: LD_INT 36
25960: PUSH
25961: LD_INT 69
25963: PUSH
25964: LD_INT 39
25966: PUSH
25967: LD_INT 34
25969: PUSH
25970: LD_INT 40
25972: PUSH
25973: LD_INT 48
25975: PUSH
25976: LD_INT 49
25978: PUSH
25979: LD_INT 50
25981: PUSH
25982: LD_INT 51
25984: PUSH
25985: LD_INT 52
25987: PUSH
25988: LD_INT 53
25990: PUSH
25991: LD_INT 54
25993: PUSH
25994: LD_INT 55
25996: PUSH
25997: LD_INT 56
25999: PUSH
26000: LD_INT 57
26002: PUSH
26003: LD_INT 58
26005: PUSH
26006: LD_INT 59
26008: PUSH
26009: LD_INT 60
26011: PUSH
26012: LD_INT 61
26014: PUSH
26015: LD_INT 62
26017: PUSH
26018: LD_INT 80
26020: PUSH
26021: LD_INT 82
26023: PUSH
26024: LD_INT 83
26026: PUSH
26027: LD_INT 84
26029: PUSH
26030: LD_INT 85
26032: PUSH
26033: LD_INT 86
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: ST_TO_ADDR
26089: GO 26556
26091: LD_INT 2
26093: DOUBLE
26094: EQUAL
26095: IFTRUE 26099
26097: GO 26325
26099: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26100: LD_ADDR_VAR 0 4
26104: PUSH
26105: LD_INT 35
26107: PUSH
26108: LD_INT 45
26110: PUSH
26111: LD_INT 46
26113: PUSH
26114: LD_INT 47
26116: PUSH
26117: LD_INT 82
26119: PUSH
26120: LD_INT 83
26122: PUSH
26123: LD_INT 84
26125: PUSH
26126: LD_INT 85
26128: PUSH
26129: LD_INT 87
26131: PUSH
26132: LD_INT 70
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: LD_INT 11
26140: PUSH
26141: LD_INT 3
26143: PUSH
26144: LD_INT 4
26146: PUSH
26147: LD_INT 5
26149: PUSH
26150: LD_INT 6
26152: PUSH
26153: LD_INT 15
26155: PUSH
26156: LD_INT 18
26158: PUSH
26159: LD_INT 7
26161: PUSH
26162: LD_INT 17
26164: PUSH
26165: LD_INT 8
26167: PUSH
26168: LD_INT 20
26170: PUSH
26171: LD_INT 21
26173: PUSH
26174: LD_INT 22
26176: PUSH
26177: LD_INT 72
26179: PUSH
26180: LD_INT 26
26182: PUSH
26183: LD_INT 69
26185: PUSH
26186: LD_INT 39
26188: PUSH
26189: LD_INT 40
26191: PUSH
26192: LD_INT 41
26194: PUSH
26195: LD_INT 42
26197: PUSH
26198: LD_INT 43
26200: PUSH
26201: LD_INT 48
26203: PUSH
26204: LD_INT 49
26206: PUSH
26207: LD_INT 50
26209: PUSH
26210: LD_INT 51
26212: PUSH
26213: LD_INT 52
26215: PUSH
26216: LD_INT 53
26218: PUSH
26219: LD_INT 54
26221: PUSH
26222: LD_INT 55
26224: PUSH
26225: LD_INT 56
26227: PUSH
26228: LD_INT 60
26230: PUSH
26231: LD_INT 61
26233: PUSH
26234: LD_INT 62
26236: PUSH
26237: LD_INT 66
26239: PUSH
26240: LD_INT 67
26242: PUSH
26243: LD_INT 68
26245: PUSH
26246: LD_INT 81
26248: PUSH
26249: LD_INT 82
26251: PUSH
26252: LD_INT 83
26254: PUSH
26255: LD_INT 84
26257: PUSH
26258: LD_INT 85
26260: PUSH
26261: LD_INT 87
26263: PUSH
26264: LD_INT 88
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: LIST
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: ST_TO_ADDR
26323: GO 26556
26325: LD_INT 3
26327: DOUBLE
26328: EQUAL
26329: IFTRUE 26333
26331: GO 26555
26333: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26334: LD_ADDR_VAR 0 4
26338: PUSH
26339: LD_INT 46
26341: PUSH
26342: LD_INT 47
26344: PUSH
26345: LD_INT 1
26347: PUSH
26348: LD_INT 2
26350: PUSH
26351: LD_INT 82
26353: PUSH
26354: LD_INT 83
26356: PUSH
26357: LD_INT 84
26359: PUSH
26360: LD_INT 85
26362: PUSH
26363: LD_INT 86
26365: PUSH
26366: LD_INT 11
26368: PUSH
26369: LD_INT 9
26371: PUSH
26372: LD_INT 20
26374: PUSH
26375: LD_INT 19
26377: PUSH
26378: LD_INT 21
26380: PUSH
26381: LD_INT 24
26383: PUSH
26384: LD_INT 22
26386: PUSH
26387: LD_INT 25
26389: PUSH
26390: LD_INT 28
26392: PUSH
26393: LD_INT 29
26395: PUSH
26396: LD_INT 30
26398: PUSH
26399: LD_INT 31
26401: PUSH
26402: LD_INT 37
26404: PUSH
26405: LD_INT 38
26407: PUSH
26408: LD_INT 32
26410: PUSH
26411: LD_INT 27
26413: PUSH
26414: LD_INT 33
26416: PUSH
26417: LD_INT 69
26419: PUSH
26420: LD_INT 39
26422: PUSH
26423: LD_INT 34
26425: PUSH
26426: LD_INT 40
26428: PUSH
26429: LD_INT 71
26431: PUSH
26432: LD_INT 23
26434: PUSH
26435: LD_INT 44
26437: PUSH
26438: LD_INT 48
26440: PUSH
26441: LD_INT 49
26443: PUSH
26444: LD_INT 50
26446: PUSH
26447: LD_INT 51
26449: PUSH
26450: LD_INT 52
26452: PUSH
26453: LD_INT 53
26455: PUSH
26456: LD_INT 54
26458: PUSH
26459: LD_INT 55
26461: PUSH
26462: LD_INT 56
26464: PUSH
26465: LD_INT 57
26467: PUSH
26468: LD_INT 58
26470: PUSH
26471: LD_INT 59
26473: PUSH
26474: LD_INT 63
26476: PUSH
26477: LD_INT 64
26479: PUSH
26480: LD_INT 65
26482: PUSH
26483: LD_INT 82
26485: PUSH
26486: LD_INT 83
26488: PUSH
26489: LD_INT 84
26491: PUSH
26492: LD_INT 85
26494: PUSH
26495: LD_INT 86
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: LIST
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: ST_TO_ADDR
26553: GO 26556
26555: POP
// if state > - 1 and state < 3 then
26556: LD_VAR 0 3
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: GREATER
26565: PUSH
26566: LD_VAR 0 3
26570: PUSH
26571: LD_INT 3
26573: LESS
26574: AND
26575: IFFALSE 26632
// for i in result do
26577: LD_ADDR_VAR 0 5
26581: PUSH
26582: LD_VAR 0 4
26586: PUSH
26587: FOR_IN
26588: IFFALSE 26630
// if GetTech ( i , side ) <> state then
26590: LD_VAR 0 5
26594: PPUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 321
26604: PUSH
26605: LD_VAR 0 3
26609: NONEQUAL
26610: IFFALSE 26628
// result := result diff i ;
26612: LD_ADDR_VAR 0 4
26616: PUSH
26617: LD_VAR 0 4
26621: PUSH
26622: LD_VAR 0 5
26626: DIFF
26627: ST_TO_ADDR
26628: GO 26587
26630: POP
26631: POP
// end ;
26632: LD_VAR 0 4
26636: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26637: LD_INT 0
26639: PPUSH
26640: PPUSH
26641: PPUSH
// result := true ;
26642: LD_ADDR_VAR 0 3
26646: PUSH
26647: LD_INT 1
26649: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26650: LD_ADDR_VAR 0 5
26654: PUSH
26655: LD_VAR 0 2
26659: PPUSH
26660: CALL_OW 480
26664: ST_TO_ADDR
// if not tmp then
26665: LD_VAR 0 5
26669: NOT
26670: IFFALSE 26674
// exit ;
26672: GO 26723
// for i in tmp do
26674: LD_ADDR_VAR 0 4
26678: PUSH
26679: LD_VAR 0 5
26683: PUSH
26684: FOR_IN
26685: IFFALSE 26721
// if GetTech ( i , side ) <> state_researched then
26687: LD_VAR 0 4
26691: PPUSH
26692: LD_VAR 0 1
26696: PPUSH
26697: CALL_OW 321
26701: PUSH
26702: LD_INT 2
26704: NONEQUAL
26705: IFFALSE 26719
// begin result := false ;
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_INT 0
26714: ST_TO_ADDR
// exit ;
26715: POP
26716: POP
26717: GO 26723
// end ;
26719: GO 26684
26721: POP
26722: POP
// end ;
26723: LD_VAR 0 3
26727: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26728: LD_INT 0
26730: PPUSH
26731: PPUSH
26732: PPUSH
26733: PPUSH
26734: PPUSH
26735: PPUSH
26736: PPUSH
26737: PPUSH
26738: PPUSH
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26743: LD_VAR 0 1
26747: NOT
26748: PUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 257
26758: PUSH
26759: LD_INT 9
26761: NONEQUAL
26762: OR
26763: IFFALSE 26767
// exit ;
26765: GO 27340
// side := GetSide ( unit ) ;
26767: LD_ADDR_VAR 0 9
26771: PUSH
26772: LD_VAR 0 1
26776: PPUSH
26777: CALL_OW 255
26781: ST_TO_ADDR
// tech_space := tech_spacanom ;
26782: LD_ADDR_VAR 0 12
26786: PUSH
26787: LD_INT 29
26789: ST_TO_ADDR
// tech_time := tech_taurad ;
26790: LD_ADDR_VAR 0 13
26794: PUSH
26795: LD_INT 28
26797: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26798: LD_ADDR_VAR 0 11
26802: PUSH
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 310
26812: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26813: LD_VAR 0 11
26817: PPUSH
26818: CALL_OW 247
26822: PUSH
26823: LD_INT 2
26825: EQUAL
26826: IFFALSE 26830
// exit ;
26828: GO 27340
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26830: LD_ADDR_VAR 0 8
26834: PUSH
26835: LD_INT 81
26837: PUSH
26838: LD_VAR 0 9
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 3
26849: PUSH
26850: LD_INT 21
26852: PUSH
26853: LD_INT 3
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PPUSH
26868: CALL_OW 69
26872: ST_TO_ADDR
// if not tmp then
26873: LD_VAR 0 8
26877: NOT
26878: IFFALSE 26882
// exit ;
26880: GO 27340
// if in_unit then
26882: LD_VAR 0 11
26886: IFFALSE 26910
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26888: LD_ADDR_VAR 0 10
26892: PUSH
26893: LD_VAR 0 8
26897: PPUSH
26898: LD_VAR 0 11
26902: PPUSH
26903: CALL_OW 74
26907: ST_TO_ADDR
26908: GO 26930
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26910: LD_ADDR_VAR 0 10
26914: PUSH
26915: LD_VAR 0 8
26919: PPUSH
26920: LD_VAR 0 1
26924: PPUSH
26925: CALL_OW 74
26929: ST_TO_ADDR
// if not enemy then
26930: LD_VAR 0 10
26934: NOT
26935: IFFALSE 26939
// exit ;
26937: GO 27340
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26939: LD_VAR 0 11
26943: PUSH
26944: LD_VAR 0 11
26948: PPUSH
26949: LD_VAR 0 10
26953: PPUSH
26954: CALL_OW 296
26958: PUSH
26959: LD_INT 13
26961: GREATER
26962: AND
26963: PUSH
26964: LD_VAR 0 1
26968: PPUSH
26969: LD_VAR 0 10
26973: PPUSH
26974: CALL_OW 296
26978: PUSH
26979: LD_INT 12
26981: GREATER
26982: OR
26983: IFFALSE 26987
// exit ;
26985: GO 27340
// missile := [ 1 ] ;
26987: LD_ADDR_VAR 0 14
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: EMPTY
26996: LIST
26997: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26998: LD_VAR 0 9
27002: PPUSH
27003: LD_VAR 0 12
27007: PPUSH
27008: CALL_OW 325
27012: IFFALSE 27041
// missile := Replace ( missile , missile + 1 , 2 ) ;
27014: LD_ADDR_VAR 0 14
27018: PUSH
27019: LD_VAR 0 14
27023: PPUSH
27024: LD_VAR 0 14
27028: PUSH
27029: LD_INT 1
27031: PLUS
27032: PPUSH
27033: LD_INT 2
27035: PPUSH
27036: CALL_OW 1
27040: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27041: LD_VAR 0 9
27045: PPUSH
27046: LD_VAR 0 13
27050: PPUSH
27051: CALL_OW 325
27055: PUSH
27056: LD_VAR 0 10
27060: PPUSH
27061: CALL_OW 255
27065: PPUSH
27066: LD_VAR 0 13
27070: PPUSH
27071: CALL_OW 325
27075: NOT
27076: AND
27077: IFFALSE 27106
// missile := Replace ( missile , missile + 1 , 3 ) ;
27079: LD_ADDR_VAR 0 14
27083: PUSH
27084: LD_VAR 0 14
27088: PPUSH
27089: LD_VAR 0 14
27093: PUSH
27094: LD_INT 1
27096: PLUS
27097: PPUSH
27098: LD_INT 3
27100: PPUSH
27101: CALL_OW 1
27105: ST_TO_ADDR
// if missile < 2 then
27106: LD_VAR 0 14
27110: PUSH
27111: LD_INT 2
27113: LESS
27114: IFFALSE 27118
// exit ;
27116: GO 27340
// x := GetX ( enemy ) ;
27118: LD_ADDR_VAR 0 4
27122: PUSH
27123: LD_VAR 0 10
27127: PPUSH
27128: CALL_OW 250
27132: ST_TO_ADDR
// y := GetY ( enemy ) ;
27133: LD_ADDR_VAR 0 5
27137: PUSH
27138: LD_VAR 0 10
27142: PPUSH
27143: CALL_OW 251
27147: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27148: LD_ADDR_VAR 0 6
27152: PUSH
27153: LD_VAR 0 4
27157: PUSH
27158: LD_INT 1
27160: NEG
27161: PPUSH
27162: LD_INT 1
27164: PPUSH
27165: CALL_OW 12
27169: PLUS
27170: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27171: LD_ADDR_VAR 0 7
27175: PUSH
27176: LD_VAR 0 5
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PPUSH
27185: LD_INT 1
27187: PPUSH
27188: CALL_OW 12
27192: PLUS
27193: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27194: LD_VAR 0 6
27198: PPUSH
27199: LD_VAR 0 7
27203: PPUSH
27204: CALL_OW 488
27208: NOT
27209: IFFALSE 27231
// begin _x := x ;
27211: LD_ADDR_VAR 0 6
27215: PUSH
27216: LD_VAR 0 4
27220: ST_TO_ADDR
// _y := y ;
27221: LD_ADDR_VAR 0 7
27225: PUSH
27226: LD_VAR 0 5
27230: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27231: LD_ADDR_VAR 0 3
27235: PUSH
27236: LD_INT 1
27238: PPUSH
27239: LD_VAR 0 14
27243: PPUSH
27244: CALL_OW 12
27248: ST_TO_ADDR
// case i of 1 :
27249: LD_VAR 0 3
27253: PUSH
27254: LD_INT 1
27256: DOUBLE
27257: EQUAL
27258: IFTRUE 27262
27260: GO 27279
27262: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27263: LD_VAR 0 1
27267: PPUSH
27268: LD_VAR 0 10
27272: PPUSH
27273: CALL_OW 115
27277: GO 27340
27279: LD_INT 2
27281: DOUBLE
27282: EQUAL
27283: IFTRUE 27287
27285: GO 27309
27287: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27288: LD_VAR 0 1
27292: PPUSH
27293: LD_VAR 0 6
27297: PPUSH
27298: LD_VAR 0 7
27302: PPUSH
27303: CALL_OW 153
27307: GO 27340
27309: LD_INT 3
27311: DOUBLE
27312: EQUAL
27313: IFTRUE 27317
27315: GO 27339
27317: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27318: LD_VAR 0 1
27322: PPUSH
27323: LD_VAR 0 6
27327: PPUSH
27328: LD_VAR 0 7
27332: PPUSH
27333: CALL_OW 154
27337: GO 27340
27339: POP
// end ;
27340: LD_VAR 0 2
27344: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27345: LD_INT 0
27347: PPUSH
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
// if not unit or not building then
27353: LD_VAR 0 1
27357: NOT
27358: PUSH
27359: LD_VAR 0 2
27363: NOT
27364: OR
27365: IFFALSE 27369
// exit ;
27367: GO 27527
// x := GetX ( building ) ;
27369: LD_ADDR_VAR 0 5
27373: PUSH
27374: LD_VAR 0 2
27378: PPUSH
27379: CALL_OW 250
27383: ST_TO_ADDR
// y := GetY ( building ) ;
27384: LD_ADDR_VAR 0 6
27388: PUSH
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 251
27398: ST_TO_ADDR
// for i = 0 to 5 do
27399: LD_ADDR_VAR 0 4
27403: PUSH
27404: DOUBLE
27405: LD_INT 0
27407: DEC
27408: ST_TO_ADDR
27409: LD_INT 5
27411: PUSH
27412: FOR_TO
27413: IFFALSE 27525
// begin _x := ShiftX ( x , i , 3 ) ;
27415: LD_ADDR_VAR 0 7
27419: PUSH
27420: LD_VAR 0 5
27424: PPUSH
27425: LD_VAR 0 4
27429: PPUSH
27430: LD_INT 3
27432: PPUSH
27433: CALL_OW 272
27437: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
27438: LD_ADDR_VAR 0 8
27442: PUSH
27443: LD_VAR 0 6
27447: PPUSH
27448: LD_VAR 0 4
27452: PPUSH
27453: LD_INT 3
27455: PPUSH
27456: CALL_OW 273
27460: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27461: LD_VAR 0 7
27465: PPUSH
27466: LD_VAR 0 8
27470: PPUSH
27471: CALL_OW 488
27475: NOT
27476: IFFALSE 27480
// continue ;
27478: GO 27412
// if HexInfo ( _x , _y ) = 0 then
27480: LD_VAR 0 7
27484: PPUSH
27485: LD_VAR 0 8
27489: PPUSH
27490: CALL_OW 428
27494: PUSH
27495: LD_INT 0
27497: EQUAL
27498: IFFALSE 27523
// begin ComMoveXY ( unit , _x , _y ) ;
27500: LD_VAR 0 1
27504: PPUSH
27505: LD_VAR 0 7
27509: PPUSH
27510: LD_VAR 0 8
27514: PPUSH
27515: CALL_OW 111
// exit ;
27519: POP
27520: POP
27521: GO 27527
// end ; end ;
27523: GO 27412
27525: POP
27526: POP
// end ;
27527: LD_VAR 0 3
27531: RET
// export function ScanBase ( side , base_area ) ; begin
27532: LD_INT 0
27534: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
27535: LD_ADDR_VAR 0 3
27539: PUSH
27540: LD_VAR 0 2
27544: PPUSH
27545: LD_INT 81
27547: PUSH
27548: LD_VAR 0 1
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PPUSH
27557: CALL_OW 70
27561: ST_TO_ADDR
// end ;
27562: LD_VAR 0 3
27566: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
27567: LD_INT 0
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
// result := false ;
27573: LD_ADDR_VAR 0 2
27577: PUSH
27578: LD_INT 0
27580: ST_TO_ADDR
// side := GetSide ( unit ) ;
27581: LD_ADDR_VAR 0 3
27585: PUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 255
27595: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27596: LD_ADDR_VAR 0 4
27600: PUSH
27601: LD_VAR 0 1
27605: PPUSH
27606: CALL_OW 248
27610: ST_TO_ADDR
// case nat of 1 :
27611: LD_VAR 0 4
27615: PUSH
27616: LD_INT 1
27618: DOUBLE
27619: EQUAL
27620: IFTRUE 27624
27622: GO 27635
27624: POP
// tech := tech_lassight ; 2 :
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_INT 12
27632: ST_TO_ADDR
27633: GO 27674
27635: LD_INT 2
27637: DOUBLE
27638: EQUAL
27639: IFTRUE 27643
27641: GO 27654
27643: POP
// tech := tech_mortar ; 3 :
27644: LD_ADDR_VAR 0 5
27648: PUSH
27649: LD_INT 41
27651: ST_TO_ADDR
27652: GO 27674
27654: LD_INT 3
27656: DOUBLE
27657: EQUAL
27658: IFTRUE 27662
27660: GO 27673
27662: POP
// tech := tech_bazooka ; end ;
27663: LD_ADDR_VAR 0 5
27667: PUSH
27668: LD_INT 44
27670: ST_TO_ADDR
27671: GO 27674
27673: POP
// if Researched ( side , tech ) then
27674: LD_VAR 0 3
27678: PPUSH
27679: LD_VAR 0 5
27683: PPUSH
27684: CALL_OW 325
27688: IFFALSE 27715
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27690: LD_ADDR_VAR 0 2
27694: PUSH
27695: LD_INT 5
27697: PUSH
27698: LD_INT 8
27700: PUSH
27701: LD_INT 9
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: LIST
27708: PUSH
27709: LD_VAR 0 4
27713: ARRAY
27714: ST_TO_ADDR
// end ;
27715: LD_VAR 0 2
27719: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27720: LD_INT 0
27722: PPUSH
27723: PPUSH
27724: PPUSH
// if not mines then
27725: LD_VAR 0 2
27729: NOT
27730: IFFALSE 27734
// exit ;
27732: GO 27878
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27734: LD_ADDR_VAR 0 5
27738: PUSH
27739: LD_INT 81
27741: PUSH
27742: LD_VAR 0 1
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 3
27753: PUSH
27754: LD_INT 21
27756: PUSH
27757: LD_INT 3
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PPUSH
27772: CALL_OW 69
27776: ST_TO_ADDR
// for i in mines do
27777: LD_ADDR_VAR 0 4
27781: PUSH
27782: LD_VAR 0 2
27786: PUSH
27787: FOR_IN
27788: IFFALSE 27876
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27790: LD_VAR 0 4
27794: PUSH
27795: LD_INT 1
27797: ARRAY
27798: PPUSH
27799: LD_VAR 0 4
27803: PUSH
27804: LD_INT 2
27806: ARRAY
27807: PPUSH
27808: CALL_OW 458
27812: NOT
27813: IFFALSE 27817
// continue ;
27815: GO 27787
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27817: LD_VAR 0 4
27821: PUSH
27822: LD_INT 1
27824: ARRAY
27825: PPUSH
27826: LD_VAR 0 4
27830: PUSH
27831: LD_INT 2
27833: ARRAY
27834: PPUSH
27835: CALL_OW 428
27839: PUSH
27840: LD_VAR 0 5
27844: IN
27845: IFFALSE 27874
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27847: LD_VAR 0 4
27851: PUSH
27852: LD_INT 1
27854: ARRAY
27855: PPUSH
27856: LD_VAR 0 4
27860: PUSH
27861: LD_INT 2
27863: ARRAY
27864: PPUSH
27865: LD_VAR 0 1
27869: PPUSH
27870: CALL_OW 456
// end ;
27874: GO 27787
27876: POP
27877: POP
// end ;
27878: LD_VAR 0 3
27882: RET
// export function Count ( array ) ; var i ; begin
27883: LD_INT 0
27885: PPUSH
27886: PPUSH
// result := 0 ;
27887: LD_ADDR_VAR 0 2
27891: PUSH
27892: LD_INT 0
27894: ST_TO_ADDR
// for i in array do
27895: LD_ADDR_VAR 0 3
27899: PUSH
27900: LD_VAR 0 1
27904: PUSH
27905: FOR_IN
27906: IFFALSE 27930
// if i then
27908: LD_VAR 0 3
27912: IFFALSE 27928
// result := result + 1 ;
27914: LD_ADDR_VAR 0 2
27918: PUSH
27919: LD_VAR 0 2
27923: PUSH
27924: LD_INT 1
27926: PLUS
27927: ST_TO_ADDR
27928: GO 27905
27930: POP
27931: POP
// end ;
27932: LD_VAR 0 2
27936: RET
// export function IsEmpty ( building ) ; begin
27937: LD_INT 0
27939: PPUSH
// if not building then
27940: LD_VAR 0 1
27944: NOT
27945: IFFALSE 27949
// exit ;
27947: GO 27992
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27949: LD_ADDR_VAR 0 2
27953: PUSH
27954: LD_VAR 0 1
27958: PUSH
27959: LD_INT 22
27961: PUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: CALL_OW 255
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 58
27978: PUSH
27979: EMPTY
27980: LIST
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PPUSH
27986: CALL_OW 69
27990: IN
27991: ST_TO_ADDR
// end ;
27992: LD_VAR 0 2
27996: RET
// export function IsNotFull ( building ) ; var places ; begin
27997: LD_INT 0
27999: PPUSH
28000: PPUSH
// if not building then
28001: LD_VAR 0 1
28005: NOT
28006: IFFALSE 28010
// exit ;
28008: GO 28181
// result := false ;
28010: LD_ADDR_VAR 0 2
28014: PUSH
28015: LD_INT 0
28017: ST_TO_ADDR
// places := 0 ;
28018: LD_ADDR_VAR 0 3
28022: PUSH
28023: LD_INT 0
28025: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
28026: LD_VAR 0 1
28030: PPUSH
28031: CALL_OW 266
28035: PUSH
28036: LD_INT 0
28038: DOUBLE
28039: EQUAL
28040: IFTRUE 28098
28042: LD_INT 1
28044: DOUBLE
28045: EQUAL
28046: IFTRUE 28098
28048: LD_INT 6
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28098
28054: LD_INT 7
28056: DOUBLE
28057: EQUAL
28058: IFTRUE 28098
28060: LD_INT 8
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28098
28066: LD_INT 4
28068: DOUBLE
28069: EQUAL
28070: IFTRUE 28098
28072: LD_INT 5
28074: DOUBLE
28075: EQUAL
28076: IFTRUE 28098
28078: LD_INT 2
28080: DOUBLE
28081: EQUAL
28082: IFTRUE 28098
28084: LD_INT 3
28086: DOUBLE
28087: EQUAL
28088: IFTRUE 28098
28090: LD_INT 35
28092: DOUBLE
28093: EQUAL
28094: IFTRUE 28098
28096: GO 28109
28098: POP
// places := 6 ; b_bunker , b_breastwork :
28099: LD_ADDR_VAR 0 3
28103: PUSH
28104: LD_INT 6
28106: ST_TO_ADDR
28107: GO 28154
28109: LD_INT 32
28111: DOUBLE
28112: EQUAL
28113: IFTRUE 28123
28115: LD_INT 31
28117: DOUBLE
28118: EQUAL
28119: IFTRUE 28123
28121: GO 28134
28123: POP
// places := 1 ; b_control_tower :
28124: LD_ADDR_VAR 0 3
28128: PUSH
28129: LD_INT 1
28131: ST_TO_ADDR
28132: GO 28154
28134: LD_INT 36
28136: DOUBLE
28137: EQUAL
28138: IFTRUE 28142
28140: GO 28153
28142: POP
// places := 3 ; end ;
28143: LD_ADDR_VAR 0 3
28147: PUSH
28148: LD_INT 3
28150: ST_TO_ADDR
28151: GO 28154
28153: POP
// if places then
28154: LD_VAR 0 3
28158: IFFALSE 28181
// result := UnitsInside ( building ) < places ;
28160: LD_ADDR_VAR 0 2
28164: PUSH
28165: LD_VAR 0 1
28169: PPUSH
28170: CALL_OW 313
28174: PUSH
28175: LD_VAR 0 3
28179: LESS
28180: ST_TO_ADDR
// end ;
28181: LD_VAR 0 2
28185: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28186: LD_INT 0
28188: PPUSH
28189: PPUSH
28190: PPUSH
28191: PPUSH
// tmp := [ ] ;
28192: LD_ADDR_VAR 0 3
28196: PUSH
28197: EMPTY
28198: ST_TO_ADDR
// list := [ ] ;
28199: LD_ADDR_VAR 0 5
28203: PUSH
28204: EMPTY
28205: ST_TO_ADDR
// for i = 16 to 25 do
28206: LD_ADDR_VAR 0 4
28210: PUSH
28211: DOUBLE
28212: LD_INT 16
28214: DEC
28215: ST_TO_ADDR
28216: LD_INT 25
28218: PUSH
28219: FOR_TO
28220: IFFALSE 28293
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28222: LD_ADDR_VAR 0 3
28226: PUSH
28227: LD_VAR 0 3
28231: PUSH
28232: LD_INT 22
28234: PUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: CALL_OW 255
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 91
28251: PUSH
28252: LD_VAR 0 1
28256: PUSH
28257: LD_INT 6
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 30
28267: PUSH
28268: LD_VAR 0 4
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: LIST
28281: PUSH
28282: EMPTY
28283: LIST
28284: PPUSH
28285: CALL_OW 69
28289: ADD
28290: ST_TO_ADDR
28291: GO 28219
28293: POP
28294: POP
// for i = 1 to tmp do
28295: LD_ADDR_VAR 0 4
28299: PUSH
28300: DOUBLE
28301: LD_INT 1
28303: DEC
28304: ST_TO_ADDR
28305: LD_VAR 0 3
28309: PUSH
28310: FOR_TO
28311: IFFALSE 28399
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28313: LD_ADDR_VAR 0 5
28317: PUSH
28318: LD_VAR 0 5
28322: PUSH
28323: LD_VAR 0 3
28327: PUSH
28328: LD_VAR 0 4
28332: ARRAY
28333: PPUSH
28334: CALL_OW 266
28338: PUSH
28339: LD_VAR 0 3
28343: PUSH
28344: LD_VAR 0 4
28348: ARRAY
28349: PPUSH
28350: CALL_OW 250
28354: PUSH
28355: LD_VAR 0 3
28359: PUSH
28360: LD_VAR 0 4
28364: ARRAY
28365: PPUSH
28366: CALL_OW 251
28370: PUSH
28371: LD_VAR 0 3
28375: PUSH
28376: LD_VAR 0 4
28380: ARRAY
28381: PPUSH
28382: CALL_OW 254
28386: PUSH
28387: EMPTY
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: PUSH
28393: EMPTY
28394: LIST
28395: ADD
28396: ST_TO_ADDR
28397: GO 28310
28399: POP
28400: POP
// result := list ;
28401: LD_ADDR_VAR 0 2
28405: PUSH
28406: LD_VAR 0 5
28410: ST_TO_ADDR
// end ;
28411: LD_VAR 0 2
28415: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28416: LD_INT 0
28418: PPUSH
28419: PPUSH
28420: PPUSH
28421: PPUSH
28422: PPUSH
28423: PPUSH
28424: PPUSH
// if not factory then
28425: LD_VAR 0 1
28429: NOT
28430: IFFALSE 28434
// exit ;
28432: GO 29027
// if control = control_apeman then
28434: LD_VAR 0 4
28438: PUSH
28439: LD_INT 5
28441: EQUAL
28442: IFFALSE 28551
// begin tmp := UnitsInside ( factory ) ;
28444: LD_ADDR_VAR 0 8
28448: PUSH
28449: LD_VAR 0 1
28453: PPUSH
28454: CALL_OW 313
28458: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28459: LD_VAR 0 8
28463: PPUSH
28464: LD_INT 25
28466: PUSH
28467: LD_INT 12
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PPUSH
28474: CALL_OW 72
28478: NOT
28479: IFFALSE 28489
// control := control_manual ;
28481: LD_ADDR_VAR 0 4
28485: PUSH
28486: LD_INT 1
28488: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28489: LD_ADDR_VAR 0 8
28493: PUSH
28494: LD_VAR 0 1
28498: PPUSH
28499: CALL 28186 0 1
28503: ST_TO_ADDR
// if tmp then
28504: LD_VAR 0 8
28508: IFFALSE 28551
// begin for i in tmp do
28510: LD_ADDR_VAR 0 7
28514: PUSH
28515: LD_VAR 0 8
28519: PUSH
28520: FOR_IN
28521: IFFALSE 28549
// if i [ 1 ] = b_ext_radio then
28523: LD_VAR 0 7
28527: PUSH
28528: LD_INT 1
28530: ARRAY
28531: PUSH
28532: LD_INT 22
28534: EQUAL
28535: IFFALSE 28547
// begin control := control_remote ;
28537: LD_ADDR_VAR 0 4
28541: PUSH
28542: LD_INT 2
28544: ST_TO_ADDR
// break ;
28545: GO 28549
// end ;
28547: GO 28520
28549: POP
28550: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28551: LD_VAR 0 1
28555: PPUSH
28556: LD_VAR 0 2
28560: PPUSH
28561: LD_VAR 0 3
28565: PPUSH
28566: LD_VAR 0 4
28570: PPUSH
28571: LD_VAR 0 5
28575: PPUSH
28576: CALL_OW 448
28580: IFFALSE 28615
// begin result := [ chassis , engine , control , weapon ] ;
28582: LD_ADDR_VAR 0 6
28586: PUSH
28587: LD_VAR 0 2
28591: PUSH
28592: LD_VAR 0 3
28596: PUSH
28597: LD_VAR 0 4
28601: PUSH
28602: LD_VAR 0 5
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: ST_TO_ADDR
// exit ;
28613: GO 29027
// end ; _chassis := AvailableChassisList ( factory ) ;
28615: LD_ADDR_VAR 0 9
28619: PUSH
28620: LD_VAR 0 1
28624: PPUSH
28625: CALL_OW 475
28629: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28630: LD_ADDR_VAR 0 11
28634: PUSH
28635: LD_VAR 0 1
28639: PPUSH
28640: CALL_OW 476
28644: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28645: LD_ADDR_VAR 0 12
28649: PUSH
28650: LD_VAR 0 1
28654: PPUSH
28655: CALL_OW 477
28659: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
28660: LD_ADDR_VAR 0 10
28664: PUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 478
28674: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
28675: LD_VAR 0 9
28679: NOT
28680: PUSH
28681: LD_VAR 0 11
28685: NOT
28686: OR
28687: PUSH
28688: LD_VAR 0 12
28692: NOT
28693: OR
28694: PUSH
28695: LD_VAR 0 10
28699: NOT
28700: OR
28701: IFFALSE 28736
// begin result := [ chassis , engine , control , weapon ] ;
28703: LD_ADDR_VAR 0 6
28707: PUSH
28708: LD_VAR 0 2
28712: PUSH
28713: LD_VAR 0 3
28717: PUSH
28718: LD_VAR 0 4
28722: PUSH
28723: LD_VAR 0 5
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: ST_TO_ADDR
// exit ;
28734: GO 29027
// end ; if not chassis in _chassis then
28736: LD_VAR 0 2
28740: PUSH
28741: LD_VAR 0 9
28745: IN
28746: NOT
28747: IFFALSE 28773
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28749: LD_ADDR_VAR 0 2
28753: PUSH
28754: LD_VAR 0 9
28758: PUSH
28759: LD_INT 1
28761: PPUSH
28762: LD_VAR 0 9
28766: PPUSH
28767: CALL_OW 12
28771: ARRAY
28772: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28773: LD_VAR 0 2
28777: PPUSH
28778: LD_VAR 0 3
28782: PPUSH
28783: CALL 29032 0 2
28787: NOT
28788: IFFALSE 28847
// repeat engine := _engine [ 1 ] ;
28790: LD_ADDR_VAR 0 3
28794: PUSH
28795: LD_VAR 0 11
28799: PUSH
28800: LD_INT 1
28802: ARRAY
28803: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28804: LD_ADDR_VAR 0 11
28808: PUSH
28809: LD_VAR 0 11
28813: PPUSH
28814: LD_INT 1
28816: PPUSH
28817: CALL_OW 3
28821: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28822: LD_VAR 0 2
28826: PPUSH
28827: LD_VAR 0 3
28831: PPUSH
28832: CALL 29032 0 2
28836: PUSH
28837: LD_VAR 0 11
28841: PUSH
28842: EMPTY
28843: EQUAL
28844: OR
28845: IFFALSE 28790
// if not control in _control then
28847: LD_VAR 0 4
28851: PUSH
28852: LD_VAR 0 12
28856: IN
28857: NOT
28858: IFFALSE 28884
// control := _control [ rand ( 1 , _control ) ] ;
28860: LD_ADDR_VAR 0 4
28864: PUSH
28865: LD_VAR 0 12
28869: PUSH
28870: LD_INT 1
28872: PPUSH
28873: LD_VAR 0 12
28877: PPUSH
28878: CALL_OW 12
28882: ARRAY
28883: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28884: LD_VAR 0 2
28888: PPUSH
28889: LD_VAR 0 5
28893: PPUSH
28894: CALL 29252 0 2
28898: NOT
28899: IFFALSE 28958
// repeat weapon := _weapon [ 1 ] ;
28901: LD_ADDR_VAR 0 5
28905: PUSH
28906: LD_VAR 0 10
28910: PUSH
28911: LD_INT 1
28913: ARRAY
28914: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28915: LD_ADDR_VAR 0 10
28919: PUSH
28920: LD_VAR 0 10
28924: PPUSH
28925: LD_INT 1
28927: PPUSH
28928: CALL_OW 3
28932: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28933: LD_VAR 0 2
28937: PPUSH
28938: LD_VAR 0 5
28942: PPUSH
28943: CALL 29252 0 2
28947: PUSH
28948: LD_VAR 0 10
28952: PUSH
28953: EMPTY
28954: EQUAL
28955: OR
28956: IFFALSE 28901
// result := [ ] ;
28958: LD_ADDR_VAR 0 6
28962: PUSH
28963: EMPTY
28964: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28965: LD_VAR 0 1
28969: PPUSH
28970: LD_VAR 0 2
28974: PPUSH
28975: LD_VAR 0 3
28979: PPUSH
28980: LD_VAR 0 4
28984: PPUSH
28985: LD_VAR 0 5
28989: PPUSH
28990: CALL_OW 448
28994: IFFALSE 29027
// result := [ chassis , engine , control , weapon ] ;
28996: LD_ADDR_VAR 0 6
29000: PUSH
29001: LD_VAR 0 2
29005: PUSH
29006: LD_VAR 0 3
29010: PUSH
29011: LD_VAR 0 4
29015: PUSH
29016: LD_VAR 0 5
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: ST_TO_ADDR
// end ;
29027: LD_VAR 0 6
29031: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29032: LD_INT 0
29034: PPUSH
// if not chassis or not engine then
29035: LD_VAR 0 1
29039: NOT
29040: PUSH
29041: LD_VAR 0 2
29045: NOT
29046: OR
29047: IFFALSE 29051
// exit ;
29049: GO 29247
// case engine of engine_solar :
29051: LD_VAR 0 2
29055: PUSH
29056: LD_INT 2
29058: DOUBLE
29059: EQUAL
29060: IFTRUE 29064
29062: GO 29102
29064: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29065: LD_ADDR_VAR 0 3
29069: PUSH
29070: LD_INT 11
29072: PUSH
29073: LD_INT 12
29075: PUSH
29076: LD_INT 13
29078: PUSH
29079: LD_INT 14
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 3
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: ST_TO_ADDR
29100: GO 29231
29102: LD_INT 1
29104: DOUBLE
29105: EQUAL
29106: IFTRUE 29110
29108: GO 29172
29110: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29111: LD_ADDR_VAR 0 3
29115: PUSH
29116: LD_INT 11
29118: PUSH
29119: LD_INT 12
29121: PUSH
29122: LD_INT 13
29124: PUSH
29125: LD_INT 14
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: LD_INT 3
29136: PUSH
29137: LD_INT 4
29139: PUSH
29140: LD_INT 5
29142: PUSH
29143: LD_INT 21
29145: PUSH
29146: LD_INT 23
29148: PUSH
29149: LD_INT 22
29151: PUSH
29152: LD_INT 24
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: ST_TO_ADDR
29170: GO 29231
29172: LD_INT 3
29174: DOUBLE
29175: EQUAL
29176: IFTRUE 29180
29178: GO 29230
29180: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29181: LD_ADDR_VAR 0 3
29185: PUSH
29186: LD_INT 13
29188: PUSH
29189: LD_INT 14
29191: PUSH
29192: LD_INT 2
29194: PUSH
29195: LD_INT 3
29197: PUSH
29198: LD_INT 4
29200: PUSH
29201: LD_INT 5
29203: PUSH
29204: LD_INT 21
29206: PUSH
29207: LD_INT 22
29209: PUSH
29210: LD_INT 23
29212: PUSH
29213: LD_INT 24
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: ST_TO_ADDR
29228: GO 29231
29230: POP
// result := ( chassis in result ) ;
29231: LD_ADDR_VAR 0 3
29235: PUSH
29236: LD_VAR 0 1
29240: PUSH
29241: LD_VAR 0 3
29245: IN
29246: ST_TO_ADDR
// end ;
29247: LD_VAR 0 3
29251: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29252: LD_INT 0
29254: PPUSH
// if not chassis or not weapon then
29255: LD_VAR 0 1
29259: NOT
29260: PUSH
29261: LD_VAR 0 2
29265: NOT
29266: OR
29267: IFFALSE 29271
// exit ;
29269: GO 30331
// case weapon of us_machine_gun :
29271: LD_VAR 0 2
29275: PUSH
29276: LD_INT 2
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29284
29282: GO 29314
29284: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29285: LD_ADDR_VAR 0 3
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: LD_INT 3
29298: PUSH
29299: LD_INT 4
29301: PUSH
29302: LD_INT 5
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: ST_TO_ADDR
29312: GO 30315
29314: LD_INT 3
29316: DOUBLE
29317: EQUAL
29318: IFTRUE 29322
29320: GO 29352
29322: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29323: LD_ADDR_VAR 0 3
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 2
29333: PUSH
29334: LD_INT 3
29336: PUSH
29337: LD_INT 4
29339: PUSH
29340: LD_INT 5
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: ST_TO_ADDR
29350: GO 30315
29352: LD_INT 11
29354: DOUBLE
29355: EQUAL
29356: IFTRUE 29360
29358: GO 29390
29360: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29361: LD_ADDR_VAR 0 3
29365: PUSH
29366: LD_INT 1
29368: PUSH
29369: LD_INT 2
29371: PUSH
29372: LD_INT 3
29374: PUSH
29375: LD_INT 4
29377: PUSH
29378: LD_INT 5
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: ST_TO_ADDR
29388: GO 30315
29390: LD_INT 4
29392: DOUBLE
29393: EQUAL
29394: IFTRUE 29398
29396: GO 29424
29398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29399: LD_ADDR_VAR 0 3
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 3
29409: PUSH
29410: LD_INT 4
29412: PUSH
29413: LD_INT 5
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: LIST
29420: LIST
29421: ST_TO_ADDR
29422: GO 30315
29424: LD_INT 5
29426: DOUBLE
29427: EQUAL
29428: IFTRUE 29432
29430: GO 29458
29432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29433: LD_ADDR_VAR 0 3
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: LD_INT 3
29443: PUSH
29444: LD_INT 4
29446: PUSH
29447: LD_INT 5
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: ST_TO_ADDR
29456: GO 30315
29458: LD_INT 9
29460: DOUBLE
29461: EQUAL
29462: IFTRUE 29466
29464: GO 29492
29466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29467: LD_ADDR_VAR 0 3
29471: PUSH
29472: LD_INT 2
29474: PUSH
29475: LD_INT 3
29477: PUSH
29478: LD_INT 4
29480: PUSH
29481: LD_INT 5
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: LIST
29488: LIST
29489: ST_TO_ADDR
29490: GO 30315
29492: LD_INT 7
29494: DOUBLE
29495: EQUAL
29496: IFTRUE 29500
29498: GO 29526
29500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29501: LD_ADDR_VAR 0 3
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 3
29511: PUSH
29512: LD_INT 4
29514: PUSH
29515: LD_INT 5
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: LIST
29522: LIST
29523: ST_TO_ADDR
29524: GO 30315
29526: LD_INT 12
29528: DOUBLE
29529: EQUAL
29530: IFTRUE 29534
29532: GO 29560
29534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: LD_INT 2
29542: PUSH
29543: LD_INT 3
29545: PUSH
29546: LD_INT 4
29548: PUSH
29549: LD_INT 5
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: ST_TO_ADDR
29558: GO 30315
29560: LD_INT 13
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29594
29568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29569: LD_ADDR_VAR 0 3
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: LD_INT 3
29579: PUSH
29580: LD_INT 4
29582: PUSH
29583: LD_INT 5
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
29592: GO 30315
29594: LD_INT 14
29596: DOUBLE
29597: EQUAL
29598: IFTRUE 29602
29600: GO 29620
29602: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29603: LD_ADDR_VAR 0 3
29607: PUSH
29608: LD_INT 4
29610: PUSH
29611: LD_INT 5
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: ST_TO_ADDR
29618: GO 30315
29620: LD_INT 6
29622: DOUBLE
29623: EQUAL
29624: IFTRUE 29628
29626: GO 29646
29628: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29629: LD_ADDR_VAR 0 3
29633: PUSH
29634: LD_INT 4
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: ST_TO_ADDR
29644: GO 30315
29646: LD_INT 10
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29672
29654: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29655: LD_ADDR_VAR 0 3
29659: PUSH
29660: LD_INT 4
29662: PUSH
29663: LD_INT 5
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: ST_TO_ADDR
29670: GO 30315
29672: LD_INT 22
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29706
29680: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29681: LD_ADDR_VAR 0 3
29685: PUSH
29686: LD_INT 11
29688: PUSH
29689: LD_INT 12
29691: PUSH
29692: LD_INT 13
29694: PUSH
29695: LD_INT 14
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: ST_TO_ADDR
29704: GO 30315
29706: LD_INT 23
29708: DOUBLE
29709: EQUAL
29710: IFTRUE 29714
29712: GO 29740
29714: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29715: LD_ADDR_VAR 0 3
29719: PUSH
29720: LD_INT 11
29722: PUSH
29723: LD_INT 12
29725: PUSH
29726: LD_INT 13
29728: PUSH
29729: LD_INT 14
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: ST_TO_ADDR
29738: GO 30315
29740: LD_INT 24
29742: DOUBLE
29743: EQUAL
29744: IFTRUE 29748
29746: GO 29774
29748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29749: LD_ADDR_VAR 0 3
29753: PUSH
29754: LD_INT 11
29756: PUSH
29757: LD_INT 12
29759: PUSH
29760: LD_INT 13
29762: PUSH
29763: LD_INT 14
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: ST_TO_ADDR
29772: GO 30315
29774: LD_INT 30
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29808
29782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29783: LD_ADDR_VAR 0 3
29787: PUSH
29788: LD_INT 11
29790: PUSH
29791: LD_INT 12
29793: PUSH
29794: LD_INT 13
29796: PUSH
29797: LD_INT 14
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: ST_TO_ADDR
29806: GO 30315
29808: LD_INT 25
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29834
29816: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29817: LD_ADDR_VAR 0 3
29821: PUSH
29822: LD_INT 13
29824: PUSH
29825: LD_INT 14
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: ST_TO_ADDR
29832: GO 30315
29834: LD_INT 27
29836: DOUBLE
29837: EQUAL
29838: IFTRUE 29842
29840: GO 29860
29842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29843: LD_ADDR_VAR 0 3
29847: PUSH
29848: LD_INT 13
29850: PUSH
29851: LD_INT 14
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: ST_TO_ADDR
29858: GO 30315
29860: LD_INT 92
29862: DOUBLE
29863: EQUAL
29864: IFTRUE 29868
29866: GO 29894
29868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29869: LD_ADDR_VAR 0 3
29873: PUSH
29874: LD_INT 11
29876: PUSH
29877: LD_INT 12
29879: PUSH
29880: LD_INT 13
29882: PUSH
29883: LD_INT 14
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: LIST
29890: LIST
29891: ST_TO_ADDR
29892: GO 30315
29894: LD_INT 28
29896: DOUBLE
29897: EQUAL
29898: IFTRUE 29902
29900: GO 29920
29902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29903: LD_ADDR_VAR 0 3
29907: PUSH
29908: LD_INT 13
29910: PUSH
29911: LD_INT 14
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: ST_TO_ADDR
29918: GO 30315
29920: LD_INT 29
29922: DOUBLE
29923: EQUAL
29924: IFTRUE 29928
29926: GO 29946
29928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29929: LD_ADDR_VAR 0 3
29933: PUSH
29934: LD_INT 13
29936: PUSH
29937: LD_INT 14
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: ST_TO_ADDR
29944: GO 30315
29946: LD_INT 31
29948: DOUBLE
29949: EQUAL
29950: IFTRUE 29954
29952: GO 29972
29954: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29955: LD_ADDR_VAR 0 3
29959: PUSH
29960: LD_INT 13
29962: PUSH
29963: LD_INT 14
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: ST_TO_ADDR
29970: GO 30315
29972: LD_INT 26
29974: DOUBLE
29975: EQUAL
29976: IFTRUE 29980
29978: GO 29998
29980: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29981: LD_ADDR_VAR 0 3
29985: PUSH
29986: LD_INT 13
29988: PUSH
29989: LD_INT 14
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: ST_TO_ADDR
29996: GO 30315
29998: LD_INT 42
30000: DOUBLE
30001: EQUAL
30002: IFTRUE 30006
30004: GO 30032
30006: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30007: LD_ADDR_VAR 0 3
30011: PUSH
30012: LD_INT 21
30014: PUSH
30015: LD_INT 22
30017: PUSH
30018: LD_INT 23
30020: PUSH
30021: LD_INT 24
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: ST_TO_ADDR
30030: GO 30315
30032: LD_INT 43
30034: DOUBLE
30035: EQUAL
30036: IFTRUE 30040
30038: GO 30066
30040: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30041: LD_ADDR_VAR 0 3
30045: PUSH
30046: LD_INT 21
30048: PUSH
30049: LD_INT 22
30051: PUSH
30052: LD_INT 23
30054: PUSH
30055: LD_INT 24
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: ST_TO_ADDR
30064: GO 30315
30066: LD_INT 44
30068: DOUBLE
30069: EQUAL
30070: IFTRUE 30074
30072: GO 30100
30074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30075: LD_ADDR_VAR 0 3
30079: PUSH
30080: LD_INT 21
30082: PUSH
30083: LD_INT 22
30085: PUSH
30086: LD_INT 23
30088: PUSH
30089: LD_INT 24
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: ST_TO_ADDR
30098: GO 30315
30100: LD_INT 45
30102: DOUBLE
30103: EQUAL
30104: IFTRUE 30108
30106: GO 30134
30108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 21
30116: PUSH
30117: LD_INT 22
30119: PUSH
30120: LD_INT 23
30122: PUSH
30123: LD_INT 24
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: ST_TO_ADDR
30132: GO 30315
30134: LD_INT 49
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30168
30142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30143: LD_ADDR_VAR 0 3
30147: PUSH
30148: LD_INT 21
30150: PUSH
30151: LD_INT 22
30153: PUSH
30154: LD_INT 23
30156: PUSH
30157: LD_INT 24
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: ST_TO_ADDR
30166: GO 30315
30168: LD_INT 51
30170: DOUBLE
30171: EQUAL
30172: IFTRUE 30176
30174: GO 30202
30176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30177: LD_ADDR_VAR 0 3
30181: PUSH
30182: LD_INT 21
30184: PUSH
30185: LD_INT 22
30187: PUSH
30188: LD_INT 23
30190: PUSH
30191: LD_INT 24
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: ST_TO_ADDR
30200: GO 30315
30202: LD_INT 52
30204: DOUBLE
30205: EQUAL
30206: IFTRUE 30210
30208: GO 30236
30210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30211: LD_ADDR_VAR 0 3
30215: PUSH
30216: LD_INT 21
30218: PUSH
30219: LD_INT 22
30221: PUSH
30222: LD_INT 23
30224: PUSH
30225: LD_INT 24
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: ST_TO_ADDR
30234: GO 30315
30236: LD_INT 53
30238: DOUBLE
30239: EQUAL
30240: IFTRUE 30244
30242: GO 30262
30244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30245: LD_ADDR_VAR 0 3
30249: PUSH
30250: LD_INT 23
30252: PUSH
30253: LD_INT 24
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: ST_TO_ADDR
30260: GO 30315
30262: LD_INT 46
30264: DOUBLE
30265: EQUAL
30266: IFTRUE 30270
30268: GO 30288
30270: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30271: LD_ADDR_VAR 0 3
30275: PUSH
30276: LD_INT 23
30278: PUSH
30279: LD_INT 24
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: ST_TO_ADDR
30286: GO 30315
30288: LD_INT 47
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30296
30294: GO 30314
30296: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30297: LD_ADDR_VAR 0 3
30301: PUSH
30302: LD_INT 23
30304: PUSH
30305: LD_INT 24
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 30315
30314: POP
// result := ( chassis in result ) ;
30315: LD_ADDR_VAR 0 3
30319: PUSH
30320: LD_VAR 0 1
30324: PUSH
30325: LD_VAR 0 3
30329: IN
30330: ST_TO_ADDR
// end ;
30331: LD_VAR 0 3
30335: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30336: LD_INT 0
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
// result := array ;
30345: LD_ADDR_VAR 0 5
30349: PUSH
30350: LD_VAR 0 1
30354: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30355: LD_VAR 0 1
30359: NOT
30360: PUSH
30361: LD_VAR 0 2
30365: NOT
30366: OR
30367: PUSH
30368: LD_VAR 0 3
30372: NOT
30373: OR
30374: PUSH
30375: LD_VAR 0 2
30379: PUSH
30380: LD_VAR 0 1
30384: GREATER
30385: OR
30386: PUSH
30387: LD_VAR 0 3
30391: PUSH
30392: LD_VAR 0 1
30396: GREATER
30397: OR
30398: IFFALSE 30402
// exit ;
30400: GO 30698
// if direction then
30402: LD_VAR 0 4
30406: IFFALSE 30470
// begin d := 1 ;
30408: LD_ADDR_VAR 0 9
30412: PUSH
30413: LD_INT 1
30415: ST_TO_ADDR
// if i_from > i_to then
30416: LD_VAR 0 2
30420: PUSH
30421: LD_VAR 0 3
30425: GREATER
30426: IFFALSE 30452
// length := ( array - i_from ) + i_to else
30428: LD_ADDR_VAR 0 11
30432: PUSH
30433: LD_VAR 0 1
30437: PUSH
30438: LD_VAR 0 2
30442: MINUS
30443: PUSH
30444: LD_VAR 0 3
30448: PLUS
30449: ST_TO_ADDR
30450: GO 30468
// length := i_to - i_from ;
30452: LD_ADDR_VAR 0 11
30456: PUSH
30457: LD_VAR 0 3
30461: PUSH
30462: LD_VAR 0 2
30466: MINUS
30467: ST_TO_ADDR
// end else
30468: GO 30531
// begin d := - 1 ;
30470: LD_ADDR_VAR 0 9
30474: PUSH
30475: LD_INT 1
30477: NEG
30478: ST_TO_ADDR
// if i_from > i_to then
30479: LD_VAR 0 2
30483: PUSH
30484: LD_VAR 0 3
30488: GREATER
30489: IFFALSE 30509
// length := i_from - i_to else
30491: LD_ADDR_VAR 0 11
30495: PUSH
30496: LD_VAR 0 2
30500: PUSH
30501: LD_VAR 0 3
30505: MINUS
30506: ST_TO_ADDR
30507: GO 30531
// length := ( array - i_to ) + i_from ;
30509: LD_ADDR_VAR 0 11
30513: PUSH
30514: LD_VAR 0 1
30518: PUSH
30519: LD_VAR 0 3
30523: MINUS
30524: PUSH
30525: LD_VAR 0 2
30529: PLUS
30530: ST_TO_ADDR
// end ; if not length then
30531: LD_VAR 0 11
30535: NOT
30536: IFFALSE 30540
// exit ;
30538: GO 30698
// tmp := array ;
30540: LD_ADDR_VAR 0 10
30544: PUSH
30545: LD_VAR 0 1
30549: ST_TO_ADDR
// for i = 1 to length do
30550: LD_ADDR_VAR 0 6
30554: PUSH
30555: DOUBLE
30556: LD_INT 1
30558: DEC
30559: ST_TO_ADDR
30560: LD_VAR 0 11
30564: PUSH
30565: FOR_TO
30566: IFFALSE 30686
// begin for j = 1 to array do
30568: LD_ADDR_VAR 0 7
30572: PUSH
30573: DOUBLE
30574: LD_INT 1
30576: DEC
30577: ST_TO_ADDR
30578: LD_VAR 0 1
30582: PUSH
30583: FOR_TO
30584: IFFALSE 30672
// begin k := j + d ;
30586: LD_ADDR_VAR 0 8
30590: PUSH
30591: LD_VAR 0 7
30595: PUSH
30596: LD_VAR 0 9
30600: PLUS
30601: ST_TO_ADDR
// if k > array then
30602: LD_VAR 0 8
30606: PUSH
30607: LD_VAR 0 1
30611: GREATER
30612: IFFALSE 30622
// k := 1 ;
30614: LD_ADDR_VAR 0 8
30618: PUSH
30619: LD_INT 1
30621: ST_TO_ADDR
// if not k then
30622: LD_VAR 0 8
30626: NOT
30627: IFFALSE 30639
// k := array ;
30629: LD_ADDR_VAR 0 8
30633: PUSH
30634: LD_VAR 0 1
30638: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
30639: LD_ADDR_VAR 0 10
30643: PUSH
30644: LD_VAR 0 10
30648: PPUSH
30649: LD_VAR 0 8
30653: PPUSH
30654: LD_VAR 0 1
30658: PUSH
30659: LD_VAR 0 7
30663: ARRAY
30664: PPUSH
30665: CALL_OW 1
30669: ST_TO_ADDR
// end ;
30670: GO 30583
30672: POP
30673: POP
// array := tmp ;
30674: LD_ADDR_VAR 0 1
30678: PUSH
30679: LD_VAR 0 10
30683: ST_TO_ADDR
// end ;
30684: GO 30565
30686: POP
30687: POP
// result := array ;
30688: LD_ADDR_VAR 0 5
30692: PUSH
30693: LD_VAR 0 1
30697: ST_TO_ADDR
// end ;
30698: LD_VAR 0 5
30702: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
30703: LD_INT 0
30705: PPUSH
30706: PPUSH
// result := 0 ;
30707: LD_ADDR_VAR 0 3
30711: PUSH
30712: LD_INT 0
30714: ST_TO_ADDR
// if not array or not value in array then
30715: LD_VAR 0 1
30719: NOT
30720: PUSH
30721: LD_VAR 0 2
30725: PUSH
30726: LD_VAR 0 1
30730: IN
30731: NOT
30732: OR
30733: IFFALSE 30737
// exit ;
30735: GO 30791
// for i = 1 to array do
30737: LD_ADDR_VAR 0 4
30741: PUSH
30742: DOUBLE
30743: LD_INT 1
30745: DEC
30746: ST_TO_ADDR
30747: LD_VAR 0 1
30751: PUSH
30752: FOR_TO
30753: IFFALSE 30789
// if value = array [ i ] then
30755: LD_VAR 0 2
30759: PUSH
30760: LD_VAR 0 1
30764: PUSH
30765: LD_VAR 0 4
30769: ARRAY
30770: EQUAL
30771: IFFALSE 30787
// begin result := i ;
30773: LD_ADDR_VAR 0 3
30777: PUSH
30778: LD_VAR 0 4
30782: ST_TO_ADDR
// exit ;
30783: POP
30784: POP
30785: GO 30791
// end ;
30787: GO 30752
30789: POP
30790: POP
// end ;
30791: LD_VAR 0 3
30795: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30796: LD_INT 0
30798: PPUSH
// vc_chassis := chassis ;
30799: LD_ADDR_OWVAR 37
30803: PUSH
30804: LD_VAR 0 1
30808: ST_TO_ADDR
// vc_engine := engine ;
30809: LD_ADDR_OWVAR 39
30813: PUSH
30814: LD_VAR 0 2
30818: ST_TO_ADDR
// vc_control := control ;
30819: LD_ADDR_OWVAR 38
30823: PUSH
30824: LD_VAR 0 3
30828: ST_TO_ADDR
// vc_weapon := weapon ;
30829: LD_ADDR_OWVAR 40
30833: PUSH
30834: LD_VAR 0 4
30838: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30839: LD_ADDR_OWVAR 41
30843: PUSH
30844: LD_VAR 0 5
30848: ST_TO_ADDR
// end ;
30849: LD_VAR 0 6
30853: RET
// export function WantPlant ( unit ) ; var task ; begin
30854: LD_INT 0
30856: PPUSH
30857: PPUSH
// result := false ;
30858: LD_ADDR_VAR 0 2
30862: PUSH
30863: LD_INT 0
30865: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30866: LD_ADDR_VAR 0 3
30870: PUSH
30871: LD_VAR 0 1
30875: PPUSH
30876: CALL_OW 437
30880: ST_TO_ADDR
// if task then
30881: LD_VAR 0 3
30885: IFFALSE 30913
// if task [ 1 ] [ 1 ] = p then
30887: LD_VAR 0 3
30891: PUSH
30892: LD_INT 1
30894: ARRAY
30895: PUSH
30896: LD_INT 1
30898: ARRAY
30899: PUSH
30900: LD_STRING p
30902: EQUAL
30903: IFFALSE 30913
// result := true ;
30905: LD_ADDR_VAR 0 2
30909: PUSH
30910: LD_INT 1
30912: ST_TO_ADDR
// end ;
30913: LD_VAR 0 2
30917: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30918: LD_INT 0
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
// if pos < 1 then
30924: LD_VAR 0 2
30928: PUSH
30929: LD_INT 1
30931: LESS
30932: IFFALSE 30936
// exit ;
30934: GO 31239
// if pos = 1 then
30936: LD_VAR 0 2
30940: PUSH
30941: LD_INT 1
30943: EQUAL
30944: IFFALSE 30977
// result := Replace ( arr , pos [ 1 ] , value ) else
30946: LD_ADDR_VAR 0 4
30950: PUSH
30951: LD_VAR 0 1
30955: PPUSH
30956: LD_VAR 0 2
30960: PUSH
30961: LD_INT 1
30963: ARRAY
30964: PPUSH
30965: LD_VAR 0 3
30969: PPUSH
30970: CALL_OW 1
30974: ST_TO_ADDR
30975: GO 31239
// begin tmp := arr ;
30977: LD_ADDR_VAR 0 6
30981: PUSH
30982: LD_VAR 0 1
30986: ST_TO_ADDR
// s_arr := [ tmp ] ;
30987: LD_ADDR_VAR 0 7
30991: PUSH
30992: LD_VAR 0 6
30996: PUSH
30997: EMPTY
30998: LIST
30999: ST_TO_ADDR
// for i = 1 to pos - 1 do
31000: LD_ADDR_VAR 0 5
31004: PUSH
31005: DOUBLE
31006: LD_INT 1
31008: DEC
31009: ST_TO_ADDR
31010: LD_VAR 0 2
31014: PUSH
31015: LD_INT 1
31017: MINUS
31018: PUSH
31019: FOR_TO
31020: IFFALSE 31065
// begin tmp := tmp [ pos [ i ] ] ;
31022: LD_ADDR_VAR 0 6
31026: PUSH
31027: LD_VAR 0 6
31031: PUSH
31032: LD_VAR 0 2
31036: PUSH
31037: LD_VAR 0 5
31041: ARRAY
31042: ARRAY
31043: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31044: LD_ADDR_VAR 0 7
31048: PUSH
31049: LD_VAR 0 7
31053: PUSH
31054: LD_VAR 0 6
31058: PUSH
31059: EMPTY
31060: LIST
31061: ADD
31062: ST_TO_ADDR
// end ;
31063: GO 31019
31065: POP
31066: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31067: LD_ADDR_VAR 0 6
31071: PUSH
31072: LD_VAR 0 6
31076: PPUSH
31077: LD_VAR 0 2
31081: PUSH
31082: LD_VAR 0 2
31086: ARRAY
31087: PPUSH
31088: LD_VAR 0 3
31092: PPUSH
31093: CALL_OW 1
31097: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31098: LD_ADDR_VAR 0 7
31102: PUSH
31103: LD_VAR 0 7
31107: PPUSH
31108: LD_VAR 0 7
31112: PPUSH
31113: LD_VAR 0 6
31117: PPUSH
31118: CALL_OW 1
31122: ST_TO_ADDR
// for i = s_arr downto 2 do
31123: LD_ADDR_VAR 0 5
31127: PUSH
31128: DOUBLE
31129: LD_VAR 0 7
31133: INC
31134: ST_TO_ADDR
31135: LD_INT 2
31137: PUSH
31138: FOR_DOWNTO
31139: IFFALSE 31223
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31141: LD_ADDR_VAR 0 6
31145: PUSH
31146: LD_VAR 0 7
31150: PUSH
31151: LD_VAR 0 5
31155: PUSH
31156: LD_INT 1
31158: MINUS
31159: ARRAY
31160: PPUSH
31161: LD_VAR 0 2
31165: PUSH
31166: LD_VAR 0 5
31170: PUSH
31171: LD_INT 1
31173: MINUS
31174: ARRAY
31175: PPUSH
31176: LD_VAR 0 7
31180: PUSH
31181: LD_VAR 0 5
31185: ARRAY
31186: PPUSH
31187: CALL_OW 1
31191: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31192: LD_ADDR_VAR 0 7
31196: PUSH
31197: LD_VAR 0 7
31201: PPUSH
31202: LD_VAR 0 5
31206: PUSH
31207: LD_INT 1
31209: MINUS
31210: PPUSH
31211: LD_VAR 0 6
31215: PPUSH
31216: CALL_OW 1
31220: ST_TO_ADDR
// end ;
31221: GO 31138
31223: POP
31224: POP
// result := s_arr [ 1 ] ;
31225: LD_ADDR_VAR 0 4
31229: PUSH
31230: LD_VAR 0 7
31234: PUSH
31235: LD_INT 1
31237: ARRAY
31238: ST_TO_ADDR
// end ; end ;
31239: LD_VAR 0 4
31243: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31244: LD_INT 0
31246: PPUSH
31247: PPUSH
// if not list then
31248: LD_VAR 0 1
31252: NOT
31253: IFFALSE 31257
// exit ;
31255: GO 31348
// i := list [ pos1 ] ;
31257: LD_ADDR_VAR 0 5
31261: PUSH
31262: LD_VAR 0 1
31266: PUSH
31267: LD_VAR 0 2
31271: ARRAY
31272: ST_TO_ADDR
// if not i then
31273: LD_VAR 0 5
31277: NOT
31278: IFFALSE 31282
// exit ;
31280: GO 31348
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31282: LD_ADDR_VAR 0 1
31286: PUSH
31287: LD_VAR 0 1
31291: PPUSH
31292: LD_VAR 0 2
31296: PPUSH
31297: LD_VAR 0 1
31301: PUSH
31302: LD_VAR 0 3
31306: ARRAY
31307: PPUSH
31308: CALL_OW 1
31312: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31313: LD_ADDR_VAR 0 1
31317: PUSH
31318: LD_VAR 0 1
31322: PPUSH
31323: LD_VAR 0 3
31327: PPUSH
31328: LD_VAR 0 5
31332: PPUSH
31333: CALL_OW 1
31337: ST_TO_ADDR
// result := list ;
31338: LD_ADDR_VAR 0 4
31342: PUSH
31343: LD_VAR 0 1
31347: ST_TO_ADDR
// end ;
31348: LD_VAR 0 4
31352: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31353: LD_INT 0
31355: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31356: LD_ADDR_VAR 0 5
31360: PUSH
31361: LD_VAR 0 1
31365: PPUSH
31366: CALL_OW 250
31370: PPUSH
31371: LD_VAR 0 1
31375: PPUSH
31376: CALL_OW 251
31380: PPUSH
31381: LD_VAR 0 2
31385: PPUSH
31386: LD_VAR 0 3
31390: PPUSH
31391: LD_VAR 0 4
31395: PPUSH
31396: CALL 31406 0 5
31400: ST_TO_ADDR
// end ;
31401: LD_VAR 0 5
31405: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31406: LD_INT 0
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
// if not list then
31412: LD_VAR 0 3
31416: NOT
31417: IFFALSE 31421
// exit ;
31419: GO 31809
// result := [ ] ;
31421: LD_ADDR_VAR 0 6
31425: PUSH
31426: EMPTY
31427: ST_TO_ADDR
// for i in list do
31428: LD_ADDR_VAR 0 7
31432: PUSH
31433: LD_VAR 0 3
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31641
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31441: LD_ADDR_VAR 0 9
31445: PUSH
31446: LD_VAR 0 7
31450: PPUSH
31451: LD_VAR 0 1
31455: PPUSH
31456: LD_VAR 0 2
31460: PPUSH
31461: CALL_OW 297
31465: ST_TO_ADDR
// if not result then
31466: LD_VAR 0 6
31470: NOT
31471: IFFALSE 31497
// result := [ [ i , tmp ] ] else
31473: LD_ADDR_VAR 0 6
31477: PUSH
31478: LD_VAR 0 7
31482: PUSH
31483: LD_VAR 0 9
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: ST_TO_ADDR
31495: GO 31639
// begin if result [ result ] [ 2 ] < tmp then
31497: LD_VAR 0 6
31501: PUSH
31502: LD_VAR 0 6
31506: ARRAY
31507: PUSH
31508: LD_INT 2
31510: ARRAY
31511: PUSH
31512: LD_VAR 0 9
31516: LESS
31517: IFFALSE 31559
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31519: LD_ADDR_VAR 0 6
31523: PUSH
31524: LD_VAR 0 6
31528: PPUSH
31529: LD_VAR 0 6
31533: PUSH
31534: LD_INT 1
31536: PLUS
31537: PPUSH
31538: LD_VAR 0 7
31542: PUSH
31543: LD_VAR 0 9
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PPUSH
31552: CALL_OW 2
31556: ST_TO_ADDR
31557: GO 31639
// for j = 1 to result do
31559: LD_ADDR_VAR 0 8
31563: PUSH
31564: DOUBLE
31565: LD_INT 1
31567: DEC
31568: ST_TO_ADDR
31569: LD_VAR 0 6
31573: PUSH
31574: FOR_TO
31575: IFFALSE 31637
// begin if tmp < result [ j ] [ 2 ] then
31577: LD_VAR 0 9
31581: PUSH
31582: LD_VAR 0 6
31586: PUSH
31587: LD_VAR 0 8
31591: ARRAY
31592: PUSH
31593: LD_INT 2
31595: ARRAY
31596: LESS
31597: IFFALSE 31635
// begin result := Insert ( result , j , [ i , tmp ] ) ;
31599: LD_ADDR_VAR 0 6
31603: PUSH
31604: LD_VAR 0 6
31608: PPUSH
31609: LD_VAR 0 8
31613: PPUSH
31614: LD_VAR 0 7
31618: PUSH
31619: LD_VAR 0 9
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PPUSH
31628: CALL_OW 2
31632: ST_TO_ADDR
// break ;
31633: GO 31637
// end ; end ;
31635: GO 31574
31637: POP
31638: POP
// end ; end ;
31639: GO 31438
31641: POP
31642: POP
// if result and not asc then
31643: LD_VAR 0 6
31647: PUSH
31648: LD_VAR 0 4
31652: NOT
31653: AND
31654: IFFALSE 31729
// begin tmp := result ;
31656: LD_ADDR_VAR 0 9
31660: PUSH
31661: LD_VAR 0 6
31665: ST_TO_ADDR
// for i = tmp downto 1 do
31666: LD_ADDR_VAR 0 7
31670: PUSH
31671: DOUBLE
31672: LD_VAR 0 9
31676: INC
31677: ST_TO_ADDR
31678: LD_INT 1
31680: PUSH
31681: FOR_DOWNTO
31682: IFFALSE 31727
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
31684: LD_ADDR_VAR 0 6
31688: PUSH
31689: LD_VAR 0 6
31693: PPUSH
31694: LD_VAR 0 9
31698: PUSH
31699: LD_VAR 0 7
31703: MINUS
31704: PUSH
31705: LD_INT 1
31707: PLUS
31708: PPUSH
31709: LD_VAR 0 9
31713: PUSH
31714: LD_VAR 0 7
31718: ARRAY
31719: PPUSH
31720: CALL_OW 1
31724: ST_TO_ADDR
31725: GO 31681
31727: POP
31728: POP
// end ; tmp := [ ] ;
31729: LD_ADDR_VAR 0 9
31733: PUSH
31734: EMPTY
31735: ST_TO_ADDR
// if mode then
31736: LD_VAR 0 5
31740: IFFALSE 31809
// begin for i = 1 to result do
31742: LD_ADDR_VAR 0 7
31746: PUSH
31747: DOUBLE
31748: LD_INT 1
31750: DEC
31751: ST_TO_ADDR
31752: LD_VAR 0 6
31756: PUSH
31757: FOR_TO
31758: IFFALSE 31797
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31760: LD_ADDR_VAR 0 9
31764: PUSH
31765: LD_VAR 0 9
31769: PPUSH
31770: LD_VAR 0 7
31774: PPUSH
31775: LD_VAR 0 6
31779: PUSH
31780: LD_VAR 0 7
31784: ARRAY
31785: PUSH
31786: LD_INT 1
31788: ARRAY
31789: PPUSH
31790: CALL_OW 1
31794: ST_TO_ADDR
31795: GO 31757
31797: POP
31798: POP
// result := tmp ;
31799: LD_ADDR_VAR 0 6
31803: PUSH
31804: LD_VAR 0 9
31808: ST_TO_ADDR
// end ; end ;
31809: LD_VAR 0 6
31813: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31814: LD_INT 0
31816: PPUSH
31817: PPUSH
31818: PPUSH
31819: PPUSH
31820: PPUSH
31821: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31822: LD_ADDR_VAR 0 5
31826: PUSH
31827: LD_INT 0
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: EMPTY
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: ST_TO_ADDR
// if not x or not y then
31844: LD_VAR 0 2
31848: NOT
31849: PUSH
31850: LD_VAR 0 3
31854: NOT
31855: OR
31856: IFFALSE 31860
// exit ;
31858: GO 33510
// if not range then
31860: LD_VAR 0 4
31864: NOT
31865: IFFALSE 31875
// range := 10 ;
31867: LD_ADDR_VAR 0 4
31871: PUSH
31872: LD_INT 10
31874: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31875: LD_ADDR_VAR 0 8
31879: PUSH
31880: LD_INT 81
31882: PUSH
31883: LD_VAR 0 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 92
31894: PUSH
31895: LD_VAR 0 2
31899: PUSH
31900: LD_VAR 0 3
31904: PUSH
31905: LD_VAR 0 4
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 3
31918: PUSH
31919: LD_INT 21
31921: PUSH
31922: LD_INT 3
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: PPUSH
31938: CALL_OW 69
31942: ST_TO_ADDR
// if not tmp then
31943: LD_VAR 0 8
31947: NOT
31948: IFFALSE 31952
// exit ;
31950: GO 33510
// for i in tmp do
31952: LD_ADDR_VAR 0 6
31956: PUSH
31957: LD_VAR 0 8
31961: PUSH
31962: FOR_IN
31963: IFFALSE 33485
// begin points := [ 0 , 0 , 0 ] ;
31965: LD_ADDR_VAR 0 9
31969: PUSH
31970: LD_INT 0
31972: PUSH
31973: LD_INT 0
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
// bpoints := 1 ;
31984: LD_ADDR_VAR 0 10
31988: PUSH
31989: LD_INT 1
31991: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31992: LD_VAR 0 6
31996: PPUSH
31997: CALL_OW 247
32001: PUSH
32002: LD_INT 1
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32588
32010: POP
// begin if GetClass ( i ) = 1 then
32011: LD_VAR 0 6
32015: PPUSH
32016: CALL_OW 257
32020: PUSH
32021: LD_INT 1
32023: EQUAL
32024: IFFALSE 32045
// points := [ 10 , 5 , 3 ] ;
32026: LD_ADDR_VAR 0 9
32030: PUSH
32031: LD_INT 10
32033: PUSH
32034: LD_INT 5
32036: PUSH
32037: LD_INT 3
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32045: LD_VAR 0 6
32049: PPUSH
32050: CALL_OW 257
32054: PUSH
32055: LD_INT 2
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: LD_INT 4
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: LIST
32068: IN
32069: IFFALSE 32090
// points := [ 3 , 2 , 1 ] ;
32071: LD_ADDR_VAR 0 9
32075: PUSH
32076: LD_INT 3
32078: PUSH
32079: LD_INT 2
32081: PUSH
32082: LD_INT 1
32084: PUSH
32085: EMPTY
32086: LIST
32087: LIST
32088: LIST
32089: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32090: LD_VAR 0 6
32094: PPUSH
32095: CALL_OW 257
32099: PUSH
32100: LD_INT 5
32102: EQUAL
32103: IFFALSE 32124
// points := [ 130 , 5 , 2 ] ;
32105: LD_ADDR_VAR 0 9
32109: PUSH
32110: LD_INT 130
32112: PUSH
32113: LD_INT 5
32115: PUSH
32116: LD_INT 2
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: LIST
32123: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32124: LD_VAR 0 6
32128: PPUSH
32129: CALL_OW 257
32133: PUSH
32134: LD_INT 8
32136: EQUAL
32137: IFFALSE 32158
// points := [ 35 , 35 , 30 ] ;
32139: LD_ADDR_VAR 0 9
32143: PUSH
32144: LD_INT 35
32146: PUSH
32147: LD_INT 35
32149: PUSH
32150: LD_INT 30
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32158: LD_VAR 0 6
32162: PPUSH
32163: CALL_OW 257
32167: PUSH
32168: LD_INT 9
32170: EQUAL
32171: IFFALSE 32192
// points := [ 20 , 55 , 40 ] ;
32173: LD_ADDR_VAR 0 9
32177: PUSH
32178: LD_INT 20
32180: PUSH
32181: LD_INT 55
32183: PUSH
32184: LD_INT 40
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32192: LD_VAR 0 6
32196: PPUSH
32197: CALL_OW 257
32201: PUSH
32202: LD_INT 12
32204: PUSH
32205: LD_INT 16
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: IN
32212: IFFALSE 32233
// points := [ 5 , 3 , 2 ] ;
32214: LD_ADDR_VAR 0 9
32218: PUSH
32219: LD_INT 5
32221: PUSH
32222: LD_INT 3
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32233: LD_VAR 0 6
32237: PPUSH
32238: CALL_OW 257
32242: PUSH
32243: LD_INT 17
32245: EQUAL
32246: IFFALSE 32267
// points := [ 100 , 50 , 75 ] ;
32248: LD_ADDR_VAR 0 9
32252: PUSH
32253: LD_INT 100
32255: PUSH
32256: LD_INT 50
32258: PUSH
32259: LD_INT 75
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32267: LD_VAR 0 6
32271: PPUSH
32272: CALL_OW 257
32276: PUSH
32277: LD_INT 15
32279: EQUAL
32280: IFFALSE 32301
// points := [ 10 , 5 , 3 ] ;
32282: LD_ADDR_VAR 0 9
32286: PUSH
32287: LD_INT 10
32289: PUSH
32290: LD_INT 5
32292: PUSH
32293: LD_INT 3
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: LIST
32300: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32301: LD_VAR 0 6
32305: PPUSH
32306: CALL_OW 257
32310: PUSH
32311: LD_INT 14
32313: EQUAL
32314: IFFALSE 32335
// points := [ 10 , 0 , 0 ] ;
32316: LD_ADDR_VAR 0 9
32320: PUSH
32321: LD_INT 10
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32335: LD_VAR 0 6
32339: PPUSH
32340: CALL_OW 257
32344: PUSH
32345: LD_INT 11
32347: EQUAL
32348: IFFALSE 32369
// points := [ 30 , 10 , 5 ] ;
32350: LD_ADDR_VAR 0 9
32354: PUSH
32355: LD_INT 30
32357: PUSH
32358: LD_INT 10
32360: PUSH
32361: LD_INT 5
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32369: LD_VAR 0 1
32373: PPUSH
32374: LD_INT 5
32376: PPUSH
32377: CALL_OW 321
32381: PUSH
32382: LD_INT 2
32384: EQUAL
32385: IFFALSE 32402
// bpoints := bpoints * 1.8 ;
32387: LD_ADDR_VAR 0 10
32391: PUSH
32392: LD_VAR 0 10
32396: PUSH
32397: LD_REAL  1.80000000000000E+0000
32400: MUL
32401: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32402: LD_VAR 0 6
32406: PPUSH
32407: CALL_OW 257
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 2
32417: PUSH
32418: LD_INT 3
32420: PUSH
32421: LD_INT 4
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: IN
32430: PUSH
32431: LD_VAR 0 1
32435: PPUSH
32436: LD_INT 51
32438: PPUSH
32439: CALL_OW 321
32443: PUSH
32444: LD_INT 2
32446: EQUAL
32447: AND
32448: IFFALSE 32465
// bpoints := bpoints * 1.2 ;
32450: LD_ADDR_VAR 0 10
32454: PUSH
32455: LD_VAR 0 10
32459: PUSH
32460: LD_REAL  1.20000000000000E+0000
32463: MUL
32464: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32465: LD_VAR 0 6
32469: PPUSH
32470: CALL_OW 257
32474: PUSH
32475: LD_INT 5
32477: PUSH
32478: LD_INT 7
32480: PUSH
32481: LD_INT 9
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: IN
32489: PUSH
32490: LD_VAR 0 1
32494: PPUSH
32495: LD_INT 52
32497: PPUSH
32498: CALL_OW 321
32502: PUSH
32503: LD_INT 2
32505: EQUAL
32506: AND
32507: IFFALSE 32524
// bpoints := bpoints * 1.5 ;
32509: LD_ADDR_VAR 0 10
32513: PUSH
32514: LD_VAR 0 10
32518: PUSH
32519: LD_REAL  1.50000000000000E+0000
32522: MUL
32523: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32524: LD_VAR 0 1
32528: PPUSH
32529: LD_INT 66
32531: PPUSH
32532: CALL_OW 321
32536: PUSH
32537: LD_INT 2
32539: EQUAL
32540: IFFALSE 32557
// bpoints := bpoints * 1.1 ;
32542: LD_ADDR_VAR 0 10
32546: PUSH
32547: LD_VAR 0 10
32551: PUSH
32552: LD_REAL  1.10000000000000E+0000
32555: MUL
32556: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32557: LD_ADDR_VAR 0 10
32561: PUSH
32562: LD_VAR 0 10
32566: PUSH
32567: LD_VAR 0 6
32571: PPUSH
32572: LD_INT 1
32574: PPUSH
32575: CALL_OW 259
32579: PUSH
32580: LD_REAL  1.15000000000000E+0000
32583: MUL
32584: MUL
32585: ST_TO_ADDR
// end ; unit_vehicle :
32586: GO 33414
32588: LD_INT 2
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 33402
32596: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
32597: LD_VAR 0 6
32601: PPUSH
32602: CALL_OW 264
32606: PUSH
32607: LD_INT 2
32609: PUSH
32610: LD_INT 42
32612: PUSH
32613: LD_INT 24
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: IN
32621: IFFALSE 32642
// points := [ 25 , 5 , 3 ] ;
32623: LD_ADDR_VAR 0 9
32627: PUSH
32628: LD_INT 25
32630: PUSH
32631: LD_INT 5
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: LIST
32641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
32642: LD_VAR 0 6
32646: PPUSH
32647: CALL_OW 264
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: LD_INT 43
32657: PUSH
32658: LD_INT 25
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: IN
32666: IFFALSE 32687
// points := [ 40 , 15 , 5 ] ;
32668: LD_ADDR_VAR 0 9
32672: PUSH
32673: LD_INT 40
32675: PUSH
32676: LD_INT 15
32678: PUSH
32679: LD_INT 5
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
32687: LD_VAR 0 6
32691: PPUSH
32692: CALL_OW 264
32696: PUSH
32697: LD_INT 3
32699: PUSH
32700: LD_INT 23
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: IN
32707: IFFALSE 32728
// points := [ 7 , 25 , 8 ] ;
32709: LD_ADDR_VAR 0 9
32713: PUSH
32714: LD_INT 7
32716: PUSH
32717: LD_INT 25
32719: PUSH
32720: LD_INT 8
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
32728: LD_VAR 0 6
32732: PPUSH
32733: CALL_OW 264
32737: PUSH
32738: LD_INT 5
32740: PUSH
32741: LD_INT 27
32743: PUSH
32744: LD_INT 44
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: IN
32752: IFFALSE 32773
// points := [ 14 , 50 , 16 ] ;
32754: LD_ADDR_VAR 0 9
32758: PUSH
32759: LD_INT 14
32761: PUSH
32762: LD_INT 50
32764: PUSH
32765: LD_INT 16
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32773: LD_VAR 0 6
32777: PPUSH
32778: CALL_OW 264
32782: PUSH
32783: LD_INT 6
32785: PUSH
32786: LD_INT 46
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: IN
32793: IFFALSE 32814
// points := [ 32 , 120 , 70 ] ;
32795: LD_ADDR_VAR 0 9
32799: PUSH
32800: LD_INT 32
32802: PUSH
32803: LD_INT 120
32805: PUSH
32806: LD_INT 70
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32814: LD_VAR 0 6
32818: PPUSH
32819: CALL_OW 264
32823: PUSH
32824: LD_INT 7
32826: PUSH
32827: LD_INT 28
32829: PUSH
32830: LD_INT 45
32832: PUSH
32833: LD_INT 92
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: IN
32842: IFFALSE 32863
// points := [ 35 , 20 , 45 ] ;
32844: LD_ADDR_VAR 0 9
32848: PUSH
32849: LD_INT 35
32851: PUSH
32852: LD_INT 20
32854: PUSH
32855: LD_INT 45
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: LIST
32862: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32863: LD_VAR 0 6
32867: PPUSH
32868: CALL_OW 264
32872: PUSH
32873: LD_INT 47
32875: PUSH
32876: EMPTY
32877: LIST
32878: IN
32879: IFFALSE 32900
// points := [ 67 , 45 , 75 ] ;
32881: LD_ADDR_VAR 0 9
32885: PUSH
32886: LD_INT 67
32888: PUSH
32889: LD_INT 45
32891: PUSH
32892: LD_INT 75
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: LIST
32899: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32900: LD_VAR 0 6
32904: PPUSH
32905: CALL_OW 264
32909: PUSH
32910: LD_INT 26
32912: PUSH
32913: EMPTY
32914: LIST
32915: IN
32916: IFFALSE 32937
// points := [ 120 , 30 , 80 ] ;
32918: LD_ADDR_VAR 0 9
32922: PUSH
32923: LD_INT 120
32925: PUSH
32926: LD_INT 30
32928: PUSH
32929: LD_INT 80
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32937: LD_VAR 0 6
32941: PPUSH
32942: CALL_OW 264
32946: PUSH
32947: LD_INT 22
32949: PUSH
32950: EMPTY
32951: LIST
32952: IN
32953: IFFALSE 32974
// points := [ 40 , 1 , 1 ] ;
32955: LD_ADDR_VAR 0 9
32959: PUSH
32960: LD_INT 40
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32974: LD_VAR 0 6
32978: PPUSH
32979: CALL_OW 264
32983: PUSH
32984: LD_INT 29
32986: PUSH
32987: EMPTY
32988: LIST
32989: IN
32990: IFFALSE 33011
// points := [ 70 , 200 , 400 ] ;
32992: LD_ADDR_VAR 0 9
32996: PUSH
32997: LD_INT 70
32999: PUSH
33000: LD_INT 200
33002: PUSH
33003: LD_INT 400
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33011: LD_VAR 0 6
33015: PPUSH
33016: CALL_OW 264
33020: PUSH
33021: LD_INT 14
33023: PUSH
33024: LD_INT 53
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: IN
33031: IFFALSE 33052
// points := [ 40 , 10 , 20 ] ;
33033: LD_ADDR_VAR 0 9
33037: PUSH
33038: LD_INT 40
33040: PUSH
33041: LD_INT 10
33043: PUSH
33044: LD_INT 20
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33052: LD_VAR 0 6
33056: PPUSH
33057: CALL_OW 264
33061: PUSH
33062: LD_INT 9
33064: PUSH
33065: EMPTY
33066: LIST
33067: IN
33068: IFFALSE 33089
// points := [ 5 , 70 , 20 ] ;
33070: LD_ADDR_VAR 0 9
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: LD_INT 70
33080: PUSH
33081: LD_INT 20
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33089: LD_VAR 0 6
33093: PPUSH
33094: CALL_OW 264
33098: PUSH
33099: LD_INT 10
33101: PUSH
33102: EMPTY
33103: LIST
33104: IN
33105: IFFALSE 33126
// points := [ 35 , 110 , 70 ] ;
33107: LD_ADDR_VAR 0 9
33111: PUSH
33112: LD_INT 35
33114: PUSH
33115: LD_INT 110
33117: PUSH
33118: LD_INT 70
33120: PUSH
33121: EMPTY
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33126: LD_VAR 0 6
33130: PPUSH
33131: CALL_OW 265
33135: PUSH
33136: LD_INT 25
33138: EQUAL
33139: IFFALSE 33160
// points := [ 80 , 65 , 100 ] ;
33141: LD_ADDR_VAR 0 9
33145: PUSH
33146: LD_INT 80
33148: PUSH
33149: LD_INT 65
33151: PUSH
33152: LD_INT 100
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: LIST
33159: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33160: LD_VAR 0 6
33164: PPUSH
33165: CALL_OW 263
33169: PUSH
33170: LD_INT 1
33172: EQUAL
33173: IFFALSE 33208
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33175: LD_ADDR_VAR 0 10
33179: PUSH
33180: LD_VAR 0 10
33184: PUSH
33185: LD_VAR 0 6
33189: PPUSH
33190: CALL_OW 311
33194: PPUSH
33195: LD_INT 3
33197: PPUSH
33198: CALL_OW 259
33202: PUSH
33203: LD_INT 4
33205: MUL
33206: MUL
33207: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33208: LD_VAR 0 6
33212: PPUSH
33213: CALL_OW 263
33217: PUSH
33218: LD_INT 2
33220: EQUAL
33221: IFFALSE 33272
// begin j := IsControledBy ( i ) ;
33223: LD_ADDR_VAR 0 7
33227: PUSH
33228: LD_VAR 0 6
33232: PPUSH
33233: CALL_OW 312
33237: ST_TO_ADDR
// if j then
33238: LD_VAR 0 7
33242: IFFALSE 33272
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33244: LD_ADDR_VAR 0 10
33248: PUSH
33249: LD_VAR 0 10
33253: PUSH
33254: LD_VAR 0 7
33258: PPUSH
33259: LD_INT 3
33261: PPUSH
33262: CALL_OW 259
33266: PUSH
33267: LD_INT 3
33269: MUL
33270: MUL
33271: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33272: LD_VAR 0 6
33276: PPUSH
33277: CALL_OW 264
33281: PUSH
33282: LD_INT 5
33284: PUSH
33285: LD_INT 6
33287: PUSH
33288: LD_INT 46
33290: PUSH
33291: LD_INT 44
33293: PUSH
33294: LD_INT 47
33296: PUSH
33297: LD_INT 45
33299: PUSH
33300: LD_INT 28
33302: PUSH
33303: LD_INT 7
33305: PUSH
33306: LD_INT 27
33308: PUSH
33309: LD_INT 29
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: IN
33324: PUSH
33325: LD_VAR 0 1
33329: PPUSH
33330: LD_INT 52
33332: PPUSH
33333: CALL_OW 321
33337: PUSH
33338: LD_INT 2
33340: EQUAL
33341: AND
33342: IFFALSE 33359
// bpoints := bpoints * 1.2 ;
33344: LD_ADDR_VAR 0 10
33348: PUSH
33349: LD_VAR 0 10
33353: PUSH
33354: LD_REAL  1.20000000000000E+0000
33357: MUL
33358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33359: LD_VAR 0 6
33363: PPUSH
33364: CALL_OW 264
33368: PUSH
33369: LD_INT 6
33371: PUSH
33372: LD_INT 46
33374: PUSH
33375: LD_INT 47
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: LIST
33382: IN
33383: IFFALSE 33400
// bpoints := bpoints * 1.2 ;
33385: LD_ADDR_VAR 0 10
33389: PUSH
33390: LD_VAR 0 10
33394: PUSH
33395: LD_REAL  1.20000000000000E+0000
33398: MUL
33399: ST_TO_ADDR
// end ; unit_building :
33400: GO 33414
33402: LD_INT 3
33404: DOUBLE
33405: EQUAL
33406: IFTRUE 33410
33408: GO 33413
33410: POP
// ; end ;
33411: GO 33414
33413: POP
// for j = 1 to 3 do
33414: LD_ADDR_VAR 0 7
33418: PUSH
33419: DOUBLE
33420: LD_INT 1
33422: DEC
33423: ST_TO_ADDR
33424: LD_INT 3
33426: PUSH
33427: FOR_TO
33428: IFFALSE 33481
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33430: LD_ADDR_VAR 0 5
33434: PUSH
33435: LD_VAR 0 5
33439: PPUSH
33440: LD_VAR 0 7
33444: PPUSH
33445: LD_VAR 0 5
33449: PUSH
33450: LD_VAR 0 7
33454: ARRAY
33455: PUSH
33456: LD_VAR 0 9
33460: PUSH
33461: LD_VAR 0 7
33465: ARRAY
33466: PUSH
33467: LD_VAR 0 10
33471: MUL
33472: PLUS
33473: PPUSH
33474: CALL_OW 1
33478: ST_TO_ADDR
33479: GO 33427
33481: POP
33482: POP
// end ;
33483: GO 31962
33485: POP
33486: POP
// result := Replace ( result , 4 , tmp ) ;
33487: LD_ADDR_VAR 0 5
33491: PUSH
33492: LD_VAR 0 5
33496: PPUSH
33497: LD_INT 4
33499: PPUSH
33500: LD_VAR 0 8
33504: PPUSH
33505: CALL_OW 1
33509: ST_TO_ADDR
// end ;
33510: LD_VAR 0 5
33514: RET
// export function DangerAtRange ( unit , range ) ; begin
33515: LD_INT 0
33517: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33518: LD_ADDR_VAR 0 3
33522: PUSH
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL_OW 255
33532: PPUSH
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL_OW 250
33542: PPUSH
33543: LD_VAR 0 1
33547: PPUSH
33548: CALL_OW 251
33552: PPUSH
33553: LD_VAR 0 2
33557: PPUSH
33558: CALL 31814 0 4
33562: ST_TO_ADDR
// end ;
33563: LD_VAR 0 3
33567: RET
// export function DangerInArea ( side , area ) ; begin
33568: LD_INT 0
33570: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33571: LD_ADDR_VAR 0 3
33575: PUSH
33576: LD_VAR 0 2
33580: PPUSH
33581: LD_INT 81
33583: PUSH
33584: LD_VAR 0 1
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PPUSH
33593: CALL_OW 70
33597: ST_TO_ADDR
// end ;
33598: LD_VAR 0 3
33602: RET
// export function IsExtension ( b ) ; begin
33603: LD_INT 0
33605: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
33606: LD_ADDR_VAR 0 2
33610: PUSH
33611: LD_VAR 0 1
33615: PUSH
33616: LD_INT 23
33618: PUSH
33619: LD_INT 20
33621: PUSH
33622: LD_INT 22
33624: PUSH
33625: LD_INT 17
33627: PUSH
33628: LD_INT 24
33630: PUSH
33631: LD_INT 21
33633: PUSH
33634: LD_INT 19
33636: PUSH
33637: LD_INT 16
33639: PUSH
33640: LD_INT 25
33642: PUSH
33643: LD_INT 18
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: IN
33658: ST_TO_ADDR
// end ;
33659: LD_VAR 0 2
33663: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
33664: LD_INT 0
33666: PPUSH
33667: PPUSH
33668: PPUSH
// result := [ ] ;
33669: LD_ADDR_VAR 0 4
33673: PUSH
33674: EMPTY
33675: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
33676: LD_ADDR_VAR 0 5
33680: PUSH
33681: LD_VAR 0 2
33685: PPUSH
33686: LD_INT 21
33688: PUSH
33689: LD_INT 3
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PPUSH
33696: CALL_OW 70
33700: ST_TO_ADDR
// if not tmp then
33701: LD_VAR 0 5
33705: NOT
33706: IFFALSE 33710
// exit ;
33708: GO 33774
// if checkLink then
33710: LD_VAR 0 3
33714: IFFALSE 33764
// begin for i in tmp do
33716: LD_ADDR_VAR 0 6
33720: PUSH
33721: LD_VAR 0 5
33725: PUSH
33726: FOR_IN
33727: IFFALSE 33762
// if GetBase ( i ) <> base then
33729: LD_VAR 0 6
33733: PPUSH
33734: CALL_OW 274
33738: PUSH
33739: LD_VAR 0 1
33743: NONEQUAL
33744: IFFALSE 33760
// ComLinkToBase ( base , i ) ;
33746: LD_VAR 0 1
33750: PPUSH
33751: LD_VAR 0 6
33755: PPUSH
33756: CALL_OW 169
33760: GO 33726
33762: POP
33763: POP
// end ; result := tmp ;
33764: LD_ADDR_VAR 0 4
33768: PUSH
33769: LD_VAR 0 5
33773: ST_TO_ADDR
// end ;
33774: LD_VAR 0 4
33778: RET
// export function ComComplete ( units , b ) ; var i ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
// if not units then
33783: LD_VAR 0 1
33787: NOT
33788: IFFALSE 33792
// exit ;
33790: GO 33882
// for i in units do
33792: LD_ADDR_VAR 0 4
33796: PUSH
33797: LD_VAR 0 1
33801: PUSH
33802: FOR_IN
33803: IFFALSE 33880
// if BuildingStatus ( b ) = bs_build then
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL_OW 461
33814: PUSH
33815: LD_INT 1
33817: EQUAL
33818: IFFALSE 33878
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33820: LD_VAR 0 4
33824: PPUSH
33825: LD_STRING h
33827: PUSH
33828: LD_VAR 0 2
33832: PPUSH
33833: CALL_OW 250
33837: PUSH
33838: LD_VAR 0 2
33842: PPUSH
33843: CALL_OW 251
33847: PUSH
33848: LD_VAR 0 2
33852: PUSH
33853: LD_INT 0
33855: PUSH
33856: LD_INT 0
33858: PUSH
33859: LD_INT 0
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: PUSH
33871: EMPTY
33872: LIST
33873: PPUSH
33874: CALL_OW 446
33878: GO 33802
33880: POP
33881: POP
// end ;
33882: LD_VAR 0 3
33886: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33887: LD_INT 0
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33895: LD_VAR 0 1
33899: NOT
33900: PUSH
33901: LD_VAR 0 1
33905: PPUSH
33906: CALL_OW 263
33910: PUSH
33911: LD_INT 2
33913: NONEQUAL
33914: OR
33915: IFFALSE 33919
// exit ;
33917: GO 34235
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33919: LD_ADDR_VAR 0 6
33923: PUSH
33924: LD_INT 22
33926: PUSH
33927: LD_VAR 0 1
33931: PPUSH
33932: CALL_OW 255
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 30
33946: PUSH
33947: LD_INT 36
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 34
33956: PUSH
33957: LD_INT 31
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PPUSH
33973: CALL_OW 69
33977: ST_TO_ADDR
// if not tmp then
33978: LD_VAR 0 6
33982: NOT
33983: IFFALSE 33987
// exit ;
33985: GO 34235
// result := [ ] ;
33987: LD_ADDR_VAR 0 2
33991: PUSH
33992: EMPTY
33993: ST_TO_ADDR
// for i in tmp do
33994: LD_ADDR_VAR 0 3
33998: PUSH
33999: LD_VAR 0 6
34003: PUSH
34004: FOR_IN
34005: IFFALSE 34076
// begin t := UnitsInside ( i ) ;
34007: LD_ADDR_VAR 0 4
34011: PUSH
34012: LD_VAR 0 3
34016: PPUSH
34017: CALL_OW 313
34021: ST_TO_ADDR
// if t then
34022: LD_VAR 0 4
34026: IFFALSE 34074
// for j in t do
34028: LD_ADDR_VAR 0 7
34032: PUSH
34033: LD_VAR 0 4
34037: PUSH
34038: FOR_IN
34039: IFFALSE 34072
// result := Replace ( result , result + 1 , j ) ;
34041: LD_ADDR_VAR 0 2
34045: PUSH
34046: LD_VAR 0 2
34050: PPUSH
34051: LD_VAR 0 2
34055: PUSH
34056: LD_INT 1
34058: PLUS
34059: PPUSH
34060: LD_VAR 0 7
34064: PPUSH
34065: CALL_OW 1
34069: ST_TO_ADDR
34070: GO 34038
34072: POP
34073: POP
// end ;
34074: GO 34004
34076: POP
34077: POP
// if not result then
34078: LD_VAR 0 2
34082: NOT
34083: IFFALSE 34087
// exit ;
34085: GO 34235
// mech := result [ 1 ] ;
34087: LD_ADDR_VAR 0 5
34091: PUSH
34092: LD_VAR 0 2
34096: PUSH
34097: LD_INT 1
34099: ARRAY
34100: ST_TO_ADDR
// if result > 1 then
34101: LD_VAR 0 2
34105: PUSH
34106: LD_INT 1
34108: GREATER
34109: IFFALSE 34221
// begin for i = 2 to result do
34111: LD_ADDR_VAR 0 3
34115: PUSH
34116: DOUBLE
34117: LD_INT 2
34119: DEC
34120: ST_TO_ADDR
34121: LD_VAR 0 2
34125: PUSH
34126: FOR_TO
34127: IFFALSE 34219
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34129: LD_ADDR_VAR 0 4
34133: PUSH
34134: LD_VAR 0 2
34138: PUSH
34139: LD_VAR 0 3
34143: ARRAY
34144: PPUSH
34145: LD_INT 3
34147: PPUSH
34148: CALL_OW 259
34152: PUSH
34153: LD_VAR 0 2
34157: PUSH
34158: LD_VAR 0 3
34162: ARRAY
34163: PPUSH
34164: CALL_OW 432
34168: MINUS
34169: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34170: LD_VAR 0 4
34174: PUSH
34175: LD_VAR 0 5
34179: PPUSH
34180: LD_INT 3
34182: PPUSH
34183: CALL_OW 259
34187: PUSH
34188: LD_VAR 0 5
34192: PPUSH
34193: CALL_OW 432
34197: MINUS
34198: GREATEREQUAL
34199: IFFALSE 34217
// mech := result [ i ] ;
34201: LD_ADDR_VAR 0 5
34205: PUSH
34206: LD_VAR 0 2
34210: PUSH
34211: LD_VAR 0 3
34215: ARRAY
34216: ST_TO_ADDR
// end ;
34217: GO 34126
34219: POP
34220: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34221: LD_VAR 0 1
34225: PPUSH
34226: LD_VAR 0 5
34230: PPUSH
34231: CALL_OW 135
// end ;
34235: LD_VAR 0 2
34239: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34240: LD_INT 0
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
// result := [ ] ;
34255: LD_ADDR_VAR 0 7
34259: PUSH
34260: EMPTY
34261: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34262: LD_VAR 0 1
34266: PPUSH
34267: CALL_OW 266
34271: PUSH
34272: LD_INT 0
34274: PUSH
34275: LD_INT 1
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: IN
34282: NOT
34283: IFFALSE 34287
// exit ;
34285: GO 35921
// if name then
34287: LD_VAR 0 3
34291: IFFALSE 34307
// SetBName ( base_dep , name ) ;
34293: LD_VAR 0 1
34297: PPUSH
34298: LD_VAR 0 3
34302: PPUSH
34303: CALL_OW 500
// base := GetBase ( base_dep ) ;
34307: LD_ADDR_VAR 0 15
34311: PUSH
34312: LD_VAR 0 1
34316: PPUSH
34317: CALL_OW 274
34321: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34322: LD_ADDR_VAR 0 16
34326: PUSH
34327: LD_VAR 0 1
34331: PPUSH
34332: CALL_OW 255
34336: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34337: LD_ADDR_VAR 0 17
34341: PUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: CALL_OW 248
34351: ST_TO_ADDR
// if sources then
34352: LD_VAR 0 5
34356: IFFALSE 34403
// for i = 1 to 3 do
34358: LD_ADDR_VAR 0 8
34362: PUSH
34363: DOUBLE
34364: LD_INT 1
34366: DEC
34367: ST_TO_ADDR
34368: LD_INT 3
34370: PUSH
34371: FOR_TO
34372: IFFALSE 34401
// AddResourceType ( base , i , sources [ i ] ) ;
34374: LD_VAR 0 15
34378: PPUSH
34379: LD_VAR 0 8
34383: PPUSH
34384: LD_VAR 0 5
34388: PUSH
34389: LD_VAR 0 8
34393: ARRAY
34394: PPUSH
34395: CALL_OW 276
34399: GO 34371
34401: POP
34402: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34403: LD_ADDR_VAR 0 18
34407: PUSH
34408: LD_VAR 0 15
34412: PPUSH
34413: LD_VAR 0 2
34417: PPUSH
34418: LD_INT 1
34420: PPUSH
34421: CALL 33664 0 3
34425: ST_TO_ADDR
// InitHc ;
34426: CALL_OW 19
// InitUc ;
34430: CALL_OW 18
// uc_side := side ;
34434: LD_ADDR_OWVAR 20
34438: PUSH
34439: LD_VAR 0 16
34443: ST_TO_ADDR
// uc_nation := nation ;
34444: LD_ADDR_OWVAR 21
34448: PUSH
34449: LD_VAR 0 17
34453: ST_TO_ADDR
// if buildings then
34454: LD_VAR 0 18
34458: IFFALSE 35780
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34460: LD_ADDR_VAR 0 19
34464: PUSH
34465: LD_VAR 0 18
34469: PPUSH
34470: LD_INT 2
34472: PUSH
34473: LD_INT 30
34475: PUSH
34476: LD_INT 29
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 30
34485: PUSH
34486: LD_INT 30
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: LIST
34497: PPUSH
34498: CALL_OW 72
34502: ST_TO_ADDR
// if tmp then
34503: LD_VAR 0 19
34507: IFFALSE 34555
// for i in tmp do
34509: LD_ADDR_VAR 0 8
34513: PUSH
34514: LD_VAR 0 19
34518: PUSH
34519: FOR_IN
34520: IFFALSE 34553
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34522: LD_VAR 0 8
34526: PPUSH
34527: CALL_OW 250
34531: PPUSH
34532: LD_VAR 0 8
34536: PPUSH
34537: CALL_OW 251
34541: PPUSH
34542: LD_VAR 0 16
34546: PPUSH
34547: CALL_OW 441
34551: GO 34519
34553: POP
34554: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34555: LD_VAR 0 18
34559: PPUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 30
34565: PUSH
34566: LD_INT 32
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 30
34575: PUSH
34576: LD_INT 33
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: LIST
34587: PPUSH
34588: CALL_OW 72
34592: IFFALSE 34680
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
34594: LD_ADDR_VAR 0 8
34598: PUSH
34599: LD_VAR 0 18
34603: PPUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 30
34609: PUSH
34610: LD_INT 32
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 30
34619: PUSH
34620: LD_INT 33
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: LIST
34631: PPUSH
34632: CALL_OW 72
34636: PUSH
34637: FOR_IN
34638: IFFALSE 34678
// begin if not GetBWeapon ( i ) then
34640: LD_VAR 0 8
34644: PPUSH
34645: CALL_OW 269
34649: NOT
34650: IFFALSE 34676
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
34652: LD_VAR 0 8
34656: PPUSH
34657: LD_VAR 0 8
34661: PPUSH
34662: LD_VAR 0 2
34666: PPUSH
34667: CALL 35926 0 2
34671: PPUSH
34672: CALL_OW 431
// end ;
34676: GO 34637
34678: POP
34679: POP
// end ; for i = 1 to personel do
34680: LD_ADDR_VAR 0 8
34684: PUSH
34685: DOUBLE
34686: LD_INT 1
34688: DEC
34689: ST_TO_ADDR
34690: LD_VAR 0 6
34694: PUSH
34695: FOR_TO
34696: IFFALSE 35760
// begin if i > 4 then
34698: LD_VAR 0 8
34702: PUSH
34703: LD_INT 4
34705: GREATER
34706: IFFALSE 34710
// break ;
34708: GO 35760
// case i of 1 :
34710: LD_VAR 0 8
34714: PUSH
34715: LD_INT 1
34717: DOUBLE
34718: EQUAL
34719: IFTRUE 34723
34721: GO 34803
34723: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
34724: LD_ADDR_VAR 0 12
34728: PUSH
34729: LD_VAR 0 18
34733: PPUSH
34734: LD_INT 22
34736: PUSH
34737: LD_VAR 0 16
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: PUSH
34746: LD_INT 58
34748: PUSH
34749: EMPTY
34750: LIST
34751: PUSH
34752: LD_INT 2
34754: PUSH
34755: LD_INT 30
34757: PUSH
34758: LD_INT 32
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: LD_INT 30
34767: PUSH
34768: LD_INT 4
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PUSH
34775: LD_INT 30
34777: PUSH
34778: LD_INT 5
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: PPUSH
34796: CALL_OW 72
34800: ST_TO_ADDR
34801: GO 35025
34803: LD_INT 2
34805: DOUBLE
34806: EQUAL
34807: IFTRUE 34811
34809: GO 34873
34811: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34812: LD_ADDR_VAR 0 12
34816: PUSH
34817: LD_VAR 0 18
34821: PPUSH
34822: LD_INT 22
34824: PUSH
34825: LD_VAR 0 16
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 30
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 30
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PPUSH
34866: CALL_OW 72
34870: ST_TO_ADDR
34871: GO 35025
34873: LD_INT 3
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34881
34879: GO 34943
34881: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34882: LD_ADDR_VAR 0 12
34886: PUSH
34887: LD_VAR 0 18
34891: PPUSH
34892: LD_INT 22
34894: PUSH
34895: LD_VAR 0 16
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: LD_INT 30
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 30
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: LIST
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PPUSH
34936: CALL_OW 72
34940: ST_TO_ADDR
34941: GO 35025
34943: LD_INT 4
34945: DOUBLE
34946: EQUAL
34947: IFTRUE 34951
34949: GO 35024
34951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34952: LD_ADDR_VAR 0 12
34956: PUSH
34957: LD_VAR 0 18
34961: PPUSH
34962: LD_INT 22
34964: PUSH
34965: LD_VAR 0 16
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 2
34976: PUSH
34977: LD_INT 30
34979: PUSH
34980: LD_INT 6
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 30
34989: PUSH
34990: LD_INT 7
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 30
34999: PUSH
35000: LD_INT 8
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PPUSH
35017: CALL_OW 72
35021: ST_TO_ADDR
35022: GO 35025
35024: POP
// if i = 1 then
35025: LD_VAR 0 8
35029: PUSH
35030: LD_INT 1
35032: EQUAL
35033: IFFALSE 35144
// begin tmp := [ ] ;
35035: LD_ADDR_VAR 0 19
35039: PUSH
35040: EMPTY
35041: ST_TO_ADDR
// for j in f do
35042: LD_ADDR_VAR 0 9
35046: PUSH
35047: LD_VAR 0 12
35051: PUSH
35052: FOR_IN
35053: IFFALSE 35126
// if GetBType ( j ) = b_bunker then
35055: LD_VAR 0 9
35059: PPUSH
35060: CALL_OW 266
35064: PUSH
35065: LD_INT 32
35067: EQUAL
35068: IFFALSE 35095
// tmp := Insert ( tmp , 1 , j ) else
35070: LD_ADDR_VAR 0 19
35074: PUSH
35075: LD_VAR 0 19
35079: PPUSH
35080: LD_INT 1
35082: PPUSH
35083: LD_VAR 0 9
35087: PPUSH
35088: CALL_OW 2
35092: ST_TO_ADDR
35093: GO 35124
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35095: LD_ADDR_VAR 0 19
35099: PUSH
35100: LD_VAR 0 19
35104: PPUSH
35105: LD_VAR 0 19
35109: PUSH
35110: LD_INT 1
35112: PLUS
35113: PPUSH
35114: LD_VAR 0 9
35118: PPUSH
35119: CALL_OW 2
35123: ST_TO_ADDR
35124: GO 35052
35126: POP
35127: POP
// if tmp then
35128: LD_VAR 0 19
35132: IFFALSE 35144
// f := tmp ;
35134: LD_ADDR_VAR 0 12
35138: PUSH
35139: LD_VAR 0 19
35143: ST_TO_ADDR
// end ; x := personel [ i ] ;
35144: LD_ADDR_VAR 0 13
35148: PUSH
35149: LD_VAR 0 6
35153: PUSH
35154: LD_VAR 0 8
35158: ARRAY
35159: ST_TO_ADDR
// if x = - 1 then
35160: LD_VAR 0 13
35164: PUSH
35165: LD_INT 1
35167: NEG
35168: EQUAL
35169: IFFALSE 35378
// begin for j in f do
35171: LD_ADDR_VAR 0 9
35175: PUSH
35176: LD_VAR 0 12
35180: PUSH
35181: FOR_IN
35182: IFFALSE 35374
// repeat InitHc ;
35184: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35188: LD_VAR 0 9
35192: PPUSH
35193: CALL_OW 266
35197: PUSH
35198: LD_INT 5
35200: EQUAL
35201: IFFALSE 35271
// begin if UnitsInside ( j ) < 3 then
35203: LD_VAR 0 9
35207: PPUSH
35208: CALL_OW 313
35212: PUSH
35213: LD_INT 3
35215: LESS
35216: IFFALSE 35252
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35218: LD_INT 0
35220: PPUSH
35221: LD_INT 5
35223: PUSH
35224: LD_INT 8
35226: PUSH
35227: LD_INT 9
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: LIST
35234: PUSH
35235: LD_VAR 0 17
35239: ARRAY
35240: PPUSH
35241: LD_VAR 0 4
35245: PPUSH
35246: CALL_OW 380
35250: GO 35269
// PrepareHuman ( false , i , skill ) ;
35252: LD_INT 0
35254: PPUSH
35255: LD_VAR 0 8
35259: PPUSH
35260: LD_VAR 0 4
35264: PPUSH
35265: CALL_OW 380
// end else
35269: GO 35288
// PrepareHuman ( false , i , skill ) ;
35271: LD_INT 0
35273: PPUSH
35274: LD_VAR 0 8
35278: PPUSH
35279: LD_VAR 0 4
35283: PPUSH
35284: CALL_OW 380
// un := CreateHuman ;
35288: LD_ADDR_VAR 0 14
35292: PUSH
35293: CALL_OW 44
35297: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35298: LD_ADDR_VAR 0 7
35302: PUSH
35303: LD_VAR 0 7
35307: PPUSH
35308: LD_INT 1
35310: PPUSH
35311: LD_VAR 0 14
35315: PPUSH
35316: CALL_OW 2
35320: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35321: LD_VAR 0 14
35325: PPUSH
35326: LD_VAR 0 9
35330: PPUSH
35331: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35335: LD_VAR 0 9
35339: PPUSH
35340: CALL_OW 313
35344: PUSH
35345: LD_INT 6
35347: EQUAL
35348: PUSH
35349: LD_VAR 0 9
35353: PPUSH
35354: CALL_OW 266
35358: PUSH
35359: LD_INT 32
35361: PUSH
35362: LD_INT 31
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: IN
35369: OR
35370: IFFALSE 35184
35372: GO 35181
35374: POP
35375: POP
// end else
35376: GO 35758
// for j = 1 to x do
35378: LD_ADDR_VAR 0 9
35382: PUSH
35383: DOUBLE
35384: LD_INT 1
35386: DEC
35387: ST_TO_ADDR
35388: LD_VAR 0 13
35392: PUSH
35393: FOR_TO
35394: IFFALSE 35756
// begin InitHc ;
35396: CALL_OW 19
// if not f then
35400: LD_VAR 0 12
35404: NOT
35405: IFFALSE 35494
// begin PrepareHuman ( false , i , skill ) ;
35407: LD_INT 0
35409: PPUSH
35410: LD_VAR 0 8
35414: PPUSH
35415: LD_VAR 0 4
35419: PPUSH
35420: CALL_OW 380
// un := CreateHuman ;
35424: LD_ADDR_VAR 0 14
35428: PUSH
35429: CALL_OW 44
35433: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35434: LD_ADDR_VAR 0 7
35438: PUSH
35439: LD_VAR 0 7
35443: PPUSH
35444: LD_INT 1
35446: PPUSH
35447: LD_VAR 0 14
35451: PPUSH
35452: CALL_OW 2
35456: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35457: LD_VAR 0 14
35461: PPUSH
35462: LD_VAR 0 1
35466: PPUSH
35467: CALL_OW 250
35471: PPUSH
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 251
35481: PPUSH
35482: LD_INT 10
35484: PPUSH
35485: LD_INT 0
35487: PPUSH
35488: CALL_OW 50
// continue ;
35492: GO 35393
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35494: LD_VAR 0 12
35498: PUSH
35499: LD_INT 1
35501: ARRAY
35502: PPUSH
35503: CALL_OW 313
35507: PUSH
35508: LD_VAR 0 12
35512: PUSH
35513: LD_INT 1
35515: ARRAY
35516: PPUSH
35517: CALL_OW 266
35521: PUSH
35522: LD_INT 32
35524: PUSH
35525: LD_INT 31
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: IN
35532: AND
35533: PUSH
35534: LD_VAR 0 12
35538: PUSH
35539: LD_INT 1
35541: ARRAY
35542: PPUSH
35543: CALL_OW 313
35547: PUSH
35548: LD_INT 6
35550: EQUAL
35551: OR
35552: IFFALSE 35572
// f := Delete ( f , 1 ) ;
35554: LD_ADDR_VAR 0 12
35558: PUSH
35559: LD_VAR 0 12
35563: PPUSH
35564: LD_INT 1
35566: PPUSH
35567: CALL_OW 3
35571: ST_TO_ADDR
// if not f then
35572: LD_VAR 0 12
35576: NOT
35577: IFFALSE 35595
// begin x := x + 2 ;
35579: LD_ADDR_VAR 0 13
35583: PUSH
35584: LD_VAR 0 13
35588: PUSH
35589: LD_INT 2
35591: PLUS
35592: ST_TO_ADDR
// continue ;
35593: GO 35393
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
35595: LD_VAR 0 12
35599: PUSH
35600: LD_INT 1
35602: ARRAY
35603: PPUSH
35604: CALL_OW 266
35608: PUSH
35609: LD_INT 5
35611: EQUAL
35612: IFFALSE 35686
// begin if UnitsInside ( f [ 1 ] ) < 3 then
35614: LD_VAR 0 12
35618: PUSH
35619: LD_INT 1
35621: ARRAY
35622: PPUSH
35623: CALL_OW 313
35627: PUSH
35628: LD_INT 3
35630: LESS
35631: IFFALSE 35667
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35633: LD_INT 0
35635: PPUSH
35636: LD_INT 5
35638: PUSH
35639: LD_INT 8
35641: PUSH
35642: LD_INT 9
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: LIST
35649: PUSH
35650: LD_VAR 0 17
35654: ARRAY
35655: PPUSH
35656: LD_VAR 0 4
35660: PPUSH
35661: CALL_OW 380
35665: GO 35684
// PrepareHuman ( false , i , skill ) ;
35667: LD_INT 0
35669: PPUSH
35670: LD_VAR 0 8
35674: PPUSH
35675: LD_VAR 0 4
35679: PPUSH
35680: CALL_OW 380
// end else
35684: GO 35703
// PrepareHuman ( false , i , skill ) ;
35686: LD_INT 0
35688: PPUSH
35689: LD_VAR 0 8
35693: PPUSH
35694: LD_VAR 0 4
35698: PPUSH
35699: CALL_OW 380
// un := CreateHuman ;
35703: LD_ADDR_VAR 0 14
35707: PUSH
35708: CALL_OW 44
35712: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35713: LD_ADDR_VAR 0 7
35717: PUSH
35718: LD_VAR 0 7
35722: PPUSH
35723: LD_INT 1
35725: PPUSH
35726: LD_VAR 0 14
35730: PPUSH
35731: CALL_OW 2
35735: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35736: LD_VAR 0 14
35740: PPUSH
35741: LD_VAR 0 12
35745: PUSH
35746: LD_INT 1
35748: ARRAY
35749: PPUSH
35750: CALL_OW 52
// end ;
35754: GO 35393
35756: POP
35757: POP
// end ;
35758: GO 34695
35760: POP
35761: POP
// result := result ^ buildings ;
35762: LD_ADDR_VAR 0 7
35766: PUSH
35767: LD_VAR 0 7
35771: PUSH
35772: LD_VAR 0 18
35776: ADD
35777: ST_TO_ADDR
// end else
35778: GO 35921
// begin for i = 1 to personel do
35780: LD_ADDR_VAR 0 8
35784: PUSH
35785: DOUBLE
35786: LD_INT 1
35788: DEC
35789: ST_TO_ADDR
35790: LD_VAR 0 6
35794: PUSH
35795: FOR_TO
35796: IFFALSE 35919
// begin if i > 4 then
35798: LD_VAR 0 8
35802: PUSH
35803: LD_INT 4
35805: GREATER
35806: IFFALSE 35810
// break ;
35808: GO 35919
// x := personel [ i ] ;
35810: LD_ADDR_VAR 0 13
35814: PUSH
35815: LD_VAR 0 6
35819: PUSH
35820: LD_VAR 0 8
35824: ARRAY
35825: ST_TO_ADDR
// if x = - 1 then
35826: LD_VAR 0 13
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: EQUAL
35835: IFFALSE 35839
// continue ;
35837: GO 35795
// PrepareHuman ( false , i , skill ) ;
35839: LD_INT 0
35841: PPUSH
35842: LD_VAR 0 8
35846: PPUSH
35847: LD_VAR 0 4
35851: PPUSH
35852: CALL_OW 380
// un := CreateHuman ;
35856: LD_ADDR_VAR 0 14
35860: PUSH
35861: CALL_OW 44
35865: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35866: LD_VAR 0 14
35870: PPUSH
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 250
35880: PPUSH
35881: LD_VAR 0 1
35885: PPUSH
35886: CALL_OW 251
35890: PPUSH
35891: LD_INT 10
35893: PPUSH
35894: LD_INT 0
35896: PPUSH
35897: CALL_OW 50
// result := result ^ un ;
35901: LD_ADDR_VAR 0 7
35905: PUSH
35906: LD_VAR 0 7
35910: PUSH
35911: LD_VAR 0 14
35915: ADD
35916: ST_TO_ADDR
// end ;
35917: GO 35795
35919: POP
35920: POP
// end ; end ;
35921: LD_VAR 0 7
35925: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35926: LD_INT 0
35928: PPUSH
35929: PPUSH
35930: PPUSH
35931: PPUSH
35932: PPUSH
35933: PPUSH
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
35940: PPUSH
35941: PPUSH
35942: PPUSH
35943: PPUSH
// result := false ;
35944: LD_ADDR_VAR 0 3
35948: PUSH
35949: LD_INT 0
35951: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35952: LD_VAR 0 1
35956: NOT
35957: PUSH
35958: LD_VAR 0 1
35962: PPUSH
35963: CALL_OW 266
35967: PUSH
35968: LD_INT 32
35970: PUSH
35971: LD_INT 33
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: IN
35978: NOT
35979: OR
35980: IFFALSE 35984
// exit ;
35982: GO 37093
// nat := GetNation ( tower ) ;
35984: LD_ADDR_VAR 0 12
35988: PUSH
35989: LD_VAR 0 1
35993: PPUSH
35994: CALL_OW 248
35998: ST_TO_ADDR
// side := GetSide ( tower ) ;
35999: LD_ADDR_VAR 0 16
36003: PUSH
36004: LD_VAR 0 1
36008: PPUSH
36009: CALL_OW 255
36013: ST_TO_ADDR
// x := GetX ( tower ) ;
36014: LD_ADDR_VAR 0 10
36018: PUSH
36019: LD_VAR 0 1
36023: PPUSH
36024: CALL_OW 250
36028: ST_TO_ADDR
// y := GetY ( tower ) ;
36029: LD_ADDR_VAR 0 11
36033: PUSH
36034: LD_VAR 0 1
36038: PPUSH
36039: CALL_OW 251
36043: ST_TO_ADDR
// if not x or not y then
36044: LD_VAR 0 10
36048: NOT
36049: PUSH
36050: LD_VAR 0 11
36054: NOT
36055: OR
36056: IFFALSE 36060
// exit ;
36058: GO 37093
// weapon := 0 ;
36060: LD_ADDR_VAR 0 18
36064: PUSH
36065: LD_INT 0
36067: ST_TO_ADDR
// fac_list := [ ] ;
36068: LD_ADDR_VAR 0 17
36072: PUSH
36073: EMPTY
36074: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36075: LD_ADDR_VAR 0 6
36079: PUSH
36080: LD_VAR 0 1
36084: PPUSH
36085: CALL_OW 274
36089: PPUSH
36090: LD_VAR 0 2
36094: PPUSH
36095: LD_INT 0
36097: PPUSH
36098: CALL 33664 0 3
36102: PPUSH
36103: LD_INT 30
36105: PUSH
36106: LD_INT 3
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PPUSH
36113: CALL_OW 72
36117: ST_TO_ADDR
// if not factories then
36118: LD_VAR 0 6
36122: NOT
36123: IFFALSE 36127
// exit ;
36125: GO 37093
// for i in factories do
36127: LD_ADDR_VAR 0 8
36131: PUSH
36132: LD_VAR 0 6
36136: PUSH
36137: FOR_IN
36138: IFFALSE 36163
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36140: LD_ADDR_VAR 0 17
36144: PUSH
36145: LD_VAR 0 17
36149: PUSH
36150: LD_VAR 0 8
36154: PPUSH
36155: CALL_OW 478
36159: UNION
36160: ST_TO_ADDR
36161: GO 36137
36163: POP
36164: POP
// if not fac_list then
36165: LD_VAR 0 17
36169: NOT
36170: IFFALSE 36174
// exit ;
36172: GO 37093
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36174: LD_ADDR_VAR 0 5
36178: PUSH
36179: LD_INT 4
36181: PUSH
36182: LD_INT 5
36184: PUSH
36185: LD_INT 9
36187: PUSH
36188: LD_INT 10
36190: PUSH
36191: LD_INT 6
36193: PUSH
36194: LD_INT 7
36196: PUSH
36197: LD_INT 11
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 27
36211: PUSH
36212: LD_INT 28
36214: PUSH
36215: LD_INT 26
36217: PUSH
36218: LD_INT 30
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 43
36229: PUSH
36230: LD_INT 44
36232: PUSH
36233: LD_INT 46
36235: PUSH
36236: LD_INT 45
36238: PUSH
36239: LD_INT 47
36241: PUSH
36242: LD_INT 49
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: PUSH
36258: LD_VAR 0 12
36262: ARRAY
36263: ST_TO_ADDR
// list := list isect fac_list ;
36264: LD_ADDR_VAR 0 5
36268: PUSH
36269: LD_VAR 0 5
36273: PUSH
36274: LD_VAR 0 17
36278: ISECT
36279: ST_TO_ADDR
// if not list then
36280: LD_VAR 0 5
36284: NOT
36285: IFFALSE 36289
// exit ;
36287: GO 37093
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36289: LD_VAR 0 12
36293: PUSH
36294: LD_INT 3
36296: EQUAL
36297: PUSH
36298: LD_INT 49
36300: PUSH
36301: LD_VAR 0 5
36305: IN
36306: AND
36307: PUSH
36308: LD_INT 31
36310: PPUSH
36311: LD_VAR 0 16
36315: PPUSH
36316: CALL_OW 321
36320: PUSH
36321: LD_INT 2
36323: EQUAL
36324: AND
36325: IFFALSE 36385
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36327: LD_INT 22
36329: PUSH
36330: LD_VAR 0 16
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 35
36341: PUSH
36342: LD_INT 49
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 91
36351: PUSH
36352: LD_VAR 0 1
36356: PUSH
36357: LD_INT 10
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: LIST
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: PPUSH
36370: CALL_OW 69
36374: NOT
36375: IFFALSE 36385
// weapon := ru_time_lapser ;
36377: LD_ADDR_VAR 0 18
36381: PUSH
36382: LD_INT 49
36384: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36385: LD_VAR 0 12
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: LD_INT 2
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: IN
36400: PUSH
36401: LD_INT 11
36403: PUSH
36404: LD_VAR 0 5
36408: IN
36409: PUSH
36410: LD_INT 30
36412: PUSH
36413: LD_VAR 0 5
36417: IN
36418: OR
36419: AND
36420: PUSH
36421: LD_INT 6
36423: PPUSH
36424: LD_VAR 0 16
36428: PPUSH
36429: CALL_OW 321
36433: PUSH
36434: LD_INT 2
36436: EQUAL
36437: AND
36438: IFFALSE 36603
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36440: LD_INT 22
36442: PUSH
36443: LD_VAR 0 16
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 35
36457: PUSH
36458: LD_INT 11
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 35
36467: PUSH
36468: LD_INT 30
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 91
36482: PUSH
36483: LD_VAR 0 1
36487: PUSH
36488: LD_INT 18
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: LIST
36500: PPUSH
36501: CALL_OW 69
36505: NOT
36506: PUSH
36507: LD_INT 22
36509: PUSH
36510: LD_VAR 0 16
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 30
36524: PUSH
36525: LD_INT 32
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 30
36534: PUSH
36535: LD_INT 33
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 91
36549: PUSH
36550: LD_VAR 0 1
36554: PUSH
36555: LD_INT 12
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: LIST
36567: PUSH
36568: EMPTY
36569: LIST
36570: PPUSH
36571: CALL_OW 69
36575: PUSH
36576: LD_INT 2
36578: GREATER
36579: AND
36580: IFFALSE 36603
// weapon := [ us_radar , ar_radar ] [ nat ] ;
36582: LD_ADDR_VAR 0 18
36586: PUSH
36587: LD_INT 11
36589: PUSH
36590: LD_INT 30
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_VAR 0 12
36601: ARRAY
36602: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
36603: LD_VAR 0 18
36607: NOT
36608: PUSH
36609: LD_INT 40
36611: PPUSH
36612: LD_VAR 0 16
36616: PPUSH
36617: CALL_OW 321
36621: PUSH
36622: LD_INT 2
36624: EQUAL
36625: AND
36626: PUSH
36627: LD_INT 7
36629: PUSH
36630: LD_VAR 0 5
36634: IN
36635: PUSH
36636: LD_INT 28
36638: PUSH
36639: LD_VAR 0 5
36643: IN
36644: OR
36645: PUSH
36646: LD_INT 45
36648: PUSH
36649: LD_VAR 0 5
36653: IN
36654: OR
36655: AND
36656: IFFALSE 36910
// begin hex := GetHexInfo ( x , y ) ;
36658: LD_ADDR_VAR 0 4
36662: PUSH
36663: LD_VAR 0 10
36667: PPUSH
36668: LD_VAR 0 11
36672: PPUSH
36673: CALL_OW 546
36677: ST_TO_ADDR
// if hex [ 1 ] then
36678: LD_VAR 0 4
36682: PUSH
36683: LD_INT 1
36685: ARRAY
36686: IFFALSE 36690
// exit ;
36688: GO 37093
// height := hex [ 2 ] ;
36690: LD_ADDR_VAR 0 15
36694: PUSH
36695: LD_VAR 0 4
36699: PUSH
36700: LD_INT 2
36702: ARRAY
36703: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
36704: LD_ADDR_VAR 0 14
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: LD_INT 2
36714: PUSH
36715: LD_INT 3
36717: PUSH
36718: LD_INT 5
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
// for i in tmp do
36727: LD_ADDR_VAR 0 8
36731: PUSH
36732: LD_VAR 0 14
36736: PUSH
36737: FOR_IN
36738: IFFALSE 36908
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36740: LD_ADDR_VAR 0 9
36744: PUSH
36745: LD_VAR 0 10
36749: PPUSH
36750: LD_VAR 0 8
36754: PPUSH
36755: LD_INT 5
36757: PPUSH
36758: CALL_OW 272
36762: PUSH
36763: LD_VAR 0 11
36767: PPUSH
36768: LD_VAR 0 8
36772: PPUSH
36773: LD_INT 5
36775: PPUSH
36776: CALL_OW 273
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36785: LD_VAR 0 9
36789: PUSH
36790: LD_INT 1
36792: ARRAY
36793: PPUSH
36794: LD_VAR 0 9
36798: PUSH
36799: LD_INT 2
36801: ARRAY
36802: PPUSH
36803: CALL_OW 488
36807: IFFALSE 36906
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36809: LD_ADDR_VAR 0 4
36813: PUSH
36814: LD_VAR 0 9
36818: PUSH
36819: LD_INT 1
36821: ARRAY
36822: PPUSH
36823: LD_VAR 0 9
36827: PUSH
36828: LD_INT 2
36830: ARRAY
36831: PPUSH
36832: CALL_OW 546
36836: ST_TO_ADDR
// if hex [ 1 ] then
36837: LD_VAR 0 4
36841: PUSH
36842: LD_INT 1
36844: ARRAY
36845: IFFALSE 36849
// continue ;
36847: GO 36737
// h := hex [ 2 ] ;
36849: LD_ADDR_VAR 0 13
36853: PUSH
36854: LD_VAR 0 4
36858: PUSH
36859: LD_INT 2
36861: ARRAY
36862: ST_TO_ADDR
// if h + 7 < height then
36863: LD_VAR 0 13
36867: PUSH
36868: LD_INT 7
36870: PLUS
36871: PUSH
36872: LD_VAR 0 15
36876: LESS
36877: IFFALSE 36906
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36879: LD_ADDR_VAR 0 18
36883: PUSH
36884: LD_INT 7
36886: PUSH
36887: LD_INT 28
36889: PUSH
36890: LD_INT 45
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: LIST
36897: PUSH
36898: LD_VAR 0 12
36902: ARRAY
36903: ST_TO_ADDR
// break ;
36904: GO 36908
// end ; end ; end ;
36906: GO 36737
36908: POP
36909: POP
// end ; if not weapon then
36910: LD_VAR 0 18
36914: NOT
36915: IFFALSE 36975
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36917: LD_ADDR_VAR 0 5
36921: PUSH
36922: LD_VAR 0 5
36926: PUSH
36927: LD_INT 11
36929: PUSH
36930: LD_INT 30
36932: PUSH
36933: LD_INT 49
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: DIFF
36941: ST_TO_ADDR
// if not list then
36942: LD_VAR 0 5
36946: NOT
36947: IFFALSE 36951
// exit ;
36949: GO 37093
// weapon := list [ rand ( 1 , list ) ] ;
36951: LD_ADDR_VAR 0 18
36955: PUSH
36956: LD_VAR 0 5
36960: PUSH
36961: LD_INT 1
36963: PPUSH
36964: LD_VAR 0 5
36968: PPUSH
36969: CALL_OW 12
36973: ARRAY
36974: ST_TO_ADDR
// end ; if weapon then
36975: LD_VAR 0 18
36979: IFFALSE 37093
// begin tmp := CostOfWeapon ( weapon ) ;
36981: LD_ADDR_VAR 0 14
36985: PUSH
36986: LD_VAR 0 18
36990: PPUSH
36991: CALL_OW 451
36995: ST_TO_ADDR
// j := GetBase ( tower ) ;
36996: LD_ADDR_VAR 0 9
37000: PUSH
37001: LD_VAR 0 1
37005: PPUSH
37006: CALL_OW 274
37010: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37011: LD_VAR 0 9
37015: PPUSH
37016: LD_INT 1
37018: PPUSH
37019: CALL_OW 275
37023: PUSH
37024: LD_VAR 0 14
37028: PUSH
37029: LD_INT 1
37031: ARRAY
37032: GREATEREQUAL
37033: PUSH
37034: LD_VAR 0 9
37038: PPUSH
37039: LD_INT 2
37041: PPUSH
37042: CALL_OW 275
37046: PUSH
37047: LD_VAR 0 14
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: GREATEREQUAL
37056: AND
37057: PUSH
37058: LD_VAR 0 9
37062: PPUSH
37063: LD_INT 3
37065: PPUSH
37066: CALL_OW 275
37070: PUSH
37071: LD_VAR 0 14
37075: PUSH
37076: LD_INT 3
37078: ARRAY
37079: GREATEREQUAL
37080: AND
37081: IFFALSE 37093
// result := weapon ;
37083: LD_ADDR_VAR 0 3
37087: PUSH
37088: LD_VAR 0 18
37092: ST_TO_ADDR
// end ; end ;
37093: LD_VAR 0 3
37097: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37098: LD_INT 0
37100: PPUSH
37101: PPUSH
// result := true ;
37102: LD_ADDR_VAR 0 3
37106: PUSH
37107: LD_INT 1
37109: ST_TO_ADDR
// if array1 = array2 then
37110: LD_VAR 0 1
37114: PUSH
37115: LD_VAR 0 2
37119: EQUAL
37120: IFFALSE 37180
// begin for i = 1 to array1 do
37122: LD_ADDR_VAR 0 4
37126: PUSH
37127: DOUBLE
37128: LD_INT 1
37130: DEC
37131: ST_TO_ADDR
37132: LD_VAR 0 1
37136: PUSH
37137: FOR_TO
37138: IFFALSE 37176
// if array1 [ i ] <> array2 [ i ] then
37140: LD_VAR 0 1
37144: PUSH
37145: LD_VAR 0 4
37149: ARRAY
37150: PUSH
37151: LD_VAR 0 2
37155: PUSH
37156: LD_VAR 0 4
37160: ARRAY
37161: NONEQUAL
37162: IFFALSE 37174
// begin result := false ;
37164: LD_ADDR_VAR 0 3
37168: PUSH
37169: LD_INT 0
37171: ST_TO_ADDR
// break ;
37172: GO 37176
// end ;
37174: GO 37137
37176: POP
37177: POP
// end else
37178: GO 37188
// result := false ;
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 0
37187: ST_TO_ADDR
// end ;
37188: LD_VAR 0 3
37192: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37193: LD_INT 0
37195: PPUSH
37196: PPUSH
// if not array1 or not array2 then
37197: LD_VAR 0 1
37201: NOT
37202: PUSH
37203: LD_VAR 0 2
37207: NOT
37208: OR
37209: IFFALSE 37213
// exit ;
37211: GO 37277
// result := true ;
37213: LD_ADDR_VAR 0 3
37217: PUSH
37218: LD_INT 1
37220: ST_TO_ADDR
// for i = 1 to array1 do
37221: LD_ADDR_VAR 0 4
37225: PUSH
37226: DOUBLE
37227: LD_INT 1
37229: DEC
37230: ST_TO_ADDR
37231: LD_VAR 0 1
37235: PUSH
37236: FOR_TO
37237: IFFALSE 37275
// if array1 [ i ] <> array2 [ i ] then
37239: LD_VAR 0 1
37243: PUSH
37244: LD_VAR 0 4
37248: ARRAY
37249: PUSH
37250: LD_VAR 0 2
37254: PUSH
37255: LD_VAR 0 4
37259: ARRAY
37260: NONEQUAL
37261: IFFALSE 37273
// begin result := false ;
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_INT 0
37270: ST_TO_ADDR
// break ;
37271: GO 37275
// end ;
37273: GO 37236
37275: POP
37276: POP
// end ;
37277: LD_VAR 0 3
37281: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37282: LD_INT 0
37284: PPUSH
37285: PPUSH
37286: PPUSH
// pom := GetBase ( fac ) ;
37287: LD_ADDR_VAR 0 5
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 274
37301: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37302: LD_ADDR_VAR 0 4
37306: PUSH
37307: LD_VAR 0 2
37311: PUSH
37312: LD_INT 1
37314: ARRAY
37315: PPUSH
37316: LD_VAR 0 2
37320: PUSH
37321: LD_INT 2
37323: ARRAY
37324: PPUSH
37325: LD_VAR 0 2
37329: PUSH
37330: LD_INT 3
37332: ARRAY
37333: PPUSH
37334: LD_VAR 0 2
37338: PUSH
37339: LD_INT 4
37341: ARRAY
37342: PPUSH
37343: CALL_OW 449
37347: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37348: LD_ADDR_VAR 0 3
37352: PUSH
37353: LD_VAR 0 5
37357: PPUSH
37358: LD_INT 1
37360: PPUSH
37361: CALL_OW 275
37365: PUSH
37366: LD_VAR 0 4
37370: PUSH
37371: LD_INT 1
37373: ARRAY
37374: GREATEREQUAL
37375: PUSH
37376: LD_VAR 0 5
37380: PPUSH
37381: LD_INT 2
37383: PPUSH
37384: CALL_OW 275
37388: PUSH
37389: LD_VAR 0 4
37393: PUSH
37394: LD_INT 2
37396: ARRAY
37397: GREATEREQUAL
37398: AND
37399: PUSH
37400: LD_VAR 0 5
37404: PPUSH
37405: LD_INT 3
37407: PPUSH
37408: CALL_OW 275
37412: PUSH
37413: LD_VAR 0 4
37417: PUSH
37418: LD_INT 3
37420: ARRAY
37421: GREATEREQUAL
37422: AND
37423: ST_TO_ADDR
// end ;
37424: LD_VAR 0 3
37428: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37429: LD_INT 0
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
// pom := GetBase ( building ) ;
37435: LD_ADDR_VAR 0 3
37439: PUSH
37440: LD_VAR 0 1
37444: PPUSH
37445: CALL_OW 274
37449: ST_TO_ADDR
// if not pom then
37450: LD_VAR 0 3
37454: NOT
37455: IFFALSE 37459
// exit ;
37457: GO 37629
// btype := GetBType ( building ) ;
37459: LD_ADDR_VAR 0 5
37463: PUSH
37464: LD_VAR 0 1
37468: PPUSH
37469: CALL_OW 266
37473: ST_TO_ADDR
// if btype = b_armoury then
37474: LD_VAR 0 5
37478: PUSH
37479: LD_INT 4
37481: EQUAL
37482: IFFALSE 37492
// btype := b_barracks ;
37484: LD_ADDR_VAR 0 5
37488: PUSH
37489: LD_INT 5
37491: ST_TO_ADDR
// if btype = b_depot then
37492: LD_VAR 0 5
37496: PUSH
37497: LD_INT 0
37499: EQUAL
37500: IFFALSE 37510
// btype := b_warehouse ;
37502: LD_ADDR_VAR 0 5
37506: PUSH
37507: LD_INT 1
37509: ST_TO_ADDR
// if btype = b_workshop then
37510: LD_VAR 0 5
37514: PUSH
37515: LD_INT 2
37517: EQUAL
37518: IFFALSE 37528
// btype := b_factory ;
37520: LD_ADDR_VAR 0 5
37524: PUSH
37525: LD_INT 3
37527: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37528: LD_ADDR_VAR 0 4
37532: PUSH
37533: LD_VAR 0 5
37537: PPUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 248
37547: PPUSH
37548: CALL_OW 450
37552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37553: LD_ADDR_VAR 0 2
37557: PUSH
37558: LD_VAR 0 3
37562: PPUSH
37563: LD_INT 1
37565: PPUSH
37566: CALL_OW 275
37570: PUSH
37571: LD_VAR 0 4
37575: PUSH
37576: LD_INT 1
37578: ARRAY
37579: GREATEREQUAL
37580: PUSH
37581: LD_VAR 0 3
37585: PPUSH
37586: LD_INT 2
37588: PPUSH
37589: CALL_OW 275
37593: PUSH
37594: LD_VAR 0 4
37598: PUSH
37599: LD_INT 2
37601: ARRAY
37602: GREATEREQUAL
37603: AND
37604: PUSH
37605: LD_VAR 0 3
37609: PPUSH
37610: LD_INT 3
37612: PPUSH
37613: CALL_OW 275
37617: PUSH
37618: LD_VAR 0 4
37622: PUSH
37623: LD_INT 3
37625: ARRAY
37626: GREATEREQUAL
37627: AND
37628: ST_TO_ADDR
// end ;
37629: LD_VAR 0 2
37633: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
37634: LD_INT 0
37636: PPUSH
37637: PPUSH
37638: PPUSH
// pom := GetBase ( building ) ;
37639: LD_ADDR_VAR 0 4
37643: PUSH
37644: LD_VAR 0 1
37648: PPUSH
37649: CALL_OW 274
37653: ST_TO_ADDR
// if not pom then
37654: LD_VAR 0 4
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37764
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37663: LD_ADDR_VAR 0 5
37667: PUSH
37668: LD_VAR 0 2
37672: PPUSH
37673: LD_VAR 0 1
37677: PPUSH
37678: CALL_OW 248
37682: PPUSH
37683: CALL_OW 450
37687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37688: LD_ADDR_VAR 0 3
37692: PUSH
37693: LD_VAR 0 4
37697: PPUSH
37698: LD_INT 1
37700: PPUSH
37701: CALL_OW 275
37705: PUSH
37706: LD_VAR 0 5
37710: PUSH
37711: LD_INT 1
37713: ARRAY
37714: GREATEREQUAL
37715: PUSH
37716: LD_VAR 0 4
37720: PPUSH
37721: LD_INT 2
37723: PPUSH
37724: CALL_OW 275
37728: PUSH
37729: LD_VAR 0 5
37733: PUSH
37734: LD_INT 2
37736: ARRAY
37737: GREATEREQUAL
37738: AND
37739: PUSH
37740: LD_VAR 0 4
37744: PPUSH
37745: LD_INT 3
37747: PPUSH
37748: CALL_OW 275
37752: PUSH
37753: LD_VAR 0 5
37757: PUSH
37758: LD_INT 3
37760: ARRAY
37761: GREATEREQUAL
37762: AND
37763: ST_TO_ADDR
// end ;
37764: LD_VAR 0 3
37768: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37769: LD_INT 0
37771: PPUSH
37772: PPUSH
37773: PPUSH
37774: PPUSH
37775: PPUSH
37776: PPUSH
37777: PPUSH
37778: PPUSH
37779: PPUSH
37780: PPUSH
37781: PPUSH
// result := false ;
37782: LD_ADDR_VAR 0 8
37786: PUSH
37787: LD_INT 0
37789: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37790: LD_VAR 0 5
37794: NOT
37795: PUSH
37796: LD_VAR 0 1
37800: NOT
37801: OR
37802: PUSH
37803: LD_VAR 0 2
37807: NOT
37808: OR
37809: PUSH
37810: LD_VAR 0 3
37814: NOT
37815: OR
37816: IFFALSE 37820
// exit ;
37818: GO 38634
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37820: LD_ADDR_VAR 0 14
37824: PUSH
37825: LD_VAR 0 1
37829: PPUSH
37830: LD_VAR 0 2
37834: PPUSH
37835: LD_VAR 0 3
37839: PPUSH
37840: LD_VAR 0 4
37844: PPUSH
37845: LD_VAR 0 5
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PPUSH
37854: CALL_OW 248
37858: PPUSH
37859: LD_INT 0
37861: PPUSH
37862: CALL 39867 0 6
37866: ST_TO_ADDR
// if not hexes then
37867: LD_VAR 0 14
37871: NOT
37872: IFFALSE 37876
// exit ;
37874: GO 38634
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37876: LD_ADDR_VAR 0 17
37880: PUSH
37881: LD_VAR 0 5
37885: PPUSH
37886: LD_INT 22
37888: PUSH
37889: LD_VAR 0 13
37893: PPUSH
37894: CALL_OW 255
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 30
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 30
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PPUSH
37935: CALL_OW 72
37939: ST_TO_ADDR
// for i = 1 to hexes do
37940: LD_ADDR_VAR 0 9
37944: PUSH
37945: DOUBLE
37946: LD_INT 1
37948: DEC
37949: ST_TO_ADDR
37950: LD_VAR 0 14
37954: PUSH
37955: FOR_TO
37956: IFFALSE 38632
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37958: LD_ADDR_VAR 0 13
37962: PUSH
37963: LD_VAR 0 14
37967: PUSH
37968: LD_VAR 0 9
37972: ARRAY
37973: PUSH
37974: LD_INT 1
37976: ARRAY
37977: PPUSH
37978: LD_VAR 0 14
37982: PUSH
37983: LD_VAR 0 9
37987: ARRAY
37988: PUSH
37989: LD_INT 2
37991: ARRAY
37992: PPUSH
37993: CALL_OW 428
37997: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37998: LD_VAR 0 14
38002: PUSH
38003: LD_VAR 0 9
38007: ARRAY
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 14
38017: PUSH
38018: LD_VAR 0 9
38022: ARRAY
38023: PUSH
38024: LD_INT 2
38026: ARRAY
38027: PPUSH
38028: CALL_OW 351
38032: PUSH
38033: LD_VAR 0 14
38037: PUSH
38038: LD_VAR 0 9
38042: ARRAY
38043: PUSH
38044: LD_INT 1
38046: ARRAY
38047: PPUSH
38048: LD_VAR 0 14
38052: PUSH
38053: LD_VAR 0 9
38057: ARRAY
38058: PUSH
38059: LD_INT 2
38061: ARRAY
38062: PPUSH
38063: CALL_OW 488
38067: NOT
38068: OR
38069: PUSH
38070: LD_VAR 0 13
38074: PPUSH
38075: CALL_OW 247
38079: PUSH
38080: LD_INT 3
38082: EQUAL
38083: OR
38084: IFFALSE 38090
// exit ;
38086: POP
38087: POP
38088: GO 38634
// if not tmp then
38090: LD_VAR 0 13
38094: NOT
38095: IFFALSE 38099
// continue ;
38097: GO 37955
// result := true ;
38099: LD_ADDR_VAR 0 8
38103: PUSH
38104: LD_INT 1
38106: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38107: LD_VAR 0 6
38111: PUSH
38112: LD_VAR 0 13
38116: PPUSH
38117: CALL_OW 247
38121: PUSH
38122: LD_INT 2
38124: EQUAL
38125: AND
38126: PUSH
38127: LD_VAR 0 13
38131: PPUSH
38132: CALL_OW 263
38136: PUSH
38137: LD_INT 1
38139: EQUAL
38140: AND
38141: IFFALSE 38305
// begin if IsDrivenBy ( tmp ) then
38143: LD_VAR 0 13
38147: PPUSH
38148: CALL_OW 311
38152: IFFALSE 38156
// continue ;
38154: GO 37955
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38156: LD_VAR 0 6
38160: PPUSH
38161: LD_INT 3
38163: PUSH
38164: LD_INT 60
38166: PUSH
38167: EMPTY
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 3
38176: PUSH
38177: LD_INT 55
38179: PUSH
38180: EMPTY
38181: LIST
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PPUSH
38191: CALL_OW 72
38195: IFFALSE 38303
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38197: LD_ADDR_VAR 0 18
38201: PUSH
38202: LD_VAR 0 6
38206: PPUSH
38207: LD_INT 3
38209: PUSH
38210: LD_INT 60
38212: PUSH
38213: EMPTY
38214: LIST
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: PUSH
38223: LD_INT 55
38225: PUSH
38226: EMPTY
38227: LIST
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PPUSH
38237: CALL_OW 72
38241: PUSH
38242: LD_INT 1
38244: ARRAY
38245: ST_TO_ADDR
// if IsInUnit ( driver ) then
38246: LD_VAR 0 18
38250: PPUSH
38251: CALL_OW 310
38255: IFFALSE 38266
// ComExit ( driver ) ;
38257: LD_VAR 0 18
38261: PPUSH
38262: CALL 63628 0 1
// AddComEnterUnit ( driver , tmp ) ;
38266: LD_VAR 0 18
38270: PPUSH
38271: LD_VAR 0 13
38275: PPUSH
38276: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38280: LD_VAR 0 18
38284: PPUSH
38285: LD_VAR 0 7
38289: PPUSH
38290: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38294: LD_VAR 0 18
38298: PPUSH
38299: CALL_OW 181
// end ; continue ;
38303: GO 37955
// end ; if not cleaners or not tmp in cleaners then
38305: LD_VAR 0 6
38309: NOT
38310: PUSH
38311: LD_VAR 0 13
38315: PUSH
38316: LD_VAR 0 6
38320: IN
38321: NOT
38322: OR
38323: IFFALSE 38630
// begin if dep then
38325: LD_VAR 0 17
38329: IFFALSE 38465
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38331: LD_ADDR_VAR 0 16
38335: PUSH
38336: LD_VAR 0 17
38340: PUSH
38341: LD_INT 1
38343: ARRAY
38344: PPUSH
38345: CALL_OW 250
38349: PPUSH
38350: LD_VAR 0 17
38354: PUSH
38355: LD_INT 1
38357: ARRAY
38358: PPUSH
38359: CALL_OW 254
38363: PPUSH
38364: LD_INT 5
38366: PPUSH
38367: CALL_OW 272
38371: PUSH
38372: LD_VAR 0 17
38376: PUSH
38377: LD_INT 1
38379: ARRAY
38380: PPUSH
38381: CALL_OW 251
38385: PPUSH
38386: LD_VAR 0 17
38390: PUSH
38391: LD_INT 1
38393: ARRAY
38394: PPUSH
38395: CALL_OW 254
38399: PPUSH
38400: LD_INT 5
38402: PPUSH
38403: CALL_OW 273
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38412: LD_VAR 0 16
38416: PUSH
38417: LD_INT 1
38419: ARRAY
38420: PPUSH
38421: LD_VAR 0 16
38425: PUSH
38426: LD_INT 2
38428: ARRAY
38429: PPUSH
38430: CALL_OW 488
38434: IFFALSE 38465
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38436: LD_VAR 0 13
38440: PPUSH
38441: LD_VAR 0 16
38445: PUSH
38446: LD_INT 1
38448: ARRAY
38449: PPUSH
38450: LD_VAR 0 16
38454: PUSH
38455: LD_INT 2
38457: ARRAY
38458: PPUSH
38459: CALL_OW 111
// continue ;
38463: GO 37955
// end ; end ; r := GetDir ( tmp ) ;
38465: LD_ADDR_VAR 0 15
38469: PUSH
38470: LD_VAR 0 13
38474: PPUSH
38475: CALL_OW 254
38479: ST_TO_ADDR
// if r = 5 then
38480: LD_VAR 0 15
38484: PUSH
38485: LD_INT 5
38487: EQUAL
38488: IFFALSE 38498
// r := 0 ;
38490: LD_ADDR_VAR 0 15
38494: PUSH
38495: LD_INT 0
38497: ST_TO_ADDR
// for j = r to 5 do
38498: LD_ADDR_VAR 0 10
38502: PUSH
38503: DOUBLE
38504: LD_VAR 0 15
38508: DEC
38509: ST_TO_ADDR
38510: LD_INT 5
38512: PUSH
38513: FOR_TO
38514: IFFALSE 38628
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38516: LD_ADDR_VAR 0 11
38520: PUSH
38521: LD_VAR 0 13
38525: PPUSH
38526: CALL_OW 250
38530: PPUSH
38531: LD_VAR 0 10
38535: PPUSH
38536: LD_INT 2
38538: PPUSH
38539: CALL_OW 272
38543: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38544: LD_ADDR_VAR 0 12
38548: PUSH
38549: LD_VAR 0 13
38553: PPUSH
38554: CALL_OW 251
38558: PPUSH
38559: LD_VAR 0 10
38563: PPUSH
38564: LD_INT 2
38566: PPUSH
38567: CALL_OW 273
38571: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38572: LD_VAR 0 11
38576: PPUSH
38577: LD_VAR 0 12
38581: PPUSH
38582: CALL_OW 488
38586: PUSH
38587: LD_VAR 0 11
38591: PPUSH
38592: LD_VAR 0 12
38596: PPUSH
38597: CALL_OW 428
38601: NOT
38602: AND
38603: IFFALSE 38626
// begin ComMoveXY ( tmp , _x , _y ) ;
38605: LD_VAR 0 13
38609: PPUSH
38610: LD_VAR 0 11
38614: PPUSH
38615: LD_VAR 0 12
38619: PPUSH
38620: CALL_OW 111
// break ;
38624: GO 38628
// end ; end ;
38626: GO 38513
38628: POP
38629: POP
// end ; end ;
38630: GO 37955
38632: POP
38633: POP
// end ;
38634: LD_VAR 0 8
38638: RET
// export function BuildingTechInvented ( side , btype ) ; begin
38639: LD_INT 0
38641: PPUSH
// result := true ;
38642: LD_ADDR_VAR 0 3
38646: PUSH
38647: LD_INT 1
38649: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
38650: LD_VAR 0 2
38654: PUSH
38655: LD_INT 24
38657: DOUBLE
38658: EQUAL
38659: IFTRUE 38669
38661: LD_INT 33
38663: DOUBLE
38664: EQUAL
38665: IFTRUE 38669
38667: GO 38694
38669: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
38670: LD_ADDR_VAR 0 3
38674: PUSH
38675: LD_INT 32
38677: PPUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 321
38687: PUSH
38688: LD_INT 2
38690: EQUAL
38691: ST_TO_ADDR
38692: GO 39010
38694: LD_INT 20
38696: DOUBLE
38697: EQUAL
38698: IFTRUE 38702
38700: GO 38727
38702: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
38703: LD_ADDR_VAR 0 3
38707: PUSH
38708: LD_INT 6
38710: PPUSH
38711: LD_VAR 0 1
38715: PPUSH
38716: CALL_OW 321
38720: PUSH
38721: LD_INT 2
38723: EQUAL
38724: ST_TO_ADDR
38725: GO 39010
38727: LD_INT 22
38729: DOUBLE
38730: EQUAL
38731: IFTRUE 38741
38733: LD_INT 36
38735: DOUBLE
38736: EQUAL
38737: IFTRUE 38741
38739: GO 38766
38741: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38742: LD_ADDR_VAR 0 3
38746: PUSH
38747: LD_INT 15
38749: PPUSH
38750: LD_VAR 0 1
38754: PPUSH
38755: CALL_OW 321
38759: PUSH
38760: LD_INT 2
38762: EQUAL
38763: ST_TO_ADDR
38764: GO 39010
38766: LD_INT 30
38768: DOUBLE
38769: EQUAL
38770: IFTRUE 38774
38772: GO 38799
38774: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38775: LD_ADDR_VAR 0 3
38779: PUSH
38780: LD_INT 20
38782: PPUSH
38783: LD_VAR 0 1
38787: PPUSH
38788: CALL_OW 321
38792: PUSH
38793: LD_INT 2
38795: EQUAL
38796: ST_TO_ADDR
38797: GO 39010
38799: LD_INT 28
38801: DOUBLE
38802: EQUAL
38803: IFTRUE 38813
38805: LD_INT 21
38807: DOUBLE
38808: EQUAL
38809: IFTRUE 38813
38811: GO 38838
38813: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38814: LD_ADDR_VAR 0 3
38818: PUSH
38819: LD_INT 21
38821: PPUSH
38822: LD_VAR 0 1
38826: PPUSH
38827: CALL_OW 321
38831: PUSH
38832: LD_INT 2
38834: EQUAL
38835: ST_TO_ADDR
38836: GO 39010
38838: LD_INT 16
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38846
38844: GO 38871
38846: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38847: LD_ADDR_VAR 0 3
38851: PUSH
38852: LD_INT 84
38854: PPUSH
38855: LD_VAR 0 1
38859: PPUSH
38860: CALL_OW 321
38864: PUSH
38865: LD_INT 2
38867: EQUAL
38868: ST_TO_ADDR
38869: GO 39010
38871: LD_INT 19
38873: DOUBLE
38874: EQUAL
38875: IFTRUE 38885
38877: LD_INT 23
38879: DOUBLE
38880: EQUAL
38881: IFTRUE 38885
38883: GO 38910
38885: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38886: LD_ADDR_VAR 0 3
38890: PUSH
38891: LD_INT 83
38893: PPUSH
38894: LD_VAR 0 1
38898: PPUSH
38899: CALL_OW 321
38903: PUSH
38904: LD_INT 2
38906: EQUAL
38907: ST_TO_ADDR
38908: GO 39010
38910: LD_INT 17
38912: DOUBLE
38913: EQUAL
38914: IFTRUE 38918
38916: GO 38943
38918: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38919: LD_ADDR_VAR 0 3
38923: PUSH
38924: LD_INT 39
38926: PPUSH
38927: LD_VAR 0 1
38931: PPUSH
38932: CALL_OW 321
38936: PUSH
38937: LD_INT 2
38939: EQUAL
38940: ST_TO_ADDR
38941: GO 39010
38943: LD_INT 18
38945: DOUBLE
38946: EQUAL
38947: IFTRUE 38951
38949: GO 38976
38951: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38952: LD_ADDR_VAR 0 3
38956: PUSH
38957: LD_INT 40
38959: PPUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: CALL_OW 321
38969: PUSH
38970: LD_INT 2
38972: EQUAL
38973: ST_TO_ADDR
38974: GO 39010
38976: LD_INT 27
38978: DOUBLE
38979: EQUAL
38980: IFTRUE 38984
38982: GO 39009
38984: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38985: LD_ADDR_VAR 0 3
38989: PUSH
38990: LD_INT 35
38992: PPUSH
38993: LD_VAR 0 1
38997: PPUSH
38998: CALL_OW 321
39002: PUSH
39003: LD_INT 2
39005: EQUAL
39006: ST_TO_ADDR
39007: GO 39010
39009: POP
// end ;
39010: LD_VAR 0 3
39014: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39015: LD_INT 0
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
// result := false ;
39028: LD_ADDR_VAR 0 6
39032: PUSH
39033: LD_INT 0
39035: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39036: LD_VAR 0 1
39040: NOT
39041: PUSH
39042: LD_VAR 0 1
39046: PPUSH
39047: CALL_OW 266
39051: PUSH
39052: LD_INT 0
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: IN
39062: NOT
39063: OR
39064: PUSH
39065: LD_VAR 0 2
39069: NOT
39070: OR
39071: PUSH
39072: LD_VAR 0 5
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 2
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: LD_INT 4
39091: PUSH
39092: LD_INT 5
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: IN
39103: NOT
39104: OR
39105: PUSH
39106: LD_VAR 0 3
39110: PPUSH
39111: LD_VAR 0 4
39115: PPUSH
39116: CALL_OW 488
39120: NOT
39121: OR
39122: IFFALSE 39126
// exit ;
39124: GO 39862
// side := GetSide ( depot ) ;
39126: LD_ADDR_VAR 0 9
39130: PUSH
39131: LD_VAR 0 1
39135: PPUSH
39136: CALL_OW 255
39140: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39141: LD_VAR 0 9
39145: PPUSH
39146: LD_VAR 0 2
39150: PPUSH
39151: CALL 38639 0 2
39155: NOT
39156: IFFALSE 39160
// exit ;
39158: GO 39862
// pom := GetBase ( depot ) ;
39160: LD_ADDR_VAR 0 10
39164: PUSH
39165: LD_VAR 0 1
39169: PPUSH
39170: CALL_OW 274
39174: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39175: LD_ADDR_VAR 0 11
39179: PUSH
39180: LD_VAR 0 2
39184: PPUSH
39185: LD_VAR 0 1
39189: PPUSH
39190: CALL_OW 248
39194: PPUSH
39195: CALL_OW 450
39199: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39200: LD_VAR 0 10
39204: PPUSH
39205: LD_INT 1
39207: PPUSH
39208: CALL_OW 275
39212: PUSH
39213: LD_VAR 0 11
39217: PUSH
39218: LD_INT 1
39220: ARRAY
39221: GREATEREQUAL
39222: PUSH
39223: LD_VAR 0 10
39227: PPUSH
39228: LD_INT 2
39230: PPUSH
39231: CALL_OW 275
39235: PUSH
39236: LD_VAR 0 11
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: GREATEREQUAL
39245: AND
39246: PUSH
39247: LD_VAR 0 10
39251: PPUSH
39252: LD_INT 3
39254: PPUSH
39255: CALL_OW 275
39259: PUSH
39260: LD_VAR 0 11
39264: PUSH
39265: LD_INT 3
39267: ARRAY
39268: GREATEREQUAL
39269: AND
39270: NOT
39271: IFFALSE 39275
// exit ;
39273: GO 39862
// if GetBType ( depot ) = b_depot then
39275: LD_VAR 0 1
39279: PPUSH
39280: CALL_OW 266
39284: PUSH
39285: LD_INT 0
39287: EQUAL
39288: IFFALSE 39300
// dist := 28 else
39290: LD_ADDR_VAR 0 14
39294: PUSH
39295: LD_INT 28
39297: ST_TO_ADDR
39298: GO 39308
// dist := 36 ;
39300: LD_ADDR_VAR 0 14
39304: PUSH
39305: LD_INT 36
39307: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39308: LD_VAR 0 1
39312: PPUSH
39313: LD_VAR 0 3
39317: PPUSH
39318: LD_VAR 0 4
39322: PPUSH
39323: CALL_OW 297
39327: PUSH
39328: LD_VAR 0 14
39332: GREATER
39333: IFFALSE 39337
// exit ;
39335: GO 39862
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39337: LD_ADDR_VAR 0 12
39341: PUSH
39342: LD_VAR 0 2
39346: PPUSH
39347: LD_VAR 0 3
39351: PPUSH
39352: LD_VAR 0 4
39356: PPUSH
39357: LD_VAR 0 5
39361: PPUSH
39362: LD_VAR 0 1
39366: PPUSH
39367: CALL_OW 248
39371: PPUSH
39372: LD_INT 0
39374: PPUSH
39375: CALL 39867 0 6
39379: ST_TO_ADDR
// if not hexes then
39380: LD_VAR 0 12
39384: NOT
39385: IFFALSE 39389
// exit ;
39387: GO 39862
// hex := GetHexInfo ( x , y ) ;
39389: LD_ADDR_VAR 0 15
39393: PUSH
39394: LD_VAR 0 3
39398: PPUSH
39399: LD_VAR 0 4
39403: PPUSH
39404: CALL_OW 546
39408: ST_TO_ADDR
// if hex [ 1 ] then
39409: LD_VAR 0 15
39413: PUSH
39414: LD_INT 1
39416: ARRAY
39417: IFFALSE 39421
// exit ;
39419: GO 39862
// height := hex [ 2 ] ;
39421: LD_ADDR_VAR 0 13
39425: PUSH
39426: LD_VAR 0 15
39430: PUSH
39431: LD_INT 2
39433: ARRAY
39434: ST_TO_ADDR
// for i = 1 to hexes do
39435: LD_ADDR_VAR 0 7
39439: PUSH
39440: DOUBLE
39441: LD_INT 1
39443: DEC
39444: ST_TO_ADDR
39445: LD_VAR 0 12
39449: PUSH
39450: FOR_TO
39451: IFFALSE 39781
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39453: LD_VAR 0 12
39457: PUSH
39458: LD_VAR 0 7
39462: ARRAY
39463: PUSH
39464: LD_INT 1
39466: ARRAY
39467: PPUSH
39468: LD_VAR 0 12
39472: PUSH
39473: LD_VAR 0 7
39477: ARRAY
39478: PUSH
39479: LD_INT 2
39481: ARRAY
39482: PPUSH
39483: CALL_OW 488
39487: NOT
39488: PUSH
39489: LD_VAR 0 12
39493: PUSH
39494: LD_VAR 0 7
39498: ARRAY
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: LD_VAR 0 12
39508: PUSH
39509: LD_VAR 0 7
39513: ARRAY
39514: PUSH
39515: LD_INT 2
39517: ARRAY
39518: PPUSH
39519: CALL_OW 428
39523: PUSH
39524: LD_INT 0
39526: GREATER
39527: OR
39528: PUSH
39529: LD_VAR 0 12
39533: PUSH
39534: LD_VAR 0 7
39538: ARRAY
39539: PUSH
39540: LD_INT 1
39542: ARRAY
39543: PPUSH
39544: LD_VAR 0 12
39548: PUSH
39549: LD_VAR 0 7
39553: ARRAY
39554: PUSH
39555: LD_INT 2
39557: ARRAY
39558: PPUSH
39559: CALL_OW 351
39563: OR
39564: IFFALSE 39570
// exit ;
39566: POP
39567: POP
39568: GO 39862
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39570: LD_ADDR_VAR 0 8
39574: PUSH
39575: LD_VAR 0 12
39579: PUSH
39580: LD_VAR 0 7
39584: ARRAY
39585: PUSH
39586: LD_INT 1
39588: ARRAY
39589: PPUSH
39590: LD_VAR 0 12
39594: PUSH
39595: LD_VAR 0 7
39599: ARRAY
39600: PUSH
39601: LD_INT 2
39603: ARRAY
39604: PPUSH
39605: CALL_OW 546
39609: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39610: LD_VAR 0 8
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: PUSH
39619: LD_VAR 0 8
39623: PUSH
39624: LD_INT 2
39626: ARRAY
39627: PUSH
39628: LD_VAR 0 13
39632: PUSH
39633: LD_INT 2
39635: PLUS
39636: GREATER
39637: OR
39638: PUSH
39639: LD_VAR 0 8
39643: PUSH
39644: LD_INT 2
39646: ARRAY
39647: PUSH
39648: LD_VAR 0 13
39652: PUSH
39653: LD_INT 2
39655: MINUS
39656: LESS
39657: OR
39658: PUSH
39659: LD_VAR 0 8
39663: PUSH
39664: LD_INT 3
39666: ARRAY
39667: PUSH
39668: LD_INT 0
39670: PUSH
39671: LD_INT 8
39673: PUSH
39674: LD_INT 9
39676: PUSH
39677: LD_INT 10
39679: PUSH
39680: LD_INT 11
39682: PUSH
39683: LD_INT 12
39685: PUSH
39686: LD_INT 13
39688: PUSH
39689: LD_INT 16
39691: PUSH
39692: LD_INT 17
39694: PUSH
39695: LD_INT 18
39697: PUSH
39698: LD_INT 19
39700: PUSH
39701: LD_INT 20
39703: PUSH
39704: LD_INT 21
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: IN
39722: NOT
39723: OR
39724: PUSH
39725: LD_VAR 0 8
39729: PUSH
39730: LD_INT 5
39732: ARRAY
39733: NOT
39734: OR
39735: PUSH
39736: LD_VAR 0 8
39740: PUSH
39741: LD_INT 6
39743: ARRAY
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: LD_INT 7
39753: PUSH
39754: LD_INT 9
39756: PUSH
39757: LD_INT 10
39759: PUSH
39760: LD_INT 11
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: IN
39771: NOT
39772: OR
39773: IFFALSE 39779
// exit ;
39775: POP
39776: POP
39777: GO 39862
// end ;
39779: GO 39450
39781: POP
39782: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39783: LD_VAR 0 9
39787: PPUSH
39788: LD_VAR 0 3
39792: PPUSH
39793: LD_VAR 0 4
39797: PPUSH
39798: LD_INT 20
39800: PPUSH
39801: CALL 31814 0 4
39805: PUSH
39806: LD_INT 4
39808: ARRAY
39809: IFFALSE 39813
// exit ;
39811: GO 39862
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39813: LD_VAR 0 2
39817: PUSH
39818: LD_INT 29
39820: PUSH
39821: LD_INT 30
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: IN
39828: PUSH
39829: LD_VAR 0 3
39833: PPUSH
39834: LD_VAR 0 4
39838: PPUSH
39839: LD_VAR 0 9
39843: PPUSH
39844: CALL_OW 440
39848: NOT
39849: AND
39850: IFFALSE 39854
// exit ;
39852: GO 39862
// result := true ;
39854: LD_ADDR_VAR 0 6
39858: PUSH
39859: LD_INT 1
39861: ST_TO_ADDR
// end ;
39862: LD_VAR 0 6
39866: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39867: LD_INT 0
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
39892: PPUSH
39893: PPUSH
39894: PPUSH
39895: PPUSH
39896: PPUSH
39897: PPUSH
39898: PPUSH
39899: PPUSH
39900: PPUSH
39901: PPUSH
39902: PPUSH
39903: PPUSH
39904: PPUSH
39905: PPUSH
39906: PPUSH
39907: PPUSH
39908: PPUSH
39909: PPUSH
39910: PPUSH
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
39920: PPUSH
39921: PPUSH
39922: PPUSH
39923: PPUSH
39924: PPUSH
39925: PPUSH
39926: PPUSH
// result = [ ] ;
39927: LD_ADDR_VAR 0 7
39931: PUSH
39932: EMPTY
39933: ST_TO_ADDR
// temp_list = [ ] ;
39934: LD_ADDR_VAR 0 9
39938: PUSH
39939: EMPTY
39940: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39941: LD_VAR 0 4
39945: PUSH
39946: LD_INT 0
39948: PUSH
39949: LD_INT 1
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: LD_INT 4
39960: PUSH
39961: LD_INT 5
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: IN
39972: NOT
39973: PUSH
39974: LD_VAR 0 1
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 1
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: IN
39989: PUSH
39990: LD_VAR 0 5
39994: PUSH
39995: LD_INT 1
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: LD_INT 3
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: LIST
40008: IN
40009: NOT
40010: AND
40011: OR
40012: IFFALSE 40016
// exit ;
40014: GO 58407
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40016: LD_VAR 0 1
40020: PUSH
40021: LD_INT 6
40023: PUSH
40024: LD_INT 7
40026: PUSH
40027: LD_INT 8
40029: PUSH
40030: LD_INT 13
40032: PUSH
40033: LD_INT 12
40035: PUSH
40036: LD_INT 15
40038: PUSH
40039: LD_INT 11
40041: PUSH
40042: LD_INT 14
40044: PUSH
40045: LD_INT 10
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: IN
40059: IFFALSE 40069
// btype = b_lab ;
40061: LD_ADDR_VAR 0 1
40065: PUSH
40066: LD_INT 6
40068: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40069: LD_VAR 0 6
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: LD_INT 2
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: IN
40088: NOT
40089: PUSH
40090: LD_VAR 0 1
40094: PUSH
40095: LD_INT 0
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: LD_INT 6
40109: PUSH
40110: LD_INT 36
40112: PUSH
40113: LD_INT 4
40115: PUSH
40116: LD_INT 5
40118: PUSH
40119: LD_INT 31
40121: PUSH
40122: LD_INT 32
40124: PUSH
40125: LD_INT 33
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: IN
40141: NOT
40142: PUSH
40143: LD_VAR 0 6
40147: PUSH
40148: LD_INT 1
40150: EQUAL
40151: AND
40152: OR
40153: PUSH
40154: LD_VAR 0 1
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: IN
40169: NOT
40170: PUSH
40171: LD_VAR 0 6
40175: PUSH
40176: LD_INT 2
40178: EQUAL
40179: AND
40180: OR
40181: IFFALSE 40191
// mode = 0 ;
40183: LD_ADDR_VAR 0 6
40187: PUSH
40188: LD_INT 0
40190: ST_TO_ADDR
// case mode of 0 :
40191: LD_VAR 0 6
40195: PUSH
40196: LD_INT 0
40198: DOUBLE
40199: EQUAL
40200: IFTRUE 40204
40202: GO 51657
40204: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40205: LD_ADDR_VAR 0 11
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 1
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: NEG
40287: PUSH
40288: LD_INT 2
40290: NEG
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 2
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 1
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 0
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 1
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40398: LD_ADDR_VAR 0 12
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: LD_INT 1
40418: NEG
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: LD_INT 1
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 3
40555: NEG
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 3
40566: NEG
40567: PUSH
40568: LD_INT 1
40570: NEG
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40594: LD_ADDR_VAR 0 13
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 0
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: LD_INT 1
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: LD_INT 2
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: LD_INT 2
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 2
40741: NEG
40742: PUSH
40743: LD_INT 3
40745: NEG
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 3
40753: NEG
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: NEG
40766: PUSH
40767: LD_INT 3
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40793: LD_ADDR_VAR 0 14
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: LD_INT 2
40878: NEG
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 2
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 1
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 3
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 3
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40989: LD_ADDR_VAR 0 15
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 1
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: LD_INT 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: LD_INT 1
41127: NEG
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 3
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41182: LD_ADDR_VAR 0 16
41186: PUSH
41187: LD_INT 0
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 0
41199: PUSH
41200: LD_INT 1
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 1
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: NEG
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: LD_INT 2
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 3
41329: PUSH
41330: LD_INT 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41375: LD_ADDR_VAR 0 17
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 1
41395: NEG
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 1
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: NEG
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: LD_INT 1
41456: NEG
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 1
41482: NEG
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 2
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 2
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: LD_INT 2
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: LD_INT 2
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 2
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 1
41540: NEG
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 2
41551: NEG
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 2
41562: NEG
41563: PUSH
41564: LD_INT 1
41566: NEG
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: LD_INT 2
41574: NEG
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41605: LD_ADDR_VAR 0 18
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 0
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: PUSH
41741: LD_INT 2
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: NEG
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 2
41792: NEG
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: NEG
41805: PUSH
41806: LD_INT 2
41808: NEG
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41835: LD_ADDR_VAR 0 19
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 0
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: LD_INT 1
41855: NEG
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 1
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: LD_INT 1
41942: NEG
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 2
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42065: LD_ADDR_VAR 0 20
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 0
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 1
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 0
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 2
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 0
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: PUSH
42201: LD_INT 2
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: PUSH
42211: LD_INT 2
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 0
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 1
42230: NEG
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: NEG
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 2
42264: NEG
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42295: LD_ADDR_VAR 0 21
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: LD_INT 0
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 0
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: NEG
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: NEG
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: LD_INT 2
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: LD_INT 0
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: LD_INT 2
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 2
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: NEG
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 2
42494: NEG
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42525: LD_ADDR_VAR 0 22
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 1
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: NEG
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: NEG
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: LD_INT 2
42621: NEG
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: LD_INT 0
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 2
42650: PUSH
42651: LD_INT 1
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: NEG
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 2
42724: NEG
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42755: LD_ADDR_VAR 0 23
42759: PUSH
42760: LD_INT 0
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 0
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 2
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 2
42870: PUSH
42871: LD_INT 0
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 2
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 2
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 1
42920: NEG
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: LD_INT 3
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: LD_INT 1
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43035: LD_ADDR_VAR 0 24
43039: PUSH
43040: LD_INT 0
43042: PUSH
43043: LD_INT 0
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: LD_INT 1
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 1
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 2
43131: NEG
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 2
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: LD_INT 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 1
43200: NEG
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 2
43211: NEG
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 3
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43311: LD_ADDR_VAR 0 25
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: LD_INT 1
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 2
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 2
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 1
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: NEG
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 3
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 3
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 3
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43585: LD_ADDR_VAR 0 26
43589: PUSH
43590: LD_INT 0
43592: PUSH
43593: LD_INT 0
43595: PUSH
43596: EMPTY
43597: LIST
43598: LIST
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: LD_INT 1
43605: NEG
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 1
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 1
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: NEG
43644: PUSH
43645: LD_INT 0
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 0
43678: PUSH
43679: LD_INT 2
43681: NEG
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 2
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: LD_INT 2
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 2
43772: NEG
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 2
43784: NEG
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: LD_INT 3
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 2
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43861: LD_ADDR_VAR 0 27
43865: PUSH
43866: LD_INT 0
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 0
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: LD_INT 1
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 1
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 2
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 2
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: LD_INT 2
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: NEG
44027: PUSH
44028: LD_INT 1
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: NEG
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44141: LD_ADDR_VAR 0 28
44145: PUSH
44146: LD_INT 0
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: NEG
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 2
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: LD_INT 1
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: NEG
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: LD_INT 3
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 3
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 3
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 3
44388: NEG
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44423: LD_ADDR_VAR 0 29
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: LD_INT 1
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: LD_INT 2
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 0
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: LD_INT 1
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 1
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 2
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 1
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 2
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: NEG
44614: PUSH
44615: LD_INT 3
44617: NEG
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: LD_INT 1
44628: NEG
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 3
44636: PUSH
44637: LD_INT 1
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 3
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: LIST
44701: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44702: LD_ADDR_VAR 0 30
44706: PUSH
44707: LD_INT 0
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 1
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 1
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 2
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 1
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: PUSH
44818: LD_INT 0
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: LD_INT 2
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 2
44879: NEG
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: LD_INT 3
44895: NEG
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: LD_INT 2
44906: NEG
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44980: LD_ADDR_VAR 0 31
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: LD_INT 1
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: LD_INT 1
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: NEG
45062: PUSH
45063: LD_INT 2
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: LD_INT 1
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 2
45084: PUSH
45085: LD_INT 0
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 2
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: PUSH
45105: LD_INT 2
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 2
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: NEG
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 2
45157: NEG
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: LD_INT 3
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 3
45223: NEG
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45258: LD_ADDR_VAR 0 32
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 0
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: NEG
45340: PUSH
45341: LD_INT 2
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 2
45354: NEG
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: NEG
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 2
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 3
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: LD_INT 3
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 3
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45536: LD_ADDR_VAR 0 33
45540: PUSH
45541: LD_INT 0
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 2
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: NEG
45727: PUSH
45728: LD_INT 3
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 1
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 3
45749: PUSH
45750: LD_INT 1
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 3
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45815: LD_ADDR_VAR 0 34
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 0
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: LD_INT 1
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 2
45900: NEG
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 2
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: NEG
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: LD_INT 3
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 2
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 3
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 3
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: NEG
46050: PUSH
46051: LD_INT 1
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46095: LD_ADDR_VAR 0 35
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 2
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46207: LD_ADDR_VAR 0 36
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: LD_INT 0
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46319: LD_ADDR_VAR 0 37
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 1
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46431: LD_ADDR_VAR 0 38
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46543: LD_ADDR_VAR 0 39
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 1
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 2
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46655: LD_ADDR_VAR 0 40
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 1
46713: NEG
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 1
46724: NEG
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: LD_INT 1
46739: NEG
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46767: LD_ADDR_VAR 0 41
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: PUSH
46892: LD_INT 2
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: LD_INT 2
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 2
46957: NEG
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 3
47000: PUSH
47001: LD_INT 2
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 3
47041: NEG
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 3
47052: NEG
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: LD_INT 2
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: LD_INT 3
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47117: LD_ADDR_VAR 0 42
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: LD_INT 0
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: NEG
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: LD_INT 2
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 2
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: NEG
47284: PUSH
47285: LD_INT 1
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 2
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: LD_INT 3
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: LD_INT 3
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 2
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: NEG
47427: PUSH
47428: LD_INT 3
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47467: LD_ADDR_VAR 0 43
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: NEG
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 2
47644: NEG
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 3
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 3
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 0
47731: PUSH
47732: LD_INT 3
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: NEG
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: NEG
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 3
47774: NEG
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47815: LD_ADDR_VAR 0 44
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: NEG
47994: PUSH
47995: LD_INT 2
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: NEG
48006: PUSH
48007: LD_INT 3
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 2
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 3
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 3
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: PUSH
48059: LD_INT 3
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 3
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: LD_INT 1
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 3
48089: NEG
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 3
48112: NEG
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 3
48124: NEG
48125: PUSH
48126: LD_INT 3
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48165: LD_ADDR_VAR 0 45
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 0
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 0
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 1
48246: NEG
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 2
48280: PUSH
48281: LD_INT 1
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: LD_INT 2
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: NEG
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: NEG
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: LD_INT 2
48347: NEG
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 3
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 3
48382: NEG
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: LD_INT 2
48393: NEG
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: LD_INT 2
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 3
48411: PUSH
48412: LD_INT 3
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 3
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: LD_INT 3
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48515: LD_ADDR_VAR 0 46
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: NEG
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 1
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: NEG
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: NEG
48705: PUSH
48706: LD_INT 3
48708: NEG
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 3
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: LD_INT 2
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 3
48749: PUSH
48750: LD_INT 0
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 3
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: LD_INT 2
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 2
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 3
48811: NEG
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48863: LD_ADDR_VAR 0 47
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 0
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: NEG
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 2
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49014: LD_ADDR_VAR 0 48
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: LD_INT 1
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 1
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: NEG
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 1
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49161: LD_ADDR_VAR 0 49
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: NEG
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 2
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49305: LD_ADDR_VAR 0 50
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: LD_INT 1
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49449: LD_ADDR_VAR 0 51
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 0
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: LD_INT 1
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 0
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49596: LD_ADDR_VAR 0 52
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 1
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49747: LD_ADDR_VAR 0 53
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 0
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 2
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 2
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 0
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 2
49934: NEG
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: NEG
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49977: LD_ADDR_VAR 0 54
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: LD_INT 1
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: PUSH
50123: LD_INT 2
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 2
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: LD_INT 1
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50207: LD_ADDR_VAR 0 55
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 0
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 0
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 1
50352: PUSH
50353: LD_INT 2
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: LD_INT 2
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 2
50383: NEG
50384: PUSH
50385: LD_INT 0
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 2
50406: NEG
50407: PUSH
50408: LD_INT 2
50410: NEG
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50437: LD_ADDR_VAR 0 56
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 1
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 1
50506: NEG
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 2
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 2
50562: PUSH
50563: LD_INT 1
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: LD_INT 2
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 0
50592: PUSH
50593: LD_INT 2
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: LD_INT 2
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50667: LD_ADDR_VAR 0 57
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 2
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 0
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: LD_INT 1
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 2
50843: NEG
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 2
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50897: LD_ADDR_VAR 0 58
50901: PUSH
50902: LD_INT 0
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 2
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 2
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51127: LD_ADDR_VAR 0 59
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: NEG
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51215: LD_ADDR_VAR 0 60
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 0
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 1
51273: NEG
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51303: LD_ADDR_VAR 0 61
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 1
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: NEG
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51391: LD_ADDR_VAR 0 62
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 0
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: LD_INT 1
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: NEG
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51479: LD_ADDR_VAR 0 63
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51567: LD_ADDR_VAR 0 64
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 1
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: ST_TO_ADDR
// end ; 1 :
51655: GO 57552
51657: LD_INT 1
51659: DOUBLE
51660: EQUAL
51661: IFTRUE 51665
51663: GO 54288
51665: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51666: LD_ADDR_VAR 0 11
51670: PUSH
51671: LD_INT 1
51673: NEG
51674: PUSH
51675: LD_INT 3
51677: NEG
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 0
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 2
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: LIST
51709: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51710: LD_ADDR_VAR 0 12
51714: PUSH
51715: LD_INT 2
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 3
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51751: LD_ADDR_VAR 0 13
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 3
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51791: LD_ADDR_VAR 0 14
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: LD_INT 3
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: LIST
51831: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51832: LD_ADDR_VAR 0 15
51836: PUSH
51837: LD_INT 2
51839: NEG
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 3
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: LIST
51875: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51876: LD_ADDR_VAR 0 16
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 3
51895: NEG
51896: PUSH
51897: LD_INT 2
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: LD_INT 3
51911: NEG
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51922: LD_ADDR_VAR 0 17
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: LD_INT 3
51933: NEG
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51966: LD_ADDR_VAR 0 18
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: LD_INT 1
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52007: LD_ADDR_VAR 0 19
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 3
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52047: LD_ADDR_VAR 0 20
52051: PUSH
52052: LD_INT 1
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 2
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52088: LD_ADDR_VAR 0 21
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 3
52106: NEG
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: NEG
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: LIST
52131: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52132: LD_ADDR_VAR 0 22
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 3
52151: NEG
52152: PUSH
52153: LD_INT 2
52155: NEG
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 3
52167: NEG
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: LIST
52177: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52178: LD_ADDR_VAR 0 23
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 3
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: LD_INT 4
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: LD_INT 3
52211: NEG
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52222: LD_ADDR_VAR 0 24
52226: PUSH
52227: LD_INT 3
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52263: LD_ADDR_VAR 0 25
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 4
52280: PUSH
52281: LD_INT 3
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52303: LD_ADDR_VAR 0 26
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 4
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 3
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52344: LD_ADDR_VAR 0 27
52348: PUSH
52349: LD_INT 3
52351: NEG
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 3
52362: NEG
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 4
52373: NEG
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52388: LD_ADDR_VAR 0 28
52392: PUSH
52393: LD_INT 3
52395: NEG
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: NEG
52408: PUSH
52409: LD_INT 4
52411: NEG
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 4
52419: NEG
52420: PUSH
52421: LD_INT 3
52423: NEG
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52434: LD_ADDR_VAR 0 29
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 3
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: LD_INT 4
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: LD_INT 4
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: LD_INT 3
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 5
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: LD_INT 5
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: LD_INT 4
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 6
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: LD_INT 6
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: LD_INT 5
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52589: LD_ADDR_VAR 0 30
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 3
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 3
52627: PUSH
52628: LD_INT 1
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 4
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 4
52648: PUSH
52649: LD_INT 1
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 4
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 5
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 5
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 6
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 6
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52732: LD_ADDR_VAR 0 31
52736: PUSH
52737: LD_INT 3
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 2
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: LD_INT 4
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 3
52789: PUSH
52790: LD_INT 4
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 5
52799: PUSH
52800: LD_INT 4
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 5
52809: PUSH
52810: LD_INT 5
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 5
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 6
52829: PUSH
52830: LD_INT 5
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 6
52839: PUSH
52840: LD_INT 6
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 5
52849: PUSH
52850: LD_INT 6
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52871: LD_ADDR_VAR 0 32
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 3
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 3
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 4
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 4
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 5
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 5
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 4
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: PUSH
52972: LD_INT 6
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 6
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: LD_INT 5
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53014: LD_ADDR_VAR 0 33
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 3
53055: NEG
53056: PUSH
53057: LD_INT 1
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 4
53066: NEG
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 4
53077: NEG
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 4
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 5
53100: NEG
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 5
53111: NEG
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 5
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 6
53134: NEG
53135: PUSH
53136: LD_INT 0
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 6
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53169: LD_ADDR_VAR 0 34
53173: PUSH
53174: LD_INT 2
53176: NEG
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 3
53200: NEG
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 3
53212: NEG
53213: PUSH
53214: LD_INT 4
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 4
53224: NEG
53225: PUSH
53226: LD_INT 3
53228: NEG
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 4
53236: NEG
53237: PUSH
53238: LD_INT 4
53240: NEG
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 4
53248: NEG
53249: PUSH
53250: LD_INT 5
53252: NEG
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 5
53260: NEG
53261: PUSH
53262: LD_INT 4
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 5
53272: NEG
53273: PUSH
53274: LD_INT 5
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 5
53284: NEG
53285: PUSH
53286: LD_INT 6
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 6
53296: NEG
53297: PUSH
53298: LD_INT 5
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 6
53308: NEG
53309: PUSH
53310: LD_INT 6
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53332: LD_ADDR_VAR 0 41
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: LD_INT 2
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 3
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: PUSH
53363: LD_INT 2
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: LIST
53375: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53376: LD_ADDR_VAR 0 42
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53417: LD_ADDR_VAR 0 43
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 3
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53457: LD_ADDR_VAR 0 44
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: LD_INT 2
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53498: LD_ADDR_VAR 0 45
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 3
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: LIST
53541: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53542: LD_ADDR_VAR 0 46
53546: PUSH
53547: LD_INT 2
53549: NEG
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: LD_INT 3
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 3
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53588: LD_ADDR_VAR 0 47
53592: PUSH
53593: LD_INT 2
53595: NEG
53596: PUSH
53597: LD_INT 3
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: NEG
53608: PUSH
53609: LD_INT 3
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53621: LD_ADDR_VAR 0 48
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53652: LD_ADDR_VAR 0 49
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53681: LD_ADDR_VAR 0 50
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 3
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 3
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53710: LD_ADDR_VAR 0 51
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53741: LD_ADDR_VAR 0 52
53745: PUSH
53746: LD_INT 3
53748: NEG
53749: PUSH
53750: LD_INT 1
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53774: LD_ADDR_VAR 0 53
53778: PUSH
53779: LD_INT 1
53781: NEG
53782: PUSH
53783: LD_INT 3
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 3
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53818: LD_ADDR_VAR 0 54
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 3
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53859: LD_ADDR_VAR 0 55
53863: PUSH
53864: LD_INT 3
53866: PUSH
53867: LD_INT 2
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 3
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 3
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53899: LD_ADDR_VAR 0 56
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 3
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 3
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53940: LD_ADDR_VAR 0 57
53944: PUSH
53945: LD_INT 2
53947: NEG
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 3
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 3
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53984: LD_ADDR_VAR 0 58
53988: PUSH
53989: LD_INT 2
53991: NEG
53992: PUSH
53993: LD_INT 3
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: LIST
54029: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54030: LD_ADDR_VAR 0 59
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54074: LD_ADDR_VAR 0 60
54078: PUSH
54079: LD_INT 1
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54115: LD_ADDR_VAR 0 61
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54155: LD_ADDR_VAR 0 62
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54196: LD_ADDR_VAR 0 63
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: LD_INT 1
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54240: LD_ADDR_VAR 0 64
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 2
54259: NEG
54260: PUSH
54261: LD_INT 1
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: ST_TO_ADDR
// end ; 2 :
54286: GO 57552
54288: LD_INT 2
54290: DOUBLE
54291: EQUAL
54292: IFTRUE 54296
54294: GO 57551
54296: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54297: LD_ADDR_VAR 0 29
54301: PUSH
54302: LD_INT 4
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 4
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 5
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 5
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 4
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 3
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 3
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 3
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 5
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: LD_INT 3
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 3
54407: PUSH
54408: LD_INT 2
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 4
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 4
54427: PUSH
54428: LD_INT 4
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: PUSH
54438: LD_INT 4
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: LD_INT 3
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 2
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 4
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 4
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 3
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 4
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 5
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 0
54527: PUSH
54528: LD_INT 5
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 4
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 1
54548: NEG
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 2
54559: PUSH
54560: LD_INT 5
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 3
54580: NEG
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 0
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 3
54625: NEG
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 4
54636: NEG
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 4
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 4
54659: NEG
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 2
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 4
54682: NEG
54683: PUSH
54684: LD_INT 4
54686: NEG
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 4
54694: NEG
54695: PUSH
54696: LD_INT 5
54698: NEG
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 3
54706: NEG
54707: PUSH
54708: LD_INT 4
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: NEG
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 4
54730: NEG
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 5
54742: NEG
54743: PUSH
54744: LD_INT 4
54746: NEG
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 5
54754: NEG
54755: PUSH
54756: LD_INT 5
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: LD_INT 5
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 5
54778: NEG
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54835: LD_ADDR_VAR 0 30
54839: PUSH
54840: LD_INT 4
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: LD_INT 3
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 5
54862: PUSH
54863: LD_INT 4
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 5
54872: PUSH
54873: LD_INT 5
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 4
54882: PUSH
54883: LD_INT 5
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: PUSH
54893: LD_INT 4
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 3
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 5
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 3
54922: PUSH
54923: LD_INT 5
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 3
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 4
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: LD_INT 4
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 4
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 4
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: NEG
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 4
55070: NEG
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 5
55081: NEG
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 5
55092: NEG
55093: PUSH
55094: LD_INT 1
55096: NEG
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 5
55104: NEG
55105: PUSH
55106: LD_INT 2
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 3
55116: NEG
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 3
55127: NEG
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 3
55139: NEG
55140: PUSH
55141: LD_INT 4
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 2
55151: NEG
55152: PUSH
55153: LD_INT 3
55155: NEG
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: NEG
55176: PUSH
55177: LD_INT 2
55179: NEG
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 4
55187: NEG
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: LD_INT 4
55203: NEG
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 2
55211: NEG
55212: PUSH
55213: LD_INT 4
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 4
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 4
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: LD_INT 5
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: LD_INT 4
55260: NEG
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: LD_INT 3
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 4
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 5
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: LD_INT 3
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 2
55325: NEG
55326: PUSH
55327: LD_INT 5
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55382: LD_ADDR_VAR 0 31
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 4
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 3
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 4
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: LD_INT 5
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 5
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 4
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: LD_INT 5
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 3
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 1
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 4
55538: NEG
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 4
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 4
55561: NEG
55562: PUSH
55563: LD_INT 2
55565: NEG
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 4
55584: NEG
55585: PUSH
55586: LD_INT 4
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 4
55596: NEG
55597: PUSH
55598: LD_INT 5
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: LD_INT 4
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: LD_INT 3
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 4
55632: NEG
55633: PUSH
55634: LD_INT 3
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 5
55644: NEG
55645: PUSH
55646: LD_INT 4
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 5
55656: NEG
55657: PUSH
55658: LD_INT 5
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 5
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 5
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 3
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 4
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 3
55717: NEG
55718: PUSH
55719: EMPTY
55720: LIST
55721: LIST
55722: PUSH
55723: LD_INT 1
55725: PUSH
55726: LD_INT 2
55728: NEG
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: LD_INT 4
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 2
55782: NEG
55783: PUSH
55784: LD_INT 4
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 4
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 4
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 5
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 5
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 4
55835: PUSH
55836: LD_INT 1
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: LD_INT 1
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: LD_INT 2
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 5
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55932: LD_ADDR_VAR 0 32
55936: PUSH
55937: LD_INT 4
55939: NEG
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 4
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 3
55962: NEG
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 3
55973: NEG
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 4
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 5
55995: NEG
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 5
56006: NEG
56007: PUSH
56008: LD_INT 1
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 5
56018: NEG
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 3
56053: NEG
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 3
56089: NEG
56090: PUSH
56091: LD_INT 2
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 4
56101: NEG
56102: PUSH
56103: LD_INT 3
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 4
56113: NEG
56114: PUSH
56115: LD_INT 4
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 4
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 4
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 4
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: LD_INT 5
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 1
56171: PUSH
56172: LD_INT 4
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 3
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 3
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: NEG
56205: PUSH
56206: LD_INT 4
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 1
56216: NEG
56217: PUSH
56218: LD_INT 5
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 2
56239: NEG
56240: PUSH
56241: LD_INT 5
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 4
56272: PUSH
56273: LD_INT 0
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 4
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: LD_INT 2
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 4
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 4
56344: PUSH
56345: LD_INT 4
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 5
56364: PUSH
56365: LD_INT 4
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 5
56374: PUSH
56375: LD_INT 5
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 4
56384: PUSH
56385: LD_INT 5
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 5
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: LD_INT 5
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56479: LD_ADDR_VAR 0 33
56483: PUSH
56484: LD_INT 4
56486: NEG
56487: PUSH
56488: LD_INT 4
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 4
56498: NEG
56499: PUSH
56500: LD_INT 5
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: LD_INT 4
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 3
56522: NEG
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 4
56534: NEG
56535: PUSH
56536: LD_INT 3
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 5
56546: NEG
56547: PUSH
56548: LD_INT 4
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 5
56558: NEG
56559: PUSH
56560: LD_INT 5
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 5
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 5
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: LD_INT 3
56597: NEG
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 4
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 3
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 2
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: LD_INT 4
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 2
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 4
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 4
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 4
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 5
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: LD_INT 1
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 4
56737: PUSH
56738: LD_INT 1
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: LD_INT 1
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 3
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 5
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 4
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: LD_INT 4
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 3
56829: PUSH
56830: LD_INT 4
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 2
56839: PUSH
56840: LD_INT 3
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 2
56849: PUSH
56850: LD_INT 2
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 4
56859: PUSH
56860: LD_INT 2
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: PUSH
56870: LD_INT 4
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 4
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 4
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: LD_INT 5
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 5
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 4
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: LD_INT 3
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: LD_INT 5
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 2
56961: NEG
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57017: LD_ADDR_VAR 0 34
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 4
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: LD_INT 5
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: LD_INT 4
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: LD_INT 4
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 5
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 2
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: LD_INT 5
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 3
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 4
57147: PUSH
57148: LD_INT 0
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 4
57157: PUSH
57158: LD_INT 1
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 2
57177: PUSH
57178: LD_INT 0
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 2
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 4
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: LD_INT 4
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: LD_INT 3
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 5
57239: PUSH
57240: LD_INT 4
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 5
57249: PUSH
57250: LD_INT 5
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 4
57259: PUSH
57260: LD_INT 5
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 4
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: LD_INT 3
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 5
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 3
57299: PUSH
57300: LD_INT 5
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 0
57319: PUSH
57320: LD_INT 2
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: LD_INT 3
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 4
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 0
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 3
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: LD_INT 4
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: LD_INT 2
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 4
57402: NEG
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 4
57413: NEG
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 3
57425: NEG
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 3
57436: NEG
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 4
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 5
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 5
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 5
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: ST_TO_ADDR
// end ; end ;
57549: GO 57552
57551: POP
// case btype of b_depot , b_warehouse :
57552: LD_VAR 0 1
57556: PUSH
57557: LD_INT 0
57559: DOUBLE
57560: EQUAL
57561: IFTRUE 57571
57563: LD_INT 1
57565: DOUBLE
57566: EQUAL
57567: IFTRUE 57571
57569: GO 57772
57571: POP
// case nation of nation_american :
57572: LD_VAR 0 5
57576: PUSH
57577: LD_INT 1
57579: DOUBLE
57580: EQUAL
57581: IFTRUE 57585
57583: GO 57641
57585: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57586: LD_ADDR_VAR 0 9
57590: PUSH
57591: LD_VAR 0 11
57595: PUSH
57596: LD_VAR 0 12
57600: PUSH
57601: LD_VAR 0 13
57605: PUSH
57606: LD_VAR 0 14
57610: PUSH
57611: LD_VAR 0 15
57615: PUSH
57616: LD_VAR 0 16
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: PUSH
57629: LD_VAR 0 4
57633: PUSH
57634: LD_INT 1
57636: PLUS
57637: ARRAY
57638: ST_TO_ADDR
57639: GO 57770
57641: LD_INT 2
57643: DOUBLE
57644: EQUAL
57645: IFTRUE 57649
57647: GO 57705
57649: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
57650: LD_ADDR_VAR 0 9
57654: PUSH
57655: LD_VAR 0 17
57659: PUSH
57660: LD_VAR 0 18
57664: PUSH
57665: LD_VAR 0 19
57669: PUSH
57670: LD_VAR 0 20
57674: PUSH
57675: LD_VAR 0 21
57679: PUSH
57680: LD_VAR 0 22
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: PUSH
57693: LD_VAR 0 4
57697: PUSH
57698: LD_INT 1
57700: PLUS
57701: ARRAY
57702: ST_TO_ADDR
57703: GO 57770
57705: LD_INT 3
57707: DOUBLE
57708: EQUAL
57709: IFTRUE 57713
57711: GO 57769
57713: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57714: LD_ADDR_VAR 0 9
57718: PUSH
57719: LD_VAR 0 23
57723: PUSH
57724: LD_VAR 0 24
57728: PUSH
57729: LD_VAR 0 25
57733: PUSH
57734: LD_VAR 0 26
57738: PUSH
57739: LD_VAR 0 27
57743: PUSH
57744: LD_VAR 0 28
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: PUSH
57757: LD_VAR 0 4
57761: PUSH
57762: LD_INT 1
57764: PLUS
57765: ARRAY
57766: ST_TO_ADDR
57767: GO 57770
57769: POP
57770: GO 58325
57772: LD_INT 2
57774: DOUBLE
57775: EQUAL
57776: IFTRUE 57786
57778: LD_INT 3
57780: DOUBLE
57781: EQUAL
57782: IFTRUE 57786
57784: GO 57842
57786: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57787: LD_ADDR_VAR 0 9
57791: PUSH
57792: LD_VAR 0 29
57796: PUSH
57797: LD_VAR 0 30
57801: PUSH
57802: LD_VAR 0 31
57806: PUSH
57807: LD_VAR 0 32
57811: PUSH
57812: LD_VAR 0 33
57816: PUSH
57817: LD_VAR 0 34
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: PUSH
57830: LD_VAR 0 4
57834: PUSH
57835: LD_INT 1
57837: PLUS
57838: ARRAY
57839: ST_TO_ADDR
57840: GO 58325
57842: LD_INT 16
57844: DOUBLE
57845: EQUAL
57846: IFTRUE 57904
57848: LD_INT 17
57850: DOUBLE
57851: EQUAL
57852: IFTRUE 57904
57854: LD_INT 18
57856: DOUBLE
57857: EQUAL
57858: IFTRUE 57904
57860: LD_INT 19
57862: DOUBLE
57863: EQUAL
57864: IFTRUE 57904
57866: LD_INT 22
57868: DOUBLE
57869: EQUAL
57870: IFTRUE 57904
57872: LD_INT 20
57874: DOUBLE
57875: EQUAL
57876: IFTRUE 57904
57878: LD_INT 21
57880: DOUBLE
57881: EQUAL
57882: IFTRUE 57904
57884: LD_INT 23
57886: DOUBLE
57887: EQUAL
57888: IFTRUE 57904
57890: LD_INT 24
57892: DOUBLE
57893: EQUAL
57894: IFTRUE 57904
57896: LD_INT 25
57898: DOUBLE
57899: EQUAL
57900: IFTRUE 57904
57902: GO 57960
57904: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57905: LD_ADDR_VAR 0 9
57909: PUSH
57910: LD_VAR 0 35
57914: PUSH
57915: LD_VAR 0 36
57919: PUSH
57920: LD_VAR 0 37
57924: PUSH
57925: LD_VAR 0 38
57929: PUSH
57930: LD_VAR 0 39
57934: PUSH
57935: LD_VAR 0 40
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: PUSH
57948: LD_VAR 0 4
57952: PUSH
57953: LD_INT 1
57955: PLUS
57956: ARRAY
57957: ST_TO_ADDR
57958: GO 58325
57960: LD_INT 6
57962: DOUBLE
57963: EQUAL
57964: IFTRUE 58016
57966: LD_INT 7
57968: DOUBLE
57969: EQUAL
57970: IFTRUE 58016
57972: LD_INT 8
57974: DOUBLE
57975: EQUAL
57976: IFTRUE 58016
57978: LD_INT 13
57980: DOUBLE
57981: EQUAL
57982: IFTRUE 58016
57984: LD_INT 12
57986: DOUBLE
57987: EQUAL
57988: IFTRUE 58016
57990: LD_INT 15
57992: DOUBLE
57993: EQUAL
57994: IFTRUE 58016
57996: LD_INT 11
57998: DOUBLE
57999: EQUAL
58000: IFTRUE 58016
58002: LD_INT 14
58004: DOUBLE
58005: EQUAL
58006: IFTRUE 58016
58008: LD_INT 10
58010: DOUBLE
58011: EQUAL
58012: IFTRUE 58016
58014: GO 58072
58016: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58017: LD_ADDR_VAR 0 9
58021: PUSH
58022: LD_VAR 0 41
58026: PUSH
58027: LD_VAR 0 42
58031: PUSH
58032: LD_VAR 0 43
58036: PUSH
58037: LD_VAR 0 44
58041: PUSH
58042: LD_VAR 0 45
58046: PUSH
58047: LD_VAR 0 46
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: PUSH
58060: LD_VAR 0 4
58064: PUSH
58065: LD_INT 1
58067: PLUS
58068: ARRAY
58069: ST_TO_ADDR
58070: GO 58325
58072: LD_INT 36
58074: DOUBLE
58075: EQUAL
58076: IFTRUE 58080
58078: GO 58136
58080: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58081: LD_ADDR_VAR 0 9
58085: PUSH
58086: LD_VAR 0 47
58090: PUSH
58091: LD_VAR 0 48
58095: PUSH
58096: LD_VAR 0 49
58100: PUSH
58101: LD_VAR 0 50
58105: PUSH
58106: LD_VAR 0 51
58110: PUSH
58111: LD_VAR 0 52
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: PUSH
58124: LD_VAR 0 4
58128: PUSH
58129: LD_INT 1
58131: PLUS
58132: ARRAY
58133: ST_TO_ADDR
58134: GO 58325
58136: LD_INT 4
58138: DOUBLE
58139: EQUAL
58140: IFTRUE 58162
58142: LD_INT 5
58144: DOUBLE
58145: EQUAL
58146: IFTRUE 58162
58148: LD_INT 34
58150: DOUBLE
58151: EQUAL
58152: IFTRUE 58162
58154: LD_INT 37
58156: DOUBLE
58157: EQUAL
58158: IFTRUE 58162
58160: GO 58218
58162: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58163: LD_ADDR_VAR 0 9
58167: PUSH
58168: LD_VAR 0 53
58172: PUSH
58173: LD_VAR 0 54
58177: PUSH
58178: LD_VAR 0 55
58182: PUSH
58183: LD_VAR 0 56
58187: PUSH
58188: LD_VAR 0 57
58192: PUSH
58193: LD_VAR 0 58
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: PUSH
58206: LD_VAR 0 4
58210: PUSH
58211: LD_INT 1
58213: PLUS
58214: ARRAY
58215: ST_TO_ADDR
58216: GO 58325
58218: LD_INT 31
58220: DOUBLE
58221: EQUAL
58222: IFTRUE 58268
58224: LD_INT 32
58226: DOUBLE
58227: EQUAL
58228: IFTRUE 58268
58230: LD_INT 33
58232: DOUBLE
58233: EQUAL
58234: IFTRUE 58268
58236: LD_INT 27
58238: DOUBLE
58239: EQUAL
58240: IFTRUE 58268
58242: LD_INT 26
58244: DOUBLE
58245: EQUAL
58246: IFTRUE 58268
58248: LD_INT 28
58250: DOUBLE
58251: EQUAL
58252: IFTRUE 58268
58254: LD_INT 29
58256: DOUBLE
58257: EQUAL
58258: IFTRUE 58268
58260: LD_INT 30
58262: DOUBLE
58263: EQUAL
58264: IFTRUE 58268
58266: GO 58324
58268: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58269: LD_ADDR_VAR 0 9
58273: PUSH
58274: LD_VAR 0 59
58278: PUSH
58279: LD_VAR 0 60
58283: PUSH
58284: LD_VAR 0 61
58288: PUSH
58289: LD_VAR 0 62
58293: PUSH
58294: LD_VAR 0 63
58298: PUSH
58299: LD_VAR 0 64
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: PUSH
58312: LD_VAR 0 4
58316: PUSH
58317: LD_INT 1
58319: PLUS
58320: ARRAY
58321: ST_TO_ADDR
58322: GO 58325
58324: POP
// temp_list2 = [ ] ;
58325: LD_ADDR_VAR 0 10
58329: PUSH
58330: EMPTY
58331: ST_TO_ADDR
// for i in temp_list do
58332: LD_ADDR_VAR 0 8
58336: PUSH
58337: LD_VAR 0 9
58341: PUSH
58342: FOR_IN
58343: IFFALSE 58395
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58345: LD_ADDR_VAR 0 10
58349: PUSH
58350: LD_VAR 0 10
58354: PUSH
58355: LD_VAR 0 8
58359: PUSH
58360: LD_INT 1
58362: ARRAY
58363: PUSH
58364: LD_VAR 0 2
58368: PLUS
58369: PUSH
58370: LD_VAR 0 8
58374: PUSH
58375: LD_INT 2
58377: ARRAY
58378: PUSH
58379: LD_VAR 0 3
58383: PLUS
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: ADD
58392: ST_TO_ADDR
58393: GO 58342
58395: POP
58396: POP
// result = temp_list2 ;
58397: LD_ADDR_VAR 0 7
58401: PUSH
58402: LD_VAR 0 10
58406: ST_TO_ADDR
// end ;
58407: LD_VAR 0 7
58411: RET
// export function EnemyInRange ( unit , dist ) ; begin
58412: LD_INT 0
58414: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58415: LD_ADDR_VAR 0 3
58419: PUSH
58420: LD_VAR 0 1
58424: PPUSH
58425: CALL_OW 255
58429: PPUSH
58430: LD_VAR 0 1
58434: PPUSH
58435: CALL_OW 250
58439: PPUSH
58440: LD_VAR 0 1
58444: PPUSH
58445: CALL_OW 251
58449: PPUSH
58450: LD_VAR 0 2
58454: PPUSH
58455: CALL 31814 0 4
58459: PUSH
58460: LD_INT 4
58462: ARRAY
58463: ST_TO_ADDR
// end ;
58464: LD_VAR 0 3
58468: RET
// export function PlayerSeeMe ( unit ) ; begin
58469: LD_INT 0
58471: PPUSH
// result := See ( your_side , unit ) ;
58472: LD_ADDR_VAR 0 2
58476: PUSH
58477: LD_OWVAR 2
58481: PPUSH
58482: LD_VAR 0 1
58486: PPUSH
58487: CALL_OW 292
58491: ST_TO_ADDR
// end ;
58492: LD_VAR 0 2
58496: RET
// export function ReverseDir ( unit ) ; begin
58497: LD_INT 0
58499: PPUSH
// if not unit then
58500: LD_VAR 0 1
58504: NOT
58505: IFFALSE 58509
// exit ;
58507: GO 58532
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58509: LD_ADDR_VAR 0 2
58513: PUSH
58514: LD_VAR 0 1
58518: PPUSH
58519: CALL_OW 254
58523: PUSH
58524: LD_INT 3
58526: PLUS
58527: PUSH
58528: LD_INT 6
58530: MOD
58531: ST_TO_ADDR
// end ;
58532: LD_VAR 0 2
58536: RET
// export function ReverseArray ( array ) ; var i ; begin
58537: LD_INT 0
58539: PPUSH
58540: PPUSH
// if not array then
58541: LD_VAR 0 1
58545: NOT
58546: IFFALSE 58550
// exit ;
58548: GO 58605
// result := [ ] ;
58550: LD_ADDR_VAR 0 2
58554: PUSH
58555: EMPTY
58556: ST_TO_ADDR
// for i := array downto 1 do
58557: LD_ADDR_VAR 0 3
58561: PUSH
58562: DOUBLE
58563: LD_VAR 0 1
58567: INC
58568: ST_TO_ADDR
58569: LD_INT 1
58571: PUSH
58572: FOR_DOWNTO
58573: IFFALSE 58603
// result := Join ( result , array [ i ] ) ;
58575: LD_ADDR_VAR 0 2
58579: PUSH
58580: LD_VAR 0 2
58584: PPUSH
58585: LD_VAR 0 1
58589: PUSH
58590: LD_VAR 0 3
58594: ARRAY
58595: PPUSH
58596: CALL 63230 0 2
58600: ST_TO_ADDR
58601: GO 58572
58603: POP
58604: POP
// end ;
58605: LD_VAR 0 2
58609: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
58610: LD_INT 0
58612: PPUSH
58613: PPUSH
58614: PPUSH
58615: PPUSH
58616: PPUSH
58617: PPUSH
// if not unit or not hexes then
58618: LD_VAR 0 1
58622: NOT
58623: PUSH
58624: LD_VAR 0 2
58628: NOT
58629: OR
58630: IFFALSE 58634
// exit ;
58632: GO 58757
// dist := 9999 ;
58634: LD_ADDR_VAR 0 5
58638: PUSH
58639: LD_INT 9999
58641: ST_TO_ADDR
// for i = 1 to hexes do
58642: LD_ADDR_VAR 0 4
58646: PUSH
58647: DOUBLE
58648: LD_INT 1
58650: DEC
58651: ST_TO_ADDR
58652: LD_VAR 0 2
58656: PUSH
58657: FOR_TO
58658: IFFALSE 58745
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58660: LD_ADDR_VAR 0 6
58664: PUSH
58665: LD_VAR 0 1
58669: PPUSH
58670: LD_VAR 0 2
58674: PUSH
58675: LD_VAR 0 4
58679: ARRAY
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: PPUSH
58685: LD_VAR 0 2
58689: PUSH
58690: LD_VAR 0 4
58694: ARRAY
58695: PUSH
58696: LD_INT 2
58698: ARRAY
58699: PPUSH
58700: CALL_OW 297
58704: ST_TO_ADDR
// if tdist < dist then
58705: LD_VAR 0 6
58709: PUSH
58710: LD_VAR 0 5
58714: LESS
58715: IFFALSE 58743
// begin hex := hexes [ i ] ;
58717: LD_ADDR_VAR 0 8
58721: PUSH
58722: LD_VAR 0 2
58726: PUSH
58727: LD_VAR 0 4
58731: ARRAY
58732: ST_TO_ADDR
// dist := tdist ;
58733: LD_ADDR_VAR 0 5
58737: PUSH
58738: LD_VAR 0 6
58742: ST_TO_ADDR
// end ; end ;
58743: GO 58657
58745: POP
58746: POP
// result := hex ;
58747: LD_ADDR_VAR 0 3
58751: PUSH
58752: LD_VAR 0 8
58756: ST_TO_ADDR
// end ;
58757: LD_VAR 0 3
58761: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58762: LD_INT 0
58764: PPUSH
58765: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58766: LD_VAR 0 1
58770: NOT
58771: PUSH
58772: LD_VAR 0 1
58776: PUSH
58777: LD_INT 21
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 23
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PPUSH
58801: CALL_OW 69
58805: IN
58806: NOT
58807: OR
58808: IFFALSE 58812
// exit ;
58810: GO 58859
// for i = 1 to 3 do
58812: LD_ADDR_VAR 0 3
58816: PUSH
58817: DOUBLE
58818: LD_INT 1
58820: DEC
58821: ST_TO_ADDR
58822: LD_INT 3
58824: PUSH
58825: FOR_TO
58826: IFFALSE 58857
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58828: LD_VAR 0 1
58832: PPUSH
58833: CALL_OW 250
58837: PPUSH
58838: LD_VAR 0 1
58842: PPUSH
58843: CALL_OW 251
58847: PPUSH
58848: LD_INT 1
58850: PPUSH
58851: CALL_OW 453
58855: GO 58825
58857: POP
58858: POP
// end ;
58859: LD_VAR 0 2
58863: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58864: LD_INT 0
58866: PPUSH
58867: PPUSH
58868: PPUSH
58869: PPUSH
58870: PPUSH
58871: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58872: LD_VAR 0 1
58876: NOT
58877: PUSH
58878: LD_VAR 0 2
58882: NOT
58883: OR
58884: PUSH
58885: LD_VAR 0 1
58889: PPUSH
58890: CALL_OW 314
58894: OR
58895: IFFALSE 58899
// exit ;
58897: GO 59340
// x := GetX ( enemy_unit ) ;
58899: LD_ADDR_VAR 0 7
58903: PUSH
58904: LD_VAR 0 2
58908: PPUSH
58909: CALL_OW 250
58913: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58914: LD_ADDR_VAR 0 8
58918: PUSH
58919: LD_VAR 0 2
58923: PPUSH
58924: CALL_OW 251
58928: ST_TO_ADDR
// if not x or not y then
58929: LD_VAR 0 7
58933: NOT
58934: PUSH
58935: LD_VAR 0 8
58939: NOT
58940: OR
58941: IFFALSE 58945
// exit ;
58943: GO 59340
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58945: LD_ADDR_VAR 0 6
58949: PUSH
58950: LD_VAR 0 7
58954: PPUSH
58955: LD_INT 0
58957: PPUSH
58958: LD_INT 4
58960: PPUSH
58961: CALL_OW 272
58965: PUSH
58966: LD_VAR 0 8
58970: PPUSH
58971: LD_INT 0
58973: PPUSH
58974: LD_INT 4
58976: PPUSH
58977: CALL_OW 273
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_VAR 0 7
58990: PPUSH
58991: LD_INT 1
58993: PPUSH
58994: LD_INT 4
58996: PPUSH
58997: CALL_OW 272
59001: PUSH
59002: LD_VAR 0 8
59006: PPUSH
59007: LD_INT 1
59009: PPUSH
59010: LD_INT 4
59012: PPUSH
59013: CALL_OW 273
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_VAR 0 7
59026: PPUSH
59027: LD_INT 2
59029: PPUSH
59030: LD_INT 4
59032: PPUSH
59033: CALL_OW 272
59037: PUSH
59038: LD_VAR 0 8
59042: PPUSH
59043: LD_INT 2
59045: PPUSH
59046: LD_INT 4
59048: PPUSH
59049: CALL_OW 273
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_VAR 0 7
59062: PPUSH
59063: LD_INT 3
59065: PPUSH
59066: LD_INT 4
59068: PPUSH
59069: CALL_OW 272
59073: PUSH
59074: LD_VAR 0 8
59078: PPUSH
59079: LD_INT 3
59081: PPUSH
59082: LD_INT 4
59084: PPUSH
59085: CALL_OW 273
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_VAR 0 7
59098: PPUSH
59099: LD_INT 4
59101: PPUSH
59102: LD_INT 4
59104: PPUSH
59105: CALL_OW 272
59109: PUSH
59110: LD_VAR 0 8
59114: PPUSH
59115: LD_INT 4
59117: PPUSH
59118: LD_INT 4
59120: PPUSH
59121: CALL_OW 273
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_VAR 0 7
59134: PPUSH
59135: LD_INT 5
59137: PPUSH
59138: LD_INT 4
59140: PPUSH
59141: CALL_OW 272
59145: PUSH
59146: LD_VAR 0 8
59150: PPUSH
59151: LD_INT 5
59153: PPUSH
59154: LD_INT 4
59156: PPUSH
59157: CALL_OW 273
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: ST_TO_ADDR
// for i = tmp downto 1 do
59174: LD_ADDR_VAR 0 4
59178: PUSH
59179: DOUBLE
59180: LD_VAR 0 6
59184: INC
59185: ST_TO_ADDR
59186: LD_INT 1
59188: PUSH
59189: FOR_DOWNTO
59190: IFFALSE 59291
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59192: LD_VAR 0 6
59196: PUSH
59197: LD_VAR 0 4
59201: ARRAY
59202: PUSH
59203: LD_INT 1
59205: ARRAY
59206: PPUSH
59207: LD_VAR 0 6
59211: PUSH
59212: LD_VAR 0 4
59216: ARRAY
59217: PUSH
59218: LD_INT 2
59220: ARRAY
59221: PPUSH
59222: CALL_OW 488
59226: NOT
59227: PUSH
59228: LD_VAR 0 6
59232: PUSH
59233: LD_VAR 0 4
59237: ARRAY
59238: PUSH
59239: LD_INT 1
59241: ARRAY
59242: PPUSH
59243: LD_VAR 0 6
59247: PUSH
59248: LD_VAR 0 4
59252: ARRAY
59253: PUSH
59254: LD_INT 2
59256: ARRAY
59257: PPUSH
59258: CALL_OW 428
59262: PUSH
59263: LD_INT 0
59265: NONEQUAL
59266: OR
59267: IFFALSE 59289
// tmp := Delete ( tmp , i ) ;
59269: LD_ADDR_VAR 0 6
59273: PUSH
59274: LD_VAR 0 6
59278: PPUSH
59279: LD_VAR 0 4
59283: PPUSH
59284: CALL_OW 3
59288: ST_TO_ADDR
59289: GO 59189
59291: POP
59292: POP
// j := GetClosestHex ( unit , tmp ) ;
59293: LD_ADDR_VAR 0 5
59297: PUSH
59298: LD_VAR 0 1
59302: PPUSH
59303: LD_VAR 0 6
59307: PPUSH
59308: CALL 58610 0 2
59312: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59313: LD_VAR 0 1
59317: PPUSH
59318: LD_VAR 0 5
59322: PUSH
59323: LD_INT 1
59325: ARRAY
59326: PPUSH
59327: LD_VAR 0 5
59331: PUSH
59332: LD_INT 2
59334: ARRAY
59335: PPUSH
59336: CALL_OW 111
// end ;
59340: LD_VAR 0 3
59344: RET
// export function PrepareApemanSoldier ( ) ; begin
59345: LD_INT 0
59347: PPUSH
// uc_nation := 0 ;
59348: LD_ADDR_OWVAR 21
59352: PUSH
59353: LD_INT 0
59355: ST_TO_ADDR
// hc_sex := sex_male ;
59356: LD_ADDR_OWVAR 27
59360: PUSH
59361: LD_INT 1
59363: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
59364: LD_ADDR_OWVAR 28
59368: PUSH
59369: LD_INT 15
59371: ST_TO_ADDR
// hc_gallery :=  ;
59372: LD_ADDR_OWVAR 33
59376: PUSH
59377: LD_STRING 
59379: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59380: LD_ADDR_OWVAR 31
59384: PUSH
59385: LD_INT 0
59387: PPUSH
59388: LD_INT 3
59390: PPUSH
59391: CALL_OW 12
59395: PUSH
59396: LD_INT 0
59398: PPUSH
59399: LD_INT 3
59401: PPUSH
59402: CALL_OW 12
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: ST_TO_ADDR
// end ;
59419: LD_VAR 0 1
59423: RET
// export function PrepareApemanEngineer ( ) ; begin
59424: LD_INT 0
59426: PPUSH
// uc_nation := 0 ;
59427: LD_ADDR_OWVAR 21
59431: PUSH
59432: LD_INT 0
59434: ST_TO_ADDR
// hc_sex := sex_male ;
59435: LD_ADDR_OWVAR 27
59439: PUSH
59440: LD_INT 1
59442: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
59443: LD_ADDR_OWVAR 28
59447: PUSH
59448: LD_INT 16
59450: ST_TO_ADDR
// hc_gallery :=  ;
59451: LD_ADDR_OWVAR 33
59455: PUSH
59456: LD_STRING 
59458: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59459: LD_ADDR_OWVAR 31
59463: PUSH
59464: LD_INT 0
59466: PPUSH
59467: LD_INT 3
59469: PPUSH
59470: CALL_OW 12
59474: PUSH
59475: LD_INT 0
59477: PPUSH
59478: LD_INT 3
59480: PPUSH
59481: CALL_OW 12
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: ST_TO_ADDR
// end ;
59498: LD_VAR 0 1
59502: RET
// export function PrepareApeman ( agressivity ) ; begin
59503: LD_INT 0
59505: PPUSH
// uc_side := 0 ;
59506: LD_ADDR_OWVAR 20
59510: PUSH
59511: LD_INT 0
59513: ST_TO_ADDR
// uc_nation := 0 ;
59514: LD_ADDR_OWVAR 21
59518: PUSH
59519: LD_INT 0
59521: ST_TO_ADDR
// hc_sex := sex_male ;
59522: LD_ADDR_OWVAR 27
59526: PUSH
59527: LD_INT 1
59529: ST_TO_ADDR
// hc_class := class_apeman ;
59530: LD_ADDR_OWVAR 28
59534: PUSH
59535: LD_INT 12
59537: ST_TO_ADDR
// hc_gallery :=  ;
59538: LD_ADDR_OWVAR 33
59542: PUSH
59543: LD_STRING 
59545: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59546: LD_ADDR_OWVAR 35
59550: PUSH
59551: LD_VAR 0 1
59555: NEG
59556: PPUSH
59557: LD_VAR 0 1
59561: PPUSH
59562: CALL_OW 12
59566: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
59567: LD_ADDR_OWVAR 31
59571: PUSH
59572: LD_INT 0
59574: PPUSH
59575: LD_INT 3
59577: PPUSH
59578: CALL_OW 12
59582: PUSH
59583: LD_INT 0
59585: PPUSH
59586: LD_INT 3
59588: PPUSH
59589: CALL_OW 12
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: ST_TO_ADDR
// end ;
59606: LD_VAR 0 2
59610: RET
// export function PrepareTiger ( agressivity ) ; begin
59611: LD_INT 0
59613: PPUSH
// uc_side := 0 ;
59614: LD_ADDR_OWVAR 20
59618: PUSH
59619: LD_INT 0
59621: ST_TO_ADDR
// uc_nation := 0 ;
59622: LD_ADDR_OWVAR 21
59626: PUSH
59627: LD_INT 0
59629: ST_TO_ADDR
// hc_class := class_tiger ;
59630: LD_ADDR_OWVAR 28
59634: PUSH
59635: LD_INT 14
59637: ST_TO_ADDR
// hc_gallery :=  ;
59638: LD_ADDR_OWVAR 33
59642: PUSH
59643: LD_STRING 
59645: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
59646: LD_ADDR_OWVAR 35
59650: PUSH
59651: LD_VAR 0 1
59655: NEG
59656: PPUSH
59657: LD_VAR 0 1
59661: PPUSH
59662: CALL_OW 12
59666: ST_TO_ADDR
// end ;
59667: LD_VAR 0 2
59671: RET
// export function PrepareEnchidna ( ) ; begin
59672: LD_INT 0
59674: PPUSH
// uc_side := 0 ;
59675: LD_ADDR_OWVAR 20
59679: PUSH
59680: LD_INT 0
59682: ST_TO_ADDR
// uc_nation := 0 ;
59683: LD_ADDR_OWVAR 21
59687: PUSH
59688: LD_INT 0
59690: ST_TO_ADDR
// hc_class := class_baggie ;
59691: LD_ADDR_OWVAR 28
59695: PUSH
59696: LD_INT 13
59698: ST_TO_ADDR
// hc_gallery :=  ;
59699: LD_ADDR_OWVAR 33
59703: PUSH
59704: LD_STRING 
59706: ST_TO_ADDR
// end ;
59707: LD_VAR 0 1
59711: RET
// export function PrepareFrog ( ) ; begin
59712: LD_INT 0
59714: PPUSH
// uc_side := 0 ;
59715: LD_ADDR_OWVAR 20
59719: PUSH
59720: LD_INT 0
59722: ST_TO_ADDR
// uc_nation := 0 ;
59723: LD_ADDR_OWVAR 21
59727: PUSH
59728: LD_INT 0
59730: ST_TO_ADDR
// hc_class := class_frog ;
59731: LD_ADDR_OWVAR 28
59735: PUSH
59736: LD_INT 19
59738: ST_TO_ADDR
// hc_gallery :=  ;
59739: LD_ADDR_OWVAR 33
59743: PUSH
59744: LD_STRING 
59746: ST_TO_ADDR
// end ;
59747: LD_VAR 0 1
59751: RET
// export function PrepareFish ( ) ; begin
59752: LD_INT 0
59754: PPUSH
// uc_side := 0 ;
59755: LD_ADDR_OWVAR 20
59759: PUSH
59760: LD_INT 0
59762: ST_TO_ADDR
// uc_nation := 0 ;
59763: LD_ADDR_OWVAR 21
59767: PUSH
59768: LD_INT 0
59770: ST_TO_ADDR
// hc_class := class_fish ;
59771: LD_ADDR_OWVAR 28
59775: PUSH
59776: LD_INT 20
59778: ST_TO_ADDR
// hc_gallery :=  ;
59779: LD_ADDR_OWVAR 33
59783: PUSH
59784: LD_STRING 
59786: ST_TO_ADDR
// end ;
59787: LD_VAR 0 1
59791: RET
// export function PrepareBird ( ) ; begin
59792: LD_INT 0
59794: PPUSH
// uc_side := 0 ;
59795: LD_ADDR_OWVAR 20
59799: PUSH
59800: LD_INT 0
59802: ST_TO_ADDR
// uc_nation := 0 ;
59803: LD_ADDR_OWVAR 21
59807: PUSH
59808: LD_INT 0
59810: ST_TO_ADDR
// hc_class := class_phororhacos ;
59811: LD_ADDR_OWVAR 28
59815: PUSH
59816: LD_INT 18
59818: ST_TO_ADDR
// hc_gallery :=  ;
59819: LD_ADDR_OWVAR 33
59823: PUSH
59824: LD_STRING 
59826: ST_TO_ADDR
// end ;
59827: LD_VAR 0 1
59831: RET
// export function PrepareHorse ( ) ; begin
59832: LD_INT 0
59834: PPUSH
// uc_side := 0 ;
59835: LD_ADDR_OWVAR 20
59839: PUSH
59840: LD_INT 0
59842: ST_TO_ADDR
// uc_nation := 0 ;
59843: LD_ADDR_OWVAR 21
59847: PUSH
59848: LD_INT 0
59850: ST_TO_ADDR
// hc_class := class_horse ;
59851: LD_ADDR_OWVAR 28
59855: PUSH
59856: LD_INT 21
59858: ST_TO_ADDR
// hc_gallery :=  ;
59859: LD_ADDR_OWVAR 33
59863: PUSH
59864: LD_STRING 
59866: ST_TO_ADDR
// end ;
59867: LD_VAR 0 1
59871: RET
// export function PrepareMastodont ( ) ; begin
59872: LD_INT 0
59874: PPUSH
// uc_side := 0 ;
59875: LD_ADDR_OWVAR 20
59879: PUSH
59880: LD_INT 0
59882: ST_TO_ADDR
// uc_nation := 0 ;
59883: LD_ADDR_OWVAR 21
59887: PUSH
59888: LD_INT 0
59890: ST_TO_ADDR
// vc_chassis := class_mastodont ;
59891: LD_ADDR_OWVAR 37
59895: PUSH
59896: LD_INT 31
59898: ST_TO_ADDR
// vc_control := control_rider ;
59899: LD_ADDR_OWVAR 38
59903: PUSH
59904: LD_INT 4
59906: ST_TO_ADDR
// end ;
59907: LD_VAR 0 1
59911: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59912: LD_INT 0
59914: PPUSH
59915: PPUSH
59916: PPUSH
// uc_side = 0 ;
59917: LD_ADDR_OWVAR 20
59921: PUSH
59922: LD_INT 0
59924: ST_TO_ADDR
// uc_nation = 0 ;
59925: LD_ADDR_OWVAR 21
59929: PUSH
59930: LD_INT 0
59932: ST_TO_ADDR
// InitHc_All ( ) ;
59933: CALL_OW 584
// InitVc ;
59937: CALL_OW 20
// if mastodonts then
59941: LD_VAR 0 6
59945: IFFALSE 60012
// for i = 1 to mastodonts do
59947: LD_ADDR_VAR 0 11
59951: PUSH
59952: DOUBLE
59953: LD_INT 1
59955: DEC
59956: ST_TO_ADDR
59957: LD_VAR 0 6
59961: PUSH
59962: FOR_TO
59963: IFFALSE 60010
// begin vc_chassis := 31 ;
59965: LD_ADDR_OWVAR 37
59969: PUSH
59970: LD_INT 31
59972: ST_TO_ADDR
// vc_control := control_rider ;
59973: LD_ADDR_OWVAR 38
59977: PUSH
59978: LD_INT 4
59980: ST_TO_ADDR
// animal := CreateVehicle ;
59981: LD_ADDR_VAR 0 12
59985: PUSH
59986: CALL_OW 45
59990: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59991: LD_VAR 0 12
59995: PPUSH
59996: LD_VAR 0 8
60000: PPUSH
60001: LD_INT 0
60003: PPUSH
60004: CALL 62147 0 3
// end ;
60008: GO 59962
60010: POP
60011: POP
// if horses then
60012: LD_VAR 0 5
60016: IFFALSE 60083
// for i = 1 to horses do
60018: LD_ADDR_VAR 0 11
60022: PUSH
60023: DOUBLE
60024: LD_INT 1
60026: DEC
60027: ST_TO_ADDR
60028: LD_VAR 0 5
60032: PUSH
60033: FOR_TO
60034: IFFALSE 60081
// begin hc_class := 21 ;
60036: LD_ADDR_OWVAR 28
60040: PUSH
60041: LD_INT 21
60043: ST_TO_ADDR
// hc_gallery :=  ;
60044: LD_ADDR_OWVAR 33
60048: PUSH
60049: LD_STRING 
60051: ST_TO_ADDR
// animal := CreateHuman ;
60052: LD_ADDR_VAR 0 12
60056: PUSH
60057: CALL_OW 44
60061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60062: LD_VAR 0 12
60066: PPUSH
60067: LD_VAR 0 8
60071: PPUSH
60072: LD_INT 0
60074: PPUSH
60075: CALL 62147 0 3
// end ;
60079: GO 60033
60081: POP
60082: POP
// if birds then
60083: LD_VAR 0 1
60087: IFFALSE 60154
// for i = 1 to birds do
60089: LD_ADDR_VAR 0 11
60093: PUSH
60094: DOUBLE
60095: LD_INT 1
60097: DEC
60098: ST_TO_ADDR
60099: LD_VAR 0 1
60103: PUSH
60104: FOR_TO
60105: IFFALSE 60152
// begin hc_class = 18 ;
60107: LD_ADDR_OWVAR 28
60111: PUSH
60112: LD_INT 18
60114: ST_TO_ADDR
// hc_gallery =  ;
60115: LD_ADDR_OWVAR 33
60119: PUSH
60120: LD_STRING 
60122: ST_TO_ADDR
// animal := CreateHuman ;
60123: LD_ADDR_VAR 0 12
60127: PUSH
60128: CALL_OW 44
60132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60133: LD_VAR 0 12
60137: PPUSH
60138: LD_VAR 0 8
60142: PPUSH
60143: LD_INT 0
60145: PPUSH
60146: CALL 62147 0 3
// end ;
60150: GO 60104
60152: POP
60153: POP
// if tigers then
60154: LD_VAR 0 2
60158: IFFALSE 60242
// for i = 1 to tigers do
60160: LD_ADDR_VAR 0 11
60164: PUSH
60165: DOUBLE
60166: LD_INT 1
60168: DEC
60169: ST_TO_ADDR
60170: LD_VAR 0 2
60174: PUSH
60175: FOR_TO
60176: IFFALSE 60240
// begin hc_class = class_tiger ;
60178: LD_ADDR_OWVAR 28
60182: PUSH
60183: LD_INT 14
60185: ST_TO_ADDR
// hc_gallery =  ;
60186: LD_ADDR_OWVAR 33
60190: PUSH
60191: LD_STRING 
60193: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60194: LD_ADDR_OWVAR 35
60198: PUSH
60199: LD_INT 7
60201: NEG
60202: PPUSH
60203: LD_INT 7
60205: PPUSH
60206: CALL_OW 12
60210: ST_TO_ADDR
// animal := CreateHuman ;
60211: LD_ADDR_VAR 0 12
60215: PUSH
60216: CALL_OW 44
60220: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60221: LD_VAR 0 12
60225: PPUSH
60226: LD_VAR 0 8
60230: PPUSH
60231: LD_INT 0
60233: PPUSH
60234: CALL 62147 0 3
// end ;
60238: GO 60175
60240: POP
60241: POP
// if apemans then
60242: LD_VAR 0 3
60246: IFFALSE 60369
// for i = 1 to apemans do
60248: LD_ADDR_VAR 0 11
60252: PUSH
60253: DOUBLE
60254: LD_INT 1
60256: DEC
60257: ST_TO_ADDR
60258: LD_VAR 0 3
60262: PUSH
60263: FOR_TO
60264: IFFALSE 60367
// begin hc_class = class_apeman ;
60266: LD_ADDR_OWVAR 28
60270: PUSH
60271: LD_INT 12
60273: ST_TO_ADDR
// hc_gallery =  ;
60274: LD_ADDR_OWVAR 33
60278: PUSH
60279: LD_STRING 
60281: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60282: LD_ADDR_OWVAR 35
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PPUSH
60291: LD_INT 2
60293: PPUSH
60294: CALL_OW 12
60298: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60299: LD_ADDR_OWVAR 31
60303: PUSH
60304: LD_INT 1
60306: PPUSH
60307: LD_INT 3
60309: PPUSH
60310: CALL_OW 12
60314: PUSH
60315: LD_INT 1
60317: PPUSH
60318: LD_INT 3
60320: PPUSH
60321: CALL_OW 12
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// animal := CreateHuman ;
60338: LD_ADDR_VAR 0 12
60342: PUSH
60343: CALL_OW 44
60347: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60348: LD_VAR 0 12
60352: PPUSH
60353: LD_VAR 0 8
60357: PPUSH
60358: LD_INT 0
60360: PPUSH
60361: CALL 62147 0 3
// end ;
60365: GO 60263
60367: POP
60368: POP
// if enchidnas then
60369: LD_VAR 0 4
60373: IFFALSE 60440
// for i = 1 to enchidnas do
60375: LD_ADDR_VAR 0 11
60379: PUSH
60380: DOUBLE
60381: LD_INT 1
60383: DEC
60384: ST_TO_ADDR
60385: LD_VAR 0 4
60389: PUSH
60390: FOR_TO
60391: IFFALSE 60438
// begin hc_class = 13 ;
60393: LD_ADDR_OWVAR 28
60397: PUSH
60398: LD_INT 13
60400: ST_TO_ADDR
// hc_gallery =  ;
60401: LD_ADDR_OWVAR 33
60405: PUSH
60406: LD_STRING 
60408: ST_TO_ADDR
// animal := CreateHuman ;
60409: LD_ADDR_VAR 0 12
60413: PUSH
60414: CALL_OW 44
60418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60419: LD_VAR 0 12
60423: PPUSH
60424: LD_VAR 0 8
60428: PPUSH
60429: LD_INT 0
60431: PPUSH
60432: CALL 62147 0 3
// end ;
60436: GO 60390
60438: POP
60439: POP
// if fishes then
60440: LD_VAR 0 7
60444: IFFALSE 60511
// for i = 1 to fishes do
60446: LD_ADDR_VAR 0 11
60450: PUSH
60451: DOUBLE
60452: LD_INT 1
60454: DEC
60455: ST_TO_ADDR
60456: LD_VAR 0 7
60460: PUSH
60461: FOR_TO
60462: IFFALSE 60509
// begin hc_class = 20 ;
60464: LD_ADDR_OWVAR 28
60468: PUSH
60469: LD_INT 20
60471: ST_TO_ADDR
// hc_gallery =  ;
60472: LD_ADDR_OWVAR 33
60476: PUSH
60477: LD_STRING 
60479: ST_TO_ADDR
// animal := CreateHuman ;
60480: LD_ADDR_VAR 0 12
60484: PUSH
60485: CALL_OW 44
60489: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60490: LD_VAR 0 12
60494: PPUSH
60495: LD_VAR 0 9
60499: PPUSH
60500: LD_INT 0
60502: PPUSH
60503: CALL 62147 0 3
// end ;
60507: GO 60461
60509: POP
60510: POP
// end ;
60511: LD_VAR 0 10
60515: RET
// export function WantHeal ( sci , unit ) ; begin
60516: LD_INT 0
60518: PPUSH
// if GetTaskList ( sci ) > 0 then
60519: LD_VAR 0 1
60523: PPUSH
60524: CALL_OW 437
60528: PUSH
60529: LD_INT 0
60531: GREATER
60532: IFFALSE 60602
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60534: LD_VAR 0 1
60538: PPUSH
60539: CALL_OW 437
60543: PUSH
60544: LD_INT 1
60546: ARRAY
60547: PUSH
60548: LD_INT 1
60550: ARRAY
60551: PUSH
60552: LD_STRING l
60554: EQUAL
60555: PUSH
60556: LD_VAR 0 1
60560: PPUSH
60561: CALL_OW 437
60565: PUSH
60566: LD_INT 1
60568: ARRAY
60569: PUSH
60570: LD_INT 4
60572: ARRAY
60573: PUSH
60574: LD_VAR 0 2
60578: EQUAL
60579: AND
60580: IFFALSE 60592
// result := true else
60582: LD_ADDR_VAR 0 3
60586: PUSH
60587: LD_INT 1
60589: ST_TO_ADDR
60590: GO 60600
// result := false ;
60592: LD_ADDR_VAR 0 3
60596: PUSH
60597: LD_INT 0
60599: ST_TO_ADDR
// end else
60600: GO 60610
// result := false ;
60602: LD_ADDR_VAR 0 3
60606: PUSH
60607: LD_INT 0
60609: ST_TO_ADDR
// end ;
60610: LD_VAR 0 3
60614: RET
// export function HealTarget ( sci ) ; begin
60615: LD_INT 0
60617: PPUSH
// if not sci then
60618: LD_VAR 0 1
60622: NOT
60623: IFFALSE 60627
// exit ;
60625: GO 60692
// result := 0 ;
60627: LD_ADDR_VAR 0 2
60631: PUSH
60632: LD_INT 0
60634: ST_TO_ADDR
// if GetTaskList ( sci ) then
60635: LD_VAR 0 1
60639: PPUSH
60640: CALL_OW 437
60644: IFFALSE 60692
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60646: LD_VAR 0 1
60650: PPUSH
60651: CALL_OW 437
60655: PUSH
60656: LD_INT 1
60658: ARRAY
60659: PUSH
60660: LD_INT 1
60662: ARRAY
60663: PUSH
60664: LD_STRING l
60666: EQUAL
60667: IFFALSE 60692
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60669: LD_ADDR_VAR 0 2
60673: PUSH
60674: LD_VAR 0 1
60678: PPUSH
60679: CALL_OW 437
60683: PUSH
60684: LD_INT 1
60686: ARRAY
60687: PUSH
60688: LD_INT 4
60690: ARRAY
60691: ST_TO_ADDR
// end ;
60692: LD_VAR 0 2
60696: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60697: LD_INT 0
60699: PPUSH
60700: PPUSH
60701: PPUSH
60702: PPUSH
// if not base_units then
60703: LD_VAR 0 1
60707: NOT
60708: IFFALSE 60712
// exit ;
60710: GO 60799
// result := false ;
60712: LD_ADDR_VAR 0 2
60716: PUSH
60717: LD_INT 0
60719: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60720: LD_ADDR_VAR 0 5
60724: PUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: LD_INT 21
60732: PUSH
60733: LD_INT 3
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PPUSH
60740: CALL_OW 72
60744: ST_TO_ADDR
// if not tmp then
60745: LD_VAR 0 5
60749: NOT
60750: IFFALSE 60754
// exit ;
60752: GO 60799
// for i in tmp do
60754: LD_ADDR_VAR 0 3
60758: PUSH
60759: LD_VAR 0 5
60763: PUSH
60764: FOR_IN
60765: IFFALSE 60797
// begin result := EnemyInRange ( i , 22 ) ;
60767: LD_ADDR_VAR 0 2
60771: PUSH
60772: LD_VAR 0 3
60776: PPUSH
60777: LD_INT 22
60779: PPUSH
60780: CALL 58412 0 2
60784: ST_TO_ADDR
// if result then
60785: LD_VAR 0 2
60789: IFFALSE 60795
// exit ;
60791: POP
60792: POP
60793: GO 60799
// end ;
60795: GO 60764
60797: POP
60798: POP
// end ;
60799: LD_VAR 0 2
60803: RET
// export function FilterByTag ( units , tag ) ; begin
60804: LD_INT 0
60806: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60807: LD_ADDR_VAR 0 3
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: LD_INT 120
60819: PUSH
60820: LD_VAR 0 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PPUSH
60829: CALL_OW 72
60833: ST_TO_ADDR
// end ;
60834: LD_VAR 0 3
60838: RET
// export function IsDriver ( un ) ; begin
60839: LD_INT 0
60841: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60842: LD_ADDR_VAR 0 2
60846: PUSH
60847: LD_VAR 0 1
60851: PUSH
60852: LD_INT 55
60854: PUSH
60855: EMPTY
60856: LIST
60857: PPUSH
60858: CALL_OW 69
60862: IN
60863: ST_TO_ADDR
// end ;
60864: LD_VAR 0 2
60868: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60869: LD_INT 0
60871: PPUSH
60872: PPUSH
// list := [ ] ;
60873: LD_ADDR_VAR 0 5
60877: PUSH
60878: EMPTY
60879: ST_TO_ADDR
// case d of 0 :
60880: LD_VAR 0 3
60884: PUSH
60885: LD_INT 0
60887: DOUBLE
60888: EQUAL
60889: IFTRUE 60893
60891: GO 61026
60893: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60894: LD_ADDR_VAR 0 5
60898: PUSH
60899: LD_VAR 0 1
60903: PUSH
60904: LD_INT 4
60906: MINUS
60907: PUSH
60908: LD_VAR 0 2
60912: PUSH
60913: LD_INT 4
60915: MINUS
60916: PUSH
60917: LD_INT 2
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: PUSH
60925: LD_VAR 0 1
60929: PUSH
60930: LD_INT 3
60932: MINUS
60933: PUSH
60934: LD_VAR 0 2
60938: PUSH
60939: LD_INT 1
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: PUSH
60947: LD_VAR 0 1
60951: PUSH
60952: LD_INT 4
60954: PLUS
60955: PUSH
60956: LD_VAR 0 2
60960: PUSH
60961: LD_INT 4
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: PUSH
60969: LD_VAR 0 1
60973: PUSH
60974: LD_INT 3
60976: PLUS
60977: PUSH
60978: LD_VAR 0 2
60982: PUSH
60983: LD_INT 3
60985: PLUS
60986: PUSH
60987: LD_INT 5
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: LIST
60994: PUSH
60995: LD_VAR 0 1
60999: PUSH
61000: LD_VAR 0 2
61004: PUSH
61005: LD_INT 4
61007: PLUS
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: ST_TO_ADDR
// end ; 1 :
61024: GO 61724
61026: LD_INT 1
61028: DOUBLE
61029: EQUAL
61030: IFTRUE 61034
61032: GO 61167
61034: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61035: LD_ADDR_VAR 0 5
61039: PUSH
61040: LD_VAR 0 1
61044: PUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_INT 4
61052: MINUS
61053: PUSH
61054: LD_INT 3
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 3
61069: MINUS
61070: PUSH
61071: LD_VAR 0 2
61075: PUSH
61076: LD_INT 3
61078: MINUS
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: PUSH
61088: LD_VAR 0 1
61092: PUSH
61093: LD_INT 4
61095: MINUS
61096: PUSH
61097: LD_VAR 0 2
61101: PUSH
61102: LD_INT 1
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: LIST
61109: PUSH
61110: LD_VAR 0 1
61114: PUSH
61115: LD_VAR 0 2
61119: PUSH
61120: LD_INT 3
61122: PLUS
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: PUSH
61132: LD_VAR 0 1
61136: PUSH
61137: LD_INT 4
61139: PLUS
61140: PUSH
61141: LD_VAR 0 2
61145: PUSH
61146: LD_INT 4
61148: PLUS
61149: PUSH
61150: LD_INT 5
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: LIST
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// end ; 2 :
61165: GO 61724
61167: LD_INT 2
61169: DOUBLE
61170: EQUAL
61171: IFTRUE 61175
61173: GO 61304
61175: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61176: LD_ADDR_VAR 0 5
61180: PUSH
61181: LD_VAR 0 1
61185: PUSH
61186: LD_VAR 0 2
61190: PUSH
61191: LD_INT 3
61193: MINUS
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: PUSH
61203: LD_VAR 0 1
61207: PUSH
61208: LD_INT 4
61210: PLUS
61211: PUSH
61212: LD_VAR 0 2
61216: PUSH
61217: LD_INT 4
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: LIST
61224: PUSH
61225: LD_VAR 0 1
61229: PUSH
61230: LD_VAR 0 2
61234: PUSH
61235: LD_INT 4
61237: PLUS
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: PUSH
61247: LD_VAR 0 1
61251: PUSH
61252: LD_INT 3
61254: MINUS
61255: PUSH
61256: LD_VAR 0 2
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: LIST
61268: PUSH
61269: LD_VAR 0 1
61273: PUSH
61274: LD_INT 4
61276: MINUS
61277: PUSH
61278: LD_VAR 0 2
61282: PUSH
61283: LD_INT 4
61285: MINUS
61286: PUSH
61287: LD_INT 2
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: LIST
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: ST_TO_ADDR
// end ; 3 :
61302: GO 61724
61304: LD_INT 3
61306: DOUBLE
61307: EQUAL
61308: IFTRUE 61312
61310: GO 61445
61312: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61313: LD_ADDR_VAR 0 5
61317: PUSH
61318: LD_VAR 0 1
61322: PUSH
61323: LD_INT 3
61325: PLUS
61326: PUSH
61327: LD_VAR 0 2
61331: PUSH
61332: LD_INT 4
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: PUSH
61340: LD_VAR 0 1
61344: PUSH
61345: LD_INT 4
61347: PLUS
61348: PUSH
61349: LD_VAR 0 2
61353: PUSH
61354: LD_INT 4
61356: PLUS
61357: PUSH
61358: LD_INT 5
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: LIST
61365: PUSH
61366: LD_VAR 0 1
61370: PUSH
61371: LD_INT 4
61373: MINUS
61374: PUSH
61375: LD_VAR 0 2
61379: PUSH
61380: LD_INT 1
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: PUSH
61388: LD_VAR 0 1
61392: PUSH
61393: LD_VAR 0 2
61397: PUSH
61398: LD_INT 4
61400: MINUS
61401: PUSH
61402: LD_INT 3
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: LIST
61409: PUSH
61410: LD_VAR 0 1
61414: PUSH
61415: LD_INT 3
61417: MINUS
61418: PUSH
61419: LD_VAR 0 2
61423: PUSH
61424: LD_INT 3
61426: MINUS
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: LIST
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: ST_TO_ADDR
// end ; 4 :
61443: GO 61724
61445: LD_INT 4
61447: DOUBLE
61448: EQUAL
61449: IFTRUE 61453
61451: GO 61586
61453: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61454: LD_ADDR_VAR 0 5
61458: PUSH
61459: LD_VAR 0 1
61463: PUSH
61464: LD_VAR 0 2
61468: PUSH
61469: LD_INT 4
61471: PLUS
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: PUSH
61481: LD_VAR 0 1
61485: PUSH
61486: LD_INT 3
61488: PLUS
61489: PUSH
61490: LD_VAR 0 2
61494: PUSH
61495: LD_INT 3
61497: PLUS
61498: PUSH
61499: LD_INT 5
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: PUSH
61507: LD_VAR 0 1
61511: PUSH
61512: LD_INT 4
61514: PLUS
61515: PUSH
61516: LD_VAR 0 2
61520: PUSH
61521: LD_INT 4
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: LIST
61528: PUSH
61529: LD_VAR 0 1
61533: PUSH
61534: LD_VAR 0 2
61538: PUSH
61539: LD_INT 3
61541: MINUS
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: LIST
61550: PUSH
61551: LD_VAR 0 1
61555: PUSH
61556: LD_INT 4
61558: MINUS
61559: PUSH
61560: LD_VAR 0 2
61564: PUSH
61565: LD_INT 4
61567: MINUS
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: LIST
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: ST_TO_ADDR
// end ; 5 :
61584: GO 61724
61586: LD_INT 5
61588: DOUBLE
61589: EQUAL
61590: IFTRUE 61594
61592: GO 61723
61594: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61595: LD_ADDR_VAR 0 5
61599: PUSH
61600: LD_VAR 0 1
61604: PUSH
61605: LD_INT 4
61607: MINUS
61608: PUSH
61609: LD_VAR 0 2
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: LIST
61621: PUSH
61622: LD_VAR 0 1
61626: PUSH
61627: LD_VAR 0 2
61631: PUSH
61632: LD_INT 4
61634: MINUS
61635: PUSH
61636: LD_INT 3
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: LIST
61643: PUSH
61644: LD_VAR 0 1
61648: PUSH
61649: LD_INT 4
61651: PLUS
61652: PUSH
61653: LD_VAR 0 2
61657: PUSH
61658: LD_INT 4
61660: PLUS
61661: PUSH
61662: LD_INT 5
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: LIST
61669: PUSH
61670: LD_VAR 0 1
61674: PUSH
61675: LD_INT 3
61677: PLUS
61678: PUSH
61679: LD_VAR 0 2
61683: PUSH
61684: LD_INT 4
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: PUSH
61692: LD_VAR 0 1
61696: PUSH
61697: LD_VAR 0 2
61701: PUSH
61702: LD_INT 3
61704: PLUS
61705: PUSH
61706: LD_INT 0
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: ST_TO_ADDR
// end ; end ;
61721: GO 61724
61723: POP
// result := list ;
61724: LD_ADDR_VAR 0 4
61728: PUSH
61729: LD_VAR 0 5
61733: ST_TO_ADDR
// end ;
61734: LD_VAR 0 4
61738: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61739: LD_INT 0
61741: PPUSH
61742: PPUSH
61743: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61744: LD_VAR 0 1
61748: NOT
61749: PUSH
61750: LD_VAR 0 2
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: LD_INT 4
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: IN
61773: NOT
61774: OR
61775: IFFALSE 61779
// exit ;
61777: GO 61871
// tmp := [ ] ;
61779: LD_ADDR_VAR 0 5
61783: PUSH
61784: EMPTY
61785: ST_TO_ADDR
// for i in units do
61786: LD_ADDR_VAR 0 4
61790: PUSH
61791: LD_VAR 0 1
61795: PUSH
61796: FOR_IN
61797: IFFALSE 61840
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61799: LD_ADDR_VAR 0 5
61803: PUSH
61804: LD_VAR 0 5
61808: PPUSH
61809: LD_VAR 0 5
61813: PUSH
61814: LD_INT 1
61816: PLUS
61817: PPUSH
61818: LD_VAR 0 4
61822: PPUSH
61823: LD_VAR 0 2
61827: PPUSH
61828: CALL_OW 259
61832: PPUSH
61833: CALL_OW 2
61837: ST_TO_ADDR
61838: GO 61796
61840: POP
61841: POP
// if not tmp then
61842: LD_VAR 0 5
61846: NOT
61847: IFFALSE 61851
// exit ;
61849: GO 61871
// result := SortListByListDesc ( units , tmp ) ;
61851: LD_ADDR_VAR 0 3
61855: PUSH
61856: LD_VAR 0 1
61860: PPUSH
61861: LD_VAR 0 5
61865: PPUSH
61866: CALL_OW 77
61870: ST_TO_ADDR
// end ;
61871: LD_VAR 0 3
61875: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61876: LD_INT 0
61878: PPUSH
61879: PPUSH
61880: PPUSH
// result := false ;
61881: LD_ADDR_VAR 0 3
61885: PUSH
61886: LD_INT 0
61888: ST_TO_ADDR
// x := GetX ( building ) ;
61889: LD_ADDR_VAR 0 4
61893: PUSH
61894: LD_VAR 0 2
61898: PPUSH
61899: CALL_OW 250
61903: ST_TO_ADDR
// y := GetY ( building ) ;
61904: LD_ADDR_VAR 0 5
61908: PUSH
61909: LD_VAR 0 2
61913: PPUSH
61914: CALL_OW 251
61918: ST_TO_ADDR
// if not building or not x or not y then
61919: LD_VAR 0 2
61923: NOT
61924: PUSH
61925: LD_VAR 0 4
61929: NOT
61930: OR
61931: PUSH
61932: LD_VAR 0 5
61936: NOT
61937: OR
61938: IFFALSE 61942
// exit ;
61940: GO 62034
// if GetTaskList ( unit ) then
61942: LD_VAR 0 1
61946: PPUSH
61947: CALL_OW 437
61951: IFFALSE 62034
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61953: LD_STRING e
61955: PUSH
61956: LD_VAR 0 1
61960: PPUSH
61961: CALL_OW 437
61965: PUSH
61966: LD_INT 1
61968: ARRAY
61969: PUSH
61970: LD_INT 1
61972: ARRAY
61973: EQUAL
61974: PUSH
61975: LD_VAR 0 4
61979: PUSH
61980: LD_VAR 0 1
61984: PPUSH
61985: CALL_OW 437
61989: PUSH
61990: LD_INT 1
61992: ARRAY
61993: PUSH
61994: LD_INT 2
61996: ARRAY
61997: EQUAL
61998: AND
61999: PUSH
62000: LD_VAR 0 5
62004: PUSH
62005: LD_VAR 0 1
62009: PPUSH
62010: CALL_OW 437
62014: PUSH
62015: LD_INT 1
62017: ARRAY
62018: PUSH
62019: LD_INT 3
62021: ARRAY
62022: EQUAL
62023: AND
62024: IFFALSE 62034
// result := true end ;
62026: LD_ADDR_VAR 0 3
62030: PUSH
62031: LD_INT 1
62033: ST_TO_ADDR
// end ;
62034: LD_VAR 0 3
62038: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62039: LD_INT 0
62041: PPUSH
// result := false ;
62042: LD_ADDR_VAR 0 4
62046: PUSH
62047: LD_INT 0
62049: ST_TO_ADDR
// if GetTaskList ( unit ) then
62050: LD_VAR 0 1
62054: PPUSH
62055: CALL_OW 437
62059: IFFALSE 62142
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62061: LD_STRING M
62063: PUSH
62064: LD_VAR 0 1
62068: PPUSH
62069: CALL_OW 437
62073: PUSH
62074: LD_INT 1
62076: ARRAY
62077: PUSH
62078: LD_INT 1
62080: ARRAY
62081: EQUAL
62082: PUSH
62083: LD_VAR 0 2
62087: PUSH
62088: LD_VAR 0 1
62092: PPUSH
62093: CALL_OW 437
62097: PUSH
62098: LD_INT 1
62100: ARRAY
62101: PUSH
62102: LD_INT 2
62104: ARRAY
62105: EQUAL
62106: AND
62107: PUSH
62108: LD_VAR 0 3
62112: PUSH
62113: LD_VAR 0 1
62117: PPUSH
62118: CALL_OW 437
62122: PUSH
62123: LD_INT 1
62125: ARRAY
62126: PUSH
62127: LD_INT 3
62129: ARRAY
62130: EQUAL
62131: AND
62132: IFFALSE 62142
// result := true ;
62134: LD_ADDR_VAR 0 4
62138: PUSH
62139: LD_INT 1
62141: ST_TO_ADDR
// end ; end ;
62142: LD_VAR 0 4
62146: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62147: LD_INT 0
62149: PPUSH
62150: PPUSH
62151: PPUSH
62152: PPUSH
// if not unit or not area then
62153: LD_VAR 0 1
62157: NOT
62158: PUSH
62159: LD_VAR 0 2
62163: NOT
62164: OR
62165: IFFALSE 62169
// exit ;
62167: GO 62333
// tmp := AreaToList ( area , i ) ;
62169: LD_ADDR_VAR 0 6
62173: PUSH
62174: LD_VAR 0 2
62178: PPUSH
62179: LD_VAR 0 5
62183: PPUSH
62184: CALL_OW 517
62188: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62189: LD_ADDR_VAR 0 5
62193: PUSH
62194: DOUBLE
62195: LD_INT 1
62197: DEC
62198: ST_TO_ADDR
62199: LD_VAR 0 6
62203: PUSH
62204: LD_INT 1
62206: ARRAY
62207: PUSH
62208: FOR_TO
62209: IFFALSE 62331
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62211: LD_ADDR_VAR 0 7
62215: PUSH
62216: LD_VAR 0 6
62220: PUSH
62221: LD_INT 1
62223: ARRAY
62224: PUSH
62225: LD_VAR 0 5
62229: ARRAY
62230: PUSH
62231: LD_VAR 0 6
62235: PUSH
62236: LD_INT 2
62238: ARRAY
62239: PUSH
62240: LD_VAR 0 5
62244: ARRAY
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62250: LD_VAR 0 7
62254: PUSH
62255: LD_INT 1
62257: ARRAY
62258: PPUSH
62259: LD_VAR 0 7
62263: PUSH
62264: LD_INT 2
62266: ARRAY
62267: PPUSH
62268: CALL_OW 428
62272: PUSH
62273: LD_INT 0
62275: EQUAL
62276: IFFALSE 62329
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62278: LD_VAR 0 1
62282: PPUSH
62283: LD_VAR 0 7
62287: PUSH
62288: LD_INT 1
62290: ARRAY
62291: PPUSH
62292: LD_VAR 0 7
62296: PUSH
62297: LD_INT 2
62299: ARRAY
62300: PPUSH
62301: LD_VAR 0 3
62305: PPUSH
62306: CALL_OW 48
// result := IsPlaced ( unit ) ;
62310: LD_ADDR_VAR 0 4
62314: PUSH
62315: LD_VAR 0 1
62319: PPUSH
62320: CALL_OW 305
62324: ST_TO_ADDR
// exit ;
62325: POP
62326: POP
62327: GO 62333
// end ; end ;
62329: GO 62208
62331: POP
62332: POP
// end ;
62333: LD_VAR 0 4
62337: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62338: LD_INT 0
62340: PPUSH
62341: PPUSH
62342: PPUSH
// if not side or side > 8 then
62343: LD_VAR 0 1
62347: NOT
62348: PUSH
62349: LD_VAR 0 1
62353: PUSH
62354: LD_INT 8
62356: GREATER
62357: OR
62358: IFFALSE 62362
// exit ;
62360: GO 62549
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62362: LD_ADDR_VAR 0 4
62366: PUSH
62367: LD_INT 22
62369: PUSH
62370: LD_VAR 0 1
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 21
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PPUSH
62393: CALL_OW 69
62397: ST_TO_ADDR
// if not tmp then
62398: LD_VAR 0 4
62402: NOT
62403: IFFALSE 62407
// exit ;
62405: GO 62549
// enable_addtolog := true ;
62407: LD_ADDR_OWVAR 81
62411: PUSH
62412: LD_INT 1
62414: ST_TO_ADDR
// AddToLog ( [ ) ;
62415: LD_STRING [
62417: PPUSH
62418: CALL_OW 561
// for i in tmp do
62422: LD_ADDR_VAR 0 3
62426: PUSH
62427: LD_VAR 0 4
62431: PUSH
62432: FOR_IN
62433: IFFALSE 62540
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62435: LD_STRING [
62437: PUSH
62438: LD_VAR 0 3
62442: PPUSH
62443: CALL_OW 266
62447: STR
62448: PUSH
62449: LD_STRING , 
62451: STR
62452: PUSH
62453: LD_VAR 0 3
62457: PPUSH
62458: CALL_OW 250
62462: STR
62463: PUSH
62464: LD_STRING , 
62466: STR
62467: PUSH
62468: LD_VAR 0 3
62472: PPUSH
62473: CALL_OW 251
62477: STR
62478: PUSH
62479: LD_STRING , 
62481: STR
62482: PUSH
62483: LD_VAR 0 3
62487: PPUSH
62488: CALL_OW 254
62492: STR
62493: PUSH
62494: LD_STRING , 
62496: STR
62497: PUSH
62498: LD_VAR 0 3
62502: PPUSH
62503: LD_INT 1
62505: PPUSH
62506: CALL_OW 268
62510: STR
62511: PUSH
62512: LD_STRING , 
62514: STR
62515: PUSH
62516: LD_VAR 0 3
62520: PPUSH
62521: LD_INT 2
62523: PPUSH
62524: CALL_OW 268
62528: STR
62529: PUSH
62530: LD_STRING ],
62532: STR
62533: PPUSH
62534: CALL_OW 561
// end ;
62538: GO 62432
62540: POP
62541: POP
// AddToLog ( ]; ) ;
62542: LD_STRING ];
62544: PPUSH
62545: CALL_OW 561
// end ;
62549: LD_VAR 0 2
62553: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62554: LD_INT 0
62556: PPUSH
62557: PPUSH
62558: PPUSH
62559: PPUSH
62560: PPUSH
// if not area or not rate or not max then
62561: LD_VAR 0 1
62565: NOT
62566: PUSH
62567: LD_VAR 0 2
62571: NOT
62572: OR
62573: PUSH
62574: LD_VAR 0 4
62578: NOT
62579: OR
62580: IFFALSE 62584
// exit ;
62582: GO 62773
// while 1 do
62584: LD_INT 1
62586: IFFALSE 62773
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62588: LD_ADDR_VAR 0 9
62592: PUSH
62593: LD_VAR 0 1
62597: PPUSH
62598: LD_INT 1
62600: PPUSH
62601: CALL_OW 287
62605: PUSH
62606: LD_INT 10
62608: MUL
62609: ST_TO_ADDR
// r := rate / 10 ;
62610: LD_ADDR_VAR 0 7
62614: PUSH
62615: LD_VAR 0 2
62619: PUSH
62620: LD_INT 10
62622: DIVREAL
62623: ST_TO_ADDR
// time := 1 1$00 ;
62624: LD_ADDR_VAR 0 8
62628: PUSH
62629: LD_INT 2100
62631: ST_TO_ADDR
// if amount < min then
62632: LD_VAR 0 9
62636: PUSH
62637: LD_VAR 0 3
62641: LESS
62642: IFFALSE 62660
// r := r * 2 else
62644: LD_ADDR_VAR 0 7
62648: PUSH
62649: LD_VAR 0 7
62653: PUSH
62654: LD_INT 2
62656: MUL
62657: ST_TO_ADDR
62658: GO 62686
// if amount > max then
62660: LD_VAR 0 9
62664: PUSH
62665: LD_VAR 0 4
62669: GREATER
62670: IFFALSE 62686
// r := r / 2 ;
62672: LD_ADDR_VAR 0 7
62676: PUSH
62677: LD_VAR 0 7
62681: PUSH
62682: LD_INT 2
62684: DIVREAL
62685: ST_TO_ADDR
// time := time / r ;
62686: LD_ADDR_VAR 0 8
62690: PUSH
62691: LD_VAR 0 8
62695: PUSH
62696: LD_VAR 0 7
62700: DIVREAL
62701: ST_TO_ADDR
// if time < 0 then
62702: LD_VAR 0 8
62706: PUSH
62707: LD_INT 0
62709: LESS
62710: IFFALSE 62727
// time := time * - 1 ;
62712: LD_ADDR_VAR 0 8
62716: PUSH
62717: LD_VAR 0 8
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: MUL
62726: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62727: LD_VAR 0 8
62731: PUSH
62732: LD_INT 35
62734: PPUSH
62735: LD_INT 875
62737: PPUSH
62738: CALL_OW 12
62742: PLUS
62743: PPUSH
62744: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62748: LD_INT 1
62750: PPUSH
62751: LD_INT 5
62753: PPUSH
62754: CALL_OW 12
62758: PPUSH
62759: LD_VAR 0 1
62763: PPUSH
62764: LD_INT 1
62766: PPUSH
62767: CALL_OW 55
// end ;
62771: GO 62584
// end ;
62773: LD_VAR 0 5
62777: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62778: LD_INT 0
62780: PPUSH
62781: PPUSH
62782: PPUSH
62783: PPUSH
62784: PPUSH
62785: PPUSH
62786: PPUSH
62787: PPUSH
// if not turrets or not factories then
62788: LD_VAR 0 1
62792: NOT
62793: PUSH
62794: LD_VAR 0 2
62798: NOT
62799: OR
62800: IFFALSE 62804
// exit ;
62802: GO 63111
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62804: LD_ADDR_VAR 0 10
62808: PUSH
62809: LD_INT 5
62811: PUSH
62812: LD_INT 6
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 2
62821: PUSH
62822: LD_INT 4
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: LD_INT 5
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 24
62846: PUSH
62847: LD_INT 25
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 23
62856: PUSH
62857: LD_INT 27
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 42
62870: PUSH
62871: LD_INT 43
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 44
62880: PUSH
62881: LD_INT 46
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 45
62890: PUSH
62891: LD_INT 47
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: LIST
62907: ST_TO_ADDR
// result := [ ] ;
62908: LD_ADDR_VAR 0 3
62912: PUSH
62913: EMPTY
62914: ST_TO_ADDR
// for i in turrets do
62915: LD_ADDR_VAR 0 4
62919: PUSH
62920: LD_VAR 0 1
62924: PUSH
62925: FOR_IN
62926: IFFALSE 63109
// begin nat := GetNation ( i ) ;
62928: LD_ADDR_VAR 0 7
62932: PUSH
62933: LD_VAR 0 4
62937: PPUSH
62938: CALL_OW 248
62942: ST_TO_ADDR
// weapon := 0 ;
62943: LD_ADDR_VAR 0 8
62947: PUSH
62948: LD_INT 0
62950: ST_TO_ADDR
// if not nat then
62951: LD_VAR 0 7
62955: NOT
62956: IFFALSE 62960
// continue ;
62958: GO 62925
// for j in list [ nat ] do
62960: LD_ADDR_VAR 0 5
62964: PUSH
62965: LD_VAR 0 10
62969: PUSH
62970: LD_VAR 0 7
62974: ARRAY
62975: PUSH
62976: FOR_IN
62977: IFFALSE 63018
// if GetBWeapon ( i ) = j [ 1 ] then
62979: LD_VAR 0 4
62983: PPUSH
62984: CALL_OW 269
62988: PUSH
62989: LD_VAR 0 5
62993: PUSH
62994: LD_INT 1
62996: ARRAY
62997: EQUAL
62998: IFFALSE 63016
// begin weapon := j [ 2 ] ;
63000: LD_ADDR_VAR 0 8
63004: PUSH
63005: LD_VAR 0 5
63009: PUSH
63010: LD_INT 2
63012: ARRAY
63013: ST_TO_ADDR
// break ;
63014: GO 63018
// end ;
63016: GO 62976
63018: POP
63019: POP
// if not weapon then
63020: LD_VAR 0 8
63024: NOT
63025: IFFALSE 63029
// continue ;
63027: GO 62925
// for k in factories do
63029: LD_ADDR_VAR 0 6
63033: PUSH
63034: LD_VAR 0 2
63038: PUSH
63039: FOR_IN
63040: IFFALSE 63105
// begin weapons := AvailableWeaponList ( k ) ;
63042: LD_ADDR_VAR 0 9
63046: PUSH
63047: LD_VAR 0 6
63051: PPUSH
63052: CALL_OW 478
63056: ST_TO_ADDR
// if not weapons then
63057: LD_VAR 0 9
63061: NOT
63062: IFFALSE 63066
// continue ;
63064: GO 63039
// if weapon in weapons then
63066: LD_VAR 0 8
63070: PUSH
63071: LD_VAR 0 9
63075: IN
63076: IFFALSE 63103
// begin result := [ i , weapon ] ;
63078: LD_ADDR_VAR 0 3
63082: PUSH
63083: LD_VAR 0 4
63087: PUSH
63088: LD_VAR 0 8
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: ST_TO_ADDR
// exit ;
63097: POP
63098: POP
63099: POP
63100: POP
63101: GO 63111
// end ; end ;
63103: GO 63039
63105: POP
63106: POP
// end ;
63107: GO 62925
63109: POP
63110: POP
// end ;
63111: LD_VAR 0 3
63115: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63116: LD_INT 0
63118: PPUSH
// if not side or side > 8 then
63119: LD_VAR 0 3
63123: NOT
63124: PUSH
63125: LD_VAR 0 3
63129: PUSH
63130: LD_INT 8
63132: GREATER
63133: OR
63134: IFFALSE 63138
// exit ;
63136: GO 63197
// if not range then
63138: LD_VAR 0 4
63142: NOT
63143: IFFALSE 63154
// range := - 12 ;
63145: LD_ADDR_VAR 0 4
63149: PUSH
63150: LD_INT 12
63152: NEG
63153: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63154: LD_VAR 0 1
63158: PPUSH
63159: LD_VAR 0 2
63163: PPUSH
63164: LD_VAR 0 3
63168: PPUSH
63169: LD_VAR 0 4
63173: PPUSH
63174: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63178: LD_VAR 0 1
63182: PPUSH
63183: LD_VAR 0 2
63187: PPUSH
63188: LD_VAR 0 3
63192: PPUSH
63193: CALL_OW 331
// end ;
63197: LD_VAR 0 5
63201: RET
// export function Video ( mode ) ; begin
63202: LD_INT 0
63204: PPUSH
// ingame_video = mode ;
63205: LD_ADDR_OWVAR 52
63209: PUSH
63210: LD_VAR 0 1
63214: ST_TO_ADDR
// interface_hidden = mode ;
63215: LD_ADDR_OWVAR 54
63219: PUSH
63220: LD_VAR 0 1
63224: ST_TO_ADDR
// end ;
63225: LD_VAR 0 2
63229: RET
// export function Join ( array , element ) ; begin
63230: LD_INT 0
63232: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63233: LD_ADDR_VAR 0 3
63237: PUSH
63238: LD_VAR 0 1
63242: PPUSH
63243: LD_VAR 0 1
63247: PUSH
63248: LD_INT 1
63250: PLUS
63251: PPUSH
63252: LD_VAR 0 2
63256: PPUSH
63257: CALL_OW 1
63261: ST_TO_ADDR
// end ;
63262: LD_VAR 0 3
63266: RET
// export function JoinUnion ( array , element ) ; begin
63267: LD_INT 0
63269: PPUSH
// result := array union element ;
63270: LD_ADDR_VAR 0 3
63274: PUSH
63275: LD_VAR 0 1
63279: PUSH
63280: LD_VAR 0 2
63284: UNION
63285: ST_TO_ADDR
// end ;
63286: LD_VAR 0 3
63290: RET
// export function GetBehemoths ( side ) ; begin
63291: LD_INT 0
63293: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
63294: LD_ADDR_VAR 0 2
63298: PUSH
63299: LD_INT 22
63301: PUSH
63302: LD_VAR 0 1
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: LD_INT 31
63313: PUSH
63314: LD_INT 25
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PPUSH
63325: CALL_OW 69
63329: ST_TO_ADDR
// end ;
63330: LD_VAR 0 2
63334: RET
// export function Shuffle ( array ) ; var i , index ; begin
63335: LD_INT 0
63337: PPUSH
63338: PPUSH
63339: PPUSH
// result := [ ] ;
63340: LD_ADDR_VAR 0 2
63344: PUSH
63345: EMPTY
63346: ST_TO_ADDR
// if not array then
63347: LD_VAR 0 1
63351: NOT
63352: IFFALSE 63356
// exit ;
63354: GO 63455
// Randomize ;
63356: CALL_OW 10
// for i = array downto 1 do
63360: LD_ADDR_VAR 0 3
63364: PUSH
63365: DOUBLE
63366: LD_VAR 0 1
63370: INC
63371: ST_TO_ADDR
63372: LD_INT 1
63374: PUSH
63375: FOR_DOWNTO
63376: IFFALSE 63453
// begin index := rand ( 1 , array ) ;
63378: LD_ADDR_VAR 0 4
63382: PUSH
63383: LD_INT 1
63385: PPUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 12
63395: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63396: LD_ADDR_VAR 0 2
63400: PUSH
63401: LD_VAR 0 2
63405: PPUSH
63406: LD_VAR 0 2
63410: PUSH
63411: LD_INT 1
63413: PLUS
63414: PPUSH
63415: LD_VAR 0 1
63419: PUSH
63420: LD_VAR 0 4
63424: ARRAY
63425: PPUSH
63426: CALL_OW 2
63430: ST_TO_ADDR
// array := Delete ( array , index ) ;
63431: LD_ADDR_VAR 0 1
63435: PUSH
63436: LD_VAR 0 1
63440: PPUSH
63441: LD_VAR 0 4
63445: PPUSH
63446: CALL_OW 3
63450: ST_TO_ADDR
// end ;
63451: GO 63375
63453: POP
63454: POP
// end ;
63455: LD_VAR 0 2
63459: RET
// export function GetBaseMaterials ( base ) ; begin
63460: LD_INT 0
63462: PPUSH
// result := [ 0 , 0 , 0 ] ;
63463: LD_ADDR_VAR 0 2
63467: PUSH
63468: LD_INT 0
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: LIST
63481: ST_TO_ADDR
// if not base then
63482: LD_VAR 0 1
63486: NOT
63487: IFFALSE 63491
// exit ;
63489: GO 63540
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63491: LD_ADDR_VAR 0 2
63495: PUSH
63496: LD_VAR 0 1
63500: PPUSH
63501: LD_INT 1
63503: PPUSH
63504: CALL_OW 275
63508: PUSH
63509: LD_VAR 0 1
63513: PPUSH
63514: LD_INT 2
63516: PPUSH
63517: CALL_OW 275
63521: PUSH
63522: LD_VAR 0 1
63526: PPUSH
63527: LD_INT 3
63529: PPUSH
63530: CALL_OW 275
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: LIST
63539: ST_TO_ADDR
// end ;
63540: LD_VAR 0 2
63544: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63545: LD_INT 0
63547: PPUSH
63548: PPUSH
// result := array ;
63549: LD_ADDR_VAR 0 3
63553: PUSH
63554: LD_VAR 0 1
63558: ST_TO_ADDR
// if size >= result then
63559: LD_VAR 0 2
63563: PUSH
63564: LD_VAR 0 3
63568: GREATEREQUAL
63569: IFFALSE 63573
// exit ;
63571: GO 63623
// if size then
63573: LD_VAR 0 2
63577: IFFALSE 63623
// for i := array downto size do
63579: LD_ADDR_VAR 0 4
63583: PUSH
63584: DOUBLE
63585: LD_VAR 0 1
63589: INC
63590: ST_TO_ADDR
63591: LD_VAR 0 2
63595: PUSH
63596: FOR_DOWNTO
63597: IFFALSE 63621
// result := Delete ( result , result ) ;
63599: LD_ADDR_VAR 0 3
63603: PUSH
63604: LD_VAR 0 3
63608: PPUSH
63609: LD_VAR 0 3
63613: PPUSH
63614: CALL_OW 3
63618: ST_TO_ADDR
63619: GO 63596
63621: POP
63622: POP
// end ;
63623: LD_VAR 0 3
63627: RET
// export function ComExit ( unit ) ; var tmp ; begin
63628: LD_INT 0
63630: PPUSH
63631: PPUSH
// if not IsInUnit ( unit ) then
63632: LD_VAR 0 1
63636: PPUSH
63637: CALL_OW 310
63641: NOT
63642: IFFALSE 63646
// exit ;
63644: GO 63706
// tmp := IsInUnit ( unit ) ;
63646: LD_ADDR_VAR 0 3
63650: PUSH
63651: LD_VAR 0 1
63655: PPUSH
63656: CALL_OW 310
63660: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63661: LD_VAR 0 3
63665: PPUSH
63666: CALL_OW 247
63670: PUSH
63671: LD_INT 2
63673: EQUAL
63674: IFFALSE 63687
// ComExitVehicle ( unit ) else
63676: LD_VAR 0 1
63680: PPUSH
63681: CALL_OW 121
63685: GO 63696
// ComExitBuilding ( unit ) ;
63687: LD_VAR 0 1
63691: PPUSH
63692: CALL_OW 122
// result := tmp ;
63696: LD_ADDR_VAR 0 2
63700: PUSH
63701: LD_VAR 0 3
63705: ST_TO_ADDR
// end ;
63706: LD_VAR 0 2
63710: RET
// export function ComExitAll ( units ) ; var i ; begin
63711: LD_INT 0
63713: PPUSH
63714: PPUSH
// if not units then
63715: LD_VAR 0 1
63719: NOT
63720: IFFALSE 63724
// exit ;
63722: GO 63750
// for i in units do
63724: LD_ADDR_VAR 0 3
63728: PUSH
63729: LD_VAR 0 1
63733: PUSH
63734: FOR_IN
63735: IFFALSE 63748
// ComExit ( i ) ;
63737: LD_VAR 0 3
63741: PPUSH
63742: CALL 63628 0 1
63746: GO 63734
63748: POP
63749: POP
// end ;
63750: LD_VAR 0 2
63754: RET
// export function ResetHc ; begin
63755: LD_INT 0
63757: PPUSH
// InitHc ;
63758: CALL_OW 19
// hc_importance := 0 ;
63762: LD_ADDR_OWVAR 32
63766: PUSH
63767: LD_INT 0
63769: ST_TO_ADDR
// end ;
63770: LD_VAR 0 1
63774: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63775: LD_INT 0
63777: PPUSH
63778: PPUSH
63779: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63780: LD_ADDR_VAR 0 6
63784: PUSH
63785: LD_VAR 0 1
63789: PUSH
63790: LD_VAR 0 3
63794: PLUS
63795: PUSH
63796: LD_INT 2
63798: DIV
63799: ST_TO_ADDR
// if _x < 0 then
63800: LD_VAR 0 6
63804: PUSH
63805: LD_INT 0
63807: LESS
63808: IFFALSE 63825
// _x := _x * - 1 ;
63810: LD_ADDR_VAR 0 6
63814: PUSH
63815: LD_VAR 0 6
63819: PUSH
63820: LD_INT 1
63822: NEG
63823: MUL
63824: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63825: LD_ADDR_VAR 0 7
63829: PUSH
63830: LD_VAR 0 2
63834: PUSH
63835: LD_VAR 0 4
63839: PLUS
63840: PUSH
63841: LD_INT 2
63843: DIV
63844: ST_TO_ADDR
// if _y < 0 then
63845: LD_VAR 0 7
63849: PUSH
63850: LD_INT 0
63852: LESS
63853: IFFALSE 63870
// _y := _y * - 1 ;
63855: LD_ADDR_VAR 0 7
63859: PUSH
63860: LD_VAR 0 7
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: MUL
63869: ST_TO_ADDR
// result := [ _x , _y ] ;
63870: LD_ADDR_VAR 0 5
63874: PUSH
63875: LD_VAR 0 6
63879: PUSH
63880: LD_VAR 0 7
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: ST_TO_ADDR
// end ;
63889: LD_VAR 0 5
63893: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63894: LD_INT 0
63896: PPUSH
63897: PPUSH
63898: PPUSH
63899: PPUSH
// task := GetTaskList ( unit ) ;
63900: LD_ADDR_VAR 0 7
63904: PUSH
63905: LD_VAR 0 1
63909: PPUSH
63910: CALL_OW 437
63914: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63915: LD_VAR 0 7
63919: NOT
63920: PUSH
63921: LD_VAR 0 1
63925: PPUSH
63926: LD_VAR 0 2
63930: PPUSH
63931: CALL_OW 308
63935: NOT
63936: AND
63937: IFFALSE 63941
// exit ;
63939: GO 64059
// if IsInArea ( unit , area ) then
63941: LD_VAR 0 1
63945: PPUSH
63946: LD_VAR 0 2
63950: PPUSH
63951: CALL_OW 308
63955: IFFALSE 63973
// begin ComMoveToArea ( unit , goAway ) ;
63957: LD_VAR 0 1
63961: PPUSH
63962: LD_VAR 0 3
63966: PPUSH
63967: CALL_OW 113
// exit ;
63971: GO 64059
// end ; if task [ 1 ] [ 1 ] <> M then
63973: LD_VAR 0 7
63977: PUSH
63978: LD_INT 1
63980: ARRAY
63981: PUSH
63982: LD_INT 1
63984: ARRAY
63985: PUSH
63986: LD_STRING M
63988: NONEQUAL
63989: IFFALSE 63993
// exit ;
63991: GO 64059
// x := task [ 1 ] [ 2 ] ;
63993: LD_ADDR_VAR 0 5
63997: PUSH
63998: LD_VAR 0 7
64002: PUSH
64003: LD_INT 1
64005: ARRAY
64006: PUSH
64007: LD_INT 2
64009: ARRAY
64010: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64011: LD_ADDR_VAR 0 6
64015: PUSH
64016: LD_VAR 0 7
64020: PUSH
64021: LD_INT 1
64023: ARRAY
64024: PUSH
64025: LD_INT 3
64027: ARRAY
64028: ST_TO_ADDR
// if InArea ( x , y , area ) then
64029: LD_VAR 0 5
64033: PPUSH
64034: LD_VAR 0 6
64038: PPUSH
64039: LD_VAR 0 2
64043: PPUSH
64044: CALL_OW 309
64048: IFFALSE 64059
// ComStop ( unit ) ;
64050: LD_VAR 0 1
64054: PPUSH
64055: CALL_OW 141
// end ;
64059: LD_VAR 0 4
64063: RET
// export function Abs ( value ) ; begin
64064: LD_INT 0
64066: PPUSH
// result := value ;
64067: LD_ADDR_VAR 0 2
64071: PUSH
64072: LD_VAR 0 1
64076: ST_TO_ADDR
// if value < 0 then
64077: LD_VAR 0 1
64081: PUSH
64082: LD_INT 0
64084: LESS
64085: IFFALSE 64102
// result := value * - 1 ;
64087: LD_ADDR_VAR 0 2
64091: PUSH
64092: LD_VAR 0 1
64096: PUSH
64097: LD_INT 1
64099: NEG
64100: MUL
64101: ST_TO_ADDR
// end ;
64102: LD_VAR 0 2
64106: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64107: LD_INT 0
64109: PPUSH
64110: PPUSH
64111: PPUSH
64112: PPUSH
64113: PPUSH
64114: PPUSH
64115: PPUSH
64116: PPUSH
// if not unit or not building then
64117: LD_VAR 0 1
64121: NOT
64122: PUSH
64123: LD_VAR 0 2
64127: NOT
64128: OR
64129: IFFALSE 64133
// exit ;
64131: GO 64359
// x := GetX ( building ) ;
64133: LD_ADDR_VAR 0 4
64137: PUSH
64138: LD_VAR 0 2
64142: PPUSH
64143: CALL_OW 250
64147: ST_TO_ADDR
// y := GetY ( building ) ;
64148: LD_ADDR_VAR 0 6
64152: PUSH
64153: LD_VAR 0 2
64157: PPUSH
64158: CALL_OW 251
64162: ST_TO_ADDR
// d := GetDir ( building ) ;
64163: LD_ADDR_VAR 0 8
64167: PUSH
64168: LD_VAR 0 2
64172: PPUSH
64173: CALL_OW 254
64177: ST_TO_ADDR
// r := 4 ;
64178: LD_ADDR_VAR 0 9
64182: PUSH
64183: LD_INT 4
64185: ST_TO_ADDR
// for i := 1 to 5 do
64186: LD_ADDR_VAR 0 10
64190: PUSH
64191: DOUBLE
64192: LD_INT 1
64194: DEC
64195: ST_TO_ADDR
64196: LD_INT 5
64198: PUSH
64199: FOR_TO
64200: IFFALSE 64357
// begin _x := ShiftX ( x , d , r + i ) ;
64202: LD_ADDR_VAR 0 5
64206: PUSH
64207: LD_VAR 0 4
64211: PPUSH
64212: LD_VAR 0 8
64216: PPUSH
64217: LD_VAR 0 9
64221: PUSH
64222: LD_VAR 0 10
64226: PLUS
64227: PPUSH
64228: CALL_OW 272
64232: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64233: LD_ADDR_VAR 0 7
64237: PUSH
64238: LD_VAR 0 6
64242: PPUSH
64243: LD_VAR 0 8
64247: PPUSH
64248: LD_VAR 0 9
64252: PUSH
64253: LD_VAR 0 10
64257: PLUS
64258: PPUSH
64259: CALL_OW 273
64263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64264: LD_VAR 0 5
64268: PPUSH
64269: LD_VAR 0 7
64273: PPUSH
64274: CALL_OW 488
64278: PUSH
64279: LD_VAR 0 5
64283: PPUSH
64284: LD_VAR 0 7
64288: PPUSH
64289: CALL_OW 428
64293: PPUSH
64294: CALL_OW 247
64298: PUSH
64299: LD_INT 3
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: IN
64309: NOT
64310: AND
64311: IFFALSE 64355
// begin ComMoveXY ( unit , _x , _y ) ;
64313: LD_VAR 0 1
64317: PPUSH
64318: LD_VAR 0 5
64322: PPUSH
64323: LD_VAR 0 7
64327: PPUSH
64328: CALL_OW 111
// result := [ _x , _y ] ;
64332: LD_ADDR_VAR 0 3
64336: PUSH
64337: LD_VAR 0 5
64341: PUSH
64342: LD_VAR 0 7
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// exit ;
64351: POP
64352: POP
64353: GO 64359
// end ; end ;
64355: GO 64199
64357: POP
64358: POP
// end ;
64359: LD_VAR 0 3
64363: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64364: LD_INT 0
64366: PPUSH
64367: PPUSH
64368: PPUSH
// result := 0 ;
64369: LD_ADDR_VAR 0 3
64373: PUSH
64374: LD_INT 0
64376: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64377: LD_VAR 0 1
64381: PUSH
64382: LD_INT 0
64384: LESS
64385: PUSH
64386: LD_VAR 0 1
64390: PUSH
64391: LD_INT 8
64393: GREATER
64394: OR
64395: PUSH
64396: LD_VAR 0 2
64400: PUSH
64401: LD_INT 0
64403: LESS
64404: OR
64405: PUSH
64406: LD_VAR 0 2
64410: PUSH
64411: LD_INT 8
64413: GREATER
64414: OR
64415: IFFALSE 64419
// exit ;
64417: GO 64494
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64419: LD_ADDR_VAR 0 4
64423: PUSH
64424: LD_INT 22
64426: PUSH
64427: LD_VAR 0 2
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PPUSH
64436: CALL_OW 69
64440: PUSH
64441: FOR_IN
64442: IFFALSE 64492
// begin un := UnitShoot ( i ) ;
64444: LD_ADDR_VAR 0 5
64448: PUSH
64449: LD_VAR 0 4
64453: PPUSH
64454: CALL_OW 504
64458: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64459: LD_VAR 0 5
64463: PPUSH
64464: CALL_OW 255
64468: PUSH
64469: LD_VAR 0 1
64473: EQUAL
64474: IFFALSE 64490
// begin result := un ;
64476: LD_ADDR_VAR 0 3
64480: PUSH
64481: LD_VAR 0 5
64485: ST_TO_ADDR
// exit ;
64486: POP
64487: POP
64488: GO 64494
// end ; end ;
64490: GO 64441
64492: POP
64493: POP
// end ;
64494: LD_VAR 0 3
64498: RET
// export function GetCargoBay ( units ) ; begin
64499: LD_INT 0
64501: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64502: LD_ADDR_VAR 0 2
64506: PUSH
64507: LD_VAR 0 1
64511: PPUSH
64512: LD_INT 2
64514: PUSH
64515: LD_INT 34
64517: PUSH
64518: LD_INT 12
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 34
64527: PUSH
64528: LD_INT 51
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 34
64537: PUSH
64538: LD_INT 32
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 34
64547: PUSH
64548: LD_INT 89
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: PPUSH
64562: CALL_OW 72
64566: ST_TO_ADDR
// end ;
64567: LD_VAR 0 2
64571: RET
// export function Negate ( value ) ; begin
64572: LD_INT 0
64574: PPUSH
// result := not value ;
64575: LD_ADDR_VAR 0 2
64579: PUSH
64580: LD_VAR 0 1
64584: NOT
64585: ST_TO_ADDR
// end ;
64586: LD_VAR 0 2
64590: RET
// export function Inc ( value ) ; begin
64591: LD_INT 0
64593: PPUSH
// result := value + 1 ;
64594: LD_ADDR_VAR 0 2
64598: PUSH
64599: LD_VAR 0 1
64603: PUSH
64604: LD_INT 1
64606: PLUS
64607: ST_TO_ADDR
// end ;
64608: LD_VAR 0 2
64612: RET
// export function Dec ( value ) ; begin
64613: LD_INT 0
64615: PPUSH
// result := value - 1 ;
64616: LD_ADDR_VAR 0 2
64620: PUSH
64621: LD_VAR 0 1
64625: PUSH
64626: LD_INT 1
64628: MINUS
64629: ST_TO_ADDR
// end ;
64630: LD_VAR 0 2
64634: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64635: LD_INT 0
64637: PPUSH
64638: PPUSH
64639: PPUSH
64640: PPUSH
64641: PPUSH
64642: PPUSH
64643: PPUSH
64644: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64645: LD_VAR 0 1
64649: PPUSH
64650: LD_VAR 0 2
64654: PPUSH
64655: CALL_OW 488
64659: NOT
64660: PUSH
64661: LD_VAR 0 3
64665: PPUSH
64666: LD_VAR 0 4
64670: PPUSH
64671: CALL_OW 488
64675: NOT
64676: OR
64677: IFFALSE 64690
// begin result := - 1 ;
64679: LD_ADDR_VAR 0 5
64683: PUSH
64684: LD_INT 1
64686: NEG
64687: ST_TO_ADDR
// exit ;
64688: GO 64925
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64690: LD_ADDR_VAR 0 12
64694: PUSH
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_VAR 0 2
64704: PPUSH
64705: LD_VAR 0 3
64709: PPUSH
64710: LD_VAR 0 4
64714: PPUSH
64715: CALL 63775 0 4
64719: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64720: LD_ADDR_VAR 0 11
64724: PUSH
64725: LD_VAR 0 1
64729: PPUSH
64730: LD_VAR 0 2
64734: PPUSH
64735: LD_VAR 0 12
64739: PUSH
64740: LD_INT 1
64742: ARRAY
64743: PPUSH
64744: LD_VAR 0 12
64748: PUSH
64749: LD_INT 2
64751: ARRAY
64752: PPUSH
64753: CALL_OW 298
64757: ST_TO_ADDR
// distance := 9999 ;
64758: LD_ADDR_VAR 0 10
64762: PUSH
64763: LD_INT 9999
64765: ST_TO_ADDR
// for i := 0 to 5 do
64766: LD_ADDR_VAR 0 6
64770: PUSH
64771: DOUBLE
64772: LD_INT 0
64774: DEC
64775: ST_TO_ADDR
64776: LD_INT 5
64778: PUSH
64779: FOR_TO
64780: IFFALSE 64923
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64782: LD_ADDR_VAR 0 7
64786: PUSH
64787: LD_VAR 0 1
64791: PPUSH
64792: LD_VAR 0 6
64796: PPUSH
64797: LD_VAR 0 11
64801: PPUSH
64802: CALL_OW 272
64806: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64807: LD_ADDR_VAR 0 8
64811: PUSH
64812: LD_VAR 0 2
64816: PPUSH
64817: LD_VAR 0 6
64821: PPUSH
64822: LD_VAR 0 11
64826: PPUSH
64827: CALL_OW 273
64831: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64832: LD_VAR 0 7
64836: PPUSH
64837: LD_VAR 0 8
64841: PPUSH
64842: CALL_OW 488
64846: NOT
64847: IFFALSE 64851
// continue ;
64849: GO 64779
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64851: LD_ADDR_VAR 0 9
64855: PUSH
64856: LD_VAR 0 12
64860: PUSH
64861: LD_INT 1
64863: ARRAY
64864: PPUSH
64865: LD_VAR 0 12
64869: PUSH
64870: LD_INT 2
64872: ARRAY
64873: PPUSH
64874: LD_VAR 0 7
64878: PPUSH
64879: LD_VAR 0 8
64883: PPUSH
64884: CALL_OW 298
64888: ST_TO_ADDR
// if tmp < distance then
64889: LD_VAR 0 9
64893: PUSH
64894: LD_VAR 0 10
64898: LESS
64899: IFFALSE 64921
// begin result := i ;
64901: LD_ADDR_VAR 0 5
64905: PUSH
64906: LD_VAR 0 6
64910: ST_TO_ADDR
// distance := tmp ;
64911: LD_ADDR_VAR 0 10
64915: PUSH
64916: LD_VAR 0 9
64920: ST_TO_ADDR
// end ; end ;
64921: GO 64779
64923: POP
64924: POP
// end ;
64925: LD_VAR 0 5
64929: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64930: LD_INT 0
64932: PPUSH
64933: PPUSH
// if not driver or not IsInUnit ( driver ) then
64934: LD_VAR 0 1
64938: NOT
64939: PUSH
64940: LD_VAR 0 1
64944: PPUSH
64945: CALL_OW 310
64949: NOT
64950: OR
64951: IFFALSE 64955
// exit ;
64953: GO 65045
// vehicle := IsInUnit ( driver ) ;
64955: LD_ADDR_VAR 0 3
64959: PUSH
64960: LD_VAR 0 1
64964: PPUSH
64965: CALL_OW 310
64969: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64970: LD_VAR 0 1
64974: PPUSH
64975: LD_STRING \
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 0
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: PUSH
65005: LD_STRING E
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: LD_VAR 0 3
65018: PUSH
65019: LD_INT 0
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PPUSH
65041: CALL_OW 446
// end ;
65045: LD_VAR 0 2
65049: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65050: LD_INT 0
65052: PPUSH
65053: PPUSH
// if not driver or not IsInUnit ( driver ) then
65054: LD_VAR 0 1
65058: NOT
65059: PUSH
65060: LD_VAR 0 1
65064: PPUSH
65065: CALL_OW 310
65069: NOT
65070: OR
65071: IFFALSE 65075
// exit ;
65073: GO 65165
// vehicle := IsInUnit ( driver ) ;
65075: LD_ADDR_VAR 0 3
65079: PUSH
65080: LD_VAR 0 1
65084: PPUSH
65085: CALL_OW 310
65089: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65090: LD_VAR 0 1
65094: PPUSH
65095: LD_STRING \
65097: PUSH
65098: LD_INT 0
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: LD_INT 0
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: PUSH
65125: LD_STRING E
65127: PUSH
65128: LD_INT 0
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_VAR 0 3
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PPUSH
65161: CALL_OW 447
// end ;
65165: LD_VAR 0 2
65169: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65170: LD_INT 0
65172: PPUSH
65173: PPUSH
65174: PPUSH
// tmp := [ ] ;
65175: LD_ADDR_VAR 0 5
65179: PUSH
65180: EMPTY
65181: ST_TO_ADDR
// for i in units do
65182: LD_ADDR_VAR 0 4
65186: PUSH
65187: LD_VAR 0 1
65191: PUSH
65192: FOR_IN
65193: IFFALSE 65231
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65195: LD_ADDR_VAR 0 5
65199: PUSH
65200: LD_VAR 0 5
65204: PPUSH
65205: LD_VAR 0 5
65209: PUSH
65210: LD_INT 1
65212: PLUS
65213: PPUSH
65214: LD_VAR 0 4
65218: PPUSH
65219: CALL_OW 256
65223: PPUSH
65224: CALL_OW 2
65228: ST_TO_ADDR
65229: GO 65192
65231: POP
65232: POP
// if not tmp then
65233: LD_VAR 0 5
65237: NOT
65238: IFFALSE 65242
// exit ;
65240: GO 65290
// if asc then
65242: LD_VAR 0 2
65246: IFFALSE 65270
// result := SortListByListAsc ( units , tmp ) else
65248: LD_ADDR_VAR 0 3
65252: PUSH
65253: LD_VAR 0 1
65257: PPUSH
65258: LD_VAR 0 5
65262: PPUSH
65263: CALL_OW 76
65267: ST_TO_ADDR
65268: GO 65290
// result := SortListByListDesc ( units , tmp ) ;
65270: LD_ADDR_VAR 0 3
65274: PUSH
65275: LD_VAR 0 1
65279: PPUSH
65280: LD_VAR 0 5
65284: PPUSH
65285: CALL_OW 77
65289: ST_TO_ADDR
// end ;
65290: LD_VAR 0 3
65294: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65295: LD_INT 0
65297: PPUSH
65298: PPUSH
// task := GetTaskList ( mech ) ;
65299: LD_ADDR_VAR 0 4
65303: PUSH
65304: LD_VAR 0 1
65308: PPUSH
65309: CALL_OW 437
65313: ST_TO_ADDR
// if not task then
65314: LD_VAR 0 4
65318: NOT
65319: IFFALSE 65323
// exit ;
65321: GO 65365
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65323: LD_ADDR_VAR 0 3
65327: PUSH
65328: LD_VAR 0 4
65332: PUSH
65333: LD_INT 1
65335: ARRAY
65336: PUSH
65337: LD_INT 1
65339: ARRAY
65340: PUSH
65341: LD_STRING r
65343: EQUAL
65344: PUSH
65345: LD_VAR 0 4
65349: PUSH
65350: LD_INT 1
65352: ARRAY
65353: PUSH
65354: LD_INT 4
65356: ARRAY
65357: PUSH
65358: LD_VAR 0 2
65362: EQUAL
65363: AND
65364: ST_TO_ADDR
// end ;
65365: LD_VAR 0 3
65369: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65370: LD_INT 0
65372: PPUSH
// SetDir ( unit , d ) ;
65373: LD_VAR 0 1
65377: PPUSH
65378: LD_VAR 0 4
65382: PPUSH
65383: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65387: LD_VAR 0 1
65391: PPUSH
65392: LD_VAR 0 2
65396: PPUSH
65397: LD_VAR 0 3
65401: PPUSH
65402: LD_VAR 0 5
65406: PPUSH
65407: CALL_OW 48
// end ;
65411: LD_VAR 0 6
65415: RET
// export function ToNaturalNumber ( number ) ; begin
65416: LD_INT 0
65418: PPUSH
// result := number div 1 ;
65419: LD_ADDR_VAR 0 2
65423: PUSH
65424: LD_VAR 0 1
65428: PUSH
65429: LD_INT 1
65431: DIV
65432: ST_TO_ADDR
// if number < 0 then
65433: LD_VAR 0 1
65437: PUSH
65438: LD_INT 0
65440: LESS
65441: IFFALSE 65451
// result := 0 ;
65443: LD_ADDR_VAR 0 2
65447: PUSH
65448: LD_INT 0
65450: ST_TO_ADDR
// end ;
65451: LD_VAR 0 2
65455: RET
// export function SortByClass ( units , class ) ; var un ; begin
65456: LD_INT 0
65458: PPUSH
65459: PPUSH
// if not units or not class then
65460: LD_VAR 0 1
65464: NOT
65465: PUSH
65466: LD_VAR 0 2
65470: NOT
65471: OR
65472: IFFALSE 65476
// exit ;
65474: GO 65571
// result := [ ] ;
65476: LD_ADDR_VAR 0 3
65480: PUSH
65481: EMPTY
65482: ST_TO_ADDR
// for un in units do
65483: LD_ADDR_VAR 0 4
65487: PUSH
65488: LD_VAR 0 1
65492: PUSH
65493: FOR_IN
65494: IFFALSE 65569
// if GetClass ( un ) = class then
65496: LD_VAR 0 4
65500: PPUSH
65501: CALL_OW 257
65505: PUSH
65506: LD_VAR 0 2
65510: EQUAL
65511: IFFALSE 65538
// result := Insert ( result , 1 , un ) else
65513: LD_ADDR_VAR 0 3
65517: PUSH
65518: LD_VAR 0 3
65522: PPUSH
65523: LD_INT 1
65525: PPUSH
65526: LD_VAR 0 4
65530: PPUSH
65531: CALL_OW 2
65535: ST_TO_ADDR
65536: GO 65567
// result := Replace ( result , result + 1 , un ) ;
65538: LD_ADDR_VAR 0 3
65542: PUSH
65543: LD_VAR 0 3
65547: PPUSH
65548: LD_VAR 0 3
65552: PUSH
65553: LD_INT 1
65555: PLUS
65556: PPUSH
65557: LD_VAR 0 4
65561: PPUSH
65562: CALL_OW 1
65566: ST_TO_ADDR
65567: GO 65493
65569: POP
65570: POP
// end ;
65571: LD_VAR 0 3
65575: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65576: LD_INT 0
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
65582: PPUSH
65583: PPUSH
65584: PPUSH
// result := [ ] ;
65585: LD_ADDR_VAR 0 4
65589: PUSH
65590: EMPTY
65591: ST_TO_ADDR
// if x - r < 0 then
65592: LD_VAR 0 1
65596: PUSH
65597: LD_VAR 0 3
65601: MINUS
65602: PUSH
65603: LD_INT 0
65605: LESS
65606: IFFALSE 65618
// min_x := 0 else
65608: LD_ADDR_VAR 0 8
65612: PUSH
65613: LD_INT 0
65615: ST_TO_ADDR
65616: GO 65634
// min_x := x - r ;
65618: LD_ADDR_VAR 0 8
65622: PUSH
65623: LD_VAR 0 1
65627: PUSH
65628: LD_VAR 0 3
65632: MINUS
65633: ST_TO_ADDR
// if y - r < 0 then
65634: LD_VAR 0 2
65638: PUSH
65639: LD_VAR 0 3
65643: MINUS
65644: PUSH
65645: LD_INT 0
65647: LESS
65648: IFFALSE 65660
// min_y := 0 else
65650: LD_ADDR_VAR 0 7
65654: PUSH
65655: LD_INT 0
65657: ST_TO_ADDR
65658: GO 65676
// min_y := y - r ;
65660: LD_ADDR_VAR 0 7
65664: PUSH
65665: LD_VAR 0 2
65669: PUSH
65670: LD_VAR 0 3
65674: MINUS
65675: ST_TO_ADDR
// max_x := x + r ;
65676: LD_ADDR_VAR 0 9
65680: PUSH
65681: LD_VAR 0 1
65685: PUSH
65686: LD_VAR 0 3
65690: PLUS
65691: ST_TO_ADDR
// max_y := y + r ;
65692: LD_ADDR_VAR 0 10
65696: PUSH
65697: LD_VAR 0 2
65701: PUSH
65702: LD_VAR 0 3
65706: PLUS
65707: ST_TO_ADDR
// for _x = min_x to max_x do
65708: LD_ADDR_VAR 0 5
65712: PUSH
65713: DOUBLE
65714: LD_VAR 0 8
65718: DEC
65719: ST_TO_ADDR
65720: LD_VAR 0 9
65724: PUSH
65725: FOR_TO
65726: IFFALSE 65827
// for _y = min_y to max_y do
65728: LD_ADDR_VAR 0 6
65732: PUSH
65733: DOUBLE
65734: LD_VAR 0 7
65738: DEC
65739: ST_TO_ADDR
65740: LD_VAR 0 10
65744: PUSH
65745: FOR_TO
65746: IFFALSE 65823
// begin if not ValidHex ( _x , _y ) then
65748: LD_VAR 0 5
65752: PPUSH
65753: LD_VAR 0 6
65757: PPUSH
65758: CALL_OW 488
65762: NOT
65763: IFFALSE 65767
// continue ;
65765: GO 65745
// if GetResourceTypeXY ( _x , _y ) then
65767: LD_VAR 0 5
65771: PPUSH
65772: LD_VAR 0 6
65776: PPUSH
65777: CALL_OW 283
65781: IFFALSE 65821
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65783: LD_ADDR_VAR 0 4
65787: PUSH
65788: LD_VAR 0 4
65792: PPUSH
65793: LD_VAR 0 4
65797: PUSH
65798: LD_INT 1
65800: PLUS
65801: PPUSH
65802: LD_VAR 0 5
65806: PUSH
65807: LD_VAR 0 6
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PPUSH
65816: CALL_OW 1
65820: ST_TO_ADDR
// end ;
65821: GO 65745
65823: POP
65824: POP
65825: GO 65725
65827: POP
65828: POP
// end ;
65829: LD_VAR 0 4
65833: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65834: LD_INT 0
65836: PPUSH
65837: PPUSH
65838: PPUSH
65839: PPUSH
65840: PPUSH
65841: PPUSH
65842: PPUSH
65843: PPUSH
// if not units then
65844: LD_VAR 0 1
65848: NOT
65849: IFFALSE 65853
// exit ;
65851: GO 66377
// result := UnitFilter ( units , [ f_ok ] ) ;
65853: LD_ADDR_VAR 0 3
65857: PUSH
65858: LD_VAR 0 1
65862: PPUSH
65863: LD_INT 50
65865: PUSH
65866: EMPTY
65867: LIST
65868: PPUSH
65869: CALL_OW 72
65873: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65874: LD_ADDR_VAR 0 8
65878: PUSH
65879: LD_VAR 0 1
65883: PUSH
65884: LD_INT 1
65886: ARRAY
65887: PPUSH
65888: CALL_OW 255
65892: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
65893: LD_ADDR_VAR 0 10
65897: PUSH
65898: LD_INT 29
65900: PUSH
65901: LD_INT 91
65903: PUSH
65904: LD_INT 49
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: ST_TO_ADDR
// if not result then
65912: LD_VAR 0 3
65916: NOT
65917: IFFALSE 65921
// exit ;
65919: GO 66377
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65921: LD_ADDR_VAR 0 5
65925: PUSH
65926: LD_INT 81
65928: PUSH
65929: LD_VAR 0 8
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PPUSH
65938: CALL_OW 69
65942: ST_TO_ADDR
// for i in result do
65943: LD_ADDR_VAR 0 4
65947: PUSH
65948: LD_VAR 0 3
65952: PUSH
65953: FOR_IN
65954: IFFALSE 66375
// begin tag := GetTag ( i ) + 1 ;
65956: LD_ADDR_VAR 0 9
65960: PUSH
65961: LD_VAR 0 4
65965: PPUSH
65966: CALL_OW 110
65970: PUSH
65971: LD_INT 1
65973: PLUS
65974: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65975: LD_ADDR_VAR 0 7
65979: PUSH
65980: LD_VAR 0 4
65984: PPUSH
65985: CALL_OW 250
65989: PPUSH
65990: LD_VAR 0 4
65994: PPUSH
65995: CALL_OW 251
65999: PPUSH
66000: LD_INT 6
66002: PPUSH
66003: CALL 65576 0 3
66007: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66008: LD_VAR 0 4
66012: PPUSH
66013: CALL_OW 247
66017: PUSH
66018: LD_INT 2
66020: EQUAL
66021: PUSH
66022: LD_VAR 0 7
66026: AND
66027: PUSH
66028: LD_VAR 0 4
66032: PPUSH
66033: CALL_OW 264
66037: PUSH
66038: LD_VAR 0 10
66042: IN
66043: NOT
66044: AND
66045: IFFALSE 66084
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66047: LD_VAR 0 4
66051: PPUSH
66052: LD_VAR 0 7
66056: PUSH
66057: LD_INT 1
66059: ARRAY
66060: PUSH
66061: LD_INT 1
66063: ARRAY
66064: PPUSH
66065: LD_VAR 0 7
66069: PUSH
66070: LD_INT 1
66072: ARRAY
66073: PUSH
66074: LD_INT 2
66076: ARRAY
66077: PPUSH
66078: CALL_OW 116
66082: GO 66373
// if path > tag then
66084: LD_VAR 0 2
66088: PUSH
66089: LD_VAR 0 9
66093: GREATER
66094: IFFALSE 66302
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
66096: LD_ADDR_VAR 0 6
66100: PUSH
66101: LD_VAR 0 5
66105: PPUSH
66106: LD_INT 91
66108: PUSH
66109: LD_VAR 0 4
66113: PUSH
66114: LD_INT 8
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: PPUSH
66122: CALL_OW 72
66126: ST_TO_ADDR
// if nearEnemy then
66127: LD_VAR 0 6
66131: IFFALSE 66200
// begin if GetWeapon ( i ) = ru_time_lapser then
66133: LD_VAR 0 4
66137: PPUSH
66138: CALL_OW 264
66142: PUSH
66143: LD_INT 49
66145: EQUAL
66146: IFFALSE 66174
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66148: LD_VAR 0 4
66152: PPUSH
66153: LD_VAR 0 6
66157: PPUSH
66158: LD_VAR 0 4
66162: PPUSH
66163: CALL_OW 74
66167: PPUSH
66168: CALL_OW 112
66172: GO 66198
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
66174: LD_VAR 0 4
66178: PPUSH
66179: LD_VAR 0 6
66183: PPUSH
66184: LD_VAR 0 4
66188: PPUSH
66189: CALL_OW 74
66193: PPUSH
66194: CALL_OW 115
// end else
66198: GO 66300
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66200: LD_VAR 0 4
66204: PPUSH
66205: LD_VAR 0 2
66209: PUSH
66210: LD_VAR 0 9
66214: ARRAY
66215: PUSH
66216: LD_INT 1
66218: ARRAY
66219: PPUSH
66220: LD_VAR 0 2
66224: PUSH
66225: LD_VAR 0 9
66229: ARRAY
66230: PUSH
66231: LD_INT 2
66233: ARRAY
66234: PPUSH
66235: CALL_OW 297
66239: PUSH
66240: LD_INT 6
66242: GREATER
66243: IFFALSE 66286
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66245: LD_VAR 0 4
66249: PPUSH
66250: LD_VAR 0 2
66254: PUSH
66255: LD_VAR 0 9
66259: ARRAY
66260: PUSH
66261: LD_INT 1
66263: ARRAY
66264: PPUSH
66265: LD_VAR 0 2
66269: PUSH
66270: LD_VAR 0 9
66274: ARRAY
66275: PUSH
66276: LD_INT 2
66278: ARRAY
66279: PPUSH
66280: CALL_OW 114
66284: GO 66300
// SetTag ( i , tag ) ;
66286: LD_VAR 0 4
66290: PPUSH
66291: LD_VAR 0 9
66295: PPUSH
66296: CALL_OW 109
// end else
66300: GO 66373
// if enemy then
66302: LD_VAR 0 5
66306: IFFALSE 66373
// begin if GetWeapon ( i ) = ru_time_lapser then
66308: LD_VAR 0 4
66312: PPUSH
66313: CALL_OW 264
66317: PUSH
66318: LD_INT 49
66320: EQUAL
66321: IFFALSE 66349
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
66323: LD_VAR 0 4
66327: PPUSH
66328: LD_VAR 0 5
66332: PPUSH
66333: LD_VAR 0 4
66337: PPUSH
66338: CALL_OW 74
66342: PPUSH
66343: CALL_OW 112
66347: GO 66373
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66349: LD_VAR 0 4
66353: PPUSH
66354: LD_VAR 0 5
66358: PPUSH
66359: LD_VAR 0 4
66363: PPUSH
66364: CALL_OW 74
66368: PPUSH
66369: CALL_OW 115
// end ; end ;
66373: GO 65953
66375: POP
66376: POP
// end ;
66377: LD_VAR 0 3
66381: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66382: LD_INT 0
66384: PPUSH
66385: PPUSH
66386: PPUSH
// if not unit or IsInUnit ( unit ) then
66387: LD_VAR 0 1
66391: NOT
66392: PUSH
66393: LD_VAR 0 1
66397: PPUSH
66398: CALL_OW 310
66402: OR
66403: IFFALSE 66407
// exit ;
66405: GO 66498
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66407: LD_ADDR_VAR 0 4
66411: PUSH
66412: LD_VAR 0 1
66416: PPUSH
66417: CALL_OW 250
66421: PPUSH
66422: LD_VAR 0 2
66426: PPUSH
66427: LD_INT 1
66429: PPUSH
66430: CALL_OW 272
66434: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66435: LD_ADDR_VAR 0 5
66439: PUSH
66440: LD_VAR 0 1
66444: PPUSH
66445: CALL_OW 251
66449: PPUSH
66450: LD_VAR 0 2
66454: PPUSH
66455: LD_INT 1
66457: PPUSH
66458: CALL_OW 273
66462: ST_TO_ADDR
// if ValidHex ( x , y ) then
66463: LD_VAR 0 4
66467: PPUSH
66468: LD_VAR 0 5
66472: PPUSH
66473: CALL_OW 488
66477: IFFALSE 66498
// ComTurnXY ( unit , x , y ) ;
66479: LD_VAR 0 1
66483: PPUSH
66484: LD_VAR 0 4
66488: PPUSH
66489: LD_VAR 0 5
66493: PPUSH
66494: CALL_OW 118
// end ;
66498: LD_VAR 0 3
66502: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66503: LD_INT 0
66505: PPUSH
66506: PPUSH
// result := false ;
66507: LD_ADDR_VAR 0 3
66511: PUSH
66512: LD_INT 0
66514: ST_TO_ADDR
// if not units then
66515: LD_VAR 0 2
66519: NOT
66520: IFFALSE 66524
// exit ;
66522: GO 66569
// for i in units do
66524: LD_ADDR_VAR 0 4
66528: PUSH
66529: LD_VAR 0 2
66533: PUSH
66534: FOR_IN
66535: IFFALSE 66567
// if See ( side , i ) then
66537: LD_VAR 0 1
66541: PPUSH
66542: LD_VAR 0 4
66546: PPUSH
66547: CALL_OW 292
66551: IFFALSE 66565
// begin result := true ;
66553: LD_ADDR_VAR 0 3
66557: PUSH
66558: LD_INT 1
66560: ST_TO_ADDR
// exit ;
66561: POP
66562: POP
66563: GO 66569
// end ;
66565: GO 66534
66567: POP
66568: POP
// end ;
66569: LD_VAR 0 3
66573: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66574: LD_INT 0
66576: PPUSH
66577: PPUSH
66578: PPUSH
66579: PPUSH
// if not unit or not points then
66580: LD_VAR 0 1
66584: NOT
66585: PUSH
66586: LD_VAR 0 2
66590: NOT
66591: OR
66592: IFFALSE 66596
// exit ;
66594: GO 66686
// dist := 99999 ;
66596: LD_ADDR_VAR 0 5
66600: PUSH
66601: LD_INT 99999
66603: ST_TO_ADDR
// for i in points do
66604: LD_ADDR_VAR 0 4
66608: PUSH
66609: LD_VAR 0 2
66613: PUSH
66614: FOR_IN
66615: IFFALSE 66684
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66617: LD_ADDR_VAR 0 6
66621: PUSH
66622: LD_VAR 0 1
66626: PPUSH
66627: LD_VAR 0 4
66631: PUSH
66632: LD_INT 1
66634: ARRAY
66635: PPUSH
66636: LD_VAR 0 4
66640: PUSH
66641: LD_INT 2
66643: ARRAY
66644: PPUSH
66645: CALL_OW 297
66649: ST_TO_ADDR
// if tmpDist < dist then
66650: LD_VAR 0 6
66654: PUSH
66655: LD_VAR 0 5
66659: LESS
66660: IFFALSE 66682
// begin result := i ;
66662: LD_ADDR_VAR 0 3
66666: PUSH
66667: LD_VAR 0 4
66671: ST_TO_ADDR
// dist := tmpDist ;
66672: LD_ADDR_VAR 0 5
66676: PUSH
66677: LD_VAR 0 6
66681: ST_TO_ADDR
// end ; end ;
66682: GO 66614
66684: POP
66685: POP
// end ;
66686: LD_VAR 0 3
66690: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
66691: LD_INT 0
66693: PPUSH
// uc_side := side ;
66694: LD_ADDR_OWVAR 20
66698: PUSH
66699: LD_VAR 0 1
66703: ST_TO_ADDR
// uc_nation := 3 ;
66704: LD_ADDR_OWVAR 21
66708: PUSH
66709: LD_INT 3
66711: ST_TO_ADDR
// vc_chassis := 25 ;
66712: LD_ADDR_OWVAR 37
66716: PUSH
66717: LD_INT 25
66719: ST_TO_ADDR
// vc_engine := engine_siberite ;
66720: LD_ADDR_OWVAR 39
66724: PUSH
66725: LD_INT 3
66727: ST_TO_ADDR
// vc_control := control_computer ;
66728: LD_ADDR_OWVAR 38
66732: PUSH
66733: LD_INT 3
66735: ST_TO_ADDR
// vc_weapon := 59 ;
66736: LD_ADDR_OWVAR 40
66740: PUSH
66741: LD_INT 59
66743: ST_TO_ADDR
// result := CreateVehicle ;
66744: LD_ADDR_VAR 0 5
66748: PUSH
66749: CALL_OW 45
66753: ST_TO_ADDR
// SetDir ( result , d ) ;
66754: LD_VAR 0 5
66758: PPUSH
66759: LD_VAR 0 4
66763: PPUSH
66764: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
66768: LD_VAR 0 5
66772: PPUSH
66773: LD_VAR 0 2
66777: PPUSH
66778: LD_VAR 0 3
66782: PPUSH
66783: LD_INT 0
66785: PPUSH
66786: CALL_OW 48
// end ;
66790: LD_VAR 0 5
66794: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
66795: LD_INT 0
66797: PPUSH
66798: PPUSH
66799: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
66800: LD_ADDR_VAR 0 2
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: LD_INT 0
66813: PUSH
66814: LD_INT 0
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
66823: LD_VAR 0 1
66827: NOT
66828: PUSH
66829: LD_VAR 0 1
66833: PPUSH
66834: CALL_OW 264
66838: PUSH
66839: LD_INT 12
66841: PUSH
66842: LD_INT 51
66844: PUSH
66845: LD_INT 32
66847: PUSH
66848: LD_INT 89
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: IN
66857: NOT
66858: OR
66859: IFFALSE 66863
// exit ;
66861: GO 66961
// for i := 1 to 3 do
66863: LD_ADDR_VAR 0 3
66867: PUSH
66868: DOUBLE
66869: LD_INT 1
66871: DEC
66872: ST_TO_ADDR
66873: LD_INT 3
66875: PUSH
66876: FOR_TO
66877: IFFALSE 66959
// begin tmp := GetCargo ( cargo , i ) ;
66879: LD_ADDR_VAR 0 4
66883: PUSH
66884: LD_VAR 0 1
66888: PPUSH
66889: LD_VAR 0 3
66893: PPUSH
66894: CALL_OW 289
66898: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
66899: LD_ADDR_VAR 0 2
66903: PUSH
66904: LD_VAR 0 2
66908: PPUSH
66909: LD_VAR 0 3
66913: PPUSH
66914: LD_VAR 0 4
66918: PPUSH
66919: CALL_OW 1
66923: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
66924: LD_ADDR_VAR 0 2
66928: PUSH
66929: LD_VAR 0 2
66933: PPUSH
66934: LD_INT 4
66936: PPUSH
66937: LD_VAR 0 2
66941: PUSH
66942: LD_INT 4
66944: ARRAY
66945: PUSH
66946: LD_VAR 0 4
66950: PLUS
66951: PPUSH
66952: CALL_OW 1
66956: ST_TO_ADDR
// end ;
66957: GO 66876
66959: POP
66960: POP
// end ;
66961: LD_VAR 0 2
66965: RET
// export function Length ( array ) ; begin
66966: LD_INT 0
66968: PPUSH
// result := array + 0 ;
66969: LD_ADDR_VAR 0 2
66973: PUSH
66974: LD_VAR 0 1
66978: PUSH
66979: LD_INT 0
66981: PLUS
66982: ST_TO_ADDR
// end ;
66983: LD_VAR 0 2
66987: RET
// export function PrepareArray ( array ) ; begin
66988: LD_INT 0
66990: PPUSH
// result := array diff 0 ;
66991: LD_ADDR_VAR 0 2
66995: PUSH
66996: LD_VAR 0 1
67000: PUSH
67001: LD_INT 0
67003: DIFF
67004: ST_TO_ADDR
// if not result [ 1 ] then
67005: LD_VAR 0 2
67009: PUSH
67010: LD_INT 1
67012: ARRAY
67013: NOT
67014: IFFALSE 67034
// result := Delete ( result , 1 ) ;
67016: LD_ADDR_VAR 0 2
67020: PUSH
67021: LD_VAR 0 2
67025: PPUSH
67026: LD_INT 1
67028: PPUSH
67029: CALL_OW 3
67033: ST_TO_ADDR
// end ;
67034: LD_VAR 0 2
67038: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
67039: LD_INT 0
67041: PPUSH
67042: PPUSH
67043: PPUSH
67044: PPUSH
// sibRocketRange := 25 ;
67045: LD_ADDR_VAR 0 6
67049: PUSH
67050: LD_INT 25
67052: ST_TO_ADDR
// result := false ;
67053: LD_ADDR_VAR 0 4
67057: PUSH
67058: LD_INT 0
67060: ST_TO_ADDR
// for i := 0 to 5 do
67061: LD_ADDR_VAR 0 5
67065: PUSH
67066: DOUBLE
67067: LD_INT 0
67069: DEC
67070: ST_TO_ADDR
67071: LD_INT 5
67073: PUSH
67074: FOR_TO
67075: IFFALSE 67142
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
67077: LD_VAR 0 1
67081: PPUSH
67082: LD_VAR 0 5
67086: PPUSH
67087: LD_VAR 0 6
67091: PPUSH
67092: CALL_OW 272
67096: PPUSH
67097: LD_VAR 0 2
67101: PPUSH
67102: LD_VAR 0 5
67106: PPUSH
67107: LD_VAR 0 6
67111: PPUSH
67112: CALL_OW 273
67116: PPUSH
67117: LD_VAR 0 3
67121: PPUSH
67122: CALL_OW 309
67126: IFFALSE 67140
// begin result := true ;
67128: LD_ADDR_VAR 0 4
67132: PUSH
67133: LD_INT 1
67135: ST_TO_ADDR
// exit ;
67136: POP
67137: POP
67138: GO 67144
// end ;
67140: GO 67074
67142: POP
67143: POP
// end ; end_of_file
67144: LD_VAR 0 4
67148: RET
// every 0 0$1 do
67149: GO 67151
67151: DISABLE
// begin enable ;
67152: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
67153: LD_STRING updateTimer(
67155: PUSH
67156: LD_OWVAR 1
67160: STR
67161: PUSH
67162: LD_STRING );
67164: STR
67165: PPUSH
67166: CALL_OW 559
// end ;
67170: END
// export function SOS_MapStart ( ) ; begin
67171: LD_INT 0
67173: PPUSH
// if streamModeActive then
67174: LD_EXP 64
67178: IFFALSE 67187
// DefineStreamItems ( true ) ;
67180: LD_INT 1
67182: PPUSH
67183: CALL 68841 0 1
// UpdateFactoryWaypoints ( ) ;
67187: CALL 81702 0 0
// UpdateWarehouseGatheringPoints ( ) ;
67191: CALL 81959 0 0
// end ;
67195: LD_VAR 0 1
67199: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
67200: LD_INT 0
67202: PPUSH
// if p2 = 100 then
67203: LD_VAR 0 2
67207: PUSH
67208: LD_INT 100
67210: EQUAL
67211: IFFALSE 68214
// begin if not StreamModeActive then
67213: LD_EXP 64
67217: NOT
67218: IFFALSE 67228
// StreamModeActive := true ;
67220: LD_ADDR_EXP 64
67224: PUSH
67225: LD_INT 1
67227: ST_TO_ADDR
// if p3 = 0 then
67228: LD_VAR 0 3
67232: PUSH
67233: LD_INT 0
67235: EQUAL
67236: IFFALSE 67242
// InitStreamMode ;
67238: CALL 68377 0 0
// if p3 = 1 then
67242: LD_VAR 0 3
67246: PUSH
67247: LD_INT 1
67249: EQUAL
67250: IFFALSE 67260
// sRocket := true ;
67252: LD_ADDR_EXP 69
67256: PUSH
67257: LD_INT 1
67259: ST_TO_ADDR
// if p3 = 2 then
67260: LD_VAR 0 3
67264: PUSH
67265: LD_INT 2
67267: EQUAL
67268: IFFALSE 67278
// sSpeed := true ;
67270: LD_ADDR_EXP 68
67274: PUSH
67275: LD_INT 1
67277: ST_TO_ADDR
// if p3 = 3 then
67278: LD_VAR 0 3
67282: PUSH
67283: LD_INT 3
67285: EQUAL
67286: IFFALSE 67296
// sEngine := true ;
67288: LD_ADDR_EXP 70
67292: PUSH
67293: LD_INT 1
67295: ST_TO_ADDR
// if p3 = 4 then
67296: LD_VAR 0 3
67300: PUSH
67301: LD_INT 4
67303: EQUAL
67304: IFFALSE 67314
// sSpec := true ;
67306: LD_ADDR_EXP 67
67310: PUSH
67311: LD_INT 1
67313: ST_TO_ADDR
// if p3 = 5 then
67314: LD_VAR 0 3
67318: PUSH
67319: LD_INT 5
67321: EQUAL
67322: IFFALSE 67332
// sLevel := true ;
67324: LD_ADDR_EXP 71
67328: PUSH
67329: LD_INT 1
67331: ST_TO_ADDR
// if p3 = 6 then
67332: LD_VAR 0 3
67336: PUSH
67337: LD_INT 6
67339: EQUAL
67340: IFFALSE 67350
// sArmoury := true ;
67342: LD_ADDR_EXP 72
67346: PUSH
67347: LD_INT 1
67349: ST_TO_ADDR
// if p3 = 7 then
67350: LD_VAR 0 3
67354: PUSH
67355: LD_INT 7
67357: EQUAL
67358: IFFALSE 67368
// sRadar := true ;
67360: LD_ADDR_EXP 73
67364: PUSH
67365: LD_INT 1
67367: ST_TO_ADDR
// if p3 = 8 then
67368: LD_VAR 0 3
67372: PUSH
67373: LD_INT 8
67375: EQUAL
67376: IFFALSE 67386
// sBunker := true ;
67378: LD_ADDR_EXP 74
67382: PUSH
67383: LD_INT 1
67385: ST_TO_ADDR
// if p3 = 9 then
67386: LD_VAR 0 3
67390: PUSH
67391: LD_INT 9
67393: EQUAL
67394: IFFALSE 67404
// sHack := true ;
67396: LD_ADDR_EXP 75
67400: PUSH
67401: LD_INT 1
67403: ST_TO_ADDR
// if p3 = 10 then
67404: LD_VAR 0 3
67408: PUSH
67409: LD_INT 10
67411: EQUAL
67412: IFFALSE 67422
// sFire := true ;
67414: LD_ADDR_EXP 76
67418: PUSH
67419: LD_INT 1
67421: ST_TO_ADDR
// if p3 = 11 then
67422: LD_VAR 0 3
67426: PUSH
67427: LD_INT 11
67429: EQUAL
67430: IFFALSE 67440
// sRefresh := true ;
67432: LD_ADDR_EXP 77
67436: PUSH
67437: LD_INT 1
67439: ST_TO_ADDR
// if p3 = 12 then
67440: LD_VAR 0 3
67444: PUSH
67445: LD_INT 12
67447: EQUAL
67448: IFFALSE 67458
// sExp := true ;
67450: LD_ADDR_EXP 78
67454: PUSH
67455: LD_INT 1
67457: ST_TO_ADDR
// if p3 = 13 then
67458: LD_VAR 0 3
67462: PUSH
67463: LD_INT 13
67465: EQUAL
67466: IFFALSE 67476
// sDepot := true ;
67468: LD_ADDR_EXP 79
67472: PUSH
67473: LD_INT 1
67475: ST_TO_ADDR
// if p3 = 14 then
67476: LD_VAR 0 3
67480: PUSH
67481: LD_INT 14
67483: EQUAL
67484: IFFALSE 67494
// sFlag := true ;
67486: LD_ADDR_EXP 80
67490: PUSH
67491: LD_INT 1
67493: ST_TO_ADDR
// if p3 = 15 then
67494: LD_VAR 0 3
67498: PUSH
67499: LD_INT 15
67501: EQUAL
67502: IFFALSE 67512
// sKamikadze := true ;
67504: LD_ADDR_EXP 88
67508: PUSH
67509: LD_INT 1
67511: ST_TO_ADDR
// if p3 = 16 then
67512: LD_VAR 0 3
67516: PUSH
67517: LD_INT 16
67519: EQUAL
67520: IFFALSE 67530
// sTroll := true ;
67522: LD_ADDR_EXP 89
67526: PUSH
67527: LD_INT 1
67529: ST_TO_ADDR
// if p3 = 17 then
67530: LD_VAR 0 3
67534: PUSH
67535: LD_INT 17
67537: EQUAL
67538: IFFALSE 67548
// sSlow := true ;
67540: LD_ADDR_EXP 90
67544: PUSH
67545: LD_INT 1
67547: ST_TO_ADDR
// if p3 = 18 then
67548: LD_VAR 0 3
67552: PUSH
67553: LD_INT 18
67555: EQUAL
67556: IFFALSE 67566
// sLack := true ;
67558: LD_ADDR_EXP 91
67562: PUSH
67563: LD_INT 1
67565: ST_TO_ADDR
// if p3 = 19 then
67566: LD_VAR 0 3
67570: PUSH
67571: LD_INT 19
67573: EQUAL
67574: IFFALSE 67584
// sTank := true ;
67576: LD_ADDR_EXP 93
67580: PUSH
67581: LD_INT 1
67583: ST_TO_ADDR
// if p3 = 20 then
67584: LD_VAR 0 3
67588: PUSH
67589: LD_INT 20
67591: EQUAL
67592: IFFALSE 67602
// sRemote := true ;
67594: LD_ADDR_EXP 94
67598: PUSH
67599: LD_INT 1
67601: ST_TO_ADDR
// if p3 = 21 then
67602: LD_VAR 0 3
67606: PUSH
67607: LD_INT 21
67609: EQUAL
67610: IFFALSE 67620
// sPowell := true ;
67612: LD_ADDR_EXP 95
67616: PUSH
67617: LD_INT 1
67619: ST_TO_ADDR
// if p3 = 22 then
67620: LD_VAR 0 3
67624: PUSH
67625: LD_INT 22
67627: EQUAL
67628: IFFALSE 67638
// sTeleport := true ;
67630: LD_ADDR_EXP 98
67634: PUSH
67635: LD_INT 1
67637: ST_TO_ADDR
// if p3 = 23 then
67638: LD_VAR 0 3
67642: PUSH
67643: LD_INT 23
67645: EQUAL
67646: IFFALSE 67656
// sOilTower := true ;
67648: LD_ADDR_EXP 100
67652: PUSH
67653: LD_INT 1
67655: ST_TO_ADDR
// if p3 = 24 then
67656: LD_VAR 0 3
67660: PUSH
67661: LD_INT 24
67663: EQUAL
67664: IFFALSE 67674
// sShovel := true ;
67666: LD_ADDR_EXP 101
67670: PUSH
67671: LD_INT 1
67673: ST_TO_ADDR
// if p3 = 25 then
67674: LD_VAR 0 3
67678: PUSH
67679: LD_INT 25
67681: EQUAL
67682: IFFALSE 67692
// sSheik := true ;
67684: LD_ADDR_EXP 102
67688: PUSH
67689: LD_INT 1
67691: ST_TO_ADDR
// if p3 = 26 then
67692: LD_VAR 0 3
67696: PUSH
67697: LD_INT 26
67699: EQUAL
67700: IFFALSE 67710
// sEarthquake := true ;
67702: LD_ADDR_EXP 104
67706: PUSH
67707: LD_INT 1
67709: ST_TO_ADDR
// if p3 = 27 then
67710: LD_VAR 0 3
67714: PUSH
67715: LD_INT 27
67717: EQUAL
67718: IFFALSE 67728
// sAI := true ;
67720: LD_ADDR_EXP 105
67724: PUSH
67725: LD_INT 1
67727: ST_TO_ADDR
// if p3 = 28 then
67728: LD_VAR 0 3
67732: PUSH
67733: LD_INT 28
67735: EQUAL
67736: IFFALSE 67746
// sCargo := true ;
67738: LD_ADDR_EXP 108
67742: PUSH
67743: LD_INT 1
67745: ST_TO_ADDR
// if p3 = 29 then
67746: LD_VAR 0 3
67750: PUSH
67751: LD_INT 29
67753: EQUAL
67754: IFFALSE 67764
// sDLaser := true ;
67756: LD_ADDR_EXP 109
67760: PUSH
67761: LD_INT 1
67763: ST_TO_ADDR
// if p3 = 30 then
67764: LD_VAR 0 3
67768: PUSH
67769: LD_INT 30
67771: EQUAL
67772: IFFALSE 67782
// sExchange := true ;
67774: LD_ADDR_EXP 110
67778: PUSH
67779: LD_INT 1
67781: ST_TO_ADDR
// if p3 = 31 then
67782: LD_VAR 0 3
67786: PUSH
67787: LD_INT 31
67789: EQUAL
67790: IFFALSE 67800
// sFac := true ;
67792: LD_ADDR_EXP 111
67796: PUSH
67797: LD_INT 1
67799: ST_TO_ADDR
// if p3 = 32 then
67800: LD_VAR 0 3
67804: PUSH
67805: LD_INT 32
67807: EQUAL
67808: IFFALSE 67818
// sPower := true ;
67810: LD_ADDR_EXP 112
67814: PUSH
67815: LD_INT 1
67817: ST_TO_ADDR
// if p3 = 33 then
67818: LD_VAR 0 3
67822: PUSH
67823: LD_INT 33
67825: EQUAL
67826: IFFALSE 67836
// sRandom := true ;
67828: LD_ADDR_EXP 113
67832: PUSH
67833: LD_INT 1
67835: ST_TO_ADDR
// if p3 = 34 then
67836: LD_VAR 0 3
67840: PUSH
67841: LD_INT 34
67843: EQUAL
67844: IFFALSE 67854
// sShield := true ;
67846: LD_ADDR_EXP 114
67850: PUSH
67851: LD_INT 1
67853: ST_TO_ADDR
// if p3 = 35 then
67854: LD_VAR 0 3
67858: PUSH
67859: LD_INT 35
67861: EQUAL
67862: IFFALSE 67872
// sTime := true ;
67864: LD_ADDR_EXP 115
67868: PUSH
67869: LD_INT 1
67871: ST_TO_ADDR
// if p3 = 36 then
67872: LD_VAR 0 3
67876: PUSH
67877: LD_INT 36
67879: EQUAL
67880: IFFALSE 67890
// sTools := true ;
67882: LD_ADDR_EXP 116
67886: PUSH
67887: LD_INT 1
67889: ST_TO_ADDR
// if p3 = 101 then
67890: LD_VAR 0 3
67894: PUSH
67895: LD_INT 101
67897: EQUAL
67898: IFFALSE 67908
// sSold := true ;
67900: LD_ADDR_EXP 81
67904: PUSH
67905: LD_INT 1
67907: ST_TO_ADDR
// if p3 = 102 then
67908: LD_VAR 0 3
67912: PUSH
67913: LD_INT 102
67915: EQUAL
67916: IFFALSE 67926
// sDiff := true ;
67918: LD_ADDR_EXP 82
67922: PUSH
67923: LD_INT 1
67925: ST_TO_ADDR
// if p3 = 103 then
67926: LD_VAR 0 3
67930: PUSH
67931: LD_INT 103
67933: EQUAL
67934: IFFALSE 67944
// sFog := true ;
67936: LD_ADDR_EXP 85
67940: PUSH
67941: LD_INT 1
67943: ST_TO_ADDR
// if p3 = 104 then
67944: LD_VAR 0 3
67948: PUSH
67949: LD_INT 104
67951: EQUAL
67952: IFFALSE 67962
// sReset := true ;
67954: LD_ADDR_EXP 86
67958: PUSH
67959: LD_INT 1
67961: ST_TO_ADDR
// if p3 = 105 then
67962: LD_VAR 0 3
67966: PUSH
67967: LD_INT 105
67969: EQUAL
67970: IFFALSE 67980
// sSun := true ;
67972: LD_ADDR_EXP 87
67976: PUSH
67977: LD_INT 1
67979: ST_TO_ADDR
// if p3 = 106 then
67980: LD_VAR 0 3
67984: PUSH
67985: LD_INT 106
67987: EQUAL
67988: IFFALSE 67998
// sTiger := true ;
67990: LD_ADDR_EXP 83
67994: PUSH
67995: LD_INT 1
67997: ST_TO_ADDR
// if p3 = 107 then
67998: LD_VAR 0 3
68002: PUSH
68003: LD_INT 107
68005: EQUAL
68006: IFFALSE 68016
// sBomb := true ;
68008: LD_ADDR_EXP 84
68012: PUSH
68013: LD_INT 1
68015: ST_TO_ADDR
// if p3 = 108 then
68016: LD_VAR 0 3
68020: PUSH
68021: LD_INT 108
68023: EQUAL
68024: IFFALSE 68034
// sWound := true ;
68026: LD_ADDR_EXP 92
68030: PUSH
68031: LD_INT 1
68033: ST_TO_ADDR
// if p3 = 109 then
68034: LD_VAR 0 3
68038: PUSH
68039: LD_INT 109
68041: EQUAL
68042: IFFALSE 68052
// sBetray := true ;
68044: LD_ADDR_EXP 96
68048: PUSH
68049: LD_INT 1
68051: ST_TO_ADDR
// if p3 = 110 then
68052: LD_VAR 0 3
68056: PUSH
68057: LD_INT 110
68059: EQUAL
68060: IFFALSE 68070
// sContamin := true ;
68062: LD_ADDR_EXP 97
68066: PUSH
68067: LD_INT 1
68069: ST_TO_ADDR
// if p3 = 111 then
68070: LD_VAR 0 3
68074: PUSH
68075: LD_INT 111
68077: EQUAL
68078: IFFALSE 68088
// sOil := true ;
68080: LD_ADDR_EXP 99
68084: PUSH
68085: LD_INT 1
68087: ST_TO_ADDR
// if p3 = 112 then
68088: LD_VAR 0 3
68092: PUSH
68093: LD_INT 112
68095: EQUAL
68096: IFFALSE 68106
// sStu := true ;
68098: LD_ADDR_EXP 103
68102: PUSH
68103: LD_INT 1
68105: ST_TO_ADDR
// if p3 = 113 then
68106: LD_VAR 0 3
68110: PUSH
68111: LD_INT 113
68113: EQUAL
68114: IFFALSE 68124
// sBazooka := true ;
68116: LD_ADDR_EXP 106
68120: PUSH
68121: LD_INT 1
68123: ST_TO_ADDR
// if p3 = 114 then
68124: LD_VAR 0 3
68128: PUSH
68129: LD_INT 114
68131: EQUAL
68132: IFFALSE 68142
// sMortar := true ;
68134: LD_ADDR_EXP 107
68138: PUSH
68139: LD_INT 1
68141: ST_TO_ADDR
// if p3 = 115 then
68142: LD_VAR 0 3
68146: PUSH
68147: LD_INT 115
68149: EQUAL
68150: IFFALSE 68160
// sRanger := true ;
68152: LD_ADDR_EXP 117
68156: PUSH
68157: LD_INT 1
68159: ST_TO_ADDR
// if p3 = 116 then
68160: LD_VAR 0 3
68164: PUSH
68165: LD_INT 116
68167: EQUAL
68168: IFFALSE 68178
// sComputer := true ;
68170: LD_ADDR_EXP 118
68174: PUSH
68175: LD_INT 1
68177: ST_TO_ADDR
// if p3 = 117 then
68178: LD_VAR 0 3
68182: PUSH
68183: LD_INT 117
68185: EQUAL
68186: IFFALSE 68196
// s30 := true ;
68188: LD_ADDR_EXP 119
68192: PUSH
68193: LD_INT 1
68195: ST_TO_ADDR
// if p3 = 118 then
68196: LD_VAR 0 3
68200: PUSH
68201: LD_INT 118
68203: EQUAL
68204: IFFALSE 68214
// s60 := true ;
68206: LD_ADDR_EXP 120
68210: PUSH
68211: LD_INT 1
68213: ST_TO_ADDR
// end ; if p2 = 101 then
68214: LD_VAR 0 2
68218: PUSH
68219: LD_INT 101
68221: EQUAL
68222: IFFALSE 68350
// begin case p3 of 1 :
68224: LD_VAR 0 3
68228: PUSH
68229: LD_INT 1
68231: DOUBLE
68232: EQUAL
68233: IFTRUE 68237
68235: GO 68244
68237: POP
// hHackUnlimitedResources ; 2 :
68238: CALL 80448 0 0
68242: GO 68350
68244: LD_INT 2
68246: DOUBLE
68247: EQUAL
68248: IFTRUE 68252
68250: GO 68259
68252: POP
// hHackSetLevel10 ; 3 :
68253: CALL 80581 0 0
68257: GO 68350
68259: LD_INT 3
68261: DOUBLE
68262: EQUAL
68263: IFTRUE 68267
68265: GO 68274
68267: POP
// hHackSetLevel10YourUnits ; 4 :
68268: CALL 80666 0 0
68272: GO 68350
68274: LD_INT 4
68276: DOUBLE
68277: EQUAL
68278: IFTRUE 68282
68280: GO 68289
68282: POP
// hHackInvincible ; 5 :
68283: CALL 81114 0 0
68287: GO 68350
68289: LD_INT 5
68291: DOUBLE
68292: EQUAL
68293: IFTRUE 68297
68295: GO 68304
68297: POP
// hHackInvisible ; 6 :
68298: CALL 81225 0 0
68302: GO 68350
68304: LD_INT 6
68306: DOUBLE
68307: EQUAL
68308: IFTRUE 68312
68310: GO 68319
68312: POP
// hHackChangeYourSide ; 7 :
68313: CALL 81282 0 0
68317: GO 68350
68319: LD_INT 7
68321: DOUBLE
68322: EQUAL
68323: IFTRUE 68327
68325: GO 68334
68327: POP
// hHackChangeUnitSide ; 8 :
68328: CALL 81324 0 0
68332: GO 68350
68334: LD_INT 8
68336: DOUBLE
68337: EQUAL
68338: IFTRUE 68342
68340: GO 68349
68342: POP
// hHackFog ; end ;
68343: CALL 81425 0 0
68347: GO 68350
68349: POP
// end ; end ;
68350: LD_VAR 0 7
68354: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
68355: GO 68357
68357: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
68358: LD_STRING initStreamRollete();
68360: PPUSH
68361: CALL_OW 559
// InitStreamMode ;
68365: CALL 68377 0 0
// DefineStreamItems ( false ) ;
68369: LD_INT 0
68371: PPUSH
68372: CALL 68841 0 1
// end ;
68376: END
// function InitStreamMode ; begin
68377: LD_INT 0
68379: PPUSH
// streamModeActive := false ;
68380: LD_ADDR_EXP 64
68384: PUSH
68385: LD_INT 0
68387: ST_TO_ADDR
// normalCounter := 36 ;
68388: LD_ADDR_EXP 65
68392: PUSH
68393: LD_INT 36
68395: ST_TO_ADDR
// hardcoreCounter := 18 ;
68396: LD_ADDR_EXP 66
68400: PUSH
68401: LD_INT 18
68403: ST_TO_ADDR
// sRocket := false ;
68404: LD_ADDR_EXP 69
68408: PUSH
68409: LD_INT 0
68411: ST_TO_ADDR
// sSpeed := false ;
68412: LD_ADDR_EXP 68
68416: PUSH
68417: LD_INT 0
68419: ST_TO_ADDR
// sEngine := false ;
68420: LD_ADDR_EXP 70
68424: PUSH
68425: LD_INT 0
68427: ST_TO_ADDR
// sSpec := false ;
68428: LD_ADDR_EXP 67
68432: PUSH
68433: LD_INT 0
68435: ST_TO_ADDR
// sLevel := false ;
68436: LD_ADDR_EXP 71
68440: PUSH
68441: LD_INT 0
68443: ST_TO_ADDR
// sArmoury := false ;
68444: LD_ADDR_EXP 72
68448: PUSH
68449: LD_INT 0
68451: ST_TO_ADDR
// sRadar := false ;
68452: LD_ADDR_EXP 73
68456: PUSH
68457: LD_INT 0
68459: ST_TO_ADDR
// sBunker := false ;
68460: LD_ADDR_EXP 74
68464: PUSH
68465: LD_INT 0
68467: ST_TO_ADDR
// sHack := false ;
68468: LD_ADDR_EXP 75
68472: PUSH
68473: LD_INT 0
68475: ST_TO_ADDR
// sFire := false ;
68476: LD_ADDR_EXP 76
68480: PUSH
68481: LD_INT 0
68483: ST_TO_ADDR
// sRefresh := false ;
68484: LD_ADDR_EXP 77
68488: PUSH
68489: LD_INT 0
68491: ST_TO_ADDR
// sExp := false ;
68492: LD_ADDR_EXP 78
68496: PUSH
68497: LD_INT 0
68499: ST_TO_ADDR
// sDepot := false ;
68500: LD_ADDR_EXP 79
68504: PUSH
68505: LD_INT 0
68507: ST_TO_ADDR
// sFlag := false ;
68508: LD_ADDR_EXP 80
68512: PUSH
68513: LD_INT 0
68515: ST_TO_ADDR
// sKamikadze := false ;
68516: LD_ADDR_EXP 88
68520: PUSH
68521: LD_INT 0
68523: ST_TO_ADDR
// sTroll := false ;
68524: LD_ADDR_EXP 89
68528: PUSH
68529: LD_INT 0
68531: ST_TO_ADDR
// sSlow := false ;
68532: LD_ADDR_EXP 90
68536: PUSH
68537: LD_INT 0
68539: ST_TO_ADDR
// sLack := false ;
68540: LD_ADDR_EXP 91
68544: PUSH
68545: LD_INT 0
68547: ST_TO_ADDR
// sTank := false ;
68548: LD_ADDR_EXP 93
68552: PUSH
68553: LD_INT 0
68555: ST_TO_ADDR
// sRemote := false ;
68556: LD_ADDR_EXP 94
68560: PUSH
68561: LD_INT 0
68563: ST_TO_ADDR
// sPowell := false ;
68564: LD_ADDR_EXP 95
68568: PUSH
68569: LD_INT 0
68571: ST_TO_ADDR
// sTeleport := false ;
68572: LD_ADDR_EXP 98
68576: PUSH
68577: LD_INT 0
68579: ST_TO_ADDR
// sOilTower := false ;
68580: LD_ADDR_EXP 100
68584: PUSH
68585: LD_INT 0
68587: ST_TO_ADDR
// sShovel := false ;
68588: LD_ADDR_EXP 101
68592: PUSH
68593: LD_INT 0
68595: ST_TO_ADDR
// sSheik := false ;
68596: LD_ADDR_EXP 102
68600: PUSH
68601: LD_INT 0
68603: ST_TO_ADDR
// sEarthquake := false ;
68604: LD_ADDR_EXP 104
68608: PUSH
68609: LD_INT 0
68611: ST_TO_ADDR
// sAI := false ;
68612: LD_ADDR_EXP 105
68616: PUSH
68617: LD_INT 0
68619: ST_TO_ADDR
// sCargo := false ;
68620: LD_ADDR_EXP 108
68624: PUSH
68625: LD_INT 0
68627: ST_TO_ADDR
// sDLaser := false ;
68628: LD_ADDR_EXP 109
68632: PUSH
68633: LD_INT 0
68635: ST_TO_ADDR
// sExchange := false ;
68636: LD_ADDR_EXP 110
68640: PUSH
68641: LD_INT 0
68643: ST_TO_ADDR
// sFac := false ;
68644: LD_ADDR_EXP 111
68648: PUSH
68649: LD_INT 0
68651: ST_TO_ADDR
// sPower := false ;
68652: LD_ADDR_EXP 112
68656: PUSH
68657: LD_INT 0
68659: ST_TO_ADDR
// sRandom := false ;
68660: LD_ADDR_EXP 113
68664: PUSH
68665: LD_INT 0
68667: ST_TO_ADDR
// sShield := false ;
68668: LD_ADDR_EXP 114
68672: PUSH
68673: LD_INT 0
68675: ST_TO_ADDR
// sTime := false ;
68676: LD_ADDR_EXP 115
68680: PUSH
68681: LD_INT 0
68683: ST_TO_ADDR
// sTools := false ;
68684: LD_ADDR_EXP 116
68688: PUSH
68689: LD_INT 0
68691: ST_TO_ADDR
// sSold := false ;
68692: LD_ADDR_EXP 81
68696: PUSH
68697: LD_INT 0
68699: ST_TO_ADDR
// sDiff := false ;
68700: LD_ADDR_EXP 82
68704: PUSH
68705: LD_INT 0
68707: ST_TO_ADDR
// sFog := false ;
68708: LD_ADDR_EXP 85
68712: PUSH
68713: LD_INT 0
68715: ST_TO_ADDR
// sReset := false ;
68716: LD_ADDR_EXP 86
68720: PUSH
68721: LD_INT 0
68723: ST_TO_ADDR
// sSun := false ;
68724: LD_ADDR_EXP 87
68728: PUSH
68729: LD_INT 0
68731: ST_TO_ADDR
// sTiger := false ;
68732: LD_ADDR_EXP 83
68736: PUSH
68737: LD_INT 0
68739: ST_TO_ADDR
// sBomb := false ;
68740: LD_ADDR_EXP 84
68744: PUSH
68745: LD_INT 0
68747: ST_TO_ADDR
// sWound := false ;
68748: LD_ADDR_EXP 92
68752: PUSH
68753: LD_INT 0
68755: ST_TO_ADDR
// sBetray := false ;
68756: LD_ADDR_EXP 96
68760: PUSH
68761: LD_INT 0
68763: ST_TO_ADDR
// sContamin := false ;
68764: LD_ADDR_EXP 97
68768: PUSH
68769: LD_INT 0
68771: ST_TO_ADDR
// sOil := false ;
68772: LD_ADDR_EXP 99
68776: PUSH
68777: LD_INT 0
68779: ST_TO_ADDR
// sStu := false ;
68780: LD_ADDR_EXP 103
68784: PUSH
68785: LD_INT 0
68787: ST_TO_ADDR
// sBazooka := false ;
68788: LD_ADDR_EXP 106
68792: PUSH
68793: LD_INT 0
68795: ST_TO_ADDR
// sMortar := false ;
68796: LD_ADDR_EXP 107
68800: PUSH
68801: LD_INT 0
68803: ST_TO_ADDR
// sRanger := false ;
68804: LD_ADDR_EXP 117
68808: PUSH
68809: LD_INT 0
68811: ST_TO_ADDR
// sComputer := false ;
68812: LD_ADDR_EXP 118
68816: PUSH
68817: LD_INT 0
68819: ST_TO_ADDR
// s30 := false ;
68820: LD_ADDR_EXP 119
68824: PUSH
68825: LD_INT 0
68827: ST_TO_ADDR
// s60 := false ;
68828: LD_ADDR_EXP 120
68832: PUSH
68833: LD_INT 0
68835: ST_TO_ADDR
// end ;
68836: LD_VAR 0 1
68840: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68841: LD_INT 0
68843: PPUSH
68844: PPUSH
68845: PPUSH
68846: PPUSH
68847: PPUSH
68848: PPUSH
68849: PPUSH
// result := [ ] ;
68850: LD_ADDR_VAR 0 2
68854: PUSH
68855: EMPTY
68856: ST_TO_ADDR
// if campaign_id = 1 then
68857: LD_OWVAR 69
68861: PUSH
68862: LD_INT 1
68864: EQUAL
68865: IFFALSE 72031
// begin case mission_number of 1 :
68867: LD_OWVAR 70
68871: PUSH
68872: LD_INT 1
68874: DOUBLE
68875: EQUAL
68876: IFTRUE 68880
68878: GO 68956
68880: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68881: LD_ADDR_VAR 0 2
68885: PUSH
68886: LD_INT 2
68888: PUSH
68889: LD_INT 4
68891: PUSH
68892: LD_INT 11
68894: PUSH
68895: LD_INT 12
68897: PUSH
68898: LD_INT 15
68900: PUSH
68901: LD_INT 16
68903: PUSH
68904: LD_INT 22
68906: PUSH
68907: LD_INT 23
68909: PUSH
68910: LD_INT 26
68912: PUSH
68913: EMPTY
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 101
68926: PUSH
68927: LD_INT 102
68929: PUSH
68930: LD_INT 106
68932: PUSH
68933: LD_INT 116
68935: PUSH
68936: LD_INT 117
68938: PUSH
68939: LD_INT 118
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: ST_TO_ADDR
68954: GO 72029
68956: LD_INT 2
68958: DOUBLE
68959: EQUAL
68960: IFTRUE 68964
68962: GO 69048
68964: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68965: LD_ADDR_VAR 0 2
68969: PUSH
68970: LD_INT 2
68972: PUSH
68973: LD_INT 4
68975: PUSH
68976: LD_INT 11
68978: PUSH
68979: LD_INT 12
68981: PUSH
68982: LD_INT 15
68984: PUSH
68985: LD_INT 16
68987: PUSH
68988: LD_INT 22
68990: PUSH
68991: LD_INT 23
68993: PUSH
68994: LD_INT 26
68996: PUSH
68997: EMPTY
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 101
69010: PUSH
69011: LD_INT 102
69013: PUSH
69014: LD_INT 105
69016: PUSH
69017: LD_INT 106
69019: PUSH
69020: LD_INT 108
69022: PUSH
69023: LD_INT 116
69025: PUSH
69026: LD_INT 117
69028: PUSH
69029: LD_INT 118
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: ST_TO_ADDR
69046: GO 72029
69048: LD_INT 3
69050: DOUBLE
69051: EQUAL
69052: IFTRUE 69056
69054: GO 69144
69056: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
69057: LD_ADDR_VAR 0 2
69061: PUSH
69062: LD_INT 2
69064: PUSH
69065: LD_INT 4
69067: PUSH
69068: LD_INT 5
69070: PUSH
69071: LD_INT 11
69073: PUSH
69074: LD_INT 12
69076: PUSH
69077: LD_INT 15
69079: PUSH
69080: LD_INT 16
69082: PUSH
69083: LD_INT 22
69085: PUSH
69086: LD_INT 26
69088: PUSH
69089: LD_INT 36
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 101
69106: PUSH
69107: LD_INT 102
69109: PUSH
69110: LD_INT 105
69112: PUSH
69113: LD_INT 106
69115: PUSH
69116: LD_INT 108
69118: PUSH
69119: LD_INT 116
69121: PUSH
69122: LD_INT 117
69124: PUSH
69125: LD_INT 118
69127: PUSH
69128: EMPTY
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: ST_TO_ADDR
69142: GO 72029
69144: LD_INT 4
69146: DOUBLE
69147: EQUAL
69148: IFTRUE 69152
69150: GO 69248
69152: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
69153: LD_ADDR_VAR 0 2
69157: PUSH
69158: LD_INT 2
69160: PUSH
69161: LD_INT 4
69163: PUSH
69164: LD_INT 5
69166: PUSH
69167: LD_INT 8
69169: PUSH
69170: LD_INT 11
69172: PUSH
69173: LD_INT 12
69175: PUSH
69176: LD_INT 15
69178: PUSH
69179: LD_INT 16
69181: PUSH
69182: LD_INT 22
69184: PUSH
69185: LD_INT 23
69187: PUSH
69188: LD_INT 26
69190: PUSH
69191: LD_INT 36
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 101
69210: PUSH
69211: LD_INT 102
69213: PUSH
69214: LD_INT 105
69216: PUSH
69217: LD_INT 106
69219: PUSH
69220: LD_INT 108
69222: PUSH
69223: LD_INT 116
69225: PUSH
69226: LD_INT 117
69228: PUSH
69229: LD_INT 118
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: ST_TO_ADDR
69246: GO 72029
69248: LD_INT 5
69250: DOUBLE
69251: EQUAL
69252: IFTRUE 69256
69254: GO 69368
69256: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
69257: LD_ADDR_VAR 0 2
69261: PUSH
69262: LD_INT 2
69264: PUSH
69265: LD_INT 4
69267: PUSH
69268: LD_INT 5
69270: PUSH
69271: LD_INT 6
69273: PUSH
69274: LD_INT 8
69276: PUSH
69277: LD_INT 11
69279: PUSH
69280: LD_INT 12
69282: PUSH
69283: LD_INT 15
69285: PUSH
69286: LD_INT 16
69288: PUSH
69289: LD_INT 22
69291: PUSH
69292: LD_INT 23
69294: PUSH
69295: LD_INT 25
69297: PUSH
69298: LD_INT 26
69300: PUSH
69301: LD_INT 36
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 101
69322: PUSH
69323: LD_INT 102
69325: PUSH
69326: LD_INT 105
69328: PUSH
69329: LD_INT 106
69331: PUSH
69332: LD_INT 108
69334: PUSH
69335: LD_INT 109
69337: PUSH
69338: LD_INT 112
69340: PUSH
69341: LD_INT 116
69343: PUSH
69344: LD_INT 117
69346: PUSH
69347: LD_INT 118
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: ST_TO_ADDR
69366: GO 72029
69368: LD_INT 6
69370: DOUBLE
69371: EQUAL
69372: IFTRUE 69376
69374: GO 69508
69376: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
69377: LD_ADDR_VAR 0 2
69381: PUSH
69382: LD_INT 2
69384: PUSH
69385: LD_INT 4
69387: PUSH
69388: LD_INT 5
69390: PUSH
69391: LD_INT 6
69393: PUSH
69394: LD_INT 8
69396: PUSH
69397: LD_INT 11
69399: PUSH
69400: LD_INT 12
69402: PUSH
69403: LD_INT 15
69405: PUSH
69406: LD_INT 16
69408: PUSH
69409: LD_INT 20
69411: PUSH
69412: LD_INT 21
69414: PUSH
69415: LD_INT 22
69417: PUSH
69418: LD_INT 23
69420: PUSH
69421: LD_INT 25
69423: PUSH
69424: LD_INT 26
69426: PUSH
69427: LD_INT 30
69429: PUSH
69430: LD_INT 31
69432: PUSH
69433: LD_INT 32
69435: PUSH
69436: LD_INT 36
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 101
69462: PUSH
69463: LD_INT 102
69465: PUSH
69466: LD_INT 105
69468: PUSH
69469: LD_INT 106
69471: PUSH
69472: LD_INT 108
69474: PUSH
69475: LD_INT 109
69477: PUSH
69478: LD_INT 112
69480: PUSH
69481: LD_INT 116
69483: PUSH
69484: LD_INT 117
69486: PUSH
69487: LD_INT 118
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: ST_TO_ADDR
69506: GO 72029
69508: LD_INT 7
69510: DOUBLE
69511: EQUAL
69512: IFTRUE 69516
69514: GO 69628
69516: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
69517: LD_ADDR_VAR 0 2
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: LD_INT 4
69527: PUSH
69528: LD_INT 5
69530: PUSH
69531: LD_INT 7
69533: PUSH
69534: LD_INT 11
69536: PUSH
69537: LD_INT 12
69539: PUSH
69540: LD_INT 15
69542: PUSH
69543: LD_INT 16
69545: PUSH
69546: LD_INT 20
69548: PUSH
69549: LD_INT 21
69551: PUSH
69552: LD_INT 22
69554: PUSH
69555: LD_INT 23
69557: PUSH
69558: LD_INT 25
69560: PUSH
69561: LD_INT 26
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 101
69582: PUSH
69583: LD_INT 102
69585: PUSH
69586: LD_INT 103
69588: PUSH
69589: LD_INT 105
69591: PUSH
69592: LD_INT 106
69594: PUSH
69595: LD_INT 108
69597: PUSH
69598: LD_INT 112
69600: PUSH
69601: LD_INT 116
69603: PUSH
69604: LD_INT 117
69606: PUSH
69607: LD_INT 118
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: ST_TO_ADDR
69626: GO 72029
69628: LD_INT 8
69630: DOUBLE
69631: EQUAL
69632: IFTRUE 69636
69634: GO 69776
69636: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69637: LD_ADDR_VAR 0 2
69641: PUSH
69642: LD_INT 2
69644: PUSH
69645: LD_INT 4
69647: PUSH
69648: LD_INT 5
69650: PUSH
69651: LD_INT 6
69653: PUSH
69654: LD_INT 7
69656: PUSH
69657: LD_INT 8
69659: PUSH
69660: LD_INT 11
69662: PUSH
69663: LD_INT 12
69665: PUSH
69666: LD_INT 15
69668: PUSH
69669: LD_INT 16
69671: PUSH
69672: LD_INT 20
69674: PUSH
69675: LD_INT 21
69677: PUSH
69678: LD_INT 22
69680: PUSH
69681: LD_INT 23
69683: PUSH
69684: LD_INT 25
69686: PUSH
69687: LD_INT 26
69689: PUSH
69690: LD_INT 30
69692: PUSH
69693: LD_INT 31
69695: PUSH
69696: LD_INT 32
69698: PUSH
69699: LD_INT 36
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: LIST
69706: LIST
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: LIST
69717: LIST
69718: LIST
69719: LIST
69720: LIST
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 101
69726: PUSH
69727: LD_INT 102
69729: PUSH
69730: LD_INT 103
69732: PUSH
69733: LD_INT 105
69735: PUSH
69736: LD_INT 106
69738: PUSH
69739: LD_INT 108
69741: PUSH
69742: LD_INT 109
69744: PUSH
69745: LD_INT 112
69747: PUSH
69748: LD_INT 116
69750: PUSH
69751: LD_INT 117
69753: PUSH
69754: LD_INT 118
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: ST_TO_ADDR
69774: GO 72029
69776: LD_INT 9
69778: DOUBLE
69779: EQUAL
69780: IFTRUE 69784
69782: GO 69932
69784: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69785: LD_ADDR_VAR 0 2
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: LD_INT 4
69795: PUSH
69796: LD_INT 5
69798: PUSH
69799: LD_INT 6
69801: PUSH
69802: LD_INT 7
69804: PUSH
69805: LD_INT 8
69807: PUSH
69808: LD_INT 11
69810: PUSH
69811: LD_INT 12
69813: PUSH
69814: LD_INT 15
69816: PUSH
69817: LD_INT 16
69819: PUSH
69820: LD_INT 20
69822: PUSH
69823: LD_INT 21
69825: PUSH
69826: LD_INT 22
69828: PUSH
69829: LD_INT 23
69831: PUSH
69832: LD_INT 25
69834: PUSH
69835: LD_INT 26
69837: PUSH
69838: LD_INT 28
69840: PUSH
69841: LD_INT 30
69843: PUSH
69844: LD_INT 31
69846: PUSH
69847: LD_INT 32
69849: PUSH
69850: LD_INT 36
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 101
69878: PUSH
69879: LD_INT 102
69881: PUSH
69882: LD_INT 103
69884: PUSH
69885: LD_INT 105
69887: PUSH
69888: LD_INT 106
69890: PUSH
69891: LD_INT 108
69893: PUSH
69894: LD_INT 109
69896: PUSH
69897: LD_INT 112
69899: PUSH
69900: LD_INT 114
69902: PUSH
69903: LD_INT 116
69905: PUSH
69906: LD_INT 117
69908: PUSH
69909: LD_INT 118
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: ST_TO_ADDR
69930: GO 72029
69932: LD_INT 10
69934: DOUBLE
69935: EQUAL
69936: IFTRUE 69940
69938: GO 70136
69940: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69941: LD_ADDR_VAR 0 2
69945: PUSH
69946: LD_INT 2
69948: PUSH
69949: LD_INT 4
69951: PUSH
69952: LD_INT 5
69954: PUSH
69955: LD_INT 6
69957: PUSH
69958: LD_INT 7
69960: PUSH
69961: LD_INT 8
69963: PUSH
69964: LD_INT 9
69966: PUSH
69967: LD_INT 10
69969: PUSH
69970: LD_INT 11
69972: PUSH
69973: LD_INT 12
69975: PUSH
69976: LD_INT 13
69978: PUSH
69979: LD_INT 14
69981: PUSH
69982: LD_INT 15
69984: PUSH
69985: LD_INT 16
69987: PUSH
69988: LD_INT 17
69990: PUSH
69991: LD_INT 18
69993: PUSH
69994: LD_INT 19
69996: PUSH
69997: LD_INT 20
69999: PUSH
70000: LD_INT 21
70002: PUSH
70003: LD_INT 22
70005: PUSH
70006: LD_INT 23
70008: PUSH
70009: LD_INT 24
70011: PUSH
70012: LD_INT 25
70014: PUSH
70015: LD_INT 26
70017: PUSH
70018: LD_INT 28
70020: PUSH
70021: LD_INT 30
70023: PUSH
70024: LD_INT 31
70026: PUSH
70027: LD_INT 32
70029: PUSH
70030: LD_INT 36
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 101
70066: PUSH
70067: LD_INT 102
70069: PUSH
70070: LD_INT 103
70072: PUSH
70073: LD_INT 104
70075: PUSH
70076: LD_INT 105
70078: PUSH
70079: LD_INT 106
70081: PUSH
70082: LD_INT 107
70084: PUSH
70085: LD_INT 108
70087: PUSH
70088: LD_INT 109
70090: PUSH
70091: LD_INT 110
70093: PUSH
70094: LD_INT 111
70096: PUSH
70097: LD_INT 112
70099: PUSH
70100: LD_INT 114
70102: PUSH
70103: LD_INT 116
70105: PUSH
70106: LD_INT 117
70108: PUSH
70109: LD_INT 118
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: ST_TO_ADDR
70134: GO 72029
70136: LD_INT 11
70138: DOUBLE
70139: EQUAL
70140: IFTRUE 70144
70142: GO 70348
70144: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
70145: LD_ADDR_VAR 0 2
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 3
70155: PUSH
70156: LD_INT 4
70158: PUSH
70159: LD_INT 5
70161: PUSH
70162: LD_INT 6
70164: PUSH
70165: LD_INT 7
70167: PUSH
70168: LD_INT 8
70170: PUSH
70171: LD_INT 9
70173: PUSH
70174: LD_INT 10
70176: PUSH
70177: LD_INT 11
70179: PUSH
70180: LD_INT 12
70182: PUSH
70183: LD_INT 13
70185: PUSH
70186: LD_INT 14
70188: PUSH
70189: LD_INT 15
70191: PUSH
70192: LD_INT 16
70194: PUSH
70195: LD_INT 17
70197: PUSH
70198: LD_INT 18
70200: PUSH
70201: LD_INT 19
70203: PUSH
70204: LD_INT 20
70206: PUSH
70207: LD_INT 21
70209: PUSH
70210: LD_INT 22
70212: PUSH
70213: LD_INT 23
70215: PUSH
70216: LD_INT 24
70218: PUSH
70219: LD_INT 25
70221: PUSH
70222: LD_INT 26
70224: PUSH
70225: LD_INT 28
70227: PUSH
70228: LD_INT 30
70230: PUSH
70231: LD_INT 31
70233: PUSH
70234: LD_INT 32
70236: PUSH
70237: LD_INT 34
70239: PUSH
70240: LD_INT 36
70242: PUSH
70243: EMPTY
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: LIST
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 101
70278: PUSH
70279: LD_INT 102
70281: PUSH
70282: LD_INT 103
70284: PUSH
70285: LD_INT 104
70287: PUSH
70288: LD_INT 105
70290: PUSH
70291: LD_INT 106
70293: PUSH
70294: LD_INT 107
70296: PUSH
70297: LD_INT 108
70299: PUSH
70300: LD_INT 109
70302: PUSH
70303: LD_INT 110
70305: PUSH
70306: LD_INT 111
70308: PUSH
70309: LD_INT 112
70311: PUSH
70312: LD_INT 114
70314: PUSH
70315: LD_INT 116
70317: PUSH
70318: LD_INT 117
70320: PUSH
70321: LD_INT 118
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: ST_TO_ADDR
70346: GO 72029
70348: LD_INT 12
70350: DOUBLE
70351: EQUAL
70352: IFTRUE 70356
70354: GO 70576
70356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
70357: LD_ADDR_VAR 0 2
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: LD_INT 2
70367: PUSH
70368: LD_INT 3
70370: PUSH
70371: LD_INT 4
70373: PUSH
70374: LD_INT 5
70376: PUSH
70377: LD_INT 6
70379: PUSH
70380: LD_INT 7
70382: PUSH
70383: LD_INT 8
70385: PUSH
70386: LD_INT 9
70388: PUSH
70389: LD_INT 10
70391: PUSH
70392: LD_INT 11
70394: PUSH
70395: LD_INT 12
70397: PUSH
70398: LD_INT 13
70400: PUSH
70401: LD_INT 14
70403: PUSH
70404: LD_INT 15
70406: PUSH
70407: LD_INT 16
70409: PUSH
70410: LD_INT 17
70412: PUSH
70413: LD_INT 18
70415: PUSH
70416: LD_INT 19
70418: PUSH
70419: LD_INT 20
70421: PUSH
70422: LD_INT 21
70424: PUSH
70425: LD_INT 22
70427: PUSH
70428: LD_INT 23
70430: PUSH
70431: LD_INT 24
70433: PUSH
70434: LD_INT 25
70436: PUSH
70437: LD_INT 26
70439: PUSH
70440: LD_INT 27
70442: PUSH
70443: LD_INT 28
70445: PUSH
70446: LD_INT 30
70448: PUSH
70449: LD_INT 31
70451: PUSH
70452: LD_INT 32
70454: PUSH
70455: LD_INT 33
70457: PUSH
70458: LD_INT 34
70460: PUSH
70461: LD_INT 36
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 101
70502: PUSH
70503: LD_INT 102
70505: PUSH
70506: LD_INT 103
70508: PUSH
70509: LD_INT 104
70511: PUSH
70512: LD_INT 105
70514: PUSH
70515: LD_INT 106
70517: PUSH
70518: LD_INT 107
70520: PUSH
70521: LD_INT 108
70523: PUSH
70524: LD_INT 109
70526: PUSH
70527: LD_INT 110
70529: PUSH
70530: LD_INT 111
70532: PUSH
70533: LD_INT 112
70535: PUSH
70536: LD_INT 113
70538: PUSH
70539: LD_INT 114
70541: PUSH
70542: LD_INT 116
70544: PUSH
70545: LD_INT 117
70547: PUSH
70548: LD_INT 118
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: ST_TO_ADDR
70574: GO 72029
70576: LD_INT 13
70578: DOUBLE
70579: EQUAL
70580: IFTRUE 70584
70582: GO 70792
70584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70585: LD_ADDR_VAR 0 2
70589: PUSH
70590: LD_INT 1
70592: PUSH
70593: LD_INT 2
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: LD_INT 4
70601: PUSH
70602: LD_INT 5
70604: PUSH
70605: LD_INT 8
70607: PUSH
70608: LD_INT 9
70610: PUSH
70611: LD_INT 10
70613: PUSH
70614: LD_INT 11
70616: PUSH
70617: LD_INT 12
70619: PUSH
70620: LD_INT 14
70622: PUSH
70623: LD_INT 15
70625: PUSH
70626: LD_INT 16
70628: PUSH
70629: LD_INT 17
70631: PUSH
70632: LD_INT 18
70634: PUSH
70635: LD_INT 19
70637: PUSH
70638: LD_INT 20
70640: PUSH
70641: LD_INT 21
70643: PUSH
70644: LD_INT 22
70646: PUSH
70647: LD_INT 23
70649: PUSH
70650: LD_INT 24
70652: PUSH
70653: LD_INT 25
70655: PUSH
70656: LD_INT 26
70658: PUSH
70659: LD_INT 27
70661: PUSH
70662: LD_INT 28
70664: PUSH
70665: LD_INT 30
70667: PUSH
70668: LD_INT 31
70670: PUSH
70671: LD_INT 32
70673: PUSH
70674: LD_INT 33
70676: PUSH
70677: LD_INT 34
70679: PUSH
70680: LD_INT 36
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 101
70718: PUSH
70719: LD_INT 102
70721: PUSH
70722: LD_INT 103
70724: PUSH
70725: LD_INT 104
70727: PUSH
70728: LD_INT 105
70730: PUSH
70731: LD_INT 106
70733: PUSH
70734: LD_INT 107
70736: PUSH
70737: LD_INT 108
70739: PUSH
70740: LD_INT 109
70742: PUSH
70743: LD_INT 110
70745: PUSH
70746: LD_INT 111
70748: PUSH
70749: LD_INT 112
70751: PUSH
70752: LD_INT 113
70754: PUSH
70755: LD_INT 114
70757: PUSH
70758: LD_INT 116
70760: PUSH
70761: LD_INT 117
70763: PUSH
70764: LD_INT 118
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: LIST
70784: LIST
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: ST_TO_ADDR
70790: GO 72029
70792: LD_INT 14
70794: DOUBLE
70795: EQUAL
70796: IFTRUE 70800
70798: GO 71024
70800: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70801: LD_ADDR_VAR 0 2
70805: PUSH
70806: LD_INT 1
70808: PUSH
70809: LD_INT 2
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: LD_INT 4
70817: PUSH
70818: LD_INT 5
70820: PUSH
70821: LD_INT 6
70823: PUSH
70824: LD_INT 7
70826: PUSH
70827: LD_INT 8
70829: PUSH
70830: LD_INT 9
70832: PUSH
70833: LD_INT 10
70835: PUSH
70836: LD_INT 11
70838: PUSH
70839: LD_INT 12
70841: PUSH
70842: LD_INT 13
70844: PUSH
70845: LD_INT 14
70847: PUSH
70848: LD_INT 15
70850: PUSH
70851: LD_INT 16
70853: PUSH
70854: LD_INT 17
70856: PUSH
70857: LD_INT 18
70859: PUSH
70860: LD_INT 19
70862: PUSH
70863: LD_INT 20
70865: PUSH
70866: LD_INT 21
70868: PUSH
70869: LD_INT 22
70871: PUSH
70872: LD_INT 23
70874: PUSH
70875: LD_INT 24
70877: PUSH
70878: LD_INT 25
70880: PUSH
70881: LD_INT 26
70883: PUSH
70884: LD_INT 27
70886: PUSH
70887: LD_INT 28
70889: PUSH
70890: LD_INT 29
70892: PUSH
70893: LD_INT 30
70895: PUSH
70896: LD_INT 31
70898: PUSH
70899: LD_INT 32
70901: PUSH
70902: LD_INT 33
70904: PUSH
70905: LD_INT 34
70907: PUSH
70908: LD_INT 36
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 101
70950: PUSH
70951: LD_INT 102
70953: PUSH
70954: LD_INT 103
70956: PUSH
70957: LD_INT 104
70959: PUSH
70960: LD_INT 105
70962: PUSH
70963: LD_INT 106
70965: PUSH
70966: LD_INT 107
70968: PUSH
70969: LD_INT 108
70971: PUSH
70972: LD_INT 109
70974: PUSH
70975: LD_INT 110
70977: PUSH
70978: LD_INT 111
70980: PUSH
70981: LD_INT 112
70983: PUSH
70984: LD_INT 113
70986: PUSH
70987: LD_INT 114
70989: PUSH
70990: LD_INT 116
70992: PUSH
70993: LD_INT 117
70995: PUSH
70996: LD_INT 118
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: PUSH
71018: EMPTY
71019: LIST
71020: LIST
71021: ST_TO_ADDR
71022: GO 72029
71024: LD_INT 15
71026: DOUBLE
71027: EQUAL
71028: IFTRUE 71032
71030: GO 71256
71032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
71033: LD_ADDR_VAR 0 2
71037: PUSH
71038: LD_INT 1
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: LD_INT 3
71046: PUSH
71047: LD_INT 4
71049: PUSH
71050: LD_INT 5
71052: PUSH
71053: LD_INT 6
71055: PUSH
71056: LD_INT 7
71058: PUSH
71059: LD_INT 8
71061: PUSH
71062: LD_INT 9
71064: PUSH
71065: LD_INT 10
71067: PUSH
71068: LD_INT 11
71070: PUSH
71071: LD_INT 12
71073: PUSH
71074: LD_INT 13
71076: PUSH
71077: LD_INT 14
71079: PUSH
71080: LD_INT 15
71082: PUSH
71083: LD_INT 16
71085: PUSH
71086: LD_INT 17
71088: PUSH
71089: LD_INT 18
71091: PUSH
71092: LD_INT 19
71094: PUSH
71095: LD_INT 20
71097: PUSH
71098: LD_INT 21
71100: PUSH
71101: LD_INT 22
71103: PUSH
71104: LD_INT 23
71106: PUSH
71107: LD_INT 24
71109: PUSH
71110: LD_INT 25
71112: PUSH
71113: LD_INT 26
71115: PUSH
71116: LD_INT 27
71118: PUSH
71119: LD_INT 28
71121: PUSH
71122: LD_INT 29
71124: PUSH
71125: LD_INT 30
71127: PUSH
71128: LD_INT 31
71130: PUSH
71131: LD_INT 32
71133: PUSH
71134: LD_INT 33
71136: PUSH
71137: LD_INT 34
71139: PUSH
71140: LD_INT 36
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 101
71182: PUSH
71183: LD_INT 102
71185: PUSH
71186: LD_INT 103
71188: PUSH
71189: LD_INT 104
71191: PUSH
71192: LD_INT 105
71194: PUSH
71195: LD_INT 106
71197: PUSH
71198: LD_INT 107
71200: PUSH
71201: LD_INT 108
71203: PUSH
71204: LD_INT 109
71206: PUSH
71207: LD_INT 110
71209: PUSH
71210: LD_INT 111
71212: PUSH
71213: LD_INT 112
71215: PUSH
71216: LD_INT 113
71218: PUSH
71219: LD_INT 114
71221: PUSH
71222: LD_INT 116
71224: PUSH
71225: LD_INT 117
71227: PUSH
71228: LD_INT 118
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: ST_TO_ADDR
71254: GO 72029
71256: LD_INT 16
71258: DOUBLE
71259: EQUAL
71260: IFTRUE 71264
71262: GO 71400
71264: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
71265: LD_ADDR_VAR 0 2
71269: PUSH
71270: LD_INT 2
71272: PUSH
71273: LD_INT 4
71275: PUSH
71276: LD_INT 5
71278: PUSH
71279: LD_INT 7
71281: PUSH
71282: LD_INT 11
71284: PUSH
71285: LD_INT 12
71287: PUSH
71288: LD_INT 15
71290: PUSH
71291: LD_INT 16
71293: PUSH
71294: LD_INT 20
71296: PUSH
71297: LD_INT 21
71299: PUSH
71300: LD_INT 22
71302: PUSH
71303: LD_INT 23
71305: PUSH
71306: LD_INT 25
71308: PUSH
71309: LD_INT 26
71311: PUSH
71312: LD_INT 30
71314: PUSH
71315: LD_INT 31
71317: PUSH
71318: LD_INT 32
71320: PUSH
71321: LD_INT 33
71323: PUSH
71324: LD_INT 34
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 101
71350: PUSH
71351: LD_INT 102
71353: PUSH
71354: LD_INT 103
71356: PUSH
71357: LD_INT 106
71359: PUSH
71360: LD_INT 108
71362: PUSH
71363: LD_INT 112
71365: PUSH
71366: LD_INT 113
71368: PUSH
71369: LD_INT 114
71371: PUSH
71372: LD_INT 116
71374: PUSH
71375: LD_INT 117
71377: PUSH
71378: LD_INT 118
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: ST_TO_ADDR
71398: GO 72029
71400: LD_INT 17
71402: DOUBLE
71403: EQUAL
71404: IFTRUE 71408
71406: GO 71632
71408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
71409: LD_ADDR_VAR 0 2
71413: PUSH
71414: LD_INT 1
71416: PUSH
71417: LD_INT 2
71419: PUSH
71420: LD_INT 3
71422: PUSH
71423: LD_INT 4
71425: PUSH
71426: LD_INT 5
71428: PUSH
71429: LD_INT 6
71431: PUSH
71432: LD_INT 7
71434: PUSH
71435: LD_INT 8
71437: PUSH
71438: LD_INT 9
71440: PUSH
71441: LD_INT 10
71443: PUSH
71444: LD_INT 11
71446: PUSH
71447: LD_INT 12
71449: PUSH
71450: LD_INT 13
71452: PUSH
71453: LD_INT 14
71455: PUSH
71456: LD_INT 15
71458: PUSH
71459: LD_INT 16
71461: PUSH
71462: LD_INT 17
71464: PUSH
71465: LD_INT 18
71467: PUSH
71468: LD_INT 19
71470: PUSH
71471: LD_INT 20
71473: PUSH
71474: LD_INT 21
71476: PUSH
71477: LD_INT 22
71479: PUSH
71480: LD_INT 23
71482: PUSH
71483: LD_INT 24
71485: PUSH
71486: LD_INT 25
71488: PUSH
71489: LD_INT 26
71491: PUSH
71492: LD_INT 27
71494: PUSH
71495: LD_INT 28
71497: PUSH
71498: LD_INT 29
71500: PUSH
71501: LD_INT 30
71503: PUSH
71504: LD_INT 31
71506: PUSH
71507: LD_INT 32
71509: PUSH
71510: LD_INT 33
71512: PUSH
71513: LD_INT 34
71515: PUSH
71516: LD_INT 36
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 101
71558: PUSH
71559: LD_INT 102
71561: PUSH
71562: LD_INT 103
71564: PUSH
71565: LD_INT 104
71567: PUSH
71568: LD_INT 105
71570: PUSH
71571: LD_INT 106
71573: PUSH
71574: LD_INT 107
71576: PUSH
71577: LD_INT 108
71579: PUSH
71580: LD_INT 109
71582: PUSH
71583: LD_INT 110
71585: PUSH
71586: LD_INT 111
71588: PUSH
71589: LD_INT 112
71591: PUSH
71592: LD_INT 113
71594: PUSH
71595: LD_INT 114
71597: PUSH
71598: LD_INT 116
71600: PUSH
71601: LD_INT 117
71603: PUSH
71604: LD_INT 118
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: ST_TO_ADDR
71630: GO 72029
71632: LD_INT 18
71634: DOUBLE
71635: EQUAL
71636: IFTRUE 71640
71638: GO 71788
71640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71641: LD_ADDR_VAR 0 2
71645: PUSH
71646: LD_INT 2
71648: PUSH
71649: LD_INT 4
71651: PUSH
71652: LD_INT 5
71654: PUSH
71655: LD_INT 7
71657: PUSH
71658: LD_INT 11
71660: PUSH
71661: LD_INT 12
71663: PUSH
71664: LD_INT 15
71666: PUSH
71667: LD_INT 16
71669: PUSH
71670: LD_INT 20
71672: PUSH
71673: LD_INT 21
71675: PUSH
71676: LD_INT 22
71678: PUSH
71679: LD_INT 23
71681: PUSH
71682: LD_INT 25
71684: PUSH
71685: LD_INT 26
71687: PUSH
71688: LD_INT 30
71690: PUSH
71691: LD_INT 31
71693: PUSH
71694: LD_INT 32
71696: PUSH
71697: LD_INT 33
71699: PUSH
71700: LD_INT 34
71702: PUSH
71703: LD_INT 35
71705: PUSH
71706: LD_INT 36
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 101
71734: PUSH
71735: LD_INT 102
71737: PUSH
71738: LD_INT 103
71740: PUSH
71741: LD_INT 106
71743: PUSH
71744: LD_INT 108
71746: PUSH
71747: LD_INT 112
71749: PUSH
71750: LD_INT 113
71752: PUSH
71753: LD_INT 114
71755: PUSH
71756: LD_INT 115
71758: PUSH
71759: LD_INT 116
71761: PUSH
71762: LD_INT 117
71764: PUSH
71765: LD_INT 118
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: ST_TO_ADDR
71786: GO 72029
71788: LD_INT 19
71790: DOUBLE
71791: EQUAL
71792: IFTRUE 71796
71794: GO 72028
71796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71797: LD_ADDR_VAR 0 2
71801: PUSH
71802: LD_INT 1
71804: PUSH
71805: LD_INT 2
71807: PUSH
71808: LD_INT 3
71810: PUSH
71811: LD_INT 4
71813: PUSH
71814: LD_INT 5
71816: PUSH
71817: LD_INT 6
71819: PUSH
71820: LD_INT 7
71822: PUSH
71823: LD_INT 8
71825: PUSH
71826: LD_INT 9
71828: PUSH
71829: LD_INT 10
71831: PUSH
71832: LD_INT 11
71834: PUSH
71835: LD_INT 12
71837: PUSH
71838: LD_INT 13
71840: PUSH
71841: LD_INT 14
71843: PUSH
71844: LD_INT 15
71846: PUSH
71847: LD_INT 16
71849: PUSH
71850: LD_INT 17
71852: PUSH
71853: LD_INT 18
71855: PUSH
71856: LD_INT 19
71858: PUSH
71859: LD_INT 20
71861: PUSH
71862: LD_INT 21
71864: PUSH
71865: LD_INT 22
71867: PUSH
71868: LD_INT 23
71870: PUSH
71871: LD_INT 24
71873: PUSH
71874: LD_INT 25
71876: PUSH
71877: LD_INT 26
71879: PUSH
71880: LD_INT 27
71882: PUSH
71883: LD_INT 28
71885: PUSH
71886: LD_INT 29
71888: PUSH
71889: LD_INT 30
71891: PUSH
71892: LD_INT 31
71894: PUSH
71895: LD_INT 32
71897: PUSH
71898: LD_INT 33
71900: PUSH
71901: LD_INT 34
71903: PUSH
71904: LD_INT 35
71906: PUSH
71907: LD_INT 36
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 101
71950: PUSH
71951: LD_INT 102
71953: PUSH
71954: LD_INT 103
71956: PUSH
71957: LD_INT 104
71959: PUSH
71960: LD_INT 105
71962: PUSH
71963: LD_INT 106
71965: PUSH
71966: LD_INT 107
71968: PUSH
71969: LD_INT 108
71971: PUSH
71972: LD_INT 109
71974: PUSH
71975: LD_INT 110
71977: PUSH
71978: LD_INT 111
71980: PUSH
71981: LD_INT 112
71983: PUSH
71984: LD_INT 113
71986: PUSH
71987: LD_INT 114
71989: PUSH
71990: LD_INT 115
71992: PUSH
71993: LD_INT 116
71995: PUSH
71996: LD_INT 117
71998: PUSH
71999: LD_INT 118
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: LIST
72006: LIST
72007: LIST
72008: LIST
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: LIST
72018: LIST
72019: LIST
72020: LIST
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: ST_TO_ADDR
72026: GO 72029
72028: POP
// end else
72029: GO 72260
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
72031: LD_ADDR_VAR 0 2
72035: PUSH
72036: LD_INT 1
72038: PUSH
72039: LD_INT 2
72041: PUSH
72042: LD_INT 3
72044: PUSH
72045: LD_INT 4
72047: PUSH
72048: LD_INT 5
72050: PUSH
72051: LD_INT 6
72053: PUSH
72054: LD_INT 7
72056: PUSH
72057: LD_INT 8
72059: PUSH
72060: LD_INT 9
72062: PUSH
72063: LD_INT 10
72065: PUSH
72066: LD_INT 11
72068: PUSH
72069: LD_INT 12
72071: PUSH
72072: LD_INT 13
72074: PUSH
72075: LD_INT 14
72077: PUSH
72078: LD_INT 15
72080: PUSH
72081: LD_INT 16
72083: PUSH
72084: LD_INT 17
72086: PUSH
72087: LD_INT 18
72089: PUSH
72090: LD_INT 19
72092: PUSH
72093: LD_INT 20
72095: PUSH
72096: LD_INT 21
72098: PUSH
72099: LD_INT 22
72101: PUSH
72102: LD_INT 23
72104: PUSH
72105: LD_INT 24
72107: PUSH
72108: LD_INT 25
72110: PUSH
72111: LD_INT 26
72113: PUSH
72114: LD_INT 27
72116: PUSH
72117: LD_INT 28
72119: PUSH
72120: LD_INT 29
72122: PUSH
72123: LD_INT 30
72125: PUSH
72126: LD_INT 31
72128: PUSH
72129: LD_INT 32
72131: PUSH
72132: LD_INT 33
72134: PUSH
72135: LD_INT 34
72137: PUSH
72138: LD_INT 35
72140: PUSH
72141: LD_INT 36
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: LIST
72160: LIST
72161: LIST
72162: LIST
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 101
72184: PUSH
72185: LD_INT 102
72187: PUSH
72188: LD_INT 103
72190: PUSH
72191: LD_INT 104
72193: PUSH
72194: LD_INT 105
72196: PUSH
72197: LD_INT 106
72199: PUSH
72200: LD_INT 107
72202: PUSH
72203: LD_INT 108
72205: PUSH
72206: LD_INT 109
72208: PUSH
72209: LD_INT 110
72211: PUSH
72212: LD_INT 111
72214: PUSH
72215: LD_INT 112
72217: PUSH
72218: LD_INT 113
72220: PUSH
72221: LD_INT 114
72223: PUSH
72224: LD_INT 115
72226: PUSH
72227: LD_INT 116
72229: PUSH
72230: LD_INT 117
72232: PUSH
72233: LD_INT 118
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: PUSH
72256: EMPTY
72257: LIST
72258: LIST
72259: ST_TO_ADDR
// if result then
72260: LD_VAR 0 2
72264: IFFALSE 73050
// begin normal :=  ;
72266: LD_ADDR_VAR 0 5
72270: PUSH
72271: LD_STRING 
72273: ST_TO_ADDR
// hardcore :=  ;
72274: LD_ADDR_VAR 0 6
72278: PUSH
72279: LD_STRING 
72281: ST_TO_ADDR
// active :=  ;
72282: LD_ADDR_VAR 0 7
72286: PUSH
72287: LD_STRING 
72289: ST_TO_ADDR
// for i = 1 to normalCounter do
72290: LD_ADDR_VAR 0 8
72294: PUSH
72295: DOUBLE
72296: LD_INT 1
72298: DEC
72299: ST_TO_ADDR
72300: LD_EXP 65
72304: PUSH
72305: FOR_TO
72306: IFFALSE 72407
// begin tmp := 0 ;
72308: LD_ADDR_VAR 0 3
72312: PUSH
72313: LD_STRING 0
72315: ST_TO_ADDR
// if result [ 1 ] then
72316: LD_VAR 0 2
72320: PUSH
72321: LD_INT 1
72323: ARRAY
72324: IFFALSE 72389
// if result [ 1 ] [ 1 ] = i then
72326: LD_VAR 0 2
72330: PUSH
72331: LD_INT 1
72333: ARRAY
72334: PUSH
72335: LD_INT 1
72337: ARRAY
72338: PUSH
72339: LD_VAR 0 8
72343: EQUAL
72344: IFFALSE 72389
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
72346: LD_ADDR_VAR 0 2
72350: PUSH
72351: LD_VAR 0 2
72355: PPUSH
72356: LD_INT 1
72358: PPUSH
72359: LD_VAR 0 2
72363: PUSH
72364: LD_INT 1
72366: ARRAY
72367: PPUSH
72368: LD_INT 1
72370: PPUSH
72371: CALL_OW 3
72375: PPUSH
72376: CALL_OW 1
72380: ST_TO_ADDR
// tmp := 1 ;
72381: LD_ADDR_VAR 0 3
72385: PUSH
72386: LD_STRING 1
72388: ST_TO_ADDR
// end ; normal := normal & tmp ;
72389: LD_ADDR_VAR 0 5
72393: PUSH
72394: LD_VAR 0 5
72398: PUSH
72399: LD_VAR 0 3
72403: STR
72404: ST_TO_ADDR
// end ;
72405: GO 72305
72407: POP
72408: POP
// for i = 1 to hardcoreCounter do
72409: LD_ADDR_VAR 0 8
72413: PUSH
72414: DOUBLE
72415: LD_INT 1
72417: DEC
72418: ST_TO_ADDR
72419: LD_EXP 66
72423: PUSH
72424: FOR_TO
72425: IFFALSE 72530
// begin tmp := 0 ;
72427: LD_ADDR_VAR 0 3
72431: PUSH
72432: LD_STRING 0
72434: ST_TO_ADDR
// if result [ 2 ] then
72435: LD_VAR 0 2
72439: PUSH
72440: LD_INT 2
72442: ARRAY
72443: IFFALSE 72512
// if result [ 2 ] [ 1 ] = 100 + i then
72445: LD_VAR 0 2
72449: PUSH
72450: LD_INT 2
72452: ARRAY
72453: PUSH
72454: LD_INT 1
72456: ARRAY
72457: PUSH
72458: LD_INT 100
72460: PUSH
72461: LD_VAR 0 8
72465: PLUS
72466: EQUAL
72467: IFFALSE 72512
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
72469: LD_ADDR_VAR 0 2
72473: PUSH
72474: LD_VAR 0 2
72478: PPUSH
72479: LD_INT 2
72481: PPUSH
72482: LD_VAR 0 2
72486: PUSH
72487: LD_INT 2
72489: ARRAY
72490: PPUSH
72491: LD_INT 1
72493: PPUSH
72494: CALL_OW 3
72498: PPUSH
72499: CALL_OW 1
72503: ST_TO_ADDR
// tmp := 1 ;
72504: LD_ADDR_VAR 0 3
72508: PUSH
72509: LD_STRING 1
72511: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
72512: LD_ADDR_VAR 0 6
72516: PUSH
72517: LD_VAR 0 6
72521: PUSH
72522: LD_VAR 0 3
72526: STR
72527: ST_TO_ADDR
// end ;
72528: GO 72424
72530: POP
72531: POP
// if isGameLoad then
72532: LD_VAR 0 1
72536: IFFALSE 73011
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
72538: LD_ADDR_VAR 0 4
72542: PUSH
72543: LD_EXP 69
72547: PUSH
72548: LD_EXP 68
72552: PUSH
72553: LD_EXP 70
72557: PUSH
72558: LD_EXP 67
72562: PUSH
72563: LD_EXP 71
72567: PUSH
72568: LD_EXP 72
72572: PUSH
72573: LD_EXP 73
72577: PUSH
72578: LD_EXP 74
72582: PUSH
72583: LD_EXP 75
72587: PUSH
72588: LD_EXP 76
72592: PUSH
72593: LD_EXP 77
72597: PUSH
72598: LD_EXP 78
72602: PUSH
72603: LD_EXP 79
72607: PUSH
72608: LD_EXP 80
72612: PUSH
72613: LD_EXP 88
72617: PUSH
72618: LD_EXP 89
72622: PUSH
72623: LD_EXP 90
72627: PUSH
72628: LD_EXP 91
72632: PUSH
72633: LD_EXP 93
72637: PUSH
72638: LD_EXP 94
72642: PUSH
72643: LD_EXP 95
72647: PUSH
72648: LD_EXP 98
72652: PUSH
72653: LD_EXP 100
72657: PUSH
72658: LD_EXP 101
72662: PUSH
72663: LD_EXP 102
72667: PUSH
72668: LD_EXP 104
72672: PUSH
72673: LD_EXP 105
72677: PUSH
72678: LD_EXP 108
72682: PUSH
72683: LD_EXP 109
72687: PUSH
72688: LD_EXP 110
72692: PUSH
72693: LD_EXP 111
72697: PUSH
72698: LD_EXP 112
72702: PUSH
72703: LD_EXP 113
72707: PUSH
72708: LD_EXP 114
72712: PUSH
72713: LD_EXP 115
72717: PUSH
72718: LD_EXP 116
72722: PUSH
72723: LD_EXP 81
72727: PUSH
72728: LD_EXP 82
72732: PUSH
72733: LD_EXP 85
72737: PUSH
72738: LD_EXP 86
72742: PUSH
72743: LD_EXP 87
72747: PUSH
72748: LD_EXP 83
72752: PUSH
72753: LD_EXP 84
72757: PUSH
72758: LD_EXP 92
72762: PUSH
72763: LD_EXP 96
72767: PUSH
72768: LD_EXP 97
72772: PUSH
72773: LD_EXP 99
72777: PUSH
72778: LD_EXP 103
72782: PUSH
72783: LD_EXP 106
72787: PUSH
72788: LD_EXP 107
72792: PUSH
72793: LD_EXP 117
72797: PUSH
72798: LD_EXP 118
72802: PUSH
72803: LD_EXP 119
72807: PUSH
72808: LD_EXP 120
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: ST_TO_ADDR
// tmp :=  ;
72869: LD_ADDR_VAR 0 3
72873: PUSH
72874: LD_STRING 
72876: ST_TO_ADDR
// for i = 1 to normalCounter do
72877: LD_ADDR_VAR 0 8
72881: PUSH
72882: DOUBLE
72883: LD_INT 1
72885: DEC
72886: ST_TO_ADDR
72887: LD_EXP 65
72891: PUSH
72892: FOR_TO
72893: IFFALSE 72929
// begin if flags [ i ] then
72895: LD_VAR 0 4
72899: PUSH
72900: LD_VAR 0 8
72904: ARRAY
72905: IFFALSE 72927
// tmp := tmp & i & ; ;
72907: LD_ADDR_VAR 0 3
72911: PUSH
72912: LD_VAR 0 3
72916: PUSH
72917: LD_VAR 0 8
72921: STR
72922: PUSH
72923: LD_STRING ;
72925: STR
72926: ST_TO_ADDR
// end ;
72927: GO 72892
72929: POP
72930: POP
// for i = 1 to hardcoreCounter do
72931: LD_ADDR_VAR 0 8
72935: PUSH
72936: DOUBLE
72937: LD_INT 1
72939: DEC
72940: ST_TO_ADDR
72941: LD_EXP 66
72945: PUSH
72946: FOR_TO
72947: IFFALSE 72993
// begin if flags [ normalCounter + i ] then
72949: LD_VAR 0 4
72953: PUSH
72954: LD_EXP 65
72958: PUSH
72959: LD_VAR 0 8
72963: PLUS
72964: ARRAY
72965: IFFALSE 72991
// tmp := tmp & ( 100 + i ) & ; ;
72967: LD_ADDR_VAR 0 3
72971: PUSH
72972: LD_VAR 0 3
72976: PUSH
72977: LD_INT 100
72979: PUSH
72980: LD_VAR 0 8
72984: PLUS
72985: STR
72986: PUSH
72987: LD_STRING ;
72989: STR
72990: ST_TO_ADDR
// end ;
72991: GO 72946
72993: POP
72994: POP
// if tmp then
72995: LD_VAR 0 3
72999: IFFALSE 73011
// active := tmp ;
73001: LD_ADDR_VAR 0 7
73005: PUSH
73006: LD_VAR 0 3
73010: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
73011: LD_STRING getStreamItemsFromMission("
73013: PUSH
73014: LD_VAR 0 5
73018: STR
73019: PUSH
73020: LD_STRING ","
73022: STR
73023: PUSH
73024: LD_VAR 0 6
73028: STR
73029: PUSH
73030: LD_STRING ","
73032: STR
73033: PUSH
73034: LD_VAR 0 7
73038: STR
73039: PUSH
73040: LD_STRING ")
73042: STR
73043: PPUSH
73044: CALL_OW 559
// end else
73048: GO 73057
// ToLua ( getStreamItemsFromMission("","","") ) ;
73050: LD_STRING getStreamItemsFromMission("","","")
73052: PPUSH
73053: CALL_OW 559
// end ;
73057: LD_VAR 0 2
73061: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
73062: LD_EXP 64
73066: PUSH
73067: LD_EXP 69
73071: AND
73072: IFFALSE 73196
73074: GO 73076
73076: DISABLE
73077: LD_INT 0
73079: PPUSH
73080: PPUSH
// begin enable ;
73081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
73082: LD_ADDR_VAR 0 2
73086: PUSH
73087: LD_INT 22
73089: PUSH
73090: LD_OWVAR 2
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 2
73101: PUSH
73102: LD_INT 34
73104: PUSH
73105: LD_INT 7
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 34
73114: PUSH
73115: LD_INT 45
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 34
73124: PUSH
73125: LD_INT 28
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 34
73134: PUSH
73135: LD_INT 47
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: LIST
73146: LIST
73147: LIST
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PPUSH
73153: CALL_OW 69
73157: ST_TO_ADDR
// if not tmp then
73158: LD_VAR 0 2
73162: NOT
73163: IFFALSE 73167
// exit ;
73165: GO 73196
// for i in tmp do
73167: LD_ADDR_VAR 0 1
73171: PUSH
73172: LD_VAR 0 2
73176: PUSH
73177: FOR_IN
73178: IFFALSE 73194
// begin SetLives ( i , 0 ) ;
73180: LD_VAR 0 1
73184: PPUSH
73185: LD_INT 0
73187: PPUSH
73188: CALL_OW 234
// end ;
73192: GO 73177
73194: POP
73195: POP
// end ;
73196: PPOPN 2
73198: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
73199: LD_EXP 64
73203: PUSH
73204: LD_EXP 70
73208: AND
73209: IFFALSE 73293
73211: GO 73213
73213: DISABLE
73214: LD_INT 0
73216: PPUSH
73217: PPUSH
// begin enable ;
73218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
73219: LD_ADDR_VAR 0 2
73223: PUSH
73224: LD_INT 22
73226: PUSH
73227: LD_OWVAR 2
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 32
73238: PUSH
73239: LD_INT 3
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PUSH
73246: EMPTY
73247: LIST
73248: LIST
73249: PPUSH
73250: CALL_OW 69
73254: ST_TO_ADDR
// if not tmp then
73255: LD_VAR 0 2
73259: NOT
73260: IFFALSE 73264
// exit ;
73262: GO 73293
// for i in tmp do
73264: LD_ADDR_VAR 0 1
73268: PUSH
73269: LD_VAR 0 2
73273: PUSH
73274: FOR_IN
73275: IFFALSE 73291
// begin SetLives ( i , 0 ) ;
73277: LD_VAR 0 1
73281: PPUSH
73282: LD_INT 0
73284: PPUSH
73285: CALL_OW 234
// end ;
73289: GO 73274
73291: POP
73292: POP
// end ;
73293: PPOPN 2
73295: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
73296: LD_EXP 64
73300: PUSH
73301: LD_EXP 67
73305: AND
73306: IFFALSE 73399
73308: GO 73310
73310: DISABLE
73311: LD_INT 0
73313: PPUSH
// begin enable ;
73314: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
73315: LD_ADDR_VAR 0 1
73319: PUSH
73320: LD_INT 22
73322: PUSH
73323: LD_OWVAR 2
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 2
73334: PUSH
73335: LD_INT 25
73337: PUSH
73338: LD_INT 5
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 25
73347: PUSH
73348: LD_INT 9
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 25
73357: PUSH
73358: LD_INT 8
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PPUSH
73375: CALL_OW 69
73379: PUSH
73380: FOR_IN
73381: IFFALSE 73397
// begin SetClass ( i , 1 ) ;
73383: LD_VAR 0 1
73387: PPUSH
73388: LD_INT 1
73390: PPUSH
73391: CALL_OW 336
// end ;
73395: GO 73380
73397: POP
73398: POP
// end ;
73399: PPOPN 1
73401: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
73402: LD_EXP 64
73406: PUSH
73407: LD_EXP 68
73411: AND
73412: PUSH
73413: LD_OWVAR 65
73417: PUSH
73418: LD_INT 7
73420: LESS
73421: AND
73422: IFFALSE 73436
73424: GO 73426
73426: DISABLE
// begin enable ;
73427: ENABLE
// game_speed := 7 ;
73428: LD_ADDR_OWVAR 65
73432: PUSH
73433: LD_INT 7
73435: ST_TO_ADDR
// end ;
73436: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
73437: LD_EXP 64
73441: PUSH
73442: LD_EXP 71
73446: AND
73447: IFFALSE 73649
73449: GO 73451
73451: DISABLE
73452: LD_INT 0
73454: PPUSH
73455: PPUSH
73456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73457: LD_ADDR_VAR 0 3
73461: PUSH
73462: LD_INT 81
73464: PUSH
73465: LD_OWVAR 2
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 21
73476: PUSH
73477: LD_INT 1
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PPUSH
73488: CALL_OW 69
73492: ST_TO_ADDR
// if not tmp then
73493: LD_VAR 0 3
73497: NOT
73498: IFFALSE 73502
// exit ;
73500: GO 73649
// if tmp > 5 then
73502: LD_VAR 0 3
73506: PUSH
73507: LD_INT 5
73509: GREATER
73510: IFFALSE 73522
// k := 5 else
73512: LD_ADDR_VAR 0 2
73516: PUSH
73517: LD_INT 5
73519: ST_TO_ADDR
73520: GO 73532
// k := tmp ;
73522: LD_ADDR_VAR 0 2
73526: PUSH
73527: LD_VAR 0 3
73531: ST_TO_ADDR
// for i := 1 to k do
73532: LD_ADDR_VAR 0 1
73536: PUSH
73537: DOUBLE
73538: LD_INT 1
73540: DEC
73541: ST_TO_ADDR
73542: LD_VAR 0 2
73546: PUSH
73547: FOR_TO
73548: IFFALSE 73647
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
73550: LD_VAR 0 3
73554: PUSH
73555: LD_VAR 0 1
73559: ARRAY
73560: PPUSH
73561: LD_VAR 0 1
73565: PUSH
73566: LD_INT 4
73568: MOD
73569: PUSH
73570: LD_INT 1
73572: PLUS
73573: PPUSH
73574: CALL_OW 259
73578: PUSH
73579: LD_INT 10
73581: LESS
73582: IFFALSE 73645
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73584: LD_VAR 0 3
73588: PUSH
73589: LD_VAR 0 1
73593: ARRAY
73594: PPUSH
73595: LD_VAR 0 1
73599: PUSH
73600: LD_INT 4
73602: MOD
73603: PUSH
73604: LD_INT 1
73606: PLUS
73607: PPUSH
73608: LD_VAR 0 3
73612: PUSH
73613: LD_VAR 0 1
73617: ARRAY
73618: PPUSH
73619: LD_VAR 0 1
73623: PUSH
73624: LD_INT 4
73626: MOD
73627: PUSH
73628: LD_INT 1
73630: PLUS
73631: PPUSH
73632: CALL_OW 259
73636: PUSH
73637: LD_INT 1
73639: PLUS
73640: PPUSH
73641: CALL_OW 237
73645: GO 73547
73647: POP
73648: POP
// end ;
73649: PPOPN 3
73651: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73652: LD_EXP 64
73656: PUSH
73657: LD_EXP 72
73661: AND
73662: IFFALSE 73682
73664: GO 73666
73666: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73667: LD_INT 4
73669: PPUSH
73670: LD_OWVAR 2
73674: PPUSH
73675: LD_INT 0
73677: PPUSH
73678: CALL_OW 324
73682: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73683: LD_EXP 64
73687: PUSH
73688: LD_EXP 101
73692: AND
73693: IFFALSE 73713
73695: GO 73697
73697: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73698: LD_INT 19
73700: PPUSH
73701: LD_OWVAR 2
73705: PPUSH
73706: LD_INT 0
73708: PPUSH
73709: CALL_OW 324
73713: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73714: LD_EXP 64
73718: PUSH
73719: LD_EXP 73
73723: AND
73724: IFFALSE 73826
73726: GO 73728
73728: DISABLE
73729: LD_INT 0
73731: PPUSH
73732: PPUSH
// begin enable ;
73733: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73734: LD_ADDR_VAR 0 2
73738: PUSH
73739: LD_INT 22
73741: PUSH
73742: LD_OWVAR 2
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 2
73753: PUSH
73754: LD_INT 34
73756: PUSH
73757: LD_INT 11
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 34
73766: PUSH
73767: LD_INT 30
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PPUSH
73783: CALL_OW 69
73787: ST_TO_ADDR
// if not tmp then
73788: LD_VAR 0 2
73792: NOT
73793: IFFALSE 73797
// exit ;
73795: GO 73826
// for i in tmp do
73797: LD_ADDR_VAR 0 1
73801: PUSH
73802: LD_VAR 0 2
73806: PUSH
73807: FOR_IN
73808: IFFALSE 73824
// begin SetLives ( i , 0 ) ;
73810: LD_VAR 0 1
73814: PPUSH
73815: LD_INT 0
73817: PPUSH
73818: CALL_OW 234
// end ;
73822: GO 73807
73824: POP
73825: POP
// end ;
73826: PPOPN 2
73828: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73829: LD_EXP 64
73833: PUSH
73834: LD_EXP 74
73838: AND
73839: IFFALSE 73859
73841: GO 73843
73843: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73844: LD_INT 32
73846: PPUSH
73847: LD_OWVAR 2
73851: PPUSH
73852: LD_INT 0
73854: PPUSH
73855: CALL_OW 324
73859: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73860: LD_EXP 64
73864: PUSH
73865: LD_EXP 75
73869: AND
73870: IFFALSE 74051
73872: GO 73874
73874: DISABLE
73875: LD_INT 0
73877: PPUSH
73878: PPUSH
73879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73880: LD_ADDR_VAR 0 2
73884: PUSH
73885: LD_INT 22
73887: PUSH
73888: LD_OWVAR 2
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 33
73899: PUSH
73900: LD_INT 3
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PPUSH
73911: CALL_OW 69
73915: ST_TO_ADDR
// if not tmp then
73916: LD_VAR 0 2
73920: NOT
73921: IFFALSE 73925
// exit ;
73923: GO 74051
// side := 0 ;
73925: LD_ADDR_VAR 0 3
73929: PUSH
73930: LD_INT 0
73932: ST_TO_ADDR
// for i := 1 to 8 do
73933: LD_ADDR_VAR 0 1
73937: PUSH
73938: DOUBLE
73939: LD_INT 1
73941: DEC
73942: ST_TO_ADDR
73943: LD_INT 8
73945: PUSH
73946: FOR_TO
73947: IFFALSE 73995
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73949: LD_OWVAR 2
73953: PUSH
73954: LD_VAR 0 1
73958: NONEQUAL
73959: PUSH
73960: LD_OWVAR 2
73964: PPUSH
73965: LD_VAR 0 1
73969: PPUSH
73970: CALL_OW 81
73974: PUSH
73975: LD_INT 2
73977: EQUAL
73978: AND
73979: IFFALSE 73993
// begin side := i ;
73981: LD_ADDR_VAR 0 3
73985: PUSH
73986: LD_VAR 0 1
73990: ST_TO_ADDR
// break ;
73991: GO 73995
// end ;
73993: GO 73946
73995: POP
73996: POP
// if not side then
73997: LD_VAR 0 3
74001: NOT
74002: IFFALSE 74006
// exit ;
74004: GO 74051
// for i := 1 to tmp do
74006: LD_ADDR_VAR 0 1
74010: PUSH
74011: DOUBLE
74012: LD_INT 1
74014: DEC
74015: ST_TO_ADDR
74016: LD_VAR 0 2
74020: PUSH
74021: FOR_TO
74022: IFFALSE 74049
// if Prob ( 60 ) then
74024: LD_INT 60
74026: PPUSH
74027: CALL_OW 13
74031: IFFALSE 74047
// SetSide ( i , side ) ;
74033: LD_VAR 0 1
74037: PPUSH
74038: LD_VAR 0 3
74042: PPUSH
74043: CALL_OW 235
74047: GO 74021
74049: POP
74050: POP
// end ;
74051: PPOPN 3
74053: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
74054: LD_EXP 64
74058: PUSH
74059: LD_EXP 77
74063: AND
74064: IFFALSE 74183
74066: GO 74068
74068: DISABLE
74069: LD_INT 0
74071: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
74072: LD_ADDR_VAR 0 1
74076: PUSH
74077: LD_INT 22
74079: PUSH
74080: LD_OWVAR 2
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 21
74091: PUSH
74092: LD_INT 1
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: LD_INT 3
74101: PUSH
74102: LD_INT 23
74104: PUSH
74105: LD_INT 0
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: PUSH
74112: EMPTY
74113: LIST
74114: LIST
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: LIST
74120: PPUSH
74121: CALL_OW 69
74125: PUSH
74126: FOR_IN
74127: IFFALSE 74181
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
74129: LD_VAR 0 1
74133: PPUSH
74134: CALL_OW 257
74138: PUSH
74139: LD_INT 1
74141: PUSH
74142: LD_INT 2
74144: PUSH
74145: LD_INT 3
74147: PUSH
74148: LD_INT 4
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: LIST
74155: LIST
74156: IN
74157: IFFALSE 74179
// SetClass ( un , rand ( 1 , 4 ) ) ;
74159: LD_VAR 0 1
74163: PPUSH
74164: LD_INT 1
74166: PPUSH
74167: LD_INT 4
74169: PPUSH
74170: CALL_OW 12
74174: PPUSH
74175: CALL_OW 336
74179: GO 74126
74181: POP
74182: POP
// end ;
74183: PPOPN 1
74185: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
74186: LD_EXP 64
74190: PUSH
74191: LD_EXP 76
74195: AND
74196: IFFALSE 74275
74198: GO 74200
74200: DISABLE
74201: LD_INT 0
74203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74204: LD_ADDR_VAR 0 1
74208: PUSH
74209: LD_INT 22
74211: PUSH
74212: LD_OWVAR 2
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 21
74223: PUSH
74224: LD_INT 3
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PPUSH
74235: CALL_OW 69
74239: ST_TO_ADDR
// if not tmp then
74240: LD_VAR 0 1
74244: NOT
74245: IFFALSE 74249
// exit ;
74247: GO 74275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
74249: LD_VAR 0 1
74253: PUSH
74254: LD_INT 1
74256: PPUSH
74257: LD_VAR 0 1
74261: PPUSH
74262: CALL_OW 12
74266: ARRAY
74267: PPUSH
74268: LD_INT 100
74270: PPUSH
74271: CALL_OW 234
// end ;
74275: PPOPN 1
74277: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
74278: LD_EXP 64
74282: PUSH
74283: LD_EXP 78
74287: AND
74288: IFFALSE 74386
74290: GO 74292
74292: DISABLE
74293: LD_INT 0
74295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
74296: LD_ADDR_VAR 0 1
74300: PUSH
74301: LD_INT 22
74303: PUSH
74304: LD_OWVAR 2
74308: PUSH
74309: EMPTY
74310: LIST
74311: LIST
74312: PUSH
74313: LD_INT 21
74315: PUSH
74316: LD_INT 1
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PPUSH
74327: CALL_OW 69
74331: ST_TO_ADDR
// if not tmp then
74332: LD_VAR 0 1
74336: NOT
74337: IFFALSE 74341
// exit ;
74339: GO 74386
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
74341: LD_VAR 0 1
74345: PUSH
74346: LD_INT 1
74348: PPUSH
74349: LD_VAR 0 1
74353: PPUSH
74354: CALL_OW 12
74358: ARRAY
74359: PPUSH
74360: LD_INT 1
74362: PPUSH
74363: LD_INT 4
74365: PPUSH
74366: CALL_OW 12
74370: PPUSH
74371: LD_INT 3000
74373: PPUSH
74374: LD_INT 9000
74376: PPUSH
74377: CALL_OW 12
74381: PPUSH
74382: CALL_OW 492
// end ;
74386: PPOPN 1
74388: END
// every 0 0$1 trigger StreamModeActive and sDepot do
74389: LD_EXP 64
74393: PUSH
74394: LD_EXP 79
74398: AND
74399: IFFALSE 74419
74401: GO 74403
74403: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
74404: LD_INT 1
74406: PPUSH
74407: LD_OWVAR 2
74411: PPUSH
74412: LD_INT 0
74414: PPUSH
74415: CALL_OW 324
74419: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
74420: LD_EXP 64
74424: PUSH
74425: LD_EXP 80
74429: AND
74430: IFFALSE 74513
74432: GO 74434
74434: DISABLE
74435: LD_INT 0
74437: PPUSH
74438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
74439: LD_ADDR_VAR 0 2
74443: PUSH
74444: LD_INT 22
74446: PUSH
74447: LD_OWVAR 2
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 21
74458: PUSH
74459: LD_INT 3
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: EMPTY
74467: LIST
74468: LIST
74469: PPUSH
74470: CALL_OW 69
74474: ST_TO_ADDR
// if not tmp then
74475: LD_VAR 0 2
74479: NOT
74480: IFFALSE 74484
// exit ;
74482: GO 74513
// for i in tmp do
74484: LD_ADDR_VAR 0 1
74488: PUSH
74489: LD_VAR 0 2
74493: PUSH
74494: FOR_IN
74495: IFFALSE 74511
// SetBLevel ( i , 10 ) ;
74497: LD_VAR 0 1
74501: PPUSH
74502: LD_INT 10
74504: PPUSH
74505: CALL_OW 241
74509: GO 74494
74511: POP
74512: POP
// end ;
74513: PPOPN 2
74515: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
74516: LD_EXP 64
74520: PUSH
74521: LD_EXP 81
74525: AND
74526: IFFALSE 74637
74528: GO 74530
74530: DISABLE
74531: LD_INT 0
74533: PPUSH
74534: PPUSH
74535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74536: LD_ADDR_VAR 0 3
74540: PUSH
74541: LD_INT 22
74543: PUSH
74544: LD_OWVAR 2
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 25
74555: PUSH
74556: LD_INT 1
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PPUSH
74567: CALL_OW 69
74571: ST_TO_ADDR
// if not tmp then
74572: LD_VAR 0 3
74576: NOT
74577: IFFALSE 74581
// exit ;
74579: GO 74637
// un := tmp [ rand ( 1 , tmp ) ] ;
74581: LD_ADDR_VAR 0 2
74585: PUSH
74586: LD_VAR 0 3
74590: PUSH
74591: LD_INT 1
74593: PPUSH
74594: LD_VAR 0 3
74598: PPUSH
74599: CALL_OW 12
74603: ARRAY
74604: ST_TO_ADDR
// if Crawls ( un ) then
74605: LD_VAR 0 2
74609: PPUSH
74610: CALL_OW 318
74614: IFFALSE 74625
// ComWalk ( un ) ;
74616: LD_VAR 0 2
74620: PPUSH
74621: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74625: LD_VAR 0 2
74629: PPUSH
74630: LD_INT 5
74632: PPUSH
74633: CALL_OW 336
// end ;
74637: PPOPN 3
74639: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74640: LD_EXP 64
74644: PUSH
74645: LD_EXP 82
74649: AND
74650: PUSH
74651: LD_OWVAR 67
74655: PUSH
74656: LD_INT 4
74658: LESS
74659: AND
74660: IFFALSE 74679
74662: GO 74664
74664: DISABLE
// begin Difficulty := Difficulty + 1 ;
74665: LD_ADDR_OWVAR 67
74669: PUSH
74670: LD_OWVAR 67
74674: PUSH
74675: LD_INT 1
74677: PLUS
74678: ST_TO_ADDR
// end ;
74679: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74680: LD_EXP 64
74684: PUSH
74685: LD_EXP 83
74689: AND
74690: IFFALSE 74793
74692: GO 74694
74694: DISABLE
74695: LD_INT 0
74697: PPUSH
// begin for i := 1 to 5 do
74698: LD_ADDR_VAR 0 1
74702: PUSH
74703: DOUBLE
74704: LD_INT 1
74706: DEC
74707: ST_TO_ADDR
74708: LD_INT 5
74710: PUSH
74711: FOR_TO
74712: IFFALSE 74791
// begin uc_nation := nation_nature ;
74714: LD_ADDR_OWVAR 21
74718: PUSH
74719: LD_INT 0
74721: ST_TO_ADDR
// uc_side := 0 ;
74722: LD_ADDR_OWVAR 20
74726: PUSH
74727: LD_INT 0
74729: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74730: LD_ADDR_OWVAR 29
74734: PUSH
74735: LD_INT 12
74737: PUSH
74738: LD_INT 12
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: ST_TO_ADDR
// hc_agressivity := 20 ;
74745: LD_ADDR_OWVAR 35
74749: PUSH
74750: LD_INT 20
74752: ST_TO_ADDR
// hc_class := class_tiger ;
74753: LD_ADDR_OWVAR 28
74757: PUSH
74758: LD_INT 14
74760: ST_TO_ADDR
// hc_gallery :=  ;
74761: LD_ADDR_OWVAR 33
74765: PUSH
74766: LD_STRING 
74768: ST_TO_ADDR
// hc_name :=  ;
74769: LD_ADDR_OWVAR 26
74773: PUSH
74774: LD_STRING 
74776: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74777: CALL_OW 44
74781: PPUSH
74782: LD_INT 0
74784: PPUSH
74785: CALL_OW 51
// end ;
74789: GO 74711
74791: POP
74792: POP
// end ;
74793: PPOPN 1
74795: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74796: LD_EXP 64
74800: PUSH
74801: LD_EXP 84
74805: AND
74806: IFFALSE 74815
74808: GO 74810
74810: DISABLE
// StreamSibBomb ;
74811: CALL 74816 0 0
74815: END
// export function StreamSibBomb ; var i , x , y ; begin
74816: LD_INT 0
74818: PPUSH
74819: PPUSH
74820: PPUSH
74821: PPUSH
// result := false ;
74822: LD_ADDR_VAR 0 1
74826: PUSH
74827: LD_INT 0
74829: ST_TO_ADDR
// for i := 1 to 16 do
74830: LD_ADDR_VAR 0 2
74834: PUSH
74835: DOUBLE
74836: LD_INT 1
74838: DEC
74839: ST_TO_ADDR
74840: LD_INT 16
74842: PUSH
74843: FOR_TO
74844: IFFALSE 75043
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74846: LD_ADDR_VAR 0 3
74850: PUSH
74851: LD_INT 10
74853: PUSH
74854: LD_INT 20
74856: PUSH
74857: LD_INT 30
74859: PUSH
74860: LD_INT 40
74862: PUSH
74863: LD_INT 50
74865: PUSH
74866: LD_INT 60
74868: PUSH
74869: LD_INT 70
74871: PUSH
74872: LD_INT 80
74874: PUSH
74875: LD_INT 90
74877: PUSH
74878: LD_INT 100
74880: PUSH
74881: LD_INT 110
74883: PUSH
74884: LD_INT 120
74886: PUSH
74887: LD_INT 130
74889: PUSH
74890: LD_INT 140
74892: PUSH
74893: LD_INT 150
74895: PUSH
74896: EMPTY
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 1
74915: PPUSH
74916: LD_INT 15
74918: PPUSH
74919: CALL_OW 12
74923: ARRAY
74924: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74925: LD_ADDR_VAR 0 4
74929: PUSH
74930: LD_INT 10
74932: PUSH
74933: LD_INT 20
74935: PUSH
74936: LD_INT 30
74938: PUSH
74939: LD_INT 40
74941: PUSH
74942: LD_INT 50
74944: PUSH
74945: LD_INT 60
74947: PUSH
74948: LD_INT 70
74950: PUSH
74951: LD_INT 80
74953: PUSH
74954: LD_INT 90
74956: PUSH
74957: LD_INT 100
74959: PUSH
74960: LD_INT 110
74962: PUSH
74963: LD_INT 120
74965: PUSH
74966: LD_INT 130
74968: PUSH
74969: LD_INT 140
74971: PUSH
74972: LD_INT 150
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: PUSH
74992: LD_INT 1
74994: PPUSH
74995: LD_INT 15
74997: PPUSH
74998: CALL_OW 12
75002: ARRAY
75003: ST_TO_ADDR
// if ValidHex ( x , y ) then
75004: LD_VAR 0 3
75008: PPUSH
75009: LD_VAR 0 4
75013: PPUSH
75014: CALL_OW 488
75018: IFFALSE 75041
// begin result := [ x , y ] ;
75020: LD_ADDR_VAR 0 1
75024: PUSH
75025: LD_VAR 0 3
75029: PUSH
75030: LD_VAR 0 4
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: ST_TO_ADDR
// break ;
75039: GO 75043
// end ; end ;
75041: GO 74843
75043: POP
75044: POP
// if result then
75045: LD_VAR 0 1
75049: IFFALSE 75109
// begin ToLua ( playSibBomb() ) ;
75051: LD_STRING playSibBomb()
75053: PPUSH
75054: CALL_OW 559
// wait ( 0 0$14 ) ;
75058: LD_INT 490
75060: PPUSH
75061: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
75065: LD_VAR 0 1
75069: PUSH
75070: LD_INT 1
75072: ARRAY
75073: PPUSH
75074: LD_VAR 0 1
75078: PUSH
75079: LD_INT 2
75081: ARRAY
75082: PPUSH
75083: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
75087: LD_VAR 0 1
75091: PUSH
75092: LD_INT 1
75094: ARRAY
75095: PPUSH
75096: LD_VAR 0 1
75100: PUSH
75101: LD_INT 2
75103: ARRAY
75104: PPUSH
75105: CALL_OW 429
// end ; end ;
75109: LD_VAR 0 1
75113: RET
// every 0 0$1 trigger StreamModeActive and sReset do
75114: LD_EXP 64
75118: PUSH
75119: LD_EXP 86
75123: AND
75124: IFFALSE 75136
75126: GO 75128
75128: DISABLE
// YouLost (  ) ;
75129: LD_STRING 
75131: PPUSH
75132: CALL_OW 104
75136: END
// every 0 0$1 trigger StreamModeActive and sFog do
75137: LD_EXP 64
75141: PUSH
75142: LD_EXP 85
75146: AND
75147: IFFALSE 75161
75149: GO 75151
75151: DISABLE
// FogOff ( your_side ) ;
75152: LD_OWVAR 2
75156: PPUSH
75157: CALL_OW 344
75161: END
// every 0 0$1 trigger StreamModeActive and sSun do
75162: LD_EXP 64
75166: PUSH
75167: LD_EXP 87
75171: AND
75172: IFFALSE 75200
75174: GO 75176
75176: DISABLE
// begin solar_recharge_percent := 0 ;
75177: LD_ADDR_OWVAR 79
75181: PUSH
75182: LD_INT 0
75184: ST_TO_ADDR
// wait ( 5 5$00 ) ;
75185: LD_INT 10500
75187: PPUSH
75188: CALL_OW 67
// solar_recharge_percent := 100 ;
75192: LD_ADDR_OWVAR 79
75196: PUSH
75197: LD_INT 100
75199: ST_TO_ADDR
// end ;
75200: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
75201: LD_EXP 64
75205: PUSH
75206: LD_EXP 88
75210: AND
75211: IFFALSE 75450
75213: GO 75215
75215: DISABLE
75216: LD_INT 0
75218: PPUSH
75219: PPUSH
75220: PPUSH
// begin tmp := [ ] ;
75221: LD_ADDR_VAR 0 3
75225: PUSH
75226: EMPTY
75227: ST_TO_ADDR
// for i := 1 to 6 do
75228: LD_ADDR_VAR 0 1
75232: PUSH
75233: DOUBLE
75234: LD_INT 1
75236: DEC
75237: ST_TO_ADDR
75238: LD_INT 6
75240: PUSH
75241: FOR_TO
75242: IFFALSE 75347
// begin uc_nation := nation_nature ;
75244: LD_ADDR_OWVAR 21
75248: PUSH
75249: LD_INT 0
75251: ST_TO_ADDR
// uc_side := 0 ;
75252: LD_ADDR_OWVAR 20
75256: PUSH
75257: LD_INT 0
75259: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
75260: LD_ADDR_OWVAR 29
75264: PUSH
75265: LD_INT 12
75267: PUSH
75268: LD_INT 12
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: ST_TO_ADDR
// hc_agressivity := 20 ;
75275: LD_ADDR_OWVAR 35
75279: PUSH
75280: LD_INT 20
75282: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
75283: LD_ADDR_OWVAR 28
75287: PUSH
75288: LD_INT 17
75290: ST_TO_ADDR
// hc_gallery :=  ;
75291: LD_ADDR_OWVAR 33
75295: PUSH
75296: LD_STRING 
75298: ST_TO_ADDR
// hc_name :=  ;
75299: LD_ADDR_OWVAR 26
75303: PUSH
75304: LD_STRING 
75306: ST_TO_ADDR
// un := CreateHuman ;
75307: LD_ADDR_VAR 0 2
75311: PUSH
75312: CALL_OW 44
75316: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
75317: LD_VAR 0 2
75321: PPUSH
75322: LD_INT 1
75324: PPUSH
75325: CALL_OW 51
// tmp := tmp ^ un ;
75329: LD_ADDR_VAR 0 3
75333: PUSH
75334: LD_VAR 0 3
75338: PUSH
75339: LD_VAR 0 2
75343: ADD
75344: ST_TO_ADDR
// end ;
75345: GO 75241
75347: POP
75348: POP
// repeat wait ( 0 0$1 ) ;
75349: LD_INT 35
75351: PPUSH
75352: CALL_OW 67
// for un in tmp do
75356: LD_ADDR_VAR 0 2
75360: PUSH
75361: LD_VAR 0 3
75365: PUSH
75366: FOR_IN
75367: IFFALSE 75441
// begin if IsDead ( un ) then
75369: LD_VAR 0 2
75373: PPUSH
75374: CALL_OW 301
75378: IFFALSE 75398
// begin tmp := tmp diff un ;
75380: LD_ADDR_VAR 0 3
75384: PUSH
75385: LD_VAR 0 3
75389: PUSH
75390: LD_VAR 0 2
75394: DIFF
75395: ST_TO_ADDR
// continue ;
75396: GO 75366
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
75398: LD_VAR 0 2
75402: PPUSH
75403: LD_INT 3
75405: PUSH
75406: LD_INT 22
75408: PUSH
75409: LD_INT 0
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PPUSH
75420: CALL_OW 69
75424: PPUSH
75425: LD_VAR 0 2
75429: PPUSH
75430: CALL_OW 74
75434: PPUSH
75435: CALL_OW 115
// end ;
75439: GO 75366
75441: POP
75442: POP
// until not tmp ;
75443: LD_VAR 0 3
75447: NOT
75448: IFFALSE 75349
// end ;
75450: PPOPN 3
75452: END
// every 0 0$1 trigger StreamModeActive and sTroll do
75453: LD_EXP 64
75457: PUSH
75458: LD_EXP 89
75462: AND
75463: IFFALSE 75517
75465: GO 75467
75467: DISABLE
// begin ToLua ( displayTroll(); ) ;
75468: LD_STRING displayTroll();
75470: PPUSH
75471: CALL_OW 559
// wait ( 3 3$00 ) ;
75475: LD_INT 6300
75477: PPUSH
75478: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75482: LD_STRING hideTroll();
75484: PPUSH
75485: CALL_OW 559
// wait ( 1 1$00 ) ;
75489: LD_INT 2100
75491: PPUSH
75492: CALL_OW 67
// ToLua ( displayTroll(); ) ;
75496: LD_STRING displayTroll();
75498: PPUSH
75499: CALL_OW 559
// wait ( 1 1$00 ) ;
75503: LD_INT 2100
75505: PPUSH
75506: CALL_OW 67
// ToLua ( hideTroll(); ) ;
75510: LD_STRING hideTroll();
75512: PPUSH
75513: CALL_OW 559
// end ;
75517: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
75518: LD_EXP 64
75522: PUSH
75523: LD_EXP 90
75527: AND
75528: IFFALSE 75591
75530: GO 75532
75532: DISABLE
75533: LD_INT 0
75535: PPUSH
// begin p := 0 ;
75536: LD_ADDR_VAR 0 1
75540: PUSH
75541: LD_INT 0
75543: ST_TO_ADDR
// repeat game_speed := 1 ;
75544: LD_ADDR_OWVAR 65
75548: PUSH
75549: LD_INT 1
75551: ST_TO_ADDR
// wait ( 0 0$1 ) ;
75552: LD_INT 35
75554: PPUSH
75555: CALL_OW 67
// p := p + 1 ;
75559: LD_ADDR_VAR 0 1
75563: PUSH
75564: LD_VAR 0 1
75568: PUSH
75569: LD_INT 1
75571: PLUS
75572: ST_TO_ADDR
// until p >= 60 ;
75573: LD_VAR 0 1
75577: PUSH
75578: LD_INT 60
75580: GREATEREQUAL
75581: IFFALSE 75544
// game_speed := 4 ;
75583: LD_ADDR_OWVAR 65
75587: PUSH
75588: LD_INT 4
75590: ST_TO_ADDR
// end ;
75591: PPOPN 1
75593: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75594: LD_EXP 64
75598: PUSH
75599: LD_EXP 91
75603: AND
75604: IFFALSE 75750
75606: GO 75608
75608: DISABLE
75609: LD_INT 0
75611: PPUSH
75612: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75613: LD_ADDR_VAR 0 1
75617: PUSH
75618: LD_INT 22
75620: PUSH
75621: LD_OWVAR 2
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: LD_INT 2
75632: PUSH
75633: LD_INT 30
75635: PUSH
75636: LD_INT 0
75638: PUSH
75639: EMPTY
75640: LIST
75641: LIST
75642: PUSH
75643: LD_INT 30
75645: PUSH
75646: LD_INT 1
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: LIST
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PPUSH
75662: CALL_OW 69
75666: ST_TO_ADDR
// if not depot then
75667: LD_VAR 0 1
75671: NOT
75672: IFFALSE 75676
// exit ;
75674: GO 75750
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75676: LD_ADDR_VAR 0 2
75680: PUSH
75681: LD_VAR 0 1
75685: PUSH
75686: LD_INT 1
75688: PPUSH
75689: LD_VAR 0 1
75693: PPUSH
75694: CALL_OW 12
75698: ARRAY
75699: PPUSH
75700: CALL_OW 274
75704: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75705: LD_VAR 0 2
75709: PPUSH
75710: LD_INT 1
75712: PPUSH
75713: LD_INT 0
75715: PPUSH
75716: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75720: LD_VAR 0 2
75724: PPUSH
75725: LD_INT 2
75727: PPUSH
75728: LD_INT 0
75730: PPUSH
75731: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75735: LD_VAR 0 2
75739: PPUSH
75740: LD_INT 3
75742: PPUSH
75743: LD_INT 0
75745: PPUSH
75746: CALL_OW 277
// end ;
75750: PPOPN 2
75752: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75753: LD_EXP 64
75757: PUSH
75758: LD_EXP 92
75762: AND
75763: IFFALSE 75860
75765: GO 75767
75767: DISABLE
75768: LD_INT 0
75770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75771: LD_ADDR_VAR 0 1
75775: PUSH
75776: LD_INT 22
75778: PUSH
75779: LD_OWVAR 2
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: PUSH
75788: LD_INT 21
75790: PUSH
75791: LD_INT 1
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: LD_INT 3
75800: PUSH
75801: LD_INT 23
75803: PUSH
75804: LD_INT 0
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: LIST
75819: PPUSH
75820: CALL_OW 69
75824: ST_TO_ADDR
// if not tmp then
75825: LD_VAR 0 1
75829: NOT
75830: IFFALSE 75834
// exit ;
75832: GO 75860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75834: LD_VAR 0 1
75838: PUSH
75839: LD_INT 1
75841: PPUSH
75842: LD_VAR 0 1
75846: PPUSH
75847: CALL_OW 12
75851: ARRAY
75852: PPUSH
75853: LD_INT 200
75855: PPUSH
75856: CALL_OW 234
// end ;
75860: PPOPN 1
75862: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75863: LD_EXP 64
75867: PUSH
75868: LD_EXP 93
75872: AND
75873: IFFALSE 75952
75875: GO 75877
75877: DISABLE
75878: LD_INT 0
75880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75881: LD_ADDR_VAR 0 1
75885: PUSH
75886: LD_INT 22
75888: PUSH
75889: LD_OWVAR 2
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: PUSH
75898: LD_INT 21
75900: PUSH
75901: LD_INT 2
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PPUSH
75912: CALL_OW 69
75916: ST_TO_ADDR
// if not tmp then
75917: LD_VAR 0 1
75921: NOT
75922: IFFALSE 75926
// exit ;
75924: GO 75952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75926: LD_VAR 0 1
75930: PUSH
75931: LD_INT 1
75933: PPUSH
75934: LD_VAR 0 1
75938: PPUSH
75939: CALL_OW 12
75943: ARRAY
75944: PPUSH
75945: LD_INT 60
75947: PPUSH
75948: CALL_OW 234
// end ;
75952: PPOPN 1
75954: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75955: LD_EXP 64
75959: PUSH
75960: LD_EXP 94
75964: AND
75965: IFFALSE 76064
75967: GO 75969
75969: DISABLE
75970: LD_INT 0
75972: PPUSH
75973: PPUSH
// begin enable ;
75974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75975: LD_ADDR_VAR 0 1
75979: PUSH
75980: LD_INT 22
75982: PUSH
75983: LD_OWVAR 2
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PUSH
75992: LD_INT 61
75994: PUSH
75995: EMPTY
75996: LIST
75997: PUSH
75998: LD_INT 33
76000: PUSH
76001: LD_INT 2
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: LIST
76012: PPUSH
76013: CALL_OW 69
76017: ST_TO_ADDR
// if not tmp then
76018: LD_VAR 0 1
76022: NOT
76023: IFFALSE 76027
// exit ;
76025: GO 76064
// for i in tmp do
76027: LD_ADDR_VAR 0 2
76031: PUSH
76032: LD_VAR 0 1
76036: PUSH
76037: FOR_IN
76038: IFFALSE 76062
// if IsControledBy ( i ) then
76040: LD_VAR 0 2
76044: PPUSH
76045: CALL_OW 312
76049: IFFALSE 76060
// ComUnlink ( i ) ;
76051: LD_VAR 0 2
76055: PPUSH
76056: CALL_OW 136
76060: GO 76037
76062: POP
76063: POP
// end ;
76064: PPOPN 2
76066: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
76067: LD_EXP 64
76071: PUSH
76072: LD_EXP 95
76076: AND
76077: IFFALSE 76217
76079: GO 76081
76081: DISABLE
76082: LD_INT 0
76084: PPUSH
76085: PPUSH
// begin ToLua ( displayPowell(); ) ;
76086: LD_STRING displayPowell();
76088: PPUSH
76089: CALL_OW 559
// uc_side := 0 ;
76093: LD_ADDR_OWVAR 20
76097: PUSH
76098: LD_INT 0
76100: ST_TO_ADDR
// uc_nation := 2 ;
76101: LD_ADDR_OWVAR 21
76105: PUSH
76106: LD_INT 2
76108: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
76109: LD_ADDR_OWVAR 37
76113: PUSH
76114: LD_INT 14
76116: ST_TO_ADDR
// vc_engine := engine_siberite ;
76117: LD_ADDR_OWVAR 39
76121: PUSH
76122: LD_INT 3
76124: ST_TO_ADDR
// vc_control := control_apeman ;
76125: LD_ADDR_OWVAR 38
76129: PUSH
76130: LD_INT 5
76132: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
76133: LD_ADDR_OWVAR 40
76137: PUSH
76138: LD_INT 29
76140: ST_TO_ADDR
// un := CreateVehicle ;
76141: LD_ADDR_VAR 0 2
76145: PUSH
76146: CALL_OW 45
76150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76151: LD_VAR 0 2
76155: PPUSH
76156: LD_INT 1
76158: PPUSH
76159: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76163: LD_INT 35
76165: PPUSH
76166: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76170: LD_VAR 0 2
76174: PPUSH
76175: LD_INT 22
76177: PUSH
76178: LD_OWVAR 2
76182: PUSH
76183: EMPTY
76184: LIST
76185: LIST
76186: PPUSH
76187: CALL_OW 69
76191: PPUSH
76192: LD_VAR 0 2
76196: PPUSH
76197: CALL_OW 74
76201: PPUSH
76202: CALL_OW 115
// until IsDead ( un ) ;
76206: LD_VAR 0 2
76210: PPUSH
76211: CALL_OW 301
76215: IFFALSE 76163
// end ;
76217: PPOPN 2
76219: END
// every 0 0$1 trigger StreamModeActive and sStu do
76220: LD_EXP 64
76224: PUSH
76225: LD_EXP 103
76229: AND
76230: IFFALSE 76246
76232: GO 76234
76234: DISABLE
// begin ToLua ( displayStucuk(); ) ;
76235: LD_STRING displayStucuk();
76237: PPUSH
76238: CALL_OW 559
// ResetFog ;
76242: CALL_OW 335
// end ;
76246: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
76247: LD_EXP 64
76251: PUSH
76252: LD_EXP 96
76256: AND
76257: IFFALSE 76398
76259: GO 76261
76261: DISABLE
76262: LD_INT 0
76264: PPUSH
76265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76266: LD_ADDR_VAR 0 2
76270: PUSH
76271: LD_INT 22
76273: PUSH
76274: LD_OWVAR 2
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: LD_INT 21
76285: PUSH
76286: LD_INT 1
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: PPUSH
76297: CALL_OW 69
76301: ST_TO_ADDR
// if not tmp then
76302: LD_VAR 0 2
76306: NOT
76307: IFFALSE 76311
// exit ;
76309: GO 76398
// un := tmp [ rand ( 1 , tmp ) ] ;
76311: LD_ADDR_VAR 0 1
76315: PUSH
76316: LD_VAR 0 2
76320: PUSH
76321: LD_INT 1
76323: PPUSH
76324: LD_VAR 0 2
76328: PPUSH
76329: CALL_OW 12
76333: ARRAY
76334: ST_TO_ADDR
// SetSide ( un , 0 ) ;
76335: LD_VAR 0 1
76339: PPUSH
76340: LD_INT 0
76342: PPUSH
76343: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
76347: LD_VAR 0 1
76351: PPUSH
76352: LD_OWVAR 3
76356: PUSH
76357: LD_VAR 0 1
76361: DIFF
76362: PPUSH
76363: LD_VAR 0 1
76367: PPUSH
76368: CALL_OW 74
76372: PPUSH
76373: CALL_OW 115
// wait ( 0 0$20 ) ;
76377: LD_INT 700
76379: PPUSH
76380: CALL_OW 67
// SetSide ( un , your_side ) ;
76384: LD_VAR 0 1
76388: PPUSH
76389: LD_OWVAR 2
76393: PPUSH
76394: CALL_OW 235
// end ;
76398: PPOPN 2
76400: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
76401: LD_EXP 64
76405: PUSH
76406: LD_EXP 97
76410: AND
76411: IFFALSE 76517
76413: GO 76415
76415: DISABLE
76416: LD_INT 0
76418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
76419: LD_ADDR_VAR 0 1
76423: PUSH
76424: LD_INT 22
76426: PUSH
76427: LD_OWVAR 2
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 2
76438: PUSH
76439: LD_INT 30
76441: PUSH
76442: LD_INT 0
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: PUSH
76449: LD_INT 30
76451: PUSH
76452: LD_INT 1
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: LIST
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PPUSH
76468: CALL_OW 69
76472: ST_TO_ADDR
// if not depot then
76473: LD_VAR 0 1
76477: NOT
76478: IFFALSE 76482
// exit ;
76480: GO 76517
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
76482: LD_VAR 0 1
76486: PUSH
76487: LD_INT 1
76489: ARRAY
76490: PPUSH
76491: CALL_OW 250
76495: PPUSH
76496: LD_VAR 0 1
76500: PUSH
76501: LD_INT 1
76503: ARRAY
76504: PPUSH
76505: CALL_OW 251
76509: PPUSH
76510: LD_INT 70
76512: PPUSH
76513: CALL_OW 495
// end ;
76517: PPOPN 1
76519: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
76520: LD_EXP 64
76524: PUSH
76525: LD_EXP 98
76529: AND
76530: IFFALSE 76741
76532: GO 76534
76534: DISABLE
76535: LD_INT 0
76537: PPUSH
76538: PPUSH
76539: PPUSH
76540: PPUSH
76541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
76542: LD_ADDR_VAR 0 5
76546: PUSH
76547: LD_INT 22
76549: PUSH
76550: LD_OWVAR 2
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: LD_INT 21
76561: PUSH
76562: LD_INT 1
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PPUSH
76573: CALL_OW 69
76577: ST_TO_ADDR
// if not tmp then
76578: LD_VAR 0 5
76582: NOT
76583: IFFALSE 76587
// exit ;
76585: GO 76741
// for i in tmp do
76587: LD_ADDR_VAR 0 1
76591: PUSH
76592: LD_VAR 0 5
76596: PUSH
76597: FOR_IN
76598: IFFALSE 76739
// begin d := rand ( 0 , 5 ) ;
76600: LD_ADDR_VAR 0 4
76604: PUSH
76605: LD_INT 0
76607: PPUSH
76608: LD_INT 5
76610: PPUSH
76611: CALL_OW 12
76615: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76616: LD_ADDR_VAR 0 2
76620: PUSH
76621: LD_VAR 0 1
76625: PPUSH
76626: CALL_OW 250
76630: PPUSH
76631: LD_VAR 0 4
76635: PPUSH
76636: LD_INT 3
76638: PPUSH
76639: LD_INT 12
76641: PPUSH
76642: CALL_OW 12
76646: PPUSH
76647: CALL_OW 272
76651: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76652: LD_ADDR_VAR 0 3
76656: PUSH
76657: LD_VAR 0 1
76661: PPUSH
76662: CALL_OW 251
76666: PPUSH
76667: LD_VAR 0 4
76671: PPUSH
76672: LD_INT 3
76674: PPUSH
76675: LD_INT 12
76677: PPUSH
76678: CALL_OW 12
76682: PPUSH
76683: CALL_OW 273
76687: ST_TO_ADDR
// if ValidHex ( x , y ) then
76688: LD_VAR 0 2
76692: PPUSH
76693: LD_VAR 0 3
76697: PPUSH
76698: CALL_OW 488
76702: IFFALSE 76737
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76704: LD_VAR 0 1
76708: PPUSH
76709: LD_VAR 0 2
76713: PPUSH
76714: LD_VAR 0 3
76718: PPUSH
76719: LD_INT 3
76721: PPUSH
76722: LD_INT 6
76724: PPUSH
76725: CALL_OW 12
76729: PPUSH
76730: LD_INT 1
76732: PPUSH
76733: CALL_OW 483
// end ;
76737: GO 76597
76739: POP
76740: POP
// end ;
76741: PPOPN 5
76743: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76744: LD_EXP 64
76748: PUSH
76749: LD_EXP 99
76753: AND
76754: IFFALSE 76848
76756: GO 76758
76758: DISABLE
76759: LD_INT 0
76761: PPUSH
76762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76763: LD_ADDR_VAR 0 2
76767: PUSH
76768: LD_INT 22
76770: PUSH
76771: LD_OWVAR 2
76775: PUSH
76776: EMPTY
76777: LIST
76778: LIST
76779: PUSH
76780: LD_INT 32
76782: PUSH
76783: LD_INT 1
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: LD_INT 21
76792: PUSH
76793: LD_INT 2
76795: PUSH
76796: EMPTY
76797: LIST
76798: LIST
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: LIST
76804: PPUSH
76805: CALL_OW 69
76809: ST_TO_ADDR
// if not tmp then
76810: LD_VAR 0 2
76814: NOT
76815: IFFALSE 76819
// exit ;
76817: GO 76848
// for i in tmp do
76819: LD_ADDR_VAR 0 1
76823: PUSH
76824: LD_VAR 0 2
76828: PUSH
76829: FOR_IN
76830: IFFALSE 76846
// SetFuel ( i , 0 ) ;
76832: LD_VAR 0 1
76836: PPUSH
76837: LD_INT 0
76839: PPUSH
76840: CALL_OW 240
76844: GO 76829
76846: POP
76847: POP
// end ;
76848: PPOPN 2
76850: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76851: LD_EXP 64
76855: PUSH
76856: LD_EXP 100
76860: AND
76861: IFFALSE 76927
76863: GO 76865
76865: DISABLE
76866: LD_INT 0
76868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76869: LD_ADDR_VAR 0 1
76873: PUSH
76874: LD_INT 22
76876: PUSH
76877: LD_OWVAR 2
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: PUSH
76886: LD_INT 30
76888: PUSH
76889: LD_INT 29
76891: PUSH
76892: EMPTY
76893: LIST
76894: LIST
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PPUSH
76900: CALL_OW 69
76904: ST_TO_ADDR
// if not tmp then
76905: LD_VAR 0 1
76909: NOT
76910: IFFALSE 76914
// exit ;
76912: GO 76927
// DestroyUnit ( tmp [ 1 ] ) ;
76914: LD_VAR 0 1
76918: PUSH
76919: LD_INT 1
76921: ARRAY
76922: PPUSH
76923: CALL_OW 65
// end ;
76927: PPOPN 1
76929: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76930: LD_EXP 64
76934: PUSH
76935: LD_EXP 102
76939: AND
76940: IFFALSE 77069
76942: GO 76944
76944: DISABLE
76945: LD_INT 0
76947: PPUSH
// begin uc_side := 0 ;
76948: LD_ADDR_OWVAR 20
76952: PUSH
76953: LD_INT 0
76955: ST_TO_ADDR
// uc_nation := nation_arabian ;
76956: LD_ADDR_OWVAR 21
76960: PUSH
76961: LD_INT 2
76963: ST_TO_ADDR
// hc_gallery :=  ;
76964: LD_ADDR_OWVAR 33
76968: PUSH
76969: LD_STRING 
76971: ST_TO_ADDR
// hc_name :=  ;
76972: LD_ADDR_OWVAR 26
76976: PUSH
76977: LD_STRING 
76979: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76980: LD_INT 1
76982: PPUSH
76983: LD_INT 11
76985: PPUSH
76986: LD_INT 10
76988: PPUSH
76989: CALL_OW 380
// un := CreateHuman ;
76993: LD_ADDR_VAR 0 1
76997: PUSH
76998: CALL_OW 44
77002: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
77003: LD_VAR 0 1
77007: PPUSH
77008: LD_INT 1
77010: PPUSH
77011: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
77015: LD_INT 35
77017: PPUSH
77018: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
77022: LD_VAR 0 1
77026: PPUSH
77027: LD_INT 22
77029: PUSH
77030: LD_OWVAR 2
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PPUSH
77039: CALL_OW 69
77043: PPUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: CALL_OW 74
77053: PPUSH
77054: CALL_OW 115
// until IsDead ( un ) ;
77058: LD_VAR 0 1
77062: PPUSH
77063: CALL_OW 301
77067: IFFALSE 77015
// end ;
77069: PPOPN 1
77071: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
77072: LD_EXP 64
77076: PUSH
77077: LD_EXP 104
77081: AND
77082: IFFALSE 77094
77084: GO 77086
77086: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
77087: LD_STRING earthquake(getX(game), 0, 32)
77089: PPUSH
77090: CALL_OW 559
77094: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
77095: LD_EXP 64
77099: PUSH
77100: LD_EXP 105
77104: AND
77105: IFFALSE 77196
77107: GO 77109
77109: DISABLE
77110: LD_INT 0
77112: PPUSH
// begin enable ;
77113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
77114: LD_ADDR_VAR 0 1
77118: PUSH
77119: LD_INT 22
77121: PUSH
77122: LD_OWVAR 2
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 21
77133: PUSH
77134: LD_INT 2
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 33
77143: PUSH
77144: LD_INT 3
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: LIST
77155: PPUSH
77156: CALL_OW 69
77160: ST_TO_ADDR
// if not tmp then
77161: LD_VAR 0 1
77165: NOT
77166: IFFALSE 77170
// exit ;
77168: GO 77196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77170: LD_VAR 0 1
77174: PUSH
77175: LD_INT 1
77177: PPUSH
77178: LD_VAR 0 1
77182: PPUSH
77183: CALL_OW 12
77187: ARRAY
77188: PPUSH
77189: LD_INT 1
77191: PPUSH
77192: CALL_OW 234
// end ;
77196: PPOPN 1
77198: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
77199: LD_EXP 64
77203: PUSH
77204: LD_EXP 106
77208: AND
77209: IFFALSE 77350
77211: GO 77213
77213: DISABLE
77214: LD_INT 0
77216: PPUSH
77217: PPUSH
77218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77219: LD_ADDR_VAR 0 3
77223: PUSH
77224: LD_INT 22
77226: PUSH
77227: LD_OWVAR 2
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PUSH
77236: LD_INT 25
77238: PUSH
77239: LD_INT 1
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PPUSH
77250: CALL_OW 69
77254: ST_TO_ADDR
// if not tmp then
77255: LD_VAR 0 3
77259: NOT
77260: IFFALSE 77264
// exit ;
77262: GO 77350
// un := tmp [ rand ( 1 , tmp ) ] ;
77264: LD_ADDR_VAR 0 2
77268: PUSH
77269: LD_VAR 0 3
77273: PUSH
77274: LD_INT 1
77276: PPUSH
77277: LD_VAR 0 3
77281: PPUSH
77282: CALL_OW 12
77286: ARRAY
77287: ST_TO_ADDR
// if Crawls ( un ) then
77288: LD_VAR 0 2
77292: PPUSH
77293: CALL_OW 318
77297: IFFALSE 77308
// ComWalk ( un ) ;
77299: LD_VAR 0 2
77303: PPUSH
77304: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
77308: LD_VAR 0 2
77312: PPUSH
77313: LD_INT 9
77315: PPUSH
77316: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
77320: LD_INT 28
77322: PPUSH
77323: LD_OWVAR 2
77327: PPUSH
77328: LD_INT 2
77330: PPUSH
77331: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
77335: LD_INT 29
77337: PPUSH
77338: LD_OWVAR 2
77342: PPUSH
77343: LD_INT 2
77345: PPUSH
77346: CALL_OW 322
// end ;
77350: PPOPN 3
77352: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
77353: LD_EXP 64
77357: PUSH
77358: LD_EXP 107
77362: AND
77363: IFFALSE 77474
77365: GO 77367
77367: DISABLE
77368: LD_INT 0
77370: PPUSH
77371: PPUSH
77372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77373: LD_ADDR_VAR 0 3
77377: PUSH
77378: LD_INT 22
77380: PUSH
77381: LD_OWVAR 2
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 25
77392: PUSH
77393: LD_INT 1
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: PUSH
77400: EMPTY
77401: LIST
77402: LIST
77403: PPUSH
77404: CALL_OW 69
77408: ST_TO_ADDR
// if not tmp then
77409: LD_VAR 0 3
77413: NOT
77414: IFFALSE 77418
// exit ;
77416: GO 77474
// un := tmp [ rand ( 1 , tmp ) ] ;
77418: LD_ADDR_VAR 0 2
77422: PUSH
77423: LD_VAR 0 3
77427: PUSH
77428: LD_INT 1
77430: PPUSH
77431: LD_VAR 0 3
77435: PPUSH
77436: CALL_OW 12
77440: ARRAY
77441: ST_TO_ADDR
// if Crawls ( un ) then
77442: LD_VAR 0 2
77446: PPUSH
77447: CALL_OW 318
77451: IFFALSE 77462
// ComWalk ( un ) ;
77453: LD_VAR 0 2
77457: PPUSH
77458: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77462: LD_VAR 0 2
77466: PPUSH
77467: LD_INT 8
77469: PPUSH
77470: CALL_OW 336
// end ;
77474: PPOPN 3
77476: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
77477: LD_EXP 64
77481: PUSH
77482: LD_EXP 108
77486: AND
77487: IFFALSE 77631
77489: GO 77491
77491: DISABLE
77492: LD_INT 0
77494: PPUSH
77495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
77496: LD_ADDR_VAR 0 2
77500: PUSH
77501: LD_INT 22
77503: PUSH
77504: LD_OWVAR 2
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: PUSH
77513: LD_INT 21
77515: PUSH
77516: LD_INT 2
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 2
77525: PUSH
77526: LD_INT 34
77528: PUSH
77529: LD_INT 12
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: PUSH
77536: LD_INT 34
77538: PUSH
77539: LD_INT 51
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: PUSH
77546: LD_INT 34
77548: PUSH
77549: LD_INT 32
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: PUSH
77556: EMPTY
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: LIST
77566: PPUSH
77567: CALL_OW 69
77571: ST_TO_ADDR
// if not tmp then
77572: LD_VAR 0 2
77576: NOT
77577: IFFALSE 77581
// exit ;
77579: GO 77631
// for i in tmp do
77581: LD_ADDR_VAR 0 1
77585: PUSH
77586: LD_VAR 0 2
77590: PUSH
77591: FOR_IN
77592: IFFALSE 77629
// if GetCargo ( i , mat_artifact ) = 0 then
77594: LD_VAR 0 1
77598: PPUSH
77599: LD_INT 4
77601: PPUSH
77602: CALL_OW 289
77606: PUSH
77607: LD_INT 0
77609: EQUAL
77610: IFFALSE 77627
// SetCargo ( i , mat_siberit , 100 ) ;
77612: LD_VAR 0 1
77616: PPUSH
77617: LD_INT 3
77619: PPUSH
77620: LD_INT 100
77622: PPUSH
77623: CALL_OW 290
77627: GO 77591
77629: POP
77630: POP
// end ;
77631: PPOPN 2
77633: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77634: LD_EXP 64
77638: PUSH
77639: LD_EXP 109
77643: AND
77644: IFFALSE 77827
77646: GO 77648
77648: DISABLE
77649: LD_INT 0
77651: PPUSH
77652: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77653: LD_ADDR_VAR 0 2
77657: PUSH
77658: LD_INT 22
77660: PUSH
77661: LD_OWVAR 2
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: PPUSH
77670: CALL_OW 69
77674: ST_TO_ADDR
// if not tmp then
77675: LD_VAR 0 2
77679: NOT
77680: IFFALSE 77684
// exit ;
77682: GO 77827
// for i := 1 to 2 do
77684: LD_ADDR_VAR 0 1
77688: PUSH
77689: DOUBLE
77690: LD_INT 1
77692: DEC
77693: ST_TO_ADDR
77694: LD_INT 2
77696: PUSH
77697: FOR_TO
77698: IFFALSE 77825
// begin uc_side := your_side ;
77700: LD_ADDR_OWVAR 20
77704: PUSH
77705: LD_OWVAR 2
77709: ST_TO_ADDR
// uc_nation := nation_american ;
77710: LD_ADDR_OWVAR 21
77714: PUSH
77715: LD_INT 1
77717: ST_TO_ADDR
// vc_chassis := us_morphling ;
77718: LD_ADDR_OWVAR 37
77722: PUSH
77723: LD_INT 5
77725: ST_TO_ADDR
// vc_engine := engine_siberite ;
77726: LD_ADDR_OWVAR 39
77730: PUSH
77731: LD_INT 3
77733: ST_TO_ADDR
// vc_control := control_computer ;
77734: LD_ADDR_OWVAR 38
77738: PUSH
77739: LD_INT 3
77741: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77742: LD_ADDR_OWVAR 40
77746: PUSH
77747: LD_INT 10
77749: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77750: LD_VAR 0 2
77754: PUSH
77755: LD_INT 1
77757: ARRAY
77758: PPUSH
77759: CALL_OW 310
77763: NOT
77764: IFFALSE 77811
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77766: CALL_OW 45
77770: PPUSH
77771: LD_VAR 0 2
77775: PUSH
77776: LD_INT 1
77778: ARRAY
77779: PPUSH
77780: CALL_OW 250
77784: PPUSH
77785: LD_VAR 0 2
77789: PUSH
77790: LD_INT 1
77792: ARRAY
77793: PPUSH
77794: CALL_OW 251
77798: PPUSH
77799: LD_INT 12
77801: PPUSH
77802: LD_INT 1
77804: PPUSH
77805: CALL_OW 50
77809: GO 77823
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77811: CALL_OW 45
77815: PPUSH
77816: LD_INT 1
77818: PPUSH
77819: CALL_OW 51
// end ;
77823: GO 77697
77825: POP
77826: POP
// end ;
77827: PPOPN 2
77829: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77830: LD_EXP 64
77834: PUSH
77835: LD_EXP 110
77839: AND
77840: IFFALSE 78062
77842: GO 77844
77844: DISABLE
77845: LD_INT 0
77847: PPUSH
77848: PPUSH
77849: PPUSH
77850: PPUSH
77851: PPUSH
77852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77853: LD_ADDR_VAR 0 6
77857: PUSH
77858: LD_INT 22
77860: PUSH
77861: LD_OWVAR 2
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PUSH
77870: LD_INT 21
77872: PUSH
77873: LD_INT 1
77875: PUSH
77876: EMPTY
77877: LIST
77878: LIST
77879: PUSH
77880: LD_INT 3
77882: PUSH
77883: LD_INT 23
77885: PUSH
77886: LD_INT 0
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: PUSH
77897: EMPTY
77898: LIST
77899: LIST
77900: LIST
77901: PPUSH
77902: CALL_OW 69
77906: ST_TO_ADDR
// if not tmp then
77907: LD_VAR 0 6
77911: NOT
77912: IFFALSE 77916
// exit ;
77914: GO 78062
// s1 := rand ( 1 , 4 ) ;
77916: LD_ADDR_VAR 0 2
77920: PUSH
77921: LD_INT 1
77923: PPUSH
77924: LD_INT 4
77926: PPUSH
77927: CALL_OW 12
77931: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77932: LD_ADDR_VAR 0 4
77936: PUSH
77937: LD_VAR 0 6
77941: PUSH
77942: LD_INT 1
77944: ARRAY
77945: PPUSH
77946: LD_VAR 0 2
77950: PPUSH
77951: CALL_OW 259
77955: ST_TO_ADDR
// if s1 = 1 then
77956: LD_VAR 0 2
77960: PUSH
77961: LD_INT 1
77963: EQUAL
77964: IFFALSE 77984
// s2 := rand ( 2 , 4 ) else
77966: LD_ADDR_VAR 0 3
77970: PUSH
77971: LD_INT 2
77973: PPUSH
77974: LD_INT 4
77976: PPUSH
77977: CALL_OW 12
77981: ST_TO_ADDR
77982: GO 77992
// s2 := 1 ;
77984: LD_ADDR_VAR 0 3
77988: PUSH
77989: LD_INT 1
77991: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77992: LD_ADDR_VAR 0 5
77996: PUSH
77997: LD_VAR 0 6
78001: PUSH
78002: LD_INT 1
78004: ARRAY
78005: PPUSH
78006: LD_VAR 0 3
78010: PPUSH
78011: CALL_OW 259
78015: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
78016: LD_VAR 0 6
78020: PUSH
78021: LD_INT 1
78023: ARRAY
78024: PPUSH
78025: LD_VAR 0 2
78029: PPUSH
78030: LD_VAR 0 5
78034: PPUSH
78035: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
78039: LD_VAR 0 6
78043: PUSH
78044: LD_INT 1
78046: ARRAY
78047: PPUSH
78048: LD_VAR 0 3
78052: PPUSH
78053: LD_VAR 0 4
78057: PPUSH
78058: CALL_OW 237
// end ;
78062: PPOPN 6
78064: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
78065: LD_EXP 64
78069: PUSH
78070: LD_EXP 111
78074: AND
78075: IFFALSE 78154
78077: GO 78079
78079: DISABLE
78080: LD_INT 0
78082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
78083: LD_ADDR_VAR 0 1
78087: PUSH
78088: LD_INT 22
78090: PUSH
78091: LD_OWVAR 2
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: LD_INT 30
78102: PUSH
78103: LD_INT 3
78105: PUSH
78106: EMPTY
78107: LIST
78108: LIST
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PPUSH
78114: CALL_OW 69
78118: ST_TO_ADDR
// if not tmp then
78119: LD_VAR 0 1
78123: NOT
78124: IFFALSE 78128
// exit ;
78126: GO 78154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
78128: LD_VAR 0 1
78132: PUSH
78133: LD_INT 1
78135: PPUSH
78136: LD_VAR 0 1
78140: PPUSH
78141: CALL_OW 12
78145: ARRAY
78146: PPUSH
78147: LD_INT 1
78149: PPUSH
78150: CALL_OW 234
// end ;
78154: PPOPN 1
78156: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
78157: LD_EXP 64
78161: PUSH
78162: LD_EXP 112
78166: AND
78167: IFFALSE 78279
78169: GO 78171
78171: DISABLE
78172: LD_INT 0
78174: PPUSH
78175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
78176: LD_ADDR_VAR 0 2
78180: PUSH
78181: LD_INT 22
78183: PUSH
78184: LD_OWVAR 2
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PUSH
78193: LD_INT 2
78195: PUSH
78196: LD_INT 30
78198: PUSH
78199: LD_INT 27
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: PUSH
78206: LD_INT 30
78208: PUSH
78209: LD_INT 26
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: PUSH
78216: LD_INT 30
78218: PUSH
78219: LD_INT 28
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: LIST
78230: LIST
78231: PUSH
78232: EMPTY
78233: LIST
78234: LIST
78235: PPUSH
78236: CALL_OW 69
78240: ST_TO_ADDR
// if not tmp then
78241: LD_VAR 0 2
78245: NOT
78246: IFFALSE 78250
// exit ;
78248: GO 78279
// for i in tmp do
78250: LD_ADDR_VAR 0 1
78254: PUSH
78255: LD_VAR 0 2
78259: PUSH
78260: FOR_IN
78261: IFFALSE 78277
// SetLives ( i , 1 ) ;
78263: LD_VAR 0 1
78267: PPUSH
78268: LD_INT 1
78270: PPUSH
78271: CALL_OW 234
78275: GO 78260
78277: POP
78278: POP
// end ;
78279: PPOPN 2
78281: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
78282: LD_EXP 64
78286: PUSH
78287: LD_EXP 113
78291: AND
78292: IFFALSE 78579
78294: GO 78296
78296: DISABLE
78297: LD_INT 0
78299: PPUSH
78300: PPUSH
78301: PPUSH
// begin i := rand ( 1 , 7 ) ;
78302: LD_ADDR_VAR 0 1
78306: PUSH
78307: LD_INT 1
78309: PPUSH
78310: LD_INT 7
78312: PPUSH
78313: CALL_OW 12
78317: ST_TO_ADDR
// case i of 1 :
78318: LD_VAR 0 1
78322: PUSH
78323: LD_INT 1
78325: DOUBLE
78326: EQUAL
78327: IFTRUE 78331
78329: GO 78341
78331: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
78332: LD_STRING earthquake(getX(game), 0, 32)
78334: PPUSH
78335: CALL_OW 559
78339: GO 78579
78341: LD_INT 2
78343: DOUBLE
78344: EQUAL
78345: IFTRUE 78349
78347: GO 78363
78349: POP
// begin ToLua ( displayStucuk(); ) ;
78350: LD_STRING displayStucuk();
78352: PPUSH
78353: CALL_OW 559
// ResetFog ;
78357: CALL_OW 335
// end ; 3 :
78361: GO 78579
78363: LD_INT 3
78365: DOUBLE
78366: EQUAL
78367: IFTRUE 78371
78369: GO 78475
78371: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
78372: LD_ADDR_VAR 0 2
78376: PUSH
78377: LD_INT 22
78379: PUSH
78380: LD_OWVAR 2
78384: PUSH
78385: EMPTY
78386: LIST
78387: LIST
78388: PUSH
78389: LD_INT 25
78391: PUSH
78392: LD_INT 1
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: EMPTY
78400: LIST
78401: LIST
78402: PPUSH
78403: CALL_OW 69
78407: ST_TO_ADDR
// if not tmp then
78408: LD_VAR 0 2
78412: NOT
78413: IFFALSE 78417
// exit ;
78415: GO 78579
// un := tmp [ rand ( 1 , tmp ) ] ;
78417: LD_ADDR_VAR 0 3
78421: PUSH
78422: LD_VAR 0 2
78426: PUSH
78427: LD_INT 1
78429: PPUSH
78430: LD_VAR 0 2
78434: PPUSH
78435: CALL_OW 12
78439: ARRAY
78440: ST_TO_ADDR
// if Crawls ( un ) then
78441: LD_VAR 0 3
78445: PPUSH
78446: CALL_OW 318
78450: IFFALSE 78461
// ComWalk ( un ) ;
78452: LD_VAR 0 3
78456: PPUSH
78457: CALL_OW 138
// SetClass ( un , class_mortar ) ;
78461: LD_VAR 0 3
78465: PPUSH
78466: LD_INT 8
78468: PPUSH
78469: CALL_OW 336
// end ; 4 :
78473: GO 78579
78475: LD_INT 4
78477: DOUBLE
78478: EQUAL
78479: IFTRUE 78483
78481: GO 78557
78483: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
78484: LD_ADDR_VAR 0 2
78488: PUSH
78489: LD_INT 22
78491: PUSH
78492: LD_OWVAR 2
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PUSH
78501: LD_INT 30
78503: PUSH
78504: LD_INT 29
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: PPUSH
78515: CALL_OW 69
78519: ST_TO_ADDR
// if not tmp then
78520: LD_VAR 0 2
78524: NOT
78525: IFFALSE 78529
// exit ;
78527: GO 78579
// CenterNowOnUnits ( tmp [ 1 ] ) ;
78529: LD_VAR 0 2
78533: PUSH
78534: LD_INT 1
78536: ARRAY
78537: PPUSH
78538: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
78542: LD_VAR 0 2
78546: PUSH
78547: LD_INT 1
78549: ARRAY
78550: PPUSH
78551: CALL_OW 65
// end ; 5 .. 7 :
78555: GO 78579
78557: LD_INT 5
78559: DOUBLE
78560: GREATEREQUAL
78561: IFFALSE 78569
78563: LD_INT 7
78565: DOUBLE
78566: LESSEQUAL
78567: IFTRUE 78571
78569: GO 78578
78571: POP
// StreamSibBomb ; end ;
78572: CALL 74816 0 0
78576: GO 78579
78578: POP
// end ;
78579: PPOPN 3
78581: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78582: LD_EXP 64
78586: PUSH
78587: LD_EXP 114
78591: AND
78592: IFFALSE 78748
78594: GO 78596
78596: DISABLE
78597: LD_INT 0
78599: PPUSH
78600: PPUSH
78601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78602: LD_ADDR_VAR 0 2
78606: PUSH
78607: LD_INT 81
78609: PUSH
78610: LD_OWVAR 2
78614: PUSH
78615: EMPTY
78616: LIST
78617: LIST
78618: PUSH
78619: LD_INT 2
78621: PUSH
78622: LD_INT 21
78624: PUSH
78625: LD_INT 1
78627: PUSH
78628: EMPTY
78629: LIST
78630: LIST
78631: PUSH
78632: LD_INT 21
78634: PUSH
78635: LD_INT 2
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: LIST
78646: PUSH
78647: EMPTY
78648: LIST
78649: LIST
78650: PPUSH
78651: CALL_OW 69
78655: ST_TO_ADDR
// if not tmp then
78656: LD_VAR 0 2
78660: NOT
78661: IFFALSE 78665
// exit ;
78663: GO 78748
// p := 0 ;
78665: LD_ADDR_VAR 0 3
78669: PUSH
78670: LD_INT 0
78672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78673: LD_INT 35
78675: PPUSH
78676: CALL_OW 67
// p := p + 1 ;
78680: LD_ADDR_VAR 0 3
78684: PUSH
78685: LD_VAR 0 3
78689: PUSH
78690: LD_INT 1
78692: PLUS
78693: ST_TO_ADDR
// for i in tmp do
78694: LD_ADDR_VAR 0 1
78698: PUSH
78699: LD_VAR 0 2
78703: PUSH
78704: FOR_IN
78705: IFFALSE 78736
// if GetLives ( i ) < 1000 then
78707: LD_VAR 0 1
78711: PPUSH
78712: CALL_OW 256
78716: PUSH
78717: LD_INT 1000
78719: LESS
78720: IFFALSE 78734
// SetLives ( i , 1000 ) ;
78722: LD_VAR 0 1
78726: PPUSH
78727: LD_INT 1000
78729: PPUSH
78730: CALL_OW 234
78734: GO 78704
78736: POP
78737: POP
// until p > 20 ;
78738: LD_VAR 0 3
78742: PUSH
78743: LD_INT 20
78745: GREATER
78746: IFFALSE 78673
// end ;
78748: PPOPN 3
78750: END
// every 0 0$1 trigger StreamModeActive and sTime do
78751: LD_EXP 64
78755: PUSH
78756: LD_EXP 115
78760: AND
78761: IFFALSE 78796
78763: GO 78765
78765: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78766: LD_INT 28
78768: PPUSH
78769: LD_OWVAR 2
78773: PPUSH
78774: LD_INT 2
78776: PPUSH
78777: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78781: LD_INT 30
78783: PPUSH
78784: LD_OWVAR 2
78788: PPUSH
78789: LD_INT 2
78791: PPUSH
78792: CALL_OW 322
// end ;
78796: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78797: LD_EXP 64
78801: PUSH
78802: LD_EXP 116
78806: AND
78807: IFFALSE 78928
78809: GO 78811
78811: DISABLE
78812: LD_INT 0
78814: PPUSH
78815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78816: LD_ADDR_VAR 0 2
78820: PUSH
78821: LD_INT 22
78823: PUSH
78824: LD_OWVAR 2
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: PUSH
78833: LD_INT 21
78835: PUSH
78836: LD_INT 1
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PUSH
78843: LD_INT 3
78845: PUSH
78846: LD_INT 23
78848: PUSH
78849: LD_INT 0
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PUSH
78860: EMPTY
78861: LIST
78862: LIST
78863: LIST
78864: PPUSH
78865: CALL_OW 69
78869: ST_TO_ADDR
// if not tmp then
78870: LD_VAR 0 2
78874: NOT
78875: IFFALSE 78879
// exit ;
78877: GO 78928
// for i in tmp do
78879: LD_ADDR_VAR 0 1
78883: PUSH
78884: LD_VAR 0 2
78888: PUSH
78889: FOR_IN
78890: IFFALSE 78926
// begin if Crawls ( i ) then
78892: LD_VAR 0 1
78896: PPUSH
78897: CALL_OW 318
78901: IFFALSE 78912
// ComWalk ( i ) ;
78903: LD_VAR 0 1
78907: PPUSH
78908: CALL_OW 138
// SetClass ( i , 2 ) ;
78912: LD_VAR 0 1
78916: PPUSH
78917: LD_INT 2
78919: PPUSH
78920: CALL_OW 336
// end ;
78924: GO 78889
78926: POP
78927: POP
// end ;
78928: PPOPN 2
78930: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78931: LD_EXP 64
78935: PUSH
78936: LD_EXP 117
78940: AND
78941: IFFALSE 79229
78943: GO 78945
78945: DISABLE
78946: LD_INT 0
78948: PPUSH
78949: PPUSH
78950: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78951: LD_OWVAR 2
78955: PPUSH
78956: LD_INT 9
78958: PPUSH
78959: LD_INT 1
78961: PPUSH
78962: LD_INT 1
78964: PPUSH
78965: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78969: LD_INT 9
78971: PPUSH
78972: LD_OWVAR 2
78976: PPUSH
78977: CALL_OW 343
// uc_side := 9 ;
78981: LD_ADDR_OWVAR 20
78985: PUSH
78986: LD_INT 9
78988: ST_TO_ADDR
// uc_nation := 2 ;
78989: LD_ADDR_OWVAR 21
78993: PUSH
78994: LD_INT 2
78996: ST_TO_ADDR
// hc_name := Dark Warrior ;
78997: LD_ADDR_OWVAR 26
79001: PUSH
79002: LD_STRING Dark Warrior
79004: ST_TO_ADDR
// hc_gallery :=  ;
79005: LD_ADDR_OWVAR 33
79009: PUSH
79010: LD_STRING 
79012: ST_TO_ADDR
// hc_noskilllimit := true ;
79013: LD_ADDR_OWVAR 76
79017: PUSH
79018: LD_INT 1
79020: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
79021: LD_ADDR_OWVAR 31
79025: PUSH
79026: LD_INT 30
79028: PUSH
79029: LD_INT 30
79031: PUSH
79032: LD_INT 30
79034: PUSH
79035: LD_INT 30
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: ST_TO_ADDR
// un := CreateHuman ;
79044: LD_ADDR_VAR 0 3
79048: PUSH
79049: CALL_OW 44
79053: ST_TO_ADDR
// hc_noskilllimit := false ;
79054: LD_ADDR_OWVAR 76
79058: PUSH
79059: LD_INT 0
79061: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
79062: LD_VAR 0 3
79066: PPUSH
79067: LD_INT 1
79069: PPUSH
79070: CALL_OW 51
// ToLua ( playRanger() ) ;
79074: LD_STRING playRanger()
79076: PPUSH
79077: CALL_OW 559
// p := 0 ;
79081: LD_ADDR_VAR 0 2
79085: PUSH
79086: LD_INT 0
79088: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
79089: LD_INT 35
79091: PPUSH
79092: CALL_OW 67
// p := p + 1 ;
79096: LD_ADDR_VAR 0 2
79100: PUSH
79101: LD_VAR 0 2
79105: PUSH
79106: LD_INT 1
79108: PLUS
79109: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
79110: LD_VAR 0 3
79114: PPUSH
79115: CALL_OW 256
79119: PUSH
79120: LD_INT 1000
79122: LESS
79123: IFFALSE 79137
// SetLives ( un , 1000 ) ;
79125: LD_VAR 0 3
79129: PPUSH
79130: LD_INT 1000
79132: PPUSH
79133: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
79137: LD_VAR 0 3
79141: PPUSH
79142: LD_INT 81
79144: PUSH
79145: LD_OWVAR 2
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 91
79156: PUSH
79157: LD_VAR 0 3
79161: PUSH
79162: LD_INT 30
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: LIST
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PPUSH
79174: CALL_OW 69
79178: PPUSH
79179: LD_VAR 0 3
79183: PPUSH
79184: CALL_OW 74
79188: PPUSH
79189: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
79193: LD_VAR 0 2
79197: PUSH
79198: LD_INT 80
79200: GREATER
79201: PUSH
79202: LD_VAR 0 3
79206: PPUSH
79207: CALL_OW 301
79211: OR
79212: IFFALSE 79089
// if un then
79214: LD_VAR 0 3
79218: IFFALSE 79229
// RemoveUnit ( un ) ;
79220: LD_VAR 0 3
79224: PPUSH
79225: CALL_OW 64
// end ;
79229: PPOPN 3
79231: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
79232: LD_EXP 118
79236: IFFALSE 79352
79238: GO 79240
79240: DISABLE
79241: LD_INT 0
79243: PPUSH
79244: PPUSH
79245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
79246: LD_ADDR_VAR 0 2
79250: PUSH
79251: LD_INT 81
79253: PUSH
79254: LD_OWVAR 2
79258: PUSH
79259: EMPTY
79260: LIST
79261: LIST
79262: PUSH
79263: LD_INT 21
79265: PUSH
79266: LD_INT 1
79268: PUSH
79269: EMPTY
79270: LIST
79271: LIST
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: PPUSH
79277: CALL_OW 69
79281: ST_TO_ADDR
// ToLua ( playComputer() ) ;
79282: LD_STRING playComputer()
79284: PPUSH
79285: CALL_OW 559
// if not tmp then
79289: LD_VAR 0 2
79293: NOT
79294: IFFALSE 79298
// exit ;
79296: GO 79352
// for i in tmp do
79298: LD_ADDR_VAR 0 1
79302: PUSH
79303: LD_VAR 0 2
79307: PUSH
79308: FOR_IN
79309: IFFALSE 79350
// for j := 1 to 4 do
79311: LD_ADDR_VAR 0 3
79315: PUSH
79316: DOUBLE
79317: LD_INT 1
79319: DEC
79320: ST_TO_ADDR
79321: LD_INT 4
79323: PUSH
79324: FOR_TO
79325: IFFALSE 79346
// SetSkill ( i , j , 10 ) ;
79327: LD_VAR 0 1
79331: PPUSH
79332: LD_VAR 0 3
79336: PPUSH
79337: LD_INT 10
79339: PPUSH
79340: CALL_OW 237
79344: GO 79324
79346: POP
79347: POP
79348: GO 79308
79350: POP
79351: POP
// end ;
79352: PPOPN 3
79354: END
// every 0 0$1 trigger s30 do var i , tmp ;
79355: LD_EXP 119
79359: IFFALSE 79428
79361: GO 79363
79363: DISABLE
79364: LD_INT 0
79366: PPUSH
79367: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79368: LD_ADDR_VAR 0 2
79372: PUSH
79373: LD_INT 22
79375: PUSH
79376: LD_OWVAR 2
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: PPUSH
79385: CALL_OW 69
79389: ST_TO_ADDR
// if not tmp then
79390: LD_VAR 0 2
79394: NOT
79395: IFFALSE 79399
// exit ;
79397: GO 79428
// for i in tmp do
79399: LD_ADDR_VAR 0 1
79403: PUSH
79404: LD_VAR 0 2
79408: PUSH
79409: FOR_IN
79410: IFFALSE 79426
// SetLives ( i , 300 ) ;
79412: LD_VAR 0 1
79416: PPUSH
79417: LD_INT 300
79419: PPUSH
79420: CALL_OW 234
79424: GO 79409
79426: POP
79427: POP
// end ;
79428: PPOPN 2
79430: END
// every 0 0$1 trigger s60 do var i , tmp ;
79431: LD_EXP 120
79435: IFFALSE 79504
79437: GO 79439
79439: DISABLE
79440: LD_INT 0
79442: PPUSH
79443: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
79444: LD_ADDR_VAR 0 2
79448: PUSH
79449: LD_INT 22
79451: PUSH
79452: LD_OWVAR 2
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: PPUSH
79461: CALL_OW 69
79465: ST_TO_ADDR
// if not tmp then
79466: LD_VAR 0 2
79470: NOT
79471: IFFALSE 79475
// exit ;
79473: GO 79504
// for i in tmp do
79475: LD_ADDR_VAR 0 1
79479: PUSH
79480: LD_VAR 0 2
79484: PUSH
79485: FOR_IN
79486: IFFALSE 79502
// SetLives ( i , 600 ) ;
79488: LD_VAR 0 1
79492: PPUSH
79493: LD_INT 600
79495: PPUSH
79496: CALL_OW 234
79500: GO 79485
79502: POP
79503: POP
// end ;
79504: PPOPN 2
79506: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
79507: LD_INT 0
79509: PPUSH
// case cmd of 301 :
79510: LD_VAR 0 1
79514: PUSH
79515: LD_INT 301
79517: DOUBLE
79518: EQUAL
79519: IFTRUE 79523
79521: GO 79555
79523: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
79524: LD_VAR 0 6
79528: PPUSH
79529: LD_VAR 0 7
79533: PPUSH
79534: LD_VAR 0 8
79538: PPUSH
79539: LD_VAR 0 4
79543: PPUSH
79544: LD_VAR 0 5
79548: PPUSH
79549: CALL 80756 0 5
79553: GO 79676
79555: LD_INT 302
79557: DOUBLE
79558: EQUAL
79559: IFTRUE 79563
79561: GO 79600
79563: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
79564: LD_VAR 0 6
79568: PPUSH
79569: LD_VAR 0 7
79573: PPUSH
79574: LD_VAR 0 8
79578: PPUSH
79579: LD_VAR 0 9
79583: PPUSH
79584: LD_VAR 0 4
79588: PPUSH
79589: LD_VAR 0 5
79593: PPUSH
79594: CALL 80847 0 6
79598: GO 79676
79600: LD_INT 303
79602: DOUBLE
79603: EQUAL
79604: IFTRUE 79608
79606: GO 79645
79608: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79609: LD_VAR 0 6
79613: PPUSH
79614: LD_VAR 0 7
79618: PPUSH
79619: LD_VAR 0 8
79623: PPUSH
79624: LD_VAR 0 9
79628: PPUSH
79629: LD_VAR 0 4
79633: PPUSH
79634: LD_VAR 0 5
79638: PPUSH
79639: CALL 79681 0 6
79643: GO 79676
79645: LD_INT 304
79647: DOUBLE
79648: EQUAL
79649: IFTRUE 79653
79651: GO 79675
79653: POP
// hHackTeleport ( unit , x , y ) ; end ;
79654: LD_VAR 0 2
79658: PPUSH
79659: LD_VAR 0 4
79663: PPUSH
79664: LD_VAR 0 5
79668: PPUSH
79669: CALL 81440 0 3
79673: GO 79676
79675: POP
// end ;
79676: LD_VAR 0 12
79680: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79681: LD_INT 0
79683: PPUSH
79684: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79685: LD_VAR 0 1
79689: PUSH
79690: LD_INT 1
79692: LESS
79693: PUSH
79694: LD_VAR 0 1
79698: PUSH
79699: LD_INT 3
79701: GREATER
79702: OR
79703: PUSH
79704: LD_VAR 0 5
79708: PPUSH
79709: LD_VAR 0 6
79713: PPUSH
79714: CALL_OW 428
79718: OR
79719: IFFALSE 79723
// exit ;
79721: GO 80443
// uc_side := your_side ;
79723: LD_ADDR_OWVAR 20
79727: PUSH
79728: LD_OWVAR 2
79732: ST_TO_ADDR
// uc_nation := nation ;
79733: LD_ADDR_OWVAR 21
79737: PUSH
79738: LD_VAR 0 1
79742: ST_TO_ADDR
// bc_level = 1 ;
79743: LD_ADDR_OWVAR 43
79747: PUSH
79748: LD_INT 1
79750: ST_TO_ADDR
// case btype of 1 :
79751: LD_VAR 0 2
79755: PUSH
79756: LD_INT 1
79758: DOUBLE
79759: EQUAL
79760: IFTRUE 79764
79762: GO 79775
79764: POP
// bc_type := b_depot ; 2 :
79765: LD_ADDR_OWVAR 42
79769: PUSH
79770: LD_INT 0
79772: ST_TO_ADDR
79773: GO 80387
79775: LD_INT 2
79777: DOUBLE
79778: EQUAL
79779: IFTRUE 79783
79781: GO 79794
79783: POP
// bc_type := b_warehouse ; 3 :
79784: LD_ADDR_OWVAR 42
79788: PUSH
79789: LD_INT 1
79791: ST_TO_ADDR
79792: GO 80387
79794: LD_INT 3
79796: DOUBLE
79797: EQUAL
79798: IFTRUE 79802
79800: GO 79813
79802: POP
// bc_type := b_lab ; 4 .. 9 :
79803: LD_ADDR_OWVAR 42
79807: PUSH
79808: LD_INT 6
79810: ST_TO_ADDR
79811: GO 80387
79813: LD_INT 4
79815: DOUBLE
79816: GREATEREQUAL
79817: IFFALSE 79825
79819: LD_INT 9
79821: DOUBLE
79822: LESSEQUAL
79823: IFTRUE 79827
79825: GO 79879
79827: POP
// begin bc_type := b_lab_half ;
79828: LD_ADDR_OWVAR 42
79832: PUSH
79833: LD_INT 7
79835: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79836: LD_ADDR_OWVAR 44
79840: PUSH
79841: LD_INT 10
79843: PUSH
79844: LD_INT 11
79846: PUSH
79847: LD_INT 12
79849: PUSH
79850: LD_INT 15
79852: PUSH
79853: LD_INT 14
79855: PUSH
79856: LD_INT 13
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: PUSH
79867: LD_VAR 0 2
79871: PUSH
79872: LD_INT 3
79874: MINUS
79875: ARRAY
79876: ST_TO_ADDR
// end ; 10 .. 13 :
79877: GO 80387
79879: LD_INT 10
79881: DOUBLE
79882: GREATEREQUAL
79883: IFFALSE 79891
79885: LD_INT 13
79887: DOUBLE
79888: LESSEQUAL
79889: IFTRUE 79893
79891: GO 79970
79893: POP
// begin bc_type := b_lab_full ;
79894: LD_ADDR_OWVAR 42
79898: PUSH
79899: LD_INT 8
79901: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79902: LD_ADDR_OWVAR 44
79906: PUSH
79907: LD_INT 10
79909: PUSH
79910: LD_INT 12
79912: PUSH
79913: LD_INT 14
79915: PUSH
79916: LD_INT 13
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: LIST
79923: LIST
79924: PUSH
79925: LD_VAR 0 2
79929: PUSH
79930: LD_INT 9
79932: MINUS
79933: ARRAY
79934: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79935: LD_ADDR_OWVAR 45
79939: PUSH
79940: LD_INT 11
79942: PUSH
79943: LD_INT 15
79945: PUSH
79946: LD_INT 12
79948: PUSH
79949: LD_INT 15
79951: PUSH
79952: EMPTY
79953: LIST
79954: LIST
79955: LIST
79956: LIST
79957: PUSH
79958: LD_VAR 0 2
79962: PUSH
79963: LD_INT 9
79965: MINUS
79966: ARRAY
79967: ST_TO_ADDR
// end ; 14 :
79968: GO 80387
79970: LD_INT 14
79972: DOUBLE
79973: EQUAL
79974: IFTRUE 79978
79976: GO 79989
79978: POP
// bc_type := b_workshop ; 15 :
79979: LD_ADDR_OWVAR 42
79983: PUSH
79984: LD_INT 2
79986: ST_TO_ADDR
79987: GO 80387
79989: LD_INT 15
79991: DOUBLE
79992: EQUAL
79993: IFTRUE 79997
79995: GO 80008
79997: POP
// bc_type := b_factory ; 16 :
79998: LD_ADDR_OWVAR 42
80002: PUSH
80003: LD_INT 3
80005: ST_TO_ADDR
80006: GO 80387
80008: LD_INT 16
80010: DOUBLE
80011: EQUAL
80012: IFTRUE 80016
80014: GO 80027
80016: POP
// bc_type := b_ext_gun ; 17 :
80017: LD_ADDR_OWVAR 42
80021: PUSH
80022: LD_INT 17
80024: ST_TO_ADDR
80025: GO 80387
80027: LD_INT 17
80029: DOUBLE
80030: EQUAL
80031: IFTRUE 80035
80033: GO 80063
80035: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
80036: LD_ADDR_OWVAR 42
80040: PUSH
80041: LD_INT 19
80043: PUSH
80044: LD_INT 23
80046: PUSH
80047: LD_INT 19
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: LIST
80054: PUSH
80055: LD_VAR 0 1
80059: ARRAY
80060: ST_TO_ADDR
80061: GO 80387
80063: LD_INT 18
80065: DOUBLE
80066: EQUAL
80067: IFTRUE 80071
80069: GO 80082
80071: POP
// bc_type := b_ext_radar ; 19 :
80072: LD_ADDR_OWVAR 42
80076: PUSH
80077: LD_INT 20
80079: ST_TO_ADDR
80080: GO 80387
80082: LD_INT 19
80084: DOUBLE
80085: EQUAL
80086: IFTRUE 80090
80088: GO 80101
80090: POP
// bc_type := b_ext_radio ; 20 :
80091: LD_ADDR_OWVAR 42
80095: PUSH
80096: LD_INT 22
80098: ST_TO_ADDR
80099: GO 80387
80101: LD_INT 20
80103: DOUBLE
80104: EQUAL
80105: IFTRUE 80109
80107: GO 80120
80109: POP
// bc_type := b_ext_siberium ; 21 :
80110: LD_ADDR_OWVAR 42
80114: PUSH
80115: LD_INT 21
80117: ST_TO_ADDR
80118: GO 80387
80120: LD_INT 21
80122: DOUBLE
80123: EQUAL
80124: IFTRUE 80128
80126: GO 80139
80128: POP
// bc_type := b_ext_computer ; 22 :
80129: LD_ADDR_OWVAR 42
80133: PUSH
80134: LD_INT 24
80136: ST_TO_ADDR
80137: GO 80387
80139: LD_INT 22
80141: DOUBLE
80142: EQUAL
80143: IFTRUE 80147
80145: GO 80158
80147: POP
// bc_type := b_ext_track ; 23 :
80148: LD_ADDR_OWVAR 42
80152: PUSH
80153: LD_INT 16
80155: ST_TO_ADDR
80156: GO 80387
80158: LD_INT 23
80160: DOUBLE
80161: EQUAL
80162: IFTRUE 80166
80164: GO 80177
80166: POP
// bc_type := b_ext_laser ; 24 :
80167: LD_ADDR_OWVAR 42
80171: PUSH
80172: LD_INT 25
80174: ST_TO_ADDR
80175: GO 80387
80177: LD_INT 24
80179: DOUBLE
80180: EQUAL
80181: IFTRUE 80185
80183: GO 80196
80185: POP
// bc_type := b_control_tower ; 25 :
80186: LD_ADDR_OWVAR 42
80190: PUSH
80191: LD_INT 36
80193: ST_TO_ADDR
80194: GO 80387
80196: LD_INT 25
80198: DOUBLE
80199: EQUAL
80200: IFTRUE 80204
80202: GO 80215
80204: POP
// bc_type := b_breastwork ; 26 :
80205: LD_ADDR_OWVAR 42
80209: PUSH
80210: LD_INT 31
80212: ST_TO_ADDR
80213: GO 80387
80215: LD_INT 26
80217: DOUBLE
80218: EQUAL
80219: IFTRUE 80223
80221: GO 80234
80223: POP
// bc_type := b_bunker ; 27 :
80224: LD_ADDR_OWVAR 42
80228: PUSH
80229: LD_INT 32
80231: ST_TO_ADDR
80232: GO 80387
80234: LD_INT 27
80236: DOUBLE
80237: EQUAL
80238: IFTRUE 80242
80240: GO 80253
80242: POP
// bc_type := b_turret ; 28 :
80243: LD_ADDR_OWVAR 42
80247: PUSH
80248: LD_INT 33
80250: ST_TO_ADDR
80251: GO 80387
80253: LD_INT 28
80255: DOUBLE
80256: EQUAL
80257: IFTRUE 80261
80259: GO 80272
80261: POP
// bc_type := b_armoury ; 29 :
80262: LD_ADDR_OWVAR 42
80266: PUSH
80267: LD_INT 4
80269: ST_TO_ADDR
80270: GO 80387
80272: LD_INT 29
80274: DOUBLE
80275: EQUAL
80276: IFTRUE 80280
80278: GO 80291
80280: POP
// bc_type := b_barracks ; 30 :
80281: LD_ADDR_OWVAR 42
80285: PUSH
80286: LD_INT 5
80288: ST_TO_ADDR
80289: GO 80387
80291: LD_INT 30
80293: DOUBLE
80294: EQUAL
80295: IFTRUE 80299
80297: GO 80310
80299: POP
// bc_type := b_solar_power ; 31 :
80300: LD_ADDR_OWVAR 42
80304: PUSH
80305: LD_INT 27
80307: ST_TO_ADDR
80308: GO 80387
80310: LD_INT 31
80312: DOUBLE
80313: EQUAL
80314: IFTRUE 80318
80316: GO 80329
80318: POP
// bc_type := b_oil_power ; 32 :
80319: LD_ADDR_OWVAR 42
80323: PUSH
80324: LD_INT 26
80326: ST_TO_ADDR
80327: GO 80387
80329: LD_INT 32
80331: DOUBLE
80332: EQUAL
80333: IFTRUE 80337
80335: GO 80348
80337: POP
// bc_type := b_siberite_power ; 33 :
80338: LD_ADDR_OWVAR 42
80342: PUSH
80343: LD_INT 28
80345: ST_TO_ADDR
80346: GO 80387
80348: LD_INT 33
80350: DOUBLE
80351: EQUAL
80352: IFTRUE 80356
80354: GO 80367
80356: POP
// bc_type := b_oil_mine ; 34 :
80357: LD_ADDR_OWVAR 42
80361: PUSH
80362: LD_INT 29
80364: ST_TO_ADDR
80365: GO 80387
80367: LD_INT 34
80369: DOUBLE
80370: EQUAL
80371: IFTRUE 80375
80373: GO 80386
80375: POP
// bc_type := b_siberite_mine ; end ;
80376: LD_ADDR_OWVAR 42
80380: PUSH
80381: LD_INT 30
80383: ST_TO_ADDR
80384: GO 80387
80386: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
80387: LD_ADDR_VAR 0 8
80391: PUSH
80392: LD_VAR 0 5
80396: PPUSH
80397: LD_VAR 0 6
80401: PPUSH
80402: LD_VAR 0 3
80406: PPUSH
80407: CALL_OW 47
80411: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
80412: LD_OWVAR 42
80416: PUSH
80417: LD_INT 32
80419: PUSH
80420: LD_INT 33
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: IN
80427: IFFALSE 80443
// PlaceWeaponTurret ( b , weapon ) ;
80429: LD_VAR 0 8
80433: PPUSH
80434: LD_VAR 0 4
80438: PPUSH
80439: CALL_OW 431
// end ;
80443: LD_VAR 0 7
80447: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
80448: LD_INT 0
80450: PPUSH
80451: PPUSH
80452: PPUSH
80453: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80454: LD_ADDR_VAR 0 4
80458: PUSH
80459: LD_INT 22
80461: PUSH
80462: LD_OWVAR 2
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: LD_INT 2
80473: PUSH
80474: LD_INT 30
80476: PUSH
80477: LD_INT 0
80479: PUSH
80480: EMPTY
80481: LIST
80482: LIST
80483: PUSH
80484: LD_INT 30
80486: PUSH
80487: LD_INT 1
80489: PUSH
80490: EMPTY
80491: LIST
80492: LIST
80493: PUSH
80494: EMPTY
80495: LIST
80496: LIST
80497: LIST
80498: PUSH
80499: EMPTY
80500: LIST
80501: LIST
80502: PPUSH
80503: CALL_OW 69
80507: ST_TO_ADDR
// if not tmp then
80508: LD_VAR 0 4
80512: NOT
80513: IFFALSE 80517
// exit ;
80515: GO 80576
// for i in tmp do
80517: LD_ADDR_VAR 0 2
80521: PUSH
80522: LD_VAR 0 4
80526: PUSH
80527: FOR_IN
80528: IFFALSE 80574
// for j = 1 to 3 do
80530: LD_ADDR_VAR 0 3
80534: PUSH
80535: DOUBLE
80536: LD_INT 1
80538: DEC
80539: ST_TO_ADDR
80540: LD_INT 3
80542: PUSH
80543: FOR_TO
80544: IFFALSE 80570
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
80546: LD_VAR 0 2
80550: PPUSH
80551: CALL_OW 274
80555: PPUSH
80556: LD_VAR 0 3
80560: PPUSH
80561: LD_INT 99999
80563: PPUSH
80564: CALL_OW 277
80568: GO 80543
80570: POP
80571: POP
80572: GO 80527
80574: POP
80575: POP
// end ;
80576: LD_VAR 0 1
80580: RET
// export function hHackSetLevel10 ; var i , j ; begin
80581: LD_INT 0
80583: PPUSH
80584: PPUSH
80585: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80586: LD_ADDR_VAR 0 2
80590: PUSH
80591: LD_INT 21
80593: PUSH
80594: LD_INT 1
80596: PUSH
80597: EMPTY
80598: LIST
80599: LIST
80600: PPUSH
80601: CALL_OW 69
80605: PUSH
80606: FOR_IN
80607: IFFALSE 80659
// if IsSelected ( i ) then
80609: LD_VAR 0 2
80613: PPUSH
80614: CALL_OW 306
80618: IFFALSE 80657
// begin for j := 1 to 4 do
80620: LD_ADDR_VAR 0 3
80624: PUSH
80625: DOUBLE
80626: LD_INT 1
80628: DEC
80629: ST_TO_ADDR
80630: LD_INT 4
80632: PUSH
80633: FOR_TO
80634: IFFALSE 80655
// SetSkill ( i , j , 10 ) ;
80636: LD_VAR 0 2
80640: PPUSH
80641: LD_VAR 0 3
80645: PPUSH
80646: LD_INT 10
80648: PPUSH
80649: CALL_OW 237
80653: GO 80633
80655: POP
80656: POP
// end ;
80657: GO 80606
80659: POP
80660: POP
// end ;
80661: LD_VAR 0 1
80665: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80666: LD_INT 0
80668: PPUSH
80669: PPUSH
80670: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80671: LD_ADDR_VAR 0 2
80675: PUSH
80676: LD_INT 22
80678: PUSH
80679: LD_OWVAR 2
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 21
80690: PUSH
80691: LD_INT 1
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PPUSH
80702: CALL_OW 69
80706: PUSH
80707: FOR_IN
80708: IFFALSE 80749
// begin for j := 1 to 4 do
80710: LD_ADDR_VAR 0 3
80714: PUSH
80715: DOUBLE
80716: LD_INT 1
80718: DEC
80719: ST_TO_ADDR
80720: LD_INT 4
80722: PUSH
80723: FOR_TO
80724: IFFALSE 80745
// SetSkill ( i , j , 10 ) ;
80726: LD_VAR 0 2
80730: PPUSH
80731: LD_VAR 0 3
80735: PPUSH
80736: LD_INT 10
80738: PPUSH
80739: CALL_OW 237
80743: GO 80723
80745: POP
80746: POP
// end ;
80747: GO 80707
80749: POP
80750: POP
// end ;
80751: LD_VAR 0 1
80755: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80756: LD_INT 0
80758: PPUSH
// uc_side := your_side ;
80759: LD_ADDR_OWVAR 20
80763: PUSH
80764: LD_OWVAR 2
80768: ST_TO_ADDR
// uc_nation := nation ;
80769: LD_ADDR_OWVAR 21
80773: PUSH
80774: LD_VAR 0 1
80778: ST_TO_ADDR
// InitHc ;
80779: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80783: LD_INT 0
80785: PPUSH
80786: LD_VAR 0 2
80790: PPUSH
80791: LD_VAR 0 3
80795: PPUSH
80796: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80800: LD_VAR 0 4
80804: PPUSH
80805: LD_VAR 0 5
80809: PPUSH
80810: CALL_OW 428
80814: PUSH
80815: LD_INT 0
80817: EQUAL
80818: IFFALSE 80842
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80820: CALL_OW 44
80824: PPUSH
80825: LD_VAR 0 4
80829: PPUSH
80830: LD_VAR 0 5
80834: PPUSH
80835: LD_INT 1
80837: PPUSH
80838: CALL_OW 48
// end ;
80842: LD_VAR 0 6
80846: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80847: LD_INT 0
80849: PPUSH
80850: PPUSH
// uc_side := your_side ;
80851: LD_ADDR_OWVAR 20
80855: PUSH
80856: LD_OWVAR 2
80860: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80861: LD_VAR 0 1
80865: PUSH
80866: LD_INT 1
80868: PUSH
80869: LD_INT 2
80871: PUSH
80872: LD_INT 3
80874: PUSH
80875: LD_INT 4
80877: PUSH
80878: LD_INT 5
80880: PUSH
80881: EMPTY
80882: LIST
80883: LIST
80884: LIST
80885: LIST
80886: LIST
80887: IN
80888: IFFALSE 80900
// uc_nation := nation_american else
80890: LD_ADDR_OWVAR 21
80894: PUSH
80895: LD_INT 1
80897: ST_TO_ADDR
80898: GO 80943
// if chassis in [ 11 , 12 , 13 , 14 ] then
80900: LD_VAR 0 1
80904: PUSH
80905: LD_INT 11
80907: PUSH
80908: LD_INT 12
80910: PUSH
80911: LD_INT 13
80913: PUSH
80914: LD_INT 14
80916: PUSH
80917: EMPTY
80918: LIST
80919: LIST
80920: LIST
80921: LIST
80922: IN
80923: IFFALSE 80935
// uc_nation := nation_arabian else
80925: LD_ADDR_OWVAR 21
80929: PUSH
80930: LD_INT 2
80932: ST_TO_ADDR
80933: GO 80943
// uc_nation := nation_russian ;
80935: LD_ADDR_OWVAR 21
80939: PUSH
80940: LD_INT 3
80942: ST_TO_ADDR
// vc_chassis := chassis ;
80943: LD_ADDR_OWVAR 37
80947: PUSH
80948: LD_VAR 0 1
80952: ST_TO_ADDR
// vc_engine := engine ;
80953: LD_ADDR_OWVAR 39
80957: PUSH
80958: LD_VAR 0 2
80962: ST_TO_ADDR
// vc_control := control ;
80963: LD_ADDR_OWVAR 38
80967: PUSH
80968: LD_VAR 0 3
80972: ST_TO_ADDR
// vc_weapon := weapon ;
80973: LD_ADDR_OWVAR 40
80977: PUSH
80978: LD_VAR 0 4
80982: ST_TO_ADDR
// un := CreateVehicle ;
80983: LD_ADDR_VAR 0 8
80987: PUSH
80988: CALL_OW 45
80992: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80993: LD_VAR 0 8
80997: PPUSH
80998: LD_INT 0
81000: PPUSH
81001: LD_INT 5
81003: PPUSH
81004: CALL_OW 12
81008: PPUSH
81009: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
81013: LD_VAR 0 8
81017: PPUSH
81018: LD_VAR 0 5
81022: PPUSH
81023: LD_VAR 0 6
81027: PPUSH
81028: LD_INT 1
81030: PPUSH
81031: CALL_OW 48
// end ;
81035: LD_VAR 0 7
81039: RET
// export hInvincible ; every 1 do
81040: GO 81042
81042: DISABLE
// hInvincible := [ ] ;
81043: LD_ADDR_EXP 121
81047: PUSH
81048: EMPTY
81049: ST_TO_ADDR
81050: END
// every 10 do var i ;
81051: GO 81053
81053: DISABLE
81054: LD_INT 0
81056: PPUSH
// begin enable ;
81057: ENABLE
// if not hInvincible then
81058: LD_EXP 121
81062: NOT
81063: IFFALSE 81067
// exit ;
81065: GO 81111
// for i in hInvincible do
81067: LD_ADDR_VAR 0 1
81071: PUSH
81072: LD_EXP 121
81076: PUSH
81077: FOR_IN
81078: IFFALSE 81109
// if GetLives ( i ) < 1000 then
81080: LD_VAR 0 1
81084: PPUSH
81085: CALL_OW 256
81089: PUSH
81090: LD_INT 1000
81092: LESS
81093: IFFALSE 81107
// SetLives ( i , 1000 ) ;
81095: LD_VAR 0 1
81099: PPUSH
81100: LD_INT 1000
81102: PPUSH
81103: CALL_OW 234
81107: GO 81077
81109: POP
81110: POP
// end ;
81111: PPOPN 1
81113: END
// export function hHackInvincible ; var i ; begin
81114: LD_INT 0
81116: PPUSH
81117: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
81118: LD_ADDR_VAR 0 2
81122: PUSH
81123: LD_INT 2
81125: PUSH
81126: LD_INT 21
81128: PUSH
81129: LD_INT 1
81131: PUSH
81132: EMPTY
81133: LIST
81134: LIST
81135: PUSH
81136: LD_INT 21
81138: PUSH
81139: LD_INT 2
81141: PUSH
81142: EMPTY
81143: LIST
81144: LIST
81145: PUSH
81146: EMPTY
81147: LIST
81148: LIST
81149: LIST
81150: PPUSH
81151: CALL_OW 69
81155: PUSH
81156: FOR_IN
81157: IFFALSE 81218
// if IsSelected ( i ) then
81159: LD_VAR 0 2
81163: PPUSH
81164: CALL_OW 306
81168: IFFALSE 81216
// begin if i in hInvincible then
81170: LD_VAR 0 2
81174: PUSH
81175: LD_EXP 121
81179: IN
81180: IFFALSE 81200
// hInvincible := hInvincible diff i else
81182: LD_ADDR_EXP 121
81186: PUSH
81187: LD_EXP 121
81191: PUSH
81192: LD_VAR 0 2
81196: DIFF
81197: ST_TO_ADDR
81198: GO 81216
// hInvincible := hInvincible union i ;
81200: LD_ADDR_EXP 121
81204: PUSH
81205: LD_EXP 121
81209: PUSH
81210: LD_VAR 0 2
81214: UNION
81215: ST_TO_ADDR
// end ;
81216: GO 81156
81218: POP
81219: POP
// end ;
81220: LD_VAR 0 1
81224: RET
// export function hHackInvisible ; var i , j ; begin
81225: LD_INT 0
81227: PPUSH
81228: PPUSH
81229: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
81230: LD_ADDR_VAR 0 2
81234: PUSH
81235: LD_INT 21
81237: PUSH
81238: LD_INT 1
81240: PUSH
81241: EMPTY
81242: LIST
81243: LIST
81244: PPUSH
81245: CALL_OW 69
81249: PUSH
81250: FOR_IN
81251: IFFALSE 81275
// if IsSelected ( i ) then
81253: LD_VAR 0 2
81257: PPUSH
81258: CALL_OW 306
81262: IFFALSE 81273
// ComForceInvisible ( i ) ;
81264: LD_VAR 0 2
81268: PPUSH
81269: CALL_OW 496
81273: GO 81250
81275: POP
81276: POP
// end ;
81277: LD_VAR 0 1
81281: RET
// export function hHackChangeYourSide ; begin
81282: LD_INT 0
81284: PPUSH
// if your_side = 8 then
81285: LD_OWVAR 2
81289: PUSH
81290: LD_INT 8
81292: EQUAL
81293: IFFALSE 81305
// your_side := 0 else
81295: LD_ADDR_OWVAR 2
81299: PUSH
81300: LD_INT 0
81302: ST_TO_ADDR
81303: GO 81319
// your_side := your_side + 1 ;
81305: LD_ADDR_OWVAR 2
81309: PUSH
81310: LD_OWVAR 2
81314: PUSH
81315: LD_INT 1
81317: PLUS
81318: ST_TO_ADDR
// end ;
81319: LD_VAR 0 1
81323: RET
// export function hHackChangeUnitSide ; var i , j ; begin
81324: LD_INT 0
81326: PPUSH
81327: PPUSH
81328: PPUSH
// for i in all_units do
81329: LD_ADDR_VAR 0 2
81333: PUSH
81334: LD_OWVAR 3
81338: PUSH
81339: FOR_IN
81340: IFFALSE 81418
// if IsSelected ( i ) then
81342: LD_VAR 0 2
81346: PPUSH
81347: CALL_OW 306
81351: IFFALSE 81416
// begin j := GetSide ( i ) ;
81353: LD_ADDR_VAR 0 3
81357: PUSH
81358: LD_VAR 0 2
81362: PPUSH
81363: CALL_OW 255
81367: ST_TO_ADDR
// if j = 8 then
81368: LD_VAR 0 3
81372: PUSH
81373: LD_INT 8
81375: EQUAL
81376: IFFALSE 81388
// j := 0 else
81378: LD_ADDR_VAR 0 3
81382: PUSH
81383: LD_INT 0
81385: ST_TO_ADDR
81386: GO 81402
// j := j + 1 ;
81388: LD_ADDR_VAR 0 3
81392: PUSH
81393: LD_VAR 0 3
81397: PUSH
81398: LD_INT 1
81400: PLUS
81401: ST_TO_ADDR
// SetSide ( i , j ) ;
81402: LD_VAR 0 2
81406: PPUSH
81407: LD_VAR 0 3
81411: PPUSH
81412: CALL_OW 235
// end ;
81416: GO 81339
81418: POP
81419: POP
// end ;
81420: LD_VAR 0 1
81424: RET
// export function hHackFog ; begin
81425: LD_INT 0
81427: PPUSH
// FogOff ( true ) ;
81428: LD_INT 1
81430: PPUSH
81431: CALL_OW 344
// end ;
81435: LD_VAR 0 1
81439: RET
// export function hHackTeleport ( unit , x , y ) ; begin
81440: LD_INT 0
81442: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
81443: LD_VAR 0 1
81447: PPUSH
81448: LD_VAR 0 2
81452: PPUSH
81453: LD_VAR 0 3
81457: PPUSH
81458: LD_INT 1
81460: PPUSH
81461: LD_INT 1
81463: PPUSH
81464: CALL_OW 483
// CenterOnXY ( x , y ) ;
81468: LD_VAR 0 2
81472: PPUSH
81473: LD_VAR 0 3
81477: PPUSH
81478: CALL_OW 84
// end ;
81482: LD_VAR 0 4
81486: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
81487: LD_INT 0
81489: PPUSH
81490: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
81491: LD_VAR 0 1
81495: NOT
81496: PUSH
81497: LD_VAR 0 2
81501: PPUSH
81502: LD_VAR 0 3
81506: PPUSH
81507: CALL_OW 488
81511: NOT
81512: OR
81513: PUSH
81514: LD_VAR 0 1
81518: PPUSH
81519: CALL_OW 266
81523: PUSH
81524: LD_INT 3
81526: NONEQUAL
81527: PUSH
81528: LD_VAR 0 1
81532: PPUSH
81533: CALL_OW 247
81537: PUSH
81538: LD_INT 1
81540: EQUAL
81541: NOT
81542: AND
81543: OR
81544: IFFALSE 81548
// exit ;
81546: GO 81697
// if GetType ( factory ) = unit_human then
81548: LD_VAR 0 1
81552: PPUSH
81553: CALL_OW 247
81557: PUSH
81558: LD_INT 1
81560: EQUAL
81561: IFFALSE 81578
// factory := IsInUnit ( factory ) ;
81563: LD_ADDR_VAR 0 1
81567: PUSH
81568: LD_VAR 0 1
81572: PPUSH
81573: CALL_OW 310
81577: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81578: LD_VAR 0 1
81582: PPUSH
81583: CALL_OW 266
81587: PUSH
81588: LD_INT 3
81590: NONEQUAL
81591: IFFALSE 81595
// exit ;
81593: GO 81697
// if HexInfo ( x , y ) = factory then
81595: LD_VAR 0 2
81599: PPUSH
81600: LD_VAR 0 3
81604: PPUSH
81605: CALL_OW 428
81609: PUSH
81610: LD_VAR 0 1
81614: EQUAL
81615: IFFALSE 81642
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81617: LD_ADDR_EXP 122
81621: PUSH
81622: LD_EXP 122
81626: PPUSH
81627: LD_VAR 0 1
81631: PPUSH
81632: LD_INT 0
81634: PPUSH
81635: CALL_OW 1
81639: ST_TO_ADDR
81640: GO 81693
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81642: LD_ADDR_EXP 122
81646: PUSH
81647: LD_EXP 122
81651: PPUSH
81652: LD_VAR 0 1
81656: PPUSH
81657: LD_VAR 0 1
81661: PPUSH
81662: CALL_OW 255
81666: PUSH
81667: LD_VAR 0 1
81671: PUSH
81672: LD_VAR 0 2
81676: PUSH
81677: LD_VAR 0 3
81681: PUSH
81682: EMPTY
81683: LIST
81684: LIST
81685: LIST
81686: LIST
81687: PPUSH
81688: CALL_OW 1
81692: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81693: CALL 81702 0 0
// end ;
81697: LD_VAR 0 4
81701: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81702: LD_INT 0
81704: PPUSH
81705: PPUSH
81706: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81707: LD_STRING resetFactoryWaypoint();
81709: PPUSH
81710: CALL_OW 559
// if factoryWaypoints then
81714: LD_EXP 122
81718: IFFALSE 81844
// begin list := PrepareArray ( factoryWaypoints ) ;
81720: LD_ADDR_VAR 0 3
81724: PUSH
81725: LD_EXP 122
81729: PPUSH
81730: CALL 66988 0 1
81734: ST_TO_ADDR
// for i := 1 to list do
81735: LD_ADDR_VAR 0 2
81739: PUSH
81740: DOUBLE
81741: LD_INT 1
81743: DEC
81744: ST_TO_ADDR
81745: LD_VAR 0 3
81749: PUSH
81750: FOR_TO
81751: IFFALSE 81842
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81753: LD_STRING setFactoryWaypointXY(
81755: PUSH
81756: LD_VAR 0 3
81760: PUSH
81761: LD_VAR 0 2
81765: ARRAY
81766: PUSH
81767: LD_INT 1
81769: ARRAY
81770: STR
81771: PUSH
81772: LD_STRING ,
81774: STR
81775: PUSH
81776: LD_VAR 0 3
81780: PUSH
81781: LD_VAR 0 2
81785: ARRAY
81786: PUSH
81787: LD_INT 2
81789: ARRAY
81790: STR
81791: PUSH
81792: LD_STRING ,
81794: STR
81795: PUSH
81796: LD_VAR 0 3
81800: PUSH
81801: LD_VAR 0 2
81805: ARRAY
81806: PUSH
81807: LD_INT 3
81809: ARRAY
81810: STR
81811: PUSH
81812: LD_STRING ,
81814: STR
81815: PUSH
81816: LD_VAR 0 3
81820: PUSH
81821: LD_VAR 0 2
81825: ARRAY
81826: PUSH
81827: LD_INT 4
81829: ARRAY
81830: STR
81831: PUSH
81832: LD_STRING )
81834: STR
81835: PPUSH
81836: CALL_OW 559
81840: GO 81750
81842: POP
81843: POP
// end ; end ;
81844: LD_VAR 0 1
81848: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81849: LD_INT 0
81851: PPUSH
// if HexInfo ( x , y ) = warehouse then
81852: LD_VAR 0 2
81856: PPUSH
81857: LD_VAR 0 3
81861: PPUSH
81862: CALL_OW 428
81866: PUSH
81867: LD_VAR 0 1
81871: EQUAL
81872: IFFALSE 81899
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81874: LD_ADDR_EXP 123
81878: PUSH
81879: LD_EXP 123
81883: PPUSH
81884: LD_VAR 0 1
81888: PPUSH
81889: LD_INT 0
81891: PPUSH
81892: CALL_OW 1
81896: ST_TO_ADDR
81897: GO 81950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81899: LD_ADDR_EXP 123
81903: PUSH
81904: LD_EXP 123
81908: PPUSH
81909: LD_VAR 0 1
81913: PPUSH
81914: LD_VAR 0 1
81918: PPUSH
81919: CALL_OW 255
81923: PUSH
81924: LD_VAR 0 1
81928: PUSH
81929: LD_VAR 0 2
81933: PUSH
81934: LD_VAR 0 3
81938: PUSH
81939: EMPTY
81940: LIST
81941: LIST
81942: LIST
81943: LIST
81944: PPUSH
81945: CALL_OW 1
81949: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81950: CALL 81959 0 0
// end ;
81954: LD_VAR 0 4
81958: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81959: LD_INT 0
81961: PPUSH
81962: PPUSH
81963: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81964: LD_STRING resetWarehouseGatheringPoints();
81966: PPUSH
81967: CALL_OW 559
// if warehouseGatheringPoints then
81971: LD_EXP 123
81975: IFFALSE 82101
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81977: LD_ADDR_VAR 0 3
81981: PUSH
81982: LD_EXP 123
81986: PPUSH
81987: CALL 66988 0 1
81991: ST_TO_ADDR
// for i := 1 to list do
81992: LD_ADDR_VAR 0 2
81996: PUSH
81997: DOUBLE
81998: LD_INT 1
82000: DEC
82001: ST_TO_ADDR
82002: LD_VAR 0 3
82006: PUSH
82007: FOR_TO
82008: IFFALSE 82099
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
82010: LD_STRING setWarehouseGatheringPointXY(
82012: PUSH
82013: LD_VAR 0 3
82017: PUSH
82018: LD_VAR 0 2
82022: ARRAY
82023: PUSH
82024: LD_INT 1
82026: ARRAY
82027: STR
82028: PUSH
82029: LD_STRING ,
82031: STR
82032: PUSH
82033: LD_VAR 0 3
82037: PUSH
82038: LD_VAR 0 2
82042: ARRAY
82043: PUSH
82044: LD_INT 2
82046: ARRAY
82047: STR
82048: PUSH
82049: LD_STRING ,
82051: STR
82052: PUSH
82053: LD_VAR 0 3
82057: PUSH
82058: LD_VAR 0 2
82062: ARRAY
82063: PUSH
82064: LD_INT 3
82066: ARRAY
82067: STR
82068: PUSH
82069: LD_STRING ,
82071: STR
82072: PUSH
82073: LD_VAR 0 3
82077: PUSH
82078: LD_VAR 0 2
82082: ARRAY
82083: PUSH
82084: LD_INT 4
82086: ARRAY
82087: STR
82088: PUSH
82089: LD_STRING )
82091: STR
82092: PPUSH
82093: CALL_OW 559
82097: GO 82007
82099: POP
82100: POP
// end ; end ;
82101: LD_VAR 0 1
82105: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
82106: LD_EXP 123
82110: IFFALSE 82795
82112: GO 82114
82114: DISABLE
82115: LD_INT 0
82117: PPUSH
82118: PPUSH
82119: PPUSH
82120: PPUSH
82121: PPUSH
82122: PPUSH
82123: PPUSH
82124: PPUSH
82125: PPUSH
// begin enable ;
82126: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
82127: LD_ADDR_VAR 0 3
82131: PUSH
82132: LD_EXP 123
82136: PPUSH
82137: CALL 66988 0 1
82141: ST_TO_ADDR
// if not list then
82142: LD_VAR 0 3
82146: NOT
82147: IFFALSE 82151
// exit ;
82149: GO 82795
// for i := 1 to list do
82151: LD_ADDR_VAR 0 1
82155: PUSH
82156: DOUBLE
82157: LD_INT 1
82159: DEC
82160: ST_TO_ADDR
82161: LD_VAR 0 3
82165: PUSH
82166: FOR_TO
82167: IFFALSE 82793
// begin depot := list [ i ] [ 2 ] ;
82169: LD_ADDR_VAR 0 8
82173: PUSH
82174: LD_VAR 0 3
82178: PUSH
82179: LD_VAR 0 1
82183: ARRAY
82184: PUSH
82185: LD_INT 2
82187: ARRAY
82188: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
82189: LD_ADDR_VAR 0 5
82193: PUSH
82194: LD_VAR 0 3
82198: PUSH
82199: LD_VAR 0 1
82203: ARRAY
82204: PUSH
82205: LD_INT 1
82207: ARRAY
82208: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
82209: LD_VAR 0 8
82213: PPUSH
82214: CALL_OW 301
82218: PUSH
82219: LD_VAR 0 5
82223: PUSH
82224: LD_VAR 0 8
82228: PPUSH
82229: CALL_OW 255
82233: NONEQUAL
82234: OR
82235: IFFALSE 82264
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
82237: LD_ADDR_EXP 123
82241: PUSH
82242: LD_EXP 123
82246: PPUSH
82247: LD_VAR 0 8
82251: PPUSH
82252: LD_INT 0
82254: PPUSH
82255: CALL_OW 1
82259: ST_TO_ADDR
// exit ;
82260: POP
82261: POP
82262: GO 82795
// end ; x := list [ i ] [ 3 ] ;
82264: LD_ADDR_VAR 0 6
82268: PUSH
82269: LD_VAR 0 3
82273: PUSH
82274: LD_VAR 0 1
82278: ARRAY
82279: PUSH
82280: LD_INT 3
82282: ARRAY
82283: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
82284: LD_ADDR_VAR 0 7
82288: PUSH
82289: LD_VAR 0 3
82293: PUSH
82294: LD_VAR 0 1
82298: ARRAY
82299: PUSH
82300: LD_INT 4
82302: ARRAY
82303: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
82304: LD_ADDR_VAR 0 9
82308: PUSH
82309: LD_VAR 0 6
82313: PPUSH
82314: LD_VAR 0 7
82318: PPUSH
82319: LD_INT 16
82321: PPUSH
82322: CALL 65576 0 3
82326: ST_TO_ADDR
// if not cratesNearbyPoint then
82327: LD_VAR 0 9
82331: NOT
82332: IFFALSE 82338
// exit ;
82334: POP
82335: POP
82336: GO 82795
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
82338: LD_ADDR_VAR 0 4
82342: PUSH
82343: LD_INT 22
82345: PUSH
82346: LD_VAR 0 5
82350: PUSH
82351: EMPTY
82352: LIST
82353: LIST
82354: PUSH
82355: LD_INT 3
82357: PUSH
82358: LD_INT 60
82360: PUSH
82361: EMPTY
82362: LIST
82363: PUSH
82364: EMPTY
82365: LIST
82366: LIST
82367: PUSH
82368: LD_INT 91
82370: PUSH
82371: LD_VAR 0 8
82375: PUSH
82376: LD_INT 6
82378: PUSH
82379: EMPTY
82380: LIST
82381: LIST
82382: LIST
82383: PUSH
82384: LD_INT 2
82386: PUSH
82387: LD_INT 25
82389: PUSH
82390: LD_INT 2
82392: PUSH
82393: EMPTY
82394: LIST
82395: LIST
82396: PUSH
82397: LD_INT 25
82399: PUSH
82400: LD_INT 16
82402: PUSH
82403: EMPTY
82404: LIST
82405: LIST
82406: PUSH
82407: EMPTY
82408: LIST
82409: LIST
82410: LIST
82411: PUSH
82412: EMPTY
82413: LIST
82414: LIST
82415: LIST
82416: LIST
82417: PPUSH
82418: CALL_OW 69
82422: PUSH
82423: LD_VAR 0 8
82427: PPUSH
82428: CALL_OW 313
82432: PPUSH
82433: LD_INT 3
82435: PUSH
82436: LD_INT 60
82438: PUSH
82439: EMPTY
82440: LIST
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: PUSH
82446: LD_INT 2
82448: PUSH
82449: LD_INT 25
82451: PUSH
82452: LD_INT 2
82454: PUSH
82455: EMPTY
82456: LIST
82457: LIST
82458: PUSH
82459: LD_INT 25
82461: PUSH
82462: LD_INT 16
82464: PUSH
82465: EMPTY
82466: LIST
82467: LIST
82468: PUSH
82469: EMPTY
82470: LIST
82471: LIST
82472: LIST
82473: PUSH
82474: EMPTY
82475: LIST
82476: LIST
82477: PPUSH
82478: CALL_OW 72
82482: UNION
82483: ST_TO_ADDR
// if tmp then
82484: LD_VAR 0 4
82488: IFFALSE 82568
// begin tmp := ShrinkArray ( tmp , 3 ) ;
82490: LD_ADDR_VAR 0 4
82494: PUSH
82495: LD_VAR 0 4
82499: PPUSH
82500: LD_INT 3
82502: PPUSH
82503: CALL 63545 0 2
82507: ST_TO_ADDR
// for j in tmp do
82508: LD_ADDR_VAR 0 2
82512: PUSH
82513: LD_VAR 0 4
82517: PUSH
82518: FOR_IN
82519: IFFALSE 82562
// begin if IsInUnit ( j ) then
82521: LD_VAR 0 2
82525: PPUSH
82526: CALL_OW 310
82530: IFFALSE 82541
// ComExit ( j ) ;
82532: LD_VAR 0 2
82536: PPUSH
82537: CALL 63628 0 1
// AddComCollect ( j , x , y ) ;
82541: LD_VAR 0 2
82545: PPUSH
82546: LD_VAR 0 6
82550: PPUSH
82551: LD_VAR 0 7
82555: PPUSH
82556: CALL_OW 177
// end ;
82560: GO 82518
82562: POP
82563: POP
// exit ;
82564: POP
82565: POP
82566: GO 82795
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
82568: LD_ADDR_VAR 0 4
82572: PUSH
82573: LD_INT 22
82575: PUSH
82576: LD_VAR 0 5
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 91
82587: PUSH
82588: LD_VAR 0 8
82592: PUSH
82593: LD_INT 8
82595: PUSH
82596: EMPTY
82597: LIST
82598: LIST
82599: LIST
82600: PUSH
82601: LD_INT 2
82603: PUSH
82604: LD_INT 34
82606: PUSH
82607: LD_INT 12
82609: PUSH
82610: EMPTY
82611: LIST
82612: LIST
82613: PUSH
82614: LD_INT 34
82616: PUSH
82617: LD_INT 51
82619: PUSH
82620: EMPTY
82621: LIST
82622: LIST
82623: PUSH
82624: LD_INT 34
82626: PUSH
82627: LD_INT 32
82629: PUSH
82630: EMPTY
82631: LIST
82632: LIST
82633: PUSH
82634: LD_INT 34
82636: PUSH
82637: LD_INT 89
82639: PUSH
82640: EMPTY
82641: LIST
82642: LIST
82643: PUSH
82644: EMPTY
82645: LIST
82646: LIST
82647: LIST
82648: LIST
82649: LIST
82650: PUSH
82651: EMPTY
82652: LIST
82653: LIST
82654: LIST
82655: PPUSH
82656: CALL_OW 69
82660: ST_TO_ADDR
// if tmp then
82661: LD_VAR 0 4
82665: IFFALSE 82791
// begin for j in tmp do
82667: LD_ADDR_VAR 0 2
82671: PUSH
82672: LD_VAR 0 4
82676: PUSH
82677: FOR_IN
82678: IFFALSE 82789
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82680: LD_VAR 0 2
82684: PPUSH
82685: CALL_OW 262
82689: PUSH
82690: LD_INT 3
82692: EQUAL
82693: PUSH
82694: LD_VAR 0 2
82698: PPUSH
82699: CALL_OW 261
82703: PUSH
82704: LD_INT 20
82706: GREATER
82707: OR
82708: PUSH
82709: LD_VAR 0 2
82713: PPUSH
82714: CALL_OW 314
82718: NOT
82719: AND
82720: PUSH
82721: LD_VAR 0 2
82725: PPUSH
82726: CALL_OW 263
82730: PUSH
82731: LD_INT 1
82733: NONEQUAL
82734: PUSH
82735: LD_VAR 0 2
82739: PPUSH
82740: CALL_OW 311
82744: OR
82745: AND
82746: IFFALSE 82787
// begin ComCollect ( j , x , y ) ;
82748: LD_VAR 0 2
82752: PPUSH
82753: LD_VAR 0 6
82757: PPUSH
82758: LD_VAR 0 7
82762: PPUSH
82763: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82767: LD_VAR 0 2
82771: PPUSH
82772: LD_VAR 0 8
82776: PPUSH
82777: CALL_OW 172
// exit ;
82781: POP
82782: POP
82783: POP
82784: POP
82785: GO 82795
// end ;
82787: GO 82677
82789: POP
82790: POP
// end ; end ;
82791: GO 82166
82793: POP
82794: POP
// end ; end_of_file
82795: PPOPN 9
82797: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82798: LD_VAR 0 1
82802: PUSH
82803: LD_INT 200
82805: DOUBLE
82806: GREATEREQUAL
82807: IFFALSE 82815
82809: LD_INT 299
82811: DOUBLE
82812: LESSEQUAL
82813: IFTRUE 82817
82815: GO 82849
82817: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82818: LD_VAR 0 1
82822: PPUSH
82823: LD_VAR 0 2
82827: PPUSH
82828: LD_VAR 0 3
82832: PPUSH
82833: LD_VAR 0 4
82837: PPUSH
82838: LD_VAR 0 5
82842: PPUSH
82843: CALL 83337 0 5
82847: GO 82926
82849: LD_INT 300
82851: DOUBLE
82852: GREATEREQUAL
82853: IFFALSE 82861
82855: LD_INT 399
82857: DOUBLE
82858: LESSEQUAL
82859: IFTRUE 82863
82861: GO 82925
82863: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82864: LD_VAR 0 1
82868: PPUSH
82869: LD_VAR 0 2
82873: PPUSH
82874: LD_VAR 0 3
82878: PPUSH
82879: LD_VAR 0 4
82883: PPUSH
82884: LD_VAR 0 5
82888: PPUSH
82889: LD_VAR 0 6
82893: PPUSH
82894: LD_VAR 0 7
82898: PPUSH
82899: LD_VAR 0 8
82903: PPUSH
82904: LD_VAR 0 9
82908: PPUSH
82909: LD_VAR 0 10
82913: PPUSH
82914: LD_VAR 0 11
82918: PPUSH
82919: CALL 79507 0 11
82923: GO 82926
82925: POP
// end ;
82926: PPOPN 11
82928: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82929: LD_VAR 0 1
82933: PPUSH
82934: LD_VAR 0 2
82938: PPUSH
82939: LD_VAR 0 3
82943: PPUSH
82944: LD_VAR 0 4
82948: PPUSH
82949: LD_VAR 0 5
82953: PPUSH
82954: CALL 83073 0 5
// end ; end_of_file
82958: PPOPN 5
82960: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
82961: LD_INT 0
82963: PPUSH
82964: PPUSH
82965: PPUSH
82966: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
82967: LD_VAR 0 1
82971: PPUSH
82972: CALL_OW 264
82976: PUSH
82977: LD_INT 91
82979: EQUAL
82980: IFFALSE 83052
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
82982: LD_INT 68
82984: PPUSH
82985: LD_VAR 0 1
82989: PPUSH
82990: CALL_OW 255
82994: PPUSH
82995: CALL_OW 321
82999: PUSH
83000: LD_INT 2
83002: EQUAL
83003: IFFALSE 83015
// eff := 70 else
83005: LD_ADDR_VAR 0 4
83009: PUSH
83010: LD_INT 70
83012: ST_TO_ADDR
83013: GO 83023
// eff := 30 ;
83015: LD_ADDR_VAR 0 4
83019: PUSH
83020: LD_INT 30
83022: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
83023: LD_VAR 0 1
83027: PPUSH
83028: CALL_OW 250
83032: PPUSH
83033: LD_VAR 0 1
83037: PPUSH
83038: CALL_OW 251
83042: PPUSH
83043: LD_VAR 0 4
83047: PPUSH
83048: CALL_OW 495
// end ; end ;
83052: LD_VAR 0 2
83056: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
83057: LD_INT 0
83059: PPUSH
// end ;
83060: LD_VAR 0 4
83064: RET
// export function SOS_Command ( cmd ) ; begin
83065: LD_INT 0
83067: PPUSH
// end ;
83068: LD_VAR 0 2
83072: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
83073: LD_INT 0
83075: PPUSH
// end ;
83076: LD_VAR 0 6
83080: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
83081: LD_INT 0
83083: PPUSH
83084: PPUSH
// if not vehicle or not factory then
83085: LD_VAR 0 1
83089: NOT
83090: PUSH
83091: LD_VAR 0 2
83095: NOT
83096: OR
83097: IFFALSE 83101
// exit ;
83099: GO 83332
// if factoryWaypoints >= factory then
83101: LD_EXP 122
83105: PUSH
83106: LD_VAR 0 2
83110: GREATEREQUAL
83111: IFFALSE 83332
// if factoryWaypoints [ factory ] then
83113: LD_EXP 122
83117: PUSH
83118: LD_VAR 0 2
83122: ARRAY
83123: IFFALSE 83332
// begin if GetControl ( vehicle ) = control_manual then
83125: LD_VAR 0 1
83129: PPUSH
83130: CALL_OW 263
83134: PUSH
83135: LD_INT 1
83137: EQUAL
83138: IFFALSE 83219
// begin driver := IsDrivenBy ( vehicle ) ;
83140: LD_ADDR_VAR 0 4
83144: PUSH
83145: LD_VAR 0 1
83149: PPUSH
83150: CALL_OW 311
83154: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83155: LD_VAR 0 4
83159: PPUSH
83160: LD_EXP 122
83164: PUSH
83165: LD_VAR 0 2
83169: ARRAY
83170: PUSH
83171: LD_INT 3
83173: ARRAY
83174: PPUSH
83175: LD_EXP 122
83179: PUSH
83180: LD_VAR 0 2
83184: ARRAY
83185: PUSH
83186: LD_INT 4
83188: ARRAY
83189: PPUSH
83190: CALL_OW 171
// AddComExitVehicle ( driver ) ;
83194: LD_VAR 0 4
83198: PPUSH
83199: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
83203: LD_VAR 0 4
83207: PPUSH
83208: LD_VAR 0 2
83212: PPUSH
83213: CALL_OW 180
// end else
83217: GO 83332
// if GetControl ( vehicle ) = control_remote then
83219: LD_VAR 0 1
83223: PPUSH
83224: CALL_OW 263
83228: PUSH
83229: LD_INT 2
83231: EQUAL
83232: IFFALSE 83293
// begin wait ( 0 0$2 ) ;
83234: LD_INT 70
83236: PPUSH
83237: CALL_OW 67
// if Connect ( vehicle ) then
83241: LD_VAR 0 1
83245: PPUSH
83246: CALL 33887 0 1
83250: IFFALSE 83291
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83252: LD_VAR 0 1
83256: PPUSH
83257: LD_EXP 122
83261: PUSH
83262: LD_VAR 0 2
83266: ARRAY
83267: PUSH
83268: LD_INT 3
83270: ARRAY
83271: PPUSH
83272: LD_EXP 122
83276: PUSH
83277: LD_VAR 0 2
83281: ARRAY
83282: PUSH
83283: LD_INT 4
83285: ARRAY
83286: PPUSH
83287: CALL_OW 171
// end else
83291: GO 83332
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
83293: LD_VAR 0 1
83297: PPUSH
83298: LD_EXP 122
83302: PUSH
83303: LD_VAR 0 2
83307: ARRAY
83308: PUSH
83309: LD_INT 3
83311: ARRAY
83312: PPUSH
83313: LD_EXP 122
83317: PUSH
83318: LD_VAR 0 2
83322: ARRAY
83323: PUSH
83324: LD_INT 4
83326: ARRAY
83327: PPUSH
83328: CALL_OW 171
// end ; end ;
83332: LD_VAR 0 3
83336: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
83337: LD_INT 0
83339: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
83340: LD_VAR 0 1
83344: PUSH
83345: LD_INT 250
83347: EQUAL
83348: PUSH
83349: LD_VAR 0 2
83353: PPUSH
83354: CALL_OW 264
83358: PUSH
83359: LD_INT 81
83361: EQUAL
83362: AND
83363: IFFALSE 83384
// MinerPlaceMine ( unit , x , y ) ;
83365: LD_VAR 0 2
83369: PPUSH
83370: LD_VAR 0 4
83374: PPUSH
83375: LD_VAR 0 5
83379: PPUSH
83380: CALL 85769 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
83384: LD_VAR 0 1
83388: PUSH
83389: LD_INT 251
83391: EQUAL
83392: PUSH
83393: LD_VAR 0 2
83397: PPUSH
83398: CALL_OW 264
83402: PUSH
83403: LD_INT 81
83405: EQUAL
83406: AND
83407: IFFALSE 83428
// MinerDetonateMine ( unit , x , y ) ;
83409: LD_VAR 0 2
83413: PPUSH
83414: LD_VAR 0 4
83418: PPUSH
83419: LD_VAR 0 5
83423: PPUSH
83424: CALL 86044 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
83428: LD_VAR 0 1
83432: PUSH
83433: LD_INT 252
83435: EQUAL
83436: PUSH
83437: LD_VAR 0 2
83441: PPUSH
83442: CALL_OW 264
83446: PUSH
83447: LD_INT 81
83449: EQUAL
83450: AND
83451: IFFALSE 83472
// MinerCreateMinefield ( unit , x , y ) ;
83453: LD_VAR 0 2
83457: PPUSH
83458: LD_VAR 0 4
83462: PPUSH
83463: LD_VAR 0 5
83467: PPUSH
83468: CALL 86461 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
83472: LD_VAR 0 1
83476: PUSH
83477: LD_INT 253
83479: EQUAL
83480: PUSH
83481: LD_VAR 0 2
83485: PPUSH
83486: CALL_OW 257
83490: PUSH
83491: LD_INT 5
83493: EQUAL
83494: AND
83495: IFFALSE 83516
// ComBinocular ( unit , x , y ) ;
83497: LD_VAR 0 2
83501: PPUSH
83502: LD_VAR 0 4
83506: PPUSH
83507: LD_VAR 0 5
83511: PPUSH
83512: CALL 86830 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
83516: LD_VAR 0 1
83520: PUSH
83521: LD_INT 254
83523: EQUAL
83524: PUSH
83525: LD_VAR 0 2
83529: PPUSH
83530: CALL_OW 264
83534: PUSH
83535: LD_INT 99
83537: EQUAL
83538: AND
83539: PUSH
83540: LD_VAR 0 3
83544: PPUSH
83545: CALL_OW 263
83549: PUSH
83550: LD_INT 3
83552: EQUAL
83553: AND
83554: IFFALSE 83570
// HackDestroyVehicle ( unit , selectedUnit ) ;
83556: LD_VAR 0 2
83560: PPUSH
83561: LD_VAR 0 3
83565: PPUSH
83566: CALL 85133 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
83570: LD_VAR 0 1
83574: PUSH
83575: LD_INT 255
83577: EQUAL
83578: PUSH
83579: LD_VAR 0 2
83583: PPUSH
83584: CALL_OW 264
83588: PUSH
83589: LD_INT 14
83591: PUSH
83592: LD_INT 53
83594: PUSH
83595: EMPTY
83596: LIST
83597: LIST
83598: IN
83599: AND
83600: PUSH
83601: LD_VAR 0 4
83605: PPUSH
83606: LD_VAR 0 5
83610: PPUSH
83611: CALL_OW 488
83615: AND
83616: IFFALSE 83640
// CutTreeXYR ( unit , x , y , 12 ) ;
83618: LD_VAR 0 2
83622: PPUSH
83623: LD_VAR 0 4
83627: PPUSH
83628: LD_VAR 0 5
83632: PPUSH
83633: LD_INT 12
83635: PPUSH
83636: CALL 83703 0 4
// if cmd = 256 then
83640: LD_VAR 0 1
83644: PUSH
83645: LD_INT 256
83647: EQUAL
83648: IFFALSE 83669
// SetFactoryWaypoint ( unit , x , y ) ;
83650: LD_VAR 0 2
83654: PPUSH
83655: LD_VAR 0 4
83659: PPUSH
83660: LD_VAR 0 5
83664: PPUSH
83665: CALL 81487 0 3
// if cmd = 257 then
83669: LD_VAR 0 1
83673: PUSH
83674: LD_INT 257
83676: EQUAL
83677: IFFALSE 83698
// SetWarehouseGatheringPoint ( unit , x , y ) ;
83679: LD_VAR 0 2
83683: PPUSH
83684: LD_VAR 0 4
83688: PPUSH
83689: LD_VAR 0 5
83693: PPUSH
83694: CALL 81849 0 3
// end ;
83698: LD_VAR 0 6
83702: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
83703: LD_INT 0
83705: PPUSH
83706: PPUSH
83707: PPUSH
83708: PPUSH
83709: PPUSH
83710: PPUSH
83711: PPUSH
83712: PPUSH
83713: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
83714: LD_VAR 0 1
83718: NOT
83719: PUSH
83720: LD_VAR 0 2
83724: PPUSH
83725: LD_VAR 0 3
83729: PPUSH
83730: CALL_OW 488
83734: NOT
83735: OR
83736: PUSH
83737: LD_VAR 0 4
83741: NOT
83742: OR
83743: IFFALSE 83747
// exit ;
83745: GO 84087
// list := [ ] ;
83747: LD_ADDR_VAR 0 13
83751: PUSH
83752: EMPTY
83753: ST_TO_ADDR
// if x - r < 0 then
83754: LD_VAR 0 2
83758: PUSH
83759: LD_VAR 0 4
83763: MINUS
83764: PUSH
83765: LD_INT 0
83767: LESS
83768: IFFALSE 83780
// min_x := 0 else
83770: LD_ADDR_VAR 0 7
83774: PUSH
83775: LD_INT 0
83777: ST_TO_ADDR
83778: GO 83796
// min_x := x - r ;
83780: LD_ADDR_VAR 0 7
83784: PUSH
83785: LD_VAR 0 2
83789: PUSH
83790: LD_VAR 0 4
83794: MINUS
83795: ST_TO_ADDR
// if y - r < 0 then
83796: LD_VAR 0 3
83800: PUSH
83801: LD_VAR 0 4
83805: MINUS
83806: PUSH
83807: LD_INT 0
83809: LESS
83810: IFFALSE 83822
// min_y := 0 else
83812: LD_ADDR_VAR 0 8
83816: PUSH
83817: LD_INT 0
83819: ST_TO_ADDR
83820: GO 83838
// min_y := y - r ;
83822: LD_ADDR_VAR 0 8
83826: PUSH
83827: LD_VAR 0 3
83831: PUSH
83832: LD_VAR 0 4
83836: MINUS
83837: ST_TO_ADDR
// max_x := x + r ;
83838: LD_ADDR_VAR 0 9
83842: PUSH
83843: LD_VAR 0 2
83847: PUSH
83848: LD_VAR 0 4
83852: PLUS
83853: ST_TO_ADDR
// max_y := y + r ;
83854: LD_ADDR_VAR 0 10
83858: PUSH
83859: LD_VAR 0 3
83863: PUSH
83864: LD_VAR 0 4
83868: PLUS
83869: ST_TO_ADDR
// for _x = min_x to max_x do
83870: LD_ADDR_VAR 0 11
83874: PUSH
83875: DOUBLE
83876: LD_VAR 0 7
83880: DEC
83881: ST_TO_ADDR
83882: LD_VAR 0 9
83886: PUSH
83887: FOR_TO
83888: IFFALSE 84005
// for _y = min_y to max_y do
83890: LD_ADDR_VAR 0 12
83894: PUSH
83895: DOUBLE
83896: LD_VAR 0 8
83900: DEC
83901: ST_TO_ADDR
83902: LD_VAR 0 10
83906: PUSH
83907: FOR_TO
83908: IFFALSE 84001
// begin if not ValidHex ( _x , _y ) then
83910: LD_VAR 0 11
83914: PPUSH
83915: LD_VAR 0 12
83919: PPUSH
83920: CALL_OW 488
83924: NOT
83925: IFFALSE 83929
// continue ;
83927: GO 83907
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
83929: LD_VAR 0 11
83933: PPUSH
83934: LD_VAR 0 12
83938: PPUSH
83939: CALL_OW 351
83943: PUSH
83944: LD_VAR 0 11
83948: PPUSH
83949: LD_VAR 0 12
83953: PPUSH
83954: CALL_OW 554
83958: AND
83959: IFFALSE 83999
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
83961: LD_ADDR_VAR 0 13
83965: PUSH
83966: LD_VAR 0 13
83970: PPUSH
83971: LD_VAR 0 13
83975: PUSH
83976: LD_INT 1
83978: PLUS
83979: PPUSH
83980: LD_VAR 0 11
83984: PUSH
83985: LD_VAR 0 12
83989: PUSH
83990: EMPTY
83991: LIST
83992: LIST
83993: PPUSH
83994: CALL_OW 2
83998: ST_TO_ADDR
// end ;
83999: GO 83907
84001: POP
84002: POP
84003: GO 83887
84005: POP
84006: POP
// if not list then
84007: LD_VAR 0 13
84011: NOT
84012: IFFALSE 84016
// exit ;
84014: GO 84087
// for i in list do
84016: LD_ADDR_VAR 0 6
84020: PUSH
84021: LD_VAR 0 13
84025: PUSH
84026: FOR_IN
84027: IFFALSE 84085
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
84029: LD_VAR 0 1
84033: PPUSH
84034: LD_STRING M
84036: PUSH
84037: LD_VAR 0 6
84041: PUSH
84042: LD_INT 1
84044: ARRAY
84045: PUSH
84046: LD_VAR 0 6
84050: PUSH
84051: LD_INT 2
84053: ARRAY
84054: PUSH
84055: LD_INT 0
84057: PUSH
84058: LD_INT 0
84060: PUSH
84061: LD_INT 0
84063: PUSH
84064: LD_INT 0
84066: PUSH
84067: EMPTY
84068: LIST
84069: LIST
84070: LIST
84071: LIST
84072: LIST
84073: LIST
84074: LIST
84075: PUSH
84076: EMPTY
84077: LIST
84078: PPUSH
84079: CALL_OW 447
84083: GO 84026
84085: POP
84086: POP
// end ;
84087: LD_VAR 0 5
84091: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
84092: LD_EXP 125
84096: NOT
84097: IFFALSE 84147
84099: GO 84101
84101: DISABLE
// begin initHack := true ;
84102: LD_ADDR_EXP 125
84106: PUSH
84107: LD_INT 1
84109: ST_TO_ADDR
// hackTanks := [ ] ;
84110: LD_ADDR_EXP 126
84114: PUSH
84115: EMPTY
84116: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
84117: LD_ADDR_EXP 127
84121: PUSH
84122: EMPTY
84123: ST_TO_ADDR
// hackLimit := 3 ;
84124: LD_ADDR_EXP 128
84128: PUSH
84129: LD_INT 3
84131: ST_TO_ADDR
// hackDist := 12 ;
84132: LD_ADDR_EXP 129
84136: PUSH
84137: LD_INT 12
84139: ST_TO_ADDR
// hackCounter := [ ] ;
84140: LD_ADDR_EXP 130
84144: PUSH
84145: EMPTY
84146: ST_TO_ADDR
// end ;
84147: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
84148: LD_EXP 125
84152: PUSH
84153: LD_INT 34
84155: PUSH
84156: LD_INT 99
84158: PUSH
84159: EMPTY
84160: LIST
84161: LIST
84162: PPUSH
84163: CALL_OW 69
84167: AND
84168: IFFALSE 84421
84170: GO 84172
84172: DISABLE
84173: LD_INT 0
84175: PPUSH
84176: PPUSH
// begin enable ;
84177: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
84178: LD_ADDR_VAR 0 1
84182: PUSH
84183: LD_INT 34
84185: PUSH
84186: LD_INT 99
84188: PUSH
84189: EMPTY
84190: LIST
84191: LIST
84192: PPUSH
84193: CALL_OW 69
84197: PUSH
84198: FOR_IN
84199: IFFALSE 84419
// begin if not i in hackTanks then
84201: LD_VAR 0 1
84205: PUSH
84206: LD_EXP 126
84210: IN
84211: NOT
84212: IFFALSE 84295
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
84214: LD_ADDR_EXP 126
84218: PUSH
84219: LD_EXP 126
84223: PPUSH
84224: LD_EXP 126
84228: PUSH
84229: LD_INT 1
84231: PLUS
84232: PPUSH
84233: LD_VAR 0 1
84237: PPUSH
84238: CALL_OW 1
84242: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
84243: LD_ADDR_EXP 127
84247: PUSH
84248: LD_EXP 127
84252: PPUSH
84253: LD_EXP 127
84257: PUSH
84258: LD_INT 1
84260: PLUS
84261: PPUSH
84262: EMPTY
84263: PPUSH
84264: CALL_OW 1
84268: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
84269: LD_ADDR_EXP 130
84273: PUSH
84274: LD_EXP 130
84278: PPUSH
84279: LD_EXP 130
84283: PUSH
84284: LD_INT 1
84286: PLUS
84287: PPUSH
84288: EMPTY
84289: PPUSH
84290: CALL_OW 1
84294: ST_TO_ADDR
// end ; if not IsOk ( i ) then
84295: LD_VAR 0 1
84299: PPUSH
84300: CALL_OW 302
84304: NOT
84305: IFFALSE 84318
// begin HackUnlinkAll ( i ) ;
84307: LD_VAR 0 1
84311: PPUSH
84312: CALL 84424 0 1
// continue ;
84316: GO 84198
// end ; HackCheckCapturedStatus ( i ) ;
84318: LD_VAR 0 1
84322: PPUSH
84323: CALL 84867 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
84327: LD_ADDR_VAR 0 2
84331: PUSH
84332: LD_INT 81
84334: PUSH
84335: LD_VAR 0 1
84339: PPUSH
84340: CALL_OW 255
84344: PUSH
84345: EMPTY
84346: LIST
84347: LIST
84348: PUSH
84349: LD_INT 33
84351: PUSH
84352: LD_INT 3
84354: PUSH
84355: EMPTY
84356: LIST
84357: LIST
84358: PUSH
84359: LD_INT 91
84361: PUSH
84362: LD_VAR 0 1
84366: PUSH
84367: LD_EXP 129
84371: PUSH
84372: EMPTY
84373: LIST
84374: LIST
84375: LIST
84376: PUSH
84377: LD_INT 50
84379: PUSH
84380: EMPTY
84381: LIST
84382: PUSH
84383: EMPTY
84384: LIST
84385: LIST
84386: LIST
84387: LIST
84388: PPUSH
84389: CALL_OW 69
84393: ST_TO_ADDR
// if not tmp then
84394: LD_VAR 0 2
84398: NOT
84399: IFFALSE 84403
// continue ;
84401: GO 84198
// HackLink ( i , tmp ) ;
84403: LD_VAR 0 1
84407: PPUSH
84408: LD_VAR 0 2
84412: PPUSH
84413: CALL 84560 0 2
// end ;
84417: GO 84198
84419: POP
84420: POP
// end ;
84421: PPOPN 2
84423: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
84424: LD_INT 0
84426: PPUSH
84427: PPUSH
84428: PPUSH
// if not hack in hackTanks then
84429: LD_VAR 0 1
84433: PUSH
84434: LD_EXP 126
84438: IN
84439: NOT
84440: IFFALSE 84444
// exit ;
84442: GO 84555
// index := GetElementIndex ( hackTanks , hack ) ;
84444: LD_ADDR_VAR 0 4
84448: PUSH
84449: LD_EXP 126
84453: PPUSH
84454: LD_VAR 0 1
84458: PPUSH
84459: CALL 30703 0 2
84463: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
84464: LD_EXP 127
84468: PUSH
84469: LD_VAR 0 4
84473: ARRAY
84474: IFFALSE 84555
// begin for i in hackTanksCaptured [ index ] do
84476: LD_ADDR_VAR 0 3
84480: PUSH
84481: LD_EXP 127
84485: PUSH
84486: LD_VAR 0 4
84490: ARRAY
84491: PUSH
84492: FOR_IN
84493: IFFALSE 84519
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
84495: LD_VAR 0 3
84499: PUSH
84500: LD_INT 1
84502: ARRAY
84503: PPUSH
84504: LD_VAR 0 3
84508: PUSH
84509: LD_INT 2
84511: ARRAY
84512: PPUSH
84513: CALL_OW 235
84517: GO 84492
84519: POP
84520: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
84521: LD_ADDR_EXP 127
84525: PUSH
84526: LD_EXP 127
84530: PPUSH
84531: LD_VAR 0 4
84535: PPUSH
84536: EMPTY
84537: PPUSH
84538: CALL_OW 1
84542: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
84543: LD_VAR 0 1
84547: PPUSH
84548: LD_INT 0
84550: PPUSH
84551: CALL_OW 505
// end ; end ;
84555: LD_VAR 0 2
84559: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
84560: LD_INT 0
84562: PPUSH
84563: PPUSH
84564: PPUSH
// if not hack in hackTanks or not vehicles then
84565: LD_VAR 0 1
84569: PUSH
84570: LD_EXP 126
84574: IN
84575: NOT
84576: PUSH
84577: LD_VAR 0 2
84581: NOT
84582: OR
84583: IFFALSE 84587
// exit ;
84585: GO 84862
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
84587: LD_ADDR_VAR 0 2
84591: PUSH
84592: LD_VAR 0 1
84596: PPUSH
84597: LD_VAR 0 2
84601: PPUSH
84602: LD_INT 1
84604: PPUSH
84605: LD_INT 1
84607: PPUSH
84608: CALL 31353 0 4
84612: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
84613: LD_ADDR_VAR 0 5
84617: PUSH
84618: LD_EXP 126
84622: PPUSH
84623: LD_VAR 0 1
84627: PPUSH
84628: CALL 30703 0 2
84632: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
84633: LD_EXP 127
84637: PUSH
84638: LD_VAR 0 5
84642: ARRAY
84643: PUSH
84644: LD_EXP 128
84648: LESS
84649: IFFALSE 84838
// begin for i := 1 to vehicles do
84651: LD_ADDR_VAR 0 4
84655: PUSH
84656: DOUBLE
84657: LD_INT 1
84659: DEC
84660: ST_TO_ADDR
84661: LD_VAR 0 2
84665: PUSH
84666: FOR_TO
84667: IFFALSE 84836
// begin if hackTanksCaptured [ index ] = hackLimit then
84669: LD_EXP 127
84673: PUSH
84674: LD_VAR 0 5
84678: ARRAY
84679: PUSH
84680: LD_EXP 128
84684: EQUAL
84685: IFFALSE 84689
// break ;
84687: GO 84836
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
84689: LD_ADDR_EXP 130
84693: PUSH
84694: LD_EXP 130
84698: PPUSH
84699: LD_VAR 0 5
84703: PPUSH
84704: LD_EXP 130
84708: PUSH
84709: LD_VAR 0 5
84713: ARRAY
84714: PUSH
84715: LD_INT 1
84717: PLUS
84718: PPUSH
84719: CALL_OW 1
84723: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
84724: LD_ADDR_EXP 127
84728: PUSH
84729: LD_EXP 127
84733: PPUSH
84734: LD_VAR 0 5
84738: PUSH
84739: LD_EXP 127
84743: PUSH
84744: LD_VAR 0 5
84748: ARRAY
84749: PUSH
84750: LD_INT 1
84752: PLUS
84753: PUSH
84754: EMPTY
84755: LIST
84756: LIST
84757: PPUSH
84758: LD_VAR 0 2
84762: PUSH
84763: LD_VAR 0 4
84767: ARRAY
84768: PUSH
84769: LD_VAR 0 2
84773: PUSH
84774: LD_VAR 0 4
84778: ARRAY
84779: PPUSH
84780: CALL_OW 255
84784: PUSH
84785: EMPTY
84786: LIST
84787: LIST
84788: PPUSH
84789: CALL 30918 0 3
84793: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
84794: LD_VAR 0 2
84798: PUSH
84799: LD_VAR 0 4
84803: ARRAY
84804: PPUSH
84805: LD_VAR 0 1
84809: PPUSH
84810: CALL_OW 255
84814: PPUSH
84815: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
84819: LD_VAR 0 2
84823: PUSH
84824: LD_VAR 0 4
84828: ARRAY
84829: PPUSH
84830: CALL_OW 141
// end ;
84834: GO 84666
84836: POP
84837: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
84838: LD_VAR 0 1
84842: PPUSH
84843: LD_EXP 127
84847: PUSH
84848: LD_VAR 0 5
84852: ARRAY
84853: PUSH
84854: LD_INT 0
84856: PLUS
84857: PPUSH
84858: CALL_OW 505
// end ;
84862: LD_VAR 0 3
84866: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
84867: LD_INT 0
84869: PPUSH
84870: PPUSH
84871: PPUSH
84872: PPUSH
// if not hack in hackTanks then
84873: LD_VAR 0 1
84877: PUSH
84878: LD_EXP 126
84882: IN
84883: NOT
84884: IFFALSE 84888
// exit ;
84886: GO 85128
// index := GetElementIndex ( hackTanks , hack ) ;
84888: LD_ADDR_VAR 0 4
84892: PUSH
84893: LD_EXP 126
84897: PPUSH
84898: LD_VAR 0 1
84902: PPUSH
84903: CALL 30703 0 2
84907: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
84908: LD_ADDR_VAR 0 3
84912: PUSH
84913: DOUBLE
84914: LD_EXP 127
84918: PUSH
84919: LD_VAR 0 4
84923: ARRAY
84924: INC
84925: ST_TO_ADDR
84926: LD_INT 1
84928: PUSH
84929: FOR_DOWNTO
84930: IFFALSE 85102
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
84932: LD_ADDR_VAR 0 5
84936: PUSH
84937: LD_EXP 127
84941: PUSH
84942: LD_VAR 0 4
84946: ARRAY
84947: PUSH
84948: LD_VAR 0 3
84952: ARRAY
84953: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
84954: LD_VAR 0 5
84958: PUSH
84959: LD_INT 1
84961: ARRAY
84962: PPUSH
84963: CALL_OW 302
84967: NOT
84968: PUSH
84969: LD_VAR 0 5
84973: PUSH
84974: LD_INT 1
84976: ARRAY
84977: PPUSH
84978: CALL_OW 255
84982: PUSH
84983: LD_VAR 0 1
84987: PPUSH
84988: CALL_OW 255
84992: NONEQUAL
84993: OR
84994: IFFALSE 85100
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
84996: LD_VAR 0 5
85000: PUSH
85001: LD_INT 1
85003: ARRAY
85004: PPUSH
85005: CALL_OW 305
85009: PUSH
85010: LD_VAR 0 5
85014: PUSH
85015: LD_INT 1
85017: ARRAY
85018: PPUSH
85019: CALL_OW 255
85023: PUSH
85024: LD_VAR 0 1
85028: PPUSH
85029: CALL_OW 255
85033: EQUAL
85034: AND
85035: IFFALSE 85059
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
85037: LD_VAR 0 5
85041: PUSH
85042: LD_INT 1
85044: ARRAY
85045: PPUSH
85046: LD_VAR 0 5
85050: PUSH
85051: LD_INT 2
85053: ARRAY
85054: PPUSH
85055: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
85059: LD_ADDR_EXP 127
85063: PUSH
85064: LD_EXP 127
85068: PPUSH
85069: LD_VAR 0 4
85073: PPUSH
85074: LD_EXP 127
85078: PUSH
85079: LD_VAR 0 4
85083: ARRAY
85084: PPUSH
85085: LD_VAR 0 3
85089: PPUSH
85090: CALL_OW 3
85094: PPUSH
85095: CALL_OW 1
85099: ST_TO_ADDR
// end ; end ;
85100: GO 84929
85102: POP
85103: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
85104: LD_VAR 0 1
85108: PPUSH
85109: LD_EXP 127
85113: PUSH
85114: LD_VAR 0 4
85118: ARRAY
85119: PUSH
85120: LD_INT 0
85122: PLUS
85123: PPUSH
85124: CALL_OW 505
// end ;
85128: LD_VAR 0 2
85132: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
85133: LD_INT 0
85135: PPUSH
85136: PPUSH
85137: PPUSH
85138: PPUSH
// if not hack in hackTanks then
85139: LD_VAR 0 1
85143: PUSH
85144: LD_EXP 126
85148: IN
85149: NOT
85150: IFFALSE 85154
// exit ;
85152: GO 85239
// index := GetElementIndex ( hackTanks , hack ) ;
85154: LD_ADDR_VAR 0 5
85158: PUSH
85159: LD_EXP 126
85163: PPUSH
85164: LD_VAR 0 1
85168: PPUSH
85169: CALL 30703 0 2
85173: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
85174: LD_ADDR_VAR 0 4
85178: PUSH
85179: DOUBLE
85180: LD_INT 1
85182: DEC
85183: ST_TO_ADDR
85184: LD_EXP 127
85188: PUSH
85189: LD_VAR 0 5
85193: ARRAY
85194: PUSH
85195: FOR_TO
85196: IFFALSE 85237
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
85198: LD_EXP 127
85202: PUSH
85203: LD_VAR 0 5
85207: ARRAY
85208: PUSH
85209: LD_VAR 0 4
85213: ARRAY
85214: PUSH
85215: LD_INT 1
85217: ARRAY
85218: PUSH
85219: LD_VAR 0 2
85223: EQUAL
85224: IFFALSE 85235
// KillUnit ( vehicle ) ;
85226: LD_VAR 0 2
85230: PPUSH
85231: CALL_OW 66
85235: GO 85195
85237: POP
85238: POP
// end ;
85239: LD_VAR 0 3
85243: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
85244: LD_EXP 131
85248: NOT
85249: IFFALSE 85284
85251: GO 85253
85253: DISABLE
// begin initMiner := true ;
85254: LD_ADDR_EXP 131
85258: PUSH
85259: LD_INT 1
85261: ST_TO_ADDR
// minersList := [ ] ;
85262: LD_ADDR_EXP 132
85266: PUSH
85267: EMPTY
85268: ST_TO_ADDR
// minerMinesList := [ ] ;
85269: LD_ADDR_EXP 133
85273: PUSH
85274: EMPTY
85275: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
85276: LD_ADDR_EXP 134
85280: PUSH
85281: LD_INT 5
85283: ST_TO_ADDR
// end ;
85284: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
85285: LD_EXP 131
85289: PUSH
85290: LD_INT 34
85292: PUSH
85293: LD_INT 81
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: PPUSH
85300: CALL_OW 69
85304: AND
85305: IFFALSE 85766
85307: GO 85309
85309: DISABLE
85310: LD_INT 0
85312: PPUSH
85313: PPUSH
85314: PPUSH
85315: PPUSH
// begin enable ;
85316: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
85317: LD_ADDR_VAR 0 1
85321: PUSH
85322: LD_INT 34
85324: PUSH
85325: LD_INT 81
85327: PUSH
85328: EMPTY
85329: LIST
85330: LIST
85331: PPUSH
85332: CALL_OW 69
85336: PUSH
85337: FOR_IN
85338: IFFALSE 85410
// begin if not i in minersList then
85340: LD_VAR 0 1
85344: PUSH
85345: LD_EXP 132
85349: IN
85350: NOT
85351: IFFALSE 85408
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
85353: LD_ADDR_EXP 132
85357: PUSH
85358: LD_EXP 132
85362: PPUSH
85363: LD_EXP 132
85367: PUSH
85368: LD_INT 1
85370: PLUS
85371: PPUSH
85372: LD_VAR 0 1
85376: PPUSH
85377: CALL_OW 1
85381: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
85382: LD_ADDR_EXP 133
85386: PUSH
85387: LD_EXP 133
85391: PPUSH
85392: LD_EXP 133
85396: PUSH
85397: LD_INT 1
85399: PLUS
85400: PPUSH
85401: EMPTY
85402: PPUSH
85403: CALL_OW 1
85407: ST_TO_ADDR
// end end ;
85408: GO 85337
85410: POP
85411: POP
// for i := minerMinesList downto 1 do
85412: LD_ADDR_VAR 0 1
85416: PUSH
85417: DOUBLE
85418: LD_EXP 133
85422: INC
85423: ST_TO_ADDR
85424: LD_INT 1
85426: PUSH
85427: FOR_DOWNTO
85428: IFFALSE 85764
// begin if IsLive ( minersList [ i ] ) then
85430: LD_EXP 132
85434: PUSH
85435: LD_VAR 0 1
85439: ARRAY
85440: PPUSH
85441: CALL_OW 300
85445: IFFALSE 85473
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
85447: LD_EXP 132
85451: PUSH
85452: LD_VAR 0 1
85456: ARRAY
85457: PPUSH
85458: LD_EXP 133
85462: PUSH
85463: LD_VAR 0 1
85467: ARRAY
85468: PPUSH
85469: CALL_OW 505
// if not minerMinesList [ i ] then
85473: LD_EXP 133
85477: PUSH
85478: LD_VAR 0 1
85482: ARRAY
85483: NOT
85484: IFFALSE 85488
// continue ;
85486: GO 85427
// for j := minerMinesList [ i ] downto 1 do
85488: LD_ADDR_VAR 0 2
85492: PUSH
85493: DOUBLE
85494: LD_EXP 133
85498: PUSH
85499: LD_VAR 0 1
85503: ARRAY
85504: INC
85505: ST_TO_ADDR
85506: LD_INT 1
85508: PUSH
85509: FOR_DOWNTO
85510: IFFALSE 85760
// begin side := GetSide ( minersList [ i ] ) ;
85512: LD_ADDR_VAR 0 3
85516: PUSH
85517: LD_EXP 132
85521: PUSH
85522: LD_VAR 0 1
85526: ARRAY
85527: PPUSH
85528: CALL_OW 255
85532: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
85533: LD_ADDR_VAR 0 4
85537: PUSH
85538: LD_EXP 133
85542: PUSH
85543: LD_VAR 0 1
85547: ARRAY
85548: PUSH
85549: LD_VAR 0 2
85553: ARRAY
85554: PUSH
85555: LD_INT 1
85557: ARRAY
85558: PPUSH
85559: LD_EXP 133
85563: PUSH
85564: LD_VAR 0 1
85568: ARRAY
85569: PUSH
85570: LD_VAR 0 2
85574: ARRAY
85575: PUSH
85576: LD_INT 2
85578: ARRAY
85579: PPUSH
85580: CALL_OW 428
85584: ST_TO_ADDR
// if not tmp then
85585: LD_VAR 0 4
85589: NOT
85590: IFFALSE 85594
// continue ;
85592: GO 85509
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
85594: LD_VAR 0 4
85598: PUSH
85599: LD_INT 81
85601: PUSH
85602: LD_VAR 0 3
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: PPUSH
85611: CALL_OW 69
85615: IN
85616: PUSH
85617: LD_EXP 133
85621: PUSH
85622: LD_VAR 0 1
85626: ARRAY
85627: PUSH
85628: LD_VAR 0 2
85632: ARRAY
85633: PUSH
85634: LD_INT 1
85636: ARRAY
85637: PPUSH
85638: LD_EXP 133
85642: PUSH
85643: LD_VAR 0 1
85647: ARRAY
85648: PUSH
85649: LD_VAR 0 2
85653: ARRAY
85654: PUSH
85655: LD_INT 2
85657: ARRAY
85658: PPUSH
85659: CALL_OW 458
85663: AND
85664: IFFALSE 85758
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
85666: LD_EXP 133
85670: PUSH
85671: LD_VAR 0 1
85675: ARRAY
85676: PUSH
85677: LD_VAR 0 2
85681: ARRAY
85682: PUSH
85683: LD_INT 1
85685: ARRAY
85686: PPUSH
85687: LD_EXP 133
85691: PUSH
85692: LD_VAR 0 1
85696: ARRAY
85697: PUSH
85698: LD_VAR 0 2
85702: ARRAY
85703: PUSH
85704: LD_INT 2
85706: ARRAY
85707: PPUSH
85708: LD_VAR 0 3
85712: PPUSH
85713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
85717: LD_ADDR_EXP 133
85721: PUSH
85722: LD_EXP 133
85726: PPUSH
85727: LD_VAR 0 1
85731: PPUSH
85732: LD_EXP 133
85736: PUSH
85737: LD_VAR 0 1
85741: ARRAY
85742: PPUSH
85743: LD_VAR 0 2
85747: PPUSH
85748: CALL_OW 3
85752: PPUSH
85753: CALL_OW 1
85757: ST_TO_ADDR
// end ; end ;
85758: GO 85509
85760: POP
85761: POP
// end ;
85762: GO 85427
85764: POP
85765: POP
// end ;
85766: PPOPN 4
85768: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
85769: LD_INT 0
85771: PPUSH
85772: PPUSH
// result := false ;
85773: LD_ADDR_VAR 0 4
85777: PUSH
85778: LD_INT 0
85780: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
85781: LD_VAR 0 1
85785: PPUSH
85786: CALL_OW 264
85790: PUSH
85791: LD_INT 81
85793: EQUAL
85794: NOT
85795: IFFALSE 85799
// exit ;
85797: GO 86039
// index := GetElementIndex ( minersList , unit ) ;
85799: LD_ADDR_VAR 0 5
85803: PUSH
85804: LD_EXP 132
85808: PPUSH
85809: LD_VAR 0 1
85813: PPUSH
85814: CALL 30703 0 2
85818: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
85819: LD_EXP 133
85823: PUSH
85824: LD_VAR 0 5
85828: ARRAY
85829: PUSH
85830: LD_EXP 134
85834: GREATEREQUAL
85835: IFFALSE 85839
// exit ;
85837: GO 86039
// ComMoveXY ( unit , x , y ) ;
85839: LD_VAR 0 1
85843: PPUSH
85844: LD_VAR 0 2
85848: PPUSH
85849: LD_VAR 0 3
85853: PPUSH
85854: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85858: LD_INT 35
85860: PPUSH
85861: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
85865: LD_VAR 0 1
85869: PPUSH
85870: LD_VAR 0 2
85874: PPUSH
85875: LD_VAR 0 3
85879: PPUSH
85880: CALL 62039 0 3
85884: NOT
85885: PUSH
85886: LD_VAR 0 1
85890: PPUSH
85891: CALL_OW 314
85895: AND
85896: IFFALSE 85900
// exit ;
85898: GO 86039
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
85900: LD_VAR 0 2
85904: PPUSH
85905: LD_VAR 0 3
85909: PPUSH
85910: CALL_OW 428
85914: PUSH
85915: LD_VAR 0 1
85919: EQUAL
85920: PUSH
85921: LD_VAR 0 1
85925: PPUSH
85926: CALL_OW 314
85930: NOT
85931: AND
85932: IFFALSE 85858
// PlaySoundXY ( x , y , PlantMine ) ;
85934: LD_VAR 0 2
85938: PPUSH
85939: LD_VAR 0 3
85943: PPUSH
85944: LD_STRING PlantMine
85946: PPUSH
85947: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
85951: LD_VAR 0 2
85955: PPUSH
85956: LD_VAR 0 3
85960: PPUSH
85961: LD_VAR 0 1
85965: PPUSH
85966: CALL_OW 255
85970: PPUSH
85971: LD_INT 0
85973: PPUSH
85974: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
85978: LD_ADDR_EXP 133
85982: PUSH
85983: LD_EXP 133
85987: PPUSH
85988: LD_VAR 0 5
85992: PUSH
85993: LD_EXP 133
85997: PUSH
85998: LD_VAR 0 5
86002: ARRAY
86003: PUSH
86004: LD_INT 1
86006: PLUS
86007: PUSH
86008: EMPTY
86009: LIST
86010: LIST
86011: PPUSH
86012: LD_VAR 0 2
86016: PUSH
86017: LD_VAR 0 3
86021: PUSH
86022: EMPTY
86023: LIST
86024: LIST
86025: PPUSH
86026: CALL 30918 0 3
86030: ST_TO_ADDR
// result := true ;
86031: LD_ADDR_VAR 0 4
86035: PUSH
86036: LD_INT 1
86038: ST_TO_ADDR
// end ;
86039: LD_VAR 0 4
86043: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
86044: LD_INT 0
86046: PPUSH
86047: PPUSH
86048: PPUSH
// if not unit in minersList then
86049: LD_VAR 0 1
86053: PUSH
86054: LD_EXP 132
86058: IN
86059: NOT
86060: IFFALSE 86064
// exit ;
86062: GO 86456
// index := GetElementIndex ( minersList , unit ) ;
86064: LD_ADDR_VAR 0 6
86068: PUSH
86069: LD_EXP 132
86073: PPUSH
86074: LD_VAR 0 1
86078: PPUSH
86079: CALL 30703 0 2
86083: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
86084: LD_ADDR_VAR 0 5
86088: PUSH
86089: DOUBLE
86090: LD_EXP 133
86094: PUSH
86095: LD_VAR 0 6
86099: ARRAY
86100: INC
86101: ST_TO_ADDR
86102: LD_INT 1
86104: PUSH
86105: FOR_DOWNTO
86106: IFFALSE 86267
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
86108: LD_EXP 133
86112: PUSH
86113: LD_VAR 0 6
86117: ARRAY
86118: PUSH
86119: LD_VAR 0 5
86123: ARRAY
86124: PUSH
86125: LD_INT 1
86127: ARRAY
86128: PUSH
86129: LD_VAR 0 2
86133: EQUAL
86134: PUSH
86135: LD_EXP 133
86139: PUSH
86140: LD_VAR 0 6
86144: ARRAY
86145: PUSH
86146: LD_VAR 0 5
86150: ARRAY
86151: PUSH
86152: LD_INT 2
86154: ARRAY
86155: PUSH
86156: LD_VAR 0 3
86160: EQUAL
86161: AND
86162: IFFALSE 86265
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86164: LD_EXP 133
86168: PUSH
86169: LD_VAR 0 6
86173: ARRAY
86174: PUSH
86175: LD_VAR 0 5
86179: ARRAY
86180: PUSH
86181: LD_INT 1
86183: ARRAY
86184: PPUSH
86185: LD_EXP 133
86189: PUSH
86190: LD_VAR 0 6
86194: ARRAY
86195: PUSH
86196: LD_VAR 0 5
86200: ARRAY
86201: PUSH
86202: LD_INT 2
86204: ARRAY
86205: PPUSH
86206: LD_VAR 0 1
86210: PPUSH
86211: CALL_OW 255
86215: PPUSH
86216: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86220: LD_ADDR_EXP 133
86224: PUSH
86225: LD_EXP 133
86229: PPUSH
86230: LD_VAR 0 6
86234: PPUSH
86235: LD_EXP 133
86239: PUSH
86240: LD_VAR 0 6
86244: ARRAY
86245: PPUSH
86246: LD_VAR 0 5
86250: PPUSH
86251: CALL_OW 3
86255: PPUSH
86256: CALL_OW 1
86260: ST_TO_ADDR
// exit ;
86261: POP
86262: POP
86263: GO 86456
// end ; end ;
86265: GO 86105
86267: POP
86268: POP
// for i := minerMinesList [ index ] downto 1 do
86269: LD_ADDR_VAR 0 5
86273: PUSH
86274: DOUBLE
86275: LD_EXP 133
86279: PUSH
86280: LD_VAR 0 6
86284: ARRAY
86285: INC
86286: ST_TO_ADDR
86287: LD_INT 1
86289: PUSH
86290: FOR_DOWNTO
86291: IFFALSE 86454
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
86293: LD_EXP 133
86297: PUSH
86298: LD_VAR 0 6
86302: ARRAY
86303: PUSH
86304: LD_VAR 0 5
86308: ARRAY
86309: PUSH
86310: LD_INT 1
86312: ARRAY
86313: PPUSH
86314: LD_EXP 133
86318: PUSH
86319: LD_VAR 0 6
86323: ARRAY
86324: PUSH
86325: LD_VAR 0 5
86329: ARRAY
86330: PUSH
86331: LD_INT 2
86333: ARRAY
86334: PPUSH
86335: LD_VAR 0 2
86339: PPUSH
86340: LD_VAR 0 3
86344: PPUSH
86345: CALL_OW 298
86349: PUSH
86350: LD_INT 6
86352: LESS
86353: IFFALSE 86452
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
86355: LD_EXP 133
86359: PUSH
86360: LD_VAR 0 6
86364: ARRAY
86365: PUSH
86366: LD_VAR 0 5
86370: ARRAY
86371: PUSH
86372: LD_INT 1
86374: ARRAY
86375: PPUSH
86376: LD_EXP 133
86380: PUSH
86381: LD_VAR 0 6
86385: ARRAY
86386: PUSH
86387: LD_VAR 0 5
86391: ARRAY
86392: PUSH
86393: LD_INT 2
86395: ARRAY
86396: PPUSH
86397: LD_VAR 0 1
86401: PPUSH
86402: CALL_OW 255
86406: PPUSH
86407: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
86411: LD_ADDR_EXP 133
86415: PUSH
86416: LD_EXP 133
86420: PPUSH
86421: LD_VAR 0 6
86425: PPUSH
86426: LD_EXP 133
86430: PUSH
86431: LD_VAR 0 6
86435: ARRAY
86436: PPUSH
86437: LD_VAR 0 5
86441: PPUSH
86442: CALL_OW 3
86446: PPUSH
86447: CALL_OW 1
86451: ST_TO_ADDR
// end ; end ;
86452: GO 86290
86454: POP
86455: POP
// end ;
86456: LD_VAR 0 4
86460: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
86461: LD_INT 0
86463: PPUSH
86464: PPUSH
86465: PPUSH
86466: PPUSH
86467: PPUSH
86468: PPUSH
86469: PPUSH
86470: PPUSH
86471: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
86472: LD_VAR 0 1
86476: PPUSH
86477: CALL_OW 264
86481: PUSH
86482: LD_INT 81
86484: EQUAL
86485: NOT
86486: PUSH
86487: LD_VAR 0 1
86491: PUSH
86492: LD_EXP 132
86496: IN
86497: NOT
86498: OR
86499: IFFALSE 86503
// exit ;
86501: GO 86825
// index := GetElementIndex ( minersList , unit ) ;
86503: LD_ADDR_VAR 0 6
86507: PUSH
86508: LD_EXP 132
86512: PPUSH
86513: LD_VAR 0 1
86517: PPUSH
86518: CALL 30703 0 2
86522: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
86523: LD_ADDR_VAR 0 8
86527: PUSH
86528: LD_EXP 134
86532: PUSH
86533: LD_EXP 133
86537: PUSH
86538: LD_VAR 0 6
86542: ARRAY
86543: MINUS
86544: ST_TO_ADDR
// if not minesFreeAmount then
86545: LD_VAR 0 8
86549: NOT
86550: IFFALSE 86554
// exit ;
86552: GO 86825
// tmp := [ ] ;
86554: LD_ADDR_VAR 0 7
86558: PUSH
86559: EMPTY
86560: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
86561: LD_ADDR_VAR 0 5
86565: PUSH
86566: DOUBLE
86567: LD_INT 1
86569: DEC
86570: ST_TO_ADDR
86571: LD_VAR 0 8
86575: PUSH
86576: FOR_TO
86577: IFFALSE 86772
// begin _d := rand ( 0 , 5 ) ;
86579: LD_ADDR_VAR 0 11
86583: PUSH
86584: LD_INT 0
86586: PPUSH
86587: LD_INT 5
86589: PPUSH
86590: CALL_OW 12
86594: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
86595: LD_ADDR_VAR 0 12
86599: PUSH
86600: LD_INT 2
86602: PPUSH
86603: LD_INT 6
86605: PPUSH
86606: CALL_OW 12
86610: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
86611: LD_ADDR_VAR 0 9
86615: PUSH
86616: LD_VAR 0 2
86620: PPUSH
86621: LD_VAR 0 11
86625: PPUSH
86626: LD_VAR 0 12
86630: PPUSH
86631: CALL_OW 272
86635: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
86636: LD_ADDR_VAR 0 10
86640: PUSH
86641: LD_VAR 0 3
86645: PPUSH
86646: LD_VAR 0 11
86650: PPUSH
86651: LD_VAR 0 12
86655: PPUSH
86656: CALL_OW 273
86660: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
86661: LD_VAR 0 9
86665: PPUSH
86666: LD_VAR 0 10
86670: PPUSH
86671: CALL_OW 488
86675: PUSH
86676: LD_VAR 0 9
86680: PUSH
86681: LD_VAR 0 10
86685: PUSH
86686: EMPTY
86687: LIST
86688: LIST
86689: PUSH
86690: LD_VAR 0 7
86694: IN
86695: NOT
86696: AND
86697: PUSH
86698: LD_VAR 0 9
86702: PPUSH
86703: LD_VAR 0 10
86707: PPUSH
86708: CALL_OW 458
86712: NOT
86713: AND
86714: IFFALSE 86756
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
86716: LD_ADDR_VAR 0 7
86720: PUSH
86721: LD_VAR 0 7
86725: PPUSH
86726: LD_VAR 0 7
86730: PUSH
86731: LD_INT 1
86733: PLUS
86734: PPUSH
86735: LD_VAR 0 9
86739: PUSH
86740: LD_VAR 0 10
86744: PUSH
86745: EMPTY
86746: LIST
86747: LIST
86748: PPUSH
86749: CALL_OW 1
86753: ST_TO_ADDR
86754: GO 86770
// i := i - 1 ;
86756: LD_ADDR_VAR 0 5
86760: PUSH
86761: LD_VAR 0 5
86765: PUSH
86766: LD_INT 1
86768: MINUS
86769: ST_TO_ADDR
// end ;
86770: GO 86576
86772: POP
86773: POP
// for i in tmp do
86774: LD_ADDR_VAR 0 5
86778: PUSH
86779: LD_VAR 0 7
86783: PUSH
86784: FOR_IN
86785: IFFALSE 86823
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
86787: LD_VAR 0 1
86791: PPUSH
86792: LD_VAR 0 5
86796: PUSH
86797: LD_INT 1
86799: ARRAY
86800: PPUSH
86801: LD_VAR 0 5
86805: PUSH
86806: LD_INT 2
86808: ARRAY
86809: PPUSH
86810: CALL 85769 0 3
86814: NOT
86815: IFFALSE 86821
// exit ;
86817: POP
86818: POP
86819: GO 86825
86821: GO 86784
86823: POP
86824: POP
// end ;
86825: LD_VAR 0 4
86829: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
86830: LD_INT 0
86832: PPUSH
86833: PPUSH
86834: PPUSH
86835: PPUSH
86836: PPUSH
86837: PPUSH
86838: PPUSH
// if not GetClass ( unit ) = class_sniper then
86839: LD_VAR 0 1
86843: PPUSH
86844: CALL_OW 257
86848: PUSH
86849: LD_INT 5
86851: EQUAL
86852: NOT
86853: IFFALSE 86857
// exit ;
86855: GO 87245
// dist := 8 ;
86857: LD_ADDR_VAR 0 5
86861: PUSH
86862: LD_INT 8
86864: ST_TO_ADDR
// viewRange := 12 ;
86865: LD_ADDR_VAR 0 7
86869: PUSH
86870: LD_INT 12
86872: ST_TO_ADDR
// side := GetSide ( unit ) ;
86873: LD_ADDR_VAR 0 6
86877: PUSH
86878: LD_VAR 0 1
86882: PPUSH
86883: CALL_OW 255
86887: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
86888: LD_INT 61
86890: PPUSH
86891: LD_VAR 0 6
86895: PPUSH
86896: CALL_OW 321
86900: PUSH
86901: LD_INT 2
86903: EQUAL
86904: IFFALSE 86914
// viewRange := 16 ;
86906: LD_ADDR_VAR 0 7
86910: PUSH
86911: LD_INT 16
86913: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
86914: LD_VAR 0 1
86918: PPUSH
86919: LD_VAR 0 2
86923: PPUSH
86924: LD_VAR 0 3
86928: PPUSH
86929: CALL_OW 297
86933: PUSH
86934: LD_VAR 0 5
86938: GREATER
86939: IFFALSE 87018
// begin ComMoveXY ( unit , x , y ) ;
86941: LD_VAR 0 1
86945: PPUSH
86946: LD_VAR 0 2
86950: PPUSH
86951: LD_VAR 0 3
86955: PPUSH
86956: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
86960: LD_INT 35
86962: PPUSH
86963: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
86967: LD_VAR 0 1
86971: PPUSH
86972: LD_VAR 0 2
86976: PPUSH
86977: LD_VAR 0 3
86981: PPUSH
86982: CALL 62039 0 3
86986: NOT
86987: IFFALSE 86991
// exit ;
86989: GO 87245
// until GetDistUnitXY ( unit , x , y ) < dist ;
86991: LD_VAR 0 1
86995: PPUSH
86996: LD_VAR 0 2
87000: PPUSH
87001: LD_VAR 0 3
87005: PPUSH
87006: CALL_OW 297
87010: PUSH
87011: LD_VAR 0 5
87015: LESS
87016: IFFALSE 86960
// end ; ComTurnXY ( unit , x , y ) ;
87018: LD_VAR 0 1
87022: PPUSH
87023: LD_VAR 0 2
87027: PPUSH
87028: LD_VAR 0 3
87032: PPUSH
87033: CALL_OW 118
// wait ( 5 ) ;
87037: LD_INT 5
87039: PPUSH
87040: CALL_OW 67
// _d := GetDir ( unit ) ;
87044: LD_ADDR_VAR 0 10
87048: PUSH
87049: LD_VAR 0 1
87053: PPUSH
87054: CALL_OW 254
87058: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
87059: LD_ADDR_VAR 0 8
87063: PUSH
87064: LD_VAR 0 1
87068: PPUSH
87069: CALL_OW 250
87073: PPUSH
87074: LD_VAR 0 10
87078: PPUSH
87079: LD_VAR 0 5
87083: PPUSH
87084: CALL_OW 272
87088: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
87089: LD_ADDR_VAR 0 9
87093: PUSH
87094: LD_VAR 0 1
87098: PPUSH
87099: CALL_OW 251
87103: PPUSH
87104: LD_VAR 0 10
87108: PPUSH
87109: LD_VAR 0 5
87113: PPUSH
87114: CALL_OW 273
87118: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87119: LD_VAR 0 8
87123: PPUSH
87124: LD_VAR 0 9
87128: PPUSH
87129: CALL_OW 488
87133: NOT
87134: IFFALSE 87138
// exit ;
87136: GO 87245
// ComAnimCustom ( unit , 1 ) ;
87138: LD_VAR 0 1
87142: PPUSH
87143: LD_INT 1
87145: PPUSH
87146: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
87150: LD_VAR 0 8
87154: PPUSH
87155: LD_VAR 0 9
87159: PPUSH
87160: LD_VAR 0 6
87164: PPUSH
87165: LD_VAR 0 7
87169: PPUSH
87170: CALL_OW 330
// repeat wait ( 1 ) ;
87174: LD_INT 1
87176: PPUSH
87177: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
87181: LD_VAR 0 1
87185: PPUSH
87186: CALL_OW 316
87190: PUSH
87191: LD_VAR 0 1
87195: PPUSH
87196: CALL_OW 314
87200: OR
87201: PUSH
87202: LD_VAR 0 1
87206: PPUSH
87207: CALL_OW 302
87211: NOT
87212: OR
87213: PUSH
87214: LD_VAR 0 1
87218: PPUSH
87219: CALL_OW 301
87223: OR
87224: IFFALSE 87174
// RemoveSeeing ( _x , _y , side ) ;
87226: LD_VAR 0 8
87230: PPUSH
87231: LD_VAR 0 9
87235: PPUSH
87236: LD_VAR 0 6
87240: PPUSH
87241: CALL_OW 331
// end ;
87245: LD_VAR 0 4
87249: RET
