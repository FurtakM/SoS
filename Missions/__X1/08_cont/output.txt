// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 20651 0 0
// PrepareRussian ;
  12: CALL 2026 0 0
// PrepareArabian ;
  16: CALL 446 0 0
// Action ;
  20: CALL 3806 0 0
// end ;
  24: END
// export debug , prefix ; export johnnySaved , hasVodka , hasNormalScene , hasExplosions , hasExplosionsInFactory , hasRevolver , hasStimDrugs , americanContact , hasSniperRifle , hasScout , hasMethanol , heikeSquad , entranceAllowedList , entranceVisitedList , isAlarm , hasGuardPatrolPlan , hasWeapons , heikeHasRevolver , explosionsTakenByRussians , adminAreaDiscovered , hasExplosionCollected , hasStimDrugsCollected , contactWithAmerican , laundryAllowed , heikeAsRussian , giviAsRussian , explosivePlantedList , hasMuchin , hasVirus , loseCounter , givenFood , knowWhereExplosivesAre , importantBuildingsList , activeExplosives , weatherBusy , blockPatrolThread , firstArmouryDialog , weaponsAmount , canEquipWeapons , giveSniperRifleToMike , ruKilledHex , meetWithMuchin , kaiaWeaponHidden ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// hasNormalScene := false ;
  36: LD_ADDR_EXP 5
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// prefix := 07_ ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_STRING 07_
  51: ST_TO_ADDR
// johnnySaved := LoadVariable ( 01_JohnnySaved , 0 ) ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_STRING 01_JohnnySaved
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL_OW 30
  67: ST_TO_ADDR
// hasVodka := false ;
  68: LD_ADDR_EXP 4
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// hasExplosionsInFactory := false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// hasStimDrugs := false ;
  84: LD_ADDR_EXP 9
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// hasExplosions := false ;
  92: LD_ADDR_EXP 6
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// americanContact := false ;
 100: LD_ADDR_EXP 10
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// hasWeapons := false ;
 108: LD_ADDR_EXP 19
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// hasSniperRifle := false ;
 116: LD_ADDR_EXP 11
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// hasScout := false ;
 124: LD_ADDR_EXP 12
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasMethanol := false ;
 132: LD_ADDR_EXP 13
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// heikeSquad := [ ] ;
 140: LD_ADDR_EXP 14
 144: PUSH
 145: EMPTY
 146: ST_TO_ADDR
// entranceAllowedList := FilterUnitsInArea ( entranceAllowedArea , [ f_type , unit_building ] ) ;
 147: LD_ADDR_EXP 15
 151: PUSH
 152: LD_INT 10
 154: PPUSH
 155: LD_INT 21
 157: PUSH
 158: LD_INT 3
 160: PUSH
 161: EMPTY
 162: LIST
 163: LIST
 164: PPUSH
 165: CALL_OW 70
 169: ST_TO_ADDR
// importantBuildingsList := FilterUnitsInArea ( importantBuildingsArea , [ f_type , unit_building ] ) ;
 170: LD_ADDR_EXP 35
 174: PUSH
 175: LD_INT 60
 177: PPUSH
 178: LD_INT 21
 180: PUSH
 181: LD_INT 3
 183: PUSH
 184: EMPTY
 185: LIST
 186: LIST
 187: PPUSH
 188: CALL_OW 70
 192: ST_TO_ADDR
// entranceVisitedList := [ ] ;
 193: LD_ADDR_EXP 16
 197: PUSH
 198: EMPTY
 199: ST_TO_ADDR
// isAlarm := false ;
 200: LD_ADDR_EXP 17
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hasGuardPatrolPlan := false ;
 208: LD_ADDR_EXP 18
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// hasRevolver := false ;
 216: LD_ADDR_EXP 8
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// heikeHasRevolver := false ;
 224: LD_ADDR_EXP 20
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// explosionsTakenByRussians := false ;
 232: LD_ADDR_EXP 21
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// adminAreaDiscovered := false ;
 240: LD_ADDR_EXP 22
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// hasExplosionCollected := false ;
 248: LD_ADDR_EXP 23
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// hasStimDrugsCollected := false ;
 256: LD_ADDR_EXP 24
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// contactWithAmerican := false ;
 264: LD_ADDR_EXP 25
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// laundryAllowed := false ;
 272: LD_ADDR_EXP 26
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// heikeAsRussian := false ;
 280: LD_ADDR_EXP 27
 284: PUSH
 285: LD_INT 0
 287: ST_TO_ADDR
// giviAsRussian := false ;
 288: LD_ADDR_EXP 28
 292: PUSH
 293: LD_INT 0
 295: ST_TO_ADDR
// hasMuchin := false ;
 296: LD_ADDR_EXP 30
 300: PUSH
 301: LD_INT 0
 303: ST_TO_ADDR
// hasVirus := false ;
 304: LD_ADDR_EXP 31
 308: PUSH
 309: LD_INT 0
 311: ST_TO_ADDR
// explosivePlantedList := [ ] ;
 312: LD_ADDR_EXP 29
 316: PUSH
 317: EMPTY
 318: ST_TO_ADDR
// loseCounter := 0 ;
 319: LD_ADDR_EXP 32
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// givenFood := false ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// knowWhereExplosivesAre := false ;
 335: LD_ADDR_EXP 34
 339: PUSH
 340: LD_INT 0
 342: ST_TO_ADDR
// activeExplosives := false ;
 343: LD_ADDR_EXP 36
 347: PUSH
 348: LD_INT 0
 350: ST_TO_ADDR
// weatherBusy := false ;
 351: LD_ADDR_EXP 37
 355: PUSH
 356: LD_INT 0
 358: ST_TO_ADDR
// blockPatrolThread := false ;
 359: LD_ADDR_EXP 38
 363: PUSH
 364: LD_INT 0
 366: ST_TO_ADDR
// firstArmouryDialog := false ;
 367: LD_ADDR_EXP 39
 371: PUSH
 372: LD_INT 0
 374: ST_TO_ADDR
// giveSniperRifleToMike := false ;
 375: LD_ADDR_EXP 42
 379: PUSH
 380: LD_INT 0
 382: ST_TO_ADDR
// weaponsAmount := [ 6 , 5 , 4 , 3 ] [ Difficulty ] ;
 383: LD_ADDR_EXP 40
 387: PUSH
 388: LD_INT 6
 390: PUSH
 391: LD_INT 5
 393: PUSH
 394: LD_INT 4
 396: PUSH
 397: LD_INT 3
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// canEquipWeapons := false ;
 412: LD_ADDR_EXP 41
 416: PUSH
 417: LD_INT 0
 419: ST_TO_ADDR
// ruKilledHex := [ ] ;
 420: LD_ADDR_EXP 43
 424: PUSH
 425: EMPTY
 426: ST_TO_ADDR
// kaiaWeaponHidden := 0 ;
 427: LD_ADDR_EXP 45
 431: PUSH
 432: LD_INT 0
 434: ST_TO_ADDR
// enable ( entranceEvent ) ;
 435: LD_INT 1
 437: ENABLE_MARKED
// disable ( gameStartEvent ) ;
 438: LD_INT 2
 440: DISABLE_MARKED
// end ; end_of_file
 441: LD_VAR 0 1
 445: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , heikeSecondSquad , americanSquad , Harris , Doug , Jerry ; export HeikeTmp , GiviTmp ; export function PrepareArabian ; var i ; begin
 446: LD_INT 0
 448: PPUSH
 449: PPUSH
// uc_side := 4 ;
 450: LD_ADDR_OWVAR 20
 454: PUSH
 455: LD_INT 4
 457: ST_TO_ADDR
// uc_nation := 1 ;
 458: LD_ADDR_OWVAR 21
 462: PUSH
 463: LD_INT 1
 465: ST_TO_ADDR
// americanSquad := CreateCharacterSet ( 07_Americans ) ;
 466: LD_ADDR_EXP 58
 470: PUSH
 471: LD_STRING 07_Americans
 473: PPUSH
 474: CALL_OW 31
 478: ST_TO_ADDR
// if americanSquad < 5 then
 479: LD_EXP 58
 483: PUSH
 484: LD_INT 5
 486: LESS
 487: IFFALSE 581
// begin if not americanSquad then
 489: LD_EXP 58
 493: NOT
 494: IFFALSE 503
// americanSquad := [ ] ;
 496: LD_ADDR_EXP 58
 500: PUSH
 501: EMPTY
 502: ST_TO_ADDR
// for i := americanSquad to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
 503: LD_ADDR_VAR 0 2
 507: PUSH
 508: DOUBLE
 509: LD_EXP 58
 513: DEC
 514: ST_TO_ADDR
 515: LD_INT 2
 517: PUSH
 518: LD_INT 3
 520: PUSH
 521: LD_INT 4
 523: PUSH
 524: LD_INT 4
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: PUSH
 539: FOR_TO
 540: IFFALSE 577
// begin PrepareHuman ( false , 2 , 6 ) ;
 542: LD_INT 0
 544: PPUSH
 545: LD_INT 2
 547: PPUSH
 548: LD_INT 6
 550: PPUSH
 551: CALL_OW 380
// americanSquad := Join ( americanSquad , CreateHuman ) ;
 555: LD_ADDR_EXP 58
 559: PUSH
 560: LD_EXP 58
 564: PPUSH
 565: CALL_OW 44
 569: PPUSH
 570: CALL 66999 0 2
 574: ST_TO_ADDR
// end ;
 575: GO 539
 577: POP
 578: POP
// end else
 579: GO 628
// for i := Count ( americanSquad ) downto 5 do
 581: LD_ADDR_VAR 0 2
 585: PUSH
 586: DOUBLE
 587: LD_EXP 58
 591: PPUSH
 592: CALL 31410 0 1
 596: INC
 597: ST_TO_ADDR
 598: LD_INT 5
 600: PUSH
 601: FOR_DOWNTO
 602: IFFALSE 626
// americanSquad := Delete ( americanSquad , i ) ;
 604: LD_ADDR_EXP 58
 608: PUSH
 609: LD_EXP 58
 613: PPUSH
 614: LD_VAR 0 2
 618: PPUSH
 619: CALL_OW 3
 623: ST_TO_ADDR
 624: GO 601
 626: POP
 627: POP
// Doug := PrepareUnit ( UsCommander , ( not debug ) , 07_ ) ;
 628: LD_ADDR_EXP 60
 632: PUSH
 633: LD_STRING UsCommander
 635: PPUSH
 636: LD_EXP 1
 640: NOT
 641: PPUSH
 642: LD_STRING 07_
 644: PPUSH
 645: CALL 29308 0 3
 649: ST_TO_ADDR
// PrepareSoldier ( sex_male , 6 ) ;
 650: LD_INT 1
 652: PPUSH
 653: LD_INT 6
 655: PPUSH
 656: CALL_OW 381
// Jerry := CreateHuman ;
 660: LD_ADDR_EXP 61
 664: PUSH
 665: CALL_OW 44
 669: ST_TO_ADDR
// SetClass ( Jerry , class_prison ) ;
 670: LD_EXP 61
 674: PPUSH
 675: LD_INT 33
 677: PPUSH
 678: CALL_OW 336
// if not Doug then
 682: LD_EXP 60
 686: NOT
 687: IFFALSE 709
// begin PrepareSoldier ( sex_male , 6 ) ;
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 6
 694: PPUSH
 695: CALL_OW 381
// Doug := CreateHuman ;
 699: LD_ADDR_EXP 60
 703: PUSH
 704: CALL_OW 44
 708: ST_TO_ADDR
// end ; SetClass ( Doug , class_prison ) ;
 709: LD_EXP 60
 713: PPUSH
 714: LD_INT 33
 716: PPUSH
 717: CALL_OW 336
// if johnnySaved or debug then
 721: LD_EXP 3
 725: PUSH
 726: LD_EXP 1
 730: OR
 731: IFFALSE 758
// begin Harris := NewCharacter ( Harris ) ;
 733: LD_ADDR_EXP 59
 737: PUSH
 738: LD_STRING Harris
 740: PPUSH
 741: CALL_OW 25
 745: ST_TO_ADDR
// SetClass ( Harris , class_prison ) ;
 746: LD_EXP 59
 750: PPUSH
 751: LD_INT 33
 753: PPUSH
 754: CALL_OW 336
// end ; uc_side := 2 ;
 758: LD_ADDR_OWVAR 20
 762: PUSH
 763: LD_INT 2
 765: ST_TO_ADDR
// uc_nation := 2 ;
 766: LD_ADDR_OWVAR 21
 770: PUSH
 771: LD_INT 2
 773: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 774: LD_ADDR_EXP 46
 778: PUSH
 779: LD_STRING Heike
 781: PPUSH
 782: LD_EXP 1
 786: NOT
 787: PPUSH
 788: LD_EXP 2
 792: PPUSH
 793: CALL 29308 0 3
 797: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 798: LD_ADDR_EXP 49
 802: PUSH
 803: LD_STRING Ibrahim
 805: PPUSH
 806: LD_EXP 1
 810: NOT
 811: PPUSH
 812: LD_EXP 2
 816: PPUSH
 817: CALL 29308 0 3
 821: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 822: LD_ADDR_EXP 47
 826: PUSH
 827: LD_STRING Givi
 829: PPUSH
 830: LD_EXP 1
 834: NOT
 835: PPUSH
 836: LD_EXP 2
 840: PPUSH
 841: CALL 29308 0 3
 845: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 846: LD_ADDR_EXP 50
 850: PUSH
 851: LD_STRING Kamil
 853: PPUSH
 854: LD_EXP 1
 858: NOT
 859: PPUSH
 860: LD_EXP 2
 864: PPUSH
 865: CALL 29308 0 3
 869: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 870: LD_ADDR_EXP 51
 874: PUSH
 875: LD_STRING Kaia
 877: PPUSH
 878: LD_EXP 1
 882: NOT
 883: PPUSH
 884: LD_EXP 2
 888: PPUSH
 889: CALL 29308 0 3
 893: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 894: LD_ADDR_EXP 52
 898: PUSH
 899: LD_STRING Sophia
 901: PPUSH
 902: LD_EXP 1
 906: NOT
 907: PPUSH
 908: LD_EXP 2
 912: PPUSH
 913: CALL 29308 0 3
 917: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 918: LD_ADDR_EXP 53
 922: PUSH
 923: LD_STRING Markov
 925: PPUSH
 926: LD_EXP 1
 930: NOT
 931: PPUSH
 932: LD_EXP 2
 936: PPUSH
 937: CALL 29308 0 3
 941: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 942: LD_ADDR_EXP 56
 946: PUSH
 947: LD_STRING Aviradze
 949: PPUSH
 950: LD_EXP 1
 954: NOT
 955: PPUSH
 956: LD_EXP 2
 960: PPUSH
 961: CALL 29308 0 3
 965: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 966: LD_ADDR_EXP 55
 970: PUSH
 971: LD_STRING Kurt
 973: PPUSH
 974: LD_EXP 1
 978: NOT
 979: PPUSH
 980: LD_EXP 2
 984: PPUSH
 985: CALL 29308 0 3
 989: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 990: LD_ADDR_EXP 48
 994: PUSH
 995: LD_STRING Mike
 997: PPUSH
 998: LD_EXP 1
1002: NOT
1003: PPUSH
1004: LD_EXP 2
1008: PPUSH
1009: CALL 29308 0 3
1013: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
1014: LD_ADDR_EXP 54
1018: PUSH
1019: LD_STRING Olaf
1021: PPUSH
1022: LD_EXP 1
1026: NOT
1027: PPUSH
1028: LD_EXP 2
1032: PPUSH
1033: CALL 29308 0 3
1037: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 07_others ) ;
1038: LD_ADDR_EXP 57
1042: PUSH
1043: LD_STRING 07_others
1045: PPUSH
1046: CALL_OW 31
1050: ST_TO_ADDR
// end ;
1051: LD_VAR 0 1
1055: RET
// export function PrepareGame ; var i ; begin
1056: LD_INT 0
1058: PPUSH
1059: PPUSH
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
1060: LD_EXP 46
1064: PPUSH
1065: LD_INT 23
1067: PPUSH
1068: CALL_OW 52
// if Givi then
1072: LD_EXP 47
1076: IFFALSE 1114
// begin SetSide ( Givi , 5 ) ;
1078: LD_EXP 47
1082: PPUSH
1083: LD_INT 5
1085: PPUSH
1086: CALL_OW 235
// PlaceUnitArea ( Givi , giviArea , false ) ;
1090: LD_EXP 47
1094: PPUSH
1095: LD_INT 9
1097: PPUSH
1098: LD_INT 0
1100: PPUSH
1101: CALL_OW 49
// ComHold ( Givi ) ;
1105: LD_EXP 47
1109: PPUSH
1110: CALL_OW 140
// end ; if Markov then
1114: LD_EXP 53
1118: IFFALSE 1156
// begin SetSide ( Markov , 5 ) ;
1120: LD_EXP 53
1124: PPUSH
1125: LD_INT 5
1127: PPUSH
1128: CALL_OW 235
// SetClass ( Markov , class_mechanic ) ;
1132: LD_EXP 53
1136: PPUSH
1137: LD_INT 3
1139: PPUSH
1140: CALL_OW 336
// PlaceHumanInUnit ( Markov , ruFac ) ;
1144: LD_EXP 53
1148: PPUSH
1149: LD_INT 61
1151: PPUSH
1152: CALL_OW 52
// end ; if Mike then
1156: LD_EXP 48
1160: IFFALSE 1198
// begin SetSide ( Mike , 5 ) ;
1162: LD_EXP 48
1166: PPUSH
1167: LD_INT 5
1169: PPUSH
1170: CALL_OW 235
// PlaceUnitArea ( Mike , mikeArea , false ) ;
1174: LD_EXP 48
1178: PPUSH
1179: LD_INT 17
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 49
// ComHold ( Mike ) ;
1189: LD_EXP 48
1193: PPUSH
1194: CALL_OW 140
// end ; if Olaf then
1198: LD_EXP 54
1202: IFFALSE 1243
// begin SetSide ( Olaf , 5 ) ;
1204: LD_EXP 54
1208: PPUSH
1209: LD_INT 5
1211: PPUSH
1212: CALL_OW 235
// PlaceUnitArea ( Olaf , olafArea , false ) ;
1216: LD_EXP 54
1220: PPUSH
1221: LD_INT 16
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 49
// ComLookAtDir ( Olaf , 3 ) ;
1231: LD_EXP 54
1235: PPUSH
1236: LD_INT 3
1238: PPUSH
1239: CALL 70151 0 2
// end ; if Kamil then
1243: LD_EXP 50
1247: IFFALSE 1273
// begin SetSide ( Kamil , 5 ) ;
1249: LD_EXP 50
1253: PPUSH
1254: LD_INT 5
1256: PPUSH
1257: CALL_OW 235
// PlaceHumanInUnit ( Kamil , ruBarKam ) ;
1261: LD_EXP 50
1265: PPUSH
1266: LD_INT 109
1268: PPUSH
1269: CALL_OW 52
// end ; if Kurt then
1273: LD_EXP 55
1277: IFFALSE 1303
// begin SetSide ( Kurt , 5 ) ;
1279: LD_EXP 55
1283: PPUSH
1284: LD_INT 5
1286: PPUSH
1287: CALL_OW 235
// PlaceHumanInUnit ( Kurt , ruOutpost1 ) ;
1291: LD_EXP 55
1295: PPUSH
1296: LD_INT 169
1298: PPUSH
1299: CALL_OW 52
// end ; if Kaia then
1303: LD_EXP 51
1307: IFFALSE 1333
// begin SetSide ( Kaia , 5 ) ;
1309: LD_EXP 51
1313: PPUSH
1314: LD_INT 5
1316: PPUSH
1317: CALL_OW 235
// PlaceHumanInUnit ( Kaia , ruKaiaBar ) ;
1321: LD_EXP 51
1325: PPUSH
1326: LD_INT 147
1328: PPUSH
1329: CALL_OW 52
// end ; if Sophia then
1333: LD_EXP 52
1337: IFFALSE 1378
// begin SetSide ( Sophia , 5 ) ;
1339: LD_EXP 52
1343: PPUSH
1344: LD_INT 5
1346: PPUSH
1347: CALL_OW 235
// PlaceUnitXY ( Sophia , 142 , 96 , false ) ;
1351: LD_EXP 52
1355: PPUSH
1356: LD_INT 142
1358: PPUSH
1359: LD_INT 96
1361: PPUSH
1362: LD_INT 0
1364: PPUSH
1365: CALL_OW 48
// ComHold ( Sophia ) ;
1369: LD_EXP 52
1373: PPUSH
1374: CALL_OW 140
// end ; if Harris then
1378: LD_EXP 59
1382: IFFALSE 1420
// begin SetSide ( Harris , 4 ) ;
1384: LD_EXP 59
1388: PPUSH
1389: LD_INT 4
1391: PPUSH
1392: CALL_OW 235
// PlaceUnitArea ( Harris , harrisArea , false ) ;
1396: LD_EXP 59
1400: PPUSH
1401: LD_INT 20
1403: PPUSH
1404: LD_INT 0
1406: PPUSH
1407: CALL_OW 49
// ComHold ( i ) ;
1411: LD_VAR 0 2
1415: PPUSH
1416: CALL_OW 140
// end ; if Doug then
1420: LD_EXP 60
1424: IFFALSE 1450
// begin SetSide ( Doug , 4 ) ;
1426: LD_EXP 60
1430: PPUSH
1431: LD_INT 4
1433: PPUSH
1434: CALL_OW 235
// PlaceHumanInUnit ( Doug , dougBar ) ;
1438: LD_EXP 60
1442: PPUSH
1443: LD_INT 106
1445: PPUSH
1446: CALL_OW 52
// end ; if Aviradze then
1450: LD_EXP 56
1454: IFFALSE 1480
// begin SetSide ( Aviradze , 5 ) ;
1456: LD_EXP 56
1460: PPUSH
1461: LD_INT 5
1463: PPUSH
1464: CALL_OW 235
// PlaceHumanInUnit ( Aviradze , ruLab ) ;
1468: LD_EXP 56
1472: PPUSH
1473: LD_INT 119
1475: PPUSH
1476: CALL_OW 52
// end ; if Ibrahim then
1480: LD_EXP 49
1484: IFFALSE 1510
// begin SetSide ( Ibrahim , 5 ) ;
1486: LD_EXP 49
1490: PPUSH
1491: LD_INT 5
1493: PPUSH
1494: CALL_OW 235
// PlaceHumanInUnit ( Ibrahim , ruLab ) ;
1498: LD_EXP 49
1502: PPUSH
1503: LD_INT 119
1505: PPUSH
1506: CALL_OW 52
// end ; if Jerry then
1510: LD_EXP 61
1514: IFFALSE 1555
// begin SetSide ( Jerry , 4 ) ;
1516: LD_EXP 61
1520: PPUSH
1521: LD_INT 4
1523: PPUSH
1524: CALL_OW 235
// PlaceUnitXY ( Jerry , 119 , 59 , false ) ;
1528: LD_EXP 61
1532: PPUSH
1533: LD_INT 119
1535: PPUSH
1536: LD_INT 59
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 48
// ComHold ( Jerry ) ;
1546: LD_EXP 61
1550: PPUSH
1551: CALL_OW 140
// end ; PlaceHumanInUnit ( ruCommisar , ruLab ) ;
1555: LD_EXP 65
1559: PPUSH
1560: LD_INT 119
1562: PPUSH
1563: CALL_OW 52
// for i in americanSquad do
1567: LD_ADDR_VAR 0 2
1571: PUSH
1572: LD_EXP 58
1576: PUSH
1577: FOR_IN
1578: IFFALSE 1606
// begin PlaceUnitArea ( i , americansRandomArea , false ) ;
1580: LD_VAR 0 2
1584: PPUSH
1585: LD_INT 21
1587: PPUSH
1588: LD_INT 0
1590: PPUSH
1591: CALL_OW 49
// ComHold ( i ) ;
1595: LD_VAR 0 2
1599: PPUSH
1600: CALL_OW 140
// end ;
1604: GO 1577
1606: POP
1607: POP
// for i in heikeSecondSquad do
1608: LD_ADDR_VAR 0 2
1612: PUSH
1613: LD_EXP 57
1617: PUSH
1618: FOR_IN
1619: IFFALSE 1659
// begin SetSide ( i , 5 ) ;
1621: LD_VAR 0 2
1625: PPUSH
1626: LD_INT 5
1628: PPUSH
1629: CALL_OW 235
// PlaceUnitArea ( i , arabiansRandomArea , false ) ;
1633: LD_VAR 0 2
1637: PPUSH
1638: LD_INT 22
1640: PPUSH
1641: LD_INT 0
1643: PPUSH
1644: CALL_OW 49
// ComHold ( i ) ;
1648: LD_VAR 0 2
1652: PPUSH
1653: CALL_OW 140
// end ;
1657: GO 1618
1659: POP
1660: POP
// if not hasVodka then
1661: LD_EXP 4
1665: NOT
1666: IFFALSE 1725
// for i in FilterAllUnits ( [ f_or , [ f_side , 2 ] , [ f_side , 5 ] ] ) do
1668: LD_ADDR_VAR 0 2
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 22
1678: PUSH
1679: LD_INT 2
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 5
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PPUSH
1701: CALL_OW 69
1705: PUSH
1706: FOR_IN
1707: IFFALSE 1723
// SetLives ( i , 500 ) ;
1709: LD_VAR 0 2
1713: PPUSH
1714: LD_INT 500
1716: PPUSH
1717: CALL_OW 234
1721: GO 1706
1723: POP
1724: POP
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
1725: LD_ADDR_VAR 0 2
1729: PUSH
1730: LD_INT 22
1732: PUSH
1733: LD_INT 4
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PPUSH
1740: CALL_OW 69
1744: PUSH
1745: FOR_IN
1746: IFFALSE 1762
// SetLives ( i , 500 ) ;
1748: LD_VAR 0 2
1752: PPUSH
1753: LD_INT 500
1755: PPUSH
1756: CALL_OW 234
1760: GO 1745
1762: POP
1763: POP
// end ;
1764: LD_VAR 0 1
1768: RET
// export function SetClassKaiaRevolver ; begin
1769: LD_INT 0
1771: PPUSH
// if not IsOk ( Kaia ) then
1772: LD_EXP 51
1776: PPUSH
1777: CALL_OW 302
1781: NOT
1782: IFFALSE 1786
// exit ;
1784: GO 1805
// SetClass ( Kaia , class_revolver ) ;
1786: LD_EXP 51
1790: PPUSH
1791: LD_INT 34
1793: PPUSH
1794: CALL_OW 336
// SetAchievement ( ACH_REVOLVER ) ;
1798: LD_STRING ACH_REVOLVER
1800: PPUSH
1801: CALL_OW 543
// end ;
1805: LD_VAR 0 1
1809: RET
// export function SpawnHeikeAsRussian ; begin
1810: LD_INT 0
1812: PPUSH
// RemoveUnit ( Heike ) ;
1813: LD_EXP 46
1817: PPUSH
1818: CALL_OW 64
// heikeTmp := Heike ;
1822: LD_ADDR_EXP 62
1826: PUSH
1827: LD_EXP 46
1831: ST_TO_ADDR
// uc_side := 2 ;
1832: LD_ADDR_OWVAR 20
1836: PUSH
1837: LD_INT 2
1839: ST_TO_ADDR
// Heike := NewCharacter ( HeikeRu ) ;
1840: LD_ADDR_EXP 46
1844: PUSH
1845: LD_STRING HeikeRu
1847: PPUSH
1848: CALL_OW 25
1852: ST_TO_ADDR
// CopySkills ( heikeTmp , Heike ) ;
1853: LD_EXP 62
1857: PPUSH
1858: LD_EXP 46
1862: PPUSH
1863: CALL_OW 510
// PlaceHumanInUnit ( Heike , laundry ) ;
1867: LD_EXP 46
1871: PPUSH
1872: LD_INT 165
1874: PPUSH
1875: CALL_OW 52
// SetClass ( Heike , class_soldier ) ;
1879: LD_EXP 46
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 336
// heikeAsRussian := true ;
1891: LD_ADDR_EXP 27
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
1899: LD_STRING M1-laundry-out
1901: PPUSH
1902: CALL_OW 604
// SetAchievement ( ACH_HEIKERU ) ;
1906: LD_STRING ACH_HEIKERU
1908: PPUSH
1909: CALL_OW 543
// end ;
1913: LD_VAR 0 1
1917: RET
// export function SpawnGiviAsRussian ; begin
1918: LD_INT 0
1920: PPUSH
// RemoveUnit ( Givi ) ;
1921: LD_EXP 47
1925: PPUSH
1926: CALL_OW 64
// giviTmp := Givi ;
1930: LD_ADDR_EXP 63
1934: PUSH
1935: LD_EXP 47
1939: ST_TO_ADDR
// uc_side := 2 ;
1940: LD_ADDR_OWVAR 20
1944: PUSH
1945: LD_INT 2
1947: ST_TO_ADDR
// Givi := NewCharacter ( GiviRu ) ;
1948: LD_ADDR_EXP 47
1952: PUSH
1953: LD_STRING GiviRu
1955: PPUSH
1956: CALL_OW 25
1960: ST_TO_ADDR
// CopySkills ( giviTmp , Givi ) ;
1961: LD_EXP 63
1965: PPUSH
1966: LD_EXP 47
1970: PPUSH
1971: CALL_OW 510
// PlaceHumanInUnit ( Givi , laundry ) ;
1975: LD_EXP 47
1979: PPUSH
1980: LD_INT 165
1982: PPUSH
1983: CALL_OW 52
// SetClass ( Givi , class_soldier ) ;
1987: LD_EXP 47
1991: PPUSH
1992: LD_INT 1
1994: PPUSH
1995: CALL_OW 336
// giviAsRussian := true ;
1999: LD_ADDR_EXP 28
2003: PUSH
2004: LD_INT 1
2006: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-laundry-out ) ;
2007: LD_STRING M1-laundry-out
2009: PPUSH
2010: CALL_OW 604
// SetAchievement ( ACH_GIVIRU ) ;
2014: LD_STRING ACH_GIVIRU
2016: PPUSH
2017: CALL_OW 543
// end ; end_of_file
2021: LD_VAR 0 1
2025: RET
// export russianKillers , ruCommisar , ruDisturb , ruMechanics , ruMechanics2 , Stiopa , Laura ; export function PrepareRussian ; var i , j , un , tmp ; begin
2026: LD_INT 0
2028: PPUSH
2029: PPUSH
2030: PPUSH
2031: PPUSH
2032: PPUSH
// uc_side := 3 ;
2033: LD_ADDR_OWVAR 20
2037: PUSH
2038: LD_INT 3
2040: ST_TO_ADDR
// uc_nation := 3 ;
2041: LD_ADDR_OWVAR 21
2045: PUSH
2046: LD_INT 3
2048: ST_TO_ADDR
// SetBName ( ruKitchen , kitchen ) ;
2049: LD_INT 192
2051: PPUSH
2052: LD_STRING kitchen
2054: PPUSH
2055: CALL_OW 500
// SetBName ( laundry , laundry ) ;
2059: LD_INT 165
2061: PPUSH
2062: LD_STRING laundry
2064: PPUSH
2065: CALL_OW 500
// SetBName ( ruOutpost3 , adminSection ) ;
2069: LD_INT 54
2071: PPUSH
2072: LD_STRING adminSection
2074: PPUSH
2075: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2079: LD_ADDR_VAR 0 2
2083: PUSH
2084: LD_INT 21
2086: PUSH
2087: LD_INT 3
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 69
2098: PUSH
2099: FOR_IN
2100: IFFALSE 2116
// SetBLevel ( i , 7 ) ;
2102: LD_VAR 0 2
2106: PPUSH
2107: LD_INT 7
2109: PPUSH
2110: CALL_OW 241
2114: GO 2099
2116: POP
2117: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_INT 22
2125: PUSH
2126: LD_INT 3
2128: PUSH
2129: EMPTY
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 2
2135: PUSH
2136: LD_INT 30
2138: PUSH
2139: LD_INT 0
2141: PUSH
2142: EMPTY
2143: LIST
2144: LIST
2145: PUSH
2146: LD_INT 30
2148: PUSH
2149: LD_INT 1
2151: PUSH
2152: EMPTY
2153: LIST
2154: LIST
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PPUSH
2165: CALL_OW 69
2169: PUSH
2170: FOR_IN
2171: IFFALSE 2235
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
2173: LD_VAR 0 2
2177: PPUSH
2178: CALL_OW 274
2182: PPUSH
2183: LD_INT 1
2185: PPUSH
2186: LD_INT 1000
2188: PPUSH
2189: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
2193: LD_VAR 0 2
2197: PPUSH
2198: CALL_OW 274
2202: PPUSH
2203: LD_INT 2
2205: PPUSH
2206: LD_INT 1000
2208: PPUSH
2209: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 100 ) ;
2213: LD_VAR 0 2
2217: PPUSH
2218: CALL_OW 274
2222: PPUSH
2223: LD_INT 3
2225: PPUSH
2226: LD_INT 100
2228: PPUSH
2229: CALL_OW 277
// end ;
2233: GO 2170
2235: POP
2236: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2237: LD_ADDR_VAR 0 2
2241: PUSH
2242: LD_INT 22
2244: PUSH
2245: LD_INT 3
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 30
2254: PUSH
2255: LD_INT 32
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: FOR_IN
2272: IFFALSE 2306
// begin PrepareSoldier ( false , 5 + Difficulty ) ;
2274: LD_INT 0
2276: PPUSH
2277: LD_INT 5
2279: PUSH
2280: LD_OWVAR 67
2284: PLUS
2285: PPUSH
2286: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2290: CALL_OW 44
2294: PPUSH
2295: LD_VAR 0 2
2299: PPUSH
2300: CALL_OW 52
// end ;
2304: GO 2271
2306: POP
2307: POP
// for i := 1 to 2 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: DOUBLE
2314: LD_INT 1
2316: DEC
2317: ST_TO_ADDR
2318: LD_INT 2
2320: PUSH
2321: FOR_TO
2322: IFFALSE 2374
// begin PrepareMechanic ( false , 8 ) ;
2324: LD_INT 0
2326: PPUSH
2327: LD_INT 8
2329: PPUSH
2330: CALL_OW 383
// ruMechanics := Join ( ruMechanics , CreateHuman ) ;
2334: LD_ADDR_EXP 67
2338: PUSH
2339: LD_EXP 67
2343: PPUSH
2344: CALL_OW 44
2348: PPUSH
2349: CALL 66999 0 2
2353: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ ruMechanics ] , ruFac ) ;
2354: LD_EXP 67
2358: PUSH
2359: LD_EXP 67
2363: ARRAY
2364: PPUSH
2365: LD_INT 61
2367: PPUSH
2368: CALL_OW 52
// end ;
2372: GO 2321
2374: POP
2375: POP
// PrepareMechanic ( sex_male , 8 ) ;
2376: LD_INT 1
2378: PPUSH
2379: LD_INT 8
2381: PPUSH
2382: CALL_OW 383
// ruMechanics2 := Join ( ruMechanics2 , CreateHuman ) ;
2386: LD_ADDR_EXP 68
2390: PUSH
2391: LD_EXP 68
2395: PPUSH
2396: CALL_OW 44
2400: PPUSH
2401: CALL 66999 0 2
2405: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics2 [ ruMechanics2 ] , ruWorkshop ) ;
2406: LD_EXP 68
2410: PUSH
2411: LD_EXP 68
2415: ARRAY
2416: PPUSH
2417: LD_INT 196
2419: PPUSH
2420: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2424: LD_INT 1
2426: PPUSH
2427: LD_INT 8
2429: PPUSH
2430: CALL_OW 383
// hc_name := Stiepan Simonov ;
2434: LD_ADDR_OWVAR 26
2438: PUSH
2439: LD_STRING Stiepan Simonov
2441: ST_TO_ADDR
// Stiopa := CreateHuman ;
2442: LD_ADDR_EXP 69
2446: PUSH
2447: CALL_OW 44
2451: ST_TO_ADDR
// PrepareMechanic ( sex_female , 8 ) ;
2452: LD_INT 2
2454: PPUSH
2455: LD_INT 8
2457: PPUSH
2458: CALL_OW 383
// hc_name := Laura Dragunov ;
2462: LD_ADDR_OWVAR 26
2466: PUSH
2467: LD_STRING Laura Dragunov
2469: ST_TO_ADDR
// Laura := CreateHuman ;
2470: LD_ADDR_EXP 70
2474: PUSH
2475: CALL_OW 44
2479: ST_TO_ADDR
// PlaceHumanInUnit ( Laura , ruWorkshop ) ;
2480: LD_EXP 70
2484: PPUSH
2485: LD_INT 196
2487: PPUSH
2488: CALL_OW 52
// PrepareMechanic ( sex_male , 8 ) ;
2492: LD_INT 1
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 383
// ruMechanics := Insert ( ruMechanics , 1 , CreateHuman ) ;
2502: LD_ADDR_EXP 67
2506: PUSH
2507: LD_EXP 67
2511: PPUSH
2512: LD_INT 1
2514: PPUSH
2515: CALL_OW 44
2519: PPUSH
2520: CALL_OW 2
2524: ST_TO_ADDR
// PlaceHumanInUnit ( ruMechanics [ 1 ] , ruFac ) ;
2525: LD_EXP 67
2529: PUSH
2530: LD_INT 1
2532: ARRAY
2533: PPUSH
2534: LD_INT 61
2536: PPUSH
2537: CALL_OW 52
// hc_sex := sex_male ;
2541: LD_ADDR_OWVAR 27
2545: PUSH
2546: LD_INT 1
2548: ST_TO_ADDR
// hc_name := Muchin ;
2549: LD_ADDR_OWVAR 26
2553: PUSH
2554: LD_STRING Muchin
2556: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2557: LD_ADDR_OWVAR 33
2561: PUSH
2562: LD_STRING SecondCharsGal
2564: ST_TO_ADDR
// hc_face_number := 87 ;
2565: LD_ADDR_OWVAR 34
2569: PUSH
2570: LD_INT 87
2572: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 2 , 6 ] ;
2573: LD_ADDR_OWVAR 31
2577: PUSH
2578: LD_INT 8
2580: PUSH
2581: LD_INT 2
2583: PUSH
2584: LD_INT 2
2586: PUSH
2587: LD_INT 6
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: ST_TO_ADDR
// hc_attr := [ 13 , 13 ] ;
2596: LD_ADDR_OWVAR 29
2600: PUSH
2601: LD_INT 13
2603: PUSH
2604: LD_INT 13
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: ST_TO_ADDR
// ruDisturb := CreateHuman ;
2611: LD_ADDR_EXP 66
2615: PUSH
2616: CALL_OW 44
2620: ST_TO_ADDR
// InitHC_All ( ) ;
2621: CALL_OW 584
// if Difficulty > 1 then
2625: LD_OWVAR 67
2629: PUSH
2630: LD_INT 1
2632: GREATER
2633: IFFALSE 2753
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty + 1 ] do
2635: LD_ADDR_VAR 0 2
2639: PUSH
2640: DOUBLE
2641: LD_INT 1
2643: DEC
2644: ST_TO_ADDR
2645: LD_INT 3
2647: PUSH
2648: LD_INT 4
2650: PUSH
2651: LD_INT 5
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: LIST
2658: PUSH
2659: LD_OWVAR 67
2663: PUSH
2664: LD_INT 1
2666: PLUS
2667: ARRAY
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2751
// begin PrepareSoldier ( false , [ 5 , 6 , 7 ] [ Difficulty + 1 ] ) ;
2672: LD_INT 0
2674: PPUSH
2675: LD_INT 5
2677: PUSH
2678: LD_INT 6
2680: PUSH
2681: LD_INT 7
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: LIST
2688: PUSH
2689: LD_OWVAR 67
2693: PUSH
2694: LD_INT 1
2696: PLUS
2697: ARRAY
2698: PPUSH
2699: CALL_OW 381
// un := CreateHuman ;
2703: LD_ADDR_VAR 0 4
2707: PUSH
2708: CALL_OW 44
2712: ST_TO_ADDR
// PlaceUnitArea ( un , [ westGroup1Area , westGroup2Area ] [ i mod 2 + 1 ] , false ) ;
2713: LD_VAR 0 4
2717: PPUSH
2718: LD_INT 62
2720: PUSH
2721: LD_INT 63
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: LD_VAR 0 2
2732: PUSH
2733: LD_INT 2
2735: MOD
2736: PUSH
2737: LD_INT 1
2739: PLUS
2740: ARRAY
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// end ;
2749: GO 2669
2751: POP
2752: POP
// end ; uc_side := 6 ;
2753: LD_ADDR_OWVAR 20
2757: PUSH
2758: LD_INT 6
2760: ST_TO_ADDR
// uc_nation := 3 ;
2761: LD_ADDR_OWVAR 21
2765: PUSH
2766: LD_INT 3
2768: ST_TO_ADDR
// tmp := [ ruBarSt1 , ruBarSt2 , ruBarSt3 , ruBarSt4 , ruBarSt5 ] ;
2769: LD_ADDR_VAR 0 5
2773: PUSH
2774: LD_INT 14
2776: PUSH
2777: LD_INT 15
2779: PUSH
2780: LD_INT 48
2782: PUSH
2783: LD_INT 24
2785: PUSH
2786: LD_INT 149
2788: PUSH
2789: EMPTY
2790: LIST
2791: LIST
2792: LIST
2793: LIST
2794: LIST
2795: ST_TO_ADDR
// for i in tmp do
2796: LD_ADDR_VAR 0 2
2800: PUSH
2801: LD_VAR 0 5
2805: PUSH
2806: FOR_IN
2807: IFFALSE 2855
// begin for j := 1 to 2 do
2809: LD_ADDR_VAR 0 3
2813: PUSH
2814: DOUBLE
2815: LD_INT 1
2817: DEC
2818: ST_TO_ADDR
2819: LD_INT 2
2821: PUSH
2822: FOR_TO
2823: IFFALSE 2851
// begin PrepareSoldier ( false , 7 ) ;
2825: LD_INT 0
2827: PPUSH
2828: LD_INT 7
2830: PPUSH
2831: CALL_OW 381
// PlaceHumanInUnit ( CreateHuman , i ) ;
2835: CALL_OW 44
2839: PPUSH
2840: LD_VAR 0 2
2844: PPUSH
2845: CALL_OW 52
// end ;
2849: GO 2822
2851: POP
2852: POP
// end ;
2853: GO 2806
2855: POP
2856: POP
// end ;
2857: LD_VAR 0 1
2861: RET
// export function PrepareDeadBodies ; var i , un , hexes ; begin
2862: LD_INT 0
2864: PPUSH
2865: PPUSH
2866: PPUSH
2867: PPUSH
// uc_side := 3 ;
2868: LD_ADDR_OWVAR 20
2872: PUSH
2873: LD_INT 3
2875: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
2876: LD_ADDR_OWVAR 21
2880: PUSH
2881: LD_INT 1
2883: PPUSH
2884: LD_INT 3
2886: PPUSH
2887: CALL_OW 12
2891: ST_TO_ADDR
// hexes := AreaToList ( deadArea , 0 ) ;
2892: LD_ADDR_VAR 0 4
2896: PUSH
2897: LD_INT 5
2899: PPUSH
2900: LD_INT 0
2902: PPUSH
2903: CALL_OW 517
2907: ST_TO_ADDR
// for i := 1 to 3 do
2908: LD_ADDR_VAR 0 2
2912: PUSH
2913: DOUBLE
2914: LD_INT 1
2916: DEC
2917: ST_TO_ADDR
2918: LD_INT 3
2920: PUSH
2921: FOR_TO
2922: IFFALSE 2991
// begin PrepareHuman ( false , 33 , 0 ) ;
2924: LD_INT 0
2926: PPUSH
2927: LD_INT 33
2929: PPUSH
2930: LD_INT 0
2932: PPUSH
2933: CALL_OW 380
// un := CreateHuman ;
2937: LD_ADDR_VAR 0 3
2941: PUSH
2942: CALL_OW 44
2946: ST_TO_ADDR
// Create_ColdMeat ( un , hexes [ 1 ] [ i ] , hexes [ 2 ] [ i ] , true ) ;
2947: LD_VAR 0 3
2951: PPUSH
2952: LD_VAR 0 4
2956: PUSH
2957: LD_INT 1
2959: ARRAY
2960: PUSH
2961: LD_VAR 0 2
2965: ARRAY
2966: PPUSH
2967: LD_VAR 0 4
2971: PUSH
2972: LD_INT 2
2974: ARRAY
2975: PUSH
2976: LD_VAR 0 2
2980: ARRAY
2981: PPUSH
2982: LD_INT 1
2984: PPUSH
2985: CALL_OW 601
// end ;
2989: GO 2921
2991: POP
2992: POP
// end ;
2993: LD_VAR 0 1
2997: RET
// export function PrepareFirstScene ; var i , un ; begin
2998: LD_INT 0
3000: PPUSH
3001: PPUSH
3002: PPUSH
// uc_side := 4 ;
3003: LD_ADDR_OWVAR 20
3007: PUSH
3008: LD_INT 4
3010: ST_TO_ADDR
// uc_nation := 1 ;
3011: LD_ADDR_OWVAR 21
3015: PUSH
3016: LD_INT 1
3018: ST_TO_ADDR
// PrepareHuman ( false , 33 , 0 ) ;
3019: LD_INT 0
3021: PPUSH
3022: LD_INT 33
3024: PPUSH
3025: LD_INT 0
3027: PPUSH
3028: CALL_OW 380
// for i := 1 to 2 do
3032: LD_ADDR_VAR 0 2
3036: PUSH
3037: DOUBLE
3038: LD_INT 1
3040: DEC
3041: ST_TO_ADDR
3042: LD_INT 2
3044: PUSH
3045: FOR_TO
3046: IFFALSE 3111
// begin un := CreateHuman ;
3048: LD_ADDR_VAR 0 3
3052: PUSH
3053: CALL_OW 44
3057: ST_TO_ADDR
// SetDir ( un , 1 ) ;
3058: LD_VAR 0 3
3062: PPUSH
3063: LD_INT 1
3065: PPUSH
3066: CALL_OW 233
// PlaceUnitArea ( un , killArea , false ) ;
3070: LD_VAR 0 3
3074: PPUSH
3075: LD_INT 6
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// ComLookAtDir ( un , 1 ) ;
3085: LD_VAR 0 3
3089: PPUSH
3090: LD_INT 1
3092: PPUSH
3093: CALL 70151 0 2
// SetLives ( un , 300 ) ;
3097: LD_VAR 0 3
3101: PPUSH
3102: LD_INT 300
3104: PPUSH
3105: CALL_OW 234
// end ;
3109: GO 3045
3111: POP
3112: POP
// uc_side := 3 ;
3113: LD_ADDR_OWVAR 20
3117: PUSH
3118: LD_INT 3
3120: ST_TO_ADDR
// uc_nation := 3 ;
3121: LD_ADDR_OWVAR 21
3125: PUSH
3126: LD_INT 3
3128: ST_TO_ADDR
// PrepareSoldier ( sex_male , 5 ) ;
3129: LD_INT 1
3131: PPUSH
3132: LD_INT 5
3134: PPUSH
3135: CALL_OW 381
// for i := 1 to 3 do
3139: LD_ADDR_VAR 0 2
3143: PUSH
3144: DOUBLE
3145: LD_INT 1
3147: DEC
3148: ST_TO_ADDR
3149: LD_INT 3
3151: PUSH
3152: FOR_TO
3153: IFFALSE 3226
// begin un := CreateHuman ;
3155: LD_ADDR_VAR 0 3
3159: PUSH
3160: CALL_OW 44
3164: ST_TO_ADDR
// russianKillers := Join ( russianKillers , un ) ;
3165: LD_ADDR_EXP 64
3169: PUSH
3170: LD_EXP 64
3174: PPUSH
3175: LD_VAR 0 3
3179: PPUSH
3180: CALL 66999 0 2
3184: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3185: LD_VAR 0 3
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: CALL_OW 233
// PlaceUnitArea ( un , killGuardArea , false ) ;
3197: LD_VAR 0 3
3201: PPUSH
3202: LD_INT 7
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: CALL_OW 49
// ComLookAtDir ( un , 4 ) ;
3212: LD_VAR 0 3
3216: PPUSH
3217: LD_INT 4
3219: PPUSH
3220: CALL 70151 0 2
// end ;
3224: GO 3152
3226: POP
3227: POP
// ruCommisar := CreateHuman ;
3228: LD_ADDR_EXP 65
3232: PUSH
3233: CALL_OW 44
3237: ST_TO_ADDR
// PlaceUnitXY ( ruCommisar , 124 , 37 , false ) ;
3238: LD_EXP 65
3242: PPUSH
3243: LD_INT 124
3245: PPUSH
3246: LD_INT 37
3248: PPUSH
3249: LD_INT 0
3251: PPUSH
3252: CALL_OW 48
// SetDir ( ruCommisar , 3 ) ;
3256: LD_EXP 65
3260: PPUSH
3261: LD_INT 3
3263: PPUSH
3264: CALL_OW 233
// ComLookAtDir ( ruCommisar , 3 ) ;
3268: LD_EXP 65
3272: PPUSH
3273: LD_INT 3
3275: PPUSH
3276: CALL 70151 0 2
// end ;
3280: LD_VAR 0 1
3284: RET
// export ruPatrol ; export function InitRuPatrols ; var i , un , spawn ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// uc_side := 6 ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_INT 6
3298: ST_TO_ADDR
// uc_nation := 3 ;
3299: LD_ADDR_OWVAR 21
3303: PUSH
3304: LD_INT 3
3306: ST_TO_ADDR
// ruPatrol := [ ] ;
3307: LD_ADDR_EXP 71
3311: PUSH
3312: EMPTY
3313: ST_TO_ADDR
// spawn := [ g11 , g21 , g31 , g41 ] ;
3314: LD_ADDR_VAR 0 4
3318: PUSH
3319: LD_INT 26
3321: PUSH
3322: LD_INT 30
3324: PUSH
3325: LD_INT 39
3327: PUSH
3328: LD_INT 43
3330: PUSH
3331: EMPTY
3332: LIST
3333: LIST
3334: LIST
3335: LIST
3336: ST_TO_ADDR
// for i := 1 to spawn do
3337: LD_ADDR_VAR 0 2
3341: PUSH
3342: DOUBLE
3343: LD_INT 1
3345: DEC
3346: ST_TO_ADDR
3347: LD_VAR 0 4
3351: PUSH
3352: FOR_TO
3353: IFFALSE 3464
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3355: LD_INT 0
3357: PPUSH
3358: LD_INT 4
3360: PUSH
3361: LD_INT 5
3363: PUSH
3364: LD_INT 6
3366: PUSH
3367: LD_INT 7
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: PUSH
3376: LD_OWVAR 67
3380: ARRAY
3381: PPUSH
3382: CALL_OW 381
// un := CreateHuman ;
3386: LD_ADDR_VAR 0 3
3390: PUSH
3391: CALL_OW 44
3395: ST_TO_ADDR
// SetTag ( un , i ) ;
3396: LD_VAR 0 3
3400: PPUSH
3401: LD_VAR 0 2
3405: PPUSH
3406: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3410: LD_ADDR_EXP 71
3414: PUSH
3415: LD_EXP 71
3419: PPUSH
3420: LD_VAR 0 3
3424: PPUSH
3425: CALL 66999 0 2
3429: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3430: LD_VAR 0 3
3434: PPUSH
3435: LD_VAR 0 4
3439: PUSH
3440: LD_VAR 0 2
3444: ARRAY
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 49
// ComHold ( un ) ;
3453: LD_VAR 0 3
3457: PPUSH
3458: CALL_OW 140
// end ;
3462: GO 3352
3464: POP
3465: POP
// spawn := [ s11 , s21 , s31 , s41 , s51 , s61 ] ;
3466: LD_ADDR_VAR 0 4
3470: PUSH
3471: LD_INT 48
3473: PUSH
3474: LD_INT 49
3476: PUSH
3477: LD_INT 50
3479: PUSH
3480: LD_INT 51
3482: PUSH
3483: LD_INT 52
3485: PUSH
3486: LD_INT 53
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: LIST
3493: LIST
3494: LIST
3495: LIST
3496: ST_TO_ADDR
// for i := 1 to spawn do
3497: LD_ADDR_VAR 0 2
3501: PUSH
3502: DOUBLE
3503: LD_INT 1
3505: DEC
3506: ST_TO_ADDR
3507: LD_VAR 0 4
3511: PUSH
3512: FOR_TO
3513: IFFALSE 3622
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3515: LD_INT 0
3517: PPUSH
3518: LD_INT 4
3520: PUSH
3521: LD_INT 5
3523: PUSH
3524: LD_INT 6
3526: PUSH
3527: LD_INT 7
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: PUSH
3536: LD_OWVAR 67
3540: ARRAY
3541: PPUSH
3542: CALL_OW 381
// un := CreateHuman ;
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: CALL_OW 44
3555: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3556: LD_VAR 0 3
3560: PPUSH
3561: LD_INT 0
3563: PPUSH
3564: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3568: LD_ADDR_EXP 71
3572: PUSH
3573: LD_EXP 71
3577: PPUSH
3578: LD_VAR 0 3
3582: PPUSH
3583: CALL 66999 0 2
3587: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3588: LD_VAR 0 3
3592: PPUSH
3593: LD_VAR 0 4
3597: PUSH
3598: LD_VAR 0 2
3602: ARRAY
3603: PPUSH
3604: LD_INT 0
3606: PPUSH
3607: CALL_OW 49
// ComHold ( un ) ;
3611: LD_VAR 0 3
3615: PPUSH
3616: CALL_OW 140
// end ;
3620: GO 3512
3622: POP
3623: POP
// end ;
3624: LD_VAR 0 1
3628: RET
// export function SpawnAdditionalRuGuards ; var i , un , spawn ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
3634: PPUSH
// uc_side := 6 ;
3635: LD_ADDR_OWVAR 20
3639: PUSH
3640: LD_INT 6
3642: ST_TO_ADDR
// uc_nation := nation_russian ;
3643: LD_ADDR_OWVAR 21
3647: PUSH
3648: LD_INT 3
3650: ST_TO_ADDR
// spawn := [ s71 , s81 , s91 , s101 ] ;
3651: LD_ADDR_VAR 0 4
3655: PUSH
3656: LD_INT 54
3658: PUSH
3659: LD_INT 55
3661: PUSH
3662: LD_INT 56
3664: PUSH
3665: LD_INT 57
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: ST_TO_ADDR
// for i := 1 to spawn do
3674: LD_ADDR_VAR 0 2
3678: PUSH
3679: DOUBLE
3680: LD_INT 1
3682: DEC
3683: ST_TO_ADDR
3684: LD_VAR 0 4
3688: PUSH
3689: FOR_TO
3690: IFFALSE 3799
// begin PrepareSoldier ( false , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 4
3697: PUSH
3698: LD_INT 5
3700: PUSH
3701: LD_INT 6
3703: PUSH
3704: LD_INT 7
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: LD_OWVAR 67
3717: ARRAY
3718: PPUSH
3719: CALL_OW 381
// un := CreateHuman ;
3723: LD_ADDR_VAR 0 3
3727: PUSH
3728: CALL_OW 44
3732: ST_TO_ADDR
// SetTag ( un , 0 ) ;
3733: LD_VAR 0 3
3737: PPUSH
3738: LD_INT 0
3740: PPUSH
3741: CALL_OW 109
// ruPatrol := Join ( ruPatrol , un ) ;
3745: LD_ADDR_EXP 71
3749: PUSH
3750: LD_EXP 71
3754: PPUSH
3755: LD_VAR 0 3
3759: PPUSH
3760: CALL 66999 0 2
3764: ST_TO_ADDR
// PlaceUnitArea ( un , spawn [ i ] , false ) ;
3765: LD_VAR 0 3
3769: PPUSH
3770: LD_VAR 0 4
3774: PUSH
3775: LD_VAR 0 2
3779: ARRAY
3780: PPUSH
3781: LD_INT 0
3783: PPUSH
3784: CALL_OW 49
// ComHold ( un ) ;
3788: LD_VAR 0 3
3792: PPUSH
3793: CALL_OW 140
// end ;
3797: GO 3689
3799: POP
3800: POP
// end ; end_of_file
3801: LD_VAR 0 1
3805: RET
// export function Action ; var speaker , i , tmp ; begin
3806: LD_INT 0
3808: PPUSH
3809: PPUSH
3810: PPUSH
3811: PPUSH
// Video ( true ) ;
3812: LD_INT 1
3814: PPUSH
3815: CALL 66971 0 1
// hasNormalScene := Kaia or Givi ;
3819: LD_ADDR_EXP 5
3823: PUSH
3824: LD_EXP 51
3828: PUSH
3829: LD_EXP 47
3833: OR
3834: ST_TO_ADDR
// if hasNormalScene then
3835: LD_EXP 5
3839: IFFALSE 4080
// begin for i in americanSquad do
3841: LD_ADDR_VAR 0 3
3845: PUSH
3846: LD_EXP 58
3850: PUSH
3851: FOR_IN
3852: IFFALSE 3898
// begin SetClass ( i , class_prison ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 33
3861: PPUSH
3862: CALL_OW 336
// PlaceUnitXYR ( i , 78 , 16 , 5 , false ) ;
3866: LD_VAR 0 3
3870: PPUSH
3871: LD_INT 78
3873: PPUSH
3874: LD_INT 16
3876: PPUSH
3877: LD_INT 5
3879: PPUSH
3880: LD_INT 0
3882: PPUSH
3883: CALL_OW 50
// ComHold ( i ) ;
3887: LD_VAR 0 3
3891: PPUSH
3892: CALL_OW 140
// end ;
3896: GO 3851
3898: POP
3899: POP
// tmp := [ Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Givi , Aviradze ] union heikeSecondSquad ;
3900: LD_ADDR_VAR 0 4
3904: PUSH
3905: LD_EXP 48
3909: PUSH
3910: LD_EXP 49
3914: PUSH
3915: LD_EXP 50
3919: PUSH
3920: LD_EXP 51
3924: PUSH
3925: LD_EXP 52
3929: PUSH
3930: LD_EXP 53
3934: PUSH
3935: LD_EXP 54
3939: PUSH
3940: LD_EXP 55
3944: PUSH
3945: LD_EXP 47
3949: PUSH
3950: LD_EXP 56
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: LIST
3965: LIST
3966: PUSH
3967: LD_EXP 57
3971: UNION
3972: ST_TO_ADDR
// SetClass ( Heike , class_prison ) ;
3973: LD_EXP 46
3977: PPUSH
3978: LD_INT 33
3980: PPUSH
3981: CALL_OW 336
// PlaceUnitXYD ( Heike , 117 , 24 , 3 , false ) ;
3985: LD_EXP 46
3989: PPUSH
3990: LD_INT 117
3992: PPUSH
3993: LD_INT 24
3995: PPUSH
3996: LD_INT 3
3998: PPUSH
3999: LD_INT 0
4001: PPUSH
4002: CALL 69139 0 5
// ComTurnXY ( Heike , 123 , 39 ) ;
4006: LD_EXP 46
4010: PPUSH
4011: LD_INT 123
4013: PPUSH
4014: LD_INT 39
4016: PPUSH
4017: CALL_OW 118
// for i in tmp do
4021: LD_ADDR_VAR 0 3
4025: PUSH
4026: LD_VAR 0 4
4030: PUSH
4031: FOR_IN
4032: IFFALSE 4078
// begin SetClass ( i , class_prison ) ;
4034: LD_VAR 0 3
4038: PPUSH
4039: LD_INT 33
4041: PPUSH
4042: CALL_OW 336
// PlaceUnitArea ( i , arSpawnArea1 , false ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_INT 3
4053: PPUSH
4054: LD_INT 0
4056: PPUSH
4057: CALL_OW 49
// ComTurnXY ( i , 113 , 16 ) ;
4061: LD_VAR 0 3
4065: PPUSH
4066: LD_INT 113
4068: PPUSH
4069: LD_INT 16
4071: PPUSH
4072: CALL_OW 118
// end ;
4076: GO 4031
4078: POP
4079: POP
// end ; CenterNowOnXY ( 124 , 39 ) ;
4080: LD_INT 124
4082: PPUSH
4083: LD_INT 39
4085: PPUSH
4086: CALL_OW 86
// PrepareDeadBodies ;
4090: CALL 2862 0 0
// PrepareFirstScene ;
4094: CALL 2998 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
4098: LD_INT 152
4100: PPUSH
4101: LD_INT 65
4103: PPUSH
4104: LD_INT 2
4106: PPUSH
4107: LD_INT 70
4109: NEG
4110: PPUSH
4111: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
4115: LD_INT 152
4117: PPUSH
4118: LD_INT 65
4120: PPUSH
4121: LD_INT 2
4123: PPUSH
4124: CALL_OW 331
// PlaceSeeing ( 122 , 40 , 2 , - 8 ) ;
4128: LD_INT 122
4130: PPUSH
4131: LD_INT 40
4133: PPUSH
4134: LD_INT 2
4136: PPUSH
4137: LD_INT 8
4139: NEG
4140: PPUSH
4141: CALL_OW 330
// CenterNowOnXY ( 124 , 37 ) ;
4145: LD_INT 124
4147: PPUSH
4148: LD_INT 37
4150: PPUSH
4151: CALL_OW 86
// Say ( ruCommisar , DRum-Execution-1 ) ;
4155: LD_EXP 65
4159: PPUSH
4160: LD_STRING DRum-Execution-1
4162: PPUSH
4163: CALL_OW 88
// Say ( ruCommisar , DRum-Execution-2 ) ;
4167: LD_EXP 65
4171: PPUSH
4172: LD_STRING DRum-Execution-2
4174: PPUSH
4175: CALL_OW 88
// wait ( 0 0$01 ) ;
4179: LD_INT 35
4181: PPUSH
4182: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-3 ) ;
4186: LD_EXP 65
4190: PPUSH
4191: LD_STRING DRum-Execution-3
4193: PPUSH
4194: CALL_OW 88
// wait ( 0 0$1 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// Say ( ruCommisar , DRum-Execution-4 ) ;
4205: LD_EXP 65
4209: PPUSH
4210: LD_STRING DRum-Execution-4
4212: PPUSH
4213: CALL_OW 88
// ComAttackUnit ( russianKillers [ 1 ] , HexInfo ( 122 , 39 ) ) ;
4217: LD_EXP 64
4221: PUSH
4222: LD_INT 1
4224: ARRAY
4225: PPUSH
4226: LD_INT 122
4228: PPUSH
4229: LD_INT 39
4231: PPUSH
4232: CALL_OW 428
4236: PPUSH
4237: CALL_OW 115
// ComAttackUnit ( russianKillers [ 2 ] , HexInfo ( 123 , 41 ) ) ;
4241: LD_EXP 64
4245: PUSH
4246: LD_INT 2
4248: ARRAY
4249: PPUSH
4250: LD_INT 123
4252: PPUSH
4253: LD_INT 41
4255: PPUSH
4256: CALL_OW 428
4260: PPUSH
4261: CALL_OW 115
// AddComHold ( russianKillers ) ;
4265: LD_EXP 64
4269: PPUSH
4270: CALL_OW 200
// wait ( 0 0$1 ) ;
4274: LD_INT 35
4276: PPUSH
4277: CALL_OW 67
// RemoveSeeing ( 122 , 40 , 2 ) ;
4281: LD_INT 122
4283: PPUSH
4284: LD_INT 40
4286: PPUSH
4287: LD_INT 2
4289: PPUSH
4290: CALL_OW 331
// for i in russianKillers union ruCommisar do
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: LD_EXP 64
4303: PUSH
4304: LD_EXP 65
4308: UNION
4309: PUSH
4310: FOR_IN
4311: IFFALSE 4324
// RemoveUnit ( i ) ;
4313: LD_VAR 0 3
4317: PPUSH
4318: CALL_OW 64
4322: GO 4310
4324: POP
4325: POP
// if hasNormalScene then
4326: LD_EXP 5
4330: IFFALSE 4338
// ActionNormal else
4332: CALL 4347 0 0
4336: GO 4342
// ActionAdditional ;
4338: CALL 6165 0 0
// end ;
4342: LD_VAR 0 1
4346: RET
// function ActionNormal ; var i , tmp ; begin
4347: LD_INT 0
4349: PPUSH
4350: PPUSH
4351: PPUSH
// CenterNowOnUnits ( Heike ) ;
4352: LD_EXP 46
4356: PPUSH
4357: CALL_OW 87
// wait ( 0 0$1 ) ;
4361: LD_INT 35
4363: PPUSH
4364: CALL_OW 67
// ComMoveXY ( Heike , 115 , 19 ) ;
4368: LD_EXP 46
4372: PPUSH
4373: LD_INT 115
4375: PPUSH
4376: LD_INT 19
4378: PPUSH
4379: CALL_OW 111
// AddComTurnXY ( Heike , 113 , 16 ) ;
4383: LD_EXP 46
4387: PPUSH
4388: LD_INT 113
4390: PPUSH
4391: LD_INT 16
4393: PPUSH
4394: CALL_OW 178
// wait ( 0 0$2 ) ;
4398: LD_INT 70
4400: PPUSH
4401: CALL_OW 67
// Say ( Heike , DH-Conspiracy-1 ) ;
4405: LD_EXP 46
4409: PPUSH
4410: LD_STRING DH-Conspiracy-1
4412: PPUSH
4413: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-2 ) ;
4417: LD_EXP 51
4421: PPUSH
4422: LD_STRING DK-Conspiracy-2
4424: PPUSH
4425: CALL_OW 88
// Say ( Givi , DG-Conspiracy-3 ) ;
4429: LD_EXP 47
4433: PPUSH
4434: LD_STRING DG-Conspiracy-3
4436: PPUSH
4437: CALL_OW 88
// Say ( Givi , DG-Conspiracy-4 ) ;
4441: LD_EXP 47
4445: PPUSH
4446: LD_STRING DG-Conspiracy-4
4448: PPUSH
4449: CALL_OW 88
// Say ( Heike , DH-Conspiracy-5 ) ;
4453: LD_EXP 46
4457: PPUSH
4458: LD_STRING DH-Conspiracy-5
4460: PPUSH
4461: CALL_OW 88
// if IsOk ( Kamil ) then
4465: LD_EXP 50
4469: PPUSH
4470: CALL_OW 302
4474: IFFALSE 4532
// begin hasVodka := true ;
4476: LD_ADDR_EXP 4
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// Say ( Kamil , DKam-Conspiracy-6 ) ;
4484: LD_EXP 50
4488: PPUSH
4489: LD_STRING DKam-Conspiracy-6
4491: PPUSH
4492: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-7 ) ;
4496: LD_EXP 50
4500: PPUSH
4501: LD_STRING DKam-Conspiracy-7
4503: PPUSH
4504: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-8 ) ;
4508: LD_EXP 50
4512: PPUSH
4513: LD_STRING DKam-Conspiracy-8
4515: PPUSH
4516: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-9 ) ;
4520: LD_EXP 50
4524: PPUSH
4525: LD_STRING DKam-Conspiracy-9
4527: PPUSH
4528: CALL_OW 88
// end ; if IsOk ( Sophia ) then
4532: LD_EXP 52
4536: PPUSH
4537: CALL_OW 302
4541: IFFALSE 4722
// begin americanContact := true ;
4543: LD_ADDR_EXP 10
4547: PUSH
4548: LD_INT 1
4550: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american ) ;
4551: LD_STRING M1-american
4553: PPUSH
4554: CALL_OW 604
// Say ( Sophia , DS-Conspiracy-10 ) ;
4558: LD_EXP 52
4562: PPUSH
4563: LD_STRING DS-Conspiracy-10
4565: PPUSH
4566: CALL_OW 88
// Say ( Markov , DM-Conspiracy-11 ) ;
4570: LD_EXP 53
4574: PPUSH
4575: LD_STRING DM-Conspiracy-11
4577: PPUSH
4578: CALL_OW 88
// Say ( Sophia , DS-Conspiracy-12 ) ;
4582: LD_EXP 52
4586: PPUSH
4587: LD_STRING DS-Conspiracy-12
4589: PPUSH
4590: CALL_OW 88
// ShowPlace ( 84 , 19 , 0 0$3 ) ;
4594: LD_INT 84
4596: PPUSH
4597: LD_INT 19
4599: PPUSH
4600: LD_INT 105
4602: PPUSH
4603: CALL 20012 0 3
// if johnnySaved then
4607: LD_EXP 3
4611: IFFALSE 4651
// begin Say ( Sophia , DS-Conspiracy-13 ) ;
4613: LD_EXP 52
4617: PPUSH
4618: LD_STRING DS-Conspiracy-13
4620: PPUSH
4621: CALL_OW 88
// Say ( Heike , DH-Conspiracy-14 ) ;
4625: LD_EXP 46
4629: PPUSH
4630: LD_STRING DH-Conspiracy-14
4632: PPUSH
4633: CALL_OW 88
// Say ( Heike , DH-Conspiracy-15 ) ;
4637: LD_EXP 46
4641: PPUSH
4642: LD_STRING DH-Conspiracy-15
4644: PPUSH
4645: CALL_OW 88
// end else
4649: GO 4687
// begin Say ( Sophia , DS-Conspiracy-a-13 ) ;
4651: LD_EXP 52
4655: PPUSH
4656: LD_STRING DS-Conspiracy-a-13
4658: PPUSH
4659: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-14 ) ;
4663: LD_EXP 46
4667: PPUSH
4668: LD_STRING DH-Conspiracy-a-14
4670: PPUSH
4671: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-15 ) ;
4675: LD_EXP 46
4679: PPUSH
4680: LD_STRING DH-Conspiracy-a-15
4682: PPUSH
4683: CALL_OW 88
// end ; if IsOk ( Givi ) then
4687: LD_EXP 47
4691: PPUSH
4692: CALL_OW 302
4696: IFFALSE 4722
// begin Say ( Givi , DG-Conspiracy-a-16 ) ;
4698: LD_EXP 47
4702: PPUSH
4703: LD_STRING DG-Conspiracy-a-16
4705: PPUSH
4706: CALL_OW 88
// Say ( Heike , DH-Conspiracy-a-17 ) ;
4710: LD_EXP 46
4714: PPUSH
4715: LD_STRING DH-Conspiracy-a-17
4717: PPUSH
4718: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-16 ) ;
4722: LD_EXP 46
4726: PPUSH
4727: LD_STRING DH-Conspiracy-16
4729: PPUSH
4730: CALL_OW 88
// if IsOk ( Givi ) then
4734: LD_EXP 47
4738: PPUSH
4739: CALL_OW 302
4743: IFFALSE 5015
// begin hasStimDrugs := true ;
4745: LD_ADDR_EXP 9
4749: PUSH
4750: LD_INT 1
4752: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs ) ;
4753: LD_STRING M1-drugs
4755: PPUSH
4756: CALL_OW 604
// Say ( Givi , DG-Conspiracy-17 ) ;
4760: LD_EXP 47
4764: PPUSH
4765: LD_STRING DG-Conspiracy-17
4767: PPUSH
4768: CALL_OW 88
// SetSide ( drugsLab , 2 ) ;
4772: LD_INT 162
4774: PPUSH
4775: LD_INT 2
4777: PPUSH
4778: CALL_OW 235
// ShowPlace ( 194 , 98 , 0 0$3 ) ;
4782: LD_INT 194
4784: PPUSH
4785: LD_INT 98
4787: PPUSH
4788: LD_INT 105
4790: PPUSH
4791: CALL 20012 0 3
// SetSide ( drugsLab , 3 ) ;
4795: LD_INT 162
4797: PPUSH
4798: LD_INT 3
4800: PPUSH
4801: CALL_OW 235
// Say ( Givi , DG-Conspiracy-18 ) ;
4805: LD_EXP 47
4809: PPUSH
4810: LD_STRING DG-Conspiracy-18
4812: PPUSH
4813: CALL_OW 88
// Say ( Givi , DG-Conspiracy-19 ) ;
4817: LD_EXP 47
4821: PPUSH
4822: LD_STRING DG-Conspiracy-19
4824: PPUSH
4825: CALL_OW 88
// Say ( Givi , DG-Conspiracy-20 ) ;
4829: LD_EXP 47
4833: PPUSH
4834: LD_STRING DG-Conspiracy-20
4836: PPUSH
4837: CALL_OW 88
// Say ( Heike , DH-Conspiracy-21 ) ;
4841: LD_EXP 46
4845: PPUSH
4846: LD_STRING DH-Conspiracy-21
4848: PPUSH
4849: CALL_OW 88
// if IsOk ( Kaia ) then
4853: LD_EXP 51
4857: PPUSH
4858: CALL_OW 302
4862: IFFALSE 4936
// begin hasExplosions := true ;
4864: LD_ADDR_EXP 6
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-explosive ) ;
4872: LD_STRING M1-explosive
4874: PPUSH
4875: CALL_OW 604
// Say ( Kaia , DK-Conspiracy-22 ) ;
4879: LD_EXP 51
4883: PPUSH
4884: LD_STRING DK-Conspiracy-22
4886: PPUSH
4887: CALL_OW 88
// SetSide ( barExplosion , 2 ) ;
4891: LD_INT 73
4893: PPUSH
4894: LD_INT 2
4896: PPUSH
4897: CALL_OW 235
// ShowPlace ( 170 , 104 , 0 0$3 ) ;
4901: LD_INT 170
4903: PPUSH
4904: LD_INT 104
4906: PPUSH
4907: LD_INT 105
4909: PPUSH
4910: CALL 20012 0 3
// SetSide ( barExplosion , 3 ) ;
4914: LD_INT 73
4916: PPUSH
4917: LD_INT 3
4919: PPUSH
4920: CALL_OW 235
// Say ( Kaia , DK-Conspiracy-23 ) ;
4924: LD_EXP 51
4928: PPUSH
4929: LD_STRING DK-Conspiracy-23
4931: PPUSH
4932: CALL_OW 88
// end ; if IsOk ( Olaf ) then
4936: LD_EXP 54
4940: PPUSH
4941: CALL_OW 302
4945: IFFALSE 5015
// begin hasExplosionsInFactory := true ;
4947: LD_ADDR_EXP 7
4951: PUSH
4952: LD_INT 1
4954: ST_TO_ADDR
// Say ( Olaf , DO-Conspiracy-24 ) ;
4955: LD_EXP 54
4959: PPUSH
4960: LD_STRING DO-Conspiracy-24
4962: PPUSH
4963: CALL_OW 88
// ShowPlace ( 175 , 54 , 0 0$2 ) ;
4967: LD_INT 175
4969: PPUSH
4970: LD_INT 54
4972: PPUSH
4973: LD_INT 70
4975: PPUSH
4976: CALL 20012 0 3
// if IsOk ( Markov ) then
4980: LD_EXP 53
4984: PPUSH
4985: CALL_OW 302
4989: IFFALSE 5015
// begin Say ( Markov , DMar-Conspiracy-25 ) ;
4991: LD_EXP 53
4995: PPUSH
4996: LD_STRING DMar-Conspiracy-25
4998: PPUSH
4999: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-26 ) ;
5003: LD_EXP 53
5007: PPUSH
5008: LD_STRING DMar-Conspiracy-26
5010: PPUSH
5011: CALL_OW 88
// end ; end ; end ; if IsOk ( Kurt ) and IsOk ( Kaia ) then
5015: LD_EXP 55
5019: PPUSH
5020: CALL_OW 302
5024: PUSH
5025: LD_EXP 51
5029: PPUSH
5030: CALL_OW 302
5034: AND
5035: IFFALSE 5495
// begin hasWeapons := true ;
5037: LD_ADDR_EXP 19
5041: PUSH
5042: LD_INT 1
5044: ST_TO_ADDR
// hasRevolver := true ;
5045: LD_ADDR_EXP 8
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-weapons ) ;
5053: LD_STRING M1-weapons
5055: PPUSH
5056: CALL_OW 604
// Say ( Kurt , DKs-Conspiracy-27 ) ;
5060: LD_EXP 55
5064: PPUSH
5065: LD_STRING DKs-Conspiracy-27
5067: PPUSH
5068: CALL_OW 88
// if IsOk ( Givi ) then
5072: LD_EXP 47
5076: PPUSH
5077: CALL_OW 302
5081: IFFALSE 5097
// Say ( Givi , DG-Conspiracy-28 ) else
5083: LD_EXP 47
5087: PPUSH
5088: LD_STRING DG-Conspiracy-28
5090: PPUSH
5091: CALL_OW 88
5095: GO 5162
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-28 ) then
5097: LD_EXP 57
5101: PPUSH
5102: LD_INT 26
5104: PUSH
5105: LD_INT 1
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 72
5116: PUSH
5117: LD_INT 1
5119: ARRAY
5120: PPUSH
5121: LD_STRING DArm-Conspiracy-a-28
5123: PPUSH
5124: CALL_OW 88
5128: NOT
5129: IFFALSE 5162
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-28 ) ;
5131: LD_EXP 57
5135: PPUSH
5136: LD_INT 26
5138: PUSH
5139: LD_INT 2
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: PPUSH
5146: CALL_OW 72
5150: PUSH
5151: LD_INT 1
5153: ARRAY
5154: PPUSH
5155: LD_STRING DArf-Conspiracy-a-28
5157: PPUSH
5158: CALL_OW 88
// Say ( Kurt , DKs-Conspiracy-29 ) ;
5162: LD_EXP 55
5166: PPUSH
5167: LD_STRING DKs-Conspiracy-29
5169: PPUSH
5170: CALL_OW 88
// ShowPlace ( 192 , 122 , 0 0$3 ) ;
5174: LD_INT 192
5176: PPUSH
5177: LD_INT 122
5179: PPUSH
5180: LD_INT 105
5182: PPUSH
5183: CALL 20012 0 3
// Say ( Kurt , DKs-Conspiracy-30 ) ;
5187: LD_EXP 55
5191: PPUSH
5192: LD_STRING DKs-Conspiracy-30
5194: PPUSH
5195: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-31 ) ;
5199: LD_EXP 51
5203: PPUSH
5204: LD_STRING DK-Conspiracy-31
5206: PPUSH
5207: CALL_OW 88
// if not Say ( Markov , DMar-Conspiracy-33 ) and heikeSecondSquad then
5211: LD_EXP 53
5215: PPUSH
5216: LD_STRING DMar-Conspiracy-33
5218: PPUSH
5219: CALL_OW 88
5223: NOT
5224: PUSH
5225: LD_EXP 57
5229: AND
5230: IFFALSE 5297
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-34 ) then
5232: LD_EXP 57
5236: PPUSH
5237: LD_INT 26
5239: PUSH
5240: LD_INT 1
5242: PUSH
5243: EMPTY
5244: LIST
5245: LIST
5246: PPUSH
5247: CALL_OW 72
5251: PUSH
5252: LD_INT 1
5254: ARRAY
5255: PPUSH
5256: LD_STRING DArm-Conspiracy-a-34
5258: PPUSH
5259: CALL_OW 88
5263: NOT
5264: IFFALSE 5297
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-34 ) ;
5266: LD_EXP 57
5270: PPUSH
5271: LD_INT 26
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PPUSH
5281: CALL_OW 72
5285: PUSH
5286: LD_INT 1
5288: ARRAY
5289: PPUSH
5290: LD_STRING DArf-Conspiracy-a-34
5292: PPUSH
5293: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-34 ) ;
5297: LD_EXP 51
5301: PPUSH
5302: LD_STRING DK-Conspiracy-34
5304: PPUSH
5305: CALL_OW 88
// if IsOk ( Markov ) then
5309: LD_EXP 53
5313: PPUSH
5314: CALL_OW 302
5318: IFFALSE 5403
// begin hasSniperRifle := true ;
5320: LD_ADDR_EXP 11
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// Say ( Markov , DMar-Conspiracy-35 ) ;
5328: LD_EXP 53
5332: PPUSH
5333: LD_STRING DMar-Conspiracy-35
5335: PPUSH
5336: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-36 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING DK-Conspiracy-36
5347: PPUSH
5348: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-37 ) ;
5352: LD_EXP 53
5356: PPUSH
5357: LD_STRING DMar-Conspiracy-37
5359: PPUSH
5360: CALL_OW 88
// Say ( Markov , DMar-Conspiracy-38 ) ;
5364: LD_EXP 53
5368: PPUSH
5369: LD_STRING DMar-Conspiracy-38
5371: PPUSH
5372: CALL_OW 88
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5376: LD_INT 137
5378: PPUSH
5379: LD_INT 98
5381: PPUSH
5382: LD_INT 105
5384: PPUSH
5385: CALL 20012 0 3
// Say ( Markov , DMar-Conspiracy-39 ) ;
5389: LD_EXP 53
5393: PPUSH
5394: LD_STRING DMar-Conspiracy-39
5396: PPUSH
5397: CALL_OW 88
// end else
5401: GO 5495
// if heikeSecondSquad then
5403: LD_EXP 57
5407: IFFALSE 5495
// begin hasSniperRifle := true ;
5409: LD_ADDR_EXP 11
5413: PUSH
5414: LD_INT 1
5416: ST_TO_ADDR
// ShowPlace ( 137 , 98 , 0 0$3 ) ;
5417: LD_INT 137
5419: PPUSH
5420: LD_INT 98
5422: PPUSH
5423: LD_INT 105
5425: PPUSH
5426: CALL 20012 0 3
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Conspiracy-a-35 ) then
5430: LD_EXP 57
5434: PPUSH
5435: LD_INT 26
5437: PUSH
5438: LD_INT 1
5440: PUSH
5441: EMPTY
5442: LIST
5443: LIST
5444: PPUSH
5445: CALL_OW 72
5449: PUSH
5450: LD_INT 1
5452: ARRAY
5453: PPUSH
5454: LD_STRING DArm-Conspiracy-a-35
5456: PPUSH
5457: CALL_OW 88
5461: NOT
5462: IFFALSE 5495
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Conspiracy-a-35 ) ;
5464: LD_EXP 57
5468: PPUSH
5469: LD_INT 26
5471: PUSH
5472: LD_INT 2
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PPUSH
5479: CALL_OW 72
5483: PUSH
5484: LD_INT 1
5486: ARRAY
5487: PPUSH
5488: LD_STRING DArf-Conspiracy-a-35
5490: PPUSH
5491: CALL_OW 88
// end ; end ; Say ( Heike , DH-Conspiracy-40 ) ;
5495: LD_EXP 46
5499: PPUSH
5500: LD_STRING DH-Conspiracy-40
5502: PPUSH
5503: CALL_OW 88
// if IsOk ( Mike ) then
5507: LD_EXP 48
5511: PPUSH
5512: CALL_OW 302
5516: IFFALSE 5575
// begin hasScout := true ;
5518: LD_ADDR_EXP 12
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// Say ( Mike , DM-Conspiracy-41 ) ;
5526: LD_EXP 48
5530: PPUSH
5531: LD_STRING DM-Conspiracy-41
5533: PPUSH
5534: CALL_OW 88
// Say ( Mike , DM-Conspiracy-42 ) ;
5538: LD_EXP 48
5542: PPUSH
5543: LD_STRING DM-Conspiracy-42
5545: PPUSH
5546: CALL_OW 88
// ShowPlace ( 73 , 102 , 0 0$3 ) ;
5550: LD_INT 73
5552: PPUSH
5553: LD_INT 102
5555: PPUSH
5556: LD_INT 105
5558: PPUSH
5559: CALL 20012 0 3
// Say ( Mike , DM-Conspiracy-43 ) ;
5563: LD_EXP 48
5567: PPUSH
5568: LD_STRING DM-Conspiracy-43
5570: PPUSH
5571: CALL_OW 88
// end ; if hasVodka and IsOk ( Kaia ) and IsOk ( Kurt ) then
5575: LD_EXP 4
5579: PUSH
5580: LD_EXP 51
5584: PPUSH
5585: CALL_OW 302
5589: AND
5590: PUSH
5591: LD_EXP 55
5595: PPUSH
5596: CALL_OW 302
5600: AND
5601: IFFALSE 5647
// begin hasMethanol := true ;
5603: LD_ADDR_EXP 13
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// Say ( Kaia , DK-Conspiracy-44 ) ;
5611: LD_EXP 51
5615: PPUSH
5616: LD_STRING DK-Conspiracy-44
5618: PPUSH
5619: CALL_OW 88
// Say ( Kaia , DK-Conspiracy-45 ) ;
5623: LD_EXP 51
5627: PPUSH
5628: LD_STRING DK-Conspiracy-45
5630: PPUSH
5631: CALL_OW 88
// Say ( Kamil , DKam-Conspiracy-46 ) ;
5635: LD_EXP 50
5639: PPUSH
5640: LD_STRING DKam-Conspiracy-46
5642: PPUSH
5643: CALL_OW 88
// end ; Say ( Heike , DH-Conspiracy-47 ) ;
5647: LD_EXP 46
5651: PPUSH
5652: LD_STRING DH-Conspiracy-47
5654: PPUSH
5655: CALL_OW 88
// wait ( 0 0$1 ) ;
5659: LD_INT 35
5661: PPUSH
5662: CALL_OW 67
// your_side := 8 ;
5666: LD_ADDR_OWVAR 2
5670: PUSH
5671: LD_INT 8
5673: ST_TO_ADDR
// CenterNowOnXY ( 1 , 1 ) ;
5674: LD_INT 1
5676: PPUSH
5677: LD_INT 1
5679: PPUSH
5680: CALL_OW 86
// for i in FilterAllUnits ( [ [ f_or , [ f_side , 2 ] , [ f_side , 4 ] ] , [ f_type , unit_human ] ] ) do
5684: LD_ADDR_VAR 0 2
5688: PUSH
5689: LD_INT 2
5691: PUSH
5692: LD_INT 22
5694: PUSH
5695: LD_INT 2
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 22
5704: PUSH
5705: LD_INT 4
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 21
5719: PUSH
5720: LD_INT 1
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: CALL_OW 69
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5750
// RemoveUnit ( i ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: CALL_OW 64
5748: GO 5736
5750: POP
5751: POP
// wait ( 0 0$0.3 ) ;
5752: LD_INT 10
5754: PPUSH
5755: CALL_OW 67
// Query ( StartInfo1 ) ;
5759: LD_STRING StartInfo1
5761: PPUSH
5762: CALL_OW 97
// wait ( 0 0$1 ) ;
5766: LD_INT 35
5768: PPUSH
5769: CALL_OW 67
// LoadColorsTXT ( colors_night.txt ) ;
5773: LD_STRING colors_night.txt
5775: PPUSH
5776: CALL_OW 544
// Query ( StartInfo2 ) ;
5780: LD_STRING StartInfo2
5782: PPUSH
5783: CALL_OW 97
// PrepareGame ;
5787: CALL 1056 0 0
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5791: LD_INT 152
5793: PPUSH
5794: LD_INT 65
5796: PPUSH
5797: LD_INT 2
5799: PPUSH
5800: LD_INT 70
5802: NEG
5803: PPUSH
5804: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5808: LD_INT 152
5810: PPUSH
5811: LD_INT 65
5813: PPUSH
5814: LD_INT 2
5816: PPUSH
5817: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 2 , - 6 ) ;
5821: LD_INT 133
5823: PPUSH
5824: LD_INT 76
5826: PPUSH
5827: LD_INT 2
5829: PPUSH
5830: LD_INT 6
5832: NEG
5833: PPUSH
5834: CALL_OW 330
// PlaceSeeing ( 152 , 65 , 8 , - 70 ) ;
5838: LD_INT 152
5840: PPUSH
5841: LD_INT 65
5843: PPUSH
5844: LD_INT 8
5846: PPUSH
5847: LD_INT 70
5849: NEG
5850: PPUSH
5851: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 8 ) ;
5855: LD_INT 152
5857: PPUSH
5858: LD_INT 65
5860: PPUSH
5861: LD_INT 8
5863: PPUSH
5864: CALL_OW 331
// PlaceSeeing ( 133 , 76 , 8 , - 6 ) ;
5868: LD_INT 133
5870: PPUSH
5871: LD_INT 76
5873: PPUSH
5874: LD_INT 8
5876: PPUSH
5877: LD_INT 6
5879: NEG
5880: PPUSH
5881: CALL_OW 330
// CenterNowOnUnits ( ruOutpost2 ) ;
5885: LD_INT 23
5887: PPUSH
5888: CALL_OW 87
// dialogue_skipped := false ;
5892: LD_ADDR_OWVAR 59
5896: PUSH
5897: LD_INT 0
5899: ST_TO_ADDR
// InitRuPatrols ;
5900: CALL 3285 0 0
// Say ( Heike , DH-Escape-1 ) ;
5904: LD_EXP 46
5908: PPUSH
5909: LD_STRING DH-Escape-1
5911: PPUSH
5912: CALL_OW 88
// Say ( Heike , DH-Escape-2 ) ;
5916: LD_EXP 46
5920: PPUSH
5921: LD_STRING DH-Escape-2
5923: PPUSH
5924: CALL_OW 88
// StartLockerMinigame ;
5928: CALL 20797 0 0
// wait ( 0 0$1 ) ;
5932: LD_INT 35
5934: PPUSH
5935: CALL_OW 67
// Say ( Heike , DH-Escape-4 ) ;
5939: LD_EXP 46
5943: PPUSH
5944: LD_STRING DH-Escape-4
5946: PPUSH
5947: CALL_OW 88
// wait ( 0 0$3 ) ;
5951: LD_INT 105
5953: PPUSH
5954: CALL_OW 67
// your_side := 2 ;
5958: LD_ADDR_OWVAR 2
5962: PUSH
5963: LD_INT 2
5965: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
5966: LD_EXP 46
5970: PPUSH
5971: CALL_OW 122
// PlaceSeeing ( 152 , 65 , 2 , - 70 ) ;
5975: LD_INT 152
5977: PPUSH
5978: LD_INT 65
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: LD_INT 70
5986: NEG
5987: PPUSH
5988: CALL_OW 330
// RemoveSeeing ( 152 , 65 , 2 ) ;
5992: LD_INT 152
5994: PPUSH
5995: LD_INT 65
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 331
// RemoveSeeing ( 133 , 76 , 8 ) ;
6005: LD_INT 133
6007: PPUSH
6008: LD_INT 76
6010: PPUSH
6011: LD_INT 8
6013: PPUSH
6014: CALL_OW 331
// AddComMoveXY ( Heike , 128 , 64 ) ;
6018: LD_EXP 46
6022: PPUSH
6023: LD_INT 128
6025: PPUSH
6026: LD_INT 64
6028: PPUSH
6029: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6033: LD_INT 35
6035: PPUSH
6036: CALL_OW 67
// until IsAt ( Heike , 128 , 64 ) ;
6040: LD_EXP 46
6044: PPUSH
6045: LD_INT 128
6047: PPUSH
6048: LD_INT 64
6050: PPUSH
6051: CALL_OW 307
6055: IFFALSE 6033
// ComHold ( Heike ) ;
6057: LD_EXP 46
6061: PPUSH
6062: CALL_OW 140
// Say ( Heike , DH-Start-1 ) ;
6066: LD_EXP 46
6070: PPUSH
6071: LD_STRING DH-Start-1
6073: PPUSH
6074: CALL_OW 88
// if not americanContact then
6078: LD_EXP 10
6082: NOT
6083: IFFALSE 6099
// Say ( Heike , DH-Start-c-2 ) else
6085: LD_EXP 46
6089: PPUSH
6090: LD_STRING DH-Start-c-2
6092: PPUSH
6093: CALL_OW 88
6097: GO 6131
// if johnnySaved then
6099: LD_EXP 3
6103: IFFALSE 6119
// Say ( Heike , DH-Start-a-2 ) else
6105: LD_EXP 46
6109: PPUSH
6110: LD_STRING DH-Start-a-2
6112: PPUSH
6113: CALL_OW 88
6117: GO 6131
// Say ( Heike , DH-Start-b-2 ) ;
6119: LD_EXP 46
6123: PPUSH
6124: LD_STRING DH-Start-b-2
6126: PPUSH
6127: CALL_OW 88
// Video ( false ) ;
6131: LD_INT 0
6133: PPUSH
6134: CALL 66971 0 1
// tick := 0 ;
6138: LD_ADDR_OWVAR 1
6142: PUSH
6143: LD_INT 0
6145: ST_TO_ADDR
// ChangeMissionObjectives ( M1 ) ;
6146: LD_STRING M1
6148: PPUSH
6149: CALL_OW 337
// enable ( gameStartEvent ) ;
6153: LD_INT 2
6155: ENABLE_MARKED
// SaveForQuickRestart ;
6156: CALL_OW 22
// end ;
6160: LD_VAR 0 1
6164: RET
// function ActionAdditional ; var i , un , tmp ; begin
6165: LD_INT 0
6167: PPUSH
6168: PPUSH
6169: PPUSH
6170: PPUSH
// PlaceSeeing ( 115 , 27 , 2 , - 6 ) ;
6171: LD_INT 115
6173: PPUSH
6174: LD_INT 27
6176: PPUSH
6177: LD_INT 2
6179: PPUSH
6180: LD_INT 6
6182: NEG
6183: PPUSH
6184: CALL_OW 330
// PlaceHumanInUnit ( Heike , HexInfo ( 115 , 27 ) ) ;
6188: LD_EXP 46
6192: PPUSH
6193: LD_INT 115
6195: PPUSH
6196: LD_INT 27
6198: PPUSH
6199: CALL_OW 428
6203: PPUSH
6204: CALL_OW 52
// SetClass ( Heike , 33 ) ;
6208: LD_EXP 46
6212: PPUSH
6213: LD_INT 33
6215: PPUSH
6216: CALL_OW 336
// CenterNowOnXY ( 124 , 39 ) ;
6220: LD_INT 124
6222: PPUSH
6223: LD_INT 39
6225: PPUSH
6226: CALL_OW 86
// Say ( Heike , DH-Fail-1 ) ;
6230: LD_EXP 46
6234: PPUSH
6235: LD_STRING DH-Fail-1
6237: PPUSH
6238: CALL_OW 88
// RaiseSailEvent ( centerCamEvent ) ;
6242: LD_INT 3
6244: PPUSH
6245: CALL_OW 427
// ComExit ( Heike ) ;
6249: LD_EXP 46
6253: PPUSH
6254: CALL 67397 0 1
// AddComMoveXY ( Heike , 109 , 33 ) ;
6258: LD_EXP 46
6262: PPUSH
6263: LD_INT 109
6265: PPUSH
6266: LD_INT 33
6268: PPUSH
6269: CALL_OW 171
// AddComHold ( Heike ) ;
6273: LD_EXP 46
6277: PPUSH
6278: CALL_OW 200
// RemoveSeeing ( 115 , 27 , 2 ) ;
6282: LD_INT 115
6284: PPUSH
6285: LD_INT 27
6287: PPUSH
6288: LD_INT 2
6290: PPUSH
6291: CALL_OW 331
// wait ( 0 0$2 ) ;
6295: LD_INT 70
6297: PPUSH
6298: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6302: LD_INT 35
6304: PPUSH
6305: CALL_OW 67
// until IsAt ( Heike , 109 , 33 ) ;
6309: LD_EXP 46
6313: PPUSH
6314: LD_INT 109
6316: PPUSH
6317: LD_INT 33
6319: PPUSH
6320: CALL_OW 307
6324: IFFALSE 6302
// Say ( Heike , DH-Fail-2 ) ;
6326: LD_EXP 46
6330: PPUSH
6331: LD_STRING DH-Fail-2
6333: PPUSH
6334: CALL_OW 88
// ComMoveXY ( Heike , 111 , 48 ) ;
6338: LD_EXP 46
6342: PPUSH
6343: LD_INT 111
6345: PPUSH
6346: LD_INT 48
6348: PPUSH
6349: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6353: LD_INT 35
6355: PPUSH
6356: CALL_OW 67
// until GetDistUnitXY ( Heike , 111 , 48 ) < 4 ;
6360: LD_EXP 46
6364: PPUSH
6365: LD_INT 111
6367: PPUSH
6368: LD_INT 48
6370: PPUSH
6371: CALL_OW 297
6375: PUSH
6376: LD_INT 4
6378: LESS
6379: IFFALSE 6353
// AddComMoveXY ( Heike , 106 , 72 ) ;
6381: LD_EXP 46
6385: PPUSH
6386: LD_INT 106
6388: PPUSH
6389: LD_INT 72
6391: PPUSH
6392: CALL_OW 171
// AddComMoveXY ( Heike , 103 , 80 ) ;
6396: LD_EXP 46
6400: PPUSH
6401: LD_INT 103
6403: PPUSH
6404: LD_INT 80
6406: PPUSH
6407: CALL_OW 171
// uc_side := 3 ;
6411: LD_ADDR_OWVAR 20
6415: PUSH
6416: LD_INT 3
6418: ST_TO_ADDR
// uc_nation := 3 ;
6419: LD_ADDR_OWVAR 21
6423: PUSH
6424: LD_INT 3
6426: ST_TO_ADDR
// PrepareHuman ( sex_male , class_soldier , 6 ) ;
6427: LD_INT 1
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: LD_INT 6
6435: PPUSH
6436: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
6440: LD_ADDR_OWVAR 29
6444: PUSH
6445: LD_INT 12
6447: PUSH
6448: LD_INT 12
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: ST_TO_ADDR
// un := CreateHuman ;
6455: LD_ADDR_VAR 0 3
6459: PUSH
6460: CALL_OW 44
6464: ST_TO_ADDR
// PlaceUnitXYD ( un , 134 , 52 , 4 , false ) ;
6465: LD_VAR 0 3
6469: PPUSH
6470: LD_INT 134
6472: PPUSH
6473: LD_INT 52
6475: PPUSH
6476: LD_INT 4
6478: PPUSH
6479: LD_INT 0
6481: PPUSH
6482: CALL 69139 0 5
// ComTurnUnit ( un , Heike ) ;
6486: LD_VAR 0 3
6490: PPUSH
6491: LD_EXP 46
6495: PPUSH
6496: CALL_OW 119
// ComMoveUnit ( un , Heike ) ;
6500: LD_VAR 0 3
6504: PPUSH
6505: LD_EXP 46
6509: PPUSH
6510: CALL_OW 112
// if GetSex ( un ) = sex_male then
6514: LD_VAR 0 3
6518: PPUSH
6519: CALL_OW 258
6523: PUSH
6524: LD_INT 1
6526: EQUAL
6527: IFFALSE 6543
// Say ( un , DRum-Fail-3 ) else
6529: LD_VAR 0 3
6533: PPUSH
6534: LD_STRING DRum-Fail-3
6536: PPUSH
6537: CALL_OW 88
6541: GO 6555
// Say ( un , DRuf-Fail-3 ) ;
6543: LD_VAR 0 3
6547: PPUSH
6548: LD_STRING DRuf-Fail-3
6550: PPUSH
6551: CALL_OW 88
// for i := 1 to 3 do
6555: LD_ADDR_VAR 0 2
6559: PUSH
6560: DOUBLE
6561: LD_INT 1
6563: DEC
6564: ST_TO_ADDR
6565: LD_INT 3
6567: PUSH
6568: FOR_TO
6569: IFFALSE 6642
// begin PrepareSoldier ( false , 10 ) ;
6571: LD_INT 0
6573: PPUSH
6574: LD_INT 10
6576: PPUSH
6577: CALL_OW 381
// un := CreateHuman ;
6581: LD_ADDR_VAR 0 3
6585: PUSH
6586: CALL_OW 44
6590: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6591: LD_ADDR_VAR 0 4
6595: PUSH
6596: LD_VAR 0 4
6600: PPUSH
6601: LD_VAR 0 3
6605: PPUSH
6606: CALL 66999 0 2
6610: ST_TO_ADDR
// PlaceUnitArea ( un , failSceneGuardArea , false ) ;
6611: LD_VAR 0 3
6615: PPUSH
6616: LD_INT 8
6618: PPUSH
6619: LD_INT 0
6621: PPUSH
6622: CALL_OW 49
// ComTurnUnit ( un , Heike ) ;
6626: LD_VAR 0 3
6630: PPUSH
6631: LD_EXP 46
6635: PPUSH
6636: CALL_OW 119
// end ;
6640: GO 6568
6642: POP
6643: POP
// repeat wait ( 0 0$1 ) ;
6644: LD_INT 35
6646: PPUSH
6647: CALL_OW 67
// until UnitFilter ( tmp , [ f_see , 2 ] ) > 1 ;
6651: LD_VAR 0 4
6655: PPUSH
6656: LD_INT 101
6658: PUSH
6659: LD_INT 2
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PPUSH
6666: CALL_OW 72
6670: PUSH
6671: LD_INT 1
6673: GREATER
6674: IFFALSE 6644
// wait ( 0 0$1 ) ;
6676: LD_INT 35
6678: PPUSH
6679: CALL_OW 67
// DialogueOn ;
6683: CALL_OW 6
// Say ( Heike , DH-Fail-4 ) ;
6687: LD_EXP 46
6691: PPUSH
6692: LD_STRING DH-Fail-4
6694: PPUSH
6695: CALL_OW 88
// Say ( Heike , DH-Fail-5 ) ;
6699: LD_EXP 46
6703: PPUSH
6704: LD_STRING DH-Fail-5
6706: PPUSH
6707: CALL_OW 88
// Say ( Heike , DH-Fail-6 ) ;
6711: LD_EXP 46
6715: PPUSH
6716: LD_STRING DH-Fail-6
6718: PPUSH
6719: CALL_OW 88
// DialogueOff ;
6723: CALL_OW 7
// ComAttackUnit ( tmp , Heike ) ;
6727: LD_VAR 0 4
6731: PPUSH
6732: LD_EXP 46
6736: PPUSH
6737: CALL_OW 115
// repeat wait ( 0 0$1 ) ;
6741: LD_INT 35
6743: PPUSH
6744: CALL_OW 67
// until IsDying ( Heike ) ;
6748: LD_EXP 46
6752: PPUSH
6753: CALL_OW 303
6757: IFFALSE 6741
// KillUnit ( Heike ) ;
6759: LD_EXP 46
6763: PPUSH
6764: CALL_OW 66
// wait ( 0 0$4 ) ;
6768: LD_INT 140
6770: PPUSH
6771: CALL_OW 67
// ResetFog ;
6775: CALL_OW 335
// DialogueOn ;
6779: CALL_OW 6
// dwait ( 0 0$1 ) ;
6783: LD_INT 35
6785: PPUSH
6786: CALL_OW 68
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
6790: LD_ADDR_EXP 46
6794: PUSH
6795: LD_STRING Heike
6797: PPUSH
6798: LD_EXP 1
6802: NOT
6803: PPUSH
6804: LD_EXP 2
6808: PPUSH
6809: CALL 29308 0 3
6813: ST_TO_ADDR
// SayNoFace ( Heike , DH-Fail-7 ) ;
6814: LD_EXP 46
6818: PPUSH
6819: LD_STRING DH-Fail-7
6821: PPUSH
6822: CALL_OW 89
// DialogueOff ;
6826: CALL_OW 7
// YouLost ( Fail ) ;
6830: LD_STRING Fail
6832: PPUSH
6833: CALL_OW 104
// end ;
6837: LD_VAR 0 1
6841: RET
// every 0 0$1 trigger SeeXY ( 2 , 173 , 29 ) and GetDistUnitXY ( Heike , 173 , 29 ) < 6 marked gameStartEvent do
6842: LD_INT 2
6844: PPUSH
6845: LD_INT 173
6847: PPUSH
6848: LD_INT 29
6850: PPUSH
6851: CALL_OW 293
6855: PUSH
6856: LD_EXP 46
6860: PPUSH
6861: LD_INT 173
6863: PPUSH
6864: LD_INT 29
6866: PPUSH
6867: CALL_OW 297
6871: PUSH
6872: LD_INT 6
6874: LESS
6875: AND
6876: IFFALSE 6893
6878: GO 6880
6880: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6881: LD_EXP 46
6885: PPUSH
6886: LD_STRING DH-EastRoad
6888: PPUSH
6889: CALL_OW 88
6893: END
// every 0 0$1 trigger SeeXY ( 2 , 149 , 3 ) and GetDistUnitXY ( Heike , 149 , 3 ) < 6 marked gameStartEvent do
6894: LD_INT 2
6896: PPUSH
6897: LD_INT 149
6899: PPUSH
6900: LD_INT 3
6902: PPUSH
6903: CALL_OW 293
6907: PUSH
6908: LD_EXP 46
6912: PPUSH
6913: LD_INT 149
6915: PPUSH
6916: LD_INT 3
6918: PPUSH
6919: CALL_OW 297
6923: PUSH
6924: LD_INT 6
6926: LESS
6927: AND
6928: IFFALSE 6945
6930: GO 6932
6932: DISABLE
// Say ( Heike , DH-EastRoad ) ;
6933: LD_EXP 46
6937: PPUSH
6938: LD_STRING DH-EastRoad
6940: PPUSH
6941: CALL_OW 88
6945: END
// every 0 0$1 trigger SeeXY ( 2 , 217 , 120 ) and GetDistUnitXY ( Heike , 217 , 120 ) < 6 marked gameStartEvent do
6946: LD_INT 2
6948: PPUSH
6949: LD_INT 217
6951: PPUSH
6952: LD_INT 120
6954: PPUSH
6955: CALL_OW 293
6959: PUSH
6960: LD_EXP 46
6964: PPUSH
6965: LD_INT 217
6967: PPUSH
6968: LD_INT 120
6970: PPUSH
6971: CALL_OW 297
6975: PUSH
6976: LD_INT 6
6978: LESS
6979: AND
6980: IFFALSE 6997
6982: GO 6984
6984: DISABLE
// Say ( Heike , DH-EastEnd ) ;
6985: LD_EXP 46
6989: PPUSH
6990: LD_STRING DH-EastEnd
6992: PPUSH
6993: CALL_OW 88
6997: END
// every 0 0$1 trigger IsInArea ( Heike , hillArea ) marked gameStartEvent do
6998: LD_EXP 46
7002: PPUSH
7003: LD_INT 11
7005: PPUSH
7006: CALL_OW 308
7010: IFFALSE 7048
7012: GO 7014
7014: DISABLE
// begin if not heikeSquad then
7015: LD_EXP 14
7019: NOT
7020: IFFALSE 7036
// Say ( Heike , DH-Hill ) else
7022: LD_EXP 46
7026: PPUSH
7027: LD_STRING DH-Hill
7029: PPUSH
7030: CALL_OW 88
7034: GO 7048
// Say ( Heike , DH-Hill-a ) ;
7036: LD_EXP 46
7040: PPUSH
7041: LD_STRING DH-Hill-a
7043: PPUSH
7044: CALL_OW 88
// end ;
7048: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorderArea ) marked gameStartEvent do var x , y , v ;
7049: LD_EXP 46
7053: PPUSH
7054: LD_INT 12
7056: PPUSH
7057: CALL_OW 308
7061: IFFALSE 7248
7063: GO 7065
7065: DISABLE
7066: LD_INT 0
7068: PPUSH
7069: PPUSH
7070: PPUSH
// begin DialogueOn ;
7071: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7075: LD_EXP 46
7079: PPUSH
7080: CALL_OW 87
// x := GetX ( Heike ) ;
7084: LD_ADDR_VAR 0 1
7088: PUSH
7089: LD_EXP 46
7093: PPUSH
7094: CALL_OW 250
7098: ST_TO_ADDR
// y := GetY ( Heike ) ;
7099: LD_ADDR_VAR 0 2
7103: PUSH
7104: LD_EXP 46
7108: PPUSH
7109: CALL_OW 251
7113: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7114: LD_VAR 0 1
7118: PPUSH
7119: LD_VAR 0 2
7123: PPUSH
7124: LD_INT 2
7126: PPUSH
7127: LD_INT 12
7129: NEG
7130: PPUSH
7131: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7135: LD_VAR 0 1
7139: PPUSH
7140: LD_VAR 0 2
7144: PPUSH
7145: LD_INT 2
7147: PPUSH
7148: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7152: LD_INT 101
7154: PUSH
7155: LD_INT 2
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 2
7164: PUSH
7165: LD_INT 30
7167: PUSH
7168: LD_INT 32
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PUSH
7175: LD_INT 30
7177: PUSH
7178: LD_INT 33
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PPUSH
7194: CALL_OW 69
7198: IFFALSE 7210
// v := 3 else
7200: LD_ADDR_VAR 0 3
7204: PUSH
7205: LD_INT 3
7207: ST_TO_ADDR
7208: GO 7218
// v := 2 ;
7210: LD_ADDR_VAR 0 3
7214: PUSH
7215: LD_INT 2
7217: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7218: LD_EXP 46
7222: PPUSH
7223: LD_STRING DH-Outpost-
7225: PUSH
7226: LD_INT 1
7228: PPUSH
7229: LD_VAR 0 3
7233: PPUSH
7234: CALL_OW 12
7238: STR
7239: PPUSH
7240: CALL_OW 88
// DialogueOff ;
7244: CALL_OW 7
// end ;
7248: PPOPN 3
7250: END
// every 0 0$1 trigger IsInArea ( Heike , baseBorder2Area ) marked gameStartEvent do var x , y , v ;
7251: LD_EXP 46
7255: PPUSH
7256: LD_INT 64
7258: PPUSH
7259: CALL_OW 308
7263: IFFALSE 7450
7265: GO 7267
7267: DISABLE
7268: LD_INT 0
7270: PPUSH
7271: PPUSH
7272: PPUSH
// begin DialogueOn ;
7273: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
7277: LD_EXP 46
7281: PPUSH
7282: CALL_OW 87
// x := GetX ( Heike ) ;
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: LD_EXP 46
7295: PPUSH
7296: CALL_OW 250
7300: ST_TO_ADDR
// y := GetY ( Heike ) ;
7301: LD_ADDR_VAR 0 2
7305: PUSH
7306: LD_EXP 46
7310: PPUSH
7311: CALL_OW 251
7315: ST_TO_ADDR
// PlaceSeeing ( x , y , 2 , - 12 ) ;
7316: LD_VAR 0 1
7320: PPUSH
7321: LD_VAR 0 2
7325: PPUSH
7326: LD_INT 2
7328: PPUSH
7329: LD_INT 12
7331: NEG
7332: PPUSH
7333: CALL_OW 330
// RemoveSeeing ( x , y , 2 ) ;
7337: LD_VAR 0 1
7341: PPUSH
7342: LD_VAR 0 2
7346: PPUSH
7347: LD_INT 2
7349: PPUSH
7350: CALL_OW 331
// if FilterAllUnits ( [ [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) then
7354: LD_INT 101
7356: PUSH
7357: LD_INT 2
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 2
7366: PUSH
7367: LD_INT 30
7369: PUSH
7370: LD_INT 32
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 30
7379: PUSH
7380: LD_INT 33
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: LIST
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PPUSH
7396: CALL_OW 69
7400: IFFALSE 7412
// v := 3 else
7402: LD_ADDR_VAR 0 3
7406: PUSH
7407: LD_INT 3
7409: ST_TO_ADDR
7410: GO 7420
// v := 2 ;
7412: LD_ADDR_VAR 0 3
7416: PUSH
7417: LD_INT 2
7419: ST_TO_ADDR
// Say ( Heike , DH-Outpost- & rand ( 1 , v ) ) ;
7420: LD_EXP 46
7424: PPUSH
7425: LD_STRING DH-Outpost-
7427: PUSH
7428: LD_INT 1
7430: PPUSH
7431: LD_VAR 0 3
7435: PPUSH
7436: CALL_OW 12
7440: STR
7441: PPUSH
7442: CALL_OW 88
// DialogueOff ;
7446: CALL_OW 7
// end ;
7450: PPOPN 3
7452: END
// every 0 0$2 trigger IsInArea ( Heike , adminArea ) and not adminAreaDiscovered and not hasMuchin marked gameStartEvent do
7453: LD_EXP 46
7457: PPUSH
7458: LD_INT 19
7460: PPUSH
7461: CALL_OW 308
7465: PUSH
7466: LD_EXP 22
7470: NOT
7471: AND
7472: PUSH
7473: LD_EXP 30
7477: NOT
7478: AND
7479: IFFALSE 7552
7481: GO 7483
7483: DISABLE
// begin DialogueOn ;
7484: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
7488: LD_INT 152
7490: PPUSH
7491: LD_INT 115
7493: PPUSH
7494: LD_INT 2
7496: PPUSH
7497: LD_INT 16
7499: NEG
7500: PPUSH
7501: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
7505: LD_INT 152
7507: PPUSH
7508: LD_INT 115
7510: PPUSH
7511: LD_INT 2
7513: PPUSH
7514: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
7518: LD_INT 152
7520: PPUSH
7521: LD_INT 115
7523: PPUSH
7524: CALL_OW 86
// Say ( Heike , DH-Stealth-1 ) ;
7528: LD_EXP 46
7532: PPUSH
7533: LD_STRING DH-Stealth-1
7535: PPUSH
7536: CALL_OW 88
// DialogueOff ;
7540: CALL_OW 7
// adminAreaDiscovered := true ;
7544: LD_ADDR_EXP 22
7548: PUSH
7549: LD_INT 1
7551: ST_TO_ADDR
// end ;
7552: END
// every 0 0$1 trigger See ( 2 , Givi ) and GetDistUnits ( Heike , Givi ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7553: LD_INT 2
7555: PPUSH
7556: LD_EXP 47
7560: PPUSH
7561: CALL_OW 292
7565: PUSH
7566: LD_EXP 46
7570: PPUSH
7571: LD_EXP 47
7575: PPUSH
7576: CALL_OW 296
7580: PUSH
7581: LD_INT 6
7583: LESS
7584: AND
7585: PUSH
7586: LD_EXP 17
7590: NOT
7591: AND
7592: PUSH
7593: LD_EXP 30
7597: NOT
7598: AND
7599: IFFALSE 7705
7601: GO 7603
7603: DISABLE
// begin DialogueOn ;
7604: CALL_OW 6
// CenterNowOnUnits ( Givi ) ;
7608: LD_EXP 47
7612: PPUSH
7613: CALL_OW 87
// ComTurnUnit ( Givi , Heike ) ;
7617: LD_EXP 47
7621: PPUSH
7622: LD_EXP 46
7626: PPUSH
7627: CALL_OW 119
// ComTurnUnit ( Heike , Givi ) ;
7631: LD_EXP 46
7635: PPUSH
7636: LD_EXP 47
7640: PPUSH
7641: CALL_OW 119
// Say ( Heike , DH-Givi-1 ) ;
7645: LD_EXP 46
7649: PPUSH
7650: LD_STRING DH-Givi-1
7652: PPUSH
7653: CALL_OW 88
// Say ( Givi , DG-Givi-2 ) ;
7657: LD_EXP 47
7661: PPUSH
7662: LD_STRING DG-Givi-2
7664: PPUSH
7665: CALL_OW 88
// DialogueOff ;
7669: CALL_OW 7
// SetSide ( Givi , 2 ) ;
7673: LD_EXP 47
7677: PPUSH
7678: LD_INT 2
7680: PPUSH
7681: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Givi ) ;
7685: LD_ADDR_EXP 14
7689: PUSH
7690: LD_EXP 14
7694: PPUSH
7695: LD_EXP 47
7699: PPUSH
7700: CALL 66999 0 2
7704: ST_TO_ADDR
// end ;
7705: END
// every 0 0$1 trigger See ( 2 , Sophia ) and GetDistUnits ( Heike , Sophia ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7706: LD_INT 2
7708: PPUSH
7709: LD_EXP 52
7713: PPUSH
7714: CALL_OW 292
7718: PUSH
7719: LD_EXP 46
7723: PPUSH
7724: LD_EXP 52
7728: PPUSH
7729: CALL_OW 296
7733: PUSH
7734: LD_INT 6
7736: LESS
7737: AND
7738: PUSH
7739: LD_EXP 17
7743: NOT
7744: AND
7745: PUSH
7746: LD_EXP 30
7750: NOT
7751: AND
7752: IFFALSE 7858
7754: GO 7756
7756: DISABLE
// begin DialogueOn ;
7757: CALL_OW 6
// CenterNowOnUnits ( Sophia ) ;
7761: LD_EXP 52
7765: PPUSH
7766: CALL_OW 87
// ComTurnUnit ( Sophia , Heike ) ;
7770: LD_EXP 52
7774: PPUSH
7775: LD_EXP 46
7779: PPUSH
7780: CALL_OW 119
// ComTurnUnit ( Heike , Sophia ) ;
7784: LD_EXP 46
7788: PPUSH
7789: LD_EXP 52
7793: PPUSH
7794: CALL_OW 119
// Say ( Heike , DH-Sophia-1 ) ;
7798: LD_EXP 46
7802: PPUSH
7803: LD_STRING DH-Sophia-1
7805: PPUSH
7806: CALL_OW 88
// Say ( Sophia , DS-Sophia-2 ) ;
7810: LD_EXP 52
7814: PPUSH
7815: LD_STRING DS-Sophia-2
7817: PPUSH
7818: CALL_OW 88
// DialogueOff ;
7822: CALL_OW 7
// SetSide ( Sophia , 2 ) ;
7826: LD_EXP 52
7830: PPUSH
7831: LD_INT 2
7833: PPUSH
7834: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Sophia ) ;
7838: LD_ADDR_EXP 14
7842: PUSH
7843: LD_EXP 14
7847: PPUSH
7848: LD_EXP 52
7852: PPUSH
7853: CALL 66999 0 2
7857: ST_TO_ADDR
// end ;
7858: END
// every 0 0$1 trigger See ( 2 , Olaf ) and GetDistUnits ( Heike , Olaf ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do
7859: LD_INT 2
7861: PPUSH
7862: LD_EXP 54
7866: PPUSH
7867: CALL_OW 292
7871: PUSH
7872: LD_EXP 46
7876: PPUSH
7877: LD_EXP 54
7881: PPUSH
7882: CALL_OW 296
7886: PUSH
7887: LD_INT 6
7889: LESS
7890: AND
7891: PUSH
7892: LD_EXP 17
7896: NOT
7897: AND
7898: PUSH
7899: LD_EXP 30
7903: NOT
7904: AND
7905: IFFALSE 8001
7907: GO 7909
7909: DISABLE
// begin DialogueOn ;
7910: CALL_OW 6
// CenterNowOnUnits ( Olaf ) ;
7914: LD_EXP 54
7918: PPUSH
7919: CALL_OW 87
// Say ( Heike , DH-Olaf-1 ) ;
7923: LD_EXP 46
7927: PPUSH
7928: LD_STRING DH-Olaf-1
7930: PPUSH
7931: CALL_OW 88
// Say ( Olaf , DO-Olaf-2 ) ;
7935: LD_EXP 54
7939: PPUSH
7940: LD_STRING DO-Olaf-2
7942: PPUSH
7943: CALL_OW 88
// if explosionsTakenByRussians then
7947: LD_EXP 21
7951: IFFALSE 7965
// Say ( Olaf , DO-Olaf-a-3 ) ;
7953: LD_EXP 54
7957: PPUSH
7958: LD_STRING DO-Olaf-a-3
7960: PPUSH
7961: CALL_OW 88
// DialogueOff ;
7965: CALL_OW 7
// SetSide ( Olaf , 2 ) ;
7969: LD_EXP 54
7973: PPUSH
7974: LD_INT 2
7976: PPUSH
7977: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Olaf ) ;
7981: LD_ADDR_EXP 14
7985: PUSH
7986: LD_EXP 14
7990: PPUSH
7991: LD_EXP 54
7995: PPUSH
7996: CALL 66999 0 2
8000: ST_TO_ADDR
// end ;
8001: END
// every 0 0$1 trigger See ( 2 , Mike ) and GetDistUnits ( Heike , Mike ) < 6 and not isAlarm and not hasMuchin marked gameStartEvent do var i , xy ;
8002: LD_INT 2
8004: PPUSH
8005: LD_EXP 48
8009: PPUSH
8010: CALL_OW 292
8014: PUSH
8015: LD_EXP 46
8019: PPUSH
8020: LD_EXP 48
8024: PPUSH
8025: CALL_OW 296
8029: PUSH
8030: LD_INT 6
8032: LESS
8033: AND
8034: PUSH
8035: LD_EXP 17
8039: NOT
8040: AND
8041: PUSH
8042: LD_EXP 30
8046: NOT
8047: AND
8048: IFFALSE 8276
8050: GO 8052
8052: DISABLE
8053: LD_INT 0
8055: PPUSH
8056: PPUSH
// begin DialogueOn ;
8057: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
8061: LD_EXP 48
8065: PPUSH
8066: CALL_OW 87
// xy := AreaToList ( escapeRouteArea , 0 ) ;
8070: LD_ADDR_VAR 0 2
8074: PUSH
8075: LD_INT 18
8077: PPUSH
8078: LD_INT 0
8080: PPUSH
8081: CALL_OW 517
8085: ST_TO_ADDR
// for i := 1 to xy [ 1 ] do
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_VAR 0 2
8100: PUSH
8101: LD_INT 1
8103: ARRAY
8104: PUSH
8105: FOR_TO
8106: IFFALSE 8188
// begin PlaceSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 , - 3 ) ;
8108: LD_VAR 0 2
8112: PUSH
8113: LD_INT 1
8115: ARRAY
8116: PUSH
8117: LD_VAR 0 1
8121: ARRAY
8122: PPUSH
8123: LD_VAR 0 2
8127: PUSH
8128: LD_INT 2
8130: ARRAY
8131: PUSH
8132: LD_VAR 0 1
8136: ARRAY
8137: PPUSH
8138: LD_INT 2
8140: PPUSH
8141: LD_INT 3
8143: NEG
8144: PPUSH
8145: CALL_OW 330
// RemoveSeeing ( xy [ 1 ] [ i ] , xy [ 2 ] [ i ] , 2 ) ;
8149: LD_VAR 0 2
8153: PUSH
8154: LD_INT 1
8156: ARRAY
8157: PUSH
8158: LD_VAR 0 1
8162: ARRAY
8163: PPUSH
8164: LD_VAR 0 2
8168: PUSH
8169: LD_INT 2
8171: ARRAY
8172: PUSH
8173: LD_VAR 0 1
8177: ARRAY
8178: PPUSH
8179: LD_INT 2
8181: PPUSH
8182: CALL_OW 331
// end ;
8186: GO 8105
8188: POP
8189: POP
// Say ( Mike , DM-Mike-1 ) ;
8190: LD_EXP 48
8194: PPUSH
8195: LD_STRING DM-Mike-1
8197: PPUSH
8198: CALL_OW 88
// Say ( Heike , DH-Mike-2 ) ;
8202: LD_EXP 46
8206: PPUSH
8207: LD_STRING DH-Mike-2
8209: PPUSH
8210: CALL_OW 88
// CenterOnXY ( 78 , 104 ) ;
8214: LD_INT 78
8216: PPUSH
8217: LD_INT 104
8219: PPUSH
8220: CALL_OW 84
// dwait ( 0 0$1 ) ;
8224: LD_INT 35
8226: PPUSH
8227: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
8231: LD_EXP 46
8235: PPUSH
8236: CALL_OW 87
// DialogueOff ;
8240: CALL_OW 7
// SetSide ( Mike , 2 ) ;
8244: LD_EXP 48
8248: PPUSH
8249: LD_INT 2
8251: PPUSH
8252: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Mike ) ;
8256: LD_ADDR_EXP 14
8260: PUSH
8261: LD_EXP 14
8265: PPUSH
8266: LD_EXP 48
8270: PPUSH
8271: CALL 66999 0 2
8275: ST_TO_ADDR
// end ;
8276: PPOPN 2
8278: END
// every 0 0$1 trigger GetDistUnits ( Heike , Kaia ) < 6 and GetClass ( Kaia ) = 33 and not isAlarm and not hasMuchin and IsOk ( Kaia ) and heikeHasRevolver and Kaia in heikeSquad and GetSide ( Kaia ) = 2 marked gameStartEvent do
8279: LD_EXP 46
8283: PPUSH
8284: LD_EXP 51
8288: PPUSH
8289: CALL_OW 296
8293: PUSH
8294: LD_INT 6
8296: LESS
8297: PUSH
8298: LD_EXP 51
8302: PPUSH
8303: CALL_OW 257
8307: PUSH
8308: LD_INT 33
8310: EQUAL
8311: AND
8312: PUSH
8313: LD_EXP 17
8317: NOT
8318: AND
8319: PUSH
8320: LD_EXP 30
8324: NOT
8325: AND
8326: PUSH
8327: LD_EXP 51
8331: PPUSH
8332: CALL_OW 302
8336: AND
8337: PUSH
8338: LD_EXP 20
8342: AND
8343: PUSH
8344: LD_EXP 51
8348: PUSH
8349: LD_EXP 14
8353: IN
8354: AND
8355: PUSH
8356: LD_EXP 51
8360: PPUSH
8361: CALL_OW 255
8365: PUSH
8366: LD_INT 2
8368: EQUAL
8369: AND
8370: IFFALSE 8399
8372: GO 8374
8374: DISABLE
// begin DialogueOn ;
8375: CALL_OW 6
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
8379: LD_EXP 46
8383: PPUSH
8384: LD_STRING DH-Kaia-Revolver-2
8386: PPUSH
8387: CALL_OW 88
// SetClassKaiaRevolver ;
8391: CALL 1769 0 0
// DialogueOff ;
8395: CALL_OW 7
// end ;
8399: END
// every 0 0$3 trigger Ibrahim and Aviradze and GetSide ( Aviradze ) <> 2 and GetSide ( Ibrahim ) <> 2 and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not isAlarm and not hasMuchin marked gameStartEvent do var hasKaia , hasGivi ;
8400: LD_EXP 49
8404: PUSH
8405: LD_EXP 56
8409: AND
8410: PUSH
8411: LD_EXP 56
8415: PPUSH
8416: CALL_OW 255
8420: PUSH
8421: LD_INT 2
8423: NONEQUAL
8424: AND
8425: PUSH
8426: LD_EXP 49
8430: PPUSH
8431: CALL_OW 255
8435: PUSH
8436: LD_INT 2
8438: NONEQUAL
8439: AND
8440: PUSH
8441: LD_EXP 14
8445: PPUSH
8446: LD_INT 22
8448: PUSH
8449: LD_INT 2
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: PUSH
8461: LD_INT 5
8463: GREATER
8464: AND
8465: PUSH
8466: LD_EXP 17
8470: NOT
8471: AND
8472: PUSH
8473: LD_EXP 30
8477: NOT
8478: AND
8479: IFFALSE 9196
8481: GO 8483
8483: DISABLE
8484: LD_INT 0
8486: PPUSH
8487: PPUSH
// begin DialogueOn ;
8488: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
8492: LD_ADDR_VAR 0 2
8496: PUSH
8497: LD_EXP 47
8501: PPUSH
8502: CALL_OW 302
8506: PUSH
8507: LD_EXP 47
8511: PUSH
8512: LD_EXP 14
8516: IN
8517: AND
8518: PUSH
8519: LD_EXP 47
8523: PPUSH
8524: CALL_OW 255
8528: PUSH
8529: LD_INT 2
8531: EQUAL
8532: AND
8533: ST_TO_ADDR
// Say ( Heike , DH-Med-1 ) ;
8534: LD_EXP 46
8538: PPUSH
8539: LD_STRING DH-Med-1
8541: PPUSH
8542: CALL_OW 88
// if hasGivi then
8546: LD_VAR 0 2
8550: IFFALSE 8566
// Say ( Givi , DG-Med-2 ) else
8552: LD_EXP 47
8556: PPUSH
8557: LD_STRING DG-Med-2
8559: PPUSH
8560: CALL_OW 88
8564: GO 8671
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-2 ) then
8566: LD_EXP 14
8570: PUSH
8571: LD_EXP 57
8575: ISECT
8576: PPUSH
8577: LD_INT 22
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 26
8589: PUSH
8590: LD_INT 1
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PPUSH
8601: CALL_OW 72
8605: PUSH
8606: LD_INT 1
8608: ARRAY
8609: PPUSH
8610: LD_STRING DArm-Med-e-2
8612: PPUSH
8613: CALL_OW 88
8617: NOT
8618: IFFALSE 8671
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-2 ) ;
8620: LD_EXP 14
8624: PUSH
8625: LD_EXP 57
8629: ISECT
8630: PPUSH
8631: LD_INT 22
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 26
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 72
8659: PUSH
8660: LD_INT 1
8662: ARRAY
8663: PPUSH
8664: LD_STRING DArf-Med-e-2
8666: PPUSH
8667: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
8671: LD_INT 154
8673: PPUSH
8674: LD_INT 119
8676: PPUSH
8677: LD_INT 70
8679: PPUSH
8680: CALL 20012 0 3
// Say ( Heike , DH-Med-3 ) ;
8684: LD_EXP 46
8688: PPUSH
8689: LD_STRING DH-Med-3
8691: PPUSH
8692: CALL_OW 88
// if hasGivi then
8696: LD_VAR 0 2
8700: IFFALSE 8716
// Say ( Givi , DG-Med-4 ) else
8702: LD_EXP 47
8706: PPUSH
8707: LD_STRING DG-Med-4
8709: PPUSH
8710: CALL_OW 88
8714: GO 8821
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-e-4 ) then
8716: LD_EXP 14
8720: PUSH
8721: LD_EXP 57
8725: ISECT
8726: PPUSH
8727: LD_INT 22
8729: PUSH
8730: LD_INT 2
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_INT 26
8739: PUSH
8740: LD_INT 1
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PPUSH
8751: CALL_OW 72
8755: PUSH
8756: LD_INT 1
8758: ARRAY
8759: PPUSH
8760: LD_STRING DArm-Med-e-4
8762: PPUSH
8763: CALL_OW 88
8767: NOT
8768: IFFALSE 8821
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-e-4 ) ;
8770: LD_EXP 14
8774: PUSH
8775: LD_EXP 57
8779: ISECT
8780: PPUSH
8781: LD_INT 22
8783: PUSH
8784: LD_INT 2
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 26
8793: PUSH
8794: LD_INT 2
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 72
8809: PUSH
8810: LD_INT 1
8812: ARRAY
8813: PPUSH
8814: LD_STRING DArf-Med-e-4
8816: PPUSH
8817: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
8821: LD_ADDR_VAR 0 1
8825: PUSH
8826: LD_EXP 51
8830: PPUSH
8831: CALL_OW 302
8835: PUSH
8836: LD_EXP 51
8840: PUSH
8841: LD_EXP 14
8845: IN
8846: AND
8847: PUSH
8848: LD_EXP 51
8852: PPUSH
8853: CALL_OW 255
8857: PUSH
8858: LD_INT 2
8860: EQUAL
8861: AND
8862: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Kaia ) = 2 then
8863: LD_EXP 48
8867: PPUSH
8868: CALL_OW 302
8872: PUSH
8873: LD_EXP 48
8877: PUSH
8878: LD_EXP 14
8882: IN
8883: AND
8884: PUSH
8885: LD_EXP 51
8889: PPUSH
8890: CALL_OW 255
8894: PUSH
8895: LD_INT 2
8897: EQUAL
8898: AND
8899: IFFALSE 8931
// begin Say ( Mike , DM-Med-5 ) ;
8901: LD_EXP 48
8905: PPUSH
8906: LD_STRING DM-Med-5
8908: PPUSH
8909: CALL_OW 88
// if hasKaia then
8913: LD_VAR 0 1
8917: IFFALSE 8931
// Say ( Kaia , DK-Med-6 ) ;
8919: LD_EXP 51
8923: PPUSH
8924: LD_STRING DK-Med-6
8926: PPUSH
8927: CALL_OW 88
// end ; if hasKaia then
8931: LD_VAR 0 1
8935: IFFALSE 9176
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
8937: LD_INT 175
8939: PPUSH
8940: LD_INT 123
8942: PPUSH
8943: LD_INT 2
8945: PPUSH
8946: LD_INT 8
8948: NEG
8949: PPUSH
8950: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
8954: LD_INT 175
8956: PPUSH
8957: LD_INT 123
8959: PPUSH
8960: LD_INT 2
8962: PPUSH
8963: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
8967: LD_INT 175
8969: PPUSH
8970: LD_INT 123
8972: PPUSH
8973: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
8977: LD_EXP 51
8981: PPUSH
8982: LD_STRING DK-Med-7
8984: PPUSH
8985: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
8989: LD_EXP 51
8993: PPUSH
8994: LD_STRING DK-Med-8
8996: PPUSH
8997: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9001: LD_EXP 53
9005: PPUSH
9006: CALL_OW 302
9010: PUSH
9011: LD_EXP 53
9015: PUSH
9016: LD_EXP 14
9020: IN
9021: AND
9022: PUSH
9023: LD_EXP 53
9027: PPUSH
9028: CALL_OW 255
9032: PUSH
9033: LD_INT 2
9035: EQUAL
9036: AND
9037: IFFALSE 9095
// begin Say ( Markov , DMar-Med-9 ) ;
9039: LD_EXP 53
9043: PPUSH
9044: LD_STRING DMar-Med-9
9046: PPUSH
9047: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9051: LD_EXP 51
9055: PPUSH
9056: LD_STRING DK-Med-10
9058: PPUSH
9059: CALL_OW 88
// if hasGivi then
9063: LD_VAR 0 2
9067: IFFALSE 9083
// Say ( Kaia , DK-Med-11 ) else
9069: LD_EXP 51
9073: PPUSH
9074: LD_STRING DK-Med-11
9076: PPUSH
9077: CALL_OW 88
9081: GO 9095
// Say ( Kaia , DK-Med-a-11 ) ;
9083: LD_EXP 51
9087: PPUSH
9088: LD_STRING DK-Med-a-11
9090: PPUSH
9091: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9095: LD_EXP 50
9099: PPUSH
9100: CALL_OW 302
9104: PUSH
9105: LD_EXP 50
9109: PUSH
9110: LD_EXP 14
9114: IN
9115: AND
9116: PUSH
9117: LD_EXP 50
9121: PPUSH
9122: CALL_OW 255
9126: PUSH
9127: LD_INT 2
9129: EQUAL
9130: AND
9131: IFFALSE 9176
// begin Say ( Kamil , DKam-Med-12 ) ;
9133: LD_EXP 50
9137: PPUSH
9138: LD_STRING DKam-Med-12
9140: PPUSH
9141: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9145: LD_EXP 50
9149: PPUSH
9150: LD_STRING DKam-Med-13
9152: PPUSH
9153: CALL_OW 88
// if not hasExplosionCollected then
9157: LD_EXP 23
9161: NOT
9162: IFFALSE 9176
// Say ( Heike , DH-Med-d-14 ) ;
9164: LD_EXP 46
9168: PPUSH
9169: LD_STRING DH-Med-d-14
9171: PPUSH
9172: CALL_OW 88
// end ; end ; DialogueOff ;
9176: CALL_OW 7
// adminAreaDiscovered := true ;
9180: LD_ADDR_EXP 22
9184: PUSH
9185: LD_INT 1
9187: ST_TO_ADDR
// laundryAllowed := true ;
9188: LD_ADDR_EXP 26
9192: PUSH
9193: LD_INT 1
9195: ST_TO_ADDR
// end ;
9196: PPOPN 2
9198: END
// every 0 0$3 trigger not Ibrahim and Aviradze and not Aviradze in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9199: LD_EXP 49
9203: NOT
9204: PUSH
9205: LD_EXP 56
9209: AND
9210: PUSH
9211: LD_EXP 56
9215: PUSH
9216: LD_EXP 14
9220: IN
9221: NOT
9222: AND
9223: PUSH
9224: LD_EXP 14
9228: PPUSH
9229: LD_INT 22
9231: PUSH
9232: LD_INT 2
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: PPUSH
9239: CALL_OW 72
9243: PUSH
9244: LD_INT 4
9246: GREATER
9247: AND
9248: PUSH
9249: LD_EXP 17
9253: NOT
9254: AND
9255: PUSH
9256: LD_EXP 30
9260: NOT
9261: AND
9262: IFFALSE 9979
9264: GO 9266
9266: DISABLE
9267: LD_INT 0
9269: PPUSH
9270: PPUSH
// begin DialogueOn ;
9271: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
9275: LD_ADDR_VAR 0 1
9279: PUSH
9280: LD_EXP 47
9284: PPUSH
9285: CALL_OW 302
9289: PUSH
9290: LD_EXP 47
9294: PUSH
9295: LD_EXP 14
9299: IN
9300: AND
9301: PUSH
9302: LD_EXP 47
9306: PPUSH
9307: CALL_OW 255
9311: PUSH
9312: LD_INT 2
9314: EQUAL
9315: AND
9316: ST_TO_ADDR
// Say ( Heike , DH-Med-a-1 ) ;
9317: LD_EXP 46
9321: PPUSH
9322: LD_STRING DH-Med-a-1
9324: PPUSH
9325: CALL_OW 88
// if hasGivi then
9329: LD_VAR 0 1
9333: IFFALSE 9349
// Say ( Givi , DG-Med-a-2 ) else
9335: LD_EXP 47
9339: PPUSH
9340: LD_STRING DG-Med-a-2
9342: PPUSH
9343: CALL_OW 88
9347: GO 9454
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
9349: LD_EXP 14
9353: PUSH
9354: LD_EXP 57
9358: ISECT
9359: PPUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 2
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: PUSH
9370: LD_INT 26
9372: PUSH
9373: LD_INT 1
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PPUSH
9384: CALL_OW 72
9388: PUSH
9389: LD_INT 1
9391: ARRAY
9392: PPUSH
9393: LD_STRING DArm-Med-f-2
9395: PPUSH
9396: CALL_OW 88
9400: NOT
9401: IFFALSE 9454
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
9403: LD_EXP 14
9407: PUSH
9408: LD_EXP 57
9412: ISECT
9413: PPUSH
9414: LD_INT 22
9416: PUSH
9417: LD_INT 2
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 26
9426: PUSH
9427: LD_INT 2
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PPUSH
9438: CALL_OW 72
9442: PUSH
9443: LD_INT 1
9445: ARRAY
9446: PPUSH
9447: LD_STRING DArf-Med-f-2
9449: PPUSH
9450: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
9454: LD_INT 154
9456: PPUSH
9457: LD_INT 119
9459: PPUSH
9460: LD_INT 70
9462: PPUSH
9463: CALL 20012 0 3
// Say ( Heike , DH-Med-a-3 ) ;
9467: LD_EXP 46
9471: PPUSH
9472: LD_STRING DH-Med-a-3
9474: PPUSH
9475: CALL_OW 88
// if hasGivi then
9479: LD_VAR 0 1
9483: IFFALSE 9499
// Say ( Givi , DG-Med-a-4 ) else
9485: LD_EXP 47
9489: PPUSH
9490: LD_STRING DG-Med-a-4
9492: PPUSH
9493: CALL_OW 88
9497: GO 9604
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
9499: LD_EXP 14
9503: PUSH
9504: LD_EXP 57
9508: ISECT
9509: PPUSH
9510: LD_INT 22
9512: PUSH
9513: LD_INT 2
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 26
9522: PUSH
9523: LD_INT 1
9525: PUSH
9526: EMPTY
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PPUSH
9534: CALL_OW 72
9538: PUSH
9539: LD_INT 1
9541: ARRAY
9542: PPUSH
9543: LD_STRING DArm-Med-f-4
9545: PPUSH
9546: CALL_OW 88
9550: NOT
9551: IFFALSE 9604
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
9553: LD_EXP 14
9557: PUSH
9558: LD_EXP 57
9562: ISECT
9563: PPUSH
9564: LD_INT 22
9566: PUSH
9567: LD_INT 2
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 26
9576: PUSH
9577: LD_INT 2
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PPUSH
9588: CALL_OW 72
9592: PUSH
9593: LD_INT 1
9595: ARRAY
9596: PPUSH
9597: LD_STRING DArf-Med-f-4
9599: PPUSH
9600: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
9604: LD_ADDR_VAR 0 2
9608: PUSH
9609: LD_EXP 51
9613: PPUSH
9614: CALL_OW 302
9618: PUSH
9619: LD_EXP 51
9623: PUSH
9624: LD_EXP 14
9628: IN
9629: AND
9630: PUSH
9631: LD_EXP 51
9635: PPUSH
9636: CALL_OW 255
9640: PUSH
9641: LD_INT 2
9643: EQUAL
9644: AND
9645: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
9646: LD_EXP 48
9650: PPUSH
9651: CALL_OW 302
9655: PUSH
9656: LD_EXP 48
9660: PUSH
9661: LD_EXP 14
9665: IN
9666: AND
9667: PUSH
9668: LD_EXP 48
9672: PPUSH
9673: CALL_OW 255
9677: PUSH
9678: LD_INT 2
9680: EQUAL
9681: AND
9682: IFFALSE 9714
// begin Say ( Mike , DM-Med-5 ) ;
9684: LD_EXP 48
9688: PPUSH
9689: LD_STRING DM-Med-5
9691: PPUSH
9692: CALL_OW 88
// if hasKaia then
9696: LD_VAR 0 2
9700: IFFALSE 9714
// Say ( Kaia , DK-Med-6 ) ;
9702: LD_EXP 51
9706: PPUSH
9707: LD_STRING DK-Med-6
9709: PPUSH
9710: CALL_OW 88
// end ; if hasKaia then
9714: LD_VAR 0 2
9718: IFFALSE 9959
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
9720: LD_INT 175
9722: PPUSH
9723: LD_INT 123
9725: PPUSH
9726: LD_INT 2
9728: PPUSH
9729: LD_INT 8
9731: NEG
9732: PPUSH
9733: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
9737: LD_INT 175
9739: PPUSH
9740: LD_INT 123
9742: PPUSH
9743: LD_INT 2
9745: PPUSH
9746: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
9750: LD_INT 175
9752: PPUSH
9753: LD_INT 123
9755: PPUSH
9756: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
9760: LD_EXP 51
9764: PPUSH
9765: LD_STRING DK-Med-7
9767: PPUSH
9768: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
9772: LD_EXP 51
9776: PPUSH
9777: LD_STRING DK-Med-8
9779: PPUSH
9780: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
9784: LD_EXP 53
9788: PPUSH
9789: CALL_OW 302
9793: PUSH
9794: LD_EXP 53
9798: PUSH
9799: LD_EXP 14
9803: IN
9804: AND
9805: PUSH
9806: LD_EXP 53
9810: PPUSH
9811: CALL_OW 255
9815: PUSH
9816: LD_INT 2
9818: EQUAL
9819: AND
9820: IFFALSE 9878
// begin Say ( Markov , DMar-Med-9 ) ;
9822: LD_EXP 53
9826: PPUSH
9827: LD_STRING DMar-Med-9
9829: PPUSH
9830: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
9834: LD_EXP 51
9838: PPUSH
9839: LD_STRING DK-Med-10
9841: PPUSH
9842: CALL_OW 88
// if hasGivi then
9846: LD_VAR 0 1
9850: IFFALSE 9866
// Say ( Kaia , DK-Med-11 ) else
9852: LD_EXP 51
9856: PPUSH
9857: LD_STRING DK-Med-11
9859: PPUSH
9860: CALL_OW 88
9864: GO 9878
// Say ( Kaia , DK-Med-a-11 ) ;
9866: LD_EXP 51
9870: PPUSH
9871: LD_STRING DK-Med-a-11
9873: PPUSH
9874: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
9878: LD_EXP 50
9882: PPUSH
9883: CALL_OW 302
9887: PUSH
9888: LD_EXP 50
9892: PUSH
9893: LD_EXP 14
9897: IN
9898: AND
9899: PUSH
9900: LD_EXP 50
9904: PPUSH
9905: CALL_OW 255
9909: PUSH
9910: LD_INT 2
9912: EQUAL
9913: AND
9914: IFFALSE 9959
// begin Say ( Kamil , DKam-Med-12 ) ;
9916: LD_EXP 50
9920: PPUSH
9921: LD_STRING DKam-Med-12
9923: PPUSH
9924: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
9928: LD_EXP 50
9932: PPUSH
9933: LD_STRING DKam-Med-13
9935: PPUSH
9936: CALL_OW 88
// if not hasExplosionCollected then
9940: LD_EXP 23
9944: NOT
9945: IFFALSE 9959
// Say ( Heike , DH-Med-d-14 ) ;
9947: LD_EXP 46
9951: PPUSH
9952: LD_STRING DH-Med-d-14
9954: PPUSH
9955: CALL_OW 88
// end ; end ; DialogueOff ;
9959: CALL_OW 7
// adminAreaDiscovered := true ;
9963: LD_ADDR_EXP 22
9967: PUSH
9968: LD_INT 1
9970: ST_TO_ADDR
// laundryAllowed := true ;
9971: LD_ADDR_EXP 26
9975: PUSH
9976: LD_INT 1
9978: ST_TO_ADDR
// end ;
9979: PPOPN 2
9981: END
// every 0 0$3 trigger Ibrahim and not Aviradze and not Ibrahim in heikeSquad and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 4 and not isAlarm and not hasMuchin marked gameStartEvent do var hasGivi , hasKaia ;
9982: LD_EXP 49
9986: PUSH
9987: LD_EXP 56
9991: NOT
9992: AND
9993: PUSH
9994: LD_EXP 49
9998: PUSH
9999: LD_EXP 14
10003: IN
10004: NOT
10005: AND
10006: PUSH
10007: LD_EXP 14
10011: PPUSH
10012: LD_INT 22
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 72
10026: PUSH
10027: LD_INT 4
10029: GREATER
10030: AND
10031: PUSH
10032: LD_EXP 17
10036: NOT
10037: AND
10038: PUSH
10039: LD_EXP 30
10043: NOT
10044: AND
10045: IFFALSE 10762
10047: GO 10049
10049: DISABLE
10050: LD_INT 0
10052: PPUSH
10053: PPUSH
// begin DialogueOn ;
10054: CALL_OW 6
// hasGivi := IsOk ( Givi ) and Givi in heikeSquad and GetSide ( Givi ) = 2 ;
10058: LD_ADDR_VAR 0 1
10062: PUSH
10063: LD_EXP 47
10067: PPUSH
10068: CALL_OW 302
10072: PUSH
10073: LD_EXP 47
10077: PUSH
10078: LD_EXP 14
10082: IN
10083: AND
10084: PUSH
10085: LD_EXP 47
10089: PPUSH
10090: CALL_OW 255
10094: PUSH
10095: LD_INT 2
10097: EQUAL
10098: AND
10099: ST_TO_ADDR
// Say ( Heike , DH-Med-b-1 ) ;
10100: LD_EXP 46
10104: PPUSH
10105: LD_STRING DH-Med-b-1
10107: PPUSH
10108: CALL_OW 88
// if hasGivi then
10112: LD_VAR 0 1
10116: IFFALSE 10132
// Say ( Givi , DG-Med-a-2 ) else
10118: LD_EXP 47
10122: PPUSH
10123: LD_STRING DG-Med-a-2
10125: PPUSH
10126: CALL_OW 88
10130: GO 10237
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-2 ) then
10132: LD_EXP 14
10136: PUSH
10137: LD_EXP 57
10141: ISECT
10142: PPUSH
10143: LD_INT 22
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 26
10155: PUSH
10156: LD_INT 1
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: PPUSH
10167: CALL_OW 72
10171: PUSH
10172: LD_INT 1
10174: ARRAY
10175: PPUSH
10176: LD_STRING DArm-Med-f-2
10178: PPUSH
10179: CALL_OW 88
10183: NOT
10184: IFFALSE 10237
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-2 ) ;
10186: LD_EXP 14
10190: PUSH
10191: LD_EXP 57
10195: ISECT
10196: PPUSH
10197: LD_INT 22
10199: PUSH
10200: LD_INT 2
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 26
10209: PUSH
10210: LD_INT 2
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PPUSH
10221: CALL_OW 72
10225: PUSH
10226: LD_INT 1
10228: ARRAY
10229: PPUSH
10230: LD_STRING DArf-Med-f-2
10232: PPUSH
10233: CALL_OW 88
// ShowPlace ( 154 , 119 , 0 0$2 ) ;
10237: LD_INT 154
10239: PPUSH
10240: LD_INT 119
10242: PPUSH
10243: LD_INT 70
10245: PPUSH
10246: CALL 20012 0 3
// Say ( Heike , DH-Med-a-3 ) ;
10250: LD_EXP 46
10254: PPUSH
10255: LD_STRING DH-Med-a-3
10257: PPUSH
10258: CALL_OW 88
// if hasGivi then
10262: LD_VAR 0 1
10266: IFFALSE 10282
// Say ( Givi , DG-Med-a-4 ) else
10268: LD_EXP 47
10272: PPUSH
10273: LD_STRING DG-Med-a-4
10275: PPUSH
10276: CALL_OW 88
10280: GO 10387
// if not Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_male ] ] ) [ 1 ] , DArm-Med-f-4 ) then
10282: LD_EXP 14
10286: PUSH
10287: LD_EXP 57
10291: ISECT
10292: PPUSH
10293: LD_INT 22
10295: PUSH
10296: LD_INT 2
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 26
10305: PUSH
10306: LD_INT 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: PPUSH
10317: CALL_OW 72
10321: PUSH
10322: LD_INT 1
10324: ARRAY
10325: PPUSH
10326: LD_STRING DArm-Med-f-4
10328: PPUSH
10329: CALL_OW 88
10333: NOT
10334: IFFALSE 10387
// Say ( UnitFilter ( heikeSquad isect heikeSecondSquad , [ [ f_side , 2 ] , [ f_sex , sex_female ] ] ) [ 1 ] , DArf-Med-f-4 ) ;
10336: LD_EXP 14
10340: PUSH
10341: LD_EXP 57
10345: ISECT
10346: PPUSH
10347: LD_INT 22
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 26
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 72
10375: PUSH
10376: LD_INT 1
10378: ARRAY
10379: PPUSH
10380: LD_STRING DArf-Med-f-4
10382: PPUSH
10383: CALL_OW 88
// hasKaia := IsOk ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 ;
10387: LD_ADDR_VAR 0 2
10391: PUSH
10392: LD_EXP 51
10396: PPUSH
10397: CALL_OW 302
10401: PUSH
10402: LD_EXP 51
10406: PUSH
10407: LD_EXP 14
10411: IN
10412: AND
10413: PUSH
10414: LD_EXP 51
10418: PPUSH
10419: CALL_OW 255
10423: PUSH
10424: LD_INT 2
10426: EQUAL
10427: AND
10428: ST_TO_ADDR
// if IsOk ( Mike ) and Mike in heikeSquad and GetSide ( Mike ) = 2 then
10429: LD_EXP 48
10433: PPUSH
10434: CALL_OW 302
10438: PUSH
10439: LD_EXP 48
10443: PUSH
10444: LD_EXP 14
10448: IN
10449: AND
10450: PUSH
10451: LD_EXP 48
10455: PPUSH
10456: CALL_OW 255
10460: PUSH
10461: LD_INT 2
10463: EQUAL
10464: AND
10465: IFFALSE 10497
// begin Say ( Mike , DM-Med-5 ) ;
10467: LD_EXP 48
10471: PPUSH
10472: LD_STRING DM-Med-5
10474: PPUSH
10475: CALL_OW 88
// if hasKaia then
10479: LD_VAR 0 2
10483: IFFALSE 10497
// Say ( Kaia , DK-Med-6 ) ;
10485: LD_EXP 51
10489: PPUSH
10490: LD_STRING DK-Med-6
10492: PPUSH
10493: CALL_OW 88
// end ; if hasKaia then
10497: LD_VAR 0 2
10501: IFFALSE 10742
// begin PlaceSeeing ( 175 , 123 , 2 , - 8 ) ;
10503: LD_INT 175
10505: PPUSH
10506: LD_INT 123
10508: PPUSH
10509: LD_INT 2
10511: PPUSH
10512: LD_INT 8
10514: NEG
10515: PPUSH
10516: CALL_OW 330
// RemoveSeeing ( 175 , 123 , 2 ) ;
10520: LD_INT 175
10522: PPUSH
10523: LD_INT 123
10525: PPUSH
10526: LD_INT 2
10528: PPUSH
10529: CALL_OW 331
// CenterNowOnXY ( 175 , 123 ) ;
10533: LD_INT 175
10535: PPUSH
10536: LD_INT 123
10538: PPUSH
10539: CALL_OW 86
// Say ( Kaia , DK-Med-7 ) ;
10543: LD_EXP 51
10547: PPUSH
10548: LD_STRING DK-Med-7
10550: PPUSH
10551: CALL_OW 88
// Say ( Kaia , DK-Med-8 ) ;
10555: LD_EXP 51
10559: PPUSH
10560: LD_STRING DK-Med-8
10562: PPUSH
10563: CALL_OW 88
// if IsOk ( Markov ) and Markov in heikeSquad and GetSide ( Markov ) = 2 then
10567: LD_EXP 53
10571: PPUSH
10572: CALL_OW 302
10576: PUSH
10577: LD_EXP 53
10581: PUSH
10582: LD_EXP 14
10586: IN
10587: AND
10588: PUSH
10589: LD_EXP 53
10593: PPUSH
10594: CALL_OW 255
10598: PUSH
10599: LD_INT 2
10601: EQUAL
10602: AND
10603: IFFALSE 10661
// begin Say ( Markov , DMar-Med-9 ) ;
10605: LD_EXP 53
10609: PPUSH
10610: LD_STRING DMar-Med-9
10612: PPUSH
10613: CALL_OW 88
// Say ( Kaia , DK-Med-10 ) ;
10617: LD_EXP 51
10621: PPUSH
10622: LD_STRING DK-Med-10
10624: PPUSH
10625: CALL_OW 88
// if hasGivi then
10629: LD_VAR 0 1
10633: IFFALSE 10649
// Say ( Kaia , DK-Med-11 ) else
10635: LD_EXP 51
10639: PPUSH
10640: LD_STRING DK-Med-11
10642: PPUSH
10643: CALL_OW 88
10647: GO 10661
// Say ( Kaia , DK-Med-a-11 ) ;
10649: LD_EXP 51
10653: PPUSH
10654: LD_STRING DK-Med-a-11
10656: PPUSH
10657: CALL_OW 88
// end ; if IsOk ( Kamil ) and Kamil in heikeSquad and GetSide ( Kamil ) = 2 then
10661: LD_EXP 50
10665: PPUSH
10666: CALL_OW 302
10670: PUSH
10671: LD_EXP 50
10675: PUSH
10676: LD_EXP 14
10680: IN
10681: AND
10682: PUSH
10683: LD_EXP 50
10687: PPUSH
10688: CALL_OW 255
10692: PUSH
10693: LD_INT 2
10695: EQUAL
10696: AND
10697: IFFALSE 10742
// begin Say ( Kamil , DKam-Med-12 ) ;
10699: LD_EXP 50
10703: PPUSH
10704: LD_STRING DKam-Med-12
10706: PPUSH
10707: CALL_OW 88
// Say ( Kamil , DKam-Med-13 ) ;
10711: LD_EXP 50
10715: PPUSH
10716: LD_STRING DKam-Med-13
10718: PPUSH
10719: CALL_OW 88
// if not hasExplosionCollected then
10723: LD_EXP 23
10727: NOT
10728: IFFALSE 10742
// Say ( Heike , DH-Med-d-14 ) ;
10730: LD_EXP 46
10734: PPUSH
10735: LD_STRING DH-Med-d-14
10737: PPUSH
10738: CALL_OW 88
// end ; end ; DialogueOff ;
10742: CALL_OW 7
// adminAreaDiscovered := true ;
10746: LD_ADDR_EXP 22
10750: PUSH
10751: LD_INT 1
10753: ST_TO_ADDR
// laundryAllowed := true ;
10754: LD_ADDR_EXP 26
10758: PUSH
10759: LD_INT 1
10761: ST_TO_ADDR
// end ;
10762: PPOPN 2
10764: END
// every 0 0$1 trigger laundryAllowed do
10765: LD_EXP 26
10769: IFFALSE 10781
10771: GO 10773
10773: DISABLE
// ChangeMissionObjectives ( M1-laundry ) ;
10774: LD_STRING M1-laundry
10776: PPUSH
10777: CALL_OW 337
10781: END
// every 0 0$3 trigger not Ibrahim and not Aviradze and IsOk ( Olaf ) and Olaf in heikeSquad and GetSide ( Olaf ) = 2 and not isAlarm and not hasMuchin marked gameStartEvent do
10782: LD_EXP 49
10786: NOT
10787: PUSH
10788: LD_EXP 56
10792: NOT
10793: AND
10794: PUSH
10795: LD_EXP 54
10799: PPUSH
10800: CALL_OW 302
10804: AND
10805: PUSH
10806: LD_EXP 54
10810: PUSH
10811: LD_EXP 14
10815: IN
10816: AND
10817: PUSH
10818: LD_EXP 54
10822: PPUSH
10823: CALL_OW 255
10827: PUSH
10828: LD_INT 2
10830: EQUAL
10831: AND
10832: PUSH
10833: LD_EXP 17
10837: NOT
10838: AND
10839: PUSH
10840: LD_EXP 30
10844: NOT
10845: AND
10846: IFFALSE 11002
10848: GO 10850
10850: DISABLE
// begin DialogueOn ;
10851: CALL_OW 6
// PlaceSeeing ( 152 , 115 , 2 , - 16 ) ;
10855: LD_INT 152
10857: PPUSH
10858: LD_INT 115
10860: PPUSH
10861: LD_INT 2
10863: PPUSH
10864: LD_INT 16
10866: NEG
10867: PPUSH
10868: CALL_OW 330
// RemoveSeeing ( 152 , 115 , 2 ) ;
10872: LD_INT 152
10874: PPUSH
10875: LD_INT 115
10877: PPUSH
10878: LD_INT 2
10880: PPUSH
10881: CALL_OW 331
// CenterNowOnXY ( 152 , 115 ) ;
10885: LD_INT 152
10887: PPUSH
10888: LD_INT 115
10890: PPUSH
10891: CALL_OW 86
// Say ( Olaf , DO-Med-c-1 ) ;
10895: LD_EXP 54
10899: PPUSH
10900: LD_STRING DO-Med-c-1
10902: PPUSH
10903: CALL_OW 88
// if not hasExplosionCollected then
10907: LD_EXP 23
10911: NOT
10912: IFFALSE 10928
// Say ( Heike , DH-Med-d-14 ) else
10914: LD_EXP 46
10918: PPUSH
10919: LD_STRING DH-Med-d-14
10921: PPUSH
10922: CALL_OW 88
10926: GO 10990
// begin Say ( Heike , DH-Med-c-2 ) ;
10928: LD_EXP 46
10932: PPUSH
10933: LD_STRING DH-Med-c-2
10935: PPUSH
10936: CALL_OW 88
// if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
10940: LD_EXP 51
10944: PPUSH
10945: CALL_OW 302
10949: PUSH
10950: LD_EXP 51
10954: PUSH
10955: LD_EXP 14
10959: IN
10960: AND
10961: PUSH
10962: LD_EXP 51
10966: PPUSH
10967: CALL_OW 255
10971: PUSH
10972: LD_INT 2
10974: EQUAL
10975: AND
10976: IFFALSE 10990
// Say ( Kaia , DK-Med-c-3 ) ;
10978: LD_EXP 51
10982: PPUSH
10983: LD_STRING DK-Med-c-3
10985: PPUSH
10986: CALL_OW 88
// end ; DialogueOff ;
10990: CALL_OW 7
// adminAreaDiscovered := true ;
10994: LD_ADDR_EXP 22
10998: PUSH
10999: LD_INT 1
11001: ST_TO_ADDR
// end ;
11002: END
// every 0 0$1 trigger GetLives ( Kaia ) < 250 and Kaia in heikeSquad and isAlarm and hasStimDrugsCollected marked gameStartEvent do
11003: LD_EXP 51
11007: PPUSH
11008: CALL_OW 256
11012: PUSH
11013: LD_INT 250
11015: LESS
11016: PUSH
11017: LD_EXP 51
11021: PUSH
11022: LD_EXP 14
11026: IN
11027: AND
11028: PUSH
11029: LD_EXP 17
11033: AND
11034: PUSH
11035: LD_EXP 24
11039: AND
11040: IFFALSE 11169
11042: GO 11044
11044: DISABLE
// begin DialogueOn ;
11045: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
11049: LD_EXP 51
11053: PPUSH
11054: CALL_OW 87
// ForceSay ( Kaia , DK-death-1 ) ;
11058: LD_EXP 51
11062: PPUSH
11063: LD_STRING DK-death-1
11065: PPUSH
11066: CALL_OW 91
// Say ( Heike , DH-death-2 ) ;
11070: LD_EXP 46
11074: PPUSH
11075: LD_STRING DH-death-2
11077: PPUSH
11078: CALL_OW 88
// ForceSay ( Kaia , DK-death-3 ) ;
11082: LD_EXP 51
11086: PPUSH
11087: LD_STRING DK-death-3
11089: PPUSH
11090: CALL_OW 91
// ForceSay ( Kaia , DK-death-4 ) ;
11094: LD_EXP 51
11098: PPUSH
11099: LD_STRING DK-death-4
11101: PPUSH
11102: CALL_OW 91
// SetSide ( Kaia , 8 ) ;
11106: LD_EXP 51
11110: PPUSH
11111: LD_INT 8
11113: PPUSH
11114: CALL_OW 235
// ComStop ( Kaia ) ;
11118: LD_EXP 51
11122: PPUSH
11123: CALL_OW 141
// ChangeSideFog ( 8 , 2 ) ;
11127: LD_INT 8
11129: PPUSH
11130: LD_INT 2
11132: PPUSH
11133: CALL_OW 343
// heikeSquad := heikeSquad diff Kaia ;
11137: LD_ADDR_EXP 14
11141: PUSH
11142: LD_EXP 14
11146: PUSH
11147: LD_EXP 51
11151: DIFF
11152: ST_TO_ADDR
// DialogueOff ;
11153: CALL_OW 7
// Say ( Mike , DM-death-5 ) ;
11157: LD_EXP 48
11161: PPUSH
11162: LD_STRING DM-death-5
11164: PPUSH
11165: CALL_OW 88
// end ;
11169: END
// every 0 0$2 trigger not contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11170: LD_EXP 25
11174: NOT
11175: PUSH
11176: LD_EXP 30
11180: NOT
11181: AND
11182: PUSH
11183: LD_EXP 59
11187: PUSH
11188: LD_EXP 14
11192: IN
11193: NOT
11194: AND
11195: PUSH
11196: LD_INT 2
11198: PPUSH
11199: LD_EXP 59
11203: PPUSH
11204: CALL_OW 292
11208: AND
11209: PUSH
11210: LD_EXP 46
11214: PPUSH
11215: LD_EXP 59
11219: PPUSH
11220: CALL_OW 296
11224: PUSH
11225: LD_INT 6
11227: LESS
11228: AND
11229: PUSH
11230: LD_EXP 17
11234: NOT
11235: AND
11236: IFFALSE 11460
11238: GO 11240
11240: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11241: LD_EXP 59
11245: PPUSH
11246: LD_EXP 46
11250: PPUSH
11251: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11255: LD_EXP 46
11259: PPUSH
11260: LD_EXP 59
11264: PPUSH
11265: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11269: LD_INT 10
11271: PPUSH
11272: CALL_OW 67
// DialogueOn ;
11276: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11280: LD_EXP 59
11284: PPUSH
11285: CALL_OW 87
// Say ( Heike , DH-Deal-1 ) ;
11289: LD_EXP 46
11293: PPUSH
11294: LD_STRING DH-Deal-1
11296: PPUSH
11297: CALL_OW 88
// Say ( Harris , DJ-Deal-2 ) ;
11301: LD_EXP 59
11305: PPUSH
11306: LD_STRING DJ-Deal-2
11308: PPUSH
11309: CALL_OW 88
// Say ( Heike , DH-Deal-3 ) ;
11313: LD_EXP 46
11317: PPUSH
11318: LD_STRING DH-Deal-3
11320: PPUSH
11321: CALL_OW 88
// Say ( Harris , DJ-Deal-4 ) ;
11325: LD_EXP 59
11329: PPUSH
11330: LD_STRING DJ-Deal-4
11332: PPUSH
11333: CALL_OW 88
// Say ( Harris , DJ-Deal-5 ) ;
11337: LD_EXP 59
11341: PPUSH
11342: LD_STRING DJ-Deal-5
11344: PPUSH
11345: CALL_OW 88
// Say ( Harris , DJ-Deal-6 ) ;
11349: LD_EXP 59
11353: PPUSH
11354: LD_STRING DJ-Deal-6
11356: PPUSH
11357: CALL_OW 88
// Say ( Harris , DJ-Deal-7 ) ;
11361: LD_EXP 59
11365: PPUSH
11366: LD_STRING DJ-Deal-7
11368: PPUSH
11369: CALL_OW 88
// Say ( Heike , DH-Deal-8 ) ;
11373: LD_EXP 46
11377: PPUSH
11378: LD_STRING DH-Deal-8
11380: PPUSH
11381: CALL_OW 88
// Say ( Heike , DH-Deal-9 ) ;
11385: LD_EXP 46
11389: PPUSH
11390: LD_STRING DH-Deal-9
11392: PPUSH
11393: CALL_OW 88
// Say ( Harris , DJ-Deal-10 ) ;
11397: LD_EXP 59
11401: PPUSH
11402: LD_STRING DJ-Deal-10
11404: PPUSH
11405: CALL_OW 88
// DialogueOff ;
11409: CALL_OW 7
// contactWithAmerican := true ;
11413: LD_ADDR_EXP 25
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
11421: LD_STRING M1-american-out
11423: PPUSH
11424: CALL_OW 604
// SetSide ( Harris , 2 ) ;
11428: LD_EXP 59
11432: PPUSH
11433: LD_INT 2
11435: PPUSH
11436: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11440: LD_ADDR_EXP 14
11444: PUSH
11445: LD_EXP 14
11449: PPUSH
11450: LD_EXP 59
11454: PPUSH
11455: CALL 66999 0 2
11459: ST_TO_ADDR
// end ;
11460: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and not Harris in heikeSquad and See ( 2 , Harris ) and GetDistUnits ( Heike , Harris ) < 6 and not isAlarm marked gameStartEvent do
11461: LD_EXP 25
11465: PUSH
11466: LD_EXP 30
11470: NOT
11471: AND
11472: PUSH
11473: LD_EXP 59
11477: PUSH
11478: LD_EXP 14
11482: IN
11483: NOT
11484: AND
11485: PUSH
11486: LD_INT 2
11488: PPUSH
11489: LD_EXP 59
11493: PPUSH
11494: CALL_OW 292
11498: AND
11499: PUSH
11500: LD_EXP 46
11504: PPUSH
11505: LD_EXP 59
11509: PPUSH
11510: CALL_OW 296
11514: PUSH
11515: LD_INT 6
11517: LESS
11518: AND
11519: PUSH
11520: LD_EXP 17
11524: NOT
11525: AND
11526: IFFALSE 11651
11528: GO 11530
11530: DISABLE
// begin ComTurnUnit ( Harris , Heike ) ;
11531: LD_EXP 59
11535: PPUSH
11536: LD_EXP 46
11540: PPUSH
11541: CALL_OW 119
// ComTurnUnit ( Heike , Harris ) ;
11545: LD_EXP 46
11549: PPUSH
11550: LD_EXP 59
11554: PPUSH
11555: CALL_OW 119
// wait ( 0 0$0.3 ) ;
11559: LD_INT 10
11561: PPUSH
11562: CALL_OW 67
// DialogueOn ;
11566: CALL_OW 6
// CenterNowOnUnits ( Harris ) ;
11570: LD_EXP 59
11574: PPUSH
11575: CALL_OW 87
// Say ( Harris , DJ-Escort-1 ) ;
11579: LD_EXP 59
11583: PPUSH
11584: LD_STRING DJ-Escort-1
11586: PPUSH
11587: CALL_OW 88
// Say ( Heike , DH-Escort-2 ) ;
11591: LD_EXP 46
11595: PPUSH
11596: LD_STRING DH-Escort-2
11598: PPUSH
11599: CALL_OW 88
// Say ( Harris , DJ-Escort-3 ) ;
11603: LD_EXP 59
11607: PPUSH
11608: LD_STRING DJ-Escort-3
11610: PPUSH
11611: CALL_OW 88
// DialogueOff ;
11615: CALL_OW 7
// SetSide ( Harris , 2 ) ;
11619: LD_EXP 59
11623: PPUSH
11624: LD_INT 2
11626: PPUSH
11627: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Harris ) ;
11631: LD_ADDR_EXP 14
11635: PUSH
11636: LD_EXP 14
11640: PPUSH
11641: LD_EXP 59
11645: PPUSH
11646: CALL 66999 0 2
11650: ST_TO_ADDR
// end ;
11651: END
// every 0 0$2 trigger contactWithAmerican and not hasMuchin and UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_not , [ f_tag , tagCaptured ] ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11652: LD_EXP 25
11656: PUSH
11657: LD_EXP 30
11661: NOT
11662: AND
11663: PUSH
11664: LD_EXP 58
11668: PUSH
11669: LD_EXP 14
11673: DIFF
11674: PPUSH
11675: LD_INT 22
11677: PUSH
11678: LD_INT 4
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: LD_INT 120
11690: PUSH
11691: LD_INT 1
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: LD_INT 101
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: PPUSH
11717: CALL_OW 72
11721: AND
11722: PUSH
11723: LD_EXP 17
11727: NOT
11728: AND
11729: IFFALSE 11956
11731: GO 11733
11733: DISABLE
11734: LD_INT 0
11736: PPUSH
// begin enable ;
11737: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( americanSquad diff heikeSquad , [ [ f_side , 4 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
11738: LD_ADDR_VAR 0 1
11742: PUSH
11743: LD_EXP 58
11747: PUSH
11748: LD_EXP 14
11752: DIFF
11753: PPUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 4
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 91
11766: PUSH
11767: LD_EXP 46
11771: PUSH
11772: LD_INT 6
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 101
11782: PUSH
11783: LD_INT 2
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 72
11799: PPUSH
11800: LD_EXP 46
11804: PPUSH
11805: CALL_OW 74
11809: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
11810: LD_VAR 0 1
11814: PPUSH
11815: LD_EXP 46
11819: PPUSH
11820: CALL_OW 296
11824: PUSH
11825: LD_INT 6
11827: LESS
11828: IFFALSE 11956
// begin DialogueOn ;
11830: CALL_OW 6
// CenterNowOnUnits ( un ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
11843: LD_EXP 46
11847: PPUSH
11848: LD_STRING DH-USsol-1
11850: PPUSH
11851: CALL_OW 88
// if un <> Jerry then
11855: LD_VAR 0 1
11859: PUSH
11860: LD_EXP 61
11864: NONEQUAL
11865: IFFALSE 11908
// if GetSex ( un ) = sex_male then
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 258
11876: PUSH
11877: LD_INT 1
11879: EQUAL
11880: IFFALSE 11896
// Say ( un , DUSM-USsol-2 ) else
11882: LD_VAR 0 1
11886: PPUSH
11887: LD_STRING DUSM-USsol-2
11889: PPUSH
11890: CALL_OW 88
11894: GO 11908
// Say ( un , DUSF-USsol-2 ) ;
11896: LD_VAR 0 1
11900: PPUSH
11901: LD_STRING DUSF-USsol-2
11903: PPUSH
11904: CALL_OW 88
// DialogueOff ;
11908: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
11912: LD_ADDR_EXP 14
11916: PUSH
11917: LD_EXP 14
11921: PPUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL 66999 0 2
11931: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
11932: LD_VAR 0 1
11936: PPUSH
11937: LD_INT 1
11939: PPUSH
11940: CALL_OW 109
// SetSide ( un , 2 ) ;
11944: LD_VAR 0 1
11948: PPUSH
11949: LD_INT 2
11951: PPUSH
11952: CALL_OW 235
// end ; end ;
11956: PPOPN 1
11958: END
// every 0 0$2 trigger heikeSecondSquad and not hasMuchin and UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_not , [ f_tag , tagCaptured ] ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) and not isAlarm marked gameStartEvent do var un ;
11959: LD_EXP 57
11963: PUSH
11964: LD_EXP 30
11968: NOT
11969: AND
11970: PUSH
11971: LD_EXP 57
11975: PUSH
11976: LD_EXP 14
11980: DIFF
11981: PPUSH
11982: LD_INT 3
11984: PUSH
11985: LD_INT 120
11987: PUSH
11988: LD_INT 1
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 91
12001: PUSH
12002: LD_EXP 46
12006: PUSH
12007: LD_INT 6
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 101
12017: PUSH
12018: LD_INT 2
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 72
12034: AND
12035: PUSH
12036: LD_EXP 17
12040: NOT
12041: AND
12042: IFFALSE 12257
12044: GO 12046
12046: DISABLE
12047: LD_INT 0
12049: PPUSH
// begin enable ;
12050: ENABLE
// un := NearestUnitToUnit ( UnitFilter ( heikeSecondSquad diff heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 6 ] , [ f_see , 2 ] ] ) , Heike ) ;
12051: LD_ADDR_VAR 0 1
12055: PUSH
12056: LD_EXP 57
12060: PUSH
12061: LD_EXP 14
12065: DIFF
12066: PPUSH
12067: LD_INT 22
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: LD_INT 91
12079: PUSH
12080: LD_EXP 46
12084: PUSH
12085: LD_INT 6
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: PUSH
12093: LD_INT 101
12095: PUSH
12096: LD_INT 2
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: LIST
12107: PPUSH
12108: CALL_OW 72
12112: PPUSH
12113: LD_EXP 46
12117: PPUSH
12118: CALL_OW 74
12122: ST_TO_ADDR
// if GetDistUnits ( un , Heike ) < 6 then
12123: LD_VAR 0 1
12127: PPUSH
12128: LD_EXP 46
12132: PPUSH
12133: CALL_OW 296
12137: PUSH
12138: LD_INT 6
12140: LESS
12141: IFFALSE 12257
// begin DialogueOn ;
12143: CALL_OW 6
// CenterNowOnUnits ( un ) ;
12147: LD_VAR 0 1
12151: PPUSH
12152: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
12156: LD_EXP 46
12160: PPUSH
12161: LD_STRING DH-USsol-1
12163: PPUSH
12164: CALL_OW 88
// if GetSex ( un ) = sex_male then
12168: LD_VAR 0 1
12172: PPUSH
12173: CALL_OW 258
12177: PUSH
12178: LD_INT 1
12180: EQUAL
12181: IFFALSE 12197
// Say ( un , DArm-USsol-2 ) else
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_STRING DArm-USsol-2
12190: PPUSH
12191: CALL_OW 88
12195: GO 12209
// Say ( un , DArf-USsol-3 ) ;
12197: LD_VAR 0 1
12201: PPUSH
12202: LD_STRING DArf-USsol-3
12204: PPUSH
12205: CALL_OW 88
// DialogueOff ;
12209: CALL_OW 7
// heikeSquad := Join ( heikeSquad , un ) ;
12213: LD_ADDR_EXP 14
12217: PUSH
12218: LD_EXP 14
12222: PPUSH
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL 66999 0 2
12232: ST_TO_ADDR
// SetTag ( un , tagCaptured ) ;
12233: LD_VAR 0 1
12237: PPUSH
12238: LD_INT 1
12240: PPUSH
12241: CALL_OW 109
// SetSide ( un , 2 ) ;
12245: LD_VAR 0 1
12249: PPUSH
12250: LD_INT 2
12252: PPUSH
12253: CALL_OW 235
// end ; end ;
12257: PPOPN 1
12259: END
// every 0 0$2 trigger UnitFilter ( americanSquad , [ f_see , 2 ] ) and UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 5 and not americanContact and not hasMuchin and not contactWithAmerican and not isAlarm marked gameStartEvent do var un ;
12260: LD_EXP 58
12264: PPUSH
12265: LD_INT 101
12267: PUSH
12268: LD_INT 2
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PPUSH
12275: CALL_OW 72
12279: PUSH
12280: LD_EXP 14
12284: PPUSH
12285: LD_INT 22
12287: PUSH
12288: LD_INT 2
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 72
12299: PUSH
12300: LD_INT 5
12302: GREATER
12303: AND
12304: PUSH
12305: LD_EXP 10
12309: NOT
12310: AND
12311: PUSH
12312: LD_EXP 30
12316: NOT
12317: AND
12318: PUSH
12319: LD_EXP 25
12323: NOT
12324: AND
12325: PUSH
12326: LD_EXP 17
12330: NOT
12331: AND
12332: IFFALSE 12447
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
// begin un := UnitFilter ( americanSquad , [ [ f_side , 4 ] , [ f_see , 2 ] ] ) [ 1 ] ;
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: LD_EXP 58
12349: PPUSH
12350: LD_INT 22
12352: PUSH
12353: LD_INT 4
12355: PUSH
12356: EMPTY
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 101
12362: PUSH
12363: LD_INT 2
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PPUSH
12374: CALL_OW 72
12378: PUSH
12379: LD_INT 1
12381: ARRAY
12382: ST_TO_ADDR
// DialogueOn ;
12383: CALL_OW 6
// if GetSex ( un ) = sex_male then
12387: LD_VAR 0 1
12391: PPUSH
12392: CALL_OW 258
12396: PUSH
12397: LD_INT 1
12399: EQUAL
12400: IFFALSE 12416
// Say ( un , DUSm-USsol-a-2 ) else
12402: LD_VAR 0 1
12406: PPUSH
12407: LD_STRING DUSm-USsol-a-2
12409: PPUSH
12410: CALL_OW 88
12414: GO 12428
// Say ( un , DUSf-USsol-a-2 ) ;
12416: LD_VAR 0 1
12420: PPUSH
12421: LD_STRING DUSf-USsol-a-2
12423: PPUSH
12424: CALL_OW 88
// DialogueOff ;
12428: CALL_OW 7
// wait ( 0 0$2 ) ;
12432: LD_INT 70
12434: PPUSH
12435: CALL_OW 67
// isAlarm := true ;
12439: LD_ADDR_EXP 17
12443: PUSH
12444: LD_INT 1
12446: ST_TO_ADDR
// end ;
12447: PPOPN 1
12449: END
// every 0 0$2 trigger not isAlarm and IsOk ( Givi ) and GetSide ( Givi ) = 2 and laundryAllowed and not giviAsRussian and not heikeAsRussian and not hasMuchin and InEntrance ( Givi , laundry ) marked gameStartEvent do
12450: LD_EXP 17
12454: NOT
12455: PUSH
12456: LD_EXP 47
12460: PPUSH
12461: CALL_OW 302
12465: AND
12466: PUSH
12467: LD_EXP 47
12471: PPUSH
12472: CALL_OW 255
12476: PUSH
12477: LD_INT 2
12479: EQUAL
12480: AND
12481: PUSH
12482: LD_EXP 26
12486: AND
12487: PUSH
12488: LD_EXP 28
12492: NOT
12493: AND
12494: PUSH
12495: LD_EXP 27
12499: NOT
12500: AND
12501: PUSH
12502: LD_EXP 30
12506: NOT
12507: AND
12508: PUSH
12509: LD_EXP 47
12513: PPUSH
12514: LD_INT 165
12516: PPUSH
12517: CALL 20325 0 2
12521: AND
12522: IFFALSE 12654
12524: GO 12526
12526: DISABLE
// begin enable ;
12527: ENABLE
// InGameOn ;
12528: CALL_OW 8
// SetSide ( Givi , 5 ) ;
12532: LD_EXP 47
12536: PPUSH
12537: LD_INT 5
12539: PPUSH
12540: CALL_OW 235
// SetSide ( laundry , 5 ) ;
12544: LD_INT 165
12546: PPUSH
12547: LD_INT 5
12549: PPUSH
12550: CALL_OW 235
// ComEnterUnit ( Givi , laundry ) ;
12554: LD_EXP 47
12558: PPUSH
12559: LD_INT 165
12561: PPUSH
12562: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12566: LD_INT 35
12568: PPUSH
12569: CALL_OW 67
// until IsInUnit ( Givi ) ;
12573: LD_EXP 47
12577: PPUSH
12578: CALL_OW 310
12582: IFFALSE 12566
// case Query ( GiviInLaundry ) of 1 :
12584: LD_STRING GiviInLaundry
12586: PPUSH
12587: CALL_OW 97
12591: PUSH
12592: LD_INT 1
12594: DOUBLE
12595: EQUAL
12596: IFTRUE 12600
12598: GO 12607
12600: POP
// SpawnGiviAsRussian ; 2 :
12601: CALL 1918 0 0
12605: GO 12619
12607: LD_INT 2
12609: DOUBLE
12610: EQUAL
12611: IFTRUE 12615
12613: GO 12618
12615: POP
// ; end ;
12616: GO 12619
12618: POP
// ComExitBuilding ( Givi ) ;
12619: LD_EXP 47
12623: PPUSH
12624: CALL_OW 122
// SetSide ( Givi , 2 ) ;
12628: LD_EXP 47
12632: PPUSH
12633: LD_INT 2
12635: PPUSH
12636: CALL_OW 235
// SetSide ( laundry , 3 ) ;
12640: LD_INT 165
12642: PPUSH
12643: LD_INT 3
12645: PPUSH
12646: CALL_OW 235
// InGameOff ;
12650: CALL_OW 9
// end ;
12654: END
// every 0 0$2 trigger not isAlarm and giviAsRussian and GetSide ( Givi ) = 2 and GetNation ( Givi ) = nation_russian and InEntrance ( Givi , ruLab ) and not hasMuchin marked gameStartEvent do
12655: LD_EXP 17
12659: NOT
12660: PUSH
12661: LD_EXP 28
12665: AND
12666: PUSH
12667: LD_EXP 47
12671: PPUSH
12672: CALL_OW 255
12676: PUSH
12677: LD_INT 2
12679: EQUAL
12680: AND
12681: PUSH
12682: LD_EXP 47
12686: PPUSH
12687: CALL_OW 248
12691: PUSH
12692: LD_INT 3
12694: EQUAL
12695: AND
12696: PUSH
12697: LD_EXP 47
12701: PPUSH
12702: LD_INT 119
12704: PPUSH
12705: CALL 20325 0 2
12709: AND
12710: PUSH
12711: LD_EXP 30
12715: NOT
12716: AND
12717: IFFALSE 12971
12719: GO 12721
12721: DISABLE
// begin InGameOn ;
12722: CALL_OW 8
// SetSide ( Givi , 3 ) ;
12726: LD_EXP 47
12730: PPUSH
12731: LD_INT 3
12733: PPUSH
12734: CALL_OW 235
// wait ( 0 0$0.3 ) ;
12738: LD_INT 10
12740: PPUSH
12741: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12745: LD_EXP 47
12749: PPUSH
12750: LD_INT 119
12752: PPUSH
12753: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
12757: LD_INT 35
12759: PPUSH
12760: CALL_OW 67
// ComEnterUnit ( Givi , ruLab ) ;
12764: LD_EXP 47
12768: PPUSH
12769: LD_INT 119
12771: PPUSH
12772: CALL_OW 120
// until IsInUnit ( Givi ) ;
12776: LD_EXP 47
12780: PPUSH
12781: CALL_OW 310
12785: IFFALSE 12757
// DialogueOn ;
12787: CALL_OW 6
// Say ( Givi , DG-Captive-1 ) ;
12791: LD_EXP 47
12795: PPUSH
12796: LD_STRING DG-Captive-1
12798: PPUSH
12799: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-2 ) ;
12803: LD_EXP 65
12807: PPUSH
12808: LD_STRING DCom-Captive-2
12810: PPUSH
12811: CALL_OW 88
// Say ( Givi , DG-Captive-3 ) ;
12815: LD_EXP 47
12819: PPUSH
12820: LD_STRING DG-Captive-3
12822: PPUSH
12823: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-4 ) ;
12827: LD_EXP 65
12831: PPUSH
12832: LD_STRING DCom-Captive-4
12834: PPUSH
12835: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
12839: LD_EXP 65
12843: PPUSH
12844: CALL_OW 64
// DialogueOff ;
12848: CALL_OW 7
// InGameOff ;
12852: CALL_OW 9
// SetSide ( Givi , 2 ) ;
12856: LD_EXP 47
12860: PPUSH
12861: LD_INT 2
12863: PPUSH
12864: CALL_OW 235
// ComExitBuilding ( Givi ) ;
12868: LD_EXP 47
12872: PPUSH
12873: CALL_OW 122
// if Aviradze then
12877: LD_EXP 56
12881: IFFALSE 12924
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
12883: LD_ADDR_EXP 14
12887: PUSH
12888: LD_EXP 14
12892: PPUSH
12893: LD_EXP 56
12897: PPUSH
12898: CALL 66999 0 2
12902: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
12903: LD_EXP 56
12907: PPUSH
12908: LD_INT 2
12910: PPUSH
12911: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
12915: LD_EXP 56
12919: PPUSH
12920: CALL_OW 122
// end ; if Ibrahim then
12924: LD_EXP 49
12928: IFFALSE 12971
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
12930: LD_ADDR_EXP 14
12934: PUSH
12935: LD_EXP 14
12939: PPUSH
12940: LD_EXP 49
12944: PPUSH
12945: CALL 66999 0 2
12949: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
12950: LD_EXP 49
12954: PPUSH
12955: LD_INT 2
12957: PPUSH
12958: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
12962: LD_EXP 49
12966: PPUSH
12967: CALL_OW 122
// end ; end ;
12971: END
// every 0 0$2 trigger not isAlarm and heikeAsRussian and GetNation ( Heike ) = nation_russian and InEntrance ( Heike , ruLab ) and not hasMuchin marked gameStartEvent do
12972: LD_EXP 17
12976: NOT
12977: PUSH
12978: LD_EXP 27
12982: AND
12983: PUSH
12984: LD_EXP 46
12988: PPUSH
12989: CALL_OW 248
12993: PUSH
12994: LD_INT 3
12996: EQUAL
12997: AND
12998: PUSH
12999: LD_EXP 46
13003: PPUSH
13004: LD_INT 119
13006: PPUSH
13007: CALL 20325 0 2
13011: AND
13012: PUSH
13013: LD_EXP 30
13017: NOT
13018: AND
13019: IFFALSE 13318
13021: GO 13023
13023: DISABLE
// begin InGameOn ;
13024: CALL_OW 8
// SetSide ( Heike , 3 ) ;
13028: LD_EXP 46
13032: PPUSH
13033: LD_INT 3
13035: PPUSH
13036: CALL_OW 235
// wait ( 0 0$0.3 ) ;
13040: LD_INT 10
13042: PPUSH
13043: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13047: LD_EXP 46
13051: PPUSH
13052: LD_INT 119
13054: PPUSH
13055: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
13059: LD_INT 35
13061: PPUSH
13062: CALL_OW 67
// ComEnterUnit ( Heike , ruLab ) ;
13066: LD_EXP 46
13070: PPUSH
13071: LD_INT 119
13073: PPUSH
13074: CALL_OW 120
// until IsInUnit ( Heike ) ;
13078: LD_EXP 46
13082: PPUSH
13083: CALL_OW 310
13087: IFFALSE 13059
// wait ( 0 0$1 ) ;
13089: LD_INT 35
13091: PPUSH
13092: CALL_OW 67
// DialogueOn ;
13096: CALL_OW 6
// if Aviradze and Ibrahim then
13100: LD_EXP 56
13104: PUSH
13105: LD_EXP 49
13109: AND
13110: IFFALSE 13126
// Say ( Heike , DH-Captive-a-1 ) else
13112: LD_EXP 46
13116: PPUSH
13117: LD_STRING DH-Captive-a-1
13119: PPUSH
13120: CALL_OW 88
13124: GO 13138
// Say ( Heike , DH-Captive-a-b-1 ) ;
13126: LD_EXP 46
13130: PPUSH
13131: LD_STRING DH-Captive-a-b-1
13133: PPUSH
13134: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-2 ) ;
13138: LD_EXP 65
13142: PPUSH
13143: LD_STRING DCom-Captive-a-2
13145: PPUSH
13146: CALL_OW 88
// Say ( Heike , DH-Captive-a-3 ) ;
13150: LD_EXP 46
13154: PPUSH
13155: LD_STRING DH-Captive-a-3
13157: PPUSH
13158: CALL_OW 88
// Say ( ruCommisar , DCom-Captive-a-4 ) ;
13162: LD_EXP 65
13166: PPUSH
13167: LD_STRING DCom-Captive-a-4
13169: PPUSH
13170: CALL_OW 88
// Say ( Heike , DH-Captive-a-5 ) ;
13174: LD_EXP 46
13178: PPUSH
13179: LD_STRING DH-Captive-a-5
13181: PPUSH
13182: CALL_OW 88
// RemoveUnit ( ruCommisar ) ;
13186: LD_EXP 65
13190: PPUSH
13191: CALL_OW 64
// DialogueOff ;
13195: CALL_OW 7
// InGameOff ;
13199: CALL_OW 9
// SetSide ( Heike , 2 ) ;
13203: LD_EXP 46
13207: PPUSH
13208: LD_INT 2
13210: PPUSH
13211: CALL_OW 235
// ComExitBuilding ( Heike ) ;
13215: LD_EXP 46
13219: PPUSH
13220: CALL_OW 122
// if Aviradze then
13224: LD_EXP 56
13228: IFFALSE 13271
// begin heikeSquad := Join ( heikeSquad , Aviradze ) ;
13230: LD_ADDR_EXP 14
13234: PUSH
13235: LD_EXP 14
13239: PPUSH
13240: LD_EXP 56
13244: PPUSH
13245: CALL 66999 0 2
13249: ST_TO_ADDR
// SetSide ( Aviradze , 2 ) ;
13250: LD_EXP 56
13254: PPUSH
13255: LD_INT 2
13257: PPUSH
13258: CALL_OW 235
// ComExitBuilding ( Aviradze ) ;
13262: LD_EXP 56
13266: PPUSH
13267: CALL_OW 122
// end ; if Ibrahim then
13271: LD_EXP 49
13275: IFFALSE 13318
// begin heikeSquad := Join ( heikeSquad , Ibrahim ) ;
13277: LD_ADDR_EXP 14
13281: PUSH
13282: LD_EXP 14
13286: PPUSH
13287: LD_EXP 49
13291: PPUSH
13292: CALL 66999 0 2
13296: ST_TO_ADDR
// SetSide ( Ibrahim , 2 ) ;
13297: LD_EXP 49
13301: PPUSH
13302: LD_INT 2
13304: PPUSH
13305: CALL_OW 235
// ComExitBuilding ( Ibrahim ) ;
13309: LD_EXP 49
13313: PPUSH
13314: CALL_OW 122
// end ; end ;
13318: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ) do
13319: LD_INT 2
13321: PUSH
13322: LD_INT 25
13324: PUSH
13325: LD_INT 32
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 25
13334: PUSH
13335: LD_INT 34
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: PPUSH
13347: CALL_OW 69
13351: IFFALSE 13363
13353: GO 13355
13355: DISABLE
// ChangeMissionObjectives_Silent ( M1-weapons-out ) ;
13356: LD_STRING M1-weapons-out
13358: PPUSH
13359: CALL_OW 604
13363: END
// every 0 0$2 trigger See ( 2 , Jerry ) and GetDistUnits ( Heike , Jerry ) and not isAlarm and not hasMuchin marked gameStartEvent do var i , foodDelivered ;
13364: LD_INT 2
13366: PPUSH
13367: LD_EXP 61
13371: PPUSH
13372: CALL_OW 292
13376: PUSH
13377: LD_EXP 46
13381: PPUSH
13382: LD_EXP 61
13386: PPUSH
13387: CALL_OW 296
13391: AND
13392: PUSH
13393: LD_EXP 17
13397: NOT
13398: AND
13399: PUSH
13400: LD_EXP 30
13404: NOT
13405: AND
13406: IFFALSE 14264
13408: GO 13410
13410: DISABLE
13411: LD_INT 0
13413: PPUSH
13414: PPUSH
// begin if contactWithAmerican then
13415: LD_EXP 25
13419: IFFALSE 13516
// begin DialogueOn ;
13421: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13425: LD_EXP 61
13429: PPUSH
13430: CALL_OW 87
// Say ( Heike , DH-USsol-1 ) ;
13434: LD_EXP 46
13438: PPUSH
13439: LD_STRING DH-USsol-1
13441: PPUSH
13442: CALL_OW 88
// SetSide ( Jerry , 2 ) ;
13446: LD_EXP 61
13450: PPUSH
13451: LD_INT 2
13453: PPUSH
13454: CALL_OW 235
// americanSquad := Join ( americanSquad , Jerry ) ;
13458: LD_ADDR_EXP 58
13462: PUSH
13463: LD_EXP 58
13467: PPUSH
13468: LD_EXP 61
13472: PPUSH
13473: CALL 66999 0 2
13477: ST_TO_ADDR
// heikeSquad := Join ( heikeSquad , Mike ) ;
13478: LD_ADDR_EXP 14
13482: PUSH
13483: LD_EXP 14
13487: PPUSH
13488: LD_EXP 48
13492: PPUSH
13493: CALL 66999 0 2
13497: ST_TO_ADDR
// SetTag ( Jerry , tagCaptured ) ;
13498: LD_EXP 61
13502: PPUSH
13503: LD_INT 1
13505: PPUSH
13506: CALL_OW 109
// DialogueOff ;
13510: CALL_OW 7
// exit ;
13514: GO 14264
// end ; DialogueOn ;
13516: CALL_OW 6
// CenterNowOnUnits ( Jerry ) ;
13520: LD_EXP 61
13524: PPUSH
13525: CALL_OW 87
// Say ( Jerry , DJy-Food-1 ) ;
13529: LD_EXP 61
13533: PPUSH
13534: LD_STRING DJy-Food-1
13536: PPUSH
13537: CALL_OW 88
// Say ( Heike , DH-Food-2 ) ;
13541: LD_EXP 46
13545: PPUSH
13546: LD_STRING DH-Food-2
13548: PPUSH
13549: CALL_OW 88
// Say ( Jerry , DJy-Food-3 ) ;
13553: LD_EXP 61
13557: PPUSH
13558: LD_STRING DJy-Food-3
13560: PPUSH
13561: CALL_OW 88
// Say ( Jerry , DJy-Food-4 ) ;
13565: LD_EXP 61
13569: PPUSH
13570: LD_STRING DJy-Food-4
13572: PPUSH
13573: CALL_OW 88
// Say ( Heike , DH-Food-5 ) ;
13577: LD_EXP 46
13581: PPUSH
13582: LD_STRING DH-Food-5
13584: PPUSH
13585: CALL_OW 88
// Say ( Jerry , DJy-Food-6 ) ;
13589: LD_EXP 61
13593: PPUSH
13594: LD_STRING DJy-Food-6
13596: PPUSH
13597: CALL_OW 88
// Say ( Jerry , DJy-Food-7 ) ;
13601: LD_EXP 61
13605: PPUSH
13606: LD_STRING DJy-Food-7
13608: PPUSH
13609: CALL_OW 88
// Say ( Jerry , DJy-Food-8 ) ;
13613: LD_EXP 61
13617: PPUSH
13618: LD_STRING DJy-Food-8
13620: PPUSH
13621: CALL_OW 88
// Say ( Heike , DH-Food-9 ) ;
13625: LD_EXP 46
13629: PPUSH
13630: LD_STRING DH-Food-9
13632: PPUSH
13633: CALL_OW 88
// Say ( Jerry , DJy-Food-10 ) ;
13637: LD_EXP 61
13641: PPUSH
13642: LD_STRING DJy-Food-10
13644: PPUSH
13645: CALL_OW 88
// Say ( Heike , DH-Food-11 ) ;
13649: LD_EXP 46
13653: PPUSH
13654: LD_STRING DH-Food-11
13656: PPUSH
13657: CALL_OW 88
// DialogueOff ;
13661: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13665: LD_STRING M3
13667: PPUSH
13668: CALL_OW 337
// CreateCratesXY ( 5 , 215 , 117 , false ) ;
13672: LD_INT 5
13674: PPUSH
13675: LD_INT 215
13677: PPUSH
13678: LD_INT 117
13680: PPUSH
13681: LD_INT 0
13683: PPUSH
13684: CALL_OW 54
// PlaceSeeing ( 215 , 118 , 2 , - 6 ) ;
13688: LD_INT 215
13690: PPUSH
13691: LD_INT 118
13693: PPUSH
13694: LD_INT 2
13696: PPUSH
13697: LD_INT 6
13699: NEG
13700: PPUSH
13701: CALL_OW 330
// RemoveSeeing ( 215 , 118 , 2 ) ;
13705: LD_INT 215
13707: PPUSH
13708: LD_INT 118
13710: PPUSH
13711: LD_INT 2
13713: PPUSH
13714: CALL_OW 331
// foodDelivered := false ;
13718: LD_ADDR_VAR 0 2
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13726: LD_INT 35
13728: PPUSH
13729: CALL_OW 67
// if hasMuchin then
13733: LD_EXP 30
13737: IFFALSE 13741
// continue ;
13739: GO 13726
// for i in UnitFilter ( heikeSquad union Heike , [ [ f_dist , Jerry , 6 ] , [ f_class , class_prison ] ] ) do
13741: LD_ADDR_VAR 0 1
13745: PUSH
13746: LD_EXP 14
13750: PUSH
13751: LD_EXP 46
13755: UNION
13756: PPUSH
13757: LD_INT 91
13759: PUSH
13760: LD_EXP 61
13764: PUSH
13765: LD_INT 6
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 25
13775: PUSH
13776: LD_INT 33
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PPUSH
13787: CALL_OW 72
13791: PUSH
13792: FOR_IN
13793: IFFALSE 13993
// if Carry ( i ) then
13795: LD_VAR 0 1
13799: PPUSH
13800: CALL_OW 281
13804: IFFALSE 13991
// begin DialogueOn ;
13806: CALL_OW 6
// foodDelivered := true ;
13810: LD_ADDR_VAR 0 2
13814: PUSH
13815: LD_INT 1
13817: ST_TO_ADDR
// case i of Heike :
13818: LD_VAR 0 1
13822: PUSH
13823: LD_EXP 46
13827: DOUBLE
13828: EQUAL
13829: IFTRUE 13833
13831: GO 13848
13833: POP
// Say ( Heike , DH-Food-12 ) ; Kaia :
13834: LD_EXP 46
13838: PPUSH
13839: LD_STRING DH-Food-12
13841: PPUSH
13842: CALL_OW 88
13846: GO 13974
13848: LD_EXP 51
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 13873
13858: POP
// Say ( Kaia , DK-Food-a-12 ) ; Markov :
13859: LD_EXP 51
13863: PPUSH
13864: LD_STRING DK-Food-a-12
13866: PPUSH
13867: CALL_OW 88
13871: GO 13974
13873: LD_EXP 53
13877: DOUBLE
13878: EQUAL
13879: IFTRUE 13883
13881: GO 13898
13883: POP
// Say ( Markov , DMar-Food-a-12 ) ; Givi :
13884: LD_EXP 53
13888: PPUSH
13889: LD_STRING DMar-Food-a-12
13891: PPUSH
13892: CALL_OW 88
13896: GO 13974
13898: LD_EXP 47
13902: DOUBLE
13903: EQUAL
13904: IFTRUE 13908
13906: GO 13923
13908: POP
// Say ( Givi , DG-Food-a-14 ) ; Mike :
13909: LD_EXP 47
13913: PPUSH
13914: LD_STRING DG-Food-a-14
13916: PPUSH
13917: CALL_OW 88
13921: GO 13974
13923: LD_EXP 48
13927: DOUBLE
13928: EQUAL
13929: IFTRUE 13933
13931: GO 13948
13933: POP
// Say ( Mike , DM-Food-a-15 ) ; Kamil :
13934: LD_EXP 48
13938: PPUSH
13939: LD_STRING DM-Food-a-15
13941: PPUSH
13942: CALL_OW 88
13946: GO 13974
13948: LD_EXP 50
13952: DOUBLE
13953: EQUAL
13954: IFTRUE 13958
13956: GO 13973
13958: POP
// Say ( Kamil , DKam-Food-a-16 ) ; end ;
13959: LD_EXP 50
13963: PPUSH
13964: LD_STRING DKam-Food-a-16
13966: PPUSH
13967: CALL_OW 88
13971: GO 13974
13973: POP
// SetCargo ( i , mat_cans , 0 ) ;
13974: LD_VAR 0 1
13978: PPUSH
13979: LD_INT 1
13981: PPUSH
13982: LD_INT 0
13984: PPUSH
13985: CALL_OW 290
// break ;
13989: GO 13993
// end ;
13991: GO 13792
13993: POP
13994: POP
// until foodDelivered ;
13995: LD_VAR 0 2
13999: IFFALSE 13726
// givenFood := true ;
14001: LD_ADDR_EXP 33
14005: PUSH
14006: LD_INT 1
14008: ST_TO_ADDR
// Say ( Jerry , DJy-Food-13 ) ;
14009: LD_EXP 61
14013: PPUSH
14014: LD_STRING DJy-Food-13
14016: PPUSH
14017: CALL_OW 88
// hasVirus := true ;
14021: LD_ADDR_EXP 31
14025: PUSH
14026: LD_INT 1
14028: ST_TO_ADDR
// if not americanContact then
14029: LD_EXP 10
14033: NOT
14034: IFFALSE 14084
// begin Say ( Heike , DH-Food-14 ) ;
14036: LD_EXP 46
14040: PPUSH
14041: LD_STRING DH-Food-14
14043: PPUSH
14044: CALL_OW 88
// Say ( Jerry , DJy-Food-15 ) ;
14048: LD_EXP 61
14052: PPUSH
14053: LD_STRING DJy-Food-15
14055: PPUSH
14056: CALL_OW 88
// Say ( Jerry , DJy-Food-16 ) ;
14060: LD_EXP 61
14064: PPUSH
14065: LD_STRING DJy-Food-16
14067: PPUSH
14068: CALL_OW 88
// Say ( Jerry , DJy-Food-17 ) ;
14072: LD_EXP 61
14076: PPUSH
14077: LD_STRING DJy-Food-17
14079: PPUSH
14080: CALL_OW 88
// end ; ChangeMissionObjectives ( M3-out ) ;
14084: LD_STRING M3-out
14086: PPUSH
14087: CALL_OW 337
// DialogueOff ;
14091: CALL_OW 7
// SetCargo ( Jerry , mat_cans , 10 ) ;
14095: LD_EXP 61
14099: PPUSH
14100: LD_INT 1
14102: PPUSH
14103: LD_INT 10
14105: PPUSH
14106: CALL_OW 290
// ComMoveXY ( Jerry , 95 , 17 ) ;
14110: LD_EXP 61
14114: PPUSH
14115: LD_INT 95
14117: PPUSH
14118: LD_INT 17
14120: PPUSH
14121: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
14125: LD_INT 35
14127: PPUSH
14128: CALL_OW 67
// if not HasTask ( Jerry ) then
14132: LD_EXP 61
14136: PPUSH
14137: CALL_OW 314
14141: NOT
14142: IFFALSE 14159
// ComMoveXY ( Jerry , 95 , 17 ) ;
14144: LD_EXP 61
14148: PPUSH
14149: LD_INT 95
14151: PPUSH
14152: LD_INT 17
14154: PPUSH
14155: CALL_OW 111
// until IsAt ( Jerry , 95 , 17 ) ;
14159: LD_EXP 61
14163: PPUSH
14164: LD_INT 95
14166: PPUSH
14167: LD_INT 17
14169: PPUSH
14170: CALL_OW 307
14174: IFFALSE 14125
// SetCargo ( Jerry , mat_cans , 0 ) ;
14176: LD_EXP 61
14180: PPUSH
14181: LD_INT 1
14183: PPUSH
14184: LD_INT 0
14186: PPUSH
14187: CALL_OW 290
// americanSquad := Join ( americanSquad , Jerry ) ;
14191: LD_ADDR_EXP 58
14195: PUSH
14196: LD_EXP 58
14200: PPUSH
14201: LD_EXP 61
14205: PPUSH
14206: CALL 66999 0 2
14210: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , nation_american ] ] ) do
14211: LD_ADDR_VAR 0 1
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_INT 4
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 23
14228: PUSH
14229: LD_INT 1
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PPUSH
14240: CALL_OW 69
14244: PUSH
14245: FOR_IN
14246: IFFALSE 14262
// SetLives ( i , 1000 ) ;
14248: LD_VAR 0 1
14252: PPUSH
14253: LD_INT 1000
14255: PPUSH
14256: CALL_OW 234
14260: GO 14245
14262: POP
14263: POP
// end ;
14264: PPOPN 2
14266: END
// every 0 0$2 trigger not hasMuchin and hasExplosions marked gameStartEvent do var un , tmp ;
14267: LD_EXP 30
14271: NOT
14272: PUSH
14273: LD_EXP 6
14277: AND
14278: IFFALSE 14704
14280: GO 14282
14282: DISABLE
14283: LD_INT 0
14285: PPUSH
14286: PPUSH
// begin tmp := [ ] ;
14287: LD_ADDR_VAR 0 2
14291: PUSH
14292: EMPTY
14293: ST_TO_ADDR
// uc_side := 3 ;
14294: LD_ADDR_OWVAR 20
14298: PUSH
14299: LD_INT 3
14301: ST_TO_ADDR
// uc_nation := 3 ;
14302: LD_ADDR_OWVAR 21
14306: PUSH
14307: LD_INT 3
14309: ST_TO_ADDR
// PrepareSoldier ( sex_male , 8 ) ;
14310: LD_INT 1
14312: PPUSH
14313: LD_INT 8
14315: PPUSH
14316: CALL_OW 381
// un := CreateHuman ;
14320: LD_ADDR_VAR 0 1
14324: PUSH
14325: CALL_OW 44
14329: ST_TO_ADDR
// PlaceUnitXY ( un , 173 , 104 , false ) ;
14330: LD_VAR 0 1
14334: PPUSH
14335: LD_INT 173
14337: PPUSH
14338: LD_INT 104
14340: PPUSH
14341: LD_INT 0
14343: PPUSH
14344: CALL_OW 48
// tmp := Join ( tmp , un ) ;
14348: LD_ADDR_VAR 0 2
14352: PUSH
14353: LD_VAR 0 2
14357: PPUSH
14358: LD_VAR 0 1
14362: PPUSH
14363: CALL 66999 0 2
14367: ST_TO_ADDR
// un := CreateHuman ;
14368: LD_ADDR_VAR 0 1
14372: PUSH
14373: CALL_OW 44
14377: ST_TO_ADDR
// PlaceHumanInUnit ( un , barExplosion ) ;
14378: LD_VAR 0 1
14382: PPUSH
14383: LD_INT 73
14385: PPUSH
14386: CALL_OW 52
// tmp := Join ( tmp , un ) ;
14390: LD_ADDR_VAR 0 2
14394: PUSH
14395: LD_VAR 0 2
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL 66999 0 2
14409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14410: LD_INT 35
14412: PPUSH
14413: CALL_OW 67
// if isAlarm then
14417: LD_EXP 17
14421: IFFALSE 14425
// exit ;
14423: GO 14704
// until GetSide ( Kaia ) = 2 and GetDistUnits ( Kaia , barExplosion ) < 12 ;
14425: LD_EXP 51
14429: PPUSH
14430: CALL_OW 255
14434: PUSH
14435: LD_INT 2
14437: EQUAL
14438: PUSH
14439: LD_EXP 51
14443: PPUSH
14444: LD_INT 73
14446: PPUSH
14447: CALL_OW 296
14451: PUSH
14452: LD_INT 12
14454: LESS
14455: AND
14456: IFFALSE 14410
// InGameOn ;
14458: CALL_OW 8
// PlaceSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 , - 9 ) ;
14462: LD_INT 73
14464: PPUSH
14465: CALL_OW 250
14469: PPUSH
14470: LD_INT 73
14472: PPUSH
14473: CALL_OW 251
14477: PPUSH
14478: LD_INT 2
14480: PPUSH
14481: LD_INT 9
14483: NEG
14484: PPUSH
14485: CALL_OW 330
// CenterOnUnits ( barExplosion ) ;
14489: LD_INT 73
14491: PPUSH
14492: CALL_OW 85
// ComTurnUnit ( Kaia , barExplosion ) ;
14496: LD_EXP 51
14500: PPUSH
14501: LD_INT 73
14503: PPUSH
14504: CALL_OW 119
// Say ( Kaia , DK-Plastic-1 ) ;
14508: LD_EXP 51
14512: PPUSH
14513: LD_STRING DK-Plastic-1
14515: PPUSH
14516: CALL_OW 88
// Say ( Kaia , DK-Plastic-2 ) ;
14520: LD_EXP 51
14524: PPUSH
14525: LD_STRING DK-Plastic-2
14527: PPUSH
14528: CALL_OW 88
// ComMoveUnit ( Kaia , barExplosion ) ;
14532: LD_EXP 51
14536: PPUSH
14537: LD_INT 73
14539: PPUSH
14540: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
14544: LD_INT 35
14546: PPUSH
14547: CALL_OW 67
// if isAlarm then
14551: LD_EXP 17
14555: IFFALSE 14559
// exit ;
14557: GO 14704
// until GetDistUnits ( Kaia , barExplosion ) < 8 ;
14559: LD_EXP 51
14563: PPUSH
14564: LD_INT 73
14566: PPUSH
14567: CALL_OW 296
14571: PUSH
14572: LD_INT 8
14574: LESS
14575: IFFALSE 14544
// ComHold ( Kaia ) ;
14577: LD_EXP 51
14581: PPUSH
14582: CALL_OW 140
// Say ( tmp [ 1 ] , DRum-Plastic-3 ) ;
14586: LD_VAR 0 2
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: LD_STRING DRum-Plastic-3
14597: PPUSH
14598: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-4 ) ;
14602: LD_VAR 0 2
14606: PUSH
14607: LD_INT 2
14609: ARRAY
14610: PPUSH
14611: LD_STRING DRum2-Plastic-4
14613: PPUSH
14614: CALL_OW 88
// Say ( tmp [ 1 ] , DRum-Plastic-5 ) ;
14618: LD_VAR 0 2
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PPUSH
14627: LD_STRING DRum-Plastic-5
14629: PPUSH
14630: CALL_OW 88
// Say ( tmp [ 2 ] , DRum2-Plastic-6 ) ;
14634: LD_VAR 0 2
14638: PUSH
14639: LD_INT 2
14641: ARRAY
14642: PPUSH
14643: LD_STRING DRum2-Plastic-6
14645: PPUSH
14646: CALL_OW 88
// Say ( Kaia , DK-Plastic-7 ) ;
14650: LD_EXP 51
14654: PPUSH
14655: LD_STRING DK-Plastic-7
14657: PPUSH
14658: CALL_OW 88
// InGameOff ;
14662: CALL_OW 9
// RemoveSeeing ( GetX ( barExplosion ) , GetY ( barExplosion ) , 2 ) ;
14666: LD_INT 73
14668: PPUSH
14669: CALL_OW 250
14673: PPUSH
14674: LD_INT 73
14676: PPUSH
14677: CALL_OW 251
14681: PPUSH
14682: LD_INT 2
14684: PPUSH
14685: CALL_OW 331
// explosionsTakenByRussians := true ;
14689: LD_ADDR_EXP 21
14693: PUSH
14694: LD_INT 1
14696: ST_TO_ADDR
// Query ( ExplosivesInfo ) ;
14697: LD_STRING ExplosivesInfo
14699: PPUSH
14700: CALL_OW 97
// end ;
14704: PPOPN 2
14706: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruFac ) and not isAlarm and not hasMuchin do var class ;
14707: LD_EXP 21
14711: PUSH
14712: LD_EXP 51
14716: PPUSH
14717: CALL_OW 255
14721: PUSH
14722: LD_INT 2
14724: EQUAL
14725: AND
14726: PUSH
14727: LD_EXP 51
14731: PPUSH
14732: LD_INT 61
14734: PPUSH
14735: CALL 20325 0 2
14739: AND
14740: PUSH
14741: LD_EXP 17
14745: NOT
14746: AND
14747: PUSH
14748: LD_EXP 30
14752: NOT
14753: AND
14754: IFFALSE 15037
14756: GO 14758
14758: DISABLE
14759: LD_INT 0
14761: PPUSH
// begin class := GetClass ( Kaia ) ;
14762: LD_ADDR_VAR 0 1
14766: PUSH
14767: LD_EXP 51
14771: PPUSH
14772: CALL_OW 257
14776: ST_TO_ADDR
// if class <> class_prison then
14777: LD_VAR 0 1
14781: PUSH
14782: LD_INT 33
14784: NONEQUAL
14785: IFFALSE 14878
// begin Query ( QKaiaWeapon ) ;
14787: LD_STRING QKaiaWeapon
14789: PPUSH
14790: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
14794: LD_INT 67
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
14804: LD_INT 192
14806: PPUSH
14807: LD_INT 71
14809: PPUSH
14810: CALL_OW 86
// kaiaWeaponHidden := class ;
14814: LD_ADDR_EXP 45
14818: PUSH
14819: LD_VAR 0 1
14823: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14824: LD_INT 35
14826: PPUSH
14827: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
14831: LD_EXP 51
14835: PPUSH
14836: LD_INT 67
14838: PPUSH
14839: CALL_OW 308
14843: IFFALSE 14824
// SetClass ( Kaia , class_prison ) ;
14845: LD_EXP 51
14849: PPUSH
14850: LD_INT 33
14852: PPUSH
14853: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
14857: LD_INT 35
14859: PPUSH
14860: CALL_OW 67
// until InEntrance ( Kaia , ruFac ) ;
14864: LD_EXP 51
14868: PPUSH
14869: LD_INT 61
14871: PPUSH
14872: CALL 20325 0 2
14876: IFFALSE 14857
// end ; if knowWhereExplosivesAre then
14878: LD_EXP 34
14882: IFFALSE 14886
// exit ;
14884: GO 15037
// InGameOn ;
14886: CALL_OW 8
// CenterNowOnUnits ( ruFac ) ;
14890: LD_INT 61
14892: PPUSH
14893: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
14897: LD_EXP 51
14901: PPUSH
14902: LD_INT 3
14904: PPUSH
14905: CALL_OW 235
// ComEnterUnit ( Kaia , ruFac ) ;
14909: LD_EXP 51
14913: PPUSH
14914: LD_INT 61
14916: PPUSH
14917: CALL_OW 120
// wait ( 0 0$2 ) ;
14921: LD_INT 70
14923: PPUSH
14924: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
14928: LD_EXP 51
14932: PPUSH
14933: LD_STRING DK-Plastic-8
14935: PPUSH
14936: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-9 ) ;
14940: LD_EXP 67
14944: PUSH
14945: LD_INT 1
14947: ARRAY
14948: PPUSH
14949: LD_STRING DRuMch-Plastic-9
14951: PPUSH
14952: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
14956: LD_EXP 51
14960: PPUSH
14961: LD_STRING DK-Plastic-10
14963: PPUSH
14964: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-11 ) ;
14968: LD_EXP 67
14972: PUSH
14973: LD_INT 1
14975: ARRAY
14976: PPUSH
14977: LD_STRING DRuMch-Plastic-a-11
14979: PPUSH
14980: CALL_OW 88
// Say ( Kaia , DK-Plastic-a-12 ) ;
14984: LD_EXP 51
14988: PPUSH
14989: LD_STRING DK-Plastic-a-12
14991: PPUSH
14992: CALL_OW 88
// Say ( ruMechanics [ 1 ] , DRuMch-Plastic-a-13 ) ;
14996: LD_EXP 67
15000: PUSH
15001: LD_INT 1
15003: ARRAY
15004: PPUSH
15005: LD_STRING DRuMch-Plastic-a-13
15007: PPUSH
15008: CALL_OW 88
// SetSide ( Kaia , 2 ) ;
15012: LD_EXP 51
15016: PPUSH
15017: LD_INT 2
15019: PPUSH
15020: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15024: LD_EXP 51
15028: PPUSH
15029: CALL_OW 122
// InGameOff ;
15033: CALL_OW 9
// end ;
15037: PPOPN 1
15039: END
// every 0 0$1 trigger explosionsTakenByRussians and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruWorkshop ) and not isAlarm and not hasMuchin do var class ;
15040: LD_EXP 21
15044: PUSH
15045: LD_EXP 51
15049: PPUSH
15050: CALL_OW 255
15054: PUSH
15055: LD_INT 2
15057: EQUAL
15058: AND
15059: PUSH
15060: LD_EXP 51
15064: PPUSH
15065: LD_INT 196
15067: PPUSH
15068: CALL 20325 0 2
15072: AND
15073: PUSH
15074: LD_EXP 17
15078: NOT
15079: AND
15080: PUSH
15081: LD_EXP 30
15085: NOT
15086: AND
15087: IFFALSE 15545
15089: GO 15091
15091: DISABLE
15092: LD_INT 0
15094: PPUSH
// begin class := GetClass ( Kaia ) ;
15095: LD_ADDR_VAR 0 1
15099: PUSH
15100: LD_EXP 51
15104: PPUSH
15105: CALL_OW 257
15109: ST_TO_ADDR
// if class <> class_prison then
15110: LD_VAR 0 1
15114: PUSH
15115: LD_INT 33
15117: NONEQUAL
15118: IFFALSE 15211
// begin Query ( QKaiaWeapon ) ;
15120: LD_STRING QKaiaWeapon
15122: PPUSH
15123: CALL_OW 97
// SetAreaMapShow ( hideWeaponArea , 1 ) ;
15127: LD_INT 67
15129: PPUSH
15130: LD_INT 1
15132: PPUSH
15133: CALL_OW 424
// CenterNowOnXY ( 192 , 71 ) ;
15137: LD_INT 192
15139: PPUSH
15140: LD_INT 71
15142: PPUSH
15143: CALL_OW 86
// kaiaWeaponHidden := class ;
15147: LD_ADDR_EXP 45
15151: PUSH
15152: LD_VAR 0 1
15156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15157: LD_INT 35
15159: PPUSH
15160: CALL_OW 67
// until IsInArea ( Kaia , hideWeaponArea ) ;
15164: LD_EXP 51
15168: PPUSH
15169: LD_INT 67
15171: PPUSH
15172: CALL_OW 308
15176: IFFALSE 15157
// SetClass ( Kaia , class_prison ) ;
15178: LD_EXP 51
15182: PPUSH
15183: LD_INT 33
15185: PPUSH
15186: CALL_OW 336
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// until InEntrance ( Kaia , ruWorkshop ) ;
15197: LD_EXP 51
15201: PPUSH
15202: LD_INT 196
15204: PPUSH
15205: CALL 20325 0 2
15209: IFFALSE 15190
// end ; InGameOn ;
15211: CALL_OW 8
// CenterNowOnUnits ( ruWorkshop ) ;
15215: LD_INT 196
15217: PPUSH
15218: CALL_OW 87
// SetSide ( Kaia , 3 ) ;
15222: LD_EXP 51
15226: PPUSH
15227: LD_INT 3
15229: PPUSH
15230: CALL_OW 235
// ComEnterUnit ( Kaia , ruWorkshop ) ;
15234: LD_EXP 51
15238: PPUSH
15239: LD_INT 196
15241: PPUSH
15242: CALL_OW 120
// wait ( 0 0$2 ) ;
15246: LD_INT 70
15248: PPUSH
15249: CALL_OW 67
// Say ( Kaia , DK-Plastic-8 ) ;
15253: LD_EXP 51
15257: PPUSH
15258: LD_STRING DK-Plastic-8
15260: PPUSH
15261: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-9 ) ;
15265: LD_EXP 68
15269: PUSH
15270: LD_INT 1
15272: ARRAY
15273: PPUSH
15274: LD_STRING DRuMch-Plastic-9
15276: PPUSH
15277: CALL_OW 88
// Say ( Kaia , DK-Plastic-10 ) ;
15281: LD_EXP 51
15285: PPUSH
15286: LD_STRING DK-Plastic-10
15288: PPUSH
15289: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-11 ) ;
15293: LD_EXP 68
15297: PUSH
15298: LD_INT 1
15300: ARRAY
15301: PPUSH
15302: LD_STRING DRuMch-Plastic-11
15304: PPUSH
15305: CALL_OW 88
// Say ( Kaia , DK-Plastic-12 ) ;
15309: LD_EXP 51
15313: PPUSH
15314: LD_STRING DK-Plastic-12
15316: PPUSH
15317: CALL_OW 88
// Say ( Kaia , DK-Plastic-13 ) ;
15321: LD_EXP 51
15325: PPUSH
15326: LD_STRING DK-Plastic-13
15328: PPUSH
15329: CALL_OW 88
// Say ( ruMechanics2 [ 1 ] , DRuMch-Plastic-14 ) ;
15333: LD_EXP 68
15337: PUSH
15338: LD_INT 1
15340: ARRAY
15341: PPUSH
15342: LD_STRING DRuMch-Plastic-14
15344: PPUSH
15345: CALL_OW 88
// PlaceUnitXYD ( Stiopa , 167 , 34 , 3 , false ) ;
15349: LD_EXP 69
15353: PPUSH
15354: LD_INT 167
15356: PPUSH
15357: LD_INT 34
15359: PPUSH
15360: LD_INT 3
15362: PPUSH
15363: LD_INT 0
15365: PPUSH
15366: CALL 69139 0 5
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15370: LD_EXP 69
15374: PPUSH
15375: LD_INT 196
15377: PPUSH
15378: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
15382: LD_INT 35
15384: PPUSH
15385: CALL_OW 67
// if not HasTask ( Stiopa ) then
15389: LD_EXP 69
15393: PPUSH
15394: CALL_OW 314
15398: NOT
15399: IFFALSE 15413
// ComEnterUnit ( Stiopa , ruWorkshop ) ;
15401: LD_EXP 69
15405: PPUSH
15406: LD_INT 196
15408: PPUSH
15409: CALL_OW 120
// until IsInUnit ( Stiopa ) ;
15413: LD_EXP 69
15417: PPUSH
15418: CALL_OW 310
15422: IFFALSE 15382
// Say ( Stiopa , DSpn-Plastic-15 ) ;
15424: LD_EXP 69
15428: PPUSH
15429: LD_STRING DSpn-Plastic-15
15431: PPUSH
15432: CALL_OW 88
// Say ( Laura , DLr-Plastic-16 ) ;
15436: LD_EXP 70
15440: PPUSH
15441: LD_STRING DLr-Plastic-16
15443: PPUSH
15444: CALL_OW 88
// Say ( Kaia , DK-Plastic-17 ) ;
15448: LD_EXP 51
15452: PPUSH
15453: LD_STRING DK-Plastic-17
15455: PPUSH
15456: CALL_OW 88
// wait ( 0 0$0.3 ) ;
15460: LD_INT 10
15462: PPUSH
15463: CALL_OW 67
// UnitsBlockingEntrance ( ruWorkshop ) ;
15467: LD_INT 196
15469: PPUSH
15470: CALL 20051 0 1
// SetSide ( Kaia , 2 ) ;
15474: LD_EXP 51
15478: PPUSH
15479: LD_INT 2
15481: PPUSH
15482: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15486: LD_EXP 51
15490: PPUSH
15491: CALL_OW 122
// InGameOff ;
15495: CALL_OW 9
// explosionsTakenByRussians := false ;
15499: LD_ADDR_EXP 21
15503: PUSH
15504: LD_INT 0
15506: ST_TO_ADDR
// PlaceSeeing ( 170 , 28 , 2 , - 6 ) ;
15507: LD_INT 170
15509: PPUSH
15510: LD_INT 28
15512: PPUSH
15513: LD_INT 2
15515: PPUSH
15516: LD_INT 6
15518: NEG
15519: PPUSH
15520: CALL_OW 330
// RemoveSeeing ( 170 , 28 , 2 ) ;
15524: LD_INT 170
15526: PPUSH
15527: LD_INT 28
15529: PPUSH
15530: LD_INT 2
15532: PPUSH
15533: CALL_OW 331
// knowWhereExplosivesAre := true ;
15537: LD_ADDR_EXP 34
15541: PUSH
15542: LD_INT 1
15544: ST_TO_ADDR
// end ;
15545: PPOPN 1
15547: END
// every 0 0$1 trigger knowWhereExplosivesAre and GetSide ( Kaia ) = 2 and InEntrance ( Kaia , ruExpDep ) and not isAlarm and not hasMuchin do
15548: LD_EXP 34
15552: PUSH
15553: LD_EXP 51
15557: PPUSH
15558: CALL_OW 255
15562: PUSH
15563: LD_INT 2
15565: EQUAL
15566: AND
15567: PUSH
15568: LD_EXP 51
15572: PPUSH
15573: LD_INT 195
15575: PPUSH
15576: CALL 20325 0 2
15580: AND
15581: PUSH
15582: LD_EXP 17
15586: NOT
15587: AND
15588: PUSH
15589: LD_EXP 30
15593: NOT
15594: AND
15595: IFFALSE 15701
15597: GO 15599
15599: DISABLE
// begin InGameOn ;
15600: CALL_OW 8
// SetSide ( Kaia , 3 ) ;
15604: LD_EXP 51
15608: PPUSH
15609: LD_INT 3
15611: PPUSH
15612: CALL_OW 235
// ComEnterUnit ( Kaia , ruExpDep ) ;
15616: LD_EXP 51
15620: PPUSH
15621: LD_INT 195
15623: PPUSH
15624: CALL_OW 120
// wait ( 0 0$1 ) ;
15628: LD_INT 35
15630: PPUSH
15631: CALL_OW 67
// Say ( Kaia , DK-Plastic-18 ) ;
15635: LD_EXP 51
15639: PPUSH
15640: LD_STRING DK-Plastic-18
15642: PPUSH
15643: CALL_OW 88
// Query ( ExplosivesInfoUsage ) ;
15647: LD_STRING ExplosivesInfoUsage
15649: PPUSH
15650: CALL_OW 97
// UnitsBlockingEntrance ( ruExpDep ) ;
15654: LD_INT 195
15656: PPUSH
15657: CALL 20051 0 1
// SetSide ( Kaia , 2 ) ;
15661: LD_EXP 51
15665: PPUSH
15666: LD_INT 2
15668: PPUSH
15669: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
15673: LD_EXP 51
15677: PPUSH
15678: CALL_OW 122
// InGameOff ;
15682: CALL_OW 9
// hasExplosionCollected := true ;
15686: LD_ADDR_EXP 23
15690: PUSH
15691: LD_INT 1
15693: ST_TO_ADDR
// ChangeMissionObjectives ( M1-explosive-out ) ;
15694: LD_STRING M1-explosive-out
15696: PPUSH
15697: CALL_OW 337
// end ;
15701: END
// every 0 0$2 trigger kaiaWeaponHidden marked gameStartEvent do
15702: LD_EXP 45
15706: IFFALSE 15743
15708: GO 15710
15710: DISABLE
// begin enable ;
15711: ENABLE
// if not kaiaWeaponHidden then
15712: LD_EXP 45
15716: NOT
15717: IFFALSE 15721
// exit ;
15719: GO 15743
// SetClass ( Kaia , kaiaWeaponHidden ) ;
15721: LD_EXP 51
15725: PPUSH
15726: LD_EXP 45
15730: PPUSH
15731: CALL_OW 336
// kaiaWeaponHidden := 0 ;
15735: LD_ADDR_EXP 45
15739: PUSH
15740: LD_INT 0
15742: ST_TO_ADDR
// end ;
15743: END
// every 0 0$1 trigger hasExplosionCollected and not isAlarm and not hasMuchin marked gameStartEvent do var i , tmp ;
15744: LD_EXP 23
15748: PUSH
15749: LD_EXP 17
15753: NOT
15754: AND
15755: PUSH
15756: LD_EXP 30
15760: NOT
15761: AND
15762: IFFALSE 15937
15764: GO 15766
15766: DISABLE
15767: LD_INT 0
15769: PPUSH
15770: PPUSH
// begin for i in importantBuildingsList do
15771: LD_ADDR_VAR 0 1
15775: PUSH
15776: LD_EXP 35
15780: PUSH
15781: FOR_IN
15782: IFFALSE 15798
// MarkBuilding ( i , true ) ;
15784: LD_VAR 0 1
15788: PPUSH
15789: LD_INT 1
15791: PPUSH
15792: CALL 20699 0 2
15796: GO 15781
15798: POP
15799: POP
// repeat wait ( 0 0$1 ) ;
15800: LD_INT 35
15802: PPUSH
15803: CALL_OW 67
// for i in importantBuildingsList do
15807: LD_ADDR_VAR 0 1
15811: PUSH
15812: LD_EXP 35
15816: PUSH
15817: FOR_IN
15818: IFFALSE 15928
// begin if UnitFilter ( Heike union heikeSquad , [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 6 ] ] ) then
15820: LD_EXP 46
15824: PUSH
15825: LD_EXP 14
15829: UNION
15830: PPUSH
15831: LD_INT 22
15833: PUSH
15834: LD_INT 2
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 21
15843: PUSH
15844: LD_INT 1
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: LD_INT 91
15853: PUSH
15854: LD_VAR 0 1
15858: PUSH
15859: LD_INT 6
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 72
15876: IFFALSE 15926
// begin CenterNowOnUnits ( i ) ;
15878: LD_VAR 0 1
15882: PPUSH
15883: CALL_OW 87
// PlaceExplosives ( i ) ;
15887: LD_VAR 0 1
15891: PPUSH
15892: CALL 20596 0 1
// MarkBuilding ( i , false ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_INT 0
15903: PPUSH
15904: CALL 20699 0 2
// importantBuildingsList := importantBuildingsList diff i ;
15908: LD_ADDR_EXP 35
15912: PUSH
15913: LD_EXP 35
15917: PUSH
15918: LD_VAR 0 1
15922: DIFF
15923: ST_TO_ADDR
// continue ;
15924: GO 15817
// end ; end ;
15926: GO 15817
15928: POP
15929: POP
// until not importantBuildingsList ;
15930: LD_EXP 35
15934: NOT
15935: IFFALSE 15800
// end ;
15937: PPOPN 2
15939: END
// every 0 0$1 trigger UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_inarea , baseOutsideBorderArea ] ] ) and IsOk ( Heike ) and not hasMuchin marked gameStartEvent do
15940: LD_EXP 14
15944: PPUSH
15945: LD_INT 22
15947: PUSH
15948: LD_INT 2
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: LD_INT 95
15957: PUSH
15958: LD_INT 23
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PPUSH
15969: CALL_OW 72
15973: PUSH
15974: LD_EXP 46
15978: PPUSH
15979: CALL_OW 302
15983: AND
15984: PUSH
15985: LD_EXP 30
15989: NOT
15990: AND
15991: IFFALSE 16019
15993: GO 15995
15995: DISABLE
// begin Say ( Heike , DH-End-1 ) ;
15996: LD_EXP 46
16000: PPUSH
16001: LD_STRING DH-End-1
16003: PPUSH
16004: CALL_OW 88
// if not activeExplosives then
16008: LD_EXP 36
16012: NOT
16013: IFFALSE 16019
// Explode ;
16015: CALL 23469 0 0
// end ;
16019: END
// function SayHEmpty ( ) ; begin
16020: LD_INT 0
16022: PPUSH
// case rand ( 1 , 3 ) of 1 :
16023: LD_INT 1
16025: PPUSH
16026: LD_INT 3
16028: PPUSH
16029: CALL_OW 12
16033: PUSH
16034: LD_INT 1
16036: DOUBLE
16037: EQUAL
16038: IFTRUE 16042
16040: GO 16057
16042: POP
// Say ( Heike , DH-Empty-1 ) ; 2 :
16043: LD_EXP 46
16047: PPUSH
16048: LD_STRING DH-Empty-1
16050: PPUSH
16051: CALL_OW 88
16055: GO 16104
16057: LD_INT 2
16059: DOUBLE
16060: EQUAL
16061: IFTRUE 16065
16063: GO 16080
16065: POP
// Say ( Heike , DH-Empty-2 ) ; 3 :
16066: LD_EXP 46
16070: PPUSH
16071: LD_STRING DH-Empty-2
16073: PPUSH
16074: CALL_OW 88
16078: GO 16104
16080: LD_INT 3
16082: DOUBLE
16083: EQUAL
16084: IFTRUE 16088
16086: GO 16103
16088: POP
// Say ( Heike , DH-Empty-3 ) ; end ;
16089: LD_EXP 46
16093: PPUSH
16094: LD_STRING DH-Empty-3
16096: PPUSH
16097: CALL_OW 88
16101: GO 16104
16103: POP
// end ;
16104: LD_VAR 0 1
16108: RET
// function SayHVisited ( ) ; begin
16109: LD_INT 0
16111: PPUSH
// case rand ( 1 , 3 ) of 1 :
16112: LD_INT 1
16114: PPUSH
16115: LD_INT 3
16117: PPUSH
16118: CALL_OW 12
16122: PUSH
16123: LD_INT 1
16125: DOUBLE
16126: EQUAL
16127: IFTRUE 16131
16129: GO 16146
16131: POP
// Say ( Heike , DH-Visited-1 ) ; 2 :
16132: LD_EXP 46
16136: PPUSH
16137: LD_STRING DH-Visited-1
16139: PPUSH
16140: CALL_OW 88
16144: GO 16193
16146: LD_INT 2
16148: DOUBLE
16149: EQUAL
16150: IFTRUE 16154
16152: GO 16169
16154: POP
// Say ( Heike , DH-Visited-2 ) ; 3 :
16155: LD_EXP 46
16159: PPUSH
16160: LD_STRING DH-Visited-2
16162: PPUSH
16163: CALL_OW 88
16167: GO 16193
16169: LD_INT 3
16171: DOUBLE
16172: EQUAL
16173: IFTRUE 16177
16175: GO 16192
16177: POP
// Say ( Heike , DH-Visited-3 ) ; end ;
16178: LD_EXP 46
16182: PPUSH
16183: LD_STRING DH-Visited-3
16185: PPUSH
16186: CALL_OW 88
16190: GO 16193
16192: POP
// end ;
16193: LD_VAR 0 1
16197: RET
// every 0 0$2 trigger not isAlarm and entranceAllowedList and GetSide ( Heike ) = 2 and IsOk ( Heike ) and IsIdle ( Heike ) and not hasMuchin marked entranceEvent do var i ;
16198: LD_EXP 17
16202: NOT
16203: PUSH
16204: LD_EXP 15
16208: AND
16209: PUSH
16210: LD_EXP 46
16214: PPUSH
16215: CALL_OW 255
16219: PUSH
16220: LD_INT 2
16222: EQUAL
16223: AND
16224: PUSH
16225: LD_EXP 46
16229: PPUSH
16230: CALL_OW 302
16234: AND
16235: PUSH
16236: LD_EXP 46
16240: PPUSH
16241: CALL_OW 316
16245: AND
16246: PUSH
16247: LD_EXP 30
16251: NOT
16252: AND
16253: IFFALSE 16319
16255: GO 16257
16257: DISABLE
16258: LD_INT 0
16260: PPUSH
// begin enable ;
16261: ENABLE
// for i in entranceAllowedList do
16262: LD_ADDR_VAR 0 1
16266: PUSH
16267: LD_EXP 15
16271: PUSH
16272: FOR_IN
16273: IFFALSE 16317
// if InEntrance ( Heike , i ) then
16275: LD_EXP 46
16279: PPUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL 20325 0 2
16289: IFFALSE 16315
// begin disable ( entranceEvent ) ;
16291: LD_INT 1
16293: DISABLE_MARKED
// HeikeEnterBuilding ( i ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: CALL 16322 0 1
// wait ( 0 0$3 ) ;
16303: LD_INT 105
16305: PPUSH
16306: CALL_OW 67
// enable ( entranceEvent ) ;
16310: LD_INT 1
16312: ENABLE_MARKED
// break ;
16313: GO 16317
// end ;
16315: GO 16272
16317: POP
16318: POP
// end ;
16319: PPOPN 1
16321: END
// function HeikeEnterBuilding ( building ) ; var i , tmp , tmp2 ; begin
16322: LD_INT 0
16324: PPUSH
16325: PPUSH
16326: PPUSH
16327: PPUSH
// if not building then
16328: LD_VAR 0 1
16332: NOT
16333: IFFALSE 16337
// exit ;
16335: GO 18962
// if building in entranceVisitedList then
16337: LD_VAR 0 1
16341: PUSH
16342: LD_EXP 16
16346: IN
16347: IFFALSE 16355
// begin SayHVisited ( ) ;
16349: CALL 16109 0 0
// exit ;
16353: GO 18962
// end ; case Query ( EnterBuilding ) of 1 :
16355: LD_STRING EnterBuilding
16357: PPUSH
16358: CALL_OW 97
16362: PUSH
16363: LD_INT 1
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16374
16371: POP
// ; 2 :
16372: GO 16388
16374: LD_INT 2
16376: DOUBLE
16377: EQUAL
16378: IFTRUE 16382
16380: GO 16387
16382: POP
// exit ; end ;
16383: GO 18962
16385: GO 16388
16387: POP
// entranceVisitedList := Join ( entranceVisitedList , building ) ;
16388: LD_ADDR_EXP 16
16392: PUSH
16393: LD_EXP 16
16397: PPUSH
16398: LD_VAR 0 1
16402: PPUSH
16403: CALL 66999 0 2
16407: ST_TO_ADDR
// InGameOn ;
16408: CALL_OW 8
// SetSide ( Heike , 5 ) ;
16412: LD_EXP 46
16416: PPUSH
16417: LD_INT 5
16419: PPUSH
16420: CALL_OW 235
// SetSide ( building , 5 ) ;
16424: LD_VAR 0 1
16428: PPUSH
16429: LD_INT 5
16431: PPUSH
16432: CALL_OW 235
// ComEnterUnit ( Heike , building ) ;
16436: LD_EXP 46
16440: PPUSH
16441: LD_VAR 0 1
16445: PPUSH
16446: CALL_OW 120
// wait ( 0 0$3 ) ;
16450: LD_INT 105
16452: PPUSH
16453: CALL_OW 67
// tmp := [ laundry , dougBar , usLab , drugsLab , ruFac , ruBarKam , ruOutpost1 , ruOutpostBar , ruKaiaBar , ruWeaponsBar ] ;
16457: LD_ADDR_VAR 0 4
16461: PUSH
16462: LD_INT 165
16464: PUSH
16465: LD_INT 106
16467: PUSH
16468: LD_INT 135
16470: PUSH
16471: LD_INT 162
16473: PUSH
16474: LD_INT 61
16476: PUSH
16477: LD_INT 109
16479: PUSH
16480: LD_INT 169
16482: PUSH
16483: LD_INT 13
16485: PUSH
16486: LD_INT 147
16488: PUSH
16489: LD_INT 137
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: ST_TO_ADDR
// if not building in tmp then
16504: LD_VAR 0 1
16508: PUSH
16509: LD_VAR 0 4
16513: IN
16514: NOT
16515: IFFALSE 16523
// SayHEmpty ( ) else
16517: CALL 16020 0 0
16521: GO 18909
// case building of laundry :
16523: LD_VAR 0 1
16527: PUSH
16528: LD_INT 165
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16640
16536: POP
// begin if laundryAllowed and not heikeAsRussian and not giviAsRussian then
16537: LD_EXP 26
16541: PUSH
16542: LD_EXP 27
16546: NOT
16547: AND
16548: PUSH
16549: LD_EXP 28
16553: NOT
16554: AND
16555: IFFALSE 16610
// begin case Query ( HeikeInLaundry ) of 1 :
16557: LD_STRING HeikeInLaundry
16559: PPUSH
16560: CALL_OW 97
16564: PUSH
16565: LD_INT 1
16567: DOUBLE
16568: EQUAL
16569: IFTRUE 16573
16571: GO 16580
16573: POP
// SpawnHeikeAsRussian ; 2 :
16574: CALL 1810 0 0
16578: GO 16608
16580: LD_INT 2
16582: DOUBLE
16583: EQUAL
16584: IFTRUE 16588
16586: GO 16607
16588: POP
// entranceVisitedList := entranceVisitedList diff building ; end ;
16589: LD_ADDR_EXP 16
16593: PUSH
16594: LD_EXP 16
16598: PUSH
16599: LD_VAR 0 1
16603: DIFF
16604: ST_TO_ADDR
16605: GO 16608
16607: POP
// end else
16608: GO 16638
// begin entranceVisitedList := entranceVisitedList diff building ;
16610: LD_ADDR_EXP 16
16614: PUSH
16615: LD_EXP 16
16619: PUSH
16620: LD_VAR 0 1
16624: DIFF
16625: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
16626: LD_EXP 46
16630: PPUSH
16631: LD_STRING DH-Locked
16633: PPUSH
16634: CALL_OW 88
// end ; end ; dougBar :
16638: GO 18909
16640: LD_INT 106
16642: DOUBLE
16643: EQUAL
16644: IFTRUE 16648
16646: GO 17010
16648: POP
// begin if contactWithAmerican and americanContact then
16649: LD_EXP 25
16653: PUSH
16654: LD_EXP 10
16658: AND
16659: IFFALSE 16723
// begin Say ( Heike , DH-Escort-a-1 ) ;
16661: LD_EXP 46
16665: PPUSH
16666: LD_STRING DH-Escort-a-1
16668: PPUSH
16669: CALL_OW 88
// Say ( Doug , DCa-Escort-a-2 ) ;
16673: LD_EXP 60
16677: PPUSH
16678: LD_STRING DCa-Escort-a-2
16680: PPUSH
16681: CALL_OW 88
// Say ( Doug , DCa-Escort-a-3 ) ;
16685: LD_EXP 60
16689: PPUSH
16690: LD_STRING DCa-Escort-a-3
16692: PPUSH
16693: CALL_OW 88
// Say ( Heike , DH-Escort-a-4 ) ;
16697: LD_EXP 46
16701: PPUSH
16702: LD_STRING DH-Escort-a-4
16704: PPUSH
16705: CALL_OW 88
// Say ( Heike , DH-Escort-a-5 ) ;
16709: LD_EXP 46
16713: PPUSH
16714: LD_STRING DH-Escort-a-5
16716: PPUSH
16717: CALL_OW 88
// end else
16721: GO 16967
// if contactWithAmerican then
16723: LD_EXP 25
16727: IFFALSE 16767
// begin Say ( Heike , DH-Escort-b-1 ) ;
16729: LD_EXP 46
16733: PPUSH
16734: LD_STRING DH-Escort-b-1
16736: PPUSH
16737: CALL_OW 88
// Say ( Doug , DCa-Escort-b-2 ) ;
16741: LD_EXP 60
16745: PPUSH
16746: LD_STRING DCa-Escort-b-2
16748: PPUSH
16749: CALL_OW 88
// Say ( Doug , DCa-Escort-b-3 ) ;
16753: LD_EXP 60
16757: PPUSH
16758: LD_STRING DCa-Escort-b-3
16760: PPUSH
16761: CALL_OW 88
// end else
16765: GO 16967
// begin Say ( Doug , DCa-Deal-a-1 ) ;
16767: LD_EXP 60
16771: PPUSH
16772: LD_STRING DCa-Deal-a-1
16774: PPUSH
16775: CALL_OW 88
// Say ( Doug , DCa-Deal-a-2 ) ;
16779: LD_EXP 60
16783: PPUSH
16784: LD_STRING DCa-Deal-a-2
16786: PPUSH
16787: CALL_OW 88
// Say ( Heike , DH-Deal-a-3 ) ;
16791: LD_EXP 46
16795: PPUSH
16796: LD_STRING DH-Deal-a-3
16798: PPUSH
16799: CALL_OW 88
// Say ( Doug , DCa-Deal-a-4 ) ;
16803: LD_EXP 60
16807: PPUSH
16808: LD_STRING DCa-Deal-a-4
16810: PPUSH
16811: CALL_OW 88
// Say ( Heike , DH-Deal-a-5 ) ;
16815: LD_EXP 46
16819: PPUSH
16820: LD_STRING DH-Deal-a-5
16822: PPUSH
16823: CALL_OW 88
// Say ( Doug , DCa-Deal-a-6 ) ;
16827: LD_EXP 60
16831: PPUSH
16832: LD_STRING DCa-Deal-a-6
16834: PPUSH
16835: CALL_OW 88
// Say ( Doug , DCa-Deal-a-7 ) ;
16839: LD_EXP 60
16843: PPUSH
16844: LD_STRING DCa-Deal-a-7
16846: PPUSH
16847: CALL_OW 88
// Say ( Doug , DCa-Deal-a-8 ) ;
16851: LD_EXP 60
16855: PPUSH
16856: LD_STRING DCa-Deal-a-8
16858: PPUSH
16859: CALL_OW 88
// Say ( Doug , DCa-Deal-a-9 ) ;
16863: LD_EXP 60
16867: PPUSH
16868: LD_STRING DCa-Deal-a-9
16870: PPUSH
16871: CALL_OW 88
// Say ( Doug , DCa-Deal-a-10 ) ;
16875: LD_EXP 60
16879: PPUSH
16880: LD_STRING DCa-Deal-a-10
16882: PPUSH
16883: CALL_OW 88
// Say ( Doug , DCa-Deal-a-11 ) ;
16887: LD_EXP 60
16891: PPUSH
16892: LD_STRING DCa-Deal-a-11
16894: PPUSH
16895: CALL_OW 88
// wait ( 0 0$0.3 ) ;
16899: LD_INT 10
16901: PPUSH
16902: CALL_OW 67
// Say ( Doug , DCa-Deal-a-12 ) ;
16906: LD_EXP 60
16910: PPUSH
16911: LD_STRING DCa-Deal-a-12
16913: PPUSH
16914: CALL_OW 88
// Say ( Heike , DH-Deal-a-13 ) ;
16918: LD_EXP 46
16922: PPUSH
16923: LD_STRING DH-Deal-a-13
16925: PPUSH
16926: CALL_OW 88
// Say ( Heike , DH-Deal-a-14 ) ;
16930: LD_EXP 46
16934: PPUSH
16935: LD_STRING DH-Deal-a-14
16937: PPUSH
16938: CALL_OW 88
// contactWithAmerican := true ;
16942: LD_ADDR_EXP 25
16946: PUSH
16947: LD_INT 1
16949: ST_TO_ADDR
// SaveVariable ( 1 , 08_DealWithDoug ) ;
16950: LD_INT 1
16952: PPUSH
16953: LD_STRING 08_DealWithDoug
16955: PPUSH
16956: CALL_OW 39
// ChangeMissionObjectives_Silent ( M1-american-out ) ;
16960: LD_STRING M1-american-out
16962: PPUSH
16963: CALL_OW 604
// end ; SetSide ( Doug , 2 ) ;
16967: LD_EXP 60
16971: PPUSH
16972: LD_INT 2
16974: PPUSH
16975: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Doug ) ;
16979: LD_ADDR_EXP 14
16983: PUSH
16984: LD_EXP 14
16988: PPUSH
16989: LD_EXP 60
16993: PPUSH
16994: CALL 66999 0 2
16998: ST_TO_ADDR
// ComExitBuilding ( Doug ) ;
16999: LD_EXP 60
17003: PPUSH
17004: CALL_OW 122
// end ; usLab :
17008: GO 18909
17010: LD_INT 135
17012: DOUBLE
17013: EQUAL
17014: IFTRUE 17018
17016: GO 17337
17018: POP
// begin if hasSniperRifle then
17019: LD_EXP 11
17023: IFFALSE 17335
// begin if IsOK ( Kaia ) and Kaia in heikeSquad and GetSide ( Kaia ) = 2 then
17025: LD_EXP 51
17029: PPUSH
17030: CALL_OW 302
17034: PUSH
17035: LD_EXP 51
17039: PUSH
17040: LD_EXP 14
17044: IN
17045: AND
17046: PUSH
17047: LD_EXP 51
17051: PPUSH
17052: CALL_OW 255
17056: PUSH
17057: LD_INT 2
17059: EQUAL
17060: AND
17061: IFFALSE 17309
// begin if GetDistUnits ( Heike , Kaia ) > 10 then
17063: LD_EXP 46
17067: PPUSH
17068: LD_EXP 51
17072: PPUSH
17073: CALL_OW 296
17077: PUSH
17078: LD_INT 10
17080: GREATER
17081: IFFALSE 17106
// begin Query ( KaiaDistance ) ;
17083: LD_STRING KaiaDistance
17085: PPUSH
17086: CALL_OW 97
// entranceVisitedList := entranceVisitedList diff usLab ;
17090: LD_ADDR_EXP 16
17094: PUSH
17095: LD_EXP 16
17099: PUSH
17100: LD_INT 135
17102: DIFF
17103: ST_TO_ADDR
// end else
17104: GO 17307
// begin SetSide ( Kaia , 5 ) ;
17106: LD_EXP 51
17110: PPUSH
17111: LD_INT 5
17113: PPUSH
17114: CALL_OW 235
// ComEnterUnit ( Kaia , usLab ) ;
17118: LD_EXP 51
17122: PPUSH
17123: LD_INT 135
17125: PPUSH
17126: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
17130: LD_INT 35
17132: PPUSH
17133: CALL_OW 67
// until IsInUnit ( Kaia ) ;
17137: LD_EXP 51
17141: PPUSH
17142: CALL_OW 310
17146: IFFALSE 17130
// Say ( Kaia , DK-Sniper-1 ) ;
17148: LD_EXP 51
17152: PPUSH
17153: LD_STRING DK-Sniper-1
17155: PPUSH
17156: CALL_OW 88
// if GetClass ( Kaia ) = class_revolver and Mike in heikeSquad and IsOk ( Mike ) then
17160: LD_EXP 51
17164: PPUSH
17165: CALL_OW 257
17169: PUSH
17170: LD_INT 34
17172: EQUAL
17173: PUSH
17174: LD_EXP 48
17178: PUSH
17179: LD_EXP 14
17183: IN
17184: AND
17185: PUSH
17186: LD_EXP 48
17190: PPUSH
17191: CALL_OW 302
17195: AND
17196: IFFALSE 17227
// begin Say ( Kaia , DK-Sniper-a-2 ) ;
17198: LD_EXP 51
17202: PPUSH
17203: LD_STRING DK-Sniper-a-2
17205: PPUSH
17206: CALL_OW 88
// giveSniperRifleToMike := true ;
17210: LD_ADDR_EXP 42
17214: PUSH
17215: LD_INT 1
17217: ST_TO_ADDR
// Query ( QSniperMike ) ;
17218: LD_STRING QSniperMike
17220: PPUSH
17221: CALL_OW 97
// end else
17225: GO 17286
// begin Say ( Kaia , DK-Sniper-2 ) ;
17227: LD_EXP 51
17231: PPUSH
17232: LD_STRING DK-Sniper-2
17234: PPUSH
17235: CALL_OW 88
// SetClass ( Kaia , class_hunter ) ;
17239: LD_EXP 51
17243: PPUSH
17244: LD_INT 32
17246: PPUSH
17247: CALL_OW 336
// if IsOK ( Markov ) and Markov in heikeSquad then
17251: LD_EXP 53
17255: PPUSH
17256: CALL_OW 302
17260: PUSH
17261: LD_EXP 53
17265: PUSH
17266: LD_EXP 14
17270: IN
17271: AND
17272: IFFALSE 17286
// Say ( Markov , DMar-Sniper-3 ) ;
17274: LD_EXP 53
17278: PPUSH
17279: LD_STRING DMar-Sniper-3
17281: PPUSH
17282: CALL_OW 88
// end ; ComExitBuilding ( Kaia ) ;
17286: LD_EXP 51
17290: PPUSH
17291: CALL_OW 122
// SetSide ( Kaia , 2 ) ;
17295: LD_EXP 51
17299: PPUSH
17300: LD_INT 2
17302: PPUSH
17303: CALL_OW 235
// end ; end else
17307: GO 17335
// begin entranceVisitedList := entranceVisitedList diff usLab ;
17309: LD_ADDR_EXP 16
17313: PUSH
17314: LD_EXP 16
17318: PUSH
17319: LD_INT 135
17321: DIFF
17322: ST_TO_ADDR
// Say ( Heike , DH-Locked ) ;
17323: LD_EXP 46
17327: PPUSH
17328: LD_STRING DH-Locked
17330: PPUSH
17331: CALL_OW 88
// end ; end ; end ; drugsLab :
17335: GO 18909
17337: LD_INT 162
17339: DOUBLE
17340: EQUAL
17341: IFTRUE 17345
17343: GO 17478
17345: POP
// begin if hasStimDrugs then
17346: LD_EXP 9
17350: IFFALSE 17464
// begin wait ( 0 0$1 ) ;
17352: LD_INT 35
17354: PPUSH
17355: CALL_OW 67
// if not hasStimDrugsCollected then
17359: LD_EXP 24
17363: NOT
17364: IFFALSE 17406
// begin Say ( Heike , DH-Lab-1 ) ;
17366: LD_EXP 46
17370: PPUSH
17371: LD_STRING DH-Lab-1
17373: PPUSH
17374: CALL_OW 88
// SetTech ( tech_stimdrugs , 2 , state_researched ) ;
17378: LD_INT 5
17380: PPUSH
17381: LD_INT 2
17383: PPUSH
17384: LD_INT 2
17386: PPUSH
17387: CALL_OW 322
// hasStimDrugsCollected := true ;
17391: LD_ADDR_EXP 24
17395: PUSH
17396: LD_INT 1
17398: ST_TO_ADDR
// ChangeMissionObjectives_Silent ( M1-drugs-out ) ;
17399: LD_STRING M1-drugs-out
17401: PPUSH
17402: CALL_OW 604
// end ; if not hasExplosionCollected then
17406: LD_EXP 23
17410: NOT
17411: IFFALSE 17429
// entranceVisitedList := entranceVisitedList diff drugsLab else
17413: LD_ADDR_EXP 16
17417: PUSH
17418: LD_EXP 16
17422: PUSH
17423: LD_INT 162
17425: DIFF
17426: ST_TO_ADDR
17427: GO 17462
// begin wait ( 0 0$3 ) ;
17429: LD_INT 105
17431: PPUSH
17432: CALL_OW 67
// Say ( Heike , DH-Lab-2 ) ;
17436: LD_EXP 46
17440: PPUSH
17441: LD_STRING DH-Lab-2
17443: PPUSH
17444: CALL_OW 88
// ChangeMissionObjectives_Silent ( M1-drugsLab-out ) ;
17448: LD_STRING M1-drugsLab-out
17450: PPUSH
17451: CALL_OW 604
// PlaceExplosives ( drugsLab ) ;
17455: LD_INT 162
17457: PPUSH
17458: CALL 20596 0 1
// end ; end else
17462: GO 17476
// Say ( Heike , DH-Locked ) ;
17464: LD_EXP 46
17468: PPUSH
17469: LD_STRING DH-Locked
17471: PPUSH
17472: CALL_OW 88
// end ; ruFac :
17476: GO 18909
17478: LD_INT 61
17480: DOUBLE
17481: EQUAL
17482: IFTRUE 17486
17484: GO 17596
17486: POP
// begin if IsOk ( Markov ) and not Markov in heikeSquad then
17487: LD_EXP 53
17491: PPUSH
17492: CALL_OW 302
17496: PUSH
17497: LD_EXP 53
17501: PUSH
17502: LD_EXP 14
17506: IN
17507: NOT
17508: AND
17509: IFFALSE 17590
// begin Say ( Heike , DH-Krastyo-1 ) ;
17511: LD_EXP 46
17515: PPUSH
17516: LD_STRING DH-Krastyo-1
17518: PPUSH
17519: CALL_OW 88
// Say ( Markov , DMar-Krastyo-2 ) ;
17523: LD_EXP 53
17527: PPUSH
17528: LD_STRING DMar-Krastyo-2
17530: PPUSH
17531: CALL_OW 88
// Say ( Markov , DMar-Krastyo-3 ) ;
17535: LD_EXP 53
17539: PPUSH
17540: LD_STRING DMar-Krastyo-3
17542: PPUSH
17543: CALL_OW 88
// SetSide ( Markov , 2 ) ;
17547: LD_EXP 53
17551: PPUSH
17552: LD_INT 2
17554: PPUSH
17555: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Markov ) ;
17559: LD_ADDR_EXP 14
17563: PUSH
17564: LD_EXP 14
17568: PPUSH
17569: LD_EXP 53
17573: PPUSH
17574: CALL 66999 0 2
17578: ST_TO_ADDR
// ComExitBuilding ( Markov ) ;
17579: LD_EXP 53
17583: PPUSH
17584: CALL_OW 122
// end else
17588: GO 17594
// SayHEmpty ( ) ;
17590: CALL 16020 0 0
// end ; ruBarKam :
17594: GO 18909
17596: LD_INT 109
17598: DOUBLE
17599: EQUAL
17600: IFTRUE 17604
17602: GO 17751
17604: POP
// begin if IsOk ( Kamil ) and not Kamil in heikeSquad then
17605: LD_EXP 50
17609: PPUSH
17610: CALL_OW 302
17614: PUSH
17615: LD_EXP 50
17619: PUSH
17620: LD_EXP 14
17624: IN
17625: NOT
17626: AND
17627: IFFALSE 17745
// begin Say ( Heike , DH-Kamil-1 ) ;
17629: LD_EXP 46
17633: PPUSH
17634: LD_STRING DH-Kamil-1
17636: PPUSH
17637: CALL_OW 88
// Say ( Kamil , DKam-Kamil-2 ) ;
17641: LD_EXP 50
17645: PPUSH
17646: LD_STRING DKam-Kamil-2
17648: PPUSH
17649: CALL_OW 88
// if IsOk ( Sophia ) then
17653: LD_EXP 52
17657: PPUSH
17658: CALL_OW 302
17662: IFFALSE 17702
// if Sophia in heikeSquad then
17664: LD_EXP 52
17668: PUSH
17669: LD_EXP 14
17673: IN
17674: IFFALSE 17690
// Say ( Kamil , DKam-Kamil-a-3 ) else
17676: LD_EXP 50
17680: PPUSH
17681: LD_STRING DKam-Kamil-a-3
17683: PPUSH
17684: CALL_OW 88
17688: GO 17702
// Say ( Kamil , DKam-Kamil-3 ) ;
17690: LD_EXP 50
17694: PPUSH
17695: LD_STRING DKam-Kamil-3
17697: PPUSH
17698: CALL_OW 88
// SetSide ( Kamil , 2 ) ;
17702: LD_EXP 50
17706: PPUSH
17707: LD_INT 2
17709: PPUSH
17710: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kamil ) ;
17714: LD_ADDR_EXP 14
17718: PUSH
17719: LD_EXP 14
17723: PPUSH
17724: LD_EXP 50
17728: PPUSH
17729: CALL 66999 0 2
17733: ST_TO_ADDR
// ComExitBuilding ( Kamil ) ;
17734: LD_EXP 50
17738: PPUSH
17739: CALL_OW 122
// end else
17743: GO 17749
// SayHEmpty ( ) ;
17745: CALL 16020 0 0
// end ; ruOutpost1 :
17749: GO 18909
17751: LD_INT 169
17753: DOUBLE
17754: EQUAL
17755: IFTRUE 17759
17757: GO 17996
17759: POP
// begin if IsOk ( Kurt ) and not Kurt in heikeSquad then
17760: LD_EXP 55
17764: PPUSH
17765: CALL_OW 302
17769: PUSH
17770: LD_EXP 55
17774: PUSH
17775: LD_EXP 14
17779: IN
17780: NOT
17781: AND
17782: IFFALSE 17990
// begin if hasMethanol then
17784: LD_EXP 13
17788: IFFALSE 17919
// begin Say ( Heike , DH-Kurt-1 ) ;
17790: LD_EXP 46
17794: PPUSH
17795: LD_STRING DH-Kurt-1
17797: PPUSH
17798: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17802: LD_EXP 55
17806: PPUSH
17807: LD_STRING DKs-Kurt-2
17809: PPUSH
17810: CALL_OW 88
// if GetDistUnits ( Givi , ruOutpost1 ) < 10 and Givi in heikeSquad then
17814: LD_EXP 47
17818: PPUSH
17819: LD_INT 169
17821: PPUSH
17822: CALL_OW 296
17826: PUSH
17827: LD_INT 10
17829: LESS
17830: PUSH
17831: LD_EXP 47
17835: PUSH
17836: LD_EXP 14
17840: IN
17841: AND
17842: IFFALSE 17917
// begin ComMoveXY ( Givi , 100 , 37 ) ;
17844: LD_EXP 47
17848: PPUSH
17849: LD_INT 100
17851: PPUSH
17852: LD_INT 37
17854: PPUSH
17855: CALL_OW 111
// AddComTurnUnit ( Givi , ruOutpost1 ) ;
17859: LD_EXP 47
17863: PPUSH
17864: LD_INT 169
17866: PPUSH
17867: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
17871: LD_INT 35
17873: PPUSH
17874: CALL_OW 67
// until GetDistUnits ( Givi , ruOutpost1 ) < 7 ;
17878: LD_EXP 47
17882: PPUSH
17883: LD_INT 169
17885: PPUSH
17886: CALL_OW 296
17890: PUSH
17891: LD_INT 7
17893: LESS
17894: IFFALSE 17871
// Say ( Givi , DG-Kurt-3 ) ;
17896: LD_EXP 47
17900: PPUSH
17901: LD_STRING DG-Kurt-3
17903: PPUSH
17904: CALL_OW 88
// ComStop ( Givi ) ;
17908: LD_EXP 47
17912: PPUSH
17913: CALL_OW 141
// end ; end else
17917: GO 17947
// begin Say ( Heike , DH-Kurt-1 ) ;
17919: LD_EXP 46
17923: PPUSH
17924: LD_STRING DH-Kurt-1
17926: PPUSH
17927: CALL_OW 88
// Say ( Kurt , DKs-Kurt-2 ) ;
17931: LD_EXP 55
17935: PPUSH
17936: LD_STRING DKs-Kurt-2
17938: PPUSH
17939: CALL_OW 88
// SpawnAdditionalRuGuards ;
17943: CALL 3629 0 0
// end ; SetSide ( Kurt , 2 ) ;
17947: LD_EXP 55
17951: PPUSH
17952: LD_INT 2
17954: PPUSH
17955: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kurt ) ;
17959: LD_ADDR_EXP 14
17963: PUSH
17964: LD_EXP 14
17968: PPUSH
17969: LD_EXP 55
17973: PPUSH
17974: CALL 66999 0 2
17978: ST_TO_ADDR
// ComExitBuilding ( Kurt ) ;
17979: LD_EXP 55
17983: PPUSH
17984: CALL_OW 122
// end else
17988: GO 17994
// SayHEmpty ( ) ;
17990: CALL 16020 0 0
// end ; ruOutpostBar :
17994: GO 18909
17996: LD_INT 13
17998: DOUBLE
17999: EQUAL
18000: IFTRUE 18004
18002: GO 18050
18004: POP
// begin if not hasGuardPatrolPlan then
18005: LD_EXP 18
18009: NOT
18010: IFFALSE 18044
// begin Say ( Heike , DH-PatrolPlan ) ;
18012: LD_EXP 46
18016: PPUSH
18017: LD_STRING DH-PatrolPlan
18019: PPUSH
18020: CALL_OW 88
// hasGuardPatrolPlan := true ;
18024: LD_ADDR_EXP 18
18028: PUSH
18029: LD_INT 1
18031: ST_TO_ADDR
// ChangeSideFog ( 6 , 2 ) ;
18032: LD_INT 6
18034: PPUSH
18035: LD_INT 2
18037: PPUSH
18038: CALL_OW 343
// end else
18042: GO 18048
// SayHEmpty ( ) ;
18044: CALL 16020 0 0
// end ; ruKaiaBar :
18048: GO 18909
18050: LD_INT 147
18052: DOUBLE
18053: EQUAL
18054: IFTRUE 18058
18056: GO 18205
18058: POP
// begin if IsOk ( Kaia ) and not Kaia in heikeSquad then
18059: LD_EXP 51
18063: PPUSH
18064: CALL_OW 302
18068: PUSH
18069: LD_EXP 51
18073: PUSH
18074: LD_EXP 14
18078: IN
18079: NOT
18080: AND
18081: IFFALSE 18203
// begin Say ( Heike , DH-Kaia-1 ) ;
18083: LD_EXP 46
18087: PPUSH
18088: LD_STRING DH-Kaia-1
18090: PPUSH
18091: CALL_OW 88
// Say ( Kaia , DK-Kaia-2 ) ;
18095: LD_EXP 51
18099: PPUSH
18100: LD_STRING DK-Kaia-2
18102: PPUSH
18103: CALL_OW 88
// if hasSniperRifle then
18107: LD_EXP 11
18111: IFFALSE 18162
// begin if IsOk ( Markov ) then
18113: LD_EXP 53
18117: PPUSH
18118: CALL_OW 302
18122: IFFALSE 18138
// Say ( Kaia , DK-Kaia-3 ) else
18124: LD_EXP 51
18128: PPUSH
18129: LD_STRING DK-Kaia-3
18131: PPUSH
18132: CALL_OW 88
18136: GO 18150
// Say ( Kaia , DK-Kaia-a-3 ) ;
18138: LD_EXP 51
18142: PPUSH
18143: LD_STRING DK-Kaia-a-3
18145: PPUSH
18146: CALL_OW 88
// Say ( Heike , DH-Kaia-4 ) ;
18150: LD_EXP 46
18154: PPUSH
18155: LD_STRING DH-Kaia-4
18157: PPUSH
18158: CALL_OW 88
// end ; SetSide ( Kaia , 2 ) ;
18162: LD_EXP 51
18166: PPUSH
18167: LD_INT 2
18169: PPUSH
18170: CALL_OW 235
// heikeSquad := Join ( heikeSquad , Kaia ) ;
18174: LD_ADDR_EXP 14
18178: PUSH
18179: LD_EXP 14
18183: PPUSH
18184: LD_EXP 51
18188: PPUSH
18189: CALL 66999 0 2
18193: ST_TO_ADDR
// ComExitBuilding ( Kaia ) ;
18194: LD_EXP 51
18198: PPUSH
18199: CALL_OW 122
// end ; end ; ruWeaponsBar :
18203: GO 18909
18205: LD_INT 137
18207: DOUBLE
18208: EQUAL
18209: IFTRUE 18213
18211: GO 18908
18213: POP
// begin if hasWeapons then
18214: LD_EXP 19
18218: IFFALSE 18894
// begin entranceVisitedList := entranceVisitedList diff ruWeaponsBar ;
18220: LD_ADDR_EXP 16
18224: PUSH
18225: LD_EXP 16
18229: PUSH
18230: LD_INT 137
18232: DIFF
18233: ST_TO_ADDR
// tmp := UnitFilter ( heikeSquad , [ f_dist , Heike , 8 ] ) ;
18234: LD_ADDR_VAR 0 4
18238: PUSH
18239: LD_EXP 14
18243: PPUSH
18244: LD_INT 91
18246: PUSH
18247: LD_EXP 46
18251: PUSH
18252: LD_INT 8
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 72
18264: ST_TO_ADDR
// if not heikeSquad or not tmp then
18265: LD_EXP 14
18269: NOT
18270: PUSH
18271: LD_VAR 0 4
18275: NOT
18276: OR
18277: IFFALSE 18293
// Say ( Heike , DH-Weapons-Alone ) else
18279: LD_EXP 46
18283: PPUSH
18284: LD_STRING DH-Weapons-Alone
18286: PPUSH
18287: CALL_OW 88
18291: GO 18892
// begin if not firstArmouryDialog then
18293: LD_EXP 39
18297: NOT
18298: IFFALSE 18357
// begin Say ( Heike , DH-Weapons-1 ) ;
18300: LD_EXP 46
18304: PPUSH
18305: LD_STRING DH-Weapons-1
18307: PPUSH
18308: CALL_OW 88
// Say ( Heike , DH-Weapons-2 ) ;
18312: LD_EXP 46
18316: PPUSH
18317: LD_STRING DH-Weapons-2
18319: PPUSH
18320: CALL_OW 88
// Query ( Weapons ) ;
18324: LD_STRING Weapons
18326: PPUSH
18327: CALL_OW 97
// SetAreaMapShow ( weaponariesArea , 1 ) ;
18331: LD_INT 65
18333: PPUSH
18334: LD_INT 1
18336: PPUSH
18337: CALL_OW 424
// canEquipWeapons := true ;
18341: LD_ADDR_EXP 41
18345: PUSH
18346: LD_INT 1
18348: ST_TO_ADDR
// firstArmouryDialog := true ;
18349: LD_ADDR_EXP 39
18353: PUSH
18354: LD_INT 1
18356: ST_TO_ADDR
// end ; if hasRevolver and Kaia in tmp and GetClass ( Kaia ) <> class_revolver then
18357: LD_EXP 8
18361: PUSH
18362: LD_EXP 51
18366: PUSH
18367: LD_VAR 0 4
18371: IN
18372: AND
18373: PUSH
18374: LD_EXP 51
18378: PPUSH
18379: CALL_OW 257
18383: PUSH
18384: LD_INT 34
18386: NONEQUAL
18387: AND
18388: IFFALSE 18534
// begin SetSide ( Kaia , 5 ) ;
18390: LD_EXP 51
18394: PPUSH
18395: LD_INT 5
18397: PPUSH
18398: CALL_OW 235
// ComEnterUnit ( Kaia , ruWeaponsBar ) ;
18402: LD_EXP 51
18406: PPUSH
18407: LD_INT 137
18409: PPUSH
18410: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18414: LD_INT 35
18416: PPUSH
18417: CALL_OW 67
// until IsInUnit ( Kaia ) ;
18421: LD_EXP 51
18425: PPUSH
18426: CALL_OW 310
18430: IFFALSE 18414
// Say ( Heike , DH-Kaia-Revolver-2 ) ;
18432: LD_EXP 46
18436: PPUSH
18437: LD_STRING DH-Kaia-Revolver-2
18439: PPUSH
18440: CALL_OW 88
// SetClassKaiaRevolver ;
18444: CALL 1769 0 0
// hasRevolver := false ;
18448: LD_ADDR_EXP 8
18452: PUSH
18453: LD_INT 0
18455: ST_TO_ADDR
// SetSide ( Kaia , 2 ) ;
18456: LD_EXP 51
18460: PPUSH
18461: LD_INT 2
18463: PPUSH
18464: CALL_OW 235
// ComExitBuilding ( Kaia ) ;
18468: LD_EXP 51
18472: PPUSH
18473: CALL_OW 122
// if GetClass ( Kaia ) = class_hunter and Mike in heikeSquad and GetSide ( Mike ) = 2 then
18477: LD_EXP 51
18481: PPUSH
18482: CALL_OW 257
18486: PUSH
18487: LD_INT 32
18489: EQUAL
18490: PUSH
18491: LD_EXP 48
18495: PUSH
18496: LD_EXP 14
18500: IN
18501: AND
18502: PUSH
18503: LD_EXP 48
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: LD_INT 2
18515: EQUAL
18516: AND
18517: IFFALSE 18534
// begin giveSniperRifleToMike := true ;
18519: LD_ADDR_EXP 42
18523: PUSH
18524: LD_INT 1
18526: ST_TO_ADDR
// Query ( QSniperMike ) ;
18527: LD_STRING QSniperMike
18529: PPUSH
18530: CALL_OW 97
// end ; end ; if Givi in tmp and GetClass ( Givi ) = class_prison then
18534: LD_EXP 47
18538: PUSH
18539: LD_VAR 0 4
18543: IN
18544: PUSH
18545: LD_EXP 47
18549: PPUSH
18550: CALL_OW 257
18554: PUSH
18555: LD_INT 33
18557: EQUAL
18558: AND
18559: IFFALSE 18700
// begin SetSide ( Givi , 5 ) ;
18561: LD_EXP 47
18565: PPUSH
18566: LD_INT 5
18568: PPUSH
18569: CALL_OW 235
// ComEnterUnit ( Givi , ruWeaponsBar ) ;
18573: LD_EXP 47
18577: PPUSH
18578: LD_INT 137
18580: PPUSH
18581: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18585: LD_INT 35
18587: PPUSH
18588: CALL_OW 67
// until IsInUnit ( Givi ) ;
18592: LD_EXP 47
18596: PPUSH
18597: CALL_OW 310
18601: IFFALSE 18585
// Say ( Givi , DG-Weapons-3 ) ;
18603: LD_EXP 47
18607: PPUSH
18608: LD_STRING DG-Weapons-3
18610: PPUSH
18611: CALL_OW 88
// Say ( Heike , DH-Weapons-4 ) ;
18615: LD_EXP 46
18619: PPUSH
18620: LD_STRING DH-Weapons-4
18622: PPUSH
18623: CALL_OW 88
// Say ( Givi , DG-Weapons-5 ) ;
18627: LD_EXP 47
18631: PPUSH
18632: LD_STRING DG-Weapons-5
18634: PPUSH
18635: CALL_OW 88
// SetClass ( Givi , class_desert_warior ) ;
18639: LD_EXP 47
18643: PPUSH
18644: LD_INT 11
18646: PPUSH
18647: CALL_OW 336
// ComExitBuilding ( Givi ) ;
18651: LD_EXP 47
18655: PPUSH
18656: CALL_OW 122
// SetSide ( Givi , 2 ) ;
18660: LD_EXP 47
18664: PPUSH
18665: LD_INT 2
18667: PPUSH
18668: CALL_OW 235
// if hasRevolver then
18672: LD_EXP 8
18676: IFFALSE 18698
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18678: LD_EXP 46
18682: PPUSH
18683: LD_STRING DH-Kaia-Revolver-1
18685: PPUSH
18686: CALL_OW 88
// heikeHasRevolver := true ;
18690: LD_ADDR_EXP 20
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// end ; end else
18698: GO 18892
// if Kamil in tmp and GetClass ( Kamil ) = class_prison then
18700: LD_EXP 50
18704: PUSH
18705: LD_VAR 0 4
18709: IN
18710: PUSH
18711: LD_EXP 50
18715: PPUSH
18716: CALL_OW 257
18720: PUSH
18721: LD_INT 33
18723: EQUAL
18724: AND
18725: IFFALSE 18854
// begin SetSide ( Kamil , 5 ) ;
18727: LD_EXP 50
18731: PPUSH
18732: LD_INT 5
18734: PPUSH
18735: CALL_OW 235
// ComEnterUnit ( Kamil , ruWeaponsBar ) ;
18739: LD_EXP 50
18743: PPUSH
18744: LD_INT 137
18746: PPUSH
18747: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
18751: LD_INT 35
18753: PPUSH
18754: CALL_OW 67
// until IsInUnit ( Kamil ) ;
18758: LD_EXP 50
18762: PPUSH
18763: CALL_OW 310
18767: IFFALSE 18751
// Say ( Kamil , DKam-Weapons-a-3 ) ;
18769: LD_EXP 50
18773: PPUSH
18774: LD_STRING DKam-Weapons-a-3
18776: PPUSH
18777: CALL_OW 88
// Say ( Heike , DH-Weapons-a-4 ) ;
18781: LD_EXP 46
18785: PPUSH
18786: LD_STRING DH-Weapons-a-4
18788: PPUSH
18789: CALL_OW 88
// SetClass ( Kamil , class_desert_warior ) ;
18793: LD_EXP 50
18797: PPUSH
18798: LD_INT 11
18800: PPUSH
18801: CALL_OW 336
// ComExitBuilding ( Kamil ) ;
18805: LD_EXP 50
18809: PPUSH
18810: CALL_OW 122
// SetSide ( Kamil , 2 ) ;
18814: LD_EXP 50
18818: PPUSH
18819: LD_INT 2
18821: PPUSH
18822: CALL_OW 235
// if hasRevolver then
18826: LD_EXP 8
18830: IFFALSE 18852
// begin Say ( Heike , DH-Kaia-Revolver-1 ) ;
18832: LD_EXP 46
18836: PPUSH
18837: LD_STRING DH-Kaia-Revolver-1
18839: PPUSH
18840: CALL_OW 88
// heikeHasRevolver := true ;
18844: LD_ADDR_EXP 20
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// end ; end else
18852: GO 18892
// begin Say ( Heike , DH-Weapons-Alone-2 ) ;
18854: LD_EXP 46
18858: PPUSH
18859: LD_STRING DH-Weapons-Alone-2
18861: PPUSH
18862: CALL_OW 88
// if hasRevolver then
18866: LD_EXP 8
18870: IFFALSE 18892
// begin Say ( Heike , DH-Kaia-Revolver-1a ) ;
18872: LD_EXP 46
18876: PPUSH
18877: LD_STRING DH-Kaia-Revolver-1a
18879: PPUSH
18880: CALL_OW 88
// heikeHasRevolver := true ;
18884: LD_ADDR_EXP 20
18888: PUSH
18889: LD_INT 1
18891: ST_TO_ADDR
// end ; end ; end ; end else
18892: GO 18906
// Say ( Heike , DH-Locked ) ;
18894: LD_EXP 46
18898: PPUSH
18899: LD_STRING DH-Locked
18901: PPUSH
18902: CALL_OW 88
// end ; end ;
18906: GO 18909
18908: POP
// SetSide ( building , 3 ) ;
18909: LD_VAR 0 1
18913: PPUSH
18914: LD_INT 3
18916: PPUSH
18917: CALL_OW 235
// UnitsBlockingEntrance ( building ) ;
18921: LD_VAR 0 1
18925: PPUSH
18926: CALL 20051 0 1
// wait ( 0 0$0.3 ) ;
18930: LD_INT 10
18932: PPUSH
18933: CALL_OW 67
// ComExitBuilding ( Heike ) ;
18937: LD_EXP 46
18941: PPUSH
18942: CALL_OW 122
// SetSide ( Heike , 2 ) ;
18946: LD_EXP 46
18950: PPUSH
18951: LD_INT 2
18953: PPUSH
18954: CALL_OW 235
// InGameOff ;
18958: CALL_OW 9
// end ;
18962: LD_VAR 0 2
18966: RET
// every 0 0$2 trigger not hasMuchin and not isAlarm and FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and ( ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and contactWithAmerican ) or ( not contactWithAmerican ) ) marked gameStartEvent do
18967: LD_EXP 30
18971: NOT
18972: PUSH
18973: LD_EXP 17
18977: NOT
18978: AND
18979: PUSH
18980: LD_INT 22
18982: PUSH
18983: LD_INT 5
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 21
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PPUSH
19004: CALL_OW 69
19008: PUSH
19009: LD_INT 0
19011: EQUAL
19012: AND
19013: PUSH
19014: LD_INT 22
19016: PUSH
19017: LD_INT 4
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 21
19026: PUSH
19027: LD_INT 1
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PPUSH
19038: CALL_OW 69
19042: PUSH
19043: LD_INT 0
19045: EQUAL
19046: PUSH
19047: LD_EXP 25
19051: AND
19052: PUSH
19053: LD_EXP 25
19057: NOT
19058: OR
19059: AND
19060: IFFALSE 19092
19062: GO 19064
19064: DISABLE
// begin DialogueOn ;
19065: CALL_OW 6
// Say ( Heike , DH-Alarm-2 ) ;
19069: LD_EXP 46
19073: PPUSH
19074: LD_STRING DH-Alarm-2
19076: PPUSH
19077: CALL_OW 88
// DialogueOff ;
19081: CALL_OW 7
// ChangeMissionObjectives ( M1-people-out ) ;
19085: LD_STRING M1-people-out
19087: PPUSH
19088: CALL_OW 337
// end ;
19092: END
// every 0 0$2 trigger GetSide ( Mike ) = 2 and Mike in heikeSquad and GetDistUnits ( Heike , Mike ) < 6 and not hasMuchin and giveSniperRifleToMike marked gameStartEvent do
19093: LD_EXP 48
19097: PPUSH
19098: CALL_OW 255
19102: PUSH
19103: LD_INT 2
19105: EQUAL
19106: PUSH
19107: LD_EXP 48
19111: PUSH
19112: LD_EXP 14
19116: IN
19117: AND
19118: PUSH
19119: LD_EXP 46
19123: PPUSH
19124: LD_EXP 48
19128: PPUSH
19129: CALL_OW 296
19133: PUSH
19134: LD_INT 6
19136: LESS
19137: AND
19138: PUSH
19139: LD_EXP 30
19143: NOT
19144: AND
19145: PUSH
19146: LD_EXP 42
19150: AND
19151: IFFALSE 19168
19153: GO 19155
19155: DISABLE
// SetClass ( Mike , class_hunter ) ;
19156: LD_EXP 48
19160: PPUSH
19161: LD_INT 32
19163: PPUSH
19164: CALL_OW 336
19168: END
// every 0 0$5 trigger canEquipWeapons and weaponsAmount and GetSide ( ruWeaponsBar ) = 3 and UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) and not GetAttitude ( 2 , 3 ) = att_enemy and not GetDistUnits ( ruDisturb , ruWeaponsBar ) < 12 marked gameStartEvent do var i , tmp ;
19169: LD_EXP 41
19173: PUSH
19174: LD_EXP 40
19178: AND
19179: PUSH
19180: LD_INT 137
19182: PPUSH
19183: CALL_OW 255
19187: PUSH
19188: LD_INT 3
19190: EQUAL
19191: AND
19192: PUSH
19193: LD_EXP 14
19197: PPUSH
19198: LD_INT 95
19200: PUSH
19201: LD_INT 65
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_INT 2
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 25
19220: PUSH
19221: LD_INT 33
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: PPUSH
19233: CALL_OW 72
19237: AND
19238: PUSH
19239: LD_INT 2
19241: PPUSH
19242: LD_INT 3
19244: PPUSH
19245: CALL_OW 81
19249: PUSH
19250: LD_INT 2
19252: EQUAL
19253: NOT
19254: AND
19255: PUSH
19256: LD_EXP 66
19260: PPUSH
19261: LD_INT 137
19263: PPUSH
19264: CALL_OW 296
19268: PUSH
19269: LD_INT 12
19271: LESS
19272: NOT
19273: AND
19274: IFFALSE 19528
19276: GO 19278
19278: DISABLE
19279: LD_INT 0
19281: PPUSH
19282: PPUSH
// begin enable ;
19283: ENABLE
// tmp := UnitFilter ( heikeSquad , [ [ f_inarea , weaponariesArea ] , [ f_side , 2 ] , [ f_class , class_prison ] ] ) ;
19284: LD_ADDR_VAR 0 2
19288: PUSH
19289: LD_EXP 14
19293: PPUSH
19294: LD_INT 95
19296: PUSH
19297: LD_INT 65
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 22
19306: PUSH
19307: LD_INT 2
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 25
19316: PUSH
19317: LD_INT 33
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: PPUSH
19329: CALL_OW 72
19333: ST_TO_ADDR
// if Query ( QWeapons ) = 1 then
19334: LD_STRING QWeapons
19336: PPUSH
19337: CALL_OW 97
19341: PUSH
19342: LD_INT 1
19344: EQUAL
19345: IFFALSE 19528
// begin for i in tmp do
19347: LD_ADDR_VAR 0 1
19351: PUSH
19352: LD_VAR 0 2
19356: PUSH
19357: FOR_IN
19358: IFFALSE 19526
// begin if UnitsInside ( ruWeaponsBar ) = 6 then
19360: LD_INT 137
19362: PPUSH
19363: CALL_OW 313
19367: PUSH
19368: LD_INT 6
19370: EQUAL
19371: IFFALSE 19375
// continue ;
19373: GO 19357
// SetSide ( i , 3 ) ;
19375: LD_VAR 0 1
19379: PPUSH
19380: LD_INT 3
19382: PPUSH
19383: CALL_OW 235
// ComEnterUnit ( i , ruWeaponsBar ) ;
19387: LD_VAR 0 1
19391: PPUSH
19392: LD_INT 137
19394: PPUSH
19395: CALL_OW 120
// weaponsAmount := Dec ( weaponsAmount ) ;
19399: LD_ADDR_EXP 40
19403: PUSH
19404: LD_EXP 40
19408: PPUSH
19409: CALL 68382 0 1
19413: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
19414: LD_INT 10
19416: PPUSH
19417: CALL_OW 67
// until IsInUnit ( i ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 310
19430: IFFALSE 19414
// SetClass ( i , class_soldier ) ;
19432: LD_VAR 0 1
19436: PPUSH
19437: LD_INT 1
19439: PPUSH
19440: CALL_OW 336
// repeat ComExitBuilding ( i ) ;
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL_OW 122
// wait ( 0 0$1 ) ;
19453: LD_INT 35
19455: PPUSH
19456: CALL_OW 67
// until not IsInUnit ( i ) ;
19460: LD_VAR 0 1
19464: PPUSH
19465: CALL_OW 310
19469: NOT
19470: IFFALSE 19444
// SetSide ( i , 2 ) ;
19472: LD_VAR 0 1
19476: PPUSH
19477: LD_INT 2
19479: PPUSH
19480: CALL_OW 235
// AddComMoveXY ( i , 191 , 126 ) ;
19484: LD_VAR 0 1
19488: PPUSH
19489: LD_INT 191
19491: PPUSH
19492: LD_INT 126
19494: PPUSH
19495: CALL_OW 171
// if weaponsAmount = 0 then
19499: LD_EXP 40
19503: PUSH
19504: LD_INT 0
19506: EQUAL
19507: IFFALSE 19524
// begin SetAreaMapShow ( weaponariesArea , 0 ) ;
19509: LD_INT 65
19511: PPUSH
19512: LD_INT 0
19514: PPUSH
19515: CALL_OW 424
// disable ;
19519: DISABLE
// exit ;
19520: POP
19521: POP
19522: GO 19528
// end ; end ;
19524: GO 19357
19526: POP
19527: POP
// end ; end ; end_of_file
19528: PPOPN 2
19530: END
// on SailEvent ( event ) do begin case event of centerCamEvent :
19531: LD_VAR 0 1
19535: PUSH
19536: LD_INT 3
19538: DOUBLE
19539: EQUAL
19540: IFTRUE 19544
19542: GO 19574
19544: POP
// begin repeat wait ( 0 0$1 ) ;
19545: LD_INT 35
19547: PPUSH
19548: CALL_OW 67
// CenterOnUnits ( Heike ) ;
19552: LD_EXP 46
19556: PPUSH
19557: CALL_OW 85
// until IsDying ( Heike ) ;
19561: LD_EXP 46
19565: PPUSH
19566: CALL_OW 303
19570: IFFALSE 19545
// end ; end ;
19572: GO 19575
19574: POP
// end ;
19575: PPOPN 1
19577: END
// on SailEventCustom ( p1 , x , y , time , p5 , p6 , p7 ) do begin if dialogue_skipped then
19578: LD_OWVAR 59
19582: IFFALSE 19586
// exit ;
19584: GO 19660
// if showPlaceEvent then
19586: LD_INT 4
19588: IFFALSE 19660
// begin PlaceSeeing ( x , y , 2 , - 6 ) ;
19590: LD_VAR 0 2
19594: PPUSH
19595: LD_VAR 0 3
19599: PPUSH
19600: LD_INT 2
19602: PPUSH
19603: LD_INT 6
19605: NEG
19606: PPUSH
19607: CALL_OW 330
// CenterOnXY ( x , y ) ;
19611: LD_VAR 0 2
19615: PPUSH
19616: LD_VAR 0 3
19620: PPUSH
19621: CALL_OW 84
// wait ( time ) ;
19625: LD_VAR 0 4
19629: PPUSH
19630: CALL_OW 67
// CenterNowOnUnits ( Heike ) ;
19634: LD_EXP 46
19638: PPUSH
19639: CALL_OW 87
// RemoveSeeing ( x , y , 2 ) ;
19643: LD_VAR 0 2
19647: PPUSH
19648: LD_VAR 0 3
19652: PPUSH
19653: LD_INT 2
19655: PPUSH
19656: CALL_OW 331
// end ; end ;
19660: PPOPN 7
19662: END
// on UnitDestroyed ( un ) do var x , y ;
19663: LD_INT 0
19665: PPUSH
19666: PPUSH
// begin if un = Heike and hasNormalScene then
19667: LD_VAR 0 1
19671: PUSH
19672: LD_EXP 46
19676: EQUAL
19677: PUSH
19678: LD_EXP 5
19682: AND
19683: IFFALSE 19707
// if loseCounter then
19685: LD_EXP 32
19689: IFFALSE 19700
// YouLost ( HeikeNoSurrender ) else
19691: LD_STRING HeikeNoSurrender
19693: PPUSH
19694: CALL_OW 104
19698: GO 19707
// YouLost ( Heike ) ;
19700: LD_STRING Heike
19702: PPUSH
19703: CALL_OW 104
// if GetSide ( un ) = 2 and GetType ( un ) = unit_human then
19707: LD_VAR 0 1
19711: PPUSH
19712: CALL_OW 255
19716: PUSH
19717: LD_INT 2
19719: EQUAL
19720: PUSH
19721: LD_VAR 0 1
19725: PPUSH
19726: CALL_OW 247
19730: PUSH
19731: LD_INT 1
19733: EQUAL
19734: AND
19735: IFFALSE 19752
// loseCounter := Inc ( loseCounter ) ;
19737: LD_ADDR_EXP 32
19741: PUSH
19742: LD_EXP 32
19746: PPUSH
19747: CALL 68360 0 1
19751: ST_TO_ADDR
// if GetSide ( un ) = 6 and not isAlarm and un in ruPatrol then
19752: LD_VAR 0 1
19756: PPUSH
19757: CALL_OW 255
19761: PUSH
19762: LD_INT 6
19764: EQUAL
19765: PUSH
19766: LD_EXP 17
19770: NOT
19771: AND
19772: PUSH
19773: LD_VAR 0 1
19777: PUSH
19778: LD_EXP 71
19782: IN
19783: AND
19784: IFFALSE 19888
// begin x := GetX ( un ) ;
19786: LD_ADDR_VAR 0 2
19790: PUSH
19791: LD_VAR 0 1
19795: PPUSH
19796: CALL_OW 250
19800: ST_TO_ADDR
// y := GetY ( un ) ;
19801: LD_ADDR_VAR 0 3
19805: PUSH
19806: LD_VAR 0 1
19810: PPUSH
19811: CALL_OW 251
19815: ST_TO_ADDR
// ruKilledHex := Join ( ruKilledHex , [ x , y ] ) ;
19816: LD_ADDR_EXP 43
19820: PUSH
19821: LD_EXP 43
19825: PPUSH
19826: LD_VAR 0 2
19830: PUSH
19831: LD_VAR 0 3
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PPUSH
19840: CALL 66999 0 2
19844: ST_TO_ADDR
// ruPatrol := ruPatrol diff un ;
19845: LD_ADDR_EXP 71
19849: PUSH
19850: LD_EXP 71
19854: PUSH
19855: LD_VAR 0 1
19859: DIFF
19860: ST_TO_ADDR
// if SeeXY ( 3 , x , y ) then
19861: LD_INT 3
19863: PPUSH
19864: LD_VAR 0 2
19868: PPUSH
19869: LD_VAR 0 3
19873: PPUSH
19874: CALL_OW 293
19878: IFFALSE 19888
// isAlarm := true ;
19880: LD_ADDR_EXP 17
19884: PUSH
19885: LD_INT 1
19887: ST_TO_ADDR
// end ; end ;
19888: PPOPN 3
19890: END
// on Contact ( s1 , s2 ) do begin if meetWithMuchin then
19891: LD_EXP 44
19895: IFFALSE 19899
// exit ;
19897: GO 19947
// if ( s1 = 2 and s2 = 3 ) or ( s1 = 3 and s2 = 2 ) then
19899: LD_VAR 0 1
19903: PUSH
19904: LD_INT 2
19906: EQUAL
19907: PUSH
19908: LD_VAR 0 2
19912: PUSH
19913: LD_INT 3
19915: EQUAL
19916: AND
19917: PUSH
19918: LD_VAR 0 1
19922: PUSH
19923: LD_INT 3
19925: EQUAL
19926: PUSH
19927: LD_VAR 0 2
19931: PUSH
19932: LD_INT 2
19934: EQUAL
19935: AND
19936: OR
19937: IFFALSE 19947
// isAlarm := true ;
19939: LD_ADDR_EXP 17
19943: PUSH
19944: LD_INT 1
19946: ST_TO_ADDR
// end ; end_of_file
19947: PPOPN 2
19949: END
// export function AreInTheSameBuilding ( unit1 , unit2 ) ; var u1 , u2 ; begin
19950: LD_INT 0
19952: PPUSH
19953: PPUSH
19954: PPUSH
// u1 := IsInUnit ( unit1 ) ;
19955: LD_ADDR_VAR 0 4
19959: PUSH
19960: LD_VAR 0 1
19964: PPUSH
19965: CALL_OW 310
19969: ST_TO_ADDR
// u2 := IsInUnit ( unit2 ) ;
19970: LD_ADDR_VAR 0 5
19974: PUSH
19975: LD_VAR 0 2
19979: PPUSH
19980: CALL_OW 310
19984: ST_TO_ADDR
// result := u1 and u1 = u2 ;
19985: LD_ADDR_VAR 0 3
19989: PUSH
19990: LD_VAR 0 4
19994: PUSH
19995: LD_VAR 0 4
19999: PUSH
20000: LD_VAR 0 5
20004: EQUAL
20005: AND
20006: ST_TO_ADDR
// end ;
20007: LD_VAR 0 3
20011: RET
// export function ShowPlace ( x , y , time ) ; begin
20012: LD_INT 0
20014: PPUSH
// RaiseSailEventCustom ( showPlaceEvent , x , y , time , 0 , 0 , 0 ) ;
20015: LD_INT 4
20017: PPUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: LD_VAR 0 2
20027: PPUSH
20028: LD_VAR 0 3
20032: PPUSH
20033: LD_INT 0
20035: PPUSH
20036: LD_INT 0
20038: PPUSH
20039: LD_INT 0
20041: PPUSH
20042: CALL_OW 595
// end ;
20046: LD_VAR 0 4
20050: RET
// export function UnitsBlockingEntrance ( building ) ; var i , x , y , d , entrance ; begin
20051: LD_INT 0
20053: PPUSH
20054: PPUSH
20055: PPUSH
20056: PPUSH
20057: PPUSH
20058: PPUSH
// if not IsOk ( building ) then
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 302
20068: NOT
20069: IFFALSE 20073
// exit ;
20071: GO 20320
// x := GetX ( building ) ;
20073: LD_ADDR_VAR 0 4
20077: PUSH
20078: LD_VAR 0 1
20082: PPUSH
20083: CALL_OW 250
20087: ST_TO_ADDR
// y := GetY ( building ) ;
20088: LD_ADDR_VAR 0 5
20092: PUSH
20093: LD_VAR 0 1
20097: PPUSH
20098: CALL_OW 251
20102: ST_TO_ADDR
// d := GetDir ( building ) ;
20103: LD_ADDR_VAR 0 6
20107: PUSH
20108: LD_VAR 0 1
20112: PPUSH
20113: CALL_OW 254
20117: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20118: LD_ADDR_VAR 0 7
20122: PUSH
20123: LD_VAR 0 4
20127: PPUSH
20128: LD_VAR 0 6
20132: PPUSH
20133: LD_INT 3
20135: PPUSH
20136: CALL_OW 272
20140: PUSH
20141: LD_VAR 0 5
20145: PPUSH
20146: LD_VAR 0 6
20150: PPUSH
20151: LD_INT 3
20153: PPUSH
20154: CALL_OW 273
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20163: LD_VAR 0 7
20167: PUSH
20168: LD_INT 1
20170: ARRAY
20171: PPUSH
20172: LD_VAR 0 7
20176: PUSH
20177: LD_INT 2
20179: ARRAY
20180: PPUSH
20181: CALL_OW 488
20185: NOT
20186: IFFALSE 20190
// exit ;
20188: GO 20320
// result := FilterAllUnits ( [ [ f_distxy , x , y , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
20190: LD_ADDR_VAR 0 2
20194: PUSH
20195: LD_INT 92
20197: PUSH
20198: LD_VAR 0 4
20202: PUSH
20203: LD_VAR 0 5
20207: PUSH
20208: LD_INT 4
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 3
20219: PUSH
20220: LD_INT 54
20222: PUSH
20223: EMPTY
20224: LIST
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PPUSH
20234: CALL_OW 69
20238: ST_TO_ADDR
// if not result then
20239: LD_VAR 0 2
20243: NOT
20244: IFFALSE 20248
// exit ;
20246: GO 20320
// for i in result do
20248: LD_ADDR_VAR 0 3
20252: PUSH
20253: LD_VAR 0 2
20257: PUSH
20258: FOR_IN
20259: IFFALSE 20318
// ComMoveXY ( i , ShiftX ( GetX ( i ) , d , 3 ) , ShiftY ( GetY ( i ) , d , 3 ) ) ;
20261: LD_VAR 0 3
20265: PPUSH
20266: LD_VAR 0 3
20270: PPUSH
20271: CALL_OW 250
20275: PPUSH
20276: LD_VAR 0 6
20280: PPUSH
20281: LD_INT 3
20283: PPUSH
20284: CALL_OW 272
20288: PPUSH
20289: LD_VAR 0 3
20293: PPUSH
20294: CALL_OW 251
20298: PPUSH
20299: LD_VAR 0 6
20303: PPUSH
20304: LD_INT 3
20306: PPUSH
20307: CALL_OW 273
20311: PPUSH
20312: CALL_OW 111
20316: GO 20258
20318: POP
20319: POP
// end ;
20320: LD_VAR 0 2
20324: RET
// export function InEntrance ( unit , building ) ; var x , y , d , entrance , btype ; begin
20325: LD_INT 0
20327: PPUSH
20328: PPUSH
20329: PPUSH
20330: PPUSH
20331: PPUSH
20332: PPUSH
// if not IsOk ( unit ) or not IsOk ( building ) or UnitsInside ( building ) = 6 then
20333: LD_VAR 0 1
20337: PPUSH
20338: CALL_OW 302
20342: NOT
20343: PUSH
20344: LD_VAR 0 2
20348: PPUSH
20349: CALL_OW 302
20353: NOT
20354: OR
20355: PUSH
20356: LD_VAR 0 2
20360: PPUSH
20361: CALL_OW 313
20365: PUSH
20366: LD_INT 6
20368: EQUAL
20369: OR
20370: IFFALSE 20374
// exit ;
20372: GO 20591
// btype := GetBType ( building ) ;
20374: LD_ADDR_VAR 0 8
20378: PUSH
20379: LD_VAR 0 2
20383: PPUSH
20384: CALL_OW 266
20388: ST_TO_ADDR
// if not btype in [ b_depot , b_warehouse , b_workshop , b_armoury , b_barracks , b_factory , b_lab , b_lab_half , b_lab_full ] then
20389: LD_VAR 0 8
20393: PUSH
20394: LD_INT 0
20396: PUSH
20397: LD_INT 1
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: LD_INT 4
20405: PUSH
20406: LD_INT 5
20408: PUSH
20409: LD_INT 3
20411: PUSH
20412: LD_INT 6
20414: PUSH
20415: LD_INT 7
20417: PUSH
20418: LD_INT 8
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: IN
20432: NOT
20433: IFFALSE 20437
// exit ;
20435: GO 20591
// x := GetX ( building ) ;
20437: LD_ADDR_VAR 0 4
20441: PUSH
20442: LD_VAR 0 2
20446: PPUSH
20447: CALL_OW 250
20451: ST_TO_ADDR
// y := GetY ( building ) ;
20452: LD_ADDR_VAR 0 5
20456: PUSH
20457: LD_VAR 0 2
20461: PPUSH
20462: CALL_OW 251
20466: ST_TO_ADDR
// d := GetDir ( building ) ;
20467: LD_ADDR_VAR 0 6
20471: PUSH
20472: LD_VAR 0 2
20476: PPUSH
20477: CALL_OW 254
20481: ST_TO_ADDR
// entrance := [ ShiftX ( x , d , 3 ) , ShiftY ( y , d , 3 ) ] ;
20482: LD_ADDR_VAR 0 7
20486: PUSH
20487: LD_VAR 0 4
20491: PPUSH
20492: LD_VAR 0 6
20496: PPUSH
20497: LD_INT 3
20499: PPUSH
20500: CALL_OW 272
20504: PUSH
20505: LD_VAR 0 5
20509: PPUSH
20510: LD_VAR 0 6
20514: PPUSH
20515: LD_INT 3
20517: PPUSH
20518: CALL_OW 273
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: ST_TO_ADDR
// if not ValidHex ( entrance [ 1 ] , entrance [ 2 ] ) then
20527: LD_VAR 0 7
20531: PUSH
20532: LD_INT 1
20534: ARRAY
20535: PPUSH
20536: LD_VAR 0 7
20540: PUSH
20541: LD_INT 2
20543: ARRAY
20544: PPUSH
20545: CALL_OW 488
20549: NOT
20550: IFFALSE 20554
// exit ;
20552: GO 20591
// result := GetDistUnitXY ( unit , entrance [ 1 ] , entrance [ 2 ] ) < 4 ;
20554: LD_ADDR_VAR 0 3
20558: PUSH
20559: LD_VAR 0 1
20563: PPUSH
20564: LD_VAR 0 7
20568: PUSH
20569: LD_INT 1
20571: ARRAY
20572: PPUSH
20573: LD_VAR 0 7
20577: PUSH
20578: LD_INT 2
20580: ARRAY
20581: PPUSH
20582: CALL_OW 297
20586: PUSH
20587: LD_INT 4
20589: LESS
20590: ST_TO_ADDR
// end ;
20591: LD_VAR 0 3
20595: RET
// export function PlaceExplosives ( building ) ; begin
20596: LD_INT 0
20598: PPUSH
// explosivePlantedList := Join ( explosivePlantedList , building ) ;
20599: LD_ADDR_EXP 29
20603: PUSH
20604: LD_EXP 29
20608: PPUSH
20609: LD_VAR 0 1
20613: PPUSH
20614: CALL 66999 0 2
20618: ST_TO_ADDR
// PlaySoundXY ( GetX ( building ) , GetY ( building ) , PlantBomb ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 250
20628: PPUSH
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 251
20638: PPUSH
20639: LD_STRING PlantBomb
20641: PPUSH
20642: CALL_OW 366
// end ;
20646: LD_VAR 0 2
20650: RET
// export function CreateNature ; var i ; begin
20651: LD_INT 0
20653: PPUSH
20654: PPUSH
// PrepareFrog ;
20655: CALL 63476 0 0
// for i := 1 to 3 do
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: DOUBLE
20665: LD_INT 1
20667: DEC
20668: ST_TO_ADDR
20669: LD_INT 3
20671: PUSH
20672: FOR_TO
20673: IFFALSE 20692
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
20675: CALL_OW 44
20679: PPUSH
20680: LD_INT 24
20682: PPUSH
20683: LD_INT 0
20685: PPUSH
20686: CALL_OW 49
20690: GO 20672
20692: POP
20693: POP
// end ;
20694: LD_VAR 0 1
20698: RET
// export function MarkBuilding ( building , marker ) ; begin
20699: LD_INT 0
20701: PPUSH
// if marker then
20702: LD_VAR 0 2
20706: IFFALSE 20753
// begin PlaceSeeing ( GetX ( building ) , GetY ( building ) , 2 , - 3 ) ;
20708: LD_VAR 0 1
20712: PPUSH
20713: CALL_OW 250
20717: PPUSH
20718: LD_VAR 0 1
20722: PPUSH
20723: CALL_OW 251
20727: PPUSH
20728: LD_INT 2
20730: PPUSH
20731: LD_INT 3
20733: NEG
20734: PPUSH
20735: CALL_OW 330
// SetBName ( building , target ) ;
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_STRING target
20746: PPUSH
20747: CALL_OW 500
// end else
20751: GO 20792
// begin RemoveSeeing ( GetX ( building ) , GetY ( building ) , 2 ) ;
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 250
20762: PPUSH
20763: LD_VAR 0 1
20767: PPUSH
20768: CALL_OW 251
20772: PPUSH
20773: LD_INT 2
20775: PPUSH
20776: CALL_OW 331
// SetBName ( building ,  ) ;
20780: LD_VAR 0 1
20784: PPUSH
20785: LD_STRING 
20787: PPUSH
20788: CALL_OW 500
// end ; end ; end_of_file
20792: LD_VAR 0 3
20796: RET
// export lockerCodeValid , lockerBusy ; var step , code ; export function StartLockerMinigame ; begin
20797: LD_INT 0
20799: PPUSH
// lockerCodeValid := false ;
20800: LD_ADDR_EXP 72
20804: PUSH
20805: LD_INT 0
20807: ST_TO_ADDR
// if not step then
20808: LD_LOC 1
20812: NOT
20813: IFFALSE 20823
// step := 1 ;
20815: LD_ADDR_LOC 1
20819: PUSH
20820: LD_INT 1
20822: ST_TO_ADDR
// case Query ( HEscape & step ) of 1 :
20823: LD_STRING HEscape
20825: PUSH
20826: LD_LOC 1
20830: STR
20831: PPUSH
20832: CALL_OW 97
20836: PUSH
20837: LD_INT 1
20839: DOUBLE
20840: EQUAL
20841: IFTRUE 20845
20843: GO 20852
20845: POP
// LockerMinigameSearch ; 2 :
20846: CALL 20885 0 0
20850: GO 20868
20852: LD_INT 2
20854: DOUBLE
20855: EQUAL
20856: IFTRUE 20860
20858: GO 20867
20860: POP
// LockerMinigameSetCode ; end ;
20861: CALL 20959 0 0
20865: GO 20868
20867: POP
// if lockerCodeValid then
20868: LD_EXP 72
20872: IFFALSE 20876
// exit ;
20874: GO 20880
// StartLockerMinigame ;
20876: CALL 20797 0 0
// end ;
20880: LD_VAR 0 1
20884: RET
// function LockerMinigameSearch ; begin
20885: LD_INT 0
20887: PPUSH
// if code then
20888: LD_LOC 2
20892: IFFALSE 20908
// begin Say ( Heike , DH-Escape-3-Hint-0 ) ;
20894: LD_EXP 46
20898: PPUSH
20899: LD_STRING DH-Escape-3-Hint-0
20901: PPUSH
20902: CALL_OW 88
// exit ;
20906: GO 20954
// end ; Randomize ;
20908: CALL_OW 10
// code := rand ( 1 , 5 ) ;
20912: LD_ADDR_LOC 2
20916: PUSH
20917: LD_INT 1
20919: PPUSH
20920: LD_INT 5
20922: PPUSH
20923: CALL_OW 12
20927: ST_TO_ADDR
// step := 2 ;
20928: LD_ADDR_LOC 1
20932: PUSH
20933: LD_INT 2
20935: ST_TO_ADDR
// Say ( Heike , DH-Escape-3-Hint- & code ) ;
20936: LD_EXP 46
20940: PPUSH
20941: LD_STRING DH-Escape-3-Hint-
20943: PUSH
20944: LD_LOC 2
20948: STR
20949: PPUSH
20950: CALL_OW 88
// end ;
20954: LD_VAR 0 1
20958: RET
// function LockerMinigameSetCode ; begin
20959: LD_INT 0
20961: PPUSH
// if not code then
20962: LD_LOC 2
20966: NOT
20967: IFFALSE 20977
// code := 0 ;
20969: LD_ADDR_LOC 2
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// lockerBusy := true ;
20977: LD_ADDR_EXP 73
20981: PUSH
20982: LD_INT 1
20984: ST_TO_ADDR
// InGameOff ;
20985: CALL_OW 9
// ToLua ( initLockerMinigame(" & code & ") ) ;
20989: LD_STRING initLockerMinigame("
20991: PUSH
20992: LD_LOC 2
20996: STR
20997: PUSH
20998: LD_STRING ")
21000: STR
21001: PPUSH
21002: CALL_OW 559
// step := 3 ;
21006: LD_ADDR_LOC 1
21010: PUSH
21011: LD_INT 3
21013: ST_TO_ADDR
// repeat wait ( 1 ) ;
21014: LD_INT 1
21016: PPUSH
21017: CALL_OW 67
// until not lockerBusy ;
21021: LD_EXP 73
21025: NOT
21026: IFFALSE 21014
// InGameOn ;
21028: CALL_OW 8
// if not lockerCodeValid then
21032: LD_EXP 72
21036: NOT
21037: IFFALSE 21063
// Say ( Heike , DH-Escape-3-Fail- & rand ( 1 , 2 ) ) ;
21039: LD_EXP 46
21043: PPUSH
21044: LD_STRING DH-Escape-3-Fail-
21046: PUSH
21047: LD_INT 1
21049: PPUSH
21050: LD_INT 2
21052: PPUSH
21053: CALL_OW 12
21057: STR
21058: PPUSH
21059: CALL_OW 88
// end ; end_of_file
21063: LD_VAR 0 1
21067: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 102 then
21068: LD_VAR 0 2
21072: PUSH
21073: LD_INT 102
21075: EQUAL
21076: IFFALSE 21098
// begin lockerBusy := false ;
21078: LD_ADDR_EXP 73
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
// lockerCodeValid := p3 ;
21086: LD_ADDR_EXP 72
21090: PUSH
21091: LD_VAR 0 3
21095: ST_TO_ADDR
// end else
21096: GO 21152
// if p2 = 103 then
21098: LD_VAR 0 2
21102: PUSH
21103: LD_INT 103
21105: EQUAL
21106: IFFALSE 21118
// begin weatherBusy := false ;
21108: LD_ADDR_EXP 37
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// end else
21116: GO 21152
// SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
21118: LD_VAR 0 1
21122: PPUSH
21123: LD_VAR 0 2
21127: PPUSH
21128: LD_VAR 0 3
21132: PPUSH
21133: LD_VAR 0 4
21137: PPUSH
21138: LD_VAR 0 5
21142: PPUSH
21143: LD_VAR 0 6
21147: PPUSH
21148: CALL 72251 0 6
// end ;
21152: PPOPN 6
21154: END
// on MapStart ( p ) do begin ToLua ( killGameMusic(); ) ;
21155: LD_STRING killGameMusic();
21157: PPUSH
21158: CALL_OW 559
// PlayOriginalMusic ;
21162: CALL 92970 0 0
// SOS_MapStart ( ) ;
21166: CALL 72138 0 0
// end ; end_of_file
21170: PPOPN 1
21172: END
// every 0 0$2 trigger not isAlarm and ruPatrol do var i , j , points , tag , tmp ;
21173: LD_EXP 17
21177: NOT
21178: PUSH
21179: LD_EXP 71
21183: AND
21184: IFFALSE 21764
21186: GO 21188
21188: DISABLE
21189: LD_INT 0
21191: PPUSH
21192: PPUSH
21193: PPUSH
21194: PPUSH
21195: PPUSH
// begin enable ;
21196: ENABLE
// points := [ [ g11 , g12 , g13 , g14 ] , [ g21 , g22 , g23 , g24 , g25 , g26 , g27 , g28 , g29 ] , [ g31 , g32 , g33 , g34 ] , [ g41 , g42 , g43 , g44 , g45 , g44 , g43 , g42 , g41 ] ] ;
21197: LD_ADDR_VAR 0 3
21201: PUSH
21202: LD_INT 26
21204: PUSH
21205: LD_INT 27
21207: PUSH
21208: LD_INT 28
21210: PUSH
21211: LD_INT 29
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 30
21222: PUSH
21223: LD_INT 31
21225: PUSH
21226: LD_INT 32
21228: PUSH
21229: LD_INT 33
21231: PUSH
21232: LD_INT 34
21234: PUSH
21235: LD_INT 35
21237: PUSH
21238: LD_INT 36
21240: PUSH
21241: LD_INT 37
21243: PUSH
21244: LD_INT 38
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 39
21260: PUSH
21261: LD_INT 40
21263: PUSH
21264: LD_INT 41
21266: PUSH
21267: LD_INT 42
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: LD_INT 43
21278: PUSH
21279: LD_INT 44
21281: PUSH
21282: LD_INT 45
21284: PUSH
21285: LD_INT 46
21287: PUSH
21288: LD_INT 47
21290: PUSH
21291: LD_INT 46
21293: PUSH
21294: LD_INT 45
21296: PUSH
21297: LD_INT 44
21299: PUSH
21300: LD_INT 43
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: ST_TO_ADDR
// for i in ruPatrol do
21320: LD_ADDR_VAR 0 1
21324: PUSH
21325: LD_EXP 71
21329: PUSH
21330: FOR_IN
21331: IFFALSE 21762
// begin if not IsOk ( i ) then
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 302
21342: NOT
21343: IFFALSE 21347
// continue ;
21345: GO 21330
// if Count ( ruKilledHex ) then
21347: LD_EXP 43
21351: PPUSH
21352: CALL 31410 0 1
21356: IFFALSE 21429
// for j in ruKilledHex do
21358: LD_ADDR_VAR 0 2
21362: PUSH
21363: LD_EXP 43
21367: PUSH
21368: FOR_IN
21369: IFFALSE 21427
// if GetDistUnitXY ( i , j [ 1 ] , j [ 2 ] ) < 6 then
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_VAR 0 2
21380: PUSH
21381: LD_INT 1
21383: ARRAY
21384: PPUSH
21385: LD_VAR 0 2
21389: PUSH
21390: LD_INT 2
21392: ARRAY
21393: PPUSH
21394: CALL_OW 297
21398: PUSH
21399: LD_INT 6
21401: LESS
21402: IFFALSE 21425
// begin Query ( QBody ) ;
21404: LD_STRING QBody
21406: PPUSH
21407: CALL_OW 97
// isAlarm := true ;
21411: LD_ADDR_EXP 17
21415: PUSH
21416: LD_INT 1
21418: ST_TO_ADDR
// exit ;
21419: POP
21420: POP
21421: POP
21422: POP
21423: GO 21764
// end ;
21425: GO 21368
21427: POP
21428: POP
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , i , 7 ] ] ) ;
21429: LD_ADDR_VAR 0 5
21433: PUSH
21434: LD_INT 22
21436: PUSH
21437: LD_INT 2
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 91
21456: PUSH
21457: LD_VAR 0 1
21461: PUSH
21462: LD_INT 7
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: LIST
21474: PPUSH
21475: CALL_OW 69
21479: ST_TO_ADDR
// if See ( 2 , i ) and tmp then
21480: LD_INT 2
21482: PPUSH
21483: LD_VAR 0 1
21487: PPUSH
21488: CALL_OW 292
21492: PUSH
21493: LD_VAR 0 5
21497: AND
21498: IFFALSE 21648
// begin if ( hasMuchin and GetDistUnits ( i , ruDisturb ) < 16 ) or blockPatrolThread then
21500: LD_EXP 30
21504: PUSH
21505: LD_VAR 0 1
21509: PPUSH
21510: LD_EXP 66
21514: PPUSH
21515: CALL_OW 296
21519: PUSH
21520: LD_INT 16
21522: LESS
21523: AND
21524: PUSH
21525: LD_EXP 38
21529: OR
21530: IFFALSE 21534
// continue ;
21532: GO 21330
// for j in tmp do
21534: LD_ADDR_VAR 0 2
21538: PUSH
21539: LD_VAR 0 5
21543: PUSH
21544: FOR_IN
21545: IFFALSE 21606
// tmp := tmp union FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_dist , j , 4 ] ] ) ;
21547: LD_ADDR_VAR 0 5
21551: PUSH
21552: LD_VAR 0 5
21556: PUSH
21557: LD_INT 22
21559: PUSH
21560: LD_INT 2
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PUSH
21567: LD_INT 21
21569: PUSH
21570: LD_INT 1
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 91
21579: PUSH
21580: LD_VAR 0 2
21584: PUSH
21585: LD_INT 4
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: PPUSH
21598: CALL_OW 69
21602: UNION
21603: ST_TO_ADDR
21604: GO 21544
21606: POP
21607: POP
// ComTurnUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
21608: LD_VAR 0 1
21612: PPUSH
21613: LD_VAR 0 5
21617: PPUSH
21618: LD_VAR 0 1
21622: PPUSH
21623: CALL_OW 74
21627: PPUSH
21628: CALL_OW 119
// CaughtByPatrol ( i , tmp ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: LD_VAR 0 5
21641: PPUSH
21642: CALL 21767 0 2
// continue ;
21646: GO 21330
// end ; if HasTask ( i ) then
21648: LD_VAR 0 1
21652: PPUSH
21653: CALL_OW 314
21657: IFFALSE 21661
// continue ;
21659: GO 21330
// tag := GetTag ( i ) ;
21661: LD_ADDR_VAR 0 4
21665: PUSH
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 110
21675: ST_TO_ADDR
// if not tag then
21676: LD_VAR 0 4
21680: NOT
21681: IFFALSE 21694
// begin ComHold ( i ) ;
21683: LD_VAR 0 1
21687: PPUSH
21688: CALL_OW 140
// continue ;
21692: GO 21330
// end ; for j := 1 to points [ tag ] do
21694: LD_ADDR_VAR 0 2
21698: PUSH
21699: DOUBLE
21700: LD_INT 1
21702: DEC
21703: ST_TO_ADDR
21704: LD_VAR 0 3
21708: PUSH
21709: LD_VAR 0 4
21713: ARRAY
21714: PUSH
21715: FOR_TO
21716: IFFALSE 21758
// begin AddComMoveToArea ( i , points [ tag ] [ j ] ) ;
21718: LD_VAR 0 1
21722: PPUSH
21723: LD_VAR 0 3
21727: PUSH
21728: LD_VAR 0 4
21732: ARRAY
21733: PUSH
21734: LD_VAR 0 2
21738: ARRAY
21739: PPUSH
21740: CALL_OW 173
// AddComWait ( i , 0 0$2 ) ;
21744: LD_VAR 0 1
21748: PPUSH
21749: LD_INT 70
21751: PPUSH
21752: CALL_OW 202
// end ;
21756: GO 21715
21758: POP
21759: POP
// end ;
21760: GO 21330
21762: POP
21763: POP
// end ;
21764: PPOPN 5
21766: END
// function CaughtByPatrol ( guard , units ) ; var i , alone ; begin
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
21771: PPUSH
// if UnitFilter ( units , [ [ f_nation , nation_arabian ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_revolver ] , [ f_class , class_hunter ] ] ] ) then
21772: LD_VAR 0 2
21776: PPUSH
21777: LD_INT 23
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 25
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 25
21802: PUSH
21803: LD_INT 11
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 25
21812: PUSH
21813: LD_INT 34
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 25
21822: PUSH
21823: LD_INT 32
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PPUSH
21841: CALL_OW 72
21845: IFFALSE 21958
// begin blockPatrolThread := true ;
21847: LD_ADDR_EXP 38
21851: PUSH
21852: LD_INT 1
21854: ST_TO_ADDR
// DialogueOn ;
21855: CALL_OW 6
// case GetSex ( guard ) of sex_male :
21859: LD_VAR 0 1
21863: PPUSH
21864: CALL_OW 258
21868: PUSH
21869: LD_INT 1
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21877
21875: GO 21892
21877: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
21878: LD_VAR 0 1
21882: PPUSH
21883: LD_STRING DRum-Fail-3
21885: PPUSH
21886: CALL_OW 88
21890: GO 21916
21892: LD_INT 2
21894: DOUBLE
21895: EQUAL
21896: IFTRUE 21900
21898: GO 21915
21900: POP
// Say ( guard , DRuf-Fail-3 ) ; end ;
21901: LD_VAR 0 1
21905: PPUSH
21906: LD_STRING DRuf-Fail-3
21908: PPUSH
21909: CALL_OW 88
21913: GO 21916
21915: POP
// DialogueOff ;
21916: CALL_OW 7
// wait ( 0 0$5 ) ;
21920: LD_INT 175
21922: PPUSH
21923: CALL_OW 67
// if IsOk ( guard ) then
21927: LD_VAR 0 1
21931: PPUSH
21932: CALL_OW 302
21936: IFFALSE 21948
// isAlarm := true else
21938: LD_ADDR_EXP 17
21942: PUSH
21943: LD_INT 1
21945: ST_TO_ADDR
21946: GO 21956
// blockPatrolThread := false ;
21948: LD_ADDR_EXP 38
21952: PUSH
21953: LD_INT 0
21955: ST_TO_ADDR
// exit ;
21956: GO 22959
// end ; if UnitFilter ( units , [ f_nation , nation_russian ] ) or UnitFilter ( units , [ f_inarea , prisonArea ] ) then
21958: LD_VAR 0 2
21962: PPUSH
21963: LD_INT 23
21965: PUSH
21966: LD_INT 3
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PPUSH
21973: CALL_OW 72
21977: PUSH
21978: LD_VAR 0 2
21982: PPUSH
21983: LD_INT 95
21985: PUSH
21986: LD_INT 61
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PPUSH
21993: CALL_OW 72
21997: OR
21998: IFFALSE 22002
// exit ;
22000: GO 22959
// DialogueOn ;
22002: CALL_OW 6
// blockPatrolThread := true ;
22006: LD_ADDR_EXP 38
22010: PUSH
22011: LD_INT 1
22013: ST_TO_ADDR
// CenterNowOnUnits ( guard ) ;
22014: LD_VAR 0 1
22018: PPUSH
22019: CALL_OW 87
// if not Heike in units then
22023: LD_EXP 46
22027: PUSH
22028: LD_VAR 0 2
22032: IN
22033: NOT
22034: IFFALSE 22400
// begin case GetSex ( guard ) of sex_male :
22036: LD_VAR 0 1
22040: PPUSH
22041: CALL_OW 258
22045: PUSH
22046: LD_INT 1
22048: DOUBLE
22049: EQUAL
22050: IFTRUE 22054
22052: GO 22069
22054: POP
// Say ( guard , DRum-Guard-1 ) ; sex_female :
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_STRING DRum-Guard-1
22062: PPUSH
22063: CALL_OW 88
22067: GO 22093
22069: LD_INT 2
22071: DOUBLE
22072: EQUAL
22073: IFTRUE 22077
22075: GO 22092
22077: POP
// Say ( guard , DRuf-Guard-1 ) ; end ;
22078: LD_VAR 0 1
22082: PPUSH
22083: LD_STRING DRuf-Guard-1
22085: PPUSH
22086: CALL_OW 88
22090: GO 22093
22092: POP
// case Query ( SurrenderInfoPeople ) of 1 :
22093: LD_STRING SurrenderInfoPeople
22095: PPUSH
22096: CALL_OW 97
22100: PUSH
22101: LD_INT 1
22103: DOUBLE
22104: EQUAL
22105: IFTRUE 22109
22107: GO 22218
22109: POP
// begin Query ( CaughtSquadInfo ) ;
22110: LD_STRING CaughtSquadInfo
22112: PPUSH
22113: CALL_OW 97
// for i in units do
22117: LD_ADDR_VAR 0 4
22121: PUSH
22122: LD_VAR 0 2
22126: PUSH
22127: FOR_IN
22128: IFFALSE 22185
// begin if Carry ( i ) then
22130: LD_VAR 0 4
22134: PPUSH
22135: CALL_OW 281
22139: IFFALSE 22156
// SetCargo ( i , mat_cans , 0 ) ;
22141: LD_VAR 0 4
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: LD_INT 0
22151: PPUSH
22152: CALL_OW 290
// SetSide ( i , 5 ) ;
22156: LD_VAR 0 4
22160: PPUSH
22161: LD_INT 5
22163: PPUSH
22164: CALL_OW 235
// ComMoveXY ( i , 113 , 17 ) ;
22168: LD_VAR 0 4
22172: PPUSH
22173: LD_INT 113
22175: PPUSH
22176: LD_INT 17
22178: PPUSH
22179: CALL_OW 111
// end ;
22183: GO 22127
22185: POP
22186: POP
// ComMoveXY ( guard , 117 , 25 ) ;
22187: LD_VAR 0 1
22191: PPUSH
22192: LD_INT 117
22194: PPUSH
22195: LD_INT 25
22197: PPUSH
22198: CALL_OW 111
// DialogueOff ;
22202: CALL_OW 7
// blockPatrolThread := false ;
22206: LD_ADDR_EXP 38
22210: PUSH
22211: LD_INT 0
22213: ST_TO_ADDR
// exit ;
22214: GO 22959
// end ; 2 :
22216: GO 22400
22218: LD_INT 2
22220: DOUBLE
22221: EQUAL
22222: IFTRUE 22226
22224: GO 22399
22226: POP
// begin DialogueOff ;
22227: CALL_OW 7
// wait ( 0 0$2 ) ;
22231: LD_INT 70
22233: PPUSH
22234: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22238: LD_INT 6
22240: PPUSH
22241: LD_INT 2
22243: PPUSH
22244: LD_INT 2
22246: PPUSH
22247: LD_INT 1
22249: PPUSH
22250: CALL_OW 80
// ComAttackUnit ( guard , units [ 1 ] ) ;
22254: LD_VAR 0 1
22258: PPUSH
22259: LD_VAR 0 2
22263: PUSH
22264: LD_INT 1
22266: ARRAY
22267: PPUSH
22268: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22272: LD_VAR 0 1
22276: PPUSH
22277: CALL_OW 258
22281: PUSH
22282: LD_INT 1
22284: DOUBLE
22285: EQUAL
22286: IFTRUE 22290
22288: GO 22305
22290: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22291: LD_VAR 0 1
22295: PPUSH
22296: LD_STRING DRum-Fail-3
22298: PPUSH
22299: CALL_OW 88
22303: GO 22329
22305: LD_INT 2
22307: DOUBLE
22308: EQUAL
22309: IFTRUE 22313
22311: GO 22328
22313: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_STRING DRum-Fail-3
22321: PPUSH
22322: CALL_OW 88
22326: GO 22329
22328: POP
// wait ( 0 0$5 ) ;
22329: LD_INT 175
22331: PPUSH
22332: CALL_OW 67
// if IsOk ( guard ) then
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL_OW 302
22345: IFFALSE 22357
// isAlarm := true else
22347: LD_ADDR_EXP 17
22351: PUSH
22352: LD_INT 1
22354: ST_TO_ADDR
22355: GO 22389
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22357: LD_INT 6
22359: PPUSH
22360: LD_INT 2
22362: PPUSH
22363: LD_INT 0
22365: PPUSH
22366: LD_INT 1
22368: PPUSH
22369: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22373: LD_INT 3
22375: PPUSH
22376: LD_INT 2
22378: PPUSH
22379: LD_INT 0
22381: PPUSH
22382: LD_INT 1
22384: PPUSH
22385: CALL_OW 80
// end ; blockPatrolThread := false ;
22389: LD_ADDR_EXP 38
22393: PUSH
22394: LD_INT 0
22396: ST_TO_ADDR
// end ; end ;
22397: GO 22400
22399: POP
// end ; if Carry ( Heike ) then
22400: LD_EXP 46
22404: PPUSH
22405: CALL_OW 281
22409: IFFALSE 22485
// begin case GetSex ( guard ) of sex_male :
22411: LD_VAR 0 1
22415: PPUSH
22416: CALL_OW 258
22420: PUSH
22421: LD_INT 1
22423: DOUBLE
22424: EQUAL
22425: IFTRUE 22429
22427: GO 22444
22429: POP
// Say ( guard , DRum-FoodFail-1 ) ; sex_female :
22430: LD_VAR 0 1
22434: PPUSH
22435: LD_STRING DRum-FoodFail-1
22437: PPUSH
22438: CALL_OW 88
22442: GO 22468
22444: LD_INT 2
22446: DOUBLE
22447: EQUAL
22448: IFTRUE 22452
22450: GO 22467
22452: POP
// Say ( guard , DRuf-FoodFail-2 ) ; end ;
22453: LD_VAR 0 1
22457: PPUSH
22458: LD_STRING DRuf-FoodFail-2
22460: PPUSH
22461: CALL_OW 88
22465: GO 22468
22467: POP
// SetCargo ( Heike , mat_cans , 0 ) ;
22468: LD_EXP 46
22472: PPUSH
22473: LD_INT 1
22475: PPUSH
22476: LD_INT 0
22478: PPUSH
22479: CALL_OW 290
// end else
22483: GO 22542
// begin case GetSex ( guard ) of sex_male :
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 258
22494: PUSH
22495: LD_INT 1
22497: DOUBLE
22498: EQUAL
22499: IFTRUE 22503
22501: GO 22518
22503: POP
// Say ( guard , DRum-Seen-1 ) ; sex_female :
22504: LD_VAR 0 1
22508: PPUSH
22509: LD_STRING DRum-Seen-1
22511: PPUSH
22512: CALL_OW 88
22516: GO 22542
22518: LD_INT 2
22520: DOUBLE
22521: EQUAL
22522: IFTRUE 22526
22524: GO 22541
22526: POP
// Say ( guard , DRuf-Seen-1 ) ; end ;
22527: LD_VAR 0 1
22531: PPUSH
22532: LD_STRING DRuf-Seen-1
22534: PPUSH
22535: CALL_OW 88
22539: GO 22542
22541: POP
// end ; alone := ( units = 1 ) ;
22542: LD_ADDR_VAR 0 5
22546: PUSH
22547: LD_VAR 0 2
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: ST_TO_ADDR
// case Query ( SurrenderInfo ) of 1 :
22556: LD_STRING SurrenderInfo
22558: PPUSH
22559: CALL_OW 97
22563: PUSH
22564: LD_INT 1
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22761
22572: POP
// begin CenterNowOnUnits ( ruOutpost2 ) ;
22573: LD_INT 23
22575: PPUSH
22576: CALL_OW 87
// RemoveUnit ( Heike ) ;
22580: LD_EXP 46
22584: PPUSH
22585: CALL_OW 64
// PlaceHumanInUnit ( Heike , ruOutpost2 ) ;
22589: LD_EXP 46
22593: PPUSH
22594: LD_INT 23
22596: PPUSH
22597: CALL_OW 52
// if not alone then
22601: LD_VAR 0 5
22605: NOT
22606: IFFALSE 22673
// for i in units diff Heike do
22608: LD_ADDR_VAR 0 4
22612: PUSH
22613: LD_VAR 0 2
22617: PUSH
22618: LD_EXP 46
22622: DIFF
22623: PUSH
22624: FOR_IN
22625: IFFALSE 22671
// begin RemoveUnit ( i ) ;
22627: LD_VAR 0 4
22631: PPUSH
22632: CALL_OW 64
// PlaceUnitXYR ( i , 114 , 17 , 10 , false ) ;
22636: LD_VAR 0 4
22640: PPUSH
22641: LD_INT 114
22643: PPUSH
22644: LD_INT 17
22646: PPUSH
22647: LD_INT 10
22649: PPUSH
22650: LD_INT 0
22652: PPUSH
22653: CALL_OW 50
// SetSide ( i , 5 ) ;
22657: LD_VAR 0 4
22661: PPUSH
22662: LD_INT 5
22664: PPUSH
22665: CALL_OW 235
// end ;
22669: GO 22624
22671: POP
22672: POP
// wait ( 0 0$0.3 ) ;
22673: LD_INT 10
22675: PPUSH
22676: CALL_OW 67
// if alone then
22680: LD_VAR 0 5
22684: IFFALSE 22695
// Query ( CaughtInfoAlone ) else
22686: LD_STRING CaughtInfoAlone
22688: PPUSH
22689: CALL_OW 97
22693: GO 22702
// Query ( CaughtInfo ) ;
22695: LD_STRING CaughtInfo
22697: PPUSH
22698: CALL_OW 97
// wait ( 0 0$2 ) ;
22702: LD_INT 70
22704: PPUSH
22705: CALL_OW 67
// StartLockerMinigame ;
22709: CALL 20797 0 0
// Say ( Heike , DH-Reset ) ;
22713: LD_EXP 46
22717: PPUSH
22718: LD_STRING DH-Reset
22720: PPUSH
22721: CALL_OW 88
// DialogueOff ;
22725: CALL_OW 7
// InGameOff ;
22729: CALL_OW 9
// blockPatrolThread := false ;
22733: LD_ADDR_EXP 38
22737: PUSH
22738: LD_INT 0
22740: ST_TO_ADDR
// ComExitBuilding ( Heike ) ;
22741: LD_EXP 46
22745: PPUSH
22746: CALL_OW 122
// ComFree ( guard ) ;
22750: LD_VAR 0 1
22754: PPUSH
22755: CALL_OW 139
// end ; 2 :
22759: GO 22951
22761: LD_INT 2
22763: DOUBLE
22764: EQUAL
22765: IFTRUE 22769
22767: GO 22950
22769: POP
// begin Say ( Heike , DH-Guard-2 ) ;
22770: LD_EXP 46
22774: PPUSH
22775: LD_STRING DH-Guard-2
22777: PPUSH
22778: CALL_OW 88
// DialogueOff ;
22782: CALL_OW 7
// wait ( 0 0$2 ) ;
22786: LD_INT 70
22788: PPUSH
22789: CALL_OW 67
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
22793: LD_INT 6
22795: PPUSH
22796: LD_INT 2
22798: PPUSH
22799: LD_INT 2
22801: PPUSH
22802: LD_INT 1
22804: PPUSH
22805: CALL_OW 80
// ComAttackUnit ( guard , Heike ) ;
22809: LD_VAR 0 1
22813: PPUSH
22814: LD_EXP 46
22818: PPUSH
22819: CALL_OW 115
// case GetSex ( guard ) of sex_male :
22823: LD_VAR 0 1
22827: PPUSH
22828: CALL_OW 258
22832: PUSH
22833: LD_INT 1
22835: DOUBLE
22836: EQUAL
22837: IFTRUE 22841
22839: GO 22856
22841: POP
// Say ( guard , DRum-Fail-3 ) ; sex_female :
22842: LD_VAR 0 1
22846: PPUSH
22847: LD_STRING DRum-Fail-3
22849: PPUSH
22850: CALL_OW 88
22854: GO 22880
22856: LD_INT 2
22858: DOUBLE
22859: EQUAL
22860: IFTRUE 22864
22862: GO 22879
22864: POP
// Say ( guard , DRum-Fail-3 ) ; end ;
22865: LD_VAR 0 1
22869: PPUSH
22870: LD_STRING DRum-Fail-3
22872: PPUSH
22873: CALL_OW 88
22877: GO 22880
22879: POP
// wait ( 0 0$5 ) ;
22880: LD_INT 175
22882: PPUSH
22883: CALL_OW 67
// if IsOk ( guard ) then
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 302
22896: IFFALSE 22908
// isAlarm := true else
22898: LD_ADDR_EXP 17
22902: PUSH
22903: LD_INT 1
22905: ST_TO_ADDR
22906: GO 22940
// begin SetAttitude ( 6 , 2 , att_neutral , true ) ;
22908: LD_INT 6
22910: PPUSH
22911: LD_INT 2
22913: PPUSH
22914: LD_INT 0
22916: PPUSH
22917: LD_INT 1
22919: PPUSH
22920: CALL_OW 80
// SetAttitude ( 3 , 2 , att_neutral , true ) ;
22924: LD_INT 3
22926: PPUSH
22927: LD_INT 2
22929: PPUSH
22930: LD_INT 0
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 80
// end ; blockPatrolThread := false ;
22940: LD_ADDR_EXP 38
22944: PUSH
22945: LD_INT 0
22947: ST_TO_ADDR
// end ; end ;
22948: GO 22951
22950: POP
// blockPatrolThread := false ;
22951: LD_ADDR_EXP 38
22955: PUSH
22956: LD_INT 0
22958: ST_TO_ADDR
// end ;
22959: LD_VAR 0 3
22963: RET
// every 0 0$3 trigger UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_not , [ f_see , 6 ] ] , [ f_distxy , 113 , 16 , 12 ] , [ f_dist , Heike , 6 ] ] ) and not hasMuchin marked gameStartEvent do var i ;
22964: LD_EXP 14
22968: PPUSH
22969: LD_INT 22
22971: PUSH
22972: LD_INT 5
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: LD_INT 101
22984: PUSH
22985: LD_INT 6
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 92
22998: PUSH
22999: LD_INT 113
23001: PUSH
23002: LD_INT 16
23004: PUSH
23005: LD_INT 12
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 91
23016: PUSH
23017: LD_EXP 46
23021: PUSH
23022: LD_INT 6
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: LIST
23029: PUSH
23030: EMPTY
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: PPUSH
23036: CALL_OW 72
23040: PUSH
23041: LD_EXP 30
23045: NOT
23046: AND
23047: IFFALSE 23152
23049: GO 23051
23051: DISABLE
23052: LD_INT 0
23054: PPUSH
// begin enable ;
23055: ENABLE
// DialogueOn ;
23056: CALL_OW 6
// Say ( Heike , DH-Join- & rand ( 1 , 3 ) ) ;
23060: LD_EXP 46
23064: PPUSH
23065: LD_STRING DH-Join-
23067: PUSH
23068: LD_INT 1
23070: PPUSH
23071: LD_INT 3
23073: PPUSH
23074: CALL_OW 12
23078: STR
23079: PPUSH
23080: CALL_OW 88
// for i in UnitFilter ( heikeSquad , [ [ f_side , 5 ] , [ f_dist , Heike , 10 ] ] ) do
23084: LD_ADDR_VAR 0 1
23088: PUSH
23089: LD_EXP 14
23093: PPUSH
23094: LD_INT 22
23096: PUSH
23097: LD_INT 5
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 91
23106: PUSH
23107: LD_EXP 46
23111: PUSH
23112: LD_INT 10
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: LIST
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PPUSH
23124: CALL_OW 72
23128: PUSH
23129: FOR_IN
23130: IFFALSE 23146
// SetSide ( i , 2 ) ;
23132: LD_VAR 0 1
23136: PPUSH
23137: LD_INT 2
23139: PPUSH
23140: CALL_OW 235
23144: GO 23129
23146: POP
23147: POP
// DialogueOff ;
23148: CALL_OW 7
// end ; end_of_file
23152: PPOPN 1
23154: END
// every 0 0$2 trigger isAlarm and hasNormalScene do var i , points , tmp ;
23155: LD_EXP 17
23159: PUSH
23160: LD_EXP 5
23164: AND
23165: IFFALSE 23466
23167: GO 23169
23169: DISABLE
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
23174: PPUSH
// begin PlaySoundXY ( - 1 , - 1 , alarm ) ;
23175: LD_INT 1
23177: NEG
23178: PPUSH
23179: LD_INT 1
23181: NEG
23182: PPUSH
23183: LD_STRING alarm
23185: PPUSH
23186: CALL_OW 366
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
23190: LD_INT 3
23192: PPUSH
23193: LD_INT 2
23195: PPUSH
23196: LD_INT 2
23198: PPUSH
23199: LD_INT 1
23201: PPUSH
23202: CALL_OW 80
// SetAttitude ( 6 , 2 , att_enemy , true ) ;
23206: LD_INT 6
23208: PPUSH
23209: LD_INT 2
23211: PPUSH
23212: LD_INT 2
23214: PPUSH
23215: LD_INT 1
23217: PPUSH
23218: CALL_OW 80
// DialogueOn ;
23222: CALL_OW 6
// Say ( Heike , DH-Alarm-1 ) ;
23226: LD_EXP 46
23230: PPUSH
23231: LD_STRING DH-Alarm-1
23233: PPUSH
23234: CALL_OW 88
// DialogueOff ;
23238: CALL_OW 7
// points := [ [ 107 , 39 ] , [ 143 , 33 ] , [ 180 , 115 ] , [ 96 , 90 ] , [ 59 , 52 ] , [ 16 , 15 ] , [ 90 , 120 ] ] ;
23242: LD_ADDR_VAR 0 2
23246: PUSH
23247: LD_INT 107
23249: PUSH
23250: LD_INT 39
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 143
23259: PUSH
23260: LD_INT 33
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 180
23269: PUSH
23270: LD_INT 115
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: LD_INT 96
23279: PUSH
23280: LD_INT 90
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PUSH
23287: LD_INT 59
23289: PUSH
23290: LD_INT 52
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 16
23299: PUSH
23300: LD_INT 15
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 90
23309: PUSH
23310: LD_INT 120
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: LIST
23324: LIST
23325: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_soldier ] ] ) ;
23326: LD_ADDR_VAR 0 3
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_INT 6
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: LD_INT 25
23343: PUSH
23344: LD_INT 1
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PPUSH
23355: CALL_OW 69
23359: ST_TO_ADDR
// for i in tmp do
23360: LD_ADDR_VAR 0 1
23364: PUSH
23365: LD_VAR 0 3
23369: PUSH
23370: FOR_IN
23371: IFFALSE 23439
// begin ComExit ( i ) ;
23373: LD_VAR 0 1
23377: PPUSH
23378: CALL 67397 0 1
// AddComAgressiveMove ( i , points [ i mod 7 + 1 ] [ 1 ] , points [ i mod 7 + 1 ] [ 2 ] ) ;
23382: LD_VAR 0 1
23386: PPUSH
23387: LD_VAR 0 2
23391: PUSH
23392: LD_VAR 0 1
23396: PUSH
23397: LD_INT 7
23399: MOD
23400: PUSH
23401: LD_INT 1
23403: PLUS
23404: ARRAY
23405: PUSH
23406: LD_INT 1
23408: ARRAY
23409: PPUSH
23410: LD_VAR 0 2
23414: PUSH
23415: LD_VAR 0 1
23419: PUSH
23420: LD_INT 7
23422: MOD
23423: PUSH
23424: LD_INT 1
23426: PLUS
23427: ARRAY
23428: PUSH
23429: LD_INT 2
23431: ARRAY
23432: PPUSH
23433: CALL_OW 174
// end ;
23437: GO 23370
23439: POP
23440: POP
// Explode ;
23441: CALL 23469 0 0
// wait ( 0 0$45 ) ;
23445: LD_INT 1575
23447: PPUSH
23448: CALL_OW 67
// AddComAttackUnit ( tmp , Heike ) ;
23452: LD_VAR 0 3
23456: PPUSH
23457: LD_EXP 46
23461: PPUSH
23462: CALL_OW 175
// end ;
23466: PPOPN 3
23468: END
// export function Explode ; var i , x , y , j ; begin
23469: LD_INT 0
23471: PPUSH
23472: PPUSH
23473: PPUSH
23474: PPUSH
23475: PPUSH
// if hasExplosionsInFactory then
23476: LD_EXP 7
23480: IFFALSE 23500
// explosivePlantedList := Join ( explosivePlantedList , ruFac ) ;
23482: LD_ADDR_EXP 29
23486: PUSH
23487: LD_EXP 29
23491: PPUSH
23492: LD_INT 61
23494: PPUSH
23495: CALL 66999 0 2
23499: ST_TO_ADDR
// if explosivePlantedList then
23500: LD_EXP 29
23504: IFFALSE 23652
// begin for i in explosivePlantedList do
23506: LD_ADDR_VAR 0 2
23510: PUSH
23511: LD_EXP 29
23515: PUSH
23516: FOR_IN
23517: IFFALSE 23620
// begin x := GetX ( i ) ;
23519: LD_ADDR_VAR 0 3
23523: PUSH
23524: LD_VAR 0 2
23528: PPUSH
23529: CALL_OW 250
23533: ST_TO_ADDR
// y := GetY ( i ) ;
23534: LD_ADDR_VAR 0 4
23538: PUSH
23539: LD_VAR 0 2
23543: PPUSH
23544: CALL_OW 251
23548: ST_TO_ADDR
// for j in [ 1 , 3 , 5 ] do
23549: LD_ADDR_VAR 0 5
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: LD_INT 3
23559: PUSH
23560: LD_INT 5
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: LIST
23567: PUSH
23568: FOR_IN
23569: IFFALSE 23616
// MineExplosion ( ShiftX ( x , j , 2 ) , ShiftY ( y , j , 2 ) , true ) ;
23571: LD_VAR 0 3
23575: PPUSH
23576: LD_VAR 0 5
23580: PPUSH
23581: LD_INT 2
23583: PPUSH
23584: CALL_OW 272
23588: PPUSH
23589: LD_VAR 0 4
23593: PPUSH
23594: LD_VAR 0 5
23598: PPUSH
23599: LD_INT 2
23601: PPUSH
23602: CALL_OW 273
23606: PPUSH
23607: LD_INT 1
23609: PPUSH
23610: CALL_OW 453
23614: GO 23568
23616: POP
23617: POP
// end ;
23618: GO 23516
23620: POP
23621: POP
// Say ( Heike , DH-End-2 ) ;
23622: LD_EXP 46
23626: PPUSH
23627: LD_STRING DH-End-2
23629: PPUSH
23630: CALL_OW 88
// wait ( 0 0$5 * Count ( explosivePlantedList ) ) ;
23634: LD_INT 175
23636: PUSH
23637: LD_EXP 29
23641: PPUSH
23642: CALL 31410 0 1
23646: MUL
23647: PPUSH
23648: CALL_OW 67
// end ; if not isAlarm then
23652: LD_EXP 17
23656: NOT
23657: IFFALSE 23667
// isAlarm := true ;
23659: LD_ADDR_EXP 17
23663: PUSH
23664: LD_INT 1
23666: ST_TO_ADDR
// end ;
23667: LD_VAR 0 1
23671: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_see , 3 ] , [ f_see , 6 ] ] ] ) do
23672: LD_INT 22
23674: PUSH
23675: LD_INT 2
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 21
23684: PUSH
23685: LD_INT 2
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: LD_INT 101
23697: PUSH
23698: LD_INT 3
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 101
23707: PUSH
23708: LD_INT 6
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: PPUSH
23725: CALL_OW 69
23729: IFFALSE 23742
23731: GO 23733
23733: DISABLE
// isAlarm := true ; end_of_file
23734: LD_ADDR_EXP 17
23738: PUSH
23739: LD_INT 1
23741: ST_TO_ADDR
23742: END
// every 0 0$10 trigger UnitFilter ( heikeSquad , [ f_side , 2 ] ) > 3 and not isAlarm marked gameStartEvent do var i , veh , tmp , cr ;
23743: LD_EXP 14
23747: PPUSH
23748: LD_INT 22
23750: PUSH
23751: LD_INT 2
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 72
23762: PUSH
23763: LD_INT 3
23765: GREATER
23766: PUSH
23767: LD_EXP 17
23771: NOT
23772: AND
23773: IFFALSE 27818
23775: GO 23777
23777: DISABLE
23778: LD_INT 0
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
// begin PlaceUnitXY ( ruDisturb , 155 , 68 , false ) ;
23784: LD_EXP 66
23788: PPUSH
23789: LD_INT 155
23791: PPUSH
23792: LD_INT 68
23794: PPUSH
23795: LD_INT 0
23797: PPUSH
23798: CALL_OW 48
// wait ( 0 0$1 ) ;
23802: LD_INT 35
23804: PPUSH
23805: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
23809: LD_INT 35
23811: PPUSH
23812: CALL_OW 67
// if not HasTask ( ruDisturb ) then
23816: LD_EXP 66
23820: PPUSH
23821: CALL_OW 314
23825: NOT
23826: IFFALSE 23842
// ComMoveUnit ( ruDisturb , Heike ) ;
23828: LD_EXP 66
23832: PPUSH
23833: LD_EXP 46
23837: PPUSH
23838: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
23842: LD_EXP 46
23846: PPUSH
23847: LD_EXP 66
23851: PPUSH
23852: CALL_OW 296
23856: PUSH
23857: LD_INT 6
23859: LESS
23860: PUSH
23861: LD_EXP 66
23865: PPUSH
23866: CALL_OW 302
23870: AND
23871: IFFALSE 23809
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
23873: LD_EXP 46
23877: PPUSH
23878: CALL_OW 257
23882: PUSH
23883: LD_INT 33
23885: NONEQUAL
23886: PUSH
23887: LD_EXP 14
23891: PPUSH
23892: LD_INT 22
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 91
23904: PUSH
23905: LD_EXP 66
23909: PUSH
23910: LD_INT 8
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 25
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 25
23933: PUSH
23934: LD_INT 11
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 25
23943: PUSH
23944: LD_INT 32
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 25
23953: PUSH
23954: LD_INT 34
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: LIST
23972: PPUSH
23973: CALL_OW 72
23977: OR
23978: IFFALSE 23988
// isAlarm := true ;
23980: LD_ADDR_EXP 17
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
// if isAlarm then
23988: LD_EXP 17
23992: IFFALSE 23996
// exit ;
23994: GO 27818
// DialogueOn ;
23996: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24000: LD_EXP 66
24004: PPUSH
24005: LD_STRING DMcn-Interrupt-1
24007: PPUSH
24008: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24012: LD_EXP 66
24016: PPUSH
24017: LD_STRING DMcn-Interrupt-2
24019: PPUSH
24020: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-3 ) ;
24024: LD_EXP 66
24028: PPUSH
24029: LD_STRING DMcn-Interrupt-3
24031: PPUSH
24032: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-4 ) ;
24036: LD_EXP 46
24040: PPUSH
24041: LD_STRING DH-Interrupt-a-4
24043: PPUSH
24044: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-5 ) ;
24048: LD_EXP 66
24052: PPUSH
24053: LD_STRING DMcn-Interrupt-a-5
24055: PPUSH
24056: CALL_OW 88
// Say ( Heike , DH-Interrupt-a-6 ) ;
24060: LD_EXP 46
24064: PPUSH
24065: LD_STRING DH-Interrupt-a-6
24067: PPUSH
24068: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-a-7 ) ;
24072: LD_EXP 66
24076: PPUSH
24077: LD_STRING DMcn-Interrupt-a-7
24079: PPUSH
24080: CALL_OW 88
// DialogueOff ;
24084: CALL_OW 7
// hasMuchin := true ;
24088: LD_ADDR_EXP 30
24092: PUSH
24093: LD_INT 1
24095: ST_TO_ADDR
// Query ( MuchinInfo ) ;
24096: LD_STRING MuchinInfo
24098: PPUSH
24099: CALL_OW 97
// ChangeMissionObjectives ( M2a ) ;
24103: LD_STRING M2a
24105: PPUSH
24106: CALL_OW 337
// SetSide ( HexInfo ( 105 , 55 ) , 2 ) ;
24110: LD_INT 105
24112: PPUSH
24113: LD_INT 55
24115: PPUSH
24116: CALL_OW 428
24120: PPUSH
24121: LD_INT 2
24123: PPUSH
24124: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 2 ) ;
24128: LD_INT 115
24130: PPUSH
24131: LD_INT 65
24133: PPUSH
24134: CALL_OW 428
24138: PPUSH
24139: LD_INT 2
24141: PPUSH
24142: CALL_OW 235
// PlaceSeeing ( 109 , 59 , 2 , - 10 ) ;
24146: LD_INT 109
24148: PPUSH
24149: LD_INT 59
24151: PPUSH
24152: LD_INT 2
24154: PPUSH
24155: LD_INT 10
24157: NEG
24158: PPUSH
24159: CALL_OW 330
// CenterOnXY ( 109 , 59 ) ;
24163: LD_INT 109
24165: PPUSH
24166: LD_INT 59
24168: PPUSH
24169: CALL_OW 84
// wait ( 0 0$2 ) ;
24173: LD_INT 70
24175: PPUSH
24176: CALL_OW 67
// RemoveSeeing ( 109 , 59 , 2 ) ;
24180: LD_INT 109
24182: PPUSH
24183: LD_INT 59
24185: PPUSH
24186: LD_INT 2
24188: PPUSH
24189: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
24193: LD_INT 35
24195: PPUSH
24196: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24200: LD_EXP 66
24204: PPUSH
24205: LD_EXP 46
24209: PPUSH
24210: CALL_OW 296
24214: PUSH
24215: LD_INT 6
24217: GREATER
24218: IFFALSE 24234
// ComMoveUnit ( ruDisturb , Heike ) ;
24220: LD_EXP 66
24224: PPUSH
24225: LD_EXP 46
24229: PPUSH
24230: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24234: LD_EXP 46
24238: PPUSH
24239: CALL_OW 257
24243: PUSH
24244: LD_INT 33
24246: NONEQUAL
24247: PUSH
24248: LD_EXP 14
24252: PPUSH
24253: LD_INT 22
24255: PUSH
24256: LD_INT 2
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 91
24265: PUSH
24266: LD_EXP 66
24270: PUSH
24271: LD_INT 8
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 2
24281: PUSH
24282: LD_INT 25
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: LD_INT 25
24294: PUSH
24295: LD_INT 11
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 25
24304: PUSH
24305: LD_INT 32
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 25
24314: PUSH
24315: LD_INT 34
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: LIST
24333: PPUSH
24334: CALL_OW 72
24338: OR
24339: IFFALSE 24351
// begin isAlarm := true ;
24341: LD_ADDR_EXP 17
24345: PUSH
24346: LD_INT 1
24348: ST_TO_ADDR
// exit ;
24349: GO 27818
// end ; if not HexInfo ( 105 , 55 ) or not HexInfo ( 115 , 65 ) then
24351: LD_INT 105
24353: PPUSH
24354: LD_INT 55
24356: PPUSH
24357: CALL_OW 428
24361: NOT
24362: PUSH
24363: LD_INT 115
24365: PPUSH
24366: LD_INT 65
24368: PPUSH
24369: CALL_OW 428
24373: NOT
24374: OR
24375: IFFALSE 24387
// begin isAlarm := true ;
24377: LD_ADDR_EXP 17
24381: PUSH
24382: LD_INT 1
24384: ST_TO_ADDR
// exit ;
24385: GO 27818
// end ; until not BuildingsInProgress ( 2 ) ;
24387: LD_INT 2
24389: PPUSH
24390: CALL_OW 345
24394: NOT
24395: IFFALSE 24193
// SetSide ( HexInfo ( 105 , 55 ) , 3 ) ;
24397: LD_INT 105
24399: PPUSH
24400: LD_INT 55
24402: PPUSH
24403: CALL_OW 428
24407: PPUSH
24408: LD_INT 3
24410: PPUSH
24411: CALL_OW 235
// SetSide ( HexInfo ( 115 , 65 ) , 3 ) ;
24415: LD_INT 115
24417: PPUSH
24418: LD_INT 65
24420: PPUSH
24421: CALL_OW 428
24425: PPUSH
24426: LD_INT 3
24428: PPUSH
24429: CALL_OW 235
// ChangeMissionObjectives ( M2a-out ) ;
24433: LD_STRING M2a-out
24435: PPUSH
24436: CALL_OW 337
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
24440: LD_EXP 66
24444: PPUSH
24445: LD_INT 2
24447: PPUSH
24448: CALL_OW 120
// wait ( 0 0$3 ) ;
24452: LD_INT 105
24454: PPUSH
24455: CALL_OW 67
// hasMuchin := false ;
24459: LD_ADDR_EXP 30
24463: PUSH
24464: LD_INT 0
24466: ST_TO_ADDR
// wait ( 2 2$00 ) ;
24467: LD_INT 4200
24469: PPUSH
24470: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
24474: LD_INT 35
24476: PPUSH
24477: CALL_OW 67
// if not HasTask ( ruDisturb ) then
24481: LD_EXP 66
24485: PPUSH
24486: CALL_OW 314
24490: NOT
24491: IFFALSE 24507
// ComMoveUnit ( ruDisturb , Heike ) ;
24493: LD_EXP 66
24497: PPUSH
24498: LD_EXP 46
24502: PPUSH
24503: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 6 and IsOk ( ruDisturb ) ;
24507: LD_EXP 46
24511: PPUSH
24512: LD_EXP 66
24516: PPUSH
24517: CALL_OW 296
24521: PUSH
24522: LD_INT 6
24524: LESS
24525: PUSH
24526: LD_EXP 66
24530: PPUSH
24531: CALL_OW 302
24535: AND
24536: IFFALSE 24474
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24538: LD_EXP 46
24542: PPUSH
24543: CALL_OW 257
24547: PUSH
24548: LD_INT 33
24550: NONEQUAL
24551: PUSH
24552: LD_EXP 14
24556: PPUSH
24557: LD_INT 22
24559: PUSH
24560: LD_INT 2
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 91
24569: PUSH
24570: LD_EXP 66
24574: PUSH
24575: LD_INT 8
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 2
24585: PUSH
24586: LD_INT 25
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 25
24598: PUSH
24599: LD_INT 11
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 25
24608: PUSH
24609: LD_INT 32
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 25
24618: PUSH
24619: LD_INT 34
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: EMPTY
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: LIST
24637: PPUSH
24638: CALL_OW 72
24642: OR
24643: IFFALSE 24653
// isAlarm := true ;
24645: LD_ADDR_EXP 17
24649: PUSH
24650: LD_INT 1
24652: ST_TO_ADDR
// if isAlarm then
24653: LD_EXP 17
24657: IFFALSE 24661
// exit ;
24659: GO 27818
// DialogueOn ;
24661: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
24665: LD_EXP 66
24669: PPUSH
24670: LD_STRING DMcn-Interrupt-1
24672: PPUSH
24673: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
24677: LD_EXP 66
24681: PPUSH
24682: LD_STRING DMcn-Interrupt-2
24684: PPUSH
24685: CALL_OW 88
// CenterNowOnXY ( 176 , 54 ) ;
24689: LD_INT 176
24691: PPUSH
24692: LD_INT 54
24694: PPUSH
24695: CALL_OW 86
// PlaceSeeing ( 176 , 54 , 2 , - 6 ) ;
24699: LD_INT 176
24701: PPUSH
24702: LD_INT 54
24704: PPUSH
24705: LD_INT 2
24707: PPUSH
24708: LD_INT 6
24710: NEG
24711: PPUSH
24712: CALL_OW 330
// dwait ( 0 0$0.3 ) ;
24716: LD_INT 10
24718: PPUSH
24719: CALL_OW 68
// Say ( ruDisturb , DMcn-Interrupt-b-3 ) ;
24723: LD_EXP 66
24727: PPUSH
24728: LD_STRING DMcn-Interrupt-b-3
24730: PPUSH
24731: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-4 ) ;
24735: LD_EXP 46
24739: PPUSH
24740: LD_STRING DH-Interrupt-b-4
24742: PPUSH
24743: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-5 ) ;
24747: LD_EXP 66
24751: PPUSH
24752: LD_STRING DMcn-Interrupt-b-5
24754: PPUSH
24755: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
24759: LD_EXP 46
24763: PPUSH
24764: CALL_OW 87
// RemoveSeeing ( 176 , 54 , 2 ) ;
24768: LD_INT 176
24770: PPUSH
24771: LD_INT 54
24773: PPUSH
24774: LD_INT 2
24776: PPUSH
24777: CALL_OW 331
// Say ( ruDisturb , DMcn-Interrupt-b-6 ) ;
24781: LD_EXP 66
24785: PPUSH
24786: LD_STRING DMcn-Interrupt-b-6
24788: PPUSH
24789: CALL_OW 88
// Say ( Heike , DH-Interrupt-b-7 ) ;
24793: LD_EXP 46
24797: PPUSH
24798: LD_STRING DH-Interrupt-b-7
24800: PPUSH
24801: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-b-8 ) ;
24805: LD_EXP 66
24809: PPUSH
24810: LD_STRING DMcn-Interrupt-b-8
24812: PPUSH
24813: CALL_OW 88
// DialogueOff ;
24817: CALL_OW 7
// Query ( MuchinInfo ) ;
24821: LD_STRING MuchinInfo
24823: PPUSH
24824: CALL_OW 97
// ChangeMissionObjectives ( M2b ) ;
24828: LD_STRING M2b
24830: PPUSH
24831: CALL_OW 337
// hasMuchin := true ;
24835: LD_ADDR_EXP 30
24839: PUSH
24840: LD_INT 1
24842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24843: LD_INT 35
24845: PPUSH
24846: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
24850: LD_EXP 66
24854: PPUSH
24855: LD_EXP 46
24859: PPUSH
24860: CALL_OW 296
24864: PUSH
24865: LD_INT 6
24867: GREATER
24868: IFFALSE 24884
// ComMoveUnit ( ruDisturb , Heike ) ;
24870: LD_EXP 66
24874: PPUSH
24875: LD_EXP 46
24879: PPUSH
24880: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
24884: LD_EXP 46
24888: PPUSH
24889: CALL_OW 257
24893: PUSH
24894: LD_INT 33
24896: NONEQUAL
24897: PUSH
24898: LD_EXP 14
24902: PPUSH
24903: LD_INT 22
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PUSH
24913: LD_INT 91
24915: PUSH
24916: LD_EXP 66
24920: PUSH
24921: LD_INT 8
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 25
24944: PUSH
24945: LD_INT 11
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 25
24954: PUSH
24955: LD_INT 32
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 25
24964: PUSH
24965: LD_INT 34
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: LIST
24983: PPUSH
24984: CALL_OW 72
24988: OR
24989: IFFALSE 25001
// begin isAlarm := true ;
24991: LD_ADDR_EXP 17
24995: PUSH
24996: LD_INT 1
24998: ST_TO_ADDR
// exit ;
24999: GO 27818
// end ; until GetDistUnits ( Heike , ruFac ) < 4 ;
25001: LD_EXP 46
25005: PPUSH
25006: LD_INT 61
25008: PPUSH
25009: CALL_OW 296
25013: PUSH
25014: LD_INT 4
25016: LESS
25017: IFFALSE 24843
// InGameOn ;
25019: CALL_OW 8
// PlaceSeeing ( 173 , 54 , 2 , - 8 ) ;
25023: LD_INT 173
25025: PPUSH
25026: LD_INT 54
25028: PPUSH
25029: LD_INT 2
25031: PPUSH
25032: LD_INT 8
25034: NEG
25035: PPUSH
25036: CALL_OW 330
// SetSide ( Heike , 3 ) ;
25040: LD_EXP 46
25044: PPUSH
25045: LD_INT 3
25047: PPUSH
25048: CALL_OW 235
// ComEnterUnit ( Heike , ruFac ) ;
25052: LD_EXP 46
25056: PPUSH
25057: LD_INT 61
25059: PPUSH
25060: CALL_OW 120
// ComEnterUnit ( ruDisturb , ruFac ) ;
25064: LD_EXP 66
25068: PPUSH
25069: LD_INT 61
25071: PPUSH
25072: CALL_OW 120
// if Markov in heikeSquad and GetDistUnits ( Markov , ruFac ) < 12 then
25076: LD_EXP 53
25080: PUSH
25081: LD_EXP 14
25085: IN
25086: PUSH
25087: LD_EXP 53
25091: PPUSH
25092: LD_INT 61
25094: PPUSH
25095: CALL_OW 296
25099: PUSH
25100: LD_INT 12
25102: LESS
25103: AND
25104: IFFALSE 25148
// begin SetSide ( Markov , 3 ) ;
25106: LD_EXP 53
25110: PPUSH
25111: LD_INT 3
25113: PPUSH
25114: CALL_OW 235
// ComEnterUnit ( Markov , ruFac ) ;
25118: LD_EXP 53
25122: PPUSH
25123: LD_INT 61
25125: PPUSH
25126: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
25130: LD_INT 35
25132: PPUSH
25133: CALL_OW 67
// until IsInUnit ( Markov ) ;
25137: LD_EXP 53
25141: PPUSH
25142: CALL_OW 310
25146: IFFALSE 25130
// end ; repeat wait ( 0 0$1 ) ;
25148: LD_INT 35
25150: PPUSH
25151: CALL_OW 67
// until IsInUnit ( Heike ) ;
25155: LD_EXP 46
25159: PPUSH
25160: CALL_OW 310
25164: IFFALSE 25148
// SetClass ( Heike , class_mechanic ) ;
25166: LD_EXP 46
25170: PPUSH
25171: LD_INT 3
25173: PPUSH
25174: CALL_OW 336
// ComConstruct ( ruFac , ru_medium_wheeled , engine_siberite , control_computer , ru_gatling_gun ) ;
25178: LD_INT 61
25180: PPUSH
25181: LD_INT 21
25183: PPUSH
25184: LD_INT 3
25186: PPUSH
25187: LD_INT 3
25189: PPUSH
25190: LD_INT 43
25192: PPUSH
25193: CALL_OW 125
// if hasVirus and ( Markov in heikeSquad or IsInUnit ( Markov ) = ruFac ) then
25197: LD_EXP 31
25201: PUSH
25202: LD_EXP 53
25206: PUSH
25207: LD_EXP 14
25211: IN
25212: PUSH
25213: LD_EXP 53
25217: PPUSH
25218: CALL_OW 310
25222: PUSH
25223: LD_INT 61
25225: EQUAL
25226: OR
25227: AND
25228: IFFALSE 25718
// begin wait ( 0 0$5 ) ;
25230: LD_INT 175
25232: PPUSH
25233: CALL_OW 67
// SetSide ( Heike , 2 ) ;
25237: LD_EXP 46
25241: PPUSH
25242: LD_INT 2
25244: PPUSH
25245: CALL_OW 235
// SetSide ( Markov , 2 ) ;
25249: LD_EXP 53
25253: PPUSH
25254: LD_INT 2
25256: PPUSH
25257: CALL_OW 235
// if not Markov in heikeSquad then
25261: LD_EXP 53
25265: PUSH
25266: LD_EXP 14
25270: IN
25271: NOT
25272: IFFALSE 25294
// heikeSquad := Join ( heikeSquad , Markov ) ;
25274: LD_ADDR_EXP 14
25278: PUSH
25279: LD_EXP 14
25283: PPUSH
25284: LD_EXP 53
25288: PPUSH
25289: CALL 66999 0 2
25293: ST_TO_ADDR
// Say ( Markov , DMar-Factory-1 ) ;
25294: LD_EXP 53
25298: PPUSH
25299: LD_STRING DMar-Factory-1
25301: PPUSH
25302: CALL_OW 88
// SetWorkingProgress ( ruFac , 99 ) ;
25306: LD_INT 61
25308: PPUSH
25309: LD_INT 99
25311: PPUSH
25312: CALL_OW 329
// game_speed := 4 ;
25316: LD_ADDR_OWVAR 65
25320: PUSH
25321: LD_INT 4
25323: ST_TO_ADDR
// ComExitBuilding ( ruDisturb ) ;
25324: LD_EXP 66
25328: PPUSH
25329: CALL_OW 122
// ComExitBuilding ( Markov ) ;
25333: LD_EXP 53
25337: PPUSH
25338: CALL_OW 122
// AddComMoveXY ( ruDisturb , 171 , 51 ) ;
25342: LD_EXP 66
25346: PPUSH
25347: LD_INT 171
25349: PPUSH
25350: LD_INT 51
25352: PPUSH
25353: CALL_OW 171
// AddComMoveXY ( Markov , 167 , 50 ) ;
25357: LD_EXP 53
25361: PPUSH
25362: LD_INT 167
25364: PPUSH
25365: LD_INT 50
25367: PPUSH
25368: CALL_OW 171
// AddComTurnUnit ( Markov , ruDisturb ) ;
25372: LD_EXP 53
25376: PPUSH
25377: LD_EXP 66
25381: PPUSH
25382: CALL_OW 179
// wait ( 0 0$5 ) ;
25386: LD_INT 175
25388: PPUSH
25389: CALL_OW 67
// Say ( Markov , DMar-Factory-2 ) ;
25393: LD_EXP 53
25397: PPUSH
25398: LD_STRING DMar-Factory-2
25400: PPUSH
25401: CALL_OW 88
// veh := FilterAllUnits ( [ [ f_side , 3 ] , [ f_control , control_computer ] ] ) [ 1 ] ;
25405: LD_ADDR_VAR 0 2
25409: PUSH
25410: LD_INT 22
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PUSH
25420: LD_INT 33
25422: PUSH
25423: LD_INT 3
25425: PUSH
25426: EMPTY
25427: LIST
25428: LIST
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PPUSH
25434: CALL_OW 69
25438: PUSH
25439: LD_INT 1
25441: ARRAY
25442: ST_TO_ADDR
// ComTurnUnit ( ruDisturb , veh ) ;
25443: LD_EXP 66
25447: PPUSH
25448: LD_VAR 0 2
25452: PPUSH
25453: CALL_OW 119
// game_speed := 4 ;
25457: LD_ADDR_OWVAR 65
25461: PUSH
25462: LD_INT 4
25464: ST_TO_ADDR
// async ;
25465: ASYNC
// Say ( ruDisturb , DMcn-Factory-3 ) ;
25466: LD_EXP 66
25470: PPUSH
25471: LD_STRING DMcn-Factory-3
25473: PPUSH
25474: CALL_OW 88
// wait ( 0 0$0.9 ) ;
25478: LD_INT 32
25480: PPUSH
25481: CALL_OW 67
// ComAttackUnit ( veh , ruDisturb ) ;
25485: LD_VAR 0 2
25489: PPUSH
25490: LD_EXP 66
25494: PPUSH
25495: CALL_OW 115
// sync ;
25499: SYNC
// wait ( 0 0$1 ) ;
25500: LD_INT 35
25502: PPUSH
25503: CALL_OW 67
// KillUnit ( ruDisturb ) ;
25507: LD_EXP 66
25511: PPUSH
25512: CALL_OW 66
// SetSide ( veh , 7 ) ;
25516: LD_VAR 0 2
25520: PPUSH
25521: LD_INT 7
25523: PPUSH
25524: CALL_OW 235
// ComMoveXY ( veh , 84 , 38 ) ;
25528: LD_VAR 0 2
25532: PPUSH
25533: LD_INT 84
25535: PPUSH
25536: LD_INT 38
25538: PPUSH
25539: CALL_OW 111
// if GetSex ( ruMechanics [ 1 ] ) = sex_male then
25543: LD_EXP 67
25547: PUSH
25548: LD_INT 1
25550: ARRAY
25551: PPUSH
25552: CALL_OW 258
25556: PUSH
25557: LD_INT 1
25559: EQUAL
25560: IFFALSE 25580
// Say ( ruMechanics [ 1 ] , DRum-Factory-4 ) else
25562: LD_EXP 67
25566: PUSH
25567: LD_INT 1
25569: ARRAY
25570: PPUSH
25571: LD_STRING DRum-Factory-4
25573: PPUSH
25574: CALL_OW 88
25578: GO 25596
// Say ( ruMechanics [ 1 ] , DRuf-Factory-4 ) ;
25580: LD_EXP 67
25584: PUSH
25585: LD_INT 1
25587: ARRAY
25588: PPUSH
25589: LD_STRING DRuf-Factory-4
25591: PPUSH
25592: CALL_OW 88
// wait ( 0 0$1 ) ;
25596: LD_INT 35
25598: PPUSH
25599: CALL_OW 67
// Say ( UnitFilter ( ruMechanics , [ f_sex , sex_male ] ) [ 1 ] , DRum-Factory-6 ) ;
25603: LD_EXP 67
25607: PPUSH
25608: LD_INT 26
25610: PUSH
25611: LD_INT 1
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PPUSH
25618: CALL_OW 72
25622: PUSH
25623: LD_INT 1
25625: ARRAY
25626: PPUSH
25627: LD_STRING DRum-Factory-6
25629: PPUSH
25630: CALL_OW 88
// wait ( 0 0$2 ) ;
25634: LD_INT 70
25636: PPUSH
25637: CALL_OW 67
// SetClass ( Heike , class_prison ) ;
25641: LD_EXP 46
25645: PPUSH
25646: LD_INT 33
25648: PPUSH
25649: CALL_OW 336
// ComExitBuilding ( Heike ) ;
25653: LD_EXP 46
25657: PPUSH
25658: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25662: LD_EXP 46
25666: PPUSH
25667: LD_INT 168
25669: PPUSH
25670: LD_INT 54
25672: PPUSH
25673: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25677: LD_INT 173
25679: PPUSH
25680: LD_INT 54
25682: PPUSH
25683: LD_INT 2
25685: PPUSH
25686: CALL_OW 331
// InGameOff ;
25690: CALL_OW 9
// ChangeMissionObjectives ( M2b-out ) ;
25694: LD_STRING M2b-out
25696: PPUSH
25697: CALL_OW 337
// SetAchievement ( ACH_TOY ) ;
25701: LD_STRING ACH_TOY
25703: PPUSH
25704: CALL_OW 543
// hasMuchin := false ;
25708: LD_ADDR_EXP 30
25712: PUSH
25713: LD_INT 0
25715: ST_TO_ADDR
// exit ;
25716: GO 27818
// end ; wait ( 0 0$5 ) ;
25718: LD_INT 175
25720: PPUSH
25721: CALL_OW 67
// SetWorkingProgress ( ruFac , 99 ) ;
25725: LD_INT 61
25727: PPUSH
25728: LD_INT 99
25730: PPUSH
25731: CALL_OW 329
// if Markov in heikeSquad and GetSide ( Markov ) = 3 then
25735: LD_EXP 53
25739: PUSH
25740: LD_EXP 14
25744: IN
25745: PUSH
25746: LD_EXP 53
25750: PPUSH
25751: CALL_OW 255
25755: PUSH
25756: LD_INT 3
25758: EQUAL
25759: AND
25760: IFFALSE 25783
// begin SetSide ( Markov , 2 ) ;
25762: LD_EXP 53
25766: PPUSH
25767: LD_INT 2
25769: PPUSH
25770: CALL_OW 235
// ComExitBuilding ( Markov ) ;
25774: LD_EXP 53
25778: PPUSH
25779: CALL_OW 122
// end ; SetSide ( Heike , 2 ) ;
25783: LD_EXP 46
25787: PPUSH
25788: LD_INT 2
25790: PPUSH
25791: CALL_OW 235
// SetClass ( Heike , class_prison ) ;
25795: LD_EXP 46
25799: PPUSH
25800: LD_INT 33
25802: PPUSH
25803: CALL_OW 336
// ComExitBuilding ( ruDisturb ) ;
25807: LD_EXP 66
25811: PPUSH
25812: CALL_OW 122
// ComExitBuilding ( Heike ) ;
25816: LD_EXP 46
25820: PPUSH
25821: CALL_OW 122
// AddComMoveXY ( Heike , 168 , 54 ) ;
25825: LD_EXP 46
25829: PPUSH
25830: LD_INT 168
25832: PPUSH
25833: LD_INT 54
25835: PPUSH
25836: CALL_OW 171
// RemoveSeeing ( 173 , 54 , 2 ) ;
25840: LD_INT 173
25842: PPUSH
25843: LD_INT 54
25845: PPUSH
25846: LD_INT 2
25848: PPUSH
25849: CALL_OW 331
// InGameOff ;
25853: CALL_OW 9
// wait ( 3 ) ;
25857: LD_INT 3
25859: PPUSH
25860: CALL_OW 67
// ComEnterUnit ( ruDisturb , ruMainBase ) ;
25864: LD_EXP 66
25868: PPUSH
25869: LD_INT 2
25871: PPUSH
25872: CALL_OW 120
// wait ( 0 0$3 ) ;
25876: LD_INT 105
25878: PPUSH
25879: CALL_OW 67
// ChangeMissionObjectives ( M2b-out ) ;
25883: LD_STRING M2b-out
25885: PPUSH
25886: CALL_OW 337
// hasMuchin := false ;
25890: LD_ADDR_EXP 30
25894: PUSH
25895: LD_INT 0
25897: ST_TO_ADDR
// wait ( 2 2$00 ) ;
25898: LD_INT 4200
25900: PPUSH
25901: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25905: LD_INT 35
25907: PPUSH
25908: CALL_OW 67
// if not HasTask ( ruDisturb ) then
25912: LD_EXP 66
25916: PPUSH
25917: CALL_OW 314
25921: NOT
25922: IFFALSE 25938
// ComMoveUnit ( ruDisturb , Heike ) ;
25924: LD_EXP 66
25928: PPUSH
25929: LD_EXP 46
25933: PPUSH
25934: CALL_OW 112
// until GetDistUnits ( Heike , ruDisturb ) < 2 and IsOk ( ruDisturb ) ;
25938: LD_EXP 46
25942: PPUSH
25943: LD_EXP 66
25947: PPUSH
25948: CALL_OW 296
25952: PUSH
25953: LD_INT 2
25955: LESS
25956: PUSH
25957: LD_EXP 66
25961: PPUSH
25962: CALL_OW 302
25966: AND
25967: IFFALSE 25905
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
25969: LD_EXP 46
25973: PPUSH
25974: CALL_OW 257
25978: PUSH
25979: LD_INT 33
25981: NONEQUAL
25982: PUSH
25983: LD_EXP 14
25987: PPUSH
25988: LD_INT 22
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 91
26000: PUSH
26001: LD_EXP 66
26005: PUSH
26006: LD_INT 8
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: PUSH
26017: LD_INT 25
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 25
26029: PUSH
26030: LD_INT 11
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 25
26039: PUSH
26040: LD_INT 32
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 25
26049: PUSH
26050: LD_INT 34
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: LIST
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: PPUSH
26069: CALL_OW 72
26073: OR
26074: IFFALSE 26084
// isAlarm := true ;
26076: LD_ADDR_EXP 17
26080: PUSH
26081: LD_INT 1
26083: ST_TO_ADDR
// if isAlarm then
26084: LD_EXP 17
26088: IFFALSE 26092
// exit ;
26090: GO 27818
// ComTurnUnit ( Heike , ruDisturb ) ;
26092: LD_EXP 46
26096: PPUSH
26097: LD_EXP 66
26101: PPUSH
26102: CALL_OW 119
// ComTurnUnit ( ruDisturb , Heike ) ;
26106: LD_EXP 66
26110: PPUSH
26111: LD_EXP 46
26115: PPUSH
26116: CALL_OW 119
// wait ( 3 ) ;
26120: LD_INT 3
26122: PPUSH
26123: CALL_OW 67
// for i := 1 to 3 do
26127: LD_ADDR_VAR 0 1
26131: PUSH
26132: DOUBLE
26133: LD_INT 1
26135: DEC
26136: ST_TO_ADDR
26137: LD_INT 3
26139: PUSH
26140: FOR_TO
26141: IFFALSE 26158
// CreateCratesArea ( 5 , cratesArea , false ) ;
26143: LD_INT 5
26145: PPUSH
26146: LD_INT 58
26148: PPUSH
26149: LD_INT 0
26151: PPUSH
26152: CALL_OW 55
26156: GO 26140
26158: POP
26159: POP
// uc_side := 3 ;
26160: LD_ADDR_OWVAR 20
26164: PUSH
26165: LD_INT 3
26167: ST_TO_ADDR
// uc_nation := nation_russian ;
26168: LD_ADDR_OWVAR 21
26172: PUSH
26173: LD_INT 3
26175: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_manual , ru_cargo_bay , 100 ) ;
26176: LD_INT 21
26178: PPUSH
26179: LD_INT 3
26181: PPUSH
26182: LD_INT 1
26184: PPUSH
26185: LD_INT 51
26187: PPUSH
26188: LD_INT 100
26190: PPUSH
26191: CALL 34148 0 5
// veh := CreateVehicle ;
26195: LD_ADDR_VAR 0 2
26199: PUSH
26200: CALL_OW 45
26204: ST_TO_ADDR
// PlaceUnitXYD ( veh , 104 , 41 , 3 , false ) ;
26205: LD_VAR 0 2
26209: PPUSH
26210: LD_INT 104
26212: PPUSH
26213: LD_INT 41
26215: PPUSH
26216: LD_INT 3
26218: PPUSH
26219: LD_INT 0
26221: PPUSH
26222: CALL 69139 0 5
// SetCargo ( veh , mat_cans , 100 ) ;
26226: LD_VAR 0 2
26230: PPUSH
26231: LD_INT 1
26233: PPUSH
26234: LD_INT 100
26236: PPUSH
26237: CALL_OW 290
// PlaceHumanInUnit ( CreateHuman , veh ) ;
26241: CALL_OW 44
26245: PPUSH
26246: LD_VAR 0 2
26250: PPUSH
26251: CALL_OW 52
// DialogueOn ;
26255: CALL_OW 6
// Say ( ruDisturb , DMcn-Interrupt-1 ) ;
26259: LD_EXP 66
26263: PPUSH
26264: LD_STRING DMcn-Interrupt-1
26266: PPUSH
26267: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-2 ) ;
26271: LD_EXP 66
26275: PPUSH
26276: LD_STRING DMcn-Interrupt-2
26278: PPUSH
26279: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-3 ) ;
26283: LD_EXP 66
26287: PPUSH
26288: LD_STRING DMcn-Interrupt-c-3
26290: PPUSH
26291: CALL_OW 88
// PlaceSeeing ( 101 , 38 , 2 , - 10 ) ;
26295: LD_INT 101
26297: PPUSH
26298: LD_INT 38
26300: PPUSH
26301: LD_INT 2
26303: PPUSH
26304: LD_INT 10
26306: NEG
26307: PPUSH
26308: CALL_OW 330
// CenterOnXY ( 101 , 38 ) ;
26312: LD_INT 101
26314: PPUSH
26315: LD_INT 38
26317: PPUSH
26318: CALL_OW 84
// wait ( 0 0$2 ) ;
26322: LD_INT 70
26324: PPUSH
26325: CALL_OW 67
// RemoveSeeing ( 101 , 38 , 2 ) ;
26329: LD_INT 101
26331: PPUSH
26332: LD_INT 38
26334: PPUSH
26335: LD_INT 2
26337: PPUSH
26338: CALL_OW 331
// RemoveUnit ( veh ) ;
26342: LD_VAR 0 2
26346: PPUSH
26347: CALL_OW 64
// Say ( ruDisturb , DMcn-Interrupt-c-4 ) ;
26351: LD_EXP 66
26355: PPUSH
26356: LD_STRING DMcn-Interrupt-c-4
26358: PPUSH
26359: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-5 ) ;
26363: LD_EXP 46
26367: PPUSH
26368: LD_STRING DH-Interrupt-c-5
26370: PPUSH
26371: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-6 ) ;
26375: LD_EXP 66
26379: PPUSH
26380: LD_STRING DMcn-Interrupt-c-6
26382: PPUSH
26383: CALL_OW 88
// Say ( Heike , DH-Interrupt-c-7 ) ;
26387: LD_EXP 46
26391: PPUSH
26392: LD_STRING DH-Interrupt-c-7
26394: PPUSH
26395: CALL_OW 88
// Say ( ruDisturb , DMcn-Interrupt-c-8 ) ;
26399: LD_EXP 66
26403: PPUSH
26404: LD_STRING DMcn-Interrupt-c-8
26406: PPUSH
26407: CALL_OW 88
// DialogueOff ;
26411: CALL_OW 7
// hasMuchin := true ;
26415: LD_ADDR_EXP 30
26419: PUSH
26420: LD_INT 1
26422: ST_TO_ADDR
// Query ( MuchinInfo ) ;
26423: LD_STRING MuchinInfo
26425: PPUSH
26426: CALL_OW 97
// ChangeMissionObjectives ( M2c ) ;
26430: LD_STRING M2c
26432: PPUSH
26433: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
26437: LD_INT 35
26439: PPUSH
26440: CALL_OW 67
// if GetDistUnits ( ruDisturb , Heike ) > 6 then
26444: LD_EXP 66
26448: PPUSH
26449: LD_EXP 46
26453: PPUSH
26454: CALL_OW 296
26458: PUSH
26459: LD_INT 6
26461: GREATER
26462: IFFALSE 26478
// ComMoveUnit ( ruDisturb , Heike ) ;
26464: LD_EXP 66
26468: PPUSH
26469: LD_EXP 46
26473: PPUSH
26474: CALL_OW 112
// if GetClass ( Heike ) <> class_prison or UnitFilter ( heikeSquad , [ [ f_side , 2 ] , [ f_dist , ruDisturb , 8 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_desert_warior ] , [ f_class , class_hunter ] , [ f_class , class_revolver ] ] ] ) then
26478: LD_EXP 46
26482: PPUSH
26483: CALL_OW 257
26487: PUSH
26488: LD_INT 33
26490: NONEQUAL
26491: PUSH
26492: LD_EXP 14
26496: PPUSH
26497: LD_INT 22
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 91
26509: PUSH
26510: LD_EXP 66
26514: PUSH
26515: LD_INT 8
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 2
26525: PUSH
26526: LD_INT 25
26528: PUSH
26529: LD_INT 1
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 25
26538: PUSH
26539: LD_INT 11
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 25
26548: PUSH
26549: LD_INT 32
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 25
26558: PUSH
26559: LD_INT 34
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: LIST
26577: PPUSH
26578: CALL_OW 72
26582: OR
26583: IFFALSE 26595
// begin isAlarm := true ;
26585: LD_ADDR_EXP 17
26589: PUSH
26590: LD_INT 1
26592: ST_TO_ADDR
// exit ;
26593: GO 27818
// end ; until UnitFilter ( heikeSquad union Heike , [ f_distxy , 100 , 37 , 6 ] ) ;
26595: LD_EXP 14
26599: PUSH
26600: LD_EXP 46
26604: UNION
26605: PPUSH
26606: LD_INT 92
26608: PUSH
26609: LD_INT 100
26611: PUSH
26612: LD_INT 37
26614: PUSH
26615: LD_INT 6
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: PPUSH
26624: CALL_OW 72
26628: IFFALSE 26437
// PlaceSeeing ( 100 , 37 , 3 , - 10 ) ;
26630: LD_INT 100
26632: PPUSH
26633: LD_INT 37
26635: PPUSH
26636: LD_INT 3
26638: PPUSH
26639: LD_INT 10
26641: NEG
26642: PPUSH
26643: CALL_OW 330
// tmp := UnitFilter ( heikeSquad union Heike , [ [ f_class , class_prison ] , [ f_dist , ruOutpost0 , 12 ] ] ) ;
26647: LD_ADDR_VAR 0 3
26651: PUSH
26652: LD_EXP 14
26656: PUSH
26657: LD_EXP 46
26661: UNION
26662: PPUSH
26663: LD_INT 25
26665: PUSH
26666: LD_INT 33
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PUSH
26673: LD_INT 91
26675: PUSH
26676: LD_INT 6
26678: PUSH
26679: LD_INT 12
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PPUSH
26691: CALL_OW 72
26695: ST_TO_ADDR
// for i in tmp do
26696: LD_ADDR_VAR 0 1
26700: PUSH
26701: LD_VAR 0 3
26705: PUSH
26706: FOR_IN
26707: IFFALSE 26738
// begin SetSide ( i , 3 ) ;
26709: LD_VAR 0 1
26713: PPUSH
26714: LD_INT 3
26716: PPUSH
26717: CALL_OW 235
// ComMoveXY ( i , 101 , 38 ) ;
26721: LD_VAR 0 1
26725: PPUSH
26726: LD_INT 101
26728: PPUSH
26729: LD_INT 38
26731: PPUSH
26732: CALL_OW 111
// end ;
26736: GO 26706
26738: POP
26739: POP
// ComMoveXY ( ruDisturb , 104 , 37 ) ;
26740: LD_EXP 66
26744: PPUSH
26745: LD_INT 104
26747: PPUSH
26748: LD_INT 37
26750: PPUSH
26751: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
26755: LD_EXP 66
26759: PPUSH
26760: LD_EXP 46
26764: PPUSH
26765: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
26769: LD_INT 35
26771: PPUSH
26772: CALL_OW 67
// cr := GetListOfCratesInArea ( cratesArea ) ;
26776: LD_ADDR_VAR 0 4
26780: PUSH
26781: LD_INT 58
26783: PPUSH
26784: CALL_OW 435
26788: ST_TO_ADDR
// for i in tmp do
26789: LD_ADDR_VAR 0 1
26793: PUSH
26794: LD_VAR 0 3
26798: PUSH
26799: FOR_IN
26800: IFFALSE 26843
// if not HasTask ( i ) then
26802: LD_VAR 0 1
26806: PPUSH
26807: CALL_OW 314
26811: NOT
26812: IFFALSE 26841
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
26814: LD_VAR 0 1
26818: PPUSH
26819: LD_VAR 0 4
26823: PUSH
26824: LD_INT 1
26826: ARRAY
26827: PPUSH
26828: LD_VAR 0 4
26832: PUSH
26833: LD_INT 2
26835: ARRAY
26836: PPUSH
26837: CALL_OW 117
26841: GO 26799
26843: POP
26844: POP
// until not cr ;
26845: LD_VAR 0 4
26849: NOT
26850: IFFALSE 26769
// wait ( 0 0$2 ) ;
26852: LD_INT 70
26854: PPUSH
26855: CALL_OW 67
// RemoveSeeing ( 100 , 37 , 3 ) ;
26859: LD_INT 100
26861: PPUSH
26862: LD_INT 37
26864: PPUSH
26865: LD_INT 3
26867: PPUSH
26868: CALL_OW 331
// for i in tmp do
26872: LD_ADDR_VAR 0 1
26876: PUSH
26877: LD_VAR 0 3
26881: PUSH
26882: FOR_IN
26883: IFFALSE 26899
// SetSide ( i , 2 ) ;
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_INT 2
26892: PPUSH
26893: CALL_OW 235
26897: GO 26882
26899: POP
26900: POP
// if Kaia in tmp then
26901: LD_EXP 51
26905: PUSH
26906: LD_VAR 0 3
26910: IN
26911: IFFALSE 27212
// begin InGameOn ;
26913: CALL_OW 8
// ComMoveUnit ( Kaia , ruDisturb ) ;
26917: LD_EXP 51
26921: PPUSH
26922: LD_EXP 66
26926: PPUSH
26927: CALL_OW 112
// ComTurnUnit ( ruDisturb , Kaia ) ;
26931: LD_EXP 66
26935: PPUSH
26936: LD_EXP 51
26940: PPUSH
26941: CALL_OW 119
// AddComTurnUnit ( Kaia , ruDisturb ) ;
26945: LD_EXP 51
26949: PPUSH
26950: LD_EXP 66
26954: PPUSH
26955: CALL_OW 179
// Say ( Kaia , DK-Assassin-1 ) ;
26959: LD_EXP 51
26963: PPUSH
26964: LD_STRING DK-Assassin-1
26966: PPUSH
26967: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-2 ) ;
26971: LD_EXP 66
26975: PPUSH
26976: LD_STRING DMcn-Assassin-2
26978: PPUSH
26979: CALL_OW 88
// Say ( Kaia , DK-Assassin-3 ) ;
26983: LD_EXP 51
26987: PPUSH
26988: LD_STRING DK-Assassin-3
26990: PPUSH
26991: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-4 ) ;
26995: LD_EXP 66
26999: PPUSH
27000: LD_STRING DMcn-Assassin-4
27002: PPUSH
27003: CALL_OW 88
// Say ( Kaia , DK-Assassin-5 ) ;
27007: LD_EXP 51
27011: PPUSH
27012: LD_STRING DK-Assassin-5
27014: PPUSH
27015: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-6 ) ;
27019: LD_EXP 66
27023: PPUSH
27024: LD_STRING DMcn-Assassin-6
27026: PPUSH
27027: CALL_OW 88
// SetSide ( Kaia , 3 ) ;
27031: LD_EXP 51
27035: PPUSH
27036: LD_INT 3
27038: PPUSH
27039: CALL_OW 235
// ComEnterUnit ( [ Kaia , ruDisturb ] , ruOutpost0 ) ;
27043: LD_EXP 51
27047: PUSH
27048: LD_EXP 66
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PPUSH
27057: LD_INT 6
27059: PPUSH
27060: CALL_OW 120
// wait ( 0 0$5 ) ;
27064: LD_INT 175
27066: PPUSH
27067: CALL_OW 67
// Say ( Kaia , DK-Assassin-7 ) ;
27071: LD_EXP 51
27075: PPUSH
27076: LD_STRING DK-Assassin-7
27078: PPUSH
27079: CALL_OW 88
// Say ( ruDisturb , DMcn-Assassin-8 ) ;
27083: LD_EXP 66
27087: PPUSH
27088: LD_STRING DMcn-Assassin-8
27090: PPUSH
27091: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27095: LD_INT 10
27097: PPUSH
27098: CALL_OW 67
// Say ( Kaia , DK-Assassin-9 ) ;
27102: LD_EXP 51
27106: PPUSH
27107: LD_STRING DK-Assassin-9
27109: PPUSH
27110: CALL_OW 88
// wait ( 0 0$2 ) ;
27114: LD_INT 70
27116: PPUSH
27117: CALL_OW 67
// ComExitBuilding ( Kaia ) ;
27121: LD_EXP 51
27125: PPUSH
27126: CALL_OW 122
// RemoveUnit ( ruDisturb ) ;
27130: LD_EXP 66
27134: PPUSH
27135: CALL_OW 64
// SetSide ( Kaia , 2 ) ;
27139: LD_EXP 51
27143: PPUSH
27144: LD_INT 2
27146: PPUSH
27147: CALL_OW 235
// AddComMoveUnit ( Kaia , Heike ) ;
27151: LD_EXP 51
27155: PPUSH
27156: LD_EXP 46
27160: PPUSH
27161: CALL_OW 172
// Say ( Kaia , DK-Assasin-10 ) ;
27165: LD_EXP 51
27169: PPUSH
27170: LD_STRING DK-Assasin-10
27172: PPUSH
27173: CALL_OW 88
// InGameOff ;
27177: CALL_OW 9
// SetAchievement ( ACH_POKER ) ;
27181: LD_STRING ACH_POKER
27183: PPUSH
27184: CALL_OW 543
// ChangeMissionObjectives ( M2c-out ) ;
27188: LD_STRING M2c-out
27190: PPUSH
27191: CALL_OW 337
// wait ( 0 0$3 ) ;
27195: LD_INT 105
27197: PPUSH
27198: CALL_OW 67
// hasMuchin := false ;
27202: LD_ADDR_EXP 30
27206: PUSH
27207: LD_INT 0
27209: ST_TO_ADDR
// exit ;
27210: GO 27818
// end ; ChangeMissionObjectives ( M2c-out ) ;
27212: LD_STRING M2c-out
27214: PPUSH
27215: CALL_OW 337
// meetWithMuchin := true ;
27219: LD_ADDR_EXP 44
27223: PUSH
27224: LD_INT 1
27226: ST_TO_ADDR
// InGameOn ;
27227: CALL_OW 8
// Say ( ruDisturb , DMcn-Fail-1 ) ;
27231: LD_EXP 66
27235: PPUSH
27236: LD_STRING DMcn-Fail-1
27238: PPUSH
27239: CALL_OW 88
// ComMoveXY ( tmp , 114 , 17 ) ;
27243: LD_VAR 0 3
27247: PPUSH
27248: LD_INT 114
27250: PPUSH
27251: LD_INT 17
27253: PPUSH
27254: CALL_OW 111
// wait ( 0 0$1 ) ;
27258: LD_INT 35
27260: PPUSH
27261: CALL_OW 67
// async ;
27265: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27266: LD_EXP 66
27270: PPUSH
27271: LD_EXP 46
27275: PPUSH
27276: CALL_OW 112
// Say ( ruDisturb , DMcn-Fail-2 ) ;
27280: LD_EXP 66
27284: PPUSH
27285: LD_STRING DMcn-Fail-2
27287: PPUSH
27288: CALL_OW 88
// ComStop ( Heike ) ;
27292: LD_EXP 46
27296: PPUSH
27297: CALL_OW 141
// AddComTurnUnit ( Heike , ruDisturb ) ;
27301: LD_EXP 46
27305: PPUSH
27306: LD_EXP 66
27310: PPUSH
27311: CALL_OW 179
// sync ;
27315: SYNC
// Say ( Heike , DH-Fail-3 ) ;
27316: LD_EXP 46
27320: PPUSH
27321: LD_STRING DH-Fail-3
27323: PPUSH
27324: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-4 ) ;
27328: LD_EXP 66
27332: PPUSH
27333: LD_STRING DMcn-Fail-4
27335: PPUSH
27336: CALL_OW 88
// ComMoveXY ( [ Heike , ruDisturb ] , 41 , 19 ) ;
27340: LD_EXP 46
27344: PUSH
27345: LD_EXP 66
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PPUSH
27354: LD_INT 41
27356: PPUSH
27357: LD_INT 19
27359: PPUSH
27360: CALL_OW 111
// wait ( 0 0$2 ) ;
27364: LD_INT 70
27366: PPUSH
27367: CALL_OW 67
// ComMoveXY ( ruDisturb , 40 , 19 ) ;
27371: LD_EXP 66
27375: PPUSH
27376: LD_INT 40
27378: PPUSH
27379: LD_INT 19
27381: PPUSH
27382: CALL_OW 111
// ComMoveXY ( Heike , 43 , 21 ) ;
27386: LD_EXP 46
27390: PPUSH
27391: LD_INT 43
27393: PPUSH
27394: LD_INT 21
27396: PPUSH
27397: CALL_OW 111
// AddComTurnUnit ( ruDisturb , Heike ) ;
27401: LD_EXP 66
27405: PPUSH
27406: LD_EXP 46
27410: PPUSH
27411: CALL_OW 179
// AddComTurnUnit ( Heike , ruDisturb ) ;
27415: LD_EXP 46
27419: PPUSH
27420: LD_EXP 66
27424: PPUSH
27425: CALL_OW 179
// wait ( 0 0$2 ) ;
27429: LD_INT 70
27431: PPUSH
27432: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-5 ) ;
27436: LD_EXP 66
27440: PPUSH
27441: LD_STRING DMcn-Fail-5
27443: PPUSH
27444: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27448: LD_EXP 46
27452: PPUSH
27453: CALL_OW 87
// wait ( 0 0$2 ) ;
27457: LD_INT 70
27459: PPUSH
27460: CALL_OW 67
// Say ( ruDisturb , DMcn-Fail-6 ) ;
27464: LD_EXP 66
27468: PPUSH
27469: LD_STRING DMcn-Fail-6
27471: PPUSH
27472: CALL_OW 88
// CenterNowOnUnits ( Heike ) ;
27476: LD_EXP 46
27480: PPUSH
27481: CALL_OW 87
// repeat wait ( 0 0$1 ) ;
27485: LD_INT 35
27487: PPUSH
27488: CALL_OW 67
// until IsAt ( Heike , 43 , 21 ) ;
27492: LD_EXP 46
27496: PPUSH
27497: LD_INT 43
27499: PPUSH
27500: LD_INT 21
27502: PPUSH
27503: CALL_OW 307
27507: IFFALSE 27485
// CenterNowOnUnits ( Heike ) ;
27509: LD_EXP 46
27513: PPUSH
27514: CALL_OW 87
// case Query ( MuchinQuestion ) of 1 :
27518: LD_STRING MuchinQuestion
27520: PPUSH
27521: CALL_OW 97
27525: PUSH
27526: LD_INT 1
27528: DOUBLE
27529: EQUAL
27530: IFTRUE 27534
27532: GO 27634
27534: POP
// begin Say ( ruDisturb , DMcn-Fail-7 ) ;
27535: LD_EXP 66
27539: PPUSH
27540: LD_STRING DMcn-Fail-7
27542: PPUSH
27543: CALL_OW 88
// Say ( Heike , DH-Fail-8 ) ;
27547: LD_EXP 46
27551: PPUSH
27552: LD_STRING DH-Fail-8
27554: PPUSH
27555: CALL_OW 88
// wait ( 0 0$0.3 ) ;
27559: LD_INT 10
27561: PPUSH
27562: CALL_OW 67
// Say ( Heike , DH-Fail-9 ) ;
27566: LD_EXP 46
27570: PPUSH
27571: LD_STRING DH-Fail-9
27573: PPUSH
27574: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27578: LD_EXP 46
27582: PPUSH
27583: LD_STRING DH-Fail-10
27585: PPUSH
27586: CALL_OW 88
// Say ( ruDisturb , DMcn-Fail-11 ) ;
27590: LD_EXP 66
27594: PPUSH
27595: LD_STRING DMcn-Fail-11
27597: PPUSH
27598: CALL_OW 88
// ComAttackUnit ( ruDisturb , Heike ) ;
27602: LD_EXP 66
27606: PPUSH
27607: LD_EXP 46
27611: PPUSH
27612: CALL_OW 115
// wait ( 0 0$2 ) ;
27616: LD_INT 70
27618: PPUSH
27619: CALL_OW 67
// KillUnit ( Heike ) ;
27623: LD_EXP 46
27627: PPUSH
27628: CALL_OW 66
// end ; 2 :
27632: GO 27814
27634: LD_INT 2
27636: DOUBLE
27637: EQUAL
27638: IFTRUE 27642
27640: GO 27813
27642: POP
// begin Say ( Heike , DH-Fail-a-8 ) ;
27643: LD_EXP 46
27647: PPUSH
27648: LD_STRING DH-Fail-a-8
27650: PPUSH
27651: CALL_OW 88
// Say ( Heike , DH-Fail-a-9 ) ;
27655: LD_EXP 46
27659: PPUSH
27660: LD_STRING DH-Fail-a-9
27662: PPUSH
27663: CALL_OW 88
// Say ( Heike , DH-Fail-10 ) ;
27667: LD_EXP 46
27671: PPUSH
27672: LD_STRING DH-Fail-10
27674: PPUSH
27675: CALL_OW 88
// Say ( Heike , DH-Fail-a-11 ) ;
27679: LD_EXP 46
27683: PPUSH
27684: LD_STRING DH-Fail-a-11
27686: PPUSH
27687: CALL_OW 88
// async ;
27691: ASYNC
// ComMoveUnit ( ruDisturb , Heike ) ;
27692: LD_EXP 66
27696: PPUSH
27697: LD_EXP 46
27701: PPUSH
27702: CALL_OW 112
// AddComTurnUnit ( ruDisturb , Heike ) ;
27706: LD_EXP 66
27710: PPUSH
27711: LD_EXP 46
27715: PPUSH
27716: CALL_OW 179
// Say ( ruDisturb , DH-Fail-12 ) ;
27720: LD_EXP 66
27724: PPUSH
27725: LD_STRING DH-Fail-12
27727: PPUSH
27728: CALL_OW 88
// sync ;
27732: SYNC
// wait ( 0 0$1 ) ;
27733: LD_INT 35
27735: PPUSH
27736: CALL_OW 67
// Say ( Heike , DH-Fail-a-13 ) ;
27740: LD_EXP 46
27744: PPUSH
27745: LD_STRING DH-Fail-a-13
27747: PPUSH
27748: CALL_OW 88
// SetLives ( ruDisturb , 100 ) ;
27752: LD_EXP 66
27756: PPUSH
27757: LD_INT 100
27759: PPUSH
27760: CALL_OW 234
// ForceSay ( ruDisturb , DMcn-Fail-a-14 ) ;
27764: LD_EXP 66
27768: PPUSH
27769: LD_STRING DMcn-Fail-a-14
27771: PPUSH
27772: CALL_OW 91
// KillUnit ( ruDisturb ) ;
27776: LD_EXP 66
27780: PPUSH
27781: CALL_OW 66
// wait ( 0 0$1 ) ;
27785: LD_INT 35
27787: PPUSH
27788: CALL_OW 67
// Say ( Heike , DH-Fail-a-15 ) ;
27792: LD_EXP 46
27796: PPUSH
27797: LD_STRING DH-Fail-a-15
27799: PPUSH
27800: CALL_OW 88
// YouLost ( FailMuchin ) ;
27804: LD_STRING FailMuchin
27806: PPUSH
27807: CALL_OW 104
// end ; end ;
27811: GO 27814
27813: POP
// InGameOff ;
27814: CALL_OW 9
// end ;
27818: PPOPN 4
27820: END
// every 0 0$1 trigger FilterUnitsInArea ( baseOutsideBorderArea , [ f_side , 2 ] ) and not meetWithMuchin and hasMuchin marked gameStartEvent do
27821: LD_INT 23
27823: PPUSH
27824: LD_INT 22
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: EMPTY
27831: LIST
27832: LIST
27833: PPUSH
27834: CALL_OW 70
27838: PUSH
27839: LD_EXP 44
27843: NOT
27844: AND
27845: PUSH
27846: LD_EXP 30
27850: AND
27851: IFFALSE 27864
27853: GO 27855
27855: DISABLE
// isAlarm := true ; end_of_file
27856: LD_ADDR_EXP 17
27860: PUSH
27861: LD_INT 1
27863: ST_TO_ADDR
27864: END
// every 0 0$1 marked gameStartEvent do
27865: GO 27867
27867: DISABLE
// begin enable ;
27868: ENABLE
// if not contactWithAmerican then
27869: LD_EXP 25
27873: NOT
27874: IFFALSE 27919
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ] else
27876: LD_ADDR_OWVAR 47
27880: PUSH
27881: LD_STRING #X108-1
27883: PUSH
27884: LD_INT 22
27886: PUSH
27887: LD_INT 5
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 21
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PPUSH
27908: CALL_OW 69
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: ST_TO_ADDR
27917: GO 28008
// display_strings := [ #X108-1 , FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , #X108-2 , FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ] ;
27919: LD_ADDR_OWVAR 47
27923: PUSH
27924: LD_STRING #X108-1
27926: PUSH
27927: LD_INT 22
27929: PUSH
27930: LD_INT 5
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 21
27939: PUSH
27940: LD_INT 1
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 50
27949: PUSH
27950: EMPTY
27951: LIST
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: PPUSH
27958: CALL_OW 69
27962: PUSH
27963: LD_STRING #X108-2
27965: PUSH
27966: LD_INT 22
27968: PUSH
27969: LD_INT 4
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 21
27978: PUSH
27979: LD_INT 1
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 50
27988: PUSH
27989: EMPTY
27990: LIST
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: ST_TO_ADDR
// end ; end_of_file
28008: END
// every 0 0$2 trigger IsInArea ( Heike , finalArea ) do
28009: LD_EXP 46
28013: PPUSH
28014: LD_INT 59
28016: PPUSH
28017: CALL_OW 308
28021: IFFALSE 28143
28023: GO 28025
28025: DISABLE
// begin Query ( FinalInfo ) ;
28026: LD_STRING FinalInfo
28028: PPUSH
28029: CALL_OW 97
// SetAreaMapShow ( finalArea , 1 ) ;
28033: LD_INT 59
28035: PPUSH
28036: LD_INT 1
28038: PPUSH
28039: CALL_OW 424
// end_the_mission_allowed := true ;
28043: LD_ADDR_OWVAR 57
28047: PUSH
28048: LD_INT 1
28050: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28051: LD_INT 35
28053: PPUSH
28054: CALL_OW 67
// until Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_inarea , finalArea ] ] ) ) = Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ) ;
28058: LD_INT 22
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 21
28070: PUSH
28071: LD_INT 1
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PUSH
28078: LD_INT 95
28080: PUSH
28081: LD_INT 59
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: LIST
28092: PPUSH
28093: CALL_OW 69
28097: PPUSH
28098: CALL 31410 0 1
28102: PUSH
28103: LD_INT 22
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 21
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PPUSH
28127: CALL_OW 69
28131: PPUSH
28132: CALL 31410 0 1
28136: EQUAL
28137: IFFALSE 28051
// EndMission ;
28139: CALL 28151 0 0
// end ;
28143: END
// on EndTheMissionRaised ( e ) do begin EndMission ;
28144: CALL 28151 0 0
// end ;
28148: PPOPN 1
28150: END
// function EndMission ; var tmp ; begin
28151: LD_INT 0
28153: PPUSH
28154: PPUSH
// PlayOriginalMusic ;
28155: CALL 92970 0 0
// if not IsInArea ( Heike , finalArea ) then
28159: LD_EXP 46
28163: PPUSH
28164: LD_INT 59
28166: PPUSH
28167: CALL_OW 308
28171: NOT
28172: IFFALSE 28183
// begin Query ( HeikeOutOfArea ) ;
28174: LD_STRING HeikeOutOfArea
28176: PPUSH
28177: CALL_OW 97
// exit ;
28181: GO 29106
// end ; if not IsOk ( Heike ) then
28183: LD_EXP 46
28187: PPUSH
28188: CALL_OW 302
28192: NOT
28193: IFFALSE 28204
// begin Query ( HeikeIsHurt ) ;
28195: LD_STRING HeikeIsHurt
28197: PPUSH
28198: CALL_OW 97
// exit ;
28202: GO 29106
// end ; if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ) < 6 then
28204: LD_INT 22
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 21
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 50
28226: PUSH
28227: EMPTY
28228: LIST
28229: PUSH
28230: LD_INT 95
28232: PUSH
28233: LD_INT 59
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: PPUSH
28251: CALL 31410 0 1
28255: PUSH
28256: LD_INT 6
28258: LESS
28259: IFFALSE 28268
// YouLost ( NeedMorePep ) ;
28261: LD_STRING NeedMorePep
28263: PPUSH
28264: CALL_OW 104
// if tick < 20 20$00 then
28268: LD_OWVAR 1
28272: PUSH
28273: LD_INT 42000
28275: LESS
28276: IFFALSE 28285
// SetAchievement ( ACH_HSPEED_8 ) ;
28278: LD_STRING ACH_HSPEED_8
28280: PPUSH
28281: CALL_OW 543
// if FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) = 0 and loseCounter = 0 then
28285: LD_INT 22
28287: PUSH
28288: LD_INT 5
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 21
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PPUSH
28309: CALL_OW 69
28313: PUSH
28314: LD_INT 0
28316: EQUAL
28317: PUSH
28318: LD_EXP 32
28322: PUSH
28323: LD_INT 0
28325: EQUAL
28326: AND
28327: IFFALSE 28341
// AddMedal ( med1 , 1 ) else
28329: LD_STRING med1
28331: PPUSH
28332: LD_INT 1
28334: PPUSH
28335: CALL_OW 101
28339: GO 28352
// AddMedal ( med1 , - 1 ) ;
28341: LD_STRING med1
28343: PPUSH
28344: LD_INT 1
28346: NEG
28347: PPUSH
28348: CALL_OW 101
// if explosivePlantedList >= 3 then
28352: LD_EXP 29
28356: PUSH
28357: LD_INT 3
28359: GREATEREQUAL
28360: IFFALSE 28374
// AddMedal ( med2 , 1 ) else
28362: LD_STRING med2
28364: PPUSH
28365: LD_INT 1
28367: PPUSH
28368: CALL_OW 101
28372: GO 28408
// if explosivePlantedList < 3 then
28374: LD_EXP 29
28378: PUSH
28379: LD_INT 3
28381: LESS
28382: IFFALSE 28397
// AddMedal ( med2 , - 2 ) else
28384: LD_STRING med2
28386: PPUSH
28387: LD_INT 2
28389: NEG
28390: PPUSH
28391: CALL_OW 101
28395: GO 28408
// AddMedal ( med2 , - 1 ) ;
28397: LD_STRING med2
28399: PPUSH
28400: LD_INT 1
28402: NEG
28403: PPUSH
28404: CALL_OW 101
// if GetTech ( tech_stimDrugs , 2 ) = state_researched then
28408: LD_INT 5
28410: PPUSH
28411: LD_INT 2
28413: PPUSH
28414: CALL_OW 321
28418: PUSH
28419: LD_INT 2
28421: EQUAL
28422: IFFALSE 28436
// AddMedal ( med3 , 1 ) else
28424: LD_STRING med3
28426: PPUSH
28427: LD_INT 1
28429: PPUSH
28430: CALL_OW 101
28434: GO 28447
// AddMedal ( med3 , - 1 ) ;
28436: LD_STRING med3
28438: PPUSH
28439: LD_INT 1
28441: NEG
28442: PPUSH
28443: CALL_OW 101
// GiveMedals ( MAIN ) ;
28447: LD_STRING MAIN
28449: PPUSH
28450: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_inarea , finalArea ] ] ) ;
28454: LD_ADDR_VAR 0 2
28458: PUSH
28459: LD_INT 22
28461: PUSH
28462: LD_INT 2
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 21
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PUSH
28479: LD_INT 50
28481: PUSH
28482: EMPTY
28483: LIST
28484: PUSH
28485: LD_INT 95
28487: PUSH
28488: LD_INT 59
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: PPUSH
28501: CALL_OW 69
28505: ST_TO_ADDR
// RewardPeople ( UnitFilter ( tmp , [ f_nation , 2 ] ) ) ;
28506: LD_VAR 0 2
28510: PPUSH
28511: LD_INT 23
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PPUSH
28521: CALL_OW 72
28525: PPUSH
28526: CALL_OW 43
// if Doug and Doug in tmp then
28530: LD_EXP 60
28534: PUSH
28535: LD_EXP 60
28539: PUSH
28540: LD_VAR 0 2
28544: IN
28545: AND
28546: IFFALSE 28560
// SaveCharacters ( Doug , 08_UsCommander ) ;
28548: LD_EXP 60
28552: PPUSH
28553: LD_STRING 08_UsCommander
28555: PPUSH
28556: CALL_OW 38
// if Harris and Harris in tmp then
28560: LD_EXP 59
28564: PUSH
28565: LD_EXP 59
28569: PUSH
28570: LD_VAR 0 2
28574: IN
28575: AND
28576: IFFALSE 28590
// SaveCharacters ( Harris , 08_Harris ) ;
28578: LD_EXP 59
28582: PPUSH
28583: LD_STRING 08_Harris
28585: PPUSH
28586: CALL_OW 38
// SaveCharacters ( UnitFilter ( tmp , [ f_nation , 1 ] ) diff [ Doug , Harris ] , 08_Americans ) ;
28590: LD_VAR 0 2
28594: PPUSH
28595: LD_INT 23
28597: PUSH
28598: LD_INT 1
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PPUSH
28605: CALL_OW 72
28609: PUSH
28610: LD_EXP 60
28614: PUSH
28615: LD_EXP 59
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: DIFF
28624: PPUSH
28625: LD_STRING 08_Americans
28627: PPUSH
28628: CALL_OW 38
// if GetNation ( Heike ) = nation_russian then
28632: LD_EXP 46
28636: PPUSH
28637: CALL_OW 248
28641: PUSH
28642: LD_INT 3
28644: EQUAL
28645: IFFALSE 28675
// begin CopySkills ( Heike , HeikeTmp ) ;
28647: LD_EXP 46
28651: PPUSH
28652: LD_EXP 62
28656: PPUSH
28657: CALL_OW 510
// SaveCharacters ( HeikeTmp , 08_Heike ) ;
28661: LD_EXP 62
28665: PPUSH
28666: LD_STRING 08_Heike
28668: PPUSH
28669: CALL_OW 38
// end else
28673: GO 28687
// SaveCharacters ( Heike , 08_Heike ) ;
28675: LD_EXP 46
28679: PPUSH
28680: LD_STRING 08_Heike
28682: PPUSH
28683: CALL_OW 38
// if Aviradze and Aviradze in tmp then
28687: LD_EXP 56
28691: PUSH
28692: LD_EXP 56
28696: PUSH
28697: LD_VAR 0 2
28701: IN
28702: AND
28703: IFFALSE 28717
// SaveCharacters ( Aviradze , 08_Aviradze ) ;
28705: LD_EXP 56
28709: PPUSH
28710: LD_STRING 08_Aviradze
28712: PPUSH
28713: CALL_OW 38
// if Ibrahim and Ibrahim in tmp then
28717: LD_EXP 49
28721: PUSH
28722: LD_EXP 49
28726: PUSH
28727: LD_VAR 0 2
28731: IN
28732: AND
28733: IFFALSE 28747
// SaveCharacters ( Ibrahim , 08_Ibrahim ) ;
28735: LD_EXP 49
28739: PPUSH
28740: LD_STRING 08_Ibrahim
28742: PPUSH
28743: CALL_OW 38
// if Kamil and Kamil in tmp then
28747: LD_EXP 50
28751: PUSH
28752: LD_EXP 50
28756: PUSH
28757: LD_VAR 0 2
28761: IN
28762: AND
28763: IFFALSE 28777
// SaveCharacters ( Kamil , 08_Kamil ) ;
28765: LD_EXP 50
28769: PPUSH
28770: LD_STRING 08_Kamil
28772: PPUSH
28773: CALL_OW 38
// if Sophia and Sophia in tmp then
28777: LD_EXP 52
28781: PUSH
28782: LD_EXP 52
28786: PUSH
28787: LD_VAR 0 2
28791: IN
28792: AND
28793: IFFALSE 28807
// SaveCharacters ( Sophia , 08_Sophia ) ;
28795: LD_EXP 52
28799: PPUSH
28800: LD_STRING 08_Sophia
28802: PPUSH
28803: CALL_OW 38
// if Kaia and Kaia in tmp then
28807: LD_EXP 51
28811: PUSH
28812: LD_EXP 51
28816: PUSH
28817: LD_VAR 0 2
28821: IN
28822: AND
28823: IFFALSE 28837
// SaveCharacters ( Kaia , 08_Kaia ) ;
28825: LD_EXP 51
28829: PPUSH
28830: LD_STRING 08_Kaia
28832: PPUSH
28833: CALL_OW 38
// if Givi and Givi in tmp then
28837: LD_EXP 47
28841: PUSH
28842: LD_EXP 47
28846: PUSH
28847: LD_VAR 0 2
28851: IN
28852: AND
28853: IFFALSE 28910
// if GetNation ( Givi ) = nation_russian then
28855: LD_EXP 47
28859: PPUSH
28860: CALL_OW 248
28864: PUSH
28865: LD_INT 3
28867: EQUAL
28868: IFFALSE 28898
// begin CopySkills ( Givi , GiviTmp ) ;
28870: LD_EXP 47
28874: PPUSH
28875: LD_EXP 63
28879: PPUSH
28880: CALL_OW 510
// SaveCharacters ( GiviTmp , 08_Givi ) ;
28884: LD_EXP 63
28888: PPUSH
28889: LD_STRING 08_Givi
28891: PPUSH
28892: CALL_OW 38
// end else
28896: GO 28910
// SaveCharacters ( Givi , 08_Givi ) ;
28898: LD_EXP 47
28902: PPUSH
28903: LD_STRING 08_Givi
28905: PPUSH
28906: CALL_OW 38
// if Mike and Mike in tmp then
28910: LD_EXP 48
28914: PUSH
28915: LD_EXP 48
28919: PUSH
28920: LD_VAR 0 2
28924: IN
28925: AND
28926: IFFALSE 28940
// SaveCharacters ( Mike , 08_Mike ) ;
28928: LD_EXP 48
28932: PPUSH
28933: LD_STRING 08_Mike
28935: PPUSH
28936: CALL_OW 38
// if Markov and Markov in tmp then
28940: LD_EXP 53
28944: PUSH
28945: LD_EXP 53
28949: PUSH
28950: LD_VAR 0 2
28954: IN
28955: AND
28956: IFFALSE 28970
// SaveCharacters ( Markov , 08_Markov ) ;
28958: LD_EXP 53
28962: PPUSH
28963: LD_STRING 08_Markov
28965: PPUSH
28966: CALL_OW 38
// if Kurt and Kurt in tmp then
28970: LD_EXP 55
28974: PUSH
28975: LD_EXP 55
28979: PUSH
28980: LD_VAR 0 2
28984: IN
28985: AND
28986: IFFALSE 29000
// SaveCharacters ( Kurt , 08_Kurt ) ;
28988: LD_EXP 55
28992: PPUSH
28993: LD_STRING 08_Kurt
28995: PPUSH
28996: CALL_OW 38
// if Olaf and Olaf in tmp then
29000: LD_EXP 54
29004: PUSH
29005: LD_EXP 54
29009: PUSH
29010: LD_VAR 0 2
29014: IN
29015: AND
29016: IFFALSE 29030
// SaveCharacters ( Olaf , 08_Olaf ) ;
29018: LD_EXP 54
29022: PPUSH
29023: LD_STRING 08_Olaf
29025: PPUSH
29026: CALL_OW 38
// if UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) then
29030: LD_EXP 57
29034: PPUSH
29035: LD_INT 95
29037: PUSH
29038: LD_INT 59
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 50
29047: PUSH
29048: EMPTY
29049: LIST
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PPUSH
29055: CALL_OW 72
29059: IFFALSE 29098
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ [ f_inarea , finalArea ] , [ f_ok ] ] ) , 08_others ) ;
29061: LD_EXP 57
29065: PPUSH
29066: LD_INT 95
29068: PUSH
29069: LD_INT 59
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 50
29078: PUSH
29079: EMPTY
29080: LIST
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 72
29090: PPUSH
29091: LD_STRING 08_others
29093: PPUSH
29094: CALL_OW 38
// YouWin ;
29098: CALL_OW 103
// DialogueOff ;
29102: CALL_OW 7
// end ; end_of_file
29106: LD_VAR 0 1
29110: RET
// every 2 2$00 trigger hasNormalScene marked gameStartEvent do var i ;
29111: LD_EXP 5
29115: IFFALSE 29305
29117: GO 29119
29119: DISABLE
29120: LD_INT 0
29122: PPUSH
// begin wait ( rand ( 0 0$1 , 1 1$00 ) ) ;
29123: LD_INT 35
29125: PPUSH
29126: LD_INT 2100
29128: PPUSH
29129: CALL_OW 12
29133: PPUSH
29134: CALL_OW 67
// StopOriginalMusic ;
29138: CALL 92955 0 0
// weatherBusy := true ;
29142: LD_ADDR_EXP 37
29146: PUSH
29147: LD_INT 1
29149: ST_TO_ADDR
// for i := 1 to 3 do
29150: LD_ADDR_VAR 0 1
29154: PUSH
29155: DOUBLE
29156: LD_INT 1
29158: DEC
29159: ST_TO_ADDR
29160: LD_INT 3
29162: PUSH
29163: FOR_TO
29164: IFFALSE 29198
// begin SetWeather ( 1 , 100 + 100 * i , 60 ) ;
29166: LD_INT 1
29168: PPUSH
29169: LD_INT 100
29171: PUSH
29172: LD_INT 100
29174: PUSH
29175: LD_VAR 0 1
29179: MUL
29180: PLUS
29181: PPUSH
29182: LD_INT 60
29184: PPUSH
29185: CALL_OW 550
// wait ( 0 0$2 ) ;
29189: LD_INT 70
29191: PPUSH
29192: CALL_OW 67
// end ;
29196: GO 29163
29198: POP
29199: POP
// PlayCustomMusic ( ArStormRain.wav , OW_CUSTOM_COMMAND(103); ) ;
29200: LD_STRING ArStormRain.wav
29202: PPUSH
29203: LD_STRING OW_CUSTOM_COMMAND(103);
29205: PPUSH
29206: CALL 92985 0 2
// wait ( 0 0$3 ) ;
29210: LD_INT 105
29212: PPUSH
29213: CALL_OW 67
// SetWeather ( 1 , 900 , 120 ) ;
29217: LD_INT 1
29219: PPUSH
29220: LD_INT 900
29222: PPUSH
29223: LD_INT 120
29225: PPUSH
29226: CALL_OW 550
// wait ( 0 0$10 ) ;
29230: LD_INT 350
29232: PPUSH
29233: CALL_OW 67
// SetWeather ( 1 , 1500 , 300 ) ;
29237: LD_INT 1
29239: PPUSH
29240: LD_INT 1500
29242: PPUSH
29243: LD_INT 300
29245: PPUSH
29246: CALL_OW 550
// repeat wait ( 0 0$1 ) ;
29250: LD_INT 35
29252: PPUSH
29253: CALL_OW 67
// until not weatherBusy ;
29257: LD_EXP 37
29261: NOT
29262: IFFALSE 29250
// SetWeather ( 0 , 0 , 0 ) ;
29264: LD_INT 0
29266: PPUSH
29267: LD_INT 0
29269: PPUSH
29270: LD_INT 0
29272: PPUSH
29273: CALL_OW 550
// wait ( 5 5$00 ) ;
29277: LD_INT 10500
29279: PPUSH
29280: CALL_OW 67
// PlayCustomMusic ( ArStormNormal.wav , OW_CUSTOM_COMMAND(103); ) ;
29284: LD_STRING ArStormNormal.wav
29286: PPUSH
29287: LD_STRING OW_CUSTOM_COMMAND(103);
29289: PPUSH
29290: CALL 92985 0 2
// wait ( 5 5$00 ) ;
29294: LD_INT 10500
29296: PPUSH
29297: CALL_OW 67
// PlayOriginalMusic ;
29301: CALL 92970 0 0
// end ; end_of_file
29305: PPOPN 1
29307: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
// if exist_mode then
29312: LD_VAR 0 2
29316: IFFALSE 29341
// unit := CreateCharacter ( prefix & ident ) else
29318: LD_ADDR_VAR 0 5
29322: PUSH
29323: LD_VAR 0 3
29327: PUSH
29328: LD_VAR 0 1
29332: STR
29333: PPUSH
29334: CALL_OW 34
29338: ST_TO_ADDR
29339: GO 29356
// unit := NewCharacter ( ident ) ;
29341: LD_ADDR_VAR 0 5
29345: PUSH
29346: LD_VAR 0 1
29350: PPUSH
29351: CALL_OW 25
29355: ST_TO_ADDR
// result := unit ;
29356: LD_ADDR_VAR 0 4
29360: PUSH
29361: LD_VAR 0 5
29365: ST_TO_ADDR
// end ;
29366: LD_VAR 0 4
29370: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
// if not side or not nation then
29375: LD_VAR 0 1
29379: NOT
29380: PUSH
29381: LD_VAR 0 2
29385: NOT
29386: OR
29387: IFFALSE 29391
// exit ;
29389: GO 30159
// case nation of nation_american :
29391: LD_VAR 0 2
29395: PUSH
29396: LD_INT 1
29398: DOUBLE
29399: EQUAL
29400: IFTRUE 29404
29402: GO 29618
29404: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29405: LD_ADDR_VAR 0 4
29409: PUSH
29410: LD_INT 35
29412: PUSH
29413: LD_INT 45
29415: PUSH
29416: LD_INT 46
29418: PUSH
29419: LD_INT 47
29421: PUSH
29422: LD_INT 82
29424: PUSH
29425: LD_INT 83
29427: PUSH
29428: LD_INT 84
29430: PUSH
29431: LD_INT 85
29433: PUSH
29434: LD_INT 86
29436: PUSH
29437: LD_INT 1
29439: PUSH
29440: LD_INT 2
29442: PUSH
29443: LD_INT 6
29445: PUSH
29446: LD_INT 15
29448: PUSH
29449: LD_INT 16
29451: PUSH
29452: LD_INT 7
29454: PUSH
29455: LD_INT 12
29457: PUSH
29458: LD_INT 13
29460: PUSH
29461: LD_INT 10
29463: PUSH
29464: LD_INT 14
29466: PUSH
29467: LD_INT 20
29469: PUSH
29470: LD_INT 21
29472: PUSH
29473: LD_INT 22
29475: PUSH
29476: LD_INT 25
29478: PUSH
29479: LD_INT 32
29481: PUSH
29482: LD_INT 27
29484: PUSH
29485: LD_INT 36
29487: PUSH
29488: LD_INT 69
29490: PUSH
29491: LD_INT 39
29493: PUSH
29494: LD_INT 34
29496: PUSH
29497: LD_INT 40
29499: PUSH
29500: LD_INT 48
29502: PUSH
29503: LD_INT 49
29505: PUSH
29506: LD_INT 50
29508: PUSH
29509: LD_INT 51
29511: PUSH
29512: LD_INT 52
29514: PUSH
29515: LD_INT 53
29517: PUSH
29518: LD_INT 54
29520: PUSH
29521: LD_INT 55
29523: PUSH
29524: LD_INT 56
29526: PUSH
29527: LD_INT 57
29529: PUSH
29530: LD_INT 58
29532: PUSH
29533: LD_INT 59
29535: PUSH
29536: LD_INT 60
29538: PUSH
29539: LD_INT 61
29541: PUSH
29542: LD_INT 62
29544: PUSH
29545: LD_INT 80
29547: PUSH
29548: LD_INT 82
29550: PUSH
29551: LD_INT 83
29553: PUSH
29554: LD_INT 84
29556: PUSH
29557: LD_INT 85
29559: PUSH
29560: LD_INT 86
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
29616: GO 30083
29618: LD_INT 2
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29852
29626: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29627: LD_ADDR_VAR 0 4
29631: PUSH
29632: LD_INT 35
29634: PUSH
29635: LD_INT 45
29637: PUSH
29638: LD_INT 46
29640: PUSH
29641: LD_INT 47
29643: PUSH
29644: LD_INT 82
29646: PUSH
29647: LD_INT 83
29649: PUSH
29650: LD_INT 84
29652: PUSH
29653: LD_INT 85
29655: PUSH
29656: LD_INT 87
29658: PUSH
29659: LD_INT 70
29661: PUSH
29662: LD_INT 1
29664: PUSH
29665: LD_INT 11
29667: PUSH
29668: LD_INT 3
29670: PUSH
29671: LD_INT 4
29673: PUSH
29674: LD_INT 5
29676: PUSH
29677: LD_INT 6
29679: PUSH
29680: LD_INT 15
29682: PUSH
29683: LD_INT 18
29685: PUSH
29686: LD_INT 7
29688: PUSH
29689: LD_INT 17
29691: PUSH
29692: LD_INT 8
29694: PUSH
29695: LD_INT 20
29697: PUSH
29698: LD_INT 21
29700: PUSH
29701: LD_INT 22
29703: PUSH
29704: LD_INT 72
29706: PUSH
29707: LD_INT 26
29709: PUSH
29710: LD_INT 69
29712: PUSH
29713: LD_INT 39
29715: PUSH
29716: LD_INT 40
29718: PUSH
29719: LD_INT 41
29721: PUSH
29722: LD_INT 42
29724: PUSH
29725: LD_INT 43
29727: PUSH
29728: LD_INT 48
29730: PUSH
29731: LD_INT 49
29733: PUSH
29734: LD_INT 50
29736: PUSH
29737: LD_INT 51
29739: PUSH
29740: LD_INT 52
29742: PUSH
29743: LD_INT 53
29745: PUSH
29746: LD_INT 54
29748: PUSH
29749: LD_INT 55
29751: PUSH
29752: LD_INT 56
29754: PUSH
29755: LD_INT 60
29757: PUSH
29758: LD_INT 61
29760: PUSH
29761: LD_INT 62
29763: PUSH
29764: LD_INT 66
29766: PUSH
29767: LD_INT 67
29769: PUSH
29770: LD_INT 68
29772: PUSH
29773: LD_INT 81
29775: PUSH
29776: LD_INT 82
29778: PUSH
29779: LD_INT 83
29781: PUSH
29782: LD_INT 84
29784: PUSH
29785: LD_INT 85
29787: PUSH
29788: LD_INT 87
29790: PUSH
29791: LD_INT 88
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: ST_TO_ADDR
29850: GO 30083
29852: LD_INT 3
29854: DOUBLE
29855: EQUAL
29856: IFTRUE 29860
29858: GO 30082
29860: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29861: LD_ADDR_VAR 0 4
29865: PUSH
29866: LD_INT 46
29868: PUSH
29869: LD_INT 47
29871: PUSH
29872: LD_INT 1
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: LD_INT 82
29880: PUSH
29881: LD_INT 83
29883: PUSH
29884: LD_INT 84
29886: PUSH
29887: LD_INT 85
29889: PUSH
29890: LD_INT 86
29892: PUSH
29893: LD_INT 11
29895: PUSH
29896: LD_INT 9
29898: PUSH
29899: LD_INT 20
29901: PUSH
29902: LD_INT 19
29904: PUSH
29905: LD_INT 21
29907: PUSH
29908: LD_INT 24
29910: PUSH
29911: LD_INT 22
29913: PUSH
29914: LD_INT 25
29916: PUSH
29917: LD_INT 28
29919: PUSH
29920: LD_INT 29
29922: PUSH
29923: LD_INT 30
29925: PUSH
29926: LD_INT 31
29928: PUSH
29929: LD_INT 37
29931: PUSH
29932: LD_INT 38
29934: PUSH
29935: LD_INT 32
29937: PUSH
29938: LD_INT 27
29940: PUSH
29941: LD_INT 33
29943: PUSH
29944: LD_INT 69
29946: PUSH
29947: LD_INT 39
29949: PUSH
29950: LD_INT 34
29952: PUSH
29953: LD_INT 40
29955: PUSH
29956: LD_INT 71
29958: PUSH
29959: LD_INT 23
29961: PUSH
29962: LD_INT 44
29964: PUSH
29965: LD_INT 48
29967: PUSH
29968: LD_INT 49
29970: PUSH
29971: LD_INT 50
29973: PUSH
29974: LD_INT 51
29976: PUSH
29977: LD_INT 52
29979: PUSH
29980: LD_INT 53
29982: PUSH
29983: LD_INT 54
29985: PUSH
29986: LD_INT 55
29988: PUSH
29989: LD_INT 56
29991: PUSH
29992: LD_INT 57
29994: PUSH
29995: LD_INT 58
29997: PUSH
29998: LD_INT 59
30000: PUSH
30001: LD_INT 63
30003: PUSH
30004: LD_INT 64
30006: PUSH
30007: LD_INT 65
30009: PUSH
30010: LD_INT 82
30012: PUSH
30013: LD_INT 83
30015: PUSH
30016: LD_INT 84
30018: PUSH
30019: LD_INT 85
30021: PUSH
30022: LD_INT 86
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
30080: GO 30083
30082: POP
// if state > - 1 and state < 3 then
30083: LD_VAR 0 3
30087: PUSH
30088: LD_INT 1
30090: NEG
30091: GREATER
30092: PUSH
30093: LD_VAR 0 3
30097: PUSH
30098: LD_INT 3
30100: LESS
30101: AND
30102: IFFALSE 30159
// for i in result do
30104: LD_ADDR_VAR 0 5
30108: PUSH
30109: LD_VAR 0 4
30113: PUSH
30114: FOR_IN
30115: IFFALSE 30157
// if GetTech ( i , side ) <> state then
30117: LD_VAR 0 5
30121: PPUSH
30122: LD_VAR 0 1
30126: PPUSH
30127: CALL_OW 321
30131: PUSH
30132: LD_VAR 0 3
30136: NONEQUAL
30137: IFFALSE 30155
// result := result diff i ;
30139: LD_ADDR_VAR 0 4
30143: PUSH
30144: LD_VAR 0 4
30148: PUSH
30149: LD_VAR 0 5
30153: DIFF
30154: ST_TO_ADDR
30155: GO 30114
30157: POP
30158: POP
// end ;
30159: LD_VAR 0 4
30163: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30164: LD_INT 0
30166: PPUSH
30167: PPUSH
30168: PPUSH
// result := true ;
30169: LD_ADDR_VAR 0 3
30173: PUSH
30174: LD_INT 1
30176: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30177: LD_ADDR_VAR 0 5
30181: PUSH
30182: LD_VAR 0 2
30186: PPUSH
30187: CALL_OW 480
30191: ST_TO_ADDR
// if not tmp then
30192: LD_VAR 0 5
30196: NOT
30197: IFFALSE 30201
// exit ;
30199: GO 30250
// for i in tmp do
30201: LD_ADDR_VAR 0 4
30205: PUSH
30206: LD_VAR 0 5
30210: PUSH
30211: FOR_IN
30212: IFFALSE 30248
// if GetTech ( i , side ) <> state_researched then
30214: LD_VAR 0 4
30218: PPUSH
30219: LD_VAR 0 1
30223: PPUSH
30224: CALL_OW 321
30228: PUSH
30229: LD_INT 2
30231: NONEQUAL
30232: IFFALSE 30246
// begin result := false ;
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_INT 0
30241: ST_TO_ADDR
// exit ;
30242: POP
30243: POP
30244: GO 30250
// end ;
30246: GO 30211
30248: POP
30249: POP
// end ;
30250: LD_VAR 0 3
30254: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30255: LD_INT 0
30257: PPUSH
30258: PPUSH
30259: PPUSH
30260: PPUSH
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
30266: PPUSH
30267: PPUSH
30268: PPUSH
30269: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30270: LD_VAR 0 1
30274: NOT
30275: PUSH
30276: LD_VAR 0 1
30280: PPUSH
30281: CALL_OW 257
30285: PUSH
30286: LD_INT 9
30288: NONEQUAL
30289: OR
30290: IFFALSE 30294
// exit ;
30292: GO 30867
// side := GetSide ( unit ) ;
30294: LD_ADDR_VAR 0 9
30298: PUSH
30299: LD_VAR 0 1
30303: PPUSH
30304: CALL_OW 255
30308: ST_TO_ADDR
// tech_space := tech_spacanom ;
30309: LD_ADDR_VAR 0 12
30313: PUSH
30314: LD_INT 29
30316: ST_TO_ADDR
// tech_time := tech_taurad ;
30317: LD_ADDR_VAR 0 13
30321: PUSH
30322: LD_INT 28
30324: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30325: LD_ADDR_VAR 0 11
30329: PUSH
30330: LD_VAR 0 1
30334: PPUSH
30335: CALL_OW 310
30339: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30340: LD_VAR 0 11
30344: PPUSH
30345: CALL_OW 247
30349: PUSH
30350: LD_INT 2
30352: EQUAL
30353: IFFALSE 30357
// exit ;
30355: GO 30867
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30357: LD_ADDR_VAR 0 8
30361: PUSH
30362: LD_INT 81
30364: PUSH
30365: LD_VAR 0 9
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 21
30379: PUSH
30380: LD_INT 3
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PPUSH
30395: CALL_OW 69
30399: ST_TO_ADDR
// if not tmp then
30400: LD_VAR 0 8
30404: NOT
30405: IFFALSE 30409
// exit ;
30407: GO 30867
// if in_unit then
30409: LD_VAR 0 11
30413: IFFALSE 30437
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30415: LD_ADDR_VAR 0 10
30419: PUSH
30420: LD_VAR 0 8
30424: PPUSH
30425: LD_VAR 0 11
30429: PPUSH
30430: CALL_OW 74
30434: ST_TO_ADDR
30435: GO 30457
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30437: LD_ADDR_VAR 0 10
30441: PUSH
30442: LD_VAR 0 8
30446: PPUSH
30447: LD_VAR 0 1
30451: PPUSH
30452: CALL_OW 74
30456: ST_TO_ADDR
// if not enemy then
30457: LD_VAR 0 10
30461: NOT
30462: IFFALSE 30466
// exit ;
30464: GO 30867
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30466: LD_VAR 0 11
30470: PUSH
30471: LD_VAR 0 11
30475: PPUSH
30476: LD_VAR 0 10
30480: PPUSH
30481: CALL_OW 296
30485: PUSH
30486: LD_INT 13
30488: GREATER
30489: AND
30490: PUSH
30491: LD_VAR 0 1
30495: PPUSH
30496: LD_VAR 0 10
30500: PPUSH
30501: CALL_OW 296
30505: PUSH
30506: LD_INT 12
30508: GREATER
30509: OR
30510: IFFALSE 30514
// exit ;
30512: GO 30867
// missile := [ 1 ] ;
30514: LD_ADDR_VAR 0 14
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: EMPTY
30523: LIST
30524: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30525: LD_VAR 0 9
30529: PPUSH
30530: LD_VAR 0 12
30534: PPUSH
30535: CALL_OW 325
30539: IFFALSE 30568
// missile := Replace ( missile , missile + 1 , 2 ) ;
30541: LD_ADDR_VAR 0 14
30545: PUSH
30546: LD_VAR 0 14
30550: PPUSH
30551: LD_VAR 0 14
30555: PUSH
30556: LD_INT 1
30558: PLUS
30559: PPUSH
30560: LD_INT 2
30562: PPUSH
30563: CALL_OW 1
30567: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30568: LD_VAR 0 9
30572: PPUSH
30573: LD_VAR 0 13
30577: PPUSH
30578: CALL_OW 325
30582: PUSH
30583: LD_VAR 0 10
30587: PPUSH
30588: CALL_OW 255
30592: PPUSH
30593: LD_VAR 0 13
30597: PPUSH
30598: CALL_OW 325
30602: NOT
30603: AND
30604: IFFALSE 30633
// missile := Replace ( missile , missile + 1 , 3 ) ;
30606: LD_ADDR_VAR 0 14
30610: PUSH
30611: LD_VAR 0 14
30615: PPUSH
30616: LD_VAR 0 14
30620: PUSH
30621: LD_INT 1
30623: PLUS
30624: PPUSH
30625: LD_INT 3
30627: PPUSH
30628: CALL_OW 1
30632: ST_TO_ADDR
// if missile < 2 then
30633: LD_VAR 0 14
30637: PUSH
30638: LD_INT 2
30640: LESS
30641: IFFALSE 30645
// exit ;
30643: GO 30867
// x := GetX ( enemy ) ;
30645: LD_ADDR_VAR 0 4
30649: PUSH
30650: LD_VAR 0 10
30654: PPUSH
30655: CALL_OW 250
30659: ST_TO_ADDR
// y := GetY ( enemy ) ;
30660: LD_ADDR_VAR 0 5
30664: PUSH
30665: LD_VAR 0 10
30669: PPUSH
30670: CALL_OW 251
30674: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30675: LD_ADDR_VAR 0 6
30679: PUSH
30680: LD_VAR 0 4
30684: PUSH
30685: LD_INT 1
30687: NEG
30688: PPUSH
30689: LD_INT 1
30691: PPUSH
30692: CALL_OW 12
30696: PLUS
30697: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30698: LD_ADDR_VAR 0 7
30702: PUSH
30703: LD_VAR 0 5
30707: PUSH
30708: LD_INT 1
30710: NEG
30711: PPUSH
30712: LD_INT 1
30714: PPUSH
30715: CALL_OW 12
30719: PLUS
30720: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30721: LD_VAR 0 6
30725: PPUSH
30726: LD_VAR 0 7
30730: PPUSH
30731: CALL_OW 488
30735: NOT
30736: IFFALSE 30758
// begin _x := x ;
30738: LD_ADDR_VAR 0 6
30742: PUSH
30743: LD_VAR 0 4
30747: ST_TO_ADDR
// _y := y ;
30748: LD_ADDR_VAR 0 7
30752: PUSH
30753: LD_VAR 0 5
30757: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30758: LD_ADDR_VAR 0 3
30762: PUSH
30763: LD_INT 1
30765: PPUSH
30766: LD_VAR 0 14
30770: PPUSH
30771: CALL_OW 12
30775: ST_TO_ADDR
// case i of 1 :
30776: LD_VAR 0 3
30780: PUSH
30781: LD_INT 1
30783: DOUBLE
30784: EQUAL
30785: IFTRUE 30789
30787: GO 30806
30789: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30790: LD_VAR 0 1
30794: PPUSH
30795: LD_VAR 0 10
30799: PPUSH
30800: CALL_OW 115
30804: GO 30867
30806: LD_INT 2
30808: DOUBLE
30809: EQUAL
30810: IFTRUE 30814
30812: GO 30836
30814: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30815: LD_VAR 0 1
30819: PPUSH
30820: LD_VAR 0 6
30824: PPUSH
30825: LD_VAR 0 7
30829: PPUSH
30830: CALL_OW 153
30834: GO 30867
30836: LD_INT 3
30838: DOUBLE
30839: EQUAL
30840: IFTRUE 30844
30842: GO 30866
30844: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30845: LD_VAR 0 1
30849: PPUSH
30850: LD_VAR 0 6
30854: PPUSH
30855: LD_VAR 0 7
30859: PPUSH
30860: CALL_OW 154
30864: GO 30867
30866: POP
// end ;
30867: LD_VAR 0 2
30871: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30872: LD_INT 0
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
// if not unit or not building then
30880: LD_VAR 0 1
30884: NOT
30885: PUSH
30886: LD_VAR 0 2
30890: NOT
30891: OR
30892: IFFALSE 30896
// exit ;
30894: GO 31054
// x := GetX ( building ) ;
30896: LD_ADDR_VAR 0 5
30900: PUSH
30901: LD_VAR 0 2
30905: PPUSH
30906: CALL_OW 250
30910: ST_TO_ADDR
// y := GetY ( building ) ;
30911: LD_ADDR_VAR 0 6
30915: PUSH
30916: LD_VAR 0 2
30920: PPUSH
30921: CALL_OW 251
30925: ST_TO_ADDR
// for i = 0 to 5 do
30926: LD_ADDR_VAR 0 4
30930: PUSH
30931: DOUBLE
30932: LD_INT 0
30934: DEC
30935: ST_TO_ADDR
30936: LD_INT 5
30938: PUSH
30939: FOR_TO
30940: IFFALSE 31052
// begin _x := ShiftX ( x , i , 3 ) ;
30942: LD_ADDR_VAR 0 7
30946: PUSH
30947: LD_VAR 0 5
30951: PPUSH
30952: LD_VAR 0 4
30956: PPUSH
30957: LD_INT 3
30959: PPUSH
30960: CALL_OW 272
30964: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30965: LD_ADDR_VAR 0 8
30969: PUSH
30970: LD_VAR 0 6
30974: PPUSH
30975: LD_VAR 0 4
30979: PPUSH
30980: LD_INT 3
30982: PPUSH
30983: CALL_OW 273
30987: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30988: LD_VAR 0 7
30992: PPUSH
30993: LD_VAR 0 8
30997: PPUSH
30998: CALL_OW 488
31002: NOT
31003: IFFALSE 31007
// continue ;
31005: GO 30939
// if HexInfo ( _x , _y ) = 0 then
31007: LD_VAR 0 7
31011: PPUSH
31012: LD_VAR 0 8
31016: PPUSH
31017: CALL_OW 428
31021: PUSH
31022: LD_INT 0
31024: EQUAL
31025: IFFALSE 31050
// begin ComMoveXY ( unit , _x , _y ) ;
31027: LD_VAR 0 1
31031: PPUSH
31032: LD_VAR 0 7
31036: PPUSH
31037: LD_VAR 0 8
31041: PPUSH
31042: CALL_OW 111
// exit ;
31046: POP
31047: POP
31048: GO 31054
// end ; end ;
31050: GO 30939
31052: POP
31053: POP
// end ;
31054: LD_VAR 0 3
31058: RET
// export function ScanBase ( side , base_area ) ; begin
31059: LD_INT 0
31061: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31062: LD_ADDR_VAR 0 3
31066: PUSH
31067: LD_VAR 0 2
31071: PPUSH
31072: LD_INT 81
31074: PUSH
31075: LD_VAR 0 1
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PPUSH
31084: CALL_OW 70
31088: ST_TO_ADDR
// end ;
31089: LD_VAR 0 3
31093: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31094: LD_INT 0
31096: PPUSH
31097: PPUSH
31098: PPUSH
31099: PPUSH
// result := false ;
31100: LD_ADDR_VAR 0 2
31104: PUSH
31105: LD_INT 0
31107: ST_TO_ADDR
// side := GetSide ( unit ) ;
31108: LD_ADDR_VAR 0 3
31112: PUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 255
31122: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31123: LD_ADDR_VAR 0 4
31127: PUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 248
31137: ST_TO_ADDR
// case nat of 1 :
31138: LD_VAR 0 4
31142: PUSH
31143: LD_INT 1
31145: DOUBLE
31146: EQUAL
31147: IFTRUE 31151
31149: GO 31162
31151: POP
// tech := tech_lassight ; 2 :
31152: LD_ADDR_VAR 0 5
31156: PUSH
31157: LD_INT 12
31159: ST_TO_ADDR
31160: GO 31201
31162: LD_INT 2
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31181
31170: POP
// tech := tech_mortar ; 3 :
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_INT 41
31178: ST_TO_ADDR
31179: GO 31201
31181: LD_INT 3
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 31200
31189: POP
// tech := tech_bazooka ; end ;
31190: LD_ADDR_VAR 0 5
31194: PUSH
31195: LD_INT 44
31197: ST_TO_ADDR
31198: GO 31201
31200: POP
// if Researched ( side , tech ) then
31201: LD_VAR 0 3
31205: PPUSH
31206: LD_VAR 0 5
31210: PPUSH
31211: CALL_OW 325
31215: IFFALSE 31242
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31217: LD_ADDR_VAR 0 2
31221: PUSH
31222: LD_INT 5
31224: PUSH
31225: LD_INT 8
31227: PUSH
31228: LD_INT 9
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: LIST
31235: PUSH
31236: LD_VAR 0 4
31240: ARRAY
31241: ST_TO_ADDR
// end ;
31242: LD_VAR 0 2
31246: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31247: LD_INT 0
31249: PPUSH
31250: PPUSH
31251: PPUSH
// if not mines then
31252: LD_VAR 0 2
31256: NOT
31257: IFFALSE 31261
// exit ;
31259: GO 31405
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31261: LD_ADDR_VAR 0 5
31265: PUSH
31266: LD_INT 81
31268: PUSH
31269: LD_VAR 0 1
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: LD_INT 21
31283: PUSH
31284: LD_INT 3
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PPUSH
31299: CALL_OW 69
31303: ST_TO_ADDR
// for i in mines do
31304: LD_ADDR_VAR 0 4
31308: PUSH
31309: LD_VAR 0 2
31313: PUSH
31314: FOR_IN
31315: IFFALSE 31403
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31317: LD_VAR 0 4
31321: PUSH
31322: LD_INT 1
31324: ARRAY
31325: PPUSH
31326: LD_VAR 0 4
31330: PUSH
31331: LD_INT 2
31333: ARRAY
31334: PPUSH
31335: CALL_OW 458
31339: NOT
31340: IFFALSE 31344
// continue ;
31342: GO 31314
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31344: LD_VAR 0 4
31348: PUSH
31349: LD_INT 1
31351: ARRAY
31352: PPUSH
31353: LD_VAR 0 4
31357: PUSH
31358: LD_INT 2
31360: ARRAY
31361: PPUSH
31362: CALL_OW 428
31366: PUSH
31367: LD_VAR 0 5
31371: IN
31372: IFFALSE 31401
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31374: LD_VAR 0 4
31378: PUSH
31379: LD_INT 1
31381: ARRAY
31382: PPUSH
31383: LD_VAR 0 4
31387: PUSH
31388: LD_INT 2
31390: ARRAY
31391: PPUSH
31392: LD_VAR 0 1
31396: PPUSH
31397: CALL_OW 456
// end ;
31401: GO 31314
31403: POP
31404: POP
// end ;
31405: LD_VAR 0 3
31409: RET
// export function Count ( array ) ; begin
31410: LD_INT 0
31412: PPUSH
// result := array + 0 ;
31413: LD_ADDR_VAR 0 2
31417: PUSH
31418: LD_VAR 0 1
31422: PUSH
31423: LD_INT 0
31425: PLUS
31426: ST_TO_ADDR
// end ;
31427: LD_VAR 0 2
31431: RET
// export function IsEmpty ( building ) ; begin
31432: LD_INT 0
31434: PPUSH
// if not building then
31435: LD_VAR 0 1
31439: NOT
31440: IFFALSE 31444
// exit ;
31442: GO 31487
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31444: LD_ADDR_VAR 0 2
31448: PUSH
31449: LD_VAR 0 1
31453: PUSH
31454: LD_INT 22
31456: PUSH
31457: LD_VAR 0 1
31461: PPUSH
31462: CALL_OW 255
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 58
31473: PUSH
31474: EMPTY
31475: LIST
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PPUSH
31481: CALL_OW 69
31485: IN
31486: ST_TO_ADDR
// end ;
31487: LD_VAR 0 2
31491: RET
// export function IsNotFull ( building ) ; var places ; begin
31492: LD_INT 0
31494: PPUSH
31495: PPUSH
// if not building then
31496: LD_VAR 0 1
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 31533
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31505: LD_ADDR_VAR 0 2
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: LD_INT 3
31517: PUSH
31518: LD_INT 62
31520: PUSH
31521: EMPTY
31522: LIST
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PPUSH
31528: CALL_OW 72
31532: ST_TO_ADDR
// end ;
31533: LD_VAR 0 2
31537: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31538: LD_INT 0
31540: PPUSH
31541: PPUSH
31542: PPUSH
31543: PPUSH
// tmp := [ ] ;
31544: LD_ADDR_VAR 0 3
31548: PUSH
31549: EMPTY
31550: ST_TO_ADDR
// list := [ ] ;
31551: LD_ADDR_VAR 0 5
31555: PUSH
31556: EMPTY
31557: ST_TO_ADDR
// for i = 16 to 25 do
31558: LD_ADDR_VAR 0 4
31562: PUSH
31563: DOUBLE
31564: LD_INT 16
31566: DEC
31567: ST_TO_ADDR
31568: LD_INT 25
31570: PUSH
31571: FOR_TO
31572: IFFALSE 31645
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31574: LD_ADDR_VAR 0 3
31578: PUSH
31579: LD_VAR 0 3
31583: PUSH
31584: LD_INT 22
31586: PUSH
31587: LD_VAR 0 1
31591: PPUSH
31592: CALL_OW 255
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: PUSH
31601: LD_INT 91
31603: PUSH
31604: LD_VAR 0 1
31608: PUSH
31609: LD_INT 6
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 30
31619: PUSH
31620: LD_VAR 0 4
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: PUSH
31634: EMPTY
31635: LIST
31636: PPUSH
31637: CALL_OW 69
31641: ADD
31642: ST_TO_ADDR
31643: GO 31571
31645: POP
31646: POP
// for i = 1 to tmp do
31647: LD_ADDR_VAR 0 4
31651: PUSH
31652: DOUBLE
31653: LD_INT 1
31655: DEC
31656: ST_TO_ADDR
31657: LD_VAR 0 3
31661: PUSH
31662: FOR_TO
31663: IFFALSE 31751
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31665: LD_ADDR_VAR 0 5
31669: PUSH
31670: LD_VAR 0 5
31674: PUSH
31675: LD_VAR 0 3
31679: PUSH
31680: LD_VAR 0 4
31684: ARRAY
31685: PPUSH
31686: CALL_OW 266
31690: PUSH
31691: LD_VAR 0 3
31695: PUSH
31696: LD_VAR 0 4
31700: ARRAY
31701: PPUSH
31702: CALL_OW 250
31706: PUSH
31707: LD_VAR 0 3
31711: PUSH
31712: LD_VAR 0 4
31716: ARRAY
31717: PPUSH
31718: CALL_OW 251
31722: PUSH
31723: LD_VAR 0 3
31727: PUSH
31728: LD_VAR 0 4
31732: ARRAY
31733: PPUSH
31734: CALL_OW 254
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: PUSH
31745: EMPTY
31746: LIST
31747: ADD
31748: ST_TO_ADDR
31749: GO 31662
31751: POP
31752: POP
// result := list ;
31753: LD_ADDR_VAR 0 2
31757: PUSH
31758: LD_VAR 0 5
31762: ST_TO_ADDR
// end ;
31763: LD_VAR 0 2
31767: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31768: LD_INT 0
31770: PPUSH
31771: PPUSH
31772: PPUSH
31773: PPUSH
31774: PPUSH
31775: PPUSH
31776: PPUSH
// if not factory then
31777: LD_VAR 0 1
31781: NOT
31782: IFFALSE 31786
// exit ;
31784: GO 32379
// if control = control_apeman then
31786: LD_VAR 0 4
31790: PUSH
31791: LD_INT 5
31793: EQUAL
31794: IFFALSE 31903
// begin tmp := UnitsInside ( factory ) ;
31796: LD_ADDR_VAR 0 8
31800: PUSH
31801: LD_VAR 0 1
31805: PPUSH
31806: CALL_OW 313
31810: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31811: LD_VAR 0 8
31815: PPUSH
31816: LD_INT 25
31818: PUSH
31819: LD_INT 12
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PPUSH
31826: CALL_OW 72
31830: NOT
31831: IFFALSE 31841
// control := control_manual ;
31833: LD_ADDR_VAR 0 4
31837: PUSH
31838: LD_INT 1
31840: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31841: LD_ADDR_VAR 0 8
31845: PUSH
31846: LD_VAR 0 1
31850: PPUSH
31851: CALL 31538 0 1
31855: ST_TO_ADDR
// if tmp then
31856: LD_VAR 0 8
31860: IFFALSE 31903
// begin for i in tmp do
31862: LD_ADDR_VAR 0 7
31866: PUSH
31867: LD_VAR 0 8
31871: PUSH
31872: FOR_IN
31873: IFFALSE 31901
// if i [ 1 ] = b_ext_radio then
31875: LD_VAR 0 7
31879: PUSH
31880: LD_INT 1
31882: ARRAY
31883: PUSH
31884: LD_INT 22
31886: EQUAL
31887: IFFALSE 31899
// begin control := control_remote ;
31889: LD_ADDR_VAR 0 4
31893: PUSH
31894: LD_INT 2
31896: ST_TO_ADDR
// break ;
31897: GO 31901
// end ;
31899: GO 31872
31901: POP
31902: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31903: LD_VAR 0 1
31907: PPUSH
31908: LD_VAR 0 2
31912: PPUSH
31913: LD_VAR 0 3
31917: PPUSH
31918: LD_VAR 0 4
31922: PPUSH
31923: LD_VAR 0 5
31927: PPUSH
31928: CALL_OW 448
31932: IFFALSE 31967
// begin result := [ chassis , engine , control , weapon ] ;
31934: LD_ADDR_VAR 0 6
31938: PUSH
31939: LD_VAR 0 2
31943: PUSH
31944: LD_VAR 0 3
31948: PUSH
31949: LD_VAR 0 4
31953: PUSH
31954: LD_VAR 0 5
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: ST_TO_ADDR
// exit ;
31965: GO 32379
// end ; _chassis := AvailableChassisList ( factory ) ;
31967: LD_ADDR_VAR 0 9
31971: PUSH
31972: LD_VAR 0 1
31976: PPUSH
31977: CALL_OW 475
31981: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31982: LD_ADDR_VAR 0 11
31986: PUSH
31987: LD_VAR 0 1
31991: PPUSH
31992: CALL_OW 476
31996: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31997: LD_ADDR_VAR 0 12
32001: PUSH
32002: LD_VAR 0 1
32006: PPUSH
32007: CALL_OW 477
32011: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32012: LD_ADDR_VAR 0 10
32016: PUSH
32017: LD_VAR 0 1
32021: PPUSH
32022: CALL_OW 478
32026: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32027: LD_VAR 0 9
32031: NOT
32032: PUSH
32033: LD_VAR 0 11
32037: NOT
32038: OR
32039: PUSH
32040: LD_VAR 0 12
32044: NOT
32045: OR
32046: PUSH
32047: LD_VAR 0 10
32051: NOT
32052: OR
32053: IFFALSE 32088
// begin result := [ chassis , engine , control , weapon ] ;
32055: LD_ADDR_VAR 0 6
32059: PUSH
32060: LD_VAR 0 2
32064: PUSH
32065: LD_VAR 0 3
32069: PUSH
32070: LD_VAR 0 4
32074: PUSH
32075: LD_VAR 0 5
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: ST_TO_ADDR
// exit ;
32086: GO 32379
// end ; if not chassis in _chassis then
32088: LD_VAR 0 2
32092: PUSH
32093: LD_VAR 0 9
32097: IN
32098: NOT
32099: IFFALSE 32125
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32101: LD_ADDR_VAR 0 2
32105: PUSH
32106: LD_VAR 0 9
32110: PUSH
32111: LD_INT 1
32113: PPUSH
32114: LD_VAR 0 9
32118: PPUSH
32119: CALL_OW 12
32123: ARRAY
32124: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32125: LD_VAR 0 2
32129: PPUSH
32130: LD_VAR 0 3
32134: PPUSH
32135: CALL 32384 0 2
32139: NOT
32140: IFFALSE 32199
// repeat engine := _engine [ 1 ] ;
32142: LD_ADDR_VAR 0 3
32146: PUSH
32147: LD_VAR 0 11
32151: PUSH
32152: LD_INT 1
32154: ARRAY
32155: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32156: LD_ADDR_VAR 0 11
32160: PUSH
32161: LD_VAR 0 11
32165: PPUSH
32166: LD_INT 1
32168: PPUSH
32169: CALL_OW 3
32173: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32174: LD_VAR 0 2
32178: PPUSH
32179: LD_VAR 0 3
32183: PPUSH
32184: CALL 32384 0 2
32188: PUSH
32189: LD_VAR 0 11
32193: PUSH
32194: EMPTY
32195: EQUAL
32196: OR
32197: IFFALSE 32142
// if not control in _control then
32199: LD_VAR 0 4
32203: PUSH
32204: LD_VAR 0 12
32208: IN
32209: NOT
32210: IFFALSE 32236
// control := _control [ rand ( 1 , _control ) ] ;
32212: LD_ADDR_VAR 0 4
32216: PUSH
32217: LD_VAR 0 12
32221: PUSH
32222: LD_INT 1
32224: PPUSH
32225: LD_VAR 0 12
32229: PPUSH
32230: CALL_OW 12
32234: ARRAY
32235: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32236: LD_VAR 0 2
32240: PPUSH
32241: LD_VAR 0 5
32245: PPUSH
32246: CALL 32604 0 2
32250: NOT
32251: IFFALSE 32310
// repeat weapon := _weapon [ 1 ] ;
32253: LD_ADDR_VAR 0 5
32257: PUSH
32258: LD_VAR 0 10
32262: PUSH
32263: LD_INT 1
32265: ARRAY
32266: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32267: LD_ADDR_VAR 0 10
32271: PUSH
32272: LD_VAR 0 10
32276: PPUSH
32277: LD_INT 1
32279: PPUSH
32280: CALL_OW 3
32284: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32285: LD_VAR 0 2
32289: PPUSH
32290: LD_VAR 0 5
32294: PPUSH
32295: CALL 32604 0 2
32299: PUSH
32300: LD_VAR 0 10
32304: PUSH
32305: EMPTY
32306: EQUAL
32307: OR
32308: IFFALSE 32253
// result := [ ] ;
32310: LD_ADDR_VAR 0 6
32314: PUSH
32315: EMPTY
32316: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32317: LD_VAR 0 1
32321: PPUSH
32322: LD_VAR 0 2
32326: PPUSH
32327: LD_VAR 0 3
32331: PPUSH
32332: LD_VAR 0 4
32336: PPUSH
32337: LD_VAR 0 5
32341: PPUSH
32342: CALL_OW 448
32346: IFFALSE 32379
// result := [ chassis , engine , control , weapon ] ;
32348: LD_ADDR_VAR 0 6
32352: PUSH
32353: LD_VAR 0 2
32357: PUSH
32358: LD_VAR 0 3
32362: PUSH
32363: LD_VAR 0 4
32367: PUSH
32368: LD_VAR 0 5
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: ST_TO_ADDR
// end ;
32379: LD_VAR 0 6
32383: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32384: LD_INT 0
32386: PPUSH
// if not chassis or not engine then
32387: LD_VAR 0 1
32391: NOT
32392: PUSH
32393: LD_VAR 0 2
32397: NOT
32398: OR
32399: IFFALSE 32403
// exit ;
32401: GO 32599
// case engine of engine_solar :
32403: LD_VAR 0 2
32407: PUSH
32408: LD_INT 2
32410: DOUBLE
32411: EQUAL
32412: IFTRUE 32416
32414: GO 32454
32416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_INT 11
32424: PUSH
32425: LD_INT 12
32427: PUSH
32428: LD_INT 13
32430: PUSH
32431: LD_INT 14
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: LD_INT 2
32439: PUSH
32440: LD_INT 3
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: ST_TO_ADDR
32452: GO 32583
32454: LD_INT 1
32456: DOUBLE
32457: EQUAL
32458: IFTRUE 32462
32460: GO 32524
32462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32463: LD_ADDR_VAR 0 3
32467: PUSH
32468: LD_INT 11
32470: PUSH
32471: LD_INT 12
32473: PUSH
32474: LD_INT 13
32476: PUSH
32477: LD_INT 14
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 2
32485: PUSH
32486: LD_INT 3
32488: PUSH
32489: LD_INT 4
32491: PUSH
32492: LD_INT 5
32494: PUSH
32495: LD_INT 21
32497: PUSH
32498: LD_INT 23
32500: PUSH
32501: LD_INT 22
32503: PUSH
32504: LD_INT 24
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: ST_TO_ADDR
32522: GO 32583
32524: LD_INT 3
32526: DOUBLE
32527: EQUAL
32528: IFTRUE 32532
32530: GO 32582
32532: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32533: LD_ADDR_VAR 0 3
32537: PUSH
32538: LD_INT 13
32540: PUSH
32541: LD_INT 14
32543: PUSH
32544: LD_INT 2
32546: PUSH
32547: LD_INT 3
32549: PUSH
32550: LD_INT 4
32552: PUSH
32553: LD_INT 5
32555: PUSH
32556: LD_INT 21
32558: PUSH
32559: LD_INT 22
32561: PUSH
32562: LD_INT 23
32564: PUSH
32565: LD_INT 24
32567: PUSH
32568: EMPTY
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
32580: GO 32583
32582: POP
// result := ( chassis in result ) ;
32583: LD_ADDR_VAR 0 3
32587: PUSH
32588: LD_VAR 0 1
32592: PUSH
32593: LD_VAR 0 3
32597: IN
32598: ST_TO_ADDR
// end ;
32599: LD_VAR 0 3
32603: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32604: LD_INT 0
32606: PPUSH
// if not chassis or not weapon then
32607: LD_VAR 0 1
32611: NOT
32612: PUSH
32613: LD_VAR 0 2
32617: NOT
32618: OR
32619: IFFALSE 32623
// exit ;
32621: GO 33683
// case weapon of us_machine_gun :
32623: LD_VAR 0 2
32627: PUSH
32628: LD_INT 2
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32666
32636: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: LD_INT 4
32653: PUSH
32654: LD_INT 5
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: ST_TO_ADDR
32664: GO 33667
32666: LD_INT 3
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32704
32674: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: LD_INT 1
32682: PUSH
32683: LD_INT 2
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: LD_INT 4
32691: PUSH
32692: LD_INT 5
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
32702: GO 33667
32704: LD_INT 11
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32742
32712: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32713: LD_ADDR_VAR 0 3
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: LD_INT 3
32726: PUSH
32727: LD_INT 4
32729: PUSH
32730: LD_INT 5
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: ST_TO_ADDR
32740: GO 33667
32742: LD_INT 4
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32776
32750: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: LD_INT 2
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: LD_INT 4
32764: PUSH
32765: LD_INT 5
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: ST_TO_ADDR
32774: GO 33667
32776: LD_INT 5
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32810
32784: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32785: LD_ADDR_VAR 0 3
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: LD_INT 3
32795: PUSH
32796: LD_INT 4
32798: PUSH
32799: LD_INT 5
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: ST_TO_ADDR
32808: GO 33667
32810: LD_INT 9
32812: DOUBLE
32813: EQUAL
32814: IFTRUE 32818
32816: GO 32844
32818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32819: LD_ADDR_VAR 0 3
32823: PUSH
32824: LD_INT 2
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 4
32832: PUSH
32833: LD_INT 5
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: ST_TO_ADDR
32842: GO 33667
32844: LD_INT 7
32846: DOUBLE
32847: EQUAL
32848: IFTRUE 32852
32850: GO 32878
32852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32853: LD_ADDR_VAR 0 3
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 3
32863: PUSH
32864: LD_INT 4
32866: PUSH
32867: LD_INT 5
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: ST_TO_ADDR
32876: GO 33667
32878: LD_INT 12
32880: DOUBLE
32881: EQUAL
32882: IFTRUE 32886
32884: GO 32912
32886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32887: LD_ADDR_VAR 0 3
32891: PUSH
32892: LD_INT 2
32894: PUSH
32895: LD_INT 3
32897: PUSH
32898: LD_INT 4
32900: PUSH
32901: LD_INT 5
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: ST_TO_ADDR
32910: GO 33667
32912: LD_INT 13
32914: DOUBLE
32915: EQUAL
32916: IFTRUE 32920
32918: GO 32946
32920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32921: LD_ADDR_VAR 0 3
32925: PUSH
32926: LD_INT 2
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: LD_INT 4
32934: PUSH
32935: LD_INT 5
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: ST_TO_ADDR
32944: GO 33667
32946: LD_INT 14
32948: DOUBLE
32949: EQUAL
32950: IFTRUE 32954
32952: GO 32972
32954: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32955: LD_ADDR_VAR 0 3
32959: PUSH
32960: LD_INT 4
32962: PUSH
32963: LD_INT 5
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: ST_TO_ADDR
32970: GO 33667
32972: LD_INT 6
32974: DOUBLE
32975: EQUAL
32976: IFTRUE 32980
32978: GO 32998
32980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32981: LD_ADDR_VAR 0 3
32985: PUSH
32986: LD_INT 4
32988: PUSH
32989: LD_INT 5
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: ST_TO_ADDR
32996: GO 33667
32998: LD_INT 10
33000: DOUBLE
33001: EQUAL
33002: IFTRUE 33006
33004: GO 33024
33006: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33007: LD_ADDR_VAR 0 3
33011: PUSH
33012: LD_INT 4
33014: PUSH
33015: LD_INT 5
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: ST_TO_ADDR
33022: GO 33667
33024: LD_INT 22
33026: DOUBLE
33027: EQUAL
33028: IFTRUE 33032
33030: GO 33058
33032: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33033: LD_ADDR_VAR 0 3
33037: PUSH
33038: LD_INT 11
33040: PUSH
33041: LD_INT 12
33043: PUSH
33044: LD_INT 13
33046: PUSH
33047: LD_INT 14
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: ST_TO_ADDR
33056: GO 33667
33058: LD_INT 23
33060: DOUBLE
33061: EQUAL
33062: IFTRUE 33066
33064: GO 33092
33066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: LD_INT 11
33074: PUSH
33075: LD_INT 12
33077: PUSH
33078: LD_INT 13
33080: PUSH
33081: LD_INT 14
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: ST_TO_ADDR
33090: GO 33667
33092: LD_INT 24
33094: DOUBLE
33095: EQUAL
33096: IFTRUE 33100
33098: GO 33126
33100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33101: LD_ADDR_VAR 0 3
33105: PUSH
33106: LD_INT 11
33108: PUSH
33109: LD_INT 12
33111: PUSH
33112: LD_INT 13
33114: PUSH
33115: LD_INT 14
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: ST_TO_ADDR
33124: GO 33667
33126: LD_INT 30
33128: DOUBLE
33129: EQUAL
33130: IFTRUE 33134
33132: GO 33160
33134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33135: LD_ADDR_VAR 0 3
33139: PUSH
33140: LD_INT 11
33142: PUSH
33143: LD_INT 12
33145: PUSH
33146: LD_INT 13
33148: PUSH
33149: LD_INT 14
33151: PUSH
33152: EMPTY
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: ST_TO_ADDR
33158: GO 33667
33160: LD_INT 25
33162: DOUBLE
33163: EQUAL
33164: IFTRUE 33168
33166: GO 33186
33168: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: LD_INT 13
33176: PUSH
33177: LD_INT 14
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: ST_TO_ADDR
33184: GO 33667
33186: LD_INT 27
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33212
33194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33195: LD_ADDR_VAR 0 3
33199: PUSH
33200: LD_INT 13
33202: PUSH
33203: LD_INT 14
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: ST_TO_ADDR
33210: GO 33667
33212: LD_INT 92
33214: DOUBLE
33215: EQUAL
33216: IFTRUE 33220
33218: GO 33246
33220: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_INT 11
33228: PUSH
33229: LD_INT 12
33231: PUSH
33232: LD_INT 13
33234: PUSH
33235: LD_INT 14
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
33244: GO 33667
33246: LD_INT 28
33248: DOUBLE
33249: EQUAL
33250: IFTRUE 33254
33252: GO 33272
33254: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33255: LD_ADDR_VAR 0 3
33259: PUSH
33260: LD_INT 13
33262: PUSH
33263: LD_INT 14
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: ST_TO_ADDR
33270: GO 33667
33272: LD_INT 29
33274: DOUBLE
33275: EQUAL
33276: IFTRUE 33280
33278: GO 33298
33280: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33281: LD_ADDR_VAR 0 3
33285: PUSH
33286: LD_INT 13
33288: PUSH
33289: LD_INT 14
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: ST_TO_ADDR
33296: GO 33667
33298: LD_INT 31
33300: DOUBLE
33301: EQUAL
33302: IFTRUE 33306
33304: GO 33324
33306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33307: LD_ADDR_VAR 0 3
33311: PUSH
33312: LD_INT 13
33314: PUSH
33315: LD_INT 14
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: ST_TO_ADDR
33322: GO 33667
33324: LD_INT 26
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33350
33332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33333: LD_ADDR_VAR 0 3
33337: PUSH
33338: LD_INT 13
33340: PUSH
33341: LD_INT 14
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: ST_TO_ADDR
33348: GO 33667
33350: LD_INT 42
33352: DOUBLE
33353: EQUAL
33354: IFTRUE 33358
33356: GO 33384
33358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33359: LD_ADDR_VAR 0 3
33363: PUSH
33364: LD_INT 21
33366: PUSH
33367: LD_INT 22
33369: PUSH
33370: LD_INT 23
33372: PUSH
33373: LD_INT 24
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
33382: GO 33667
33384: LD_INT 43
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33392
33390: GO 33418
33392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33393: LD_ADDR_VAR 0 3
33397: PUSH
33398: LD_INT 21
33400: PUSH
33401: LD_INT 22
33403: PUSH
33404: LD_INT 23
33406: PUSH
33407: LD_INT 24
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
33416: GO 33667
33418: LD_INT 44
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33452
33426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_INT 21
33434: PUSH
33435: LD_INT 22
33437: PUSH
33438: LD_INT 23
33440: PUSH
33441: LD_INT 24
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: ST_TO_ADDR
33450: GO 33667
33452: LD_INT 45
33454: DOUBLE
33455: EQUAL
33456: IFTRUE 33460
33458: GO 33486
33460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33461: LD_ADDR_VAR 0 3
33465: PUSH
33466: LD_INT 21
33468: PUSH
33469: LD_INT 22
33471: PUSH
33472: LD_INT 23
33474: PUSH
33475: LD_INT 24
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
33484: GO 33667
33486: LD_INT 49
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33520
33494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33495: LD_ADDR_VAR 0 3
33499: PUSH
33500: LD_INT 21
33502: PUSH
33503: LD_INT 22
33505: PUSH
33506: LD_INT 23
33508: PUSH
33509: LD_INT 24
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: ST_TO_ADDR
33518: GO 33667
33520: LD_INT 51
33522: DOUBLE
33523: EQUAL
33524: IFTRUE 33528
33526: GO 33554
33528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33529: LD_ADDR_VAR 0 3
33533: PUSH
33534: LD_INT 21
33536: PUSH
33537: LD_INT 22
33539: PUSH
33540: LD_INT 23
33542: PUSH
33543: LD_INT 24
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: ST_TO_ADDR
33552: GO 33667
33554: LD_INT 52
33556: DOUBLE
33557: EQUAL
33558: IFTRUE 33562
33560: GO 33588
33562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33563: LD_ADDR_VAR 0 3
33567: PUSH
33568: LD_INT 21
33570: PUSH
33571: LD_INT 22
33573: PUSH
33574: LD_INT 23
33576: PUSH
33577: LD_INT 24
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: ST_TO_ADDR
33586: GO 33667
33588: LD_INT 53
33590: DOUBLE
33591: EQUAL
33592: IFTRUE 33596
33594: GO 33614
33596: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33597: LD_ADDR_VAR 0 3
33601: PUSH
33602: LD_INT 23
33604: PUSH
33605: LD_INT 24
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: ST_TO_ADDR
33612: GO 33667
33614: LD_INT 46
33616: DOUBLE
33617: EQUAL
33618: IFTRUE 33622
33620: GO 33640
33622: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33623: LD_ADDR_VAR 0 3
33627: PUSH
33628: LD_INT 23
33630: PUSH
33631: LD_INT 24
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: ST_TO_ADDR
33638: GO 33667
33640: LD_INT 47
33642: DOUBLE
33643: EQUAL
33644: IFTRUE 33648
33646: GO 33666
33648: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33649: LD_ADDR_VAR 0 3
33653: PUSH
33654: LD_INT 23
33656: PUSH
33657: LD_INT 24
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: ST_TO_ADDR
33664: GO 33667
33666: POP
// result := ( chassis in result ) ;
33667: LD_ADDR_VAR 0 3
33671: PUSH
33672: LD_VAR 0 1
33676: PUSH
33677: LD_VAR 0 3
33681: IN
33682: ST_TO_ADDR
// end ;
33683: LD_VAR 0 3
33687: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33688: LD_INT 0
33690: PPUSH
33691: PPUSH
33692: PPUSH
33693: PPUSH
33694: PPUSH
33695: PPUSH
33696: PPUSH
// result := array ;
33697: LD_ADDR_VAR 0 5
33701: PUSH
33702: LD_VAR 0 1
33706: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33707: LD_VAR 0 1
33711: NOT
33712: PUSH
33713: LD_VAR 0 2
33717: NOT
33718: OR
33719: PUSH
33720: LD_VAR 0 3
33724: NOT
33725: OR
33726: PUSH
33727: LD_VAR 0 2
33731: PUSH
33732: LD_VAR 0 1
33736: GREATER
33737: OR
33738: PUSH
33739: LD_VAR 0 3
33743: PUSH
33744: LD_VAR 0 1
33748: GREATER
33749: OR
33750: IFFALSE 33754
// exit ;
33752: GO 34050
// if direction then
33754: LD_VAR 0 4
33758: IFFALSE 33822
// begin d := 1 ;
33760: LD_ADDR_VAR 0 9
33764: PUSH
33765: LD_INT 1
33767: ST_TO_ADDR
// if i_from > i_to then
33768: LD_VAR 0 2
33772: PUSH
33773: LD_VAR 0 3
33777: GREATER
33778: IFFALSE 33804
// length := ( array - i_from ) + i_to else
33780: LD_ADDR_VAR 0 11
33784: PUSH
33785: LD_VAR 0 1
33789: PUSH
33790: LD_VAR 0 2
33794: MINUS
33795: PUSH
33796: LD_VAR 0 3
33800: PLUS
33801: ST_TO_ADDR
33802: GO 33820
// length := i_to - i_from ;
33804: LD_ADDR_VAR 0 11
33808: PUSH
33809: LD_VAR 0 3
33813: PUSH
33814: LD_VAR 0 2
33818: MINUS
33819: ST_TO_ADDR
// end else
33820: GO 33883
// begin d := - 1 ;
33822: LD_ADDR_VAR 0 9
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: ST_TO_ADDR
// if i_from > i_to then
33831: LD_VAR 0 2
33835: PUSH
33836: LD_VAR 0 3
33840: GREATER
33841: IFFALSE 33861
// length := i_from - i_to else
33843: LD_ADDR_VAR 0 11
33847: PUSH
33848: LD_VAR 0 2
33852: PUSH
33853: LD_VAR 0 3
33857: MINUS
33858: ST_TO_ADDR
33859: GO 33883
// length := ( array - i_to ) + i_from ;
33861: LD_ADDR_VAR 0 11
33865: PUSH
33866: LD_VAR 0 1
33870: PUSH
33871: LD_VAR 0 3
33875: MINUS
33876: PUSH
33877: LD_VAR 0 2
33881: PLUS
33882: ST_TO_ADDR
// end ; if not length then
33883: LD_VAR 0 11
33887: NOT
33888: IFFALSE 33892
// exit ;
33890: GO 34050
// tmp := array ;
33892: LD_ADDR_VAR 0 10
33896: PUSH
33897: LD_VAR 0 1
33901: ST_TO_ADDR
// for i = 1 to length do
33902: LD_ADDR_VAR 0 6
33906: PUSH
33907: DOUBLE
33908: LD_INT 1
33910: DEC
33911: ST_TO_ADDR
33912: LD_VAR 0 11
33916: PUSH
33917: FOR_TO
33918: IFFALSE 34038
// begin for j = 1 to array do
33920: LD_ADDR_VAR 0 7
33924: PUSH
33925: DOUBLE
33926: LD_INT 1
33928: DEC
33929: ST_TO_ADDR
33930: LD_VAR 0 1
33934: PUSH
33935: FOR_TO
33936: IFFALSE 34024
// begin k := j + d ;
33938: LD_ADDR_VAR 0 8
33942: PUSH
33943: LD_VAR 0 7
33947: PUSH
33948: LD_VAR 0 9
33952: PLUS
33953: ST_TO_ADDR
// if k > array then
33954: LD_VAR 0 8
33958: PUSH
33959: LD_VAR 0 1
33963: GREATER
33964: IFFALSE 33974
// k := 1 ;
33966: LD_ADDR_VAR 0 8
33970: PUSH
33971: LD_INT 1
33973: ST_TO_ADDR
// if not k then
33974: LD_VAR 0 8
33978: NOT
33979: IFFALSE 33991
// k := array ;
33981: LD_ADDR_VAR 0 8
33985: PUSH
33986: LD_VAR 0 1
33990: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33991: LD_ADDR_VAR 0 10
33995: PUSH
33996: LD_VAR 0 10
34000: PPUSH
34001: LD_VAR 0 8
34005: PPUSH
34006: LD_VAR 0 1
34010: PUSH
34011: LD_VAR 0 7
34015: ARRAY
34016: PPUSH
34017: CALL_OW 1
34021: ST_TO_ADDR
// end ;
34022: GO 33935
34024: POP
34025: POP
// array := tmp ;
34026: LD_ADDR_VAR 0 1
34030: PUSH
34031: LD_VAR 0 10
34035: ST_TO_ADDR
// end ;
34036: GO 33917
34038: POP
34039: POP
// result := array ;
34040: LD_ADDR_VAR 0 5
34044: PUSH
34045: LD_VAR 0 1
34049: ST_TO_ADDR
// end ;
34050: LD_VAR 0 5
34054: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34055: LD_INT 0
34057: PPUSH
34058: PPUSH
// result := 0 ;
34059: LD_ADDR_VAR 0 3
34063: PUSH
34064: LD_INT 0
34066: ST_TO_ADDR
// if not array or not value in array then
34067: LD_VAR 0 1
34071: NOT
34072: PUSH
34073: LD_VAR 0 2
34077: PUSH
34078: LD_VAR 0 1
34082: IN
34083: NOT
34084: OR
34085: IFFALSE 34089
// exit ;
34087: GO 34143
// for i = 1 to array do
34089: LD_ADDR_VAR 0 4
34093: PUSH
34094: DOUBLE
34095: LD_INT 1
34097: DEC
34098: ST_TO_ADDR
34099: LD_VAR 0 1
34103: PUSH
34104: FOR_TO
34105: IFFALSE 34141
// if value = array [ i ] then
34107: LD_VAR 0 2
34111: PUSH
34112: LD_VAR 0 1
34116: PUSH
34117: LD_VAR 0 4
34121: ARRAY
34122: EQUAL
34123: IFFALSE 34139
// begin result := i ;
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_VAR 0 4
34134: ST_TO_ADDR
// exit ;
34135: POP
34136: POP
34137: GO 34143
// end ;
34139: GO 34104
34141: POP
34142: POP
// end ;
34143: LD_VAR 0 3
34147: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34148: LD_INT 0
34150: PPUSH
// vc_chassis := chassis ;
34151: LD_ADDR_OWVAR 37
34155: PUSH
34156: LD_VAR 0 1
34160: ST_TO_ADDR
// vc_engine := engine ;
34161: LD_ADDR_OWVAR 39
34165: PUSH
34166: LD_VAR 0 2
34170: ST_TO_ADDR
// vc_control := control ;
34171: LD_ADDR_OWVAR 38
34175: PUSH
34176: LD_VAR 0 3
34180: ST_TO_ADDR
// vc_weapon := weapon ;
34181: LD_ADDR_OWVAR 40
34185: PUSH
34186: LD_VAR 0 4
34190: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34191: LD_ADDR_OWVAR 41
34195: PUSH
34196: LD_VAR 0 5
34200: ST_TO_ADDR
// end ;
34201: LD_VAR 0 6
34205: RET
// export function WantPlant ( unit ) ; var task ; begin
34206: LD_INT 0
34208: PPUSH
34209: PPUSH
// result := false ;
34210: LD_ADDR_VAR 0 2
34214: PUSH
34215: LD_INT 0
34217: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34218: LD_ADDR_VAR 0 3
34222: PUSH
34223: LD_VAR 0 1
34227: PPUSH
34228: CALL_OW 437
34232: ST_TO_ADDR
// if task then
34233: LD_VAR 0 3
34237: IFFALSE 34265
// if task [ 1 ] [ 1 ] = p then
34239: LD_VAR 0 3
34243: PUSH
34244: LD_INT 1
34246: ARRAY
34247: PUSH
34248: LD_INT 1
34250: ARRAY
34251: PUSH
34252: LD_STRING p
34254: EQUAL
34255: IFFALSE 34265
// result := true ;
34257: LD_ADDR_VAR 0 2
34261: PUSH
34262: LD_INT 1
34264: ST_TO_ADDR
// end ;
34265: LD_VAR 0 2
34269: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34270: LD_INT 0
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
// if pos < 1 then
34276: LD_VAR 0 2
34280: PUSH
34281: LD_INT 1
34283: LESS
34284: IFFALSE 34288
// exit ;
34286: GO 34591
// if pos = 1 then
34288: LD_VAR 0 2
34292: PUSH
34293: LD_INT 1
34295: EQUAL
34296: IFFALSE 34329
// result := Replace ( arr , pos [ 1 ] , value ) else
34298: LD_ADDR_VAR 0 4
34302: PUSH
34303: LD_VAR 0 1
34307: PPUSH
34308: LD_VAR 0 2
34312: PUSH
34313: LD_INT 1
34315: ARRAY
34316: PPUSH
34317: LD_VAR 0 3
34321: PPUSH
34322: CALL_OW 1
34326: ST_TO_ADDR
34327: GO 34591
// begin tmp := arr ;
34329: LD_ADDR_VAR 0 6
34333: PUSH
34334: LD_VAR 0 1
34338: ST_TO_ADDR
// s_arr := [ tmp ] ;
34339: LD_ADDR_VAR 0 7
34343: PUSH
34344: LD_VAR 0 6
34348: PUSH
34349: EMPTY
34350: LIST
34351: ST_TO_ADDR
// for i = 1 to pos - 1 do
34352: LD_ADDR_VAR 0 5
34356: PUSH
34357: DOUBLE
34358: LD_INT 1
34360: DEC
34361: ST_TO_ADDR
34362: LD_VAR 0 2
34366: PUSH
34367: LD_INT 1
34369: MINUS
34370: PUSH
34371: FOR_TO
34372: IFFALSE 34417
// begin tmp := tmp [ pos [ i ] ] ;
34374: LD_ADDR_VAR 0 6
34378: PUSH
34379: LD_VAR 0 6
34383: PUSH
34384: LD_VAR 0 2
34388: PUSH
34389: LD_VAR 0 5
34393: ARRAY
34394: ARRAY
34395: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34396: LD_ADDR_VAR 0 7
34400: PUSH
34401: LD_VAR 0 7
34405: PUSH
34406: LD_VAR 0 6
34410: PUSH
34411: EMPTY
34412: LIST
34413: ADD
34414: ST_TO_ADDR
// end ;
34415: GO 34371
34417: POP
34418: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34419: LD_ADDR_VAR 0 6
34423: PUSH
34424: LD_VAR 0 6
34428: PPUSH
34429: LD_VAR 0 2
34433: PUSH
34434: LD_VAR 0 2
34438: ARRAY
34439: PPUSH
34440: LD_VAR 0 3
34444: PPUSH
34445: CALL_OW 1
34449: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34450: LD_ADDR_VAR 0 7
34454: PUSH
34455: LD_VAR 0 7
34459: PPUSH
34460: LD_VAR 0 7
34464: PPUSH
34465: LD_VAR 0 6
34469: PPUSH
34470: CALL_OW 1
34474: ST_TO_ADDR
// for i = s_arr downto 2 do
34475: LD_ADDR_VAR 0 5
34479: PUSH
34480: DOUBLE
34481: LD_VAR 0 7
34485: INC
34486: ST_TO_ADDR
34487: LD_INT 2
34489: PUSH
34490: FOR_DOWNTO
34491: IFFALSE 34575
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34493: LD_ADDR_VAR 0 6
34497: PUSH
34498: LD_VAR 0 7
34502: PUSH
34503: LD_VAR 0 5
34507: PUSH
34508: LD_INT 1
34510: MINUS
34511: ARRAY
34512: PPUSH
34513: LD_VAR 0 2
34517: PUSH
34518: LD_VAR 0 5
34522: PUSH
34523: LD_INT 1
34525: MINUS
34526: ARRAY
34527: PPUSH
34528: LD_VAR 0 7
34532: PUSH
34533: LD_VAR 0 5
34537: ARRAY
34538: PPUSH
34539: CALL_OW 1
34543: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34544: LD_ADDR_VAR 0 7
34548: PUSH
34549: LD_VAR 0 7
34553: PPUSH
34554: LD_VAR 0 5
34558: PUSH
34559: LD_INT 1
34561: MINUS
34562: PPUSH
34563: LD_VAR 0 6
34567: PPUSH
34568: CALL_OW 1
34572: ST_TO_ADDR
// end ;
34573: GO 34490
34575: POP
34576: POP
// result := s_arr [ 1 ] ;
34577: LD_ADDR_VAR 0 4
34581: PUSH
34582: LD_VAR 0 7
34586: PUSH
34587: LD_INT 1
34589: ARRAY
34590: ST_TO_ADDR
// end ; end ;
34591: LD_VAR 0 4
34595: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34596: LD_INT 0
34598: PPUSH
34599: PPUSH
// if not list then
34600: LD_VAR 0 1
34604: NOT
34605: IFFALSE 34609
// exit ;
34607: GO 34700
// i := list [ pos1 ] ;
34609: LD_ADDR_VAR 0 5
34613: PUSH
34614: LD_VAR 0 1
34618: PUSH
34619: LD_VAR 0 2
34623: ARRAY
34624: ST_TO_ADDR
// if not i then
34625: LD_VAR 0 5
34629: NOT
34630: IFFALSE 34634
// exit ;
34632: GO 34700
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34634: LD_ADDR_VAR 0 1
34638: PUSH
34639: LD_VAR 0 1
34643: PPUSH
34644: LD_VAR 0 2
34648: PPUSH
34649: LD_VAR 0 1
34653: PUSH
34654: LD_VAR 0 3
34658: ARRAY
34659: PPUSH
34660: CALL_OW 1
34664: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34665: LD_ADDR_VAR 0 1
34669: PUSH
34670: LD_VAR 0 1
34674: PPUSH
34675: LD_VAR 0 3
34679: PPUSH
34680: LD_VAR 0 5
34684: PPUSH
34685: CALL_OW 1
34689: ST_TO_ADDR
// result := list ;
34690: LD_ADDR_VAR 0 4
34694: PUSH
34695: LD_VAR 0 1
34699: ST_TO_ADDR
// end ;
34700: LD_VAR 0 4
34704: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34705: LD_INT 0
34707: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34708: LD_ADDR_VAR 0 5
34712: PUSH
34713: LD_VAR 0 1
34717: PPUSH
34718: CALL_OW 250
34722: PPUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: CALL_OW 251
34732: PPUSH
34733: LD_VAR 0 2
34737: PPUSH
34738: LD_VAR 0 3
34742: PPUSH
34743: LD_VAR 0 4
34747: PPUSH
34748: CALL 35126 0 5
34752: ST_TO_ADDR
// end ;
34753: LD_VAR 0 5
34757: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34758: LD_INT 0
34760: PPUSH
34761: PPUSH
34762: PPUSH
34763: PPUSH
// if not list or not unit then
34764: LD_VAR 0 2
34768: NOT
34769: PUSH
34770: LD_VAR 0 1
34774: NOT
34775: OR
34776: IFFALSE 34780
// exit ;
34778: GO 35121
// result := [ ] ;
34780: LD_ADDR_VAR 0 5
34784: PUSH
34785: EMPTY
34786: ST_TO_ADDR
// for i in list do
34787: LD_ADDR_VAR 0 6
34791: PUSH
34792: LD_VAR 0 2
34796: PUSH
34797: FOR_IN
34798: IFFALSE 35016
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34800: LD_ADDR_VAR 0 8
34804: PUSH
34805: LD_VAR 0 1
34809: PPUSH
34810: LD_VAR 0 6
34814: PUSH
34815: LD_INT 1
34817: ARRAY
34818: PPUSH
34819: LD_VAR 0 6
34823: PUSH
34824: LD_INT 2
34826: ARRAY
34827: PPUSH
34828: CALL_OW 297
34832: ST_TO_ADDR
// if not Count ( result ) then
34833: LD_VAR 0 5
34837: PPUSH
34838: CALL 31410 0 1
34842: NOT
34843: IFFALSE 34876
// begin result := Join ( result , [ i , tmp ] ) ;
34845: LD_ADDR_VAR 0 5
34849: PUSH
34850: LD_VAR 0 5
34854: PPUSH
34855: LD_VAR 0 6
34859: PUSH
34860: LD_VAR 0 8
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PPUSH
34869: CALL 66999 0 2
34873: ST_TO_ADDR
// continue ;
34874: GO 34797
// end ; if result [ result ] [ 2 ] <= tmp then
34876: LD_VAR 0 5
34880: PUSH
34881: LD_VAR 0 5
34885: ARRAY
34886: PUSH
34887: LD_INT 2
34889: ARRAY
34890: PUSH
34891: LD_VAR 0 8
34895: LESSEQUAL
34896: IFFALSE 34929
// result := Join ( result , [ i , tmp ] ) else
34898: LD_ADDR_VAR 0 5
34902: PUSH
34903: LD_VAR 0 5
34907: PPUSH
34908: LD_VAR 0 6
34912: PUSH
34913: LD_VAR 0 8
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PPUSH
34922: CALL 66999 0 2
34926: ST_TO_ADDR
34927: GO 35014
// begin for j := 1 to Count ( result ) do
34929: LD_ADDR_VAR 0 7
34933: PUSH
34934: DOUBLE
34935: LD_INT 1
34937: DEC
34938: ST_TO_ADDR
34939: LD_VAR 0 5
34943: PPUSH
34944: CALL 31410 0 1
34948: PUSH
34949: FOR_TO
34950: IFFALSE 35012
// begin if tmp < result [ j ] [ 2 ] then
34952: LD_VAR 0 8
34956: PUSH
34957: LD_VAR 0 5
34961: PUSH
34962: LD_VAR 0 7
34966: ARRAY
34967: PUSH
34968: LD_INT 2
34970: ARRAY
34971: LESS
34972: IFFALSE 35010
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34974: LD_ADDR_VAR 0 5
34978: PUSH
34979: LD_VAR 0 5
34983: PPUSH
34984: LD_VAR 0 7
34988: PPUSH
34989: LD_VAR 0 6
34993: PUSH
34994: LD_VAR 0 8
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PPUSH
35003: CALL_OW 2
35007: ST_TO_ADDR
// break ;
35008: GO 35012
// end ; end ;
35010: GO 34949
35012: POP
35013: POP
// end ; end ;
35014: GO 34797
35016: POP
35017: POP
// if result and not asc then
35018: LD_VAR 0 5
35022: PUSH
35023: LD_VAR 0 3
35027: NOT
35028: AND
35029: IFFALSE 35046
// result := ReverseArray ( result ) ;
35031: LD_ADDR_VAR 0 5
35035: PUSH
35036: LD_VAR 0 5
35040: PPUSH
35041: CALL 62286 0 1
35045: ST_TO_ADDR
// tmp := [ ] ;
35046: LD_ADDR_VAR 0 8
35050: PUSH
35051: EMPTY
35052: ST_TO_ADDR
// if mode then
35053: LD_VAR 0 4
35057: IFFALSE 35121
// begin for i := 1 to result do
35059: LD_ADDR_VAR 0 6
35063: PUSH
35064: DOUBLE
35065: LD_INT 1
35067: DEC
35068: ST_TO_ADDR
35069: LD_VAR 0 5
35073: PUSH
35074: FOR_TO
35075: IFFALSE 35109
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35077: LD_ADDR_VAR 0 8
35081: PUSH
35082: LD_VAR 0 8
35086: PPUSH
35087: LD_VAR 0 5
35091: PUSH
35092: LD_VAR 0 6
35096: ARRAY
35097: PUSH
35098: LD_INT 1
35100: ARRAY
35101: PPUSH
35102: CALL 66999 0 2
35106: ST_TO_ADDR
35107: GO 35074
35109: POP
35110: POP
// result := tmp ;
35111: LD_ADDR_VAR 0 5
35115: PUSH
35116: LD_VAR 0 8
35120: ST_TO_ADDR
// end ; end ;
35121: LD_VAR 0 5
35125: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35126: LD_INT 0
35128: PPUSH
35129: PPUSH
35130: PPUSH
35131: PPUSH
// if not list then
35132: LD_VAR 0 3
35136: NOT
35137: IFFALSE 35141
// exit ;
35139: GO 35529
// result := [ ] ;
35141: LD_ADDR_VAR 0 6
35145: PUSH
35146: EMPTY
35147: ST_TO_ADDR
// for i in list do
35148: LD_ADDR_VAR 0 7
35152: PUSH
35153: LD_VAR 0 3
35157: PUSH
35158: FOR_IN
35159: IFFALSE 35361
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35161: LD_ADDR_VAR 0 9
35165: PUSH
35166: LD_VAR 0 7
35170: PPUSH
35171: LD_VAR 0 1
35175: PPUSH
35176: LD_VAR 0 2
35180: PPUSH
35181: CALL_OW 297
35185: ST_TO_ADDR
// if not result then
35186: LD_VAR 0 6
35190: NOT
35191: IFFALSE 35217
// result := [ [ i , tmp ] ] else
35193: LD_ADDR_VAR 0 6
35197: PUSH
35198: LD_VAR 0 7
35202: PUSH
35203: LD_VAR 0 9
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: PUSH
35212: EMPTY
35213: LIST
35214: ST_TO_ADDR
35215: GO 35359
// begin if result [ result ] [ 2 ] < tmp then
35217: LD_VAR 0 6
35221: PUSH
35222: LD_VAR 0 6
35226: ARRAY
35227: PUSH
35228: LD_INT 2
35230: ARRAY
35231: PUSH
35232: LD_VAR 0 9
35236: LESS
35237: IFFALSE 35279
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35239: LD_ADDR_VAR 0 6
35243: PUSH
35244: LD_VAR 0 6
35248: PPUSH
35249: LD_VAR 0 6
35253: PUSH
35254: LD_INT 1
35256: PLUS
35257: PPUSH
35258: LD_VAR 0 7
35262: PUSH
35263: LD_VAR 0 9
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PPUSH
35272: CALL_OW 2
35276: ST_TO_ADDR
35277: GO 35359
// for j = 1 to result do
35279: LD_ADDR_VAR 0 8
35283: PUSH
35284: DOUBLE
35285: LD_INT 1
35287: DEC
35288: ST_TO_ADDR
35289: LD_VAR 0 6
35293: PUSH
35294: FOR_TO
35295: IFFALSE 35357
// begin if tmp < result [ j ] [ 2 ] then
35297: LD_VAR 0 9
35301: PUSH
35302: LD_VAR 0 6
35306: PUSH
35307: LD_VAR 0 8
35311: ARRAY
35312: PUSH
35313: LD_INT 2
35315: ARRAY
35316: LESS
35317: IFFALSE 35355
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35319: LD_ADDR_VAR 0 6
35323: PUSH
35324: LD_VAR 0 6
35328: PPUSH
35329: LD_VAR 0 8
35333: PPUSH
35334: LD_VAR 0 7
35338: PUSH
35339: LD_VAR 0 9
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PPUSH
35348: CALL_OW 2
35352: ST_TO_ADDR
// break ;
35353: GO 35357
// end ; end ;
35355: GO 35294
35357: POP
35358: POP
// end ; end ;
35359: GO 35158
35361: POP
35362: POP
// if result and not asc then
35363: LD_VAR 0 6
35367: PUSH
35368: LD_VAR 0 4
35372: NOT
35373: AND
35374: IFFALSE 35449
// begin tmp := result ;
35376: LD_ADDR_VAR 0 9
35380: PUSH
35381: LD_VAR 0 6
35385: ST_TO_ADDR
// for i = tmp downto 1 do
35386: LD_ADDR_VAR 0 7
35390: PUSH
35391: DOUBLE
35392: LD_VAR 0 9
35396: INC
35397: ST_TO_ADDR
35398: LD_INT 1
35400: PUSH
35401: FOR_DOWNTO
35402: IFFALSE 35447
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35404: LD_ADDR_VAR 0 6
35408: PUSH
35409: LD_VAR 0 6
35413: PPUSH
35414: LD_VAR 0 9
35418: PUSH
35419: LD_VAR 0 7
35423: MINUS
35424: PUSH
35425: LD_INT 1
35427: PLUS
35428: PPUSH
35429: LD_VAR 0 9
35433: PUSH
35434: LD_VAR 0 7
35438: ARRAY
35439: PPUSH
35440: CALL_OW 1
35444: ST_TO_ADDR
35445: GO 35401
35447: POP
35448: POP
// end ; tmp := [ ] ;
35449: LD_ADDR_VAR 0 9
35453: PUSH
35454: EMPTY
35455: ST_TO_ADDR
// if mode then
35456: LD_VAR 0 5
35460: IFFALSE 35529
// begin for i = 1 to result do
35462: LD_ADDR_VAR 0 7
35466: PUSH
35467: DOUBLE
35468: LD_INT 1
35470: DEC
35471: ST_TO_ADDR
35472: LD_VAR 0 6
35476: PUSH
35477: FOR_TO
35478: IFFALSE 35517
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35480: LD_ADDR_VAR 0 9
35484: PUSH
35485: LD_VAR 0 9
35489: PPUSH
35490: LD_VAR 0 7
35494: PPUSH
35495: LD_VAR 0 6
35499: PUSH
35500: LD_VAR 0 7
35504: ARRAY
35505: PUSH
35506: LD_INT 1
35508: ARRAY
35509: PPUSH
35510: CALL_OW 1
35514: ST_TO_ADDR
35515: GO 35477
35517: POP
35518: POP
// result := tmp ;
35519: LD_ADDR_VAR 0 6
35523: PUSH
35524: LD_VAR 0 9
35528: ST_TO_ADDR
// end ; end ;
35529: LD_VAR 0 6
35533: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35534: LD_INT 0
35536: PPUSH
35537: PPUSH
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35542: LD_ADDR_VAR 0 5
35546: PUSH
35547: LD_INT 0
35549: PUSH
35550: LD_INT 0
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// if not x or not y then
35564: LD_VAR 0 2
35568: NOT
35569: PUSH
35570: LD_VAR 0 3
35574: NOT
35575: OR
35576: IFFALSE 35580
// exit ;
35578: GO 37230
// if not range then
35580: LD_VAR 0 4
35584: NOT
35585: IFFALSE 35595
// range := 10 ;
35587: LD_ADDR_VAR 0 4
35591: PUSH
35592: LD_INT 10
35594: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35595: LD_ADDR_VAR 0 8
35599: PUSH
35600: LD_INT 81
35602: PUSH
35603: LD_VAR 0 1
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 92
35614: PUSH
35615: LD_VAR 0 2
35619: PUSH
35620: LD_VAR 0 3
35624: PUSH
35625: LD_VAR 0 4
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 3
35638: PUSH
35639: LD_INT 21
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: PPUSH
35658: CALL_OW 69
35662: ST_TO_ADDR
// if not tmp then
35663: LD_VAR 0 8
35667: NOT
35668: IFFALSE 35672
// exit ;
35670: GO 37230
// for i in tmp do
35672: LD_ADDR_VAR 0 6
35676: PUSH
35677: LD_VAR 0 8
35681: PUSH
35682: FOR_IN
35683: IFFALSE 37205
// begin points := [ 0 , 0 , 0 ] ;
35685: LD_ADDR_VAR 0 9
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: LIST
35703: ST_TO_ADDR
// bpoints := 1 ;
35704: LD_ADDR_VAR 0 10
35708: PUSH
35709: LD_INT 1
35711: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35712: LD_VAR 0 6
35716: PPUSH
35717: CALL_OW 247
35721: PUSH
35722: LD_INT 1
35724: DOUBLE
35725: EQUAL
35726: IFTRUE 35730
35728: GO 36308
35730: POP
// begin if GetClass ( i ) = 1 then
35731: LD_VAR 0 6
35735: PPUSH
35736: CALL_OW 257
35740: PUSH
35741: LD_INT 1
35743: EQUAL
35744: IFFALSE 35765
// points := [ 10 , 5 , 3 ] ;
35746: LD_ADDR_VAR 0 9
35750: PUSH
35751: LD_INT 10
35753: PUSH
35754: LD_INT 5
35756: PUSH
35757: LD_INT 3
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: LIST
35764: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35765: LD_VAR 0 6
35769: PPUSH
35770: CALL_OW 257
35774: PUSH
35775: LD_INT 2
35777: PUSH
35778: LD_INT 3
35780: PUSH
35781: LD_INT 4
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: LIST
35788: IN
35789: IFFALSE 35810
// points := [ 3 , 2 , 1 ] ;
35791: LD_ADDR_VAR 0 9
35795: PUSH
35796: LD_INT 3
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: LD_INT 1
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35810: LD_VAR 0 6
35814: PPUSH
35815: CALL_OW 257
35819: PUSH
35820: LD_INT 5
35822: EQUAL
35823: IFFALSE 35844
// points := [ 130 , 5 , 2 ] ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_INT 130
35832: PUSH
35833: LD_INT 5
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35844: LD_VAR 0 6
35848: PPUSH
35849: CALL_OW 257
35853: PUSH
35854: LD_INT 8
35856: EQUAL
35857: IFFALSE 35878
// points := [ 35 , 35 , 30 ] ;
35859: LD_ADDR_VAR 0 9
35863: PUSH
35864: LD_INT 35
35866: PUSH
35867: LD_INT 35
35869: PUSH
35870: LD_INT 30
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35878: LD_VAR 0 6
35882: PPUSH
35883: CALL_OW 257
35887: PUSH
35888: LD_INT 9
35890: EQUAL
35891: IFFALSE 35912
// points := [ 20 , 55 , 40 ] ;
35893: LD_ADDR_VAR 0 9
35897: PUSH
35898: LD_INT 20
35900: PUSH
35901: LD_INT 55
35903: PUSH
35904: LD_INT 40
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35912: LD_VAR 0 6
35916: PPUSH
35917: CALL_OW 257
35921: PUSH
35922: LD_INT 12
35924: PUSH
35925: LD_INT 16
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: IN
35932: IFFALSE 35953
// points := [ 5 , 3 , 2 ] ;
35934: LD_ADDR_VAR 0 9
35938: PUSH
35939: LD_INT 5
35941: PUSH
35942: LD_INT 3
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: LIST
35952: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35953: LD_VAR 0 6
35957: PPUSH
35958: CALL_OW 257
35962: PUSH
35963: LD_INT 17
35965: EQUAL
35966: IFFALSE 35987
// points := [ 100 , 50 , 75 ] ;
35968: LD_ADDR_VAR 0 9
35972: PUSH
35973: LD_INT 100
35975: PUSH
35976: LD_INT 50
35978: PUSH
35979: LD_INT 75
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35987: LD_VAR 0 6
35991: PPUSH
35992: CALL_OW 257
35996: PUSH
35997: LD_INT 15
35999: EQUAL
36000: IFFALSE 36021
// points := [ 10 , 5 , 3 ] ;
36002: LD_ADDR_VAR 0 9
36006: PUSH
36007: LD_INT 10
36009: PUSH
36010: LD_INT 5
36012: PUSH
36013: LD_INT 3
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36021: LD_VAR 0 6
36025: PPUSH
36026: CALL_OW 257
36030: PUSH
36031: LD_INT 14
36033: EQUAL
36034: IFFALSE 36055
// points := [ 10 , 0 , 0 ] ;
36036: LD_ADDR_VAR 0 9
36040: PUSH
36041: LD_INT 10
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: LD_INT 0
36049: PUSH
36050: EMPTY
36051: LIST
36052: LIST
36053: LIST
36054: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36055: LD_VAR 0 6
36059: PPUSH
36060: CALL_OW 257
36064: PUSH
36065: LD_INT 11
36067: EQUAL
36068: IFFALSE 36089
// points := [ 30 , 10 , 5 ] ;
36070: LD_ADDR_VAR 0 9
36074: PUSH
36075: LD_INT 30
36077: PUSH
36078: LD_INT 10
36080: PUSH
36081: LD_INT 5
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36089: LD_VAR 0 1
36093: PPUSH
36094: LD_INT 5
36096: PPUSH
36097: CALL_OW 321
36101: PUSH
36102: LD_INT 2
36104: EQUAL
36105: IFFALSE 36122
// bpoints := bpoints * 1.8 ;
36107: LD_ADDR_VAR 0 10
36111: PUSH
36112: LD_VAR 0 10
36116: PUSH
36117: LD_REAL  1.80000000000000E+0000
36120: MUL
36121: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36122: LD_VAR 0 6
36126: PPUSH
36127: CALL_OW 257
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 2
36137: PUSH
36138: LD_INT 3
36140: PUSH
36141: LD_INT 4
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: IN
36150: PUSH
36151: LD_VAR 0 1
36155: PPUSH
36156: LD_INT 51
36158: PPUSH
36159: CALL_OW 321
36163: PUSH
36164: LD_INT 2
36166: EQUAL
36167: AND
36168: IFFALSE 36185
// bpoints := bpoints * 1.2 ;
36170: LD_ADDR_VAR 0 10
36174: PUSH
36175: LD_VAR 0 10
36179: PUSH
36180: LD_REAL  1.20000000000000E+0000
36183: MUL
36184: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36185: LD_VAR 0 6
36189: PPUSH
36190: CALL_OW 257
36194: PUSH
36195: LD_INT 5
36197: PUSH
36198: LD_INT 7
36200: PUSH
36201: LD_INT 9
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: LIST
36208: IN
36209: PUSH
36210: LD_VAR 0 1
36214: PPUSH
36215: LD_INT 52
36217: PPUSH
36218: CALL_OW 321
36222: PUSH
36223: LD_INT 2
36225: EQUAL
36226: AND
36227: IFFALSE 36244
// bpoints := bpoints * 1.5 ;
36229: LD_ADDR_VAR 0 10
36233: PUSH
36234: LD_VAR 0 10
36238: PUSH
36239: LD_REAL  1.50000000000000E+0000
36242: MUL
36243: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36244: LD_VAR 0 1
36248: PPUSH
36249: LD_INT 66
36251: PPUSH
36252: CALL_OW 321
36256: PUSH
36257: LD_INT 2
36259: EQUAL
36260: IFFALSE 36277
// bpoints := bpoints * 1.1 ;
36262: LD_ADDR_VAR 0 10
36266: PUSH
36267: LD_VAR 0 10
36271: PUSH
36272: LD_REAL  1.10000000000000E+0000
36275: MUL
36276: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36277: LD_ADDR_VAR 0 10
36281: PUSH
36282: LD_VAR 0 10
36286: PUSH
36287: LD_VAR 0 6
36291: PPUSH
36292: LD_INT 1
36294: PPUSH
36295: CALL_OW 259
36299: PUSH
36300: LD_REAL  1.15000000000000E+0000
36303: MUL
36304: MUL
36305: ST_TO_ADDR
// end ; unit_vehicle :
36306: GO 37134
36308: LD_INT 2
36310: DOUBLE
36311: EQUAL
36312: IFTRUE 36316
36314: GO 37122
36316: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36317: LD_VAR 0 6
36321: PPUSH
36322: CALL_OW 264
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 42
36332: PUSH
36333: LD_INT 24
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: IN
36341: IFFALSE 36362
// points := [ 25 , 5 , 3 ] ;
36343: LD_ADDR_VAR 0 9
36347: PUSH
36348: LD_INT 25
36350: PUSH
36351: LD_INT 5
36353: PUSH
36354: LD_INT 3
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: LIST
36361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36362: LD_VAR 0 6
36366: PPUSH
36367: CALL_OW 264
36371: PUSH
36372: LD_INT 4
36374: PUSH
36375: LD_INT 43
36377: PUSH
36378: LD_INT 25
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: IN
36386: IFFALSE 36407
// points := [ 40 , 15 , 5 ] ;
36388: LD_ADDR_VAR 0 9
36392: PUSH
36393: LD_INT 40
36395: PUSH
36396: LD_INT 15
36398: PUSH
36399: LD_INT 5
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36407: LD_VAR 0 6
36411: PPUSH
36412: CALL_OW 264
36416: PUSH
36417: LD_INT 3
36419: PUSH
36420: LD_INT 23
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: IN
36427: IFFALSE 36448
// points := [ 7 , 25 , 8 ] ;
36429: LD_ADDR_VAR 0 9
36433: PUSH
36434: LD_INT 7
36436: PUSH
36437: LD_INT 25
36439: PUSH
36440: LD_INT 8
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: LIST
36447: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36448: LD_VAR 0 6
36452: PPUSH
36453: CALL_OW 264
36457: PUSH
36458: LD_INT 5
36460: PUSH
36461: LD_INT 27
36463: PUSH
36464: LD_INT 44
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: LIST
36471: IN
36472: IFFALSE 36493
// points := [ 14 , 50 , 16 ] ;
36474: LD_ADDR_VAR 0 9
36478: PUSH
36479: LD_INT 14
36481: PUSH
36482: LD_INT 50
36484: PUSH
36485: LD_INT 16
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: LIST
36492: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36493: LD_VAR 0 6
36497: PPUSH
36498: CALL_OW 264
36502: PUSH
36503: LD_INT 6
36505: PUSH
36506: LD_INT 46
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: IN
36513: IFFALSE 36534
// points := [ 32 , 120 , 70 ] ;
36515: LD_ADDR_VAR 0 9
36519: PUSH
36520: LD_INT 32
36522: PUSH
36523: LD_INT 120
36525: PUSH
36526: LD_INT 70
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36534: LD_VAR 0 6
36538: PPUSH
36539: CALL_OW 264
36543: PUSH
36544: LD_INT 7
36546: PUSH
36547: LD_INT 28
36549: PUSH
36550: LD_INT 45
36552: PUSH
36553: LD_INT 92
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: IN
36562: IFFALSE 36583
// points := [ 35 , 20 , 45 ] ;
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: LD_INT 35
36571: PUSH
36572: LD_INT 20
36574: PUSH
36575: LD_INT 45
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36583: LD_VAR 0 6
36587: PPUSH
36588: CALL_OW 264
36592: PUSH
36593: LD_INT 47
36595: PUSH
36596: EMPTY
36597: LIST
36598: IN
36599: IFFALSE 36620
// points := [ 67 , 45 , 75 ] ;
36601: LD_ADDR_VAR 0 9
36605: PUSH
36606: LD_INT 67
36608: PUSH
36609: LD_INT 45
36611: PUSH
36612: LD_INT 75
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 264
36629: PUSH
36630: LD_INT 26
36632: PUSH
36633: EMPTY
36634: LIST
36635: IN
36636: IFFALSE 36657
// points := [ 120 , 30 , 80 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 120
36645: PUSH
36646: LD_INT 30
36648: PUSH
36649: LD_INT 80
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 264
36666: PUSH
36667: LD_INT 22
36669: PUSH
36670: EMPTY
36671: LIST
36672: IN
36673: IFFALSE 36694
// points := [ 40 , 1 , 1 ] ;
36675: LD_ADDR_VAR 0 9
36679: PUSH
36680: LD_INT 40
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 1
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36694: LD_VAR 0 6
36698: PPUSH
36699: CALL_OW 264
36703: PUSH
36704: LD_INT 29
36706: PUSH
36707: EMPTY
36708: LIST
36709: IN
36710: IFFALSE 36731
// points := [ 70 , 200 , 400 ] ;
36712: LD_ADDR_VAR 0 9
36716: PUSH
36717: LD_INT 70
36719: PUSH
36720: LD_INT 200
36722: PUSH
36723: LD_INT 400
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36731: LD_VAR 0 6
36735: PPUSH
36736: CALL_OW 264
36740: PUSH
36741: LD_INT 14
36743: PUSH
36744: LD_INT 53
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: IN
36751: IFFALSE 36772
// points := [ 40 , 10 , 20 ] ;
36753: LD_ADDR_VAR 0 9
36757: PUSH
36758: LD_INT 40
36760: PUSH
36761: LD_INT 10
36763: PUSH
36764: LD_INT 20
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 264
36781: PUSH
36782: LD_INT 9
36784: PUSH
36785: EMPTY
36786: LIST
36787: IN
36788: IFFALSE 36809
// points := [ 5 , 70 , 20 ] ;
36790: LD_ADDR_VAR 0 9
36794: PUSH
36795: LD_INT 5
36797: PUSH
36798: LD_INT 70
36800: PUSH
36801: LD_INT 20
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 264
36818: PUSH
36819: LD_INT 10
36821: PUSH
36822: EMPTY
36823: LIST
36824: IN
36825: IFFALSE 36846
// points := [ 35 , 110 , 70 ] ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 35
36834: PUSH
36835: LD_INT 110
36837: PUSH
36838: LD_INT 70
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36846: LD_VAR 0 6
36850: PPUSH
36851: CALL_OW 265
36855: PUSH
36856: LD_INT 25
36858: EQUAL
36859: IFFALSE 36880
// points := [ 80 , 65 , 100 ] ;
36861: LD_ADDR_VAR 0 9
36865: PUSH
36866: LD_INT 80
36868: PUSH
36869: LD_INT 65
36871: PUSH
36872: LD_INT 100
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: LIST
36879: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36880: LD_VAR 0 6
36884: PPUSH
36885: CALL_OW 263
36889: PUSH
36890: LD_INT 1
36892: EQUAL
36893: IFFALSE 36928
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36895: LD_ADDR_VAR 0 10
36899: PUSH
36900: LD_VAR 0 10
36904: PUSH
36905: LD_VAR 0 6
36909: PPUSH
36910: CALL_OW 311
36914: PPUSH
36915: LD_INT 3
36917: PPUSH
36918: CALL_OW 259
36922: PUSH
36923: LD_INT 4
36925: MUL
36926: MUL
36927: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36928: LD_VAR 0 6
36932: PPUSH
36933: CALL_OW 263
36937: PUSH
36938: LD_INT 2
36940: EQUAL
36941: IFFALSE 36992
// begin j := IsControledBy ( i ) ;
36943: LD_ADDR_VAR 0 7
36947: PUSH
36948: LD_VAR 0 6
36952: PPUSH
36953: CALL_OW 312
36957: ST_TO_ADDR
// if j then
36958: LD_VAR 0 7
36962: IFFALSE 36992
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36964: LD_ADDR_VAR 0 10
36968: PUSH
36969: LD_VAR 0 10
36973: PUSH
36974: LD_VAR 0 7
36978: PPUSH
36979: LD_INT 3
36981: PPUSH
36982: CALL_OW 259
36986: PUSH
36987: LD_INT 3
36989: MUL
36990: MUL
36991: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36992: LD_VAR 0 6
36996: PPUSH
36997: CALL_OW 264
37001: PUSH
37002: LD_INT 5
37004: PUSH
37005: LD_INT 6
37007: PUSH
37008: LD_INT 46
37010: PUSH
37011: LD_INT 44
37013: PUSH
37014: LD_INT 47
37016: PUSH
37017: LD_INT 45
37019: PUSH
37020: LD_INT 28
37022: PUSH
37023: LD_INT 7
37025: PUSH
37026: LD_INT 27
37028: PUSH
37029: LD_INT 29
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: IN
37044: PUSH
37045: LD_VAR 0 1
37049: PPUSH
37050: LD_INT 52
37052: PPUSH
37053: CALL_OW 321
37057: PUSH
37058: LD_INT 2
37060: EQUAL
37061: AND
37062: IFFALSE 37079
// bpoints := bpoints * 1.2 ;
37064: LD_ADDR_VAR 0 10
37068: PUSH
37069: LD_VAR 0 10
37073: PUSH
37074: LD_REAL  1.20000000000000E+0000
37077: MUL
37078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37079: LD_VAR 0 6
37083: PPUSH
37084: CALL_OW 264
37088: PUSH
37089: LD_INT 6
37091: PUSH
37092: LD_INT 46
37094: PUSH
37095: LD_INT 47
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: LIST
37102: IN
37103: IFFALSE 37120
// bpoints := bpoints * 1.2 ;
37105: LD_ADDR_VAR 0 10
37109: PUSH
37110: LD_VAR 0 10
37114: PUSH
37115: LD_REAL  1.20000000000000E+0000
37118: MUL
37119: ST_TO_ADDR
// end ; unit_building :
37120: GO 37134
37122: LD_INT 3
37124: DOUBLE
37125: EQUAL
37126: IFTRUE 37130
37128: GO 37133
37130: POP
// ; end ;
37131: GO 37134
37133: POP
// for j = 1 to 3 do
37134: LD_ADDR_VAR 0 7
37138: PUSH
37139: DOUBLE
37140: LD_INT 1
37142: DEC
37143: ST_TO_ADDR
37144: LD_INT 3
37146: PUSH
37147: FOR_TO
37148: IFFALSE 37201
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37150: LD_ADDR_VAR 0 5
37154: PUSH
37155: LD_VAR 0 5
37159: PPUSH
37160: LD_VAR 0 7
37164: PPUSH
37165: LD_VAR 0 5
37169: PUSH
37170: LD_VAR 0 7
37174: ARRAY
37175: PUSH
37176: LD_VAR 0 9
37180: PUSH
37181: LD_VAR 0 7
37185: ARRAY
37186: PUSH
37187: LD_VAR 0 10
37191: MUL
37192: PLUS
37193: PPUSH
37194: CALL_OW 1
37198: ST_TO_ADDR
37199: GO 37147
37201: POP
37202: POP
// end ;
37203: GO 35682
37205: POP
37206: POP
// result := Replace ( result , 4 , tmp ) ;
37207: LD_ADDR_VAR 0 5
37211: PUSH
37212: LD_VAR 0 5
37216: PPUSH
37217: LD_INT 4
37219: PPUSH
37220: LD_VAR 0 8
37224: PPUSH
37225: CALL_OW 1
37229: ST_TO_ADDR
// end ;
37230: LD_VAR 0 5
37234: RET
// export function DangerAtRange ( unit , range ) ; begin
37235: LD_INT 0
37237: PPUSH
// if not unit then
37238: LD_VAR 0 1
37242: NOT
37243: IFFALSE 37247
// exit ;
37245: GO 37292
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37247: LD_ADDR_VAR 0 3
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: CALL_OW 255
37261: PPUSH
37262: LD_VAR 0 1
37266: PPUSH
37267: CALL_OW 250
37271: PPUSH
37272: LD_VAR 0 1
37276: PPUSH
37277: CALL_OW 251
37281: PPUSH
37282: LD_VAR 0 2
37286: PPUSH
37287: CALL 35534 0 4
37291: ST_TO_ADDR
// end ;
37292: LD_VAR 0 3
37296: RET
// export function DangerInArea ( side , area ) ; begin
37297: LD_INT 0
37299: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37300: LD_ADDR_VAR 0 3
37304: PUSH
37305: LD_VAR 0 2
37309: PPUSH
37310: LD_INT 81
37312: PUSH
37313: LD_VAR 0 1
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PPUSH
37322: CALL_OW 70
37326: ST_TO_ADDR
// end ;
37327: LD_VAR 0 3
37331: RET
// export function IsExtension ( b ) ; begin
37332: LD_INT 0
37334: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37335: LD_ADDR_VAR 0 2
37339: PUSH
37340: LD_VAR 0 1
37344: PUSH
37345: LD_INT 23
37347: PUSH
37348: LD_INT 20
37350: PUSH
37351: LD_INT 22
37353: PUSH
37354: LD_INT 17
37356: PUSH
37357: LD_INT 24
37359: PUSH
37360: LD_INT 21
37362: PUSH
37363: LD_INT 19
37365: PUSH
37366: LD_INT 16
37368: PUSH
37369: LD_INT 25
37371: PUSH
37372: LD_INT 18
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: IN
37387: ST_TO_ADDR
// end ;
37388: LD_VAR 0 2
37392: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37393: LD_INT 0
37395: PPUSH
37396: PPUSH
37397: PPUSH
// result := [ ] ;
37398: LD_ADDR_VAR 0 4
37402: PUSH
37403: EMPTY
37404: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37405: LD_ADDR_VAR 0 5
37409: PUSH
37410: LD_VAR 0 2
37414: PPUSH
37415: LD_INT 21
37417: PUSH
37418: LD_INT 3
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PPUSH
37425: CALL_OW 70
37429: ST_TO_ADDR
// if not tmp then
37430: LD_VAR 0 5
37434: NOT
37435: IFFALSE 37439
// exit ;
37437: GO 37503
// if checkLink then
37439: LD_VAR 0 3
37443: IFFALSE 37493
// begin for i in tmp do
37445: LD_ADDR_VAR 0 6
37449: PUSH
37450: LD_VAR 0 5
37454: PUSH
37455: FOR_IN
37456: IFFALSE 37491
// if GetBase ( i ) <> base then
37458: LD_VAR 0 6
37462: PPUSH
37463: CALL_OW 274
37467: PUSH
37468: LD_VAR 0 1
37472: NONEQUAL
37473: IFFALSE 37489
// ComLinkToBase ( base , i ) ;
37475: LD_VAR 0 1
37479: PPUSH
37480: LD_VAR 0 6
37484: PPUSH
37485: CALL_OW 169
37489: GO 37455
37491: POP
37492: POP
// end ; result := tmp ;
37493: LD_ADDR_VAR 0 4
37497: PUSH
37498: LD_VAR 0 5
37502: ST_TO_ADDR
// end ;
37503: LD_VAR 0 4
37507: RET
// export function ComComplete ( units , b ) ; var i ; begin
37508: LD_INT 0
37510: PPUSH
37511: PPUSH
// if not units then
37512: LD_VAR 0 1
37516: NOT
37517: IFFALSE 37521
// exit ;
37519: GO 37611
// for i in units do
37521: LD_ADDR_VAR 0 4
37525: PUSH
37526: LD_VAR 0 1
37530: PUSH
37531: FOR_IN
37532: IFFALSE 37609
// if BuildingStatus ( b ) = bs_build then
37534: LD_VAR 0 2
37538: PPUSH
37539: CALL_OW 461
37543: PUSH
37544: LD_INT 1
37546: EQUAL
37547: IFFALSE 37607
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37549: LD_VAR 0 4
37553: PPUSH
37554: LD_STRING h
37556: PUSH
37557: LD_VAR 0 2
37561: PPUSH
37562: CALL_OW 250
37566: PUSH
37567: LD_VAR 0 2
37571: PPUSH
37572: CALL_OW 251
37576: PUSH
37577: LD_VAR 0 2
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: PUSH
37600: EMPTY
37601: LIST
37602: PPUSH
37603: CALL_OW 446
37607: GO 37531
37609: POP
37610: POP
// end ;
37611: LD_VAR 0 3
37615: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37616: LD_INT 0
37618: PPUSH
37619: PPUSH
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37624: LD_VAR 0 1
37628: NOT
37629: PUSH
37630: LD_VAR 0 1
37634: PPUSH
37635: CALL_OW 263
37639: PUSH
37640: LD_INT 2
37642: NONEQUAL
37643: OR
37644: IFFALSE 37648
// exit ;
37646: GO 37964
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37648: LD_ADDR_VAR 0 6
37652: PUSH
37653: LD_INT 22
37655: PUSH
37656: LD_VAR 0 1
37660: PPUSH
37661: CALL_OW 255
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 30
37675: PUSH
37676: LD_INT 36
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 34
37685: PUSH
37686: LD_INT 31
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PPUSH
37702: CALL_OW 69
37706: ST_TO_ADDR
// if not tmp then
37707: LD_VAR 0 6
37711: NOT
37712: IFFALSE 37716
// exit ;
37714: GO 37964
// result := [ ] ;
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: EMPTY
37722: ST_TO_ADDR
// for i in tmp do
37723: LD_ADDR_VAR 0 3
37727: PUSH
37728: LD_VAR 0 6
37732: PUSH
37733: FOR_IN
37734: IFFALSE 37805
// begin t := UnitsInside ( i ) ;
37736: LD_ADDR_VAR 0 4
37740: PUSH
37741: LD_VAR 0 3
37745: PPUSH
37746: CALL_OW 313
37750: ST_TO_ADDR
// if t then
37751: LD_VAR 0 4
37755: IFFALSE 37803
// for j in t do
37757: LD_ADDR_VAR 0 7
37761: PUSH
37762: LD_VAR 0 4
37766: PUSH
37767: FOR_IN
37768: IFFALSE 37801
// result := Replace ( result , result + 1 , j ) ;
37770: LD_ADDR_VAR 0 2
37774: PUSH
37775: LD_VAR 0 2
37779: PPUSH
37780: LD_VAR 0 2
37784: PUSH
37785: LD_INT 1
37787: PLUS
37788: PPUSH
37789: LD_VAR 0 7
37793: PPUSH
37794: CALL_OW 1
37798: ST_TO_ADDR
37799: GO 37767
37801: POP
37802: POP
// end ;
37803: GO 37733
37805: POP
37806: POP
// if not result then
37807: LD_VAR 0 2
37811: NOT
37812: IFFALSE 37816
// exit ;
37814: GO 37964
// mech := result [ 1 ] ;
37816: LD_ADDR_VAR 0 5
37820: PUSH
37821: LD_VAR 0 2
37825: PUSH
37826: LD_INT 1
37828: ARRAY
37829: ST_TO_ADDR
// if result > 1 then
37830: LD_VAR 0 2
37834: PUSH
37835: LD_INT 1
37837: GREATER
37838: IFFALSE 37950
// begin for i = 2 to result do
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: DOUBLE
37846: LD_INT 2
37848: DEC
37849: ST_TO_ADDR
37850: LD_VAR 0 2
37854: PUSH
37855: FOR_TO
37856: IFFALSE 37948
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37858: LD_ADDR_VAR 0 4
37862: PUSH
37863: LD_VAR 0 2
37867: PUSH
37868: LD_VAR 0 3
37872: ARRAY
37873: PPUSH
37874: LD_INT 3
37876: PPUSH
37877: CALL_OW 259
37881: PUSH
37882: LD_VAR 0 2
37886: PUSH
37887: LD_VAR 0 3
37891: ARRAY
37892: PPUSH
37893: CALL_OW 432
37897: MINUS
37898: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37899: LD_VAR 0 4
37903: PUSH
37904: LD_VAR 0 5
37908: PPUSH
37909: LD_INT 3
37911: PPUSH
37912: CALL_OW 259
37916: PUSH
37917: LD_VAR 0 5
37921: PPUSH
37922: CALL_OW 432
37926: MINUS
37927: GREATEREQUAL
37928: IFFALSE 37946
// mech := result [ i ] ;
37930: LD_ADDR_VAR 0 5
37934: PUSH
37935: LD_VAR 0 2
37939: PUSH
37940: LD_VAR 0 3
37944: ARRAY
37945: ST_TO_ADDR
// end ;
37946: GO 37855
37948: POP
37949: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37950: LD_VAR 0 1
37954: PPUSH
37955: LD_VAR 0 5
37959: PPUSH
37960: CALL_OW 135
// end ;
37964: LD_VAR 0 2
37968: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37969: LD_INT 0
37971: PPUSH
37972: PPUSH
37973: PPUSH
37974: PPUSH
37975: PPUSH
37976: PPUSH
37977: PPUSH
37978: PPUSH
37979: PPUSH
37980: PPUSH
37981: PPUSH
37982: PPUSH
37983: PPUSH
// result := [ ] ;
37984: LD_ADDR_VAR 0 7
37988: PUSH
37989: EMPTY
37990: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37991: LD_VAR 0 1
37995: PPUSH
37996: CALL_OW 266
38000: PUSH
38001: LD_INT 0
38003: PUSH
38004: LD_INT 1
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: IN
38011: NOT
38012: IFFALSE 38016
// exit ;
38014: GO 39650
// if name then
38016: LD_VAR 0 3
38020: IFFALSE 38036
// SetBName ( base_dep , name ) ;
38022: LD_VAR 0 1
38026: PPUSH
38027: LD_VAR 0 3
38031: PPUSH
38032: CALL_OW 500
// base := GetBase ( base_dep ) ;
38036: LD_ADDR_VAR 0 15
38040: PUSH
38041: LD_VAR 0 1
38045: PPUSH
38046: CALL_OW 274
38050: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38051: LD_ADDR_VAR 0 16
38055: PUSH
38056: LD_VAR 0 1
38060: PPUSH
38061: CALL_OW 255
38065: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38066: LD_ADDR_VAR 0 17
38070: PUSH
38071: LD_VAR 0 1
38075: PPUSH
38076: CALL_OW 248
38080: ST_TO_ADDR
// if sources then
38081: LD_VAR 0 5
38085: IFFALSE 38132
// for i = 1 to 3 do
38087: LD_ADDR_VAR 0 8
38091: PUSH
38092: DOUBLE
38093: LD_INT 1
38095: DEC
38096: ST_TO_ADDR
38097: LD_INT 3
38099: PUSH
38100: FOR_TO
38101: IFFALSE 38130
// AddResourceType ( base , i , sources [ i ] ) ;
38103: LD_VAR 0 15
38107: PPUSH
38108: LD_VAR 0 8
38112: PPUSH
38113: LD_VAR 0 5
38117: PUSH
38118: LD_VAR 0 8
38122: ARRAY
38123: PPUSH
38124: CALL_OW 276
38128: GO 38100
38130: POP
38131: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38132: LD_ADDR_VAR 0 18
38136: PUSH
38137: LD_VAR 0 15
38141: PPUSH
38142: LD_VAR 0 2
38146: PPUSH
38147: LD_INT 1
38149: PPUSH
38150: CALL 37393 0 3
38154: ST_TO_ADDR
// InitHc ;
38155: CALL_OW 19
// InitUc ;
38159: CALL_OW 18
// uc_side := side ;
38163: LD_ADDR_OWVAR 20
38167: PUSH
38168: LD_VAR 0 16
38172: ST_TO_ADDR
// uc_nation := nation ;
38173: LD_ADDR_OWVAR 21
38177: PUSH
38178: LD_VAR 0 17
38182: ST_TO_ADDR
// if buildings then
38183: LD_VAR 0 18
38187: IFFALSE 39509
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38189: LD_ADDR_VAR 0 19
38193: PUSH
38194: LD_VAR 0 18
38198: PPUSH
38199: LD_INT 2
38201: PUSH
38202: LD_INT 30
38204: PUSH
38205: LD_INT 29
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 30
38214: PUSH
38215: LD_INT 30
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: LIST
38226: PPUSH
38227: CALL_OW 72
38231: ST_TO_ADDR
// if tmp then
38232: LD_VAR 0 19
38236: IFFALSE 38284
// for i in tmp do
38238: LD_ADDR_VAR 0 8
38242: PUSH
38243: LD_VAR 0 19
38247: PUSH
38248: FOR_IN
38249: IFFALSE 38282
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38251: LD_VAR 0 8
38255: PPUSH
38256: CALL_OW 250
38260: PPUSH
38261: LD_VAR 0 8
38265: PPUSH
38266: CALL_OW 251
38270: PPUSH
38271: LD_VAR 0 16
38275: PPUSH
38276: CALL_OW 441
38280: GO 38248
38282: POP
38283: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38284: LD_VAR 0 18
38288: PPUSH
38289: LD_INT 2
38291: PUSH
38292: LD_INT 30
38294: PUSH
38295: LD_INT 32
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 30
38304: PUSH
38305: LD_INT 33
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: PPUSH
38317: CALL_OW 72
38321: IFFALSE 38409
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38323: LD_ADDR_VAR 0 8
38327: PUSH
38328: LD_VAR 0 18
38332: PPUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 30
38338: PUSH
38339: LD_INT 32
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 30
38348: PUSH
38349: LD_INT 33
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: PPUSH
38361: CALL_OW 72
38365: PUSH
38366: FOR_IN
38367: IFFALSE 38407
// begin if not GetBWeapon ( i ) then
38369: LD_VAR 0 8
38373: PPUSH
38374: CALL_OW 269
38378: NOT
38379: IFFALSE 38405
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38381: LD_VAR 0 8
38385: PPUSH
38386: LD_VAR 0 8
38390: PPUSH
38391: LD_VAR 0 2
38395: PPUSH
38396: CALL 39655 0 2
38400: PPUSH
38401: CALL_OW 431
// end ;
38405: GO 38366
38407: POP
38408: POP
// end ; for i = 1 to personel do
38409: LD_ADDR_VAR 0 8
38413: PUSH
38414: DOUBLE
38415: LD_INT 1
38417: DEC
38418: ST_TO_ADDR
38419: LD_VAR 0 6
38423: PUSH
38424: FOR_TO
38425: IFFALSE 39489
// begin if i > 4 then
38427: LD_VAR 0 8
38431: PUSH
38432: LD_INT 4
38434: GREATER
38435: IFFALSE 38439
// break ;
38437: GO 39489
// case i of 1 :
38439: LD_VAR 0 8
38443: PUSH
38444: LD_INT 1
38446: DOUBLE
38447: EQUAL
38448: IFTRUE 38452
38450: GO 38532
38452: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38453: LD_ADDR_VAR 0 12
38457: PUSH
38458: LD_VAR 0 18
38462: PPUSH
38463: LD_INT 22
38465: PUSH
38466: LD_VAR 0 16
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 58
38477: PUSH
38478: EMPTY
38479: LIST
38480: PUSH
38481: LD_INT 2
38483: PUSH
38484: LD_INT 30
38486: PUSH
38487: LD_INT 32
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 30
38496: PUSH
38497: LD_INT 4
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 30
38506: PUSH
38507: LD_INT 5
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: LIST
38524: PPUSH
38525: CALL_OW 72
38529: ST_TO_ADDR
38530: GO 38754
38532: LD_INT 2
38534: DOUBLE
38535: EQUAL
38536: IFTRUE 38540
38538: GO 38602
38540: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38541: LD_ADDR_VAR 0 12
38545: PUSH
38546: LD_VAR 0 18
38550: PPUSH
38551: LD_INT 22
38553: PUSH
38554: LD_VAR 0 16
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 2
38565: PUSH
38566: LD_INT 30
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 30
38578: PUSH
38579: LD_INT 1
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PPUSH
38595: CALL_OW 72
38599: ST_TO_ADDR
38600: GO 38754
38602: LD_INT 3
38604: DOUBLE
38605: EQUAL
38606: IFTRUE 38610
38608: GO 38672
38610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38611: LD_ADDR_VAR 0 12
38615: PUSH
38616: LD_VAR 0 18
38620: PPUSH
38621: LD_INT 22
38623: PUSH
38624: LD_VAR 0 16
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 30
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: EMPTY
38643: LIST
38644: LIST
38645: PUSH
38646: LD_INT 30
38648: PUSH
38649: LD_INT 3
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PPUSH
38665: CALL_OW 72
38669: ST_TO_ADDR
38670: GO 38754
38672: LD_INT 4
38674: DOUBLE
38675: EQUAL
38676: IFTRUE 38680
38678: GO 38753
38680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38681: LD_ADDR_VAR 0 12
38685: PUSH
38686: LD_VAR 0 18
38690: PPUSH
38691: LD_INT 22
38693: PUSH
38694: LD_VAR 0 16
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 30
38708: PUSH
38709: LD_INT 6
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 30
38718: PUSH
38719: LD_INT 7
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 30
38728: PUSH
38729: LD_INT 8
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PPUSH
38746: CALL_OW 72
38750: ST_TO_ADDR
38751: GO 38754
38753: POP
// if i = 1 then
38754: LD_VAR 0 8
38758: PUSH
38759: LD_INT 1
38761: EQUAL
38762: IFFALSE 38873
// begin tmp := [ ] ;
38764: LD_ADDR_VAR 0 19
38768: PUSH
38769: EMPTY
38770: ST_TO_ADDR
// for j in f do
38771: LD_ADDR_VAR 0 9
38775: PUSH
38776: LD_VAR 0 12
38780: PUSH
38781: FOR_IN
38782: IFFALSE 38855
// if GetBType ( j ) = b_bunker then
38784: LD_VAR 0 9
38788: PPUSH
38789: CALL_OW 266
38793: PUSH
38794: LD_INT 32
38796: EQUAL
38797: IFFALSE 38824
// tmp := Insert ( tmp , 1 , j ) else
38799: LD_ADDR_VAR 0 19
38803: PUSH
38804: LD_VAR 0 19
38808: PPUSH
38809: LD_INT 1
38811: PPUSH
38812: LD_VAR 0 9
38816: PPUSH
38817: CALL_OW 2
38821: ST_TO_ADDR
38822: GO 38853
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38824: LD_ADDR_VAR 0 19
38828: PUSH
38829: LD_VAR 0 19
38833: PPUSH
38834: LD_VAR 0 19
38838: PUSH
38839: LD_INT 1
38841: PLUS
38842: PPUSH
38843: LD_VAR 0 9
38847: PPUSH
38848: CALL_OW 2
38852: ST_TO_ADDR
38853: GO 38781
38855: POP
38856: POP
// if tmp then
38857: LD_VAR 0 19
38861: IFFALSE 38873
// f := tmp ;
38863: LD_ADDR_VAR 0 12
38867: PUSH
38868: LD_VAR 0 19
38872: ST_TO_ADDR
// end ; x := personel [ i ] ;
38873: LD_ADDR_VAR 0 13
38877: PUSH
38878: LD_VAR 0 6
38882: PUSH
38883: LD_VAR 0 8
38887: ARRAY
38888: ST_TO_ADDR
// if x = - 1 then
38889: LD_VAR 0 13
38893: PUSH
38894: LD_INT 1
38896: NEG
38897: EQUAL
38898: IFFALSE 39107
// begin for j in f do
38900: LD_ADDR_VAR 0 9
38904: PUSH
38905: LD_VAR 0 12
38909: PUSH
38910: FOR_IN
38911: IFFALSE 39103
// repeat InitHc ;
38913: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38917: LD_VAR 0 9
38921: PPUSH
38922: CALL_OW 266
38926: PUSH
38927: LD_INT 5
38929: EQUAL
38930: IFFALSE 39000
// begin if UnitsInside ( j ) < 3 then
38932: LD_VAR 0 9
38936: PPUSH
38937: CALL_OW 313
38941: PUSH
38942: LD_INT 3
38944: LESS
38945: IFFALSE 38981
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38947: LD_INT 0
38949: PPUSH
38950: LD_INT 5
38952: PUSH
38953: LD_INT 8
38955: PUSH
38956: LD_INT 9
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: PUSH
38964: LD_VAR 0 17
38968: ARRAY
38969: PPUSH
38970: LD_VAR 0 4
38974: PPUSH
38975: CALL_OW 380
38979: GO 38998
// PrepareHuman ( false , i , skill ) ;
38981: LD_INT 0
38983: PPUSH
38984: LD_VAR 0 8
38988: PPUSH
38989: LD_VAR 0 4
38993: PPUSH
38994: CALL_OW 380
// end else
38998: GO 39017
// PrepareHuman ( false , i , skill ) ;
39000: LD_INT 0
39002: PPUSH
39003: LD_VAR 0 8
39007: PPUSH
39008: LD_VAR 0 4
39012: PPUSH
39013: CALL_OW 380
// un := CreateHuman ;
39017: LD_ADDR_VAR 0 14
39021: PUSH
39022: CALL_OW 44
39026: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39027: LD_ADDR_VAR 0 7
39031: PUSH
39032: LD_VAR 0 7
39036: PPUSH
39037: LD_INT 1
39039: PPUSH
39040: LD_VAR 0 14
39044: PPUSH
39045: CALL_OW 2
39049: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39050: LD_VAR 0 14
39054: PPUSH
39055: LD_VAR 0 9
39059: PPUSH
39060: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39064: LD_VAR 0 9
39068: PPUSH
39069: CALL_OW 313
39073: PUSH
39074: LD_INT 6
39076: EQUAL
39077: PUSH
39078: LD_VAR 0 9
39082: PPUSH
39083: CALL_OW 266
39087: PUSH
39088: LD_INT 32
39090: PUSH
39091: LD_INT 31
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: IN
39098: OR
39099: IFFALSE 38913
39101: GO 38910
39103: POP
39104: POP
// end else
39105: GO 39487
// for j = 1 to x do
39107: LD_ADDR_VAR 0 9
39111: PUSH
39112: DOUBLE
39113: LD_INT 1
39115: DEC
39116: ST_TO_ADDR
39117: LD_VAR 0 13
39121: PUSH
39122: FOR_TO
39123: IFFALSE 39485
// begin InitHc ;
39125: CALL_OW 19
// if not f then
39129: LD_VAR 0 12
39133: NOT
39134: IFFALSE 39223
// begin PrepareHuman ( false , i , skill ) ;
39136: LD_INT 0
39138: PPUSH
39139: LD_VAR 0 8
39143: PPUSH
39144: LD_VAR 0 4
39148: PPUSH
39149: CALL_OW 380
// un := CreateHuman ;
39153: LD_ADDR_VAR 0 14
39157: PUSH
39158: CALL_OW 44
39162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39163: LD_ADDR_VAR 0 7
39167: PUSH
39168: LD_VAR 0 7
39172: PPUSH
39173: LD_INT 1
39175: PPUSH
39176: LD_VAR 0 14
39180: PPUSH
39181: CALL_OW 2
39185: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39186: LD_VAR 0 14
39190: PPUSH
39191: LD_VAR 0 1
39195: PPUSH
39196: CALL_OW 250
39200: PPUSH
39201: LD_VAR 0 1
39205: PPUSH
39206: CALL_OW 251
39210: PPUSH
39211: LD_INT 10
39213: PPUSH
39214: LD_INT 0
39216: PPUSH
39217: CALL_OW 50
// continue ;
39221: GO 39122
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39223: LD_VAR 0 12
39227: PUSH
39228: LD_INT 1
39230: ARRAY
39231: PPUSH
39232: CALL_OW 313
39236: PUSH
39237: LD_VAR 0 12
39241: PUSH
39242: LD_INT 1
39244: ARRAY
39245: PPUSH
39246: CALL_OW 266
39250: PUSH
39251: LD_INT 32
39253: PUSH
39254: LD_INT 31
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: IN
39261: AND
39262: PUSH
39263: LD_VAR 0 12
39267: PUSH
39268: LD_INT 1
39270: ARRAY
39271: PPUSH
39272: CALL_OW 313
39276: PUSH
39277: LD_INT 6
39279: EQUAL
39280: OR
39281: IFFALSE 39301
// f := Delete ( f , 1 ) ;
39283: LD_ADDR_VAR 0 12
39287: PUSH
39288: LD_VAR 0 12
39292: PPUSH
39293: LD_INT 1
39295: PPUSH
39296: CALL_OW 3
39300: ST_TO_ADDR
// if not f then
39301: LD_VAR 0 12
39305: NOT
39306: IFFALSE 39324
// begin x := x + 2 ;
39308: LD_ADDR_VAR 0 13
39312: PUSH
39313: LD_VAR 0 13
39317: PUSH
39318: LD_INT 2
39320: PLUS
39321: ST_TO_ADDR
// continue ;
39322: GO 39122
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39324: LD_VAR 0 12
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: PPUSH
39333: CALL_OW 266
39337: PUSH
39338: LD_INT 5
39340: EQUAL
39341: IFFALSE 39415
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39343: LD_VAR 0 12
39347: PUSH
39348: LD_INT 1
39350: ARRAY
39351: PPUSH
39352: CALL_OW 313
39356: PUSH
39357: LD_INT 3
39359: LESS
39360: IFFALSE 39396
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39362: LD_INT 0
39364: PPUSH
39365: LD_INT 5
39367: PUSH
39368: LD_INT 8
39370: PUSH
39371: LD_INT 9
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: LIST
39378: PUSH
39379: LD_VAR 0 17
39383: ARRAY
39384: PPUSH
39385: LD_VAR 0 4
39389: PPUSH
39390: CALL_OW 380
39394: GO 39413
// PrepareHuman ( false , i , skill ) ;
39396: LD_INT 0
39398: PPUSH
39399: LD_VAR 0 8
39403: PPUSH
39404: LD_VAR 0 4
39408: PPUSH
39409: CALL_OW 380
// end else
39413: GO 39432
// PrepareHuman ( false , i , skill ) ;
39415: LD_INT 0
39417: PPUSH
39418: LD_VAR 0 8
39422: PPUSH
39423: LD_VAR 0 4
39427: PPUSH
39428: CALL_OW 380
// un := CreateHuman ;
39432: LD_ADDR_VAR 0 14
39436: PUSH
39437: CALL_OW 44
39441: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39442: LD_ADDR_VAR 0 7
39446: PUSH
39447: LD_VAR 0 7
39451: PPUSH
39452: LD_INT 1
39454: PPUSH
39455: LD_VAR 0 14
39459: PPUSH
39460: CALL_OW 2
39464: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39465: LD_VAR 0 14
39469: PPUSH
39470: LD_VAR 0 12
39474: PUSH
39475: LD_INT 1
39477: ARRAY
39478: PPUSH
39479: CALL_OW 52
// end ;
39483: GO 39122
39485: POP
39486: POP
// end ;
39487: GO 38424
39489: POP
39490: POP
// result := result ^ buildings ;
39491: LD_ADDR_VAR 0 7
39495: PUSH
39496: LD_VAR 0 7
39500: PUSH
39501: LD_VAR 0 18
39505: ADD
39506: ST_TO_ADDR
// end else
39507: GO 39650
// begin for i = 1 to personel do
39509: LD_ADDR_VAR 0 8
39513: PUSH
39514: DOUBLE
39515: LD_INT 1
39517: DEC
39518: ST_TO_ADDR
39519: LD_VAR 0 6
39523: PUSH
39524: FOR_TO
39525: IFFALSE 39648
// begin if i > 4 then
39527: LD_VAR 0 8
39531: PUSH
39532: LD_INT 4
39534: GREATER
39535: IFFALSE 39539
// break ;
39537: GO 39648
// x := personel [ i ] ;
39539: LD_ADDR_VAR 0 13
39543: PUSH
39544: LD_VAR 0 6
39548: PUSH
39549: LD_VAR 0 8
39553: ARRAY
39554: ST_TO_ADDR
// if x = - 1 then
39555: LD_VAR 0 13
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: EQUAL
39564: IFFALSE 39568
// continue ;
39566: GO 39524
// PrepareHuman ( false , i , skill ) ;
39568: LD_INT 0
39570: PPUSH
39571: LD_VAR 0 8
39575: PPUSH
39576: LD_VAR 0 4
39580: PPUSH
39581: CALL_OW 380
// un := CreateHuman ;
39585: LD_ADDR_VAR 0 14
39589: PUSH
39590: CALL_OW 44
39594: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39595: LD_VAR 0 14
39599: PPUSH
39600: LD_VAR 0 1
39604: PPUSH
39605: CALL_OW 250
39609: PPUSH
39610: LD_VAR 0 1
39614: PPUSH
39615: CALL_OW 251
39619: PPUSH
39620: LD_INT 10
39622: PPUSH
39623: LD_INT 0
39625: PPUSH
39626: CALL_OW 50
// result := result ^ un ;
39630: LD_ADDR_VAR 0 7
39634: PUSH
39635: LD_VAR 0 7
39639: PUSH
39640: LD_VAR 0 14
39644: ADD
39645: ST_TO_ADDR
// end ;
39646: GO 39524
39648: POP
39649: POP
// end ; end ;
39650: LD_VAR 0 7
39654: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39655: LD_INT 0
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
39663: PPUSH
39664: PPUSH
39665: PPUSH
39666: PPUSH
39667: PPUSH
39668: PPUSH
39669: PPUSH
39670: PPUSH
39671: PPUSH
39672: PPUSH
// result := false ;
39673: LD_ADDR_VAR 0 3
39677: PUSH
39678: LD_INT 0
39680: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39681: LD_VAR 0 1
39685: NOT
39686: PUSH
39687: LD_VAR 0 1
39691: PPUSH
39692: CALL_OW 266
39696: PUSH
39697: LD_INT 32
39699: PUSH
39700: LD_INT 33
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: IN
39707: NOT
39708: OR
39709: IFFALSE 39713
// exit ;
39711: GO 40822
// nat := GetNation ( tower ) ;
39713: LD_ADDR_VAR 0 12
39717: PUSH
39718: LD_VAR 0 1
39722: PPUSH
39723: CALL_OW 248
39727: ST_TO_ADDR
// side := GetSide ( tower ) ;
39728: LD_ADDR_VAR 0 16
39732: PUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 255
39742: ST_TO_ADDR
// x := GetX ( tower ) ;
39743: LD_ADDR_VAR 0 10
39747: PUSH
39748: LD_VAR 0 1
39752: PPUSH
39753: CALL_OW 250
39757: ST_TO_ADDR
// y := GetY ( tower ) ;
39758: LD_ADDR_VAR 0 11
39762: PUSH
39763: LD_VAR 0 1
39767: PPUSH
39768: CALL_OW 251
39772: ST_TO_ADDR
// if not x or not y then
39773: LD_VAR 0 10
39777: NOT
39778: PUSH
39779: LD_VAR 0 11
39783: NOT
39784: OR
39785: IFFALSE 39789
// exit ;
39787: GO 40822
// weapon := 0 ;
39789: LD_ADDR_VAR 0 18
39793: PUSH
39794: LD_INT 0
39796: ST_TO_ADDR
// fac_list := [ ] ;
39797: LD_ADDR_VAR 0 17
39801: PUSH
39802: EMPTY
39803: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39804: LD_ADDR_VAR 0 6
39808: PUSH
39809: LD_VAR 0 1
39813: PPUSH
39814: CALL_OW 274
39818: PPUSH
39819: LD_VAR 0 2
39823: PPUSH
39824: LD_INT 0
39826: PPUSH
39827: CALL 37393 0 3
39831: PPUSH
39832: LD_INT 30
39834: PUSH
39835: LD_INT 3
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PPUSH
39842: CALL_OW 72
39846: ST_TO_ADDR
// if not factories then
39847: LD_VAR 0 6
39851: NOT
39852: IFFALSE 39856
// exit ;
39854: GO 40822
// for i in factories do
39856: LD_ADDR_VAR 0 8
39860: PUSH
39861: LD_VAR 0 6
39865: PUSH
39866: FOR_IN
39867: IFFALSE 39892
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39869: LD_ADDR_VAR 0 17
39873: PUSH
39874: LD_VAR 0 17
39878: PUSH
39879: LD_VAR 0 8
39883: PPUSH
39884: CALL_OW 478
39888: UNION
39889: ST_TO_ADDR
39890: GO 39866
39892: POP
39893: POP
// if not fac_list then
39894: LD_VAR 0 17
39898: NOT
39899: IFFALSE 39903
// exit ;
39901: GO 40822
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39903: LD_ADDR_VAR 0 5
39907: PUSH
39908: LD_INT 4
39910: PUSH
39911: LD_INT 5
39913: PUSH
39914: LD_INT 9
39916: PUSH
39917: LD_INT 10
39919: PUSH
39920: LD_INT 6
39922: PUSH
39923: LD_INT 7
39925: PUSH
39926: LD_INT 11
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 27
39940: PUSH
39941: LD_INT 28
39943: PUSH
39944: LD_INT 26
39946: PUSH
39947: LD_INT 30
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 43
39958: PUSH
39959: LD_INT 44
39961: PUSH
39962: LD_INT 46
39964: PUSH
39965: LD_INT 45
39967: PUSH
39968: LD_INT 47
39970: PUSH
39971: LD_INT 49
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: LIST
39986: PUSH
39987: LD_VAR 0 12
39991: ARRAY
39992: ST_TO_ADDR
// list := list isect fac_list ;
39993: LD_ADDR_VAR 0 5
39997: PUSH
39998: LD_VAR 0 5
40002: PUSH
40003: LD_VAR 0 17
40007: ISECT
40008: ST_TO_ADDR
// if not list then
40009: LD_VAR 0 5
40013: NOT
40014: IFFALSE 40018
// exit ;
40016: GO 40822
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40018: LD_VAR 0 12
40022: PUSH
40023: LD_INT 3
40025: EQUAL
40026: PUSH
40027: LD_INT 49
40029: PUSH
40030: LD_VAR 0 5
40034: IN
40035: AND
40036: PUSH
40037: LD_INT 31
40039: PPUSH
40040: LD_VAR 0 16
40044: PPUSH
40045: CALL_OW 321
40049: PUSH
40050: LD_INT 2
40052: EQUAL
40053: AND
40054: IFFALSE 40114
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40056: LD_INT 22
40058: PUSH
40059: LD_VAR 0 16
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 35
40070: PUSH
40071: LD_INT 49
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 91
40080: PUSH
40081: LD_VAR 0 1
40085: PUSH
40086: LD_INT 10
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: LIST
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: PPUSH
40099: CALL_OW 69
40103: NOT
40104: IFFALSE 40114
// weapon := ru_time_lapser ;
40106: LD_ADDR_VAR 0 18
40110: PUSH
40111: LD_INT 49
40113: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40114: LD_VAR 0 12
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: IN
40129: PUSH
40130: LD_INT 11
40132: PUSH
40133: LD_VAR 0 5
40137: IN
40138: PUSH
40139: LD_INT 30
40141: PUSH
40142: LD_VAR 0 5
40146: IN
40147: OR
40148: AND
40149: PUSH
40150: LD_INT 6
40152: PPUSH
40153: LD_VAR 0 16
40157: PPUSH
40158: CALL_OW 321
40162: PUSH
40163: LD_INT 2
40165: EQUAL
40166: AND
40167: IFFALSE 40332
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40169: LD_INT 22
40171: PUSH
40172: LD_VAR 0 16
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: PUSH
40184: LD_INT 35
40186: PUSH
40187: LD_INT 11
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 35
40196: PUSH
40197: LD_INT 30
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 91
40211: PUSH
40212: LD_VAR 0 1
40216: PUSH
40217: LD_INT 18
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: LIST
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: LIST
40229: PPUSH
40230: CALL_OW 69
40234: NOT
40235: PUSH
40236: LD_INT 22
40238: PUSH
40239: LD_VAR 0 16
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: LD_INT 30
40253: PUSH
40254: LD_INT 32
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 30
40263: PUSH
40264: LD_INT 33
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 91
40278: PUSH
40279: LD_VAR 0 1
40283: PUSH
40284: LD_INT 12
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: PUSH
40297: EMPTY
40298: LIST
40299: PPUSH
40300: CALL_OW 69
40304: PUSH
40305: LD_INT 2
40307: GREATER
40308: AND
40309: IFFALSE 40332
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40311: LD_ADDR_VAR 0 18
40315: PUSH
40316: LD_INT 11
40318: PUSH
40319: LD_INT 30
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_VAR 0 12
40330: ARRAY
40331: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40332: LD_VAR 0 18
40336: NOT
40337: PUSH
40338: LD_INT 40
40340: PPUSH
40341: LD_VAR 0 16
40345: PPUSH
40346: CALL_OW 321
40350: PUSH
40351: LD_INT 2
40353: EQUAL
40354: AND
40355: PUSH
40356: LD_INT 7
40358: PUSH
40359: LD_VAR 0 5
40363: IN
40364: PUSH
40365: LD_INT 28
40367: PUSH
40368: LD_VAR 0 5
40372: IN
40373: OR
40374: PUSH
40375: LD_INT 45
40377: PUSH
40378: LD_VAR 0 5
40382: IN
40383: OR
40384: AND
40385: IFFALSE 40639
// begin hex := GetHexInfo ( x , y ) ;
40387: LD_ADDR_VAR 0 4
40391: PUSH
40392: LD_VAR 0 10
40396: PPUSH
40397: LD_VAR 0 11
40401: PPUSH
40402: CALL_OW 546
40406: ST_TO_ADDR
// if hex [ 1 ] then
40407: LD_VAR 0 4
40411: PUSH
40412: LD_INT 1
40414: ARRAY
40415: IFFALSE 40419
// exit ;
40417: GO 40822
// height := hex [ 2 ] ;
40419: LD_ADDR_VAR 0 15
40423: PUSH
40424: LD_VAR 0 4
40428: PUSH
40429: LD_INT 2
40431: ARRAY
40432: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40433: LD_ADDR_VAR 0 14
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 3
40446: PUSH
40447: LD_INT 5
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: LIST
40454: LIST
40455: ST_TO_ADDR
// for i in tmp do
40456: LD_ADDR_VAR 0 8
40460: PUSH
40461: LD_VAR 0 14
40465: PUSH
40466: FOR_IN
40467: IFFALSE 40637
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40469: LD_ADDR_VAR 0 9
40473: PUSH
40474: LD_VAR 0 10
40478: PPUSH
40479: LD_VAR 0 8
40483: PPUSH
40484: LD_INT 5
40486: PPUSH
40487: CALL_OW 272
40491: PUSH
40492: LD_VAR 0 11
40496: PPUSH
40497: LD_VAR 0 8
40501: PPUSH
40502: LD_INT 5
40504: PPUSH
40505: CALL_OW 273
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40514: LD_VAR 0 9
40518: PUSH
40519: LD_INT 1
40521: ARRAY
40522: PPUSH
40523: LD_VAR 0 9
40527: PUSH
40528: LD_INT 2
40530: ARRAY
40531: PPUSH
40532: CALL_OW 488
40536: IFFALSE 40635
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40538: LD_ADDR_VAR 0 4
40542: PUSH
40543: LD_VAR 0 9
40547: PUSH
40548: LD_INT 1
40550: ARRAY
40551: PPUSH
40552: LD_VAR 0 9
40556: PUSH
40557: LD_INT 2
40559: ARRAY
40560: PPUSH
40561: CALL_OW 546
40565: ST_TO_ADDR
// if hex [ 1 ] then
40566: LD_VAR 0 4
40570: PUSH
40571: LD_INT 1
40573: ARRAY
40574: IFFALSE 40578
// continue ;
40576: GO 40466
// h := hex [ 2 ] ;
40578: LD_ADDR_VAR 0 13
40582: PUSH
40583: LD_VAR 0 4
40587: PUSH
40588: LD_INT 2
40590: ARRAY
40591: ST_TO_ADDR
// if h + 7 < height then
40592: LD_VAR 0 13
40596: PUSH
40597: LD_INT 7
40599: PLUS
40600: PUSH
40601: LD_VAR 0 15
40605: LESS
40606: IFFALSE 40635
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40608: LD_ADDR_VAR 0 18
40612: PUSH
40613: LD_INT 7
40615: PUSH
40616: LD_INT 28
40618: PUSH
40619: LD_INT 45
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: PUSH
40627: LD_VAR 0 12
40631: ARRAY
40632: ST_TO_ADDR
// break ;
40633: GO 40637
// end ; end ; end ;
40635: GO 40466
40637: POP
40638: POP
// end ; if not weapon then
40639: LD_VAR 0 18
40643: NOT
40644: IFFALSE 40704
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40646: LD_ADDR_VAR 0 5
40650: PUSH
40651: LD_VAR 0 5
40655: PUSH
40656: LD_INT 11
40658: PUSH
40659: LD_INT 30
40661: PUSH
40662: LD_INT 49
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: LIST
40669: DIFF
40670: ST_TO_ADDR
// if not list then
40671: LD_VAR 0 5
40675: NOT
40676: IFFALSE 40680
// exit ;
40678: GO 40822
// weapon := list [ rand ( 1 , list ) ] ;
40680: LD_ADDR_VAR 0 18
40684: PUSH
40685: LD_VAR 0 5
40689: PUSH
40690: LD_INT 1
40692: PPUSH
40693: LD_VAR 0 5
40697: PPUSH
40698: CALL_OW 12
40702: ARRAY
40703: ST_TO_ADDR
// end ; if weapon then
40704: LD_VAR 0 18
40708: IFFALSE 40822
// begin tmp := CostOfWeapon ( weapon ) ;
40710: LD_ADDR_VAR 0 14
40714: PUSH
40715: LD_VAR 0 18
40719: PPUSH
40720: CALL_OW 451
40724: ST_TO_ADDR
// j := GetBase ( tower ) ;
40725: LD_ADDR_VAR 0 9
40729: PUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 274
40739: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40740: LD_VAR 0 9
40744: PPUSH
40745: LD_INT 1
40747: PPUSH
40748: CALL_OW 275
40752: PUSH
40753: LD_VAR 0 14
40757: PUSH
40758: LD_INT 1
40760: ARRAY
40761: GREATEREQUAL
40762: PUSH
40763: LD_VAR 0 9
40767: PPUSH
40768: LD_INT 2
40770: PPUSH
40771: CALL_OW 275
40775: PUSH
40776: LD_VAR 0 14
40780: PUSH
40781: LD_INT 2
40783: ARRAY
40784: GREATEREQUAL
40785: AND
40786: PUSH
40787: LD_VAR 0 9
40791: PPUSH
40792: LD_INT 3
40794: PPUSH
40795: CALL_OW 275
40799: PUSH
40800: LD_VAR 0 14
40804: PUSH
40805: LD_INT 3
40807: ARRAY
40808: GREATEREQUAL
40809: AND
40810: IFFALSE 40822
// result := weapon ;
40812: LD_ADDR_VAR 0 3
40816: PUSH
40817: LD_VAR 0 18
40821: ST_TO_ADDR
// end ; end ;
40822: LD_VAR 0 3
40826: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40827: LD_INT 0
40829: PPUSH
40830: PPUSH
// result := true ;
40831: LD_ADDR_VAR 0 3
40835: PUSH
40836: LD_INT 1
40838: ST_TO_ADDR
// if array1 = array2 then
40839: LD_VAR 0 1
40843: PUSH
40844: LD_VAR 0 2
40848: EQUAL
40849: IFFALSE 40909
// begin for i = 1 to array1 do
40851: LD_ADDR_VAR 0 4
40855: PUSH
40856: DOUBLE
40857: LD_INT 1
40859: DEC
40860: ST_TO_ADDR
40861: LD_VAR 0 1
40865: PUSH
40866: FOR_TO
40867: IFFALSE 40905
// if array1 [ i ] <> array2 [ i ] then
40869: LD_VAR 0 1
40873: PUSH
40874: LD_VAR 0 4
40878: ARRAY
40879: PUSH
40880: LD_VAR 0 2
40884: PUSH
40885: LD_VAR 0 4
40889: ARRAY
40890: NONEQUAL
40891: IFFALSE 40903
// begin result := false ;
40893: LD_ADDR_VAR 0 3
40897: PUSH
40898: LD_INT 0
40900: ST_TO_ADDR
// break ;
40901: GO 40905
// end ;
40903: GO 40866
40905: POP
40906: POP
// end else
40907: GO 40917
// result := false ;
40909: LD_ADDR_VAR 0 3
40913: PUSH
40914: LD_INT 0
40916: ST_TO_ADDR
// end ;
40917: LD_VAR 0 3
40921: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40922: LD_INT 0
40924: PPUSH
40925: PPUSH
// if not array1 or not array2 then
40926: LD_VAR 0 1
40930: NOT
40931: PUSH
40932: LD_VAR 0 2
40936: NOT
40937: OR
40938: IFFALSE 40942
// exit ;
40940: GO 41006
// result := true ;
40942: LD_ADDR_VAR 0 3
40946: PUSH
40947: LD_INT 1
40949: ST_TO_ADDR
// for i = 1 to array1 do
40950: LD_ADDR_VAR 0 4
40954: PUSH
40955: DOUBLE
40956: LD_INT 1
40958: DEC
40959: ST_TO_ADDR
40960: LD_VAR 0 1
40964: PUSH
40965: FOR_TO
40966: IFFALSE 41004
// if array1 [ i ] <> array2 [ i ] then
40968: LD_VAR 0 1
40972: PUSH
40973: LD_VAR 0 4
40977: ARRAY
40978: PUSH
40979: LD_VAR 0 2
40983: PUSH
40984: LD_VAR 0 4
40988: ARRAY
40989: NONEQUAL
40990: IFFALSE 41002
// begin result := false ;
40992: LD_ADDR_VAR 0 3
40996: PUSH
40997: LD_INT 0
40999: ST_TO_ADDR
// break ;
41000: GO 41004
// end ;
41002: GO 40965
41004: POP
41005: POP
// end ;
41006: LD_VAR 0 3
41010: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41011: LD_INT 0
41013: PPUSH
41014: PPUSH
41015: PPUSH
// pom := GetBase ( fac ) ;
41016: LD_ADDR_VAR 0 5
41020: PUSH
41021: LD_VAR 0 1
41025: PPUSH
41026: CALL_OW 274
41030: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41031: LD_ADDR_VAR 0 4
41035: PUSH
41036: LD_VAR 0 2
41040: PUSH
41041: LD_INT 1
41043: ARRAY
41044: PPUSH
41045: LD_VAR 0 2
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: PPUSH
41054: LD_VAR 0 2
41058: PUSH
41059: LD_INT 3
41061: ARRAY
41062: PPUSH
41063: LD_VAR 0 2
41067: PUSH
41068: LD_INT 4
41070: ARRAY
41071: PPUSH
41072: CALL_OW 449
41076: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41077: LD_ADDR_VAR 0 3
41081: PUSH
41082: LD_VAR 0 5
41086: PPUSH
41087: LD_INT 1
41089: PPUSH
41090: CALL_OW 275
41094: PUSH
41095: LD_VAR 0 4
41099: PUSH
41100: LD_INT 1
41102: ARRAY
41103: GREATEREQUAL
41104: PUSH
41105: LD_VAR 0 5
41109: PPUSH
41110: LD_INT 2
41112: PPUSH
41113: CALL_OW 275
41117: PUSH
41118: LD_VAR 0 4
41122: PUSH
41123: LD_INT 2
41125: ARRAY
41126: GREATEREQUAL
41127: AND
41128: PUSH
41129: LD_VAR 0 5
41133: PPUSH
41134: LD_INT 3
41136: PPUSH
41137: CALL_OW 275
41141: PUSH
41142: LD_VAR 0 4
41146: PUSH
41147: LD_INT 3
41149: ARRAY
41150: GREATEREQUAL
41151: AND
41152: ST_TO_ADDR
// end ;
41153: LD_VAR 0 3
41157: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41158: LD_INT 0
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
// pom := GetBase ( building ) ;
41164: LD_ADDR_VAR 0 3
41168: PUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 274
41178: ST_TO_ADDR
// if not pom then
41179: LD_VAR 0 3
41183: NOT
41184: IFFALSE 41188
// exit ;
41186: GO 41358
// btype := GetBType ( building ) ;
41188: LD_ADDR_VAR 0 5
41192: PUSH
41193: LD_VAR 0 1
41197: PPUSH
41198: CALL_OW 266
41202: ST_TO_ADDR
// if btype = b_armoury then
41203: LD_VAR 0 5
41207: PUSH
41208: LD_INT 4
41210: EQUAL
41211: IFFALSE 41221
// btype := b_barracks ;
41213: LD_ADDR_VAR 0 5
41217: PUSH
41218: LD_INT 5
41220: ST_TO_ADDR
// if btype = b_depot then
41221: LD_VAR 0 5
41225: PUSH
41226: LD_INT 0
41228: EQUAL
41229: IFFALSE 41239
// btype := b_warehouse ;
41231: LD_ADDR_VAR 0 5
41235: PUSH
41236: LD_INT 1
41238: ST_TO_ADDR
// if btype = b_workshop then
41239: LD_VAR 0 5
41243: PUSH
41244: LD_INT 2
41246: EQUAL
41247: IFFALSE 41257
// btype := b_factory ;
41249: LD_ADDR_VAR 0 5
41253: PUSH
41254: LD_INT 3
41256: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41257: LD_ADDR_VAR 0 4
41261: PUSH
41262: LD_VAR 0 5
41266: PPUSH
41267: LD_VAR 0 1
41271: PPUSH
41272: CALL_OW 248
41276: PPUSH
41277: CALL_OW 450
41281: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41282: LD_ADDR_VAR 0 2
41286: PUSH
41287: LD_VAR 0 3
41291: PPUSH
41292: LD_INT 1
41294: PPUSH
41295: CALL_OW 275
41299: PUSH
41300: LD_VAR 0 4
41304: PUSH
41305: LD_INT 1
41307: ARRAY
41308: GREATEREQUAL
41309: PUSH
41310: LD_VAR 0 3
41314: PPUSH
41315: LD_INT 2
41317: PPUSH
41318: CALL_OW 275
41322: PUSH
41323: LD_VAR 0 4
41327: PUSH
41328: LD_INT 2
41330: ARRAY
41331: GREATEREQUAL
41332: AND
41333: PUSH
41334: LD_VAR 0 3
41338: PPUSH
41339: LD_INT 3
41341: PPUSH
41342: CALL_OW 275
41346: PUSH
41347: LD_VAR 0 4
41351: PUSH
41352: LD_INT 3
41354: ARRAY
41355: GREATEREQUAL
41356: AND
41357: ST_TO_ADDR
// end ;
41358: LD_VAR 0 2
41362: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41363: LD_INT 0
41365: PPUSH
41366: PPUSH
41367: PPUSH
// pom := GetBase ( building ) ;
41368: LD_ADDR_VAR 0 4
41372: PUSH
41373: LD_VAR 0 1
41377: PPUSH
41378: CALL_OW 274
41382: ST_TO_ADDR
// if not pom then
41383: LD_VAR 0 4
41387: NOT
41388: IFFALSE 41392
// exit ;
41390: GO 41493
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41392: LD_ADDR_VAR 0 5
41396: PUSH
41397: LD_VAR 0 2
41401: PPUSH
41402: LD_VAR 0 1
41406: PPUSH
41407: CALL_OW 248
41411: PPUSH
41412: CALL_OW 450
41416: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41417: LD_ADDR_VAR 0 3
41421: PUSH
41422: LD_VAR 0 4
41426: PPUSH
41427: LD_INT 1
41429: PPUSH
41430: CALL_OW 275
41434: PUSH
41435: LD_VAR 0 5
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: GREATEREQUAL
41444: PUSH
41445: LD_VAR 0 4
41449: PPUSH
41450: LD_INT 2
41452: PPUSH
41453: CALL_OW 275
41457: PUSH
41458: LD_VAR 0 5
41462: PUSH
41463: LD_INT 2
41465: ARRAY
41466: GREATEREQUAL
41467: AND
41468: PUSH
41469: LD_VAR 0 4
41473: PPUSH
41474: LD_INT 3
41476: PPUSH
41477: CALL_OW 275
41481: PUSH
41482: LD_VAR 0 5
41486: PUSH
41487: LD_INT 3
41489: ARRAY
41490: GREATEREQUAL
41491: AND
41492: ST_TO_ADDR
// end ;
41493: LD_VAR 0 3
41497: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41498: LD_INT 0
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
41508: PPUSH
41509: PPUSH
41510: PPUSH
// result := false ;
41511: LD_ADDR_VAR 0 8
41515: PUSH
41516: LD_INT 0
41518: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41519: LD_VAR 0 5
41523: NOT
41524: PUSH
41525: LD_VAR 0 1
41529: NOT
41530: OR
41531: PUSH
41532: LD_VAR 0 2
41536: NOT
41537: OR
41538: PUSH
41539: LD_VAR 0 3
41543: NOT
41544: OR
41545: IFFALSE 41549
// exit ;
41547: GO 42363
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41549: LD_ADDR_VAR 0 14
41553: PUSH
41554: LD_VAR 0 1
41558: PPUSH
41559: LD_VAR 0 2
41563: PPUSH
41564: LD_VAR 0 3
41568: PPUSH
41569: LD_VAR 0 4
41573: PPUSH
41574: LD_VAR 0 5
41578: PUSH
41579: LD_INT 1
41581: ARRAY
41582: PPUSH
41583: CALL_OW 248
41587: PPUSH
41588: LD_INT 0
41590: PPUSH
41591: CALL 43616 0 6
41595: ST_TO_ADDR
// if not hexes then
41596: LD_VAR 0 14
41600: NOT
41601: IFFALSE 41605
// exit ;
41603: GO 42363
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41605: LD_ADDR_VAR 0 17
41609: PUSH
41610: LD_VAR 0 5
41614: PPUSH
41615: LD_INT 22
41617: PUSH
41618: LD_VAR 0 13
41622: PPUSH
41623: CALL_OW 255
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: PUSH
41635: LD_INT 30
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 30
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PPUSH
41664: CALL_OW 72
41668: ST_TO_ADDR
// for i = 1 to hexes do
41669: LD_ADDR_VAR 0 9
41673: PUSH
41674: DOUBLE
41675: LD_INT 1
41677: DEC
41678: ST_TO_ADDR
41679: LD_VAR 0 14
41683: PUSH
41684: FOR_TO
41685: IFFALSE 42361
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41687: LD_ADDR_VAR 0 13
41691: PUSH
41692: LD_VAR 0 14
41696: PUSH
41697: LD_VAR 0 9
41701: ARRAY
41702: PUSH
41703: LD_INT 1
41705: ARRAY
41706: PPUSH
41707: LD_VAR 0 14
41711: PUSH
41712: LD_VAR 0 9
41716: ARRAY
41717: PUSH
41718: LD_INT 2
41720: ARRAY
41721: PPUSH
41722: CALL_OW 428
41726: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41727: LD_VAR 0 14
41731: PUSH
41732: LD_VAR 0 9
41736: ARRAY
41737: PUSH
41738: LD_INT 1
41740: ARRAY
41741: PPUSH
41742: LD_VAR 0 14
41746: PUSH
41747: LD_VAR 0 9
41751: ARRAY
41752: PUSH
41753: LD_INT 2
41755: ARRAY
41756: PPUSH
41757: CALL_OW 351
41761: PUSH
41762: LD_VAR 0 14
41766: PUSH
41767: LD_VAR 0 9
41771: ARRAY
41772: PUSH
41773: LD_INT 1
41775: ARRAY
41776: PPUSH
41777: LD_VAR 0 14
41781: PUSH
41782: LD_VAR 0 9
41786: ARRAY
41787: PUSH
41788: LD_INT 2
41790: ARRAY
41791: PPUSH
41792: CALL_OW 488
41796: NOT
41797: OR
41798: PUSH
41799: LD_VAR 0 13
41803: PPUSH
41804: CALL_OW 247
41808: PUSH
41809: LD_INT 3
41811: EQUAL
41812: OR
41813: IFFALSE 41819
// exit ;
41815: POP
41816: POP
41817: GO 42363
// if not tmp then
41819: LD_VAR 0 13
41823: NOT
41824: IFFALSE 41828
// continue ;
41826: GO 41684
// result := true ;
41828: LD_ADDR_VAR 0 8
41832: PUSH
41833: LD_INT 1
41835: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41836: LD_VAR 0 6
41840: PUSH
41841: LD_VAR 0 13
41845: PPUSH
41846: CALL_OW 247
41850: PUSH
41851: LD_INT 2
41853: EQUAL
41854: AND
41855: PUSH
41856: LD_VAR 0 13
41860: PPUSH
41861: CALL_OW 263
41865: PUSH
41866: LD_INT 1
41868: EQUAL
41869: AND
41870: IFFALSE 42034
// begin if IsDrivenBy ( tmp ) then
41872: LD_VAR 0 13
41876: PPUSH
41877: CALL_OW 311
41881: IFFALSE 41885
// continue ;
41883: GO 41684
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41885: LD_VAR 0 6
41889: PPUSH
41890: LD_INT 3
41892: PUSH
41893: LD_INT 60
41895: PUSH
41896: EMPTY
41897: LIST
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 3
41905: PUSH
41906: LD_INT 55
41908: PUSH
41909: EMPTY
41910: LIST
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PPUSH
41920: CALL_OW 72
41924: IFFALSE 42032
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41926: LD_ADDR_VAR 0 18
41930: PUSH
41931: LD_VAR 0 6
41935: PPUSH
41936: LD_INT 3
41938: PUSH
41939: LD_INT 60
41941: PUSH
41942: EMPTY
41943: LIST
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 3
41951: PUSH
41952: LD_INT 55
41954: PUSH
41955: EMPTY
41956: LIST
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PPUSH
41966: CALL_OW 72
41970: PUSH
41971: LD_INT 1
41973: ARRAY
41974: ST_TO_ADDR
// if IsInUnit ( driver ) then
41975: LD_VAR 0 18
41979: PPUSH
41980: CALL_OW 310
41984: IFFALSE 41995
// ComExit ( driver ) ;
41986: LD_VAR 0 18
41990: PPUSH
41991: CALL 67397 0 1
// AddComEnterUnit ( driver , tmp ) ;
41995: LD_VAR 0 18
41999: PPUSH
42000: LD_VAR 0 13
42004: PPUSH
42005: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42009: LD_VAR 0 18
42013: PPUSH
42014: LD_VAR 0 7
42018: PPUSH
42019: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42023: LD_VAR 0 18
42027: PPUSH
42028: CALL_OW 181
// end ; continue ;
42032: GO 41684
// end ; if not cleaners or not tmp in cleaners then
42034: LD_VAR 0 6
42038: NOT
42039: PUSH
42040: LD_VAR 0 13
42044: PUSH
42045: LD_VAR 0 6
42049: IN
42050: NOT
42051: OR
42052: IFFALSE 42359
// begin if dep then
42054: LD_VAR 0 17
42058: IFFALSE 42194
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42060: LD_ADDR_VAR 0 16
42064: PUSH
42065: LD_VAR 0 17
42069: PUSH
42070: LD_INT 1
42072: ARRAY
42073: PPUSH
42074: CALL_OW 250
42078: PPUSH
42079: LD_VAR 0 17
42083: PUSH
42084: LD_INT 1
42086: ARRAY
42087: PPUSH
42088: CALL_OW 254
42092: PPUSH
42093: LD_INT 5
42095: PPUSH
42096: CALL_OW 272
42100: PUSH
42101: LD_VAR 0 17
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: PPUSH
42110: CALL_OW 251
42114: PPUSH
42115: LD_VAR 0 17
42119: PUSH
42120: LD_INT 1
42122: ARRAY
42123: PPUSH
42124: CALL_OW 254
42128: PPUSH
42129: LD_INT 5
42131: PPUSH
42132: CALL_OW 273
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42141: LD_VAR 0 16
42145: PUSH
42146: LD_INT 1
42148: ARRAY
42149: PPUSH
42150: LD_VAR 0 16
42154: PUSH
42155: LD_INT 2
42157: ARRAY
42158: PPUSH
42159: CALL_OW 488
42163: IFFALSE 42194
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42165: LD_VAR 0 13
42169: PPUSH
42170: LD_VAR 0 16
42174: PUSH
42175: LD_INT 1
42177: ARRAY
42178: PPUSH
42179: LD_VAR 0 16
42183: PUSH
42184: LD_INT 2
42186: ARRAY
42187: PPUSH
42188: CALL_OW 111
// continue ;
42192: GO 41684
// end ; end ; r := GetDir ( tmp ) ;
42194: LD_ADDR_VAR 0 15
42198: PUSH
42199: LD_VAR 0 13
42203: PPUSH
42204: CALL_OW 254
42208: ST_TO_ADDR
// if r = 5 then
42209: LD_VAR 0 15
42213: PUSH
42214: LD_INT 5
42216: EQUAL
42217: IFFALSE 42227
// r := 0 ;
42219: LD_ADDR_VAR 0 15
42223: PUSH
42224: LD_INT 0
42226: ST_TO_ADDR
// for j = r to 5 do
42227: LD_ADDR_VAR 0 10
42231: PUSH
42232: DOUBLE
42233: LD_VAR 0 15
42237: DEC
42238: ST_TO_ADDR
42239: LD_INT 5
42241: PUSH
42242: FOR_TO
42243: IFFALSE 42357
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42245: LD_ADDR_VAR 0 11
42249: PUSH
42250: LD_VAR 0 13
42254: PPUSH
42255: CALL_OW 250
42259: PPUSH
42260: LD_VAR 0 10
42264: PPUSH
42265: LD_INT 2
42267: PPUSH
42268: CALL_OW 272
42272: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42273: LD_ADDR_VAR 0 12
42277: PUSH
42278: LD_VAR 0 13
42282: PPUSH
42283: CALL_OW 251
42287: PPUSH
42288: LD_VAR 0 10
42292: PPUSH
42293: LD_INT 2
42295: PPUSH
42296: CALL_OW 273
42300: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42301: LD_VAR 0 11
42305: PPUSH
42306: LD_VAR 0 12
42310: PPUSH
42311: CALL_OW 488
42315: PUSH
42316: LD_VAR 0 11
42320: PPUSH
42321: LD_VAR 0 12
42325: PPUSH
42326: CALL_OW 428
42330: NOT
42331: AND
42332: IFFALSE 42355
// begin ComMoveXY ( tmp , _x , _y ) ;
42334: LD_VAR 0 13
42338: PPUSH
42339: LD_VAR 0 11
42343: PPUSH
42344: LD_VAR 0 12
42348: PPUSH
42349: CALL_OW 111
// break ;
42353: GO 42357
// end ; end ;
42355: GO 42242
42357: POP
42358: POP
// end ; end ;
42359: GO 41684
42361: POP
42362: POP
// end ;
42363: LD_VAR 0 8
42367: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42368: LD_INT 0
42370: PPUSH
// result := true ;
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 1
42378: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42379: LD_VAR 0 2
42383: PUSH
42384: LD_INT 24
42386: DOUBLE
42387: EQUAL
42388: IFTRUE 42398
42390: LD_INT 33
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42423
42398: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 32
42406: PPUSH
42407: LD_VAR 0 1
42411: PPUSH
42412: CALL_OW 321
42416: PUSH
42417: LD_INT 2
42419: EQUAL
42420: ST_TO_ADDR
42421: GO 42739
42423: LD_INT 20
42425: DOUBLE
42426: EQUAL
42427: IFTRUE 42431
42429: GO 42456
42431: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42432: LD_ADDR_VAR 0 3
42436: PUSH
42437: LD_INT 6
42439: PPUSH
42440: LD_VAR 0 1
42444: PPUSH
42445: CALL_OW 321
42449: PUSH
42450: LD_INT 2
42452: EQUAL
42453: ST_TO_ADDR
42454: GO 42739
42456: LD_INT 22
42458: DOUBLE
42459: EQUAL
42460: IFTRUE 42470
42462: LD_INT 36
42464: DOUBLE
42465: EQUAL
42466: IFTRUE 42470
42468: GO 42495
42470: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42471: LD_ADDR_VAR 0 3
42475: PUSH
42476: LD_INT 15
42478: PPUSH
42479: LD_VAR 0 1
42483: PPUSH
42484: CALL_OW 321
42488: PUSH
42489: LD_INT 2
42491: EQUAL
42492: ST_TO_ADDR
42493: GO 42739
42495: LD_INT 30
42497: DOUBLE
42498: EQUAL
42499: IFTRUE 42503
42501: GO 42528
42503: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42504: LD_ADDR_VAR 0 3
42508: PUSH
42509: LD_INT 20
42511: PPUSH
42512: LD_VAR 0 1
42516: PPUSH
42517: CALL_OW 321
42521: PUSH
42522: LD_INT 2
42524: EQUAL
42525: ST_TO_ADDR
42526: GO 42739
42528: LD_INT 28
42530: DOUBLE
42531: EQUAL
42532: IFTRUE 42542
42534: LD_INT 21
42536: DOUBLE
42537: EQUAL
42538: IFTRUE 42542
42540: GO 42567
42542: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42543: LD_ADDR_VAR 0 3
42547: PUSH
42548: LD_INT 21
42550: PPUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 321
42560: PUSH
42561: LD_INT 2
42563: EQUAL
42564: ST_TO_ADDR
42565: GO 42739
42567: LD_INT 16
42569: DOUBLE
42570: EQUAL
42571: IFTRUE 42575
42573: GO 42600
42575: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42576: LD_ADDR_VAR 0 3
42580: PUSH
42581: LD_INT 84
42583: PPUSH
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 321
42593: PUSH
42594: LD_INT 2
42596: EQUAL
42597: ST_TO_ADDR
42598: GO 42739
42600: LD_INT 19
42602: DOUBLE
42603: EQUAL
42604: IFTRUE 42614
42606: LD_INT 23
42608: DOUBLE
42609: EQUAL
42610: IFTRUE 42614
42612: GO 42639
42614: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42615: LD_ADDR_VAR 0 3
42619: PUSH
42620: LD_INT 83
42622: PPUSH
42623: LD_VAR 0 1
42627: PPUSH
42628: CALL_OW 321
42632: PUSH
42633: LD_INT 2
42635: EQUAL
42636: ST_TO_ADDR
42637: GO 42739
42639: LD_INT 17
42641: DOUBLE
42642: EQUAL
42643: IFTRUE 42647
42645: GO 42672
42647: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42648: LD_ADDR_VAR 0 3
42652: PUSH
42653: LD_INT 39
42655: PPUSH
42656: LD_VAR 0 1
42660: PPUSH
42661: CALL_OW 321
42665: PUSH
42666: LD_INT 2
42668: EQUAL
42669: ST_TO_ADDR
42670: GO 42739
42672: LD_INT 18
42674: DOUBLE
42675: EQUAL
42676: IFTRUE 42680
42678: GO 42705
42680: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42681: LD_ADDR_VAR 0 3
42685: PUSH
42686: LD_INT 40
42688: PPUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 321
42698: PUSH
42699: LD_INT 2
42701: EQUAL
42702: ST_TO_ADDR
42703: GO 42739
42705: LD_INT 27
42707: DOUBLE
42708: EQUAL
42709: IFTRUE 42713
42711: GO 42738
42713: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42714: LD_ADDR_VAR 0 3
42718: PUSH
42719: LD_INT 35
42721: PPUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 321
42731: PUSH
42732: LD_INT 2
42734: EQUAL
42735: ST_TO_ADDR
42736: GO 42739
42738: POP
// end ;
42739: LD_VAR 0 3
42743: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42744: LD_INT 0
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
// result := false ;
42757: LD_ADDR_VAR 0 6
42761: PUSH
42762: LD_INT 0
42764: ST_TO_ADDR
// if btype = b_depot then
42765: LD_VAR 0 2
42769: PUSH
42770: LD_INT 0
42772: EQUAL
42773: IFFALSE 42785
// begin result := true ;
42775: LD_ADDR_VAR 0 6
42779: PUSH
42780: LD_INT 1
42782: ST_TO_ADDR
// exit ;
42783: GO 43611
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42785: LD_VAR 0 1
42789: NOT
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 266
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: IN
42811: NOT
42812: OR
42813: PUSH
42814: LD_VAR 0 2
42818: NOT
42819: OR
42820: PUSH
42821: LD_VAR 0 5
42825: PUSH
42826: LD_INT 0
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: LD_INT 3
42837: PUSH
42838: LD_INT 4
42840: PUSH
42841: LD_INT 5
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: IN
42852: NOT
42853: OR
42854: PUSH
42855: LD_VAR 0 3
42859: PPUSH
42860: LD_VAR 0 4
42864: PPUSH
42865: CALL_OW 488
42869: NOT
42870: OR
42871: IFFALSE 42875
// exit ;
42873: GO 43611
// side := GetSide ( depot ) ;
42875: LD_ADDR_VAR 0 9
42879: PUSH
42880: LD_VAR 0 1
42884: PPUSH
42885: CALL_OW 255
42889: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42890: LD_VAR 0 9
42894: PPUSH
42895: LD_VAR 0 2
42899: PPUSH
42900: CALL 42368 0 2
42904: NOT
42905: IFFALSE 42909
// exit ;
42907: GO 43611
// pom := GetBase ( depot ) ;
42909: LD_ADDR_VAR 0 10
42913: PUSH
42914: LD_VAR 0 1
42918: PPUSH
42919: CALL_OW 274
42923: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42924: LD_ADDR_VAR 0 11
42928: PUSH
42929: LD_VAR 0 2
42933: PPUSH
42934: LD_VAR 0 1
42938: PPUSH
42939: CALL_OW 248
42943: PPUSH
42944: CALL_OW 450
42948: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42949: LD_VAR 0 10
42953: PPUSH
42954: LD_INT 1
42956: PPUSH
42957: CALL_OW 275
42961: PUSH
42962: LD_VAR 0 11
42966: PUSH
42967: LD_INT 1
42969: ARRAY
42970: GREATEREQUAL
42971: PUSH
42972: LD_VAR 0 10
42976: PPUSH
42977: LD_INT 2
42979: PPUSH
42980: CALL_OW 275
42984: PUSH
42985: LD_VAR 0 11
42989: PUSH
42990: LD_INT 2
42992: ARRAY
42993: GREATEREQUAL
42994: AND
42995: PUSH
42996: LD_VAR 0 10
43000: PPUSH
43001: LD_INT 3
43003: PPUSH
43004: CALL_OW 275
43008: PUSH
43009: LD_VAR 0 11
43013: PUSH
43014: LD_INT 3
43016: ARRAY
43017: GREATEREQUAL
43018: AND
43019: NOT
43020: IFFALSE 43024
// exit ;
43022: GO 43611
// if GetBType ( depot ) = b_depot then
43024: LD_VAR 0 1
43028: PPUSH
43029: CALL_OW 266
43033: PUSH
43034: LD_INT 0
43036: EQUAL
43037: IFFALSE 43049
// dist := 28 else
43039: LD_ADDR_VAR 0 14
43043: PUSH
43044: LD_INT 28
43046: ST_TO_ADDR
43047: GO 43057
// dist := 36 ;
43049: LD_ADDR_VAR 0 14
43053: PUSH
43054: LD_INT 36
43056: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43057: LD_VAR 0 1
43061: PPUSH
43062: LD_VAR 0 3
43066: PPUSH
43067: LD_VAR 0 4
43071: PPUSH
43072: CALL_OW 297
43076: PUSH
43077: LD_VAR 0 14
43081: GREATER
43082: IFFALSE 43086
// exit ;
43084: GO 43611
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43086: LD_ADDR_VAR 0 12
43090: PUSH
43091: LD_VAR 0 2
43095: PPUSH
43096: LD_VAR 0 3
43100: PPUSH
43101: LD_VAR 0 4
43105: PPUSH
43106: LD_VAR 0 5
43110: PPUSH
43111: LD_VAR 0 1
43115: PPUSH
43116: CALL_OW 248
43120: PPUSH
43121: LD_INT 0
43123: PPUSH
43124: CALL 43616 0 6
43128: ST_TO_ADDR
// if not hexes then
43129: LD_VAR 0 12
43133: NOT
43134: IFFALSE 43138
// exit ;
43136: GO 43611
// hex := GetHexInfo ( x , y ) ;
43138: LD_ADDR_VAR 0 15
43142: PUSH
43143: LD_VAR 0 3
43147: PPUSH
43148: LD_VAR 0 4
43152: PPUSH
43153: CALL_OW 546
43157: ST_TO_ADDR
// if hex [ 1 ] then
43158: LD_VAR 0 15
43162: PUSH
43163: LD_INT 1
43165: ARRAY
43166: IFFALSE 43170
// exit ;
43168: GO 43611
// height := hex [ 2 ] ;
43170: LD_ADDR_VAR 0 13
43174: PUSH
43175: LD_VAR 0 15
43179: PUSH
43180: LD_INT 2
43182: ARRAY
43183: ST_TO_ADDR
// for i = 1 to hexes do
43184: LD_ADDR_VAR 0 7
43188: PUSH
43189: DOUBLE
43190: LD_INT 1
43192: DEC
43193: ST_TO_ADDR
43194: LD_VAR 0 12
43198: PUSH
43199: FOR_TO
43200: IFFALSE 43530
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43202: LD_VAR 0 12
43206: PUSH
43207: LD_VAR 0 7
43211: ARRAY
43212: PUSH
43213: LD_INT 1
43215: ARRAY
43216: PPUSH
43217: LD_VAR 0 12
43221: PUSH
43222: LD_VAR 0 7
43226: ARRAY
43227: PUSH
43228: LD_INT 2
43230: ARRAY
43231: PPUSH
43232: CALL_OW 488
43236: NOT
43237: PUSH
43238: LD_VAR 0 12
43242: PUSH
43243: LD_VAR 0 7
43247: ARRAY
43248: PUSH
43249: LD_INT 1
43251: ARRAY
43252: PPUSH
43253: LD_VAR 0 12
43257: PUSH
43258: LD_VAR 0 7
43262: ARRAY
43263: PUSH
43264: LD_INT 2
43266: ARRAY
43267: PPUSH
43268: CALL_OW 428
43272: PUSH
43273: LD_INT 0
43275: GREATER
43276: OR
43277: PUSH
43278: LD_VAR 0 12
43282: PUSH
43283: LD_VAR 0 7
43287: ARRAY
43288: PUSH
43289: LD_INT 1
43291: ARRAY
43292: PPUSH
43293: LD_VAR 0 12
43297: PUSH
43298: LD_VAR 0 7
43302: ARRAY
43303: PUSH
43304: LD_INT 2
43306: ARRAY
43307: PPUSH
43308: CALL_OW 351
43312: OR
43313: IFFALSE 43319
// exit ;
43315: POP
43316: POP
43317: GO 43611
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43319: LD_ADDR_VAR 0 8
43323: PUSH
43324: LD_VAR 0 12
43328: PUSH
43329: LD_VAR 0 7
43333: ARRAY
43334: PUSH
43335: LD_INT 1
43337: ARRAY
43338: PPUSH
43339: LD_VAR 0 12
43343: PUSH
43344: LD_VAR 0 7
43348: ARRAY
43349: PUSH
43350: LD_INT 2
43352: ARRAY
43353: PPUSH
43354: CALL_OW 546
43358: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43359: LD_VAR 0 8
43363: PUSH
43364: LD_INT 1
43366: ARRAY
43367: PUSH
43368: LD_VAR 0 8
43372: PUSH
43373: LD_INT 2
43375: ARRAY
43376: PUSH
43377: LD_VAR 0 13
43381: PUSH
43382: LD_INT 2
43384: PLUS
43385: GREATER
43386: OR
43387: PUSH
43388: LD_VAR 0 8
43392: PUSH
43393: LD_INT 2
43395: ARRAY
43396: PUSH
43397: LD_VAR 0 13
43401: PUSH
43402: LD_INT 2
43404: MINUS
43405: LESS
43406: OR
43407: PUSH
43408: LD_VAR 0 8
43412: PUSH
43413: LD_INT 3
43415: ARRAY
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: LD_INT 8
43422: PUSH
43423: LD_INT 9
43425: PUSH
43426: LD_INT 10
43428: PUSH
43429: LD_INT 11
43431: PUSH
43432: LD_INT 12
43434: PUSH
43435: LD_INT 13
43437: PUSH
43438: LD_INT 16
43440: PUSH
43441: LD_INT 17
43443: PUSH
43444: LD_INT 18
43446: PUSH
43447: LD_INT 19
43449: PUSH
43450: LD_INT 20
43452: PUSH
43453: LD_INT 21
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: IN
43471: NOT
43472: OR
43473: PUSH
43474: LD_VAR 0 8
43478: PUSH
43479: LD_INT 5
43481: ARRAY
43482: NOT
43483: OR
43484: PUSH
43485: LD_VAR 0 8
43489: PUSH
43490: LD_INT 6
43492: ARRAY
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 7
43502: PUSH
43503: LD_INT 9
43505: PUSH
43506: LD_INT 10
43508: PUSH
43509: LD_INT 11
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: IN
43520: NOT
43521: OR
43522: IFFALSE 43528
// exit ;
43524: POP
43525: POP
43526: GO 43611
// end ;
43528: GO 43199
43530: POP
43531: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43532: LD_VAR 0 9
43536: PPUSH
43537: LD_VAR 0 3
43541: PPUSH
43542: LD_VAR 0 4
43546: PPUSH
43547: LD_INT 20
43549: PPUSH
43550: CALL 35534 0 4
43554: PUSH
43555: LD_INT 4
43557: ARRAY
43558: IFFALSE 43562
// exit ;
43560: GO 43611
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43562: LD_VAR 0 2
43566: PUSH
43567: LD_INT 29
43569: PUSH
43570: LD_INT 30
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: IN
43577: PUSH
43578: LD_VAR 0 3
43582: PPUSH
43583: LD_VAR 0 4
43587: PPUSH
43588: LD_VAR 0 9
43592: PPUSH
43593: CALL_OW 440
43597: NOT
43598: AND
43599: IFFALSE 43603
// exit ;
43601: GO 43611
// result := true ;
43603: LD_ADDR_VAR 0 6
43607: PUSH
43608: LD_INT 1
43610: ST_TO_ADDR
// end ;
43611: LD_VAR 0 6
43615: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43616: LD_INT 0
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
43639: PPUSH
43640: PPUSH
43641: PPUSH
43642: PPUSH
43643: PPUSH
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
43651: PPUSH
43652: PPUSH
43653: PPUSH
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
43658: PPUSH
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
43665: PPUSH
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
43674: PPUSH
43675: PPUSH
// result = [ ] ;
43676: LD_ADDR_VAR 0 7
43680: PUSH
43681: EMPTY
43682: ST_TO_ADDR
// temp_list = [ ] ;
43683: LD_ADDR_VAR 0 9
43687: PUSH
43688: EMPTY
43689: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43690: LD_VAR 0 4
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: LD_INT 3
43706: PUSH
43707: LD_INT 4
43709: PUSH
43710: LD_INT 5
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: IN
43721: NOT
43722: PUSH
43723: LD_VAR 0 1
43727: PUSH
43728: LD_INT 0
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: IN
43738: PUSH
43739: LD_VAR 0 5
43743: PUSH
43744: LD_INT 1
43746: PUSH
43747: LD_INT 2
43749: PUSH
43750: LD_INT 3
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: IN
43758: NOT
43759: AND
43760: OR
43761: IFFALSE 43765
// exit ;
43763: GO 62156
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43765: LD_VAR 0 1
43769: PUSH
43770: LD_INT 6
43772: PUSH
43773: LD_INT 7
43775: PUSH
43776: LD_INT 8
43778: PUSH
43779: LD_INT 13
43781: PUSH
43782: LD_INT 12
43784: PUSH
43785: LD_INT 15
43787: PUSH
43788: LD_INT 11
43790: PUSH
43791: LD_INT 14
43793: PUSH
43794: LD_INT 10
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: IN
43808: IFFALSE 43818
// btype = b_lab ;
43810: LD_ADDR_VAR 0 1
43814: PUSH
43815: LD_INT 6
43817: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43818: LD_VAR 0 6
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: PUSH
43829: LD_INT 2
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: IN
43837: NOT
43838: PUSH
43839: LD_VAR 0 1
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 3
43855: PUSH
43856: LD_INT 6
43858: PUSH
43859: LD_INT 36
43861: PUSH
43862: LD_INT 4
43864: PUSH
43865: LD_INT 5
43867: PUSH
43868: LD_INT 31
43870: PUSH
43871: LD_INT 32
43873: PUSH
43874: LD_INT 33
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: IN
43890: NOT
43891: PUSH
43892: LD_VAR 0 6
43896: PUSH
43897: LD_INT 1
43899: EQUAL
43900: AND
43901: OR
43902: PUSH
43903: LD_VAR 0 1
43907: PUSH
43908: LD_INT 2
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: IN
43918: NOT
43919: PUSH
43920: LD_VAR 0 6
43924: PUSH
43925: LD_INT 2
43927: EQUAL
43928: AND
43929: OR
43930: IFFALSE 43940
// mode = 0 ;
43932: LD_ADDR_VAR 0 6
43936: PUSH
43937: LD_INT 0
43939: ST_TO_ADDR
// case mode of 0 :
43940: LD_VAR 0 6
43944: PUSH
43945: LD_INT 0
43947: DOUBLE
43948: EQUAL
43949: IFTRUE 43953
43951: GO 55406
43953: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43954: LD_ADDR_VAR 0 11
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: NEG
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 2
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 0
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 1
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: LD_INT 3
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44147: LD_ADDR_VAR 0 12
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: LD_INT 1
44167: NEG
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 1
44216: NEG
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 1
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 3
44304: NEG
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 3
44315: NEG
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44343: LD_ADDR_VAR 0 13
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 1
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: NEG
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 1
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 2
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 3
44502: NEG
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: NEG
44515: PUSH
44516: LD_INT 3
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44542: LD_ADDR_VAR 0 14
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 1
44677: NEG
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 3
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 3
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44738: LD_ADDR_VAR 0 15
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 0
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 1
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44931: LD_ADDR_VAR 0 16
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 0
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 1
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: PUSH
44970: LD_INT 1
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: LD_INT 2
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 3
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: PUSH
45089: LD_INT 3
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 3
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45124: LD_ADDR_VAR 0 17
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 0
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 0
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 0
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 1
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 2
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: NEG
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45354: LD_ADDR_VAR 0 18
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: NEG
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: LD_INT 1
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 2
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 2
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45584: LD_ADDR_VAR 0 19
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 1
45665: NEG
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 0
45677: PUSH
45678: LD_INT 2
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 2
45783: NEG
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45814: LD_ADDR_VAR 0 20
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: NEG
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 1
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: LD_INT 2
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 2
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 2
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: NEG
46014: PUSH
46015: LD_INT 2
46017: NEG
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46044: LD_ADDR_VAR 0 21
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 1
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: NEG
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 2
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 2
46179: PUSH
46180: LD_INT 2
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 2
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 2
46231: NEG
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 2
46243: NEG
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46274: LD_ADDR_VAR 0 22
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 1
46294: NEG
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: LD_INT 1
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: LD_INT 2
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 1
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 2
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 2
46409: PUSH
46410: LD_INT 2
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 2
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: NEG
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: NEG
46474: PUSH
46475: LD_INT 2
46477: NEG
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46504: LD_ADDR_VAR 0 23
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: LD_INT 0
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: LD_INT 1
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: NEG
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 1
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: NEG
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: NEG
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: NEG
46716: PUSH
46717: LD_INT 3
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 3
46731: NEG
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46784: LD_ADDR_VAR 0 24
46788: PUSH
46789: LD_INT 0
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 1
46853: NEG
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 0
46939: PUSH
46940: LD_INT 2
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 1
46949: NEG
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 2
46971: NEG
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 2
46983: NEG
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: PUSH
47007: LD_INT 1
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47060: LD_ADDR_VAR 0 25
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 1
47118: NEG
47119: PUSH
47120: LD_INT 0
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: NEG
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 1
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 3
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 2
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 3
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47334: LD_ADDR_VAR 0 26
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 1
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: LD_INT 2
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 0
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 2
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 2
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: LD_INT 3
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 3
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47610: LD_ADDR_VAR 0 27
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: LD_INT 1
47630: NEG
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: LD_INT 0
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: PUSH
47746: LD_INT 2
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: EMPTY
47760: LIST
47761: LIST
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: NEG
47833: PUSH
47834: LD_INT 1
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 3
47843: NEG
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: NEG
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47890: LD_ADDR_VAR 0 28
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 2
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 2
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 2
48089: NEG
48090: PUSH
48091: LD_INT 2
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: LD_INT 3
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: LD_INT 3
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: NEG
48138: PUSH
48139: LD_INT 2
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48172: LD_ADDR_VAR 0 29
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 2
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 2
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: NEG
48363: PUSH
48364: LD_INT 3
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: LD_INT 1
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48451: LD_ADDR_VAR 0 30
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 0
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 1
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 2
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: NEG
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 2
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: LD_INT 3
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 2
48655: NEG
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 3
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 2
48673: PUSH
48674: LD_INT 3
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 2
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 3
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48729: LD_ADDR_VAR 0 31
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 0
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 2
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 2
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: NEG
48907: PUSH
48908: LD_INT 2
48910: NEG
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 3
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 3
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 3
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49007: LD_ADDR_VAR 0 32
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 2
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 2
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 1
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 2
49173: NEG
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: LD_INT 3
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 3
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: LD_INT 3
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 3
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49285: LD_ADDR_VAR 0 33
49289: PUSH
49290: LD_INT 0
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 0
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: LD_INT 0
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: NEG
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 2
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 2
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 3
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 1
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 3
49529: NEG
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49564: LD_ADDR_VAR 0 34
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 1
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 1
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: NEG
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 2
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: PUSH
49789: LD_INT 3
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49844: LD_ADDR_VAR 0 35
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 1
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: LD_INT 1
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49956: LD_ADDR_VAR 0 36
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50068: LD_ADDR_VAR 0 37
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: LD_INT 1
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 1
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50180: LD_ADDR_VAR 0 38
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: LD_INT 1
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50292: LD_ADDR_VAR 0 39
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: LD_INT 1
50312: NEG
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: LD_INT 2
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50404: LD_ADDR_VAR 0 40
50408: PUSH
50409: LD_INT 0
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 0
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 1
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 1
50473: NEG
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50516: LD_ADDR_VAR 0 41
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 1
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 2
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 2
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: NEG
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: NEG
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 3
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 3
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 3
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 3
50825: NEG
50826: PUSH
50827: LD_INT 3
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50866: LD_ADDR_VAR 0 42
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 1
50935: NEG
50936: PUSH
50937: LD_INT 1
50939: NEG
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: NEG
50948: PUSH
50949: LD_INT 2
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 2
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 1
50970: PUSH
50971: LD_INT 1
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: LD_INT 2
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: LD_INT 3
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 3
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 3
51163: NEG
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: NEG
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51216: LD_ADDR_VAR 0 43
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 1
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 2
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: LD_INT 1
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: LD_INT 3
51409: NEG
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 0
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 1
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 3
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 3
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: NEG
51502: PUSH
51503: LD_INT 1
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: NEG
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 3
51523: NEG
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51564: LD_ADDR_VAR 0 44
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 1
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: PUSH
51669: LD_INT 0
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 2
51678: PUSH
51679: LD_INT 1
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 2
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 2
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: NEG
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 2
51742: NEG
51743: PUSH
51744: LD_INT 2
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: LD_INT 1
51769: NEG
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 3
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: LD_INT 2
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 3
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: PUSH
51818: LD_INT 3
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 2
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: LD_INT 0
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: NEG
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 3
51873: NEG
51874: PUSH
51875: LD_INT 3
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: EMPTY
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51914: LD_ADDR_VAR 0 45
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: NEG
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: NEG
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 1
51995: NEG
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 2
52010: NEG
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: LD_INT 2
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 3
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 3
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 2
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 3
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 1
52180: PUSH
52181: LD_INT 3
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 3
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 3
52211: NEG
52212: PUSH
52213: LD_INT 2
52215: NEG
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 3
52223: NEG
52224: PUSH
52225: LD_INT 3
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52264: LD_ADDR_VAR 0 46
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 1
52322: NEG
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 2
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: LD_INT 2
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 3
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 1
52490: NEG
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52612: LD_ADDR_VAR 0 47
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 2
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 2
52708: NEG
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 1
52719: NEG
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 2
52727: NEG
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52763: LD_ADDR_VAR 0 48
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 2
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52910: LD_ADDR_VAR 0 49
52914: PUSH
52915: LD_INT 0
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: PUSH
53003: LD_INT 0
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 2
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 2
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53054: LD_ADDR_VAR 0 50
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 2
53135: PUSH
53136: LD_INT 1
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: NEG
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53198: LD_ADDR_VAR 0 51
53202: PUSH
53203: LD_INT 0
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 0
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: LD_INT 0
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 1
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: NEG
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 1
53271: NEG
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53345: LD_ADDR_VAR 0 52
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 1
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53496: LD_ADDR_VAR 0 53
53500: PUSH
53501: LD_INT 0
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 0
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 2
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: LD_INT 2
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: LD_INT 1
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 2
53683: NEG
53684: PUSH
53685: LD_INT 1
53687: NEG
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53726: LD_ADDR_VAR 0 54
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 0
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 0
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 2
53913: NEG
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 2
53925: NEG
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53956: LD_ADDR_VAR 0 55
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 1
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: LD_INT 1
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 2
54132: NEG
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: NEG
54144: PUSH
54145: LD_INT 1
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54186: LD_ADDR_VAR 0 56
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: LD_INT 0
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: NEG
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 2
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 2
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 2
54385: NEG
54386: PUSH
54387: LD_INT 2
54389: NEG
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54416: LD_ADDR_VAR 0 57
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 0
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 2
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 0
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 2
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 2
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 2
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: NEG
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54646: LD_ADDR_VAR 0 58
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 2
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: NEG
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 2
54845: NEG
54846: PUSH
54847: LD_INT 2
54849: NEG
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54876: LD_ADDR_VAR 0 59
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 1
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 0
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 1
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 0
54924: PUSH
54925: LD_INT 1
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: NEG
54935: PUSH
54936: LD_INT 0
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54964: LD_ADDR_VAR 0 60
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: NEG
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: LD_INT 1
55037: NEG
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55052: LD_ADDR_VAR 0 61
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 0
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55140: LD_ADDR_VAR 0 62
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 0
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: LD_INT 0
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 0
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: LD_INT 1
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55228: LD_ADDR_VAR 0 63
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55316: LD_ADDR_VAR 0 64
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 1
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// end ; 1 :
55404: GO 61301
55406: LD_INT 1
55408: DOUBLE
55409: EQUAL
55410: IFTRUE 55414
55412: GO 58037
55414: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55415: LD_ADDR_VAR 0 11
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 3
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55459: LD_ADDR_VAR 0 12
55463: PUSH
55464: LD_INT 2
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 3
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: LIST
55499: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55500: LD_ADDR_VAR 0 13
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: LIST
55539: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55540: LD_ADDR_VAR 0 14
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 3
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 3
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: LIST
55580: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55581: LD_ADDR_VAR 0 15
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 3
55610: NEG
55611: PUSH
55612: LD_INT 1
55614: NEG
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: LIST
55624: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55625: LD_ADDR_VAR 0 16
55629: PUSH
55630: LD_INT 2
55632: NEG
55633: PUSH
55634: LD_INT 3
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: LD_INT 3
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55671: LD_ADDR_VAR 0 17
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 3
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: LD_INT 3
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55715: LD_ADDR_VAR 0 18
55719: PUSH
55720: LD_INT 2
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 3
55733: PUSH
55734: LD_INT 0
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 3
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: LIST
55755: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55756: LD_ADDR_VAR 0 19
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: LD_INT 2
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 3
55773: PUSH
55774: LD_INT 3
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55796: LD_ADDR_VAR 0 20
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 3
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: LIST
55836: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55837: LD_ADDR_VAR 0 21
55841: PUSH
55842: LD_INT 2
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: LIST
55880: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55881: LD_ADDR_VAR 0 22
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 3
55912: NEG
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55927: LD_ADDR_VAR 0 23
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 3
55937: NEG
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: NEG
55946: PUSH
55947: LD_INT 4
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 3
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55971: LD_ADDR_VAR 0 24
55975: PUSH
55976: LD_INT 3
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 3
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 4
55999: PUSH
56000: LD_INT 1
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56012: LD_ADDR_VAR 0 25
56016: PUSH
56017: LD_INT 3
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: LD_INT 3
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: LD_INT 4
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: LIST
56051: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56052: LD_ADDR_VAR 0 26
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 3
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: LD_INT 4
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 3
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: LIST
56092: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56093: LD_ADDR_VAR 0 27
56097: PUSH
56098: LD_INT 3
56100: NEG
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 4
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: LIST
56136: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56137: LD_ADDR_VAR 0 28
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: LD_INT 4
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 4
56168: NEG
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56183: LD_ADDR_VAR 0 29
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 3
56194: NEG
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 4
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 1
56247: PUSH
56248: LD_INT 3
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: LD_INT 5
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 5
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: LD_INT 4
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: LD_INT 6
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 6
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 5
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56338: LD_ADDR_VAR 0 30
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 0
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 4
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 5
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 5
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 5
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 6
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 6
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56481: LD_ADDR_VAR 0 31
56485: PUSH
56486: LD_INT 3
56488: PUSH
56489: LD_INT 2
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 2
56508: PUSH
56509: LD_INT 3
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 4
56518: PUSH
56519: LD_INT 3
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 4
56528: PUSH
56529: LD_INT 4
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 4
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 5
56548: PUSH
56549: LD_INT 4
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 5
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 4
56568: PUSH
56569: LD_INT 5
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 6
56578: PUSH
56579: LD_INT 5
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 6
56588: PUSH
56589: LD_INT 6
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 5
56598: PUSH
56599: LD_INT 6
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56620: LD_ADDR_VAR 0 32
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: LD_INT 3
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 1
56647: NEG
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 4
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 4
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 3
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 5
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 5
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: LD_INT 4
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 6
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 6
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 5
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56763: LD_ADDR_VAR 0 33
56767: PUSH
56768: LD_INT 2
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 3
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 3
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 4
56815: NEG
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 4
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: NEG
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: NEG
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 5
56849: NEG
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 5
56860: NEG
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 5
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 6
56883: NEG
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 6
56894: NEG
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56918: LD_ADDR_VAR 0 34
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 3
56937: NEG
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: LD_INT 3
56953: NEG
56954: PUSH
56955: EMPTY
56956: LIST
56957: LIST
56958: PUSH
56959: LD_INT 3
56961: NEG
56962: PUSH
56963: LD_INT 4
56965: NEG
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 4
56973: NEG
56974: PUSH
56975: LD_INT 3
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 4
56985: NEG
56986: PUSH
56987: LD_INT 4
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 4
56997: NEG
56998: PUSH
56999: LD_INT 5
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 5
57009: NEG
57010: PUSH
57011: LD_INT 4
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 5
57021: NEG
57022: PUSH
57023: LD_INT 5
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 5
57033: NEG
57034: PUSH
57035: LD_INT 6
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 6
57045: NEG
57046: PUSH
57047: LD_INT 5
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 6
57057: NEG
57058: PUSH
57059: LD_INT 6
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57081: LD_ADDR_VAR 0 41
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: LD_INT 2
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: LD_INT 3
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57125: LD_ADDR_VAR 0 42
57129: PUSH
57130: LD_INT 2
57132: PUSH
57133: LD_INT 0
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: LIST
57165: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57166: LD_ADDR_VAR 0 43
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 2
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 3
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: LIST
57205: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57206: LD_ADDR_VAR 0 44
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: PUSH
57224: LD_INT 3
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57247: LD_ADDR_VAR 0 45
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: NEG
57277: PUSH
57278: LD_INT 1
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57291: LD_ADDR_VAR 0 46
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: LD_INT 3
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 3
57322: NEG
57323: PUSH
57324: LD_INT 2
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57337: LD_ADDR_VAR 0 47
57341: PUSH
57342: LD_INT 2
57344: NEG
57345: PUSH
57346: LD_INT 3
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: LD_INT 3
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57370: LD_ADDR_VAR 0 48
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57401: LD_ADDR_VAR 0 49
57405: PUSH
57406: LD_INT 3
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57430: LD_ADDR_VAR 0 50
57434: PUSH
57435: LD_INT 2
57437: PUSH
57438: LD_INT 3
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 3
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57459: LD_ADDR_VAR 0 51
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57490: LD_ADDR_VAR 0 52
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57523: LD_ADDR_VAR 0 53
57527: PUSH
57528: LD_INT 1
57530: NEG
57531: PUSH
57532: LD_INT 3
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 3
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 2
57556: NEG
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: LIST
57566: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57567: LD_ADDR_VAR 0 54
57571: PUSH
57572: LD_INT 2
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57608: LD_ADDR_VAR 0 55
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 3
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: LD_INT 3
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: LIST
57647: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57648: LD_ADDR_VAR 0 56
57652: PUSH
57653: LD_INT 1
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: LD_INT 3
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: LIST
57688: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57689: LD_ADDR_VAR 0 57
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: NEG
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: LIST
57732: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57733: LD_ADDR_VAR 0 58
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 3
57744: NEG
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: PUSH
57750: LD_INT 3
57752: NEG
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: LD_INT 3
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57779: LD_ADDR_VAR 0 59
57783: PUSH
57784: LD_INT 1
57786: NEG
57787: PUSH
57788: LD_INT 2
57790: NEG
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: LD_INT 2
57801: NEG
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: LIST
57822: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57823: LD_ADDR_VAR 0 60
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 2
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: LIST
57863: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57864: LD_ADDR_VAR 0 61
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: LIST
57903: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57904: LD_ADDR_VAR 0 62
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: LD_INT 2
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 2
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 1
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: LIST
57944: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57945: LD_ADDR_VAR 0 63
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: LIST
57988: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57989: LD_ADDR_VAR 0 64
57993: PUSH
57994: LD_INT 1
57996: NEG
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 1
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: NEG
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: LIST
58034: ST_TO_ADDR
// end ; 2 :
58035: GO 61301
58037: LD_INT 2
58039: DOUBLE
58040: EQUAL
58041: IFTRUE 58045
58043: GO 61300
58045: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58046: LD_ADDR_VAR 0 29
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 4
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 5
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 4
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 3
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 3
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: LD_INT 2
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: PUSH
58137: LD_INT 2
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 4
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 4
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: LD_INT 4
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 4
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 4
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 0
58236: PUSH
58237: LD_INT 4
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 5
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 5
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 4
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: LD_INT 3
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 3
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 4
58385: NEG
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 4
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 4
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: LD_INT 2
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: NEG
58432: PUSH
58433: LD_INT 4
58435: NEG
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: PUSH
58441: LD_INT 4
58443: NEG
58444: PUSH
58445: LD_INT 5
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 3
58455: NEG
58456: PUSH
58457: LD_INT 4
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 3
58467: NEG
58468: PUSH
58469: LD_INT 3
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 4
58479: NEG
58480: PUSH
58481: LD_INT 3
58483: NEG
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 5
58491: NEG
58492: PUSH
58493: LD_INT 4
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 5
58503: NEG
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 5
58527: NEG
58528: PUSH
58529: LD_INT 3
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58584: LD_ADDR_VAR 0 30
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 4
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 5
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 5
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: LD_INT 5
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 5
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 5
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 2
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: LD_INT 4
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 4
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 3
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: LD_INT 2
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: PUSH
58754: LD_INT 4
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: LD_INT 2
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 4
58774: NEG
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 4
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: NEG
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 5
58830: NEG
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 5
58841: NEG
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: PUSH
58851: LD_INT 5
58853: NEG
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 3
58865: NEG
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 3
58876: NEG
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 3
58888: NEG
58889: PUSH
58890: LD_INT 4
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: NEG
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 3
58924: NEG
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 4
58936: NEG
58937: PUSH
58938: LD_INT 3
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 4
58948: NEG
58949: PUSH
58950: LD_INT 4
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 2
58960: NEG
58961: PUSH
58962: LD_INT 4
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 4
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 5
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 4
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: NEG
59040: PUSH
59041: LD_INT 4
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 5
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: LD_INT 5
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59131: LD_ADDR_VAR 0 31
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 4
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 3
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 4
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: LD_INT 5
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 5
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: LD_INT 4
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: NEG
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: NEG
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 3
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: NEG
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 3
59276: NEG
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 4
59287: NEG
59288: PUSH
59289: LD_INT 0
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 4
59298: NEG
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 4
59310: NEG
59311: PUSH
59312: LD_INT 2
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 4
59333: NEG
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 4
59345: NEG
59346: PUSH
59347: LD_INT 5
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: NEG
59358: PUSH
59359: LD_INT 4
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 3
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 4
59381: NEG
59382: PUSH
59383: LD_INT 3
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 5
59393: NEG
59394: PUSH
59395: LD_INT 4
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 5
59405: NEG
59406: PUSH
59407: LD_INT 5
59409: NEG
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 3
59417: NEG
59418: PUSH
59419: LD_INT 5
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 5
59429: NEG
59430: PUSH
59431: LD_INT 3
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: LD_INT 3
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 4
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: LD_INT 2
59477: NEG
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 3
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 4
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 4
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 4
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 5
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 5
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 4
59584: PUSH
59585: LD_INT 1
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 3
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: PUSH
59605: LD_INT 1
59607: NEG
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 5
59626: PUSH
59627: LD_INT 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59681: LD_ADDR_VAR 0 32
59685: PUSH
59686: LD_INT 4
59688: NEG
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 4
59699: NEG
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 3
59711: NEG
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 3
59722: NEG
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 4
59733: NEG
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 5
59744: NEG
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: LD_INT 5
59755: NEG
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 5
59767: NEG
59768: PUSH
59769: LD_INT 2
59771: NEG
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 3
59790: NEG
59791: PUSH
59792: LD_INT 3
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: NEG
59803: PUSH
59804: LD_INT 4
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 3
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: NEG
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: LD_INT 2
59842: NEG
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 4
59850: NEG
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 4
59862: NEG
59863: PUSH
59864: LD_INT 4
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 2
59874: NEG
59875: PUSH
59876: LD_INT 4
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 4
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: LD_INT 5
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: LD_INT 3
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: LD_INT 4
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: LD_INT 5
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: LD_INT 5
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: LD_INT 0
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 3
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 4
60021: PUSH
60022: LD_INT 0
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: LD_INT 1
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: LD_INT 0
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 2
60061: PUSH
60062: LD_INT 1
60064: NEG
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 2
60075: NEG
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 5
60113: PUSH
60114: LD_INT 4
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 5
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 4
60133: PUSH
60134: LD_INT 5
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: LD_INT 4
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 3
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 5
60163: PUSH
60164: LD_INT 3
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: LD_INT 5
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60228: LD_ADDR_VAR 0 33
60232: PUSH
60233: LD_INT 4
60235: NEG
60236: PUSH
60237: LD_INT 4
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 4
60247: NEG
60248: PUSH
60249: LD_INT 5
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 4
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 5
60295: NEG
60296: PUSH
60297: LD_INT 4
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 5
60307: NEG
60308: PUSH
60309: LD_INT 5
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: LD_INT 5
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 5
60331: NEG
60332: PUSH
60333: LD_INT 3
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 3
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 0
60354: PUSH
60355: LD_INT 4
60357: NEG
60358: PUSH
60359: EMPTY
60360: LIST
60361: LIST
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: LD_INT 3
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 2
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 1
60398: NEG
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 4
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: LD_INT 4
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 4
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 4
60455: PUSH
60456: LD_INT 1
60458: NEG
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 5
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 5
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 4
60486: PUSH
60487: LD_INT 1
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: PUSH
60518: LD_INT 2
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 5
60528: PUSH
60529: LD_INT 2
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 4
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 4
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: LD_INT 4
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 2
60588: PUSH
60589: LD_INT 3
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 2
60598: PUSH
60599: LD_INT 2
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 4
60608: PUSH
60609: LD_INT 2
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 4
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 0
60628: PUSH
60629: LD_INT 4
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 0
60638: PUSH
60639: LD_INT 3
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: LD_INT 4
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: PUSH
60659: LD_INT 5
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 5
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: NEG
60679: PUSH
60680: LD_INT 4
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: LD_INT 3
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: LD_INT 5
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60766: LD_ADDR_VAR 0 34
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 0
60784: PUSH
60785: LD_INT 5
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: LD_INT 1
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: LD_INT 3
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 4
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 1
60840: NEG
60841: PUSH
60842: LD_INT 5
60844: NEG
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: PUSH
60850: LD_INT 2
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: LD_INT 5
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 3
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: LD_INT 1
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 4
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 5
60988: PUSH
60989: LD_INT 4
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 5
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 4
61008: PUSH
61009: LD_INT 5
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 3
61018: PUSH
61019: LD_INT 4
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 5
61038: PUSH
61039: LD_INT 3
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 3
61048: PUSH
61049: LD_INT 5
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: LD_INT 2
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: LD_INT 3
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: LD_INT 4
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 4
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 1
61108: NEG
61109: PUSH
61110: LD_INT 3
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 2
61130: PUSH
61131: LD_INT 4
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 2
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 4
61151: NEG
61152: PUSH
61153: LD_INT 0
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 4
61162: NEG
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 3
61185: NEG
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 5
61207: NEG
61208: PUSH
61209: LD_INT 0
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 5
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 5
61230: NEG
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: LD_INT 3
61242: NEG
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: EMPTY
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: ST_TO_ADDR
// end ; end ;
61298: GO 61301
61300: POP
// case btype of b_depot , b_warehouse :
61301: LD_VAR 0 1
61305: PUSH
61306: LD_INT 0
61308: DOUBLE
61309: EQUAL
61310: IFTRUE 61320
61312: LD_INT 1
61314: DOUBLE
61315: EQUAL
61316: IFTRUE 61320
61318: GO 61521
61320: POP
// case nation of nation_american :
61321: LD_VAR 0 5
61325: PUSH
61326: LD_INT 1
61328: DOUBLE
61329: EQUAL
61330: IFTRUE 61334
61332: GO 61390
61334: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61335: LD_ADDR_VAR 0 9
61339: PUSH
61340: LD_VAR 0 11
61344: PUSH
61345: LD_VAR 0 12
61349: PUSH
61350: LD_VAR 0 13
61354: PUSH
61355: LD_VAR 0 14
61359: PUSH
61360: LD_VAR 0 15
61364: PUSH
61365: LD_VAR 0 16
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: PUSH
61378: LD_VAR 0 4
61382: PUSH
61383: LD_INT 1
61385: PLUS
61386: ARRAY
61387: ST_TO_ADDR
61388: GO 61519
61390: LD_INT 2
61392: DOUBLE
61393: EQUAL
61394: IFTRUE 61398
61396: GO 61454
61398: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61399: LD_ADDR_VAR 0 9
61403: PUSH
61404: LD_VAR 0 17
61408: PUSH
61409: LD_VAR 0 18
61413: PUSH
61414: LD_VAR 0 19
61418: PUSH
61419: LD_VAR 0 20
61423: PUSH
61424: LD_VAR 0 21
61428: PUSH
61429: LD_VAR 0 22
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: PUSH
61442: LD_VAR 0 4
61446: PUSH
61447: LD_INT 1
61449: PLUS
61450: ARRAY
61451: ST_TO_ADDR
61452: GO 61519
61454: LD_INT 3
61456: DOUBLE
61457: EQUAL
61458: IFTRUE 61462
61460: GO 61518
61462: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61463: LD_ADDR_VAR 0 9
61467: PUSH
61468: LD_VAR 0 23
61472: PUSH
61473: LD_VAR 0 24
61477: PUSH
61478: LD_VAR 0 25
61482: PUSH
61483: LD_VAR 0 26
61487: PUSH
61488: LD_VAR 0 27
61492: PUSH
61493: LD_VAR 0 28
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: PUSH
61506: LD_VAR 0 4
61510: PUSH
61511: LD_INT 1
61513: PLUS
61514: ARRAY
61515: ST_TO_ADDR
61516: GO 61519
61518: POP
61519: GO 62074
61521: LD_INT 2
61523: DOUBLE
61524: EQUAL
61525: IFTRUE 61535
61527: LD_INT 3
61529: DOUBLE
61530: EQUAL
61531: IFTRUE 61535
61533: GO 61591
61535: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61536: LD_ADDR_VAR 0 9
61540: PUSH
61541: LD_VAR 0 29
61545: PUSH
61546: LD_VAR 0 30
61550: PUSH
61551: LD_VAR 0 31
61555: PUSH
61556: LD_VAR 0 32
61560: PUSH
61561: LD_VAR 0 33
61565: PUSH
61566: LD_VAR 0 34
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: PUSH
61579: LD_VAR 0 4
61583: PUSH
61584: LD_INT 1
61586: PLUS
61587: ARRAY
61588: ST_TO_ADDR
61589: GO 62074
61591: LD_INT 16
61593: DOUBLE
61594: EQUAL
61595: IFTRUE 61653
61597: LD_INT 17
61599: DOUBLE
61600: EQUAL
61601: IFTRUE 61653
61603: LD_INT 18
61605: DOUBLE
61606: EQUAL
61607: IFTRUE 61653
61609: LD_INT 19
61611: DOUBLE
61612: EQUAL
61613: IFTRUE 61653
61615: LD_INT 22
61617: DOUBLE
61618: EQUAL
61619: IFTRUE 61653
61621: LD_INT 20
61623: DOUBLE
61624: EQUAL
61625: IFTRUE 61653
61627: LD_INT 21
61629: DOUBLE
61630: EQUAL
61631: IFTRUE 61653
61633: LD_INT 23
61635: DOUBLE
61636: EQUAL
61637: IFTRUE 61653
61639: LD_INT 24
61641: DOUBLE
61642: EQUAL
61643: IFTRUE 61653
61645: LD_INT 25
61647: DOUBLE
61648: EQUAL
61649: IFTRUE 61653
61651: GO 61709
61653: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61654: LD_ADDR_VAR 0 9
61658: PUSH
61659: LD_VAR 0 35
61663: PUSH
61664: LD_VAR 0 36
61668: PUSH
61669: LD_VAR 0 37
61673: PUSH
61674: LD_VAR 0 38
61678: PUSH
61679: LD_VAR 0 39
61683: PUSH
61684: LD_VAR 0 40
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: PUSH
61697: LD_VAR 0 4
61701: PUSH
61702: LD_INT 1
61704: PLUS
61705: ARRAY
61706: ST_TO_ADDR
61707: GO 62074
61709: LD_INT 6
61711: DOUBLE
61712: EQUAL
61713: IFTRUE 61765
61715: LD_INT 7
61717: DOUBLE
61718: EQUAL
61719: IFTRUE 61765
61721: LD_INT 8
61723: DOUBLE
61724: EQUAL
61725: IFTRUE 61765
61727: LD_INT 13
61729: DOUBLE
61730: EQUAL
61731: IFTRUE 61765
61733: LD_INT 12
61735: DOUBLE
61736: EQUAL
61737: IFTRUE 61765
61739: LD_INT 15
61741: DOUBLE
61742: EQUAL
61743: IFTRUE 61765
61745: LD_INT 11
61747: DOUBLE
61748: EQUAL
61749: IFTRUE 61765
61751: LD_INT 14
61753: DOUBLE
61754: EQUAL
61755: IFTRUE 61765
61757: LD_INT 10
61759: DOUBLE
61760: EQUAL
61761: IFTRUE 61765
61763: GO 61821
61765: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61766: LD_ADDR_VAR 0 9
61770: PUSH
61771: LD_VAR 0 41
61775: PUSH
61776: LD_VAR 0 42
61780: PUSH
61781: LD_VAR 0 43
61785: PUSH
61786: LD_VAR 0 44
61790: PUSH
61791: LD_VAR 0 45
61795: PUSH
61796: LD_VAR 0 46
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: PUSH
61809: LD_VAR 0 4
61813: PUSH
61814: LD_INT 1
61816: PLUS
61817: ARRAY
61818: ST_TO_ADDR
61819: GO 62074
61821: LD_INT 36
61823: DOUBLE
61824: EQUAL
61825: IFTRUE 61829
61827: GO 61885
61829: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61830: LD_ADDR_VAR 0 9
61834: PUSH
61835: LD_VAR 0 47
61839: PUSH
61840: LD_VAR 0 48
61844: PUSH
61845: LD_VAR 0 49
61849: PUSH
61850: LD_VAR 0 50
61854: PUSH
61855: LD_VAR 0 51
61859: PUSH
61860: LD_VAR 0 52
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: PUSH
61873: LD_VAR 0 4
61877: PUSH
61878: LD_INT 1
61880: PLUS
61881: ARRAY
61882: ST_TO_ADDR
61883: GO 62074
61885: LD_INT 4
61887: DOUBLE
61888: EQUAL
61889: IFTRUE 61911
61891: LD_INT 5
61893: DOUBLE
61894: EQUAL
61895: IFTRUE 61911
61897: LD_INT 34
61899: DOUBLE
61900: EQUAL
61901: IFTRUE 61911
61903: LD_INT 37
61905: DOUBLE
61906: EQUAL
61907: IFTRUE 61911
61909: GO 61967
61911: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61912: LD_ADDR_VAR 0 9
61916: PUSH
61917: LD_VAR 0 53
61921: PUSH
61922: LD_VAR 0 54
61926: PUSH
61927: LD_VAR 0 55
61931: PUSH
61932: LD_VAR 0 56
61936: PUSH
61937: LD_VAR 0 57
61941: PUSH
61942: LD_VAR 0 58
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: PUSH
61955: LD_VAR 0 4
61959: PUSH
61960: LD_INT 1
61962: PLUS
61963: ARRAY
61964: ST_TO_ADDR
61965: GO 62074
61967: LD_INT 31
61969: DOUBLE
61970: EQUAL
61971: IFTRUE 62017
61973: LD_INT 32
61975: DOUBLE
61976: EQUAL
61977: IFTRUE 62017
61979: LD_INT 33
61981: DOUBLE
61982: EQUAL
61983: IFTRUE 62017
61985: LD_INT 27
61987: DOUBLE
61988: EQUAL
61989: IFTRUE 62017
61991: LD_INT 26
61993: DOUBLE
61994: EQUAL
61995: IFTRUE 62017
61997: LD_INT 28
61999: DOUBLE
62000: EQUAL
62001: IFTRUE 62017
62003: LD_INT 29
62005: DOUBLE
62006: EQUAL
62007: IFTRUE 62017
62009: LD_INT 30
62011: DOUBLE
62012: EQUAL
62013: IFTRUE 62017
62015: GO 62073
62017: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62018: LD_ADDR_VAR 0 9
62022: PUSH
62023: LD_VAR 0 59
62027: PUSH
62028: LD_VAR 0 60
62032: PUSH
62033: LD_VAR 0 61
62037: PUSH
62038: LD_VAR 0 62
62042: PUSH
62043: LD_VAR 0 63
62047: PUSH
62048: LD_VAR 0 64
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: PUSH
62061: LD_VAR 0 4
62065: PUSH
62066: LD_INT 1
62068: PLUS
62069: ARRAY
62070: ST_TO_ADDR
62071: GO 62074
62073: POP
// temp_list2 = [ ] ;
62074: LD_ADDR_VAR 0 10
62078: PUSH
62079: EMPTY
62080: ST_TO_ADDR
// for i in temp_list do
62081: LD_ADDR_VAR 0 8
62085: PUSH
62086: LD_VAR 0 9
62090: PUSH
62091: FOR_IN
62092: IFFALSE 62144
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62094: LD_ADDR_VAR 0 10
62098: PUSH
62099: LD_VAR 0 10
62103: PUSH
62104: LD_VAR 0 8
62108: PUSH
62109: LD_INT 1
62111: ARRAY
62112: PUSH
62113: LD_VAR 0 2
62117: PLUS
62118: PUSH
62119: LD_VAR 0 8
62123: PUSH
62124: LD_INT 2
62126: ARRAY
62127: PUSH
62128: LD_VAR 0 3
62132: PLUS
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: ADD
62141: ST_TO_ADDR
62142: GO 62091
62144: POP
62145: POP
// result = temp_list2 ;
62146: LD_ADDR_VAR 0 7
62150: PUSH
62151: LD_VAR 0 10
62155: ST_TO_ADDR
// end ;
62156: LD_VAR 0 7
62160: RET
// export function EnemyInRange ( unit , dist ) ; begin
62161: LD_INT 0
62163: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62164: LD_ADDR_VAR 0 3
62168: PUSH
62169: LD_VAR 0 1
62173: PPUSH
62174: CALL_OW 255
62178: PPUSH
62179: LD_VAR 0 1
62183: PPUSH
62184: CALL_OW 250
62188: PPUSH
62189: LD_VAR 0 1
62193: PPUSH
62194: CALL_OW 251
62198: PPUSH
62199: LD_VAR 0 2
62203: PPUSH
62204: CALL 35534 0 4
62208: PUSH
62209: LD_INT 4
62211: ARRAY
62212: ST_TO_ADDR
// end ;
62213: LD_VAR 0 3
62217: RET
// export function PlayerSeeMe ( unit ) ; begin
62218: LD_INT 0
62220: PPUSH
// result := See ( your_side , unit ) ;
62221: LD_ADDR_VAR 0 2
62225: PUSH
62226: LD_OWVAR 2
62230: PPUSH
62231: LD_VAR 0 1
62235: PPUSH
62236: CALL_OW 292
62240: ST_TO_ADDR
// end ;
62241: LD_VAR 0 2
62245: RET
// export function ReverseDir ( unit ) ; begin
62246: LD_INT 0
62248: PPUSH
// if not unit then
62249: LD_VAR 0 1
62253: NOT
62254: IFFALSE 62258
// exit ;
62256: GO 62281
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62258: LD_ADDR_VAR 0 2
62262: PUSH
62263: LD_VAR 0 1
62267: PPUSH
62268: CALL_OW 254
62272: PUSH
62273: LD_INT 3
62275: PLUS
62276: PUSH
62277: LD_INT 6
62279: MOD
62280: ST_TO_ADDR
// end ;
62281: LD_VAR 0 2
62285: RET
// export function ReverseArray ( array ) ; var i ; begin
62286: LD_INT 0
62288: PPUSH
62289: PPUSH
// if not array then
62290: LD_VAR 0 1
62294: NOT
62295: IFFALSE 62299
// exit ;
62297: GO 62354
// result := [ ] ;
62299: LD_ADDR_VAR 0 2
62303: PUSH
62304: EMPTY
62305: ST_TO_ADDR
// for i := array downto 1 do
62306: LD_ADDR_VAR 0 3
62310: PUSH
62311: DOUBLE
62312: LD_VAR 0 1
62316: INC
62317: ST_TO_ADDR
62318: LD_INT 1
62320: PUSH
62321: FOR_DOWNTO
62322: IFFALSE 62352
// result := Join ( result , array [ i ] ) ;
62324: LD_ADDR_VAR 0 2
62328: PUSH
62329: LD_VAR 0 2
62333: PPUSH
62334: LD_VAR 0 1
62338: PUSH
62339: LD_VAR 0 3
62343: ARRAY
62344: PPUSH
62345: CALL 66999 0 2
62349: ST_TO_ADDR
62350: GO 62321
62352: POP
62353: POP
// end ;
62354: LD_VAR 0 2
62358: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62359: LD_INT 0
62361: PPUSH
62362: PPUSH
62363: PPUSH
62364: PPUSH
62365: PPUSH
62366: PPUSH
// if not unit or not hexes then
62367: LD_VAR 0 1
62371: NOT
62372: PUSH
62373: LD_VAR 0 2
62377: NOT
62378: OR
62379: IFFALSE 62383
// exit ;
62381: GO 62506
// dist := 9999 ;
62383: LD_ADDR_VAR 0 5
62387: PUSH
62388: LD_INT 9999
62390: ST_TO_ADDR
// for i = 1 to hexes do
62391: LD_ADDR_VAR 0 4
62395: PUSH
62396: DOUBLE
62397: LD_INT 1
62399: DEC
62400: ST_TO_ADDR
62401: LD_VAR 0 2
62405: PUSH
62406: FOR_TO
62407: IFFALSE 62494
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62409: LD_ADDR_VAR 0 6
62413: PUSH
62414: LD_VAR 0 1
62418: PPUSH
62419: LD_VAR 0 2
62423: PUSH
62424: LD_VAR 0 4
62428: ARRAY
62429: PUSH
62430: LD_INT 1
62432: ARRAY
62433: PPUSH
62434: LD_VAR 0 2
62438: PUSH
62439: LD_VAR 0 4
62443: ARRAY
62444: PUSH
62445: LD_INT 2
62447: ARRAY
62448: PPUSH
62449: CALL_OW 297
62453: ST_TO_ADDR
// if tdist < dist then
62454: LD_VAR 0 6
62458: PUSH
62459: LD_VAR 0 5
62463: LESS
62464: IFFALSE 62492
// begin hex := hexes [ i ] ;
62466: LD_ADDR_VAR 0 8
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_VAR 0 4
62480: ARRAY
62481: ST_TO_ADDR
// dist := tdist ;
62482: LD_ADDR_VAR 0 5
62486: PUSH
62487: LD_VAR 0 6
62491: ST_TO_ADDR
// end ; end ;
62492: GO 62406
62494: POP
62495: POP
// result := hex ;
62496: LD_ADDR_VAR 0 3
62500: PUSH
62501: LD_VAR 0 8
62505: ST_TO_ADDR
// end ;
62506: LD_VAR 0 3
62510: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62511: LD_INT 0
62513: PPUSH
62514: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62515: LD_VAR 0 1
62519: NOT
62520: PUSH
62521: LD_VAR 0 1
62525: PUSH
62526: LD_INT 21
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 23
62538: PUSH
62539: LD_INT 2
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PPUSH
62550: CALL_OW 69
62554: IN
62555: NOT
62556: OR
62557: IFFALSE 62561
// exit ;
62559: GO 62608
// for i = 1 to 3 do
62561: LD_ADDR_VAR 0 3
62565: PUSH
62566: DOUBLE
62567: LD_INT 1
62569: DEC
62570: ST_TO_ADDR
62571: LD_INT 3
62573: PUSH
62574: FOR_TO
62575: IFFALSE 62606
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62577: LD_VAR 0 1
62581: PPUSH
62582: CALL_OW 250
62586: PPUSH
62587: LD_VAR 0 1
62591: PPUSH
62592: CALL_OW 251
62596: PPUSH
62597: LD_INT 1
62599: PPUSH
62600: CALL_OW 453
62604: GO 62574
62606: POP
62607: POP
// end ;
62608: LD_VAR 0 2
62612: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62613: LD_INT 0
62615: PPUSH
62616: PPUSH
62617: PPUSH
62618: PPUSH
62619: PPUSH
62620: PPUSH
// if not unit or not enemy_unit then
62621: LD_VAR 0 1
62625: NOT
62626: PUSH
62627: LD_VAR 0 2
62631: NOT
62632: OR
62633: IFFALSE 62637
// exit ;
62635: GO 63104
// if GetLives ( i ) < 250 then
62637: LD_VAR 0 4
62641: PPUSH
62642: CALL_OW 256
62646: PUSH
62647: LD_INT 250
62649: LESS
62650: IFFALSE 62663
// begin ComAutodestruct ( i ) ;
62652: LD_VAR 0 4
62656: PPUSH
62657: CALL 62511 0 1
// exit ;
62661: GO 63104
// end ; x := GetX ( enemy_unit ) ;
62663: LD_ADDR_VAR 0 7
62667: PUSH
62668: LD_VAR 0 2
62672: PPUSH
62673: CALL_OW 250
62677: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62678: LD_ADDR_VAR 0 8
62682: PUSH
62683: LD_VAR 0 2
62687: PPUSH
62688: CALL_OW 251
62692: ST_TO_ADDR
// if not x or not y then
62693: LD_VAR 0 7
62697: NOT
62698: PUSH
62699: LD_VAR 0 8
62703: NOT
62704: OR
62705: IFFALSE 62709
// exit ;
62707: GO 63104
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62709: LD_ADDR_VAR 0 6
62713: PUSH
62714: LD_VAR 0 7
62718: PPUSH
62719: LD_INT 0
62721: PPUSH
62722: LD_INT 4
62724: PPUSH
62725: CALL_OW 272
62729: PUSH
62730: LD_VAR 0 8
62734: PPUSH
62735: LD_INT 0
62737: PPUSH
62738: LD_INT 4
62740: PPUSH
62741: CALL_OW 273
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_VAR 0 7
62754: PPUSH
62755: LD_INT 1
62757: PPUSH
62758: LD_INT 4
62760: PPUSH
62761: CALL_OW 272
62765: PUSH
62766: LD_VAR 0 8
62770: PPUSH
62771: LD_INT 1
62773: PPUSH
62774: LD_INT 4
62776: PPUSH
62777: CALL_OW 273
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_VAR 0 7
62790: PPUSH
62791: LD_INT 2
62793: PPUSH
62794: LD_INT 4
62796: PPUSH
62797: CALL_OW 272
62801: PUSH
62802: LD_VAR 0 8
62806: PPUSH
62807: LD_INT 2
62809: PPUSH
62810: LD_INT 4
62812: PPUSH
62813: CALL_OW 273
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_VAR 0 7
62826: PPUSH
62827: LD_INT 3
62829: PPUSH
62830: LD_INT 4
62832: PPUSH
62833: CALL_OW 272
62837: PUSH
62838: LD_VAR 0 8
62842: PPUSH
62843: LD_INT 3
62845: PPUSH
62846: LD_INT 4
62848: PPUSH
62849: CALL_OW 273
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_VAR 0 7
62862: PPUSH
62863: LD_INT 4
62865: PPUSH
62866: LD_INT 4
62868: PPUSH
62869: CALL_OW 272
62873: PUSH
62874: LD_VAR 0 8
62878: PPUSH
62879: LD_INT 4
62881: PPUSH
62882: LD_INT 4
62884: PPUSH
62885: CALL_OW 273
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_VAR 0 7
62898: PPUSH
62899: LD_INT 5
62901: PPUSH
62902: LD_INT 4
62904: PPUSH
62905: CALL_OW 272
62909: PUSH
62910: LD_VAR 0 8
62914: PPUSH
62915: LD_INT 5
62917: PPUSH
62918: LD_INT 4
62920: PPUSH
62921: CALL_OW 273
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: ST_TO_ADDR
// for i = tmp downto 1 do
62938: LD_ADDR_VAR 0 4
62942: PUSH
62943: DOUBLE
62944: LD_VAR 0 6
62948: INC
62949: ST_TO_ADDR
62950: LD_INT 1
62952: PUSH
62953: FOR_DOWNTO
62954: IFFALSE 63055
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62956: LD_VAR 0 6
62960: PUSH
62961: LD_VAR 0 4
62965: ARRAY
62966: PUSH
62967: LD_INT 1
62969: ARRAY
62970: PPUSH
62971: LD_VAR 0 6
62975: PUSH
62976: LD_VAR 0 4
62980: ARRAY
62981: PUSH
62982: LD_INT 2
62984: ARRAY
62985: PPUSH
62986: CALL_OW 488
62990: NOT
62991: PUSH
62992: LD_VAR 0 6
62996: PUSH
62997: LD_VAR 0 4
63001: ARRAY
63002: PUSH
63003: LD_INT 1
63005: ARRAY
63006: PPUSH
63007: LD_VAR 0 6
63011: PUSH
63012: LD_VAR 0 4
63016: ARRAY
63017: PUSH
63018: LD_INT 2
63020: ARRAY
63021: PPUSH
63022: CALL_OW 428
63026: PUSH
63027: LD_INT 0
63029: NONEQUAL
63030: OR
63031: IFFALSE 63053
// tmp := Delete ( tmp , i ) ;
63033: LD_ADDR_VAR 0 6
63037: PUSH
63038: LD_VAR 0 6
63042: PPUSH
63043: LD_VAR 0 4
63047: PPUSH
63048: CALL_OW 3
63052: ST_TO_ADDR
63053: GO 62953
63055: POP
63056: POP
// j := GetClosestHex ( unit , tmp ) ;
63057: LD_ADDR_VAR 0 5
63061: PUSH
63062: LD_VAR 0 1
63066: PPUSH
63067: LD_VAR 0 6
63071: PPUSH
63072: CALL 62359 0 2
63076: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63077: LD_VAR 0 1
63081: PPUSH
63082: LD_VAR 0 5
63086: PUSH
63087: LD_INT 1
63089: ARRAY
63090: PPUSH
63091: LD_VAR 0 5
63095: PUSH
63096: LD_INT 2
63098: ARRAY
63099: PPUSH
63100: CALL_OW 111
// end ;
63104: LD_VAR 0 3
63108: RET
// export function PrepareApemanSoldier ( ) ; begin
63109: LD_INT 0
63111: PPUSH
// uc_nation := 0 ;
63112: LD_ADDR_OWVAR 21
63116: PUSH
63117: LD_INT 0
63119: ST_TO_ADDR
// hc_sex := sex_male ;
63120: LD_ADDR_OWVAR 27
63124: PUSH
63125: LD_INT 1
63127: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63128: LD_ADDR_OWVAR 28
63132: PUSH
63133: LD_INT 15
63135: ST_TO_ADDR
// hc_gallery :=  ;
63136: LD_ADDR_OWVAR 33
63140: PUSH
63141: LD_STRING 
63143: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63144: LD_ADDR_OWVAR 31
63148: PUSH
63149: LD_INT 0
63151: PPUSH
63152: LD_INT 3
63154: PPUSH
63155: CALL_OW 12
63159: PUSH
63160: LD_INT 0
63162: PPUSH
63163: LD_INT 3
63165: PPUSH
63166: CALL_OW 12
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: ST_TO_ADDR
// end ;
63183: LD_VAR 0 1
63187: RET
// export function PrepareApemanEngineer ( ) ; begin
63188: LD_INT 0
63190: PPUSH
// uc_nation := 0 ;
63191: LD_ADDR_OWVAR 21
63195: PUSH
63196: LD_INT 0
63198: ST_TO_ADDR
// hc_sex := sex_male ;
63199: LD_ADDR_OWVAR 27
63203: PUSH
63204: LD_INT 1
63206: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63207: LD_ADDR_OWVAR 28
63211: PUSH
63212: LD_INT 16
63214: ST_TO_ADDR
// hc_gallery :=  ;
63215: LD_ADDR_OWVAR 33
63219: PUSH
63220: LD_STRING 
63222: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63223: LD_ADDR_OWVAR 31
63227: PUSH
63228: LD_INT 0
63230: PPUSH
63231: LD_INT 3
63233: PPUSH
63234: CALL_OW 12
63238: PUSH
63239: LD_INT 0
63241: PPUSH
63242: LD_INT 3
63244: PPUSH
63245: CALL_OW 12
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: LD_INT 0
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: ST_TO_ADDR
// end ;
63262: LD_VAR 0 1
63266: RET
// export function PrepareApeman ( agressivity ) ; begin
63267: LD_INT 0
63269: PPUSH
// uc_side := 0 ;
63270: LD_ADDR_OWVAR 20
63274: PUSH
63275: LD_INT 0
63277: ST_TO_ADDR
// uc_nation := 0 ;
63278: LD_ADDR_OWVAR 21
63282: PUSH
63283: LD_INT 0
63285: ST_TO_ADDR
// hc_sex := sex_male ;
63286: LD_ADDR_OWVAR 27
63290: PUSH
63291: LD_INT 1
63293: ST_TO_ADDR
// hc_class := class_apeman ;
63294: LD_ADDR_OWVAR 28
63298: PUSH
63299: LD_INT 12
63301: ST_TO_ADDR
// hc_gallery :=  ;
63302: LD_ADDR_OWVAR 33
63306: PUSH
63307: LD_STRING 
63309: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63310: LD_ADDR_OWVAR 35
63314: PUSH
63315: LD_VAR 0 1
63319: NEG
63320: PPUSH
63321: LD_VAR 0 1
63325: PPUSH
63326: CALL_OW 12
63330: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63331: LD_ADDR_OWVAR 31
63335: PUSH
63336: LD_INT 0
63338: PPUSH
63339: LD_INT 3
63341: PPUSH
63342: CALL_OW 12
63346: PUSH
63347: LD_INT 0
63349: PPUSH
63350: LD_INT 3
63352: PPUSH
63353: CALL_OW 12
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// end ;
63370: LD_VAR 0 2
63374: RET
// export function PrepareTiger ( agressivity ) ; begin
63375: LD_INT 0
63377: PPUSH
// uc_side := 0 ;
63378: LD_ADDR_OWVAR 20
63382: PUSH
63383: LD_INT 0
63385: ST_TO_ADDR
// uc_nation := 0 ;
63386: LD_ADDR_OWVAR 21
63390: PUSH
63391: LD_INT 0
63393: ST_TO_ADDR
// hc_class := class_tiger ;
63394: LD_ADDR_OWVAR 28
63398: PUSH
63399: LD_INT 14
63401: ST_TO_ADDR
// hc_gallery :=  ;
63402: LD_ADDR_OWVAR 33
63406: PUSH
63407: LD_STRING 
63409: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63410: LD_ADDR_OWVAR 35
63414: PUSH
63415: LD_VAR 0 1
63419: NEG
63420: PPUSH
63421: LD_VAR 0 1
63425: PPUSH
63426: CALL_OW 12
63430: ST_TO_ADDR
// end ;
63431: LD_VAR 0 2
63435: RET
// export function PrepareEnchidna ( ) ; begin
63436: LD_INT 0
63438: PPUSH
// uc_side := 0 ;
63439: LD_ADDR_OWVAR 20
63443: PUSH
63444: LD_INT 0
63446: ST_TO_ADDR
// uc_nation := 0 ;
63447: LD_ADDR_OWVAR 21
63451: PUSH
63452: LD_INT 0
63454: ST_TO_ADDR
// hc_class := class_baggie ;
63455: LD_ADDR_OWVAR 28
63459: PUSH
63460: LD_INT 13
63462: ST_TO_ADDR
// hc_gallery :=  ;
63463: LD_ADDR_OWVAR 33
63467: PUSH
63468: LD_STRING 
63470: ST_TO_ADDR
// end ;
63471: LD_VAR 0 1
63475: RET
// export function PrepareFrog ( ) ; begin
63476: LD_INT 0
63478: PPUSH
// uc_side := 0 ;
63479: LD_ADDR_OWVAR 20
63483: PUSH
63484: LD_INT 0
63486: ST_TO_ADDR
// uc_nation := 0 ;
63487: LD_ADDR_OWVAR 21
63491: PUSH
63492: LD_INT 0
63494: ST_TO_ADDR
// hc_class := class_frog ;
63495: LD_ADDR_OWVAR 28
63499: PUSH
63500: LD_INT 19
63502: ST_TO_ADDR
// hc_gallery :=  ;
63503: LD_ADDR_OWVAR 33
63507: PUSH
63508: LD_STRING 
63510: ST_TO_ADDR
// end ;
63511: LD_VAR 0 1
63515: RET
// export function PrepareFish ( ) ; begin
63516: LD_INT 0
63518: PPUSH
// uc_side := 0 ;
63519: LD_ADDR_OWVAR 20
63523: PUSH
63524: LD_INT 0
63526: ST_TO_ADDR
// uc_nation := 0 ;
63527: LD_ADDR_OWVAR 21
63531: PUSH
63532: LD_INT 0
63534: ST_TO_ADDR
// hc_class := class_fish ;
63535: LD_ADDR_OWVAR 28
63539: PUSH
63540: LD_INT 20
63542: ST_TO_ADDR
// hc_gallery :=  ;
63543: LD_ADDR_OWVAR 33
63547: PUSH
63548: LD_STRING 
63550: ST_TO_ADDR
// end ;
63551: LD_VAR 0 1
63555: RET
// export function PrepareBird ( ) ; begin
63556: LD_INT 0
63558: PPUSH
// uc_side := 0 ;
63559: LD_ADDR_OWVAR 20
63563: PUSH
63564: LD_INT 0
63566: ST_TO_ADDR
// uc_nation := 0 ;
63567: LD_ADDR_OWVAR 21
63571: PUSH
63572: LD_INT 0
63574: ST_TO_ADDR
// hc_class := class_phororhacos ;
63575: LD_ADDR_OWVAR 28
63579: PUSH
63580: LD_INT 18
63582: ST_TO_ADDR
// hc_gallery :=  ;
63583: LD_ADDR_OWVAR 33
63587: PUSH
63588: LD_STRING 
63590: ST_TO_ADDR
// end ;
63591: LD_VAR 0 1
63595: RET
// export function PrepareHorse ( ) ; begin
63596: LD_INT 0
63598: PPUSH
// uc_side := 0 ;
63599: LD_ADDR_OWVAR 20
63603: PUSH
63604: LD_INT 0
63606: ST_TO_ADDR
// uc_nation := 0 ;
63607: LD_ADDR_OWVAR 21
63611: PUSH
63612: LD_INT 0
63614: ST_TO_ADDR
// hc_class := class_horse ;
63615: LD_ADDR_OWVAR 28
63619: PUSH
63620: LD_INT 21
63622: ST_TO_ADDR
// hc_gallery :=  ;
63623: LD_ADDR_OWVAR 33
63627: PUSH
63628: LD_STRING 
63630: ST_TO_ADDR
// end ;
63631: LD_VAR 0 1
63635: RET
// export function PrepareMastodont ( ) ; begin
63636: LD_INT 0
63638: PPUSH
// uc_side := 0 ;
63639: LD_ADDR_OWVAR 20
63643: PUSH
63644: LD_INT 0
63646: ST_TO_ADDR
// uc_nation := 0 ;
63647: LD_ADDR_OWVAR 21
63651: PUSH
63652: LD_INT 0
63654: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63655: LD_ADDR_OWVAR 37
63659: PUSH
63660: LD_INT 31
63662: ST_TO_ADDR
// vc_control := control_rider ;
63663: LD_ADDR_OWVAR 38
63667: PUSH
63668: LD_INT 4
63670: ST_TO_ADDR
// end ;
63671: LD_VAR 0 1
63675: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63676: LD_INT 0
63678: PPUSH
63679: PPUSH
63680: PPUSH
// uc_side = 0 ;
63681: LD_ADDR_OWVAR 20
63685: PUSH
63686: LD_INT 0
63688: ST_TO_ADDR
// uc_nation = 0 ;
63689: LD_ADDR_OWVAR 21
63693: PUSH
63694: LD_INT 0
63696: ST_TO_ADDR
// InitHc_All ( ) ;
63697: CALL_OW 584
// InitVc ;
63701: CALL_OW 20
// if mastodonts then
63705: LD_VAR 0 6
63709: IFFALSE 63776
// for i = 1 to mastodonts do
63711: LD_ADDR_VAR 0 11
63715: PUSH
63716: DOUBLE
63717: LD_INT 1
63719: DEC
63720: ST_TO_ADDR
63721: LD_VAR 0 6
63725: PUSH
63726: FOR_TO
63727: IFFALSE 63774
// begin vc_chassis := 31 ;
63729: LD_ADDR_OWVAR 37
63733: PUSH
63734: LD_INT 31
63736: ST_TO_ADDR
// vc_control := control_rider ;
63737: LD_ADDR_OWVAR 38
63741: PUSH
63742: LD_INT 4
63744: ST_TO_ADDR
// animal := CreateVehicle ;
63745: LD_ADDR_VAR 0 12
63749: PUSH
63750: CALL_OW 45
63754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63755: LD_VAR 0 12
63759: PPUSH
63760: LD_VAR 0 8
63764: PPUSH
63765: LD_INT 0
63767: PPUSH
63768: CALL 65904 0 3
// end ;
63772: GO 63726
63774: POP
63775: POP
// if horses then
63776: LD_VAR 0 5
63780: IFFALSE 63847
// for i = 1 to horses do
63782: LD_ADDR_VAR 0 11
63786: PUSH
63787: DOUBLE
63788: LD_INT 1
63790: DEC
63791: ST_TO_ADDR
63792: LD_VAR 0 5
63796: PUSH
63797: FOR_TO
63798: IFFALSE 63845
// begin hc_class := 21 ;
63800: LD_ADDR_OWVAR 28
63804: PUSH
63805: LD_INT 21
63807: ST_TO_ADDR
// hc_gallery :=  ;
63808: LD_ADDR_OWVAR 33
63812: PUSH
63813: LD_STRING 
63815: ST_TO_ADDR
// animal := CreateHuman ;
63816: LD_ADDR_VAR 0 12
63820: PUSH
63821: CALL_OW 44
63825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63826: LD_VAR 0 12
63830: PPUSH
63831: LD_VAR 0 8
63835: PPUSH
63836: LD_INT 0
63838: PPUSH
63839: CALL 65904 0 3
// end ;
63843: GO 63797
63845: POP
63846: POP
// if birds then
63847: LD_VAR 0 1
63851: IFFALSE 63918
// for i = 1 to birds do
63853: LD_ADDR_VAR 0 11
63857: PUSH
63858: DOUBLE
63859: LD_INT 1
63861: DEC
63862: ST_TO_ADDR
63863: LD_VAR 0 1
63867: PUSH
63868: FOR_TO
63869: IFFALSE 63916
// begin hc_class := 18 ;
63871: LD_ADDR_OWVAR 28
63875: PUSH
63876: LD_INT 18
63878: ST_TO_ADDR
// hc_gallery =  ;
63879: LD_ADDR_OWVAR 33
63883: PUSH
63884: LD_STRING 
63886: ST_TO_ADDR
// animal := CreateHuman ;
63887: LD_ADDR_VAR 0 12
63891: PUSH
63892: CALL_OW 44
63896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63897: LD_VAR 0 12
63901: PPUSH
63902: LD_VAR 0 8
63906: PPUSH
63907: LD_INT 0
63909: PPUSH
63910: CALL 65904 0 3
// end ;
63914: GO 63868
63916: POP
63917: POP
// if tigers then
63918: LD_VAR 0 2
63922: IFFALSE 64006
// for i = 1 to tigers do
63924: LD_ADDR_VAR 0 11
63928: PUSH
63929: DOUBLE
63930: LD_INT 1
63932: DEC
63933: ST_TO_ADDR
63934: LD_VAR 0 2
63938: PUSH
63939: FOR_TO
63940: IFFALSE 64004
// begin hc_class = class_tiger ;
63942: LD_ADDR_OWVAR 28
63946: PUSH
63947: LD_INT 14
63949: ST_TO_ADDR
// hc_gallery =  ;
63950: LD_ADDR_OWVAR 33
63954: PUSH
63955: LD_STRING 
63957: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63958: LD_ADDR_OWVAR 35
63962: PUSH
63963: LD_INT 7
63965: NEG
63966: PPUSH
63967: LD_INT 7
63969: PPUSH
63970: CALL_OW 12
63974: ST_TO_ADDR
// animal := CreateHuman ;
63975: LD_ADDR_VAR 0 12
63979: PUSH
63980: CALL_OW 44
63984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63985: LD_VAR 0 12
63989: PPUSH
63990: LD_VAR 0 8
63994: PPUSH
63995: LD_INT 0
63997: PPUSH
63998: CALL 65904 0 3
// end ;
64002: GO 63939
64004: POP
64005: POP
// if apemans then
64006: LD_VAR 0 3
64010: IFFALSE 64133
// for i = 1 to apemans do
64012: LD_ADDR_VAR 0 11
64016: PUSH
64017: DOUBLE
64018: LD_INT 1
64020: DEC
64021: ST_TO_ADDR
64022: LD_VAR 0 3
64026: PUSH
64027: FOR_TO
64028: IFFALSE 64131
// begin hc_class = class_apeman ;
64030: LD_ADDR_OWVAR 28
64034: PUSH
64035: LD_INT 12
64037: ST_TO_ADDR
// hc_gallery =  ;
64038: LD_ADDR_OWVAR 33
64042: PUSH
64043: LD_STRING 
64045: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64046: LD_ADDR_OWVAR 35
64050: PUSH
64051: LD_INT 2
64053: NEG
64054: PPUSH
64055: LD_INT 2
64057: PPUSH
64058: CALL_OW 12
64062: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64063: LD_ADDR_OWVAR 31
64067: PUSH
64068: LD_INT 1
64070: PPUSH
64071: LD_INT 3
64073: PPUSH
64074: CALL_OW 12
64078: PUSH
64079: LD_INT 1
64081: PPUSH
64082: LD_INT 3
64084: PPUSH
64085: CALL_OW 12
64089: PUSH
64090: LD_INT 0
64092: PUSH
64093: LD_INT 0
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// animal := CreateHuman ;
64102: LD_ADDR_VAR 0 12
64106: PUSH
64107: CALL_OW 44
64111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64112: LD_VAR 0 12
64116: PPUSH
64117: LD_VAR 0 8
64121: PPUSH
64122: LD_INT 0
64124: PPUSH
64125: CALL 65904 0 3
// end ;
64129: GO 64027
64131: POP
64132: POP
// if enchidnas then
64133: LD_VAR 0 4
64137: IFFALSE 64204
// for i = 1 to enchidnas do
64139: LD_ADDR_VAR 0 11
64143: PUSH
64144: DOUBLE
64145: LD_INT 1
64147: DEC
64148: ST_TO_ADDR
64149: LD_VAR 0 4
64153: PUSH
64154: FOR_TO
64155: IFFALSE 64202
// begin hc_class = 13 ;
64157: LD_ADDR_OWVAR 28
64161: PUSH
64162: LD_INT 13
64164: ST_TO_ADDR
// hc_gallery =  ;
64165: LD_ADDR_OWVAR 33
64169: PUSH
64170: LD_STRING 
64172: ST_TO_ADDR
// animal := CreateHuman ;
64173: LD_ADDR_VAR 0 12
64177: PUSH
64178: CALL_OW 44
64182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64183: LD_VAR 0 12
64187: PPUSH
64188: LD_VAR 0 8
64192: PPUSH
64193: LD_INT 0
64195: PPUSH
64196: CALL 65904 0 3
// end ;
64200: GO 64154
64202: POP
64203: POP
// if fishes then
64204: LD_VAR 0 7
64208: IFFALSE 64275
// for i = 1 to fishes do
64210: LD_ADDR_VAR 0 11
64214: PUSH
64215: DOUBLE
64216: LD_INT 1
64218: DEC
64219: ST_TO_ADDR
64220: LD_VAR 0 7
64224: PUSH
64225: FOR_TO
64226: IFFALSE 64273
// begin hc_class = 20 ;
64228: LD_ADDR_OWVAR 28
64232: PUSH
64233: LD_INT 20
64235: ST_TO_ADDR
// hc_gallery =  ;
64236: LD_ADDR_OWVAR 33
64240: PUSH
64241: LD_STRING 
64243: ST_TO_ADDR
// animal := CreateHuman ;
64244: LD_ADDR_VAR 0 12
64248: PUSH
64249: CALL_OW 44
64253: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64254: LD_VAR 0 12
64258: PPUSH
64259: LD_VAR 0 9
64263: PPUSH
64264: LD_INT 0
64266: PPUSH
64267: CALL 65904 0 3
// end ;
64271: GO 64225
64273: POP
64274: POP
// end ;
64275: LD_VAR 0 10
64279: RET
// export function WantHeal ( sci , unit ) ; begin
64280: LD_INT 0
64282: PPUSH
// if GetTaskList ( sci ) > 0 then
64283: LD_VAR 0 1
64287: PPUSH
64288: CALL_OW 437
64292: PUSH
64293: LD_INT 0
64295: GREATER
64296: IFFALSE 64366
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64298: LD_VAR 0 1
64302: PPUSH
64303: CALL_OW 437
64307: PUSH
64308: LD_INT 1
64310: ARRAY
64311: PUSH
64312: LD_INT 1
64314: ARRAY
64315: PUSH
64316: LD_STRING l
64318: EQUAL
64319: PUSH
64320: LD_VAR 0 1
64324: PPUSH
64325: CALL_OW 437
64329: PUSH
64330: LD_INT 1
64332: ARRAY
64333: PUSH
64334: LD_INT 4
64336: ARRAY
64337: PUSH
64338: LD_VAR 0 2
64342: EQUAL
64343: AND
64344: IFFALSE 64356
// result := true else
64346: LD_ADDR_VAR 0 3
64350: PUSH
64351: LD_INT 1
64353: ST_TO_ADDR
64354: GO 64364
// result := false ;
64356: LD_ADDR_VAR 0 3
64360: PUSH
64361: LD_INT 0
64363: ST_TO_ADDR
// end else
64364: GO 64374
// result := false ;
64366: LD_ADDR_VAR 0 3
64370: PUSH
64371: LD_INT 0
64373: ST_TO_ADDR
// end ;
64374: LD_VAR 0 3
64378: RET
// export function HealTarget ( sci ) ; begin
64379: LD_INT 0
64381: PPUSH
// if not sci then
64382: LD_VAR 0 1
64386: NOT
64387: IFFALSE 64391
// exit ;
64389: GO 64456
// result := 0 ;
64391: LD_ADDR_VAR 0 2
64395: PUSH
64396: LD_INT 0
64398: ST_TO_ADDR
// if GetTaskList ( sci ) then
64399: LD_VAR 0 1
64403: PPUSH
64404: CALL_OW 437
64408: IFFALSE 64456
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64410: LD_VAR 0 1
64414: PPUSH
64415: CALL_OW 437
64419: PUSH
64420: LD_INT 1
64422: ARRAY
64423: PUSH
64424: LD_INT 1
64426: ARRAY
64427: PUSH
64428: LD_STRING l
64430: EQUAL
64431: IFFALSE 64456
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64433: LD_ADDR_VAR 0 2
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: CALL_OW 437
64447: PUSH
64448: LD_INT 1
64450: ARRAY
64451: PUSH
64452: LD_INT 4
64454: ARRAY
64455: ST_TO_ADDR
// end ;
64456: LD_VAR 0 2
64460: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64461: LD_INT 0
64463: PPUSH
64464: PPUSH
64465: PPUSH
64466: PPUSH
// if not base_units then
64467: LD_VAR 0 1
64471: NOT
64472: IFFALSE 64476
// exit ;
64474: GO 64563
// result := false ;
64476: LD_ADDR_VAR 0 2
64480: PUSH
64481: LD_INT 0
64483: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64484: LD_ADDR_VAR 0 5
64488: PUSH
64489: LD_VAR 0 1
64493: PPUSH
64494: LD_INT 21
64496: PUSH
64497: LD_INT 3
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PPUSH
64504: CALL_OW 72
64508: ST_TO_ADDR
// if not tmp then
64509: LD_VAR 0 5
64513: NOT
64514: IFFALSE 64518
// exit ;
64516: GO 64563
// for i in tmp do
64518: LD_ADDR_VAR 0 3
64522: PUSH
64523: LD_VAR 0 5
64527: PUSH
64528: FOR_IN
64529: IFFALSE 64561
// begin result := EnemyInRange ( i , 22 ) ;
64531: LD_ADDR_VAR 0 2
64535: PUSH
64536: LD_VAR 0 3
64540: PPUSH
64541: LD_INT 22
64543: PPUSH
64544: CALL 62161 0 2
64548: ST_TO_ADDR
// if result then
64549: LD_VAR 0 2
64553: IFFALSE 64559
// exit ;
64555: POP
64556: POP
64557: GO 64563
// end ;
64559: GO 64528
64561: POP
64562: POP
// end ;
64563: LD_VAR 0 2
64567: RET
// export function FilterByTag ( units , tag ) ; begin
64568: LD_INT 0
64570: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64571: LD_ADDR_VAR 0 3
64575: PUSH
64576: LD_VAR 0 1
64580: PPUSH
64581: LD_INT 120
64583: PUSH
64584: LD_VAR 0 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PPUSH
64593: CALL_OW 72
64597: ST_TO_ADDR
// end ;
64598: LD_VAR 0 3
64602: RET
// export function IsDriver ( un ) ; begin
64603: LD_INT 0
64605: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64606: LD_ADDR_VAR 0 2
64610: PUSH
64611: LD_VAR 0 1
64615: PUSH
64616: LD_INT 55
64618: PUSH
64619: EMPTY
64620: LIST
64621: PPUSH
64622: CALL_OW 69
64626: IN
64627: ST_TO_ADDR
// end ;
64628: LD_VAR 0 2
64632: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64633: LD_INT 0
64635: PPUSH
64636: PPUSH
// list := [ ] ;
64637: LD_ADDR_VAR 0 5
64641: PUSH
64642: EMPTY
64643: ST_TO_ADDR
// case d of 0 :
64644: LD_VAR 0 3
64648: PUSH
64649: LD_INT 0
64651: DOUBLE
64652: EQUAL
64653: IFTRUE 64657
64655: GO 64790
64657: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64658: LD_ADDR_VAR 0 5
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_INT 4
64670: MINUS
64671: PUSH
64672: LD_VAR 0 2
64676: PUSH
64677: LD_INT 4
64679: MINUS
64680: PUSH
64681: LD_INT 2
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: LIST
64688: PUSH
64689: LD_VAR 0 1
64693: PUSH
64694: LD_INT 3
64696: MINUS
64697: PUSH
64698: LD_VAR 0 2
64702: PUSH
64703: LD_INT 1
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: LIST
64710: PUSH
64711: LD_VAR 0 1
64715: PUSH
64716: LD_INT 4
64718: PLUS
64719: PUSH
64720: LD_VAR 0 2
64724: PUSH
64725: LD_INT 4
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: PUSH
64733: LD_VAR 0 1
64737: PUSH
64738: LD_INT 3
64740: PLUS
64741: PUSH
64742: LD_VAR 0 2
64746: PUSH
64747: LD_INT 3
64749: PLUS
64750: PUSH
64751: LD_INT 5
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: LIST
64758: PUSH
64759: LD_VAR 0 1
64763: PUSH
64764: LD_VAR 0 2
64768: PUSH
64769: LD_INT 4
64771: PLUS
64772: PUSH
64773: LD_INT 0
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: LIST
64787: ST_TO_ADDR
// end ; 1 :
64788: GO 65488
64790: LD_INT 1
64792: DOUBLE
64793: EQUAL
64794: IFTRUE 64798
64796: GO 64931
64798: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64799: LD_ADDR_VAR 0 5
64803: PUSH
64804: LD_VAR 0 1
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 4
64816: MINUS
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: PUSH
64826: LD_VAR 0 1
64830: PUSH
64831: LD_INT 3
64833: MINUS
64834: PUSH
64835: LD_VAR 0 2
64839: PUSH
64840: LD_INT 3
64842: MINUS
64843: PUSH
64844: LD_INT 2
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: PUSH
64852: LD_VAR 0 1
64856: PUSH
64857: LD_INT 4
64859: MINUS
64860: PUSH
64861: LD_VAR 0 2
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: LIST
64873: PUSH
64874: LD_VAR 0 1
64878: PUSH
64879: LD_VAR 0 2
64883: PUSH
64884: LD_INT 3
64886: PLUS
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: LD_VAR 0 1
64900: PUSH
64901: LD_INT 4
64903: PLUS
64904: PUSH
64905: LD_VAR 0 2
64909: PUSH
64910: LD_INT 4
64912: PLUS
64913: PUSH
64914: LD_INT 5
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: LIST
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: ST_TO_ADDR
// end ; 2 :
64929: GO 65488
64931: LD_INT 2
64933: DOUBLE
64934: EQUAL
64935: IFTRUE 64939
64937: GO 65068
64939: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64940: LD_ADDR_VAR 0 5
64944: PUSH
64945: LD_VAR 0 1
64949: PUSH
64950: LD_VAR 0 2
64954: PUSH
64955: LD_INT 3
64957: MINUS
64958: PUSH
64959: LD_INT 3
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: PUSH
64967: LD_VAR 0 1
64971: PUSH
64972: LD_INT 4
64974: PLUS
64975: PUSH
64976: LD_VAR 0 2
64980: PUSH
64981: LD_INT 4
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: PUSH
64989: LD_VAR 0 1
64993: PUSH
64994: LD_VAR 0 2
64998: PUSH
64999: LD_INT 4
65001: PLUS
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: LIST
65010: PUSH
65011: LD_VAR 0 1
65015: PUSH
65016: LD_INT 3
65018: MINUS
65019: PUSH
65020: LD_VAR 0 2
65024: PUSH
65025: LD_INT 1
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: LIST
65032: PUSH
65033: LD_VAR 0 1
65037: PUSH
65038: LD_INT 4
65040: MINUS
65041: PUSH
65042: LD_VAR 0 2
65046: PUSH
65047: LD_INT 4
65049: MINUS
65050: PUSH
65051: LD_INT 2
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: ST_TO_ADDR
// end ; 3 :
65066: GO 65488
65068: LD_INT 3
65070: DOUBLE
65071: EQUAL
65072: IFTRUE 65076
65074: GO 65209
65076: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65077: LD_ADDR_VAR 0 5
65081: PUSH
65082: LD_VAR 0 1
65086: PUSH
65087: LD_INT 3
65089: PLUS
65090: PUSH
65091: LD_VAR 0 2
65095: PUSH
65096: LD_INT 4
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 4
65111: PLUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 4
65120: PLUS
65121: PUSH
65122: LD_INT 5
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: LIST
65129: PUSH
65130: LD_VAR 0 1
65134: PUSH
65135: LD_INT 4
65137: MINUS
65138: PUSH
65139: LD_VAR 0 2
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: LIST
65151: PUSH
65152: LD_VAR 0 1
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 4
65164: MINUS
65165: PUSH
65166: LD_INT 3
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: LD_VAR 0 1
65178: PUSH
65179: LD_INT 3
65181: MINUS
65182: PUSH
65183: LD_VAR 0 2
65187: PUSH
65188: LD_INT 3
65190: MINUS
65191: PUSH
65192: LD_INT 2
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: LIST
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: ST_TO_ADDR
// end ; 4 :
65207: GO 65488
65209: LD_INT 4
65211: DOUBLE
65212: EQUAL
65213: IFTRUE 65217
65215: GO 65350
65217: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65218: LD_ADDR_VAR 0 5
65222: PUSH
65223: LD_VAR 0 1
65227: PUSH
65228: LD_VAR 0 2
65232: PUSH
65233: LD_INT 4
65235: PLUS
65236: PUSH
65237: LD_INT 0
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_INT 3
65252: PLUS
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 3
65261: PLUS
65262: PUSH
65263: LD_INT 5
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: LIST
65270: PUSH
65271: LD_VAR 0 1
65275: PUSH
65276: LD_INT 4
65278: PLUS
65279: PUSH
65280: LD_VAR 0 2
65284: PUSH
65285: LD_INT 4
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: PUSH
65293: LD_VAR 0 1
65297: PUSH
65298: LD_VAR 0 2
65302: PUSH
65303: LD_INT 3
65305: MINUS
65306: PUSH
65307: LD_INT 3
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: LD_VAR 0 1
65319: PUSH
65320: LD_INT 4
65322: MINUS
65323: PUSH
65324: LD_VAR 0 2
65328: PUSH
65329: LD_INT 4
65331: MINUS
65332: PUSH
65333: LD_INT 2
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: LIST
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: ST_TO_ADDR
// end ; 5 :
65348: GO 65488
65350: LD_INT 5
65352: DOUBLE
65353: EQUAL
65354: IFTRUE 65358
65356: GO 65487
65358: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65359: LD_ADDR_VAR 0 5
65363: PUSH
65364: LD_VAR 0 1
65368: PUSH
65369: LD_INT 4
65371: MINUS
65372: PUSH
65373: LD_VAR 0 2
65377: PUSH
65378: LD_INT 1
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: LIST
65385: PUSH
65386: LD_VAR 0 1
65390: PUSH
65391: LD_VAR 0 2
65395: PUSH
65396: LD_INT 4
65398: MINUS
65399: PUSH
65400: LD_INT 3
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_INT 4
65415: PLUS
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_INT 4
65424: PLUS
65425: PUSH
65426: LD_INT 5
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: LD_VAR 0 1
65438: PUSH
65439: LD_INT 3
65441: PLUS
65442: PUSH
65443: LD_VAR 0 2
65447: PUSH
65448: LD_INT 4
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: LIST
65455: PUSH
65456: LD_VAR 0 1
65460: PUSH
65461: LD_VAR 0 2
65465: PUSH
65466: LD_INT 3
65468: PLUS
65469: PUSH
65470: LD_INT 0
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: LIST
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: ST_TO_ADDR
// end ; end ;
65485: GO 65488
65487: POP
// result := list ;
65488: LD_ADDR_VAR 0 4
65492: PUSH
65493: LD_VAR 0 5
65497: ST_TO_ADDR
// end ;
65498: LD_VAR 0 4
65502: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65503: LD_INT 0
65505: PPUSH
65506: PPUSH
65507: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65508: LD_VAR 0 1
65512: NOT
65513: PUSH
65514: LD_VAR 0 2
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: LD_INT 2
65524: PUSH
65525: LD_INT 3
65527: PUSH
65528: LD_INT 4
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: IN
65537: NOT
65538: OR
65539: IFFALSE 65543
// exit ;
65541: GO 65626
// tmp := [ ] ;
65543: LD_ADDR_VAR 0 5
65547: PUSH
65548: EMPTY
65549: ST_TO_ADDR
// for i in units do
65550: LD_ADDR_VAR 0 4
65554: PUSH
65555: LD_VAR 0 1
65559: PUSH
65560: FOR_IN
65561: IFFALSE 65595
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65563: LD_ADDR_VAR 0 5
65567: PUSH
65568: LD_VAR 0 5
65572: PPUSH
65573: LD_VAR 0 4
65577: PPUSH
65578: LD_VAR 0 2
65582: PPUSH
65583: CALL_OW 259
65587: PPUSH
65588: CALL 66999 0 2
65592: ST_TO_ADDR
65593: GO 65560
65595: POP
65596: POP
// if not tmp then
65597: LD_VAR 0 5
65601: NOT
65602: IFFALSE 65606
// exit ;
65604: GO 65626
// result := SortListByListDesc ( units , tmp ) ;
65606: LD_ADDR_VAR 0 3
65610: PUSH
65611: LD_VAR 0 1
65615: PPUSH
65616: LD_VAR 0 5
65620: PPUSH
65621: CALL_OW 77
65625: ST_TO_ADDR
// end ;
65626: LD_VAR 0 3
65630: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65631: LD_INT 0
65633: PPUSH
65634: PPUSH
65635: PPUSH
// result := false ;
65636: LD_ADDR_VAR 0 3
65640: PUSH
65641: LD_INT 0
65643: ST_TO_ADDR
// if not building then
65644: LD_VAR 0 2
65648: NOT
65649: IFFALSE 65653
// exit ;
65651: GO 65791
// x := GetX ( building ) ;
65653: LD_ADDR_VAR 0 4
65657: PUSH
65658: LD_VAR 0 2
65662: PPUSH
65663: CALL_OW 250
65667: ST_TO_ADDR
// y := GetY ( building ) ;
65668: LD_ADDR_VAR 0 5
65672: PUSH
65673: LD_VAR 0 2
65677: PPUSH
65678: CALL_OW 251
65682: ST_TO_ADDR
// if not x or not y then
65683: LD_VAR 0 4
65687: NOT
65688: PUSH
65689: LD_VAR 0 5
65693: NOT
65694: OR
65695: IFFALSE 65699
// exit ;
65697: GO 65791
// if GetTaskList ( unit ) then
65699: LD_VAR 0 1
65703: PPUSH
65704: CALL_OW 437
65708: IFFALSE 65791
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65710: LD_STRING e
65712: PUSH
65713: LD_VAR 0 1
65717: PPUSH
65718: CALL_OW 437
65722: PUSH
65723: LD_INT 1
65725: ARRAY
65726: PUSH
65727: LD_INT 1
65729: ARRAY
65730: EQUAL
65731: PUSH
65732: LD_VAR 0 4
65736: PUSH
65737: LD_VAR 0 1
65741: PPUSH
65742: CALL_OW 437
65746: PUSH
65747: LD_INT 1
65749: ARRAY
65750: PUSH
65751: LD_INT 2
65753: ARRAY
65754: EQUAL
65755: AND
65756: PUSH
65757: LD_VAR 0 5
65761: PUSH
65762: LD_VAR 0 1
65766: PPUSH
65767: CALL_OW 437
65771: PUSH
65772: LD_INT 1
65774: ARRAY
65775: PUSH
65776: LD_INT 3
65778: ARRAY
65779: EQUAL
65780: AND
65781: IFFALSE 65791
// result := true end ;
65783: LD_ADDR_VAR 0 3
65787: PUSH
65788: LD_INT 1
65790: ST_TO_ADDR
// end ;
65791: LD_VAR 0 3
65795: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65796: LD_INT 0
65798: PPUSH
// result := false ;
65799: LD_ADDR_VAR 0 4
65803: PUSH
65804: LD_INT 0
65806: ST_TO_ADDR
// if GetTaskList ( unit ) then
65807: LD_VAR 0 1
65811: PPUSH
65812: CALL_OW 437
65816: IFFALSE 65899
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65818: LD_STRING M
65820: PUSH
65821: LD_VAR 0 1
65825: PPUSH
65826: CALL_OW 437
65830: PUSH
65831: LD_INT 1
65833: ARRAY
65834: PUSH
65835: LD_INT 1
65837: ARRAY
65838: EQUAL
65839: PUSH
65840: LD_VAR 0 2
65844: PUSH
65845: LD_VAR 0 1
65849: PPUSH
65850: CALL_OW 437
65854: PUSH
65855: LD_INT 1
65857: ARRAY
65858: PUSH
65859: LD_INT 2
65861: ARRAY
65862: EQUAL
65863: AND
65864: PUSH
65865: LD_VAR 0 3
65869: PUSH
65870: LD_VAR 0 1
65874: PPUSH
65875: CALL_OW 437
65879: PUSH
65880: LD_INT 1
65882: ARRAY
65883: PUSH
65884: LD_INT 3
65886: ARRAY
65887: EQUAL
65888: AND
65889: IFFALSE 65899
// result := true ;
65891: LD_ADDR_VAR 0 4
65895: PUSH
65896: LD_INT 1
65898: ST_TO_ADDR
// end ; end ;
65899: LD_VAR 0 4
65903: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65904: LD_INT 0
65906: PPUSH
65907: PPUSH
65908: PPUSH
65909: PPUSH
// if not unit or not area then
65910: LD_VAR 0 1
65914: NOT
65915: PUSH
65916: LD_VAR 0 2
65920: NOT
65921: OR
65922: IFFALSE 65926
// exit ;
65924: GO 66102
// tmp := AreaToList ( area , i ) ;
65926: LD_ADDR_VAR 0 6
65930: PUSH
65931: LD_VAR 0 2
65935: PPUSH
65936: LD_VAR 0 5
65940: PPUSH
65941: CALL_OW 517
65945: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65946: LD_ADDR_VAR 0 5
65950: PUSH
65951: DOUBLE
65952: LD_INT 1
65954: DEC
65955: ST_TO_ADDR
65956: LD_VAR 0 6
65960: PUSH
65961: LD_INT 1
65963: ARRAY
65964: PUSH
65965: FOR_TO
65966: IFFALSE 66100
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65968: LD_ADDR_VAR 0 7
65972: PUSH
65973: LD_VAR 0 6
65977: PUSH
65978: LD_INT 1
65980: ARRAY
65981: PUSH
65982: LD_VAR 0 5
65986: ARRAY
65987: PUSH
65988: LD_VAR 0 6
65992: PUSH
65993: LD_INT 2
65995: ARRAY
65996: PUSH
65997: LD_VAR 0 5
66001: ARRAY
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66007: LD_INT 92
66009: PUSH
66010: LD_VAR 0 7
66014: PUSH
66015: LD_INT 1
66017: ARRAY
66018: PUSH
66019: LD_VAR 0 7
66023: PUSH
66024: LD_INT 2
66026: ARRAY
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: PPUSH
66037: CALL_OW 69
66041: PUSH
66042: LD_INT 0
66044: EQUAL
66045: IFFALSE 66098
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66047: LD_VAR 0 1
66051: PPUSH
66052: LD_VAR 0 7
66056: PUSH
66057: LD_INT 1
66059: ARRAY
66060: PPUSH
66061: LD_VAR 0 7
66065: PUSH
66066: LD_INT 2
66068: ARRAY
66069: PPUSH
66070: LD_VAR 0 3
66074: PPUSH
66075: CALL_OW 48
// result := IsPlaced ( unit ) ;
66079: LD_ADDR_VAR 0 4
66083: PUSH
66084: LD_VAR 0 1
66088: PPUSH
66089: CALL_OW 305
66093: ST_TO_ADDR
// exit ;
66094: POP
66095: POP
66096: GO 66102
// end ; end ;
66098: GO 65965
66100: POP
66101: POP
// end ;
66102: LD_VAR 0 4
66106: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66107: LD_INT 0
66109: PPUSH
66110: PPUSH
66111: PPUSH
// if not side or side > 8 then
66112: LD_VAR 0 1
66116: NOT
66117: PUSH
66118: LD_VAR 0 1
66122: PUSH
66123: LD_INT 8
66125: GREATER
66126: OR
66127: IFFALSE 66131
// exit ;
66129: GO 66318
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66131: LD_ADDR_VAR 0 4
66135: PUSH
66136: LD_INT 22
66138: PUSH
66139: LD_VAR 0 1
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 21
66150: PUSH
66151: LD_INT 3
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PPUSH
66162: CALL_OW 69
66166: ST_TO_ADDR
// if not tmp then
66167: LD_VAR 0 4
66171: NOT
66172: IFFALSE 66176
// exit ;
66174: GO 66318
// enable_addtolog := true ;
66176: LD_ADDR_OWVAR 81
66180: PUSH
66181: LD_INT 1
66183: ST_TO_ADDR
// AddToLog ( [ ) ;
66184: LD_STRING [
66186: PPUSH
66187: CALL_OW 561
// for i in tmp do
66191: LD_ADDR_VAR 0 3
66195: PUSH
66196: LD_VAR 0 4
66200: PUSH
66201: FOR_IN
66202: IFFALSE 66309
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66204: LD_STRING [
66206: PUSH
66207: LD_VAR 0 3
66211: PPUSH
66212: CALL_OW 266
66216: STR
66217: PUSH
66218: LD_STRING , 
66220: STR
66221: PUSH
66222: LD_VAR 0 3
66226: PPUSH
66227: CALL_OW 250
66231: STR
66232: PUSH
66233: LD_STRING , 
66235: STR
66236: PUSH
66237: LD_VAR 0 3
66241: PPUSH
66242: CALL_OW 251
66246: STR
66247: PUSH
66248: LD_STRING , 
66250: STR
66251: PUSH
66252: LD_VAR 0 3
66256: PPUSH
66257: CALL_OW 254
66261: STR
66262: PUSH
66263: LD_STRING , 
66265: STR
66266: PUSH
66267: LD_VAR 0 3
66271: PPUSH
66272: LD_INT 1
66274: PPUSH
66275: CALL_OW 268
66279: STR
66280: PUSH
66281: LD_STRING , 
66283: STR
66284: PUSH
66285: LD_VAR 0 3
66289: PPUSH
66290: LD_INT 2
66292: PPUSH
66293: CALL_OW 268
66297: STR
66298: PUSH
66299: LD_STRING ],
66301: STR
66302: PPUSH
66303: CALL_OW 561
// end ;
66307: GO 66201
66309: POP
66310: POP
// AddToLog ( ]; ) ;
66311: LD_STRING ];
66313: PPUSH
66314: CALL_OW 561
// end ;
66318: LD_VAR 0 2
66322: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66323: LD_INT 0
66325: PPUSH
66326: PPUSH
66327: PPUSH
66328: PPUSH
66329: PPUSH
// if not area or not rate or not max then
66330: LD_VAR 0 1
66334: NOT
66335: PUSH
66336: LD_VAR 0 2
66340: NOT
66341: OR
66342: PUSH
66343: LD_VAR 0 4
66347: NOT
66348: OR
66349: IFFALSE 66353
// exit ;
66351: GO 66542
// while 1 do
66353: LD_INT 1
66355: IFFALSE 66542
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66357: LD_ADDR_VAR 0 9
66361: PUSH
66362: LD_VAR 0 1
66366: PPUSH
66367: LD_INT 1
66369: PPUSH
66370: CALL_OW 287
66374: PUSH
66375: LD_INT 10
66377: MUL
66378: ST_TO_ADDR
// r := rate / 10 ;
66379: LD_ADDR_VAR 0 7
66383: PUSH
66384: LD_VAR 0 2
66388: PUSH
66389: LD_INT 10
66391: DIVREAL
66392: ST_TO_ADDR
// time := 1 1$00 ;
66393: LD_ADDR_VAR 0 8
66397: PUSH
66398: LD_INT 2100
66400: ST_TO_ADDR
// if amount < min then
66401: LD_VAR 0 9
66405: PUSH
66406: LD_VAR 0 3
66410: LESS
66411: IFFALSE 66429
// r := r * 2 else
66413: LD_ADDR_VAR 0 7
66417: PUSH
66418: LD_VAR 0 7
66422: PUSH
66423: LD_INT 2
66425: MUL
66426: ST_TO_ADDR
66427: GO 66455
// if amount > max then
66429: LD_VAR 0 9
66433: PUSH
66434: LD_VAR 0 4
66438: GREATER
66439: IFFALSE 66455
// r := r / 2 ;
66441: LD_ADDR_VAR 0 7
66445: PUSH
66446: LD_VAR 0 7
66450: PUSH
66451: LD_INT 2
66453: DIVREAL
66454: ST_TO_ADDR
// time := time / r ;
66455: LD_ADDR_VAR 0 8
66459: PUSH
66460: LD_VAR 0 8
66464: PUSH
66465: LD_VAR 0 7
66469: DIVREAL
66470: ST_TO_ADDR
// if time < 0 then
66471: LD_VAR 0 8
66475: PUSH
66476: LD_INT 0
66478: LESS
66479: IFFALSE 66496
// time := time * - 1 ;
66481: LD_ADDR_VAR 0 8
66485: PUSH
66486: LD_VAR 0 8
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: MUL
66495: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66496: LD_VAR 0 8
66500: PUSH
66501: LD_INT 35
66503: PPUSH
66504: LD_INT 875
66506: PPUSH
66507: CALL_OW 12
66511: PLUS
66512: PPUSH
66513: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66517: LD_INT 1
66519: PPUSH
66520: LD_INT 5
66522: PPUSH
66523: CALL_OW 12
66527: PPUSH
66528: LD_VAR 0 1
66532: PPUSH
66533: LD_INT 1
66535: PPUSH
66536: CALL_OW 55
// end ;
66540: GO 66353
// end ;
66542: LD_VAR 0 5
66546: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66547: LD_INT 0
66549: PPUSH
66550: PPUSH
66551: PPUSH
66552: PPUSH
66553: PPUSH
66554: PPUSH
66555: PPUSH
66556: PPUSH
// if not turrets or not factories then
66557: LD_VAR 0 1
66561: NOT
66562: PUSH
66563: LD_VAR 0 2
66567: NOT
66568: OR
66569: IFFALSE 66573
// exit ;
66571: GO 66880
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66573: LD_ADDR_VAR 0 10
66577: PUSH
66578: LD_INT 5
66580: PUSH
66581: LD_INT 6
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 4
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 3
66600: PUSH
66601: LD_INT 5
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 24
66615: PUSH
66616: LD_INT 25
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PUSH
66623: LD_INT 23
66625: PUSH
66626: LD_INT 27
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 42
66639: PUSH
66640: LD_INT 43
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 44
66649: PUSH
66650: LD_INT 46
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 45
66659: PUSH
66660: LD_INT 47
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: LIST
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: LIST
66676: ST_TO_ADDR
// result := [ ] ;
66677: LD_ADDR_VAR 0 3
66681: PUSH
66682: EMPTY
66683: ST_TO_ADDR
// for i in turrets do
66684: LD_ADDR_VAR 0 4
66688: PUSH
66689: LD_VAR 0 1
66693: PUSH
66694: FOR_IN
66695: IFFALSE 66878
// begin nat := GetNation ( i ) ;
66697: LD_ADDR_VAR 0 7
66701: PUSH
66702: LD_VAR 0 4
66706: PPUSH
66707: CALL_OW 248
66711: ST_TO_ADDR
// weapon := 0 ;
66712: LD_ADDR_VAR 0 8
66716: PUSH
66717: LD_INT 0
66719: ST_TO_ADDR
// if not nat then
66720: LD_VAR 0 7
66724: NOT
66725: IFFALSE 66729
// continue ;
66727: GO 66694
// for j in list [ nat ] do
66729: LD_ADDR_VAR 0 5
66733: PUSH
66734: LD_VAR 0 10
66738: PUSH
66739: LD_VAR 0 7
66743: ARRAY
66744: PUSH
66745: FOR_IN
66746: IFFALSE 66787
// if GetBWeapon ( i ) = j [ 1 ] then
66748: LD_VAR 0 4
66752: PPUSH
66753: CALL_OW 269
66757: PUSH
66758: LD_VAR 0 5
66762: PUSH
66763: LD_INT 1
66765: ARRAY
66766: EQUAL
66767: IFFALSE 66785
// begin weapon := j [ 2 ] ;
66769: LD_ADDR_VAR 0 8
66773: PUSH
66774: LD_VAR 0 5
66778: PUSH
66779: LD_INT 2
66781: ARRAY
66782: ST_TO_ADDR
// break ;
66783: GO 66787
// end ;
66785: GO 66745
66787: POP
66788: POP
// if not weapon then
66789: LD_VAR 0 8
66793: NOT
66794: IFFALSE 66798
// continue ;
66796: GO 66694
// for k in factories do
66798: LD_ADDR_VAR 0 6
66802: PUSH
66803: LD_VAR 0 2
66807: PUSH
66808: FOR_IN
66809: IFFALSE 66874
// begin weapons := AvailableWeaponList ( k ) ;
66811: LD_ADDR_VAR 0 9
66815: PUSH
66816: LD_VAR 0 6
66820: PPUSH
66821: CALL_OW 478
66825: ST_TO_ADDR
// if not weapons then
66826: LD_VAR 0 9
66830: NOT
66831: IFFALSE 66835
// continue ;
66833: GO 66808
// if weapon in weapons then
66835: LD_VAR 0 8
66839: PUSH
66840: LD_VAR 0 9
66844: IN
66845: IFFALSE 66872
// begin result := [ i , weapon ] ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 4
66856: PUSH
66857: LD_VAR 0 8
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: ST_TO_ADDR
// exit ;
66866: POP
66867: POP
66868: POP
66869: POP
66870: GO 66880
// end ; end ;
66872: GO 66808
66874: POP
66875: POP
// end ;
66876: GO 66694
66878: POP
66879: POP
// end ;
66880: LD_VAR 0 3
66884: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66885: LD_INT 0
66887: PPUSH
// if not side or side > 8 then
66888: LD_VAR 0 3
66892: NOT
66893: PUSH
66894: LD_VAR 0 3
66898: PUSH
66899: LD_INT 8
66901: GREATER
66902: OR
66903: IFFALSE 66907
// exit ;
66905: GO 66966
// if not range then
66907: LD_VAR 0 4
66911: NOT
66912: IFFALSE 66923
// range := - 12 ;
66914: LD_ADDR_VAR 0 4
66918: PUSH
66919: LD_INT 12
66921: NEG
66922: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66923: LD_VAR 0 1
66927: PPUSH
66928: LD_VAR 0 2
66932: PPUSH
66933: LD_VAR 0 3
66937: PPUSH
66938: LD_VAR 0 4
66942: PPUSH
66943: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66947: LD_VAR 0 1
66951: PPUSH
66952: LD_VAR 0 2
66956: PPUSH
66957: LD_VAR 0 3
66961: PPUSH
66962: CALL_OW 331
// end ;
66966: LD_VAR 0 5
66970: RET
// export function Video ( mode ) ; begin
66971: LD_INT 0
66973: PPUSH
// ingame_video = mode ;
66974: LD_ADDR_OWVAR 52
66978: PUSH
66979: LD_VAR 0 1
66983: ST_TO_ADDR
// interface_hidden = mode ;
66984: LD_ADDR_OWVAR 54
66988: PUSH
66989: LD_VAR 0 1
66993: ST_TO_ADDR
// end ;
66994: LD_VAR 0 2
66998: RET
// export function Join ( array , element ) ; begin
66999: LD_INT 0
67001: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: LD_VAR 0 1
67011: PPUSH
67012: LD_VAR 0 1
67016: PUSH
67017: LD_INT 1
67019: PLUS
67020: PPUSH
67021: LD_VAR 0 2
67025: PPUSH
67026: CALL_OW 1
67030: ST_TO_ADDR
// end ;
67031: LD_VAR 0 3
67035: RET
// export function JoinUnion ( array , element ) ; begin
67036: LD_INT 0
67038: PPUSH
// result := array union element ;
67039: LD_ADDR_VAR 0 3
67043: PUSH
67044: LD_VAR 0 1
67048: PUSH
67049: LD_VAR 0 2
67053: UNION
67054: ST_TO_ADDR
// end ;
67055: LD_VAR 0 3
67059: RET
// export function GetBehemoths ( side ) ; begin
67060: LD_INT 0
67062: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67063: LD_ADDR_VAR 0 2
67067: PUSH
67068: LD_INT 22
67070: PUSH
67071: LD_VAR 0 1
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 31
67082: PUSH
67083: LD_INT 25
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PPUSH
67094: CALL_OW 69
67098: ST_TO_ADDR
// end ;
67099: LD_VAR 0 2
67103: RET
// export function Shuffle ( array ) ; var i , index ; begin
67104: LD_INT 0
67106: PPUSH
67107: PPUSH
67108: PPUSH
// result := [ ] ;
67109: LD_ADDR_VAR 0 2
67113: PUSH
67114: EMPTY
67115: ST_TO_ADDR
// if not array then
67116: LD_VAR 0 1
67120: NOT
67121: IFFALSE 67125
// exit ;
67123: GO 67224
// Randomize ;
67125: CALL_OW 10
// for i = array downto 1 do
67129: LD_ADDR_VAR 0 3
67133: PUSH
67134: DOUBLE
67135: LD_VAR 0 1
67139: INC
67140: ST_TO_ADDR
67141: LD_INT 1
67143: PUSH
67144: FOR_DOWNTO
67145: IFFALSE 67222
// begin index := rand ( 1 , array ) ;
67147: LD_ADDR_VAR 0 4
67151: PUSH
67152: LD_INT 1
67154: PPUSH
67155: LD_VAR 0 1
67159: PPUSH
67160: CALL_OW 12
67164: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67165: LD_ADDR_VAR 0 2
67169: PUSH
67170: LD_VAR 0 2
67174: PPUSH
67175: LD_VAR 0 2
67179: PUSH
67180: LD_INT 1
67182: PLUS
67183: PPUSH
67184: LD_VAR 0 1
67188: PUSH
67189: LD_VAR 0 4
67193: ARRAY
67194: PPUSH
67195: CALL_OW 2
67199: ST_TO_ADDR
// array := Delete ( array , index ) ;
67200: LD_ADDR_VAR 0 1
67204: PUSH
67205: LD_VAR 0 1
67209: PPUSH
67210: LD_VAR 0 4
67214: PPUSH
67215: CALL_OW 3
67219: ST_TO_ADDR
// end ;
67220: GO 67144
67222: POP
67223: POP
// end ;
67224: LD_VAR 0 2
67228: RET
// export function GetBaseMaterials ( base ) ; begin
67229: LD_INT 0
67231: PPUSH
// result := [ 0 , 0 , 0 ] ;
67232: LD_ADDR_VAR 0 2
67236: PUSH
67237: LD_INT 0
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: LIST
67250: ST_TO_ADDR
// if not base then
67251: LD_VAR 0 1
67255: NOT
67256: IFFALSE 67260
// exit ;
67258: GO 67309
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67260: LD_ADDR_VAR 0 2
67264: PUSH
67265: LD_VAR 0 1
67269: PPUSH
67270: LD_INT 1
67272: PPUSH
67273: CALL_OW 275
67277: PUSH
67278: LD_VAR 0 1
67282: PPUSH
67283: LD_INT 2
67285: PPUSH
67286: CALL_OW 275
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: LD_INT 3
67298: PPUSH
67299: CALL_OW 275
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: LIST
67308: ST_TO_ADDR
// end ;
67309: LD_VAR 0 2
67313: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67314: LD_INT 0
67316: PPUSH
67317: PPUSH
// result := array ;
67318: LD_ADDR_VAR 0 3
67322: PUSH
67323: LD_VAR 0 1
67327: ST_TO_ADDR
// if size >= result then
67328: LD_VAR 0 2
67332: PUSH
67333: LD_VAR 0 3
67337: GREATEREQUAL
67338: IFFALSE 67342
// exit ;
67340: GO 67392
// if size then
67342: LD_VAR 0 2
67346: IFFALSE 67392
// for i := array downto size do
67348: LD_ADDR_VAR 0 4
67352: PUSH
67353: DOUBLE
67354: LD_VAR 0 1
67358: INC
67359: ST_TO_ADDR
67360: LD_VAR 0 2
67364: PUSH
67365: FOR_DOWNTO
67366: IFFALSE 67390
// result := Delete ( result , result ) ;
67368: LD_ADDR_VAR 0 3
67372: PUSH
67373: LD_VAR 0 3
67377: PPUSH
67378: LD_VAR 0 3
67382: PPUSH
67383: CALL_OW 3
67387: ST_TO_ADDR
67388: GO 67365
67390: POP
67391: POP
// end ;
67392: LD_VAR 0 3
67396: RET
// export function ComExit ( unit ) ; var tmp ; begin
67397: LD_INT 0
67399: PPUSH
67400: PPUSH
// if not IsInUnit ( unit ) then
67401: LD_VAR 0 1
67405: PPUSH
67406: CALL_OW 310
67410: NOT
67411: IFFALSE 67415
// exit ;
67413: GO 67475
// tmp := IsInUnit ( unit ) ;
67415: LD_ADDR_VAR 0 3
67419: PUSH
67420: LD_VAR 0 1
67424: PPUSH
67425: CALL_OW 310
67429: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67430: LD_VAR 0 3
67434: PPUSH
67435: CALL_OW 247
67439: PUSH
67440: LD_INT 2
67442: EQUAL
67443: IFFALSE 67456
// ComExitVehicle ( unit ) else
67445: LD_VAR 0 1
67449: PPUSH
67450: CALL_OW 121
67454: GO 67465
// ComExitBuilding ( unit ) ;
67456: LD_VAR 0 1
67460: PPUSH
67461: CALL_OW 122
// result := tmp ;
67465: LD_ADDR_VAR 0 2
67469: PUSH
67470: LD_VAR 0 3
67474: ST_TO_ADDR
// end ;
67475: LD_VAR 0 2
67479: RET
// export function ComExitAll ( units ) ; var i ; begin
67480: LD_INT 0
67482: PPUSH
67483: PPUSH
// if not units then
67484: LD_VAR 0 1
67488: NOT
67489: IFFALSE 67493
// exit ;
67491: GO 67519
// for i in units do
67493: LD_ADDR_VAR 0 3
67497: PUSH
67498: LD_VAR 0 1
67502: PUSH
67503: FOR_IN
67504: IFFALSE 67517
// ComExit ( i ) ;
67506: LD_VAR 0 3
67510: PPUSH
67511: CALL 67397 0 1
67515: GO 67503
67517: POP
67518: POP
// end ;
67519: LD_VAR 0 2
67523: RET
// export function ResetHc ; begin
67524: LD_INT 0
67526: PPUSH
// InitHc ;
67527: CALL_OW 19
// hc_importance := 0 ;
67531: LD_ADDR_OWVAR 32
67535: PUSH
67536: LD_INT 0
67538: ST_TO_ADDR
// end ;
67539: LD_VAR 0 1
67543: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67544: LD_INT 0
67546: PPUSH
67547: PPUSH
67548: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67549: LD_ADDR_VAR 0 6
67553: PUSH
67554: LD_VAR 0 1
67558: PUSH
67559: LD_VAR 0 3
67563: PLUS
67564: PUSH
67565: LD_INT 2
67567: DIV
67568: ST_TO_ADDR
// if _x < 0 then
67569: LD_VAR 0 6
67573: PUSH
67574: LD_INT 0
67576: LESS
67577: IFFALSE 67594
// _x := _x * - 1 ;
67579: LD_ADDR_VAR 0 6
67583: PUSH
67584: LD_VAR 0 6
67588: PUSH
67589: LD_INT 1
67591: NEG
67592: MUL
67593: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67594: LD_ADDR_VAR 0 7
67598: PUSH
67599: LD_VAR 0 2
67603: PUSH
67604: LD_VAR 0 4
67608: PLUS
67609: PUSH
67610: LD_INT 2
67612: DIV
67613: ST_TO_ADDR
// if _y < 0 then
67614: LD_VAR 0 7
67618: PUSH
67619: LD_INT 0
67621: LESS
67622: IFFALSE 67639
// _y := _y * - 1 ;
67624: LD_ADDR_VAR 0 7
67628: PUSH
67629: LD_VAR 0 7
67633: PUSH
67634: LD_INT 1
67636: NEG
67637: MUL
67638: ST_TO_ADDR
// result := [ _x , _y ] ;
67639: LD_ADDR_VAR 0 5
67643: PUSH
67644: LD_VAR 0 6
67648: PUSH
67649: LD_VAR 0 7
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: ST_TO_ADDR
// end ;
67658: LD_VAR 0 5
67662: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67663: LD_INT 0
67665: PPUSH
67666: PPUSH
67667: PPUSH
67668: PPUSH
// task := GetTaskList ( unit ) ;
67669: LD_ADDR_VAR 0 7
67673: PUSH
67674: LD_VAR 0 1
67678: PPUSH
67679: CALL_OW 437
67683: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67684: LD_VAR 0 7
67688: NOT
67689: PUSH
67690: LD_VAR 0 1
67694: PPUSH
67695: LD_VAR 0 2
67699: PPUSH
67700: CALL_OW 308
67704: NOT
67705: AND
67706: IFFALSE 67710
// exit ;
67708: GO 67828
// if IsInArea ( unit , area ) then
67710: LD_VAR 0 1
67714: PPUSH
67715: LD_VAR 0 2
67719: PPUSH
67720: CALL_OW 308
67724: IFFALSE 67742
// begin ComMoveToArea ( unit , goAway ) ;
67726: LD_VAR 0 1
67730: PPUSH
67731: LD_VAR 0 3
67735: PPUSH
67736: CALL_OW 113
// exit ;
67740: GO 67828
// end ; if task [ 1 ] [ 1 ] <> M then
67742: LD_VAR 0 7
67746: PUSH
67747: LD_INT 1
67749: ARRAY
67750: PUSH
67751: LD_INT 1
67753: ARRAY
67754: PUSH
67755: LD_STRING M
67757: NONEQUAL
67758: IFFALSE 67762
// exit ;
67760: GO 67828
// x := task [ 1 ] [ 2 ] ;
67762: LD_ADDR_VAR 0 5
67766: PUSH
67767: LD_VAR 0 7
67771: PUSH
67772: LD_INT 1
67774: ARRAY
67775: PUSH
67776: LD_INT 2
67778: ARRAY
67779: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67780: LD_ADDR_VAR 0 6
67784: PUSH
67785: LD_VAR 0 7
67789: PUSH
67790: LD_INT 1
67792: ARRAY
67793: PUSH
67794: LD_INT 3
67796: ARRAY
67797: ST_TO_ADDR
// if InArea ( x , y , area ) then
67798: LD_VAR 0 5
67802: PPUSH
67803: LD_VAR 0 6
67807: PPUSH
67808: LD_VAR 0 2
67812: PPUSH
67813: CALL_OW 309
67817: IFFALSE 67828
// ComStop ( unit ) ;
67819: LD_VAR 0 1
67823: PPUSH
67824: CALL_OW 141
// end ;
67828: LD_VAR 0 4
67832: RET
// export function Abs ( value ) ; begin
67833: LD_INT 0
67835: PPUSH
// result := value ;
67836: LD_ADDR_VAR 0 2
67840: PUSH
67841: LD_VAR 0 1
67845: ST_TO_ADDR
// if value < 0 then
67846: LD_VAR 0 1
67850: PUSH
67851: LD_INT 0
67853: LESS
67854: IFFALSE 67871
// result := value * - 1 ;
67856: LD_ADDR_VAR 0 2
67860: PUSH
67861: LD_VAR 0 1
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: MUL
67870: ST_TO_ADDR
// end ;
67871: LD_VAR 0 2
67875: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67876: LD_INT 0
67878: PPUSH
67879: PPUSH
67880: PPUSH
67881: PPUSH
67882: PPUSH
67883: PPUSH
67884: PPUSH
67885: PPUSH
// if not unit or not building then
67886: LD_VAR 0 1
67890: NOT
67891: PUSH
67892: LD_VAR 0 2
67896: NOT
67897: OR
67898: IFFALSE 67902
// exit ;
67900: GO 68128
// x := GetX ( building ) ;
67902: LD_ADDR_VAR 0 4
67906: PUSH
67907: LD_VAR 0 2
67911: PPUSH
67912: CALL_OW 250
67916: ST_TO_ADDR
// y := GetY ( building ) ;
67917: LD_ADDR_VAR 0 6
67921: PUSH
67922: LD_VAR 0 2
67926: PPUSH
67927: CALL_OW 251
67931: ST_TO_ADDR
// d := GetDir ( building ) ;
67932: LD_ADDR_VAR 0 8
67936: PUSH
67937: LD_VAR 0 2
67941: PPUSH
67942: CALL_OW 254
67946: ST_TO_ADDR
// r := 4 ;
67947: LD_ADDR_VAR 0 9
67951: PUSH
67952: LD_INT 4
67954: ST_TO_ADDR
// for i := 1 to 5 do
67955: LD_ADDR_VAR 0 10
67959: PUSH
67960: DOUBLE
67961: LD_INT 1
67963: DEC
67964: ST_TO_ADDR
67965: LD_INT 5
67967: PUSH
67968: FOR_TO
67969: IFFALSE 68126
// begin _x := ShiftX ( x , d , r + i ) ;
67971: LD_ADDR_VAR 0 5
67975: PUSH
67976: LD_VAR 0 4
67980: PPUSH
67981: LD_VAR 0 8
67985: PPUSH
67986: LD_VAR 0 9
67990: PUSH
67991: LD_VAR 0 10
67995: PLUS
67996: PPUSH
67997: CALL_OW 272
68001: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68002: LD_ADDR_VAR 0 7
68006: PUSH
68007: LD_VAR 0 6
68011: PPUSH
68012: LD_VAR 0 8
68016: PPUSH
68017: LD_VAR 0 9
68021: PUSH
68022: LD_VAR 0 10
68026: PLUS
68027: PPUSH
68028: CALL_OW 273
68032: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68033: LD_VAR 0 5
68037: PPUSH
68038: LD_VAR 0 7
68042: PPUSH
68043: CALL_OW 488
68047: PUSH
68048: LD_VAR 0 5
68052: PPUSH
68053: LD_VAR 0 7
68057: PPUSH
68058: CALL_OW 428
68062: PPUSH
68063: CALL_OW 247
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: LD_INT 2
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: IN
68078: NOT
68079: AND
68080: IFFALSE 68124
// begin ComMoveXY ( unit , _x , _y ) ;
68082: LD_VAR 0 1
68086: PPUSH
68087: LD_VAR 0 5
68091: PPUSH
68092: LD_VAR 0 7
68096: PPUSH
68097: CALL_OW 111
// result := [ _x , _y ] ;
68101: LD_ADDR_VAR 0 3
68105: PUSH
68106: LD_VAR 0 5
68110: PUSH
68111: LD_VAR 0 7
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: ST_TO_ADDR
// exit ;
68120: POP
68121: POP
68122: GO 68128
// end ; end ;
68124: GO 67968
68126: POP
68127: POP
// end ;
68128: LD_VAR 0 3
68132: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68133: LD_INT 0
68135: PPUSH
68136: PPUSH
68137: PPUSH
// result := 0 ;
68138: LD_ADDR_VAR 0 3
68142: PUSH
68143: LD_INT 0
68145: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68146: LD_VAR 0 1
68150: PUSH
68151: LD_INT 0
68153: LESS
68154: PUSH
68155: LD_VAR 0 1
68159: PUSH
68160: LD_INT 8
68162: GREATER
68163: OR
68164: PUSH
68165: LD_VAR 0 2
68169: PUSH
68170: LD_INT 0
68172: LESS
68173: OR
68174: PUSH
68175: LD_VAR 0 2
68179: PUSH
68180: LD_INT 8
68182: GREATER
68183: OR
68184: IFFALSE 68188
// exit ;
68186: GO 68263
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68188: LD_ADDR_VAR 0 4
68192: PUSH
68193: LD_INT 22
68195: PUSH
68196: LD_VAR 0 2
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PPUSH
68205: CALL_OW 69
68209: PUSH
68210: FOR_IN
68211: IFFALSE 68261
// begin un := UnitShoot ( i ) ;
68213: LD_ADDR_VAR 0 5
68217: PUSH
68218: LD_VAR 0 4
68222: PPUSH
68223: CALL_OW 504
68227: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68228: LD_VAR 0 5
68232: PPUSH
68233: CALL_OW 255
68237: PUSH
68238: LD_VAR 0 1
68242: EQUAL
68243: IFFALSE 68259
// begin result := un ;
68245: LD_ADDR_VAR 0 3
68249: PUSH
68250: LD_VAR 0 5
68254: ST_TO_ADDR
// exit ;
68255: POP
68256: POP
68257: GO 68263
// end ; end ;
68259: GO 68210
68261: POP
68262: POP
// end ;
68263: LD_VAR 0 3
68267: RET
// export function GetCargoBay ( units ) ; begin
68268: LD_INT 0
68270: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68271: LD_ADDR_VAR 0 2
68275: PUSH
68276: LD_VAR 0 1
68280: PPUSH
68281: LD_INT 2
68283: PUSH
68284: LD_INT 34
68286: PUSH
68287: LD_INT 12
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 34
68296: PUSH
68297: LD_INT 51
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 34
68306: PUSH
68307: LD_INT 32
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 34
68316: PUSH
68317: LD_INT 89
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: PPUSH
68331: CALL_OW 72
68335: ST_TO_ADDR
// end ;
68336: LD_VAR 0 2
68340: RET
// export function Negate ( value ) ; begin
68341: LD_INT 0
68343: PPUSH
// result := not value ;
68344: LD_ADDR_VAR 0 2
68348: PUSH
68349: LD_VAR 0 1
68353: NOT
68354: ST_TO_ADDR
// end ;
68355: LD_VAR 0 2
68359: RET
// export function Inc ( value ) ; begin
68360: LD_INT 0
68362: PPUSH
// result := value + 1 ;
68363: LD_ADDR_VAR 0 2
68367: PUSH
68368: LD_VAR 0 1
68372: PUSH
68373: LD_INT 1
68375: PLUS
68376: ST_TO_ADDR
// end ;
68377: LD_VAR 0 2
68381: RET
// export function Dec ( value ) ; begin
68382: LD_INT 0
68384: PPUSH
// result := value - 1 ;
68385: LD_ADDR_VAR 0 2
68389: PUSH
68390: LD_VAR 0 1
68394: PUSH
68395: LD_INT 1
68397: MINUS
68398: ST_TO_ADDR
// end ;
68399: LD_VAR 0 2
68403: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68404: LD_INT 0
68406: PPUSH
68407: PPUSH
68408: PPUSH
68409: PPUSH
68410: PPUSH
68411: PPUSH
68412: PPUSH
68413: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68414: LD_VAR 0 1
68418: PPUSH
68419: LD_VAR 0 2
68423: PPUSH
68424: CALL_OW 488
68428: NOT
68429: PUSH
68430: LD_VAR 0 3
68434: PPUSH
68435: LD_VAR 0 4
68439: PPUSH
68440: CALL_OW 488
68444: NOT
68445: OR
68446: IFFALSE 68459
// begin result := - 1 ;
68448: LD_ADDR_VAR 0 5
68452: PUSH
68453: LD_INT 1
68455: NEG
68456: ST_TO_ADDR
// exit ;
68457: GO 68694
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68459: LD_ADDR_VAR 0 12
68463: PUSH
68464: LD_VAR 0 1
68468: PPUSH
68469: LD_VAR 0 2
68473: PPUSH
68474: LD_VAR 0 3
68478: PPUSH
68479: LD_VAR 0 4
68483: PPUSH
68484: CALL 67544 0 4
68488: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68489: LD_ADDR_VAR 0 11
68493: PUSH
68494: LD_VAR 0 1
68498: PPUSH
68499: LD_VAR 0 2
68503: PPUSH
68504: LD_VAR 0 12
68508: PUSH
68509: LD_INT 1
68511: ARRAY
68512: PPUSH
68513: LD_VAR 0 12
68517: PUSH
68518: LD_INT 2
68520: ARRAY
68521: PPUSH
68522: CALL_OW 298
68526: ST_TO_ADDR
// distance := 9999 ;
68527: LD_ADDR_VAR 0 10
68531: PUSH
68532: LD_INT 9999
68534: ST_TO_ADDR
// for i := 0 to 5 do
68535: LD_ADDR_VAR 0 6
68539: PUSH
68540: DOUBLE
68541: LD_INT 0
68543: DEC
68544: ST_TO_ADDR
68545: LD_INT 5
68547: PUSH
68548: FOR_TO
68549: IFFALSE 68692
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68551: LD_ADDR_VAR 0 7
68555: PUSH
68556: LD_VAR 0 1
68560: PPUSH
68561: LD_VAR 0 6
68565: PPUSH
68566: LD_VAR 0 11
68570: PPUSH
68571: CALL_OW 272
68575: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68576: LD_ADDR_VAR 0 8
68580: PUSH
68581: LD_VAR 0 2
68585: PPUSH
68586: LD_VAR 0 6
68590: PPUSH
68591: LD_VAR 0 11
68595: PPUSH
68596: CALL_OW 273
68600: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68601: LD_VAR 0 7
68605: PPUSH
68606: LD_VAR 0 8
68610: PPUSH
68611: CALL_OW 488
68615: NOT
68616: IFFALSE 68620
// continue ;
68618: GO 68548
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68620: LD_ADDR_VAR 0 9
68624: PUSH
68625: LD_VAR 0 12
68629: PUSH
68630: LD_INT 1
68632: ARRAY
68633: PPUSH
68634: LD_VAR 0 12
68638: PUSH
68639: LD_INT 2
68641: ARRAY
68642: PPUSH
68643: LD_VAR 0 7
68647: PPUSH
68648: LD_VAR 0 8
68652: PPUSH
68653: CALL_OW 298
68657: ST_TO_ADDR
// if tmp < distance then
68658: LD_VAR 0 9
68662: PUSH
68663: LD_VAR 0 10
68667: LESS
68668: IFFALSE 68690
// begin result := i ;
68670: LD_ADDR_VAR 0 5
68674: PUSH
68675: LD_VAR 0 6
68679: ST_TO_ADDR
// distance := tmp ;
68680: LD_ADDR_VAR 0 10
68684: PUSH
68685: LD_VAR 0 9
68689: ST_TO_ADDR
// end ; end ;
68690: GO 68548
68692: POP
68693: POP
// end ;
68694: LD_VAR 0 5
68698: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68699: LD_INT 0
68701: PPUSH
68702: PPUSH
// if not driver or not IsInUnit ( driver ) then
68703: LD_VAR 0 1
68707: NOT
68708: PUSH
68709: LD_VAR 0 1
68713: PPUSH
68714: CALL_OW 310
68718: NOT
68719: OR
68720: IFFALSE 68724
// exit ;
68722: GO 68814
// vehicle := IsInUnit ( driver ) ;
68724: LD_ADDR_VAR 0 3
68728: PUSH
68729: LD_VAR 0 1
68733: PPUSH
68734: CALL_OW 310
68738: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68739: LD_VAR 0 1
68743: PPUSH
68744: LD_STRING \
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_INT 0
68758: PUSH
68759: LD_INT 0
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: PUSH
68774: LD_STRING E
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 0
68782: PUSH
68783: LD_VAR 0 3
68787: PUSH
68788: LD_INT 0
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: LD_INT 0
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PPUSH
68810: CALL_OW 446
// end ;
68814: LD_VAR 0 2
68818: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68819: LD_INT 0
68821: PPUSH
68822: PPUSH
// if not driver or not IsInUnit ( driver ) then
68823: LD_VAR 0 1
68827: NOT
68828: PUSH
68829: LD_VAR 0 1
68833: PPUSH
68834: CALL_OW 310
68838: NOT
68839: OR
68840: IFFALSE 68844
// exit ;
68842: GO 68934
// vehicle := IsInUnit ( driver ) ;
68844: LD_ADDR_VAR 0 3
68848: PUSH
68849: LD_VAR 0 1
68853: PPUSH
68854: CALL_OW 310
68858: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68859: LD_VAR 0 1
68863: PPUSH
68864: LD_STRING \
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: LD_INT 0
68872: PUSH
68873: LD_INT 0
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: LD_INT 0
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: PUSH
68894: LD_STRING E
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_VAR 0 3
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: LD_INT 0
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PPUSH
68930: CALL_OW 447
// end ;
68934: LD_VAR 0 2
68938: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68939: LD_INT 0
68941: PPUSH
68942: PPUSH
68943: PPUSH
// tmp := [ ] ;
68944: LD_ADDR_VAR 0 5
68948: PUSH
68949: EMPTY
68950: ST_TO_ADDR
// for i in units do
68951: LD_ADDR_VAR 0 4
68955: PUSH
68956: LD_VAR 0 1
68960: PUSH
68961: FOR_IN
68962: IFFALSE 69000
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68964: LD_ADDR_VAR 0 5
68968: PUSH
68969: LD_VAR 0 5
68973: PPUSH
68974: LD_VAR 0 5
68978: PUSH
68979: LD_INT 1
68981: PLUS
68982: PPUSH
68983: LD_VAR 0 4
68987: PPUSH
68988: CALL_OW 256
68992: PPUSH
68993: CALL_OW 2
68997: ST_TO_ADDR
68998: GO 68961
69000: POP
69001: POP
// if not tmp then
69002: LD_VAR 0 5
69006: NOT
69007: IFFALSE 69011
// exit ;
69009: GO 69059
// if asc then
69011: LD_VAR 0 2
69015: IFFALSE 69039
// result := SortListByListAsc ( units , tmp ) else
69017: LD_ADDR_VAR 0 3
69021: PUSH
69022: LD_VAR 0 1
69026: PPUSH
69027: LD_VAR 0 5
69031: PPUSH
69032: CALL_OW 76
69036: ST_TO_ADDR
69037: GO 69059
// result := SortListByListDesc ( units , tmp ) ;
69039: LD_ADDR_VAR 0 3
69043: PUSH
69044: LD_VAR 0 1
69048: PPUSH
69049: LD_VAR 0 5
69053: PPUSH
69054: CALL_OW 77
69058: ST_TO_ADDR
// end ;
69059: LD_VAR 0 3
69063: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69064: LD_INT 0
69066: PPUSH
69067: PPUSH
// task := GetTaskList ( mech ) ;
69068: LD_ADDR_VAR 0 4
69072: PUSH
69073: LD_VAR 0 1
69077: PPUSH
69078: CALL_OW 437
69082: ST_TO_ADDR
// if not task then
69083: LD_VAR 0 4
69087: NOT
69088: IFFALSE 69092
// exit ;
69090: GO 69134
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69092: LD_ADDR_VAR 0 3
69096: PUSH
69097: LD_VAR 0 4
69101: PUSH
69102: LD_INT 1
69104: ARRAY
69105: PUSH
69106: LD_INT 1
69108: ARRAY
69109: PUSH
69110: LD_STRING r
69112: EQUAL
69113: PUSH
69114: LD_VAR 0 4
69118: PUSH
69119: LD_INT 1
69121: ARRAY
69122: PUSH
69123: LD_INT 4
69125: ARRAY
69126: PUSH
69127: LD_VAR 0 2
69131: EQUAL
69132: AND
69133: ST_TO_ADDR
// end ;
69134: LD_VAR 0 3
69138: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69139: LD_INT 0
69141: PPUSH
// SetDir ( unit , d ) ;
69142: LD_VAR 0 1
69146: PPUSH
69147: LD_VAR 0 4
69151: PPUSH
69152: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69156: LD_VAR 0 1
69160: PPUSH
69161: LD_VAR 0 2
69165: PPUSH
69166: LD_VAR 0 3
69170: PPUSH
69171: LD_VAR 0 5
69175: PPUSH
69176: CALL_OW 48
// end ;
69180: LD_VAR 0 6
69184: RET
// export function ToNaturalNumber ( number ) ; begin
69185: LD_INT 0
69187: PPUSH
// result := number div 1 ;
69188: LD_ADDR_VAR 0 2
69192: PUSH
69193: LD_VAR 0 1
69197: PUSH
69198: LD_INT 1
69200: DIV
69201: ST_TO_ADDR
// if number < 0 then
69202: LD_VAR 0 1
69206: PUSH
69207: LD_INT 0
69209: LESS
69210: IFFALSE 69220
// result := 0 ;
69212: LD_ADDR_VAR 0 2
69216: PUSH
69217: LD_INT 0
69219: ST_TO_ADDR
// end ;
69220: LD_VAR 0 2
69224: RET
// export function SortByClass ( units , class ) ; var un ; begin
69225: LD_INT 0
69227: PPUSH
69228: PPUSH
// if not units or not class then
69229: LD_VAR 0 1
69233: NOT
69234: PUSH
69235: LD_VAR 0 2
69239: NOT
69240: OR
69241: IFFALSE 69245
// exit ;
69243: GO 69340
// result := [ ] ;
69245: LD_ADDR_VAR 0 3
69249: PUSH
69250: EMPTY
69251: ST_TO_ADDR
// for un in units do
69252: LD_ADDR_VAR 0 4
69256: PUSH
69257: LD_VAR 0 1
69261: PUSH
69262: FOR_IN
69263: IFFALSE 69338
// if GetClass ( un ) = class then
69265: LD_VAR 0 4
69269: PPUSH
69270: CALL_OW 257
69274: PUSH
69275: LD_VAR 0 2
69279: EQUAL
69280: IFFALSE 69307
// result := Insert ( result , 1 , un ) else
69282: LD_ADDR_VAR 0 3
69286: PUSH
69287: LD_VAR 0 3
69291: PPUSH
69292: LD_INT 1
69294: PPUSH
69295: LD_VAR 0 4
69299: PPUSH
69300: CALL_OW 2
69304: ST_TO_ADDR
69305: GO 69336
// result := Replace ( result , result + 1 , un ) ;
69307: LD_ADDR_VAR 0 3
69311: PUSH
69312: LD_VAR 0 3
69316: PPUSH
69317: LD_VAR 0 3
69321: PUSH
69322: LD_INT 1
69324: PLUS
69325: PPUSH
69326: LD_VAR 0 4
69330: PPUSH
69331: CALL_OW 1
69335: ST_TO_ADDR
69336: GO 69262
69338: POP
69339: POP
// end ;
69340: LD_VAR 0 3
69344: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69345: LD_INT 0
69347: PPUSH
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
// result := [ ] ;
69354: LD_ADDR_VAR 0 4
69358: PUSH
69359: EMPTY
69360: ST_TO_ADDR
// if x - r < 0 then
69361: LD_VAR 0 1
69365: PUSH
69366: LD_VAR 0 3
69370: MINUS
69371: PUSH
69372: LD_INT 0
69374: LESS
69375: IFFALSE 69387
// min_x := 0 else
69377: LD_ADDR_VAR 0 8
69381: PUSH
69382: LD_INT 0
69384: ST_TO_ADDR
69385: GO 69403
// min_x := x - r ;
69387: LD_ADDR_VAR 0 8
69391: PUSH
69392: LD_VAR 0 1
69396: PUSH
69397: LD_VAR 0 3
69401: MINUS
69402: ST_TO_ADDR
// if y - r < 0 then
69403: LD_VAR 0 2
69407: PUSH
69408: LD_VAR 0 3
69412: MINUS
69413: PUSH
69414: LD_INT 0
69416: LESS
69417: IFFALSE 69429
// min_y := 0 else
69419: LD_ADDR_VAR 0 7
69423: PUSH
69424: LD_INT 0
69426: ST_TO_ADDR
69427: GO 69445
// min_y := y - r ;
69429: LD_ADDR_VAR 0 7
69433: PUSH
69434: LD_VAR 0 2
69438: PUSH
69439: LD_VAR 0 3
69443: MINUS
69444: ST_TO_ADDR
// max_x := x + r ;
69445: LD_ADDR_VAR 0 9
69449: PUSH
69450: LD_VAR 0 1
69454: PUSH
69455: LD_VAR 0 3
69459: PLUS
69460: ST_TO_ADDR
// max_y := y + r ;
69461: LD_ADDR_VAR 0 10
69465: PUSH
69466: LD_VAR 0 2
69470: PUSH
69471: LD_VAR 0 3
69475: PLUS
69476: ST_TO_ADDR
// for _x = min_x to max_x do
69477: LD_ADDR_VAR 0 5
69481: PUSH
69482: DOUBLE
69483: LD_VAR 0 8
69487: DEC
69488: ST_TO_ADDR
69489: LD_VAR 0 9
69493: PUSH
69494: FOR_TO
69495: IFFALSE 69596
// for _y = min_y to max_y do
69497: LD_ADDR_VAR 0 6
69501: PUSH
69502: DOUBLE
69503: LD_VAR 0 7
69507: DEC
69508: ST_TO_ADDR
69509: LD_VAR 0 10
69513: PUSH
69514: FOR_TO
69515: IFFALSE 69592
// begin if not ValidHex ( _x , _y ) then
69517: LD_VAR 0 5
69521: PPUSH
69522: LD_VAR 0 6
69526: PPUSH
69527: CALL_OW 488
69531: NOT
69532: IFFALSE 69536
// continue ;
69534: GO 69514
// if GetResourceTypeXY ( _x , _y ) then
69536: LD_VAR 0 5
69540: PPUSH
69541: LD_VAR 0 6
69545: PPUSH
69546: CALL_OW 283
69550: IFFALSE 69590
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69552: LD_ADDR_VAR 0 4
69556: PUSH
69557: LD_VAR 0 4
69561: PPUSH
69562: LD_VAR 0 4
69566: PUSH
69567: LD_INT 1
69569: PLUS
69570: PPUSH
69571: LD_VAR 0 5
69575: PUSH
69576: LD_VAR 0 6
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PPUSH
69585: CALL_OW 1
69589: ST_TO_ADDR
// end ;
69590: GO 69514
69592: POP
69593: POP
69594: GO 69494
69596: POP
69597: POP
// end ;
69598: LD_VAR 0 4
69602: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69603: LD_INT 0
69605: PPUSH
69606: PPUSH
69607: PPUSH
69608: PPUSH
69609: PPUSH
69610: PPUSH
69611: PPUSH
69612: PPUSH
// if not units then
69613: LD_VAR 0 1
69617: NOT
69618: IFFALSE 69622
// exit ;
69620: GO 70146
// result := UnitFilter ( units , [ f_ok ] ) ;
69622: LD_ADDR_VAR 0 3
69626: PUSH
69627: LD_VAR 0 1
69631: PPUSH
69632: LD_INT 50
69634: PUSH
69635: EMPTY
69636: LIST
69637: PPUSH
69638: CALL_OW 72
69642: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69643: LD_ADDR_VAR 0 8
69647: PUSH
69648: LD_VAR 0 1
69652: PUSH
69653: LD_INT 1
69655: ARRAY
69656: PPUSH
69657: CALL_OW 255
69661: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69662: LD_ADDR_VAR 0 10
69666: PUSH
69667: LD_INT 29
69669: PUSH
69670: LD_INT 91
69672: PUSH
69673: LD_INT 49
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: LIST
69680: ST_TO_ADDR
// if not result then
69681: LD_VAR 0 3
69685: NOT
69686: IFFALSE 69690
// exit ;
69688: GO 70146
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69690: LD_ADDR_VAR 0 5
69694: PUSH
69695: LD_INT 81
69697: PUSH
69698: LD_VAR 0 8
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PPUSH
69707: CALL_OW 69
69711: ST_TO_ADDR
// for i in result do
69712: LD_ADDR_VAR 0 4
69716: PUSH
69717: LD_VAR 0 3
69721: PUSH
69722: FOR_IN
69723: IFFALSE 70144
// begin tag := GetTag ( i ) + 1 ;
69725: LD_ADDR_VAR 0 9
69729: PUSH
69730: LD_VAR 0 4
69734: PPUSH
69735: CALL_OW 110
69739: PUSH
69740: LD_INT 1
69742: PLUS
69743: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69744: LD_ADDR_VAR 0 7
69748: PUSH
69749: LD_VAR 0 4
69753: PPUSH
69754: CALL_OW 250
69758: PPUSH
69759: LD_VAR 0 4
69763: PPUSH
69764: CALL_OW 251
69768: PPUSH
69769: LD_INT 6
69771: PPUSH
69772: CALL 69345 0 3
69776: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69777: LD_VAR 0 4
69781: PPUSH
69782: CALL_OW 247
69786: PUSH
69787: LD_INT 2
69789: EQUAL
69790: PUSH
69791: LD_VAR 0 7
69795: AND
69796: PUSH
69797: LD_VAR 0 4
69801: PPUSH
69802: CALL_OW 264
69806: PUSH
69807: LD_VAR 0 10
69811: IN
69812: NOT
69813: AND
69814: IFFALSE 69853
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69816: LD_VAR 0 4
69820: PPUSH
69821: LD_VAR 0 7
69825: PUSH
69826: LD_INT 1
69828: ARRAY
69829: PUSH
69830: LD_INT 1
69832: ARRAY
69833: PPUSH
69834: LD_VAR 0 7
69838: PUSH
69839: LD_INT 1
69841: ARRAY
69842: PUSH
69843: LD_INT 2
69845: ARRAY
69846: PPUSH
69847: CALL_OW 116
69851: GO 70142
// if path > tag then
69853: LD_VAR 0 2
69857: PUSH
69858: LD_VAR 0 9
69862: GREATER
69863: IFFALSE 70071
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69865: LD_ADDR_VAR 0 6
69869: PUSH
69870: LD_VAR 0 5
69874: PPUSH
69875: LD_INT 91
69877: PUSH
69878: LD_VAR 0 4
69882: PUSH
69883: LD_INT 8
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: LIST
69890: PPUSH
69891: CALL_OW 72
69895: ST_TO_ADDR
// if nearEnemy then
69896: LD_VAR 0 6
69900: IFFALSE 69969
// begin if GetWeapon ( i ) = ru_time_lapser then
69902: LD_VAR 0 4
69906: PPUSH
69907: CALL_OW 264
69911: PUSH
69912: LD_INT 49
69914: EQUAL
69915: IFFALSE 69943
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69917: LD_VAR 0 4
69921: PPUSH
69922: LD_VAR 0 6
69926: PPUSH
69927: LD_VAR 0 4
69931: PPUSH
69932: CALL_OW 74
69936: PPUSH
69937: CALL_OW 112
69941: GO 69967
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69943: LD_VAR 0 4
69947: PPUSH
69948: LD_VAR 0 6
69952: PPUSH
69953: LD_VAR 0 4
69957: PPUSH
69958: CALL_OW 74
69962: PPUSH
69963: CALL 71217 0 2
// end else
69967: GO 70069
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69969: LD_VAR 0 4
69973: PPUSH
69974: LD_VAR 0 2
69978: PUSH
69979: LD_VAR 0 9
69983: ARRAY
69984: PUSH
69985: LD_INT 1
69987: ARRAY
69988: PPUSH
69989: LD_VAR 0 2
69993: PUSH
69994: LD_VAR 0 9
69998: ARRAY
69999: PUSH
70000: LD_INT 2
70002: ARRAY
70003: PPUSH
70004: CALL_OW 297
70008: PUSH
70009: LD_INT 6
70011: GREATER
70012: IFFALSE 70055
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70014: LD_VAR 0 4
70018: PPUSH
70019: LD_VAR 0 2
70023: PUSH
70024: LD_VAR 0 9
70028: ARRAY
70029: PUSH
70030: LD_INT 1
70032: ARRAY
70033: PPUSH
70034: LD_VAR 0 2
70038: PUSH
70039: LD_VAR 0 9
70043: ARRAY
70044: PUSH
70045: LD_INT 2
70047: ARRAY
70048: PPUSH
70049: CALL_OW 114
70053: GO 70069
// SetTag ( i , tag ) ;
70055: LD_VAR 0 4
70059: PPUSH
70060: LD_VAR 0 9
70064: PPUSH
70065: CALL_OW 109
// end else
70069: GO 70142
// if enemy then
70071: LD_VAR 0 5
70075: IFFALSE 70142
// begin if GetWeapon ( i ) = ru_time_lapser then
70077: LD_VAR 0 4
70081: PPUSH
70082: CALL_OW 264
70086: PUSH
70087: LD_INT 49
70089: EQUAL
70090: IFFALSE 70118
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70092: LD_VAR 0 4
70096: PPUSH
70097: LD_VAR 0 5
70101: PPUSH
70102: LD_VAR 0 4
70106: PPUSH
70107: CALL_OW 74
70111: PPUSH
70112: CALL_OW 112
70116: GO 70142
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70118: LD_VAR 0 4
70122: PPUSH
70123: LD_VAR 0 5
70127: PPUSH
70128: LD_VAR 0 4
70132: PPUSH
70133: CALL_OW 74
70137: PPUSH
70138: CALL 71217 0 2
// end ; end ;
70142: GO 69722
70144: POP
70145: POP
// end ;
70146: LD_VAR 0 3
70150: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70151: LD_INT 0
70153: PPUSH
70154: PPUSH
70155: PPUSH
// if not unit or IsInUnit ( unit ) then
70156: LD_VAR 0 1
70160: NOT
70161: PUSH
70162: LD_VAR 0 1
70166: PPUSH
70167: CALL_OW 310
70171: OR
70172: IFFALSE 70176
// exit ;
70174: GO 70267
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70176: LD_ADDR_VAR 0 4
70180: PUSH
70181: LD_VAR 0 1
70185: PPUSH
70186: CALL_OW 250
70190: PPUSH
70191: LD_VAR 0 2
70195: PPUSH
70196: LD_INT 1
70198: PPUSH
70199: CALL_OW 272
70203: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70204: LD_ADDR_VAR 0 5
70208: PUSH
70209: LD_VAR 0 1
70213: PPUSH
70214: CALL_OW 251
70218: PPUSH
70219: LD_VAR 0 2
70223: PPUSH
70224: LD_INT 1
70226: PPUSH
70227: CALL_OW 273
70231: ST_TO_ADDR
// if ValidHex ( x , y ) then
70232: LD_VAR 0 4
70236: PPUSH
70237: LD_VAR 0 5
70241: PPUSH
70242: CALL_OW 488
70246: IFFALSE 70267
// ComTurnXY ( unit , x , y ) ;
70248: LD_VAR 0 1
70252: PPUSH
70253: LD_VAR 0 4
70257: PPUSH
70258: LD_VAR 0 5
70262: PPUSH
70263: CALL_OW 118
// end ;
70267: LD_VAR 0 3
70271: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70272: LD_INT 0
70274: PPUSH
70275: PPUSH
// result := false ;
70276: LD_ADDR_VAR 0 3
70280: PUSH
70281: LD_INT 0
70283: ST_TO_ADDR
// if not units then
70284: LD_VAR 0 2
70288: NOT
70289: IFFALSE 70293
// exit ;
70291: GO 70338
// for i in units do
70293: LD_ADDR_VAR 0 4
70297: PUSH
70298: LD_VAR 0 2
70302: PUSH
70303: FOR_IN
70304: IFFALSE 70336
// if See ( side , i ) then
70306: LD_VAR 0 1
70310: PPUSH
70311: LD_VAR 0 4
70315: PPUSH
70316: CALL_OW 292
70320: IFFALSE 70334
// begin result := true ;
70322: LD_ADDR_VAR 0 3
70326: PUSH
70327: LD_INT 1
70329: ST_TO_ADDR
// exit ;
70330: POP
70331: POP
70332: GO 70338
// end ;
70334: GO 70303
70336: POP
70337: POP
// end ;
70338: LD_VAR 0 3
70342: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70343: LD_INT 0
70345: PPUSH
70346: PPUSH
70347: PPUSH
70348: PPUSH
// if not unit or not points then
70349: LD_VAR 0 1
70353: NOT
70354: PUSH
70355: LD_VAR 0 2
70359: NOT
70360: OR
70361: IFFALSE 70365
// exit ;
70363: GO 70455
// dist := 99999 ;
70365: LD_ADDR_VAR 0 5
70369: PUSH
70370: LD_INT 99999
70372: ST_TO_ADDR
// for i in points do
70373: LD_ADDR_VAR 0 4
70377: PUSH
70378: LD_VAR 0 2
70382: PUSH
70383: FOR_IN
70384: IFFALSE 70453
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70386: LD_ADDR_VAR 0 6
70390: PUSH
70391: LD_VAR 0 1
70395: PPUSH
70396: LD_VAR 0 4
70400: PUSH
70401: LD_INT 1
70403: ARRAY
70404: PPUSH
70405: LD_VAR 0 4
70409: PUSH
70410: LD_INT 2
70412: ARRAY
70413: PPUSH
70414: CALL_OW 297
70418: ST_TO_ADDR
// if tmpDist < dist then
70419: LD_VAR 0 6
70423: PUSH
70424: LD_VAR 0 5
70428: LESS
70429: IFFALSE 70451
// begin result := i ;
70431: LD_ADDR_VAR 0 3
70435: PUSH
70436: LD_VAR 0 4
70440: ST_TO_ADDR
// dist := tmpDist ;
70441: LD_ADDR_VAR 0 5
70445: PUSH
70446: LD_VAR 0 6
70450: ST_TO_ADDR
// end ; end ;
70451: GO 70383
70453: POP
70454: POP
// end ;
70455: LD_VAR 0 3
70459: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70460: LD_INT 0
70462: PPUSH
// uc_side := side ;
70463: LD_ADDR_OWVAR 20
70467: PUSH
70468: LD_VAR 0 1
70472: ST_TO_ADDR
// uc_nation := 3 ;
70473: LD_ADDR_OWVAR 21
70477: PUSH
70478: LD_INT 3
70480: ST_TO_ADDR
// vc_chassis := 25 ;
70481: LD_ADDR_OWVAR 37
70485: PUSH
70486: LD_INT 25
70488: ST_TO_ADDR
// vc_engine := engine_siberite ;
70489: LD_ADDR_OWVAR 39
70493: PUSH
70494: LD_INT 3
70496: ST_TO_ADDR
// vc_control := control_computer ;
70497: LD_ADDR_OWVAR 38
70501: PUSH
70502: LD_INT 3
70504: ST_TO_ADDR
// vc_weapon := 59 ;
70505: LD_ADDR_OWVAR 40
70509: PUSH
70510: LD_INT 59
70512: ST_TO_ADDR
// result := CreateVehicle ;
70513: LD_ADDR_VAR 0 5
70517: PUSH
70518: CALL_OW 45
70522: ST_TO_ADDR
// SetDir ( result , d ) ;
70523: LD_VAR 0 5
70527: PPUSH
70528: LD_VAR 0 4
70532: PPUSH
70533: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70537: LD_VAR 0 5
70541: PPUSH
70542: LD_VAR 0 2
70546: PPUSH
70547: LD_VAR 0 3
70551: PPUSH
70552: LD_INT 0
70554: PPUSH
70555: CALL_OW 48
// end ;
70559: LD_VAR 0 5
70563: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70564: LD_INT 0
70566: PPUSH
70567: PPUSH
70568: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70569: LD_ADDR_VAR 0 2
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 0
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70592: LD_VAR 0 1
70596: NOT
70597: PUSH
70598: LD_VAR 0 1
70602: PPUSH
70603: CALL_OW 264
70607: PUSH
70608: LD_INT 12
70610: PUSH
70611: LD_INT 51
70613: PUSH
70614: LD_INT 32
70616: PUSH
70617: LD_INT 89
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: IN
70626: NOT
70627: OR
70628: IFFALSE 70632
// exit ;
70630: GO 70730
// for i := 1 to 3 do
70632: LD_ADDR_VAR 0 3
70636: PUSH
70637: DOUBLE
70638: LD_INT 1
70640: DEC
70641: ST_TO_ADDR
70642: LD_INT 3
70644: PUSH
70645: FOR_TO
70646: IFFALSE 70728
// begin tmp := GetCargo ( cargo , i ) ;
70648: LD_ADDR_VAR 0 4
70652: PUSH
70653: LD_VAR 0 1
70657: PPUSH
70658: LD_VAR 0 3
70662: PPUSH
70663: CALL_OW 289
70667: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70668: LD_ADDR_VAR 0 2
70672: PUSH
70673: LD_VAR 0 2
70677: PPUSH
70678: LD_VAR 0 3
70682: PPUSH
70683: LD_VAR 0 4
70687: PPUSH
70688: CALL_OW 1
70692: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70693: LD_ADDR_VAR 0 2
70697: PUSH
70698: LD_VAR 0 2
70702: PPUSH
70703: LD_INT 4
70705: PPUSH
70706: LD_VAR 0 2
70710: PUSH
70711: LD_INT 4
70713: ARRAY
70714: PUSH
70715: LD_VAR 0 4
70719: PLUS
70720: PPUSH
70721: CALL_OW 1
70725: ST_TO_ADDR
// end ;
70726: GO 70645
70728: POP
70729: POP
// end ;
70730: LD_VAR 0 2
70734: RET
// export function Length ( array ) ; begin
70735: LD_INT 0
70737: PPUSH
// result := array + 0 ;
70738: LD_ADDR_VAR 0 2
70742: PUSH
70743: LD_VAR 0 1
70747: PUSH
70748: LD_INT 0
70750: PLUS
70751: ST_TO_ADDR
// end ;
70752: LD_VAR 0 2
70756: RET
// export function PrepareArray ( array ) ; begin
70757: LD_INT 0
70759: PPUSH
// result := array diff 0 ;
70760: LD_ADDR_VAR 0 2
70764: PUSH
70765: LD_VAR 0 1
70769: PUSH
70770: LD_INT 0
70772: DIFF
70773: ST_TO_ADDR
// if not result [ 1 ] then
70774: LD_VAR 0 2
70778: PUSH
70779: LD_INT 1
70781: ARRAY
70782: NOT
70783: IFFALSE 70803
// result := Delete ( result , 1 ) ;
70785: LD_ADDR_VAR 0 2
70789: PUSH
70790: LD_VAR 0 2
70794: PPUSH
70795: LD_INT 1
70797: PPUSH
70798: CALL_OW 3
70802: ST_TO_ADDR
// end ;
70803: LD_VAR 0 2
70807: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70808: LD_INT 0
70810: PPUSH
70811: PPUSH
70812: PPUSH
70813: PPUSH
// sibRocketRange := 25 ;
70814: LD_ADDR_VAR 0 6
70818: PUSH
70819: LD_INT 25
70821: ST_TO_ADDR
// result := false ;
70822: LD_ADDR_VAR 0 4
70826: PUSH
70827: LD_INT 0
70829: ST_TO_ADDR
// for i := 0 to 5 do
70830: LD_ADDR_VAR 0 5
70834: PUSH
70835: DOUBLE
70836: LD_INT 0
70838: DEC
70839: ST_TO_ADDR
70840: LD_INT 5
70842: PUSH
70843: FOR_TO
70844: IFFALSE 70911
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70846: LD_VAR 0 1
70850: PPUSH
70851: LD_VAR 0 5
70855: PPUSH
70856: LD_VAR 0 6
70860: PPUSH
70861: CALL_OW 272
70865: PPUSH
70866: LD_VAR 0 2
70870: PPUSH
70871: LD_VAR 0 5
70875: PPUSH
70876: LD_VAR 0 6
70880: PPUSH
70881: CALL_OW 273
70885: PPUSH
70886: LD_VAR 0 3
70890: PPUSH
70891: CALL_OW 309
70895: IFFALSE 70909
// begin result := true ;
70897: LD_ADDR_VAR 0 4
70901: PUSH
70902: LD_INT 1
70904: ST_TO_ADDR
// exit ;
70905: POP
70906: POP
70907: GO 70913
// end ;
70909: GO 70843
70911: POP
70912: POP
// end ;
70913: LD_VAR 0 4
70917: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70918: LD_INT 0
70920: PPUSH
70921: PPUSH
70922: PPUSH
// if btype = b_depot then
70923: LD_VAR 0 2
70927: PUSH
70928: LD_INT 0
70930: EQUAL
70931: IFFALSE 70943
// begin result := true ;
70933: LD_ADDR_VAR 0 3
70937: PUSH
70938: LD_INT 1
70940: ST_TO_ADDR
// exit ;
70941: GO 71059
// end ; pom := GetBase ( depot ) ;
70943: LD_ADDR_VAR 0 4
70947: PUSH
70948: LD_VAR 0 1
70952: PPUSH
70953: CALL_OW 274
70957: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70958: LD_ADDR_VAR 0 5
70962: PUSH
70963: LD_VAR 0 2
70967: PPUSH
70968: LD_VAR 0 1
70972: PPUSH
70973: CALL_OW 248
70977: PPUSH
70978: CALL_OW 450
70982: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70983: LD_ADDR_VAR 0 3
70987: PUSH
70988: LD_VAR 0 4
70992: PPUSH
70993: LD_INT 1
70995: PPUSH
70996: CALL_OW 275
71000: PUSH
71001: LD_VAR 0 5
71005: PUSH
71006: LD_INT 1
71008: ARRAY
71009: GREATEREQUAL
71010: PUSH
71011: LD_VAR 0 4
71015: PPUSH
71016: LD_INT 2
71018: PPUSH
71019: CALL_OW 275
71023: PUSH
71024: LD_VAR 0 5
71028: PUSH
71029: LD_INT 2
71031: ARRAY
71032: GREATEREQUAL
71033: AND
71034: PUSH
71035: LD_VAR 0 4
71039: PPUSH
71040: LD_INT 3
71042: PPUSH
71043: CALL_OW 275
71047: PUSH
71048: LD_VAR 0 5
71052: PUSH
71053: LD_INT 3
71055: ARRAY
71056: GREATEREQUAL
71057: AND
71058: ST_TO_ADDR
// end ;
71059: LD_VAR 0 3
71063: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
71064: LD_INT 0
71066: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
71067: LD_VAR 0 1
71071: PPUSH
71072: LD_VAR 0 2
71076: PPUSH
71077: LD_INT 0
71079: PPUSH
71080: LD_INT 0
71082: PPUSH
71083: LD_INT 1
71085: PPUSH
71086: LD_INT 0
71088: PPUSH
71089: CALL_OW 587
// end ;
71093: LD_VAR 0 3
71097: RET
// export function CenterOnNow ( unit ) ; begin
71098: LD_INT 0
71100: PPUSH
// result := IsInUnit ( unit ) ;
71101: LD_ADDR_VAR 0 2
71105: PUSH
71106: LD_VAR 0 1
71110: PPUSH
71111: CALL_OW 310
71115: ST_TO_ADDR
// if not result then
71116: LD_VAR 0 2
71120: NOT
71121: IFFALSE 71133
// result := unit ;
71123: LD_ADDR_VAR 0 2
71127: PUSH
71128: LD_VAR 0 1
71132: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
71133: LD_VAR 0 1
71137: PPUSH
71138: CALL_OW 87
// end ;
71142: LD_VAR 0 2
71146: RET
// export function ComMoveHex ( unit , hex ) ; begin
71147: LD_INT 0
71149: PPUSH
// if not hex then
71150: LD_VAR 0 2
71154: NOT
71155: IFFALSE 71159
// exit ;
71157: GO 71212
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
71159: LD_VAR 0 2
71163: PUSH
71164: LD_INT 1
71166: ARRAY
71167: PPUSH
71168: LD_VAR 0 2
71172: PUSH
71173: LD_INT 2
71175: ARRAY
71176: PPUSH
71177: CALL_OW 428
71181: IFFALSE 71185
// exit ;
71183: GO 71212
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71185: LD_VAR 0 1
71189: PPUSH
71190: LD_VAR 0 2
71194: PUSH
71195: LD_INT 1
71197: ARRAY
71198: PPUSH
71199: LD_VAR 0 2
71203: PUSH
71204: LD_INT 2
71206: ARRAY
71207: PPUSH
71208: CALL_OW 111
// end ;
71212: LD_VAR 0 3
71216: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71217: LD_INT 0
71219: PPUSH
71220: PPUSH
71221: PPUSH
// if not unit or not enemy then
71222: LD_VAR 0 1
71226: NOT
71227: PUSH
71228: LD_VAR 0 2
71232: NOT
71233: OR
71234: IFFALSE 71238
// exit ;
71236: GO 71362
// x := GetX ( enemy ) ;
71238: LD_ADDR_VAR 0 4
71242: PUSH
71243: LD_VAR 0 2
71247: PPUSH
71248: CALL_OW 250
71252: ST_TO_ADDR
// y := GetY ( enemy ) ;
71253: LD_ADDR_VAR 0 5
71257: PUSH
71258: LD_VAR 0 2
71262: PPUSH
71263: CALL_OW 251
71267: ST_TO_ADDR
// if ValidHex ( x , y ) then
71268: LD_VAR 0 4
71272: PPUSH
71273: LD_VAR 0 5
71277: PPUSH
71278: CALL_OW 488
71282: IFFALSE 71362
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
71284: LD_VAR 0 2
71288: PPUSH
71289: CALL_OW 247
71293: PUSH
71294: LD_INT 3
71296: PUSH
71297: LD_INT 2
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: IN
71304: PUSH
71305: LD_VAR 0 1
71309: PPUSH
71310: CALL_OW 255
71314: PPUSH
71315: LD_VAR 0 2
71319: PPUSH
71320: CALL_OW 292
71324: OR
71325: IFFALSE 71343
// ComAttackUnit ( unit , enemy ) else
71327: LD_VAR 0 1
71331: PPUSH
71332: LD_VAR 0 2
71336: PPUSH
71337: CALL_OW 115
71341: GO 71362
// ComAgressiveMove ( unit , x , y ) ;
71343: LD_VAR 0 1
71347: PPUSH
71348: LD_VAR 0 4
71352: PPUSH
71353: LD_VAR 0 5
71357: PPUSH
71358: CALL_OW 114
// end ;
71362: LD_VAR 0 3
71366: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
71367: LD_INT 0
71369: PPUSH
71370: PPUSH
71371: PPUSH
// list := AreaToList ( area , 0 ) ;
71372: LD_ADDR_VAR 0 5
71376: PUSH
71377: LD_VAR 0 1
71381: PPUSH
71382: LD_INT 0
71384: PPUSH
71385: CALL_OW 517
71389: ST_TO_ADDR
// if not list then
71390: LD_VAR 0 5
71394: NOT
71395: IFFALSE 71399
// exit ;
71397: GO 71529
// if all then
71399: LD_VAR 0 2
71403: IFFALSE 71491
// begin for i := 1 to list [ 1 ] do
71405: LD_ADDR_VAR 0 4
71409: PUSH
71410: DOUBLE
71411: LD_INT 1
71413: DEC
71414: ST_TO_ADDR
71415: LD_VAR 0 5
71419: PUSH
71420: LD_INT 1
71422: ARRAY
71423: PUSH
71424: FOR_TO
71425: IFFALSE 71487
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
71427: LD_ADDR_VAR 0 3
71431: PUSH
71432: LD_VAR 0 3
71436: PPUSH
71437: LD_VAR 0 3
71441: PUSH
71442: LD_INT 1
71444: PLUS
71445: PPUSH
71446: LD_VAR 0 5
71450: PUSH
71451: LD_INT 1
71453: ARRAY
71454: PUSH
71455: LD_VAR 0 4
71459: ARRAY
71460: PUSH
71461: LD_VAR 0 5
71465: PUSH
71466: LD_INT 2
71468: ARRAY
71469: PUSH
71470: LD_VAR 0 4
71474: ARRAY
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PPUSH
71480: CALL_OW 1
71484: ST_TO_ADDR
71485: GO 71424
71487: POP
71488: POP
// exit ;
71489: GO 71529
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71491: LD_ADDR_VAR 0 3
71495: PUSH
71496: LD_VAR 0 5
71500: PUSH
71501: LD_INT 1
71503: ARRAY
71504: PUSH
71505: LD_INT 1
71507: ARRAY
71508: PUSH
71509: LD_VAR 0 5
71513: PUSH
71514: LD_INT 2
71516: ARRAY
71517: PUSH
71518: LD_INT 1
71520: ARRAY
71521: PUSH
71522: EMPTY
71523: LIST
71524: LIST
71525: PUSH
71526: EMPTY
71527: LIST
71528: ST_TO_ADDR
// end ;
71529: LD_VAR 0 3
71533: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71534: LD_INT 0
71536: PPUSH
71537: PPUSH
// list := AreaToList ( area , 0 ) ;
71538: LD_ADDR_VAR 0 4
71542: PUSH
71543: LD_VAR 0 1
71547: PPUSH
71548: LD_INT 0
71550: PPUSH
71551: CALL_OW 517
71555: ST_TO_ADDR
// if not list then
71556: LD_VAR 0 4
71560: NOT
71561: IFFALSE 71565
// exit ;
71563: GO 71606
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71565: LD_ADDR_VAR 0 3
71569: PUSH
71570: LD_VAR 0 4
71574: PUSH
71575: LD_INT 1
71577: ARRAY
71578: PUSH
71579: LD_INT 1
71581: ARRAY
71582: PUSH
71583: LD_VAR 0 4
71587: PUSH
71588: LD_INT 2
71590: ARRAY
71591: PUSH
71592: LD_INT 1
71594: ARRAY
71595: PUSH
71596: LD_VAR 0 2
71600: PUSH
71601: EMPTY
71602: LIST
71603: LIST
71604: LIST
71605: ST_TO_ADDR
// end ;
71606: LD_VAR 0 3
71610: RET
// export function First ( array ) ; begin
71611: LD_INT 0
71613: PPUSH
// if not array then
71614: LD_VAR 0 1
71618: NOT
71619: IFFALSE 71623
// exit ;
71621: GO 71637
// result := array [ 1 ] ;
71623: LD_ADDR_VAR 0 2
71627: PUSH
71628: LD_VAR 0 1
71632: PUSH
71633: LD_INT 1
71635: ARRAY
71636: ST_TO_ADDR
// end ;
71637: LD_VAR 0 2
71641: RET
// export function Last ( array ) ; begin
71642: LD_INT 0
71644: PPUSH
// if not array then
71645: LD_VAR 0 1
71649: NOT
71650: IFFALSE 71654
// exit ;
71652: GO 71670
// result := array [ array ] ;
71654: LD_ADDR_VAR 0 2
71658: PUSH
71659: LD_VAR 0 1
71663: PUSH
71664: LD_VAR 0 1
71668: ARRAY
71669: ST_TO_ADDR
// end ;
71670: LD_VAR 0 2
71674: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71675: LD_INT 0
71677: PPUSH
71678: PPUSH
// result := [ ] ;
71679: LD_ADDR_VAR 0 5
71683: PUSH
71684: EMPTY
71685: ST_TO_ADDR
// if not array then
71686: LD_VAR 0 1
71690: NOT
71691: IFFALSE 71695
// exit ;
71693: GO 71807
// for i := 1 to array do
71695: LD_ADDR_VAR 0 6
71699: PUSH
71700: DOUBLE
71701: LD_INT 1
71703: DEC
71704: ST_TO_ADDR
71705: LD_VAR 0 1
71709: PUSH
71710: FOR_TO
71711: IFFALSE 71805
// if array [ i ] [ index ] = value then
71713: LD_VAR 0 1
71717: PUSH
71718: LD_VAR 0 6
71722: ARRAY
71723: PUSH
71724: LD_VAR 0 2
71728: ARRAY
71729: PUSH
71730: LD_VAR 0 3
71734: EQUAL
71735: IFFALSE 71803
// begin if indexColumn then
71737: LD_VAR 0 4
71741: IFFALSE 71777
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71743: LD_ADDR_VAR 0 5
71747: PUSH
71748: LD_VAR 0 5
71752: PPUSH
71753: LD_VAR 0 1
71757: PUSH
71758: LD_VAR 0 6
71762: ARRAY
71763: PUSH
71764: LD_VAR 0 4
71768: ARRAY
71769: PPUSH
71770: CALL 66999 0 2
71774: ST_TO_ADDR
71775: GO 71803
// result := Join ( result , array [ i ] ) ;
71777: LD_ADDR_VAR 0 5
71781: PUSH
71782: LD_VAR 0 5
71786: PPUSH
71787: LD_VAR 0 1
71791: PUSH
71792: LD_VAR 0 6
71796: ARRAY
71797: PPUSH
71798: CALL 66999 0 2
71802: ST_TO_ADDR
// end ;
71803: GO 71710
71805: POP
71806: POP
// end ;
71807: LD_VAR 0 5
71811: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71812: LD_INT 0
71814: PPUSH
// if not vehicles or not parkingPoint then
71815: LD_VAR 0 1
71819: NOT
71820: PUSH
71821: LD_VAR 0 2
71825: NOT
71826: OR
71827: IFFALSE 71831
// exit ;
71829: GO 71929
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71831: LD_ADDR_VAR 0 1
71835: PUSH
71836: LD_VAR 0 1
71840: PPUSH
71841: LD_INT 50
71843: PUSH
71844: EMPTY
71845: LIST
71846: PUSH
71847: LD_INT 3
71849: PUSH
71850: LD_INT 92
71852: PUSH
71853: LD_VAR 0 2
71857: PUSH
71858: LD_INT 1
71860: ARRAY
71861: PUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_INT 2
71869: ARRAY
71870: PUSH
71871: LD_INT 8
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: PUSH
71880: EMPTY
71881: LIST
71882: LIST
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PPUSH
71888: CALL_OW 72
71892: ST_TO_ADDR
// if not vehicles then
71893: LD_VAR 0 1
71897: NOT
71898: IFFALSE 71902
// exit ;
71900: GO 71929
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71902: LD_VAR 0 1
71906: PPUSH
71907: LD_VAR 0 2
71911: PUSH
71912: LD_INT 1
71914: ARRAY
71915: PPUSH
71916: LD_VAR 0 2
71920: PUSH
71921: LD_INT 2
71923: ARRAY
71924: PPUSH
71925: CALL_OW 111
// end ;
71929: LD_VAR 0 3
71933: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71934: LD_INT 0
71936: PPUSH
71937: PPUSH
71938: PPUSH
// if not side or not area then
71939: LD_VAR 0 1
71943: NOT
71944: PUSH
71945: LD_VAR 0 2
71949: NOT
71950: OR
71951: IFFALSE 71955
// exit ;
71953: GO 72074
// tmp := AreaToList ( area , 0 ) ;
71955: LD_ADDR_VAR 0 5
71959: PUSH
71960: LD_VAR 0 2
71964: PPUSH
71965: LD_INT 0
71967: PPUSH
71968: CALL_OW 517
71972: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71973: LD_ADDR_VAR 0 4
71977: PUSH
71978: DOUBLE
71979: LD_INT 1
71981: DEC
71982: ST_TO_ADDR
71983: LD_VAR 0 5
71987: PUSH
71988: LD_INT 1
71990: ARRAY
71991: PUSH
71992: FOR_TO
71993: IFFALSE 72072
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71995: LD_VAR 0 5
71999: PUSH
72000: LD_INT 1
72002: ARRAY
72003: PUSH
72004: LD_VAR 0 4
72008: ARRAY
72009: PPUSH
72010: LD_VAR 0 5
72014: PUSH
72015: LD_INT 2
72017: ARRAY
72018: PUSH
72019: LD_VAR 0 4
72023: ARRAY
72024: PPUSH
72025: CALL_OW 351
72029: IFFALSE 72070
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
72031: LD_VAR 0 5
72035: PUSH
72036: LD_INT 1
72038: ARRAY
72039: PUSH
72040: LD_VAR 0 4
72044: ARRAY
72045: PPUSH
72046: LD_VAR 0 5
72050: PUSH
72051: LD_INT 2
72053: ARRAY
72054: PUSH
72055: LD_VAR 0 4
72059: ARRAY
72060: PPUSH
72061: LD_VAR 0 1
72065: PPUSH
72066: CALL_OW 244
// end ;
72070: GO 71992
72072: POP
72073: POP
// end ; end_of_file
72074: LD_VAR 0 3
72078: RET
// export globalGameSaveCounter ; every 0 0$1 do
72079: GO 72081
72081: DISABLE
// begin enable ;
72082: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
72083: LD_STRING updateTimer(
72085: PUSH
72086: LD_OWVAR 1
72090: STR
72091: PUSH
72092: LD_STRING );
72094: STR
72095: PPUSH
72096: CALL_OW 559
// end ;
72100: END
// every 0 0$1 do
72101: GO 72103
72103: DISABLE
// begin globalGameSaveCounter := 0 ;
72104: LD_ADDR_EXP 74
72108: PUSH
72109: LD_INT 0
72111: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
72112: LD_STRING setGameSaveCounter(0)
72114: PPUSH
72115: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
72119: LD_STRING initStreamRollete();
72121: PPUSH
72122: CALL_OW 559
// InitStreamMode ;
72126: CALL 73469 0 0
// DefineStreamItems ( false ) ;
72130: LD_INT 0
72132: PPUSH
72133: CALL 73933 0 1
// end ;
72137: END
// export function SOS_MapStart ( ) ; begin
72138: LD_INT 0
72140: PPUSH
// if streamModeActive then
72141: LD_EXP 75
72145: IFFALSE 72154
// DefineStreamItems ( true ) ;
72147: LD_INT 1
72149: PPUSH
72150: CALL 73933 0 1
// UpdateLuaVariables ( ) ;
72154: CALL 72171 0 0
// UpdateFactoryWaypoints ( ) ;
72158: CALL 86802 0 0
// UpdateWarehouseGatheringPoints ( ) ;
72162: CALL 87059 0 0
// end ;
72166: LD_VAR 0 1
72170: RET
// function UpdateLuaVariables ( ) ; begin
72171: LD_INT 0
72173: PPUSH
// if globalGameSaveCounter then
72174: LD_EXP 74
72178: IFFALSE 72212
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
72180: LD_ADDR_EXP 74
72184: PUSH
72185: LD_EXP 74
72189: PPUSH
72190: CALL 68360 0 1
72194: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
72195: LD_STRING setGameSaveCounter(
72197: PUSH
72198: LD_EXP 74
72202: STR
72203: PUSH
72204: LD_STRING )
72206: STR
72207: PPUSH
72208: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
72212: LD_STRING setGameDifficulty(
72214: PUSH
72215: LD_OWVAR 67
72219: STR
72220: PUSH
72221: LD_STRING )
72223: STR
72224: PPUSH
72225: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
72229: LD_STRING displayDifficulty(
72231: PUSH
72232: LD_OWVAR 67
72236: STR
72237: PUSH
72238: LD_STRING )
72240: STR
72241: PPUSH
72242: CALL_OW 559
// end ;
72246: LD_VAR 0 1
72250: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72251: LD_INT 0
72253: PPUSH
// if p2 = stream_mode then
72254: LD_VAR 0 2
72258: PUSH
72259: LD_INT 100
72261: EQUAL
72262: IFFALSE 73265
// begin if not StreamModeActive then
72264: LD_EXP 75
72268: NOT
72269: IFFALSE 72279
// StreamModeActive := true ;
72271: LD_ADDR_EXP 75
72275: PUSH
72276: LD_INT 1
72278: ST_TO_ADDR
// if p3 = 0 then
72279: LD_VAR 0 3
72283: PUSH
72284: LD_INT 0
72286: EQUAL
72287: IFFALSE 72293
// InitStreamMode ;
72289: CALL 73469 0 0
// if p3 = 1 then
72293: LD_VAR 0 3
72297: PUSH
72298: LD_INT 1
72300: EQUAL
72301: IFFALSE 72311
// sRocket := true ;
72303: LD_ADDR_EXP 80
72307: PUSH
72308: LD_INT 1
72310: ST_TO_ADDR
// if p3 = 2 then
72311: LD_VAR 0 3
72315: PUSH
72316: LD_INT 2
72318: EQUAL
72319: IFFALSE 72329
// sSpeed := true ;
72321: LD_ADDR_EXP 79
72325: PUSH
72326: LD_INT 1
72328: ST_TO_ADDR
// if p3 = 3 then
72329: LD_VAR 0 3
72333: PUSH
72334: LD_INT 3
72336: EQUAL
72337: IFFALSE 72347
// sEngine := true ;
72339: LD_ADDR_EXP 81
72343: PUSH
72344: LD_INT 1
72346: ST_TO_ADDR
// if p3 = 4 then
72347: LD_VAR 0 3
72351: PUSH
72352: LD_INT 4
72354: EQUAL
72355: IFFALSE 72365
// sSpec := true ;
72357: LD_ADDR_EXP 78
72361: PUSH
72362: LD_INT 1
72364: ST_TO_ADDR
// if p3 = 5 then
72365: LD_VAR 0 3
72369: PUSH
72370: LD_INT 5
72372: EQUAL
72373: IFFALSE 72383
// sLevel := true ;
72375: LD_ADDR_EXP 82
72379: PUSH
72380: LD_INT 1
72382: ST_TO_ADDR
// if p3 = 6 then
72383: LD_VAR 0 3
72387: PUSH
72388: LD_INT 6
72390: EQUAL
72391: IFFALSE 72401
// sArmoury := true ;
72393: LD_ADDR_EXP 83
72397: PUSH
72398: LD_INT 1
72400: ST_TO_ADDR
// if p3 = 7 then
72401: LD_VAR 0 3
72405: PUSH
72406: LD_INT 7
72408: EQUAL
72409: IFFALSE 72419
// sRadar := true ;
72411: LD_ADDR_EXP 84
72415: PUSH
72416: LD_INT 1
72418: ST_TO_ADDR
// if p3 = 8 then
72419: LD_VAR 0 3
72423: PUSH
72424: LD_INT 8
72426: EQUAL
72427: IFFALSE 72437
// sBunker := true ;
72429: LD_ADDR_EXP 85
72433: PUSH
72434: LD_INT 1
72436: ST_TO_ADDR
// if p3 = 9 then
72437: LD_VAR 0 3
72441: PUSH
72442: LD_INT 9
72444: EQUAL
72445: IFFALSE 72455
// sHack := true ;
72447: LD_ADDR_EXP 86
72451: PUSH
72452: LD_INT 1
72454: ST_TO_ADDR
// if p3 = 10 then
72455: LD_VAR 0 3
72459: PUSH
72460: LD_INT 10
72462: EQUAL
72463: IFFALSE 72473
// sFire := true ;
72465: LD_ADDR_EXP 87
72469: PUSH
72470: LD_INT 1
72472: ST_TO_ADDR
// if p3 = 11 then
72473: LD_VAR 0 3
72477: PUSH
72478: LD_INT 11
72480: EQUAL
72481: IFFALSE 72491
// sRefresh := true ;
72483: LD_ADDR_EXP 88
72487: PUSH
72488: LD_INT 1
72490: ST_TO_ADDR
// if p3 = 12 then
72491: LD_VAR 0 3
72495: PUSH
72496: LD_INT 12
72498: EQUAL
72499: IFFALSE 72509
// sExp := true ;
72501: LD_ADDR_EXP 89
72505: PUSH
72506: LD_INT 1
72508: ST_TO_ADDR
// if p3 = 13 then
72509: LD_VAR 0 3
72513: PUSH
72514: LD_INT 13
72516: EQUAL
72517: IFFALSE 72527
// sDepot := true ;
72519: LD_ADDR_EXP 90
72523: PUSH
72524: LD_INT 1
72526: ST_TO_ADDR
// if p3 = 14 then
72527: LD_VAR 0 3
72531: PUSH
72532: LD_INT 14
72534: EQUAL
72535: IFFALSE 72545
// sFlag := true ;
72537: LD_ADDR_EXP 91
72541: PUSH
72542: LD_INT 1
72544: ST_TO_ADDR
// if p3 = 15 then
72545: LD_VAR 0 3
72549: PUSH
72550: LD_INT 15
72552: EQUAL
72553: IFFALSE 72563
// sKamikadze := true ;
72555: LD_ADDR_EXP 99
72559: PUSH
72560: LD_INT 1
72562: ST_TO_ADDR
// if p3 = 16 then
72563: LD_VAR 0 3
72567: PUSH
72568: LD_INT 16
72570: EQUAL
72571: IFFALSE 72581
// sTroll := true ;
72573: LD_ADDR_EXP 100
72577: PUSH
72578: LD_INT 1
72580: ST_TO_ADDR
// if p3 = 17 then
72581: LD_VAR 0 3
72585: PUSH
72586: LD_INT 17
72588: EQUAL
72589: IFFALSE 72599
// sSlow := true ;
72591: LD_ADDR_EXP 101
72595: PUSH
72596: LD_INT 1
72598: ST_TO_ADDR
// if p3 = 18 then
72599: LD_VAR 0 3
72603: PUSH
72604: LD_INT 18
72606: EQUAL
72607: IFFALSE 72617
// sLack := true ;
72609: LD_ADDR_EXP 102
72613: PUSH
72614: LD_INT 1
72616: ST_TO_ADDR
// if p3 = 19 then
72617: LD_VAR 0 3
72621: PUSH
72622: LD_INT 19
72624: EQUAL
72625: IFFALSE 72635
// sTank := true ;
72627: LD_ADDR_EXP 104
72631: PUSH
72632: LD_INT 1
72634: ST_TO_ADDR
// if p3 = 20 then
72635: LD_VAR 0 3
72639: PUSH
72640: LD_INT 20
72642: EQUAL
72643: IFFALSE 72653
// sRemote := true ;
72645: LD_ADDR_EXP 105
72649: PUSH
72650: LD_INT 1
72652: ST_TO_ADDR
// if p3 = 21 then
72653: LD_VAR 0 3
72657: PUSH
72658: LD_INT 21
72660: EQUAL
72661: IFFALSE 72671
// sPowell := true ;
72663: LD_ADDR_EXP 106
72667: PUSH
72668: LD_INT 1
72670: ST_TO_ADDR
// if p3 = 22 then
72671: LD_VAR 0 3
72675: PUSH
72676: LD_INT 22
72678: EQUAL
72679: IFFALSE 72689
// sTeleport := true ;
72681: LD_ADDR_EXP 109
72685: PUSH
72686: LD_INT 1
72688: ST_TO_ADDR
// if p3 = 23 then
72689: LD_VAR 0 3
72693: PUSH
72694: LD_INT 23
72696: EQUAL
72697: IFFALSE 72707
// sOilTower := true ;
72699: LD_ADDR_EXP 111
72703: PUSH
72704: LD_INT 1
72706: ST_TO_ADDR
// if p3 = 24 then
72707: LD_VAR 0 3
72711: PUSH
72712: LD_INT 24
72714: EQUAL
72715: IFFALSE 72725
// sShovel := true ;
72717: LD_ADDR_EXP 112
72721: PUSH
72722: LD_INT 1
72724: ST_TO_ADDR
// if p3 = 25 then
72725: LD_VAR 0 3
72729: PUSH
72730: LD_INT 25
72732: EQUAL
72733: IFFALSE 72743
// sSheik := true ;
72735: LD_ADDR_EXP 113
72739: PUSH
72740: LD_INT 1
72742: ST_TO_ADDR
// if p3 = 26 then
72743: LD_VAR 0 3
72747: PUSH
72748: LD_INT 26
72750: EQUAL
72751: IFFALSE 72761
// sEarthquake := true ;
72753: LD_ADDR_EXP 115
72757: PUSH
72758: LD_INT 1
72760: ST_TO_ADDR
// if p3 = 27 then
72761: LD_VAR 0 3
72765: PUSH
72766: LD_INT 27
72768: EQUAL
72769: IFFALSE 72779
// sAI := true ;
72771: LD_ADDR_EXP 116
72775: PUSH
72776: LD_INT 1
72778: ST_TO_ADDR
// if p3 = 28 then
72779: LD_VAR 0 3
72783: PUSH
72784: LD_INT 28
72786: EQUAL
72787: IFFALSE 72797
// sCargo := true ;
72789: LD_ADDR_EXP 119
72793: PUSH
72794: LD_INT 1
72796: ST_TO_ADDR
// if p3 = 29 then
72797: LD_VAR 0 3
72801: PUSH
72802: LD_INT 29
72804: EQUAL
72805: IFFALSE 72815
// sDLaser := true ;
72807: LD_ADDR_EXP 120
72811: PUSH
72812: LD_INT 1
72814: ST_TO_ADDR
// if p3 = 30 then
72815: LD_VAR 0 3
72819: PUSH
72820: LD_INT 30
72822: EQUAL
72823: IFFALSE 72833
// sExchange := true ;
72825: LD_ADDR_EXP 121
72829: PUSH
72830: LD_INT 1
72832: ST_TO_ADDR
// if p3 = 31 then
72833: LD_VAR 0 3
72837: PUSH
72838: LD_INT 31
72840: EQUAL
72841: IFFALSE 72851
// sFac := true ;
72843: LD_ADDR_EXP 122
72847: PUSH
72848: LD_INT 1
72850: ST_TO_ADDR
// if p3 = 32 then
72851: LD_VAR 0 3
72855: PUSH
72856: LD_INT 32
72858: EQUAL
72859: IFFALSE 72869
// sPower := true ;
72861: LD_ADDR_EXP 123
72865: PUSH
72866: LD_INT 1
72868: ST_TO_ADDR
// if p3 = 33 then
72869: LD_VAR 0 3
72873: PUSH
72874: LD_INT 33
72876: EQUAL
72877: IFFALSE 72887
// sRandom := true ;
72879: LD_ADDR_EXP 124
72883: PUSH
72884: LD_INT 1
72886: ST_TO_ADDR
// if p3 = 34 then
72887: LD_VAR 0 3
72891: PUSH
72892: LD_INT 34
72894: EQUAL
72895: IFFALSE 72905
// sShield := true ;
72897: LD_ADDR_EXP 125
72901: PUSH
72902: LD_INT 1
72904: ST_TO_ADDR
// if p3 = 35 then
72905: LD_VAR 0 3
72909: PUSH
72910: LD_INT 35
72912: EQUAL
72913: IFFALSE 72923
// sTime := true ;
72915: LD_ADDR_EXP 126
72919: PUSH
72920: LD_INT 1
72922: ST_TO_ADDR
// if p3 = 36 then
72923: LD_VAR 0 3
72927: PUSH
72928: LD_INT 36
72930: EQUAL
72931: IFFALSE 72941
// sTools := true ;
72933: LD_ADDR_EXP 127
72937: PUSH
72938: LD_INT 1
72940: ST_TO_ADDR
// if p3 = 101 then
72941: LD_VAR 0 3
72945: PUSH
72946: LD_INT 101
72948: EQUAL
72949: IFFALSE 72959
// sSold := true ;
72951: LD_ADDR_EXP 92
72955: PUSH
72956: LD_INT 1
72958: ST_TO_ADDR
// if p3 = 102 then
72959: LD_VAR 0 3
72963: PUSH
72964: LD_INT 102
72966: EQUAL
72967: IFFALSE 72977
// sDiff := true ;
72969: LD_ADDR_EXP 93
72973: PUSH
72974: LD_INT 1
72976: ST_TO_ADDR
// if p3 = 103 then
72977: LD_VAR 0 3
72981: PUSH
72982: LD_INT 103
72984: EQUAL
72985: IFFALSE 72995
// sFog := true ;
72987: LD_ADDR_EXP 96
72991: PUSH
72992: LD_INT 1
72994: ST_TO_ADDR
// if p3 = 104 then
72995: LD_VAR 0 3
72999: PUSH
73000: LD_INT 104
73002: EQUAL
73003: IFFALSE 73013
// sReset := true ;
73005: LD_ADDR_EXP 97
73009: PUSH
73010: LD_INT 1
73012: ST_TO_ADDR
// if p3 = 105 then
73013: LD_VAR 0 3
73017: PUSH
73018: LD_INT 105
73020: EQUAL
73021: IFFALSE 73031
// sSun := true ;
73023: LD_ADDR_EXP 98
73027: PUSH
73028: LD_INT 1
73030: ST_TO_ADDR
// if p3 = 106 then
73031: LD_VAR 0 3
73035: PUSH
73036: LD_INT 106
73038: EQUAL
73039: IFFALSE 73049
// sTiger := true ;
73041: LD_ADDR_EXP 94
73045: PUSH
73046: LD_INT 1
73048: ST_TO_ADDR
// if p3 = 107 then
73049: LD_VAR 0 3
73053: PUSH
73054: LD_INT 107
73056: EQUAL
73057: IFFALSE 73067
// sBomb := true ;
73059: LD_ADDR_EXP 95
73063: PUSH
73064: LD_INT 1
73066: ST_TO_ADDR
// if p3 = 108 then
73067: LD_VAR 0 3
73071: PUSH
73072: LD_INT 108
73074: EQUAL
73075: IFFALSE 73085
// sWound := true ;
73077: LD_ADDR_EXP 103
73081: PUSH
73082: LD_INT 1
73084: ST_TO_ADDR
// if p3 = 109 then
73085: LD_VAR 0 3
73089: PUSH
73090: LD_INT 109
73092: EQUAL
73093: IFFALSE 73103
// sBetray := true ;
73095: LD_ADDR_EXP 107
73099: PUSH
73100: LD_INT 1
73102: ST_TO_ADDR
// if p3 = 110 then
73103: LD_VAR 0 3
73107: PUSH
73108: LD_INT 110
73110: EQUAL
73111: IFFALSE 73121
// sContamin := true ;
73113: LD_ADDR_EXP 108
73117: PUSH
73118: LD_INT 1
73120: ST_TO_ADDR
// if p3 = 111 then
73121: LD_VAR 0 3
73125: PUSH
73126: LD_INT 111
73128: EQUAL
73129: IFFALSE 73139
// sOil := true ;
73131: LD_ADDR_EXP 110
73135: PUSH
73136: LD_INT 1
73138: ST_TO_ADDR
// if p3 = 112 then
73139: LD_VAR 0 3
73143: PUSH
73144: LD_INT 112
73146: EQUAL
73147: IFFALSE 73157
// sStu := true ;
73149: LD_ADDR_EXP 114
73153: PUSH
73154: LD_INT 1
73156: ST_TO_ADDR
// if p3 = 113 then
73157: LD_VAR 0 3
73161: PUSH
73162: LD_INT 113
73164: EQUAL
73165: IFFALSE 73175
// sBazooka := true ;
73167: LD_ADDR_EXP 117
73171: PUSH
73172: LD_INT 1
73174: ST_TO_ADDR
// if p3 = 114 then
73175: LD_VAR 0 3
73179: PUSH
73180: LD_INT 114
73182: EQUAL
73183: IFFALSE 73193
// sMortar := true ;
73185: LD_ADDR_EXP 118
73189: PUSH
73190: LD_INT 1
73192: ST_TO_ADDR
// if p3 = 115 then
73193: LD_VAR 0 3
73197: PUSH
73198: LD_INT 115
73200: EQUAL
73201: IFFALSE 73211
// sRanger := true ;
73203: LD_ADDR_EXP 128
73207: PUSH
73208: LD_INT 1
73210: ST_TO_ADDR
// if p3 = 116 then
73211: LD_VAR 0 3
73215: PUSH
73216: LD_INT 116
73218: EQUAL
73219: IFFALSE 73229
// sComputer := true ;
73221: LD_ADDR_EXP 129
73225: PUSH
73226: LD_INT 1
73228: ST_TO_ADDR
// if p3 = 117 then
73229: LD_VAR 0 3
73233: PUSH
73234: LD_INT 117
73236: EQUAL
73237: IFFALSE 73247
// s30 := true ;
73239: LD_ADDR_EXP 130
73243: PUSH
73244: LD_INT 1
73246: ST_TO_ADDR
// if p3 = 118 then
73247: LD_VAR 0 3
73251: PUSH
73252: LD_INT 118
73254: EQUAL
73255: IFFALSE 73265
// s60 := true ;
73257: LD_ADDR_EXP 131
73261: PUSH
73262: LD_INT 1
73264: ST_TO_ADDR
// end ; if p2 = hack_mode then
73265: LD_VAR 0 2
73269: PUSH
73270: LD_INT 101
73272: EQUAL
73273: IFFALSE 73401
// begin case p3 of 1 :
73275: LD_VAR 0 3
73279: PUSH
73280: LD_INT 1
73282: DOUBLE
73283: EQUAL
73284: IFTRUE 73288
73286: GO 73295
73288: POP
// hHackUnlimitedResources ; 2 :
73289: CALL 85548 0 0
73293: GO 73401
73295: LD_INT 2
73297: DOUBLE
73298: EQUAL
73299: IFTRUE 73303
73301: GO 73310
73303: POP
// hHackSetLevel10 ; 3 :
73304: CALL 85681 0 0
73308: GO 73401
73310: LD_INT 3
73312: DOUBLE
73313: EQUAL
73314: IFTRUE 73318
73316: GO 73325
73318: POP
// hHackSetLevel10YourUnits ; 4 :
73319: CALL 85766 0 0
73323: GO 73401
73325: LD_INT 4
73327: DOUBLE
73328: EQUAL
73329: IFTRUE 73333
73331: GO 73340
73333: POP
// hHackInvincible ; 5 :
73334: CALL 86214 0 0
73338: GO 73401
73340: LD_INT 5
73342: DOUBLE
73343: EQUAL
73344: IFTRUE 73348
73346: GO 73355
73348: POP
// hHackInvisible ; 6 :
73349: CALL 86325 0 0
73353: GO 73401
73355: LD_INT 6
73357: DOUBLE
73358: EQUAL
73359: IFTRUE 73363
73361: GO 73370
73363: POP
// hHackChangeYourSide ; 7 :
73364: CALL 86382 0 0
73368: GO 73401
73370: LD_INT 7
73372: DOUBLE
73373: EQUAL
73374: IFTRUE 73378
73376: GO 73385
73378: POP
// hHackChangeUnitSide ; 8 :
73379: CALL 86424 0 0
73383: GO 73401
73385: LD_INT 8
73387: DOUBLE
73388: EQUAL
73389: IFTRUE 73393
73391: GO 73400
73393: POP
// hHackFog ; end ;
73394: CALL 86525 0 0
73398: GO 73401
73400: POP
// end ; if p2 = game_save_mode then
73401: LD_VAR 0 2
73405: PUSH
73406: LD_INT 102
73408: EQUAL
73409: IFFALSE 73464
// begin if p3 = 1 then
73411: LD_VAR 0 3
73415: PUSH
73416: LD_INT 1
73418: EQUAL
73419: IFFALSE 73431
// globalGameSaveCounter := p4 ;
73421: LD_ADDR_EXP 74
73425: PUSH
73426: LD_VAR 0 4
73430: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
73431: LD_VAR 0 3
73435: PUSH
73436: LD_INT 2
73438: EQUAL
73439: PUSH
73440: LD_EXP 74
73444: AND
73445: IFFALSE 73464
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
73447: LD_STRING setGameSaveCounter(
73449: PUSH
73450: LD_EXP 74
73454: STR
73455: PUSH
73456: LD_STRING )
73458: STR
73459: PPUSH
73460: CALL_OW 559
// end ; end ;
73464: LD_VAR 0 7
73468: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
73469: LD_INT 0
73471: PPUSH
// streamModeActive := false ;
73472: LD_ADDR_EXP 75
73476: PUSH
73477: LD_INT 0
73479: ST_TO_ADDR
// normalCounter := 36 ;
73480: LD_ADDR_EXP 76
73484: PUSH
73485: LD_INT 36
73487: ST_TO_ADDR
// hardcoreCounter := 18 ;
73488: LD_ADDR_EXP 77
73492: PUSH
73493: LD_INT 18
73495: ST_TO_ADDR
// sRocket := false ;
73496: LD_ADDR_EXP 80
73500: PUSH
73501: LD_INT 0
73503: ST_TO_ADDR
// sSpeed := false ;
73504: LD_ADDR_EXP 79
73508: PUSH
73509: LD_INT 0
73511: ST_TO_ADDR
// sEngine := false ;
73512: LD_ADDR_EXP 81
73516: PUSH
73517: LD_INT 0
73519: ST_TO_ADDR
// sSpec := false ;
73520: LD_ADDR_EXP 78
73524: PUSH
73525: LD_INT 0
73527: ST_TO_ADDR
// sLevel := false ;
73528: LD_ADDR_EXP 82
73532: PUSH
73533: LD_INT 0
73535: ST_TO_ADDR
// sArmoury := false ;
73536: LD_ADDR_EXP 83
73540: PUSH
73541: LD_INT 0
73543: ST_TO_ADDR
// sRadar := false ;
73544: LD_ADDR_EXP 84
73548: PUSH
73549: LD_INT 0
73551: ST_TO_ADDR
// sBunker := false ;
73552: LD_ADDR_EXP 85
73556: PUSH
73557: LD_INT 0
73559: ST_TO_ADDR
// sHack := false ;
73560: LD_ADDR_EXP 86
73564: PUSH
73565: LD_INT 0
73567: ST_TO_ADDR
// sFire := false ;
73568: LD_ADDR_EXP 87
73572: PUSH
73573: LD_INT 0
73575: ST_TO_ADDR
// sRefresh := false ;
73576: LD_ADDR_EXP 88
73580: PUSH
73581: LD_INT 0
73583: ST_TO_ADDR
// sExp := false ;
73584: LD_ADDR_EXP 89
73588: PUSH
73589: LD_INT 0
73591: ST_TO_ADDR
// sDepot := false ;
73592: LD_ADDR_EXP 90
73596: PUSH
73597: LD_INT 0
73599: ST_TO_ADDR
// sFlag := false ;
73600: LD_ADDR_EXP 91
73604: PUSH
73605: LD_INT 0
73607: ST_TO_ADDR
// sKamikadze := false ;
73608: LD_ADDR_EXP 99
73612: PUSH
73613: LD_INT 0
73615: ST_TO_ADDR
// sTroll := false ;
73616: LD_ADDR_EXP 100
73620: PUSH
73621: LD_INT 0
73623: ST_TO_ADDR
// sSlow := false ;
73624: LD_ADDR_EXP 101
73628: PUSH
73629: LD_INT 0
73631: ST_TO_ADDR
// sLack := false ;
73632: LD_ADDR_EXP 102
73636: PUSH
73637: LD_INT 0
73639: ST_TO_ADDR
// sTank := false ;
73640: LD_ADDR_EXP 104
73644: PUSH
73645: LD_INT 0
73647: ST_TO_ADDR
// sRemote := false ;
73648: LD_ADDR_EXP 105
73652: PUSH
73653: LD_INT 0
73655: ST_TO_ADDR
// sPowell := false ;
73656: LD_ADDR_EXP 106
73660: PUSH
73661: LD_INT 0
73663: ST_TO_ADDR
// sTeleport := false ;
73664: LD_ADDR_EXP 109
73668: PUSH
73669: LD_INT 0
73671: ST_TO_ADDR
// sOilTower := false ;
73672: LD_ADDR_EXP 111
73676: PUSH
73677: LD_INT 0
73679: ST_TO_ADDR
// sShovel := false ;
73680: LD_ADDR_EXP 112
73684: PUSH
73685: LD_INT 0
73687: ST_TO_ADDR
// sSheik := false ;
73688: LD_ADDR_EXP 113
73692: PUSH
73693: LD_INT 0
73695: ST_TO_ADDR
// sEarthquake := false ;
73696: LD_ADDR_EXP 115
73700: PUSH
73701: LD_INT 0
73703: ST_TO_ADDR
// sAI := false ;
73704: LD_ADDR_EXP 116
73708: PUSH
73709: LD_INT 0
73711: ST_TO_ADDR
// sCargo := false ;
73712: LD_ADDR_EXP 119
73716: PUSH
73717: LD_INT 0
73719: ST_TO_ADDR
// sDLaser := false ;
73720: LD_ADDR_EXP 120
73724: PUSH
73725: LD_INT 0
73727: ST_TO_ADDR
// sExchange := false ;
73728: LD_ADDR_EXP 121
73732: PUSH
73733: LD_INT 0
73735: ST_TO_ADDR
// sFac := false ;
73736: LD_ADDR_EXP 122
73740: PUSH
73741: LD_INT 0
73743: ST_TO_ADDR
// sPower := false ;
73744: LD_ADDR_EXP 123
73748: PUSH
73749: LD_INT 0
73751: ST_TO_ADDR
// sRandom := false ;
73752: LD_ADDR_EXP 124
73756: PUSH
73757: LD_INT 0
73759: ST_TO_ADDR
// sShield := false ;
73760: LD_ADDR_EXP 125
73764: PUSH
73765: LD_INT 0
73767: ST_TO_ADDR
// sTime := false ;
73768: LD_ADDR_EXP 126
73772: PUSH
73773: LD_INT 0
73775: ST_TO_ADDR
// sTools := false ;
73776: LD_ADDR_EXP 127
73780: PUSH
73781: LD_INT 0
73783: ST_TO_ADDR
// sSold := false ;
73784: LD_ADDR_EXP 92
73788: PUSH
73789: LD_INT 0
73791: ST_TO_ADDR
// sDiff := false ;
73792: LD_ADDR_EXP 93
73796: PUSH
73797: LD_INT 0
73799: ST_TO_ADDR
// sFog := false ;
73800: LD_ADDR_EXP 96
73804: PUSH
73805: LD_INT 0
73807: ST_TO_ADDR
// sReset := false ;
73808: LD_ADDR_EXP 97
73812: PUSH
73813: LD_INT 0
73815: ST_TO_ADDR
// sSun := false ;
73816: LD_ADDR_EXP 98
73820: PUSH
73821: LD_INT 0
73823: ST_TO_ADDR
// sTiger := false ;
73824: LD_ADDR_EXP 94
73828: PUSH
73829: LD_INT 0
73831: ST_TO_ADDR
// sBomb := false ;
73832: LD_ADDR_EXP 95
73836: PUSH
73837: LD_INT 0
73839: ST_TO_ADDR
// sWound := false ;
73840: LD_ADDR_EXP 103
73844: PUSH
73845: LD_INT 0
73847: ST_TO_ADDR
// sBetray := false ;
73848: LD_ADDR_EXP 107
73852: PUSH
73853: LD_INT 0
73855: ST_TO_ADDR
// sContamin := false ;
73856: LD_ADDR_EXP 108
73860: PUSH
73861: LD_INT 0
73863: ST_TO_ADDR
// sOil := false ;
73864: LD_ADDR_EXP 110
73868: PUSH
73869: LD_INT 0
73871: ST_TO_ADDR
// sStu := false ;
73872: LD_ADDR_EXP 114
73876: PUSH
73877: LD_INT 0
73879: ST_TO_ADDR
// sBazooka := false ;
73880: LD_ADDR_EXP 117
73884: PUSH
73885: LD_INT 0
73887: ST_TO_ADDR
// sMortar := false ;
73888: LD_ADDR_EXP 118
73892: PUSH
73893: LD_INT 0
73895: ST_TO_ADDR
// sRanger := false ;
73896: LD_ADDR_EXP 128
73900: PUSH
73901: LD_INT 0
73903: ST_TO_ADDR
// sComputer := false ;
73904: LD_ADDR_EXP 129
73908: PUSH
73909: LD_INT 0
73911: ST_TO_ADDR
// s30 := false ;
73912: LD_ADDR_EXP 130
73916: PUSH
73917: LD_INT 0
73919: ST_TO_ADDR
// s60 := false ;
73920: LD_ADDR_EXP 131
73924: PUSH
73925: LD_INT 0
73927: ST_TO_ADDR
// end ;
73928: LD_VAR 0 1
73932: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
73933: LD_INT 0
73935: PPUSH
73936: PPUSH
73937: PPUSH
73938: PPUSH
73939: PPUSH
73940: PPUSH
73941: PPUSH
// result := [ ] ;
73942: LD_ADDR_VAR 0 2
73946: PUSH
73947: EMPTY
73948: ST_TO_ADDR
// if campaign_id = 1 then
73949: LD_OWVAR 69
73953: PUSH
73954: LD_INT 1
73956: EQUAL
73957: IFFALSE 77123
// begin case mission_number of 1 :
73959: LD_OWVAR 70
73963: PUSH
73964: LD_INT 1
73966: DOUBLE
73967: EQUAL
73968: IFTRUE 73972
73970: GO 74048
73972: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
73973: LD_ADDR_VAR 0 2
73977: PUSH
73978: LD_INT 2
73980: PUSH
73981: LD_INT 4
73983: PUSH
73984: LD_INT 11
73986: PUSH
73987: LD_INT 12
73989: PUSH
73990: LD_INT 15
73992: PUSH
73993: LD_INT 16
73995: PUSH
73996: LD_INT 22
73998: PUSH
73999: LD_INT 23
74001: PUSH
74002: LD_INT 26
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: PUSH
74016: LD_INT 101
74018: PUSH
74019: LD_INT 102
74021: PUSH
74022: LD_INT 106
74024: PUSH
74025: LD_INT 116
74027: PUSH
74028: LD_INT 117
74030: PUSH
74031: LD_INT 118
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: LIST
74038: LIST
74039: LIST
74040: LIST
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: ST_TO_ADDR
74046: GO 77121
74048: LD_INT 2
74050: DOUBLE
74051: EQUAL
74052: IFTRUE 74056
74054: GO 74140
74056: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
74057: LD_ADDR_VAR 0 2
74061: PUSH
74062: LD_INT 2
74064: PUSH
74065: LD_INT 4
74067: PUSH
74068: LD_INT 11
74070: PUSH
74071: LD_INT 12
74073: PUSH
74074: LD_INT 15
74076: PUSH
74077: LD_INT 16
74079: PUSH
74080: LD_INT 22
74082: PUSH
74083: LD_INT 23
74085: PUSH
74086: LD_INT 26
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 101
74102: PUSH
74103: LD_INT 102
74105: PUSH
74106: LD_INT 105
74108: PUSH
74109: LD_INT 106
74111: PUSH
74112: LD_INT 108
74114: PUSH
74115: LD_INT 116
74117: PUSH
74118: LD_INT 117
74120: PUSH
74121: LD_INT 118
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: ST_TO_ADDR
74138: GO 77121
74140: LD_INT 3
74142: DOUBLE
74143: EQUAL
74144: IFTRUE 74148
74146: GO 74236
74148: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
74149: LD_ADDR_VAR 0 2
74153: PUSH
74154: LD_INT 2
74156: PUSH
74157: LD_INT 4
74159: PUSH
74160: LD_INT 5
74162: PUSH
74163: LD_INT 11
74165: PUSH
74166: LD_INT 12
74168: PUSH
74169: LD_INT 15
74171: PUSH
74172: LD_INT 16
74174: PUSH
74175: LD_INT 22
74177: PUSH
74178: LD_INT 26
74180: PUSH
74181: LD_INT 36
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 101
74198: PUSH
74199: LD_INT 102
74201: PUSH
74202: LD_INT 105
74204: PUSH
74205: LD_INT 106
74207: PUSH
74208: LD_INT 108
74210: PUSH
74211: LD_INT 116
74213: PUSH
74214: LD_INT 117
74216: PUSH
74217: LD_INT 118
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: LIST
74226: LIST
74227: LIST
74228: LIST
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: ST_TO_ADDR
74234: GO 77121
74236: LD_INT 4
74238: DOUBLE
74239: EQUAL
74240: IFTRUE 74244
74242: GO 74340
74244: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
74245: LD_ADDR_VAR 0 2
74249: PUSH
74250: LD_INT 2
74252: PUSH
74253: LD_INT 4
74255: PUSH
74256: LD_INT 5
74258: PUSH
74259: LD_INT 8
74261: PUSH
74262: LD_INT 11
74264: PUSH
74265: LD_INT 12
74267: PUSH
74268: LD_INT 15
74270: PUSH
74271: LD_INT 16
74273: PUSH
74274: LD_INT 22
74276: PUSH
74277: LD_INT 23
74279: PUSH
74280: LD_INT 26
74282: PUSH
74283: LD_INT 36
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: PUSH
74300: LD_INT 101
74302: PUSH
74303: LD_INT 102
74305: PUSH
74306: LD_INT 105
74308: PUSH
74309: LD_INT 106
74311: PUSH
74312: LD_INT 108
74314: PUSH
74315: LD_INT 116
74317: PUSH
74318: LD_INT 117
74320: PUSH
74321: LD_INT 118
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: ST_TO_ADDR
74338: GO 77121
74340: LD_INT 5
74342: DOUBLE
74343: EQUAL
74344: IFTRUE 74348
74346: GO 74460
74348: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
74349: LD_ADDR_VAR 0 2
74353: PUSH
74354: LD_INT 2
74356: PUSH
74357: LD_INT 4
74359: PUSH
74360: LD_INT 5
74362: PUSH
74363: LD_INT 6
74365: PUSH
74366: LD_INT 8
74368: PUSH
74369: LD_INT 11
74371: PUSH
74372: LD_INT 12
74374: PUSH
74375: LD_INT 15
74377: PUSH
74378: LD_INT 16
74380: PUSH
74381: LD_INT 22
74383: PUSH
74384: LD_INT 23
74386: PUSH
74387: LD_INT 25
74389: PUSH
74390: LD_INT 26
74392: PUSH
74393: LD_INT 36
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 101
74414: PUSH
74415: LD_INT 102
74417: PUSH
74418: LD_INT 105
74420: PUSH
74421: LD_INT 106
74423: PUSH
74424: LD_INT 108
74426: PUSH
74427: LD_INT 109
74429: PUSH
74430: LD_INT 112
74432: PUSH
74433: LD_INT 116
74435: PUSH
74436: LD_INT 117
74438: PUSH
74439: LD_INT 118
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: ST_TO_ADDR
74458: GO 77121
74460: LD_INT 6
74462: DOUBLE
74463: EQUAL
74464: IFTRUE 74468
74466: GO 74600
74468: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
74469: LD_ADDR_VAR 0 2
74473: PUSH
74474: LD_INT 2
74476: PUSH
74477: LD_INT 4
74479: PUSH
74480: LD_INT 5
74482: PUSH
74483: LD_INT 6
74485: PUSH
74486: LD_INT 8
74488: PUSH
74489: LD_INT 11
74491: PUSH
74492: LD_INT 12
74494: PUSH
74495: LD_INT 15
74497: PUSH
74498: LD_INT 16
74500: PUSH
74501: LD_INT 20
74503: PUSH
74504: LD_INT 21
74506: PUSH
74507: LD_INT 22
74509: PUSH
74510: LD_INT 23
74512: PUSH
74513: LD_INT 25
74515: PUSH
74516: LD_INT 26
74518: PUSH
74519: LD_INT 30
74521: PUSH
74522: LD_INT 31
74524: PUSH
74525: LD_INT 32
74527: PUSH
74528: LD_INT 36
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 101
74554: PUSH
74555: LD_INT 102
74557: PUSH
74558: LD_INT 105
74560: PUSH
74561: LD_INT 106
74563: PUSH
74564: LD_INT 108
74566: PUSH
74567: LD_INT 109
74569: PUSH
74570: LD_INT 112
74572: PUSH
74573: LD_INT 116
74575: PUSH
74576: LD_INT 117
74578: PUSH
74579: LD_INT 118
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: LIST
74592: LIST
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: ST_TO_ADDR
74598: GO 77121
74600: LD_INT 7
74602: DOUBLE
74603: EQUAL
74604: IFTRUE 74608
74606: GO 74720
74608: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
74609: LD_ADDR_VAR 0 2
74613: PUSH
74614: LD_INT 2
74616: PUSH
74617: LD_INT 4
74619: PUSH
74620: LD_INT 5
74622: PUSH
74623: LD_INT 7
74625: PUSH
74626: LD_INT 11
74628: PUSH
74629: LD_INT 12
74631: PUSH
74632: LD_INT 15
74634: PUSH
74635: LD_INT 16
74637: PUSH
74638: LD_INT 20
74640: PUSH
74641: LD_INT 21
74643: PUSH
74644: LD_INT 22
74646: PUSH
74647: LD_INT 23
74649: PUSH
74650: LD_INT 25
74652: PUSH
74653: LD_INT 26
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 101
74674: PUSH
74675: LD_INT 102
74677: PUSH
74678: LD_INT 103
74680: PUSH
74681: LD_INT 105
74683: PUSH
74684: LD_INT 106
74686: PUSH
74687: LD_INT 108
74689: PUSH
74690: LD_INT 112
74692: PUSH
74693: LD_INT 116
74695: PUSH
74696: LD_INT 117
74698: PUSH
74699: LD_INT 118
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: ST_TO_ADDR
74718: GO 77121
74720: LD_INT 8
74722: DOUBLE
74723: EQUAL
74724: IFTRUE 74728
74726: GO 74868
74728: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
74729: LD_ADDR_VAR 0 2
74733: PUSH
74734: LD_INT 2
74736: PUSH
74737: LD_INT 4
74739: PUSH
74740: LD_INT 5
74742: PUSH
74743: LD_INT 6
74745: PUSH
74746: LD_INT 7
74748: PUSH
74749: LD_INT 8
74751: PUSH
74752: LD_INT 11
74754: PUSH
74755: LD_INT 12
74757: PUSH
74758: LD_INT 15
74760: PUSH
74761: LD_INT 16
74763: PUSH
74764: LD_INT 20
74766: PUSH
74767: LD_INT 21
74769: PUSH
74770: LD_INT 22
74772: PUSH
74773: LD_INT 23
74775: PUSH
74776: LD_INT 25
74778: PUSH
74779: LD_INT 26
74781: PUSH
74782: LD_INT 30
74784: PUSH
74785: LD_INT 31
74787: PUSH
74788: LD_INT 32
74790: PUSH
74791: LD_INT 36
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 101
74818: PUSH
74819: LD_INT 102
74821: PUSH
74822: LD_INT 103
74824: PUSH
74825: LD_INT 105
74827: PUSH
74828: LD_INT 106
74830: PUSH
74831: LD_INT 108
74833: PUSH
74834: LD_INT 109
74836: PUSH
74837: LD_INT 112
74839: PUSH
74840: LD_INT 116
74842: PUSH
74843: LD_INT 117
74845: PUSH
74846: LD_INT 118
74848: PUSH
74849: EMPTY
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: ST_TO_ADDR
74866: GO 77121
74868: LD_INT 9
74870: DOUBLE
74871: EQUAL
74872: IFTRUE 74876
74874: GO 75024
74876: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
74877: LD_ADDR_VAR 0 2
74881: PUSH
74882: LD_INT 2
74884: PUSH
74885: LD_INT 4
74887: PUSH
74888: LD_INT 5
74890: PUSH
74891: LD_INT 6
74893: PUSH
74894: LD_INT 7
74896: PUSH
74897: LD_INT 8
74899: PUSH
74900: LD_INT 11
74902: PUSH
74903: LD_INT 12
74905: PUSH
74906: LD_INT 15
74908: PUSH
74909: LD_INT 16
74911: PUSH
74912: LD_INT 20
74914: PUSH
74915: LD_INT 21
74917: PUSH
74918: LD_INT 22
74920: PUSH
74921: LD_INT 23
74923: PUSH
74924: LD_INT 25
74926: PUSH
74927: LD_INT 26
74929: PUSH
74930: LD_INT 28
74932: PUSH
74933: LD_INT 30
74935: PUSH
74936: LD_INT 31
74938: PUSH
74939: LD_INT 32
74941: PUSH
74942: LD_INT 36
74944: PUSH
74945: EMPTY
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: PUSH
74968: LD_INT 101
74970: PUSH
74971: LD_INT 102
74973: PUSH
74974: LD_INT 103
74976: PUSH
74977: LD_INT 105
74979: PUSH
74980: LD_INT 106
74982: PUSH
74983: LD_INT 108
74985: PUSH
74986: LD_INT 109
74988: PUSH
74989: LD_INT 112
74991: PUSH
74992: LD_INT 114
74994: PUSH
74995: LD_INT 116
74997: PUSH
74998: LD_INT 117
75000: PUSH
75001: LD_INT 118
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: LIST
75011: LIST
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: LIST
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: ST_TO_ADDR
75022: GO 77121
75024: LD_INT 10
75026: DOUBLE
75027: EQUAL
75028: IFTRUE 75032
75030: GO 75228
75032: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
75033: LD_ADDR_VAR 0 2
75037: PUSH
75038: LD_INT 2
75040: PUSH
75041: LD_INT 4
75043: PUSH
75044: LD_INT 5
75046: PUSH
75047: LD_INT 6
75049: PUSH
75050: LD_INT 7
75052: PUSH
75053: LD_INT 8
75055: PUSH
75056: LD_INT 9
75058: PUSH
75059: LD_INT 10
75061: PUSH
75062: LD_INT 11
75064: PUSH
75065: LD_INT 12
75067: PUSH
75068: LD_INT 13
75070: PUSH
75071: LD_INT 14
75073: PUSH
75074: LD_INT 15
75076: PUSH
75077: LD_INT 16
75079: PUSH
75080: LD_INT 17
75082: PUSH
75083: LD_INT 18
75085: PUSH
75086: LD_INT 19
75088: PUSH
75089: LD_INT 20
75091: PUSH
75092: LD_INT 21
75094: PUSH
75095: LD_INT 22
75097: PUSH
75098: LD_INT 23
75100: PUSH
75101: LD_INT 24
75103: PUSH
75104: LD_INT 25
75106: PUSH
75107: LD_INT 26
75109: PUSH
75110: LD_INT 28
75112: PUSH
75113: LD_INT 30
75115: PUSH
75116: LD_INT 31
75118: PUSH
75119: LD_INT 32
75121: PUSH
75122: LD_INT 36
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: LIST
75155: PUSH
75156: LD_INT 101
75158: PUSH
75159: LD_INT 102
75161: PUSH
75162: LD_INT 103
75164: PUSH
75165: LD_INT 104
75167: PUSH
75168: LD_INT 105
75170: PUSH
75171: LD_INT 106
75173: PUSH
75174: LD_INT 107
75176: PUSH
75177: LD_INT 108
75179: PUSH
75180: LD_INT 109
75182: PUSH
75183: LD_INT 110
75185: PUSH
75186: LD_INT 111
75188: PUSH
75189: LD_INT 112
75191: PUSH
75192: LD_INT 114
75194: PUSH
75195: LD_INT 116
75197: PUSH
75198: LD_INT 117
75200: PUSH
75201: LD_INT 118
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: LIST
75208: LIST
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: ST_TO_ADDR
75226: GO 77121
75228: LD_INT 11
75230: DOUBLE
75231: EQUAL
75232: IFTRUE 75236
75234: GO 75440
75236: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
75237: LD_ADDR_VAR 0 2
75241: PUSH
75242: LD_INT 2
75244: PUSH
75245: LD_INT 3
75247: PUSH
75248: LD_INT 4
75250: PUSH
75251: LD_INT 5
75253: PUSH
75254: LD_INT 6
75256: PUSH
75257: LD_INT 7
75259: PUSH
75260: LD_INT 8
75262: PUSH
75263: LD_INT 9
75265: PUSH
75266: LD_INT 10
75268: PUSH
75269: LD_INT 11
75271: PUSH
75272: LD_INT 12
75274: PUSH
75275: LD_INT 13
75277: PUSH
75278: LD_INT 14
75280: PUSH
75281: LD_INT 15
75283: PUSH
75284: LD_INT 16
75286: PUSH
75287: LD_INT 17
75289: PUSH
75290: LD_INT 18
75292: PUSH
75293: LD_INT 19
75295: PUSH
75296: LD_INT 20
75298: PUSH
75299: LD_INT 21
75301: PUSH
75302: LD_INT 22
75304: PUSH
75305: LD_INT 23
75307: PUSH
75308: LD_INT 24
75310: PUSH
75311: LD_INT 25
75313: PUSH
75314: LD_INT 26
75316: PUSH
75317: LD_INT 28
75319: PUSH
75320: LD_INT 30
75322: PUSH
75323: LD_INT 31
75325: PUSH
75326: LD_INT 32
75328: PUSH
75329: LD_INT 34
75331: PUSH
75332: LD_INT 36
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: LIST
75367: PUSH
75368: LD_INT 101
75370: PUSH
75371: LD_INT 102
75373: PUSH
75374: LD_INT 103
75376: PUSH
75377: LD_INT 104
75379: PUSH
75380: LD_INT 105
75382: PUSH
75383: LD_INT 106
75385: PUSH
75386: LD_INT 107
75388: PUSH
75389: LD_INT 108
75391: PUSH
75392: LD_INT 109
75394: PUSH
75395: LD_INT 110
75397: PUSH
75398: LD_INT 111
75400: PUSH
75401: LD_INT 112
75403: PUSH
75404: LD_INT 114
75406: PUSH
75407: LD_INT 116
75409: PUSH
75410: LD_INT 117
75412: PUSH
75413: LD_INT 118
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: LIST
75420: LIST
75421: LIST
75422: LIST
75423: LIST
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: LIST
75432: LIST
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: ST_TO_ADDR
75438: GO 77121
75440: LD_INT 12
75442: DOUBLE
75443: EQUAL
75444: IFTRUE 75448
75446: GO 75668
75448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
75449: LD_ADDR_VAR 0 2
75453: PUSH
75454: LD_INT 1
75456: PUSH
75457: LD_INT 2
75459: PUSH
75460: LD_INT 3
75462: PUSH
75463: LD_INT 4
75465: PUSH
75466: LD_INT 5
75468: PUSH
75469: LD_INT 6
75471: PUSH
75472: LD_INT 7
75474: PUSH
75475: LD_INT 8
75477: PUSH
75478: LD_INT 9
75480: PUSH
75481: LD_INT 10
75483: PUSH
75484: LD_INT 11
75486: PUSH
75487: LD_INT 12
75489: PUSH
75490: LD_INT 13
75492: PUSH
75493: LD_INT 14
75495: PUSH
75496: LD_INT 15
75498: PUSH
75499: LD_INT 16
75501: PUSH
75502: LD_INT 17
75504: PUSH
75505: LD_INT 18
75507: PUSH
75508: LD_INT 19
75510: PUSH
75511: LD_INT 20
75513: PUSH
75514: LD_INT 21
75516: PUSH
75517: LD_INT 22
75519: PUSH
75520: LD_INT 23
75522: PUSH
75523: LD_INT 24
75525: PUSH
75526: LD_INT 25
75528: PUSH
75529: LD_INT 26
75531: PUSH
75532: LD_INT 27
75534: PUSH
75535: LD_INT 28
75537: PUSH
75538: LD_INT 30
75540: PUSH
75541: LD_INT 31
75543: PUSH
75544: LD_INT 32
75546: PUSH
75547: LD_INT 33
75549: PUSH
75550: LD_INT 34
75552: PUSH
75553: LD_INT 36
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: LIST
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: LIST
75567: LIST
75568: LIST
75569: LIST
75570: LIST
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: LIST
75576: LIST
75577: LIST
75578: LIST
75579: LIST
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: LIST
75590: LIST
75591: PUSH
75592: LD_INT 101
75594: PUSH
75595: LD_INT 102
75597: PUSH
75598: LD_INT 103
75600: PUSH
75601: LD_INT 104
75603: PUSH
75604: LD_INT 105
75606: PUSH
75607: LD_INT 106
75609: PUSH
75610: LD_INT 107
75612: PUSH
75613: LD_INT 108
75615: PUSH
75616: LD_INT 109
75618: PUSH
75619: LD_INT 110
75621: PUSH
75622: LD_INT 111
75624: PUSH
75625: LD_INT 112
75627: PUSH
75628: LD_INT 113
75630: PUSH
75631: LD_INT 114
75633: PUSH
75634: LD_INT 116
75636: PUSH
75637: LD_INT 117
75639: PUSH
75640: LD_INT 118
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: ST_TO_ADDR
75666: GO 77121
75668: LD_INT 13
75670: DOUBLE
75671: EQUAL
75672: IFTRUE 75676
75674: GO 75884
75676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
75677: LD_ADDR_VAR 0 2
75681: PUSH
75682: LD_INT 1
75684: PUSH
75685: LD_INT 2
75687: PUSH
75688: LD_INT 3
75690: PUSH
75691: LD_INT 4
75693: PUSH
75694: LD_INT 5
75696: PUSH
75697: LD_INT 8
75699: PUSH
75700: LD_INT 9
75702: PUSH
75703: LD_INT 10
75705: PUSH
75706: LD_INT 11
75708: PUSH
75709: LD_INT 12
75711: PUSH
75712: LD_INT 14
75714: PUSH
75715: LD_INT 15
75717: PUSH
75718: LD_INT 16
75720: PUSH
75721: LD_INT 17
75723: PUSH
75724: LD_INT 18
75726: PUSH
75727: LD_INT 19
75729: PUSH
75730: LD_INT 20
75732: PUSH
75733: LD_INT 21
75735: PUSH
75736: LD_INT 22
75738: PUSH
75739: LD_INT 23
75741: PUSH
75742: LD_INT 24
75744: PUSH
75745: LD_INT 25
75747: PUSH
75748: LD_INT 26
75750: PUSH
75751: LD_INT 27
75753: PUSH
75754: LD_INT 28
75756: PUSH
75757: LD_INT 30
75759: PUSH
75760: LD_INT 31
75762: PUSH
75763: LD_INT 32
75765: PUSH
75766: LD_INT 33
75768: PUSH
75769: LD_INT 34
75771: PUSH
75772: LD_INT 36
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: LIST
75779: LIST
75780: LIST
75781: LIST
75782: LIST
75783: LIST
75784: LIST
75785: LIST
75786: LIST
75787: LIST
75788: LIST
75789: LIST
75790: LIST
75791: LIST
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 101
75810: PUSH
75811: LD_INT 102
75813: PUSH
75814: LD_INT 103
75816: PUSH
75817: LD_INT 104
75819: PUSH
75820: LD_INT 105
75822: PUSH
75823: LD_INT 106
75825: PUSH
75826: LD_INT 107
75828: PUSH
75829: LD_INT 108
75831: PUSH
75832: LD_INT 109
75834: PUSH
75835: LD_INT 110
75837: PUSH
75838: LD_INT 111
75840: PUSH
75841: LD_INT 112
75843: PUSH
75844: LD_INT 113
75846: PUSH
75847: LD_INT 114
75849: PUSH
75850: LD_INT 116
75852: PUSH
75853: LD_INT 117
75855: PUSH
75856: LD_INT 118
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: ST_TO_ADDR
75882: GO 77121
75884: LD_INT 14
75886: DOUBLE
75887: EQUAL
75888: IFTRUE 75892
75890: GO 76116
75892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
75893: LD_ADDR_VAR 0 2
75897: PUSH
75898: LD_INT 1
75900: PUSH
75901: LD_INT 2
75903: PUSH
75904: LD_INT 3
75906: PUSH
75907: LD_INT 4
75909: PUSH
75910: LD_INT 5
75912: PUSH
75913: LD_INT 6
75915: PUSH
75916: LD_INT 7
75918: PUSH
75919: LD_INT 8
75921: PUSH
75922: LD_INT 9
75924: PUSH
75925: LD_INT 10
75927: PUSH
75928: LD_INT 11
75930: PUSH
75931: LD_INT 12
75933: PUSH
75934: LD_INT 13
75936: PUSH
75937: LD_INT 14
75939: PUSH
75940: LD_INT 15
75942: PUSH
75943: LD_INT 16
75945: PUSH
75946: LD_INT 17
75948: PUSH
75949: LD_INT 18
75951: PUSH
75952: LD_INT 19
75954: PUSH
75955: LD_INT 20
75957: PUSH
75958: LD_INT 21
75960: PUSH
75961: LD_INT 22
75963: PUSH
75964: LD_INT 23
75966: PUSH
75967: LD_INT 24
75969: PUSH
75970: LD_INT 25
75972: PUSH
75973: LD_INT 26
75975: PUSH
75976: LD_INT 27
75978: PUSH
75979: LD_INT 28
75981: PUSH
75982: LD_INT 29
75984: PUSH
75985: LD_INT 30
75987: PUSH
75988: LD_INT 31
75990: PUSH
75991: LD_INT 32
75993: PUSH
75994: LD_INT 33
75996: PUSH
75997: LD_INT 34
75999: PUSH
76000: LD_INT 36
76002: PUSH
76003: EMPTY
76004: LIST
76005: LIST
76006: LIST
76007: LIST
76008: LIST
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: LIST
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: LIST
76026: LIST
76027: LIST
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 101
76042: PUSH
76043: LD_INT 102
76045: PUSH
76046: LD_INT 103
76048: PUSH
76049: LD_INT 104
76051: PUSH
76052: LD_INT 105
76054: PUSH
76055: LD_INT 106
76057: PUSH
76058: LD_INT 107
76060: PUSH
76061: LD_INT 108
76063: PUSH
76064: LD_INT 109
76066: PUSH
76067: LD_INT 110
76069: PUSH
76070: LD_INT 111
76072: PUSH
76073: LD_INT 112
76075: PUSH
76076: LD_INT 113
76078: PUSH
76079: LD_INT 114
76081: PUSH
76082: LD_INT 116
76084: PUSH
76085: LD_INT 117
76087: PUSH
76088: LD_INT 118
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: ST_TO_ADDR
76114: GO 77121
76116: LD_INT 15
76118: DOUBLE
76119: EQUAL
76120: IFTRUE 76124
76122: GO 76348
76124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
76125: LD_ADDR_VAR 0 2
76129: PUSH
76130: LD_INT 1
76132: PUSH
76133: LD_INT 2
76135: PUSH
76136: LD_INT 3
76138: PUSH
76139: LD_INT 4
76141: PUSH
76142: LD_INT 5
76144: PUSH
76145: LD_INT 6
76147: PUSH
76148: LD_INT 7
76150: PUSH
76151: LD_INT 8
76153: PUSH
76154: LD_INT 9
76156: PUSH
76157: LD_INT 10
76159: PUSH
76160: LD_INT 11
76162: PUSH
76163: LD_INT 12
76165: PUSH
76166: LD_INT 13
76168: PUSH
76169: LD_INT 14
76171: PUSH
76172: LD_INT 15
76174: PUSH
76175: LD_INT 16
76177: PUSH
76178: LD_INT 17
76180: PUSH
76181: LD_INT 18
76183: PUSH
76184: LD_INT 19
76186: PUSH
76187: LD_INT 20
76189: PUSH
76190: LD_INT 21
76192: PUSH
76193: LD_INT 22
76195: PUSH
76196: LD_INT 23
76198: PUSH
76199: LD_INT 24
76201: PUSH
76202: LD_INT 25
76204: PUSH
76205: LD_INT 26
76207: PUSH
76208: LD_INT 27
76210: PUSH
76211: LD_INT 28
76213: PUSH
76214: LD_INT 29
76216: PUSH
76217: LD_INT 30
76219: PUSH
76220: LD_INT 31
76222: PUSH
76223: LD_INT 32
76225: PUSH
76226: LD_INT 33
76228: PUSH
76229: LD_INT 34
76231: PUSH
76232: LD_INT 36
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: LIST
76250: LIST
76251: LIST
76252: LIST
76253: LIST
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: LIST
76267: LIST
76268: LIST
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 101
76274: PUSH
76275: LD_INT 102
76277: PUSH
76278: LD_INT 103
76280: PUSH
76281: LD_INT 104
76283: PUSH
76284: LD_INT 105
76286: PUSH
76287: LD_INT 106
76289: PUSH
76290: LD_INT 107
76292: PUSH
76293: LD_INT 108
76295: PUSH
76296: LD_INT 109
76298: PUSH
76299: LD_INT 110
76301: PUSH
76302: LD_INT 111
76304: PUSH
76305: LD_INT 112
76307: PUSH
76308: LD_INT 113
76310: PUSH
76311: LD_INT 114
76313: PUSH
76314: LD_INT 116
76316: PUSH
76317: LD_INT 117
76319: PUSH
76320: LD_INT 118
76322: PUSH
76323: EMPTY
76324: LIST
76325: LIST
76326: LIST
76327: LIST
76328: LIST
76329: LIST
76330: LIST
76331: LIST
76332: LIST
76333: LIST
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: ST_TO_ADDR
76346: GO 77121
76348: LD_INT 16
76350: DOUBLE
76351: EQUAL
76352: IFTRUE 76356
76354: GO 76492
76356: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
76357: LD_ADDR_VAR 0 2
76361: PUSH
76362: LD_INT 2
76364: PUSH
76365: LD_INT 4
76367: PUSH
76368: LD_INT 5
76370: PUSH
76371: LD_INT 7
76373: PUSH
76374: LD_INT 11
76376: PUSH
76377: LD_INT 12
76379: PUSH
76380: LD_INT 15
76382: PUSH
76383: LD_INT 16
76385: PUSH
76386: LD_INT 20
76388: PUSH
76389: LD_INT 21
76391: PUSH
76392: LD_INT 22
76394: PUSH
76395: LD_INT 23
76397: PUSH
76398: LD_INT 25
76400: PUSH
76401: LD_INT 26
76403: PUSH
76404: LD_INT 30
76406: PUSH
76407: LD_INT 31
76409: PUSH
76410: LD_INT 32
76412: PUSH
76413: LD_INT 33
76415: PUSH
76416: LD_INT 34
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: PUSH
76440: LD_INT 101
76442: PUSH
76443: LD_INT 102
76445: PUSH
76446: LD_INT 103
76448: PUSH
76449: LD_INT 106
76451: PUSH
76452: LD_INT 108
76454: PUSH
76455: LD_INT 112
76457: PUSH
76458: LD_INT 113
76460: PUSH
76461: LD_INT 114
76463: PUSH
76464: LD_INT 116
76466: PUSH
76467: LD_INT 117
76469: PUSH
76470: LD_INT 118
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: LIST
76483: LIST
76484: LIST
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: ST_TO_ADDR
76490: GO 77121
76492: LD_INT 17
76494: DOUBLE
76495: EQUAL
76496: IFTRUE 76500
76498: GO 76724
76500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
76501: LD_ADDR_VAR 0 2
76505: PUSH
76506: LD_INT 1
76508: PUSH
76509: LD_INT 2
76511: PUSH
76512: LD_INT 3
76514: PUSH
76515: LD_INT 4
76517: PUSH
76518: LD_INT 5
76520: PUSH
76521: LD_INT 6
76523: PUSH
76524: LD_INT 7
76526: PUSH
76527: LD_INT 8
76529: PUSH
76530: LD_INT 9
76532: PUSH
76533: LD_INT 10
76535: PUSH
76536: LD_INT 11
76538: PUSH
76539: LD_INT 12
76541: PUSH
76542: LD_INT 13
76544: PUSH
76545: LD_INT 14
76547: PUSH
76548: LD_INT 15
76550: PUSH
76551: LD_INT 16
76553: PUSH
76554: LD_INT 17
76556: PUSH
76557: LD_INT 18
76559: PUSH
76560: LD_INT 19
76562: PUSH
76563: LD_INT 20
76565: PUSH
76566: LD_INT 21
76568: PUSH
76569: LD_INT 22
76571: PUSH
76572: LD_INT 23
76574: PUSH
76575: LD_INT 24
76577: PUSH
76578: LD_INT 25
76580: PUSH
76581: LD_INT 26
76583: PUSH
76584: LD_INT 27
76586: PUSH
76587: LD_INT 28
76589: PUSH
76590: LD_INT 29
76592: PUSH
76593: LD_INT 30
76595: PUSH
76596: LD_INT 31
76598: PUSH
76599: LD_INT 32
76601: PUSH
76602: LD_INT 33
76604: PUSH
76605: LD_INT 34
76607: PUSH
76608: LD_INT 36
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: LIST
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: LIST
76623: LIST
76624: LIST
76625: LIST
76626: LIST
76627: LIST
76628: LIST
76629: LIST
76630: LIST
76631: LIST
76632: LIST
76633: LIST
76634: LIST
76635: LIST
76636: LIST
76637: LIST
76638: LIST
76639: LIST
76640: LIST
76641: LIST
76642: LIST
76643: LIST
76644: LIST
76645: LIST
76646: LIST
76647: PUSH
76648: LD_INT 101
76650: PUSH
76651: LD_INT 102
76653: PUSH
76654: LD_INT 103
76656: PUSH
76657: LD_INT 104
76659: PUSH
76660: LD_INT 105
76662: PUSH
76663: LD_INT 106
76665: PUSH
76666: LD_INT 107
76668: PUSH
76669: LD_INT 108
76671: PUSH
76672: LD_INT 109
76674: PUSH
76675: LD_INT 110
76677: PUSH
76678: LD_INT 111
76680: PUSH
76681: LD_INT 112
76683: PUSH
76684: LD_INT 113
76686: PUSH
76687: LD_INT 114
76689: PUSH
76690: LD_INT 116
76692: PUSH
76693: LD_INT 117
76695: PUSH
76696: LD_INT 118
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: ST_TO_ADDR
76722: GO 77121
76724: LD_INT 18
76726: DOUBLE
76727: EQUAL
76728: IFTRUE 76732
76730: GO 76880
76732: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
76733: LD_ADDR_VAR 0 2
76737: PUSH
76738: LD_INT 2
76740: PUSH
76741: LD_INT 4
76743: PUSH
76744: LD_INT 5
76746: PUSH
76747: LD_INT 7
76749: PUSH
76750: LD_INT 11
76752: PUSH
76753: LD_INT 12
76755: PUSH
76756: LD_INT 15
76758: PUSH
76759: LD_INT 16
76761: PUSH
76762: LD_INT 20
76764: PUSH
76765: LD_INT 21
76767: PUSH
76768: LD_INT 22
76770: PUSH
76771: LD_INT 23
76773: PUSH
76774: LD_INT 25
76776: PUSH
76777: LD_INT 26
76779: PUSH
76780: LD_INT 30
76782: PUSH
76783: LD_INT 31
76785: PUSH
76786: LD_INT 32
76788: PUSH
76789: LD_INT 33
76791: PUSH
76792: LD_INT 34
76794: PUSH
76795: LD_INT 35
76797: PUSH
76798: LD_INT 36
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: LIST
76805: LIST
76806: LIST
76807: LIST
76808: LIST
76809: LIST
76810: LIST
76811: LIST
76812: LIST
76813: LIST
76814: LIST
76815: LIST
76816: LIST
76817: LIST
76818: LIST
76819: LIST
76820: LIST
76821: LIST
76822: LIST
76823: PUSH
76824: LD_INT 101
76826: PUSH
76827: LD_INT 102
76829: PUSH
76830: LD_INT 103
76832: PUSH
76833: LD_INT 106
76835: PUSH
76836: LD_INT 108
76838: PUSH
76839: LD_INT 112
76841: PUSH
76842: LD_INT 113
76844: PUSH
76845: LD_INT 114
76847: PUSH
76848: LD_INT 115
76850: PUSH
76851: LD_INT 116
76853: PUSH
76854: LD_INT 117
76856: PUSH
76857: LD_INT 118
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: LIST
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: ST_TO_ADDR
76878: GO 77121
76880: LD_INT 19
76882: DOUBLE
76883: EQUAL
76884: IFTRUE 76888
76886: GO 77120
76888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
76889: LD_ADDR_VAR 0 2
76893: PUSH
76894: LD_INT 1
76896: PUSH
76897: LD_INT 2
76899: PUSH
76900: LD_INT 3
76902: PUSH
76903: LD_INT 4
76905: PUSH
76906: LD_INT 5
76908: PUSH
76909: LD_INT 6
76911: PUSH
76912: LD_INT 7
76914: PUSH
76915: LD_INT 8
76917: PUSH
76918: LD_INT 9
76920: PUSH
76921: LD_INT 10
76923: PUSH
76924: LD_INT 11
76926: PUSH
76927: LD_INT 12
76929: PUSH
76930: LD_INT 13
76932: PUSH
76933: LD_INT 14
76935: PUSH
76936: LD_INT 15
76938: PUSH
76939: LD_INT 16
76941: PUSH
76942: LD_INT 17
76944: PUSH
76945: LD_INT 18
76947: PUSH
76948: LD_INT 19
76950: PUSH
76951: LD_INT 20
76953: PUSH
76954: LD_INT 21
76956: PUSH
76957: LD_INT 22
76959: PUSH
76960: LD_INT 23
76962: PUSH
76963: LD_INT 24
76965: PUSH
76966: LD_INT 25
76968: PUSH
76969: LD_INT 26
76971: PUSH
76972: LD_INT 27
76974: PUSH
76975: LD_INT 28
76977: PUSH
76978: LD_INT 29
76980: PUSH
76981: LD_INT 30
76983: PUSH
76984: LD_INT 31
76986: PUSH
76987: LD_INT 32
76989: PUSH
76990: LD_INT 33
76992: PUSH
76993: LD_INT 34
76995: PUSH
76996: LD_INT 35
76998: PUSH
76999: LD_INT 36
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: LIST
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: PUSH
77040: LD_INT 101
77042: PUSH
77043: LD_INT 102
77045: PUSH
77046: LD_INT 103
77048: PUSH
77049: LD_INT 104
77051: PUSH
77052: LD_INT 105
77054: PUSH
77055: LD_INT 106
77057: PUSH
77058: LD_INT 107
77060: PUSH
77061: LD_INT 108
77063: PUSH
77064: LD_INT 109
77066: PUSH
77067: LD_INT 110
77069: PUSH
77070: LD_INT 111
77072: PUSH
77073: LD_INT 112
77075: PUSH
77076: LD_INT 113
77078: PUSH
77079: LD_INT 114
77081: PUSH
77082: LD_INT 115
77084: PUSH
77085: LD_INT 116
77087: PUSH
77088: LD_INT 117
77090: PUSH
77091: LD_INT 118
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: LIST
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: ST_TO_ADDR
77118: GO 77121
77120: POP
// end else
77121: GO 77352
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
77123: LD_ADDR_VAR 0 2
77127: PUSH
77128: LD_INT 1
77130: PUSH
77131: LD_INT 2
77133: PUSH
77134: LD_INT 3
77136: PUSH
77137: LD_INT 4
77139: PUSH
77140: LD_INT 5
77142: PUSH
77143: LD_INT 6
77145: PUSH
77146: LD_INT 7
77148: PUSH
77149: LD_INT 8
77151: PUSH
77152: LD_INT 9
77154: PUSH
77155: LD_INT 10
77157: PUSH
77158: LD_INT 11
77160: PUSH
77161: LD_INT 12
77163: PUSH
77164: LD_INT 13
77166: PUSH
77167: LD_INT 14
77169: PUSH
77170: LD_INT 15
77172: PUSH
77173: LD_INT 16
77175: PUSH
77176: LD_INT 17
77178: PUSH
77179: LD_INT 18
77181: PUSH
77182: LD_INT 19
77184: PUSH
77185: LD_INT 20
77187: PUSH
77188: LD_INT 21
77190: PUSH
77191: LD_INT 22
77193: PUSH
77194: LD_INT 23
77196: PUSH
77197: LD_INT 24
77199: PUSH
77200: LD_INT 25
77202: PUSH
77203: LD_INT 26
77205: PUSH
77206: LD_INT 27
77208: PUSH
77209: LD_INT 28
77211: PUSH
77212: LD_INT 29
77214: PUSH
77215: LD_INT 30
77217: PUSH
77218: LD_INT 31
77220: PUSH
77221: LD_INT 32
77223: PUSH
77224: LD_INT 33
77226: PUSH
77227: LD_INT 34
77229: PUSH
77230: LD_INT 35
77232: PUSH
77233: LD_INT 36
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: LIST
77243: LIST
77244: LIST
77245: LIST
77246: LIST
77247: LIST
77248: LIST
77249: LIST
77250: LIST
77251: LIST
77252: LIST
77253: LIST
77254: LIST
77255: LIST
77256: LIST
77257: LIST
77258: LIST
77259: LIST
77260: LIST
77261: LIST
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 101
77276: PUSH
77277: LD_INT 102
77279: PUSH
77280: LD_INT 103
77282: PUSH
77283: LD_INT 104
77285: PUSH
77286: LD_INT 105
77288: PUSH
77289: LD_INT 106
77291: PUSH
77292: LD_INT 107
77294: PUSH
77295: LD_INT 108
77297: PUSH
77298: LD_INT 109
77300: PUSH
77301: LD_INT 110
77303: PUSH
77304: LD_INT 111
77306: PUSH
77307: LD_INT 112
77309: PUSH
77310: LD_INT 113
77312: PUSH
77313: LD_INT 114
77315: PUSH
77316: LD_INT 115
77318: PUSH
77319: LD_INT 116
77321: PUSH
77322: LD_INT 117
77324: PUSH
77325: LD_INT 118
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: LIST
77346: LIST
77347: PUSH
77348: EMPTY
77349: LIST
77350: LIST
77351: ST_TO_ADDR
// if result then
77352: LD_VAR 0 2
77356: IFFALSE 78142
// begin normal :=  ;
77358: LD_ADDR_VAR 0 5
77362: PUSH
77363: LD_STRING 
77365: ST_TO_ADDR
// hardcore :=  ;
77366: LD_ADDR_VAR 0 6
77370: PUSH
77371: LD_STRING 
77373: ST_TO_ADDR
// active :=  ;
77374: LD_ADDR_VAR 0 7
77378: PUSH
77379: LD_STRING 
77381: ST_TO_ADDR
// for i = 1 to normalCounter do
77382: LD_ADDR_VAR 0 8
77386: PUSH
77387: DOUBLE
77388: LD_INT 1
77390: DEC
77391: ST_TO_ADDR
77392: LD_EXP 76
77396: PUSH
77397: FOR_TO
77398: IFFALSE 77499
// begin tmp := 0 ;
77400: LD_ADDR_VAR 0 3
77404: PUSH
77405: LD_STRING 0
77407: ST_TO_ADDR
// if result [ 1 ] then
77408: LD_VAR 0 2
77412: PUSH
77413: LD_INT 1
77415: ARRAY
77416: IFFALSE 77481
// if result [ 1 ] [ 1 ] = i then
77418: LD_VAR 0 2
77422: PUSH
77423: LD_INT 1
77425: ARRAY
77426: PUSH
77427: LD_INT 1
77429: ARRAY
77430: PUSH
77431: LD_VAR 0 8
77435: EQUAL
77436: IFFALSE 77481
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
77438: LD_ADDR_VAR 0 2
77442: PUSH
77443: LD_VAR 0 2
77447: PPUSH
77448: LD_INT 1
77450: PPUSH
77451: LD_VAR 0 2
77455: PUSH
77456: LD_INT 1
77458: ARRAY
77459: PPUSH
77460: LD_INT 1
77462: PPUSH
77463: CALL_OW 3
77467: PPUSH
77468: CALL_OW 1
77472: ST_TO_ADDR
// tmp := 1 ;
77473: LD_ADDR_VAR 0 3
77477: PUSH
77478: LD_STRING 1
77480: ST_TO_ADDR
// end ; normal := normal & tmp ;
77481: LD_ADDR_VAR 0 5
77485: PUSH
77486: LD_VAR 0 5
77490: PUSH
77491: LD_VAR 0 3
77495: STR
77496: ST_TO_ADDR
// end ;
77497: GO 77397
77499: POP
77500: POP
// for i = 1 to hardcoreCounter do
77501: LD_ADDR_VAR 0 8
77505: PUSH
77506: DOUBLE
77507: LD_INT 1
77509: DEC
77510: ST_TO_ADDR
77511: LD_EXP 77
77515: PUSH
77516: FOR_TO
77517: IFFALSE 77622
// begin tmp := 0 ;
77519: LD_ADDR_VAR 0 3
77523: PUSH
77524: LD_STRING 0
77526: ST_TO_ADDR
// if result [ 2 ] then
77527: LD_VAR 0 2
77531: PUSH
77532: LD_INT 2
77534: ARRAY
77535: IFFALSE 77604
// if result [ 2 ] [ 1 ] = 100 + i then
77537: LD_VAR 0 2
77541: PUSH
77542: LD_INT 2
77544: ARRAY
77545: PUSH
77546: LD_INT 1
77548: ARRAY
77549: PUSH
77550: LD_INT 100
77552: PUSH
77553: LD_VAR 0 8
77557: PLUS
77558: EQUAL
77559: IFFALSE 77604
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
77561: LD_ADDR_VAR 0 2
77565: PUSH
77566: LD_VAR 0 2
77570: PPUSH
77571: LD_INT 2
77573: PPUSH
77574: LD_VAR 0 2
77578: PUSH
77579: LD_INT 2
77581: ARRAY
77582: PPUSH
77583: LD_INT 1
77585: PPUSH
77586: CALL_OW 3
77590: PPUSH
77591: CALL_OW 1
77595: ST_TO_ADDR
// tmp := 1 ;
77596: LD_ADDR_VAR 0 3
77600: PUSH
77601: LD_STRING 1
77603: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
77604: LD_ADDR_VAR 0 6
77608: PUSH
77609: LD_VAR 0 6
77613: PUSH
77614: LD_VAR 0 3
77618: STR
77619: ST_TO_ADDR
// end ;
77620: GO 77516
77622: POP
77623: POP
// if isGameLoad then
77624: LD_VAR 0 1
77628: IFFALSE 78103
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
77630: LD_ADDR_VAR 0 4
77634: PUSH
77635: LD_EXP 80
77639: PUSH
77640: LD_EXP 79
77644: PUSH
77645: LD_EXP 81
77649: PUSH
77650: LD_EXP 78
77654: PUSH
77655: LD_EXP 82
77659: PUSH
77660: LD_EXP 83
77664: PUSH
77665: LD_EXP 84
77669: PUSH
77670: LD_EXP 85
77674: PUSH
77675: LD_EXP 86
77679: PUSH
77680: LD_EXP 87
77684: PUSH
77685: LD_EXP 88
77689: PUSH
77690: LD_EXP 89
77694: PUSH
77695: LD_EXP 90
77699: PUSH
77700: LD_EXP 91
77704: PUSH
77705: LD_EXP 99
77709: PUSH
77710: LD_EXP 100
77714: PUSH
77715: LD_EXP 101
77719: PUSH
77720: LD_EXP 102
77724: PUSH
77725: LD_EXP 104
77729: PUSH
77730: LD_EXP 105
77734: PUSH
77735: LD_EXP 106
77739: PUSH
77740: LD_EXP 109
77744: PUSH
77745: LD_EXP 111
77749: PUSH
77750: LD_EXP 112
77754: PUSH
77755: LD_EXP 113
77759: PUSH
77760: LD_EXP 115
77764: PUSH
77765: LD_EXP 116
77769: PUSH
77770: LD_EXP 119
77774: PUSH
77775: LD_EXP 120
77779: PUSH
77780: LD_EXP 121
77784: PUSH
77785: LD_EXP 122
77789: PUSH
77790: LD_EXP 123
77794: PUSH
77795: LD_EXP 124
77799: PUSH
77800: LD_EXP 125
77804: PUSH
77805: LD_EXP 126
77809: PUSH
77810: LD_EXP 127
77814: PUSH
77815: LD_EXP 92
77819: PUSH
77820: LD_EXP 93
77824: PUSH
77825: LD_EXP 96
77829: PUSH
77830: LD_EXP 97
77834: PUSH
77835: LD_EXP 98
77839: PUSH
77840: LD_EXP 94
77844: PUSH
77845: LD_EXP 95
77849: PUSH
77850: LD_EXP 103
77854: PUSH
77855: LD_EXP 107
77859: PUSH
77860: LD_EXP 108
77864: PUSH
77865: LD_EXP 110
77869: PUSH
77870: LD_EXP 114
77874: PUSH
77875: LD_EXP 117
77879: PUSH
77880: LD_EXP 118
77884: PUSH
77885: LD_EXP 128
77889: PUSH
77890: LD_EXP 129
77894: PUSH
77895: LD_EXP 130
77899: PUSH
77900: LD_EXP 131
77904: PUSH
77905: EMPTY
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: LIST
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: LIST
77918: LIST
77919: LIST
77920: LIST
77921: LIST
77922: LIST
77923: LIST
77924: LIST
77925: LIST
77926: LIST
77927: LIST
77928: LIST
77929: LIST
77930: LIST
77931: LIST
77932: LIST
77933: LIST
77934: LIST
77935: LIST
77936: LIST
77937: LIST
77938: LIST
77939: LIST
77940: LIST
77941: LIST
77942: LIST
77943: LIST
77944: LIST
77945: LIST
77946: LIST
77947: LIST
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: LIST
77957: LIST
77958: LIST
77959: LIST
77960: ST_TO_ADDR
// tmp :=  ;
77961: LD_ADDR_VAR 0 3
77965: PUSH
77966: LD_STRING 
77968: ST_TO_ADDR
// for i = 1 to normalCounter do
77969: LD_ADDR_VAR 0 8
77973: PUSH
77974: DOUBLE
77975: LD_INT 1
77977: DEC
77978: ST_TO_ADDR
77979: LD_EXP 76
77983: PUSH
77984: FOR_TO
77985: IFFALSE 78021
// begin if flags [ i ] then
77987: LD_VAR 0 4
77991: PUSH
77992: LD_VAR 0 8
77996: ARRAY
77997: IFFALSE 78019
// tmp := tmp & i & ; ;
77999: LD_ADDR_VAR 0 3
78003: PUSH
78004: LD_VAR 0 3
78008: PUSH
78009: LD_VAR 0 8
78013: STR
78014: PUSH
78015: LD_STRING ;
78017: STR
78018: ST_TO_ADDR
// end ;
78019: GO 77984
78021: POP
78022: POP
// for i = 1 to hardcoreCounter do
78023: LD_ADDR_VAR 0 8
78027: PUSH
78028: DOUBLE
78029: LD_INT 1
78031: DEC
78032: ST_TO_ADDR
78033: LD_EXP 77
78037: PUSH
78038: FOR_TO
78039: IFFALSE 78085
// begin if flags [ normalCounter + i ] then
78041: LD_VAR 0 4
78045: PUSH
78046: LD_EXP 76
78050: PUSH
78051: LD_VAR 0 8
78055: PLUS
78056: ARRAY
78057: IFFALSE 78083
// tmp := tmp & ( 100 + i ) & ; ;
78059: LD_ADDR_VAR 0 3
78063: PUSH
78064: LD_VAR 0 3
78068: PUSH
78069: LD_INT 100
78071: PUSH
78072: LD_VAR 0 8
78076: PLUS
78077: STR
78078: PUSH
78079: LD_STRING ;
78081: STR
78082: ST_TO_ADDR
// end ;
78083: GO 78038
78085: POP
78086: POP
// if tmp then
78087: LD_VAR 0 3
78091: IFFALSE 78103
// active := tmp ;
78093: LD_ADDR_VAR 0 7
78097: PUSH
78098: LD_VAR 0 3
78102: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
78103: LD_STRING getStreamItemsFromMission("
78105: PUSH
78106: LD_VAR 0 5
78110: STR
78111: PUSH
78112: LD_STRING ","
78114: STR
78115: PUSH
78116: LD_VAR 0 6
78120: STR
78121: PUSH
78122: LD_STRING ","
78124: STR
78125: PUSH
78126: LD_VAR 0 7
78130: STR
78131: PUSH
78132: LD_STRING ")
78134: STR
78135: PPUSH
78136: CALL_OW 559
// end else
78140: GO 78149
// ToLua ( getStreamItemsFromMission("","","") ) ;
78142: LD_STRING getStreamItemsFromMission("","","")
78144: PPUSH
78145: CALL_OW 559
// end ;
78149: LD_VAR 0 2
78153: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
78154: LD_EXP 75
78158: PUSH
78159: LD_EXP 80
78163: AND
78164: IFFALSE 78288
78166: GO 78168
78168: DISABLE
78169: LD_INT 0
78171: PPUSH
78172: PPUSH
// begin enable ;
78173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
78174: LD_ADDR_VAR 0 2
78178: PUSH
78179: LD_INT 22
78181: PUSH
78182: LD_OWVAR 2
78186: PUSH
78187: EMPTY
78188: LIST
78189: LIST
78190: PUSH
78191: LD_INT 2
78193: PUSH
78194: LD_INT 34
78196: PUSH
78197: LD_INT 7
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: PUSH
78204: LD_INT 34
78206: PUSH
78207: LD_INT 45
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: PUSH
78214: LD_INT 34
78216: PUSH
78217: LD_INT 28
78219: PUSH
78220: EMPTY
78221: LIST
78222: LIST
78223: PUSH
78224: LD_INT 34
78226: PUSH
78227: LD_INT 47
78229: PUSH
78230: EMPTY
78231: LIST
78232: LIST
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: LIST
78238: LIST
78239: LIST
78240: PUSH
78241: EMPTY
78242: LIST
78243: LIST
78244: PPUSH
78245: CALL_OW 69
78249: ST_TO_ADDR
// if not tmp then
78250: LD_VAR 0 2
78254: NOT
78255: IFFALSE 78259
// exit ;
78257: GO 78288
// for i in tmp do
78259: LD_ADDR_VAR 0 1
78263: PUSH
78264: LD_VAR 0 2
78268: PUSH
78269: FOR_IN
78270: IFFALSE 78286
// begin SetLives ( i , 0 ) ;
78272: LD_VAR 0 1
78276: PPUSH
78277: LD_INT 0
78279: PPUSH
78280: CALL_OW 234
// end ;
78284: GO 78269
78286: POP
78287: POP
// end ;
78288: PPOPN 2
78290: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
78291: LD_EXP 75
78295: PUSH
78296: LD_EXP 81
78300: AND
78301: IFFALSE 78385
78303: GO 78305
78305: DISABLE
78306: LD_INT 0
78308: PPUSH
78309: PPUSH
// begin enable ;
78310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
78311: LD_ADDR_VAR 0 2
78315: PUSH
78316: LD_INT 22
78318: PUSH
78319: LD_OWVAR 2
78323: PUSH
78324: EMPTY
78325: LIST
78326: LIST
78327: PUSH
78328: LD_INT 32
78330: PUSH
78331: LD_INT 3
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PPUSH
78342: CALL_OW 69
78346: ST_TO_ADDR
// if not tmp then
78347: LD_VAR 0 2
78351: NOT
78352: IFFALSE 78356
// exit ;
78354: GO 78385
// for i in tmp do
78356: LD_ADDR_VAR 0 1
78360: PUSH
78361: LD_VAR 0 2
78365: PUSH
78366: FOR_IN
78367: IFFALSE 78383
// begin SetLives ( i , 0 ) ;
78369: LD_VAR 0 1
78373: PPUSH
78374: LD_INT 0
78376: PPUSH
78377: CALL_OW 234
// end ;
78381: GO 78366
78383: POP
78384: POP
// end ;
78385: PPOPN 2
78387: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
78388: LD_EXP 75
78392: PUSH
78393: LD_EXP 78
78397: AND
78398: IFFALSE 78491
78400: GO 78402
78402: DISABLE
78403: LD_INT 0
78405: PPUSH
// begin enable ;
78406: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
78407: LD_ADDR_VAR 0 1
78411: PUSH
78412: LD_INT 22
78414: PUSH
78415: LD_OWVAR 2
78419: PUSH
78420: EMPTY
78421: LIST
78422: LIST
78423: PUSH
78424: LD_INT 2
78426: PUSH
78427: LD_INT 25
78429: PUSH
78430: LD_INT 5
78432: PUSH
78433: EMPTY
78434: LIST
78435: LIST
78436: PUSH
78437: LD_INT 25
78439: PUSH
78440: LD_INT 9
78442: PUSH
78443: EMPTY
78444: LIST
78445: LIST
78446: PUSH
78447: LD_INT 25
78449: PUSH
78450: LD_INT 8
78452: PUSH
78453: EMPTY
78454: LIST
78455: LIST
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: LIST
78461: LIST
78462: PUSH
78463: EMPTY
78464: LIST
78465: LIST
78466: PPUSH
78467: CALL_OW 69
78471: PUSH
78472: FOR_IN
78473: IFFALSE 78489
// begin SetClass ( i , 1 ) ;
78475: LD_VAR 0 1
78479: PPUSH
78480: LD_INT 1
78482: PPUSH
78483: CALL_OW 336
// end ;
78487: GO 78472
78489: POP
78490: POP
// end ;
78491: PPOPN 1
78493: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
78494: LD_EXP 75
78498: PUSH
78499: LD_EXP 79
78503: AND
78504: PUSH
78505: LD_OWVAR 65
78509: PUSH
78510: LD_INT 7
78512: LESS
78513: AND
78514: IFFALSE 78528
78516: GO 78518
78518: DISABLE
// begin enable ;
78519: ENABLE
// game_speed := 7 ;
78520: LD_ADDR_OWVAR 65
78524: PUSH
78525: LD_INT 7
78527: ST_TO_ADDR
// end ;
78528: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
78529: LD_EXP 75
78533: PUSH
78534: LD_EXP 82
78538: AND
78539: IFFALSE 78741
78541: GO 78543
78543: DISABLE
78544: LD_INT 0
78546: PPUSH
78547: PPUSH
78548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78549: LD_ADDR_VAR 0 3
78553: PUSH
78554: LD_INT 81
78556: PUSH
78557: LD_OWVAR 2
78561: PUSH
78562: EMPTY
78563: LIST
78564: LIST
78565: PUSH
78566: LD_INT 21
78568: PUSH
78569: LD_INT 1
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PPUSH
78580: CALL_OW 69
78584: ST_TO_ADDR
// if not tmp then
78585: LD_VAR 0 3
78589: NOT
78590: IFFALSE 78594
// exit ;
78592: GO 78741
// if tmp > 5 then
78594: LD_VAR 0 3
78598: PUSH
78599: LD_INT 5
78601: GREATER
78602: IFFALSE 78614
// k := 5 else
78604: LD_ADDR_VAR 0 2
78608: PUSH
78609: LD_INT 5
78611: ST_TO_ADDR
78612: GO 78624
// k := tmp ;
78614: LD_ADDR_VAR 0 2
78618: PUSH
78619: LD_VAR 0 3
78623: ST_TO_ADDR
// for i := 1 to k do
78624: LD_ADDR_VAR 0 1
78628: PUSH
78629: DOUBLE
78630: LD_INT 1
78632: DEC
78633: ST_TO_ADDR
78634: LD_VAR 0 2
78638: PUSH
78639: FOR_TO
78640: IFFALSE 78739
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
78642: LD_VAR 0 3
78646: PUSH
78647: LD_VAR 0 1
78651: ARRAY
78652: PPUSH
78653: LD_VAR 0 1
78657: PUSH
78658: LD_INT 4
78660: MOD
78661: PUSH
78662: LD_INT 1
78664: PLUS
78665: PPUSH
78666: CALL_OW 259
78670: PUSH
78671: LD_INT 10
78673: LESS
78674: IFFALSE 78737
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
78676: LD_VAR 0 3
78680: PUSH
78681: LD_VAR 0 1
78685: ARRAY
78686: PPUSH
78687: LD_VAR 0 1
78691: PUSH
78692: LD_INT 4
78694: MOD
78695: PUSH
78696: LD_INT 1
78698: PLUS
78699: PPUSH
78700: LD_VAR 0 3
78704: PUSH
78705: LD_VAR 0 1
78709: ARRAY
78710: PPUSH
78711: LD_VAR 0 1
78715: PUSH
78716: LD_INT 4
78718: MOD
78719: PUSH
78720: LD_INT 1
78722: PLUS
78723: PPUSH
78724: CALL_OW 259
78728: PUSH
78729: LD_INT 1
78731: PLUS
78732: PPUSH
78733: CALL_OW 237
78737: GO 78639
78739: POP
78740: POP
// end ;
78741: PPOPN 3
78743: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
78744: LD_EXP 75
78748: PUSH
78749: LD_EXP 83
78753: AND
78754: IFFALSE 78774
78756: GO 78758
78758: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
78759: LD_INT 4
78761: PPUSH
78762: LD_OWVAR 2
78766: PPUSH
78767: LD_INT 0
78769: PPUSH
78770: CALL_OW 324
78774: END
// every 0 0$1 trigger StreamModeActive and sShovel do
78775: LD_EXP 75
78779: PUSH
78780: LD_EXP 112
78784: AND
78785: IFFALSE 78805
78787: GO 78789
78789: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
78790: LD_INT 19
78792: PPUSH
78793: LD_OWVAR 2
78797: PPUSH
78798: LD_INT 0
78800: PPUSH
78801: CALL_OW 324
78805: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
78806: LD_EXP 75
78810: PUSH
78811: LD_EXP 84
78815: AND
78816: IFFALSE 78918
78818: GO 78820
78820: DISABLE
78821: LD_INT 0
78823: PPUSH
78824: PPUSH
// begin enable ;
78825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
78826: LD_ADDR_VAR 0 2
78830: PUSH
78831: LD_INT 22
78833: PUSH
78834: LD_OWVAR 2
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PUSH
78843: LD_INT 2
78845: PUSH
78846: LD_INT 34
78848: PUSH
78849: LD_INT 11
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: LD_INT 34
78858: PUSH
78859: LD_INT 30
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: LIST
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: PPUSH
78875: CALL_OW 69
78879: ST_TO_ADDR
// if not tmp then
78880: LD_VAR 0 2
78884: NOT
78885: IFFALSE 78889
// exit ;
78887: GO 78918
// for i in tmp do
78889: LD_ADDR_VAR 0 1
78893: PUSH
78894: LD_VAR 0 2
78898: PUSH
78899: FOR_IN
78900: IFFALSE 78916
// begin SetLives ( i , 0 ) ;
78902: LD_VAR 0 1
78906: PPUSH
78907: LD_INT 0
78909: PPUSH
78910: CALL_OW 234
// end ;
78914: GO 78899
78916: POP
78917: POP
// end ;
78918: PPOPN 2
78920: END
// every 0 0$1 trigger StreamModeActive and sBunker do
78921: LD_EXP 75
78925: PUSH
78926: LD_EXP 85
78930: AND
78931: IFFALSE 78951
78933: GO 78935
78935: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
78936: LD_INT 32
78938: PPUSH
78939: LD_OWVAR 2
78943: PPUSH
78944: LD_INT 0
78946: PPUSH
78947: CALL_OW 324
78951: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
78952: LD_EXP 75
78956: PUSH
78957: LD_EXP 86
78961: AND
78962: IFFALSE 79143
78964: GO 78966
78966: DISABLE
78967: LD_INT 0
78969: PPUSH
78970: PPUSH
78971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
78972: LD_ADDR_VAR 0 2
78976: PUSH
78977: LD_INT 22
78979: PUSH
78980: LD_OWVAR 2
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 33
78991: PUSH
78992: LD_INT 3
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: EMPTY
79000: LIST
79001: LIST
79002: PPUSH
79003: CALL_OW 69
79007: ST_TO_ADDR
// if not tmp then
79008: LD_VAR 0 2
79012: NOT
79013: IFFALSE 79017
// exit ;
79015: GO 79143
// side := 0 ;
79017: LD_ADDR_VAR 0 3
79021: PUSH
79022: LD_INT 0
79024: ST_TO_ADDR
// for i := 1 to 8 do
79025: LD_ADDR_VAR 0 1
79029: PUSH
79030: DOUBLE
79031: LD_INT 1
79033: DEC
79034: ST_TO_ADDR
79035: LD_INT 8
79037: PUSH
79038: FOR_TO
79039: IFFALSE 79087
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
79041: LD_OWVAR 2
79045: PUSH
79046: LD_VAR 0 1
79050: NONEQUAL
79051: PUSH
79052: LD_OWVAR 2
79056: PPUSH
79057: LD_VAR 0 1
79061: PPUSH
79062: CALL_OW 81
79066: PUSH
79067: LD_INT 2
79069: EQUAL
79070: AND
79071: IFFALSE 79085
// begin side := i ;
79073: LD_ADDR_VAR 0 3
79077: PUSH
79078: LD_VAR 0 1
79082: ST_TO_ADDR
// break ;
79083: GO 79087
// end ;
79085: GO 79038
79087: POP
79088: POP
// if not side then
79089: LD_VAR 0 3
79093: NOT
79094: IFFALSE 79098
// exit ;
79096: GO 79143
// for i := 1 to tmp do
79098: LD_ADDR_VAR 0 1
79102: PUSH
79103: DOUBLE
79104: LD_INT 1
79106: DEC
79107: ST_TO_ADDR
79108: LD_VAR 0 2
79112: PUSH
79113: FOR_TO
79114: IFFALSE 79141
// if Prob ( 60 ) then
79116: LD_INT 60
79118: PPUSH
79119: CALL_OW 13
79123: IFFALSE 79139
// SetSide ( i , side ) ;
79125: LD_VAR 0 1
79129: PPUSH
79130: LD_VAR 0 3
79134: PPUSH
79135: CALL_OW 235
79139: GO 79113
79141: POP
79142: POP
// end ;
79143: PPOPN 3
79145: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
79146: LD_EXP 75
79150: PUSH
79151: LD_EXP 88
79155: AND
79156: IFFALSE 79275
79158: GO 79160
79160: DISABLE
79161: LD_INT 0
79163: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
79164: LD_ADDR_VAR 0 1
79168: PUSH
79169: LD_INT 22
79171: PUSH
79172: LD_OWVAR 2
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: PUSH
79181: LD_INT 21
79183: PUSH
79184: LD_INT 1
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PUSH
79191: LD_INT 3
79193: PUSH
79194: LD_INT 23
79196: PUSH
79197: LD_INT 0
79199: PUSH
79200: EMPTY
79201: LIST
79202: LIST
79203: PUSH
79204: EMPTY
79205: LIST
79206: LIST
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: LIST
79212: PPUSH
79213: CALL_OW 69
79217: PUSH
79218: FOR_IN
79219: IFFALSE 79273
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
79221: LD_VAR 0 1
79225: PPUSH
79226: CALL_OW 257
79230: PUSH
79231: LD_INT 1
79233: PUSH
79234: LD_INT 2
79236: PUSH
79237: LD_INT 3
79239: PUSH
79240: LD_INT 4
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: IN
79249: IFFALSE 79271
// SetClass ( un , rand ( 1 , 4 ) ) ;
79251: LD_VAR 0 1
79255: PPUSH
79256: LD_INT 1
79258: PPUSH
79259: LD_INT 4
79261: PPUSH
79262: CALL_OW 12
79266: PPUSH
79267: CALL_OW 336
79271: GO 79218
79273: POP
79274: POP
// end ;
79275: PPOPN 1
79277: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
79278: LD_EXP 75
79282: PUSH
79283: LD_EXP 87
79287: AND
79288: IFFALSE 79367
79290: GO 79292
79292: DISABLE
79293: LD_INT 0
79295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79296: LD_ADDR_VAR 0 1
79300: PUSH
79301: LD_INT 22
79303: PUSH
79304: LD_OWVAR 2
79308: PUSH
79309: EMPTY
79310: LIST
79311: LIST
79312: PUSH
79313: LD_INT 21
79315: PUSH
79316: LD_INT 3
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: PPUSH
79327: CALL_OW 69
79331: ST_TO_ADDR
// if not tmp then
79332: LD_VAR 0 1
79336: NOT
79337: IFFALSE 79341
// exit ;
79339: GO 79367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
79341: LD_VAR 0 1
79345: PUSH
79346: LD_INT 1
79348: PPUSH
79349: LD_VAR 0 1
79353: PPUSH
79354: CALL_OW 12
79358: ARRAY
79359: PPUSH
79360: LD_INT 100
79362: PPUSH
79363: CALL_OW 234
// end ;
79367: PPOPN 1
79369: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
79370: LD_EXP 75
79374: PUSH
79375: LD_EXP 89
79379: AND
79380: IFFALSE 79478
79382: GO 79384
79384: DISABLE
79385: LD_INT 0
79387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
79388: LD_ADDR_VAR 0 1
79392: PUSH
79393: LD_INT 22
79395: PUSH
79396: LD_OWVAR 2
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: PUSH
79405: LD_INT 21
79407: PUSH
79408: LD_INT 1
79410: PUSH
79411: EMPTY
79412: LIST
79413: LIST
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: PPUSH
79419: CALL_OW 69
79423: ST_TO_ADDR
// if not tmp then
79424: LD_VAR 0 1
79428: NOT
79429: IFFALSE 79433
// exit ;
79431: GO 79478
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
79433: LD_VAR 0 1
79437: PUSH
79438: LD_INT 1
79440: PPUSH
79441: LD_VAR 0 1
79445: PPUSH
79446: CALL_OW 12
79450: ARRAY
79451: PPUSH
79452: LD_INT 1
79454: PPUSH
79455: LD_INT 4
79457: PPUSH
79458: CALL_OW 12
79462: PPUSH
79463: LD_INT 3000
79465: PPUSH
79466: LD_INT 9000
79468: PPUSH
79469: CALL_OW 12
79473: PPUSH
79474: CALL_OW 492
// end ;
79478: PPOPN 1
79480: END
// every 0 0$1 trigger StreamModeActive and sDepot do
79481: LD_EXP 75
79485: PUSH
79486: LD_EXP 90
79490: AND
79491: IFFALSE 79511
79493: GO 79495
79495: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
79496: LD_INT 1
79498: PPUSH
79499: LD_OWVAR 2
79503: PPUSH
79504: LD_INT 0
79506: PPUSH
79507: CALL_OW 324
79511: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
79512: LD_EXP 75
79516: PUSH
79517: LD_EXP 91
79521: AND
79522: IFFALSE 79605
79524: GO 79526
79526: DISABLE
79527: LD_INT 0
79529: PPUSH
79530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
79531: LD_ADDR_VAR 0 2
79535: PUSH
79536: LD_INT 22
79538: PUSH
79539: LD_OWVAR 2
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PUSH
79548: LD_INT 21
79550: PUSH
79551: LD_INT 3
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: EMPTY
79559: LIST
79560: LIST
79561: PPUSH
79562: CALL_OW 69
79566: ST_TO_ADDR
// if not tmp then
79567: LD_VAR 0 2
79571: NOT
79572: IFFALSE 79576
// exit ;
79574: GO 79605
// for i in tmp do
79576: LD_ADDR_VAR 0 1
79580: PUSH
79581: LD_VAR 0 2
79585: PUSH
79586: FOR_IN
79587: IFFALSE 79603
// SetBLevel ( i , 10 ) ;
79589: LD_VAR 0 1
79593: PPUSH
79594: LD_INT 10
79596: PPUSH
79597: CALL_OW 241
79601: GO 79586
79603: POP
79604: POP
// end ;
79605: PPOPN 2
79607: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
79608: LD_EXP 75
79612: PUSH
79613: LD_EXP 92
79617: AND
79618: IFFALSE 79729
79620: GO 79622
79622: DISABLE
79623: LD_INT 0
79625: PPUSH
79626: PPUSH
79627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
79628: LD_ADDR_VAR 0 3
79632: PUSH
79633: LD_INT 22
79635: PUSH
79636: LD_OWVAR 2
79640: PUSH
79641: EMPTY
79642: LIST
79643: LIST
79644: PUSH
79645: LD_INT 25
79647: PUSH
79648: LD_INT 1
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: PUSH
79655: EMPTY
79656: LIST
79657: LIST
79658: PPUSH
79659: CALL_OW 69
79663: ST_TO_ADDR
// if not tmp then
79664: LD_VAR 0 3
79668: NOT
79669: IFFALSE 79673
// exit ;
79671: GO 79729
// un := tmp [ rand ( 1 , tmp ) ] ;
79673: LD_ADDR_VAR 0 2
79677: PUSH
79678: LD_VAR 0 3
79682: PUSH
79683: LD_INT 1
79685: PPUSH
79686: LD_VAR 0 3
79690: PPUSH
79691: CALL_OW 12
79695: ARRAY
79696: ST_TO_ADDR
// if Crawls ( un ) then
79697: LD_VAR 0 2
79701: PPUSH
79702: CALL_OW 318
79706: IFFALSE 79717
// ComWalk ( un ) ;
79708: LD_VAR 0 2
79712: PPUSH
79713: CALL_OW 138
// SetClass ( un , class_sniper ) ;
79717: LD_VAR 0 2
79721: PPUSH
79722: LD_INT 5
79724: PPUSH
79725: CALL_OW 336
// end ;
79729: PPOPN 3
79731: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
79732: LD_EXP 75
79736: PUSH
79737: LD_EXP 93
79741: AND
79742: PUSH
79743: LD_OWVAR 67
79747: PUSH
79748: LD_INT 4
79750: LESS
79751: AND
79752: IFFALSE 79771
79754: GO 79756
79756: DISABLE
// begin Difficulty := Difficulty + 1 ;
79757: LD_ADDR_OWVAR 67
79761: PUSH
79762: LD_OWVAR 67
79766: PUSH
79767: LD_INT 1
79769: PLUS
79770: ST_TO_ADDR
// end ;
79771: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
79772: LD_EXP 75
79776: PUSH
79777: LD_EXP 94
79781: AND
79782: IFFALSE 79885
79784: GO 79786
79786: DISABLE
79787: LD_INT 0
79789: PPUSH
// begin for i := 1 to 5 do
79790: LD_ADDR_VAR 0 1
79794: PUSH
79795: DOUBLE
79796: LD_INT 1
79798: DEC
79799: ST_TO_ADDR
79800: LD_INT 5
79802: PUSH
79803: FOR_TO
79804: IFFALSE 79883
// begin uc_nation := nation_nature ;
79806: LD_ADDR_OWVAR 21
79810: PUSH
79811: LD_INT 0
79813: ST_TO_ADDR
// uc_side := 0 ;
79814: LD_ADDR_OWVAR 20
79818: PUSH
79819: LD_INT 0
79821: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
79822: LD_ADDR_OWVAR 29
79826: PUSH
79827: LD_INT 12
79829: PUSH
79830: LD_INT 12
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: ST_TO_ADDR
// hc_agressivity := 20 ;
79837: LD_ADDR_OWVAR 35
79841: PUSH
79842: LD_INT 20
79844: ST_TO_ADDR
// hc_class := class_tiger ;
79845: LD_ADDR_OWVAR 28
79849: PUSH
79850: LD_INT 14
79852: ST_TO_ADDR
// hc_gallery :=  ;
79853: LD_ADDR_OWVAR 33
79857: PUSH
79858: LD_STRING 
79860: ST_TO_ADDR
// hc_name :=  ;
79861: LD_ADDR_OWVAR 26
79865: PUSH
79866: LD_STRING 
79868: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
79869: CALL_OW 44
79873: PPUSH
79874: LD_INT 0
79876: PPUSH
79877: CALL_OW 51
// end ;
79881: GO 79803
79883: POP
79884: POP
// end ;
79885: PPOPN 1
79887: END
// every 0 0$1 trigger StreamModeActive and sBomb do
79888: LD_EXP 75
79892: PUSH
79893: LD_EXP 95
79897: AND
79898: IFFALSE 79907
79900: GO 79902
79902: DISABLE
// StreamSibBomb ;
79903: CALL 79908 0 0
79907: END
// export function StreamSibBomb ; var i , x , y ; begin
79908: LD_INT 0
79910: PPUSH
79911: PPUSH
79912: PPUSH
79913: PPUSH
// result := false ;
79914: LD_ADDR_VAR 0 1
79918: PUSH
79919: LD_INT 0
79921: ST_TO_ADDR
// for i := 1 to 16 do
79922: LD_ADDR_VAR 0 2
79926: PUSH
79927: DOUBLE
79928: LD_INT 1
79930: DEC
79931: ST_TO_ADDR
79932: LD_INT 16
79934: PUSH
79935: FOR_TO
79936: IFFALSE 80135
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
79938: LD_ADDR_VAR 0 3
79942: PUSH
79943: LD_INT 10
79945: PUSH
79946: LD_INT 20
79948: PUSH
79949: LD_INT 30
79951: PUSH
79952: LD_INT 40
79954: PUSH
79955: LD_INT 50
79957: PUSH
79958: LD_INT 60
79960: PUSH
79961: LD_INT 70
79963: PUSH
79964: LD_INT 80
79966: PUSH
79967: LD_INT 90
79969: PUSH
79970: LD_INT 100
79972: PUSH
79973: LD_INT 110
79975: PUSH
79976: LD_INT 120
79978: PUSH
79979: LD_INT 130
79981: PUSH
79982: LD_INT 140
79984: PUSH
79985: LD_INT 150
79987: PUSH
79988: EMPTY
79989: LIST
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: LIST
79995: LIST
79996: LIST
79997: LIST
79998: LIST
79999: LIST
80000: LIST
80001: LIST
80002: LIST
80003: LIST
80004: PUSH
80005: LD_INT 1
80007: PPUSH
80008: LD_INT 15
80010: PPUSH
80011: CALL_OW 12
80015: ARRAY
80016: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
80017: LD_ADDR_VAR 0 4
80021: PUSH
80022: LD_INT 10
80024: PUSH
80025: LD_INT 20
80027: PUSH
80028: LD_INT 30
80030: PUSH
80031: LD_INT 40
80033: PUSH
80034: LD_INT 50
80036: PUSH
80037: LD_INT 60
80039: PUSH
80040: LD_INT 70
80042: PUSH
80043: LD_INT 80
80045: PUSH
80046: LD_INT 90
80048: PUSH
80049: LD_INT 100
80051: PUSH
80052: LD_INT 110
80054: PUSH
80055: LD_INT 120
80057: PUSH
80058: LD_INT 130
80060: PUSH
80061: LD_INT 140
80063: PUSH
80064: LD_INT 150
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: LIST
80071: LIST
80072: LIST
80073: LIST
80074: LIST
80075: LIST
80076: LIST
80077: LIST
80078: LIST
80079: LIST
80080: LIST
80081: LIST
80082: LIST
80083: PUSH
80084: LD_INT 1
80086: PPUSH
80087: LD_INT 15
80089: PPUSH
80090: CALL_OW 12
80094: ARRAY
80095: ST_TO_ADDR
// if ValidHex ( x , y ) then
80096: LD_VAR 0 3
80100: PPUSH
80101: LD_VAR 0 4
80105: PPUSH
80106: CALL_OW 488
80110: IFFALSE 80133
// begin result := [ x , y ] ;
80112: LD_ADDR_VAR 0 1
80116: PUSH
80117: LD_VAR 0 3
80121: PUSH
80122: LD_VAR 0 4
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: ST_TO_ADDR
// break ;
80131: GO 80135
// end ; end ;
80133: GO 79935
80135: POP
80136: POP
// if result then
80137: LD_VAR 0 1
80141: IFFALSE 80201
// begin ToLua ( playSibBomb() ) ;
80143: LD_STRING playSibBomb()
80145: PPUSH
80146: CALL_OW 559
// wait ( 0 0$14 ) ;
80150: LD_INT 490
80152: PPUSH
80153: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
80157: LD_VAR 0 1
80161: PUSH
80162: LD_INT 1
80164: ARRAY
80165: PPUSH
80166: LD_VAR 0 1
80170: PUSH
80171: LD_INT 2
80173: ARRAY
80174: PPUSH
80175: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
80179: LD_VAR 0 1
80183: PUSH
80184: LD_INT 1
80186: ARRAY
80187: PPUSH
80188: LD_VAR 0 1
80192: PUSH
80193: LD_INT 2
80195: ARRAY
80196: PPUSH
80197: CALL_OW 429
// end ; end ;
80201: LD_VAR 0 1
80205: RET
// every 0 0$1 trigger StreamModeActive and sReset do
80206: LD_EXP 75
80210: PUSH
80211: LD_EXP 97
80215: AND
80216: IFFALSE 80228
80218: GO 80220
80220: DISABLE
// YouLost (  ) ;
80221: LD_STRING 
80223: PPUSH
80224: CALL_OW 104
80228: END
// every 0 0$1 trigger StreamModeActive and sFog do
80229: LD_EXP 75
80233: PUSH
80234: LD_EXP 96
80238: AND
80239: IFFALSE 80253
80241: GO 80243
80243: DISABLE
// FogOff ( your_side ) ;
80244: LD_OWVAR 2
80248: PPUSH
80249: CALL_OW 344
80253: END
// every 0 0$1 trigger StreamModeActive and sSun do
80254: LD_EXP 75
80258: PUSH
80259: LD_EXP 98
80263: AND
80264: IFFALSE 80292
80266: GO 80268
80268: DISABLE
// begin solar_recharge_percent := 0 ;
80269: LD_ADDR_OWVAR 79
80273: PUSH
80274: LD_INT 0
80276: ST_TO_ADDR
// wait ( 5 5$00 ) ;
80277: LD_INT 10500
80279: PPUSH
80280: CALL_OW 67
// solar_recharge_percent := 100 ;
80284: LD_ADDR_OWVAR 79
80288: PUSH
80289: LD_INT 100
80291: ST_TO_ADDR
// end ;
80292: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
80293: LD_EXP 75
80297: PUSH
80298: LD_EXP 99
80302: AND
80303: IFFALSE 80542
80305: GO 80307
80307: DISABLE
80308: LD_INT 0
80310: PPUSH
80311: PPUSH
80312: PPUSH
// begin tmp := [ ] ;
80313: LD_ADDR_VAR 0 3
80317: PUSH
80318: EMPTY
80319: ST_TO_ADDR
// for i := 1 to 6 do
80320: LD_ADDR_VAR 0 1
80324: PUSH
80325: DOUBLE
80326: LD_INT 1
80328: DEC
80329: ST_TO_ADDR
80330: LD_INT 6
80332: PUSH
80333: FOR_TO
80334: IFFALSE 80439
// begin uc_nation := nation_nature ;
80336: LD_ADDR_OWVAR 21
80340: PUSH
80341: LD_INT 0
80343: ST_TO_ADDR
// uc_side := 0 ;
80344: LD_ADDR_OWVAR 20
80348: PUSH
80349: LD_INT 0
80351: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
80352: LD_ADDR_OWVAR 29
80356: PUSH
80357: LD_INT 12
80359: PUSH
80360: LD_INT 12
80362: PUSH
80363: EMPTY
80364: LIST
80365: LIST
80366: ST_TO_ADDR
// hc_agressivity := 20 ;
80367: LD_ADDR_OWVAR 35
80371: PUSH
80372: LD_INT 20
80374: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
80375: LD_ADDR_OWVAR 28
80379: PUSH
80380: LD_INT 17
80382: ST_TO_ADDR
// hc_gallery :=  ;
80383: LD_ADDR_OWVAR 33
80387: PUSH
80388: LD_STRING 
80390: ST_TO_ADDR
// hc_name :=  ;
80391: LD_ADDR_OWVAR 26
80395: PUSH
80396: LD_STRING 
80398: ST_TO_ADDR
// un := CreateHuman ;
80399: LD_ADDR_VAR 0 2
80403: PUSH
80404: CALL_OW 44
80408: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
80409: LD_VAR 0 2
80413: PPUSH
80414: LD_INT 1
80416: PPUSH
80417: CALL_OW 51
// tmp := tmp ^ un ;
80421: LD_ADDR_VAR 0 3
80425: PUSH
80426: LD_VAR 0 3
80430: PUSH
80431: LD_VAR 0 2
80435: ADD
80436: ST_TO_ADDR
// end ;
80437: GO 80333
80439: POP
80440: POP
// repeat wait ( 0 0$1 ) ;
80441: LD_INT 35
80443: PPUSH
80444: CALL_OW 67
// for un in tmp do
80448: LD_ADDR_VAR 0 2
80452: PUSH
80453: LD_VAR 0 3
80457: PUSH
80458: FOR_IN
80459: IFFALSE 80533
// begin if IsDead ( un ) then
80461: LD_VAR 0 2
80465: PPUSH
80466: CALL_OW 301
80470: IFFALSE 80490
// begin tmp := tmp diff un ;
80472: LD_ADDR_VAR 0 3
80476: PUSH
80477: LD_VAR 0 3
80481: PUSH
80482: LD_VAR 0 2
80486: DIFF
80487: ST_TO_ADDR
// continue ;
80488: GO 80458
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
80490: LD_VAR 0 2
80494: PPUSH
80495: LD_INT 3
80497: PUSH
80498: LD_INT 22
80500: PUSH
80501: LD_INT 0
80503: PUSH
80504: EMPTY
80505: LIST
80506: LIST
80507: PUSH
80508: EMPTY
80509: LIST
80510: LIST
80511: PPUSH
80512: CALL_OW 69
80516: PPUSH
80517: LD_VAR 0 2
80521: PPUSH
80522: CALL_OW 74
80526: PPUSH
80527: CALL_OW 115
// end ;
80531: GO 80458
80533: POP
80534: POP
// until not tmp ;
80535: LD_VAR 0 3
80539: NOT
80540: IFFALSE 80441
// end ;
80542: PPOPN 3
80544: END
// every 0 0$1 trigger StreamModeActive and sTroll do
80545: LD_EXP 75
80549: PUSH
80550: LD_EXP 100
80554: AND
80555: IFFALSE 80609
80557: GO 80559
80559: DISABLE
// begin ToLua ( displayTroll(); ) ;
80560: LD_STRING displayTroll();
80562: PPUSH
80563: CALL_OW 559
// wait ( 3 3$00 ) ;
80567: LD_INT 6300
80569: PPUSH
80570: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80574: LD_STRING hideTroll();
80576: PPUSH
80577: CALL_OW 559
// wait ( 1 1$00 ) ;
80581: LD_INT 2100
80583: PPUSH
80584: CALL_OW 67
// ToLua ( displayTroll(); ) ;
80588: LD_STRING displayTroll();
80590: PPUSH
80591: CALL_OW 559
// wait ( 1 1$00 ) ;
80595: LD_INT 2100
80597: PPUSH
80598: CALL_OW 67
// ToLua ( hideTroll(); ) ;
80602: LD_STRING hideTroll();
80604: PPUSH
80605: CALL_OW 559
// end ;
80609: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
80610: LD_EXP 75
80614: PUSH
80615: LD_EXP 101
80619: AND
80620: IFFALSE 80683
80622: GO 80624
80624: DISABLE
80625: LD_INT 0
80627: PPUSH
// begin p := 0 ;
80628: LD_ADDR_VAR 0 1
80632: PUSH
80633: LD_INT 0
80635: ST_TO_ADDR
// repeat game_speed := 1 ;
80636: LD_ADDR_OWVAR 65
80640: PUSH
80641: LD_INT 1
80643: ST_TO_ADDR
// wait ( 0 0$1 ) ;
80644: LD_INT 35
80646: PPUSH
80647: CALL_OW 67
// p := p + 1 ;
80651: LD_ADDR_VAR 0 1
80655: PUSH
80656: LD_VAR 0 1
80660: PUSH
80661: LD_INT 1
80663: PLUS
80664: ST_TO_ADDR
// until p >= 60 ;
80665: LD_VAR 0 1
80669: PUSH
80670: LD_INT 60
80672: GREATEREQUAL
80673: IFFALSE 80636
// game_speed := 4 ;
80675: LD_ADDR_OWVAR 65
80679: PUSH
80680: LD_INT 4
80682: ST_TO_ADDR
// end ;
80683: PPOPN 1
80685: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
80686: LD_EXP 75
80690: PUSH
80691: LD_EXP 102
80695: AND
80696: IFFALSE 80842
80698: GO 80700
80700: DISABLE
80701: LD_INT 0
80703: PPUSH
80704: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
80705: LD_ADDR_VAR 0 1
80709: PUSH
80710: LD_INT 22
80712: PUSH
80713: LD_OWVAR 2
80717: PUSH
80718: EMPTY
80719: LIST
80720: LIST
80721: PUSH
80722: LD_INT 2
80724: PUSH
80725: LD_INT 30
80727: PUSH
80728: LD_INT 0
80730: PUSH
80731: EMPTY
80732: LIST
80733: LIST
80734: PUSH
80735: LD_INT 30
80737: PUSH
80738: LD_INT 1
80740: PUSH
80741: EMPTY
80742: LIST
80743: LIST
80744: PUSH
80745: EMPTY
80746: LIST
80747: LIST
80748: LIST
80749: PUSH
80750: EMPTY
80751: LIST
80752: LIST
80753: PPUSH
80754: CALL_OW 69
80758: ST_TO_ADDR
// if not depot then
80759: LD_VAR 0 1
80763: NOT
80764: IFFALSE 80768
// exit ;
80766: GO 80842
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
80768: LD_ADDR_VAR 0 2
80772: PUSH
80773: LD_VAR 0 1
80777: PUSH
80778: LD_INT 1
80780: PPUSH
80781: LD_VAR 0 1
80785: PPUSH
80786: CALL_OW 12
80790: ARRAY
80791: PPUSH
80792: CALL_OW 274
80796: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
80797: LD_VAR 0 2
80801: PPUSH
80802: LD_INT 1
80804: PPUSH
80805: LD_INT 0
80807: PPUSH
80808: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
80812: LD_VAR 0 2
80816: PPUSH
80817: LD_INT 2
80819: PPUSH
80820: LD_INT 0
80822: PPUSH
80823: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
80827: LD_VAR 0 2
80831: PPUSH
80832: LD_INT 3
80834: PPUSH
80835: LD_INT 0
80837: PPUSH
80838: CALL_OW 277
// end ;
80842: PPOPN 2
80844: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
80845: LD_EXP 75
80849: PUSH
80850: LD_EXP 103
80854: AND
80855: IFFALSE 80952
80857: GO 80859
80859: DISABLE
80860: LD_INT 0
80862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
80863: LD_ADDR_VAR 0 1
80867: PUSH
80868: LD_INT 22
80870: PUSH
80871: LD_OWVAR 2
80875: PUSH
80876: EMPTY
80877: LIST
80878: LIST
80879: PUSH
80880: LD_INT 21
80882: PUSH
80883: LD_INT 1
80885: PUSH
80886: EMPTY
80887: LIST
80888: LIST
80889: PUSH
80890: LD_INT 3
80892: PUSH
80893: LD_INT 23
80895: PUSH
80896: LD_INT 0
80898: PUSH
80899: EMPTY
80900: LIST
80901: LIST
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PUSH
80907: EMPTY
80908: LIST
80909: LIST
80910: LIST
80911: PPUSH
80912: CALL_OW 69
80916: ST_TO_ADDR
// if not tmp then
80917: LD_VAR 0 1
80921: NOT
80922: IFFALSE 80926
// exit ;
80924: GO 80952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
80926: LD_VAR 0 1
80930: PUSH
80931: LD_INT 1
80933: PPUSH
80934: LD_VAR 0 1
80938: PPUSH
80939: CALL_OW 12
80943: ARRAY
80944: PPUSH
80945: LD_INT 200
80947: PPUSH
80948: CALL_OW 234
// end ;
80952: PPOPN 1
80954: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
80955: LD_EXP 75
80959: PUSH
80960: LD_EXP 104
80964: AND
80965: IFFALSE 81044
80967: GO 80969
80969: DISABLE
80970: LD_INT 0
80972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
80973: LD_ADDR_VAR 0 1
80977: PUSH
80978: LD_INT 22
80980: PUSH
80981: LD_OWVAR 2
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PUSH
80990: LD_INT 21
80992: PUSH
80993: LD_INT 2
80995: PUSH
80996: EMPTY
80997: LIST
80998: LIST
80999: PUSH
81000: EMPTY
81001: LIST
81002: LIST
81003: PPUSH
81004: CALL_OW 69
81008: ST_TO_ADDR
// if not tmp then
81009: LD_VAR 0 1
81013: NOT
81014: IFFALSE 81018
// exit ;
81016: GO 81044
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
81018: LD_VAR 0 1
81022: PUSH
81023: LD_INT 1
81025: PPUSH
81026: LD_VAR 0 1
81030: PPUSH
81031: CALL_OW 12
81035: ARRAY
81036: PPUSH
81037: LD_INT 60
81039: PPUSH
81040: CALL_OW 234
// end ;
81044: PPOPN 1
81046: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
81047: LD_EXP 75
81051: PUSH
81052: LD_EXP 105
81056: AND
81057: IFFALSE 81156
81059: GO 81061
81061: DISABLE
81062: LD_INT 0
81064: PPUSH
81065: PPUSH
// begin enable ;
81066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
81067: LD_ADDR_VAR 0 1
81071: PUSH
81072: LD_INT 22
81074: PUSH
81075: LD_OWVAR 2
81079: PUSH
81080: EMPTY
81081: LIST
81082: LIST
81083: PUSH
81084: LD_INT 61
81086: PUSH
81087: EMPTY
81088: LIST
81089: PUSH
81090: LD_INT 33
81092: PUSH
81093: LD_INT 2
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: PUSH
81100: EMPTY
81101: LIST
81102: LIST
81103: LIST
81104: PPUSH
81105: CALL_OW 69
81109: ST_TO_ADDR
// if not tmp then
81110: LD_VAR 0 1
81114: NOT
81115: IFFALSE 81119
// exit ;
81117: GO 81156
// for i in tmp do
81119: LD_ADDR_VAR 0 2
81123: PUSH
81124: LD_VAR 0 1
81128: PUSH
81129: FOR_IN
81130: IFFALSE 81154
// if IsControledBy ( i ) then
81132: LD_VAR 0 2
81136: PPUSH
81137: CALL_OW 312
81141: IFFALSE 81152
// ComUnlink ( i ) ;
81143: LD_VAR 0 2
81147: PPUSH
81148: CALL_OW 136
81152: GO 81129
81154: POP
81155: POP
// end ;
81156: PPOPN 2
81158: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
81159: LD_EXP 75
81163: PUSH
81164: LD_EXP 106
81168: AND
81169: IFFALSE 81309
81171: GO 81173
81173: DISABLE
81174: LD_INT 0
81176: PPUSH
81177: PPUSH
// begin ToLua ( displayPowell(); ) ;
81178: LD_STRING displayPowell();
81180: PPUSH
81181: CALL_OW 559
// uc_side := 0 ;
81185: LD_ADDR_OWVAR 20
81189: PUSH
81190: LD_INT 0
81192: ST_TO_ADDR
// uc_nation := 2 ;
81193: LD_ADDR_OWVAR 21
81197: PUSH
81198: LD_INT 2
81200: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
81201: LD_ADDR_OWVAR 37
81205: PUSH
81206: LD_INT 14
81208: ST_TO_ADDR
// vc_engine := engine_siberite ;
81209: LD_ADDR_OWVAR 39
81213: PUSH
81214: LD_INT 3
81216: ST_TO_ADDR
// vc_control := control_apeman ;
81217: LD_ADDR_OWVAR 38
81221: PUSH
81222: LD_INT 5
81224: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
81225: LD_ADDR_OWVAR 40
81229: PUSH
81230: LD_INT 29
81232: ST_TO_ADDR
// un := CreateVehicle ;
81233: LD_ADDR_VAR 0 2
81237: PUSH
81238: CALL_OW 45
81242: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
81243: LD_VAR 0 2
81247: PPUSH
81248: LD_INT 1
81250: PPUSH
81251: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
81255: LD_INT 35
81257: PPUSH
81258: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
81262: LD_VAR 0 2
81266: PPUSH
81267: LD_INT 22
81269: PUSH
81270: LD_OWVAR 2
81274: PUSH
81275: EMPTY
81276: LIST
81277: LIST
81278: PPUSH
81279: CALL_OW 69
81283: PPUSH
81284: LD_VAR 0 2
81288: PPUSH
81289: CALL_OW 74
81293: PPUSH
81294: CALL_OW 115
// until IsDead ( un ) ;
81298: LD_VAR 0 2
81302: PPUSH
81303: CALL_OW 301
81307: IFFALSE 81255
// end ;
81309: PPOPN 2
81311: END
// every 0 0$1 trigger StreamModeActive and sStu do
81312: LD_EXP 75
81316: PUSH
81317: LD_EXP 114
81321: AND
81322: IFFALSE 81338
81324: GO 81326
81326: DISABLE
// begin ToLua ( displayStucuk(); ) ;
81327: LD_STRING displayStucuk();
81329: PPUSH
81330: CALL_OW 559
// ResetFog ;
81334: CALL_OW 335
// end ;
81338: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
81339: LD_EXP 75
81343: PUSH
81344: LD_EXP 107
81348: AND
81349: IFFALSE 81490
81351: GO 81353
81353: DISABLE
81354: LD_INT 0
81356: PPUSH
81357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81358: LD_ADDR_VAR 0 2
81362: PUSH
81363: LD_INT 22
81365: PUSH
81366: LD_OWVAR 2
81370: PUSH
81371: EMPTY
81372: LIST
81373: LIST
81374: PUSH
81375: LD_INT 21
81377: PUSH
81378: LD_INT 1
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: PUSH
81385: EMPTY
81386: LIST
81387: LIST
81388: PPUSH
81389: CALL_OW 69
81393: ST_TO_ADDR
// if not tmp then
81394: LD_VAR 0 2
81398: NOT
81399: IFFALSE 81403
// exit ;
81401: GO 81490
// un := tmp [ rand ( 1 , tmp ) ] ;
81403: LD_ADDR_VAR 0 1
81407: PUSH
81408: LD_VAR 0 2
81412: PUSH
81413: LD_INT 1
81415: PPUSH
81416: LD_VAR 0 2
81420: PPUSH
81421: CALL_OW 12
81425: ARRAY
81426: ST_TO_ADDR
// SetSide ( un , 0 ) ;
81427: LD_VAR 0 1
81431: PPUSH
81432: LD_INT 0
81434: PPUSH
81435: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
81439: LD_VAR 0 1
81443: PPUSH
81444: LD_OWVAR 3
81448: PUSH
81449: LD_VAR 0 1
81453: DIFF
81454: PPUSH
81455: LD_VAR 0 1
81459: PPUSH
81460: CALL_OW 74
81464: PPUSH
81465: CALL_OW 115
// wait ( 0 0$20 ) ;
81469: LD_INT 700
81471: PPUSH
81472: CALL_OW 67
// SetSide ( un , your_side ) ;
81476: LD_VAR 0 1
81480: PPUSH
81481: LD_OWVAR 2
81485: PPUSH
81486: CALL_OW 235
// end ;
81490: PPOPN 2
81492: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
81493: LD_EXP 75
81497: PUSH
81498: LD_EXP 108
81502: AND
81503: IFFALSE 81609
81505: GO 81507
81507: DISABLE
81508: LD_INT 0
81510: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
81511: LD_ADDR_VAR 0 1
81515: PUSH
81516: LD_INT 22
81518: PUSH
81519: LD_OWVAR 2
81523: PUSH
81524: EMPTY
81525: LIST
81526: LIST
81527: PUSH
81528: LD_INT 2
81530: PUSH
81531: LD_INT 30
81533: PUSH
81534: LD_INT 0
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: PUSH
81541: LD_INT 30
81543: PUSH
81544: LD_INT 1
81546: PUSH
81547: EMPTY
81548: LIST
81549: LIST
81550: PUSH
81551: EMPTY
81552: LIST
81553: LIST
81554: LIST
81555: PUSH
81556: EMPTY
81557: LIST
81558: LIST
81559: PPUSH
81560: CALL_OW 69
81564: ST_TO_ADDR
// if not depot then
81565: LD_VAR 0 1
81569: NOT
81570: IFFALSE 81574
// exit ;
81572: GO 81609
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
81574: LD_VAR 0 1
81578: PUSH
81579: LD_INT 1
81581: ARRAY
81582: PPUSH
81583: CALL_OW 250
81587: PPUSH
81588: LD_VAR 0 1
81592: PUSH
81593: LD_INT 1
81595: ARRAY
81596: PPUSH
81597: CALL_OW 251
81601: PPUSH
81602: LD_INT 70
81604: PPUSH
81605: CALL_OW 495
// end ;
81609: PPOPN 1
81611: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
81612: LD_EXP 75
81616: PUSH
81617: LD_EXP 109
81621: AND
81622: IFFALSE 81833
81624: GO 81626
81626: DISABLE
81627: LD_INT 0
81629: PPUSH
81630: PPUSH
81631: PPUSH
81632: PPUSH
81633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
81634: LD_ADDR_VAR 0 5
81638: PUSH
81639: LD_INT 22
81641: PUSH
81642: LD_OWVAR 2
81646: PUSH
81647: EMPTY
81648: LIST
81649: LIST
81650: PUSH
81651: LD_INT 21
81653: PUSH
81654: LD_INT 1
81656: PUSH
81657: EMPTY
81658: LIST
81659: LIST
81660: PUSH
81661: EMPTY
81662: LIST
81663: LIST
81664: PPUSH
81665: CALL_OW 69
81669: ST_TO_ADDR
// if not tmp then
81670: LD_VAR 0 5
81674: NOT
81675: IFFALSE 81679
// exit ;
81677: GO 81833
// for i in tmp do
81679: LD_ADDR_VAR 0 1
81683: PUSH
81684: LD_VAR 0 5
81688: PUSH
81689: FOR_IN
81690: IFFALSE 81831
// begin d := rand ( 0 , 5 ) ;
81692: LD_ADDR_VAR 0 4
81696: PUSH
81697: LD_INT 0
81699: PPUSH
81700: LD_INT 5
81702: PPUSH
81703: CALL_OW 12
81707: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
81708: LD_ADDR_VAR 0 2
81712: PUSH
81713: LD_VAR 0 1
81717: PPUSH
81718: CALL_OW 250
81722: PPUSH
81723: LD_VAR 0 4
81727: PPUSH
81728: LD_INT 3
81730: PPUSH
81731: LD_INT 12
81733: PPUSH
81734: CALL_OW 12
81738: PPUSH
81739: CALL_OW 272
81743: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
81744: LD_ADDR_VAR 0 3
81748: PUSH
81749: LD_VAR 0 1
81753: PPUSH
81754: CALL_OW 251
81758: PPUSH
81759: LD_VAR 0 4
81763: PPUSH
81764: LD_INT 3
81766: PPUSH
81767: LD_INT 12
81769: PPUSH
81770: CALL_OW 12
81774: PPUSH
81775: CALL_OW 273
81779: ST_TO_ADDR
// if ValidHex ( x , y ) then
81780: LD_VAR 0 2
81784: PPUSH
81785: LD_VAR 0 3
81789: PPUSH
81790: CALL_OW 488
81794: IFFALSE 81829
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
81796: LD_VAR 0 1
81800: PPUSH
81801: LD_VAR 0 2
81805: PPUSH
81806: LD_VAR 0 3
81810: PPUSH
81811: LD_INT 3
81813: PPUSH
81814: LD_INT 6
81816: PPUSH
81817: CALL_OW 12
81821: PPUSH
81822: LD_INT 1
81824: PPUSH
81825: CALL_OW 483
// end ;
81829: GO 81689
81831: POP
81832: POP
// end ;
81833: PPOPN 5
81835: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
81836: LD_EXP 75
81840: PUSH
81841: LD_EXP 110
81845: AND
81846: IFFALSE 81940
81848: GO 81850
81850: DISABLE
81851: LD_INT 0
81853: PPUSH
81854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
81855: LD_ADDR_VAR 0 2
81859: PUSH
81860: LD_INT 22
81862: PUSH
81863: LD_OWVAR 2
81867: PUSH
81868: EMPTY
81869: LIST
81870: LIST
81871: PUSH
81872: LD_INT 32
81874: PUSH
81875: LD_INT 1
81877: PUSH
81878: EMPTY
81879: LIST
81880: LIST
81881: PUSH
81882: LD_INT 21
81884: PUSH
81885: LD_INT 2
81887: PUSH
81888: EMPTY
81889: LIST
81890: LIST
81891: PUSH
81892: EMPTY
81893: LIST
81894: LIST
81895: LIST
81896: PPUSH
81897: CALL_OW 69
81901: ST_TO_ADDR
// if not tmp then
81902: LD_VAR 0 2
81906: NOT
81907: IFFALSE 81911
// exit ;
81909: GO 81940
// for i in tmp do
81911: LD_ADDR_VAR 0 1
81915: PUSH
81916: LD_VAR 0 2
81920: PUSH
81921: FOR_IN
81922: IFFALSE 81938
// SetFuel ( i , 0 ) ;
81924: LD_VAR 0 1
81928: PPUSH
81929: LD_INT 0
81931: PPUSH
81932: CALL_OW 240
81936: GO 81921
81938: POP
81939: POP
// end ;
81940: PPOPN 2
81942: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
81943: LD_EXP 75
81947: PUSH
81948: LD_EXP 111
81952: AND
81953: IFFALSE 82019
81955: GO 81957
81957: DISABLE
81958: LD_INT 0
81960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
81961: LD_ADDR_VAR 0 1
81965: PUSH
81966: LD_INT 22
81968: PUSH
81969: LD_OWVAR 2
81973: PUSH
81974: EMPTY
81975: LIST
81976: LIST
81977: PUSH
81978: LD_INT 30
81980: PUSH
81981: LD_INT 29
81983: PUSH
81984: EMPTY
81985: LIST
81986: LIST
81987: PUSH
81988: EMPTY
81989: LIST
81990: LIST
81991: PPUSH
81992: CALL_OW 69
81996: ST_TO_ADDR
// if not tmp then
81997: LD_VAR 0 1
82001: NOT
82002: IFFALSE 82006
// exit ;
82004: GO 82019
// DestroyUnit ( tmp [ 1 ] ) ;
82006: LD_VAR 0 1
82010: PUSH
82011: LD_INT 1
82013: ARRAY
82014: PPUSH
82015: CALL_OW 65
// end ;
82019: PPOPN 1
82021: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
82022: LD_EXP 75
82026: PUSH
82027: LD_EXP 113
82031: AND
82032: IFFALSE 82161
82034: GO 82036
82036: DISABLE
82037: LD_INT 0
82039: PPUSH
// begin uc_side := 0 ;
82040: LD_ADDR_OWVAR 20
82044: PUSH
82045: LD_INT 0
82047: ST_TO_ADDR
// uc_nation := nation_arabian ;
82048: LD_ADDR_OWVAR 21
82052: PUSH
82053: LD_INT 2
82055: ST_TO_ADDR
// hc_gallery :=  ;
82056: LD_ADDR_OWVAR 33
82060: PUSH
82061: LD_STRING 
82063: ST_TO_ADDR
// hc_name :=  ;
82064: LD_ADDR_OWVAR 26
82068: PUSH
82069: LD_STRING 
82071: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
82072: LD_INT 1
82074: PPUSH
82075: LD_INT 11
82077: PPUSH
82078: LD_INT 10
82080: PPUSH
82081: CALL_OW 380
// un := CreateHuman ;
82085: LD_ADDR_VAR 0 1
82089: PUSH
82090: CALL_OW 44
82094: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
82095: LD_VAR 0 1
82099: PPUSH
82100: LD_INT 1
82102: PPUSH
82103: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
82107: LD_INT 35
82109: PPUSH
82110: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
82114: LD_VAR 0 1
82118: PPUSH
82119: LD_INT 22
82121: PUSH
82122: LD_OWVAR 2
82126: PUSH
82127: EMPTY
82128: LIST
82129: LIST
82130: PPUSH
82131: CALL_OW 69
82135: PPUSH
82136: LD_VAR 0 1
82140: PPUSH
82141: CALL_OW 74
82145: PPUSH
82146: CALL_OW 115
// until IsDead ( un ) ;
82150: LD_VAR 0 1
82154: PPUSH
82155: CALL_OW 301
82159: IFFALSE 82107
// end ;
82161: PPOPN 1
82163: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
82164: LD_EXP 75
82168: PUSH
82169: LD_EXP 115
82173: AND
82174: IFFALSE 82186
82176: GO 82178
82178: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
82179: LD_STRING earthquake(getX(game), 0, 32)
82181: PPUSH
82182: CALL_OW 559
82186: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
82187: LD_EXP 75
82191: PUSH
82192: LD_EXP 116
82196: AND
82197: IFFALSE 82288
82199: GO 82201
82201: DISABLE
82202: LD_INT 0
82204: PPUSH
// begin enable ;
82205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
82206: LD_ADDR_VAR 0 1
82210: PUSH
82211: LD_INT 22
82213: PUSH
82214: LD_OWVAR 2
82218: PUSH
82219: EMPTY
82220: LIST
82221: LIST
82222: PUSH
82223: LD_INT 21
82225: PUSH
82226: LD_INT 2
82228: PUSH
82229: EMPTY
82230: LIST
82231: LIST
82232: PUSH
82233: LD_INT 33
82235: PUSH
82236: LD_INT 3
82238: PUSH
82239: EMPTY
82240: LIST
82241: LIST
82242: PUSH
82243: EMPTY
82244: LIST
82245: LIST
82246: LIST
82247: PPUSH
82248: CALL_OW 69
82252: ST_TO_ADDR
// if not tmp then
82253: LD_VAR 0 1
82257: NOT
82258: IFFALSE 82262
// exit ;
82260: GO 82288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
82262: LD_VAR 0 1
82266: PUSH
82267: LD_INT 1
82269: PPUSH
82270: LD_VAR 0 1
82274: PPUSH
82275: CALL_OW 12
82279: ARRAY
82280: PPUSH
82281: LD_INT 1
82283: PPUSH
82284: CALL_OW 234
// end ;
82288: PPOPN 1
82290: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
82291: LD_EXP 75
82295: PUSH
82296: LD_EXP 117
82300: AND
82301: IFFALSE 82442
82303: GO 82305
82305: DISABLE
82306: LD_INT 0
82308: PPUSH
82309: PPUSH
82310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82311: LD_ADDR_VAR 0 3
82315: PUSH
82316: LD_INT 22
82318: PUSH
82319: LD_OWVAR 2
82323: PUSH
82324: EMPTY
82325: LIST
82326: LIST
82327: PUSH
82328: LD_INT 25
82330: PUSH
82331: LD_INT 1
82333: PUSH
82334: EMPTY
82335: LIST
82336: LIST
82337: PUSH
82338: EMPTY
82339: LIST
82340: LIST
82341: PPUSH
82342: CALL_OW 69
82346: ST_TO_ADDR
// if not tmp then
82347: LD_VAR 0 3
82351: NOT
82352: IFFALSE 82356
// exit ;
82354: GO 82442
// un := tmp [ rand ( 1 , tmp ) ] ;
82356: LD_ADDR_VAR 0 2
82360: PUSH
82361: LD_VAR 0 3
82365: PUSH
82366: LD_INT 1
82368: PPUSH
82369: LD_VAR 0 3
82373: PPUSH
82374: CALL_OW 12
82378: ARRAY
82379: ST_TO_ADDR
// if Crawls ( un ) then
82380: LD_VAR 0 2
82384: PPUSH
82385: CALL_OW 318
82389: IFFALSE 82400
// ComWalk ( un ) ;
82391: LD_VAR 0 2
82395: PPUSH
82396: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
82400: LD_VAR 0 2
82404: PPUSH
82405: LD_INT 9
82407: PPUSH
82408: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
82412: LD_INT 28
82414: PPUSH
82415: LD_OWVAR 2
82419: PPUSH
82420: LD_INT 2
82422: PPUSH
82423: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
82427: LD_INT 29
82429: PPUSH
82430: LD_OWVAR 2
82434: PPUSH
82435: LD_INT 2
82437: PPUSH
82438: CALL_OW 322
// end ;
82442: PPOPN 3
82444: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
82445: LD_EXP 75
82449: PUSH
82450: LD_EXP 118
82454: AND
82455: IFFALSE 82566
82457: GO 82459
82459: DISABLE
82460: LD_INT 0
82462: PPUSH
82463: PPUSH
82464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
82465: LD_ADDR_VAR 0 3
82469: PUSH
82470: LD_INT 22
82472: PUSH
82473: LD_OWVAR 2
82477: PUSH
82478: EMPTY
82479: LIST
82480: LIST
82481: PUSH
82482: LD_INT 25
82484: PUSH
82485: LD_INT 1
82487: PUSH
82488: EMPTY
82489: LIST
82490: LIST
82491: PUSH
82492: EMPTY
82493: LIST
82494: LIST
82495: PPUSH
82496: CALL_OW 69
82500: ST_TO_ADDR
// if not tmp then
82501: LD_VAR 0 3
82505: NOT
82506: IFFALSE 82510
// exit ;
82508: GO 82566
// un := tmp [ rand ( 1 , tmp ) ] ;
82510: LD_ADDR_VAR 0 2
82514: PUSH
82515: LD_VAR 0 3
82519: PUSH
82520: LD_INT 1
82522: PPUSH
82523: LD_VAR 0 3
82527: PPUSH
82528: CALL_OW 12
82532: ARRAY
82533: ST_TO_ADDR
// if Crawls ( un ) then
82534: LD_VAR 0 2
82538: PPUSH
82539: CALL_OW 318
82543: IFFALSE 82554
// ComWalk ( un ) ;
82545: LD_VAR 0 2
82549: PPUSH
82550: CALL_OW 138
// SetClass ( un , class_mortar ) ;
82554: LD_VAR 0 2
82558: PPUSH
82559: LD_INT 8
82561: PPUSH
82562: CALL_OW 336
// end ;
82566: PPOPN 3
82568: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
82569: LD_EXP 75
82573: PUSH
82574: LD_EXP 119
82578: AND
82579: IFFALSE 82723
82581: GO 82583
82583: DISABLE
82584: LD_INT 0
82586: PPUSH
82587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
82588: LD_ADDR_VAR 0 2
82592: PUSH
82593: LD_INT 22
82595: PUSH
82596: LD_OWVAR 2
82600: PUSH
82601: EMPTY
82602: LIST
82603: LIST
82604: PUSH
82605: LD_INT 21
82607: PUSH
82608: LD_INT 2
82610: PUSH
82611: EMPTY
82612: LIST
82613: LIST
82614: PUSH
82615: LD_INT 2
82617: PUSH
82618: LD_INT 34
82620: PUSH
82621: LD_INT 12
82623: PUSH
82624: EMPTY
82625: LIST
82626: LIST
82627: PUSH
82628: LD_INT 34
82630: PUSH
82631: LD_INT 51
82633: PUSH
82634: EMPTY
82635: LIST
82636: LIST
82637: PUSH
82638: LD_INT 34
82640: PUSH
82641: LD_INT 32
82643: PUSH
82644: EMPTY
82645: LIST
82646: LIST
82647: PUSH
82648: EMPTY
82649: LIST
82650: LIST
82651: LIST
82652: LIST
82653: PUSH
82654: EMPTY
82655: LIST
82656: LIST
82657: LIST
82658: PPUSH
82659: CALL_OW 69
82663: ST_TO_ADDR
// if not tmp then
82664: LD_VAR 0 2
82668: NOT
82669: IFFALSE 82673
// exit ;
82671: GO 82723
// for i in tmp do
82673: LD_ADDR_VAR 0 1
82677: PUSH
82678: LD_VAR 0 2
82682: PUSH
82683: FOR_IN
82684: IFFALSE 82721
// if GetCargo ( i , mat_artifact ) = 0 then
82686: LD_VAR 0 1
82690: PPUSH
82691: LD_INT 4
82693: PPUSH
82694: CALL_OW 289
82698: PUSH
82699: LD_INT 0
82701: EQUAL
82702: IFFALSE 82719
// SetCargo ( i , mat_siberit , 100 ) ;
82704: LD_VAR 0 1
82708: PPUSH
82709: LD_INT 3
82711: PPUSH
82712: LD_INT 100
82714: PPUSH
82715: CALL_OW 290
82719: GO 82683
82721: POP
82722: POP
// end ;
82723: PPOPN 2
82725: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
82726: LD_EXP 75
82730: PUSH
82731: LD_EXP 120
82735: AND
82736: IFFALSE 82919
82738: GO 82740
82740: DISABLE
82741: LD_INT 0
82743: PPUSH
82744: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
82745: LD_ADDR_VAR 0 2
82749: PUSH
82750: LD_INT 22
82752: PUSH
82753: LD_OWVAR 2
82757: PUSH
82758: EMPTY
82759: LIST
82760: LIST
82761: PPUSH
82762: CALL_OW 69
82766: ST_TO_ADDR
// if not tmp then
82767: LD_VAR 0 2
82771: NOT
82772: IFFALSE 82776
// exit ;
82774: GO 82919
// for i := 1 to 2 do
82776: LD_ADDR_VAR 0 1
82780: PUSH
82781: DOUBLE
82782: LD_INT 1
82784: DEC
82785: ST_TO_ADDR
82786: LD_INT 2
82788: PUSH
82789: FOR_TO
82790: IFFALSE 82917
// begin uc_side := your_side ;
82792: LD_ADDR_OWVAR 20
82796: PUSH
82797: LD_OWVAR 2
82801: ST_TO_ADDR
// uc_nation := nation_american ;
82802: LD_ADDR_OWVAR 21
82806: PUSH
82807: LD_INT 1
82809: ST_TO_ADDR
// vc_chassis := us_morphling ;
82810: LD_ADDR_OWVAR 37
82814: PUSH
82815: LD_INT 5
82817: ST_TO_ADDR
// vc_engine := engine_siberite ;
82818: LD_ADDR_OWVAR 39
82822: PUSH
82823: LD_INT 3
82825: ST_TO_ADDR
// vc_control := control_computer ;
82826: LD_ADDR_OWVAR 38
82830: PUSH
82831: LD_INT 3
82833: ST_TO_ADDR
// vc_weapon := us_double_laser ;
82834: LD_ADDR_OWVAR 40
82838: PUSH
82839: LD_INT 10
82841: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
82842: LD_VAR 0 2
82846: PUSH
82847: LD_INT 1
82849: ARRAY
82850: PPUSH
82851: CALL_OW 310
82855: NOT
82856: IFFALSE 82903
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
82858: CALL_OW 45
82862: PPUSH
82863: LD_VAR 0 2
82867: PUSH
82868: LD_INT 1
82870: ARRAY
82871: PPUSH
82872: CALL_OW 250
82876: PPUSH
82877: LD_VAR 0 2
82881: PUSH
82882: LD_INT 1
82884: ARRAY
82885: PPUSH
82886: CALL_OW 251
82890: PPUSH
82891: LD_INT 12
82893: PPUSH
82894: LD_INT 1
82896: PPUSH
82897: CALL_OW 50
82901: GO 82915
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
82903: CALL_OW 45
82907: PPUSH
82908: LD_INT 1
82910: PPUSH
82911: CALL_OW 51
// end ;
82915: GO 82789
82917: POP
82918: POP
// end ;
82919: PPOPN 2
82921: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
82922: LD_EXP 75
82926: PUSH
82927: LD_EXP 121
82931: AND
82932: IFFALSE 83154
82934: GO 82936
82936: DISABLE
82937: LD_INT 0
82939: PPUSH
82940: PPUSH
82941: PPUSH
82942: PPUSH
82943: PPUSH
82944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
82945: LD_ADDR_VAR 0 6
82949: PUSH
82950: LD_INT 22
82952: PUSH
82953: LD_OWVAR 2
82957: PUSH
82958: EMPTY
82959: LIST
82960: LIST
82961: PUSH
82962: LD_INT 21
82964: PUSH
82965: LD_INT 1
82967: PUSH
82968: EMPTY
82969: LIST
82970: LIST
82971: PUSH
82972: LD_INT 3
82974: PUSH
82975: LD_INT 23
82977: PUSH
82978: LD_INT 0
82980: PUSH
82981: EMPTY
82982: LIST
82983: LIST
82984: PUSH
82985: EMPTY
82986: LIST
82987: LIST
82988: PUSH
82989: EMPTY
82990: LIST
82991: LIST
82992: LIST
82993: PPUSH
82994: CALL_OW 69
82998: ST_TO_ADDR
// if not tmp then
82999: LD_VAR 0 6
83003: NOT
83004: IFFALSE 83008
// exit ;
83006: GO 83154
// s1 := rand ( 1 , 4 ) ;
83008: LD_ADDR_VAR 0 2
83012: PUSH
83013: LD_INT 1
83015: PPUSH
83016: LD_INT 4
83018: PPUSH
83019: CALL_OW 12
83023: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
83024: LD_ADDR_VAR 0 4
83028: PUSH
83029: LD_VAR 0 6
83033: PUSH
83034: LD_INT 1
83036: ARRAY
83037: PPUSH
83038: LD_VAR 0 2
83042: PPUSH
83043: CALL_OW 259
83047: ST_TO_ADDR
// if s1 = 1 then
83048: LD_VAR 0 2
83052: PUSH
83053: LD_INT 1
83055: EQUAL
83056: IFFALSE 83076
// s2 := rand ( 2 , 4 ) else
83058: LD_ADDR_VAR 0 3
83062: PUSH
83063: LD_INT 2
83065: PPUSH
83066: LD_INT 4
83068: PPUSH
83069: CALL_OW 12
83073: ST_TO_ADDR
83074: GO 83084
// s2 := 1 ;
83076: LD_ADDR_VAR 0 3
83080: PUSH
83081: LD_INT 1
83083: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
83084: LD_ADDR_VAR 0 5
83088: PUSH
83089: LD_VAR 0 6
83093: PUSH
83094: LD_INT 1
83096: ARRAY
83097: PPUSH
83098: LD_VAR 0 3
83102: PPUSH
83103: CALL_OW 259
83107: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
83108: LD_VAR 0 6
83112: PUSH
83113: LD_INT 1
83115: ARRAY
83116: PPUSH
83117: LD_VAR 0 2
83121: PPUSH
83122: LD_VAR 0 5
83126: PPUSH
83127: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
83131: LD_VAR 0 6
83135: PUSH
83136: LD_INT 1
83138: ARRAY
83139: PPUSH
83140: LD_VAR 0 3
83144: PPUSH
83145: LD_VAR 0 4
83149: PPUSH
83150: CALL_OW 237
// end ;
83154: PPOPN 6
83156: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
83157: LD_EXP 75
83161: PUSH
83162: LD_EXP 122
83166: AND
83167: IFFALSE 83246
83169: GO 83171
83171: DISABLE
83172: LD_INT 0
83174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
83175: LD_ADDR_VAR 0 1
83179: PUSH
83180: LD_INT 22
83182: PUSH
83183: LD_OWVAR 2
83187: PUSH
83188: EMPTY
83189: LIST
83190: LIST
83191: PUSH
83192: LD_INT 30
83194: PUSH
83195: LD_INT 3
83197: PUSH
83198: EMPTY
83199: LIST
83200: LIST
83201: PUSH
83202: EMPTY
83203: LIST
83204: LIST
83205: PPUSH
83206: CALL_OW 69
83210: ST_TO_ADDR
// if not tmp then
83211: LD_VAR 0 1
83215: NOT
83216: IFFALSE 83220
// exit ;
83218: GO 83246
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
83220: LD_VAR 0 1
83224: PUSH
83225: LD_INT 1
83227: PPUSH
83228: LD_VAR 0 1
83232: PPUSH
83233: CALL_OW 12
83237: ARRAY
83238: PPUSH
83239: LD_INT 1
83241: PPUSH
83242: CALL_OW 234
// end ;
83246: PPOPN 1
83248: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
83249: LD_EXP 75
83253: PUSH
83254: LD_EXP 123
83258: AND
83259: IFFALSE 83371
83261: GO 83263
83263: DISABLE
83264: LD_INT 0
83266: PPUSH
83267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
83268: LD_ADDR_VAR 0 2
83272: PUSH
83273: LD_INT 22
83275: PUSH
83276: LD_OWVAR 2
83280: PUSH
83281: EMPTY
83282: LIST
83283: LIST
83284: PUSH
83285: LD_INT 2
83287: PUSH
83288: LD_INT 30
83290: PUSH
83291: LD_INT 27
83293: PUSH
83294: EMPTY
83295: LIST
83296: LIST
83297: PUSH
83298: LD_INT 30
83300: PUSH
83301: LD_INT 26
83303: PUSH
83304: EMPTY
83305: LIST
83306: LIST
83307: PUSH
83308: LD_INT 30
83310: PUSH
83311: LD_INT 28
83313: PUSH
83314: EMPTY
83315: LIST
83316: LIST
83317: PUSH
83318: EMPTY
83319: LIST
83320: LIST
83321: LIST
83322: LIST
83323: PUSH
83324: EMPTY
83325: LIST
83326: LIST
83327: PPUSH
83328: CALL_OW 69
83332: ST_TO_ADDR
// if not tmp then
83333: LD_VAR 0 2
83337: NOT
83338: IFFALSE 83342
// exit ;
83340: GO 83371
// for i in tmp do
83342: LD_ADDR_VAR 0 1
83346: PUSH
83347: LD_VAR 0 2
83351: PUSH
83352: FOR_IN
83353: IFFALSE 83369
// SetLives ( i , 1 ) ;
83355: LD_VAR 0 1
83359: PPUSH
83360: LD_INT 1
83362: PPUSH
83363: CALL_OW 234
83367: GO 83352
83369: POP
83370: POP
// end ;
83371: PPOPN 2
83373: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
83374: LD_EXP 75
83378: PUSH
83379: LD_EXP 124
83383: AND
83384: IFFALSE 83671
83386: GO 83388
83388: DISABLE
83389: LD_INT 0
83391: PPUSH
83392: PPUSH
83393: PPUSH
// begin i := rand ( 1 , 7 ) ;
83394: LD_ADDR_VAR 0 1
83398: PUSH
83399: LD_INT 1
83401: PPUSH
83402: LD_INT 7
83404: PPUSH
83405: CALL_OW 12
83409: ST_TO_ADDR
// case i of 1 :
83410: LD_VAR 0 1
83414: PUSH
83415: LD_INT 1
83417: DOUBLE
83418: EQUAL
83419: IFTRUE 83423
83421: GO 83433
83423: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
83424: LD_STRING earthquake(getX(game), 0, 32)
83426: PPUSH
83427: CALL_OW 559
83431: GO 83671
83433: LD_INT 2
83435: DOUBLE
83436: EQUAL
83437: IFTRUE 83441
83439: GO 83455
83441: POP
// begin ToLua ( displayStucuk(); ) ;
83442: LD_STRING displayStucuk();
83444: PPUSH
83445: CALL_OW 559
// ResetFog ;
83449: CALL_OW 335
// end ; 3 :
83453: GO 83671
83455: LD_INT 3
83457: DOUBLE
83458: EQUAL
83459: IFTRUE 83463
83461: GO 83567
83463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
83464: LD_ADDR_VAR 0 2
83468: PUSH
83469: LD_INT 22
83471: PUSH
83472: LD_OWVAR 2
83476: PUSH
83477: EMPTY
83478: LIST
83479: LIST
83480: PUSH
83481: LD_INT 25
83483: PUSH
83484: LD_INT 1
83486: PUSH
83487: EMPTY
83488: LIST
83489: LIST
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: PPUSH
83495: CALL_OW 69
83499: ST_TO_ADDR
// if not tmp then
83500: LD_VAR 0 2
83504: NOT
83505: IFFALSE 83509
// exit ;
83507: GO 83671
// un := tmp [ rand ( 1 , tmp ) ] ;
83509: LD_ADDR_VAR 0 3
83513: PUSH
83514: LD_VAR 0 2
83518: PUSH
83519: LD_INT 1
83521: PPUSH
83522: LD_VAR 0 2
83526: PPUSH
83527: CALL_OW 12
83531: ARRAY
83532: ST_TO_ADDR
// if Crawls ( un ) then
83533: LD_VAR 0 3
83537: PPUSH
83538: CALL_OW 318
83542: IFFALSE 83553
// ComWalk ( un ) ;
83544: LD_VAR 0 3
83548: PPUSH
83549: CALL_OW 138
// SetClass ( un , class_mortar ) ;
83553: LD_VAR 0 3
83557: PPUSH
83558: LD_INT 8
83560: PPUSH
83561: CALL_OW 336
// end ; 4 :
83565: GO 83671
83567: LD_INT 4
83569: DOUBLE
83570: EQUAL
83571: IFTRUE 83575
83573: GO 83649
83575: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
83576: LD_ADDR_VAR 0 2
83580: PUSH
83581: LD_INT 22
83583: PUSH
83584: LD_OWVAR 2
83588: PUSH
83589: EMPTY
83590: LIST
83591: LIST
83592: PUSH
83593: LD_INT 30
83595: PUSH
83596: LD_INT 29
83598: PUSH
83599: EMPTY
83600: LIST
83601: LIST
83602: PUSH
83603: EMPTY
83604: LIST
83605: LIST
83606: PPUSH
83607: CALL_OW 69
83611: ST_TO_ADDR
// if not tmp then
83612: LD_VAR 0 2
83616: NOT
83617: IFFALSE 83621
// exit ;
83619: GO 83671
// CenterNowOnUnits ( tmp [ 1 ] ) ;
83621: LD_VAR 0 2
83625: PUSH
83626: LD_INT 1
83628: ARRAY
83629: PPUSH
83630: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
83634: LD_VAR 0 2
83638: PUSH
83639: LD_INT 1
83641: ARRAY
83642: PPUSH
83643: CALL_OW 65
// end ; 5 .. 7 :
83647: GO 83671
83649: LD_INT 5
83651: DOUBLE
83652: GREATEREQUAL
83653: IFFALSE 83661
83655: LD_INT 7
83657: DOUBLE
83658: LESSEQUAL
83659: IFTRUE 83663
83661: GO 83670
83663: POP
// StreamSibBomb ; end ;
83664: CALL 79908 0 0
83668: GO 83671
83670: POP
// end ;
83671: PPOPN 3
83673: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
83674: LD_EXP 75
83678: PUSH
83679: LD_EXP 125
83683: AND
83684: IFFALSE 83840
83686: GO 83688
83688: DISABLE
83689: LD_INT 0
83691: PPUSH
83692: PPUSH
83693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
83694: LD_ADDR_VAR 0 2
83698: PUSH
83699: LD_INT 81
83701: PUSH
83702: LD_OWVAR 2
83706: PUSH
83707: EMPTY
83708: LIST
83709: LIST
83710: PUSH
83711: LD_INT 2
83713: PUSH
83714: LD_INT 21
83716: PUSH
83717: LD_INT 1
83719: PUSH
83720: EMPTY
83721: LIST
83722: LIST
83723: PUSH
83724: LD_INT 21
83726: PUSH
83727: LD_INT 2
83729: PUSH
83730: EMPTY
83731: LIST
83732: LIST
83733: PUSH
83734: EMPTY
83735: LIST
83736: LIST
83737: LIST
83738: PUSH
83739: EMPTY
83740: LIST
83741: LIST
83742: PPUSH
83743: CALL_OW 69
83747: ST_TO_ADDR
// if not tmp then
83748: LD_VAR 0 2
83752: NOT
83753: IFFALSE 83757
// exit ;
83755: GO 83840
// p := 0 ;
83757: LD_ADDR_VAR 0 3
83761: PUSH
83762: LD_INT 0
83764: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
83765: LD_INT 35
83767: PPUSH
83768: CALL_OW 67
// p := p + 1 ;
83772: LD_ADDR_VAR 0 3
83776: PUSH
83777: LD_VAR 0 3
83781: PUSH
83782: LD_INT 1
83784: PLUS
83785: ST_TO_ADDR
// for i in tmp do
83786: LD_ADDR_VAR 0 1
83790: PUSH
83791: LD_VAR 0 2
83795: PUSH
83796: FOR_IN
83797: IFFALSE 83828
// if GetLives ( i ) < 1000 then
83799: LD_VAR 0 1
83803: PPUSH
83804: CALL_OW 256
83808: PUSH
83809: LD_INT 1000
83811: LESS
83812: IFFALSE 83826
// SetLives ( i , 1000 ) ;
83814: LD_VAR 0 1
83818: PPUSH
83819: LD_INT 1000
83821: PPUSH
83822: CALL_OW 234
83826: GO 83796
83828: POP
83829: POP
// until p > 20 ;
83830: LD_VAR 0 3
83834: PUSH
83835: LD_INT 20
83837: GREATER
83838: IFFALSE 83765
// end ;
83840: PPOPN 3
83842: END
// every 0 0$1 trigger StreamModeActive and sTime do
83843: LD_EXP 75
83847: PUSH
83848: LD_EXP 126
83852: AND
83853: IFFALSE 83888
83855: GO 83857
83857: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
83858: LD_INT 28
83860: PPUSH
83861: LD_OWVAR 2
83865: PPUSH
83866: LD_INT 2
83868: PPUSH
83869: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
83873: LD_INT 30
83875: PPUSH
83876: LD_OWVAR 2
83880: PPUSH
83881: LD_INT 2
83883: PPUSH
83884: CALL_OW 322
// end ;
83888: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
83889: LD_EXP 75
83893: PUSH
83894: LD_EXP 127
83898: AND
83899: IFFALSE 84020
83901: GO 83903
83903: DISABLE
83904: LD_INT 0
83906: PPUSH
83907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
83908: LD_ADDR_VAR 0 2
83912: PUSH
83913: LD_INT 22
83915: PUSH
83916: LD_OWVAR 2
83920: PUSH
83921: EMPTY
83922: LIST
83923: LIST
83924: PUSH
83925: LD_INT 21
83927: PUSH
83928: LD_INT 1
83930: PUSH
83931: EMPTY
83932: LIST
83933: LIST
83934: PUSH
83935: LD_INT 3
83937: PUSH
83938: LD_INT 23
83940: PUSH
83941: LD_INT 0
83943: PUSH
83944: EMPTY
83945: LIST
83946: LIST
83947: PUSH
83948: EMPTY
83949: LIST
83950: LIST
83951: PUSH
83952: EMPTY
83953: LIST
83954: LIST
83955: LIST
83956: PPUSH
83957: CALL_OW 69
83961: ST_TO_ADDR
// if not tmp then
83962: LD_VAR 0 2
83966: NOT
83967: IFFALSE 83971
// exit ;
83969: GO 84020
// for i in tmp do
83971: LD_ADDR_VAR 0 1
83975: PUSH
83976: LD_VAR 0 2
83980: PUSH
83981: FOR_IN
83982: IFFALSE 84018
// begin if Crawls ( i ) then
83984: LD_VAR 0 1
83988: PPUSH
83989: CALL_OW 318
83993: IFFALSE 84004
// ComWalk ( i ) ;
83995: LD_VAR 0 1
83999: PPUSH
84000: CALL_OW 138
// SetClass ( i , 2 ) ;
84004: LD_VAR 0 1
84008: PPUSH
84009: LD_INT 2
84011: PPUSH
84012: CALL_OW 336
// end ;
84016: GO 83981
84018: POP
84019: POP
// end ;
84020: PPOPN 2
84022: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
84023: LD_EXP 75
84027: PUSH
84028: LD_EXP 128
84032: AND
84033: IFFALSE 84321
84035: GO 84037
84037: DISABLE
84038: LD_INT 0
84040: PPUSH
84041: PPUSH
84042: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
84043: LD_OWVAR 2
84047: PPUSH
84048: LD_INT 9
84050: PPUSH
84051: LD_INT 1
84053: PPUSH
84054: LD_INT 1
84056: PPUSH
84057: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
84061: LD_INT 9
84063: PPUSH
84064: LD_OWVAR 2
84068: PPUSH
84069: CALL_OW 343
// uc_side := 9 ;
84073: LD_ADDR_OWVAR 20
84077: PUSH
84078: LD_INT 9
84080: ST_TO_ADDR
// uc_nation := 2 ;
84081: LD_ADDR_OWVAR 21
84085: PUSH
84086: LD_INT 2
84088: ST_TO_ADDR
// hc_name := Dark Warrior ;
84089: LD_ADDR_OWVAR 26
84093: PUSH
84094: LD_STRING Dark Warrior
84096: ST_TO_ADDR
// hc_gallery :=  ;
84097: LD_ADDR_OWVAR 33
84101: PUSH
84102: LD_STRING 
84104: ST_TO_ADDR
// hc_noskilllimit := true ;
84105: LD_ADDR_OWVAR 76
84109: PUSH
84110: LD_INT 1
84112: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
84113: LD_ADDR_OWVAR 31
84117: PUSH
84118: LD_INT 30
84120: PUSH
84121: LD_INT 30
84123: PUSH
84124: LD_INT 30
84126: PUSH
84127: LD_INT 30
84129: PUSH
84130: EMPTY
84131: LIST
84132: LIST
84133: LIST
84134: LIST
84135: ST_TO_ADDR
// un := CreateHuman ;
84136: LD_ADDR_VAR 0 3
84140: PUSH
84141: CALL_OW 44
84145: ST_TO_ADDR
// hc_noskilllimit := false ;
84146: LD_ADDR_OWVAR 76
84150: PUSH
84151: LD_INT 0
84153: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
84154: LD_VAR 0 3
84158: PPUSH
84159: LD_INT 1
84161: PPUSH
84162: CALL_OW 51
// ToLua ( playRanger() ) ;
84166: LD_STRING playRanger()
84168: PPUSH
84169: CALL_OW 559
// p := 0 ;
84173: LD_ADDR_VAR 0 2
84177: PUSH
84178: LD_INT 0
84180: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
84181: LD_INT 35
84183: PPUSH
84184: CALL_OW 67
// p := p + 1 ;
84188: LD_ADDR_VAR 0 2
84192: PUSH
84193: LD_VAR 0 2
84197: PUSH
84198: LD_INT 1
84200: PLUS
84201: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
84202: LD_VAR 0 3
84206: PPUSH
84207: CALL_OW 256
84211: PUSH
84212: LD_INT 1000
84214: LESS
84215: IFFALSE 84229
// SetLives ( un , 1000 ) ;
84217: LD_VAR 0 3
84221: PPUSH
84222: LD_INT 1000
84224: PPUSH
84225: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
84229: LD_VAR 0 3
84233: PPUSH
84234: LD_INT 81
84236: PUSH
84237: LD_OWVAR 2
84241: PUSH
84242: EMPTY
84243: LIST
84244: LIST
84245: PUSH
84246: LD_INT 91
84248: PUSH
84249: LD_VAR 0 3
84253: PUSH
84254: LD_INT 30
84256: PUSH
84257: EMPTY
84258: LIST
84259: LIST
84260: LIST
84261: PUSH
84262: EMPTY
84263: LIST
84264: LIST
84265: PPUSH
84266: CALL_OW 69
84270: PPUSH
84271: LD_VAR 0 3
84275: PPUSH
84276: CALL_OW 74
84280: PPUSH
84281: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
84285: LD_VAR 0 2
84289: PUSH
84290: LD_INT 80
84292: GREATER
84293: PUSH
84294: LD_VAR 0 3
84298: PPUSH
84299: CALL_OW 301
84303: OR
84304: IFFALSE 84181
// if un then
84306: LD_VAR 0 3
84310: IFFALSE 84321
// RemoveUnit ( un ) ;
84312: LD_VAR 0 3
84316: PPUSH
84317: CALL_OW 64
// end ;
84321: PPOPN 3
84323: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
84324: LD_EXP 129
84328: IFFALSE 84444
84330: GO 84332
84332: DISABLE
84333: LD_INT 0
84335: PPUSH
84336: PPUSH
84337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
84338: LD_ADDR_VAR 0 2
84342: PUSH
84343: LD_INT 81
84345: PUSH
84346: LD_OWVAR 2
84350: PUSH
84351: EMPTY
84352: LIST
84353: LIST
84354: PUSH
84355: LD_INT 21
84357: PUSH
84358: LD_INT 1
84360: PUSH
84361: EMPTY
84362: LIST
84363: LIST
84364: PUSH
84365: EMPTY
84366: LIST
84367: LIST
84368: PPUSH
84369: CALL_OW 69
84373: ST_TO_ADDR
// ToLua ( playComputer() ) ;
84374: LD_STRING playComputer()
84376: PPUSH
84377: CALL_OW 559
// if not tmp then
84381: LD_VAR 0 2
84385: NOT
84386: IFFALSE 84390
// exit ;
84388: GO 84444
// for i in tmp do
84390: LD_ADDR_VAR 0 1
84394: PUSH
84395: LD_VAR 0 2
84399: PUSH
84400: FOR_IN
84401: IFFALSE 84442
// for j := 1 to 4 do
84403: LD_ADDR_VAR 0 3
84407: PUSH
84408: DOUBLE
84409: LD_INT 1
84411: DEC
84412: ST_TO_ADDR
84413: LD_INT 4
84415: PUSH
84416: FOR_TO
84417: IFFALSE 84438
// SetSkill ( i , j , 10 ) ;
84419: LD_VAR 0 1
84423: PPUSH
84424: LD_VAR 0 3
84428: PPUSH
84429: LD_INT 10
84431: PPUSH
84432: CALL_OW 237
84436: GO 84416
84438: POP
84439: POP
84440: GO 84400
84442: POP
84443: POP
// end ;
84444: PPOPN 3
84446: END
// every 0 0$1 trigger s30 do var i , tmp ;
84447: LD_EXP 130
84451: IFFALSE 84520
84453: GO 84455
84455: DISABLE
84456: LD_INT 0
84458: PPUSH
84459: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84460: LD_ADDR_VAR 0 2
84464: PUSH
84465: LD_INT 22
84467: PUSH
84468: LD_OWVAR 2
84472: PUSH
84473: EMPTY
84474: LIST
84475: LIST
84476: PPUSH
84477: CALL_OW 69
84481: ST_TO_ADDR
// if not tmp then
84482: LD_VAR 0 2
84486: NOT
84487: IFFALSE 84491
// exit ;
84489: GO 84520
// for i in tmp do
84491: LD_ADDR_VAR 0 1
84495: PUSH
84496: LD_VAR 0 2
84500: PUSH
84501: FOR_IN
84502: IFFALSE 84518
// SetLives ( i , 300 ) ;
84504: LD_VAR 0 1
84508: PPUSH
84509: LD_INT 300
84511: PPUSH
84512: CALL_OW 234
84516: GO 84501
84518: POP
84519: POP
// end ;
84520: PPOPN 2
84522: END
// every 0 0$1 trigger s60 do var i , tmp ;
84523: LD_EXP 131
84527: IFFALSE 84596
84529: GO 84531
84531: DISABLE
84532: LD_INT 0
84534: PPUSH
84535: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
84536: LD_ADDR_VAR 0 2
84540: PUSH
84541: LD_INT 22
84543: PUSH
84544: LD_OWVAR 2
84548: PUSH
84549: EMPTY
84550: LIST
84551: LIST
84552: PPUSH
84553: CALL_OW 69
84557: ST_TO_ADDR
// if not tmp then
84558: LD_VAR 0 2
84562: NOT
84563: IFFALSE 84567
// exit ;
84565: GO 84596
// for i in tmp do
84567: LD_ADDR_VAR 0 1
84571: PUSH
84572: LD_VAR 0 2
84576: PUSH
84577: FOR_IN
84578: IFFALSE 84594
// SetLives ( i , 600 ) ;
84580: LD_VAR 0 1
84584: PPUSH
84585: LD_INT 600
84587: PPUSH
84588: CALL_OW 234
84592: GO 84577
84594: POP
84595: POP
// end ;
84596: PPOPN 2
84598: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
84599: LD_INT 0
84601: PPUSH
// case cmd of 301 :
84602: LD_VAR 0 1
84606: PUSH
84607: LD_INT 301
84609: DOUBLE
84610: EQUAL
84611: IFTRUE 84615
84613: GO 84647
84615: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
84616: LD_VAR 0 6
84620: PPUSH
84621: LD_VAR 0 7
84625: PPUSH
84626: LD_VAR 0 8
84630: PPUSH
84631: LD_VAR 0 4
84635: PPUSH
84636: LD_VAR 0 5
84640: PPUSH
84641: CALL 85856 0 5
84645: GO 84768
84647: LD_INT 302
84649: DOUBLE
84650: EQUAL
84651: IFTRUE 84655
84653: GO 84692
84655: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
84656: LD_VAR 0 6
84660: PPUSH
84661: LD_VAR 0 7
84665: PPUSH
84666: LD_VAR 0 8
84670: PPUSH
84671: LD_VAR 0 9
84675: PPUSH
84676: LD_VAR 0 4
84680: PPUSH
84681: LD_VAR 0 5
84685: PPUSH
84686: CALL 85947 0 6
84690: GO 84768
84692: LD_INT 303
84694: DOUBLE
84695: EQUAL
84696: IFTRUE 84700
84698: GO 84737
84700: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
84701: LD_VAR 0 6
84705: PPUSH
84706: LD_VAR 0 7
84710: PPUSH
84711: LD_VAR 0 8
84715: PPUSH
84716: LD_VAR 0 9
84720: PPUSH
84721: LD_VAR 0 4
84725: PPUSH
84726: LD_VAR 0 5
84730: PPUSH
84731: CALL 84773 0 6
84735: GO 84768
84737: LD_INT 304
84739: DOUBLE
84740: EQUAL
84741: IFTRUE 84745
84743: GO 84767
84745: POP
// hHackTeleport ( unit , x , y ) ; end ;
84746: LD_VAR 0 2
84750: PPUSH
84751: LD_VAR 0 4
84755: PPUSH
84756: LD_VAR 0 5
84760: PPUSH
84761: CALL 86540 0 3
84765: GO 84768
84767: POP
// end ;
84768: LD_VAR 0 12
84772: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
84773: LD_INT 0
84775: PPUSH
84776: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
84777: LD_VAR 0 1
84781: PUSH
84782: LD_INT 1
84784: LESS
84785: PUSH
84786: LD_VAR 0 1
84790: PUSH
84791: LD_INT 3
84793: GREATER
84794: OR
84795: PUSH
84796: LD_VAR 0 5
84800: PPUSH
84801: LD_VAR 0 6
84805: PPUSH
84806: CALL_OW 428
84810: OR
84811: IFFALSE 84815
// exit ;
84813: GO 85543
// uc_side := your_side ;
84815: LD_ADDR_OWVAR 20
84819: PUSH
84820: LD_OWVAR 2
84824: ST_TO_ADDR
// uc_nation := nation ;
84825: LD_ADDR_OWVAR 21
84829: PUSH
84830: LD_VAR 0 1
84834: ST_TO_ADDR
// bc_level = 1 ;
84835: LD_ADDR_OWVAR 43
84839: PUSH
84840: LD_INT 1
84842: ST_TO_ADDR
// case btype of 1 :
84843: LD_VAR 0 2
84847: PUSH
84848: LD_INT 1
84850: DOUBLE
84851: EQUAL
84852: IFTRUE 84856
84854: GO 84867
84856: POP
// bc_type := b_depot ; 2 :
84857: LD_ADDR_OWVAR 42
84861: PUSH
84862: LD_INT 0
84864: ST_TO_ADDR
84865: GO 85487
84867: LD_INT 2
84869: DOUBLE
84870: EQUAL
84871: IFTRUE 84875
84873: GO 84886
84875: POP
// bc_type := b_warehouse ; 3 :
84876: LD_ADDR_OWVAR 42
84880: PUSH
84881: LD_INT 1
84883: ST_TO_ADDR
84884: GO 85487
84886: LD_INT 3
84888: DOUBLE
84889: EQUAL
84890: IFTRUE 84894
84892: GO 84905
84894: POP
// bc_type := b_lab ; 4 .. 9 :
84895: LD_ADDR_OWVAR 42
84899: PUSH
84900: LD_INT 6
84902: ST_TO_ADDR
84903: GO 85487
84905: LD_INT 4
84907: DOUBLE
84908: GREATEREQUAL
84909: IFFALSE 84917
84911: LD_INT 9
84913: DOUBLE
84914: LESSEQUAL
84915: IFTRUE 84919
84917: GO 84979
84919: POP
// begin bc_type := b_lab_half ;
84920: LD_ADDR_OWVAR 42
84924: PUSH
84925: LD_INT 7
84927: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
84928: LD_ADDR_OWVAR 44
84932: PUSH
84933: LD_INT 10
84935: PUSH
84936: LD_INT 11
84938: PUSH
84939: LD_INT 12
84941: PUSH
84942: LD_INT 15
84944: PUSH
84945: LD_INT 14
84947: PUSH
84948: LD_INT 13
84950: PUSH
84951: EMPTY
84952: LIST
84953: LIST
84954: LIST
84955: LIST
84956: LIST
84957: LIST
84958: PUSH
84959: LD_VAR 0 2
84963: PUSH
84964: LD_INT 3
84966: MINUS
84967: ARRAY
84968: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
84969: LD_ADDR_OWVAR 45
84973: PUSH
84974: LD_INT 9
84976: ST_TO_ADDR
// end ; 10 .. 13 :
84977: GO 85487
84979: LD_INT 10
84981: DOUBLE
84982: GREATEREQUAL
84983: IFFALSE 84991
84985: LD_INT 13
84987: DOUBLE
84988: LESSEQUAL
84989: IFTRUE 84993
84991: GO 85070
84993: POP
// begin bc_type := b_lab_full ;
84994: LD_ADDR_OWVAR 42
84998: PUSH
84999: LD_INT 8
85001: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
85002: LD_ADDR_OWVAR 44
85006: PUSH
85007: LD_INT 10
85009: PUSH
85010: LD_INT 12
85012: PUSH
85013: LD_INT 14
85015: PUSH
85016: LD_INT 13
85018: PUSH
85019: EMPTY
85020: LIST
85021: LIST
85022: LIST
85023: LIST
85024: PUSH
85025: LD_VAR 0 2
85029: PUSH
85030: LD_INT 9
85032: MINUS
85033: ARRAY
85034: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
85035: LD_ADDR_OWVAR 45
85039: PUSH
85040: LD_INT 11
85042: PUSH
85043: LD_INT 15
85045: PUSH
85046: LD_INT 12
85048: PUSH
85049: LD_INT 15
85051: PUSH
85052: EMPTY
85053: LIST
85054: LIST
85055: LIST
85056: LIST
85057: PUSH
85058: LD_VAR 0 2
85062: PUSH
85063: LD_INT 9
85065: MINUS
85066: ARRAY
85067: ST_TO_ADDR
// end ; 14 :
85068: GO 85487
85070: LD_INT 14
85072: DOUBLE
85073: EQUAL
85074: IFTRUE 85078
85076: GO 85089
85078: POP
// bc_type := b_workshop ; 15 :
85079: LD_ADDR_OWVAR 42
85083: PUSH
85084: LD_INT 2
85086: ST_TO_ADDR
85087: GO 85487
85089: LD_INT 15
85091: DOUBLE
85092: EQUAL
85093: IFTRUE 85097
85095: GO 85108
85097: POP
// bc_type := b_factory ; 16 :
85098: LD_ADDR_OWVAR 42
85102: PUSH
85103: LD_INT 3
85105: ST_TO_ADDR
85106: GO 85487
85108: LD_INT 16
85110: DOUBLE
85111: EQUAL
85112: IFTRUE 85116
85114: GO 85127
85116: POP
// bc_type := b_ext_gun ; 17 :
85117: LD_ADDR_OWVAR 42
85121: PUSH
85122: LD_INT 17
85124: ST_TO_ADDR
85125: GO 85487
85127: LD_INT 17
85129: DOUBLE
85130: EQUAL
85131: IFTRUE 85135
85133: GO 85163
85135: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
85136: LD_ADDR_OWVAR 42
85140: PUSH
85141: LD_INT 19
85143: PUSH
85144: LD_INT 23
85146: PUSH
85147: LD_INT 19
85149: PUSH
85150: EMPTY
85151: LIST
85152: LIST
85153: LIST
85154: PUSH
85155: LD_VAR 0 1
85159: ARRAY
85160: ST_TO_ADDR
85161: GO 85487
85163: LD_INT 18
85165: DOUBLE
85166: EQUAL
85167: IFTRUE 85171
85169: GO 85182
85171: POP
// bc_type := b_ext_radar ; 19 :
85172: LD_ADDR_OWVAR 42
85176: PUSH
85177: LD_INT 20
85179: ST_TO_ADDR
85180: GO 85487
85182: LD_INT 19
85184: DOUBLE
85185: EQUAL
85186: IFTRUE 85190
85188: GO 85201
85190: POP
// bc_type := b_ext_radio ; 20 :
85191: LD_ADDR_OWVAR 42
85195: PUSH
85196: LD_INT 22
85198: ST_TO_ADDR
85199: GO 85487
85201: LD_INT 20
85203: DOUBLE
85204: EQUAL
85205: IFTRUE 85209
85207: GO 85220
85209: POP
// bc_type := b_ext_siberium ; 21 :
85210: LD_ADDR_OWVAR 42
85214: PUSH
85215: LD_INT 21
85217: ST_TO_ADDR
85218: GO 85487
85220: LD_INT 21
85222: DOUBLE
85223: EQUAL
85224: IFTRUE 85228
85226: GO 85239
85228: POP
// bc_type := b_ext_computer ; 22 :
85229: LD_ADDR_OWVAR 42
85233: PUSH
85234: LD_INT 24
85236: ST_TO_ADDR
85237: GO 85487
85239: LD_INT 22
85241: DOUBLE
85242: EQUAL
85243: IFTRUE 85247
85245: GO 85258
85247: POP
// bc_type := b_ext_track ; 23 :
85248: LD_ADDR_OWVAR 42
85252: PUSH
85253: LD_INT 16
85255: ST_TO_ADDR
85256: GO 85487
85258: LD_INT 23
85260: DOUBLE
85261: EQUAL
85262: IFTRUE 85266
85264: GO 85277
85266: POP
// bc_type := b_ext_laser ; 24 :
85267: LD_ADDR_OWVAR 42
85271: PUSH
85272: LD_INT 25
85274: ST_TO_ADDR
85275: GO 85487
85277: LD_INT 24
85279: DOUBLE
85280: EQUAL
85281: IFTRUE 85285
85283: GO 85296
85285: POP
// bc_type := b_control_tower ; 25 :
85286: LD_ADDR_OWVAR 42
85290: PUSH
85291: LD_INT 36
85293: ST_TO_ADDR
85294: GO 85487
85296: LD_INT 25
85298: DOUBLE
85299: EQUAL
85300: IFTRUE 85304
85302: GO 85315
85304: POP
// bc_type := b_breastwork ; 26 :
85305: LD_ADDR_OWVAR 42
85309: PUSH
85310: LD_INT 31
85312: ST_TO_ADDR
85313: GO 85487
85315: LD_INT 26
85317: DOUBLE
85318: EQUAL
85319: IFTRUE 85323
85321: GO 85334
85323: POP
// bc_type := b_bunker ; 27 :
85324: LD_ADDR_OWVAR 42
85328: PUSH
85329: LD_INT 32
85331: ST_TO_ADDR
85332: GO 85487
85334: LD_INT 27
85336: DOUBLE
85337: EQUAL
85338: IFTRUE 85342
85340: GO 85353
85342: POP
// bc_type := b_turret ; 28 :
85343: LD_ADDR_OWVAR 42
85347: PUSH
85348: LD_INT 33
85350: ST_TO_ADDR
85351: GO 85487
85353: LD_INT 28
85355: DOUBLE
85356: EQUAL
85357: IFTRUE 85361
85359: GO 85372
85361: POP
// bc_type := b_armoury ; 29 :
85362: LD_ADDR_OWVAR 42
85366: PUSH
85367: LD_INT 4
85369: ST_TO_ADDR
85370: GO 85487
85372: LD_INT 29
85374: DOUBLE
85375: EQUAL
85376: IFTRUE 85380
85378: GO 85391
85380: POP
// bc_type := b_barracks ; 30 :
85381: LD_ADDR_OWVAR 42
85385: PUSH
85386: LD_INT 5
85388: ST_TO_ADDR
85389: GO 85487
85391: LD_INT 30
85393: DOUBLE
85394: EQUAL
85395: IFTRUE 85399
85397: GO 85410
85399: POP
// bc_type := b_solar_power ; 31 :
85400: LD_ADDR_OWVAR 42
85404: PUSH
85405: LD_INT 27
85407: ST_TO_ADDR
85408: GO 85487
85410: LD_INT 31
85412: DOUBLE
85413: EQUAL
85414: IFTRUE 85418
85416: GO 85429
85418: POP
// bc_type := b_oil_power ; 32 :
85419: LD_ADDR_OWVAR 42
85423: PUSH
85424: LD_INT 26
85426: ST_TO_ADDR
85427: GO 85487
85429: LD_INT 32
85431: DOUBLE
85432: EQUAL
85433: IFTRUE 85437
85435: GO 85448
85437: POP
// bc_type := b_siberite_power ; 33 :
85438: LD_ADDR_OWVAR 42
85442: PUSH
85443: LD_INT 28
85445: ST_TO_ADDR
85446: GO 85487
85448: LD_INT 33
85450: DOUBLE
85451: EQUAL
85452: IFTRUE 85456
85454: GO 85467
85456: POP
// bc_type := b_oil_mine ; 34 :
85457: LD_ADDR_OWVAR 42
85461: PUSH
85462: LD_INT 29
85464: ST_TO_ADDR
85465: GO 85487
85467: LD_INT 34
85469: DOUBLE
85470: EQUAL
85471: IFTRUE 85475
85473: GO 85486
85475: POP
// bc_type := b_siberite_mine ; end ;
85476: LD_ADDR_OWVAR 42
85480: PUSH
85481: LD_INT 30
85483: ST_TO_ADDR
85484: GO 85487
85486: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
85487: LD_ADDR_VAR 0 8
85491: PUSH
85492: LD_VAR 0 5
85496: PPUSH
85497: LD_VAR 0 6
85501: PPUSH
85502: LD_VAR 0 3
85506: PPUSH
85507: CALL_OW 47
85511: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
85512: LD_OWVAR 42
85516: PUSH
85517: LD_INT 32
85519: PUSH
85520: LD_INT 33
85522: PUSH
85523: EMPTY
85524: LIST
85525: LIST
85526: IN
85527: IFFALSE 85543
// PlaceWeaponTurret ( b , weapon ) ;
85529: LD_VAR 0 8
85533: PPUSH
85534: LD_VAR 0 4
85538: PPUSH
85539: CALL_OW 431
// end ;
85543: LD_VAR 0 7
85547: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
85548: LD_INT 0
85550: PPUSH
85551: PPUSH
85552: PPUSH
85553: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
85554: LD_ADDR_VAR 0 4
85558: PUSH
85559: LD_INT 22
85561: PUSH
85562: LD_OWVAR 2
85566: PUSH
85567: EMPTY
85568: LIST
85569: LIST
85570: PUSH
85571: LD_INT 2
85573: PUSH
85574: LD_INT 30
85576: PUSH
85577: LD_INT 0
85579: PUSH
85580: EMPTY
85581: LIST
85582: LIST
85583: PUSH
85584: LD_INT 30
85586: PUSH
85587: LD_INT 1
85589: PUSH
85590: EMPTY
85591: LIST
85592: LIST
85593: PUSH
85594: EMPTY
85595: LIST
85596: LIST
85597: LIST
85598: PUSH
85599: EMPTY
85600: LIST
85601: LIST
85602: PPUSH
85603: CALL_OW 69
85607: ST_TO_ADDR
// if not tmp then
85608: LD_VAR 0 4
85612: NOT
85613: IFFALSE 85617
// exit ;
85615: GO 85676
// for i in tmp do
85617: LD_ADDR_VAR 0 2
85621: PUSH
85622: LD_VAR 0 4
85626: PUSH
85627: FOR_IN
85628: IFFALSE 85674
// for j = 1 to 3 do
85630: LD_ADDR_VAR 0 3
85634: PUSH
85635: DOUBLE
85636: LD_INT 1
85638: DEC
85639: ST_TO_ADDR
85640: LD_INT 3
85642: PUSH
85643: FOR_TO
85644: IFFALSE 85670
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
85646: LD_VAR 0 2
85650: PPUSH
85651: CALL_OW 274
85655: PPUSH
85656: LD_VAR 0 3
85660: PPUSH
85661: LD_INT 99999
85663: PPUSH
85664: CALL_OW 277
85668: GO 85643
85670: POP
85671: POP
85672: GO 85627
85674: POP
85675: POP
// end ;
85676: LD_VAR 0 1
85680: RET
// export function hHackSetLevel10 ; var i , j ; begin
85681: LD_INT 0
85683: PPUSH
85684: PPUSH
85685: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
85686: LD_ADDR_VAR 0 2
85690: PUSH
85691: LD_INT 21
85693: PUSH
85694: LD_INT 1
85696: PUSH
85697: EMPTY
85698: LIST
85699: LIST
85700: PPUSH
85701: CALL_OW 69
85705: PUSH
85706: FOR_IN
85707: IFFALSE 85759
// if IsSelected ( i ) then
85709: LD_VAR 0 2
85713: PPUSH
85714: CALL_OW 306
85718: IFFALSE 85757
// begin for j := 1 to 4 do
85720: LD_ADDR_VAR 0 3
85724: PUSH
85725: DOUBLE
85726: LD_INT 1
85728: DEC
85729: ST_TO_ADDR
85730: LD_INT 4
85732: PUSH
85733: FOR_TO
85734: IFFALSE 85755
// SetSkill ( i , j , 10 ) ;
85736: LD_VAR 0 2
85740: PPUSH
85741: LD_VAR 0 3
85745: PPUSH
85746: LD_INT 10
85748: PPUSH
85749: CALL_OW 237
85753: GO 85733
85755: POP
85756: POP
// end ;
85757: GO 85706
85759: POP
85760: POP
// end ;
85761: LD_VAR 0 1
85765: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
85766: LD_INT 0
85768: PPUSH
85769: PPUSH
85770: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
85771: LD_ADDR_VAR 0 2
85775: PUSH
85776: LD_INT 22
85778: PUSH
85779: LD_OWVAR 2
85783: PUSH
85784: EMPTY
85785: LIST
85786: LIST
85787: PUSH
85788: LD_INT 21
85790: PUSH
85791: LD_INT 1
85793: PUSH
85794: EMPTY
85795: LIST
85796: LIST
85797: PUSH
85798: EMPTY
85799: LIST
85800: LIST
85801: PPUSH
85802: CALL_OW 69
85806: PUSH
85807: FOR_IN
85808: IFFALSE 85849
// begin for j := 1 to 4 do
85810: LD_ADDR_VAR 0 3
85814: PUSH
85815: DOUBLE
85816: LD_INT 1
85818: DEC
85819: ST_TO_ADDR
85820: LD_INT 4
85822: PUSH
85823: FOR_TO
85824: IFFALSE 85845
// SetSkill ( i , j , 10 ) ;
85826: LD_VAR 0 2
85830: PPUSH
85831: LD_VAR 0 3
85835: PPUSH
85836: LD_INT 10
85838: PPUSH
85839: CALL_OW 237
85843: GO 85823
85845: POP
85846: POP
// end ;
85847: GO 85807
85849: POP
85850: POP
// end ;
85851: LD_VAR 0 1
85855: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
85856: LD_INT 0
85858: PPUSH
// uc_side := your_side ;
85859: LD_ADDR_OWVAR 20
85863: PUSH
85864: LD_OWVAR 2
85868: ST_TO_ADDR
// uc_nation := nation ;
85869: LD_ADDR_OWVAR 21
85873: PUSH
85874: LD_VAR 0 1
85878: ST_TO_ADDR
// InitHc ;
85879: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
85883: LD_INT 0
85885: PPUSH
85886: LD_VAR 0 2
85890: PPUSH
85891: LD_VAR 0 3
85895: PPUSH
85896: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
85900: LD_VAR 0 4
85904: PPUSH
85905: LD_VAR 0 5
85909: PPUSH
85910: CALL_OW 428
85914: PUSH
85915: LD_INT 0
85917: EQUAL
85918: IFFALSE 85942
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
85920: CALL_OW 44
85924: PPUSH
85925: LD_VAR 0 4
85929: PPUSH
85930: LD_VAR 0 5
85934: PPUSH
85935: LD_INT 1
85937: PPUSH
85938: CALL_OW 48
// end ;
85942: LD_VAR 0 6
85946: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
85947: LD_INT 0
85949: PPUSH
85950: PPUSH
// uc_side := your_side ;
85951: LD_ADDR_OWVAR 20
85955: PUSH
85956: LD_OWVAR 2
85960: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
85961: LD_VAR 0 1
85965: PUSH
85966: LD_INT 1
85968: PUSH
85969: LD_INT 2
85971: PUSH
85972: LD_INT 3
85974: PUSH
85975: LD_INT 4
85977: PUSH
85978: LD_INT 5
85980: PUSH
85981: EMPTY
85982: LIST
85983: LIST
85984: LIST
85985: LIST
85986: LIST
85987: IN
85988: IFFALSE 86000
// uc_nation := nation_american else
85990: LD_ADDR_OWVAR 21
85994: PUSH
85995: LD_INT 1
85997: ST_TO_ADDR
85998: GO 86043
// if chassis in [ 11 , 12 , 13 , 14 ] then
86000: LD_VAR 0 1
86004: PUSH
86005: LD_INT 11
86007: PUSH
86008: LD_INT 12
86010: PUSH
86011: LD_INT 13
86013: PUSH
86014: LD_INT 14
86016: PUSH
86017: EMPTY
86018: LIST
86019: LIST
86020: LIST
86021: LIST
86022: IN
86023: IFFALSE 86035
// uc_nation := nation_arabian else
86025: LD_ADDR_OWVAR 21
86029: PUSH
86030: LD_INT 2
86032: ST_TO_ADDR
86033: GO 86043
// uc_nation := nation_russian ;
86035: LD_ADDR_OWVAR 21
86039: PUSH
86040: LD_INT 3
86042: ST_TO_ADDR
// vc_chassis := chassis ;
86043: LD_ADDR_OWVAR 37
86047: PUSH
86048: LD_VAR 0 1
86052: ST_TO_ADDR
// vc_engine := engine ;
86053: LD_ADDR_OWVAR 39
86057: PUSH
86058: LD_VAR 0 2
86062: ST_TO_ADDR
// vc_control := control ;
86063: LD_ADDR_OWVAR 38
86067: PUSH
86068: LD_VAR 0 3
86072: ST_TO_ADDR
// vc_weapon := weapon ;
86073: LD_ADDR_OWVAR 40
86077: PUSH
86078: LD_VAR 0 4
86082: ST_TO_ADDR
// un := CreateVehicle ;
86083: LD_ADDR_VAR 0 8
86087: PUSH
86088: CALL_OW 45
86092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
86093: LD_VAR 0 8
86097: PPUSH
86098: LD_INT 0
86100: PPUSH
86101: LD_INT 5
86103: PPUSH
86104: CALL_OW 12
86108: PPUSH
86109: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
86113: LD_VAR 0 8
86117: PPUSH
86118: LD_VAR 0 5
86122: PPUSH
86123: LD_VAR 0 6
86127: PPUSH
86128: LD_INT 1
86130: PPUSH
86131: CALL_OW 48
// end ;
86135: LD_VAR 0 7
86139: RET
// export hInvincible ; every 1 do
86140: GO 86142
86142: DISABLE
// hInvincible := [ ] ;
86143: LD_ADDR_EXP 132
86147: PUSH
86148: EMPTY
86149: ST_TO_ADDR
86150: END
// every 10 do var i ;
86151: GO 86153
86153: DISABLE
86154: LD_INT 0
86156: PPUSH
// begin enable ;
86157: ENABLE
// if not hInvincible then
86158: LD_EXP 132
86162: NOT
86163: IFFALSE 86167
// exit ;
86165: GO 86211
// for i in hInvincible do
86167: LD_ADDR_VAR 0 1
86171: PUSH
86172: LD_EXP 132
86176: PUSH
86177: FOR_IN
86178: IFFALSE 86209
// if GetLives ( i ) < 1000 then
86180: LD_VAR 0 1
86184: PPUSH
86185: CALL_OW 256
86189: PUSH
86190: LD_INT 1000
86192: LESS
86193: IFFALSE 86207
// SetLives ( i , 1000 ) ;
86195: LD_VAR 0 1
86199: PPUSH
86200: LD_INT 1000
86202: PPUSH
86203: CALL_OW 234
86207: GO 86177
86209: POP
86210: POP
// end ;
86211: PPOPN 1
86213: END
// export function hHackInvincible ; var i ; begin
86214: LD_INT 0
86216: PPUSH
86217: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
86218: LD_ADDR_VAR 0 2
86222: PUSH
86223: LD_INT 2
86225: PUSH
86226: LD_INT 21
86228: PUSH
86229: LD_INT 1
86231: PUSH
86232: EMPTY
86233: LIST
86234: LIST
86235: PUSH
86236: LD_INT 21
86238: PUSH
86239: LD_INT 2
86241: PUSH
86242: EMPTY
86243: LIST
86244: LIST
86245: PUSH
86246: EMPTY
86247: LIST
86248: LIST
86249: LIST
86250: PPUSH
86251: CALL_OW 69
86255: PUSH
86256: FOR_IN
86257: IFFALSE 86318
// if IsSelected ( i ) then
86259: LD_VAR 0 2
86263: PPUSH
86264: CALL_OW 306
86268: IFFALSE 86316
// begin if i in hInvincible then
86270: LD_VAR 0 2
86274: PUSH
86275: LD_EXP 132
86279: IN
86280: IFFALSE 86300
// hInvincible := hInvincible diff i else
86282: LD_ADDR_EXP 132
86286: PUSH
86287: LD_EXP 132
86291: PUSH
86292: LD_VAR 0 2
86296: DIFF
86297: ST_TO_ADDR
86298: GO 86316
// hInvincible := hInvincible union i ;
86300: LD_ADDR_EXP 132
86304: PUSH
86305: LD_EXP 132
86309: PUSH
86310: LD_VAR 0 2
86314: UNION
86315: ST_TO_ADDR
// end ;
86316: GO 86256
86318: POP
86319: POP
// end ;
86320: LD_VAR 0 1
86324: RET
// export function hHackInvisible ; var i , j ; begin
86325: LD_INT 0
86327: PPUSH
86328: PPUSH
86329: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
86330: LD_ADDR_VAR 0 2
86334: PUSH
86335: LD_INT 21
86337: PUSH
86338: LD_INT 1
86340: PUSH
86341: EMPTY
86342: LIST
86343: LIST
86344: PPUSH
86345: CALL_OW 69
86349: PUSH
86350: FOR_IN
86351: IFFALSE 86375
// if IsSelected ( i ) then
86353: LD_VAR 0 2
86357: PPUSH
86358: CALL_OW 306
86362: IFFALSE 86373
// ComForceInvisible ( i ) ;
86364: LD_VAR 0 2
86368: PPUSH
86369: CALL_OW 496
86373: GO 86350
86375: POP
86376: POP
// end ;
86377: LD_VAR 0 1
86381: RET
// export function hHackChangeYourSide ; begin
86382: LD_INT 0
86384: PPUSH
// if your_side = 8 then
86385: LD_OWVAR 2
86389: PUSH
86390: LD_INT 8
86392: EQUAL
86393: IFFALSE 86405
// your_side := 0 else
86395: LD_ADDR_OWVAR 2
86399: PUSH
86400: LD_INT 0
86402: ST_TO_ADDR
86403: GO 86419
// your_side := your_side + 1 ;
86405: LD_ADDR_OWVAR 2
86409: PUSH
86410: LD_OWVAR 2
86414: PUSH
86415: LD_INT 1
86417: PLUS
86418: ST_TO_ADDR
// end ;
86419: LD_VAR 0 1
86423: RET
// export function hHackChangeUnitSide ; var i , j ; begin
86424: LD_INT 0
86426: PPUSH
86427: PPUSH
86428: PPUSH
// for i in all_units do
86429: LD_ADDR_VAR 0 2
86433: PUSH
86434: LD_OWVAR 3
86438: PUSH
86439: FOR_IN
86440: IFFALSE 86518
// if IsSelected ( i ) then
86442: LD_VAR 0 2
86446: PPUSH
86447: CALL_OW 306
86451: IFFALSE 86516
// begin j := GetSide ( i ) ;
86453: LD_ADDR_VAR 0 3
86457: PUSH
86458: LD_VAR 0 2
86462: PPUSH
86463: CALL_OW 255
86467: ST_TO_ADDR
// if j = 8 then
86468: LD_VAR 0 3
86472: PUSH
86473: LD_INT 8
86475: EQUAL
86476: IFFALSE 86488
// j := 0 else
86478: LD_ADDR_VAR 0 3
86482: PUSH
86483: LD_INT 0
86485: ST_TO_ADDR
86486: GO 86502
// j := j + 1 ;
86488: LD_ADDR_VAR 0 3
86492: PUSH
86493: LD_VAR 0 3
86497: PUSH
86498: LD_INT 1
86500: PLUS
86501: ST_TO_ADDR
// SetSide ( i , j ) ;
86502: LD_VAR 0 2
86506: PPUSH
86507: LD_VAR 0 3
86511: PPUSH
86512: CALL_OW 235
// end ;
86516: GO 86439
86518: POP
86519: POP
// end ;
86520: LD_VAR 0 1
86524: RET
// export function hHackFog ; begin
86525: LD_INT 0
86527: PPUSH
// FogOff ( true ) ;
86528: LD_INT 1
86530: PPUSH
86531: CALL_OW 344
// end ;
86535: LD_VAR 0 1
86539: RET
// export function hHackTeleport ( unit , x , y ) ; begin
86540: LD_INT 0
86542: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
86543: LD_VAR 0 1
86547: PPUSH
86548: LD_VAR 0 2
86552: PPUSH
86553: LD_VAR 0 3
86557: PPUSH
86558: LD_INT 1
86560: PPUSH
86561: LD_INT 1
86563: PPUSH
86564: CALL_OW 483
// CenterOnXY ( x , y ) ;
86568: LD_VAR 0 2
86572: PPUSH
86573: LD_VAR 0 3
86577: PPUSH
86578: CALL_OW 84
// end ;
86582: LD_VAR 0 4
86586: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
86587: LD_INT 0
86589: PPUSH
86590: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
86591: LD_VAR 0 1
86595: NOT
86596: PUSH
86597: LD_VAR 0 2
86601: PPUSH
86602: LD_VAR 0 3
86606: PPUSH
86607: CALL_OW 488
86611: NOT
86612: OR
86613: PUSH
86614: LD_VAR 0 1
86618: PPUSH
86619: CALL_OW 266
86623: PUSH
86624: LD_INT 3
86626: NONEQUAL
86627: PUSH
86628: LD_VAR 0 1
86632: PPUSH
86633: CALL_OW 247
86637: PUSH
86638: LD_INT 1
86640: EQUAL
86641: NOT
86642: AND
86643: OR
86644: IFFALSE 86648
// exit ;
86646: GO 86797
// if GetType ( factory ) = unit_human then
86648: LD_VAR 0 1
86652: PPUSH
86653: CALL_OW 247
86657: PUSH
86658: LD_INT 1
86660: EQUAL
86661: IFFALSE 86678
// factory := IsInUnit ( factory ) ;
86663: LD_ADDR_VAR 0 1
86667: PUSH
86668: LD_VAR 0 1
86672: PPUSH
86673: CALL_OW 310
86677: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
86678: LD_VAR 0 1
86682: PPUSH
86683: CALL_OW 266
86687: PUSH
86688: LD_INT 3
86690: NONEQUAL
86691: IFFALSE 86695
// exit ;
86693: GO 86797
// if HexInfo ( x , y ) = factory then
86695: LD_VAR 0 2
86699: PPUSH
86700: LD_VAR 0 3
86704: PPUSH
86705: CALL_OW 428
86709: PUSH
86710: LD_VAR 0 1
86714: EQUAL
86715: IFFALSE 86742
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
86717: LD_ADDR_EXP 133
86721: PUSH
86722: LD_EXP 133
86726: PPUSH
86727: LD_VAR 0 1
86731: PPUSH
86732: LD_INT 0
86734: PPUSH
86735: CALL_OW 1
86739: ST_TO_ADDR
86740: GO 86793
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
86742: LD_ADDR_EXP 133
86746: PUSH
86747: LD_EXP 133
86751: PPUSH
86752: LD_VAR 0 1
86756: PPUSH
86757: LD_VAR 0 1
86761: PPUSH
86762: CALL_OW 255
86766: PUSH
86767: LD_VAR 0 1
86771: PUSH
86772: LD_VAR 0 2
86776: PUSH
86777: LD_VAR 0 3
86781: PUSH
86782: EMPTY
86783: LIST
86784: LIST
86785: LIST
86786: LIST
86787: PPUSH
86788: CALL_OW 1
86792: ST_TO_ADDR
// UpdateFactoryWaypoints ;
86793: CALL 86802 0 0
// end ;
86797: LD_VAR 0 4
86801: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
86802: LD_INT 0
86804: PPUSH
86805: PPUSH
86806: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
86807: LD_STRING resetFactoryWaypoint();
86809: PPUSH
86810: CALL_OW 559
// if factoryWaypoints then
86814: LD_EXP 133
86818: IFFALSE 86944
// begin list := PrepareArray ( factoryWaypoints ) ;
86820: LD_ADDR_VAR 0 3
86824: PUSH
86825: LD_EXP 133
86829: PPUSH
86830: CALL 70757 0 1
86834: ST_TO_ADDR
// for i := 1 to list do
86835: LD_ADDR_VAR 0 2
86839: PUSH
86840: DOUBLE
86841: LD_INT 1
86843: DEC
86844: ST_TO_ADDR
86845: LD_VAR 0 3
86849: PUSH
86850: FOR_TO
86851: IFFALSE 86942
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
86853: LD_STRING setFactoryWaypointXY(
86855: PUSH
86856: LD_VAR 0 3
86860: PUSH
86861: LD_VAR 0 2
86865: ARRAY
86866: PUSH
86867: LD_INT 1
86869: ARRAY
86870: STR
86871: PUSH
86872: LD_STRING ,
86874: STR
86875: PUSH
86876: LD_VAR 0 3
86880: PUSH
86881: LD_VAR 0 2
86885: ARRAY
86886: PUSH
86887: LD_INT 2
86889: ARRAY
86890: STR
86891: PUSH
86892: LD_STRING ,
86894: STR
86895: PUSH
86896: LD_VAR 0 3
86900: PUSH
86901: LD_VAR 0 2
86905: ARRAY
86906: PUSH
86907: LD_INT 3
86909: ARRAY
86910: STR
86911: PUSH
86912: LD_STRING ,
86914: STR
86915: PUSH
86916: LD_VAR 0 3
86920: PUSH
86921: LD_VAR 0 2
86925: ARRAY
86926: PUSH
86927: LD_INT 4
86929: ARRAY
86930: STR
86931: PUSH
86932: LD_STRING )
86934: STR
86935: PPUSH
86936: CALL_OW 559
86940: GO 86850
86942: POP
86943: POP
// end ; end ;
86944: LD_VAR 0 1
86948: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
86949: LD_INT 0
86951: PPUSH
// if HexInfo ( x , y ) = warehouse then
86952: LD_VAR 0 2
86956: PPUSH
86957: LD_VAR 0 3
86961: PPUSH
86962: CALL_OW 428
86966: PUSH
86967: LD_VAR 0 1
86971: EQUAL
86972: IFFALSE 86999
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
86974: LD_ADDR_EXP 134
86978: PUSH
86979: LD_EXP 134
86983: PPUSH
86984: LD_VAR 0 1
86988: PPUSH
86989: LD_INT 0
86991: PPUSH
86992: CALL_OW 1
86996: ST_TO_ADDR
86997: GO 87050
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
86999: LD_ADDR_EXP 134
87003: PUSH
87004: LD_EXP 134
87008: PPUSH
87009: LD_VAR 0 1
87013: PPUSH
87014: LD_VAR 0 1
87018: PPUSH
87019: CALL_OW 255
87023: PUSH
87024: LD_VAR 0 1
87028: PUSH
87029: LD_VAR 0 2
87033: PUSH
87034: LD_VAR 0 3
87038: PUSH
87039: EMPTY
87040: LIST
87041: LIST
87042: LIST
87043: LIST
87044: PPUSH
87045: CALL_OW 1
87049: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
87050: CALL 87059 0 0
// end ;
87054: LD_VAR 0 4
87058: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
87059: LD_INT 0
87061: PPUSH
87062: PPUSH
87063: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
87064: LD_STRING resetWarehouseGatheringPoints();
87066: PPUSH
87067: CALL_OW 559
// if warehouseGatheringPoints then
87071: LD_EXP 134
87075: IFFALSE 87201
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
87077: LD_ADDR_VAR 0 3
87081: PUSH
87082: LD_EXP 134
87086: PPUSH
87087: CALL 70757 0 1
87091: ST_TO_ADDR
// for i := 1 to list do
87092: LD_ADDR_VAR 0 2
87096: PUSH
87097: DOUBLE
87098: LD_INT 1
87100: DEC
87101: ST_TO_ADDR
87102: LD_VAR 0 3
87106: PUSH
87107: FOR_TO
87108: IFFALSE 87199
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
87110: LD_STRING setWarehouseGatheringPointXY(
87112: PUSH
87113: LD_VAR 0 3
87117: PUSH
87118: LD_VAR 0 2
87122: ARRAY
87123: PUSH
87124: LD_INT 1
87126: ARRAY
87127: STR
87128: PUSH
87129: LD_STRING ,
87131: STR
87132: PUSH
87133: LD_VAR 0 3
87137: PUSH
87138: LD_VAR 0 2
87142: ARRAY
87143: PUSH
87144: LD_INT 2
87146: ARRAY
87147: STR
87148: PUSH
87149: LD_STRING ,
87151: STR
87152: PUSH
87153: LD_VAR 0 3
87157: PUSH
87158: LD_VAR 0 2
87162: ARRAY
87163: PUSH
87164: LD_INT 3
87166: ARRAY
87167: STR
87168: PUSH
87169: LD_STRING ,
87171: STR
87172: PUSH
87173: LD_VAR 0 3
87177: PUSH
87178: LD_VAR 0 2
87182: ARRAY
87183: PUSH
87184: LD_INT 4
87186: ARRAY
87187: STR
87188: PUSH
87189: LD_STRING )
87191: STR
87192: PPUSH
87193: CALL_OW 559
87197: GO 87107
87199: POP
87200: POP
// end ; end ;
87201: LD_VAR 0 1
87205: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
87206: LD_EXP 134
87210: IFFALSE 87895
87212: GO 87214
87214: DISABLE
87215: LD_INT 0
87217: PPUSH
87218: PPUSH
87219: PPUSH
87220: PPUSH
87221: PPUSH
87222: PPUSH
87223: PPUSH
87224: PPUSH
87225: PPUSH
// begin enable ;
87226: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
87227: LD_ADDR_VAR 0 3
87231: PUSH
87232: LD_EXP 134
87236: PPUSH
87237: CALL 70757 0 1
87241: ST_TO_ADDR
// if not list then
87242: LD_VAR 0 3
87246: NOT
87247: IFFALSE 87251
// exit ;
87249: GO 87895
// for i := 1 to list do
87251: LD_ADDR_VAR 0 1
87255: PUSH
87256: DOUBLE
87257: LD_INT 1
87259: DEC
87260: ST_TO_ADDR
87261: LD_VAR 0 3
87265: PUSH
87266: FOR_TO
87267: IFFALSE 87893
// begin depot := list [ i ] [ 2 ] ;
87269: LD_ADDR_VAR 0 8
87273: PUSH
87274: LD_VAR 0 3
87278: PUSH
87279: LD_VAR 0 1
87283: ARRAY
87284: PUSH
87285: LD_INT 2
87287: ARRAY
87288: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
87289: LD_ADDR_VAR 0 5
87293: PUSH
87294: LD_VAR 0 3
87298: PUSH
87299: LD_VAR 0 1
87303: ARRAY
87304: PUSH
87305: LD_INT 1
87307: ARRAY
87308: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
87309: LD_VAR 0 8
87313: PPUSH
87314: CALL_OW 301
87318: PUSH
87319: LD_VAR 0 5
87323: PUSH
87324: LD_VAR 0 8
87328: PPUSH
87329: CALL_OW 255
87333: NONEQUAL
87334: OR
87335: IFFALSE 87364
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
87337: LD_ADDR_EXP 134
87341: PUSH
87342: LD_EXP 134
87346: PPUSH
87347: LD_VAR 0 8
87351: PPUSH
87352: LD_INT 0
87354: PPUSH
87355: CALL_OW 1
87359: ST_TO_ADDR
// exit ;
87360: POP
87361: POP
87362: GO 87895
// end ; x := list [ i ] [ 3 ] ;
87364: LD_ADDR_VAR 0 6
87368: PUSH
87369: LD_VAR 0 3
87373: PUSH
87374: LD_VAR 0 1
87378: ARRAY
87379: PUSH
87380: LD_INT 3
87382: ARRAY
87383: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
87384: LD_ADDR_VAR 0 7
87388: PUSH
87389: LD_VAR 0 3
87393: PUSH
87394: LD_VAR 0 1
87398: ARRAY
87399: PUSH
87400: LD_INT 4
87402: ARRAY
87403: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
87404: LD_ADDR_VAR 0 9
87408: PUSH
87409: LD_VAR 0 6
87413: PPUSH
87414: LD_VAR 0 7
87418: PPUSH
87419: LD_INT 16
87421: PPUSH
87422: CALL 69345 0 3
87426: ST_TO_ADDR
// if not cratesNearbyPoint then
87427: LD_VAR 0 9
87431: NOT
87432: IFFALSE 87438
// exit ;
87434: POP
87435: POP
87436: GO 87895
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
87438: LD_ADDR_VAR 0 4
87442: PUSH
87443: LD_INT 22
87445: PUSH
87446: LD_VAR 0 5
87450: PUSH
87451: EMPTY
87452: LIST
87453: LIST
87454: PUSH
87455: LD_INT 3
87457: PUSH
87458: LD_INT 60
87460: PUSH
87461: EMPTY
87462: LIST
87463: PUSH
87464: EMPTY
87465: LIST
87466: LIST
87467: PUSH
87468: LD_INT 91
87470: PUSH
87471: LD_VAR 0 8
87475: PUSH
87476: LD_INT 6
87478: PUSH
87479: EMPTY
87480: LIST
87481: LIST
87482: LIST
87483: PUSH
87484: LD_INT 2
87486: PUSH
87487: LD_INT 25
87489: PUSH
87490: LD_INT 2
87492: PUSH
87493: EMPTY
87494: LIST
87495: LIST
87496: PUSH
87497: LD_INT 25
87499: PUSH
87500: LD_INT 16
87502: PUSH
87503: EMPTY
87504: LIST
87505: LIST
87506: PUSH
87507: EMPTY
87508: LIST
87509: LIST
87510: LIST
87511: PUSH
87512: EMPTY
87513: LIST
87514: LIST
87515: LIST
87516: LIST
87517: PPUSH
87518: CALL_OW 69
87522: PUSH
87523: LD_VAR 0 8
87527: PPUSH
87528: CALL_OW 313
87532: PPUSH
87533: LD_INT 3
87535: PUSH
87536: LD_INT 60
87538: PUSH
87539: EMPTY
87540: LIST
87541: PUSH
87542: EMPTY
87543: LIST
87544: LIST
87545: PUSH
87546: LD_INT 2
87548: PUSH
87549: LD_INT 25
87551: PUSH
87552: LD_INT 2
87554: PUSH
87555: EMPTY
87556: LIST
87557: LIST
87558: PUSH
87559: LD_INT 25
87561: PUSH
87562: LD_INT 16
87564: PUSH
87565: EMPTY
87566: LIST
87567: LIST
87568: PUSH
87569: EMPTY
87570: LIST
87571: LIST
87572: LIST
87573: PUSH
87574: EMPTY
87575: LIST
87576: LIST
87577: PPUSH
87578: CALL_OW 72
87582: UNION
87583: ST_TO_ADDR
// if tmp then
87584: LD_VAR 0 4
87588: IFFALSE 87668
// begin tmp := ShrinkArray ( tmp , 3 ) ;
87590: LD_ADDR_VAR 0 4
87594: PUSH
87595: LD_VAR 0 4
87599: PPUSH
87600: LD_INT 3
87602: PPUSH
87603: CALL 67314 0 2
87607: ST_TO_ADDR
// for j in tmp do
87608: LD_ADDR_VAR 0 2
87612: PUSH
87613: LD_VAR 0 4
87617: PUSH
87618: FOR_IN
87619: IFFALSE 87662
// begin if IsInUnit ( j ) then
87621: LD_VAR 0 2
87625: PPUSH
87626: CALL_OW 310
87630: IFFALSE 87641
// ComExit ( j ) ;
87632: LD_VAR 0 2
87636: PPUSH
87637: CALL 67397 0 1
// AddComCollect ( j , x , y ) ;
87641: LD_VAR 0 2
87645: PPUSH
87646: LD_VAR 0 6
87650: PPUSH
87651: LD_VAR 0 7
87655: PPUSH
87656: CALL_OW 177
// end ;
87660: GO 87618
87662: POP
87663: POP
// exit ;
87664: POP
87665: POP
87666: GO 87895
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
87668: LD_ADDR_VAR 0 4
87672: PUSH
87673: LD_INT 22
87675: PUSH
87676: LD_VAR 0 5
87680: PUSH
87681: EMPTY
87682: LIST
87683: LIST
87684: PUSH
87685: LD_INT 91
87687: PUSH
87688: LD_VAR 0 8
87692: PUSH
87693: LD_INT 8
87695: PUSH
87696: EMPTY
87697: LIST
87698: LIST
87699: LIST
87700: PUSH
87701: LD_INT 2
87703: PUSH
87704: LD_INT 34
87706: PUSH
87707: LD_INT 12
87709: PUSH
87710: EMPTY
87711: LIST
87712: LIST
87713: PUSH
87714: LD_INT 34
87716: PUSH
87717: LD_INT 51
87719: PUSH
87720: EMPTY
87721: LIST
87722: LIST
87723: PUSH
87724: LD_INT 34
87726: PUSH
87727: LD_INT 32
87729: PUSH
87730: EMPTY
87731: LIST
87732: LIST
87733: PUSH
87734: LD_INT 34
87736: PUSH
87737: LD_INT 89
87739: PUSH
87740: EMPTY
87741: LIST
87742: LIST
87743: PUSH
87744: EMPTY
87745: LIST
87746: LIST
87747: LIST
87748: LIST
87749: LIST
87750: PUSH
87751: EMPTY
87752: LIST
87753: LIST
87754: LIST
87755: PPUSH
87756: CALL_OW 69
87760: ST_TO_ADDR
// if tmp then
87761: LD_VAR 0 4
87765: IFFALSE 87891
// begin for j in tmp do
87767: LD_ADDR_VAR 0 2
87771: PUSH
87772: LD_VAR 0 4
87776: PUSH
87777: FOR_IN
87778: IFFALSE 87889
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
87780: LD_VAR 0 2
87784: PPUSH
87785: CALL_OW 262
87789: PUSH
87790: LD_INT 3
87792: EQUAL
87793: PUSH
87794: LD_VAR 0 2
87798: PPUSH
87799: CALL_OW 261
87803: PUSH
87804: LD_INT 20
87806: GREATER
87807: OR
87808: PUSH
87809: LD_VAR 0 2
87813: PPUSH
87814: CALL_OW 314
87818: NOT
87819: AND
87820: PUSH
87821: LD_VAR 0 2
87825: PPUSH
87826: CALL_OW 263
87830: PUSH
87831: LD_INT 1
87833: NONEQUAL
87834: PUSH
87835: LD_VAR 0 2
87839: PPUSH
87840: CALL_OW 311
87844: OR
87845: AND
87846: IFFALSE 87887
// begin ComCollect ( j , x , y ) ;
87848: LD_VAR 0 2
87852: PPUSH
87853: LD_VAR 0 6
87857: PPUSH
87858: LD_VAR 0 7
87862: PPUSH
87863: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
87867: LD_VAR 0 2
87871: PPUSH
87872: LD_VAR 0 8
87876: PPUSH
87877: CALL_OW 172
// exit ;
87881: POP
87882: POP
87883: POP
87884: POP
87885: GO 87895
// end ;
87887: GO 87777
87889: POP
87890: POP
// end ; end ;
87891: GO 87266
87893: POP
87894: POP
// end ; end_of_file
87895: PPOPN 9
87897: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
87898: LD_VAR 0 1
87902: PUSH
87903: LD_INT 200
87905: DOUBLE
87906: GREATEREQUAL
87907: IFFALSE 87915
87909: LD_INT 299
87911: DOUBLE
87912: LESSEQUAL
87913: IFTRUE 87917
87915: GO 87949
87917: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
87918: LD_VAR 0 1
87922: PPUSH
87923: LD_VAR 0 2
87927: PPUSH
87928: LD_VAR 0 3
87932: PPUSH
87933: LD_VAR 0 4
87937: PPUSH
87938: LD_VAR 0 5
87942: PPUSH
87943: CALL 88437 0 5
87947: GO 88026
87949: LD_INT 300
87951: DOUBLE
87952: GREATEREQUAL
87953: IFFALSE 87961
87955: LD_INT 399
87957: DOUBLE
87958: LESSEQUAL
87959: IFTRUE 87963
87961: GO 88025
87963: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
87964: LD_VAR 0 1
87968: PPUSH
87969: LD_VAR 0 2
87973: PPUSH
87974: LD_VAR 0 3
87978: PPUSH
87979: LD_VAR 0 4
87983: PPUSH
87984: LD_VAR 0 5
87988: PPUSH
87989: LD_VAR 0 6
87993: PPUSH
87994: LD_VAR 0 7
87998: PPUSH
87999: LD_VAR 0 8
88003: PPUSH
88004: LD_VAR 0 9
88008: PPUSH
88009: LD_VAR 0 10
88013: PPUSH
88014: LD_VAR 0 11
88018: PPUSH
88019: CALL 84599 0 11
88023: GO 88026
88025: POP
// end ;
88026: PPOPN 11
88028: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
88029: LD_VAR 0 1
88033: PPUSH
88034: LD_VAR 0 2
88038: PPUSH
88039: LD_VAR 0 3
88043: PPUSH
88044: LD_VAR 0 4
88048: PPUSH
88049: LD_VAR 0 5
88053: PPUSH
88054: CALL 88173 0 5
// end ; end_of_file
88058: PPOPN 5
88060: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
88061: LD_INT 0
88063: PPUSH
88064: PPUSH
88065: PPUSH
88066: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
88067: LD_VAR 0 1
88071: PPUSH
88072: CALL_OW 264
88076: PUSH
88077: LD_INT 91
88079: EQUAL
88080: IFFALSE 88152
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
88082: LD_INT 68
88084: PPUSH
88085: LD_VAR 0 1
88089: PPUSH
88090: CALL_OW 255
88094: PPUSH
88095: CALL_OW 321
88099: PUSH
88100: LD_INT 2
88102: EQUAL
88103: IFFALSE 88115
// eff := 70 else
88105: LD_ADDR_VAR 0 4
88109: PUSH
88110: LD_INT 70
88112: ST_TO_ADDR
88113: GO 88123
// eff := 30 ;
88115: LD_ADDR_VAR 0 4
88119: PUSH
88120: LD_INT 30
88122: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
88123: LD_VAR 0 1
88127: PPUSH
88128: CALL_OW 250
88132: PPUSH
88133: LD_VAR 0 1
88137: PPUSH
88138: CALL_OW 251
88142: PPUSH
88143: LD_VAR 0 4
88147: PPUSH
88148: CALL_OW 495
// end ; end ;
88152: LD_VAR 0 2
88156: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
88157: LD_INT 0
88159: PPUSH
// end ;
88160: LD_VAR 0 4
88164: RET
// export function SOS_Command ( cmd ) ; begin
88165: LD_INT 0
88167: PPUSH
// end ;
88168: LD_VAR 0 2
88172: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
88173: LD_INT 0
88175: PPUSH
// end ;
88176: LD_VAR 0 6
88180: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
88181: LD_INT 0
88183: PPUSH
88184: PPUSH
// if not vehicle or not factory then
88185: LD_VAR 0 1
88189: NOT
88190: PUSH
88191: LD_VAR 0 2
88195: NOT
88196: OR
88197: IFFALSE 88201
// exit ;
88199: GO 88432
// if factoryWaypoints >= factory then
88201: LD_EXP 133
88205: PUSH
88206: LD_VAR 0 2
88210: GREATEREQUAL
88211: IFFALSE 88432
// if factoryWaypoints [ factory ] then
88213: LD_EXP 133
88217: PUSH
88218: LD_VAR 0 2
88222: ARRAY
88223: IFFALSE 88432
// begin if GetControl ( vehicle ) = control_manual then
88225: LD_VAR 0 1
88229: PPUSH
88230: CALL_OW 263
88234: PUSH
88235: LD_INT 1
88237: EQUAL
88238: IFFALSE 88319
// begin driver := IsDrivenBy ( vehicle ) ;
88240: LD_ADDR_VAR 0 4
88244: PUSH
88245: LD_VAR 0 1
88249: PPUSH
88250: CALL_OW 311
88254: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88255: LD_VAR 0 4
88259: PPUSH
88260: LD_EXP 133
88264: PUSH
88265: LD_VAR 0 2
88269: ARRAY
88270: PUSH
88271: LD_INT 3
88273: ARRAY
88274: PPUSH
88275: LD_EXP 133
88279: PUSH
88280: LD_VAR 0 2
88284: ARRAY
88285: PUSH
88286: LD_INT 4
88288: ARRAY
88289: PPUSH
88290: CALL_OW 171
// AddComExitVehicle ( driver ) ;
88294: LD_VAR 0 4
88298: PPUSH
88299: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
88303: LD_VAR 0 4
88307: PPUSH
88308: LD_VAR 0 2
88312: PPUSH
88313: CALL_OW 180
// end else
88317: GO 88432
// if GetControl ( vehicle ) = control_remote then
88319: LD_VAR 0 1
88323: PPUSH
88324: CALL_OW 263
88328: PUSH
88329: LD_INT 2
88331: EQUAL
88332: IFFALSE 88393
// begin wait ( 0 0$2 ) ;
88334: LD_INT 70
88336: PPUSH
88337: CALL_OW 67
// if Connect ( vehicle ) then
88341: LD_VAR 0 1
88345: PPUSH
88346: CALL 37616 0 1
88350: IFFALSE 88391
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88352: LD_VAR 0 1
88356: PPUSH
88357: LD_EXP 133
88361: PUSH
88362: LD_VAR 0 2
88366: ARRAY
88367: PUSH
88368: LD_INT 3
88370: ARRAY
88371: PPUSH
88372: LD_EXP 133
88376: PUSH
88377: LD_VAR 0 2
88381: ARRAY
88382: PUSH
88383: LD_INT 4
88385: ARRAY
88386: PPUSH
88387: CALL_OW 171
// end else
88391: GO 88432
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
88393: LD_VAR 0 1
88397: PPUSH
88398: LD_EXP 133
88402: PUSH
88403: LD_VAR 0 2
88407: ARRAY
88408: PUSH
88409: LD_INT 3
88411: ARRAY
88412: PPUSH
88413: LD_EXP 133
88417: PUSH
88418: LD_VAR 0 2
88422: ARRAY
88423: PUSH
88424: LD_INT 4
88426: ARRAY
88427: PPUSH
88428: CALL_OW 171
// end ; end ;
88432: LD_VAR 0 3
88436: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
88437: LD_INT 0
88439: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
88440: LD_VAR 0 1
88444: PUSH
88445: LD_INT 250
88447: EQUAL
88448: PUSH
88449: LD_VAR 0 2
88453: PPUSH
88454: CALL_OW 264
88458: PUSH
88459: LD_INT 81
88461: EQUAL
88462: AND
88463: IFFALSE 88484
// MinerPlaceMine ( unit , x , y ) ;
88465: LD_VAR 0 2
88469: PPUSH
88470: LD_VAR 0 4
88474: PPUSH
88475: LD_VAR 0 5
88479: PPUSH
88480: CALL 91474 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
88484: LD_VAR 0 1
88488: PUSH
88489: LD_INT 251
88491: EQUAL
88492: PUSH
88493: LD_VAR 0 2
88497: PPUSH
88498: CALL_OW 264
88502: PUSH
88503: LD_INT 81
88505: EQUAL
88506: AND
88507: IFFALSE 88528
// MinerDetonateMine ( unit , x , y ) ;
88509: LD_VAR 0 2
88513: PPUSH
88514: LD_VAR 0 4
88518: PPUSH
88519: LD_VAR 0 5
88523: PPUSH
88524: CALL 91749 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
88528: LD_VAR 0 1
88532: PUSH
88533: LD_INT 252
88535: EQUAL
88536: PUSH
88537: LD_VAR 0 2
88541: PPUSH
88542: CALL_OW 264
88546: PUSH
88547: LD_INT 81
88549: EQUAL
88550: AND
88551: IFFALSE 88572
// MinerCreateMinefield ( unit , x , y ) ;
88553: LD_VAR 0 2
88557: PPUSH
88558: LD_VAR 0 4
88562: PPUSH
88563: LD_VAR 0 5
88567: PPUSH
88568: CALL 92166 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
88572: LD_VAR 0 1
88576: PUSH
88577: LD_INT 253
88579: EQUAL
88580: PUSH
88581: LD_VAR 0 2
88585: PPUSH
88586: CALL_OW 257
88590: PUSH
88591: LD_INT 5
88593: EQUAL
88594: AND
88595: IFFALSE 88616
// ComBinocular ( unit , x , y ) ;
88597: LD_VAR 0 2
88601: PPUSH
88602: LD_VAR 0 4
88606: PPUSH
88607: LD_VAR 0 5
88611: PPUSH
88612: CALL 92535 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
88616: LD_VAR 0 1
88620: PUSH
88621: LD_INT 254
88623: EQUAL
88624: PUSH
88625: LD_VAR 0 2
88629: PPUSH
88630: CALL_OW 264
88634: PUSH
88635: LD_INT 99
88637: EQUAL
88638: AND
88639: PUSH
88640: LD_VAR 0 3
88644: PPUSH
88645: CALL_OW 263
88649: PUSH
88650: LD_INT 3
88652: EQUAL
88653: AND
88654: IFFALSE 88670
// HackDestroyVehicle ( unit , selectedUnit ) ;
88656: LD_VAR 0 2
88660: PPUSH
88661: LD_VAR 0 3
88665: PPUSH
88666: CALL 90838 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
88670: LD_VAR 0 1
88674: PUSH
88675: LD_INT 255
88677: EQUAL
88678: PUSH
88679: LD_VAR 0 2
88683: PPUSH
88684: CALL_OW 264
88688: PUSH
88689: LD_INT 14
88691: PUSH
88692: LD_INT 53
88694: PUSH
88695: EMPTY
88696: LIST
88697: LIST
88698: IN
88699: AND
88700: PUSH
88701: LD_VAR 0 4
88705: PPUSH
88706: LD_VAR 0 5
88710: PPUSH
88711: CALL_OW 488
88715: AND
88716: IFFALSE 88740
// CutTreeXYR ( unit , x , y , 12 ) ;
88718: LD_VAR 0 2
88722: PPUSH
88723: LD_VAR 0 4
88727: PPUSH
88728: LD_VAR 0 5
88732: PPUSH
88733: LD_INT 12
88735: PPUSH
88736: CALL 88835 0 4
// if cmd = 256 then
88740: LD_VAR 0 1
88744: PUSH
88745: LD_INT 256
88747: EQUAL
88748: IFFALSE 88769
// SetFactoryWaypoint ( unit , x , y ) ;
88750: LD_VAR 0 2
88754: PPUSH
88755: LD_VAR 0 4
88759: PPUSH
88760: LD_VAR 0 5
88764: PPUSH
88765: CALL 86587 0 3
// if cmd = 257 then
88769: LD_VAR 0 1
88773: PUSH
88774: LD_INT 257
88776: EQUAL
88777: IFFALSE 88798
// SetWarehouseGatheringPoint ( unit , x , y ) ;
88779: LD_VAR 0 2
88783: PPUSH
88784: LD_VAR 0 4
88788: PPUSH
88789: LD_VAR 0 5
88793: PPUSH
88794: CALL 86949 0 3
// if cmd = 258 then
88798: LD_VAR 0 1
88802: PUSH
88803: LD_INT 258
88805: EQUAL
88806: IFFALSE 88830
// BurnTreeXYR ( unit , x , y , 8 ) ;
88808: LD_VAR 0 2
88812: PPUSH
88813: LD_VAR 0 4
88817: PPUSH
88818: LD_VAR 0 5
88822: PPUSH
88823: LD_INT 8
88825: PPUSH
88826: CALL 89229 0 4
// end ;
88830: LD_VAR 0 6
88834: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
88835: LD_INT 0
88837: PPUSH
88838: PPUSH
88839: PPUSH
88840: PPUSH
88841: PPUSH
88842: PPUSH
88843: PPUSH
88844: PPUSH
88845: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
88846: LD_VAR 0 1
88850: PPUSH
88851: CALL_OW 302
88855: NOT
88856: PUSH
88857: LD_VAR 0 2
88861: PPUSH
88862: LD_VAR 0 3
88866: PPUSH
88867: CALL_OW 488
88871: NOT
88872: OR
88873: PUSH
88874: LD_VAR 0 4
88878: NOT
88879: OR
88880: IFFALSE 88884
// exit ;
88882: GO 89224
// list := [ ] ;
88884: LD_ADDR_VAR 0 13
88888: PUSH
88889: EMPTY
88890: ST_TO_ADDR
// if x - r < 0 then
88891: LD_VAR 0 2
88895: PUSH
88896: LD_VAR 0 4
88900: MINUS
88901: PUSH
88902: LD_INT 0
88904: LESS
88905: IFFALSE 88917
// min_x := 0 else
88907: LD_ADDR_VAR 0 7
88911: PUSH
88912: LD_INT 0
88914: ST_TO_ADDR
88915: GO 88933
// min_x := x - r ;
88917: LD_ADDR_VAR 0 7
88921: PUSH
88922: LD_VAR 0 2
88926: PUSH
88927: LD_VAR 0 4
88931: MINUS
88932: ST_TO_ADDR
// if y - r < 0 then
88933: LD_VAR 0 3
88937: PUSH
88938: LD_VAR 0 4
88942: MINUS
88943: PUSH
88944: LD_INT 0
88946: LESS
88947: IFFALSE 88959
// min_y := 0 else
88949: LD_ADDR_VAR 0 8
88953: PUSH
88954: LD_INT 0
88956: ST_TO_ADDR
88957: GO 88975
// min_y := y - r ;
88959: LD_ADDR_VAR 0 8
88963: PUSH
88964: LD_VAR 0 3
88968: PUSH
88969: LD_VAR 0 4
88973: MINUS
88974: ST_TO_ADDR
// max_x := x + r ;
88975: LD_ADDR_VAR 0 9
88979: PUSH
88980: LD_VAR 0 2
88984: PUSH
88985: LD_VAR 0 4
88989: PLUS
88990: ST_TO_ADDR
// max_y := y + r ;
88991: LD_ADDR_VAR 0 10
88995: PUSH
88996: LD_VAR 0 3
89000: PUSH
89001: LD_VAR 0 4
89005: PLUS
89006: ST_TO_ADDR
// for _x = min_x to max_x do
89007: LD_ADDR_VAR 0 11
89011: PUSH
89012: DOUBLE
89013: LD_VAR 0 7
89017: DEC
89018: ST_TO_ADDR
89019: LD_VAR 0 9
89023: PUSH
89024: FOR_TO
89025: IFFALSE 89142
// for _y = min_y to max_y do
89027: LD_ADDR_VAR 0 12
89031: PUSH
89032: DOUBLE
89033: LD_VAR 0 8
89037: DEC
89038: ST_TO_ADDR
89039: LD_VAR 0 10
89043: PUSH
89044: FOR_TO
89045: IFFALSE 89138
// begin if not ValidHex ( _x , _y ) then
89047: LD_VAR 0 11
89051: PPUSH
89052: LD_VAR 0 12
89056: PPUSH
89057: CALL_OW 488
89061: NOT
89062: IFFALSE 89066
// continue ;
89064: GO 89044
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89066: LD_VAR 0 11
89070: PPUSH
89071: LD_VAR 0 12
89075: PPUSH
89076: CALL_OW 351
89080: PUSH
89081: LD_VAR 0 11
89085: PPUSH
89086: LD_VAR 0 12
89090: PPUSH
89091: CALL_OW 554
89095: AND
89096: IFFALSE 89136
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89098: LD_ADDR_VAR 0 13
89102: PUSH
89103: LD_VAR 0 13
89107: PPUSH
89108: LD_VAR 0 13
89112: PUSH
89113: LD_INT 1
89115: PLUS
89116: PPUSH
89117: LD_VAR 0 11
89121: PUSH
89122: LD_VAR 0 12
89126: PUSH
89127: EMPTY
89128: LIST
89129: LIST
89130: PPUSH
89131: CALL_OW 2
89135: ST_TO_ADDR
// end ;
89136: GO 89044
89138: POP
89139: POP
89140: GO 89024
89142: POP
89143: POP
// if not list then
89144: LD_VAR 0 13
89148: NOT
89149: IFFALSE 89153
// exit ;
89151: GO 89224
// for i in list do
89153: LD_ADDR_VAR 0 6
89157: PUSH
89158: LD_VAR 0 13
89162: PUSH
89163: FOR_IN
89164: IFFALSE 89222
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
89166: LD_VAR 0 1
89170: PPUSH
89171: LD_STRING M
89173: PUSH
89174: LD_VAR 0 6
89178: PUSH
89179: LD_INT 1
89181: ARRAY
89182: PUSH
89183: LD_VAR 0 6
89187: PUSH
89188: LD_INT 2
89190: ARRAY
89191: PUSH
89192: LD_INT 0
89194: PUSH
89195: LD_INT 0
89197: PUSH
89198: LD_INT 0
89200: PUSH
89201: LD_INT 0
89203: PUSH
89204: EMPTY
89205: LIST
89206: LIST
89207: LIST
89208: LIST
89209: LIST
89210: LIST
89211: LIST
89212: PUSH
89213: EMPTY
89214: LIST
89215: PPUSH
89216: CALL_OW 447
89220: GO 89163
89222: POP
89223: POP
// end ;
89224: LD_VAR 0 5
89228: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
89229: LD_INT 0
89231: PPUSH
89232: PPUSH
89233: PPUSH
89234: PPUSH
89235: PPUSH
89236: PPUSH
89237: PPUSH
89238: PPUSH
89239: PPUSH
89240: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
89241: LD_VAR 0 1
89245: PPUSH
89246: CALL_OW 302
89250: NOT
89251: PUSH
89252: LD_VAR 0 2
89256: PPUSH
89257: LD_VAR 0 3
89261: PPUSH
89262: CALL_OW 488
89266: NOT
89267: OR
89268: PUSH
89269: LD_VAR 0 4
89273: NOT
89274: OR
89275: IFFALSE 89279
// exit ;
89277: GO 89792
// list := [ ] ;
89279: LD_ADDR_VAR 0 13
89283: PUSH
89284: EMPTY
89285: ST_TO_ADDR
// if x - r < 0 then
89286: LD_VAR 0 2
89290: PUSH
89291: LD_VAR 0 4
89295: MINUS
89296: PUSH
89297: LD_INT 0
89299: LESS
89300: IFFALSE 89312
// min_x := 0 else
89302: LD_ADDR_VAR 0 7
89306: PUSH
89307: LD_INT 0
89309: ST_TO_ADDR
89310: GO 89328
// min_x := x - r ;
89312: LD_ADDR_VAR 0 7
89316: PUSH
89317: LD_VAR 0 2
89321: PUSH
89322: LD_VAR 0 4
89326: MINUS
89327: ST_TO_ADDR
// if y - r < 0 then
89328: LD_VAR 0 3
89332: PUSH
89333: LD_VAR 0 4
89337: MINUS
89338: PUSH
89339: LD_INT 0
89341: LESS
89342: IFFALSE 89354
// min_y := 0 else
89344: LD_ADDR_VAR 0 8
89348: PUSH
89349: LD_INT 0
89351: ST_TO_ADDR
89352: GO 89370
// min_y := y - r ;
89354: LD_ADDR_VAR 0 8
89358: PUSH
89359: LD_VAR 0 3
89363: PUSH
89364: LD_VAR 0 4
89368: MINUS
89369: ST_TO_ADDR
// max_x := x + r ;
89370: LD_ADDR_VAR 0 9
89374: PUSH
89375: LD_VAR 0 2
89379: PUSH
89380: LD_VAR 0 4
89384: PLUS
89385: ST_TO_ADDR
// max_y := y + r ;
89386: LD_ADDR_VAR 0 10
89390: PUSH
89391: LD_VAR 0 3
89395: PUSH
89396: LD_VAR 0 4
89400: PLUS
89401: ST_TO_ADDR
// for _x = min_x to max_x do
89402: LD_ADDR_VAR 0 11
89406: PUSH
89407: DOUBLE
89408: LD_VAR 0 7
89412: DEC
89413: ST_TO_ADDR
89414: LD_VAR 0 9
89418: PUSH
89419: FOR_TO
89420: IFFALSE 89537
// for _y = min_y to max_y do
89422: LD_ADDR_VAR 0 12
89426: PUSH
89427: DOUBLE
89428: LD_VAR 0 8
89432: DEC
89433: ST_TO_ADDR
89434: LD_VAR 0 10
89438: PUSH
89439: FOR_TO
89440: IFFALSE 89533
// begin if not ValidHex ( _x , _y ) then
89442: LD_VAR 0 11
89446: PPUSH
89447: LD_VAR 0 12
89451: PPUSH
89452: CALL_OW 488
89456: NOT
89457: IFFALSE 89461
// continue ;
89459: GO 89439
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
89461: LD_VAR 0 11
89465: PPUSH
89466: LD_VAR 0 12
89470: PPUSH
89471: CALL_OW 351
89475: PUSH
89476: LD_VAR 0 11
89480: PPUSH
89481: LD_VAR 0 12
89485: PPUSH
89486: CALL_OW 554
89490: AND
89491: IFFALSE 89531
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
89493: LD_ADDR_VAR 0 13
89497: PUSH
89498: LD_VAR 0 13
89502: PPUSH
89503: LD_VAR 0 13
89507: PUSH
89508: LD_INT 1
89510: PLUS
89511: PPUSH
89512: LD_VAR 0 11
89516: PUSH
89517: LD_VAR 0 12
89521: PUSH
89522: EMPTY
89523: LIST
89524: LIST
89525: PPUSH
89526: CALL_OW 2
89530: ST_TO_ADDR
// end ;
89531: GO 89439
89533: POP
89534: POP
89535: GO 89419
89537: POP
89538: POP
// if not list then
89539: LD_VAR 0 13
89543: NOT
89544: IFFALSE 89548
// exit ;
89546: GO 89792
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
89548: LD_ADDR_VAR 0 13
89552: PUSH
89553: LD_VAR 0 1
89557: PPUSH
89558: LD_VAR 0 13
89562: PPUSH
89563: LD_INT 1
89565: PPUSH
89566: LD_INT 1
89568: PPUSH
89569: CALL 34758 0 4
89573: ST_TO_ADDR
// ComStop ( flame ) ;
89574: LD_VAR 0 1
89578: PPUSH
89579: CALL_OW 141
// for i in list do
89583: LD_ADDR_VAR 0 6
89587: PUSH
89588: LD_VAR 0 13
89592: PUSH
89593: FOR_IN
89594: IFFALSE 89625
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
89596: LD_VAR 0 1
89600: PPUSH
89601: LD_VAR 0 6
89605: PUSH
89606: LD_INT 1
89608: ARRAY
89609: PPUSH
89610: LD_VAR 0 6
89614: PUSH
89615: LD_INT 2
89617: ARRAY
89618: PPUSH
89619: CALL_OW 176
89623: GO 89593
89625: POP
89626: POP
// repeat wait ( 0 0$1 ) ;
89627: LD_INT 35
89629: PPUSH
89630: CALL_OW 67
// task := GetTaskList ( flame ) ;
89634: LD_ADDR_VAR 0 14
89638: PUSH
89639: LD_VAR 0 1
89643: PPUSH
89644: CALL_OW 437
89648: ST_TO_ADDR
// if not task then
89649: LD_VAR 0 14
89653: NOT
89654: IFFALSE 89658
// exit ;
89656: GO 89792
// if task [ 1 ] [ 1 ] <> | then
89658: LD_VAR 0 14
89662: PUSH
89663: LD_INT 1
89665: ARRAY
89666: PUSH
89667: LD_INT 1
89669: ARRAY
89670: PUSH
89671: LD_STRING |
89673: NONEQUAL
89674: IFFALSE 89678
// exit ;
89676: GO 89792
// _x := task [ 1 ] [ 2 ] ;
89678: LD_ADDR_VAR 0 11
89682: PUSH
89683: LD_VAR 0 14
89687: PUSH
89688: LD_INT 1
89690: ARRAY
89691: PUSH
89692: LD_INT 2
89694: ARRAY
89695: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
89696: LD_ADDR_VAR 0 12
89700: PUSH
89701: LD_VAR 0 14
89705: PUSH
89706: LD_INT 1
89708: ARRAY
89709: PUSH
89710: LD_INT 3
89712: ARRAY
89713: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
89714: LD_VAR 0 11
89718: PPUSH
89719: LD_VAR 0 12
89723: PPUSH
89724: CALL_OW 351
89728: NOT
89729: PUSH
89730: LD_VAR 0 11
89734: PPUSH
89735: LD_VAR 0 12
89739: PPUSH
89740: CALL_OW 554
89744: NOT
89745: OR
89746: IFFALSE 89780
// begin task := Delete ( task , 1 ) ;
89748: LD_ADDR_VAR 0 14
89752: PUSH
89753: LD_VAR 0 14
89757: PPUSH
89758: LD_INT 1
89760: PPUSH
89761: CALL_OW 3
89765: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
89766: LD_VAR 0 1
89770: PPUSH
89771: LD_VAR 0 14
89775: PPUSH
89776: CALL_OW 446
// end ; until not HasTask ( flame ) ;
89780: LD_VAR 0 1
89784: PPUSH
89785: CALL_OW 314
89789: NOT
89790: IFFALSE 89627
// end ;
89792: LD_VAR 0 5
89796: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
89797: LD_EXP 136
89801: NOT
89802: IFFALSE 89852
89804: GO 89806
89806: DISABLE
// begin initHack := true ;
89807: LD_ADDR_EXP 136
89811: PUSH
89812: LD_INT 1
89814: ST_TO_ADDR
// hackTanks := [ ] ;
89815: LD_ADDR_EXP 137
89819: PUSH
89820: EMPTY
89821: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
89822: LD_ADDR_EXP 138
89826: PUSH
89827: EMPTY
89828: ST_TO_ADDR
// hackLimit := 3 ;
89829: LD_ADDR_EXP 139
89833: PUSH
89834: LD_INT 3
89836: ST_TO_ADDR
// hackDist := 12 ;
89837: LD_ADDR_EXP 140
89841: PUSH
89842: LD_INT 12
89844: ST_TO_ADDR
// hackCounter := [ ] ;
89845: LD_ADDR_EXP 141
89849: PUSH
89850: EMPTY
89851: ST_TO_ADDR
// end ;
89852: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
89853: LD_EXP 136
89857: PUSH
89858: LD_INT 34
89860: PUSH
89861: LD_INT 99
89863: PUSH
89864: EMPTY
89865: LIST
89866: LIST
89867: PPUSH
89868: CALL_OW 69
89872: AND
89873: IFFALSE 90126
89875: GO 89877
89877: DISABLE
89878: LD_INT 0
89880: PPUSH
89881: PPUSH
// begin enable ;
89882: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
89883: LD_ADDR_VAR 0 1
89887: PUSH
89888: LD_INT 34
89890: PUSH
89891: LD_INT 99
89893: PUSH
89894: EMPTY
89895: LIST
89896: LIST
89897: PPUSH
89898: CALL_OW 69
89902: PUSH
89903: FOR_IN
89904: IFFALSE 90124
// begin if not i in hackTanks then
89906: LD_VAR 0 1
89910: PUSH
89911: LD_EXP 137
89915: IN
89916: NOT
89917: IFFALSE 90000
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
89919: LD_ADDR_EXP 137
89923: PUSH
89924: LD_EXP 137
89928: PPUSH
89929: LD_EXP 137
89933: PUSH
89934: LD_INT 1
89936: PLUS
89937: PPUSH
89938: LD_VAR 0 1
89942: PPUSH
89943: CALL_OW 1
89947: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
89948: LD_ADDR_EXP 138
89952: PUSH
89953: LD_EXP 138
89957: PPUSH
89958: LD_EXP 138
89962: PUSH
89963: LD_INT 1
89965: PLUS
89966: PPUSH
89967: EMPTY
89968: PPUSH
89969: CALL_OW 1
89973: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
89974: LD_ADDR_EXP 141
89978: PUSH
89979: LD_EXP 141
89983: PPUSH
89984: LD_EXP 141
89988: PUSH
89989: LD_INT 1
89991: PLUS
89992: PPUSH
89993: EMPTY
89994: PPUSH
89995: CALL_OW 1
89999: ST_TO_ADDR
// end ; if not IsOk ( i ) then
90000: LD_VAR 0 1
90004: PPUSH
90005: CALL_OW 302
90009: NOT
90010: IFFALSE 90023
// begin HackUnlinkAll ( i ) ;
90012: LD_VAR 0 1
90016: PPUSH
90017: CALL 90129 0 1
// continue ;
90021: GO 89903
// end ; HackCheckCapturedStatus ( i ) ;
90023: LD_VAR 0 1
90027: PPUSH
90028: CALL 90572 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
90032: LD_ADDR_VAR 0 2
90036: PUSH
90037: LD_INT 81
90039: PUSH
90040: LD_VAR 0 1
90044: PPUSH
90045: CALL_OW 255
90049: PUSH
90050: EMPTY
90051: LIST
90052: LIST
90053: PUSH
90054: LD_INT 33
90056: PUSH
90057: LD_INT 3
90059: PUSH
90060: EMPTY
90061: LIST
90062: LIST
90063: PUSH
90064: LD_INT 91
90066: PUSH
90067: LD_VAR 0 1
90071: PUSH
90072: LD_EXP 140
90076: PUSH
90077: EMPTY
90078: LIST
90079: LIST
90080: LIST
90081: PUSH
90082: LD_INT 50
90084: PUSH
90085: EMPTY
90086: LIST
90087: PUSH
90088: EMPTY
90089: LIST
90090: LIST
90091: LIST
90092: LIST
90093: PPUSH
90094: CALL_OW 69
90098: ST_TO_ADDR
// if not tmp then
90099: LD_VAR 0 2
90103: NOT
90104: IFFALSE 90108
// continue ;
90106: GO 89903
// HackLink ( i , tmp ) ;
90108: LD_VAR 0 1
90112: PPUSH
90113: LD_VAR 0 2
90117: PPUSH
90118: CALL 90265 0 2
// end ;
90122: GO 89903
90124: POP
90125: POP
// end ;
90126: PPOPN 2
90128: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
90129: LD_INT 0
90131: PPUSH
90132: PPUSH
90133: PPUSH
// if not hack in hackTanks then
90134: LD_VAR 0 1
90138: PUSH
90139: LD_EXP 137
90143: IN
90144: NOT
90145: IFFALSE 90149
// exit ;
90147: GO 90260
// index := GetElementIndex ( hackTanks , hack ) ;
90149: LD_ADDR_VAR 0 4
90153: PUSH
90154: LD_EXP 137
90158: PPUSH
90159: LD_VAR 0 1
90163: PPUSH
90164: CALL 34055 0 2
90168: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
90169: LD_EXP 138
90173: PUSH
90174: LD_VAR 0 4
90178: ARRAY
90179: IFFALSE 90260
// begin for i in hackTanksCaptured [ index ] do
90181: LD_ADDR_VAR 0 3
90185: PUSH
90186: LD_EXP 138
90190: PUSH
90191: LD_VAR 0 4
90195: ARRAY
90196: PUSH
90197: FOR_IN
90198: IFFALSE 90224
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
90200: LD_VAR 0 3
90204: PUSH
90205: LD_INT 1
90207: ARRAY
90208: PPUSH
90209: LD_VAR 0 3
90213: PUSH
90214: LD_INT 2
90216: ARRAY
90217: PPUSH
90218: CALL_OW 235
90222: GO 90197
90224: POP
90225: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
90226: LD_ADDR_EXP 138
90230: PUSH
90231: LD_EXP 138
90235: PPUSH
90236: LD_VAR 0 4
90240: PPUSH
90241: EMPTY
90242: PPUSH
90243: CALL_OW 1
90247: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
90248: LD_VAR 0 1
90252: PPUSH
90253: LD_INT 0
90255: PPUSH
90256: CALL_OW 505
// end ; end ;
90260: LD_VAR 0 2
90264: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
90265: LD_INT 0
90267: PPUSH
90268: PPUSH
90269: PPUSH
// if not hack in hackTanks or not vehicles then
90270: LD_VAR 0 1
90274: PUSH
90275: LD_EXP 137
90279: IN
90280: NOT
90281: PUSH
90282: LD_VAR 0 2
90286: NOT
90287: OR
90288: IFFALSE 90292
// exit ;
90290: GO 90567
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
90292: LD_ADDR_VAR 0 2
90296: PUSH
90297: LD_VAR 0 1
90301: PPUSH
90302: LD_VAR 0 2
90306: PPUSH
90307: LD_INT 1
90309: PPUSH
90310: LD_INT 1
90312: PPUSH
90313: CALL 34705 0 4
90317: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
90318: LD_ADDR_VAR 0 5
90322: PUSH
90323: LD_EXP 137
90327: PPUSH
90328: LD_VAR 0 1
90332: PPUSH
90333: CALL 34055 0 2
90337: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
90338: LD_EXP 138
90342: PUSH
90343: LD_VAR 0 5
90347: ARRAY
90348: PUSH
90349: LD_EXP 139
90353: LESS
90354: IFFALSE 90543
// begin for i := 1 to vehicles do
90356: LD_ADDR_VAR 0 4
90360: PUSH
90361: DOUBLE
90362: LD_INT 1
90364: DEC
90365: ST_TO_ADDR
90366: LD_VAR 0 2
90370: PUSH
90371: FOR_TO
90372: IFFALSE 90541
// begin if hackTanksCaptured [ index ] = hackLimit then
90374: LD_EXP 138
90378: PUSH
90379: LD_VAR 0 5
90383: ARRAY
90384: PUSH
90385: LD_EXP 139
90389: EQUAL
90390: IFFALSE 90394
// break ;
90392: GO 90541
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
90394: LD_ADDR_EXP 141
90398: PUSH
90399: LD_EXP 141
90403: PPUSH
90404: LD_VAR 0 5
90408: PPUSH
90409: LD_EXP 141
90413: PUSH
90414: LD_VAR 0 5
90418: ARRAY
90419: PUSH
90420: LD_INT 1
90422: PLUS
90423: PPUSH
90424: CALL_OW 1
90428: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
90429: LD_ADDR_EXP 138
90433: PUSH
90434: LD_EXP 138
90438: PPUSH
90439: LD_VAR 0 5
90443: PUSH
90444: LD_EXP 138
90448: PUSH
90449: LD_VAR 0 5
90453: ARRAY
90454: PUSH
90455: LD_INT 1
90457: PLUS
90458: PUSH
90459: EMPTY
90460: LIST
90461: LIST
90462: PPUSH
90463: LD_VAR 0 2
90467: PUSH
90468: LD_VAR 0 4
90472: ARRAY
90473: PUSH
90474: LD_VAR 0 2
90478: PUSH
90479: LD_VAR 0 4
90483: ARRAY
90484: PPUSH
90485: CALL_OW 255
90489: PUSH
90490: EMPTY
90491: LIST
90492: LIST
90493: PPUSH
90494: CALL 34270 0 3
90498: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
90499: LD_VAR 0 2
90503: PUSH
90504: LD_VAR 0 4
90508: ARRAY
90509: PPUSH
90510: LD_VAR 0 1
90514: PPUSH
90515: CALL_OW 255
90519: PPUSH
90520: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
90524: LD_VAR 0 2
90528: PUSH
90529: LD_VAR 0 4
90533: ARRAY
90534: PPUSH
90535: CALL_OW 141
// end ;
90539: GO 90371
90541: POP
90542: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90543: LD_VAR 0 1
90547: PPUSH
90548: LD_EXP 138
90552: PUSH
90553: LD_VAR 0 5
90557: ARRAY
90558: PUSH
90559: LD_INT 0
90561: PLUS
90562: PPUSH
90563: CALL_OW 505
// end ;
90567: LD_VAR 0 3
90571: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
90572: LD_INT 0
90574: PPUSH
90575: PPUSH
90576: PPUSH
90577: PPUSH
// if not hack in hackTanks then
90578: LD_VAR 0 1
90582: PUSH
90583: LD_EXP 137
90587: IN
90588: NOT
90589: IFFALSE 90593
// exit ;
90591: GO 90833
// index := GetElementIndex ( hackTanks , hack ) ;
90593: LD_ADDR_VAR 0 4
90597: PUSH
90598: LD_EXP 137
90602: PPUSH
90603: LD_VAR 0 1
90607: PPUSH
90608: CALL 34055 0 2
90612: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
90613: LD_ADDR_VAR 0 3
90617: PUSH
90618: DOUBLE
90619: LD_EXP 138
90623: PUSH
90624: LD_VAR 0 4
90628: ARRAY
90629: INC
90630: ST_TO_ADDR
90631: LD_INT 1
90633: PUSH
90634: FOR_DOWNTO
90635: IFFALSE 90807
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
90637: LD_ADDR_VAR 0 5
90641: PUSH
90642: LD_EXP 138
90646: PUSH
90647: LD_VAR 0 4
90651: ARRAY
90652: PUSH
90653: LD_VAR 0 3
90657: ARRAY
90658: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
90659: LD_VAR 0 5
90663: PUSH
90664: LD_INT 1
90666: ARRAY
90667: PPUSH
90668: CALL_OW 302
90672: NOT
90673: PUSH
90674: LD_VAR 0 5
90678: PUSH
90679: LD_INT 1
90681: ARRAY
90682: PPUSH
90683: CALL_OW 255
90687: PUSH
90688: LD_VAR 0 1
90692: PPUSH
90693: CALL_OW 255
90697: NONEQUAL
90698: OR
90699: IFFALSE 90805
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
90701: LD_VAR 0 5
90705: PUSH
90706: LD_INT 1
90708: ARRAY
90709: PPUSH
90710: CALL_OW 305
90714: PUSH
90715: LD_VAR 0 5
90719: PUSH
90720: LD_INT 1
90722: ARRAY
90723: PPUSH
90724: CALL_OW 255
90728: PUSH
90729: LD_VAR 0 1
90733: PPUSH
90734: CALL_OW 255
90738: EQUAL
90739: AND
90740: IFFALSE 90764
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
90742: LD_VAR 0 5
90746: PUSH
90747: LD_INT 1
90749: ARRAY
90750: PPUSH
90751: LD_VAR 0 5
90755: PUSH
90756: LD_INT 2
90758: ARRAY
90759: PPUSH
90760: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
90764: LD_ADDR_EXP 138
90768: PUSH
90769: LD_EXP 138
90773: PPUSH
90774: LD_VAR 0 4
90778: PPUSH
90779: LD_EXP 138
90783: PUSH
90784: LD_VAR 0 4
90788: ARRAY
90789: PPUSH
90790: LD_VAR 0 3
90794: PPUSH
90795: CALL_OW 3
90799: PPUSH
90800: CALL_OW 1
90804: ST_TO_ADDR
// end ; end ;
90805: GO 90634
90807: POP
90808: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
90809: LD_VAR 0 1
90813: PPUSH
90814: LD_EXP 138
90818: PUSH
90819: LD_VAR 0 4
90823: ARRAY
90824: PUSH
90825: LD_INT 0
90827: PLUS
90828: PPUSH
90829: CALL_OW 505
// end ;
90833: LD_VAR 0 2
90837: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
90838: LD_INT 0
90840: PPUSH
90841: PPUSH
90842: PPUSH
90843: PPUSH
// if not hack in hackTanks then
90844: LD_VAR 0 1
90848: PUSH
90849: LD_EXP 137
90853: IN
90854: NOT
90855: IFFALSE 90859
// exit ;
90857: GO 90944
// index := GetElementIndex ( hackTanks , hack ) ;
90859: LD_ADDR_VAR 0 5
90863: PUSH
90864: LD_EXP 137
90868: PPUSH
90869: LD_VAR 0 1
90873: PPUSH
90874: CALL 34055 0 2
90878: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
90879: LD_ADDR_VAR 0 4
90883: PUSH
90884: DOUBLE
90885: LD_INT 1
90887: DEC
90888: ST_TO_ADDR
90889: LD_EXP 138
90893: PUSH
90894: LD_VAR 0 5
90898: ARRAY
90899: PUSH
90900: FOR_TO
90901: IFFALSE 90942
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
90903: LD_EXP 138
90907: PUSH
90908: LD_VAR 0 5
90912: ARRAY
90913: PUSH
90914: LD_VAR 0 4
90918: ARRAY
90919: PUSH
90920: LD_INT 1
90922: ARRAY
90923: PUSH
90924: LD_VAR 0 2
90928: EQUAL
90929: IFFALSE 90940
// KillUnit ( vehicle ) ;
90931: LD_VAR 0 2
90935: PPUSH
90936: CALL_OW 66
90940: GO 90900
90942: POP
90943: POP
// end ;
90944: LD_VAR 0 3
90948: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
90949: LD_EXP 142
90953: NOT
90954: IFFALSE 90989
90956: GO 90958
90958: DISABLE
// begin initMiner := true ;
90959: LD_ADDR_EXP 142
90963: PUSH
90964: LD_INT 1
90966: ST_TO_ADDR
// minersList := [ ] ;
90967: LD_ADDR_EXP 143
90971: PUSH
90972: EMPTY
90973: ST_TO_ADDR
// minerMinesList := [ ] ;
90974: LD_ADDR_EXP 144
90978: PUSH
90979: EMPTY
90980: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
90981: LD_ADDR_EXP 145
90985: PUSH
90986: LD_INT 5
90988: ST_TO_ADDR
// end ;
90989: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
90990: LD_EXP 142
90994: PUSH
90995: LD_INT 34
90997: PUSH
90998: LD_INT 81
91000: PUSH
91001: EMPTY
91002: LIST
91003: LIST
91004: PPUSH
91005: CALL_OW 69
91009: AND
91010: IFFALSE 91471
91012: GO 91014
91014: DISABLE
91015: LD_INT 0
91017: PPUSH
91018: PPUSH
91019: PPUSH
91020: PPUSH
// begin enable ;
91021: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
91022: LD_ADDR_VAR 0 1
91026: PUSH
91027: LD_INT 34
91029: PUSH
91030: LD_INT 81
91032: PUSH
91033: EMPTY
91034: LIST
91035: LIST
91036: PPUSH
91037: CALL_OW 69
91041: PUSH
91042: FOR_IN
91043: IFFALSE 91115
// begin if not i in minersList then
91045: LD_VAR 0 1
91049: PUSH
91050: LD_EXP 143
91054: IN
91055: NOT
91056: IFFALSE 91113
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
91058: LD_ADDR_EXP 143
91062: PUSH
91063: LD_EXP 143
91067: PPUSH
91068: LD_EXP 143
91072: PUSH
91073: LD_INT 1
91075: PLUS
91076: PPUSH
91077: LD_VAR 0 1
91081: PPUSH
91082: CALL_OW 1
91086: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
91087: LD_ADDR_EXP 144
91091: PUSH
91092: LD_EXP 144
91096: PPUSH
91097: LD_EXP 144
91101: PUSH
91102: LD_INT 1
91104: PLUS
91105: PPUSH
91106: EMPTY
91107: PPUSH
91108: CALL_OW 1
91112: ST_TO_ADDR
// end end ;
91113: GO 91042
91115: POP
91116: POP
// for i := minerMinesList downto 1 do
91117: LD_ADDR_VAR 0 1
91121: PUSH
91122: DOUBLE
91123: LD_EXP 144
91127: INC
91128: ST_TO_ADDR
91129: LD_INT 1
91131: PUSH
91132: FOR_DOWNTO
91133: IFFALSE 91469
// begin if IsLive ( minersList [ i ] ) then
91135: LD_EXP 143
91139: PUSH
91140: LD_VAR 0 1
91144: ARRAY
91145: PPUSH
91146: CALL_OW 300
91150: IFFALSE 91178
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
91152: LD_EXP 143
91156: PUSH
91157: LD_VAR 0 1
91161: ARRAY
91162: PPUSH
91163: LD_EXP 144
91167: PUSH
91168: LD_VAR 0 1
91172: ARRAY
91173: PPUSH
91174: CALL_OW 505
// if not minerMinesList [ i ] then
91178: LD_EXP 144
91182: PUSH
91183: LD_VAR 0 1
91187: ARRAY
91188: NOT
91189: IFFALSE 91193
// continue ;
91191: GO 91132
// for j := minerMinesList [ i ] downto 1 do
91193: LD_ADDR_VAR 0 2
91197: PUSH
91198: DOUBLE
91199: LD_EXP 144
91203: PUSH
91204: LD_VAR 0 1
91208: ARRAY
91209: INC
91210: ST_TO_ADDR
91211: LD_INT 1
91213: PUSH
91214: FOR_DOWNTO
91215: IFFALSE 91465
// begin side := GetSide ( minersList [ i ] ) ;
91217: LD_ADDR_VAR 0 3
91221: PUSH
91222: LD_EXP 143
91226: PUSH
91227: LD_VAR 0 1
91231: ARRAY
91232: PPUSH
91233: CALL_OW 255
91237: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
91238: LD_ADDR_VAR 0 4
91242: PUSH
91243: LD_EXP 144
91247: PUSH
91248: LD_VAR 0 1
91252: ARRAY
91253: PUSH
91254: LD_VAR 0 2
91258: ARRAY
91259: PUSH
91260: LD_INT 1
91262: ARRAY
91263: PPUSH
91264: LD_EXP 144
91268: PUSH
91269: LD_VAR 0 1
91273: ARRAY
91274: PUSH
91275: LD_VAR 0 2
91279: ARRAY
91280: PUSH
91281: LD_INT 2
91283: ARRAY
91284: PPUSH
91285: CALL_OW 428
91289: ST_TO_ADDR
// if not tmp then
91290: LD_VAR 0 4
91294: NOT
91295: IFFALSE 91299
// continue ;
91297: GO 91214
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
91299: LD_VAR 0 4
91303: PUSH
91304: LD_INT 81
91306: PUSH
91307: LD_VAR 0 3
91311: PUSH
91312: EMPTY
91313: LIST
91314: LIST
91315: PPUSH
91316: CALL_OW 69
91320: IN
91321: PUSH
91322: LD_EXP 144
91326: PUSH
91327: LD_VAR 0 1
91331: ARRAY
91332: PUSH
91333: LD_VAR 0 2
91337: ARRAY
91338: PUSH
91339: LD_INT 1
91341: ARRAY
91342: PPUSH
91343: LD_EXP 144
91347: PUSH
91348: LD_VAR 0 1
91352: ARRAY
91353: PUSH
91354: LD_VAR 0 2
91358: ARRAY
91359: PUSH
91360: LD_INT 2
91362: ARRAY
91363: PPUSH
91364: CALL_OW 458
91368: AND
91369: IFFALSE 91463
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
91371: LD_EXP 144
91375: PUSH
91376: LD_VAR 0 1
91380: ARRAY
91381: PUSH
91382: LD_VAR 0 2
91386: ARRAY
91387: PUSH
91388: LD_INT 1
91390: ARRAY
91391: PPUSH
91392: LD_EXP 144
91396: PUSH
91397: LD_VAR 0 1
91401: ARRAY
91402: PUSH
91403: LD_VAR 0 2
91407: ARRAY
91408: PUSH
91409: LD_INT 2
91411: ARRAY
91412: PPUSH
91413: LD_VAR 0 3
91417: PPUSH
91418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
91422: LD_ADDR_EXP 144
91426: PUSH
91427: LD_EXP 144
91431: PPUSH
91432: LD_VAR 0 1
91436: PPUSH
91437: LD_EXP 144
91441: PUSH
91442: LD_VAR 0 1
91446: ARRAY
91447: PPUSH
91448: LD_VAR 0 2
91452: PPUSH
91453: CALL_OW 3
91457: PPUSH
91458: CALL_OW 1
91462: ST_TO_ADDR
// end ; end ;
91463: GO 91214
91465: POP
91466: POP
// end ;
91467: GO 91132
91469: POP
91470: POP
// end ;
91471: PPOPN 4
91473: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
91474: LD_INT 0
91476: PPUSH
91477: PPUSH
// result := false ;
91478: LD_ADDR_VAR 0 4
91482: PUSH
91483: LD_INT 0
91485: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
91486: LD_VAR 0 1
91490: PPUSH
91491: CALL_OW 264
91495: PUSH
91496: LD_INT 81
91498: EQUAL
91499: NOT
91500: IFFALSE 91504
// exit ;
91502: GO 91744
// index := GetElementIndex ( minersList , unit ) ;
91504: LD_ADDR_VAR 0 5
91508: PUSH
91509: LD_EXP 143
91513: PPUSH
91514: LD_VAR 0 1
91518: PPUSH
91519: CALL 34055 0 2
91523: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
91524: LD_EXP 144
91528: PUSH
91529: LD_VAR 0 5
91533: ARRAY
91534: PUSH
91535: LD_EXP 145
91539: GREATEREQUAL
91540: IFFALSE 91544
// exit ;
91542: GO 91744
// ComMoveXY ( unit , x , y ) ;
91544: LD_VAR 0 1
91548: PPUSH
91549: LD_VAR 0 2
91553: PPUSH
91554: LD_VAR 0 3
91558: PPUSH
91559: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
91563: LD_INT 35
91565: PPUSH
91566: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
91570: LD_VAR 0 1
91574: PPUSH
91575: LD_VAR 0 2
91579: PPUSH
91580: LD_VAR 0 3
91584: PPUSH
91585: CALL 65796 0 3
91589: NOT
91590: PUSH
91591: LD_VAR 0 1
91595: PPUSH
91596: CALL_OW 314
91600: AND
91601: IFFALSE 91605
// exit ;
91603: GO 91744
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
91605: LD_VAR 0 2
91609: PPUSH
91610: LD_VAR 0 3
91614: PPUSH
91615: CALL_OW 428
91619: PUSH
91620: LD_VAR 0 1
91624: EQUAL
91625: PUSH
91626: LD_VAR 0 1
91630: PPUSH
91631: CALL_OW 314
91635: NOT
91636: AND
91637: IFFALSE 91563
// PlaySoundXY ( x , y , PlantMine ) ;
91639: LD_VAR 0 2
91643: PPUSH
91644: LD_VAR 0 3
91648: PPUSH
91649: LD_STRING PlantMine
91651: PPUSH
91652: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
91656: LD_VAR 0 2
91660: PPUSH
91661: LD_VAR 0 3
91665: PPUSH
91666: LD_VAR 0 1
91670: PPUSH
91671: CALL_OW 255
91675: PPUSH
91676: LD_INT 0
91678: PPUSH
91679: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
91683: LD_ADDR_EXP 144
91687: PUSH
91688: LD_EXP 144
91692: PPUSH
91693: LD_VAR 0 5
91697: PUSH
91698: LD_EXP 144
91702: PUSH
91703: LD_VAR 0 5
91707: ARRAY
91708: PUSH
91709: LD_INT 1
91711: PLUS
91712: PUSH
91713: EMPTY
91714: LIST
91715: LIST
91716: PPUSH
91717: LD_VAR 0 2
91721: PUSH
91722: LD_VAR 0 3
91726: PUSH
91727: EMPTY
91728: LIST
91729: LIST
91730: PPUSH
91731: CALL 34270 0 3
91735: ST_TO_ADDR
// result := true ;
91736: LD_ADDR_VAR 0 4
91740: PUSH
91741: LD_INT 1
91743: ST_TO_ADDR
// end ;
91744: LD_VAR 0 4
91748: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
91749: LD_INT 0
91751: PPUSH
91752: PPUSH
91753: PPUSH
// if not unit in minersList then
91754: LD_VAR 0 1
91758: PUSH
91759: LD_EXP 143
91763: IN
91764: NOT
91765: IFFALSE 91769
// exit ;
91767: GO 92161
// index := GetElementIndex ( minersList , unit ) ;
91769: LD_ADDR_VAR 0 6
91773: PUSH
91774: LD_EXP 143
91778: PPUSH
91779: LD_VAR 0 1
91783: PPUSH
91784: CALL 34055 0 2
91788: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
91789: LD_ADDR_VAR 0 5
91793: PUSH
91794: DOUBLE
91795: LD_EXP 144
91799: PUSH
91800: LD_VAR 0 6
91804: ARRAY
91805: INC
91806: ST_TO_ADDR
91807: LD_INT 1
91809: PUSH
91810: FOR_DOWNTO
91811: IFFALSE 91972
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
91813: LD_EXP 144
91817: PUSH
91818: LD_VAR 0 6
91822: ARRAY
91823: PUSH
91824: LD_VAR 0 5
91828: ARRAY
91829: PUSH
91830: LD_INT 1
91832: ARRAY
91833: PUSH
91834: LD_VAR 0 2
91838: EQUAL
91839: PUSH
91840: LD_EXP 144
91844: PUSH
91845: LD_VAR 0 6
91849: ARRAY
91850: PUSH
91851: LD_VAR 0 5
91855: ARRAY
91856: PUSH
91857: LD_INT 2
91859: ARRAY
91860: PUSH
91861: LD_VAR 0 3
91865: EQUAL
91866: AND
91867: IFFALSE 91970
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
91869: LD_EXP 144
91873: PUSH
91874: LD_VAR 0 6
91878: ARRAY
91879: PUSH
91880: LD_VAR 0 5
91884: ARRAY
91885: PUSH
91886: LD_INT 1
91888: ARRAY
91889: PPUSH
91890: LD_EXP 144
91894: PUSH
91895: LD_VAR 0 6
91899: ARRAY
91900: PUSH
91901: LD_VAR 0 5
91905: ARRAY
91906: PUSH
91907: LD_INT 2
91909: ARRAY
91910: PPUSH
91911: LD_VAR 0 1
91915: PPUSH
91916: CALL_OW 255
91920: PPUSH
91921: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
91925: LD_ADDR_EXP 144
91929: PUSH
91930: LD_EXP 144
91934: PPUSH
91935: LD_VAR 0 6
91939: PPUSH
91940: LD_EXP 144
91944: PUSH
91945: LD_VAR 0 6
91949: ARRAY
91950: PPUSH
91951: LD_VAR 0 5
91955: PPUSH
91956: CALL_OW 3
91960: PPUSH
91961: CALL_OW 1
91965: ST_TO_ADDR
// exit ;
91966: POP
91967: POP
91968: GO 92161
// end ; end ;
91970: GO 91810
91972: POP
91973: POP
// for i := minerMinesList [ index ] downto 1 do
91974: LD_ADDR_VAR 0 5
91978: PUSH
91979: DOUBLE
91980: LD_EXP 144
91984: PUSH
91985: LD_VAR 0 6
91989: ARRAY
91990: INC
91991: ST_TO_ADDR
91992: LD_INT 1
91994: PUSH
91995: FOR_DOWNTO
91996: IFFALSE 92159
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
91998: LD_EXP 144
92002: PUSH
92003: LD_VAR 0 6
92007: ARRAY
92008: PUSH
92009: LD_VAR 0 5
92013: ARRAY
92014: PUSH
92015: LD_INT 1
92017: ARRAY
92018: PPUSH
92019: LD_EXP 144
92023: PUSH
92024: LD_VAR 0 6
92028: ARRAY
92029: PUSH
92030: LD_VAR 0 5
92034: ARRAY
92035: PUSH
92036: LD_INT 2
92038: ARRAY
92039: PPUSH
92040: LD_VAR 0 2
92044: PPUSH
92045: LD_VAR 0 3
92049: PPUSH
92050: CALL_OW 298
92054: PUSH
92055: LD_INT 6
92057: LESS
92058: IFFALSE 92157
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
92060: LD_EXP 144
92064: PUSH
92065: LD_VAR 0 6
92069: ARRAY
92070: PUSH
92071: LD_VAR 0 5
92075: ARRAY
92076: PUSH
92077: LD_INT 1
92079: ARRAY
92080: PPUSH
92081: LD_EXP 144
92085: PUSH
92086: LD_VAR 0 6
92090: ARRAY
92091: PUSH
92092: LD_VAR 0 5
92096: ARRAY
92097: PUSH
92098: LD_INT 2
92100: ARRAY
92101: PPUSH
92102: LD_VAR 0 1
92106: PPUSH
92107: CALL_OW 255
92111: PPUSH
92112: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
92116: LD_ADDR_EXP 144
92120: PUSH
92121: LD_EXP 144
92125: PPUSH
92126: LD_VAR 0 6
92130: PPUSH
92131: LD_EXP 144
92135: PUSH
92136: LD_VAR 0 6
92140: ARRAY
92141: PPUSH
92142: LD_VAR 0 5
92146: PPUSH
92147: CALL_OW 3
92151: PPUSH
92152: CALL_OW 1
92156: ST_TO_ADDR
// end ; end ;
92157: GO 91995
92159: POP
92160: POP
// end ;
92161: LD_VAR 0 4
92165: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
92166: LD_INT 0
92168: PPUSH
92169: PPUSH
92170: PPUSH
92171: PPUSH
92172: PPUSH
92173: PPUSH
92174: PPUSH
92175: PPUSH
92176: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
92177: LD_VAR 0 1
92181: PPUSH
92182: CALL_OW 264
92186: PUSH
92187: LD_INT 81
92189: EQUAL
92190: NOT
92191: PUSH
92192: LD_VAR 0 1
92196: PUSH
92197: LD_EXP 143
92201: IN
92202: NOT
92203: OR
92204: IFFALSE 92208
// exit ;
92206: GO 92530
// index := GetElementIndex ( minersList , unit ) ;
92208: LD_ADDR_VAR 0 6
92212: PUSH
92213: LD_EXP 143
92217: PPUSH
92218: LD_VAR 0 1
92222: PPUSH
92223: CALL 34055 0 2
92227: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
92228: LD_ADDR_VAR 0 8
92232: PUSH
92233: LD_EXP 145
92237: PUSH
92238: LD_EXP 144
92242: PUSH
92243: LD_VAR 0 6
92247: ARRAY
92248: MINUS
92249: ST_TO_ADDR
// if not minesFreeAmount then
92250: LD_VAR 0 8
92254: NOT
92255: IFFALSE 92259
// exit ;
92257: GO 92530
// tmp := [ ] ;
92259: LD_ADDR_VAR 0 7
92263: PUSH
92264: EMPTY
92265: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
92266: LD_ADDR_VAR 0 5
92270: PUSH
92271: DOUBLE
92272: LD_INT 1
92274: DEC
92275: ST_TO_ADDR
92276: LD_VAR 0 8
92280: PUSH
92281: FOR_TO
92282: IFFALSE 92477
// begin _d := rand ( 0 , 5 ) ;
92284: LD_ADDR_VAR 0 11
92288: PUSH
92289: LD_INT 0
92291: PPUSH
92292: LD_INT 5
92294: PPUSH
92295: CALL_OW 12
92299: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
92300: LD_ADDR_VAR 0 12
92304: PUSH
92305: LD_INT 2
92307: PPUSH
92308: LD_INT 6
92310: PPUSH
92311: CALL_OW 12
92315: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
92316: LD_ADDR_VAR 0 9
92320: PUSH
92321: LD_VAR 0 2
92325: PPUSH
92326: LD_VAR 0 11
92330: PPUSH
92331: LD_VAR 0 12
92335: PPUSH
92336: CALL_OW 272
92340: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
92341: LD_ADDR_VAR 0 10
92345: PUSH
92346: LD_VAR 0 3
92350: PPUSH
92351: LD_VAR 0 11
92355: PPUSH
92356: LD_VAR 0 12
92360: PPUSH
92361: CALL_OW 273
92365: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
92366: LD_VAR 0 9
92370: PPUSH
92371: LD_VAR 0 10
92375: PPUSH
92376: CALL_OW 488
92380: PUSH
92381: LD_VAR 0 9
92385: PUSH
92386: LD_VAR 0 10
92390: PUSH
92391: EMPTY
92392: LIST
92393: LIST
92394: PUSH
92395: LD_VAR 0 7
92399: IN
92400: NOT
92401: AND
92402: PUSH
92403: LD_VAR 0 9
92407: PPUSH
92408: LD_VAR 0 10
92412: PPUSH
92413: CALL_OW 458
92417: NOT
92418: AND
92419: IFFALSE 92461
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
92421: LD_ADDR_VAR 0 7
92425: PUSH
92426: LD_VAR 0 7
92430: PPUSH
92431: LD_VAR 0 7
92435: PUSH
92436: LD_INT 1
92438: PLUS
92439: PPUSH
92440: LD_VAR 0 9
92444: PUSH
92445: LD_VAR 0 10
92449: PUSH
92450: EMPTY
92451: LIST
92452: LIST
92453: PPUSH
92454: CALL_OW 1
92458: ST_TO_ADDR
92459: GO 92475
// i := i - 1 ;
92461: LD_ADDR_VAR 0 5
92465: PUSH
92466: LD_VAR 0 5
92470: PUSH
92471: LD_INT 1
92473: MINUS
92474: ST_TO_ADDR
// end ;
92475: GO 92281
92477: POP
92478: POP
// for i in tmp do
92479: LD_ADDR_VAR 0 5
92483: PUSH
92484: LD_VAR 0 7
92488: PUSH
92489: FOR_IN
92490: IFFALSE 92528
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
92492: LD_VAR 0 1
92496: PPUSH
92497: LD_VAR 0 5
92501: PUSH
92502: LD_INT 1
92504: ARRAY
92505: PPUSH
92506: LD_VAR 0 5
92510: PUSH
92511: LD_INT 2
92513: ARRAY
92514: PPUSH
92515: CALL 91474 0 3
92519: NOT
92520: IFFALSE 92526
// exit ;
92522: POP
92523: POP
92524: GO 92530
92526: GO 92489
92528: POP
92529: POP
// end ;
92530: LD_VAR 0 4
92534: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
92535: LD_INT 0
92537: PPUSH
92538: PPUSH
92539: PPUSH
92540: PPUSH
92541: PPUSH
92542: PPUSH
92543: PPUSH
// if not GetClass ( unit ) = class_sniper then
92544: LD_VAR 0 1
92548: PPUSH
92549: CALL_OW 257
92553: PUSH
92554: LD_INT 5
92556: EQUAL
92557: NOT
92558: IFFALSE 92562
// exit ;
92560: GO 92950
// dist := 8 ;
92562: LD_ADDR_VAR 0 5
92566: PUSH
92567: LD_INT 8
92569: ST_TO_ADDR
// viewRange := 12 ;
92570: LD_ADDR_VAR 0 7
92574: PUSH
92575: LD_INT 12
92577: ST_TO_ADDR
// side := GetSide ( unit ) ;
92578: LD_ADDR_VAR 0 6
92582: PUSH
92583: LD_VAR 0 1
92587: PPUSH
92588: CALL_OW 255
92592: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
92593: LD_INT 61
92595: PPUSH
92596: LD_VAR 0 6
92600: PPUSH
92601: CALL_OW 321
92605: PUSH
92606: LD_INT 2
92608: EQUAL
92609: IFFALSE 92619
// viewRange := 16 ;
92611: LD_ADDR_VAR 0 7
92615: PUSH
92616: LD_INT 16
92618: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
92619: LD_VAR 0 1
92623: PPUSH
92624: LD_VAR 0 2
92628: PPUSH
92629: LD_VAR 0 3
92633: PPUSH
92634: CALL_OW 297
92638: PUSH
92639: LD_VAR 0 5
92643: GREATER
92644: IFFALSE 92723
// begin ComMoveXY ( unit , x , y ) ;
92646: LD_VAR 0 1
92650: PPUSH
92651: LD_VAR 0 2
92655: PPUSH
92656: LD_VAR 0 3
92660: PPUSH
92661: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
92665: LD_INT 35
92667: PPUSH
92668: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
92672: LD_VAR 0 1
92676: PPUSH
92677: LD_VAR 0 2
92681: PPUSH
92682: LD_VAR 0 3
92686: PPUSH
92687: CALL 65796 0 3
92691: NOT
92692: IFFALSE 92696
// exit ;
92694: GO 92950
// until GetDistUnitXY ( unit , x , y ) < dist ;
92696: LD_VAR 0 1
92700: PPUSH
92701: LD_VAR 0 2
92705: PPUSH
92706: LD_VAR 0 3
92710: PPUSH
92711: CALL_OW 297
92715: PUSH
92716: LD_VAR 0 5
92720: LESS
92721: IFFALSE 92665
// end ; ComTurnXY ( unit , x , y ) ;
92723: LD_VAR 0 1
92727: PPUSH
92728: LD_VAR 0 2
92732: PPUSH
92733: LD_VAR 0 3
92737: PPUSH
92738: CALL_OW 118
// wait ( 5 ) ;
92742: LD_INT 5
92744: PPUSH
92745: CALL_OW 67
// _d := GetDir ( unit ) ;
92749: LD_ADDR_VAR 0 10
92753: PUSH
92754: LD_VAR 0 1
92758: PPUSH
92759: CALL_OW 254
92763: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
92764: LD_ADDR_VAR 0 8
92768: PUSH
92769: LD_VAR 0 1
92773: PPUSH
92774: CALL_OW 250
92778: PPUSH
92779: LD_VAR 0 10
92783: PPUSH
92784: LD_VAR 0 5
92788: PPUSH
92789: CALL_OW 272
92793: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
92794: LD_ADDR_VAR 0 9
92798: PUSH
92799: LD_VAR 0 1
92803: PPUSH
92804: CALL_OW 251
92808: PPUSH
92809: LD_VAR 0 10
92813: PPUSH
92814: LD_VAR 0 5
92818: PPUSH
92819: CALL_OW 273
92823: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
92824: LD_VAR 0 8
92828: PPUSH
92829: LD_VAR 0 9
92833: PPUSH
92834: CALL_OW 488
92838: NOT
92839: IFFALSE 92843
// exit ;
92841: GO 92950
// ComAnimCustom ( unit , 1 ) ;
92843: LD_VAR 0 1
92847: PPUSH
92848: LD_INT 1
92850: PPUSH
92851: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
92855: LD_VAR 0 8
92859: PPUSH
92860: LD_VAR 0 9
92864: PPUSH
92865: LD_VAR 0 6
92869: PPUSH
92870: LD_VAR 0 7
92874: PPUSH
92875: CALL_OW 330
// repeat wait ( 1 ) ;
92879: LD_INT 1
92881: PPUSH
92882: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
92886: LD_VAR 0 1
92890: PPUSH
92891: CALL_OW 316
92895: PUSH
92896: LD_VAR 0 1
92900: PPUSH
92901: CALL_OW 314
92905: OR
92906: PUSH
92907: LD_VAR 0 1
92911: PPUSH
92912: CALL_OW 302
92916: NOT
92917: OR
92918: PUSH
92919: LD_VAR 0 1
92923: PPUSH
92924: CALL_OW 301
92928: OR
92929: IFFALSE 92879
// RemoveSeeing ( _x , _y , side ) ;
92931: LD_VAR 0 8
92935: PPUSH
92936: LD_VAR 0 9
92940: PPUSH
92941: LD_VAR 0 6
92945: PPUSH
92946: CALL_OW 331
// end ; end_of_file
92950: LD_VAR 0 4
92954: RET
// export function StopOriginalMusic ; begin
92955: LD_INT 0
92957: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(true); ) ;
92958: LD_STRING OW_FORCEMUSICDISABLE(true);
92960: PPUSH
92961: CALL_OW 559
// end ;
92965: LD_VAR 0 1
92969: RET
// export function PlayOriginalMusic ; begin
92970: LD_INT 0
92972: PPUSH
// ToLua ( OW_FORCEMUSICDISABLE(false); ) ;
92973: LD_STRING OW_FORCEMUSICDISABLE(false);
92975: PPUSH
92976: CALL_OW 559
// end ;
92980: LD_VAR 0 1
92984: RET
// export function PlayCustomMusic ( track , callback ) ; begin
92985: LD_INT 0
92987: PPUSH
// StopOriginalMusic ;
92988: CALL 92955 0 0
// ToLua ( playMusic(" & track & ", " & callback & ") ) ;
92992: LD_STRING playMusic("
92994: PUSH
92995: LD_VAR 0 1
92999: STR
93000: PUSH
93001: LD_STRING ", "
93003: STR
93004: PUSH
93005: LD_VAR 0 2
93009: STR
93010: PUSH
93011: LD_STRING ")
93013: STR
93014: PPUSH
93015: CALL_OW 559
// end ;
93019: LD_VAR 0 3
93023: RET
